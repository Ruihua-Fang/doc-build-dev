import{S as VCt,i as XCt,s as zCt,e as a,k as l,w as F,t as o,M as QCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as WCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as qIr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function HCt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Lw,af,Ne,Xe,ni,Mn,xw,En,Cn,$w,si,wn,kw,li,nf,va;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ri=a("code"),tf=o("model_type"),Kr=o(" attribute is set to the same key you use when registering the config (here "),ti=a("code"),ai=o('"new-model"'),Lw=o(")."),af=l(),Ne=a("p"),Xe=o("Likewise, if your "),ni=a("code"),Mn=o("NewModel"),xw=o(" is a subclass of "),En=a("a"),Cn=o("PreTrainedModel"),$w=o(`, make sure its
`),si=a("code"),wn=o("config_class"),kw=o(` attribute is set to the same class you use when registering the model (here
`),li=a("code"),nf=o("NewModelConfig"),va=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Xx=s(p);m=r(Xx,"NewModelConfig"),Xx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var ii=s(d);h=r(ii,"PretrainedConfig"),ii.forEach(t),Mo=r(Ae,`, make sure its
`),ri=n(Ae,"CODE",{});var zx=s(ri);tf=r(zx,"model_type"),zx.forEach(t),Kr=r(Ae," attribute is set to the same key you use when registering the config (here "),ti=n(Ae,"CODE",{});var Qx=s(ti);ai=r(Qx,'"new-model"'),Qx.forEach(t),Lw=r(Ae,")."),Ae.forEach(t),af=i(ze),Ne=n(ze,"P",{});var Eo=s(Ne);Xe=r(Eo,"Likewise, if your "),ni=n(Eo,"CODE",{});var Fa=s(ni);Mn=r(Fa,"NewModel"),Fa.forEach(t),xw=r(Eo," is a subclass of "),En=n(Eo,"A",{href:!0});var Wx=s(En);Cn=r(Wx,"PreTrainedModel"),Wx.forEach(t),$w=r(Eo,`, make sure its
`),si=n(Eo,"CODE",{});var sf=s(si);wn=r(sf,"config_class"),sf.forEach(t),kw=r(Eo,` attribute is set to the same class you use when registering the model (here
`),li=n(Eo,"CODE",{});var Hx=s(li);nf=r(Hx,"NewModelConfig"),Hx.forEach(t),va=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(En,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,ri),e(ri,tf),e(g,Kr),e(g,ti),e(ti,ai),e(g,Lw),b(ze,af,Ae),b(ze,Ne,Ae),e(Ne,Xe),e(Ne,ni),e(ni,Mn),e(Ne,xw),e(Ne,En),e(En,Cn),e(Ne,$w),e(Ne,si),e(si,wn),e(Ne,kw),e(Ne,li),e(li,nf),e(Ne,va)},d(ze){ze&&t(g),ze&&t(af),ze&&t(Ne)}}}function UCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function KCt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function e3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Twt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ewt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Awt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ywt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $wt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Swt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gwt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Owt(L){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vwt(L){let g,v,p,m,u,d,h,Mo,ri,tf,Kr,ti,ai,Lw,af,Ne,Xe,ni,Mn,xw,En,Cn,$w,si,wn,kw,li,nf,va,ze,Ae,Xx,ii,zx,Qx,Eo,Fa,Wx,sf,Hx,ZNe,WBe,di,lf,EZ,Sw,eje,CZ,oje,HBe,An,rje,wZ,tje,aje,AZ,nje,sje,UBe,Rw,JBe,Ux,lje,YBe,df,KBe,ci,cf,yZ,Bw,ije,LZ,dje,ZBe,Co,Pw,cje,Iw,fje,Jx,mje,gje,hje,qw,pje,xZ,uje,_je,bje,Mr,Nw,vje,$Z,Fje,Tje,fi,Mje,kZ,Eje,Cje,SZ,wje,Aje,yje,A,ff,RZ,Lje,xje,Yx,$je,kje,Sje,mf,BZ,Rje,Bje,Kx,Pje,Ije,qje,gf,PZ,Nje,jje,Zx,Dje,Gje,Oje,hf,IZ,Vje,Xje,e$,zje,Qje,Wje,pf,qZ,Hje,Uje,o$,Jje,Yje,Kje,uf,NZ,Zje,eDe,r$,oDe,rDe,tDe,_f,jZ,aDe,nDe,t$,sDe,lDe,iDe,bf,DZ,dDe,cDe,a$,fDe,mDe,gDe,vf,GZ,hDe,pDe,n$,uDe,_De,bDe,Ff,OZ,vDe,FDe,s$,TDe,MDe,EDe,Tf,VZ,CDe,wDe,l$,ADe,yDe,LDe,Mf,XZ,xDe,$De,i$,kDe,SDe,RDe,Ef,zZ,BDe,PDe,d$,IDe,qDe,NDe,Cf,QZ,jDe,DDe,c$,GDe,ODe,VDe,wf,WZ,XDe,zDe,f$,QDe,WDe,HDe,Af,HZ,UDe,JDe,m$,YDe,KDe,ZDe,yf,UZ,eGe,oGe,g$,rGe,tGe,aGe,Lf,JZ,nGe,sGe,h$,lGe,iGe,dGe,xf,YZ,cGe,fGe,p$,mGe,gGe,hGe,$f,KZ,pGe,uGe,u$,_Ge,bGe,vGe,kf,ZZ,FGe,TGe,_$,MGe,EGe,CGe,Sf,eee,wGe,AGe,b$,yGe,LGe,xGe,Rf,oee,$Ge,kGe,v$,SGe,RGe,BGe,Bf,ree,PGe,IGe,F$,qGe,NGe,jGe,Pf,tee,DGe,GGe,T$,OGe,VGe,XGe,If,aee,zGe,QGe,M$,WGe,HGe,UGe,qf,nee,JGe,YGe,E$,KGe,ZGe,eOe,Nf,see,oOe,rOe,C$,tOe,aOe,nOe,jf,lee,sOe,lOe,w$,iOe,dOe,cOe,Df,iee,fOe,mOe,A$,gOe,hOe,pOe,Gf,dee,uOe,_Oe,y$,bOe,vOe,FOe,Of,cee,TOe,MOe,L$,EOe,COe,wOe,Vf,fee,AOe,yOe,x$,LOe,xOe,$Oe,Xf,mee,kOe,SOe,$$,ROe,BOe,POe,zf,gee,IOe,qOe,k$,NOe,jOe,DOe,Qf,hee,GOe,OOe,S$,VOe,XOe,zOe,Wf,pee,QOe,WOe,R$,HOe,UOe,JOe,Hf,uee,YOe,KOe,B$,ZOe,eVe,oVe,Uf,_ee,rVe,tVe,P$,aVe,nVe,sVe,Jf,bee,lVe,iVe,I$,dVe,cVe,fVe,Yf,vee,mVe,gVe,q$,hVe,pVe,uVe,Kf,Fee,_Ve,bVe,N$,vVe,FVe,TVe,Zf,Tee,MVe,EVe,j$,CVe,wVe,AVe,em,Mee,yVe,LVe,D$,xVe,$Ve,kVe,om,Eee,SVe,RVe,G$,BVe,PVe,IVe,rm,Cee,qVe,NVe,O$,jVe,DVe,GVe,tm,wee,OVe,VVe,V$,XVe,zVe,QVe,am,Aee,WVe,HVe,X$,UVe,JVe,YVe,nm,yee,KVe,ZVe,z$,eXe,oXe,rXe,sm,Lee,tXe,aXe,Q$,nXe,sXe,lXe,lm,xee,iXe,dXe,W$,cXe,fXe,mXe,im,$ee,gXe,hXe,H$,pXe,uXe,_Xe,dm,kee,bXe,vXe,U$,FXe,TXe,MXe,cm,See,EXe,CXe,J$,wXe,AXe,yXe,fm,Ree,LXe,xXe,Y$,$Xe,kXe,SXe,mm,Bee,RXe,BXe,K$,PXe,IXe,qXe,gm,Pee,NXe,jXe,Z$,DXe,GXe,OXe,hm,Iee,VXe,XXe,ek,zXe,QXe,WXe,pm,qee,HXe,UXe,ok,JXe,YXe,KXe,um,Nee,ZXe,eze,rk,oze,rze,tze,_m,jee,aze,nze,tk,sze,lze,ize,bm,Dee,dze,cze,ak,fze,mze,gze,vm,Gee,hze,pze,nk,uze,_ze,bze,Fm,Oee,vze,Fze,sk,Tze,Mze,Eze,Tm,Vee,Cze,wze,lk,Aze,yze,Lze,Mm,Xee,xze,$ze,ik,kze,Sze,Rze,Em,zee,Bze,Pze,dk,Ize,qze,Nze,Cm,Qee,jze,Dze,ck,Gze,Oze,Vze,wm,Wee,Xze,zze,fk,Qze,Wze,Hze,Am,Hee,Uze,Jze,mk,Yze,Kze,Zze,ym,Uee,eQe,oQe,gk,rQe,tQe,aQe,Lm,Jee,nQe,sQe,hk,lQe,iQe,dQe,xm,Yee,cQe,fQe,pk,mQe,gQe,hQe,$m,Kee,pQe,uQe,uk,_Qe,bQe,vQe,km,Zee,FQe,TQe,_k,MQe,EQe,CQe,Sm,eoe,wQe,AQe,bk,yQe,LQe,xQe,Rm,ooe,$Qe,kQe,vk,SQe,RQe,BQe,Bm,roe,PQe,IQe,Fk,qQe,NQe,jQe,Pm,toe,DQe,GQe,Tk,OQe,VQe,XQe,Im,aoe,zQe,QQe,Mk,WQe,HQe,UQe,qm,noe,JQe,YQe,Ek,KQe,ZQe,eWe,Nm,soe,oWe,rWe,Ck,tWe,aWe,nWe,jm,loe,sWe,lWe,wk,iWe,dWe,cWe,Dm,ioe,fWe,mWe,Ak,gWe,hWe,pWe,Gm,doe,uWe,_We,yk,bWe,vWe,FWe,Om,coe,TWe,MWe,Lk,EWe,CWe,wWe,Vm,foe,AWe,yWe,xk,LWe,xWe,$We,Xm,moe,kWe,SWe,$k,RWe,BWe,PWe,zm,goe,IWe,qWe,kk,NWe,jWe,DWe,Qm,hoe,GWe,OWe,Sk,VWe,XWe,zWe,Wm,poe,QWe,WWe,Rk,HWe,UWe,JWe,Hm,uoe,YWe,KWe,Bk,ZWe,eHe,oHe,Um,_oe,rHe,tHe,Pk,aHe,nHe,sHe,Jm,boe,lHe,iHe,Ik,dHe,cHe,fHe,Ym,voe,mHe,gHe,qk,hHe,pHe,uHe,Km,Foe,_He,bHe,Nk,vHe,FHe,THe,Zm,Toe,MHe,EHe,jk,CHe,wHe,AHe,eg,Moe,yHe,LHe,Dk,xHe,$He,kHe,og,Eoe,SHe,RHe,Gk,BHe,PHe,IHe,rg,Coe,qHe,NHe,Ok,jHe,DHe,GHe,tg,woe,OHe,VHe,Vk,XHe,zHe,QHe,ag,Aoe,WHe,HHe,Xk,UHe,JHe,YHe,ng,yoe,KHe,ZHe,zk,eUe,oUe,rUe,sg,Loe,tUe,aUe,Qk,nUe,sUe,lUe,lg,iUe,ig,jw,dUe,xoe,cUe,ePe,mi,dg,$oe,Dw,fUe,koe,mUe,oPe,wo,Gw,gUe,Ow,hUe,Wk,pUe,uUe,_Ue,Vw,bUe,Soe,vUe,FUe,TUe,Er,Xw,MUe,Roe,EUe,CUe,Ta,wUe,Boe,AUe,yUe,Poe,LUe,xUe,Ioe,$Ue,kUe,SUe,k,yn,qoe,RUe,BUe,Hk,PUe,IUe,Uk,qUe,NUe,jUe,Ln,Noe,DUe,GUe,Jk,OUe,VUe,Yk,XUe,zUe,QUe,xn,joe,WUe,HUe,Kk,UUe,JUe,Zk,YUe,KUe,ZUe,cg,Doe,eJe,oJe,eS,rJe,tJe,aJe,$n,Goe,nJe,sJe,oS,lJe,iJe,rS,dJe,cJe,fJe,fg,Ooe,mJe,gJe,tS,hJe,pJe,uJe,mg,Voe,_Je,bJe,aS,vJe,FJe,TJe,gg,Xoe,MJe,EJe,nS,CJe,wJe,AJe,kn,zoe,yJe,LJe,sS,xJe,$Je,lS,kJe,SJe,RJe,Sn,Qoe,BJe,PJe,iS,IJe,qJe,dS,NJe,jJe,DJe,Rn,Woe,GJe,OJe,cS,VJe,XJe,fS,zJe,QJe,WJe,hg,Hoe,HJe,UJe,mS,JJe,YJe,KJe,pg,Uoe,ZJe,eYe,gS,oYe,rYe,tYe,Bn,Joe,aYe,nYe,hS,sYe,lYe,pS,iYe,dYe,cYe,ug,Yoe,fYe,mYe,uS,gYe,hYe,pYe,Pn,Koe,uYe,_Ye,_S,bYe,vYe,bS,FYe,TYe,MYe,In,Zoe,EYe,CYe,vS,wYe,AYe,FS,yYe,LYe,xYe,qn,ere,$Ye,kYe,TS,SYe,RYe,MS,BYe,PYe,IYe,_g,ore,qYe,NYe,ES,jYe,DYe,GYe,Nn,rre,OYe,VYe,CS,XYe,zYe,wS,QYe,WYe,HYe,jn,tre,UYe,JYe,AS,YYe,KYe,yS,ZYe,eKe,oKe,Dn,are,rKe,tKe,LS,aKe,nKe,xS,sKe,lKe,iKe,Gn,nre,dKe,cKe,$S,fKe,mKe,kS,gKe,hKe,pKe,On,sre,uKe,_Ke,SS,bKe,vKe,RS,FKe,TKe,MKe,Vn,lre,EKe,CKe,BS,wKe,AKe,PS,yKe,LKe,xKe,bg,ire,$Ke,kKe,IS,SKe,RKe,BKe,Xn,dre,PKe,IKe,qS,qKe,NKe,NS,jKe,DKe,GKe,vg,cre,OKe,VKe,jS,XKe,zKe,QKe,zn,fre,WKe,HKe,DS,UKe,JKe,GS,YKe,KKe,ZKe,Qn,mre,eZe,oZe,OS,rZe,tZe,VS,aZe,nZe,sZe,Wn,gre,lZe,iZe,XS,dZe,cZe,zS,fZe,mZe,gZe,Hn,hre,hZe,pZe,QS,uZe,_Ze,WS,bZe,vZe,FZe,Un,pre,TZe,MZe,HS,EZe,CZe,US,wZe,AZe,yZe,Fg,ure,LZe,xZe,JS,$Ze,kZe,SZe,Jn,_re,RZe,BZe,YS,PZe,IZe,KS,qZe,NZe,jZe,Yn,bre,DZe,GZe,ZS,OZe,VZe,eR,XZe,zZe,QZe,Kn,vre,WZe,HZe,oR,UZe,JZe,rR,YZe,KZe,ZZe,Zn,Fre,eeo,oeo,tR,reo,teo,aR,aeo,neo,seo,es,Tre,leo,ieo,nR,deo,ceo,sR,feo,meo,geo,os,Mre,heo,peo,lR,ueo,_eo,iR,beo,veo,Feo,rs,Ere,Teo,Meo,dR,Eeo,Ceo,cR,weo,Aeo,yeo,Tg,Cre,Leo,xeo,fR,$eo,keo,Seo,ts,wre,Reo,Beo,mR,Peo,Ieo,gR,qeo,Neo,jeo,Mg,Are,Deo,Geo,hR,Oeo,Veo,Xeo,Eg,yre,zeo,Qeo,pR,Weo,Heo,Ueo,as,Lre,Jeo,Yeo,uR,Keo,Zeo,_R,eoo,ooo,roo,ns,xre,too,aoo,bR,noo,soo,vR,loo,ioo,doo,ss,$re,coo,foo,FR,moo,goo,TR,hoo,poo,uoo,Cg,kre,_oo,boo,MR,voo,Foo,Too,ls,Sre,Moo,Eoo,ER,Coo,woo,CR,Aoo,yoo,Loo,is,Rre,xoo,$oo,wR,koo,Soo,AR,Roo,Boo,Poo,ds,Bre,Ioo,qoo,yR,Noo,joo,LR,Doo,Goo,Ooo,cs,Pre,Voo,Xoo,xR,zoo,Qoo,$R,Woo,Hoo,Uoo,fs,Ire,Joo,Yoo,kR,Koo,Zoo,SR,ero,oro,rro,ms,qre,tro,aro,RR,nro,sro,BR,lro,iro,dro,wg,Nre,cro,fro,PR,mro,gro,hro,Ag,jre,pro,uro,IR,_ro,bro,vro,yg,Dre,Fro,Tro,qR,Mro,Ero,Cro,Lg,Gre,wro,Aro,NR,yro,Lro,xro,gs,Ore,$ro,kro,jR,Sro,Rro,DR,Bro,Pro,Iro,xg,Vre,qro,Nro,GR,jro,Dro,Gro,hs,Xre,Oro,Vro,OR,Xro,zro,VR,Qro,Wro,Hro,ps,zre,Uro,Jro,XR,Yro,Kro,zR,Zro,eto,oto,us,Qre,rto,tto,QR,ato,nto,WR,sto,lto,ito,_s,Wre,dto,cto,HR,fto,mto,UR,gto,hto,pto,bs,Hre,uto,_to,JR,bto,vto,YR,Fto,Tto,Mto,vs,Ure,Eto,Cto,KR,wto,Ato,ZR,yto,Lto,xto,$g,Jre,$to,kto,eB,Sto,Rto,Bto,kg,Yre,Pto,Ito,oB,qto,Nto,jto,Fs,Kre,Dto,Gto,rB,Oto,Vto,tB,Xto,zto,Qto,Ts,Zre,Wto,Hto,aB,Uto,Jto,nB,Yto,Kto,Zto,Ms,ete,eao,oao,sB,rao,tao,lB,aao,nao,sao,Sg,ote,lao,iao,iB,dao,cao,fao,Rg,rte,mao,gao,dB,hao,pao,uao,Bg,tte,_ao,bao,cB,vao,Fao,Tao,Es,ate,Mao,Eao,fB,Cao,wao,mB,Aao,yao,Lao,Pg,nte,xao,$ao,gB,kao,Sao,Rao,Ig,ste,Bao,Pao,hB,Iao,qao,Nao,Cs,lte,jao,Dao,pB,Gao,Oao,uB,Vao,Xao,zao,qg,ite,Qao,Wao,_B,Hao,Uao,Jao,Ng,dte,Yao,Kao,bB,Zao,eno,ono,ws,cte,rno,tno,vB,ano,nno,FB,sno,lno,ino,As,fte,dno,cno,TB,fno,mno,MB,gno,hno,pno,ys,mte,uno,_no,EB,bno,vno,CB,Fno,Tno,Mno,Ls,gte,Eno,Cno,wB,wno,Ano,AB,yno,Lno,xno,jg,$no,Dg,zw,kno,hte,Sno,rPe,gi,Gg,pte,Qw,Rno,ute,Bno,tPe,Ao,Ww,Pno,Hw,Ino,yB,qno,Nno,jno,Uw,Dno,_te,Gno,Ono,Vno,Qe,Jw,Xno,bte,zno,Qno,Ma,Wno,vte,Hno,Uno,Fte,Jno,Yno,Tte,Kno,Zno,eso,ae,Og,Mte,oso,rso,LB,tso,aso,nso,Vg,Ete,sso,lso,xB,iso,dso,cso,Xg,Cte,fso,mso,$B,gso,hso,pso,zg,wte,uso,_so,kB,bso,vso,Fso,Qg,Ate,Tso,Mso,SB,Eso,Cso,wso,Wg,yte,Aso,yso,RB,Lso,xso,$so,Hg,Lte,kso,Sso,BB,Rso,Bso,Pso,Ug,xte,Iso,qso,PB,Nso,jso,Dso,Jg,$te,Gso,Oso,IB,Vso,Xso,zso,Yg,kte,Qso,Wso,qB,Hso,Uso,Jso,Kg,Ste,Yso,Kso,NB,Zso,elo,olo,Zg,Rte,rlo,tlo,jB,alo,nlo,slo,eh,Bte,llo,ilo,DB,dlo,clo,flo,oh,Pte,mlo,glo,GB,hlo,plo,ulo,rh,Ite,_lo,blo,OB,vlo,Flo,Tlo,th,qte,Mlo,Elo,VB,Clo,wlo,Alo,ah,Nte,ylo,Llo,XB,xlo,$lo,klo,nh,jte,Slo,Rlo,zB,Blo,Plo,Ilo,sh,Dte,qlo,Nlo,QB,jlo,Dlo,Glo,lh,Gte,Olo,Vlo,WB,Xlo,zlo,Qlo,ih,Ote,Wlo,Hlo,HB,Ulo,Jlo,Ylo,dh,Vte,Klo,Zlo,UB,eio,oio,rio,ch,Xte,tio,aio,JB,nio,sio,lio,fh,zte,iio,dio,YB,cio,fio,mio,mh,gio,gh,hio,hh,Yw,pio,Qte,uio,aPe,hi,ph,Wte,Kw,_io,Hte,bio,nPe,yo,Zw,vio,eA,Fio,KB,Tio,Mio,Eio,oA,Cio,Ute,wio,Aio,yio,We,rA,Lio,Jte,xio,$io,pi,kio,Yte,Sio,Rio,Kte,Bio,Pio,Iio,be,uh,Zte,qio,Nio,ZB,jio,Dio,Gio,_h,eae,Oio,Vio,eP,Xio,zio,Qio,bh,oae,Wio,Hio,oP,Uio,Jio,Yio,vh,rae,Kio,Zio,rP,edo,odo,rdo,Fh,tae,tdo,ado,tP,ndo,sdo,ldo,Th,aae,ido,ddo,aP,cdo,fdo,mdo,Mh,nae,gdo,hdo,nP,pdo,udo,_do,Eh,sae,bdo,vdo,sP,Fdo,Tdo,Mdo,Ch,lae,Edo,Cdo,lP,wdo,Ado,ydo,wh,iae,Ldo,xdo,iP,$do,kdo,Sdo,Ah,dae,Rdo,Bdo,dP,Pdo,Ido,qdo,yh,cae,Ndo,jdo,cP,Ddo,Gdo,Odo,Lh,fae,Vdo,Xdo,fP,zdo,Qdo,Wdo,xh,mae,Hdo,Udo,mP,Jdo,Ydo,Kdo,$h,Zdo,kh,eco,Sh,tA,oco,gae,rco,sPe,ui,Rh,hae,aA,tco,pae,aco,lPe,Lo,nA,nco,_i,sco,gP,lco,ico,hP,dco,cco,fco,sA,mco,uae,gco,hco,pco,Zr,lA,uco,_ae,_co,bco,bi,vco,bae,Fco,Tco,pP,Mco,Eco,Cco,Bh,wco,He,iA,Aco,vae,yco,Lco,Ea,xco,Fae,$co,kco,Tae,Sco,Rco,Mae,Bco,Pco,Ico,x,Ph,Eae,qco,Nco,uP,jco,Dco,Gco,Ih,Cae,Oco,Vco,_P,Xco,zco,Qco,qh,wae,Wco,Hco,bP,Uco,Jco,Yco,Nh,Aae,Kco,Zco,vP,efo,ofo,rfo,jh,yae,tfo,afo,FP,nfo,sfo,lfo,Dh,Lae,ifo,dfo,TP,cfo,ffo,mfo,Gh,xae,gfo,hfo,MP,pfo,ufo,_fo,Oh,$ae,bfo,vfo,EP,Ffo,Tfo,Mfo,Vh,kae,Efo,Cfo,CP,wfo,Afo,yfo,Xh,Sae,Lfo,xfo,wP,$fo,kfo,Sfo,zh,Rae,Rfo,Bfo,AP,Pfo,Ifo,qfo,Qh,Bae,Nfo,jfo,yP,Dfo,Gfo,Ofo,Wh,Pae,Vfo,Xfo,LP,zfo,Qfo,Wfo,Hh,Iae,Hfo,Ufo,xP,Jfo,Yfo,Kfo,Uh,qae,Zfo,emo,$P,omo,rmo,tmo,Jh,Nae,amo,nmo,kP,smo,lmo,imo,Yh,jae,dmo,cmo,SP,fmo,mmo,gmo,Kh,Dae,hmo,pmo,RP,umo,_mo,bmo,Zh,Gae,vmo,Fmo,BP,Tmo,Mmo,Emo,ep,Oae,Cmo,wmo,PP,Amo,ymo,Lmo,op,Vae,xmo,$mo,IP,kmo,Smo,Rmo,rp,Xae,Bmo,Pmo,qP,Imo,qmo,Nmo,tp,zae,jmo,Dmo,NP,Gmo,Omo,Vmo,ap,Qae,Xmo,zmo,jP,Qmo,Wmo,Hmo,np,Wae,Umo,Jmo,DP,Ymo,Kmo,Zmo,sp,Hae,ego,ogo,GP,rgo,tgo,ago,lp,Uae,ngo,sgo,OP,lgo,igo,dgo,ip,Jae,cgo,fgo,VP,mgo,ggo,hgo,dp,Yae,pgo,ugo,XP,_go,bgo,vgo,cp,Kae,Fgo,Tgo,zP,Mgo,Ego,Cgo,xs,Zae,wgo,Ago,QP,ygo,Lgo,WP,xgo,$go,kgo,fp,ene,Sgo,Rgo,HP,Bgo,Pgo,Igo,mp,one,qgo,Ngo,UP,jgo,Dgo,Ggo,gp,rne,Ogo,Vgo,JP,Xgo,zgo,Qgo,hp,tne,Wgo,Hgo,YP,Ugo,Jgo,Ygo,pp,ane,Kgo,Zgo,KP,eho,oho,rho,up,nne,tho,aho,ZP,nho,sho,lho,_p,sne,iho,dho,eI,cho,fho,mho,bp,lne,gho,hho,oI,pho,uho,_ho,vp,ine,bho,vho,rI,Fho,Tho,Mho,Fp,dne,Eho,Cho,tI,who,Aho,yho,Tp,cne,Lho,xho,aI,$ho,kho,Sho,Mp,fne,Rho,Bho,nI,Pho,Iho,qho,Ep,mne,Nho,jho,sI,Dho,Gho,Oho,Cp,gne,Vho,Xho,lI,zho,Qho,Who,wp,hne,Hho,Uho,iI,Jho,Yho,Kho,Ap,pne,Zho,epo,dI,opo,rpo,tpo,yp,une,apo,npo,cI,spo,lpo,ipo,Lp,_ne,dpo,cpo,fI,fpo,mpo,gpo,xp,bne,hpo,ppo,mI,upo,_po,bpo,$p,vne,vpo,Fpo,gI,Tpo,Mpo,Epo,kp,Fne,Cpo,wpo,hI,Apo,ypo,Lpo,Sp,Tne,xpo,$po,pI,kpo,Spo,Rpo,Rp,Mne,Bpo,Ppo,uI,Ipo,qpo,Npo,Bp,Ene,jpo,Dpo,_I,Gpo,Opo,Vpo,Pp,Cne,Xpo,zpo,bI,Qpo,Wpo,Hpo,Ip,wne,Upo,Jpo,vI,Ypo,Kpo,Zpo,qp,Ane,euo,ouo,FI,ruo,tuo,auo,Np,yne,nuo,suo,TI,luo,iuo,duo,jp,Lne,cuo,fuo,MI,muo,guo,huo,Dp,xne,puo,uuo,EI,_uo,buo,vuo,Gp,$ne,Fuo,Tuo,CI,Muo,Euo,Cuo,Op,kne,wuo,Auo,wI,yuo,Luo,xuo,Vp,Sne,$uo,kuo,AI,Suo,Ruo,Buo,Xp,Rne,Puo,Iuo,yI,quo,Nuo,juo,zp,Bne,Duo,Guo,LI,Ouo,Vuo,Xuo,Qp,Pne,zuo,Quo,xI,Wuo,Huo,Uuo,Wp,Ine,Juo,Yuo,$I,Kuo,Zuo,e_o,Hp,qne,o_o,r_o,kI,t_o,a_o,n_o,Up,Nne,s_o,l_o,SI,i_o,d_o,c_o,Jp,jne,f_o,m_o,RI,g_o,h_o,p_o,Yp,Dne,u_o,__o,BI,b_o,v_o,F_o,Kp,Gne,T_o,M_o,PI,E_o,C_o,w_o,Zp,One,A_o,y_o,II,L_o,x_o,$_o,eu,Vne,k_o,S_o,qI,R_o,B_o,P_o,ou,Xne,I_o,q_o,NI,N_o,j_o,D_o,ru,zne,G_o,O_o,jI,V_o,X_o,z_o,tu,Qne,Q_o,W_o,DI,H_o,U_o,J_o,au,Wne,Y_o,K_o,GI,Z_o,e2o,o2o,nu,Hne,r2o,t2o,OI,a2o,n2o,s2o,su,Une,l2o,i2o,VI,d2o,c2o,f2o,lu,Jne,m2o,g2o,XI,h2o,p2o,u2o,iu,Yne,_2o,b2o,zI,v2o,F2o,T2o,du,Kne,M2o,E2o,QI,C2o,w2o,A2o,cu,Zne,y2o,L2o,WI,x2o,$2o,k2o,fu,ese,S2o,R2o,HI,B2o,P2o,I2o,mu,ose,q2o,N2o,UI,j2o,D2o,G2o,gu,rse,O2o,V2o,JI,X2o,z2o,Q2o,hu,tse,W2o,H2o,YI,U2o,J2o,Y2o,pu,ase,K2o,Z2o,KI,e1o,o1o,r1o,uu,nse,t1o,a1o,ZI,n1o,s1o,l1o,_u,sse,i1o,d1o,eq,c1o,f1o,m1o,bu,lse,g1o,h1o,oq,p1o,u1o,_1o,vu,ise,b1o,v1o,rq,F1o,T1o,M1o,Fu,dse,E1o,C1o,tq,w1o,A1o,y1o,Tu,cse,L1o,x1o,aq,$1o,k1o,S1o,Mu,R1o,fse,B1o,P1o,mse,I1o,q1o,Eu,iPe,vi,Cu,gse,dA,N1o,hse,j1o,dPe,xo,cA,D1o,Fi,G1o,nq,O1o,V1o,sq,X1o,z1o,Q1o,fA,W1o,pse,H1o,U1o,J1o,et,mA,Y1o,use,K1o,Z1o,Ti,ebo,_se,obo,rbo,lq,tbo,abo,nbo,wu,sbo,Ue,gA,lbo,bse,ibo,dbo,Ca,cbo,vse,fbo,mbo,Fse,gbo,hbo,Tse,pbo,ubo,_bo,G,Au,Mse,bbo,vbo,iq,Fbo,Tbo,Mbo,yu,Ese,Ebo,Cbo,dq,wbo,Abo,ybo,Lu,Cse,Lbo,xbo,cq,$bo,kbo,Sbo,xu,wse,Rbo,Bbo,fq,Pbo,Ibo,qbo,$u,Ase,Nbo,jbo,mq,Dbo,Gbo,Obo,ku,yse,Vbo,Xbo,gq,zbo,Qbo,Wbo,Su,Lse,Hbo,Ubo,hq,Jbo,Ybo,Kbo,Ru,xse,Zbo,evo,pq,ovo,rvo,tvo,Bu,$se,avo,nvo,uq,svo,lvo,ivo,Pu,kse,dvo,cvo,_q,fvo,mvo,gvo,Iu,Sse,hvo,pvo,bq,uvo,_vo,bvo,qu,Rse,vvo,Fvo,vq,Tvo,Mvo,Evo,Nu,Bse,Cvo,wvo,Fq,Avo,yvo,Lvo,ju,Pse,xvo,$vo,Tq,kvo,Svo,Rvo,Du,Ise,Bvo,Pvo,Mq,Ivo,qvo,Nvo,Gu,qse,jvo,Dvo,Eq,Gvo,Ovo,Vvo,Ou,Nse,Xvo,zvo,Cq,Qvo,Wvo,Hvo,Vu,jse,Uvo,Jvo,wq,Yvo,Kvo,Zvo,Xu,Dse,eFo,oFo,Aq,rFo,tFo,aFo,zu,Gse,nFo,sFo,yq,lFo,iFo,dFo,Qu,Ose,cFo,fFo,Lq,mFo,gFo,hFo,Wu,Vse,pFo,uFo,xq,_Fo,bFo,vFo,Hu,Xse,FFo,TFo,$q,MFo,EFo,CFo,Uu,zse,wFo,AFo,kq,yFo,LFo,xFo,Ju,Qse,$Fo,kFo,Sq,SFo,RFo,BFo,Yu,Wse,PFo,IFo,Rq,qFo,NFo,jFo,Ku,Hse,DFo,GFo,Bq,OFo,VFo,XFo,Zu,Use,zFo,QFo,Pq,WFo,HFo,UFo,e_,Jse,JFo,YFo,Iq,KFo,ZFo,e6o,o_,Yse,o6o,r6o,qq,t6o,a6o,n6o,r_,Kse,s6o,l6o,Nq,i6o,d6o,c6o,t_,Zse,f6o,m6o,jq,g6o,h6o,p6o,a_,ele,u6o,_6o,Dq,b6o,v6o,F6o,n_,ole,T6o,M6o,Gq,E6o,C6o,w6o,s_,rle,A6o,y6o,Oq,L6o,x6o,$6o,l_,tle,k6o,S6o,Vq,R6o,B6o,P6o,i_,ale,I6o,q6o,Xq,N6o,j6o,D6o,d_,nle,G6o,O6o,zq,V6o,X6o,z6o,c_,sle,Q6o,W6o,Qq,H6o,U6o,J6o,f_,lle,Y6o,K6o,Wq,Z6o,eTo,oTo,m_,rTo,ile,tTo,aTo,dle,nTo,sTo,g_,cPe,Mi,h_,cle,hA,lTo,fle,iTo,fPe,$o,pA,dTo,Ei,cTo,Hq,fTo,mTo,Uq,gTo,hTo,pTo,uA,uTo,mle,_To,bTo,vTo,ot,_A,FTo,gle,TTo,MTo,Ci,ETo,hle,CTo,wTo,Jq,ATo,yTo,LTo,p_,xTo,Je,bA,$To,ple,kTo,STo,wa,RTo,ule,BTo,PTo,_le,ITo,qTo,ble,NTo,jTo,DTo,z,u_,vle,GTo,OTo,Yq,VTo,XTo,zTo,__,Fle,QTo,WTo,Kq,HTo,UTo,JTo,b_,Tle,YTo,KTo,Zq,ZTo,e7o,o7o,v_,Mle,r7o,t7o,eN,a7o,n7o,s7o,F_,Ele,l7o,i7o,oN,d7o,c7o,f7o,T_,Cle,m7o,g7o,rN,h7o,p7o,u7o,M_,wle,_7o,b7o,tN,v7o,F7o,T7o,E_,Ale,M7o,E7o,aN,C7o,w7o,A7o,C_,yle,y7o,L7o,nN,x7o,$7o,k7o,w_,Lle,S7o,R7o,sN,B7o,P7o,I7o,A_,xle,q7o,N7o,lN,j7o,D7o,G7o,y_,$le,O7o,V7o,iN,X7o,z7o,Q7o,L_,kle,W7o,H7o,dN,U7o,J7o,Y7o,x_,Sle,K7o,Z7o,cN,e9o,o9o,r9o,$_,Rle,t9o,a9o,fN,n9o,s9o,l9o,k_,Ble,i9o,d9o,mN,c9o,f9o,m9o,S_,Ple,g9o,h9o,gN,p9o,u9o,_9o,R_,Ile,b9o,v9o,hN,F9o,T9o,M9o,B_,qle,E9o,C9o,pN,w9o,A9o,y9o,P_,Nle,L9o,x9o,uN,$9o,k9o,S9o,I_,jle,R9o,B9o,_N,P9o,I9o,q9o,q_,Dle,N9o,j9o,bN,D9o,G9o,O9o,N_,Gle,V9o,X9o,vN,z9o,Q9o,W9o,j_,Ole,H9o,U9o,FN,J9o,Y9o,K9o,D_,Vle,Z9o,eMo,TN,oMo,rMo,tMo,G_,Xle,aMo,nMo,MN,sMo,lMo,iMo,O_,zle,dMo,cMo,EN,fMo,mMo,gMo,V_,Qle,hMo,pMo,CN,uMo,_Mo,bMo,X_,Wle,vMo,FMo,wN,TMo,MMo,EMo,z_,Hle,CMo,wMo,AN,AMo,yMo,LMo,Q_,Ule,xMo,$Mo,yN,kMo,SMo,RMo,W_,Jle,BMo,PMo,LN,IMo,qMo,NMo,H_,Yle,jMo,DMo,xN,GMo,OMo,VMo,U_,Kle,XMo,zMo,$N,QMo,WMo,HMo,J_,Zle,UMo,JMo,kN,YMo,KMo,ZMo,Y_,e4o,eie,o4o,r4o,oie,t4o,a4o,K_,mPe,wi,Z_,rie,vA,n4o,tie,s4o,gPe,ko,FA,l4o,Ai,i4o,SN,d4o,c4o,RN,f4o,m4o,g4o,TA,h4o,aie,p4o,u4o,_4o,rt,MA,b4o,nie,v4o,F4o,yi,T4o,sie,M4o,E4o,BN,C4o,w4o,A4o,e2,y4o,Ye,EA,L4o,lie,x4o,$4o,Aa,k4o,iie,S4o,R4o,die,B4o,P4o,cie,I4o,q4o,N4o,Q,o2,fie,j4o,D4o,PN,G4o,O4o,V4o,r2,mie,X4o,z4o,IN,Q4o,W4o,H4o,t2,gie,U4o,J4o,qN,Y4o,K4o,Z4o,a2,hie,eEo,oEo,NN,rEo,tEo,aEo,n2,pie,nEo,sEo,jN,lEo,iEo,dEo,s2,uie,cEo,fEo,DN,mEo,gEo,hEo,l2,_ie,pEo,uEo,GN,_Eo,bEo,vEo,i2,bie,FEo,TEo,ON,MEo,EEo,CEo,d2,vie,wEo,AEo,VN,yEo,LEo,xEo,c2,Fie,$Eo,kEo,XN,SEo,REo,BEo,f2,Tie,PEo,IEo,zN,qEo,NEo,jEo,m2,Mie,DEo,GEo,QN,OEo,VEo,XEo,g2,Eie,zEo,QEo,WN,WEo,HEo,UEo,h2,Cie,JEo,YEo,HN,KEo,ZEo,e5o,p2,wie,o5o,r5o,UN,t5o,a5o,n5o,u2,Aie,s5o,l5o,JN,i5o,d5o,c5o,_2,yie,f5o,m5o,YN,g5o,h5o,p5o,b2,Lie,u5o,_5o,KN,b5o,v5o,F5o,v2,xie,T5o,M5o,ZN,E5o,C5o,w5o,F2,$ie,A5o,y5o,ej,L5o,x5o,$5o,T2,kie,k5o,S5o,oj,R5o,B5o,P5o,M2,Sie,I5o,q5o,rj,N5o,j5o,D5o,E2,Rie,G5o,O5o,tj,V5o,X5o,z5o,C2,Bie,Q5o,W5o,aj,H5o,U5o,J5o,w2,Pie,Y5o,K5o,nj,Z5o,eCo,oCo,A2,Iie,rCo,tCo,sj,aCo,nCo,sCo,y2,qie,lCo,iCo,lj,dCo,cCo,fCo,L2,Nie,mCo,gCo,ij,hCo,pCo,uCo,x2,jie,_Co,bCo,dj,vCo,FCo,TCo,$2,Die,MCo,ECo,cj,CCo,wCo,ACo,k2,Gie,yCo,LCo,Oie,xCo,$Co,kCo,S2,Vie,SCo,RCo,fj,BCo,PCo,ICo,R2,Xie,qCo,NCo,mj,jCo,DCo,GCo,B2,zie,OCo,VCo,gj,XCo,zCo,QCo,P2,Qie,WCo,HCo,hj,UCo,JCo,YCo,I2,KCo,Wie,ZCo,e3o,Hie,o3o,r3o,q2,hPe,Li,N2,Uie,CA,t3o,Jie,a3o,pPe,So,wA,n3o,xi,s3o,pj,l3o,i3o,uj,d3o,c3o,f3o,AA,m3o,Yie,g3o,h3o,p3o,tt,yA,u3o,Kie,_3o,b3o,$i,v3o,Zie,F3o,T3o,_j,M3o,E3o,C3o,j2,w3o,Ke,LA,A3o,ede,y3o,L3o,ya,x3o,ode,$3o,k3o,rde,S3o,R3o,tde,B3o,P3o,I3o,he,D2,ade,q3o,N3o,bj,j3o,D3o,G3o,G2,nde,O3o,V3o,vj,X3o,z3o,Q3o,O2,sde,W3o,H3o,Fj,U3o,J3o,Y3o,V2,lde,K3o,Z3o,Tj,ewo,owo,rwo,X2,ide,two,awo,Mj,nwo,swo,lwo,z2,dde,iwo,dwo,Ej,cwo,fwo,mwo,Q2,cde,gwo,hwo,Cj,pwo,uwo,_wo,W2,fde,bwo,vwo,wj,Fwo,Two,Mwo,H2,mde,Ewo,Cwo,Aj,wwo,Awo,ywo,U2,gde,Lwo,xwo,yj,$wo,kwo,Swo,J2,hde,Rwo,Bwo,Lj,Pwo,Iwo,qwo,Y2,pde,Nwo,jwo,xj,Dwo,Gwo,Owo,K2,ude,Vwo,Xwo,$j,zwo,Qwo,Wwo,Z2,_de,Hwo,Uwo,kj,Jwo,Ywo,Kwo,e1,bde,Zwo,eAo,Sj,oAo,rAo,tAo,o1,vde,aAo,nAo,Rj,sAo,lAo,iAo,r1,Fde,dAo,cAo,Bj,fAo,mAo,gAo,t1,Tde,hAo,pAo,Pj,uAo,_Ao,bAo,a1,vAo,Mde,FAo,TAo,Ede,MAo,EAo,n1,uPe,ki,s1,Cde,xA,CAo,wde,wAo,_Pe,Ro,$A,AAo,Si,yAo,Ij,LAo,xAo,qj,$Ao,kAo,SAo,kA,RAo,Ade,BAo,PAo,IAo,at,SA,qAo,yde,NAo,jAo,Ri,DAo,Lde,GAo,OAo,Nj,VAo,XAo,zAo,l1,QAo,Ze,RA,WAo,xde,HAo,UAo,La,JAo,$de,YAo,KAo,kde,ZAo,e0o,Sde,o0o,r0o,t0o,q,i1,Rde,a0o,n0o,jj,s0o,l0o,i0o,d1,Bde,d0o,c0o,Dj,f0o,m0o,g0o,c1,Pde,h0o,p0o,Gj,u0o,_0o,b0o,f1,Ide,v0o,F0o,Oj,T0o,M0o,E0o,m1,qde,C0o,w0o,Vj,A0o,y0o,L0o,g1,Nde,x0o,$0o,Xj,k0o,S0o,R0o,h1,jde,B0o,P0o,zj,I0o,q0o,N0o,p1,Dde,j0o,D0o,Qj,G0o,O0o,V0o,u1,Gde,X0o,z0o,Wj,Q0o,W0o,H0o,_1,Ode,U0o,J0o,Hj,Y0o,K0o,Z0o,b1,Vde,eyo,oyo,Uj,ryo,tyo,ayo,v1,Xde,nyo,syo,Jj,lyo,iyo,dyo,F1,zde,cyo,fyo,Yj,myo,gyo,hyo,T1,Qde,pyo,uyo,Kj,_yo,byo,vyo,M1,Wde,Fyo,Tyo,Zj,Myo,Eyo,Cyo,E1,Hde,wyo,Ayo,eD,yyo,Lyo,xyo,C1,Ude,$yo,kyo,oD,Syo,Ryo,Byo,w1,Jde,Pyo,Iyo,rD,qyo,Nyo,jyo,A1,Yde,Dyo,Gyo,tD,Oyo,Vyo,Xyo,y1,Kde,zyo,Qyo,aD,Wyo,Hyo,Uyo,L1,Zde,Jyo,Yyo,nD,Kyo,Zyo,eLo,x1,ece,oLo,rLo,sD,tLo,aLo,nLo,$1,oce,sLo,lLo,lD,iLo,dLo,cLo,k1,rce,fLo,mLo,iD,gLo,hLo,pLo,S1,tce,uLo,_Lo,dD,bLo,vLo,FLo,R1,ace,TLo,MLo,cD,ELo,CLo,wLo,B1,nce,ALo,yLo,fD,LLo,xLo,$Lo,P1,sce,kLo,SLo,mD,RLo,BLo,PLo,I1,lce,ILo,qLo,gD,NLo,jLo,DLo,q1,ice,GLo,OLo,hD,VLo,XLo,zLo,N1,dce,QLo,WLo,pD,HLo,ULo,JLo,j1,cce,YLo,KLo,uD,ZLo,e8o,o8o,D1,fce,r8o,t8o,_D,a8o,n8o,s8o,G1,mce,l8o,i8o,bD,d8o,c8o,f8o,O1,gce,m8o,g8o,vD,h8o,p8o,u8o,V1,hce,_8o,b8o,FD,v8o,F8o,T8o,X1,pce,M8o,E8o,TD,C8o,w8o,A8o,z1,uce,y8o,L8o,MD,x8o,$8o,k8o,Q1,_ce,S8o,R8o,ED,B8o,P8o,I8o,W1,bce,q8o,N8o,CD,j8o,D8o,G8o,H1,vce,O8o,V8o,wD,X8o,z8o,Q8o,U1,Fce,W8o,H8o,AD,U8o,J8o,Y8o,J1,Tce,K8o,Z8o,yD,exo,oxo,rxo,Y1,Mce,txo,axo,LD,nxo,sxo,lxo,K1,Ece,ixo,dxo,xD,cxo,fxo,mxo,Z1,Cce,gxo,hxo,$D,pxo,uxo,_xo,eb,wce,bxo,vxo,kD,Fxo,Txo,Mxo,ob,Exo,Ace,Cxo,wxo,yce,Axo,yxo,rb,bPe,Bi,tb,Lce,BA,Lxo,xce,xxo,vPe,Bo,PA,$xo,Pi,kxo,SD,Sxo,Rxo,RD,Bxo,Pxo,Ixo,IA,qxo,$ce,Nxo,jxo,Dxo,nt,qA,Gxo,kce,Oxo,Vxo,Ii,Xxo,Sce,zxo,Qxo,BD,Wxo,Hxo,Uxo,ab,Jxo,eo,NA,Yxo,Rce,Kxo,Zxo,xa,e$o,Bce,o$o,r$o,Pce,t$o,a$o,Ice,n$o,s$o,l$o,Y,nb,qce,i$o,d$o,PD,c$o,f$o,m$o,sb,Nce,g$o,h$o,ID,p$o,u$o,_$o,lb,jce,b$o,v$o,qD,F$o,T$o,M$o,ib,Dce,E$o,C$o,ND,w$o,A$o,y$o,db,Gce,L$o,x$o,jD,$$o,k$o,S$o,cb,Oce,R$o,B$o,DD,P$o,I$o,q$o,fb,Vce,N$o,j$o,GD,D$o,G$o,O$o,mb,Xce,V$o,X$o,OD,z$o,Q$o,W$o,gb,zce,H$o,U$o,VD,J$o,Y$o,K$o,hb,Qce,Z$o,eko,XD,oko,rko,tko,pb,Wce,ako,nko,zD,sko,lko,iko,ub,Hce,dko,cko,QD,fko,mko,gko,_b,Uce,hko,pko,WD,uko,_ko,bko,bb,Jce,vko,Fko,HD,Tko,Mko,Eko,vb,Yce,Cko,wko,UD,Ako,yko,Lko,Fb,Kce,xko,$ko,JD,kko,Sko,Rko,Tb,Zce,Bko,Pko,YD,Iko,qko,Nko,Mb,efe,jko,Dko,KD,Gko,Oko,Vko,Eb,ofe,Xko,zko,ZD,Qko,Wko,Hko,Cb,rfe,Uko,Jko,eG,Yko,Kko,Zko,wb,tfe,eSo,oSo,oG,rSo,tSo,aSo,Ab,afe,nSo,sSo,rG,lSo,iSo,dSo,yb,nfe,cSo,fSo,tG,mSo,gSo,hSo,Lb,sfe,pSo,uSo,aG,_So,bSo,vSo,xb,lfe,FSo,TSo,nG,MSo,ESo,CSo,$b,ife,wSo,ASo,sG,ySo,LSo,xSo,kb,dfe,$So,kSo,lG,SSo,RSo,BSo,Sb,cfe,PSo,ISo,iG,qSo,NSo,jSo,Rb,DSo,ffe,GSo,OSo,mfe,VSo,XSo,Bb,FPe,qi,Pb,gfe,jA,zSo,hfe,QSo,TPe,Po,DA,WSo,Ni,HSo,dG,USo,JSo,cG,YSo,KSo,ZSo,GA,eRo,pfe,oRo,rRo,tRo,st,OA,aRo,ufe,nRo,sRo,ji,lRo,_fe,iRo,dRo,fG,cRo,fRo,mRo,Ib,gRo,oo,VA,hRo,bfe,pRo,uRo,$a,_Ro,vfe,bRo,vRo,Ffe,FRo,TRo,Tfe,MRo,ERo,CRo,Ur,qb,Mfe,wRo,ARo,mG,yRo,LRo,xRo,Nb,Efe,$Ro,kRo,gG,SRo,RRo,BRo,jb,Cfe,PRo,IRo,hG,qRo,NRo,jRo,Db,wfe,DRo,GRo,pG,ORo,VRo,XRo,Gb,Afe,zRo,QRo,uG,WRo,HRo,URo,Ob,JRo,yfe,YRo,KRo,Lfe,ZRo,eBo,Vb,MPe,Di,Xb,xfe,XA,oBo,$fe,rBo,EPe,Io,zA,tBo,Gi,aBo,_G,nBo,sBo,bG,lBo,iBo,dBo,QA,cBo,kfe,fBo,mBo,gBo,lt,WA,hBo,Sfe,pBo,uBo,Oi,_Bo,Rfe,bBo,vBo,vG,FBo,TBo,MBo,zb,EBo,ro,HA,CBo,Bfe,wBo,ABo,ka,yBo,Pfe,LBo,xBo,Ife,$Bo,kBo,qfe,SBo,RBo,BBo,U,Qb,Nfe,PBo,IBo,FG,qBo,NBo,jBo,Wb,jfe,DBo,GBo,TG,OBo,VBo,XBo,Hb,Dfe,zBo,QBo,MG,WBo,HBo,UBo,Ub,Gfe,JBo,YBo,EG,KBo,ZBo,ePo,Jb,Ofe,oPo,rPo,CG,tPo,aPo,nPo,Yb,Vfe,sPo,lPo,wG,iPo,dPo,cPo,Kb,Xfe,fPo,mPo,AG,gPo,hPo,pPo,Zb,zfe,uPo,_Po,yG,bPo,vPo,FPo,ev,Qfe,TPo,MPo,LG,EPo,CPo,wPo,ov,Wfe,APo,yPo,xG,LPo,xPo,$Po,rv,Hfe,kPo,SPo,$G,RPo,BPo,PPo,tv,Ufe,IPo,qPo,kG,NPo,jPo,DPo,av,Jfe,GPo,OPo,SG,VPo,XPo,zPo,nv,Yfe,QPo,WPo,RG,HPo,UPo,JPo,sv,Kfe,YPo,KPo,BG,ZPo,eIo,oIo,lv,Zfe,rIo,tIo,PG,aIo,nIo,sIo,iv,eme,lIo,iIo,IG,dIo,cIo,fIo,dv,ome,mIo,gIo,qG,hIo,pIo,uIo,cv,rme,_Io,bIo,NG,vIo,FIo,TIo,fv,tme,MIo,EIo,jG,CIo,wIo,AIo,mv,ame,yIo,LIo,DG,xIo,$Io,kIo,gv,nme,SIo,RIo,GG,BIo,PIo,IIo,hv,sme,qIo,NIo,OG,jIo,DIo,GIo,pv,lme,OIo,VIo,VG,XIo,zIo,QIo,uv,ime,WIo,HIo,XG,UIo,JIo,YIo,_v,dme,KIo,ZIo,zG,eqo,oqo,rqo,bv,cme,tqo,aqo,QG,nqo,sqo,lqo,vv,fme,iqo,dqo,WG,cqo,fqo,mqo,Fv,mme,gqo,hqo,HG,pqo,uqo,_qo,Tv,gme,bqo,vqo,UG,Fqo,Tqo,Mqo,Mv,hme,Eqo,Cqo,JG,wqo,Aqo,yqo,Ev,pme,Lqo,xqo,YG,$qo,kqo,Sqo,Cv,ume,Rqo,Bqo,KG,Pqo,Iqo,qqo,wv,Nqo,_me,jqo,Dqo,bme,Gqo,Oqo,Av,CPe,Vi,yv,vme,UA,Vqo,Fme,Xqo,wPe,qo,JA,zqo,Xi,Qqo,ZG,Wqo,Hqo,eO,Uqo,Jqo,Yqo,YA,Kqo,Tme,Zqo,eNo,oNo,it,KA,rNo,Mme,tNo,aNo,zi,nNo,Eme,sNo,lNo,oO,iNo,dNo,cNo,Lv,fNo,to,ZA,mNo,Cme,gNo,hNo,Sa,pNo,wme,uNo,_No,Ame,bNo,vNo,yme,FNo,TNo,MNo,O,xv,Lme,ENo,CNo,rO,wNo,ANo,yNo,$v,xme,LNo,xNo,tO,$No,kNo,SNo,kv,$me,RNo,BNo,aO,PNo,INo,qNo,Sv,kme,NNo,jNo,nO,DNo,GNo,ONo,Rv,Sme,VNo,XNo,sO,zNo,QNo,WNo,Bv,Rme,HNo,UNo,lO,JNo,YNo,KNo,Pv,Bme,ZNo,ejo,iO,ojo,rjo,tjo,Iv,Pme,ajo,njo,dO,sjo,ljo,ijo,qv,Ime,djo,cjo,cO,fjo,mjo,gjo,Nv,qme,hjo,pjo,fO,ujo,_jo,bjo,jv,Nme,vjo,Fjo,mO,Tjo,Mjo,Ejo,Dv,jme,Cjo,wjo,gO,Ajo,yjo,Ljo,Gv,Dme,xjo,$jo,hO,kjo,Sjo,Rjo,Ov,Gme,Bjo,Pjo,pO,Ijo,qjo,Njo,Vv,Ome,jjo,Djo,uO,Gjo,Ojo,Vjo,Xv,Vme,Xjo,zjo,_O,Qjo,Wjo,Hjo,zv,Xme,Ujo,Jjo,bO,Yjo,Kjo,Zjo,Qv,zme,eDo,oDo,vO,rDo,tDo,aDo,Wv,Qme,nDo,sDo,FO,lDo,iDo,dDo,Hv,Wme,cDo,fDo,TO,mDo,gDo,hDo,Uv,Hme,pDo,uDo,MO,_Do,bDo,vDo,Jv,Ume,FDo,TDo,EO,MDo,EDo,CDo,Yv,Jme,wDo,ADo,CO,yDo,LDo,xDo,Kv,Yme,$Do,kDo,wO,SDo,RDo,BDo,Zv,Kme,PDo,IDo,AO,qDo,NDo,jDo,eF,Zme,DDo,GDo,yO,ODo,VDo,XDo,oF,ege,zDo,QDo,LO,WDo,HDo,UDo,rF,oge,JDo,YDo,xO,KDo,ZDo,eGo,tF,rge,oGo,rGo,$O,tGo,aGo,nGo,aF,tge,sGo,lGo,kO,iGo,dGo,cGo,nF,age,fGo,mGo,SO,gGo,hGo,pGo,sF,nge,uGo,_Go,RO,bGo,vGo,FGo,lF,sge,TGo,MGo,BO,EGo,CGo,wGo,iF,lge,AGo,yGo,PO,LGo,xGo,$Go,dF,ige,kGo,SGo,IO,RGo,BGo,PGo,cF,dge,IGo,qGo,qO,NGo,jGo,DGo,fF,cge,GGo,OGo,NO,VGo,XGo,zGo,mF,fge,QGo,WGo,jO,HGo,UGo,JGo,gF,mge,YGo,KGo,DO,ZGo,eOo,oOo,hF,rOo,gge,tOo,aOo,hge,nOo,sOo,pF,APe,Qi,uF,pge,e0,lOo,uge,iOo,yPe,No,o0,dOo,Wi,cOo,GO,fOo,mOo,OO,gOo,hOo,pOo,r0,uOo,_ge,_Oo,bOo,vOo,dt,t0,FOo,bge,TOo,MOo,Hi,EOo,vge,COo,wOo,VO,AOo,yOo,LOo,_F,xOo,ao,a0,$Oo,Fge,kOo,SOo,Ra,ROo,Tge,BOo,POo,Mge,IOo,qOo,Ege,NOo,jOo,DOo,Cge,bF,wge,GOo,OOo,XO,VOo,XOo,zOo,vF,QOo,Age,WOo,HOo,yge,UOo,JOo,FF,LPe,Ui,TF,Lge,n0,YOo,xge,KOo,xPe,jo,s0,ZOo,Ji,eVo,zO,oVo,rVo,QO,tVo,aVo,nVo,l0,sVo,$ge,lVo,iVo,dVo,ct,i0,cVo,kge,fVo,mVo,Yi,gVo,Sge,hVo,pVo,WO,uVo,_Vo,bVo,MF,vVo,no,d0,FVo,Rge,TVo,MVo,Ba,EVo,Bge,CVo,wVo,Pge,AVo,yVo,Ige,LVo,xVo,$Vo,ve,EF,qge,kVo,SVo,HO,RVo,BVo,PVo,CF,Nge,IVo,qVo,UO,NVo,jVo,DVo,wF,jge,GVo,OVo,JO,VVo,XVo,zVo,$s,Dge,QVo,WVo,YO,HVo,UVo,KO,JVo,YVo,KVo,AF,Gge,ZVo,eXo,ZO,oXo,rXo,tXo,ft,Oge,aXo,nXo,eV,sXo,lXo,oV,iXo,dXo,rV,cXo,fXo,mXo,yF,Vge,gXo,hXo,tV,pXo,uXo,_Xo,LF,Xge,bXo,vXo,aV,FXo,TXo,MXo,xF,zge,EXo,CXo,nV,wXo,AXo,yXo,$F,Qge,LXo,xXo,sV,$Xo,kXo,SXo,kF,Wge,RXo,BXo,lV,PXo,IXo,qXo,SF,Hge,NXo,jXo,iV,DXo,GXo,OXo,RF,Uge,VXo,XXo,dV,zXo,QXo,WXo,BF,HXo,Jge,UXo,JXo,Yge,YXo,KXo,PF,$Pe,Ki,IF,Kge,c0,ZXo,Zge,ezo,kPe,Do,f0,ozo,Zi,rzo,cV,tzo,azo,fV,nzo,szo,lzo,m0,izo,ehe,dzo,czo,fzo,mt,g0,mzo,ohe,gzo,hzo,ed,pzo,rhe,uzo,_zo,mV,bzo,vzo,Fzo,qF,Tzo,so,h0,Mzo,the,Ezo,Czo,Pa,wzo,ahe,Azo,yzo,nhe,Lzo,xzo,she,$zo,kzo,Szo,lhe,NF,ihe,Rzo,Bzo,gV,Pzo,Izo,qzo,jF,Nzo,dhe,jzo,Dzo,che,Gzo,Ozo,DF,SPe,od,GF,fhe,p0,Vzo,mhe,Xzo,RPe,Go,u0,zzo,rd,Qzo,hV,Wzo,Hzo,pV,Uzo,Jzo,Yzo,_0,Kzo,ghe,Zzo,eQo,oQo,gt,b0,rQo,hhe,tQo,aQo,td,nQo,phe,sQo,lQo,uV,iQo,dQo,cQo,OF,fQo,lo,v0,mQo,uhe,gQo,hQo,Ia,pQo,_he,uQo,_Qo,bhe,bQo,vQo,vhe,FQo,TQo,MQo,je,VF,Fhe,EQo,CQo,_V,wQo,AQo,yQo,XF,The,LQo,xQo,bV,$Qo,kQo,SQo,zF,Mhe,RQo,BQo,vV,PQo,IQo,qQo,QF,Ehe,NQo,jQo,FV,DQo,GQo,OQo,WF,Che,VQo,XQo,TV,zQo,QQo,WQo,HF,whe,HQo,UQo,MV,JQo,YQo,KQo,UF,Ahe,ZQo,eWo,EV,oWo,rWo,tWo,JF,yhe,aWo,nWo,CV,sWo,lWo,iWo,YF,dWo,Lhe,cWo,fWo,xhe,mWo,gWo,KF,BPe,ad,ZF,$he,F0,hWo,khe,pWo,PPe,Oo,T0,uWo,nd,_Wo,wV,bWo,vWo,AV,FWo,TWo,MWo,M0,EWo,She,CWo,wWo,AWo,ht,E0,yWo,Rhe,LWo,xWo,sd,$Wo,Bhe,kWo,SWo,yV,RWo,BWo,PWo,e6,IWo,io,C0,qWo,Phe,NWo,jWo,qa,DWo,Ihe,GWo,OWo,qhe,VWo,XWo,Nhe,zWo,QWo,WWo,Na,o6,jhe,HWo,UWo,LV,JWo,YWo,KWo,r6,Dhe,ZWo,eHo,xV,oHo,rHo,tHo,t6,Ghe,aHo,nHo,$V,sHo,lHo,iHo,a6,Ohe,dHo,cHo,kV,fHo,mHo,gHo,n6,hHo,Vhe,pHo,uHo,Xhe,_Ho,bHo,s6,IPe,ld,l6,zhe,w0,vHo,Qhe,FHo,qPe,Vo,A0,THo,id,MHo,SV,EHo,CHo,RV,wHo,AHo,yHo,y0,LHo,Whe,xHo,$Ho,kHo,pt,L0,SHo,Hhe,RHo,BHo,dd,PHo,Uhe,IHo,qHo,BV,NHo,jHo,DHo,i6,GHo,co,x0,OHo,Jhe,VHo,XHo,ja,zHo,Yhe,QHo,WHo,Khe,HHo,UHo,Zhe,JHo,YHo,KHo,De,d6,epe,ZHo,eUo,PV,oUo,rUo,tUo,c6,ope,aUo,nUo,IV,sUo,lUo,iUo,f6,rpe,dUo,cUo,qV,fUo,mUo,gUo,m6,tpe,hUo,pUo,NV,uUo,_Uo,bUo,g6,ape,vUo,FUo,jV,TUo,MUo,EUo,h6,npe,CUo,wUo,DV,AUo,yUo,LUo,p6,spe,xUo,$Uo,GV,kUo,SUo,RUo,u6,lpe,BUo,PUo,OV,IUo,qUo,NUo,_6,jUo,ipe,DUo,GUo,dpe,OUo,VUo,b6,NPe,cd,v6,cpe,$0,XUo,fpe,zUo,jPe,Xo,k0,QUo,fd,WUo,VV,HUo,UUo,XV,JUo,YUo,KUo,S0,ZUo,mpe,eJo,oJo,rJo,ut,R0,tJo,gpe,aJo,nJo,md,sJo,hpe,lJo,iJo,zV,dJo,cJo,fJo,F6,mJo,fo,B0,gJo,ppe,hJo,pJo,Da,uJo,upe,_Jo,bJo,_pe,vJo,FJo,bpe,TJo,MJo,EJo,P0,T6,vpe,CJo,wJo,QV,AJo,yJo,LJo,M6,Fpe,xJo,$Jo,WV,kJo,SJo,RJo,E6,BJo,Tpe,PJo,IJo,Mpe,qJo,NJo,C6,DPe,gd,w6,Epe,I0,jJo,Cpe,DJo,GPe,zo,q0,GJo,hd,OJo,HV,VJo,XJo,UV,zJo,QJo,WJo,N0,HJo,wpe,UJo,JJo,YJo,_t,j0,KJo,Ape,ZJo,eYo,pd,oYo,ype,rYo,tYo,JV,aYo,nYo,sYo,A6,lYo,mo,D0,iYo,Lpe,dYo,cYo,Ga,fYo,xpe,mYo,gYo,$pe,hYo,pYo,kpe,uYo,_Yo,bYo,Oa,y6,Spe,vYo,FYo,YV,TYo,MYo,EYo,L6,Rpe,CYo,wYo,KV,AYo,yYo,LYo,x6,Bpe,xYo,$Yo,ZV,kYo,SYo,RYo,$6,Ppe,BYo,PYo,eX,IYo,qYo,NYo,k6,jYo,Ipe,DYo,GYo,qpe,OYo,VYo,S6,OPe,ud,R6,Npe,G0,XYo,jpe,zYo,VPe,Qo,O0,QYo,_d,WYo,oX,HYo,UYo,rX,JYo,YYo,KYo,V0,ZYo,Dpe,eKo,oKo,rKo,bt,X0,tKo,Gpe,aKo,nKo,bd,sKo,Ope,lKo,iKo,tX,dKo,cKo,fKo,B6,mKo,go,z0,gKo,Vpe,hKo,pKo,Va,uKo,Xpe,_Ko,bKo,zpe,vKo,FKo,Qpe,TKo,MKo,EKo,vd,P6,Wpe,CKo,wKo,aX,AKo,yKo,LKo,I6,Hpe,xKo,$Ko,nX,kKo,SKo,RKo,q6,Upe,BKo,PKo,sX,IKo,qKo,NKo,N6,jKo,Jpe,DKo,GKo,Ype,OKo,VKo,j6,XPe,Fd,D6,Kpe,Q0,XKo,Zpe,zKo,zPe,Wo,W0,QKo,Td,WKo,lX,HKo,UKo,iX,JKo,YKo,KKo,H0,ZKo,eue,eZo,oZo,rZo,vt,U0,tZo,oue,aZo,nZo,Md,sZo,rue,lZo,iZo,dX,dZo,cZo,fZo,G6,mZo,ho,J0,gZo,tue,hZo,pZo,Xa,uZo,aue,_Zo,bZo,nue,vZo,FZo,sue,TZo,MZo,EZo,Y0,O6,lue,CZo,wZo,cX,AZo,yZo,LZo,V6,iue,xZo,$Zo,fX,kZo,SZo,RZo,X6,BZo,due,PZo,IZo,cue,qZo,NZo,z6,QPe,Ed,Q6,fue,K0,jZo,mue,DZo,WPe,Ho,Z0,GZo,Cd,OZo,mX,VZo,XZo,gX,zZo,QZo,WZo,ey,HZo,gue,UZo,JZo,YZo,Ft,oy,KZo,hue,ZZo,eer,wd,oer,pue,rer,ter,hX,aer,ner,ser,W6,ler,po,ry,ier,uue,der,cer,za,fer,_ue,mer,ger,bue,her,per,vue,uer,_er,ber,Fue,H6,Tue,ver,Fer,pX,Ter,Mer,Eer,U6,Cer,Mue,wer,Aer,Eue,yer,Ler,J6,HPe,Ad,Y6,Cue,ty,xer,wue,$er,UPe,Uo,ay,ker,yd,Ser,uX,Rer,Ber,_X,Per,Ier,qer,ny,Ner,Aue,jer,Der,Ger,Tt,sy,Oer,yue,Ver,Xer,Ld,zer,Lue,Qer,Wer,bX,Her,Uer,Jer,K6,Yer,uo,ly,Ker,xue,Zer,eor,Qa,oor,$ue,ror,tor,kue,aor,nor,Sue,sor,lor,ior,Wa,Z6,Rue,dor,cor,vX,mor,gor,hor,eT,Bue,por,uor,FX,_or,bor,vor,oT,Pue,For,Tor,TX,Mor,Eor,Cor,rT,Iue,wor,Aor,MX,yor,Lor,xor,tT,$or,que,kor,Sor,Nue,Ror,Bor,aT,JPe,xd,nT,jue,iy,Por,Due,Ior,YPe,Jo,dy,qor,$d,Nor,EX,jor,Dor,CX,Gor,Oor,Vor,cy,Xor,Gue,zor,Qor,Wor,Mt,fy,Hor,Oue,Uor,Jor,kd,Yor,Vue,Kor,Zor,wX,err,orr,rrr,sT,trr,_o,my,arr,Xue,nrr,srr,Ha,lrr,zue,irr,drr,Que,crr,frr,Wue,mrr,grr,hrr,Hue,lT,Uue,prr,urr,AX,_rr,brr,vrr,iT,Frr,Jue,Trr,Mrr,Yue,Err,Crr,dT,KPe,Sd,cT,Kue,gy,wrr,Zue,Arr,ZPe,Yo,hy,yrr,Rd,Lrr,yX,xrr,$rr,LX,krr,Srr,Rrr,py,Brr,e_e,Prr,Irr,qrr,Et,uy,Nrr,o_e,jrr,Drr,Bd,Grr,r_e,Orr,Vrr,xX,Xrr,zrr,Qrr,fT,Wrr,Cr,_y,Hrr,t_e,Urr,Jrr,Ua,Yrr,a_e,Krr,Zrr,n_e,etr,otr,s_e,rtr,ttr,atr,j,mT,l_e,ntr,str,$X,ltr,itr,dtr,gT,i_e,ctr,ftr,kX,mtr,gtr,htr,hT,d_e,ptr,utr,SX,_tr,btr,vtr,pT,c_e,Ftr,Ttr,RX,Mtr,Etr,Ctr,uT,f_e,wtr,Atr,BX,ytr,Ltr,xtr,_T,m_e,$tr,ktr,PX,Str,Rtr,Btr,bT,g_e,Ptr,Itr,IX,qtr,Ntr,jtr,vT,h_e,Dtr,Gtr,qX,Otr,Vtr,Xtr,FT,p_e,ztr,Qtr,NX,Wtr,Htr,Utr,TT,u_e,Jtr,Ytr,jX,Ktr,Ztr,ear,MT,__e,oar,rar,DX,tar,aar,nar,ET,b_e,sar,lar,GX,iar,dar,car,CT,v_e,far,mar,OX,gar,har,par,wT,F_e,uar,_ar,VX,bar,Far,Tar,AT,T_e,Mar,Ear,XX,Car,war,Aar,yT,M_e,yar,Lar,zX,xar,$ar,kar,LT,E_e,Sar,Rar,QX,Bar,Par,Iar,ks,C_e,qar,Nar,WX,jar,Dar,HX,Gar,Oar,Var,xT,w_e,Xar,zar,UX,Qar,War,Har,$T,A_e,Uar,Jar,JX,Yar,Kar,Zar,kT,y_e,enr,onr,YX,rnr,tnr,anr,ST,L_e,nnr,snr,KX,lnr,inr,dnr,RT,x_e,cnr,fnr,ZX,mnr,gnr,hnr,BT,$_e,pnr,unr,ez,_nr,bnr,vnr,PT,k_e,Fnr,Tnr,oz,Mnr,Enr,Cnr,IT,S_e,wnr,Anr,rz,ynr,Lnr,xnr,qT,R_e,$nr,knr,tz,Snr,Rnr,Bnr,NT,B_e,Pnr,Inr,az,qnr,Nnr,jnr,jT,P_e,Dnr,Gnr,nz,Onr,Vnr,Xnr,DT,I_e,znr,Qnr,sz,Wnr,Hnr,Unr,GT,q_e,Jnr,Ynr,lz,Knr,Znr,esr,OT,N_e,osr,rsr,iz,tsr,asr,nsr,VT,j_e,ssr,lsr,dz,isr,dsr,csr,XT,D_e,fsr,msr,cz,gsr,hsr,psr,zT,G_e,usr,_sr,fz,bsr,vsr,Fsr,QT,O_e,Tsr,Msr,mz,Esr,Csr,wsr,WT,V_e,Asr,ysr,gz,Lsr,xsr,$sr,HT,X_e,ksr,Ssr,hz,Rsr,Bsr,Psr,UT,z_e,Isr,qsr,pz,Nsr,jsr,Dsr,JT,Q_e,Gsr,Osr,uz,Vsr,Xsr,zsr,YT,W_e,Qsr,Wsr,_z,Hsr,Usr,Jsr,KT,H_e,Ysr,Ksr,bz,Zsr,elr,olr,ZT,U_e,rlr,tlr,vz,alr,nlr,slr,e7,J_e,llr,ilr,Fz,dlr,clr,flr,o7,Y_e,mlr,glr,Tz,hlr,plr,ulr,r7,eIe,Pd,t7,K_e,by,_lr,Z_e,blr,oIe,Ko,vy,vlr,Id,Flr,Mz,Tlr,Mlr,Ez,Elr,Clr,wlr,Fy,Alr,e2e,ylr,Llr,xlr,Ct,Ty,$lr,o2e,klr,Slr,qd,Rlr,r2e,Blr,Plr,Cz,Ilr,qlr,Nlr,a7,jlr,wr,My,Dlr,t2e,Glr,Olr,Ja,Vlr,a2e,Xlr,zlr,n2e,Qlr,Wlr,s2e,Hlr,Ulr,Jlr,ne,n7,l2e,Ylr,Klr,wz,Zlr,eir,oir,s7,i2e,rir,tir,Az,air,nir,sir,l7,d2e,lir,iir,yz,dir,cir,fir,i7,c2e,mir,gir,Lz,hir,pir,uir,d7,f2e,_ir,bir,xz,vir,Fir,Tir,c7,m2e,Mir,Eir,$z,Cir,wir,Air,f7,g2e,yir,Lir,kz,xir,$ir,kir,m7,h2e,Sir,Rir,Sz,Bir,Pir,Iir,g7,p2e,qir,Nir,Rz,jir,Dir,Gir,h7,u2e,Oir,Vir,Bz,Xir,zir,Qir,p7,_2e,Wir,Hir,Pz,Uir,Jir,Yir,u7,b2e,Kir,Zir,Iz,edr,odr,rdr,_7,v2e,tdr,adr,qz,ndr,sdr,ldr,b7,F2e,idr,ddr,Nz,cdr,fdr,mdr,v7,T2e,gdr,hdr,jz,pdr,udr,_dr,F7,M2e,bdr,vdr,Dz,Fdr,Tdr,Mdr,T7,E2e,Edr,Cdr,Gz,wdr,Adr,ydr,M7,C2e,Ldr,xdr,Oz,$dr,kdr,Sdr,E7,w2e,Rdr,Bdr,Vz,Pdr,Idr,qdr,C7,A2e,Ndr,jdr,Xz,Ddr,Gdr,Odr,w7,y2e,Vdr,Xdr,zz,zdr,Qdr,Wdr,A7,L2e,Hdr,Udr,Qz,Jdr,Ydr,Kdr,y7,x2e,Zdr,ecr,Wz,ocr,rcr,tcr,L7,rIe,Nd,x7,$2e,Ey,acr,k2e,ncr,tIe,Zo,Cy,scr,jd,lcr,Hz,icr,dcr,Uz,ccr,fcr,mcr,wy,gcr,S2e,hcr,pcr,ucr,wt,Ay,_cr,R2e,bcr,vcr,Dd,Fcr,B2e,Tcr,Mcr,Jz,Ecr,Ccr,wcr,$7,Acr,Ar,yy,ycr,P2e,Lcr,xcr,Ya,$cr,I2e,kcr,Scr,q2e,Rcr,Bcr,N2e,Pcr,Icr,qcr,Me,k7,j2e,Ncr,jcr,Yz,Dcr,Gcr,Ocr,S7,D2e,Vcr,Xcr,Kz,zcr,Qcr,Wcr,R7,G2e,Hcr,Ucr,Zz,Jcr,Ycr,Kcr,B7,O2e,Zcr,efr,eQ,ofr,rfr,tfr,P7,V2e,afr,nfr,oQ,sfr,lfr,ifr,I7,X2e,dfr,cfr,rQ,ffr,mfr,gfr,q7,z2e,hfr,pfr,tQ,ufr,_fr,bfr,N7,Q2e,vfr,Ffr,aQ,Tfr,Mfr,Efr,j7,W2e,Cfr,wfr,nQ,Afr,yfr,Lfr,D7,H2e,xfr,$fr,sQ,kfr,Sfr,Rfr,G7,U2e,Bfr,Pfr,lQ,Ifr,qfr,Nfr,O7,J2e,jfr,Dfr,iQ,Gfr,Ofr,Vfr,V7,aIe,Gd,X7,Y2e,Ly,Xfr,K2e,zfr,nIe,er,xy,Qfr,Od,Wfr,dQ,Hfr,Ufr,cQ,Jfr,Yfr,Kfr,$y,Zfr,Z2e,emr,omr,rmr,At,ky,tmr,e1e,amr,nmr,Vd,smr,o1e,lmr,imr,fQ,dmr,cmr,fmr,z7,mmr,yr,Sy,gmr,r1e,hmr,pmr,Ka,umr,t1e,_mr,bmr,a1e,vmr,Fmr,n1e,Tmr,Mmr,Emr,Xd,Q7,s1e,Cmr,wmr,mQ,Amr,ymr,Lmr,W7,l1e,xmr,$mr,gQ,kmr,Smr,Rmr,H7,i1e,Bmr,Pmr,hQ,Imr,qmr,Nmr,U7,sIe,zd,J7,d1e,Ry,jmr,c1e,Dmr,lIe,or,By,Gmr,Qd,Omr,pQ,Vmr,Xmr,uQ,zmr,Qmr,Wmr,Py,Hmr,f1e,Umr,Jmr,Ymr,yt,Iy,Kmr,m1e,Zmr,egr,Wd,ogr,g1e,rgr,tgr,_Q,agr,ngr,sgr,Y7,lgr,Lr,qy,igr,h1e,dgr,cgr,Za,fgr,p1e,mgr,ggr,u1e,hgr,pgr,_1e,ugr,_gr,bgr,ie,K7,b1e,vgr,Fgr,bQ,Tgr,Mgr,Egr,Z7,v1e,Cgr,wgr,vQ,Agr,ygr,Lgr,e9,F1e,xgr,$gr,FQ,kgr,Sgr,Rgr,o9,T1e,Bgr,Pgr,TQ,Igr,qgr,Ngr,r9,M1e,jgr,Dgr,MQ,Ggr,Ogr,Vgr,t9,E1e,Xgr,zgr,EQ,Qgr,Wgr,Hgr,a9,C1e,Ugr,Jgr,CQ,Ygr,Kgr,Zgr,n9,w1e,ehr,ohr,wQ,rhr,thr,ahr,s9,A1e,nhr,shr,AQ,lhr,ihr,dhr,l9,y1e,chr,fhr,yQ,mhr,ghr,hhr,i9,L1e,phr,uhr,LQ,_hr,bhr,vhr,d9,x1e,Fhr,Thr,xQ,Mhr,Ehr,Chr,c9,$1e,whr,Ahr,$Q,yhr,Lhr,xhr,f9,k1e,$hr,khr,kQ,Shr,Rhr,Bhr,m9,S1e,Phr,Ihr,SQ,qhr,Nhr,jhr,g9,R1e,Dhr,Ghr,RQ,Ohr,Vhr,Xhr,h9,B1e,zhr,Qhr,BQ,Whr,Hhr,Uhr,p9,P1e,Jhr,Yhr,PQ,Khr,Zhr,epr,u9,I1e,opr,rpr,IQ,tpr,apr,npr,_9,q1e,spr,lpr,qQ,ipr,dpr,cpr,b9,iIe,Hd,v9,N1e,Ny,fpr,j1e,mpr,dIe,rr,jy,gpr,Ud,hpr,NQ,ppr,upr,jQ,_pr,bpr,vpr,Dy,Fpr,D1e,Tpr,Mpr,Epr,Lt,Gy,Cpr,G1e,wpr,Apr,Jd,ypr,O1e,Lpr,xpr,DQ,$pr,kpr,Spr,F9,Rpr,xr,Oy,Bpr,V1e,Ppr,Ipr,en,qpr,X1e,Npr,jpr,z1e,Dpr,Gpr,Q1e,Opr,Vpr,Xpr,ye,T9,W1e,zpr,Qpr,GQ,Wpr,Hpr,Upr,M9,H1e,Jpr,Ypr,OQ,Kpr,Zpr,eur,E9,U1e,our,rur,VQ,tur,aur,nur,C9,J1e,sur,lur,XQ,iur,dur,cur,w9,Y1e,fur,mur,zQ,gur,hur,pur,A9,K1e,uur,_ur,QQ,bur,vur,Fur,y9,Z1e,Tur,Mur,WQ,Eur,Cur,wur,L9,ebe,Aur,yur,HQ,Lur,xur,$ur,x9,obe,kur,Sur,UQ,Rur,Bur,Pur,$9,rbe,Iur,qur,JQ,Nur,jur,Dur,k9,cIe,Yd,S9,tbe,Vy,Gur,abe,Our,fIe,tr,Xy,Vur,Kd,Xur,YQ,zur,Qur,KQ,Wur,Hur,Uur,zy,Jur,nbe,Yur,Kur,Zur,xt,Qy,e_r,sbe,o_r,r_r,Zd,t_r,lbe,a_r,n_r,ZQ,s_r,l_r,i_r,R9,d_r,$r,Wy,c_r,ibe,f_r,m_r,on,g_r,dbe,h_r,p_r,cbe,u_r,__r,fbe,b_r,v_r,F_r,Z,B9,mbe,T_r,M_r,eW,E_r,C_r,w_r,P9,gbe,A_r,y_r,oW,L_r,x_r,$_r,I9,hbe,k_r,S_r,rW,R_r,B_r,P_r,q9,pbe,I_r,q_r,tW,N_r,j_r,D_r,N9,ube,G_r,O_r,aW,V_r,X_r,z_r,j9,_be,Q_r,W_r,nW,H_r,U_r,J_r,D9,bbe,Y_r,K_r,sW,Z_r,e2r,o2r,G9,vbe,r2r,t2r,lW,a2r,n2r,s2r,O9,Fbe,l2r,i2r,iW,d2r,c2r,f2r,V9,Tbe,m2r,g2r,dW,h2r,p2r,u2r,X9,Mbe,_2r,b2r,cW,v2r,F2r,T2r,z9,Ebe,M2r,E2r,fW,C2r,w2r,A2r,Q9,Cbe,y2r,L2r,mW,x2r,$2r,k2r,W9,wbe,S2r,R2r,gW,B2r,P2r,I2r,H9,Abe,q2r,N2r,hW,j2r,D2r,G2r,U9,ybe,O2r,V2r,pW,X2r,z2r,Q2r,J9,Lbe,W2r,H2r,uW,U2r,J2r,Y2r,Y9,xbe,K2r,Z2r,_W,e1r,o1r,r1r,K9,$be,t1r,a1r,bW,n1r,s1r,l1r,Z9,kbe,i1r,d1r,vW,c1r,f1r,m1r,eM,Sbe,g1r,h1r,FW,p1r,u1r,_1r,oM,Rbe,b1r,v1r,TW,F1r,T1r,M1r,rM,Bbe,E1r,C1r,MW,w1r,A1r,y1r,tM,Pbe,L1r,x1r,EW,$1r,k1r,S1r,aM,Ibe,R1r,B1r,CW,P1r,I1r,q1r,nM,qbe,N1r,j1r,wW,D1r,G1r,O1r,sM,mIe,ec,lM,Nbe,Hy,V1r,jbe,X1r,gIe,ar,Uy,z1r,oc,Q1r,AW,W1r,H1r,yW,U1r,J1r,Y1r,Jy,K1r,Dbe,Z1r,ebr,obr,$t,Yy,rbr,Gbe,tbr,abr,rc,nbr,Obe,sbr,lbr,LW,ibr,dbr,cbr,iM,fbr,kr,Ky,mbr,Vbe,gbr,hbr,rn,pbr,Xbe,ubr,_br,zbe,bbr,vbr,Qbe,Fbr,Tbr,Mbr,pe,dM,Wbe,Ebr,Cbr,xW,wbr,Abr,ybr,cM,Hbe,Lbr,xbr,$W,$br,kbr,Sbr,fM,Ube,Rbr,Bbr,kW,Pbr,Ibr,qbr,mM,Jbe,Nbr,jbr,SW,Dbr,Gbr,Obr,gM,Ybe,Vbr,Xbr,RW,zbr,Qbr,Wbr,hM,Kbe,Hbr,Ubr,BW,Jbr,Ybr,Kbr,pM,Zbe,Zbr,evr,PW,ovr,rvr,tvr,uM,eve,avr,nvr,IW,svr,lvr,ivr,_M,ove,dvr,cvr,qW,fvr,mvr,gvr,bM,rve,hvr,pvr,NW,uvr,_vr,bvr,vM,tve,vvr,Fvr,jW,Tvr,Mvr,Evr,FM,ave,Cvr,wvr,DW,Avr,yvr,Lvr,TM,nve,xvr,$vr,GW,kvr,Svr,Rvr,MM,sve,Bvr,Pvr,OW,Ivr,qvr,Nvr,EM,lve,jvr,Dvr,VW,Gvr,Ovr,Vvr,CM,ive,Xvr,zvr,XW,Qvr,Wvr,Hvr,wM,dve,Uvr,Jvr,zW,Yvr,Kvr,Zvr,AM,hIe,tc,yM,cve,Zy,eFr,fve,oFr,pIe,nr,eL,rFr,ac,tFr,QW,aFr,nFr,WW,sFr,lFr,iFr,oL,dFr,mve,cFr,fFr,mFr,kt,rL,gFr,gve,hFr,pFr,nc,uFr,hve,_Fr,bFr,HW,vFr,FFr,TFr,LM,MFr,Sr,tL,EFr,pve,CFr,wFr,tn,AFr,uve,yFr,LFr,_ve,xFr,$Fr,bve,kFr,SFr,RFr,vve,xM,Fve,BFr,PFr,UW,IFr,qFr,NFr,$M,uIe,sc,kM,Tve,aL,jFr,Mve,DFr,_Ie,sr,nL,GFr,lc,OFr,JW,VFr,XFr,YW,zFr,QFr,WFr,sL,HFr,Eve,UFr,JFr,YFr,St,lL,KFr,Cve,ZFr,e6r,ic,o6r,wve,r6r,t6r,KW,a6r,n6r,s6r,SM,l6r,Rr,iL,i6r,Ave,d6r,c6r,an,f6r,yve,m6r,g6r,Lve,h6r,p6r,xve,u6r,_6r,b6r,de,RM,$ve,v6r,F6r,ZW,T6r,M6r,E6r,BM,kve,C6r,w6r,eH,A6r,y6r,L6r,PM,Sve,x6r,$6r,oH,k6r,S6r,R6r,IM,Rve,B6r,P6r,rH,I6r,q6r,N6r,qM,Bve,j6r,D6r,tH,G6r,O6r,V6r,NM,Pve,X6r,z6r,aH,Q6r,W6r,H6r,jM,Ive,U6r,J6r,nH,Y6r,K6r,Z6r,DM,qve,eTr,oTr,sH,rTr,tTr,aTr,GM,Nve,nTr,sTr,lH,lTr,iTr,dTr,OM,jve,cTr,fTr,iH,mTr,gTr,hTr,VM,Dve,pTr,uTr,dH,_Tr,bTr,vTr,XM,Gve,FTr,TTr,cH,MTr,ETr,CTr,zM,Ove,wTr,ATr,fH,yTr,LTr,xTr,QM,Vve,$Tr,kTr,mH,STr,RTr,BTr,WM,Xve,PTr,ITr,gH,qTr,NTr,jTr,HM,zve,DTr,GTr,hH,OTr,VTr,XTr,UM,Qve,zTr,QTr,pH,WTr,HTr,UTr,JM,Wve,JTr,YTr,uH,KTr,ZTr,e7r,YM,Hve,o7r,r7r,_H,t7r,a7r,n7r,KM,Uve,s7r,l7r,bH,i7r,d7r,c7r,ZM,bIe,dc,e4,Jve,dL,f7r,Yve,m7r,vIe,lr,cL,g7r,cc,h7r,vH,p7r,u7r,FH,_7r,b7r,v7r,fL,F7r,Kve,T7r,M7r,E7r,Rt,mL,C7r,Zve,w7r,A7r,fc,y7r,eFe,L7r,x7r,TH,$7r,k7r,S7r,o4,R7r,Br,gL,B7r,oFe,P7r,I7r,nn,q7r,rFe,N7r,j7r,tFe,D7r,G7r,aFe,O7r,V7r,X7r,ce,r4,nFe,z7r,Q7r,MH,W7r,H7r,U7r,t4,sFe,J7r,Y7r,EH,K7r,Z7r,e9r,a4,lFe,o9r,r9r,CH,t9r,a9r,n9r,n4,iFe,s9r,l9r,wH,i9r,d9r,c9r,s4,dFe,f9r,m9r,AH,g9r,h9r,p9r,l4,cFe,u9r,_9r,yH,b9r,v9r,F9r,i4,fFe,T9r,M9r,LH,E9r,C9r,w9r,d4,mFe,A9r,y9r,xH,L9r,x9r,$9r,c4,gFe,k9r,S9r,$H,R9r,B9r,P9r,f4,hFe,I9r,q9r,kH,N9r,j9r,D9r,m4,pFe,G9r,O9r,SH,V9r,X9r,z9r,g4,uFe,Q9r,W9r,RH,H9r,U9r,J9r,h4,_Fe,Y9r,K9r,BH,Z9r,eMr,oMr,p4,bFe,rMr,tMr,PH,aMr,nMr,sMr,u4,vFe,lMr,iMr,IH,dMr,cMr,fMr,_4,FFe,mMr,gMr,qH,hMr,pMr,uMr,b4,TFe,_Mr,bMr,NH,vMr,FMr,TMr,v4,MFe,MMr,EMr,jH,CMr,wMr,AMr,F4,EFe,yMr,LMr,DH,xMr,$Mr,kMr,T4,CFe,SMr,RMr,GH,BMr,PMr,IMr,M4,FIe,mc,E4,wFe,hL,qMr,AFe,NMr,TIe,ir,pL,jMr,gc,DMr,OH,GMr,OMr,VH,VMr,XMr,zMr,uL,QMr,yFe,WMr,HMr,UMr,Bt,_L,JMr,LFe,YMr,KMr,hc,ZMr,xFe,e4r,o4r,XH,r4r,t4r,a4r,C4,n4r,Pr,bL,s4r,$Fe,l4r,i4r,sn,d4r,kFe,c4r,f4r,SFe,m4r,g4r,RFe,h4r,p4r,u4r,BFe,w4,PFe,_4r,b4r,zH,v4r,F4r,T4r,A4,MIe,pc,y4,IFe,vL,M4r,qFe,E4r,EIe,dr,FL,C4r,uc,w4r,QH,A4r,y4r,WH,L4r,x4r,$4r,TL,k4r,NFe,S4r,R4r,B4r,Pt,ML,P4r,jFe,I4r,q4r,_c,N4r,DFe,j4r,D4r,HH,G4r,O4r,V4r,L4,X4r,Ir,EL,z4r,GFe,Q4r,W4r,ln,H4r,OFe,U4r,J4r,VFe,Y4r,K4r,XFe,Z4r,eEr,oEr,zFe,x4,QFe,rEr,tEr,UH,aEr,nEr,sEr,$4,CIe,bc,k4,WFe,CL,lEr,HFe,iEr,wIe,cr,wL,dEr,vc,cEr,JH,fEr,mEr,YH,gEr,hEr,pEr,AL,uEr,UFe,_Er,bEr,vEr,It,yL,FEr,JFe,TEr,MEr,Fc,EEr,YFe,CEr,wEr,KH,AEr,yEr,LEr,S4,xEr,qr,LL,$Er,KFe,kEr,SEr,dn,REr,ZFe,BEr,PEr,e6e,IEr,qEr,o6e,NEr,jEr,DEr,ee,R4,r6e,GEr,OEr,ZH,VEr,XEr,zEr,B4,t6e,QEr,WEr,eU,HEr,UEr,JEr,P4,a6e,YEr,KEr,oU,ZEr,e5r,o5r,I4,n6e,r5r,t5r,rU,a5r,n5r,s5r,q4,s6e,l5r,i5r,tU,d5r,c5r,f5r,N4,l6e,m5r,g5r,aU,h5r,p5r,u5r,j4,i6e,_5r,b5r,nU,v5r,F5r,T5r,D4,d6e,M5r,E5r,sU,C5r,w5r,A5r,G4,c6e,y5r,L5r,lU,x5r,$5r,k5r,O4,f6e,S5r,R5r,iU,B5r,P5r,I5r,V4,m6e,q5r,N5r,dU,j5r,D5r,G5r,X4,g6e,O5r,V5r,cU,X5r,z5r,Q5r,z4,h6e,W5r,H5r,fU,U5r,J5r,Y5r,Q4,p6e,K5r,Z5r,mU,eCr,oCr,rCr,W4,u6e,tCr,aCr,gU,nCr,sCr,lCr,H4,_6e,iCr,dCr,hU,cCr,fCr,mCr,U4,b6e,gCr,hCr,pU,pCr,uCr,_Cr,J4,v6e,bCr,vCr,uU,FCr,TCr,MCr,Y4,F6e,ECr,CCr,_U,wCr,ACr,yCr,K4,T6e,LCr,xCr,bU,$Cr,kCr,SCr,Z4,M6e,RCr,BCr,vU,PCr,ICr,qCr,eE,E6e,NCr,jCr,FU,DCr,GCr,OCr,oE,C6e,VCr,XCr,TU,zCr,QCr,WCr,rE,w6e,HCr,UCr,MU,JCr,YCr,KCr,tE,A6e,ZCr,e3r,EU,o3r,r3r,t3r,aE,y6e,a3r,n3r,CU,s3r,l3r,i3r,nE,AIe,Tc,sE,L6e,xL,d3r,x6e,c3r,yIe,fr,$L,f3r,Mc,m3r,wU,g3r,h3r,AU,p3r,u3r,_3r,kL,b3r,$6e,v3r,F3r,T3r,qt,SL,M3r,k6e,E3r,C3r,Ec,w3r,S6e,A3r,y3r,yU,L3r,x3r,$3r,lE,k3r,Nr,RL,S3r,R6e,R3r,B3r,cn,P3r,B6e,I3r,q3r,P6e,N3r,j3r,I6e,D3r,G3r,O3r,Se,iE,q6e,V3r,X3r,LU,z3r,Q3r,W3r,dE,N6e,H3r,U3r,xU,J3r,Y3r,K3r,cE,j6e,Z3r,ewr,$U,owr,rwr,twr,fE,D6e,awr,nwr,kU,swr,lwr,iwr,mE,G6e,dwr,cwr,SU,fwr,mwr,gwr,gE,O6e,hwr,pwr,RU,uwr,_wr,bwr,hE,V6e,vwr,Fwr,BU,Twr,Mwr,Ewr,pE,X6e,Cwr,wwr,PU,Awr,ywr,Lwr,uE,z6e,xwr,$wr,IU,kwr,Swr,Rwr,_E,LIe,Cc,bE,Q6e,BL,Bwr,W6e,Pwr,xIe,mr,PL,Iwr,wc,qwr,qU,Nwr,jwr,NU,Dwr,Gwr,Owr,IL,Vwr,H6e,Xwr,zwr,Qwr,Nt,qL,Wwr,U6e,Hwr,Uwr,Ac,Jwr,J6e,Ywr,Kwr,jU,Zwr,eAr,oAr,vE,rAr,jr,NL,tAr,Y6e,aAr,nAr,fn,sAr,K6e,lAr,iAr,Z6e,dAr,cAr,eTe,fAr,mAr,gAr,Fe,FE,oTe,hAr,pAr,DU,uAr,_Ar,bAr,TE,rTe,vAr,FAr,GU,TAr,MAr,EAr,ME,tTe,CAr,wAr,OU,AAr,yAr,LAr,EE,aTe,xAr,$Ar,VU,kAr,SAr,RAr,CE,nTe,BAr,PAr,XU,IAr,qAr,NAr,wE,sTe,jAr,DAr,zU,GAr,OAr,VAr,AE,lTe,XAr,zAr,QU,QAr,WAr,HAr,yE,iTe,UAr,JAr,WU,YAr,KAr,ZAr,LE,dTe,e0r,o0r,HU,r0r,t0r,a0r,xE,cTe,n0r,s0r,UU,l0r,i0r,d0r,$E,fTe,c0r,f0r,JU,m0r,g0r,h0r,kE,mTe,p0r,u0r,YU,_0r,b0r,v0r,SE,gTe,F0r,T0r,KU,M0r,E0r,C0r,RE,$Ie,yc,BE,hTe,jL,w0r,pTe,A0r,kIe,gr,DL,y0r,Lc,L0r,ZU,x0r,$0r,eJ,k0r,S0r,R0r,GL,B0r,uTe,P0r,I0r,q0r,jt,OL,N0r,_Te,j0r,D0r,xc,G0r,bTe,O0r,V0r,oJ,X0r,z0r,Q0r,PE,W0r,Dr,VL,H0r,vTe,U0r,J0r,mn,Y0r,FTe,K0r,Z0r,TTe,eyr,oyr,MTe,ryr,tyr,ayr,Le,IE,ETe,nyr,syr,rJ,lyr,iyr,dyr,qE,CTe,cyr,fyr,tJ,myr,gyr,hyr,NE,wTe,pyr,uyr,aJ,_yr,byr,vyr,jE,ATe,Fyr,Tyr,nJ,Myr,Eyr,Cyr,DE,yTe,wyr,Ayr,sJ,yyr,Lyr,xyr,GE,LTe,$yr,kyr,lJ,Syr,Ryr,Byr,OE,xTe,Pyr,Iyr,iJ,qyr,Nyr,jyr,VE,$Te,Dyr,Gyr,dJ,Oyr,Vyr,Xyr,XE,kTe,zyr,Qyr,cJ,Wyr,Hyr,Uyr,zE,STe,Jyr,Yyr,fJ,Kyr,Zyr,eLr,QE,SIe,$c,WE,RTe,XL,oLr,BTe,rLr,RIe,hr,zL,tLr,kc,aLr,mJ,nLr,sLr,gJ,lLr,iLr,dLr,QL,cLr,PTe,fLr,mLr,gLr,Dt,WL,hLr,ITe,pLr,uLr,Sc,_Lr,qTe,bLr,vLr,hJ,FLr,TLr,MLr,HE,ELr,Gr,HL,CLr,NTe,wLr,ALr,gn,yLr,jTe,LLr,xLr,DTe,$Lr,kLr,GTe,SLr,RLr,BLr,xe,UE,OTe,PLr,ILr,pJ,qLr,NLr,jLr,JE,VTe,DLr,GLr,uJ,OLr,VLr,XLr,YE,XTe,zLr,QLr,_J,WLr,HLr,ULr,KE,zTe,JLr,YLr,bJ,KLr,ZLr,e8r,ZE,QTe,o8r,r8r,vJ,t8r,a8r,n8r,e5,WTe,s8r,l8r,FJ,i8r,d8r,c8r,o5,HTe,f8r,m8r,TJ,g8r,h8r,p8r,r5,UTe,u8r,_8r,MJ,b8r,v8r,F8r,t5,JTe,T8r,M8r,EJ,E8r,C8r,w8r,a5,YTe,A8r,y8r,CJ,L8r,x8r,$8r,n5,BIe,Rc,s5,KTe,UL,k8r,ZTe,S8r,PIe,pr,JL,R8r,Bc,B8r,wJ,P8r,I8r,AJ,q8r,N8r,j8r,YL,D8r,e7e,G8r,O8r,V8r,Gt,KL,X8r,o7e,z8r,Q8r,Pc,W8r,r7e,H8r,U8r,yJ,J8r,Y8r,K8r,l5,Z8r,Or,ZL,exr,t7e,oxr,rxr,hn,txr,a7e,axr,nxr,n7e,sxr,lxr,s7e,ixr,dxr,cxr,$e,i5,l7e,fxr,mxr,LJ,gxr,hxr,pxr,d5,i7e,uxr,_xr,xJ,bxr,vxr,Fxr,c5,d7e,Txr,Mxr,$J,Exr,Cxr,wxr,f5,c7e,Axr,yxr,kJ,Lxr,xxr,$xr,m5,f7e,kxr,Sxr,SJ,Rxr,Bxr,Pxr,g5,m7e,Ixr,qxr,RJ,Nxr,jxr,Dxr,h5,g7e,Gxr,Oxr,BJ,Vxr,Xxr,zxr,p5,h7e,Qxr,Wxr,PJ,Hxr,Uxr,Jxr,u5,p7e,Yxr,Kxr,IJ,Zxr,e$r,o$r,_5,u7e,r$r,t$r,qJ,a$r,n$r,s$r,b5,IIe,Ic,v5,_7e,e8,l$r,b7e,i$r,qIe,ur,o8,d$r,qc,c$r,NJ,f$r,m$r,jJ,g$r,h$r,p$r,r8,u$r,v7e,_$r,b$r,v$r,Ot,t8,F$r,F7e,T$r,M$r,Nc,E$r,T7e,C$r,w$r,DJ,A$r,y$r,L$r,F5,x$r,Vr,a8,$$r,M7e,k$r,S$r,pn,R$r,E7e,B$r,P$r,C7e,I$r,q$r,w7e,N$r,j$r,D$r,ke,T5,A7e,G$r,O$r,GJ,V$r,X$r,z$r,M5,y7e,Q$r,W$r,OJ,H$r,U$r,J$r,E5,L7e,Y$r,K$r,VJ,Z$r,ekr,okr,C5,x7e,rkr,tkr,XJ,akr,nkr,skr,w5,$7e,lkr,ikr,zJ,dkr,ckr,fkr,A5,k7e,mkr,gkr,QJ,hkr,pkr,ukr,y5,S7e,_kr,bkr,WJ,vkr,Fkr,Tkr,L5,R7e,Mkr,Ekr,HJ,Ckr,wkr,Akr,x5,B7e,ykr,Lkr,UJ,xkr,$kr,kkr,$5,P7e,Skr,Rkr,JJ,Bkr,Pkr,Ikr,k5,NIe,jc,S5,I7e,n8,qkr,q7e,Nkr,jIe,_r,s8,jkr,Dc,Dkr,YJ,Gkr,Okr,KJ,Vkr,Xkr,zkr,l8,Qkr,N7e,Wkr,Hkr,Ukr,Vt,i8,Jkr,j7e,Ykr,Kkr,Gc,Zkr,D7e,eSr,oSr,ZJ,rSr,tSr,aSr,R5,nSr,Xr,d8,sSr,G7e,lSr,iSr,un,dSr,O7e,cSr,fSr,V7e,mSr,gSr,X7e,hSr,pSr,uSr,Ge,B5,z7e,_Sr,bSr,eY,vSr,FSr,TSr,P5,Q7e,MSr,ESr,oY,CSr,wSr,ASr,I5,W7e,ySr,LSr,rY,xSr,$Sr,kSr,q5,H7e,SSr,RSr,tY,BSr,PSr,ISr,N5,U7e,qSr,NSr,aY,jSr,DSr,GSr,j5,J7e,OSr,VSr,nY,XSr,zSr,QSr,D5,Y7e,WSr,HSr,sY,USr,JSr,YSr,G5,K7e,KSr,ZSr,lY,eRr,oRr,rRr,O5,DIe,Oc,V5,Z7e,c8,tRr,e9e,aRr,GIe,br,f8,nRr,Vc,sRr,iY,lRr,iRr,dY,dRr,cRr,fRr,m8,mRr,o9e,gRr,hRr,pRr,Xt,g8,uRr,r9e,_Rr,bRr,Xc,vRr,t9e,FRr,TRr,cY,MRr,ERr,CRr,X5,wRr,zr,h8,ARr,a9e,yRr,LRr,_n,xRr,n9e,$Rr,kRr,s9e,SRr,RRr,l9e,BRr,PRr,IRr,Oe,z5,i9e,qRr,NRr,fY,jRr,DRr,GRr,Q5,d9e,ORr,VRr,mY,XRr,zRr,QRr,W5,c9e,WRr,HRr,gY,URr,JRr,YRr,H5,f9e,KRr,ZRr,hY,eBr,oBr,rBr,U5,m9e,tBr,aBr,pY,nBr,sBr,lBr,J5,g9e,iBr,dBr,uY,cBr,fBr,mBr,Y5,h9e,gBr,hBr,_Y,pBr,uBr,_Br,K5,p9e,bBr,vBr,bY,FBr,TBr,MBr,Z5,OIe,zc,eC,u9e,p8,EBr,_9e,CBr,VIe,vr,u8,wBr,Qc,ABr,vY,yBr,LBr,FY,xBr,$Br,kBr,_8,SBr,b9e,RBr,BBr,PBr,zt,b8,IBr,v9e,qBr,NBr,Wc,jBr,F9e,DBr,GBr,TY,OBr,VBr,XBr,oC,zBr,Qr,v8,QBr,T9e,WBr,HBr,bn,UBr,M9e,JBr,YBr,E9e,KBr,ZBr,C9e,ePr,oPr,rPr,w9e,rC,A9e,tPr,aPr,MY,nPr,sPr,lPr,tC,XIe,Hc,aC,y9e,F8,iPr,L9e,dPr,zIe,Fr,T8,cPr,Uc,fPr,EY,mPr,gPr,CY,hPr,pPr,uPr,M8,_Pr,x9e,bPr,vPr,FPr,Qt,E8,TPr,$9e,MPr,EPr,Jc,CPr,k9e,wPr,APr,wY,yPr,LPr,xPr,nC,$Pr,Wr,C8,kPr,S9e,SPr,RPr,vn,BPr,R9e,PPr,IPr,B9e,qPr,NPr,P9e,jPr,DPr,GPr,w8,sC,I9e,OPr,VPr,AY,XPr,zPr,QPr,lC,q9e,WPr,HPr,yY,UPr,JPr,YPr,iC,QIe,Yc,dC,N9e,A8,KPr,j9e,ZPr,WIe,Tr,y8,eIr,Kc,oIr,LY,rIr,tIr,xY,aIr,nIr,sIr,L8,lIr,D9e,iIr,dIr,cIr,Wt,x8,fIr,G9e,mIr,gIr,Zc,hIr,O9e,pIr,uIr,$Y,_Ir,bIr,vIr,cC,FIr,Hr,$8,TIr,V9e,MIr,EIr,Fn,CIr,X9e,wIr,AIr,z9e,yIr,LIr,Q9e,xIr,$Ir,kIr,W9e,fC,H9e,SIr,RIr,kY,BIr,PIr,IIr,mC,HIe;return d=new oe({}),va=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Sw=new oe({}),Rw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),df=new qIr({props:{warning:!0,$$slots:{default:[HCt]},$$scope:{ctx:L}}}),Bw=new oe({}),Pw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L566"}}),Nw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L589"}}),lg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:L}}}),jw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/configuration_auto.py#L711"}}),Dw=new oe({}),Gw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L384"}}),Xw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L398"}}),jg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[JCt]},$$scope:{ctx:L}}}),zw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/tokenization_auto.py#L594"}}),Qw=new oe({}),Ww=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),Jw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),mh=new qIr({props:{$$slots:{default:[YCt]},$$scope:{ctx:L}}}),gh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[KCt]},$$scope:{ctx:L}}}),Yw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),Kw=new oe({}),Zw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L76"}}),rA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L90"}}),$h=new qIr({props:{$$slots:{default:[ZCt]},$$scope:{ctx:L}}}),kh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[e3t]},$$scope:{ctx:L}}}),tA=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/processing_auto.py#L243"}}),aA=new oe({}),nA=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L720"}}),lA=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Bh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[o3t]},$$scope:{ctx:L}}}),iA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Eu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[r3t]},$$scope:{ctx:L}}}),dA=new oe({}),cA=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L727"}}),mA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),wu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[t3t]},$$scope:{ctx:L}}}),gA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),g_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[a3t]},$$scope:{ctx:L}}}),hA=new oe({}),pA=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L742"}}),_A=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),p_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[n3t]},$$scope:{ctx:L}}}),bA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),K_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[s3t]},$$scope:{ctx:L}}}),vA=new oe({}),FA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L749"}}),MA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[l3t]},$$scope:{ctx:L}}}),EA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),q2=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[i3t]},$$scope:{ctx:L}}}),CA=new oe({}),wA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L756"}}),yA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),j2=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[d3t]},$$scope:{ctx:L}}}),LA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[c3t]},$$scope:{ctx:L}}}),xA=new oe({}),$A=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L765"}}),SA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[f3t]},$$scope:{ctx:L}}}),RA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),rb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[m3t]},$$scope:{ctx:L}}}),BA=new oe({}),PA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L799"}}),qA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ab=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[g3t]},$$scope:{ctx:L}}}),NA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Bb=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[h3t]},$$scope:{ctx:L}}}),jA=new oe({}),DA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L806"}}),OA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Ib=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[p3t]},$$scope:{ctx:L}}}),VA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Vb=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[u3t]},$$scope:{ctx:L}}}),XA=new oe({}),zA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L792"}}),WA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),zb=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[_3t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[b3t]},$$scope:{ctx:L}}}),UA=new oe({}),JA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L774"}}),KA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[v3t]},$$scope:{ctx:L}}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[F3t]},$$scope:{ctx:L}}}),e0=new oe({}),o0=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L781"}}),t0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[T3t]},$$scope:{ctx:L}}}),a0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[M3t]},$$scope:{ctx:L}}}),n0=new oe({}),s0=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L815"}}),i0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[E3t]},$$scope:{ctx:L}}}),d0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[C3t]},$$scope:{ctx:L}}}),c0=new oe({}),f0=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L854"}}),g0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[w3t]},$$scope:{ctx:L}}}),h0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[A3t]},$$scope:{ctx:L}}}),p0=new oe({}),u0=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L861"}}),b0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[y3t]},$$scope:{ctx:L}}}),v0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[L3t]},$$scope:{ctx:L}}}),F0=new oe({}),T0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L884"}}),E0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[x3t]},$$scope:{ctx:L}}}),C0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[$3t]},$$scope:{ctx:L}}}),w0=new oe({}),A0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L868"}}),L0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[k3t]},$$scope:{ctx:L}}}),x0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b6=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[S3t]},$$scope:{ctx:L}}}),$0=new oe({}),k0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L875"}}),R0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[R3t]},$$scope:{ctx:L}}}),B0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),C6=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[B3t]},$$scope:{ctx:L}}}),I0=new oe({}),q0=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L893"}}),j0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[P3t]},$$scope:{ctx:L}}}),D0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),S6=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[I3t]},$$scope:{ctx:L}}}),G0=new oe({}),O0=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L900"}}),X0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[q3t]},$$scope:{ctx:L}}}),z0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j6=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[N3t]},$$scope:{ctx:L}}}),Q0=new oe({}),W0=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L847"}}),U0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[j3t]},$$scope:{ctx:L}}}),J0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[D3t]},$$scope:{ctx:L}}}),K0=new oe({}),Z0=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L822"}}),oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[G3t]},$$scope:{ctx:L}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[O3t]},$$scope:{ctx:L}}}),ty=new oe({}),ay=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L829"}}),sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[V3t]},$$scope:{ctx:L}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[X3t]},$$scope:{ctx:L}}}),iy=new oe({}),dy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_auto.py#L838"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[z3t]},$$scope:{ctx:L}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Q3t]},$$scope:{ctx:L}}}),gy=new oe({}),hy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),uy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[W3t]},$$scope:{ctx:L}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),r7=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[H3t]},$$scope:{ctx:L}}}),by=new oe({}),vy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),a7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[U3t]},$$scope:{ctx:L}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),L7=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[J3t]},$$scope:{ctx:L}}}),Ey=new oe({}),Cy=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Y3t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[K3t]},$$scope:{ctx:L}}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[Z3t]},$$scope:{ctx:L}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),U7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ewt]},$$scope:{ctx:L}}}),Ry=new oe({}),By=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[owt]},$$scope:{ctx:L}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b9=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[rwt]},$$scope:{ctx:L}}}),Ny=new oe({}),jy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[twt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[awt]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[nwt]},$$scope:{ctx:L}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sM=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[swt]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[lwt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[iwt]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[dwt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$M=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[cwt]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[fwt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),ZM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[mwt]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gwt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M4=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hwt]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),_L=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),C4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[pwt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uwt]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),ML=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[_wt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),$4=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[bwt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),yL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),S4=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[vwt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nE=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Fwt]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),SL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),lE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Twt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Mwt]},$$scope:{ctx:L}}}),BL=new oe({}),PL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),qL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Ewt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),RE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Cwt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),OL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[wwt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),QE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Awt]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L272"}}),WL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),HE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ywt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Lwt]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L281"}}),KL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[xwt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b5=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[$wt]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),t8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),F5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[kwt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),k5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Swt]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L297"}}),i8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),R5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Rwt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),O5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bwt]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),g8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Pwt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Iwt]},$$scope:{ctx:L}}}),p8=new oe({}),u8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L313"}}),b8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qwt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Nwt]},$$scope:{ctx:L}}}),F8=new oe({}),T8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L322"}}),E8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[jwt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iC=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Dwt]},$$scope:{ctx:L}}}),A8=new oe({}),y8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/modeling_flax_auto.py#L331"}}),x8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Gwt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mC=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Owt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ri=o("Auto Classes"),tf=l(),Kr=a("p"),ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=a("code"),Lw=o("from_pretrained()"),af=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ne=l(),Xe=a("p"),ni=o("Instantiating one of "),Mn=a("a"),xw=o("AutoConfig"),En=o(", "),Cn=a("a"),$w=o("AutoModel"),si=o(`, and
`),wn=a("a"),kw=o("AutoTokenizer"),li=o(" will directly create a class of the relevant architecture. For instance"),nf=l(),F(va.$$.fragment),ze=l(),Ae=a("p"),Xx=o("will create a model that is an instance of "),ii=a("a"),zx=o("BertModel"),Qx=o("."),Eo=l(),Fa=a("p"),Wx=o("There is one class of "),sf=a("code"),Hx=o("AutoModel"),ZNe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WBe=l(),di=a("h2"),lf=a("a"),EZ=a("span"),F(Sw.$$.fragment),eje=l(),CZ=a("span"),oje=o("Extending the Auto Classes"),HBe=l(),An=a("p"),rje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wZ=a("code"),tje=o("NewModel"),aje=o(", make sure you have a "),AZ=a("code"),nje=o("NewModelConfig"),sje=o(` then you can add those to the auto
classes like this:`),UBe=l(),F(Rw.$$.fragment),JBe=l(),Ux=a("p"),lje=o("You will then be able to use the auto classes like you would usually do!"),YBe=l(),F(df.$$.fragment),KBe=l(),ci=a("h2"),cf=a("a"),yZ=a("span"),F(Bw.$$.fragment),ije=l(),LZ=a("span"),dje=o("AutoConfig"),ZBe=l(),Co=a("div"),F(Pw.$$.fragment),cje=l(),Iw=a("p"),fje=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Jx=a("a"),mje=o("from_pretrained()"),gje=o(" class method."),hje=l(),qw=a("p"),pje=o("This class cannot be instantiated directly using "),xZ=a("code"),uje=o("__init__()"),_je=o(" (throws an error)."),bje=l(),Mr=a("div"),F(Nw.$$.fragment),vje=l(),$Z=a("p"),Fje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Tje=l(),fi=a("p"),Mje=o("The configuration class to instantiate is selected based on the "),kZ=a("code"),Eje=o("model_type"),Cje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SZ=a("code"),wje=o("pretrained_model_name_or_path"),Aje=o(":"),yje=l(),A=a("ul"),ff=a("li"),RZ=a("strong"),Lje=o("albert"),xje=o(" \u2014 "),Yx=a("a"),$je=o("AlbertConfig"),kje=o(" (ALBERT model)"),Sje=l(),mf=a("li"),BZ=a("strong"),Rje=o("bart"),Bje=o(" \u2014 "),Kx=a("a"),Pje=o("BartConfig"),Ije=o(" (BART model)"),qje=l(),gf=a("li"),PZ=a("strong"),Nje=o("beit"),jje=o(" \u2014 "),Zx=a("a"),Dje=o("BeitConfig"),Gje=o(" (BEiT model)"),Oje=l(),hf=a("li"),IZ=a("strong"),Vje=o("bert"),Xje=o(" \u2014 "),e$=a("a"),zje=o("BertConfig"),Qje=o(" (BERT model)"),Wje=l(),pf=a("li"),qZ=a("strong"),Hje=o("bert-generation"),Uje=o(" \u2014 "),o$=a("a"),Jje=o("BertGenerationConfig"),Yje=o(" (Bert Generation model)"),Kje=l(),uf=a("li"),NZ=a("strong"),Zje=o("big_bird"),eDe=o(" \u2014 "),r$=a("a"),oDe=o("BigBirdConfig"),rDe=o(" (BigBird model)"),tDe=l(),_f=a("li"),jZ=a("strong"),aDe=o("bigbird_pegasus"),nDe=o(" \u2014 "),t$=a("a"),sDe=o("BigBirdPegasusConfig"),lDe=o(" (BigBirdPegasus model)"),iDe=l(),bf=a("li"),DZ=a("strong"),dDe=o("blenderbot"),cDe=o(" \u2014 "),a$=a("a"),fDe=o("BlenderbotConfig"),mDe=o(" (Blenderbot model)"),gDe=l(),vf=a("li"),GZ=a("strong"),hDe=o("blenderbot-small"),pDe=o(" \u2014 "),n$=a("a"),uDe=o("BlenderbotSmallConfig"),_De=o(" (BlenderbotSmall model)"),bDe=l(),Ff=a("li"),OZ=a("strong"),vDe=o("camembert"),FDe=o(" \u2014 "),s$=a("a"),TDe=o("CamembertConfig"),MDe=o(" (CamemBERT model)"),EDe=l(),Tf=a("li"),VZ=a("strong"),CDe=o("canine"),wDe=o(" \u2014 "),l$=a("a"),ADe=o("CanineConfig"),yDe=o(" (Canine model)"),LDe=l(),Mf=a("li"),XZ=a("strong"),xDe=o("clip"),$De=o(" \u2014 "),i$=a("a"),kDe=o("CLIPConfig"),SDe=o(" (CLIP model)"),RDe=l(),Ef=a("li"),zZ=a("strong"),BDe=o("convbert"),PDe=o(" \u2014 "),d$=a("a"),IDe=o("ConvBertConfig"),qDe=o(" (ConvBERT model)"),NDe=l(),Cf=a("li"),QZ=a("strong"),jDe=o("convnext"),DDe=o(" \u2014 "),c$=a("a"),GDe=o("ConvNextConfig"),ODe=o(" (ConvNext model)"),VDe=l(),wf=a("li"),WZ=a("strong"),XDe=o("ctrl"),zDe=o(" \u2014 "),f$=a("a"),QDe=o("CTRLConfig"),WDe=o(" (CTRL model)"),HDe=l(),Af=a("li"),HZ=a("strong"),UDe=o("data2vec-audio"),JDe=o(" \u2014 "),m$=a("a"),YDe=o("Data2VecAudioConfig"),KDe=o(" (Data2VecAudio model)"),ZDe=l(),yf=a("li"),UZ=a("strong"),eGe=o("data2vec-text"),oGe=o(" \u2014 "),g$=a("a"),rGe=o("Data2VecTextConfig"),tGe=o(" (Data2VecText model)"),aGe=l(),Lf=a("li"),JZ=a("strong"),nGe=o("data2vec-vision"),sGe=o(" \u2014 "),h$=a("a"),lGe=o("Data2VecVisionConfig"),iGe=o(" (Data2VecVision model)"),dGe=l(),xf=a("li"),YZ=a("strong"),cGe=o("deberta"),fGe=o(" \u2014 "),p$=a("a"),mGe=o("DebertaConfig"),gGe=o(" (DeBERTa model)"),hGe=l(),$f=a("li"),KZ=a("strong"),pGe=o("deberta-v2"),uGe=o(" \u2014 "),u$=a("a"),_Ge=o("DebertaV2Config"),bGe=o(" (DeBERTa-v2 model)"),vGe=l(),kf=a("li"),ZZ=a("strong"),FGe=o("decision_transformer"),TGe=o(" \u2014 "),_$=a("a"),MGe=o("DecisionTransformerConfig"),EGe=o(" (Decision Transformer model)"),CGe=l(),Sf=a("li"),eee=a("strong"),wGe=o("deit"),AGe=o(" \u2014 "),b$=a("a"),yGe=o("DeiTConfig"),LGe=o(" (DeiT model)"),xGe=l(),Rf=a("li"),oee=a("strong"),$Ge=o("detr"),kGe=o(" \u2014 "),v$=a("a"),SGe=o("DetrConfig"),RGe=o(" (DETR model)"),BGe=l(),Bf=a("li"),ree=a("strong"),PGe=o("distilbert"),IGe=o(" \u2014 "),F$=a("a"),qGe=o("DistilBertConfig"),NGe=o(" (DistilBERT model)"),jGe=l(),Pf=a("li"),tee=a("strong"),DGe=o("dpr"),GGe=o(" \u2014 "),T$=a("a"),OGe=o("DPRConfig"),VGe=o(" (DPR model)"),XGe=l(),If=a("li"),aee=a("strong"),zGe=o("dpt"),QGe=o(" \u2014 "),M$=a("a"),WGe=o("DPTConfig"),HGe=o(" (DPT model)"),UGe=l(),qf=a("li"),nee=a("strong"),JGe=o("electra"),YGe=o(" \u2014 "),E$=a("a"),KGe=o("ElectraConfig"),ZGe=o(" (ELECTRA model)"),eOe=l(),Nf=a("li"),see=a("strong"),oOe=o("encoder-decoder"),rOe=o(" \u2014 "),C$=a("a"),tOe=o("EncoderDecoderConfig"),aOe=o(" (Encoder decoder model)"),nOe=l(),jf=a("li"),lee=a("strong"),sOe=o("flaubert"),lOe=o(" \u2014 "),w$=a("a"),iOe=o("FlaubertConfig"),dOe=o(" (FlauBERT model)"),cOe=l(),Df=a("li"),iee=a("strong"),fOe=o("fnet"),mOe=o(" \u2014 "),A$=a("a"),gOe=o("FNetConfig"),hOe=o(" (FNet model)"),pOe=l(),Gf=a("li"),dee=a("strong"),uOe=o("fsmt"),_Oe=o(" \u2014 "),y$=a("a"),bOe=o("FSMTConfig"),vOe=o(" (FairSeq Machine-Translation model)"),FOe=l(),Of=a("li"),cee=a("strong"),TOe=o("funnel"),MOe=o(" \u2014 "),L$=a("a"),EOe=o("FunnelConfig"),COe=o(" (Funnel Transformer model)"),wOe=l(),Vf=a("li"),fee=a("strong"),AOe=o("glpn"),yOe=o(" \u2014 "),x$=a("a"),LOe=o("GLPNConfig"),xOe=o(" (GLPN model)"),$Oe=l(),Xf=a("li"),mee=a("strong"),kOe=o("gpt2"),SOe=o(" \u2014 "),$$=a("a"),ROe=o("GPT2Config"),BOe=o(" (OpenAI GPT-2 model)"),POe=l(),zf=a("li"),gee=a("strong"),IOe=o("gpt_neo"),qOe=o(" \u2014 "),k$=a("a"),NOe=o("GPTNeoConfig"),jOe=o(" (GPT Neo model)"),DOe=l(),Qf=a("li"),hee=a("strong"),GOe=o("gptj"),OOe=o(" \u2014 "),S$=a("a"),VOe=o("GPTJConfig"),XOe=o(" (GPT-J model)"),zOe=l(),Wf=a("li"),pee=a("strong"),QOe=o("hubert"),WOe=o(" \u2014 "),R$=a("a"),HOe=o("HubertConfig"),UOe=o(" (Hubert model)"),JOe=l(),Hf=a("li"),uee=a("strong"),YOe=o("ibert"),KOe=o(" \u2014 "),B$=a("a"),ZOe=o("IBertConfig"),eVe=o(" (I-BERT model)"),oVe=l(),Uf=a("li"),_ee=a("strong"),rVe=o("imagegpt"),tVe=o(" \u2014 "),P$=a("a"),aVe=o("ImageGPTConfig"),nVe=o(" (ImageGPT model)"),sVe=l(),Jf=a("li"),bee=a("strong"),lVe=o("layoutlm"),iVe=o(" \u2014 "),I$=a("a"),dVe=o("LayoutLMConfig"),cVe=o(" (LayoutLM model)"),fVe=l(),Yf=a("li"),vee=a("strong"),mVe=o("layoutlmv2"),gVe=o(" \u2014 "),q$=a("a"),hVe=o("LayoutLMv2Config"),pVe=o(" (LayoutLMv2 model)"),uVe=l(),Kf=a("li"),Fee=a("strong"),_Ve=o("led"),bVe=o(" \u2014 "),N$=a("a"),vVe=o("LEDConfig"),FVe=o(" (LED model)"),TVe=l(),Zf=a("li"),Tee=a("strong"),MVe=o("longformer"),EVe=o(" \u2014 "),j$=a("a"),CVe=o("LongformerConfig"),wVe=o(" (Longformer model)"),AVe=l(),em=a("li"),Mee=a("strong"),yVe=o("longt5"),LVe=o(" \u2014 "),D$=a("a"),xVe=o("LongT5Config"),$Ve=o(" (LongT5 model)"),kVe=l(),om=a("li"),Eee=a("strong"),SVe=o("luke"),RVe=o(" \u2014 "),G$=a("a"),BVe=o("LukeConfig"),PVe=o(" (LUKE model)"),IVe=l(),rm=a("li"),Cee=a("strong"),qVe=o("lxmert"),NVe=o(" \u2014 "),O$=a("a"),jVe=o("LxmertConfig"),DVe=o(" (LXMERT model)"),GVe=l(),tm=a("li"),wee=a("strong"),OVe=o("m2m_100"),VVe=o(" \u2014 "),V$=a("a"),XVe=o("M2M100Config"),zVe=o(" (M2M100 model)"),QVe=l(),am=a("li"),Aee=a("strong"),WVe=o("marian"),HVe=o(" \u2014 "),X$=a("a"),UVe=o("MarianConfig"),JVe=o(" (Marian model)"),YVe=l(),nm=a("li"),yee=a("strong"),KVe=o("maskformer"),ZVe=o(" \u2014 "),z$=a("a"),eXe=o("MaskFormerConfig"),oXe=o(" (MaskFormer model)"),rXe=l(),sm=a("li"),Lee=a("strong"),tXe=o("mbart"),aXe=o(" \u2014 "),Q$=a("a"),nXe=o("MBartConfig"),sXe=o(" (mBART model)"),lXe=l(),lm=a("li"),xee=a("strong"),iXe=o("megatron-bert"),dXe=o(" \u2014 "),W$=a("a"),cXe=o("MegatronBertConfig"),fXe=o(" (MegatronBert model)"),mXe=l(),im=a("li"),$ee=a("strong"),gXe=o("mobilebert"),hXe=o(" \u2014 "),H$=a("a"),pXe=o("MobileBertConfig"),uXe=o(" (MobileBERT model)"),_Xe=l(),dm=a("li"),kee=a("strong"),bXe=o("mpnet"),vXe=o(" \u2014 "),U$=a("a"),FXe=o("MPNetConfig"),TXe=o(" (MPNet model)"),MXe=l(),cm=a("li"),See=a("strong"),EXe=o("mt5"),CXe=o(" \u2014 "),J$=a("a"),wXe=o("MT5Config"),AXe=o(" (mT5 model)"),yXe=l(),fm=a("li"),Ree=a("strong"),LXe=o("nystromformer"),xXe=o(" \u2014 "),Y$=a("a"),$Xe=o("NystromformerConfig"),kXe=o(" (Nystromformer model)"),SXe=l(),mm=a("li"),Bee=a("strong"),RXe=o("openai-gpt"),BXe=o(" \u2014 "),K$=a("a"),PXe=o("OpenAIGPTConfig"),IXe=o(" (OpenAI GPT model)"),qXe=l(),gm=a("li"),Pee=a("strong"),NXe=o("pegasus"),jXe=o(" \u2014 "),Z$=a("a"),DXe=o("PegasusConfig"),GXe=o(" (Pegasus model)"),OXe=l(),hm=a("li"),Iee=a("strong"),VXe=o("perceiver"),XXe=o(" \u2014 "),ek=a("a"),zXe=o("PerceiverConfig"),QXe=o(" (Perceiver model)"),WXe=l(),pm=a("li"),qee=a("strong"),HXe=o("plbart"),UXe=o(" \u2014 "),ok=a("a"),JXe=o("PLBartConfig"),YXe=o(" (PLBart model)"),KXe=l(),um=a("li"),Nee=a("strong"),ZXe=o("poolformer"),eze=o(" \u2014 "),rk=a("a"),oze=o("PoolFormerConfig"),rze=o(" (PoolFormer model)"),tze=l(),_m=a("li"),jee=a("strong"),aze=o("prophetnet"),nze=o(" \u2014 "),tk=a("a"),sze=o("ProphetNetConfig"),lze=o(" (ProphetNet model)"),ize=l(),bm=a("li"),Dee=a("strong"),dze=o("qdqbert"),cze=o(" \u2014 "),ak=a("a"),fze=o("QDQBertConfig"),mze=o(" (QDQBert model)"),gze=l(),vm=a("li"),Gee=a("strong"),hze=o("rag"),pze=o(" \u2014 "),nk=a("a"),uze=o("RagConfig"),_ze=o(" (RAG model)"),bze=l(),Fm=a("li"),Oee=a("strong"),vze=o("realm"),Fze=o(" \u2014 "),sk=a("a"),Tze=o("RealmConfig"),Mze=o(" (Realm model)"),Eze=l(),Tm=a("li"),Vee=a("strong"),Cze=o("reformer"),wze=o(" \u2014 "),lk=a("a"),Aze=o("ReformerConfig"),yze=o(" (Reformer model)"),Lze=l(),Mm=a("li"),Xee=a("strong"),xze=o("regnet"),$ze=o(" \u2014 "),ik=a("a"),kze=o("RegNetConfig"),Sze=o(" (RegNet model)"),Rze=l(),Em=a("li"),zee=a("strong"),Bze=o("rembert"),Pze=o(" \u2014 "),dk=a("a"),Ize=o("RemBertConfig"),qze=o(" (RemBERT model)"),Nze=l(),Cm=a("li"),Qee=a("strong"),jze=o("resnet"),Dze=o(" \u2014 "),ck=a("a"),Gze=o("ResNetConfig"),Oze=o(" (ResNet model)"),Vze=l(),wm=a("li"),Wee=a("strong"),Xze=o("retribert"),zze=o(" \u2014 "),fk=a("a"),Qze=o("RetriBertConfig"),Wze=o(" (RetriBERT model)"),Hze=l(),Am=a("li"),Hee=a("strong"),Uze=o("roberta"),Jze=o(" \u2014 "),mk=a("a"),Yze=o("RobertaConfig"),Kze=o(" (RoBERTa model)"),Zze=l(),ym=a("li"),Uee=a("strong"),eQe=o("roformer"),oQe=o(" \u2014 "),gk=a("a"),rQe=o("RoFormerConfig"),tQe=o(" (RoFormer model)"),aQe=l(),Lm=a("li"),Jee=a("strong"),nQe=o("segformer"),sQe=o(" \u2014 "),hk=a("a"),lQe=o("SegformerConfig"),iQe=o(" (SegFormer model)"),dQe=l(),xm=a("li"),Yee=a("strong"),cQe=o("sew"),fQe=o(" \u2014 "),pk=a("a"),mQe=o("SEWConfig"),gQe=o(" (SEW model)"),hQe=l(),$m=a("li"),Kee=a("strong"),pQe=o("sew-d"),uQe=o(" \u2014 "),uk=a("a"),_Qe=o("SEWDConfig"),bQe=o(" (SEW-D model)"),vQe=l(),km=a("li"),Zee=a("strong"),FQe=o("speech-encoder-decoder"),TQe=o(" \u2014 "),_k=a("a"),MQe=o("SpeechEncoderDecoderConfig"),EQe=o(" (Speech Encoder decoder model)"),CQe=l(),Sm=a("li"),eoe=a("strong"),wQe=o("speech_to_text"),AQe=o(" \u2014 "),bk=a("a"),yQe=o("Speech2TextConfig"),LQe=o(" (Speech2Text model)"),xQe=l(),Rm=a("li"),ooe=a("strong"),$Qe=o("speech_to_text_2"),kQe=o(" \u2014 "),vk=a("a"),SQe=o("Speech2Text2Config"),RQe=o(" (Speech2Text2 model)"),BQe=l(),Bm=a("li"),roe=a("strong"),PQe=o("splinter"),IQe=o(" \u2014 "),Fk=a("a"),qQe=o("SplinterConfig"),NQe=o(" (Splinter model)"),jQe=l(),Pm=a("li"),toe=a("strong"),DQe=o("squeezebert"),GQe=o(" \u2014 "),Tk=a("a"),OQe=o("SqueezeBertConfig"),VQe=o(" (SqueezeBERT model)"),XQe=l(),Im=a("li"),aoe=a("strong"),zQe=o("swin"),QQe=o(" \u2014 "),Mk=a("a"),WQe=o("SwinConfig"),HQe=o(" (Swin model)"),UQe=l(),qm=a("li"),noe=a("strong"),JQe=o("t5"),YQe=o(" \u2014 "),Ek=a("a"),KQe=o("T5Config"),ZQe=o(" (T5 model)"),eWe=l(),Nm=a("li"),soe=a("strong"),oWe=o("tapas"),rWe=o(" \u2014 "),Ck=a("a"),tWe=o("TapasConfig"),aWe=o(" (TAPAS model)"),nWe=l(),jm=a("li"),loe=a("strong"),sWe=o("tapex"),lWe=o(" \u2014 "),wk=a("a"),iWe=o("BartConfig"),dWe=o(" (TAPEX model)"),cWe=l(),Dm=a("li"),ioe=a("strong"),fWe=o("transfo-xl"),mWe=o(" \u2014 "),Ak=a("a"),gWe=o("TransfoXLConfig"),hWe=o(" (Transformer-XL model)"),pWe=l(),Gm=a("li"),doe=a("strong"),uWe=o("trocr"),_We=o(" \u2014 "),yk=a("a"),bWe=o("TrOCRConfig"),vWe=o(" (TrOCR model)"),FWe=l(),Om=a("li"),coe=a("strong"),TWe=o("unispeech"),MWe=o(" \u2014 "),Lk=a("a"),EWe=o("UniSpeechConfig"),CWe=o(" (UniSpeech model)"),wWe=l(),Vm=a("li"),foe=a("strong"),AWe=o("unispeech-sat"),yWe=o(" \u2014 "),xk=a("a"),LWe=o("UniSpeechSatConfig"),xWe=o(" (UniSpeechSat model)"),$We=l(),Xm=a("li"),moe=a("strong"),kWe=o("van"),SWe=o(" \u2014 "),$k=a("a"),RWe=o("VanConfig"),BWe=o(" (VAN model)"),PWe=l(),zm=a("li"),goe=a("strong"),IWe=o("vilt"),qWe=o(" \u2014 "),kk=a("a"),NWe=o("ViltConfig"),jWe=o(" (ViLT model)"),DWe=l(),Qm=a("li"),hoe=a("strong"),GWe=o("vision-encoder-decoder"),OWe=o(" \u2014 "),Sk=a("a"),VWe=o("VisionEncoderDecoderConfig"),XWe=o(" (Vision Encoder decoder model)"),zWe=l(),Wm=a("li"),poe=a("strong"),QWe=o("vision-text-dual-encoder"),WWe=o(" \u2014 "),Rk=a("a"),HWe=o("VisionTextDualEncoderConfig"),UWe=o(" (VisionTextDualEncoder model)"),JWe=l(),Hm=a("li"),uoe=a("strong"),YWe=o("visual_bert"),KWe=o(" \u2014 "),Bk=a("a"),ZWe=o("VisualBertConfig"),eHe=o(" (VisualBert model)"),oHe=l(),Um=a("li"),_oe=a("strong"),rHe=o("vit"),tHe=o(" \u2014 "),Pk=a("a"),aHe=o("ViTConfig"),nHe=o(" (ViT model)"),sHe=l(),Jm=a("li"),boe=a("strong"),lHe=o("vit_mae"),iHe=o(" \u2014 "),Ik=a("a"),dHe=o("ViTMAEConfig"),cHe=o(" (ViTMAE model)"),fHe=l(),Ym=a("li"),voe=a("strong"),mHe=o("wav2vec2"),gHe=o(" \u2014 "),qk=a("a"),hHe=o("Wav2Vec2Config"),pHe=o(" (Wav2Vec2 model)"),uHe=l(),Km=a("li"),Foe=a("strong"),_He=o("wavlm"),bHe=o(" \u2014 "),Nk=a("a"),vHe=o("WavLMConfig"),FHe=o(" (WavLM model)"),THe=l(),Zm=a("li"),Toe=a("strong"),MHe=o("xglm"),EHe=o(" \u2014 "),jk=a("a"),CHe=o("XGLMConfig"),wHe=o(" (XGLM model)"),AHe=l(),eg=a("li"),Moe=a("strong"),yHe=o("xlm"),LHe=o(" \u2014 "),Dk=a("a"),xHe=o("XLMConfig"),$He=o(" (XLM model)"),kHe=l(),og=a("li"),Eoe=a("strong"),SHe=o("xlm-prophetnet"),RHe=o(" \u2014 "),Gk=a("a"),BHe=o("XLMProphetNetConfig"),PHe=o(" (XLMProphetNet model)"),IHe=l(),rg=a("li"),Coe=a("strong"),qHe=o("xlm-roberta"),NHe=o(" \u2014 "),Ok=a("a"),jHe=o("XLMRobertaConfig"),DHe=o(" (XLM-RoBERTa model)"),GHe=l(),tg=a("li"),woe=a("strong"),OHe=o("xlm-roberta-xl"),VHe=o(" \u2014 "),Vk=a("a"),XHe=o("XLMRobertaXLConfig"),zHe=o(" (XLM-RoBERTa-XL model)"),QHe=l(),ag=a("li"),Aoe=a("strong"),WHe=o("xlnet"),HHe=o(" \u2014 "),Xk=a("a"),UHe=o("XLNetConfig"),JHe=o(" (XLNet model)"),YHe=l(),ng=a("li"),yoe=a("strong"),KHe=o("yolos"),ZHe=o(" \u2014 "),zk=a("a"),eUe=o("YolosConfig"),oUe=o(" (YOLOS model)"),rUe=l(),sg=a("li"),Loe=a("strong"),tUe=o("yoso"),aUe=o(" \u2014 "),Qk=a("a"),nUe=o("YosoConfig"),sUe=o(" (YOSO model)"),lUe=l(),F(lg.$$.fragment),iUe=l(),ig=a("div"),F(jw.$$.fragment),dUe=l(),xoe=a("p"),cUe=o("Register a new configuration for this class."),ePe=l(),mi=a("h2"),dg=a("a"),$oe=a("span"),F(Dw.$$.fragment),fUe=l(),koe=a("span"),mUe=o("AutoTokenizer"),oPe=l(),wo=a("div"),F(Gw.$$.fragment),gUe=l(),Ow=a("p"),hUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=a("a"),pUe=o("AutoTokenizer.from_pretrained()"),uUe=o(" class method."),_Ue=l(),Vw=a("p"),bUe=o("This class cannot be instantiated directly using "),Soe=a("code"),vUe=o("__init__()"),FUe=o(" (throws an error)."),TUe=l(),Er=a("div"),F(Xw.$$.fragment),MUe=l(),Roe=a("p"),EUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CUe=l(),Ta=a("p"),wUe=o("The tokenizer class to instantiate is selected based on the "),Boe=a("code"),AUe=o("model_type"),yUe=o(` property of the config object (either
passed as an argument or loaded from `),Poe=a("code"),LUe=o("pretrained_model_name_or_path"),xUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=a("code"),$Ue=o("pretrained_model_name_or_path"),kUe=o(":"),SUe=l(),k=a("ul"),yn=a("li"),qoe=a("strong"),RUe=o("albert"),BUe=o(" \u2014 "),Hk=a("a"),PUe=o("AlbertTokenizer"),IUe=o(" or "),Uk=a("a"),qUe=o("AlbertTokenizerFast"),NUe=o(" (ALBERT model)"),jUe=l(),Ln=a("li"),Noe=a("strong"),DUe=o("bart"),GUe=o(" \u2014 "),Jk=a("a"),OUe=o("BartTokenizer"),VUe=o(" or "),Yk=a("a"),XUe=o("BartTokenizerFast"),zUe=o(" (BART model)"),QUe=l(),xn=a("li"),joe=a("strong"),WUe=o("barthez"),HUe=o(" \u2014 "),Kk=a("a"),UUe=o("BarthezTokenizer"),JUe=o(" or "),Zk=a("a"),YUe=o("BarthezTokenizerFast"),KUe=o(" (BARThez model)"),ZUe=l(),cg=a("li"),Doe=a("strong"),eJe=o("bartpho"),oJe=o(" \u2014 "),eS=a("a"),rJe=o("BartphoTokenizer"),tJe=o(" (BARTpho model)"),aJe=l(),$n=a("li"),Goe=a("strong"),nJe=o("bert"),sJe=o(" \u2014 "),oS=a("a"),lJe=o("BertTokenizer"),iJe=o(" or "),rS=a("a"),dJe=o("BertTokenizerFast"),cJe=o(" (BERT model)"),fJe=l(),fg=a("li"),Ooe=a("strong"),mJe=o("bert-generation"),gJe=o(" \u2014 "),tS=a("a"),hJe=o("BertGenerationTokenizer"),pJe=o(" (Bert Generation model)"),uJe=l(),mg=a("li"),Voe=a("strong"),_Je=o("bert-japanese"),bJe=o(" \u2014 "),aS=a("a"),vJe=o("BertJapaneseTokenizer"),FJe=o(" (BertJapanese model)"),TJe=l(),gg=a("li"),Xoe=a("strong"),MJe=o("bertweet"),EJe=o(" \u2014 "),nS=a("a"),CJe=o("BertweetTokenizer"),wJe=o(" (Bertweet model)"),AJe=l(),kn=a("li"),zoe=a("strong"),yJe=o("big_bird"),LJe=o(" \u2014 "),sS=a("a"),xJe=o("BigBirdTokenizer"),$Je=o(" or "),lS=a("a"),kJe=o("BigBirdTokenizerFast"),SJe=o(" (BigBird model)"),RJe=l(),Sn=a("li"),Qoe=a("strong"),BJe=o("bigbird_pegasus"),PJe=o(" \u2014 "),iS=a("a"),IJe=o("PegasusTokenizer"),qJe=o(" or "),dS=a("a"),NJe=o("PegasusTokenizerFast"),jJe=o(" (BigBirdPegasus model)"),DJe=l(),Rn=a("li"),Woe=a("strong"),GJe=o("blenderbot"),OJe=o(" \u2014 "),cS=a("a"),VJe=o("BlenderbotTokenizer"),XJe=o(" or "),fS=a("a"),zJe=o("BlenderbotTokenizerFast"),QJe=o(" (Blenderbot model)"),WJe=l(),hg=a("li"),Hoe=a("strong"),HJe=o("blenderbot-small"),UJe=o(" \u2014 "),mS=a("a"),JJe=o("BlenderbotSmallTokenizer"),YJe=o(" (BlenderbotSmall model)"),KJe=l(),pg=a("li"),Uoe=a("strong"),ZJe=o("byt5"),eYe=o(" \u2014 "),gS=a("a"),oYe=o("ByT5Tokenizer"),rYe=o(" (ByT5 model)"),tYe=l(),Bn=a("li"),Joe=a("strong"),aYe=o("camembert"),nYe=o(" \u2014 "),hS=a("a"),sYe=o("CamembertTokenizer"),lYe=o(" or "),pS=a("a"),iYe=o("CamembertTokenizerFast"),dYe=o(" (CamemBERT model)"),cYe=l(),ug=a("li"),Yoe=a("strong"),fYe=o("canine"),mYe=o(" \u2014 "),uS=a("a"),gYe=o("CanineTokenizer"),hYe=o(" (Canine model)"),pYe=l(),Pn=a("li"),Koe=a("strong"),uYe=o("clip"),_Ye=o(" \u2014 "),_S=a("a"),bYe=o("CLIPTokenizer"),vYe=o(" or "),bS=a("a"),FYe=o("CLIPTokenizerFast"),TYe=o(" (CLIP model)"),MYe=l(),In=a("li"),Zoe=a("strong"),EYe=o("convbert"),CYe=o(" \u2014 "),vS=a("a"),wYe=o("ConvBertTokenizer"),AYe=o(" or "),FS=a("a"),yYe=o("ConvBertTokenizerFast"),LYe=o(" (ConvBERT model)"),xYe=l(),qn=a("li"),ere=a("strong"),$Ye=o("cpm"),kYe=o(" \u2014 "),TS=a("a"),SYe=o("CpmTokenizer"),RYe=o(" or "),MS=a("a"),BYe=o("CpmTokenizerFast"),PYe=o(" (CPM model)"),IYe=l(),_g=a("li"),ore=a("strong"),qYe=o("ctrl"),NYe=o(" \u2014 "),ES=a("a"),jYe=o("CTRLTokenizer"),DYe=o(" (CTRL model)"),GYe=l(),Nn=a("li"),rre=a("strong"),OYe=o("data2vec-text"),VYe=o(" \u2014 "),CS=a("a"),XYe=o("RobertaTokenizer"),zYe=o(" or "),wS=a("a"),QYe=o("RobertaTokenizerFast"),WYe=o(" (Data2VecText model)"),HYe=l(),jn=a("li"),tre=a("strong"),UYe=o("deberta"),JYe=o(" \u2014 "),AS=a("a"),YYe=o("DebertaTokenizer"),KYe=o(" or "),yS=a("a"),ZYe=o("DebertaTokenizerFast"),eKe=o(" (DeBERTa model)"),oKe=l(),Dn=a("li"),are=a("strong"),rKe=o("deberta-v2"),tKe=o(" \u2014 "),LS=a("a"),aKe=o("DebertaV2Tokenizer"),nKe=o(" or "),xS=a("a"),sKe=o("DebertaV2TokenizerFast"),lKe=o(" (DeBERTa-v2 model)"),iKe=l(),Gn=a("li"),nre=a("strong"),dKe=o("distilbert"),cKe=o(" \u2014 "),$S=a("a"),fKe=o("DistilBertTokenizer"),mKe=o(" or "),kS=a("a"),gKe=o("DistilBertTokenizerFast"),hKe=o(" (DistilBERT model)"),pKe=l(),On=a("li"),sre=a("strong"),uKe=o("dpr"),_Ke=o(" \u2014 "),SS=a("a"),bKe=o("DPRQuestionEncoderTokenizer"),vKe=o(" or "),RS=a("a"),FKe=o("DPRQuestionEncoderTokenizerFast"),TKe=o(" (DPR model)"),MKe=l(),Vn=a("li"),lre=a("strong"),EKe=o("electra"),CKe=o(" \u2014 "),BS=a("a"),wKe=o("ElectraTokenizer"),AKe=o(" or "),PS=a("a"),yKe=o("ElectraTokenizerFast"),LKe=o(" (ELECTRA model)"),xKe=l(),bg=a("li"),ire=a("strong"),$Ke=o("flaubert"),kKe=o(" \u2014 "),IS=a("a"),SKe=o("FlaubertTokenizer"),RKe=o(" (FlauBERT model)"),BKe=l(),Xn=a("li"),dre=a("strong"),PKe=o("fnet"),IKe=o(" \u2014 "),qS=a("a"),qKe=o("FNetTokenizer"),NKe=o(" or "),NS=a("a"),jKe=o("FNetTokenizerFast"),DKe=o(" (FNet model)"),GKe=l(),vg=a("li"),cre=a("strong"),OKe=o("fsmt"),VKe=o(" \u2014 "),jS=a("a"),XKe=o("FSMTTokenizer"),zKe=o(" (FairSeq Machine-Translation model)"),QKe=l(),zn=a("li"),fre=a("strong"),WKe=o("funnel"),HKe=o(" \u2014 "),DS=a("a"),UKe=o("FunnelTokenizer"),JKe=o(" or "),GS=a("a"),YKe=o("FunnelTokenizerFast"),KKe=o(" (Funnel Transformer model)"),ZKe=l(),Qn=a("li"),mre=a("strong"),eZe=o("gpt2"),oZe=o(" \u2014 "),OS=a("a"),rZe=o("GPT2Tokenizer"),tZe=o(" or "),VS=a("a"),aZe=o("GPT2TokenizerFast"),nZe=o(" (OpenAI GPT-2 model)"),sZe=l(),Wn=a("li"),gre=a("strong"),lZe=o("gpt_neo"),iZe=o(" \u2014 "),XS=a("a"),dZe=o("GPT2Tokenizer"),cZe=o(" or "),zS=a("a"),fZe=o("GPT2TokenizerFast"),mZe=o(" (GPT Neo model)"),gZe=l(),Hn=a("li"),hre=a("strong"),hZe=o("gptj"),pZe=o(" \u2014 "),QS=a("a"),uZe=o("GPT2Tokenizer"),_Ze=o(" or "),WS=a("a"),bZe=o("GPT2TokenizerFast"),vZe=o(" (GPT-J model)"),FZe=l(),Un=a("li"),pre=a("strong"),TZe=o("herbert"),MZe=o(" \u2014 "),HS=a("a"),EZe=o("HerbertTokenizer"),CZe=o(" or "),US=a("a"),wZe=o("HerbertTokenizerFast"),AZe=o(" (HerBERT model)"),yZe=l(),Fg=a("li"),ure=a("strong"),LZe=o("hubert"),xZe=o(" \u2014 "),JS=a("a"),$Ze=o("Wav2Vec2CTCTokenizer"),kZe=o(" (Hubert model)"),SZe=l(),Jn=a("li"),_re=a("strong"),RZe=o("ibert"),BZe=o(" \u2014 "),YS=a("a"),PZe=o("RobertaTokenizer"),IZe=o(" or "),KS=a("a"),qZe=o("RobertaTokenizerFast"),NZe=o(" (I-BERT model)"),jZe=l(),Yn=a("li"),bre=a("strong"),DZe=o("layoutlm"),GZe=o(" \u2014 "),ZS=a("a"),OZe=o("LayoutLMTokenizer"),VZe=o(" or "),eR=a("a"),XZe=o("LayoutLMTokenizerFast"),zZe=o(" (LayoutLM model)"),QZe=l(),Kn=a("li"),vre=a("strong"),WZe=o("layoutlmv2"),HZe=o(" \u2014 "),oR=a("a"),UZe=o("LayoutLMv2Tokenizer"),JZe=o(" or "),rR=a("a"),YZe=o("LayoutLMv2TokenizerFast"),KZe=o(" (LayoutLMv2 model)"),ZZe=l(),Zn=a("li"),Fre=a("strong"),eeo=o("layoutxlm"),oeo=o(" \u2014 "),tR=a("a"),reo=o("LayoutXLMTokenizer"),teo=o(" or "),aR=a("a"),aeo=o("LayoutXLMTokenizerFast"),neo=o(" (LayoutXLM model)"),seo=l(),es=a("li"),Tre=a("strong"),leo=o("led"),ieo=o(" \u2014 "),nR=a("a"),deo=o("LEDTokenizer"),ceo=o(" or "),sR=a("a"),feo=o("LEDTokenizerFast"),meo=o(" (LED model)"),geo=l(),os=a("li"),Mre=a("strong"),heo=o("longformer"),peo=o(" \u2014 "),lR=a("a"),ueo=o("LongformerTokenizer"),_eo=o(" or "),iR=a("a"),beo=o("LongformerTokenizerFast"),veo=o(" (Longformer model)"),Feo=l(),rs=a("li"),Ere=a("strong"),Teo=o("longt5"),Meo=o(" \u2014 "),dR=a("a"),Eeo=o("T5Tokenizer"),Ceo=o(" or "),cR=a("a"),weo=o("T5TokenizerFast"),Aeo=o(" (LongT5 model)"),yeo=l(),Tg=a("li"),Cre=a("strong"),Leo=o("luke"),xeo=o(" \u2014 "),fR=a("a"),$eo=o("LukeTokenizer"),keo=o(" (LUKE model)"),Seo=l(),ts=a("li"),wre=a("strong"),Reo=o("lxmert"),Beo=o(" \u2014 "),mR=a("a"),Peo=o("LxmertTokenizer"),Ieo=o(" or "),gR=a("a"),qeo=o("LxmertTokenizerFast"),Neo=o(" (LXMERT model)"),jeo=l(),Mg=a("li"),Are=a("strong"),Deo=o("m2m_100"),Geo=o(" \u2014 "),hR=a("a"),Oeo=o("M2M100Tokenizer"),Veo=o(" (M2M100 model)"),Xeo=l(),Eg=a("li"),yre=a("strong"),zeo=o("marian"),Qeo=o(" \u2014 "),pR=a("a"),Weo=o("MarianTokenizer"),Heo=o(" (Marian model)"),Ueo=l(),as=a("li"),Lre=a("strong"),Jeo=o("mbart"),Yeo=o(" \u2014 "),uR=a("a"),Keo=o("MBartTokenizer"),Zeo=o(" or "),_R=a("a"),eoo=o("MBartTokenizerFast"),ooo=o(" (mBART model)"),roo=l(),ns=a("li"),xre=a("strong"),too=o("mbart50"),aoo=o(" \u2014 "),bR=a("a"),noo=o("MBart50Tokenizer"),soo=o(" or "),vR=a("a"),loo=o("MBart50TokenizerFast"),ioo=o(" (mBART-50 model)"),doo=l(),ss=a("li"),$re=a("strong"),coo=o("megatron-bert"),foo=o(" \u2014 "),FR=a("a"),moo=o("BertTokenizer"),goo=o(" or "),TR=a("a"),hoo=o("BertTokenizerFast"),poo=o(" (MegatronBert model)"),uoo=l(),Cg=a("li"),kre=a("strong"),_oo=o("mluke"),boo=o(" \u2014 "),MR=a("a"),voo=o("MLukeTokenizer"),Foo=o(" (mLUKE model)"),Too=l(),ls=a("li"),Sre=a("strong"),Moo=o("mobilebert"),Eoo=o(" \u2014 "),ER=a("a"),Coo=o("MobileBertTokenizer"),woo=o(" or "),CR=a("a"),Aoo=o("MobileBertTokenizerFast"),yoo=o(" (MobileBERT model)"),Loo=l(),is=a("li"),Rre=a("strong"),xoo=o("mpnet"),$oo=o(" \u2014 "),wR=a("a"),koo=o("MPNetTokenizer"),Soo=o(" or "),AR=a("a"),Roo=o("MPNetTokenizerFast"),Boo=o(" (MPNet model)"),Poo=l(),ds=a("li"),Bre=a("strong"),Ioo=o("mt5"),qoo=o(" \u2014 "),yR=a("a"),Noo=o("MT5Tokenizer"),joo=o(" or "),LR=a("a"),Doo=o("MT5TokenizerFast"),Goo=o(" (mT5 model)"),Ooo=l(),cs=a("li"),Pre=a("strong"),Voo=o("nystromformer"),Xoo=o(" \u2014 "),xR=a("a"),zoo=o("AlbertTokenizer"),Qoo=o(" or "),$R=a("a"),Woo=o("AlbertTokenizerFast"),Hoo=o(" (Nystromformer model)"),Uoo=l(),fs=a("li"),Ire=a("strong"),Joo=o("openai-gpt"),Yoo=o(" \u2014 "),kR=a("a"),Koo=o("OpenAIGPTTokenizer"),Zoo=o(" or "),SR=a("a"),ero=o("OpenAIGPTTokenizerFast"),oro=o(" (OpenAI GPT model)"),rro=l(),ms=a("li"),qre=a("strong"),tro=o("pegasus"),aro=o(" \u2014 "),RR=a("a"),nro=o("PegasusTokenizer"),sro=o(" or "),BR=a("a"),lro=o("PegasusTokenizerFast"),iro=o(" (Pegasus model)"),dro=l(),wg=a("li"),Nre=a("strong"),cro=o("perceiver"),fro=o(" \u2014 "),PR=a("a"),mro=o("PerceiverTokenizer"),gro=o(" (Perceiver model)"),hro=l(),Ag=a("li"),jre=a("strong"),pro=o("phobert"),uro=o(" \u2014 "),IR=a("a"),_ro=o("PhobertTokenizer"),bro=o(" (PhoBERT model)"),vro=l(),yg=a("li"),Dre=a("strong"),Fro=o("plbart"),Tro=o(" \u2014 "),qR=a("a"),Mro=o("PLBartTokenizer"),Ero=o(" (PLBart model)"),Cro=l(),Lg=a("li"),Gre=a("strong"),wro=o("prophetnet"),Aro=o(" \u2014 "),NR=a("a"),yro=o("ProphetNetTokenizer"),Lro=o(" (ProphetNet model)"),xro=l(),gs=a("li"),Ore=a("strong"),$ro=o("qdqbert"),kro=o(" \u2014 "),jR=a("a"),Sro=o("BertTokenizer"),Rro=o(" or "),DR=a("a"),Bro=o("BertTokenizerFast"),Pro=o(" (QDQBert model)"),Iro=l(),xg=a("li"),Vre=a("strong"),qro=o("rag"),Nro=o(" \u2014 "),GR=a("a"),jro=o("RagTokenizer"),Dro=o(" (RAG model)"),Gro=l(),hs=a("li"),Xre=a("strong"),Oro=o("realm"),Vro=o(" \u2014 "),OR=a("a"),Xro=o("RealmTokenizer"),zro=o(" or "),VR=a("a"),Qro=o("RealmTokenizerFast"),Wro=o(" (Realm model)"),Hro=l(),ps=a("li"),zre=a("strong"),Uro=o("reformer"),Jro=o(" \u2014 "),XR=a("a"),Yro=o("ReformerTokenizer"),Kro=o(" or "),zR=a("a"),Zro=o("ReformerTokenizerFast"),eto=o(" (Reformer model)"),oto=l(),us=a("li"),Qre=a("strong"),rto=o("rembert"),tto=o(" \u2014 "),QR=a("a"),ato=o("RemBertTokenizer"),nto=o(" or "),WR=a("a"),sto=o("RemBertTokenizerFast"),lto=o(" (RemBERT model)"),ito=l(),_s=a("li"),Wre=a("strong"),dto=o("retribert"),cto=o(" \u2014 "),HR=a("a"),fto=o("RetriBertTokenizer"),mto=o(" or "),UR=a("a"),gto=o("RetriBertTokenizerFast"),hto=o(" (RetriBERT model)"),pto=l(),bs=a("li"),Hre=a("strong"),uto=o("roberta"),_to=o(" \u2014 "),JR=a("a"),bto=o("RobertaTokenizer"),vto=o(" or "),YR=a("a"),Fto=o("RobertaTokenizerFast"),Tto=o(" (RoBERTa model)"),Mto=l(),vs=a("li"),Ure=a("strong"),Eto=o("roformer"),Cto=o(" \u2014 "),KR=a("a"),wto=o("RoFormerTokenizer"),Ato=o(" or "),ZR=a("a"),yto=o("RoFormerTokenizerFast"),Lto=o(" (RoFormer model)"),xto=l(),$g=a("li"),Jre=a("strong"),$to=o("speech_to_text"),kto=o(" \u2014 "),eB=a("a"),Sto=o("Speech2TextTokenizer"),Rto=o(" (Speech2Text model)"),Bto=l(),kg=a("li"),Yre=a("strong"),Pto=o("speech_to_text_2"),Ito=o(" \u2014 "),oB=a("a"),qto=o("Speech2Text2Tokenizer"),Nto=o(" (Speech2Text2 model)"),jto=l(),Fs=a("li"),Kre=a("strong"),Dto=o("splinter"),Gto=o(" \u2014 "),rB=a("a"),Oto=o("SplinterTokenizer"),Vto=o(" or "),tB=a("a"),Xto=o("SplinterTokenizerFast"),zto=o(" (Splinter model)"),Qto=l(),Ts=a("li"),Zre=a("strong"),Wto=o("squeezebert"),Hto=o(" \u2014 "),aB=a("a"),Uto=o("SqueezeBertTokenizer"),Jto=o(" or "),nB=a("a"),Yto=o("SqueezeBertTokenizerFast"),Kto=o(" (SqueezeBERT model)"),Zto=l(),Ms=a("li"),ete=a("strong"),eao=o("t5"),oao=o(" \u2014 "),sB=a("a"),rao=o("T5Tokenizer"),tao=o(" or "),lB=a("a"),aao=o("T5TokenizerFast"),nao=o(" (T5 model)"),sao=l(),Sg=a("li"),ote=a("strong"),lao=o("tapas"),iao=o(" \u2014 "),iB=a("a"),dao=o("TapasTokenizer"),cao=o(" (TAPAS model)"),fao=l(),Rg=a("li"),rte=a("strong"),mao=o("tapex"),gao=o(" \u2014 "),dB=a("a"),hao=o("TapexTokenizer"),pao=o(" (TAPEX model)"),uao=l(),Bg=a("li"),tte=a("strong"),_ao=o("transfo-xl"),bao=o(" \u2014 "),cB=a("a"),vao=o("TransfoXLTokenizer"),Fao=o(" (Transformer-XL model)"),Tao=l(),Es=a("li"),ate=a("strong"),Mao=o("visual_bert"),Eao=o(" \u2014 "),fB=a("a"),Cao=o("BertTokenizer"),wao=o(" or "),mB=a("a"),Aao=o("BertTokenizerFast"),yao=o(" (VisualBert model)"),Lao=l(),Pg=a("li"),nte=a("strong"),xao=o("wav2vec2"),$ao=o(" \u2014 "),gB=a("a"),kao=o("Wav2Vec2CTCTokenizer"),Sao=o(" (Wav2Vec2 model)"),Rao=l(),Ig=a("li"),ste=a("strong"),Bao=o("wav2vec2_phoneme"),Pao=o(" \u2014 "),hB=a("a"),Iao=o("Wav2Vec2PhonemeCTCTokenizer"),qao=o(" (Wav2Vec2Phoneme model)"),Nao=l(),Cs=a("li"),lte=a("strong"),jao=o("xglm"),Dao=o(" \u2014 "),pB=a("a"),Gao=o("XGLMTokenizer"),Oao=o(" or "),uB=a("a"),Vao=o("XGLMTokenizerFast"),Xao=o(" (XGLM model)"),zao=l(),qg=a("li"),ite=a("strong"),Qao=o("xlm"),Wao=o(" \u2014 "),_B=a("a"),Hao=o("XLMTokenizer"),Uao=o(" (XLM model)"),Jao=l(),Ng=a("li"),dte=a("strong"),Yao=o("xlm-prophetnet"),Kao=o(" \u2014 "),bB=a("a"),Zao=o("XLMProphetNetTokenizer"),eno=o(" (XLMProphetNet model)"),ono=l(),ws=a("li"),cte=a("strong"),rno=o("xlm-roberta"),tno=o(" \u2014 "),vB=a("a"),ano=o("XLMRobertaTokenizer"),nno=o(" or "),FB=a("a"),sno=o("XLMRobertaTokenizerFast"),lno=o(" (XLM-RoBERTa model)"),ino=l(),As=a("li"),fte=a("strong"),dno=o("xlm-roberta-xl"),cno=o(" \u2014 "),TB=a("a"),fno=o("RobertaTokenizer"),mno=o(" or "),MB=a("a"),gno=o("RobertaTokenizerFast"),hno=o(" (XLM-RoBERTa-XL model)"),pno=l(),ys=a("li"),mte=a("strong"),uno=o("xlnet"),_no=o(" \u2014 "),EB=a("a"),bno=o("XLNetTokenizer"),vno=o(" or "),CB=a("a"),Fno=o("XLNetTokenizerFast"),Tno=o(" (XLNet model)"),Mno=l(),Ls=a("li"),gte=a("strong"),Eno=o("yoso"),Cno=o(" \u2014 "),wB=a("a"),wno=o("AlbertTokenizer"),Ano=o(" or "),AB=a("a"),yno=o("AlbertTokenizerFast"),Lno=o(" (YOSO model)"),xno=l(),F(jg.$$.fragment),$no=l(),Dg=a("div"),F(zw.$$.fragment),kno=l(),hte=a("p"),Sno=o("Register a new tokenizer in this mapping."),rPe=l(),gi=a("h2"),Gg=a("a"),pte=a("span"),F(Qw.$$.fragment),Rno=l(),ute=a("span"),Bno=o("AutoFeatureExtractor"),tPe=l(),Ao=a("div"),F(Ww.$$.fragment),Pno=l(),Hw=a("p"),Ino=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yB=a("a"),qno=o("AutoFeatureExtractor.from_pretrained()"),Nno=o(" class method."),jno=l(),Uw=a("p"),Dno=o("This class cannot be instantiated directly using "),_te=a("code"),Gno=o("__init__()"),Ono=o(" (throws an error)."),Vno=l(),Qe=a("div"),F(Jw.$$.fragment),Xno=l(),bte=a("p"),zno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Qno=l(),Ma=a("p"),Wno=o("The feature extractor class to instantiate is selected based on the "),vte=a("code"),Hno=o("model_type"),Uno=o(` property of the config object
(either passed as an argument or loaded from `),Fte=a("code"),Jno=o("pretrained_model_name_or_path"),Yno=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tte=a("code"),Kno=o("pretrained_model_name_or_path"),Zno=o(":"),eso=l(),ae=a("ul"),Og=a("li"),Mte=a("strong"),oso=o("beit"),rso=o(" \u2014 "),LB=a("a"),tso=o("BeitFeatureExtractor"),aso=o(" (BEiT model)"),nso=l(),Vg=a("li"),Ete=a("strong"),sso=o("clip"),lso=o(" \u2014 "),xB=a("a"),iso=o("CLIPFeatureExtractor"),dso=o(" (CLIP model)"),cso=l(),Xg=a("li"),Cte=a("strong"),fso=o("convnext"),mso=o(" \u2014 "),$B=a("a"),gso=o("ConvNextFeatureExtractor"),hso=o(" (ConvNext model)"),pso=l(),zg=a("li"),wte=a("strong"),uso=o("data2vec-audio"),_so=o(" \u2014 "),kB=a("a"),bso=o("Wav2Vec2FeatureExtractor"),vso=o(" (Data2VecAudio model)"),Fso=l(),Qg=a("li"),Ate=a("strong"),Tso=o("data2vec-vision"),Mso=o(" \u2014 "),SB=a("a"),Eso=o("BeitFeatureExtractor"),Cso=o(" (Data2VecVision model)"),wso=l(),Wg=a("li"),yte=a("strong"),Aso=o("deit"),yso=o(" \u2014 "),RB=a("a"),Lso=o("DeiTFeatureExtractor"),xso=o(" (DeiT model)"),$so=l(),Hg=a("li"),Lte=a("strong"),kso=o("detr"),Sso=o(" \u2014 "),BB=a("a"),Rso=o("DetrFeatureExtractor"),Bso=o(" (DETR model)"),Pso=l(),Ug=a("li"),xte=a("strong"),Iso=o("dpt"),qso=o(" \u2014 "),PB=a("a"),Nso=o("DPTFeatureExtractor"),jso=o(" (DPT model)"),Dso=l(),Jg=a("li"),$te=a("strong"),Gso=o("glpn"),Oso=o(" \u2014 "),IB=a("a"),Vso=o("GLPNFeatureExtractor"),Xso=o(" (GLPN model)"),zso=l(),Yg=a("li"),kte=a("strong"),Qso=o("hubert"),Wso=o(" \u2014 "),qB=a("a"),Hso=o("Wav2Vec2FeatureExtractor"),Uso=o(" (Hubert model)"),Jso=l(),Kg=a("li"),Ste=a("strong"),Yso=o("layoutlmv2"),Kso=o(" \u2014 "),NB=a("a"),Zso=o("LayoutLMv2FeatureExtractor"),elo=o(" (LayoutLMv2 model)"),olo=l(),Zg=a("li"),Rte=a("strong"),rlo=o("maskformer"),tlo=o(" \u2014 "),jB=a("a"),alo=o("MaskFormerFeatureExtractor"),nlo=o(" (MaskFormer model)"),slo=l(),eh=a("li"),Bte=a("strong"),llo=o("perceiver"),ilo=o(" \u2014 "),DB=a("a"),dlo=o("PerceiverFeatureExtractor"),clo=o(" (Perceiver model)"),flo=l(),oh=a("li"),Pte=a("strong"),mlo=o("poolformer"),glo=o(" \u2014 "),GB=a("a"),hlo=o("PoolFormerFeatureExtractor"),plo=o(" (PoolFormer model)"),ulo=l(),rh=a("li"),Ite=a("strong"),_lo=o("regnet"),blo=o(" \u2014 "),OB=a("a"),vlo=o("ConvNextFeatureExtractor"),Flo=o(" (RegNet model)"),Tlo=l(),th=a("li"),qte=a("strong"),Mlo=o("resnet"),Elo=o(" \u2014 "),VB=a("a"),Clo=o("ConvNextFeatureExtractor"),wlo=o(" (ResNet model)"),Alo=l(),ah=a("li"),Nte=a("strong"),ylo=o("segformer"),Llo=o(" \u2014 "),XB=a("a"),xlo=o("SegformerFeatureExtractor"),$lo=o(" (SegFormer model)"),klo=l(),nh=a("li"),jte=a("strong"),Slo=o("speech_to_text"),Rlo=o(" \u2014 "),zB=a("a"),Blo=o("Speech2TextFeatureExtractor"),Plo=o(" (Speech2Text model)"),Ilo=l(),sh=a("li"),Dte=a("strong"),qlo=o("swin"),Nlo=o(" \u2014 "),QB=a("a"),jlo=o("ViTFeatureExtractor"),Dlo=o(" (Swin model)"),Glo=l(),lh=a("li"),Gte=a("strong"),Olo=o("van"),Vlo=o(" \u2014 "),WB=a("a"),Xlo=o("ConvNextFeatureExtractor"),zlo=o(" (VAN model)"),Qlo=l(),ih=a("li"),Ote=a("strong"),Wlo=o("vit"),Hlo=o(" \u2014 "),HB=a("a"),Ulo=o("ViTFeatureExtractor"),Jlo=o(" (ViT model)"),Ylo=l(),dh=a("li"),Vte=a("strong"),Klo=o("vit_mae"),Zlo=o(" \u2014 "),UB=a("a"),eio=o("ViTFeatureExtractor"),oio=o(" (ViTMAE model)"),rio=l(),ch=a("li"),Xte=a("strong"),tio=o("wav2vec2"),aio=o(" \u2014 "),JB=a("a"),nio=o("Wav2Vec2FeatureExtractor"),sio=o(" (Wav2Vec2 model)"),lio=l(),fh=a("li"),zte=a("strong"),iio=o("yolos"),dio=o(" \u2014 "),YB=a("a"),cio=o("YolosFeatureExtractor"),fio=o(" (YOLOS model)"),mio=l(),F(mh.$$.fragment),gio=l(),F(gh.$$.fragment),hio=l(),hh=a("div"),F(Yw.$$.fragment),pio=l(),Qte=a("p"),uio=o("Register a new feature extractor for this class."),aPe=l(),hi=a("h2"),ph=a("a"),Wte=a("span"),F(Kw.$$.fragment),_io=l(),Hte=a("span"),bio=o("AutoProcessor"),nPe=l(),yo=a("div"),F(Zw.$$.fragment),vio=l(),eA=a("p"),Fio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=a("a"),Tio=o("AutoProcessor.from_pretrained()"),Mio=o(" class method."),Eio=l(),oA=a("p"),Cio=o("This class cannot be instantiated directly using "),Ute=a("code"),wio=o("__init__()"),Aio=o(" (throws an error)."),yio=l(),We=a("div"),F(rA.$$.fragment),Lio=l(),Jte=a("p"),xio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),$io=l(),pi=a("p"),kio=o("The processor class to instantiate is selected based on the "),Yte=a("code"),Sio=o("model_type"),Rio=o(` property of the config object (either
passed as an argument or loaded from `),Kte=a("code"),Bio=o("pretrained_model_name_or_path"),Pio=o(" if possible):"),Iio=l(),be=a("ul"),uh=a("li"),Zte=a("strong"),qio=o("clip"),Nio=o(" \u2014 "),ZB=a("a"),jio=o("CLIPProcessor"),Dio=o(" (CLIP model)"),Gio=l(),_h=a("li"),eae=a("strong"),Oio=o("layoutlmv2"),Vio=o(" \u2014 "),eP=a("a"),Xio=o("LayoutLMv2Processor"),zio=o(" (LayoutLMv2 model)"),Qio=l(),bh=a("li"),oae=a("strong"),Wio=o("layoutxlm"),Hio=o(" \u2014 "),oP=a("a"),Uio=o("LayoutXLMProcessor"),Jio=o(" (LayoutXLM model)"),Yio=l(),vh=a("li"),rae=a("strong"),Kio=o("sew"),Zio=o(" \u2014 "),rP=a("a"),edo=o("Wav2Vec2Processor"),odo=o(" (SEW model)"),rdo=l(),Fh=a("li"),tae=a("strong"),tdo=o("sew-d"),ado=o(" \u2014 "),tP=a("a"),ndo=o("Wav2Vec2Processor"),sdo=o(" (SEW-D model)"),ldo=l(),Th=a("li"),aae=a("strong"),ido=o("speech_to_text"),ddo=o(" \u2014 "),aP=a("a"),cdo=o("Speech2TextProcessor"),fdo=o(" (Speech2Text model)"),mdo=l(),Mh=a("li"),nae=a("strong"),gdo=o("speech_to_text_2"),hdo=o(" \u2014 "),nP=a("a"),pdo=o("Speech2Text2Processor"),udo=o(" (Speech2Text2 model)"),_do=l(),Eh=a("li"),sae=a("strong"),bdo=o("trocr"),vdo=o(" \u2014 "),sP=a("a"),Fdo=o("TrOCRProcessor"),Tdo=o(" (TrOCR model)"),Mdo=l(),Ch=a("li"),lae=a("strong"),Edo=o("unispeech"),Cdo=o(" \u2014 "),lP=a("a"),wdo=o("Wav2Vec2Processor"),Ado=o(" (UniSpeech model)"),ydo=l(),wh=a("li"),iae=a("strong"),Ldo=o("unispeech-sat"),xdo=o(" \u2014 "),iP=a("a"),$do=o("Wav2Vec2Processor"),kdo=o(" (UniSpeechSat model)"),Sdo=l(),Ah=a("li"),dae=a("strong"),Rdo=o("vilt"),Bdo=o(" \u2014 "),dP=a("a"),Pdo=o("ViltProcessor"),Ido=o(" (ViLT model)"),qdo=l(),yh=a("li"),cae=a("strong"),Ndo=o("vision-text-dual-encoder"),jdo=o(" \u2014 "),cP=a("a"),Ddo=o("VisionTextDualEncoderProcessor"),Gdo=o(" (VisionTextDualEncoder model)"),Odo=l(),Lh=a("li"),fae=a("strong"),Vdo=o("wav2vec2"),Xdo=o(" \u2014 "),fP=a("a"),zdo=o("Wav2Vec2Processor"),Qdo=o(" (Wav2Vec2 model)"),Wdo=l(),xh=a("li"),mae=a("strong"),Hdo=o("wavlm"),Udo=o(" \u2014 "),mP=a("a"),Jdo=o("Wav2Vec2Processor"),Ydo=o(" (WavLM model)"),Kdo=l(),F($h.$$.fragment),Zdo=l(),F(kh.$$.fragment),eco=l(),Sh=a("div"),F(tA.$$.fragment),oco=l(),gae=a("p"),rco=o("Register a new processor for this class."),sPe=l(),ui=a("h2"),Rh=a("a"),hae=a("span"),F(aA.$$.fragment),tco=l(),pae=a("span"),aco=o("AutoModel"),lPe=l(),Lo=a("div"),F(nA.$$.fragment),nco=l(),_i=a("p"),sco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gP=a("a"),lco=o("from_pretrained()"),ico=o(" class method or the "),hP=a("a"),dco=o("from_config()"),cco=o(` class
method.`),fco=l(),sA=a("p"),mco=o("This class cannot be instantiated directly using "),uae=a("code"),gco=o("__init__()"),hco=o(" (throws an error)."),pco=l(),Zr=a("div"),F(lA.$$.fragment),uco=l(),_ae=a("p"),_co=o("Instantiates one of the base model classes of the library from a configuration."),bco=l(),bi=a("p"),vco=o(`Note:
Loading a model from its configuration file does `),bae=a("strong"),Fco=o("not"),Tco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pP=a("a"),Mco=o("from_pretrained()"),Eco=o(" to load the model weights."),Cco=l(),F(Bh.$$.fragment),wco=l(),He=a("div"),F(iA.$$.fragment),Aco=l(),vae=a("p"),yco=o("Instantiate one of the base model classes of the library from a pretrained model."),Lco=l(),Ea=a("p"),xco=o("The model class to instantiate is selected based on the "),Fae=a("code"),$co=o("model_type"),kco=o(` property of the config object (either
passed as an argument or loaded from `),Tae=a("code"),Sco=o("pretrained_model_name_or_path"),Rco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=a("code"),Bco=o("pretrained_model_name_or_path"),Pco=o(":"),Ico=l(),x=a("ul"),Ph=a("li"),Eae=a("strong"),qco=o("albert"),Nco=o(" \u2014 "),uP=a("a"),jco=o("AlbertModel"),Dco=o(" (ALBERT model)"),Gco=l(),Ih=a("li"),Cae=a("strong"),Oco=o("bart"),Vco=o(" \u2014 "),_P=a("a"),Xco=o("BartModel"),zco=o(" (BART model)"),Qco=l(),qh=a("li"),wae=a("strong"),Wco=o("beit"),Hco=o(" \u2014 "),bP=a("a"),Uco=o("BeitModel"),Jco=o(" (BEiT model)"),Yco=l(),Nh=a("li"),Aae=a("strong"),Kco=o("bert"),Zco=o(" \u2014 "),vP=a("a"),efo=o("BertModel"),ofo=o(" (BERT model)"),rfo=l(),jh=a("li"),yae=a("strong"),tfo=o("bert-generation"),afo=o(" \u2014 "),FP=a("a"),nfo=o("BertGenerationEncoder"),sfo=o(" (Bert Generation model)"),lfo=l(),Dh=a("li"),Lae=a("strong"),ifo=o("big_bird"),dfo=o(" \u2014 "),TP=a("a"),cfo=o("BigBirdModel"),ffo=o(" (BigBird model)"),mfo=l(),Gh=a("li"),xae=a("strong"),gfo=o("bigbird_pegasus"),hfo=o(" \u2014 "),MP=a("a"),pfo=o("BigBirdPegasusModel"),ufo=o(" (BigBirdPegasus model)"),_fo=l(),Oh=a("li"),$ae=a("strong"),bfo=o("blenderbot"),vfo=o(" \u2014 "),EP=a("a"),Ffo=o("BlenderbotModel"),Tfo=o(" (Blenderbot model)"),Mfo=l(),Vh=a("li"),kae=a("strong"),Efo=o("blenderbot-small"),Cfo=o(" \u2014 "),CP=a("a"),wfo=o("BlenderbotSmallModel"),Afo=o(" (BlenderbotSmall model)"),yfo=l(),Xh=a("li"),Sae=a("strong"),Lfo=o("camembert"),xfo=o(" \u2014 "),wP=a("a"),$fo=o("CamembertModel"),kfo=o(" (CamemBERT model)"),Sfo=l(),zh=a("li"),Rae=a("strong"),Rfo=o("canine"),Bfo=o(" \u2014 "),AP=a("a"),Pfo=o("CanineModel"),Ifo=o(" (Canine model)"),qfo=l(),Qh=a("li"),Bae=a("strong"),Nfo=o("clip"),jfo=o(" \u2014 "),yP=a("a"),Dfo=o("CLIPModel"),Gfo=o(" (CLIP model)"),Ofo=l(),Wh=a("li"),Pae=a("strong"),Vfo=o("convbert"),Xfo=o(" \u2014 "),LP=a("a"),zfo=o("ConvBertModel"),Qfo=o(" (ConvBERT model)"),Wfo=l(),Hh=a("li"),Iae=a("strong"),Hfo=o("convnext"),Ufo=o(" \u2014 "),xP=a("a"),Jfo=o("ConvNextModel"),Yfo=o(" (ConvNext model)"),Kfo=l(),Uh=a("li"),qae=a("strong"),Zfo=o("ctrl"),emo=o(" \u2014 "),$P=a("a"),omo=o("CTRLModel"),rmo=o(" (CTRL model)"),tmo=l(),Jh=a("li"),Nae=a("strong"),amo=o("data2vec-audio"),nmo=o(" \u2014 "),kP=a("a"),smo=o("Data2VecAudioModel"),lmo=o(" (Data2VecAudio model)"),imo=l(),Yh=a("li"),jae=a("strong"),dmo=o("data2vec-text"),cmo=o(" \u2014 "),SP=a("a"),fmo=o("Data2VecTextModel"),mmo=o(" (Data2VecText model)"),gmo=l(),Kh=a("li"),Dae=a("strong"),hmo=o("data2vec-vision"),pmo=o(" \u2014 "),RP=a("a"),umo=o("Data2VecVisionModel"),_mo=o(" (Data2VecVision model)"),bmo=l(),Zh=a("li"),Gae=a("strong"),vmo=o("deberta"),Fmo=o(" \u2014 "),BP=a("a"),Tmo=o("DebertaModel"),Mmo=o(" (DeBERTa model)"),Emo=l(),ep=a("li"),Oae=a("strong"),Cmo=o("deberta-v2"),wmo=o(" \u2014 "),PP=a("a"),Amo=o("DebertaV2Model"),ymo=o(" (DeBERTa-v2 model)"),Lmo=l(),op=a("li"),Vae=a("strong"),xmo=o("decision_transformer"),$mo=o(" \u2014 "),IP=a("a"),kmo=o("DecisionTransformerModel"),Smo=o(" (Decision Transformer model)"),Rmo=l(),rp=a("li"),Xae=a("strong"),Bmo=o("deit"),Pmo=o(" \u2014 "),qP=a("a"),Imo=o("DeiTModel"),qmo=o(" (DeiT model)"),Nmo=l(),tp=a("li"),zae=a("strong"),jmo=o("detr"),Dmo=o(" \u2014 "),NP=a("a"),Gmo=o("DetrModel"),Omo=o(" (DETR model)"),Vmo=l(),ap=a("li"),Qae=a("strong"),Xmo=o("distilbert"),zmo=o(" \u2014 "),jP=a("a"),Qmo=o("DistilBertModel"),Wmo=o(" (DistilBERT model)"),Hmo=l(),np=a("li"),Wae=a("strong"),Umo=o("dpr"),Jmo=o(" \u2014 "),DP=a("a"),Ymo=o("DPRQuestionEncoder"),Kmo=o(" (DPR model)"),Zmo=l(),sp=a("li"),Hae=a("strong"),ego=o("dpt"),ogo=o(" \u2014 "),GP=a("a"),rgo=o("DPTModel"),tgo=o(" (DPT model)"),ago=l(),lp=a("li"),Uae=a("strong"),ngo=o("electra"),sgo=o(" \u2014 "),OP=a("a"),lgo=o("ElectraModel"),igo=o(" (ELECTRA model)"),dgo=l(),ip=a("li"),Jae=a("strong"),cgo=o("flaubert"),fgo=o(" \u2014 "),VP=a("a"),mgo=o("FlaubertModel"),ggo=o(" (FlauBERT model)"),hgo=l(),dp=a("li"),Yae=a("strong"),pgo=o("fnet"),ugo=o(" \u2014 "),XP=a("a"),_go=o("FNetModel"),bgo=o(" (FNet model)"),vgo=l(),cp=a("li"),Kae=a("strong"),Fgo=o("fsmt"),Tgo=o(" \u2014 "),zP=a("a"),Mgo=o("FSMTModel"),Ego=o(" (FairSeq Machine-Translation model)"),Cgo=l(),xs=a("li"),Zae=a("strong"),wgo=o("funnel"),Ago=o(" \u2014 "),QP=a("a"),ygo=o("FunnelModel"),Lgo=o(" or "),WP=a("a"),xgo=o("FunnelBaseModel"),$go=o(" (Funnel Transformer model)"),kgo=l(),fp=a("li"),ene=a("strong"),Sgo=o("glpn"),Rgo=o(" \u2014 "),HP=a("a"),Bgo=o("GLPNModel"),Pgo=o(" (GLPN model)"),Igo=l(),mp=a("li"),one=a("strong"),qgo=o("gpt2"),Ngo=o(" \u2014 "),UP=a("a"),jgo=o("GPT2Model"),Dgo=o(" (OpenAI GPT-2 model)"),Ggo=l(),gp=a("li"),rne=a("strong"),Ogo=o("gpt_neo"),Vgo=o(" \u2014 "),JP=a("a"),Xgo=o("GPTNeoModel"),zgo=o(" (GPT Neo model)"),Qgo=l(),hp=a("li"),tne=a("strong"),Wgo=o("gptj"),Hgo=o(" \u2014 "),YP=a("a"),Ugo=o("GPTJModel"),Jgo=o(" (GPT-J model)"),Ygo=l(),pp=a("li"),ane=a("strong"),Kgo=o("hubert"),Zgo=o(" \u2014 "),KP=a("a"),eho=o("HubertModel"),oho=o(" (Hubert model)"),rho=l(),up=a("li"),nne=a("strong"),tho=o("ibert"),aho=o(" \u2014 "),ZP=a("a"),nho=o("IBertModel"),sho=o(" (I-BERT model)"),lho=l(),_p=a("li"),sne=a("strong"),iho=o("imagegpt"),dho=o(" \u2014 "),eI=a("a"),cho=o("ImageGPTModel"),fho=o(" (ImageGPT model)"),mho=l(),bp=a("li"),lne=a("strong"),gho=o("layoutlm"),hho=o(" \u2014 "),oI=a("a"),pho=o("LayoutLMModel"),uho=o(" (LayoutLM model)"),_ho=l(),vp=a("li"),ine=a("strong"),bho=o("layoutlmv2"),vho=o(" \u2014 "),rI=a("a"),Fho=o("LayoutLMv2Model"),Tho=o(" (LayoutLMv2 model)"),Mho=l(),Fp=a("li"),dne=a("strong"),Eho=o("led"),Cho=o(" \u2014 "),tI=a("a"),who=o("LEDModel"),Aho=o(" (LED model)"),yho=l(),Tp=a("li"),cne=a("strong"),Lho=o("longformer"),xho=o(" \u2014 "),aI=a("a"),$ho=o("LongformerModel"),kho=o(" (Longformer model)"),Sho=l(),Mp=a("li"),fne=a("strong"),Rho=o("longt5"),Bho=o(" \u2014 "),nI=a("a"),Pho=o("LongT5Model"),Iho=o(" (LongT5 model)"),qho=l(),Ep=a("li"),mne=a("strong"),Nho=o("luke"),jho=o(" \u2014 "),sI=a("a"),Dho=o("LukeModel"),Gho=o(" (LUKE model)"),Oho=l(),Cp=a("li"),gne=a("strong"),Vho=o("lxmert"),Xho=o(" \u2014 "),lI=a("a"),zho=o("LxmertModel"),Qho=o(" (LXMERT model)"),Who=l(),wp=a("li"),hne=a("strong"),Hho=o("m2m_100"),Uho=o(" \u2014 "),iI=a("a"),Jho=o("M2M100Model"),Yho=o(" (M2M100 model)"),Kho=l(),Ap=a("li"),pne=a("strong"),Zho=o("marian"),epo=o(" \u2014 "),dI=a("a"),opo=o("MarianModel"),rpo=o(" (Marian model)"),tpo=l(),yp=a("li"),une=a("strong"),apo=o("maskformer"),npo=o(" \u2014 "),cI=a("a"),spo=o("MaskFormerModel"),lpo=o(" (MaskFormer model)"),ipo=l(),Lp=a("li"),_ne=a("strong"),dpo=o("mbart"),cpo=o(" \u2014 "),fI=a("a"),fpo=o("MBartModel"),mpo=o(" (mBART model)"),gpo=l(),xp=a("li"),bne=a("strong"),hpo=o("megatron-bert"),ppo=o(" \u2014 "),mI=a("a"),upo=o("MegatronBertModel"),_po=o(" (MegatronBert model)"),bpo=l(),$p=a("li"),vne=a("strong"),vpo=o("mobilebert"),Fpo=o(" \u2014 "),gI=a("a"),Tpo=o("MobileBertModel"),Mpo=o(" (MobileBERT model)"),Epo=l(),kp=a("li"),Fne=a("strong"),Cpo=o("mpnet"),wpo=o(" \u2014 "),hI=a("a"),Apo=o("MPNetModel"),ypo=o(" (MPNet model)"),Lpo=l(),Sp=a("li"),Tne=a("strong"),xpo=o("mt5"),$po=o(" \u2014 "),pI=a("a"),kpo=o("MT5Model"),Spo=o(" (mT5 model)"),Rpo=l(),Rp=a("li"),Mne=a("strong"),Bpo=o("nystromformer"),Ppo=o(" \u2014 "),uI=a("a"),Ipo=o("NystromformerModel"),qpo=o(" (Nystromformer model)"),Npo=l(),Bp=a("li"),Ene=a("strong"),jpo=o("openai-gpt"),Dpo=o(" \u2014 "),_I=a("a"),Gpo=o("OpenAIGPTModel"),Opo=o(" (OpenAI GPT model)"),Vpo=l(),Pp=a("li"),Cne=a("strong"),Xpo=o("pegasus"),zpo=o(" \u2014 "),bI=a("a"),Qpo=o("PegasusModel"),Wpo=o(" (Pegasus model)"),Hpo=l(),Ip=a("li"),wne=a("strong"),Upo=o("perceiver"),Jpo=o(" \u2014 "),vI=a("a"),Ypo=o("PerceiverModel"),Kpo=o(" (Perceiver model)"),Zpo=l(),qp=a("li"),Ane=a("strong"),euo=o("plbart"),ouo=o(" \u2014 "),FI=a("a"),ruo=o("PLBartModel"),tuo=o(" (PLBart model)"),auo=l(),Np=a("li"),yne=a("strong"),nuo=o("poolformer"),suo=o(" \u2014 "),TI=a("a"),luo=o("PoolFormerModel"),iuo=o(" (PoolFormer model)"),duo=l(),jp=a("li"),Lne=a("strong"),cuo=o("prophetnet"),fuo=o(" \u2014 "),MI=a("a"),muo=o("ProphetNetModel"),guo=o(" (ProphetNet model)"),huo=l(),Dp=a("li"),xne=a("strong"),puo=o("qdqbert"),uuo=o(" \u2014 "),EI=a("a"),_uo=o("QDQBertModel"),buo=o(" (QDQBert model)"),vuo=l(),Gp=a("li"),$ne=a("strong"),Fuo=o("reformer"),Tuo=o(" \u2014 "),CI=a("a"),Muo=o("ReformerModel"),Euo=o(" (Reformer model)"),Cuo=l(),Op=a("li"),kne=a("strong"),wuo=o("regnet"),Auo=o(" \u2014 "),wI=a("a"),yuo=o("RegNetModel"),Luo=o(" (RegNet model)"),xuo=l(),Vp=a("li"),Sne=a("strong"),$uo=o("rembert"),kuo=o(" \u2014 "),AI=a("a"),Suo=o("RemBertModel"),Ruo=o(" (RemBERT model)"),Buo=l(),Xp=a("li"),Rne=a("strong"),Puo=o("resnet"),Iuo=o(" \u2014 "),yI=a("a"),quo=o("ResNetModel"),Nuo=o(" (ResNet model)"),juo=l(),zp=a("li"),Bne=a("strong"),Duo=o("retribert"),Guo=o(" \u2014 "),LI=a("a"),Ouo=o("RetriBertModel"),Vuo=o(" (RetriBERT model)"),Xuo=l(),Qp=a("li"),Pne=a("strong"),zuo=o("roberta"),Quo=o(" \u2014 "),xI=a("a"),Wuo=o("RobertaModel"),Huo=o(" (RoBERTa model)"),Uuo=l(),Wp=a("li"),Ine=a("strong"),Juo=o("roformer"),Yuo=o(" \u2014 "),$I=a("a"),Kuo=o("RoFormerModel"),Zuo=o(" (RoFormer model)"),e_o=l(),Hp=a("li"),qne=a("strong"),o_o=o("segformer"),r_o=o(" \u2014 "),kI=a("a"),t_o=o("SegformerModel"),a_o=o(" (SegFormer model)"),n_o=l(),Up=a("li"),Nne=a("strong"),s_o=o("sew"),l_o=o(" \u2014 "),SI=a("a"),i_o=o("SEWModel"),d_o=o(" (SEW model)"),c_o=l(),Jp=a("li"),jne=a("strong"),f_o=o("sew-d"),m_o=o(" \u2014 "),RI=a("a"),g_o=o("SEWDModel"),h_o=o(" (SEW-D model)"),p_o=l(),Yp=a("li"),Dne=a("strong"),u_o=o("speech_to_text"),__o=o(" \u2014 "),BI=a("a"),b_o=o("Speech2TextModel"),v_o=o(" (Speech2Text model)"),F_o=l(),Kp=a("li"),Gne=a("strong"),T_o=o("splinter"),M_o=o(" \u2014 "),PI=a("a"),E_o=o("SplinterModel"),C_o=o(" (Splinter model)"),w_o=l(),Zp=a("li"),One=a("strong"),A_o=o("squeezebert"),y_o=o(" \u2014 "),II=a("a"),L_o=o("SqueezeBertModel"),x_o=o(" (SqueezeBERT model)"),$_o=l(),eu=a("li"),Vne=a("strong"),k_o=o("swin"),S_o=o(" \u2014 "),qI=a("a"),R_o=o("SwinModel"),B_o=o(" (Swin model)"),P_o=l(),ou=a("li"),Xne=a("strong"),I_o=o("t5"),q_o=o(" \u2014 "),NI=a("a"),N_o=o("T5Model"),j_o=o(" (T5 model)"),D_o=l(),ru=a("li"),zne=a("strong"),G_o=o("tapas"),O_o=o(" \u2014 "),jI=a("a"),V_o=o("TapasModel"),X_o=o(" (TAPAS model)"),z_o=l(),tu=a("li"),Qne=a("strong"),Q_o=o("transfo-xl"),W_o=o(" \u2014 "),DI=a("a"),H_o=o("TransfoXLModel"),U_o=o(" (Transformer-XL model)"),J_o=l(),au=a("li"),Wne=a("strong"),Y_o=o("unispeech"),K_o=o(" \u2014 "),GI=a("a"),Z_o=o("UniSpeechModel"),e2o=o(" (UniSpeech model)"),o2o=l(),nu=a("li"),Hne=a("strong"),r2o=o("unispeech-sat"),t2o=o(" \u2014 "),OI=a("a"),a2o=o("UniSpeechSatModel"),n2o=o(" (UniSpeechSat model)"),s2o=l(),su=a("li"),Une=a("strong"),l2o=o("van"),i2o=o(" \u2014 "),VI=a("a"),d2o=o("VanModel"),c2o=o(" (VAN model)"),f2o=l(),lu=a("li"),Jne=a("strong"),m2o=o("vilt"),g2o=o(" \u2014 "),XI=a("a"),h2o=o("ViltModel"),p2o=o(" (ViLT model)"),u2o=l(),iu=a("li"),Yne=a("strong"),_2o=o("vision-text-dual-encoder"),b2o=o(" \u2014 "),zI=a("a"),v2o=o("VisionTextDualEncoderModel"),F2o=o(" (VisionTextDualEncoder model)"),T2o=l(),du=a("li"),Kne=a("strong"),M2o=o("visual_bert"),E2o=o(" \u2014 "),QI=a("a"),C2o=o("VisualBertModel"),w2o=o(" (VisualBert model)"),A2o=l(),cu=a("li"),Zne=a("strong"),y2o=o("vit"),L2o=o(" \u2014 "),WI=a("a"),x2o=o("ViTModel"),$2o=o(" (ViT model)"),k2o=l(),fu=a("li"),ese=a("strong"),S2o=o("vit_mae"),R2o=o(" \u2014 "),HI=a("a"),B2o=o("ViTMAEModel"),P2o=o(" (ViTMAE model)"),I2o=l(),mu=a("li"),ose=a("strong"),q2o=o("wav2vec2"),N2o=o(" \u2014 "),UI=a("a"),j2o=o("Wav2Vec2Model"),D2o=o(" (Wav2Vec2 model)"),G2o=l(),gu=a("li"),rse=a("strong"),O2o=o("wavlm"),V2o=o(" \u2014 "),JI=a("a"),X2o=o("WavLMModel"),z2o=o(" (WavLM model)"),Q2o=l(),hu=a("li"),tse=a("strong"),W2o=o("xglm"),H2o=o(" \u2014 "),YI=a("a"),U2o=o("XGLMModel"),J2o=o(" (XGLM model)"),Y2o=l(),pu=a("li"),ase=a("strong"),K2o=o("xlm"),Z2o=o(" \u2014 "),KI=a("a"),e1o=o("XLMModel"),o1o=o(" (XLM model)"),r1o=l(),uu=a("li"),nse=a("strong"),t1o=o("xlm-prophetnet"),a1o=o(" \u2014 "),ZI=a("a"),n1o=o("XLMProphetNetModel"),s1o=o(" (XLMProphetNet model)"),l1o=l(),_u=a("li"),sse=a("strong"),i1o=o("xlm-roberta"),d1o=o(" \u2014 "),eq=a("a"),c1o=o("XLMRobertaModel"),f1o=o(" (XLM-RoBERTa model)"),m1o=l(),bu=a("li"),lse=a("strong"),g1o=o("xlm-roberta-xl"),h1o=o(" \u2014 "),oq=a("a"),p1o=o("XLMRobertaXLModel"),u1o=o(" (XLM-RoBERTa-XL model)"),_1o=l(),vu=a("li"),ise=a("strong"),b1o=o("xlnet"),v1o=o(" \u2014 "),rq=a("a"),F1o=o("XLNetModel"),T1o=o(" (XLNet model)"),M1o=l(),Fu=a("li"),dse=a("strong"),E1o=o("yolos"),C1o=o(" \u2014 "),tq=a("a"),w1o=o("YolosModel"),A1o=o(" (YOLOS model)"),y1o=l(),Tu=a("li"),cse=a("strong"),L1o=o("yoso"),x1o=o(" \u2014 "),aq=a("a"),$1o=o("YosoModel"),k1o=o(" (YOSO model)"),S1o=l(),Mu=a("p"),R1o=o("The model is set in evaluation mode by default using "),fse=a("code"),B1o=o("model.eval()"),P1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=a("code"),I1o=o("model.train()"),q1o=l(),F(Eu.$$.fragment),iPe=l(),vi=a("h2"),Cu=a("a"),gse=a("span"),F(dA.$$.fragment),N1o=l(),hse=a("span"),j1o=o("AutoModelForPreTraining"),dPe=l(),xo=a("div"),F(cA.$$.fragment),D1o=l(),Fi=a("p"),G1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nq=a("a"),O1o=o("from_pretrained()"),V1o=o(" class method or the "),sq=a("a"),X1o=o("from_config()"),z1o=o(` class
method.`),Q1o=l(),fA=a("p"),W1o=o("This class cannot be instantiated directly using "),pse=a("code"),H1o=o("__init__()"),U1o=o(" (throws an error)."),J1o=l(),et=a("div"),F(mA.$$.fragment),Y1o=l(),use=a("p"),K1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z1o=l(),Ti=a("p"),ebo=o(`Note:
Loading a model from its configuration file does `),_se=a("strong"),obo=o("not"),rbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=a("a"),tbo=o("from_pretrained()"),abo=o(" to load the model weights."),nbo=l(),F(wu.$$.fragment),sbo=l(),Ue=a("div"),F(gA.$$.fragment),lbo=l(),bse=a("p"),ibo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),dbo=l(),Ca=a("p"),cbo=o("The model class to instantiate is selected based on the "),vse=a("code"),fbo=o("model_type"),mbo=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),gbo=o("pretrained_model_name_or_path"),hbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=a("code"),pbo=o("pretrained_model_name_or_path"),ubo=o(":"),_bo=l(),G=a("ul"),Au=a("li"),Mse=a("strong"),bbo=o("albert"),vbo=o(" \u2014 "),iq=a("a"),Fbo=o("AlbertForPreTraining"),Tbo=o(" (ALBERT model)"),Mbo=l(),yu=a("li"),Ese=a("strong"),Ebo=o("bart"),Cbo=o(" \u2014 "),dq=a("a"),wbo=o("BartForConditionalGeneration"),Abo=o(" (BART model)"),ybo=l(),Lu=a("li"),Cse=a("strong"),Lbo=o("bert"),xbo=o(" \u2014 "),cq=a("a"),$bo=o("BertForPreTraining"),kbo=o(" (BERT model)"),Sbo=l(),xu=a("li"),wse=a("strong"),Rbo=o("big_bird"),Bbo=o(" \u2014 "),fq=a("a"),Pbo=o("BigBirdForPreTraining"),Ibo=o(" (BigBird model)"),qbo=l(),$u=a("li"),Ase=a("strong"),Nbo=o("camembert"),jbo=o(" \u2014 "),mq=a("a"),Dbo=o("CamembertForMaskedLM"),Gbo=o(" (CamemBERT model)"),Obo=l(),ku=a("li"),yse=a("strong"),Vbo=o("ctrl"),Xbo=o(" \u2014 "),gq=a("a"),zbo=o("CTRLLMHeadModel"),Qbo=o(" (CTRL model)"),Wbo=l(),Su=a("li"),Lse=a("strong"),Hbo=o("data2vec-text"),Ubo=o(" \u2014 "),hq=a("a"),Jbo=o("Data2VecTextForMaskedLM"),Ybo=o(" (Data2VecText model)"),Kbo=l(),Ru=a("li"),xse=a("strong"),Zbo=o("deberta"),evo=o(" \u2014 "),pq=a("a"),ovo=o("DebertaForMaskedLM"),rvo=o(" (DeBERTa model)"),tvo=l(),Bu=a("li"),$se=a("strong"),avo=o("deberta-v2"),nvo=o(" \u2014 "),uq=a("a"),svo=o("DebertaV2ForMaskedLM"),lvo=o(" (DeBERTa-v2 model)"),ivo=l(),Pu=a("li"),kse=a("strong"),dvo=o("distilbert"),cvo=o(" \u2014 "),_q=a("a"),fvo=o("DistilBertForMaskedLM"),mvo=o(" (DistilBERT model)"),gvo=l(),Iu=a("li"),Sse=a("strong"),hvo=o("electra"),pvo=o(" \u2014 "),bq=a("a"),uvo=o("ElectraForPreTraining"),_vo=o(" (ELECTRA model)"),bvo=l(),qu=a("li"),Rse=a("strong"),vvo=o("flaubert"),Fvo=o(" \u2014 "),vq=a("a"),Tvo=o("FlaubertWithLMHeadModel"),Mvo=o(" (FlauBERT model)"),Evo=l(),Nu=a("li"),Bse=a("strong"),Cvo=o("fnet"),wvo=o(" \u2014 "),Fq=a("a"),Avo=o("FNetForPreTraining"),yvo=o(" (FNet model)"),Lvo=l(),ju=a("li"),Pse=a("strong"),xvo=o("fsmt"),$vo=o(" \u2014 "),Tq=a("a"),kvo=o("FSMTForConditionalGeneration"),Svo=o(" (FairSeq Machine-Translation model)"),Rvo=l(),Du=a("li"),Ise=a("strong"),Bvo=o("funnel"),Pvo=o(" \u2014 "),Mq=a("a"),Ivo=o("FunnelForPreTraining"),qvo=o(" (Funnel Transformer model)"),Nvo=l(),Gu=a("li"),qse=a("strong"),jvo=o("gpt2"),Dvo=o(" \u2014 "),Eq=a("a"),Gvo=o("GPT2LMHeadModel"),Ovo=o(" (OpenAI GPT-2 model)"),Vvo=l(),Ou=a("li"),Nse=a("strong"),Xvo=o("ibert"),zvo=o(" \u2014 "),Cq=a("a"),Qvo=o("IBertForMaskedLM"),Wvo=o(" (I-BERT model)"),Hvo=l(),Vu=a("li"),jse=a("strong"),Uvo=o("layoutlm"),Jvo=o(" \u2014 "),wq=a("a"),Yvo=o("LayoutLMForMaskedLM"),Kvo=o(" (LayoutLM model)"),Zvo=l(),Xu=a("li"),Dse=a("strong"),eFo=o("longformer"),oFo=o(" \u2014 "),Aq=a("a"),rFo=o("LongformerForMaskedLM"),tFo=o(" (Longformer model)"),aFo=l(),zu=a("li"),Gse=a("strong"),nFo=o("longt5"),sFo=o(" \u2014 "),yq=a("a"),lFo=o("LongT5ForConditionalGeneration"),iFo=o(" (LongT5 model)"),dFo=l(),Qu=a("li"),Ose=a("strong"),cFo=o("lxmert"),fFo=o(" \u2014 "),Lq=a("a"),mFo=o("LxmertForPreTraining"),gFo=o(" (LXMERT model)"),hFo=l(),Wu=a("li"),Vse=a("strong"),pFo=o("megatron-bert"),uFo=o(" \u2014 "),xq=a("a"),_Fo=o("MegatronBertForPreTraining"),bFo=o(" (MegatronBert model)"),vFo=l(),Hu=a("li"),Xse=a("strong"),FFo=o("mobilebert"),TFo=o(" \u2014 "),$q=a("a"),MFo=o("MobileBertForPreTraining"),EFo=o(" (MobileBERT model)"),CFo=l(),Uu=a("li"),zse=a("strong"),wFo=o("mpnet"),AFo=o(" \u2014 "),kq=a("a"),yFo=o("MPNetForMaskedLM"),LFo=o(" (MPNet model)"),xFo=l(),Ju=a("li"),Qse=a("strong"),$Fo=o("openai-gpt"),kFo=o(" \u2014 "),Sq=a("a"),SFo=o("OpenAIGPTLMHeadModel"),RFo=o(" (OpenAI GPT model)"),BFo=l(),Yu=a("li"),Wse=a("strong"),PFo=o("retribert"),IFo=o(" \u2014 "),Rq=a("a"),qFo=o("RetriBertModel"),NFo=o(" (RetriBERT model)"),jFo=l(),Ku=a("li"),Hse=a("strong"),DFo=o("roberta"),GFo=o(" \u2014 "),Bq=a("a"),OFo=o("RobertaForMaskedLM"),VFo=o(" (RoBERTa model)"),XFo=l(),Zu=a("li"),Use=a("strong"),zFo=o("squeezebert"),QFo=o(" \u2014 "),Pq=a("a"),WFo=o("SqueezeBertForMaskedLM"),HFo=o(" (SqueezeBERT model)"),UFo=l(),e_=a("li"),Jse=a("strong"),JFo=o("t5"),YFo=o(" \u2014 "),Iq=a("a"),KFo=o("T5ForConditionalGeneration"),ZFo=o(" (T5 model)"),e6o=l(),o_=a("li"),Yse=a("strong"),o6o=o("tapas"),r6o=o(" \u2014 "),qq=a("a"),t6o=o("TapasForMaskedLM"),a6o=o(" (TAPAS model)"),n6o=l(),r_=a("li"),Kse=a("strong"),s6o=o("transfo-xl"),l6o=o(" \u2014 "),Nq=a("a"),i6o=o("TransfoXLLMHeadModel"),d6o=o(" (Transformer-XL model)"),c6o=l(),t_=a("li"),Zse=a("strong"),f6o=o("unispeech"),m6o=o(" \u2014 "),jq=a("a"),g6o=o("UniSpeechForPreTraining"),h6o=o(" (UniSpeech model)"),p6o=l(),a_=a("li"),ele=a("strong"),u6o=o("unispeech-sat"),_6o=o(" \u2014 "),Dq=a("a"),b6o=o("UniSpeechSatForPreTraining"),v6o=o(" (UniSpeechSat model)"),F6o=l(),n_=a("li"),ole=a("strong"),T6o=o("visual_bert"),M6o=o(" \u2014 "),Gq=a("a"),E6o=o("VisualBertForPreTraining"),C6o=o(" (VisualBert model)"),w6o=l(),s_=a("li"),rle=a("strong"),A6o=o("vit_mae"),y6o=o(" \u2014 "),Oq=a("a"),L6o=o("ViTMAEForPreTraining"),x6o=o(" (ViTMAE model)"),$6o=l(),l_=a("li"),tle=a("strong"),k6o=o("wav2vec2"),S6o=o(" \u2014 "),Vq=a("a"),R6o=o("Wav2Vec2ForPreTraining"),B6o=o(" (Wav2Vec2 model)"),P6o=l(),i_=a("li"),ale=a("strong"),I6o=o("xlm"),q6o=o(" \u2014 "),Xq=a("a"),N6o=o("XLMWithLMHeadModel"),j6o=o(" (XLM model)"),D6o=l(),d_=a("li"),nle=a("strong"),G6o=o("xlm-roberta"),O6o=o(" \u2014 "),zq=a("a"),V6o=o("XLMRobertaForMaskedLM"),X6o=o(" (XLM-RoBERTa model)"),z6o=l(),c_=a("li"),sle=a("strong"),Q6o=o("xlm-roberta-xl"),W6o=o(" \u2014 "),Qq=a("a"),H6o=o("XLMRobertaXLForMaskedLM"),U6o=o(" (XLM-RoBERTa-XL model)"),J6o=l(),f_=a("li"),lle=a("strong"),Y6o=o("xlnet"),K6o=o(" \u2014 "),Wq=a("a"),Z6o=o("XLNetLMHeadModel"),eTo=o(" (XLNet model)"),oTo=l(),m_=a("p"),rTo=o("The model is set in evaluation mode by default using "),ile=a("code"),tTo=o("model.eval()"),aTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=a("code"),nTo=o("model.train()"),sTo=l(),F(g_.$$.fragment),cPe=l(),Mi=a("h2"),h_=a("a"),cle=a("span"),F(hA.$$.fragment),lTo=l(),fle=a("span"),iTo=o("AutoModelForCausalLM"),fPe=l(),$o=a("div"),F(pA.$$.fragment),dTo=l(),Ei=a("p"),cTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hq=a("a"),fTo=o("from_pretrained()"),mTo=o(" class method or the "),Uq=a("a"),gTo=o("from_config()"),hTo=o(` class
method.`),pTo=l(),uA=a("p"),uTo=o("This class cannot be instantiated directly using "),mle=a("code"),_To=o("__init__()"),bTo=o(" (throws an error)."),vTo=l(),ot=a("div"),F(_A.$$.fragment),FTo=l(),gle=a("p"),TTo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),MTo=l(),Ci=a("p"),ETo=o(`Note:
Loading a model from its configuration file does `),hle=a("strong"),CTo=o("not"),wTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),ATo=o("from_pretrained()"),yTo=o(" to load the model weights."),LTo=l(),F(p_.$$.fragment),xTo=l(),Je=a("div"),F(bA.$$.fragment),$To=l(),ple=a("p"),kTo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),STo=l(),wa=a("p"),RTo=o("The model class to instantiate is selected based on the "),ule=a("code"),BTo=o("model_type"),PTo=o(` property of the config object (either
passed as an argument or loaded from `),_le=a("code"),ITo=o("pretrained_model_name_or_path"),qTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),NTo=o("pretrained_model_name_or_path"),jTo=o(":"),DTo=l(),z=a("ul"),u_=a("li"),vle=a("strong"),GTo=o("bart"),OTo=o(" \u2014 "),Yq=a("a"),VTo=o("BartForCausalLM"),XTo=o(" (BART model)"),zTo=l(),__=a("li"),Fle=a("strong"),QTo=o("bert"),WTo=o(" \u2014 "),Kq=a("a"),HTo=o("BertLMHeadModel"),UTo=o(" (BERT model)"),JTo=l(),b_=a("li"),Tle=a("strong"),YTo=o("bert-generation"),KTo=o(" \u2014 "),Zq=a("a"),ZTo=o("BertGenerationDecoder"),e7o=o(" (Bert Generation model)"),o7o=l(),v_=a("li"),Mle=a("strong"),r7o=o("big_bird"),t7o=o(" \u2014 "),eN=a("a"),a7o=o("BigBirdForCausalLM"),n7o=o(" (BigBird model)"),s7o=l(),F_=a("li"),Ele=a("strong"),l7o=o("bigbird_pegasus"),i7o=o(" \u2014 "),oN=a("a"),d7o=o("BigBirdPegasusForCausalLM"),c7o=o(" (BigBirdPegasus model)"),f7o=l(),T_=a("li"),Cle=a("strong"),m7o=o("blenderbot"),g7o=o(" \u2014 "),rN=a("a"),h7o=o("BlenderbotForCausalLM"),p7o=o(" (Blenderbot model)"),u7o=l(),M_=a("li"),wle=a("strong"),_7o=o("blenderbot-small"),b7o=o(" \u2014 "),tN=a("a"),v7o=o("BlenderbotSmallForCausalLM"),F7o=o(" (BlenderbotSmall model)"),T7o=l(),E_=a("li"),Ale=a("strong"),M7o=o("camembert"),E7o=o(" \u2014 "),aN=a("a"),C7o=o("CamembertForCausalLM"),w7o=o(" (CamemBERT model)"),A7o=l(),C_=a("li"),yle=a("strong"),y7o=o("ctrl"),L7o=o(" \u2014 "),nN=a("a"),x7o=o("CTRLLMHeadModel"),$7o=o(" (CTRL model)"),k7o=l(),w_=a("li"),Lle=a("strong"),S7o=o("data2vec-text"),R7o=o(" \u2014 "),sN=a("a"),B7o=o("Data2VecTextForCausalLM"),P7o=o(" (Data2VecText model)"),I7o=l(),A_=a("li"),xle=a("strong"),q7o=o("electra"),N7o=o(" \u2014 "),lN=a("a"),j7o=o("ElectraForCausalLM"),D7o=o(" (ELECTRA model)"),G7o=l(),y_=a("li"),$le=a("strong"),O7o=o("gpt2"),V7o=o(" \u2014 "),iN=a("a"),X7o=o("GPT2LMHeadModel"),z7o=o(" (OpenAI GPT-2 model)"),Q7o=l(),L_=a("li"),kle=a("strong"),W7o=o("gpt_neo"),H7o=o(" \u2014 "),dN=a("a"),U7o=o("GPTNeoForCausalLM"),J7o=o(" (GPT Neo model)"),Y7o=l(),x_=a("li"),Sle=a("strong"),K7o=o("gptj"),Z7o=o(" \u2014 "),cN=a("a"),e9o=o("GPTJForCausalLM"),o9o=o(" (GPT-J model)"),r9o=l(),$_=a("li"),Rle=a("strong"),t9o=o("marian"),a9o=o(" \u2014 "),fN=a("a"),n9o=o("MarianForCausalLM"),s9o=o(" (Marian model)"),l9o=l(),k_=a("li"),Ble=a("strong"),i9o=o("mbart"),d9o=o(" \u2014 "),mN=a("a"),c9o=o("MBartForCausalLM"),f9o=o(" (mBART model)"),m9o=l(),S_=a("li"),Ple=a("strong"),g9o=o("megatron-bert"),h9o=o(" \u2014 "),gN=a("a"),p9o=o("MegatronBertForCausalLM"),u9o=o(" (MegatronBert model)"),_9o=l(),R_=a("li"),Ile=a("strong"),b9o=o("openai-gpt"),v9o=o(" \u2014 "),hN=a("a"),F9o=o("OpenAIGPTLMHeadModel"),T9o=o(" (OpenAI GPT model)"),M9o=l(),B_=a("li"),qle=a("strong"),E9o=o("pegasus"),C9o=o(" \u2014 "),pN=a("a"),w9o=o("PegasusForCausalLM"),A9o=o(" (Pegasus model)"),y9o=l(),P_=a("li"),Nle=a("strong"),L9o=o("plbart"),x9o=o(" \u2014 "),uN=a("a"),$9o=o("PLBartForCausalLM"),k9o=o(" (PLBart model)"),S9o=l(),I_=a("li"),jle=a("strong"),R9o=o("prophetnet"),B9o=o(" \u2014 "),_N=a("a"),P9o=o("ProphetNetForCausalLM"),I9o=o(" (ProphetNet model)"),q9o=l(),q_=a("li"),Dle=a("strong"),N9o=o("qdqbert"),j9o=o(" \u2014 "),bN=a("a"),D9o=o("QDQBertLMHeadModel"),G9o=o(" (QDQBert model)"),O9o=l(),N_=a("li"),Gle=a("strong"),V9o=o("reformer"),X9o=o(" \u2014 "),vN=a("a"),z9o=o("ReformerModelWithLMHead"),Q9o=o(" (Reformer model)"),W9o=l(),j_=a("li"),Ole=a("strong"),H9o=o("rembert"),U9o=o(" \u2014 "),FN=a("a"),J9o=o("RemBertForCausalLM"),Y9o=o(" (RemBERT model)"),K9o=l(),D_=a("li"),Vle=a("strong"),Z9o=o("roberta"),eMo=o(" \u2014 "),TN=a("a"),oMo=o("RobertaForCausalLM"),rMo=o(" (RoBERTa model)"),tMo=l(),G_=a("li"),Xle=a("strong"),aMo=o("roformer"),nMo=o(" \u2014 "),MN=a("a"),sMo=o("RoFormerForCausalLM"),lMo=o(" (RoFormer model)"),iMo=l(),O_=a("li"),zle=a("strong"),dMo=o("speech_to_text_2"),cMo=o(" \u2014 "),EN=a("a"),fMo=o("Speech2Text2ForCausalLM"),mMo=o(" (Speech2Text2 model)"),gMo=l(),V_=a("li"),Qle=a("strong"),hMo=o("transfo-xl"),pMo=o(" \u2014 "),CN=a("a"),uMo=o("TransfoXLLMHeadModel"),_Mo=o(" (Transformer-XL model)"),bMo=l(),X_=a("li"),Wle=a("strong"),vMo=o("trocr"),FMo=o(" \u2014 "),wN=a("a"),TMo=o("TrOCRForCausalLM"),MMo=o(" (TrOCR model)"),EMo=l(),z_=a("li"),Hle=a("strong"),CMo=o("xglm"),wMo=o(" \u2014 "),AN=a("a"),AMo=o("XGLMForCausalLM"),yMo=o(" (XGLM model)"),LMo=l(),Q_=a("li"),Ule=a("strong"),xMo=o("xlm"),$Mo=o(" \u2014 "),yN=a("a"),kMo=o("XLMWithLMHeadModel"),SMo=o(" (XLM model)"),RMo=l(),W_=a("li"),Jle=a("strong"),BMo=o("xlm-prophetnet"),PMo=o(" \u2014 "),LN=a("a"),IMo=o("XLMProphetNetForCausalLM"),qMo=o(" (XLMProphetNet model)"),NMo=l(),H_=a("li"),Yle=a("strong"),jMo=o("xlm-roberta"),DMo=o(" \u2014 "),xN=a("a"),GMo=o("XLMRobertaForCausalLM"),OMo=o(" (XLM-RoBERTa model)"),VMo=l(),U_=a("li"),Kle=a("strong"),XMo=o("xlm-roberta-xl"),zMo=o(" \u2014 "),$N=a("a"),QMo=o("XLMRobertaXLForCausalLM"),WMo=o(" (XLM-RoBERTa-XL model)"),HMo=l(),J_=a("li"),Zle=a("strong"),UMo=o("xlnet"),JMo=o(" \u2014 "),kN=a("a"),YMo=o("XLNetLMHeadModel"),KMo=o(" (XLNet model)"),ZMo=l(),Y_=a("p"),e4o=o("The model is set in evaluation mode by default using "),eie=a("code"),o4o=o("model.eval()"),r4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=a("code"),t4o=o("model.train()"),a4o=l(),F(K_.$$.fragment),mPe=l(),wi=a("h2"),Z_=a("a"),rie=a("span"),F(vA.$$.fragment),n4o=l(),tie=a("span"),s4o=o("AutoModelForMaskedLM"),gPe=l(),ko=a("div"),F(FA.$$.fragment),l4o=l(),Ai=a("p"),i4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SN=a("a"),d4o=o("from_pretrained()"),c4o=o(" class method or the "),RN=a("a"),f4o=o("from_config()"),m4o=o(` class
method.`),g4o=l(),TA=a("p"),h4o=o("This class cannot be instantiated directly using "),aie=a("code"),p4o=o("__init__()"),u4o=o(" (throws an error)."),_4o=l(),rt=a("div"),F(MA.$$.fragment),b4o=l(),nie=a("p"),v4o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),F4o=l(),yi=a("p"),T4o=o(`Note:
Loading a model from its configuration file does `),sie=a("strong"),M4o=o("not"),E4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BN=a("a"),C4o=o("from_pretrained()"),w4o=o(" to load the model weights."),A4o=l(),F(e2.$$.fragment),y4o=l(),Ye=a("div"),F(EA.$$.fragment),L4o=l(),lie=a("p"),x4o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$4o=l(),Aa=a("p"),k4o=o("The model class to instantiate is selected based on the "),iie=a("code"),S4o=o("model_type"),R4o=o(` property of the config object (either
passed as an argument or loaded from `),die=a("code"),B4o=o("pretrained_model_name_or_path"),P4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=a("code"),I4o=o("pretrained_model_name_or_path"),q4o=o(":"),N4o=l(),Q=a("ul"),o2=a("li"),fie=a("strong"),j4o=o("albert"),D4o=o(" \u2014 "),PN=a("a"),G4o=o("AlbertForMaskedLM"),O4o=o(" (ALBERT model)"),V4o=l(),r2=a("li"),mie=a("strong"),X4o=o("bart"),z4o=o(" \u2014 "),IN=a("a"),Q4o=o("BartForConditionalGeneration"),W4o=o(" (BART model)"),H4o=l(),t2=a("li"),gie=a("strong"),U4o=o("bert"),J4o=o(" \u2014 "),qN=a("a"),Y4o=o("BertForMaskedLM"),K4o=o(" (BERT model)"),Z4o=l(),a2=a("li"),hie=a("strong"),eEo=o("big_bird"),oEo=o(" \u2014 "),NN=a("a"),rEo=o("BigBirdForMaskedLM"),tEo=o(" (BigBird model)"),aEo=l(),n2=a("li"),pie=a("strong"),nEo=o("camembert"),sEo=o(" \u2014 "),jN=a("a"),lEo=o("CamembertForMaskedLM"),iEo=o(" (CamemBERT model)"),dEo=l(),s2=a("li"),uie=a("strong"),cEo=o("convbert"),fEo=o(" \u2014 "),DN=a("a"),mEo=o("ConvBertForMaskedLM"),gEo=o(" (ConvBERT model)"),hEo=l(),l2=a("li"),_ie=a("strong"),pEo=o("data2vec-text"),uEo=o(" \u2014 "),GN=a("a"),_Eo=o("Data2VecTextForMaskedLM"),bEo=o(" (Data2VecText model)"),vEo=l(),i2=a("li"),bie=a("strong"),FEo=o("deberta"),TEo=o(" \u2014 "),ON=a("a"),MEo=o("DebertaForMaskedLM"),EEo=o(" (DeBERTa model)"),CEo=l(),d2=a("li"),vie=a("strong"),wEo=o("deberta-v2"),AEo=o(" \u2014 "),VN=a("a"),yEo=o("DebertaV2ForMaskedLM"),LEo=o(" (DeBERTa-v2 model)"),xEo=l(),c2=a("li"),Fie=a("strong"),$Eo=o("distilbert"),kEo=o(" \u2014 "),XN=a("a"),SEo=o("DistilBertForMaskedLM"),REo=o(" (DistilBERT model)"),BEo=l(),f2=a("li"),Tie=a("strong"),PEo=o("electra"),IEo=o(" \u2014 "),zN=a("a"),qEo=o("ElectraForMaskedLM"),NEo=o(" (ELECTRA model)"),jEo=l(),m2=a("li"),Mie=a("strong"),DEo=o("flaubert"),GEo=o(" \u2014 "),QN=a("a"),OEo=o("FlaubertWithLMHeadModel"),VEo=o(" (FlauBERT model)"),XEo=l(),g2=a("li"),Eie=a("strong"),zEo=o("fnet"),QEo=o(" \u2014 "),WN=a("a"),WEo=o("FNetForMaskedLM"),HEo=o(" (FNet model)"),UEo=l(),h2=a("li"),Cie=a("strong"),JEo=o("funnel"),YEo=o(" \u2014 "),HN=a("a"),KEo=o("FunnelForMaskedLM"),ZEo=o(" (Funnel Transformer model)"),e5o=l(),p2=a("li"),wie=a("strong"),o5o=o("ibert"),r5o=o(" \u2014 "),UN=a("a"),t5o=o("IBertForMaskedLM"),a5o=o(" (I-BERT model)"),n5o=l(),u2=a("li"),Aie=a("strong"),s5o=o("layoutlm"),l5o=o(" \u2014 "),JN=a("a"),i5o=o("LayoutLMForMaskedLM"),d5o=o(" (LayoutLM model)"),c5o=l(),_2=a("li"),yie=a("strong"),f5o=o("longformer"),m5o=o(" \u2014 "),YN=a("a"),g5o=o("LongformerForMaskedLM"),h5o=o(" (Longformer model)"),p5o=l(),b2=a("li"),Lie=a("strong"),u5o=o("mbart"),_5o=o(" \u2014 "),KN=a("a"),b5o=o("MBartForConditionalGeneration"),v5o=o(" (mBART model)"),F5o=l(),v2=a("li"),xie=a("strong"),T5o=o("megatron-bert"),M5o=o(" \u2014 "),ZN=a("a"),E5o=o("MegatronBertForMaskedLM"),C5o=o(" (MegatronBert model)"),w5o=l(),F2=a("li"),$ie=a("strong"),A5o=o("mobilebert"),y5o=o(" \u2014 "),ej=a("a"),L5o=o("MobileBertForMaskedLM"),x5o=o(" (MobileBERT model)"),$5o=l(),T2=a("li"),kie=a("strong"),k5o=o("mpnet"),S5o=o(" \u2014 "),oj=a("a"),R5o=o("MPNetForMaskedLM"),B5o=o(" (MPNet model)"),P5o=l(),M2=a("li"),Sie=a("strong"),I5o=o("nystromformer"),q5o=o(" \u2014 "),rj=a("a"),N5o=o("NystromformerForMaskedLM"),j5o=o(" (Nystromformer model)"),D5o=l(),E2=a("li"),Rie=a("strong"),G5o=o("perceiver"),O5o=o(" \u2014 "),tj=a("a"),V5o=o("PerceiverForMaskedLM"),X5o=o(" (Perceiver model)"),z5o=l(),C2=a("li"),Bie=a("strong"),Q5o=o("qdqbert"),W5o=o(" \u2014 "),aj=a("a"),H5o=o("QDQBertForMaskedLM"),U5o=o(" (QDQBert model)"),J5o=l(),w2=a("li"),Pie=a("strong"),Y5o=o("reformer"),K5o=o(" \u2014 "),nj=a("a"),Z5o=o("ReformerForMaskedLM"),eCo=o(" (Reformer model)"),oCo=l(),A2=a("li"),Iie=a("strong"),rCo=o("rembert"),tCo=o(" \u2014 "),sj=a("a"),aCo=o("RemBertForMaskedLM"),nCo=o(" (RemBERT model)"),sCo=l(),y2=a("li"),qie=a("strong"),lCo=o("roberta"),iCo=o(" \u2014 "),lj=a("a"),dCo=o("RobertaForMaskedLM"),cCo=o(" (RoBERTa model)"),fCo=l(),L2=a("li"),Nie=a("strong"),mCo=o("roformer"),gCo=o(" \u2014 "),ij=a("a"),hCo=o("RoFormerForMaskedLM"),pCo=o(" (RoFormer model)"),uCo=l(),x2=a("li"),jie=a("strong"),_Co=o("squeezebert"),bCo=o(" \u2014 "),dj=a("a"),vCo=o("SqueezeBertForMaskedLM"),FCo=o(" (SqueezeBERT model)"),TCo=l(),$2=a("li"),Die=a("strong"),MCo=o("tapas"),ECo=o(" \u2014 "),cj=a("a"),CCo=o("TapasForMaskedLM"),wCo=o(" (TAPAS model)"),ACo=l(),k2=a("li"),Gie=a("strong"),yCo=o("wav2vec2"),LCo=o(" \u2014 "),Oie=a("code"),xCo=o("Wav2Vec2ForMaskedLM"),$Co=o(" (Wav2Vec2 model)"),kCo=l(),S2=a("li"),Vie=a("strong"),SCo=o("xlm"),RCo=o(" \u2014 "),fj=a("a"),BCo=o("XLMWithLMHeadModel"),PCo=o(" (XLM model)"),ICo=l(),R2=a("li"),Xie=a("strong"),qCo=o("xlm-roberta"),NCo=o(" \u2014 "),mj=a("a"),jCo=o("XLMRobertaForMaskedLM"),DCo=o(" (XLM-RoBERTa model)"),GCo=l(),B2=a("li"),zie=a("strong"),OCo=o("xlm-roberta-xl"),VCo=o(" \u2014 "),gj=a("a"),XCo=o("XLMRobertaXLForMaskedLM"),zCo=o(" (XLM-RoBERTa-XL model)"),QCo=l(),P2=a("li"),Qie=a("strong"),WCo=o("yoso"),HCo=o(" \u2014 "),hj=a("a"),UCo=o("YosoForMaskedLM"),JCo=o(" (YOSO model)"),YCo=l(),I2=a("p"),KCo=o("The model is set in evaluation mode by default using "),Wie=a("code"),ZCo=o("model.eval()"),e3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hie=a("code"),o3o=o("model.train()"),r3o=l(),F(q2.$$.fragment),hPe=l(),Li=a("h2"),N2=a("a"),Uie=a("span"),F(CA.$$.fragment),t3o=l(),Jie=a("span"),a3o=o("AutoModelForSeq2SeqLM"),pPe=l(),So=a("div"),F(wA.$$.fragment),n3o=l(),xi=a("p"),s3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pj=a("a"),l3o=o("from_pretrained()"),i3o=o(" class method or the "),uj=a("a"),d3o=o("from_config()"),c3o=o(` class
method.`),f3o=l(),AA=a("p"),m3o=o("This class cannot be instantiated directly using "),Yie=a("code"),g3o=o("__init__()"),h3o=o(" (throws an error)."),p3o=l(),tt=a("div"),F(yA.$$.fragment),u3o=l(),Kie=a("p"),_3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b3o=l(),$i=a("p"),v3o=o(`Note:
Loading a model from its configuration file does `),Zie=a("strong"),F3o=o("not"),T3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),M3o=o("from_pretrained()"),E3o=o(" to load the model weights."),C3o=l(),F(j2.$$.fragment),w3o=l(),Ke=a("div"),F(LA.$$.fragment),A3o=l(),ede=a("p"),y3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),L3o=l(),ya=a("p"),x3o=o("The model class to instantiate is selected based on the "),ode=a("code"),$3o=o("model_type"),k3o=o(` property of the config object (either
passed as an argument or loaded from `),rde=a("code"),S3o=o("pretrained_model_name_or_path"),R3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=a("code"),B3o=o("pretrained_model_name_or_path"),P3o=o(":"),I3o=l(),he=a("ul"),D2=a("li"),ade=a("strong"),q3o=o("bart"),N3o=o(" \u2014 "),bj=a("a"),j3o=o("BartForConditionalGeneration"),D3o=o(" (BART model)"),G3o=l(),G2=a("li"),nde=a("strong"),O3o=o("bigbird_pegasus"),V3o=o(" \u2014 "),vj=a("a"),X3o=o("BigBirdPegasusForConditionalGeneration"),z3o=o(" (BigBirdPegasus model)"),Q3o=l(),O2=a("li"),sde=a("strong"),W3o=o("blenderbot"),H3o=o(" \u2014 "),Fj=a("a"),U3o=o("BlenderbotForConditionalGeneration"),J3o=o(" (Blenderbot model)"),Y3o=l(),V2=a("li"),lde=a("strong"),K3o=o("blenderbot-small"),Z3o=o(" \u2014 "),Tj=a("a"),ewo=o("BlenderbotSmallForConditionalGeneration"),owo=o(" (BlenderbotSmall model)"),rwo=l(),X2=a("li"),ide=a("strong"),two=o("encoder-decoder"),awo=o(" \u2014 "),Mj=a("a"),nwo=o("EncoderDecoderModel"),swo=o(" (Encoder decoder model)"),lwo=l(),z2=a("li"),dde=a("strong"),iwo=o("fsmt"),dwo=o(" \u2014 "),Ej=a("a"),cwo=o("FSMTForConditionalGeneration"),fwo=o(" (FairSeq Machine-Translation model)"),mwo=l(),Q2=a("li"),cde=a("strong"),gwo=o("led"),hwo=o(" \u2014 "),Cj=a("a"),pwo=o("LEDForConditionalGeneration"),uwo=o(" (LED model)"),_wo=l(),W2=a("li"),fde=a("strong"),bwo=o("longt5"),vwo=o(" \u2014 "),wj=a("a"),Fwo=o("LongT5ForConditionalGeneration"),Two=o(" (LongT5 model)"),Mwo=l(),H2=a("li"),mde=a("strong"),Ewo=o("m2m_100"),Cwo=o(" \u2014 "),Aj=a("a"),wwo=o("M2M100ForConditionalGeneration"),Awo=o(" (M2M100 model)"),ywo=l(),U2=a("li"),gde=a("strong"),Lwo=o("marian"),xwo=o(" \u2014 "),yj=a("a"),$wo=o("MarianMTModel"),kwo=o(" (Marian model)"),Swo=l(),J2=a("li"),hde=a("strong"),Rwo=o("mbart"),Bwo=o(" \u2014 "),Lj=a("a"),Pwo=o("MBartForConditionalGeneration"),Iwo=o(" (mBART model)"),qwo=l(),Y2=a("li"),pde=a("strong"),Nwo=o("mt5"),jwo=o(" \u2014 "),xj=a("a"),Dwo=o("MT5ForConditionalGeneration"),Gwo=o(" (mT5 model)"),Owo=l(),K2=a("li"),ude=a("strong"),Vwo=o("pegasus"),Xwo=o(" \u2014 "),$j=a("a"),zwo=o("PegasusForConditionalGeneration"),Qwo=o(" (Pegasus model)"),Wwo=l(),Z2=a("li"),_de=a("strong"),Hwo=o("plbart"),Uwo=o(" \u2014 "),kj=a("a"),Jwo=o("PLBartForConditionalGeneration"),Ywo=o(" (PLBart model)"),Kwo=l(),e1=a("li"),bde=a("strong"),Zwo=o("prophetnet"),eAo=o(" \u2014 "),Sj=a("a"),oAo=o("ProphetNetForConditionalGeneration"),rAo=o(" (ProphetNet model)"),tAo=l(),o1=a("li"),vde=a("strong"),aAo=o("t5"),nAo=o(" \u2014 "),Rj=a("a"),sAo=o("T5ForConditionalGeneration"),lAo=o(" (T5 model)"),iAo=l(),r1=a("li"),Fde=a("strong"),dAo=o("tapex"),cAo=o(" \u2014 "),Bj=a("a"),fAo=o("BartForConditionalGeneration"),mAo=o(" (TAPEX model)"),gAo=l(),t1=a("li"),Tde=a("strong"),hAo=o("xlm-prophetnet"),pAo=o(" \u2014 "),Pj=a("a"),uAo=o("XLMProphetNetForConditionalGeneration"),_Ao=o(" (XLMProphetNet model)"),bAo=l(),a1=a("p"),vAo=o("The model is set in evaluation mode by default using "),Mde=a("code"),FAo=o("model.eval()"),TAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=a("code"),MAo=o("model.train()"),EAo=l(),F(n1.$$.fragment),uPe=l(),ki=a("h2"),s1=a("a"),Cde=a("span"),F(xA.$$.fragment),CAo=l(),wde=a("span"),wAo=o("AutoModelForSequenceClassification"),_Pe=l(),Ro=a("div"),F($A.$$.fragment),AAo=l(),Si=a("p"),yAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ij=a("a"),LAo=o("from_pretrained()"),xAo=o(" class method or the "),qj=a("a"),$Ao=o("from_config()"),kAo=o(` class
method.`),SAo=l(),kA=a("p"),RAo=o("This class cannot be instantiated directly using "),Ade=a("code"),BAo=o("__init__()"),PAo=o(" (throws an error)."),IAo=l(),at=a("div"),F(SA.$$.fragment),qAo=l(),yde=a("p"),NAo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jAo=l(),Ri=a("p"),DAo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),GAo=o("not"),OAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=a("a"),VAo=o("from_pretrained()"),XAo=o(" to load the model weights."),zAo=l(),F(l1.$$.fragment),QAo=l(),Ze=a("div"),F(RA.$$.fragment),WAo=l(),xde=a("p"),HAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),UAo=l(),La=a("p"),JAo=o("The model class to instantiate is selected based on the "),$de=a("code"),YAo=o("model_type"),KAo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),ZAo=o("pretrained_model_name_or_path"),e0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),o0o=o("pretrained_model_name_or_path"),r0o=o(":"),t0o=l(),q=a("ul"),i1=a("li"),Rde=a("strong"),a0o=o("albert"),n0o=o(" \u2014 "),jj=a("a"),s0o=o("AlbertForSequenceClassification"),l0o=o(" (ALBERT model)"),i0o=l(),d1=a("li"),Bde=a("strong"),d0o=o("bart"),c0o=o(" \u2014 "),Dj=a("a"),f0o=o("BartForSequenceClassification"),m0o=o(" (BART model)"),g0o=l(),c1=a("li"),Pde=a("strong"),h0o=o("bert"),p0o=o(" \u2014 "),Gj=a("a"),u0o=o("BertForSequenceClassification"),_0o=o(" (BERT model)"),b0o=l(),f1=a("li"),Ide=a("strong"),v0o=o("big_bird"),F0o=o(" \u2014 "),Oj=a("a"),T0o=o("BigBirdForSequenceClassification"),M0o=o(" (BigBird model)"),E0o=l(),m1=a("li"),qde=a("strong"),C0o=o("bigbird_pegasus"),w0o=o(" \u2014 "),Vj=a("a"),A0o=o("BigBirdPegasusForSequenceClassification"),y0o=o(" (BigBirdPegasus model)"),L0o=l(),g1=a("li"),Nde=a("strong"),x0o=o("camembert"),$0o=o(" \u2014 "),Xj=a("a"),k0o=o("CamembertForSequenceClassification"),S0o=o(" (CamemBERT model)"),R0o=l(),h1=a("li"),jde=a("strong"),B0o=o("canine"),P0o=o(" \u2014 "),zj=a("a"),I0o=o("CanineForSequenceClassification"),q0o=o(" (Canine model)"),N0o=l(),p1=a("li"),Dde=a("strong"),j0o=o("convbert"),D0o=o(" \u2014 "),Qj=a("a"),G0o=o("ConvBertForSequenceClassification"),O0o=o(" (ConvBERT model)"),V0o=l(),u1=a("li"),Gde=a("strong"),X0o=o("ctrl"),z0o=o(" \u2014 "),Wj=a("a"),Q0o=o("CTRLForSequenceClassification"),W0o=o(" (CTRL model)"),H0o=l(),_1=a("li"),Ode=a("strong"),U0o=o("data2vec-text"),J0o=o(" \u2014 "),Hj=a("a"),Y0o=o("Data2VecTextForSequenceClassification"),K0o=o(" (Data2VecText model)"),Z0o=l(),b1=a("li"),Vde=a("strong"),eyo=o("deberta"),oyo=o(" \u2014 "),Uj=a("a"),ryo=o("DebertaForSequenceClassification"),tyo=o(" (DeBERTa model)"),ayo=l(),v1=a("li"),Xde=a("strong"),nyo=o("deberta-v2"),syo=o(" \u2014 "),Jj=a("a"),lyo=o("DebertaV2ForSequenceClassification"),iyo=o(" (DeBERTa-v2 model)"),dyo=l(),F1=a("li"),zde=a("strong"),cyo=o("distilbert"),fyo=o(" \u2014 "),Yj=a("a"),myo=o("DistilBertForSequenceClassification"),gyo=o(" (DistilBERT model)"),hyo=l(),T1=a("li"),Qde=a("strong"),pyo=o("electra"),uyo=o(" \u2014 "),Kj=a("a"),_yo=o("ElectraForSequenceClassification"),byo=o(" (ELECTRA model)"),vyo=l(),M1=a("li"),Wde=a("strong"),Fyo=o("flaubert"),Tyo=o(" \u2014 "),Zj=a("a"),Myo=o("FlaubertForSequenceClassification"),Eyo=o(" (FlauBERT model)"),Cyo=l(),E1=a("li"),Hde=a("strong"),wyo=o("fnet"),Ayo=o(" \u2014 "),eD=a("a"),yyo=o("FNetForSequenceClassification"),Lyo=o(" (FNet model)"),xyo=l(),C1=a("li"),Ude=a("strong"),$yo=o("funnel"),kyo=o(" \u2014 "),oD=a("a"),Syo=o("FunnelForSequenceClassification"),Ryo=o(" (Funnel Transformer model)"),Byo=l(),w1=a("li"),Jde=a("strong"),Pyo=o("gpt2"),Iyo=o(" \u2014 "),rD=a("a"),qyo=o("GPT2ForSequenceClassification"),Nyo=o(" (OpenAI GPT-2 model)"),jyo=l(),A1=a("li"),Yde=a("strong"),Dyo=o("gpt_neo"),Gyo=o(" \u2014 "),tD=a("a"),Oyo=o("GPTNeoForSequenceClassification"),Vyo=o(" (GPT Neo model)"),Xyo=l(),y1=a("li"),Kde=a("strong"),zyo=o("gptj"),Qyo=o(" \u2014 "),aD=a("a"),Wyo=o("GPTJForSequenceClassification"),Hyo=o(" (GPT-J model)"),Uyo=l(),L1=a("li"),Zde=a("strong"),Jyo=o("ibert"),Yyo=o(" \u2014 "),nD=a("a"),Kyo=o("IBertForSequenceClassification"),Zyo=o(" (I-BERT model)"),eLo=l(),x1=a("li"),ece=a("strong"),oLo=o("layoutlm"),rLo=o(" \u2014 "),sD=a("a"),tLo=o("LayoutLMForSequenceClassification"),aLo=o(" (LayoutLM model)"),nLo=l(),$1=a("li"),oce=a("strong"),sLo=o("layoutlmv2"),lLo=o(" \u2014 "),lD=a("a"),iLo=o("LayoutLMv2ForSequenceClassification"),dLo=o(" (LayoutLMv2 model)"),cLo=l(),k1=a("li"),rce=a("strong"),fLo=o("led"),mLo=o(" \u2014 "),iD=a("a"),gLo=o("LEDForSequenceClassification"),hLo=o(" (LED model)"),pLo=l(),S1=a("li"),tce=a("strong"),uLo=o("longformer"),_Lo=o(" \u2014 "),dD=a("a"),bLo=o("LongformerForSequenceClassification"),vLo=o(" (Longformer model)"),FLo=l(),R1=a("li"),ace=a("strong"),TLo=o("mbart"),MLo=o(" \u2014 "),cD=a("a"),ELo=o("MBartForSequenceClassification"),CLo=o(" (mBART model)"),wLo=l(),B1=a("li"),nce=a("strong"),ALo=o("megatron-bert"),yLo=o(" \u2014 "),fD=a("a"),LLo=o("MegatronBertForSequenceClassification"),xLo=o(" (MegatronBert model)"),$Lo=l(),P1=a("li"),sce=a("strong"),kLo=o("mobilebert"),SLo=o(" \u2014 "),mD=a("a"),RLo=o("MobileBertForSequenceClassification"),BLo=o(" (MobileBERT model)"),PLo=l(),I1=a("li"),lce=a("strong"),ILo=o("mpnet"),qLo=o(" \u2014 "),gD=a("a"),NLo=o("MPNetForSequenceClassification"),jLo=o(" (MPNet model)"),DLo=l(),q1=a("li"),ice=a("strong"),GLo=o("nystromformer"),OLo=o(" \u2014 "),hD=a("a"),VLo=o("NystromformerForSequenceClassification"),XLo=o(" (Nystromformer model)"),zLo=l(),N1=a("li"),dce=a("strong"),QLo=o("openai-gpt"),WLo=o(" \u2014 "),pD=a("a"),HLo=o("OpenAIGPTForSequenceClassification"),ULo=o(" (OpenAI GPT model)"),JLo=l(),j1=a("li"),cce=a("strong"),YLo=o("perceiver"),KLo=o(" \u2014 "),uD=a("a"),ZLo=o("PerceiverForSequenceClassification"),e8o=o(" (Perceiver model)"),o8o=l(),D1=a("li"),fce=a("strong"),r8o=o("plbart"),t8o=o(" \u2014 "),_D=a("a"),a8o=o("PLBartForSequenceClassification"),n8o=o(" (PLBart model)"),s8o=l(),G1=a("li"),mce=a("strong"),l8o=o("qdqbert"),i8o=o(" \u2014 "),bD=a("a"),d8o=o("QDQBertForSequenceClassification"),c8o=o(" (QDQBert model)"),f8o=l(),O1=a("li"),gce=a("strong"),m8o=o("reformer"),g8o=o(" \u2014 "),vD=a("a"),h8o=o("ReformerForSequenceClassification"),p8o=o(" (Reformer model)"),u8o=l(),V1=a("li"),hce=a("strong"),_8o=o("rembert"),b8o=o(" \u2014 "),FD=a("a"),v8o=o("RemBertForSequenceClassification"),F8o=o(" (RemBERT model)"),T8o=l(),X1=a("li"),pce=a("strong"),M8o=o("roberta"),E8o=o(" \u2014 "),TD=a("a"),C8o=o("RobertaForSequenceClassification"),w8o=o(" (RoBERTa model)"),A8o=l(),z1=a("li"),uce=a("strong"),y8o=o("roformer"),L8o=o(" \u2014 "),MD=a("a"),x8o=o("RoFormerForSequenceClassification"),$8o=o(" (RoFormer model)"),k8o=l(),Q1=a("li"),_ce=a("strong"),S8o=o("squeezebert"),R8o=o(" \u2014 "),ED=a("a"),B8o=o("SqueezeBertForSequenceClassification"),P8o=o(" (SqueezeBERT model)"),I8o=l(),W1=a("li"),bce=a("strong"),q8o=o("tapas"),N8o=o(" \u2014 "),CD=a("a"),j8o=o("TapasForSequenceClassification"),D8o=o(" (TAPAS model)"),G8o=l(),H1=a("li"),vce=a("strong"),O8o=o("tapex"),V8o=o(" \u2014 "),wD=a("a"),X8o=o("BartForSequenceClassification"),z8o=o(" (TAPEX model)"),Q8o=l(),U1=a("li"),Fce=a("strong"),W8o=o("transfo-xl"),H8o=o(" \u2014 "),AD=a("a"),U8o=o("TransfoXLForSequenceClassification"),J8o=o(" (Transformer-XL model)"),Y8o=l(),J1=a("li"),Tce=a("strong"),K8o=o("xlm"),Z8o=o(" \u2014 "),yD=a("a"),exo=o("XLMForSequenceClassification"),oxo=o(" (XLM model)"),rxo=l(),Y1=a("li"),Mce=a("strong"),txo=o("xlm-roberta"),axo=o(" \u2014 "),LD=a("a"),nxo=o("XLMRobertaForSequenceClassification"),sxo=o(" (XLM-RoBERTa model)"),lxo=l(),K1=a("li"),Ece=a("strong"),ixo=o("xlm-roberta-xl"),dxo=o(" \u2014 "),xD=a("a"),cxo=o("XLMRobertaXLForSequenceClassification"),fxo=o(" (XLM-RoBERTa-XL model)"),mxo=l(),Z1=a("li"),Cce=a("strong"),gxo=o("xlnet"),hxo=o(" \u2014 "),$D=a("a"),pxo=o("XLNetForSequenceClassification"),uxo=o(" (XLNet model)"),_xo=l(),eb=a("li"),wce=a("strong"),bxo=o("yoso"),vxo=o(" \u2014 "),kD=a("a"),Fxo=o("YosoForSequenceClassification"),Txo=o(" (YOSO model)"),Mxo=l(),ob=a("p"),Exo=o("The model is set in evaluation mode by default using "),Ace=a("code"),Cxo=o("model.eval()"),wxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=a("code"),Axo=o("model.train()"),yxo=l(),F(rb.$$.fragment),bPe=l(),Bi=a("h2"),tb=a("a"),Lce=a("span"),F(BA.$$.fragment),Lxo=l(),xce=a("span"),xxo=o("AutoModelForMultipleChoice"),vPe=l(),Bo=a("div"),F(PA.$$.fragment),$xo=l(),Pi=a("p"),kxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SD=a("a"),Sxo=o("from_pretrained()"),Rxo=o(" class method or the "),RD=a("a"),Bxo=o("from_config()"),Pxo=o(` class
method.`),Ixo=l(),IA=a("p"),qxo=o("This class cannot be instantiated directly using "),$ce=a("code"),Nxo=o("__init__()"),jxo=o(" (throws an error)."),Dxo=l(),nt=a("div"),F(qA.$$.fragment),Gxo=l(),kce=a("p"),Oxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Vxo=l(),Ii=a("p"),Xxo=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),zxo=o("not"),Qxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),Wxo=o("from_pretrained()"),Hxo=o(" to load the model weights."),Uxo=l(),F(ab.$$.fragment),Jxo=l(),eo=a("div"),F(NA.$$.fragment),Yxo=l(),Rce=a("p"),Kxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zxo=l(),xa=a("p"),e$o=o("The model class to instantiate is selected based on the "),Bce=a("code"),o$o=o("model_type"),r$o=o(` property of the config object (either
passed as an argument or loaded from `),Pce=a("code"),t$o=o("pretrained_model_name_or_path"),a$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),n$o=o("pretrained_model_name_or_path"),s$o=o(":"),l$o=l(),Y=a("ul"),nb=a("li"),qce=a("strong"),i$o=o("albert"),d$o=o(" \u2014 "),PD=a("a"),c$o=o("AlbertForMultipleChoice"),f$o=o(" (ALBERT model)"),m$o=l(),sb=a("li"),Nce=a("strong"),g$o=o("bert"),h$o=o(" \u2014 "),ID=a("a"),p$o=o("BertForMultipleChoice"),u$o=o(" (BERT model)"),_$o=l(),lb=a("li"),jce=a("strong"),b$o=o("big_bird"),v$o=o(" \u2014 "),qD=a("a"),F$o=o("BigBirdForMultipleChoice"),T$o=o(" (BigBird model)"),M$o=l(),ib=a("li"),Dce=a("strong"),E$o=o("camembert"),C$o=o(" \u2014 "),ND=a("a"),w$o=o("CamembertForMultipleChoice"),A$o=o(" (CamemBERT model)"),y$o=l(),db=a("li"),Gce=a("strong"),L$o=o("canine"),x$o=o(" \u2014 "),jD=a("a"),$$o=o("CanineForMultipleChoice"),k$o=o(" (Canine model)"),S$o=l(),cb=a("li"),Oce=a("strong"),R$o=o("convbert"),B$o=o(" \u2014 "),DD=a("a"),P$o=o("ConvBertForMultipleChoice"),I$o=o(" (ConvBERT model)"),q$o=l(),fb=a("li"),Vce=a("strong"),N$o=o("data2vec-text"),j$o=o(" \u2014 "),GD=a("a"),D$o=o("Data2VecTextForMultipleChoice"),G$o=o(" (Data2VecText model)"),O$o=l(),mb=a("li"),Xce=a("strong"),V$o=o("distilbert"),X$o=o(" \u2014 "),OD=a("a"),z$o=o("DistilBertForMultipleChoice"),Q$o=o(" (DistilBERT model)"),W$o=l(),gb=a("li"),zce=a("strong"),H$o=o("electra"),U$o=o(" \u2014 "),VD=a("a"),J$o=o("ElectraForMultipleChoice"),Y$o=o(" (ELECTRA model)"),K$o=l(),hb=a("li"),Qce=a("strong"),Z$o=o("flaubert"),eko=o(" \u2014 "),XD=a("a"),oko=o("FlaubertForMultipleChoice"),rko=o(" (FlauBERT model)"),tko=l(),pb=a("li"),Wce=a("strong"),ako=o("fnet"),nko=o(" \u2014 "),zD=a("a"),sko=o("FNetForMultipleChoice"),lko=o(" (FNet model)"),iko=l(),ub=a("li"),Hce=a("strong"),dko=o("funnel"),cko=o(" \u2014 "),QD=a("a"),fko=o("FunnelForMultipleChoice"),mko=o(" (Funnel Transformer model)"),gko=l(),_b=a("li"),Uce=a("strong"),hko=o("ibert"),pko=o(" \u2014 "),WD=a("a"),uko=o("IBertForMultipleChoice"),_ko=o(" (I-BERT model)"),bko=l(),bb=a("li"),Jce=a("strong"),vko=o("longformer"),Fko=o(" \u2014 "),HD=a("a"),Tko=o("LongformerForMultipleChoice"),Mko=o(" (Longformer model)"),Eko=l(),vb=a("li"),Yce=a("strong"),Cko=o("megatron-bert"),wko=o(" \u2014 "),UD=a("a"),Ako=o("MegatronBertForMultipleChoice"),yko=o(" (MegatronBert model)"),Lko=l(),Fb=a("li"),Kce=a("strong"),xko=o("mobilebert"),$ko=o(" \u2014 "),JD=a("a"),kko=o("MobileBertForMultipleChoice"),Sko=o(" (MobileBERT model)"),Rko=l(),Tb=a("li"),Zce=a("strong"),Bko=o("mpnet"),Pko=o(" \u2014 "),YD=a("a"),Iko=o("MPNetForMultipleChoice"),qko=o(" (MPNet model)"),Nko=l(),Mb=a("li"),efe=a("strong"),jko=o("nystromformer"),Dko=o(" \u2014 "),KD=a("a"),Gko=o("NystromformerForMultipleChoice"),Oko=o(" (Nystromformer model)"),Vko=l(),Eb=a("li"),ofe=a("strong"),Xko=o("qdqbert"),zko=o(" \u2014 "),ZD=a("a"),Qko=o("QDQBertForMultipleChoice"),Wko=o(" (QDQBert model)"),Hko=l(),Cb=a("li"),rfe=a("strong"),Uko=o("rembert"),Jko=o(" \u2014 "),eG=a("a"),Yko=o("RemBertForMultipleChoice"),Kko=o(" (RemBERT model)"),Zko=l(),wb=a("li"),tfe=a("strong"),eSo=o("roberta"),oSo=o(" \u2014 "),oG=a("a"),rSo=o("RobertaForMultipleChoice"),tSo=o(" (RoBERTa model)"),aSo=l(),Ab=a("li"),afe=a("strong"),nSo=o("roformer"),sSo=o(" \u2014 "),rG=a("a"),lSo=o("RoFormerForMultipleChoice"),iSo=o(" (RoFormer model)"),dSo=l(),yb=a("li"),nfe=a("strong"),cSo=o("squeezebert"),fSo=o(" \u2014 "),tG=a("a"),mSo=o("SqueezeBertForMultipleChoice"),gSo=o(" (SqueezeBERT model)"),hSo=l(),Lb=a("li"),sfe=a("strong"),pSo=o("xlm"),uSo=o(" \u2014 "),aG=a("a"),_So=o("XLMForMultipleChoice"),bSo=o(" (XLM model)"),vSo=l(),xb=a("li"),lfe=a("strong"),FSo=o("xlm-roberta"),TSo=o(" \u2014 "),nG=a("a"),MSo=o("XLMRobertaForMultipleChoice"),ESo=o(" (XLM-RoBERTa model)"),CSo=l(),$b=a("li"),ife=a("strong"),wSo=o("xlm-roberta-xl"),ASo=o(" \u2014 "),sG=a("a"),ySo=o("XLMRobertaXLForMultipleChoice"),LSo=o(" (XLM-RoBERTa-XL model)"),xSo=l(),kb=a("li"),dfe=a("strong"),$So=o("xlnet"),kSo=o(" \u2014 "),lG=a("a"),SSo=o("XLNetForMultipleChoice"),RSo=o(" (XLNet model)"),BSo=l(),Sb=a("li"),cfe=a("strong"),PSo=o("yoso"),ISo=o(" \u2014 "),iG=a("a"),qSo=o("YosoForMultipleChoice"),NSo=o(" (YOSO model)"),jSo=l(),Rb=a("p"),DSo=o("The model is set in evaluation mode by default using "),ffe=a("code"),GSo=o("model.eval()"),OSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=a("code"),VSo=o("model.train()"),XSo=l(),F(Bb.$$.fragment),FPe=l(),qi=a("h2"),Pb=a("a"),gfe=a("span"),F(jA.$$.fragment),zSo=l(),hfe=a("span"),QSo=o("AutoModelForNextSentencePrediction"),TPe=l(),Po=a("div"),F(DA.$$.fragment),WSo=l(),Ni=a("p"),HSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dG=a("a"),USo=o("from_pretrained()"),JSo=o(" class method or the "),cG=a("a"),YSo=o("from_config()"),KSo=o(` class
method.`),ZSo=l(),GA=a("p"),eRo=o("This class cannot be instantiated directly using "),pfe=a("code"),oRo=o("__init__()"),rRo=o(" (throws an error)."),tRo=l(),st=a("div"),F(OA.$$.fragment),aRo=l(),ufe=a("p"),nRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sRo=l(),ji=a("p"),lRo=o(`Note:
Loading a model from its configuration file does `),_fe=a("strong"),iRo=o("not"),dRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=a("a"),cRo=o("from_pretrained()"),fRo=o(" to load the model weights."),mRo=l(),F(Ib.$$.fragment),gRo=l(),oo=a("div"),F(VA.$$.fragment),hRo=l(),bfe=a("p"),pRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uRo=l(),$a=a("p"),_Ro=o("The model class to instantiate is selected based on the "),vfe=a("code"),bRo=o("model_type"),vRo=o(` property of the config object (either
passed as an argument or loaded from `),Ffe=a("code"),FRo=o("pretrained_model_name_or_path"),TRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=a("code"),MRo=o("pretrained_model_name_or_path"),ERo=o(":"),CRo=l(),Ur=a("ul"),qb=a("li"),Mfe=a("strong"),wRo=o("bert"),ARo=o(" \u2014 "),mG=a("a"),yRo=o("BertForNextSentencePrediction"),LRo=o(" (BERT model)"),xRo=l(),Nb=a("li"),Efe=a("strong"),$Ro=o("fnet"),kRo=o(" \u2014 "),gG=a("a"),SRo=o("FNetForNextSentencePrediction"),RRo=o(" (FNet model)"),BRo=l(),jb=a("li"),Cfe=a("strong"),PRo=o("megatron-bert"),IRo=o(" \u2014 "),hG=a("a"),qRo=o("MegatronBertForNextSentencePrediction"),NRo=o(" (MegatronBert model)"),jRo=l(),Db=a("li"),wfe=a("strong"),DRo=o("mobilebert"),GRo=o(" \u2014 "),pG=a("a"),ORo=o("MobileBertForNextSentencePrediction"),VRo=o(" (MobileBERT model)"),XRo=l(),Gb=a("li"),Afe=a("strong"),zRo=o("qdqbert"),QRo=o(" \u2014 "),uG=a("a"),WRo=o("QDQBertForNextSentencePrediction"),HRo=o(" (QDQBert model)"),URo=l(),Ob=a("p"),JRo=o("The model is set in evaluation mode by default using "),yfe=a("code"),YRo=o("model.eval()"),KRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=a("code"),ZRo=o("model.train()"),eBo=l(),F(Vb.$$.fragment),MPe=l(),Di=a("h2"),Xb=a("a"),xfe=a("span"),F(XA.$$.fragment),oBo=l(),$fe=a("span"),rBo=o("AutoModelForTokenClassification"),EPe=l(),Io=a("div"),F(zA.$$.fragment),tBo=l(),Gi=a("p"),aBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_G=a("a"),nBo=o("from_pretrained()"),sBo=o(" class method or the "),bG=a("a"),lBo=o("from_config()"),iBo=o(` class
method.`),dBo=l(),QA=a("p"),cBo=o("This class cannot be instantiated directly using "),kfe=a("code"),fBo=o("__init__()"),mBo=o(" (throws an error)."),gBo=l(),lt=a("div"),F(WA.$$.fragment),hBo=l(),Sfe=a("p"),pBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uBo=l(),Oi=a("p"),_Bo=o(`Note:
Loading a model from its configuration file does `),Rfe=a("strong"),bBo=o("not"),vBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=a("a"),FBo=o("from_pretrained()"),TBo=o(" to load the model weights."),MBo=l(),F(zb.$$.fragment),EBo=l(),ro=a("div"),F(HA.$$.fragment),CBo=l(),Bfe=a("p"),wBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ABo=l(),ka=a("p"),yBo=o("The model class to instantiate is selected based on the "),Pfe=a("code"),LBo=o("model_type"),xBo=o(` property of the config object (either
passed as an argument or loaded from `),Ife=a("code"),$Bo=o("pretrained_model_name_or_path"),kBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=a("code"),SBo=o("pretrained_model_name_or_path"),RBo=o(":"),BBo=l(),U=a("ul"),Qb=a("li"),Nfe=a("strong"),PBo=o("albert"),IBo=o(" \u2014 "),FG=a("a"),qBo=o("AlbertForTokenClassification"),NBo=o(" (ALBERT model)"),jBo=l(),Wb=a("li"),jfe=a("strong"),DBo=o("bert"),GBo=o(" \u2014 "),TG=a("a"),OBo=o("BertForTokenClassification"),VBo=o(" (BERT model)"),XBo=l(),Hb=a("li"),Dfe=a("strong"),zBo=o("big_bird"),QBo=o(" \u2014 "),MG=a("a"),WBo=o("BigBirdForTokenClassification"),HBo=o(" (BigBird model)"),UBo=l(),Ub=a("li"),Gfe=a("strong"),JBo=o("camembert"),YBo=o(" \u2014 "),EG=a("a"),KBo=o("CamembertForTokenClassification"),ZBo=o(" (CamemBERT model)"),ePo=l(),Jb=a("li"),Ofe=a("strong"),oPo=o("canine"),rPo=o(" \u2014 "),CG=a("a"),tPo=o("CanineForTokenClassification"),aPo=o(" (Canine model)"),nPo=l(),Yb=a("li"),Vfe=a("strong"),sPo=o("convbert"),lPo=o(" \u2014 "),wG=a("a"),iPo=o("ConvBertForTokenClassification"),dPo=o(" (ConvBERT model)"),cPo=l(),Kb=a("li"),Xfe=a("strong"),fPo=o("data2vec-text"),mPo=o(" \u2014 "),AG=a("a"),gPo=o("Data2VecTextForTokenClassification"),hPo=o(" (Data2VecText model)"),pPo=l(),Zb=a("li"),zfe=a("strong"),uPo=o("deberta"),_Po=o(" \u2014 "),yG=a("a"),bPo=o("DebertaForTokenClassification"),vPo=o(" (DeBERTa model)"),FPo=l(),ev=a("li"),Qfe=a("strong"),TPo=o("deberta-v2"),MPo=o(" \u2014 "),LG=a("a"),EPo=o("DebertaV2ForTokenClassification"),CPo=o(" (DeBERTa-v2 model)"),wPo=l(),ov=a("li"),Wfe=a("strong"),APo=o("distilbert"),yPo=o(" \u2014 "),xG=a("a"),LPo=o("DistilBertForTokenClassification"),xPo=o(" (DistilBERT model)"),$Po=l(),rv=a("li"),Hfe=a("strong"),kPo=o("electra"),SPo=o(" \u2014 "),$G=a("a"),RPo=o("ElectraForTokenClassification"),BPo=o(" (ELECTRA model)"),PPo=l(),tv=a("li"),Ufe=a("strong"),IPo=o("flaubert"),qPo=o(" \u2014 "),kG=a("a"),NPo=o("FlaubertForTokenClassification"),jPo=o(" (FlauBERT model)"),DPo=l(),av=a("li"),Jfe=a("strong"),GPo=o("fnet"),OPo=o(" \u2014 "),SG=a("a"),VPo=o("FNetForTokenClassification"),XPo=o(" (FNet model)"),zPo=l(),nv=a("li"),Yfe=a("strong"),QPo=o("funnel"),WPo=o(" \u2014 "),RG=a("a"),HPo=o("FunnelForTokenClassification"),UPo=o(" (Funnel Transformer model)"),JPo=l(),sv=a("li"),Kfe=a("strong"),YPo=o("gpt2"),KPo=o(" \u2014 "),BG=a("a"),ZPo=o("GPT2ForTokenClassification"),eIo=o(" (OpenAI GPT-2 model)"),oIo=l(),lv=a("li"),Zfe=a("strong"),rIo=o("ibert"),tIo=o(" \u2014 "),PG=a("a"),aIo=o("IBertForTokenClassification"),nIo=o(" (I-BERT model)"),sIo=l(),iv=a("li"),eme=a("strong"),lIo=o("layoutlm"),iIo=o(" \u2014 "),IG=a("a"),dIo=o("LayoutLMForTokenClassification"),cIo=o(" (LayoutLM model)"),fIo=l(),dv=a("li"),ome=a("strong"),mIo=o("layoutlmv2"),gIo=o(" \u2014 "),qG=a("a"),hIo=o("LayoutLMv2ForTokenClassification"),pIo=o(" (LayoutLMv2 model)"),uIo=l(),cv=a("li"),rme=a("strong"),_Io=o("longformer"),bIo=o(" \u2014 "),NG=a("a"),vIo=o("LongformerForTokenClassification"),FIo=o(" (Longformer model)"),TIo=l(),fv=a("li"),tme=a("strong"),MIo=o("megatron-bert"),EIo=o(" \u2014 "),jG=a("a"),CIo=o("MegatronBertForTokenClassification"),wIo=o(" (MegatronBert model)"),AIo=l(),mv=a("li"),ame=a("strong"),yIo=o("mobilebert"),LIo=o(" \u2014 "),DG=a("a"),xIo=o("MobileBertForTokenClassification"),$Io=o(" (MobileBERT model)"),kIo=l(),gv=a("li"),nme=a("strong"),SIo=o("mpnet"),RIo=o(" \u2014 "),GG=a("a"),BIo=o("MPNetForTokenClassification"),PIo=o(" (MPNet model)"),IIo=l(),hv=a("li"),sme=a("strong"),qIo=o("nystromformer"),NIo=o(" \u2014 "),OG=a("a"),jIo=o("NystromformerForTokenClassification"),DIo=o(" (Nystromformer model)"),GIo=l(),pv=a("li"),lme=a("strong"),OIo=o("qdqbert"),VIo=o(" \u2014 "),VG=a("a"),XIo=o("QDQBertForTokenClassification"),zIo=o(" (QDQBert model)"),QIo=l(),uv=a("li"),ime=a("strong"),WIo=o("rembert"),HIo=o(" \u2014 "),XG=a("a"),UIo=o("RemBertForTokenClassification"),JIo=o(" (RemBERT model)"),YIo=l(),_v=a("li"),dme=a("strong"),KIo=o("roberta"),ZIo=o(" \u2014 "),zG=a("a"),eqo=o("RobertaForTokenClassification"),oqo=o(" (RoBERTa model)"),rqo=l(),bv=a("li"),cme=a("strong"),tqo=o("roformer"),aqo=o(" \u2014 "),QG=a("a"),nqo=o("RoFormerForTokenClassification"),sqo=o(" (RoFormer model)"),lqo=l(),vv=a("li"),fme=a("strong"),iqo=o("squeezebert"),dqo=o(" \u2014 "),WG=a("a"),cqo=o("SqueezeBertForTokenClassification"),fqo=o(" (SqueezeBERT model)"),mqo=l(),Fv=a("li"),mme=a("strong"),gqo=o("xlm"),hqo=o(" \u2014 "),HG=a("a"),pqo=o("XLMForTokenClassification"),uqo=o(" (XLM model)"),_qo=l(),Tv=a("li"),gme=a("strong"),bqo=o("xlm-roberta"),vqo=o(" \u2014 "),UG=a("a"),Fqo=o("XLMRobertaForTokenClassification"),Tqo=o(" (XLM-RoBERTa model)"),Mqo=l(),Mv=a("li"),hme=a("strong"),Eqo=o("xlm-roberta-xl"),Cqo=o(" \u2014 "),JG=a("a"),wqo=o("XLMRobertaXLForTokenClassification"),Aqo=o(" (XLM-RoBERTa-XL model)"),yqo=l(),Ev=a("li"),pme=a("strong"),Lqo=o("xlnet"),xqo=o(" \u2014 "),YG=a("a"),$qo=o("XLNetForTokenClassification"),kqo=o(" (XLNet model)"),Sqo=l(),Cv=a("li"),ume=a("strong"),Rqo=o("yoso"),Bqo=o(" \u2014 "),KG=a("a"),Pqo=o("YosoForTokenClassification"),Iqo=o(" (YOSO model)"),qqo=l(),wv=a("p"),Nqo=o("The model is set in evaluation mode by default using "),_me=a("code"),jqo=o("model.eval()"),Dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=a("code"),Gqo=o("model.train()"),Oqo=l(),F(Av.$$.fragment),CPe=l(),Vi=a("h2"),yv=a("a"),vme=a("span"),F(UA.$$.fragment),Vqo=l(),Fme=a("span"),Xqo=o("AutoModelForQuestionAnswering"),wPe=l(),qo=a("div"),F(JA.$$.fragment),zqo=l(),Xi=a("p"),Qqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZG=a("a"),Wqo=o("from_pretrained()"),Hqo=o(" class method or the "),eO=a("a"),Uqo=o("from_config()"),Jqo=o(` class
method.`),Yqo=l(),YA=a("p"),Kqo=o("This class cannot be instantiated directly using "),Tme=a("code"),Zqo=o("__init__()"),eNo=o(" (throws an error)."),oNo=l(),it=a("div"),F(KA.$$.fragment),rNo=l(),Mme=a("p"),tNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aNo=l(),zi=a("p"),nNo=o(`Note:
Loading a model from its configuration file does `),Eme=a("strong"),sNo=o("not"),lNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=a("a"),iNo=o("from_pretrained()"),dNo=o(" to load the model weights."),cNo=l(),F(Lv.$$.fragment),fNo=l(),to=a("div"),F(ZA.$$.fragment),mNo=l(),Cme=a("p"),gNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hNo=l(),Sa=a("p"),pNo=o("The model class to instantiate is selected based on the "),wme=a("code"),uNo=o("model_type"),_No=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),bNo=o("pretrained_model_name_or_path"),vNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),FNo=o("pretrained_model_name_or_path"),TNo=o(":"),MNo=l(),O=a("ul"),xv=a("li"),Lme=a("strong"),ENo=o("albert"),CNo=o(" \u2014 "),rO=a("a"),wNo=o("AlbertForQuestionAnswering"),ANo=o(" (ALBERT model)"),yNo=l(),$v=a("li"),xme=a("strong"),LNo=o("bart"),xNo=o(" \u2014 "),tO=a("a"),$No=o("BartForQuestionAnswering"),kNo=o(" (BART model)"),SNo=l(),kv=a("li"),$me=a("strong"),RNo=o("bert"),BNo=o(" \u2014 "),aO=a("a"),PNo=o("BertForQuestionAnswering"),INo=o(" (BERT model)"),qNo=l(),Sv=a("li"),kme=a("strong"),NNo=o("big_bird"),jNo=o(" \u2014 "),nO=a("a"),DNo=o("BigBirdForQuestionAnswering"),GNo=o(" (BigBird model)"),ONo=l(),Rv=a("li"),Sme=a("strong"),VNo=o("bigbird_pegasus"),XNo=o(" \u2014 "),sO=a("a"),zNo=o("BigBirdPegasusForQuestionAnswering"),QNo=o(" (BigBirdPegasus model)"),WNo=l(),Bv=a("li"),Rme=a("strong"),HNo=o("camembert"),UNo=o(" \u2014 "),lO=a("a"),JNo=o("CamembertForQuestionAnswering"),YNo=o(" (CamemBERT model)"),KNo=l(),Pv=a("li"),Bme=a("strong"),ZNo=o("canine"),ejo=o(" \u2014 "),iO=a("a"),ojo=o("CanineForQuestionAnswering"),rjo=o(" (Canine model)"),tjo=l(),Iv=a("li"),Pme=a("strong"),ajo=o("convbert"),njo=o(" \u2014 "),dO=a("a"),sjo=o("ConvBertForQuestionAnswering"),ljo=o(" (ConvBERT model)"),ijo=l(),qv=a("li"),Ime=a("strong"),djo=o("data2vec-text"),cjo=o(" \u2014 "),cO=a("a"),fjo=o("Data2VecTextForQuestionAnswering"),mjo=o(" (Data2VecText model)"),gjo=l(),Nv=a("li"),qme=a("strong"),hjo=o("deberta"),pjo=o(" \u2014 "),fO=a("a"),ujo=o("DebertaForQuestionAnswering"),_jo=o(" (DeBERTa model)"),bjo=l(),jv=a("li"),Nme=a("strong"),vjo=o("deberta-v2"),Fjo=o(" \u2014 "),mO=a("a"),Tjo=o("DebertaV2ForQuestionAnswering"),Mjo=o(" (DeBERTa-v2 model)"),Ejo=l(),Dv=a("li"),jme=a("strong"),Cjo=o("distilbert"),wjo=o(" \u2014 "),gO=a("a"),Ajo=o("DistilBertForQuestionAnswering"),yjo=o(" (DistilBERT model)"),Ljo=l(),Gv=a("li"),Dme=a("strong"),xjo=o("electra"),$jo=o(" \u2014 "),hO=a("a"),kjo=o("ElectraForQuestionAnswering"),Sjo=o(" (ELECTRA model)"),Rjo=l(),Ov=a("li"),Gme=a("strong"),Bjo=o("flaubert"),Pjo=o(" \u2014 "),pO=a("a"),Ijo=o("FlaubertForQuestionAnsweringSimple"),qjo=o(" (FlauBERT model)"),Njo=l(),Vv=a("li"),Ome=a("strong"),jjo=o("fnet"),Djo=o(" \u2014 "),uO=a("a"),Gjo=o("FNetForQuestionAnswering"),Ojo=o(" (FNet model)"),Vjo=l(),Xv=a("li"),Vme=a("strong"),Xjo=o("funnel"),zjo=o(" \u2014 "),_O=a("a"),Qjo=o("FunnelForQuestionAnswering"),Wjo=o(" (Funnel Transformer model)"),Hjo=l(),zv=a("li"),Xme=a("strong"),Ujo=o("gptj"),Jjo=o(" \u2014 "),bO=a("a"),Yjo=o("GPTJForQuestionAnswering"),Kjo=o(" (GPT-J model)"),Zjo=l(),Qv=a("li"),zme=a("strong"),eDo=o("ibert"),oDo=o(" \u2014 "),vO=a("a"),rDo=o("IBertForQuestionAnswering"),tDo=o(" (I-BERT model)"),aDo=l(),Wv=a("li"),Qme=a("strong"),nDo=o("layoutlmv2"),sDo=o(" \u2014 "),FO=a("a"),lDo=o("LayoutLMv2ForQuestionAnswering"),iDo=o(" (LayoutLMv2 model)"),dDo=l(),Hv=a("li"),Wme=a("strong"),cDo=o("led"),fDo=o(" \u2014 "),TO=a("a"),mDo=o("LEDForQuestionAnswering"),gDo=o(" (LED model)"),hDo=l(),Uv=a("li"),Hme=a("strong"),pDo=o("longformer"),uDo=o(" \u2014 "),MO=a("a"),_Do=o("LongformerForQuestionAnswering"),bDo=o(" (Longformer model)"),vDo=l(),Jv=a("li"),Ume=a("strong"),FDo=o("lxmert"),TDo=o(" \u2014 "),EO=a("a"),MDo=o("LxmertForQuestionAnswering"),EDo=o(" (LXMERT model)"),CDo=l(),Yv=a("li"),Jme=a("strong"),wDo=o("mbart"),ADo=o(" \u2014 "),CO=a("a"),yDo=o("MBartForQuestionAnswering"),LDo=o(" (mBART model)"),xDo=l(),Kv=a("li"),Yme=a("strong"),$Do=o("megatron-bert"),kDo=o(" \u2014 "),wO=a("a"),SDo=o("MegatronBertForQuestionAnswering"),RDo=o(" (MegatronBert model)"),BDo=l(),Zv=a("li"),Kme=a("strong"),PDo=o("mobilebert"),IDo=o(" \u2014 "),AO=a("a"),qDo=o("MobileBertForQuestionAnswering"),NDo=o(" (MobileBERT model)"),jDo=l(),eF=a("li"),Zme=a("strong"),DDo=o("mpnet"),GDo=o(" \u2014 "),yO=a("a"),ODo=o("MPNetForQuestionAnswering"),VDo=o(" (MPNet model)"),XDo=l(),oF=a("li"),ege=a("strong"),zDo=o("nystromformer"),QDo=o(" \u2014 "),LO=a("a"),WDo=o("NystromformerForQuestionAnswering"),HDo=o(" (Nystromformer model)"),UDo=l(),rF=a("li"),oge=a("strong"),JDo=o("qdqbert"),YDo=o(" \u2014 "),xO=a("a"),KDo=o("QDQBertForQuestionAnswering"),ZDo=o(" (QDQBert model)"),eGo=l(),tF=a("li"),rge=a("strong"),oGo=o("reformer"),rGo=o(" \u2014 "),$O=a("a"),tGo=o("ReformerForQuestionAnswering"),aGo=o(" (Reformer model)"),nGo=l(),aF=a("li"),tge=a("strong"),sGo=o("rembert"),lGo=o(" \u2014 "),kO=a("a"),iGo=o("RemBertForQuestionAnswering"),dGo=o(" (RemBERT model)"),cGo=l(),nF=a("li"),age=a("strong"),fGo=o("roberta"),mGo=o(" \u2014 "),SO=a("a"),gGo=o("RobertaForQuestionAnswering"),hGo=o(" (RoBERTa model)"),pGo=l(),sF=a("li"),nge=a("strong"),uGo=o("roformer"),_Go=o(" \u2014 "),RO=a("a"),bGo=o("RoFormerForQuestionAnswering"),vGo=o(" (RoFormer model)"),FGo=l(),lF=a("li"),sge=a("strong"),TGo=o("splinter"),MGo=o(" \u2014 "),BO=a("a"),EGo=o("SplinterForQuestionAnswering"),CGo=o(" (Splinter model)"),wGo=l(),iF=a("li"),lge=a("strong"),AGo=o("squeezebert"),yGo=o(" \u2014 "),PO=a("a"),LGo=o("SqueezeBertForQuestionAnswering"),xGo=o(" (SqueezeBERT model)"),$Go=l(),dF=a("li"),ige=a("strong"),kGo=o("xlm"),SGo=o(" \u2014 "),IO=a("a"),RGo=o("XLMForQuestionAnsweringSimple"),BGo=o(" (XLM model)"),PGo=l(),cF=a("li"),dge=a("strong"),IGo=o("xlm-roberta"),qGo=o(" \u2014 "),qO=a("a"),NGo=o("XLMRobertaForQuestionAnswering"),jGo=o(" (XLM-RoBERTa model)"),DGo=l(),fF=a("li"),cge=a("strong"),GGo=o("xlm-roberta-xl"),OGo=o(" \u2014 "),NO=a("a"),VGo=o("XLMRobertaXLForQuestionAnswering"),XGo=o(" (XLM-RoBERTa-XL model)"),zGo=l(),mF=a("li"),fge=a("strong"),QGo=o("xlnet"),WGo=o(" \u2014 "),jO=a("a"),HGo=o("XLNetForQuestionAnsweringSimple"),UGo=o(" (XLNet model)"),JGo=l(),gF=a("li"),mge=a("strong"),YGo=o("yoso"),KGo=o(" \u2014 "),DO=a("a"),ZGo=o("YosoForQuestionAnswering"),eOo=o(" (YOSO model)"),oOo=l(),hF=a("p"),rOo=o("The model is set in evaluation mode by default using "),gge=a("code"),tOo=o("model.eval()"),aOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),nOo=o("model.train()"),sOo=l(),F(pF.$$.fragment),APe=l(),Qi=a("h2"),uF=a("a"),pge=a("span"),F(e0.$$.fragment),lOo=l(),uge=a("span"),iOo=o("AutoModelForTableQuestionAnswering"),yPe=l(),No=a("div"),F(o0.$$.fragment),dOo=l(),Wi=a("p"),cOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GO=a("a"),fOo=o("from_pretrained()"),mOo=o(" class method or the "),OO=a("a"),gOo=o("from_config()"),hOo=o(` class
method.`),pOo=l(),r0=a("p"),uOo=o("This class cannot be instantiated directly using "),_ge=a("code"),_Oo=o("__init__()"),bOo=o(" (throws an error)."),vOo=l(),dt=a("div"),F(t0.$$.fragment),FOo=l(),bge=a("p"),TOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),MOo=l(),Hi=a("p"),EOo=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),COo=o("not"),wOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),AOo=o("from_pretrained()"),yOo=o(" to load the model weights."),LOo=l(),F(_F.$$.fragment),xOo=l(),ao=a("div"),F(a0.$$.fragment),$Oo=l(),Fge=a("p"),kOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),SOo=l(),Ra=a("p"),ROo=o("The model class to instantiate is selected based on the "),Tge=a("code"),BOo=o("model_type"),POo=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),IOo=o("pretrained_model_name_or_path"),qOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),NOo=o("pretrained_model_name_or_path"),jOo=o(":"),DOo=l(),Cge=a("ul"),bF=a("li"),wge=a("strong"),GOo=o("tapas"),OOo=o(" \u2014 "),XO=a("a"),VOo=o("TapasForQuestionAnswering"),XOo=o(" (TAPAS model)"),zOo=l(),vF=a("p"),QOo=o("The model is set in evaluation mode by default using "),Age=a("code"),WOo=o("model.eval()"),HOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=a("code"),UOo=o("model.train()"),JOo=l(),F(FF.$$.fragment),LPe=l(),Ui=a("h2"),TF=a("a"),Lge=a("span"),F(n0.$$.fragment),YOo=l(),xge=a("span"),KOo=o("AutoModelForImageClassification"),xPe=l(),jo=a("div"),F(s0.$$.fragment),ZOo=l(),Ji=a("p"),eVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zO=a("a"),oVo=o("from_pretrained()"),rVo=o(" class method or the "),QO=a("a"),tVo=o("from_config()"),aVo=o(` class
method.`),nVo=l(),l0=a("p"),sVo=o("This class cannot be instantiated directly using "),$ge=a("code"),lVo=o("__init__()"),iVo=o(" (throws an error)."),dVo=l(),ct=a("div"),F(i0.$$.fragment),cVo=l(),kge=a("p"),fVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mVo=l(),Yi=a("p"),gVo=o(`Note:
Loading a model from its configuration file does `),Sge=a("strong"),hVo=o("not"),pVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),uVo=o("from_pretrained()"),_Vo=o(" to load the model weights."),bVo=l(),F(MF.$$.fragment),vVo=l(),no=a("div"),F(d0.$$.fragment),FVo=l(),Rge=a("p"),TVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MVo=l(),Ba=a("p"),EVo=o("The model class to instantiate is selected based on the "),Bge=a("code"),CVo=o("model_type"),wVo=o(` property of the config object (either
passed as an argument or loaded from `),Pge=a("code"),AVo=o("pretrained_model_name_or_path"),yVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=a("code"),LVo=o("pretrained_model_name_or_path"),xVo=o(":"),$Vo=l(),ve=a("ul"),EF=a("li"),qge=a("strong"),kVo=o("beit"),SVo=o(" \u2014 "),HO=a("a"),RVo=o("BeitForImageClassification"),BVo=o(" (BEiT model)"),PVo=l(),CF=a("li"),Nge=a("strong"),IVo=o("convnext"),qVo=o(" \u2014 "),UO=a("a"),NVo=o("ConvNextForImageClassification"),jVo=o(" (ConvNext model)"),DVo=l(),wF=a("li"),jge=a("strong"),GVo=o("data2vec-vision"),OVo=o(" \u2014 "),JO=a("a"),VVo=o("Data2VecVisionForImageClassification"),XVo=o(" (Data2VecVision model)"),zVo=l(),$s=a("li"),Dge=a("strong"),QVo=o("deit"),WVo=o(" \u2014 "),YO=a("a"),HVo=o("DeiTForImageClassification"),UVo=o(" or "),KO=a("a"),JVo=o("DeiTForImageClassificationWithTeacher"),YVo=o(" (DeiT model)"),KVo=l(),AF=a("li"),Gge=a("strong"),ZVo=o("imagegpt"),eXo=o(" \u2014 "),ZO=a("a"),oXo=o("ImageGPTForImageClassification"),rXo=o(" (ImageGPT model)"),tXo=l(),ft=a("li"),Oge=a("strong"),aXo=o("perceiver"),nXo=o(" \u2014 "),eV=a("a"),sXo=o("PerceiverForImageClassificationLearned"),lXo=o(" or "),oV=a("a"),iXo=o("PerceiverForImageClassificationFourier"),dXo=o(" or "),rV=a("a"),cXo=o("PerceiverForImageClassificationConvProcessing"),fXo=o(" (Perceiver model)"),mXo=l(),yF=a("li"),Vge=a("strong"),gXo=o("poolformer"),hXo=o(" \u2014 "),tV=a("a"),pXo=o("PoolFormerForImageClassification"),uXo=o(" (PoolFormer model)"),_Xo=l(),LF=a("li"),Xge=a("strong"),bXo=o("regnet"),vXo=o(" \u2014 "),aV=a("a"),FXo=o("RegNetForImageClassification"),TXo=o(" (RegNet model)"),MXo=l(),xF=a("li"),zge=a("strong"),EXo=o("resnet"),CXo=o(" \u2014 "),nV=a("a"),wXo=o("ResNetForImageClassification"),AXo=o(" (ResNet model)"),yXo=l(),$F=a("li"),Qge=a("strong"),LXo=o("segformer"),xXo=o(" \u2014 "),sV=a("a"),$Xo=o("SegformerForImageClassification"),kXo=o(" (SegFormer model)"),SXo=l(),kF=a("li"),Wge=a("strong"),RXo=o("swin"),BXo=o(" \u2014 "),lV=a("a"),PXo=o("SwinForImageClassification"),IXo=o(" (Swin model)"),qXo=l(),SF=a("li"),Hge=a("strong"),NXo=o("van"),jXo=o(" \u2014 "),iV=a("a"),DXo=o("VanForImageClassification"),GXo=o(" (VAN model)"),OXo=l(),RF=a("li"),Uge=a("strong"),VXo=o("vit"),XXo=o(" \u2014 "),dV=a("a"),zXo=o("ViTForImageClassification"),QXo=o(" (ViT model)"),WXo=l(),BF=a("p"),HXo=o("The model is set in evaluation mode by default using "),Jge=a("code"),UXo=o("model.eval()"),JXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),YXo=o("model.train()"),KXo=l(),F(PF.$$.fragment),$Pe=l(),Ki=a("h2"),IF=a("a"),Kge=a("span"),F(c0.$$.fragment),ZXo=l(),Zge=a("span"),ezo=o("AutoModelForVision2Seq"),kPe=l(),Do=a("div"),F(f0.$$.fragment),ozo=l(),Zi=a("p"),rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cV=a("a"),tzo=o("from_pretrained()"),azo=o(" class method or the "),fV=a("a"),nzo=o("from_config()"),szo=o(` class
method.`),lzo=l(),m0=a("p"),izo=o("This class cannot be instantiated directly using "),ehe=a("code"),dzo=o("__init__()"),czo=o(" (throws an error)."),fzo=l(),mt=a("div"),F(g0.$$.fragment),mzo=l(),ohe=a("p"),gzo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),hzo=l(),ed=a("p"),pzo=o(`Note:
Loading a model from its configuration file does `),rhe=a("strong"),uzo=o("not"),_zo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=a("a"),bzo=o("from_pretrained()"),vzo=o(" to load the model weights."),Fzo=l(),F(qF.$$.fragment),Tzo=l(),so=a("div"),F(h0.$$.fragment),Mzo=l(),the=a("p"),Ezo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Czo=l(),Pa=a("p"),wzo=o("The model class to instantiate is selected based on the "),ahe=a("code"),Azo=o("model_type"),yzo=o(` property of the config object (either
passed as an argument or loaded from `),nhe=a("code"),Lzo=o("pretrained_model_name_or_path"),xzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=a("code"),$zo=o("pretrained_model_name_or_path"),kzo=o(":"),Szo=l(),lhe=a("ul"),NF=a("li"),ihe=a("strong"),Rzo=o("vision-encoder-decoder"),Bzo=o(" \u2014 "),gV=a("a"),Pzo=o("VisionEncoderDecoderModel"),Izo=o(" (Vision Encoder decoder model)"),qzo=l(),jF=a("p"),Nzo=o("The model is set in evaluation mode by default using "),dhe=a("code"),jzo=o("model.eval()"),Dzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=a("code"),Gzo=o("model.train()"),Ozo=l(),F(DF.$$.fragment),SPe=l(),od=a("h2"),GF=a("a"),fhe=a("span"),F(p0.$$.fragment),Vzo=l(),mhe=a("span"),Xzo=o("AutoModelForAudioClassification"),RPe=l(),Go=a("div"),F(u0.$$.fragment),zzo=l(),rd=a("p"),Qzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hV=a("a"),Wzo=o("from_pretrained()"),Hzo=o(" class method or the "),pV=a("a"),Uzo=o("from_config()"),Jzo=o(` class
method.`),Yzo=l(),_0=a("p"),Kzo=o("This class cannot be instantiated directly using "),ghe=a("code"),Zzo=o("__init__()"),eQo=o(" (throws an error)."),oQo=l(),gt=a("div"),F(b0.$$.fragment),rQo=l(),hhe=a("p"),tQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),aQo=l(),td=a("p"),nQo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),sQo=o("not"),lQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),iQo=o("from_pretrained()"),dQo=o(" to load the model weights."),cQo=l(),F(OF.$$.fragment),fQo=l(),lo=a("div"),F(v0.$$.fragment),mQo=l(),uhe=a("p"),gQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hQo=l(),Ia=a("p"),pQo=o("The model class to instantiate is selected based on the "),_he=a("code"),uQo=o("model_type"),_Qo=o(` property of the config object (either
passed as an argument or loaded from `),bhe=a("code"),bQo=o("pretrained_model_name_or_path"),vQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),FQo=o("pretrained_model_name_or_path"),TQo=o(":"),MQo=l(),je=a("ul"),VF=a("li"),Fhe=a("strong"),EQo=o("data2vec-audio"),CQo=o(" \u2014 "),_V=a("a"),wQo=o("Data2VecAudioForSequenceClassification"),AQo=o(" (Data2VecAudio model)"),yQo=l(),XF=a("li"),The=a("strong"),LQo=o("hubert"),xQo=o(" \u2014 "),bV=a("a"),$Qo=o("HubertForSequenceClassification"),kQo=o(" (Hubert model)"),SQo=l(),zF=a("li"),Mhe=a("strong"),RQo=o("sew"),BQo=o(" \u2014 "),vV=a("a"),PQo=o("SEWForSequenceClassification"),IQo=o(" (SEW model)"),qQo=l(),QF=a("li"),Ehe=a("strong"),NQo=o("sew-d"),jQo=o(" \u2014 "),FV=a("a"),DQo=o("SEWDForSequenceClassification"),GQo=o(" (SEW-D model)"),OQo=l(),WF=a("li"),Che=a("strong"),VQo=o("unispeech"),XQo=o(" \u2014 "),TV=a("a"),zQo=o("UniSpeechForSequenceClassification"),QQo=o(" (UniSpeech model)"),WQo=l(),HF=a("li"),whe=a("strong"),HQo=o("unispeech-sat"),UQo=o(" \u2014 "),MV=a("a"),JQo=o("UniSpeechSatForSequenceClassification"),YQo=o(" (UniSpeechSat model)"),KQo=l(),UF=a("li"),Ahe=a("strong"),ZQo=o("wav2vec2"),eWo=o(" \u2014 "),EV=a("a"),oWo=o("Wav2Vec2ForSequenceClassification"),rWo=o(" (Wav2Vec2 model)"),tWo=l(),JF=a("li"),yhe=a("strong"),aWo=o("wavlm"),nWo=o(" \u2014 "),CV=a("a"),sWo=o("WavLMForSequenceClassification"),lWo=o(" (WavLM model)"),iWo=l(),YF=a("p"),dWo=o("The model is set in evaluation mode by default using "),Lhe=a("code"),cWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=a("code"),mWo=o("model.train()"),gWo=l(),F(KF.$$.fragment),BPe=l(),ad=a("h2"),ZF=a("a"),$he=a("span"),F(F0.$$.fragment),hWo=l(),khe=a("span"),pWo=o("AutoModelForAudioFrameClassification"),PPe=l(),Oo=a("div"),F(T0.$$.fragment),uWo=l(),nd=a("p"),_Wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wV=a("a"),bWo=o("from_pretrained()"),vWo=o(" class method or the "),AV=a("a"),FWo=o("from_config()"),TWo=o(` class
method.`),MWo=l(),M0=a("p"),EWo=o("This class cannot be instantiated directly using "),She=a("code"),CWo=o("__init__()"),wWo=o(" (throws an error)."),AWo=l(),ht=a("div"),F(E0.$$.fragment),yWo=l(),Rhe=a("p"),LWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xWo=l(),sd=a("p"),$Wo=o(`Note:
Loading a model from its configuration file does `),Bhe=a("strong"),kWo=o("not"),SWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),RWo=o("from_pretrained()"),BWo=o(" to load the model weights."),PWo=l(),F(e6.$$.fragment),IWo=l(),io=a("div"),F(C0.$$.fragment),qWo=l(),Phe=a("p"),NWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),jWo=l(),qa=a("p"),DWo=o("The model class to instantiate is selected based on the "),Ihe=a("code"),GWo=o("model_type"),OWo=o(` property of the config object (either
passed as an argument or loaded from `),qhe=a("code"),VWo=o("pretrained_model_name_or_path"),XWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=a("code"),zWo=o("pretrained_model_name_or_path"),QWo=o(":"),WWo=l(),Na=a("ul"),o6=a("li"),jhe=a("strong"),HWo=o("data2vec-audio"),UWo=o(" \u2014 "),LV=a("a"),JWo=o("Data2VecAudioForAudioFrameClassification"),YWo=o(" (Data2VecAudio model)"),KWo=l(),r6=a("li"),Dhe=a("strong"),ZWo=o("unispeech-sat"),eHo=o(" \u2014 "),xV=a("a"),oHo=o("UniSpeechSatForAudioFrameClassification"),rHo=o(" (UniSpeechSat model)"),tHo=l(),t6=a("li"),Ghe=a("strong"),aHo=o("wav2vec2"),nHo=o(" \u2014 "),$V=a("a"),sHo=o("Wav2Vec2ForAudioFrameClassification"),lHo=o(" (Wav2Vec2 model)"),iHo=l(),a6=a("li"),Ohe=a("strong"),dHo=o("wavlm"),cHo=o(" \u2014 "),kV=a("a"),fHo=o("WavLMForAudioFrameClassification"),mHo=o(" (WavLM model)"),gHo=l(),n6=a("p"),hHo=o("The model is set in evaluation mode by default using "),Vhe=a("code"),pHo=o("model.eval()"),uHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=a("code"),_Ho=o("model.train()"),bHo=l(),F(s6.$$.fragment),IPe=l(),ld=a("h2"),l6=a("a"),zhe=a("span"),F(w0.$$.fragment),vHo=l(),Qhe=a("span"),FHo=o("AutoModelForCTC"),qPe=l(),Vo=a("div"),F(A0.$$.fragment),THo=l(),id=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SV=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),RV=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),y0=a("p"),LHo=o("This class cannot be instantiated directly using "),Whe=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),pt=a("div"),F(L0.$$.fragment),SHo=l(),Hhe=a("p"),RHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),BHo=l(),dd=a("p"),PHo=o(`Note:
Loading a model from its configuration file does `),Uhe=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),F(i6.$$.fragment),GHo=l(),co=a("div"),F(x0.$$.fragment),OHo=l(),Jhe=a("p"),VHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),XHo=l(),ja=a("p"),zHo=o("The model class to instantiate is selected based on the "),Yhe=a("code"),QHo=o("model_type"),WHo=o(` property of the config object (either
passed as an argument or loaded from `),Khe=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),De=a("ul"),d6=a("li"),epe=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),PV=a("a"),oUo=o("Data2VecAudioForCTC"),rUo=o(" (Data2VecAudio model)"),tUo=l(),c6=a("li"),ope=a("strong"),aUo=o("hubert"),nUo=o(" \u2014 "),IV=a("a"),sUo=o("HubertForCTC"),lUo=o(" (Hubert model)"),iUo=l(),f6=a("li"),rpe=a("strong"),dUo=o("sew"),cUo=o(" \u2014 "),qV=a("a"),fUo=o("SEWForCTC"),mUo=o(" (SEW model)"),gUo=l(),m6=a("li"),tpe=a("strong"),hUo=o("sew-d"),pUo=o(" \u2014 "),NV=a("a"),uUo=o("SEWDForCTC"),_Uo=o(" (SEW-D model)"),bUo=l(),g6=a("li"),ape=a("strong"),vUo=o("unispeech"),FUo=o(" \u2014 "),jV=a("a"),TUo=o("UniSpeechForCTC"),MUo=o(" (UniSpeech model)"),EUo=l(),h6=a("li"),npe=a("strong"),CUo=o("unispeech-sat"),wUo=o(" \u2014 "),DV=a("a"),AUo=o("UniSpeechSatForCTC"),yUo=o(" (UniSpeechSat model)"),LUo=l(),p6=a("li"),spe=a("strong"),xUo=o("wav2vec2"),$Uo=o(" \u2014 "),GV=a("a"),kUo=o("Wav2Vec2ForCTC"),SUo=o(" (Wav2Vec2 model)"),RUo=l(),u6=a("li"),lpe=a("strong"),BUo=o("wavlm"),PUo=o(" \u2014 "),OV=a("a"),IUo=o("WavLMForCTC"),qUo=o(" (WavLM model)"),NUo=l(),_6=a("p"),jUo=o("The model is set in evaluation mode by default using "),ipe=a("code"),DUo=o("model.eval()"),GUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=a("code"),OUo=o("model.train()"),VUo=l(),F(b6.$$.fragment),NPe=l(),cd=a("h2"),v6=a("a"),cpe=a("span"),F($0.$$.fragment),XUo=l(),fpe=a("span"),zUo=o("AutoModelForSpeechSeq2Seq"),jPe=l(),Xo=a("div"),F(k0.$$.fragment),QUo=l(),fd=a("p"),WUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VV=a("a"),HUo=o("from_pretrained()"),UUo=o(" class method or the "),XV=a("a"),JUo=o("from_config()"),YUo=o(` class
method.`),KUo=l(),S0=a("p"),ZUo=o("This class cannot be instantiated directly using "),mpe=a("code"),eJo=o("__init__()"),oJo=o(" (throws an error)."),rJo=l(),ut=a("div"),F(R0.$$.fragment),tJo=l(),gpe=a("p"),aJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nJo=l(),md=a("p"),sJo=o(`Note:
Loading a model from its configuration file does `),hpe=a("strong"),lJo=o("not"),iJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),dJo=o("from_pretrained()"),cJo=o(" to load the model weights."),fJo=l(),F(F6.$$.fragment),mJo=l(),fo=a("div"),F(B0.$$.fragment),gJo=l(),ppe=a("p"),hJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pJo=l(),Da=a("p"),uJo=o("The model class to instantiate is selected based on the "),upe=a("code"),_Jo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),_pe=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),P0=a("ul"),T6=a("li"),vpe=a("strong"),CJo=o("speech-encoder-decoder"),wJo=o(" \u2014 "),QV=a("a"),AJo=o("SpeechEncoderDecoderModel"),yJo=o(" (Speech Encoder decoder model)"),LJo=l(),M6=a("li"),Fpe=a("strong"),xJo=o("speech_to_text"),$Jo=o(" \u2014 "),WV=a("a"),kJo=o("Speech2TextForConditionalGeneration"),SJo=o(" (Speech2Text model)"),RJo=l(),E6=a("p"),BJo=o("The model is set in evaluation mode by default using "),Tpe=a("code"),PJo=o("model.eval()"),IJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=a("code"),qJo=o("model.train()"),NJo=l(),F(C6.$$.fragment),DPe=l(),gd=a("h2"),w6=a("a"),Epe=a("span"),F(I0.$$.fragment),jJo=l(),Cpe=a("span"),DJo=o("AutoModelForAudioXVector"),GPe=l(),zo=a("div"),F(q0.$$.fragment),GJo=l(),hd=a("p"),OJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),HV=a("a"),VJo=o("from_pretrained()"),XJo=o(" class method or the "),UV=a("a"),zJo=o("from_config()"),QJo=o(` class
method.`),WJo=l(),N0=a("p"),HJo=o("This class cannot be instantiated directly using "),wpe=a("code"),UJo=o("__init__()"),JJo=o(" (throws an error)."),YJo=l(),_t=a("div"),F(j0.$$.fragment),KJo=l(),Ape=a("p"),ZJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eYo=l(),pd=a("p"),oYo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),rYo=o("not"),tYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=a("a"),aYo=o("from_pretrained()"),nYo=o(" to load the model weights."),sYo=l(),F(A6.$$.fragment),lYo=l(),mo=a("div"),F(D0.$$.fragment),iYo=l(),Lpe=a("p"),dYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cYo=l(),Ga=a("p"),fYo=o("The model class to instantiate is selected based on the "),xpe=a("code"),mYo=o("model_type"),gYo=o(` property of the config object (either
passed as an argument or loaded from `),$pe=a("code"),hYo=o("pretrained_model_name_or_path"),pYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=a("code"),uYo=o("pretrained_model_name_or_path"),_Yo=o(":"),bYo=l(),Oa=a("ul"),y6=a("li"),Spe=a("strong"),vYo=o("data2vec-audio"),FYo=o(" \u2014 "),YV=a("a"),TYo=o("Data2VecAudioForXVector"),MYo=o(" (Data2VecAudio model)"),EYo=l(),L6=a("li"),Rpe=a("strong"),CYo=o("unispeech-sat"),wYo=o(" \u2014 "),KV=a("a"),AYo=o("UniSpeechSatForXVector"),yYo=o(" (UniSpeechSat model)"),LYo=l(),x6=a("li"),Bpe=a("strong"),xYo=o("wav2vec2"),$Yo=o(" \u2014 "),ZV=a("a"),kYo=o("Wav2Vec2ForXVector"),SYo=o(" (Wav2Vec2 model)"),RYo=l(),$6=a("li"),Ppe=a("strong"),BYo=o("wavlm"),PYo=o(" \u2014 "),eX=a("a"),IYo=o("WavLMForXVector"),qYo=o(" (WavLM model)"),NYo=l(),k6=a("p"),jYo=o("The model is set in evaluation mode by default using "),Ipe=a("code"),DYo=o("model.eval()"),GYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=a("code"),OYo=o("model.train()"),VYo=l(),F(S6.$$.fragment),OPe=l(),ud=a("h2"),R6=a("a"),Npe=a("span"),F(G0.$$.fragment),XYo=l(),jpe=a("span"),zYo=o("AutoModelForMaskedImageModeling"),VPe=l(),Qo=a("div"),F(O0.$$.fragment),QYo=l(),_d=a("p"),WYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oX=a("a"),HYo=o("from_pretrained()"),UYo=o(" class method or the "),rX=a("a"),JYo=o("from_config()"),YYo=o(` class
method.`),KYo=l(),V0=a("p"),ZYo=o("This class cannot be instantiated directly using "),Dpe=a("code"),eKo=o("__init__()"),oKo=o(" (throws an error)."),rKo=l(),bt=a("div"),F(X0.$$.fragment),tKo=l(),Gpe=a("p"),aKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),nKo=l(),bd=a("p"),sKo=o(`Note:
Loading a model from its configuration file does `),Ope=a("strong"),lKo=o("not"),iKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=a("a"),dKo=o("from_pretrained()"),cKo=o(" to load the model weights."),fKo=l(),F(B6.$$.fragment),mKo=l(),go=a("div"),F(z0.$$.fragment),gKo=l(),Vpe=a("p"),hKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pKo=l(),Va=a("p"),uKo=o("The model class to instantiate is selected based on the "),Xpe=a("code"),_Ko=o("model_type"),bKo=o(` property of the config object (either
passed as an argument or loaded from `),zpe=a("code"),vKo=o("pretrained_model_name_or_path"),FKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=a("code"),TKo=o("pretrained_model_name_or_path"),MKo=o(":"),EKo=l(),vd=a("ul"),P6=a("li"),Wpe=a("strong"),CKo=o("deit"),wKo=o(" \u2014 "),aX=a("a"),AKo=o("DeiTForMaskedImageModeling"),yKo=o(" (DeiT model)"),LKo=l(),I6=a("li"),Hpe=a("strong"),xKo=o("swin"),$Ko=o(" \u2014 "),nX=a("a"),kKo=o("SwinForMaskedImageModeling"),SKo=o(" (Swin model)"),RKo=l(),q6=a("li"),Upe=a("strong"),BKo=o("vit"),PKo=o(" \u2014 "),sX=a("a"),IKo=o("ViTForMaskedImageModeling"),qKo=o(" (ViT model)"),NKo=l(),N6=a("p"),jKo=o("The model is set in evaluation mode by default using "),Jpe=a("code"),DKo=o("model.eval()"),GKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=a("code"),OKo=o("model.train()"),VKo=l(),F(j6.$$.fragment),XPe=l(),Fd=a("h2"),D6=a("a"),Kpe=a("span"),F(Q0.$$.fragment),XKo=l(),Zpe=a("span"),zKo=o("AutoModelForObjectDetection"),zPe=l(),Wo=a("div"),F(W0.$$.fragment),QKo=l(),Td=a("p"),WKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lX=a("a"),HKo=o("from_pretrained()"),UKo=o(" class method or the "),iX=a("a"),JKo=o("from_config()"),YKo=o(` class
method.`),KKo=l(),H0=a("p"),ZKo=o("This class cannot be instantiated directly using "),eue=a("code"),eZo=o("__init__()"),oZo=o(" (throws an error)."),rZo=l(),vt=a("div"),F(U0.$$.fragment),tZo=l(),oue=a("p"),aZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nZo=l(),Md=a("p"),sZo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),lZo=o("not"),iZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),dZo=o("from_pretrained()"),cZo=o(" to load the model weights."),fZo=l(),F(G6.$$.fragment),mZo=l(),ho=a("div"),F(J0.$$.fragment),gZo=l(),tue=a("p"),hZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),pZo=l(),Xa=a("p"),uZo=o("The model class to instantiate is selected based on the "),aue=a("code"),_Zo=o("model_type"),bZo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),vZo=o("pretrained_model_name_or_path"),FZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),TZo=o("pretrained_model_name_or_path"),MZo=o(":"),EZo=l(),Y0=a("ul"),O6=a("li"),lue=a("strong"),CZo=o("detr"),wZo=o(" \u2014 "),cX=a("a"),AZo=o("DetrForObjectDetection"),yZo=o(" (DETR model)"),LZo=l(),V6=a("li"),iue=a("strong"),xZo=o("yolos"),$Zo=o(" \u2014 "),fX=a("a"),kZo=o("YolosForObjectDetection"),SZo=o(" (YOLOS model)"),RZo=l(),X6=a("p"),BZo=o("The model is set in evaluation mode by default using "),due=a("code"),PZo=o("model.eval()"),IZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),qZo=o("model.train()"),NZo=l(),F(z6.$$.fragment),QPe=l(),Ed=a("h2"),Q6=a("a"),fue=a("span"),F(K0.$$.fragment),jZo=l(),mue=a("span"),DZo=o("AutoModelForImageSegmentation"),WPe=l(),Ho=a("div"),F(Z0.$$.fragment),GZo=l(),Cd=a("p"),OZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mX=a("a"),VZo=o("from_pretrained()"),XZo=o(" class method or the "),gX=a("a"),zZo=o("from_config()"),QZo=o(` class
method.`),WZo=l(),ey=a("p"),HZo=o("This class cannot be instantiated directly using "),gue=a("code"),UZo=o("__init__()"),JZo=o(" (throws an error)."),YZo=l(),Ft=a("div"),F(oy.$$.fragment),KZo=l(),hue=a("p"),ZZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),eer=l(),wd=a("p"),oer=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),rer=o("not"),ter=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=a("a"),aer=o("from_pretrained()"),ner=o(" to load the model weights."),ser=l(),F(W6.$$.fragment),ler=l(),po=a("div"),F(ry.$$.fragment),ier=l(),uue=a("p"),der=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),cer=l(),za=a("p"),fer=o("The model class to instantiate is selected based on the "),_ue=a("code"),mer=o("model_type"),ger=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),her=o("pretrained_model_name_or_path"),per=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),uer=o("pretrained_model_name_or_path"),_er=o(":"),ber=l(),Fue=a("ul"),H6=a("li"),Tue=a("strong"),ver=o("detr"),Fer=o(" \u2014 "),pX=a("a"),Ter=o("DetrForSegmentation"),Mer=o(" (DETR model)"),Eer=l(),U6=a("p"),Cer=o("The model is set in evaluation mode by default using "),Mue=a("code"),wer=o("model.eval()"),Aer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=a("code"),yer=o("model.train()"),Ler=l(),F(J6.$$.fragment),HPe=l(),Ad=a("h2"),Y6=a("a"),Cue=a("span"),F(ty.$$.fragment),xer=l(),wue=a("span"),$er=o("AutoModelForSemanticSegmentation"),UPe=l(),Uo=a("div"),F(ay.$$.fragment),ker=l(),yd=a("p"),Ser=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uX=a("a"),Rer=o("from_pretrained()"),Ber=o(" class method or the "),_X=a("a"),Per=o("from_config()"),Ier=o(` class
method.`),qer=l(),ny=a("p"),Ner=o("This class cannot be instantiated directly using "),Aue=a("code"),jer=o("__init__()"),Der=o(" (throws an error)."),Ger=l(),Tt=a("div"),F(sy.$$.fragment),Oer=l(),yue=a("p"),Ver=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Xer=l(),Ld=a("p"),zer=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Qer=o("not"),Wer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),Her=o("from_pretrained()"),Uer=o(" to load the model weights."),Jer=l(),F(K6.$$.fragment),Yer=l(),uo=a("div"),F(ly.$$.fragment),Ker=l(),xue=a("p"),Zer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eor=l(),Qa=a("p"),oor=o("The model class to instantiate is selected based on the "),$ue=a("code"),ror=o("model_type"),tor=o(` property of the config object (either
passed as an argument or loaded from `),kue=a("code"),aor=o("pretrained_model_name_or_path"),nor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=a("code"),sor=o("pretrained_model_name_or_path"),lor=o(":"),ior=l(),Wa=a("ul"),Z6=a("li"),Rue=a("strong"),dor=o("beit"),cor=o(" \u2014 "),vX=a("a"),mor=o("BeitForSemanticSegmentation"),gor=o(" (BEiT model)"),hor=l(),eT=a("li"),Bue=a("strong"),por=o("data2vec-vision"),uor=o(" \u2014 "),FX=a("a"),_or=o("Data2VecVisionForSemanticSegmentation"),bor=o(" (Data2VecVision model)"),vor=l(),oT=a("li"),Pue=a("strong"),For=o("dpt"),Tor=o(" \u2014 "),TX=a("a"),Mor=o("DPTForSemanticSegmentation"),Eor=o(" (DPT model)"),Cor=l(),rT=a("li"),Iue=a("strong"),wor=o("segformer"),Aor=o(" \u2014 "),MX=a("a"),yor=o("SegformerForSemanticSegmentation"),Lor=o(" (SegFormer model)"),xor=l(),tT=a("p"),$or=o("The model is set in evaluation mode by default using "),que=a("code"),kor=o("model.eval()"),Sor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=a("code"),Ror=o("model.train()"),Bor=l(),F(aT.$$.fragment),JPe=l(),xd=a("h2"),nT=a("a"),jue=a("span"),F(iy.$$.fragment),Por=l(),Due=a("span"),Ior=o("AutoModelForInstanceSegmentation"),YPe=l(),Jo=a("div"),F(dy.$$.fragment),qor=l(),$d=a("p"),Nor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EX=a("a"),jor=o("from_pretrained()"),Dor=o(" class method or the "),CX=a("a"),Gor=o("from_config()"),Oor=o(` class
method.`),Vor=l(),cy=a("p"),Xor=o("This class cannot be instantiated directly using "),Gue=a("code"),zor=o("__init__()"),Qor=o(" (throws an error)."),Wor=l(),Mt=a("div"),F(fy.$$.fragment),Hor=l(),Oue=a("p"),Uor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Jor=l(),kd=a("p"),Yor=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),Kor=o("not"),Zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=a("a"),err=o("from_pretrained()"),orr=o(" to load the model weights."),rrr=l(),F(sT.$$.fragment),trr=l(),_o=a("div"),F(my.$$.fragment),arr=l(),Xue=a("p"),nrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),srr=l(),Ha=a("p"),lrr=o("The model class to instantiate is selected based on the "),zue=a("code"),irr=o("model_type"),drr=o(` property of the config object (either
passed as an argument or loaded from `),Que=a("code"),crr=o("pretrained_model_name_or_path"),frr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),mrr=o("pretrained_model_name_or_path"),grr=o(":"),hrr=l(),Hue=a("ul"),lT=a("li"),Uue=a("strong"),prr=o("maskformer"),urr=o(" \u2014 "),AX=a("a"),_rr=o("MaskFormerForInstanceSegmentation"),brr=o(" (MaskFormer model)"),vrr=l(),iT=a("p"),Frr=o("The model is set in evaluation mode by default using "),Jue=a("code"),Trr=o("model.eval()"),Mrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=a("code"),Err=o("model.train()"),Crr=l(),F(dT.$$.fragment),KPe=l(),Sd=a("h2"),cT=a("a"),Kue=a("span"),F(gy.$$.fragment),wrr=l(),Zue=a("span"),Arr=o("TFAutoModel"),ZPe=l(),Yo=a("div"),F(hy.$$.fragment),yrr=l(),Rd=a("p"),Lrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yX=a("a"),xrr=o("from_pretrained()"),$rr=o(" class method or the "),LX=a("a"),krr=o("from_config()"),Srr=o(` class
method.`),Rrr=l(),py=a("p"),Brr=o("This class cannot be instantiated directly using "),e_e=a("code"),Prr=o("__init__()"),Irr=o(" (throws an error)."),qrr=l(),Et=a("div"),F(uy.$$.fragment),Nrr=l(),o_e=a("p"),jrr=o("Instantiates one of the base model classes of the library from a configuration."),Drr=l(),Bd=a("p"),Grr=o(`Note:
Loading a model from its configuration file does `),r_e=a("strong"),Orr=o("not"),Vrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=a("a"),Xrr=o("from_pretrained()"),zrr=o(" to load the model weights."),Qrr=l(),F(fT.$$.fragment),Wrr=l(),Cr=a("div"),F(_y.$$.fragment),Hrr=l(),t_e=a("p"),Urr=o("Instantiate one of the base model classes of the library from a pretrained model."),Jrr=l(),Ua=a("p"),Yrr=o("The model class to instantiate is selected based on the "),a_e=a("code"),Krr=o("model_type"),Zrr=o(` property of the config object (either
passed as an argument or loaded from `),n_e=a("code"),etr=o("pretrained_model_name_or_path"),otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=a("code"),rtr=o("pretrained_model_name_or_path"),ttr=o(":"),atr=l(),j=a("ul"),mT=a("li"),l_e=a("strong"),ntr=o("albert"),str=o(" \u2014 "),$X=a("a"),ltr=o("TFAlbertModel"),itr=o(" (ALBERT model)"),dtr=l(),gT=a("li"),i_e=a("strong"),ctr=o("bart"),ftr=o(" \u2014 "),kX=a("a"),mtr=o("TFBartModel"),gtr=o(" (BART model)"),htr=l(),hT=a("li"),d_e=a("strong"),ptr=o("bert"),utr=o(" \u2014 "),SX=a("a"),_tr=o("TFBertModel"),btr=o(" (BERT model)"),vtr=l(),pT=a("li"),c_e=a("strong"),Ftr=o("blenderbot"),Ttr=o(" \u2014 "),RX=a("a"),Mtr=o("TFBlenderbotModel"),Etr=o(" (Blenderbot model)"),Ctr=l(),uT=a("li"),f_e=a("strong"),wtr=o("blenderbot-small"),Atr=o(" \u2014 "),BX=a("a"),ytr=o("TFBlenderbotSmallModel"),Ltr=o(" (BlenderbotSmall model)"),xtr=l(),_T=a("li"),m_e=a("strong"),$tr=o("camembert"),ktr=o(" \u2014 "),PX=a("a"),Str=o("TFCamembertModel"),Rtr=o(" (CamemBERT model)"),Btr=l(),bT=a("li"),g_e=a("strong"),Ptr=o("clip"),Itr=o(" \u2014 "),IX=a("a"),qtr=o("TFCLIPModel"),Ntr=o(" (CLIP model)"),jtr=l(),vT=a("li"),h_e=a("strong"),Dtr=o("convbert"),Gtr=o(" \u2014 "),qX=a("a"),Otr=o("TFConvBertModel"),Vtr=o(" (ConvBERT model)"),Xtr=l(),FT=a("li"),p_e=a("strong"),ztr=o("convnext"),Qtr=o(" \u2014 "),NX=a("a"),Wtr=o("TFConvNextModel"),Htr=o(" (ConvNext model)"),Utr=l(),TT=a("li"),u_e=a("strong"),Jtr=o("ctrl"),Ytr=o(" \u2014 "),jX=a("a"),Ktr=o("TFCTRLModel"),Ztr=o(" (CTRL model)"),ear=l(),MT=a("li"),__e=a("strong"),oar=o("data2vec-vision"),rar=o(" \u2014 "),DX=a("a"),tar=o("TFData2VecVisionModel"),aar=o(" (Data2VecVision model)"),nar=l(),ET=a("li"),b_e=a("strong"),sar=o("deberta"),lar=o(" \u2014 "),GX=a("a"),iar=o("TFDebertaModel"),dar=o(" (DeBERTa model)"),car=l(),CT=a("li"),v_e=a("strong"),far=o("deberta-v2"),mar=o(" \u2014 "),OX=a("a"),gar=o("TFDebertaV2Model"),har=o(" (DeBERTa-v2 model)"),par=l(),wT=a("li"),F_e=a("strong"),uar=o("distilbert"),_ar=o(" \u2014 "),VX=a("a"),bar=o("TFDistilBertModel"),Far=o(" (DistilBERT model)"),Tar=l(),AT=a("li"),T_e=a("strong"),Mar=o("dpr"),Ear=o(" \u2014 "),XX=a("a"),Car=o("TFDPRQuestionEncoder"),war=o(" (DPR model)"),Aar=l(),yT=a("li"),M_e=a("strong"),yar=o("electra"),Lar=o(" \u2014 "),zX=a("a"),xar=o("TFElectraModel"),$ar=o(" (ELECTRA model)"),kar=l(),LT=a("li"),E_e=a("strong"),Sar=o("flaubert"),Rar=o(" \u2014 "),QX=a("a"),Bar=o("TFFlaubertModel"),Par=o(" (FlauBERT model)"),Iar=l(),ks=a("li"),C_e=a("strong"),qar=o("funnel"),Nar=o(" \u2014 "),WX=a("a"),jar=o("TFFunnelModel"),Dar=o(" or "),HX=a("a"),Gar=o("TFFunnelBaseModel"),Oar=o(" (Funnel Transformer model)"),Var=l(),xT=a("li"),w_e=a("strong"),Xar=o("gpt2"),zar=o(" \u2014 "),UX=a("a"),Qar=o("TFGPT2Model"),War=o(" (OpenAI GPT-2 model)"),Har=l(),$T=a("li"),A_e=a("strong"),Uar=o("gptj"),Jar=o(" \u2014 "),JX=a("a"),Yar=o("TFGPTJModel"),Kar=o(" (GPT-J model)"),Zar=l(),kT=a("li"),y_e=a("strong"),enr=o("hubert"),onr=o(" \u2014 "),YX=a("a"),rnr=o("TFHubertModel"),tnr=o(" (Hubert model)"),anr=l(),ST=a("li"),L_e=a("strong"),nnr=o("layoutlm"),snr=o(" \u2014 "),KX=a("a"),lnr=o("TFLayoutLMModel"),inr=o(" (LayoutLM model)"),dnr=l(),RT=a("li"),x_e=a("strong"),cnr=o("led"),fnr=o(" \u2014 "),ZX=a("a"),mnr=o("TFLEDModel"),gnr=o(" (LED model)"),hnr=l(),BT=a("li"),$_e=a("strong"),pnr=o("longformer"),unr=o(" \u2014 "),ez=a("a"),_nr=o("TFLongformerModel"),bnr=o(" (Longformer model)"),vnr=l(),PT=a("li"),k_e=a("strong"),Fnr=o("lxmert"),Tnr=o(" \u2014 "),oz=a("a"),Mnr=o("TFLxmertModel"),Enr=o(" (LXMERT model)"),Cnr=l(),IT=a("li"),S_e=a("strong"),wnr=o("marian"),Anr=o(" \u2014 "),rz=a("a"),ynr=o("TFMarianModel"),Lnr=o(" (Marian model)"),xnr=l(),qT=a("li"),R_e=a("strong"),$nr=o("mbart"),knr=o(" \u2014 "),tz=a("a"),Snr=o("TFMBartModel"),Rnr=o(" (mBART model)"),Bnr=l(),NT=a("li"),B_e=a("strong"),Pnr=o("mobilebert"),Inr=o(" \u2014 "),az=a("a"),qnr=o("TFMobileBertModel"),Nnr=o(" (MobileBERT model)"),jnr=l(),jT=a("li"),P_e=a("strong"),Dnr=o("mpnet"),Gnr=o(" \u2014 "),nz=a("a"),Onr=o("TFMPNetModel"),Vnr=o(" (MPNet model)"),Xnr=l(),DT=a("li"),I_e=a("strong"),znr=o("mt5"),Qnr=o(" \u2014 "),sz=a("a"),Wnr=o("TFMT5Model"),Hnr=o(" (mT5 model)"),Unr=l(),GT=a("li"),q_e=a("strong"),Jnr=o("openai-gpt"),Ynr=o(" \u2014 "),lz=a("a"),Knr=o("TFOpenAIGPTModel"),Znr=o(" (OpenAI GPT model)"),esr=l(),OT=a("li"),N_e=a("strong"),osr=o("pegasus"),rsr=o(" \u2014 "),iz=a("a"),tsr=o("TFPegasusModel"),asr=o(" (Pegasus model)"),nsr=l(),VT=a("li"),j_e=a("strong"),ssr=o("rembert"),lsr=o(" \u2014 "),dz=a("a"),isr=o("TFRemBertModel"),dsr=o(" (RemBERT model)"),csr=l(),XT=a("li"),D_e=a("strong"),fsr=o("roberta"),msr=o(" \u2014 "),cz=a("a"),gsr=o("TFRobertaModel"),hsr=o(" (RoBERTa model)"),psr=l(),zT=a("li"),G_e=a("strong"),usr=o("roformer"),_sr=o(" \u2014 "),fz=a("a"),bsr=o("TFRoFormerModel"),vsr=o(" (RoFormer model)"),Fsr=l(),QT=a("li"),O_e=a("strong"),Tsr=o("speech_to_text"),Msr=o(" \u2014 "),mz=a("a"),Esr=o("TFSpeech2TextModel"),Csr=o(" (Speech2Text model)"),wsr=l(),WT=a("li"),V_e=a("strong"),Asr=o("t5"),ysr=o(" \u2014 "),gz=a("a"),Lsr=o("TFT5Model"),xsr=o(" (T5 model)"),$sr=l(),HT=a("li"),X_e=a("strong"),ksr=o("tapas"),Ssr=o(" \u2014 "),hz=a("a"),Rsr=o("TFTapasModel"),Bsr=o(" (TAPAS model)"),Psr=l(),UT=a("li"),z_e=a("strong"),Isr=o("transfo-xl"),qsr=o(" \u2014 "),pz=a("a"),Nsr=o("TFTransfoXLModel"),jsr=o(" (Transformer-XL model)"),Dsr=l(),JT=a("li"),Q_e=a("strong"),Gsr=o("vit"),Osr=o(" \u2014 "),uz=a("a"),Vsr=o("TFViTModel"),Xsr=o(" (ViT model)"),zsr=l(),YT=a("li"),W_e=a("strong"),Qsr=o("vit_mae"),Wsr=o(" \u2014 "),_z=a("a"),Hsr=o("TFViTMAEModel"),Usr=o(" (ViTMAE model)"),Jsr=l(),KT=a("li"),H_e=a("strong"),Ysr=o("wav2vec2"),Ksr=o(" \u2014 "),bz=a("a"),Zsr=o("TFWav2Vec2Model"),elr=o(" (Wav2Vec2 model)"),olr=l(),ZT=a("li"),U_e=a("strong"),rlr=o("xlm"),tlr=o(" \u2014 "),vz=a("a"),alr=o("TFXLMModel"),nlr=o(" (XLM model)"),slr=l(),e7=a("li"),J_e=a("strong"),llr=o("xlm-roberta"),ilr=o(" \u2014 "),Fz=a("a"),dlr=o("TFXLMRobertaModel"),clr=o(" (XLM-RoBERTa model)"),flr=l(),o7=a("li"),Y_e=a("strong"),mlr=o("xlnet"),glr=o(" \u2014 "),Tz=a("a"),hlr=o("TFXLNetModel"),plr=o(" (XLNet model)"),ulr=l(),F(r7.$$.fragment),eIe=l(),Pd=a("h2"),t7=a("a"),K_e=a("span"),F(by.$$.fragment),_lr=l(),Z_e=a("span"),blr=o("TFAutoModelForPreTraining"),oIe=l(),Ko=a("div"),F(vy.$$.fragment),vlr=l(),Id=a("p"),Flr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mz=a("a"),Tlr=o("from_pretrained()"),Mlr=o(" class method or the "),Ez=a("a"),Elr=o("from_config()"),Clr=o(` class
method.`),wlr=l(),Fy=a("p"),Alr=o("This class cannot be instantiated directly using "),e2e=a("code"),ylr=o("__init__()"),Llr=o(" (throws an error)."),xlr=l(),Ct=a("div"),F(Ty.$$.fragment),$lr=l(),o2e=a("p"),klr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Slr=l(),qd=a("p"),Rlr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),Blr=o("not"),Plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Ilr=o("from_pretrained()"),qlr=o(" to load the model weights."),Nlr=l(),F(a7.$$.fragment),jlr=l(),wr=a("div"),F(My.$$.fragment),Dlr=l(),t2e=a("p"),Glr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Olr=l(),Ja=a("p"),Vlr=o("The model class to instantiate is selected based on the "),a2e=a("code"),Xlr=o("model_type"),zlr=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),Qlr=o("pretrained_model_name_or_path"),Wlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),Hlr=o("pretrained_model_name_or_path"),Ulr=o(":"),Jlr=l(),ne=a("ul"),n7=a("li"),l2e=a("strong"),Ylr=o("albert"),Klr=o(" \u2014 "),wz=a("a"),Zlr=o("TFAlbertForPreTraining"),eir=o(" (ALBERT model)"),oir=l(),s7=a("li"),i2e=a("strong"),rir=o("bart"),tir=o(" \u2014 "),Az=a("a"),air=o("TFBartForConditionalGeneration"),nir=o(" (BART model)"),sir=l(),l7=a("li"),d2e=a("strong"),lir=o("bert"),iir=o(" \u2014 "),yz=a("a"),dir=o("TFBertForPreTraining"),cir=o(" (BERT model)"),fir=l(),i7=a("li"),c2e=a("strong"),mir=o("camembert"),gir=o(" \u2014 "),Lz=a("a"),hir=o("TFCamembertForMaskedLM"),pir=o(" (CamemBERT model)"),uir=l(),d7=a("li"),f2e=a("strong"),_ir=o("ctrl"),bir=o(" \u2014 "),xz=a("a"),vir=o("TFCTRLLMHeadModel"),Fir=o(" (CTRL model)"),Tir=l(),c7=a("li"),m2e=a("strong"),Mir=o("distilbert"),Eir=o(" \u2014 "),$z=a("a"),Cir=o("TFDistilBertForMaskedLM"),wir=o(" (DistilBERT model)"),Air=l(),f7=a("li"),g2e=a("strong"),yir=o("electra"),Lir=o(" \u2014 "),kz=a("a"),xir=o("TFElectraForPreTraining"),$ir=o(" (ELECTRA model)"),kir=l(),m7=a("li"),h2e=a("strong"),Sir=o("flaubert"),Rir=o(" \u2014 "),Sz=a("a"),Bir=o("TFFlaubertWithLMHeadModel"),Pir=o(" (FlauBERT model)"),Iir=l(),g7=a("li"),p2e=a("strong"),qir=o("funnel"),Nir=o(" \u2014 "),Rz=a("a"),jir=o("TFFunnelForPreTraining"),Dir=o(" (Funnel Transformer model)"),Gir=l(),h7=a("li"),u2e=a("strong"),Oir=o("gpt2"),Vir=o(" \u2014 "),Bz=a("a"),Xir=o("TFGPT2LMHeadModel"),zir=o(" (OpenAI GPT-2 model)"),Qir=l(),p7=a("li"),_2e=a("strong"),Wir=o("layoutlm"),Hir=o(" \u2014 "),Pz=a("a"),Uir=o("TFLayoutLMForMaskedLM"),Jir=o(" (LayoutLM model)"),Yir=l(),u7=a("li"),b2e=a("strong"),Kir=o("lxmert"),Zir=o(" \u2014 "),Iz=a("a"),edr=o("TFLxmertForPreTraining"),odr=o(" (LXMERT model)"),rdr=l(),_7=a("li"),v2e=a("strong"),tdr=o("mobilebert"),adr=o(" \u2014 "),qz=a("a"),ndr=o("TFMobileBertForPreTraining"),sdr=o(" (MobileBERT model)"),ldr=l(),b7=a("li"),F2e=a("strong"),idr=o("mpnet"),ddr=o(" \u2014 "),Nz=a("a"),cdr=o("TFMPNetForMaskedLM"),fdr=o(" (MPNet model)"),mdr=l(),v7=a("li"),T2e=a("strong"),gdr=o("openai-gpt"),hdr=o(" \u2014 "),jz=a("a"),pdr=o("TFOpenAIGPTLMHeadModel"),udr=o(" (OpenAI GPT model)"),_dr=l(),F7=a("li"),M2e=a("strong"),bdr=o("roberta"),vdr=o(" \u2014 "),Dz=a("a"),Fdr=o("TFRobertaForMaskedLM"),Tdr=o(" (RoBERTa model)"),Mdr=l(),T7=a("li"),E2e=a("strong"),Edr=o("t5"),Cdr=o(" \u2014 "),Gz=a("a"),wdr=o("TFT5ForConditionalGeneration"),Adr=o(" (T5 model)"),ydr=l(),M7=a("li"),C2e=a("strong"),Ldr=o("tapas"),xdr=o(" \u2014 "),Oz=a("a"),$dr=o("TFTapasForMaskedLM"),kdr=o(" (TAPAS model)"),Sdr=l(),E7=a("li"),w2e=a("strong"),Rdr=o("transfo-xl"),Bdr=o(" \u2014 "),Vz=a("a"),Pdr=o("TFTransfoXLLMHeadModel"),Idr=o(" (Transformer-XL model)"),qdr=l(),C7=a("li"),A2e=a("strong"),Ndr=o("vit_mae"),jdr=o(" \u2014 "),Xz=a("a"),Ddr=o("TFViTMAEForPreTraining"),Gdr=o(" (ViTMAE model)"),Odr=l(),w7=a("li"),y2e=a("strong"),Vdr=o("xlm"),Xdr=o(" \u2014 "),zz=a("a"),zdr=o("TFXLMWithLMHeadModel"),Qdr=o(" (XLM model)"),Wdr=l(),A7=a("li"),L2e=a("strong"),Hdr=o("xlm-roberta"),Udr=o(" \u2014 "),Qz=a("a"),Jdr=o("TFXLMRobertaForMaskedLM"),Ydr=o(" (XLM-RoBERTa model)"),Kdr=l(),y7=a("li"),x2e=a("strong"),Zdr=o("xlnet"),ecr=o(" \u2014 "),Wz=a("a"),ocr=o("TFXLNetLMHeadModel"),rcr=o(" (XLNet model)"),tcr=l(),F(L7.$$.fragment),rIe=l(),Nd=a("h2"),x7=a("a"),$2e=a("span"),F(Ey.$$.fragment),acr=l(),k2e=a("span"),ncr=o("TFAutoModelForCausalLM"),tIe=l(),Zo=a("div"),F(Cy.$$.fragment),scr=l(),jd=a("p"),lcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hz=a("a"),icr=o("from_pretrained()"),dcr=o(" class method or the "),Uz=a("a"),ccr=o("from_config()"),fcr=o(` class
method.`),mcr=l(),wy=a("p"),gcr=o("This class cannot be instantiated directly using "),S2e=a("code"),hcr=o("__init__()"),pcr=o(" (throws an error)."),ucr=l(),wt=a("div"),F(Ay.$$.fragment),_cr=l(),R2e=a("p"),bcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vcr=l(),Dd=a("p"),Fcr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Tcr=o("not"),Mcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),Ecr=o("from_pretrained()"),Ccr=o(" to load the model weights."),wcr=l(),F($7.$$.fragment),Acr=l(),Ar=a("div"),F(yy.$$.fragment),ycr=l(),P2e=a("p"),Lcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xcr=l(),Ya=a("p"),$cr=o("The model class to instantiate is selected based on the "),I2e=a("code"),kcr=o("model_type"),Scr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),Rcr=o("pretrained_model_name_or_path"),Bcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Pcr=o("pretrained_model_name_or_path"),Icr=o(":"),qcr=l(),Me=a("ul"),k7=a("li"),j2e=a("strong"),Ncr=o("bert"),jcr=o(" \u2014 "),Yz=a("a"),Dcr=o("TFBertLMHeadModel"),Gcr=o(" (BERT model)"),Ocr=l(),S7=a("li"),D2e=a("strong"),Vcr=o("camembert"),Xcr=o(" \u2014 "),Kz=a("a"),zcr=o("TFCamembertForCausalLM"),Qcr=o(" (CamemBERT model)"),Wcr=l(),R7=a("li"),G2e=a("strong"),Hcr=o("ctrl"),Ucr=o(" \u2014 "),Zz=a("a"),Jcr=o("TFCTRLLMHeadModel"),Ycr=o(" (CTRL model)"),Kcr=l(),B7=a("li"),O2e=a("strong"),Zcr=o("gpt2"),efr=o(" \u2014 "),eQ=a("a"),ofr=o("TFGPT2LMHeadModel"),rfr=o(" (OpenAI GPT-2 model)"),tfr=l(),P7=a("li"),V2e=a("strong"),afr=o("gptj"),nfr=o(" \u2014 "),oQ=a("a"),sfr=o("TFGPTJForCausalLM"),lfr=o(" (GPT-J model)"),ifr=l(),I7=a("li"),X2e=a("strong"),dfr=o("openai-gpt"),cfr=o(" \u2014 "),rQ=a("a"),ffr=o("TFOpenAIGPTLMHeadModel"),mfr=o(" (OpenAI GPT model)"),gfr=l(),q7=a("li"),z2e=a("strong"),hfr=o("rembert"),pfr=o(" \u2014 "),tQ=a("a"),ufr=o("TFRemBertForCausalLM"),_fr=o(" (RemBERT model)"),bfr=l(),N7=a("li"),Q2e=a("strong"),vfr=o("roberta"),Ffr=o(" \u2014 "),aQ=a("a"),Tfr=o("TFRobertaForCausalLM"),Mfr=o(" (RoBERTa model)"),Efr=l(),j7=a("li"),W2e=a("strong"),Cfr=o("roformer"),wfr=o(" \u2014 "),nQ=a("a"),Afr=o("TFRoFormerForCausalLM"),yfr=o(" (RoFormer model)"),Lfr=l(),D7=a("li"),H2e=a("strong"),xfr=o("transfo-xl"),$fr=o(" \u2014 "),sQ=a("a"),kfr=o("TFTransfoXLLMHeadModel"),Sfr=o(" (Transformer-XL model)"),Rfr=l(),G7=a("li"),U2e=a("strong"),Bfr=o("xlm"),Pfr=o(" \u2014 "),lQ=a("a"),Ifr=o("TFXLMWithLMHeadModel"),qfr=o(" (XLM model)"),Nfr=l(),O7=a("li"),J2e=a("strong"),jfr=o("xlnet"),Dfr=o(" \u2014 "),iQ=a("a"),Gfr=o("TFXLNetLMHeadModel"),Ofr=o(" (XLNet model)"),Vfr=l(),F(V7.$$.fragment),aIe=l(),Gd=a("h2"),X7=a("a"),Y2e=a("span"),F(Ly.$$.fragment),Xfr=l(),K2e=a("span"),zfr=o("TFAutoModelForImageClassification"),nIe=l(),er=a("div"),F(xy.$$.fragment),Qfr=l(),Od=a("p"),Wfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dQ=a("a"),Hfr=o("from_pretrained()"),Ufr=o(" class method or the "),cQ=a("a"),Jfr=o("from_config()"),Yfr=o(` class
method.`),Kfr=l(),$y=a("p"),Zfr=o("This class cannot be instantiated directly using "),Z2e=a("code"),emr=o("__init__()"),omr=o(" (throws an error)."),rmr=l(),At=a("div"),F(ky.$$.fragment),tmr=l(),e1e=a("p"),amr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),nmr=l(),Vd=a("p"),smr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),lmr=o("not"),imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),dmr=o("from_pretrained()"),cmr=o(" to load the model weights."),fmr=l(),F(z7.$$.fragment),mmr=l(),yr=a("div"),F(Sy.$$.fragment),gmr=l(),r1e=a("p"),hmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pmr=l(),Ka=a("p"),umr=o("The model class to instantiate is selected based on the "),t1e=a("code"),_mr=o("model_type"),bmr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),vmr=o("pretrained_model_name_or_path"),Fmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Tmr=o("pretrained_model_name_or_path"),Mmr=o(":"),Emr=l(),Xd=a("ul"),Q7=a("li"),s1e=a("strong"),Cmr=o("convnext"),wmr=o(" \u2014 "),mQ=a("a"),Amr=o("TFConvNextForImageClassification"),ymr=o(" (ConvNext model)"),Lmr=l(),W7=a("li"),l1e=a("strong"),xmr=o("data2vec-vision"),$mr=o(" \u2014 "),gQ=a("a"),kmr=o("TFData2VecVisionForImageClassification"),Smr=o(" (Data2VecVision model)"),Rmr=l(),H7=a("li"),i1e=a("strong"),Bmr=o("vit"),Pmr=o(" \u2014 "),hQ=a("a"),Imr=o("TFViTForImageClassification"),qmr=o(" (ViT model)"),Nmr=l(),F(U7.$$.fragment),sIe=l(),zd=a("h2"),J7=a("a"),d1e=a("span"),F(Ry.$$.fragment),jmr=l(),c1e=a("span"),Dmr=o("TFAutoModelForMaskedLM"),lIe=l(),or=a("div"),F(By.$$.fragment),Gmr=l(),Qd=a("p"),Omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" class method or the "),uQ=a("a"),zmr=o("from_config()"),Qmr=o(` class
method.`),Wmr=l(),Py=a("p"),Hmr=o("This class cannot be instantiated directly using "),f1e=a("code"),Umr=o("__init__()"),Jmr=o(" (throws an error)."),Ymr=l(),yt=a("div"),F(Iy.$$.fragment),Kmr=l(),m1e=a("p"),Zmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),egr=l(),Wd=a("p"),ogr=o(`Note:
Loading a model from its configuration file does `),g1e=a("strong"),rgr=o("not"),tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),agr=o("from_pretrained()"),ngr=o(" to load the model weights."),sgr=l(),F(Y7.$$.fragment),lgr=l(),Lr=a("div"),F(qy.$$.fragment),igr=l(),h1e=a("p"),dgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cgr=l(),Za=a("p"),fgr=o("The model class to instantiate is selected based on the "),p1e=a("code"),mgr=o("model_type"),ggr=o(` property of the config object (either
passed as an argument or loaded from `),u1e=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(":"),bgr=l(),ie=a("ul"),K7=a("li"),b1e=a("strong"),vgr=o("albert"),Fgr=o(" \u2014 "),bQ=a("a"),Tgr=o("TFAlbertForMaskedLM"),Mgr=o(" (ALBERT model)"),Egr=l(),Z7=a("li"),v1e=a("strong"),Cgr=o("bert"),wgr=o(" \u2014 "),vQ=a("a"),Agr=o("TFBertForMaskedLM"),ygr=o(" (BERT model)"),Lgr=l(),e9=a("li"),F1e=a("strong"),xgr=o("camembert"),$gr=o(" \u2014 "),FQ=a("a"),kgr=o("TFCamembertForMaskedLM"),Sgr=o(" (CamemBERT model)"),Rgr=l(),o9=a("li"),T1e=a("strong"),Bgr=o("convbert"),Pgr=o(" \u2014 "),TQ=a("a"),Igr=o("TFConvBertForMaskedLM"),qgr=o(" (ConvBERT model)"),Ngr=l(),r9=a("li"),M1e=a("strong"),jgr=o("deberta"),Dgr=o(" \u2014 "),MQ=a("a"),Ggr=o("TFDebertaForMaskedLM"),Ogr=o(" (DeBERTa model)"),Vgr=l(),t9=a("li"),E1e=a("strong"),Xgr=o("deberta-v2"),zgr=o(" \u2014 "),EQ=a("a"),Qgr=o("TFDebertaV2ForMaskedLM"),Wgr=o(" (DeBERTa-v2 model)"),Hgr=l(),a9=a("li"),C1e=a("strong"),Ugr=o("distilbert"),Jgr=o(" \u2014 "),CQ=a("a"),Ygr=o("TFDistilBertForMaskedLM"),Kgr=o(" (DistilBERT model)"),Zgr=l(),n9=a("li"),w1e=a("strong"),ehr=o("electra"),ohr=o(" \u2014 "),wQ=a("a"),rhr=o("TFElectraForMaskedLM"),thr=o(" (ELECTRA model)"),ahr=l(),s9=a("li"),A1e=a("strong"),nhr=o("flaubert"),shr=o(" \u2014 "),AQ=a("a"),lhr=o("TFFlaubertWithLMHeadModel"),ihr=o(" (FlauBERT model)"),dhr=l(),l9=a("li"),y1e=a("strong"),chr=o("funnel"),fhr=o(" \u2014 "),yQ=a("a"),mhr=o("TFFunnelForMaskedLM"),ghr=o(" (Funnel Transformer model)"),hhr=l(),i9=a("li"),L1e=a("strong"),phr=o("layoutlm"),uhr=o(" \u2014 "),LQ=a("a"),_hr=o("TFLayoutLMForMaskedLM"),bhr=o(" (LayoutLM model)"),vhr=l(),d9=a("li"),x1e=a("strong"),Fhr=o("longformer"),Thr=o(" \u2014 "),xQ=a("a"),Mhr=o("TFLongformerForMaskedLM"),Ehr=o(" (Longformer model)"),Chr=l(),c9=a("li"),$1e=a("strong"),whr=o("mobilebert"),Ahr=o(" \u2014 "),$Q=a("a"),yhr=o("TFMobileBertForMaskedLM"),Lhr=o(" (MobileBERT model)"),xhr=l(),f9=a("li"),k1e=a("strong"),$hr=o("mpnet"),khr=o(" \u2014 "),kQ=a("a"),Shr=o("TFMPNetForMaskedLM"),Rhr=o(" (MPNet model)"),Bhr=l(),m9=a("li"),S1e=a("strong"),Phr=o("rembert"),Ihr=o(" \u2014 "),SQ=a("a"),qhr=o("TFRemBertForMaskedLM"),Nhr=o(" (RemBERT model)"),jhr=l(),g9=a("li"),R1e=a("strong"),Dhr=o("roberta"),Ghr=o(" \u2014 "),RQ=a("a"),Ohr=o("TFRobertaForMaskedLM"),Vhr=o(" (RoBERTa model)"),Xhr=l(),h9=a("li"),B1e=a("strong"),zhr=o("roformer"),Qhr=o(" \u2014 "),BQ=a("a"),Whr=o("TFRoFormerForMaskedLM"),Hhr=o(" (RoFormer model)"),Uhr=l(),p9=a("li"),P1e=a("strong"),Jhr=o("tapas"),Yhr=o(" \u2014 "),PQ=a("a"),Khr=o("TFTapasForMaskedLM"),Zhr=o(" (TAPAS model)"),epr=l(),u9=a("li"),I1e=a("strong"),opr=o("xlm"),rpr=o(" \u2014 "),IQ=a("a"),tpr=o("TFXLMWithLMHeadModel"),apr=o(" (XLM model)"),npr=l(),_9=a("li"),q1e=a("strong"),spr=o("xlm-roberta"),lpr=o(" \u2014 "),qQ=a("a"),ipr=o("TFXLMRobertaForMaskedLM"),dpr=o(" (XLM-RoBERTa model)"),cpr=l(),F(b9.$$.fragment),iIe=l(),Hd=a("h2"),v9=a("a"),N1e=a("span"),F(Ny.$$.fragment),fpr=l(),j1e=a("span"),mpr=o("TFAutoModelForSeq2SeqLM"),dIe=l(),rr=a("div"),F(jy.$$.fragment),gpr=l(),Ud=a("p"),hpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=a("a"),ppr=o("from_pretrained()"),upr=o(" class method or the "),jQ=a("a"),_pr=o("from_config()"),bpr=o(` class
method.`),vpr=l(),Dy=a("p"),Fpr=o("This class cannot be instantiated directly using "),D1e=a("code"),Tpr=o("__init__()"),Mpr=o(" (throws an error)."),Epr=l(),Lt=a("div"),F(Gy.$$.fragment),Cpr=l(),G1e=a("p"),wpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Apr=l(),Jd=a("p"),ypr=o(`Note:
Loading a model from its configuration file does `),O1e=a("strong"),Lpr=o("not"),xpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),$pr=o("from_pretrained()"),kpr=o(" to load the model weights."),Spr=l(),F(F9.$$.fragment),Rpr=l(),xr=a("div"),F(Oy.$$.fragment),Bpr=l(),V1e=a("p"),Ppr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ipr=l(),en=a("p"),qpr=o("The model class to instantiate is selected based on the "),X1e=a("code"),Npr=o("model_type"),jpr=o(` property of the config object (either
passed as an argument or loaded from `),z1e=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=a("code"),Opr=o("pretrained_model_name_or_path"),Vpr=o(":"),Xpr=l(),ye=a("ul"),T9=a("li"),W1e=a("strong"),zpr=o("bart"),Qpr=o(" \u2014 "),GQ=a("a"),Wpr=o("TFBartForConditionalGeneration"),Hpr=o(" (BART model)"),Upr=l(),M9=a("li"),H1e=a("strong"),Jpr=o("blenderbot"),Ypr=o(" \u2014 "),OQ=a("a"),Kpr=o("TFBlenderbotForConditionalGeneration"),Zpr=o(" (Blenderbot model)"),eur=l(),E9=a("li"),U1e=a("strong"),our=o("blenderbot-small"),rur=o(" \u2014 "),VQ=a("a"),tur=o("TFBlenderbotSmallForConditionalGeneration"),aur=o(" (BlenderbotSmall model)"),nur=l(),C9=a("li"),J1e=a("strong"),sur=o("encoder-decoder"),lur=o(" \u2014 "),XQ=a("a"),iur=o("TFEncoderDecoderModel"),dur=o(" (Encoder decoder model)"),cur=l(),w9=a("li"),Y1e=a("strong"),fur=o("led"),mur=o(" \u2014 "),zQ=a("a"),gur=o("TFLEDForConditionalGeneration"),hur=o(" (LED model)"),pur=l(),A9=a("li"),K1e=a("strong"),uur=o("marian"),_ur=o(" \u2014 "),QQ=a("a"),bur=o("TFMarianMTModel"),vur=o(" (Marian model)"),Fur=l(),y9=a("li"),Z1e=a("strong"),Tur=o("mbart"),Mur=o(" \u2014 "),WQ=a("a"),Eur=o("TFMBartForConditionalGeneration"),Cur=o(" (mBART model)"),wur=l(),L9=a("li"),ebe=a("strong"),Aur=o("mt5"),yur=o(" \u2014 "),HQ=a("a"),Lur=o("TFMT5ForConditionalGeneration"),xur=o(" (mT5 model)"),$ur=l(),x9=a("li"),obe=a("strong"),kur=o("pegasus"),Sur=o(" \u2014 "),UQ=a("a"),Rur=o("TFPegasusForConditionalGeneration"),Bur=o(" (Pegasus model)"),Pur=l(),$9=a("li"),rbe=a("strong"),Iur=o("t5"),qur=o(" \u2014 "),JQ=a("a"),Nur=o("TFT5ForConditionalGeneration"),jur=o(" (T5 model)"),Dur=l(),F(k9.$$.fragment),cIe=l(),Yd=a("h2"),S9=a("a"),tbe=a("span"),F(Vy.$$.fragment),Gur=l(),abe=a("span"),Our=o("TFAutoModelForSequenceClassification"),fIe=l(),tr=a("div"),F(Xy.$$.fragment),Vur=l(),Kd=a("p"),Xur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=a("a"),zur=o("from_pretrained()"),Qur=o(" class method or the "),KQ=a("a"),Wur=o("from_config()"),Hur=o(` class
method.`),Uur=l(),zy=a("p"),Jur=o("This class cannot be instantiated directly using "),nbe=a("code"),Yur=o("__init__()"),Kur=o(" (throws an error)."),Zur=l(),xt=a("div"),F(Qy.$$.fragment),e_r=l(),sbe=a("p"),o_r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),r_r=l(),Zd=a("p"),t_r=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),a_r=o("not"),n_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),s_r=o("from_pretrained()"),l_r=o(" to load the model weights."),i_r=l(),F(R9.$$.fragment),d_r=l(),$r=a("div"),F(Wy.$$.fragment),c_r=l(),ibe=a("p"),f_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),m_r=l(),on=a("p"),g_r=o("The model class to instantiate is selected based on the "),dbe=a("code"),h_r=o("model_type"),p_r=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),u_r=o("pretrained_model_name_or_path"),__r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),b_r=o("pretrained_model_name_or_path"),v_r=o(":"),F_r=l(),Z=a("ul"),B9=a("li"),mbe=a("strong"),T_r=o("albert"),M_r=o(" \u2014 "),eW=a("a"),E_r=o("TFAlbertForSequenceClassification"),C_r=o(" (ALBERT model)"),w_r=l(),P9=a("li"),gbe=a("strong"),A_r=o("bert"),y_r=o(" \u2014 "),oW=a("a"),L_r=o("TFBertForSequenceClassification"),x_r=o(" (BERT model)"),$_r=l(),I9=a("li"),hbe=a("strong"),k_r=o("camembert"),S_r=o(" \u2014 "),rW=a("a"),R_r=o("TFCamembertForSequenceClassification"),B_r=o(" (CamemBERT model)"),P_r=l(),q9=a("li"),pbe=a("strong"),I_r=o("convbert"),q_r=o(" \u2014 "),tW=a("a"),N_r=o("TFConvBertForSequenceClassification"),j_r=o(" (ConvBERT model)"),D_r=l(),N9=a("li"),ube=a("strong"),G_r=o("ctrl"),O_r=o(" \u2014 "),aW=a("a"),V_r=o("TFCTRLForSequenceClassification"),X_r=o(" (CTRL model)"),z_r=l(),j9=a("li"),_be=a("strong"),Q_r=o("deberta"),W_r=o(" \u2014 "),nW=a("a"),H_r=o("TFDebertaForSequenceClassification"),U_r=o(" (DeBERTa model)"),J_r=l(),D9=a("li"),bbe=a("strong"),Y_r=o("deberta-v2"),K_r=o(" \u2014 "),sW=a("a"),Z_r=o("TFDebertaV2ForSequenceClassification"),e2r=o(" (DeBERTa-v2 model)"),o2r=l(),G9=a("li"),vbe=a("strong"),r2r=o("distilbert"),t2r=o(" \u2014 "),lW=a("a"),a2r=o("TFDistilBertForSequenceClassification"),n2r=o(" (DistilBERT model)"),s2r=l(),O9=a("li"),Fbe=a("strong"),l2r=o("electra"),i2r=o(" \u2014 "),iW=a("a"),d2r=o("TFElectraForSequenceClassification"),c2r=o(" (ELECTRA model)"),f2r=l(),V9=a("li"),Tbe=a("strong"),m2r=o("flaubert"),g2r=o(" \u2014 "),dW=a("a"),h2r=o("TFFlaubertForSequenceClassification"),p2r=o(" (FlauBERT model)"),u2r=l(),X9=a("li"),Mbe=a("strong"),_2r=o("funnel"),b2r=o(" \u2014 "),cW=a("a"),v2r=o("TFFunnelForSequenceClassification"),F2r=o(" (Funnel Transformer model)"),T2r=l(),z9=a("li"),Ebe=a("strong"),M2r=o("gpt2"),E2r=o(" \u2014 "),fW=a("a"),C2r=o("TFGPT2ForSequenceClassification"),w2r=o(" (OpenAI GPT-2 model)"),A2r=l(),Q9=a("li"),Cbe=a("strong"),y2r=o("gptj"),L2r=o(" \u2014 "),mW=a("a"),x2r=o("TFGPTJForSequenceClassification"),$2r=o(" (GPT-J model)"),k2r=l(),W9=a("li"),wbe=a("strong"),S2r=o("layoutlm"),R2r=o(" \u2014 "),gW=a("a"),B2r=o("TFLayoutLMForSequenceClassification"),P2r=o(" (LayoutLM model)"),I2r=l(),H9=a("li"),Abe=a("strong"),q2r=o("longformer"),N2r=o(" \u2014 "),hW=a("a"),j2r=o("TFLongformerForSequenceClassification"),D2r=o(" (Longformer model)"),G2r=l(),U9=a("li"),ybe=a("strong"),O2r=o("mobilebert"),V2r=o(" \u2014 "),pW=a("a"),X2r=o("TFMobileBertForSequenceClassification"),z2r=o(" (MobileBERT model)"),Q2r=l(),J9=a("li"),Lbe=a("strong"),W2r=o("mpnet"),H2r=o(" \u2014 "),uW=a("a"),U2r=o("TFMPNetForSequenceClassification"),J2r=o(" (MPNet model)"),Y2r=l(),Y9=a("li"),xbe=a("strong"),K2r=o("openai-gpt"),Z2r=o(" \u2014 "),_W=a("a"),e1r=o("TFOpenAIGPTForSequenceClassification"),o1r=o(" (OpenAI GPT model)"),r1r=l(),K9=a("li"),$be=a("strong"),t1r=o("rembert"),a1r=o(" \u2014 "),bW=a("a"),n1r=o("TFRemBertForSequenceClassification"),s1r=o(" (RemBERT model)"),l1r=l(),Z9=a("li"),kbe=a("strong"),i1r=o("roberta"),d1r=o(" \u2014 "),vW=a("a"),c1r=o("TFRobertaForSequenceClassification"),f1r=o(" (RoBERTa model)"),m1r=l(),eM=a("li"),Sbe=a("strong"),g1r=o("roformer"),h1r=o(" \u2014 "),FW=a("a"),p1r=o("TFRoFormerForSequenceClassification"),u1r=o(" (RoFormer model)"),_1r=l(),oM=a("li"),Rbe=a("strong"),b1r=o("tapas"),v1r=o(" \u2014 "),TW=a("a"),F1r=o("TFTapasForSequenceClassification"),T1r=o(" (TAPAS model)"),M1r=l(),rM=a("li"),Bbe=a("strong"),E1r=o("transfo-xl"),C1r=o(" \u2014 "),MW=a("a"),w1r=o("TFTransfoXLForSequenceClassification"),A1r=o(" (Transformer-XL model)"),y1r=l(),tM=a("li"),Pbe=a("strong"),L1r=o("xlm"),x1r=o(" \u2014 "),EW=a("a"),$1r=o("TFXLMForSequenceClassification"),k1r=o(" (XLM model)"),S1r=l(),aM=a("li"),Ibe=a("strong"),R1r=o("xlm-roberta"),B1r=o(" \u2014 "),CW=a("a"),P1r=o("TFXLMRobertaForSequenceClassification"),I1r=o(" (XLM-RoBERTa model)"),q1r=l(),nM=a("li"),qbe=a("strong"),N1r=o("xlnet"),j1r=o(" \u2014 "),wW=a("a"),D1r=o("TFXLNetForSequenceClassification"),G1r=o(" (XLNet model)"),O1r=l(),F(sM.$$.fragment),mIe=l(),ec=a("h2"),lM=a("a"),Nbe=a("span"),F(Hy.$$.fragment),V1r=l(),jbe=a("span"),X1r=o("TFAutoModelForMultipleChoice"),gIe=l(),ar=a("div"),F(Uy.$$.fragment),z1r=l(),oc=a("p"),Q1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AW=a("a"),W1r=o("from_pretrained()"),H1r=o(" class method or the "),yW=a("a"),U1r=o("from_config()"),J1r=o(` class
method.`),Y1r=l(),Jy=a("p"),K1r=o("This class cannot be instantiated directly using "),Dbe=a("code"),Z1r=o("__init__()"),ebr=o(" (throws an error)."),obr=l(),$t=a("div"),F(Yy.$$.fragment),rbr=l(),Gbe=a("p"),tbr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),abr=l(),rc=a("p"),nbr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),sbr=o("not"),lbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),ibr=o("from_pretrained()"),dbr=o(" to load the model weights."),cbr=l(),F(iM.$$.fragment),fbr=l(),kr=a("div"),F(Ky.$$.fragment),mbr=l(),Vbe=a("p"),gbr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hbr=l(),rn=a("p"),pbr=o("The model class to instantiate is selected based on the "),Xbe=a("code"),ubr=o("model_type"),_br=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),bbr=o("pretrained_model_name_or_path"),vbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),Fbr=o("pretrained_model_name_or_path"),Tbr=o(":"),Mbr=l(),pe=a("ul"),dM=a("li"),Wbe=a("strong"),Ebr=o("albert"),Cbr=o(" \u2014 "),xW=a("a"),wbr=o("TFAlbertForMultipleChoice"),Abr=o(" (ALBERT model)"),ybr=l(),cM=a("li"),Hbe=a("strong"),Lbr=o("bert"),xbr=o(" \u2014 "),$W=a("a"),$br=o("TFBertForMultipleChoice"),kbr=o(" (BERT model)"),Sbr=l(),fM=a("li"),Ube=a("strong"),Rbr=o("camembert"),Bbr=o(" \u2014 "),kW=a("a"),Pbr=o("TFCamembertForMultipleChoice"),Ibr=o(" (CamemBERT model)"),qbr=l(),mM=a("li"),Jbe=a("strong"),Nbr=o("convbert"),jbr=o(" \u2014 "),SW=a("a"),Dbr=o("TFConvBertForMultipleChoice"),Gbr=o(" (ConvBERT model)"),Obr=l(),gM=a("li"),Ybe=a("strong"),Vbr=o("distilbert"),Xbr=o(" \u2014 "),RW=a("a"),zbr=o("TFDistilBertForMultipleChoice"),Qbr=o(" (DistilBERT model)"),Wbr=l(),hM=a("li"),Kbe=a("strong"),Hbr=o("electra"),Ubr=o(" \u2014 "),BW=a("a"),Jbr=o("TFElectraForMultipleChoice"),Ybr=o(" (ELECTRA model)"),Kbr=l(),pM=a("li"),Zbe=a("strong"),Zbr=o("flaubert"),evr=o(" \u2014 "),PW=a("a"),ovr=o("TFFlaubertForMultipleChoice"),rvr=o(" (FlauBERT model)"),tvr=l(),uM=a("li"),eve=a("strong"),avr=o("funnel"),nvr=o(" \u2014 "),IW=a("a"),svr=o("TFFunnelForMultipleChoice"),lvr=o(" (Funnel Transformer model)"),ivr=l(),_M=a("li"),ove=a("strong"),dvr=o("longformer"),cvr=o(" \u2014 "),qW=a("a"),fvr=o("TFLongformerForMultipleChoice"),mvr=o(" (Longformer model)"),gvr=l(),bM=a("li"),rve=a("strong"),hvr=o("mobilebert"),pvr=o(" \u2014 "),NW=a("a"),uvr=o("TFMobileBertForMultipleChoice"),_vr=o(" (MobileBERT model)"),bvr=l(),vM=a("li"),tve=a("strong"),vvr=o("mpnet"),Fvr=o(" \u2014 "),jW=a("a"),Tvr=o("TFMPNetForMultipleChoice"),Mvr=o(" (MPNet model)"),Evr=l(),FM=a("li"),ave=a("strong"),Cvr=o("rembert"),wvr=o(" \u2014 "),DW=a("a"),Avr=o("TFRemBertForMultipleChoice"),yvr=o(" (RemBERT model)"),Lvr=l(),TM=a("li"),nve=a("strong"),xvr=o("roberta"),$vr=o(" \u2014 "),GW=a("a"),kvr=o("TFRobertaForMultipleChoice"),Svr=o(" (RoBERTa model)"),Rvr=l(),MM=a("li"),sve=a("strong"),Bvr=o("roformer"),Pvr=o(" \u2014 "),OW=a("a"),Ivr=o("TFRoFormerForMultipleChoice"),qvr=o(" (RoFormer model)"),Nvr=l(),EM=a("li"),lve=a("strong"),jvr=o("xlm"),Dvr=o(" \u2014 "),VW=a("a"),Gvr=o("TFXLMForMultipleChoice"),Ovr=o(" (XLM model)"),Vvr=l(),CM=a("li"),ive=a("strong"),Xvr=o("xlm-roberta"),zvr=o(" \u2014 "),XW=a("a"),Qvr=o("TFXLMRobertaForMultipleChoice"),Wvr=o(" (XLM-RoBERTa model)"),Hvr=l(),wM=a("li"),dve=a("strong"),Uvr=o("xlnet"),Jvr=o(" \u2014 "),zW=a("a"),Yvr=o("TFXLNetForMultipleChoice"),Kvr=o(" (XLNet model)"),Zvr=l(),F(AM.$$.fragment),hIe=l(),tc=a("h2"),yM=a("a"),cve=a("span"),F(Zy.$$.fragment),eFr=l(),fve=a("span"),oFr=o("TFAutoModelForTableQuestionAnswering"),pIe=l(),nr=a("div"),F(eL.$$.fragment),rFr=l(),ac=a("p"),tFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QW=a("a"),aFr=o("from_pretrained()"),nFr=o(" class method or the "),WW=a("a"),sFr=o("from_config()"),lFr=o(` class
method.`),iFr=l(),oL=a("p"),dFr=o("This class cannot be instantiated directly using "),mve=a("code"),cFr=o("__init__()"),fFr=o(" (throws an error)."),mFr=l(),kt=a("div"),F(rL.$$.fragment),gFr=l(),gve=a("p"),hFr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pFr=l(),nc=a("p"),uFr=o(`Note:
Loading a model from its configuration file does `),hve=a("strong"),_Fr=o("not"),bFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=a("a"),vFr=o("from_pretrained()"),FFr=o(" to load the model weights."),TFr=l(),F(LM.$$.fragment),MFr=l(),Sr=a("div"),F(tL.$$.fragment),EFr=l(),pve=a("p"),CFr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),wFr=l(),tn=a("p"),AFr=o("The model class to instantiate is selected based on the "),uve=a("code"),yFr=o("model_type"),LFr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),xFr=o("pretrained_model_name_or_path"),$Fr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=a("code"),kFr=o("pretrained_model_name_or_path"),SFr=o(":"),RFr=l(),vve=a("ul"),xM=a("li"),Fve=a("strong"),BFr=o("tapas"),PFr=o(" \u2014 "),UW=a("a"),IFr=o("TFTapasForQuestionAnswering"),qFr=o(" (TAPAS model)"),NFr=l(),F($M.$$.fragment),uIe=l(),sc=a("h2"),kM=a("a"),Tve=a("span"),F(aL.$$.fragment),jFr=l(),Mve=a("span"),DFr=o("TFAutoModelForTokenClassification"),_Ie=l(),sr=a("div"),F(nL.$$.fragment),GFr=l(),lc=a("p"),OFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JW=a("a"),VFr=o("from_pretrained()"),XFr=o(" class method or the "),YW=a("a"),zFr=o("from_config()"),QFr=o(` class
method.`),WFr=l(),sL=a("p"),HFr=o("This class cannot be instantiated directly using "),Eve=a("code"),UFr=o("__init__()"),JFr=o(" (throws an error)."),YFr=l(),St=a("div"),F(lL.$$.fragment),KFr=l(),Cve=a("p"),ZFr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),e6r=l(),ic=a("p"),o6r=o(`Note:
Loading a model from its configuration file does `),wve=a("strong"),r6r=o("not"),t6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),a6r=o("from_pretrained()"),n6r=o(" to load the model weights."),s6r=l(),F(SM.$$.fragment),l6r=l(),Rr=a("div"),F(iL.$$.fragment),i6r=l(),Ave=a("p"),d6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),c6r=l(),an=a("p"),f6r=o("The model class to instantiate is selected based on the "),yve=a("code"),m6r=o("model_type"),g6r=o(` property of the config object (either
passed as an argument or loaded from `),Lve=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=a("code"),u6r=o("pretrained_model_name_or_path"),_6r=o(":"),b6r=l(),de=a("ul"),RM=a("li"),$ve=a("strong"),v6r=o("albert"),F6r=o(" \u2014 "),ZW=a("a"),T6r=o("TFAlbertForTokenClassification"),M6r=o(" (ALBERT model)"),E6r=l(),BM=a("li"),kve=a("strong"),C6r=o("bert"),w6r=o(" \u2014 "),eH=a("a"),A6r=o("TFBertForTokenClassification"),y6r=o(" (BERT model)"),L6r=l(),PM=a("li"),Sve=a("strong"),x6r=o("camembert"),$6r=o(" \u2014 "),oH=a("a"),k6r=o("TFCamembertForTokenClassification"),S6r=o(" (CamemBERT model)"),R6r=l(),IM=a("li"),Rve=a("strong"),B6r=o("convbert"),P6r=o(" \u2014 "),rH=a("a"),I6r=o("TFConvBertForTokenClassification"),q6r=o(" (ConvBERT model)"),N6r=l(),qM=a("li"),Bve=a("strong"),j6r=o("deberta"),D6r=o(" \u2014 "),tH=a("a"),G6r=o("TFDebertaForTokenClassification"),O6r=o(" (DeBERTa model)"),V6r=l(),NM=a("li"),Pve=a("strong"),X6r=o("deberta-v2"),z6r=o(" \u2014 "),aH=a("a"),Q6r=o("TFDebertaV2ForTokenClassification"),W6r=o(" (DeBERTa-v2 model)"),H6r=l(),jM=a("li"),Ive=a("strong"),U6r=o("distilbert"),J6r=o(" \u2014 "),nH=a("a"),Y6r=o("TFDistilBertForTokenClassification"),K6r=o(" (DistilBERT model)"),Z6r=l(),DM=a("li"),qve=a("strong"),eTr=o("electra"),oTr=o(" \u2014 "),sH=a("a"),rTr=o("TFElectraForTokenClassification"),tTr=o(" (ELECTRA model)"),aTr=l(),GM=a("li"),Nve=a("strong"),nTr=o("flaubert"),sTr=o(" \u2014 "),lH=a("a"),lTr=o("TFFlaubertForTokenClassification"),iTr=o(" (FlauBERT model)"),dTr=l(),OM=a("li"),jve=a("strong"),cTr=o("funnel"),fTr=o(" \u2014 "),iH=a("a"),mTr=o("TFFunnelForTokenClassification"),gTr=o(" (Funnel Transformer model)"),hTr=l(),VM=a("li"),Dve=a("strong"),pTr=o("layoutlm"),uTr=o(" \u2014 "),dH=a("a"),_Tr=o("TFLayoutLMForTokenClassification"),bTr=o(" (LayoutLM model)"),vTr=l(),XM=a("li"),Gve=a("strong"),FTr=o("longformer"),TTr=o(" \u2014 "),cH=a("a"),MTr=o("TFLongformerForTokenClassification"),ETr=o(" (Longformer model)"),CTr=l(),zM=a("li"),Ove=a("strong"),wTr=o("mobilebert"),ATr=o(" \u2014 "),fH=a("a"),yTr=o("TFMobileBertForTokenClassification"),LTr=o(" (MobileBERT model)"),xTr=l(),QM=a("li"),Vve=a("strong"),$Tr=o("mpnet"),kTr=o(" \u2014 "),mH=a("a"),STr=o("TFMPNetForTokenClassification"),RTr=o(" (MPNet model)"),BTr=l(),WM=a("li"),Xve=a("strong"),PTr=o("rembert"),ITr=o(" \u2014 "),gH=a("a"),qTr=o("TFRemBertForTokenClassification"),NTr=o(" (RemBERT model)"),jTr=l(),HM=a("li"),zve=a("strong"),DTr=o("roberta"),GTr=o(" \u2014 "),hH=a("a"),OTr=o("TFRobertaForTokenClassification"),VTr=o(" (RoBERTa model)"),XTr=l(),UM=a("li"),Qve=a("strong"),zTr=o("roformer"),QTr=o(" \u2014 "),pH=a("a"),WTr=o("TFRoFormerForTokenClassification"),HTr=o(" (RoFormer model)"),UTr=l(),JM=a("li"),Wve=a("strong"),JTr=o("xlm"),YTr=o(" \u2014 "),uH=a("a"),KTr=o("TFXLMForTokenClassification"),ZTr=o(" (XLM model)"),e7r=l(),YM=a("li"),Hve=a("strong"),o7r=o("xlm-roberta"),r7r=o(" \u2014 "),_H=a("a"),t7r=o("TFXLMRobertaForTokenClassification"),a7r=o(" (XLM-RoBERTa model)"),n7r=l(),KM=a("li"),Uve=a("strong"),s7r=o("xlnet"),l7r=o(" \u2014 "),bH=a("a"),i7r=o("TFXLNetForTokenClassification"),d7r=o(" (XLNet model)"),c7r=l(),F(ZM.$$.fragment),bIe=l(),dc=a("h2"),e4=a("a"),Jve=a("span"),F(dL.$$.fragment),f7r=l(),Yve=a("span"),m7r=o("TFAutoModelForQuestionAnswering"),vIe=l(),lr=a("div"),F(cL.$$.fragment),g7r=l(),cc=a("p"),h7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=a("a"),p7r=o("from_pretrained()"),u7r=o(" class method or the "),FH=a("a"),_7r=o("from_config()"),b7r=o(` class
method.`),v7r=l(),fL=a("p"),F7r=o("This class cannot be instantiated directly using "),Kve=a("code"),T7r=o("__init__()"),M7r=o(" (throws an error)."),E7r=l(),Rt=a("div"),F(mL.$$.fragment),C7r=l(),Zve=a("p"),w7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A7r=l(),fc=a("p"),y7r=o(`Note:
Loading a model from its configuration file does `),eFe=a("strong"),L7r=o("not"),x7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),$7r=o("from_pretrained()"),k7r=o(" to load the model weights."),S7r=l(),F(o4.$$.fragment),R7r=l(),Br=a("div"),F(gL.$$.fragment),B7r=l(),oFe=a("p"),P7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),I7r=l(),nn=a("p"),q7r=o("The model class to instantiate is selected based on the "),rFe=a("code"),N7r=o("model_type"),j7r=o(` property of the config object (either
passed as an argument or loaded from `),tFe=a("code"),D7r=o("pretrained_model_name_or_path"),G7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=a("code"),O7r=o("pretrained_model_name_or_path"),V7r=o(":"),X7r=l(),ce=a("ul"),r4=a("li"),nFe=a("strong"),z7r=o("albert"),Q7r=o(" \u2014 "),MH=a("a"),W7r=o("TFAlbertForQuestionAnswering"),H7r=o(" (ALBERT model)"),U7r=l(),t4=a("li"),sFe=a("strong"),J7r=o("bert"),Y7r=o(" \u2014 "),EH=a("a"),K7r=o("TFBertForQuestionAnswering"),Z7r=o(" (BERT model)"),e9r=l(),a4=a("li"),lFe=a("strong"),o9r=o("camembert"),r9r=o(" \u2014 "),CH=a("a"),t9r=o("TFCamembertForQuestionAnswering"),a9r=o(" (CamemBERT model)"),n9r=l(),n4=a("li"),iFe=a("strong"),s9r=o("convbert"),l9r=o(" \u2014 "),wH=a("a"),i9r=o("TFConvBertForQuestionAnswering"),d9r=o(" (ConvBERT model)"),c9r=l(),s4=a("li"),dFe=a("strong"),f9r=o("deberta"),m9r=o(" \u2014 "),AH=a("a"),g9r=o("TFDebertaForQuestionAnswering"),h9r=o(" (DeBERTa model)"),p9r=l(),l4=a("li"),cFe=a("strong"),u9r=o("deberta-v2"),_9r=o(" \u2014 "),yH=a("a"),b9r=o("TFDebertaV2ForQuestionAnswering"),v9r=o(" (DeBERTa-v2 model)"),F9r=l(),i4=a("li"),fFe=a("strong"),T9r=o("distilbert"),M9r=o(" \u2014 "),LH=a("a"),E9r=o("TFDistilBertForQuestionAnswering"),C9r=o(" (DistilBERT model)"),w9r=l(),d4=a("li"),mFe=a("strong"),A9r=o("electra"),y9r=o(" \u2014 "),xH=a("a"),L9r=o("TFElectraForQuestionAnswering"),x9r=o(" (ELECTRA model)"),$9r=l(),c4=a("li"),gFe=a("strong"),k9r=o("flaubert"),S9r=o(" \u2014 "),$H=a("a"),R9r=o("TFFlaubertForQuestionAnsweringSimple"),B9r=o(" (FlauBERT model)"),P9r=l(),f4=a("li"),hFe=a("strong"),I9r=o("funnel"),q9r=o(" \u2014 "),kH=a("a"),N9r=o("TFFunnelForQuestionAnswering"),j9r=o(" (Funnel Transformer model)"),D9r=l(),m4=a("li"),pFe=a("strong"),G9r=o("gptj"),O9r=o(" \u2014 "),SH=a("a"),V9r=o("TFGPTJForQuestionAnswering"),X9r=o(" (GPT-J model)"),z9r=l(),g4=a("li"),uFe=a("strong"),Q9r=o("longformer"),W9r=o(" \u2014 "),RH=a("a"),H9r=o("TFLongformerForQuestionAnswering"),U9r=o(" (Longformer model)"),J9r=l(),h4=a("li"),_Fe=a("strong"),Y9r=o("mobilebert"),K9r=o(" \u2014 "),BH=a("a"),Z9r=o("TFMobileBertForQuestionAnswering"),eMr=o(" (MobileBERT model)"),oMr=l(),p4=a("li"),bFe=a("strong"),rMr=o("mpnet"),tMr=o(" \u2014 "),PH=a("a"),aMr=o("TFMPNetForQuestionAnswering"),nMr=o(" (MPNet model)"),sMr=l(),u4=a("li"),vFe=a("strong"),lMr=o("rembert"),iMr=o(" \u2014 "),IH=a("a"),dMr=o("TFRemBertForQuestionAnswering"),cMr=o(" (RemBERT model)"),fMr=l(),_4=a("li"),FFe=a("strong"),mMr=o("roberta"),gMr=o(" \u2014 "),qH=a("a"),hMr=o("TFRobertaForQuestionAnswering"),pMr=o(" (RoBERTa model)"),uMr=l(),b4=a("li"),TFe=a("strong"),_Mr=o("roformer"),bMr=o(" \u2014 "),NH=a("a"),vMr=o("TFRoFormerForQuestionAnswering"),FMr=o(" (RoFormer model)"),TMr=l(),v4=a("li"),MFe=a("strong"),MMr=o("xlm"),EMr=o(" \u2014 "),jH=a("a"),CMr=o("TFXLMForQuestionAnsweringSimple"),wMr=o(" (XLM model)"),AMr=l(),F4=a("li"),EFe=a("strong"),yMr=o("xlm-roberta"),LMr=o(" \u2014 "),DH=a("a"),xMr=o("TFXLMRobertaForQuestionAnswering"),$Mr=o(" (XLM-RoBERTa model)"),kMr=l(),T4=a("li"),CFe=a("strong"),SMr=o("xlnet"),RMr=o(" \u2014 "),GH=a("a"),BMr=o("TFXLNetForQuestionAnsweringSimple"),PMr=o(" (XLNet model)"),IMr=l(),F(M4.$$.fragment),FIe=l(),mc=a("h2"),E4=a("a"),wFe=a("span"),F(hL.$$.fragment),qMr=l(),AFe=a("span"),NMr=o("TFAutoModelForVision2Seq"),TIe=l(),ir=a("div"),F(pL.$$.fragment),jMr=l(),gc=a("p"),DMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=a("a"),GMr=o("from_pretrained()"),OMr=o(" class method or the "),VH=a("a"),VMr=o("from_config()"),XMr=o(` class
method.`),zMr=l(),uL=a("p"),QMr=o("This class cannot be instantiated directly using "),yFe=a("code"),WMr=o("__init__()"),HMr=o(" (throws an error)."),UMr=l(),Bt=a("div"),F(_L.$$.fragment),JMr=l(),LFe=a("p"),YMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),KMr=l(),hc=a("p"),ZMr=o(`Note:
Loading a model from its configuration file does `),xFe=a("strong"),e4r=o("not"),o4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),r4r=o("from_pretrained()"),t4r=o(" to load the model weights."),a4r=l(),F(C4.$$.fragment),n4r=l(),Pr=a("div"),F(bL.$$.fragment),s4r=l(),$Fe=a("p"),l4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),i4r=l(),sn=a("p"),d4r=o("The model class to instantiate is selected based on the "),kFe=a("code"),c4r=o("model_type"),f4r=o(` property of the config object (either
passed as an argument or loaded from `),SFe=a("code"),m4r=o("pretrained_model_name_or_path"),g4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=a("code"),h4r=o("pretrained_model_name_or_path"),p4r=o(":"),u4r=l(),BFe=a("ul"),w4=a("li"),PFe=a("strong"),_4r=o("vision-encoder-decoder"),b4r=o(" \u2014 "),zH=a("a"),v4r=o("TFVisionEncoderDecoderModel"),F4r=o(" (Vision Encoder decoder model)"),T4r=l(),F(A4.$$.fragment),MIe=l(),pc=a("h2"),y4=a("a"),IFe=a("span"),F(vL.$$.fragment),M4r=l(),qFe=a("span"),E4r=o("TFAutoModelForSpeechSeq2Seq"),EIe=l(),dr=a("div"),F(FL.$$.fragment),C4r=l(),uc=a("p"),w4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QH=a("a"),A4r=o("from_pretrained()"),y4r=o(" class method or the "),WH=a("a"),L4r=o("from_config()"),x4r=o(` class
method.`),$4r=l(),TL=a("p"),k4r=o("This class cannot be instantiated directly using "),NFe=a("code"),S4r=o("__init__()"),R4r=o(" (throws an error)."),B4r=l(),Pt=a("div"),F(ML.$$.fragment),P4r=l(),jFe=a("p"),I4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),q4r=l(),_c=a("p"),N4r=o(`Note:
Loading a model from its configuration file does `),DFe=a("strong"),j4r=o("not"),D4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),G4r=o("from_pretrained()"),O4r=o(" to load the model weights."),V4r=l(),F(L4.$$.fragment),X4r=l(),Ir=a("div"),F(EL.$$.fragment),z4r=l(),GFe=a("p"),Q4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),W4r=l(),ln=a("p"),H4r=o("The model class to instantiate is selected based on the "),OFe=a("code"),U4r=o("model_type"),J4r=o(` property of the config object (either
passed as an argument or loaded from `),VFe=a("code"),Y4r=o("pretrained_model_name_or_path"),K4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=a("code"),Z4r=o("pretrained_model_name_or_path"),eEr=o(":"),oEr=l(),zFe=a("ul"),x4=a("li"),QFe=a("strong"),rEr=o("speech_to_text"),tEr=o(" \u2014 "),UH=a("a"),aEr=o("TFSpeech2TextForConditionalGeneration"),nEr=o(" (Speech2Text model)"),sEr=l(),F($4.$$.fragment),CIe=l(),bc=a("h2"),k4=a("a"),WFe=a("span"),F(CL.$$.fragment),lEr=l(),HFe=a("span"),iEr=o("FlaxAutoModel"),wIe=l(),cr=a("div"),F(wL.$$.fragment),dEr=l(),vc=a("p"),cEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JH=a("a"),fEr=o("from_pretrained()"),mEr=o(" class method or the "),YH=a("a"),gEr=o("from_config()"),hEr=o(` class
method.`),pEr=l(),AL=a("p"),uEr=o("This class cannot be instantiated directly using "),UFe=a("code"),_Er=o("__init__()"),bEr=o(" (throws an error)."),vEr=l(),It=a("div"),F(yL.$$.fragment),FEr=l(),JFe=a("p"),TEr=o("Instantiates one of the base model classes of the library from a configuration."),MEr=l(),Fc=a("p"),EEr=o(`Note:
Loading a model from its configuration file does `),YFe=a("strong"),CEr=o("not"),wEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),AEr=o("from_pretrained()"),yEr=o(" to load the model weights."),LEr=l(),F(S4.$$.fragment),xEr=l(),qr=a("div"),F(LL.$$.fragment),$Er=l(),KFe=a("p"),kEr=o("Instantiate one of the base model classes of the library from a pretrained model."),SEr=l(),dn=a("p"),REr=o("The model class to instantiate is selected based on the "),ZFe=a("code"),BEr=o("model_type"),PEr=o(` property of the config object (either
passed as an argument or loaded from `),e6e=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=a("code"),NEr=o("pretrained_model_name_or_path"),jEr=o(":"),DEr=l(),ee=a("ul"),R4=a("li"),r6e=a("strong"),GEr=o("albert"),OEr=o(" \u2014 "),ZH=a("a"),VEr=o("FlaxAlbertModel"),XEr=o(" (ALBERT model)"),zEr=l(),B4=a("li"),t6e=a("strong"),QEr=o("bart"),WEr=o(" \u2014 "),eU=a("a"),HEr=o("FlaxBartModel"),UEr=o(" (BART model)"),JEr=l(),P4=a("li"),a6e=a("strong"),YEr=o("beit"),KEr=o(" \u2014 "),oU=a("a"),ZEr=o("FlaxBeitModel"),e5r=o(" (BEiT model)"),o5r=l(),I4=a("li"),n6e=a("strong"),r5r=o("bert"),t5r=o(" \u2014 "),rU=a("a"),a5r=o("FlaxBertModel"),n5r=o(" (BERT model)"),s5r=l(),q4=a("li"),s6e=a("strong"),l5r=o("big_bird"),i5r=o(" \u2014 "),tU=a("a"),d5r=o("FlaxBigBirdModel"),c5r=o(" (BigBird model)"),f5r=l(),N4=a("li"),l6e=a("strong"),m5r=o("blenderbot"),g5r=o(" \u2014 "),aU=a("a"),h5r=o("FlaxBlenderbotModel"),p5r=o(" (Blenderbot model)"),u5r=l(),j4=a("li"),i6e=a("strong"),_5r=o("blenderbot-small"),b5r=o(" \u2014 "),nU=a("a"),v5r=o("FlaxBlenderbotSmallModel"),F5r=o(" (BlenderbotSmall model)"),T5r=l(),D4=a("li"),d6e=a("strong"),M5r=o("clip"),E5r=o(" \u2014 "),sU=a("a"),C5r=o("FlaxCLIPModel"),w5r=o(" (CLIP model)"),A5r=l(),G4=a("li"),c6e=a("strong"),y5r=o("distilbert"),L5r=o(" \u2014 "),lU=a("a"),x5r=o("FlaxDistilBertModel"),$5r=o(" (DistilBERT model)"),k5r=l(),O4=a("li"),f6e=a("strong"),S5r=o("electra"),R5r=o(" \u2014 "),iU=a("a"),B5r=o("FlaxElectraModel"),P5r=o(" (ELECTRA model)"),I5r=l(),V4=a("li"),m6e=a("strong"),q5r=o("gpt2"),N5r=o(" \u2014 "),dU=a("a"),j5r=o("FlaxGPT2Model"),D5r=o(" (OpenAI GPT-2 model)"),G5r=l(),X4=a("li"),g6e=a("strong"),O5r=o("gpt_neo"),V5r=o(" \u2014 "),cU=a("a"),X5r=o("FlaxGPTNeoModel"),z5r=o(" (GPT Neo model)"),Q5r=l(),z4=a("li"),h6e=a("strong"),W5r=o("gptj"),H5r=o(" \u2014 "),fU=a("a"),U5r=o("FlaxGPTJModel"),J5r=o(" (GPT-J model)"),Y5r=l(),Q4=a("li"),p6e=a("strong"),K5r=o("longt5"),Z5r=o(" \u2014 "),mU=a("a"),eCr=o("FlaxLongT5Model"),oCr=o(" (LongT5 model)"),rCr=l(),W4=a("li"),u6e=a("strong"),tCr=o("marian"),aCr=o(" \u2014 "),gU=a("a"),nCr=o("FlaxMarianModel"),sCr=o(" (Marian model)"),lCr=l(),H4=a("li"),_6e=a("strong"),iCr=o("mbart"),dCr=o(" \u2014 "),hU=a("a"),cCr=o("FlaxMBartModel"),fCr=o(" (mBART model)"),mCr=l(),U4=a("li"),b6e=a("strong"),gCr=o("mt5"),hCr=o(" \u2014 "),pU=a("a"),pCr=o("FlaxMT5Model"),uCr=o(" (mT5 model)"),_Cr=l(),J4=a("li"),v6e=a("strong"),bCr=o("pegasus"),vCr=o(" \u2014 "),uU=a("a"),FCr=o("FlaxPegasusModel"),TCr=o(" (Pegasus model)"),MCr=l(),Y4=a("li"),F6e=a("strong"),ECr=o("roberta"),CCr=o(" \u2014 "),_U=a("a"),wCr=o("FlaxRobertaModel"),ACr=o(" (RoBERTa model)"),yCr=l(),K4=a("li"),T6e=a("strong"),LCr=o("roformer"),xCr=o(" \u2014 "),bU=a("a"),$Cr=o("FlaxRoFormerModel"),kCr=o(" (RoFormer model)"),SCr=l(),Z4=a("li"),M6e=a("strong"),RCr=o("t5"),BCr=o(" \u2014 "),vU=a("a"),PCr=o("FlaxT5Model"),ICr=o(" (T5 model)"),qCr=l(),eE=a("li"),E6e=a("strong"),NCr=o("vision-text-dual-encoder"),jCr=o(" \u2014 "),FU=a("a"),DCr=o("FlaxVisionTextDualEncoderModel"),GCr=o(" (VisionTextDualEncoder model)"),OCr=l(),oE=a("li"),C6e=a("strong"),VCr=o("vit"),XCr=o(" \u2014 "),TU=a("a"),zCr=o("FlaxViTModel"),QCr=o(" (ViT model)"),WCr=l(),rE=a("li"),w6e=a("strong"),HCr=o("wav2vec2"),UCr=o(" \u2014 "),MU=a("a"),JCr=o("FlaxWav2Vec2Model"),YCr=o(" (Wav2Vec2 model)"),KCr=l(),tE=a("li"),A6e=a("strong"),ZCr=o("xglm"),e3r=o(" \u2014 "),EU=a("a"),o3r=o("FlaxXGLMModel"),r3r=o(" (XGLM model)"),t3r=l(),aE=a("li"),y6e=a("strong"),a3r=o("xlm-roberta"),n3r=o(" \u2014 "),CU=a("a"),s3r=o("FlaxXLMRobertaModel"),l3r=o(" (XLM-RoBERTa model)"),i3r=l(),F(nE.$$.fragment),AIe=l(),Tc=a("h2"),sE=a("a"),L6e=a("span"),F(xL.$$.fragment),d3r=l(),x6e=a("span"),c3r=o("FlaxAutoModelForCausalLM"),yIe=l(),fr=a("div"),F($L.$$.fragment),f3r=l(),Mc=a("p"),m3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wU=a("a"),g3r=o("from_pretrained()"),h3r=o(" class method or the "),AU=a("a"),p3r=o("from_config()"),u3r=o(` class
method.`),_3r=l(),kL=a("p"),b3r=o("This class cannot be instantiated directly using "),$6e=a("code"),v3r=o("__init__()"),F3r=o(" (throws an error)."),T3r=l(),qt=a("div"),F(SL.$$.fragment),M3r=l(),k6e=a("p"),E3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),C3r=l(),Ec=a("p"),w3r=o(`Note:
Loading a model from its configuration file does `),S6e=a("strong"),A3r=o("not"),y3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),L3r=o("from_pretrained()"),x3r=o(" to load the model weights."),$3r=l(),F(lE.$$.fragment),k3r=l(),Nr=a("div"),F(RL.$$.fragment),S3r=l(),R6e=a("p"),R3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),B3r=l(),cn=a("p"),P3r=o("The model class to instantiate is selected based on the "),B6e=a("code"),I3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),P6e=a("code"),N3r=o("pretrained_model_name_or_path"),j3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(":"),O3r=l(),Se=a("ul"),iE=a("li"),q6e=a("strong"),V3r=o("bart"),X3r=o(" \u2014 "),LU=a("a"),z3r=o("FlaxBartForCausalLM"),Q3r=o(" (BART model)"),W3r=l(),dE=a("li"),N6e=a("strong"),H3r=o("bert"),U3r=o(" \u2014 "),xU=a("a"),J3r=o("FlaxBertForCausalLM"),Y3r=o(" (BERT model)"),K3r=l(),cE=a("li"),j6e=a("strong"),Z3r=o("big_bird"),ewr=o(" \u2014 "),$U=a("a"),owr=o("FlaxBigBirdForCausalLM"),rwr=o(" (BigBird model)"),twr=l(),fE=a("li"),D6e=a("strong"),awr=o("electra"),nwr=o(" \u2014 "),kU=a("a"),swr=o("FlaxElectraForCausalLM"),lwr=o(" (ELECTRA model)"),iwr=l(),mE=a("li"),G6e=a("strong"),dwr=o("gpt2"),cwr=o(" \u2014 "),SU=a("a"),fwr=o("FlaxGPT2LMHeadModel"),mwr=o(" (OpenAI GPT-2 model)"),gwr=l(),gE=a("li"),O6e=a("strong"),hwr=o("gpt_neo"),pwr=o(" \u2014 "),RU=a("a"),uwr=o("FlaxGPTNeoForCausalLM"),_wr=o(" (GPT Neo model)"),bwr=l(),hE=a("li"),V6e=a("strong"),vwr=o("gptj"),Fwr=o(" \u2014 "),BU=a("a"),Twr=o("FlaxGPTJForCausalLM"),Mwr=o(" (GPT-J model)"),Ewr=l(),pE=a("li"),X6e=a("strong"),Cwr=o("roberta"),wwr=o(" \u2014 "),PU=a("a"),Awr=o("FlaxRobertaForCausalLM"),ywr=o(" (RoBERTa model)"),Lwr=l(),uE=a("li"),z6e=a("strong"),xwr=o("xglm"),$wr=o(" \u2014 "),IU=a("a"),kwr=o("FlaxXGLMForCausalLM"),Swr=o(" (XGLM model)"),Rwr=l(),F(_E.$$.fragment),LIe=l(),Cc=a("h2"),bE=a("a"),Q6e=a("span"),F(BL.$$.fragment),Bwr=l(),W6e=a("span"),Pwr=o("FlaxAutoModelForPreTraining"),xIe=l(),mr=a("div"),F(PL.$$.fragment),Iwr=l(),wc=a("p"),qwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qU=a("a"),Nwr=o("from_pretrained()"),jwr=o(" class method or the "),NU=a("a"),Dwr=o("from_config()"),Gwr=o(` class
method.`),Owr=l(),IL=a("p"),Vwr=o("This class cannot be instantiated directly using "),H6e=a("code"),Xwr=o("__init__()"),zwr=o(" (throws an error)."),Qwr=l(),Nt=a("div"),F(qL.$$.fragment),Wwr=l(),U6e=a("p"),Hwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uwr=l(),Ac=a("p"),Jwr=o(`Note:
Loading a model from its configuration file does `),J6e=a("strong"),Ywr=o("not"),Kwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=a("a"),Zwr=o("from_pretrained()"),eAr=o(" to load the model weights."),oAr=l(),F(vE.$$.fragment),rAr=l(),jr=a("div"),F(NL.$$.fragment),tAr=l(),Y6e=a("p"),aAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nAr=l(),fn=a("p"),sAr=o("The model class to instantiate is selected based on the "),K6e=a("code"),lAr=o("model_type"),iAr=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),dAr=o("pretrained_model_name_or_path"),cAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=a("code"),fAr=o("pretrained_model_name_or_path"),mAr=o(":"),gAr=l(),Fe=a("ul"),FE=a("li"),oTe=a("strong"),hAr=o("albert"),pAr=o(" \u2014 "),DU=a("a"),uAr=o("FlaxAlbertForPreTraining"),_Ar=o(" (ALBERT model)"),bAr=l(),TE=a("li"),rTe=a("strong"),vAr=o("bart"),FAr=o(" \u2014 "),GU=a("a"),TAr=o("FlaxBartForConditionalGeneration"),MAr=o(" (BART model)"),EAr=l(),ME=a("li"),tTe=a("strong"),CAr=o("bert"),wAr=o(" \u2014 "),OU=a("a"),AAr=o("FlaxBertForPreTraining"),yAr=o(" (BERT model)"),LAr=l(),EE=a("li"),aTe=a("strong"),xAr=o("big_bird"),$Ar=o(" \u2014 "),VU=a("a"),kAr=o("FlaxBigBirdForPreTraining"),SAr=o(" (BigBird model)"),RAr=l(),CE=a("li"),nTe=a("strong"),BAr=o("electra"),PAr=o(" \u2014 "),XU=a("a"),IAr=o("FlaxElectraForPreTraining"),qAr=o(" (ELECTRA model)"),NAr=l(),wE=a("li"),sTe=a("strong"),jAr=o("longt5"),DAr=o(" \u2014 "),zU=a("a"),GAr=o("FlaxLongT5ForConditionalGeneration"),OAr=o(" (LongT5 model)"),VAr=l(),AE=a("li"),lTe=a("strong"),XAr=o("mbart"),zAr=o(" \u2014 "),QU=a("a"),QAr=o("FlaxMBartForConditionalGeneration"),WAr=o(" (mBART model)"),HAr=l(),yE=a("li"),iTe=a("strong"),UAr=o("mt5"),JAr=o(" \u2014 "),WU=a("a"),YAr=o("FlaxMT5ForConditionalGeneration"),KAr=o(" (mT5 model)"),ZAr=l(),LE=a("li"),dTe=a("strong"),e0r=o("roberta"),o0r=o(" \u2014 "),HU=a("a"),r0r=o("FlaxRobertaForMaskedLM"),t0r=o(" (RoBERTa model)"),a0r=l(),xE=a("li"),cTe=a("strong"),n0r=o("roformer"),s0r=o(" \u2014 "),UU=a("a"),l0r=o("FlaxRoFormerForMaskedLM"),i0r=o(" (RoFormer model)"),d0r=l(),$E=a("li"),fTe=a("strong"),c0r=o("t5"),f0r=o(" \u2014 "),JU=a("a"),m0r=o("FlaxT5ForConditionalGeneration"),g0r=o(" (T5 model)"),h0r=l(),kE=a("li"),mTe=a("strong"),p0r=o("wav2vec2"),u0r=o(" \u2014 "),YU=a("a"),_0r=o("FlaxWav2Vec2ForPreTraining"),b0r=o(" (Wav2Vec2 model)"),v0r=l(),SE=a("li"),gTe=a("strong"),F0r=o("xlm-roberta"),T0r=o(" \u2014 "),KU=a("a"),M0r=o("FlaxXLMRobertaForMaskedLM"),E0r=o(" (XLM-RoBERTa model)"),C0r=l(),F(RE.$$.fragment),$Ie=l(),yc=a("h2"),BE=a("a"),hTe=a("span"),F(jL.$$.fragment),w0r=l(),pTe=a("span"),A0r=o("FlaxAutoModelForMaskedLM"),kIe=l(),gr=a("div"),F(DL.$$.fragment),y0r=l(),Lc=a("p"),L0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZU=a("a"),x0r=o("from_pretrained()"),$0r=o(" class method or the "),eJ=a("a"),k0r=o("from_config()"),S0r=o(` class
method.`),R0r=l(),GL=a("p"),B0r=o("This class cannot be instantiated directly using "),uTe=a("code"),P0r=o("__init__()"),I0r=o(" (throws an error)."),q0r=l(),jt=a("div"),F(OL.$$.fragment),N0r=l(),_Te=a("p"),j0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D0r=l(),xc=a("p"),G0r=o(`Note:
Loading a model from its configuration file does `),bTe=a("strong"),O0r=o("not"),V0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),X0r=o("from_pretrained()"),z0r=o(" to load the model weights."),Q0r=l(),F(PE.$$.fragment),W0r=l(),Dr=a("div"),F(VL.$$.fragment),H0r=l(),vTe=a("p"),U0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J0r=l(),mn=a("p"),Y0r=o("The model class to instantiate is selected based on the "),FTe=a("code"),K0r=o("model_type"),Z0r=o(` property of the config object (either
passed as an argument or loaded from `),TTe=a("code"),eyr=o("pretrained_model_name_or_path"),oyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=a("code"),ryr=o("pretrained_model_name_or_path"),tyr=o(":"),ayr=l(),Le=a("ul"),IE=a("li"),ETe=a("strong"),nyr=o("albert"),syr=o(" \u2014 "),rJ=a("a"),lyr=o("FlaxAlbertForMaskedLM"),iyr=o(" (ALBERT model)"),dyr=l(),qE=a("li"),CTe=a("strong"),cyr=o("bart"),fyr=o(" \u2014 "),tJ=a("a"),myr=o("FlaxBartForConditionalGeneration"),gyr=o(" (BART model)"),hyr=l(),NE=a("li"),wTe=a("strong"),pyr=o("bert"),uyr=o(" \u2014 "),aJ=a("a"),_yr=o("FlaxBertForMaskedLM"),byr=o(" (BERT model)"),vyr=l(),jE=a("li"),ATe=a("strong"),Fyr=o("big_bird"),Tyr=o(" \u2014 "),nJ=a("a"),Myr=o("FlaxBigBirdForMaskedLM"),Eyr=o(" (BigBird model)"),Cyr=l(),DE=a("li"),yTe=a("strong"),wyr=o("distilbert"),Ayr=o(" \u2014 "),sJ=a("a"),yyr=o("FlaxDistilBertForMaskedLM"),Lyr=o(" (DistilBERT model)"),xyr=l(),GE=a("li"),LTe=a("strong"),$yr=o("electra"),kyr=o(" \u2014 "),lJ=a("a"),Syr=o("FlaxElectraForMaskedLM"),Ryr=o(" (ELECTRA model)"),Byr=l(),OE=a("li"),xTe=a("strong"),Pyr=o("mbart"),Iyr=o(" \u2014 "),iJ=a("a"),qyr=o("FlaxMBartForConditionalGeneration"),Nyr=o(" (mBART model)"),jyr=l(),VE=a("li"),$Te=a("strong"),Dyr=o("roberta"),Gyr=o(" \u2014 "),dJ=a("a"),Oyr=o("FlaxRobertaForMaskedLM"),Vyr=o(" (RoBERTa model)"),Xyr=l(),XE=a("li"),kTe=a("strong"),zyr=o("roformer"),Qyr=o(" \u2014 "),cJ=a("a"),Wyr=o("FlaxRoFormerForMaskedLM"),Hyr=o(" (RoFormer model)"),Uyr=l(),zE=a("li"),STe=a("strong"),Jyr=o("xlm-roberta"),Yyr=o(" \u2014 "),fJ=a("a"),Kyr=o("FlaxXLMRobertaForMaskedLM"),Zyr=o(" (XLM-RoBERTa model)"),eLr=l(),F(QE.$$.fragment),SIe=l(),$c=a("h2"),WE=a("a"),RTe=a("span"),F(XL.$$.fragment),oLr=l(),BTe=a("span"),rLr=o("FlaxAutoModelForSeq2SeqLM"),RIe=l(),hr=a("div"),F(zL.$$.fragment),tLr=l(),kc=a("p"),aLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mJ=a("a"),nLr=o("from_pretrained()"),sLr=o(" class method or the "),gJ=a("a"),lLr=o("from_config()"),iLr=o(` class
method.`),dLr=l(),QL=a("p"),cLr=o("This class cannot be instantiated directly using "),PTe=a("code"),fLr=o("__init__()"),mLr=o(" (throws an error)."),gLr=l(),Dt=a("div"),F(WL.$$.fragment),hLr=l(),ITe=a("p"),pLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),uLr=l(),Sc=a("p"),_Lr=o(`Note:
Loading a model from its configuration file does `),qTe=a("strong"),bLr=o("not"),vLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),FLr=o("from_pretrained()"),TLr=o(" to load the model weights."),MLr=l(),F(HE.$$.fragment),ELr=l(),Gr=a("div"),F(HL.$$.fragment),CLr=l(),NTe=a("p"),wLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ALr=l(),gn=a("p"),yLr=o("The model class to instantiate is selected based on the "),jTe=a("code"),LLr=o("model_type"),xLr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),$Lr=o("pretrained_model_name_or_path"),kLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),SLr=o("pretrained_model_name_or_path"),RLr=o(":"),BLr=l(),xe=a("ul"),UE=a("li"),OTe=a("strong"),PLr=o("bart"),ILr=o(" \u2014 "),pJ=a("a"),qLr=o("FlaxBartForConditionalGeneration"),NLr=o(" (BART model)"),jLr=l(),JE=a("li"),VTe=a("strong"),DLr=o("blenderbot"),GLr=o(" \u2014 "),uJ=a("a"),OLr=o("FlaxBlenderbotForConditionalGeneration"),VLr=o(" (Blenderbot model)"),XLr=l(),YE=a("li"),XTe=a("strong"),zLr=o("blenderbot-small"),QLr=o(" \u2014 "),_J=a("a"),WLr=o("FlaxBlenderbotSmallForConditionalGeneration"),HLr=o(" (BlenderbotSmall model)"),ULr=l(),KE=a("li"),zTe=a("strong"),JLr=o("encoder-decoder"),YLr=o(" \u2014 "),bJ=a("a"),KLr=o("FlaxEncoderDecoderModel"),ZLr=o(" (Encoder decoder model)"),e8r=l(),ZE=a("li"),QTe=a("strong"),o8r=o("longt5"),r8r=o(" \u2014 "),vJ=a("a"),t8r=o("FlaxLongT5ForConditionalGeneration"),a8r=o(" (LongT5 model)"),n8r=l(),e5=a("li"),WTe=a("strong"),s8r=o("marian"),l8r=o(" \u2014 "),FJ=a("a"),i8r=o("FlaxMarianMTModel"),d8r=o(" (Marian model)"),c8r=l(),o5=a("li"),HTe=a("strong"),f8r=o("mbart"),m8r=o(" \u2014 "),TJ=a("a"),g8r=o("FlaxMBartForConditionalGeneration"),h8r=o(" (mBART model)"),p8r=l(),r5=a("li"),UTe=a("strong"),u8r=o("mt5"),_8r=o(" \u2014 "),MJ=a("a"),b8r=o("FlaxMT5ForConditionalGeneration"),v8r=o(" (mT5 model)"),F8r=l(),t5=a("li"),JTe=a("strong"),T8r=o("pegasus"),M8r=o(" \u2014 "),EJ=a("a"),E8r=o("FlaxPegasusForConditionalGeneration"),C8r=o(" (Pegasus model)"),w8r=l(),a5=a("li"),YTe=a("strong"),A8r=o("t5"),y8r=o(" \u2014 "),CJ=a("a"),L8r=o("FlaxT5ForConditionalGeneration"),x8r=o(" (T5 model)"),$8r=l(),F(n5.$$.fragment),BIe=l(),Rc=a("h2"),s5=a("a"),KTe=a("span"),F(UL.$$.fragment),k8r=l(),ZTe=a("span"),S8r=o("FlaxAutoModelForSequenceClassification"),PIe=l(),pr=a("div"),F(JL.$$.fragment),R8r=l(),Bc=a("p"),B8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wJ=a("a"),P8r=o("from_pretrained()"),I8r=o(" class method or the "),AJ=a("a"),q8r=o("from_config()"),N8r=o(` class
method.`),j8r=l(),YL=a("p"),D8r=o("This class cannot be instantiated directly using "),e7e=a("code"),G8r=o("__init__()"),O8r=o(" (throws an error)."),V8r=l(),Gt=a("div"),F(KL.$$.fragment),X8r=l(),o7e=a("p"),z8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Q8r=l(),Pc=a("p"),W8r=o(`Note:
Loading a model from its configuration file does `),r7e=a("strong"),H8r=o("not"),U8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),J8r=o("from_pretrained()"),Y8r=o(" to load the model weights."),K8r=l(),F(l5.$$.fragment),Z8r=l(),Or=a("div"),F(ZL.$$.fragment),exr=l(),t7e=a("p"),oxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rxr=l(),hn=a("p"),txr=o("The model class to instantiate is selected based on the "),a7e=a("code"),axr=o("model_type"),nxr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(":"),cxr=l(),$e=a("ul"),i5=a("li"),l7e=a("strong"),fxr=o("albert"),mxr=o(" \u2014 "),LJ=a("a"),gxr=o("FlaxAlbertForSequenceClassification"),hxr=o(" (ALBERT model)"),pxr=l(),d5=a("li"),i7e=a("strong"),uxr=o("bart"),_xr=o(" \u2014 "),xJ=a("a"),bxr=o("FlaxBartForSequenceClassification"),vxr=o(" (BART model)"),Fxr=l(),c5=a("li"),d7e=a("strong"),Txr=o("bert"),Mxr=o(" \u2014 "),$J=a("a"),Exr=o("FlaxBertForSequenceClassification"),Cxr=o(" (BERT model)"),wxr=l(),f5=a("li"),c7e=a("strong"),Axr=o("big_bird"),yxr=o(" \u2014 "),kJ=a("a"),Lxr=o("FlaxBigBirdForSequenceClassification"),xxr=o(" (BigBird model)"),$xr=l(),m5=a("li"),f7e=a("strong"),kxr=o("distilbert"),Sxr=o(" \u2014 "),SJ=a("a"),Rxr=o("FlaxDistilBertForSequenceClassification"),Bxr=o(" (DistilBERT model)"),Pxr=l(),g5=a("li"),m7e=a("strong"),Ixr=o("electra"),qxr=o(" \u2014 "),RJ=a("a"),Nxr=o("FlaxElectraForSequenceClassification"),jxr=o(" (ELECTRA model)"),Dxr=l(),h5=a("li"),g7e=a("strong"),Gxr=o("mbart"),Oxr=o(" \u2014 "),BJ=a("a"),Vxr=o("FlaxMBartForSequenceClassification"),Xxr=o(" (mBART model)"),zxr=l(),p5=a("li"),h7e=a("strong"),Qxr=o("roberta"),Wxr=o(" \u2014 "),PJ=a("a"),Hxr=o("FlaxRobertaForSequenceClassification"),Uxr=o(" (RoBERTa model)"),Jxr=l(),u5=a("li"),p7e=a("strong"),Yxr=o("roformer"),Kxr=o(" \u2014 "),IJ=a("a"),Zxr=o("FlaxRoFormerForSequenceClassification"),e$r=o(" (RoFormer model)"),o$r=l(),_5=a("li"),u7e=a("strong"),r$r=o("xlm-roberta"),t$r=o(" \u2014 "),qJ=a("a"),a$r=o("FlaxXLMRobertaForSequenceClassification"),n$r=o(" (XLM-RoBERTa model)"),s$r=l(),F(b5.$$.fragment),IIe=l(),Ic=a("h2"),v5=a("a"),_7e=a("span"),F(e8.$$.fragment),l$r=l(),b7e=a("span"),i$r=o("FlaxAutoModelForQuestionAnswering"),qIe=l(),ur=a("div"),F(o8.$$.fragment),d$r=l(),qc=a("p"),c$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NJ=a("a"),f$r=o("from_pretrained()"),m$r=o(" class method or the "),jJ=a("a"),g$r=o("from_config()"),h$r=o(` class
method.`),p$r=l(),r8=a("p"),u$r=o("This class cannot be instantiated directly using "),v7e=a("code"),_$r=o("__init__()"),b$r=o(" (throws an error)."),v$r=l(),Ot=a("div"),F(t8.$$.fragment),F$r=l(),F7e=a("p"),T$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M$r=l(),Nc=a("p"),E$r=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),C$r=o("not"),w$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=a("a"),A$r=o("from_pretrained()"),y$r=o(" to load the model weights."),L$r=l(),F(F5.$$.fragment),x$r=l(),Vr=a("div"),F(a8.$$.fragment),$$r=l(),M7e=a("p"),k$r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S$r=l(),pn=a("p"),R$r=o("The model class to instantiate is selected based on the "),E7e=a("code"),B$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),I$r=o("pretrained_model_name_or_path"),q$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),N$r=o("pretrained_model_name_or_path"),j$r=o(":"),D$r=l(),ke=a("ul"),T5=a("li"),A7e=a("strong"),G$r=o("albert"),O$r=o(" \u2014 "),GJ=a("a"),V$r=o("FlaxAlbertForQuestionAnswering"),X$r=o(" (ALBERT model)"),z$r=l(),M5=a("li"),y7e=a("strong"),Q$r=o("bart"),W$r=o(" \u2014 "),OJ=a("a"),H$r=o("FlaxBartForQuestionAnswering"),U$r=o(" (BART model)"),J$r=l(),E5=a("li"),L7e=a("strong"),Y$r=o("bert"),K$r=o(" \u2014 "),VJ=a("a"),Z$r=o("FlaxBertForQuestionAnswering"),ekr=o(" (BERT model)"),okr=l(),C5=a("li"),x7e=a("strong"),rkr=o("big_bird"),tkr=o(" \u2014 "),XJ=a("a"),akr=o("FlaxBigBirdForQuestionAnswering"),nkr=o(" (BigBird model)"),skr=l(),w5=a("li"),$7e=a("strong"),lkr=o("distilbert"),ikr=o(" \u2014 "),zJ=a("a"),dkr=o("FlaxDistilBertForQuestionAnswering"),ckr=o(" (DistilBERT model)"),fkr=l(),A5=a("li"),k7e=a("strong"),mkr=o("electra"),gkr=o(" \u2014 "),QJ=a("a"),hkr=o("FlaxElectraForQuestionAnswering"),pkr=o(" (ELECTRA model)"),ukr=l(),y5=a("li"),S7e=a("strong"),_kr=o("mbart"),bkr=o(" \u2014 "),WJ=a("a"),vkr=o("FlaxMBartForQuestionAnswering"),Fkr=o(" (mBART model)"),Tkr=l(),L5=a("li"),R7e=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),HJ=a("a"),Ckr=o("FlaxRobertaForQuestionAnswering"),wkr=o(" (RoBERTa model)"),Akr=l(),x5=a("li"),B7e=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),UJ=a("a"),xkr=o("FlaxRoFormerForQuestionAnswering"),$kr=o(" (RoFormer model)"),kkr=l(),$5=a("li"),P7e=a("strong"),Skr=o("xlm-roberta"),Rkr=o(" \u2014 "),JJ=a("a"),Bkr=o("FlaxXLMRobertaForQuestionAnswering"),Pkr=o(" (XLM-RoBERTa model)"),Ikr=l(),F(k5.$$.fragment),NIe=l(),jc=a("h2"),S5=a("a"),I7e=a("span"),F(n8.$$.fragment),qkr=l(),q7e=a("span"),Nkr=o("FlaxAutoModelForTokenClassification"),jIe=l(),_r=a("div"),F(s8.$$.fragment),jkr=l(),Dc=a("p"),Dkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YJ=a("a"),Gkr=o("from_pretrained()"),Okr=o(" class method or the "),KJ=a("a"),Vkr=o("from_config()"),Xkr=o(` class
method.`),zkr=l(),l8=a("p"),Qkr=o("This class cannot be instantiated directly using "),N7e=a("code"),Wkr=o("__init__()"),Hkr=o(" (throws an error)."),Ukr=l(),Vt=a("div"),F(i8.$$.fragment),Jkr=l(),j7e=a("p"),Ykr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Kkr=l(),Gc=a("p"),Zkr=o(`Note:
Loading a model from its configuration file does `),D7e=a("strong"),eSr=o("not"),oSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=a("a"),rSr=o("from_pretrained()"),tSr=o(" to load the model weights."),aSr=l(),F(R5.$$.fragment),nSr=l(),Xr=a("div"),F(d8.$$.fragment),sSr=l(),G7e=a("p"),lSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iSr=l(),un=a("p"),dSr=o("The model class to instantiate is selected based on the "),O7e=a("code"),cSr=o("model_type"),fSr=o(` property of the config object (either
passed as an argument or loaded from `),V7e=a("code"),mSr=o("pretrained_model_name_or_path"),gSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=a("code"),hSr=o("pretrained_model_name_or_path"),pSr=o(":"),uSr=l(),Ge=a("ul"),B5=a("li"),z7e=a("strong"),_Sr=o("albert"),bSr=o(" \u2014 "),eY=a("a"),vSr=o("FlaxAlbertForTokenClassification"),FSr=o(" (ALBERT model)"),TSr=l(),P5=a("li"),Q7e=a("strong"),MSr=o("bert"),ESr=o(" \u2014 "),oY=a("a"),CSr=o("FlaxBertForTokenClassification"),wSr=o(" (BERT model)"),ASr=l(),I5=a("li"),W7e=a("strong"),ySr=o("big_bird"),LSr=o(" \u2014 "),rY=a("a"),xSr=o("FlaxBigBirdForTokenClassification"),$Sr=o(" (BigBird model)"),kSr=l(),q5=a("li"),H7e=a("strong"),SSr=o("distilbert"),RSr=o(" \u2014 "),tY=a("a"),BSr=o("FlaxDistilBertForTokenClassification"),PSr=o(" (DistilBERT model)"),ISr=l(),N5=a("li"),U7e=a("strong"),qSr=o("electra"),NSr=o(" \u2014 "),aY=a("a"),jSr=o("FlaxElectraForTokenClassification"),DSr=o(" (ELECTRA model)"),GSr=l(),j5=a("li"),J7e=a("strong"),OSr=o("roberta"),VSr=o(" \u2014 "),nY=a("a"),XSr=o("FlaxRobertaForTokenClassification"),zSr=o(" (RoBERTa model)"),QSr=l(),D5=a("li"),Y7e=a("strong"),WSr=o("roformer"),HSr=o(" \u2014 "),sY=a("a"),USr=o("FlaxRoFormerForTokenClassification"),JSr=o(" (RoFormer model)"),YSr=l(),G5=a("li"),K7e=a("strong"),KSr=o("xlm-roberta"),ZSr=o(" \u2014 "),lY=a("a"),eRr=o("FlaxXLMRobertaForTokenClassification"),oRr=o(" (XLM-RoBERTa model)"),rRr=l(),F(O5.$$.fragment),DIe=l(),Oc=a("h2"),V5=a("a"),Z7e=a("span"),F(c8.$$.fragment),tRr=l(),e9e=a("span"),aRr=o("FlaxAutoModelForMultipleChoice"),GIe=l(),br=a("div"),F(f8.$$.fragment),nRr=l(),Vc=a("p"),sRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iY=a("a"),lRr=o("from_pretrained()"),iRr=o(" class method or the "),dY=a("a"),dRr=o("from_config()"),cRr=o(` class
method.`),fRr=l(),m8=a("p"),mRr=o("This class cannot be instantiated directly using "),o9e=a("code"),gRr=o("__init__()"),hRr=o(" (throws an error)."),pRr=l(),Xt=a("div"),F(g8.$$.fragment),uRr=l(),r9e=a("p"),_Rr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),bRr=l(),Xc=a("p"),vRr=o(`Note:
Loading a model from its configuration file does `),t9e=a("strong"),FRr=o("not"),TRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),MRr=o("from_pretrained()"),ERr=o(" to load the model weights."),CRr=l(),F(X5.$$.fragment),wRr=l(),zr=a("div"),F(h8.$$.fragment),ARr=l(),a9e=a("p"),yRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),LRr=l(),_n=a("p"),xRr=o("The model class to instantiate is selected based on the "),n9e=a("code"),$Rr=o("model_type"),kRr=o(` property of the config object (either
passed as an argument or loaded from `),s9e=a("code"),SRr=o("pretrained_model_name_or_path"),RRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=a("code"),BRr=o("pretrained_model_name_or_path"),PRr=o(":"),IRr=l(),Oe=a("ul"),z5=a("li"),i9e=a("strong"),qRr=o("albert"),NRr=o(" \u2014 "),fY=a("a"),jRr=o("FlaxAlbertForMultipleChoice"),DRr=o(" (ALBERT model)"),GRr=l(),Q5=a("li"),d9e=a("strong"),ORr=o("bert"),VRr=o(" \u2014 "),mY=a("a"),XRr=o("FlaxBertForMultipleChoice"),zRr=o(" (BERT model)"),QRr=l(),W5=a("li"),c9e=a("strong"),WRr=o("big_bird"),HRr=o(" \u2014 "),gY=a("a"),URr=o("FlaxBigBirdForMultipleChoice"),JRr=o(" (BigBird model)"),YRr=l(),H5=a("li"),f9e=a("strong"),KRr=o("distilbert"),ZRr=o(" \u2014 "),hY=a("a"),eBr=o("FlaxDistilBertForMultipleChoice"),oBr=o(" (DistilBERT model)"),rBr=l(),U5=a("li"),m9e=a("strong"),tBr=o("electra"),aBr=o(" \u2014 "),pY=a("a"),nBr=o("FlaxElectraForMultipleChoice"),sBr=o(" (ELECTRA model)"),lBr=l(),J5=a("li"),g9e=a("strong"),iBr=o("roberta"),dBr=o(" \u2014 "),uY=a("a"),cBr=o("FlaxRobertaForMultipleChoice"),fBr=o(" (RoBERTa model)"),mBr=l(),Y5=a("li"),h9e=a("strong"),gBr=o("roformer"),hBr=o(" \u2014 "),_Y=a("a"),pBr=o("FlaxRoFormerForMultipleChoice"),uBr=o(" (RoFormer model)"),_Br=l(),K5=a("li"),p9e=a("strong"),bBr=o("xlm-roberta"),vBr=o(" \u2014 "),bY=a("a"),FBr=o("FlaxXLMRobertaForMultipleChoice"),TBr=o(" (XLM-RoBERTa model)"),MBr=l(),F(Z5.$$.fragment),OIe=l(),zc=a("h2"),eC=a("a"),u9e=a("span"),F(p8.$$.fragment),EBr=l(),_9e=a("span"),CBr=o("FlaxAutoModelForNextSentencePrediction"),VIe=l(),vr=a("div"),F(u8.$$.fragment),wBr=l(),Qc=a("p"),ABr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vY=a("a"),yBr=o("from_pretrained()"),LBr=o(" class method or the "),FY=a("a"),xBr=o("from_config()"),$Br=o(` class
method.`),kBr=l(),_8=a("p"),SBr=o("This class cannot be instantiated directly using "),b9e=a("code"),RBr=o("__init__()"),BBr=o(" (throws an error)."),PBr=l(),zt=a("div"),F(b8.$$.fragment),IBr=l(),v9e=a("p"),qBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),NBr=l(),Wc=a("p"),jBr=o(`Note:
Loading a model from its configuration file does `),F9e=a("strong"),DBr=o("not"),GBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=a("a"),OBr=o("from_pretrained()"),VBr=o(" to load the model weights."),XBr=l(),F(oC.$$.fragment),zBr=l(),Qr=a("div"),F(v8.$$.fragment),QBr=l(),T9e=a("p"),WBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),HBr=l(),bn=a("p"),UBr=o("The model class to instantiate is selected based on the "),M9e=a("code"),JBr=o("model_type"),YBr=o(` property of the config object (either
passed as an argument or loaded from `),E9e=a("code"),KBr=o("pretrained_model_name_or_path"),ZBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=a("code"),ePr=o("pretrained_model_name_or_path"),oPr=o(":"),rPr=l(),w9e=a("ul"),rC=a("li"),A9e=a("strong"),tPr=o("bert"),aPr=o(" \u2014 "),MY=a("a"),nPr=o("FlaxBertForNextSentencePrediction"),sPr=o(" (BERT model)"),lPr=l(),F(tC.$$.fragment),XIe=l(),Hc=a("h2"),aC=a("a"),y9e=a("span"),F(F8.$$.fragment),iPr=l(),L9e=a("span"),dPr=o("FlaxAutoModelForImageClassification"),zIe=l(),Fr=a("div"),F(T8.$$.fragment),cPr=l(),Uc=a("p"),fPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EY=a("a"),mPr=o("from_pretrained()"),gPr=o(" class method or the "),CY=a("a"),hPr=o("from_config()"),pPr=o(` class
method.`),uPr=l(),M8=a("p"),_Pr=o("This class cannot be instantiated directly using "),x9e=a("code"),bPr=o("__init__()"),vPr=o(" (throws an error)."),FPr=l(),Qt=a("div"),F(E8.$$.fragment),TPr=l(),$9e=a("p"),MPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EPr=l(),Jc=a("p"),CPr=o(`Note:
Loading a model from its configuration file does `),k9e=a("strong"),wPr=o("not"),APr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),yPr=o("from_pretrained()"),LPr=o(" to load the model weights."),xPr=l(),F(nC.$$.fragment),$Pr=l(),Wr=a("div"),F(C8.$$.fragment),kPr=l(),S9e=a("p"),SPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RPr=l(),vn=a("p"),BPr=o("The model class to instantiate is selected based on the "),R9e=a("code"),PPr=o("model_type"),IPr=o(` property of the config object (either
passed as an argument or loaded from `),B9e=a("code"),qPr=o("pretrained_model_name_or_path"),NPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=a("code"),jPr=o("pretrained_model_name_or_path"),DPr=o(":"),GPr=l(),w8=a("ul"),sC=a("li"),I9e=a("strong"),OPr=o("beit"),VPr=o(" \u2014 "),AY=a("a"),XPr=o("FlaxBeitForImageClassification"),zPr=o(" (BEiT model)"),QPr=l(),lC=a("li"),q9e=a("strong"),WPr=o("vit"),HPr=o(" \u2014 "),yY=a("a"),UPr=o("FlaxViTForImageClassification"),JPr=o(" (ViT model)"),YPr=l(),F(iC.$$.fragment),QIe=l(),Yc=a("h2"),dC=a("a"),N9e=a("span"),F(A8.$$.fragment),KPr=l(),j9e=a("span"),ZPr=o("FlaxAutoModelForVision2Seq"),WIe=l(),Tr=a("div"),F(y8.$$.fragment),eIr=l(),Kc=a("p"),oIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LY=a("a"),rIr=o("from_pretrained()"),tIr=o(" class method or the "),xY=a("a"),aIr=o("from_config()"),nIr=o(` class
method.`),sIr=l(),L8=a("p"),lIr=o("This class cannot be instantiated directly using "),D9e=a("code"),iIr=o("__init__()"),dIr=o(" (throws an error)."),cIr=l(),Wt=a("div"),F(x8.$$.fragment),fIr=l(),G9e=a("p"),mIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gIr=l(),Zc=a("p"),hIr=o(`Note:
Loading a model from its configuration file does `),O9e=a("strong"),pIr=o("not"),uIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=a("a"),_Ir=o("from_pretrained()"),bIr=o(" to load the model weights."),vIr=l(),F(cC.$$.fragment),FIr=l(),Hr=a("div"),F($8.$$.fragment),TIr=l(),V9e=a("p"),MIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),EIr=l(),Fn=a("p"),CIr=o("The model class to instantiate is selected based on the "),X9e=a("code"),wIr=o("model_type"),AIr=o(` property of the config object (either
passed as an argument or loaded from `),z9e=a("code"),yIr=o("pretrained_model_name_or_path"),LIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q9e=a("code"),xIr=o("pretrained_model_name_or_path"),$Ir=o(":"),kIr=l(),W9e=a("ul"),fC=a("li"),H9e=a("strong"),SIr=o("vision-encoder-decoder"),RIr=o(" \u2014 "),kY=a("a"),BIr=o("FlaxVisionEncoderDecoderModel"),PIr=o(" (Vision Encoder decoder model)"),IIr=l(),F(mC.$$.fragment),this.h()},l(f){const _=QCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var k8=s(p);m=n(k8,"A",{id:!0,class:!0,href:!0});var U9e=s(m);u=n(U9e,"SPAN",{});var J9e=s(u);T(d.$$.fragment,J9e),J9e.forEach(t),U9e.forEach(t),h=i(k8),Mo=n(k8,"SPAN",{});var Y9e=s(Mo);ri=r(Y9e,"Auto Classes"),Y9e.forEach(t),k8.forEach(t),tf=i(f),Kr=n(f,"P",{});var S8=s(Kr);ti=r(S8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ai=n(S8,"CODE",{});var K9e=s(ai);Lw=r(K9e,"from_pretrained()"),K9e.forEach(t),af=r(S8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),S8.forEach(t),Ne=i(f),Xe=n(f,"P",{});var Tn=s(Xe);ni=r(Tn,"Instantiating one of "),Mn=n(Tn,"A",{href:!0});var Z9e=s(Mn);xw=r(Z9e,"AutoConfig"),Z9e.forEach(t),En=r(Tn,", "),Cn=n(Tn,"A",{href:!0});var eMe=s(Cn);$w=r(eMe,"AutoModel"),eMe.forEach(t),si=r(Tn,`, and
`),wn=n(Tn,"A",{href:!0});var oMe=s(wn);kw=r(oMe,"AutoTokenizer"),oMe.forEach(t),li=r(Tn," will directly create a class of the relevant architecture. For instance"),Tn.forEach(t),nf=i(f),T(va.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var R8=s(Ae);Xx=r(R8,"will create a model that is an instance of "),ii=n(R8,"A",{href:!0});var rMe=s(ii);zx=r(rMe,"BertModel"),rMe.forEach(t),Qx=r(R8,"."),R8.forEach(t),Eo=i(f),Fa=n(f,"P",{});var B8=s(Fa);Wx=r(B8,"There is one class of "),sf=n(B8,"CODE",{});var tMe=s(sf);Hx=r(tMe,"AutoModel"),tMe.forEach(t),ZNe=r(B8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),B8.forEach(t),WBe=i(f),di=n(f,"H2",{class:!0});var P8=s(di);lf=n(P8,"A",{id:!0,class:!0,href:!0});var aMe=s(lf);EZ=n(aMe,"SPAN",{});var nMe=s(EZ);T(Sw.$$.fragment,nMe),nMe.forEach(t),aMe.forEach(t),eje=i(P8),CZ=n(P8,"SPAN",{});var sMe=s(CZ);oje=r(sMe,"Extending the Auto Classes"),sMe.forEach(t),P8.forEach(t),HBe=i(f),An=n(f,"P",{});var ef=s(An);rje=r(ef,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),wZ=n(ef,"CODE",{});var lMe=s(wZ);tje=r(lMe,"NewModel"),lMe.forEach(t),aje=r(ef,", make sure you have a "),AZ=n(ef,"CODE",{});var iMe=s(AZ);nje=r(iMe,"NewModelConfig"),iMe.forEach(t),sje=r(ef,` then you can add those to the auto
classes like this:`),ef.forEach(t),UBe=i(f),T(Rw.$$.fragment,f),JBe=i(f),Ux=n(f,"P",{});var dMe=s(Ux);lje=r(dMe,"You will then be able to use the auto classes like you would usually do!"),dMe.forEach(t),YBe=i(f),T(df.$$.fragment,f),KBe=i(f),ci=n(f,"H2",{class:!0});var I8=s(ci);cf=n(I8,"A",{id:!0,class:!0,href:!0});var cMe=s(cf);yZ=n(cMe,"SPAN",{});var fMe=s(yZ);T(Bw.$$.fragment,fMe),fMe.forEach(t),cMe.forEach(t),ije=i(I8),LZ=n(I8,"SPAN",{});var mMe=s(LZ);dje=r(mMe,"AutoConfig"),mMe.forEach(t),I8.forEach(t),ZBe=i(f),Co=n(f,"DIV",{class:!0});var Jr=s(Co);T(Pw.$$.fragment,Jr),cje=i(Jr),Iw=n(Jr,"P",{});var q8=s(Iw);fje=r(q8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Jx=n(q8,"A",{href:!0});var gMe=s(Jx);mje=r(gMe,"from_pretrained()"),gMe.forEach(t),gje=r(q8," class method."),q8.forEach(t),hje=i(Jr),qw=n(Jr,"P",{});var N8=s(qw);pje=r(N8,"This class cannot be instantiated directly using "),xZ=n(N8,"CODE",{});var hMe=s(xZ);uje=r(hMe,"__init__()"),hMe.forEach(t),_je=r(N8," (throws an error)."),N8.forEach(t),bje=i(Jr),Mr=n(Jr,"DIV",{class:!0});var Yr=s(Mr);T(Nw.$$.fragment,Yr),vje=i(Yr),$Z=n(Yr,"P",{});var pMe=s($Z);Fje=r(pMe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),pMe.forEach(t),Tje=i(Yr),fi=n(Yr,"P",{});var of=s(fi);Mje=r(of,"The configuration class to instantiate is selected based on the "),kZ=n(of,"CODE",{});var uMe=s(kZ);Eje=r(uMe,"model_type"),uMe.forEach(t),Cje=r(of,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),SZ=n(of,"CODE",{});var _Me=s(SZ);wje=r(_Me,"pretrained_model_name_or_path"),_Me.forEach(t),Aje=r(of,":"),of.forEach(t),yje=i(Yr),A=n(Yr,"UL",{});var y=s(A);ff=n(y,"LI",{});var gC=s(ff);RZ=n(gC,"STRONG",{});var bMe=s(RZ);Lje=r(bMe,"albert"),bMe.forEach(t),xje=r(gC," \u2014 "),Yx=n(gC,"A",{href:!0});var vMe=s(Yx);$je=r(vMe,"AlbertConfig"),vMe.forEach(t),kje=r(gC," (ALBERT model)"),gC.forEach(t),Sje=i(y),mf=n(y,"LI",{});var hC=s(mf);BZ=n(hC,"STRONG",{});var FMe=s(BZ);Rje=r(FMe,"bart"),FMe.forEach(t),Bje=r(hC," \u2014 "),Kx=n(hC,"A",{href:!0});var TMe=s(Kx);Pje=r(TMe,"BartConfig"),TMe.forEach(t),Ije=r(hC," (BART model)"),hC.forEach(t),qje=i(y),gf=n(y,"LI",{});var pC=s(gf);PZ=n(pC,"STRONG",{});var MMe=s(PZ);Nje=r(MMe,"beit"),MMe.forEach(t),jje=r(pC," \u2014 "),Zx=n(pC,"A",{href:!0});var EMe=s(Zx);Dje=r(EMe,"BeitConfig"),EMe.forEach(t),Gje=r(pC," (BEiT model)"),pC.forEach(t),Oje=i(y),hf=n(y,"LI",{});var uC=s(hf);IZ=n(uC,"STRONG",{});var CMe=s(IZ);Vje=r(CMe,"bert"),CMe.forEach(t),Xje=r(uC," \u2014 "),e$=n(uC,"A",{href:!0});var wMe=s(e$);zje=r(wMe,"BertConfig"),wMe.forEach(t),Qje=r(uC," (BERT model)"),uC.forEach(t),Wje=i(y),pf=n(y,"LI",{});var _C=s(pf);qZ=n(_C,"STRONG",{});var AMe=s(qZ);Hje=r(AMe,"bert-generation"),AMe.forEach(t),Uje=r(_C," \u2014 "),o$=n(_C,"A",{href:!0});var yMe=s(o$);Jje=r(yMe,"BertGenerationConfig"),yMe.forEach(t),Yje=r(_C," (Bert Generation model)"),_C.forEach(t),Kje=i(y),uf=n(y,"LI",{});var bC=s(uf);NZ=n(bC,"STRONG",{});var LMe=s(NZ);Zje=r(LMe,"big_bird"),LMe.forEach(t),eDe=r(bC," \u2014 "),r$=n(bC,"A",{href:!0});var xMe=s(r$);oDe=r(xMe,"BigBirdConfig"),xMe.forEach(t),rDe=r(bC," (BigBird model)"),bC.forEach(t),tDe=i(y),_f=n(y,"LI",{});var vC=s(_f);jZ=n(vC,"STRONG",{});var $Me=s(jZ);aDe=r($Me,"bigbird_pegasus"),$Me.forEach(t),nDe=r(vC," \u2014 "),t$=n(vC,"A",{href:!0});var kMe=s(t$);sDe=r(kMe,"BigBirdPegasusConfig"),kMe.forEach(t),lDe=r(vC," (BigBirdPegasus model)"),vC.forEach(t),iDe=i(y),bf=n(y,"LI",{});var FC=s(bf);DZ=n(FC,"STRONG",{});var SMe=s(DZ);dDe=r(SMe,"blenderbot"),SMe.forEach(t),cDe=r(FC," \u2014 "),a$=n(FC,"A",{href:!0});var RMe=s(a$);fDe=r(RMe,"BlenderbotConfig"),RMe.forEach(t),mDe=r(FC," (Blenderbot model)"),FC.forEach(t),gDe=i(y),vf=n(y,"LI",{});var TC=s(vf);GZ=n(TC,"STRONG",{});var BMe=s(GZ);hDe=r(BMe,"blenderbot-small"),BMe.forEach(t),pDe=r(TC," \u2014 "),n$=n(TC,"A",{href:!0});var PMe=s(n$);uDe=r(PMe,"BlenderbotSmallConfig"),PMe.forEach(t),_De=r(TC," (BlenderbotSmall model)"),TC.forEach(t),bDe=i(y),Ff=n(y,"LI",{});var MC=s(Ff);OZ=n(MC,"STRONG",{});var IMe=s(OZ);vDe=r(IMe,"camembert"),IMe.forEach(t),FDe=r(MC," \u2014 "),s$=n(MC,"A",{href:!0});var qMe=s(s$);TDe=r(qMe,"CamembertConfig"),qMe.forEach(t),MDe=r(MC," (CamemBERT model)"),MC.forEach(t),EDe=i(y),Tf=n(y,"LI",{});var EC=s(Tf);VZ=n(EC,"STRONG",{});var NMe=s(VZ);CDe=r(NMe,"canine"),NMe.forEach(t),wDe=r(EC," \u2014 "),l$=n(EC,"A",{href:!0});var jMe=s(l$);ADe=r(jMe,"CanineConfig"),jMe.forEach(t),yDe=r(EC," (Canine model)"),EC.forEach(t),LDe=i(y),Mf=n(y,"LI",{});var CC=s(Mf);XZ=n(CC,"STRONG",{});var DMe=s(XZ);xDe=r(DMe,"clip"),DMe.forEach(t),$De=r(CC," \u2014 "),i$=n(CC,"A",{href:!0});var GMe=s(i$);kDe=r(GMe,"CLIPConfig"),GMe.forEach(t),SDe=r(CC," (CLIP model)"),CC.forEach(t),RDe=i(y),Ef=n(y,"LI",{});var wC=s(Ef);zZ=n(wC,"STRONG",{});var OMe=s(zZ);BDe=r(OMe,"convbert"),OMe.forEach(t),PDe=r(wC," \u2014 "),d$=n(wC,"A",{href:!0});var VMe=s(d$);IDe=r(VMe,"ConvBertConfig"),VMe.forEach(t),qDe=r(wC," (ConvBERT model)"),wC.forEach(t),NDe=i(y),Cf=n(y,"LI",{});var AC=s(Cf);QZ=n(AC,"STRONG",{});var XMe=s(QZ);jDe=r(XMe,"convnext"),XMe.forEach(t),DDe=r(AC," \u2014 "),c$=n(AC,"A",{href:!0});var zMe=s(c$);GDe=r(zMe,"ConvNextConfig"),zMe.forEach(t),ODe=r(AC," (ConvNext model)"),AC.forEach(t),VDe=i(y),wf=n(y,"LI",{});var yC=s(wf);WZ=n(yC,"STRONG",{});var QMe=s(WZ);XDe=r(QMe,"ctrl"),QMe.forEach(t),zDe=r(yC," \u2014 "),f$=n(yC,"A",{href:!0});var WMe=s(f$);QDe=r(WMe,"CTRLConfig"),WMe.forEach(t),WDe=r(yC," (CTRL model)"),yC.forEach(t),HDe=i(y),Af=n(y,"LI",{});var LC=s(Af);HZ=n(LC,"STRONG",{});var HMe=s(HZ);UDe=r(HMe,"data2vec-audio"),HMe.forEach(t),JDe=r(LC," \u2014 "),m$=n(LC,"A",{href:!0});var UMe=s(m$);YDe=r(UMe,"Data2VecAudioConfig"),UMe.forEach(t),KDe=r(LC," (Data2VecAudio model)"),LC.forEach(t),ZDe=i(y),yf=n(y,"LI",{});var xC=s(yf);UZ=n(xC,"STRONG",{});var JMe=s(UZ);eGe=r(JMe,"data2vec-text"),JMe.forEach(t),oGe=r(xC," \u2014 "),g$=n(xC,"A",{href:!0});var YMe=s(g$);rGe=r(YMe,"Data2VecTextConfig"),YMe.forEach(t),tGe=r(xC," (Data2VecText model)"),xC.forEach(t),aGe=i(y),Lf=n(y,"LI",{});var $C=s(Lf);JZ=n($C,"STRONG",{});var KMe=s(JZ);nGe=r(KMe,"data2vec-vision"),KMe.forEach(t),sGe=r($C," \u2014 "),h$=n($C,"A",{href:!0});var ZMe=s(h$);lGe=r(ZMe,"Data2VecVisionConfig"),ZMe.forEach(t),iGe=r($C," (Data2VecVision model)"),$C.forEach(t),dGe=i(y),xf=n(y,"LI",{});var kC=s(xf);YZ=n(kC,"STRONG",{});var e4e=s(YZ);cGe=r(e4e,"deberta"),e4e.forEach(t),fGe=r(kC," \u2014 "),p$=n(kC,"A",{href:!0});var o4e=s(p$);mGe=r(o4e,"DebertaConfig"),o4e.forEach(t),gGe=r(kC," (DeBERTa model)"),kC.forEach(t),hGe=i(y),$f=n(y,"LI",{});var SC=s($f);KZ=n(SC,"STRONG",{});var r4e=s(KZ);pGe=r(r4e,"deberta-v2"),r4e.forEach(t),uGe=r(SC," \u2014 "),u$=n(SC,"A",{href:!0});var t4e=s(u$);_Ge=r(t4e,"DebertaV2Config"),t4e.forEach(t),bGe=r(SC," (DeBERTa-v2 model)"),SC.forEach(t),vGe=i(y),kf=n(y,"LI",{});var RC=s(kf);ZZ=n(RC,"STRONG",{});var a4e=s(ZZ);FGe=r(a4e,"decision_transformer"),a4e.forEach(t),TGe=r(RC," \u2014 "),_$=n(RC,"A",{href:!0});var n4e=s(_$);MGe=r(n4e,"DecisionTransformerConfig"),n4e.forEach(t),EGe=r(RC," (Decision Transformer model)"),RC.forEach(t),CGe=i(y),Sf=n(y,"LI",{});var BC=s(Sf);eee=n(BC,"STRONG",{});var s4e=s(eee);wGe=r(s4e,"deit"),s4e.forEach(t),AGe=r(BC," \u2014 "),b$=n(BC,"A",{href:!0});var l4e=s(b$);yGe=r(l4e,"DeiTConfig"),l4e.forEach(t),LGe=r(BC," (DeiT model)"),BC.forEach(t),xGe=i(y),Rf=n(y,"LI",{});var i4e=s(Rf);oee=n(i4e,"STRONG",{});var NIr=s(oee);$Ge=r(NIr,"detr"),NIr.forEach(t),kGe=r(i4e," \u2014 "),v$=n(i4e,"A",{href:!0});var jIr=s(v$);SGe=r(jIr,"DetrConfig"),jIr.forEach(t),RGe=r(i4e," (DETR model)"),i4e.forEach(t),BGe=i(y),Bf=n(y,"LI",{});var d4e=s(Bf);ree=n(d4e,"STRONG",{});var DIr=s(ree);PGe=r(DIr,"distilbert"),DIr.forEach(t),IGe=r(d4e," \u2014 "),F$=n(d4e,"A",{href:!0});var GIr=s(F$);qGe=r(GIr,"DistilBertConfig"),GIr.forEach(t),NGe=r(d4e," (DistilBERT model)"),d4e.forEach(t),jGe=i(y),Pf=n(y,"LI",{});var c4e=s(Pf);tee=n(c4e,"STRONG",{});var OIr=s(tee);DGe=r(OIr,"dpr"),OIr.forEach(t),GGe=r(c4e," \u2014 "),T$=n(c4e,"A",{href:!0});var VIr=s(T$);OGe=r(VIr,"DPRConfig"),VIr.forEach(t),VGe=r(c4e," (DPR model)"),c4e.forEach(t),XGe=i(y),If=n(y,"LI",{});var f4e=s(If);aee=n(f4e,"STRONG",{});var XIr=s(aee);zGe=r(XIr,"dpt"),XIr.forEach(t),QGe=r(f4e," \u2014 "),M$=n(f4e,"A",{href:!0});var zIr=s(M$);WGe=r(zIr,"DPTConfig"),zIr.forEach(t),HGe=r(f4e," (DPT model)"),f4e.forEach(t),UGe=i(y),qf=n(y,"LI",{});var m4e=s(qf);nee=n(m4e,"STRONG",{});var QIr=s(nee);JGe=r(QIr,"electra"),QIr.forEach(t),YGe=r(m4e," \u2014 "),E$=n(m4e,"A",{href:!0});var WIr=s(E$);KGe=r(WIr,"ElectraConfig"),WIr.forEach(t),ZGe=r(m4e," (ELECTRA model)"),m4e.forEach(t),eOe=i(y),Nf=n(y,"LI",{});var g4e=s(Nf);see=n(g4e,"STRONG",{});var HIr=s(see);oOe=r(HIr,"encoder-decoder"),HIr.forEach(t),rOe=r(g4e," \u2014 "),C$=n(g4e,"A",{href:!0});var UIr=s(C$);tOe=r(UIr,"EncoderDecoderConfig"),UIr.forEach(t),aOe=r(g4e," (Encoder decoder model)"),g4e.forEach(t),nOe=i(y),jf=n(y,"LI",{});var h4e=s(jf);lee=n(h4e,"STRONG",{});var JIr=s(lee);sOe=r(JIr,"flaubert"),JIr.forEach(t),lOe=r(h4e," \u2014 "),w$=n(h4e,"A",{href:!0});var YIr=s(w$);iOe=r(YIr,"FlaubertConfig"),YIr.forEach(t),dOe=r(h4e," (FlauBERT model)"),h4e.forEach(t),cOe=i(y),Df=n(y,"LI",{});var p4e=s(Df);iee=n(p4e,"STRONG",{});var KIr=s(iee);fOe=r(KIr,"fnet"),KIr.forEach(t),mOe=r(p4e," \u2014 "),A$=n(p4e,"A",{href:!0});var ZIr=s(A$);gOe=r(ZIr,"FNetConfig"),ZIr.forEach(t),hOe=r(p4e," (FNet model)"),p4e.forEach(t),pOe=i(y),Gf=n(y,"LI",{});var u4e=s(Gf);dee=n(u4e,"STRONG",{});var eqr=s(dee);uOe=r(eqr,"fsmt"),eqr.forEach(t),_Oe=r(u4e," \u2014 "),y$=n(u4e,"A",{href:!0});var oqr=s(y$);bOe=r(oqr,"FSMTConfig"),oqr.forEach(t),vOe=r(u4e," (FairSeq Machine-Translation model)"),u4e.forEach(t),FOe=i(y),Of=n(y,"LI",{});var _4e=s(Of);cee=n(_4e,"STRONG",{});var rqr=s(cee);TOe=r(rqr,"funnel"),rqr.forEach(t),MOe=r(_4e," \u2014 "),L$=n(_4e,"A",{href:!0});var tqr=s(L$);EOe=r(tqr,"FunnelConfig"),tqr.forEach(t),COe=r(_4e," (Funnel Transformer model)"),_4e.forEach(t),wOe=i(y),Vf=n(y,"LI",{});var b4e=s(Vf);fee=n(b4e,"STRONG",{});var aqr=s(fee);AOe=r(aqr,"glpn"),aqr.forEach(t),yOe=r(b4e," \u2014 "),x$=n(b4e,"A",{href:!0});var nqr=s(x$);LOe=r(nqr,"GLPNConfig"),nqr.forEach(t),xOe=r(b4e," (GLPN model)"),b4e.forEach(t),$Oe=i(y),Xf=n(y,"LI",{});var v4e=s(Xf);mee=n(v4e,"STRONG",{});var sqr=s(mee);kOe=r(sqr,"gpt2"),sqr.forEach(t),SOe=r(v4e," \u2014 "),$$=n(v4e,"A",{href:!0});var lqr=s($$);ROe=r(lqr,"GPT2Config"),lqr.forEach(t),BOe=r(v4e," (OpenAI GPT-2 model)"),v4e.forEach(t),POe=i(y),zf=n(y,"LI",{});var F4e=s(zf);gee=n(F4e,"STRONG",{});var iqr=s(gee);IOe=r(iqr,"gpt_neo"),iqr.forEach(t),qOe=r(F4e," \u2014 "),k$=n(F4e,"A",{href:!0});var dqr=s(k$);NOe=r(dqr,"GPTNeoConfig"),dqr.forEach(t),jOe=r(F4e," (GPT Neo model)"),F4e.forEach(t),DOe=i(y),Qf=n(y,"LI",{});var T4e=s(Qf);hee=n(T4e,"STRONG",{});var cqr=s(hee);GOe=r(cqr,"gptj"),cqr.forEach(t),OOe=r(T4e," \u2014 "),S$=n(T4e,"A",{href:!0});var fqr=s(S$);VOe=r(fqr,"GPTJConfig"),fqr.forEach(t),XOe=r(T4e," (GPT-J model)"),T4e.forEach(t),zOe=i(y),Wf=n(y,"LI",{});var M4e=s(Wf);pee=n(M4e,"STRONG",{});var mqr=s(pee);QOe=r(mqr,"hubert"),mqr.forEach(t),WOe=r(M4e," \u2014 "),R$=n(M4e,"A",{href:!0});var gqr=s(R$);HOe=r(gqr,"HubertConfig"),gqr.forEach(t),UOe=r(M4e," (Hubert model)"),M4e.forEach(t),JOe=i(y),Hf=n(y,"LI",{});var E4e=s(Hf);uee=n(E4e,"STRONG",{});var hqr=s(uee);YOe=r(hqr,"ibert"),hqr.forEach(t),KOe=r(E4e," \u2014 "),B$=n(E4e,"A",{href:!0});var pqr=s(B$);ZOe=r(pqr,"IBertConfig"),pqr.forEach(t),eVe=r(E4e," (I-BERT model)"),E4e.forEach(t),oVe=i(y),Uf=n(y,"LI",{});var C4e=s(Uf);_ee=n(C4e,"STRONG",{});var uqr=s(_ee);rVe=r(uqr,"imagegpt"),uqr.forEach(t),tVe=r(C4e," \u2014 "),P$=n(C4e,"A",{href:!0});var _qr=s(P$);aVe=r(_qr,"ImageGPTConfig"),_qr.forEach(t),nVe=r(C4e," (ImageGPT model)"),C4e.forEach(t),sVe=i(y),Jf=n(y,"LI",{});var w4e=s(Jf);bee=n(w4e,"STRONG",{});var bqr=s(bee);lVe=r(bqr,"layoutlm"),bqr.forEach(t),iVe=r(w4e," \u2014 "),I$=n(w4e,"A",{href:!0});var vqr=s(I$);dVe=r(vqr,"LayoutLMConfig"),vqr.forEach(t),cVe=r(w4e," (LayoutLM model)"),w4e.forEach(t),fVe=i(y),Yf=n(y,"LI",{});var A4e=s(Yf);vee=n(A4e,"STRONG",{});var Fqr=s(vee);mVe=r(Fqr,"layoutlmv2"),Fqr.forEach(t),gVe=r(A4e," \u2014 "),q$=n(A4e,"A",{href:!0});var Tqr=s(q$);hVe=r(Tqr,"LayoutLMv2Config"),Tqr.forEach(t),pVe=r(A4e," (LayoutLMv2 model)"),A4e.forEach(t),uVe=i(y),Kf=n(y,"LI",{});var y4e=s(Kf);Fee=n(y4e,"STRONG",{});var Mqr=s(Fee);_Ve=r(Mqr,"led"),Mqr.forEach(t),bVe=r(y4e," \u2014 "),N$=n(y4e,"A",{href:!0});var Eqr=s(N$);vVe=r(Eqr,"LEDConfig"),Eqr.forEach(t),FVe=r(y4e," (LED model)"),y4e.forEach(t),TVe=i(y),Zf=n(y,"LI",{});var L4e=s(Zf);Tee=n(L4e,"STRONG",{});var Cqr=s(Tee);MVe=r(Cqr,"longformer"),Cqr.forEach(t),EVe=r(L4e," \u2014 "),j$=n(L4e,"A",{href:!0});var wqr=s(j$);CVe=r(wqr,"LongformerConfig"),wqr.forEach(t),wVe=r(L4e," (Longformer model)"),L4e.forEach(t),AVe=i(y),em=n(y,"LI",{});var x4e=s(em);Mee=n(x4e,"STRONG",{});var Aqr=s(Mee);yVe=r(Aqr,"longt5"),Aqr.forEach(t),LVe=r(x4e," \u2014 "),D$=n(x4e,"A",{href:!0});var yqr=s(D$);xVe=r(yqr,"LongT5Config"),yqr.forEach(t),$Ve=r(x4e," (LongT5 model)"),x4e.forEach(t),kVe=i(y),om=n(y,"LI",{});var $4e=s(om);Eee=n($4e,"STRONG",{});var Lqr=s(Eee);SVe=r(Lqr,"luke"),Lqr.forEach(t),RVe=r($4e," \u2014 "),G$=n($4e,"A",{href:!0});var xqr=s(G$);BVe=r(xqr,"LukeConfig"),xqr.forEach(t),PVe=r($4e," (LUKE model)"),$4e.forEach(t),IVe=i(y),rm=n(y,"LI",{});var k4e=s(rm);Cee=n(k4e,"STRONG",{});var $qr=s(Cee);qVe=r($qr,"lxmert"),$qr.forEach(t),NVe=r(k4e," \u2014 "),O$=n(k4e,"A",{href:!0});var kqr=s(O$);jVe=r(kqr,"LxmertConfig"),kqr.forEach(t),DVe=r(k4e," (LXMERT model)"),k4e.forEach(t),GVe=i(y),tm=n(y,"LI",{});var S4e=s(tm);wee=n(S4e,"STRONG",{});var Sqr=s(wee);OVe=r(Sqr,"m2m_100"),Sqr.forEach(t),VVe=r(S4e," \u2014 "),V$=n(S4e,"A",{href:!0});var Rqr=s(V$);XVe=r(Rqr,"M2M100Config"),Rqr.forEach(t),zVe=r(S4e," (M2M100 model)"),S4e.forEach(t),QVe=i(y),am=n(y,"LI",{});var R4e=s(am);Aee=n(R4e,"STRONG",{});var Bqr=s(Aee);WVe=r(Bqr,"marian"),Bqr.forEach(t),HVe=r(R4e," \u2014 "),X$=n(R4e,"A",{href:!0});var Pqr=s(X$);UVe=r(Pqr,"MarianConfig"),Pqr.forEach(t),JVe=r(R4e," (Marian model)"),R4e.forEach(t),YVe=i(y),nm=n(y,"LI",{});var B4e=s(nm);yee=n(B4e,"STRONG",{});var Iqr=s(yee);KVe=r(Iqr,"maskformer"),Iqr.forEach(t),ZVe=r(B4e," \u2014 "),z$=n(B4e,"A",{href:!0});var qqr=s(z$);eXe=r(qqr,"MaskFormerConfig"),qqr.forEach(t),oXe=r(B4e," (MaskFormer model)"),B4e.forEach(t),rXe=i(y),sm=n(y,"LI",{});var P4e=s(sm);Lee=n(P4e,"STRONG",{});var Nqr=s(Lee);tXe=r(Nqr,"mbart"),Nqr.forEach(t),aXe=r(P4e," \u2014 "),Q$=n(P4e,"A",{href:!0});var jqr=s(Q$);nXe=r(jqr,"MBartConfig"),jqr.forEach(t),sXe=r(P4e," (mBART model)"),P4e.forEach(t),lXe=i(y),lm=n(y,"LI",{});var I4e=s(lm);xee=n(I4e,"STRONG",{});var Dqr=s(xee);iXe=r(Dqr,"megatron-bert"),Dqr.forEach(t),dXe=r(I4e," \u2014 "),W$=n(I4e,"A",{href:!0});var Gqr=s(W$);cXe=r(Gqr,"MegatronBertConfig"),Gqr.forEach(t),fXe=r(I4e," (MegatronBert model)"),I4e.forEach(t),mXe=i(y),im=n(y,"LI",{});var q4e=s(im);$ee=n(q4e,"STRONG",{});var Oqr=s($ee);gXe=r(Oqr,"mobilebert"),Oqr.forEach(t),hXe=r(q4e," \u2014 "),H$=n(q4e,"A",{href:!0});var Vqr=s(H$);pXe=r(Vqr,"MobileBertConfig"),Vqr.forEach(t),uXe=r(q4e," (MobileBERT model)"),q4e.forEach(t),_Xe=i(y),dm=n(y,"LI",{});var N4e=s(dm);kee=n(N4e,"STRONG",{});var Xqr=s(kee);bXe=r(Xqr,"mpnet"),Xqr.forEach(t),vXe=r(N4e," \u2014 "),U$=n(N4e,"A",{href:!0});var zqr=s(U$);FXe=r(zqr,"MPNetConfig"),zqr.forEach(t),TXe=r(N4e," (MPNet model)"),N4e.forEach(t),MXe=i(y),cm=n(y,"LI",{});var j4e=s(cm);See=n(j4e,"STRONG",{});var Qqr=s(See);EXe=r(Qqr,"mt5"),Qqr.forEach(t),CXe=r(j4e," \u2014 "),J$=n(j4e,"A",{href:!0});var Wqr=s(J$);wXe=r(Wqr,"MT5Config"),Wqr.forEach(t),AXe=r(j4e," (mT5 model)"),j4e.forEach(t),yXe=i(y),fm=n(y,"LI",{});var D4e=s(fm);Ree=n(D4e,"STRONG",{});var Hqr=s(Ree);LXe=r(Hqr,"nystromformer"),Hqr.forEach(t),xXe=r(D4e," \u2014 "),Y$=n(D4e,"A",{href:!0});var Uqr=s(Y$);$Xe=r(Uqr,"NystromformerConfig"),Uqr.forEach(t),kXe=r(D4e," (Nystromformer model)"),D4e.forEach(t),SXe=i(y),mm=n(y,"LI",{});var G4e=s(mm);Bee=n(G4e,"STRONG",{});var Jqr=s(Bee);RXe=r(Jqr,"openai-gpt"),Jqr.forEach(t),BXe=r(G4e," \u2014 "),K$=n(G4e,"A",{href:!0});var Yqr=s(K$);PXe=r(Yqr,"OpenAIGPTConfig"),Yqr.forEach(t),IXe=r(G4e," (OpenAI GPT model)"),G4e.forEach(t),qXe=i(y),gm=n(y,"LI",{});var O4e=s(gm);Pee=n(O4e,"STRONG",{});var Kqr=s(Pee);NXe=r(Kqr,"pegasus"),Kqr.forEach(t),jXe=r(O4e," \u2014 "),Z$=n(O4e,"A",{href:!0});var Zqr=s(Z$);DXe=r(Zqr,"PegasusConfig"),Zqr.forEach(t),GXe=r(O4e," (Pegasus model)"),O4e.forEach(t),OXe=i(y),hm=n(y,"LI",{});var V4e=s(hm);Iee=n(V4e,"STRONG",{});var eNr=s(Iee);VXe=r(eNr,"perceiver"),eNr.forEach(t),XXe=r(V4e," \u2014 "),ek=n(V4e,"A",{href:!0});var oNr=s(ek);zXe=r(oNr,"PerceiverConfig"),oNr.forEach(t),QXe=r(V4e," (Perceiver model)"),V4e.forEach(t),WXe=i(y),pm=n(y,"LI",{});var X4e=s(pm);qee=n(X4e,"STRONG",{});var rNr=s(qee);HXe=r(rNr,"plbart"),rNr.forEach(t),UXe=r(X4e," \u2014 "),ok=n(X4e,"A",{href:!0});var tNr=s(ok);JXe=r(tNr,"PLBartConfig"),tNr.forEach(t),YXe=r(X4e," (PLBart model)"),X4e.forEach(t),KXe=i(y),um=n(y,"LI",{});var z4e=s(um);Nee=n(z4e,"STRONG",{});var aNr=s(Nee);ZXe=r(aNr,"poolformer"),aNr.forEach(t),eze=r(z4e," \u2014 "),rk=n(z4e,"A",{href:!0});var nNr=s(rk);oze=r(nNr,"PoolFormerConfig"),nNr.forEach(t),rze=r(z4e," (PoolFormer model)"),z4e.forEach(t),tze=i(y),_m=n(y,"LI",{});var Q4e=s(_m);jee=n(Q4e,"STRONG",{});var sNr=s(jee);aze=r(sNr,"prophetnet"),sNr.forEach(t),nze=r(Q4e," \u2014 "),tk=n(Q4e,"A",{href:!0});var lNr=s(tk);sze=r(lNr,"ProphetNetConfig"),lNr.forEach(t),lze=r(Q4e," (ProphetNet model)"),Q4e.forEach(t),ize=i(y),bm=n(y,"LI",{});var W4e=s(bm);Dee=n(W4e,"STRONG",{});var iNr=s(Dee);dze=r(iNr,"qdqbert"),iNr.forEach(t),cze=r(W4e," \u2014 "),ak=n(W4e,"A",{href:!0});var dNr=s(ak);fze=r(dNr,"QDQBertConfig"),dNr.forEach(t),mze=r(W4e," (QDQBert model)"),W4e.forEach(t),gze=i(y),vm=n(y,"LI",{});var H4e=s(vm);Gee=n(H4e,"STRONG",{});var cNr=s(Gee);hze=r(cNr,"rag"),cNr.forEach(t),pze=r(H4e," \u2014 "),nk=n(H4e,"A",{href:!0});var fNr=s(nk);uze=r(fNr,"RagConfig"),fNr.forEach(t),_ze=r(H4e," (RAG model)"),H4e.forEach(t),bze=i(y),Fm=n(y,"LI",{});var U4e=s(Fm);Oee=n(U4e,"STRONG",{});var mNr=s(Oee);vze=r(mNr,"realm"),mNr.forEach(t),Fze=r(U4e," \u2014 "),sk=n(U4e,"A",{href:!0});var gNr=s(sk);Tze=r(gNr,"RealmConfig"),gNr.forEach(t),Mze=r(U4e," (Realm model)"),U4e.forEach(t),Eze=i(y),Tm=n(y,"LI",{});var J4e=s(Tm);Vee=n(J4e,"STRONG",{});var hNr=s(Vee);Cze=r(hNr,"reformer"),hNr.forEach(t),wze=r(J4e," \u2014 "),lk=n(J4e,"A",{href:!0});var pNr=s(lk);Aze=r(pNr,"ReformerConfig"),pNr.forEach(t),yze=r(J4e," (Reformer model)"),J4e.forEach(t),Lze=i(y),Mm=n(y,"LI",{});var Y4e=s(Mm);Xee=n(Y4e,"STRONG",{});var uNr=s(Xee);xze=r(uNr,"regnet"),uNr.forEach(t),$ze=r(Y4e," \u2014 "),ik=n(Y4e,"A",{href:!0});var _Nr=s(ik);kze=r(_Nr,"RegNetConfig"),_Nr.forEach(t),Sze=r(Y4e," (RegNet model)"),Y4e.forEach(t),Rze=i(y),Em=n(y,"LI",{});var K4e=s(Em);zee=n(K4e,"STRONG",{});var bNr=s(zee);Bze=r(bNr,"rembert"),bNr.forEach(t),Pze=r(K4e," \u2014 "),dk=n(K4e,"A",{href:!0});var vNr=s(dk);Ize=r(vNr,"RemBertConfig"),vNr.forEach(t),qze=r(K4e," (RemBERT model)"),K4e.forEach(t),Nze=i(y),Cm=n(y,"LI",{});var Z4e=s(Cm);Qee=n(Z4e,"STRONG",{});var FNr=s(Qee);jze=r(FNr,"resnet"),FNr.forEach(t),Dze=r(Z4e," \u2014 "),ck=n(Z4e,"A",{href:!0});var TNr=s(ck);Gze=r(TNr,"ResNetConfig"),TNr.forEach(t),Oze=r(Z4e," (ResNet model)"),Z4e.forEach(t),Vze=i(y),wm=n(y,"LI",{});var eEe=s(wm);Wee=n(eEe,"STRONG",{});var MNr=s(Wee);Xze=r(MNr,"retribert"),MNr.forEach(t),zze=r(eEe," \u2014 "),fk=n(eEe,"A",{href:!0});var ENr=s(fk);Qze=r(ENr,"RetriBertConfig"),ENr.forEach(t),Wze=r(eEe," (RetriBERT model)"),eEe.forEach(t),Hze=i(y),Am=n(y,"LI",{});var oEe=s(Am);Hee=n(oEe,"STRONG",{});var CNr=s(Hee);Uze=r(CNr,"roberta"),CNr.forEach(t),Jze=r(oEe," \u2014 "),mk=n(oEe,"A",{href:!0});var wNr=s(mk);Yze=r(wNr,"RobertaConfig"),wNr.forEach(t),Kze=r(oEe," (RoBERTa model)"),oEe.forEach(t),Zze=i(y),ym=n(y,"LI",{});var rEe=s(ym);Uee=n(rEe,"STRONG",{});var ANr=s(Uee);eQe=r(ANr,"roformer"),ANr.forEach(t),oQe=r(rEe," \u2014 "),gk=n(rEe,"A",{href:!0});var yNr=s(gk);rQe=r(yNr,"RoFormerConfig"),yNr.forEach(t),tQe=r(rEe," (RoFormer model)"),rEe.forEach(t),aQe=i(y),Lm=n(y,"LI",{});var tEe=s(Lm);Jee=n(tEe,"STRONG",{});var LNr=s(Jee);nQe=r(LNr,"segformer"),LNr.forEach(t),sQe=r(tEe," \u2014 "),hk=n(tEe,"A",{href:!0});var xNr=s(hk);lQe=r(xNr,"SegformerConfig"),xNr.forEach(t),iQe=r(tEe," (SegFormer model)"),tEe.forEach(t),dQe=i(y),xm=n(y,"LI",{});var aEe=s(xm);Yee=n(aEe,"STRONG",{});var $Nr=s(Yee);cQe=r($Nr,"sew"),$Nr.forEach(t),fQe=r(aEe," \u2014 "),pk=n(aEe,"A",{href:!0});var kNr=s(pk);mQe=r(kNr,"SEWConfig"),kNr.forEach(t),gQe=r(aEe," (SEW model)"),aEe.forEach(t),hQe=i(y),$m=n(y,"LI",{});var nEe=s($m);Kee=n(nEe,"STRONG",{});var SNr=s(Kee);pQe=r(SNr,"sew-d"),SNr.forEach(t),uQe=r(nEe," \u2014 "),uk=n(nEe,"A",{href:!0});var RNr=s(uk);_Qe=r(RNr,"SEWDConfig"),RNr.forEach(t),bQe=r(nEe," (SEW-D model)"),nEe.forEach(t),vQe=i(y),km=n(y,"LI",{});var sEe=s(km);Zee=n(sEe,"STRONG",{});var BNr=s(Zee);FQe=r(BNr,"speech-encoder-decoder"),BNr.forEach(t),TQe=r(sEe," \u2014 "),_k=n(sEe,"A",{href:!0});var PNr=s(_k);MQe=r(PNr,"SpeechEncoderDecoderConfig"),PNr.forEach(t),EQe=r(sEe," (Speech Encoder decoder model)"),sEe.forEach(t),CQe=i(y),Sm=n(y,"LI",{});var lEe=s(Sm);eoe=n(lEe,"STRONG",{});var INr=s(eoe);wQe=r(INr,"speech_to_text"),INr.forEach(t),AQe=r(lEe," \u2014 "),bk=n(lEe,"A",{href:!0});var qNr=s(bk);yQe=r(qNr,"Speech2TextConfig"),qNr.forEach(t),LQe=r(lEe," (Speech2Text model)"),lEe.forEach(t),xQe=i(y),Rm=n(y,"LI",{});var iEe=s(Rm);ooe=n(iEe,"STRONG",{});var NNr=s(ooe);$Qe=r(NNr,"speech_to_text_2"),NNr.forEach(t),kQe=r(iEe," \u2014 "),vk=n(iEe,"A",{href:!0});var jNr=s(vk);SQe=r(jNr,"Speech2Text2Config"),jNr.forEach(t),RQe=r(iEe," (Speech2Text2 model)"),iEe.forEach(t),BQe=i(y),Bm=n(y,"LI",{});var dEe=s(Bm);roe=n(dEe,"STRONG",{});var DNr=s(roe);PQe=r(DNr,"splinter"),DNr.forEach(t),IQe=r(dEe," \u2014 "),Fk=n(dEe,"A",{href:!0});var GNr=s(Fk);qQe=r(GNr,"SplinterConfig"),GNr.forEach(t),NQe=r(dEe," (Splinter model)"),dEe.forEach(t),jQe=i(y),Pm=n(y,"LI",{});var cEe=s(Pm);toe=n(cEe,"STRONG",{});var ONr=s(toe);DQe=r(ONr,"squeezebert"),ONr.forEach(t),GQe=r(cEe," \u2014 "),Tk=n(cEe,"A",{href:!0});var VNr=s(Tk);OQe=r(VNr,"SqueezeBertConfig"),VNr.forEach(t),VQe=r(cEe," (SqueezeBERT model)"),cEe.forEach(t),XQe=i(y),Im=n(y,"LI",{});var fEe=s(Im);aoe=n(fEe,"STRONG",{});var XNr=s(aoe);zQe=r(XNr,"swin"),XNr.forEach(t),QQe=r(fEe," \u2014 "),Mk=n(fEe,"A",{href:!0});var zNr=s(Mk);WQe=r(zNr,"SwinConfig"),zNr.forEach(t),HQe=r(fEe," (Swin model)"),fEe.forEach(t),UQe=i(y),qm=n(y,"LI",{});var mEe=s(qm);noe=n(mEe,"STRONG",{});var QNr=s(noe);JQe=r(QNr,"t5"),QNr.forEach(t),YQe=r(mEe," \u2014 "),Ek=n(mEe,"A",{href:!0});var WNr=s(Ek);KQe=r(WNr,"T5Config"),WNr.forEach(t),ZQe=r(mEe," (T5 model)"),mEe.forEach(t),eWe=i(y),Nm=n(y,"LI",{});var gEe=s(Nm);soe=n(gEe,"STRONG",{});var HNr=s(soe);oWe=r(HNr,"tapas"),HNr.forEach(t),rWe=r(gEe," \u2014 "),Ck=n(gEe,"A",{href:!0});var UNr=s(Ck);tWe=r(UNr,"TapasConfig"),UNr.forEach(t),aWe=r(gEe," (TAPAS model)"),gEe.forEach(t),nWe=i(y),jm=n(y,"LI",{});var hEe=s(jm);loe=n(hEe,"STRONG",{});var JNr=s(loe);sWe=r(JNr,"tapex"),JNr.forEach(t),lWe=r(hEe," \u2014 "),wk=n(hEe,"A",{href:!0});var YNr=s(wk);iWe=r(YNr,"BartConfig"),YNr.forEach(t),dWe=r(hEe," (TAPEX model)"),hEe.forEach(t),cWe=i(y),Dm=n(y,"LI",{});var pEe=s(Dm);ioe=n(pEe,"STRONG",{});var KNr=s(ioe);fWe=r(KNr,"transfo-xl"),KNr.forEach(t),mWe=r(pEe," \u2014 "),Ak=n(pEe,"A",{href:!0});var ZNr=s(Ak);gWe=r(ZNr,"TransfoXLConfig"),ZNr.forEach(t),hWe=r(pEe," (Transformer-XL model)"),pEe.forEach(t),pWe=i(y),Gm=n(y,"LI",{});var uEe=s(Gm);doe=n(uEe,"STRONG",{});var ejr=s(doe);uWe=r(ejr,"trocr"),ejr.forEach(t),_We=r(uEe," \u2014 "),yk=n(uEe,"A",{href:!0});var ojr=s(yk);bWe=r(ojr,"TrOCRConfig"),ojr.forEach(t),vWe=r(uEe," (TrOCR model)"),uEe.forEach(t),FWe=i(y),Om=n(y,"LI",{});var _Ee=s(Om);coe=n(_Ee,"STRONG",{});var rjr=s(coe);TWe=r(rjr,"unispeech"),rjr.forEach(t),MWe=r(_Ee," \u2014 "),Lk=n(_Ee,"A",{href:!0});var tjr=s(Lk);EWe=r(tjr,"UniSpeechConfig"),tjr.forEach(t),CWe=r(_Ee," (UniSpeech model)"),_Ee.forEach(t),wWe=i(y),Vm=n(y,"LI",{});var bEe=s(Vm);foe=n(bEe,"STRONG",{});var ajr=s(foe);AWe=r(ajr,"unispeech-sat"),ajr.forEach(t),yWe=r(bEe," \u2014 "),xk=n(bEe,"A",{href:!0});var njr=s(xk);LWe=r(njr,"UniSpeechSatConfig"),njr.forEach(t),xWe=r(bEe," (UniSpeechSat model)"),bEe.forEach(t),$We=i(y),Xm=n(y,"LI",{});var vEe=s(Xm);moe=n(vEe,"STRONG",{});var sjr=s(moe);kWe=r(sjr,"van"),sjr.forEach(t),SWe=r(vEe," \u2014 "),$k=n(vEe,"A",{href:!0});var ljr=s($k);RWe=r(ljr,"VanConfig"),ljr.forEach(t),BWe=r(vEe," (VAN model)"),vEe.forEach(t),PWe=i(y),zm=n(y,"LI",{});var FEe=s(zm);goe=n(FEe,"STRONG",{});var ijr=s(goe);IWe=r(ijr,"vilt"),ijr.forEach(t),qWe=r(FEe," \u2014 "),kk=n(FEe,"A",{href:!0});var djr=s(kk);NWe=r(djr,"ViltConfig"),djr.forEach(t),jWe=r(FEe," (ViLT model)"),FEe.forEach(t),DWe=i(y),Qm=n(y,"LI",{});var TEe=s(Qm);hoe=n(TEe,"STRONG",{});var cjr=s(hoe);GWe=r(cjr,"vision-encoder-decoder"),cjr.forEach(t),OWe=r(TEe," \u2014 "),Sk=n(TEe,"A",{href:!0});var fjr=s(Sk);VWe=r(fjr,"VisionEncoderDecoderConfig"),fjr.forEach(t),XWe=r(TEe," (Vision Encoder decoder model)"),TEe.forEach(t),zWe=i(y),Wm=n(y,"LI",{});var MEe=s(Wm);poe=n(MEe,"STRONG",{});var mjr=s(poe);QWe=r(mjr,"vision-text-dual-encoder"),mjr.forEach(t),WWe=r(MEe," \u2014 "),Rk=n(MEe,"A",{href:!0});var gjr=s(Rk);HWe=r(gjr,"VisionTextDualEncoderConfig"),gjr.forEach(t),UWe=r(MEe," (VisionTextDualEncoder model)"),MEe.forEach(t),JWe=i(y),Hm=n(y,"LI",{});var EEe=s(Hm);uoe=n(EEe,"STRONG",{});var hjr=s(uoe);YWe=r(hjr,"visual_bert"),hjr.forEach(t),KWe=r(EEe," \u2014 "),Bk=n(EEe,"A",{href:!0});var pjr=s(Bk);ZWe=r(pjr,"VisualBertConfig"),pjr.forEach(t),eHe=r(EEe," (VisualBert model)"),EEe.forEach(t),oHe=i(y),Um=n(y,"LI",{});var CEe=s(Um);_oe=n(CEe,"STRONG",{});var ujr=s(_oe);rHe=r(ujr,"vit"),ujr.forEach(t),tHe=r(CEe," \u2014 "),Pk=n(CEe,"A",{href:!0});var _jr=s(Pk);aHe=r(_jr,"ViTConfig"),_jr.forEach(t),nHe=r(CEe," (ViT model)"),CEe.forEach(t),sHe=i(y),Jm=n(y,"LI",{});var wEe=s(Jm);boe=n(wEe,"STRONG",{});var bjr=s(boe);lHe=r(bjr,"vit_mae"),bjr.forEach(t),iHe=r(wEe," \u2014 "),Ik=n(wEe,"A",{href:!0});var vjr=s(Ik);dHe=r(vjr,"ViTMAEConfig"),vjr.forEach(t),cHe=r(wEe," (ViTMAE model)"),wEe.forEach(t),fHe=i(y),Ym=n(y,"LI",{});var AEe=s(Ym);voe=n(AEe,"STRONG",{});var Fjr=s(voe);mHe=r(Fjr,"wav2vec2"),Fjr.forEach(t),gHe=r(AEe," \u2014 "),qk=n(AEe,"A",{href:!0});var Tjr=s(qk);hHe=r(Tjr,"Wav2Vec2Config"),Tjr.forEach(t),pHe=r(AEe," (Wav2Vec2 model)"),AEe.forEach(t),uHe=i(y),Km=n(y,"LI",{});var yEe=s(Km);Foe=n(yEe,"STRONG",{});var Mjr=s(Foe);_He=r(Mjr,"wavlm"),Mjr.forEach(t),bHe=r(yEe," \u2014 "),Nk=n(yEe,"A",{href:!0});var Ejr=s(Nk);vHe=r(Ejr,"WavLMConfig"),Ejr.forEach(t),FHe=r(yEe," (WavLM model)"),yEe.forEach(t),THe=i(y),Zm=n(y,"LI",{});var LEe=s(Zm);Toe=n(LEe,"STRONG",{});var Cjr=s(Toe);MHe=r(Cjr,"xglm"),Cjr.forEach(t),EHe=r(LEe," \u2014 "),jk=n(LEe,"A",{href:!0});var wjr=s(jk);CHe=r(wjr,"XGLMConfig"),wjr.forEach(t),wHe=r(LEe," (XGLM model)"),LEe.forEach(t),AHe=i(y),eg=n(y,"LI",{});var xEe=s(eg);Moe=n(xEe,"STRONG",{});var Ajr=s(Moe);yHe=r(Ajr,"xlm"),Ajr.forEach(t),LHe=r(xEe," \u2014 "),Dk=n(xEe,"A",{href:!0});var yjr=s(Dk);xHe=r(yjr,"XLMConfig"),yjr.forEach(t),$He=r(xEe," (XLM model)"),xEe.forEach(t),kHe=i(y),og=n(y,"LI",{});var $Ee=s(og);Eoe=n($Ee,"STRONG",{});var Ljr=s(Eoe);SHe=r(Ljr,"xlm-prophetnet"),Ljr.forEach(t),RHe=r($Ee," \u2014 "),Gk=n($Ee,"A",{href:!0});var xjr=s(Gk);BHe=r(xjr,"XLMProphetNetConfig"),xjr.forEach(t),PHe=r($Ee," (XLMProphetNet model)"),$Ee.forEach(t),IHe=i(y),rg=n(y,"LI",{});var kEe=s(rg);Coe=n(kEe,"STRONG",{});var $jr=s(Coe);qHe=r($jr,"xlm-roberta"),$jr.forEach(t),NHe=r(kEe," \u2014 "),Ok=n(kEe,"A",{href:!0});var kjr=s(Ok);jHe=r(kjr,"XLMRobertaConfig"),kjr.forEach(t),DHe=r(kEe," (XLM-RoBERTa model)"),kEe.forEach(t),GHe=i(y),tg=n(y,"LI",{});var SEe=s(tg);woe=n(SEe,"STRONG",{});var Sjr=s(woe);OHe=r(Sjr,"xlm-roberta-xl"),Sjr.forEach(t),VHe=r(SEe," \u2014 "),Vk=n(SEe,"A",{href:!0});var Rjr=s(Vk);XHe=r(Rjr,"XLMRobertaXLConfig"),Rjr.forEach(t),zHe=r(SEe," (XLM-RoBERTa-XL model)"),SEe.forEach(t),QHe=i(y),ag=n(y,"LI",{});var REe=s(ag);Aoe=n(REe,"STRONG",{});var Bjr=s(Aoe);WHe=r(Bjr,"xlnet"),Bjr.forEach(t),HHe=r(REe," \u2014 "),Xk=n(REe,"A",{href:!0});var Pjr=s(Xk);UHe=r(Pjr,"XLNetConfig"),Pjr.forEach(t),JHe=r(REe," (XLNet model)"),REe.forEach(t),YHe=i(y),ng=n(y,"LI",{});var BEe=s(ng);yoe=n(BEe,"STRONG",{});var Ijr=s(yoe);KHe=r(Ijr,"yolos"),Ijr.forEach(t),ZHe=r(BEe," \u2014 "),zk=n(BEe,"A",{href:!0});var qjr=s(zk);eUe=r(qjr,"YolosConfig"),qjr.forEach(t),oUe=r(BEe," (YOLOS model)"),BEe.forEach(t),rUe=i(y),sg=n(y,"LI",{});var PEe=s(sg);Loe=n(PEe,"STRONG",{});var Njr=s(Loe);tUe=r(Njr,"yoso"),Njr.forEach(t),aUe=r(PEe," \u2014 "),Qk=n(PEe,"A",{href:!0});var jjr=s(Qk);nUe=r(jjr,"YosoConfig"),jjr.forEach(t),sUe=r(PEe," (YOSO model)"),PEe.forEach(t),y.forEach(t),lUe=i(Yr),T(lg.$$.fragment,Yr),Yr.forEach(t),iUe=i(Jr),ig=n(Jr,"DIV",{class:!0});var UIe=s(ig);T(jw.$$.fragment,UIe),dUe=i(UIe),xoe=n(UIe,"P",{});var Djr=s(xoe);cUe=r(Djr,"Register a new configuration for this class."),Djr.forEach(t),UIe.forEach(t),Jr.forEach(t),ePe=i(f),mi=n(f,"H2",{class:!0});var JIe=s(mi);dg=n(JIe,"A",{id:!0,class:!0,href:!0});var Gjr=s(dg);$oe=n(Gjr,"SPAN",{});var Ojr=s($oe);T(Dw.$$.fragment,Ojr),Ojr.forEach(t),Gjr.forEach(t),fUe=i(JIe),koe=n(JIe,"SPAN",{});var Vjr=s(koe);mUe=r(Vjr,"AutoTokenizer"),Vjr.forEach(t),JIe.forEach(t),oPe=i(f),wo=n(f,"DIV",{class:!0});var Ss=s(wo);T(Gw.$$.fragment,Ss),gUe=i(Ss),Ow=n(Ss,"P",{});var YIe=s(Ow);hUe=r(YIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=n(YIe,"A",{href:!0});var Xjr=s(Wk);pUe=r(Xjr,"AutoTokenizer.from_pretrained()"),Xjr.forEach(t),uUe=r(YIe," class method."),YIe.forEach(t),_Ue=i(Ss),Vw=n(Ss,"P",{});var KIe=s(Vw);bUe=r(KIe,"This class cannot be instantiated directly using "),Soe=n(KIe,"CODE",{});var zjr=s(Soe);vUe=r(zjr,"__init__()"),zjr.forEach(t),FUe=r(KIe," (throws an error)."),KIe.forEach(t),TUe=i(Ss),Er=n(Ss,"DIV",{class:!0});var Rs=s(Er);T(Xw.$$.fragment,Rs),MUe=i(Rs),Roe=n(Rs,"P",{});var Qjr=s(Roe);EUe=r(Qjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Qjr.forEach(t),CUe=i(Rs),Ta=n(Rs,"P",{});var PC=s(Ta);wUe=r(PC,"The tokenizer class to instantiate is selected based on the "),Boe=n(PC,"CODE",{});var Wjr=s(Boe);AUe=r(Wjr,"model_type"),Wjr.forEach(t),yUe=r(PC,` property of the config object (either
passed as an argument or loaded from `),Poe=n(PC,"CODE",{});var Hjr=s(Poe);LUe=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),xUe=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ioe=n(PC,"CODE",{});var Ujr=s(Ioe);$Ue=r(Ujr,"pretrained_model_name_or_path"),Ujr.forEach(t),kUe=r(PC,":"),PC.forEach(t),SUe=i(Rs),k=n(Rs,"UL",{});var S=s(k);yn=n(S,"LI",{});var j8=s(yn);qoe=n(j8,"STRONG",{});var Jjr=s(qoe);RUe=r(Jjr,"albert"),Jjr.forEach(t),BUe=r(j8," \u2014 "),Hk=n(j8,"A",{href:!0});var Yjr=s(Hk);PUe=r(Yjr,"AlbertTokenizer"),Yjr.forEach(t),IUe=r(j8," or "),Uk=n(j8,"A",{href:!0});var Kjr=s(Uk);qUe=r(Kjr,"AlbertTokenizerFast"),Kjr.forEach(t),NUe=r(j8," (ALBERT model)"),j8.forEach(t),jUe=i(S),Ln=n(S,"LI",{});var D8=s(Ln);Noe=n(D8,"STRONG",{});var Zjr=s(Noe);DUe=r(Zjr,"bart"),Zjr.forEach(t),GUe=r(D8," \u2014 "),Jk=n(D8,"A",{href:!0});var eDr=s(Jk);OUe=r(eDr,"BartTokenizer"),eDr.forEach(t),VUe=r(D8," or "),Yk=n(D8,"A",{href:!0});var oDr=s(Yk);XUe=r(oDr,"BartTokenizerFast"),oDr.forEach(t),zUe=r(D8," (BART model)"),D8.forEach(t),QUe=i(S),xn=n(S,"LI",{});var G8=s(xn);joe=n(G8,"STRONG",{});var rDr=s(joe);WUe=r(rDr,"barthez"),rDr.forEach(t),HUe=r(G8," \u2014 "),Kk=n(G8,"A",{href:!0});var tDr=s(Kk);UUe=r(tDr,"BarthezTokenizer"),tDr.forEach(t),JUe=r(G8," or "),Zk=n(G8,"A",{href:!0});var aDr=s(Zk);YUe=r(aDr,"BarthezTokenizerFast"),aDr.forEach(t),KUe=r(G8," (BARThez model)"),G8.forEach(t),ZUe=i(S),cg=n(S,"LI",{});var IEe=s(cg);Doe=n(IEe,"STRONG",{});var nDr=s(Doe);eJe=r(nDr,"bartpho"),nDr.forEach(t),oJe=r(IEe," \u2014 "),eS=n(IEe,"A",{href:!0});var sDr=s(eS);rJe=r(sDr,"BartphoTokenizer"),sDr.forEach(t),tJe=r(IEe," (BARTpho model)"),IEe.forEach(t),aJe=i(S),$n=n(S,"LI",{});var O8=s($n);Goe=n(O8,"STRONG",{});var lDr=s(Goe);nJe=r(lDr,"bert"),lDr.forEach(t),sJe=r(O8," \u2014 "),oS=n(O8,"A",{href:!0});var iDr=s(oS);lJe=r(iDr,"BertTokenizer"),iDr.forEach(t),iJe=r(O8," or "),rS=n(O8,"A",{href:!0});var dDr=s(rS);dJe=r(dDr,"BertTokenizerFast"),dDr.forEach(t),cJe=r(O8," (BERT model)"),O8.forEach(t),fJe=i(S),fg=n(S,"LI",{});var qEe=s(fg);Ooe=n(qEe,"STRONG",{});var cDr=s(Ooe);mJe=r(cDr,"bert-generation"),cDr.forEach(t),gJe=r(qEe," \u2014 "),tS=n(qEe,"A",{href:!0});var fDr=s(tS);hJe=r(fDr,"BertGenerationTokenizer"),fDr.forEach(t),pJe=r(qEe," (Bert Generation model)"),qEe.forEach(t),uJe=i(S),mg=n(S,"LI",{});var NEe=s(mg);Voe=n(NEe,"STRONG",{});var mDr=s(Voe);_Je=r(mDr,"bert-japanese"),mDr.forEach(t),bJe=r(NEe," \u2014 "),aS=n(NEe,"A",{href:!0});var gDr=s(aS);vJe=r(gDr,"BertJapaneseTokenizer"),gDr.forEach(t),FJe=r(NEe," (BertJapanese model)"),NEe.forEach(t),TJe=i(S),gg=n(S,"LI",{});var jEe=s(gg);Xoe=n(jEe,"STRONG",{});var hDr=s(Xoe);MJe=r(hDr,"bertweet"),hDr.forEach(t),EJe=r(jEe," \u2014 "),nS=n(jEe,"A",{href:!0});var pDr=s(nS);CJe=r(pDr,"BertweetTokenizer"),pDr.forEach(t),wJe=r(jEe," (Bertweet model)"),jEe.forEach(t),AJe=i(S),kn=n(S,"LI",{});var V8=s(kn);zoe=n(V8,"STRONG",{});var uDr=s(zoe);yJe=r(uDr,"big_bird"),uDr.forEach(t),LJe=r(V8," \u2014 "),sS=n(V8,"A",{href:!0});var _Dr=s(sS);xJe=r(_Dr,"BigBirdTokenizer"),_Dr.forEach(t),$Je=r(V8," or "),lS=n(V8,"A",{href:!0});var bDr=s(lS);kJe=r(bDr,"BigBirdTokenizerFast"),bDr.forEach(t),SJe=r(V8," (BigBird model)"),V8.forEach(t),RJe=i(S),Sn=n(S,"LI",{});var X8=s(Sn);Qoe=n(X8,"STRONG",{});var vDr=s(Qoe);BJe=r(vDr,"bigbird_pegasus"),vDr.forEach(t),PJe=r(X8," \u2014 "),iS=n(X8,"A",{href:!0});var FDr=s(iS);IJe=r(FDr,"PegasusTokenizer"),FDr.forEach(t),qJe=r(X8," or "),dS=n(X8,"A",{href:!0});var TDr=s(dS);NJe=r(TDr,"PegasusTokenizerFast"),TDr.forEach(t),jJe=r(X8," (BigBirdPegasus model)"),X8.forEach(t),DJe=i(S),Rn=n(S,"LI",{});var z8=s(Rn);Woe=n(z8,"STRONG",{});var MDr=s(Woe);GJe=r(MDr,"blenderbot"),MDr.forEach(t),OJe=r(z8," \u2014 "),cS=n(z8,"A",{href:!0});var EDr=s(cS);VJe=r(EDr,"BlenderbotTokenizer"),EDr.forEach(t),XJe=r(z8," or "),fS=n(z8,"A",{href:!0});var CDr=s(fS);zJe=r(CDr,"BlenderbotTokenizerFast"),CDr.forEach(t),QJe=r(z8," (Blenderbot model)"),z8.forEach(t),WJe=i(S),hg=n(S,"LI",{});var DEe=s(hg);Hoe=n(DEe,"STRONG",{});var wDr=s(Hoe);HJe=r(wDr,"blenderbot-small"),wDr.forEach(t),UJe=r(DEe," \u2014 "),mS=n(DEe,"A",{href:!0});var ADr=s(mS);JJe=r(ADr,"BlenderbotSmallTokenizer"),ADr.forEach(t),YJe=r(DEe," (BlenderbotSmall model)"),DEe.forEach(t),KJe=i(S),pg=n(S,"LI",{});var GEe=s(pg);Uoe=n(GEe,"STRONG",{});var yDr=s(Uoe);ZJe=r(yDr,"byt5"),yDr.forEach(t),eYe=r(GEe," \u2014 "),gS=n(GEe,"A",{href:!0});var LDr=s(gS);oYe=r(LDr,"ByT5Tokenizer"),LDr.forEach(t),rYe=r(GEe," (ByT5 model)"),GEe.forEach(t),tYe=i(S),Bn=n(S,"LI",{});var Q8=s(Bn);Joe=n(Q8,"STRONG",{});var xDr=s(Joe);aYe=r(xDr,"camembert"),xDr.forEach(t),nYe=r(Q8," \u2014 "),hS=n(Q8,"A",{href:!0});var $Dr=s(hS);sYe=r($Dr,"CamembertTokenizer"),$Dr.forEach(t),lYe=r(Q8," or "),pS=n(Q8,"A",{href:!0});var kDr=s(pS);iYe=r(kDr,"CamembertTokenizerFast"),kDr.forEach(t),dYe=r(Q8," (CamemBERT model)"),Q8.forEach(t),cYe=i(S),ug=n(S,"LI",{});var OEe=s(ug);Yoe=n(OEe,"STRONG",{});var SDr=s(Yoe);fYe=r(SDr,"canine"),SDr.forEach(t),mYe=r(OEe," \u2014 "),uS=n(OEe,"A",{href:!0});var RDr=s(uS);gYe=r(RDr,"CanineTokenizer"),RDr.forEach(t),hYe=r(OEe," (Canine model)"),OEe.forEach(t),pYe=i(S),Pn=n(S,"LI",{});var W8=s(Pn);Koe=n(W8,"STRONG",{});var BDr=s(Koe);uYe=r(BDr,"clip"),BDr.forEach(t),_Ye=r(W8," \u2014 "),_S=n(W8,"A",{href:!0});var PDr=s(_S);bYe=r(PDr,"CLIPTokenizer"),PDr.forEach(t),vYe=r(W8," or "),bS=n(W8,"A",{href:!0});var IDr=s(bS);FYe=r(IDr,"CLIPTokenizerFast"),IDr.forEach(t),TYe=r(W8," (CLIP model)"),W8.forEach(t),MYe=i(S),In=n(S,"LI",{});var H8=s(In);Zoe=n(H8,"STRONG",{});var qDr=s(Zoe);EYe=r(qDr,"convbert"),qDr.forEach(t),CYe=r(H8," \u2014 "),vS=n(H8,"A",{href:!0});var NDr=s(vS);wYe=r(NDr,"ConvBertTokenizer"),NDr.forEach(t),AYe=r(H8," or "),FS=n(H8,"A",{href:!0});var jDr=s(FS);yYe=r(jDr,"ConvBertTokenizerFast"),jDr.forEach(t),LYe=r(H8," (ConvBERT model)"),H8.forEach(t),xYe=i(S),qn=n(S,"LI",{});var U8=s(qn);ere=n(U8,"STRONG",{});var DDr=s(ere);$Ye=r(DDr,"cpm"),DDr.forEach(t),kYe=r(U8," \u2014 "),TS=n(U8,"A",{href:!0});var GDr=s(TS);SYe=r(GDr,"CpmTokenizer"),GDr.forEach(t),RYe=r(U8," or "),MS=n(U8,"A",{href:!0});var ODr=s(MS);BYe=r(ODr,"CpmTokenizerFast"),ODr.forEach(t),PYe=r(U8," (CPM model)"),U8.forEach(t),IYe=i(S),_g=n(S,"LI",{});var VEe=s(_g);ore=n(VEe,"STRONG",{});var VDr=s(ore);qYe=r(VDr,"ctrl"),VDr.forEach(t),NYe=r(VEe," \u2014 "),ES=n(VEe,"A",{href:!0});var XDr=s(ES);jYe=r(XDr,"CTRLTokenizer"),XDr.forEach(t),DYe=r(VEe," (CTRL model)"),VEe.forEach(t),GYe=i(S),Nn=n(S,"LI",{});var J8=s(Nn);rre=n(J8,"STRONG",{});var zDr=s(rre);OYe=r(zDr,"data2vec-text"),zDr.forEach(t),VYe=r(J8," \u2014 "),CS=n(J8,"A",{href:!0});var QDr=s(CS);XYe=r(QDr,"RobertaTokenizer"),QDr.forEach(t),zYe=r(J8," or "),wS=n(J8,"A",{href:!0});var WDr=s(wS);QYe=r(WDr,"RobertaTokenizerFast"),WDr.forEach(t),WYe=r(J8," (Data2VecText model)"),J8.forEach(t),HYe=i(S),jn=n(S,"LI",{});var Y8=s(jn);tre=n(Y8,"STRONG",{});var HDr=s(tre);UYe=r(HDr,"deberta"),HDr.forEach(t),JYe=r(Y8," \u2014 "),AS=n(Y8,"A",{href:!0});var UDr=s(AS);YYe=r(UDr,"DebertaTokenizer"),UDr.forEach(t),KYe=r(Y8," or "),yS=n(Y8,"A",{href:!0});var JDr=s(yS);ZYe=r(JDr,"DebertaTokenizerFast"),JDr.forEach(t),eKe=r(Y8," (DeBERTa model)"),Y8.forEach(t),oKe=i(S),Dn=n(S,"LI",{});var K8=s(Dn);are=n(K8,"STRONG",{});var YDr=s(are);rKe=r(YDr,"deberta-v2"),YDr.forEach(t),tKe=r(K8," \u2014 "),LS=n(K8,"A",{href:!0});var KDr=s(LS);aKe=r(KDr,"DebertaV2Tokenizer"),KDr.forEach(t),nKe=r(K8," or "),xS=n(K8,"A",{href:!0});var ZDr=s(xS);sKe=r(ZDr,"DebertaV2TokenizerFast"),ZDr.forEach(t),lKe=r(K8," (DeBERTa-v2 model)"),K8.forEach(t),iKe=i(S),Gn=n(S,"LI",{});var Z8=s(Gn);nre=n(Z8,"STRONG",{});var eGr=s(nre);dKe=r(eGr,"distilbert"),eGr.forEach(t),cKe=r(Z8," \u2014 "),$S=n(Z8,"A",{href:!0});var oGr=s($S);fKe=r(oGr,"DistilBertTokenizer"),oGr.forEach(t),mKe=r(Z8," or "),kS=n(Z8,"A",{href:!0});var rGr=s(kS);gKe=r(rGr,"DistilBertTokenizerFast"),rGr.forEach(t),hKe=r(Z8," (DistilBERT model)"),Z8.forEach(t),pKe=i(S),On=n(S,"LI",{});var ex=s(On);sre=n(ex,"STRONG",{});var tGr=s(sre);uKe=r(tGr,"dpr"),tGr.forEach(t),_Ke=r(ex," \u2014 "),SS=n(ex,"A",{href:!0});var aGr=s(SS);bKe=r(aGr,"DPRQuestionEncoderTokenizer"),aGr.forEach(t),vKe=r(ex," or "),RS=n(ex,"A",{href:!0});var nGr=s(RS);FKe=r(nGr,"DPRQuestionEncoderTokenizerFast"),nGr.forEach(t),TKe=r(ex," (DPR model)"),ex.forEach(t),MKe=i(S),Vn=n(S,"LI",{});var ox=s(Vn);lre=n(ox,"STRONG",{});var sGr=s(lre);EKe=r(sGr,"electra"),sGr.forEach(t),CKe=r(ox," \u2014 "),BS=n(ox,"A",{href:!0});var lGr=s(BS);wKe=r(lGr,"ElectraTokenizer"),lGr.forEach(t),AKe=r(ox," or "),PS=n(ox,"A",{href:!0});var iGr=s(PS);yKe=r(iGr,"ElectraTokenizerFast"),iGr.forEach(t),LKe=r(ox," (ELECTRA model)"),ox.forEach(t),xKe=i(S),bg=n(S,"LI",{});var XEe=s(bg);ire=n(XEe,"STRONG",{});var dGr=s(ire);$Ke=r(dGr,"flaubert"),dGr.forEach(t),kKe=r(XEe," \u2014 "),IS=n(XEe,"A",{href:!0});var cGr=s(IS);SKe=r(cGr,"FlaubertTokenizer"),cGr.forEach(t),RKe=r(XEe," (FlauBERT model)"),XEe.forEach(t),BKe=i(S),Xn=n(S,"LI",{});var rx=s(Xn);dre=n(rx,"STRONG",{});var fGr=s(dre);PKe=r(fGr,"fnet"),fGr.forEach(t),IKe=r(rx," \u2014 "),qS=n(rx,"A",{href:!0});var mGr=s(qS);qKe=r(mGr,"FNetTokenizer"),mGr.forEach(t),NKe=r(rx," or "),NS=n(rx,"A",{href:!0});var gGr=s(NS);jKe=r(gGr,"FNetTokenizerFast"),gGr.forEach(t),DKe=r(rx," (FNet model)"),rx.forEach(t),GKe=i(S),vg=n(S,"LI",{});var zEe=s(vg);cre=n(zEe,"STRONG",{});var hGr=s(cre);OKe=r(hGr,"fsmt"),hGr.forEach(t),VKe=r(zEe," \u2014 "),jS=n(zEe,"A",{href:!0});var pGr=s(jS);XKe=r(pGr,"FSMTTokenizer"),pGr.forEach(t),zKe=r(zEe," (FairSeq Machine-Translation model)"),zEe.forEach(t),QKe=i(S),zn=n(S,"LI",{});var tx=s(zn);fre=n(tx,"STRONG",{});var uGr=s(fre);WKe=r(uGr,"funnel"),uGr.forEach(t),HKe=r(tx," \u2014 "),DS=n(tx,"A",{href:!0});var _Gr=s(DS);UKe=r(_Gr,"FunnelTokenizer"),_Gr.forEach(t),JKe=r(tx," or "),GS=n(tx,"A",{href:!0});var bGr=s(GS);YKe=r(bGr,"FunnelTokenizerFast"),bGr.forEach(t),KKe=r(tx," (Funnel Transformer model)"),tx.forEach(t),ZKe=i(S),Qn=n(S,"LI",{});var ax=s(Qn);mre=n(ax,"STRONG",{});var vGr=s(mre);eZe=r(vGr,"gpt2"),vGr.forEach(t),oZe=r(ax," \u2014 "),OS=n(ax,"A",{href:!0});var FGr=s(OS);rZe=r(FGr,"GPT2Tokenizer"),FGr.forEach(t),tZe=r(ax," or "),VS=n(ax,"A",{href:!0});var TGr=s(VS);aZe=r(TGr,"GPT2TokenizerFast"),TGr.forEach(t),nZe=r(ax," (OpenAI GPT-2 model)"),ax.forEach(t),sZe=i(S),Wn=n(S,"LI",{});var nx=s(Wn);gre=n(nx,"STRONG",{});var MGr=s(gre);lZe=r(MGr,"gpt_neo"),MGr.forEach(t),iZe=r(nx," \u2014 "),XS=n(nx,"A",{href:!0});var EGr=s(XS);dZe=r(EGr,"GPT2Tokenizer"),EGr.forEach(t),cZe=r(nx," or "),zS=n(nx,"A",{href:!0});var CGr=s(zS);fZe=r(CGr,"GPT2TokenizerFast"),CGr.forEach(t),mZe=r(nx," (GPT Neo model)"),nx.forEach(t),gZe=i(S),Hn=n(S,"LI",{});var sx=s(Hn);hre=n(sx,"STRONG",{});var wGr=s(hre);hZe=r(wGr,"gptj"),wGr.forEach(t),pZe=r(sx," \u2014 "),QS=n(sx,"A",{href:!0});var AGr=s(QS);uZe=r(AGr,"GPT2Tokenizer"),AGr.forEach(t),_Ze=r(sx," or "),WS=n(sx,"A",{href:!0});var yGr=s(WS);bZe=r(yGr,"GPT2TokenizerFast"),yGr.forEach(t),vZe=r(sx," (GPT-J model)"),sx.forEach(t),FZe=i(S),Un=n(S,"LI",{});var lx=s(Un);pre=n(lx,"STRONG",{});var LGr=s(pre);TZe=r(LGr,"herbert"),LGr.forEach(t),MZe=r(lx," \u2014 "),HS=n(lx,"A",{href:!0});var xGr=s(HS);EZe=r(xGr,"HerbertTokenizer"),xGr.forEach(t),CZe=r(lx," or "),US=n(lx,"A",{href:!0});var $Gr=s(US);wZe=r($Gr,"HerbertTokenizerFast"),$Gr.forEach(t),AZe=r(lx," (HerBERT model)"),lx.forEach(t),yZe=i(S),Fg=n(S,"LI",{});var QEe=s(Fg);ure=n(QEe,"STRONG",{});var kGr=s(ure);LZe=r(kGr,"hubert"),kGr.forEach(t),xZe=r(QEe," \u2014 "),JS=n(QEe,"A",{href:!0});var SGr=s(JS);$Ze=r(SGr,"Wav2Vec2CTCTokenizer"),SGr.forEach(t),kZe=r(QEe," (Hubert model)"),QEe.forEach(t),SZe=i(S),Jn=n(S,"LI",{});var ix=s(Jn);_re=n(ix,"STRONG",{});var RGr=s(_re);RZe=r(RGr,"ibert"),RGr.forEach(t),BZe=r(ix," \u2014 "),YS=n(ix,"A",{href:!0});var BGr=s(YS);PZe=r(BGr,"RobertaTokenizer"),BGr.forEach(t),IZe=r(ix," or "),KS=n(ix,"A",{href:!0});var PGr=s(KS);qZe=r(PGr,"RobertaTokenizerFast"),PGr.forEach(t),NZe=r(ix," (I-BERT model)"),ix.forEach(t),jZe=i(S),Yn=n(S,"LI",{});var dx=s(Yn);bre=n(dx,"STRONG",{});var IGr=s(bre);DZe=r(IGr,"layoutlm"),IGr.forEach(t),GZe=r(dx," \u2014 "),ZS=n(dx,"A",{href:!0});var qGr=s(ZS);OZe=r(qGr,"LayoutLMTokenizer"),qGr.forEach(t),VZe=r(dx," or "),eR=n(dx,"A",{href:!0});var NGr=s(eR);XZe=r(NGr,"LayoutLMTokenizerFast"),NGr.forEach(t),zZe=r(dx," (LayoutLM model)"),dx.forEach(t),QZe=i(S),Kn=n(S,"LI",{});var cx=s(Kn);vre=n(cx,"STRONG",{});var jGr=s(vre);WZe=r(jGr,"layoutlmv2"),jGr.forEach(t),HZe=r(cx," \u2014 "),oR=n(cx,"A",{href:!0});var DGr=s(oR);UZe=r(DGr,"LayoutLMv2Tokenizer"),DGr.forEach(t),JZe=r(cx," or "),rR=n(cx,"A",{href:!0});var GGr=s(rR);YZe=r(GGr,"LayoutLMv2TokenizerFast"),GGr.forEach(t),KZe=r(cx," (LayoutLMv2 model)"),cx.forEach(t),ZZe=i(S),Zn=n(S,"LI",{});var fx=s(Zn);Fre=n(fx,"STRONG",{});var OGr=s(Fre);eeo=r(OGr,"layoutxlm"),OGr.forEach(t),oeo=r(fx," \u2014 "),tR=n(fx,"A",{href:!0});var VGr=s(tR);reo=r(VGr,"LayoutXLMTokenizer"),VGr.forEach(t),teo=r(fx," or "),aR=n(fx,"A",{href:!0});var XGr=s(aR);aeo=r(XGr,"LayoutXLMTokenizerFast"),XGr.forEach(t),neo=r(fx," (LayoutXLM model)"),fx.forEach(t),seo=i(S),es=n(S,"LI",{});var mx=s(es);Tre=n(mx,"STRONG",{});var zGr=s(Tre);leo=r(zGr,"led"),zGr.forEach(t),ieo=r(mx," \u2014 "),nR=n(mx,"A",{href:!0});var QGr=s(nR);deo=r(QGr,"LEDTokenizer"),QGr.forEach(t),ceo=r(mx," or "),sR=n(mx,"A",{href:!0});var WGr=s(sR);feo=r(WGr,"LEDTokenizerFast"),WGr.forEach(t),meo=r(mx," (LED model)"),mx.forEach(t),geo=i(S),os=n(S,"LI",{});var gx=s(os);Mre=n(gx,"STRONG",{});var HGr=s(Mre);heo=r(HGr,"longformer"),HGr.forEach(t),peo=r(gx," \u2014 "),lR=n(gx,"A",{href:!0});var UGr=s(lR);ueo=r(UGr,"LongformerTokenizer"),UGr.forEach(t),_eo=r(gx," or "),iR=n(gx,"A",{href:!0});var JGr=s(iR);beo=r(JGr,"LongformerTokenizerFast"),JGr.forEach(t),veo=r(gx," (Longformer model)"),gx.forEach(t),Feo=i(S),rs=n(S,"LI",{});var hx=s(rs);Ere=n(hx,"STRONG",{});var YGr=s(Ere);Teo=r(YGr,"longt5"),YGr.forEach(t),Meo=r(hx," \u2014 "),dR=n(hx,"A",{href:!0});var KGr=s(dR);Eeo=r(KGr,"T5Tokenizer"),KGr.forEach(t),Ceo=r(hx," or "),cR=n(hx,"A",{href:!0});var ZGr=s(cR);weo=r(ZGr,"T5TokenizerFast"),ZGr.forEach(t),Aeo=r(hx," (LongT5 model)"),hx.forEach(t),yeo=i(S),Tg=n(S,"LI",{});var WEe=s(Tg);Cre=n(WEe,"STRONG",{});var eOr=s(Cre);Leo=r(eOr,"luke"),eOr.forEach(t),xeo=r(WEe," \u2014 "),fR=n(WEe,"A",{href:!0});var oOr=s(fR);$eo=r(oOr,"LukeTokenizer"),oOr.forEach(t),keo=r(WEe," (LUKE model)"),WEe.forEach(t),Seo=i(S),ts=n(S,"LI",{});var px=s(ts);wre=n(px,"STRONG",{});var rOr=s(wre);Reo=r(rOr,"lxmert"),rOr.forEach(t),Beo=r(px," \u2014 "),mR=n(px,"A",{href:!0});var tOr=s(mR);Peo=r(tOr,"LxmertTokenizer"),tOr.forEach(t),Ieo=r(px," or "),gR=n(px,"A",{href:!0});var aOr=s(gR);qeo=r(aOr,"LxmertTokenizerFast"),aOr.forEach(t),Neo=r(px," (LXMERT model)"),px.forEach(t),jeo=i(S),Mg=n(S,"LI",{});var HEe=s(Mg);Are=n(HEe,"STRONG",{});var nOr=s(Are);Deo=r(nOr,"m2m_100"),nOr.forEach(t),Geo=r(HEe," \u2014 "),hR=n(HEe,"A",{href:!0});var sOr=s(hR);Oeo=r(sOr,"M2M100Tokenizer"),sOr.forEach(t),Veo=r(HEe," (M2M100 model)"),HEe.forEach(t),Xeo=i(S),Eg=n(S,"LI",{});var UEe=s(Eg);yre=n(UEe,"STRONG",{});var lOr=s(yre);zeo=r(lOr,"marian"),lOr.forEach(t),Qeo=r(UEe," \u2014 "),pR=n(UEe,"A",{href:!0});var iOr=s(pR);Weo=r(iOr,"MarianTokenizer"),iOr.forEach(t),Heo=r(UEe," (Marian model)"),UEe.forEach(t),Ueo=i(S),as=n(S,"LI",{});var ux=s(as);Lre=n(ux,"STRONG",{});var dOr=s(Lre);Jeo=r(dOr,"mbart"),dOr.forEach(t),Yeo=r(ux," \u2014 "),uR=n(ux,"A",{href:!0});var cOr=s(uR);Keo=r(cOr,"MBartTokenizer"),cOr.forEach(t),Zeo=r(ux," or "),_R=n(ux,"A",{href:!0});var fOr=s(_R);eoo=r(fOr,"MBartTokenizerFast"),fOr.forEach(t),ooo=r(ux," (mBART model)"),ux.forEach(t),roo=i(S),ns=n(S,"LI",{});var _x=s(ns);xre=n(_x,"STRONG",{});var mOr=s(xre);too=r(mOr,"mbart50"),mOr.forEach(t),aoo=r(_x," \u2014 "),bR=n(_x,"A",{href:!0});var gOr=s(bR);noo=r(gOr,"MBart50Tokenizer"),gOr.forEach(t),soo=r(_x," or "),vR=n(_x,"A",{href:!0});var hOr=s(vR);loo=r(hOr,"MBart50TokenizerFast"),hOr.forEach(t),ioo=r(_x," (mBART-50 model)"),_x.forEach(t),doo=i(S),ss=n(S,"LI",{});var bx=s(ss);$re=n(bx,"STRONG",{});var pOr=s($re);coo=r(pOr,"megatron-bert"),pOr.forEach(t),foo=r(bx," \u2014 "),FR=n(bx,"A",{href:!0});var uOr=s(FR);moo=r(uOr,"BertTokenizer"),uOr.forEach(t),goo=r(bx," or "),TR=n(bx,"A",{href:!0});var _Or=s(TR);hoo=r(_Or,"BertTokenizerFast"),_Or.forEach(t),poo=r(bx," (MegatronBert model)"),bx.forEach(t),uoo=i(S),Cg=n(S,"LI",{});var JEe=s(Cg);kre=n(JEe,"STRONG",{});var bOr=s(kre);_oo=r(bOr,"mluke"),bOr.forEach(t),boo=r(JEe," \u2014 "),MR=n(JEe,"A",{href:!0});var vOr=s(MR);voo=r(vOr,"MLukeTokenizer"),vOr.forEach(t),Foo=r(JEe," (mLUKE model)"),JEe.forEach(t),Too=i(S),ls=n(S,"LI",{});var vx=s(ls);Sre=n(vx,"STRONG",{});var FOr=s(Sre);Moo=r(FOr,"mobilebert"),FOr.forEach(t),Eoo=r(vx," \u2014 "),ER=n(vx,"A",{href:!0});var TOr=s(ER);Coo=r(TOr,"MobileBertTokenizer"),TOr.forEach(t),woo=r(vx," or "),CR=n(vx,"A",{href:!0});var MOr=s(CR);Aoo=r(MOr,"MobileBertTokenizerFast"),MOr.forEach(t),yoo=r(vx," (MobileBERT model)"),vx.forEach(t),Loo=i(S),is=n(S,"LI",{});var Fx=s(is);Rre=n(Fx,"STRONG",{});var EOr=s(Rre);xoo=r(EOr,"mpnet"),EOr.forEach(t),$oo=r(Fx," \u2014 "),wR=n(Fx,"A",{href:!0});var COr=s(wR);koo=r(COr,"MPNetTokenizer"),COr.forEach(t),Soo=r(Fx," or "),AR=n(Fx,"A",{href:!0});var wOr=s(AR);Roo=r(wOr,"MPNetTokenizerFast"),wOr.forEach(t),Boo=r(Fx," (MPNet model)"),Fx.forEach(t),Poo=i(S),ds=n(S,"LI",{});var Tx=s(ds);Bre=n(Tx,"STRONG",{});var AOr=s(Bre);Ioo=r(AOr,"mt5"),AOr.forEach(t),qoo=r(Tx," \u2014 "),yR=n(Tx,"A",{href:!0});var yOr=s(yR);Noo=r(yOr,"MT5Tokenizer"),yOr.forEach(t),joo=r(Tx," or "),LR=n(Tx,"A",{href:!0});var LOr=s(LR);Doo=r(LOr,"MT5TokenizerFast"),LOr.forEach(t),Goo=r(Tx," (mT5 model)"),Tx.forEach(t),Ooo=i(S),cs=n(S,"LI",{});var Mx=s(cs);Pre=n(Mx,"STRONG",{});var xOr=s(Pre);Voo=r(xOr,"nystromformer"),xOr.forEach(t),Xoo=r(Mx," \u2014 "),xR=n(Mx,"A",{href:!0});var $Or=s(xR);zoo=r($Or,"AlbertTokenizer"),$Or.forEach(t),Qoo=r(Mx," or "),$R=n(Mx,"A",{href:!0});var kOr=s($R);Woo=r(kOr,"AlbertTokenizerFast"),kOr.forEach(t),Hoo=r(Mx," (Nystromformer model)"),Mx.forEach(t),Uoo=i(S),fs=n(S,"LI",{});var Ex=s(fs);Ire=n(Ex,"STRONG",{});var SOr=s(Ire);Joo=r(SOr,"openai-gpt"),SOr.forEach(t),Yoo=r(Ex," \u2014 "),kR=n(Ex,"A",{href:!0});var ROr=s(kR);Koo=r(ROr,"OpenAIGPTTokenizer"),ROr.forEach(t),Zoo=r(Ex," or "),SR=n(Ex,"A",{href:!0});var BOr=s(SR);ero=r(BOr,"OpenAIGPTTokenizerFast"),BOr.forEach(t),oro=r(Ex," (OpenAI GPT model)"),Ex.forEach(t),rro=i(S),ms=n(S,"LI",{});var Cx=s(ms);qre=n(Cx,"STRONG",{});var POr=s(qre);tro=r(POr,"pegasus"),POr.forEach(t),aro=r(Cx," \u2014 "),RR=n(Cx,"A",{href:!0});var IOr=s(RR);nro=r(IOr,"PegasusTokenizer"),IOr.forEach(t),sro=r(Cx," or "),BR=n(Cx,"A",{href:!0});var qOr=s(BR);lro=r(qOr,"PegasusTokenizerFast"),qOr.forEach(t),iro=r(Cx," (Pegasus model)"),Cx.forEach(t),dro=i(S),wg=n(S,"LI",{});var YEe=s(wg);Nre=n(YEe,"STRONG",{});var NOr=s(Nre);cro=r(NOr,"perceiver"),NOr.forEach(t),fro=r(YEe," \u2014 "),PR=n(YEe,"A",{href:!0});var jOr=s(PR);mro=r(jOr,"PerceiverTokenizer"),jOr.forEach(t),gro=r(YEe," (Perceiver model)"),YEe.forEach(t),hro=i(S),Ag=n(S,"LI",{});var KEe=s(Ag);jre=n(KEe,"STRONG",{});var DOr=s(jre);pro=r(DOr,"phobert"),DOr.forEach(t),uro=r(KEe," \u2014 "),IR=n(KEe,"A",{href:!0});var GOr=s(IR);_ro=r(GOr,"PhobertTokenizer"),GOr.forEach(t),bro=r(KEe," (PhoBERT model)"),KEe.forEach(t),vro=i(S),yg=n(S,"LI",{});var ZEe=s(yg);Dre=n(ZEe,"STRONG",{});var OOr=s(Dre);Fro=r(OOr,"plbart"),OOr.forEach(t),Tro=r(ZEe," \u2014 "),qR=n(ZEe,"A",{href:!0});var VOr=s(qR);Mro=r(VOr,"PLBartTokenizer"),VOr.forEach(t),Ero=r(ZEe," (PLBart model)"),ZEe.forEach(t),Cro=i(S),Lg=n(S,"LI",{});var e5e=s(Lg);Gre=n(e5e,"STRONG",{});var XOr=s(Gre);wro=r(XOr,"prophetnet"),XOr.forEach(t),Aro=r(e5e," \u2014 "),NR=n(e5e,"A",{href:!0});var zOr=s(NR);yro=r(zOr,"ProphetNetTokenizer"),zOr.forEach(t),Lro=r(e5e," (ProphetNet model)"),e5e.forEach(t),xro=i(S),gs=n(S,"LI",{});var wx=s(gs);Ore=n(wx,"STRONG",{});var QOr=s(Ore);$ro=r(QOr,"qdqbert"),QOr.forEach(t),kro=r(wx," \u2014 "),jR=n(wx,"A",{href:!0});var WOr=s(jR);Sro=r(WOr,"BertTokenizer"),WOr.forEach(t),Rro=r(wx," or "),DR=n(wx,"A",{href:!0});var HOr=s(DR);Bro=r(HOr,"BertTokenizerFast"),HOr.forEach(t),Pro=r(wx," (QDQBert model)"),wx.forEach(t),Iro=i(S),xg=n(S,"LI",{});var o5e=s(xg);Vre=n(o5e,"STRONG",{});var UOr=s(Vre);qro=r(UOr,"rag"),UOr.forEach(t),Nro=r(o5e," \u2014 "),GR=n(o5e,"A",{href:!0});var JOr=s(GR);jro=r(JOr,"RagTokenizer"),JOr.forEach(t),Dro=r(o5e," (RAG model)"),o5e.forEach(t),Gro=i(S),hs=n(S,"LI",{});var Ax=s(hs);Xre=n(Ax,"STRONG",{});var YOr=s(Xre);Oro=r(YOr,"realm"),YOr.forEach(t),Vro=r(Ax," \u2014 "),OR=n(Ax,"A",{href:!0});var KOr=s(OR);Xro=r(KOr,"RealmTokenizer"),KOr.forEach(t),zro=r(Ax," or "),VR=n(Ax,"A",{href:!0});var ZOr=s(VR);Qro=r(ZOr,"RealmTokenizerFast"),ZOr.forEach(t),Wro=r(Ax," (Realm model)"),Ax.forEach(t),Hro=i(S),ps=n(S,"LI",{});var yx=s(ps);zre=n(yx,"STRONG",{});var eVr=s(zre);Uro=r(eVr,"reformer"),eVr.forEach(t),Jro=r(yx," \u2014 "),XR=n(yx,"A",{href:!0});var oVr=s(XR);Yro=r(oVr,"ReformerTokenizer"),oVr.forEach(t),Kro=r(yx," or "),zR=n(yx,"A",{href:!0});var rVr=s(zR);Zro=r(rVr,"ReformerTokenizerFast"),rVr.forEach(t),eto=r(yx," (Reformer model)"),yx.forEach(t),oto=i(S),us=n(S,"LI",{});var Lx=s(us);Qre=n(Lx,"STRONG",{});var tVr=s(Qre);rto=r(tVr,"rembert"),tVr.forEach(t),tto=r(Lx," \u2014 "),QR=n(Lx,"A",{href:!0});var aVr=s(QR);ato=r(aVr,"RemBertTokenizer"),aVr.forEach(t),nto=r(Lx," or "),WR=n(Lx,"A",{href:!0});var nVr=s(WR);sto=r(nVr,"RemBertTokenizerFast"),nVr.forEach(t),lto=r(Lx," (RemBERT model)"),Lx.forEach(t),ito=i(S),_s=n(S,"LI",{});var xx=s(_s);Wre=n(xx,"STRONG",{});var sVr=s(Wre);dto=r(sVr,"retribert"),sVr.forEach(t),cto=r(xx," \u2014 "),HR=n(xx,"A",{href:!0});var lVr=s(HR);fto=r(lVr,"RetriBertTokenizer"),lVr.forEach(t),mto=r(xx," or "),UR=n(xx,"A",{href:!0});var iVr=s(UR);gto=r(iVr,"RetriBertTokenizerFast"),iVr.forEach(t),hto=r(xx," (RetriBERT model)"),xx.forEach(t),pto=i(S),bs=n(S,"LI",{});var $x=s(bs);Hre=n($x,"STRONG",{});var dVr=s(Hre);uto=r(dVr,"roberta"),dVr.forEach(t),_to=r($x," \u2014 "),JR=n($x,"A",{href:!0});var cVr=s(JR);bto=r(cVr,"RobertaTokenizer"),cVr.forEach(t),vto=r($x," or "),YR=n($x,"A",{href:!0});var fVr=s(YR);Fto=r(fVr,"RobertaTokenizerFast"),fVr.forEach(t),Tto=r($x," (RoBERTa model)"),$x.forEach(t),Mto=i(S),vs=n(S,"LI",{});var kx=s(vs);Ure=n(kx,"STRONG",{});var mVr=s(Ure);Eto=r(mVr,"roformer"),mVr.forEach(t),Cto=r(kx," \u2014 "),KR=n(kx,"A",{href:!0});var gVr=s(KR);wto=r(gVr,"RoFormerTokenizer"),gVr.forEach(t),Ato=r(kx," or "),ZR=n(kx,"A",{href:!0});var hVr=s(ZR);yto=r(hVr,"RoFormerTokenizerFast"),hVr.forEach(t),Lto=r(kx," (RoFormer model)"),kx.forEach(t),xto=i(S),$g=n(S,"LI",{});var r5e=s($g);Jre=n(r5e,"STRONG",{});var pVr=s(Jre);$to=r(pVr,"speech_to_text"),pVr.forEach(t),kto=r(r5e," \u2014 "),eB=n(r5e,"A",{href:!0});var uVr=s(eB);Sto=r(uVr,"Speech2TextTokenizer"),uVr.forEach(t),Rto=r(r5e," (Speech2Text model)"),r5e.forEach(t),Bto=i(S),kg=n(S,"LI",{});var t5e=s(kg);Yre=n(t5e,"STRONG",{});var _Vr=s(Yre);Pto=r(_Vr,"speech_to_text_2"),_Vr.forEach(t),Ito=r(t5e," \u2014 "),oB=n(t5e,"A",{href:!0});var bVr=s(oB);qto=r(bVr,"Speech2Text2Tokenizer"),bVr.forEach(t),Nto=r(t5e," (Speech2Text2 model)"),t5e.forEach(t),jto=i(S),Fs=n(S,"LI",{});var Sx=s(Fs);Kre=n(Sx,"STRONG",{});var vVr=s(Kre);Dto=r(vVr,"splinter"),vVr.forEach(t),Gto=r(Sx," \u2014 "),rB=n(Sx,"A",{href:!0});var FVr=s(rB);Oto=r(FVr,"SplinterTokenizer"),FVr.forEach(t),Vto=r(Sx," or "),tB=n(Sx,"A",{href:!0});var TVr=s(tB);Xto=r(TVr,"SplinterTokenizerFast"),TVr.forEach(t),zto=r(Sx," (Splinter model)"),Sx.forEach(t),Qto=i(S),Ts=n(S,"LI",{});var Rx=s(Ts);Zre=n(Rx,"STRONG",{});var MVr=s(Zre);Wto=r(MVr,"squeezebert"),MVr.forEach(t),Hto=r(Rx," \u2014 "),aB=n(Rx,"A",{href:!0});var EVr=s(aB);Uto=r(EVr,"SqueezeBertTokenizer"),EVr.forEach(t),Jto=r(Rx," or "),nB=n(Rx,"A",{href:!0});var CVr=s(nB);Yto=r(CVr,"SqueezeBertTokenizerFast"),CVr.forEach(t),Kto=r(Rx," (SqueezeBERT model)"),Rx.forEach(t),Zto=i(S),Ms=n(S,"LI",{});var Bx=s(Ms);ete=n(Bx,"STRONG",{});var wVr=s(ete);eao=r(wVr,"t5"),wVr.forEach(t),oao=r(Bx," \u2014 "),sB=n(Bx,"A",{href:!0});var AVr=s(sB);rao=r(AVr,"T5Tokenizer"),AVr.forEach(t),tao=r(Bx," or "),lB=n(Bx,"A",{href:!0});var yVr=s(lB);aao=r(yVr,"T5TokenizerFast"),yVr.forEach(t),nao=r(Bx," (T5 model)"),Bx.forEach(t),sao=i(S),Sg=n(S,"LI",{});var a5e=s(Sg);ote=n(a5e,"STRONG",{});var LVr=s(ote);lao=r(LVr,"tapas"),LVr.forEach(t),iao=r(a5e," \u2014 "),iB=n(a5e,"A",{href:!0});var xVr=s(iB);dao=r(xVr,"TapasTokenizer"),xVr.forEach(t),cao=r(a5e," (TAPAS model)"),a5e.forEach(t),fao=i(S),Rg=n(S,"LI",{});var n5e=s(Rg);rte=n(n5e,"STRONG",{});var $Vr=s(rte);mao=r($Vr,"tapex"),$Vr.forEach(t),gao=r(n5e," \u2014 "),dB=n(n5e,"A",{href:!0});var kVr=s(dB);hao=r(kVr,"TapexTokenizer"),kVr.forEach(t),pao=r(n5e," (TAPEX model)"),n5e.forEach(t),uao=i(S),Bg=n(S,"LI",{});var s5e=s(Bg);tte=n(s5e,"STRONG",{});var SVr=s(tte);_ao=r(SVr,"transfo-xl"),SVr.forEach(t),bao=r(s5e," \u2014 "),cB=n(s5e,"A",{href:!0});var RVr=s(cB);vao=r(RVr,"TransfoXLTokenizer"),RVr.forEach(t),Fao=r(s5e," (Transformer-XL model)"),s5e.forEach(t),Tao=i(S),Es=n(S,"LI",{});var Px=s(Es);ate=n(Px,"STRONG",{});var BVr=s(ate);Mao=r(BVr,"visual_bert"),BVr.forEach(t),Eao=r(Px," \u2014 "),fB=n(Px,"A",{href:!0});var PVr=s(fB);Cao=r(PVr,"BertTokenizer"),PVr.forEach(t),wao=r(Px," or "),mB=n(Px,"A",{href:!0});var IVr=s(mB);Aao=r(IVr,"BertTokenizerFast"),IVr.forEach(t),yao=r(Px," (VisualBert model)"),Px.forEach(t),Lao=i(S),Pg=n(S,"LI",{});var l5e=s(Pg);nte=n(l5e,"STRONG",{});var qVr=s(nte);xao=r(qVr,"wav2vec2"),qVr.forEach(t),$ao=r(l5e," \u2014 "),gB=n(l5e,"A",{href:!0});var NVr=s(gB);kao=r(NVr,"Wav2Vec2CTCTokenizer"),NVr.forEach(t),Sao=r(l5e," (Wav2Vec2 model)"),l5e.forEach(t),Rao=i(S),Ig=n(S,"LI",{});var i5e=s(Ig);ste=n(i5e,"STRONG",{});var jVr=s(ste);Bao=r(jVr,"wav2vec2_phoneme"),jVr.forEach(t),Pao=r(i5e," \u2014 "),hB=n(i5e,"A",{href:!0});var DVr=s(hB);Iao=r(DVr,"Wav2Vec2PhonemeCTCTokenizer"),DVr.forEach(t),qao=r(i5e," (Wav2Vec2Phoneme model)"),i5e.forEach(t),Nao=i(S),Cs=n(S,"LI",{});var Ix=s(Cs);lte=n(Ix,"STRONG",{});var GVr=s(lte);jao=r(GVr,"xglm"),GVr.forEach(t),Dao=r(Ix," \u2014 "),pB=n(Ix,"A",{href:!0});var OVr=s(pB);Gao=r(OVr,"XGLMTokenizer"),OVr.forEach(t),Oao=r(Ix," or "),uB=n(Ix,"A",{href:!0});var VVr=s(uB);Vao=r(VVr,"XGLMTokenizerFast"),VVr.forEach(t),Xao=r(Ix," (XGLM model)"),Ix.forEach(t),zao=i(S),qg=n(S,"LI",{});var d5e=s(qg);ite=n(d5e,"STRONG",{});var XVr=s(ite);Qao=r(XVr,"xlm"),XVr.forEach(t),Wao=r(d5e," \u2014 "),_B=n(d5e,"A",{href:!0});var zVr=s(_B);Hao=r(zVr,"XLMTokenizer"),zVr.forEach(t),Uao=r(d5e," (XLM model)"),d5e.forEach(t),Jao=i(S),Ng=n(S,"LI",{});var c5e=s(Ng);dte=n(c5e,"STRONG",{});var QVr=s(dte);Yao=r(QVr,"xlm-prophetnet"),QVr.forEach(t),Kao=r(c5e," \u2014 "),bB=n(c5e,"A",{href:!0});var WVr=s(bB);Zao=r(WVr,"XLMProphetNetTokenizer"),WVr.forEach(t),eno=r(c5e," (XLMProphetNet model)"),c5e.forEach(t),ono=i(S),ws=n(S,"LI",{});var qx=s(ws);cte=n(qx,"STRONG",{});var HVr=s(cte);rno=r(HVr,"xlm-roberta"),HVr.forEach(t),tno=r(qx," \u2014 "),vB=n(qx,"A",{href:!0});var UVr=s(vB);ano=r(UVr,"XLMRobertaTokenizer"),UVr.forEach(t),nno=r(qx," or "),FB=n(qx,"A",{href:!0});var JVr=s(FB);sno=r(JVr,"XLMRobertaTokenizerFast"),JVr.forEach(t),lno=r(qx," (XLM-RoBERTa model)"),qx.forEach(t),ino=i(S),As=n(S,"LI",{});var Nx=s(As);fte=n(Nx,"STRONG",{});var YVr=s(fte);dno=r(YVr,"xlm-roberta-xl"),YVr.forEach(t),cno=r(Nx," \u2014 "),TB=n(Nx,"A",{href:!0});var KVr=s(TB);fno=r(KVr,"RobertaTokenizer"),KVr.forEach(t),mno=r(Nx," or "),MB=n(Nx,"A",{href:!0});var ZVr=s(MB);gno=r(ZVr,"RobertaTokenizerFast"),ZVr.forEach(t),hno=r(Nx," (XLM-RoBERTa-XL model)"),Nx.forEach(t),pno=i(S),ys=n(S,"LI",{});var jx=s(ys);mte=n(jx,"STRONG",{});var eXr=s(mte);uno=r(eXr,"xlnet"),eXr.forEach(t),_no=r(jx," \u2014 "),EB=n(jx,"A",{href:!0});var oXr=s(EB);bno=r(oXr,"XLNetTokenizer"),oXr.forEach(t),vno=r(jx," or "),CB=n(jx,"A",{href:!0});var rXr=s(CB);Fno=r(rXr,"XLNetTokenizerFast"),rXr.forEach(t),Tno=r(jx," (XLNet model)"),jx.forEach(t),Mno=i(S),Ls=n(S,"LI",{});var Dx=s(Ls);gte=n(Dx,"STRONG",{});var tXr=s(gte);Eno=r(tXr,"yoso"),tXr.forEach(t),Cno=r(Dx," \u2014 "),wB=n(Dx,"A",{href:!0});var aXr=s(wB);wno=r(aXr,"AlbertTokenizer"),aXr.forEach(t),Ano=r(Dx," or "),AB=n(Dx,"A",{href:!0});var nXr=s(AB);yno=r(nXr,"AlbertTokenizerFast"),nXr.forEach(t),Lno=r(Dx," (YOSO model)"),Dx.forEach(t),S.forEach(t),xno=i(Rs),T(jg.$$.fragment,Rs),Rs.forEach(t),$no=i(Ss),Dg=n(Ss,"DIV",{class:!0});var ZIe=s(Dg);T(zw.$$.fragment,ZIe),kno=i(ZIe),hte=n(ZIe,"P",{});var sXr=s(hte);Sno=r(sXr,"Register a new tokenizer in this mapping."),sXr.forEach(t),ZIe.forEach(t),Ss.forEach(t),rPe=i(f),gi=n(f,"H2",{class:!0});var eqe=s(gi);Gg=n(eqe,"A",{id:!0,class:!0,href:!0});var lXr=s(Gg);pte=n(lXr,"SPAN",{});var iXr=s(pte);T(Qw.$$.fragment,iXr),iXr.forEach(t),lXr.forEach(t),Rno=i(eqe),ute=n(eqe,"SPAN",{});var dXr=s(ute);Bno=r(dXr,"AutoFeatureExtractor"),dXr.forEach(t),eqe.forEach(t),tPe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Ww.$$.fragment,Bs),Pno=i(Bs),Hw=n(Bs,"P",{});var oqe=s(Hw);Ino=r(oqe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),yB=n(oqe,"A",{href:!0});var cXr=s(yB);qno=r(cXr,"AutoFeatureExtractor.from_pretrained()"),cXr.forEach(t),Nno=r(oqe," class method."),oqe.forEach(t),jno=i(Bs),Uw=n(Bs,"P",{});var rqe=s(Uw);Dno=r(rqe,"This class cannot be instantiated directly using "),_te=n(rqe,"CODE",{});var fXr=s(_te);Gno=r(fXr,"__init__()"),fXr.forEach(t),Ono=r(rqe," (throws an error)."),rqe.forEach(t),Vno=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ht=s(Qe);T(Jw.$$.fragment,Ht),Xno=i(Ht),bte=n(Ht,"P",{});var mXr=s(bte);zno=r(mXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),mXr.forEach(t),Qno=i(Ht),Ma=n(Ht,"P",{});var IC=s(Ma);Wno=r(IC,"The feature extractor class to instantiate is selected based on the "),vte=n(IC,"CODE",{});var gXr=s(vte);Hno=r(gXr,"model_type"),gXr.forEach(t),Uno=r(IC,` property of the config object
(either passed as an argument or loaded from `),Fte=n(IC,"CODE",{});var hXr=s(Fte);Jno=r(hXr,"pretrained_model_name_or_path"),hXr.forEach(t),Yno=r(IC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Tte=n(IC,"CODE",{});var pXr=s(Tte);Kno=r(pXr,"pretrained_model_name_or_path"),pXr.forEach(t),Zno=r(IC,":"),IC.forEach(t),eso=i(Ht),ae=n(Ht,"UL",{});var se=s(ae);Og=n(se,"LI",{});var f5e=s(Og);Mte=n(f5e,"STRONG",{});var uXr=s(Mte);oso=r(uXr,"beit"),uXr.forEach(t),rso=r(f5e," \u2014 "),LB=n(f5e,"A",{href:!0});var _Xr=s(LB);tso=r(_Xr,"BeitFeatureExtractor"),_Xr.forEach(t),aso=r(f5e," (BEiT model)"),f5e.forEach(t),nso=i(se),Vg=n(se,"LI",{});var m5e=s(Vg);Ete=n(m5e,"STRONG",{});var bXr=s(Ete);sso=r(bXr,"clip"),bXr.forEach(t),lso=r(m5e," \u2014 "),xB=n(m5e,"A",{href:!0});var vXr=s(xB);iso=r(vXr,"CLIPFeatureExtractor"),vXr.forEach(t),dso=r(m5e," (CLIP model)"),m5e.forEach(t),cso=i(se),Xg=n(se,"LI",{});var g5e=s(Xg);Cte=n(g5e,"STRONG",{});var FXr=s(Cte);fso=r(FXr,"convnext"),FXr.forEach(t),mso=r(g5e," \u2014 "),$B=n(g5e,"A",{href:!0});var TXr=s($B);gso=r(TXr,"ConvNextFeatureExtractor"),TXr.forEach(t),hso=r(g5e," (ConvNext model)"),g5e.forEach(t),pso=i(se),zg=n(se,"LI",{});var h5e=s(zg);wte=n(h5e,"STRONG",{});var MXr=s(wte);uso=r(MXr,"data2vec-audio"),MXr.forEach(t),_so=r(h5e," \u2014 "),kB=n(h5e,"A",{href:!0});var EXr=s(kB);bso=r(EXr,"Wav2Vec2FeatureExtractor"),EXr.forEach(t),vso=r(h5e," (Data2VecAudio model)"),h5e.forEach(t),Fso=i(se),Qg=n(se,"LI",{});var p5e=s(Qg);Ate=n(p5e,"STRONG",{});var CXr=s(Ate);Tso=r(CXr,"data2vec-vision"),CXr.forEach(t),Mso=r(p5e," \u2014 "),SB=n(p5e,"A",{href:!0});var wXr=s(SB);Eso=r(wXr,"BeitFeatureExtractor"),wXr.forEach(t),Cso=r(p5e," (Data2VecVision model)"),p5e.forEach(t),wso=i(se),Wg=n(se,"LI",{});var u5e=s(Wg);yte=n(u5e,"STRONG",{});var AXr=s(yte);Aso=r(AXr,"deit"),AXr.forEach(t),yso=r(u5e," \u2014 "),RB=n(u5e,"A",{href:!0});var yXr=s(RB);Lso=r(yXr,"DeiTFeatureExtractor"),yXr.forEach(t),xso=r(u5e," (DeiT model)"),u5e.forEach(t),$so=i(se),Hg=n(se,"LI",{});var _5e=s(Hg);Lte=n(_5e,"STRONG",{});var LXr=s(Lte);kso=r(LXr,"detr"),LXr.forEach(t),Sso=r(_5e," \u2014 "),BB=n(_5e,"A",{href:!0});var xXr=s(BB);Rso=r(xXr,"DetrFeatureExtractor"),xXr.forEach(t),Bso=r(_5e," (DETR model)"),_5e.forEach(t),Pso=i(se),Ug=n(se,"LI",{});var b5e=s(Ug);xte=n(b5e,"STRONG",{});var $Xr=s(xte);Iso=r($Xr,"dpt"),$Xr.forEach(t),qso=r(b5e," \u2014 "),PB=n(b5e,"A",{href:!0});var kXr=s(PB);Nso=r(kXr,"DPTFeatureExtractor"),kXr.forEach(t),jso=r(b5e," (DPT model)"),b5e.forEach(t),Dso=i(se),Jg=n(se,"LI",{});var v5e=s(Jg);$te=n(v5e,"STRONG",{});var SXr=s($te);Gso=r(SXr,"glpn"),SXr.forEach(t),Oso=r(v5e," \u2014 "),IB=n(v5e,"A",{href:!0});var RXr=s(IB);Vso=r(RXr,"GLPNFeatureExtractor"),RXr.forEach(t),Xso=r(v5e," (GLPN model)"),v5e.forEach(t),zso=i(se),Yg=n(se,"LI",{});var F5e=s(Yg);kte=n(F5e,"STRONG",{});var BXr=s(kte);Qso=r(BXr,"hubert"),BXr.forEach(t),Wso=r(F5e," \u2014 "),qB=n(F5e,"A",{href:!0});var PXr=s(qB);Hso=r(PXr,"Wav2Vec2FeatureExtractor"),PXr.forEach(t),Uso=r(F5e," (Hubert model)"),F5e.forEach(t),Jso=i(se),Kg=n(se,"LI",{});var T5e=s(Kg);Ste=n(T5e,"STRONG",{});var IXr=s(Ste);Yso=r(IXr,"layoutlmv2"),IXr.forEach(t),Kso=r(T5e," \u2014 "),NB=n(T5e,"A",{href:!0});var qXr=s(NB);Zso=r(qXr,"LayoutLMv2FeatureExtractor"),qXr.forEach(t),elo=r(T5e," (LayoutLMv2 model)"),T5e.forEach(t),olo=i(se),Zg=n(se,"LI",{});var M5e=s(Zg);Rte=n(M5e,"STRONG",{});var NXr=s(Rte);rlo=r(NXr,"maskformer"),NXr.forEach(t),tlo=r(M5e," \u2014 "),jB=n(M5e,"A",{href:!0});var jXr=s(jB);alo=r(jXr,"MaskFormerFeatureExtractor"),jXr.forEach(t),nlo=r(M5e," (MaskFormer model)"),M5e.forEach(t),slo=i(se),eh=n(se,"LI",{});var E5e=s(eh);Bte=n(E5e,"STRONG",{});var DXr=s(Bte);llo=r(DXr,"perceiver"),DXr.forEach(t),ilo=r(E5e," \u2014 "),DB=n(E5e,"A",{href:!0});var GXr=s(DB);dlo=r(GXr,"PerceiverFeatureExtractor"),GXr.forEach(t),clo=r(E5e," (Perceiver model)"),E5e.forEach(t),flo=i(se),oh=n(se,"LI",{});var C5e=s(oh);Pte=n(C5e,"STRONG",{});var OXr=s(Pte);mlo=r(OXr,"poolformer"),OXr.forEach(t),glo=r(C5e," \u2014 "),GB=n(C5e,"A",{href:!0});var VXr=s(GB);hlo=r(VXr,"PoolFormerFeatureExtractor"),VXr.forEach(t),plo=r(C5e," (PoolFormer model)"),C5e.forEach(t),ulo=i(se),rh=n(se,"LI",{});var w5e=s(rh);Ite=n(w5e,"STRONG",{});var XXr=s(Ite);_lo=r(XXr,"regnet"),XXr.forEach(t),blo=r(w5e," \u2014 "),OB=n(w5e,"A",{href:!0});var zXr=s(OB);vlo=r(zXr,"ConvNextFeatureExtractor"),zXr.forEach(t),Flo=r(w5e," (RegNet model)"),w5e.forEach(t),Tlo=i(se),th=n(se,"LI",{});var A5e=s(th);qte=n(A5e,"STRONG",{});var QXr=s(qte);Mlo=r(QXr,"resnet"),QXr.forEach(t),Elo=r(A5e," \u2014 "),VB=n(A5e,"A",{href:!0});var WXr=s(VB);Clo=r(WXr,"ConvNextFeatureExtractor"),WXr.forEach(t),wlo=r(A5e," (ResNet model)"),A5e.forEach(t),Alo=i(se),ah=n(se,"LI",{});var y5e=s(ah);Nte=n(y5e,"STRONG",{});var HXr=s(Nte);ylo=r(HXr,"segformer"),HXr.forEach(t),Llo=r(y5e," \u2014 "),XB=n(y5e,"A",{href:!0});var UXr=s(XB);xlo=r(UXr,"SegformerFeatureExtractor"),UXr.forEach(t),$lo=r(y5e," (SegFormer model)"),y5e.forEach(t),klo=i(se),nh=n(se,"LI",{});var L5e=s(nh);jte=n(L5e,"STRONG",{});var JXr=s(jte);Slo=r(JXr,"speech_to_text"),JXr.forEach(t),Rlo=r(L5e," \u2014 "),zB=n(L5e,"A",{href:!0});var YXr=s(zB);Blo=r(YXr,"Speech2TextFeatureExtractor"),YXr.forEach(t),Plo=r(L5e," (Speech2Text model)"),L5e.forEach(t),Ilo=i(se),sh=n(se,"LI",{});var x5e=s(sh);Dte=n(x5e,"STRONG",{});var KXr=s(Dte);qlo=r(KXr,"swin"),KXr.forEach(t),Nlo=r(x5e," \u2014 "),QB=n(x5e,"A",{href:!0});var ZXr=s(QB);jlo=r(ZXr,"ViTFeatureExtractor"),ZXr.forEach(t),Dlo=r(x5e," (Swin model)"),x5e.forEach(t),Glo=i(se),lh=n(se,"LI",{});var $5e=s(lh);Gte=n($5e,"STRONG",{});var ezr=s(Gte);Olo=r(ezr,"van"),ezr.forEach(t),Vlo=r($5e," \u2014 "),WB=n($5e,"A",{href:!0});var ozr=s(WB);Xlo=r(ozr,"ConvNextFeatureExtractor"),ozr.forEach(t),zlo=r($5e," (VAN model)"),$5e.forEach(t),Qlo=i(se),ih=n(se,"LI",{});var k5e=s(ih);Ote=n(k5e,"STRONG",{});var rzr=s(Ote);Wlo=r(rzr,"vit"),rzr.forEach(t),Hlo=r(k5e," \u2014 "),HB=n(k5e,"A",{href:!0});var tzr=s(HB);Ulo=r(tzr,"ViTFeatureExtractor"),tzr.forEach(t),Jlo=r(k5e," (ViT model)"),k5e.forEach(t),Ylo=i(se),dh=n(se,"LI",{});var S5e=s(dh);Vte=n(S5e,"STRONG",{});var azr=s(Vte);Klo=r(azr,"vit_mae"),azr.forEach(t),Zlo=r(S5e," \u2014 "),UB=n(S5e,"A",{href:!0});var nzr=s(UB);eio=r(nzr,"ViTFeatureExtractor"),nzr.forEach(t),oio=r(S5e," (ViTMAE model)"),S5e.forEach(t),rio=i(se),ch=n(se,"LI",{});var R5e=s(ch);Xte=n(R5e,"STRONG",{});var szr=s(Xte);tio=r(szr,"wav2vec2"),szr.forEach(t),aio=r(R5e," \u2014 "),JB=n(R5e,"A",{href:!0});var lzr=s(JB);nio=r(lzr,"Wav2Vec2FeatureExtractor"),lzr.forEach(t),sio=r(R5e," (Wav2Vec2 model)"),R5e.forEach(t),lio=i(se),fh=n(se,"LI",{});var B5e=s(fh);zte=n(B5e,"STRONG",{});var izr=s(zte);iio=r(izr,"yolos"),izr.forEach(t),dio=r(B5e," \u2014 "),YB=n(B5e,"A",{href:!0});var dzr=s(YB);cio=r(dzr,"YolosFeatureExtractor"),dzr.forEach(t),fio=r(B5e," (YOLOS model)"),B5e.forEach(t),se.forEach(t),mio=i(Ht),T(mh.$$.fragment,Ht),gio=i(Ht),T(gh.$$.fragment,Ht),Ht.forEach(t),hio=i(Bs),hh=n(Bs,"DIV",{class:!0});var tqe=s(hh);T(Yw.$$.fragment,tqe),pio=i(tqe),Qte=n(tqe,"P",{});var czr=s(Qte);uio=r(czr,"Register a new feature extractor for this class."),czr.forEach(t),tqe.forEach(t),Bs.forEach(t),aPe=i(f),hi=n(f,"H2",{class:!0});var aqe=s(hi);ph=n(aqe,"A",{id:!0,class:!0,href:!0});var fzr=s(ph);Wte=n(fzr,"SPAN",{});var mzr=s(Wte);T(Kw.$$.fragment,mzr),mzr.forEach(t),fzr.forEach(t),_io=i(aqe),Hte=n(aqe,"SPAN",{});var gzr=s(Hte);bio=r(gzr,"AutoProcessor"),gzr.forEach(t),aqe.forEach(t),nPe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(Zw.$$.fragment,Ps),vio=i(Ps),eA=n(Ps,"P",{});var nqe=s(eA);Fio=r(nqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),KB=n(nqe,"A",{href:!0});var hzr=s(KB);Tio=r(hzr,"AutoProcessor.from_pretrained()"),hzr.forEach(t),Mio=r(nqe," class method."),nqe.forEach(t),Eio=i(Ps),oA=n(Ps,"P",{});var sqe=s(oA);Cio=r(sqe,"This class cannot be instantiated directly using "),Ute=n(sqe,"CODE",{});var pzr=s(Ute);wio=r(pzr,"__init__()"),pzr.forEach(t),Aio=r(sqe," (throws an error)."),sqe.forEach(t),yio=i(Ps),We=n(Ps,"DIV",{class:!0});var Ut=s(We);T(rA.$$.fragment,Ut),Lio=i(Ut),Jte=n(Ut,"P",{});var uzr=s(Jte);xio=r(uzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),uzr.forEach(t),$io=i(Ut),pi=n(Ut,"P",{});var SY=s(pi);kio=r(SY,"The processor class to instantiate is selected based on the "),Yte=n(SY,"CODE",{});var _zr=s(Yte);Sio=r(_zr,"model_type"),_zr.forEach(t),Rio=r(SY,` property of the config object (either
passed as an argument or loaded from `),Kte=n(SY,"CODE",{});var bzr=s(Kte);Bio=r(bzr,"pretrained_model_name_or_path"),bzr.forEach(t),Pio=r(SY," if possible):"),SY.forEach(t),Iio=i(Ut),be=n(Ut,"UL",{});var Te=s(be);uh=n(Te,"LI",{});var P5e=s(uh);Zte=n(P5e,"STRONG",{});var vzr=s(Zte);qio=r(vzr,"clip"),vzr.forEach(t),Nio=r(P5e," \u2014 "),ZB=n(P5e,"A",{href:!0});var Fzr=s(ZB);jio=r(Fzr,"CLIPProcessor"),Fzr.forEach(t),Dio=r(P5e," (CLIP model)"),P5e.forEach(t),Gio=i(Te),_h=n(Te,"LI",{});var I5e=s(_h);eae=n(I5e,"STRONG",{});var Tzr=s(eae);Oio=r(Tzr,"layoutlmv2"),Tzr.forEach(t),Vio=r(I5e," \u2014 "),eP=n(I5e,"A",{href:!0});var Mzr=s(eP);Xio=r(Mzr,"LayoutLMv2Processor"),Mzr.forEach(t),zio=r(I5e," (LayoutLMv2 model)"),I5e.forEach(t),Qio=i(Te),bh=n(Te,"LI",{});var q5e=s(bh);oae=n(q5e,"STRONG",{});var Ezr=s(oae);Wio=r(Ezr,"layoutxlm"),Ezr.forEach(t),Hio=r(q5e," \u2014 "),oP=n(q5e,"A",{href:!0});var Czr=s(oP);Uio=r(Czr,"LayoutXLMProcessor"),Czr.forEach(t),Jio=r(q5e," (LayoutXLM model)"),q5e.forEach(t),Yio=i(Te),vh=n(Te,"LI",{});var N5e=s(vh);rae=n(N5e,"STRONG",{});var wzr=s(rae);Kio=r(wzr,"sew"),wzr.forEach(t),Zio=r(N5e," \u2014 "),rP=n(N5e,"A",{href:!0});var Azr=s(rP);edo=r(Azr,"Wav2Vec2Processor"),Azr.forEach(t),odo=r(N5e," (SEW model)"),N5e.forEach(t),rdo=i(Te),Fh=n(Te,"LI",{});var j5e=s(Fh);tae=n(j5e,"STRONG",{});var yzr=s(tae);tdo=r(yzr,"sew-d"),yzr.forEach(t),ado=r(j5e," \u2014 "),tP=n(j5e,"A",{href:!0});var Lzr=s(tP);ndo=r(Lzr,"Wav2Vec2Processor"),Lzr.forEach(t),sdo=r(j5e," (SEW-D model)"),j5e.forEach(t),ldo=i(Te),Th=n(Te,"LI",{});var D5e=s(Th);aae=n(D5e,"STRONG",{});var xzr=s(aae);ido=r(xzr,"speech_to_text"),xzr.forEach(t),ddo=r(D5e," \u2014 "),aP=n(D5e,"A",{href:!0});var $zr=s(aP);cdo=r($zr,"Speech2TextProcessor"),$zr.forEach(t),fdo=r(D5e," (Speech2Text model)"),D5e.forEach(t),mdo=i(Te),Mh=n(Te,"LI",{});var G5e=s(Mh);nae=n(G5e,"STRONG",{});var kzr=s(nae);gdo=r(kzr,"speech_to_text_2"),kzr.forEach(t),hdo=r(G5e," \u2014 "),nP=n(G5e,"A",{href:!0});var Szr=s(nP);pdo=r(Szr,"Speech2Text2Processor"),Szr.forEach(t),udo=r(G5e," (Speech2Text2 model)"),G5e.forEach(t),_do=i(Te),Eh=n(Te,"LI",{});var O5e=s(Eh);sae=n(O5e,"STRONG",{});var Rzr=s(sae);bdo=r(Rzr,"trocr"),Rzr.forEach(t),vdo=r(O5e," \u2014 "),sP=n(O5e,"A",{href:!0});var Bzr=s(sP);Fdo=r(Bzr,"TrOCRProcessor"),Bzr.forEach(t),Tdo=r(O5e," (TrOCR model)"),O5e.forEach(t),Mdo=i(Te),Ch=n(Te,"LI",{});var V5e=s(Ch);lae=n(V5e,"STRONG",{});var Pzr=s(lae);Edo=r(Pzr,"unispeech"),Pzr.forEach(t),Cdo=r(V5e," \u2014 "),lP=n(V5e,"A",{href:!0});var Izr=s(lP);wdo=r(Izr,"Wav2Vec2Processor"),Izr.forEach(t),Ado=r(V5e," (UniSpeech model)"),V5e.forEach(t),ydo=i(Te),wh=n(Te,"LI",{});var X5e=s(wh);iae=n(X5e,"STRONG",{});var qzr=s(iae);Ldo=r(qzr,"unispeech-sat"),qzr.forEach(t),xdo=r(X5e," \u2014 "),iP=n(X5e,"A",{href:!0});var Nzr=s(iP);$do=r(Nzr,"Wav2Vec2Processor"),Nzr.forEach(t),kdo=r(X5e," (UniSpeechSat model)"),X5e.forEach(t),Sdo=i(Te),Ah=n(Te,"LI",{});var z5e=s(Ah);dae=n(z5e,"STRONG",{});var jzr=s(dae);Rdo=r(jzr,"vilt"),jzr.forEach(t),Bdo=r(z5e," \u2014 "),dP=n(z5e,"A",{href:!0});var Dzr=s(dP);Pdo=r(Dzr,"ViltProcessor"),Dzr.forEach(t),Ido=r(z5e," (ViLT model)"),z5e.forEach(t),qdo=i(Te),yh=n(Te,"LI",{});var Q5e=s(yh);cae=n(Q5e,"STRONG",{});var Gzr=s(cae);Ndo=r(Gzr,"vision-text-dual-encoder"),Gzr.forEach(t),jdo=r(Q5e," \u2014 "),cP=n(Q5e,"A",{href:!0});var Ozr=s(cP);Ddo=r(Ozr,"VisionTextDualEncoderProcessor"),Ozr.forEach(t),Gdo=r(Q5e," (VisionTextDualEncoder model)"),Q5e.forEach(t),Odo=i(Te),Lh=n(Te,"LI",{});var W5e=s(Lh);fae=n(W5e,"STRONG",{});var Vzr=s(fae);Vdo=r(Vzr,"wav2vec2"),Vzr.forEach(t),Xdo=r(W5e," \u2014 "),fP=n(W5e,"A",{href:!0});var Xzr=s(fP);zdo=r(Xzr,"Wav2Vec2Processor"),Xzr.forEach(t),Qdo=r(W5e," (Wav2Vec2 model)"),W5e.forEach(t),Wdo=i(Te),xh=n(Te,"LI",{});var H5e=s(xh);mae=n(H5e,"STRONG",{});var zzr=s(mae);Hdo=r(zzr,"wavlm"),zzr.forEach(t),Udo=r(H5e," \u2014 "),mP=n(H5e,"A",{href:!0});var Qzr=s(mP);Jdo=r(Qzr,"Wav2Vec2Processor"),Qzr.forEach(t),Ydo=r(H5e," (WavLM model)"),H5e.forEach(t),Te.forEach(t),Kdo=i(Ut),T($h.$$.fragment,Ut),Zdo=i(Ut),T(kh.$$.fragment,Ut),Ut.forEach(t),eco=i(Ps),Sh=n(Ps,"DIV",{class:!0});var lqe=s(Sh);T(tA.$$.fragment,lqe),oco=i(lqe),gae=n(lqe,"P",{});var Wzr=s(gae);rco=r(Wzr,"Register a new processor for this class."),Wzr.forEach(t),lqe.forEach(t),Ps.forEach(t),sPe=i(f),ui=n(f,"H2",{class:!0});var iqe=s(ui);Rh=n(iqe,"A",{id:!0,class:!0,href:!0});var Hzr=s(Rh);hae=n(Hzr,"SPAN",{});var Uzr=s(hae);T(aA.$$.fragment,Uzr),Uzr.forEach(t),Hzr.forEach(t),tco=i(iqe),pae=n(iqe,"SPAN",{});var Jzr=s(pae);aco=r(Jzr,"AutoModel"),Jzr.forEach(t),iqe.forEach(t),lPe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(nA.$$.fragment,Is),nco=i(Is),_i=n(Is,"P",{});var RY=s(_i);sco=r(RY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gP=n(RY,"A",{href:!0});var Yzr=s(gP);lco=r(Yzr,"from_pretrained()"),Yzr.forEach(t),ico=r(RY," class method or the "),hP=n(RY,"A",{href:!0});var Kzr=s(hP);dco=r(Kzr,"from_config()"),Kzr.forEach(t),cco=r(RY,` class
method.`),RY.forEach(t),fco=i(Is),sA=n(Is,"P",{});var dqe=s(sA);mco=r(dqe,"This class cannot be instantiated directly using "),uae=n(dqe,"CODE",{});var Zzr=s(uae);gco=r(Zzr,"__init__()"),Zzr.forEach(t),hco=r(dqe," (throws an error)."),dqe.forEach(t),pco=i(Is),Zr=n(Is,"DIV",{class:!0});var qC=s(Zr);T(lA.$$.fragment,qC),uco=i(qC),_ae=n(qC,"P",{});var eQr=s(_ae);_co=r(eQr,"Instantiates one of the base model classes of the library from a configuration."),eQr.forEach(t),bco=i(qC),bi=n(qC,"P",{});var BY=s(bi);vco=r(BY,`Note:
Loading a model from its configuration file does `),bae=n(BY,"STRONG",{});var oQr=s(bae);Fco=r(oQr,"not"),oQr.forEach(t),Tco=r(BY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pP=n(BY,"A",{href:!0});var rQr=s(pP);Mco=r(rQr,"from_pretrained()"),rQr.forEach(t),Eco=r(BY," to load the model weights."),BY.forEach(t),Cco=i(qC),T(Bh.$$.fragment,qC),qC.forEach(t),wco=i(Is),He=n(Is,"DIV",{class:!0});var Jt=s(He);T(iA.$$.fragment,Jt),Aco=i(Jt),vae=n(Jt,"P",{});var tQr=s(vae);yco=r(tQr,"Instantiate one of the base model classes of the library from a pretrained model."),tQr.forEach(t),Lco=i(Jt),Ea=n(Jt,"P",{});var NC=s(Ea);xco=r(NC,"The model class to instantiate is selected based on the "),Fae=n(NC,"CODE",{});var aQr=s(Fae);$co=r(aQr,"model_type"),aQr.forEach(t),kco=r(NC,` property of the config object (either
passed as an argument or loaded from `),Tae=n(NC,"CODE",{});var nQr=s(Tae);Sco=r(nQr,"pretrained_model_name_or_path"),nQr.forEach(t),Rco=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mae=n(NC,"CODE",{});var sQr=s(Mae);Bco=r(sQr,"pretrained_model_name_or_path"),sQr.forEach(t),Pco=r(NC,":"),NC.forEach(t),Ico=i(Jt),x=n(Jt,"UL",{});var $=s(x);Ph=n($,"LI",{});var U5e=s(Ph);Eae=n(U5e,"STRONG",{});var lQr=s(Eae);qco=r(lQr,"albert"),lQr.forEach(t),Nco=r(U5e," \u2014 "),uP=n(U5e,"A",{href:!0});var iQr=s(uP);jco=r(iQr,"AlbertModel"),iQr.forEach(t),Dco=r(U5e," (ALBERT model)"),U5e.forEach(t),Gco=i($),Ih=n($,"LI",{});var J5e=s(Ih);Cae=n(J5e,"STRONG",{});var dQr=s(Cae);Oco=r(dQr,"bart"),dQr.forEach(t),Vco=r(J5e," \u2014 "),_P=n(J5e,"A",{href:!0});var cQr=s(_P);Xco=r(cQr,"BartModel"),cQr.forEach(t),zco=r(J5e," (BART model)"),J5e.forEach(t),Qco=i($),qh=n($,"LI",{});var Y5e=s(qh);wae=n(Y5e,"STRONG",{});var fQr=s(wae);Wco=r(fQr,"beit"),fQr.forEach(t),Hco=r(Y5e," \u2014 "),bP=n(Y5e,"A",{href:!0});var mQr=s(bP);Uco=r(mQr,"BeitModel"),mQr.forEach(t),Jco=r(Y5e," (BEiT model)"),Y5e.forEach(t),Yco=i($),Nh=n($,"LI",{});var K5e=s(Nh);Aae=n(K5e,"STRONG",{});var gQr=s(Aae);Kco=r(gQr,"bert"),gQr.forEach(t),Zco=r(K5e," \u2014 "),vP=n(K5e,"A",{href:!0});var hQr=s(vP);efo=r(hQr,"BertModel"),hQr.forEach(t),ofo=r(K5e," (BERT model)"),K5e.forEach(t),rfo=i($),jh=n($,"LI",{});var Z5e=s(jh);yae=n(Z5e,"STRONG",{});var pQr=s(yae);tfo=r(pQr,"bert-generation"),pQr.forEach(t),afo=r(Z5e," \u2014 "),FP=n(Z5e,"A",{href:!0});var uQr=s(FP);nfo=r(uQr,"BertGenerationEncoder"),uQr.forEach(t),sfo=r(Z5e," (Bert Generation model)"),Z5e.forEach(t),lfo=i($),Dh=n($,"LI",{});var eCe=s(Dh);Lae=n(eCe,"STRONG",{});var _Qr=s(Lae);ifo=r(_Qr,"big_bird"),_Qr.forEach(t),dfo=r(eCe," \u2014 "),TP=n(eCe,"A",{href:!0});var bQr=s(TP);cfo=r(bQr,"BigBirdModel"),bQr.forEach(t),ffo=r(eCe," (BigBird model)"),eCe.forEach(t),mfo=i($),Gh=n($,"LI",{});var oCe=s(Gh);xae=n(oCe,"STRONG",{});var vQr=s(xae);gfo=r(vQr,"bigbird_pegasus"),vQr.forEach(t),hfo=r(oCe," \u2014 "),MP=n(oCe,"A",{href:!0});var FQr=s(MP);pfo=r(FQr,"BigBirdPegasusModel"),FQr.forEach(t),ufo=r(oCe," (BigBirdPegasus model)"),oCe.forEach(t),_fo=i($),Oh=n($,"LI",{});var rCe=s(Oh);$ae=n(rCe,"STRONG",{});var TQr=s($ae);bfo=r(TQr,"blenderbot"),TQr.forEach(t),vfo=r(rCe," \u2014 "),EP=n(rCe,"A",{href:!0});var MQr=s(EP);Ffo=r(MQr,"BlenderbotModel"),MQr.forEach(t),Tfo=r(rCe," (Blenderbot model)"),rCe.forEach(t),Mfo=i($),Vh=n($,"LI",{});var tCe=s(Vh);kae=n(tCe,"STRONG",{});var EQr=s(kae);Efo=r(EQr,"blenderbot-small"),EQr.forEach(t),Cfo=r(tCe," \u2014 "),CP=n(tCe,"A",{href:!0});var CQr=s(CP);wfo=r(CQr,"BlenderbotSmallModel"),CQr.forEach(t),Afo=r(tCe," (BlenderbotSmall model)"),tCe.forEach(t),yfo=i($),Xh=n($,"LI",{});var aCe=s(Xh);Sae=n(aCe,"STRONG",{});var wQr=s(Sae);Lfo=r(wQr,"camembert"),wQr.forEach(t),xfo=r(aCe," \u2014 "),wP=n(aCe,"A",{href:!0});var AQr=s(wP);$fo=r(AQr,"CamembertModel"),AQr.forEach(t),kfo=r(aCe," (CamemBERT model)"),aCe.forEach(t),Sfo=i($),zh=n($,"LI",{});var nCe=s(zh);Rae=n(nCe,"STRONG",{});var yQr=s(Rae);Rfo=r(yQr,"canine"),yQr.forEach(t),Bfo=r(nCe," \u2014 "),AP=n(nCe,"A",{href:!0});var LQr=s(AP);Pfo=r(LQr,"CanineModel"),LQr.forEach(t),Ifo=r(nCe," (Canine model)"),nCe.forEach(t),qfo=i($),Qh=n($,"LI",{});var sCe=s(Qh);Bae=n(sCe,"STRONG",{});var xQr=s(Bae);Nfo=r(xQr,"clip"),xQr.forEach(t),jfo=r(sCe," \u2014 "),yP=n(sCe,"A",{href:!0});var $Qr=s(yP);Dfo=r($Qr,"CLIPModel"),$Qr.forEach(t),Gfo=r(sCe," (CLIP model)"),sCe.forEach(t),Ofo=i($),Wh=n($,"LI",{});var lCe=s(Wh);Pae=n(lCe,"STRONG",{});var kQr=s(Pae);Vfo=r(kQr,"convbert"),kQr.forEach(t),Xfo=r(lCe," \u2014 "),LP=n(lCe,"A",{href:!0});var SQr=s(LP);zfo=r(SQr,"ConvBertModel"),SQr.forEach(t),Qfo=r(lCe," (ConvBERT model)"),lCe.forEach(t),Wfo=i($),Hh=n($,"LI",{});var iCe=s(Hh);Iae=n(iCe,"STRONG",{});var RQr=s(Iae);Hfo=r(RQr,"convnext"),RQr.forEach(t),Ufo=r(iCe," \u2014 "),xP=n(iCe,"A",{href:!0});var BQr=s(xP);Jfo=r(BQr,"ConvNextModel"),BQr.forEach(t),Yfo=r(iCe," (ConvNext model)"),iCe.forEach(t),Kfo=i($),Uh=n($,"LI",{});var dCe=s(Uh);qae=n(dCe,"STRONG",{});var PQr=s(qae);Zfo=r(PQr,"ctrl"),PQr.forEach(t),emo=r(dCe," \u2014 "),$P=n(dCe,"A",{href:!0});var IQr=s($P);omo=r(IQr,"CTRLModel"),IQr.forEach(t),rmo=r(dCe," (CTRL model)"),dCe.forEach(t),tmo=i($),Jh=n($,"LI",{});var cCe=s(Jh);Nae=n(cCe,"STRONG",{});var qQr=s(Nae);amo=r(qQr,"data2vec-audio"),qQr.forEach(t),nmo=r(cCe," \u2014 "),kP=n(cCe,"A",{href:!0});var NQr=s(kP);smo=r(NQr,"Data2VecAudioModel"),NQr.forEach(t),lmo=r(cCe," (Data2VecAudio model)"),cCe.forEach(t),imo=i($),Yh=n($,"LI",{});var fCe=s(Yh);jae=n(fCe,"STRONG",{});var jQr=s(jae);dmo=r(jQr,"data2vec-text"),jQr.forEach(t),cmo=r(fCe," \u2014 "),SP=n(fCe,"A",{href:!0});var DQr=s(SP);fmo=r(DQr,"Data2VecTextModel"),DQr.forEach(t),mmo=r(fCe," (Data2VecText model)"),fCe.forEach(t),gmo=i($),Kh=n($,"LI",{});var mCe=s(Kh);Dae=n(mCe,"STRONG",{});var GQr=s(Dae);hmo=r(GQr,"data2vec-vision"),GQr.forEach(t),pmo=r(mCe," \u2014 "),RP=n(mCe,"A",{href:!0});var OQr=s(RP);umo=r(OQr,"Data2VecVisionModel"),OQr.forEach(t),_mo=r(mCe," (Data2VecVision model)"),mCe.forEach(t),bmo=i($),Zh=n($,"LI",{});var gCe=s(Zh);Gae=n(gCe,"STRONG",{});var VQr=s(Gae);vmo=r(VQr,"deberta"),VQr.forEach(t),Fmo=r(gCe," \u2014 "),BP=n(gCe,"A",{href:!0});var XQr=s(BP);Tmo=r(XQr,"DebertaModel"),XQr.forEach(t),Mmo=r(gCe," (DeBERTa model)"),gCe.forEach(t),Emo=i($),ep=n($,"LI",{});var hCe=s(ep);Oae=n(hCe,"STRONG",{});var zQr=s(Oae);Cmo=r(zQr,"deberta-v2"),zQr.forEach(t),wmo=r(hCe," \u2014 "),PP=n(hCe,"A",{href:!0});var QQr=s(PP);Amo=r(QQr,"DebertaV2Model"),QQr.forEach(t),ymo=r(hCe," (DeBERTa-v2 model)"),hCe.forEach(t),Lmo=i($),op=n($,"LI",{});var pCe=s(op);Vae=n(pCe,"STRONG",{});var WQr=s(Vae);xmo=r(WQr,"decision_transformer"),WQr.forEach(t),$mo=r(pCe," \u2014 "),IP=n(pCe,"A",{href:!0});var HQr=s(IP);kmo=r(HQr,"DecisionTransformerModel"),HQr.forEach(t),Smo=r(pCe," (Decision Transformer model)"),pCe.forEach(t),Rmo=i($),rp=n($,"LI",{});var uCe=s(rp);Xae=n(uCe,"STRONG",{});var UQr=s(Xae);Bmo=r(UQr,"deit"),UQr.forEach(t),Pmo=r(uCe," \u2014 "),qP=n(uCe,"A",{href:!0});var JQr=s(qP);Imo=r(JQr,"DeiTModel"),JQr.forEach(t),qmo=r(uCe," (DeiT model)"),uCe.forEach(t),Nmo=i($),tp=n($,"LI",{});var _Ce=s(tp);zae=n(_Ce,"STRONG",{});var YQr=s(zae);jmo=r(YQr,"detr"),YQr.forEach(t),Dmo=r(_Ce," \u2014 "),NP=n(_Ce,"A",{href:!0});var KQr=s(NP);Gmo=r(KQr,"DetrModel"),KQr.forEach(t),Omo=r(_Ce," (DETR model)"),_Ce.forEach(t),Vmo=i($),ap=n($,"LI",{});var bCe=s(ap);Qae=n(bCe,"STRONG",{});var ZQr=s(Qae);Xmo=r(ZQr,"distilbert"),ZQr.forEach(t),zmo=r(bCe," \u2014 "),jP=n(bCe,"A",{href:!0});var eWr=s(jP);Qmo=r(eWr,"DistilBertModel"),eWr.forEach(t),Wmo=r(bCe," (DistilBERT model)"),bCe.forEach(t),Hmo=i($),np=n($,"LI",{});var vCe=s(np);Wae=n(vCe,"STRONG",{});var oWr=s(Wae);Umo=r(oWr,"dpr"),oWr.forEach(t),Jmo=r(vCe," \u2014 "),DP=n(vCe,"A",{href:!0});var rWr=s(DP);Ymo=r(rWr,"DPRQuestionEncoder"),rWr.forEach(t),Kmo=r(vCe," (DPR model)"),vCe.forEach(t),Zmo=i($),sp=n($,"LI",{});var FCe=s(sp);Hae=n(FCe,"STRONG",{});var tWr=s(Hae);ego=r(tWr,"dpt"),tWr.forEach(t),ogo=r(FCe," \u2014 "),GP=n(FCe,"A",{href:!0});var aWr=s(GP);rgo=r(aWr,"DPTModel"),aWr.forEach(t),tgo=r(FCe," (DPT model)"),FCe.forEach(t),ago=i($),lp=n($,"LI",{});var TCe=s(lp);Uae=n(TCe,"STRONG",{});var nWr=s(Uae);ngo=r(nWr,"electra"),nWr.forEach(t),sgo=r(TCe," \u2014 "),OP=n(TCe,"A",{href:!0});var sWr=s(OP);lgo=r(sWr,"ElectraModel"),sWr.forEach(t),igo=r(TCe," (ELECTRA model)"),TCe.forEach(t),dgo=i($),ip=n($,"LI",{});var MCe=s(ip);Jae=n(MCe,"STRONG",{});var lWr=s(Jae);cgo=r(lWr,"flaubert"),lWr.forEach(t),fgo=r(MCe," \u2014 "),VP=n(MCe,"A",{href:!0});var iWr=s(VP);mgo=r(iWr,"FlaubertModel"),iWr.forEach(t),ggo=r(MCe," (FlauBERT model)"),MCe.forEach(t),hgo=i($),dp=n($,"LI",{});var ECe=s(dp);Yae=n(ECe,"STRONG",{});var dWr=s(Yae);pgo=r(dWr,"fnet"),dWr.forEach(t),ugo=r(ECe," \u2014 "),XP=n(ECe,"A",{href:!0});var cWr=s(XP);_go=r(cWr,"FNetModel"),cWr.forEach(t),bgo=r(ECe," (FNet model)"),ECe.forEach(t),vgo=i($),cp=n($,"LI",{});var CCe=s(cp);Kae=n(CCe,"STRONG",{});var fWr=s(Kae);Fgo=r(fWr,"fsmt"),fWr.forEach(t),Tgo=r(CCe," \u2014 "),zP=n(CCe,"A",{href:!0});var mWr=s(zP);Mgo=r(mWr,"FSMTModel"),mWr.forEach(t),Ego=r(CCe," (FairSeq Machine-Translation model)"),CCe.forEach(t),Cgo=i($),xs=n($,"LI",{});var Gx=s(xs);Zae=n(Gx,"STRONG",{});var gWr=s(Zae);wgo=r(gWr,"funnel"),gWr.forEach(t),Ago=r(Gx," \u2014 "),QP=n(Gx,"A",{href:!0});var hWr=s(QP);ygo=r(hWr,"FunnelModel"),hWr.forEach(t),Lgo=r(Gx," or "),WP=n(Gx,"A",{href:!0});var pWr=s(WP);xgo=r(pWr,"FunnelBaseModel"),pWr.forEach(t),$go=r(Gx," (Funnel Transformer model)"),Gx.forEach(t),kgo=i($),fp=n($,"LI",{});var wCe=s(fp);ene=n(wCe,"STRONG",{});var uWr=s(ene);Sgo=r(uWr,"glpn"),uWr.forEach(t),Rgo=r(wCe," \u2014 "),HP=n(wCe,"A",{href:!0});var _Wr=s(HP);Bgo=r(_Wr,"GLPNModel"),_Wr.forEach(t),Pgo=r(wCe," (GLPN model)"),wCe.forEach(t),Igo=i($),mp=n($,"LI",{});var ACe=s(mp);one=n(ACe,"STRONG",{});var bWr=s(one);qgo=r(bWr,"gpt2"),bWr.forEach(t),Ngo=r(ACe," \u2014 "),UP=n(ACe,"A",{href:!0});var vWr=s(UP);jgo=r(vWr,"GPT2Model"),vWr.forEach(t),Dgo=r(ACe," (OpenAI GPT-2 model)"),ACe.forEach(t),Ggo=i($),gp=n($,"LI",{});var yCe=s(gp);rne=n(yCe,"STRONG",{});var FWr=s(rne);Ogo=r(FWr,"gpt_neo"),FWr.forEach(t),Vgo=r(yCe," \u2014 "),JP=n(yCe,"A",{href:!0});var TWr=s(JP);Xgo=r(TWr,"GPTNeoModel"),TWr.forEach(t),zgo=r(yCe," (GPT Neo model)"),yCe.forEach(t),Qgo=i($),hp=n($,"LI",{});var LCe=s(hp);tne=n(LCe,"STRONG",{});var MWr=s(tne);Wgo=r(MWr,"gptj"),MWr.forEach(t),Hgo=r(LCe," \u2014 "),YP=n(LCe,"A",{href:!0});var EWr=s(YP);Ugo=r(EWr,"GPTJModel"),EWr.forEach(t),Jgo=r(LCe," (GPT-J model)"),LCe.forEach(t),Ygo=i($),pp=n($,"LI",{});var xCe=s(pp);ane=n(xCe,"STRONG",{});var CWr=s(ane);Kgo=r(CWr,"hubert"),CWr.forEach(t),Zgo=r(xCe," \u2014 "),KP=n(xCe,"A",{href:!0});var wWr=s(KP);eho=r(wWr,"HubertModel"),wWr.forEach(t),oho=r(xCe," (Hubert model)"),xCe.forEach(t),rho=i($),up=n($,"LI",{});var $Ce=s(up);nne=n($Ce,"STRONG",{});var AWr=s(nne);tho=r(AWr,"ibert"),AWr.forEach(t),aho=r($Ce," \u2014 "),ZP=n($Ce,"A",{href:!0});var yWr=s(ZP);nho=r(yWr,"IBertModel"),yWr.forEach(t),sho=r($Ce," (I-BERT model)"),$Ce.forEach(t),lho=i($),_p=n($,"LI",{});var kCe=s(_p);sne=n(kCe,"STRONG",{});var LWr=s(sne);iho=r(LWr,"imagegpt"),LWr.forEach(t),dho=r(kCe," \u2014 "),eI=n(kCe,"A",{href:!0});var xWr=s(eI);cho=r(xWr,"ImageGPTModel"),xWr.forEach(t),fho=r(kCe," (ImageGPT model)"),kCe.forEach(t),mho=i($),bp=n($,"LI",{});var SCe=s(bp);lne=n(SCe,"STRONG",{});var $Wr=s(lne);gho=r($Wr,"layoutlm"),$Wr.forEach(t),hho=r(SCe," \u2014 "),oI=n(SCe,"A",{href:!0});var kWr=s(oI);pho=r(kWr,"LayoutLMModel"),kWr.forEach(t),uho=r(SCe," (LayoutLM model)"),SCe.forEach(t),_ho=i($),vp=n($,"LI",{});var RCe=s(vp);ine=n(RCe,"STRONG",{});var SWr=s(ine);bho=r(SWr,"layoutlmv2"),SWr.forEach(t),vho=r(RCe," \u2014 "),rI=n(RCe,"A",{href:!0});var RWr=s(rI);Fho=r(RWr,"LayoutLMv2Model"),RWr.forEach(t),Tho=r(RCe," (LayoutLMv2 model)"),RCe.forEach(t),Mho=i($),Fp=n($,"LI",{});var BCe=s(Fp);dne=n(BCe,"STRONG",{});var BWr=s(dne);Eho=r(BWr,"led"),BWr.forEach(t),Cho=r(BCe," \u2014 "),tI=n(BCe,"A",{href:!0});var PWr=s(tI);who=r(PWr,"LEDModel"),PWr.forEach(t),Aho=r(BCe," (LED model)"),BCe.forEach(t),yho=i($),Tp=n($,"LI",{});var PCe=s(Tp);cne=n(PCe,"STRONG",{});var IWr=s(cne);Lho=r(IWr,"longformer"),IWr.forEach(t),xho=r(PCe," \u2014 "),aI=n(PCe,"A",{href:!0});var qWr=s(aI);$ho=r(qWr,"LongformerModel"),qWr.forEach(t),kho=r(PCe," (Longformer model)"),PCe.forEach(t),Sho=i($),Mp=n($,"LI",{});var ICe=s(Mp);fne=n(ICe,"STRONG",{});var NWr=s(fne);Rho=r(NWr,"longt5"),NWr.forEach(t),Bho=r(ICe," \u2014 "),nI=n(ICe,"A",{href:!0});var jWr=s(nI);Pho=r(jWr,"LongT5Model"),jWr.forEach(t),Iho=r(ICe," (LongT5 model)"),ICe.forEach(t),qho=i($),Ep=n($,"LI",{});var qCe=s(Ep);mne=n(qCe,"STRONG",{});var DWr=s(mne);Nho=r(DWr,"luke"),DWr.forEach(t),jho=r(qCe," \u2014 "),sI=n(qCe,"A",{href:!0});var GWr=s(sI);Dho=r(GWr,"LukeModel"),GWr.forEach(t),Gho=r(qCe," (LUKE model)"),qCe.forEach(t),Oho=i($),Cp=n($,"LI",{});var NCe=s(Cp);gne=n(NCe,"STRONG",{});var OWr=s(gne);Vho=r(OWr,"lxmert"),OWr.forEach(t),Xho=r(NCe," \u2014 "),lI=n(NCe,"A",{href:!0});var VWr=s(lI);zho=r(VWr,"LxmertModel"),VWr.forEach(t),Qho=r(NCe," (LXMERT model)"),NCe.forEach(t),Who=i($),wp=n($,"LI",{});var jCe=s(wp);hne=n(jCe,"STRONG",{});var XWr=s(hne);Hho=r(XWr,"m2m_100"),XWr.forEach(t),Uho=r(jCe," \u2014 "),iI=n(jCe,"A",{href:!0});var zWr=s(iI);Jho=r(zWr,"M2M100Model"),zWr.forEach(t),Yho=r(jCe," (M2M100 model)"),jCe.forEach(t),Kho=i($),Ap=n($,"LI",{});var DCe=s(Ap);pne=n(DCe,"STRONG",{});var QWr=s(pne);Zho=r(QWr,"marian"),QWr.forEach(t),epo=r(DCe," \u2014 "),dI=n(DCe,"A",{href:!0});var WWr=s(dI);opo=r(WWr,"MarianModel"),WWr.forEach(t),rpo=r(DCe," (Marian model)"),DCe.forEach(t),tpo=i($),yp=n($,"LI",{});var GCe=s(yp);une=n(GCe,"STRONG",{});var HWr=s(une);apo=r(HWr,"maskformer"),HWr.forEach(t),npo=r(GCe," \u2014 "),cI=n(GCe,"A",{href:!0});var UWr=s(cI);spo=r(UWr,"MaskFormerModel"),UWr.forEach(t),lpo=r(GCe," (MaskFormer model)"),GCe.forEach(t),ipo=i($),Lp=n($,"LI",{});var OCe=s(Lp);_ne=n(OCe,"STRONG",{});var JWr=s(_ne);dpo=r(JWr,"mbart"),JWr.forEach(t),cpo=r(OCe," \u2014 "),fI=n(OCe,"A",{href:!0});var YWr=s(fI);fpo=r(YWr,"MBartModel"),YWr.forEach(t),mpo=r(OCe," (mBART model)"),OCe.forEach(t),gpo=i($),xp=n($,"LI",{});var VCe=s(xp);bne=n(VCe,"STRONG",{});var KWr=s(bne);hpo=r(KWr,"megatron-bert"),KWr.forEach(t),ppo=r(VCe," \u2014 "),mI=n(VCe,"A",{href:!0});var ZWr=s(mI);upo=r(ZWr,"MegatronBertModel"),ZWr.forEach(t),_po=r(VCe," (MegatronBert model)"),VCe.forEach(t),bpo=i($),$p=n($,"LI",{});var XCe=s($p);vne=n(XCe,"STRONG",{});var eHr=s(vne);vpo=r(eHr,"mobilebert"),eHr.forEach(t),Fpo=r(XCe," \u2014 "),gI=n(XCe,"A",{href:!0});var oHr=s(gI);Tpo=r(oHr,"MobileBertModel"),oHr.forEach(t),Mpo=r(XCe," (MobileBERT model)"),XCe.forEach(t),Epo=i($),kp=n($,"LI",{});var zCe=s(kp);Fne=n(zCe,"STRONG",{});var rHr=s(Fne);Cpo=r(rHr,"mpnet"),rHr.forEach(t),wpo=r(zCe," \u2014 "),hI=n(zCe,"A",{href:!0});var tHr=s(hI);Apo=r(tHr,"MPNetModel"),tHr.forEach(t),ypo=r(zCe," (MPNet model)"),zCe.forEach(t),Lpo=i($),Sp=n($,"LI",{});var QCe=s(Sp);Tne=n(QCe,"STRONG",{});var aHr=s(Tne);xpo=r(aHr,"mt5"),aHr.forEach(t),$po=r(QCe," \u2014 "),pI=n(QCe,"A",{href:!0});var nHr=s(pI);kpo=r(nHr,"MT5Model"),nHr.forEach(t),Spo=r(QCe," (mT5 model)"),QCe.forEach(t),Rpo=i($),Rp=n($,"LI",{});var WCe=s(Rp);Mne=n(WCe,"STRONG",{});var sHr=s(Mne);Bpo=r(sHr,"nystromformer"),sHr.forEach(t),Ppo=r(WCe," \u2014 "),uI=n(WCe,"A",{href:!0});var lHr=s(uI);Ipo=r(lHr,"NystromformerModel"),lHr.forEach(t),qpo=r(WCe," (Nystromformer model)"),WCe.forEach(t),Npo=i($),Bp=n($,"LI",{});var HCe=s(Bp);Ene=n(HCe,"STRONG",{});var iHr=s(Ene);jpo=r(iHr,"openai-gpt"),iHr.forEach(t),Dpo=r(HCe," \u2014 "),_I=n(HCe,"A",{href:!0});var dHr=s(_I);Gpo=r(dHr,"OpenAIGPTModel"),dHr.forEach(t),Opo=r(HCe," (OpenAI GPT model)"),HCe.forEach(t),Vpo=i($),Pp=n($,"LI",{});var UCe=s(Pp);Cne=n(UCe,"STRONG",{});var cHr=s(Cne);Xpo=r(cHr,"pegasus"),cHr.forEach(t),zpo=r(UCe," \u2014 "),bI=n(UCe,"A",{href:!0});var fHr=s(bI);Qpo=r(fHr,"PegasusModel"),fHr.forEach(t),Wpo=r(UCe," (Pegasus model)"),UCe.forEach(t),Hpo=i($),Ip=n($,"LI",{});var JCe=s(Ip);wne=n(JCe,"STRONG",{});var mHr=s(wne);Upo=r(mHr,"perceiver"),mHr.forEach(t),Jpo=r(JCe," \u2014 "),vI=n(JCe,"A",{href:!0});var gHr=s(vI);Ypo=r(gHr,"PerceiverModel"),gHr.forEach(t),Kpo=r(JCe," (Perceiver model)"),JCe.forEach(t),Zpo=i($),qp=n($,"LI",{});var YCe=s(qp);Ane=n(YCe,"STRONG",{});var hHr=s(Ane);euo=r(hHr,"plbart"),hHr.forEach(t),ouo=r(YCe," \u2014 "),FI=n(YCe,"A",{href:!0});var pHr=s(FI);ruo=r(pHr,"PLBartModel"),pHr.forEach(t),tuo=r(YCe," (PLBart model)"),YCe.forEach(t),auo=i($),Np=n($,"LI",{});var KCe=s(Np);yne=n(KCe,"STRONG",{});var uHr=s(yne);nuo=r(uHr,"poolformer"),uHr.forEach(t),suo=r(KCe," \u2014 "),TI=n(KCe,"A",{href:!0});var _Hr=s(TI);luo=r(_Hr,"PoolFormerModel"),_Hr.forEach(t),iuo=r(KCe," (PoolFormer model)"),KCe.forEach(t),duo=i($),jp=n($,"LI",{});var ZCe=s(jp);Lne=n(ZCe,"STRONG",{});var bHr=s(Lne);cuo=r(bHr,"prophetnet"),bHr.forEach(t),fuo=r(ZCe," \u2014 "),MI=n(ZCe,"A",{href:!0});var vHr=s(MI);muo=r(vHr,"ProphetNetModel"),vHr.forEach(t),guo=r(ZCe," (ProphetNet model)"),ZCe.forEach(t),huo=i($),Dp=n($,"LI",{});var e3e=s(Dp);xne=n(e3e,"STRONG",{});var FHr=s(xne);puo=r(FHr,"qdqbert"),FHr.forEach(t),uuo=r(e3e," \u2014 "),EI=n(e3e,"A",{href:!0});var THr=s(EI);_uo=r(THr,"QDQBertModel"),THr.forEach(t),buo=r(e3e," (QDQBert model)"),e3e.forEach(t),vuo=i($),Gp=n($,"LI",{});var o3e=s(Gp);$ne=n(o3e,"STRONG",{});var MHr=s($ne);Fuo=r(MHr,"reformer"),MHr.forEach(t),Tuo=r(o3e," \u2014 "),CI=n(o3e,"A",{href:!0});var EHr=s(CI);Muo=r(EHr,"ReformerModel"),EHr.forEach(t),Euo=r(o3e," (Reformer model)"),o3e.forEach(t),Cuo=i($),Op=n($,"LI",{});var r3e=s(Op);kne=n(r3e,"STRONG",{});var CHr=s(kne);wuo=r(CHr,"regnet"),CHr.forEach(t),Auo=r(r3e," \u2014 "),wI=n(r3e,"A",{href:!0});var wHr=s(wI);yuo=r(wHr,"RegNetModel"),wHr.forEach(t),Luo=r(r3e," (RegNet model)"),r3e.forEach(t),xuo=i($),Vp=n($,"LI",{});var t3e=s(Vp);Sne=n(t3e,"STRONG",{});var AHr=s(Sne);$uo=r(AHr,"rembert"),AHr.forEach(t),kuo=r(t3e," \u2014 "),AI=n(t3e,"A",{href:!0});var yHr=s(AI);Suo=r(yHr,"RemBertModel"),yHr.forEach(t),Ruo=r(t3e," (RemBERT model)"),t3e.forEach(t),Buo=i($),Xp=n($,"LI",{});var a3e=s(Xp);Rne=n(a3e,"STRONG",{});var LHr=s(Rne);Puo=r(LHr,"resnet"),LHr.forEach(t),Iuo=r(a3e," \u2014 "),yI=n(a3e,"A",{href:!0});var xHr=s(yI);quo=r(xHr,"ResNetModel"),xHr.forEach(t),Nuo=r(a3e," (ResNet model)"),a3e.forEach(t),juo=i($),zp=n($,"LI",{});var n3e=s(zp);Bne=n(n3e,"STRONG",{});var $Hr=s(Bne);Duo=r($Hr,"retribert"),$Hr.forEach(t),Guo=r(n3e," \u2014 "),LI=n(n3e,"A",{href:!0});var kHr=s(LI);Ouo=r(kHr,"RetriBertModel"),kHr.forEach(t),Vuo=r(n3e," (RetriBERT model)"),n3e.forEach(t),Xuo=i($),Qp=n($,"LI",{});var s3e=s(Qp);Pne=n(s3e,"STRONG",{});var SHr=s(Pne);zuo=r(SHr,"roberta"),SHr.forEach(t),Quo=r(s3e," \u2014 "),xI=n(s3e,"A",{href:!0});var RHr=s(xI);Wuo=r(RHr,"RobertaModel"),RHr.forEach(t),Huo=r(s3e," (RoBERTa model)"),s3e.forEach(t),Uuo=i($),Wp=n($,"LI",{});var l3e=s(Wp);Ine=n(l3e,"STRONG",{});var BHr=s(Ine);Juo=r(BHr,"roformer"),BHr.forEach(t),Yuo=r(l3e," \u2014 "),$I=n(l3e,"A",{href:!0});var PHr=s($I);Kuo=r(PHr,"RoFormerModel"),PHr.forEach(t),Zuo=r(l3e," (RoFormer model)"),l3e.forEach(t),e_o=i($),Hp=n($,"LI",{});var i3e=s(Hp);qne=n(i3e,"STRONG",{});var IHr=s(qne);o_o=r(IHr,"segformer"),IHr.forEach(t),r_o=r(i3e," \u2014 "),kI=n(i3e,"A",{href:!0});var qHr=s(kI);t_o=r(qHr,"SegformerModel"),qHr.forEach(t),a_o=r(i3e," (SegFormer model)"),i3e.forEach(t),n_o=i($),Up=n($,"LI",{});var d3e=s(Up);Nne=n(d3e,"STRONG",{});var NHr=s(Nne);s_o=r(NHr,"sew"),NHr.forEach(t),l_o=r(d3e," \u2014 "),SI=n(d3e,"A",{href:!0});var jHr=s(SI);i_o=r(jHr,"SEWModel"),jHr.forEach(t),d_o=r(d3e," (SEW model)"),d3e.forEach(t),c_o=i($),Jp=n($,"LI",{});var c3e=s(Jp);jne=n(c3e,"STRONG",{});var DHr=s(jne);f_o=r(DHr,"sew-d"),DHr.forEach(t),m_o=r(c3e," \u2014 "),RI=n(c3e,"A",{href:!0});var GHr=s(RI);g_o=r(GHr,"SEWDModel"),GHr.forEach(t),h_o=r(c3e," (SEW-D model)"),c3e.forEach(t),p_o=i($),Yp=n($,"LI",{});var f3e=s(Yp);Dne=n(f3e,"STRONG",{});var OHr=s(Dne);u_o=r(OHr,"speech_to_text"),OHr.forEach(t),__o=r(f3e," \u2014 "),BI=n(f3e,"A",{href:!0});var VHr=s(BI);b_o=r(VHr,"Speech2TextModel"),VHr.forEach(t),v_o=r(f3e," (Speech2Text model)"),f3e.forEach(t),F_o=i($),Kp=n($,"LI",{});var m3e=s(Kp);Gne=n(m3e,"STRONG",{});var XHr=s(Gne);T_o=r(XHr,"splinter"),XHr.forEach(t),M_o=r(m3e," \u2014 "),PI=n(m3e,"A",{href:!0});var zHr=s(PI);E_o=r(zHr,"SplinterModel"),zHr.forEach(t),C_o=r(m3e," (Splinter model)"),m3e.forEach(t),w_o=i($),Zp=n($,"LI",{});var g3e=s(Zp);One=n(g3e,"STRONG",{});var QHr=s(One);A_o=r(QHr,"squeezebert"),QHr.forEach(t),y_o=r(g3e," \u2014 "),II=n(g3e,"A",{href:!0});var WHr=s(II);L_o=r(WHr,"SqueezeBertModel"),WHr.forEach(t),x_o=r(g3e," (SqueezeBERT model)"),g3e.forEach(t),$_o=i($),eu=n($,"LI",{});var h3e=s(eu);Vne=n(h3e,"STRONG",{});var HHr=s(Vne);k_o=r(HHr,"swin"),HHr.forEach(t),S_o=r(h3e," \u2014 "),qI=n(h3e,"A",{href:!0});var UHr=s(qI);R_o=r(UHr,"SwinModel"),UHr.forEach(t),B_o=r(h3e," (Swin model)"),h3e.forEach(t),P_o=i($),ou=n($,"LI",{});var p3e=s(ou);Xne=n(p3e,"STRONG",{});var JHr=s(Xne);I_o=r(JHr,"t5"),JHr.forEach(t),q_o=r(p3e," \u2014 "),NI=n(p3e,"A",{href:!0});var YHr=s(NI);N_o=r(YHr,"T5Model"),YHr.forEach(t),j_o=r(p3e," (T5 model)"),p3e.forEach(t),D_o=i($),ru=n($,"LI",{});var u3e=s(ru);zne=n(u3e,"STRONG",{});var KHr=s(zne);G_o=r(KHr,"tapas"),KHr.forEach(t),O_o=r(u3e," \u2014 "),jI=n(u3e,"A",{href:!0});var ZHr=s(jI);V_o=r(ZHr,"TapasModel"),ZHr.forEach(t),X_o=r(u3e," (TAPAS model)"),u3e.forEach(t),z_o=i($),tu=n($,"LI",{});var _3e=s(tu);Qne=n(_3e,"STRONG",{});var eUr=s(Qne);Q_o=r(eUr,"transfo-xl"),eUr.forEach(t),W_o=r(_3e," \u2014 "),DI=n(_3e,"A",{href:!0});var oUr=s(DI);H_o=r(oUr,"TransfoXLModel"),oUr.forEach(t),U_o=r(_3e," (Transformer-XL model)"),_3e.forEach(t),J_o=i($),au=n($,"LI",{});var b3e=s(au);Wne=n(b3e,"STRONG",{});var rUr=s(Wne);Y_o=r(rUr,"unispeech"),rUr.forEach(t),K_o=r(b3e," \u2014 "),GI=n(b3e,"A",{href:!0});var tUr=s(GI);Z_o=r(tUr,"UniSpeechModel"),tUr.forEach(t),e2o=r(b3e," (UniSpeech model)"),b3e.forEach(t),o2o=i($),nu=n($,"LI",{});var v3e=s(nu);Hne=n(v3e,"STRONG",{});var aUr=s(Hne);r2o=r(aUr,"unispeech-sat"),aUr.forEach(t),t2o=r(v3e," \u2014 "),OI=n(v3e,"A",{href:!0});var nUr=s(OI);a2o=r(nUr,"UniSpeechSatModel"),nUr.forEach(t),n2o=r(v3e," (UniSpeechSat model)"),v3e.forEach(t),s2o=i($),su=n($,"LI",{});var F3e=s(su);Une=n(F3e,"STRONG",{});var sUr=s(Une);l2o=r(sUr,"van"),sUr.forEach(t),i2o=r(F3e," \u2014 "),VI=n(F3e,"A",{href:!0});var lUr=s(VI);d2o=r(lUr,"VanModel"),lUr.forEach(t),c2o=r(F3e," (VAN model)"),F3e.forEach(t),f2o=i($),lu=n($,"LI",{});var T3e=s(lu);Jne=n(T3e,"STRONG",{});var iUr=s(Jne);m2o=r(iUr,"vilt"),iUr.forEach(t),g2o=r(T3e," \u2014 "),XI=n(T3e,"A",{href:!0});var dUr=s(XI);h2o=r(dUr,"ViltModel"),dUr.forEach(t),p2o=r(T3e," (ViLT model)"),T3e.forEach(t),u2o=i($),iu=n($,"LI",{});var M3e=s(iu);Yne=n(M3e,"STRONG",{});var cUr=s(Yne);_2o=r(cUr,"vision-text-dual-encoder"),cUr.forEach(t),b2o=r(M3e," \u2014 "),zI=n(M3e,"A",{href:!0});var fUr=s(zI);v2o=r(fUr,"VisionTextDualEncoderModel"),fUr.forEach(t),F2o=r(M3e," (VisionTextDualEncoder model)"),M3e.forEach(t),T2o=i($),du=n($,"LI",{});var E3e=s(du);Kne=n(E3e,"STRONG",{});var mUr=s(Kne);M2o=r(mUr,"visual_bert"),mUr.forEach(t),E2o=r(E3e," \u2014 "),QI=n(E3e,"A",{href:!0});var gUr=s(QI);C2o=r(gUr,"VisualBertModel"),gUr.forEach(t),w2o=r(E3e," (VisualBert model)"),E3e.forEach(t),A2o=i($),cu=n($,"LI",{});var C3e=s(cu);Zne=n(C3e,"STRONG",{});var hUr=s(Zne);y2o=r(hUr,"vit"),hUr.forEach(t),L2o=r(C3e," \u2014 "),WI=n(C3e,"A",{href:!0});var pUr=s(WI);x2o=r(pUr,"ViTModel"),pUr.forEach(t),$2o=r(C3e," (ViT model)"),C3e.forEach(t),k2o=i($),fu=n($,"LI",{});var w3e=s(fu);ese=n(w3e,"STRONG",{});var uUr=s(ese);S2o=r(uUr,"vit_mae"),uUr.forEach(t),R2o=r(w3e," \u2014 "),HI=n(w3e,"A",{href:!0});var _Ur=s(HI);B2o=r(_Ur,"ViTMAEModel"),_Ur.forEach(t),P2o=r(w3e," (ViTMAE model)"),w3e.forEach(t),I2o=i($),mu=n($,"LI",{});var A3e=s(mu);ose=n(A3e,"STRONG",{});var bUr=s(ose);q2o=r(bUr,"wav2vec2"),bUr.forEach(t),N2o=r(A3e," \u2014 "),UI=n(A3e,"A",{href:!0});var vUr=s(UI);j2o=r(vUr,"Wav2Vec2Model"),vUr.forEach(t),D2o=r(A3e," (Wav2Vec2 model)"),A3e.forEach(t),G2o=i($),gu=n($,"LI",{});var y3e=s(gu);rse=n(y3e,"STRONG",{});var FUr=s(rse);O2o=r(FUr,"wavlm"),FUr.forEach(t),V2o=r(y3e," \u2014 "),JI=n(y3e,"A",{href:!0});var TUr=s(JI);X2o=r(TUr,"WavLMModel"),TUr.forEach(t),z2o=r(y3e," (WavLM model)"),y3e.forEach(t),Q2o=i($),hu=n($,"LI",{});var L3e=s(hu);tse=n(L3e,"STRONG",{});var MUr=s(tse);W2o=r(MUr,"xglm"),MUr.forEach(t),H2o=r(L3e," \u2014 "),YI=n(L3e,"A",{href:!0});var EUr=s(YI);U2o=r(EUr,"XGLMModel"),EUr.forEach(t),J2o=r(L3e," (XGLM model)"),L3e.forEach(t),Y2o=i($),pu=n($,"LI",{});var x3e=s(pu);ase=n(x3e,"STRONG",{});var CUr=s(ase);K2o=r(CUr,"xlm"),CUr.forEach(t),Z2o=r(x3e," \u2014 "),KI=n(x3e,"A",{href:!0});var wUr=s(KI);e1o=r(wUr,"XLMModel"),wUr.forEach(t),o1o=r(x3e," (XLM model)"),x3e.forEach(t),r1o=i($),uu=n($,"LI",{});var $3e=s(uu);nse=n($3e,"STRONG",{});var AUr=s(nse);t1o=r(AUr,"xlm-prophetnet"),AUr.forEach(t),a1o=r($3e," \u2014 "),ZI=n($3e,"A",{href:!0});var yUr=s(ZI);n1o=r(yUr,"XLMProphetNetModel"),yUr.forEach(t),s1o=r($3e," (XLMProphetNet model)"),$3e.forEach(t),l1o=i($),_u=n($,"LI",{});var k3e=s(_u);sse=n(k3e,"STRONG",{});var LUr=s(sse);i1o=r(LUr,"xlm-roberta"),LUr.forEach(t),d1o=r(k3e," \u2014 "),eq=n(k3e,"A",{href:!0});var xUr=s(eq);c1o=r(xUr,"XLMRobertaModel"),xUr.forEach(t),f1o=r(k3e," (XLM-RoBERTa model)"),k3e.forEach(t),m1o=i($),bu=n($,"LI",{});var S3e=s(bu);lse=n(S3e,"STRONG",{});var $Ur=s(lse);g1o=r($Ur,"xlm-roberta-xl"),$Ur.forEach(t),h1o=r(S3e," \u2014 "),oq=n(S3e,"A",{href:!0});var kUr=s(oq);p1o=r(kUr,"XLMRobertaXLModel"),kUr.forEach(t),u1o=r(S3e," (XLM-RoBERTa-XL model)"),S3e.forEach(t),_1o=i($),vu=n($,"LI",{});var R3e=s(vu);ise=n(R3e,"STRONG",{});var SUr=s(ise);b1o=r(SUr,"xlnet"),SUr.forEach(t),v1o=r(R3e," \u2014 "),rq=n(R3e,"A",{href:!0});var RUr=s(rq);F1o=r(RUr,"XLNetModel"),RUr.forEach(t),T1o=r(R3e," (XLNet model)"),R3e.forEach(t),M1o=i($),Fu=n($,"LI",{});var B3e=s(Fu);dse=n(B3e,"STRONG",{});var BUr=s(dse);E1o=r(BUr,"yolos"),BUr.forEach(t),C1o=r(B3e," \u2014 "),tq=n(B3e,"A",{href:!0});var PUr=s(tq);w1o=r(PUr,"YolosModel"),PUr.forEach(t),A1o=r(B3e," (YOLOS model)"),B3e.forEach(t),y1o=i($),Tu=n($,"LI",{});var P3e=s(Tu);cse=n(P3e,"STRONG",{});var IUr=s(cse);L1o=r(IUr,"yoso"),IUr.forEach(t),x1o=r(P3e," \u2014 "),aq=n(P3e,"A",{href:!0});var qUr=s(aq);$1o=r(qUr,"YosoModel"),qUr.forEach(t),k1o=r(P3e," (YOSO model)"),P3e.forEach(t),$.forEach(t),S1o=i(Jt),Mu=n(Jt,"P",{});var I3e=s(Mu);R1o=r(I3e,"The model is set in evaluation mode by default using "),fse=n(I3e,"CODE",{});var NUr=s(fse);B1o=r(NUr,"model.eval()"),NUr.forEach(t),P1o=r(I3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mse=n(I3e,"CODE",{});var jUr=s(mse);I1o=r(jUr,"model.train()"),jUr.forEach(t),I3e.forEach(t),q1o=i(Jt),T(Eu.$$.fragment,Jt),Jt.forEach(t),Is.forEach(t),iPe=i(f),vi=n(f,"H2",{class:!0});var cqe=s(vi);Cu=n(cqe,"A",{id:!0,class:!0,href:!0});var DUr=s(Cu);gse=n(DUr,"SPAN",{});var GUr=s(gse);T(dA.$$.fragment,GUr),GUr.forEach(t),DUr.forEach(t),N1o=i(cqe),hse=n(cqe,"SPAN",{});var OUr=s(hse);j1o=r(OUr,"AutoModelForPreTraining"),OUr.forEach(t),cqe.forEach(t),dPe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(cA.$$.fragment,qs),D1o=i(qs),Fi=n(qs,"P",{});var PY=s(Fi);G1o=r(PY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),nq=n(PY,"A",{href:!0});var VUr=s(nq);O1o=r(VUr,"from_pretrained()"),VUr.forEach(t),V1o=r(PY," class method or the "),sq=n(PY,"A",{href:!0});var XUr=s(sq);X1o=r(XUr,"from_config()"),XUr.forEach(t),z1o=r(PY,` class
method.`),PY.forEach(t),Q1o=i(qs),fA=n(qs,"P",{});var fqe=s(fA);W1o=r(fqe,"This class cannot be instantiated directly using "),pse=n(fqe,"CODE",{});var zUr=s(pse);H1o=r(zUr,"__init__()"),zUr.forEach(t),U1o=r(fqe," (throws an error)."),fqe.forEach(t),J1o=i(qs),et=n(qs,"DIV",{class:!0});var jC=s(et);T(mA.$$.fragment,jC),Y1o=i(jC),use=n(jC,"P",{});var QUr=s(use);K1o=r(QUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QUr.forEach(t),Z1o=i(jC),Ti=n(jC,"P",{});var IY=s(Ti);ebo=r(IY,`Note:
Loading a model from its configuration file does `),_se=n(IY,"STRONG",{});var WUr=s(_se);obo=r(WUr,"not"),WUr.forEach(t),rbo=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lq=n(IY,"A",{href:!0});var HUr=s(lq);tbo=r(HUr,"from_pretrained()"),HUr.forEach(t),abo=r(IY," to load the model weights."),IY.forEach(t),nbo=i(jC),T(wu.$$.fragment,jC),jC.forEach(t),sbo=i(qs),Ue=n(qs,"DIV",{class:!0});var Yt=s(Ue);T(gA.$$.fragment,Yt),lbo=i(Yt),bse=n(Yt,"P",{});var UUr=s(bse);ibo=r(UUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),UUr.forEach(t),dbo=i(Yt),Ca=n(Yt,"P",{});var DC=s(Ca);cbo=r(DC,"The model class to instantiate is selected based on the "),vse=n(DC,"CODE",{});var JUr=s(vse);fbo=r(JUr,"model_type"),JUr.forEach(t),mbo=r(DC,` property of the config object (either
passed as an argument or loaded from `),Fse=n(DC,"CODE",{});var YUr=s(Fse);gbo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),hbo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tse=n(DC,"CODE",{});var KUr=s(Tse);pbo=r(KUr,"pretrained_model_name_or_path"),KUr.forEach(t),ubo=r(DC,":"),DC.forEach(t),_bo=i(Yt),G=n(Yt,"UL",{});var V=s(G);Au=n(V,"LI",{});var q3e=s(Au);Mse=n(q3e,"STRONG",{});var ZUr=s(Mse);bbo=r(ZUr,"albert"),ZUr.forEach(t),vbo=r(q3e," \u2014 "),iq=n(q3e,"A",{href:!0});var eJr=s(iq);Fbo=r(eJr,"AlbertForPreTraining"),eJr.forEach(t),Tbo=r(q3e," (ALBERT model)"),q3e.forEach(t),Mbo=i(V),yu=n(V,"LI",{});var N3e=s(yu);Ese=n(N3e,"STRONG",{});var oJr=s(Ese);Ebo=r(oJr,"bart"),oJr.forEach(t),Cbo=r(N3e," \u2014 "),dq=n(N3e,"A",{href:!0});var rJr=s(dq);wbo=r(rJr,"BartForConditionalGeneration"),rJr.forEach(t),Abo=r(N3e," (BART model)"),N3e.forEach(t),ybo=i(V),Lu=n(V,"LI",{});var j3e=s(Lu);Cse=n(j3e,"STRONG",{});var tJr=s(Cse);Lbo=r(tJr,"bert"),tJr.forEach(t),xbo=r(j3e," \u2014 "),cq=n(j3e,"A",{href:!0});var aJr=s(cq);$bo=r(aJr,"BertForPreTraining"),aJr.forEach(t),kbo=r(j3e," (BERT model)"),j3e.forEach(t),Sbo=i(V),xu=n(V,"LI",{});var D3e=s(xu);wse=n(D3e,"STRONG",{});var nJr=s(wse);Rbo=r(nJr,"big_bird"),nJr.forEach(t),Bbo=r(D3e," \u2014 "),fq=n(D3e,"A",{href:!0});var sJr=s(fq);Pbo=r(sJr,"BigBirdForPreTraining"),sJr.forEach(t),Ibo=r(D3e," (BigBird model)"),D3e.forEach(t),qbo=i(V),$u=n(V,"LI",{});var G3e=s($u);Ase=n(G3e,"STRONG",{});var lJr=s(Ase);Nbo=r(lJr,"camembert"),lJr.forEach(t),jbo=r(G3e," \u2014 "),mq=n(G3e,"A",{href:!0});var iJr=s(mq);Dbo=r(iJr,"CamembertForMaskedLM"),iJr.forEach(t),Gbo=r(G3e," (CamemBERT model)"),G3e.forEach(t),Obo=i(V),ku=n(V,"LI",{});var O3e=s(ku);yse=n(O3e,"STRONG",{});var dJr=s(yse);Vbo=r(dJr,"ctrl"),dJr.forEach(t),Xbo=r(O3e," \u2014 "),gq=n(O3e,"A",{href:!0});var cJr=s(gq);zbo=r(cJr,"CTRLLMHeadModel"),cJr.forEach(t),Qbo=r(O3e," (CTRL model)"),O3e.forEach(t),Wbo=i(V),Su=n(V,"LI",{});var V3e=s(Su);Lse=n(V3e,"STRONG",{});var fJr=s(Lse);Hbo=r(fJr,"data2vec-text"),fJr.forEach(t),Ubo=r(V3e," \u2014 "),hq=n(V3e,"A",{href:!0});var mJr=s(hq);Jbo=r(mJr,"Data2VecTextForMaskedLM"),mJr.forEach(t),Ybo=r(V3e," (Data2VecText model)"),V3e.forEach(t),Kbo=i(V),Ru=n(V,"LI",{});var X3e=s(Ru);xse=n(X3e,"STRONG",{});var gJr=s(xse);Zbo=r(gJr,"deberta"),gJr.forEach(t),evo=r(X3e," \u2014 "),pq=n(X3e,"A",{href:!0});var hJr=s(pq);ovo=r(hJr,"DebertaForMaskedLM"),hJr.forEach(t),rvo=r(X3e," (DeBERTa model)"),X3e.forEach(t),tvo=i(V),Bu=n(V,"LI",{});var z3e=s(Bu);$se=n(z3e,"STRONG",{});var pJr=s($se);avo=r(pJr,"deberta-v2"),pJr.forEach(t),nvo=r(z3e," \u2014 "),uq=n(z3e,"A",{href:!0});var uJr=s(uq);svo=r(uJr,"DebertaV2ForMaskedLM"),uJr.forEach(t),lvo=r(z3e," (DeBERTa-v2 model)"),z3e.forEach(t),ivo=i(V),Pu=n(V,"LI",{});var Q3e=s(Pu);kse=n(Q3e,"STRONG",{});var _Jr=s(kse);dvo=r(_Jr,"distilbert"),_Jr.forEach(t),cvo=r(Q3e," \u2014 "),_q=n(Q3e,"A",{href:!0});var bJr=s(_q);fvo=r(bJr,"DistilBertForMaskedLM"),bJr.forEach(t),mvo=r(Q3e," (DistilBERT model)"),Q3e.forEach(t),gvo=i(V),Iu=n(V,"LI",{});var W3e=s(Iu);Sse=n(W3e,"STRONG",{});var vJr=s(Sse);hvo=r(vJr,"electra"),vJr.forEach(t),pvo=r(W3e," \u2014 "),bq=n(W3e,"A",{href:!0});var FJr=s(bq);uvo=r(FJr,"ElectraForPreTraining"),FJr.forEach(t),_vo=r(W3e," (ELECTRA model)"),W3e.forEach(t),bvo=i(V),qu=n(V,"LI",{});var H3e=s(qu);Rse=n(H3e,"STRONG",{});var TJr=s(Rse);vvo=r(TJr,"flaubert"),TJr.forEach(t),Fvo=r(H3e," \u2014 "),vq=n(H3e,"A",{href:!0});var MJr=s(vq);Tvo=r(MJr,"FlaubertWithLMHeadModel"),MJr.forEach(t),Mvo=r(H3e," (FlauBERT model)"),H3e.forEach(t),Evo=i(V),Nu=n(V,"LI",{});var U3e=s(Nu);Bse=n(U3e,"STRONG",{});var EJr=s(Bse);Cvo=r(EJr,"fnet"),EJr.forEach(t),wvo=r(U3e," \u2014 "),Fq=n(U3e,"A",{href:!0});var CJr=s(Fq);Avo=r(CJr,"FNetForPreTraining"),CJr.forEach(t),yvo=r(U3e," (FNet model)"),U3e.forEach(t),Lvo=i(V),ju=n(V,"LI",{});var J3e=s(ju);Pse=n(J3e,"STRONG",{});var wJr=s(Pse);xvo=r(wJr,"fsmt"),wJr.forEach(t),$vo=r(J3e," \u2014 "),Tq=n(J3e,"A",{href:!0});var AJr=s(Tq);kvo=r(AJr,"FSMTForConditionalGeneration"),AJr.forEach(t),Svo=r(J3e," (FairSeq Machine-Translation model)"),J3e.forEach(t),Rvo=i(V),Du=n(V,"LI",{});var Y3e=s(Du);Ise=n(Y3e,"STRONG",{});var yJr=s(Ise);Bvo=r(yJr,"funnel"),yJr.forEach(t),Pvo=r(Y3e," \u2014 "),Mq=n(Y3e,"A",{href:!0});var LJr=s(Mq);Ivo=r(LJr,"FunnelForPreTraining"),LJr.forEach(t),qvo=r(Y3e," (Funnel Transformer model)"),Y3e.forEach(t),Nvo=i(V),Gu=n(V,"LI",{});var K3e=s(Gu);qse=n(K3e,"STRONG",{});var xJr=s(qse);jvo=r(xJr,"gpt2"),xJr.forEach(t),Dvo=r(K3e," \u2014 "),Eq=n(K3e,"A",{href:!0});var $Jr=s(Eq);Gvo=r($Jr,"GPT2LMHeadModel"),$Jr.forEach(t),Ovo=r(K3e," (OpenAI GPT-2 model)"),K3e.forEach(t),Vvo=i(V),Ou=n(V,"LI",{});var Z3e=s(Ou);Nse=n(Z3e,"STRONG",{});var kJr=s(Nse);Xvo=r(kJr,"ibert"),kJr.forEach(t),zvo=r(Z3e," \u2014 "),Cq=n(Z3e,"A",{href:!0});var SJr=s(Cq);Qvo=r(SJr,"IBertForMaskedLM"),SJr.forEach(t),Wvo=r(Z3e," (I-BERT model)"),Z3e.forEach(t),Hvo=i(V),Vu=n(V,"LI",{});var ewe=s(Vu);jse=n(ewe,"STRONG",{});var RJr=s(jse);Uvo=r(RJr,"layoutlm"),RJr.forEach(t),Jvo=r(ewe," \u2014 "),wq=n(ewe,"A",{href:!0});var BJr=s(wq);Yvo=r(BJr,"LayoutLMForMaskedLM"),BJr.forEach(t),Kvo=r(ewe," (LayoutLM model)"),ewe.forEach(t),Zvo=i(V),Xu=n(V,"LI",{});var owe=s(Xu);Dse=n(owe,"STRONG",{});var PJr=s(Dse);eFo=r(PJr,"longformer"),PJr.forEach(t),oFo=r(owe," \u2014 "),Aq=n(owe,"A",{href:!0});var IJr=s(Aq);rFo=r(IJr,"LongformerForMaskedLM"),IJr.forEach(t),tFo=r(owe," (Longformer model)"),owe.forEach(t),aFo=i(V),zu=n(V,"LI",{});var rwe=s(zu);Gse=n(rwe,"STRONG",{});var qJr=s(Gse);nFo=r(qJr,"longt5"),qJr.forEach(t),sFo=r(rwe," \u2014 "),yq=n(rwe,"A",{href:!0});var NJr=s(yq);lFo=r(NJr,"LongT5ForConditionalGeneration"),NJr.forEach(t),iFo=r(rwe," (LongT5 model)"),rwe.forEach(t),dFo=i(V),Qu=n(V,"LI",{});var twe=s(Qu);Ose=n(twe,"STRONG",{});var jJr=s(Ose);cFo=r(jJr,"lxmert"),jJr.forEach(t),fFo=r(twe," \u2014 "),Lq=n(twe,"A",{href:!0});var DJr=s(Lq);mFo=r(DJr,"LxmertForPreTraining"),DJr.forEach(t),gFo=r(twe," (LXMERT model)"),twe.forEach(t),hFo=i(V),Wu=n(V,"LI",{});var awe=s(Wu);Vse=n(awe,"STRONG",{});var GJr=s(Vse);pFo=r(GJr,"megatron-bert"),GJr.forEach(t),uFo=r(awe," \u2014 "),xq=n(awe,"A",{href:!0});var OJr=s(xq);_Fo=r(OJr,"MegatronBertForPreTraining"),OJr.forEach(t),bFo=r(awe," (MegatronBert model)"),awe.forEach(t),vFo=i(V),Hu=n(V,"LI",{});var nwe=s(Hu);Xse=n(nwe,"STRONG",{});var VJr=s(Xse);FFo=r(VJr,"mobilebert"),VJr.forEach(t),TFo=r(nwe," \u2014 "),$q=n(nwe,"A",{href:!0});var XJr=s($q);MFo=r(XJr,"MobileBertForPreTraining"),XJr.forEach(t),EFo=r(nwe," (MobileBERT model)"),nwe.forEach(t),CFo=i(V),Uu=n(V,"LI",{});var swe=s(Uu);zse=n(swe,"STRONG",{});var zJr=s(zse);wFo=r(zJr,"mpnet"),zJr.forEach(t),AFo=r(swe," \u2014 "),kq=n(swe,"A",{href:!0});var QJr=s(kq);yFo=r(QJr,"MPNetForMaskedLM"),QJr.forEach(t),LFo=r(swe," (MPNet model)"),swe.forEach(t),xFo=i(V),Ju=n(V,"LI",{});var lwe=s(Ju);Qse=n(lwe,"STRONG",{});var WJr=s(Qse);$Fo=r(WJr,"openai-gpt"),WJr.forEach(t),kFo=r(lwe," \u2014 "),Sq=n(lwe,"A",{href:!0});var HJr=s(Sq);SFo=r(HJr,"OpenAIGPTLMHeadModel"),HJr.forEach(t),RFo=r(lwe," (OpenAI GPT model)"),lwe.forEach(t),BFo=i(V),Yu=n(V,"LI",{});var iwe=s(Yu);Wse=n(iwe,"STRONG",{});var UJr=s(Wse);PFo=r(UJr,"retribert"),UJr.forEach(t),IFo=r(iwe," \u2014 "),Rq=n(iwe,"A",{href:!0});var JJr=s(Rq);qFo=r(JJr,"RetriBertModel"),JJr.forEach(t),NFo=r(iwe," (RetriBERT model)"),iwe.forEach(t),jFo=i(V),Ku=n(V,"LI",{});var dwe=s(Ku);Hse=n(dwe,"STRONG",{});var YJr=s(Hse);DFo=r(YJr,"roberta"),YJr.forEach(t),GFo=r(dwe," \u2014 "),Bq=n(dwe,"A",{href:!0});var KJr=s(Bq);OFo=r(KJr,"RobertaForMaskedLM"),KJr.forEach(t),VFo=r(dwe," (RoBERTa model)"),dwe.forEach(t),XFo=i(V),Zu=n(V,"LI",{});var cwe=s(Zu);Use=n(cwe,"STRONG",{});var ZJr=s(Use);zFo=r(ZJr,"squeezebert"),ZJr.forEach(t),QFo=r(cwe," \u2014 "),Pq=n(cwe,"A",{href:!0});var eYr=s(Pq);WFo=r(eYr,"SqueezeBertForMaskedLM"),eYr.forEach(t),HFo=r(cwe," (SqueezeBERT model)"),cwe.forEach(t),UFo=i(V),e_=n(V,"LI",{});var fwe=s(e_);Jse=n(fwe,"STRONG",{});var oYr=s(Jse);JFo=r(oYr,"t5"),oYr.forEach(t),YFo=r(fwe," \u2014 "),Iq=n(fwe,"A",{href:!0});var rYr=s(Iq);KFo=r(rYr,"T5ForConditionalGeneration"),rYr.forEach(t),ZFo=r(fwe," (T5 model)"),fwe.forEach(t),e6o=i(V),o_=n(V,"LI",{});var mwe=s(o_);Yse=n(mwe,"STRONG",{});var tYr=s(Yse);o6o=r(tYr,"tapas"),tYr.forEach(t),r6o=r(mwe," \u2014 "),qq=n(mwe,"A",{href:!0});var aYr=s(qq);t6o=r(aYr,"TapasForMaskedLM"),aYr.forEach(t),a6o=r(mwe," (TAPAS model)"),mwe.forEach(t),n6o=i(V),r_=n(V,"LI",{});var gwe=s(r_);Kse=n(gwe,"STRONG",{});var nYr=s(Kse);s6o=r(nYr,"transfo-xl"),nYr.forEach(t),l6o=r(gwe," \u2014 "),Nq=n(gwe,"A",{href:!0});var sYr=s(Nq);i6o=r(sYr,"TransfoXLLMHeadModel"),sYr.forEach(t),d6o=r(gwe," (Transformer-XL model)"),gwe.forEach(t),c6o=i(V),t_=n(V,"LI",{});var hwe=s(t_);Zse=n(hwe,"STRONG",{});var lYr=s(Zse);f6o=r(lYr,"unispeech"),lYr.forEach(t),m6o=r(hwe," \u2014 "),jq=n(hwe,"A",{href:!0});var iYr=s(jq);g6o=r(iYr,"UniSpeechForPreTraining"),iYr.forEach(t),h6o=r(hwe," (UniSpeech model)"),hwe.forEach(t),p6o=i(V),a_=n(V,"LI",{});var pwe=s(a_);ele=n(pwe,"STRONG",{});var dYr=s(ele);u6o=r(dYr,"unispeech-sat"),dYr.forEach(t),_6o=r(pwe," \u2014 "),Dq=n(pwe,"A",{href:!0});var cYr=s(Dq);b6o=r(cYr,"UniSpeechSatForPreTraining"),cYr.forEach(t),v6o=r(pwe," (UniSpeechSat model)"),pwe.forEach(t),F6o=i(V),n_=n(V,"LI",{});var uwe=s(n_);ole=n(uwe,"STRONG",{});var fYr=s(ole);T6o=r(fYr,"visual_bert"),fYr.forEach(t),M6o=r(uwe," \u2014 "),Gq=n(uwe,"A",{href:!0});var mYr=s(Gq);E6o=r(mYr,"VisualBertForPreTraining"),mYr.forEach(t),C6o=r(uwe," (VisualBert model)"),uwe.forEach(t),w6o=i(V),s_=n(V,"LI",{});var _we=s(s_);rle=n(_we,"STRONG",{});var gYr=s(rle);A6o=r(gYr,"vit_mae"),gYr.forEach(t),y6o=r(_we," \u2014 "),Oq=n(_we,"A",{href:!0});var hYr=s(Oq);L6o=r(hYr,"ViTMAEForPreTraining"),hYr.forEach(t),x6o=r(_we," (ViTMAE model)"),_we.forEach(t),$6o=i(V),l_=n(V,"LI",{});var bwe=s(l_);tle=n(bwe,"STRONG",{});var pYr=s(tle);k6o=r(pYr,"wav2vec2"),pYr.forEach(t),S6o=r(bwe," \u2014 "),Vq=n(bwe,"A",{href:!0});var uYr=s(Vq);R6o=r(uYr,"Wav2Vec2ForPreTraining"),uYr.forEach(t),B6o=r(bwe," (Wav2Vec2 model)"),bwe.forEach(t),P6o=i(V),i_=n(V,"LI",{});var vwe=s(i_);ale=n(vwe,"STRONG",{});var _Yr=s(ale);I6o=r(_Yr,"xlm"),_Yr.forEach(t),q6o=r(vwe," \u2014 "),Xq=n(vwe,"A",{href:!0});var bYr=s(Xq);N6o=r(bYr,"XLMWithLMHeadModel"),bYr.forEach(t),j6o=r(vwe," (XLM model)"),vwe.forEach(t),D6o=i(V),d_=n(V,"LI",{});var Fwe=s(d_);nle=n(Fwe,"STRONG",{});var vYr=s(nle);G6o=r(vYr,"xlm-roberta"),vYr.forEach(t),O6o=r(Fwe," \u2014 "),zq=n(Fwe,"A",{href:!0});var FYr=s(zq);V6o=r(FYr,"XLMRobertaForMaskedLM"),FYr.forEach(t),X6o=r(Fwe," (XLM-RoBERTa model)"),Fwe.forEach(t),z6o=i(V),c_=n(V,"LI",{});var Twe=s(c_);sle=n(Twe,"STRONG",{});var TYr=s(sle);Q6o=r(TYr,"xlm-roberta-xl"),TYr.forEach(t),W6o=r(Twe," \u2014 "),Qq=n(Twe,"A",{href:!0});var MYr=s(Qq);H6o=r(MYr,"XLMRobertaXLForMaskedLM"),MYr.forEach(t),U6o=r(Twe," (XLM-RoBERTa-XL model)"),Twe.forEach(t),J6o=i(V),f_=n(V,"LI",{});var Mwe=s(f_);lle=n(Mwe,"STRONG",{});var EYr=s(lle);Y6o=r(EYr,"xlnet"),EYr.forEach(t),K6o=r(Mwe," \u2014 "),Wq=n(Mwe,"A",{href:!0});var CYr=s(Wq);Z6o=r(CYr,"XLNetLMHeadModel"),CYr.forEach(t),eTo=r(Mwe," (XLNet model)"),Mwe.forEach(t),V.forEach(t),oTo=i(Yt),m_=n(Yt,"P",{});var Ewe=s(m_);rTo=r(Ewe,"The model is set in evaluation mode by default using "),ile=n(Ewe,"CODE",{});var wYr=s(ile);tTo=r(wYr,"model.eval()"),wYr.forEach(t),aTo=r(Ewe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dle=n(Ewe,"CODE",{});var AYr=s(dle);nTo=r(AYr,"model.train()"),AYr.forEach(t),Ewe.forEach(t),sTo=i(Yt),T(g_.$$.fragment,Yt),Yt.forEach(t),qs.forEach(t),cPe=i(f),Mi=n(f,"H2",{class:!0});var mqe=s(Mi);h_=n(mqe,"A",{id:!0,class:!0,href:!0});var yYr=s(h_);cle=n(yYr,"SPAN",{});var LYr=s(cle);T(hA.$$.fragment,LYr),LYr.forEach(t),yYr.forEach(t),lTo=i(mqe),fle=n(mqe,"SPAN",{});var xYr=s(fle);iTo=r(xYr,"AutoModelForCausalLM"),xYr.forEach(t),mqe.forEach(t),fPe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(pA.$$.fragment,Ns),dTo=i(Ns),Ei=n(Ns,"P",{});var qY=s(Ei);cTo=r(qY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hq=n(qY,"A",{href:!0});var $Yr=s(Hq);fTo=r($Yr,"from_pretrained()"),$Yr.forEach(t),mTo=r(qY," class method or the "),Uq=n(qY,"A",{href:!0});var kYr=s(Uq);gTo=r(kYr,"from_config()"),kYr.forEach(t),hTo=r(qY,` class
method.`),qY.forEach(t),pTo=i(Ns),uA=n(Ns,"P",{});var gqe=s(uA);uTo=r(gqe,"This class cannot be instantiated directly using "),mle=n(gqe,"CODE",{});var SYr=s(mle);_To=r(SYr,"__init__()"),SYr.forEach(t),bTo=r(gqe," (throws an error)."),gqe.forEach(t),vTo=i(Ns),ot=n(Ns,"DIV",{class:!0});var GC=s(ot);T(_A.$$.fragment,GC),FTo=i(GC),gle=n(GC,"P",{});var RYr=s(gle);TTo=r(RYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),RYr.forEach(t),MTo=i(GC),Ci=n(GC,"P",{});var NY=s(Ci);ETo=r(NY,`Note:
Loading a model from its configuration file does `),hle=n(NY,"STRONG",{});var BYr=s(hle);CTo=r(BYr,"not"),BYr.forEach(t),wTo=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n(NY,"A",{href:!0});var PYr=s(Jq);ATo=r(PYr,"from_pretrained()"),PYr.forEach(t),yTo=r(NY," to load the model weights."),NY.forEach(t),LTo=i(GC),T(p_.$$.fragment,GC),GC.forEach(t),xTo=i(Ns),Je=n(Ns,"DIV",{class:!0});var Kt=s(Je);T(bA.$$.fragment,Kt),$To=i(Kt),ple=n(Kt,"P",{});var IYr=s(ple);kTo=r(IYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IYr.forEach(t),STo=i(Kt),wa=n(Kt,"P",{});var OC=s(wa);RTo=r(OC,"The model class to instantiate is selected based on the "),ule=n(OC,"CODE",{});var qYr=s(ule);BTo=r(qYr,"model_type"),qYr.forEach(t),PTo=r(OC,` property of the config object (either
passed as an argument or loaded from `),_le=n(OC,"CODE",{});var NYr=s(_le);ITo=r(NYr,"pretrained_model_name_or_path"),NYr.forEach(t),qTo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(OC,"CODE",{});var jYr=s(ble);NTo=r(jYr,"pretrained_model_name_or_path"),jYr.forEach(t),jTo=r(OC,":"),OC.forEach(t),DTo=i(Kt),z=n(Kt,"UL",{});var W=s(z);u_=n(W,"LI",{});var Cwe=s(u_);vle=n(Cwe,"STRONG",{});var DYr=s(vle);GTo=r(DYr,"bart"),DYr.forEach(t),OTo=r(Cwe," \u2014 "),Yq=n(Cwe,"A",{href:!0});var GYr=s(Yq);VTo=r(GYr,"BartForCausalLM"),GYr.forEach(t),XTo=r(Cwe," (BART model)"),Cwe.forEach(t),zTo=i(W),__=n(W,"LI",{});var wwe=s(__);Fle=n(wwe,"STRONG",{});var OYr=s(Fle);QTo=r(OYr,"bert"),OYr.forEach(t),WTo=r(wwe," \u2014 "),Kq=n(wwe,"A",{href:!0});var VYr=s(Kq);HTo=r(VYr,"BertLMHeadModel"),VYr.forEach(t),UTo=r(wwe," (BERT model)"),wwe.forEach(t),JTo=i(W),b_=n(W,"LI",{});var Awe=s(b_);Tle=n(Awe,"STRONG",{});var XYr=s(Tle);YTo=r(XYr,"bert-generation"),XYr.forEach(t),KTo=r(Awe," \u2014 "),Zq=n(Awe,"A",{href:!0});var zYr=s(Zq);ZTo=r(zYr,"BertGenerationDecoder"),zYr.forEach(t),e7o=r(Awe," (Bert Generation model)"),Awe.forEach(t),o7o=i(W),v_=n(W,"LI",{});var ywe=s(v_);Mle=n(ywe,"STRONG",{});var QYr=s(Mle);r7o=r(QYr,"big_bird"),QYr.forEach(t),t7o=r(ywe," \u2014 "),eN=n(ywe,"A",{href:!0});var WYr=s(eN);a7o=r(WYr,"BigBirdForCausalLM"),WYr.forEach(t),n7o=r(ywe," (BigBird model)"),ywe.forEach(t),s7o=i(W),F_=n(W,"LI",{});var Lwe=s(F_);Ele=n(Lwe,"STRONG",{});var HYr=s(Ele);l7o=r(HYr,"bigbird_pegasus"),HYr.forEach(t),i7o=r(Lwe," \u2014 "),oN=n(Lwe,"A",{href:!0});var UYr=s(oN);d7o=r(UYr,"BigBirdPegasusForCausalLM"),UYr.forEach(t),c7o=r(Lwe," (BigBirdPegasus model)"),Lwe.forEach(t),f7o=i(W),T_=n(W,"LI",{});var xwe=s(T_);Cle=n(xwe,"STRONG",{});var JYr=s(Cle);m7o=r(JYr,"blenderbot"),JYr.forEach(t),g7o=r(xwe," \u2014 "),rN=n(xwe,"A",{href:!0});var YYr=s(rN);h7o=r(YYr,"BlenderbotForCausalLM"),YYr.forEach(t),p7o=r(xwe," (Blenderbot model)"),xwe.forEach(t),u7o=i(W),M_=n(W,"LI",{});var $we=s(M_);wle=n($we,"STRONG",{});var KYr=s(wle);_7o=r(KYr,"blenderbot-small"),KYr.forEach(t),b7o=r($we," \u2014 "),tN=n($we,"A",{href:!0});var ZYr=s(tN);v7o=r(ZYr,"BlenderbotSmallForCausalLM"),ZYr.forEach(t),F7o=r($we," (BlenderbotSmall model)"),$we.forEach(t),T7o=i(W),E_=n(W,"LI",{});var kwe=s(E_);Ale=n(kwe,"STRONG",{});var eKr=s(Ale);M7o=r(eKr,"camembert"),eKr.forEach(t),E7o=r(kwe," \u2014 "),aN=n(kwe,"A",{href:!0});var oKr=s(aN);C7o=r(oKr,"CamembertForCausalLM"),oKr.forEach(t),w7o=r(kwe," (CamemBERT model)"),kwe.forEach(t),A7o=i(W),C_=n(W,"LI",{});var Swe=s(C_);yle=n(Swe,"STRONG",{});var rKr=s(yle);y7o=r(rKr,"ctrl"),rKr.forEach(t),L7o=r(Swe," \u2014 "),nN=n(Swe,"A",{href:!0});var tKr=s(nN);x7o=r(tKr,"CTRLLMHeadModel"),tKr.forEach(t),$7o=r(Swe," (CTRL model)"),Swe.forEach(t),k7o=i(W),w_=n(W,"LI",{});var Rwe=s(w_);Lle=n(Rwe,"STRONG",{});var aKr=s(Lle);S7o=r(aKr,"data2vec-text"),aKr.forEach(t),R7o=r(Rwe," \u2014 "),sN=n(Rwe,"A",{href:!0});var nKr=s(sN);B7o=r(nKr,"Data2VecTextForCausalLM"),nKr.forEach(t),P7o=r(Rwe," (Data2VecText model)"),Rwe.forEach(t),I7o=i(W),A_=n(W,"LI",{});var Bwe=s(A_);xle=n(Bwe,"STRONG",{});var sKr=s(xle);q7o=r(sKr,"electra"),sKr.forEach(t),N7o=r(Bwe," \u2014 "),lN=n(Bwe,"A",{href:!0});var lKr=s(lN);j7o=r(lKr,"ElectraForCausalLM"),lKr.forEach(t),D7o=r(Bwe," (ELECTRA model)"),Bwe.forEach(t),G7o=i(W),y_=n(W,"LI",{});var Pwe=s(y_);$le=n(Pwe,"STRONG",{});var iKr=s($le);O7o=r(iKr,"gpt2"),iKr.forEach(t),V7o=r(Pwe," \u2014 "),iN=n(Pwe,"A",{href:!0});var dKr=s(iN);X7o=r(dKr,"GPT2LMHeadModel"),dKr.forEach(t),z7o=r(Pwe," (OpenAI GPT-2 model)"),Pwe.forEach(t),Q7o=i(W),L_=n(W,"LI",{});var Iwe=s(L_);kle=n(Iwe,"STRONG",{});var cKr=s(kle);W7o=r(cKr,"gpt_neo"),cKr.forEach(t),H7o=r(Iwe," \u2014 "),dN=n(Iwe,"A",{href:!0});var fKr=s(dN);U7o=r(fKr,"GPTNeoForCausalLM"),fKr.forEach(t),J7o=r(Iwe," (GPT Neo model)"),Iwe.forEach(t),Y7o=i(W),x_=n(W,"LI",{});var qwe=s(x_);Sle=n(qwe,"STRONG",{});var mKr=s(Sle);K7o=r(mKr,"gptj"),mKr.forEach(t),Z7o=r(qwe," \u2014 "),cN=n(qwe,"A",{href:!0});var gKr=s(cN);e9o=r(gKr,"GPTJForCausalLM"),gKr.forEach(t),o9o=r(qwe," (GPT-J model)"),qwe.forEach(t),r9o=i(W),$_=n(W,"LI",{});var Nwe=s($_);Rle=n(Nwe,"STRONG",{});var hKr=s(Rle);t9o=r(hKr,"marian"),hKr.forEach(t),a9o=r(Nwe," \u2014 "),fN=n(Nwe,"A",{href:!0});var pKr=s(fN);n9o=r(pKr,"MarianForCausalLM"),pKr.forEach(t),s9o=r(Nwe," (Marian model)"),Nwe.forEach(t),l9o=i(W),k_=n(W,"LI",{});var jwe=s(k_);Ble=n(jwe,"STRONG",{});var uKr=s(Ble);i9o=r(uKr,"mbart"),uKr.forEach(t),d9o=r(jwe," \u2014 "),mN=n(jwe,"A",{href:!0});var _Kr=s(mN);c9o=r(_Kr,"MBartForCausalLM"),_Kr.forEach(t),f9o=r(jwe," (mBART model)"),jwe.forEach(t),m9o=i(W),S_=n(W,"LI",{});var Dwe=s(S_);Ple=n(Dwe,"STRONG",{});var bKr=s(Ple);g9o=r(bKr,"megatron-bert"),bKr.forEach(t),h9o=r(Dwe," \u2014 "),gN=n(Dwe,"A",{href:!0});var vKr=s(gN);p9o=r(vKr,"MegatronBertForCausalLM"),vKr.forEach(t),u9o=r(Dwe," (MegatronBert model)"),Dwe.forEach(t),_9o=i(W),R_=n(W,"LI",{});var Gwe=s(R_);Ile=n(Gwe,"STRONG",{});var FKr=s(Ile);b9o=r(FKr,"openai-gpt"),FKr.forEach(t),v9o=r(Gwe," \u2014 "),hN=n(Gwe,"A",{href:!0});var TKr=s(hN);F9o=r(TKr,"OpenAIGPTLMHeadModel"),TKr.forEach(t),T9o=r(Gwe," (OpenAI GPT model)"),Gwe.forEach(t),M9o=i(W),B_=n(W,"LI",{});var Owe=s(B_);qle=n(Owe,"STRONG",{});var MKr=s(qle);E9o=r(MKr,"pegasus"),MKr.forEach(t),C9o=r(Owe," \u2014 "),pN=n(Owe,"A",{href:!0});var EKr=s(pN);w9o=r(EKr,"PegasusForCausalLM"),EKr.forEach(t),A9o=r(Owe," (Pegasus model)"),Owe.forEach(t),y9o=i(W),P_=n(W,"LI",{});var Vwe=s(P_);Nle=n(Vwe,"STRONG",{});var CKr=s(Nle);L9o=r(CKr,"plbart"),CKr.forEach(t),x9o=r(Vwe," \u2014 "),uN=n(Vwe,"A",{href:!0});var wKr=s(uN);$9o=r(wKr,"PLBartForCausalLM"),wKr.forEach(t),k9o=r(Vwe," (PLBart model)"),Vwe.forEach(t),S9o=i(W),I_=n(W,"LI",{});var Xwe=s(I_);jle=n(Xwe,"STRONG",{});var AKr=s(jle);R9o=r(AKr,"prophetnet"),AKr.forEach(t),B9o=r(Xwe," \u2014 "),_N=n(Xwe,"A",{href:!0});var yKr=s(_N);P9o=r(yKr,"ProphetNetForCausalLM"),yKr.forEach(t),I9o=r(Xwe," (ProphetNet model)"),Xwe.forEach(t),q9o=i(W),q_=n(W,"LI",{});var zwe=s(q_);Dle=n(zwe,"STRONG",{});var LKr=s(Dle);N9o=r(LKr,"qdqbert"),LKr.forEach(t),j9o=r(zwe," \u2014 "),bN=n(zwe,"A",{href:!0});var xKr=s(bN);D9o=r(xKr,"QDQBertLMHeadModel"),xKr.forEach(t),G9o=r(zwe," (QDQBert model)"),zwe.forEach(t),O9o=i(W),N_=n(W,"LI",{});var Qwe=s(N_);Gle=n(Qwe,"STRONG",{});var $Kr=s(Gle);V9o=r($Kr,"reformer"),$Kr.forEach(t),X9o=r(Qwe," \u2014 "),vN=n(Qwe,"A",{href:!0});var kKr=s(vN);z9o=r(kKr,"ReformerModelWithLMHead"),kKr.forEach(t),Q9o=r(Qwe," (Reformer model)"),Qwe.forEach(t),W9o=i(W),j_=n(W,"LI",{});var Wwe=s(j_);Ole=n(Wwe,"STRONG",{});var SKr=s(Ole);H9o=r(SKr,"rembert"),SKr.forEach(t),U9o=r(Wwe," \u2014 "),FN=n(Wwe,"A",{href:!0});var RKr=s(FN);J9o=r(RKr,"RemBertForCausalLM"),RKr.forEach(t),Y9o=r(Wwe," (RemBERT model)"),Wwe.forEach(t),K9o=i(W),D_=n(W,"LI",{});var Hwe=s(D_);Vle=n(Hwe,"STRONG",{});var BKr=s(Vle);Z9o=r(BKr,"roberta"),BKr.forEach(t),eMo=r(Hwe," \u2014 "),TN=n(Hwe,"A",{href:!0});var PKr=s(TN);oMo=r(PKr,"RobertaForCausalLM"),PKr.forEach(t),rMo=r(Hwe," (RoBERTa model)"),Hwe.forEach(t),tMo=i(W),G_=n(W,"LI",{});var Uwe=s(G_);Xle=n(Uwe,"STRONG",{});var IKr=s(Xle);aMo=r(IKr,"roformer"),IKr.forEach(t),nMo=r(Uwe," \u2014 "),MN=n(Uwe,"A",{href:!0});var qKr=s(MN);sMo=r(qKr,"RoFormerForCausalLM"),qKr.forEach(t),lMo=r(Uwe," (RoFormer model)"),Uwe.forEach(t),iMo=i(W),O_=n(W,"LI",{});var Jwe=s(O_);zle=n(Jwe,"STRONG",{});var NKr=s(zle);dMo=r(NKr,"speech_to_text_2"),NKr.forEach(t),cMo=r(Jwe," \u2014 "),EN=n(Jwe,"A",{href:!0});var jKr=s(EN);fMo=r(jKr,"Speech2Text2ForCausalLM"),jKr.forEach(t),mMo=r(Jwe," (Speech2Text2 model)"),Jwe.forEach(t),gMo=i(W),V_=n(W,"LI",{});var Ywe=s(V_);Qle=n(Ywe,"STRONG",{});var DKr=s(Qle);hMo=r(DKr,"transfo-xl"),DKr.forEach(t),pMo=r(Ywe," \u2014 "),CN=n(Ywe,"A",{href:!0});var GKr=s(CN);uMo=r(GKr,"TransfoXLLMHeadModel"),GKr.forEach(t),_Mo=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),bMo=i(W),X_=n(W,"LI",{});var Kwe=s(X_);Wle=n(Kwe,"STRONG",{});var OKr=s(Wle);vMo=r(OKr,"trocr"),OKr.forEach(t),FMo=r(Kwe," \u2014 "),wN=n(Kwe,"A",{href:!0});var VKr=s(wN);TMo=r(VKr,"TrOCRForCausalLM"),VKr.forEach(t),MMo=r(Kwe," (TrOCR model)"),Kwe.forEach(t),EMo=i(W),z_=n(W,"LI",{});var Zwe=s(z_);Hle=n(Zwe,"STRONG",{});var XKr=s(Hle);CMo=r(XKr,"xglm"),XKr.forEach(t),wMo=r(Zwe," \u2014 "),AN=n(Zwe,"A",{href:!0});var zKr=s(AN);AMo=r(zKr,"XGLMForCausalLM"),zKr.forEach(t),yMo=r(Zwe," (XGLM model)"),Zwe.forEach(t),LMo=i(W),Q_=n(W,"LI",{});var eAe=s(Q_);Ule=n(eAe,"STRONG",{});var QKr=s(Ule);xMo=r(QKr,"xlm"),QKr.forEach(t),$Mo=r(eAe," \u2014 "),yN=n(eAe,"A",{href:!0});var WKr=s(yN);kMo=r(WKr,"XLMWithLMHeadModel"),WKr.forEach(t),SMo=r(eAe," (XLM model)"),eAe.forEach(t),RMo=i(W),W_=n(W,"LI",{});var oAe=s(W_);Jle=n(oAe,"STRONG",{});var HKr=s(Jle);BMo=r(HKr,"xlm-prophetnet"),HKr.forEach(t),PMo=r(oAe," \u2014 "),LN=n(oAe,"A",{href:!0});var UKr=s(LN);IMo=r(UKr,"XLMProphetNetForCausalLM"),UKr.forEach(t),qMo=r(oAe," (XLMProphetNet model)"),oAe.forEach(t),NMo=i(W),H_=n(W,"LI",{});var rAe=s(H_);Yle=n(rAe,"STRONG",{});var JKr=s(Yle);jMo=r(JKr,"xlm-roberta"),JKr.forEach(t),DMo=r(rAe," \u2014 "),xN=n(rAe,"A",{href:!0});var YKr=s(xN);GMo=r(YKr,"XLMRobertaForCausalLM"),YKr.forEach(t),OMo=r(rAe," (XLM-RoBERTa model)"),rAe.forEach(t),VMo=i(W),U_=n(W,"LI",{});var tAe=s(U_);Kle=n(tAe,"STRONG",{});var KKr=s(Kle);XMo=r(KKr,"xlm-roberta-xl"),KKr.forEach(t),zMo=r(tAe," \u2014 "),$N=n(tAe,"A",{href:!0});var ZKr=s($N);QMo=r(ZKr,"XLMRobertaXLForCausalLM"),ZKr.forEach(t),WMo=r(tAe," (XLM-RoBERTa-XL model)"),tAe.forEach(t),HMo=i(W),J_=n(W,"LI",{});var aAe=s(J_);Zle=n(aAe,"STRONG",{});var eZr=s(Zle);UMo=r(eZr,"xlnet"),eZr.forEach(t),JMo=r(aAe," \u2014 "),kN=n(aAe,"A",{href:!0});var oZr=s(kN);YMo=r(oZr,"XLNetLMHeadModel"),oZr.forEach(t),KMo=r(aAe," (XLNet model)"),aAe.forEach(t),W.forEach(t),ZMo=i(Kt),Y_=n(Kt,"P",{});var nAe=s(Y_);e4o=r(nAe,"The model is set in evaluation mode by default using "),eie=n(nAe,"CODE",{});var rZr=s(eie);o4o=r(rZr,"model.eval()"),rZr.forEach(t),r4o=r(nAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=n(nAe,"CODE",{});var tZr=s(oie);t4o=r(tZr,"model.train()"),tZr.forEach(t),nAe.forEach(t),a4o=i(Kt),T(K_.$$.fragment,Kt),Kt.forEach(t),Ns.forEach(t),mPe=i(f),wi=n(f,"H2",{class:!0});var hqe=s(wi);Z_=n(hqe,"A",{id:!0,class:!0,href:!0});var aZr=s(Z_);rie=n(aZr,"SPAN",{});var nZr=s(rie);T(vA.$$.fragment,nZr),nZr.forEach(t),aZr.forEach(t),n4o=i(hqe),tie=n(hqe,"SPAN",{});var sZr=s(tie);s4o=r(sZr,"AutoModelForMaskedLM"),sZr.forEach(t),hqe.forEach(t),gPe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(FA.$$.fragment,js),l4o=i(js),Ai=n(js,"P",{});var jY=s(Ai);i4o=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),SN=n(jY,"A",{href:!0});var lZr=s(SN);d4o=r(lZr,"from_pretrained()"),lZr.forEach(t),c4o=r(jY," class method or the "),RN=n(jY,"A",{href:!0});var iZr=s(RN);f4o=r(iZr,"from_config()"),iZr.forEach(t),m4o=r(jY,` class
method.`),jY.forEach(t),g4o=i(js),TA=n(js,"P",{});var pqe=s(TA);h4o=r(pqe,"This class cannot be instantiated directly using "),aie=n(pqe,"CODE",{});var dZr=s(aie);p4o=r(dZr,"__init__()"),dZr.forEach(t),u4o=r(pqe," (throws an error)."),pqe.forEach(t),_4o=i(js),rt=n(js,"DIV",{class:!0});var VC=s(rt);T(MA.$$.fragment,VC),b4o=i(VC),nie=n(VC,"P",{});var cZr=s(nie);v4o=r(cZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cZr.forEach(t),F4o=i(VC),yi=n(VC,"P",{});var DY=s(yi);T4o=r(DY,`Note:
Loading a model from its configuration file does `),sie=n(DY,"STRONG",{});var fZr=s(sie);M4o=r(fZr,"not"),fZr.forEach(t),E4o=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BN=n(DY,"A",{href:!0});var mZr=s(BN);C4o=r(mZr,"from_pretrained()"),mZr.forEach(t),w4o=r(DY," to load the model weights."),DY.forEach(t),A4o=i(VC),T(e2.$$.fragment,VC),VC.forEach(t),y4o=i(js),Ye=n(js,"DIV",{class:!0});var Zt=s(Ye);T(EA.$$.fragment,Zt),L4o=i(Zt),lie=n(Zt,"P",{});var gZr=s(lie);x4o=r(gZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gZr.forEach(t),$4o=i(Zt),Aa=n(Zt,"P",{});var XC=s(Aa);k4o=r(XC,"The model class to instantiate is selected based on the "),iie=n(XC,"CODE",{});var hZr=s(iie);S4o=r(hZr,"model_type"),hZr.forEach(t),R4o=r(XC,` property of the config object (either
passed as an argument or loaded from `),die=n(XC,"CODE",{});var pZr=s(die);B4o=r(pZr,"pretrained_model_name_or_path"),pZr.forEach(t),P4o=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=n(XC,"CODE",{});var uZr=s(cie);I4o=r(uZr,"pretrained_model_name_or_path"),uZr.forEach(t),q4o=r(XC,":"),XC.forEach(t),N4o=i(Zt),Q=n(Zt,"UL",{});var H=s(Q);o2=n(H,"LI",{});var sAe=s(o2);fie=n(sAe,"STRONG",{});var _Zr=s(fie);j4o=r(_Zr,"albert"),_Zr.forEach(t),D4o=r(sAe," \u2014 "),PN=n(sAe,"A",{href:!0});var bZr=s(PN);G4o=r(bZr,"AlbertForMaskedLM"),bZr.forEach(t),O4o=r(sAe," (ALBERT model)"),sAe.forEach(t),V4o=i(H),r2=n(H,"LI",{});var lAe=s(r2);mie=n(lAe,"STRONG",{});var vZr=s(mie);X4o=r(vZr,"bart"),vZr.forEach(t),z4o=r(lAe," \u2014 "),IN=n(lAe,"A",{href:!0});var FZr=s(IN);Q4o=r(FZr,"BartForConditionalGeneration"),FZr.forEach(t),W4o=r(lAe," (BART model)"),lAe.forEach(t),H4o=i(H),t2=n(H,"LI",{});var iAe=s(t2);gie=n(iAe,"STRONG",{});var TZr=s(gie);U4o=r(TZr,"bert"),TZr.forEach(t),J4o=r(iAe," \u2014 "),qN=n(iAe,"A",{href:!0});var MZr=s(qN);Y4o=r(MZr,"BertForMaskedLM"),MZr.forEach(t),K4o=r(iAe," (BERT model)"),iAe.forEach(t),Z4o=i(H),a2=n(H,"LI",{});var dAe=s(a2);hie=n(dAe,"STRONG",{});var EZr=s(hie);eEo=r(EZr,"big_bird"),EZr.forEach(t),oEo=r(dAe," \u2014 "),NN=n(dAe,"A",{href:!0});var CZr=s(NN);rEo=r(CZr,"BigBirdForMaskedLM"),CZr.forEach(t),tEo=r(dAe," (BigBird model)"),dAe.forEach(t),aEo=i(H),n2=n(H,"LI",{});var cAe=s(n2);pie=n(cAe,"STRONG",{});var wZr=s(pie);nEo=r(wZr,"camembert"),wZr.forEach(t),sEo=r(cAe," \u2014 "),jN=n(cAe,"A",{href:!0});var AZr=s(jN);lEo=r(AZr,"CamembertForMaskedLM"),AZr.forEach(t),iEo=r(cAe," (CamemBERT model)"),cAe.forEach(t),dEo=i(H),s2=n(H,"LI",{});var fAe=s(s2);uie=n(fAe,"STRONG",{});var yZr=s(uie);cEo=r(yZr,"convbert"),yZr.forEach(t),fEo=r(fAe," \u2014 "),DN=n(fAe,"A",{href:!0});var LZr=s(DN);mEo=r(LZr,"ConvBertForMaskedLM"),LZr.forEach(t),gEo=r(fAe," (ConvBERT model)"),fAe.forEach(t),hEo=i(H),l2=n(H,"LI",{});var mAe=s(l2);_ie=n(mAe,"STRONG",{});var xZr=s(_ie);pEo=r(xZr,"data2vec-text"),xZr.forEach(t),uEo=r(mAe," \u2014 "),GN=n(mAe,"A",{href:!0});var $Zr=s(GN);_Eo=r($Zr,"Data2VecTextForMaskedLM"),$Zr.forEach(t),bEo=r(mAe," (Data2VecText model)"),mAe.forEach(t),vEo=i(H),i2=n(H,"LI",{});var gAe=s(i2);bie=n(gAe,"STRONG",{});var kZr=s(bie);FEo=r(kZr,"deberta"),kZr.forEach(t),TEo=r(gAe," \u2014 "),ON=n(gAe,"A",{href:!0});var SZr=s(ON);MEo=r(SZr,"DebertaForMaskedLM"),SZr.forEach(t),EEo=r(gAe," (DeBERTa model)"),gAe.forEach(t),CEo=i(H),d2=n(H,"LI",{});var hAe=s(d2);vie=n(hAe,"STRONG",{});var RZr=s(vie);wEo=r(RZr,"deberta-v2"),RZr.forEach(t),AEo=r(hAe," \u2014 "),VN=n(hAe,"A",{href:!0});var BZr=s(VN);yEo=r(BZr,"DebertaV2ForMaskedLM"),BZr.forEach(t),LEo=r(hAe," (DeBERTa-v2 model)"),hAe.forEach(t),xEo=i(H),c2=n(H,"LI",{});var pAe=s(c2);Fie=n(pAe,"STRONG",{});var PZr=s(Fie);$Eo=r(PZr,"distilbert"),PZr.forEach(t),kEo=r(pAe," \u2014 "),XN=n(pAe,"A",{href:!0});var IZr=s(XN);SEo=r(IZr,"DistilBertForMaskedLM"),IZr.forEach(t),REo=r(pAe," (DistilBERT model)"),pAe.forEach(t),BEo=i(H),f2=n(H,"LI",{});var uAe=s(f2);Tie=n(uAe,"STRONG",{});var qZr=s(Tie);PEo=r(qZr,"electra"),qZr.forEach(t),IEo=r(uAe," \u2014 "),zN=n(uAe,"A",{href:!0});var NZr=s(zN);qEo=r(NZr,"ElectraForMaskedLM"),NZr.forEach(t),NEo=r(uAe," (ELECTRA model)"),uAe.forEach(t),jEo=i(H),m2=n(H,"LI",{});var _Ae=s(m2);Mie=n(_Ae,"STRONG",{});var jZr=s(Mie);DEo=r(jZr,"flaubert"),jZr.forEach(t),GEo=r(_Ae," \u2014 "),QN=n(_Ae,"A",{href:!0});var DZr=s(QN);OEo=r(DZr,"FlaubertWithLMHeadModel"),DZr.forEach(t),VEo=r(_Ae," (FlauBERT model)"),_Ae.forEach(t),XEo=i(H),g2=n(H,"LI",{});var bAe=s(g2);Eie=n(bAe,"STRONG",{});var GZr=s(Eie);zEo=r(GZr,"fnet"),GZr.forEach(t),QEo=r(bAe," \u2014 "),WN=n(bAe,"A",{href:!0});var OZr=s(WN);WEo=r(OZr,"FNetForMaskedLM"),OZr.forEach(t),HEo=r(bAe," (FNet model)"),bAe.forEach(t),UEo=i(H),h2=n(H,"LI",{});var vAe=s(h2);Cie=n(vAe,"STRONG",{});var VZr=s(Cie);JEo=r(VZr,"funnel"),VZr.forEach(t),YEo=r(vAe," \u2014 "),HN=n(vAe,"A",{href:!0});var XZr=s(HN);KEo=r(XZr,"FunnelForMaskedLM"),XZr.forEach(t),ZEo=r(vAe," (Funnel Transformer model)"),vAe.forEach(t),e5o=i(H),p2=n(H,"LI",{});var FAe=s(p2);wie=n(FAe,"STRONG",{});var zZr=s(wie);o5o=r(zZr,"ibert"),zZr.forEach(t),r5o=r(FAe," \u2014 "),UN=n(FAe,"A",{href:!0});var QZr=s(UN);t5o=r(QZr,"IBertForMaskedLM"),QZr.forEach(t),a5o=r(FAe," (I-BERT model)"),FAe.forEach(t),n5o=i(H),u2=n(H,"LI",{});var TAe=s(u2);Aie=n(TAe,"STRONG",{});var WZr=s(Aie);s5o=r(WZr,"layoutlm"),WZr.forEach(t),l5o=r(TAe," \u2014 "),JN=n(TAe,"A",{href:!0});var HZr=s(JN);i5o=r(HZr,"LayoutLMForMaskedLM"),HZr.forEach(t),d5o=r(TAe," (LayoutLM model)"),TAe.forEach(t),c5o=i(H),_2=n(H,"LI",{});var MAe=s(_2);yie=n(MAe,"STRONG",{});var UZr=s(yie);f5o=r(UZr,"longformer"),UZr.forEach(t),m5o=r(MAe," \u2014 "),YN=n(MAe,"A",{href:!0});var JZr=s(YN);g5o=r(JZr,"LongformerForMaskedLM"),JZr.forEach(t),h5o=r(MAe," (Longformer model)"),MAe.forEach(t),p5o=i(H),b2=n(H,"LI",{});var EAe=s(b2);Lie=n(EAe,"STRONG",{});var YZr=s(Lie);u5o=r(YZr,"mbart"),YZr.forEach(t),_5o=r(EAe," \u2014 "),KN=n(EAe,"A",{href:!0});var KZr=s(KN);b5o=r(KZr,"MBartForConditionalGeneration"),KZr.forEach(t),v5o=r(EAe," (mBART model)"),EAe.forEach(t),F5o=i(H),v2=n(H,"LI",{});var CAe=s(v2);xie=n(CAe,"STRONG",{});var ZZr=s(xie);T5o=r(ZZr,"megatron-bert"),ZZr.forEach(t),M5o=r(CAe," \u2014 "),ZN=n(CAe,"A",{href:!0});var eet=s(ZN);E5o=r(eet,"MegatronBertForMaskedLM"),eet.forEach(t),C5o=r(CAe," (MegatronBert model)"),CAe.forEach(t),w5o=i(H),F2=n(H,"LI",{});var wAe=s(F2);$ie=n(wAe,"STRONG",{});var oet=s($ie);A5o=r(oet,"mobilebert"),oet.forEach(t),y5o=r(wAe," \u2014 "),ej=n(wAe,"A",{href:!0});var ret=s(ej);L5o=r(ret,"MobileBertForMaskedLM"),ret.forEach(t),x5o=r(wAe," (MobileBERT model)"),wAe.forEach(t),$5o=i(H),T2=n(H,"LI",{});var AAe=s(T2);kie=n(AAe,"STRONG",{});var tet=s(kie);k5o=r(tet,"mpnet"),tet.forEach(t),S5o=r(AAe," \u2014 "),oj=n(AAe,"A",{href:!0});var aet=s(oj);R5o=r(aet,"MPNetForMaskedLM"),aet.forEach(t),B5o=r(AAe," (MPNet model)"),AAe.forEach(t),P5o=i(H),M2=n(H,"LI",{});var yAe=s(M2);Sie=n(yAe,"STRONG",{});var net=s(Sie);I5o=r(net,"nystromformer"),net.forEach(t),q5o=r(yAe," \u2014 "),rj=n(yAe,"A",{href:!0});var set=s(rj);N5o=r(set,"NystromformerForMaskedLM"),set.forEach(t),j5o=r(yAe," (Nystromformer model)"),yAe.forEach(t),D5o=i(H),E2=n(H,"LI",{});var LAe=s(E2);Rie=n(LAe,"STRONG",{});var iet=s(Rie);G5o=r(iet,"perceiver"),iet.forEach(t),O5o=r(LAe," \u2014 "),tj=n(LAe,"A",{href:!0});var det=s(tj);V5o=r(det,"PerceiverForMaskedLM"),det.forEach(t),X5o=r(LAe," (Perceiver model)"),LAe.forEach(t),z5o=i(H),C2=n(H,"LI",{});var xAe=s(C2);Bie=n(xAe,"STRONG",{});var cet=s(Bie);Q5o=r(cet,"qdqbert"),cet.forEach(t),W5o=r(xAe," \u2014 "),aj=n(xAe,"A",{href:!0});var fet=s(aj);H5o=r(fet,"QDQBertForMaskedLM"),fet.forEach(t),U5o=r(xAe," (QDQBert model)"),xAe.forEach(t),J5o=i(H),w2=n(H,"LI",{});var $Ae=s(w2);Pie=n($Ae,"STRONG",{});var met=s(Pie);Y5o=r(met,"reformer"),met.forEach(t),K5o=r($Ae," \u2014 "),nj=n($Ae,"A",{href:!0});var get=s(nj);Z5o=r(get,"ReformerForMaskedLM"),get.forEach(t),eCo=r($Ae," (Reformer model)"),$Ae.forEach(t),oCo=i(H),A2=n(H,"LI",{});var kAe=s(A2);Iie=n(kAe,"STRONG",{});var het=s(Iie);rCo=r(het,"rembert"),het.forEach(t),tCo=r(kAe," \u2014 "),sj=n(kAe,"A",{href:!0});var pet=s(sj);aCo=r(pet,"RemBertForMaskedLM"),pet.forEach(t),nCo=r(kAe," (RemBERT model)"),kAe.forEach(t),sCo=i(H),y2=n(H,"LI",{});var SAe=s(y2);qie=n(SAe,"STRONG",{});var uet=s(qie);lCo=r(uet,"roberta"),uet.forEach(t),iCo=r(SAe," \u2014 "),lj=n(SAe,"A",{href:!0});var _et=s(lj);dCo=r(_et,"RobertaForMaskedLM"),_et.forEach(t),cCo=r(SAe," (RoBERTa model)"),SAe.forEach(t),fCo=i(H),L2=n(H,"LI",{});var RAe=s(L2);Nie=n(RAe,"STRONG",{});var bet=s(Nie);mCo=r(bet,"roformer"),bet.forEach(t),gCo=r(RAe," \u2014 "),ij=n(RAe,"A",{href:!0});var vet=s(ij);hCo=r(vet,"RoFormerForMaskedLM"),vet.forEach(t),pCo=r(RAe," (RoFormer model)"),RAe.forEach(t),uCo=i(H),x2=n(H,"LI",{});var BAe=s(x2);jie=n(BAe,"STRONG",{});var Fet=s(jie);_Co=r(Fet,"squeezebert"),Fet.forEach(t),bCo=r(BAe," \u2014 "),dj=n(BAe,"A",{href:!0});var Tet=s(dj);vCo=r(Tet,"SqueezeBertForMaskedLM"),Tet.forEach(t),FCo=r(BAe," (SqueezeBERT model)"),BAe.forEach(t),TCo=i(H),$2=n(H,"LI",{});var PAe=s($2);Die=n(PAe,"STRONG",{});var Met=s(Die);MCo=r(Met,"tapas"),Met.forEach(t),ECo=r(PAe," \u2014 "),cj=n(PAe,"A",{href:!0});var Eet=s(cj);CCo=r(Eet,"TapasForMaskedLM"),Eet.forEach(t),wCo=r(PAe," (TAPAS model)"),PAe.forEach(t),ACo=i(H),k2=n(H,"LI",{});var IAe=s(k2);Gie=n(IAe,"STRONG",{});var Cet=s(Gie);yCo=r(Cet,"wav2vec2"),Cet.forEach(t),LCo=r(IAe," \u2014 "),Oie=n(IAe,"CODE",{});var wet=s(Oie);xCo=r(wet,"Wav2Vec2ForMaskedLM"),wet.forEach(t),$Co=r(IAe," (Wav2Vec2 model)"),IAe.forEach(t),kCo=i(H),S2=n(H,"LI",{});var qAe=s(S2);Vie=n(qAe,"STRONG",{});var Aet=s(Vie);SCo=r(Aet,"xlm"),Aet.forEach(t),RCo=r(qAe," \u2014 "),fj=n(qAe,"A",{href:!0});var yet=s(fj);BCo=r(yet,"XLMWithLMHeadModel"),yet.forEach(t),PCo=r(qAe," (XLM model)"),qAe.forEach(t),ICo=i(H),R2=n(H,"LI",{});var NAe=s(R2);Xie=n(NAe,"STRONG",{});var Let=s(Xie);qCo=r(Let,"xlm-roberta"),Let.forEach(t),NCo=r(NAe," \u2014 "),mj=n(NAe,"A",{href:!0});var xet=s(mj);jCo=r(xet,"XLMRobertaForMaskedLM"),xet.forEach(t),DCo=r(NAe," (XLM-RoBERTa model)"),NAe.forEach(t),GCo=i(H),B2=n(H,"LI",{});var jAe=s(B2);zie=n(jAe,"STRONG",{});var $et=s(zie);OCo=r($et,"xlm-roberta-xl"),$et.forEach(t),VCo=r(jAe," \u2014 "),gj=n(jAe,"A",{href:!0});var ket=s(gj);XCo=r(ket,"XLMRobertaXLForMaskedLM"),ket.forEach(t),zCo=r(jAe," (XLM-RoBERTa-XL model)"),jAe.forEach(t),QCo=i(H),P2=n(H,"LI",{});var DAe=s(P2);Qie=n(DAe,"STRONG",{});var Set=s(Qie);WCo=r(Set,"yoso"),Set.forEach(t),HCo=r(DAe," \u2014 "),hj=n(DAe,"A",{href:!0});var Ret=s(hj);UCo=r(Ret,"YosoForMaskedLM"),Ret.forEach(t),JCo=r(DAe," (YOSO model)"),DAe.forEach(t),H.forEach(t),YCo=i(Zt),I2=n(Zt,"P",{});var GAe=s(I2);KCo=r(GAe,"The model is set in evaluation mode by default using "),Wie=n(GAe,"CODE",{});var Bet=s(Wie);ZCo=r(Bet,"model.eval()"),Bet.forEach(t),e3o=r(GAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hie=n(GAe,"CODE",{});var Pet=s(Hie);o3o=r(Pet,"model.train()"),Pet.forEach(t),GAe.forEach(t),r3o=i(Zt),T(q2.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),hPe=i(f),Li=n(f,"H2",{class:!0});var uqe=s(Li);N2=n(uqe,"A",{id:!0,class:!0,href:!0});var Iet=s(N2);Uie=n(Iet,"SPAN",{});var qet=s(Uie);T(CA.$$.fragment,qet),qet.forEach(t),Iet.forEach(t),t3o=i(uqe),Jie=n(uqe,"SPAN",{});var Net=s(Jie);a3o=r(Net,"AutoModelForSeq2SeqLM"),Net.forEach(t),uqe.forEach(t),pPe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(wA.$$.fragment,Ds),n3o=i(Ds),xi=n(Ds,"P",{});var GY=s(xi);s3o=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pj=n(GY,"A",{href:!0});var jet=s(pj);l3o=r(jet,"from_pretrained()"),jet.forEach(t),i3o=r(GY," class method or the "),uj=n(GY,"A",{href:!0});var Det=s(uj);d3o=r(Det,"from_config()"),Det.forEach(t),c3o=r(GY,` class
method.`),GY.forEach(t),f3o=i(Ds),AA=n(Ds,"P",{});var _qe=s(AA);m3o=r(_qe,"This class cannot be instantiated directly using "),Yie=n(_qe,"CODE",{});var Get=s(Yie);g3o=r(Get,"__init__()"),Get.forEach(t),h3o=r(_qe," (throws an error)."),_qe.forEach(t),p3o=i(Ds),tt=n(Ds,"DIV",{class:!0});var zC=s(tt);T(yA.$$.fragment,zC),u3o=i(zC),Kie=n(zC,"P",{});var Oet=s(Kie);_3o=r(Oet,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Oet.forEach(t),b3o=i(zC),$i=n(zC,"P",{});var OY=s($i);v3o=r(OY,`Note:
Loading a model from its configuration file does `),Zie=n(OY,"STRONG",{});var Vet=s(Zie);F3o=r(Vet,"not"),Vet.forEach(t),T3o=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(OY,"A",{href:!0});var Xet=s(_j);M3o=r(Xet,"from_pretrained()"),Xet.forEach(t),E3o=r(OY," to load the model weights."),OY.forEach(t),C3o=i(zC),T(j2.$$.fragment,zC),zC.forEach(t),w3o=i(Ds),Ke=n(Ds,"DIV",{class:!0});var ea=s(Ke);T(LA.$$.fragment,ea),A3o=i(ea),ede=n(ea,"P",{});var zet=s(ede);y3o=r(zet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zet.forEach(t),L3o=i(ea),ya=n(ea,"P",{});var QC=s(ya);x3o=r(QC,"The model class to instantiate is selected based on the "),ode=n(QC,"CODE",{});var Qet=s(ode);$3o=r(Qet,"model_type"),Qet.forEach(t),k3o=r(QC,` property of the config object (either
passed as an argument or loaded from `),rde=n(QC,"CODE",{});var Wet=s(rde);S3o=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),R3o=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tde=n(QC,"CODE",{});var Het=s(tde);B3o=r(Het,"pretrained_model_name_or_path"),Het.forEach(t),P3o=r(QC,":"),QC.forEach(t),I3o=i(ea),he=n(ea,"UL",{});var ue=s(he);D2=n(ue,"LI",{});var OAe=s(D2);ade=n(OAe,"STRONG",{});var Uet=s(ade);q3o=r(Uet,"bart"),Uet.forEach(t),N3o=r(OAe," \u2014 "),bj=n(OAe,"A",{href:!0});var Jet=s(bj);j3o=r(Jet,"BartForConditionalGeneration"),Jet.forEach(t),D3o=r(OAe," (BART model)"),OAe.forEach(t),G3o=i(ue),G2=n(ue,"LI",{});var VAe=s(G2);nde=n(VAe,"STRONG",{});var Yet=s(nde);O3o=r(Yet,"bigbird_pegasus"),Yet.forEach(t),V3o=r(VAe," \u2014 "),vj=n(VAe,"A",{href:!0});var Ket=s(vj);X3o=r(Ket,"BigBirdPegasusForConditionalGeneration"),Ket.forEach(t),z3o=r(VAe," (BigBirdPegasus model)"),VAe.forEach(t),Q3o=i(ue),O2=n(ue,"LI",{});var XAe=s(O2);sde=n(XAe,"STRONG",{});var Zet=s(sde);W3o=r(Zet,"blenderbot"),Zet.forEach(t),H3o=r(XAe," \u2014 "),Fj=n(XAe,"A",{href:!0});var eot=s(Fj);U3o=r(eot,"BlenderbotForConditionalGeneration"),eot.forEach(t),J3o=r(XAe," (Blenderbot model)"),XAe.forEach(t),Y3o=i(ue),V2=n(ue,"LI",{});var zAe=s(V2);lde=n(zAe,"STRONG",{});var oot=s(lde);K3o=r(oot,"blenderbot-small"),oot.forEach(t),Z3o=r(zAe," \u2014 "),Tj=n(zAe,"A",{href:!0});var rot=s(Tj);ewo=r(rot,"BlenderbotSmallForConditionalGeneration"),rot.forEach(t),owo=r(zAe," (BlenderbotSmall model)"),zAe.forEach(t),rwo=i(ue),X2=n(ue,"LI",{});var QAe=s(X2);ide=n(QAe,"STRONG",{});var tot=s(ide);two=r(tot,"encoder-decoder"),tot.forEach(t),awo=r(QAe," \u2014 "),Mj=n(QAe,"A",{href:!0});var aot=s(Mj);nwo=r(aot,"EncoderDecoderModel"),aot.forEach(t),swo=r(QAe," (Encoder decoder model)"),QAe.forEach(t),lwo=i(ue),z2=n(ue,"LI",{});var WAe=s(z2);dde=n(WAe,"STRONG",{});var not=s(dde);iwo=r(not,"fsmt"),not.forEach(t),dwo=r(WAe," \u2014 "),Ej=n(WAe,"A",{href:!0});var sot=s(Ej);cwo=r(sot,"FSMTForConditionalGeneration"),sot.forEach(t),fwo=r(WAe," (FairSeq Machine-Translation model)"),WAe.forEach(t),mwo=i(ue),Q2=n(ue,"LI",{});var HAe=s(Q2);cde=n(HAe,"STRONG",{});var lot=s(cde);gwo=r(lot,"led"),lot.forEach(t),hwo=r(HAe," \u2014 "),Cj=n(HAe,"A",{href:!0});var iot=s(Cj);pwo=r(iot,"LEDForConditionalGeneration"),iot.forEach(t),uwo=r(HAe," (LED model)"),HAe.forEach(t),_wo=i(ue),W2=n(ue,"LI",{});var UAe=s(W2);fde=n(UAe,"STRONG",{});var dot=s(fde);bwo=r(dot,"longt5"),dot.forEach(t),vwo=r(UAe," \u2014 "),wj=n(UAe,"A",{href:!0});var cot=s(wj);Fwo=r(cot,"LongT5ForConditionalGeneration"),cot.forEach(t),Two=r(UAe," (LongT5 model)"),UAe.forEach(t),Mwo=i(ue),H2=n(ue,"LI",{});var JAe=s(H2);mde=n(JAe,"STRONG",{});var fot=s(mde);Ewo=r(fot,"m2m_100"),fot.forEach(t),Cwo=r(JAe," \u2014 "),Aj=n(JAe,"A",{href:!0});var mot=s(Aj);wwo=r(mot,"M2M100ForConditionalGeneration"),mot.forEach(t),Awo=r(JAe," (M2M100 model)"),JAe.forEach(t),ywo=i(ue),U2=n(ue,"LI",{});var YAe=s(U2);gde=n(YAe,"STRONG",{});var got=s(gde);Lwo=r(got,"marian"),got.forEach(t),xwo=r(YAe," \u2014 "),yj=n(YAe,"A",{href:!0});var hot=s(yj);$wo=r(hot,"MarianMTModel"),hot.forEach(t),kwo=r(YAe," (Marian model)"),YAe.forEach(t),Swo=i(ue),J2=n(ue,"LI",{});var KAe=s(J2);hde=n(KAe,"STRONG",{});var pot=s(hde);Rwo=r(pot,"mbart"),pot.forEach(t),Bwo=r(KAe," \u2014 "),Lj=n(KAe,"A",{href:!0});var uot=s(Lj);Pwo=r(uot,"MBartForConditionalGeneration"),uot.forEach(t),Iwo=r(KAe," (mBART model)"),KAe.forEach(t),qwo=i(ue),Y2=n(ue,"LI",{});var ZAe=s(Y2);pde=n(ZAe,"STRONG",{});var _ot=s(pde);Nwo=r(_ot,"mt5"),_ot.forEach(t),jwo=r(ZAe," \u2014 "),xj=n(ZAe,"A",{href:!0});var bot=s(xj);Dwo=r(bot,"MT5ForConditionalGeneration"),bot.forEach(t),Gwo=r(ZAe," (mT5 model)"),ZAe.forEach(t),Owo=i(ue),K2=n(ue,"LI",{});var e0e=s(K2);ude=n(e0e,"STRONG",{});var vot=s(ude);Vwo=r(vot,"pegasus"),vot.forEach(t),Xwo=r(e0e," \u2014 "),$j=n(e0e,"A",{href:!0});var Fot=s($j);zwo=r(Fot,"PegasusForConditionalGeneration"),Fot.forEach(t),Qwo=r(e0e," (Pegasus model)"),e0e.forEach(t),Wwo=i(ue),Z2=n(ue,"LI",{});var o0e=s(Z2);_de=n(o0e,"STRONG",{});var Tot=s(_de);Hwo=r(Tot,"plbart"),Tot.forEach(t),Uwo=r(o0e," \u2014 "),kj=n(o0e,"A",{href:!0});var Mot=s(kj);Jwo=r(Mot,"PLBartForConditionalGeneration"),Mot.forEach(t),Ywo=r(o0e," (PLBart model)"),o0e.forEach(t),Kwo=i(ue),e1=n(ue,"LI",{});var r0e=s(e1);bde=n(r0e,"STRONG",{});var Eot=s(bde);Zwo=r(Eot,"prophetnet"),Eot.forEach(t),eAo=r(r0e," \u2014 "),Sj=n(r0e,"A",{href:!0});var Cot=s(Sj);oAo=r(Cot,"ProphetNetForConditionalGeneration"),Cot.forEach(t),rAo=r(r0e," (ProphetNet model)"),r0e.forEach(t),tAo=i(ue),o1=n(ue,"LI",{});var t0e=s(o1);vde=n(t0e,"STRONG",{});var wot=s(vde);aAo=r(wot,"t5"),wot.forEach(t),nAo=r(t0e," \u2014 "),Rj=n(t0e,"A",{href:!0});var Aot=s(Rj);sAo=r(Aot,"T5ForConditionalGeneration"),Aot.forEach(t),lAo=r(t0e," (T5 model)"),t0e.forEach(t),iAo=i(ue),r1=n(ue,"LI",{});var a0e=s(r1);Fde=n(a0e,"STRONG",{});var yot=s(Fde);dAo=r(yot,"tapex"),yot.forEach(t),cAo=r(a0e," \u2014 "),Bj=n(a0e,"A",{href:!0});var Lot=s(Bj);fAo=r(Lot,"BartForConditionalGeneration"),Lot.forEach(t),mAo=r(a0e," (TAPEX model)"),a0e.forEach(t),gAo=i(ue),t1=n(ue,"LI",{});var n0e=s(t1);Tde=n(n0e,"STRONG",{});var xot=s(Tde);hAo=r(xot,"xlm-prophetnet"),xot.forEach(t),pAo=r(n0e," \u2014 "),Pj=n(n0e,"A",{href:!0});var $ot=s(Pj);uAo=r($ot,"XLMProphetNetForConditionalGeneration"),$ot.forEach(t),_Ao=r(n0e," (XLMProphetNet model)"),n0e.forEach(t),ue.forEach(t),bAo=i(ea),a1=n(ea,"P",{});var s0e=s(a1);vAo=r(s0e,"The model is set in evaluation mode by default using "),Mde=n(s0e,"CODE",{});var kot=s(Mde);FAo=r(kot,"model.eval()"),kot.forEach(t),TAo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ede=n(s0e,"CODE",{});var Sot=s(Ede);MAo=r(Sot,"model.train()"),Sot.forEach(t),s0e.forEach(t),EAo=i(ea),T(n1.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),uPe=i(f),ki=n(f,"H2",{class:!0});var bqe=s(ki);s1=n(bqe,"A",{id:!0,class:!0,href:!0});var Rot=s(s1);Cde=n(Rot,"SPAN",{});var Bot=s(Cde);T(xA.$$.fragment,Bot),Bot.forEach(t),Rot.forEach(t),CAo=i(bqe),wde=n(bqe,"SPAN",{});var Pot=s(wde);wAo=r(Pot,"AutoModelForSequenceClassification"),Pot.forEach(t),bqe.forEach(t),_Pe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T($A.$$.fragment,Gs),AAo=i(Gs),Si=n(Gs,"P",{});var VY=s(Si);yAo=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ij=n(VY,"A",{href:!0});var Iot=s(Ij);LAo=r(Iot,"from_pretrained()"),Iot.forEach(t),xAo=r(VY," class method or the "),qj=n(VY,"A",{href:!0});var qot=s(qj);$Ao=r(qot,"from_config()"),qot.forEach(t),kAo=r(VY,` class
method.`),VY.forEach(t),SAo=i(Gs),kA=n(Gs,"P",{});var vqe=s(kA);RAo=r(vqe,"This class cannot be instantiated directly using "),Ade=n(vqe,"CODE",{});var Not=s(Ade);BAo=r(Not,"__init__()"),Not.forEach(t),PAo=r(vqe," (throws an error)."),vqe.forEach(t),IAo=i(Gs),at=n(Gs,"DIV",{class:!0});var WC=s(at);T(SA.$$.fragment,WC),qAo=i(WC),yde=n(WC,"P",{});var jot=s(yde);NAo=r(jot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jot.forEach(t),jAo=i(WC),Ri=n(WC,"P",{});var XY=s(Ri);DAo=r(XY,`Note:
Loading a model from its configuration file does `),Lde=n(XY,"STRONG",{});var Dot=s(Lde);GAo=r(Dot,"not"),Dot.forEach(t),OAo=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nj=n(XY,"A",{href:!0});var Got=s(Nj);VAo=r(Got,"from_pretrained()"),Got.forEach(t),XAo=r(XY," to load the model weights."),XY.forEach(t),zAo=i(WC),T(l1.$$.fragment,WC),WC.forEach(t),QAo=i(Gs),Ze=n(Gs,"DIV",{class:!0});var oa=s(Ze);T(RA.$$.fragment,oa),WAo=i(oa),xde=n(oa,"P",{});var Oot=s(xde);HAo=r(Oot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Oot.forEach(t),UAo=i(oa),La=n(oa,"P",{});var HC=s(La);JAo=r(HC,"The model class to instantiate is selected based on the "),$de=n(HC,"CODE",{});var Vot=s($de);YAo=r(Vot,"model_type"),Vot.forEach(t),KAo=r(HC,` property of the config object (either
passed as an argument or loaded from `),kde=n(HC,"CODE",{});var Xot=s(kde);ZAo=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),e0o=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(HC,"CODE",{});var zot=s(Sde);o0o=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),r0o=r(HC,":"),HC.forEach(t),t0o=i(oa),q=n(oa,"UL",{});var N=s(q);i1=n(N,"LI",{});var l0e=s(i1);Rde=n(l0e,"STRONG",{});var Qot=s(Rde);a0o=r(Qot,"albert"),Qot.forEach(t),n0o=r(l0e," \u2014 "),jj=n(l0e,"A",{href:!0});var Wot=s(jj);s0o=r(Wot,"AlbertForSequenceClassification"),Wot.forEach(t),l0o=r(l0e," (ALBERT model)"),l0e.forEach(t),i0o=i(N),d1=n(N,"LI",{});var i0e=s(d1);Bde=n(i0e,"STRONG",{});var Hot=s(Bde);d0o=r(Hot,"bart"),Hot.forEach(t),c0o=r(i0e," \u2014 "),Dj=n(i0e,"A",{href:!0});var Uot=s(Dj);f0o=r(Uot,"BartForSequenceClassification"),Uot.forEach(t),m0o=r(i0e," (BART model)"),i0e.forEach(t),g0o=i(N),c1=n(N,"LI",{});var d0e=s(c1);Pde=n(d0e,"STRONG",{});var Jot=s(Pde);h0o=r(Jot,"bert"),Jot.forEach(t),p0o=r(d0e," \u2014 "),Gj=n(d0e,"A",{href:!0});var Yot=s(Gj);u0o=r(Yot,"BertForSequenceClassification"),Yot.forEach(t),_0o=r(d0e," (BERT model)"),d0e.forEach(t),b0o=i(N),f1=n(N,"LI",{});var c0e=s(f1);Ide=n(c0e,"STRONG",{});var Kot=s(Ide);v0o=r(Kot,"big_bird"),Kot.forEach(t),F0o=r(c0e," \u2014 "),Oj=n(c0e,"A",{href:!0});var Zot=s(Oj);T0o=r(Zot,"BigBirdForSequenceClassification"),Zot.forEach(t),M0o=r(c0e," (BigBird model)"),c0e.forEach(t),E0o=i(N),m1=n(N,"LI",{});var f0e=s(m1);qde=n(f0e,"STRONG",{});var ert=s(qde);C0o=r(ert,"bigbird_pegasus"),ert.forEach(t),w0o=r(f0e," \u2014 "),Vj=n(f0e,"A",{href:!0});var ort=s(Vj);A0o=r(ort,"BigBirdPegasusForSequenceClassification"),ort.forEach(t),y0o=r(f0e," (BigBirdPegasus model)"),f0e.forEach(t),L0o=i(N),g1=n(N,"LI",{});var m0e=s(g1);Nde=n(m0e,"STRONG",{});var rrt=s(Nde);x0o=r(rrt,"camembert"),rrt.forEach(t),$0o=r(m0e," \u2014 "),Xj=n(m0e,"A",{href:!0});var trt=s(Xj);k0o=r(trt,"CamembertForSequenceClassification"),trt.forEach(t),S0o=r(m0e," (CamemBERT model)"),m0e.forEach(t),R0o=i(N),h1=n(N,"LI",{});var g0e=s(h1);jde=n(g0e,"STRONG",{});var art=s(jde);B0o=r(art,"canine"),art.forEach(t),P0o=r(g0e," \u2014 "),zj=n(g0e,"A",{href:!0});var nrt=s(zj);I0o=r(nrt,"CanineForSequenceClassification"),nrt.forEach(t),q0o=r(g0e," (Canine model)"),g0e.forEach(t),N0o=i(N),p1=n(N,"LI",{});var h0e=s(p1);Dde=n(h0e,"STRONG",{});var srt=s(Dde);j0o=r(srt,"convbert"),srt.forEach(t),D0o=r(h0e," \u2014 "),Qj=n(h0e,"A",{href:!0});var lrt=s(Qj);G0o=r(lrt,"ConvBertForSequenceClassification"),lrt.forEach(t),O0o=r(h0e," (ConvBERT model)"),h0e.forEach(t),V0o=i(N),u1=n(N,"LI",{});var p0e=s(u1);Gde=n(p0e,"STRONG",{});var irt=s(Gde);X0o=r(irt,"ctrl"),irt.forEach(t),z0o=r(p0e," \u2014 "),Wj=n(p0e,"A",{href:!0});var drt=s(Wj);Q0o=r(drt,"CTRLForSequenceClassification"),drt.forEach(t),W0o=r(p0e," (CTRL model)"),p0e.forEach(t),H0o=i(N),_1=n(N,"LI",{});var u0e=s(_1);Ode=n(u0e,"STRONG",{});var crt=s(Ode);U0o=r(crt,"data2vec-text"),crt.forEach(t),J0o=r(u0e," \u2014 "),Hj=n(u0e,"A",{href:!0});var frt=s(Hj);Y0o=r(frt,"Data2VecTextForSequenceClassification"),frt.forEach(t),K0o=r(u0e," (Data2VecText model)"),u0e.forEach(t),Z0o=i(N),b1=n(N,"LI",{});var _0e=s(b1);Vde=n(_0e,"STRONG",{});var mrt=s(Vde);eyo=r(mrt,"deberta"),mrt.forEach(t),oyo=r(_0e," \u2014 "),Uj=n(_0e,"A",{href:!0});var grt=s(Uj);ryo=r(grt,"DebertaForSequenceClassification"),grt.forEach(t),tyo=r(_0e," (DeBERTa model)"),_0e.forEach(t),ayo=i(N),v1=n(N,"LI",{});var b0e=s(v1);Xde=n(b0e,"STRONG",{});var hrt=s(Xde);nyo=r(hrt,"deberta-v2"),hrt.forEach(t),syo=r(b0e," \u2014 "),Jj=n(b0e,"A",{href:!0});var prt=s(Jj);lyo=r(prt,"DebertaV2ForSequenceClassification"),prt.forEach(t),iyo=r(b0e," (DeBERTa-v2 model)"),b0e.forEach(t),dyo=i(N),F1=n(N,"LI",{});var v0e=s(F1);zde=n(v0e,"STRONG",{});var urt=s(zde);cyo=r(urt,"distilbert"),urt.forEach(t),fyo=r(v0e," \u2014 "),Yj=n(v0e,"A",{href:!0});var _rt=s(Yj);myo=r(_rt,"DistilBertForSequenceClassification"),_rt.forEach(t),gyo=r(v0e," (DistilBERT model)"),v0e.forEach(t),hyo=i(N),T1=n(N,"LI",{});var F0e=s(T1);Qde=n(F0e,"STRONG",{});var brt=s(Qde);pyo=r(brt,"electra"),brt.forEach(t),uyo=r(F0e," \u2014 "),Kj=n(F0e,"A",{href:!0});var vrt=s(Kj);_yo=r(vrt,"ElectraForSequenceClassification"),vrt.forEach(t),byo=r(F0e," (ELECTRA model)"),F0e.forEach(t),vyo=i(N),M1=n(N,"LI",{});var T0e=s(M1);Wde=n(T0e,"STRONG",{});var Frt=s(Wde);Fyo=r(Frt,"flaubert"),Frt.forEach(t),Tyo=r(T0e," \u2014 "),Zj=n(T0e,"A",{href:!0});var Trt=s(Zj);Myo=r(Trt,"FlaubertForSequenceClassification"),Trt.forEach(t),Eyo=r(T0e," (FlauBERT model)"),T0e.forEach(t),Cyo=i(N),E1=n(N,"LI",{});var M0e=s(E1);Hde=n(M0e,"STRONG",{});var Mrt=s(Hde);wyo=r(Mrt,"fnet"),Mrt.forEach(t),Ayo=r(M0e," \u2014 "),eD=n(M0e,"A",{href:!0});var Ert=s(eD);yyo=r(Ert,"FNetForSequenceClassification"),Ert.forEach(t),Lyo=r(M0e," (FNet model)"),M0e.forEach(t),xyo=i(N),C1=n(N,"LI",{});var E0e=s(C1);Ude=n(E0e,"STRONG",{});var Crt=s(Ude);$yo=r(Crt,"funnel"),Crt.forEach(t),kyo=r(E0e," \u2014 "),oD=n(E0e,"A",{href:!0});var wrt=s(oD);Syo=r(wrt,"FunnelForSequenceClassification"),wrt.forEach(t),Ryo=r(E0e," (Funnel Transformer model)"),E0e.forEach(t),Byo=i(N),w1=n(N,"LI",{});var C0e=s(w1);Jde=n(C0e,"STRONG",{});var Art=s(Jde);Pyo=r(Art,"gpt2"),Art.forEach(t),Iyo=r(C0e," \u2014 "),rD=n(C0e,"A",{href:!0});var yrt=s(rD);qyo=r(yrt,"GPT2ForSequenceClassification"),yrt.forEach(t),Nyo=r(C0e," (OpenAI GPT-2 model)"),C0e.forEach(t),jyo=i(N),A1=n(N,"LI",{});var w0e=s(A1);Yde=n(w0e,"STRONG",{});var Lrt=s(Yde);Dyo=r(Lrt,"gpt_neo"),Lrt.forEach(t),Gyo=r(w0e," \u2014 "),tD=n(w0e,"A",{href:!0});var xrt=s(tD);Oyo=r(xrt,"GPTNeoForSequenceClassification"),xrt.forEach(t),Vyo=r(w0e," (GPT Neo model)"),w0e.forEach(t),Xyo=i(N),y1=n(N,"LI",{});var A0e=s(y1);Kde=n(A0e,"STRONG",{});var $rt=s(Kde);zyo=r($rt,"gptj"),$rt.forEach(t),Qyo=r(A0e," \u2014 "),aD=n(A0e,"A",{href:!0});var krt=s(aD);Wyo=r(krt,"GPTJForSequenceClassification"),krt.forEach(t),Hyo=r(A0e," (GPT-J model)"),A0e.forEach(t),Uyo=i(N),L1=n(N,"LI",{});var y0e=s(L1);Zde=n(y0e,"STRONG",{});var Srt=s(Zde);Jyo=r(Srt,"ibert"),Srt.forEach(t),Yyo=r(y0e," \u2014 "),nD=n(y0e,"A",{href:!0});var Rrt=s(nD);Kyo=r(Rrt,"IBertForSequenceClassification"),Rrt.forEach(t),Zyo=r(y0e," (I-BERT model)"),y0e.forEach(t),eLo=i(N),x1=n(N,"LI",{});var L0e=s(x1);ece=n(L0e,"STRONG",{});var Brt=s(ece);oLo=r(Brt,"layoutlm"),Brt.forEach(t),rLo=r(L0e," \u2014 "),sD=n(L0e,"A",{href:!0});var Prt=s(sD);tLo=r(Prt,"LayoutLMForSequenceClassification"),Prt.forEach(t),aLo=r(L0e," (LayoutLM model)"),L0e.forEach(t),nLo=i(N),$1=n(N,"LI",{});var x0e=s($1);oce=n(x0e,"STRONG",{});var Irt=s(oce);sLo=r(Irt,"layoutlmv2"),Irt.forEach(t),lLo=r(x0e," \u2014 "),lD=n(x0e,"A",{href:!0});var qrt=s(lD);iLo=r(qrt,"LayoutLMv2ForSequenceClassification"),qrt.forEach(t),dLo=r(x0e," (LayoutLMv2 model)"),x0e.forEach(t),cLo=i(N),k1=n(N,"LI",{});var $0e=s(k1);rce=n($0e,"STRONG",{});var Nrt=s(rce);fLo=r(Nrt,"led"),Nrt.forEach(t),mLo=r($0e," \u2014 "),iD=n($0e,"A",{href:!0});var jrt=s(iD);gLo=r(jrt,"LEDForSequenceClassification"),jrt.forEach(t),hLo=r($0e," (LED model)"),$0e.forEach(t),pLo=i(N),S1=n(N,"LI",{});var k0e=s(S1);tce=n(k0e,"STRONG",{});var Drt=s(tce);uLo=r(Drt,"longformer"),Drt.forEach(t),_Lo=r(k0e," \u2014 "),dD=n(k0e,"A",{href:!0});var Grt=s(dD);bLo=r(Grt,"LongformerForSequenceClassification"),Grt.forEach(t),vLo=r(k0e," (Longformer model)"),k0e.forEach(t),FLo=i(N),R1=n(N,"LI",{});var S0e=s(R1);ace=n(S0e,"STRONG",{});var Ort=s(ace);TLo=r(Ort,"mbart"),Ort.forEach(t),MLo=r(S0e," \u2014 "),cD=n(S0e,"A",{href:!0});var Vrt=s(cD);ELo=r(Vrt,"MBartForSequenceClassification"),Vrt.forEach(t),CLo=r(S0e," (mBART model)"),S0e.forEach(t),wLo=i(N),B1=n(N,"LI",{});var R0e=s(B1);nce=n(R0e,"STRONG",{});var Xrt=s(nce);ALo=r(Xrt,"megatron-bert"),Xrt.forEach(t),yLo=r(R0e," \u2014 "),fD=n(R0e,"A",{href:!0});var zrt=s(fD);LLo=r(zrt,"MegatronBertForSequenceClassification"),zrt.forEach(t),xLo=r(R0e," (MegatronBert model)"),R0e.forEach(t),$Lo=i(N),P1=n(N,"LI",{});var B0e=s(P1);sce=n(B0e,"STRONG",{});var Qrt=s(sce);kLo=r(Qrt,"mobilebert"),Qrt.forEach(t),SLo=r(B0e," \u2014 "),mD=n(B0e,"A",{href:!0});var Wrt=s(mD);RLo=r(Wrt,"MobileBertForSequenceClassification"),Wrt.forEach(t),BLo=r(B0e," (MobileBERT model)"),B0e.forEach(t),PLo=i(N),I1=n(N,"LI",{});var P0e=s(I1);lce=n(P0e,"STRONG",{});var Hrt=s(lce);ILo=r(Hrt,"mpnet"),Hrt.forEach(t),qLo=r(P0e," \u2014 "),gD=n(P0e,"A",{href:!0});var Urt=s(gD);NLo=r(Urt,"MPNetForSequenceClassification"),Urt.forEach(t),jLo=r(P0e," (MPNet model)"),P0e.forEach(t),DLo=i(N),q1=n(N,"LI",{});var I0e=s(q1);ice=n(I0e,"STRONG",{});var Jrt=s(ice);GLo=r(Jrt,"nystromformer"),Jrt.forEach(t),OLo=r(I0e," \u2014 "),hD=n(I0e,"A",{href:!0});var Yrt=s(hD);VLo=r(Yrt,"NystromformerForSequenceClassification"),Yrt.forEach(t),XLo=r(I0e," (Nystromformer model)"),I0e.forEach(t),zLo=i(N),N1=n(N,"LI",{});var q0e=s(N1);dce=n(q0e,"STRONG",{});var Krt=s(dce);QLo=r(Krt,"openai-gpt"),Krt.forEach(t),WLo=r(q0e," \u2014 "),pD=n(q0e,"A",{href:!0});var Zrt=s(pD);HLo=r(Zrt,"OpenAIGPTForSequenceClassification"),Zrt.forEach(t),ULo=r(q0e," (OpenAI GPT model)"),q0e.forEach(t),JLo=i(N),j1=n(N,"LI",{});var N0e=s(j1);cce=n(N0e,"STRONG",{});var ett=s(cce);YLo=r(ett,"perceiver"),ett.forEach(t),KLo=r(N0e," \u2014 "),uD=n(N0e,"A",{href:!0});var ott=s(uD);ZLo=r(ott,"PerceiverForSequenceClassification"),ott.forEach(t),e8o=r(N0e," (Perceiver model)"),N0e.forEach(t),o8o=i(N),D1=n(N,"LI",{});var j0e=s(D1);fce=n(j0e,"STRONG",{});var rtt=s(fce);r8o=r(rtt,"plbart"),rtt.forEach(t),t8o=r(j0e," \u2014 "),_D=n(j0e,"A",{href:!0});var ttt=s(_D);a8o=r(ttt,"PLBartForSequenceClassification"),ttt.forEach(t),n8o=r(j0e," (PLBart model)"),j0e.forEach(t),s8o=i(N),G1=n(N,"LI",{});var D0e=s(G1);mce=n(D0e,"STRONG",{});var att=s(mce);l8o=r(att,"qdqbert"),att.forEach(t),i8o=r(D0e," \u2014 "),bD=n(D0e,"A",{href:!0});var ntt=s(bD);d8o=r(ntt,"QDQBertForSequenceClassification"),ntt.forEach(t),c8o=r(D0e," (QDQBert model)"),D0e.forEach(t),f8o=i(N),O1=n(N,"LI",{});var G0e=s(O1);gce=n(G0e,"STRONG",{});var stt=s(gce);m8o=r(stt,"reformer"),stt.forEach(t),g8o=r(G0e," \u2014 "),vD=n(G0e,"A",{href:!0});var ltt=s(vD);h8o=r(ltt,"ReformerForSequenceClassification"),ltt.forEach(t),p8o=r(G0e," (Reformer model)"),G0e.forEach(t),u8o=i(N),V1=n(N,"LI",{});var O0e=s(V1);hce=n(O0e,"STRONG",{});var itt=s(hce);_8o=r(itt,"rembert"),itt.forEach(t),b8o=r(O0e," \u2014 "),FD=n(O0e,"A",{href:!0});var dtt=s(FD);v8o=r(dtt,"RemBertForSequenceClassification"),dtt.forEach(t),F8o=r(O0e," (RemBERT model)"),O0e.forEach(t),T8o=i(N),X1=n(N,"LI",{});var V0e=s(X1);pce=n(V0e,"STRONG",{});var ctt=s(pce);M8o=r(ctt,"roberta"),ctt.forEach(t),E8o=r(V0e," \u2014 "),TD=n(V0e,"A",{href:!0});var ftt=s(TD);C8o=r(ftt,"RobertaForSequenceClassification"),ftt.forEach(t),w8o=r(V0e," (RoBERTa model)"),V0e.forEach(t),A8o=i(N),z1=n(N,"LI",{});var X0e=s(z1);uce=n(X0e,"STRONG",{});var mtt=s(uce);y8o=r(mtt,"roformer"),mtt.forEach(t),L8o=r(X0e," \u2014 "),MD=n(X0e,"A",{href:!0});var gtt=s(MD);x8o=r(gtt,"RoFormerForSequenceClassification"),gtt.forEach(t),$8o=r(X0e," (RoFormer model)"),X0e.forEach(t),k8o=i(N),Q1=n(N,"LI",{});var z0e=s(Q1);_ce=n(z0e,"STRONG",{});var htt=s(_ce);S8o=r(htt,"squeezebert"),htt.forEach(t),R8o=r(z0e," \u2014 "),ED=n(z0e,"A",{href:!0});var ptt=s(ED);B8o=r(ptt,"SqueezeBertForSequenceClassification"),ptt.forEach(t),P8o=r(z0e," (SqueezeBERT model)"),z0e.forEach(t),I8o=i(N),W1=n(N,"LI",{});var Q0e=s(W1);bce=n(Q0e,"STRONG",{});var utt=s(bce);q8o=r(utt,"tapas"),utt.forEach(t),N8o=r(Q0e," \u2014 "),CD=n(Q0e,"A",{href:!0});var _tt=s(CD);j8o=r(_tt,"TapasForSequenceClassification"),_tt.forEach(t),D8o=r(Q0e," (TAPAS model)"),Q0e.forEach(t),G8o=i(N),H1=n(N,"LI",{});var W0e=s(H1);vce=n(W0e,"STRONG",{});var btt=s(vce);O8o=r(btt,"tapex"),btt.forEach(t),V8o=r(W0e," \u2014 "),wD=n(W0e,"A",{href:!0});var vtt=s(wD);X8o=r(vtt,"BartForSequenceClassification"),vtt.forEach(t),z8o=r(W0e," (TAPEX model)"),W0e.forEach(t),Q8o=i(N),U1=n(N,"LI",{});var H0e=s(U1);Fce=n(H0e,"STRONG",{});var Ftt=s(Fce);W8o=r(Ftt,"transfo-xl"),Ftt.forEach(t),H8o=r(H0e," \u2014 "),AD=n(H0e,"A",{href:!0});var Ttt=s(AD);U8o=r(Ttt,"TransfoXLForSequenceClassification"),Ttt.forEach(t),J8o=r(H0e," (Transformer-XL model)"),H0e.forEach(t),Y8o=i(N),J1=n(N,"LI",{});var U0e=s(J1);Tce=n(U0e,"STRONG",{});var Mtt=s(Tce);K8o=r(Mtt,"xlm"),Mtt.forEach(t),Z8o=r(U0e," \u2014 "),yD=n(U0e,"A",{href:!0});var Ett=s(yD);exo=r(Ett,"XLMForSequenceClassification"),Ett.forEach(t),oxo=r(U0e," (XLM model)"),U0e.forEach(t),rxo=i(N),Y1=n(N,"LI",{});var J0e=s(Y1);Mce=n(J0e,"STRONG",{});var Ctt=s(Mce);txo=r(Ctt,"xlm-roberta"),Ctt.forEach(t),axo=r(J0e," \u2014 "),LD=n(J0e,"A",{href:!0});var wtt=s(LD);nxo=r(wtt,"XLMRobertaForSequenceClassification"),wtt.forEach(t),sxo=r(J0e," (XLM-RoBERTa model)"),J0e.forEach(t),lxo=i(N),K1=n(N,"LI",{});var Y0e=s(K1);Ece=n(Y0e,"STRONG",{});var Att=s(Ece);ixo=r(Att,"xlm-roberta-xl"),Att.forEach(t),dxo=r(Y0e," \u2014 "),xD=n(Y0e,"A",{href:!0});var ytt=s(xD);cxo=r(ytt,"XLMRobertaXLForSequenceClassification"),ytt.forEach(t),fxo=r(Y0e," (XLM-RoBERTa-XL model)"),Y0e.forEach(t),mxo=i(N),Z1=n(N,"LI",{});var K0e=s(Z1);Cce=n(K0e,"STRONG",{});var Ltt=s(Cce);gxo=r(Ltt,"xlnet"),Ltt.forEach(t),hxo=r(K0e," \u2014 "),$D=n(K0e,"A",{href:!0});var xtt=s($D);pxo=r(xtt,"XLNetForSequenceClassification"),xtt.forEach(t),uxo=r(K0e," (XLNet model)"),K0e.forEach(t),_xo=i(N),eb=n(N,"LI",{});var Z0e=s(eb);wce=n(Z0e,"STRONG",{});var $tt=s(wce);bxo=r($tt,"yoso"),$tt.forEach(t),vxo=r(Z0e," \u2014 "),kD=n(Z0e,"A",{href:!0});var ktt=s(kD);Fxo=r(ktt,"YosoForSequenceClassification"),ktt.forEach(t),Txo=r(Z0e," (YOSO model)"),Z0e.forEach(t),N.forEach(t),Mxo=i(oa),ob=n(oa,"P",{});var eye=s(ob);Exo=r(eye,"The model is set in evaluation mode by default using "),Ace=n(eye,"CODE",{});var Stt=s(Ace);Cxo=r(Stt,"model.eval()"),Stt.forEach(t),wxo=r(eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yce=n(eye,"CODE",{});var Rtt=s(yce);Axo=r(Rtt,"model.train()"),Rtt.forEach(t),eye.forEach(t),yxo=i(oa),T(rb.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),bPe=i(f),Bi=n(f,"H2",{class:!0});var Fqe=s(Bi);tb=n(Fqe,"A",{id:!0,class:!0,href:!0});var Btt=s(tb);Lce=n(Btt,"SPAN",{});var Ptt=s(Lce);T(BA.$$.fragment,Ptt),Ptt.forEach(t),Btt.forEach(t),Lxo=i(Fqe),xce=n(Fqe,"SPAN",{});var Itt=s(xce);xxo=r(Itt,"AutoModelForMultipleChoice"),Itt.forEach(t),Fqe.forEach(t),vPe=i(f),Bo=n(f,"DIV",{class:!0});var Os=s(Bo);T(PA.$$.fragment,Os),$xo=i(Os),Pi=n(Os,"P",{});var zY=s(Pi);kxo=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),SD=n(zY,"A",{href:!0});var qtt=s(SD);Sxo=r(qtt,"from_pretrained()"),qtt.forEach(t),Rxo=r(zY," class method or the "),RD=n(zY,"A",{href:!0});var Ntt=s(RD);Bxo=r(Ntt,"from_config()"),Ntt.forEach(t),Pxo=r(zY,` class
method.`),zY.forEach(t),Ixo=i(Os),IA=n(Os,"P",{});var Tqe=s(IA);qxo=r(Tqe,"This class cannot be instantiated directly using "),$ce=n(Tqe,"CODE",{});var jtt=s($ce);Nxo=r(jtt,"__init__()"),jtt.forEach(t),jxo=r(Tqe," (throws an error)."),Tqe.forEach(t),Dxo=i(Os),nt=n(Os,"DIV",{class:!0});var UC=s(nt);T(qA.$$.fragment,UC),Gxo=i(UC),kce=n(UC,"P",{});var Dtt=s(kce);Oxo=r(Dtt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dtt.forEach(t),Vxo=i(UC),Ii=n(UC,"P",{});var QY=s(Ii);Xxo=r(QY,`Note:
Loading a model from its configuration file does `),Sce=n(QY,"STRONG",{});var Gtt=s(Sce);zxo=r(Gtt,"not"),Gtt.forEach(t),Qxo=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(QY,"A",{href:!0});var Ott=s(BD);Wxo=r(Ott,"from_pretrained()"),Ott.forEach(t),Hxo=r(QY," to load the model weights."),QY.forEach(t),Uxo=i(UC),T(ab.$$.fragment,UC),UC.forEach(t),Jxo=i(Os),eo=n(Os,"DIV",{class:!0});var ra=s(eo);T(NA.$$.fragment,ra),Yxo=i(ra),Rce=n(ra,"P",{});var Vtt=s(Rce);Kxo=r(Vtt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vtt.forEach(t),Zxo=i(ra),xa=n(ra,"P",{});var JC=s(xa);e$o=r(JC,"The model class to instantiate is selected based on the "),Bce=n(JC,"CODE",{});var Xtt=s(Bce);o$o=r(Xtt,"model_type"),Xtt.forEach(t),r$o=r(JC,` property of the config object (either
passed as an argument or loaded from `),Pce=n(JC,"CODE",{});var ztt=s(Pce);t$o=r(ztt,"pretrained_model_name_or_path"),ztt.forEach(t),a$o=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(JC,"CODE",{});var Qtt=s(Ice);n$o=r(Qtt,"pretrained_model_name_or_path"),Qtt.forEach(t),s$o=r(JC,":"),JC.forEach(t),l$o=i(ra),Y=n(ra,"UL",{});var K=s(Y);nb=n(K,"LI",{});var oye=s(nb);qce=n(oye,"STRONG",{});var Wtt=s(qce);i$o=r(Wtt,"albert"),Wtt.forEach(t),d$o=r(oye," \u2014 "),PD=n(oye,"A",{href:!0});var Htt=s(PD);c$o=r(Htt,"AlbertForMultipleChoice"),Htt.forEach(t),f$o=r(oye," (ALBERT model)"),oye.forEach(t),m$o=i(K),sb=n(K,"LI",{});var rye=s(sb);Nce=n(rye,"STRONG",{});var Utt=s(Nce);g$o=r(Utt,"bert"),Utt.forEach(t),h$o=r(rye," \u2014 "),ID=n(rye,"A",{href:!0});var Jtt=s(ID);p$o=r(Jtt,"BertForMultipleChoice"),Jtt.forEach(t),u$o=r(rye," (BERT model)"),rye.forEach(t),_$o=i(K),lb=n(K,"LI",{});var tye=s(lb);jce=n(tye,"STRONG",{});var Ytt=s(jce);b$o=r(Ytt,"big_bird"),Ytt.forEach(t),v$o=r(tye," \u2014 "),qD=n(tye,"A",{href:!0});var Ktt=s(qD);F$o=r(Ktt,"BigBirdForMultipleChoice"),Ktt.forEach(t),T$o=r(tye," (BigBird model)"),tye.forEach(t),M$o=i(K),ib=n(K,"LI",{});var aye=s(ib);Dce=n(aye,"STRONG",{});var Ztt=s(Dce);E$o=r(Ztt,"camembert"),Ztt.forEach(t),C$o=r(aye," \u2014 "),ND=n(aye,"A",{href:!0});var eat=s(ND);w$o=r(eat,"CamembertForMultipleChoice"),eat.forEach(t),A$o=r(aye," (CamemBERT model)"),aye.forEach(t),y$o=i(K),db=n(K,"LI",{});var nye=s(db);Gce=n(nye,"STRONG",{});var oat=s(Gce);L$o=r(oat,"canine"),oat.forEach(t),x$o=r(nye," \u2014 "),jD=n(nye,"A",{href:!0});var rat=s(jD);$$o=r(rat,"CanineForMultipleChoice"),rat.forEach(t),k$o=r(nye," (Canine model)"),nye.forEach(t),S$o=i(K),cb=n(K,"LI",{});var sye=s(cb);Oce=n(sye,"STRONG",{});var tat=s(Oce);R$o=r(tat,"convbert"),tat.forEach(t),B$o=r(sye," \u2014 "),DD=n(sye,"A",{href:!0});var aat=s(DD);P$o=r(aat,"ConvBertForMultipleChoice"),aat.forEach(t),I$o=r(sye," (ConvBERT model)"),sye.forEach(t),q$o=i(K),fb=n(K,"LI",{});var lye=s(fb);Vce=n(lye,"STRONG",{});var nat=s(Vce);N$o=r(nat,"data2vec-text"),nat.forEach(t),j$o=r(lye," \u2014 "),GD=n(lye,"A",{href:!0});var sat=s(GD);D$o=r(sat,"Data2VecTextForMultipleChoice"),sat.forEach(t),G$o=r(lye," (Data2VecText model)"),lye.forEach(t),O$o=i(K),mb=n(K,"LI",{});var iye=s(mb);Xce=n(iye,"STRONG",{});var lat=s(Xce);V$o=r(lat,"distilbert"),lat.forEach(t),X$o=r(iye," \u2014 "),OD=n(iye,"A",{href:!0});var iat=s(OD);z$o=r(iat,"DistilBertForMultipleChoice"),iat.forEach(t),Q$o=r(iye," (DistilBERT model)"),iye.forEach(t),W$o=i(K),gb=n(K,"LI",{});var dye=s(gb);zce=n(dye,"STRONG",{});var dat=s(zce);H$o=r(dat,"electra"),dat.forEach(t),U$o=r(dye," \u2014 "),VD=n(dye,"A",{href:!0});var cat=s(VD);J$o=r(cat,"ElectraForMultipleChoice"),cat.forEach(t),Y$o=r(dye," (ELECTRA model)"),dye.forEach(t),K$o=i(K),hb=n(K,"LI",{});var cye=s(hb);Qce=n(cye,"STRONG",{});var fat=s(Qce);Z$o=r(fat,"flaubert"),fat.forEach(t),eko=r(cye," \u2014 "),XD=n(cye,"A",{href:!0});var mat=s(XD);oko=r(mat,"FlaubertForMultipleChoice"),mat.forEach(t),rko=r(cye," (FlauBERT model)"),cye.forEach(t),tko=i(K),pb=n(K,"LI",{});var fye=s(pb);Wce=n(fye,"STRONG",{});var gat=s(Wce);ako=r(gat,"fnet"),gat.forEach(t),nko=r(fye," \u2014 "),zD=n(fye,"A",{href:!0});var hat=s(zD);sko=r(hat,"FNetForMultipleChoice"),hat.forEach(t),lko=r(fye," (FNet model)"),fye.forEach(t),iko=i(K),ub=n(K,"LI",{});var mye=s(ub);Hce=n(mye,"STRONG",{});var pat=s(Hce);dko=r(pat,"funnel"),pat.forEach(t),cko=r(mye," \u2014 "),QD=n(mye,"A",{href:!0});var uat=s(QD);fko=r(uat,"FunnelForMultipleChoice"),uat.forEach(t),mko=r(mye," (Funnel Transformer model)"),mye.forEach(t),gko=i(K),_b=n(K,"LI",{});var gye=s(_b);Uce=n(gye,"STRONG",{});var _at=s(Uce);hko=r(_at,"ibert"),_at.forEach(t),pko=r(gye," \u2014 "),WD=n(gye,"A",{href:!0});var bat=s(WD);uko=r(bat,"IBertForMultipleChoice"),bat.forEach(t),_ko=r(gye," (I-BERT model)"),gye.forEach(t),bko=i(K),bb=n(K,"LI",{});var hye=s(bb);Jce=n(hye,"STRONG",{});var vat=s(Jce);vko=r(vat,"longformer"),vat.forEach(t),Fko=r(hye," \u2014 "),HD=n(hye,"A",{href:!0});var Fat=s(HD);Tko=r(Fat,"LongformerForMultipleChoice"),Fat.forEach(t),Mko=r(hye," (Longformer model)"),hye.forEach(t),Eko=i(K),vb=n(K,"LI",{});var pye=s(vb);Yce=n(pye,"STRONG",{});var Tat=s(Yce);Cko=r(Tat,"megatron-bert"),Tat.forEach(t),wko=r(pye," \u2014 "),UD=n(pye,"A",{href:!0});var Mat=s(UD);Ako=r(Mat,"MegatronBertForMultipleChoice"),Mat.forEach(t),yko=r(pye," (MegatronBert model)"),pye.forEach(t),Lko=i(K),Fb=n(K,"LI",{});var uye=s(Fb);Kce=n(uye,"STRONG",{});var Eat=s(Kce);xko=r(Eat,"mobilebert"),Eat.forEach(t),$ko=r(uye," \u2014 "),JD=n(uye,"A",{href:!0});var Cat=s(JD);kko=r(Cat,"MobileBertForMultipleChoice"),Cat.forEach(t),Sko=r(uye," (MobileBERT model)"),uye.forEach(t),Rko=i(K),Tb=n(K,"LI",{});var _ye=s(Tb);Zce=n(_ye,"STRONG",{});var wat=s(Zce);Bko=r(wat,"mpnet"),wat.forEach(t),Pko=r(_ye," \u2014 "),YD=n(_ye,"A",{href:!0});var Aat=s(YD);Iko=r(Aat,"MPNetForMultipleChoice"),Aat.forEach(t),qko=r(_ye," (MPNet model)"),_ye.forEach(t),Nko=i(K),Mb=n(K,"LI",{});var bye=s(Mb);efe=n(bye,"STRONG",{});var yat=s(efe);jko=r(yat,"nystromformer"),yat.forEach(t),Dko=r(bye," \u2014 "),KD=n(bye,"A",{href:!0});var Lat=s(KD);Gko=r(Lat,"NystromformerForMultipleChoice"),Lat.forEach(t),Oko=r(bye," (Nystromformer model)"),bye.forEach(t),Vko=i(K),Eb=n(K,"LI",{});var vye=s(Eb);ofe=n(vye,"STRONG",{});var xat=s(ofe);Xko=r(xat,"qdqbert"),xat.forEach(t),zko=r(vye," \u2014 "),ZD=n(vye,"A",{href:!0});var $at=s(ZD);Qko=r($at,"QDQBertForMultipleChoice"),$at.forEach(t),Wko=r(vye," (QDQBert model)"),vye.forEach(t),Hko=i(K),Cb=n(K,"LI",{});var Fye=s(Cb);rfe=n(Fye,"STRONG",{});var kat=s(rfe);Uko=r(kat,"rembert"),kat.forEach(t),Jko=r(Fye," \u2014 "),eG=n(Fye,"A",{href:!0});var Sat=s(eG);Yko=r(Sat,"RemBertForMultipleChoice"),Sat.forEach(t),Kko=r(Fye," (RemBERT model)"),Fye.forEach(t),Zko=i(K),wb=n(K,"LI",{});var Tye=s(wb);tfe=n(Tye,"STRONG",{});var Rat=s(tfe);eSo=r(Rat,"roberta"),Rat.forEach(t),oSo=r(Tye," \u2014 "),oG=n(Tye,"A",{href:!0});var Bat=s(oG);rSo=r(Bat,"RobertaForMultipleChoice"),Bat.forEach(t),tSo=r(Tye," (RoBERTa model)"),Tye.forEach(t),aSo=i(K),Ab=n(K,"LI",{});var Mye=s(Ab);afe=n(Mye,"STRONG",{});var Pat=s(afe);nSo=r(Pat,"roformer"),Pat.forEach(t),sSo=r(Mye," \u2014 "),rG=n(Mye,"A",{href:!0});var Iat=s(rG);lSo=r(Iat,"RoFormerForMultipleChoice"),Iat.forEach(t),iSo=r(Mye," (RoFormer model)"),Mye.forEach(t),dSo=i(K),yb=n(K,"LI",{});var Eye=s(yb);nfe=n(Eye,"STRONG",{});var qat=s(nfe);cSo=r(qat,"squeezebert"),qat.forEach(t),fSo=r(Eye," \u2014 "),tG=n(Eye,"A",{href:!0});var Nat=s(tG);mSo=r(Nat,"SqueezeBertForMultipleChoice"),Nat.forEach(t),gSo=r(Eye," (SqueezeBERT model)"),Eye.forEach(t),hSo=i(K),Lb=n(K,"LI",{});var Cye=s(Lb);sfe=n(Cye,"STRONG",{});var jat=s(sfe);pSo=r(jat,"xlm"),jat.forEach(t),uSo=r(Cye," \u2014 "),aG=n(Cye,"A",{href:!0});var Dat=s(aG);_So=r(Dat,"XLMForMultipleChoice"),Dat.forEach(t),bSo=r(Cye," (XLM model)"),Cye.forEach(t),vSo=i(K),xb=n(K,"LI",{});var wye=s(xb);lfe=n(wye,"STRONG",{});var Gat=s(lfe);FSo=r(Gat,"xlm-roberta"),Gat.forEach(t),TSo=r(wye," \u2014 "),nG=n(wye,"A",{href:!0});var Oat=s(nG);MSo=r(Oat,"XLMRobertaForMultipleChoice"),Oat.forEach(t),ESo=r(wye," (XLM-RoBERTa model)"),wye.forEach(t),CSo=i(K),$b=n(K,"LI",{});var Aye=s($b);ife=n(Aye,"STRONG",{});var Vat=s(ife);wSo=r(Vat,"xlm-roberta-xl"),Vat.forEach(t),ASo=r(Aye," \u2014 "),sG=n(Aye,"A",{href:!0});var Xat=s(sG);ySo=r(Xat,"XLMRobertaXLForMultipleChoice"),Xat.forEach(t),LSo=r(Aye," (XLM-RoBERTa-XL model)"),Aye.forEach(t),xSo=i(K),kb=n(K,"LI",{});var yye=s(kb);dfe=n(yye,"STRONG",{});var zat=s(dfe);$So=r(zat,"xlnet"),zat.forEach(t),kSo=r(yye," \u2014 "),lG=n(yye,"A",{href:!0});var Qat=s(lG);SSo=r(Qat,"XLNetForMultipleChoice"),Qat.forEach(t),RSo=r(yye," (XLNet model)"),yye.forEach(t),BSo=i(K),Sb=n(K,"LI",{});var Lye=s(Sb);cfe=n(Lye,"STRONG",{});var Wat=s(cfe);PSo=r(Wat,"yoso"),Wat.forEach(t),ISo=r(Lye," \u2014 "),iG=n(Lye,"A",{href:!0});var Hat=s(iG);qSo=r(Hat,"YosoForMultipleChoice"),Hat.forEach(t),NSo=r(Lye," (YOSO model)"),Lye.forEach(t),K.forEach(t),jSo=i(ra),Rb=n(ra,"P",{});var xye=s(Rb);DSo=r(xye,"The model is set in evaluation mode by default using "),ffe=n(xye,"CODE",{});var Uat=s(ffe);GSo=r(Uat,"model.eval()"),Uat.forEach(t),OSo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mfe=n(xye,"CODE",{});var Jat=s(mfe);VSo=r(Jat,"model.train()"),Jat.forEach(t),xye.forEach(t),XSo=i(ra),T(Bb.$$.fragment,ra),ra.forEach(t),Os.forEach(t),FPe=i(f),qi=n(f,"H2",{class:!0});var Mqe=s(qi);Pb=n(Mqe,"A",{id:!0,class:!0,href:!0});var Yat=s(Pb);gfe=n(Yat,"SPAN",{});var Kat=s(gfe);T(jA.$$.fragment,Kat),Kat.forEach(t),Yat.forEach(t),zSo=i(Mqe),hfe=n(Mqe,"SPAN",{});var Zat=s(hfe);QSo=r(Zat,"AutoModelForNextSentencePrediction"),Zat.forEach(t),Mqe.forEach(t),TPe=i(f),Po=n(f,"DIV",{class:!0});var Vs=s(Po);T(DA.$$.fragment,Vs),WSo=i(Vs),Ni=n(Vs,"P",{});var WY=s(Ni);HSo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),dG=n(WY,"A",{href:!0});var ent=s(dG);USo=r(ent,"from_pretrained()"),ent.forEach(t),JSo=r(WY," class method or the "),cG=n(WY,"A",{href:!0});var ont=s(cG);YSo=r(ont,"from_config()"),ont.forEach(t),KSo=r(WY,` class
method.`),WY.forEach(t),ZSo=i(Vs),GA=n(Vs,"P",{});var Eqe=s(GA);eRo=r(Eqe,"This class cannot be instantiated directly using "),pfe=n(Eqe,"CODE",{});var rnt=s(pfe);oRo=r(rnt,"__init__()"),rnt.forEach(t),rRo=r(Eqe," (throws an error)."),Eqe.forEach(t),tRo=i(Vs),st=n(Vs,"DIV",{class:!0});var YC=s(st);T(OA.$$.fragment,YC),aRo=i(YC),ufe=n(YC,"P",{});var tnt=s(ufe);nRo=r(tnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tnt.forEach(t),sRo=i(YC),ji=n(YC,"P",{});var HY=s(ji);lRo=r(HY,`Note:
Loading a model from its configuration file does `),_fe=n(HY,"STRONG",{});var ant=s(_fe);iRo=r(ant,"not"),ant.forEach(t),dRo=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fG=n(HY,"A",{href:!0});var nnt=s(fG);cRo=r(nnt,"from_pretrained()"),nnt.forEach(t),fRo=r(HY," to load the model weights."),HY.forEach(t),mRo=i(YC),T(Ib.$$.fragment,YC),YC.forEach(t),gRo=i(Vs),oo=n(Vs,"DIV",{class:!0});var ta=s(oo);T(VA.$$.fragment,ta),hRo=i(ta),bfe=n(ta,"P",{});var snt=s(bfe);pRo=r(snt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),snt.forEach(t),uRo=i(ta),$a=n(ta,"P",{});var KC=s($a);_Ro=r(KC,"The model class to instantiate is selected based on the "),vfe=n(KC,"CODE",{});var lnt=s(vfe);bRo=r(lnt,"model_type"),lnt.forEach(t),vRo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Ffe=n(KC,"CODE",{});var int=s(Ffe);FRo=r(int,"pretrained_model_name_or_path"),int.forEach(t),TRo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tfe=n(KC,"CODE",{});var dnt=s(Tfe);MRo=r(dnt,"pretrained_model_name_or_path"),dnt.forEach(t),ERo=r(KC,":"),KC.forEach(t),CRo=i(ta),Ur=n(ta,"UL",{});var Xs=s(Ur);qb=n(Xs,"LI",{});var $ye=s(qb);Mfe=n($ye,"STRONG",{});var cnt=s(Mfe);wRo=r(cnt,"bert"),cnt.forEach(t),ARo=r($ye," \u2014 "),mG=n($ye,"A",{href:!0});var fnt=s(mG);yRo=r(fnt,"BertForNextSentencePrediction"),fnt.forEach(t),LRo=r($ye," (BERT model)"),$ye.forEach(t),xRo=i(Xs),Nb=n(Xs,"LI",{});var kye=s(Nb);Efe=n(kye,"STRONG",{});var mnt=s(Efe);$Ro=r(mnt,"fnet"),mnt.forEach(t),kRo=r(kye," \u2014 "),gG=n(kye,"A",{href:!0});var gnt=s(gG);SRo=r(gnt,"FNetForNextSentencePrediction"),gnt.forEach(t),RRo=r(kye," (FNet model)"),kye.forEach(t),BRo=i(Xs),jb=n(Xs,"LI",{});var Sye=s(jb);Cfe=n(Sye,"STRONG",{});var hnt=s(Cfe);PRo=r(hnt,"megatron-bert"),hnt.forEach(t),IRo=r(Sye," \u2014 "),hG=n(Sye,"A",{href:!0});var pnt=s(hG);qRo=r(pnt,"MegatronBertForNextSentencePrediction"),pnt.forEach(t),NRo=r(Sye," (MegatronBert model)"),Sye.forEach(t),jRo=i(Xs),Db=n(Xs,"LI",{});var Rye=s(Db);wfe=n(Rye,"STRONG",{});var unt=s(wfe);DRo=r(unt,"mobilebert"),unt.forEach(t),GRo=r(Rye," \u2014 "),pG=n(Rye,"A",{href:!0});var _nt=s(pG);ORo=r(_nt,"MobileBertForNextSentencePrediction"),_nt.forEach(t),VRo=r(Rye," (MobileBERT model)"),Rye.forEach(t),XRo=i(Xs),Gb=n(Xs,"LI",{});var Bye=s(Gb);Afe=n(Bye,"STRONG",{});var bnt=s(Afe);zRo=r(bnt,"qdqbert"),bnt.forEach(t),QRo=r(Bye," \u2014 "),uG=n(Bye,"A",{href:!0});var vnt=s(uG);WRo=r(vnt,"QDQBertForNextSentencePrediction"),vnt.forEach(t),HRo=r(Bye," (QDQBert model)"),Bye.forEach(t),Xs.forEach(t),URo=i(ta),Ob=n(ta,"P",{});var Pye=s(Ob);JRo=r(Pye,"The model is set in evaluation mode by default using "),yfe=n(Pye,"CODE",{});var Fnt=s(yfe);YRo=r(Fnt,"model.eval()"),Fnt.forEach(t),KRo=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lfe=n(Pye,"CODE",{});var Tnt=s(Lfe);ZRo=r(Tnt,"model.train()"),Tnt.forEach(t),Pye.forEach(t),eBo=i(ta),T(Vb.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),MPe=i(f),Di=n(f,"H2",{class:!0});var Cqe=s(Di);Xb=n(Cqe,"A",{id:!0,class:!0,href:!0});var Mnt=s(Xb);xfe=n(Mnt,"SPAN",{});var Ent=s(xfe);T(XA.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),oBo=i(Cqe),$fe=n(Cqe,"SPAN",{});var Cnt=s($fe);rBo=r(Cnt,"AutoModelForTokenClassification"),Cnt.forEach(t),Cqe.forEach(t),EPe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(zA.$$.fragment,zs),tBo=i(zs),Gi=n(zs,"P",{});var UY=s(Gi);aBo=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_G=n(UY,"A",{href:!0});var wnt=s(_G);nBo=r(wnt,"from_pretrained()"),wnt.forEach(t),sBo=r(UY," class method or the "),bG=n(UY,"A",{href:!0});var Ant=s(bG);lBo=r(Ant,"from_config()"),Ant.forEach(t),iBo=r(UY,` class
method.`),UY.forEach(t),dBo=i(zs),QA=n(zs,"P",{});var wqe=s(QA);cBo=r(wqe,"This class cannot be instantiated directly using "),kfe=n(wqe,"CODE",{});var ynt=s(kfe);fBo=r(ynt,"__init__()"),ynt.forEach(t),mBo=r(wqe," (throws an error)."),wqe.forEach(t),gBo=i(zs),lt=n(zs,"DIV",{class:!0});var ZC=s(lt);T(WA.$$.fragment,ZC),hBo=i(ZC),Sfe=n(ZC,"P",{});var Lnt=s(Sfe);pBo=r(Lnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Lnt.forEach(t),uBo=i(ZC),Oi=n(ZC,"P",{});var JY=s(Oi);_Bo=r(JY,`Note:
Loading a model from its configuration file does `),Rfe=n(JY,"STRONG",{});var xnt=s(Rfe);bBo=r(xnt,"not"),xnt.forEach(t),vBo=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),vG=n(JY,"A",{href:!0});var $nt=s(vG);FBo=r($nt,"from_pretrained()"),$nt.forEach(t),TBo=r(JY," to load the model weights."),JY.forEach(t),MBo=i(ZC),T(zb.$$.fragment,ZC),ZC.forEach(t),EBo=i(zs),ro=n(zs,"DIV",{class:!0});var aa=s(ro);T(HA.$$.fragment,aa),CBo=i(aa),Bfe=n(aa,"P",{});var knt=s(Bfe);wBo=r(knt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),knt.forEach(t),ABo=i(aa),ka=n(aa,"P",{});var e3=s(ka);yBo=r(e3,"The model class to instantiate is selected based on the "),Pfe=n(e3,"CODE",{});var Snt=s(Pfe);LBo=r(Snt,"model_type"),Snt.forEach(t),xBo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Ife=n(e3,"CODE",{});var Rnt=s(Ife);$Bo=r(Rnt,"pretrained_model_name_or_path"),Rnt.forEach(t),kBo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qfe=n(e3,"CODE",{});var Bnt=s(qfe);SBo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),RBo=r(e3,":"),e3.forEach(t),BBo=i(aa),U=n(aa,"UL",{});var J=s(U);Qb=n(J,"LI",{});var Iye=s(Qb);Nfe=n(Iye,"STRONG",{});var Pnt=s(Nfe);PBo=r(Pnt,"albert"),Pnt.forEach(t),IBo=r(Iye," \u2014 "),FG=n(Iye,"A",{href:!0});var Int=s(FG);qBo=r(Int,"AlbertForTokenClassification"),Int.forEach(t),NBo=r(Iye," (ALBERT model)"),Iye.forEach(t),jBo=i(J),Wb=n(J,"LI",{});var qye=s(Wb);jfe=n(qye,"STRONG",{});var qnt=s(jfe);DBo=r(qnt,"bert"),qnt.forEach(t),GBo=r(qye," \u2014 "),TG=n(qye,"A",{href:!0});var Nnt=s(TG);OBo=r(Nnt,"BertForTokenClassification"),Nnt.forEach(t),VBo=r(qye," (BERT model)"),qye.forEach(t),XBo=i(J),Hb=n(J,"LI",{});var Nye=s(Hb);Dfe=n(Nye,"STRONG",{});var jnt=s(Dfe);zBo=r(jnt,"big_bird"),jnt.forEach(t),QBo=r(Nye," \u2014 "),MG=n(Nye,"A",{href:!0});var Dnt=s(MG);WBo=r(Dnt,"BigBirdForTokenClassification"),Dnt.forEach(t),HBo=r(Nye," (BigBird model)"),Nye.forEach(t),UBo=i(J),Ub=n(J,"LI",{});var jye=s(Ub);Gfe=n(jye,"STRONG",{});var Gnt=s(Gfe);JBo=r(Gnt,"camembert"),Gnt.forEach(t),YBo=r(jye," \u2014 "),EG=n(jye,"A",{href:!0});var Ont=s(EG);KBo=r(Ont,"CamembertForTokenClassification"),Ont.forEach(t),ZBo=r(jye," (CamemBERT model)"),jye.forEach(t),ePo=i(J),Jb=n(J,"LI",{});var Dye=s(Jb);Ofe=n(Dye,"STRONG",{});var Vnt=s(Ofe);oPo=r(Vnt,"canine"),Vnt.forEach(t),rPo=r(Dye," \u2014 "),CG=n(Dye,"A",{href:!0});var Xnt=s(CG);tPo=r(Xnt,"CanineForTokenClassification"),Xnt.forEach(t),aPo=r(Dye," (Canine model)"),Dye.forEach(t),nPo=i(J),Yb=n(J,"LI",{});var Gye=s(Yb);Vfe=n(Gye,"STRONG",{});var znt=s(Vfe);sPo=r(znt,"convbert"),znt.forEach(t),lPo=r(Gye," \u2014 "),wG=n(Gye,"A",{href:!0});var Qnt=s(wG);iPo=r(Qnt,"ConvBertForTokenClassification"),Qnt.forEach(t),dPo=r(Gye," (ConvBERT model)"),Gye.forEach(t),cPo=i(J),Kb=n(J,"LI",{});var Oye=s(Kb);Xfe=n(Oye,"STRONG",{});var Wnt=s(Xfe);fPo=r(Wnt,"data2vec-text"),Wnt.forEach(t),mPo=r(Oye," \u2014 "),AG=n(Oye,"A",{href:!0});var Hnt=s(AG);gPo=r(Hnt,"Data2VecTextForTokenClassification"),Hnt.forEach(t),hPo=r(Oye," (Data2VecText model)"),Oye.forEach(t),pPo=i(J),Zb=n(J,"LI",{});var Vye=s(Zb);zfe=n(Vye,"STRONG",{});var Unt=s(zfe);uPo=r(Unt,"deberta"),Unt.forEach(t),_Po=r(Vye," \u2014 "),yG=n(Vye,"A",{href:!0});var Jnt=s(yG);bPo=r(Jnt,"DebertaForTokenClassification"),Jnt.forEach(t),vPo=r(Vye," (DeBERTa model)"),Vye.forEach(t),FPo=i(J),ev=n(J,"LI",{});var Xye=s(ev);Qfe=n(Xye,"STRONG",{});var Ynt=s(Qfe);TPo=r(Ynt,"deberta-v2"),Ynt.forEach(t),MPo=r(Xye," \u2014 "),LG=n(Xye,"A",{href:!0});var Knt=s(LG);EPo=r(Knt,"DebertaV2ForTokenClassification"),Knt.forEach(t),CPo=r(Xye," (DeBERTa-v2 model)"),Xye.forEach(t),wPo=i(J),ov=n(J,"LI",{});var zye=s(ov);Wfe=n(zye,"STRONG",{});var Znt=s(Wfe);APo=r(Znt,"distilbert"),Znt.forEach(t),yPo=r(zye," \u2014 "),xG=n(zye,"A",{href:!0});var est=s(xG);LPo=r(est,"DistilBertForTokenClassification"),est.forEach(t),xPo=r(zye," (DistilBERT model)"),zye.forEach(t),$Po=i(J),rv=n(J,"LI",{});var Qye=s(rv);Hfe=n(Qye,"STRONG",{});var ost=s(Hfe);kPo=r(ost,"electra"),ost.forEach(t),SPo=r(Qye," \u2014 "),$G=n(Qye,"A",{href:!0});var rst=s($G);RPo=r(rst,"ElectraForTokenClassification"),rst.forEach(t),BPo=r(Qye," (ELECTRA model)"),Qye.forEach(t),PPo=i(J),tv=n(J,"LI",{});var Wye=s(tv);Ufe=n(Wye,"STRONG",{});var tst=s(Ufe);IPo=r(tst,"flaubert"),tst.forEach(t),qPo=r(Wye," \u2014 "),kG=n(Wye,"A",{href:!0});var ast=s(kG);NPo=r(ast,"FlaubertForTokenClassification"),ast.forEach(t),jPo=r(Wye," (FlauBERT model)"),Wye.forEach(t),DPo=i(J),av=n(J,"LI",{});var Hye=s(av);Jfe=n(Hye,"STRONG",{});var nst=s(Jfe);GPo=r(nst,"fnet"),nst.forEach(t),OPo=r(Hye," \u2014 "),SG=n(Hye,"A",{href:!0});var sst=s(SG);VPo=r(sst,"FNetForTokenClassification"),sst.forEach(t),XPo=r(Hye," (FNet model)"),Hye.forEach(t),zPo=i(J),nv=n(J,"LI",{});var Uye=s(nv);Yfe=n(Uye,"STRONG",{});var lst=s(Yfe);QPo=r(lst,"funnel"),lst.forEach(t),WPo=r(Uye," \u2014 "),RG=n(Uye,"A",{href:!0});var ist=s(RG);HPo=r(ist,"FunnelForTokenClassification"),ist.forEach(t),UPo=r(Uye," (Funnel Transformer model)"),Uye.forEach(t),JPo=i(J),sv=n(J,"LI",{});var Jye=s(sv);Kfe=n(Jye,"STRONG",{});var dst=s(Kfe);YPo=r(dst,"gpt2"),dst.forEach(t),KPo=r(Jye," \u2014 "),BG=n(Jye,"A",{href:!0});var cst=s(BG);ZPo=r(cst,"GPT2ForTokenClassification"),cst.forEach(t),eIo=r(Jye," (OpenAI GPT-2 model)"),Jye.forEach(t),oIo=i(J),lv=n(J,"LI",{});var Yye=s(lv);Zfe=n(Yye,"STRONG",{});var fst=s(Zfe);rIo=r(fst,"ibert"),fst.forEach(t),tIo=r(Yye," \u2014 "),PG=n(Yye,"A",{href:!0});var mst=s(PG);aIo=r(mst,"IBertForTokenClassification"),mst.forEach(t),nIo=r(Yye," (I-BERT model)"),Yye.forEach(t),sIo=i(J),iv=n(J,"LI",{});var Kye=s(iv);eme=n(Kye,"STRONG",{});var gst=s(eme);lIo=r(gst,"layoutlm"),gst.forEach(t),iIo=r(Kye," \u2014 "),IG=n(Kye,"A",{href:!0});var hst=s(IG);dIo=r(hst,"LayoutLMForTokenClassification"),hst.forEach(t),cIo=r(Kye," (LayoutLM model)"),Kye.forEach(t),fIo=i(J),dv=n(J,"LI",{});var Zye=s(dv);ome=n(Zye,"STRONG",{});var pst=s(ome);mIo=r(pst,"layoutlmv2"),pst.forEach(t),gIo=r(Zye," \u2014 "),qG=n(Zye,"A",{href:!0});var ust=s(qG);hIo=r(ust,"LayoutLMv2ForTokenClassification"),ust.forEach(t),pIo=r(Zye," (LayoutLMv2 model)"),Zye.forEach(t),uIo=i(J),cv=n(J,"LI",{});var eLe=s(cv);rme=n(eLe,"STRONG",{});var _st=s(rme);_Io=r(_st,"longformer"),_st.forEach(t),bIo=r(eLe," \u2014 "),NG=n(eLe,"A",{href:!0});var bst=s(NG);vIo=r(bst,"LongformerForTokenClassification"),bst.forEach(t),FIo=r(eLe," (Longformer model)"),eLe.forEach(t),TIo=i(J),fv=n(J,"LI",{});var oLe=s(fv);tme=n(oLe,"STRONG",{});var vst=s(tme);MIo=r(vst,"megatron-bert"),vst.forEach(t),EIo=r(oLe," \u2014 "),jG=n(oLe,"A",{href:!0});var Fst=s(jG);CIo=r(Fst,"MegatronBertForTokenClassification"),Fst.forEach(t),wIo=r(oLe," (MegatronBert model)"),oLe.forEach(t),AIo=i(J),mv=n(J,"LI",{});var rLe=s(mv);ame=n(rLe,"STRONG",{});var Tst=s(ame);yIo=r(Tst,"mobilebert"),Tst.forEach(t),LIo=r(rLe," \u2014 "),DG=n(rLe,"A",{href:!0});var Mst=s(DG);xIo=r(Mst,"MobileBertForTokenClassification"),Mst.forEach(t),$Io=r(rLe," (MobileBERT model)"),rLe.forEach(t),kIo=i(J),gv=n(J,"LI",{});var tLe=s(gv);nme=n(tLe,"STRONG",{});var Est=s(nme);SIo=r(Est,"mpnet"),Est.forEach(t),RIo=r(tLe," \u2014 "),GG=n(tLe,"A",{href:!0});var Cst=s(GG);BIo=r(Cst,"MPNetForTokenClassification"),Cst.forEach(t),PIo=r(tLe," (MPNet model)"),tLe.forEach(t),IIo=i(J),hv=n(J,"LI",{});var aLe=s(hv);sme=n(aLe,"STRONG",{});var wst=s(sme);qIo=r(wst,"nystromformer"),wst.forEach(t),NIo=r(aLe," \u2014 "),OG=n(aLe,"A",{href:!0});var Ast=s(OG);jIo=r(Ast,"NystromformerForTokenClassification"),Ast.forEach(t),DIo=r(aLe," (Nystromformer model)"),aLe.forEach(t),GIo=i(J),pv=n(J,"LI",{});var nLe=s(pv);lme=n(nLe,"STRONG",{});var yst=s(lme);OIo=r(yst,"qdqbert"),yst.forEach(t),VIo=r(nLe," \u2014 "),VG=n(nLe,"A",{href:!0});var Lst=s(VG);XIo=r(Lst,"QDQBertForTokenClassification"),Lst.forEach(t),zIo=r(nLe," (QDQBert model)"),nLe.forEach(t),QIo=i(J),uv=n(J,"LI",{});var sLe=s(uv);ime=n(sLe,"STRONG",{});var xst=s(ime);WIo=r(xst,"rembert"),xst.forEach(t),HIo=r(sLe," \u2014 "),XG=n(sLe,"A",{href:!0});var $st=s(XG);UIo=r($st,"RemBertForTokenClassification"),$st.forEach(t),JIo=r(sLe," (RemBERT model)"),sLe.forEach(t),YIo=i(J),_v=n(J,"LI",{});var lLe=s(_v);dme=n(lLe,"STRONG",{});var kst=s(dme);KIo=r(kst,"roberta"),kst.forEach(t),ZIo=r(lLe," \u2014 "),zG=n(lLe,"A",{href:!0});var Sst=s(zG);eqo=r(Sst,"RobertaForTokenClassification"),Sst.forEach(t),oqo=r(lLe," (RoBERTa model)"),lLe.forEach(t),rqo=i(J),bv=n(J,"LI",{});var iLe=s(bv);cme=n(iLe,"STRONG",{});var Rst=s(cme);tqo=r(Rst,"roformer"),Rst.forEach(t),aqo=r(iLe," \u2014 "),QG=n(iLe,"A",{href:!0});var Bst=s(QG);nqo=r(Bst,"RoFormerForTokenClassification"),Bst.forEach(t),sqo=r(iLe," (RoFormer model)"),iLe.forEach(t),lqo=i(J),vv=n(J,"LI",{});var dLe=s(vv);fme=n(dLe,"STRONG",{});var Pst=s(fme);iqo=r(Pst,"squeezebert"),Pst.forEach(t),dqo=r(dLe," \u2014 "),WG=n(dLe,"A",{href:!0});var Ist=s(WG);cqo=r(Ist,"SqueezeBertForTokenClassification"),Ist.forEach(t),fqo=r(dLe," (SqueezeBERT model)"),dLe.forEach(t),mqo=i(J),Fv=n(J,"LI",{});var cLe=s(Fv);mme=n(cLe,"STRONG",{});var qst=s(mme);gqo=r(qst,"xlm"),qst.forEach(t),hqo=r(cLe," \u2014 "),HG=n(cLe,"A",{href:!0});var Nst=s(HG);pqo=r(Nst,"XLMForTokenClassification"),Nst.forEach(t),uqo=r(cLe," (XLM model)"),cLe.forEach(t),_qo=i(J),Tv=n(J,"LI",{});var fLe=s(Tv);gme=n(fLe,"STRONG",{});var jst=s(gme);bqo=r(jst,"xlm-roberta"),jst.forEach(t),vqo=r(fLe," \u2014 "),UG=n(fLe,"A",{href:!0});var Dst=s(UG);Fqo=r(Dst,"XLMRobertaForTokenClassification"),Dst.forEach(t),Tqo=r(fLe," (XLM-RoBERTa model)"),fLe.forEach(t),Mqo=i(J),Mv=n(J,"LI",{});var mLe=s(Mv);hme=n(mLe,"STRONG",{});var Gst=s(hme);Eqo=r(Gst,"xlm-roberta-xl"),Gst.forEach(t),Cqo=r(mLe," \u2014 "),JG=n(mLe,"A",{href:!0});var Ost=s(JG);wqo=r(Ost,"XLMRobertaXLForTokenClassification"),Ost.forEach(t),Aqo=r(mLe," (XLM-RoBERTa-XL model)"),mLe.forEach(t),yqo=i(J),Ev=n(J,"LI",{});var gLe=s(Ev);pme=n(gLe,"STRONG",{});var Vst=s(pme);Lqo=r(Vst,"xlnet"),Vst.forEach(t),xqo=r(gLe," \u2014 "),YG=n(gLe,"A",{href:!0});var Xst=s(YG);$qo=r(Xst,"XLNetForTokenClassification"),Xst.forEach(t),kqo=r(gLe," (XLNet model)"),gLe.forEach(t),Sqo=i(J),Cv=n(J,"LI",{});var hLe=s(Cv);ume=n(hLe,"STRONG",{});var zst=s(ume);Rqo=r(zst,"yoso"),zst.forEach(t),Bqo=r(hLe," \u2014 "),KG=n(hLe,"A",{href:!0});var Qst=s(KG);Pqo=r(Qst,"YosoForTokenClassification"),Qst.forEach(t),Iqo=r(hLe," (YOSO model)"),hLe.forEach(t),J.forEach(t),qqo=i(aa),wv=n(aa,"P",{});var pLe=s(wv);Nqo=r(pLe,"The model is set in evaluation mode by default using "),_me=n(pLe,"CODE",{});var Wst=s(_me);jqo=r(Wst,"model.eval()"),Wst.forEach(t),Dqo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bme=n(pLe,"CODE",{});var Hst=s(bme);Gqo=r(Hst,"model.train()"),Hst.forEach(t),pLe.forEach(t),Oqo=i(aa),T(Av.$$.fragment,aa),aa.forEach(t),zs.forEach(t),CPe=i(f),Vi=n(f,"H2",{class:!0});var Aqe=s(Vi);yv=n(Aqe,"A",{id:!0,class:!0,href:!0});var Ust=s(yv);vme=n(Ust,"SPAN",{});var Jst=s(vme);T(UA.$$.fragment,Jst),Jst.forEach(t),Ust.forEach(t),Vqo=i(Aqe),Fme=n(Aqe,"SPAN",{});var Yst=s(Fme);Xqo=r(Yst,"AutoModelForQuestionAnswering"),Yst.forEach(t),Aqe.forEach(t),wPe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(JA.$$.fragment,Qs),zqo=i(Qs),Xi=n(Qs,"P",{});var YY=s(Xi);Qqo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZG=n(YY,"A",{href:!0});var Kst=s(ZG);Wqo=r(Kst,"from_pretrained()"),Kst.forEach(t),Hqo=r(YY," class method or the "),eO=n(YY,"A",{href:!0});var Zst=s(eO);Uqo=r(Zst,"from_config()"),Zst.forEach(t),Jqo=r(YY,` class
method.`),YY.forEach(t),Yqo=i(Qs),YA=n(Qs,"P",{});var yqe=s(YA);Kqo=r(yqe,"This class cannot be instantiated directly using "),Tme=n(yqe,"CODE",{});var elt=s(Tme);Zqo=r(elt,"__init__()"),elt.forEach(t),eNo=r(yqe," (throws an error)."),yqe.forEach(t),oNo=i(Qs),it=n(Qs,"DIV",{class:!0});var o3=s(it);T(KA.$$.fragment,o3),rNo=i(o3),Mme=n(o3,"P",{});var olt=s(Mme);tNo=r(olt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),olt.forEach(t),aNo=i(o3),zi=n(o3,"P",{});var KY=s(zi);nNo=r(KY,`Note:
Loading a model from its configuration file does `),Eme=n(KY,"STRONG",{});var rlt=s(Eme);sNo=r(rlt,"not"),rlt.forEach(t),lNo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oO=n(KY,"A",{href:!0});var tlt=s(oO);iNo=r(tlt,"from_pretrained()"),tlt.forEach(t),dNo=r(KY," to load the model weights."),KY.forEach(t),cNo=i(o3),T(Lv.$$.fragment,o3),o3.forEach(t),fNo=i(Qs),to=n(Qs,"DIV",{class:!0});var na=s(to);T(ZA.$$.fragment,na),mNo=i(na),Cme=n(na,"P",{});var alt=s(Cme);gNo=r(alt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),alt.forEach(t),hNo=i(na),Sa=n(na,"P",{});var r3=s(Sa);pNo=r(r3,"The model class to instantiate is selected based on the "),wme=n(r3,"CODE",{});var nlt=s(wme);uNo=r(nlt,"model_type"),nlt.forEach(t),_No=r(r3,` property of the config object (either
passed as an argument or loaded from `),Ame=n(r3,"CODE",{});var slt=s(Ame);bNo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),vNo=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(r3,"CODE",{});var llt=s(yme);FNo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),TNo=r(r3,":"),r3.forEach(t),MNo=i(na),O=n(na,"UL",{});var X=s(O);xv=n(X,"LI",{});var uLe=s(xv);Lme=n(uLe,"STRONG",{});var ilt=s(Lme);ENo=r(ilt,"albert"),ilt.forEach(t),CNo=r(uLe," \u2014 "),rO=n(uLe,"A",{href:!0});var dlt=s(rO);wNo=r(dlt,"AlbertForQuestionAnswering"),dlt.forEach(t),ANo=r(uLe," (ALBERT model)"),uLe.forEach(t),yNo=i(X),$v=n(X,"LI",{});var _Le=s($v);xme=n(_Le,"STRONG",{});var clt=s(xme);LNo=r(clt,"bart"),clt.forEach(t),xNo=r(_Le," \u2014 "),tO=n(_Le,"A",{href:!0});var flt=s(tO);$No=r(flt,"BartForQuestionAnswering"),flt.forEach(t),kNo=r(_Le," (BART model)"),_Le.forEach(t),SNo=i(X),kv=n(X,"LI",{});var bLe=s(kv);$me=n(bLe,"STRONG",{});var mlt=s($me);RNo=r(mlt,"bert"),mlt.forEach(t),BNo=r(bLe," \u2014 "),aO=n(bLe,"A",{href:!0});var glt=s(aO);PNo=r(glt,"BertForQuestionAnswering"),glt.forEach(t),INo=r(bLe," (BERT model)"),bLe.forEach(t),qNo=i(X),Sv=n(X,"LI",{});var vLe=s(Sv);kme=n(vLe,"STRONG",{});var hlt=s(kme);NNo=r(hlt,"big_bird"),hlt.forEach(t),jNo=r(vLe," \u2014 "),nO=n(vLe,"A",{href:!0});var plt=s(nO);DNo=r(plt,"BigBirdForQuestionAnswering"),plt.forEach(t),GNo=r(vLe," (BigBird model)"),vLe.forEach(t),ONo=i(X),Rv=n(X,"LI",{});var FLe=s(Rv);Sme=n(FLe,"STRONG",{});var ult=s(Sme);VNo=r(ult,"bigbird_pegasus"),ult.forEach(t),XNo=r(FLe," \u2014 "),sO=n(FLe,"A",{href:!0});var _lt=s(sO);zNo=r(_lt,"BigBirdPegasusForQuestionAnswering"),_lt.forEach(t),QNo=r(FLe," (BigBirdPegasus model)"),FLe.forEach(t),WNo=i(X),Bv=n(X,"LI",{});var TLe=s(Bv);Rme=n(TLe,"STRONG",{});var blt=s(Rme);HNo=r(blt,"camembert"),blt.forEach(t),UNo=r(TLe," \u2014 "),lO=n(TLe,"A",{href:!0});var vlt=s(lO);JNo=r(vlt,"CamembertForQuestionAnswering"),vlt.forEach(t),YNo=r(TLe," (CamemBERT model)"),TLe.forEach(t),KNo=i(X),Pv=n(X,"LI",{});var MLe=s(Pv);Bme=n(MLe,"STRONG",{});var Flt=s(Bme);ZNo=r(Flt,"canine"),Flt.forEach(t),ejo=r(MLe," \u2014 "),iO=n(MLe,"A",{href:!0});var Tlt=s(iO);ojo=r(Tlt,"CanineForQuestionAnswering"),Tlt.forEach(t),rjo=r(MLe," (Canine model)"),MLe.forEach(t),tjo=i(X),Iv=n(X,"LI",{});var ELe=s(Iv);Pme=n(ELe,"STRONG",{});var Mlt=s(Pme);ajo=r(Mlt,"convbert"),Mlt.forEach(t),njo=r(ELe," \u2014 "),dO=n(ELe,"A",{href:!0});var Elt=s(dO);sjo=r(Elt,"ConvBertForQuestionAnswering"),Elt.forEach(t),ljo=r(ELe," (ConvBERT model)"),ELe.forEach(t),ijo=i(X),qv=n(X,"LI",{});var CLe=s(qv);Ime=n(CLe,"STRONG",{});var Clt=s(Ime);djo=r(Clt,"data2vec-text"),Clt.forEach(t),cjo=r(CLe," \u2014 "),cO=n(CLe,"A",{href:!0});var wlt=s(cO);fjo=r(wlt,"Data2VecTextForQuestionAnswering"),wlt.forEach(t),mjo=r(CLe," (Data2VecText model)"),CLe.forEach(t),gjo=i(X),Nv=n(X,"LI",{});var wLe=s(Nv);qme=n(wLe,"STRONG",{});var Alt=s(qme);hjo=r(Alt,"deberta"),Alt.forEach(t),pjo=r(wLe," \u2014 "),fO=n(wLe,"A",{href:!0});var ylt=s(fO);ujo=r(ylt,"DebertaForQuestionAnswering"),ylt.forEach(t),_jo=r(wLe," (DeBERTa model)"),wLe.forEach(t),bjo=i(X),jv=n(X,"LI",{});var ALe=s(jv);Nme=n(ALe,"STRONG",{});var Llt=s(Nme);vjo=r(Llt,"deberta-v2"),Llt.forEach(t),Fjo=r(ALe," \u2014 "),mO=n(ALe,"A",{href:!0});var xlt=s(mO);Tjo=r(xlt,"DebertaV2ForQuestionAnswering"),xlt.forEach(t),Mjo=r(ALe," (DeBERTa-v2 model)"),ALe.forEach(t),Ejo=i(X),Dv=n(X,"LI",{});var yLe=s(Dv);jme=n(yLe,"STRONG",{});var $lt=s(jme);Cjo=r($lt,"distilbert"),$lt.forEach(t),wjo=r(yLe," \u2014 "),gO=n(yLe,"A",{href:!0});var klt=s(gO);Ajo=r(klt,"DistilBertForQuestionAnswering"),klt.forEach(t),yjo=r(yLe," (DistilBERT model)"),yLe.forEach(t),Ljo=i(X),Gv=n(X,"LI",{});var LLe=s(Gv);Dme=n(LLe,"STRONG",{});var Slt=s(Dme);xjo=r(Slt,"electra"),Slt.forEach(t),$jo=r(LLe," \u2014 "),hO=n(LLe,"A",{href:!0});var Rlt=s(hO);kjo=r(Rlt,"ElectraForQuestionAnswering"),Rlt.forEach(t),Sjo=r(LLe," (ELECTRA model)"),LLe.forEach(t),Rjo=i(X),Ov=n(X,"LI",{});var xLe=s(Ov);Gme=n(xLe,"STRONG",{});var Blt=s(Gme);Bjo=r(Blt,"flaubert"),Blt.forEach(t),Pjo=r(xLe," \u2014 "),pO=n(xLe,"A",{href:!0});var Plt=s(pO);Ijo=r(Plt,"FlaubertForQuestionAnsweringSimple"),Plt.forEach(t),qjo=r(xLe," (FlauBERT model)"),xLe.forEach(t),Njo=i(X),Vv=n(X,"LI",{});var $Le=s(Vv);Ome=n($Le,"STRONG",{});var Ilt=s(Ome);jjo=r(Ilt,"fnet"),Ilt.forEach(t),Djo=r($Le," \u2014 "),uO=n($Le,"A",{href:!0});var qlt=s(uO);Gjo=r(qlt,"FNetForQuestionAnswering"),qlt.forEach(t),Ojo=r($Le," (FNet model)"),$Le.forEach(t),Vjo=i(X),Xv=n(X,"LI",{});var kLe=s(Xv);Vme=n(kLe,"STRONG",{});var Nlt=s(Vme);Xjo=r(Nlt,"funnel"),Nlt.forEach(t),zjo=r(kLe," \u2014 "),_O=n(kLe,"A",{href:!0});var jlt=s(_O);Qjo=r(jlt,"FunnelForQuestionAnswering"),jlt.forEach(t),Wjo=r(kLe," (Funnel Transformer model)"),kLe.forEach(t),Hjo=i(X),zv=n(X,"LI",{});var SLe=s(zv);Xme=n(SLe,"STRONG",{});var Dlt=s(Xme);Ujo=r(Dlt,"gptj"),Dlt.forEach(t),Jjo=r(SLe," \u2014 "),bO=n(SLe,"A",{href:!0});var Glt=s(bO);Yjo=r(Glt,"GPTJForQuestionAnswering"),Glt.forEach(t),Kjo=r(SLe," (GPT-J model)"),SLe.forEach(t),Zjo=i(X),Qv=n(X,"LI",{});var RLe=s(Qv);zme=n(RLe,"STRONG",{});var Olt=s(zme);eDo=r(Olt,"ibert"),Olt.forEach(t),oDo=r(RLe," \u2014 "),vO=n(RLe,"A",{href:!0});var Vlt=s(vO);rDo=r(Vlt,"IBertForQuestionAnswering"),Vlt.forEach(t),tDo=r(RLe," (I-BERT model)"),RLe.forEach(t),aDo=i(X),Wv=n(X,"LI",{});var BLe=s(Wv);Qme=n(BLe,"STRONG",{});var Xlt=s(Qme);nDo=r(Xlt,"layoutlmv2"),Xlt.forEach(t),sDo=r(BLe," \u2014 "),FO=n(BLe,"A",{href:!0});var zlt=s(FO);lDo=r(zlt,"LayoutLMv2ForQuestionAnswering"),zlt.forEach(t),iDo=r(BLe," (LayoutLMv2 model)"),BLe.forEach(t),dDo=i(X),Hv=n(X,"LI",{});var PLe=s(Hv);Wme=n(PLe,"STRONG",{});var Qlt=s(Wme);cDo=r(Qlt,"led"),Qlt.forEach(t),fDo=r(PLe," \u2014 "),TO=n(PLe,"A",{href:!0});var Wlt=s(TO);mDo=r(Wlt,"LEDForQuestionAnswering"),Wlt.forEach(t),gDo=r(PLe," (LED model)"),PLe.forEach(t),hDo=i(X),Uv=n(X,"LI",{});var ILe=s(Uv);Hme=n(ILe,"STRONG",{});var Hlt=s(Hme);pDo=r(Hlt,"longformer"),Hlt.forEach(t),uDo=r(ILe," \u2014 "),MO=n(ILe,"A",{href:!0});var Ult=s(MO);_Do=r(Ult,"LongformerForQuestionAnswering"),Ult.forEach(t),bDo=r(ILe," (Longformer model)"),ILe.forEach(t),vDo=i(X),Jv=n(X,"LI",{});var qLe=s(Jv);Ume=n(qLe,"STRONG",{});var Jlt=s(Ume);FDo=r(Jlt,"lxmert"),Jlt.forEach(t),TDo=r(qLe," \u2014 "),EO=n(qLe,"A",{href:!0});var Ylt=s(EO);MDo=r(Ylt,"LxmertForQuestionAnswering"),Ylt.forEach(t),EDo=r(qLe," (LXMERT model)"),qLe.forEach(t),CDo=i(X),Yv=n(X,"LI",{});var NLe=s(Yv);Jme=n(NLe,"STRONG",{});var Klt=s(Jme);wDo=r(Klt,"mbart"),Klt.forEach(t),ADo=r(NLe," \u2014 "),CO=n(NLe,"A",{href:!0});var Zlt=s(CO);yDo=r(Zlt,"MBartForQuestionAnswering"),Zlt.forEach(t),LDo=r(NLe," (mBART model)"),NLe.forEach(t),xDo=i(X),Kv=n(X,"LI",{});var jLe=s(Kv);Yme=n(jLe,"STRONG",{});var eit=s(Yme);$Do=r(eit,"megatron-bert"),eit.forEach(t),kDo=r(jLe," \u2014 "),wO=n(jLe,"A",{href:!0});var oit=s(wO);SDo=r(oit,"MegatronBertForQuestionAnswering"),oit.forEach(t),RDo=r(jLe," (MegatronBert model)"),jLe.forEach(t),BDo=i(X),Zv=n(X,"LI",{});var DLe=s(Zv);Kme=n(DLe,"STRONG",{});var rit=s(Kme);PDo=r(rit,"mobilebert"),rit.forEach(t),IDo=r(DLe," \u2014 "),AO=n(DLe,"A",{href:!0});var tit=s(AO);qDo=r(tit,"MobileBertForQuestionAnswering"),tit.forEach(t),NDo=r(DLe," (MobileBERT model)"),DLe.forEach(t),jDo=i(X),eF=n(X,"LI",{});var GLe=s(eF);Zme=n(GLe,"STRONG",{});var ait=s(Zme);DDo=r(ait,"mpnet"),ait.forEach(t),GDo=r(GLe," \u2014 "),yO=n(GLe,"A",{href:!0});var nit=s(yO);ODo=r(nit,"MPNetForQuestionAnswering"),nit.forEach(t),VDo=r(GLe," (MPNet model)"),GLe.forEach(t),XDo=i(X),oF=n(X,"LI",{});var OLe=s(oF);ege=n(OLe,"STRONG",{});var sit=s(ege);zDo=r(sit,"nystromformer"),sit.forEach(t),QDo=r(OLe," \u2014 "),LO=n(OLe,"A",{href:!0});var lit=s(LO);WDo=r(lit,"NystromformerForQuestionAnswering"),lit.forEach(t),HDo=r(OLe," (Nystromformer model)"),OLe.forEach(t),UDo=i(X),rF=n(X,"LI",{});var VLe=s(rF);oge=n(VLe,"STRONG",{});var iit=s(oge);JDo=r(iit,"qdqbert"),iit.forEach(t),YDo=r(VLe," \u2014 "),xO=n(VLe,"A",{href:!0});var dit=s(xO);KDo=r(dit,"QDQBertForQuestionAnswering"),dit.forEach(t),ZDo=r(VLe," (QDQBert model)"),VLe.forEach(t),eGo=i(X),tF=n(X,"LI",{});var XLe=s(tF);rge=n(XLe,"STRONG",{});var cit=s(rge);oGo=r(cit,"reformer"),cit.forEach(t),rGo=r(XLe," \u2014 "),$O=n(XLe,"A",{href:!0});var fit=s($O);tGo=r(fit,"ReformerForQuestionAnswering"),fit.forEach(t),aGo=r(XLe," (Reformer model)"),XLe.forEach(t),nGo=i(X),aF=n(X,"LI",{});var zLe=s(aF);tge=n(zLe,"STRONG",{});var mit=s(tge);sGo=r(mit,"rembert"),mit.forEach(t),lGo=r(zLe," \u2014 "),kO=n(zLe,"A",{href:!0});var git=s(kO);iGo=r(git,"RemBertForQuestionAnswering"),git.forEach(t),dGo=r(zLe," (RemBERT model)"),zLe.forEach(t),cGo=i(X),nF=n(X,"LI",{});var QLe=s(nF);age=n(QLe,"STRONG",{});var hit=s(age);fGo=r(hit,"roberta"),hit.forEach(t),mGo=r(QLe," \u2014 "),SO=n(QLe,"A",{href:!0});var pit=s(SO);gGo=r(pit,"RobertaForQuestionAnswering"),pit.forEach(t),hGo=r(QLe," (RoBERTa model)"),QLe.forEach(t),pGo=i(X),sF=n(X,"LI",{});var WLe=s(sF);nge=n(WLe,"STRONG",{});var uit=s(nge);uGo=r(uit,"roformer"),uit.forEach(t),_Go=r(WLe," \u2014 "),RO=n(WLe,"A",{href:!0});var _it=s(RO);bGo=r(_it,"RoFormerForQuestionAnswering"),_it.forEach(t),vGo=r(WLe," (RoFormer model)"),WLe.forEach(t),FGo=i(X),lF=n(X,"LI",{});var HLe=s(lF);sge=n(HLe,"STRONG",{});var bit=s(sge);TGo=r(bit,"splinter"),bit.forEach(t),MGo=r(HLe," \u2014 "),BO=n(HLe,"A",{href:!0});var vit=s(BO);EGo=r(vit,"SplinterForQuestionAnswering"),vit.forEach(t),CGo=r(HLe," (Splinter model)"),HLe.forEach(t),wGo=i(X),iF=n(X,"LI",{});var ULe=s(iF);lge=n(ULe,"STRONG",{});var Fit=s(lge);AGo=r(Fit,"squeezebert"),Fit.forEach(t),yGo=r(ULe," \u2014 "),PO=n(ULe,"A",{href:!0});var Tit=s(PO);LGo=r(Tit,"SqueezeBertForQuestionAnswering"),Tit.forEach(t),xGo=r(ULe," (SqueezeBERT model)"),ULe.forEach(t),$Go=i(X),dF=n(X,"LI",{});var JLe=s(dF);ige=n(JLe,"STRONG",{});var Mit=s(ige);kGo=r(Mit,"xlm"),Mit.forEach(t),SGo=r(JLe," \u2014 "),IO=n(JLe,"A",{href:!0});var Eit=s(IO);RGo=r(Eit,"XLMForQuestionAnsweringSimple"),Eit.forEach(t),BGo=r(JLe," (XLM model)"),JLe.forEach(t),PGo=i(X),cF=n(X,"LI",{});var YLe=s(cF);dge=n(YLe,"STRONG",{});var Cit=s(dge);IGo=r(Cit,"xlm-roberta"),Cit.forEach(t),qGo=r(YLe," \u2014 "),qO=n(YLe,"A",{href:!0});var wit=s(qO);NGo=r(wit,"XLMRobertaForQuestionAnswering"),wit.forEach(t),jGo=r(YLe," (XLM-RoBERTa model)"),YLe.forEach(t),DGo=i(X),fF=n(X,"LI",{});var KLe=s(fF);cge=n(KLe,"STRONG",{});var Ait=s(cge);GGo=r(Ait,"xlm-roberta-xl"),Ait.forEach(t),OGo=r(KLe," \u2014 "),NO=n(KLe,"A",{href:!0});var yit=s(NO);VGo=r(yit,"XLMRobertaXLForQuestionAnswering"),yit.forEach(t),XGo=r(KLe," (XLM-RoBERTa-XL model)"),KLe.forEach(t),zGo=i(X),mF=n(X,"LI",{});var ZLe=s(mF);fge=n(ZLe,"STRONG",{});var Lit=s(fge);QGo=r(Lit,"xlnet"),Lit.forEach(t),WGo=r(ZLe," \u2014 "),jO=n(ZLe,"A",{href:!0});var xit=s(jO);HGo=r(xit,"XLNetForQuestionAnsweringSimple"),xit.forEach(t),UGo=r(ZLe," (XLNet model)"),ZLe.forEach(t),JGo=i(X),gF=n(X,"LI",{});var e8e=s(gF);mge=n(e8e,"STRONG",{});var $it=s(mge);YGo=r($it,"yoso"),$it.forEach(t),KGo=r(e8e," \u2014 "),DO=n(e8e,"A",{href:!0});var kit=s(DO);ZGo=r(kit,"YosoForQuestionAnswering"),kit.forEach(t),eOo=r(e8e," (YOSO model)"),e8e.forEach(t),X.forEach(t),oOo=i(na),hF=n(na,"P",{});var o8e=s(hF);rOo=r(o8e,"The model is set in evaluation mode by default using "),gge=n(o8e,"CODE",{});var Sit=s(gge);tOo=r(Sit,"model.eval()"),Sit.forEach(t),aOo=r(o8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(o8e,"CODE",{});var Rit=s(hge);nOo=r(Rit,"model.train()"),Rit.forEach(t),o8e.forEach(t),sOo=i(na),T(pF.$$.fragment,na),na.forEach(t),Qs.forEach(t),APe=i(f),Qi=n(f,"H2",{class:!0});var Lqe=s(Qi);uF=n(Lqe,"A",{id:!0,class:!0,href:!0});var Bit=s(uF);pge=n(Bit,"SPAN",{});var Pit=s(pge);T(e0.$$.fragment,Pit),Pit.forEach(t),Bit.forEach(t),lOo=i(Lqe),uge=n(Lqe,"SPAN",{});var Iit=s(uge);iOo=r(Iit,"AutoModelForTableQuestionAnswering"),Iit.forEach(t),Lqe.forEach(t),yPe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(o0.$$.fragment,Ws),dOo=i(Ws),Wi=n(Ws,"P",{});var ZY=s(Wi);cOo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),GO=n(ZY,"A",{href:!0});var qit=s(GO);fOo=r(qit,"from_pretrained()"),qit.forEach(t),mOo=r(ZY," class method or the "),OO=n(ZY,"A",{href:!0});var Nit=s(OO);gOo=r(Nit,"from_config()"),Nit.forEach(t),hOo=r(ZY,` class
method.`),ZY.forEach(t),pOo=i(Ws),r0=n(Ws,"P",{});var xqe=s(r0);uOo=r(xqe,"This class cannot be instantiated directly using "),_ge=n(xqe,"CODE",{});var jit=s(_ge);_Oo=r(jit,"__init__()"),jit.forEach(t),bOo=r(xqe," (throws an error)."),xqe.forEach(t),vOo=i(Ws),dt=n(Ws,"DIV",{class:!0});var t3=s(dt);T(t0.$$.fragment,t3),FOo=i(t3),bge=n(t3,"P",{});var Dit=s(bge);TOo=r(Dit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Dit.forEach(t),MOo=i(t3),Hi=n(t3,"P",{});var eK=s(Hi);EOo=r(eK,`Note:
Loading a model from its configuration file does `),vge=n(eK,"STRONG",{});var Git=s(vge);COo=r(Git,"not"),Git.forEach(t),wOo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(eK,"A",{href:!0});var Oit=s(VO);AOo=r(Oit,"from_pretrained()"),Oit.forEach(t),yOo=r(eK," to load the model weights."),eK.forEach(t),LOo=i(t3),T(_F.$$.fragment,t3),t3.forEach(t),xOo=i(Ws),ao=n(Ws,"DIV",{class:!0});var sa=s(ao);T(a0.$$.fragment,sa),$Oo=i(sa),Fge=n(sa,"P",{});var Vit=s(Fge);kOo=r(Vit,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Vit.forEach(t),SOo=i(sa),Ra=n(sa,"P",{});var a3=s(Ra);ROo=r(a3,"The model class to instantiate is selected based on the "),Tge=n(a3,"CODE",{});var Xit=s(Tge);BOo=r(Xit,"model_type"),Xit.forEach(t),POo=r(a3,` property of the config object (either
passed as an argument or loaded from `),Mge=n(a3,"CODE",{});var zit=s(Mge);IOo=r(zit,"pretrained_model_name_or_path"),zit.forEach(t),qOo=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(a3,"CODE",{});var Qit=s(Ege);NOo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),jOo=r(a3,":"),a3.forEach(t),DOo=i(sa),Cge=n(sa,"UL",{});var Wit=s(Cge);bF=n(Wit,"LI",{});var r8e=s(bF);wge=n(r8e,"STRONG",{});var Hit=s(wge);GOo=r(Hit,"tapas"),Hit.forEach(t),OOo=r(r8e," \u2014 "),XO=n(r8e,"A",{href:!0});var Uit=s(XO);VOo=r(Uit,"TapasForQuestionAnswering"),Uit.forEach(t),XOo=r(r8e," (TAPAS model)"),r8e.forEach(t),Wit.forEach(t),zOo=i(sa),vF=n(sa,"P",{});var t8e=s(vF);QOo=r(t8e,"The model is set in evaluation mode by default using "),Age=n(t8e,"CODE",{});var Jit=s(Age);WOo=r(Jit,"model.eval()"),Jit.forEach(t),HOo=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yge=n(t8e,"CODE",{});var Yit=s(yge);UOo=r(Yit,"model.train()"),Yit.forEach(t),t8e.forEach(t),JOo=i(sa),T(FF.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),LPe=i(f),Ui=n(f,"H2",{class:!0});var $qe=s(Ui);TF=n($qe,"A",{id:!0,class:!0,href:!0});var Kit=s(TF);Lge=n(Kit,"SPAN",{});var Zit=s(Lge);T(n0.$$.fragment,Zit),Zit.forEach(t),Kit.forEach(t),YOo=i($qe),xge=n($qe,"SPAN",{});var edt=s(xge);KOo=r(edt,"AutoModelForImageClassification"),edt.forEach(t),$qe.forEach(t),xPe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(s0.$$.fragment,Hs),ZOo=i(Hs),Ji=n(Hs,"P",{});var oK=s(Ji);eVo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zO=n(oK,"A",{href:!0});var odt=s(zO);oVo=r(odt,"from_pretrained()"),odt.forEach(t),rVo=r(oK," class method or the "),QO=n(oK,"A",{href:!0});var rdt=s(QO);tVo=r(rdt,"from_config()"),rdt.forEach(t),aVo=r(oK,` class
method.`),oK.forEach(t),nVo=i(Hs),l0=n(Hs,"P",{});var kqe=s(l0);sVo=r(kqe,"This class cannot be instantiated directly using "),$ge=n(kqe,"CODE",{});var tdt=s($ge);lVo=r(tdt,"__init__()"),tdt.forEach(t),iVo=r(kqe," (throws an error)."),kqe.forEach(t),dVo=i(Hs),ct=n(Hs,"DIV",{class:!0});var n3=s(ct);T(i0.$$.fragment,n3),cVo=i(n3),kge=n(n3,"P",{});var adt=s(kge);fVo=r(adt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),adt.forEach(t),mVo=i(n3),Yi=n(n3,"P",{});var rK=s(Yi);gVo=r(rK,`Note:
Loading a model from its configuration file does `),Sge=n(rK,"STRONG",{});var ndt=s(Sge);hVo=r(ndt,"not"),ndt.forEach(t),pVo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(rK,"A",{href:!0});var sdt=s(WO);uVo=r(sdt,"from_pretrained()"),sdt.forEach(t),_Vo=r(rK," to load the model weights."),rK.forEach(t),bVo=i(n3),T(MF.$$.fragment,n3),n3.forEach(t),vVo=i(Hs),no=n(Hs,"DIV",{class:!0});var la=s(no);T(d0.$$.fragment,la),FVo=i(la),Rge=n(la,"P",{});var ldt=s(Rge);TVo=r(ldt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),ldt.forEach(t),MVo=i(la),Ba=n(la,"P",{});var s3=s(Ba);EVo=r(s3,"The model class to instantiate is selected based on the "),Bge=n(s3,"CODE",{});var idt=s(Bge);CVo=r(idt,"model_type"),idt.forEach(t),wVo=r(s3,` property of the config object (either
passed as an argument or loaded from `),Pge=n(s3,"CODE",{});var ddt=s(Pge);AVo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),yVo=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ige=n(s3,"CODE",{});var cdt=s(Ige);LVo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),xVo=r(s3,":"),s3.forEach(t),$Vo=i(la),ve=n(la,"UL",{});var Ee=s(ve);EF=n(Ee,"LI",{});var a8e=s(EF);qge=n(a8e,"STRONG",{});var fdt=s(qge);kVo=r(fdt,"beit"),fdt.forEach(t),SVo=r(a8e," \u2014 "),HO=n(a8e,"A",{href:!0});var mdt=s(HO);RVo=r(mdt,"BeitForImageClassification"),mdt.forEach(t),BVo=r(a8e," (BEiT model)"),a8e.forEach(t),PVo=i(Ee),CF=n(Ee,"LI",{});var n8e=s(CF);Nge=n(n8e,"STRONG",{});var gdt=s(Nge);IVo=r(gdt,"convnext"),gdt.forEach(t),qVo=r(n8e," \u2014 "),UO=n(n8e,"A",{href:!0});var hdt=s(UO);NVo=r(hdt,"ConvNextForImageClassification"),hdt.forEach(t),jVo=r(n8e," (ConvNext model)"),n8e.forEach(t),DVo=i(Ee),wF=n(Ee,"LI",{});var s8e=s(wF);jge=n(s8e,"STRONG",{});var pdt=s(jge);GVo=r(pdt,"data2vec-vision"),pdt.forEach(t),OVo=r(s8e," \u2014 "),JO=n(s8e,"A",{href:!0});var udt=s(JO);VVo=r(udt,"Data2VecVisionForImageClassification"),udt.forEach(t),XVo=r(s8e," (Data2VecVision model)"),s8e.forEach(t),zVo=i(Ee),$s=n(Ee,"LI",{});var Ox=s($s);Dge=n(Ox,"STRONG",{});var _dt=s(Dge);QVo=r(_dt,"deit"),_dt.forEach(t),WVo=r(Ox," \u2014 "),YO=n(Ox,"A",{href:!0});var bdt=s(YO);HVo=r(bdt,"DeiTForImageClassification"),bdt.forEach(t),UVo=r(Ox," or "),KO=n(Ox,"A",{href:!0});var vdt=s(KO);JVo=r(vdt,"DeiTForImageClassificationWithTeacher"),vdt.forEach(t),YVo=r(Ox," (DeiT model)"),Ox.forEach(t),KVo=i(Ee),AF=n(Ee,"LI",{});var l8e=s(AF);Gge=n(l8e,"STRONG",{});var Fdt=s(Gge);ZVo=r(Fdt,"imagegpt"),Fdt.forEach(t),eXo=r(l8e," \u2014 "),ZO=n(l8e,"A",{href:!0});var Tdt=s(ZO);oXo=r(Tdt,"ImageGPTForImageClassification"),Tdt.forEach(t),rXo=r(l8e," (ImageGPT model)"),l8e.forEach(t),tXo=i(Ee),ft=n(Ee,"LI",{});var rf=s(ft);Oge=n(rf,"STRONG",{});var Mdt=s(Oge);aXo=r(Mdt,"perceiver"),Mdt.forEach(t),nXo=r(rf," \u2014 "),eV=n(rf,"A",{href:!0});var Edt=s(eV);sXo=r(Edt,"PerceiverForImageClassificationLearned"),Edt.forEach(t),lXo=r(rf," or "),oV=n(rf,"A",{href:!0});var Cdt=s(oV);iXo=r(Cdt,"PerceiverForImageClassificationFourier"),Cdt.forEach(t),dXo=r(rf," or "),rV=n(rf,"A",{href:!0});var wdt=s(rV);cXo=r(wdt,"PerceiverForImageClassificationConvProcessing"),wdt.forEach(t),fXo=r(rf," (Perceiver model)"),rf.forEach(t),mXo=i(Ee),yF=n(Ee,"LI",{});var i8e=s(yF);Vge=n(i8e,"STRONG",{});var Adt=s(Vge);gXo=r(Adt,"poolformer"),Adt.forEach(t),hXo=r(i8e," \u2014 "),tV=n(i8e,"A",{href:!0});var ydt=s(tV);pXo=r(ydt,"PoolFormerForImageClassification"),ydt.forEach(t),uXo=r(i8e," (PoolFormer model)"),i8e.forEach(t),_Xo=i(Ee),LF=n(Ee,"LI",{});var d8e=s(LF);Xge=n(d8e,"STRONG",{});var Ldt=s(Xge);bXo=r(Ldt,"regnet"),Ldt.forEach(t),vXo=r(d8e," \u2014 "),aV=n(d8e,"A",{href:!0});var xdt=s(aV);FXo=r(xdt,"RegNetForImageClassification"),xdt.forEach(t),TXo=r(d8e," (RegNet model)"),d8e.forEach(t),MXo=i(Ee),xF=n(Ee,"LI",{});var c8e=s(xF);zge=n(c8e,"STRONG",{});var $dt=s(zge);EXo=r($dt,"resnet"),$dt.forEach(t),CXo=r(c8e," \u2014 "),nV=n(c8e,"A",{href:!0});var kdt=s(nV);wXo=r(kdt,"ResNetForImageClassification"),kdt.forEach(t),AXo=r(c8e," (ResNet model)"),c8e.forEach(t),yXo=i(Ee),$F=n(Ee,"LI",{});var f8e=s($F);Qge=n(f8e,"STRONG",{});var Sdt=s(Qge);LXo=r(Sdt,"segformer"),Sdt.forEach(t),xXo=r(f8e," \u2014 "),sV=n(f8e,"A",{href:!0});var Rdt=s(sV);$Xo=r(Rdt,"SegformerForImageClassification"),Rdt.forEach(t),kXo=r(f8e," (SegFormer model)"),f8e.forEach(t),SXo=i(Ee),kF=n(Ee,"LI",{});var m8e=s(kF);Wge=n(m8e,"STRONG",{});var Bdt=s(Wge);RXo=r(Bdt,"swin"),Bdt.forEach(t),BXo=r(m8e," \u2014 "),lV=n(m8e,"A",{href:!0});var Pdt=s(lV);PXo=r(Pdt,"SwinForImageClassification"),Pdt.forEach(t),IXo=r(m8e," (Swin model)"),m8e.forEach(t),qXo=i(Ee),SF=n(Ee,"LI",{});var g8e=s(SF);Hge=n(g8e,"STRONG",{});var Idt=s(Hge);NXo=r(Idt,"van"),Idt.forEach(t),jXo=r(g8e," \u2014 "),iV=n(g8e,"A",{href:!0});var qdt=s(iV);DXo=r(qdt,"VanForImageClassification"),qdt.forEach(t),GXo=r(g8e," (VAN model)"),g8e.forEach(t),OXo=i(Ee),RF=n(Ee,"LI",{});var h8e=s(RF);Uge=n(h8e,"STRONG",{});var Ndt=s(Uge);VXo=r(Ndt,"vit"),Ndt.forEach(t),XXo=r(h8e," \u2014 "),dV=n(h8e,"A",{href:!0});var jdt=s(dV);zXo=r(jdt,"ViTForImageClassification"),jdt.forEach(t),QXo=r(h8e," (ViT model)"),h8e.forEach(t),Ee.forEach(t),WXo=i(la),BF=n(la,"P",{});var p8e=s(BF);HXo=r(p8e,"The model is set in evaluation mode by default using "),Jge=n(p8e,"CODE",{});var Ddt=s(Jge);UXo=r(Ddt,"model.eval()"),Ddt.forEach(t),JXo=r(p8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(p8e,"CODE",{});var Gdt=s(Yge);YXo=r(Gdt,"model.train()"),Gdt.forEach(t),p8e.forEach(t),KXo=i(la),T(PF.$$.fragment,la),la.forEach(t),Hs.forEach(t),$Pe=i(f),Ki=n(f,"H2",{class:!0});var Sqe=s(Ki);IF=n(Sqe,"A",{id:!0,class:!0,href:!0});var Odt=s(IF);Kge=n(Odt,"SPAN",{});var Vdt=s(Kge);T(c0.$$.fragment,Vdt),Vdt.forEach(t),Odt.forEach(t),ZXo=i(Sqe),Zge=n(Sqe,"SPAN",{});var Xdt=s(Zge);ezo=r(Xdt,"AutoModelForVision2Seq"),Xdt.forEach(t),Sqe.forEach(t),kPe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(f0.$$.fragment,Us),ozo=i(Us),Zi=n(Us,"P",{});var tK=s(Zi);rzo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cV=n(tK,"A",{href:!0});var zdt=s(cV);tzo=r(zdt,"from_pretrained()"),zdt.forEach(t),azo=r(tK," class method or the "),fV=n(tK,"A",{href:!0});var Qdt=s(fV);nzo=r(Qdt,"from_config()"),Qdt.forEach(t),szo=r(tK,` class
method.`),tK.forEach(t),lzo=i(Us),m0=n(Us,"P",{});var Rqe=s(m0);izo=r(Rqe,"This class cannot be instantiated directly using "),ehe=n(Rqe,"CODE",{});var Wdt=s(ehe);dzo=r(Wdt,"__init__()"),Wdt.forEach(t),czo=r(Rqe," (throws an error)."),Rqe.forEach(t),fzo=i(Us),mt=n(Us,"DIV",{class:!0});var l3=s(mt);T(g0.$$.fragment,l3),mzo=i(l3),ohe=n(l3,"P",{});var Hdt=s(ohe);gzo=r(Hdt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hdt.forEach(t),hzo=i(l3),ed=n(l3,"P",{});var aK=s(ed);pzo=r(aK,`Note:
Loading a model from its configuration file does `),rhe=n(aK,"STRONG",{});var Udt=s(rhe);uzo=r(Udt,"not"),Udt.forEach(t),_zo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),mV=n(aK,"A",{href:!0});var Jdt=s(mV);bzo=r(Jdt,"from_pretrained()"),Jdt.forEach(t),vzo=r(aK," to load the model weights."),aK.forEach(t),Fzo=i(l3),T(qF.$$.fragment,l3),l3.forEach(t),Tzo=i(Us),so=n(Us,"DIV",{class:!0});var ia=s(so);T(h0.$$.fragment,ia),Mzo=i(ia),the=n(ia,"P",{});var Ydt=s(the);Ezo=r(Ydt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ydt.forEach(t),Czo=i(ia),Pa=n(ia,"P",{});var i3=s(Pa);wzo=r(i3,"The model class to instantiate is selected based on the "),ahe=n(i3,"CODE",{});var Kdt=s(ahe);Azo=r(Kdt,"model_type"),Kdt.forEach(t),yzo=r(i3,` property of the config object (either
passed as an argument or loaded from `),nhe=n(i3,"CODE",{});var Zdt=s(nhe);Lzo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),xzo=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),she=n(i3,"CODE",{});var ect=s(she);$zo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),kzo=r(i3,":"),i3.forEach(t),Szo=i(ia),lhe=n(ia,"UL",{});var oct=s(lhe);NF=n(oct,"LI",{});var u8e=s(NF);ihe=n(u8e,"STRONG",{});var rct=s(ihe);Rzo=r(rct,"vision-encoder-decoder"),rct.forEach(t),Bzo=r(u8e," \u2014 "),gV=n(u8e,"A",{href:!0});var tct=s(gV);Pzo=r(tct,"VisionEncoderDecoderModel"),tct.forEach(t),Izo=r(u8e," (Vision Encoder decoder model)"),u8e.forEach(t),oct.forEach(t),qzo=i(ia),jF=n(ia,"P",{});var _8e=s(jF);Nzo=r(_8e,"The model is set in evaluation mode by default using "),dhe=n(_8e,"CODE",{});var act=s(dhe);jzo=r(act,"model.eval()"),act.forEach(t),Dzo=r(_8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),che=n(_8e,"CODE",{});var nct=s(che);Gzo=r(nct,"model.train()"),nct.forEach(t),_8e.forEach(t),Ozo=i(ia),T(DF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),SPe=i(f),od=n(f,"H2",{class:!0});var Bqe=s(od);GF=n(Bqe,"A",{id:!0,class:!0,href:!0});var sct=s(GF);fhe=n(sct,"SPAN",{});var lct=s(fhe);T(p0.$$.fragment,lct),lct.forEach(t),sct.forEach(t),Vzo=i(Bqe),mhe=n(Bqe,"SPAN",{});var ict=s(mhe);Xzo=r(ict,"AutoModelForAudioClassification"),ict.forEach(t),Bqe.forEach(t),RPe=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(u0.$$.fragment,Js),zzo=i(Js),rd=n(Js,"P",{});var nK=s(rd);Qzo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hV=n(nK,"A",{href:!0});var dct=s(hV);Wzo=r(dct,"from_pretrained()"),dct.forEach(t),Hzo=r(nK," class method or the "),pV=n(nK,"A",{href:!0});var cct=s(pV);Uzo=r(cct,"from_config()"),cct.forEach(t),Jzo=r(nK,` class
method.`),nK.forEach(t),Yzo=i(Js),_0=n(Js,"P",{});var Pqe=s(_0);Kzo=r(Pqe,"This class cannot be instantiated directly using "),ghe=n(Pqe,"CODE",{});var fct=s(ghe);Zzo=r(fct,"__init__()"),fct.forEach(t),eQo=r(Pqe," (throws an error)."),Pqe.forEach(t),oQo=i(Js),gt=n(Js,"DIV",{class:!0});var d3=s(gt);T(b0.$$.fragment,d3),rQo=i(d3),hhe=n(d3,"P",{});var mct=s(hhe);tQo=r(mct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),mct.forEach(t),aQo=i(d3),td=n(d3,"P",{});var sK=s(td);nQo=r(sK,`Note:
Loading a model from its configuration file does `),phe=n(sK,"STRONG",{});var gct=s(phe);sQo=r(gct,"not"),gct.forEach(t),lQo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(sK,"A",{href:!0});var hct=s(uV);iQo=r(hct,"from_pretrained()"),hct.forEach(t),dQo=r(sK," to load the model weights."),sK.forEach(t),cQo=i(d3),T(OF.$$.fragment,d3),d3.forEach(t),fQo=i(Js),lo=n(Js,"DIV",{class:!0});var da=s(lo);T(v0.$$.fragment,da),mQo=i(da),uhe=n(da,"P",{});var pct=s(uhe);gQo=r(pct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),pct.forEach(t),hQo=i(da),Ia=n(da,"P",{});var c3=s(Ia);pQo=r(c3,"The model class to instantiate is selected based on the "),_he=n(c3,"CODE",{});var uct=s(_he);uQo=r(uct,"model_type"),uct.forEach(t),_Qo=r(c3,` property of the config object (either
passed as an argument or loaded from `),bhe=n(c3,"CODE",{});var _ct=s(bhe);bQo=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),vQo=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(c3,"CODE",{});var bct=s(vhe);FQo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),TQo=r(c3,":"),c3.forEach(t),MQo=i(da),je=n(da,"UL",{});var bo=s(je);VF=n(bo,"LI",{});var b8e=s(VF);Fhe=n(b8e,"STRONG",{});var vct=s(Fhe);EQo=r(vct,"data2vec-audio"),vct.forEach(t),CQo=r(b8e," \u2014 "),_V=n(b8e,"A",{href:!0});var Fct=s(_V);wQo=r(Fct,"Data2VecAudioForSequenceClassification"),Fct.forEach(t),AQo=r(b8e," (Data2VecAudio model)"),b8e.forEach(t),yQo=i(bo),XF=n(bo,"LI",{});var v8e=s(XF);The=n(v8e,"STRONG",{});var Tct=s(The);LQo=r(Tct,"hubert"),Tct.forEach(t),xQo=r(v8e," \u2014 "),bV=n(v8e,"A",{href:!0});var Mct=s(bV);$Qo=r(Mct,"HubertForSequenceClassification"),Mct.forEach(t),kQo=r(v8e," (Hubert model)"),v8e.forEach(t),SQo=i(bo),zF=n(bo,"LI",{});var F8e=s(zF);Mhe=n(F8e,"STRONG",{});var Ect=s(Mhe);RQo=r(Ect,"sew"),Ect.forEach(t),BQo=r(F8e," \u2014 "),vV=n(F8e,"A",{href:!0});var Cct=s(vV);PQo=r(Cct,"SEWForSequenceClassification"),Cct.forEach(t),IQo=r(F8e," (SEW model)"),F8e.forEach(t),qQo=i(bo),QF=n(bo,"LI",{});var T8e=s(QF);Ehe=n(T8e,"STRONG",{});var wct=s(Ehe);NQo=r(wct,"sew-d"),wct.forEach(t),jQo=r(T8e," \u2014 "),FV=n(T8e,"A",{href:!0});var Act=s(FV);DQo=r(Act,"SEWDForSequenceClassification"),Act.forEach(t),GQo=r(T8e," (SEW-D model)"),T8e.forEach(t),OQo=i(bo),WF=n(bo,"LI",{});var M8e=s(WF);Che=n(M8e,"STRONG",{});var yct=s(Che);VQo=r(yct,"unispeech"),yct.forEach(t),XQo=r(M8e," \u2014 "),TV=n(M8e,"A",{href:!0});var Lct=s(TV);zQo=r(Lct,"UniSpeechForSequenceClassification"),Lct.forEach(t),QQo=r(M8e," (UniSpeech model)"),M8e.forEach(t),WQo=i(bo),HF=n(bo,"LI",{});var E8e=s(HF);whe=n(E8e,"STRONG",{});var xct=s(whe);HQo=r(xct,"unispeech-sat"),xct.forEach(t),UQo=r(E8e," \u2014 "),MV=n(E8e,"A",{href:!0});var $ct=s(MV);JQo=r($ct,"UniSpeechSatForSequenceClassification"),$ct.forEach(t),YQo=r(E8e," (UniSpeechSat model)"),E8e.forEach(t),KQo=i(bo),UF=n(bo,"LI",{});var C8e=s(UF);Ahe=n(C8e,"STRONG",{});var kct=s(Ahe);ZQo=r(kct,"wav2vec2"),kct.forEach(t),eWo=r(C8e," \u2014 "),EV=n(C8e,"A",{href:!0});var Sct=s(EV);oWo=r(Sct,"Wav2Vec2ForSequenceClassification"),Sct.forEach(t),rWo=r(C8e," (Wav2Vec2 model)"),C8e.forEach(t),tWo=i(bo),JF=n(bo,"LI",{});var w8e=s(JF);yhe=n(w8e,"STRONG",{});var Rct=s(yhe);aWo=r(Rct,"wavlm"),Rct.forEach(t),nWo=r(w8e," \u2014 "),CV=n(w8e,"A",{href:!0});var Bct=s(CV);sWo=r(Bct,"WavLMForSequenceClassification"),Bct.forEach(t),lWo=r(w8e," (WavLM model)"),w8e.forEach(t),bo.forEach(t),iWo=i(da),YF=n(da,"P",{});var A8e=s(YF);dWo=r(A8e,"The model is set in evaluation mode by default using "),Lhe=n(A8e,"CODE",{});var Pct=s(Lhe);cWo=r(Pct,"model.eval()"),Pct.forEach(t),fWo=r(A8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xhe=n(A8e,"CODE",{});var Ict=s(xhe);mWo=r(Ict,"model.train()"),Ict.forEach(t),A8e.forEach(t),gWo=i(da),T(KF.$$.fragment,da),da.forEach(t),Js.forEach(t),BPe=i(f),ad=n(f,"H2",{class:!0});var Iqe=s(ad);ZF=n(Iqe,"A",{id:!0,class:!0,href:!0});var qct=s(ZF);$he=n(qct,"SPAN",{});var Nct=s($he);T(F0.$$.fragment,Nct),Nct.forEach(t),qct.forEach(t),hWo=i(Iqe),khe=n(Iqe,"SPAN",{});var jct=s(khe);pWo=r(jct,"AutoModelForAudioFrameClassification"),jct.forEach(t),Iqe.forEach(t),PPe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(T0.$$.fragment,Ys),uWo=i(Ys),nd=n(Ys,"P",{});var lK=s(nd);_Wo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),wV=n(lK,"A",{href:!0});var Dct=s(wV);bWo=r(Dct,"from_pretrained()"),Dct.forEach(t),vWo=r(lK," class method or the "),AV=n(lK,"A",{href:!0});var Gct=s(AV);FWo=r(Gct,"from_config()"),Gct.forEach(t),TWo=r(lK,` class
method.`),lK.forEach(t),MWo=i(Ys),M0=n(Ys,"P",{});var qqe=s(M0);EWo=r(qqe,"This class cannot be instantiated directly using "),She=n(qqe,"CODE",{});var Oct=s(She);CWo=r(Oct,"__init__()"),Oct.forEach(t),wWo=r(qqe," (throws an error)."),qqe.forEach(t),AWo=i(Ys),ht=n(Ys,"DIV",{class:!0});var f3=s(ht);T(E0.$$.fragment,f3),yWo=i(f3),Rhe=n(f3,"P",{});var Vct=s(Rhe);LWo=r(Vct,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Vct.forEach(t),xWo=i(f3),sd=n(f3,"P",{});var iK=s(sd);$Wo=r(iK,`Note:
Loading a model from its configuration file does `),Bhe=n(iK,"STRONG",{});var Xct=s(Bhe);kWo=r(Xct,"not"),Xct.forEach(t),SWo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n(iK,"A",{href:!0});var zct=s(yV);RWo=r(zct,"from_pretrained()"),zct.forEach(t),BWo=r(iK," to load the model weights."),iK.forEach(t),PWo=i(f3),T(e6.$$.fragment,f3),f3.forEach(t),IWo=i(Ys),io=n(Ys,"DIV",{class:!0});var ca=s(io);T(C0.$$.fragment,ca),qWo=i(ca),Phe=n(ca,"P",{});var Qct=s(Phe);NWo=r(Qct,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Qct.forEach(t),jWo=i(ca),qa=n(ca,"P",{});var m3=s(qa);DWo=r(m3,"The model class to instantiate is selected based on the "),Ihe=n(m3,"CODE",{});var Wct=s(Ihe);GWo=r(Wct,"model_type"),Wct.forEach(t),OWo=r(m3,` property of the config object (either
passed as an argument or loaded from `),qhe=n(m3,"CODE",{});var Hct=s(qhe);VWo=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),XWo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nhe=n(m3,"CODE",{});var Uct=s(Nhe);zWo=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),QWo=r(m3,":"),m3.forEach(t),WWo=i(ca),Na=n(ca,"UL",{});var g3=s(Na);o6=n(g3,"LI",{});var y8e=s(o6);jhe=n(y8e,"STRONG",{});var Jct=s(jhe);HWo=r(Jct,"data2vec-audio"),Jct.forEach(t),UWo=r(y8e," \u2014 "),LV=n(y8e,"A",{href:!0});var Yct=s(LV);JWo=r(Yct,"Data2VecAudioForAudioFrameClassification"),Yct.forEach(t),YWo=r(y8e," (Data2VecAudio model)"),y8e.forEach(t),KWo=i(g3),r6=n(g3,"LI",{});var L8e=s(r6);Dhe=n(L8e,"STRONG",{});var Kct=s(Dhe);ZWo=r(Kct,"unispeech-sat"),Kct.forEach(t),eHo=r(L8e," \u2014 "),xV=n(L8e,"A",{href:!0});var Zct=s(xV);oHo=r(Zct,"UniSpeechSatForAudioFrameClassification"),Zct.forEach(t),rHo=r(L8e," (UniSpeechSat model)"),L8e.forEach(t),tHo=i(g3),t6=n(g3,"LI",{});var x8e=s(t6);Ghe=n(x8e,"STRONG",{});var eft=s(Ghe);aHo=r(eft,"wav2vec2"),eft.forEach(t),nHo=r(x8e," \u2014 "),$V=n(x8e,"A",{href:!0});var oft=s($V);sHo=r(oft,"Wav2Vec2ForAudioFrameClassification"),oft.forEach(t),lHo=r(x8e," (Wav2Vec2 model)"),x8e.forEach(t),iHo=i(g3),a6=n(g3,"LI",{});var $8e=s(a6);Ohe=n($8e,"STRONG",{});var rft=s(Ohe);dHo=r(rft,"wavlm"),rft.forEach(t),cHo=r($8e," \u2014 "),kV=n($8e,"A",{href:!0});var tft=s(kV);fHo=r(tft,"WavLMForAudioFrameClassification"),tft.forEach(t),mHo=r($8e," (WavLM model)"),$8e.forEach(t),g3.forEach(t),gHo=i(ca),n6=n(ca,"P",{});var k8e=s(n6);hHo=r(k8e,"The model is set in evaluation mode by default using "),Vhe=n(k8e,"CODE",{});var aft=s(Vhe);pHo=r(aft,"model.eval()"),aft.forEach(t),uHo=r(k8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xhe=n(k8e,"CODE",{});var nft=s(Xhe);_Ho=r(nft,"model.train()"),nft.forEach(t),k8e.forEach(t),bHo=i(ca),T(s6.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),IPe=i(f),ld=n(f,"H2",{class:!0});var Nqe=s(ld);l6=n(Nqe,"A",{id:!0,class:!0,href:!0});var sft=s(l6);zhe=n(sft,"SPAN",{});var lft=s(zhe);T(w0.$$.fragment,lft),lft.forEach(t),sft.forEach(t),vHo=i(Nqe),Qhe=n(Nqe,"SPAN",{});var ift=s(Qhe);FHo=r(ift,"AutoModelForCTC"),ift.forEach(t),Nqe.forEach(t),qPe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(A0.$$.fragment,Ks),THo=i(Ks),id=n(Ks,"P",{});var dK=s(id);MHo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SV=n(dK,"A",{href:!0});var dft=s(SV);EHo=r(dft,"from_pretrained()"),dft.forEach(t),CHo=r(dK," class method or the "),RV=n(dK,"A",{href:!0});var cft=s(RV);wHo=r(cft,"from_config()"),cft.forEach(t),AHo=r(dK,` class
method.`),dK.forEach(t),yHo=i(Ks),y0=n(Ks,"P",{});var jqe=s(y0);LHo=r(jqe,"This class cannot be instantiated directly using "),Whe=n(jqe,"CODE",{});var fft=s(Whe);xHo=r(fft,"__init__()"),fft.forEach(t),$Ho=r(jqe," (throws an error)."),jqe.forEach(t),kHo=i(Ks),pt=n(Ks,"DIV",{class:!0});var h3=s(pt);T(L0.$$.fragment,h3),SHo=i(h3),Hhe=n(h3,"P",{});var mft=s(Hhe);RHo=r(mft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mft.forEach(t),BHo=i(h3),dd=n(h3,"P",{});var cK=s(dd);PHo=r(cK,`Note:
Loading a model from its configuration file does `),Uhe=n(cK,"STRONG",{});var gft=s(Uhe);IHo=r(gft,"not"),gft.forEach(t),qHo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(cK,"A",{href:!0});var hft=s(BV);NHo=r(hft,"from_pretrained()"),hft.forEach(t),jHo=r(cK," to load the model weights."),cK.forEach(t),DHo=i(h3),T(i6.$$.fragment,h3),h3.forEach(t),GHo=i(Ks),co=n(Ks,"DIV",{class:!0});var fa=s(co);T(x0.$$.fragment,fa),OHo=i(fa),Jhe=n(fa,"P",{});var pft=s(Jhe);VHo=r(pft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pft.forEach(t),XHo=i(fa),ja=n(fa,"P",{});var p3=s(ja);zHo=r(p3,"The model class to instantiate is selected based on the "),Yhe=n(p3,"CODE",{});var uft=s(Yhe);QHo=r(uft,"model_type"),uft.forEach(t),WHo=r(p3,` property of the config object (either
passed as an argument or loaded from `),Khe=n(p3,"CODE",{});var _ft=s(Khe);HHo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),UHo=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zhe=n(p3,"CODE",{});var bft=s(Zhe);JHo=r(bft,"pretrained_model_name_or_path"),bft.forEach(t),YHo=r(p3,":"),p3.forEach(t),KHo=i(fa),De=n(fa,"UL",{});var vo=s(De);d6=n(vo,"LI",{});var S8e=s(d6);epe=n(S8e,"STRONG",{});var vft=s(epe);ZHo=r(vft,"data2vec-audio"),vft.forEach(t),eUo=r(S8e," \u2014 "),PV=n(S8e,"A",{href:!0});var Fft=s(PV);oUo=r(Fft,"Data2VecAudioForCTC"),Fft.forEach(t),rUo=r(S8e," (Data2VecAudio model)"),S8e.forEach(t),tUo=i(vo),c6=n(vo,"LI",{});var R8e=s(c6);ope=n(R8e,"STRONG",{});var Tft=s(ope);aUo=r(Tft,"hubert"),Tft.forEach(t),nUo=r(R8e," \u2014 "),IV=n(R8e,"A",{href:!0});var Mft=s(IV);sUo=r(Mft,"HubertForCTC"),Mft.forEach(t),lUo=r(R8e," (Hubert model)"),R8e.forEach(t),iUo=i(vo),f6=n(vo,"LI",{});var B8e=s(f6);rpe=n(B8e,"STRONG",{});var Eft=s(rpe);dUo=r(Eft,"sew"),Eft.forEach(t),cUo=r(B8e," \u2014 "),qV=n(B8e,"A",{href:!0});var Cft=s(qV);fUo=r(Cft,"SEWForCTC"),Cft.forEach(t),mUo=r(B8e," (SEW model)"),B8e.forEach(t),gUo=i(vo),m6=n(vo,"LI",{});var P8e=s(m6);tpe=n(P8e,"STRONG",{});var wft=s(tpe);hUo=r(wft,"sew-d"),wft.forEach(t),pUo=r(P8e," \u2014 "),NV=n(P8e,"A",{href:!0});var Aft=s(NV);uUo=r(Aft,"SEWDForCTC"),Aft.forEach(t),_Uo=r(P8e," (SEW-D model)"),P8e.forEach(t),bUo=i(vo),g6=n(vo,"LI",{});var I8e=s(g6);ape=n(I8e,"STRONG",{});var yft=s(ape);vUo=r(yft,"unispeech"),yft.forEach(t),FUo=r(I8e," \u2014 "),jV=n(I8e,"A",{href:!0});var Lft=s(jV);TUo=r(Lft,"UniSpeechForCTC"),Lft.forEach(t),MUo=r(I8e," (UniSpeech model)"),I8e.forEach(t),EUo=i(vo),h6=n(vo,"LI",{});var q8e=s(h6);npe=n(q8e,"STRONG",{});var xft=s(npe);CUo=r(xft,"unispeech-sat"),xft.forEach(t),wUo=r(q8e," \u2014 "),DV=n(q8e,"A",{href:!0});var $ft=s(DV);AUo=r($ft,"UniSpeechSatForCTC"),$ft.forEach(t),yUo=r(q8e," (UniSpeechSat model)"),q8e.forEach(t),LUo=i(vo),p6=n(vo,"LI",{});var N8e=s(p6);spe=n(N8e,"STRONG",{});var kft=s(spe);xUo=r(kft,"wav2vec2"),kft.forEach(t),$Uo=r(N8e," \u2014 "),GV=n(N8e,"A",{href:!0});var Sft=s(GV);kUo=r(Sft,"Wav2Vec2ForCTC"),Sft.forEach(t),SUo=r(N8e," (Wav2Vec2 model)"),N8e.forEach(t),RUo=i(vo),u6=n(vo,"LI",{});var j8e=s(u6);lpe=n(j8e,"STRONG",{});var Rft=s(lpe);BUo=r(Rft,"wavlm"),Rft.forEach(t),PUo=r(j8e," \u2014 "),OV=n(j8e,"A",{href:!0});var Bft=s(OV);IUo=r(Bft,"WavLMForCTC"),Bft.forEach(t),qUo=r(j8e," (WavLM model)"),j8e.forEach(t),vo.forEach(t),NUo=i(fa),_6=n(fa,"P",{});var D8e=s(_6);jUo=r(D8e,"The model is set in evaluation mode by default using "),ipe=n(D8e,"CODE",{});var Pft=s(ipe);DUo=r(Pft,"model.eval()"),Pft.forEach(t),GUo=r(D8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dpe=n(D8e,"CODE",{});var Ift=s(dpe);OUo=r(Ift,"model.train()"),Ift.forEach(t),D8e.forEach(t),VUo=i(fa),T(b6.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),NPe=i(f),cd=n(f,"H2",{class:!0});var Dqe=s(cd);v6=n(Dqe,"A",{id:!0,class:!0,href:!0});var qft=s(v6);cpe=n(qft,"SPAN",{});var Nft=s(cpe);T($0.$$.fragment,Nft),Nft.forEach(t),qft.forEach(t),XUo=i(Dqe),fpe=n(Dqe,"SPAN",{});var jft=s(fpe);zUo=r(jft,"AutoModelForSpeechSeq2Seq"),jft.forEach(t),Dqe.forEach(t),jPe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(k0.$$.fragment,Zs),QUo=i(Zs),fd=n(Zs,"P",{});var fK=s(fd);WUo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),VV=n(fK,"A",{href:!0});var Dft=s(VV);HUo=r(Dft,"from_pretrained()"),Dft.forEach(t),UUo=r(fK," class method or the "),XV=n(fK,"A",{href:!0});var Gft=s(XV);JUo=r(Gft,"from_config()"),Gft.forEach(t),YUo=r(fK,` class
method.`),fK.forEach(t),KUo=i(Zs),S0=n(Zs,"P",{});var Gqe=s(S0);ZUo=r(Gqe,"This class cannot be instantiated directly using "),mpe=n(Gqe,"CODE",{});var Oft=s(mpe);eJo=r(Oft,"__init__()"),Oft.forEach(t),oJo=r(Gqe," (throws an error)."),Gqe.forEach(t),rJo=i(Zs),ut=n(Zs,"DIV",{class:!0});var u3=s(ut);T(R0.$$.fragment,u3),tJo=i(u3),gpe=n(u3,"P",{});var Vft=s(gpe);aJo=r(Vft,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vft.forEach(t),nJo=i(u3),md=n(u3,"P",{});var mK=s(md);sJo=r(mK,`Note:
Loading a model from its configuration file does `),hpe=n(mK,"STRONG",{});var Xft=s(hpe);lJo=r(Xft,"not"),Xft.forEach(t),iJo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(mK,"A",{href:!0});var zft=s(zV);dJo=r(zft,"from_pretrained()"),zft.forEach(t),cJo=r(mK," to load the model weights."),mK.forEach(t),fJo=i(u3),T(F6.$$.fragment,u3),u3.forEach(t),mJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ma=s(fo);T(B0.$$.fragment,ma),gJo=i(ma),ppe=n(ma,"P",{});var Qft=s(ppe);hJo=r(Qft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Qft.forEach(t),pJo=i(ma),Da=n(ma,"P",{});var _3=s(Da);uJo=r(_3,"The model class to instantiate is selected based on the "),upe=n(_3,"CODE",{});var Wft=s(upe);_Jo=r(Wft,"model_type"),Wft.forEach(t),bJo=r(_3,` property of the config object (either
passed as an argument or loaded from `),_pe=n(_3,"CODE",{});var Hft=s(_pe);vJo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),FJo=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bpe=n(_3,"CODE",{});var Uft=s(bpe);TJo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),MJo=r(_3,":"),_3.forEach(t),EJo=i(ma),P0=n(ma,"UL",{});var Oqe=s(P0);T6=n(Oqe,"LI",{});var G8e=s(T6);vpe=n(G8e,"STRONG",{});var Jft=s(vpe);CJo=r(Jft,"speech-encoder-decoder"),Jft.forEach(t),wJo=r(G8e," \u2014 "),QV=n(G8e,"A",{href:!0});var Yft=s(QV);AJo=r(Yft,"SpeechEncoderDecoderModel"),Yft.forEach(t),yJo=r(G8e," (Speech Encoder decoder model)"),G8e.forEach(t),LJo=i(Oqe),M6=n(Oqe,"LI",{});var O8e=s(M6);Fpe=n(O8e,"STRONG",{});var Kft=s(Fpe);xJo=r(Kft,"speech_to_text"),Kft.forEach(t),$Jo=r(O8e," \u2014 "),WV=n(O8e,"A",{href:!0});var Zft=s(WV);kJo=r(Zft,"Speech2TextForConditionalGeneration"),Zft.forEach(t),SJo=r(O8e," (Speech2Text model)"),O8e.forEach(t),Oqe.forEach(t),RJo=i(ma),E6=n(ma,"P",{});var V8e=s(E6);BJo=r(V8e,"The model is set in evaluation mode by default using "),Tpe=n(V8e,"CODE",{});var emt=s(Tpe);PJo=r(emt,"model.eval()"),emt.forEach(t),IJo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mpe=n(V8e,"CODE",{});var omt=s(Mpe);qJo=r(omt,"model.train()"),omt.forEach(t),V8e.forEach(t),NJo=i(ma),T(C6.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),DPe=i(f),gd=n(f,"H2",{class:!0});var Vqe=s(gd);w6=n(Vqe,"A",{id:!0,class:!0,href:!0});var rmt=s(w6);Epe=n(rmt,"SPAN",{});var tmt=s(Epe);T(I0.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),jJo=i(Vqe),Cpe=n(Vqe,"SPAN",{});var amt=s(Cpe);DJo=r(amt,"AutoModelForAudioXVector"),amt.forEach(t),Vqe.forEach(t),GPe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(q0.$$.fragment,el),GJo=i(el),hd=n(el,"P",{});var gK=s(hd);OJo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),HV=n(gK,"A",{href:!0});var nmt=s(HV);VJo=r(nmt,"from_pretrained()"),nmt.forEach(t),XJo=r(gK," class method or the "),UV=n(gK,"A",{href:!0});var smt=s(UV);zJo=r(smt,"from_config()"),smt.forEach(t),QJo=r(gK,` class
method.`),gK.forEach(t),WJo=i(el),N0=n(el,"P",{});var Xqe=s(N0);HJo=r(Xqe,"This class cannot be instantiated directly using "),wpe=n(Xqe,"CODE",{});var lmt=s(wpe);UJo=r(lmt,"__init__()"),lmt.forEach(t),JJo=r(Xqe," (throws an error)."),Xqe.forEach(t),YJo=i(el),_t=n(el,"DIV",{class:!0});var b3=s(_t);T(j0.$$.fragment,b3),KJo=i(b3),Ape=n(b3,"P",{});var imt=s(Ape);ZJo=r(imt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),imt.forEach(t),eYo=i(b3),pd=n(b3,"P",{});var hK=s(pd);oYo=r(hK,`Note:
Loading a model from its configuration file does `),ype=n(hK,"STRONG",{});var dmt=s(ype);rYo=r(dmt,"not"),dmt.forEach(t),tYo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JV=n(hK,"A",{href:!0});var cmt=s(JV);aYo=r(cmt,"from_pretrained()"),cmt.forEach(t),nYo=r(hK," to load the model weights."),hK.forEach(t),sYo=i(b3),T(A6.$$.fragment,b3),b3.forEach(t),lYo=i(el),mo=n(el,"DIV",{class:!0});var ga=s(mo);T(D0.$$.fragment,ga),iYo=i(ga),Lpe=n(ga,"P",{});var fmt=s(Lpe);dYo=r(fmt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),fmt.forEach(t),cYo=i(ga),Ga=n(ga,"P",{});var v3=s(Ga);fYo=r(v3,"The model class to instantiate is selected based on the "),xpe=n(v3,"CODE",{});var mmt=s(xpe);mYo=r(mmt,"model_type"),mmt.forEach(t),gYo=r(v3,` property of the config object (either
passed as an argument or loaded from `),$pe=n(v3,"CODE",{});var gmt=s($pe);hYo=r(gmt,"pretrained_model_name_or_path"),gmt.forEach(t),pYo=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kpe=n(v3,"CODE",{});var hmt=s(kpe);uYo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),_Yo=r(v3,":"),v3.forEach(t),bYo=i(ga),Oa=n(ga,"UL",{});var F3=s(Oa);y6=n(F3,"LI",{});var X8e=s(y6);Spe=n(X8e,"STRONG",{});var pmt=s(Spe);vYo=r(pmt,"data2vec-audio"),pmt.forEach(t),FYo=r(X8e," \u2014 "),YV=n(X8e,"A",{href:!0});var umt=s(YV);TYo=r(umt,"Data2VecAudioForXVector"),umt.forEach(t),MYo=r(X8e," (Data2VecAudio model)"),X8e.forEach(t),EYo=i(F3),L6=n(F3,"LI",{});var z8e=s(L6);Rpe=n(z8e,"STRONG",{});var _mt=s(Rpe);CYo=r(_mt,"unispeech-sat"),_mt.forEach(t),wYo=r(z8e," \u2014 "),KV=n(z8e,"A",{href:!0});var bmt=s(KV);AYo=r(bmt,"UniSpeechSatForXVector"),bmt.forEach(t),yYo=r(z8e," (UniSpeechSat model)"),z8e.forEach(t),LYo=i(F3),x6=n(F3,"LI",{});var Q8e=s(x6);Bpe=n(Q8e,"STRONG",{});var vmt=s(Bpe);xYo=r(vmt,"wav2vec2"),vmt.forEach(t),$Yo=r(Q8e," \u2014 "),ZV=n(Q8e,"A",{href:!0});var Fmt=s(ZV);kYo=r(Fmt,"Wav2Vec2ForXVector"),Fmt.forEach(t),SYo=r(Q8e," (Wav2Vec2 model)"),Q8e.forEach(t),RYo=i(F3),$6=n(F3,"LI",{});var W8e=s($6);Ppe=n(W8e,"STRONG",{});var Tmt=s(Ppe);BYo=r(Tmt,"wavlm"),Tmt.forEach(t),PYo=r(W8e," \u2014 "),eX=n(W8e,"A",{href:!0});var Mmt=s(eX);IYo=r(Mmt,"WavLMForXVector"),Mmt.forEach(t),qYo=r(W8e," (WavLM model)"),W8e.forEach(t),F3.forEach(t),NYo=i(ga),k6=n(ga,"P",{});var H8e=s(k6);jYo=r(H8e,"The model is set in evaluation mode by default using "),Ipe=n(H8e,"CODE",{});var Emt=s(Ipe);DYo=r(Emt,"model.eval()"),Emt.forEach(t),GYo=r(H8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qpe=n(H8e,"CODE",{});var Cmt=s(qpe);OYo=r(Cmt,"model.train()"),Cmt.forEach(t),H8e.forEach(t),VYo=i(ga),T(S6.$$.fragment,ga),ga.forEach(t),el.forEach(t),OPe=i(f),ud=n(f,"H2",{class:!0});var zqe=s(ud);R6=n(zqe,"A",{id:!0,class:!0,href:!0});var wmt=s(R6);Npe=n(wmt,"SPAN",{});var Amt=s(Npe);T(G0.$$.fragment,Amt),Amt.forEach(t),wmt.forEach(t),XYo=i(zqe),jpe=n(zqe,"SPAN",{});var ymt=s(jpe);zYo=r(ymt,"AutoModelForMaskedImageModeling"),ymt.forEach(t),zqe.forEach(t),VPe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(O0.$$.fragment,ol),QYo=i(ol),_d=n(ol,"P",{});var pK=s(_d);WYo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),oX=n(pK,"A",{href:!0});var Lmt=s(oX);HYo=r(Lmt,"from_pretrained()"),Lmt.forEach(t),UYo=r(pK," class method or the "),rX=n(pK,"A",{href:!0});var xmt=s(rX);JYo=r(xmt,"from_config()"),xmt.forEach(t),YYo=r(pK,` class
method.`),pK.forEach(t),KYo=i(ol),V0=n(ol,"P",{});var Qqe=s(V0);ZYo=r(Qqe,"This class cannot be instantiated directly using "),Dpe=n(Qqe,"CODE",{});var $mt=s(Dpe);eKo=r($mt,"__init__()"),$mt.forEach(t),oKo=r(Qqe," (throws an error)."),Qqe.forEach(t),rKo=i(ol),bt=n(ol,"DIV",{class:!0});var T3=s(bt);T(X0.$$.fragment,T3),tKo=i(T3),Gpe=n(T3,"P",{});var kmt=s(Gpe);aKo=r(kmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kmt.forEach(t),nKo=i(T3),bd=n(T3,"P",{});var uK=s(bd);sKo=r(uK,`Note:
Loading a model from its configuration file does `),Ope=n(uK,"STRONG",{});var Smt=s(Ope);lKo=r(Smt,"not"),Smt.forEach(t),iKo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tX=n(uK,"A",{href:!0});var Rmt=s(tX);dKo=r(Rmt,"from_pretrained()"),Rmt.forEach(t),cKo=r(uK," to load the model weights."),uK.forEach(t),fKo=i(T3),T(B6.$$.fragment,T3),T3.forEach(t),mKo=i(ol),go=n(ol,"DIV",{class:!0});var ha=s(go);T(z0.$$.fragment,ha),gKo=i(ha),Vpe=n(ha,"P",{});var Bmt=s(Vpe);hKo=r(Bmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Bmt.forEach(t),pKo=i(ha),Va=n(ha,"P",{});var M3=s(Va);uKo=r(M3,"The model class to instantiate is selected based on the "),Xpe=n(M3,"CODE",{});var Pmt=s(Xpe);_Ko=r(Pmt,"model_type"),Pmt.forEach(t),bKo=r(M3,` property of the config object (either
passed as an argument or loaded from `),zpe=n(M3,"CODE",{});var Imt=s(zpe);vKo=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),FKo=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qpe=n(M3,"CODE",{});var qmt=s(Qpe);TKo=r(qmt,"pretrained_model_name_or_path"),qmt.forEach(t),MKo=r(M3,":"),M3.forEach(t),EKo=i(ha),vd=n(ha,"UL",{});var _K=s(vd);P6=n(_K,"LI",{});var U8e=s(P6);Wpe=n(U8e,"STRONG",{});var Nmt=s(Wpe);CKo=r(Nmt,"deit"),Nmt.forEach(t),wKo=r(U8e," \u2014 "),aX=n(U8e,"A",{href:!0});var jmt=s(aX);AKo=r(jmt,"DeiTForMaskedImageModeling"),jmt.forEach(t),yKo=r(U8e," (DeiT model)"),U8e.forEach(t),LKo=i(_K),I6=n(_K,"LI",{});var J8e=s(I6);Hpe=n(J8e,"STRONG",{});var Dmt=s(Hpe);xKo=r(Dmt,"swin"),Dmt.forEach(t),$Ko=r(J8e," \u2014 "),nX=n(J8e,"A",{href:!0});var Gmt=s(nX);kKo=r(Gmt,"SwinForMaskedImageModeling"),Gmt.forEach(t),SKo=r(J8e," (Swin model)"),J8e.forEach(t),RKo=i(_K),q6=n(_K,"LI",{});var Y8e=s(q6);Upe=n(Y8e,"STRONG",{});var Omt=s(Upe);BKo=r(Omt,"vit"),Omt.forEach(t),PKo=r(Y8e," \u2014 "),sX=n(Y8e,"A",{href:!0});var Vmt=s(sX);IKo=r(Vmt,"ViTForMaskedImageModeling"),Vmt.forEach(t),qKo=r(Y8e," (ViT model)"),Y8e.forEach(t),_K.forEach(t),NKo=i(ha),N6=n(ha,"P",{});var K8e=s(N6);jKo=r(K8e,"The model is set in evaluation mode by default using "),Jpe=n(K8e,"CODE",{});var Xmt=s(Jpe);DKo=r(Xmt,"model.eval()"),Xmt.forEach(t),GKo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ype=n(K8e,"CODE",{});var zmt=s(Ype);OKo=r(zmt,"model.train()"),zmt.forEach(t),K8e.forEach(t),VKo=i(ha),T(j6.$$.fragment,ha),ha.forEach(t),ol.forEach(t),XPe=i(f),Fd=n(f,"H2",{class:!0});var Wqe=s(Fd);D6=n(Wqe,"A",{id:!0,class:!0,href:!0});var Qmt=s(D6);Kpe=n(Qmt,"SPAN",{});var Wmt=s(Kpe);T(Q0.$$.fragment,Wmt),Wmt.forEach(t),Qmt.forEach(t),XKo=i(Wqe),Zpe=n(Wqe,"SPAN",{});var Hmt=s(Zpe);zKo=r(Hmt,"AutoModelForObjectDetection"),Hmt.forEach(t),Wqe.forEach(t),zPe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(W0.$$.fragment,rl),QKo=i(rl),Td=n(rl,"P",{});var bK=s(Td);WKo=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),lX=n(bK,"A",{href:!0});var Umt=s(lX);HKo=r(Umt,"from_pretrained()"),Umt.forEach(t),UKo=r(bK," class method or the "),iX=n(bK,"A",{href:!0});var Jmt=s(iX);JKo=r(Jmt,"from_config()"),Jmt.forEach(t),YKo=r(bK,` class
method.`),bK.forEach(t),KKo=i(rl),H0=n(rl,"P",{});var Hqe=s(H0);ZKo=r(Hqe,"This class cannot be instantiated directly using "),eue=n(Hqe,"CODE",{});var Ymt=s(eue);eZo=r(Ymt,"__init__()"),Ymt.forEach(t),oZo=r(Hqe," (throws an error)."),Hqe.forEach(t),rZo=i(rl),vt=n(rl,"DIV",{class:!0});var E3=s(vt);T(U0.$$.fragment,E3),tZo=i(E3),oue=n(E3,"P",{});var Kmt=s(oue);aZo=r(Kmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Kmt.forEach(t),nZo=i(E3),Md=n(E3,"P",{});var vK=s(Md);sZo=r(vK,`Note:
Loading a model from its configuration file does `),rue=n(vK,"STRONG",{});var Zmt=s(rue);lZo=r(Zmt,"not"),Zmt.forEach(t),iZo=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(vK,"A",{href:!0});var egt=s(dX);dZo=r(egt,"from_pretrained()"),egt.forEach(t),cZo=r(vK," to load the model weights."),vK.forEach(t),fZo=i(E3),T(G6.$$.fragment,E3),E3.forEach(t),mZo=i(rl),ho=n(rl,"DIV",{class:!0});var pa=s(ho);T(J0.$$.fragment,pa),gZo=i(pa),tue=n(pa,"P",{});var ogt=s(tue);hZo=r(ogt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ogt.forEach(t),pZo=i(pa),Xa=n(pa,"P",{});var C3=s(Xa);uZo=r(C3,"The model class to instantiate is selected based on the "),aue=n(C3,"CODE",{});var rgt=s(aue);_Zo=r(rgt,"model_type"),rgt.forEach(t),bZo=r(C3,` property of the config object (either
passed as an argument or loaded from `),nue=n(C3,"CODE",{});var tgt=s(nue);vZo=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),FZo=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(C3,"CODE",{});var agt=s(sue);TZo=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),MZo=r(C3,":"),C3.forEach(t),EZo=i(pa),Y0=n(pa,"UL",{});var Uqe=s(Y0);O6=n(Uqe,"LI",{});var Z8e=s(O6);lue=n(Z8e,"STRONG",{});var ngt=s(lue);CZo=r(ngt,"detr"),ngt.forEach(t),wZo=r(Z8e," \u2014 "),cX=n(Z8e,"A",{href:!0});var sgt=s(cX);AZo=r(sgt,"DetrForObjectDetection"),sgt.forEach(t),yZo=r(Z8e," (DETR model)"),Z8e.forEach(t),LZo=i(Uqe),V6=n(Uqe,"LI",{});var exe=s(V6);iue=n(exe,"STRONG",{});var lgt=s(iue);xZo=r(lgt,"yolos"),lgt.forEach(t),$Zo=r(exe," \u2014 "),fX=n(exe,"A",{href:!0});var igt=s(fX);kZo=r(igt,"YolosForObjectDetection"),igt.forEach(t),SZo=r(exe," (YOLOS model)"),exe.forEach(t),Uqe.forEach(t),RZo=i(pa),X6=n(pa,"P",{});var oxe=s(X6);BZo=r(oxe,"The model is set in evaluation mode by default using "),due=n(oxe,"CODE",{});var dgt=s(due);PZo=r(dgt,"model.eval()"),dgt.forEach(t),IZo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(oxe,"CODE",{});var cgt=s(cue);qZo=r(cgt,"model.train()"),cgt.forEach(t),oxe.forEach(t),NZo=i(pa),T(z6.$$.fragment,pa),pa.forEach(t),rl.forEach(t),QPe=i(f),Ed=n(f,"H2",{class:!0});var Jqe=s(Ed);Q6=n(Jqe,"A",{id:!0,class:!0,href:!0});var fgt=s(Q6);fue=n(fgt,"SPAN",{});var mgt=s(fue);T(K0.$$.fragment,mgt),mgt.forEach(t),fgt.forEach(t),jZo=i(Jqe),mue=n(Jqe,"SPAN",{});var ggt=s(mue);DZo=r(ggt,"AutoModelForImageSegmentation"),ggt.forEach(t),Jqe.forEach(t),WPe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(Z0.$$.fragment,tl),GZo=i(tl),Cd=n(tl,"P",{});var FK=s(Cd);OZo=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mX=n(FK,"A",{href:!0});var hgt=s(mX);VZo=r(hgt,"from_pretrained()"),hgt.forEach(t),XZo=r(FK," class method or the "),gX=n(FK,"A",{href:!0});var pgt=s(gX);zZo=r(pgt,"from_config()"),pgt.forEach(t),QZo=r(FK,` class
method.`),FK.forEach(t),WZo=i(tl),ey=n(tl,"P",{});var Yqe=s(ey);HZo=r(Yqe,"This class cannot be instantiated directly using "),gue=n(Yqe,"CODE",{});var ugt=s(gue);UZo=r(ugt,"__init__()"),ugt.forEach(t),JZo=r(Yqe," (throws an error)."),Yqe.forEach(t),YZo=i(tl),Ft=n(tl,"DIV",{class:!0});var w3=s(Ft);T(oy.$$.fragment,w3),KZo=i(w3),hue=n(w3,"P",{});var _gt=s(hue);ZZo=r(_gt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_gt.forEach(t),eer=i(w3),wd=n(w3,"P",{});var TK=s(wd);oer=r(TK,`Note:
Loading a model from its configuration file does `),pue=n(TK,"STRONG",{});var bgt=s(pue);rer=r(bgt,"not"),bgt.forEach(t),ter=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),hX=n(TK,"A",{href:!0});var vgt=s(hX);aer=r(vgt,"from_pretrained()"),vgt.forEach(t),ner=r(TK," to load the model weights."),TK.forEach(t),ser=i(w3),T(W6.$$.fragment,w3),w3.forEach(t),ler=i(tl),po=n(tl,"DIV",{class:!0});var ua=s(po);T(ry.$$.fragment,ua),ier=i(ua),uue=n(ua,"P",{});var Fgt=s(uue);der=r(Fgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Fgt.forEach(t),cer=i(ua),za=n(ua,"P",{});var A3=s(za);fer=r(A3,"The model class to instantiate is selected based on the "),_ue=n(A3,"CODE",{});var Tgt=s(_ue);mer=r(Tgt,"model_type"),Tgt.forEach(t),ger=r(A3,` property of the config object (either
passed as an argument or loaded from `),bue=n(A3,"CODE",{});var Mgt=s(bue);her=r(Mgt,"pretrained_model_name_or_path"),Mgt.forEach(t),per=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(A3,"CODE",{});var Egt=s(vue);uer=r(Egt,"pretrained_model_name_or_path"),Egt.forEach(t),_er=r(A3,":"),A3.forEach(t),ber=i(ua),Fue=n(ua,"UL",{});var Cgt=s(Fue);H6=n(Cgt,"LI",{});var rxe=s(H6);Tue=n(rxe,"STRONG",{});var wgt=s(Tue);ver=r(wgt,"detr"),wgt.forEach(t),Fer=r(rxe," \u2014 "),pX=n(rxe,"A",{href:!0});var Agt=s(pX);Ter=r(Agt,"DetrForSegmentation"),Agt.forEach(t),Mer=r(rxe," (DETR model)"),rxe.forEach(t),Cgt.forEach(t),Eer=i(ua),U6=n(ua,"P",{});var txe=s(U6);Cer=r(txe,"The model is set in evaluation mode by default using "),Mue=n(txe,"CODE",{});var ygt=s(Mue);wer=r(ygt,"model.eval()"),ygt.forEach(t),Aer=r(txe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eue=n(txe,"CODE",{});var Lgt=s(Eue);yer=r(Lgt,"model.train()"),Lgt.forEach(t),txe.forEach(t),Ler=i(ua),T(J6.$$.fragment,ua),ua.forEach(t),tl.forEach(t),HPe=i(f),Ad=n(f,"H2",{class:!0});var Kqe=s(Ad);Y6=n(Kqe,"A",{id:!0,class:!0,href:!0});var xgt=s(Y6);Cue=n(xgt,"SPAN",{});var $gt=s(Cue);T(ty.$$.fragment,$gt),$gt.forEach(t),xgt.forEach(t),xer=i(Kqe),wue=n(Kqe,"SPAN",{});var kgt=s(wue);$er=r(kgt,"AutoModelForSemanticSegmentation"),kgt.forEach(t),Kqe.forEach(t),UPe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(ay.$$.fragment,al),ker=i(al),yd=n(al,"P",{});var MK=s(yd);Ser=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),uX=n(MK,"A",{href:!0});var Sgt=s(uX);Rer=r(Sgt,"from_pretrained()"),Sgt.forEach(t),Ber=r(MK," class method or the "),_X=n(MK,"A",{href:!0});var Rgt=s(_X);Per=r(Rgt,"from_config()"),Rgt.forEach(t),Ier=r(MK,` class
method.`),MK.forEach(t),qer=i(al),ny=n(al,"P",{});var Zqe=s(ny);Ner=r(Zqe,"This class cannot be instantiated directly using "),Aue=n(Zqe,"CODE",{});var Bgt=s(Aue);jer=r(Bgt,"__init__()"),Bgt.forEach(t),Der=r(Zqe," (throws an error)."),Zqe.forEach(t),Ger=i(al),Tt=n(al,"DIV",{class:!0});var y3=s(Tt);T(sy.$$.fragment,y3),Oer=i(y3),yue=n(y3,"P",{});var Pgt=s(yue);Ver=r(Pgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pgt.forEach(t),Xer=i(y3),Ld=n(y3,"P",{});var EK=s(Ld);zer=r(EK,`Note:
Loading a model from its configuration file does `),Lue=n(EK,"STRONG",{});var Igt=s(Lue);Qer=r(Igt,"not"),Igt.forEach(t),Wer=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(EK,"A",{href:!0});var qgt=s(bX);Her=r(qgt,"from_pretrained()"),qgt.forEach(t),Uer=r(EK," to load the model weights."),EK.forEach(t),Jer=i(y3),T(K6.$$.fragment,y3),y3.forEach(t),Yer=i(al),uo=n(al,"DIV",{class:!0});var _a=s(uo);T(ly.$$.fragment,_a),Ker=i(_a),xue=n(_a,"P",{});var Ngt=s(xue);Zer=r(Ngt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ngt.forEach(t),eor=i(_a),Qa=n(_a,"P",{});var L3=s(Qa);oor=r(L3,"The model class to instantiate is selected based on the "),$ue=n(L3,"CODE",{});var jgt=s($ue);ror=r(jgt,"model_type"),jgt.forEach(t),tor=r(L3,` property of the config object (either
passed as an argument or loaded from `),kue=n(L3,"CODE",{});var Dgt=s(kue);aor=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),nor=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sue=n(L3,"CODE",{});var Ggt=s(Sue);sor=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),lor=r(L3,":"),L3.forEach(t),ior=i(_a),Wa=n(_a,"UL",{});var x3=s(Wa);Z6=n(x3,"LI",{});var axe=s(Z6);Rue=n(axe,"STRONG",{});var Ogt=s(Rue);dor=r(Ogt,"beit"),Ogt.forEach(t),cor=r(axe," \u2014 "),vX=n(axe,"A",{href:!0});var Vgt=s(vX);mor=r(Vgt,"BeitForSemanticSegmentation"),Vgt.forEach(t),gor=r(axe," (BEiT model)"),axe.forEach(t),hor=i(x3),eT=n(x3,"LI",{});var nxe=s(eT);Bue=n(nxe,"STRONG",{});var Xgt=s(Bue);por=r(Xgt,"data2vec-vision"),Xgt.forEach(t),uor=r(nxe," \u2014 "),FX=n(nxe,"A",{href:!0});var zgt=s(FX);_or=r(zgt,"Data2VecVisionForSemanticSegmentation"),zgt.forEach(t),bor=r(nxe," (Data2VecVision model)"),nxe.forEach(t),vor=i(x3),oT=n(x3,"LI",{});var sxe=s(oT);Pue=n(sxe,"STRONG",{});var Qgt=s(Pue);For=r(Qgt,"dpt"),Qgt.forEach(t),Tor=r(sxe," \u2014 "),TX=n(sxe,"A",{href:!0});var Wgt=s(TX);Mor=r(Wgt,"DPTForSemanticSegmentation"),Wgt.forEach(t),Eor=r(sxe," (DPT model)"),sxe.forEach(t),Cor=i(x3),rT=n(x3,"LI",{});var lxe=s(rT);Iue=n(lxe,"STRONG",{});var Hgt=s(Iue);wor=r(Hgt,"segformer"),Hgt.forEach(t),Aor=r(lxe," \u2014 "),MX=n(lxe,"A",{href:!0});var Ugt=s(MX);yor=r(Ugt,"SegformerForSemanticSegmentation"),Ugt.forEach(t),Lor=r(lxe," (SegFormer model)"),lxe.forEach(t),x3.forEach(t),xor=i(_a),tT=n(_a,"P",{});var ixe=s(tT);$or=r(ixe,"The model is set in evaluation mode by default using "),que=n(ixe,"CODE",{});var Jgt=s(que);kor=r(Jgt,"model.eval()"),Jgt.forEach(t),Sor=r(ixe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nue=n(ixe,"CODE",{});var Ygt=s(Nue);Ror=r(Ygt,"model.train()"),Ygt.forEach(t),ixe.forEach(t),Bor=i(_a),T(aT.$$.fragment,_a),_a.forEach(t),al.forEach(t),JPe=i(f),xd=n(f,"H2",{class:!0});var eNe=s(xd);nT=n(eNe,"A",{id:!0,class:!0,href:!0});var Kgt=s(nT);jue=n(Kgt,"SPAN",{});var Zgt=s(jue);T(iy.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),Por=i(eNe),Due=n(eNe,"SPAN",{});var eht=s(Due);Ior=r(eht,"AutoModelForInstanceSegmentation"),eht.forEach(t),eNe.forEach(t),YPe=i(f),Jo=n(f,"DIV",{class:!0});var nl=s(Jo);T(dy.$$.fragment,nl),qor=i(nl),$d=n(nl,"P",{});var CK=s($d);Nor=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EX=n(CK,"A",{href:!0});var oht=s(EX);jor=r(oht,"from_pretrained()"),oht.forEach(t),Dor=r(CK," class method or the "),CX=n(CK,"A",{href:!0});var rht=s(CX);Gor=r(rht,"from_config()"),rht.forEach(t),Oor=r(CK,` class
method.`),CK.forEach(t),Vor=i(nl),cy=n(nl,"P",{});var oNe=s(cy);Xor=r(oNe,"This class cannot be instantiated directly using "),Gue=n(oNe,"CODE",{});var tht=s(Gue);zor=r(tht,"__init__()"),tht.forEach(t),Qor=r(oNe," (throws an error)."),oNe.forEach(t),Wor=i(nl),Mt=n(nl,"DIV",{class:!0});var $3=s(Mt);T(fy.$$.fragment,$3),Hor=i($3),Oue=n($3,"P",{});var aht=s(Oue);Uor=r(aht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aht.forEach(t),Jor=i($3),kd=n($3,"P",{});var wK=s(kd);Yor=r(wK,`Note:
Loading a model from its configuration file does `),Vue=n(wK,"STRONG",{});var nht=s(Vue);Kor=r(nht,"not"),nht.forEach(t),Zor=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),wX=n(wK,"A",{href:!0});var sht=s(wX);err=r(sht,"from_pretrained()"),sht.forEach(t),orr=r(wK," to load the model weights."),wK.forEach(t),rrr=i($3),T(sT.$$.fragment,$3),$3.forEach(t),trr=i(nl),_o=n(nl,"DIV",{class:!0});var ba=s(_o);T(my.$$.fragment,ba),arr=i(ba),Xue=n(ba,"P",{});var lht=s(Xue);nrr=r(lht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lht.forEach(t),srr=i(ba),Ha=n(ba,"P",{});var k3=s(Ha);lrr=r(k3,"The model class to instantiate is selected based on the "),zue=n(k3,"CODE",{});var iht=s(zue);irr=r(iht,"model_type"),iht.forEach(t),drr=r(k3,` property of the config object (either
passed as an argument or loaded from `),Que=n(k3,"CODE",{});var dht=s(Que);crr=r(dht,"pretrained_model_name_or_path"),dht.forEach(t),frr=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(k3,"CODE",{});var cht=s(Wue);mrr=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),grr=r(k3,":"),k3.forEach(t),hrr=i(ba),Hue=n(ba,"UL",{});var fht=s(Hue);lT=n(fht,"LI",{});var dxe=s(lT);Uue=n(dxe,"STRONG",{});var mht=s(Uue);prr=r(mht,"maskformer"),mht.forEach(t),urr=r(dxe," \u2014 "),AX=n(dxe,"A",{href:!0});var ght=s(AX);_rr=r(ght,"MaskFormerForInstanceSegmentation"),ght.forEach(t),brr=r(dxe," (MaskFormer model)"),dxe.forEach(t),fht.forEach(t),vrr=i(ba),iT=n(ba,"P",{});var cxe=s(iT);Frr=r(cxe,"The model is set in evaluation mode by default using "),Jue=n(cxe,"CODE",{});var hht=s(Jue);Trr=r(hht,"model.eval()"),hht.forEach(t),Mrr=r(cxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yue=n(cxe,"CODE",{});var pht=s(Yue);Err=r(pht,"model.train()"),pht.forEach(t),cxe.forEach(t),Crr=i(ba),T(dT.$$.fragment,ba),ba.forEach(t),nl.forEach(t),KPe=i(f),Sd=n(f,"H2",{class:!0});var rNe=s(Sd);cT=n(rNe,"A",{id:!0,class:!0,href:!0});var uht=s(cT);Kue=n(uht,"SPAN",{});var _ht=s(Kue);T(gy.$$.fragment,_ht),_ht.forEach(t),uht.forEach(t),wrr=i(rNe),Zue=n(rNe,"SPAN",{});var bht=s(Zue);Arr=r(bht,"TFAutoModel"),bht.forEach(t),rNe.forEach(t),ZPe=i(f),Yo=n(f,"DIV",{class:!0});var sl=s(Yo);T(hy.$$.fragment,sl),yrr=i(sl),Rd=n(sl,"P",{});var AK=s(Rd);Lrr=r(AK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yX=n(AK,"A",{href:!0});var vht=s(yX);xrr=r(vht,"from_pretrained()"),vht.forEach(t),$rr=r(AK," class method or the "),LX=n(AK,"A",{href:!0});var Fht=s(LX);krr=r(Fht,"from_config()"),Fht.forEach(t),Srr=r(AK,` class
method.`),AK.forEach(t),Rrr=i(sl),py=n(sl,"P",{});var tNe=s(py);Brr=r(tNe,"This class cannot be instantiated directly using "),e_e=n(tNe,"CODE",{});var Tht=s(e_e);Prr=r(Tht,"__init__()"),Tht.forEach(t),Irr=r(tNe," (throws an error)."),tNe.forEach(t),qrr=i(sl),Et=n(sl,"DIV",{class:!0});var S3=s(Et);T(uy.$$.fragment,S3),Nrr=i(S3),o_e=n(S3,"P",{});var Mht=s(o_e);jrr=r(Mht,"Instantiates one of the base model classes of the library from a configuration."),Mht.forEach(t),Drr=i(S3),Bd=n(S3,"P",{});var yK=s(Bd);Grr=r(yK,`Note:
Loading a model from its configuration file does `),r_e=n(yK,"STRONG",{});var Eht=s(r_e);Orr=r(Eht,"not"),Eht.forEach(t),Vrr=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xX=n(yK,"A",{href:!0});var Cht=s(xX);Xrr=r(Cht,"from_pretrained()"),Cht.forEach(t),zrr=r(yK," to load the model weights."),yK.forEach(t),Qrr=i(S3),T(fT.$$.fragment,S3),S3.forEach(t),Wrr=i(sl),Cr=n(sl,"DIV",{class:!0});var ll=s(Cr);T(_y.$$.fragment,ll),Hrr=i(ll),t_e=n(ll,"P",{});var wht=s(t_e);Urr=r(wht,"Instantiate one of the base model classes of the library from a pretrained model."),wht.forEach(t),Jrr=i(ll),Ua=n(ll,"P",{});var R3=s(Ua);Yrr=r(R3,"The model class to instantiate is selected based on the "),a_e=n(R3,"CODE",{});var Aht=s(a_e);Krr=r(Aht,"model_type"),Aht.forEach(t),Zrr=r(R3,` property of the config object (either
passed as an argument or loaded from `),n_e=n(R3,"CODE",{});var yht=s(n_e);etr=r(yht,"pretrained_model_name_or_path"),yht.forEach(t),otr=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s_e=n(R3,"CODE",{});var Lht=s(s_e);rtr=r(Lht,"pretrained_model_name_or_path"),Lht.forEach(t),ttr=r(R3,":"),R3.forEach(t),atr=i(ll),j=n(ll,"UL",{});var D=s(j);mT=n(D,"LI",{});var fxe=s(mT);l_e=n(fxe,"STRONG",{});var xht=s(l_e);ntr=r(xht,"albert"),xht.forEach(t),str=r(fxe," \u2014 "),$X=n(fxe,"A",{href:!0});var $ht=s($X);ltr=r($ht,"TFAlbertModel"),$ht.forEach(t),itr=r(fxe," (ALBERT model)"),fxe.forEach(t),dtr=i(D),gT=n(D,"LI",{});var mxe=s(gT);i_e=n(mxe,"STRONG",{});var kht=s(i_e);ctr=r(kht,"bart"),kht.forEach(t),ftr=r(mxe," \u2014 "),kX=n(mxe,"A",{href:!0});var Sht=s(kX);mtr=r(Sht,"TFBartModel"),Sht.forEach(t),gtr=r(mxe," (BART model)"),mxe.forEach(t),htr=i(D),hT=n(D,"LI",{});var gxe=s(hT);d_e=n(gxe,"STRONG",{});var Rht=s(d_e);ptr=r(Rht,"bert"),Rht.forEach(t),utr=r(gxe," \u2014 "),SX=n(gxe,"A",{href:!0});var Bht=s(SX);_tr=r(Bht,"TFBertModel"),Bht.forEach(t),btr=r(gxe," (BERT model)"),gxe.forEach(t),vtr=i(D),pT=n(D,"LI",{});var hxe=s(pT);c_e=n(hxe,"STRONG",{});var Pht=s(c_e);Ftr=r(Pht,"blenderbot"),Pht.forEach(t),Ttr=r(hxe," \u2014 "),RX=n(hxe,"A",{href:!0});var Iht=s(RX);Mtr=r(Iht,"TFBlenderbotModel"),Iht.forEach(t),Etr=r(hxe," (Blenderbot model)"),hxe.forEach(t),Ctr=i(D),uT=n(D,"LI",{});var pxe=s(uT);f_e=n(pxe,"STRONG",{});var qht=s(f_e);wtr=r(qht,"blenderbot-small"),qht.forEach(t),Atr=r(pxe," \u2014 "),BX=n(pxe,"A",{href:!0});var Nht=s(BX);ytr=r(Nht,"TFBlenderbotSmallModel"),Nht.forEach(t),Ltr=r(pxe," (BlenderbotSmall model)"),pxe.forEach(t),xtr=i(D),_T=n(D,"LI",{});var uxe=s(_T);m_e=n(uxe,"STRONG",{});var jht=s(m_e);$tr=r(jht,"camembert"),jht.forEach(t),ktr=r(uxe," \u2014 "),PX=n(uxe,"A",{href:!0});var Dht=s(PX);Str=r(Dht,"TFCamembertModel"),Dht.forEach(t),Rtr=r(uxe," (CamemBERT model)"),uxe.forEach(t),Btr=i(D),bT=n(D,"LI",{});var _xe=s(bT);g_e=n(_xe,"STRONG",{});var Ght=s(g_e);Ptr=r(Ght,"clip"),Ght.forEach(t),Itr=r(_xe," \u2014 "),IX=n(_xe,"A",{href:!0});var Oht=s(IX);qtr=r(Oht,"TFCLIPModel"),Oht.forEach(t),Ntr=r(_xe," (CLIP model)"),_xe.forEach(t),jtr=i(D),vT=n(D,"LI",{});var bxe=s(vT);h_e=n(bxe,"STRONG",{});var Vht=s(h_e);Dtr=r(Vht,"convbert"),Vht.forEach(t),Gtr=r(bxe," \u2014 "),qX=n(bxe,"A",{href:!0});var Xht=s(qX);Otr=r(Xht,"TFConvBertModel"),Xht.forEach(t),Vtr=r(bxe," (ConvBERT model)"),bxe.forEach(t),Xtr=i(D),FT=n(D,"LI",{});var vxe=s(FT);p_e=n(vxe,"STRONG",{});var zht=s(p_e);ztr=r(zht,"convnext"),zht.forEach(t),Qtr=r(vxe," \u2014 "),NX=n(vxe,"A",{href:!0});var Qht=s(NX);Wtr=r(Qht,"TFConvNextModel"),Qht.forEach(t),Htr=r(vxe," (ConvNext model)"),vxe.forEach(t),Utr=i(D),TT=n(D,"LI",{});var Fxe=s(TT);u_e=n(Fxe,"STRONG",{});var Wht=s(u_e);Jtr=r(Wht,"ctrl"),Wht.forEach(t),Ytr=r(Fxe," \u2014 "),jX=n(Fxe,"A",{href:!0});var Hht=s(jX);Ktr=r(Hht,"TFCTRLModel"),Hht.forEach(t),Ztr=r(Fxe," (CTRL model)"),Fxe.forEach(t),ear=i(D),MT=n(D,"LI",{});var Txe=s(MT);__e=n(Txe,"STRONG",{});var Uht=s(__e);oar=r(Uht,"data2vec-vision"),Uht.forEach(t),rar=r(Txe," \u2014 "),DX=n(Txe,"A",{href:!0});var Jht=s(DX);tar=r(Jht,"TFData2VecVisionModel"),Jht.forEach(t),aar=r(Txe," (Data2VecVision model)"),Txe.forEach(t),nar=i(D),ET=n(D,"LI",{});var Mxe=s(ET);b_e=n(Mxe,"STRONG",{});var Yht=s(b_e);sar=r(Yht,"deberta"),Yht.forEach(t),lar=r(Mxe," \u2014 "),GX=n(Mxe,"A",{href:!0});var Kht=s(GX);iar=r(Kht,"TFDebertaModel"),Kht.forEach(t),dar=r(Mxe," (DeBERTa model)"),Mxe.forEach(t),car=i(D),CT=n(D,"LI",{});var Exe=s(CT);v_e=n(Exe,"STRONG",{});var Zht=s(v_e);far=r(Zht,"deberta-v2"),Zht.forEach(t),mar=r(Exe," \u2014 "),OX=n(Exe,"A",{href:!0});var ept=s(OX);gar=r(ept,"TFDebertaV2Model"),ept.forEach(t),har=r(Exe," (DeBERTa-v2 model)"),Exe.forEach(t),par=i(D),wT=n(D,"LI",{});var Cxe=s(wT);F_e=n(Cxe,"STRONG",{});var opt=s(F_e);uar=r(opt,"distilbert"),opt.forEach(t),_ar=r(Cxe," \u2014 "),VX=n(Cxe,"A",{href:!0});var rpt=s(VX);bar=r(rpt,"TFDistilBertModel"),rpt.forEach(t),Far=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),Tar=i(D),AT=n(D,"LI",{});var wxe=s(AT);T_e=n(wxe,"STRONG",{});var tpt=s(T_e);Mar=r(tpt,"dpr"),tpt.forEach(t),Ear=r(wxe," \u2014 "),XX=n(wxe,"A",{href:!0});var apt=s(XX);Car=r(apt,"TFDPRQuestionEncoder"),apt.forEach(t),war=r(wxe," (DPR model)"),wxe.forEach(t),Aar=i(D),yT=n(D,"LI",{});var Axe=s(yT);M_e=n(Axe,"STRONG",{});var npt=s(M_e);yar=r(npt,"electra"),npt.forEach(t),Lar=r(Axe," \u2014 "),zX=n(Axe,"A",{href:!0});var spt=s(zX);xar=r(spt,"TFElectraModel"),spt.forEach(t),$ar=r(Axe," (ELECTRA model)"),Axe.forEach(t),kar=i(D),LT=n(D,"LI",{});var yxe=s(LT);E_e=n(yxe,"STRONG",{});var lpt=s(E_e);Sar=r(lpt,"flaubert"),lpt.forEach(t),Rar=r(yxe," \u2014 "),QX=n(yxe,"A",{href:!0});var ipt=s(QX);Bar=r(ipt,"TFFlaubertModel"),ipt.forEach(t),Par=r(yxe," (FlauBERT model)"),yxe.forEach(t),Iar=i(D),ks=n(D,"LI",{});var Vx=s(ks);C_e=n(Vx,"STRONG",{});var dpt=s(C_e);qar=r(dpt,"funnel"),dpt.forEach(t),Nar=r(Vx," \u2014 "),WX=n(Vx,"A",{href:!0});var cpt=s(WX);jar=r(cpt,"TFFunnelModel"),cpt.forEach(t),Dar=r(Vx," or "),HX=n(Vx,"A",{href:!0});var fpt=s(HX);Gar=r(fpt,"TFFunnelBaseModel"),fpt.forEach(t),Oar=r(Vx," (Funnel Transformer model)"),Vx.forEach(t),Var=i(D),xT=n(D,"LI",{});var Lxe=s(xT);w_e=n(Lxe,"STRONG",{});var mpt=s(w_e);Xar=r(mpt,"gpt2"),mpt.forEach(t),zar=r(Lxe," \u2014 "),UX=n(Lxe,"A",{href:!0});var gpt=s(UX);Qar=r(gpt,"TFGPT2Model"),gpt.forEach(t),War=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),Har=i(D),$T=n(D,"LI",{});var xxe=s($T);A_e=n(xxe,"STRONG",{});var hpt=s(A_e);Uar=r(hpt,"gptj"),hpt.forEach(t),Jar=r(xxe," \u2014 "),JX=n(xxe,"A",{href:!0});var ppt=s(JX);Yar=r(ppt,"TFGPTJModel"),ppt.forEach(t),Kar=r(xxe," (GPT-J model)"),xxe.forEach(t),Zar=i(D),kT=n(D,"LI",{});var $xe=s(kT);y_e=n($xe,"STRONG",{});var upt=s(y_e);enr=r(upt,"hubert"),upt.forEach(t),onr=r($xe," \u2014 "),YX=n($xe,"A",{href:!0});var _pt=s(YX);rnr=r(_pt,"TFHubertModel"),_pt.forEach(t),tnr=r($xe," (Hubert model)"),$xe.forEach(t),anr=i(D),ST=n(D,"LI",{});var kxe=s(ST);L_e=n(kxe,"STRONG",{});var bpt=s(L_e);nnr=r(bpt,"layoutlm"),bpt.forEach(t),snr=r(kxe," \u2014 "),KX=n(kxe,"A",{href:!0});var vpt=s(KX);lnr=r(vpt,"TFLayoutLMModel"),vpt.forEach(t),inr=r(kxe," (LayoutLM model)"),kxe.forEach(t),dnr=i(D),RT=n(D,"LI",{});var Sxe=s(RT);x_e=n(Sxe,"STRONG",{});var Fpt=s(x_e);cnr=r(Fpt,"led"),Fpt.forEach(t),fnr=r(Sxe," \u2014 "),ZX=n(Sxe,"A",{href:!0});var Tpt=s(ZX);mnr=r(Tpt,"TFLEDModel"),Tpt.forEach(t),gnr=r(Sxe," (LED model)"),Sxe.forEach(t),hnr=i(D),BT=n(D,"LI",{});var Rxe=s(BT);$_e=n(Rxe,"STRONG",{});var Mpt=s($_e);pnr=r(Mpt,"longformer"),Mpt.forEach(t),unr=r(Rxe," \u2014 "),ez=n(Rxe,"A",{href:!0});var Ept=s(ez);_nr=r(Ept,"TFLongformerModel"),Ept.forEach(t),bnr=r(Rxe," (Longformer model)"),Rxe.forEach(t),vnr=i(D),PT=n(D,"LI",{});var Bxe=s(PT);k_e=n(Bxe,"STRONG",{});var Cpt=s(k_e);Fnr=r(Cpt,"lxmert"),Cpt.forEach(t),Tnr=r(Bxe," \u2014 "),oz=n(Bxe,"A",{href:!0});var wpt=s(oz);Mnr=r(wpt,"TFLxmertModel"),wpt.forEach(t),Enr=r(Bxe," (LXMERT model)"),Bxe.forEach(t),Cnr=i(D),IT=n(D,"LI",{});var Pxe=s(IT);S_e=n(Pxe,"STRONG",{});var Apt=s(S_e);wnr=r(Apt,"marian"),Apt.forEach(t),Anr=r(Pxe," \u2014 "),rz=n(Pxe,"A",{href:!0});var ypt=s(rz);ynr=r(ypt,"TFMarianModel"),ypt.forEach(t),Lnr=r(Pxe," (Marian model)"),Pxe.forEach(t),xnr=i(D),qT=n(D,"LI",{});var Ixe=s(qT);R_e=n(Ixe,"STRONG",{});var Lpt=s(R_e);$nr=r(Lpt,"mbart"),Lpt.forEach(t),knr=r(Ixe," \u2014 "),tz=n(Ixe,"A",{href:!0});var xpt=s(tz);Snr=r(xpt,"TFMBartModel"),xpt.forEach(t),Rnr=r(Ixe," (mBART model)"),Ixe.forEach(t),Bnr=i(D),NT=n(D,"LI",{});var qxe=s(NT);B_e=n(qxe,"STRONG",{});var $pt=s(B_e);Pnr=r($pt,"mobilebert"),$pt.forEach(t),Inr=r(qxe," \u2014 "),az=n(qxe,"A",{href:!0});var kpt=s(az);qnr=r(kpt,"TFMobileBertModel"),kpt.forEach(t),Nnr=r(qxe," (MobileBERT model)"),qxe.forEach(t),jnr=i(D),jT=n(D,"LI",{});var Nxe=s(jT);P_e=n(Nxe,"STRONG",{});var Spt=s(P_e);Dnr=r(Spt,"mpnet"),Spt.forEach(t),Gnr=r(Nxe," \u2014 "),nz=n(Nxe,"A",{href:!0});var Rpt=s(nz);Onr=r(Rpt,"TFMPNetModel"),Rpt.forEach(t),Vnr=r(Nxe," (MPNet model)"),Nxe.forEach(t),Xnr=i(D),DT=n(D,"LI",{});var jxe=s(DT);I_e=n(jxe,"STRONG",{});var Bpt=s(I_e);znr=r(Bpt,"mt5"),Bpt.forEach(t),Qnr=r(jxe," \u2014 "),sz=n(jxe,"A",{href:!0});var Ppt=s(sz);Wnr=r(Ppt,"TFMT5Model"),Ppt.forEach(t),Hnr=r(jxe," (mT5 model)"),jxe.forEach(t),Unr=i(D),GT=n(D,"LI",{});var Dxe=s(GT);q_e=n(Dxe,"STRONG",{});var Ipt=s(q_e);Jnr=r(Ipt,"openai-gpt"),Ipt.forEach(t),Ynr=r(Dxe," \u2014 "),lz=n(Dxe,"A",{href:!0});var qpt=s(lz);Knr=r(qpt,"TFOpenAIGPTModel"),qpt.forEach(t),Znr=r(Dxe," (OpenAI GPT model)"),Dxe.forEach(t),esr=i(D),OT=n(D,"LI",{});var Gxe=s(OT);N_e=n(Gxe,"STRONG",{});var Npt=s(N_e);osr=r(Npt,"pegasus"),Npt.forEach(t),rsr=r(Gxe," \u2014 "),iz=n(Gxe,"A",{href:!0});var jpt=s(iz);tsr=r(jpt,"TFPegasusModel"),jpt.forEach(t),asr=r(Gxe," (Pegasus model)"),Gxe.forEach(t),nsr=i(D),VT=n(D,"LI",{});var Oxe=s(VT);j_e=n(Oxe,"STRONG",{});var Dpt=s(j_e);ssr=r(Dpt,"rembert"),Dpt.forEach(t),lsr=r(Oxe," \u2014 "),dz=n(Oxe,"A",{href:!0});var Gpt=s(dz);isr=r(Gpt,"TFRemBertModel"),Gpt.forEach(t),dsr=r(Oxe," (RemBERT model)"),Oxe.forEach(t),csr=i(D),XT=n(D,"LI",{});var Vxe=s(XT);D_e=n(Vxe,"STRONG",{});var Opt=s(D_e);fsr=r(Opt,"roberta"),Opt.forEach(t),msr=r(Vxe," \u2014 "),cz=n(Vxe,"A",{href:!0});var Vpt=s(cz);gsr=r(Vpt,"TFRobertaModel"),Vpt.forEach(t),hsr=r(Vxe," (RoBERTa model)"),Vxe.forEach(t),psr=i(D),zT=n(D,"LI",{});var Xxe=s(zT);G_e=n(Xxe,"STRONG",{});var Xpt=s(G_e);usr=r(Xpt,"roformer"),Xpt.forEach(t),_sr=r(Xxe," \u2014 "),fz=n(Xxe,"A",{href:!0});var zpt=s(fz);bsr=r(zpt,"TFRoFormerModel"),zpt.forEach(t),vsr=r(Xxe," (RoFormer model)"),Xxe.forEach(t),Fsr=i(D),QT=n(D,"LI",{});var zxe=s(QT);O_e=n(zxe,"STRONG",{});var Qpt=s(O_e);Tsr=r(Qpt,"speech_to_text"),Qpt.forEach(t),Msr=r(zxe," \u2014 "),mz=n(zxe,"A",{href:!0});var Wpt=s(mz);Esr=r(Wpt,"TFSpeech2TextModel"),Wpt.forEach(t),Csr=r(zxe," (Speech2Text model)"),zxe.forEach(t),wsr=i(D),WT=n(D,"LI",{});var Qxe=s(WT);V_e=n(Qxe,"STRONG",{});var Hpt=s(V_e);Asr=r(Hpt,"t5"),Hpt.forEach(t),ysr=r(Qxe," \u2014 "),gz=n(Qxe,"A",{href:!0});var Upt=s(gz);Lsr=r(Upt,"TFT5Model"),Upt.forEach(t),xsr=r(Qxe," (T5 model)"),Qxe.forEach(t),$sr=i(D),HT=n(D,"LI",{});var Wxe=s(HT);X_e=n(Wxe,"STRONG",{});var Jpt=s(X_e);ksr=r(Jpt,"tapas"),Jpt.forEach(t),Ssr=r(Wxe," \u2014 "),hz=n(Wxe,"A",{href:!0});var Ypt=s(hz);Rsr=r(Ypt,"TFTapasModel"),Ypt.forEach(t),Bsr=r(Wxe," (TAPAS model)"),Wxe.forEach(t),Psr=i(D),UT=n(D,"LI",{});var Hxe=s(UT);z_e=n(Hxe,"STRONG",{});var Kpt=s(z_e);Isr=r(Kpt,"transfo-xl"),Kpt.forEach(t),qsr=r(Hxe," \u2014 "),pz=n(Hxe,"A",{href:!0});var Zpt=s(pz);Nsr=r(Zpt,"TFTransfoXLModel"),Zpt.forEach(t),jsr=r(Hxe," (Transformer-XL model)"),Hxe.forEach(t),Dsr=i(D),JT=n(D,"LI",{});var Uxe=s(JT);Q_e=n(Uxe,"STRONG",{});var eut=s(Q_e);Gsr=r(eut,"vit"),eut.forEach(t),Osr=r(Uxe," \u2014 "),uz=n(Uxe,"A",{href:!0});var out=s(uz);Vsr=r(out,"TFViTModel"),out.forEach(t),Xsr=r(Uxe," (ViT model)"),Uxe.forEach(t),zsr=i(D),YT=n(D,"LI",{});var Jxe=s(YT);W_e=n(Jxe,"STRONG",{});var rut=s(W_e);Qsr=r(rut,"vit_mae"),rut.forEach(t),Wsr=r(Jxe," \u2014 "),_z=n(Jxe,"A",{href:!0});var tut=s(_z);Hsr=r(tut,"TFViTMAEModel"),tut.forEach(t),Usr=r(Jxe," (ViTMAE model)"),Jxe.forEach(t),Jsr=i(D),KT=n(D,"LI",{});var Yxe=s(KT);H_e=n(Yxe,"STRONG",{});var aut=s(H_e);Ysr=r(aut,"wav2vec2"),aut.forEach(t),Ksr=r(Yxe," \u2014 "),bz=n(Yxe,"A",{href:!0});var nut=s(bz);Zsr=r(nut,"TFWav2Vec2Model"),nut.forEach(t),elr=r(Yxe," (Wav2Vec2 model)"),Yxe.forEach(t),olr=i(D),ZT=n(D,"LI",{});var Kxe=s(ZT);U_e=n(Kxe,"STRONG",{});var sut=s(U_e);rlr=r(sut,"xlm"),sut.forEach(t),tlr=r(Kxe," \u2014 "),vz=n(Kxe,"A",{href:!0});var lut=s(vz);alr=r(lut,"TFXLMModel"),lut.forEach(t),nlr=r(Kxe," (XLM model)"),Kxe.forEach(t),slr=i(D),e7=n(D,"LI",{});var Zxe=s(e7);J_e=n(Zxe,"STRONG",{});var iut=s(J_e);llr=r(iut,"xlm-roberta"),iut.forEach(t),ilr=r(Zxe," \u2014 "),Fz=n(Zxe,"A",{href:!0});var dut=s(Fz);dlr=r(dut,"TFXLMRobertaModel"),dut.forEach(t),clr=r(Zxe," (XLM-RoBERTa model)"),Zxe.forEach(t),flr=i(D),o7=n(D,"LI",{});var e$e=s(o7);Y_e=n(e$e,"STRONG",{});var cut=s(Y_e);mlr=r(cut,"xlnet"),cut.forEach(t),glr=r(e$e," \u2014 "),Tz=n(e$e,"A",{href:!0});var fut=s(Tz);hlr=r(fut,"TFXLNetModel"),fut.forEach(t),plr=r(e$e," (XLNet model)"),e$e.forEach(t),D.forEach(t),ulr=i(ll),T(r7.$$.fragment,ll),ll.forEach(t),sl.forEach(t),eIe=i(f),Pd=n(f,"H2",{class:!0});var aNe=s(Pd);t7=n(aNe,"A",{id:!0,class:!0,href:!0});var mut=s(t7);K_e=n(mut,"SPAN",{});var gut=s(K_e);T(by.$$.fragment,gut),gut.forEach(t),mut.forEach(t),_lr=i(aNe),Z_e=n(aNe,"SPAN",{});var hut=s(Z_e);blr=r(hut,"TFAutoModelForPreTraining"),hut.forEach(t),aNe.forEach(t),oIe=i(f),Ko=n(f,"DIV",{class:!0});var il=s(Ko);T(vy.$$.fragment,il),vlr=i(il),Id=n(il,"P",{});var LK=s(Id);Flr=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Mz=n(LK,"A",{href:!0});var put=s(Mz);Tlr=r(put,"from_pretrained()"),put.forEach(t),Mlr=r(LK," class method or the "),Ez=n(LK,"A",{href:!0});var uut=s(Ez);Elr=r(uut,"from_config()"),uut.forEach(t),Clr=r(LK,` class
method.`),LK.forEach(t),wlr=i(il),Fy=n(il,"P",{});var nNe=s(Fy);Alr=r(nNe,"This class cannot be instantiated directly using "),e2e=n(nNe,"CODE",{});var _ut=s(e2e);ylr=r(_ut,"__init__()"),_ut.forEach(t),Llr=r(nNe," (throws an error)."),nNe.forEach(t),xlr=i(il),Ct=n(il,"DIV",{class:!0});var B3=s(Ct);T(Ty.$$.fragment,B3),$lr=i(B3),o2e=n(B3,"P",{});var but=s(o2e);klr=r(but,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),but.forEach(t),Slr=i(B3),qd=n(B3,"P",{});var xK=s(qd);Rlr=r(xK,`Note:
Loading a model from its configuration file does `),r2e=n(xK,"STRONG",{});var vut=s(r2e);Blr=r(vut,"not"),vut.forEach(t),Plr=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(xK,"A",{href:!0});var Fut=s(Cz);Ilr=r(Fut,"from_pretrained()"),Fut.forEach(t),qlr=r(xK," to load the model weights."),xK.forEach(t),Nlr=i(B3),T(a7.$$.fragment,B3),B3.forEach(t),jlr=i(il),wr=n(il,"DIV",{class:!0});var dl=s(wr);T(My.$$.fragment,dl),Dlr=i(dl),t2e=n(dl,"P",{});var Tut=s(t2e);Glr=r(Tut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tut.forEach(t),Olr=i(dl),Ja=n(dl,"P",{});var P3=s(Ja);Vlr=r(P3,"The model class to instantiate is selected based on the "),a2e=n(P3,"CODE",{});var Mut=s(a2e);Xlr=r(Mut,"model_type"),Mut.forEach(t),zlr=r(P3,` property of the config object (either
passed as an argument or loaded from `),n2e=n(P3,"CODE",{});var Eut=s(n2e);Qlr=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),Wlr=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(P3,"CODE",{});var Cut=s(s2e);Hlr=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),Ulr=r(P3,":"),P3.forEach(t),Jlr=i(dl),ne=n(dl,"UL",{});var le=s(ne);n7=n(le,"LI",{});var o$e=s(n7);l2e=n(o$e,"STRONG",{});var wut=s(l2e);Ylr=r(wut,"albert"),wut.forEach(t),Klr=r(o$e," \u2014 "),wz=n(o$e,"A",{href:!0});var Aut=s(wz);Zlr=r(Aut,"TFAlbertForPreTraining"),Aut.forEach(t),eir=r(o$e," (ALBERT model)"),o$e.forEach(t),oir=i(le),s7=n(le,"LI",{});var r$e=s(s7);i2e=n(r$e,"STRONG",{});var yut=s(i2e);rir=r(yut,"bart"),yut.forEach(t),tir=r(r$e," \u2014 "),Az=n(r$e,"A",{href:!0});var Lut=s(Az);air=r(Lut,"TFBartForConditionalGeneration"),Lut.forEach(t),nir=r(r$e," (BART model)"),r$e.forEach(t),sir=i(le),l7=n(le,"LI",{});var t$e=s(l7);d2e=n(t$e,"STRONG",{});var xut=s(d2e);lir=r(xut,"bert"),xut.forEach(t),iir=r(t$e," \u2014 "),yz=n(t$e,"A",{href:!0});var $ut=s(yz);dir=r($ut,"TFBertForPreTraining"),$ut.forEach(t),cir=r(t$e," (BERT model)"),t$e.forEach(t),fir=i(le),i7=n(le,"LI",{});var a$e=s(i7);c2e=n(a$e,"STRONG",{});var kut=s(c2e);mir=r(kut,"camembert"),kut.forEach(t),gir=r(a$e," \u2014 "),Lz=n(a$e,"A",{href:!0});var Sut=s(Lz);hir=r(Sut,"TFCamembertForMaskedLM"),Sut.forEach(t),pir=r(a$e," (CamemBERT model)"),a$e.forEach(t),uir=i(le),d7=n(le,"LI",{});var n$e=s(d7);f2e=n(n$e,"STRONG",{});var Rut=s(f2e);_ir=r(Rut,"ctrl"),Rut.forEach(t),bir=r(n$e," \u2014 "),xz=n(n$e,"A",{href:!0});var But=s(xz);vir=r(But,"TFCTRLLMHeadModel"),But.forEach(t),Fir=r(n$e," (CTRL model)"),n$e.forEach(t),Tir=i(le),c7=n(le,"LI",{});var s$e=s(c7);m2e=n(s$e,"STRONG",{});var Put=s(m2e);Mir=r(Put,"distilbert"),Put.forEach(t),Eir=r(s$e," \u2014 "),$z=n(s$e,"A",{href:!0});var Iut=s($z);Cir=r(Iut,"TFDistilBertForMaskedLM"),Iut.forEach(t),wir=r(s$e," (DistilBERT model)"),s$e.forEach(t),Air=i(le),f7=n(le,"LI",{});var l$e=s(f7);g2e=n(l$e,"STRONG",{});var qut=s(g2e);yir=r(qut,"electra"),qut.forEach(t),Lir=r(l$e," \u2014 "),kz=n(l$e,"A",{href:!0});var Nut=s(kz);xir=r(Nut,"TFElectraForPreTraining"),Nut.forEach(t),$ir=r(l$e," (ELECTRA model)"),l$e.forEach(t),kir=i(le),m7=n(le,"LI",{});var i$e=s(m7);h2e=n(i$e,"STRONG",{});var jut=s(h2e);Sir=r(jut,"flaubert"),jut.forEach(t),Rir=r(i$e," \u2014 "),Sz=n(i$e,"A",{href:!0});var Dut=s(Sz);Bir=r(Dut,"TFFlaubertWithLMHeadModel"),Dut.forEach(t),Pir=r(i$e," (FlauBERT model)"),i$e.forEach(t),Iir=i(le),g7=n(le,"LI",{});var d$e=s(g7);p2e=n(d$e,"STRONG",{});var Gut=s(p2e);qir=r(Gut,"funnel"),Gut.forEach(t),Nir=r(d$e," \u2014 "),Rz=n(d$e,"A",{href:!0});var Out=s(Rz);jir=r(Out,"TFFunnelForPreTraining"),Out.forEach(t),Dir=r(d$e," (Funnel Transformer model)"),d$e.forEach(t),Gir=i(le),h7=n(le,"LI",{});var c$e=s(h7);u2e=n(c$e,"STRONG",{});var Vut=s(u2e);Oir=r(Vut,"gpt2"),Vut.forEach(t),Vir=r(c$e," \u2014 "),Bz=n(c$e,"A",{href:!0});var Xut=s(Bz);Xir=r(Xut,"TFGPT2LMHeadModel"),Xut.forEach(t),zir=r(c$e," (OpenAI GPT-2 model)"),c$e.forEach(t),Qir=i(le),p7=n(le,"LI",{});var f$e=s(p7);_2e=n(f$e,"STRONG",{});var zut=s(_2e);Wir=r(zut,"layoutlm"),zut.forEach(t),Hir=r(f$e," \u2014 "),Pz=n(f$e,"A",{href:!0});var Qut=s(Pz);Uir=r(Qut,"TFLayoutLMForMaskedLM"),Qut.forEach(t),Jir=r(f$e," (LayoutLM model)"),f$e.forEach(t),Yir=i(le),u7=n(le,"LI",{});var m$e=s(u7);b2e=n(m$e,"STRONG",{});var Wut=s(b2e);Kir=r(Wut,"lxmert"),Wut.forEach(t),Zir=r(m$e," \u2014 "),Iz=n(m$e,"A",{href:!0});var Hut=s(Iz);edr=r(Hut,"TFLxmertForPreTraining"),Hut.forEach(t),odr=r(m$e," (LXMERT model)"),m$e.forEach(t),rdr=i(le),_7=n(le,"LI",{});var g$e=s(_7);v2e=n(g$e,"STRONG",{});var Uut=s(v2e);tdr=r(Uut,"mobilebert"),Uut.forEach(t),adr=r(g$e," \u2014 "),qz=n(g$e,"A",{href:!0});var Jut=s(qz);ndr=r(Jut,"TFMobileBertForPreTraining"),Jut.forEach(t),sdr=r(g$e," (MobileBERT model)"),g$e.forEach(t),ldr=i(le),b7=n(le,"LI",{});var h$e=s(b7);F2e=n(h$e,"STRONG",{});var Yut=s(F2e);idr=r(Yut,"mpnet"),Yut.forEach(t),ddr=r(h$e," \u2014 "),Nz=n(h$e,"A",{href:!0});var Kut=s(Nz);cdr=r(Kut,"TFMPNetForMaskedLM"),Kut.forEach(t),fdr=r(h$e," (MPNet model)"),h$e.forEach(t),mdr=i(le),v7=n(le,"LI",{});var p$e=s(v7);T2e=n(p$e,"STRONG",{});var Zut=s(T2e);gdr=r(Zut,"openai-gpt"),Zut.forEach(t),hdr=r(p$e," \u2014 "),jz=n(p$e,"A",{href:!0});var e_t=s(jz);pdr=r(e_t,"TFOpenAIGPTLMHeadModel"),e_t.forEach(t),udr=r(p$e," (OpenAI GPT model)"),p$e.forEach(t),_dr=i(le),F7=n(le,"LI",{});var u$e=s(F7);M2e=n(u$e,"STRONG",{});var o_t=s(M2e);bdr=r(o_t,"roberta"),o_t.forEach(t),vdr=r(u$e," \u2014 "),Dz=n(u$e,"A",{href:!0});var r_t=s(Dz);Fdr=r(r_t,"TFRobertaForMaskedLM"),r_t.forEach(t),Tdr=r(u$e," (RoBERTa model)"),u$e.forEach(t),Mdr=i(le),T7=n(le,"LI",{});var _$e=s(T7);E2e=n(_$e,"STRONG",{});var t_t=s(E2e);Edr=r(t_t,"t5"),t_t.forEach(t),Cdr=r(_$e," \u2014 "),Gz=n(_$e,"A",{href:!0});var a_t=s(Gz);wdr=r(a_t,"TFT5ForConditionalGeneration"),a_t.forEach(t),Adr=r(_$e," (T5 model)"),_$e.forEach(t),ydr=i(le),M7=n(le,"LI",{});var b$e=s(M7);C2e=n(b$e,"STRONG",{});var n_t=s(C2e);Ldr=r(n_t,"tapas"),n_t.forEach(t),xdr=r(b$e," \u2014 "),Oz=n(b$e,"A",{href:!0});var s_t=s(Oz);$dr=r(s_t,"TFTapasForMaskedLM"),s_t.forEach(t),kdr=r(b$e," (TAPAS model)"),b$e.forEach(t),Sdr=i(le),E7=n(le,"LI",{});var v$e=s(E7);w2e=n(v$e,"STRONG",{});var l_t=s(w2e);Rdr=r(l_t,"transfo-xl"),l_t.forEach(t),Bdr=r(v$e," \u2014 "),Vz=n(v$e,"A",{href:!0});var i_t=s(Vz);Pdr=r(i_t,"TFTransfoXLLMHeadModel"),i_t.forEach(t),Idr=r(v$e," (Transformer-XL model)"),v$e.forEach(t),qdr=i(le),C7=n(le,"LI",{});var F$e=s(C7);A2e=n(F$e,"STRONG",{});var d_t=s(A2e);Ndr=r(d_t,"vit_mae"),d_t.forEach(t),jdr=r(F$e," \u2014 "),Xz=n(F$e,"A",{href:!0});var c_t=s(Xz);Ddr=r(c_t,"TFViTMAEForPreTraining"),c_t.forEach(t),Gdr=r(F$e," (ViTMAE model)"),F$e.forEach(t),Odr=i(le),w7=n(le,"LI",{});var T$e=s(w7);y2e=n(T$e,"STRONG",{});var f_t=s(y2e);Vdr=r(f_t,"xlm"),f_t.forEach(t),Xdr=r(T$e," \u2014 "),zz=n(T$e,"A",{href:!0});var m_t=s(zz);zdr=r(m_t,"TFXLMWithLMHeadModel"),m_t.forEach(t),Qdr=r(T$e," (XLM model)"),T$e.forEach(t),Wdr=i(le),A7=n(le,"LI",{});var M$e=s(A7);L2e=n(M$e,"STRONG",{});var g_t=s(L2e);Hdr=r(g_t,"xlm-roberta"),g_t.forEach(t),Udr=r(M$e," \u2014 "),Qz=n(M$e,"A",{href:!0});var h_t=s(Qz);Jdr=r(h_t,"TFXLMRobertaForMaskedLM"),h_t.forEach(t),Ydr=r(M$e," (XLM-RoBERTa model)"),M$e.forEach(t),Kdr=i(le),y7=n(le,"LI",{});var E$e=s(y7);x2e=n(E$e,"STRONG",{});var p_t=s(x2e);Zdr=r(p_t,"xlnet"),p_t.forEach(t),ecr=r(E$e," \u2014 "),Wz=n(E$e,"A",{href:!0});var u_t=s(Wz);ocr=r(u_t,"TFXLNetLMHeadModel"),u_t.forEach(t),rcr=r(E$e," (XLNet model)"),E$e.forEach(t),le.forEach(t),tcr=i(dl),T(L7.$$.fragment,dl),dl.forEach(t),il.forEach(t),rIe=i(f),Nd=n(f,"H2",{class:!0});var sNe=s(Nd);x7=n(sNe,"A",{id:!0,class:!0,href:!0});var __t=s(x7);$2e=n(__t,"SPAN",{});var b_t=s($2e);T(Ey.$$.fragment,b_t),b_t.forEach(t),__t.forEach(t),acr=i(sNe),k2e=n(sNe,"SPAN",{});var v_t=s(k2e);ncr=r(v_t,"TFAutoModelForCausalLM"),v_t.forEach(t),sNe.forEach(t),tIe=i(f),Zo=n(f,"DIV",{class:!0});var cl=s(Zo);T(Cy.$$.fragment,cl),scr=i(cl),jd=n(cl,"P",{});var $K=s(jd);lcr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Hz=n($K,"A",{href:!0});var F_t=s(Hz);icr=r(F_t,"from_pretrained()"),F_t.forEach(t),dcr=r($K," class method or the "),Uz=n($K,"A",{href:!0});var T_t=s(Uz);ccr=r(T_t,"from_config()"),T_t.forEach(t),fcr=r($K,` class
method.`),$K.forEach(t),mcr=i(cl),wy=n(cl,"P",{});var lNe=s(wy);gcr=r(lNe,"This class cannot be instantiated directly using "),S2e=n(lNe,"CODE",{});var M_t=s(S2e);hcr=r(M_t,"__init__()"),M_t.forEach(t),pcr=r(lNe," (throws an error)."),lNe.forEach(t),ucr=i(cl),wt=n(cl,"DIV",{class:!0});var I3=s(wt);T(Ay.$$.fragment,I3),_cr=i(I3),R2e=n(I3,"P",{});var E_t=s(R2e);bcr=r(E_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),E_t.forEach(t),vcr=i(I3),Dd=n(I3,"P",{});var kK=s(Dd);Fcr=r(kK,`Note:
Loading a model from its configuration file does `),B2e=n(kK,"STRONG",{});var C_t=s(B2e);Tcr=r(C_t,"not"),C_t.forEach(t),Mcr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(kK,"A",{href:!0});var w_t=s(Jz);Ecr=r(w_t,"from_pretrained()"),w_t.forEach(t),Ccr=r(kK," to load the model weights."),kK.forEach(t),wcr=i(I3),T($7.$$.fragment,I3),I3.forEach(t),Acr=i(cl),Ar=n(cl,"DIV",{class:!0});var fl=s(Ar);T(yy.$$.fragment,fl),ycr=i(fl),P2e=n(fl,"P",{});var A_t=s(P2e);Lcr=r(A_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),A_t.forEach(t),xcr=i(fl),Ya=n(fl,"P",{});var q3=s(Ya);$cr=r(q3,"The model class to instantiate is selected based on the "),I2e=n(q3,"CODE",{});var y_t=s(I2e);kcr=r(y_t,"model_type"),y_t.forEach(t),Scr=r(q3,` property of the config object (either
passed as an argument or loaded from `),q2e=n(q3,"CODE",{});var L_t=s(q2e);Rcr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),Bcr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(q3,"CODE",{});var x_t=s(N2e);Pcr=r(x_t,"pretrained_model_name_or_path"),x_t.forEach(t),Icr=r(q3,":"),q3.forEach(t),qcr=i(fl),Me=n(fl,"UL",{});var we=s(Me);k7=n(we,"LI",{});var C$e=s(k7);j2e=n(C$e,"STRONG",{});var $_t=s(j2e);Ncr=r($_t,"bert"),$_t.forEach(t),jcr=r(C$e," \u2014 "),Yz=n(C$e,"A",{href:!0});var k_t=s(Yz);Dcr=r(k_t,"TFBertLMHeadModel"),k_t.forEach(t),Gcr=r(C$e," (BERT model)"),C$e.forEach(t),Ocr=i(we),S7=n(we,"LI",{});var w$e=s(S7);D2e=n(w$e,"STRONG",{});var S_t=s(D2e);Vcr=r(S_t,"camembert"),S_t.forEach(t),Xcr=r(w$e," \u2014 "),Kz=n(w$e,"A",{href:!0});var R_t=s(Kz);zcr=r(R_t,"TFCamembertForCausalLM"),R_t.forEach(t),Qcr=r(w$e," (CamemBERT model)"),w$e.forEach(t),Wcr=i(we),R7=n(we,"LI",{});var A$e=s(R7);G2e=n(A$e,"STRONG",{});var B_t=s(G2e);Hcr=r(B_t,"ctrl"),B_t.forEach(t),Ucr=r(A$e," \u2014 "),Zz=n(A$e,"A",{href:!0});var P_t=s(Zz);Jcr=r(P_t,"TFCTRLLMHeadModel"),P_t.forEach(t),Ycr=r(A$e," (CTRL model)"),A$e.forEach(t),Kcr=i(we),B7=n(we,"LI",{});var y$e=s(B7);O2e=n(y$e,"STRONG",{});var I_t=s(O2e);Zcr=r(I_t,"gpt2"),I_t.forEach(t),efr=r(y$e," \u2014 "),eQ=n(y$e,"A",{href:!0});var q_t=s(eQ);ofr=r(q_t,"TFGPT2LMHeadModel"),q_t.forEach(t),rfr=r(y$e," (OpenAI GPT-2 model)"),y$e.forEach(t),tfr=i(we),P7=n(we,"LI",{});var L$e=s(P7);V2e=n(L$e,"STRONG",{});var N_t=s(V2e);afr=r(N_t,"gptj"),N_t.forEach(t),nfr=r(L$e," \u2014 "),oQ=n(L$e,"A",{href:!0});var j_t=s(oQ);sfr=r(j_t,"TFGPTJForCausalLM"),j_t.forEach(t),lfr=r(L$e," (GPT-J model)"),L$e.forEach(t),ifr=i(we),I7=n(we,"LI",{});var x$e=s(I7);X2e=n(x$e,"STRONG",{});var D_t=s(X2e);dfr=r(D_t,"openai-gpt"),D_t.forEach(t),cfr=r(x$e," \u2014 "),rQ=n(x$e,"A",{href:!0});var G_t=s(rQ);ffr=r(G_t,"TFOpenAIGPTLMHeadModel"),G_t.forEach(t),mfr=r(x$e," (OpenAI GPT model)"),x$e.forEach(t),gfr=i(we),q7=n(we,"LI",{});var $$e=s(q7);z2e=n($$e,"STRONG",{});var O_t=s(z2e);hfr=r(O_t,"rembert"),O_t.forEach(t),pfr=r($$e," \u2014 "),tQ=n($$e,"A",{href:!0});var V_t=s(tQ);ufr=r(V_t,"TFRemBertForCausalLM"),V_t.forEach(t),_fr=r($$e," (RemBERT model)"),$$e.forEach(t),bfr=i(we),N7=n(we,"LI",{});var k$e=s(N7);Q2e=n(k$e,"STRONG",{});var X_t=s(Q2e);vfr=r(X_t,"roberta"),X_t.forEach(t),Ffr=r(k$e," \u2014 "),aQ=n(k$e,"A",{href:!0});var z_t=s(aQ);Tfr=r(z_t,"TFRobertaForCausalLM"),z_t.forEach(t),Mfr=r(k$e," (RoBERTa model)"),k$e.forEach(t),Efr=i(we),j7=n(we,"LI",{});var S$e=s(j7);W2e=n(S$e,"STRONG",{});var Q_t=s(W2e);Cfr=r(Q_t,"roformer"),Q_t.forEach(t),wfr=r(S$e," \u2014 "),nQ=n(S$e,"A",{href:!0});var W_t=s(nQ);Afr=r(W_t,"TFRoFormerForCausalLM"),W_t.forEach(t),yfr=r(S$e," (RoFormer model)"),S$e.forEach(t),Lfr=i(we),D7=n(we,"LI",{});var R$e=s(D7);H2e=n(R$e,"STRONG",{});var H_t=s(H2e);xfr=r(H_t,"transfo-xl"),H_t.forEach(t),$fr=r(R$e," \u2014 "),sQ=n(R$e,"A",{href:!0});var U_t=s(sQ);kfr=r(U_t,"TFTransfoXLLMHeadModel"),U_t.forEach(t),Sfr=r(R$e," (Transformer-XL model)"),R$e.forEach(t),Rfr=i(we),G7=n(we,"LI",{});var B$e=s(G7);U2e=n(B$e,"STRONG",{});var J_t=s(U2e);Bfr=r(J_t,"xlm"),J_t.forEach(t),Pfr=r(B$e," \u2014 "),lQ=n(B$e,"A",{href:!0});var Y_t=s(lQ);Ifr=r(Y_t,"TFXLMWithLMHeadModel"),Y_t.forEach(t),qfr=r(B$e," (XLM model)"),B$e.forEach(t),Nfr=i(we),O7=n(we,"LI",{});var P$e=s(O7);J2e=n(P$e,"STRONG",{});var K_t=s(J2e);jfr=r(K_t,"xlnet"),K_t.forEach(t),Dfr=r(P$e," \u2014 "),iQ=n(P$e,"A",{href:!0});var Z_t=s(iQ);Gfr=r(Z_t,"TFXLNetLMHeadModel"),Z_t.forEach(t),Ofr=r(P$e," (XLNet model)"),P$e.forEach(t),we.forEach(t),Vfr=i(fl),T(V7.$$.fragment,fl),fl.forEach(t),cl.forEach(t),aIe=i(f),Gd=n(f,"H2",{class:!0});var iNe=s(Gd);X7=n(iNe,"A",{id:!0,class:!0,href:!0});var e2t=s(X7);Y2e=n(e2t,"SPAN",{});var o2t=s(Y2e);T(Ly.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),Xfr=i(iNe),K2e=n(iNe,"SPAN",{});var r2t=s(K2e);zfr=r(r2t,"TFAutoModelForImageClassification"),r2t.forEach(t),iNe.forEach(t),nIe=i(f),er=n(f,"DIV",{class:!0});var ml=s(er);T(xy.$$.fragment,ml),Qfr=i(ml),Od=n(ml,"P",{});var SK=s(Od);Wfr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dQ=n(SK,"A",{href:!0});var t2t=s(dQ);Hfr=r(t2t,"from_pretrained()"),t2t.forEach(t),Ufr=r(SK," class method or the "),cQ=n(SK,"A",{href:!0});var a2t=s(cQ);Jfr=r(a2t,"from_config()"),a2t.forEach(t),Yfr=r(SK,` class
method.`),SK.forEach(t),Kfr=i(ml),$y=n(ml,"P",{});var dNe=s($y);Zfr=r(dNe,"This class cannot be instantiated directly using "),Z2e=n(dNe,"CODE",{});var n2t=s(Z2e);emr=r(n2t,"__init__()"),n2t.forEach(t),omr=r(dNe," (throws an error)."),dNe.forEach(t),rmr=i(ml),At=n(ml,"DIV",{class:!0});var N3=s(At);T(ky.$$.fragment,N3),tmr=i(N3),e1e=n(N3,"P",{});var s2t=s(e1e);amr=r(s2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),s2t.forEach(t),nmr=i(N3),Vd=n(N3,"P",{});var RK=s(Vd);smr=r(RK,`Note:
Loading a model from its configuration file does `),o1e=n(RK,"STRONG",{});var l2t=s(o1e);lmr=r(l2t,"not"),l2t.forEach(t),imr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(RK,"A",{href:!0});var i2t=s(fQ);dmr=r(i2t,"from_pretrained()"),i2t.forEach(t),cmr=r(RK," to load the model weights."),RK.forEach(t),fmr=i(N3),T(z7.$$.fragment,N3),N3.forEach(t),mmr=i(ml),yr=n(ml,"DIV",{class:!0});var gl=s(yr);T(Sy.$$.fragment,gl),gmr=i(gl),r1e=n(gl,"P",{});var d2t=s(r1e);hmr=r(d2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),d2t.forEach(t),pmr=i(gl),Ka=n(gl,"P",{});var j3=s(Ka);umr=r(j3,"The model class to instantiate is selected based on the "),t1e=n(j3,"CODE",{});var c2t=s(t1e);_mr=r(c2t,"model_type"),c2t.forEach(t),bmr=r(j3,` property of the config object (either
passed as an argument or loaded from `),a1e=n(j3,"CODE",{});var f2t=s(a1e);vmr=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),Fmr=r(j3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(j3,"CODE",{});var m2t=s(n1e);Tmr=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),Mmr=r(j3,":"),j3.forEach(t),Emr=i(gl),Xd=n(gl,"UL",{});var BK=s(Xd);Q7=n(BK,"LI",{});var I$e=s(Q7);s1e=n(I$e,"STRONG",{});var g2t=s(s1e);Cmr=r(g2t,"convnext"),g2t.forEach(t),wmr=r(I$e," \u2014 "),mQ=n(I$e,"A",{href:!0});var h2t=s(mQ);Amr=r(h2t,"TFConvNextForImageClassification"),h2t.forEach(t),ymr=r(I$e," (ConvNext model)"),I$e.forEach(t),Lmr=i(BK),W7=n(BK,"LI",{});var q$e=s(W7);l1e=n(q$e,"STRONG",{});var p2t=s(l1e);xmr=r(p2t,"data2vec-vision"),p2t.forEach(t),$mr=r(q$e," \u2014 "),gQ=n(q$e,"A",{href:!0});var u2t=s(gQ);kmr=r(u2t,"TFData2VecVisionForImageClassification"),u2t.forEach(t),Smr=r(q$e," (Data2VecVision model)"),q$e.forEach(t),Rmr=i(BK),H7=n(BK,"LI",{});var N$e=s(H7);i1e=n(N$e,"STRONG",{});var _2t=s(i1e);Bmr=r(_2t,"vit"),_2t.forEach(t),Pmr=r(N$e," \u2014 "),hQ=n(N$e,"A",{href:!0});var b2t=s(hQ);Imr=r(b2t,"TFViTForImageClassification"),b2t.forEach(t),qmr=r(N$e," (ViT model)"),N$e.forEach(t),BK.forEach(t),Nmr=i(gl),T(U7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),sIe=i(f),zd=n(f,"H2",{class:!0});var cNe=s(zd);J7=n(cNe,"A",{id:!0,class:!0,href:!0});var v2t=s(J7);d1e=n(v2t,"SPAN",{});var F2t=s(d1e);T(Ry.$$.fragment,F2t),F2t.forEach(t),v2t.forEach(t),jmr=i(cNe),c1e=n(cNe,"SPAN",{});var T2t=s(c1e);Dmr=r(T2t,"TFAutoModelForMaskedLM"),T2t.forEach(t),cNe.forEach(t),lIe=i(f),or=n(f,"DIV",{class:!0});var hl=s(or);T(By.$$.fragment,hl),Gmr=i(hl),Qd=n(hl,"P",{});var PK=s(Qd);Omr=r(PK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pQ=n(PK,"A",{href:!0});var M2t=s(pQ);Vmr=r(M2t,"from_pretrained()"),M2t.forEach(t),Xmr=r(PK," class method or the "),uQ=n(PK,"A",{href:!0});var E2t=s(uQ);zmr=r(E2t,"from_config()"),E2t.forEach(t),Qmr=r(PK,` class
method.`),PK.forEach(t),Wmr=i(hl),Py=n(hl,"P",{});var fNe=s(Py);Hmr=r(fNe,"This class cannot be instantiated directly using "),f1e=n(fNe,"CODE",{});var C2t=s(f1e);Umr=r(C2t,"__init__()"),C2t.forEach(t),Jmr=r(fNe," (throws an error)."),fNe.forEach(t),Ymr=i(hl),yt=n(hl,"DIV",{class:!0});var D3=s(yt);T(Iy.$$.fragment,D3),Kmr=i(D3),m1e=n(D3,"P",{});var w2t=s(m1e);Zmr=r(w2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),w2t.forEach(t),egr=i(D3),Wd=n(D3,"P",{});var IK=s(Wd);ogr=r(IK,`Note:
Loading a model from its configuration file does `),g1e=n(IK,"STRONG",{});var A2t=s(g1e);rgr=r(A2t,"not"),A2t.forEach(t),tgr=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(IK,"A",{href:!0});var y2t=s(_Q);agr=r(y2t,"from_pretrained()"),y2t.forEach(t),ngr=r(IK," to load the model weights."),IK.forEach(t),sgr=i(D3),T(Y7.$$.fragment,D3),D3.forEach(t),lgr=i(hl),Lr=n(hl,"DIV",{class:!0});var pl=s(Lr);T(qy.$$.fragment,pl),igr=i(pl),h1e=n(pl,"P",{});var L2t=s(h1e);dgr=r(L2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L2t.forEach(t),cgr=i(pl),Za=n(pl,"P",{});var G3=s(Za);fgr=r(G3,"The model class to instantiate is selected based on the "),p1e=n(G3,"CODE",{});var x2t=s(p1e);mgr=r(x2t,"model_type"),x2t.forEach(t),ggr=r(G3,` property of the config object (either
passed as an argument or loaded from `),u1e=n(G3,"CODE",{});var $2t=s(u1e);hgr=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),pgr=r(G3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(G3,"CODE",{});var k2t=s(_1e);ugr=r(k2t,"pretrained_model_name_or_path"),k2t.forEach(t),_gr=r(G3,":"),G3.forEach(t),bgr=i(pl),ie=n(pl,"UL",{});var fe=s(ie);K7=n(fe,"LI",{});var j$e=s(K7);b1e=n(j$e,"STRONG",{});var S2t=s(b1e);vgr=r(S2t,"albert"),S2t.forEach(t),Fgr=r(j$e," \u2014 "),bQ=n(j$e,"A",{href:!0});var R2t=s(bQ);Tgr=r(R2t,"TFAlbertForMaskedLM"),R2t.forEach(t),Mgr=r(j$e," (ALBERT model)"),j$e.forEach(t),Egr=i(fe),Z7=n(fe,"LI",{});var D$e=s(Z7);v1e=n(D$e,"STRONG",{});var B2t=s(v1e);Cgr=r(B2t,"bert"),B2t.forEach(t),wgr=r(D$e," \u2014 "),vQ=n(D$e,"A",{href:!0});var P2t=s(vQ);Agr=r(P2t,"TFBertForMaskedLM"),P2t.forEach(t),ygr=r(D$e," (BERT model)"),D$e.forEach(t),Lgr=i(fe),e9=n(fe,"LI",{});var G$e=s(e9);F1e=n(G$e,"STRONG",{});var I2t=s(F1e);xgr=r(I2t,"camembert"),I2t.forEach(t),$gr=r(G$e," \u2014 "),FQ=n(G$e,"A",{href:!0});var q2t=s(FQ);kgr=r(q2t,"TFCamembertForMaskedLM"),q2t.forEach(t),Sgr=r(G$e," (CamemBERT model)"),G$e.forEach(t),Rgr=i(fe),o9=n(fe,"LI",{});var O$e=s(o9);T1e=n(O$e,"STRONG",{});var N2t=s(T1e);Bgr=r(N2t,"convbert"),N2t.forEach(t),Pgr=r(O$e," \u2014 "),TQ=n(O$e,"A",{href:!0});var j2t=s(TQ);Igr=r(j2t,"TFConvBertForMaskedLM"),j2t.forEach(t),qgr=r(O$e," (ConvBERT model)"),O$e.forEach(t),Ngr=i(fe),r9=n(fe,"LI",{});var V$e=s(r9);M1e=n(V$e,"STRONG",{});var D2t=s(M1e);jgr=r(D2t,"deberta"),D2t.forEach(t),Dgr=r(V$e," \u2014 "),MQ=n(V$e,"A",{href:!0});var G2t=s(MQ);Ggr=r(G2t,"TFDebertaForMaskedLM"),G2t.forEach(t),Ogr=r(V$e," (DeBERTa model)"),V$e.forEach(t),Vgr=i(fe),t9=n(fe,"LI",{});var X$e=s(t9);E1e=n(X$e,"STRONG",{});var O2t=s(E1e);Xgr=r(O2t,"deberta-v2"),O2t.forEach(t),zgr=r(X$e," \u2014 "),EQ=n(X$e,"A",{href:!0});var V2t=s(EQ);Qgr=r(V2t,"TFDebertaV2ForMaskedLM"),V2t.forEach(t),Wgr=r(X$e," (DeBERTa-v2 model)"),X$e.forEach(t),Hgr=i(fe),a9=n(fe,"LI",{});var z$e=s(a9);C1e=n(z$e,"STRONG",{});var X2t=s(C1e);Ugr=r(X2t,"distilbert"),X2t.forEach(t),Jgr=r(z$e," \u2014 "),CQ=n(z$e,"A",{href:!0});var z2t=s(CQ);Ygr=r(z2t,"TFDistilBertForMaskedLM"),z2t.forEach(t),Kgr=r(z$e," (DistilBERT model)"),z$e.forEach(t),Zgr=i(fe),n9=n(fe,"LI",{});var Q$e=s(n9);w1e=n(Q$e,"STRONG",{});var Q2t=s(w1e);ehr=r(Q2t,"electra"),Q2t.forEach(t),ohr=r(Q$e," \u2014 "),wQ=n(Q$e,"A",{href:!0});var W2t=s(wQ);rhr=r(W2t,"TFElectraForMaskedLM"),W2t.forEach(t),thr=r(Q$e," (ELECTRA model)"),Q$e.forEach(t),ahr=i(fe),s9=n(fe,"LI",{});var W$e=s(s9);A1e=n(W$e,"STRONG",{});var H2t=s(A1e);nhr=r(H2t,"flaubert"),H2t.forEach(t),shr=r(W$e," \u2014 "),AQ=n(W$e,"A",{href:!0});var U2t=s(AQ);lhr=r(U2t,"TFFlaubertWithLMHeadModel"),U2t.forEach(t),ihr=r(W$e," (FlauBERT model)"),W$e.forEach(t),dhr=i(fe),l9=n(fe,"LI",{});var H$e=s(l9);y1e=n(H$e,"STRONG",{});var J2t=s(y1e);chr=r(J2t,"funnel"),J2t.forEach(t),fhr=r(H$e," \u2014 "),yQ=n(H$e,"A",{href:!0});var Y2t=s(yQ);mhr=r(Y2t,"TFFunnelForMaskedLM"),Y2t.forEach(t),ghr=r(H$e," (Funnel Transformer model)"),H$e.forEach(t),hhr=i(fe),i9=n(fe,"LI",{});var U$e=s(i9);L1e=n(U$e,"STRONG",{});var K2t=s(L1e);phr=r(K2t,"layoutlm"),K2t.forEach(t),uhr=r(U$e," \u2014 "),LQ=n(U$e,"A",{href:!0});var Z2t=s(LQ);_hr=r(Z2t,"TFLayoutLMForMaskedLM"),Z2t.forEach(t),bhr=r(U$e," (LayoutLM model)"),U$e.forEach(t),vhr=i(fe),d9=n(fe,"LI",{});var J$e=s(d9);x1e=n(J$e,"STRONG",{});var e1t=s(x1e);Fhr=r(e1t,"longformer"),e1t.forEach(t),Thr=r(J$e," \u2014 "),xQ=n(J$e,"A",{href:!0});var o1t=s(xQ);Mhr=r(o1t,"TFLongformerForMaskedLM"),o1t.forEach(t),Ehr=r(J$e," (Longformer model)"),J$e.forEach(t),Chr=i(fe),c9=n(fe,"LI",{});var Y$e=s(c9);$1e=n(Y$e,"STRONG",{});var r1t=s($1e);whr=r(r1t,"mobilebert"),r1t.forEach(t),Ahr=r(Y$e," \u2014 "),$Q=n(Y$e,"A",{href:!0});var t1t=s($Q);yhr=r(t1t,"TFMobileBertForMaskedLM"),t1t.forEach(t),Lhr=r(Y$e," (MobileBERT model)"),Y$e.forEach(t),xhr=i(fe),f9=n(fe,"LI",{});var K$e=s(f9);k1e=n(K$e,"STRONG",{});var a1t=s(k1e);$hr=r(a1t,"mpnet"),a1t.forEach(t),khr=r(K$e," \u2014 "),kQ=n(K$e,"A",{href:!0});var n1t=s(kQ);Shr=r(n1t,"TFMPNetForMaskedLM"),n1t.forEach(t),Rhr=r(K$e," (MPNet model)"),K$e.forEach(t),Bhr=i(fe),m9=n(fe,"LI",{});var Z$e=s(m9);S1e=n(Z$e,"STRONG",{});var s1t=s(S1e);Phr=r(s1t,"rembert"),s1t.forEach(t),Ihr=r(Z$e," \u2014 "),SQ=n(Z$e,"A",{href:!0});var l1t=s(SQ);qhr=r(l1t,"TFRemBertForMaskedLM"),l1t.forEach(t),Nhr=r(Z$e," (RemBERT model)"),Z$e.forEach(t),jhr=i(fe),g9=n(fe,"LI",{});var eke=s(g9);R1e=n(eke,"STRONG",{});var i1t=s(R1e);Dhr=r(i1t,"roberta"),i1t.forEach(t),Ghr=r(eke," \u2014 "),RQ=n(eke,"A",{href:!0});var d1t=s(RQ);Ohr=r(d1t,"TFRobertaForMaskedLM"),d1t.forEach(t),Vhr=r(eke," (RoBERTa model)"),eke.forEach(t),Xhr=i(fe),h9=n(fe,"LI",{});var oke=s(h9);B1e=n(oke,"STRONG",{});var c1t=s(B1e);zhr=r(c1t,"roformer"),c1t.forEach(t),Qhr=r(oke," \u2014 "),BQ=n(oke,"A",{href:!0});var f1t=s(BQ);Whr=r(f1t,"TFRoFormerForMaskedLM"),f1t.forEach(t),Hhr=r(oke," (RoFormer model)"),oke.forEach(t),Uhr=i(fe),p9=n(fe,"LI",{});var rke=s(p9);P1e=n(rke,"STRONG",{});var m1t=s(P1e);Jhr=r(m1t,"tapas"),m1t.forEach(t),Yhr=r(rke," \u2014 "),PQ=n(rke,"A",{href:!0});var g1t=s(PQ);Khr=r(g1t,"TFTapasForMaskedLM"),g1t.forEach(t),Zhr=r(rke," (TAPAS model)"),rke.forEach(t),epr=i(fe),u9=n(fe,"LI",{});var tke=s(u9);I1e=n(tke,"STRONG",{});var h1t=s(I1e);opr=r(h1t,"xlm"),h1t.forEach(t),rpr=r(tke," \u2014 "),IQ=n(tke,"A",{href:!0});var p1t=s(IQ);tpr=r(p1t,"TFXLMWithLMHeadModel"),p1t.forEach(t),apr=r(tke," (XLM model)"),tke.forEach(t),npr=i(fe),_9=n(fe,"LI",{});var ake=s(_9);q1e=n(ake,"STRONG",{});var u1t=s(q1e);spr=r(u1t,"xlm-roberta"),u1t.forEach(t),lpr=r(ake," \u2014 "),qQ=n(ake,"A",{href:!0});var _1t=s(qQ);ipr=r(_1t,"TFXLMRobertaForMaskedLM"),_1t.forEach(t),dpr=r(ake," (XLM-RoBERTa model)"),ake.forEach(t),fe.forEach(t),cpr=i(pl),T(b9.$$.fragment,pl),pl.forEach(t),hl.forEach(t),iIe=i(f),Hd=n(f,"H2",{class:!0});var mNe=s(Hd);v9=n(mNe,"A",{id:!0,class:!0,href:!0});var b1t=s(v9);N1e=n(b1t,"SPAN",{});var v1t=s(N1e);T(Ny.$$.fragment,v1t),v1t.forEach(t),b1t.forEach(t),fpr=i(mNe),j1e=n(mNe,"SPAN",{});var F1t=s(j1e);mpr=r(F1t,"TFAutoModelForSeq2SeqLM"),F1t.forEach(t),mNe.forEach(t),dIe=i(f),rr=n(f,"DIV",{class:!0});var ul=s(rr);T(jy.$$.fragment,ul),gpr=i(ul),Ud=n(ul,"P",{});var qK=s(Ud);hpr=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),NQ=n(qK,"A",{href:!0});var T1t=s(NQ);ppr=r(T1t,"from_pretrained()"),T1t.forEach(t),upr=r(qK," class method or the "),jQ=n(qK,"A",{href:!0});var M1t=s(jQ);_pr=r(M1t,"from_config()"),M1t.forEach(t),bpr=r(qK,` class
method.`),qK.forEach(t),vpr=i(ul),Dy=n(ul,"P",{});var gNe=s(Dy);Fpr=r(gNe,"This class cannot be instantiated directly using "),D1e=n(gNe,"CODE",{});var E1t=s(D1e);Tpr=r(E1t,"__init__()"),E1t.forEach(t),Mpr=r(gNe," (throws an error)."),gNe.forEach(t),Epr=i(ul),Lt=n(ul,"DIV",{class:!0});var O3=s(Lt);T(Gy.$$.fragment,O3),Cpr=i(O3),G1e=n(O3,"P",{});var C1t=s(G1e);wpr=r(C1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),C1t.forEach(t),Apr=i(O3),Jd=n(O3,"P",{});var NK=s(Jd);ypr=r(NK,`Note:
Loading a model from its configuration file does `),O1e=n(NK,"STRONG",{});var w1t=s(O1e);Lpr=r(w1t,"not"),w1t.forEach(t),xpr=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(NK,"A",{href:!0});var A1t=s(DQ);$pr=r(A1t,"from_pretrained()"),A1t.forEach(t),kpr=r(NK," to load the model weights."),NK.forEach(t),Spr=i(O3),T(F9.$$.fragment,O3),O3.forEach(t),Rpr=i(ul),xr=n(ul,"DIV",{class:!0});var _l=s(xr);T(Oy.$$.fragment,_l),Bpr=i(_l),V1e=n(_l,"P",{});var y1t=s(V1e);Ppr=r(y1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),y1t.forEach(t),Ipr=i(_l),en=n(_l,"P",{});var V3=s(en);qpr=r(V3,"The model class to instantiate is selected based on the "),X1e=n(V3,"CODE",{});var L1t=s(X1e);Npr=r(L1t,"model_type"),L1t.forEach(t),jpr=r(V3,` property of the config object (either
passed as an argument or loaded from `),z1e=n(V3,"CODE",{});var x1t=s(z1e);Dpr=r(x1t,"pretrained_model_name_or_path"),x1t.forEach(t),Gpr=r(V3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q1e=n(V3,"CODE",{});var $1t=s(Q1e);Opr=r($1t,"pretrained_model_name_or_path"),$1t.forEach(t),Vpr=r(V3,":"),V3.forEach(t),Xpr=i(_l),ye=n(_l,"UL",{});var Re=s(ye);T9=n(Re,"LI",{});var nke=s(T9);W1e=n(nke,"STRONG",{});var k1t=s(W1e);zpr=r(k1t,"bart"),k1t.forEach(t),Qpr=r(nke," \u2014 "),GQ=n(nke,"A",{href:!0});var S1t=s(GQ);Wpr=r(S1t,"TFBartForConditionalGeneration"),S1t.forEach(t),Hpr=r(nke," (BART model)"),nke.forEach(t),Upr=i(Re),M9=n(Re,"LI",{});var ske=s(M9);H1e=n(ske,"STRONG",{});var R1t=s(H1e);Jpr=r(R1t,"blenderbot"),R1t.forEach(t),Ypr=r(ske," \u2014 "),OQ=n(ske,"A",{href:!0});var B1t=s(OQ);Kpr=r(B1t,"TFBlenderbotForConditionalGeneration"),B1t.forEach(t),Zpr=r(ske," (Blenderbot model)"),ske.forEach(t),eur=i(Re),E9=n(Re,"LI",{});var lke=s(E9);U1e=n(lke,"STRONG",{});var P1t=s(U1e);our=r(P1t,"blenderbot-small"),P1t.forEach(t),rur=r(lke," \u2014 "),VQ=n(lke,"A",{href:!0});var I1t=s(VQ);tur=r(I1t,"TFBlenderbotSmallForConditionalGeneration"),I1t.forEach(t),aur=r(lke," (BlenderbotSmall model)"),lke.forEach(t),nur=i(Re),C9=n(Re,"LI",{});var ike=s(C9);J1e=n(ike,"STRONG",{});var q1t=s(J1e);sur=r(q1t,"encoder-decoder"),q1t.forEach(t),lur=r(ike," \u2014 "),XQ=n(ike,"A",{href:!0});var N1t=s(XQ);iur=r(N1t,"TFEncoderDecoderModel"),N1t.forEach(t),dur=r(ike," (Encoder decoder model)"),ike.forEach(t),cur=i(Re),w9=n(Re,"LI",{});var dke=s(w9);Y1e=n(dke,"STRONG",{});var j1t=s(Y1e);fur=r(j1t,"led"),j1t.forEach(t),mur=r(dke," \u2014 "),zQ=n(dke,"A",{href:!0});var D1t=s(zQ);gur=r(D1t,"TFLEDForConditionalGeneration"),D1t.forEach(t),hur=r(dke," (LED model)"),dke.forEach(t),pur=i(Re),A9=n(Re,"LI",{});var cke=s(A9);K1e=n(cke,"STRONG",{});var G1t=s(K1e);uur=r(G1t,"marian"),G1t.forEach(t),_ur=r(cke," \u2014 "),QQ=n(cke,"A",{href:!0});var O1t=s(QQ);bur=r(O1t,"TFMarianMTModel"),O1t.forEach(t),vur=r(cke," (Marian model)"),cke.forEach(t),Fur=i(Re),y9=n(Re,"LI",{});var fke=s(y9);Z1e=n(fke,"STRONG",{});var V1t=s(Z1e);Tur=r(V1t,"mbart"),V1t.forEach(t),Mur=r(fke," \u2014 "),WQ=n(fke,"A",{href:!0});var X1t=s(WQ);Eur=r(X1t,"TFMBartForConditionalGeneration"),X1t.forEach(t),Cur=r(fke," (mBART model)"),fke.forEach(t),wur=i(Re),L9=n(Re,"LI",{});var mke=s(L9);ebe=n(mke,"STRONG",{});var z1t=s(ebe);Aur=r(z1t,"mt5"),z1t.forEach(t),yur=r(mke," \u2014 "),HQ=n(mke,"A",{href:!0});var Q1t=s(HQ);Lur=r(Q1t,"TFMT5ForConditionalGeneration"),Q1t.forEach(t),xur=r(mke," (mT5 model)"),mke.forEach(t),$ur=i(Re),x9=n(Re,"LI",{});var gke=s(x9);obe=n(gke,"STRONG",{});var W1t=s(obe);kur=r(W1t,"pegasus"),W1t.forEach(t),Sur=r(gke," \u2014 "),UQ=n(gke,"A",{href:!0});var H1t=s(UQ);Rur=r(H1t,"TFPegasusForConditionalGeneration"),H1t.forEach(t),Bur=r(gke," (Pegasus model)"),gke.forEach(t),Pur=i(Re),$9=n(Re,"LI",{});var hke=s($9);rbe=n(hke,"STRONG",{});var U1t=s(rbe);Iur=r(U1t,"t5"),U1t.forEach(t),qur=r(hke," \u2014 "),JQ=n(hke,"A",{href:!0});var J1t=s(JQ);Nur=r(J1t,"TFT5ForConditionalGeneration"),J1t.forEach(t),jur=r(hke," (T5 model)"),hke.forEach(t),Re.forEach(t),Dur=i(_l),T(k9.$$.fragment,_l),_l.forEach(t),ul.forEach(t),cIe=i(f),Yd=n(f,"H2",{class:!0});var hNe=s(Yd);S9=n(hNe,"A",{id:!0,class:!0,href:!0});var Y1t=s(S9);tbe=n(Y1t,"SPAN",{});var K1t=s(tbe);T(Vy.$$.fragment,K1t),K1t.forEach(t),Y1t.forEach(t),Gur=i(hNe),abe=n(hNe,"SPAN",{});var Z1t=s(abe);Our=r(Z1t,"TFAutoModelForSequenceClassification"),Z1t.forEach(t),hNe.forEach(t),fIe=i(f),tr=n(f,"DIV",{class:!0});var bl=s(tr);T(Xy.$$.fragment,bl),Vur=i(bl),Kd=n(bl,"P",{});var jK=s(Kd);Xur=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),YQ=n(jK,"A",{href:!0});var ebt=s(YQ);zur=r(ebt,"from_pretrained()"),ebt.forEach(t),Qur=r(jK," class method or the "),KQ=n(jK,"A",{href:!0});var obt=s(KQ);Wur=r(obt,"from_config()"),obt.forEach(t),Hur=r(jK,` class
method.`),jK.forEach(t),Uur=i(bl),zy=n(bl,"P",{});var pNe=s(zy);Jur=r(pNe,"This class cannot be instantiated directly using "),nbe=n(pNe,"CODE",{});var rbt=s(nbe);Yur=r(rbt,"__init__()"),rbt.forEach(t),Kur=r(pNe," (throws an error)."),pNe.forEach(t),Zur=i(bl),xt=n(bl,"DIV",{class:!0});var X3=s(xt);T(Qy.$$.fragment,X3),e_r=i(X3),sbe=n(X3,"P",{});var tbt=s(sbe);o_r=r(tbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tbt.forEach(t),r_r=i(X3),Zd=n(X3,"P",{});var DK=s(Zd);t_r=r(DK,`Note:
Loading a model from its configuration file does `),lbe=n(DK,"STRONG",{});var abt=s(lbe);a_r=r(abt,"not"),abt.forEach(t),n_r=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(DK,"A",{href:!0});var nbt=s(ZQ);s_r=r(nbt,"from_pretrained()"),nbt.forEach(t),l_r=r(DK," to load the model weights."),DK.forEach(t),i_r=i(X3),T(R9.$$.fragment,X3),X3.forEach(t),d_r=i(bl),$r=n(bl,"DIV",{class:!0});var vl=s($r);T(Wy.$$.fragment,vl),c_r=i(vl),ibe=n(vl,"P",{});var sbt=s(ibe);f_r=r(sbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),sbt.forEach(t),m_r=i(vl),on=n(vl,"P",{});var z3=s(on);g_r=r(z3,"The model class to instantiate is selected based on the "),dbe=n(z3,"CODE",{});var lbt=s(dbe);h_r=r(lbt,"model_type"),lbt.forEach(t),p_r=r(z3,` property of the config object (either
passed as an argument or loaded from `),cbe=n(z3,"CODE",{});var ibt=s(cbe);u_r=r(ibt,"pretrained_model_name_or_path"),ibt.forEach(t),__r=r(z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(z3,"CODE",{});var dbt=s(fbe);b_r=r(dbt,"pretrained_model_name_or_path"),dbt.forEach(t),v_r=r(z3,":"),z3.forEach(t),F_r=i(vl),Z=n(vl,"UL",{});var re=s(Z);B9=n(re,"LI",{});var pke=s(B9);mbe=n(pke,"STRONG",{});var cbt=s(mbe);T_r=r(cbt,"albert"),cbt.forEach(t),M_r=r(pke," \u2014 "),eW=n(pke,"A",{href:!0});var fbt=s(eW);E_r=r(fbt,"TFAlbertForSequenceClassification"),fbt.forEach(t),C_r=r(pke," (ALBERT model)"),pke.forEach(t),w_r=i(re),P9=n(re,"LI",{});var uke=s(P9);gbe=n(uke,"STRONG",{});var mbt=s(gbe);A_r=r(mbt,"bert"),mbt.forEach(t),y_r=r(uke," \u2014 "),oW=n(uke,"A",{href:!0});var gbt=s(oW);L_r=r(gbt,"TFBertForSequenceClassification"),gbt.forEach(t),x_r=r(uke," (BERT model)"),uke.forEach(t),$_r=i(re),I9=n(re,"LI",{});var _ke=s(I9);hbe=n(_ke,"STRONG",{});var hbt=s(hbe);k_r=r(hbt,"camembert"),hbt.forEach(t),S_r=r(_ke," \u2014 "),rW=n(_ke,"A",{href:!0});var pbt=s(rW);R_r=r(pbt,"TFCamembertForSequenceClassification"),pbt.forEach(t),B_r=r(_ke," (CamemBERT model)"),_ke.forEach(t),P_r=i(re),q9=n(re,"LI",{});var bke=s(q9);pbe=n(bke,"STRONG",{});var ubt=s(pbe);I_r=r(ubt,"convbert"),ubt.forEach(t),q_r=r(bke," \u2014 "),tW=n(bke,"A",{href:!0});var _bt=s(tW);N_r=r(_bt,"TFConvBertForSequenceClassification"),_bt.forEach(t),j_r=r(bke," (ConvBERT model)"),bke.forEach(t),D_r=i(re),N9=n(re,"LI",{});var vke=s(N9);ube=n(vke,"STRONG",{});var bbt=s(ube);G_r=r(bbt,"ctrl"),bbt.forEach(t),O_r=r(vke," \u2014 "),aW=n(vke,"A",{href:!0});var vbt=s(aW);V_r=r(vbt,"TFCTRLForSequenceClassification"),vbt.forEach(t),X_r=r(vke," (CTRL model)"),vke.forEach(t),z_r=i(re),j9=n(re,"LI",{});var Fke=s(j9);_be=n(Fke,"STRONG",{});var Fbt=s(_be);Q_r=r(Fbt,"deberta"),Fbt.forEach(t),W_r=r(Fke," \u2014 "),nW=n(Fke,"A",{href:!0});var Tbt=s(nW);H_r=r(Tbt,"TFDebertaForSequenceClassification"),Tbt.forEach(t),U_r=r(Fke," (DeBERTa model)"),Fke.forEach(t),J_r=i(re),D9=n(re,"LI",{});var Tke=s(D9);bbe=n(Tke,"STRONG",{});var Mbt=s(bbe);Y_r=r(Mbt,"deberta-v2"),Mbt.forEach(t),K_r=r(Tke," \u2014 "),sW=n(Tke,"A",{href:!0});var Ebt=s(sW);Z_r=r(Ebt,"TFDebertaV2ForSequenceClassification"),Ebt.forEach(t),e2r=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),o2r=i(re),G9=n(re,"LI",{});var Mke=s(G9);vbe=n(Mke,"STRONG",{});var Cbt=s(vbe);r2r=r(Cbt,"distilbert"),Cbt.forEach(t),t2r=r(Mke," \u2014 "),lW=n(Mke,"A",{href:!0});var wbt=s(lW);a2r=r(wbt,"TFDistilBertForSequenceClassification"),wbt.forEach(t),n2r=r(Mke," (DistilBERT model)"),Mke.forEach(t),s2r=i(re),O9=n(re,"LI",{});var Eke=s(O9);Fbe=n(Eke,"STRONG",{});var Abt=s(Fbe);l2r=r(Abt,"electra"),Abt.forEach(t),i2r=r(Eke," \u2014 "),iW=n(Eke,"A",{href:!0});var ybt=s(iW);d2r=r(ybt,"TFElectraForSequenceClassification"),ybt.forEach(t),c2r=r(Eke," (ELECTRA model)"),Eke.forEach(t),f2r=i(re),V9=n(re,"LI",{});var Cke=s(V9);Tbe=n(Cke,"STRONG",{});var Lbt=s(Tbe);m2r=r(Lbt,"flaubert"),Lbt.forEach(t),g2r=r(Cke," \u2014 "),dW=n(Cke,"A",{href:!0});var xbt=s(dW);h2r=r(xbt,"TFFlaubertForSequenceClassification"),xbt.forEach(t),p2r=r(Cke," (FlauBERT model)"),Cke.forEach(t),u2r=i(re),X9=n(re,"LI",{});var wke=s(X9);Mbe=n(wke,"STRONG",{});var $bt=s(Mbe);_2r=r($bt,"funnel"),$bt.forEach(t),b2r=r(wke," \u2014 "),cW=n(wke,"A",{href:!0});var kbt=s(cW);v2r=r(kbt,"TFFunnelForSequenceClassification"),kbt.forEach(t),F2r=r(wke," (Funnel Transformer model)"),wke.forEach(t),T2r=i(re),z9=n(re,"LI",{});var Ake=s(z9);Ebe=n(Ake,"STRONG",{});var Sbt=s(Ebe);M2r=r(Sbt,"gpt2"),Sbt.forEach(t),E2r=r(Ake," \u2014 "),fW=n(Ake,"A",{href:!0});var Rbt=s(fW);C2r=r(Rbt,"TFGPT2ForSequenceClassification"),Rbt.forEach(t),w2r=r(Ake," (OpenAI GPT-2 model)"),Ake.forEach(t),A2r=i(re),Q9=n(re,"LI",{});var yke=s(Q9);Cbe=n(yke,"STRONG",{});var Bbt=s(Cbe);y2r=r(Bbt,"gptj"),Bbt.forEach(t),L2r=r(yke," \u2014 "),mW=n(yke,"A",{href:!0});var Pbt=s(mW);x2r=r(Pbt,"TFGPTJForSequenceClassification"),Pbt.forEach(t),$2r=r(yke," (GPT-J model)"),yke.forEach(t),k2r=i(re),W9=n(re,"LI",{});var Lke=s(W9);wbe=n(Lke,"STRONG",{});var Ibt=s(wbe);S2r=r(Ibt,"layoutlm"),Ibt.forEach(t),R2r=r(Lke," \u2014 "),gW=n(Lke,"A",{href:!0});var qbt=s(gW);B2r=r(qbt,"TFLayoutLMForSequenceClassification"),qbt.forEach(t),P2r=r(Lke," (LayoutLM model)"),Lke.forEach(t),I2r=i(re),H9=n(re,"LI",{});var xke=s(H9);Abe=n(xke,"STRONG",{});var Nbt=s(Abe);q2r=r(Nbt,"longformer"),Nbt.forEach(t),N2r=r(xke," \u2014 "),hW=n(xke,"A",{href:!0});var jbt=s(hW);j2r=r(jbt,"TFLongformerForSequenceClassification"),jbt.forEach(t),D2r=r(xke," (Longformer model)"),xke.forEach(t),G2r=i(re),U9=n(re,"LI",{});var $ke=s(U9);ybe=n($ke,"STRONG",{});var Dbt=s(ybe);O2r=r(Dbt,"mobilebert"),Dbt.forEach(t),V2r=r($ke," \u2014 "),pW=n($ke,"A",{href:!0});var Gbt=s(pW);X2r=r(Gbt,"TFMobileBertForSequenceClassification"),Gbt.forEach(t),z2r=r($ke," (MobileBERT model)"),$ke.forEach(t),Q2r=i(re),J9=n(re,"LI",{});var kke=s(J9);Lbe=n(kke,"STRONG",{});var Obt=s(Lbe);W2r=r(Obt,"mpnet"),Obt.forEach(t),H2r=r(kke," \u2014 "),uW=n(kke,"A",{href:!0});var Vbt=s(uW);U2r=r(Vbt,"TFMPNetForSequenceClassification"),Vbt.forEach(t),J2r=r(kke," (MPNet model)"),kke.forEach(t),Y2r=i(re),Y9=n(re,"LI",{});var Ske=s(Y9);xbe=n(Ske,"STRONG",{});var Xbt=s(xbe);K2r=r(Xbt,"openai-gpt"),Xbt.forEach(t),Z2r=r(Ske," \u2014 "),_W=n(Ske,"A",{href:!0});var zbt=s(_W);e1r=r(zbt,"TFOpenAIGPTForSequenceClassification"),zbt.forEach(t),o1r=r(Ske," (OpenAI GPT model)"),Ske.forEach(t),r1r=i(re),K9=n(re,"LI",{});var Rke=s(K9);$be=n(Rke,"STRONG",{});var Qbt=s($be);t1r=r(Qbt,"rembert"),Qbt.forEach(t),a1r=r(Rke," \u2014 "),bW=n(Rke,"A",{href:!0});var Wbt=s(bW);n1r=r(Wbt,"TFRemBertForSequenceClassification"),Wbt.forEach(t),s1r=r(Rke," (RemBERT model)"),Rke.forEach(t),l1r=i(re),Z9=n(re,"LI",{});var Bke=s(Z9);kbe=n(Bke,"STRONG",{});var Hbt=s(kbe);i1r=r(Hbt,"roberta"),Hbt.forEach(t),d1r=r(Bke," \u2014 "),vW=n(Bke,"A",{href:!0});var Ubt=s(vW);c1r=r(Ubt,"TFRobertaForSequenceClassification"),Ubt.forEach(t),f1r=r(Bke," (RoBERTa model)"),Bke.forEach(t),m1r=i(re),eM=n(re,"LI",{});var Pke=s(eM);Sbe=n(Pke,"STRONG",{});var Jbt=s(Sbe);g1r=r(Jbt,"roformer"),Jbt.forEach(t),h1r=r(Pke," \u2014 "),FW=n(Pke,"A",{href:!0});var Ybt=s(FW);p1r=r(Ybt,"TFRoFormerForSequenceClassification"),Ybt.forEach(t),u1r=r(Pke," (RoFormer model)"),Pke.forEach(t),_1r=i(re),oM=n(re,"LI",{});var Ike=s(oM);Rbe=n(Ike,"STRONG",{});var Kbt=s(Rbe);b1r=r(Kbt,"tapas"),Kbt.forEach(t),v1r=r(Ike," \u2014 "),TW=n(Ike,"A",{href:!0});var Zbt=s(TW);F1r=r(Zbt,"TFTapasForSequenceClassification"),Zbt.forEach(t),T1r=r(Ike," (TAPAS model)"),Ike.forEach(t),M1r=i(re),rM=n(re,"LI",{});var qke=s(rM);Bbe=n(qke,"STRONG",{});var evt=s(Bbe);E1r=r(evt,"transfo-xl"),evt.forEach(t),C1r=r(qke," \u2014 "),MW=n(qke,"A",{href:!0});var ovt=s(MW);w1r=r(ovt,"TFTransfoXLForSequenceClassification"),ovt.forEach(t),A1r=r(qke," (Transformer-XL model)"),qke.forEach(t),y1r=i(re),tM=n(re,"LI",{});var Nke=s(tM);Pbe=n(Nke,"STRONG",{});var rvt=s(Pbe);L1r=r(rvt,"xlm"),rvt.forEach(t),x1r=r(Nke," \u2014 "),EW=n(Nke,"A",{href:!0});var tvt=s(EW);$1r=r(tvt,"TFXLMForSequenceClassification"),tvt.forEach(t),k1r=r(Nke," (XLM model)"),Nke.forEach(t),S1r=i(re),aM=n(re,"LI",{});var jke=s(aM);Ibe=n(jke,"STRONG",{});var avt=s(Ibe);R1r=r(avt,"xlm-roberta"),avt.forEach(t),B1r=r(jke," \u2014 "),CW=n(jke,"A",{href:!0});var nvt=s(CW);P1r=r(nvt,"TFXLMRobertaForSequenceClassification"),nvt.forEach(t),I1r=r(jke," (XLM-RoBERTa model)"),jke.forEach(t),q1r=i(re),nM=n(re,"LI",{});var Dke=s(nM);qbe=n(Dke,"STRONG",{});var svt=s(qbe);N1r=r(svt,"xlnet"),svt.forEach(t),j1r=r(Dke," \u2014 "),wW=n(Dke,"A",{href:!0});var lvt=s(wW);D1r=r(lvt,"TFXLNetForSequenceClassification"),lvt.forEach(t),G1r=r(Dke," (XLNet model)"),Dke.forEach(t),re.forEach(t),O1r=i(vl),T(sM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),mIe=i(f),ec=n(f,"H2",{class:!0});var uNe=s(ec);lM=n(uNe,"A",{id:!0,class:!0,href:!0});var ivt=s(lM);Nbe=n(ivt,"SPAN",{});var dvt=s(Nbe);T(Hy.$$.fragment,dvt),dvt.forEach(t),ivt.forEach(t),V1r=i(uNe),jbe=n(uNe,"SPAN",{});var cvt=s(jbe);X1r=r(cvt,"TFAutoModelForMultipleChoice"),cvt.forEach(t),uNe.forEach(t),gIe=i(f),ar=n(f,"DIV",{class:!0});var Fl=s(ar);T(Uy.$$.fragment,Fl),z1r=i(Fl),oc=n(Fl,"P",{});var GK=s(oc);Q1r=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),AW=n(GK,"A",{href:!0});var fvt=s(AW);W1r=r(fvt,"from_pretrained()"),fvt.forEach(t),H1r=r(GK," class method or the "),yW=n(GK,"A",{href:!0});var mvt=s(yW);U1r=r(mvt,"from_config()"),mvt.forEach(t),J1r=r(GK,` class
method.`),GK.forEach(t),Y1r=i(Fl),Jy=n(Fl,"P",{});var _Ne=s(Jy);K1r=r(_Ne,"This class cannot be instantiated directly using "),Dbe=n(_Ne,"CODE",{});var gvt=s(Dbe);Z1r=r(gvt,"__init__()"),gvt.forEach(t),ebr=r(_Ne," (throws an error)."),_Ne.forEach(t),obr=i(Fl),$t=n(Fl,"DIV",{class:!0});var Q3=s($t);T(Yy.$$.fragment,Q3),rbr=i(Q3),Gbe=n(Q3,"P",{});var hvt=s(Gbe);tbr=r(hvt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hvt.forEach(t),abr=i(Q3),rc=n(Q3,"P",{});var OK=s(rc);nbr=r(OK,`Note:
Loading a model from its configuration file does `),Obe=n(OK,"STRONG",{});var pvt=s(Obe);sbr=r(pvt,"not"),pvt.forEach(t),lbr=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(OK,"A",{href:!0});var uvt=s(LW);ibr=r(uvt,"from_pretrained()"),uvt.forEach(t),dbr=r(OK," to load the model weights."),OK.forEach(t),cbr=i(Q3),T(iM.$$.fragment,Q3),Q3.forEach(t),fbr=i(Fl),kr=n(Fl,"DIV",{class:!0});var Tl=s(kr);T(Ky.$$.fragment,Tl),mbr=i(Tl),Vbe=n(Tl,"P",{});var _vt=s(Vbe);gbr=r(_vt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_vt.forEach(t),hbr=i(Tl),rn=n(Tl,"P",{});var W3=s(rn);pbr=r(W3,"The model class to instantiate is selected based on the "),Xbe=n(W3,"CODE",{});var bvt=s(Xbe);ubr=r(bvt,"model_type"),bvt.forEach(t),_br=r(W3,` property of the config object (either
passed as an argument or loaded from `),zbe=n(W3,"CODE",{});var vvt=s(zbe);bbr=r(vvt,"pretrained_model_name_or_path"),vvt.forEach(t),vbr=r(W3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(W3,"CODE",{});var Fvt=s(Qbe);Fbr=r(Fvt,"pretrained_model_name_or_path"),Fvt.forEach(t),Tbr=r(W3,":"),W3.forEach(t),Mbr=i(Tl),pe=n(Tl,"UL",{});var _e=s(pe);dM=n(_e,"LI",{});var Gke=s(dM);Wbe=n(Gke,"STRONG",{});var Tvt=s(Wbe);Ebr=r(Tvt,"albert"),Tvt.forEach(t),Cbr=r(Gke," \u2014 "),xW=n(Gke,"A",{href:!0});var Mvt=s(xW);wbr=r(Mvt,"TFAlbertForMultipleChoice"),Mvt.forEach(t),Abr=r(Gke," (ALBERT model)"),Gke.forEach(t),ybr=i(_e),cM=n(_e,"LI",{});var Oke=s(cM);Hbe=n(Oke,"STRONG",{});var Evt=s(Hbe);Lbr=r(Evt,"bert"),Evt.forEach(t),xbr=r(Oke," \u2014 "),$W=n(Oke,"A",{href:!0});var Cvt=s($W);$br=r(Cvt,"TFBertForMultipleChoice"),Cvt.forEach(t),kbr=r(Oke," (BERT model)"),Oke.forEach(t),Sbr=i(_e),fM=n(_e,"LI",{});var Vke=s(fM);Ube=n(Vke,"STRONG",{});var wvt=s(Ube);Rbr=r(wvt,"camembert"),wvt.forEach(t),Bbr=r(Vke," \u2014 "),kW=n(Vke,"A",{href:!0});var Avt=s(kW);Pbr=r(Avt,"TFCamembertForMultipleChoice"),Avt.forEach(t),Ibr=r(Vke," (CamemBERT model)"),Vke.forEach(t),qbr=i(_e),mM=n(_e,"LI",{});var Xke=s(mM);Jbe=n(Xke,"STRONG",{});var yvt=s(Jbe);Nbr=r(yvt,"convbert"),yvt.forEach(t),jbr=r(Xke," \u2014 "),SW=n(Xke,"A",{href:!0});var Lvt=s(SW);Dbr=r(Lvt,"TFConvBertForMultipleChoice"),Lvt.forEach(t),Gbr=r(Xke," (ConvBERT model)"),Xke.forEach(t),Obr=i(_e),gM=n(_e,"LI",{});var zke=s(gM);Ybe=n(zke,"STRONG",{});var xvt=s(Ybe);Vbr=r(xvt,"distilbert"),xvt.forEach(t),Xbr=r(zke," \u2014 "),RW=n(zke,"A",{href:!0});var $vt=s(RW);zbr=r($vt,"TFDistilBertForMultipleChoice"),$vt.forEach(t),Qbr=r(zke," (DistilBERT model)"),zke.forEach(t),Wbr=i(_e),hM=n(_e,"LI",{});var Qke=s(hM);Kbe=n(Qke,"STRONG",{});var kvt=s(Kbe);Hbr=r(kvt,"electra"),kvt.forEach(t),Ubr=r(Qke," \u2014 "),BW=n(Qke,"A",{href:!0});var Svt=s(BW);Jbr=r(Svt,"TFElectraForMultipleChoice"),Svt.forEach(t),Ybr=r(Qke," (ELECTRA model)"),Qke.forEach(t),Kbr=i(_e),pM=n(_e,"LI",{});var Wke=s(pM);Zbe=n(Wke,"STRONG",{});var Rvt=s(Zbe);Zbr=r(Rvt,"flaubert"),Rvt.forEach(t),evr=r(Wke," \u2014 "),PW=n(Wke,"A",{href:!0});var Bvt=s(PW);ovr=r(Bvt,"TFFlaubertForMultipleChoice"),Bvt.forEach(t),rvr=r(Wke," (FlauBERT model)"),Wke.forEach(t),tvr=i(_e),uM=n(_e,"LI",{});var Hke=s(uM);eve=n(Hke,"STRONG",{});var Pvt=s(eve);avr=r(Pvt,"funnel"),Pvt.forEach(t),nvr=r(Hke," \u2014 "),IW=n(Hke,"A",{href:!0});var Ivt=s(IW);svr=r(Ivt,"TFFunnelForMultipleChoice"),Ivt.forEach(t),lvr=r(Hke," (Funnel Transformer model)"),Hke.forEach(t),ivr=i(_e),_M=n(_e,"LI",{});var Uke=s(_M);ove=n(Uke,"STRONG",{});var qvt=s(ove);dvr=r(qvt,"longformer"),qvt.forEach(t),cvr=r(Uke," \u2014 "),qW=n(Uke,"A",{href:!0});var Nvt=s(qW);fvr=r(Nvt,"TFLongformerForMultipleChoice"),Nvt.forEach(t),mvr=r(Uke," (Longformer model)"),Uke.forEach(t),gvr=i(_e),bM=n(_e,"LI",{});var Jke=s(bM);rve=n(Jke,"STRONG",{});var jvt=s(rve);hvr=r(jvt,"mobilebert"),jvt.forEach(t),pvr=r(Jke," \u2014 "),NW=n(Jke,"A",{href:!0});var Dvt=s(NW);uvr=r(Dvt,"TFMobileBertForMultipleChoice"),Dvt.forEach(t),_vr=r(Jke," (MobileBERT model)"),Jke.forEach(t),bvr=i(_e),vM=n(_e,"LI",{});var Yke=s(vM);tve=n(Yke,"STRONG",{});var Gvt=s(tve);vvr=r(Gvt,"mpnet"),Gvt.forEach(t),Fvr=r(Yke," \u2014 "),jW=n(Yke,"A",{href:!0});var Ovt=s(jW);Tvr=r(Ovt,"TFMPNetForMultipleChoice"),Ovt.forEach(t),Mvr=r(Yke," (MPNet model)"),Yke.forEach(t),Evr=i(_e),FM=n(_e,"LI",{});var Kke=s(FM);ave=n(Kke,"STRONG",{});var Vvt=s(ave);Cvr=r(Vvt,"rembert"),Vvt.forEach(t),wvr=r(Kke," \u2014 "),DW=n(Kke,"A",{href:!0});var Xvt=s(DW);Avr=r(Xvt,"TFRemBertForMultipleChoice"),Xvt.forEach(t),yvr=r(Kke," (RemBERT model)"),Kke.forEach(t),Lvr=i(_e),TM=n(_e,"LI",{});var Zke=s(TM);nve=n(Zke,"STRONG",{});var zvt=s(nve);xvr=r(zvt,"roberta"),zvt.forEach(t),$vr=r(Zke," \u2014 "),GW=n(Zke,"A",{href:!0});var Qvt=s(GW);kvr=r(Qvt,"TFRobertaForMultipleChoice"),Qvt.forEach(t),Svr=r(Zke," (RoBERTa model)"),Zke.forEach(t),Rvr=i(_e),MM=n(_e,"LI",{});var eSe=s(MM);sve=n(eSe,"STRONG",{});var Wvt=s(sve);Bvr=r(Wvt,"roformer"),Wvt.forEach(t),Pvr=r(eSe," \u2014 "),OW=n(eSe,"A",{href:!0});var Hvt=s(OW);Ivr=r(Hvt,"TFRoFormerForMultipleChoice"),Hvt.forEach(t),qvr=r(eSe," (RoFormer model)"),eSe.forEach(t),Nvr=i(_e),EM=n(_e,"LI",{});var oSe=s(EM);lve=n(oSe,"STRONG",{});var Uvt=s(lve);jvr=r(Uvt,"xlm"),Uvt.forEach(t),Dvr=r(oSe," \u2014 "),VW=n(oSe,"A",{href:!0});var Jvt=s(VW);Gvr=r(Jvt,"TFXLMForMultipleChoice"),Jvt.forEach(t),Ovr=r(oSe," (XLM model)"),oSe.forEach(t),Vvr=i(_e),CM=n(_e,"LI",{});var rSe=s(CM);ive=n(rSe,"STRONG",{});var Yvt=s(ive);Xvr=r(Yvt,"xlm-roberta"),Yvt.forEach(t),zvr=r(rSe," \u2014 "),XW=n(rSe,"A",{href:!0});var Kvt=s(XW);Qvr=r(Kvt,"TFXLMRobertaForMultipleChoice"),Kvt.forEach(t),Wvr=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),Hvr=i(_e),wM=n(_e,"LI",{});var tSe=s(wM);dve=n(tSe,"STRONG",{});var Zvt=s(dve);Uvr=r(Zvt,"xlnet"),Zvt.forEach(t),Jvr=r(tSe," \u2014 "),zW=n(tSe,"A",{href:!0});var eFt=s(zW);Yvr=r(eFt,"TFXLNetForMultipleChoice"),eFt.forEach(t),Kvr=r(tSe," (XLNet model)"),tSe.forEach(t),_e.forEach(t),Zvr=i(Tl),T(AM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),hIe=i(f),tc=n(f,"H2",{class:!0});var bNe=s(tc);yM=n(bNe,"A",{id:!0,class:!0,href:!0});var oFt=s(yM);cve=n(oFt,"SPAN",{});var rFt=s(cve);T(Zy.$$.fragment,rFt),rFt.forEach(t),oFt.forEach(t),eFr=i(bNe),fve=n(bNe,"SPAN",{});var tFt=s(fve);oFr=r(tFt,"TFAutoModelForTableQuestionAnswering"),tFt.forEach(t),bNe.forEach(t),pIe=i(f),nr=n(f,"DIV",{class:!0});var Ml=s(nr);T(eL.$$.fragment,Ml),rFr=i(Ml),ac=n(Ml,"P",{});var VK=s(ac);tFr=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),QW=n(VK,"A",{href:!0});var aFt=s(QW);aFr=r(aFt,"from_pretrained()"),aFt.forEach(t),nFr=r(VK," class method or the "),WW=n(VK,"A",{href:!0});var nFt=s(WW);sFr=r(nFt,"from_config()"),nFt.forEach(t),lFr=r(VK,` class
method.`),VK.forEach(t),iFr=i(Ml),oL=n(Ml,"P",{});var vNe=s(oL);dFr=r(vNe,"This class cannot be instantiated directly using "),mve=n(vNe,"CODE",{});var sFt=s(mve);cFr=r(sFt,"__init__()"),sFt.forEach(t),fFr=r(vNe," (throws an error)."),vNe.forEach(t),mFr=i(Ml),kt=n(Ml,"DIV",{class:!0});var H3=s(kt);T(rL.$$.fragment,H3),gFr=i(H3),gve=n(H3,"P",{});var lFt=s(gve);hFr=r(lFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lFt.forEach(t),pFr=i(H3),nc=n(H3,"P",{});var XK=s(nc);uFr=r(XK,`Note:
Loading a model from its configuration file does `),hve=n(XK,"STRONG",{});var iFt=s(hve);_Fr=r(iFt,"not"),iFt.forEach(t),bFr=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HW=n(XK,"A",{href:!0});var dFt=s(HW);vFr=r(dFt,"from_pretrained()"),dFt.forEach(t),FFr=r(XK," to load the model weights."),XK.forEach(t),TFr=i(H3),T(LM.$$.fragment,H3),H3.forEach(t),MFr=i(Ml),Sr=n(Ml,"DIV",{class:!0});var El=s(Sr);T(tL.$$.fragment,El),EFr=i(El),pve=n(El,"P",{});var cFt=s(pve);CFr=r(cFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),cFt.forEach(t),wFr=i(El),tn=n(El,"P",{});var U3=s(tn);AFr=r(U3,"The model class to instantiate is selected based on the "),uve=n(U3,"CODE",{});var fFt=s(uve);yFr=r(fFt,"model_type"),fFt.forEach(t),LFr=r(U3,` property of the config object (either
passed as an argument or loaded from `),_ve=n(U3,"CODE",{});var mFt=s(_ve);xFr=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),$Fr=r(U3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bve=n(U3,"CODE",{});var gFt=s(bve);kFr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),SFr=r(U3,":"),U3.forEach(t),RFr=i(El),vve=n(El,"UL",{});var hFt=s(vve);xM=n(hFt,"LI",{});var aSe=s(xM);Fve=n(aSe,"STRONG",{});var pFt=s(Fve);BFr=r(pFt,"tapas"),pFt.forEach(t),PFr=r(aSe," \u2014 "),UW=n(aSe,"A",{href:!0});var uFt=s(UW);IFr=r(uFt,"TFTapasForQuestionAnswering"),uFt.forEach(t),qFr=r(aSe," (TAPAS model)"),aSe.forEach(t),hFt.forEach(t),NFr=i(El),T($M.$$.fragment,El),El.forEach(t),Ml.forEach(t),uIe=i(f),sc=n(f,"H2",{class:!0});var FNe=s(sc);kM=n(FNe,"A",{id:!0,class:!0,href:!0});var _Ft=s(kM);Tve=n(_Ft,"SPAN",{});var bFt=s(Tve);T(aL.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),jFr=i(FNe),Mve=n(FNe,"SPAN",{});var vFt=s(Mve);DFr=r(vFt,"TFAutoModelForTokenClassification"),vFt.forEach(t),FNe.forEach(t),_Ie=i(f),sr=n(f,"DIV",{class:!0});var Cl=s(sr);T(nL.$$.fragment,Cl),GFr=i(Cl),lc=n(Cl,"P",{});var zK=s(lc);OFr=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),JW=n(zK,"A",{href:!0});var FFt=s(JW);VFr=r(FFt,"from_pretrained()"),FFt.forEach(t),XFr=r(zK," class method or the "),YW=n(zK,"A",{href:!0});var TFt=s(YW);zFr=r(TFt,"from_config()"),TFt.forEach(t),QFr=r(zK,` class
method.`),zK.forEach(t),WFr=i(Cl),sL=n(Cl,"P",{});var TNe=s(sL);HFr=r(TNe,"This class cannot be instantiated directly using "),Eve=n(TNe,"CODE",{});var MFt=s(Eve);UFr=r(MFt,"__init__()"),MFt.forEach(t),JFr=r(TNe," (throws an error)."),TNe.forEach(t),YFr=i(Cl),St=n(Cl,"DIV",{class:!0});var J3=s(St);T(lL.$$.fragment,J3),KFr=i(J3),Cve=n(J3,"P",{});var EFt=s(Cve);ZFr=r(EFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EFt.forEach(t),e6r=i(J3),ic=n(J3,"P",{});var QK=s(ic);o6r=r(QK,`Note:
Loading a model from its configuration file does `),wve=n(QK,"STRONG",{});var CFt=s(wve);r6r=r(CFt,"not"),CFt.forEach(t),t6r=r(QK,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n(QK,"A",{href:!0});var wFt=s(KW);a6r=r(wFt,"from_pretrained()"),wFt.forEach(t),n6r=r(QK," to load the model weights."),QK.forEach(t),s6r=i(J3),T(SM.$$.fragment,J3),J3.forEach(t),l6r=i(Cl),Rr=n(Cl,"DIV",{class:!0});var wl=s(Rr);T(iL.$$.fragment,wl),i6r=i(wl),Ave=n(wl,"P",{});var AFt=s(Ave);d6r=r(AFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AFt.forEach(t),c6r=i(wl),an=n(wl,"P",{});var Y3=s(an);f6r=r(Y3,"The model class to instantiate is selected based on the "),yve=n(Y3,"CODE",{});var yFt=s(yve);m6r=r(yFt,"model_type"),yFt.forEach(t),g6r=r(Y3,` property of the config object (either
passed as an argument or loaded from `),Lve=n(Y3,"CODE",{});var LFt=s(Lve);h6r=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),p6r=r(Y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xve=n(Y3,"CODE",{});var xFt=s(xve);u6r=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),_6r=r(Y3,":"),Y3.forEach(t),b6r=i(wl),de=n(wl,"UL",{});var me=s(de);RM=n(me,"LI",{});var nSe=s(RM);$ve=n(nSe,"STRONG",{});var $Ft=s($ve);v6r=r($Ft,"albert"),$Ft.forEach(t),F6r=r(nSe," \u2014 "),ZW=n(nSe,"A",{href:!0});var kFt=s(ZW);T6r=r(kFt,"TFAlbertForTokenClassification"),kFt.forEach(t),M6r=r(nSe," (ALBERT model)"),nSe.forEach(t),E6r=i(me),BM=n(me,"LI",{});var sSe=s(BM);kve=n(sSe,"STRONG",{});var SFt=s(kve);C6r=r(SFt,"bert"),SFt.forEach(t),w6r=r(sSe," \u2014 "),eH=n(sSe,"A",{href:!0});var RFt=s(eH);A6r=r(RFt,"TFBertForTokenClassification"),RFt.forEach(t),y6r=r(sSe," (BERT model)"),sSe.forEach(t),L6r=i(me),PM=n(me,"LI",{});var lSe=s(PM);Sve=n(lSe,"STRONG",{});var BFt=s(Sve);x6r=r(BFt,"camembert"),BFt.forEach(t),$6r=r(lSe," \u2014 "),oH=n(lSe,"A",{href:!0});var PFt=s(oH);k6r=r(PFt,"TFCamembertForTokenClassification"),PFt.forEach(t),S6r=r(lSe," (CamemBERT model)"),lSe.forEach(t),R6r=i(me),IM=n(me,"LI",{});var iSe=s(IM);Rve=n(iSe,"STRONG",{});var IFt=s(Rve);B6r=r(IFt,"convbert"),IFt.forEach(t),P6r=r(iSe," \u2014 "),rH=n(iSe,"A",{href:!0});var qFt=s(rH);I6r=r(qFt,"TFConvBertForTokenClassification"),qFt.forEach(t),q6r=r(iSe," (ConvBERT model)"),iSe.forEach(t),N6r=i(me),qM=n(me,"LI",{});var dSe=s(qM);Bve=n(dSe,"STRONG",{});var NFt=s(Bve);j6r=r(NFt,"deberta"),NFt.forEach(t),D6r=r(dSe," \u2014 "),tH=n(dSe,"A",{href:!0});var jFt=s(tH);G6r=r(jFt,"TFDebertaForTokenClassification"),jFt.forEach(t),O6r=r(dSe," (DeBERTa model)"),dSe.forEach(t),V6r=i(me),NM=n(me,"LI",{});var cSe=s(NM);Pve=n(cSe,"STRONG",{});var DFt=s(Pve);X6r=r(DFt,"deberta-v2"),DFt.forEach(t),z6r=r(cSe," \u2014 "),aH=n(cSe,"A",{href:!0});var GFt=s(aH);Q6r=r(GFt,"TFDebertaV2ForTokenClassification"),GFt.forEach(t),W6r=r(cSe," (DeBERTa-v2 model)"),cSe.forEach(t),H6r=i(me),jM=n(me,"LI",{});var fSe=s(jM);Ive=n(fSe,"STRONG",{});var OFt=s(Ive);U6r=r(OFt,"distilbert"),OFt.forEach(t),J6r=r(fSe," \u2014 "),nH=n(fSe,"A",{href:!0});var VFt=s(nH);Y6r=r(VFt,"TFDistilBertForTokenClassification"),VFt.forEach(t),K6r=r(fSe," (DistilBERT model)"),fSe.forEach(t),Z6r=i(me),DM=n(me,"LI",{});var mSe=s(DM);qve=n(mSe,"STRONG",{});var XFt=s(qve);eTr=r(XFt,"electra"),XFt.forEach(t),oTr=r(mSe," \u2014 "),sH=n(mSe,"A",{href:!0});var zFt=s(sH);rTr=r(zFt,"TFElectraForTokenClassification"),zFt.forEach(t),tTr=r(mSe," (ELECTRA model)"),mSe.forEach(t),aTr=i(me),GM=n(me,"LI",{});var gSe=s(GM);Nve=n(gSe,"STRONG",{});var QFt=s(Nve);nTr=r(QFt,"flaubert"),QFt.forEach(t),sTr=r(gSe," \u2014 "),lH=n(gSe,"A",{href:!0});var WFt=s(lH);lTr=r(WFt,"TFFlaubertForTokenClassification"),WFt.forEach(t),iTr=r(gSe," (FlauBERT model)"),gSe.forEach(t),dTr=i(me),OM=n(me,"LI",{});var hSe=s(OM);jve=n(hSe,"STRONG",{});var HFt=s(jve);cTr=r(HFt,"funnel"),HFt.forEach(t),fTr=r(hSe," \u2014 "),iH=n(hSe,"A",{href:!0});var UFt=s(iH);mTr=r(UFt,"TFFunnelForTokenClassification"),UFt.forEach(t),gTr=r(hSe," (Funnel Transformer model)"),hSe.forEach(t),hTr=i(me),VM=n(me,"LI",{});var pSe=s(VM);Dve=n(pSe,"STRONG",{});var JFt=s(Dve);pTr=r(JFt,"layoutlm"),JFt.forEach(t),uTr=r(pSe," \u2014 "),dH=n(pSe,"A",{href:!0});var YFt=s(dH);_Tr=r(YFt,"TFLayoutLMForTokenClassification"),YFt.forEach(t),bTr=r(pSe," (LayoutLM model)"),pSe.forEach(t),vTr=i(me),XM=n(me,"LI",{});var uSe=s(XM);Gve=n(uSe,"STRONG",{});var KFt=s(Gve);FTr=r(KFt,"longformer"),KFt.forEach(t),TTr=r(uSe," \u2014 "),cH=n(uSe,"A",{href:!0});var ZFt=s(cH);MTr=r(ZFt,"TFLongformerForTokenClassification"),ZFt.forEach(t),ETr=r(uSe," (Longformer model)"),uSe.forEach(t),CTr=i(me),zM=n(me,"LI",{});var _Se=s(zM);Ove=n(_Se,"STRONG",{});var e6t=s(Ove);wTr=r(e6t,"mobilebert"),e6t.forEach(t),ATr=r(_Se," \u2014 "),fH=n(_Se,"A",{href:!0});var o6t=s(fH);yTr=r(o6t,"TFMobileBertForTokenClassification"),o6t.forEach(t),LTr=r(_Se," (MobileBERT model)"),_Se.forEach(t),xTr=i(me),QM=n(me,"LI",{});var bSe=s(QM);Vve=n(bSe,"STRONG",{});var r6t=s(Vve);$Tr=r(r6t,"mpnet"),r6t.forEach(t),kTr=r(bSe," \u2014 "),mH=n(bSe,"A",{href:!0});var t6t=s(mH);STr=r(t6t,"TFMPNetForTokenClassification"),t6t.forEach(t),RTr=r(bSe," (MPNet model)"),bSe.forEach(t),BTr=i(me),WM=n(me,"LI",{});var vSe=s(WM);Xve=n(vSe,"STRONG",{});var a6t=s(Xve);PTr=r(a6t,"rembert"),a6t.forEach(t),ITr=r(vSe," \u2014 "),gH=n(vSe,"A",{href:!0});var n6t=s(gH);qTr=r(n6t,"TFRemBertForTokenClassification"),n6t.forEach(t),NTr=r(vSe," (RemBERT model)"),vSe.forEach(t),jTr=i(me),HM=n(me,"LI",{});var FSe=s(HM);zve=n(FSe,"STRONG",{});var s6t=s(zve);DTr=r(s6t,"roberta"),s6t.forEach(t),GTr=r(FSe," \u2014 "),hH=n(FSe,"A",{href:!0});var l6t=s(hH);OTr=r(l6t,"TFRobertaForTokenClassification"),l6t.forEach(t),VTr=r(FSe," (RoBERTa model)"),FSe.forEach(t),XTr=i(me),UM=n(me,"LI",{});var TSe=s(UM);Qve=n(TSe,"STRONG",{});var i6t=s(Qve);zTr=r(i6t,"roformer"),i6t.forEach(t),QTr=r(TSe," \u2014 "),pH=n(TSe,"A",{href:!0});var d6t=s(pH);WTr=r(d6t,"TFRoFormerForTokenClassification"),d6t.forEach(t),HTr=r(TSe," (RoFormer model)"),TSe.forEach(t),UTr=i(me),JM=n(me,"LI",{});var MSe=s(JM);Wve=n(MSe,"STRONG",{});var c6t=s(Wve);JTr=r(c6t,"xlm"),c6t.forEach(t),YTr=r(MSe," \u2014 "),uH=n(MSe,"A",{href:!0});var f6t=s(uH);KTr=r(f6t,"TFXLMForTokenClassification"),f6t.forEach(t),ZTr=r(MSe," (XLM model)"),MSe.forEach(t),e7r=i(me),YM=n(me,"LI",{});var ESe=s(YM);Hve=n(ESe,"STRONG",{});var m6t=s(Hve);o7r=r(m6t,"xlm-roberta"),m6t.forEach(t),r7r=r(ESe," \u2014 "),_H=n(ESe,"A",{href:!0});var g6t=s(_H);t7r=r(g6t,"TFXLMRobertaForTokenClassification"),g6t.forEach(t),a7r=r(ESe," (XLM-RoBERTa model)"),ESe.forEach(t),n7r=i(me),KM=n(me,"LI",{});var CSe=s(KM);Uve=n(CSe,"STRONG",{});var h6t=s(Uve);s7r=r(h6t,"xlnet"),h6t.forEach(t),l7r=r(CSe," \u2014 "),bH=n(CSe,"A",{href:!0});var p6t=s(bH);i7r=r(p6t,"TFXLNetForTokenClassification"),p6t.forEach(t),d7r=r(CSe," (XLNet model)"),CSe.forEach(t),me.forEach(t),c7r=i(wl),T(ZM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),bIe=i(f),dc=n(f,"H2",{class:!0});var MNe=s(dc);e4=n(MNe,"A",{id:!0,class:!0,href:!0});var u6t=s(e4);Jve=n(u6t,"SPAN",{});var _6t=s(Jve);T(dL.$$.fragment,_6t),_6t.forEach(t),u6t.forEach(t),f7r=i(MNe),Yve=n(MNe,"SPAN",{});var b6t=s(Yve);m7r=r(b6t,"TFAutoModelForQuestionAnswering"),b6t.forEach(t),MNe.forEach(t),vIe=i(f),lr=n(f,"DIV",{class:!0});var Al=s(lr);T(cL.$$.fragment,Al),g7r=i(Al),cc=n(Al,"P",{});var WK=s(cc);h7r=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=n(WK,"A",{href:!0});var v6t=s(vH);p7r=r(v6t,"from_pretrained()"),v6t.forEach(t),u7r=r(WK," class method or the "),FH=n(WK,"A",{href:!0});var F6t=s(FH);_7r=r(F6t,"from_config()"),F6t.forEach(t),b7r=r(WK,` class
method.`),WK.forEach(t),v7r=i(Al),fL=n(Al,"P",{});var ENe=s(fL);F7r=r(ENe,"This class cannot be instantiated directly using "),Kve=n(ENe,"CODE",{});var T6t=s(Kve);T7r=r(T6t,"__init__()"),T6t.forEach(t),M7r=r(ENe," (throws an error)."),ENe.forEach(t),E7r=i(Al),Rt=n(Al,"DIV",{class:!0});var K3=s(Rt);T(mL.$$.fragment,K3),C7r=i(K3),Zve=n(K3,"P",{});var M6t=s(Zve);w7r=r(M6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M6t.forEach(t),A7r=i(K3),fc=n(K3,"P",{});var HK=s(fc);y7r=r(HK,`Note:
Loading a model from its configuration file does `),eFe=n(HK,"STRONG",{});var E6t=s(eFe);L7r=r(E6t,"not"),E6t.forEach(t),x7r=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(HK,"A",{href:!0});var C6t=s(TH);$7r=r(C6t,"from_pretrained()"),C6t.forEach(t),k7r=r(HK," to load the model weights."),HK.forEach(t),S7r=i(K3),T(o4.$$.fragment,K3),K3.forEach(t),R7r=i(Al),Br=n(Al,"DIV",{class:!0});var yl=s(Br);T(gL.$$.fragment,yl),B7r=i(yl),oFe=n(yl,"P",{});var w6t=s(oFe);P7r=r(w6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w6t.forEach(t),I7r=i(yl),nn=n(yl,"P",{});var Z3=s(nn);q7r=r(Z3,"The model class to instantiate is selected based on the "),rFe=n(Z3,"CODE",{});var A6t=s(rFe);N7r=r(A6t,"model_type"),A6t.forEach(t),j7r=r(Z3,` property of the config object (either
passed as an argument or loaded from `),tFe=n(Z3,"CODE",{});var y6t=s(tFe);D7r=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),G7r=r(Z3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aFe=n(Z3,"CODE",{});var L6t=s(aFe);O7r=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),V7r=r(Z3,":"),Z3.forEach(t),X7r=i(yl),ce=n(yl,"UL",{});var ge=s(ce);r4=n(ge,"LI",{});var wSe=s(r4);nFe=n(wSe,"STRONG",{});var x6t=s(nFe);z7r=r(x6t,"albert"),x6t.forEach(t),Q7r=r(wSe," \u2014 "),MH=n(wSe,"A",{href:!0});var $6t=s(MH);W7r=r($6t,"TFAlbertForQuestionAnswering"),$6t.forEach(t),H7r=r(wSe," (ALBERT model)"),wSe.forEach(t),U7r=i(ge),t4=n(ge,"LI",{});var ASe=s(t4);sFe=n(ASe,"STRONG",{});var k6t=s(sFe);J7r=r(k6t,"bert"),k6t.forEach(t),Y7r=r(ASe," \u2014 "),EH=n(ASe,"A",{href:!0});var S6t=s(EH);K7r=r(S6t,"TFBertForQuestionAnswering"),S6t.forEach(t),Z7r=r(ASe," (BERT model)"),ASe.forEach(t),e9r=i(ge),a4=n(ge,"LI",{});var ySe=s(a4);lFe=n(ySe,"STRONG",{});var R6t=s(lFe);o9r=r(R6t,"camembert"),R6t.forEach(t),r9r=r(ySe," \u2014 "),CH=n(ySe,"A",{href:!0});var B6t=s(CH);t9r=r(B6t,"TFCamembertForQuestionAnswering"),B6t.forEach(t),a9r=r(ySe," (CamemBERT model)"),ySe.forEach(t),n9r=i(ge),n4=n(ge,"LI",{});var LSe=s(n4);iFe=n(LSe,"STRONG",{});var P6t=s(iFe);s9r=r(P6t,"convbert"),P6t.forEach(t),l9r=r(LSe," \u2014 "),wH=n(LSe,"A",{href:!0});var I6t=s(wH);i9r=r(I6t,"TFConvBertForQuestionAnswering"),I6t.forEach(t),d9r=r(LSe," (ConvBERT model)"),LSe.forEach(t),c9r=i(ge),s4=n(ge,"LI",{});var xSe=s(s4);dFe=n(xSe,"STRONG",{});var q6t=s(dFe);f9r=r(q6t,"deberta"),q6t.forEach(t),m9r=r(xSe," \u2014 "),AH=n(xSe,"A",{href:!0});var N6t=s(AH);g9r=r(N6t,"TFDebertaForQuestionAnswering"),N6t.forEach(t),h9r=r(xSe," (DeBERTa model)"),xSe.forEach(t),p9r=i(ge),l4=n(ge,"LI",{});var $Se=s(l4);cFe=n($Se,"STRONG",{});var j6t=s(cFe);u9r=r(j6t,"deberta-v2"),j6t.forEach(t),_9r=r($Se," \u2014 "),yH=n($Se,"A",{href:!0});var D6t=s(yH);b9r=r(D6t,"TFDebertaV2ForQuestionAnswering"),D6t.forEach(t),v9r=r($Se," (DeBERTa-v2 model)"),$Se.forEach(t),F9r=i(ge),i4=n(ge,"LI",{});var kSe=s(i4);fFe=n(kSe,"STRONG",{});var G6t=s(fFe);T9r=r(G6t,"distilbert"),G6t.forEach(t),M9r=r(kSe," \u2014 "),LH=n(kSe,"A",{href:!0});var O6t=s(LH);E9r=r(O6t,"TFDistilBertForQuestionAnswering"),O6t.forEach(t),C9r=r(kSe," (DistilBERT model)"),kSe.forEach(t),w9r=i(ge),d4=n(ge,"LI",{});var SSe=s(d4);mFe=n(SSe,"STRONG",{});var V6t=s(mFe);A9r=r(V6t,"electra"),V6t.forEach(t),y9r=r(SSe," \u2014 "),xH=n(SSe,"A",{href:!0});var X6t=s(xH);L9r=r(X6t,"TFElectraForQuestionAnswering"),X6t.forEach(t),x9r=r(SSe," (ELECTRA model)"),SSe.forEach(t),$9r=i(ge),c4=n(ge,"LI",{});var RSe=s(c4);gFe=n(RSe,"STRONG",{});var z6t=s(gFe);k9r=r(z6t,"flaubert"),z6t.forEach(t),S9r=r(RSe," \u2014 "),$H=n(RSe,"A",{href:!0});var Q6t=s($H);R9r=r(Q6t,"TFFlaubertForQuestionAnsweringSimple"),Q6t.forEach(t),B9r=r(RSe," (FlauBERT model)"),RSe.forEach(t),P9r=i(ge),f4=n(ge,"LI",{});var BSe=s(f4);hFe=n(BSe,"STRONG",{});var W6t=s(hFe);I9r=r(W6t,"funnel"),W6t.forEach(t),q9r=r(BSe," \u2014 "),kH=n(BSe,"A",{href:!0});var H6t=s(kH);N9r=r(H6t,"TFFunnelForQuestionAnswering"),H6t.forEach(t),j9r=r(BSe," (Funnel Transformer model)"),BSe.forEach(t),D9r=i(ge),m4=n(ge,"LI",{});var PSe=s(m4);pFe=n(PSe,"STRONG",{});var U6t=s(pFe);G9r=r(U6t,"gptj"),U6t.forEach(t),O9r=r(PSe," \u2014 "),SH=n(PSe,"A",{href:!0});var J6t=s(SH);V9r=r(J6t,"TFGPTJForQuestionAnswering"),J6t.forEach(t),X9r=r(PSe," (GPT-J model)"),PSe.forEach(t),z9r=i(ge),g4=n(ge,"LI",{});var ISe=s(g4);uFe=n(ISe,"STRONG",{});var Y6t=s(uFe);Q9r=r(Y6t,"longformer"),Y6t.forEach(t),W9r=r(ISe," \u2014 "),RH=n(ISe,"A",{href:!0});var K6t=s(RH);H9r=r(K6t,"TFLongformerForQuestionAnswering"),K6t.forEach(t),U9r=r(ISe," (Longformer model)"),ISe.forEach(t),J9r=i(ge),h4=n(ge,"LI",{});var qSe=s(h4);_Fe=n(qSe,"STRONG",{});var Z6t=s(_Fe);Y9r=r(Z6t,"mobilebert"),Z6t.forEach(t),K9r=r(qSe," \u2014 "),BH=n(qSe,"A",{href:!0});var eTt=s(BH);Z9r=r(eTt,"TFMobileBertForQuestionAnswering"),eTt.forEach(t),eMr=r(qSe," (MobileBERT model)"),qSe.forEach(t),oMr=i(ge),p4=n(ge,"LI",{});var NSe=s(p4);bFe=n(NSe,"STRONG",{});var oTt=s(bFe);rMr=r(oTt,"mpnet"),oTt.forEach(t),tMr=r(NSe," \u2014 "),PH=n(NSe,"A",{href:!0});var rTt=s(PH);aMr=r(rTt,"TFMPNetForQuestionAnswering"),rTt.forEach(t),nMr=r(NSe," (MPNet model)"),NSe.forEach(t),sMr=i(ge),u4=n(ge,"LI",{});var jSe=s(u4);vFe=n(jSe,"STRONG",{});var tTt=s(vFe);lMr=r(tTt,"rembert"),tTt.forEach(t),iMr=r(jSe," \u2014 "),IH=n(jSe,"A",{href:!0});var aTt=s(IH);dMr=r(aTt,"TFRemBertForQuestionAnswering"),aTt.forEach(t),cMr=r(jSe," (RemBERT model)"),jSe.forEach(t),fMr=i(ge),_4=n(ge,"LI",{});var DSe=s(_4);FFe=n(DSe,"STRONG",{});var nTt=s(FFe);mMr=r(nTt,"roberta"),nTt.forEach(t),gMr=r(DSe," \u2014 "),qH=n(DSe,"A",{href:!0});var sTt=s(qH);hMr=r(sTt,"TFRobertaForQuestionAnswering"),sTt.forEach(t),pMr=r(DSe," (RoBERTa model)"),DSe.forEach(t),uMr=i(ge),b4=n(ge,"LI",{});var GSe=s(b4);TFe=n(GSe,"STRONG",{});var lTt=s(TFe);_Mr=r(lTt,"roformer"),lTt.forEach(t),bMr=r(GSe," \u2014 "),NH=n(GSe,"A",{href:!0});var iTt=s(NH);vMr=r(iTt,"TFRoFormerForQuestionAnswering"),iTt.forEach(t),FMr=r(GSe," (RoFormer model)"),GSe.forEach(t),TMr=i(ge),v4=n(ge,"LI",{});var OSe=s(v4);MFe=n(OSe,"STRONG",{});var dTt=s(MFe);MMr=r(dTt,"xlm"),dTt.forEach(t),EMr=r(OSe," \u2014 "),jH=n(OSe,"A",{href:!0});var cTt=s(jH);CMr=r(cTt,"TFXLMForQuestionAnsweringSimple"),cTt.forEach(t),wMr=r(OSe," (XLM model)"),OSe.forEach(t),AMr=i(ge),F4=n(ge,"LI",{});var VSe=s(F4);EFe=n(VSe,"STRONG",{});var fTt=s(EFe);yMr=r(fTt,"xlm-roberta"),fTt.forEach(t),LMr=r(VSe," \u2014 "),DH=n(VSe,"A",{href:!0});var mTt=s(DH);xMr=r(mTt,"TFXLMRobertaForQuestionAnswering"),mTt.forEach(t),$Mr=r(VSe," (XLM-RoBERTa model)"),VSe.forEach(t),kMr=i(ge),T4=n(ge,"LI",{});var XSe=s(T4);CFe=n(XSe,"STRONG",{});var gTt=s(CFe);SMr=r(gTt,"xlnet"),gTt.forEach(t),RMr=r(XSe," \u2014 "),GH=n(XSe,"A",{href:!0});var hTt=s(GH);BMr=r(hTt,"TFXLNetForQuestionAnsweringSimple"),hTt.forEach(t),PMr=r(XSe," (XLNet model)"),XSe.forEach(t),ge.forEach(t),IMr=i(yl),T(M4.$$.fragment,yl),yl.forEach(t),Al.forEach(t),FIe=i(f),mc=n(f,"H2",{class:!0});var CNe=s(mc);E4=n(CNe,"A",{id:!0,class:!0,href:!0});var pTt=s(E4);wFe=n(pTt,"SPAN",{});var uTt=s(wFe);T(hL.$$.fragment,uTt),uTt.forEach(t),pTt.forEach(t),qMr=i(CNe),AFe=n(CNe,"SPAN",{});var _Tt=s(AFe);NMr=r(_Tt,"TFAutoModelForVision2Seq"),_Tt.forEach(t),CNe.forEach(t),TIe=i(f),ir=n(f,"DIV",{class:!0});var Ll=s(ir);T(pL.$$.fragment,Ll),jMr=i(Ll),gc=n(Ll,"P",{});var UK=s(gc);DMr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OH=n(UK,"A",{href:!0});var bTt=s(OH);GMr=r(bTt,"from_pretrained()"),bTt.forEach(t),OMr=r(UK," class method or the "),VH=n(UK,"A",{href:!0});var vTt=s(VH);VMr=r(vTt,"from_config()"),vTt.forEach(t),XMr=r(UK,` class
method.`),UK.forEach(t),zMr=i(Ll),uL=n(Ll,"P",{});var wNe=s(uL);QMr=r(wNe,"This class cannot be instantiated directly using "),yFe=n(wNe,"CODE",{});var FTt=s(yFe);WMr=r(FTt,"__init__()"),FTt.forEach(t),HMr=r(wNe," (throws an error)."),wNe.forEach(t),UMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var ew=s(Bt);T(_L.$$.fragment,ew),JMr=i(ew),LFe=n(ew,"P",{});var TTt=s(LFe);YMr=r(TTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),TTt.forEach(t),KMr=i(ew),hc=n(ew,"P",{});var JK=s(hc);ZMr=r(JK,`Note:
Loading a model from its configuration file does `),xFe=n(JK,"STRONG",{});var MTt=s(xFe);e4r=r(MTt,"not"),MTt.forEach(t),o4r=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(JK,"A",{href:!0});var ETt=s(XH);r4r=r(ETt,"from_pretrained()"),ETt.forEach(t),t4r=r(JK," to load the model weights."),JK.forEach(t),a4r=i(ew),T(C4.$$.fragment,ew),ew.forEach(t),n4r=i(Ll),Pr=n(Ll,"DIV",{class:!0});var xl=s(Pr);T(bL.$$.fragment,xl),s4r=i(xl),$Fe=n(xl,"P",{});var CTt=s($Fe);l4r=r(CTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),CTt.forEach(t),i4r=i(xl),sn=n(xl,"P",{});var ow=s(sn);d4r=r(ow,"The model class to instantiate is selected based on the "),kFe=n(ow,"CODE",{});var wTt=s(kFe);c4r=r(wTt,"model_type"),wTt.forEach(t),f4r=r(ow,` property of the config object (either
passed as an argument or loaded from `),SFe=n(ow,"CODE",{});var ATt=s(SFe);m4r=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),g4r=r(ow,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RFe=n(ow,"CODE",{});var yTt=s(RFe);h4r=r(yTt,"pretrained_model_name_or_path"),yTt.forEach(t),p4r=r(ow,":"),ow.forEach(t),u4r=i(xl),BFe=n(xl,"UL",{});var LTt=s(BFe);w4=n(LTt,"LI",{});var zSe=s(w4);PFe=n(zSe,"STRONG",{});var xTt=s(PFe);_4r=r(xTt,"vision-encoder-decoder"),xTt.forEach(t),b4r=r(zSe," \u2014 "),zH=n(zSe,"A",{href:!0});var $Tt=s(zH);v4r=r($Tt,"TFVisionEncoderDecoderModel"),$Tt.forEach(t),F4r=r(zSe," (Vision Encoder decoder model)"),zSe.forEach(t),LTt.forEach(t),T4r=i(xl),T(A4.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),MIe=i(f),pc=n(f,"H2",{class:!0});var ANe=s(pc);y4=n(ANe,"A",{id:!0,class:!0,href:!0});var kTt=s(y4);IFe=n(kTt,"SPAN",{});var STt=s(IFe);T(vL.$$.fragment,STt),STt.forEach(t),kTt.forEach(t),M4r=i(ANe),qFe=n(ANe,"SPAN",{});var RTt=s(qFe);E4r=r(RTt,"TFAutoModelForSpeechSeq2Seq"),RTt.forEach(t),ANe.forEach(t),EIe=i(f),dr=n(f,"DIV",{class:!0});var $l=s(dr);T(FL.$$.fragment,$l),C4r=i($l),uc=n($l,"P",{});var YK=s(uc);w4r=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QH=n(YK,"A",{href:!0});var BTt=s(QH);A4r=r(BTt,"from_pretrained()"),BTt.forEach(t),y4r=r(YK," class method or the "),WH=n(YK,"A",{href:!0});var PTt=s(WH);L4r=r(PTt,"from_config()"),PTt.forEach(t),x4r=r(YK,` class
method.`),YK.forEach(t),$4r=i($l),TL=n($l,"P",{});var yNe=s(TL);k4r=r(yNe,"This class cannot be instantiated directly using "),NFe=n(yNe,"CODE",{});var ITt=s(NFe);S4r=r(ITt,"__init__()"),ITt.forEach(t),R4r=r(yNe," (throws an error)."),yNe.forEach(t),B4r=i($l),Pt=n($l,"DIV",{class:!0});var rw=s(Pt);T(ML.$$.fragment,rw),P4r=i(rw),jFe=n(rw,"P",{});var qTt=s(jFe);I4r=r(qTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),qTt.forEach(t),q4r=i(rw),_c=n(rw,"P",{});var KK=s(_c);N4r=r(KK,`Note:
Loading a model from its configuration file does `),DFe=n(KK,"STRONG",{});var NTt=s(DFe);j4r=r(NTt,"not"),NTt.forEach(t),D4r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(KK,"A",{href:!0});var jTt=s(HH);G4r=r(jTt,"from_pretrained()"),jTt.forEach(t),O4r=r(KK," to load the model weights."),KK.forEach(t),V4r=i(rw),T(L4.$$.fragment,rw),rw.forEach(t),X4r=i($l),Ir=n($l,"DIV",{class:!0});var kl=s(Ir);T(EL.$$.fragment,kl),z4r=i(kl),GFe=n(kl,"P",{});var DTt=s(GFe);Q4r=r(DTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),DTt.forEach(t),W4r=i(kl),ln=n(kl,"P",{});var tw=s(ln);H4r=r(tw,"The model class to instantiate is selected based on the "),OFe=n(tw,"CODE",{});var GTt=s(OFe);U4r=r(GTt,"model_type"),GTt.forEach(t),J4r=r(tw,` property of the config object (either
passed as an argument or loaded from `),VFe=n(tw,"CODE",{});var OTt=s(VFe);Y4r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),K4r=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XFe=n(tw,"CODE",{});var VTt=s(XFe);Z4r=r(VTt,"pretrained_model_name_or_path"),VTt.forEach(t),eEr=r(tw,":"),tw.forEach(t),oEr=i(kl),zFe=n(kl,"UL",{});var XTt=s(zFe);x4=n(XTt,"LI",{});var QSe=s(x4);QFe=n(QSe,"STRONG",{});var zTt=s(QFe);rEr=r(zTt,"speech_to_text"),zTt.forEach(t),tEr=r(QSe," \u2014 "),UH=n(QSe,"A",{href:!0});var QTt=s(UH);aEr=r(QTt,"TFSpeech2TextForConditionalGeneration"),QTt.forEach(t),nEr=r(QSe," (Speech2Text model)"),QSe.forEach(t),XTt.forEach(t),sEr=i(kl),T($4.$$.fragment,kl),kl.forEach(t),$l.forEach(t),CIe=i(f),bc=n(f,"H2",{class:!0});var LNe=s(bc);k4=n(LNe,"A",{id:!0,class:!0,href:!0});var WTt=s(k4);WFe=n(WTt,"SPAN",{});var HTt=s(WFe);T(CL.$$.fragment,HTt),HTt.forEach(t),WTt.forEach(t),lEr=i(LNe),HFe=n(LNe,"SPAN",{});var UTt=s(HFe);iEr=r(UTt,"FlaxAutoModel"),UTt.forEach(t),LNe.forEach(t),wIe=i(f),cr=n(f,"DIV",{class:!0});var Sl=s(cr);T(wL.$$.fragment,Sl),dEr=i(Sl),vc=n(Sl,"P",{});var ZK=s(vc);cEr=r(ZK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JH=n(ZK,"A",{href:!0});var JTt=s(JH);fEr=r(JTt,"from_pretrained()"),JTt.forEach(t),mEr=r(ZK," class method or the "),YH=n(ZK,"A",{href:!0});var YTt=s(YH);gEr=r(YTt,"from_config()"),YTt.forEach(t),hEr=r(ZK,` class
method.`),ZK.forEach(t),pEr=i(Sl),AL=n(Sl,"P",{});var xNe=s(AL);uEr=r(xNe,"This class cannot be instantiated directly using "),UFe=n(xNe,"CODE",{});var KTt=s(UFe);_Er=r(KTt,"__init__()"),KTt.forEach(t),bEr=r(xNe," (throws an error)."),xNe.forEach(t),vEr=i(Sl),It=n(Sl,"DIV",{class:!0});var aw=s(It);T(yL.$$.fragment,aw),FEr=i(aw),JFe=n(aw,"P",{});var ZTt=s(JFe);TEr=r(ZTt,"Instantiates one of the base model classes of the library from a configuration."),ZTt.forEach(t),MEr=i(aw),Fc=n(aw,"P",{});var eZ=s(Fc);EEr=r(eZ,`Note:
Loading a model from its configuration file does `),YFe=n(eZ,"STRONG",{});var e7t=s(YFe);CEr=r(e7t,"not"),e7t.forEach(t),wEr=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(eZ,"A",{href:!0});var o7t=s(KH);AEr=r(o7t,"from_pretrained()"),o7t.forEach(t),yEr=r(eZ," to load the model weights."),eZ.forEach(t),LEr=i(aw),T(S4.$$.fragment,aw),aw.forEach(t),xEr=i(Sl),qr=n(Sl,"DIV",{class:!0});var Rl=s(qr);T(LL.$$.fragment,Rl),$Er=i(Rl),KFe=n(Rl,"P",{});var r7t=s(KFe);kEr=r(r7t,"Instantiate one of the base model classes of the library from a pretrained model."),r7t.forEach(t),SEr=i(Rl),dn=n(Rl,"P",{});var nw=s(dn);REr=r(nw,"The model class to instantiate is selected based on the "),ZFe=n(nw,"CODE",{});var t7t=s(ZFe);BEr=r(t7t,"model_type"),t7t.forEach(t),PEr=r(nw,` property of the config object (either
passed as an argument or loaded from `),e6e=n(nw,"CODE",{});var a7t=s(e6e);IEr=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),qEr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o6e=n(nw,"CODE",{});var n7t=s(o6e);NEr=r(n7t,"pretrained_model_name_or_path"),n7t.forEach(t),jEr=r(nw,":"),nw.forEach(t),DEr=i(Rl),ee=n(Rl,"UL",{});var te=s(ee);R4=n(te,"LI",{});var WSe=s(R4);r6e=n(WSe,"STRONG",{});var s7t=s(r6e);GEr=r(s7t,"albert"),s7t.forEach(t),OEr=r(WSe," \u2014 "),ZH=n(WSe,"A",{href:!0});var l7t=s(ZH);VEr=r(l7t,"FlaxAlbertModel"),l7t.forEach(t),XEr=r(WSe," (ALBERT model)"),WSe.forEach(t),zEr=i(te),B4=n(te,"LI",{});var HSe=s(B4);t6e=n(HSe,"STRONG",{});var i7t=s(t6e);QEr=r(i7t,"bart"),i7t.forEach(t),WEr=r(HSe," \u2014 "),eU=n(HSe,"A",{href:!0});var d7t=s(eU);HEr=r(d7t,"FlaxBartModel"),d7t.forEach(t),UEr=r(HSe," (BART model)"),HSe.forEach(t),JEr=i(te),P4=n(te,"LI",{});var USe=s(P4);a6e=n(USe,"STRONG",{});var c7t=s(a6e);YEr=r(c7t,"beit"),c7t.forEach(t),KEr=r(USe," \u2014 "),oU=n(USe,"A",{href:!0});var f7t=s(oU);ZEr=r(f7t,"FlaxBeitModel"),f7t.forEach(t),e5r=r(USe," (BEiT model)"),USe.forEach(t),o5r=i(te),I4=n(te,"LI",{});var JSe=s(I4);n6e=n(JSe,"STRONG",{});var m7t=s(n6e);r5r=r(m7t,"bert"),m7t.forEach(t),t5r=r(JSe," \u2014 "),rU=n(JSe,"A",{href:!0});var g7t=s(rU);a5r=r(g7t,"FlaxBertModel"),g7t.forEach(t),n5r=r(JSe," (BERT model)"),JSe.forEach(t),s5r=i(te),q4=n(te,"LI",{});var YSe=s(q4);s6e=n(YSe,"STRONG",{});var h7t=s(s6e);l5r=r(h7t,"big_bird"),h7t.forEach(t),i5r=r(YSe," \u2014 "),tU=n(YSe,"A",{href:!0});var p7t=s(tU);d5r=r(p7t,"FlaxBigBirdModel"),p7t.forEach(t),c5r=r(YSe," (BigBird model)"),YSe.forEach(t),f5r=i(te),N4=n(te,"LI",{});var KSe=s(N4);l6e=n(KSe,"STRONG",{});var u7t=s(l6e);m5r=r(u7t,"blenderbot"),u7t.forEach(t),g5r=r(KSe," \u2014 "),aU=n(KSe,"A",{href:!0});var _7t=s(aU);h5r=r(_7t,"FlaxBlenderbotModel"),_7t.forEach(t),p5r=r(KSe," (Blenderbot model)"),KSe.forEach(t),u5r=i(te),j4=n(te,"LI",{});var ZSe=s(j4);i6e=n(ZSe,"STRONG",{});var b7t=s(i6e);_5r=r(b7t,"blenderbot-small"),b7t.forEach(t),b5r=r(ZSe," \u2014 "),nU=n(ZSe,"A",{href:!0});var v7t=s(nU);v5r=r(v7t,"FlaxBlenderbotSmallModel"),v7t.forEach(t),F5r=r(ZSe," (BlenderbotSmall model)"),ZSe.forEach(t),T5r=i(te),D4=n(te,"LI",{});var eRe=s(D4);d6e=n(eRe,"STRONG",{});var F7t=s(d6e);M5r=r(F7t,"clip"),F7t.forEach(t),E5r=r(eRe," \u2014 "),sU=n(eRe,"A",{href:!0});var T7t=s(sU);C5r=r(T7t,"FlaxCLIPModel"),T7t.forEach(t),w5r=r(eRe," (CLIP model)"),eRe.forEach(t),A5r=i(te),G4=n(te,"LI",{});var oRe=s(G4);c6e=n(oRe,"STRONG",{});var M7t=s(c6e);y5r=r(M7t,"distilbert"),M7t.forEach(t),L5r=r(oRe," \u2014 "),lU=n(oRe,"A",{href:!0});var E7t=s(lU);x5r=r(E7t,"FlaxDistilBertModel"),E7t.forEach(t),$5r=r(oRe," (DistilBERT model)"),oRe.forEach(t),k5r=i(te),O4=n(te,"LI",{});var rRe=s(O4);f6e=n(rRe,"STRONG",{});var C7t=s(f6e);S5r=r(C7t,"electra"),C7t.forEach(t),R5r=r(rRe," \u2014 "),iU=n(rRe,"A",{href:!0});var w7t=s(iU);B5r=r(w7t,"FlaxElectraModel"),w7t.forEach(t),P5r=r(rRe," (ELECTRA model)"),rRe.forEach(t),I5r=i(te),V4=n(te,"LI",{});var tRe=s(V4);m6e=n(tRe,"STRONG",{});var A7t=s(m6e);q5r=r(A7t,"gpt2"),A7t.forEach(t),N5r=r(tRe," \u2014 "),dU=n(tRe,"A",{href:!0});var y7t=s(dU);j5r=r(y7t,"FlaxGPT2Model"),y7t.forEach(t),D5r=r(tRe," (OpenAI GPT-2 model)"),tRe.forEach(t),G5r=i(te),X4=n(te,"LI",{});var aRe=s(X4);g6e=n(aRe,"STRONG",{});var L7t=s(g6e);O5r=r(L7t,"gpt_neo"),L7t.forEach(t),V5r=r(aRe," \u2014 "),cU=n(aRe,"A",{href:!0});var x7t=s(cU);X5r=r(x7t,"FlaxGPTNeoModel"),x7t.forEach(t),z5r=r(aRe," (GPT Neo model)"),aRe.forEach(t),Q5r=i(te),z4=n(te,"LI",{});var nRe=s(z4);h6e=n(nRe,"STRONG",{});var $7t=s(h6e);W5r=r($7t,"gptj"),$7t.forEach(t),H5r=r(nRe," \u2014 "),fU=n(nRe,"A",{href:!0});var k7t=s(fU);U5r=r(k7t,"FlaxGPTJModel"),k7t.forEach(t),J5r=r(nRe," (GPT-J model)"),nRe.forEach(t),Y5r=i(te),Q4=n(te,"LI",{});var sRe=s(Q4);p6e=n(sRe,"STRONG",{});var S7t=s(p6e);K5r=r(S7t,"longt5"),S7t.forEach(t),Z5r=r(sRe," \u2014 "),mU=n(sRe,"A",{href:!0});var R7t=s(mU);eCr=r(R7t,"FlaxLongT5Model"),R7t.forEach(t),oCr=r(sRe," (LongT5 model)"),sRe.forEach(t),rCr=i(te),W4=n(te,"LI",{});var lRe=s(W4);u6e=n(lRe,"STRONG",{});var B7t=s(u6e);tCr=r(B7t,"marian"),B7t.forEach(t),aCr=r(lRe," \u2014 "),gU=n(lRe,"A",{href:!0});var P7t=s(gU);nCr=r(P7t,"FlaxMarianModel"),P7t.forEach(t),sCr=r(lRe," (Marian model)"),lRe.forEach(t),lCr=i(te),H4=n(te,"LI",{});var iRe=s(H4);_6e=n(iRe,"STRONG",{});var I7t=s(_6e);iCr=r(I7t,"mbart"),I7t.forEach(t),dCr=r(iRe," \u2014 "),hU=n(iRe,"A",{href:!0});var q7t=s(hU);cCr=r(q7t,"FlaxMBartModel"),q7t.forEach(t),fCr=r(iRe," (mBART model)"),iRe.forEach(t),mCr=i(te),U4=n(te,"LI",{});var dRe=s(U4);b6e=n(dRe,"STRONG",{});var N7t=s(b6e);gCr=r(N7t,"mt5"),N7t.forEach(t),hCr=r(dRe," \u2014 "),pU=n(dRe,"A",{href:!0});var j7t=s(pU);pCr=r(j7t,"FlaxMT5Model"),j7t.forEach(t),uCr=r(dRe," (mT5 model)"),dRe.forEach(t),_Cr=i(te),J4=n(te,"LI",{});var cRe=s(J4);v6e=n(cRe,"STRONG",{});var D7t=s(v6e);bCr=r(D7t,"pegasus"),D7t.forEach(t),vCr=r(cRe," \u2014 "),uU=n(cRe,"A",{href:!0});var G7t=s(uU);FCr=r(G7t,"FlaxPegasusModel"),G7t.forEach(t),TCr=r(cRe," (Pegasus model)"),cRe.forEach(t),MCr=i(te),Y4=n(te,"LI",{});var fRe=s(Y4);F6e=n(fRe,"STRONG",{});var O7t=s(F6e);ECr=r(O7t,"roberta"),O7t.forEach(t),CCr=r(fRe," \u2014 "),_U=n(fRe,"A",{href:!0});var V7t=s(_U);wCr=r(V7t,"FlaxRobertaModel"),V7t.forEach(t),ACr=r(fRe," (RoBERTa model)"),fRe.forEach(t),yCr=i(te),K4=n(te,"LI",{});var mRe=s(K4);T6e=n(mRe,"STRONG",{});var X7t=s(T6e);LCr=r(X7t,"roformer"),X7t.forEach(t),xCr=r(mRe," \u2014 "),bU=n(mRe,"A",{href:!0});var z7t=s(bU);$Cr=r(z7t,"FlaxRoFormerModel"),z7t.forEach(t),kCr=r(mRe," (RoFormer model)"),mRe.forEach(t),SCr=i(te),Z4=n(te,"LI",{});var gRe=s(Z4);M6e=n(gRe,"STRONG",{});var Q7t=s(M6e);RCr=r(Q7t,"t5"),Q7t.forEach(t),BCr=r(gRe," \u2014 "),vU=n(gRe,"A",{href:!0});var W7t=s(vU);PCr=r(W7t,"FlaxT5Model"),W7t.forEach(t),ICr=r(gRe," (T5 model)"),gRe.forEach(t),qCr=i(te),eE=n(te,"LI",{});var hRe=s(eE);E6e=n(hRe,"STRONG",{});var H7t=s(E6e);NCr=r(H7t,"vision-text-dual-encoder"),H7t.forEach(t),jCr=r(hRe," \u2014 "),FU=n(hRe,"A",{href:!0});var U7t=s(FU);DCr=r(U7t,"FlaxVisionTextDualEncoderModel"),U7t.forEach(t),GCr=r(hRe," (VisionTextDualEncoder model)"),hRe.forEach(t),OCr=i(te),oE=n(te,"LI",{});var pRe=s(oE);C6e=n(pRe,"STRONG",{});var J7t=s(C6e);VCr=r(J7t,"vit"),J7t.forEach(t),XCr=r(pRe," \u2014 "),TU=n(pRe,"A",{href:!0});var Y7t=s(TU);zCr=r(Y7t,"FlaxViTModel"),Y7t.forEach(t),QCr=r(pRe," (ViT model)"),pRe.forEach(t),WCr=i(te),rE=n(te,"LI",{});var uRe=s(rE);w6e=n(uRe,"STRONG",{});var K7t=s(w6e);HCr=r(K7t,"wav2vec2"),K7t.forEach(t),UCr=r(uRe," \u2014 "),MU=n(uRe,"A",{href:!0});var Z7t=s(MU);JCr=r(Z7t,"FlaxWav2Vec2Model"),Z7t.forEach(t),YCr=r(uRe," (Wav2Vec2 model)"),uRe.forEach(t),KCr=i(te),tE=n(te,"LI",{});var _Re=s(tE);A6e=n(_Re,"STRONG",{});var e9t=s(A6e);ZCr=r(e9t,"xglm"),e9t.forEach(t),e3r=r(_Re," \u2014 "),EU=n(_Re,"A",{href:!0});var o9t=s(EU);o3r=r(o9t,"FlaxXGLMModel"),o9t.forEach(t),r3r=r(_Re," (XGLM model)"),_Re.forEach(t),t3r=i(te),aE=n(te,"LI",{});var bRe=s(aE);y6e=n(bRe,"STRONG",{});var r9t=s(y6e);a3r=r(r9t,"xlm-roberta"),r9t.forEach(t),n3r=r(bRe," \u2014 "),CU=n(bRe,"A",{href:!0});var t9t=s(CU);s3r=r(t9t,"FlaxXLMRobertaModel"),t9t.forEach(t),l3r=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),te.forEach(t),i3r=i(Rl),T(nE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),AIe=i(f),Tc=n(f,"H2",{class:!0});var $Ne=s(Tc);sE=n($Ne,"A",{id:!0,class:!0,href:!0});var a9t=s(sE);L6e=n(a9t,"SPAN",{});var n9t=s(L6e);T(xL.$$.fragment,n9t),n9t.forEach(t),a9t.forEach(t),d3r=i($Ne),x6e=n($Ne,"SPAN",{});var s9t=s(x6e);c3r=r(s9t,"FlaxAutoModelForCausalLM"),s9t.forEach(t),$Ne.forEach(t),yIe=i(f),fr=n(f,"DIV",{class:!0});var Bl=s(fr);T($L.$$.fragment,Bl),f3r=i(Bl),Mc=n(Bl,"P",{});var oZ=s(Mc);m3r=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),wU=n(oZ,"A",{href:!0});var l9t=s(wU);g3r=r(l9t,"from_pretrained()"),l9t.forEach(t),h3r=r(oZ," class method or the "),AU=n(oZ,"A",{href:!0});var i9t=s(AU);p3r=r(i9t,"from_config()"),i9t.forEach(t),u3r=r(oZ,` class
method.`),oZ.forEach(t),_3r=i(Bl),kL=n(Bl,"P",{});var kNe=s(kL);b3r=r(kNe,"This class cannot be instantiated directly using "),$6e=n(kNe,"CODE",{});var d9t=s($6e);v3r=r(d9t,"__init__()"),d9t.forEach(t),F3r=r(kNe," (throws an error)."),kNe.forEach(t),T3r=i(Bl),qt=n(Bl,"DIV",{class:!0});var sw=s(qt);T(SL.$$.fragment,sw),M3r=i(sw),k6e=n(sw,"P",{});var c9t=s(k6e);E3r=r(c9t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),c9t.forEach(t),C3r=i(sw),Ec=n(sw,"P",{});var rZ=s(Ec);w3r=r(rZ,`Note:
Loading a model from its configuration file does `),S6e=n(rZ,"STRONG",{});var f9t=s(S6e);A3r=r(f9t,"not"),f9t.forEach(t),y3r=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(rZ,"A",{href:!0});var m9t=s(yU);L3r=r(m9t,"from_pretrained()"),m9t.forEach(t),x3r=r(rZ," to load the model weights."),rZ.forEach(t),$3r=i(sw),T(lE.$$.fragment,sw),sw.forEach(t),k3r=i(Bl),Nr=n(Bl,"DIV",{class:!0});var Pl=s(Nr);T(RL.$$.fragment,Pl),S3r=i(Pl),R6e=n(Pl,"P",{});var g9t=s(R6e);R3r=r(g9t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),g9t.forEach(t),B3r=i(Pl),cn=n(Pl,"P",{});var lw=s(cn);P3r=r(lw,"The model class to instantiate is selected based on the "),B6e=n(lw,"CODE",{});var h9t=s(B6e);I3r=r(h9t,"model_type"),h9t.forEach(t),q3r=r(lw,` property of the config object (either
passed as an argument or loaded from `),P6e=n(lw,"CODE",{});var p9t=s(P6e);N3r=r(p9t,"pretrained_model_name_or_path"),p9t.forEach(t),j3r=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I6e=n(lw,"CODE",{});var u9t=s(I6e);D3r=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),G3r=r(lw,":"),lw.forEach(t),O3r=i(Pl),Se=n(Pl,"UL",{});var Ve=s(Se);iE=n(Ve,"LI",{});var vRe=s(iE);q6e=n(vRe,"STRONG",{});var _9t=s(q6e);V3r=r(_9t,"bart"),_9t.forEach(t),X3r=r(vRe," \u2014 "),LU=n(vRe,"A",{href:!0});var b9t=s(LU);z3r=r(b9t,"FlaxBartForCausalLM"),b9t.forEach(t),Q3r=r(vRe," (BART model)"),vRe.forEach(t),W3r=i(Ve),dE=n(Ve,"LI",{});var FRe=s(dE);N6e=n(FRe,"STRONG",{});var v9t=s(N6e);H3r=r(v9t,"bert"),v9t.forEach(t),U3r=r(FRe," \u2014 "),xU=n(FRe,"A",{href:!0});var F9t=s(xU);J3r=r(F9t,"FlaxBertForCausalLM"),F9t.forEach(t),Y3r=r(FRe," (BERT model)"),FRe.forEach(t),K3r=i(Ve),cE=n(Ve,"LI",{});var TRe=s(cE);j6e=n(TRe,"STRONG",{});var T9t=s(j6e);Z3r=r(T9t,"big_bird"),T9t.forEach(t),ewr=r(TRe," \u2014 "),$U=n(TRe,"A",{href:!0});var M9t=s($U);owr=r(M9t,"FlaxBigBirdForCausalLM"),M9t.forEach(t),rwr=r(TRe," (BigBird model)"),TRe.forEach(t),twr=i(Ve),fE=n(Ve,"LI",{});var MRe=s(fE);D6e=n(MRe,"STRONG",{});var E9t=s(D6e);awr=r(E9t,"electra"),E9t.forEach(t),nwr=r(MRe," \u2014 "),kU=n(MRe,"A",{href:!0});var C9t=s(kU);swr=r(C9t,"FlaxElectraForCausalLM"),C9t.forEach(t),lwr=r(MRe," (ELECTRA model)"),MRe.forEach(t),iwr=i(Ve),mE=n(Ve,"LI",{});var ERe=s(mE);G6e=n(ERe,"STRONG",{});var w9t=s(G6e);dwr=r(w9t,"gpt2"),w9t.forEach(t),cwr=r(ERe," \u2014 "),SU=n(ERe,"A",{href:!0});var A9t=s(SU);fwr=r(A9t,"FlaxGPT2LMHeadModel"),A9t.forEach(t),mwr=r(ERe," (OpenAI GPT-2 model)"),ERe.forEach(t),gwr=i(Ve),gE=n(Ve,"LI",{});var CRe=s(gE);O6e=n(CRe,"STRONG",{});var y9t=s(O6e);hwr=r(y9t,"gpt_neo"),y9t.forEach(t),pwr=r(CRe," \u2014 "),RU=n(CRe,"A",{href:!0});var L9t=s(RU);uwr=r(L9t,"FlaxGPTNeoForCausalLM"),L9t.forEach(t),_wr=r(CRe," (GPT Neo model)"),CRe.forEach(t),bwr=i(Ve),hE=n(Ve,"LI",{});var wRe=s(hE);V6e=n(wRe,"STRONG",{});var x9t=s(V6e);vwr=r(x9t,"gptj"),x9t.forEach(t),Fwr=r(wRe," \u2014 "),BU=n(wRe,"A",{href:!0});var $9t=s(BU);Twr=r($9t,"FlaxGPTJForCausalLM"),$9t.forEach(t),Mwr=r(wRe," (GPT-J model)"),wRe.forEach(t),Ewr=i(Ve),pE=n(Ve,"LI",{});var ARe=s(pE);X6e=n(ARe,"STRONG",{});var k9t=s(X6e);Cwr=r(k9t,"roberta"),k9t.forEach(t),wwr=r(ARe," \u2014 "),PU=n(ARe,"A",{href:!0});var S9t=s(PU);Awr=r(S9t,"FlaxRobertaForCausalLM"),S9t.forEach(t),ywr=r(ARe," (RoBERTa model)"),ARe.forEach(t),Lwr=i(Ve),uE=n(Ve,"LI",{});var yRe=s(uE);z6e=n(yRe,"STRONG",{});var R9t=s(z6e);xwr=r(R9t,"xglm"),R9t.forEach(t),$wr=r(yRe," \u2014 "),IU=n(yRe,"A",{href:!0});var B9t=s(IU);kwr=r(B9t,"FlaxXGLMForCausalLM"),B9t.forEach(t),Swr=r(yRe," (XGLM model)"),yRe.forEach(t),Ve.forEach(t),Rwr=i(Pl),T(_E.$$.fragment,Pl),Pl.forEach(t),Bl.forEach(t),LIe=i(f),Cc=n(f,"H2",{class:!0});var SNe=s(Cc);bE=n(SNe,"A",{id:!0,class:!0,href:!0});var P9t=s(bE);Q6e=n(P9t,"SPAN",{});var I9t=s(Q6e);T(BL.$$.fragment,I9t),I9t.forEach(t),P9t.forEach(t),Bwr=i(SNe),W6e=n(SNe,"SPAN",{});var q9t=s(W6e);Pwr=r(q9t,"FlaxAutoModelForPreTraining"),q9t.forEach(t),SNe.forEach(t),xIe=i(f),mr=n(f,"DIV",{class:!0});var Il=s(mr);T(PL.$$.fragment,Il),Iwr=i(Il),wc=n(Il,"P",{});var tZ=s(wc);qwr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qU=n(tZ,"A",{href:!0});var N9t=s(qU);Nwr=r(N9t,"from_pretrained()"),N9t.forEach(t),jwr=r(tZ," class method or the "),NU=n(tZ,"A",{href:!0});var j9t=s(NU);Dwr=r(j9t,"from_config()"),j9t.forEach(t),Gwr=r(tZ,` class
method.`),tZ.forEach(t),Owr=i(Il),IL=n(Il,"P",{});var RNe=s(IL);Vwr=r(RNe,"This class cannot be instantiated directly using "),H6e=n(RNe,"CODE",{});var D9t=s(H6e);Xwr=r(D9t,"__init__()"),D9t.forEach(t),zwr=r(RNe," (throws an error)."),RNe.forEach(t),Qwr=i(Il),Nt=n(Il,"DIV",{class:!0});var iw=s(Nt);T(qL.$$.fragment,iw),Wwr=i(iw),U6e=n(iw,"P",{});var G9t=s(U6e);Hwr=r(G9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),G9t.forEach(t),Uwr=i(iw),Ac=n(iw,"P",{});var aZ=s(Ac);Jwr=r(aZ,`Note:
Loading a model from its configuration file does `),J6e=n(aZ,"STRONG",{});var O9t=s(J6e);Ywr=r(O9t,"not"),O9t.forEach(t),Kwr=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jU=n(aZ,"A",{href:!0});var V9t=s(jU);Zwr=r(V9t,"from_pretrained()"),V9t.forEach(t),eAr=r(aZ," to load the model weights."),aZ.forEach(t),oAr=i(iw),T(vE.$$.fragment,iw),iw.forEach(t),rAr=i(Il),jr=n(Il,"DIV",{class:!0});var ql=s(jr);T(NL.$$.fragment,ql),tAr=i(ql),Y6e=n(ql,"P",{});var X9t=s(Y6e);aAr=r(X9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),X9t.forEach(t),nAr=i(ql),fn=n(ql,"P",{});var dw=s(fn);sAr=r(dw,"The model class to instantiate is selected based on the "),K6e=n(dw,"CODE",{});var z9t=s(K6e);lAr=r(z9t,"model_type"),z9t.forEach(t),iAr=r(dw,` property of the config object (either
passed as an argument or loaded from `),Z6e=n(dw,"CODE",{});var Q9t=s(Z6e);dAr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),cAr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eTe=n(dw,"CODE",{});var W9t=s(eTe);fAr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),mAr=r(dw,":"),dw.forEach(t),gAr=i(ql),Fe=n(ql,"UL",{});var Ce=s(Fe);FE=n(Ce,"LI",{});var LRe=s(FE);oTe=n(LRe,"STRONG",{});var H9t=s(oTe);hAr=r(H9t,"albert"),H9t.forEach(t),pAr=r(LRe," \u2014 "),DU=n(LRe,"A",{href:!0});var U9t=s(DU);uAr=r(U9t,"FlaxAlbertForPreTraining"),U9t.forEach(t),_Ar=r(LRe," (ALBERT model)"),LRe.forEach(t),bAr=i(Ce),TE=n(Ce,"LI",{});var xRe=s(TE);rTe=n(xRe,"STRONG",{});var J9t=s(rTe);vAr=r(J9t,"bart"),J9t.forEach(t),FAr=r(xRe," \u2014 "),GU=n(xRe,"A",{href:!0});var Y9t=s(GU);TAr=r(Y9t,"FlaxBartForConditionalGeneration"),Y9t.forEach(t),MAr=r(xRe," (BART model)"),xRe.forEach(t),EAr=i(Ce),ME=n(Ce,"LI",{});var $Re=s(ME);tTe=n($Re,"STRONG",{});var K9t=s(tTe);CAr=r(K9t,"bert"),K9t.forEach(t),wAr=r($Re," \u2014 "),OU=n($Re,"A",{href:!0});var Z9t=s(OU);AAr=r(Z9t,"FlaxBertForPreTraining"),Z9t.forEach(t),yAr=r($Re," (BERT model)"),$Re.forEach(t),LAr=i(Ce),EE=n(Ce,"LI",{});var kRe=s(EE);aTe=n(kRe,"STRONG",{});var eMt=s(aTe);xAr=r(eMt,"big_bird"),eMt.forEach(t),$Ar=r(kRe," \u2014 "),VU=n(kRe,"A",{href:!0});var oMt=s(VU);kAr=r(oMt,"FlaxBigBirdForPreTraining"),oMt.forEach(t),SAr=r(kRe," (BigBird model)"),kRe.forEach(t),RAr=i(Ce),CE=n(Ce,"LI",{});var SRe=s(CE);nTe=n(SRe,"STRONG",{});var rMt=s(nTe);BAr=r(rMt,"electra"),rMt.forEach(t),PAr=r(SRe," \u2014 "),XU=n(SRe,"A",{href:!0});var tMt=s(XU);IAr=r(tMt,"FlaxElectraForPreTraining"),tMt.forEach(t),qAr=r(SRe," (ELECTRA model)"),SRe.forEach(t),NAr=i(Ce),wE=n(Ce,"LI",{});var RRe=s(wE);sTe=n(RRe,"STRONG",{});var aMt=s(sTe);jAr=r(aMt,"longt5"),aMt.forEach(t),DAr=r(RRe," \u2014 "),zU=n(RRe,"A",{href:!0});var nMt=s(zU);GAr=r(nMt,"FlaxLongT5ForConditionalGeneration"),nMt.forEach(t),OAr=r(RRe," (LongT5 model)"),RRe.forEach(t),VAr=i(Ce),AE=n(Ce,"LI",{});var BRe=s(AE);lTe=n(BRe,"STRONG",{});var sMt=s(lTe);XAr=r(sMt,"mbart"),sMt.forEach(t),zAr=r(BRe," \u2014 "),QU=n(BRe,"A",{href:!0});var lMt=s(QU);QAr=r(lMt,"FlaxMBartForConditionalGeneration"),lMt.forEach(t),WAr=r(BRe," (mBART model)"),BRe.forEach(t),HAr=i(Ce),yE=n(Ce,"LI",{});var PRe=s(yE);iTe=n(PRe,"STRONG",{});var iMt=s(iTe);UAr=r(iMt,"mt5"),iMt.forEach(t),JAr=r(PRe," \u2014 "),WU=n(PRe,"A",{href:!0});var dMt=s(WU);YAr=r(dMt,"FlaxMT5ForConditionalGeneration"),dMt.forEach(t),KAr=r(PRe," (mT5 model)"),PRe.forEach(t),ZAr=i(Ce),LE=n(Ce,"LI",{});var IRe=s(LE);dTe=n(IRe,"STRONG",{});var cMt=s(dTe);e0r=r(cMt,"roberta"),cMt.forEach(t),o0r=r(IRe," \u2014 "),HU=n(IRe,"A",{href:!0});var fMt=s(HU);r0r=r(fMt,"FlaxRobertaForMaskedLM"),fMt.forEach(t),t0r=r(IRe," (RoBERTa model)"),IRe.forEach(t),a0r=i(Ce),xE=n(Ce,"LI",{});var qRe=s(xE);cTe=n(qRe,"STRONG",{});var mMt=s(cTe);n0r=r(mMt,"roformer"),mMt.forEach(t),s0r=r(qRe," \u2014 "),UU=n(qRe,"A",{href:!0});var gMt=s(UU);l0r=r(gMt,"FlaxRoFormerForMaskedLM"),gMt.forEach(t),i0r=r(qRe," (RoFormer model)"),qRe.forEach(t),d0r=i(Ce),$E=n(Ce,"LI",{});var NRe=s($E);fTe=n(NRe,"STRONG",{});var hMt=s(fTe);c0r=r(hMt,"t5"),hMt.forEach(t),f0r=r(NRe," \u2014 "),JU=n(NRe,"A",{href:!0});var pMt=s(JU);m0r=r(pMt,"FlaxT5ForConditionalGeneration"),pMt.forEach(t),g0r=r(NRe," (T5 model)"),NRe.forEach(t),h0r=i(Ce),kE=n(Ce,"LI",{});var jRe=s(kE);mTe=n(jRe,"STRONG",{});var uMt=s(mTe);p0r=r(uMt,"wav2vec2"),uMt.forEach(t),u0r=r(jRe," \u2014 "),YU=n(jRe,"A",{href:!0});var _Mt=s(YU);_0r=r(_Mt,"FlaxWav2Vec2ForPreTraining"),_Mt.forEach(t),b0r=r(jRe," (Wav2Vec2 model)"),jRe.forEach(t),v0r=i(Ce),SE=n(Ce,"LI",{});var DRe=s(SE);gTe=n(DRe,"STRONG",{});var bMt=s(gTe);F0r=r(bMt,"xlm-roberta"),bMt.forEach(t),T0r=r(DRe," \u2014 "),KU=n(DRe,"A",{href:!0});var vMt=s(KU);M0r=r(vMt,"FlaxXLMRobertaForMaskedLM"),vMt.forEach(t),E0r=r(DRe," (XLM-RoBERTa model)"),DRe.forEach(t),Ce.forEach(t),C0r=i(ql),T(RE.$$.fragment,ql),ql.forEach(t),Il.forEach(t),$Ie=i(f),yc=n(f,"H2",{class:!0});var BNe=s(yc);BE=n(BNe,"A",{id:!0,class:!0,href:!0});var FMt=s(BE);hTe=n(FMt,"SPAN",{});var TMt=s(hTe);T(jL.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),w0r=i(BNe),pTe=n(BNe,"SPAN",{});var MMt=s(pTe);A0r=r(MMt,"FlaxAutoModelForMaskedLM"),MMt.forEach(t),BNe.forEach(t),kIe=i(f),gr=n(f,"DIV",{class:!0});var Nl=s(gr);T(DL.$$.fragment,Nl),y0r=i(Nl),Lc=n(Nl,"P",{});var nZ=s(Lc);L0r=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZU=n(nZ,"A",{href:!0});var EMt=s(ZU);x0r=r(EMt,"from_pretrained()"),EMt.forEach(t),$0r=r(nZ," class method or the "),eJ=n(nZ,"A",{href:!0});var CMt=s(eJ);k0r=r(CMt,"from_config()"),CMt.forEach(t),S0r=r(nZ,` class
method.`),nZ.forEach(t),R0r=i(Nl),GL=n(Nl,"P",{});var PNe=s(GL);B0r=r(PNe,"This class cannot be instantiated directly using "),uTe=n(PNe,"CODE",{});var wMt=s(uTe);P0r=r(wMt,"__init__()"),wMt.forEach(t),I0r=r(PNe," (throws an error)."),PNe.forEach(t),q0r=i(Nl),jt=n(Nl,"DIV",{class:!0});var cw=s(jt);T(OL.$$.fragment,cw),N0r=i(cw),_Te=n(cw,"P",{});var AMt=s(_Te);j0r=r(AMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AMt.forEach(t),D0r=i(cw),xc=n(cw,"P",{});var sZ=s(xc);G0r=r(sZ,`Note:
Loading a model from its configuration file does `),bTe=n(sZ,"STRONG",{});var yMt=s(bTe);O0r=r(yMt,"not"),yMt.forEach(t),V0r=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(sZ,"A",{href:!0});var LMt=s(oJ);X0r=r(LMt,"from_pretrained()"),LMt.forEach(t),z0r=r(sZ," to load the model weights."),sZ.forEach(t),Q0r=i(cw),T(PE.$$.fragment,cw),cw.forEach(t),W0r=i(Nl),Dr=n(Nl,"DIV",{class:!0});var jl=s(Dr);T(VL.$$.fragment,jl),H0r=i(jl),vTe=n(jl,"P",{});var xMt=s(vTe);U0r=r(xMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xMt.forEach(t),J0r=i(jl),mn=n(jl,"P",{});var fw=s(mn);Y0r=r(fw,"The model class to instantiate is selected based on the "),FTe=n(fw,"CODE",{});var $Mt=s(FTe);K0r=r($Mt,"model_type"),$Mt.forEach(t),Z0r=r(fw,` property of the config object (either
passed as an argument or loaded from `),TTe=n(fw,"CODE",{});var kMt=s(TTe);eyr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),oyr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MTe=n(fw,"CODE",{});var SMt=s(MTe);ryr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),tyr=r(fw,":"),fw.forEach(t),ayr=i(jl),Le=n(jl,"UL",{});var Be=s(Le);IE=n(Be,"LI",{});var GRe=s(IE);ETe=n(GRe,"STRONG",{});var RMt=s(ETe);nyr=r(RMt,"albert"),RMt.forEach(t),syr=r(GRe," \u2014 "),rJ=n(GRe,"A",{href:!0});var BMt=s(rJ);lyr=r(BMt,"FlaxAlbertForMaskedLM"),BMt.forEach(t),iyr=r(GRe," (ALBERT model)"),GRe.forEach(t),dyr=i(Be),qE=n(Be,"LI",{});var ORe=s(qE);CTe=n(ORe,"STRONG",{});var PMt=s(CTe);cyr=r(PMt,"bart"),PMt.forEach(t),fyr=r(ORe," \u2014 "),tJ=n(ORe,"A",{href:!0});var IMt=s(tJ);myr=r(IMt,"FlaxBartForConditionalGeneration"),IMt.forEach(t),gyr=r(ORe," (BART model)"),ORe.forEach(t),hyr=i(Be),NE=n(Be,"LI",{});var VRe=s(NE);wTe=n(VRe,"STRONG",{});var qMt=s(wTe);pyr=r(qMt,"bert"),qMt.forEach(t),uyr=r(VRe," \u2014 "),aJ=n(VRe,"A",{href:!0});var NMt=s(aJ);_yr=r(NMt,"FlaxBertForMaskedLM"),NMt.forEach(t),byr=r(VRe," (BERT model)"),VRe.forEach(t),vyr=i(Be),jE=n(Be,"LI",{});var XRe=s(jE);ATe=n(XRe,"STRONG",{});var jMt=s(ATe);Fyr=r(jMt,"big_bird"),jMt.forEach(t),Tyr=r(XRe," \u2014 "),nJ=n(XRe,"A",{href:!0});var DMt=s(nJ);Myr=r(DMt,"FlaxBigBirdForMaskedLM"),DMt.forEach(t),Eyr=r(XRe," (BigBird model)"),XRe.forEach(t),Cyr=i(Be),DE=n(Be,"LI",{});var zRe=s(DE);yTe=n(zRe,"STRONG",{});var GMt=s(yTe);wyr=r(GMt,"distilbert"),GMt.forEach(t),Ayr=r(zRe," \u2014 "),sJ=n(zRe,"A",{href:!0});var OMt=s(sJ);yyr=r(OMt,"FlaxDistilBertForMaskedLM"),OMt.forEach(t),Lyr=r(zRe," (DistilBERT model)"),zRe.forEach(t),xyr=i(Be),GE=n(Be,"LI",{});var QRe=s(GE);LTe=n(QRe,"STRONG",{});var VMt=s(LTe);$yr=r(VMt,"electra"),VMt.forEach(t),kyr=r(QRe," \u2014 "),lJ=n(QRe,"A",{href:!0});var XMt=s(lJ);Syr=r(XMt,"FlaxElectraForMaskedLM"),XMt.forEach(t),Ryr=r(QRe," (ELECTRA model)"),QRe.forEach(t),Byr=i(Be),OE=n(Be,"LI",{});var WRe=s(OE);xTe=n(WRe,"STRONG",{});var zMt=s(xTe);Pyr=r(zMt,"mbart"),zMt.forEach(t),Iyr=r(WRe," \u2014 "),iJ=n(WRe,"A",{href:!0});var QMt=s(iJ);qyr=r(QMt,"FlaxMBartForConditionalGeneration"),QMt.forEach(t),Nyr=r(WRe," (mBART model)"),WRe.forEach(t),jyr=i(Be),VE=n(Be,"LI",{});var HRe=s(VE);$Te=n(HRe,"STRONG",{});var WMt=s($Te);Dyr=r(WMt,"roberta"),WMt.forEach(t),Gyr=r(HRe," \u2014 "),dJ=n(HRe,"A",{href:!0});var HMt=s(dJ);Oyr=r(HMt,"FlaxRobertaForMaskedLM"),HMt.forEach(t),Vyr=r(HRe," (RoBERTa model)"),HRe.forEach(t),Xyr=i(Be),XE=n(Be,"LI",{});var URe=s(XE);kTe=n(URe,"STRONG",{});var UMt=s(kTe);zyr=r(UMt,"roformer"),UMt.forEach(t),Qyr=r(URe," \u2014 "),cJ=n(URe,"A",{href:!0});var JMt=s(cJ);Wyr=r(JMt,"FlaxRoFormerForMaskedLM"),JMt.forEach(t),Hyr=r(URe," (RoFormer model)"),URe.forEach(t),Uyr=i(Be),zE=n(Be,"LI",{});var JRe=s(zE);STe=n(JRe,"STRONG",{});var YMt=s(STe);Jyr=r(YMt,"xlm-roberta"),YMt.forEach(t),Yyr=r(JRe," \u2014 "),fJ=n(JRe,"A",{href:!0});var KMt=s(fJ);Kyr=r(KMt,"FlaxXLMRobertaForMaskedLM"),KMt.forEach(t),Zyr=r(JRe," (XLM-RoBERTa model)"),JRe.forEach(t),Be.forEach(t),eLr=i(jl),T(QE.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),SIe=i(f),$c=n(f,"H2",{class:!0});var INe=s($c);WE=n(INe,"A",{id:!0,class:!0,href:!0});var ZMt=s(WE);RTe=n(ZMt,"SPAN",{});var e4t=s(RTe);T(XL.$$.fragment,e4t),e4t.forEach(t),ZMt.forEach(t),oLr=i(INe),BTe=n(INe,"SPAN",{});var o4t=s(BTe);rLr=r(o4t,"FlaxAutoModelForSeq2SeqLM"),o4t.forEach(t),INe.forEach(t),RIe=i(f),hr=n(f,"DIV",{class:!0});var Dl=s(hr);T(zL.$$.fragment,Dl),tLr=i(Dl),kc=n(Dl,"P",{});var lZ=s(kc);aLr=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mJ=n(lZ,"A",{href:!0});var r4t=s(mJ);nLr=r(r4t,"from_pretrained()"),r4t.forEach(t),sLr=r(lZ," class method or the "),gJ=n(lZ,"A",{href:!0});var t4t=s(gJ);lLr=r(t4t,"from_config()"),t4t.forEach(t),iLr=r(lZ,` class
method.`),lZ.forEach(t),dLr=i(Dl),QL=n(Dl,"P",{});var qNe=s(QL);cLr=r(qNe,"This class cannot be instantiated directly using "),PTe=n(qNe,"CODE",{});var a4t=s(PTe);fLr=r(a4t,"__init__()"),a4t.forEach(t),mLr=r(qNe," (throws an error)."),qNe.forEach(t),gLr=i(Dl),Dt=n(Dl,"DIV",{class:!0});var mw=s(Dt);T(WL.$$.fragment,mw),hLr=i(mw),ITe=n(mw,"P",{});var n4t=s(ITe);pLr=r(n4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),n4t.forEach(t),uLr=i(mw),Sc=n(mw,"P",{});var iZ=s(Sc);_Lr=r(iZ,`Note:
Loading a model from its configuration file does `),qTe=n(iZ,"STRONG",{});var s4t=s(qTe);bLr=r(s4t,"not"),s4t.forEach(t),vLr=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(iZ,"A",{href:!0});var l4t=s(hJ);FLr=r(l4t,"from_pretrained()"),l4t.forEach(t),TLr=r(iZ," to load the model weights."),iZ.forEach(t),MLr=i(mw),T(HE.$$.fragment,mw),mw.forEach(t),ELr=i(Dl),Gr=n(Dl,"DIV",{class:!0});var Gl=s(Gr);T(HL.$$.fragment,Gl),CLr=i(Gl),NTe=n(Gl,"P",{});var i4t=s(NTe);wLr=r(i4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),i4t.forEach(t),ALr=i(Gl),gn=n(Gl,"P",{});var gw=s(gn);yLr=r(gw,"The model class to instantiate is selected based on the "),jTe=n(gw,"CODE",{});var d4t=s(jTe);LLr=r(d4t,"model_type"),d4t.forEach(t),xLr=r(gw,` property of the config object (either
passed as an argument or loaded from `),DTe=n(gw,"CODE",{});var c4t=s(DTe);$Lr=r(c4t,"pretrained_model_name_or_path"),c4t.forEach(t),kLr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(gw,"CODE",{});var f4t=s(GTe);SLr=r(f4t,"pretrained_model_name_or_path"),f4t.forEach(t),RLr=r(gw,":"),gw.forEach(t),BLr=i(Gl),xe=n(Gl,"UL",{});var Pe=s(xe);UE=n(Pe,"LI",{});var YRe=s(UE);OTe=n(YRe,"STRONG",{});var m4t=s(OTe);PLr=r(m4t,"bart"),m4t.forEach(t),ILr=r(YRe," \u2014 "),pJ=n(YRe,"A",{href:!0});var g4t=s(pJ);qLr=r(g4t,"FlaxBartForConditionalGeneration"),g4t.forEach(t),NLr=r(YRe," (BART model)"),YRe.forEach(t),jLr=i(Pe),JE=n(Pe,"LI",{});var KRe=s(JE);VTe=n(KRe,"STRONG",{});var h4t=s(VTe);DLr=r(h4t,"blenderbot"),h4t.forEach(t),GLr=r(KRe," \u2014 "),uJ=n(KRe,"A",{href:!0});var p4t=s(uJ);OLr=r(p4t,"FlaxBlenderbotForConditionalGeneration"),p4t.forEach(t),VLr=r(KRe," (Blenderbot model)"),KRe.forEach(t),XLr=i(Pe),YE=n(Pe,"LI",{});var ZRe=s(YE);XTe=n(ZRe,"STRONG",{});var u4t=s(XTe);zLr=r(u4t,"blenderbot-small"),u4t.forEach(t),QLr=r(ZRe," \u2014 "),_J=n(ZRe,"A",{href:!0});var _4t=s(_J);WLr=r(_4t,"FlaxBlenderbotSmallForConditionalGeneration"),_4t.forEach(t),HLr=r(ZRe," (BlenderbotSmall model)"),ZRe.forEach(t),ULr=i(Pe),KE=n(Pe,"LI",{});var eBe=s(KE);zTe=n(eBe,"STRONG",{});var b4t=s(zTe);JLr=r(b4t,"encoder-decoder"),b4t.forEach(t),YLr=r(eBe," \u2014 "),bJ=n(eBe,"A",{href:!0});var v4t=s(bJ);KLr=r(v4t,"FlaxEncoderDecoderModel"),v4t.forEach(t),ZLr=r(eBe," (Encoder decoder model)"),eBe.forEach(t),e8r=i(Pe),ZE=n(Pe,"LI",{});var oBe=s(ZE);QTe=n(oBe,"STRONG",{});var F4t=s(QTe);o8r=r(F4t,"longt5"),F4t.forEach(t),r8r=r(oBe," \u2014 "),vJ=n(oBe,"A",{href:!0});var T4t=s(vJ);t8r=r(T4t,"FlaxLongT5ForConditionalGeneration"),T4t.forEach(t),a8r=r(oBe," (LongT5 model)"),oBe.forEach(t),n8r=i(Pe),e5=n(Pe,"LI",{});var rBe=s(e5);WTe=n(rBe,"STRONG",{});var M4t=s(WTe);s8r=r(M4t,"marian"),M4t.forEach(t),l8r=r(rBe," \u2014 "),FJ=n(rBe,"A",{href:!0});var E4t=s(FJ);i8r=r(E4t,"FlaxMarianMTModel"),E4t.forEach(t),d8r=r(rBe," (Marian model)"),rBe.forEach(t),c8r=i(Pe),o5=n(Pe,"LI",{});var tBe=s(o5);HTe=n(tBe,"STRONG",{});var C4t=s(HTe);f8r=r(C4t,"mbart"),C4t.forEach(t),m8r=r(tBe," \u2014 "),TJ=n(tBe,"A",{href:!0});var w4t=s(TJ);g8r=r(w4t,"FlaxMBartForConditionalGeneration"),w4t.forEach(t),h8r=r(tBe," (mBART model)"),tBe.forEach(t),p8r=i(Pe),r5=n(Pe,"LI",{});var aBe=s(r5);UTe=n(aBe,"STRONG",{});var A4t=s(UTe);u8r=r(A4t,"mt5"),A4t.forEach(t),_8r=r(aBe," \u2014 "),MJ=n(aBe,"A",{href:!0});var y4t=s(MJ);b8r=r(y4t,"FlaxMT5ForConditionalGeneration"),y4t.forEach(t),v8r=r(aBe," (mT5 model)"),aBe.forEach(t),F8r=i(Pe),t5=n(Pe,"LI",{});var nBe=s(t5);JTe=n(nBe,"STRONG",{});var L4t=s(JTe);T8r=r(L4t,"pegasus"),L4t.forEach(t),M8r=r(nBe," \u2014 "),EJ=n(nBe,"A",{href:!0});var x4t=s(EJ);E8r=r(x4t,"FlaxPegasusForConditionalGeneration"),x4t.forEach(t),C8r=r(nBe," (Pegasus model)"),nBe.forEach(t),w8r=i(Pe),a5=n(Pe,"LI",{});var sBe=s(a5);YTe=n(sBe,"STRONG",{});var $4t=s(YTe);A8r=r($4t,"t5"),$4t.forEach(t),y8r=r(sBe," \u2014 "),CJ=n(sBe,"A",{href:!0});var k4t=s(CJ);L8r=r(k4t,"FlaxT5ForConditionalGeneration"),k4t.forEach(t),x8r=r(sBe," (T5 model)"),sBe.forEach(t),Pe.forEach(t),$8r=i(Gl),T(n5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),BIe=i(f),Rc=n(f,"H2",{class:!0});var NNe=s(Rc);s5=n(NNe,"A",{id:!0,class:!0,href:!0});var S4t=s(s5);KTe=n(S4t,"SPAN",{});var R4t=s(KTe);T(UL.$$.fragment,R4t),R4t.forEach(t),S4t.forEach(t),k8r=i(NNe),ZTe=n(NNe,"SPAN",{});var B4t=s(ZTe);S8r=r(B4t,"FlaxAutoModelForSequenceClassification"),B4t.forEach(t),NNe.forEach(t),PIe=i(f),pr=n(f,"DIV",{class:!0});var Ol=s(pr);T(JL.$$.fragment,Ol),R8r=i(Ol),Bc=n(Ol,"P",{});var dZ=s(Bc);B8r=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),wJ=n(dZ,"A",{href:!0});var P4t=s(wJ);P8r=r(P4t,"from_pretrained()"),P4t.forEach(t),I8r=r(dZ," class method or the "),AJ=n(dZ,"A",{href:!0});var I4t=s(AJ);q8r=r(I4t,"from_config()"),I4t.forEach(t),N8r=r(dZ,` class
method.`),dZ.forEach(t),j8r=i(Ol),YL=n(Ol,"P",{});var jNe=s(YL);D8r=r(jNe,"This class cannot be instantiated directly using "),e7e=n(jNe,"CODE",{});var q4t=s(e7e);G8r=r(q4t,"__init__()"),q4t.forEach(t),O8r=r(jNe," (throws an error)."),jNe.forEach(t),V8r=i(Ol),Gt=n(Ol,"DIV",{class:!0});var hw=s(Gt);T(KL.$$.fragment,hw),X8r=i(hw),o7e=n(hw,"P",{});var N4t=s(o7e);z8r=r(N4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),N4t.forEach(t),Q8r=i(hw),Pc=n(hw,"P",{});var cZ=s(Pc);W8r=r(cZ,`Note:
Loading a model from its configuration file does `),r7e=n(cZ,"STRONG",{});var j4t=s(r7e);H8r=r(j4t,"not"),j4t.forEach(t),U8r=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(cZ,"A",{href:!0});var D4t=s(yJ);J8r=r(D4t,"from_pretrained()"),D4t.forEach(t),Y8r=r(cZ," to load the model weights."),cZ.forEach(t),K8r=i(hw),T(l5.$$.fragment,hw),hw.forEach(t),Z8r=i(Ol),Or=n(Ol,"DIV",{class:!0});var Vl=s(Or);T(ZL.$$.fragment,Vl),exr=i(Vl),t7e=n(Vl,"P",{});var G4t=s(t7e);oxr=r(G4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G4t.forEach(t),rxr=i(Vl),hn=n(Vl,"P",{});var pw=s(hn);txr=r(pw,"The model class to instantiate is selected based on the "),a7e=n(pw,"CODE",{});var O4t=s(a7e);axr=r(O4t,"model_type"),O4t.forEach(t),nxr=r(pw,` property of the config object (either
passed as an argument or loaded from `),n7e=n(pw,"CODE",{});var V4t=s(n7e);sxr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),lxr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(pw,"CODE",{});var X4t=s(s7e);ixr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),dxr=r(pw,":"),pw.forEach(t),cxr=i(Vl),$e=n(Vl,"UL",{});var Ie=s($e);i5=n(Ie,"LI",{});var lBe=s(i5);l7e=n(lBe,"STRONG",{});var z4t=s(l7e);fxr=r(z4t,"albert"),z4t.forEach(t),mxr=r(lBe," \u2014 "),LJ=n(lBe,"A",{href:!0});var Q4t=s(LJ);gxr=r(Q4t,"FlaxAlbertForSequenceClassification"),Q4t.forEach(t),hxr=r(lBe," (ALBERT model)"),lBe.forEach(t),pxr=i(Ie),d5=n(Ie,"LI",{});var iBe=s(d5);i7e=n(iBe,"STRONG",{});var W4t=s(i7e);uxr=r(W4t,"bart"),W4t.forEach(t),_xr=r(iBe," \u2014 "),xJ=n(iBe,"A",{href:!0});var H4t=s(xJ);bxr=r(H4t,"FlaxBartForSequenceClassification"),H4t.forEach(t),vxr=r(iBe," (BART model)"),iBe.forEach(t),Fxr=i(Ie),c5=n(Ie,"LI",{});var dBe=s(c5);d7e=n(dBe,"STRONG",{});var U4t=s(d7e);Txr=r(U4t,"bert"),U4t.forEach(t),Mxr=r(dBe," \u2014 "),$J=n(dBe,"A",{href:!0});var J4t=s($J);Exr=r(J4t,"FlaxBertForSequenceClassification"),J4t.forEach(t),Cxr=r(dBe," (BERT model)"),dBe.forEach(t),wxr=i(Ie),f5=n(Ie,"LI",{});var cBe=s(f5);c7e=n(cBe,"STRONG",{});var Y4t=s(c7e);Axr=r(Y4t,"big_bird"),Y4t.forEach(t),yxr=r(cBe," \u2014 "),kJ=n(cBe,"A",{href:!0});var K4t=s(kJ);Lxr=r(K4t,"FlaxBigBirdForSequenceClassification"),K4t.forEach(t),xxr=r(cBe," (BigBird model)"),cBe.forEach(t),$xr=i(Ie),m5=n(Ie,"LI",{});var fBe=s(m5);f7e=n(fBe,"STRONG",{});var Z4t=s(f7e);kxr=r(Z4t,"distilbert"),Z4t.forEach(t),Sxr=r(fBe," \u2014 "),SJ=n(fBe,"A",{href:!0});var eEt=s(SJ);Rxr=r(eEt,"FlaxDistilBertForSequenceClassification"),eEt.forEach(t),Bxr=r(fBe," (DistilBERT model)"),fBe.forEach(t),Pxr=i(Ie),g5=n(Ie,"LI",{});var mBe=s(g5);m7e=n(mBe,"STRONG",{});var oEt=s(m7e);Ixr=r(oEt,"electra"),oEt.forEach(t),qxr=r(mBe," \u2014 "),RJ=n(mBe,"A",{href:!0});var rEt=s(RJ);Nxr=r(rEt,"FlaxElectraForSequenceClassification"),rEt.forEach(t),jxr=r(mBe," (ELECTRA model)"),mBe.forEach(t),Dxr=i(Ie),h5=n(Ie,"LI",{});var gBe=s(h5);g7e=n(gBe,"STRONG",{});var tEt=s(g7e);Gxr=r(tEt,"mbart"),tEt.forEach(t),Oxr=r(gBe," \u2014 "),BJ=n(gBe,"A",{href:!0});var aEt=s(BJ);Vxr=r(aEt,"FlaxMBartForSequenceClassification"),aEt.forEach(t),Xxr=r(gBe," (mBART model)"),gBe.forEach(t),zxr=i(Ie),p5=n(Ie,"LI",{});var hBe=s(p5);h7e=n(hBe,"STRONG",{});var nEt=s(h7e);Qxr=r(nEt,"roberta"),nEt.forEach(t),Wxr=r(hBe," \u2014 "),PJ=n(hBe,"A",{href:!0});var sEt=s(PJ);Hxr=r(sEt,"FlaxRobertaForSequenceClassification"),sEt.forEach(t),Uxr=r(hBe," (RoBERTa model)"),hBe.forEach(t),Jxr=i(Ie),u5=n(Ie,"LI",{});var pBe=s(u5);p7e=n(pBe,"STRONG",{});var lEt=s(p7e);Yxr=r(lEt,"roformer"),lEt.forEach(t),Kxr=r(pBe," \u2014 "),IJ=n(pBe,"A",{href:!0});var iEt=s(IJ);Zxr=r(iEt,"FlaxRoFormerForSequenceClassification"),iEt.forEach(t),e$r=r(pBe," (RoFormer model)"),pBe.forEach(t),o$r=i(Ie),_5=n(Ie,"LI",{});var uBe=s(_5);u7e=n(uBe,"STRONG",{});var dEt=s(u7e);r$r=r(dEt,"xlm-roberta"),dEt.forEach(t),t$r=r(uBe," \u2014 "),qJ=n(uBe,"A",{href:!0});var cEt=s(qJ);a$r=r(cEt,"FlaxXLMRobertaForSequenceClassification"),cEt.forEach(t),n$r=r(uBe," (XLM-RoBERTa model)"),uBe.forEach(t),Ie.forEach(t),s$r=i(Vl),T(b5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),IIe=i(f),Ic=n(f,"H2",{class:!0});var DNe=s(Ic);v5=n(DNe,"A",{id:!0,class:!0,href:!0});var fEt=s(v5);_7e=n(fEt,"SPAN",{});var mEt=s(_7e);T(e8.$$.fragment,mEt),mEt.forEach(t),fEt.forEach(t),l$r=i(DNe),b7e=n(DNe,"SPAN",{});var gEt=s(b7e);i$r=r(gEt,"FlaxAutoModelForQuestionAnswering"),gEt.forEach(t),DNe.forEach(t),qIe=i(f),ur=n(f,"DIV",{class:!0});var Xl=s(ur);T(o8.$$.fragment,Xl),d$r=i(Xl),qc=n(Xl,"P",{});var fZ=s(qc);c$r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),NJ=n(fZ,"A",{href:!0});var hEt=s(NJ);f$r=r(hEt,"from_pretrained()"),hEt.forEach(t),m$r=r(fZ," class method or the "),jJ=n(fZ,"A",{href:!0});var pEt=s(jJ);g$r=r(pEt,"from_config()"),pEt.forEach(t),h$r=r(fZ,` class
method.`),fZ.forEach(t),p$r=i(Xl),r8=n(Xl,"P",{});var GNe=s(r8);u$r=r(GNe,"This class cannot be instantiated directly using "),v7e=n(GNe,"CODE",{});var uEt=s(v7e);_$r=r(uEt,"__init__()"),uEt.forEach(t),b$r=r(GNe," (throws an error)."),GNe.forEach(t),v$r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var uw=s(Ot);T(t8.$$.fragment,uw),F$r=i(uw),F7e=n(uw,"P",{});var _Et=s(F7e);T$r=r(_Et,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Et.forEach(t),M$r=i(uw),Nc=n(uw,"P",{});var mZ=s(Nc);E$r=r(mZ,`Note:
Loading a model from its configuration file does `),T7e=n(mZ,"STRONG",{});var bEt=s(T7e);C$r=r(bEt,"not"),bEt.forEach(t),w$r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DJ=n(mZ,"A",{href:!0});var vEt=s(DJ);A$r=r(vEt,"from_pretrained()"),vEt.forEach(t),y$r=r(mZ," to load the model weights."),mZ.forEach(t),L$r=i(uw),T(F5.$$.fragment,uw),uw.forEach(t),x$r=i(Xl),Vr=n(Xl,"DIV",{class:!0});var zl=s(Vr);T(a8.$$.fragment,zl),$$r=i(zl),M7e=n(zl,"P",{});var FEt=s(M7e);k$r=r(FEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FEt.forEach(t),S$r=i(zl),pn=n(zl,"P",{});var _w=s(pn);R$r=r(_w,"The model class to instantiate is selected based on the "),E7e=n(_w,"CODE",{});var TEt=s(E7e);B$r=r(TEt,"model_type"),TEt.forEach(t),P$r=r(_w,` property of the config object (either
passed as an argument or loaded from `),C7e=n(_w,"CODE",{});var MEt=s(C7e);I$r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),q$r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(_w,"CODE",{});var EEt=s(w7e);N$r=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),j$r=r(_w,":"),_w.forEach(t),D$r=i(zl),ke=n(zl,"UL",{});var qe=s(ke);T5=n(qe,"LI",{});var _Be=s(T5);A7e=n(_Be,"STRONG",{});var CEt=s(A7e);G$r=r(CEt,"albert"),CEt.forEach(t),O$r=r(_Be," \u2014 "),GJ=n(_Be,"A",{href:!0});var wEt=s(GJ);V$r=r(wEt,"FlaxAlbertForQuestionAnswering"),wEt.forEach(t),X$r=r(_Be," (ALBERT model)"),_Be.forEach(t),z$r=i(qe),M5=n(qe,"LI",{});var bBe=s(M5);y7e=n(bBe,"STRONG",{});var AEt=s(y7e);Q$r=r(AEt,"bart"),AEt.forEach(t),W$r=r(bBe," \u2014 "),OJ=n(bBe,"A",{href:!0});var yEt=s(OJ);H$r=r(yEt,"FlaxBartForQuestionAnswering"),yEt.forEach(t),U$r=r(bBe," (BART model)"),bBe.forEach(t),J$r=i(qe),E5=n(qe,"LI",{});var vBe=s(E5);L7e=n(vBe,"STRONG",{});var LEt=s(L7e);Y$r=r(LEt,"bert"),LEt.forEach(t),K$r=r(vBe," \u2014 "),VJ=n(vBe,"A",{href:!0});var xEt=s(VJ);Z$r=r(xEt,"FlaxBertForQuestionAnswering"),xEt.forEach(t),ekr=r(vBe," (BERT model)"),vBe.forEach(t),okr=i(qe),C5=n(qe,"LI",{});var FBe=s(C5);x7e=n(FBe,"STRONG",{});var $Et=s(x7e);rkr=r($Et,"big_bird"),$Et.forEach(t),tkr=r(FBe," \u2014 "),XJ=n(FBe,"A",{href:!0});var kEt=s(XJ);akr=r(kEt,"FlaxBigBirdForQuestionAnswering"),kEt.forEach(t),nkr=r(FBe," (BigBird model)"),FBe.forEach(t),skr=i(qe),w5=n(qe,"LI",{});var TBe=s(w5);$7e=n(TBe,"STRONG",{});var SEt=s($7e);lkr=r(SEt,"distilbert"),SEt.forEach(t),ikr=r(TBe," \u2014 "),zJ=n(TBe,"A",{href:!0});var REt=s(zJ);dkr=r(REt,"FlaxDistilBertForQuestionAnswering"),REt.forEach(t),ckr=r(TBe," (DistilBERT model)"),TBe.forEach(t),fkr=i(qe),A5=n(qe,"LI",{});var MBe=s(A5);k7e=n(MBe,"STRONG",{});var BEt=s(k7e);mkr=r(BEt,"electra"),BEt.forEach(t),gkr=r(MBe," \u2014 "),QJ=n(MBe,"A",{href:!0});var PEt=s(QJ);hkr=r(PEt,"FlaxElectraForQuestionAnswering"),PEt.forEach(t),pkr=r(MBe," (ELECTRA model)"),MBe.forEach(t),ukr=i(qe),y5=n(qe,"LI",{});var EBe=s(y5);S7e=n(EBe,"STRONG",{});var IEt=s(S7e);_kr=r(IEt,"mbart"),IEt.forEach(t),bkr=r(EBe," \u2014 "),WJ=n(EBe,"A",{href:!0});var qEt=s(WJ);vkr=r(qEt,"FlaxMBartForQuestionAnswering"),qEt.forEach(t),Fkr=r(EBe," (mBART model)"),EBe.forEach(t),Tkr=i(qe),L5=n(qe,"LI",{});var CBe=s(L5);R7e=n(CBe,"STRONG",{});var NEt=s(R7e);Mkr=r(NEt,"roberta"),NEt.forEach(t),Ekr=r(CBe," \u2014 "),HJ=n(CBe,"A",{href:!0});var jEt=s(HJ);Ckr=r(jEt,"FlaxRobertaForQuestionAnswering"),jEt.forEach(t),wkr=r(CBe," (RoBERTa model)"),CBe.forEach(t),Akr=i(qe),x5=n(qe,"LI",{});var wBe=s(x5);B7e=n(wBe,"STRONG",{});var DEt=s(B7e);ykr=r(DEt,"roformer"),DEt.forEach(t),Lkr=r(wBe," \u2014 "),UJ=n(wBe,"A",{href:!0});var GEt=s(UJ);xkr=r(GEt,"FlaxRoFormerForQuestionAnswering"),GEt.forEach(t),$kr=r(wBe," (RoFormer model)"),wBe.forEach(t),kkr=i(qe),$5=n(qe,"LI",{});var ABe=s($5);P7e=n(ABe,"STRONG",{});var OEt=s(P7e);Skr=r(OEt,"xlm-roberta"),OEt.forEach(t),Rkr=r(ABe," \u2014 "),JJ=n(ABe,"A",{href:!0});var VEt=s(JJ);Bkr=r(VEt,"FlaxXLMRobertaForQuestionAnswering"),VEt.forEach(t),Pkr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),qe.forEach(t),Ikr=i(zl),T(k5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),NIe=i(f),jc=n(f,"H2",{class:!0});var ONe=s(jc);S5=n(ONe,"A",{id:!0,class:!0,href:!0});var XEt=s(S5);I7e=n(XEt,"SPAN",{});var zEt=s(I7e);T(n8.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),qkr=i(ONe),q7e=n(ONe,"SPAN",{});var QEt=s(q7e);Nkr=r(QEt,"FlaxAutoModelForTokenClassification"),QEt.forEach(t),ONe.forEach(t),jIe=i(f),_r=n(f,"DIV",{class:!0});var Ql=s(_r);T(s8.$$.fragment,Ql),jkr=i(Ql),Dc=n(Ql,"P",{});var gZ=s(Dc);Dkr=r(gZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YJ=n(gZ,"A",{href:!0});var WEt=s(YJ);Gkr=r(WEt,"from_pretrained()"),WEt.forEach(t),Okr=r(gZ," class method or the "),KJ=n(gZ,"A",{href:!0});var HEt=s(KJ);Vkr=r(HEt,"from_config()"),HEt.forEach(t),Xkr=r(gZ,` class
method.`),gZ.forEach(t),zkr=i(Ql),l8=n(Ql,"P",{});var VNe=s(l8);Qkr=r(VNe,"This class cannot be instantiated directly using "),N7e=n(VNe,"CODE",{});var UEt=s(N7e);Wkr=r(UEt,"__init__()"),UEt.forEach(t),Hkr=r(VNe," (throws an error)."),VNe.forEach(t),Ukr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var bw=s(Vt);T(i8.$$.fragment,bw),Jkr=i(bw),j7e=n(bw,"P",{});var JEt=s(j7e);Ykr=r(JEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JEt.forEach(t),Kkr=i(bw),Gc=n(bw,"P",{});var hZ=s(Gc);Zkr=r(hZ,`Note:
Loading a model from its configuration file does `),D7e=n(hZ,"STRONG",{});var YEt=s(D7e);eSr=r(YEt,"not"),YEt.forEach(t),oSr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZJ=n(hZ,"A",{href:!0});var KEt=s(ZJ);rSr=r(KEt,"from_pretrained()"),KEt.forEach(t),tSr=r(hZ," to load the model weights."),hZ.forEach(t),aSr=i(bw),T(R5.$$.fragment,bw),bw.forEach(t),nSr=i(Ql),Xr=n(Ql,"DIV",{class:!0});var Wl=s(Xr);T(d8.$$.fragment,Wl),sSr=i(Wl),G7e=n(Wl,"P",{});var ZEt=s(G7e);lSr=r(ZEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZEt.forEach(t),iSr=i(Wl),un=n(Wl,"P",{});var vw=s(un);dSr=r(vw,"The model class to instantiate is selected based on the "),O7e=n(vw,"CODE",{});var e5t=s(O7e);cSr=r(e5t,"model_type"),e5t.forEach(t),fSr=r(vw,` property of the config object (either
passed as an argument or loaded from `),V7e=n(vw,"CODE",{});var o5t=s(V7e);mSr=r(o5t,"pretrained_model_name_or_path"),o5t.forEach(t),gSr=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X7e=n(vw,"CODE",{});var r5t=s(X7e);hSr=r(r5t,"pretrained_model_name_or_path"),r5t.forEach(t),pSr=r(vw,":"),vw.forEach(t),uSr=i(Wl),Ge=n(Wl,"UL",{});var Fo=s(Ge);B5=n(Fo,"LI",{});var yBe=s(B5);z7e=n(yBe,"STRONG",{});var t5t=s(z7e);_Sr=r(t5t,"albert"),t5t.forEach(t),bSr=r(yBe," \u2014 "),eY=n(yBe,"A",{href:!0});var a5t=s(eY);vSr=r(a5t,"FlaxAlbertForTokenClassification"),a5t.forEach(t),FSr=r(yBe," (ALBERT model)"),yBe.forEach(t),TSr=i(Fo),P5=n(Fo,"LI",{});var LBe=s(P5);Q7e=n(LBe,"STRONG",{});var n5t=s(Q7e);MSr=r(n5t,"bert"),n5t.forEach(t),ESr=r(LBe," \u2014 "),oY=n(LBe,"A",{href:!0});var s5t=s(oY);CSr=r(s5t,"FlaxBertForTokenClassification"),s5t.forEach(t),wSr=r(LBe," (BERT model)"),LBe.forEach(t),ASr=i(Fo),I5=n(Fo,"LI",{});var xBe=s(I5);W7e=n(xBe,"STRONG",{});var l5t=s(W7e);ySr=r(l5t,"big_bird"),l5t.forEach(t),LSr=r(xBe," \u2014 "),rY=n(xBe,"A",{href:!0});var i5t=s(rY);xSr=r(i5t,"FlaxBigBirdForTokenClassification"),i5t.forEach(t),$Sr=r(xBe," (BigBird model)"),xBe.forEach(t),kSr=i(Fo),q5=n(Fo,"LI",{});var $Be=s(q5);H7e=n($Be,"STRONG",{});var d5t=s(H7e);SSr=r(d5t,"distilbert"),d5t.forEach(t),RSr=r($Be," \u2014 "),tY=n($Be,"A",{href:!0});var c5t=s(tY);BSr=r(c5t,"FlaxDistilBertForTokenClassification"),c5t.forEach(t),PSr=r($Be," (DistilBERT model)"),$Be.forEach(t),ISr=i(Fo),N5=n(Fo,"LI",{});var kBe=s(N5);U7e=n(kBe,"STRONG",{});var f5t=s(U7e);qSr=r(f5t,"electra"),f5t.forEach(t),NSr=r(kBe," \u2014 "),aY=n(kBe,"A",{href:!0});var m5t=s(aY);jSr=r(m5t,"FlaxElectraForTokenClassification"),m5t.forEach(t),DSr=r(kBe," (ELECTRA model)"),kBe.forEach(t),GSr=i(Fo),j5=n(Fo,"LI",{});var SBe=s(j5);J7e=n(SBe,"STRONG",{});var g5t=s(J7e);OSr=r(g5t,"roberta"),g5t.forEach(t),VSr=r(SBe," \u2014 "),nY=n(SBe,"A",{href:!0});var h5t=s(nY);XSr=r(h5t,"FlaxRobertaForTokenClassification"),h5t.forEach(t),zSr=r(SBe," (RoBERTa model)"),SBe.forEach(t),QSr=i(Fo),D5=n(Fo,"LI",{});var RBe=s(D5);Y7e=n(RBe,"STRONG",{});var p5t=s(Y7e);WSr=r(p5t,"roformer"),p5t.forEach(t),HSr=r(RBe," \u2014 "),sY=n(RBe,"A",{href:!0});var u5t=s(sY);USr=r(u5t,"FlaxRoFormerForTokenClassification"),u5t.forEach(t),JSr=r(RBe," (RoFormer model)"),RBe.forEach(t),YSr=i(Fo),G5=n(Fo,"LI",{});var BBe=s(G5);K7e=n(BBe,"STRONG",{});var _5t=s(K7e);KSr=r(_5t,"xlm-roberta"),_5t.forEach(t),ZSr=r(BBe," \u2014 "),lY=n(BBe,"A",{href:!0});var b5t=s(lY);eRr=r(b5t,"FlaxXLMRobertaForTokenClassification"),b5t.forEach(t),oRr=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),Fo.forEach(t),rRr=i(Wl),T(O5.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),DIe=i(f),Oc=n(f,"H2",{class:!0});var XNe=s(Oc);V5=n(XNe,"A",{id:!0,class:!0,href:!0});var v5t=s(V5);Z7e=n(v5t,"SPAN",{});var F5t=s(Z7e);T(c8.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),tRr=i(XNe),e9e=n(XNe,"SPAN",{});var T5t=s(e9e);aRr=r(T5t,"FlaxAutoModelForMultipleChoice"),T5t.forEach(t),XNe.forEach(t),GIe=i(f),br=n(f,"DIV",{class:!0});var Hl=s(br);T(f8.$$.fragment,Hl),nRr=i(Hl),Vc=n(Hl,"P",{});var pZ=s(Vc);sRr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),iY=n(pZ,"A",{href:!0});var M5t=s(iY);lRr=r(M5t,"from_pretrained()"),M5t.forEach(t),iRr=r(pZ," class method or the "),dY=n(pZ,"A",{href:!0});var E5t=s(dY);dRr=r(E5t,"from_config()"),E5t.forEach(t),cRr=r(pZ,` class
method.`),pZ.forEach(t),fRr=i(Hl),m8=n(Hl,"P",{});var zNe=s(m8);mRr=r(zNe,"This class cannot be instantiated directly using "),o9e=n(zNe,"CODE",{});var C5t=s(o9e);gRr=r(C5t,"__init__()"),C5t.forEach(t),hRr=r(zNe," (throws an error)."),zNe.forEach(t),pRr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var Fw=s(Xt);T(g8.$$.fragment,Fw),uRr=i(Fw),r9e=n(Fw,"P",{});var w5t=s(r9e);_Rr=r(w5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w5t.forEach(t),bRr=i(Fw),Xc=n(Fw,"P",{});var uZ=s(Xc);vRr=r(uZ,`Note:
Loading a model from its configuration file does `),t9e=n(uZ,"STRONG",{});var A5t=s(t9e);FRr=r(A5t,"not"),A5t.forEach(t),TRr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(uZ,"A",{href:!0});var y5t=s(cY);MRr=r(y5t,"from_pretrained()"),y5t.forEach(t),ERr=r(uZ," to load the model weights."),uZ.forEach(t),CRr=i(Fw),T(X5.$$.fragment,Fw),Fw.forEach(t),wRr=i(Hl),zr=n(Hl,"DIV",{class:!0});var Ul=s(zr);T(h8.$$.fragment,Ul),ARr=i(Ul),a9e=n(Ul,"P",{});var L5t=s(a9e);yRr=r(L5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L5t.forEach(t),LRr=i(Ul),_n=n(Ul,"P",{});var Tw=s(_n);xRr=r(Tw,"The model class to instantiate is selected based on the "),n9e=n(Tw,"CODE",{});var x5t=s(n9e);$Rr=r(x5t,"model_type"),x5t.forEach(t),kRr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),s9e=n(Tw,"CODE",{});var $5t=s(s9e);SRr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),RRr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l9e=n(Tw,"CODE",{});var k5t=s(l9e);BRr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),PRr=r(Tw,":"),Tw.forEach(t),IRr=i(Ul),Oe=n(Ul,"UL",{});var To=s(Oe);z5=n(To,"LI",{});var PBe=s(z5);i9e=n(PBe,"STRONG",{});var S5t=s(i9e);qRr=r(S5t,"albert"),S5t.forEach(t),NRr=r(PBe," \u2014 "),fY=n(PBe,"A",{href:!0});var R5t=s(fY);jRr=r(R5t,"FlaxAlbertForMultipleChoice"),R5t.forEach(t),DRr=r(PBe," (ALBERT model)"),PBe.forEach(t),GRr=i(To),Q5=n(To,"LI",{});var IBe=s(Q5);d9e=n(IBe,"STRONG",{});var B5t=s(d9e);ORr=r(B5t,"bert"),B5t.forEach(t),VRr=r(IBe," \u2014 "),mY=n(IBe,"A",{href:!0});var P5t=s(mY);XRr=r(P5t,"FlaxBertForMultipleChoice"),P5t.forEach(t),zRr=r(IBe," (BERT model)"),IBe.forEach(t),QRr=i(To),W5=n(To,"LI",{});var qBe=s(W5);c9e=n(qBe,"STRONG",{});var I5t=s(c9e);WRr=r(I5t,"big_bird"),I5t.forEach(t),HRr=r(qBe," \u2014 "),gY=n(qBe,"A",{href:!0});var q5t=s(gY);URr=r(q5t,"FlaxBigBirdForMultipleChoice"),q5t.forEach(t),JRr=r(qBe," (BigBird model)"),qBe.forEach(t),YRr=i(To),H5=n(To,"LI",{});var NBe=s(H5);f9e=n(NBe,"STRONG",{});var N5t=s(f9e);KRr=r(N5t,"distilbert"),N5t.forEach(t),ZRr=r(NBe," \u2014 "),hY=n(NBe,"A",{href:!0});var j5t=s(hY);eBr=r(j5t,"FlaxDistilBertForMultipleChoice"),j5t.forEach(t),oBr=r(NBe," (DistilBERT model)"),NBe.forEach(t),rBr=i(To),U5=n(To,"LI",{});var jBe=s(U5);m9e=n(jBe,"STRONG",{});var D5t=s(m9e);tBr=r(D5t,"electra"),D5t.forEach(t),aBr=r(jBe," \u2014 "),pY=n(jBe,"A",{href:!0});var G5t=s(pY);nBr=r(G5t,"FlaxElectraForMultipleChoice"),G5t.forEach(t),sBr=r(jBe," (ELECTRA model)"),jBe.forEach(t),lBr=i(To),J5=n(To,"LI",{});var DBe=s(J5);g9e=n(DBe,"STRONG",{});var O5t=s(g9e);iBr=r(O5t,"roberta"),O5t.forEach(t),dBr=r(DBe," \u2014 "),uY=n(DBe,"A",{href:!0});var V5t=s(uY);cBr=r(V5t,"FlaxRobertaForMultipleChoice"),V5t.forEach(t),fBr=r(DBe," (RoBERTa model)"),DBe.forEach(t),mBr=i(To),Y5=n(To,"LI",{});var GBe=s(Y5);h9e=n(GBe,"STRONG",{});var X5t=s(h9e);gBr=r(X5t,"roformer"),X5t.forEach(t),hBr=r(GBe," \u2014 "),_Y=n(GBe,"A",{href:!0});var z5t=s(_Y);pBr=r(z5t,"FlaxRoFormerForMultipleChoice"),z5t.forEach(t),uBr=r(GBe," (RoFormer model)"),GBe.forEach(t),_Br=i(To),K5=n(To,"LI",{});var OBe=s(K5);p9e=n(OBe,"STRONG",{});var Q5t=s(p9e);bBr=r(Q5t,"xlm-roberta"),Q5t.forEach(t),vBr=r(OBe," \u2014 "),bY=n(OBe,"A",{href:!0});var W5t=s(bY);FBr=r(W5t,"FlaxXLMRobertaForMultipleChoice"),W5t.forEach(t),TBr=r(OBe," (XLM-RoBERTa model)"),OBe.forEach(t),To.forEach(t),MBr=i(Ul),T(Z5.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),OIe=i(f),zc=n(f,"H2",{class:!0});var QNe=s(zc);eC=n(QNe,"A",{id:!0,class:!0,href:!0});var H5t=s(eC);u9e=n(H5t,"SPAN",{});var U5t=s(u9e);T(p8.$$.fragment,U5t),U5t.forEach(t),H5t.forEach(t),EBr=i(QNe),_9e=n(QNe,"SPAN",{});var J5t=s(_9e);CBr=r(J5t,"FlaxAutoModelForNextSentencePrediction"),J5t.forEach(t),QNe.forEach(t),VIe=i(f),vr=n(f,"DIV",{class:!0});var Jl=s(vr);T(u8.$$.fragment,Jl),wBr=i(Jl),Qc=n(Jl,"P",{});var _Z=s(Qc);ABr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vY=n(_Z,"A",{href:!0});var Y5t=s(vY);yBr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),LBr=r(_Z," class method or the "),FY=n(_Z,"A",{href:!0});var K5t=s(FY);xBr=r(K5t,"from_config()"),K5t.forEach(t),$Br=r(_Z,` class
method.`),_Z.forEach(t),kBr=i(Jl),_8=n(Jl,"P",{});var WNe=s(_8);SBr=r(WNe,"This class cannot be instantiated directly using "),b9e=n(WNe,"CODE",{});var Z5t=s(b9e);RBr=r(Z5t,"__init__()"),Z5t.forEach(t),BBr=r(WNe," (throws an error)."),WNe.forEach(t),PBr=i(Jl),zt=n(Jl,"DIV",{class:!0});var Mw=s(zt);T(b8.$$.fragment,Mw),IBr=i(Mw),v9e=n(Mw,"P",{});var eCt=s(v9e);qBr=r(eCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),eCt.forEach(t),NBr=i(Mw),Wc=n(Mw,"P",{});var bZ=s(Wc);jBr=r(bZ,`Note:
Loading a model from its configuration file does `),F9e=n(bZ,"STRONG",{});var oCt=s(F9e);DBr=r(oCt,"not"),oCt.forEach(t),GBr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TY=n(bZ,"A",{href:!0});var rCt=s(TY);OBr=r(rCt,"from_pretrained()"),rCt.forEach(t),VBr=r(bZ," to load the model weights."),bZ.forEach(t),XBr=i(Mw),T(oC.$$.fragment,Mw),Mw.forEach(t),zBr=i(Jl),Qr=n(Jl,"DIV",{class:!0});var Yl=s(Qr);T(v8.$$.fragment,Yl),QBr=i(Yl),T9e=n(Yl,"P",{});var tCt=s(T9e);WBr=r(tCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tCt.forEach(t),HBr=i(Yl),bn=n(Yl,"P",{});var Ew=s(bn);UBr=r(Ew,"The model class to instantiate is selected based on the "),M9e=n(Ew,"CODE",{});var aCt=s(M9e);JBr=r(aCt,"model_type"),aCt.forEach(t),YBr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),E9e=n(Ew,"CODE",{});var nCt=s(E9e);KBr=r(nCt,"pretrained_model_name_or_path"),nCt.forEach(t),ZBr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C9e=n(Ew,"CODE",{});var sCt=s(C9e);ePr=r(sCt,"pretrained_model_name_or_path"),sCt.forEach(t),oPr=r(Ew,":"),Ew.forEach(t),rPr=i(Yl),w9e=n(Yl,"UL",{});var lCt=s(w9e);rC=n(lCt,"LI",{});var VBe=s(rC);A9e=n(VBe,"STRONG",{});var iCt=s(A9e);tPr=r(iCt,"bert"),iCt.forEach(t),aPr=r(VBe," \u2014 "),MY=n(VBe,"A",{href:!0});var dCt=s(MY);nPr=r(dCt,"FlaxBertForNextSentencePrediction"),dCt.forEach(t),sPr=r(VBe," (BERT model)"),VBe.forEach(t),lCt.forEach(t),lPr=i(Yl),T(tC.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),XIe=i(f),Hc=n(f,"H2",{class:!0});var HNe=s(Hc);aC=n(HNe,"A",{id:!0,class:!0,href:!0});var cCt=s(aC);y9e=n(cCt,"SPAN",{});var fCt=s(y9e);T(F8.$$.fragment,fCt),fCt.forEach(t),cCt.forEach(t),iPr=i(HNe),L9e=n(HNe,"SPAN",{});var mCt=s(L9e);dPr=r(mCt,"FlaxAutoModelForImageClassification"),mCt.forEach(t),HNe.forEach(t),zIe=i(f),Fr=n(f,"DIV",{class:!0});var Kl=s(Fr);T(T8.$$.fragment,Kl),cPr=i(Kl),Uc=n(Kl,"P",{});var vZ=s(Uc);fPr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),EY=n(vZ,"A",{href:!0});var gCt=s(EY);mPr=r(gCt,"from_pretrained()"),gCt.forEach(t),gPr=r(vZ," class method or the "),CY=n(vZ,"A",{href:!0});var hCt=s(CY);hPr=r(hCt,"from_config()"),hCt.forEach(t),pPr=r(vZ,` class
method.`),vZ.forEach(t),uPr=i(Kl),M8=n(Kl,"P",{});var UNe=s(M8);_Pr=r(UNe,"This class cannot be instantiated directly using "),x9e=n(UNe,"CODE",{});var pCt=s(x9e);bPr=r(pCt,"__init__()"),pCt.forEach(t),vPr=r(UNe," (throws an error)."),UNe.forEach(t),FPr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var Cw=s(Qt);T(E8.$$.fragment,Cw),TPr=i(Cw),$9e=n(Cw,"P",{});var uCt=s($9e);MPr=r(uCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uCt.forEach(t),EPr=i(Cw),Jc=n(Cw,"P",{});var FZ=s(Jc);CPr=r(FZ,`Note:
Loading a model from its configuration file does `),k9e=n(FZ,"STRONG",{});var _Ct=s(k9e);wPr=r(_Ct,"not"),_Ct.forEach(t),APr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(FZ,"A",{href:!0});var bCt=s(wY);yPr=r(bCt,"from_pretrained()"),bCt.forEach(t),LPr=r(FZ," to load the model weights."),FZ.forEach(t),xPr=i(Cw),T(nC.$$.fragment,Cw),Cw.forEach(t),$Pr=i(Kl),Wr=n(Kl,"DIV",{class:!0});var Zl=s(Wr);T(C8.$$.fragment,Zl),kPr=i(Zl),S9e=n(Zl,"P",{});var vCt=s(S9e);SPr=r(vCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vCt.forEach(t),RPr=i(Zl),vn=n(Zl,"P",{});var ww=s(vn);BPr=r(ww,"The model class to instantiate is selected based on the "),R9e=n(ww,"CODE",{});var FCt=s(R9e);PPr=r(FCt,"model_type"),FCt.forEach(t),IPr=r(ww,` property of the config object (either
passed as an argument or loaded from `),B9e=n(ww,"CODE",{});var TCt=s(B9e);qPr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),NPr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P9e=n(ww,"CODE",{});var MCt=s(P9e);jPr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),DPr=r(ww,":"),ww.forEach(t),GPr=i(Zl),w8=n(Zl,"UL",{});var JNe=s(w8);sC=n(JNe,"LI",{});var XBe=s(sC);I9e=n(XBe,"STRONG",{});var ECt=s(I9e);OPr=r(ECt,"beit"),ECt.forEach(t),VPr=r(XBe," \u2014 "),AY=n(XBe,"A",{href:!0});var CCt=s(AY);XPr=r(CCt,"FlaxBeitForImageClassification"),CCt.forEach(t),zPr=r(XBe," (BEiT model)"),XBe.forEach(t),QPr=i(JNe),lC=n(JNe,"LI",{});var zBe=s(lC);q9e=n(zBe,"STRONG",{});var wCt=s(q9e);WPr=r(wCt,"vit"),wCt.forEach(t),HPr=r(zBe," \u2014 "),yY=n(zBe,"A",{href:!0});var ACt=s(yY);UPr=r(ACt,"FlaxViTForImageClassification"),ACt.forEach(t),JPr=r(zBe," (ViT model)"),zBe.forEach(t),JNe.forEach(t),YPr=i(Zl),T(iC.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),QIe=i(f),Yc=n(f,"H2",{class:!0});var YNe=s(Yc);dC=n(YNe,"A",{id:!0,class:!0,href:!0});var yCt=s(dC);N9e=n(yCt,"SPAN",{});var LCt=s(N9e);T(A8.$$.fragment,LCt),LCt.forEach(t),yCt.forEach(t),KPr=i(YNe),j9e=n(YNe,"SPAN",{});var xCt=s(j9e);ZPr=r(xCt,"FlaxAutoModelForVision2Seq"),xCt.forEach(t),YNe.forEach(t),WIe=i(f),Tr=n(f,"DIV",{class:!0});var ei=s(Tr);T(y8.$$.fragment,ei),eIr=i(ei),Kc=n(ei,"P",{});var TZ=s(Kc);oIr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),LY=n(TZ,"A",{href:!0});var $Ct=s(LY);rIr=r($Ct,"from_pretrained()"),$Ct.forEach(t),tIr=r(TZ," class method or the "),xY=n(TZ,"A",{href:!0});var kCt=s(xY);aIr=r(kCt,"from_config()"),kCt.forEach(t),nIr=r(TZ,` class
method.`),TZ.forEach(t),sIr=i(ei),L8=n(ei,"P",{});var KNe=s(L8);lIr=r(KNe,"This class cannot be instantiated directly using "),D9e=n(KNe,"CODE",{});var SCt=s(D9e);iIr=r(SCt,"__init__()"),SCt.forEach(t),dIr=r(KNe," (throws an error)."),KNe.forEach(t),cIr=i(ei),Wt=n(ei,"DIV",{class:!0});var Aw=s(Wt);T(x8.$$.fragment,Aw),fIr=i(Aw),G9e=n(Aw,"P",{});var RCt=s(G9e);mIr=r(RCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),RCt.forEach(t),gIr=i(Aw),Zc=n(Aw,"P",{});var MZ=s(Zc);hIr=r(MZ,`Note:
Loading a model from its configuration file does `),O9e=n(MZ,"STRONG",{});var BCt=s(O9e);pIr=r(BCt,"not"),BCt.forEach(t),uIr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Y=n(MZ,"A",{href:!0});var PCt=s($Y);_Ir=r(PCt,"from_pretrained()"),PCt.forEach(t),bIr=r(MZ," to load the model weights."),MZ.forEach(t),vIr=i(Aw),T(cC.$$.fragment,Aw),Aw.forEach(t),FIr=i(ei),Hr=n(ei,"DIV",{class:!0});var oi=s(Hr);T($8.$$.fragment,oi),TIr=i(oi),V9e=n(oi,"P",{});var ICt=s(V9e);MIr=r(ICt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ICt.forEach(t),EIr=i(oi),Fn=n(oi,"P",{});var yw=s(Fn);CIr=r(yw,"The model class to instantiate is selected based on the "),X9e=n(yw,"CODE",{});var qCt=s(X9e);wIr=r(qCt,"model_type"),qCt.forEach(t),AIr=r(yw,` property of the config object (either
passed as an argument or loaded from `),z9e=n(yw,"CODE",{});var NCt=s(z9e);yIr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),LIr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q9e=n(yw,"CODE",{});var jCt=s(Q9e);xIr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),$Ir=r(yw,":"),yw.forEach(t),kIr=i(oi),W9e=n(oi,"UL",{});var DCt=s(W9e);fC=n(DCt,"LI",{});var QBe=s(fC);H9e=n(QBe,"STRONG",{});var GCt=s(H9e);SIr=r(GCt,"vision-encoder-decoder"),GCt.forEach(t),RIr=r(QBe," \u2014 "),kY=n(QBe,"A",{href:!0});var OCt=s(kY);BIr=r(OCt,"FlaxVisionEncoderDecoderModel"),OCt.forEach(t),PIr=r(QBe," (Vision Encoder decoder model)"),QBe.forEach(t),DCt.forEach(t),IIr=i(oi),T(mC.$$.fragment,oi),oi.forEach(t),ei.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Xwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Mn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),c(Cn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),c(wn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),c(ii,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(lf,"id","extending-the-auto-classes"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#extending-the-auto-classes"),c(di,"class","relative group"),c(cf,"id","transformers.AutoConfig"),c(cf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cf,"href","#transformers.AutoConfig"),c(ci,"class","relative group"),c(Jx,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Yx,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),c(Kx,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(Zx,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),c(e$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),c(o$,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(r$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),c(t$,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(a$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(n$,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(s$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),c(l$,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),c(i$,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),c(d$,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),c(c$,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),c(f$,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),c(m$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(g$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(h$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(p$,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),c(u$,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(_$,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(b$,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),c(v$,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),c(F$,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),c(T$,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),c(M$,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),c(E$,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),c(C$,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(w$,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),c(A$,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),c(y$,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),c(L$,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),c(x$,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),c($$,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),c(k$,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(S$,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),c(R$,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),c(B$,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),c(P$,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(I$,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(q$,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(N$,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),c(j$,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),c(D$,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),c(G$,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),c(O$,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),c(V$,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),c(X$,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),c(z$,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Q$,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),c(W$,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(H$,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(U$,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),c(J$,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),c(Y$,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(K$,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Z$,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),c(ek,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),c(ok,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),c(rk,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tk,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(ak,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nk,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),c(sk,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),c(lk,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),c(ik,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),c(dk,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),c(ck,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),c(fk,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),c(mk,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),c(gk,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),c(hk,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),c(pk,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),c(uk,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),c(_k,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bk,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vk,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Fk,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),c(Tk,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Mk,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),c(Ek,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),c(Ck,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),c(wk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),c(Ak,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yk,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),c(Lk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($k,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),c(kk,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),c(Sk,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Rk,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Bk,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Pk,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),c(Ik,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qk,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Nk,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),c(jk,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),c(Dk,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),c(Gk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Ok,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Vk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Xk,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),c(zk,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosConfig"),c(Qk,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dg,"id","transformers.AutoTokenizer"),c(dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dg,"href","#transformers.AutoTokenizer"),c(mi,"class","relative group"),c(Wk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Hk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(Uk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Jk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),c(Yk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),c(Kk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),c(Zk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(eS,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(oS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(rS,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(tS,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(aS,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(nS,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(sS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(lS,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(iS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dS,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(fS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(mS,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(gS,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(hS,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),c(pS,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(uS,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),c(_S,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),c(bS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(vS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(FS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(TS,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),c(MS,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(ES,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(CS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(AS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),c(yS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(LS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(xS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c($S,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(kS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(SS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(RS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(BS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),c(PS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(IS,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(qS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),c(NS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(jS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(DS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),c(GS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(OS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(XS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(QS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),c(US,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(JS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(YS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(KS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(eR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(oR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(rR,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(tR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(aR,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(nR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),c(sR,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),c(lR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),c(iR,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(dR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(cR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(fR,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),c(mR,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(gR,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(hR,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(pR,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),c(uR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),c(_R,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(bR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(vR,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(FR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(TR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(MR,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),c(ER,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(CR,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(AR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(yR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(LR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(xR,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c($R,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(SR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(RR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(BR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(PR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(IR,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),c(qR,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),c(NR,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(jR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(DR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(GR,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),c(OR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),c(VR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),c(XR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),c(zR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(QR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),c(WR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(HR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(UR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(JR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(ZR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(eB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(oB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(rB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),c(tB,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(aB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(nB,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),c(lB,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),c(iB,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),c(dB,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),c(cB,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(fB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),c(mB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),c(gB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(hB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(pB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),c(uB,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(_B,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),c(bB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(vB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(FB,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(TB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),c(MB,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(EB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(CB,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(wB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),c(AB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoFeatureExtractor"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoFeatureExtractor"),c(gi,"class","relative group"),c(yB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(LB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c($B,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(SB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(RB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(BB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(PB,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(IB,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(qB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(NB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(jB,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(DB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(XB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(JB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ph,"id","transformers.AutoProcessor"),c(ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ph,"href","#transformers.AutoProcessor"),c(hi,"class","relative group"),c(KB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(ZB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),c(eP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(oP,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(rP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(tP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(aP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(nP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(sP,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),c(lP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(iP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dP,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltProcessor"),c(cP,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(fP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(mP,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"id","transformers.AutoModel"),c(Rh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rh,"href","#transformers.AutoModel"),c(ui,"class","relative group"),c(gP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pP,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uP,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),c(_P,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),c(bP,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),c(vP,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),c(FP,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(TP,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),c(MP,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(EP,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(CP,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(wP,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),c(AP,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),c(yP,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),c(LP,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),c(xP,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),c($P,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),c(kP,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(SP,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(RP,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(BP,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),c(PP,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(IP,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(qP,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),c(NP,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),c(jP,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),c(DP,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(GP,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),c(OP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),c(VP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),c(XP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),c(zP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),c(QP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),c(WP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),c(HP,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),c(UP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),c(JP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(YP,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),c(KP,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),c(ZP,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),c(eI,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(oI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(rI,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(tI,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),c(aI,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),c(nI,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),c(sI,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),c(lI,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),c(iI,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),c(dI,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),c(cI,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),c(fI,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),c(mI,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(gI,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),c(hI,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),c(pI,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),c(uI,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),c(_I,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(bI,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),c(vI,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),c(FI,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),c(TI,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),c(MI,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(EI,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),c(CI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),c(wI,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),c(AI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),c(yI,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),c(LI,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(xI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),c($I,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),c(kI,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),c(SI,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),c(RI,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),c(BI,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(PI,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),c(II,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(qI,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),c(NI,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),c(jI,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),c(DI,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(GI,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),c(OI,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(VI,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),c(XI,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),c(zI,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(QI,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),c(WI,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),c(HI,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(UI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(JI,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),c(YI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),c(KI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),c(ZI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(eq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(oq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(rq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),c(tq,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosModel"),c(aq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cu,"id","transformers.AutoModelForPreTraining"),c(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Cu,"href","#transformers.AutoModelForPreTraining"),c(vi,"class","relative group"),c(nq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),c(dq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),c(fq,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(mq,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(gq,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(hq,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(_q,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(bq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),c(vq,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Fq,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Tq,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Mq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Eq,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Cq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(wq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Aq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(yq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Lq,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(xq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c($q,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(kq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Sq,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Rq,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),c(Bq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Pq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(qq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Nq,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(jq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Dq,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Gq,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Oq,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Vq,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Xq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Wq,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h_,"id","transformers.AutoModelForCausalLM"),c(h_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h_,"href","#transformers.AutoModelForCausalLM"),c(Mi,"class","relative group"),c(Hq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),c(Kq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),c(Zq,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(eN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(oN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(rN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(tN,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(aN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(nN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(sN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(lN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),c(iN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(dN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(cN,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fN,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),c(mN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pN,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(uN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(_N,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(bN,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(vN,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(FN,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(TN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(MN,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(EN,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(CN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wN,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(AN,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(yN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(LN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(xN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c($N,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(kN,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z_,"id","transformers.AutoModelForMaskedLM"),c(Z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z_,"href","#transformers.AutoModelForMaskedLM"),c(wi,"class","relative group"),c(SN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(IN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),c(NN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(jN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(DN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(GN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ON,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(VN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(XN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(QN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(WN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(HN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(UN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(JN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(YN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(KN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(ej,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(tj,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(aj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(nj,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(sj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ij,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(dj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(fj,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(mj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(gj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(hj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForSeq2SeqLM"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Li,"class","relative group"),c(pj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_j,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(vj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Fj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Mj,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Ej,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Cj,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(wj,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(Aj,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(yj,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),c(Lj,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c($j,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Rj,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForSequenceClassification"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForSequenceClassification"),c(ki,"class","relative group"),c(Ij,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c($D,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tb,"id","transformers.AutoModelForMultipleChoice"),c(tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tb,"href","#transformers.AutoModelForMultipleChoice"),c(Bi,"class","relative group"),c(SD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(ID,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),c(qD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(ND,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(jD,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(DD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(GD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(OD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(VD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(XD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(rG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(tG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pb,"id","transformers.AutoModelForNextSentencePrediction"),c(Pb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pb,"href","#transformers.AutoModelForNextSentencePrediction"),c(qi,"class","relative group"),c(dG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(gG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(hG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(pG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(uG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xb,"id","transformers.AutoModelForTokenClassification"),c(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xb,"href","#transformers.AutoModelForTokenClassification"),c(Di,"class","relative group"),c(_G,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FG,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(TG,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),c(MG,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(EG,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(CG,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),c(wG,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(AG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(yG,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(LG,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(xG,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c($G,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(kG,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(SG,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(RG,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(BG,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(PG,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(qG,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(NG,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(jG,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(GG,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(OG,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(VG,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(XG,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(zG,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(QG,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(WG,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(HG,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(UG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(JG,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(YG,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(KG,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForQuestionAnswering"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForQuestionAnswering"),c(Vi,"class","relative group"),c(ZG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(lO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(cO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(fO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(mO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(uO,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(AO,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(qO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(DO,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForTableQuestionAnswering"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Qi,"class","relative group"),c(GO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForImageClassification"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForImageClassification"),c(Ui,"class","relative group"),c(zO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),c(UO,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(JO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(YO,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),c(KO,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(ZO,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(eV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(oV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(rV,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(tV,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(aV,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(nV,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(sV,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(lV,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),c(iV,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),c(dV,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForVision2Seq"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForVision2Seq"),c(Ki,"class","relative group"),c(cV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gV,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForAudioClassification"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForAudioClassification"),c(od,"class","relative group"),c(hV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_V,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bV,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vV,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FV,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CV,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForAudioFrameClassification"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForAudioFrameClassification"),c(ad,"class","relative group"),c(wV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(xV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c($V,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(kV,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.AutoModelForCTC"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.AutoModelForCTC"),c(ld,"class","relative group"),c(SV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(IV,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),c(qV,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),c(NV,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),c(jV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(DV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(GV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(OV,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v6,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v6,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(cd,"class","relative group"),c(VV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(WV,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w6,"id","transformers.AutoModelForAudioXVector"),c(w6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w6,"href","#transformers.AutoModelForAudioXVector"),c(gd,"class","relative group"),c(HV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YV,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(KV,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(ZV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(eX,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R6,"id","transformers.AutoModelForMaskedImageModeling"),c(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R6,"href","#transformers.AutoModelForMaskedImageModeling"),c(ud,"class","relative group"),c(oX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aX,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(nX,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(sX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D6,"id","transformers.AutoModelForObjectDetection"),c(D6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D6,"href","#transformers.AutoModelForObjectDetection"),c(Fd,"class","relative group"),c(lX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cX,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),c(fX,"href","/docs/transformers/pr_16792/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.AutoModelForImageSegmentation"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.AutoModelForImageSegmentation"),c(Ed,"class","relative group"),c(mX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pX,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y6,"id","transformers.AutoModelForSemanticSegmentation"),c(Y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y6,"href","#transformers.AutoModelForSemanticSegmentation"),c(Ad,"class","relative group"),c(uX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_X,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(FX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(TX,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(MX,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.AutoModelForInstanceSegmentation"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.AutoModelForInstanceSegmentation"),c(xd,"class","relative group"),c(EX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AX,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.TFAutoModel"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.TFAutoModel"),c(Sd,"class","relative group"),c(yX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($X,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),c(kX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),c(SX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),c(RX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(BX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(PX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),c(IX,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),c(qX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),c(NX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),c(jX,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),c(DX,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(GX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),c(OX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(VX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(XX,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(zX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),c(QX,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(WX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),c(HX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(UX,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),c(JX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),c(YX,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),c(KX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(ZX,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),c(ez,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),c(oz,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),c(rz,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),c(tz,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),c(az,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(nz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),c(sz,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),c(lz,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(iz,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),c(dz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),c(cz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),c(fz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),c(mz,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(gz,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),c(hz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),c(pz,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uz,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),c(_z,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(bz,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(vz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),c(Fz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(Tz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t7,"id","transformers.TFAutoModelForPreTraining"),c(t7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t7,"href","#transformers.TFAutoModelForPreTraining"),c(Pd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Az,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(yz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Lz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(xz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c($z,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(kz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Sz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Rz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Bz,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Pz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Iz,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(qz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Nz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jz,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Dz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Gz,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Oz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(Xz,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(zz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(Qz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.TFAutoModelForCausalLM"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.TFAutoModelForCausalLM"),c(Nd,"class","relative group"),c(Hz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Jz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Kz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Zz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(oQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(rQ,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(tQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sQ,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.TFAutoModelForImageClassification"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.TFAutoModelForImageClassification"),c(Gd,"class","relative group"),c(dQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mQ,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gQ,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hQ,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J7,"id","transformers.TFAutoModelForMaskedLM"),c(J7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J7,"href","#transformers.TFAutoModelForMaskedLM"),c(zd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(vQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(FQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(TQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(MQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(EQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(CQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(wQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(AQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(LQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c($Q,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v9,"id","transformers.TFAutoModelForSeq2SeqLM"),c(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v9,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Hd,"class","relative group"),c(NQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GQ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(VQ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(XQ,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(zQ,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(QQ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),c(WQ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(HQ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(UQ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(JQ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S9,"id","transformers.TFAutoModelForSequenceClassification"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.TFAutoModelForSequenceClassification"),c(Yd,"class","relative group"),c(YQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(oW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(rW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(tW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(aW,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(nW,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(sW,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(lW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(iW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(dW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(cW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lM,"id","transformers.TFAutoModelForMultipleChoice"),c(lM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lM,"href","#transformers.TFAutoModelForMultipleChoice"),c(ec,"class","relative group"),c(AW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c($W,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(kW,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(SW,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(RW,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(PW,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(IW,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qW,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(NW,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(jW,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(DW,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(OW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(VW,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(XW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(zW,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(tc,"class","relative group"),c(QW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UW,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kM,"id","transformers.TFAutoModelForTokenClassification"),c(kM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kM,"href","#transformers.TFAutoModelForTokenClassification"),c(sc,"class","relative group"),c(JW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(eH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(oH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(rH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(tH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(aH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(nH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(sH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(lH,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(iH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(dH,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(cH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(fH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(gH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(hH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(pH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(_H,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(bH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModelForQuestionAnswering"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModelForQuestionAnswering"),c(dc,"class","relative group"),c(vH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(EH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(CH,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(wH,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(AH,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(yH,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(LH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(xH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c($H,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(kH,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(SH,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(RH,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(BH,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PH,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(IH,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(qH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(DH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E4,"id","transformers.TFAutoModelForVision2Seq"),c(E4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E4,"href","#transformers.TFAutoModelForVision2Seq"),c(mc,"class","relative group"),c(OH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(pc,"class","relative group"),c(QH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k4,"id","transformers.FlaxAutoModel"),c(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k4,"href","#transformers.FlaxAutoModel"),c(bc,"class","relative group"),c(JH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),c(eU,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),c(oU,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),c(rU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),c(tU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(aU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(nU,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(sU,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),c(lU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(iU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),c(dU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(cU,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(fU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mU,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(gU,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),c(hU,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),c(pU,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),c(uU,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(_U,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(bU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(vU,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),c(FU,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(TU,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),c(MU,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(EU,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(CU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sE,"id","transformers.FlaxAutoModelForCausalLM"),c(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sE,"href","#transformers.FlaxAutoModelForCausalLM"),c(Tc,"class","relative group"),c(wU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LU,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(xU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c($U,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(kU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(SU,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(RU,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(BU,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(PU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(IU,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.FlaxAutoModelForPreTraining"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Cc,"class","relative group"),c(qU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(GU,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(VU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(XU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(zU,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(WU,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(UU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(JU,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(YU,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(KU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BE,"id","transformers.FlaxAutoModelForMaskedLM"),c(BE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(yc,"class","relative group"),c(ZU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(tJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(nJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(sJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(lJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(iJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(dJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(WE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c($c,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(uJ,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(bJ,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(vJ,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(FJ,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(TJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(CJ,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.FlaxAutoModelForSequenceClassification"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Rc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c($J,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(qJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Ic,"class","relative group"),c(NJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GJ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(QJ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(UJ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(JJ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S5,"id","transformers.FlaxAutoModelForTokenClassification"),c(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(jc,"class","relative group"),c(YJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZJ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(oY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(rY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(tY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(aY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(nY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(sY,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(lY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(V5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Oc,"class","relative group"),c(iY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(mY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(gY,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(hY,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(pY,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(uY,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(_Y,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(bY,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(zc,"class","relative group"),c(vY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MY,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.FlaxAutoModelForImageClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.FlaxAutoModelForImageClassification"),c(Hc,"class","relative group"),c(EY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(yY,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dC,"id","transformers.FlaxAutoModelForVision2Seq"),c(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dC,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Yc,"class","relative group"),c(LY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xY,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Y,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kY,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,ri),b(f,tf,_),b(f,Kr,_),e(Kr,ti),e(Kr,ai),e(ai,Lw),e(Kr,af),b(f,Ne,_),b(f,Xe,_),e(Xe,ni),e(Xe,Mn),e(Mn,xw),e(Xe,En),e(Xe,Cn),e(Cn,$w),e(Xe,si),e(Xe,wn),e(wn,kw),e(Xe,li),b(f,nf,_),M(va,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,Xx),e(Ae,ii),e(ii,zx),e(Ae,Qx),b(f,Eo,_),b(f,Fa,_),e(Fa,Wx),e(Fa,sf),e(sf,Hx),e(Fa,ZNe),b(f,WBe,_),b(f,di,_),e(di,lf),e(lf,EZ),M(Sw,EZ,null),e(di,eje),e(di,CZ),e(CZ,oje),b(f,HBe,_),b(f,An,_),e(An,rje),e(An,wZ),e(wZ,tje),e(An,aje),e(An,AZ),e(AZ,nje),e(An,sje),b(f,UBe,_),M(Rw,f,_),b(f,JBe,_),b(f,Ux,_),e(Ux,lje),b(f,YBe,_),M(df,f,_),b(f,KBe,_),b(f,ci,_),e(ci,cf),e(cf,yZ),M(Bw,yZ,null),e(ci,ije),e(ci,LZ),e(LZ,dje),b(f,ZBe,_),b(f,Co,_),M(Pw,Co,null),e(Co,cje),e(Co,Iw),e(Iw,fje),e(Iw,Jx),e(Jx,mje),e(Iw,gje),e(Co,hje),e(Co,qw),e(qw,pje),e(qw,xZ),e(xZ,uje),e(qw,_je),e(Co,bje),e(Co,Mr),M(Nw,Mr,null),e(Mr,vje),e(Mr,$Z),e($Z,Fje),e(Mr,Tje),e(Mr,fi),e(fi,Mje),e(fi,kZ),e(kZ,Eje),e(fi,Cje),e(fi,SZ),e(SZ,wje),e(fi,Aje),e(Mr,yje),e(Mr,A),e(A,ff),e(ff,RZ),e(RZ,Lje),e(ff,xje),e(ff,Yx),e(Yx,$je),e(ff,kje),e(A,Sje),e(A,mf),e(mf,BZ),e(BZ,Rje),e(mf,Bje),e(mf,Kx),e(Kx,Pje),e(mf,Ije),e(A,qje),e(A,gf),e(gf,PZ),e(PZ,Nje),e(gf,jje),e(gf,Zx),e(Zx,Dje),e(gf,Gje),e(A,Oje),e(A,hf),e(hf,IZ),e(IZ,Vje),e(hf,Xje),e(hf,e$),e(e$,zje),e(hf,Qje),e(A,Wje),e(A,pf),e(pf,qZ),e(qZ,Hje),e(pf,Uje),e(pf,o$),e(o$,Jje),e(pf,Yje),e(A,Kje),e(A,uf),e(uf,NZ),e(NZ,Zje),e(uf,eDe),e(uf,r$),e(r$,oDe),e(uf,rDe),e(A,tDe),e(A,_f),e(_f,jZ),e(jZ,aDe),e(_f,nDe),e(_f,t$),e(t$,sDe),e(_f,lDe),e(A,iDe),e(A,bf),e(bf,DZ),e(DZ,dDe),e(bf,cDe),e(bf,a$),e(a$,fDe),e(bf,mDe),e(A,gDe),e(A,vf),e(vf,GZ),e(GZ,hDe),e(vf,pDe),e(vf,n$),e(n$,uDe),e(vf,_De),e(A,bDe),e(A,Ff),e(Ff,OZ),e(OZ,vDe),e(Ff,FDe),e(Ff,s$),e(s$,TDe),e(Ff,MDe),e(A,EDe),e(A,Tf),e(Tf,VZ),e(VZ,CDe),e(Tf,wDe),e(Tf,l$),e(l$,ADe),e(Tf,yDe),e(A,LDe),e(A,Mf),e(Mf,XZ),e(XZ,xDe),e(Mf,$De),e(Mf,i$),e(i$,kDe),e(Mf,SDe),e(A,RDe),e(A,Ef),e(Ef,zZ),e(zZ,BDe),e(Ef,PDe),e(Ef,d$),e(d$,IDe),e(Ef,qDe),e(A,NDe),e(A,Cf),e(Cf,QZ),e(QZ,jDe),e(Cf,DDe),e(Cf,c$),e(c$,GDe),e(Cf,ODe),e(A,VDe),e(A,wf),e(wf,WZ),e(WZ,XDe),e(wf,zDe),e(wf,f$),e(f$,QDe),e(wf,WDe),e(A,HDe),e(A,Af),e(Af,HZ),e(HZ,UDe),e(Af,JDe),e(Af,m$),e(m$,YDe),e(Af,KDe),e(A,ZDe),e(A,yf),e(yf,UZ),e(UZ,eGe),e(yf,oGe),e(yf,g$),e(g$,rGe),e(yf,tGe),e(A,aGe),e(A,Lf),e(Lf,JZ),e(JZ,nGe),e(Lf,sGe),e(Lf,h$),e(h$,lGe),e(Lf,iGe),e(A,dGe),e(A,xf),e(xf,YZ),e(YZ,cGe),e(xf,fGe),e(xf,p$),e(p$,mGe),e(xf,gGe),e(A,hGe),e(A,$f),e($f,KZ),e(KZ,pGe),e($f,uGe),e($f,u$),e(u$,_Ge),e($f,bGe),e(A,vGe),e(A,kf),e(kf,ZZ),e(ZZ,FGe),e(kf,TGe),e(kf,_$),e(_$,MGe),e(kf,EGe),e(A,CGe),e(A,Sf),e(Sf,eee),e(eee,wGe),e(Sf,AGe),e(Sf,b$),e(b$,yGe),e(Sf,LGe),e(A,xGe),e(A,Rf),e(Rf,oee),e(oee,$Ge),e(Rf,kGe),e(Rf,v$),e(v$,SGe),e(Rf,RGe),e(A,BGe),e(A,Bf),e(Bf,ree),e(ree,PGe),e(Bf,IGe),e(Bf,F$),e(F$,qGe),e(Bf,NGe),e(A,jGe),e(A,Pf),e(Pf,tee),e(tee,DGe),e(Pf,GGe),e(Pf,T$),e(T$,OGe),e(Pf,VGe),e(A,XGe),e(A,If),e(If,aee),e(aee,zGe),e(If,QGe),e(If,M$),e(M$,WGe),e(If,HGe),e(A,UGe),e(A,qf),e(qf,nee),e(nee,JGe),e(qf,YGe),e(qf,E$),e(E$,KGe),e(qf,ZGe),e(A,eOe),e(A,Nf),e(Nf,see),e(see,oOe),e(Nf,rOe),e(Nf,C$),e(C$,tOe),e(Nf,aOe),e(A,nOe),e(A,jf),e(jf,lee),e(lee,sOe),e(jf,lOe),e(jf,w$),e(w$,iOe),e(jf,dOe),e(A,cOe),e(A,Df),e(Df,iee),e(iee,fOe),e(Df,mOe),e(Df,A$),e(A$,gOe),e(Df,hOe),e(A,pOe),e(A,Gf),e(Gf,dee),e(dee,uOe),e(Gf,_Oe),e(Gf,y$),e(y$,bOe),e(Gf,vOe),e(A,FOe),e(A,Of),e(Of,cee),e(cee,TOe),e(Of,MOe),e(Of,L$),e(L$,EOe),e(Of,COe),e(A,wOe),e(A,Vf),e(Vf,fee),e(fee,AOe),e(Vf,yOe),e(Vf,x$),e(x$,LOe),e(Vf,xOe),e(A,$Oe),e(A,Xf),e(Xf,mee),e(mee,kOe),e(Xf,SOe),e(Xf,$$),e($$,ROe),e(Xf,BOe),e(A,POe),e(A,zf),e(zf,gee),e(gee,IOe),e(zf,qOe),e(zf,k$),e(k$,NOe),e(zf,jOe),e(A,DOe),e(A,Qf),e(Qf,hee),e(hee,GOe),e(Qf,OOe),e(Qf,S$),e(S$,VOe),e(Qf,XOe),e(A,zOe),e(A,Wf),e(Wf,pee),e(pee,QOe),e(Wf,WOe),e(Wf,R$),e(R$,HOe),e(Wf,UOe),e(A,JOe),e(A,Hf),e(Hf,uee),e(uee,YOe),e(Hf,KOe),e(Hf,B$),e(B$,ZOe),e(Hf,eVe),e(A,oVe),e(A,Uf),e(Uf,_ee),e(_ee,rVe),e(Uf,tVe),e(Uf,P$),e(P$,aVe),e(Uf,nVe),e(A,sVe),e(A,Jf),e(Jf,bee),e(bee,lVe),e(Jf,iVe),e(Jf,I$),e(I$,dVe),e(Jf,cVe),e(A,fVe),e(A,Yf),e(Yf,vee),e(vee,mVe),e(Yf,gVe),e(Yf,q$),e(q$,hVe),e(Yf,pVe),e(A,uVe),e(A,Kf),e(Kf,Fee),e(Fee,_Ve),e(Kf,bVe),e(Kf,N$),e(N$,vVe),e(Kf,FVe),e(A,TVe),e(A,Zf),e(Zf,Tee),e(Tee,MVe),e(Zf,EVe),e(Zf,j$),e(j$,CVe),e(Zf,wVe),e(A,AVe),e(A,em),e(em,Mee),e(Mee,yVe),e(em,LVe),e(em,D$),e(D$,xVe),e(em,$Ve),e(A,kVe),e(A,om),e(om,Eee),e(Eee,SVe),e(om,RVe),e(om,G$),e(G$,BVe),e(om,PVe),e(A,IVe),e(A,rm),e(rm,Cee),e(Cee,qVe),e(rm,NVe),e(rm,O$),e(O$,jVe),e(rm,DVe),e(A,GVe),e(A,tm),e(tm,wee),e(wee,OVe),e(tm,VVe),e(tm,V$),e(V$,XVe),e(tm,zVe),e(A,QVe),e(A,am),e(am,Aee),e(Aee,WVe),e(am,HVe),e(am,X$),e(X$,UVe),e(am,JVe),e(A,YVe),e(A,nm),e(nm,yee),e(yee,KVe),e(nm,ZVe),e(nm,z$),e(z$,eXe),e(nm,oXe),e(A,rXe),e(A,sm),e(sm,Lee),e(Lee,tXe),e(sm,aXe),e(sm,Q$),e(Q$,nXe),e(sm,sXe),e(A,lXe),e(A,lm),e(lm,xee),e(xee,iXe),e(lm,dXe),e(lm,W$),e(W$,cXe),e(lm,fXe),e(A,mXe),e(A,im),e(im,$ee),e($ee,gXe),e(im,hXe),e(im,H$),e(H$,pXe),e(im,uXe),e(A,_Xe),e(A,dm),e(dm,kee),e(kee,bXe),e(dm,vXe),e(dm,U$),e(U$,FXe),e(dm,TXe),e(A,MXe),e(A,cm),e(cm,See),e(See,EXe),e(cm,CXe),e(cm,J$),e(J$,wXe),e(cm,AXe),e(A,yXe),e(A,fm),e(fm,Ree),e(Ree,LXe),e(fm,xXe),e(fm,Y$),e(Y$,$Xe),e(fm,kXe),e(A,SXe),e(A,mm),e(mm,Bee),e(Bee,RXe),e(mm,BXe),e(mm,K$),e(K$,PXe),e(mm,IXe),e(A,qXe),e(A,gm),e(gm,Pee),e(Pee,NXe),e(gm,jXe),e(gm,Z$),e(Z$,DXe),e(gm,GXe),e(A,OXe),e(A,hm),e(hm,Iee),e(Iee,VXe),e(hm,XXe),e(hm,ek),e(ek,zXe),e(hm,QXe),e(A,WXe),e(A,pm),e(pm,qee),e(qee,HXe),e(pm,UXe),e(pm,ok),e(ok,JXe),e(pm,YXe),e(A,KXe),e(A,um),e(um,Nee),e(Nee,ZXe),e(um,eze),e(um,rk),e(rk,oze),e(um,rze),e(A,tze),e(A,_m),e(_m,jee),e(jee,aze),e(_m,nze),e(_m,tk),e(tk,sze),e(_m,lze),e(A,ize),e(A,bm),e(bm,Dee),e(Dee,dze),e(bm,cze),e(bm,ak),e(ak,fze),e(bm,mze),e(A,gze),e(A,vm),e(vm,Gee),e(Gee,hze),e(vm,pze),e(vm,nk),e(nk,uze),e(vm,_ze),e(A,bze),e(A,Fm),e(Fm,Oee),e(Oee,vze),e(Fm,Fze),e(Fm,sk),e(sk,Tze),e(Fm,Mze),e(A,Eze),e(A,Tm),e(Tm,Vee),e(Vee,Cze),e(Tm,wze),e(Tm,lk),e(lk,Aze),e(Tm,yze),e(A,Lze),e(A,Mm),e(Mm,Xee),e(Xee,xze),e(Mm,$ze),e(Mm,ik),e(ik,kze),e(Mm,Sze),e(A,Rze),e(A,Em),e(Em,zee),e(zee,Bze),e(Em,Pze),e(Em,dk),e(dk,Ize),e(Em,qze),e(A,Nze),e(A,Cm),e(Cm,Qee),e(Qee,jze),e(Cm,Dze),e(Cm,ck),e(ck,Gze),e(Cm,Oze),e(A,Vze),e(A,wm),e(wm,Wee),e(Wee,Xze),e(wm,zze),e(wm,fk),e(fk,Qze),e(wm,Wze),e(A,Hze),e(A,Am),e(Am,Hee),e(Hee,Uze),e(Am,Jze),e(Am,mk),e(mk,Yze),e(Am,Kze),e(A,Zze),e(A,ym),e(ym,Uee),e(Uee,eQe),e(ym,oQe),e(ym,gk),e(gk,rQe),e(ym,tQe),e(A,aQe),e(A,Lm),e(Lm,Jee),e(Jee,nQe),e(Lm,sQe),e(Lm,hk),e(hk,lQe),e(Lm,iQe),e(A,dQe),e(A,xm),e(xm,Yee),e(Yee,cQe),e(xm,fQe),e(xm,pk),e(pk,mQe),e(xm,gQe),e(A,hQe),e(A,$m),e($m,Kee),e(Kee,pQe),e($m,uQe),e($m,uk),e(uk,_Qe),e($m,bQe),e(A,vQe),e(A,km),e(km,Zee),e(Zee,FQe),e(km,TQe),e(km,_k),e(_k,MQe),e(km,EQe),e(A,CQe),e(A,Sm),e(Sm,eoe),e(eoe,wQe),e(Sm,AQe),e(Sm,bk),e(bk,yQe),e(Sm,LQe),e(A,xQe),e(A,Rm),e(Rm,ooe),e(ooe,$Qe),e(Rm,kQe),e(Rm,vk),e(vk,SQe),e(Rm,RQe),e(A,BQe),e(A,Bm),e(Bm,roe),e(roe,PQe),e(Bm,IQe),e(Bm,Fk),e(Fk,qQe),e(Bm,NQe),e(A,jQe),e(A,Pm),e(Pm,toe),e(toe,DQe),e(Pm,GQe),e(Pm,Tk),e(Tk,OQe),e(Pm,VQe),e(A,XQe),e(A,Im),e(Im,aoe),e(aoe,zQe),e(Im,QQe),e(Im,Mk),e(Mk,WQe),e(Im,HQe),e(A,UQe),e(A,qm),e(qm,noe),e(noe,JQe),e(qm,YQe),e(qm,Ek),e(Ek,KQe),e(qm,ZQe),e(A,eWe),e(A,Nm),e(Nm,soe),e(soe,oWe),e(Nm,rWe),e(Nm,Ck),e(Ck,tWe),e(Nm,aWe),e(A,nWe),e(A,jm),e(jm,loe),e(loe,sWe),e(jm,lWe),e(jm,wk),e(wk,iWe),e(jm,dWe),e(A,cWe),e(A,Dm),e(Dm,ioe),e(ioe,fWe),e(Dm,mWe),e(Dm,Ak),e(Ak,gWe),e(Dm,hWe),e(A,pWe),e(A,Gm),e(Gm,doe),e(doe,uWe),e(Gm,_We),e(Gm,yk),e(yk,bWe),e(Gm,vWe),e(A,FWe),e(A,Om),e(Om,coe),e(coe,TWe),e(Om,MWe),e(Om,Lk),e(Lk,EWe),e(Om,CWe),e(A,wWe),e(A,Vm),e(Vm,foe),e(foe,AWe),e(Vm,yWe),e(Vm,xk),e(xk,LWe),e(Vm,xWe),e(A,$We),e(A,Xm),e(Xm,moe),e(moe,kWe),e(Xm,SWe),e(Xm,$k),e($k,RWe),e(Xm,BWe),e(A,PWe),e(A,zm),e(zm,goe),e(goe,IWe),e(zm,qWe),e(zm,kk),e(kk,NWe),e(zm,jWe),e(A,DWe),e(A,Qm),e(Qm,hoe),e(hoe,GWe),e(Qm,OWe),e(Qm,Sk),e(Sk,VWe),e(Qm,XWe),e(A,zWe),e(A,Wm),e(Wm,poe),e(poe,QWe),e(Wm,WWe),e(Wm,Rk),e(Rk,HWe),e(Wm,UWe),e(A,JWe),e(A,Hm),e(Hm,uoe),e(uoe,YWe),e(Hm,KWe),e(Hm,Bk),e(Bk,ZWe),e(Hm,eHe),e(A,oHe),e(A,Um),e(Um,_oe),e(_oe,rHe),e(Um,tHe),e(Um,Pk),e(Pk,aHe),e(Um,nHe),e(A,sHe),e(A,Jm),e(Jm,boe),e(boe,lHe),e(Jm,iHe),e(Jm,Ik),e(Ik,dHe),e(Jm,cHe),e(A,fHe),e(A,Ym),e(Ym,voe),e(voe,mHe),e(Ym,gHe),e(Ym,qk),e(qk,hHe),e(Ym,pHe),e(A,uHe),e(A,Km),e(Km,Foe),e(Foe,_He),e(Km,bHe),e(Km,Nk),e(Nk,vHe),e(Km,FHe),e(A,THe),e(A,Zm),e(Zm,Toe),e(Toe,MHe),e(Zm,EHe),e(Zm,jk),e(jk,CHe),e(Zm,wHe),e(A,AHe),e(A,eg),e(eg,Moe),e(Moe,yHe),e(eg,LHe),e(eg,Dk),e(Dk,xHe),e(eg,$He),e(A,kHe),e(A,og),e(og,Eoe),e(Eoe,SHe),e(og,RHe),e(og,Gk),e(Gk,BHe),e(og,PHe),e(A,IHe),e(A,rg),e(rg,Coe),e(Coe,qHe),e(rg,NHe),e(rg,Ok),e(Ok,jHe),e(rg,DHe),e(A,GHe),e(A,tg),e(tg,woe),e(woe,OHe),e(tg,VHe),e(tg,Vk),e(Vk,XHe),e(tg,zHe),e(A,QHe),e(A,ag),e(ag,Aoe),e(Aoe,WHe),e(ag,HHe),e(ag,Xk),e(Xk,UHe),e(ag,JHe),e(A,YHe),e(A,ng),e(ng,yoe),e(yoe,KHe),e(ng,ZHe),e(ng,zk),e(zk,eUe),e(ng,oUe),e(A,rUe),e(A,sg),e(sg,Loe),e(Loe,tUe),e(sg,aUe),e(sg,Qk),e(Qk,nUe),e(sg,sUe),e(Mr,lUe),M(lg,Mr,null),e(Co,iUe),e(Co,ig),M(jw,ig,null),e(ig,dUe),e(ig,xoe),e(xoe,cUe),b(f,ePe,_),b(f,mi,_),e(mi,dg),e(dg,$oe),M(Dw,$oe,null),e(mi,fUe),e(mi,koe),e(koe,mUe),b(f,oPe,_),b(f,wo,_),M(Gw,wo,null),e(wo,gUe),e(wo,Ow),e(Ow,hUe),e(Ow,Wk),e(Wk,pUe),e(Ow,uUe),e(wo,_Ue),e(wo,Vw),e(Vw,bUe),e(Vw,Soe),e(Soe,vUe),e(Vw,FUe),e(wo,TUe),e(wo,Er),M(Xw,Er,null),e(Er,MUe),e(Er,Roe),e(Roe,EUe),e(Er,CUe),e(Er,Ta),e(Ta,wUe),e(Ta,Boe),e(Boe,AUe),e(Ta,yUe),e(Ta,Poe),e(Poe,LUe),e(Ta,xUe),e(Ta,Ioe),e(Ioe,$Ue),e(Ta,kUe),e(Er,SUe),e(Er,k),e(k,yn),e(yn,qoe),e(qoe,RUe),e(yn,BUe),e(yn,Hk),e(Hk,PUe),e(yn,IUe),e(yn,Uk),e(Uk,qUe),e(yn,NUe),e(k,jUe),e(k,Ln),e(Ln,Noe),e(Noe,DUe),e(Ln,GUe),e(Ln,Jk),e(Jk,OUe),e(Ln,VUe),e(Ln,Yk),e(Yk,XUe),e(Ln,zUe),e(k,QUe),e(k,xn),e(xn,joe),e(joe,WUe),e(xn,HUe),e(xn,Kk),e(Kk,UUe),e(xn,JUe),e(xn,Zk),e(Zk,YUe),e(xn,KUe),e(k,ZUe),e(k,cg),e(cg,Doe),e(Doe,eJe),e(cg,oJe),e(cg,eS),e(eS,rJe),e(cg,tJe),e(k,aJe),e(k,$n),e($n,Goe),e(Goe,nJe),e($n,sJe),e($n,oS),e(oS,lJe),e($n,iJe),e($n,rS),e(rS,dJe),e($n,cJe),e(k,fJe),e(k,fg),e(fg,Ooe),e(Ooe,mJe),e(fg,gJe),e(fg,tS),e(tS,hJe),e(fg,pJe),e(k,uJe),e(k,mg),e(mg,Voe),e(Voe,_Je),e(mg,bJe),e(mg,aS),e(aS,vJe),e(mg,FJe),e(k,TJe),e(k,gg),e(gg,Xoe),e(Xoe,MJe),e(gg,EJe),e(gg,nS),e(nS,CJe),e(gg,wJe),e(k,AJe),e(k,kn),e(kn,zoe),e(zoe,yJe),e(kn,LJe),e(kn,sS),e(sS,xJe),e(kn,$Je),e(kn,lS),e(lS,kJe),e(kn,SJe),e(k,RJe),e(k,Sn),e(Sn,Qoe),e(Qoe,BJe),e(Sn,PJe),e(Sn,iS),e(iS,IJe),e(Sn,qJe),e(Sn,dS),e(dS,NJe),e(Sn,jJe),e(k,DJe),e(k,Rn),e(Rn,Woe),e(Woe,GJe),e(Rn,OJe),e(Rn,cS),e(cS,VJe),e(Rn,XJe),e(Rn,fS),e(fS,zJe),e(Rn,QJe),e(k,WJe),e(k,hg),e(hg,Hoe),e(Hoe,HJe),e(hg,UJe),e(hg,mS),e(mS,JJe),e(hg,YJe),e(k,KJe),e(k,pg),e(pg,Uoe),e(Uoe,ZJe),e(pg,eYe),e(pg,gS),e(gS,oYe),e(pg,rYe),e(k,tYe),e(k,Bn),e(Bn,Joe),e(Joe,aYe),e(Bn,nYe),e(Bn,hS),e(hS,sYe),e(Bn,lYe),e(Bn,pS),e(pS,iYe),e(Bn,dYe),e(k,cYe),e(k,ug),e(ug,Yoe),e(Yoe,fYe),e(ug,mYe),e(ug,uS),e(uS,gYe),e(ug,hYe),e(k,pYe),e(k,Pn),e(Pn,Koe),e(Koe,uYe),e(Pn,_Ye),e(Pn,_S),e(_S,bYe),e(Pn,vYe),e(Pn,bS),e(bS,FYe),e(Pn,TYe),e(k,MYe),e(k,In),e(In,Zoe),e(Zoe,EYe),e(In,CYe),e(In,vS),e(vS,wYe),e(In,AYe),e(In,FS),e(FS,yYe),e(In,LYe),e(k,xYe),e(k,qn),e(qn,ere),e(ere,$Ye),e(qn,kYe),e(qn,TS),e(TS,SYe),e(qn,RYe),e(qn,MS),e(MS,BYe),e(qn,PYe),e(k,IYe),e(k,_g),e(_g,ore),e(ore,qYe),e(_g,NYe),e(_g,ES),e(ES,jYe),e(_g,DYe),e(k,GYe),e(k,Nn),e(Nn,rre),e(rre,OYe),e(Nn,VYe),e(Nn,CS),e(CS,XYe),e(Nn,zYe),e(Nn,wS),e(wS,QYe),e(Nn,WYe),e(k,HYe),e(k,jn),e(jn,tre),e(tre,UYe),e(jn,JYe),e(jn,AS),e(AS,YYe),e(jn,KYe),e(jn,yS),e(yS,ZYe),e(jn,eKe),e(k,oKe),e(k,Dn),e(Dn,are),e(are,rKe),e(Dn,tKe),e(Dn,LS),e(LS,aKe),e(Dn,nKe),e(Dn,xS),e(xS,sKe),e(Dn,lKe),e(k,iKe),e(k,Gn),e(Gn,nre),e(nre,dKe),e(Gn,cKe),e(Gn,$S),e($S,fKe),e(Gn,mKe),e(Gn,kS),e(kS,gKe),e(Gn,hKe),e(k,pKe),e(k,On),e(On,sre),e(sre,uKe),e(On,_Ke),e(On,SS),e(SS,bKe),e(On,vKe),e(On,RS),e(RS,FKe),e(On,TKe),e(k,MKe),e(k,Vn),e(Vn,lre),e(lre,EKe),e(Vn,CKe),e(Vn,BS),e(BS,wKe),e(Vn,AKe),e(Vn,PS),e(PS,yKe),e(Vn,LKe),e(k,xKe),e(k,bg),e(bg,ire),e(ire,$Ke),e(bg,kKe),e(bg,IS),e(IS,SKe),e(bg,RKe),e(k,BKe),e(k,Xn),e(Xn,dre),e(dre,PKe),e(Xn,IKe),e(Xn,qS),e(qS,qKe),e(Xn,NKe),e(Xn,NS),e(NS,jKe),e(Xn,DKe),e(k,GKe),e(k,vg),e(vg,cre),e(cre,OKe),e(vg,VKe),e(vg,jS),e(jS,XKe),e(vg,zKe),e(k,QKe),e(k,zn),e(zn,fre),e(fre,WKe),e(zn,HKe),e(zn,DS),e(DS,UKe),e(zn,JKe),e(zn,GS),e(GS,YKe),e(zn,KKe),e(k,ZKe),e(k,Qn),e(Qn,mre),e(mre,eZe),e(Qn,oZe),e(Qn,OS),e(OS,rZe),e(Qn,tZe),e(Qn,VS),e(VS,aZe),e(Qn,nZe),e(k,sZe),e(k,Wn),e(Wn,gre),e(gre,lZe),e(Wn,iZe),e(Wn,XS),e(XS,dZe),e(Wn,cZe),e(Wn,zS),e(zS,fZe),e(Wn,mZe),e(k,gZe),e(k,Hn),e(Hn,hre),e(hre,hZe),e(Hn,pZe),e(Hn,QS),e(QS,uZe),e(Hn,_Ze),e(Hn,WS),e(WS,bZe),e(Hn,vZe),e(k,FZe),e(k,Un),e(Un,pre),e(pre,TZe),e(Un,MZe),e(Un,HS),e(HS,EZe),e(Un,CZe),e(Un,US),e(US,wZe),e(Un,AZe),e(k,yZe),e(k,Fg),e(Fg,ure),e(ure,LZe),e(Fg,xZe),e(Fg,JS),e(JS,$Ze),e(Fg,kZe),e(k,SZe),e(k,Jn),e(Jn,_re),e(_re,RZe),e(Jn,BZe),e(Jn,YS),e(YS,PZe),e(Jn,IZe),e(Jn,KS),e(KS,qZe),e(Jn,NZe),e(k,jZe),e(k,Yn),e(Yn,bre),e(bre,DZe),e(Yn,GZe),e(Yn,ZS),e(ZS,OZe),e(Yn,VZe),e(Yn,eR),e(eR,XZe),e(Yn,zZe),e(k,QZe),e(k,Kn),e(Kn,vre),e(vre,WZe),e(Kn,HZe),e(Kn,oR),e(oR,UZe),e(Kn,JZe),e(Kn,rR),e(rR,YZe),e(Kn,KZe),e(k,ZZe),e(k,Zn),e(Zn,Fre),e(Fre,eeo),e(Zn,oeo),e(Zn,tR),e(tR,reo),e(Zn,teo),e(Zn,aR),e(aR,aeo),e(Zn,neo),e(k,seo),e(k,es),e(es,Tre),e(Tre,leo),e(es,ieo),e(es,nR),e(nR,deo),e(es,ceo),e(es,sR),e(sR,feo),e(es,meo),e(k,geo),e(k,os),e(os,Mre),e(Mre,heo),e(os,peo),e(os,lR),e(lR,ueo),e(os,_eo),e(os,iR),e(iR,beo),e(os,veo),e(k,Feo),e(k,rs),e(rs,Ere),e(Ere,Teo),e(rs,Meo),e(rs,dR),e(dR,Eeo),e(rs,Ceo),e(rs,cR),e(cR,weo),e(rs,Aeo),e(k,yeo),e(k,Tg),e(Tg,Cre),e(Cre,Leo),e(Tg,xeo),e(Tg,fR),e(fR,$eo),e(Tg,keo),e(k,Seo),e(k,ts),e(ts,wre),e(wre,Reo),e(ts,Beo),e(ts,mR),e(mR,Peo),e(ts,Ieo),e(ts,gR),e(gR,qeo),e(ts,Neo),e(k,jeo),e(k,Mg),e(Mg,Are),e(Are,Deo),e(Mg,Geo),e(Mg,hR),e(hR,Oeo),e(Mg,Veo),e(k,Xeo),e(k,Eg),e(Eg,yre),e(yre,zeo),e(Eg,Qeo),e(Eg,pR),e(pR,Weo),e(Eg,Heo),e(k,Ueo),e(k,as),e(as,Lre),e(Lre,Jeo),e(as,Yeo),e(as,uR),e(uR,Keo),e(as,Zeo),e(as,_R),e(_R,eoo),e(as,ooo),e(k,roo),e(k,ns),e(ns,xre),e(xre,too),e(ns,aoo),e(ns,bR),e(bR,noo),e(ns,soo),e(ns,vR),e(vR,loo),e(ns,ioo),e(k,doo),e(k,ss),e(ss,$re),e($re,coo),e(ss,foo),e(ss,FR),e(FR,moo),e(ss,goo),e(ss,TR),e(TR,hoo),e(ss,poo),e(k,uoo),e(k,Cg),e(Cg,kre),e(kre,_oo),e(Cg,boo),e(Cg,MR),e(MR,voo),e(Cg,Foo),e(k,Too),e(k,ls),e(ls,Sre),e(Sre,Moo),e(ls,Eoo),e(ls,ER),e(ER,Coo),e(ls,woo),e(ls,CR),e(CR,Aoo),e(ls,yoo),e(k,Loo),e(k,is),e(is,Rre),e(Rre,xoo),e(is,$oo),e(is,wR),e(wR,koo),e(is,Soo),e(is,AR),e(AR,Roo),e(is,Boo),e(k,Poo),e(k,ds),e(ds,Bre),e(Bre,Ioo),e(ds,qoo),e(ds,yR),e(yR,Noo),e(ds,joo),e(ds,LR),e(LR,Doo),e(ds,Goo),e(k,Ooo),e(k,cs),e(cs,Pre),e(Pre,Voo),e(cs,Xoo),e(cs,xR),e(xR,zoo),e(cs,Qoo),e(cs,$R),e($R,Woo),e(cs,Hoo),e(k,Uoo),e(k,fs),e(fs,Ire),e(Ire,Joo),e(fs,Yoo),e(fs,kR),e(kR,Koo),e(fs,Zoo),e(fs,SR),e(SR,ero),e(fs,oro),e(k,rro),e(k,ms),e(ms,qre),e(qre,tro),e(ms,aro),e(ms,RR),e(RR,nro),e(ms,sro),e(ms,BR),e(BR,lro),e(ms,iro),e(k,dro),e(k,wg),e(wg,Nre),e(Nre,cro),e(wg,fro),e(wg,PR),e(PR,mro),e(wg,gro),e(k,hro),e(k,Ag),e(Ag,jre),e(jre,pro),e(Ag,uro),e(Ag,IR),e(IR,_ro),e(Ag,bro),e(k,vro),e(k,yg),e(yg,Dre),e(Dre,Fro),e(yg,Tro),e(yg,qR),e(qR,Mro),e(yg,Ero),e(k,Cro),e(k,Lg),e(Lg,Gre),e(Gre,wro),e(Lg,Aro),e(Lg,NR),e(NR,yro),e(Lg,Lro),e(k,xro),e(k,gs),e(gs,Ore),e(Ore,$ro),e(gs,kro),e(gs,jR),e(jR,Sro),e(gs,Rro),e(gs,DR),e(DR,Bro),e(gs,Pro),e(k,Iro),e(k,xg),e(xg,Vre),e(Vre,qro),e(xg,Nro),e(xg,GR),e(GR,jro),e(xg,Dro),e(k,Gro),e(k,hs),e(hs,Xre),e(Xre,Oro),e(hs,Vro),e(hs,OR),e(OR,Xro),e(hs,zro),e(hs,VR),e(VR,Qro),e(hs,Wro),e(k,Hro),e(k,ps),e(ps,zre),e(zre,Uro),e(ps,Jro),e(ps,XR),e(XR,Yro),e(ps,Kro),e(ps,zR),e(zR,Zro),e(ps,eto),e(k,oto),e(k,us),e(us,Qre),e(Qre,rto),e(us,tto),e(us,QR),e(QR,ato),e(us,nto),e(us,WR),e(WR,sto),e(us,lto),e(k,ito),e(k,_s),e(_s,Wre),e(Wre,dto),e(_s,cto),e(_s,HR),e(HR,fto),e(_s,mto),e(_s,UR),e(UR,gto),e(_s,hto),e(k,pto),e(k,bs),e(bs,Hre),e(Hre,uto),e(bs,_to),e(bs,JR),e(JR,bto),e(bs,vto),e(bs,YR),e(YR,Fto),e(bs,Tto),e(k,Mto),e(k,vs),e(vs,Ure),e(Ure,Eto),e(vs,Cto),e(vs,KR),e(KR,wto),e(vs,Ato),e(vs,ZR),e(ZR,yto),e(vs,Lto),e(k,xto),e(k,$g),e($g,Jre),e(Jre,$to),e($g,kto),e($g,eB),e(eB,Sto),e($g,Rto),e(k,Bto),e(k,kg),e(kg,Yre),e(Yre,Pto),e(kg,Ito),e(kg,oB),e(oB,qto),e(kg,Nto),e(k,jto),e(k,Fs),e(Fs,Kre),e(Kre,Dto),e(Fs,Gto),e(Fs,rB),e(rB,Oto),e(Fs,Vto),e(Fs,tB),e(tB,Xto),e(Fs,zto),e(k,Qto),e(k,Ts),e(Ts,Zre),e(Zre,Wto),e(Ts,Hto),e(Ts,aB),e(aB,Uto),e(Ts,Jto),e(Ts,nB),e(nB,Yto),e(Ts,Kto),e(k,Zto),e(k,Ms),e(Ms,ete),e(ete,eao),e(Ms,oao),e(Ms,sB),e(sB,rao),e(Ms,tao),e(Ms,lB),e(lB,aao),e(Ms,nao),e(k,sao),e(k,Sg),e(Sg,ote),e(ote,lao),e(Sg,iao),e(Sg,iB),e(iB,dao),e(Sg,cao),e(k,fao),e(k,Rg),e(Rg,rte),e(rte,mao),e(Rg,gao),e(Rg,dB),e(dB,hao),e(Rg,pao),e(k,uao),e(k,Bg),e(Bg,tte),e(tte,_ao),e(Bg,bao),e(Bg,cB),e(cB,vao),e(Bg,Fao),e(k,Tao),e(k,Es),e(Es,ate),e(ate,Mao),e(Es,Eao),e(Es,fB),e(fB,Cao),e(Es,wao),e(Es,mB),e(mB,Aao),e(Es,yao),e(k,Lao),e(k,Pg),e(Pg,nte),e(nte,xao),e(Pg,$ao),e(Pg,gB),e(gB,kao),e(Pg,Sao),e(k,Rao),e(k,Ig),e(Ig,ste),e(ste,Bao),e(Ig,Pao),e(Ig,hB),e(hB,Iao),e(Ig,qao),e(k,Nao),e(k,Cs),e(Cs,lte),e(lte,jao),e(Cs,Dao),e(Cs,pB),e(pB,Gao),e(Cs,Oao),e(Cs,uB),e(uB,Vao),e(Cs,Xao),e(k,zao),e(k,qg),e(qg,ite),e(ite,Qao),e(qg,Wao),e(qg,_B),e(_B,Hao),e(qg,Uao),e(k,Jao),e(k,Ng),e(Ng,dte),e(dte,Yao),e(Ng,Kao),e(Ng,bB),e(bB,Zao),e(Ng,eno),e(k,ono),e(k,ws),e(ws,cte),e(cte,rno),e(ws,tno),e(ws,vB),e(vB,ano),e(ws,nno),e(ws,FB),e(FB,sno),e(ws,lno),e(k,ino),e(k,As),e(As,fte),e(fte,dno),e(As,cno),e(As,TB),e(TB,fno),e(As,mno),e(As,MB),e(MB,gno),e(As,hno),e(k,pno),e(k,ys),e(ys,mte),e(mte,uno),e(ys,_no),e(ys,EB),e(EB,bno),e(ys,vno),e(ys,CB),e(CB,Fno),e(ys,Tno),e(k,Mno),e(k,Ls),e(Ls,gte),e(gte,Eno),e(Ls,Cno),e(Ls,wB),e(wB,wno),e(Ls,Ano),e(Ls,AB),e(AB,yno),e(Ls,Lno),e(Er,xno),M(jg,Er,null),e(wo,$no),e(wo,Dg),M(zw,Dg,null),e(Dg,kno),e(Dg,hte),e(hte,Sno),b(f,rPe,_),b(f,gi,_),e(gi,Gg),e(Gg,pte),M(Qw,pte,null),e(gi,Rno),e(gi,ute),e(ute,Bno),b(f,tPe,_),b(f,Ao,_),M(Ww,Ao,null),e(Ao,Pno),e(Ao,Hw),e(Hw,Ino),e(Hw,yB),e(yB,qno),e(Hw,Nno),e(Ao,jno),e(Ao,Uw),e(Uw,Dno),e(Uw,_te),e(_te,Gno),e(Uw,Ono),e(Ao,Vno),e(Ao,Qe),M(Jw,Qe,null),e(Qe,Xno),e(Qe,bte),e(bte,zno),e(Qe,Qno),e(Qe,Ma),e(Ma,Wno),e(Ma,vte),e(vte,Hno),e(Ma,Uno),e(Ma,Fte),e(Fte,Jno),e(Ma,Yno),e(Ma,Tte),e(Tte,Kno),e(Ma,Zno),e(Qe,eso),e(Qe,ae),e(ae,Og),e(Og,Mte),e(Mte,oso),e(Og,rso),e(Og,LB),e(LB,tso),e(Og,aso),e(ae,nso),e(ae,Vg),e(Vg,Ete),e(Ete,sso),e(Vg,lso),e(Vg,xB),e(xB,iso),e(Vg,dso),e(ae,cso),e(ae,Xg),e(Xg,Cte),e(Cte,fso),e(Xg,mso),e(Xg,$B),e($B,gso),e(Xg,hso),e(ae,pso),e(ae,zg),e(zg,wte),e(wte,uso),e(zg,_so),e(zg,kB),e(kB,bso),e(zg,vso),e(ae,Fso),e(ae,Qg),e(Qg,Ate),e(Ate,Tso),e(Qg,Mso),e(Qg,SB),e(SB,Eso),e(Qg,Cso),e(ae,wso),e(ae,Wg),e(Wg,yte),e(yte,Aso),e(Wg,yso),e(Wg,RB),e(RB,Lso),e(Wg,xso),e(ae,$so),e(ae,Hg),e(Hg,Lte),e(Lte,kso),e(Hg,Sso),e(Hg,BB),e(BB,Rso),e(Hg,Bso),e(ae,Pso),e(ae,Ug),e(Ug,xte),e(xte,Iso),e(Ug,qso),e(Ug,PB),e(PB,Nso),e(Ug,jso),e(ae,Dso),e(ae,Jg),e(Jg,$te),e($te,Gso),e(Jg,Oso),e(Jg,IB),e(IB,Vso),e(Jg,Xso),e(ae,zso),e(ae,Yg),e(Yg,kte),e(kte,Qso),e(Yg,Wso),e(Yg,qB),e(qB,Hso),e(Yg,Uso),e(ae,Jso),e(ae,Kg),e(Kg,Ste),e(Ste,Yso),e(Kg,Kso),e(Kg,NB),e(NB,Zso),e(Kg,elo),e(ae,olo),e(ae,Zg),e(Zg,Rte),e(Rte,rlo),e(Zg,tlo),e(Zg,jB),e(jB,alo),e(Zg,nlo),e(ae,slo),e(ae,eh),e(eh,Bte),e(Bte,llo),e(eh,ilo),e(eh,DB),e(DB,dlo),e(eh,clo),e(ae,flo),e(ae,oh),e(oh,Pte),e(Pte,mlo),e(oh,glo),e(oh,GB),e(GB,hlo),e(oh,plo),e(ae,ulo),e(ae,rh),e(rh,Ite),e(Ite,_lo),e(rh,blo),e(rh,OB),e(OB,vlo),e(rh,Flo),e(ae,Tlo),e(ae,th),e(th,qte),e(qte,Mlo),e(th,Elo),e(th,VB),e(VB,Clo),e(th,wlo),e(ae,Alo),e(ae,ah),e(ah,Nte),e(Nte,ylo),e(ah,Llo),e(ah,XB),e(XB,xlo),e(ah,$lo),e(ae,klo),e(ae,nh),e(nh,jte),e(jte,Slo),e(nh,Rlo),e(nh,zB),e(zB,Blo),e(nh,Plo),e(ae,Ilo),e(ae,sh),e(sh,Dte),e(Dte,qlo),e(sh,Nlo),e(sh,QB),e(QB,jlo),e(sh,Dlo),e(ae,Glo),e(ae,lh),e(lh,Gte),e(Gte,Olo),e(lh,Vlo),e(lh,WB),e(WB,Xlo),e(lh,zlo),e(ae,Qlo),e(ae,ih),e(ih,Ote),e(Ote,Wlo),e(ih,Hlo),e(ih,HB),e(HB,Ulo),e(ih,Jlo),e(ae,Ylo),e(ae,dh),e(dh,Vte),e(Vte,Klo),e(dh,Zlo),e(dh,UB),e(UB,eio),e(dh,oio),e(ae,rio),e(ae,ch),e(ch,Xte),e(Xte,tio),e(ch,aio),e(ch,JB),e(JB,nio),e(ch,sio),e(ae,lio),e(ae,fh),e(fh,zte),e(zte,iio),e(fh,dio),e(fh,YB),e(YB,cio),e(fh,fio),e(Qe,mio),M(mh,Qe,null),e(Qe,gio),M(gh,Qe,null),e(Ao,hio),e(Ao,hh),M(Yw,hh,null),e(hh,pio),e(hh,Qte),e(Qte,uio),b(f,aPe,_),b(f,hi,_),e(hi,ph),e(ph,Wte),M(Kw,Wte,null),e(hi,_io),e(hi,Hte),e(Hte,bio),b(f,nPe,_),b(f,yo,_),M(Zw,yo,null),e(yo,vio),e(yo,eA),e(eA,Fio),e(eA,KB),e(KB,Tio),e(eA,Mio),e(yo,Eio),e(yo,oA),e(oA,Cio),e(oA,Ute),e(Ute,wio),e(oA,Aio),e(yo,yio),e(yo,We),M(rA,We,null),e(We,Lio),e(We,Jte),e(Jte,xio),e(We,$io),e(We,pi),e(pi,kio),e(pi,Yte),e(Yte,Sio),e(pi,Rio),e(pi,Kte),e(Kte,Bio),e(pi,Pio),e(We,Iio),e(We,be),e(be,uh),e(uh,Zte),e(Zte,qio),e(uh,Nio),e(uh,ZB),e(ZB,jio),e(uh,Dio),e(be,Gio),e(be,_h),e(_h,eae),e(eae,Oio),e(_h,Vio),e(_h,eP),e(eP,Xio),e(_h,zio),e(be,Qio),e(be,bh),e(bh,oae),e(oae,Wio),e(bh,Hio),e(bh,oP),e(oP,Uio),e(bh,Jio),e(be,Yio),e(be,vh),e(vh,rae),e(rae,Kio),e(vh,Zio),e(vh,rP),e(rP,edo),e(vh,odo),e(be,rdo),e(be,Fh),e(Fh,tae),e(tae,tdo),e(Fh,ado),e(Fh,tP),e(tP,ndo),e(Fh,sdo),e(be,ldo),e(be,Th),e(Th,aae),e(aae,ido),e(Th,ddo),e(Th,aP),e(aP,cdo),e(Th,fdo),e(be,mdo),e(be,Mh),e(Mh,nae),e(nae,gdo),e(Mh,hdo),e(Mh,nP),e(nP,pdo),e(Mh,udo),e(be,_do),e(be,Eh),e(Eh,sae),e(sae,bdo),e(Eh,vdo),e(Eh,sP),e(sP,Fdo),e(Eh,Tdo),e(be,Mdo),e(be,Ch),e(Ch,lae),e(lae,Edo),e(Ch,Cdo),e(Ch,lP),e(lP,wdo),e(Ch,Ado),e(be,ydo),e(be,wh),e(wh,iae),e(iae,Ldo),e(wh,xdo),e(wh,iP),e(iP,$do),e(wh,kdo),e(be,Sdo),e(be,Ah),e(Ah,dae),e(dae,Rdo),e(Ah,Bdo),e(Ah,dP),e(dP,Pdo),e(Ah,Ido),e(be,qdo),e(be,yh),e(yh,cae),e(cae,Ndo),e(yh,jdo),e(yh,cP),e(cP,Ddo),e(yh,Gdo),e(be,Odo),e(be,Lh),e(Lh,fae),e(fae,Vdo),e(Lh,Xdo),e(Lh,fP),e(fP,zdo),e(Lh,Qdo),e(be,Wdo),e(be,xh),e(xh,mae),e(mae,Hdo),e(xh,Udo),e(xh,mP),e(mP,Jdo),e(xh,Ydo),e(We,Kdo),M($h,We,null),e(We,Zdo),M(kh,We,null),e(yo,eco),e(yo,Sh),M(tA,Sh,null),e(Sh,oco),e(Sh,gae),e(gae,rco),b(f,sPe,_),b(f,ui,_),e(ui,Rh),e(Rh,hae),M(aA,hae,null),e(ui,tco),e(ui,pae),e(pae,aco),b(f,lPe,_),b(f,Lo,_),M(nA,Lo,null),e(Lo,nco),e(Lo,_i),e(_i,sco),e(_i,gP),e(gP,lco),e(_i,ico),e(_i,hP),e(hP,dco),e(_i,cco),e(Lo,fco),e(Lo,sA),e(sA,mco),e(sA,uae),e(uae,gco),e(sA,hco),e(Lo,pco),e(Lo,Zr),M(lA,Zr,null),e(Zr,uco),e(Zr,_ae),e(_ae,_co),e(Zr,bco),e(Zr,bi),e(bi,vco),e(bi,bae),e(bae,Fco),e(bi,Tco),e(bi,pP),e(pP,Mco),e(bi,Eco),e(Zr,Cco),M(Bh,Zr,null),e(Lo,wco),e(Lo,He),M(iA,He,null),e(He,Aco),e(He,vae),e(vae,yco),e(He,Lco),e(He,Ea),e(Ea,xco),e(Ea,Fae),e(Fae,$co),e(Ea,kco),e(Ea,Tae),e(Tae,Sco),e(Ea,Rco),e(Ea,Mae),e(Mae,Bco),e(Ea,Pco),e(He,Ico),e(He,x),e(x,Ph),e(Ph,Eae),e(Eae,qco),e(Ph,Nco),e(Ph,uP),e(uP,jco),e(Ph,Dco),e(x,Gco),e(x,Ih),e(Ih,Cae),e(Cae,Oco),e(Ih,Vco),e(Ih,_P),e(_P,Xco),e(Ih,zco),e(x,Qco),e(x,qh),e(qh,wae),e(wae,Wco),e(qh,Hco),e(qh,bP),e(bP,Uco),e(qh,Jco),e(x,Yco),e(x,Nh),e(Nh,Aae),e(Aae,Kco),e(Nh,Zco),e(Nh,vP),e(vP,efo),e(Nh,ofo),e(x,rfo),e(x,jh),e(jh,yae),e(yae,tfo),e(jh,afo),e(jh,FP),e(FP,nfo),e(jh,sfo),e(x,lfo),e(x,Dh),e(Dh,Lae),e(Lae,ifo),e(Dh,dfo),e(Dh,TP),e(TP,cfo),e(Dh,ffo),e(x,mfo),e(x,Gh),e(Gh,xae),e(xae,gfo),e(Gh,hfo),e(Gh,MP),e(MP,pfo),e(Gh,ufo),e(x,_fo),e(x,Oh),e(Oh,$ae),e($ae,bfo),e(Oh,vfo),e(Oh,EP),e(EP,Ffo),e(Oh,Tfo),e(x,Mfo),e(x,Vh),e(Vh,kae),e(kae,Efo),e(Vh,Cfo),e(Vh,CP),e(CP,wfo),e(Vh,Afo),e(x,yfo),e(x,Xh),e(Xh,Sae),e(Sae,Lfo),e(Xh,xfo),e(Xh,wP),e(wP,$fo),e(Xh,kfo),e(x,Sfo),e(x,zh),e(zh,Rae),e(Rae,Rfo),e(zh,Bfo),e(zh,AP),e(AP,Pfo),e(zh,Ifo),e(x,qfo),e(x,Qh),e(Qh,Bae),e(Bae,Nfo),e(Qh,jfo),e(Qh,yP),e(yP,Dfo),e(Qh,Gfo),e(x,Ofo),e(x,Wh),e(Wh,Pae),e(Pae,Vfo),e(Wh,Xfo),e(Wh,LP),e(LP,zfo),e(Wh,Qfo),e(x,Wfo),e(x,Hh),e(Hh,Iae),e(Iae,Hfo),e(Hh,Ufo),e(Hh,xP),e(xP,Jfo),e(Hh,Yfo),e(x,Kfo),e(x,Uh),e(Uh,qae),e(qae,Zfo),e(Uh,emo),e(Uh,$P),e($P,omo),e(Uh,rmo),e(x,tmo),e(x,Jh),e(Jh,Nae),e(Nae,amo),e(Jh,nmo),e(Jh,kP),e(kP,smo),e(Jh,lmo),e(x,imo),e(x,Yh),e(Yh,jae),e(jae,dmo),e(Yh,cmo),e(Yh,SP),e(SP,fmo),e(Yh,mmo),e(x,gmo),e(x,Kh),e(Kh,Dae),e(Dae,hmo),e(Kh,pmo),e(Kh,RP),e(RP,umo),e(Kh,_mo),e(x,bmo),e(x,Zh),e(Zh,Gae),e(Gae,vmo),e(Zh,Fmo),e(Zh,BP),e(BP,Tmo),e(Zh,Mmo),e(x,Emo),e(x,ep),e(ep,Oae),e(Oae,Cmo),e(ep,wmo),e(ep,PP),e(PP,Amo),e(ep,ymo),e(x,Lmo),e(x,op),e(op,Vae),e(Vae,xmo),e(op,$mo),e(op,IP),e(IP,kmo),e(op,Smo),e(x,Rmo),e(x,rp),e(rp,Xae),e(Xae,Bmo),e(rp,Pmo),e(rp,qP),e(qP,Imo),e(rp,qmo),e(x,Nmo),e(x,tp),e(tp,zae),e(zae,jmo),e(tp,Dmo),e(tp,NP),e(NP,Gmo),e(tp,Omo),e(x,Vmo),e(x,ap),e(ap,Qae),e(Qae,Xmo),e(ap,zmo),e(ap,jP),e(jP,Qmo),e(ap,Wmo),e(x,Hmo),e(x,np),e(np,Wae),e(Wae,Umo),e(np,Jmo),e(np,DP),e(DP,Ymo),e(np,Kmo),e(x,Zmo),e(x,sp),e(sp,Hae),e(Hae,ego),e(sp,ogo),e(sp,GP),e(GP,rgo),e(sp,tgo),e(x,ago),e(x,lp),e(lp,Uae),e(Uae,ngo),e(lp,sgo),e(lp,OP),e(OP,lgo),e(lp,igo),e(x,dgo),e(x,ip),e(ip,Jae),e(Jae,cgo),e(ip,fgo),e(ip,VP),e(VP,mgo),e(ip,ggo),e(x,hgo),e(x,dp),e(dp,Yae),e(Yae,pgo),e(dp,ugo),e(dp,XP),e(XP,_go),e(dp,bgo),e(x,vgo),e(x,cp),e(cp,Kae),e(Kae,Fgo),e(cp,Tgo),e(cp,zP),e(zP,Mgo),e(cp,Ego),e(x,Cgo),e(x,xs),e(xs,Zae),e(Zae,wgo),e(xs,Ago),e(xs,QP),e(QP,ygo),e(xs,Lgo),e(xs,WP),e(WP,xgo),e(xs,$go),e(x,kgo),e(x,fp),e(fp,ene),e(ene,Sgo),e(fp,Rgo),e(fp,HP),e(HP,Bgo),e(fp,Pgo),e(x,Igo),e(x,mp),e(mp,one),e(one,qgo),e(mp,Ngo),e(mp,UP),e(UP,jgo),e(mp,Dgo),e(x,Ggo),e(x,gp),e(gp,rne),e(rne,Ogo),e(gp,Vgo),e(gp,JP),e(JP,Xgo),e(gp,zgo),e(x,Qgo),e(x,hp),e(hp,tne),e(tne,Wgo),e(hp,Hgo),e(hp,YP),e(YP,Ugo),e(hp,Jgo),e(x,Ygo),e(x,pp),e(pp,ane),e(ane,Kgo),e(pp,Zgo),e(pp,KP),e(KP,eho),e(pp,oho),e(x,rho),e(x,up),e(up,nne),e(nne,tho),e(up,aho),e(up,ZP),e(ZP,nho),e(up,sho),e(x,lho),e(x,_p),e(_p,sne),e(sne,iho),e(_p,dho),e(_p,eI),e(eI,cho),e(_p,fho),e(x,mho),e(x,bp),e(bp,lne),e(lne,gho),e(bp,hho),e(bp,oI),e(oI,pho),e(bp,uho),e(x,_ho),e(x,vp),e(vp,ine),e(ine,bho),e(vp,vho),e(vp,rI),e(rI,Fho),e(vp,Tho),e(x,Mho),e(x,Fp),e(Fp,dne),e(dne,Eho),e(Fp,Cho),e(Fp,tI),e(tI,who),e(Fp,Aho),e(x,yho),e(x,Tp),e(Tp,cne),e(cne,Lho),e(Tp,xho),e(Tp,aI),e(aI,$ho),e(Tp,kho),e(x,Sho),e(x,Mp),e(Mp,fne),e(fne,Rho),e(Mp,Bho),e(Mp,nI),e(nI,Pho),e(Mp,Iho),e(x,qho),e(x,Ep),e(Ep,mne),e(mne,Nho),e(Ep,jho),e(Ep,sI),e(sI,Dho),e(Ep,Gho),e(x,Oho),e(x,Cp),e(Cp,gne),e(gne,Vho),e(Cp,Xho),e(Cp,lI),e(lI,zho),e(Cp,Qho),e(x,Who),e(x,wp),e(wp,hne),e(hne,Hho),e(wp,Uho),e(wp,iI),e(iI,Jho),e(wp,Yho),e(x,Kho),e(x,Ap),e(Ap,pne),e(pne,Zho),e(Ap,epo),e(Ap,dI),e(dI,opo),e(Ap,rpo),e(x,tpo),e(x,yp),e(yp,une),e(une,apo),e(yp,npo),e(yp,cI),e(cI,spo),e(yp,lpo),e(x,ipo),e(x,Lp),e(Lp,_ne),e(_ne,dpo),e(Lp,cpo),e(Lp,fI),e(fI,fpo),e(Lp,mpo),e(x,gpo),e(x,xp),e(xp,bne),e(bne,hpo),e(xp,ppo),e(xp,mI),e(mI,upo),e(xp,_po),e(x,bpo),e(x,$p),e($p,vne),e(vne,vpo),e($p,Fpo),e($p,gI),e(gI,Tpo),e($p,Mpo),e(x,Epo),e(x,kp),e(kp,Fne),e(Fne,Cpo),e(kp,wpo),e(kp,hI),e(hI,Apo),e(kp,ypo),e(x,Lpo),e(x,Sp),e(Sp,Tne),e(Tne,xpo),e(Sp,$po),e(Sp,pI),e(pI,kpo),e(Sp,Spo),e(x,Rpo),e(x,Rp),e(Rp,Mne),e(Mne,Bpo),e(Rp,Ppo),e(Rp,uI),e(uI,Ipo),e(Rp,qpo),e(x,Npo),e(x,Bp),e(Bp,Ene),e(Ene,jpo),e(Bp,Dpo),e(Bp,_I),e(_I,Gpo),e(Bp,Opo),e(x,Vpo),e(x,Pp),e(Pp,Cne),e(Cne,Xpo),e(Pp,zpo),e(Pp,bI),e(bI,Qpo),e(Pp,Wpo),e(x,Hpo),e(x,Ip),e(Ip,wne),e(wne,Upo),e(Ip,Jpo),e(Ip,vI),e(vI,Ypo),e(Ip,Kpo),e(x,Zpo),e(x,qp),e(qp,Ane),e(Ane,euo),e(qp,ouo),e(qp,FI),e(FI,ruo),e(qp,tuo),e(x,auo),e(x,Np),e(Np,yne),e(yne,nuo),e(Np,suo),e(Np,TI),e(TI,luo),e(Np,iuo),e(x,duo),e(x,jp),e(jp,Lne),e(Lne,cuo),e(jp,fuo),e(jp,MI),e(MI,muo),e(jp,guo),e(x,huo),e(x,Dp),e(Dp,xne),e(xne,puo),e(Dp,uuo),e(Dp,EI),e(EI,_uo),e(Dp,buo),e(x,vuo),e(x,Gp),e(Gp,$ne),e($ne,Fuo),e(Gp,Tuo),e(Gp,CI),e(CI,Muo),e(Gp,Euo),e(x,Cuo),e(x,Op),e(Op,kne),e(kne,wuo),e(Op,Auo),e(Op,wI),e(wI,yuo),e(Op,Luo),e(x,xuo),e(x,Vp),e(Vp,Sne),e(Sne,$uo),e(Vp,kuo),e(Vp,AI),e(AI,Suo),e(Vp,Ruo),e(x,Buo),e(x,Xp),e(Xp,Rne),e(Rne,Puo),e(Xp,Iuo),e(Xp,yI),e(yI,quo),e(Xp,Nuo),e(x,juo),e(x,zp),e(zp,Bne),e(Bne,Duo),e(zp,Guo),e(zp,LI),e(LI,Ouo),e(zp,Vuo),e(x,Xuo),e(x,Qp),e(Qp,Pne),e(Pne,zuo),e(Qp,Quo),e(Qp,xI),e(xI,Wuo),e(Qp,Huo),e(x,Uuo),e(x,Wp),e(Wp,Ine),e(Ine,Juo),e(Wp,Yuo),e(Wp,$I),e($I,Kuo),e(Wp,Zuo),e(x,e_o),e(x,Hp),e(Hp,qne),e(qne,o_o),e(Hp,r_o),e(Hp,kI),e(kI,t_o),e(Hp,a_o),e(x,n_o),e(x,Up),e(Up,Nne),e(Nne,s_o),e(Up,l_o),e(Up,SI),e(SI,i_o),e(Up,d_o),e(x,c_o),e(x,Jp),e(Jp,jne),e(jne,f_o),e(Jp,m_o),e(Jp,RI),e(RI,g_o),e(Jp,h_o),e(x,p_o),e(x,Yp),e(Yp,Dne),e(Dne,u_o),e(Yp,__o),e(Yp,BI),e(BI,b_o),e(Yp,v_o),e(x,F_o),e(x,Kp),e(Kp,Gne),e(Gne,T_o),e(Kp,M_o),e(Kp,PI),e(PI,E_o),e(Kp,C_o),e(x,w_o),e(x,Zp),e(Zp,One),e(One,A_o),e(Zp,y_o),e(Zp,II),e(II,L_o),e(Zp,x_o),e(x,$_o),e(x,eu),e(eu,Vne),e(Vne,k_o),e(eu,S_o),e(eu,qI),e(qI,R_o),e(eu,B_o),e(x,P_o),e(x,ou),e(ou,Xne),e(Xne,I_o),e(ou,q_o),e(ou,NI),e(NI,N_o),e(ou,j_o),e(x,D_o),e(x,ru),e(ru,zne),e(zne,G_o),e(ru,O_o),e(ru,jI),e(jI,V_o),e(ru,X_o),e(x,z_o),e(x,tu),e(tu,Qne),e(Qne,Q_o),e(tu,W_o),e(tu,DI),e(DI,H_o),e(tu,U_o),e(x,J_o),e(x,au),e(au,Wne),e(Wne,Y_o),e(au,K_o),e(au,GI),e(GI,Z_o),e(au,e2o),e(x,o2o),e(x,nu),e(nu,Hne),e(Hne,r2o),e(nu,t2o),e(nu,OI),e(OI,a2o),e(nu,n2o),e(x,s2o),e(x,su),e(su,Une),e(Une,l2o),e(su,i2o),e(su,VI),e(VI,d2o),e(su,c2o),e(x,f2o),e(x,lu),e(lu,Jne),e(Jne,m2o),e(lu,g2o),e(lu,XI),e(XI,h2o),e(lu,p2o),e(x,u2o),e(x,iu),e(iu,Yne),e(Yne,_2o),e(iu,b2o),e(iu,zI),e(zI,v2o),e(iu,F2o),e(x,T2o),e(x,du),e(du,Kne),e(Kne,M2o),e(du,E2o),e(du,QI),e(QI,C2o),e(du,w2o),e(x,A2o),e(x,cu),e(cu,Zne),e(Zne,y2o),e(cu,L2o),e(cu,WI),e(WI,x2o),e(cu,$2o),e(x,k2o),e(x,fu),e(fu,ese),e(ese,S2o),e(fu,R2o),e(fu,HI),e(HI,B2o),e(fu,P2o),e(x,I2o),e(x,mu),e(mu,ose),e(ose,q2o),e(mu,N2o),e(mu,UI),e(UI,j2o),e(mu,D2o),e(x,G2o),e(x,gu),e(gu,rse),e(rse,O2o),e(gu,V2o),e(gu,JI),e(JI,X2o),e(gu,z2o),e(x,Q2o),e(x,hu),e(hu,tse),e(tse,W2o),e(hu,H2o),e(hu,YI),e(YI,U2o),e(hu,J2o),e(x,Y2o),e(x,pu),e(pu,ase),e(ase,K2o),e(pu,Z2o),e(pu,KI),e(KI,e1o),e(pu,o1o),e(x,r1o),e(x,uu),e(uu,nse),e(nse,t1o),e(uu,a1o),e(uu,ZI),e(ZI,n1o),e(uu,s1o),e(x,l1o),e(x,_u),e(_u,sse),e(sse,i1o),e(_u,d1o),e(_u,eq),e(eq,c1o),e(_u,f1o),e(x,m1o),e(x,bu),e(bu,lse),e(lse,g1o),e(bu,h1o),e(bu,oq),e(oq,p1o),e(bu,u1o),e(x,_1o),e(x,vu),e(vu,ise),e(ise,b1o),e(vu,v1o),e(vu,rq),e(rq,F1o),e(vu,T1o),e(x,M1o),e(x,Fu),e(Fu,dse),e(dse,E1o),e(Fu,C1o),e(Fu,tq),e(tq,w1o),e(Fu,A1o),e(x,y1o),e(x,Tu),e(Tu,cse),e(cse,L1o),e(Tu,x1o),e(Tu,aq),e(aq,$1o),e(Tu,k1o),e(He,S1o),e(He,Mu),e(Mu,R1o),e(Mu,fse),e(fse,B1o),e(Mu,P1o),e(Mu,mse),e(mse,I1o),e(He,q1o),M(Eu,He,null),b(f,iPe,_),b(f,vi,_),e(vi,Cu),e(Cu,gse),M(dA,gse,null),e(vi,N1o),e(vi,hse),e(hse,j1o),b(f,dPe,_),b(f,xo,_),M(cA,xo,null),e(xo,D1o),e(xo,Fi),e(Fi,G1o),e(Fi,nq),e(nq,O1o),e(Fi,V1o),e(Fi,sq),e(sq,X1o),e(Fi,z1o),e(xo,Q1o),e(xo,fA),e(fA,W1o),e(fA,pse),e(pse,H1o),e(fA,U1o),e(xo,J1o),e(xo,et),M(mA,et,null),e(et,Y1o),e(et,use),e(use,K1o),e(et,Z1o),e(et,Ti),e(Ti,ebo),e(Ti,_se),e(_se,obo),e(Ti,rbo),e(Ti,lq),e(lq,tbo),e(Ti,abo),e(et,nbo),M(wu,et,null),e(xo,sbo),e(xo,Ue),M(gA,Ue,null),e(Ue,lbo),e(Ue,bse),e(bse,ibo),e(Ue,dbo),e(Ue,Ca),e(Ca,cbo),e(Ca,vse),e(vse,fbo),e(Ca,mbo),e(Ca,Fse),e(Fse,gbo),e(Ca,hbo),e(Ca,Tse),e(Tse,pbo),e(Ca,ubo),e(Ue,_bo),e(Ue,G),e(G,Au),e(Au,Mse),e(Mse,bbo),e(Au,vbo),e(Au,iq),e(iq,Fbo),e(Au,Tbo),e(G,Mbo),e(G,yu),e(yu,Ese),e(Ese,Ebo),e(yu,Cbo),e(yu,dq),e(dq,wbo),e(yu,Abo),e(G,ybo),e(G,Lu),e(Lu,Cse),e(Cse,Lbo),e(Lu,xbo),e(Lu,cq),e(cq,$bo),e(Lu,kbo),e(G,Sbo),e(G,xu),e(xu,wse),e(wse,Rbo),e(xu,Bbo),e(xu,fq),e(fq,Pbo),e(xu,Ibo),e(G,qbo),e(G,$u),e($u,Ase),e(Ase,Nbo),e($u,jbo),e($u,mq),e(mq,Dbo),e($u,Gbo),e(G,Obo),e(G,ku),e(ku,yse),e(yse,Vbo),e(ku,Xbo),e(ku,gq),e(gq,zbo),e(ku,Qbo),e(G,Wbo),e(G,Su),e(Su,Lse),e(Lse,Hbo),e(Su,Ubo),e(Su,hq),e(hq,Jbo),e(Su,Ybo),e(G,Kbo),e(G,Ru),e(Ru,xse),e(xse,Zbo),e(Ru,evo),e(Ru,pq),e(pq,ovo),e(Ru,rvo),e(G,tvo),e(G,Bu),e(Bu,$se),e($se,avo),e(Bu,nvo),e(Bu,uq),e(uq,svo),e(Bu,lvo),e(G,ivo),e(G,Pu),e(Pu,kse),e(kse,dvo),e(Pu,cvo),e(Pu,_q),e(_q,fvo),e(Pu,mvo),e(G,gvo),e(G,Iu),e(Iu,Sse),e(Sse,hvo),e(Iu,pvo),e(Iu,bq),e(bq,uvo),e(Iu,_vo),e(G,bvo),e(G,qu),e(qu,Rse),e(Rse,vvo),e(qu,Fvo),e(qu,vq),e(vq,Tvo),e(qu,Mvo),e(G,Evo),e(G,Nu),e(Nu,Bse),e(Bse,Cvo),e(Nu,wvo),e(Nu,Fq),e(Fq,Avo),e(Nu,yvo),e(G,Lvo),e(G,ju),e(ju,Pse),e(Pse,xvo),e(ju,$vo),e(ju,Tq),e(Tq,kvo),e(ju,Svo),e(G,Rvo),e(G,Du),e(Du,Ise),e(Ise,Bvo),e(Du,Pvo),e(Du,Mq),e(Mq,Ivo),e(Du,qvo),e(G,Nvo),e(G,Gu),e(Gu,qse),e(qse,jvo),e(Gu,Dvo),e(Gu,Eq),e(Eq,Gvo),e(Gu,Ovo),e(G,Vvo),e(G,Ou),e(Ou,Nse),e(Nse,Xvo),e(Ou,zvo),e(Ou,Cq),e(Cq,Qvo),e(Ou,Wvo),e(G,Hvo),e(G,Vu),e(Vu,jse),e(jse,Uvo),e(Vu,Jvo),e(Vu,wq),e(wq,Yvo),e(Vu,Kvo),e(G,Zvo),e(G,Xu),e(Xu,Dse),e(Dse,eFo),e(Xu,oFo),e(Xu,Aq),e(Aq,rFo),e(Xu,tFo),e(G,aFo),e(G,zu),e(zu,Gse),e(Gse,nFo),e(zu,sFo),e(zu,yq),e(yq,lFo),e(zu,iFo),e(G,dFo),e(G,Qu),e(Qu,Ose),e(Ose,cFo),e(Qu,fFo),e(Qu,Lq),e(Lq,mFo),e(Qu,gFo),e(G,hFo),e(G,Wu),e(Wu,Vse),e(Vse,pFo),e(Wu,uFo),e(Wu,xq),e(xq,_Fo),e(Wu,bFo),e(G,vFo),e(G,Hu),e(Hu,Xse),e(Xse,FFo),e(Hu,TFo),e(Hu,$q),e($q,MFo),e(Hu,EFo),e(G,CFo),e(G,Uu),e(Uu,zse),e(zse,wFo),e(Uu,AFo),e(Uu,kq),e(kq,yFo),e(Uu,LFo),e(G,xFo),e(G,Ju),e(Ju,Qse),e(Qse,$Fo),e(Ju,kFo),e(Ju,Sq),e(Sq,SFo),e(Ju,RFo),e(G,BFo),e(G,Yu),e(Yu,Wse),e(Wse,PFo),e(Yu,IFo),e(Yu,Rq),e(Rq,qFo),e(Yu,NFo),e(G,jFo),e(G,Ku),e(Ku,Hse),e(Hse,DFo),e(Ku,GFo),e(Ku,Bq),e(Bq,OFo),e(Ku,VFo),e(G,XFo),e(G,Zu),e(Zu,Use),e(Use,zFo),e(Zu,QFo),e(Zu,Pq),e(Pq,WFo),e(Zu,HFo),e(G,UFo),e(G,e_),e(e_,Jse),e(Jse,JFo),e(e_,YFo),e(e_,Iq),e(Iq,KFo),e(e_,ZFo),e(G,e6o),e(G,o_),e(o_,Yse),e(Yse,o6o),e(o_,r6o),e(o_,qq),e(qq,t6o),e(o_,a6o),e(G,n6o),e(G,r_),e(r_,Kse),e(Kse,s6o),e(r_,l6o),e(r_,Nq),e(Nq,i6o),e(r_,d6o),e(G,c6o),e(G,t_),e(t_,Zse),e(Zse,f6o),e(t_,m6o),e(t_,jq),e(jq,g6o),e(t_,h6o),e(G,p6o),e(G,a_),e(a_,ele),e(ele,u6o),e(a_,_6o),e(a_,Dq),e(Dq,b6o),e(a_,v6o),e(G,F6o),e(G,n_),e(n_,ole),e(ole,T6o),e(n_,M6o),e(n_,Gq),e(Gq,E6o),e(n_,C6o),e(G,w6o),e(G,s_),e(s_,rle),e(rle,A6o),e(s_,y6o),e(s_,Oq),e(Oq,L6o),e(s_,x6o),e(G,$6o),e(G,l_),e(l_,tle),e(tle,k6o),e(l_,S6o),e(l_,Vq),e(Vq,R6o),e(l_,B6o),e(G,P6o),e(G,i_),e(i_,ale),e(ale,I6o),e(i_,q6o),e(i_,Xq),e(Xq,N6o),e(i_,j6o),e(G,D6o),e(G,d_),e(d_,nle),e(nle,G6o),e(d_,O6o),e(d_,zq),e(zq,V6o),e(d_,X6o),e(G,z6o),e(G,c_),e(c_,sle),e(sle,Q6o),e(c_,W6o),e(c_,Qq),e(Qq,H6o),e(c_,U6o),e(G,J6o),e(G,f_),e(f_,lle),e(lle,Y6o),e(f_,K6o),e(f_,Wq),e(Wq,Z6o),e(f_,eTo),e(Ue,oTo),e(Ue,m_),e(m_,rTo),e(m_,ile),e(ile,tTo),e(m_,aTo),e(m_,dle),e(dle,nTo),e(Ue,sTo),M(g_,Ue,null),b(f,cPe,_),b(f,Mi,_),e(Mi,h_),e(h_,cle),M(hA,cle,null),e(Mi,lTo),e(Mi,fle),e(fle,iTo),b(f,fPe,_),b(f,$o,_),M(pA,$o,null),e($o,dTo),e($o,Ei),e(Ei,cTo),e(Ei,Hq),e(Hq,fTo),e(Ei,mTo),e(Ei,Uq),e(Uq,gTo),e(Ei,hTo),e($o,pTo),e($o,uA),e(uA,uTo),e(uA,mle),e(mle,_To),e(uA,bTo),e($o,vTo),e($o,ot),M(_A,ot,null),e(ot,FTo),e(ot,gle),e(gle,TTo),e(ot,MTo),e(ot,Ci),e(Ci,ETo),e(Ci,hle),e(hle,CTo),e(Ci,wTo),e(Ci,Jq),e(Jq,ATo),e(Ci,yTo),e(ot,LTo),M(p_,ot,null),e($o,xTo),e($o,Je),M(bA,Je,null),e(Je,$To),e(Je,ple),e(ple,kTo),e(Je,STo),e(Je,wa),e(wa,RTo),e(wa,ule),e(ule,BTo),e(wa,PTo),e(wa,_le),e(_le,ITo),e(wa,qTo),e(wa,ble),e(ble,NTo),e(wa,jTo),e(Je,DTo),e(Je,z),e(z,u_),e(u_,vle),e(vle,GTo),e(u_,OTo),e(u_,Yq),e(Yq,VTo),e(u_,XTo),e(z,zTo),e(z,__),e(__,Fle),e(Fle,QTo),e(__,WTo),e(__,Kq),e(Kq,HTo),e(__,UTo),e(z,JTo),e(z,b_),e(b_,Tle),e(Tle,YTo),e(b_,KTo),e(b_,Zq),e(Zq,ZTo),e(b_,e7o),e(z,o7o),e(z,v_),e(v_,Mle),e(Mle,r7o),e(v_,t7o),e(v_,eN),e(eN,a7o),e(v_,n7o),e(z,s7o),e(z,F_),e(F_,Ele),e(Ele,l7o),e(F_,i7o),e(F_,oN),e(oN,d7o),e(F_,c7o),e(z,f7o),e(z,T_),e(T_,Cle),e(Cle,m7o),e(T_,g7o),e(T_,rN),e(rN,h7o),e(T_,p7o),e(z,u7o),e(z,M_),e(M_,wle),e(wle,_7o),e(M_,b7o),e(M_,tN),e(tN,v7o),e(M_,F7o),e(z,T7o),e(z,E_),e(E_,Ale),e(Ale,M7o),e(E_,E7o),e(E_,aN),e(aN,C7o),e(E_,w7o),e(z,A7o),e(z,C_),e(C_,yle),e(yle,y7o),e(C_,L7o),e(C_,nN),e(nN,x7o),e(C_,$7o),e(z,k7o),e(z,w_),e(w_,Lle),e(Lle,S7o),e(w_,R7o),e(w_,sN),e(sN,B7o),e(w_,P7o),e(z,I7o),e(z,A_),e(A_,xle),e(xle,q7o),e(A_,N7o),e(A_,lN),e(lN,j7o),e(A_,D7o),e(z,G7o),e(z,y_),e(y_,$le),e($le,O7o),e(y_,V7o),e(y_,iN),e(iN,X7o),e(y_,z7o),e(z,Q7o),e(z,L_),e(L_,kle),e(kle,W7o),e(L_,H7o),e(L_,dN),e(dN,U7o),e(L_,J7o),e(z,Y7o),e(z,x_),e(x_,Sle),e(Sle,K7o),e(x_,Z7o),e(x_,cN),e(cN,e9o),e(x_,o9o),e(z,r9o),e(z,$_),e($_,Rle),e(Rle,t9o),e($_,a9o),e($_,fN),e(fN,n9o),e($_,s9o),e(z,l9o),e(z,k_),e(k_,Ble),e(Ble,i9o),e(k_,d9o),e(k_,mN),e(mN,c9o),e(k_,f9o),e(z,m9o),e(z,S_),e(S_,Ple),e(Ple,g9o),e(S_,h9o),e(S_,gN),e(gN,p9o),e(S_,u9o),e(z,_9o),e(z,R_),e(R_,Ile),e(Ile,b9o),e(R_,v9o),e(R_,hN),e(hN,F9o),e(R_,T9o),e(z,M9o),e(z,B_),e(B_,qle),e(qle,E9o),e(B_,C9o),e(B_,pN),e(pN,w9o),e(B_,A9o),e(z,y9o),e(z,P_),e(P_,Nle),e(Nle,L9o),e(P_,x9o),e(P_,uN),e(uN,$9o),e(P_,k9o),e(z,S9o),e(z,I_),e(I_,jle),e(jle,R9o),e(I_,B9o),e(I_,_N),e(_N,P9o),e(I_,I9o),e(z,q9o),e(z,q_),e(q_,Dle),e(Dle,N9o),e(q_,j9o),e(q_,bN),e(bN,D9o),e(q_,G9o),e(z,O9o),e(z,N_),e(N_,Gle),e(Gle,V9o),e(N_,X9o),e(N_,vN),e(vN,z9o),e(N_,Q9o),e(z,W9o),e(z,j_),e(j_,Ole),e(Ole,H9o),e(j_,U9o),e(j_,FN),e(FN,J9o),e(j_,Y9o),e(z,K9o),e(z,D_),e(D_,Vle),e(Vle,Z9o),e(D_,eMo),e(D_,TN),e(TN,oMo),e(D_,rMo),e(z,tMo),e(z,G_),e(G_,Xle),e(Xle,aMo),e(G_,nMo),e(G_,MN),e(MN,sMo),e(G_,lMo),e(z,iMo),e(z,O_),e(O_,zle),e(zle,dMo),e(O_,cMo),e(O_,EN),e(EN,fMo),e(O_,mMo),e(z,gMo),e(z,V_),e(V_,Qle),e(Qle,hMo),e(V_,pMo),e(V_,CN),e(CN,uMo),e(V_,_Mo),e(z,bMo),e(z,X_),e(X_,Wle),e(Wle,vMo),e(X_,FMo),e(X_,wN),e(wN,TMo),e(X_,MMo),e(z,EMo),e(z,z_),e(z_,Hle),e(Hle,CMo),e(z_,wMo),e(z_,AN),e(AN,AMo),e(z_,yMo),e(z,LMo),e(z,Q_),e(Q_,Ule),e(Ule,xMo),e(Q_,$Mo),e(Q_,yN),e(yN,kMo),e(Q_,SMo),e(z,RMo),e(z,W_),e(W_,Jle),e(Jle,BMo),e(W_,PMo),e(W_,LN),e(LN,IMo),e(W_,qMo),e(z,NMo),e(z,H_),e(H_,Yle),e(Yle,jMo),e(H_,DMo),e(H_,xN),e(xN,GMo),e(H_,OMo),e(z,VMo),e(z,U_),e(U_,Kle),e(Kle,XMo),e(U_,zMo),e(U_,$N),e($N,QMo),e(U_,WMo),e(z,HMo),e(z,J_),e(J_,Zle),e(Zle,UMo),e(J_,JMo),e(J_,kN),e(kN,YMo),e(J_,KMo),e(Je,ZMo),e(Je,Y_),e(Y_,e4o),e(Y_,eie),e(eie,o4o),e(Y_,r4o),e(Y_,oie),e(oie,t4o),e(Je,a4o),M(K_,Je,null),b(f,mPe,_),b(f,wi,_),e(wi,Z_),e(Z_,rie),M(vA,rie,null),e(wi,n4o),e(wi,tie),e(tie,s4o),b(f,gPe,_),b(f,ko,_),M(FA,ko,null),e(ko,l4o),e(ko,Ai),e(Ai,i4o),e(Ai,SN),e(SN,d4o),e(Ai,c4o),e(Ai,RN),e(RN,f4o),e(Ai,m4o),e(ko,g4o),e(ko,TA),e(TA,h4o),e(TA,aie),e(aie,p4o),e(TA,u4o),e(ko,_4o),e(ko,rt),M(MA,rt,null),e(rt,b4o),e(rt,nie),e(nie,v4o),e(rt,F4o),e(rt,yi),e(yi,T4o),e(yi,sie),e(sie,M4o),e(yi,E4o),e(yi,BN),e(BN,C4o),e(yi,w4o),e(rt,A4o),M(e2,rt,null),e(ko,y4o),e(ko,Ye),M(EA,Ye,null),e(Ye,L4o),e(Ye,lie),e(lie,x4o),e(Ye,$4o),e(Ye,Aa),e(Aa,k4o),e(Aa,iie),e(iie,S4o),e(Aa,R4o),e(Aa,die),e(die,B4o),e(Aa,P4o),e(Aa,cie),e(cie,I4o),e(Aa,q4o),e(Ye,N4o),e(Ye,Q),e(Q,o2),e(o2,fie),e(fie,j4o),e(o2,D4o),e(o2,PN),e(PN,G4o),e(o2,O4o),e(Q,V4o),e(Q,r2),e(r2,mie),e(mie,X4o),e(r2,z4o),e(r2,IN),e(IN,Q4o),e(r2,W4o),e(Q,H4o),e(Q,t2),e(t2,gie),e(gie,U4o),e(t2,J4o),e(t2,qN),e(qN,Y4o),e(t2,K4o),e(Q,Z4o),e(Q,a2),e(a2,hie),e(hie,eEo),e(a2,oEo),e(a2,NN),e(NN,rEo),e(a2,tEo),e(Q,aEo),e(Q,n2),e(n2,pie),e(pie,nEo),e(n2,sEo),e(n2,jN),e(jN,lEo),e(n2,iEo),e(Q,dEo),e(Q,s2),e(s2,uie),e(uie,cEo),e(s2,fEo),e(s2,DN),e(DN,mEo),e(s2,gEo),e(Q,hEo),e(Q,l2),e(l2,_ie),e(_ie,pEo),e(l2,uEo),e(l2,GN),e(GN,_Eo),e(l2,bEo),e(Q,vEo),e(Q,i2),e(i2,bie),e(bie,FEo),e(i2,TEo),e(i2,ON),e(ON,MEo),e(i2,EEo),e(Q,CEo),e(Q,d2),e(d2,vie),e(vie,wEo),e(d2,AEo),e(d2,VN),e(VN,yEo),e(d2,LEo),e(Q,xEo),e(Q,c2),e(c2,Fie),e(Fie,$Eo),e(c2,kEo),e(c2,XN),e(XN,SEo),e(c2,REo),e(Q,BEo),e(Q,f2),e(f2,Tie),e(Tie,PEo),e(f2,IEo),e(f2,zN),e(zN,qEo),e(f2,NEo),e(Q,jEo),e(Q,m2),e(m2,Mie),e(Mie,DEo),e(m2,GEo),e(m2,QN),e(QN,OEo),e(m2,VEo),e(Q,XEo),e(Q,g2),e(g2,Eie),e(Eie,zEo),e(g2,QEo),e(g2,WN),e(WN,WEo),e(g2,HEo),e(Q,UEo),e(Q,h2),e(h2,Cie),e(Cie,JEo),e(h2,YEo),e(h2,HN),e(HN,KEo),e(h2,ZEo),e(Q,e5o),e(Q,p2),e(p2,wie),e(wie,o5o),e(p2,r5o),e(p2,UN),e(UN,t5o),e(p2,a5o),e(Q,n5o),e(Q,u2),e(u2,Aie),e(Aie,s5o),e(u2,l5o),e(u2,JN),e(JN,i5o),e(u2,d5o),e(Q,c5o),e(Q,_2),e(_2,yie),e(yie,f5o),e(_2,m5o),e(_2,YN),e(YN,g5o),e(_2,h5o),e(Q,p5o),e(Q,b2),e(b2,Lie),e(Lie,u5o),e(b2,_5o),e(b2,KN),e(KN,b5o),e(b2,v5o),e(Q,F5o),e(Q,v2),e(v2,xie),e(xie,T5o),e(v2,M5o),e(v2,ZN),e(ZN,E5o),e(v2,C5o),e(Q,w5o),e(Q,F2),e(F2,$ie),e($ie,A5o),e(F2,y5o),e(F2,ej),e(ej,L5o),e(F2,x5o),e(Q,$5o),e(Q,T2),e(T2,kie),e(kie,k5o),e(T2,S5o),e(T2,oj),e(oj,R5o),e(T2,B5o),e(Q,P5o),e(Q,M2),e(M2,Sie),e(Sie,I5o),e(M2,q5o),e(M2,rj),e(rj,N5o),e(M2,j5o),e(Q,D5o),e(Q,E2),e(E2,Rie),e(Rie,G5o),e(E2,O5o),e(E2,tj),e(tj,V5o),e(E2,X5o),e(Q,z5o),e(Q,C2),e(C2,Bie),e(Bie,Q5o),e(C2,W5o),e(C2,aj),e(aj,H5o),e(C2,U5o),e(Q,J5o),e(Q,w2),e(w2,Pie),e(Pie,Y5o),e(w2,K5o),e(w2,nj),e(nj,Z5o),e(w2,eCo),e(Q,oCo),e(Q,A2),e(A2,Iie),e(Iie,rCo),e(A2,tCo),e(A2,sj),e(sj,aCo),e(A2,nCo),e(Q,sCo),e(Q,y2),e(y2,qie),e(qie,lCo),e(y2,iCo),e(y2,lj),e(lj,dCo),e(y2,cCo),e(Q,fCo),e(Q,L2),e(L2,Nie),e(Nie,mCo),e(L2,gCo),e(L2,ij),e(ij,hCo),e(L2,pCo),e(Q,uCo),e(Q,x2),e(x2,jie),e(jie,_Co),e(x2,bCo),e(x2,dj),e(dj,vCo),e(x2,FCo),e(Q,TCo),e(Q,$2),e($2,Die),e(Die,MCo),e($2,ECo),e($2,cj),e(cj,CCo),e($2,wCo),e(Q,ACo),e(Q,k2),e(k2,Gie),e(Gie,yCo),e(k2,LCo),e(k2,Oie),e(Oie,xCo),e(k2,$Co),e(Q,kCo),e(Q,S2),e(S2,Vie),e(Vie,SCo),e(S2,RCo),e(S2,fj),e(fj,BCo),e(S2,PCo),e(Q,ICo),e(Q,R2),e(R2,Xie),e(Xie,qCo),e(R2,NCo),e(R2,mj),e(mj,jCo),e(R2,DCo),e(Q,GCo),e(Q,B2),e(B2,zie),e(zie,OCo),e(B2,VCo),e(B2,gj),e(gj,XCo),e(B2,zCo),e(Q,QCo),e(Q,P2),e(P2,Qie),e(Qie,WCo),e(P2,HCo),e(P2,hj),e(hj,UCo),e(P2,JCo),e(Ye,YCo),e(Ye,I2),e(I2,KCo),e(I2,Wie),e(Wie,ZCo),e(I2,e3o),e(I2,Hie),e(Hie,o3o),e(Ye,r3o),M(q2,Ye,null),b(f,hPe,_),b(f,Li,_),e(Li,N2),e(N2,Uie),M(CA,Uie,null),e(Li,t3o),e(Li,Jie),e(Jie,a3o),b(f,pPe,_),b(f,So,_),M(wA,So,null),e(So,n3o),e(So,xi),e(xi,s3o),e(xi,pj),e(pj,l3o),e(xi,i3o),e(xi,uj),e(uj,d3o),e(xi,c3o),e(So,f3o),e(So,AA),e(AA,m3o),e(AA,Yie),e(Yie,g3o),e(AA,h3o),e(So,p3o),e(So,tt),M(yA,tt,null),e(tt,u3o),e(tt,Kie),e(Kie,_3o),e(tt,b3o),e(tt,$i),e($i,v3o),e($i,Zie),e(Zie,F3o),e($i,T3o),e($i,_j),e(_j,M3o),e($i,E3o),e(tt,C3o),M(j2,tt,null),e(So,w3o),e(So,Ke),M(LA,Ke,null),e(Ke,A3o),e(Ke,ede),e(ede,y3o),e(Ke,L3o),e(Ke,ya),e(ya,x3o),e(ya,ode),e(ode,$3o),e(ya,k3o),e(ya,rde),e(rde,S3o),e(ya,R3o),e(ya,tde),e(tde,B3o),e(ya,P3o),e(Ke,I3o),e(Ke,he),e(he,D2),e(D2,ade),e(ade,q3o),e(D2,N3o),e(D2,bj),e(bj,j3o),e(D2,D3o),e(he,G3o),e(he,G2),e(G2,nde),e(nde,O3o),e(G2,V3o),e(G2,vj),e(vj,X3o),e(G2,z3o),e(he,Q3o),e(he,O2),e(O2,sde),e(sde,W3o),e(O2,H3o),e(O2,Fj),e(Fj,U3o),e(O2,J3o),e(he,Y3o),e(he,V2),e(V2,lde),e(lde,K3o),e(V2,Z3o),e(V2,Tj),e(Tj,ewo),e(V2,owo),e(he,rwo),e(he,X2),e(X2,ide),e(ide,two),e(X2,awo),e(X2,Mj),e(Mj,nwo),e(X2,swo),e(he,lwo),e(he,z2),e(z2,dde),e(dde,iwo),e(z2,dwo),e(z2,Ej),e(Ej,cwo),e(z2,fwo),e(he,mwo),e(he,Q2),e(Q2,cde),e(cde,gwo),e(Q2,hwo),e(Q2,Cj),e(Cj,pwo),e(Q2,uwo),e(he,_wo),e(he,W2),e(W2,fde),e(fde,bwo),e(W2,vwo),e(W2,wj),e(wj,Fwo),e(W2,Two),e(he,Mwo),e(he,H2),e(H2,mde),e(mde,Ewo),e(H2,Cwo),e(H2,Aj),e(Aj,wwo),e(H2,Awo),e(he,ywo),e(he,U2),e(U2,gde),e(gde,Lwo),e(U2,xwo),e(U2,yj),e(yj,$wo),e(U2,kwo),e(he,Swo),e(he,J2),e(J2,hde),e(hde,Rwo),e(J2,Bwo),e(J2,Lj),e(Lj,Pwo),e(J2,Iwo),e(he,qwo),e(he,Y2),e(Y2,pde),e(pde,Nwo),e(Y2,jwo),e(Y2,xj),e(xj,Dwo),e(Y2,Gwo),e(he,Owo),e(he,K2),e(K2,ude),e(ude,Vwo),e(K2,Xwo),e(K2,$j),e($j,zwo),e(K2,Qwo),e(he,Wwo),e(he,Z2),e(Z2,_de),e(_de,Hwo),e(Z2,Uwo),e(Z2,kj),e(kj,Jwo),e(Z2,Ywo),e(he,Kwo),e(he,e1),e(e1,bde),e(bde,Zwo),e(e1,eAo),e(e1,Sj),e(Sj,oAo),e(e1,rAo),e(he,tAo),e(he,o1),e(o1,vde),e(vde,aAo),e(o1,nAo),e(o1,Rj),e(Rj,sAo),e(o1,lAo),e(he,iAo),e(he,r1),e(r1,Fde),e(Fde,dAo),e(r1,cAo),e(r1,Bj),e(Bj,fAo),e(r1,mAo),e(he,gAo),e(he,t1),e(t1,Tde),e(Tde,hAo),e(t1,pAo),e(t1,Pj),e(Pj,uAo),e(t1,_Ao),e(Ke,bAo),e(Ke,a1),e(a1,vAo),e(a1,Mde),e(Mde,FAo),e(a1,TAo),e(a1,Ede),e(Ede,MAo),e(Ke,EAo),M(n1,Ke,null),b(f,uPe,_),b(f,ki,_),e(ki,s1),e(s1,Cde),M(xA,Cde,null),e(ki,CAo),e(ki,wde),e(wde,wAo),b(f,_Pe,_),b(f,Ro,_),M($A,Ro,null),e(Ro,AAo),e(Ro,Si),e(Si,yAo),e(Si,Ij),e(Ij,LAo),e(Si,xAo),e(Si,qj),e(qj,$Ao),e(Si,kAo),e(Ro,SAo),e(Ro,kA),e(kA,RAo),e(kA,Ade),e(Ade,BAo),e(kA,PAo),e(Ro,IAo),e(Ro,at),M(SA,at,null),e(at,qAo),e(at,yde),e(yde,NAo),e(at,jAo),e(at,Ri),e(Ri,DAo),e(Ri,Lde),e(Lde,GAo),e(Ri,OAo),e(Ri,Nj),e(Nj,VAo),e(Ri,XAo),e(at,zAo),M(l1,at,null),e(Ro,QAo),e(Ro,Ze),M(RA,Ze,null),e(Ze,WAo),e(Ze,xde),e(xde,HAo),e(Ze,UAo),e(Ze,La),e(La,JAo),e(La,$de),e($de,YAo),e(La,KAo),e(La,kde),e(kde,ZAo),e(La,e0o),e(La,Sde),e(Sde,o0o),e(La,r0o),e(Ze,t0o),e(Ze,q),e(q,i1),e(i1,Rde),e(Rde,a0o),e(i1,n0o),e(i1,jj),e(jj,s0o),e(i1,l0o),e(q,i0o),e(q,d1),e(d1,Bde),e(Bde,d0o),e(d1,c0o),e(d1,Dj),e(Dj,f0o),e(d1,m0o),e(q,g0o),e(q,c1),e(c1,Pde),e(Pde,h0o),e(c1,p0o),e(c1,Gj),e(Gj,u0o),e(c1,_0o),e(q,b0o),e(q,f1),e(f1,Ide),e(Ide,v0o),e(f1,F0o),e(f1,Oj),e(Oj,T0o),e(f1,M0o),e(q,E0o),e(q,m1),e(m1,qde),e(qde,C0o),e(m1,w0o),e(m1,Vj),e(Vj,A0o),e(m1,y0o),e(q,L0o),e(q,g1),e(g1,Nde),e(Nde,x0o),e(g1,$0o),e(g1,Xj),e(Xj,k0o),e(g1,S0o),e(q,R0o),e(q,h1),e(h1,jde),e(jde,B0o),e(h1,P0o),e(h1,zj),e(zj,I0o),e(h1,q0o),e(q,N0o),e(q,p1),e(p1,Dde),e(Dde,j0o),e(p1,D0o),e(p1,Qj),e(Qj,G0o),e(p1,O0o),e(q,V0o),e(q,u1),e(u1,Gde),e(Gde,X0o),e(u1,z0o),e(u1,Wj),e(Wj,Q0o),e(u1,W0o),e(q,H0o),e(q,_1),e(_1,Ode),e(Ode,U0o),e(_1,J0o),e(_1,Hj),e(Hj,Y0o),e(_1,K0o),e(q,Z0o),e(q,b1),e(b1,Vde),e(Vde,eyo),e(b1,oyo),e(b1,Uj),e(Uj,ryo),e(b1,tyo),e(q,ayo),e(q,v1),e(v1,Xde),e(Xde,nyo),e(v1,syo),e(v1,Jj),e(Jj,lyo),e(v1,iyo),e(q,dyo),e(q,F1),e(F1,zde),e(zde,cyo),e(F1,fyo),e(F1,Yj),e(Yj,myo),e(F1,gyo),e(q,hyo),e(q,T1),e(T1,Qde),e(Qde,pyo),e(T1,uyo),e(T1,Kj),e(Kj,_yo),e(T1,byo),e(q,vyo),e(q,M1),e(M1,Wde),e(Wde,Fyo),e(M1,Tyo),e(M1,Zj),e(Zj,Myo),e(M1,Eyo),e(q,Cyo),e(q,E1),e(E1,Hde),e(Hde,wyo),e(E1,Ayo),e(E1,eD),e(eD,yyo),e(E1,Lyo),e(q,xyo),e(q,C1),e(C1,Ude),e(Ude,$yo),e(C1,kyo),e(C1,oD),e(oD,Syo),e(C1,Ryo),e(q,Byo),e(q,w1),e(w1,Jde),e(Jde,Pyo),e(w1,Iyo),e(w1,rD),e(rD,qyo),e(w1,Nyo),e(q,jyo),e(q,A1),e(A1,Yde),e(Yde,Dyo),e(A1,Gyo),e(A1,tD),e(tD,Oyo),e(A1,Vyo),e(q,Xyo),e(q,y1),e(y1,Kde),e(Kde,zyo),e(y1,Qyo),e(y1,aD),e(aD,Wyo),e(y1,Hyo),e(q,Uyo),e(q,L1),e(L1,Zde),e(Zde,Jyo),e(L1,Yyo),e(L1,nD),e(nD,Kyo),e(L1,Zyo),e(q,eLo),e(q,x1),e(x1,ece),e(ece,oLo),e(x1,rLo),e(x1,sD),e(sD,tLo),e(x1,aLo),e(q,nLo),e(q,$1),e($1,oce),e(oce,sLo),e($1,lLo),e($1,lD),e(lD,iLo),e($1,dLo),e(q,cLo),e(q,k1),e(k1,rce),e(rce,fLo),e(k1,mLo),e(k1,iD),e(iD,gLo),e(k1,hLo),e(q,pLo),e(q,S1),e(S1,tce),e(tce,uLo),e(S1,_Lo),e(S1,dD),e(dD,bLo),e(S1,vLo),e(q,FLo),e(q,R1),e(R1,ace),e(ace,TLo),e(R1,MLo),e(R1,cD),e(cD,ELo),e(R1,CLo),e(q,wLo),e(q,B1),e(B1,nce),e(nce,ALo),e(B1,yLo),e(B1,fD),e(fD,LLo),e(B1,xLo),e(q,$Lo),e(q,P1),e(P1,sce),e(sce,kLo),e(P1,SLo),e(P1,mD),e(mD,RLo),e(P1,BLo),e(q,PLo),e(q,I1),e(I1,lce),e(lce,ILo),e(I1,qLo),e(I1,gD),e(gD,NLo),e(I1,jLo),e(q,DLo),e(q,q1),e(q1,ice),e(ice,GLo),e(q1,OLo),e(q1,hD),e(hD,VLo),e(q1,XLo),e(q,zLo),e(q,N1),e(N1,dce),e(dce,QLo),e(N1,WLo),e(N1,pD),e(pD,HLo),e(N1,ULo),e(q,JLo),e(q,j1),e(j1,cce),e(cce,YLo),e(j1,KLo),e(j1,uD),e(uD,ZLo),e(j1,e8o),e(q,o8o),e(q,D1),e(D1,fce),e(fce,r8o),e(D1,t8o),e(D1,_D),e(_D,a8o),e(D1,n8o),e(q,s8o),e(q,G1),e(G1,mce),e(mce,l8o),e(G1,i8o),e(G1,bD),e(bD,d8o),e(G1,c8o),e(q,f8o),e(q,O1),e(O1,gce),e(gce,m8o),e(O1,g8o),e(O1,vD),e(vD,h8o),e(O1,p8o),e(q,u8o),e(q,V1),e(V1,hce),e(hce,_8o),e(V1,b8o),e(V1,FD),e(FD,v8o),e(V1,F8o),e(q,T8o),e(q,X1),e(X1,pce),e(pce,M8o),e(X1,E8o),e(X1,TD),e(TD,C8o),e(X1,w8o),e(q,A8o),e(q,z1),e(z1,uce),e(uce,y8o),e(z1,L8o),e(z1,MD),e(MD,x8o),e(z1,$8o),e(q,k8o),e(q,Q1),e(Q1,_ce),e(_ce,S8o),e(Q1,R8o),e(Q1,ED),e(ED,B8o),e(Q1,P8o),e(q,I8o),e(q,W1),e(W1,bce),e(bce,q8o),e(W1,N8o),e(W1,CD),e(CD,j8o),e(W1,D8o),e(q,G8o),e(q,H1),e(H1,vce),e(vce,O8o),e(H1,V8o),e(H1,wD),e(wD,X8o),e(H1,z8o),e(q,Q8o),e(q,U1),e(U1,Fce),e(Fce,W8o),e(U1,H8o),e(U1,AD),e(AD,U8o),e(U1,J8o),e(q,Y8o),e(q,J1),e(J1,Tce),e(Tce,K8o),e(J1,Z8o),e(J1,yD),e(yD,exo),e(J1,oxo),e(q,rxo),e(q,Y1),e(Y1,Mce),e(Mce,txo),e(Y1,axo),e(Y1,LD),e(LD,nxo),e(Y1,sxo),e(q,lxo),e(q,K1),e(K1,Ece),e(Ece,ixo),e(K1,dxo),e(K1,xD),e(xD,cxo),e(K1,fxo),e(q,mxo),e(q,Z1),e(Z1,Cce),e(Cce,gxo),e(Z1,hxo),e(Z1,$D),e($D,pxo),e(Z1,uxo),e(q,_xo),e(q,eb),e(eb,wce),e(wce,bxo),e(eb,vxo),e(eb,kD),e(kD,Fxo),e(eb,Txo),e(Ze,Mxo),e(Ze,ob),e(ob,Exo),e(ob,Ace),e(Ace,Cxo),e(ob,wxo),e(ob,yce),e(yce,Axo),e(Ze,yxo),M(rb,Ze,null),b(f,bPe,_),b(f,Bi,_),e(Bi,tb),e(tb,Lce),M(BA,Lce,null),e(Bi,Lxo),e(Bi,xce),e(xce,xxo),b(f,vPe,_),b(f,Bo,_),M(PA,Bo,null),e(Bo,$xo),e(Bo,Pi),e(Pi,kxo),e(Pi,SD),e(SD,Sxo),e(Pi,Rxo),e(Pi,RD),e(RD,Bxo),e(Pi,Pxo),e(Bo,Ixo),e(Bo,IA),e(IA,qxo),e(IA,$ce),e($ce,Nxo),e(IA,jxo),e(Bo,Dxo),e(Bo,nt),M(qA,nt,null),e(nt,Gxo),e(nt,kce),e(kce,Oxo),e(nt,Vxo),e(nt,Ii),e(Ii,Xxo),e(Ii,Sce),e(Sce,zxo),e(Ii,Qxo),e(Ii,BD),e(BD,Wxo),e(Ii,Hxo),e(nt,Uxo),M(ab,nt,null),e(Bo,Jxo),e(Bo,eo),M(NA,eo,null),e(eo,Yxo),e(eo,Rce),e(Rce,Kxo),e(eo,Zxo),e(eo,xa),e(xa,e$o),e(xa,Bce),e(Bce,o$o),e(xa,r$o),e(xa,Pce),e(Pce,t$o),e(xa,a$o),e(xa,Ice),e(Ice,n$o),e(xa,s$o),e(eo,l$o),e(eo,Y),e(Y,nb),e(nb,qce),e(qce,i$o),e(nb,d$o),e(nb,PD),e(PD,c$o),e(nb,f$o),e(Y,m$o),e(Y,sb),e(sb,Nce),e(Nce,g$o),e(sb,h$o),e(sb,ID),e(ID,p$o),e(sb,u$o),e(Y,_$o),e(Y,lb),e(lb,jce),e(jce,b$o),e(lb,v$o),e(lb,qD),e(qD,F$o),e(lb,T$o),e(Y,M$o),e(Y,ib),e(ib,Dce),e(Dce,E$o),e(ib,C$o),e(ib,ND),e(ND,w$o),e(ib,A$o),e(Y,y$o),e(Y,db),e(db,Gce),e(Gce,L$o),e(db,x$o),e(db,jD),e(jD,$$o),e(db,k$o),e(Y,S$o),e(Y,cb),e(cb,Oce),e(Oce,R$o),e(cb,B$o),e(cb,DD),e(DD,P$o),e(cb,I$o),e(Y,q$o),e(Y,fb),e(fb,Vce),e(Vce,N$o),e(fb,j$o),e(fb,GD),e(GD,D$o),e(fb,G$o),e(Y,O$o),e(Y,mb),e(mb,Xce),e(Xce,V$o),e(mb,X$o),e(mb,OD),e(OD,z$o),e(mb,Q$o),e(Y,W$o),e(Y,gb),e(gb,zce),e(zce,H$o),e(gb,U$o),e(gb,VD),e(VD,J$o),e(gb,Y$o),e(Y,K$o),e(Y,hb),e(hb,Qce),e(Qce,Z$o),e(hb,eko),e(hb,XD),e(XD,oko),e(hb,rko),e(Y,tko),e(Y,pb),e(pb,Wce),e(Wce,ako),e(pb,nko),e(pb,zD),e(zD,sko),e(pb,lko),e(Y,iko),e(Y,ub),e(ub,Hce),e(Hce,dko),e(ub,cko),e(ub,QD),e(QD,fko),e(ub,mko),e(Y,gko),e(Y,_b),e(_b,Uce),e(Uce,hko),e(_b,pko),e(_b,WD),e(WD,uko),e(_b,_ko),e(Y,bko),e(Y,bb),e(bb,Jce),e(Jce,vko),e(bb,Fko),e(bb,HD),e(HD,Tko),e(bb,Mko),e(Y,Eko),e(Y,vb),e(vb,Yce),e(Yce,Cko),e(vb,wko),e(vb,UD),e(UD,Ako),e(vb,yko),e(Y,Lko),e(Y,Fb),e(Fb,Kce),e(Kce,xko),e(Fb,$ko),e(Fb,JD),e(JD,kko),e(Fb,Sko),e(Y,Rko),e(Y,Tb),e(Tb,Zce),e(Zce,Bko),e(Tb,Pko),e(Tb,YD),e(YD,Iko),e(Tb,qko),e(Y,Nko),e(Y,Mb),e(Mb,efe),e(efe,jko),e(Mb,Dko),e(Mb,KD),e(KD,Gko),e(Mb,Oko),e(Y,Vko),e(Y,Eb),e(Eb,ofe),e(ofe,Xko),e(Eb,zko),e(Eb,ZD),e(ZD,Qko),e(Eb,Wko),e(Y,Hko),e(Y,Cb),e(Cb,rfe),e(rfe,Uko),e(Cb,Jko),e(Cb,eG),e(eG,Yko),e(Cb,Kko),e(Y,Zko),e(Y,wb),e(wb,tfe),e(tfe,eSo),e(wb,oSo),e(wb,oG),e(oG,rSo),e(wb,tSo),e(Y,aSo),e(Y,Ab),e(Ab,afe),e(afe,nSo),e(Ab,sSo),e(Ab,rG),e(rG,lSo),e(Ab,iSo),e(Y,dSo),e(Y,yb),e(yb,nfe),e(nfe,cSo),e(yb,fSo),e(yb,tG),e(tG,mSo),e(yb,gSo),e(Y,hSo),e(Y,Lb),e(Lb,sfe),e(sfe,pSo),e(Lb,uSo),e(Lb,aG),e(aG,_So),e(Lb,bSo),e(Y,vSo),e(Y,xb),e(xb,lfe),e(lfe,FSo),e(xb,TSo),e(xb,nG),e(nG,MSo),e(xb,ESo),e(Y,CSo),e(Y,$b),e($b,ife),e(ife,wSo),e($b,ASo),e($b,sG),e(sG,ySo),e($b,LSo),e(Y,xSo),e(Y,kb),e(kb,dfe),e(dfe,$So),e(kb,kSo),e(kb,lG),e(lG,SSo),e(kb,RSo),e(Y,BSo),e(Y,Sb),e(Sb,cfe),e(cfe,PSo),e(Sb,ISo),e(Sb,iG),e(iG,qSo),e(Sb,NSo),e(eo,jSo),e(eo,Rb),e(Rb,DSo),e(Rb,ffe),e(ffe,GSo),e(Rb,OSo),e(Rb,mfe),e(mfe,VSo),e(eo,XSo),M(Bb,eo,null),b(f,FPe,_),b(f,qi,_),e(qi,Pb),e(Pb,gfe),M(jA,gfe,null),e(qi,zSo),e(qi,hfe),e(hfe,QSo),b(f,TPe,_),b(f,Po,_),M(DA,Po,null),e(Po,WSo),e(Po,Ni),e(Ni,HSo),e(Ni,dG),e(dG,USo),e(Ni,JSo),e(Ni,cG),e(cG,YSo),e(Ni,KSo),e(Po,ZSo),e(Po,GA),e(GA,eRo),e(GA,pfe),e(pfe,oRo),e(GA,rRo),e(Po,tRo),e(Po,st),M(OA,st,null),e(st,aRo),e(st,ufe),e(ufe,nRo),e(st,sRo),e(st,ji),e(ji,lRo),e(ji,_fe),e(_fe,iRo),e(ji,dRo),e(ji,fG),e(fG,cRo),e(ji,fRo),e(st,mRo),M(Ib,st,null),e(Po,gRo),e(Po,oo),M(VA,oo,null),e(oo,hRo),e(oo,bfe),e(bfe,pRo),e(oo,uRo),e(oo,$a),e($a,_Ro),e($a,vfe),e(vfe,bRo),e($a,vRo),e($a,Ffe),e(Ffe,FRo),e($a,TRo),e($a,Tfe),e(Tfe,MRo),e($a,ERo),e(oo,CRo),e(oo,Ur),e(Ur,qb),e(qb,Mfe),e(Mfe,wRo),e(qb,ARo),e(qb,mG),e(mG,yRo),e(qb,LRo),e(Ur,xRo),e(Ur,Nb),e(Nb,Efe),e(Efe,$Ro),e(Nb,kRo),e(Nb,gG),e(gG,SRo),e(Nb,RRo),e(Ur,BRo),e(Ur,jb),e(jb,Cfe),e(Cfe,PRo),e(jb,IRo),e(jb,hG),e(hG,qRo),e(jb,NRo),e(Ur,jRo),e(Ur,Db),e(Db,wfe),e(wfe,DRo),e(Db,GRo),e(Db,pG),e(pG,ORo),e(Db,VRo),e(Ur,XRo),e(Ur,Gb),e(Gb,Afe),e(Afe,zRo),e(Gb,QRo),e(Gb,uG),e(uG,WRo),e(Gb,HRo),e(oo,URo),e(oo,Ob),e(Ob,JRo),e(Ob,yfe),e(yfe,YRo),e(Ob,KRo),e(Ob,Lfe),e(Lfe,ZRo),e(oo,eBo),M(Vb,oo,null),b(f,MPe,_),b(f,Di,_),e(Di,Xb),e(Xb,xfe),M(XA,xfe,null),e(Di,oBo),e(Di,$fe),e($fe,rBo),b(f,EPe,_),b(f,Io,_),M(zA,Io,null),e(Io,tBo),e(Io,Gi),e(Gi,aBo),e(Gi,_G),e(_G,nBo),e(Gi,sBo),e(Gi,bG),e(bG,lBo),e(Gi,iBo),e(Io,dBo),e(Io,QA),e(QA,cBo),e(QA,kfe),e(kfe,fBo),e(QA,mBo),e(Io,gBo),e(Io,lt),M(WA,lt,null),e(lt,hBo),e(lt,Sfe),e(Sfe,pBo),e(lt,uBo),e(lt,Oi),e(Oi,_Bo),e(Oi,Rfe),e(Rfe,bBo),e(Oi,vBo),e(Oi,vG),e(vG,FBo),e(Oi,TBo),e(lt,MBo),M(zb,lt,null),e(Io,EBo),e(Io,ro),M(HA,ro,null),e(ro,CBo),e(ro,Bfe),e(Bfe,wBo),e(ro,ABo),e(ro,ka),e(ka,yBo),e(ka,Pfe),e(Pfe,LBo),e(ka,xBo),e(ka,Ife),e(Ife,$Bo),e(ka,kBo),e(ka,qfe),e(qfe,SBo),e(ka,RBo),e(ro,BBo),e(ro,U),e(U,Qb),e(Qb,Nfe),e(Nfe,PBo),e(Qb,IBo),e(Qb,FG),e(FG,qBo),e(Qb,NBo),e(U,jBo),e(U,Wb),e(Wb,jfe),e(jfe,DBo),e(Wb,GBo),e(Wb,TG),e(TG,OBo),e(Wb,VBo),e(U,XBo),e(U,Hb),e(Hb,Dfe),e(Dfe,zBo),e(Hb,QBo),e(Hb,MG),e(MG,WBo),e(Hb,HBo),e(U,UBo),e(U,Ub),e(Ub,Gfe),e(Gfe,JBo),e(Ub,YBo),e(Ub,EG),e(EG,KBo),e(Ub,ZBo),e(U,ePo),e(U,Jb),e(Jb,Ofe),e(Ofe,oPo),e(Jb,rPo),e(Jb,CG),e(CG,tPo),e(Jb,aPo),e(U,nPo),e(U,Yb),e(Yb,Vfe),e(Vfe,sPo),e(Yb,lPo),e(Yb,wG),e(wG,iPo),e(Yb,dPo),e(U,cPo),e(U,Kb),e(Kb,Xfe),e(Xfe,fPo),e(Kb,mPo),e(Kb,AG),e(AG,gPo),e(Kb,hPo),e(U,pPo),e(U,Zb),e(Zb,zfe),e(zfe,uPo),e(Zb,_Po),e(Zb,yG),e(yG,bPo),e(Zb,vPo),e(U,FPo),e(U,ev),e(ev,Qfe),e(Qfe,TPo),e(ev,MPo),e(ev,LG),e(LG,EPo),e(ev,CPo),e(U,wPo),e(U,ov),e(ov,Wfe),e(Wfe,APo),e(ov,yPo),e(ov,xG),e(xG,LPo),e(ov,xPo),e(U,$Po),e(U,rv),e(rv,Hfe),e(Hfe,kPo),e(rv,SPo),e(rv,$G),e($G,RPo),e(rv,BPo),e(U,PPo),e(U,tv),e(tv,Ufe),e(Ufe,IPo),e(tv,qPo),e(tv,kG),e(kG,NPo),e(tv,jPo),e(U,DPo),e(U,av),e(av,Jfe),e(Jfe,GPo),e(av,OPo),e(av,SG),e(SG,VPo),e(av,XPo),e(U,zPo),e(U,nv),e(nv,Yfe),e(Yfe,QPo),e(nv,WPo),e(nv,RG),e(RG,HPo),e(nv,UPo),e(U,JPo),e(U,sv),e(sv,Kfe),e(Kfe,YPo),e(sv,KPo),e(sv,BG),e(BG,ZPo),e(sv,eIo),e(U,oIo),e(U,lv),e(lv,Zfe),e(Zfe,rIo),e(lv,tIo),e(lv,PG),e(PG,aIo),e(lv,nIo),e(U,sIo),e(U,iv),e(iv,eme),e(eme,lIo),e(iv,iIo),e(iv,IG),e(IG,dIo),e(iv,cIo),e(U,fIo),e(U,dv),e(dv,ome),e(ome,mIo),e(dv,gIo),e(dv,qG),e(qG,hIo),e(dv,pIo),e(U,uIo),e(U,cv),e(cv,rme),e(rme,_Io),e(cv,bIo),e(cv,NG),e(NG,vIo),e(cv,FIo),e(U,TIo),e(U,fv),e(fv,tme),e(tme,MIo),e(fv,EIo),e(fv,jG),e(jG,CIo),e(fv,wIo),e(U,AIo),e(U,mv),e(mv,ame),e(ame,yIo),e(mv,LIo),e(mv,DG),e(DG,xIo),e(mv,$Io),e(U,kIo),e(U,gv),e(gv,nme),e(nme,SIo),e(gv,RIo),e(gv,GG),e(GG,BIo),e(gv,PIo),e(U,IIo),e(U,hv),e(hv,sme),e(sme,qIo),e(hv,NIo),e(hv,OG),e(OG,jIo),e(hv,DIo),e(U,GIo),e(U,pv),e(pv,lme),e(lme,OIo),e(pv,VIo),e(pv,VG),e(VG,XIo),e(pv,zIo),e(U,QIo),e(U,uv),e(uv,ime),e(ime,WIo),e(uv,HIo),e(uv,XG),e(XG,UIo),e(uv,JIo),e(U,YIo),e(U,_v),e(_v,dme),e(dme,KIo),e(_v,ZIo),e(_v,zG),e(zG,eqo),e(_v,oqo),e(U,rqo),e(U,bv),e(bv,cme),e(cme,tqo),e(bv,aqo),e(bv,QG),e(QG,nqo),e(bv,sqo),e(U,lqo),e(U,vv),e(vv,fme),e(fme,iqo),e(vv,dqo),e(vv,WG),e(WG,cqo),e(vv,fqo),e(U,mqo),e(U,Fv),e(Fv,mme),e(mme,gqo),e(Fv,hqo),e(Fv,HG),e(HG,pqo),e(Fv,uqo),e(U,_qo),e(U,Tv),e(Tv,gme),e(gme,bqo),e(Tv,vqo),e(Tv,UG),e(UG,Fqo),e(Tv,Tqo),e(U,Mqo),e(U,Mv),e(Mv,hme),e(hme,Eqo),e(Mv,Cqo),e(Mv,JG),e(JG,wqo),e(Mv,Aqo),e(U,yqo),e(U,Ev),e(Ev,pme),e(pme,Lqo),e(Ev,xqo),e(Ev,YG),e(YG,$qo),e(Ev,kqo),e(U,Sqo),e(U,Cv),e(Cv,ume),e(ume,Rqo),e(Cv,Bqo),e(Cv,KG),e(KG,Pqo),e(Cv,Iqo),e(ro,qqo),e(ro,wv),e(wv,Nqo),e(wv,_me),e(_me,jqo),e(wv,Dqo),e(wv,bme),e(bme,Gqo),e(ro,Oqo),M(Av,ro,null),b(f,CPe,_),b(f,Vi,_),e(Vi,yv),e(yv,vme),M(UA,vme,null),e(Vi,Vqo),e(Vi,Fme),e(Fme,Xqo),b(f,wPe,_),b(f,qo,_),M(JA,qo,null),e(qo,zqo),e(qo,Xi),e(Xi,Qqo),e(Xi,ZG),e(ZG,Wqo),e(Xi,Hqo),e(Xi,eO),e(eO,Uqo),e(Xi,Jqo),e(qo,Yqo),e(qo,YA),e(YA,Kqo),e(YA,Tme),e(Tme,Zqo),e(YA,eNo),e(qo,oNo),e(qo,it),M(KA,it,null),e(it,rNo),e(it,Mme),e(Mme,tNo),e(it,aNo),e(it,zi),e(zi,nNo),e(zi,Eme),e(Eme,sNo),e(zi,lNo),e(zi,oO),e(oO,iNo),e(zi,dNo),e(it,cNo),M(Lv,it,null),e(qo,fNo),e(qo,to),M(ZA,to,null),e(to,mNo),e(to,Cme),e(Cme,gNo),e(to,hNo),e(to,Sa),e(Sa,pNo),e(Sa,wme),e(wme,uNo),e(Sa,_No),e(Sa,Ame),e(Ame,bNo),e(Sa,vNo),e(Sa,yme),e(yme,FNo),e(Sa,TNo),e(to,MNo),e(to,O),e(O,xv),e(xv,Lme),e(Lme,ENo),e(xv,CNo),e(xv,rO),e(rO,wNo),e(xv,ANo),e(O,yNo),e(O,$v),e($v,xme),e(xme,LNo),e($v,xNo),e($v,tO),e(tO,$No),e($v,kNo),e(O,SNo),e(O,kv),e(kv,$me),e($me,RNo),e(kv,BNo),e(kv,aO),e(aO,PNo),e(kv,INo),e(O,qNo),e(O,Sv),e(Sv,kme),e(kme,NNo),e(Sv,jNo),e(Sv,nO),e(nO,DNo),e(Sv,GNo),e(O,ONo),e(O,Rv),e(Rv,Sme),e(Sme,VNo),e(Rv,XNo),e(Rv,sO),e(sO,zNo),e(Rv,QNo),e(O,WNo),e(O,Bv),e(Bv,Rme),e(Rme,HNo),e(Bv,UNo),e(Bv,lO),e(lO,JNo),e(Bv,YNo),e(O,KNo),e(O,Pv),e(Pv,Bme),e(Bme,ZNo),e(Pv,ejo),e(Pv,iO),e(iO,ojo),e(Pv,rjo),e(O,tjo),e(O,Iv),e(Iv,Pme),e(Pme,ajo),e(Iv,njo),e(Iv,dO),e(dO,sjo),e(Iv,ljo),e(O,ijo),e(O,qv),e(qv,Ime),e(Ime,djo),e(qv,cjo),e(qv,cO),e(cO,fjo),e(qv,mjo),e(O,gjo),e(O,Nv),e(Nv,qme),e(qme,hjo),e(Nv,pjo),e(Nv,fO),e(fO,ujo),e(Nv,_jo),e(O,bjo),e(O,jv),e(jv,Nme),e(Nme,vjo),e(jv,Fjo),e(jv,mO),e(mO,Tjo),e(jv,Mjo),e(O,Ejo),e(O,Dv),e(Dv,jme),e(jme,Cjo),e(Dv,wjo),e(Dv,gO),e(gO,Ajo),e(Dv,yjo),e(O,Ljo),e(O,Gv),e(Gv,Dme),e(Dme,xjo),e(Gv,$jo),e(Gv,hO),e(hO,kjo),e(Gv,Sjo),e(O,Rjo),e(O,Ov),e(Ov,Gme),e(Gme,Bjo),e(Ov,Pjo),e(Ov,pO),e(pO,Ijo),e(Ov,qjo),e(O,Njo),e(O,Vv),e(Vv,Ome),e(Ome,jjo),e(Vv,Djo),e(Vv,uO),e(uO,Gjo),e(Vv,Ojo),e(O,Vjo),e(O,Xv),e(Xv,Vme),e(Vme,Xjo),e(Xv,zjo),e(Xv,_O),e(_O,Qjo),e(Xv,Wjo),e(O,Hjo),e(O,zv),e(zv,Xme),e(Xme,Ujo),e(zv,Jjo),e(zv,bO),e(bO,Yjo),e(zv,Kjo),e(O,Zjo),e(O,Qv),e(Qv,zme),e(zme,eDo),e(Qv,oDo),e(Qv,vO),e(vO,rDo),e(Qv,tDo),e(O,aDo),e(O,Wv),e(Wv,Qme),e(Qme,nDo),e(Wv,sDo),e(Wv,FO),e(FO,lDo),e(Wv,iDo),e(O,dDo),e(O,Hv),e(Hv,Wme),e(Wme,cDo),e(Hv,fDo),e(Hv,TO),e(TO,mDo),e(Hv,gDo),e(O,hDo),e(O,Uv),e(Uv,Hme),e(Hme,pDo),e(Uv,uDo),e(Uv,MO),e(MO,_Do),e(Uv,bDo),e(O,vDo),e(O,Jv),e(Jv,Ume),e(Ume,FDo),e(Jv,TDo),e(Jv,EO),e(EO,MDo),e(Jv,EDo),e(O,CDo),e(O,Yv),e(Yv,Jme),e(Jme,wDo),e(Yv,ADo),e(Yv,CO),e(CO,yDo),e(Yv,LDo),e(O,xDo),e(O,Kv),e(Kv,Yme),e(Yme,$Do),e(Kv,kDo),e(Kv,wO),e(wO,SDo),e(Kv,RDo),e(O,BDo),e(O,Zv),e(Zv,Kme),e(Kme,PDo),e(Zv,IDo),e(Zv,AO),e(AO,qDo),e(Zv,NDo),e(O,jDo),e(O,eF),e(eF,Zme),e(Zme,DDo),e(eF,GDo),e(eF,yO),e(yO,ODo),e(eF,VDo),e(O,XDo),e(O,oF),e(oF,ege),e(ege,zDo),e(oF,QDo),e(oF,LO),e(LO,WDo),e(oF,HDo),e(O,UDo),e(O,rF),e(rF,oge),e(oge,JDo),e(rF,YDo),e(rF,xO),e(xO,KDo),e(rF,ZDo),e(O,eGo),e(O,tF),e(tF,rge),e(rge,oGo),e(tF,rGo),e(tF,$O),e($O,tGo),e(tF,aGo),e(O,nGo),e(O,aF),e(aF,tge),e(tge,sGo),e(aF,lGo),e(aF,kO),e(kO,iGo),e(aF,dGo),e(O,cGo),e(O,nF),e(nF,age),e(age,fGo),e(nF,mGo),e(nF,SO),e(SO,gGo),e(nF,hGo),e(O,pGo),e(O,sF),e(sF,nge),e(nge,uGo),e(sF,_Go),e(sF,RO),e(RO,bGo),e(sF,vGo),e(O,FGo),e(O,lF),e(lF,sge),e(sge,TGo),e(lF,MGo),e(lF,BO),e(BO,EGo),e(lF,CGo),e(O,wGo),e(O,iF),e(iF,lge),e(lge,AGo),e(iF,yGo),e(iF,PO),e(PO,LGo),e(iF,xGo),e(O,$Go),e(O,dF),e(dF,ige),e(ige,kGo),e(dF,SGo),e(dF,IO),e(IO,RGo),e(dF,BGo),e(O,PGo),e(O,cF),e(cF,dge),e(dge,IGo),e(cF,qGo),e(cF,qO),e(qO,NGo),e(cF,jGo),e(O,DGo),e(O,fF),e(fF,cge),e(cge,GGo),e(fF,OGo),e(fF,NO),e(NO,VGo),e(fF,XGo),e(O,zGo),e(O,mF),e(mF,fge),e(fge,QGo),e(mF,WGo),e(mF,jO),e(jO,HGo),e(mF,UGo),e(O,JGo),e(O,gF),e(gF,mge),e(mge,YGo),e(gF,KGo),e(gF,DO),e(DO,ZGo),e(gF,eOo),e(to,oOo),e(to,hF),e(hF,rOo),e(hF,gge),e(gge,tOo),e(hF,aOo),e(hF,hge),e(hge,nOo),e(to,sOo),M(pF,to,null),b(f,APe,_),b(f,Qi,_),e(Qi,uF),e(uF,pge),M(e0,pge,null),e(Qi,lOo),e(Qi,uge),e(uge,iOo),b(f,yPe,_),b(f,No,_),M(o0,No,null),e(No,dOo),e(No,Wi),e(Wi,cOo),e(Wi,GO),e(GO,fOo),e(Wi,mOo),e(Wi,OO),e(OO,gOo),e(Wi,hOo),e(No,pOo),e(No,r0),e(r0,uOo),e(r0,_ge),e(_ge,_Oo),e(r0,bOo),e(No,vOo),e(No,dt),M(t0,dt,null),e(dt,FOo),e(dt,bge),e(bge,TOo),e(dt,MOo),e(dt,Hi),e(Hi,EOo),e(Hi,vge),e(vge,COo),e(Hi,wOo),e(Hi,VO),e(VO,AOo),e(Hi,yOo),e(dt,LOo),M(_F,dt,null),e(No,xOo),e(No,ao),M(a0,ao,null),e(ao,$Oo),e(ao,Fge),e(Fge,kOo),e(ao,SOo),e(ao,Ra),e(Ra,ROo),e(Ra,Tge),e(Tge,BOo),e(Ra,POo),e(Ra,Mge),e(Mge,IOo),e(Ra,qOo),e(Ra,Ege),e(Ege,NOo),e(Ra,jOo),e(ao,DOo),e(ao,Cge),e(Cge,bF),e(bF,wge),e(wge,GOo),e(bF,OOo),e(bF,XO),e(XO,VOo),e(bF,XOo),e(ao,zOo),e(ao,vF),e(vF,QOo),e(vF,Age),e(Age,WOo),e(vF,HOo),e(vF,yge),e(yge,UOo),e(ao,JOo),M(FF,ao,null),b(f,LPe,_),b(f,Ui,_),e(Ui,TF),e(TF,Lge),M(n0,Lge,null),e(Ui,YOo),e(Ui,xge),e(xge,KOo),b(f,xPe,_),b(f,jo,_),M(s0,jo,null),e(jo,ZOo),e(jo,Ji),e(Ji,eVo),e(Ji,zO),e(zO,oVo),e(Ji,rVo),e(Ji,QO),e(QO,tVo),e(Ji,aVo),e(jo,nVo),e(jo,l0),e(l0,sVo),e(l0,$ge),e($ge,lVo),e(l0,iVo),e(jo,dVo),e(jo,ct),M(i0,ct,null),e(ct,cVo),e(ct,kge),e(kge,fVo),e(ct,mVo),e(ct,Yi),e(Yi,gVo),e(Yi,Sge),e(Sge,hVo),e(Yi,pVo),e(Yi,WO),e(WO,uVo),e(Yi,_Vo),e(ct,bVo),M(MF,ct,null),e(jo,vVo),e(jo,no),M(d0,no,null),e(no,FVo),e(no,Rge),e(Rge,TVo),e(no,MVo),e(no,Ba),e(Ba,EVo),e(Ba,Bge),e(Bge,CVo),e(Ba,wVo),e(Ba,Pge),e(Pge,AVo),e(Ba,yVo),e(Ba,Ige),e(Ige,LVo),e(Ba,xVo),e(no,$Vo),e(no,ve),e(ve,EF),e(EF,qge),e(qge,kVo),e(EF,SVo),e(EF,HO),e(HO,RVo),e(EF,BVo),e(ve,PVo),e(ve,CF),e(CF,Nge),e(Nge,IVo),e(CF,qVo),e(CF,UO),e(UO,NVo),e(CF,jVo),e(ve,DVo),e(ve,wF),e(wF,jge),e(jge,GVo),e(wF,OVo),e(wF,JO),e(JO,VVo),e(wF,XVo),e(ve,zVo),e(ve,$s),e($s,Dge),e(Dge,QVo),e($s,WVo),e($s,YO),e(YO,HVo),e($s,UVo),e($s,KO),e(KO,JVo),e($s,YVo),e(ve,KVo),e(ve,AF),e(AF,Gge),e(Gge,ZVo),e(AF,eXo),e(AF,ZO),e(ZO,oXo),e(AF,rXo),e(ve,tXo),e(ve,ft),e(ft,Oge),e(Oge,aXo),e(ft,nXo),e(ft,eV),e(eV,sXo),e(ft,lXo),e(ft,oV),e(oV,iXo),e(ft,dXo),e(ft,rV),e(rV,cXo),e(ft,fXo),e(ve,mXo),e(ve,yF),e(yF,Vge),e(Vge,gXo),e(yF,hXo),e(yF,tV),e(tV,pXo),e(yF,uXo),e(ve,_Xo),e(ve,LF),e(LF,Xge),e(Xge,bXo),e(LF,vXo),e(LF,aV),e(aV,FXo),e(LF,TXo),e(ve,MXo),e(ve,xF),e(xF,zge),e(zge,EXo),e(xF,CXo),e(xF,nV),e(nV,wXo),e(xF,AXo),e(ve,yXo),e(ve,$F),e($F,Qge),e(Qge,LXo),e($F,xXo),e($F,sV),e(sV,$Xo),e($F,kXo),e(ve,SXo),e(ve,kF),e(kF,Wge),e(Wge,RXo),e(kF,BXo),e(kF,lV),e(lV,PXo),e(kF,IXo),e(ve,qXo),e(ve,SF),e(SF,Hge),e(Hge,NXo),e(SF,jXo),e(SF,iV),e(iV,DXo),e(SF,GXo),e(ve,OXo),e(ve,RF),e(RF,Uge),e(Uge,VXo),e(RF,XXo),e(RF,dV),e(dV,zXo),e(RF,QXo),e(no,WXo),e(no,BF),e(BF,HXo),e(BF,Jge),e(Jge,UXo),e(BF,JXo),e(BF,Yge),e(Yge,YXo),e(no,KXo),M(PF,no,null),b(f,$Pe,_),b(f,Ki,_),e(Ki,IF),e(IF,Kge),M(c0,Kge,null),e(Ki,ZXo),e(Ki,Zge),e(Zge,ezo),b(f,kPe,_),b(f,Do,_),M(f0,Do,null),e(Do,ozo),e(Do,Zi),e(Zi,rzo),e(Zi,cV),e(cV,tzo),e(Zi,azo),e(Zi,fV),e(fV,nzo),e(Zi,szo),e(Do,lzo),e(Do,m0),e(m0,izo),e(m0,ehe),e(ehe,dzo),e(m0,czo),e(Do,fzo),e(Do,mt),M(g0,mt,null),e(mt,mzo),e(mt,ohe),e(ohe,gzo),e(mt,hzo),e(mt,ed),e(ed,pzo),e(ed,rhe),e(rhe,uzo),e(ed,_zo),e(ed,mV),e(mV,bzo),e(ed,vzo),e(mt,Fzo),M(qF,mt,null),e(Do,Tzo),e(Do,so),M(h0,so,null),e(so,Mzo),e(so,the),e(the,Ezo),e(so,Czo),e(so,Pa),e(Pa,wzo),e(Pa,ahe),e(ahe,Azo),e(Pa,yzo),e(Pa,nhe),e(nhe,Lzo),e(Pa,xzo),e(Pa,she),e(she,$zo),e(Pa,kzo),e(so,Szo),e(so,lhe),e(lhe,NF),e(NF,ihe),e(ihe,Rzo),e(NF,Bzo),e(NF,gV),e(gV,Pzo),e(NF,Izo),e(so,qzo),e(so,jF),e(jF,Nzo),e(jF,dhe),e(dhe,jzo),e(jF,Dzo),e(jF,che),e(che,Gzo),e(so,Ozo),M(DF,so,null),b(f,SPe,_),b(f,od,_),e(od,GF),e(GF,fhe),M(p0,fhe,null),e(od,Vzo),e(od,mhe),e(mhe,Xzo),b(f,RPe,_),b(f,Go,_),M(u0,Go,null),e(Go,zzo),e(Go,rd),e(rd,Qzo),e(rd,hV),e(hV,Wzo),e(rd,Hzo),e(rd,pV),e(pV,Uzo),e(rd,Jzo),e(Go,Yzo),e(Go,_0),e(_0,Kzo),e(_0,ghe),e(ghe,Zzo),e(_0,eQo),e(Go,oQo),e(Go,gt),M(b0,gt,null),e(gt,rQo),e(gt,hhe),e(hhe,tQo),e(gt,aQo),e(gt,td),e(td,nQo),e(td,phe),e(phe,sQo),e(td,lQo),e(td,uV),e(uV,iQo),e(td,dQo),e(gt,cQo),M(OF,gt,null),e(Go,fQo),e(Go,lo),M(v0,lo,null),e(lo,mQo),e(lo,uhe),e(uhe,gQo),e(lo,hQo),e(lo,Ia),e(Ia,pQo),e(Ia,_he),e(_he,uQo),e(Ia,_Qo),e(Ia,bhe),e(bhe,bQo),e(Ia,vQo),e(Ia,vhe),e(vhe,FQo),e(Ia,TQo),e(lo,MQo),e(lo,je),e(je,VF),e(VF,Fhe),e(Fhe,EQo),e(VF,CQo),e(VF,_V),e(_V,wQo),e(VF,AQo),e(je,yQo),e(je,XF),e(XF,The),e(The,LQo),e(XF,xQo),e(XF,bV),e(bV,$Qo),e(XF,kQo),e(je,SQo),e(je,zF),e(zF,Mhe),e(Mhe,RQo),e(zF,BQo),e(zF,vV),e(vV,PQo),e(zF,IQo),e(je,qQo),e(je,QF),e(QF,Ehe),e(Ehe,NQo),e(QF,jQo),e(QF,FV),e(FV,DQo),e(QF,GQo),e(je,OQo),e(je,WF),e(WF,Che),e(Che,VQo),e(WF,XQo),e(WF,TV),e(TV,zQo),e(WF,QQo),e(je,WQo),e(je,HF),e(HF,whe),e(whe,HQo),e(HF,UQo),e(HF,MV),e(MV,JQo),e(HF,YQo),e(je,KQo),e(je,UF),e(UF,Ahe),e(Ahe,ZQo),e(UF,eWo),e(UF,EV),e(EV,oWo),e(UF,rWo),e(je,tWo),e(je,JF),e(JF,yhe),e(yhe,aWo),e(JF,nWo),e(JF,CV),e(CV,sWo),e(JF,lWo),e(lo,iWo),e(lo,YF),e(YF,dWo),e(YF,Lhe),e(Lhe,cWo),e(YF,fWo),e(YF,xhe),e(xhe,mWo),e(lo,gWo),M(KF,lo,null),b(f,BPe,_),b(f,ad,_),e(ad,ZF),e(ZF,$he),M(F0,$he,null),e(ad,hWo),e(ad,khe),e(khe,pWo),b(f,PPe,_),b(f,Oo,_),M(T0,Oo,null),e(Oo,uWo),e(Oo,nd),e(nd,_Wo),e(nd,wV),e(wV,bWo),e(nd,vWo),e(nd,AV),e(AV,FWo),e(nd,TWo),e(Oo,MWo),e(Oo,M0),e(M0,EWo),e(M0,She),e(She,CWo),e(M0,wWo),e(Oo,AWo),e(Oo,ht),M(E0,ht,null),e(ht,yWo),e(ht,Rhe),e(Rhe,LWo),e(ht,xWo),e(ht,sd),e(sd,$Wo),e(sd,Bhe),e(Bhe,kWo),e(sd,SWo),e(sd,yV),e(yV,RWo),e(sd,BWo),e(ht,PWo),M(e6,ht,null),e(Oo,IWo),e(Oo,io),M(C0,io,null),e(io,qWo),e(io,Phe),e(Phe,NWo),e(io,jWo),e(io,qa),e(qa,DWo),e(qa,Ihe),e(Ihe,GWo),e(qa,OWo),e(qa,qhe),e(qhe,VWo),e(qa,XWo),e(qa,Nhe),e(Nhe,zWo),e(qa,QWo),e(io,WWo),e(io,Na),e(Na,o6),e(o6,jhe),e(jhe,HWo),e(o6,UWo),e(o6,LV),e(LV,JWo),e(o6,YWo),e(Na,KWo),e(Na,r6),e(r6,Dhe),e(Dhe,ZWo),e(r6,eHo),e(r6,xV),e(xV,oHo),e(r6,rHo),e(Na,tHo),e(Na,t6),e(t6,Ghe),e(Ghe,aHo),e(t6,nHo),e(t6,$V),e($V,sHo),e(t6,lHo),e(Na,iHo),e(Na,a6),e(a6,Ohe),e(Ohe,dHo),e(a6,cHo),e(a6,kV),e(kV,fHo),e(a6,mHo),e(io,gHo),e(io,n6),e(n6,hHo),e(n6,Vhe),e(Vhe,pHo),e(n6,uHo),e(n6,Xhe),e(Xhe,_Ho),e(io,bHo),M(s6,io,null),b(f,IPe,_),b(f,ld,_),e(ld,l6),e(l6,zhe),M(w0,zhe,null),e(ld,vHo),e(ld,Qhe),e(Qhe,FHo),b(f,qPe,_),b(f,Vo,_),M(A0,Vo,null),e(Vo,THo),e(Vo,id),e(id,MHo),e(id,SV),e(SV,EHo),e(id,CHo),e(id,RV),e(RV,wHo),e(id,AHo),e(Vo,yHo),e(Vo,y0),e(y0,LHo),e(y0,Whe),e(Whe,xHo),e(y0,$Ho),e(Vo,kHo),e(Vo,pt),M(L0,pt,null),e(pt,SHo),e(pt,Hhe),e(Hhe,RHo),e(pt,BHo),e(pt,dd),e(dd,PHo),e(dd,Uhe),e(Uhe,IHo),e(dd,qHo),e(dd,BV),e(BV,NHo),e(dd,jHo),e(pt,DHo),M(i6,pt,null),e(Vo,GHo),e(Vo,co),M(x0,co,null),e(co,OHo),e(co,Jhe),e(Jhe,VHo),e(co,XHo),e(co,ja),e(ja,zHo),e(ja,Yhe),e(Yhe,QHo),e(ja,WHo),e(ja,Khe),e(Khe,HHo),e(ja,UHo),e(ja,Zhe),e(Zhe,JHo),e(ja,YHo),e(co,KHo),e(co,De),e(De,d6),e(d6,epe),e(epe,ZHo),e(d6,eUo),e(d6,PV),e(PV,oUo),e(d6,rUo),e(De,tUo),e(De,c6),e(c6,ope),e(ope,aUo),e(c6,nUo),e(c6,IV),e(IV,sUo),e(c6,lUo),e(De,iUo),e(De,f6),e(f6,rpe),e(rpe,dUo),e(f6,cUo),e(f6,qV),e(qV,fUo),e(f6,mUo),e(De,gUo),e(De,m6),e(m6,tpe),e(tpe,hUo),e(m6,pUo),e(m6,NV),e(NV,uUo),e(m6,_Uo),e(De,bUo),e(De,g6),e(g6,ape),e(ape,vUo),e(g6,FUo),e(g6,jV),e(jV,TUo),e(g6,MUo),e(De,EUo),e(De,h6),e(h6,npe),e(npe,CUo),e(h6,wUo),e(h6,DV),e(DV,AUo),e(h6,yUo),e(De,LUo),e(De,p6),e(p6,spe),e(spe,xUo),e(p6,$Uo),e(p6,GV),e(GV,kUo),e(p6,SUo),e(De,RUo),e(De,u6),e(u6,lpe),e(lpe,BUo),e(u6,PUo),e(u6,OV),e(OV,IUo),e(u6,qUo),e(co,NUo),e(co,_6),e(_6,jUo),e(_6,ipe),e(ipe,DUo),e(_6,GUo),e(_6,dpe),e(dpe,OUo),e(co,VUo),M(b6,co,null),b(f,NPe,_),b(f,cd,_),e(cd,v6),e(v6,cpe),M($0,cpe,null),e(cd,XUo),e(cd,fpe),e(fpe,zUo),b(f,jPe,_),b(f,Xo,_),M(k0,Xo,null),e(Xo,QUo),e(Xo,fd),e(fd,WUo),e(fd,VV),e(VV,HUo),e(fd,UUo),e(fd,XV),e(XV,JUo),e(fd,YUo),e(Xo,KUo),e(Xo,S0),e(S0,ZUo),e(S0,mpe),e(mpe,eJo),e(S0,oJo),e(Xo,rJo),e(Xo,ut),M(R0,ut,null),e(ut,tJo),e(ut,gpe),e(gpe,aJo),e(ut,nJo),e(ut,md),e(md,sJo),e(md,hpe),e(hpe,lJo),e(md,iJo),e(md,zV),e(zV,dJo),e(md,cJo),e(ut,fJo),M(F6,ut,null),e(Xo,mJo),e(Xo,fo),M(B0,fo,null),e(fo,gJo),e(fo,ppe),e(ppe,hJo),e(fo,pJo),e(fo,Da),e(Da,uJo),e(Da,upe),e(upe,_Jo),e(Da,bJo),e(Da,_pe),e(_pe,vJo),e(Da,FJo),e(Da,bpe),e(bpe,TJo),e(Da,MJo),e(fo,EJo),e(fo,P0),e(P0,T6),e(T6,vpe),e(vpe,CJo),e(T6,wJo),e(T6,QV),e(QV,AJo),e(T6,yJo),e(P0,LJo),e(P0,M6),e(M6,Fpe),e(Fpe,xJo),e(M6,$Jo),e(M6,WV),e(WV,kJo),e(M6,SJo),e(fo,RJo),e(fo,E6),e(E6,BJo),e(E6,Tpe),e(Tpe,PJo),e(E6,IJo),e(E6,Mpe),e(Mpe,qJo),e(fo,NJo),M(C6,fo,null),b(f,DPe,_),b(f,gd,_),e(gd,w6),e(w6,Epe),M(I0,Epe,null),e(gd,jJo),e(gd,Cpe),e(Cpe,DJo),b(f,GPe,_),b(f,zo,_),M(q0,zo,null),e(zo,GJo),e(zo,hd),e(hd,OJo),e(hd,HV),e(HV,VJo),e(hd,XJo),e(hd,UV),e(UV,zJo),e(hd,QJo),e(zo,WJo),e(zo,N0),e(N0,HJo),e(N0,wpe),e(wpe,UJo),e(N0,JJo),e(zo,YJo),e(zo,_t),M(j0,_t,null),e(_t,KJo),e(_t,Ape),e(Ape,ZJo),e(_t,eYo),e(_t,pd),e(pd,oYo),e(pd,ype),e(ype,rYo),e(pd,tYo),e(pd,JV),e(JV,aYo),e(pd,nYo),e(_t,sYo),M(A6,_t,null),e(zo,lYo),e(zo,mo),M(D0,mo,null),e(mo,iYo),e(mo,Lpe),e(Lpe,dYo),e(mo,cYo),e(mo,Ga),e(Ga,fYo),e(Ga,xpe),e(xpe,mYo),e(Ga,gYo),e(Ga,$pe),e($pe,hYo),e(Ga,pYo),e(Ga,kpe),e(kpe,uYo),e(Ga,_Yo),e(mo,bYo),e(mo,Oa),e(Oa,y6),e(y6,Spe),e(Spe,vYo),e(y6,FYo),e(y6,YV),e(YV,TYo),e(y6,MYo),e(Oa,EYo),e(Oa,L6),e(L6,Rpe),e(Rpe,CYo),e(L6,wYo),e(L6,KV),e(KV,AYo),e(L6,yYo),e(Oa,LYo),e(Oa,x6),e(x6,Bpe),e(Bpe,xYo),e(x6,$Yo),e(x6,ZV),e(ZV,kYo),e(x6,SYo),e(Oa,RYo),e(Oa,$6),e($6,Ppe),e(Ppe,BYo),e($6,PYo),e($6,eX),e(eX,IYo),e($6,qYo),e(mo,NYo),e(mo,k6),e(k6,jYo),e(k6,Ipe),e(Ipe,DYo),e(k6,GYo),e(k6,qpe),e(qpe,OYo),e(mo,VYo),M(S6,mo,null),b(f,OPe,_),b(f,ud,_),e(ud,R6),e(R6,Npe),M(G0,Npe,null),e(ud,XYo),e(ud,jpe),e(jpe,zYo),b(f,VPe,_),b(f,Qo,_),M(O0,Qo,null),e(Qo,QYo),e(Qo,_d),e(_d,WYo),e(_d,oX),e(oX,HYo),e(_d,UYo),e(_d,rX),e(rX,JYo),e(_d,YYo),e(Qo,KYo),e(Qo,V0),e(V0,ZYo),e(V0,Dpe),e(Dpe,eKo),e(V0,oKo),e(Qo,rKo),e(Qo,bt),M(X0,bt,null),e(bt,tKo),e(bt,Gpe),e(Gpe,aKo),e(bt,nKo),e(bt,bd),e(bd,sKo),e(bd,Ope),e(Ope,lKo),e(bd,iKo),e(bd,tX),e(tX,dKo),e(bd,cKo),e(bt,fKo),M(B6,bt,null),e(Qo,mKo),e(Qo,go),M(z0,go,null),e(go,gKo),e(go,Vpe),e(Vpe,hKo),e(go,pKo),e(go,Va),e(Va,uKo),e(Va,Xpe),e(Xpe,_Ko),e(Va,bKo),e(Va,zpe),e(zpe,vKo),e(Va,FKo),e(Va,Qpe),e(Qpe,TKo),e(Va,MKo),e(go,EKo),e(go,vd),e(vd,P6),e(P6,Wpe),e(Wpe,CKo),e(P6,wKo),e(P6,aX),e(aX,AKo),e(P6,yKo),e(vd,LKo),e(vd,I6),e(I6,Hpe),e(Hpe,xKo),e(I6,$Ko),e(I6,nX),e(nX,kKo),e(I6,SKo),e(vd,RKo),e(vd,q6),e(q6,Upe),e(Upe,BKo),e(q6,PKo),e(q6,sX),e(sX,IKo),e(q6,qKo),e(go,NKo),e(go,N6),e(N6,jKo),e(N6,Jpe),e(Jpe,DKo),e(N6,GKo),e(N6,Ype),e(Ype,OKo),e(go,VKo),M(j6,go,null),b(f,XPe,_),b(f,Fd,_),e(Fd,D6),e(D6,Kpe),M(Q0,Kpe,null),e(Fd,XKo),e(Fd,Zpe),e(Zpe,zKo),b(f,zPe,_),b(f,Wo,_),M(W0,Wo,null),e(Wo,QKo),e(Wo,Td),e(Td,WKo),e(Td,lX),e(lX,HKo),e(Td,UKo),e(Td,iX),e(iX,JKo),e(Td,YKo),e(Wo,KKo),e(Wo,H0),e(H0,ZKo),e(H0,eue),e(eue,eZo),e(H0,oZo),e(Wo,rZo),e(Wo,vt),M(U0,vt,null),e(vt,tZo),e(vt,oue),e(oue,aZo),e(vt,nZo),e(vt,Md),e(Md,sZo),e(Md,rue),e(rue,lZo),e(Md,iZo),e(Md,dX),e(dX,dZo),e(Md,cZo),e(vt,fZo),M(G6,vt,null),e(Wo,mZo),e(Wo,ho),M(J0,ho,null),e(ho,gZo),e(ho,tue),e(tue,hZo),e(ho,pZo),e(ho,Xa),e(Xa,uZo),e(Xa,aue),e(aue,_Zo),e(Xa,bZo),e(Xa,nue),e(nue,vZo),e(Xa,FZo),e(Xa,sue),e(sue,TZo),e(Xa,MZo),e(ho,EZo),e(ho,Y0),e(Y0,O6),e(O6,lue),e(lue,CZo),e(O6,wZo),e(O6,cX),e(cX,AZo),e(O6,yZo),e(Y0,LZo),e(Y0,V6),e(V6,iue),e(iue,xZo),e(V6,$Zo),e(V6,fX),e(fX,kZo),e(V6,SZo),e(ho,RZo),e(ho,X6),e(X6,BZo),e(X6,due),e(due,PZo),e(X6,IZo),e(X6,cue),e(cue,qZo),e(ho,NZo),M(z6,ho,null),b(f,QPe,_),b(f,Ed,_),e(Ed,Q6),e(Q6,fue),M(K0,fue,null),e(Ed,jZo),e(Ed,mue),e(mue,DZo),b(f,WPe,_),b(f,Ho,_),M(Z0,Ho,null),e(Ho,GZo),e(Ho,Cd),e(Cd,OZo),e(Cd,mX),e(mX,VZo),e(Cd,XZo),e(Cd,gX),e(gX,zZo),e(Cd,QZo),e(Ho,WZo),e(Ho,ey),e(ey,HZo),e(ey,gue),e(gue,UZo),e(ey,JZo),e(Ho,YZo),e(Ho,Ft),M(oy,Ft,null),e(Ft,KZo),e(Ft,hue),e(hue,ZZo),e(Ft,eer),e(Ft,wd),e(wd,oer),e(wd,pue),e(pue,rer),e(wd,ter),e(wd,hX),e(hX,aer),e(wd,ner),e(Ft,ser),M(W6,Ft,null),e(Ho,ler),e(Ho,po),M(ry,po,null),e(po,ier),e(po,uue),e(uue,der),e(po,cer),e(po,za),e(za,fer),e(za,_ue),e(_ue,mer),e(za,ger),e(za,bue),e(bue,her),e(za,per),e(za,vue),e(vue,uer),e(za,_er),e(po,ber),e(po,Fue),e(Fue,H6),e(H6,Tue),e(Tue,ver),e(H6,Fer),e(H6,pX),e(pX,Ter),e(H6,Mer),e(po,Eer),e(po,U6),e(U6,Cer),e(U6,Mue),e(Mue,wer),e(U6,Aer),e(U6,Eue),e(Eue,yer),e(po,Ler),M(J6,po,null),b(f,HPe,_),b(f,Ad,_),e(Ad,Y6),e(Y6,Cue),M(ty,Cue,null),e(Ad,xer),e(Ad,wue),e(wue,$er),b(f,UPe,_),b(f,Uo,_),M(ay,Uo,null),e(Uo,ker),e(Uo,yd),e(yd,Ser),e(yd,uX),e(uX,Rer),e(yd,Ber),e(yd,_X),e(_X,Per),e(yd,Ier),e(Uo,qer),e(Uo,ny),e(ny,Ner),e(ny,Aue),e(Aue,jer),e(ny,Der),e(Uo,Ger),e(Uo,Tt),M(sy,Tt,null),e(Tt,Oer),e(Tt,yue),e(yue,Ver),e(Tt,Xer),e(Tt,Ld),e(Ld,zer),e(Ld,Lue),e(Lue,Qer),e(Ld,Wer),e(Ld,bX),e(bX,Her),e(Ld,Uer),e(Tt,Jer),M(K6,Tt,null),e(Uo,Yer),e(Uo,uo),M(ly,uo,null),e(uo,Ker),e(uo,xue),e(xue,Zer),e(uo,eor),e(uo,Qa),e(Qa,oor),e(Qa,$ue),e($ue,ror),e(Qa,tor),e(Qa,kue),e(kue,aor),e(Qa,nor),e(Qa,Sue),e(Sue,sor),e(Qa,lor),e(uo,ior),e(uo,Wa),e(Wa,Z6),e(Z6,Rue),e(Rue,dor),e(Z6,cor),e(Z6,vX),e(vX,mor),e(Z6,gor),e(Wa,hor),e(Wa,eT),e(eT,Bue),e(Bue,por),e(eT,uor),e(eT,FX),e(FX,_or),e(eT,bor),e(Wa,vor),e(Wa,oT),e(oT,Pue),e(Pue,For),e(oT,Tor),e(oT,TX),e(TX,Mor),e(oT,Eor),e(Wa,Cor),e(Wa,rT),e(rT,Iue),e(Iue,wor),e(rT,Aor),e(rT,MX),e(MX,yor),e(rT,Lor),e(uo,xor),e(uo,tT),e(tT,$or),e(tT,que),e(que,kor),e(tT,Sor),e(tT,Nue),e(Nue,Ror),e(uo,Bor),M(aT,uo,null),b(f,JPe,_),b(f,xd,_),e(xd,nT),e(nT,jue),M(iy,jue,null),e(xd,Por),e(xd,Due),e(Due,Ior),b(f,YPe,_),b(f,Jo,_),M(dy,Jo,null),e(Jo,qor),e(Jo,$d),e($d,Nor),e($d,EX),e(EX,jor),e($d,Dor),e($d,CX),e(CX,Gor),e($d,Oor),e(Jo,Vor),e(Jo,cy),e(cy,Xor),e(cy,Gue),e(Gue,zor),e(cy,Qor),e(Jo,Wor),e(Jo,Mt),M(fy,Mt,null),e(Mt,Hor),e(Mt,Oue),e(Oue,Uor),e(Mt,Jor),e(Mt,kd),e(kd,Yor),e(kd,Vue),e(Vue,Kor),e(kd,Zor),e(kd,wX),e(wX,err),e(kd,orr),e(Mt,rrr),M(sT,Mt,null),e(Jo,trr),e(Jo,_o),M(my,_o,null),e(_o,arr),e(_o,Xue),e(Xue,nrr),e(_o,srr),e(_o,Ha),e(Ha,lrr),e(Ha,zue),e(zue,irr),e(Ha,drr),e(Ha,Que),e(Que,crr),e(Ha,frr),e(Ha,Wue),e(Wue,mrr),e(Ha,grr),e(_o,hrr),e(_o,Hue),e(Hue,lT),e(lT,Uue),e(Uue,prr),e(lT,urr),e(lT,AX),e(AX,_rr),e(lT,brr),e(_o,vrr),e(_o,iT),e(iT,Frr),e(iT,Jue),e(Jue,Trr),e(iT,Mrr),e(iT,Yue),e(Yue,Err),e(_o,Crr),M(dT,_o,null),b(f,KPe,_),b(f,Sd,_),e(Sd,cT),e(cT,Kue),M(gy,Kue,null),e(Sd,wrr),e(Sd,Zue),e(Zue,Arr),b(f,ZPe,_),b(f,Yo,_),M(hy,Yo,null),e(Yo,yrr),e(Yo,Rd),e(Rd,Lrr),e(Rd,yX),e(yX,xrr),e(Rd,$rr),e(Rd,LX),e(LX,krr),e(Rd,Srr),e(Yo,Rrr),e(Yo,py),e(py,Brr),e(py,e_e),e(e_e,Prr),e(py,Irr),e(Yo,qrr),e(Yo,Et),M(uy,Et,null),e(Et,Nrr),e(Et,o_e),e(o_e,jrr),e(Et,Drr),e(Et,Bd),e(Bd,Grr),e(Bd,r_e),e(r_e,Orr),e(Bd,Vrr),e(Bd,xX),e(xX,Xrr),e(Bd,zrr),e(Et,Qrr),M(fT,Et,null),e(Yo,Wrr),e(Yo,Cr),M(_y,Cr,null),e(Cr,Hrr),e(Cr,t_e),e(t_e,Urr),e(Cr,Jrr),e(Cr,Ua),e(Ua,Yrr),e(Ua,a_e),e(a_e,Krr),e(Ua,Zrr),e(Ua,n_e),e(n_e,etr),e(Ua,otr),e(Ua,s_e),e(s_e,rtr),e(Ua,ttr),e(Cr,atr),e(Cr,j),e(j,mT),e(mT,l_e),e(l_e,ntr),e(mT,str),e(mT,$X),e($X,ltr),e(mT,itr),e(j,dtr),e(j,gT),e(gT,i_e),e(i_e,ctr),e(gT,ftr),e(gT,kX),e(kX,mtr),e(gT,gtr),e(j,htr),e(j,hT),e(hT,d_e),e(d_e,ptr),e(hT,utr),e(hT,SX),e(SX,_tr),e(hT,btr),e(j,vtr),e(j,pT),e(pT,c_e),e(c_e,Ftr),e(pT,Ttr),e(pT,RX),e(RX,Mtr),e(pT,Etr),e(j,Ctr),e(j,uT),e(uT,f_e),e(f_e,wtr),e(uT,Atr),e(uT,BX),e(BX,ytr),e(uT,Ltr),e(j,xtr),e(j,_T),e(_T,m_e),e(m_e,$tr),e(_T,ktr),e(_T,PX),e(PX,Str),e(_T,Rtr),e(j,Btr),e(j,bT),e(bT,g_e),e(g_e,Ptr),e(bT,Itr),e(bT,IX),e(IX,qtr),e(bT,Ntr),e(j,jtr),e(j,vT),e(vT,h_e),e(h_e,Dtr),e(vT,Gtr),e(vT,qX),e(qX,Otr),e(vT,Vtr),e(j,Xtr),e(j,FT),e(FT,p_e),e(p_e,ztr),e(FT,Qtr),e(FT,NX),e(NX,Wtr),e(FT,Htr),e(j,Utr),e(j,TT),e(TT,u_e),e(u_e,Jtr),e(TT,Ytr),e(TT,jX),e(jX,Ktr),e(TT,Ztr),e(j,ear),e(j,MT),e(MT,__e),e(__e,oar),e(MT,rar),e(MT,DX),e(DX,tar),e(MT,aar),e(j,nar),e(j,ET),e(ET,b_e),e(b_e,sar),e(ET,lar),e(ET,GX),e(GX,iar),e(ET,dar),e(j,car),e(j,CT),e(CT,v_e),e(v_e,far),e(CT,mar),e(CT,OX),e(OX,gar),e(CT,har),e(j,par),e(j,wT),e(wT,F_e),e(F_e,uar),e(wT,_ar),e(wT,VX),e(VX,bar),e(wT,Far),e(j,Tar),e(j,AT),e(AT,T_e),e(T_e,Mar),e(AT,Ear),e(AT,XX),e(XX,Car),e(AT,war),e(j,Aar),e(j,yT),e(yT,M_e),e(M_e,yar),e(yT,Lar),e(yT,zX),e(zX,xar),e(yT,$ar),e(j,kar),e(j,LT),e(LT,E_e),e(E_e,Sar),e(LT,Rar),e(LT,QX),e(QX,Bar),e(LT,Par),e(j,Iar),e(j,ks),e(ks,C_e),e(C_e,qar),e(ks,Nar),e(ks,WX),e(WX,jar),e(ks,Dar),e(ks,HX),e(HX,Gar),e(ks,Oar),e(j,Var),e(j,xT),e(xT,w_e),e(w_e,Xar),e(xT,zar),e(xT,UX),e(UX,Qar),e(xT,War),e(j,Har),e(j,$T),e($T,A_e),e(A_e,Uar),e($T,Jar),e($T,JX),e(JX,Yar),e($T,Kar),e(j,Zar),e(j,kT),e(kT,y_e),e(y_e,enr),e(kT,onr),e(kT,YX),e(YX,rnr),e(kT,tnr),e(j,anr),e(j,ST),e(ST,L_e),e(L_e,nnr),e(ST,snr),e(ST,KX),e(KX,lnr),e(ST,inr),e(j,dnr),e(j,RT),e(RT,x_e),e(x_e,cnr),e(RT,fnr),e(RT,ZX),e(ZX,mnr),e(RT,gnr),e(j,hnr),e(j,BT),e(BT,$_e),e($_e,pnr),e(BT,unr),e(BT,ez),e(ez,_nr),e(BT,bnr),e(j,vnr),e(j,PT),e(PT,k_e),e(k_e,Fnr),e(PT,Tnr),e(PT,oz),e(oz,Mnr),e(PT,Enr),e(j,Cnr),e(j,IT),e(IT,S_e),e(S_e,wnr),e(IT,Anr),e(IT,rz),e(rz,ynr),e(IT,Lnr),e(j,xnr),e(j,qT),e(qT,R_e),e(R_e,$nr),e(qT,knr),e(qT,tz),e(tz,Snr),e(qT,Rnr),e(j,Bnr),e(j,NT),e(NT,B_e),e(B_e,Pnr),e(NT,Inr),e(NT,az),e(az,qnr),e(NT,Nnr),e(j,jnr),e(j,jT),e(jT,P_e),e(P_e,Dnr),e(jT,Gnr),e(jT,nz),e(nz,Onr),e(jT,Vnr),e(j,Xnr),e(j,DT),e(DT,I_e),e(I_e,znr),e(DT,Qnr),e(DT,sz),e(sz,Wnr),e(DT,Hnr),e(j,Unr),e(j,GT),e(GT,q_e),e(q_e,Jnr),e(GT,Ynr),e(GT,lz),e(lz,Knr),e(GT,Znr),e(j,esr),e(j,OT),e(OT,N_e),e(N_e,osr),e(OT,rsr),e(OT,iz),e(iz,tsr),e(OT,asr),e(j,nsr),e(j,VT),e(VT,j_e),e(j_e,ssr),e(VT,lsr),e(VT,dz),e(dz,isr),e(VT,dsr),e(j,csr),e(j,XT),e(XT,D_e),e(D_e,fsr),e(XT,msr),e(XT,cz),e(cz,gsr),e(XT,hsr),e(j,psr),e(j,zT),e(zT,G_e),e(G_e,usr),e(zT,_sr),e(zT,fz),e(fz,bsr),e(zT,vsr),e(j,Fsr),e(j,QT),e(QT,O_e),e(O_e,Tsr),e(QT,Msr),e(QT,mz),e(mz,Esr),e(QT,Csr),e(j,wsr),e(j,WT),e(WT,V_e),e(V_e,Asr),e(WT,ysr),e(WT,gz),e(gz,Lsr),e(WT,xsr),e(j,$sr),e(j,HT),e(HT,X_e),e(X_e,ksr),e(HT,Ssr),e(HT,hz),e(hz,Rsr),e(HT,Bsr),e(j,Psr),e(j,UT),e(UT,z_e),e(z_e,Isr),e(UT,qsr),e(UT,pz),e(pz,Nsr),e(UT,jsr),e(j,Dsr),e(j,JT),e(JT,Q_e),e(Q_e,Gsr),e(JT,Osr),e(JT,uz),e(uz,Vsr),e(JT,Xsr),e(j,zsr),e(j,YT),e(YT,W_e),e(W_e,Qsr),e(YT,Wsr),e(YT,_z),e(_z,Hsr),e(YT,Usr),e(j,Jsr),e(j,KT),e(KT,H_e),e(H_e,Ysr),e(KT,Ksr),e(KT,bz),e(bz,Zsr),e(KT,elr),e(j,olr),e(j,ZT),e(ZT,U_e),e(U_e,rlr),e(ZT,tlr),e(ZT,vz),e(vz,alr),e(ZT,nlr),e(j,slr),e(j,e7),e(e7,J_e),e(J_e,llr),e(e7,ilr),e(e7,Fz),e(Fz,dlr),e(e7,clr),e(j,flr),e(j,o7),e(o7,Y_e),e(Y_e,mlr),e(o7,glr),e(o7,Tz),e(Tz,hlr),e(o7,plr),e(Cr,ulr),M(r7,Cr,null),b(f,eIe,_),b(f,Pd,_),e(Pd,t7),e(t7,K_e),M(by,K_e,null),e(Pd,_lr),e(Pd,Z_e),e(Z_e,blr),b(f,oIe,_),b(f,Ko,_),M(vy,Ko,null),e(Ko,vlr),e(Ko,Id),e(Id,Flr),e(Id,Mz),e(Mz,Tlr),e(Id,Mlr),e(Id,Ez),e(Ez,Elr),e(Id,Clr),e(Ko,wlr),e(Ko,Fy),e(Fy,Alr),e(Fy,e2e),e(e2e,ylr),e(Fy,Llr),e(Ko,xlr),e(Ko,Ct),M(Ty,Ct,null),e(Ct,$lr),e(Ct,o2e),e(o2e,klr),e(Ct,Slr),e(Ct,qd),e(qd,Rlr),e(qd,r2e),e(r2e,Blr),e(qd,Plr),e(qd,Cz),e(Cz,Ilr),e(qd,qlr),e(Ct,Nlr),M(a7,Ct,null),e(Ko,jlr),e(Ko,wr),M(My,wr,null),e(wr,Dlr),e(wr,t2e),e(t2e,Glr),e(wr,Olr),e(wr,Ja),e(Ja,Vlr),e(Ja,a2e),e(a2e,Xlr),e(Ja,zlr),e(Ja,n2e),e(n2e,Qlr),e(Ja,Wlr),e(Ja,s2e),e(s2e,Hlr),e(Ja,Ulr),e(wr,Jlr),e(wr,ne),e(ne,n7),e(n7,l2e),e(l2e,Ylr),e(n7,Klr),e(n7,wz),e(wz,Zlr),e(n7,eir),e(ne,oir),e(ne,s7),e(s7,i2e),e(i2e,rir),e(s7,tir),e(s7,Az),e(Az,air),e(s7,nir),e(ne,sir),e(ne,l7),e(l7,d2e),e(d2e,lir),e(l7,iir),e(l7,yz),e(yz,dir),e(l7,cir),e(ne,fir),e(ne,i7),e(i7,c2e),e(c2e,mir),e(i7,gir),e(i7,Lz),e(Lz,hir),e(i7,pir),e(ne,uir),e(ne,d7),e(d7,f2e),e(f2e,_ir),e(d7,bir),e(d7,xz),e(xz,vir),e(d7,Fir),e(ne,Tir),e(ne,c7),e(c7,m2e),e(m2e,Mir),e(c7,Eir),e(c7,$z),e($z,Cir),e(c7,wir),e(ne,Air),e(ne,f7),e(f7,g2e),e(g2e,yir),e(f7,Lir),e(f7,kz),e(kz,xir),e(f7,$ir),e(ne,kir),e(ne,m7),e(m7,h2e),e(h2e,Sir),e(m7,Rir),e(m7,Sz),e(Sz,Bir),e(m7,Pir),e(ne,Iir),e(ne,g7),e(g7,p2e),e(p2e,qir),e(g7,Nir),e(g7,Rz),e(Rz,jir),e(g7,Dir),e(ne,Gir),e(ne,h7),e(h7,u2e),e(u2e,Oir),e(h7,Vir),e(h7,Bz),e(Bz,Xir),e(h7,zir),e(ne,Qir),e(ne,p7),e(p7,_2e),e(_2e,Wir),e(p7,Hir),e(p7,Pz),e(Pz,Uir),e(p7,Jir),e(ne,Yir),e(ne,u7),e(u7,b2e),e(b2e,Kir),e(u7,Zir),e(u7,Iz),e(Iz,edr),e(u7,odr),e(ne,rdr),e(ne,_7),e(_7,v2e),e(v2e,tdr),e(_7,adr),e(_7,qz),e(qz,ndr),e(_7,sdr),e(ne,ldr),e(ne,b7),e(b7,F2e),e(F2e,idr),e(b7,ddr),e(b7,Nz),e(Nz,cdr),e(b7,fdr),e(ne,mdr),e(ne,v7),e(v7,T2e),e(T2e,gdr),e(v7,hdr),e(v7,jz),e(jz,pdr),e(v7,udr),e(ne,_dr),e(ne,F7),e(F7,M2e),e(M2e,bdr),e(F7,vdr),e(F7,Dz),e(Dz,Fdr),e(F7,Tdr),e(ne,Mdr),e(ne,T7),e(T7,E2e),e(E2e,Edr),e(T7,Cdr),e(T7,Gz),e(Gz,wdr),e(T7,Adr),e(ne,ydr),e(ne,M7),e(M7,C2e),e(C2e,Ldr),e(M7,xdr),e(M7,Oz),e(Oz,$dr),e(M7,kdr),e(ne,Sdr),e(ne,E7),e(E7,w2e),e(w2e,Rdr),e(E7,Bdr),e(E7,Vz),e(Vz,Pdr),e(E7,Idr),e(ne,qdr),e(ne,C7),e(C7,A2e),e(A2e,Ndr),e(C7,jdr),e(C7,Xz),e(Xz,Ddr),e(C7,Gdr),e(ne,Odr),e(ne,w7),e(w7,y2e),e(y2e,Vdr),e(w7,Xdr),e(w7,zz),e(zz,zdr),e(w7,Qdr),e(ne,Wdr),e(ne,A7),e(A7,L2e),e(L2e,Hdr),e(A7,Udr),e(A7,Qz),e(Qz,Jdr),e(A7,Ydr),e(ne,Kdr),e(ne,y7),e(y7,x2e),e(x2e,Zdr),e(y7,ecr),e(y7,Wz),e(Wz,ocr),e(y7,rcr),e(wr,tcr),M(L7,wr,null),b(f,rIe,_),b(f,Nd,_),e(Nd,x7),e(x7,$2e),M(Ey,$2e,null),e(Nd,acr),e(Nd,k2e),e(k2e,ncr),b(f,tIe,_),b(f,Zo,_),M(Cy,Zo,null),e(Zo,scr),e(Zo,jd),e(jd,lcr),e(jd,Hz),e(Hz,icr),e(jd,dcr),e(jd,Uz),e(Uz,ccr),e(jd,fcr),e(Zo,mcr),e(Zo,wy),e(wy,gcr),e(wy,S2e),e(S2e,hcr),e(wy,pcr),e(Zo,ucr),e(Zo,wt),M(Ay,wt,null),e(wt,_cr),e(wt,R2e),e(R2e,bcr),e(wt,vcr),e(wt,Dd),e(Dd,Fcr),e(Dd,B2e),e(B2e,Tcr),e(Dd,Mcr),e(Dd,Jz),e(Jz,Ecr),e(Dd,Ccr),e(wt,wcr),M($7,wt,null),e(Zo,Acr),e(Zo,Ar),M(yy,Ar,null),e(Ar,ycr),e(Ar,P2e),e(P2e,Lcr),e(Ar,xcr),e(Ar,Ya),e(Ya,$cr),e(Ya,I2e),e(I2e,kcr),e(Ya,Scr),e(Ya,q2e),e(q2e,Rcr),e(Ya,Bcr),e(Ya,N2e),e(N2e,Pcr),e(Ya,Icr),e(Ar,qcr),e(Ar,Me),e(Me,k7),e(k7,j2e),e(j2e,Ncr),e(k7,jcr),e(k7,Yz),e(Yz,Dcr),e(k7,Gcr),e(Me,Ocr),e(Me,S7),e(S7,D2e),e(D2e,Vcr),e(S7,Xcr),e(S7,Kz),e(Kz,zcr),e(S7,Qcr),e(Me,Wcr),e(Me,R7),e(R7,G2e),e(G2e,Hcr),e(R7,Ucr),e(R7,Zz),e(Zz,Jcr),e(R7,Ycr),e(Me,Kcr),e(Me,B7),e(B7,O2e),e(O2e,Zcr),e(B7,efr),e(B7,eQ),e(eQ,ofr),e(B7,rfr),e(Me,tfr),e(Me,P7),e(P7,V2e),e(V2e,afr),e(P7,nfr),e(P7,oQ),e(oQ,sfr),e(P7,lfr),e(Me,ifr),e(Me,I7),e(I7,X2e),e(X2e,dfr),e(I7,cfr),e(I7,rQ),e(rQ,ffr),e(I7,mfr),e(Me,gfr),e(Me,q7),e(q7,z2e),e(z2e,hfr),e(q7,pfr),e(q7,tQ),e(tQ,ufr),e(q7,_fr),e(Me,bfr),e(Me,N7),e(N7,Q2e),e(Q2e,vfr),e(N7,Ffr),e(N7,aQ),e(aQ,Tfr),e(N7,Mfr),e(Me,Efr),e(Me,j7),e(j7,W2e),e(W2e,Cfr),e(j7,wfr),e(j7,nQ),e(nQ,Afr),e(j7,yfr),e(Me,Lfr),e(Me,D7),e(D7,H2e),e(H2e,xfr),e(D7,$fr),e(D7,sQ),e(sQ,kfr),e(D7,Sfr),e(Me,Rfr),e(Me,G7),e(G7,U2e),e(U2e,Bfr),e(G7,Pfr),e(G7,lQ),e(lQ,Ifr),e(G7,qfr),e(Me,Nfr),e(Me,O7),e(O7,J2e),e(J2e,jfr),e(O7,Dfr),e(O7,iQ),e(iQ,Gfr),e(O7,Ofr),e(Ar,Vfr),M(V7,Ar,null),b(f,aIe,_),b(f,Gd,_),e(Gd,X7),e(X7,Y2e),M(Ly,Y2e,null),e(Gd,Xfr),e(Gd,K2e),e(K2e,zfr),b(f,nIe,_),b(f,er,_),M(xy,er,null),e(er,Qfr),e(er,Od),e(Od,Wfr),e(Od,dQ),e(dQ,Hfr),e(Od,Ufr),e(Od,cQ),e(cQ,Jfr),e(Od,Yfr),e(er,Kfr),e(er,$y),e($y,Zfr),e($y,Z2e),e(Z2e,emr),e($y,omr),e(er,rmr),e(er,At),M(ky,At,null),e(At,tmr),e(At,e1e),e(e1e,amr),e(At,nmr),e(At,Vd),e(Vd,smr),e(Vd,o1e),e(o1e,lmr),e(Vd,imr),e(Vd,fQ),e(fQ,dmr),e(Vd,cmr),e(At,fmr),M(z7,At,null),e(er,mmr),e(er,yr),M(Sy,yr,null),e(yr,gmr),e(yr,r1e),e(r1e,hmr),e(yr,pmr),e(yr,Ka),e(Ka,umr),e(Ka,t1e),e(t1e,_mr),e(Ka,bmr),e(Ka,a1e),e(a1e,vmr),e(Ka,Fmr),e(Ka,n1e),e(n1e,Tmr),e(Ka,Mmr),e(yr,Emr),e(yr,Xd),e(Xd,Q7),e(Q7,s1e),e(s1e,Cmr),e(Q7,wmr),e(Q7,mQ),e(mQ,Amr),e(Q7,ymr),e(Xd,Lmr),e(Xd,W7),e(W7,l1e),e(l1e,xmr),e(W7,$mr),e(W7,gQ),e(gQ,kmr),e(W7,Smr),e(Xd,Rmr),e(Xd,H7),e(H7,i1e),e(i1e,Bmr),e(H7,Pmr),e(H7,hQ),e(hQ,Imr),e(H7,qmr),e(yr,Nmr),M(U7,yr,null),b(f,sIe,_),b(f,zd,_),e(zd,J7),e(J7,d1e),M(Ry,d1e,null),e(zd,jmr),e(zd,c1e),e(c1e,Dmr),b(f,lIe,_),b(f,or,_),M(By,or,null),e(or,Gmr),e(or,Qd),e(Qd,Omr),e(Qd,pQ),e(pQ,Vmr),e(Qd,Xmr),e(Qd,uQ),e(uQ,zmr),e(Qd,Qmr),e(or,Wmr),e(or,Py),e(Py,Hmr),e(Py,f1e),e(f1e,Umr),e(Py,Jmr),e(or,Ymr),e(or,yt),M(Iy,yt,null),e(yt,Kmr),e(yt,m1e),e(m1e,Zmr),e(yt,egr),e(yt,Wd),e(Wd,ogr),e(Wd,g1e),e(g1e,rgr),e(Wd,tgr),e(Wd,_Q),e(_Q,agr),e(Wd,ngr),e(yt,sgr),M(Y7,yt,null),e(or,lgr),e(or,Lr),M(qy,Lr,null),e(Lr,igr),e(Lr,h1e),e(h1e,dgr),e(Lr,cgr),e(Lr,Za),e(Za,fgr),e(Za,p1e),e(p1e,mgr),e(Za,ggr),e(Za,u1e),e(u1e,hgr),e(Za,pgr),e(Za,_1e),e(_1e,ugr),e(Za,_gr),e(Lr,bgr),e(Lr,ie),e(ie,K7),e(K7,b1e),e(b1e,vgr),e(K7,Fgr),e(K7,bQ),e(bQ,Tgr),e(K7,Mgr),e(ie,Egr),e(ie,Z7),e(Z7,v1e),e(v1e,Cgr),e(Z7,wgr),e(Z7,vQ),e(vQ,Agr),e(Z7,ygr),e(ie,Lgr),e(ie,e9),e(e9,F1e),e(F1e,xgr),e(e9,$gr),e(e9,FQ),e(FQ,kgr),e(e9,Sgr),e(ie,Rgr),e(ie,o9),e(o9,T1e),e(T1e,Bgr),e(o9,Pgr),e(o9,TQ),e(TQ,Igr),e(o9,qgr),e(ie,Ngr),e(ie,r9),e(r9,M1e),e(M1e,jgr),e(r9,Dgr),e(r9,MQ),e(MQ,Ggr),e(r9,Ogr),e(ie,Vgr),e(ie,t9),e(t9,E1e),e(E1e,Xgr),e(t9,zgr),e(t9,EQ),e(EQ,Qgr),e(t9,Wgr),e(ie,Hgr),e(ie,a9),e(a9,C1e),e(C1e,Ugr),e(a9,Jgr),e(a9,CQ),e(CQ,Ygr),e(a9,Kgr),e(ie,Zgr),e(ie,n9),e(n9,w1e),e(w1e,ehr),e(n9,ohr),e(n9,wQ),e(wQ,rhr),e(n9,thr),e(ie,ahr),e(ie,s9),e(s9,A1e),e(A1e,nhr),e(s9,shr),e(s9,AQ),e(AQ,lhr),e(s9,ihr),e(ie,dhr),e(ie,l9),e(l9,y1e),e(y1e,chr),e(l9,fhr),e(l9,yQ),e(yQ,mhr),e(l9,ghr),e(ie,hhr),e(ie,i9),e(i9,L1e),e(L1e,phr),e(i9,uhr),e(i9,LQ),e(LQ,_hr),e(i9,bhr),e(ie,vhr),e(ie,d9),e(d9,x1e),e(x1e,Fhr),e(d9,Thr),e(d9,xQ),e(xQ,Mhr),e(d9,Ehr),e(ie,Chr),e(ie,c9),e(c9,$1e),e($1e,whr),e(c9,Ahr),e(c9,$Q),e($Q,yhr),e(c9,Lhr),e(ie,xhr),e(ie,f9),e(f9,k1e),e(k1e,$hr),e(f9,khr),e(f9,kQ),e(kQ,Shr),e(f9,Rhr),e(ie,Bhr),e(ie,m9),e(m9,S1e),e(S1e,Phr),e(m9,Ihr),e(m9,SQ),e(SQ,qhr),e(m9,Nhr),e(ie,jhr),e(ie,g9),e(g9,R1e),e(R1e,Dhr),e(g9,Ghr),e(g9,RQ),e(RQ,Ohr),e(g9,Vhr),e(ie,Xhr),e(ie,h9),e(h9,B1e),e(B1e,zhr),e(h9,Qhr),e(h9,BQ),e(BQ,Whr),e(h9,Hhr),e(ie,Uhr),e(ie,p9),e(p9,P1e),e(P1e,Jhr),e(p9,Yhr),e(p9,PQ),e(PQ,Khr),e(p9,Zhr),e(ie,epr),e(ie,u9),e(u9,I1e),e(I1e,opr),e(u9,rpr),e(u9,IQ),e(IQ,tpr),e(u9,apr),e(ie,npr),e(ie,_9),e(_9,q1e),e(q1e,spr),e(_9,lpr),e(_9,qQ),e(qQ,ipr),e(_9,dpr),e(Lr,cpr),M(b9,Lr,null),b(f,iIe,_),b(f,Hd,_),e(Hd,v9),e(v9,N1e),M(Ny,N1e,null),e(Hd,fpr),e(Hd,j1e),e(j1e,mpr),b(f,dIe,_),b(f,rr,_),M(jy,rr,null),e(rr,gpr),e(rr,Ud),e(Ud,hpr),e(Ud,NQ),e(NQ,ppr),e(Ud,upr),e(Ud,jQ),e(jQ,_pr),e(Ud,bpr),e(rr,vpr),e(rr,Dy),e(Dy,Fpr),e(Dy,D1e),e(D1e,Tpr),e(Dy,Mpr),e(rr,Epr),e(rr,Lt),M(Gy,Lt,null),e(Lt,Cpr),e(Lt,G1e),e(G1e,wpr),e(Lt,Apr),e(Lt,Jd),e(Jd,ypr),e(Jd,O1e),e(O1e,Lpr),e(Jd,xpr),e(Jd,DQ),e(DQ,$pr),e(Jd,kpr),e(Lt,Spr),M(F9,Lt,null),e(rr,Rpr),e(rr,xr),M(Oy,xr,null),e(xr,Bpr),e(xr,V1e),e(V1e,Ppr),e(xr,Ipr),e(xr,en),e(en,qpr),e(en,X1e),e(X1e,Npr),e(en,jpr),e(en,z1e),e(z1e,Dpr),e(en,Gpr),e(en,Q1e),e(Q1e,Opr),e(en,Vpr),e(xr,Xpr),e(xr,ye),e(ye,T9),e(T9,W1e),e(W1e,zpr),e(T9,Qpr),e(T9,GQ),e(GQ,Wpr),e(T9,Hpr),e(ye,Upr),e(ye,M9),e(M9,H1e),e(H1e,Jpr),e(M9,Ypr),e(M9,OQ),e(OQ,Kpr),e(M9,Zpr),e(ye,eur),e(ye,E9),e(E9,U1e),e(U1e,our),e(E9,rur),e(E9,VQ),e(VQ,tur),e(E9,aur),e(ye,nur),e(ye,C9),e(C9,J1e),e(J1e,sur),e(C9,lur),e(C9,XQ),e(XQ,iur),e(C9,dur),e(ye,cur),e(ye,w9),e(w9,Y1e),e(Y1e,fur),e(w9,mur),e(w9,zQ),e(zQ,gur),e(w9,hur),e(ye,pur),e(ye,A9),e(A9,K1e),e(K1e,uur),e(A9,_ur),e(A9,QQ),e(QQ,bur),e(A9,vur),e(ye,Fur),e(ye,y9),e(y9,Z1e),e(Z1e,Tur),e(y9,Mur),e(y9,WQ),e(WQ,Eur),e(y9,Cur),e(ye,wur),e(ye,L9),e(L9,ebe),e(ebe,Aur),e(L9,yur),e(L9,HQ),e(HQ,Lur),e(L9,xur),e(ye,$ur),e(ye,x9),e(x9,obe),e(obe,kur),e(x9,Sur),e(x9,UQ),e(UQ,Rur),e(x9,Bur),e(ye,Pur),e(ye,$9),e($9,rbe),e(rbe,Iur),e($9,qur),e($9,JQ),e(JQ,Nur),e($9,jur),e(xr,Dur),M(k9,xr,null),b(f,cIe,_),b(f,Yd,_),e(Yd,S9),e(S9,tbe),M(Vy,tbe,null),e(Yd,Gur),e(Yd,abe),e(abe,Our),b(f,fIe,_),b(f,tr,_),M(Xy,tr,null),e(tr,Vur),e(tr,Kd),e(Kd,Xur),e(Kd,YQ),e(YQ,zur),e(Kd,Qur),e(Kd,KQ),e(KQ,Wur),e(Kd,Hur),e(tr,Uur),e(tr,zy),e(zy,Jur),e(zy,nbe),e(nbe,Yur),e(zy,Kur),e(tr,Zur),e(tr,xt),M(Qy,xt,null),e(xt,e_r),e(xt,sbe),e(sbe,o_r),e(xt,r_r),e(xt,Zd),e(Zd,t_r),e(Zd,lbe),e(lbe,a_r),e(Zd,n_r),e(Zd,ZQ),e(ZQ,s_r),e(Zd,l_r),e(xt,i_r),M(R9,xt,null),e(tr,d_r),e(tr,$r),M(Wy,$r,null),e($r,c_r),e($r,ibe),e(ibe,f_r),e($r,m_r),e($r,on),e(on,g_r),e(on,dbe),e(dbe,h_r),e(on,p_r),e(on,cbe),e(cbe,u_r),e(on,__r),e(on,fbe),e(fbe,b_r),e(on,v_r),e($r,F_r),e($r,Z),e(Z,B9),e(B9,mbe),e(mbe,T_r),e(B9,M_r),e(B9,eW),e(eW,E_r),e(B9,C_r),e(Z,w_r),e(Z,P9),e(P9,gbe),e(gbe,A_r),e(P9,y_r),e(P9,oW),e(oW,L_r),e(P9,x_r),e(Z,$_r),e(Z,I9),e(I9,hbe),e(hbe,k_r),e(I9,S_r),e(I9,rW),e(rW,R_r),e(I9,B_r),e(Z,P_r),e(Z,q9),e(q9,pbe),e(pbe,I_r),e(q9,q_r),e(q9,tW),e(tW,N_r),e(q9,j_r),e(Z,D_r),e(Z,N9),e(N9,ube),e(ube,G_r),e(N9,O_r),e(N9,aW),e(aW,V_r),e(N9,X_r),e(Z,z_r),e(Z,j9),e(j9,_be),e(_be,Q_r),e(j9,W_r),e(j9,nW),e(nW,H_r),e(j9,U_r),e(Z,J_r),e(Z,D9),e(D9,bbe),e(bbe,Y_r),e(D9,K_r),e(D9,sW),e(sW,Z_r),e(D9,e2r),e(Z,o2r),e(Z,G9),e(G9,vbe),e(vbe,r2r),e(G9,t2r),e(G9,lW),e(lW,a2r),e(G9,n2r),e(Z,s2r),e(Z,O9),e(O9,Fbe),e(Fbe,l2r),e(O9,i2r),e(O9,iW),e(iW,d2r),e(O9,c2r),e(Z,f2r),e(Z,V9),e(V9,Tbe),e(Tbe,m2r),e(V9,g2r),e(V9,dW),e(dW,h2r),e(V9,p2r),e(Z,u2r),e(Z,X9),e(X9,Mbe),e(Mbe,_2r),e(X9,b2r),e(X9,cW),e(cW,v2r),e(X9,F2r),e(Z,T2r),e(Z,z9),e(z9,Ebe),e(Ebe,M2r),e(z9,E2r),e(z9,fW),e(fW,C2r),e(z9,w2r),e(Z,A2r),e(Z,Q9),e(Q9,Cbe),e(Cbe,y2r),e(Q9,L2r),e(Q9,mW),e(mW,x2r),e(Q9,$2r),e(Z,k2r),e(Z,W9),e(W9,wbe),e(wbe,S2r),e(W9,R2r),e(W9,gW),e(gW,B2r),e(W9,P2r),e(Z,I2r),e(Z,H9),e(H9,Abe),e(Abe,q2r),e(H9,N2r),e(H9,hW),e(hW,j2r),e(H9,D2r),e(Z,G2r),e(Z,U9),e(U9,ybe),e(ybe,O2r),e(U9,V2r),e(U9,pW),e(pW,X2r),e(U9,z2r),e(Z,Q2r),e(Z,J9),e(J9,Lbe),e(Lbe,W2r),e(J9,H2r),e(J9,uW),e(uW,U2r),e(J9,J2r),e(Z,Y2r),e(Z,Y9),e(Y9,xbe),e(xbe,K2r),e(Y9,Z2r),e(Y9,_W),e(_W,e1r),e(Y9,o1r),e(Z,r1r),e(Z,K9),e(K9,$be),e($be,t1r),e(K9,a1r),e(K9,bW),e(bW,n1r),e(K9,s1r),e(Z,l1r),e(Z,Z9),e(Z9,kbe),e(kbe,i1r),e(Z9,d1r),e(Z9,vW),e(vW,c1r),e(Z9,f1r),e(Z,m1r),e(Z,eM),e(eM,Sbe),e(Sbe,g1r),e(eM,h1r),e(eM,FW),e(FW,p1r),e(eM,u1r),e(Z,_1r),e(Z,oM),e(oM,Rbe),e(Rbe,b1r),e(oM,v1r),e(oM,TW),e(TW,F1r),e(oM,T1r),e(Z,M1r),e(Z,rM),e(rM,Bbe),e(Bbe,E1r),e(rM,C1r),e(rM,MW),e(MW,w1r),e(rM,A1r),e(Z,y1r),e(Z,tM),e(tM,Pbe),e(Pbe,L1r),e(tM,x1r),e(tM,EW),e(EW,$1r),e(tM,k1r),e(Z,S1r),e(Z,aM),e(aM,Ibe),e(Ibe,R1r),e(aM,B1r),e(aM,CW),e(CW,P1r),e(aM,I1r),e(Z,q1r),e(Z,nM),e(nM,qbe),e(qbe,N1r),e(nM,j1r),e(nM,wW),e(wW,D1r),e(nM,G1r),e($r,O1r),M(sM,$r,null),b(f,mIe,_),b(f,ec,_),e(ec,lM),e(lM,Nbe),M(Hy,Nbe,null),e(ec,V1r),e(ec,jbe),e(jbe,X1r),b(f,gIe,_),b(f,ar,_),M(Uy,ar,null),e(ar,z1r),e(ar,oc),e(oc,Q1r),e(oc,AW),e(AW,W1r),e(oc,H1r),e(oc,yW),e(yW,U1r),e(oc,J1r),e(ar,Y1r),e(ar,Jy),e(Jy,K1r),e(Jy,Dbe),e(Dbe,Z1r),e(Jy,ebr),e(ar,obr),e(ar,$t),M(Yy,$t,null),e($t,rbr),e($t,Gbe),e(Gbe,tbr),e($t,abr),e($t,rc),e(rc,nbr),e(rc,Obe),e(Obe,sbr),e(rc,lbr),e(rc,LW),e(LW,ibr),e(rc,dbr),e($t,cbr),M(iM,$t,null),e(ar,fbr),e(ar,kr),M(Ky,kr,null),e(kr,mbr),e(kr,Vbe),e(Vbe,gbr),e(kr,hbr),e(kr,rn),e(rn,pbr),e(rn,Xbe),e(Xbe,ubr),e(rn,_br),e(rn,zbe),e(zbe,bbr),e(rn,vbr),e(rn,Qbe),e(Qbe,Fbr),e(rn,Tbr),e(kr,Mbr),e(kr,pe),e(pe,dM),e(dM,Wbe),e(Wbe,Ebr),e(dM,Cbr),e(dM,xW),e(xW,wbr),e(dM,Abr),e(pe,ybr),e(pe,cM),e(cM,Hbe),e(Hbe,Lbr),e(cM,xbr),e(cM,$W),e($W,$br),e(cM,kbr),e(pe,Sbr),e(pe,fM),e(fM,Ube),e(Ube,Rbr),e(fM,Bbr),e(fM,kW),e(kW,Pbr),e(fM,Ibr),e(pe,qbr),e(pe,mM),e(mM,Jbe),e(Jbe,Nbr),e(mM,jbr),e(mM,SW),e(SW,Dbr),e(mM,Gbr),e(pe,Obr),e(pe,gM),e(gM,Ybe),e(Ybe,Vbr),e(gM,Xbr),e(gM,RW),e(RW,zbr),e(gM,Qbr),e(pe,Wbr),e(pe,hM),e(hM,Kbe),e(Kbe,Hbr),e(hM,Ubr),e(hM,BW),e(BW,Jbr),e(hM,Ybr),e(pe,Kbr),e(pe,pM),e(pM,Zbe),e(Zbe,Zbr),e(pM,evr),e(pM,PW),e(PW,ovr),e(pM,rvr),e(pe,tvr),e(pe,uM),e(uM,eve),e(eve,avr),e(uM,nvr),e(uM,IW),e(IW,svr),e(uM,lvr),e(pe,ivr),e(pe,_M),e(_M,ove),e(ove,dvr),e(_M,cvr),e(_M,qW),e(qW,fvr),e(_M,mvr),e(pe,gvr),e(pe,bM),e(bM,rve),e(rve,hvr),e(bM,pvr),e(bM,NW),e(NW,uvr),e(bM,_vr),e(pe,bvr),e(pe,vM),e(vM,tve),e(tve,vvr),e(vM,Fvr),e(vM,jW),e(jW,Tvr),e(vM,Mvr),e(pe,Evr),e(pe,FM),e(FM,ave),e(ave,Cvr),e(FM,wvr),e(FM,DW),e(DW,Avr),e(FM,yvr),e(pe,Lvr),e(pe,TM),e(TM,nve),e(nve,xvr),e(TM,$vr),e(TM,GW),e(GW,kvr),e(TM,Svr),e(pe,Rvr),e(pe,MM),e(MM,sve),e(sve,Bvr),e(MM,Pvr),e(MM,OW),e(OW,Ivr),e(MM,qvr),e(pe,Nvr),e(pe,EM),e(EM,lve),e(lve,jvr),e(EM,Dvr),e(EM,VW),e(VW,Gvr),e(EM,Ovr),e(pe,Vvr),e(pe,CM),e(CM,ive),e(ive,Xvr),e(CM,zvr),e(CM,XW),e(XW,Qvr),e(CM,Wvr),e(pe,Hvr),e(pe,wM),e(wM,dve),e(dve,Uvr),e(wM,Jvr),e(wM,zW),e(zW,Yvr),e(wM,Kvr),e(kr,Zvr),M(AM,kr,null),b(f,hIe,_),b(f,tc,_),e(tc,yM),e(yM,cve),M(Zy,cve,null),e(tc,eFr),e(tc,fve),e(fve,oFr),b(f,pIe,_),b(f,nr,_),M(eL,nr,null),e(nr,rFr),e(nr,ac),e(ac,tFr),e(ac,QW),e(QW,aFr),e(ac,nFr),e(ac,WW),e(WW,sFr),e(ac,lFr),e(nr,iFr),e(nr,oL),e(oL,dFr),e(oL,mve),e(mve,cFr),e(oL,fFr),e(nr,mFr),e(nr,kt),M(rL,kt,null),e(kt,gFr),e(kt,gve),e(gve,hFr),e(kt,pFr),e(kt,nc),e(nc,uFr),e(nc,hve),e(hve,_Fr),e(nc,bFr),e(nc,HW),e(HW,vFr),e(nc,FFr),e(kt,TFr),M(LM,kt,null),e(nr,MFr),e(nr,Sr),M(tL,Sr,null),e(Sr,EFr),e(Sr,pve),e(pve,CFr),e(Sr,wFr),e(Sr,tn),e(tn,AFr),e(tn,uve),e(uve,yFr),e(tn,LFr),e(tn,_ve),e(_ve,xFr),e(tn,$Fr),e(tn,bve),e(bve,kFr),e(tn,SFr),e(Sr,RFr),e(Sr,vve),e(vve,xM),e(xM,Fve),e(Fve,BFr),e(xM,PFr),e(xM,UW),e(UW,IFr),e(xM,qFr),e(Sr,NFr),M($M,Sr,null),b(f,uIe,_),b(f,sc,_),e(sc,kM),e(kM,Tve),M(aL,Tve,null),e(sc,jFr),e(sc,Mve),e(Mve,DFr),b(f,_Ie,_),b(f,sr,_),M(nL,sr,null),e(sr,GFr),e(sr,lc),e(lc,OFr),e(lc,JW),e(JW,VFr),e(lc,XFr),e(lc,YW),e(YW,zFr),e(lc,QFr),e(sr,WFr),e(sr,sL),e(sL,HFr),e(sL,Eve),e(Eve,UFr),e(sL,JFr),e(sr,YFr),e(sr,St),M(lL,St,null),e(St,KFr),e(St,Cve),e(Cve,ZFr),e(St,e6r),e(St,ic),e(ic,o6r),e(ic,wve),e(wve,r6r),e(ic,t6r),e(ic,KW),e(KW,a6r),e(ic,n6r),e(St,s6r),M(SM,St,null),e(sr,l6r),e(sr,Rr),M(iL,Rr,null),e(Rr,i6r),e(Rr,Ave),e(Ave,d6r),e(Rr,c6r),e(Rr,an),e(an,f6r),e(an,yve),e(yve,m6r),e(an,g6r),e(an,Lve),e(Lve,h6r),e(an,p6r),e(an,xve),e(xve,u6r),e(an,_6r),e(Rr,b6r),e(Rr,de),e(de,RM),e(RM,$ve),e($ve,v6r),e(RM,F6r),e(RM,ZW),e(ZW,T6r),e(RM,M6r),e(de,E6r),e(de,BM),e(BM,kve),e(kve,C6r),e(BM,w6r),e(BM,eH),e(eH,A6r),e(BM,y6r),e(de,L6r),e(de,PM),e(PM,Sve),e(Sve,x6r),e(PM,$6r),e(PM,oH),e(oH,k6r),e(PM,S6r),e(de,R6r),e(de,IM),e(IM,Rve),e(Rve,B6r),e(IM,P6r),e(IM,rH),e(rH,I6r),e(IM,q6r),e(de,N6r),e(de,qM),e(qM,Bve),e(Bve,j6r),e(qM,D6r),e(qM,tH),e(tH,G6r),e(qM,O6r),e(de,V6r),e(de,NM),e(NM,Pve),e(Pve,X6r),e(NM,z6r),e(NM,aH),e(aH,Q6r),e(NM,W6r),e(de,H6r),e(de,jM),e(jM,Ive),e(Ive,U6r),e(jM,J6r),e(jM,nH),e(nH,Y6r),e(jM,K6r),e(de,Z6r),e(de,DM),e(DM,qve),e(qve,eTr),e(DM,oTr),e(DM,sH),e(sH,rTr),e(DM,tTr),e(de,aTr),e(de,GM),e(GM,Nve),e(Nve,nTr),e(GM,sTr),e(GM,lH),e(lH,lTr),e(GM,iTr),e(de,dTr),e(de,OM),e(OM,jve),e(jve,cTr),e(OM,fTr),e(OM,iH),e(iH,mTr),e(OM,gTr),e(de,hTr),e(de,VM),e(VM,Dve),e(Dve,pTr),e(VM,uTr),e(VM,dH),e(dH,_Tr),e(VM,bTr),e(de,vTr),e(de,XM),e(XM,Gve),e(Gve,FTr),e(XM,TTr),e(XM,cH),e(cH,MTr),e(XM,ETr),e(de,CTr),e(de,zM),e(zM,Ove),e(Ove,wTr),e(zM,ATr),e(zM,fH),e(fH,yTr),e(zM,LTr),e(de,xTr),e(de,QM),e(QM,Vve),e(Vve,$Tr),e(QM,kTr),e(QM,mH),e(mH,STr),e(QM,RTr),e(de,BTr),e(de,WM),e(WM,Xve),e(Xve,PTr),e(WM,ITr),e(WM,gH),e(gH,qTr),e(WM,NTr),e(de,jTr),e(de,HM),e(HM,zve),e(zve,DTr),e(HM,GTr),e(HM,hH),e(hH,OTr),e(HM,VTr),e(de,XTr),e(de,UM),e(UM,Qve),e(Qve,zTr),e(UM,QTr),e(UM,pH),e(pH,WTr),e(UM,HTr),e(de,UTr),e(de,JM),e(JM,Wve),e(Wve,JTr),e(JM,YTr),e(JM,uH),e(uH,KTr),e(JM,ZTr),e(de,e7r),e(de,YM),e(YM,Hve),e(Hve,o7r),e(YM,r7r),e(YM,_H),e(_H,t7r),e(YM,a7r),e(de,n7r),e(de,KM),e(KM,Uve),e(Uve,s7r),e(KM,l7r),e(KM,bH),e(bH,i7r),e(KM,d7r),e(Rr,c7r),M(ZM,Rr,null),b(f,bIe,_),b(f,dc,_),e(dc,e4),e(e4,Jve),M(dL,Jve,null),e(dc,f7r),e(dc,Yve),e(Yve,m7r),b(f,vIe,_),b(f,lr,_),M(cL,lr,null),e(lr,g7r),e(lr,cc),e(cc,h7r),e(cc,vH),e(vH,p7r),e(cc,u7r),e(cc,FH),e(FH,_7r),e(cc,b7r),e(lr,v7r),e(lr,fL),e(fL,F7r),e(fL,Kve),e(Kve,T7r),e(fL,M7r),e(lr,E7r),e(lr,Rt),M(mL,Rt,null),e(Rt,C7r),e(Rt,Zve),e(Zve,w7r),e(Rt,A7r),e(Rt,fc),e(fc,y7r),e(fc,eFe),e(eFe,L7r),e(fc,x7r),e(fc,TH),e(TH,$7r),e(fc,k7r),e(Rt,S7r),M(o4,Rt,null),e(lr,R7r),e(lr,Br),M(gL,Br,null),e(Br,B7r),e(Br,oFe),e(oFe,P7r),e(Br,I7r),e(Br,nn),e(nn,q7r),e(nn,rFe),e(rFe,N7r),e(nn,j7r),e(nn,tFe),e(tFe,D7r),e(nn,G7r),e(nn,aFe),e(aFe,O7r),e(nn,V7r),e(Br,X7r),e(Br,ce),e(ce,r4),e(r4,nFe),e(nFe,z7r),e(r4,Q7r),e(r4,MH),e(MH,W7r),e(r4,H7r),e(ce,U7r),e(ce,t4),e(t4,sFe),e(sFe,J7r),e(t4,Y7r),e(t4,EH),e(EH,K7r),e(t4,Z7r),e(ce,e9r),e(ce,a4),e(a4,lFe),e(lFe,o9r),e(a4,r9r),e(a4,CH),e(CH,t9r),e(a4,a9r),e(ce,n9r),e(ce,n4),e(n4,iFe),e(iFe,s9r),e(n4,l9r),e(n4,wH),e(wH,i9r),e(n4,d9r),e(ce,c9r),e(ce,s4),e(s4,dFe),e(dFe,f9r),e(s4,m9r),e(s4,AH),e(AH,g9r),e(s4,h9r),e(ce,p9r),e(ce,l4),e(l4,cFe),e(cFe,u9r),e(l4,_9r),e(l4,yH),e(yH,b9r),e(l4,v9r),e(ce,F9r),e(ce,i4),e(i4,fFe),e(fFe,T9r),e(i4,M9r),e(i4,LH),e(LH,E9r),e(i4,C9r),e(ce,w9r),e(ce,d4),e(d4,mFe),e(mFe,A9r),e(d4,y9r),e(d4,xH),e(xH,L9r),e(d4,x9r),e(ce,$9r),e(ce,c4),e(c4,gFe),e(gFe,k9r),e(c4,S9r),e(c4,$H),e($H,R9r),e(c4,B9r),e(ce,P9r),e(ce,f4),e(f4,hFe),e(hFe,I9r),e(f4,q9r),e(f4,kH),e(kH,N9r),e(f4,j9r),e(ce,D9r),e(ce,m4),e(m4,pFe),e(pFe,G9r),e(m4,O9r),e(m4,SH),e(SH,V9r),e(m4,X9r),e(ce,z9r),e(ce,g4),e(g4,uFe),e(uFe,Q9r),e(g4,W9r),e(g4,RH),e(RH,H9r),e(g4,U9r),e(ce,J9r),e(ce,h4),e(h4,_Fe),e(_Fe,Y9r),e(h4,K9r),e(h4,BH),e(BH,Z9r),e(h4,eMr),e(ce,oMr),e(ce,p4),e(p4,bFe),e(bFe,rMr),e(p4,tMr),e(p4,PH),e(PH,aMr),e(p4,nMr),e(ce,sMr),e(ce,u4),e(u4,vFe),e(vFe,lMr),e(u4,iMr),e(u4,IH),e(IH,dMr),e(u4,cMr),e(ce,fMr),e(ce,_4),e(_4,FFe),e(FFe,mMr),e(_4,gMr),e(_4,qH),e(qH,hMr),e(_4,pMr),e(ce,uMr),e(ce,b4),e(b4,TFe),e(TFe,_Mr),e(b4,bMr),e(b4,NH),e(NH,vMr),e(b4,FMr),e(ce,TMr),e(ce,v4),e(v4,MFe),e(MFe,MMr),e(v4,EMr),e(v4,jH),e(jH,CMr),e(v4,wMr),e(ce,AMr),e(ce,F4),e(F4,EFe),e(EFe,yMr),e(F4,LMr),e(F4,DH),e(DH,xMr),e(F4,$Mr),e(ce,kMr),e(ce,T4),e(T4,CFe),e(CFe,SMr),e(T4,RMr),e(T4,GH),e(GH,BMr),e(T4,PMr),e(Br,IMr),M(M4,Br,null),b(f,FIe,_),b(f,mc,_),e(mc,E4),e(E4,wFe),M(hL,wFe,null),e(mc,qMr),e(mc,AFe),e(AFe,NMr),b(f,TIe,_),b(f,ir,_),M(pL,ir,null),e(ir,jMr),e(ir,gc),e(gc,DMr),e(gc,OH),e(OH,GMr),e(gc,OMr),e(gc,VH),e(VH,VMr),e(gc,XMr),e(ir,zMr),e(ir,uL),e(uL,QMr),e(uL,yFe),e(yFe,WMr),e(uL,HMr),e(ir,UMr),e(ir,Bt),M(_L,Bt,null),e(Bt,JMr),e(Bt,LFe),e(LFe,YMr),e(Bt,KMr),e(Bt,hc),e(hc,ZMr),e(hc,xFe),e(xFe,e4r),e(hc,o4r),e(hc,XH),e(XH,r4r),e(hc,t4r),e(Bt,a4r),M(C4,Bt,null),e(ir,n4r),e(ir,Pr),M(bL,Pr,null),e(Pr,s4r),e(Pr,$Fe),e($Fe,l4r),e(Pr,i4r),e(Pr,sn),e(sn,d4r),e(sn,kFe),e(kFe,c4r),e(sn,f4r),e(sn,SFe),e(SFe,m4r),e(sn,g4r),e(sn,RFe),e(RFe,h4r),e(sn,p4r),e(Pr,u4r),e(Pr,BFe),e(BFe,w4),e(w4,PFe),e(PFe,_4r),e(w4,b4r),e(w4,zH),e(zH,v4r),e(w4,F4r),e(Pr,T4r),M(A4,Pr,null),b(f,MIe,_),b(f,pc,_),e(pc,y4),e(y4,IFe),M(vL,IFe,null),e(pc,M4r),e(pc,qFe),e(qFe,E4r),b(f,EIe,_),b(f,dr,_),M(FL,dr,null),e(dr,C4r),e(dr,uc),e(uc,w4r),e(uc,QH),e(QH,A4r),e(uc,y4r),e(uc,WH),e(WH,L4r),e(uc,x4r),e(dr,$4r),e(dr,TL),e(TL,k4r),e(TL,NFe),e(NFe,S4r),e(TL,R4r),e(dr,B4r),e(dr,Pt),M(ML,Pt,null),e(Pt,P4r),e(Pt,jFe),e(jFe,I4r),e(Pt,q4r),e(Pt,_c),e(_c,N4r),e(_c,DFe),e(DFe,j4r),e(_c,D4r),e(_c,HH),e(HH,G4r),e(_c,O4r),e(Pt,V4r),M(L4,Pt,null),e(dr,X4r),e(dr,Ir),M(EL,Ir,null),e(Ir,z4r),e(Ir,GFe),e(GFe,Q4r),e(Ir,W4r),e(Ir,ln),e(ln,H4r),e(ln,OFe),e(OFe,U4r),e(ln,J4r),e(ln,VFe),e(VFe,Y4r),e(ln,K4r),e(ln,XFe),e(XFe,Z4r),e(ln,eEr),e(Ir,oEr),e(Ir,zFe),e(zFe,x4),e(x4,QFe),e(QFe,rEr),e(x4,tEr),e(x4,UH),e(UH,aEr),e(x4,nEr),e(Ir,sEr),M($4,Ir,null),b(f,CIe,_),b(f,bc,_),e(bc,k4),e(k4,WFe),M(CL,WFe,null),e(bc,lEr),e(bc,HFe),e(HFe,iEr),b(f,wIe,_),b(f,cr,_),M(wL,cr,null),e(cr,dEr),e(cr,vc),e(vc,cEr),e(vc,JH),e(JH,fEr),e(vc,mEr),e(vc,YH),e(YH,gEr),e(vc,hEr),e(cr,pEr),e(cr,AL),e(AL,uEr),e(AL,UFe),e(UFe,_Er),e(AL,bEr),e(cr,vEr),e(cr,It),M(yL,It,null),e(It,FEr),e(It,JFe),e(JFe,TEr),e(It,MEr),e(It,Fc),e(Fc,EEr),e(Fc,YFe),e(YFe,CEr),e(Fc,wEr),e(Fc,KH),e(KH,AEr),e(Fc,yEr),e(It,LEr),M(S4,It,null),e(cr,xEr),e(cr,qr),M(LL,qr,null),e(qr,$Er),e(qr,KFe),e(KFe,kEr),e(qr,SEr),e(qr,dn),e(dn,REr),e(dn,ZFe),e(ZFe,BEr),e(dn,PEr),e(dn,e6e),e(e6e,IEr),e(dn,qEr),e(dn,o6e),e(o6e,NEr),e(dn,jEr),e(qr,DEr),e(qr,ee),e(ee,R4),e(R4,r6e),e(r6e,GEr),e(R4,OEr),e(R4,ZH),e(ZH,VEr),e(R4,XEr),e(ee,zEr),e(ee,B4),e(B4,t6e),e(t6e,QEr),e(B4,WEr),e(B4,eU),e(eU,HEr),e(B4,UEr),e(ee,JEr),e(ee,P4),e(P4,a6e),e(a6e,YEr),e(P4,KEr),e(P4,oU),e(oU,ZEr),e(P4,e5r),e(ee,o5r),e(ee,I4),e(I4,n6e),e(n6e,r5r),e(I4,t5r),e(I4,rU),e(rU,a5r),e(I4,n5r),e(ee,s5r),e(ee,q4),e(q4,s6e),e(s6e,l5r),e(q4,i5r),e(q4,tU),e(tU,d5r),e(q4,c5r),e(ee,f5r),e(ee,N4),e(N4,l6e),e(l6e,m5r),e(N4,g5r),e(N4,aU),e(aU,h5r),e(N4,p5r),e(ee,u5r),e(ee,j4),e(j4,i6e),e(i6e,_5r),e(j4,b5r),e(j4,nU),e(nU,v5r),e(j4,F5r),e(ee,T5r),e(ee,D4),e(D4,d6e),e(d6e,M5r),e(D4,E5r),e(D4,sU),e(sU,C5r),e(D4,w5r),e(ee,A5r),e(ee,G4),e(G4,c6e),e(c6e,y5r),e(G4,L5r),e(G4,lU),e(lU,x5r),e(G4,$5r),e(ee,k5r),e(ee,O4),e(O4,f6e),e(f6e,S5r),e(O4,R5r),e(O4,iU),e(iU,B5r),e(O4,P5r),e(ee,I5r),e(ee,V4),e(V4,m6e),e(m6e,q5r),e(V4,N5r),e(V4,dU),e(dU,j5r),e(V4,D5r),e(ee,G5r),e(ee,X4),e(X4,g6e),e(g6e,O5r),e(X4,V5r),e(X4,cU),e(cU,X5r),e(X4,z5r),e(ee,Q5r),e(ee,z4),e(z4,h6e),e(h6e,W5r),e(z4,H5r),e(z4,fU),e(fU,U5r),e(z4,J5r),e(ee,Y5r),e(ee,Q4),e(Q4,p6e),e(p6e,K5r),e(Q4,Z5r),e(Q4,mU),e(mU,eCr),e(Q4,oCr),e(ee,rCr),e(ee,W4),e(W4,u6e),e(u6e,tCr),e(W4,aCr),e(W4,gU),e(gU,nCr),e(W4,sCr),e(ee,lCr),e(ee,H4),e(H4,_6e),e(_6e,iCr),e(H4,dCr),e(H4,hU),e(hU,cCr),e(H4,fCr),e(ee,mCr),e(ee,U4),e(U4,b6e),e(b6e,gCr),e(U4,hCr),e(U4,pU),e(pU,pCr),e(U4,uCr),e(ee,_Cr),e(ee,J4),e(J4,v6e),e(v6e,bCr),e(J4,vCr),e(J4,uU),e(uU,FCr),e(J4,TCr),e(ee,MCr),e(ee,Y4),e(Y4,F6e),e(F6e,ECr),e(Y4,CCr),e(Y4,_U),e(_U,wCr),e(Y4,ACr),e(ee,yCr),e(ee,K4),e(K4,T6e),e(T6e,LCr),e(K4,xCr),e(K4,bU),e(bU,$Cr),e(K4,kCr),e(ee,SCr),e(ee,Z4),e(Z4,M6e),e(M6e,RCr),e(Z4,BCr),e(Z4,vU),e(vU,PCr),e(Z4,ICr),e(ee,qCr),e(ee,eE),e(eE,E6e),e(E6e,NCr),e(eE,jCr),e(eE,FU),e(FU,DCr),e(eE,GCr),e(ee,OCr),e(ee,oE),e(oE,C6e),e(C6e,VCr),e(oE,XCr),e(oE,TU),e(TU,zCr),e(oE,QCr),e(ee,WCr),e(ee,rE),e(rE,w6e),e(w6e,HCr),e(rE,UCr),e(rE,MU),e(MU,JCr),e(rE,YCr),e(ee,KCr),e(ee,tE),e(tE,A6e),e(A6e,ZCr),e(tE,e3r),e(tE,EU),e(EU,o3r),e(tE,r3r),e(ee,t3r),e(ee,aE),e(aE,y6e),e(y6e,a3r),e(aE,n3r),e(aE,CU),e(CU,s3r),e(aE,l3r),e(qr,i3r),M(nE,qr,null),b(f,AIe,_),b(f,Tc,_),e(Tc,sE),e(sE,L6e),M(xL,L6e,null),e(Tc,d3r),e(Tc,x6e),e(x6e,c3r),b(f,yIe,_),b(f,fr,_),M($L,fr,null),e(fr,f3r),e(fr,Mc),e(Mc,m3r),e(Mc,wU),e(wU,g3r),e(Mc,h3r),e(Mc,AU),e(AU,p3r),e(Mc,u3r),e(fr,_3r),e(fr,kL),e(kL,b3r),e(kL,$6e),e($6e,v3r),e(kL,F3r),e(fr,T3r),e(fr,qt),M(SL,qt,null),e(qt,M3r),e(qt,k6e),e(k6e,E3r),e(qt,C3r),e(qt,Ec),e(Ec,w3r),e(Ec,S6e),e(S6e,A3r),e(Ec,y3r),e(Ec,yU),e(yU,L3r),e(Ec,x3r),e(qt,$3r),M(lE,qt,null),e(fr,k3r),e(fr,Nr),M(RL,Nr,null),e(Nr,S3r),e(Nr,R6e),e(R6e,R3r),e(Nr,B3r),e(Nr,cn),e(cn,P3r),e(cn,B6e),e(B6e,I3r),e(cn,q3r),e(cn,P6e),e(P6e,N3r),e(cn,j3r),e(cn,I6e),e(I6e,D3r),e(cn,G3r),e(Nr,O3r),e(Nr,Se),e(Se,iE),e(iE,q6e),e(q6e,V3r),e(iE,X3r),e(iE,LU),e(LU,z3r),e(iE,Q3r),e(Se,W3r),e(Se,dE),e(dE,N6e),e(N6e,H3r),e(dE,U3r),e(dE,xU),e(xU,J3r),e(dE,Y3r),e(Se,K3r),e(Se,cE),e(cE,j6e),e(j6e,Z3r),e(cE,ewr),e(cE,$U),e($U,owr),e(cE,rwr),e(Se,twr),e(Se,fE),e(fE,D6e),e(D6e,awr),e(fE,nwr),e(fE,kU),e(kU,swr),e(fE,lwr),e(Se,iwr),e(Se,mE),e(mE,G6e),e(G6e,dwr),e(mE,cwr),e(mE,SU),e(SU,fwr),e(mE,mwr),e(Se,gwr),e(Se,gE),e(gE,O6e),e(O6e,hwr),e(gE,pwr),e(gE,RU),e(RU,uwr),e(gE,_wr),e(Se,bwr),e(Se,hE),e(hE,V6e),e(V6e,vwr),e(hE,Fwr),e(hE,BU),e(BU,Twr),e(hE,Mwr),e(Se,Ewr),e(Se,pE),e(pE,X6e),e(X6e,Cwr),e(pE,wwr),e(pE,PU),e(PU,Awr),e(pE,ywr),e(Se,Lwr),e(Se,uE),e(uE,z6e),e(z6e,xwr),e(uE,$wr),e(uE,IU),e(IU,kwr),e(uE,Swr),e(Nr,Rwr),M(_E,Nr,null),b(f,LIe,_),b(f,Cc,_),e(Cc,bE),e(bE,Q6e),M(BL,Q6e,null),e(Cc,Bwr),e(Cc,W6e),e(W6e,Pwr),b(f,xIe,_),b(f,mr,_),M(PL,mr,null),e(mr,Iwr),e(mr,wc),e(wc,qwr),e(wc,qU),e(qU,Nwr),e(wc,jwr),e(wc,NU),e(NU,Dwr),e(wc,Gwr),e(mr,Owr),e(mr,IL),e(IL,Vwr),e(IL,H6e),e(H6e,Xwr),e(IL,zwr),e(mr,Qwr),e(mr,Nt),M(qL,Nt,null),e(Nt,Wwr),e(Nt,U6e),e(U6e,Hwr),e(Nt,Uwr),e(Nt,Ac),e(Ac,Jwr),e(Ac,J6e),e(J6e,Ywr),e(Ac,Kwr),e(Ac,jU),e(jU,Zwr),e(Ac,eAr),e(Nt,oAr),M(vE,Nt,null),e(mr,rAr),e(mr,jr),M(NL,jr,null),e(jr,tAr),e(jr,Y6e),e(Y6e,aAr),e(jr,nAr),e(jr,fn),e(fn,sAr),e(fn,K6e),e(K6e,lAr),e(fn,iAr),e(fn,Z6e),e(Z6e,dAr),e(fn,cAr),e(fn,eTe),e(eTe,fAr),e(fn,mAr),e(jr,gAr),e(jr,Fe),e(Fe,FE),e(FE,oTe),e(oTe,hAr),e(FE,pAr),e(FE,DU),e(DU,uAr),e(FE,_Ar),e(Fe,bAr),e(Fe,TE),e(TE,rTe),e(rTe,vAr),e(TE,FAr),e(TE,GU),e(GU,TAr),e(TE,MAr),e(Fe,EAr),e(Fe,ME),e(ME,tTe),e(tTe,CAr),e(ME,wAr),e(ME,OU),e(OU,AAr),e(ME,yAr),e(Fe,LAr),e(Fe,EE),e(EE,aTe),e(aTe,xAr),e(EE,$Ar),e(EE,VU),e(VU,kAr),e(EE,SAr),e(Fe,RAr),e(Fe,CE),e(CE,nTe),e(nTe,BAr),e(CE,PAr),e(CE,XU),e(XU,IAr),e(CE,qAr),e(Fe,NAr),e(Fe,wE),e(wE,sTe),e(sTe,jAr),e(wE,DAr),e(wE,zU),e(zU,GAr),e(wE,OAr),e(Fe,VAr),e(Fe,AE),e(AE,lTe),e(lTe,XAr),e(AE,zAr),e(AE,QU),e(QU,QAr),e(AE,WAr),e(Fe,HAr),e(Fe,yE),e(yE,iTe),e(iTe,UAr),e(yE,JAr),e(yE,WU),e(WU,YAr),e(yE,KAr),e(Fe,ZAr),e(Fe,LE),e(LE,dTe),e(dTe,e0r),e(LE,o0r),e(LE,HU),e(HU,r0r),e(LE,t0r),e(Fe,a0r),e(Fe,xE),e(xE,cTe),e(cTe,n0r),e(xE,s0r),e(xE,UU),e(UU,l0r),e(xE,i0r),e(Fe,d0r),e(Fe,$E),e($E,fTe),e(fTe,c0r),e($E,f0r),e($E,JU),e(JU,m0r),e($E,g0r),e(Fe,h0r),e(Fe,kE),e(kE,mTe),e(mTe,p0r),e(kE,u0r),e(kE,YU),e(YU,_0r),e(kE,b0r),e(Fe,v0r),e(Fe,SE),e(SE,gTe),e(gTe,F0r),e(SE,T0r),e(SE,KU),e(KU,M0r),e(SE,E0r),e(jr,C0r),M(RE,jr,null),b(f,$Ie,_),b(f,yc,_),e(yc,BE),e(BE,hTe),M(jL,hTe,null),e(yc,w0r),e(yc,pTe),e(pTe,A0r),b(f,kIe,_),b(f,gr,_),M(DL,gr,null),e(gr,y0r),e(gr,Lc),e(Lc,L0r),e(Lc,ZU),e(ZU,x0r),e(Lc,$0r),e(Lc,eJ),e(eJ,k0r),e(Lc,S0r),e(gr,R0r),e(gr,GL),e(GL,B0r),e(GL,uTe),e(uTe,P0r),e(GL,I0r),e(gr,q0r),e(gr,jt),M(OL,jt,null),e(jt,N0r),e(jt,_Te),e(_Te,j0r),e(jt,D0r),e(jt,xc),e(xc,G0r),e(xc,bTe),e(bTe,O0r),e(xc,V0r),e(xc,oJ),e(oJ,X0r),e(xc,z0r),e(jt,Q0r),M(PE,jt,null),e(gr,W0r),e(gr,Dr),M(VL,Dr,null),e(Dr,H0r),e(Dr,vTe),e(vTe,U0r),e(Dr,J0r),e(Dr,mn),e(mn,Y0r),e(mn,FTe),e(FTe,K0r),e(mn,Z0r),e(mn,TTe),e(TTe,eyr),e(mn,oyr),e(mn,MTe),e(MTe,ryr),e(mn,tyr),e(Dr,ayr),e(Dr,Le),e(Le,IE),e(IE,ETe),e(ETe,nyr),e(IE,syr),e(IE,rJ),e(rJ,lyr),e(IE,iyr),e(Le,dyr),e(Le,qE),e(qE,CTe),e(CTe,cyr),e(qE,fyr),e(qE,tJ),e(tJ,myr),e(qE,gyr),e(Le,hyr),e(Le,NE),e(NE,wTe),e(wTe,pyr),e(NE,uyr),e(NE,aJ),e(aJ,_yr),e(NE,byr),e(Le,vyr),e(Le,jE),e(jE,ATe),e(ATe,Fyr),e(jE,Tyr),e(jE,nJ),e(nJ,Myr),e(jE,Eyr),e(Le,Cyr),e(Le,DE),e(DE,yTe),e(yTe,wyr),e(DE,Ayr),e(DE,sJ),e(sJ,yyr),e(DE,Lyr),e(Le,xyr),e(Le,GE),e(GE,LTe),e(LTe,$yr),e(GE,kyr),e(GE,lJ),e(lJ,Syr),e(GE,Ryr),e(Le,Byr),e(Le,OE),e(OE,xTe),e(xTe,Pyr),e(OE,Iyr),e(OE,iJ),e(iJ,qyr),e(OE,Nyr),e(Le,jyr),e(Le,VE),e(VE,$Te),e($Te,Dyr),e(VE,Gyr),e(VE,dJ),e(dJ,Oyr),e(VE,Vyr),e(Le,Xyr),e(Le,XE),e(XE,kTe),e(kTe,zyr),e(XE,Qyr),e(XE,cJ),e(cJ,Wyr),e(XE,Hyr),e(Le,Uyr),e(Le,zE),e(zE,STe),e(STe,Jyr),e(zE,Yyr),e(zE,fJ),e(fJ,Kyr),e(zE,Zyr),e(Dr,eLr),M(QE,Dr,null),b(f,SIe,_),b(f,$c,_),e($c,WE),e(WE,RTe),M(XL,RTe,null),e($c,oLr),e($c,BTe),e(BTe,rLr),b(f,RIe,_),b(f,hr,_),M(zL,hr,null),e(hr,tLr),e(hr,kc),e(kc,aLr),e(kc,mJ),e(mJ,nLr),e(kc,sLr),e(kc,gJ),e(gJ,lLr),e(kc,iLr),e(hr,dLr),e(hr,QL),e(QL,cLr),e(QL,PTe),e(PTe,fLr),e(QL,mLr),e(hr,gLr),e(hr,Dt),M(WL,Dt,null),e(Dt,hLr),e(Dt,ITe),e(ITe,pLr),e(Dt,uLr),e(Dt,Sc),e(Sc,_Lr),e(Sc,qTe),e(qTe,bLr),e(Sc,vLr),e(Sc,hJ),e(hJ,FLr),e(Sc,TLr),e(Dt,MLr),M(HE,Dt,null),e(hr,ELr),e(hr,Gr),M(HL,Gr,null),e(Gr,CLr),e(Gr,NTe),e(NTe,wLr),e(Gr,ALr),e(Gr,gn),e(gn,yLr),e(gn,jTe),e(jTe,LLr),e(gn,xLr),e(gn,DTe),e(DTe,$Lr),e(gn,kLr),e(gn,GTe),e(GTe,SLr),e(gn,RLr),e(Gr,BLr),e(Gr,xe),e(xe,UE),e(UE,OTe),e(OTe,PLr),e(UE,ILr),e(UE,pJ),e(pJ,qLr),e(UE,NLr),e(xe,jLr),e(xe,JE),e(JE,VTe),e(VTe,DLr),e(JE,GLr),e(JE,uJ),e(uJ,OLr),e(JE,VLr),e(xe,XLr),e(xe,YE),e(YE,XTe),e(XTe,zLr),e(YE,QLr),e(YE,_J),e(_J,WLr),e(YE,HLr),e(xe,ULr),e(xe,KE),e(KE,zTe),e(zTe,JLr),e(KE,YLr),e(KE,bJ),e(bJ,KLr),e(KE,ZLr),e(xe,e8r),e(xe,ZE),e(ZE,QTe),e(QTe,o8r),e(ZE,r8r),e(ZE,vJ),e(vJ,t8r),e(ZE,a8r),e(xe,n8r),e(xe,e5),e(e5,WTe),e(WTe,s8r),e(e5,l8r),e(e5,FJ),e(FJ,i8r),e(e5,d8r),e(xe,c8r),e(xe,o5),e(o5,HTe),e(HTe,f8r),e(o5,m8r),e(o5,TJ),e(TJ,g8r),e(o5,h8r),e(xe,p8r),e(xe,r5),e(r5,UTe),e(UTe,u8r),e(r5,_8r),e(r5,MJ),e(MJ,b8r),e(r5,v8r),e(xe,F8r),e(xe,t5),e(t5,JTe),e(JTe,T8r),e(t5,M8r),e(t5,EJ),e(EJ,E8r),e(t5,C8r),e(xe,w8r),e(xe,a5),e(a5,YTe),e(YTe,A8r),e(a5,y8r),e(a5,CJ),e(CJ,L8r),e(a5,x8r),e(Gr,$8r),M(n5,Gr,null),b(f,BIe,_),b(f,Rc,_),e(Rc,s5),e(s5,KTe),M(UL,KTe,null),e(Rc,k8r),e(Rc,ZTe),e(ZTe,S8r),b(f,PIe,_),b(f,pr,_),M(JL,pr,null),e(pr,R8r),e(pr,Bc),e(Bc,B8r),e(Bc,wJ),e(wJ,P8r),e(Bc,I8r),e(Bc,AJ),e(AJ,q8r),e(Bc,N8r),e(pr,j8r),e(pr,YL),e(YL,D8r),e(YL,e7e),e(e7e,G8r),e(YL,O8r),e(pr,V8r),e(pr,Gt),M(KL,Gt,null),e(Gt,X8r),e(Gt,o7e),e(o7e,z8r),e(Gt,Q8r),e(Gt,Pc),e(Pc,W8r),e(Pc,r7e),e(r7e,H8r),e(Pc,U8r),e(Pc,yJ),e(yJ,J8r),e(Pc,Y8r),e(Gt,K8r),M(l5,Gt,null),e(pr,Z8r),e(pr,Or),M(ZL,Or,null),e(Or,exr),e(Or,t7e),e(t7e,oxr),e(Or,rxr),e(Or,hn),e(hn,txr),e(hn,a7e),e(a7e,axr),e(hn,nxr),e(hn,n7e),e(n7e,sxr),e(hn,lxr),e(hn,s7e),e(s7e,ixr),e(hn,dxr),e(Or,cxr),e(Or,$e),e($e,i5),e(i5,l7e),e(l7e,fxr),e(i5,mxr),e(i5,LJ),e(LJ,gxr),e(i5,hxr),e($e,pxr),e($e,d5),e(d5,i7e),e(i7e,uxr),e(d5,_xr),e(d5,xJ),e(xJ,bxr),e(d5,vxr),e($e,Fxr),e($e,c5),e(c5,d7e),e(d7e,Txr),e(c5,Mxr),e(c5,$J),e($J,Exr),e(c5,Cxr),e($e,wxr),e($e,f5),e(f5,c7e),e(c7e,Axr),e(f5,yxr),e(f5,kJ),e(kJ,Lxr),e(f5,xxr),e($e,$xr),e($e,m5),e(m5,f7e),e(f7e,kxr),e(m5,Sxr),e(m5,SJ),e(SJ,Rxr),e(m5,Bxr),e($e,Pxr),e($e,g5),e(g5,m7e),e(m7e,Ixr),e(g5,qxr),e(g5,RJ),e(RJ,Nxr),e(g5,jxr),e($e,Dxr),e($e,h5),e(h5,g7e),e(g7e,Gxr),e(h5,Oxr),e(h5,BJ),e(BJ,Vxr),e(h5,Xxr),e($e,zxr),e($e,p5),e(p5,h7e),e(h7e,Qxr),e(p5,Wxr),e(p5,PJ),e(PJ,Hxr),e(p5,Uxr),e($e,Jxr),e($e,u5),e(u5,p7e),e(p7e,Yxr),e(u5,Kxr),e(u5,IJ),e(IJ,Zxr),e(u5,e$r),e($e,o$r),e($e,_5),e(_5,u7e),e(u7e,r$r),e(_5,t$r),e(_5,qJ),e(qJ,a$r),e(_5,n$r),e(Or,s$r),M(b5,Or,null),b(f,IIe,_),b(f,Ic,_),e(Ic,v5),e(v5,_7e),M(e8,_7e,null),e(Ic,l$r),e(Ic,b7e),e(b7e,i$r),b(f,qIe,_),b(f,ur,_),M(o8,ur,null),e(ur,d$r),e(ur,qc),e(qc,c$r),e(qc,NJ),e(NJ,f$r),e(qc,m$r),e(qc,jJ),e(jJ,g$r),e(qc,h$r),e(ur,p$r),e(ur,r8),e(r8,u$r),e(r8,v7e),e(v7e,_$r),e(r8,b$r),e(ur,v$r),e(ur,Ot),M(t8,Ot,null),e(Ot,F$r),e(Ot,F7e),e(F7e,T$r),e(Ot,M$r),e(Ot,Nc),e(Nc,E$r),e(Nc,T7e),e(T7e,C$r),e(Nc,w$r),e(Nc,DJ),e(DJ,A$r),e(Nc,y$r),e(Ot,L$r),M(F5,Ot,null),e(ur,x$r),e(ur,Vr),M(a8,Vr,null),e(Vr,$$r),e(Vr,M7e),e(M7e,k$r),e(Vr,S$r),e(Vr,pn),e(pn,R$r),e(pn,E7e),e(E7e,B$r),e(pn,P$r),e(pn,C7e),e(C7e,I$r),e(pn,q$r),e(pn,w7e),e(w7e,N$r),e(pn,j$r),e(Vr,D$r),e(Vr,ke),e(ke,T5),e(T5,A7e),e(A7e,G$r),e(T5,O$r),e(T5,GJ),e(GJ,V$r),e(T5,X$r),e(ke,z$r),e(ke,M5),e(M5,y7e),e(y7e,Q$r),e(M5,W$r),e(M5,OJ),e(OJ,H$r),e(M5,U$r),e(ke,J$r),e(ke,E5),e(E5,L7e),e(L7e,Y$r),e(E5,K$r),e(E5,VJ),e(VJ,Z$r),e(E5,ekr),e(ke,okr),e(ke,C5),e(C5,x7e),e(x7e,rkr),e(C5,tkr),e(C5,XJ),e(XJ,akr),e(C5,nkr),e(ke,skr),e(ke,w5),e(w5,$7e),e($7e,lkr),e(w5,ikr),e(w5,zJ),e(zJ,dkr),e(w5,ckr),e(ke,fkr),e(ke,A5),e(A5,k7e),e(k7e,mkr),e(A5,gkr),e(A5,QJ),e(QJ,hkr),e(A5,pkr),e(ke,ukr),e(ke,y5),e(y5,S7e),e(S7e,_kr),e(y5,bkr),e(y5,WJ),e(WJ,vkr),e(y5,Fkr),e(ke,Tkr),e(ke,L5),e(L5,R7e),e(R7e,Mkr),e(L5,Ekr),e(L5,HJ),e(HJ,Ckr),e(L5,wkr),e(ke,Akr),e(ke,x5),e(x5,B7e),e(B7e,ykr),e(x5,Lkr),e(x5,UJ),e(UJ,xkr),e(x5,$kr),e(ke,kkr),e(ke,$5),e($5,P7e),e(P7e,Skr),e($5,Rkr),e($5,JJ),e(JJ,Bkr),e($5,Pkr),e(Vr,Ikr),M(k5,Vr,null),b(f,NIe,_),b(f,jc,_),e(jc,S5),e(S5,I7e),M(n8,I7e,null),e(jc,qkr),e(jc,q7e),e(q7e,Nkr),b(f,jIe,_),b(f,_r,_),M(s8,_r,null),e(_r,jkr),e(_r,Dc),e(Dc,Dkr),e(Dc,YJ),e(YJ,Gkr),e(Dc,Okr),e(Dc,KJ),e(KJ,Vkr),e(Dc,Xkr),e(_r,zkr),e(_r,l8),e(l8,Qkr),e(l8,N7e),e(N7e,Wkr),e(l8,Hkr),e(_r,Ukr),e(_r,Vt),M(i8,Vt,null),e(Vt,Jkr),e(Vt,j7e),e(j7e,Ykr),e(Vt,Kkr),e(Vt,Gc),e(Gc,Zkr),e(Gc,D7e),e(D7e,eSr),e(Gc,oSr),e(Gc,ZJ),e(ZJ,rSr),e(Gc,tSr),e(Vt,aSr),M(R5,Vt,null),e(_r,nSr),e(_r,Xr),M(d8,Xr,null),e(Xr,sSr),e(Xr,G7e),e(G7e,lSr),e(Xr,iSr),e(Xr,un),e(un,dSr),e(un,O7e),e(O7e,cSr),e(un,fSr),e(un,V7e),e(V7e,mSr),e(un,gSr),e(un,X7e),e(X7e,hSr),e(un,pSr),e(Xr,uSr),e(Xr,Ge),e(Ge,B5),e(B5,z7e),e(z7e,_Sr),e(B5,bSr),e(B5,eY),e(eY,vSr),e(B5,FSr),e(Ge,TSr),e(Ge,P5),e(P5,Q7e),e(Q7e,MSr),e(P5,ESr),e(P5,oY),e(oY,CSr),e(P5,wSr),e(Ge,ASr),e(Ge,I5),e(I5,W7e),e(W7e,ySr),e(I5,LSr),e(I5,rY),e(rY,xSr),e(I5,$Sr),e(Ge,kSr),e(Ge,q5),e(q5,H7e),e(H7e,SSr),e(q5,RSr),e(q5,tY),e(tY,BSr),e(q5,PSr),e(Ge,ISr),e(Ge,N5),e(N5,U7e),e(U7e,qSr),e(N5,NSr),e(N5,aY),e(aY,jSr),e(N5,DSr),e(Ge,GSr),e(Ge,j5),e(j5,J7e),e(J7e,OSr),e(j5,VSr),e(j5,nY),e(nY,XSr),e(j5,zSr),e(Ge,QSr),e(Ge,D5),e(D5,Y7e),e(Y7e,WSr),e(D5,HSr),e(D5,sY),e(sY,USr),e(D5,JSr),e(Ge,YSr),e(Ge,G5),e(G5,K7e),e(K7e,KSr),e(G5,ZSr),e(G5,lY),e(lY,eRr),e(G5,oRr),e(Xr,rRr),M(O5,Xr,null),b(f,DIe,_),b(f,Oc,_),e(Oc,V5),e(V5,Z7e),M(c8,Z7e,null),e(Oc,tRr),e(Oc,e9e),e(e9e,aRr),b(f,GIe,_),b(f,br,_),M(f8,br,null),e(br,nRr),e(br,Vc),e(Vc,sRr),e(Vc,iY),e(iY,lRr),e(Vc,iRr),e(Vc,dY),e(dY,dRr),e(Vc,cRr),e(br,fRr),e(br,m8),e(m8,mRr),e(m8,o9e),e(o9e,gRr),e(m8,hRr),e(br,pRr),e(br,Xt),M(g8,Xt,null),e(Xt,uRr),e(Xt,r9e),e(r9e,_Rr),e(Xt,bRr),e(Xt,Xc),e(Xc,vRr),e(Xc,t9e),e(t9e,FRr),e(Xc,TRr),e(Xc,cY),e(cY,MRr),e(Xc,ERr),e(Xt,CRr),M(X5,Xt,null),e(br,wRr),e(br,zr),M(h8,zr,null),e(zr,ARr),e(zr,a9e),e(a9e,yRr),e(zr,LRr),e(zr,_n),e(_n,xRr),e(_n,n9e),e(n9e,$Rr),e(_n,kRr),e(_n,s9e),e(s9e,SRr),e(_n,RRr),e(_n,l9e),e(l9e,BRr),e(_n,PRr),e(zr,IRr),e(zr,Oe),e(Oe,z5),e(z5,i9e),e(i9e,qRr),e(z5,NRr),e(z5,fY),e(fY,jRr),e(z5,DRr),e(Oe,GRr),e(Oe,Q5),e(Q5,d9e),e(d9e,ORr),e(Q5,VRr),e(Q5,mY),e(mY,XRr),e(Q5,zRr),e(Oe,QRr),e(Oe,W5),e(W5,c9e),e(c9e,WRr),e(W5,HRr),e(W5,gY),e(gY,URr),e(W5,JRr),e(Oe,YRr),e(Oe,H5),e(H5,f9e),e(f9e,KRr),e(H5,ZRr),e(H5,hY),e(hY,eBr),e(H5,oBr),e(Oe,rBr),e(Oe,U5),e(U5,m9e),e(m9e,tBr),e(U5,aBr),e(U5,pY),e(pY,nBr),e(U5,sBr),e(Oe,lBr),e(Oe,J5),e(J5,g9e),e(g9e,iBr),e(J5,dBr),e(J5,uY),e(uY,cBr),e(J5,fBr),e(Oe,mBr),e(Oe,Y5),e(Y5,h9e),e(h9e,gBr),e(Y5,hBr),e(Y5,_Y),e(_Y,pBr),e(Y5,uBr),e(Oe,_Br),e(Oe,K5),e(K5,p9e),e(p9e,bBr),e(K5,vBr),e(K5,bY),e(bY,FBr),e(K5,TBr),e(zr,MBr),M(Z5,zr,null),b(f,OIe,_),b(f,zc,_),e(zc,eC),e(eC,u9e),M(p8,u9e,null),e(zc,EBr),e(zc,_9e),e(_9e,CBr),b(f,VIe,_),b(f,vr,_),M(u8,vr,null),e(vr,wBr),e(vr,Qc),e(Qc,ABr),e(Qc,vY),e(vY,yBr),e(Qc,LBr),e(Qc,FY),e(FY,xBr),e(Qc,$Br),e(vr,kBr),e(vr,_8),e(_8,SBr),e(_8,b9e),e(b9e,RBr),e(_8,BBr),e(vr,PBr),e(vr,zt),M(b8,zt,null),e(zt,IBr),e(zt,v9e),e(v9e,qBr),e(zt,NBr),e(zt,Wc),e(Wc,jBr),e(Wc,F9e),e(F9e,DBr),e(Wc,GBr),e(Wc,TY),e(TY,OBr),e(Wc,VBr),e(zt,XBr),M(oC,zt,null),e(vr,zBr),e(vr,Qr),M(v8,Qr,null),e(Qr,QBr),e(Qr,T9e),e(T9e,WBr),e(Qr,HBr),e(Qr,bn),e(bn,UBr),e(bn,M9e),e(M9e,JBr),e(bn,YBr),e(bn,E9e),e(E9e,KBr),e(bn,ZBr),e(bn,C9e),e(C9e,ePr),e(bn,oPr),e(Qr,rPr),e(Qr,w9e),e(w9e,rC),e(rC,A9e),e(A9e,tPr),e(rC,aPr),e(rC,MY),e(MY,nPr),e(rC,sPr),e(Qr,lPr),M(tC,Qr,null),b(f,XIe,_),b(f,Hc,_),e(Hc,aC),e(aC,y9e),M(F8,y9e,null),e(Hc,iPr),e(Hc,L9e),e(L9e,dPr),b(f,zIe,_),b(f,Fr,_),M(T8,Fr,null),e(Fr,cPr),e(Fr,Uc),e(Uc,fPr),e(Uc,EY),e(EY,mPr),e(Uc,gPr),e(Uc,CY),e(CY,hPr),e(Uc,pPr),e(Fr,uPr),e(Fr,M8),e(M8,_Pr),e(M8,x9e),e(x9e,bPr),e(M8,vPr),e(Fr,FPr),e(Fr,Qt),M(E8,Qt,null),e(Qt,TPr),e(Qt,$9e),e($9e,MPr),e(Qt,EPr),e(Qt,Jc),e(Jc,CPr),e(Jc,k9e),e(k9e,wPr),e(Jc,APr),e(Jc,wY),e(wY,yPr),e(Jc,LPr),e(Qt,xPr),M(nC,Qt,null),e(Fr,$Pr),e(Fr,Wr),M(C8,Wr,null),e(Wr,kPr),e(Wr,S9e),e(S9e,SPr),e(Wr,RPr),e(Wr,vn),e(vn,BPr),e(vn,R9e),e(R9e,PPr),e(vn,IPr),e(vn,B9e),e(B9e,qPr),e(vn,NPr),e(vn,P9e),e(P9e,jPr),e(vn,DPr),e(Wr,GPr),e(Wr,w8),e(w8,sC),e(sC,I9e),e(I9e,OPr),e(sC,VPr),e(sC,AY),e(AY,XPr),e(sC,zPr),e(w8,QPr),e(w8,lC),e(lC,q9e),e(q9e,WPr),e(lC,HPr),e(lC,yY),e(yY,UPr),e(lC,JPr),e(Wr,YPr),M(iC,Wr,null),b(f,QIe,_),b(f,Yc,_),e(Yc,dC),e(dC,N9e),M(A8,N9e,null),e(Yc,KPr),e(Yc,j9e),e(j9e,ZPr),b(f,WIe,_),b(f,Tr,_),M(y8,Tr,null),e(Tr,eIr),e(Tr,Kc),e(Kc,oIr),e(Kc,LY),e(LY,rIr),e(Kc,tIr),e(Kc,xY),e(xY,aIr),e(Kc,nIr),e(Tr,sIr),e(Tr,L8),e(L8,lIr),e(L8,D9e),e(D9e,iIr),e(L8,dIr),e(Tr,cIr),e(Tr,Wt),M(x8,Wt,null),e(Wt,fIr),e(Wt,G9e),e(G9e,mIr),e(Wt,gIr),e(Wt,Zc),e(Zc,hIr),e(Zc,O9e),e(O9e,pIr),e(Zc,uIr),e(Zc,$Y),e($Y,_Ir),e(Zc,bIr),e(Wt,vIr),M(cC,Wt,null),e(Tr,FIr),e(Tr,Hr),M($8,Hr,null),e(Hr,TIr),e(Hr,V9e),e(V9e,MIr),e(Hr,EIr),e(Hr,Fn),e(Fn,CIr),e(Fn,X9e),e(X9e,wIr),e(Fn,AIr),e(Fn,z9e),e(z9e,yIr),e(Fn,LIr),e(Fn,Q9e),e(Q9e,xIr),e(Fn,$Ir),e(Hr,kIr),e(Hr,W9e),e(W9e,fC),e(fC,H9e),e(H9e,SIr),e(fC,RIr),e(fC,kY),e(kY,BIr),e(fC,PIr),e(Hr,IIr),M(mC,Hr,null),HIe=!0},p(f,[_]){const k8={};_&2&&(k8.$$scope={dirty:_,ctx:f}),df.$set(k8);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),lg.$set(U9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),jg.$set(J9e);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),mh.$set(Y9e);const S8={};_&2&&(S8.$$scope={dirty:_,ctx:f}),gh.$set(S8);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),$h.$set(K9e);const Tn={};_&2&&(Tn.$$scope={dirty:_,ctx:f}),kh.$set(Tn);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),Bh.$set(Z9e);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),Eu.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),wu.$set(oMe);const R8={};_&2&&(R8.$$scope={dirty:_,ctx:f}),g_.$set(R8);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),p_.$set(rMe);const B8={};_&2&&(B8.$$scope={dirty:_,ctx:f}),K_.$set(B8);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),e2.$set(tMe);const P8={};_&2&&(P8.$$scope={dirty:_,ctx:f}),q2.$set(P8);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),j2.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),n1.$set(nMe);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),l1.$set(sMe);const ef={};_&2&&(ef.$$scope={dirty:_,ctx:f}),rb.$set(ef);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),ab.$set(lMe);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),Bb.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),Ib.$set(dMe);const I8={};_&2&&(I8.$$scope={dirty:_,ctx:f}),Vb.$set(I8);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),zb.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),Av.$set(fMe);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),Lv.$set(mMe);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),pF.$set(Jr);const q8={};_&2&&(q8.$$scope={dirty:_,ctx:f}),_F.$set(q8);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),FF.$set(gMe);const N8={};_&2&&(N8.$$scope={dirty:_,ctx:f}),MF.$set(N8);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),PF.$set(hMe);const Yr={};_&2&&(Yr.$$scope={dirty:_,ctx:f}),qF.$set(Yr);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),DF.$set(pMe);const of={};_&2&&(of.$$scope={dirty:_,ctx:f}),OF.$set(of);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),KF.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),e6.$set(_Me);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),s6.$set(y);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),i6.$set(gC);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),b6.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),F6.$set(vMe);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),C6.$set(hC);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),A6.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),S6.$set(TMe);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),B6.$set(pC);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),j6.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),G6.$set(EMe);const uC={};_&2&&(uC.$$scope={dirty:_,ctx:f}),z6.$set(uC);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),W6.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),J6.$set(wMe);const _C={};_&2&&(_C.$$scope={dirty:_,ctx:f}),K6.$set(_C);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),aT.$set(AMe);const yMe={};_&2&&(yMe.$$scope={dirty:_,ctx:f}),sT.$set(yMe);const bC={};_&2&&(bC.$$scope={dirty:_,ctx:f}),dT.$set(bC);const LMe={};_&2&&(LMe.$$scope={dirty:_,ctx:f}),fT.$set(LMe);const xMe={};_&2&&(xMe.$$scope={dirty:_,ctx:f}),r7.$set(xMe);const vC={};_&2&&(vC.$$scope={dirty:_,ctx:f}),a7.$set(vC);const $Me={};_&2&&($Me.$$scope={dirty:_,ctx:f}),L7.$set($Me);const kMe={};_&2&&(kMe.$$scope={dirty:_,ctx:f}),$7.$set(kMe);const FC={};_&2&&(FC.$$scope={dirty:_,ctx:f}),V7.$set(FC);const SMe={};_&2&&(SMe.$$scope={dirty:_,ctx:f}),z7.$set(SMe);const RMe={};_&2&&(RMe.$$scope={dirty:_,ctx:f}),U7.$set(RMe);const TC={};_&2&&(TC.$$scope={dirty:_,ctx:f}),Y7.$set(TC);const BMe={};_&2&&(BMe.$$scope={dirty:_,ctx:f}),b9.$set(BMe);const PMe={};_&2&&(PMe.$$scope={dirty:_,ctx:f}),F9.$set(PMe);const MC={};_&2&&(MC.$$scope={dirty:_,ctx:f}),k9.$set(MC);const IMe={};_&2&&(IMe.$$scope={dirty:_,ctx:f}),R9.$set(IMe);const qMe={};_&2&&(qMe.$$scope={dirty:_,ctx:f}),sM.$set(qMe);const EC={};_&2&&(EC.$$scope={dirty:_,ctx:f}),iM.$set(EC);const NMe={};_&2&&(NMe.$$scope={dirty:_,ctx:f}),AM.$set(NMe);const jMe={};_&2&&(jMe.$$scope={dirty:_,ctx:f}),LM.$set(jMe);const CC={};_&2&&(CC.$$scope={dirty:_,ctx:f}),$M.$set(CC);const DMe={};_&2&&(DMe.$$scope={dirty:_,ctx:f}),SM.$set(DMe);const GMe={};_&2&&(GMe.$$scope={dirty:_,ctx:f}),ZM.$set(GMe);const wC={};_&2&&(wC.$$scope={dirty:_,ctx:f}),o4.$set(wC);const OMe={};_&2&&(OMe.$$scope={dirty:_,ctx:f}),M4.$set(OMe);const VMe={};_&2&&(VMe.$$scope={dirty:_,ctx:f}),C4.$set(VMe);const AC={};_&2&&(AC.$$scope={dirty:_,ctx:f}),A4.$set(AC);const XMe={};_&2&&(XMe.$$scope={dirty:_,ctx:f}),L4.$set(XMe);const zMe={};_&2&&(zMe.$$scope={dirty:_,ctx:f}),$4.$set(zMe);const yC={};_&2&&(yC.$$scope={dirty:_,ctx:f}),S4.$set(yC);const QMe={};_&2&&(QMe.$$scope={dirty:_,ctx:f}),nE.$set(QMe);const WMe={};_&2&&(WMe.$$scope={dirty:_,ctx:f}),lE.$set(WMe);const LC={};_&2&&(LC.$$scope={dirty:_,ctx:f}),_E.$set(LC);const HMe={};_&2&&(HMe.$$scope={dirty:_,ctx:f}),vE.$set(HMe);const UMe={};_&2&&(UMe.$$scope={dirty:_,ctx:f}),RE.$set(UMe);const xC={};_&2&&(xC.$$scope={dirty:_,ctx:f}),PE.$set(xC);const JMe={};_&2&&(JMe.$$scope={dirty:_,ctx:f}),QE.$set(JMe);const YMe={};_&2&&(YMe.$$scope={dirty:_,ctx:f}),HE.$set(YMe);const $C={};_&2&&($C.$$scope={dirty:_,ctx:f}),n5.$set($C);const KMe={};_&2&&(KMe.$$scope={dirty:_,ctx:f}),l5.$set(KMe);const ZMe={};_&2&&(ZMe.$$scope={dirty:_,ctx:f}),b5.$set(ZMe);const kC={};_&2&&(kC.$$scope={dirty:_,ctx:f}),F5.$set(kC);const e4e={};_&2&&(e4e.$$scope={dirty:_,ctx:f}),k5.$set(e4e);const o4e={};_&2&&(o4e.$$scope={dirty:_,ctx:f}),R5.$set(o4e);const SC={};_&2&&(SC.$$scope={dirty:_,ctx:f}),O5.$set(SC);const r4e={};_&2&&(r4e.$$scope={dirty:_,ctx:f}),X5.$set(r4e);const t4e={};_&2&&(t4e.$$scope={dirty:_,ctx:f}),Z5.$set(t4e);const RC={};_&2&&(RC.$$scope={dirty:_,ctx:f}),oC.$set(RC);const a4e={};_&2&&(a4e.$$scope={dirty:_,ctx:f}),tC.$set(a4e);const n4e={};_&2&&(n4e.$$scope={dirty:_,ctx:f}),nC.$set(n4e);const BC={};_&2&&(BC.$$scope={dirty:_,ctx:f}),iC.$set(BC);const s4e={};_&2&&(s4e.$$scope={dirty:_,ctx:f}),cC.$set(s4e);const l4e={};_&2&&(l4e.$$scope={dirty:_,ctx:f}),mC.$set(l4e)},i(f){HIe||(E(d.$$.fragment,f),E(va.$$.fragment,f),E(Sw.$$.fragment,f),E(Rw.$$.fragment,f),E(df.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(Nw.$$.fragment,f),E(lg.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Gw.$$.fragment,f),E(Xw.$$.fragment,f),E(jg.$$.fragment,f),E(zw.$$.fragment,f),E(Qw.$$.fragment,f),E(Ww.$$.fragment,f),E(Jw.$$.fragment,f),E(mh.$$.fragment,f),E(gh.$$.fragment,f),E(Yw.$$.fragment,f),E(Kw.$$.fragment,f),E(Zw.$$.fragment,f),E(rA.$$.fragment,f),E($h.$$.fragment,f),E(kh.$$.fragment,f),E(tA.$$.fragment,f),E(aA.$$.fragment,f),E(nA.$$.fragment,f),E(lA.$$.fragment,f),E(Bh.$$.fragment,f),E(iA.$$.fragment,f),E(Eu.$$.fragment,f),E(dA.$$.fragment,f),E(cA.$$.fragment,f),E(mA.$$.fragment,f),E(wu.$$.fragment,f),E(gA.$$.fragment,f),E(g_.$$.fragment,f),E(hA.$$.fragment,f),E(pA.$$.fragment,f),E(_A.$$.fragment,f),E(p_.$$.fragment,f),E(bA.$$.fragment,f),E(K_.$$.fragment,f),E(vA.$$.fragment,f),E(FA.$$.fragment,f),E(MA.$$.fragment,f),E(e2.$$.fragment,f),E(EA.$$.fragment,f),E(q2.$$.fragment,f),E(CA.$$.fragment,f),E(wA.$$.fragment,f),E(yA.$$.fragment,f),E(j2.$$.fragment,f),E(LA.$$.fragment,f),E(n1.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(SA.$$.fragment,f),E(l1.$$.fragment,f),E(RA.$$.fragment,f),E(rb.$$.fragment,f),E(BA.$$.fragment,f),E(PA.$$.fragment,f),E(qA.$$.fragment,f),E(ab.$$.fragment,f),E(NA.$$.fragment,f),E(Bb.$$.fragment,f),E(jA.$$.fragment,f),E(DA.$$.fragment,f),E(OA.$$.fragment,f),E(Ib.$$.fragment,f),E(VA.$$.fragment,f),E(Vb.$$.fragment,f),E(XA.$$.fragment,f),E(zA.$$.fragment,f),E(WA.$$.fragment,f),E(zb.$$.fragment,f),E(HA.$$.fragment,f),E(Av.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(KA.$$.fragment,f),E(Lv.$$.fragment,f),E(ZA.$$.fragment,f),E(pF.$$.fragment,f),E(e0.$$.fragment,f),E(o0.$$.fragment,f),E(t0.$$.fragment,f),E(_F.$$.fragment,f),E(a0.$$.fragment,f),E(FF.$$.fragment,f),E(n0.$$.fragment,f),E(s0.$$.fragment,f),E(i0.$$.fragment,f),E(MF.$$.fragment,f),E(d0.$$.fragment,f),E(PF.$$.fragment,f),E(c0.$$.fragment,f),E(f0.$$.fragment,f),E(g0.$$.fragment,f),E(qF.$$.fragment,f),E(h0.$$.fragment,f),E(DF.$$.fragment,f),E(p0.$$.fragment,f),E(u0.$$.fragment,f),E(b0.$$.fragment,f),E(OF.$$.fragment,f),E(v0.$$.fragment,f),E(KF.$$.fragment,f),E(F0.$$.fragment,f),E(T0.$$.fragment,f),E(E0.$$.fragment,f),E(e6.$$.fragment,f),E(C0.$$.fragment,f),E(s6.$$.fragment,f),E(w0.$$.fragment,f),E(A0.$$.fragment,f),E(L0.$$.fragment,f),E(i6.$$.fragment,f),E(x0.$$.fragment,f),E(b6.$$.fragment,f),E($0.$$.fragment,f),E(k0.$$.fragment,f),E(R0.$$.fragment,f),E(F6.$$.fragment,f),E(B0.$$.fragment,f),E(C6.$$.fragment,f),E(I0.$$.fragment,f),E(q0.$$.fragment,f),E(j0.$$.fragment,f),E(A6.$$.fragment,f),E(D0.$$.fragment,f),E(S6.$$.fragment,f),E(G0.$$.fragment,f),E(O0.$$.fragment,f),E(X0.$$.fragment,f),E(B6.$$.fragment,f),E(z0.$$.fragment,f),E(j6.$$.fragment,f),E(Q0.$$.fragment,f),E(W0.$$.fragment,f),E(U0.$$.fragment,f),E(G6.$$.fragment,f),E(J0.$$.fragment,f),E(z6.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(W6.$$.fragment,f),E(ry.$$.fragment,f),E(J6.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(K6.$$.fragment,f),E(ly.$$.fragment,f),E(aT.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(sT.$$.fragment,f),E(my.$$.fragment,f),E(dT.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(fT.$$.fragment,f),E(_y.$$.fragment,f),E(r7.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(a7.$$.fragment,f),E(My.$$.fragment,f),E(L7.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E($7.$$.fragment,f),E(yy.$$.fragment,f),E(V7.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(z7.$$.fragment,f),E(Sy.$$.fragment,f),E(U7.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(Y7.$$.fragment,f),E(qy.$$.fragment,f),E(b9.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(F9.$$.fragment,f),E(Oy.$$.fragment,f),E(k9.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(R9.$$.fragment,f),E(Wy.$$.fragment,f),E(sM.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(iM.$$.fragment,f),E(Ky.$$.fragment,f),E(AM.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(LM.$$.fragment,f),E(tL.$$.fragment,f),E($M.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(SM.$$.fragment,f),E(iL.$$.fragment,f),E(ZM.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(o4.$$.fragment,f),E(gL.$$.fragment,f),E(M4.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(C4.$$.fragment,f),E(bL.$$.fragment,f),E(A4.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(L4.$$.fragment,f),E(EL.$$.fragment,f),E($4.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(S4.$$.fragment,f),E(LL.$$.fragment,f),E(nE.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(lE.$$.fragment,f),E(RL.$$.fragment,f),E(_E.$$.fragment,f),E(BL.$$.fragment,f),E(PL.$$.fragment,f),E(qL.$$.fragment,f),E(vE.$$.fragment,f),E(NL.$$.fragment,f),E(RE.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(PE.$$.fragment,f),E(VL.$$.fragment,f),E(QE.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HE.$$.fragment,f),E(HL.$$.fragment,f),E(n5.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(l5.$$.fragment,f),E(ZL.$$.fragment,f),E(b5.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(F5.$$.fragment,f),E(a8.$$.fragment,f),E(k5.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(R5.$$.fragment,f),E(d8.$$.fragment,f),E(O5.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(X5.$$.fragment,f),E(h8.$$.fragment,f),E(Z5.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(oC.$$.fragment,f),E(v8.$$.fragment,f),E(tC.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(nC.$$.fragment,f),E(C8.$$.fragment,f),E(iC.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(cC.$$.fragment,f),E($8.$$.fragment,f),E(mC.$$.fragment,f),HIe=!0)},o(f){C(d.$$.fragment,f),C(va.$$.fragment,f),C(Sw.$$.fragment,f),C(Rw.$$.fragment,f),C(df.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(Nw.$$.fragment,f),C(lg.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Gw.$$.fragment,f),C(Xw.$$.fragment,f),C(jg.$$.fragment,f),C(zw.$$.fragment,f),C(Qw.$$.fragment,f),C(Ww.$$.fragment,f),C(Jw.$$.fragment,f),C(mh.$$.fragment,f),C(gh.$$.fragment,f),C(Yw.$$.fragment,f),C(Kw.$$.fragment,f),C(Zw.$$.fragment,f),C(rA.$$.fragment,f),C($h.$$.fragment,f),C(kh.$$.fragment,f),C(tA.$$.fragment,f),C(aA.$$.fragment,f),C(nA.$$.fragment,f),C(lA.$$.fragment,f),C(Bh.$$.fragment,f),C(iA.$$.fragment,f),C(Eu.$$.fragment,f),C(dA.$$.fragment,f),C(cA.$$.fragment,f),C(mA.$$.fragment,f),C(wu.$$.fragment,f),C(gA.$$.fragment,f),C(g_.$$.fragment,f),C(hA.$$.fragment,f),C(pA.$$.fragment,f),C(_A.$$.fragment,f),C(p_.$$.fragment,f),C(bA.$$.fragment,f),C(K_.$$.fragment,f),C(vA.$$.fragment,f),C(FA.$$.fragment,f),C(MA.$$.fragment,f),C(e2.$$.fragment,f),C(EA.$$.fragment,f),C(q2.$$.fragment,f),C(CA.$$.fragment,f),C(wA.$$.fragment,f),C(yA.$$.fragment,f),C(j2.$$.fragment,f),C(LA.$$.fragment,f),C(n1.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(SA.$$.fragment,f),C(l1.$$.fragment,f),C(RA.$$.fragment,f),C(rb.$$.fragment,f),C(BA.$$.fragment,f),C(PA.$$.fragment,f),C(qA.$$.fragment,f),C(ab.$$.fragment,f),C(NA.$$.fragment,f),C(Bb.$$.fragment,f),C(jA.$$.fragment,f),C(DA.$$.fragment,f),C(OA.$$.fragment,f),C(Ib.$$.fragment,f),C(VA.$$.fragment,f),C(Vb.$$.fragment,f),C(XA.$$.fragment,f),C(zA.$$.fragment,f),C(WA.$$.fragment,f),C(zb.$$.fragment,f),C(HA.$$.fragment,f),C(Av.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(KA.$$.fragment,f),C(Lv.$$.fragment,f),C(ZA.$$.fragment,f),C(pF.$$.fragment,f),C(e0.$$.fragment,f),C(o0.$$.fragment,f),C(t0.$$.fragment,f),C(_F.$$.fragment,f),C(a0.$$.fragment,f),C(FF.$$.fragment,f),C(n0.$$.fragment,f),C(s0.$$.fragment,f),C(i0.$$.fragment,f),C(MF.$$.fragment,f),C(d0.$$.fragment,f),C(PF.$$.fragment,f),C(c0.$$.fragment,f),C(f0.$$.fragment,f),C(g0.$$.fragment,f),C(qF.$$.fragment,f),C(h0.$$.fragment,f),C(DF.$$.fragment,f),C(p0.$$.fragment,f),C(u0.$$.fragment,f),C(b0.$$.fragment,f),C(OF.$$.fragment,f),C(v0.$$.fragment,f),C(KF.$$.fragment,f),C(F0.$$.fragment,f),C(T0.$$.fragment,f),C(E0.$$.fragment,f),C(e6.$$.fragment,f),C(C0.$$.fragment,f),C(s6.$$.fragment,f),C(w0.$$.fragment,f),C(A0.$$.fragment,f),C(L0.$$.fragment,f),C(i6.$$.fragment,f),C(x0.$$.fragment,f),C(b6.$$.fragment,f),C($0.$$.fragment,f),C(k0.$$.fragment,f),C(R0.$$.fragment,f),C(F6.$$.fragment,f),C(B0.$$.fragment,f),C(C6.$$.fragment,f),C(I0.$$.fragment,f),C(q0.$$.fragment,f),C(j0.$$.fragment,f),C(A6.$$.fragment,f),C(D0.$$.fragment,f),C(S6.$$.fragment,f),C(G0.$$.fragment,f),C(O0.$$.fragment,f),C(X0.$$.fragment,f),C(B6.$$.fragment,f),C(z0.$$.fragment,f),C(j6.$$.fragment,f),C(Q0.$$.fragment,f),C(W0.$$.fragment,f),C(U0.$$.fragment,f),C(G6.$$.fragment,f),C(J0.$$.fragment,f),C(z6.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(W6.$$.fragment,f),C(ry.$$.fragment,f),C(J6.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(K6.$$.fragment,f),C(ly.$$.fragment,f),C(aT.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(sT.$$.fragment,f),C(my.$$.fragment,f),C(dT.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(fT.$$.fragment,f),C(_y.$$.fragment,f),C(r7.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(a7.$$.fragment,f),C(My.$$.fragment,f),C(L7.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C($7.$$.fragment,f),C(yy.$$.fragment,f),C(V7.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(z7.$$.fragment,f),C(Sy.$$.fragment,f),C(U7.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(Y7.$$.fragment,f),C(qy.$$.fragment,f),C(b9.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(F9.$$.fragment,f),C(Oy.$$.fragment,f),C(k9.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(R9.$$.fragment,f),C(Wy.$$.fragment,f),C(sM.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(iM.$$.fragment,f),C(Ky.$$.fragment,f),C(AM.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(LM.$$.fragment,f),C(tL.$$.fragment,f),C($M.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(SM.$$.fragment,f),C(iL.$$.fragment,f),C(ZM.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(o4.$$.fragment,f),C(gL.$$.fragment,f),C(M4.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(C4.$$.fragment,f),C(bL.$$.fragment,f),C(A4.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(L4.$$.fragment,f),C(EL.$$.fragment,f),C($4.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(S4.$$.fragment,f),C(LL.$$.fragment,f),C(nE.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(lE.$$.fragment,f),C(RL.$$.fragment,f),C(_E.$$.fragment,f),C(BL.$$.fragment,f),C(PL.$$.fragment,f),C(qL.$$.fragment,f),C(vE.$$.fragment,f),C(NL.$$.fragment,f),C(RE.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(PE.$$.fragment,f),C(VL.$$.fragment,f),C(QE.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HE.$$.fragment,f),C(HL.$$.fragment,f),C(n5.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(l5.$$.fragment,f),C(ZL.$$.fragment,f),C(b5.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(F5.$$.fragment,f),C(a8.$$.fragment,f),C(k5.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(R5.$$.fragment,f),C(d8.$$.fragment,f),C(O5.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(X5.$$.fragment,f),C(h8.$$.fragment,f),C(Z5.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(oC.$$.fragment,f),C(v8.$$.fragment,f),C(tC.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(nC.$$.fragment,f),C(C8.$$.fragment,f),C(iC.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(cC.$$.fragment,f),C($8.$$.fragment,f),C(mC.$$.fragment,f),HIe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(tf),f&&t(Kr),f&&t(Ne),f&&t(Xe),f&&t(nf),w(va,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Fa),f&&t(WBe),f&&t(di),w(Sw),f&&t(HBe),f&&t(An),f&&t(UBe),w(Rw,f),f&&t(JBe),f&&t(Ux),f&&t(YBe),w(df,f),f&&t(KBe),f&&t(ci),w(Bw),f&&t(ZBe),f&&t(Co),w(Pw),w(Nw),w(lg),w(jw),f&&t(ePe),f&&t(mi),w(Dw),f&&t(oPe),f&&t(wo),w(Gw),w(Xw),w(jg),w(zw),f&&t(rPe),f&&t(gi),w(Qw),f&&t(tPe),f&&t(Ao),w(Ww),w(Jw),w(mh),w(gh),w(Yw),f&&t(aPe),f&&t(hi),w(Kw),f&&t(nPe),f&&t(yo),w(Zw),w(rA),w($h),w(kh),w(tA),f&&t(sPe),f&&t(ui),w(aA),f&&t(lPe),f&&t(Lo),w(nA),w(lA),w(Bh),w(iA),w(Eu),f&&t(iPe),f&&t(vi),w(dA),f&&t(dPe),f&&t(xo),w(cA),w(mA),w(wu),w(gA),w(g_),f&&t(cPe),f&&t(Mi),w(hA),f&&t(fPe),f&&t($o),w(pA),w(_A),w(p_),w(bA),w(K_),f&&t(mPe),f&&t(wi),w(vA),f&&t(gPe),f&&t(ko),w(FA),w(MA),w(e2),w(EA),w(q2),f&&t(hPe),f&&t(Li),w(CA),f&&t(pPe),f&&t(So),w(wA),w(yA),w(j2),w(LA),w(n1),f&&t(uPe),f&&t(ki),w(xA),f&&t(_Pe),f&&t(Ro),w($A),w(SA),w(l1),w(RA),w(rb),f&&t(bPe),f&&t(Bi),w(BA),f&&t(vPe),f&&t(Bo),w(PA),w(qA),w(ab),w(NA),w(Bb),f&&t(FPe),f&&t(qi),w(jA),f&&t(TPe),f&&t(Po),w(DA),w(OA),w(Ib),w(VA),w(Vb),f&&t(MPe),f&&t(Di),w(XA),f&&t(EPe),f&&t(Io),w(zA),w(WA),w(zb),w(HA),w(Av),f&&t(CPe),f&&t(Vi),w(UA),f&&t(wPe),f&&t(qo),w(JA),w(KA),w(Lv),w(ZA),w(pF),f&&t(APe),f&&t(Qi),w(e0),f&&t(yPe),f&&t(No),w(o0),w(t0),w(_F),w(a0),w(FF),f&&t(LPe),f&&t(Ui),w(n0),f&&t(xPe),f&&t(jo),w(s0),w(i0),w(MF),w(d0),w(PF),f&&t($Pe),f&&t(Ki),w(c0),f&&t(kPe),f&&t(Do),w(f0),w(g0),w(qF),w(h0),w(DF),f&&t(SPe),f&&t(od),w(p0),f&&t(RPe),f&&t(Go),w(u0),w(b0),w(OF),w(v0),w(KF),f&&t(BPe),f&&t(ad),w(F0),f&&t(PPe),f&&t(Oo),w(T0),w(E0),w(e6),w(C0),w(s6),f&&t(IPe),f&&t(ld),w(w0),f&&t(qPe),f&&t(Vo),w(A0),w(L0),w(i6),w(x0),w(b6),f&&t(NPe),f&&t(cd),w($0),f&&t(jPe),f&&t(Xo),w(k0),w(R0),w(F6),w(B0),w(C6),f&&t(DPe),f&&t(gd),w(I0),f&&t(GPe),f&&t(zo),w(q0),w(j0),w(A6),w(D0),w(S6),f&&t(OPe),f&&t(ud),w(G0),f&&t(VPe),f&&t(Qo),w(O0),w(X0),w(B6),w(z0),w(j6),f&&t(XPe),f&&t(Fd),w(Q0),f&&t(zPe),f&&t(Wo),w(W0),w(U0),w(G6),w(J0),w(z6),f&&t(QPe),f&&t(Ed),w(K0),f&&t(WPe),f&&t(Ho),w(Z0),w(oy),w(W6),w(ry),w(J6),f&&t(HPe),f&&t(Ad),w(ty),f&&t(UPe),f&&t(Uo),w(ay),w(sy),w(K6),w(ly),w(aT),f&&t(JPe),f&&t(xd),w(iy),f&&t(YPe),f&&t(Jo),w(dy),w(fy),w(sT),w(my),w(dT),f&&t(KPe),f&&t(Sd),w(gy),f&&t(ZPe),f&&t(Yo),w(hy),w(uy),w(fT),w(_y),w(r7),f&&t(eIe),f&&t(Pd),w(by),f&&t(oIe),f&&t(Ko),w(vy),w(Ty),w(a7),w(My),w(L7),f&&t(rIe),f&&t(Nd),w(Ey),f&&t(tIe),f&&t(Zo),w(Cy),w(Ay),w($7),w(yy),w(V7),f&&t(aIe),f&&t(Gd),w(Ly),f&&t(nIe),f&&t(er),w(xy),w(ky),w(z7),w(Sy),w(U7),f&&t(sIe),f&&t(zd),w(Ry),f&&t(lIe),f&&t(or),w(By),w(Iy),w(Y7),w(qy),w(b9),f&&t(iIe),f&&t(Hd),w(Ny),f&&t(dIe),f&&t(rr),w(jy),w(Gy),w(F9),w(Oy),w(k9),f&&t(cIe),f&&t(Yd),w(Vy),f&&t(fIe),f&&t(tr),w(Xy),w(Qy),w(R9),w(Wy),w(sM),f&&t(mIe),f&&t(ec),w(Hy),f&&t(gIe),f&&t(ar),w(Uy),w(Yy),w(iM),w(Ky),w(AM),f&&t(hIe),f&&t(tc),w(Zy),f&&t(pIe),f&&t(nr),w(eL),w(rL),w(LM),w(tL),w($M),f&&t(uIe),f&&t(sc),w(aL),f&&t(_Ie),f&&t(sr),w(nL),w(lL),w(SM),w(iL),w(ZM),f&&t(bIe),f&&t(dc),w(dL),f&&t(vIe),f&&t(lr),w(cL),w(mL),w(o4),w(gL),w(M4),f&&t(FIe),f&&t(mc),w(hL),f&&t(TIe),f&&t(ir),w(pL),w(_L),w(C4),w(bL),w(A4),f&&t(MIe),f&&t(pc),w(vL),f&&t(EIe),f&&t(dr),w(FL),w(ML),w(L4),w(EL),w($4),f&&t(CIe),f&&t(bc),w(CL),f&&t(wIe),f&&t(cr),w(wL),w(yL),w(S4),w(LL),w(nE),f&&t(AIe),f&&t(Tc),w(xL),f&&t(yIe),f&&t(fr),w($L),w(SL),w(lE),w(RL),w(_E),f&&t(LIe),f&&t(Cc),w(BL),f&&t(xIe),f&&t(mr),w(PL),w(qL),w(vE),w(NL),w(RE),f&&t($Ie),f&&t(yc),w(jL),f&&t(kIe),f&&t(gr),w(DL),w(OL),w(PE),w(VL),w(QE),f&&t(SIe),f&&t($c),w(XL),f&&t(RIe),f&&t(hr),w(zL),w(WL),w(HE),w(HL),w(n5),f&&t(BIe),f&&t(Rc),w(UL),f&&t(PIe),f&&t(pr),w(JL),w(KL),w(l5),w(ZL),w(b5),f&&t(IIe),f&&t(Ic),w(e8),f&&t(qIe),f&&t(ur),w(o8),w(t8),w(F5),w(a8),w(k5),f&&t(NIe),f&&t(jc),w(n8),f&&t(jIe),f&&t(_r),w(s8),w(i8),w(R5),w(d8),w(O5),f&&t(DIe),f&&t(Oc),w(c8),f&&t(GIe),f&&t(br),w(f8),w(g8),w(X5),w(h8),w(Z5),f&&t(OIe),f&&t(zc),w(p8),f&&t(VIe),f&&t(vr),w(u8),w(b8),w(oC),w(v8),w(tC),f&&t(XIe),f&&t(Hc),w(F8),f&&t(zIe),f&&t(Fr),w(T8),w(E8),w(nC),w(C8),w(iC),f&&t(QIe),f&&t(Yc),w(A8),f&&t(WIe),f&&t(Tr),w(y8),w(x8),w(cC),w($8),w(mC)}}}const Xwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function zwt(L){return WCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Kwt extends VCt{constructor(g){super();XCt(this,g,zwt,Vwt,zCt,{})}}export{Kwt as default,Xwt as metadata};
