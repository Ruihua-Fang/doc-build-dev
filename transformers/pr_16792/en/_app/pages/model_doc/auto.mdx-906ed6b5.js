import{S as iwt,i as dwt,s as cwt,e as a,k as l,w as f,t as o,M as fwt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as mwt}from"../../chunks/vendor-6b77c823.js";import{T as nIr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as z}from"../../chunks/IconCopyLink-7a11ce68.js";function gwt(Nf){let Z,io,fe,Ce,lo,pe,Ee,Xo,ji,jf,fa,Di,Gi,I5,Df,ke,co,Oi,On,q5,Vn,Xn,N5,Vi,zn,j5,Xi,Gf,Da;return{c(){Z=a("p"),io=o("If your "),fe=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),pe=a("code"),Ee=o("PretrainedConfig"),Xo=o(`, make sure its
`),ji=a("code"),jf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Di=a("code"),Gi=o('"new-model"'),I5=o(")."),Df=l(),ke=a("p"),co=o("Likewise, if your "),Oi=a("code"),On=o("NewModel"),q5=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),N5=o(`, make sure its
`),Vi=a("code"),zn=o("config_class"),j5=o(` attribute is set to the same class you use when registering the model (here
`),Xi=a("code"),Gf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),fe=n(ue,"CODE",{});var k8=s(fe);Ce=r(k8,"NewModelConfig"),k8.forEach(t),lo=r(ue," is a subclass of "),pe=n(ue,"CODE",{});var zi=s(pe);Ee=r(zi,"PretrainedConfig"),zi.forEach(t),Xo=r(ue,`, make sure its
`),ji=n(ue,"CODE",{});var S8=s(ji);jf=r(S8,"model_type"),S8.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Di=n(ue,"CODE",{});var R8=s(Di);Gi=r(R8,'"new-model"'),R8.forEach(t),I5=r(ue,")."),ue.forEach(t),Df=i(fo),ke=n(fo,"P",{});var zo=s(ke);co=r(zo,"Likewise, if your "),Oi=n(zo,"CODE",{});var Ga=s(Oi);On=r(Ga,"NewModel"),Ga.forEach(t),q5=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var B8=s(Vn);Xn=r(B8,"PreTrainedModel"),B8.forEach(t),N5=r(zo,`, make sure its
`),Vi=n(zo,"CODE",{});var Of=s(Vi);zn=r(Of,"config_class"),Of.forEach(t),j5=r(zo,` attribute is set to the same class you use when registering the model (here
`),Xi=n(zo,"CODE",{});var P8=s(Xi);Gf=r(P8,"NewModelConfig"),P8.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo),e(Z,pe),e(pe,Ee),e(Z,Xo),e(Z,ji),e(ji,jf),e(Z,fa),e(Z,Di),e(Di,Gi),e(Z,I5),b(fo,Df,ue),b(fo,ke,ue),e(ke,co),e(ke,Oi),e(Oi,On),e(ke,q5),e(ke,Vn),e(Vn,Xn),e(ke,N5),e(ke,Vi),e(Vi,zn),e(ke,j5),e(ke,Xi),e(Xi,Gf),e(ke,Da)},d(fo){fo&&t(Z),fo&&t(Df),fo&&t(ke)}}}function hwt(Nf){let Z,io,fe,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),fe=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(pe){Z=n(pe,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),fe=n(Ee,"CODE",{});var Xo=s(fe);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(pe,Ee){b(pe,Z,Ee),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo)},d(pe){pe&&t(Z)}}}function pwt(Nf){let Z,io,fe,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),fe=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(pe){Z=n(pe,"P",{});var Ee=s(Z);io=r(Ee,"Passing "),fe=n(Ee,"CODE",{});var Xo=s(fe);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Ee," is required when you want to use a private model."),Ee.forEach(t)},m(pe,Ee){b(pe,Z,Ee),e(Z,io),e(Z,fe),e(fe,Ce),e(Z,lo)},d(pe){pe&&t(Z)}}}function _wt(Nf){let Z,io,fe,Ce,lo,pe,Ee,Xo,ji,jf,fa,Di,Gi,I5,Df,ke,co,Oi,On,q5,Vn,Xn,N5,Vi,zn,j5,Xi,Gf,Da,fo,ue,k8,zi,S8,R8,zo,Ga,B8,Of,P8,Cqe,fBe,Qi,Vf,xY,D5,wqe,kY,Aqe,mBe,Qn,yqe,SY,Lqe,xqe,RY,kqe,Sqe,gBe,G5,hBe,$8,Rqe,pBe,Xf,_Be,Wi,zf,BY,O5,Bqe,PY,Pqe,uBe,Qo,V5,$qe,X5,Iqe,I8,qqe,Nqe,jqe,z5,Dqe,$Y,Gqe,Oqe,Vqe,mo,Q5,Xqe,IY,zqe,Qqe,Hi,Wqe,qY,Hqe,Uqe,NY,Jqe,Yqe,Kqe,F,Qf,jY,Zqe,eNe,q8,oNe,rNe,tNe,Wf,DY,aNe,nNe,N8,sNe,lNe,iNe,Hf,GY,dNe,cNe,j8,fNe,mNe,gNe,Uf,OY,hNe,pNe,D8,_Ne,uNe,bNe,Jf,VY,FNe,vNe,G8,TNe,MNe,ENe,Yf,XY,CNe,wNe,O8,ANe,yNe,LNe,Kf,zY,xNe,kNe,V8,SNe,RNe,BNe,Zf,QY,PNe,$Ne,X8,INe,qNe,NNe,em,WY,jNe,DNe,z8,GNe,ONe,VNe,om,HY,XNe,zNe,Q8,QNe,WNe,HNe,rm,UY,UNe,JNe,W8,YNe,KNe,ZNe,tm,JY,eje,oje,H8,rje,tje,aje,am,YY,nje,sje,U8,lje,ije,dje,nm,KY,cje,fje,J8,mje,gje,hje,sm,ZY,pje,_je,Y8,uje,bje,Fje,lm,eK,vje,Tje,K8,Mje,Eje,Cje,im,oK,wje,Aje,Z8,yje,Lje,xje,dm,rK,kje,Sje,ex,Rje,Bje,Pje,cm,tK,$je,Ije,ox,qje,Nje,jje,fm,aK,Dje,Gje,rx,Oje,Vje,Xje,mm,nK,zje,Qje,tx,Wje,Hje,Uje,gm,sK,Jje,Yje,ax,Kje,Zje,eDe,hm,lK,oDe,rDe,nx,tDe,aDe,nDe,pm,iK,sDe,lDe,sx,iDe,dDe,cDe,_m,dK,fDe,mDe,lx,gDe,hDe,pDe,um,cK,_De,uDe,ix,bDe,FDe,vDe,bm,fK,TDe,MDe,dx,EDe,CDe,wDe,Fm,mK,ADe,yDe,cx,LDe,xDe,kDe,vm,gK,SDe,RDe,fx,BDe,PDe,$De,Tm,hK,IDe,qDe,mx,NDe,jDe,DDe,Mm,pK,GDe,ODe,gx,VDe,XDe,zDe,Em,_K,QDe,WDe,hx,HDe,UDe,JDe,Cm,uK,YDe,KDe,px,ZDe,eGe,oGe,wm,bK,rGe,tGe,_x,aGe,nGe,sGe,Am,FK,lGe,iGe,ux,dGe,cGe,fGe,ym,vK,mGe,gGe,bx,hGe,pGe,_Ge,Lm,TK,uGe,bGe,Fx,FGe,vGe,TGe,xm,MK,MGe,EGe,vx,CGe,wGe,AGe,km,EK,yGe,LGe,Tx,xGe,kGe,SGe,Sm,CK,RGe,BGe,Mx,PGe,$Ge,IGe,Rm,wK,qGe,NGe,Ex,jGe,DGe,GGe,Bm,AK,OGe,VGe,Cx,XGe,zGe,QGe,Pm,yK,WGe,HGe,wx,UGe,JGe,YGe,$m,LK,KGe,ZGe,Ax,eOe,oOe,rOe,Im,xK,tOe,aOe,yx,nOe,sOe,lOe,qm,kK,iOe,dOe,Lx,cOe,fOe,mOe,Nm,SK,gOe,hOe,xx,pOe,_Oe,uOe,jm,RK,bOe,FOe,kx,vOe,TOe,MOe,Dm,BK,EOe,COe,Sx,wOe,AOe,yOe,Gm,PK,LOe,xOe,Rx,kOe,SOe,ROe,Om,$K,BOe,POe,Bx,$Oe,IOe,qOe,Vm,IK,NOe,jOe,Px,DOe,GOe,OOe,Xm,qK,VOe,XOe,$x,zOe,QOe,WOe,zm,NK,HOe,UOe,Ix,JOe,YOe,KOe,Qm,jK,ZOe,eVe,qx,oVe,rVe,tVe,Wm,DK,aVe,nVe,Nx,sVe,lVe,iVe,Hm,GK,dVe,cVe,jx,fVe,mVe,gVe,Um,OK,hVe,pVe,Dx,_Ve,uVe,bVe,Jm,VK,FVe,vVe,Gx,TVe,MVe,EVe,Ym,XK,CVe,wVe,Ox,AVe,yVe,LVe,Km,zK,xVe,kVe,Vx,SVe,RVe,BVe,Zm,QK,PVe,$Ve,Xx,IVe,qVe,NVe,eg,WK,jVe,DVe,zx,GVe,OVe,VVe,og,HK,XVe,zVe,Qx,QVe,WVe,HVe,rg,UK,UVe,JVe,Wx,YVe,KVe,ZVe,tg,JK,eXe,oXe,Hx,rXe,tXe,aXe,ag,YK,nXe,sXe,Ux,lXe,iXe,dXe,ng,KK,cXe,fXe,Jx,mXe,gXe,hXe,sg,ZK,pXe,_Xe,Yx,uXe,bXe,FXe,lg,eZ,vXe,TXe,Kx,MXe,EXe,CXe,ig,oZ,wXe,AXe,Zx,yXe,LXe,xXe,dg,rZ,kXe,SXe,ek,RXe,BXe,PXe,cg,tZ,$Xe,IXe,ok,qXe,NXe,jXe,fg,aZ,DXe,GXe,rk,OXe,VXe,XXe,mg,nZ,zXe,QXe,tk,WXe,HXe,UXe,gg,sZ,JXe,YXe,ak,KXe,ZXe,eze,hg,lZ,oze,rze,nk,tze,aze,nze,pg,iZ,sze,lze,sk,ize,dze,cze,_g,dZ,fze,mze,lk,gze,hze,pze,ug,cZ,_ze,uze,ik,bze,Fze,vze,bg,fZ,Tze,Mze,dk,Eze,Cze,wze,Fg,mZ,Aze,yze,ck,Lze,xze,kze,vg,gZ,Sze,Rze,fk,Bze,Pze,$ze,Tg,hZ,Ize,qze,mk,Nze,jze,Dze,Mg,pZ,Gze,Oze,gk,Vze,Xze,zze,Eg,_Z,Qze,Wze,hk,Hze,Uze,Jze,Cg,uZ,Yze,Kze,pk,Zze,eQe,oQe,wg,bZ,rQe,tQe,_k,aQe,nQe,sQe,Ag,FZ,lQe,iQe,uk,dQe,cQe,fQe,yg,vZ,mQe,gQe,bk,hQe,pQe,_Qe,Lg,TZ,uQe,bQe,Fk,FQe,vQe,TQe,xg,MZ,MQe,EQe,vk,CQe,wQe,AQe,kg,EZ,yQe,LQe,Tk,xQe,kQe,SQe,Sg,CZ,RQe,BQe,Mk,PQe,$Qe,IQe,Rg,wZ,qQe,NQe,Ek,jQe,DQe,GQe,Bg,AZ,OQe,VQe,Ck,XQe,zQe,QQe,Pg,yZ,WQe,HQe,wk,UQe,JQe,YQe,$g,LZ,KQe,ZQe,Ak,eWe,oWe,rWe,Ig,xZ,tWe,aWe,yk,nWe,sWe,lWe,qg,kZ,iWe,dWe,Lk,cWe,fWe,mWe,Ng,SZ,gWe,hWe,xk,pWe,_We,uWe,jg,RZ,bWe,FWe,kk,vWe,TWe,MWe,Dg,BZ,EWe,CWe,Sk,wWe,AWe,yWe,PZ,LWe,xWe,W5,kWe,Gg,H5,SWe,$Z,RWe,bBe,Ui,Og,IZ,U5,BWe,qZ,PWe,FBe,Wo,J5,$We,Y5,IWe,Rk,qWe,NWe,jWe,K5,DWe,NZ,GWe,OWe,VWe,go,Z5,XWe,jZ,zWe,QWe,Oa,WWe,DZ,HWe,UWe,GZ,JWe,YWe,OZ,KWe,ZWe,eHe,E,Wn,VZ,oHe,rHe,Bk,tHe,aHe,Pk,nHe,sHe,lHe,Hn,XZ,iHe,dHe,$k,cHe,fHe,Ik,mHe,gHe,hHe,Un,zZ,pHe,_He,qk,uHe,bHe,Nk,FHe,vHe,THe,Vg,QZ,MHe,EHe,jk,CHe,wHe,AHe,Jn,WZ,yHe,LHe,Dk,xHe,kHe,Gk,SHe,RHe,BHe,Xg,HZ,PHe,$He,Ok,IHe,qHe,NHe,zg,UZ,jHe,DHe,Vk,GHe,OHe,VHe,Qg,JZ,XHe,zHe,Xk,QHe,WHe,HHe,Yn,YZ,UHe,JHe,zk,YHe,KHe,Qk,ZHe,eUe,oUe,Kn,KZ,rUe,tUe,Wk,aUe,nUe,Hk,sUe,lUe,iUe,Zn,ZZ,dUe,cUe,Uk,fUe,mUe,Jk,gUe,hUe,pUe,Wg,eee,_Ue,uUe,Yk,bUe,FUe,vUe,Hg,oee,TUe,MUe,Kk,EUe,CUe,wUe,es,ree,AUe,yUe,Zk,LUe,xUe,eS,kUe,SUe,RUe,Ug,tee,BUe,PUe,oS,$Ue,IUe,qUe,os,aee,NUe,jUe,rS,DUe,GUe,tS,OUe,VUe,XUe,rs,nee,zUe,QUe,aS,WUe,HUe,nS,UUe,JUe,YUe,ts,see,KUe,ZUe,sS,eJe,oJe,lee,rJe,tJe,aJe,Jg,iee,nJe,sJe,lS,lJe,iJe,dJe,as,dee,cJe,fJe,iS,mJe,gJe,dS,hJe,pJe,_Je,ns,cee,uJe,bJe,cS,FJe,vJe,fS,TJe,MJe,EJe,ss,fee,CJe,wJe,mS,AJe,yJe,gS,LJe,xJe,kJe,ls,mee,SJe,RJe,hS,BJe,PJe,pS,$Je,IJe,qJe,is,gee,NJe,jJe,_S,DJe,GJe,uS,OJe,VJe,XJe,Yg,hee,zJe,QJe,bS,WJe,HJe,UJe,ds,pee,JJe,YJe,FS,KJe,ZJe,vS,eYe,oYe,rYe,Kg,_ee,tYe,aYe,TS,nYe,sYe,lYe,cs,uee,iYe,dYe,MS,cYe,fYe,ES,mYe,gYe,hYe,fs,bee,pYe,_Ye,CS,uYe,bYe,wS,FYe,vYe,TYe,ms,Fee,MYe,EYe,AS,CYe,wYe,yS,AYe,yYe,LYe,gs,vee,xYe,kYe,LS,SYe,RYe,xS,BYe,PYe,$Ye,Zg,Tee,IYe,qYe,kS,NYe,jYe,DYe,hs,Mee,GYe,OYe,SS,VYe,XYe,RS,zYe,QYe,WYe,ps,Eee,HYe,UYe,BS,JYe,YYe,PS,KYe,ZYe,eKe,_s,Cee,oKe,rKe,$S,tKe,aKe,IS,nKe,sKe,lKe,us,wee,iKe,dKe,qS,cKe,fKe,NS,mKe,gKe,hKe,bs,Aee,pKe,_Ke,jS,uKe,bKe,DS,FKe,vKe,TKe,Fs,yee,MKe,EKe,GS,CKe,wKe,OS,AKe,yKe,LKe,vs,Lee,xKe,kKe,VS,SKe,RKe,XS,BKe,PKe,$Ke,eh,xee,IKe,qKe,zS,NKe,jKe,DKe,Ts,kee,GKe,OKe,QS,VKe,XKe,WS,zKe,QKe,WKe,oh,See,HKe,UKe,HS,JKe,YKe,KKe,rh,Ree,ZKe,eZe,US,oZe,rZe,tZe,Ms,Bee,aZe,nZe,JS,sZe,lZe,YS,iZe,dZe,cZe,Es,Pee,fZe,mZe,KS,gZe,hZe,ZS,pZe,_Ze,uZe,th,$ee,bZe,FZe,eR,vZe,TZe,MZe,Cs,Iee,EZe,CZe,oR,wZe,AZe,rR,yZe,LZe,xZe,ws,qee,kZe,SZe,tR,RZe,BZe,aR,PZe,$Ze,IZe,As,Nee,qZe,NZe,nR,jZe,DZe,sR,GZe,OZe,VZe,ys,jee,XZe,zZe,lR,QZe,WZe,iR,HZe,UZe,JZe,Ls,Dee,YZe,KZe,dR,ZZe,eeo,cR,oeo,reo,teo,ah,Gee,aeo,neo,fR,seo,leo,ieo,nh,Oee,deo,ceo,mR,feo,meo,geo,sh,Vee,heo,peo,gR,_eo,ueo,beo,lh,Xee,Feo,veo,hR,Teo,Meo,Eeo,xs,zee,Ceo,weo,pR,Aeo,yeo,_R,Leo,xeo,keo,ih,Qee,Seo,Reo,uR,Beo,Peo,$eo,ks,Wee,Ieo,qeo,bR,Neo,jeo,FR,Deo,Geo,Oeo,Ss,Hee,Veo,Xeo,vR,zeo,Qeo,TR,Weo,Heo,Ueo,Rs,Uee,Jeo,Yeo,MR,Keo,Zeo,ER,eoo,ooo,roo,Bs,Jee,too,aoo,CR,noo,soo,wR,loo,ioo,doo,Ps,Yee,coo,foo,AR,moo,goo,yR,hoo,poo,_oo,$s,Kee,uoo,boo,LR,Foo,voo,xR,Too,Moo,Eoo,dh,Zee,Coo,woo,kR,Aoo,yoo,Loo,ch,eoe,xoo,koo,SR,Soo,Roo,Boo,Is,ooe,Poo,$oo,RR,Ioo,qoo,BR,Noo,joo,Doo,qs,roe,Goo,Ooo,PR,Voo,Xoo,$R,zoo,Qoo,Woo,Ns,toe,Hoo,Uoo,IR,Joo,Yoo,qR,Koo,Zoo,ero,fh,aoe,oro,rro,NR,tro,aro,nro,mh,noe,sro,lro,jR,iro,dro,cro,gh,soe,fro,mro,DR,gro,hro,pro,hh,loe,_ro,uro,GR,bro,Fro,vro,ph,ioe,Tro,Mro,OR,Ero,Cro,wro,js,doe,Aro,yro,VR,Lro,xro,XR,kro,Sro,Rro,_h,coe,Bro,Pro,zR,$ro,Iro,qro,uh,foe,Nro,jro,QR,Dro,Gro,Oro,Ds,moe,Vro,Xro,WR,zro,Qro,HR,Wro,Hro,Uro,Gs,goe,Jro,Yro,UR,Kro,Zro,JR,eto,oto,rto,hoe,tto,ato,e3,nto,bh,o3,sto,poe,lto,vBe,Ji,Fh,_oe,r3,ito,uoe,dto,TBe,Ho,t3,cto,a3,fto,YR,mto,gto,hto,n3,pto,boe,_to,uto,bto,Ie,s3,Fto,Foe,vto,Tto,Va,Mto,voe,Eto,Cto,Toe,wto,Ato,Moe,yto,Lto,xto,ee,vh,Eoe,kto,Sto,KR,Rto,Bto,Pto,Th,Coe,$to,Ito,ZR,qto,Nto,jto,Mh,woe,Dto,Gto,eB,Oto,Vto,Xto,Eh,Aoe,zto,Qto,oB,Wto,Hto,Uto,Ch,yoe,Jto,Yto,rB,Kto,Zto,eao,wh,Loe,oao,rao,tB,tao,aao,nao,Ah,xoe,sao,lao,aB,iao,dao,cao,yh,koe,fao,mao,nB,gao,hao,pao,Lh,Soe,_ao,uao,sB,bao,Fao,vao,xh,Roe,Tao,Mao,lB,Eao,Cao,wao,kh,Boe,Aao,yao,iB,Lao,xao,kao,Sh,Poe,Sao,Rao,dB,Bao,Pao,$ao,Rh,$oe,Iao,qao,cB,Nao,jao,Dao,Bh,Ioe,Gao,Oao,fB,Vao,Xao,zao,Ph,qoe,Qao,Wao,mB,Hao,Uao,Jao,$h,Noe,Yao,Kao,gB,Zao,eno,ono,Ih,joe,rno,tno,hB,ano,nno,sno,qh,Doe,lno,ino,pB,dno,cno,fno,Nh,Goe,mno,gno,_B,hno,pno,_no,jh,uno,Ooe,bno,Fno,l3,vno,Dh,i3,Tno,Voe,Mno,MBe,Yi,Gh,Xoe,d3,Eno,zoe,Cno,EBe,Uo,c3,wno,f3,Ano,uB,yno,Lno,xno,m3,kno,Qoe,Sno,Rno,Bno,qe,g3,Pno,Woe,$no,Ino,Ki,qno,Hoe,Nno,jno,Uoe,Dno,Gno,Ono,Se,Oh,Joe,Vno,Xno,bB,zno,Qno,Wno,Vh,Yoe,Hno,Uno,FB,Jno,Yno,Kno,Xh,Koe,Zno,eso,vB,oso,rso,tso,zh,Zoe,aso,nso,TB,sso,lso,iso,Qh,ere,dso,cso,MB,fso,mso,gso,Wh,ore,hso,pso,EB,_so,uso,bso,Hh,rre,Fso,vso,CB,Tso,Mso,Eso,Uh,tre,Cso,wso,wB,Aso,yso,Lso,Jh,xso,are,kso,Sso,h3,Rso,Yh,p3,Bso,nre,Pso,CBe,Zi,Kh,sre,_3,$so,lre,Iso,wBe,Jo,u3,qso,ed,Nso,AB,jso,Dso,yB,Gso,Oso,Vso,b3,Xso,ire,zso,Qso,Wso,Xr,F3,Hso,dre,Uso,Jso,od,Yso,cre,Kso,Zso,LB,elo,olo,rlo,fre,tlo,alo,v3,nlo,Ne,T3,slo,mre,llo,ilo,Xa,dlo,gre,clo,flo,hre,mlo,glo,pre,hlo,plo,_lo,T,Zh,_re,ulo,blo,xB,Flo,vlo,Tlo,ep,ure,Mlo,Elo,kB,Clo,wlo,Alo,op,bre,ylo,Llo,SB,xlo,klo,Slo,rp,Fre,Rlo,Blo,RB,Plo,$lo,Ilo,tp,vre,qlo,Nlo,BB,jlo,Dlo,Glo,ap,Tre,Olo,Vlo,PB,Xlo,zlo,Qlo,np,Mre,Wlo,Hlo,$B,Ulo,Jlo,Ylo,sp,Ere,Klo,Zlo,IB,eio,oio,rio,lp,Cre,tio,aio,qB,nio,sio,lio,ip,wre,iio,dio,NB,cio,fio,mio,dp,Are,gio,hio,jB,pio,_io,uio,cp,yre,bio,Fio,DB,vio,Tio,Mio,fp,Lre,Eio,Cio,GB,wio,Aio,yio,mp,xre,Lio,xio,OB,kio,Sio,Rio,gp,kre,Bio,Pio,VB,$io,Iio,qio,hp,Sre,Nio,jio,XB,Dio,Gio,Oio,pp,Rre,Vio,Xio,zB,zio,Qio,Wio,_p,Bre,Hio,Uio,QB,Jio,Yio,Kio,up,Pre,Zio,edo,WB,odo,rdo,tdo,bp,$re,ado,ndo,HB,sdo,ldo,ido,Fp,Ire,ddo,cdo,UB,fdo,mdo,gdo,vp,qre,hdo,pdo,JB,_do,udo,bdo,Tp,Nre,Fdo,vdo,YB,Tdo,Mdo,Edo,Mp,jre,Cdo,wdo,KB,Ado,ydo,Ldo,Ep,Dre,xdo,kdo,ZB,Sdo,Rdo,Bdo,Cp,Gre,Pdo,$do,eP,Ido,qdo,Ndo,wp,Ore,jdo,Ddo,oP,Gdo,Odo,Vdo,Ap,Vre,Xdo,zdo,rP,Qdo,Wdo,Hdo,yp,Xre,Udo,Jdo,tP,Ydo,Kdo,Zdo,Lp,zre,eco,oco,aP,rco,tco,aco,Os,Qre,nco,sco,nP,lco,ico,sP,dco,cco,fco,xp,Wre,mco,gco,lP,hco,pco,_co,kp,Hre,uco,bco,iP,Fco,vco,Tco,Sp,Ure,Mco,Eco,dP,Cco,wco,Aco,Rp,Jre,yco,Lco,cP,xco,kco,Sco,Bp,Yre,Rco,Bco,fP,Pco,$co,Ico,Pp,Kre,qco,Nco,mP,jco,Dco,Gco,$p,Zre,Oco,Vco,gP,Xco,zco,Qco,Ip,ete,Wco,Hco,hP,Uco,Jco,Yco,qp,ote,Kco,Zco,pP,efo,ofo,rfo,Np,rte,tfo,afo,_P,nfo,sfo,lfo,jp,tte,ifo,dfo,uP,cfo,ffo,mfo,Dp,ate,gfo,hfo,bP,pfo,_fo,ufo,Gp,nte,bfo,Ffo,FP,vfo,Tfo,Mfo,Op,ste,Efo,Cfo,vP,wfo,Afo,yfo,Vp,lte,Lfo,xfo,TP,kfo,Sfo,Rfo,Xp,ite,Bfo,Pfo,MP,$fo,Ifo,qfo,zp,dte,Nfo,jfo,EP,Dfo,Gfo,Ofo,Qp,cte,Vfo,Xfo,CP,zfo,Qfo,Wfo,Wp,fte,Hfo,Ufo,wP,Jfo,Yfo,Kfo,Hp,mte,Zfo,emo,AP,omo,rmo,tmo,Up,gte,amo,nmo,yP,smo,lmo,imo,Jp,hte,dmo,cmo,LP,fmo,mmo,gmo,Yp,pte,hmo,pmo,xP,_mo,umo,bmo,Kp,_te,Fmo,vmo,kP,Tmo,Mmo,Emo,Zp,ute,Cmo,wmo,SP,Amo,ymo,Lmo,e_,bte,xmo,kmo,RP,Smo,Rmo,Bmo,o_,Fte,Pmo,$mo,BP,Imo,qmo,Nmo,r_,vte,jmo,Dmo,PP,Gmo,Omo,Vmo,t_,Tte,Xmo,zmo,$P,Qmo,Wmo,Hmo,a_,Mte,Umo,Jmo,IP,Ymo,Kmo,Zmo,n_,Ete,ego,ogo,qP,rgo,tgo,ago,s_,Cte,ngo,sgo,NP,lgo,igo,dgo,l_,wte,cgo,fgo,jP,mgo,ggo,hgo,i_,Ate,pgo,_go,DP,ugo,bgo,Fgo,d_,yte,vgo,Tgo,GP,Mgo,Ego,Cgo,c_,Lte,wgo,Ago,OP,ygo,Lgo,xgo,f_,xte,kgo,Sgo,VP,Rgo,Bgo,Pgo,m_,kte,$go,Igo,XP,qgo,Ngo,jgo,g_,Ste,Dgo,Ggo,zP,Ogo,Vgo,Xgo,h_,Rte,zgo,Qgo,QP,Wgo,Hgo,Ugo,p_,Bte,Jgo,Ygo,WP,Kgo,Zgo,eho,__,Pte,oho,rho,HP,tho,aho,nho,u_,$te,sho,lho,UP,iho,dho,cho,b_,Ite,fho,mho,JP,gho,hho,pho,F_,qte,_ho,uho,YP,bho,Fho,vho,v_,Nte,Tho,Mho,KP,Eho,Cho,who,T_,jte,Aho,yho,ZP,Lho,xho,kho,M_,Dte,Sho,Rho,e$,Bho,Pho,$ho,E_,Gte,Iho,qho,o$,Nho,jho,Dho,C_,Ote,Gho,Oho,r$,Vho,Xho,zho,w_,Vte,Qho,Who,t$,Hho,Uho,Jho,A_,Xte,Yho,Kho,a$,Zho,epo,opo,y_,zte,rpo,tpo,n$,apo,npo,spo,L_,Qte,lpo,ipo,s$,dpo,cpo,fpo,x_,Wte,mpo,gpo,l$,hpo,ppo,_po,k_,Hte,upo,bpo,i$,Fpo,vpo,Tpo,S_,Ute,Mpo,Epo,d$,Cpo,wpo,Apo,R_,Jte,ypo,Lpo,c$,xpo,kpo,Spo,B_,Yte,Rpo,Bpo,f$,Ppo,$po,Ipo,P_,Kte,qpo,Npo,m$,jpo,Dpo,Gpo,$_,Zte,Opo,Vpo,g$,Xpo,zpo,Qpo,I_,eae,Wpo,Hpo,h$,Upo,Jpo,Ypo,q_,oae,Kpo,Zpo,p$,e_o,o_o,r_o,N_,rae,t_o,a_o,_$,n_o,s_o,l_o,j_,i_o,tae,d_o,c_o,aae,f_o,m_o,nae,g_o,h_o,M3,ABe,rd,D_,sae,E3,p_o,lae,__o,yBe,Yo,C3,u_o,td,b_o,u$,F_o,v_o,b$,T_o,M_o,E_o,w3,C_o,iae,w_o,A_o,y_o,zr,A3,L_o,dae,x_o,k_o,ad,S_o,cae,R_o,B_o,F$,P_o,$_o,I_o,fae,q_o,N_o,y3,j_o,je,L3,D_o,mae,G_o,O_o,za,V_o,gae,X_o,z_o,hae,Q_o,W_o,pae,H_o,U_o,J_o,S,G_,_ae,Y_o,K_o,v$,Z_o,euo,ouo,O_,uae,ruo,tuo,T$,auo,nuo,suo,V_,bae,luo,iuo,M$,duo,cuo,fuo,X_,Fae,muo,guo,E$,huo,puo,_uo,z_,vae,uuo,buo,C$,Fuo,vuo,Tuo,Q_,Tae,Muo,Euo,w$,Cuo,wuo,Auo,W_,Mae,yuo,Luo,A$,xuo,kuo,Suo,H_,Eae,Ruo,Buo,y$,Puo,$uo,Iuo,U_,Cae,quo,Nuo,L$,juo,Duo,Guo,J_,wae,Ouo,Vuo,x$,Xuo,zuo,Quo,Y_,Aae,Wuo,Huo,k$,Uuo,Juo,Yuo,K_,yae,Kuo,Zuo,S$,e2o,o2o,r2o,Z_,Lae,t2o,a2o,R$,n2o,s2o,l2o,eu,xae,i2o,d2o,B$,c2o,f2o,m2o,ou,kae,g2o,h2o,P$,p2o,_2o,u2o,ru,Sae,b2o,F2o,$$,v2o,T2o,M2o,tu,Rae,E2o,C2o,I$,w2o,A2o,y2o,au,Bae,L2o,x2o,q$,k2o,S2o,R2o,nu,Pae,B2o,P2o,N$,$2o,I2o,q2o,su,$ae,N2o,j2o,j$,D2o,G2o,O2o,lu,Iae,V2o,X2o,D$,z2o,Q2o,W2o,iu,qae,H2o,U2o,G$,J2o,Y2o,K2o,du,Nae,Z2o,e1o,O$,o1o,r1o,t1o,cu,jae,a1o,n1o,V$,s1o,l1o,i1o,fu,Dae,d1o,c1o,X$,f1o,m1o,g1o,mu,Gae,h1o,p1o,z$,_1o,u1o,b1o,gu,Oae,F1o,v1o,Q$,T1o,M1o,E1o,hu,Vae,C1o,w1o,W$,A1o,y1o,L1o,pu,Xae,x1o,k1o,H$,S1o,R1o,B1o,_u,zae,P1o,$1o,U$,I1o,q1o,N1o,uu,Qae,j1o,D1o,J$,G1o,O1o,V1o,bu,Wae,X1o,z1o,Y$,Q1o,W1o,H1o,Fu,Hae,U1o,J1o,K$,Y1o,K1o,Z1o,vu,Uae,ebo,obo,Z$,rbo,tbo,abo,Tu,Jae,nbo,sbo,eI,lbo,ibo,dbo,Mu,Yae,cbo,fbo,oI,mbo,gbo,hbo,Eu,Kae,pbo,_bo,rI,ubo,bbo,Fbo,Cu,Zae,vbo,Tbo,tI,Mbo,Ebo,Cbo,wu,ene,wbo,Abo,aI,ybo,Lbo,xbo,Au,one,kbo,Sbo,nI,Rbo,Bbo,Pbo,yu,$bo,rne,Ibo,qbo,tne,Nbo,jbo,ane,Dbo,Gbo,x3,LBe,nd,Lu,nne,k3,Obo,sne,Vbo,xBe,Ko,S3,Xbo,sd,zbo,sI,Qbo,Wbo,lI,Hbo,Ubo,Jbo,R3,Ybo,lne,Kbo,Zbo,e6o,Qr,B3,o6o,ine,r6o,t6o,ld,a6o,dne,n6o,s6o,iI,l6o,i6o,d6o,cne,c6o,f6o,P3,m6o,De,$3,g6o,fne,h6o,p6o,Qa,_6o,mne,u6o,b6o,gne,F6o,v6o,hne,T6o,M6o,E6o,$,xu,pne,C6o,w6o,dI,A6o,y6o,L6o,ku,_ne,x6o,k6o,cI,S6o,R6o,B6o,Su,une,P6o,$6o,fI,I6o,q6o,N6o,Ru,bne,j6o,D6o,mI,G6o,O6o,V6o,Bu,Fne,X6o,z6o,gI,Q6o,W6o,H6o,Pu,vne,U6o,J6o,hI,Y6o,K6o,Z6o,$u,Tne,eFo,oFo,pI,rFo,tFo,aFo,Iu,Mne,nFo,sFo,_I,lFo,iFo,dFo,qu,Ene,cFo,fFo,uI,mFo,gFo,hFo,Nu,Cne,pFo,_Fo,bI,uFo,bFo,FFo,ju,wne,vFo,TFo,FI,MFo,EFo,CFo,Du,Ane,wFo,AFo,vI,yFo,LFo,xFo,Gu,yne,kFo,SFo,TI,RFo,BFo,PFo,Ou,Lne,$Fo,IFo,MI,qFo,NFo,jFo,Vu,xne,DFo,GFo,EI,OFo,VFo,XFo,Xu,kne,zFo,QFo,CI,WFo,HFo,UFo,zu,Sne,JFo,YFo,wI,KFo,ZFo,evo,Qu,Rne,ovo,rvo,AI,tvo,avo,nvo,Wu,Bne,svo,lvo,yI,ivo,dvo,cvo,Hu,Pne,fvo,mvo,LI,gvo,hvo,pvo,Uu,$ne,_vo,uvo,xI,bvo,Fvo,vvo,Ju,Ine,Tvo,Mvo,kI,Evo,Cvo,wvo,Yu,qne,Avo,yvo,SI,Lvo,xvo,kvo,Ku,Nne,Svo,Rvo,RI,Bvo,Pvo,$vo,Zu,jne,Ivo,qvo,BI,Nvo,jvo,Dvo,e2,Dne,Gvo,Ovo,PI,Vvo,Xvo,zvo,o2,Gne,Qvo,Wvo,$I,Hvo,Uvo,Jvo,r2,One,Yvo,Kvo,II,Zvo,eTo,oTo,t2,Vne,rTo,tTo,qI,aTo,nTo,sTo,a2,Xne,lTo,iTo,NI,dTo,cTo,fTo,n2,zne,mTo,gTo,jI,hTo,pTo,_To,s2,Qne,uTo,bTo,DI,FTo,vTo,TTo,l2,Wne,MTo,ETo,GI,CTo,wTo,ATo,i2,Hne,yTo,LTo,OI,xTo,kTo,STo,d2,Une,RTo,BTo,VI,PTo,$To,ITo,c2,qTo,Jne,NTo,jTo,Yne,DTo,GTo,Kne,OTo,VTo,I3,kBe,id,f2,Zne,q3,XTo,ese,zTo,SBe,Zo,N3,QTo,dd,WTo,XI,HTo,UTo,zI,JTo,YTo,KTo,j3,ZTo,ose,e7o,o7o,r7o,Wr,D3,t7o,rse,a7o,n7o,cd,s7o,tse,l7o,i7o,QI,d7o,c7o,f7o,ase,m7o,g7o,G3,h7o,Ge,O3,p7o,nse,_7o,u7o,Wa,b7o,sse,F7o,v7o,lse,T7o,M7o,ise,E7o,C7o,w7o,I,m2,dse,A7o,y7o,WI,L7o,x7o,k7o,g2,cse,S7o,R7o,HI,B7o,P7o,$7o,h2,fse,I7o,q7o,UI,N7o,j7o,D7o,p2,mse,G7o,O7o,JI,V7o,X7o,z7o,_2,gse,Q7o,W7o,YI,H7o,U7o,J7o,u2,hse,Y7o,K7o,KI,Z7o,e9o,o9o,b2,pse,r9o,t9o,ZI,a9o,n9o,s9o,F2,_se,l9o,i9o,eq,d9o,c9o,f9o,v2,use,m9o,g9o,oq,h9o,p9o,_9o,T2,bse,u9o,b9o,rq,F9o,v9o,T9o,M2,Fse,M9o,E9o,tq,C9o,w9o,A9o,E2,vse,y9o,L9o,aq,x9o,k9o,S9o,C2,Tse,R9o,B9o,nq,P9o,$9o,I9o,w2,Mse,q9o,N9o,sq,j9o,D9o,G9o,A2,Ese,O9o,V9o,lq,X9o,z9o,Q9o,y2,Cse,W9o,H9o,iq,U9o,J9o,Y9o,L2,wse,K9o,Z9o,dq,eMo,oMo,rMo,x2,Ase,tMo,aMo,cq,nMo,sMo,lMo,k2,yse,iMo,dMo,fq,cMo,fMo,mMo,S2,Lse,gMo,hMo,mq,pMo,_Mo,uMo,R2,xse,bMo,FMo,gq,vMo,TMo,MMo,B2,kse,EMo,CMo,hq,wMo,AMo,yMo,P2,Sse,LMo,xMo,pq,kMo,SMo,RMo,$2,Rse,BMo,PMo,_q,$Mo,IMo,qMo,I2,Bse,NMo,jMo,uq,DMo,GMo,OMo,q2,Pse,VMo,XMo,bq,zMo,QMo,WMo,N2,$se,HMo,UMo,Fq,JMo,YMo,KMo,j2,Ise,ZMo,e4o,vq,o4o,r4o,t4o,D2,qse,a4o,n4o,Tq,s4o,l4o,i4o,G2,Nse,d4o,c4o,Mq,f4o,m4o,g4o,O2,jse,h4o,p4o,Dse,_4o,u4o,b4o,V2,Gse,F4o,v4o,Eq,T4o,M4o,E4o,X2,Ose,C4o,w4o,Cq,A4o,y4o,L4o,z2,Vse,x4o,k4o,wq,S4o,R4o,B4o,Q2,Xse,P4o,$4o,Aq,I4o,q4o,N4o,W2,j4o,zse,D4o,G4o,Qse,O4o,V4o,Wse,X4o,z4o,V3,RBe,fd,H2,Hse,X3,Q4o,Use,W4o,BBe,er,z3,H4o,md,U4o,yq,J4o,Y4o,Lq,K4o,Z4o,eEo,Q3,oEo,Jse,rEo,tEo,aEo,Hr,W3,nEo,Yse,sEo,lEo,gd,iEo,Kse,dEo,cEo,xq,fEo,mEo,gEo,Zse,hEo,pEo,H3,_Eo,Oe,U3,uEo,ele,bEo,FEo,Ha,vEo,ole,TEo,MEo,rle,EEo,CEo,tle,wEo,AEo,yEo,ae,U2,ale,LEo,xEo,kq,kEo,SEo,REo,J2,nle,BEo,PEo,Sq,$Eo,IEo,qEo,Y2,sle,NEo,jEo,Rq,DEo,GEo,OEo,K2,lle,VEo,XEo,Bq,zEo,QEo,WEo,Z2,ile,HEo,UEo,Pq,JEo,YEo,KEo,e1,dle,ZEo,e5o,$q,o5o,r5o,t5o,o1,cle,a5o,n5o,Iq,s5o,l5o,i5o,r1,fle,d5o,c5o,qq,f5o,m5o,g5o,t1,mle,h5o,p5o,Nq,_5o,u5o,b5o,a1,gle,F5o,v5o,jq,T5o,M5o,E5o,n1,hle,C5o,w5o,Dq,A5o,y5o,L5o,s1,ple,x5o,k5o,Gq,S5o,R5o,B5o,l1,_le,P5o,$5o,Oq,I5o,q5o,N5o,i1,ule,j5o,D5o,Vq,G5o,O5o,V5o,d1,ble,X5o,z5o,Xq,Q5o,W5o,H5o,c1,Fle,U5o,J5o,zq,Y5o,K5o,Z5o,f1,vle,e3o,o3o,Qq,r3o,t3o,a3o,m1,Tle,n3o,s3o,Wq,l3o,i3o,d3o,g1,c3o,Mle,f3o,m3o,Ele,g3o,h3o,Cle,p3o,_3o,J3,PBe,hd,h1,wle,Y3,u3o,Ale,b3o,$Be,or,K3,F3o,pd,v3o,Hq,T3o,M3o,Uq,E3o,C3o,w3o,Z3,A3o,yle,y3o,L3o,x3o,Ur,eC,k3o,Lle,S3o,R3o,_d,B3o,xle,P3o,$3o,Jq,I3o,q3o,N3o,kle,j3o,D3o,oC,G3o,Ve,rC,O3o,Sle,V3o,X3o,Ua,z3o,Rle,Q3o,W3o,Ble,H3o,U3o,Ple,J3o,Y3o,K3o,y,p1,$le,Z3o,eCo,Yq,oCo,rCo,tCo,_1,Ile,aCo,nCo,Kq,sCo,lCo,iCo,u1,qle,dCo,cCo,Zq,fCo,mCo,gCo,b1,Nle,hCo,pCo,eN,_Co,uCo,bCo,F1,jle,FCo,vCo,oN,TCo,MCo,ECo,v1,Dle,CCo,wCo,rN,ACo,yCo,LCo,T1,Gle,xCo,kCo,tN,SCo,RCo,BCo,M1,Ole,PCo,$Co,aN,ICo,qCo,NCo,E1,Vle,jCo,DCo,nN,GCo,OCo,VCo,C1,Xle,XCo,zCo,sN,QCo,WCo,HCo,w1,zle,UCo,JCo,lN,YCo,KCo,ZCo,A1,Qle,ewo,owo,iN,rwo,two,awo,y1,Wle,nwo,swo,dN,lwo,iwo,dwo,L1,Hle,cwo,fwo,cN,mwo,gwo,hwo,x1,Ule,pwo,_wo,fN,uwo,bwo,Fwo,k1,Jle,vwo,Two,mN,Mwo,Ewo,Cwo,S1,Yle,wwo,Awo,gN,ywo,Lwo,xwo,R1,Kle,kwo,Swo,hN,Rwo,Bwo,Pwo,B1,Zle,$wo,Iwo,pN,qwo,Nwo,jwo,P1,eie,Dwo,Gwo,_N,Owo,Vwo,Xwo,$1,oie,zwo,Qwo,uN,Wwo,Hwo,Uwo,I1,rie,Jwo,Ywo,bN,Kwo,Zwo,eAo,q1,tie,oAo,rAo,FN,tAo,aAo,nAo,N1,aie,sAo,lAo,vN,iAo,dAo,cAo,j1,nie,fAo,mAo,TN,gAo,hAo,pAo,D1,sie,_Ao,uAo,MN,bAo,FAo,vAo,G1,lie,TAo,MAo,EN,EAo,CAo,wAo,O1,iie,AAo,yAo,CN,LAo,xAo,kAo,V1,die,SAo,RAo,wN,BAo,PAo,$Ao,X1,cie,IAo,qAo,AN,NAo,jAo,DAo,z1,fie,GAo,OAo,yN,VAo,XAo,zAo,Q1,mie,QAo,WAo,LN,HAo,UAo,JAo,W1,gie,YAo,KAo,xN,ZAo,e0o,o0o,H1,hie,r0o,t0o,kN,a0o,n0o,s0o,U1,pie,l0o,i0o,SN,d0o,c0o,f0o,J1,_ie,m0o,g0o,RN,h0o,p0o,_0o,Y1,uie,u0o,b0o,BN,F0o,v0o,T0o,K1,bie,M0o,E0o,PN,C0o,w0o,A0o,Z1,Fie,y0o,L0o,$N,x0o,k0o,S0o,eb,vie,R0o,B0o,IN,P0o,$0o,I0o,ob,Tie,q0o,N0o,qN,j0o,D0o,G0o,rb,Mie,O0o,V0o,NN,X0o,z0o,Q0o,tb,Eie,W0o,H0o,jN,U0o,J0o,Y0o,ab,Cie,K0o,Z0o,DN,eyo,oyo,ryo,nb,wie,tyo,ayo,GN,nyo,syo,lyo,sb,Aie,iyo,dyo,ON,cyo,fyo,myo,lb,yie,gyo,hyo,VN,pyo,_yo,uyo,ib,byo,Lie,Fyo,vyo,xie,Tyo,Myo,kie,Eyo,Cyo,tC,IBe,ud,db,Sie,aC,wyo,Rie,Ayo,qBe,rr,nC,yyo,bd,Lyo,XN,xyo,kyo,zN,Syo,Ryo,Byo,sC,Pyo,Bie,$yo,Iyo,qyo,Jr,lC,Nyo,Pie,jyo,Dyo,Fd,Gyo,$ie,Oyo,Vyo,QN,Xyo,zyo,Qyo,Iie,Wyo,Hyo,iC,Uyo,Xe,dC,Jyo,qie,Yyo,Kyo,Ja,Zyo,Nie,eLo,oLo,jie,rLo,tLo,Die,aLo,nLo,sLo,G,cb,Gie,lLo,iLo,WN,dLo,cLo,fLo,fb,Oie,mLo,gLo,HN,hLo,pLo,_Lo,mb,Vie,uLo,bLo,UN,FLo,vLo,TLo,gb,Xie,MLo,ELo,JN,CLo,wLo,ALo,hb,zie,yLo,LLo,YN,xLo,kLo,SLo,pb,Qie,RLo,BLo,KN,PLo,$Lo,ILo,_b,Wie,qLo,NLo,ZN,jLo,DLo,GLo,ub,Hie,OLo,VLo,ej,XLo,zLo,QLo,bb,Uie,WLo,HLo,oj,ULo,JLo,YLo,Fb,Jie,KLo,ZLo,rj,e8o,o8o,r8o,vb,Yie,t8o,a8o,tj,n8o,s8o,l8o,Tb,Kie,i8o,d8o,aj,c8o,f8o,m8o,Mb,Zie,g8o,h8o,nj,p8o,_8o,u8o,Eb,ede,b8o,F8o,sj,v8o,T8o,M8o,Cb,ode,E8o,C8o,lj,w8o,A8o,y8o,wb,rde,L8o,x8o,ij,k8o,S8o,R8o,Ab,tde,B8o,P8o,dj,$8o,I8o,q8o,yb,ade,N8o,j8o,cj,D8o,G8o,O8o,Lb,nde,V8o,X8o,fj,z8o,Q8o,W8o,xb,sde,H8o,U8o,mj,J8o,Y8o,K8o,kb,lde,Z8o,exo,gj,oxo,rxo,txo,Sb,ide,axo,nxo,hj,sxo,lxo,ixo,Rb,dde,dxo,cxo,pj,fxo,mxo,gxo,Bb,cde,hxo,pxo,_j,_xo,uxo,bxo,Pb,fde,Fxo,vxo,uj,Txo,Mxo,Exo,$b,mde,Cxo,wxo,bj,Axo,yxo,Lxo,Ib,gde,xxo,kxo,Fj,Sxo,Rxo,Bxo,qb,hde,Pxo,$xo,vj,Ixo,qxo,Nxo,Nb,jxo,pde,Dxo,Gxo,_de,Oxo,Vxo,ude,Xxo,zxo,cC,NBe,vd,jb,bde,fC,Qxo,Fde,Wxo,jBe,tr,mC,Hxo,Td,Uxo,Tj,Jxo,Yxo,Mj,Kxo,Zxo,eko,gC,oko,vde,rko,tko,ako,Yr,hC,nko,Tde,sko,lko,Md,iko,Mde,dko,cko,Ej,fko,mko,gko,Ede,hko,pko,pC,_ko,ze,_C,uko,Cde,bko,Fko,Ya,vko,wde,Tko,Mko,Ade,Eko,Cko,yde,wko,Ako,yko,da,Db,Lde,Lko,xko,Cj,kko,Sko,Rko,Gb,xde,Bko,Pko,wj,$ko,Iko,qko,Ob,kde,Nko,jko,Aj,Dko,Gko,Oko,Vb,Sde,Vko,Xko,yj,zko,Qko,Wko,Xb,Rde,Hko,Uko,Lj,Jko,Yko,Kko,zb,Zko,Bde,eSo,oSo,Pde,rSo,tSo,$de,aSo,nSo,uC,DBe,Ed,Qb,Ide,bC,sSo,qde,lSo,GBe,ar,FC,iSo,Cd,dSo,xj,cSo,fSo,kj,mSo,gSo,hSo,vC,pSo,Nde,_So,uSo,bSo,Kr,TC,FSo,jde,vSo,TSo,wd,MSo,Dde,ESo,CSo,Sj,wSo,ASo,ySo,Gde,LSo,xSo,MC,kSo,Qe,EC,SSo,Ode,RSo,BSo,Ka,PSo,Vde,$So,ISo,Xde,qSo,NSo,zde,jSo,DSo,GSo,j,Wb,Qde,OSo,VSo,Rj,XSo,zSo,QSo,Hb,Wde,WSo,HSo,Bj,USo,JSo,YSo,Ub,Hde,KSo,ZSo,Pj,eRo,oRo,rRo,Jb,Ude,tRo,aRo,$j,nRo,sRo,lRo,Yb,Jde,iRo,dRo,Ij,cRo,fRo,mRo,Kb,Yde,gRo,hRo,qj,pRo,_Ro,uRo,Zb,Kde,bRo,FRo,Nj,vRo,TRo,MRo,e6,Zde,ERo,CRo,jj,wRo,ARo,yRo,o6,ece,LRo,xRo,Dj,kRo,SRo,RRo,r6,oce,BRo,PRo,Gj,$Ro,IRo,qRo,t6,rce,NRo,jRo,Oj,DRo,GRo,ORo,a6,tce,VRo,XRo,Vj,zRo,QRo,WRo,n6,ace,HRo,URo,Xj,JRo,YRo,KRo,s6,nce,ZRo,eBo,zj,oBo,rBo,tBo,l6,sce,aBo,nBo,Qj,sBo,lBo,iBo,i6,lce,dBo,cBo,Wj,fBo,mBo,gBo,d6,ice,hBo,pBo,Hj,_Bo,uBo,bBo,c6,dce,FBo,vBo,Uj,TBo,MBo,EBo,f6,cce,CBo,wBo,Jj,ABo,yBo,LBo,m6,fce,xBo,kBo,Yj,SBo,RBo,BBo,g6,mce,PBo,$Bo,Kj,IBo,qBo,NBo,h6,gce,jBo,DBo,Zj,GBo,OBo,VBo,p6,hce,XBo,zBo,eD,QBo,WBo,HBo,_6,pce,UBo,JBo,oD,YBo,KBo,ZBo,u6,_ce,ePo,oPo,rD,rPo,tPo,aPo,b6,uce,nPo,sPo,tD,lPo,iPo,dPo,F6,bce,cPo,fPo,aD,mPo,gPo,hPo,v6,Fce,pPo,_Po,nD,uPo,bPo,FPo,T6,vce,vPo,TPo,sD,MPo,EPo,CPo,M6,Tce,wPo,APo,lD,yPo,LPo,xPo,E6,Mce,kPo,SPo,iD,RPo,BPo,PPo,C6,Ece,$Po,IPo,dD,qPo,NPo,jPo,w6,Cce,DPo,GPo,cD,OPo,VPo,XPo,A6,zPo,wce,QPo,WPo,Ace,HPo,UPo,yce,JPo,YPo,CC,OBe,Ad,y6,Lce,wC,KPo,xce,ZPo,VBe,nr,AC,e$o,yd,o$o,fD,r$o,t$o,mD,a$o,n$o,s$o,yC,l$o,kce,i$o,d$o,c$o,Zr,LC,f$o,Sce,m$o,g$o,Ld,h$o,Rce,p$o,_$o,gD,u$o,b$o,F$o,Bce,v$o,T$o,xC,M$o,We,kC,E$o,Pce,C$o,w$o,Za,A$o,$ce,y$o,L$o,Ice,x$o,k$o,qce,S$o,R$o,B$o,R,L6,Nce,P$o,$$o,hD,I$o,q$o,N$o,x6,jce,j$o,D$o,pD,G$o,O$o,V$o,k6,Dce,X$o,z$o,_D,Q$o,W$o,H$o,S6,Gce,U$o,J$o,uD,Y$o,K$o,Z$o,R6,Oce,eIo,oIo,bD,rIo,tIo,aIo,B6,Vce,nIo,sIo,FD,lIo,iIo,dIo,P6,Xce,cIo,fIo,vD,mIo,gIo,hIo,$6,zce,pIo,_Io,TD,uIo,bIo,FIo,I6,Qce,vIo,TIo,MD,MIo,EIo,CIo,q6,Wce,wIo,AIo,ED,yIo,LIo,xIo,N6,Hce,kIo,SIo,CD,RIo,BIo,PIo,j6,Uce,$Io,IIo,wD,qIo,NIo,jIo,D6,Jce,DIo,GIo,AD,OIo,VIo,XIo,G6,Yce,zIo,QIo,yD,WIo,HIo,UIo,O6,Kce,JIo,YIo,LD,KIo,ZIo,eqo,V6,Zce,oqo,rqo,xD,tqo,aqo,nqo,X6,efe,sqo,lqo,kD,iqo,dqo,cqo,z6,ofe,fqo,mqo,SD,gqo,hqo,pqo,Q6,rfe,_qo,uqo,RD,bqo,Fqo,vqo,W6,tfe,Tqo,Mqo,BD,Eqo,Cqo,wqo,H6,afe,Aqo,yqo,PD,Lqo,xqo,kqo,U6,nfe,Sqo,Rqo,$D,Bqo,Pqo,$qo,J6,sfe,Iqo,qqo,ID,Nqo,jqo,Dqo,Y6,lfe,Gqo,Oqo,qD,Vqo,Xqo,zqo,K6,ife,Qqo,Wqo,ND,Hqo,Uqo,Jqo,Z6,dfe,Yqo,Kqo,jD,Zqo,eNo,oNo,eF,cfe,rNo,tNo,DD,aNo,nNo,sNo,oF,ffe,lNo,iNo,GD,dNo,cNo,fNo,rF,mfe,mNo,gNo,OD,hNo,pNo,_No,tF,gfe,uNo,bNo,VD,FNo,vNo,TNo,aF,hfe,MNo,ENo,XD,CNo,wNo,ANo,nF,pfe,yNo,LNo,zD,xNo,kNo,SNo,sF,_fe,RNo,BNo,QD,PNo,$No,INo,lF,ufe,qNo,NNo,WD,jNo,DNo,GNo,iF,bfe,ONo,VNo,HD,XNo,zNo,QNo,dF,Ffe,WNo,HNo,UD,UNo,JNo,YNo,cF,vfe,KNo,ZNo,JD,ejo,ojo,rjo,fF,Tfe,tjo,ajo,YD,njo,sjo,ljo,mF,Mfe,ijo,djo,KD,cjo,fjo,mjo,gF,gjo,Efe,hjo,pjo,Cfe,_jo,ujo,wfe,bjo,Fjo,SC,XBe,xd,hF,Afe,RC,vjo,yfe,Tjo,zBe,sr,BC,Mjo,kd,Ejo,ZD,Cjo,wjo,eG,Ajo,yjo,Ljo,PC,xjo,Lfe,kjo,Sjo,Rjo,et,$C,Bjo,xfe,Pjo,$jo,Sd,Ijo,kfe,qjo,Njo,oG,jjo,Djo,Gjo,Sfe,Ojo,Vjo,IC,Xjo,He,qC,zjo,Rfe,Qjo,Wjo,en,Hjo,Bfe,Ujo,Jjo,Pfe,Yjo,Kjo,$fe,Zjo,eDo,oDo,Ife,pF,qfe,rDo,tDo,rG,aDo,nDo,sDo,_F,lDo,Nfe,iDo,dDo,jfe,cDo,fDo,Dfe,mDo,gDo,NC,QBe,Rd,uF,Gfe,jC,hDo,Ofe,pDo,WBe,lr,DC,_Do,Bd,uDo,tG,bDo,FDo,aG,vDo,TDo,MDo,GC,EDo,Vfe,CDo,wDo,ADo,ot,OC,yDo,Xfe,LDo,xDo,Pd,kDo,zfe,SDo,RDo,nG,BDo,PDo,$Do,Qfe,IDo,qDo,VC,NDo,Ue,XC,jDo,Wfe,DDo,GDo,on,ODo,Hfe,VDo,XDo,Ufe,zDo,QDo,Jfe,WDo,HDo,UDo,de,bF,Yfe,JDo,YDo,sG,KDo,ZDo,eGo,FF,Kfe,oGo,rGo,lG,tGo,aGo,nGo,vF,Zfe,sGo,lGo,iG,iGo,dGo,cGo,Vs,eme,fGo,mGo,dG,gGo,hGo,cG,pGo,_Go,uGo,TF,ome,bGo,FGo,fG,vGo,TGo,MGo,ma,rme,EGo,CGo,mG,wGo,AGo,gG,yGo,LGo,hG,xGo,kGo,SGo,MF,tme,RGo,BGo,pG,PGo,$Go,IGo,EF,ame,qGo,NGo,_G,jGo,DGo,GGo,CF,nme,OGo,VGo,uG,XGo,zGo,QGo,wF,sme,WGo,HGo,bG,UGo,JGo,YGo,AF,lme,KGo,ZGo,FG,eOo,oOo,rOo,yF,ime,tOo,aOo,vG,nOo,sOo,lOo,LF,dme,iOo,dOo,TG,cOo,fOo,mOo,xF,gOo,cme,hOo,pOo,fme,_Oo,uOo,mme,bOo,FOo,zC,HBe,$d,kF,gme,QC,vOo,hme,TOo,UBe,ir,WC,MOo,Id,EOo,MG,COo,wOo,EG,AOo,yOo,LOo,HC,xOo,pme,kOo,SOo,ROo,rt,UC,BOo,_me,POo,$Oo,qd,IOo,ume,qOo,NOo,CG,jOo,DOo,GOo,bme,OOo,VOo,JC,XOo,Je,YC,zOo,Fme,QOo,WOo,rn,HOo,vme,UOo,JOo,Tme,YOo,KOo,Mme,ZOo,eVo,oVo,Eme,SF,Cme,rVo,tVo,wG,aVo,nVo,sVo,RF,lVo,wme,iVo,dVo,Ame,cVo,fVo,yme,mVo,gVo,KC,JBe,Nd,BF,Lme,ZC,hVo,xme,pVo,YBe,dr,ew,_Vo,jd,uVo,AG,bVo,FVo,yG,vVo,TVo,MVo,ow,EVo,kme,CVo,wVo,AVo,tt,rw,yVo,Sme,LVo,xVo,Dd,kVo,Rme,SVo,RVo,LG,BVo,PVo,$Vo,Bme,IVo,qVo,tw,NVo,Ye,aw,jVo,Pme,DVo,GVo,tn,OVo,$me,VVo,XVo,Ime,zVo,QVo,qme,WVo,HVo,UVo,Re,PF,Nme,JVo,YVo,xG,KVo,ZVo,eXo,$F,jme,oXo,rXo,kG,tXo,aXo,nXo,IF,Dme,sXo,lXo,SG,iXo,dXo,cXo,qF,Gme,fXo,mXo,RG,gXo,hXo,pXo,NF,Ome,_Xo,uXo,BG,bXo,FXo,vXo,jF,Vme,TXo,MXo,PG,EXo,CXo,wXo,DF,Xme,AXo,yXo,$G,LXo,xXo,kXo,GF,zme,SXo,RXo,IG,BXo,PXo,$Xo,OF,IXo,Qme,qXo,NXo,Wme,jXo,DXo,Hme,GXo,OXo,nw,KBe,Gd,VF,Ume,sw,VXo,Jme,XXo,ZBe,cr,lw,zXo,Od,QXo,qG,WXo,HXo,NG,UXo,JXo,YXo,iw,KXo,Yme,ZXo,ezo,ozo,at,dw,rzo,Kme,tzo,azo,Vd,nzo,Zme,szo,lzo,jG,izo,dzo,czo,ege,fzo,mzo,cw,gzo,Ke,fw,hzo,oge,pzo,_zo,an,uzo,rge,bzo,Fzo,tge,vzo,Tzo,age,Mzo,Ezo,Czo,nn,XF,nge,wzo,Azo,DG,yzo,Lzo,xzo,zF,sge,kzo,Szo,GG,Rzo,Bzo,Pzo,QF,lge,$zo,Izo,OG,qzo,Nzo,jzo,WF,ige,Dzo,Gzo,VG,Ozo,Vzo,Xzo,HF,zzo,dge,Qzo,Wzo,cge,Hzo,Uzo,fge,Jzo,Yzo,mw,ePe,Xd,UF,mge,gw,Kzo,gge,Zzo,oPe,fr,hw,eQo,zd,oQo,XG,rQo,tQo,zG,aQo,nQo,sQo,pw,lQo,hge,iQo,dQo,cQo,nt,_w,fQo,pge,mQo,gQo,Qd,hQo,_ge,pQo,_Qo,QG,uQo,bQo,FQo,uge,vQo,TQo,uw,MQo,Ze,bw,EQo,bge,CQo,wQo,sn,AQo,Fge,yQo,LQo,vge,xQo,kQo,Tge,SQo,RQo,BQo,Be,JF,Mge,PQo,$Qo,WG,IQo,qQo,NQo,YF,Ege,jQo,DQo,HG,GQo,OQo,VQo,KF,Cge,XQo,zQo,UG,QQo,WQo,HQo,ZF,wge,UQo,JQo,JG,YQo,KQo,ZQo,ev,Age,eWo,oWo,YG,rWo,tWo,aWo,ov,yge,nWo,sWo,KG,lWo,iWo,dWo,rv,Lge,cWo,fWo,ZG,mWo,gWo,hWo,tv,xge,pWo,_Wo,eO,uWo,bWo,FWo,av,vWo,kge,TWo,MWo,Sge,EWo,CWo,Rge,wWo,AWo,Fw,rPe,Wd,nv,Bge,vw,yWo,Pge,LWo,tPe,mr,Tw,xWo,Hd,kWo,oO,SWo,RWo,rO,BWo,PWo,$Wo,Mw,IWo,$ge,qWo,NWo,jWo,st,Ew,DWo,Ige,GWo,OWo,Ud,VWo,qge,XWo,zWo,tO,QWo,WWo,HWo,Nge,UWo,JWo,Cw,YWo,eo,ww,KWo,jge,ZWo,eHo,ln,oHo,Dge,rHo,tHo,Gge,aHo,nHo,Oge,sHo,lHo,iHo,Aw,sv,Vge,dHo,cHo,aO,fHo,mHo,gHo,lv,Xge,hHo,pHo,nO,_Ho,uHo,bHo,iv,FHo,zge,vHo,THo,Qge,MHo,EHo,Wge,CHo,wHo,yw,aPe,Jd,dv,Hge,Lw,AHo,Uge,yHo,nPe,gr,xw,LHo,Yd,xHo,sO,kHo,SHo,lO,RHo,BHo,PHo,kw,$Ho,Jge,IHo,qHo,NHo,lt,Sw,jHo,Yge,DHo,GHo,Kd,OHo,Kge,VHo,XHo,iO,zHo,QHo,WHo,Zge,HHo,UHo,Rw,JHo,oo,Bw,YHo,ehe,KHo,ZHo,dn,eUo,ohe,oUo,rUo,rhe,tUo,aUo,the,nUo,sUo,lUo,cn,cv,ahe,iUo,dUo,dO,cUo,fUo,mUo,fv,nhe,gUo,hUo,cO,pUo,_Uo,uUo,mv,she,bUo,FUo,fO,vUo,TUo,MUo,gv,lhe,EUo,CUo,mO,wUo,AUo,yUo,hv,LUo,ihe,xUo,kUo,dhe,SUo,RUo,che,BUo,PUo,Pw,sPe,Zd,pv,fhe,$w,$Uo,mhe,IUo,lPe,hr,Iw,qUo,ec,NUo,gO,jUo,DUo,hO,GUo,OUo,VUo,qw,XUo,ghe,zUo,QUo,WUo,it,Nw,HUo,hhe,UUo,JUo,oc,YUo,phe,KUo,ZUo,pO,eJo,oJo,rJo,_he,tJo,aJo,jw,nJo,ro,Dw,sJo,uhe,lJo,iJo,fn,dJo,bhe,cJo,fJo,Fhe,mJo,gJo,vhe,hJo,pJo,_Jo,rc,_v,The,uJo,bJo,_O,FJo,vJo,TJo,uv,Mhe,MJo,EJo,uO,CJo,wJo,AJo,bv,Ehe,yJo,LJo,bO,xJo,kJo,SJo,Fv,RJo,Che,BJo,PJo,whe,$Jo,IJo,Ahe,qJo,NJo,Gw,iPe,tc,vv,yhe,Ow,jJo,Lhe,DJo,dPe,pr,Vw,GJo,ac,OJo,FO,VJo,XJo,vO,zJo,QJo,WJo,Xw,HJo,xhe,UJo,JJo,YJo,dt,zw,KJo,khe,ZJo,eYo,nc,oYo,She,rYo,tYo,TO,aYo,nYo,sYo,Rhe,lYo,iYo,Qw,dYo,to,Ww,cYo,Bhe,fYo,mYo,mn,gYo,Phe,hYo,pYo,$he,_Yo,uYo,Ihe,bYo,FYo,vYo,qhe,Tv,Nhe,TYo,MYo,MO,EYo,CYo,wYo,Mv,AYo,jhe,yYo,LYo,Dhe,xYo,kYo,Ghe,SYo,RYo,Hw,cPe,sc,Ev,Ohe,Uw,BYo,Vhe,PYo,fPe,_r,Jw,$Yo,lc,IYo,EO,qYo,NYo,CO,jYo,DYo,GYo,Yw,OYo,Xhe,VYo,XYo,zYo,ct,Kw,QYo,zhe,WYo,HYo,ic,UYo,Qhe,JYo,YYo,wO,KYo,ZYo,eKo,Whe,oKo,rKo,Zw,tKo,ao,eA,aKo,Hhe,nKo,sKo,gn,lKo,Uhe,iKo,dKo,Jhe,cKo,fKo,Yhe,mKo,gKo,hKo,Khe,Cv,Zhe,pKo,_Ko,AO,uKo,bKo,FKo,wv,vKo,epe,TKo,MKo,ope,EKo,CKo,rpe,wKo,AKo,oA,mPe,dc,Av,tpe,rA,yKo,ape,LKo,gPe,ur,tA,xKo,cc,kKo,yO,SKo,RKo,LO,BKo,PKo,$Ko,aA,IKo,npe,qKo,NKo,jKo,ft,nA,DKo,spe,GKo,OKo,fc,VKo,lpe,XKo,zKo,xO,QKo,WKo,HKo,ipe,UKo,JKo,sA,YKo,no,lA,KKo,dpe,ZKo,eZo,hn,oZo,cpe,rZo,tZo,fpe,aZo,nZo,mpe,sZo,lZo,iZo,pn,yv,gpe,dZo,cZo,kO,fZo,mZo,gZo,Lv,hpe,hZo,pZo,SO,_Zo,uZo,bZo,xv,ppe,FZo,vZo,RO,TZo,MZo,EZo,kv,_pe,CZo,wZo,BO,AZo,yZo,LZo,Sv,xZo,upe,kZo,SZo,bpe,RZo,BZo,Fpe,PZo,$Zo,iA,hPe,mc,Rv,vpe,dA,IZo,Tpe,qZo,pPe,br,cA,NZo,gc,jZo,PO,DZo,GZo,$O,OZo,VZo,XZo,fA,zZo,Mpe,QZo,WZo,HZo,mt,mA,UZo,Epe,JZo,YZo,hc,KZo,Cpe,ZZo,eer,IO,oer,rer,ter,wpe,aer,ner,gA,ser,so,hA,ler,Ape,ier,der,_n,cer,ype,fer,mer,Lpe,ger,her,xpe,per,_er,uer,kpe,Bv,Spe,ber,Fer,qO,ver,Ter,Mer,Pv,Eer,Rpe,Cer,wer,Bpe,Aer,yer,Ppe,Ler,xer,pA,_Pe,pc,$v,$pe,_A,ker,Ipe,Ser,uPe,Fr,uA,Rer,_c,Ber,NO,Per,$er,jO,Ier,qer,Ner,bA,jer,qpe,Der,Ger,Oer,gt,FA,Ver,Npe,Xer,zer,uc,Qer,jpe,Wer,Her,DO,Uer,Jer,Yer,Dpe,Ker,Zer,vA,eor,ho,TA,oor,Gpe,ror,tor,un,aor,Ope,nor,sor,Vpe,lor,ior,Xpe,dor,cor,mor,x,Iv,zpe,gor,hor,GO,por,_or,uor,qv,Qpe,bor,For,OO,vor,Tor,Mor,Nv,Wpe,Eor,Cor,VO,wor,Aor,yor,jv,Hpe,Lor,xor,XO,kor,Sor,Ror,Dv,Upe,Bor,Por,zO,$or,Ior,qor,Gv,Jpe,Nor,jor,QO,Dor,Gor,Oor,Ov,Ype,Vor,Xor,WO,zor,Qor,Wor,Vv,Kpe,Hor,Uor,HO,Jor,Yor,Kor,Xv,Zpe,Zor,err,UO,orr,rrr,trr,zv,e_e,arr,nrr,JO,srr,lrr,irr,Qv,o_e,drr,crr,YO,frr,mrr,grr,Wv,r_e,hrr,prr,KO,_rr,urr,brr,Hv,t_e,Frr,vrr,ZO,Trr,Mrr,Err,Uv,a_e,Crr,wrr,eV,Arr,yrr,Lrr,Jv,n_e,xrr,krr,oV,Srr,Rrr,Brr,Yv,s_e,Prr,$rr,rV,Irr,qrr,Nrr,Xs,l_e,jrr,Drr,tV,Grr,Orr,aV,Vrr,Xrr,zrr,Kv,i_e,Qrr,Wrr,nV,Hrr,Urr,Jrr,Zv,d_e,Yrr,Krr,sV,Zrr,etr,otr,eT,c_e,rtr,ttr,lV,atr,ntr,str,oT,f_e,ltr,itr,iV,dtr,ctr,ftr,rT,m_e,mtr,gtr,dV,htr,ptr,_tr,tT,g_e,utr,btr,cV,Ftr,vtr,Ttr,aT,h_e,Mtr,Etr,fV,Ctr,wtr,Atr,nT,p_e,ytr,Ltr,mV,xtr,ktr,Str,sT,__e,Rtr,Btr,gV,Ptr,$tr,Itr,lT,u_e,qtr,Ntr,hV,jtr,Dtr,Gtr,iT,b_e,Otr,Vtr,pV,Xtr,ztr,Qtr,dT,F_e,Wtr,Htr,_V,Utr,Jtr,Ytr,cT,v_e,Ktr,Ztr,uV,ear,oar,rar,fT,T_e,tar,aar,bV,nar,sar,lar,mT,M_e,iar,dar,FV,car,far,mar,gT,E_e,gar,har,vV,par,_ar,uar,hT,C_e,bar,Far,TV,Tar,Mar,Ear,pT,w_e,Car,war,MV,Aar,yar,Lar,_T,A_e,xar,kar,EV,Sar,Rar,Bar,uT,y_e,Par,$ar,CV,Iar,qar,Nar,bT,L_e,jar,Dar,wV,Gar,Oar,Var,FT,x_e,Xar,zar,AV,Qar,War,Har,vT,k_e,Uar,Jar,yV,Yar,Kar,Zar,TT,S_e,enr,onr,LV,rnr,tnr,anr,MT,R_e,nnr,snr,xV,lnr,inr,dnr,ET,B_e,cnr,fnr,kV,mnr,gnr,hnr,CT,P_e,pnr,_nr,SV,unr,bnr,Fnr,$_e,vnr,Tnr,MA,bPe,bc,wT,I_e,EA,Mnr,q_e,Enr,FPe,vr,CA,Cnr,Fc,wnr,RV,Anr,ynr,BV,Lnr,xnr,knr,wA,Snr,N_e,Rnr,Bnr,Pnr,ht,AA,$nr,j_e,Inr,qnr,vc,Nnr,D_e,jnr,Dnr,PV,Gnr,Onr,Vnr,G_e,Xnr,znr,yA,Qnr,po,LA,Wnr,O_e,Hnr,Unr,bn,Jnr,V_e,Ynr,Knr,X_e,Znr,esr,z_e,osr,rsr,tsr,H,AT,Q_e,asr,nsr,$V,ssr,lsr,isr,yT,W_e,dsr,csr,IV,fsr,msr,gsr,LT,H_e,hsr,psr,qV,_sr,usr,bsr,xT,U_e,Fsr,vsr,NV,Tsr,Msr,Esr,kT,J_e,Csr,wsr,jV,Asr,ysr,Lsr,ST,Y_e,xsr,ksr,DV,Ssr,Rsr,Bsr,RT,K_e,Psr,$sr,GV,Isr,qsr,Nsr,BT,Z_e,jsr,Dsr,OV,Gsr,Osr,Vsr,PT,eue,Xsr,zsr,VV,Qsr,Wsr,Hsr,$T,oue,Usr,Jsr,XV,Ysr,Ksr,Zsr,IT,rue,elr,olr,zV,rlr,tlr,alr,qT,tue,nlr,slr,QV,llr,ilr,dlr,NT,aue,clr,flr,WV,mlr,glr,hlr,jT,nue,plr,_lr,HV,ulr,blr,Flr,DT,sue,vlr,Tlr,UV,Mlr,Elr,Clr,GT,lue,wlr,Alr,JV,ylr,Llr,xlr,OT,iue,klr,Slr,YV,Rlr,Blr,Plr,VT,due,$lr,Ilr,KV,qlr,Nlr,jlr,XT,cue,Dlr,Glr,ZV,Olr,Vlr,Xlr,zT,fue,zlr,Qlr,eX,Wlr,Hlr,Ulr,QT,mue,Jlr,Ylr,oX,Klr,Zlr,eir,WT,gue,oir,rir,rX,tir,air,nir,HT,hue,sir,lir,tX,iir,dir,cir,pue,fir,mir,xA,vPe,Tc,UT,_ue,kA,gir,uue,hir,TPe,Tr,SA,pir,Mc,_ir,aX,uir,bir,nX,Fir,vir,Tir,RA,Mir,bue,Eir,Cir,wir,pt,BA,Air,Fue,yir,Lir,Ec,xir,vue,kir,Sir,sX,Rir,Bir,Pir,Tue,$ir,Iir,PA,qir,_o,$A,Nir,Mue,jir,Dir,Fn,Gir,Eue,Oir,Vir,Cue,Xir,zir,wue,Qir,Wir,Hir,me,JT,Aue,Uir,Jir,lX,Yir,Kir,Zir,YT,yue,edr,odr,iX,rdr,tdr,adr,KT,Lue,ndr,sdr,dX,ldr,idr,ddr,ZT,xue,cdr,fdr,cX,mdr,gdr,hdr,e7,kue,pdr,_dr,fX,udr,bdr,Fdr,o7,Sue,vdr,Tdr,mX,Mdr,Edr,Cdr,r7,Rue,wdr,Adr,gX,ydr,Ldr,xdr,t7,Bue,kdr,Sdr,hX,Rdr,Bdr,Pdr,a7,Pue,$dr,Idr,pX,qdr,Ndr,jdr,n7,$ue,Ddr,Gdr,_X,Odr,Vdr,Xdr,s7,Iue,zdr,Qdr,uX,Wdr,Hdr,Udr,l7,que,Jdr,Ydr,bX,Kdr,Zdr,ecr,Nue,ocr,rcr,IA,MPe,Cc,i7,jue,qA,tcr,Due,acr,EPe,Mr,NA,ncr,wc,scr,FX,lcr,icr,vX,dcr,ccr,fcr,jA,mcr,Gue,gcr,hcr,pcr,_t,DA,_cr,Oue,ucr,bcr,Ac,Fcr,Vue,vcr,Tcr,TX,Mcr,Ecr,Ccr,Xue,wcr,Acr,GA,ycr,uo,OA,Lcr,zue,xcr,kcr,vn,Scr,Que,Rcr,Bcr,Wue,Pcr,$cr,Hue,Icr,qcr,Ncr,VA,d7,Uue,jcr,Dcr,MX,Gcr,Ocr,Vcr,c7,Jue,Xcr,zcr,EX,Qcr,Wcr,Hcr,Yue,Ucr,Jcr,XA,CPe,yc,f7,Kue,zA,Ycr,Zue,Kcr,wPe,Er,QA,Zcr,Lc,efr,CX,ofr,rfr,wX,tfr,afr,nfr,WA,sfr,e2e,lfr,ifr,dfr,ut,HA,cfr,o2e,ffr,mfr,xc,gfr,r2e,hfr,pfr,AX,_fr,ufr,bfr,t2e,Ffr,vfr,UA,Tfr,bo,JA,Mfr,a2e,Efr,Cfr,Tn,wfr,n2e,Afr,yfr,s2e,Lfr,xfr,l2e,kfr,Sfr,Rfr,J,m7,i2e,Bfr,Pfr,yX,$fr,Ifr,qfr,g7,d2e,Nfr,jfr,LX,Dfr,Gfr,Ofr,h7,c2e,Vfr,Xfr,xX,zfr,Qfr,Wfr,p7,f2e,Hfr,Ufr,kX,Jfr,Yfr,Kfr,_7,m2e,Zfr,emr,SX,omr,rmr,tmr,u7,g2e,amr,nmr,RX,smr,lmr,imr,b7,h2e,dmr,cmr,BX,fmr,mmr,gmr,F7,p2e,hmr,pmr,PX,_mr,umr,bmr,v7,_2e,Fmr,vmr,$X,Tmr,Mmr,Emr,T7,u2e,Cmr,wmr,IX,Amr,ymr,Lmr,M7,b2e,xmr,kmr,qX,Smr,Rmr,Bmr,E7,F2e,Pmr,$mr,NX,Imr,qmr,Nmr,C7,v2e,jmr,Dmr,jX,Gmr,Omr,Vmr,w7,T2e,Xmr,zmr,DX,Qmr,Wmr,Hmr,A7,M2e,Umr,Jmr,GX,Ymr,Kmr,Zmr,y7,E2e,egr,ogr,OX,rgr,tgr,agr,L7,C2e,ngr,sgr,VX,lgr,igr,dgr,x7,w2e,cgr,fgr,XX,mgr,ggr,hgr,k7,A2e,pgr,_gr,zX,ugr,bgr,Fgr,S7,y2e,vgr,Tgr,QX,Mgr,Egr,Cgr,L2e,wgr,Agr,YA,APe,kc,R7,x2e,KA,ygr,k2e,Lgr,yPe,Cr,ZA,xgr,Sc,kgr,WX,Sgr,Rgr,HX,Bgr,Pgr,$gr,e0,Igr,S2e,qgr,Ngr,jgr,bt,o0,Dgr,R2e,Ggr,Ogr,Rc,Vgr,B2e,Xgr,zgr,UX,Qgr,Wgr,Hgr,P2e,Ugr,Jgr,r0,Ygr,Fo,t0,Kgr,$2e,Zgr,ehr,Mn,ohr,I2e,rhr,thr,q2e,ahr,nhr,N2e,shr,lhr,ihr,be,B7,j2e,dhr,chr,JX,fhr,mhr,ghr,P7,D2e,hhr,phr,YX,_hr,uhr,bhr,$7,G2e,Fhr,vhr,KX,Thr,Mhr,Ehr,I7,O2e,Chr,whr,ZX,Ahr,yhr,Lhr,q7,V2e,xhr,khr,ez,Shr,Rhr,Bhr,N7,X2e,Phr,$hr,oz,Ihr,qhr,Nhr,j7,z2e,jhr,Dhr,rz,Ghr,Ohr,Vhr,D7,Q2e,Xhr,zhr,tz,Qhr,Whr,Hhr,G7,W2e,Uhr,Jhr,az,Yhr,Khr,Zhr,O7,H2e,epr,opr,nz,rpr,tpr,apr,U2e,npr,spr,a0,LPe,Bc,V7,J2e,n0,lpr,Y2e,ipr,xPe,wr,s0,dpr,Pc,cpr,sz,fpr,mpr,lz,gpr,hpr,ppr,l0,_pr,K2e,upr,bpr,Fpr,Ft,i0,vpr,Z2e,Tpr,Mpr,$c,Epr,e1e,Cpr,wpr,iz,Apr,ypr,Lpr,o1e,xpr,kpr,d0,Spr,vo,c0,Rpr,r1e,Bpr,Ppr,En,$pr,t1e,Ipr,qpr,a1e,Npr,jpr,n1e,Dpr,Gpr,Opr,V,X7,s1e,Vpr,Xpr,dz,zpr,Qpr,Wpr,z7,l1e,Hpr,Upr,cz,Jpr,Ypr,Kpr,Q7,i1e,Zpr,e_r,fz,o_r,r_r,t_r,W7,d1e,a_r,n_r,mz,s_r,l_r,i_r,H7,c1e,d_r,c_r,gz,f_r,m_r,g_r,U7,f1e,h_r,p_r,hz,__r,u_r,b_r,J7,m1e,F_r,v_r,pz,T_r,M_r,E_r,Y7,g1e,C_r,w_r,_z,A_r,y_r,L_r,K7,h1e,x_r,k_r,uz,S_r,R_r,B_r,Z7,p1e,P_r,$_r,bz,I_r,q_r,N_r,e9,_1e,j_r,D_r,Fz,G_r,O_r,V_r,o9,u1e,X_r,z_r,vz,Q_r,W_r,H_r,r9,b1e,U_r,J_r,Tz,Y_r,K_r,Z_r,t9,F1e,eur,our,Mz,rur,tur,aur,a9,v1e,nur,sur,Ez,lur,iur,dur,n9,T1e,cur,fur,Cz,mur,gur,hur,s9,M1e,pur,_ur,wz,uur,bur,Fur,l9,E1e,vur,Tur,Az,Mur,Eur,Cur,i9,C1e,wur,Aur,yz,yur,Lur,xur,d9,w1e,kur,Sur,Lz,Rur,Bur,Pur,c9,A1e,$ur,Iur,xz,qur,Nur,jur,f9,y1e,Dur,Gur,kz,Our,Vur,Xur,m9,L1e,zur,Qur,Sz,Wur,Hur,Uur,g9,x1e,Jur,Yur,Rz,Kur,Zur,e2r,h9,k1e,o2r,r2r,Bz,t2r,a2r,n2r,p9,S1e,s2r,l2r,Pz,i2r,d2r,c2r,R1e,f2r,m2r,f0,kPe,Ic,_9,B1e,m0,g2r,P1e,h2r,SPe,Ar,g0,p2r,qc,_2r,$z,u2r,b2r,Iz,F2r,v2r,T2r,h0,M2r,$1e,E2r,C2r,w2r,vt,p0,A2r,I1e,y2r,L2r,Nc,x2r,q1e,k2r,S2r,qz,R2r,B2r,P2r,N1e,$2r,I2r,_0,q2r,To,u0,N2r,j1e,j2r,D2r,Cn,G2r,D1e,O2r,V2r,G1e,X2r,z2r,O1e,Q2r,W2r,H2r,se,u9,V1e,U2r,J2r,Nz,Y2r,K2r,Z2r,b9,X1e,e1r,o1r,jz,r1r,t1r,a1r,F9,z1e,n1r,s1r,Dz,l1r,i1r,d1r,v9,Q1e,c1r,f1r,Gz,m1r,g1r,h1r,T9,W1e,p1r,_1r,Oz,u1r,b1r,F1r,M9,H1e,v1r,T1r,Vz,M1r,E1r,C1r,E9,U1e,w1r,A1r,Xz,y1r,L1r,x1r,C9,J1e,k1r,S1r,zz,R1r,B1r,P1r,w9,Y1e,$1r,I1r,Qz,q1r,N1r,j1r,A9,K1e,D1r,G1r,Wz,O1r,V1r,X1r,y9,Z1e,z1r,Q1r,Hz,W1r,H1r,U1r,L9,ebe,J1r,Y1r,Uz,K1r,Z1r,ebr,x9,obe,obr,rbr,Jz,tbr,abr,nbr,k9,rbe,sbr,lbr,Yz,ibr,dbr,cbr,S9,tbe,fbr,mbr,Kz,gbr,hbr,pbr,R9,abe,_br,ubr,Zz,bbr,Fbr,vbr,B9,nbe,Tbr,Mbr,eQ,Ebr,Cbr,wbr,sbe,Abr,ybr,b0,RPe,jc,P9,lbe,F0,Lbr,ibe,xbr,BPe,yr,v0,kbr,Dc,Sbr,oQ,Rbr,Bbr,rQ,Pbr,$br,Ibr,T0,qbr,dbe,Nbr,jbr,Dbr,Tt,M0,Gbr,cbe,Obr,Vbr,Gc,Xbr,fbe,zbr,Qbr,tQ,Wbr,Hbr,Ubr,mbe,Jbr,Ybr,E0,Kbr,Mo,C0,Zbr,gbe,e6r,o6r,wn,r6r,hbe,t6r,a6r,pbe,n6r,s6r,_be,l6r,i6r,d6r,ube,$9,bbe,c6r,f6r,aQ,m6r,g6r,h6r,Fbe,p6r,_6r,w0,PPe,Oc,I9,vbe,A0,u6r,Tbe,b6r,$Pe,Lr,y0,F6r,Vc,v6r,nQ,T6r,M6r,sQ,E6r,C6r,w6r,L0,A6r,Mbe,y6r,L6r,x6r,Mt,x0,k6r,Ebe,S6r,R6r,Xc,B6r,Cbe,P6r,$6r,lQ,I6r,q6r,N6r,wbe,j6r,D6r,k0,G6r,Eo,S0,O6r,Abe,V6r,X6r,An,z6r,ybe,Q6r,W6r,Lbe,H6r,U6r,xbe,J6r,Y6r,K6r,Y,q9,kbe,Z6r,eFr,iQ,oFr,rFr,tFr,N9,Sbe,aFr,nFr,dQ,sFr,lFr,iFr,j9,Rbe,dFr,cFr,cQ,fFr,mFr,gFr,D9,Bbe,hFr,pFr,fQ,_Fr,uFr,bFr,G9,Pbe,FFr,vFr,mQ,TFr,MFr,EFr,O9,$be,CFr,wFr,gQ,AFr,yFr,LFr,V9,Ibe,xFr,kFr,hQ,SFr,RFr,BFr,X9,qbe,PFr,$Fr,pQ,IFr,qFr,NFr,z9,Nbe,jFr,DFr,_Q,GFr,OFr,VFr,Q9,jbe,XFr,zFr,uQ,QFr,WFr,HFr,W9,Dbe,UFr,JFr,bQ,YFr,KFr,ZFr,H9,Gbe,evr,ovr,FQ,rvr,tvr,avr,U9,Obe,nvr,svr,vQ,lvr,ivr,dvr,J9,Vbe,cvr,fvr,TQ,mvr,gvr,hvr,Y9,Xbe,pvr,_vr,MQ,uvr,bvr,Fvr,K9,zbe,vvr,Tvr,EQ,Mvr,Evr,Cvr,Z9,Qbe,wvr,Avr,CQ,yvr,Lvr,xvr,eM,Wbe,kvr,Svr,wQ,Rvr,Bvr,Pvr,oM,Hbe,$vr,Ivr,AQ,qvr,Nvr,jvr,rM,Ube,Dvr,Gvr,yQ,Ovr,Vvr,Xvr,Jbe,zvr,Qvr,R0,IPe,zc,tM,Ybe,B0,Wvr,Kbe,Hvr,qPe,xr,P0,Uvr,Qc,Jvr,LQ,Yvr,Kvr,xQ,Zvr,eTr,oTr,$0,rTr,Zbe,tTr,aTr,nTr,Et,I0,sTr,e6e,lTr,iTr,Wc,dTr,o6e,cTr,fTr,kQ,mTr,gTr,hTr,r6e,pTr,_Tr,q0,uTr,Co,N0,bTr,t6e,FTr,vTr,yn,TTr,a6e,MTr,ETr,n6e,CTr,wTr,s6e,ATr,yTr,LTr,K,aM,l6e,xTr,kTr,SQ,STr,RTr,BTr,nM,i6e,PTr,$Tr,RQ,ITr,qTr,NTr,sM,d6e,jTr,DTr,BQ,GTr,OTr,VTr,lM,c6e,XTr,zTr,PQ,QTr,WTr,HTr,iM,f6e,UTr,JTr,$Q,YTr,KTr,ZTr,dM,m6e,e7r,o7r,IQ,r7r,t7r,a7r,cM,g6e,n7r,s7r,qQ,l7r,i7r,d7r,fM,h6e,c7r,f7r,NQ,m7r,g7r,h7r,mM,p6e,p7r,_7r,jQ,u7r,b7r,F7r,gM,_6e,v7r,T7r,DQ,M7r,E7r,C7r,hM,u6e,w7r,A7r,GQ,y7r,L7r,x7r,pM,b6e,k7r,S7r,OQ,R7r,B7r,P7r,_M,F6e,$7r,I7r,VQ,q7r,N7r,j7r,uM,v6e,D7r,G7r,XQ,O7r,V7r,X7r,bM,T6e,z7r,Q7r,zQ,W7r,H7r,U7r,FM,M6e,J7r,Y7r,QQ,K7r,Z7r,e9r,vM,E6e,o9r,r9r,WQ,t9r,a9r,n9r,TM,C6e,s9r,l9r,HQ,i9r,d9r,c9r,MM,w6e,f9r,m9r,UQ,g9r,h9r,p9r,EM,A6e,_9r,u9r,JQ,b9r,F9r,v9r,y6e,T9r,M9r,j0,NPe,Hc,CM,L6e,D0,E9r,x6e,C9r,jPe,kr,G0,w9r,Uc,A9r,YQ,y9r,L9r,KQ,x9r,k9r,S9r,O0,R9r,k6e,B9r,P9r,$9r,Ct,V0,I9r,S6e,q9r,N9r,Jc,j9r,R6e,D9r,G9r,ZQ,O9r,V9r,X9r,B6e,z9r,Q9r,X0,W9r,wo,z0,H9r,P6e,U9r,J9r,Ln,Y9r,$6e,K9r,Z9r,I6e,eMr,oMr,q6e,rMr,tMr,aMr,N6e,wM,j6e,nMr,sMr,eW,lMr,iMr,dMr,D6e,cMr,fMr,Q0,DPe,Yc,AM,G6e,W0,mMr,O6e,gMr,GPe,Sr,H0,hMr,Kc,pMr,oW,_Mr,uMr,rW,bMr,FMr,vMr,U0,TMr,V6e,MMr,EMr,CMr,wt,J0,wMr,X6e,AMr,yMr,Zc,LMr,z6e,xMr,kMr,tW,SMr,RMr,BMr,Q6e,PMr,$Mr,Y0,IMr,Ao,K0,qMr,W6e,NMr,jMr,xn,DMr,H6e,GMr,OMr,U6e,VMr,XMr,J6e,zMr,QMr,WMr,Y6e,yM,K6e,HMr,UMr,aW,JMr,YMr,KMr,Z6e,ZMr,e4r,Z0,OPe,ef,LM,eFe,ey,o4r,oFe,r4r,VPe,Rr,oy,t4r,of,a4r,nW,n4r,s4r,sW,l4r,i4r,d4r,ry,c4r,rFe,f4r,m4r,g4r,At,ty,h4r,tFe,p4r,_4r,rf,u4r,aFe,b4r,F4r,lW,v4r,T4r,M4r,nFe,E4r,C4r,ay,w4r,yo,ny,A4r,sFe,y4r,L4r,kn,x4r,lFe,k4r,S4r,iFe,R4r,B4r,dFe,P4r,$4r,I4r,X,xM,cFe,q4r,N4r,iW,j4r,D4r,G4r,kM,fFe,O4r,V4r,dW,X4r,z4r,Q4r,SM,mFe,W4r,H4r,cW,U4r,J4r,Y4r,RM,gFe,K4r,Z4r,fW,eEr,oEr,rEr,BM,hFe,tEr,aEr,mW,nEr,sEr,lEr,PM,pFe,iEr,dEr,gW,cEr,fEr,mEr,$M,_Fe,gEr,hEr,hW,pEr,_Er,uEr,IM,uFe,bEr,FEr,pW,vEr,TEr,MEr,qM,bFe,EEr,CEr,_W,wEr,AEr,yEr,NM,FFe,LEr,xEr,uW,kEr,SEr,REr,jM,vFe,BEr,PEr,bW,$Er,IEr,qEr,DM,TFe,NEr,jEr,FW,DEr,GEr,OEr,GM,MFe,VEr,XEr,vW,zEr,QEr,WEr,OM,EFe,HEr,UEr,TW,JEr,YEr,KEr,VM,CFe,ZEr,e5r,MW,o5r,r5r,t5r,XM,wFe,a5r,n5r,EW,s5r,l5r,i5r,zM,AFe,d5r,c5r,CW,f5r,m5r,g5r,QM,yFe,h5r,p5r,wW,_5r,u5r,b5r,WM,LFe,F5r,v5r,AW,T5r,M5r,E5r,HM,xFe,C5r,w5r,yW,A5r,y5r,L5r,UM,kFe,x5r,k5r,LW,S5r,R5r,B5r,JM,SFe,P5r,$5r,xW,I5r,q5r,N5r,YM,RFe,j5r,D5r,kW,G5r,O5r,V5r,KM,BFe,X5r,z5r,SW,Q5r,W5r,H5r,ZM,PFe,U5r,J5r,RW,Y5r,K5r,Z5r,e4,$Fe,e3r,o3r,BW,r3r,t3r,a3r,IFe,n3r,s3r,sy,XPe,tf,o4,qFe,ly,l3r,NFe,i3r,zPe,Br,iy,d3r,af,c3r,PW,f3r,m3r,$W,g3r,h3r,p3r,dy,_3r,jFe,u3r,b3r,F3r,yt,cy,v3r,DFe,T3r,M3r,nf,E3r,GFe,C3r,w3r,IW,A3r,y3r,L3r,OFe,x3r,k3r,fy,S3r,Lo,my,R3r,VFe,B3r,P3r,Sn,$3r,XFe,I3r,q3r,zFe,N3r,j3r,QFe,D3r,G3r,O3r,ca,r4,WFe,V3r,X3r,qW,z3r,Q3r,W3r,t4,HFe,H3r,U3r,NW,J3r,Y3r,K3r,a4,UFe,Z3r,eCr,jW,oCr,rCr,tCr,n4,JFe,aCr,nCr,DW,sCr,lCr,iCr,s4,YFe,dCr,cCr,GW,fCr,mCr,gCr,KFe,hCr,pCr,gy,QPe,sf,l4,ZFe,hy,_Cr,eve,uCr,WPe,Pr,py,bCr,lf,FCr,OW,vCr,TCr,VW,MCr,ECr,CCr,_y,wCr,ove,ACr,yCr,LCr,Lt,uy,xCr,rve,kCr,SCr,df,RCr,tve,BCr,PCr,XW,$Cr,ICr,qCr,ave,NCr,jCr,by,DCr,xo,Fy,GCr,nve,OCr,VCr,Rn,XCr,sve,zCr,QCr,lve,WCr,HCr,ive,UCr,JCr,YCr,ce,i4,dve,KCr,ZCr,zW,ewr,owr,rwr,d4,cve,twr,awr,QW,nwr,swr,lwr,c4,fve,iwr,dwr,WW,cwr,fwr,mwr,f4,mve,gwr,hwr,HW,pwr,_wr,uwr,m4,gve,bwr,Fwr,UW,vwr,Twr,Mwr,g4,hve,Ewr,Cwr,JW,wwr,Awr,ywr,h4,pve,Lwr,xwr,YW,kwr,Swr,Rwr,p4,_ve,Bwr,Pwr,KW,$wr,Iwr,qwr,_4,uve,Nwr,jwr,ZW,Dwr,Gwr,Owr,u4,bve,Vwr,Xwr,eH,zwr,Qwr,Wwr,b4,Fve,Hwr,Uwr,oH,Jwr,Ywr,Kwr,F4,vve,Zwr,eAr,rH,oAr,rAr,tAr,v4,Tve,aAr,nAr,tH,sAr,lAr,iAr,Mve,dAr,cAr,vy,HPe,cf,T4,Eve,Ty,fAr,Cve,mAr,UPe,$r,My,gAr,ff,hAr,aH,pAr,_Ar,nH,uAr,bAr,FAr,Ey,vAr,wve,TAr,MAr,EAr,xt,Cy,CAr,Ave,wAr,AAr,mf,yAr,yve,LAr,xAr,sH,kAr,SAr,RAr,Lve,BAr,PAr,wy,$Ar,ko,Ay,IAr,xve,qAr,NAr,Bn,jAr,kve,DAr,GAr,Sve,OAr,VAr,Rve,XAr,zAr,QAr,Fe,M4,Bve,WAr,HAr,lH,UAr,JAr,YAr,E4,Pve,KAr,ZAr,iH,e0r,o0r,r0r,C4,$ve,t0r,a0r,dH,n0r,s0r,l0r,w4,Ive,i0r,d0r,cH,c0r,f0r,m0r,A4,qve,g0r,h0r,fH,p0r,_0r,u0r,y4,Nve,b0r,F0r,mH,v0r,T0r,M0r,L4,jve,E0r,C0r,gH,w0r,A0r,y0r,x4,Dve,L0r,x0r,hH,k0r,S0r,R0r,k4,Gve,B0r,P0r,pH,$0r,I0r,q0r,S4,Ove,N0r,j0r,_H,D0r,G0r,O0r,Vve,V0r,X0r,yy,JPe,gf,R4,Xve,Ly,z0r,zve,Q0r,YPe,Ir,xy,W0r,hf,H0r,uH,U0r,J0r,bH,Y0r,K0r,Z0r,ky,eyr,Qve,oyr,ryr,tyr,kt,Sy,ayr,Wve,nyr,syr,pf,lyr,Hve,iyr,dyr,FH,cyr,fyr,myr,Uve,gyr,hyr,Ry,pyr,So,By,_yr,Jve,uyr,byr,Pn,Fyr,Yve,vyr,Tyr,Kve,Myr,Eyr,Zve,Cyr,wyr,Ayr,ve,B4,eTe,yyr,Lyr,vH,xyr,kyr,Syr,P4,oTe,Ryr,Byr,TH,Pyr,$yr,Iyr,$4,rTe,qyr,Nyr,MH,jyr,Dyr,Gyr,I4,tTe,Oyr,Vyr,EH,Xyr,zyr,Qyr,q4,aTe,Wyr,Hyr,CH,Uyr,Jyr,Yyr,N4,nTe,Kyr,Zyr,wH,eLr,oLr,rLr,j4,sTe,tLr,aLr,AH,nLr,sLr,lLr,D4,lTe,iLr,dLr,yH,cLr,fLr,mLr,G4,iTe,gLr,hLr,LH,pLr,_Lr,uLr,O4,dTe,bLr,FLr,xH,vLr,TLr,MLr,cTe,ELr,CLr,Py,KPe,_f,V4,fTe,$y,wLr,mTe,ALr,ZPe,qr,Iy,yLr,uf,LLr,kH,xLr,kLr,SH,SLr,RLr,BLr,qy,PLr,gTe,$Lr,ILr,qLr,St,Ny,NLr,hTe,jLr,DLr,bf,GLr,pTe,OLr,VLr,RH,XLr,zLr,QLr,_Te,WLr,HLr,jy,ULr,Ro,Dy,JLr,uTe,YLr,KLr,$n,ZLr,bTe,e8r,o8r,FTe,r8r,t8r,vTe,a8r,n8r,s8r,Te,X4,TTe,l8r,i8r,BH,d8r,c8r,f8r,z4,MTe,m8r,g8r,PH,h8r,p8r,_8r,Q4,ETe,u8r,b8r,$H,F8r,v8r,T8r,W4,CTe,M8r,E8r,IH,C8r,w8r,A8r,H4,wTe,y8r,L8r,qH,x8r,k8r,S8r,U4,ATe,R8r,B8r,NH,P8r,$8r,I8r,J4,yTe,q8r,N8r,jH,j8r,D8r,G8r,Y4,LTe,O8r,V8r,DH,X8r,z8r,Q8r,K4,xTe,W8r,H8r,GH,U8r,J8r,Y8r,Z4,kTe,K8r,Z8r,OH,exr,oxr,rxr,STe,txr,axr,Gy,e$e,Ff,eE,RTe,Oy,nxr,BTe,sxr,o$e,Nr,Vy,lxr,vf,ixr,VH,dxr,cxr,XH,fxr,mxr,gxr,Xy,hxr,PTe,pxr,_xr,uxr,Rt,zy,bxr,$Te,Fxr,vxr,Tf,Txr,ITe,Mxr,Exr,zH,Cxr,wxr,Axr,qTe,yxr,Lxr,Qy,xxr,Bo,Wy,kxr,NTe,Sxr,Rxr,In,Bxr,jTe,Pxr,$xr,DTe,Ixr,qxr,GTe,Nxr,jxr,Dxr,Me,oE,OTe,Gxr,Oxr,QH,Vxr,Xxr,zxr,rE,VTe,Qxr,Wxr,WH,Hxr,Uxr,Jxr,tE,XTe,Yxr,Kxr,HH,Zxr,ekr,okr,aE,zTe,rkr,tkr,UH,akr,nkr,skr,nE,QTe,lkr,ikr,JH,dkr,ckr,fkr,sE,WTe,mkr,gkr,YH,hkr,pkr,_kr,lE,HTe,ukr,bkr,KH,Fkr,vkr,Tkr,iE,UTe,Mkr,Ekr,ZH,Ckr,wkr,Akr,dE,JTe,ykr,Lkr,eU,xkr,kkr,Skr,cE,YTe,Rkr,Bkr,oU,Pkr,$kr,Ikr,KTe,qkr,Nkr,Hy,r$e,Mf,fE,ZTe,Uy,jkr,e7e,Dkr,t$e,jr,Jy,Gkr,Ef,Okr,rU,Vkr,Xkr,tU,zkr,Qkr,Wkr,Yy,Hkr,o7e,Ukr,Jkr,Ykr,Bt,Ky,Kkr,r7e,Zkr,eSr,Cf,oSr,t7e,rSr,tSr,aU,aSr,nSr,sSr,a7e,lSr,iSr,Zy,dSr,Po,eL,cSr,n7e,fSr,mSr,qn,gSr,s7e,hSr,pSr,l7e,_Sr,uSr,i7e,bSr,FSr,vSr,Pe,mE,d7e,TSr,MSr,nU,ESr,CSr,wSr,gE,c7e,ASr,ySr,sU,LSr,xSr,kSr,hE,f7e,SSr,RSr,lU,BSr,PSr,$Sr,pE,m7e,ISr,qSr,iU,NSr,jSr,DSr,_E,g7e,GSr,OSr,dU,VSr,XSr,zSr,uE,h7e,QSr,WSr,cU,HSr,USr,JSr,bE,p7e,YSr,KSr,fU,ZSr,eRr,oRr,FE,_7e,rRr,tRr,mU,aRr,nRr,sRr,u7e,lRr,iRr,oL,a$e,wf,vE,b7e,rL,dRr,F7e,cRr,n$e,Dr,tL,fRr,Af,mRr,gU,gRr,hRr,hU,pRr,_Rr,uRr,aL,bRr,v7e,FRr,vRr,TRr,Pt,nL,MRr,T7e,ERr,CRr,yf,wRr,M7e,ARr,yRr,pU,LRr,xRr,kRr,E7e,SRr,RRr,sL,BRr,$o,lL,PRr,C7e,$Rr,IRr,Nn,qRr,w7e,NRr,jRr,A7e,DRr,GRr,y7e,ORr,VRr,XRr,$e,TE,L7e,zRr,QRr,_U,WRr,HRr,URr,ME,x7e,JRr,YRr,uU,KRr,ZRr,eBr,EE,k7e,oBr,rBr,bU,tBr,aBr,nBr,CE,S7e,sBr,lBr,FU,iBr,dBr,cBr,wE,R7e,fBr,mBr,vU,gBr,hBr,pBr,AE,B7e,_Br,uBr,TU,bBr,FBr,vBr,yE,P7e,TBr,MBr,MU,EBr,CBr,wBr,LE,$7e,ABr,yBr,EU,LBr,xBr,kBr,I7e,SBr,RBr,iL,s$e,Lf,xE,q7e,dL,BBr,N7e,PBr,l$e,Gr,cL,$Br,xf,IBr,CU,qBr,NBr,wU,jBr,DBr,GBr,fL,OBr,j7e,VBr,XBr,zBr,$t,mL,QBr,D7e,WBr,HBr,kf,UBr,G7e,JBr,YBr,AU,KBr,ZBr,ePr,O7e,oPr,rPr,gL,tPr,Io,hL,aPr,V7e,nPr,sPr,jn,lPr,X7e,iPr,dPr,z7e,cPr,fPr,Q7e,mPr,gPr,hPr,W7e,kE,H7e,pPr,_Pr,yU,uPr,bPr,FPr,U7e,vPr,TPr,pL,i$e,Sf,SE,J7e,_L,MPr,Y7e,EPr,d$e,Or,uL,CPr,Rf,wPr,LU,APr,yPr,xU,LPr,xPr,kPr,bL,SPr,K7e,RPr,BPr,PPr,It,FL,$Pr,Z7e,IPr,qPr,Bf,NPr,e9e,jPr,DPr,kU,GPr,OPr,VPr,o9e,XPr,zPr,vL,QPr,qo,TL,WPr,r9e,HPr,UPr,Dn,JPr,t9e,YPr,KPr,a9e,ZPr,e$r,n9e,o$r,r$r,t$r,ML,RE,s9e,a$r,n$r,SU,s$r,l$r,i$r,BE,l9e,d$r,c$r,RU,f$r,m$r,g$r,i9e,h$r,p$r,EL,c$e,Pf,PE,d9e,CL,_$r,c9e,u$r,f$e,Vr,wL,b$r,$f,F$r,BU,v$r,T$r,PU,M$r,E$r,C$r,AL,w$r,f9e,A$r,y$r,L$r,qt,yL,x$r,m9e,k$r,S$r,If,R$r,g9e,B$r,P$r,$U,$$r,I$r,q$r,h9e,N$r,j$r,LL,D$r,No,xL,G$r,p9e,O$r,V$r,Gn,X$r,_9e,z$r,Q$r,u9e,W$r,H$r,b9e,U$r,J$r,Y$r,F9e,$E,v9e,K$r,Z$r,IU,eIr,oIr,rIr,T9e,tIr,aIr,kL,m$e;return pe=new z({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),D5=new z({}),G5=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Xf=new nIr({props:{warning:!0,$$slots:{default:[gwt]},$$scope:{ctx:Nf}}}),O5=new z({}),V5=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L563"}}),Q5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L586"}}),W5=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),H5=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/configuration_auto.py#L708"}}),U5=new z({}),J5=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L365"}}),Z5=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16792/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L379"}}),e3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),o3=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/tokenization_auto.py#L575"}}),r3=new z({}),t3=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),s3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16792/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),jh=new nIr({props:{$$slots:{default:[hwt]},$$scope:{ctx:Nf}}}),l3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),i3=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),d3=new z({}),c3=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L70"}}),g3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L84"}}),Jh=new nIr({props:{$$slots:{default:[pwt]},$$scope:{ctx:Nf}}}),h3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),p3=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/processing_auto.py#L237"}}),_3=new z({}),u3=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L718"}}),F3=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),v3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),T3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),M3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E3=new z({}),C3=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L725"}}),A3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),L3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k3=new z({}),S3=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L740"}}),B3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),P3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),$3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q3=new z({}),N3=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L747"}}),D3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),O3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X3=new z({}),z3=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L754"}}),W3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),H3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),U3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),J3=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y3=new z({}),K3=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L763"}}),eC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),rC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aC=new z({}),nC=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L797"}}),lC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),iC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),dC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),cC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fC=new z({}),mC=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L804"}}),hC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),pC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),_C=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bC=new z({}),FC=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L790"}}),TC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),EC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),CC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wC=new z({}),AC=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L772"}}),LC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),kC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RC=new z({}),BC=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L779"}}),$C=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),qC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),NC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jC=new z({}),DC=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L813"}}),OC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),VC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),XC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QC=new z({}),WC=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L852"}}),UC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),JC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),YC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZC=new z({}),ew=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L859"}}),rw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),aw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new z({}),lw=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L882"}}),dw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),fw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new z({}),hw=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L866"}}),_w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vw=new z({}),Tw=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L873"}}),Ew=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Lw=new z({}),xw=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L891"}}),Sw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Bw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$w=new z({}),Iw=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L898"}}),Nw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Dw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ow=new z({}),Vw=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L845"}}),zw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),Ww=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new z({}),Jw=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L820"}}),Kw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),eA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new z({}),tA=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L827"}}),nA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),lA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new z({}),cA=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_auto.py#L836"}}),mA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),hA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new z({}),uA=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),FA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),TA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new z({}),CA=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),AA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),LA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new z({}),SA=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),BA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),$A=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new z({}),NA=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),DA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),OA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new z({}),QA=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),HA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),JA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new z({}),ZA=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),o0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),t0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new z({}),s0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),i0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),c0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new z({}),g0=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),p0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),u0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),b0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new z({}),v0=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),M0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),C0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new z({}),y0=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),x0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),S0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),R0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B0=new z({}),P0=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),I0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),N0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new z({}),G0=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),V0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),z0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new z({}),H0=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),J0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),K0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new z({}),oy=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L240"}}),ty=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),ny=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new z({}),iy=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L254"}}),cy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),my=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new z({}),py=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L247"}}),uy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),Fy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new z({}),My=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L261"}}),Cy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Ay=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new z({}),xy=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L268"}}),Sy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),By=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new z({}),Iy=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L277"}}),Ny=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Dy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new z({}),Vy=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L286"}}),zy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),Wy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new z({}),Jy=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L293"}}),Ky=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),eL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rL=new z({}),tL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L302"}}),nL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),sL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),lL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dL=new z({}),cL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L309"}}),mL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),hL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_L=new z({}),uL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L318"}}),FL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),TL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new z({}),wL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/modeling_flax_auto.py#L327"}}),yL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L389"}}),LL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),xL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16792/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16792/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16792/src/transformers/models/auto/auto_factory.py#L417"}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),fe=a("h1"),Ce=a("a"),lo=a("span"),f(pe.$$.fragment),Ee=l(),Xo=a("span"),ji=o("Auto Classes"),jf=l(),fa=a("p"),Di=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=a("code"),I5=o("from_pretrained()"),Df=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),ke=l(),co=a("p"),Oi=o("Instantiating one of "),On=a("a"),q5=o("AutoConfig"),Vn=o(", "),Xn=a("a"),N5=o("AutoModel"),Vi=o(`, and
`),zn=a("a"),j5=o("AutoTokenizer"),Xi=o(" will directly create a class of the relevant architecture. For instance"),Gf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),k8=o("will create a model that is an instance of "),zi=a("a"),S8=o("BertModel"),R8=o("."),zo=l(),Ga=a("p"),B8=o("There is one class of "),Of=a("code"),P8=o("AutoModel"),Cqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),fBe=l(),Qi=a("h2"),Vf=a("a"),xY=a("span"),f(D5.$$.fragment),wqe=l(),kY=a("span"),Aqe=o("Extending the Auto Classes"),mBe=l(),Qn=a("p"),yqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),SY=a("code"),Lqe=o("NewModel"),xqe=o(", make sure you have a "),RY=a("code"),kqe=o("NewModelConfig"),Sqe=o(` then you can add those to the auto
classes like this:`),gBe=l(),f(G5.$$.fragment),hBe=l(),$8=a("p"),Rqe=o("You will then be able to use the auto classes like you would usually do!"),pBe=l(),f(Xf.$$.fragment),_Be=l(),Wi=a("h2"),zf=a("a"),BY=a("span"),f(O5.$$.fragment),Bqe=l(),PY=a("span"),Pqe=o("AutoConfig"),uBe=l(),Qo=a("div"),f(V5.$$.fragment),$qe=l(),X5=a("p"),Iqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),I8=a("a"),qqe=o("from_pretrained()"),Nqe=o(" class method."),jqe=l(),z5=a("p"),Dqe=o("This class cannot be instantiated directly using "),$Y=a("code"),Gqe=o("__init__()"),Oqe=o(" (throws an error)."),Vqe=l(),mo=a("div"),f(Q5.$$.fragment),Xqe=l(),IY=a("p"),zqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Qqe=l(),Hi=a("p"),Wqe=o("The configuration class to instantiate is selected based on the "),qY=a("code"),Hqe=o("model_type"),Uqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),NY=a("code"),Jqe=o("pretrained_model_name_or_path"),Yqe=o(":"),Kqe=l(),F=a("ul"),Qf=a("li"),jY=a("strong"),Zqe=o("albert"),eNe=o(" \u2014 "),q8=a("a"),oNe=o("AlbertConfig"),rNe=o(" (ALBERT model)"),tNe=l(),Wf=a("li"),DY=a("strong"),aNe=o("bart"),nNe=o(" \u2014 "),N8=a("a"),sNe=o("BartConfig"),lNe=o(" (BART model)"),iNe=l(),Hf=a("li"),GY=a("strong"),dNe=o("beit"),cNe=o(" \u2014 "),j8=a("a"),fNe=o("BeitConfig"),mNe=o(" (BEiT model)"),gNe=l(),Uf=a("li"),OY=a("strong"),hNe=o("bert"),pNe=o(" \u2014 "),D8=a("a"),_Ne=o("BertConfig"),uNe=o(" (BERT model)"),bNe=l(),Jf=a("li"),VY=a("strong"),FNe=o("bert-generation"),vNe=o(" \u2014 "),G8=a("a"),TNe=o("BertGenerationConfig"),MNe=o(" (Bert Generation model)"),ENe=l(),Yf=a("li"),XY=a("strong"),CNe=o("big_bird"),wNe=o(" \u2014 "),O8=a("a"),ANe=o("BigBirdConfig"),yNe=o(" (BigBird model)"),LNe=l(),Kf=a("li"),zY=a("strong"),xNe=o("bigbird_pegasus"),kNe=o(" \u2014 "),V8=a("a"),SNe=o("BigBirdPegasusConfig"),RNe=o(" (BigBirdPegasus model)"),BNe=l(),Zf=a("li"),QY=a("strong"),PNe=o("blenderbot"),$Ne=o(" \u2014 "),X8=a("a"),INe=o("BlenderbotConfig"),qNe=o(" (Blenderbot model)"),NNe=l(),em=a("li"),WY=a("strong"),jNe=o("blenderbot-small"),DNe=o(" \u2014 "),z8=a("a"),GNe=o("BlenderbotSmallConfig"),ONe=o(" (BlenderbotSmall model)"),VNe=l(),om=a("li"),HY=a("strong"),XNe=o("camembert"),zNe=o(" \u2014 "),Q8=a("a"),QNe=o("CamembertConfig"),WNe=o(" (CamemBERT model)"),HNe=l(),rm=a("li"),UY=a("strong"),UNe=o("canine"),JNe=o(" \u2014 "),W8=a("a"),YNe=o("CanineConfig"),KNe=o(" (Canine model)"),ZNe=l(),tm=a("li"),JY=a("strong"),eje=o("clip"),oje=o(" \u2014 "),H8=a("a"),rje=o("CLIPConfig"),tje=o(" (CLIP model)"),aje=l(),am=a("li"),YY=a("strong"),nje=o("convbert"),sje=o(" \u2014 "),U8=a("a"),lje=o("ConvBertConfig"),ije=o(" (ConvBERT model)"),dje=l(),nm=a("li"),KY=a("strong"),cje=o("convnext"),fje=o(" \u2014 "),J8=a("a"),mje=o("ConvNextConfig"),gje=o(" (ConvNext model)"),hje=l(),sm=a("li"),ZY=a("strong"),pje=o("ctrl"),_je=o(" \u2014 "),Y8=a("a"),uje=o("CTRLConfig"),bje=o(" (CTRL model)"),Fje=l(),lm=a("li"),eK=a("strong"),vje=o("data2vec-audio"),Tje=o(" \u2014 "),K8=a("a"),Mje=o("Data2VecAudioConfig"),Eje=o(" (Data2VecAudio model)"),Cje=l(),im=a("li"),oK=a("strong"),wje=o("data2vec-text"),Aje=o(" \u2014 "),Z8=a("a"),yje=o("Data2VecTextConfig"),Lje=o(" (Data2VecText model)"),xje=l(),dm=a("li"),rK=a("strong"),kje=o("data2vec-vision"),Sje=o(" \u2014 "),ex=a("a"),Rje=o("Data2VecVisionConfig"),Bje=o(" (Data2VecVision model)"),Pje=l(),cm=a("li"),tK=a("strong"),$je=o("deberta"),Ije=o(" \u2014 "),ox=a("a"),qje=o("DebertaConfig"),Nje=o(" (DeBERTa model)"),jje=l(),fm=a("li"),aK=a("strong"),Dje=o("deberta-v2"),Gje=o(" \u2014 "),rx=a("a"),Oje=o("DebertaV2Config"),Vje=o(" (DeBERTa-v2 model)"),Xje=l(),mm=a("li"),nK=a("strong"),zje=o("decision_transformer"),Qje=o(" \u2014 "),tx=a("a"),Wje=o("DecisionTransformerConfig"),Hje=o(" (Decision Transformer model)"),Uje=l(),gm=a("li"),sK=a("strong"),Jje=o("deit"),Yje=o(" \u2014 "),ax=a("a"),Kje=o("DeiTConfig"),Zje=o(" (DeiT model)"),eDe=l(),hm=a("li"),lK=a("strong"),oDe=o("detr"),rDe=o(" \u2014 "),nx=a("a"),tDe=o("DetrConfig"),aDe=o(" (DETR model)"),nDe=l(),pm=a("li"),iK=a("strong"),sDe=o("distilbert"),lDe=o(" \u2014 "),sx=a("a"),iDe=o("DistilBertConfig"),dDe=o(" (DistilBERT model)"),cDe=l(),_m=a("li"),dK=a("strong"),fDe=o("dpr"),mDe=o(" \u2014 "),lx=a("a"),gDe=o("DPRConfig"),hDe=o(" (DPR model)"),pDe=l(),um=a("li"),cK=a("strong"),_De=o("dpt"),uDe=o(" \u2014 "),ix=a("a"),bDe=o("DPTConfig"),FDe=o(" (DPT model)"),vDe=l(),bm=a("li"),fK=a("strong"),TDe=o("electra"),MDe=o(" \u2014 "),dx=a("a"),EDe=o("ElectraConfig"),CDe=o(" (ELECTRA model)"),wDe=l(),Fm=a("li"),mK=a("strong"),ADe=o("encoder-decoder"),yDe=o(" \u2014 "),cx=a("a"),LDe=o("EncoderDecoderConfig"),xDe=o(" (Encoder decoder model)"),kDe=l(),vm=a("li"),gK=a("strong"),SDe=o("flaubert"),RDe=o(" \u2014 "),fx=a("a"),BDe=o("FlaubertConfig"),PDe=o(" (FlauBERT model)"),$De=l(),Tm=a("li"),hK=a("strong"),IDe=o("fnet"),qDe=o(" \u2014 "),mx=a("a"),NDe=o("FNetConfig"),jDe=o(" (FNet model)"),DDe=l(),Mm=a("li"),pK=a("strong"),GDe=o("fsmt"),ODe=o(" \u2014 "),gx=a("a"),VDe=o("FSMTConfig"),XDe=o(" (FairSeq Machine-Translation model)"),zDe=l(),Em=a("li"),_K=a("strong"),QDe=o("funnel"),WDe=o(" \u2014 "),hx=a("a"),HDe=o("FunnelConfig"),UDe=o(" (Funnel Transformer model)"),JDe=l(),Cm=a("li"),uK=a("strong"),YDe=o("glpn"),KDe=o(" \u2014 "),px=a("a"),ZDe=o("GLPNConfig"),eGe=o(" (GLPN model)"),oGe=l(),wm=a("li"),bK=a("strong"),rGe=o("gpt2"),tGe=o(" \u2014 "),_x=a("a"),aGe=o("GPT2Config"),nGe=o(" (OpenAI GPT-2 model)"),sGe=l(),Am=a("li"),FK=a("strong"),lGe=o("gpt_neo"),iGe=o(" \u2014 "),ux=a("a"),dGe=o("GPTNeoConfig"),cGe=o(" (GPT Neo model)"),fGe=l(),ym=a("li"),vK=a("strong"),mGe=o("gptj"),gGe=o(" \u2014 "),bx=a("a"),hGe=o("GPTJConfig"),pGe=o(" (GPT-J model)"),_Ge=l(),Lm=a("li"),TK=a("strong"),uGe=o("hubert"),bGe=o(" \u2014 "),Fx=a("a"),FGe=o("HubertConfig"),vGe=o(" (Hubert model)"),TGe=l(),xm=a("li"),MK=a("strong"),MGe=o("ibert"),EGe=o(" \u2014 "),vx=a("a"),CGe=o("IBertConfig"),wGe=o(" (I-BERT model)"),AGe=l(),km=a("li"),EK=a("strong"),yGe=o("imagegpt"),LGe=o(" \u2014 "),Tx=a("a"),xGe=o("ImageGPTConfig"),kGe=o(" (ImageGPT model)"),SGe=l(),Sm=a("li"),CK=a("strong"),RGe=o("layoutlm"),BGe=o(" \u2014 "),Mx=a("a"),PGe=o("LayoutLMConfig"),$Ge=o(" (LayoutLM model)"),IGe=l(),Rm=a("li"),wK=a("strong"),qGe=o("layoutlmv2"),NGe=o(" \u2014 "),Ex=a("a"),jGe=o("LayoutLMv2Config"),DGe=o(" (LayoutLMv2 model)"),GGe=l(),Bm=a("li"),AK=a("strong"),OGe=o("led"),VGe=o(" \u2014 "),Cx=a("a"),XGe=o("LEDConfig"),zGe=o(" (LED model)"),QGe=l(),Pm=a("li"),yK=a("strong"),WGe=o("longformer"),HGe=o(" \u2014 "),wx=a("a"),UGe=o("LongformerConfig"),JGe=o(" (Longformer model)"),YGe=l(),$m=a("li"),LK=a("strong"),KGe=o("longt5"),ZGe=o(" \u2014 "),Ax=a("a"),eOe=o("LongT5Config"),oOe=o(" (LongT5 model)"),rOe=l(),Im=a("li"),xK=a("strong"),tOe=o("luke"),aOe=o(" \u2014 "),yx=a("a"),nOe=o("LukeConfig"),sOe=o(" (LUKE model)"),lOe=l(),qm=a("li"),kK=a("strong"),iOe=o("lxmert"),dOe=o(" \u2014 "),Lx=a("a"),cOe=o("LxmertConfig"),fOe=o(" (LXMERT model)"),mOe=l(),Nm=a("li"),SK=a("strong"),gOe=o("m2m_100"),hOe=o(" \u2014 "),xx=a("a"),pOe=o("M2M100Config"),_Oe=o(" (M2M100 model)"),uOe=l(),jm=a("li"),RK=a("strong"),bOe=o("marian"),FOe=o(" \u2014 "),kx=a("a"),vOe=o("MarianConfig"),TOe=o(" (Marian model)"),MOe=l(),Dm=a("li"),BK=a("strong"),EOe=o("maskformer"),COe=o(" \u2014 "),Sx=a("a"),wOe=o("MaskFormerConfig"),AOe=o(" (MaskFormer model)"),yOe=l(),Gm=a("li"),PK=a("strong"),LOe=o("mbart"),xOe=o(" \u2014 "),Rx=a("a"),kOe=o("MBartConfig"),SOe=o(" (mBART model)"),ROe=l(),Om=a("li"),$K=a("strong"),BOe=o("megatron-bert"),POe=o(" \u2014 "),Bx=a("a"),$Oe=o("MegatronBertConfig"),IOe=o(" (MegatronBert model)"),qOe=l(),Vm=a("li"),IK=a("strong"),NOe=o("mobilebert"),jOe=o(" \u2014 "),Px=a("a"),DOe=o("MobileBertConfig"),GOe=o(" (MobileBERT model)"),OOe=l(),Xm=a("li"),qK=a("strong"),VOe=o("mpnet"),XOe=o(" \u2014 "),$x=a("a"),zOe=o("MPNetConfig"),QOe=o(" (MPNet model)"),WOe=l(),zm=a("li"),NK=a("strong"),HOe=o("mt5"),UOe=o(" \u2014 "),Ix=a("a"),JOe=o("MT5Config"),YOe=o(" (mT5 model)"),KOe=l(),Qm=a("li"),jK=a("strong"),ZOe=o("nystromformer"),eVe=o(" \u2014 "),qx=a("a"),oVe=o("NystromformerConfig"),rVe=o(" (Nystromformer model)"),tVe=l(),Wm=a("li"),DK=a("strong"),aVe=o("openai-gpt"),nVe=o(" \u2014 "),Nx=a("a"),sVe=o("OpenAIGPTConfig"),lVe=o(" (OpenAI GPT model)"),iVe=l(),Hm=a("li"),GK=a("strong"),dVe=o("pegasus"),cVe=o(" \u2014 "),jx=a("a"),fVe=o("PegasusConfig"),mVe=o(" (Pegasus model)"),gVe=l(),Um=a("li"),OK=a("strong"),hVe=o("perceiver"),pVe=o(" \u2014 "),Dx=a("a"),_Ve=o("PerceiverConfig"),uVe=o(" (Perceiver model)"),bVe=l(),Jm=a("li"),VK=a("strong"),FVe=o("plbart"),vVe=o(" \u2014 "),Gx=a("a"),TVe=o("PLBartConfig"),MVe=o(" (PLBart model)"),EVe=l(),Ym=a("li"),XK=a("strong"),CVe=o("poolformer"),wVe=o(" \u2014 "),Ox=a("a"),AVe=o("PoolFormerConfig"),yVe=o(" (PoolFormer model)"),LVe=l(),Km=a("li"),zK=a("strong"),xVe=o("prophetnet"),kVe=o(" \u2014 "),Vx=a("a"),SVe=o("ProphetNetConfig"),RVe=o(" (ProphetNet model)"),BVe=l(),Zm=a("li"),QK=a("strong"),PVe=o("qdqbert"),$Ve=o(" \u2014 "),Xx=a("a"),IVe=o("QDQBertConfig"),qVe=o(" (QDQBert model)"),NVe=l(),eg=a("li"),WK=a("strong"),jVe=o("rag"),DVe=o(" \u2014 "),zx=a("a"),GVe=o("RagConfig"),OVe=o(" (RAG model)"),VVe=l(),og=a("li"),HK=a("strong"),XVe=o("realm"),zVe=o(" \u2014 "),Qx=a("a"),QVe=o("RealmConfig"),WVe=o(" (Realm model)"),HVe=l(),rg=a("li"),UK=a("strong"),UVe=o("reformer"),JVe=o(" \u2014 "),Wx=a("a"),YVe=o("ReformerConfig"),KVe=o(" (Reformer model)"),ZVe=l(),tg=a("li"),JK=a("strong"),eXe=o("regnet"),oXe=o(" \u2014 "),Hx=a("a"),rXe=o("RegNetConfig"),tXe=o(" (RegNet model)"),aXe=l(),ag=a("li"),YK=a("strong"),nXe=o("rembert"),sXe=o(" \u2014 "),Ux=a("a"),lXe=o("RemBertConfig"),iXe=o(" (RemBERT model)"),dXe=l(),ng=a("li"),KK=a("strong"),cXe=o("resnet"),fXe=o(" \u2014 "),Jx=a("a"),mXe=o("ResNetConfig"),gXe=o(" (ResNet model)"),hXe=l(),sg=a("li"),ZK=a("strong"),pXe=o("retribert"),_Xe=o(" \u2014 "),Yx=a("a"),uXe=o("RetriBertConfig"),bXe=o(" (RetriBERT model)"),FXe=l(),lg=a("li"),eZ=a("strong"),vXe=o("roberta"),TXe=o(" \u2014 "),Kx=a("a"),MXe=o("RobertaConfig"),EXe=o(" (RoBERTa model)"),CXe=l(),ig=a("li"),oZ=a("strong"),wXe=o("roformer"),AXe=o(" \u2014 "),Zx=a("a"),yXe=o("RoFormerConfig"),LXe=o(" (RoFormer model)"),xXe=l(),dg=a("li"),rZ=a("strong"),kXe=o("segformer"),SXe=o(" \u2014 "),ek=a("a"),RXe=o("SegformerConfig"),BXe=o(" (SegFormer model)"),PXe=l(),cg=a("li"),tZ=a("strong"),$Xe=o("sew"),IXe=o(" \u2014 "),ok=a("a"),qXe=o("SEWConfig"),NXe=o(" (SEW model)"),jXe=l(),fg=a("li"),aZ=a("strong"),DXe=o("sew-d"),GXe=o(" \u2014 "),rk=a("a"),OXe=o("SEWDConfig"),VXe=o(" (SEW-D model)"),XXe=l(),mg=a("li"),nZ=a("strong"),zXe=o("speech-encoder-decoder"),QXe=o(" \u2014 "),tk=a("a"),WXe=o("SpeechEncoderDecoderConfig"),HXe=o(" (Speech Encoder decoder model)"),UXe=l(),gg=a("li"),sZ=a("strong"),JXe=o("speech_to_text"),YXe=o(" \u2014 "),ak=a("a"),KXe=o("Speech2TextConfig"),ZXe=o(" (Speech2Text model)"),eze=l(),hg=a("li"),lZ=a("strong"),oze=o("speech_to_text_2"),rze=o(" \u2014 "),nk=a("a"),tze=o("Speech2Text2Config"),aze=o(" (Speech2Text2 model)"),nze=l(),pg=a("li"),iZ=a("strong"),sze=o("splinter"),lze=o(" \u2014 "),sk=a("a"),ize=o("SplinterConfig"),dze=o(" (Splinter model)"),cze=l(),_g=a("li"),dZ=a("strong"),fze=o("squeezebert"),mze=o(" \u2014 "),lk=a("a"),gze=o("SqueezeBertConfig"),hze=o(" (SqueezeBERT model)"),pze=l(),ug=a("li"),cZ=a("strong"),_ze=o("swin"),uze=o(" \u2014 "),ik=a("a"),bze=o("SwinConfig"),Fze=o(" (Swin model)"),vze=l(),bg=a("li"),fZ=a("strong"),Tze=o("t5"),Mze=o(" \u2014 "),dk=a("a"),Eze=o("T5Config"),Cze=o(" (T5 model)"),wze=l(),Fg=a("li"),mZ=a("strong"),Aze=o("tapas"),yze=o(" \u2014 "),ck=a("a"),Lze=o("TapasConfig"),xze=o(" (TAPAS model)"),kze=l(),vg=a("li"),gZ=a("strong"),Sze=o("tapex"),Rze=o(" \u2014 "),fk=a("a"),Bze=o("BartConfig"),Pze=o(" (TAPEX model)"),$ze=l(),Tg=a("li"),hZ=a("strong"),Ize=o("transfo-xl"),qze=o(" \u2014 "),mk=a("a"),Nze=o("TransfoXLConfig"),jze=o(" (Transformer-XL model)"),Dze=l(),Mg=a("li"),pZ=a("strong"),Gze=o("trocr"),Oze=o(" \u2014 "),gk=a("a"),Vze=o("TrOCRConfig"),Xze=o(" (TrOCR model)"),zze=l(),Eg=a("li"),_Z=a("strong"),Qze=o("unispeech"),Wze=o(" \u2014 "),hk=a("a"),Hze=o("UniSpeechConfig"),Uze=o(" (UniSpeech model)"),Jze=l(),Cg=a("li"),uZ=a("strong"),Yze=o("unispeech-sat"),Kze=o(" \u2014 "),pk=a("a"),Zze=o("UniSpeechSatConfig"),eQe=o(" (UniSpeechSat model)"),oQe=l(),wg=a("li"),bZ=a("strong"),rQe=o("van"),tQe=o(" \u2014 "),_k=a("a"),aQe=o("VanConfig"),nQe=o(" (VAN model)"),sQe=l(),Ag=a("li"),FZ=a("strong"),lQe=o("vilt"),iQe=o(" \u2014 "),uk=a("a"),dQe=o("ViltConfig"),cQe=o(" (ViLT model)"),fQe=l(),yg=a("li"),vZ=a("strong"),mQe=o("vision-encoder-decoder"),gQe=o(" \u2014 "),bk=a("a"),hQe=o("VisionEncoderDecoderConfig"),pQe=o(" (Vision Encoder decoder model)"),_Qe=l(),Lg=a("li"),TZ=a("strong"),uQe=o("vision-text-dual-encoder"),bQe=o(" \u2014 "),Fk=a("a"),FQe=o("VisionTextDualEncoderConfig"),vQe=o(" (VisionTextDualEncoder model)"),TQe=l(),xg=a("li"),MZ=a("strong"),MQe=o("visual_bert"),EQe=o(" \u2014 "),vk=a("a"),CQe=o("VisualBertConfig"),wQe=o(" (VisualBert model)"),AQe=l(),kg=a("li"),EZ=a("strong"),yQe=o("vit"),LQe=o(" \u2014 "),Tk=a("a"),xQe=o("ViTConfig"),kQe=o(" (ViT model)"),SQe=l(),Sg=a("li"),CZ=a("strong"),RQe=o("vit_mae"),BQe=o(" \u2014 "),Mk=a("a"),PQe=o("ViTMAEConfig"),$Qe=o(" (ViTMAE model)"),IQe=l(),Rg=a("li"),wZ=a("strong"),qQe=o("wav2vec2"),NQe=o(" \u2014 "),Ek=a("a"),jQe=o("Wav2Vec2Config"),DQe=o(" (Wav2Vec2 model)"),GQe=l(),Bg=a("li"),AZ=a("strong"),OQe=o("wavlm"),VQe=o(" \u2014 "),Ck=a("a"),XQe=o("WavLMConfig"),zQe=o(" (WavLM model)"),QQe=l(),Pg=a("li"),yZ=a("strong"),WQe=o("xglm"),HQe=o(" \u2014 "),wk=a("a"),UQe=o("XGLMConfig"),JQe=o(" (XGLM model)"),YQe=l(),$g=a("li"),LZ=a("strong"),KQe=o("xlm"),ZQe=o(" \u2014 "),Ak=a("a"),eWe=o("XLMConfig"),oWe=o(" (XLM model)"),rWe=l(),Ig=a("li"),xZ=a("strong"),tWe=o("xlm-prophetnet"),aWe=o(" \u2014 "),yk=a("a"),nWe=o("XLMProphetNetConfig"),sWe=o(" (XLMProphetNet model)"),lWe=l(),qg=a("li"),kZ=a("strong"),iWe=o("xlm-roberta"),dWe=o(" \u2014 "),Lk=a("a"),cWe=o("XLMRobertaConfig"),fWe=o(" (XLM-RoBERTa model)"),mWe=l(),Ng=a("li"),SZ=a("strong"),gWe=o("xlm-roberta-xl"),hWe=o(" \u2014 "),xk=a("a"),pWe=o("XLMRobertaXLConfig"),_We=o(" (XLM-RoBERTa-XL model)"),uWe=l(),jg=a("li"),RZ=a("strong"),bWe=o("xlnet"),FWe=o(" \u2014 "),kk=a("a"),vWe=o("XLNetConfig"),TWe=o(" (XLNet model)"),MWe=l(),Dg=a("li"),BZ=a("strong"),EWe=o("yoso"),CWe=o(" \u2014 "),Sk=a("a"),wWe=o("YosoConfig"),AWe=o(" (YOSO model)"),yWe=l(),PZ=a("p"),LWe=o("Examples:"),xWe=l(),f(W5.$$.fragment),kWe=l(),Gg=a("div"),f(H5.$$.fragment),SWe=l(),$Z=a("p"),RWe=o("Register a new configuration for this class."),bBe=l(),Ui=a("h2"),Og=a("a"),IZ=a("span"),f(U5.$$.fragment),BWe=l(),qZ=a("span"),PWe=o("AutoTokenizer"),FBe=l(),Wo=a("div"),f(J5.$$.fragment),$We=l(),Y5=a("p"),IWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Rk=a("a"),qWe=o("AutoTokenizer.from_pretrained()"),NWe=o(" class method."),jWe=l(),K5=a("p"),DWe=o("This class cannot be instantiated directly using "),NZ=a("code"),GWe=o("__init__()"),OWe=o(" (throws an error)."),VWe=l(),go=a("div"),f(Z5.$$.fragment),XWe=l(),jZ=a("p"),zWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),QWe=l(),Oa=a("p"),WWe=o("The tokenizer class to instantiate is selected based on the "),DZ=a("code"),HWe=o("model_type"),UWe=o(` property of the config object (either
passed as an argument or loaded from `),GZ=a("code"),JWe=o("pretrained_model_name_or_path"),YWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OZ=a("code"),KWe=o("pretrained_model_name_or_path"),ZWe=o(":"),eHe=l(),E=a("ul"),Wn=a("li"),VZ=a("strong"),oHe=o("albert"),rHe=o(" \u2014 "),Bk=a("a"),tHe=o("AlbertTokenizer"),aHe=o(" or "),Pk=a("a"),nHe=o("AlbertTokenizerFast"),sHe=o(" (ALBERT model)"),lHe=l(),Hn=a("li"),XZ=a("strong"),iHe=o("bart"),dHe=o(" \u2014 "),$k=a("a"),cHe=o("BartTokenizer"),fHe=o(" or "),Ik=a("a"),mHe=o("BartTokenizerFast"),gHe=o(" (BART model)"),hHe=l(),Un=a("li"),zZ=a("strong"),pHe=o("barthez"),_He=o(" \u2014 "),qk=a("a"),uHe=o("BarthezTokenizer"),bHe=o(" or "),Nk=a("a"),FHe=o("BarthezTokenizerFast"),vHe=o(" (BARThez model)"),THe=l(),Vg=a("li"),QZ=a("strong"),MHe=o("bartpho"),EHe=o(" \u2014 "),jk=a("a"),CHe=o("BartphoTokenizer"),wHe=o(" (BARTpho model)"),AHe=l(),Jn=a("li"),WZ=a("strong"),yHe=o("bert"),LHe=o(" \u2014 "),Dk=a("a"),xHe=o("BertTokenizer"),kHe=o(" or "),Gk=a("a"),SHe=o("BertTokenizerFast"),RHe=o(" (BERT model)"),BHe=l(),Xg=a("li"),HZ=a("strong"),PHe=o("bert-generation"),$He=o(" \u2014 "),Ok=a("a"),IHe=o("BertGenerationTokenizer"),qHe=o(" (Bert Generation model)"),NHe=l(),zg=a("li"),UZ=a("strong"),jHe=o("bert-japanese"),DHe=o(" \u2014 "),Vk=a("a"),GHe=o("BertJapaneseTokenizer"),OHe=o(" (BertJapanese model)"),VHe=l(),Qg=a("li"),JZ=a("strong"),XHe=o("bertweet"),zHe=o(" \u2014 "),Xk=a("a"),QHe=o("BertweetTokenizer"),WHe=o(" (Bertweet model)"),HHe=l(),Yn=a("li"),YZ=a("strong"),UHe=o("big_bird"),JHe=o(" \u2014 "),zk=a("a"),YHe=o("BigBirdTokenizer"),KHe=o(" or "),Qk=a("a"),ZHe=o("BigBirdTokenizerFast"),eUe=o(" (BigBird model)"),oUe=l(),Kn=a("li"),KZ=a("strong"),rUe=o("bigbird_pegasus"),tUe=o(" \u2014 "),Wk=a("a"),aUe=o("PegasusTokenizer"),nUe=o(" or "),Hk=a("a"),sUe=o("PegasusTokenizerFast"),lUe=o(" (BigBirdPegasus model)"),iUe=l(),Zn=a("li"),ZZ=a("strong"),dUe=o("blenderbot"),cUe=o(" \u2014 "),Uk=a("a"),fUe=o("BlenderbotTokenizer"),mUe=o(" or "),Jk=a("a"),gUe=o("BlenderbotTokenizerFast"),hUe=o(" (Blenderbot model)"),pUe=l(),Wg=a("li"),eee=a("strong"),_Ue=o("blenderbot-small"),uUe=o(" \u2014 "),Yk=a("a"),bUe=o("BlenderbotSmallTokenizer"),FUe=o(" (BlenderbotSmall model)"),vUe=l(),Hg=a("li"),oee=a("strong"),TUe=o("byt5"),MUe=o(" \u2014 "),Kk=a("a"),EUe=o("ByT5Tokenizer"),CUe=o(" (ByT5 model)"),wUe=l(),es=a("li"),ree=a("strong"),AUe=o("camembert"),yUe=o(" \u2014 "),Zk=a("a"),LUe=o("CamembertTokenizer"),xUe=o(" or "),eS=a("a"),kUe=o("CamembertTokenizerFast"),SUe=o(" (CamemBERT model)"),RUe=l(),Ug=a("li"),tee=a("strong"),BUe=o("canine"),PUe=o(" \u2014 "),oS=a("a"),$Ue=o("CanineTokenizer"),IUe=o(" (Canine model)"),qUe=l(),os=a("li"),aee=a("strong"),NUe=o("clip"),jUe=o(" \u2014 "),rS=a("a"),DUe=o("CLIPTokenizer"),GUe=o(" or "),tS=a("a"),OUe=o("CLIPTokenizerFast"),VUe=o(" (CLIP model)"),XUe=l(),rs=a("li"),nee=a("strong"),zUe=o("convbert"),QUe=o(" \u2014 "),aS=a("a"),WUe=o("ConvBertTokenizer"),HUe=o(" or "),nS=a("a"),UUe=o("ConvBertTokenizerFast"),JUe=o(" (ConvBERT model)"),YUe=l(),ts=a("li"),see=a("strong"),KUe=o("cpm"),ZUe=o(" \u2014 "),sS=a("a"),eJe=o("CpmTokenizer"),oJe=o(" or "),lee=a("code"),rJe=o("CpmTokenizerFast"),tJe=o(" (CPM model)"),aJe=l(),Jg=a("li"),iee=a("strong"),nJe=o("ctrl"),sJe=o(" \u2014 "),lS=a("a"),lJe=o("CTRLTokenizer"),iJe=o(" (CTRL model)"),dJe=l(),as=a("li"),dee=a("strong"),cJe=o("deberta"),fJe=o(" \u2014 "),iS=a("a"),mJe=o("DebertaTokenizer"),gJe=o(" or "),dS=a("a"),hJe=o("DebertaTokenizerFast"),pJe=o(" (DeBERTa model)"),_Je=l(),ns=a("li"),cee=a("strong"),uJe=o("deberta-v2"),bJe=o(" \u2014 "),cS=a("a"),FJe=o("DebertaV2Tokenizer"),vJe=o(" or "),fS=a("a"),TJe=o("DebertaV2TokenizerFast"),MJe=o(" (DeBERTa-v2 model)"),EJe=l(),ss=a("li"),fee=a("strong"),CJe=o("distilbert"),wJe=o(" \u2014 "),mS=a("a"),AJe=o("DistilBertTokenizer"),yJe=o(" or "),gS=a("a"),LJe=o("DistilBertTokenizerFast"),xJe=o(" (DistilBERT model)"),kJe=l(),ls=a("li"),mee=a("strong"),SJe=o("dpr"),RJe=o(" \u2014 "),hS=a("a"),BJe=o("DPRQuestionEncoderTokenizer"),PJe=o(" or "),pS=a("a"),$Je=o("DPRQuestionEncoderTokenizerFast"),IJe=o(" (DPR model)"),qJe=l(),is=a("li"),gee=a("strong"),NJe=o("electra"),jJe=o(" \u2014 "),_S=a("a"),DJe=o("ElectraTokenizer"),GJe=o(" or "),uS=a("a"),OJe=o("ElectraTokenizerFast"),VJe=o(" (ELECTRA model)"),XJe=l(),Yg=a("li"),hee=a("strong"),zJe=o("flaubert"),QJe=o(" \u2014 "),bS=a("a"),WJe=o("FlaubertTokenizer"),HJe=o(" (FlauBERT model)"),UJe=l(),ds=a("li"),pee=a("strong"),JJe=o("fnet"),YJe=o(" \u2014 "),FS=a("a"),KJe=o("FNetTokenizer"),ZJe=o(" or "),vS=a("a"),eYe=o("FNetTokenizerFast"),oYe=o(" (FNet model)"),rYe=l(),Kg=a("li"),_ee=a("strong"),tYe=o("fsmt"),aYe=o(" \u2014 "),TS=a("a"),nYe=o("FSMTTokenizer"),sYe=o(" (FairSeq Machine-Translation model)"),lYe=l(),cs=a("li"),uee=a("strong"),iYe=o("funnel"),dYe=o(" \u2014 "),MS=a("a"),cYe=o("FunnelTokenizer"),fYe=o(" or "),ES=a("a"),mYe=o("FunnelTokenizerFast"),gYe=o(" (Funnel Transformer model)"),hYe=l(),fs=a("li"),bee=a("strong"),pYe=o("gpt2"),_Ye=o(" \u2014 "),CS=a("a"),uYe=o("GPT2Tokenizer"),bYe=o(" or "),wS=a("a"),FYe=o("GPT2TokenizerFast"),vYe=o(" (OpenAI GPT-2 model)"),TYe=l(),ms=a("li"),Fee=a("strong"),MYe=o("gpt_neo"),EYe=o(" \u2014 "),AS=a("a"),CYe=o("GPT2Tokenizer"),wYe=o(" or "),yS=a("a"),AYe=o("GPT2TokenizerFast"),yYe=o(" (GPT Neo model)"),LYe=l(),gs=a("li"),vee=a("strong"),xYe=o("herbert"),kYe=o(" \u2014 "),LS=a("a"),SYe=o("HerbertTokenizer"),RYe=o(" or "),xS=a("a"),BYe=o("HerbertTokenizerFast"),PYe=o(" (HerBERT model)"),$Ye=l(),Zg=a("li"),Tee=a("strong"),IYe=o("hubert"),qYe=o(" \u2014 "),kS=a("a"),NYe=o("Wav2Vec2CTCTokenizer"),jYe=o(" (Hubert model)"),DYe=l(),hs=a("li"),Mee=a("strong"),GYe=o("ibert"),OYe=o(" \u2014 "),SS=a("a"),VYe=o("RobertaTokenizer"),XYe=o(" or "),RS=a("a"),zYe=o("RobertaTokenizerFast"),QYe=o(" (I-BERT model)"),WYe=l(),ps=a("li"),Eee=a("strong"),HYe=o("layoutlm"),UYe=o(" \u2014 "),BS=a("a"),JYe=o("LayoutLMTokenizer"),YYe=o(" or "),PS=a("a"),KYe=o("LayoutLMTokenizerFast"),ZYe=o(" (LayoutLM model)"),eKe=l(),_s=a("li"),Cee=a("strong"),oKe=o("layoutlmv2"),rKe=o(" \u2014 "),$S=a("a"),tKe=o("LayoutLMv2Tokenizer"),aKe=o(" or "),IS=a("a"),nKe=o("LayoutLMv2TokenizerFast"),sKe=o(" (LayoutLMv2 model)"),lKe=l(),us=a("li"),wee=a("strong"),iKe=o("layoutxlm"),dKe=o(" \u2014 "),qS=a("a"),cKe=o("LayoutXLMTokenizer"),fKe=o(" or "),NS=a("a"),mKe=o("LayoutXLMTokenizerFast"),gKe=o(" (LayoutXLM model)"),hKe=l(),bs=a("li"),Aee=a("strong"),pKe=o("led"),_Ke=o(" \u2014 "),jS=a("a"),uKe=o("LEDTokenizer"),bKe=o(" or "),DS=a("a"),FKe=o("LEDTokenizerFast"),vKe=o(" (LED model)"),TKe=l(),Fs=a("li"),yee=a("strong"),MKe=o("longformer"),EKe=o(" \u2014 "),GS=a("a"),CKe=o("LongformerTokenizer"),wKe=o(" or "),OS=a("a"),AKe=o("LongformerTokenizerFast"),yKe=o(" (Longformer model)"),LKe=l(),vs=a("li"),Lee=a("strong"),xKe=o("longt5"),kKe=o(" \u2014 "),VS=a("a"),SKe=o("T5Tokenizer"),RKe=o(" or "),XS=a("a"),BKe=o("T5TokenizerFast"),PKe=o(" (LongT5 model)"),$Ke=l(),eh=a("li"),xee=a("strong"),IKe=o("luke"),qKe=o(" \u2014 "),zS=a("a"),NKe=o("LukeTokenizer"),jKe=o(" (LUKE model)"),DKe=l(),Ts=a("li"),kee=a("strong"),GKe=o("lxmert"),OKe=o(" \u2014 "),QS=a("a"),VKe=o("LxmertTokenizer"),XKe=o(" or "),WS=a("a"),zKe=o("LxmertTokenizerFast"),QKe=o(" (LXMERT model)"),WKe=l(),oh=a("li"),See=a("strong"),HKe=o("m2m_100"),UKe=o(" \u2014 "),HS=a("a"),JKe=o("M2M100Tokenizer"),YKe=o(" (M2M100 model)"),KKe=l(),rh=a("li"),Ree=a("strong"),ZKe=o("marian"),eZe=o(" \u2014 "),US=a("a"),oZe=o("MarianTokenizer"),rZe=o(" (Marian model)"),tZe=l(),Ms=a("li"),Bee=a("strong"),aZe=o("mbart"),nZe=o(" \u2014 "),JS=a("a"),sZe=o("MBartTokenizer"),lZe=o(" or "),YS=a("a"),iZe=o("MBartTokenizerFast"),dZe=o(" (mBART model)"),cZe=l(),Es=a("li"),Pee=a("strong"),fZe=o("mbart50"),mZe=o(" \u2014 "),KS=a("a"),gZe=o("MBart50Tokenizer"),hZe=o(" or "),ZS=a("a"),pZe=o("MBart50TokenizerFast"),_Ze=o(" (mBART-50 model)"),uZe=l(),th=a("li"),$ee=a("strong"),bZe=o("mluke"),FZe=o(" \u2014 "),eR=a("a"),vZe=o("MLukeTokenizer"),TZe=o(" (mLUKE model)"),MZe=l(),Cs=a("li"),Iee=a("strong"),EZe=o("mobilebert"),CZe=o(" \u2014 "),oR=a("a"),wZe=o("MobileBertTokenizer"),AZe=o(" or "),rR=a("a"),yZe=o("MobileBertTokenizerFast"),LZe=o(" (MobileBERT model)"),xZe=l(),ws=a("li"),qee=a("strong"),kZe=o("mpnet"),SZe=o(" \u2014 "),tR=a("a"),RZe=o("MPNetTokenizer"),BZe=o(" or "),aR=a("a"),PZe=o("MPNetTokenizerFast"),$Ze=o(" (MPNet model)"),IZe=l(),As=a("li"),Nee=a("strong"),qZe=o("mt5"),NZe=o(" \u2014 "),nR=a("a"),jZe=o("MT5Tokenizer"),DZe=o(" or "),sR=a("a"),GZe=o("MT5TokenizerFast"),OZe=o(" (mT5 model)"),VZe=l(),ys=a("li"),jee=a("strong"),XZe=o("openai-gpt"),zZe=o(" \u2014 "),lR=a("a"),QZe=o("OpenAIGPTTokenizer"),WZe=o(" or "),iR=a("a"),HZe=o("OpenAIGPTTokenizerFast"),UZe=o(" (OpenAI GPT model)"),JZe=l(),Ls=a("li"),Dee=a("strong"),YZe=o("pegasus"),KZe=o(" \u2014 "),dR=a("a"),ZZe=o("PegasusTokenizer"),eeo=o(" or "),cR=a("a"),oeo=o("PegasusTokenizerFast"),reo=o(" (Pegasus model)"),teo=l(),ah=a("li"),Gee=a("strong"),aeo=o("perceiver"),neo=o(" \u2014 "),fR=a("a"),seo=o("PerceiverTokenizer"),leo=o(" (Perceiver model)"),ieo=l(),nh=a("li"),Oee=a("strong"),deo=o("phobert"),ceo=o(" \u2014 "),mR=a("a"),feo=o("PhobertTokenizer"),meo=o(" (PhoBERT model)"),geo=l(),sh=a("li"),Vee=a("strong"),heo=o("plbart"),peo=o(" \u2014 "),gR=a("a"),_eo=o("PLBartTokenizer"),ueo=o(" (PLBart model)"),beo=l(),lh=a("li"),Xee=a("strong"),Feo=o("prophetnet"),veo=o(" \u2014 "),hR=a("a"),Teo=o("ProphetNetTokenizer"),Meo=o(" (ProphetNet model)"),Eeo=l(),xs=a("li"),zee=a("strong"),Ceo=o("qdqbert"),weo=o(" \u2014 "),pR=a("a"),Aeo=o("BertTokenizer"),yeo=o(" or "),_R=a("a"),Leo=o("BertTokenizerFast"),xeo=o(" (QDQBert model)"),keo=l(),ih=a("li"),Qee=a("strong"),Seo=o("rag"),Reo=o(" \u2014 "),uR=a("a"),Beo=o("RagTokenizer"),Peo=o(" (RAG model)"),$eo=l(),ks=a("li"),Wee=a("strong"),Ieo=o("realm"),qeo=o(" \u2014 "),bR=a("a"),Neo=o("RealmTokenizer"),jeo=o(" or "),FR=a("a"),Deo=o("RealmTokenizerFast"),Geo=o(" (Realm model)"),Oeo=l(),Ss=a("li"),Hee=a("strong"),Veo=o("reformer"),Xeo=o(" \u2014 "),vR=a("a"),zeo=o("ReformerTokenizer"),Qeo=o(" or "),TR=a("a"),Weo=o("ReformerTokenizerFast"),Heo=o(" (Reformer model)"),Ueo=l(),Rs=a("li"),Uee=a("strong"),Jeo=o("rembert"),Yeo=o(" \u2014 "),MR=a("a"),Keo=o("RemBertTokenizer"),Zeo=o(" or "),ER=a("a"),eoo=o("RemBertTokenizerFast"),ooo=o(" (RemBERT model)"),roo=l(),Bs=a("li"),Jee=a("strong"),too=o("retribert"),aoo=o(" \u2014 "),CR=a("a"),noo=o("RetriBertTokenizer"),soo=o(" or "),wR=a("a"),loo=o("RetriBertTokenizerFast"),ioo=o(" (RetriBERT model)"),doo=l(),Ps=a("li"),Yee=a("strong"),coo=o("roberta"),foo=o(" \u2014 "),AR=a("a"),moo=o("RobertaTokenizer"),goo=o(" or "),yR=a("a"),hoo=o("RobertaTokenizerFast"),poo=o(" (RoBERTa model)"),_oo=l(),$s=a("li"),Kee=a("strong"),uoo=o("roformer"),boo=o(" \u2014 "),LR=a("a"),Foo=o("RoFormerTokenizer"),voo=o(" or "),xR=a("a"),Too=o("RoFormerTokenizerFast"),Moo=o(" (RoFormer model)"),Eoo=l(),dh=a("li"),Zee=a("strong"),Coo=o("speech_to_text"),woo=o(" \u2014 "),kR=a("a"),Aoo=o("Speech2TextTokenizer"),yoo=o(" (Speech2Text model)"),Loo=l(),ch=a("li"),eoe=a("strong"),xoo=o("speech_to_text_2"),koo=o(" \u2014 "),SR=a("a"),Soo=o("Speech2Text2Tokenizer"),Roo=o(" (Speech2Text2 model)"),Boo=l(),Is=a("li"),ooe=a("strong"),Poo=o("splinter"),$oo=o(" \u2014 "),RR=a("a"),Ioo=o("SplinterTokenizer"),qoo=o(" or "),BR=a("a"),Noo=o("SplinterTokenizerFast"),joo=o(" (Splinter model)"),Doo=l(),qs=a("li"),roe=a("strong"),Goo=o("squeezebert"),Ooo=o(" \u2014 "),PR=a("a"),Voo=o("SqueezeBertTokenizer"),Xoo=o(" or "),$R=a("a"),zoo=o("SqueezeBertTokenizerFast"),Qoo=o(" (SqueezeBERT model)"),Woo=l(),Ns=a("li"),toe=a("strong"),Hoo=o("t5"),Uoo=o(" \u2014 "),IR=a("a"),Joo=o("T5Tokenizer"),Yoo=o(" or "),qR=a("a"),Koo=o("T5TokenizerFast"),Zoo=o(" (T5 model)"),ero=l(),fh=a("li"),aoe=a("strong"),oro=o("tapas"),rro=o(" \u2014 "),NR=a("a"),tro=o("TapasTokenizer"),aro=o(" (TAPAS model)"),nro=l(),mh=a("li"),noe=a("strong"),sro=o("tapex"),lro=o(" \u2014 "),jR=a("a"),iro=o("TapexTokenizer"),dro=o(" (TAPEX model)"),cro=l(),gh=a("li"),soe=a("strong"),fro=o("transfo-xl"),mro=o(" \u2014 "),DR=a("a"),gro=o("TransfoXLTokenizer"),hro=o(" (Transformer-XL model)"),pro=l(),hh=a("li"),loe=a("strong"),_ro=o("wav2vec2"),uro=o(" \u2014 "),GR=a("a"),bro=o("Wav2Vec2CTCTokenizer"),Fro=o(" (Wav2Vec2 model)"),vro=l(),ph=a("li"),ioe=a("strong"),Tro=o("wav2vec2_phoneme"),Mro=o(" \u2014 "),OR=a("a"),Ero=o("Wav2Vec2PhonemeCTCTokenizer"),Cro=o(" (Wav2Vec2Phoneme model)"),wro=l(),js=a("li"),doe=a("strong"),Aro=o("xglm"),yro=o(" \u2014 "),VR=a("a"),Lro=o("XGLMTokenizer"),xro=o(" or "),XR=a("a"),kro=o("XGLMTokenizerFast"),Sro=o(" (XGLM model)"),Rro=l(),_h=a("li"),coe=a("strong"),Bro=o("xlm"),Pro=o(" \u2014 "),zR=a("a"),$ro=o("XLMTokenizer"),Iro=o(" (XLM model)"),qro=l(),uh=a("li"),foe=a("strong"),Nro=o("xlm-prophetnet"),jro=o(" \u2014 "),QR=a("a"),Dro=o("XLMProphetNetTokenizer"),Gro=o(" (XLMProphetNet model)"),Oro=l(),Ds=a("li"),moe=a("strong"),Vro=o("xlm-roberta"),Xro=o(" \u2014 "),WR=a("a"),zro=o("XLMRobertaTokenizer"),Qro=o(" or "),HR=a("a"),Wro=o("XLMRobertaTokenizerFast"),Hro=o(" (XLM-RoBERTa model)"),Uro=l(),Gs=a("li"),goe=a("strong"),Jro=o("xlnet"),Yro=o(" \u2014 "),UR=a("a"),Kro=o("XLNetTokenizer"),Zro=o(" or "),JR=a("a"),eto=o("XLNetTokenizerFast"),oto=o(" (XLNet model)"),rto=l(),hoe=a("p"),tto=o("Examples:"),ato=l(),f(e3.$$.fragment),nto=l(),bh=a("div"),f(o3.$$.fragment),sto=l(),poe=a("p"),lto=o("Register a new tokenizer in this mapping."),vBe=l(),Ji=a("h2"),Fh=a("a"),_oe=a("span"),f(r3.$$.fragment),ito=l(),uoe=a("span"),dto=o("AutoFeatureExtractor"),TBe=l(),Ho=a("div"),f(t3.$$.fragment),cto=l(),a3=a("p"),fto=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YR=a("a"),mto=o("AutoFeatureExtractor.from_pretrained()"),gto=o(" class method."),hto=l(),n3=a("p"),pto=o("This class cannot be instantiated directly using "),boe=a("code"),_to=o("__init__()"),uto=o(" (throws an error)."),bto=l(),Ie=a("div"),f(s3.$$.fragment),Fto=l(),Foe=a("p"),vto=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Tto=l(),Va=a("p"),Mto=o("The feature extractor class to instantiate is selected based on the "),voe=a("code"),Eto=o("model_type"),Cto=o(` property of the config object
(either passed as an argument or loaded from `),Toe=a("code"),wto=o("pretrained_model_name_or_path"),Ato=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Moe=a("code"),yto=o("pretrained_model_name_or_path"),Lto=o(":"),xto=l(),ee=a("ul"),vh=a("li"),Eoe=a("strong"),kto=o("beit"),Sto=o(" \u2014 "),KR=a("a"),Rto=o("BeitFeatureExtractor"),Bto=o(" (BEiT model)"),Pto=l(),Th=a("li"),Coe=a("strong"),$to=o("clip"),Ito=o(" \u2014 "),ZR=a("a"),qto=o("CLIPFeatureExtractor"),Nto=o(" (CLIP model)"),jto=l(),Mh=a("li"),woe=a("strong"),Dto=o("convnext"),Gto=o(" \u2014 "),eB=a("a"),Oto=o("ConvNextFeatureExtractor"),Vto=o(" (ConvNext model)"),Xto=l(),Eh=a("li"),Aoe=a("strong"),zto=o("deit"),Qto=o(" \u2014 "),oB=a("a"),Wto=o("DeiTFeatureExtractor"),Hto=o(" (DeiT model)"),Uto=l(),Ch=a("li"),yoe=a("strong"),Jto=o("detr"),Yto=o(" \u2014 "),rB=a("a"),Kto=o("DetrFeatureExtractor"),Zto=o(" (DETR model)"),eao=l(),wh=a("li"),Loe=a("strong"),oao=o("hubert"),rao=o(" \u2014 "),tB=a("a"),tao=o("Wav2Vec2FeatureExtractor"),aao=o(" (Hubert model)"),nao=l(),Ah=a("li"),xoe=a("strong"),sao=o("layoutlmv2"),lao=o(" \u2014 "),aB=a("a"),iao=o("LayoutLMv2FeatureExtractor"),dao=o(" (LayoutLMv2 model)"),cao=l(),yh=a("li"),koe=a("strong"),fao=o("maskformer"),mao=o(" \u2014 "),nB=a("a"),gao=o("MaskFormerFeatureExtractor"),hao=o(" (MaskFormer model)"),pao=l(),Lh=a("li"),Soe=a("strong"),_ao=o("perceiver"),uao=o(" \u2014 "),sB=a("a"),bao=o("PerceiverFeatureExtractor"),Fao=o(" (Perceiver model)"),vao=l(),xh=a("li"),Roe=a("strong"),Tao=o("poolformer"),Mao=o(" \u2014 "),lB=a("a"),Eao=o("PoolFormerFeatureExtractor"),Cao=o(" (PoolFormer model)"),wao=l(),kh=a("li"),Boe=a("strong"),Aao=o("regnet"),yao=o(" \u2014 "),iB=a("a"),Lao=o("ConvNextFeatureExtractor"),xao=o(" (RegNet model)"),kao=l(),Sh=a("li"),Poe=a("strong"),Sao=o("resnet"),Rao=o(" \u2014 "),dB=a("a"),Bao=o("ConvNextFeatureExtractor"),Pao=o(" (ResNet model)"),$ao=l(),Rh=a("li"),$oe=a("strong"),Iao=o("segformer"),qao=o(" \u2014 "),cB=a("a"),Nao=o("SegformerFeatureExtractor"),jao=o(" (SegFormer model)"),Dao=l(),Bh=a("li"),Ioe=a("strong"),Gao=o("speech_to_text"),Oao=o(" \u2014 "),fB=a("a"),Vao=o("Speech2TextFeatureExtractor"),Xao=o(" (Speech2Text model)"),zao=l(),Ph=a("li"),qoe=a("strong"),Qao=o("swin"),Wao=o(" \u2014 "),mB=a("a"),Hao=o("ViTFeatureExtractor"),Uao=o(" (Swin model)"),Jao=l(),$h=a("li"),Noe=a("strong"),Yao=o("van"),Kao=o(" \u2014 "),gB=a("a"),Zao=o("ConvNextFeatureExtractor"),eno=o(" (VAN model)"),ono=l(),Ih=a("li"),joe=a("strong"),rno=o("vit"),tno=o(" \u2014 "),hB=a("a"),ano=o("ViTFeatureExtractor"),nno=o(" (ViT model)"),sno=l(),qh=a("li"),Doe=a("strong"),lno=o("vit_mae"),ino=o(" \u2014 "),pB=a("a"),dno=o("ViTFeatureExtractor"),cno=o(" (ViTMAE model)"),fno=l(),Nh=a("li"),Goe=a("strong"),mno=o("wav2vec2"),gno=o(" \u2014 "),_B=a("a"),hno=o("Wav2Vec2FeatureExtractor"),pno=o(" (Wav2Vec2 model)"),_no=l(),f(jh.$$.fragment),uno=l(),Ooe=a("p"),bno=o("Examples:"),Fno=l(),f(l3.$$.fragment),vno=l(),Dh=a("div"),f(i3.$$.fragment),Tno=l(),Voe=a("p"),Mno=o("Register a new feature extractor for this class."),MBe=l(),Yi=a("h2"),Gh=a("a"),Xoe=a("span"),f(d3.$$.fragment),Eno=l(),zoe=a("span"),Cno=o("AutoProcessor"),EBe=l(),Uo=a("div"),f(c3.$$.fragment),wno=l(),f3=a("p"),Ano=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uB=a("a"),yno=o("AutoProcessor.from_pretrained()"),Lno=o(" class method."),xno=l(),m3=a("p"),kno=o("This class cannot be instantiated directly using "),Qoe=a("code"),Sno=o("__init__()"),Rno=o(" (throws an error)."),Bno=l(),qe=a("div"),f(g3.$$.fragment),Pno=l(),Woe=a("p"),$no=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ino=l(),Ki=a("p"),qno=o("The processor class to instantiate is selected based on the "),Hoe=a("code"),Nno=o("model_type"),jno=o(` property of the config object (either
passed as an argument or loaded from `),Uoe=a("code"),Dno=o("pretrained_model_name_or_path"),Gno=o(" if possible):"),Ono=l(),Se=a("ul"),Oh=a("li"),Joe=a("strong"),Vno=o("clip"),Xno=o(" \u2014 "),bB=a("a"),zno=o("CLIPProcessor"),Qno=o(" (CLIP model)"),Wno=l(),Vh=a("li"),Yoe=a("strong"),Hno=o("layoutlmv2"),Uno=o(" \u2014 "),FB=a("a"),Jno=o("LayoutLMv2Processor"),Yno=o(" (LayoutLMv2 model)"),Kno=l(),Xh=a("li"),Koe=a("strong"),Zno=o("layoutxlm"),eso=o(" \u2014 "),vB=a("a"),oso=o("LayoutXLMProcessor"),rso=o(" (LayoutXLM model)"),tso=l(),zh=a("li"),Zoe=a("strong"),aso=o("speech_to_text"),nso=o(" \u2014 "),TB=a("a"),sso=o("Speech2TextProcessor"),lso=o(" (Speech2Text model)"),iso=l(),Qh=a("li"),ere=a("strong"),dso=o("speech_to_text_2"),cso=o(" \u2014 "),MB=a("a"),fso=o("Speech2Text2Processor"),mso=o(" (Speech2Text2 model)"),gso=l(),Wh=a("li"),ore=a("strong"),hso=o("trocr"),pso=o(" \u2014 "),EB=a("a"),_so=o("TrOCRProcessor"),uso=o(" (TrOCR model)"),bso=l(),Hh=a("li"),rre=a("strong"),Fso=o("vision-text-dual-encoder"),vso=o(" \u2014 "),CB=a("a"),Tso=o("VisionTextDualEncoderProcessor"),Mso=o(" (VisionTextDualEncoder model)"),Eso=l(),Uh=a("li"),tre=a("strong"),Cso=o("wav2vec2"),wso=o(" \u2014 "),wB=a("a"),Aso=o("Wav2Vec2Processor"),yso=o(" (Wav2Vec2 model)"),Lso=l(),f(Jh.$$.fragment),xso=l(),are=a("p"),kso=o("Examples:"),Sso=l(),f(h3.$$.fragment),Rso=l(),Yh=a("div"),f(p3.$$.fragment),Bso=l(),nre=a("p"),Pso=o("Register a new processor for this class."),CBe=l(),Zi=a("h2"),Kh=a("a"),sre=a("span"),f(_3.$$.fragment),$so=l(),lre=a("span"),Iso=o("AutoModel"),wBe=l(),Jo=a("div"),f(u3.$$.fragment),qso=l(),ed=a("p"),Nso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AB=a("a"),jso=o("from_pretrained()"),Dso=o(" class method or the "),yB=a("a"),Gso=o("from_config()"),Oso=o(` class
method.`),Vso=l(),b3=a("p"),Xso=o("This class cannot be instantiated directly using "),ire=a("code"),zso=o("__init__()"),Qso=o(" (throws an error)."),Wso=l(),Xr=a("div"),f(F3.$$.fragment),Hso=l(),dre=a("p"),Uso=o("Instantiates one of the base model classes of the library from a configuration."),Jso=l(),od=a("p"),Yso=o(`Note:
Loading a model from its configuration file does `),cre=a("strong"),Kso=o("not"),Zso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LB=a("a"),elo=o("from_pretrained()"),olo=o(" to load the model weights."),rlo=l(),fre=a("p"),tlo=o("Examples:"),alo=l(),f(v3.$$.fragment),nlo=l(),Ne=a("div"),f(T3.$$.fragment),slo=l(),mre=a("p"),llo=o("Instantiate one of the base model classes of the library from a pretrained model."),ilo=l(),Xa=a("p"),dlo=o("The model class to instantiate is selected based on the "),gre=a("code"),clo=o("model_type"),flo=o(` property of the config object (either
passed as an argument or loaded from `),hre=a("code"),mlo=o("pretrained_model_name_or_path"),glo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=a("code"),hlo=o("pretrained_model_name_or_path"),plo=o(":"),_lo=l(),T=a("ul"),Zh=a("li"),_re=a("strong"),ulo=o("albert"),blo=o(" \u2014 "),xB=a("a"),Flo=o("AlbertModel"),vlo=o(" (ALBERT model)"),Tlo=l(),ep=a("li"),ure=a("strong"),Mlo=o("bart"),Elo=o(" \u2014 "),kB=a("a"),Clo=o("BartModel"),wlo=o(" (BART model)"),Alo=l(),op=a("li"),bre=a("strong"),ylo=o("beit"),Llo=o(" \u2014 "),SB=a("a"),xlo=o("BeitModel"),klo=o(" (BEiT model)"),Slo=l(),rp=a("li"),Fre=a("strong"),Rlo=o("bert"),Blo=o(" \u2014 "),RB=a("a"),Plo=o("BertModel"),$lo=o(" (BERT model)"),Ilo=l(),tp=a("li"),vre=a("strong"),qlo=o("bert-generation"),Nlo=o(" \u2014 "),BB=a("a"),jlo=o("BertGenerationEncoder"),Dlo=o(" (Bert Generation model)"),Glo=l(),ap=a("li"),Tre=a("strong"),Olo=o("big_bird"),Vlo=o(" \u2014 "),PB=a("a"),Xlo=o("BigBirdModel"),zlo=o(" (BigBird model)"),Qlo=l(),np=a("li"),Mre=a("strong"),Wlo=o("bigbird_pegasus"),Hlo=o(" \u2014 "),$B=a("a"),Ulo=o("BigBirdPegasusModel"),Jlo=o(" (BigBirdPegasus model)"),Ylo=l(),sp=a("li"),Ere=a("strong"),Klo=o("blenderbot"),Zlo=o(" \u2014 "),IB=a("a"),eio=o("BlenderbotModel"),oio=o(" (Blenderbot model)"),rio=l(),lp=a("li"),Cre=a("strong"),tio=o("blenderbot-small"),aio=o(" \u2014 "),qB=a("a"),nio=o("BlenderbotSmallModel"),sio=o(" (BlenderbotSmall model)"),lio=l(),ip=a("li"),wre=a("strong"),iio=o("camembert"),dio=o(" \u2014 "),NB=a("a"),cio=o("CamembertModel"),fio=o(" (CamemBERT model)"),mio=l(),dp=a("li"),Are=a("strong"),gio=o("canine"),hio=o(" \u2014 "),jB=a("a"),pio=o("CanineModel"),_io=o(" (Canine model)"),uio=l(),cp=a("li"),yre=a("strong"),bio=o("clip"),Fio=o(" \u2014 "),DB=a("a"),vio=o("CLIPModel"),Tio=o(" (CLIP model)"),Mio=l(),fp=a("li"),Lre=a("strong"),Eio=o("convbert"),Cio=o(" \u2014 "),GB=a("a"),wio=o("ConvBertModel"),Aio=o(" (ConvBERT model)"),yio=l(),mp=a("li"),xre=a("strong"),Lio=o("convnext"),xio=o(" \u2014 "),OB=a("a"),kio=o("ConvNextModel"),Sio=o(" (ConvNext model)"),Rio=l(),gp=a("li"),kre=a("strong"),Bio=o("ctrl"),Pio=o(" \u2014 "),VB=a("a"),$io=o("CTRLModel"),Iio=o(" (CTRL model)"),qio=l(),hp=a("li"),Sre=a("strong"),Nio=o("data2vec-audio"),jio=o(" \u2014 "),XB=a("a"),Dio=o("Data2VecAudioModel"),Gio=o(" (Data2VecAudio model)"),Oio=l(),pp=a("li"),Rre=a("strong"),Vio=o("data2vec-text"),Xio=o(" \u2014 "),zB=a("a"),zio=o("Data2VecTextModel"),Qio=o(" (Data2VecText model)"),Wio=l(),_p=a("li"),Bre=a("strong"),Hio=o("data2vec-vision"),Uio=o(" \u2014 "),QB=a("a"),Jio=o("Data2VecVisionModel"),Yio=o(" (Data2VecVision model)"),Kio=l(),up=a("li"),Pre=a("strong"),Zio=o("deberta"),edo=o(" \u2014 "),WB=a("a"),odo=o("DebertaModel"),rdo=o(" (DeBERTa model)"),tdo=l(),bp=a("li"),$re=a("strong"),ado=o("deberta-v2"),ndo=o(" \u2014 "),HB=a("a"),sdo=o("DebertaV2Model"),ldo=o(" (DeBERTa-v2 model)"),ido=l(),Fp=a("li"),Ire=a("strong"),ddo=o("decision_transformer"),cdo=o(" \u2014 "),UB=a("a"),fdo=o("DecisionTransformerModel"),mdo=o(" (Decision Transformer model)"),gdo=l(),vp=a("li"),qre=a("strong"),hdo=o("deit"),pdo=o(" \u2014 "),JB=a("a"),_do=o("DeiTModel"),udo=o(" (DeiT model)"),bdo=l(),Tp=a("li"),Nre=a("strong"),Fdo=o("detr"),vdo=o(" \u2014 "),YB=a("a"),Tdo=o("DetrModel"),Mdo=o(" (DETR model)"),Edo=l(),Mp=a("li"),jre=a("strong"),Cdo=o("distilbert"),wdo=o(" \u2014 "),KB=a("a"),Ado=o("DistilBertModel"),ydo=o(" (DistilBERT model)"),Ldo=l(),Ep=a("li"),Dre=a("strong"),xdo=o("dpr"),kdo=o(" \u2014 "),ZB=a("a"),Sdo=o("DPRQuestionEncoder"),Rdo=o(" (DPR model)"),Bdo=l(),Cp=a("li"),Gre=a("strong"),Pdo=o("dpt"),$do=o(" \u2014 "),eP=a("a"),Ido=o("DPTModel"),qdo=o(" (DPT model)"),Ndo=l(),wp=a("li"),Ore=a("strong"),jdo=o("electra"),Ddo=o(" \u2014 "),oP=a("a"),Gdo=o("ElectraModel"),Odo=o(" (ELECTRA model)"),Vdo=l(),Ap=a("li"),Vre=a("strong"),Xdo=o("flaubert"),zdo=o(" \u2014 "),rP=a("a"),Qdo=o("FlaubertModel"),Wdo=o(" (FlauBERT model)"),Hdo=l(),yp=a("li"),Xre=a("strong"),Udo=o("fnet"),Jdo=o(" \u2014 "),tP=a("a"),Ydo=o("FNetModel"),Kdo=o(" (FNet model)"),Zdo=l(),Lp=a("li"),zre=a("strong"),eco=o("fsmt"),oco=o(" \u2014 "),aP=a("a"),rco=o("FSMTModel"),tco=o(" (FairSeq Machine-Translation model)"),aco=l(),Os=a("li"),Qre=a("strong"),nco=o("funnel"),sco=o(" \u2014 "),nP=a("a"),lco=o("FunnelModel"),ico=o(" or "),sP=a("a"),dco=o("FunnelBaseModel"),cco=o(" (Funnel Transformer model)"),fco=l(),xp=a("li"),Wre=a("strong"),mco=o("glpn"),gco=o(" \u2014 "),lP=a("a"),hco=o("GLPNModel"),pco=o(" (GLPN model)"),_co=l(),kp=a("li"),Hre=a("strong"),uco=o("gpt2"),bco=o(" \u2014 "),iP=a("a"),Fco=o("GPT2Model"),vco=o(" (OpenAI GPT-2 model)"),Tco=l(),Sp=a("li"),Ure=a("strong"),Mco=o("gpt_neo"),Eco=o(" \u2014 "),dP=a("a"),Cco=o("GPTNeoModel"),wco=o(" (GPT Neo model)"),Aco=l(),Rp=a("li"),Jre=a("strong"),yco=o("gptj"),Lco=o(" \u2014 "),cP=a("a"),xco=o("GPTJModel"),kco=o(" (GPT-J model)"),Sco=l(),Bp=a("li"),Yre=a("strong"),Rco=o("hubert"),Bco=o(" \u2014 "),fP=a("a"),Pco=o("HubertModel"),$co=o(" (Hubert model)"),Ico=l(),Pp=a("li"),Kre=a("strong"),qco=o("ibert"),Nco=o(" \u2014 "),mP=a("a"),jco=o("IBertModel"),Dco=o(" (I-BERT model)"),Gco=l(),$p=a("li"),Zre=a("strong"),Oco=o("imagegpt"),Vco=o(" \u2014 "),gP=a("a"),Xco=o("ImageGPTModel"),zco=o(" (ImageGPT model)"),Qco=l(),Ip=a("li"),ete=a("strong"),Wco=o("layoutlm"),Hco=o(" \u2014 "),hP=a("a"),Uco=o("LayoutLMModel"),Jco=o(" (LayoutLM model)"),Yco=l(),qp=a("li"),ote=a("strong"),Kco=o("layoutlmv2"),Zco=o(" \u2014 "),pP=a("a"),efo=o("LayoutLMv2Model"),ofo=o(" (LayoutLMv2 model)"),rfo=l(),Np=a("li"),rte=a("strong"),tfo=o("led"),afo=o(" \u2014 "),_P=a("a"),nfo=o("LEDModel"),sfo=o(" (LED model)"),lfo=l(),jp=a("li"),tte=a("strong"),ifo=o("longformer"),dfo=o(" \u2014 "),uP=a("a"),cfo=o("LongformerModel"),ffo=o(" (Longformer model)"),mfo=l(),Dp=a("li"),ate=a("strong"),gfo=o("longt5"),hfo=o(" \u2014 "),bP=a("a"),pfo=o("LongT5Model"),_fo=o(" (LongT5 model)"),ufo=l(),Gp=a("li"),nte=a("strong"),bfo=o("luke"),Ffo=o(" \u2014 "),FP=a("a"),vfo=o("LukeModel"),Tfo=o(" (LUKE model)"),Mfo=l(),Op=a("li"),ste=a("strong"),Efo=o("lxmert"),Cfo=o(" \u2014 "),vP=a("a"),wfo=o("LxmertModel"),Afo=o(" (LXMERT model)"),yfo=l(),Vp=a("li"),lte=a("strong"),Lfo=o("m2m_100"),xfo=o(" \u2014 "),TP=a("a"),kfo=o("M2M100Model"),Sfo=o(" (M2M100 model)"),Rfo=l(),Xp=a("li"),ite=a("strong"),Bfo=o("marian"),Pfo=o(" \u2014 "),MP=a("a"),$fo=o("MarianModel"),Ifo=o(" (Marian model)"),qfo=l(),zp=a("li"),dte=a("strong"),Nfo=o("maskformer"),jfo=o(" \u2014 "),EP=a("a"),Dfo=o("MaskFormerModel"),Gfo=o(" (MaskFormer model)"),Ofo=l(),Qp=a("li"),cte=a("strong"),Vfo=o("mbart"),Xfo=o(" \u2014 "),CP=a("a"),zfo=o("MBartModel"),Qfo=o(" (mBART model)"),Wfo=l(),Wp=a("li"),fte=a("strong"),Hfo=o("megatron-bert"),Ufo=o(" \u2014 "),wP=a("a"),Jfo=o("MegatronBertModel"),Yfo=o(" (MegatronBert model)"),Kfo=l(),Hp=a("li"),mte=a("strong"),Zfo=o("mobilebert"),emo=o(" \u2014 "),AP=a("a"),omo=o("MobileBertModel"),rmo=o(" (MobileBERT model)"),tmo=l(),Up=a("li"),gte=a("strong"),amo=o("mpnet"),nmo=o(" \u2014 "),yP=a("a"),smo=o("MPNetModel"),lmo=o(" (MPNet model)"),imo=l(),Jp=a("li"),hte=a("strong"),dmo=o("mt5"),cmo=o(" \u2014 "),LP=a("a"),fmo=o("MT5Model"),mmo=o(" (mT5 model)"),gmo=l(),Yp=a("li"),pte=a("strong"),hmo=o("nystromformer"),pmo=o(" \u2014 "),xP=a("a"),_mo=o("NystromformerModel"),umo=o(" (Nystromformer model)"),bmo=l(),Kp=a("li"),_te=a("strong"),Fmo=o("openai-gpt"),vmo=o(" \u2014 "),kP=a("a"),Tmo=o("OpenAIGPTModel"),Mmo=o(" (OpenAI GPT model)"),Emo=l(),Zp=a("li"),ute=a("strong"),Cmo=o("pegasus"),wmo=o(" \u2014 "),SP=a("a"),Amo=o("PegasusModel"),ymo=o(" (Pegasus model)"),Lmo=l(),e_=a("li"),bte=a("strong"),xmo=o("perceiver"),kmo=o(" \u2014 "),RP=a("a"),Smo=o("PerceiverModel"),Rmo=o(" (Perceiver model)"),Bmo=l(),o_=a("li"),Fte=a("strong"),Pmo=o("plbart"),$mo=o(" \u2014 "),BP=a("a"),Imo=o("PLBartModel"),qmo=o(" (PLBart model)"),Nmo=l(),r_=a("li"),vte=a("strong"),jmo=o("poolformer"),Dmo=o(" \u2014 "),PP=a("a"),Gmo=o("PoolFormerModel"),Omo=o(" (PoolFormer model)"),Vmo=l(),t_=a("li"),Tte=a("strong"),Xmo=o("prophetnet"),zmo=o(" \u2014 "),$P=a("a"),Qmo=o("ProphetNetModel"),Wmo=o(" (ProphetNet model)"),Hmo=l(),a_=a("li"),Mte=a("strong"),Umo=o("qdqbert"),Jmo=o(" \u2014 "),IP=a("a"),Ymo=o("QDQBertModel"),Kmo=o(" (QDQBert model)"),Zmo=l(),n_=a("li"),Ete=a("strong"),ego=o("reformer"),ogo=o(" \u2014 "),qP=a("a"),rgo=o("ReformerModel"),tgo=o(" (Reformer model)"),ago=l(),s_=a("li"),Cte=a("strong"),ngo=o("regnet"),sgo=o(" \u2014 "),NP=a("a"),lgo=o("RegNetModel"),igo=o(" (RegNet model)"),dgo=l(),l_=a("li"),wte=a("strong"),cgo=o("rembert"),fgo=o(" \u2014 "),jP=a("a"),mgo=o("RemBertModel"),ggo=o(" (RemBERT model)"),hgo=l(),i_=a("li"),Ate=a("strong"),pgo=o("resnet"),_go=o(" \u2014 "),DP=a("a"),ugo=o("ResNetModel"),bgo=o(" (ResNet model)"),Fgo=l(),d_=a("li"),yte=a("strong"),vgo=o("retribert"),Tgo=o(" \u2014 "),GP=a("a"),Mgo=o("RetriBertModel"),Ego=o(" (RetriBERT model)"),Cgo=l(),c_=a("li"),Lte=a("strong"),wgo=o("roberta"),Ago=o(" \u2014 "),OP=a("a"),ygo=o("RobertaModel"),Lgo=o(" (RoBERTa model)"),xgo=l(),f_=a("li"),xte=a("strong"),kgo=o("roformer"),Sgo=o(" \u2014 "),VP=a("a"),Rgo=o("RoFormerModel"),Bgo=o(" (RoFormer model)"),Pgo=l(),m_=a("li"),kte=a("strong"),$go=o("segformer"),Igo=o(" \u2014 "),XP=a("a"),qgo=o("SegformerModel"),Ngo=o(" (SegFormer model)"),jgo=l(),g_=a("li"),Ste=a("strong"),Dgo=o("sew"),Ggo=o(" \u2014 "),zP=a("a"),Ogo=o("SEWModel"),Vgo=o(" (SEW model)"),Xgo=l(),h_=a("li"),Rte=a("strong"),zgo=o("sew-d"),Qgo=o(" \u2014 "),QP=a("a"),Wgo=o("SEWDModel"),Hgo=o(" (SEW-D model)"),Ugo=l(),p_=a("li"),Bte=a("strong"),Jgo=o("speech_to_text"),Ygo=o(" \u2014 "),WP=a("a"),Kgo=o("Speech2TextModel"),Zgo=o(" (Speech2Text model)"),eho=l(),__=a("li"),Pte=a("strong"),oho=o("splinter"),rho=o(" \u2014 "),HP=a("a"),tho=o("SplinterModel"),aho=o(" (Splinter model)"),nho=l(),u_=a("li"),$te=a("strong"),sho=o("squeezebert"),lho=o(" \u2014 "),UP=a("a"),iho=o("SqueezeBertModel"),dho=o(" (SqueezeBERT model)"),cho=l(),b_=a("li"),Ite=a("strong"),fho=o("swin"),mho=o(" \u2014 "),JP=a("a"),gho=o("SwinModel"),hho=o(" (Swin model)"),pho=l(),F_=a("li"),qte=a("strong"),_ho=o("t5"),uho=o(" \u2014 "),YP=a("a"),bho=o("T5Model"),Fho=o(" (T5 model)"),vho=l(),v_=a("li"),Nte=a("strong"),Tho=o("tapas"),Mho=o(" \u2014 "),KP=a("a"),Eho=o("TapasModel"),Cho=o(" (TAPAS model)"),who=l(),T_=a("li"),jte=a("strong"),Aho=o("transfo-xl"),yho=o(" \u2014 "),ZP=a("a"),Lho=o("TransfoXLModel"),xho=o(" (Transformer-XL model)"),kho=l(),M_=a("li"),Dte=a("strong"),Sho=o("unispeech"),Rho=o(" \u2014 "),e$=a("a"),Bho=o("UniSpeechModel"),Pho=o(" (UniSpeech model)"),$ho=l(),E_=a("li"),Gte=a("strong"),Iho=o("unispeech-sat"),qho=o(" \u2014 "),o$=a("a"),Nho=o("UniSpeechSatModel"),jho=o(" (UniSpeechSat model)"),Dho=l(),C_=a("li"),Ote=a("strong"),Gho=o("van"),Oho=o(" \u2014 "),r$=a("a"),Vho=o("VanModel"),Xho=o(" (VAN model)"),zho=l(),w_=a("li"),Vte=a("strong"),Qho=o("vilt"),Who=o(" \u2014 "),t$=a("a"),Hho=o("ViltModel"),Uho=o(" (ViLT model)"),Jho=l(),A_=a("li"),Xte=a("strong"),Yho=o("vision-text-dual-encoder"),Kho=o(" \u2014 "),a$=a("a"),Zho=o("VisionTextDualEncoderModel"),epo=o(" (VisionTextDualEncoder model)"),opo=l(),y_=a("li"),zte=a("strong"),rpo=o("visual_bert"),tpo=o(" \u2014 "),n$=a("a"),apo=o("VisualBertModel"),npo=o(" (VisualBert model)"),spo=l(),L_=a("li"),Qte=a("strong"),lpo=o("vit"),ipo=o(" \u2014 "),s$=a("a"),dpo=o("ViTModel"),cpo=o(" (ViT model)"),fpo=l(),x_=a("li"),Wte=a("strong"),mpo=o("vit_mae"),gpo=o(" \u2014 "),l$=a("a"),hpo=o("ViTMAEModel"),ppo=o(" (ViTMAE model)"),_po=l(),k_=a("li"),Hte=a("strong"),upo=o("wav2vec2"),bpo=o(" \u2014 "),i$=a("a"),Fpo=o("Wav2Vec2Model"),vpo=o(" (Wav2Vec2 model)"),Tpo=l(),S_=a("li"),Ute=a("strong"),Mpo=o("wavlm"),Epo=o(" \u2014 "),d$=a("a"),Cpo=o("WavLMModel"),wpo=o(" (WavLM model)"),Apo=l(),R_=a("li"),Jte=a("strong"),ypo=o("xglm"),Lpo=o(" \u2014 "),c$=a("a"),xpo=o("XGLMModel"),kpo=o(" (XGLM model)"),Spo=l(),B_=a("li"),Yte=a("strong"),Rpo=o("xlm"),Bpo=o(" \u2014 "),f$=a("a"),Ppo=o("XLMModel"),$po=o(" (XLM model)"),Ipo=l(),P_=a("li"),Kte=a("strong"),qpo=o("xlm-prophetnet"),Npo=o(" \u2014 "),m$=a("a"),jpo=o("XLMProphetNetModel"),Dpo=o(" (XLMProphetNet model)"),Gpo=l(),$_=a("li"),Zte=a("strong"),Opo=o("xlm-roberta"),Vpo=o(" \u2014 "),g$=a("a"),Xpo=o("XLMRobertaModel"),zpo=o(" (XLM-RoBERTa model)"),Qpo=l(),I_=a("li"),eae=a("strong"),Wpo=o("xlm-roberta-xl"),Hpo=o(" \u2014 "),h$=a("a"),Upo=o("XLMRobertaXLModel"),Jpo=o(" (XLM-RoBERTa-XL model)"),Ypo=l(),q_=a("li"),oae=a("strong"),Kpo=o("xlnet"),Zpo=o(" \u2014 "),p$=a("a"),e_o=o("XLNetModel"),o_o=o(" (XLNet model)"),r_o=l(),N_=a("li"),rae=a("strong"),t_o=o("yoso"),a_o=o(" \u2014 "),_$=a("a"),n_o=o("YosoModel"),s_o=o(" (YOSO model)"),l_o=l(),j_=a("p"),i_o=o("The model is set in evaluation mode by default using "),tae=a("code"),d_o=o("model.eval()"),c_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=a("code"),f_o=o("model.train()"),m_o=l(),nae=a("p"),g_o=o("Examples:"),h_o=l(),f(M3.$$.fragment),ABe=l(),rd=a("h2"),D_=a("a"),sae=a("span"),f(E3.$$.fragment),p_o=l(),lae=a("span"),__o=o("AutoModelForPreTraining"),yBe=l(),Yo=a("div"),f(C3.$$.fragment),u_o=l(),td=a("p"),b_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),u$=a("a"),F_o=o("from_pretrained()"),v_o=o(" class method or the "),b$=a("a"),T_o=o("from_config()"),M_o=o(` class
method.`),E_o=l(),w3=a("p"),C_o=o("This class cannot be instantiated directly using "),iae=a("code"),w_o=o("__init__()"),A_o=o(" (throws an error)."),y_o=l(),zr=a("div"),f(A3.$$.fragment),L_o=l(),dae=a("p"),x_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),k_o=l(),ad=a("p"),S_o=o(`Note:
Loading a model from its configuration file does `),cae=a("strong"),R_o=o("not"),B_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),F$=a("a"),P_o=o("from_pretrained()"),$_o=o(" to load the model weights."),I_o=l(),fae=a("p"),q_o=o("Examples:"),N_o=l(),f(y3.$$.fragment),j_o=l(),je=a("div"),f(L3.$$.fragment),D_o=l(),mae=a("p"),G_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),O_o=l(),za=a("p"),V_o=o("The model class to instantiate is selected based on the "),gae=a("code"),X_o=o("model_type"),z_o=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),Q_o=o("pretrained_model_name_or_path"),W_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),H_o=o("pretrained_model_name_or_path"),U_o=o(":"),J_o=l(),S=a("ul"),G_=a("li"),_ae=a("strong"),Y_o=o("albert"),K_o=o(" \u2014 "),v$=a("a"),Z_o=o("AlbertForPreTraining"),euo=o(" (ALBERT model)"),ouo=l(),O_=a("li"),uae=a("strong"),ruo=o("bart"),tuo=o(" \u2014 "),T$=a("a"),auo=o("BartForConditionalGeneration"),nuo=o(" (BART model)"),suo=l(),V_=a("li"),bae=a("strong"),luo=o("bert"),iuo=o(" \u2014 "),M$=a("a"),duo=o("BertForPreTraining"),cuo=o(" (BERT model)"),fuo=l(),X_=a("li"),Fae=a("strong"),muo=o("big_bird"),guo=o(" \u2014 "),E$=a("a"),huo=o("BigBirdForPreTraining"),puo=o(" (BigBird model)"),_uo=l(),z_=a("li"),vae=a("strong"),uuo=o("camembert"),buo=o(" \u2014 "),C$=a("a"),Fuo=o("CamembertForMaskedLM"),vuo=o(" (CamemBERT model)"),Tuo=l(),Q_=a("li"),Tae=a("strong"),Muo=o("ctrl"),Euo=o(" \u2014 "),w$=a("a"),Cuo=o("CTRLLMHeadModel"),wuo=o(" (CTRL model)"),Auo=l(),W_=a("li"),Mae=a("strong"),yuo=o("data2vec-text"),Luo=o(" \u2014 "),A$=a("a"),xuo=o("Data2VecTextForMaskedLM"),kuo=o(" (Data2VecText model)"),Suo=l(),H_=a("li"),Eae=a("strong"),Ruo=o("deberta"),Buo=o(" \u2014 "),y$=a("a"),Puo=o("DebertaForMaskedLM"),$uo=o(" (DeBERTa model)"),Iuo=l(),U_=a("li"),Cae=a("strong"),quo=o("deberta-v2"),Nuo=o(" \u2014 "),L$=a("a"),juo=o("DebertaV2ForMaskedLM"),Duo=o(" (DeBERTa-v2 model)"),Guo=l(),J_=a("li"),wae=a("strong"),Ouo=o("distilbert"),Vuo=o(" \u2014 "),x$=a("a"),Xuo=o("DistilBertForMaskedLM"),zuo=o(" (DistilBERT model)"),Quo=l(),Y_=a("li"),Aae=a("strong"),Wuo=o("electra"),Huo=o(" \u2014 "),k$=a("a"),Uuo=o("ElectraForPreTraining"),Juo=o(" (ELECTRA model)"),Yuo=l(),K_=a("li"),yae=a("strong"),Kuo=o("flaubert"),Zuo=o(" \u2014 "),S$=a("a"),e2o=o("FlaubertWithLMHeadModel"),o2o=o(" (FlauBERT model)"),r2o=l(),Z_=a("li"),Lae=a("strong"),t2o=o("fnet"),a2o=o(" \u2014 "),R$=a("a"),n2o=o("FNetForPreTraining"),s2o=o(" (FNet model)"),l2o=l(),eu=a("li"),xae=a("strong"),i2o=o("fsmt"),d2o=o(" \u2014 "),B$=a("a"),c2o=o("FSMTForConditionalGeneration"),f2o=o(" (FairSeq Machine-Translation model)"),m2o=l(),ou=a("li"),kae=a("strong"),g2o=o("funnel"),h2o=o(" \u2014 "),P$=a("a"),p2o=o("FunnelForPreTraining"),_2o=o(" (Funnel Transformer model)"),u2o=l(),ru=a("li"),Sae=a("strong"),b2o=o("gpt2"),F2o=o(" \u2014 "),$$=a("a"),v2o=o("GPT2LMHeadModel"),T2o=o(" (OpenAI GPT-2 model)"),M2o=l(),tu=a("li"),Rae=a("strong"),E2o=o("ibert"),C2o=o(" \u2014 "),I$=a("a"),w2o=o("IBertForMaskedLM"),A2o=o(" (I-BERT model)"),y2o=l(),au=a("li"),Bae=a("strong"),L2o=o("layoutlm"),x2o=o(" \u2014 "),q$=a("a"),k2o=o("LayoutLMForMaskedLM"),S2o=o(" (LayoutLM model)"),R2o=l(),nu=a("li"),Pae=a("strong"),B2o=o("longformer"),P2o=o(" \u2014 "),N$=a("a"),$2o=o("LongformerForMaskedLM"),I2o=o(" (Longformer model)"),q2o=l(),su=a("li"),$ae=a("strong"),N2o=o("longt5"),j2o=o(" \u2014 "),j$=a("a"),D2o=o("LongT5ForConditionalGeneration"),G2o=o(" (LongT5 model)"),O2o=l(),lu=a("li"),Iae=a("strong"),V2o=o("lxmert"),X2o=o(" \u2014 "),D$=a("a"),z2o=o("LxmertForPreTraining"),Q2o=o(" (LXMERT model)"),W2o=l(),iu=a("li"),qae=a("strong"),H2o=o("megatron-bert"),U2o=o(" \u2014 "),G$=a("a"),J2o=o("MegatronBertForPreTraining"),Y2o=o(" (MegatronBert model)"),K2o=l(),du=a("li"),Nae=a("strong"),Z2o=o("mobilebert"),e1o=o(" \u2014 "),O$=a("a"),o1o=o("MobileBertForPreTraining"),r1o=o(" (MobileBERT model)"),t1o=l(),cu=a("li"),jae=a("strong"),a1o=o("mpnet"),n1o=o(" \u2014 "),V$=a("a"),s1o=o("MPNetForMaskedLM"),l1o=o(" (MPNet model)"),i1o=l(),fu=a("li"),Dae=a("strong"),d1o=o("openai-gpt"),c1o=o(" \u2014 "),X$=a("a"),f1o=o("OpenAIGPTLMHeadModel"),m1o=o(" (OpenAI GPT model)"),g1o=l(),mu=a("li"),Gae=a("strong"),h1o=o("retribert"),p1o=o(" \u2014 "),z$=a("a"),_1o=o("RetriBertModel"),u1o=o(" (RetriBERT model)"),b1o=l(),gu=a("li"),Oae=a("strong"),F1o=o("roberta"),v1o=o(" \u2014 "),Q$=a("a"),T1o=o("RobertaForMaskedLM"),M1o=o(" (RoBERTa model)"),E1o=l(),hu=a("li"),Vae=a("strong"),C1o=o("squeezebert"),w1o=o(" \u2014 "),W$=a("a"),A1o=o("SqueezeBertForMaskedLM"),y1o=o(" (SqueezeBERT model)"),L1o=l(),pu=a("li"),Xae=a("strong"),x1o=o("t5"),k1o=o(" \u2014 "),H$=a("a"),S1o=o("T5ForConditionalGeneration"),R1o=o(" (T5 model)"),B1o=l(),_u=a("li"),zae=a("strong"),P1o=o("tapas"),$1o=o(" \u2014 "),U$=a("a"),I1o=o("TapasForMaskedLM"),q1o=o(" (TAPAS model)"),N1o=l(),uu=a("li"),Qae=a("strong"),j1o=o("transfo-xl"),D1o=o(" \u2014 "),J$=a("a"),G1o=o("TransfoXLLMHeadModel"),O1o=o(" (Transformer-XL model)"),V1o=l(),bu=a("li"),Wae=a("strong"),X1o=o("unispeech"),z1o=o(" \u2014 "),Y$=a("a"),Q1o=o("UniSpeechForPreTraining"),W1o=o(" (UniSpeech model)"),H1o=l(),Fu=a("li"),Hae=a("strong"),U1o=o("unispeech-sat"),J1o=o(" \u2014 "),K$=a("a"),Y1o=o("UniSpeechSatForPreTraining"),K1o=o(" (UniSpeechSat model)"),Z1o=l(),vu=a("li"),Uae=a("strong"),ebo=o("visual_bert"),obo=o(" \u2014 "),Z$=a("a"),rbo=o("VisualBertForPreTraining"),tbo=o(" (VisualBert model)"),abo=l(),Tu=a("li"),Jae=a("strong"),nbo=o("vit_mae"),sbo=o(" \u2014 "),eI=a("a"),lbo=o("ViTMAEForPreTraining"),ibo=o(" (ViTMAE model)"),dbo=l(),Mu=a("li"),Yae=a("strong"),cbo=o("wav2vec2"),fbo=o(" \u2014 "),oI=a("a"),mbo=o("Wav2Vec2ForPreTraining"),gbo=o(" (Wav2Vec2 model)"),hbo=l(),Eu=a("li"),Kae=a("strong"),pbo=o("xlm"),_bo=o(" \u2014 "),rI=a("a"),ubo=o("XLMWithLMHeadModel"),bbo=o(" (XLM model)"),Fbo=l(),Cu=a("li"),Zae=a("strong"),vbo=o("xlm-roberta"),Tbo=o(" \u2014 "),tI=a("a"),Mbo=o("XLMRobertaForMaskedLM"),Ebo=o(" (XLM-RoBERTa model)"),Cbo=l(),wu=a("li"),ene=a("strong"),wbo=o("xlm-roberta-xl"),Abo=o(" \u2014 "),aI=a("a"),ybo=o("XLMRobertaXLForMaskedLM"),Lbo=o(" (XLM-RoBERTa-XL model)"),xbo=l(),Au=a("li"),one=a("strong"),kbo=o("xlnet"),Sbo=o(" \u2014 "),nI=a("a"),Rbo=o("XLNetLMHeadModel"),Bbo=o(" (XLNet model)"),Pbo=l(),yu=a("p"),$bo=o("The model is set in evaluation mode by default using "),rne=a("code"),Ibo=o("model.eval()"),qbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=a("code"),Nbo=o("model.train()"),jbo=l(),ane=a("p"),Dbo=o("Examples:"),Gbo=l(),f(x3.$$.fragment),LBe=l(),nd=a("h2"),Lu=a("a"),nne=a("span"),f(k3.$$.fragment),Obo=l(),sne=a("span"),Vbo=o("AutoModelForCausalLM"),xBe=l(),Ko=a("div"),f(S3.$$.fragment),Xbo=l(),sd=a("p"),zbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sI=a("a"),Qbo=o("from_pretrained()"),Wbo=o(" class method or the "),lI=a("a"),Hbo=o("from_config()"),Ubo=o(` class
method.`),Jbo=l(),R3=a("p"),Ybo=o("This class cannot be instantiated directly using "),lne=a("code"),Kbo=o("__init__()"),Zbo=o(" (throws an error)."),e6o=l(),Qr=a("div"),f(B3.$$.fragment),o6o=l(),ine=a("p"),r6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),t6o=l(),ld=a("p"),a6o=o(`Note:
Loading a model from its configuration file does `),dne=a("strong"),n6o=o("not"),s6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=a("a"),l6o=o("from_pretrained()"),i6o=o(" to load the model weights."),d6o=l(),cne=a("p"),c6o=o("Examples:"),f6o=l(),f(P3.$$.fragment),m6o=l(),De=a("div"),f($3.$$.fragment),g6o=l(),fne=a("p"),h6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),p6o=l(),Qa=a("p"),_6o=o("The model class to instantiate is selected based on the "),mne=a("code"),u6o=o("model_type"),b6o=o(` property of the config object (either
passed as an argument or loaded from `),gne=a("code"),F6o=o("pretrained_model_name_or_path"),v6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=a("code"),T6o=o("pretrained_model_name_or_path"),M6o=o(":"),E6o=l(),$=a("ul"),xu=a("li"),pne=a("strong"),C6o=o("bart"),w6o=o(" \u2014 "),dI=a("a"),A6o=o("BartForCausalLM"),y6o=o(" (BART model)"),L6o=l(),ku=a("li"),_ne=a("strong"),x6o=o("bert"),k6o=o(" \u2014 "),cI=a("a"),S6o=o("BertLMHeadModel"),R6o=o(" (BERT model)"),B6o=l(),Su=a("li"),une=a("strong"),P6o=o("bert-generation"),$6o=o(" \u2014 "),fI=a("a"),I6o=o("BertGenerationDecoder"),q6o=o(" (Bert Generation model)"),N6o=l(),Ru=a("li"),bne=a("strong"),j6o=o("big_bird"),D6o=o(" \u2014 "),mI=a("a"),G6o=o("BigBirdForCausalLM"),O6o=o(" (BigBird model)"),V6o=l(),Bu=a("li"),Fne=a("strong"),X6o=o("bigbird_pegasus"),z6o=o(" \u2014 "),gI=a("a"),Q6o=o("BigBirdPegasusForCausalLM"),W6o=o(" (BigBirdPegasus model)"),H6o=l(),Pu=a("li"),vne=a("strong"),U6o=o("blenderbot"),J6o=o(" \u2014 "),hI=a("a"),Y6o=o("BlenderbotForCausalLM"),K6o=o(" (Blenderbot model)"),Z6o=l(),$u=a("li"),Tne=a("strong"),eFo=o("blenderbot-small"),oFo=o(" \u2014 "),pI=a("a"),rFo=o("BlenderbotSmallForCausalLM"),tFo=o(" (BlenderbotSmall model)"),aFo=l(),Iu=a("li"),Mne=a("strong"),nFo=o("camembert"),sFo=o(" \u2014 "),_I=a("a"),lFo=o("CamembertForCausalLM"),iFo=o(" (CamemBERT model)"),dFo=l(),qu=a("li"),Ene=a("strong"),cFo=o("ctrl"),fFo=o(" \u2014 "),uI=a("a"),mFo=o("CTRLLMHeadModel"),gFo=o(" (CTRL model)"),hFo=l(),Nu=a("li"),Cne=a("strong"),pFo=o("data2vec-text"),_Fo=o(" \u2014 "),bI=a("a"),uFo=o("Data2VecTextForCausalLM"),bFo=o(" (Data2VecText model)"),FFo=l(),ju=a("li"),wne=a("strong"),vFo=o("electra"),TFo=o(" \u2014 "),FI=a("a"),MFo=o("ElectraForCausalLM"),EFo=o(" (ELECTRA model)"),CFo=l(),Du=a("li"),Ane=a("strong"),wFo=o("gpt2"),AFo=o(" \u2014 "),vI=a("a"),yFo=o("GPT2LMHeadModel"),LFo=o(" (OpenAI GPT-2 model)"),xFo=l(),Gu=a("li"),yne=a("strong"),kFo=o("gpt_neo"),SFo=o(" \u2014 "),TI=a("a"),RFo=o("GPTNeoForCausalLM"),BFo=o(" (GPT Neo model)"),PFo=l(),Ou=a("li"),Lne=a("strong"),$Fo=o("gptj"),IFo=o(" \u2014 "),MI=a("a"),qFo=o("GPTJForCausalLM"),NFo=o(" (GPT-J model)"),jFo=l(),Vu=a("li"),xne=a("strong"),DFo=o("marian"),GFo=o(" \u2014 "),EI=a("a"),OFo=o("MarianForCausalLM"),VFo=o(" (Marian model)"),XFo=l(),Xu=a("li"),kne=a("strong"),zFo=o("mbart"),QFo=o(" \u2014 "),CI=a("a"),WFo=o("MBartForCausalLM"),HFo=o(" (mBART model)"),UFo=l(),zu=a("li"),Sne=a("strong"),JFo=o("megatron-bert"),YFo=o(" \u2014 "),wI=a("a"),KFo=o("MegatronBertForCausalLM"),ZFo=o(" (MegatronBert model)"),evo=l(),Qu=a("li"),Rne=a("strong"),ovo=o("openai-gpt"),rvo=o(" \u2014 "),AI=a("a"),tvo=o("OpenAIGPTLMHeadModel"),avo=o(" (OpenAI GPT model)"),nvo=l(),Wu=a("li"),Bne=a("strong"),svo=o("pegasus"),lvo=o(" \u2014 "),yI=a("a"),ivo=o("PegasusForCausalLM"),dvo=o(" (Pegasus model)"),cvo=l(),Hu=a("li"),Pne=a("strong"),fvo=o("plbart"),mvo=o(" \u2014 "),LI=a("a"),gvo=o("PLBartForCausalLM"),hvo=o(" (PLBart model)"),pvo=l(),Uu=a("li"),$ne=a("strong"),_vo=o("prophetnet"),uvo=o(" \u2014 "),xI=a("a"),bvo=o("ProphetNetForCausalLM"),Fvo=o(" (ProphetNet model)"),vvo=l(),Ju=a("li"),Ine=a("strong"),Tvo=o("qdqbert"),Mvo=o(" \u2014 "),kI=a("a"),Evo=o("QDQBertLMHeadModel"),Cvo=o(" (QDQBert model)"),wvo=l(),Yu=a("li"),qne=a("strong"),Avo=o("reformer"),yvo=o(" \u2014 "),SI=a("a"),Lvo=o("ReformerModelWithLMHead"),xvo=o(" (Reformer model)"),kvo=l(),Ku=a("li"),Nne=a("strong"),Svo=o("rembert"),Rvo=o(" \u2014 "),RI=a("a"),Bvo=o("RemBertForCausalLM"),Pvo=o(" (RemBERT model)"),$vo=l(),Zu=a("li"),jne=a("strong"),Ivo=o("roberta"),qvo=o(" \u2014 "),BI=a("a"),Nvo=o("RobertaForCausalLM"),jvo=o(" (RoBERTa model)"),Dvo=l(),e2=a("li"),Dne=a("strong"),Gvo=o("roformer"),Ovo=o(" \u2014 "),PI=a("a"),Vvo=o("RoFormerForCausalLM"),Xvo=o(" (RoFormer model)"),zvo=l(),o2=a("li"),Gne=a("strong"),Qvo=o("speech_to_text_2"),Wvo=o(" \u2014 "),$I=a("a"),Hvo=o("Speech2Text2ForCausalLM"),Uvo=o(" (Speech2Text2 model)"),Jvo=l(),r2=a("li"),One=a("strong"),Yvo=o("transfo-xl"),Kvo=o(" \u2014 "),II=a("a"),Zvo=o("TransfoXLLMHeadModel"),eTo=o(" (Transformer-XL model)"),oTo=l(),t2=a("li"),Vne=a("strong"),rTo=o("trocr"),tTo=o(" \u2014 "),qI=a("a"),aTo=o("TrOCRForCausalLM"),nTo=o(" (TrOCR model)"),sTo=l(),a2=a("li"),Xne=a("strong"),lTo=o("xglm"),iTo=o(" \u2014 "),NI=a("a"),dTo=o("XGLMForCausalLM"),cTo=o(" (XGLM model)"),fTo=l(),n2=a("li"),zne=a("strong"),mTo=o("xlm"),gTo=o(" \u2014 "),jI=a("a"),hTo=o("XLMWithLMHeadModel"),pTo=o(" (XLM model)"),_To=l(),s2=a("li"),Qne=a("strong"),uTo=o("xlm-prophetnet"),bTo=o(" \u2014 "),DI=a("a"),FTo=o("XLMProphetNetForCausalLM"),vTo=o(" (XLMProphetNet model)"),TTo=l(),l2=a("li"),Wne=a("strong"),MTo=o("xlm-roberta"),ETo=o(" \u2014 "),GI=a("a"),CTo=o("XLMRobertaForCausalLM"),wTo=o(" (XLM-RoBERTa model)"),ATo=l(),i2=a("li"),Hne=a("strong"),yTo=o("xlm-roberta-xl"),LTo=o(" \u2014 "),OI=a("a"),xTo=o("XLMRobertaXLForCausalLM"),kTo=o(" (XLM-RoBERTa-XL model)"),STo=l(),d2=a("li"),Une=a("strong"),RTo=o("xlnet"),BTo=o(" \u2014 "),VI=a("a"),PTo=o("XLNetLMHeadModel"),$To=o(" (XLNet model)"),ITo=l(),c2=a("p"),qTo=o("The model is set in evaluation mode by default using "),Jne=a("code"),NTo=o("model.eval()"),jTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=a("code"),DTo=o("model.train()"),GTo=l(),Kne=a("p"),OTo=o("Examples:"),VTo=l(),f(I3.$$.fragment),kBe=l(),id=a("h2"),f2=a("a"),Zne=a("span"),f(q3.$$.fragment),XTo=l(),ese=a("span"),zTo=o("AutoModelForMaskedLM"),SBe=l(),Zo=a("div"),f(N3.$$.fragment),QTo=l(),dd=a("p"),WTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XI=a("a"),HTo=o("from_pretrained()"),UTo=o(" class method or the "),zI=a("a"),JTo=o("from_config()"),YTo=o(` class
method.`),KTo=l(),j3=a("p"),ZTo=o("This class cannot be instantiated directly using "),ose=a("code"),e7o=o("__init__()"),o7o=o(" (throws an error)."),r7o=l(),Wr=a("div"),f(D3.$$.fragment),t7o=l(),rse=a("p"),a7o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),n7o=l(),cd=a("p"),s7o=o(`Note:
Loading a model from its configuration file does `),tse=a("strong"),l7o=o("not"),i7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=a("a"),d7o=o("from_pretrained()"),c7o=o(" to load the model weights."),f7o=l(),ase=a("p"),m7o=o("Examples:"),g7o=l(),f(G3.$$.fragment),h7o=l(),Ge=a("div"),f(O3.$$.fragment),p7o=l(),nse=a("p"),_7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),u7o=l(),Wa=a("p"),b7o=o("The model class to instantiate is selected based on the "),sse=a("code"),F7o=o("model_type"),v7o=o(` property of the config object (either
passed as an argument or loaded from `),lse=a("code"),T7o=o("pretrained_model_name_or_path"),M7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=a("code"),E7o=o("pretrained_model_name_or_path"),C7o=o(":"),w7o=l(),I=a("ul"),m2=a("li"),dse=a("strong"),A7o=o("albert"),y7o=o(" \u2014 "),WI=a("a"),L7o=o("AlbertForMaskedLM"),x7o=o(" (ALBERT model)"),k7o=l(),g2=a("li"),cse=a("strong"),S7o=o("bart"),R7o=o(" \u2014 "),HI=a("a"),B7o=o("BartForConditionalGeneration"),P7o=o(" (BART model)"),$7o=l(),h2=a("li"),fse=a("strong"),I7o=o("bert"),q7o=o(" \u2014 "),UI=a("a"),N7o=o("BertForMaskedLM"),j7o=o(" (BERT model)"),D7o=l(),p2=a("li"),mse=a("strong"),G7o=o("big_bird"),O7o=o(" \u2014 "),JI=a("a"),V7o=o("BigBirdForMaskedLM"),X7o=o(" (BigBird model)"),z7o=l(),_2=a("li"),gse=a("strong"),Q7o=o("camembert"),W7o=o(" \u2014 "),YI=a("a"),H7o=o("CamembertForMaskedLM"),U7o=o(" (CamemBERT model)"),J7o=l(),u2=a("li"),hse=a("strong"),Y7o=o("convbert"),K7o=o(" \u2014 "),KI=a("a"),Z7o=o("ConvBertForMaskedLM"),e9o=o(" (ConvBERT model)"),o9o=l(),b2=a("li"),pse=a("strong"),r9o=o("data2vec-text"),t9o=o(" \u2014 "),ZI=a("a"),a9o=o("Data2VecTextForMaskedLM"),n9o=o(" (Data2VecText model)"),s9o=l(),F2=a("li"),_se=a("strong"),l9o=o("deberta"),i9o=o(" \u2014 "),eq=a("a"),d9o=o("DebertaForMaskedLM"),c9o=o(" (DeBERTa model)"),f9o=l(),v2=a("li"),use=a("strong"),m9o=o("deberta-v2"),g9o=o(" \u2014 "),oq=a("a"),h9o=o("DebertaV2ForMaskedLM"),p9o=o(" (DeBERTa-v2 model)"),_9o=l(),T2=a("li"),bse=a("strong"),u9o=o("distilbert"),b9o=o(" \u2014 "),rq=a("a"),F9o=o("DistilBertForMaskedLM"),v9o=o(" (DistilBERT model)"),T9o=l(),M2=a("li"),Fse=a("strong"),M9o=o("electra"),E9o=o(" \u2014 "),tq=a("a"),C9o=o("ElectraForMaskedLM"),w9o=o(" (ELECTRA model)"),A9o=l(),E2=a("li"),vse=a("strong"),y9o=o("flaubert"),L9o=o(" \u2014 "),aq=a("a"),x9o=o("FlaubertWithLMHeadModel"),k9o=o(" (FlauBERT model)"),S9o=l(),C2=a("li"),Tse=a("strong"),R9o=o("fnet"),B9o=o(" \u2014 "),nq=a("a"),P9o=o("FNetForMaskedLM"),$9o=o(" (FNet model)"),I9o=l(),w2=a("li"),Mse=a("strong"),q9o=o("funnel"),N9o=o(" \u2014 "),sq=a("a"),j9o=o("FunnelForMaskedLM"),D9o=o(" (Funnel Transformer model)"),G9o=l(),A2=a("li"),Ese=a("strong"),O9o=o("ibert"),V9o=o(" \u2014 "),lq=a("a"),X9o=o("IBertForMaskedLM"),z9o=o(" (I-BERT model)"),Q9o=l(),y2=a("li"),Cse=a("strong"),W9o=o("layoutlm"),H9o=o(" \u2014 "),iq=a("a"),U9o=o("LayoutLMForMaskedLM"),J9o=o(" (LayoutLM model)"),Y9o=l(),L2=a("li"),wse=a("strong"),K9o=o("longformer"),Z9o=o(" \u2014 "),dq=a("a"),eMo=o("LongformerForMaskedLM"),oMo=o(" (Longformer model)"),rMo=l(),x2=a("li"),Ase=a("strong"),tMo=o("mbart"),aMo=o(" \u2014 "),cq=a("a"),nMo=o("MBartForConditionalGeneration"),sMo=o(" (mBART model)"),lMo=l(),k2=a("li"),yse=a("strong"),iMo=o("megatron-bert"),dMo=o(" \u2014 "),fq=a("a"),cMo=o("MegatronBertForMaskedLM"),fMo=o(" (MegatronBert model)"),mMo=l(),S2=a("li"),Lse=a("strong"),gMo=o("mobilebert"),hMo=o(" \u2014 "),mq=a("a"),pMo=o("MobileBertForMaskedLM"),_Mo=o(" (MobileBERT model)"),uMo=l(),R2=a("li"),xse=a("strong"),bMo=o("mpnet"),FMo=o(" \u2014 "),gq=a("a"),vMo=o("MPNetForMaskedLM"),TMo=o(" (MPNet model)"),MMo=l(),B2=a("li"),kse=a("strong"),EMo=o("nystromformer"),CMo=o(" \u2014 "),hq=a("a"),wMo=o("NystromformerForMaskedLM"),AMo=o(" (Nystromformer model)"),yMo=l(),P2=a("li"),Sse=a("strong"),LMo=o("perceiver"),xMo=o(" \u2014 "),pq=a("a"),kMo=o("PerceiverForMaskedLM"),SMo=o(" (Perceiver model)"),RMo=l(),$2=a("li"),Rse=a("strong"),BMo=o("qdqbert"),PMo=o(" \u2014 "),_q=a("a"),$Mo=o("QDQBertForMaskedLM"),IMo=o(" (QDQBert model)"),qMo=l(),I2=a("li"),Bse=a("strong"),NMo=o("reformer"),jMo=o(" \u2014 "),uq=a("a"),DMo=o("ReformerForMaskedLM"),GMo=o(" (Reformer model)"),OMo=l(),q2=a("li"),Pse=a("strong"),VMo=o("rembert"),XMo=o(" \u2014 "),bq=a("a"),zMo=o("RemBertForMaskedLM"),QMo=o(" (RemBERT model)"),WMo=l(),N2=a("li"),$se=a("strong"),HMo=o("roberta"),UMo=o(" \u2014 "),Fq=a("a"),JMo=o("RobertaForMaskedLM"),YMo=o(" (RoBERTa model)"),KMo=l(),j2=a("li"),Ise=a("strong"),ZMo=o("roformer"),e4o=o(" \u2014 "),vq=a("a"),o4o=o("RoFormerForMaskedLM"),r4o=o(" (RoFormer model)"),t4o=l(),D2=a("li"),qse=a("strong"),a4o=o("squeezebert"),n4o=o(" \u2014 "),Tq=a("a"),s4o=o("SqueezeBertForMaskedLM"),l4o=o(" (SqueezeBERT model)"),i4o=l(),G2=a("li"),Nse=a("strong"),d4o=o("tapas"),c4o=o(" \u2014 "),Mq=a("a"),f4o=o("TapasForMaskedLM"),m4o=o(" (TAPAS model)"),g4o=l(),O2=a("li"),jse=a("strong"),h4o=o("wav2vec2"),p4o=o(" \u2014 "),Dse=a("code"),_4o=o("Wav2Vec2ForMaskedLM"),u4o=o(" (Wav2Vec2 model)"),b4o=l(),V2=a("li"),Gse=a("strong"),F4o=o("xlm"),v4o=o(" \u2014 "),Eq=a("a"),T4o=o("XLMWithLMHeadModel"),M4o=o(" (XLM model)"),E4o=l(),X2=a("li"),Ose=a("strong"),C4o=o("xlm-roberta"),w4o=o(" \u2014 "),Cq=a("a"),A4o=o("XLMRobertaForMaskedLM"),y4o=o(" (XLM-RoBERTa model)"),L4o=l(),z2=a("li"),Vse=a("strong"),x4o=o("xlm-roberta-xl"),k4o=o(" \u2014 "),wq=a("a"),S4o=o("XLMRobertaXLForMaskedLM"),R4o=o(" (XLM-RoBERTa-XL model)"),B4o=l(),Q2=a("li"),Xse=a("strong"),P4o=o("yoso"),$4o=o(" \u2014 "),Aq=a("a"),I4o=o("YosoForMaskedLM"),q4o=o(" (YOSO model)"),N4o=l(),W2=a("p"),j4o=o("The model is set in evaluation mode by default using "),zse=a("code"),D4o=o("model.eval()"),G4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=a("code"),O4o=o("model.train()"),V4o=l(),Wse=a("p"),X4o=o("Examples:"),z4o=l(),f(V3.$$.fragment),RBe=l(),fd=a("h2"),H2=a("a"),Hse=a("span"),f(X3.$$.fragment),Q4o=l(),Use=a("span"),W4o=o("AutoModelForSeq2SeqLM"),BBe=l(),er=a("div"),f(z3.$$.fragment),H4o=l(),md=a("p"),U4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yq=a("a"),J4o=o("from_pretrained()"),Y4o=o(" class method or the "),Lq=a("a"),K4o=o("from_config()"),Z4o=o(` class
method.`),eEo=l(),Q3=a("p"),oEo=o("This class cannot be instantiated directly using "),Jse=a("code"),rEo=o("__init__()"),tEo=o(" (throws an error)."),aEo=l(),Hr=a("div"),f(W3.$$.fragment),nEo=l(),Yse=a("p"),sEo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lEo=l(),gd=a("p"),iEo=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),dEo=o("not"),cEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),fEo=o("from_pretrained()"),mEo=o(" to load the model weights."),gEo=l(),Zse=a("p"),hEo=o("Examples:"),pEo=l(),f(H3.$$.fragment),_Eo=l(),Oe=a("div"),f(U3.$$.fragment),uEo=l(),ele=a("p"),bEo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FEo=l(),Ha=a("p"),vEo=o("The model class to instantiate is selected based on the "),ole=a("code"),TEo=o("model_type"),MEo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),EEo=o("pretrained_model_name_or_path"),CEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),wEo=o("pretrained_model_name_or_path"),AEo=o(":"),yEo=l(),ae=a("ul"),U2=a("li"),ale=a("strong"),LEo=o("bart"),xEo=o(" \u2014 "),kq=a("a"),kEo=o("BartForConditionalGeneration"),SEo=o(" (BART model)"),REo=l(),J2=a("li"),nle=a("strong"),BEo=o("bigbird_pegasus"),PEo=o(" \u2014 "),Sq=a("a"),$Eo=o("BigBirdPegasusForConditionalGeneration"),IEo=o(" (BigBirdPegasus model)"),qEo=l(),Y2=a("li"),sle=a("strong"),NEo=o("blenderbot"),jEo=o(" \u2014 "),Rq=a("a"),DEo=o("BlenderbotForConditionalGeneration"),GEo=o(" (Blenderbot model)"),OEo=l(),K2=a("li"),lle=a("strong"),VEo=o("blenderbot-small"),XEo=o(" \u2014 "),Bq=a("a"),zEo=o("BlenderbotSmallForConditionalGeneration"),QEo=o(" (BlenderbotSmall model)"),WEo=l(),Z2=a("li"),ile=a("strong"),HEo=o("encoder-decoder"),UEo=o(" \u2014 "),Pq=a("a"),JEo=o("EncoderDecoderModel"),YEo=o(" (Encoder decoder model)"),KEo=l(),e1=a("li"),dle=a("strong"),ZEo=o("fsmt"),e5o=o(" \u2014 "),$q=a("a"),o5o=o("FSMTForConditionalGeneration"),r5o=o(" (FairSeq Machine-Translation model)"),t5o=l(),o1=a("li"),cle=a("strong"),a5o=o("led"),n5o=o(" \u2014 "),Iq=a("a"),s5o=o("LEDForConditionalGeneration"),l5o=o(" (LED model)"),i5o=l(),r1=a("li"),fle=a("strong"),d5o=o("longt5"),c5o=o(" \u2014 "),qq=a("a"),f5o=o("LongT5ForConditionalGeneration"),m5o=o(" (LongT5 model)"),g5o=l(),t1=a("li"),mle=a("strong"),h5o=o("m2m_100"),p5o=o(" \u2014 "),Nq=a("a"),_5o=o("M2M100ForConditionalGeneration"),u5o=o(" (M2M100 model)"),b5o=l(),a1=a("li"),gle=a("strong"),F5o=o("marian"),v5o=o(" \u2014 "),jq=a("a"),T5o=o("MarianMTModel"),M5o=o(" (Marian model)"),E5o=l(),n1=a("li"),hle=a("strong"),C5o=o("mbart"),w5o=o(" \u2014 "),Dq=a("a"),A5o=o("MBartForConditionalGeneration"),y5o=o(" (mBART model)"),L5o=l(),s1=a("li"),ple=a("strong"),x5o=o("mt5"),k5o=o(" \u2014 "),Gq=a("a"),S5o=o("MT5ForConditionalGeneration"),R5o=o(" (mT5 model)"),B5o=l(),l1=a("li"),_le=a("strong"),P5o=o("pegasus"),$5o=o(" \u2014 "),Oq=a("a"),I5o=o("PegasusForConditionalGeneration"),q5o=o(" (Pegasus model)"),N5o=l(),i1=a("li"),ule=a("strong"),j5o=o("plbart"),D5o=o(" \u2014 "),Vq=a("a"),G5o=o("PLBartForConditionalGeneration"),O5o=o(" (PLBart model)"),V5o=l(),d1=a("li"),ble=a("strong"),X5o=o("prophetnet"),z5o=o(" \u2014 "),Xq=a("a"),Q5o=o("ProphetNetForConditionalGeneration"),W5o=o(" (ProphetNet model)"),H5o=l(),c1=a("li"),Fle=a("strong"),U5o=o("t5"),J5o=o(" \u2014 "),zq=a("a"),Y5o=o("T5ForConditionalGeneration"),K5o=o(" (T5 model)"),Z5o=l(),f1=a("li"),vle=a("strong"),e3o=o("tapex"),o3o=o(" \u2014 "),Qq=a("a"),r3o=o("BartForConditionalGeneration"),t3o=o(" (TAPEX model)"),a3o=l(),m1=a("li"),Tle=a("strong"),n3o=o("xlm-prophetnet"),s3o=o(" \u2014 "),Wq=a("a"),l3o=o("XLMProphetNetForConditionalGeneration"),i3o=o(" (XLMProphetNet model)"),d3o=l(),g1=a("p"),c3o=o("The model is set in evaluation mode by default using "),Mle=a("code"),f3o=o("model.eval()"),m3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=a("code"),g3o=o("model.train()"),h3o=l(),Cle=a("p"),p3o=o("Examples:"),_3o=l(),f(J3.$$.fragment),PBe=l(),hd=a("h2"),h1=a("a"),wle=a("span"),f(Y3.$$.fragment),u3o=l(),Ale=a("span"),b3o=o("AutoModelForSequenceClassification"),$Be=l(),or=a("div"),f(K3.$$.fragment),F3o=l(),pd=a("p"),v3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Hq=a("a"),T3o=o("from_pretrained()"),M3o=o(" class method or the "),Uq=a("a"),E3o=o("from_config()"),C3o=o(` class
method.`),w3o=l(),Z3=a("p"),A3o=o("This class cannot be instantiated directly using "),yle=a("code"),y3o=o("__init__()"),L3o=o(" (throws an error)."),x3o=l(),Ur=a("div"),f(eC.$$.fragment),k3o=l(),Lle=a("p"),S3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),R3o=l(),_d=a("p"),B3o=o(`Note:
Loading a model from its configuration file does `),xle=a("strong"),P3o=o("not"),$3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=a("a"),I3o=o("from_pretrained()"),q3o=o(" to load the model weights."),N3o=l(),kle=a("p"),j3o=o("Examples:"),D3o=l(),f(oC.$$.fragment),G3o=l(),Ve=a("div"),f(rC.$$.fragment),O3o=l(),Sle=a("p"),V3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),X3o=l(),Ua=a("p"),z3o=o("The model class to instantiate is selected based on the "),Rle=a("code"),Q3o=o("model_type"),W3o=o(` property of the config object (either
passed as an argument or loaded from `),Ble=a("code"),H3o=o("pretrained_model_name_or_path"),U3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ple=a("code"),J3o=o("pretrained_model_name_or_path"),Y3o=o(":"),K3o=l(),y=a("ul"),p1=a("li"),$le=a("strong"),Z3o=o("albert"),eCo=o(" \u2014 "),Yq=a("a"),oCo=o("AlbertForSequenceClassification"),rCo=o(" (ALBERT model)"),tCo=l(),_1=a("li"),Ile=a("strong"),aCo=o("bart"),nCo=o(" \u2014 "),Kq=a("a"),sCo=o("BartForSequenceClassification"),lCo=o(" (BART model)"),iCo=l(),u1=a("li"),qle=a("strong"),dCo=o("bert"),cCo=o(" \u2014 "),Zq=a("a"),fCo=o("BertForSequenceClassification"),mCo=o(" (BERT model)"),gCo=l(),b1=a("li"),Nle=a("strong"),hCo=o("big_bird"),pCo=o(" \u2014 "),eN=a("a"),_Co=o("BigBirdForSequenceClassification"),uCo=o(" (BigBird model)"),bCo=l(),F1=a("li"),jle=a("strong"),FCo=o("bigbird_pegasus"),vCo=o(" \u2014 "),oN=a("a"),TCo=o("BigBirdPegasusForSequenceClassification"),MCo=o(" (BigBirdPegasus model)"),ECo=l(),v1=a("li"),Dle=a("strong"),CCo=o("camembert"),wCo=o(" \u2014 "),rN=a("a"),ACo=o("CamembertForSequenceClassification"),yCo=o(" (CamemBERT model)"),LCo=l(),T1=a("li"),Gle=a("strong"),xCo=o("canine"),kCo=o(" \u2014 "),tN=a("a"),SCo=o("CanineForSequenceClassification"),RCo=o(" (Canine model)"),BCo=l(),M1=a("li"),Ole=a("strong"),PCo=o("convbert"),$Co=o(" \u2014 "),aN=a("a"),ICo=o("ConvBertForSequenceClassification"),qCo=o(" (ConvBERT model)"),NCo=l(),E1=a("li"),Vle=a("strong"),jCo=o("ctrl"),DCo=o(" \u2014 "),nN=a("a"),GCo=o("CTRLForSequenceClassification"),OCo=o(" (CTRL model)"),VCo=l(),C1=a("li"),Xle=a("strong"),XCo=o("data2vec-text"),zCo=o(" \u2014 "),sN=a("a"),QCo=o("Data2VecTextForSequenceClassification"),WCo=o(" (Data2VecText model)"),HCo=l(),w1=a("li"),zle=a("strong"),UCo=o("deberta"),JCo=o(" \u2014 "),lN=a("a"),YCo=o("DebertaForSequenceClassification"),KCo=o(" (DeBERTa model)"),ZCo=l(),A1=a("li"),Qle=a("strong"),ewo=o("deberta-v2"),owo=o(" \u2014 "),iN=a("a"),rwo=o("DebertaV2ForSequenceClassification"),two=o(" (DeBERTa-v2 model)"),awo=l(),y1=a("li"),Wle=a("strong"),nwo=o("distilbert"),swo=o(" \u2014 "),dN=a("a"),lwo=o("DistilBertForSequenceClassification"),iwo=o(" (DistilBERT model)"),dwo=l(),L1=a("li"),Hle=a("strong"),cwo=o("electra"),fwo=o(" \u2014 "),cN=a("a"),mwo=o("ElectraForSequenceClassification"),gwo=o(" (ELECTRA model)"),hwo=l(),x1=a("li"),Ule=a("strong"),pwo=o("flaubert"),_wo=o(" \u2014 "),fN=a("a"),uwo=o("FlaubertForSequenceClassification"),bwo=o(" (FlauBERT model)"),Fwo=l(),k1=a("li"),Jle=a("strong"),vwo=o("fnet"),Two=o(" \u2014 "),mN=a("a"),Mwo=o("FNetForSequenceClassification"),Ewo=o(" (FNet model)"),Cwo=l(),S1=a("li"),Yle=a("strong"),wwo=o("funnel"),Awo=o(" \u2014 "),gN=a("a"),ywo=o("FunnelForSequenceClassification"),Lwo=o(" (Funnel Transformer model)"),xwo=l(),R1=a("li"),Kle=a("strong"),kwo=o("gpt2"),Swo=o(" \u2014 "),hN=a("a"),Rwo=o("GPT2ForSequenceClassification"),Bwo=o(" (OpenAI GPT-2 model)"),Pwo=l(),B1=a("li"),Zle=a("strong"),$wo=o("gpt_neo"),Iwo=o(" \u2014 "),pN=a("a"),qwo=o("GPTNeoForSequenceClassification"),Nwo=o(" (GPT Neo model)"),jwo=l(),P1=a("li"),eie=a("strong"),Dwo=o("gptj"),Gwo=o(" \u2014 "),_N=a("a"),Owo=o("GPTJForSequenceClassification"),Vwo=o(" (GPT-J model)"),Xwo=l(),$1=a("li"),oie=a("strong"),zwo=o("ibert"),Qwo=o(" \u2014 "),uN=a("a"),Wwo=o("IBertForSequenceClassification"),Hwo=o(" (I-BERT model)"),Uwo=l(),I1=a("li"),rie=a("strong"),Jwo=o("layoutlm"),Ywo=o(" \u2014 "),bN=a("a"),Kwo=o("LayoutLMForSequenceClassification"),Zwo=o(" (LayoutLM model)"),eAo=l(),q1=a("li"),tie=a("strong"),oAo=o("layoutlmv2"),rAo=o(" \u2014 "),FN=a("a"),tAo=o("LayoutLMv2ForSequenceClassification"),aAo=o(" (LayoutLMv2 model)"),nAo=l(),N1=a("li"),aie=a("strong"),sAo=o("led"),lAo=o(" \u2014 "),vN=a("a"),iAo=o("LEDForSequenceClassification"),dAo=o(" (LED model)"),cAo=l(),j1=a("li"),nie=a("strong"),fAo=o("longformer"),mAo=o(" \u2014 "),TN=a("a"),gAo=o("LongformerForSequenceClassification"),hAo=o(" (Longformer model)"),pAo=l(),D1=a("li"),sie=a("strong"),_Ao=o("mbart"),uAo=o(" \u2014 "),MN=a("a"),bAo=o("MBartForSequenceClassification"),FAo=o(" (mBART model)"),vAo=l(),G1=a("li"),lie=a("strong"),TAo=o("megatron-bert"),MAo=o(" \u2014 "),EN=a("a"),EAo=o("MegatronBertForSequenceClassification"),CAo=o(" (MegatronBert model)"),wAo=l(),O1=a("li"),iie=a("strong"),AAo=o("mobilebert"),yAo=o(" \u2014 "),CN=a("a"),LAo=o("MobileBertForSequenceClassification"),xAo=o(" (MobileBERT model)"),kAo=l(),V1=a("li"),die=a("strong"),SAo=o("mpnet"),RAo=o(" \u2014 "),wN=a("a"),BAo=o("MPNetForSequenceClassification"),PAo=o(" (MPNet model)"),$Ao=l(),X1=a("li"),cie=a("strong"),IAo=o("nystromformer"),qAo=o(" \u2014 "),AN=a("a"),NAo=o("NystromformerForSequenceClassification"),jAo=o(" (Nystromformer model)"),DAo=l(),z1=a("li"),fie=a("strong"),GAo=o("openai-gpt"),OAo=o(" \u2014 "),yN=a("a"),VAo=o("OpenAIGPTForSequenceClassification"),XAo=o(" (OpenAI GPT model)"),zAo=l(),Q1=a("li"),mie=a("strong"),QAo=o("perceiver"),WAo=o(" \u2014 "),LN=a("a"),HAo=o("PerceiverForSequenceClassification"),UAo=o(" (Perceiver model)"),JAo=l(),W1=a("li"),gie=a("strong"),YAo=o("plbart"),KAo=o(" \u2014 "),xN=a("a"),ZAo=o("PLBartForSequenceClassification"),e0o=o(" (PLBart model)"),o0o=l(),H1=a("li"),hie=a("strong"),r0o=o("qdqbert"),t0o=o(" \u2014 "),kN=a("a"),a0o=o("QDQBertForSequenceClassification"),n0o=o(" (QDQBert model)"),s0o=l(),U1=a("li"),pie=a("strong"),l0o=o("reformer"),i0o=o(" \u2014 "),SN=a("a"),d0o=o("ReformerForSequenceClassification"),c0o=o(" (Reformer model)"),f0o=l(),J1=a("li"),_ie=a("strong"),m0o=o("rembert"),g0o=o(" \u2014 "),RN=a("a"),h0o=o("RemBertForSequenceClassification"),p0o=o(" (RemBERT model)"),_0o=l(),Y1=a("li"),uie=a("strong"),u0o=o("roberta"),b0o=o(" \u2014 "),BN=a("a"),F0o=o("RobertaForSequenceClassification"),v0o=o(" (RoBERTa model)"),T0o=l(),K1=a("li"),bie=a("strong"),M0o=o("roformer"),E0o=o(" \u2014 "),PN=a("a"),C0o=o("RoFormerForSequenceClassification"),w0o=o(" (RoFormer model)"),A0o=l(),Z1=a("li"),Fie=a("strong"),y0o=o("squeezebert"),L0o=o(" \u2014 "),$N=a("a"),x0o=o("SqueezeBertForSequenceClassification"),k0o=o(" (SqueezeBERT model)"),S0o=l(),eb=a("li"),vie=a("strong"),R0o=o("tapas"),B0o=o(" \u2014 "),IN=a("a"),P0o=o("TapasForSequenceClassification"),$0o=o(" (TAPAS model)"),I0o=l(),ob=a("li"),Tie=a("strong"),q0o=o("tapex"),N0o=o(" \u2014 "),qN=a("a"),j0o=o("BartForSequenceClassification"),D0o=o(" (TAPEX model)"),G0o=l(),rb=a("li"),Mie=a("strong"),O0o=o("transfo-xl"),V0o=o(" \u2014 "),NN=a("a"),X0o=o("TransfoXLForSequenceClassification"),z0o=o(" (Transformer-XL model)"),Q0o=l(),tb=a("li"),Eie=a("strong"),W0o=o("xlm"),H0o=o(" \u2014 "),jN=a("a"),U0o=o("XLMForSequenceClassification"),J0o=o(" (XLM model)"),Y0o=l(),ab=a("li"),Cie=a("strong"),K0o=o("xlm-roberta"),Z0o=o(" \u2014 "),DN=a("a"),eyo=o("XLMRobertaForSequenceClassification"),oyo=o(" (XLM-RoBERTa model)"),ryo=l(),nb=a("li"),wie=a("strong"),tyo=o("xlm-roberta-xl"),ayo=o(" \u2014 "),GN=a("a"),nyo=o("XLMRobertaXLForSequenceClassification"),syo=o(" (XLM-RoBERTa-XL model)"),lyo=l(),sb=a("li"),Aie=a("strong"),iyo=o("xlnet"),dyo=o(" \u2014 "),ON=a("a"),cyo=o("XLNetForSequenceClassification"),fyo=o(" (XLNet model)"),myo=l(),lb=a("li"),yie=a("strong"),gyo=o("yoso"),hyo=o(" \u2014 "),VN=a("a"),pyo=o("YosoForSequenceClassification"),_yo=o(" (YOSO model)"),uyo=l(),ib=a("p"),byo=o("The model is set in evaluation mode by default using "),Lie=a("code"),Fyo=o("model.eval()"),vyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),Tyo=o("model.train()"),Myo=l(),kie=a("p"),Eyo=o("Examples:"),Cyo=l(),f(tC.$$.fragment),IBe=l(),ud=a("h2"),db=a("a"),Sie=a("span"),f(aC.$$.fragment),wyo=l(),Rie=a("span"),Ayo=o("AutoModelForMultipleChoice"),qBe=l(),rr=a("div"),f(nC.$$.fragment),yyo=l(),bd=a("p"),Lyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XN=a("a"),xyo=o("from_pretrained()"),kyo=o(" class method or the "),zN=a("a"),Syo=o("from_config()"),Ryo=o(` class
method.`),Byo=l(),sC=a("p"),Pyo=o("This class cannot be instantiated directly using "),Bie=a("code"),$yo=o("__init__()"),Iyo=o(" (throws an error)."),qyo=l(),Jr=a("div"),f(lC.$$.fragment),Nyo=l(),Pie=a("p"),jyo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Dyo=l(),Fd=a("p"),Gyo=o(`Note:
Loading a model from its configuration file does `),$ie=a("strong"),Oyo=o("not"),Vyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=a("a"),Xyo=o("from_pretrained()"),zyo=o(" to load the model weights."),Qyo=l(),Iie=a("p"),Wyo=o("Examples:"),Hyo=l(),f(iC.$$.fragment),Uyo=l(),Xe=a("div"),f(dC.$$.fragment),Jyo=l(),qie=a("p"),Yyo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Kyo=l(),Ja=a("p"),Zyo=o("The model class to instantiate is selected based on the "),Nie=a("code"),eLo=o("model_type"),oLo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),rLo=o("pretrained_model_name_or_path"),tLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=a("code"),aLo=o("pretrained_model_name_or_path"),nLo=o(":"),sLo=l(),G=a("ul"),cb=a("li"),Gie=a("strong"),lLo=o("albert"),iLo=o(" \u2014 "),WN=a("a"),dLo=o("AlbertForMultipleChoice"),cLo=o(" (ALBERT model)"),fLo=l(),fb=a("li"),Oie=a("strong"),mLo=o("bert"),gLo=o(" \u2014 "),HN=a("a"),hLo=o("BertForMultipleChoice"),pLo=o(" (BERT model)"),_Lo=l(),mb=a("li"),Vie=a("strong"),uLo=o("big_bird"),bLo=o(" \u2014 "),UN=a("a"),FLo=o("BigBirdForMultipleChoice"),vLo=o(" (BigBird model)"),TLo=l(),gb=a("li"),Xie=a("strong"),MLo=o("camembert"),ELo=o(" \u2014 "),JN=a("a"),CLo=o("CamembertForMultipleChoice"),wLo=o(" (CamemBERT model)"),ALo=l(),hb=a("li"),zie=a("strong"),yLo=o("canine"),LLo=o(" \u2014 "),YN=a("a"),xLo=o("CanineForMultipleChoice"),kLo=o(" (Canine model)"),SLo=l(),pb=a("li"),Qie=a("strong"),RLo=o("convbert"),BLo=o(" \u2014 "),KN=a("a"),PLo=o("ConvBertForMultipleChoice"),$Lo=o(" (ConvBERT model)"),ILo=l(),_b=a("li"),Wie=a("strong"),qLo=o("data2vec-text"),NLo=o(" \u2014 "),ZN=a("a"),jLo=o("Data2VecTextForMultipleChoice"),DLo=o(" (Data2VecText model)"),GLo=l(),ub=a("li"),Hie=a("strong"),OLo=o("distilbert"),VLo=o(" \u2014 "),ej=a("a"),XLo=o("DistilBertForMultipleChoice"),zLo=o(" (DistilBERT model)"),QLo=l(),bb=a("li"),Uie=a("strong"),WLo=o("electra"),HLo=o(" \u2014 "),oj=a("a"),ULo=o("ElectraForMultipleChoice"),JLo=o(" (ELECTRA model)"),YLo=l(),Fb=a("li"),Jie=a("strong"),KLo=o("flaubert"),ZLo=o(" \u2014 "),rj=a("a"),e8o=o("FlaubertForMultipleChoice"),o8o=o(" (FlauBERT model)"),r8o=l(),vb=a("li"),Yie=a("strong"),t8o=o("fnet"),a8o=o(" \u2014 "),tj=a("a"),n8o=o("FNetForMultipleChoice"),s8o=o(" (FNet model)"),l8o=l(),Tb=a("li"),Kie=a("strong"),i8o=o("funnel"),d8o=o(" \u2014 "),aj=a("a"),c8o=o("FunnelForMultipleChoice"),f8o=o(" (Funnel Transformer model)"),m8o=l(),Mb=a("li"),Zie=a("strong"),g8o=o("ibert"),h8o=o(" \u2014 "),nj=a("a"),p8o=o("IBertForMultipleChoice"),_8o=o(" (I-BERT model)"),u8o=l(),Eb=a("li"),ede=a("strong"),b8o=o("longformer"),F8o=o(" \u2014 "),sj=a("a"),v8o=o("LongformerForMultipleChoice"),T8o=o(" (Longformer model)"),M8o=l(),Cb=a("li"),ode=a("strong"),E8o=o("megatron-bert"),C8o=o(" \u2014 "),lj=a("a"),w8o=o("MegatronBertForMultipleChoice"),A8o=o(" (MegatronBert model)"),y8o=l(),wb=a("li"),rde=a("strong"),L8o=o("mobilebert"),x8o=o(" \u2014 "),ij=a("a"),k8o=o("MobileBertForMultipleChoice"),S8o=o(" (MobileBERT model)"),R8o=l(),Ab=a("li"),tde=a("strong"),B8o=o("mpnet"),P8o=o(" \u2014 "),dj=a("a"),$8o=o("MPNetForMultipleChoice"),I8o=o(" (MPNet model)"),q8o=l(),yb=a("li"),ade=a("strong"),N8o=o("nystromformer"),j8o=o(" \u2014 "),cj=a("a"),D8o=o("NystromformerForMultipleChoice"),G8o=o(" (Nystromformer model)"),O8o=l(),Lb=a("li"),nde=a("strong"),V8o=o("qdqbert"),X8o=o(" \u2014 "),fj=a("a"),z8o=o("QDQBertForMultipleChoice"),Q8o=o(" (QDQBert model)"),W8o=l(),xb=a("li"),sde=a("strong"),H8o=o("rembert"),U8o=o(" \u2014 "),mj=a("a"),J8o=o("RemBertForMultipleChoice"),Y8o=o(" (RemBERT model)"),K8o=l(),kb=a("li"),lde=a("strong"),Z8o=o("roberta"),exo=o(" \u2014 "),gj=a("a"),oxo=o("RobertaForMultipleChoice"),rxo=o(" (RoBERTa model)"),txo=l(),Sb=a("li"),ide=a("strong"),axo=o("roformer"),nxo=o(" \u2014 "),hj=a("a"),sxo=o("RoFormerForMultipleChoice"),lxo=o(" (RoFormer model)"),ixo=l(),Rb=a("li"),dde=a("strong"),dxo=o("squeezebert"),cxo=o(" \u2014 "),pj=a("a"),fxo=o("SqueezeBertForMultipleChoice"),mxo=o(" (SqueezeBERT model)"),gxo=l(),Bb=a("li"),cde=a("strong"),hxo=o("xlm"),pxo=o(" \u2014 "),_j=a("a"),_xo=o("XLMForMultipleChoice"),uxo=o(" (XLM model)"),bxo=l(),Pb=a("li"),fde=a("strong"),Fxo=o("xlm-roberta"),vxo=o(" \u2014 "),uj=a("a"),Txo=o("XLMRobertaForMultipleChoice"),Mxo=o(" (XLM-RoBERTa model)"),Exo=l(),$b=a("li"),mde=a("strong"),Cxo=o("xlm-roberta-xl"),wxo=o(" \u2014 "),bj=a("a"),Axo=o("XLMRobertaXLForMultipleChoice"),yxo=o(" (XLM-RoBERTa-XL model)"),Lxo=l(),Ib=a("li"),gde=a("strong"),xxo=o("xlnet"),kxo=o(" \u2014 "),Fj=a("a"),Sxo=o("XLNetForMultipleChoice"),Rxo=o(" (XLNet model)"),Bxo=l(),qb=a("li"),hde=a("strong"),Pxo=o("yoso"),$xo=o(" \u2014 "),vj=a("a"),Ixo=o("YosoForMultipleChoice"),qxo=o(" (YOSO model)"),Nxo=l(),Nb=a("p"),jxo=o("The model is set in evaluation mode by default using "),pde=a("code"),Dxo=o("model.eval()"),Gxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=a("code"),Oxo=o("model.train()"),Vxo=l(),ude=a("p"),Xxo=o("Examples:"),zxo=l(),f(cC.$$.fragment),NBe=l(),vd=a("h2"),jb=a("a"),bde=a("span"),f(fC.$$.fragment),Qxo=l(),Fde=a("span"),Wxo=o("AutoModelForNextSentencePrediction"),jBe=l(),tr=a("div"),f(mC.$$.fragment),Hxo=l(),Td=a("p"),Uxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tj=a("a"),Jxo=o("from_pretrained()"),Yxo=o(" class method or the "),Mj=a("a"),Kxo=o("from_config()"),Zxo=o(` class
method.`),eko=l(),gC=a("p"),oko=o("This class cannot be instantiated directly using "),vde=a("code"),rko=o("__init__()"),tko=o(" (throws an error)."),ako=l(),Yr=a("div"),f(hC.$$.fragment),nko=l(),Tde=a("p"),sko=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lko=l(),Md=a("p"),iko=o(`Note:
Loading a model from its configuration file does `),Mde=a("strong"),dko=o("not"),cko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=a("a"),fko=o("from_pretrained()"),mko=o(" to load the model weights."),gko=l(),Ede=a("p"),hko=o("Examples:"),pko=l(),f(pC.$$.fragment),_ko=l(),ze=a("div"),f(_C.$$.fragment),uko=l(),Cde=a("p"),bko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Fko=l(),Ya=a("p"),vko=o("The model class to instantiate is selected based on the "),wde=a("code"),Tko=o("model_type"),Mko=o(` property of the config object (either
passed as an argument or loaded from `),Ade=a("code"),Eko=o("pretrained_model_name_or_path"),Cko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=a("code"),wko=o("pretrained_model_name_or_path"),Ako=o(":"),yko=l(),da=a("ul"),Db=a("li"),Lde=a("strong"),Lko=o("bert"),xko=o(" \u2014 "),Cj=a("a"),kko=o("BertForNextSentencePrediction"),Sko=o(" (BERT model)"),Rko=l(),Gb=a("li"),xde=a("strong"),Bko=o("fnet"),Pko=o(" \u2014 "),wj=a("a"),$ko=o("FNetForNextSentencePrediction"),Iko=o(" (FNet model)"),qko=l(),Ob=a("li"),kde=a("strong"),Nko=o("megatron-bert"),jko=o(" \u2014 "),Aj=a("a"),Dko=o("MegatronBertForNextSentencePrediction"),Gko=o(" (MegatronBert model)"),Oko=l(),Vb=a("li"),Sde=a("strong"),Vko=o("mobilebert"),Xko=o(" \u2014 "),yj=a("a"),zko=o("MobileBertForNextSentencePrediction"),Qko=o(" (MobileBERT model)"),Wko=l(),Xb=a("li"),Rde=a("strong"),Hko=o("qdqbert"),Uko=o(" \u2014 "),Lj=a("a"),Jko=o("QDQBertForNextSentencePrediction"),Yko=o(" (QDQBert model)"),Kko=l(),zb=a("p"),Zko=o("The model is set in evaluation mode by default using "),Bde=a("code"),eSo=o("model.eval()"),oSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=a("code"),rSo=o("model.train()"),tSo=l(),$de=a("p"),aSo=o("Examples:"),nSo=l(),f(uC.$$.fragment),DBe=l(),Ed=a("h2"),Qb=a("a"),Ide=a("span"),f(bC.$$.fragment),sSo=l(),qde=a("span"),lSo=o("AutoModelForTokenClassification"),GBe=l(),ar=a("div"),f(FC.$$.fragment),iSo=l(),Cd=a("p"),dSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xj=a("a"),cSo=o("from_pretrained()"),fSo=o(" class method or the "),kj=a("a"),mSo=o("from_config()"),gSo=o(` class
method.`),hSo=l(),vC=a("p"),pSo=o("This class cannot be instantiated directly using "),Nde=a("code"),_So=o("__init__()"),uSo=o(" (throws an error)."),bSo=l(),Kr=a("div"),f(TC.$$.fragment),FSo=l(),jde=a("p"),vSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TSo=l(),wd=a("p"),MSo=o(`Note:
Loading a model from its configuration file does `),Dde=a("strong"),ESo=o("not"),CSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=a("a"),wSo=o("from_pretrained()"),ASo=o(" to load the model weights."),ySo=l(),Gde=a("p"),LSo=o("Examples:"),xSo=l(),f(MC.$$.fragment),kSo=l(),Qe=a("div"),f(EC.$$.fragment),SSo=l(),Ode=a("p"),RSo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BSo=l(),Ka=a("p"),PSo=o("The model class to instantiate is selected based on the "),Vde=a("code"),$So=o("model_type"),ISo=o(` property of the config object (either
passed as an argument or loaded from `),Xde=a("code"),qSo=o("pretrained_model_name_or_path"),NSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=a("code"),jSo=o("pretrained_model_name_or_path"),DSo=o(":"),GSo=l(),j=a("ul"),Wb=a("li"),Qde=a("strong"),OSo=o("albert"),VSo=o(" \u2014 "),Rj=a("a"),XSo=o("AlbertForTokenClassification"),zSo=o(" (ALBERT model)"),QSo=l(),Hb=a("li"),Wde=a("strong"),WSo=o("bert"),HSo=o(" \u2014 "),Bj=a("a"),USo=o("BertForTokenClassification"),JSo=o(" (BERT model)"),YSo=l(),Ub=a("li"),Hde=a("strong"),KSo=o("big_bird"),ZSo=o(" \u2014 "),Pj=a("a"),eRo=o("BigBirdForTokenClassification"),oRo=o(" (BigBird model)"),rRo=l(),Jb=a("li"),Ude=a("strong"),tRo=o("camembert"),aRo=o(" \u2014 "),$j=a("a"),nRo=o("CamembertForTokenClassification"),sRo=o(" (CamemBERT model)"),lRo=l(),Yb=a("li"),Jde=a("strong"),iRo=o("canine"),dRo=o(" \u2014 "),Ij=a("a"),cRo=o("CanineForTokenClassification"),fRo=o(" (Canine model)"),mRo=l(),Kb=a("li"),Yde=a("strong"),gRo=o("convbert"),hRo=o(" \u2014 "),qj=a("a"),pRo=o("ConvBertForTokenClassification"),_Ro=o(" (ConvBERT model)"),uRo=l(),Zb=a("li"),Kde=a("strong"),bRo=o("data2vec-text"),FRo=o(" \u2014 "),Nj=a("a"),vRo=o("Data2VecTextForTokenClassification"),TRo=o(" (Data2VecText model)"),MRo=l(),e6=a("li"),Zde=a("strong"),ERo=o("deberta"),CRo=o(" \u2014 "),jj=a("a"),wRo=o("DebertaForTokenClassification"),ARo=o(" (DeBERTa model)"),yRo=l(),o6=a("li"),ece=a("strong"),LRo=o("deberta-v2"),xRo=o(" \u2014 "),Dj=a("a"),kRo=o("DebertaV2ForTokenClassification"),SRo=o(" (DeBERTa-v2 model)"),RRo=l(),r6=a("li"),oce=a("strong"),BRo=o("distilbert"),PRo=o(" \u2014 "),Gj=a("a"),$Ro=o("DistilBertForTokenClassification"),IRo=o(" (DistilBERT model)"),qRo=l(),t6=a("li"),rce=a("strong"),NRo=o("electra"),jRo=o(" \u2014 "),Oj=a("a"),DRo=o("ElectraForTokenClassification"),GRo=o(" (ELECTRA model)"),ORo=l(),a6=a("li"),tce=a("strong"),VRo=o("flaubert"),XRo=o(" \u2014 "),Vj=a("a"),zRo=o("FlaubertForTokenClassification"),QRo=o(" (FlauBERT model)"),WRo=l(),n6=a("li"),ace=a("strong"),HRo=o("fnet"),URo=o(" \u2014 "),Xj=a("a"),JRo=o("FNetForTokenClassification"),YRo=o(" (FNet model)"),KRo=l(),s6=a("li"),nce=a("strong"),ZRo=o("funnel"),eBo=o(" \u2014 "),zj=a("a"),oBo=o("FunnelForTokenClassification"),rBo=o(" (Funnel Transformer model)"),tBo=l(),l6=a("li"),sce=a("strong"),aBo=o("gpt2"),nBo=o(" \u2014 "),Qj=a("a"),sBo=o("GPT2ForTokenClassification"),lBo=o(" (OpenAI GPT-2 model)"),iBo=l(),i6=a("li"),lce=a("strong"),dBo=o("ibert"),cBo=o(" \u2014 "),Wj=a("a"),fBo=o("IBertForTokenClassification"),mBo=o(" (I-BERT model)"),gBo=l(),d6=a("li"),ice=a("strong"),hBo=o("layoutlm"),pBo=o(" \u2014 "),Hj=a("a"),_Bo=o("LayoutLMForTokenClassification"),uBo=o(" (LayoutLM model)"),bBo=l(),c6=a("li"),dce=a("strong"),FBo=o("layoutlmv2"),vBo=o(" \u2014 "),Uj=a("a"),TBo=o("LayoutLMv2ForTokenClassification"),MBo=o(" (LayoutLMv2 model)"),EBo=l(),f6=a("li"),cce=a("strong"),CBo=o("longformer"),wBo=o(" \u2014 "),Jj=a("a"),ABo=o("LongformerForTokenClassification"),yBo=o(" (Longformer model)"),LBo=l(),m6=a("li"),fce=a("strong"),xBo=o("megatron-bert"),kBo=o(" \u2014 "),Yj=a("a"),SBo=o("MegatronBertForTokenClassification"),RBo=o(" (MegatronBert model)"),BBo=l(),g6=a("li"),mce=a("strong"),PBo=o("mobilebert"),$Bo=o(" \u2014 "),Kj=a("a"),IBo=o("MobileBertForTokenClassification"),qBo=o(" (MobileBERT model)"),NBo=l(),h6=a("li"),gce=a("strong"),jBo=o("mpnet"),DBo=o(" \u2014 "),Zj=a("a"),GBo=o("MPNetForTokenClassification"),OBo=o(" (MPNet model)"),VBo=l(),p6=a("li"),hce=a("strong"),XBo=o("nystromformer"),zBo=o(" \u2014 "),eD=a("a"),QBo=o("NystromformerForTokenClassification"),WBo=o(" (Nystromformer model)"),HBo=l(),_6=a("li"),pce=a("strong"),UBo=o("qdqbert"),JBo=o(" \u2014 "),oD=a("a"),YBo=o("QDQBertForTokenClassification"),KBo=o(" (QDQBert model)"),ZBo=l(),u6=a("li"),_ce=a("strong"),ePo=o("rembert"),oPo=o(" \u2014 "),rD=a("a"),rPo=o("RemBertForTokenClassification"),tPo=o(" (RemBERT model)"),aPo=l(),b6=a("li"),uce=a("strong"),nPo=o("roberta"),sPo=o(" \u2014 "),tD=a("a"),lPo=o("RobertaForTokenClassification"),iPo=o(" (RoBERTa model)"),dPo=l(),F6=a("li"),bce=a("strong"),cPo=o("roformer"),fPo=o(" \u2014 "),aD=a("a"),mPo=o("RoFormerForTokenClassification"),gPo=o(" (RoFormer model)"),hPo=l(),v6=a("li"),Fce=a("strong"),pPo=o("squeezebert"),_Po=o(" \u2014 "),nD=a("a"),uPo=o("SqueezeBertForTokenClassification"),bPo=o(" (SqueezeBERT model)"),FPo=l(),T6=a("li"),vce=a("strong"),vPo=o("xlm"),TPo=o(" \u2014 "),sD=a("a"),MPo=o("XLMForTokenClassification"),EPo=o(" (XLM model)"),CPo=l(),M6=a("li"),Tce=a("strong"),wPo=o("xlm-roberta"),APo=o(" \u2014 "),lD=a("a"),yPo=o("XLMRobertaForTokenClassification"),LPo=o(" (XLM-RoBERTa model)"),xPo=l(),E6=a("li"),Mce=a("strong"),kPo=o("xlm-roberta-xl"),SPo=o(" \u2014 "),iD=a("a"),RPo=o("XLMRobertaXLForTokenClassification"),BPo=o(" (XLM-RoBERTa-XL model)"),PPo=l(),C6=a("li"),Ece=a("strong"),$Po=o("xlnet"),IPo=o(" \u2014 "),dD=a("a"),qPo=o("XLNetForTokenClassification"),NPo=o(" (XLNet model)"),jPo=l(),w6=a("li"),Cce=a("strong"),DPo=o("yoso"),GPo=o(" \u2014 "),cD=a("a"),OPo=o("YosoForTokenClassification"),VPo=o(" (YOSO model)"),XPo=l(),A6=a("p"),zPo=o("The model is set in evaluation mode by default using "),wce=a("code"),QPo=o("model.eval()"),WPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=a("code"),HPo=o("model.train()"),UPo=l(),yce=a("p"),JPo=o("Examples:"),YPo=l(),f(CC.$$.fragment),OBe=l(),Ad=a("h2"),y6=a("a"),Lce=a("span"),f(wC.$$.fragment),KPo=l(),xce=a("span"),ZPo=o("AutoModelForQuestionAnswering"),VBe=l(),nr=a("div"),f(AC.$$.fragment),e$o=l(),yd=a("p"),o$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fD=a("a"),r$o=o("from_pretrained()"),t$o=o(" class method or the "),mD=a("a"),a$o=o("from_config()"),n$o=o(` class
method.`),s$o=l(),yC=a("p"),l$o=o("This class cannot be instantiated directly using "),kce=a("code"),i$o=o("__init__()"),d$o=o(" (throws an error)."),c$o=l(),Zr=a("div"),f(LC.$$.fragment),f$o=l(),Sce=a("p"),m$o=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g$o=l(),Ld=a("p"),h$o=o(`Note:
Loading a model from its configuration file does `),Rce=a("strong"),p$o=o("not"),_$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=a("a"),u$o=o("from_pretrained()"),b$o=o(" to load the model weights."),F$o=l(),Bce=a("p"),v$o=o("Examples:"),T$o=l(),f(xC.$$.fragment),M$o=l(),We=a("div"),f(kC.$$.fragment),E$o=l(),Pce=a("p"),C$o=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),w$o=l(),Za=a("p"),A$o=o("The model class to instantiate is selected based on the "),$ce=a("code"),y$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),Ice=a("code"),x$o=o("pretrained_model_name_or_path"),k$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=a("code"),S$o=o("pretrained_model_name_or_path"),R$o=o(":"),B$o=l(),R=a("ul"),L6=a("li"),Nce=a("strong"),P$o=o("albert"),$$o=o(" \u2014 "),hD=a("a"),I$o=o("AlbertForQuestionAnswering"),q$o=o(" (ALBERT model)"),N$o=l(),x6=a("li"),jce=a("strong"),j$o=o("bart"),D$o=o(" \u2014 "),pD=a("a"),G$o=o("BartForQuestionAnswering"),O$o=o(" (BART model)"),V$o=l(),k6=a("li"),Dce=a("strong"),X$o=o("bert"),z$o=o(" \u2014 "),_D=a("a"),Q$o=o("BertForQuestionAnswering"),W$o=o(" (BERT model)"),H$o=l(),S6=a("li"),Gce=a("strong"),U$o=o("big_bird"),J$o=o(" \u2014 "),uD=a("a"),Y$o=o("BigBirdForQuestionAnswering"),K$o=o(" (BigBird model)"),Z$o=l(),R6=a("li"),Oce=a("strong"),eIo=o("bigbird_pegasus"),oIo=o(" \u2014 "),bD=a("a"),rIo=o("BigBirdPegasusForQuestionAnswering"),tIo=o(" (BigBirdPegasus model)"),aIo=l(),B6=a("li"),Vce=a("strong"),nIo=o("camembert"),sIo=o(" \u2014 "),FD=a("a"),lIo=o("CamembertForQuestionAnswering"),iIo=o(" (CamemBERT model)"),dIo=l(),P6=a("li"),Xce=a("strong"),cIo=o("canine"),fIo=o(" \u2014 "),vD=a("a"),mIo=o("CanineForQuestionAnswering"),gIo=o(" (Canine model)"),hIo=l(),$6=a("li"),zce=a("strong"),pIo=o("convbert"),_Io=o(" \u2014 "),TD=a("a"),uIo=o("ConvBertForQuestionAnswering"),bIo=o(" (ConvBERT model)"),FIo=l(),I6=a("li"),Qce=a("strong"),vIo=o("data2vec-text"),TIo=o(" \u2014 "),MD=a("a"),MIo=o("Data2VecTextForQuestionAnswering"),EIo=o(" (Data2VecText model)"),CIo=l(),q6=a("li"),Wce=a("strong"),wIo=o("deberta"),AIo=o(" \u2014 "),ED=a("a"),yIo=o("DebertaForQuestionAnswering"),LIo=o(" (DeBERTa model)"),xIo=l(),N6=a("li"),Hce=a("strong"),kIo=o("deberta-v2"),SIo=o(" \u2014 "),CD=a("a"),RIo=o("DebertaV2ForQuestionAnswering"),BIo=o(" (DeBERTa-v2 model)"),PIo=l(),j6=a("li"),Uce=a("strong"),$Io=o("distilbert"),IIo=o(" \u2014 "),wD=a("a"),qIo=o("DistilBertForQuestionAnswering"),NIo=o(" (DistilBERT model)"),jIo=l(),D6=a("li"),Jce=a("strong"),DIo=o("electra"),GIo=o(" \u2014 "),AD=a("a"),OIo=o("ElectraForQuestionAnswering"),VIo=o(" (ELECTRA model)"),XIo=l(),G6=a("li"),Yce=a("strong"),zIo=o("flaubert"),QIo=o(" \u2014 "),yD=a("a"),WIo=o("FlaubertForQuestionAnsweringSimple"),HIo=o(" (FlauBERT model)"),UIo=l(),O6=a("li"),Kce=a("strong"),JIo=o("fnet"),YIo=o(" \u2014 "),LD=a("a"),KIo=o("FNetForQuestionAnswering"),ZIo=o(" (FNet model)"),eqo=l(),V6=a("li"),Zce=a("strong"),oqo=o("funnel"),rqo=o(" \u2014 "),xD=a("a"),tqo=o("FunnelForQuestionAnswering"),aqo=o(" (Funnel Transformer model)"),nqo=l(),X6=a("li"),efe=a("strong"),sqo=o("gptj"),lqo=o(" \u2014 "),kD=a("a"),iqo=o("GPTJForQuestionAnswering"),dqo=o(" (GPT-J model)"),cqo=l(),z6=a("li"),ofe=a("strong"),fqo=o("ibert"),mqo=o(" \u2014 "),SD=a("a"),gqo=o("IBertForQuestionAnswering"),hqo=o(" (I-BERT model)"),pqo=l(),Q6=a("li"),rfe=a("strong"),_qo=o("layoutlmv2"),uqo=o(" \u2014 "),RD=a("a"),bqo=o("LayoutLMv2ForQuestionAnswering"),Fqo=o(" (LayoutLMv2 model)"),vqo=l(),W6=a("li"),tfe=a("strong"),Tqo=o("led"),Mqo=o(" \u2014 "),BD=a("a"),Eqo=o("LEDForQuestionAnswering"),Cqo=o(" (LED model)"),wqo=l(),H6=a("li"),afe=a("strong"),Aqo=o("longformer"),yqo=o(" \u2014 "),PD=a("a"),Lqo=o("LongformerForQuestionAnswering"),xqo=o(" (Longformer model)"),kqo=l(),U6=a("li"),nfe=a("strong"),Sqo=o("lxmert"),Rqo=o(" \u2014 "),$D=a("a"),Bqo=o("LxmertForQuestionAnswering"),Pqo=o(" (LXMERT model)"),$qo=l(),J6=a("li"),sfe=a("strong"),Iqo=o("mbart"),qqo=o(" \u2014 "),ID=a("a"),Nqo=o("MBartForQuestionAnswering"),jqo=o(" (mBART model)"),Dqo=l(),Y6=a("li"),lfe=a("strong"),Gqo=o("megatron-bert"),Oqo=o(" \u2014 "),qD=a("a"),Vqo=o("MegatronBertForQuestionAnswering"),Xqo=o(" (MegatronBert model)"),zqo=l(),K6=a("li"),ife=a("strong"),Qqo=o("mobilebert"),Wqo=o(" \u2014 "),ND=a("a"),Hqo=o("MobileBertForQuestionAnswering"),Uqo=o(" (MobileBERT model)"),Jqo=l(),Z6=a("li"),dfe=a("strong"),Yqo=o("mpnet"),Kqo=o(" \u2014 "),jD=a("a"),Zqo=o("MPNetForQuestionAnswering"),eNo=o(" (MPNet model)"),oNo=l(),eF=a("li"),cfe=a("strong"),rNo=o("nystromformer"),tNo=o(" \u2014 "),DD=a("a"),aNo=o("NystromformerForQuestionAnswering"),nNo=o(" (Nystromformer model)"),sNo=l(),oF=a("li"),ffe=a("strong"),lNo=o("qdqbert"),iNo=o(" \u2014 "),GD=a("a"),dNo=o("QDQBertForQuestionAnswering"),cNo=o(" (QDQBert model)"),fNo=l(),rF=a("li"),mfe=a("strong"),mNo=o("reformer"),gNo=o(" \u2014 "),OD=a("a"),hNo=o("ReformerForQuestionAnswering"),pNo=o(" (Reformer model)"),_No=l(),tF=a("li"),gfe=a("strong"),uNo=o("rembert"),bNo=o(" \u2014 "),VD=a("a"),FNo=o("RemBertForQuestionAnswering"),vNo=o(" (RemBERT model)"),TNo=l(),aF=a("li"),hfe=a("strong"),MNo=o("roberta"),ENo=o(" \u2014 "),XD=a("a"),CNo=o("RobertaForQuestionAnswering"),wNo=o(" (RoBERTa model)"),ANo=l(),nF=a("li"),pfe=a("strong"),yNo=o("roformer"),LNo=o(" \u2014 "),zD=a("a"),xNo=o("RoFormerForQuestionAnswering"),kNo=o(" (RoFormer model)"),SNo=l(),sF=a("li"),_fe=a("strong"),RNo=o("splinter"),BNo=o(" \u2014 "),QD=a("a"),PNo=o("SplinterForQuestionAnswering"),$No=o(" (Splinter model)"),INo=l(),lF=a("li"),ufe=a("strong"),qNo=o("squeezebert"),NNo=o(" \u2014 "),WD=a("a"),jNo=o("SqueezeBertForQuestionAnswering"),DNo=o(" (SqueezeBERT model)"),GNo=l(),iF=a("li"),bfe=a("strong"),ONo=o("xlm"),VNo=o(" \u2014 "),HD=a("a"),XNo=o("XLMForQuestionAnsweringSimple"),zNo=o(" (XLM model)"),QNo=l(),dF=a("li"),Ffe=a("strong"),WNo=o("xlm-roberta"),HNo=o(" \u2014 "),UD=a("a"),UNo=o("XLMRobertaForQuestionAnswering"),JNo=o(" (XLM-RoBERTa model)"),YNo=l(),cF=a("li"),vfe=a("strong"),KNo=o("xlm-roberta-xl"),ZNo=o(" \u2014 "),JD=a("a"),ejo=o("XLMRobertaXLForQuestionAnswering"),ojo=o(" (XLM-RoBERTa-XL model)"),rjo=l(),fF=a("li"),Tfe=a("strong"),tjo=o("xlnet"),ajo=o(" \u2014 "),YD=a("a"),njo=o("XLNetForQuestionAnsweringSimple"),sjo=o(" (XLNet model)"),ljo=l(),mF=a("li"),Mfe=a("strong"),ijo=o("yoso"),djo=o(" \u2014 "),KD=a("a"),cjo=o("YosoForQuestionAnswering"),fjo=o(" (YOSO model)"),mjo=l(),gF=a("p"),gjo=o("The model is set in evaluation mode by default using "),Efe=a("code"),hjo=o("model.eval()"),pjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),_jo=o("model.train()"),ujo=l(),wfe=a("p"),bjo=o("Examples:"),Fjo=l(),f(SC.$$.fragment),XBe=l(),xd=a("h2"),hF=a("a"),Afe=a("span"),f(RC.$$.fragment),vjo=l(),yfe=a("span"),Tjo=o("AutoModelForTableQuestionAnswering"),zBe=l(),sr=a("div"),f(BC.$$.fragment),Mjo=l(),kd=a("p"),Ejo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZD=a("a"),Cjo=o("from_pretrained()"),wjo=o(" class method or the "),eG=a("a"),Ajo=o("from_config()"),yjo=o(` class
method.`),Ljo=l(),PC=a("p"),xjo=o("This class cannot be instantiated directly using "),Lfe=a("code"),kjo=o("__init__()"),Sjo=o(" (throws an error)."),Rjo=l(),et=a("div"),f($C.$$.fragment),Bjo=l(),xfe=a("p"),Pjo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),$jo=l(),Sd=a("p"),Ijo=o(`Note:
Loading a model from its configuration file does `),kfe=a("strong"),qjo=o("not"),Njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=a("a"),jjo=o("from_pretrained()"),Djo=o(" to load the model weights."),Gjo=l(),Sfe=a("p"),Ojo=o("Examples:"),Vjo=l(),f(IC.$$.fragment),Xjo=l(),He=a("div"),f(qC.$$.fragment),zjo=l(),Rfe=a("p"),Qjo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wjo=l(),en=a("p"),Hjo=o("The model class to instantiate is selected based on the "),Bfe=a("code"),Ujo=o("model_type"),Jjo=o(` property of the config object (either
passed as an argument or loaded from `),Pfe=a("code"),Yjo=o("pretrained_model_name_or_path"),Kjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=a("code"),Zjo=o("pretrained_model_name_or_path"),eDo=o(":"),oDo=l(),Ife=a("ul"),pF=a("li"),qfe=a("strong"),rDo=o("tapas"),tDo=o(" \u2014 "),rG=a("a"),aDo=o("TapasForQuestionAnswering"),nDo=o(" (TAPAS model)"),sDo=l(),_F=a("p"),lDo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),iDo=o("model.eval()"),dDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),cDo=o("model.train()"),fDo=l(),Dfe=a("p"),mDo=o("Examples:"),gDo=l(),f(NC.$$.fragment),QBe=l(),Rd=a("h2"),uF=a("a"),Gfe=a("span"),f(jC.$$.fragment),hDo=l(),Ofe=a("span"),pDo=o("AutoModelForImageClassification"),WBe=l(),lr=a("div"),f(DC.$$.fragment),_Do=l(),Bd=a("p"),uDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tG=a("a"),bDo=o("from_pretrained()"),FDo=o(" class method or the "),aG=a("a"),vDo=o("from_config()"),TDo=o(` class
method.`),MDo=l(),GC=a("p"),EDo=o("This class cannot be instantiated directly using "),Vfe=a("code"),CDo=o("__init__()"),wDo=o(" (throws an error)."),ADo=l(),ot=a("div"),f(OC.$$.fragment),yDo=l(),Xfe=a("p"),LDo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xDo=l(),Pd=a("p"),kDo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),SDo=o("not"),RDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),BDo=o("from_pretrained()"),PDo=o(" to load the model weights."),$Do=l(),Qfe=a("p"),IDo=o("Examples:"),qDo=l(),f(VC.$$.fragment),NDo=l(),Ue=a("div"),f(XC.$$.fragment),jDo=l(),Wfe=a("p"),DDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GDo=l(),on=a("p"),ODo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),VDo=o("model_type"),XDo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),zDo=o("pretrained_model_name_or_path"),QDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),WDo=o("pretrained_model_name_or_path"),HDo=o(":"),UDo=l(),de=a("ul"),bF=a("li"),Yfe=a("strong"),JDo=o("beit"),YDo=o(" \u2014 "),sG=a("a"),KDo=o("BeitForImageClassification"),ZDo=o(" (BEiT model)"),eGo=l(),FF=a("li"),Kfe=a("strong"),oGo=o("convnext"),rGo=o(" \u2014 "),lG=a("a"),tGo=o("ConvNextForImageClassification"),aGo=o(" (ConvNext model)"),nGo=l(),vF=a("li"),Zfe=a("strong"),sGo=o("data2vec-vision"),lGo=o(" \u2014 "),iG=a("a"),iGo=o("Data2VecVisionForImageClassification"),dGo=o(" (Data2VecVision model)"),cGo=l(),Vs=a("li"),eme=a("strong"),fGo=o("deit"),mGo=o(" \u2014 "),dG=a("a"),gGo=o("DeiTForImageClassification"),hGo=o(" or "),cG=a("a"),pGo=o("DeiTForImageClassificationWithTeacher"),_Go=o(" (DeiT model)"),uGo=l(),TF=a("li"),ome=a("strong"),bGo=o("imagegpt"),FGo=o(" \u2014 "),fG=a("a"),vGo=o("ImageGPTForImageClassification"),TGo=o(" (ImageGPT model)"),MGo=l(),ma=a("li"),rme=a("strong"),EGo=o("perceiver"),CGo=o(" \u2014 "),mG=a("a"),wGo=o("PerceiverForImageClassificationLearned"),AGo=o(" or "),gG=a("a"),yGo=o("PerceiverForImageClassificationFourier"),LGo=o(" or "),hG=a("a"),xGo=o("PerceiverForImageClassificationConvProcessing"),kGo=o(" (Perceiver model)"),SGo=l(),MF=a("li"),tme=a("strong"),RGo=o("poolformer"),BGo=o(" \u2014 "),pG=a("a"),PGo=o("PoolFormerForImageClassification"),$Go=o(" (PoolFormer model)"),IGo=l(),EF=a("li"),ame=a("strong"),qGo=o("regnet"),NGo=o(" \u2014 "),_G=a("a"),jGo=o("RegNetForImageClassification"),DGo=o(" (RegNet model)"),GGo=l(),CF=a("li"),nme=a("strong"),OGo=o("resnet"),VGo=o(" \u2014 "),uG=a("a"),XGo=o("ResNetForImageClassification"),zGo=o(" (ResNet model)"),QGo=l(),wF=a("li"),sme=a("strong"),WGo=o("segformer"),HGo=o(" \u2014 "),bG=a("a"),UGo=o("SegformerForImageClassification"),JGo=o(" (SegFormer model)"),YGo=l(),AF=a("li"),lme=a("strong"),KGo=o("swin"),ZGo=o(" \u2014 "),FG=a("a"),eOo=o("SwinForImageClassification"),oOo=o(" (Swin model)"),rOo=l(),yF=a("li"),ime=a("strong"),tOo=o("van"),aOo=o(" \u2014 "),vG=a("a"),nOo=o("VanForImageClassification"),sOo=o(" (VAN model)"),lOo=l(),LF=a("li"),dme=a("strong"),iOo=o("vit"),dOo=o(" \u2014 "),TG=a("a"),cOo=o("ViTForImageClassification"),fOo=o(" (ViT model)"),mOo=l(),xF=a("p"),gOo=o("The model is set in evaluation mode by default using "),cme=a("code"),hOo=o("model.eval()"),pOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),_Oo=o("model.train()"),uOo=l(),mme=a("p"),bOo=o("Examples:"),FOo=l(),f(zC.$$.fragment),HBe=l(),$d=a("h2"),kF=a("a"),gme=a("span"),f(QC.$$.fragment),vOo=l(),hme=a("span"),TOo=o("AutoModelForVision2Seq"),UBe=l(),ir=a("div"),f(WC.$$.fragment),MOo=l(),Id=a("p"),EOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MG=a("a"),COo=o("from_pretrained()"),wOo=o(" class method or the "),EG=a("a"),AOo=o("from_config()"),yOo=o(` class
method.`),LOo=l(),HC=a("p"),xOo=o("This class cannot be instantiated directly using "),pme=a("code"),kOo=o("__init__()"),SOo=o(" (throws an error)."),ROo=l(),rt=a("div"),f(UC.$$.fragment),BOo=l(),_me=a("p"),POo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$Oo=l(),qd=a("p"),IOo=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),qOo=o("not"),NOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),jOo=o("from_pretrained()"),DOo=o(" to load the model weights."),GOo=l(),bme=a("p"),OOo=o("Examples:"),VOo=l(),f(JC.$$.fragment),XOo=l(),Je=a("div"),f(YC.$$.fragment),zOo=l(),Fme=a("p"),QOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),WOo=l(),rn=a("p"),HOo=o("The model class to instantiate is selected based on the "),vme=a("code"),UOo=o("model_type"),JOo=o(` property of the config object (either
passed as an argument or loaded from `),Tme=a("code"),YOo=o("pretrained_model_name_or_path"),KOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=a("code"),ZOo=o("pretrained_model_name_or_path"),eVo=o(":"),oVo=l(),Eme=a("ul"),SF=a("li"),Cme=a("strong"),rVo=o("vision-encoder-decoder"),tVo=o(" \u2014 "),wG=a("a"),aVo=o("VisionEncoderDecoderModel"),nVo=o(" (Vision Encoder decoder model)"),sVo=l(),RF=a("p"),lVo=o("The model is set in evaluation mode by default using "),wme=a("code"),iVo=o("model.eval()"),dVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=a("code"),cVo=o("model.train()"),fVo=l(),yme=a("p"),mVo=o("Examples:"),gVo=l(),f(KC.$$.fragment),JBe=l(),Nd=a("h2"),BF=a("a"),Lme=a("span"),f(ZC.$$.fragment),hVo=l(),xme=a("span"),pVo=o("AutoModelForAudioClassification"),YBe=l(),dr=a("div"),f(ew.$$.fragment),_Vo=l(),jd=a("p"),uVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AG=a("a"),bVo=o("from_pretrained()"),FVo=o(" class method or the "),yG=a("a"),vVo=o("from_config()"),TVo=o(` class
method.`),MVo=l(),ow=a("p"),EVo=o("This class cannot be instantiated directly using "),kme=a("code"),CVo=o("__init__()"),wVo=o(" (throws an error)."),AVo=l(),tt=a("div"),f(rw.$$.fragment),yVo=l(),Sme=a("p"),LVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),xVo=l(),Dd=a("p"),kVo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),SVo=o("not"),RVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),BVo=o("from_pretrained()"),PVo=o(" to load the model weights."),$Vo=l(),Bme=a("p"),IVo=o("Examples:"),qVo=l(),f(tw.$$.fragment),NVo=l(),Ye=a("div"),f(aw.$$.fragment),jVo=l(),Pme=a("p"),DVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),GVo=l(),tn=a("p"),OVo=o("The model class to instantiate is selected based on the "),$me=a("code"),VVo=o("model_type"),XVo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),zVo=o("pretrained_model_name_or_path"),QVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),WVo=o("pretrained_model_name_or_path"),HVo=o(":"),UVo=l(),Re=a("ul"),PF=a("li"),Nme=a("strong"),JVo=o("data2vec-audio"),YVo=o(" \u2014 "),xG=a("a"),KVo=o("Data2VecAudioForSequenceClassification"),ZVo=o(" (Data2VecAudio model)"),eXo=l(),$F=a("li"),jme=a("strong"),oXo=o("hubert"),rXo=o(" \u2014 "),kG=a("a"),tXo=o("HubertForSequenceClassification"),aXo=o(" (Hubert model)"),nXo=l(),IF=a("li"),Dme=a("strong"),sXo=o("sew"),lXo=o(" \u2014 "),SG=a("a"),iXo=o("SEWForSequenceClassification"),dXo=o(" (SEW model)"),cXo=l(),qF=a("li"),Gme=a("strong"),fXo=o("sew-d"),mXo=o(" \u2014 "),RG=a("a"),gXo=o("SEWDForSequenceClassification"),hXo=o(" (SEW-D model)"),pXo=l(),NF=a("li"),Ome=a("strong"),_Xo=o("unispeech"),uXo=o(" \u2014 "),BG=a("a"),bXo=o("UniSpeechForSequenceClassification"),FXo=o(" (UniSpeech model)"),vXo=l(),jF=a("li"),Vme=a("strong"),TXo=o("unispeech-sat"),MXo=o(" \u2014 "),PG=a("a"),EXo=o("UniSpeechSatForSequenceClassification"),CXo=o(" (UniSpeechSat model)"),wXo=l(),DF=a("li"),Xme=a("strong"),AXo=o("wav2vec2"),yXo=o(" \u2014 "),$G=a("a"),LXo=o("Wav2Vec2ForSequenceClassification"),xXo=o(" (Wav2Vec2 model)"),kXo=l(),GF=a("li"),zme=a("strong"),SXo=o("wavlm"),RXo=o(" \u2014 "),IG=a("a"),BXo=o("WavLMForSequenceClassification"),PXo=o(" (WavLM model)"),$Xo=l(),OF=a("p"),IXo=o("The model is set in evaluation mode by default using "),Qme=a("code"),qXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=a("code"),jXo=o("model.train()"),DXo=l(),Hme=a("p"),GXo=o("Examples:"),OXo=l(),f(nw.$$.fragment),KBe=l(),Gd=a("h2"),VF=a("a"),Ume=a("span"),f(sw.$$.fragment),VXo=l(),Jme=a("span"),XXo=o("AutoModelForAudioFrameClassification"),ZBe=l(),cr=a("div"),f(lw.$$.fragment),zXo=l(),Od=a("p"),QXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),qG=a("a"),WXo=o("from_pretrained()"),HXo=o(" class method or the "),NG=a("a"),UXo=o("from_config()"),JXo=o(` class
method.`),YXo=l(),iw=a("p"),KXo=o("This class cannot be instantiated directly using "),Yme=a("code"),ZXo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),at=a("div"),f(dw.$$.fragment),rzo=l(),Kme=a("p"),tzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),azo=l(),Vd=a("p"),nzo=o(`Note:
Loading a model from its configuration file does `),Zme=a("strong"),szo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),izo=o("from_pretrained()"),dzo=o(" to load the model weights."),czo=l(),ege=a("p"),fzo=o("Examples:"),mzo=l(),f(cw.$$.fragment),gzo=l(),Ke=a("div"),f(fw.$$.fragment),hzo=l(),oge=a("p"),pzo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),_zo=l(),an=a("p"),uzo=o("The model class to instantiate is selected based on the "),rge=a("code"),bzo=o("model_type"),Fzo=o(` property of the config object (either
passed as an argument or loaded from `),tge=a("code"),vzo=o("pretrained_model_name_or_path"),Tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(":"),Czo=l(),nn=a("ul"),XF=a("li"),nge=a("strong"),wzo=o("data2vec-audio"),Azo=o(" \u2014 "),DG=a("a"),yzo=o("Data2VecAudioForAudioFrameClassification"),Lzo=o(" (Data2VecAudio model)"),xzo=l(),zF=a("li"),sge=a("strong"),kzo=o("unispeech-sat"),Szo=o(" \u2014 "),GG=a("a"),Rzo=o("UniSpeechSatForAudioFrameClassification"),Bzo=o(" (UniSpeechSat model)"),Pzo=l(),QF=a("li"),lge=a("strong"),$zo=o("wav2vec2"),Izo=o(" \u2014 "),OG=a("a"),qzo=o("Wav2Vec2ForAudioFrameClassification"),Nzo=o(" (Wav2Vec2 model)"),jzo=l(),WF=a("li"),ige=a("strong"),Dzo=o("wavlm"),Gzo=o(" \u2014 "),VG=a("a"),Ozo=o("WavLMForAudioFrameClassification"),Vzo=o(" (WavLM model)"),Xzo=l(),HF=a("p"),zzo=o("The model is set in evaluation mode by default using "),dge=a("code"),Qzo=o("model.eval()"),Wzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=a("code"),Hzo=o("model.train()"),Uzo=l(),fge=a("p"),Jzo=o("Examples:"),Yzo=l(),f(mw.$$.fragment),ePe=l(),Xd=a("h2"),UF=a("a"),mge=a("span"),f(gw.$$.fragment),Kzo=l(),gge=a("span"),Zzo=o("AutoModelForCTC"),oPe=l(),fr=a("div"),f(hw.$$.fragment),eQo=l(),zd=a("p"),oQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XG=a("a"),rQo=o("from_pretrained()"),tQo=o(" class method or the "),zG=a("a"),aQo=o("from_config()"),nQo=o(` class
method.`),sQo=l(),pw=a("p"),lQo=o("This class cannot be instantiated directly using "),hge=a("code"),iQo=o("__init__()"),dQo=o(" (throws an error)."),cQo=l(),nt=a("div"),f(_w.$$.fragment),fQo=l(),pge=a("p"),mQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gQo=l(),Qd=a("p"),hQo=o(`Note:
Loading a model from its configuration file does `),_ge=a("strong"),pQo=o("not"),_Qo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),uQo=o("from_pretrained()"),bQo=o(" to load the model weights."),FQo=l(),uge=a("p"),vQo=o("Examples:"),TQo=l(),f(uw.$$.fragment),MQo=l(),Ze=a("div"),f(bw.$$.fragment),EQo=l(),bge=a("p"),CQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),wQo=l(),sn=a("p"),AQo=o("The model class to instantiate is selected based on the "),Fge=a("code"),yQo=o("model_type"),LQo=o(` property of the config object (either
passed as an argument or loaded from `),vge=a("code"),xQo=o("pretrained_model_name_or_path"),kQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=a("code"),SQo=o("pretrained_model_name_or_path"),RQo=o(":"),BQo=l(),Be=a("ul"),JF=a("li"),Mge=a("strong"),PQo=o("data2vec-audio"),$Qo=o(" \u2014 "),WG=a("a"),IQo=o("Data2VecAudioForCTC"),qQo=o(" (Data2VecAudio model)"),NQo=l(),YF=a("li"),Ege=a("strong"),jQo=o("hubert"),DQo=o(" \u2014 "),HG=a("a"),GQo=o("HubertForCTC"),OQo=o(" (Hubert model)"),VQo=l(),KF=a("li"),Cge=a("strong"),XQo=o("sew"),zQo=o(" \u2014 "),UG=a("a"),QQo=o("SEWForCTC"),WQo=o(" (SEW model)"),HQo=l(),ZF=a("li"),wge=a("strong"),UQo=o("sew-d"),JQo=o(" \u2014 "),JG=a("a"),YQo=o("SEWDForCTC"),KQo=o(" (SEW-D model)"),ZQo=l(),ev=a("li"),Age=a("strong"),eWo=o("unispeech"),oWo=o(" \u2014 "),YG=a("a"),rWo=o("UniSpeechForCTC"),tWo=o(" (UniSpeech model)"),aWo=l(),ov=a("li"),yge=a("strong"),nWo=o("unispeech-sat"),sWo=o(" \u2014 "),KG=a("a"),lWo=o("UniSpeechSatForCTC"),iWo=o(" (UniSpeechSat model)"),dWo=l(),rv=a("li"),Lge=a("strong"),cWo=o("wav2vec2"),fWo=o(" \u2014 "),ZG=a("a"),mWo=o("Wav2Vec2ForCTC"),gWo=o(" (Wav2Vec2 model)"),hWo=l(),tv=a("li"),xge=a("strong"),pWo=o("wavlm"),_Wo=o(" \u2014 "),eO=a("a"),uWo=o("WavLMForCTC"),bWo=o(" (WavLM model)"),FWo=l(),av=a("p"),vWo=o("The model is set in evaluation mode by default using "),kge=a("code"),TWo=o("model.eval()"),MWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=a("code"),EWo=o("model.train()"),CWo=l(),Rge=a("p"),wWo=o("Examples:"),AWo=l(),f(Fw.$$.fragment),rPe=l(),Wd=a("h2"),nv=a("a"),Bge=a("span"),f(vw.$$.fragment),yWo=l(),Pge=a("span"),LWo=o("AutoModelForSpeechSeq2Seq"),tPe=l(),mr=a("div"),f(Tw.$$.fragment),xWo=l(),Hd=a("p"),kWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oO=a("a"),SWo=o("from_pretrained()"),RWo=o(" class method or the "),rO=a("a"),BWo=o("from_config()"),PWo=o(` class
method.`),$Wo=l(),Mw=a("p"),IWo=o("This class cannot be instantiated directly using "),$ge=a("code"),qWo=o("__init__()"),NWo=o(" (throws an error)."),jWo=l(),st=a("div"),f(Ew.$$.fragment),DWo=l(),Ige=a("p"),GWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),OWo=l(),Ud=a("p"),VWo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),XWo=o("not"),zWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=a("a"),QWo=o("from_pretrained()"),WWo=o(" to load the model weights."),HWo=l(),Nge=a("p"),UWo=o("Examples:"),JWo=l(),f(Cw.$$.fragment),YWo=l(),eo=a("div"),f(ww.$$.fragment),KWo=l(),jge=a("p"),ZWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eHo=l(),ln=a("p"),oHo=o("The model class to instantiate is selected based on the "),Dge=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),Aw=a("ul"),sv=a("li"),Vge=a("strong"),dHo=o("speech-encoder-decoder"),cHo=o(" \u2014 "),aO=a("a"),fHo=o("SpeechEncoderDecoderModel"),mHo=o(" (Speech Encoder decoder model)"),gHo=l(),lv=a("li"),Xge=a("strong"),hHo=o("speech_to_text"),pHo=o(" \u2014 "),nO=a("a"),_Ho=o("Speech2TextForConditionalGeneration"),uHo=o(" (Speech2Text model)"),bHo=l(),iv=a("p"),FHo=o("The model is set in evaluation mode by default using "),zge=a("code"),vHo=o("model.eval()"),THo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=a("code"),MHo=o("model.train()"),EHo=l(),Wge=a("p"),CHo=o("Examples:"),wHo=l(),f(yw.$$.fragment),aPe=l(),Jd=a("h2"),dv=a("a"),Hge=a("span"),f(Lw.$$.fragment),AHo=l(),Uge=a("span"),yHo=o("AutoModelForAudioXVector"),nPe=l(),gr=a("div"),f(xw.$$.fragment),LHo=l(),Yd=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sO=a("a"),kHo=o("from_pretrained()"),SHo=o(" class method or the "),lO=a("a"),RHo=o("from_config()"),BHo=o(` class
method.`),PHo=l(),kw=a("p"),$Ho=o("This class cannot be instantiated directly using "),Jge=a("code"),IHo=o("__init__()"),qHo=o(" (throws an error)."),NHo=l(),lt=a("div"),f(Sw.$$.fragment),jHo=l(),Yge=a("p"),DHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),GHo=l(),Kd=a("p"),OHo=o(`Note:
Loading a model from its configuration file does `),Kge=a("strong"),VHo=o("not"),XHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),zHo=o("from_pretrained()"),QHo=o(" to load the model weights."),WHo=l(),Zge=a("p"),HHo=o("Examples:"),UHo=l(),f(Rw.$$.fragment),JHo=l(),oo=a("div"),f(Bw.$$.fragment),YHo=l(),ehe=a("p"),KHo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ZHo=l(),dn=a("p"),eUo=o("The model class to instantiate is selected based on the "),ohe=a("code"),oUo=o("model_type"),rUo=o(` property of the config object (either
passed as an argument or loaded from `),rhe=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(":"),lUo=l(),cn=a("ul"),cv=a("li"),ahe=a("strong"),iUo=o("data2vec-audio"),dUo=o(" \u2014 "),dO=a("a"),cUo=o("Data2VecAudioForXVector"),fUo=o(" (Data2VecAudio model)"),mUo=l(),fv=a("li"),nhe=a("strong"),gUo=o("unispeech-sat"),hUo=o(" \u2014 "),cO=a("a"),pUo=o("UniSpeechSatForXVector"),_Uo=o(" (UniSpeechSat model)"),uUo=l(),mv=a("li"),she=a("strong"),bUo=o("wav2vec2"),FUo=o(" \u2014 "),fO=a("a"),vUo=o("Wav2Vec2ForXVector"),TUo=o(" (Wav2Vec2 model)"),MUo=l(),gv=a("li"),lhe=a("strong"),EUo=o("wavlm"),CUo=o(" \u2014 "),mO=a("a"),wUo=o("WavLMForXVector"),AUo=o(" (WavLM model)"),yUo=l(),hv=a("p"),LUo=o("The model is set in evaluation mode by default using "),ihe=a("code"),xUo=o("model.eval()"),kUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),SUo=o("model.train()"),RUo=l(),che=a("p"),BUo=o("Examples:"),PUo=l(),f(Pw.$$.fragment),sPe=l(),Zd=a("h2"),pv=a("a"),fhe=a("span"),f($w.$$.fragment),$Uo=l(),mhe=a("span"),IUo=o("AutoModelForMaskedImageModeling"),lPe=l(),hr=a("div"),f(Iw.$$.fragment),qUo=l(),ec=a("p"),NUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gO=a("a"),jUo=o("from_pretrained()"),DUo=o(" class method or the "),hO=a("a"),GUo=o("from_config()"),OUo=o(` class
method.`),VUo=l(),qw=a("p"),XUo=o("This class cannot be instantiated directly using "),ghe=a("code"),zUo=o("__init__()"),QUo=o(" (throws an error)."),WUo=l(),it=a("div"),f(Nw.$$.fragment),HUo=l(),hhe=a("p"),UUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),JUo=l(),oc=a("p"),YUo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),KUo=o("not"),ZUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),eJo=o("from_pretrained()"),oJo=o(" to load the model weights."),rJo=l(),_he=a("p"),tJo=o("Examples:"),aJo=l(),f(jw.$$.fragment),nJo=l(),ro=a("div"),f(Dw.$$.fragment),sJo=l(),uhe=a("p"),lJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),iJo=l(),fn=a("p"),dJo=o("The model class to instantiate is selected based on the "),bhe=a("code"),cJo=o("model_type"),fJo=o(` property of the config object (either
passed as an argument or loaded from `),Fhe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=a("code"),hJo=o("pretrained_model_name_or_path"),pJo=o(":"),_Jo=l(),rc=a("ul"),_v=a("li"),The=a("strong"),uJo=o("deit"),bJo=o(" \u2014 "),_O=a("a"),FJo=o("DeiTForMaskedImageModeling"),vJo=o(" (DeiT model)"),TJo=l(),uv=a("li"),Mhe=a("strong"),MJo=o("swin"),EJo=o(" \u2014 "),uO=a("a"),CJo=o("SwinForMaskedImageModeling"),wJo=o(" (Swin model)"),AJo=l(),bv=a("li"),Ehe=a("strong"),yJo=o("vit"),LJo=o(" \u2014 "),bO=a("a"),xJo=o("ViTForMaskedImageModeling"),kJo=o(" (ViT model)"),SJo=l(),Fv=a("p"),RJo=o("The model is set in evaluation mode by default using "),Che=a("code"),BJo=o("model.eval()"),PJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=a("code"),$Jo=o("model.train()"),IJo=l(),Ahe=a("p"),qJo=o("Examples:"),NJo=l(),f(Gw.$$.fragment),iPe=l(),tc=a("h2"),vv=a("a"),yhe=a("span"),f(Ow.$$.fragment),jJo=l(),Lhe=a("span"),DJo=o("AutoModelForObjectDetection"),dPe=l(),pr=a("div"),f(Vw.$$.fragment),GJo=l(),ac=a("p"),OJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),FO=a("a"),VJo=o("from_pretrained()"),XJo=o(" class method or the "),vO=a("a"),zJo=o("from_config()"),QJo=o(` class
method.`),WJo=l(),Xw=a("p"),HJo=o("This class cannot be instantiated directly using "),xhe=a("code"),UJo=o("__init__()"),JJo=o(" (throws an error)."),YJo=l(),dt=a("div"),f(zw.$$.fragment),KJo=l(),khe=a("p"),ZJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),eYo=l(),nc=a("p"),oYo=o(`Note:
Loading a model from its configuration file does `),She=a("strong"),rYo=o("not"),tYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),aYo=o("from_pretrained()"),nYo=o(" to load the model weights."),sYo=l(),Rhe=a("p"),lYo=o("Examples:"),iYo=l(),f(Qw.$$.fragment),dYo=l(),to=a("div"),f(Ww.$$.fragment),cYo=l(),Bhe=a("p"),fYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mYo=l(),mn=a("p"),gYo=o("The model class to instantiate is selected based on the "),Phe=a("code"),hYo=o("model_type"),pYo=o(` property of the config object (either
passed as an argument or loaded from `),$he=a("code"),_Yo=o("pretrained_model_name_or_path"),uYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=a("code"),bYo=o("pretrained_model_name_or_path"),FYo=o(":"),vYo=l(),qhe=a("ul"),Tv=a("li"),Nhe=a("strong"),TYo=o("detr"),MYo=o(" \u2014 "),MO=a("a"),EYo=o("DetrForObjectDetection"),CYo=o(" (DETR model)"),wYo=l(),Mv=a("p"),AYo=o("The model is set in evaluation mode by default using "),jhe=a("code"),yYo=o("model.eval()"),LYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=a("code"),xYo=o("model.train()"),kYo=l(),Ghe=a("p"),SYo=o("Examples:"),RYo=l(),f(Hw.$$.fragment),cPe=l(),sc=a("h2"),Ev=a("a"),Ohe=a("span"),f(Uw.$$.fragment),BYo=l(),Vhe=a("span"),PYo=o("AutoModelForImageSegmentation"),fPe=l(),_r=a("div"),f(Jw.$$.fragment),$Yo=l(),lc=a("p"),IYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EO=a("a"),qYo=o("from_pretrained()"),NYo=o(" class method or the "),CO=a("a"),jYo=o("from_config()"),DYo=o(` class
method.`),GYo=l(),Yw=a("p"),OYo=o("This class cannot be instantiated directly using "),Xhe=a("code"),VYo=o("__init__()"),XYo=o(" (throws an error)."),zYo=l(),ct=a("div"),f(Kw.$$.fragment),QYo=l(),zhe=a("p"),WYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),HYo=l(),ic=a("p"),UYo=o(`Note:
Loading a model from its configuration file does `),Qhe=a("strong"),JYo=o("not"),YYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),KYo=o("from_pretrained()"),ZYo=o(" to load the model weights."),eKo=l(),Whe=a("p"),oKo=o("Examples:"),rKo=l(),f(Zw.$$.fragment),tKo=l(),ao=a("div"),f(eA.$$.fragment),aKo=l(),Hhe=a("p"),nKo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),sKo=l(),gn=a("p"),lKo=o("The model class to instantiate is selected based on the "),Uhe=a("code"),iKo=o("model_type"),dKo=o(` property of the config object (either
passed as an argument or loaded from `),Jhe=a("code"),cKo=o("pretrained_model_name_or_path"),fKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(":"),hKo=l(),Khe=a("ul"),Cv=a("li"),Zhe=a("strong"),pKo=o("detr"),_Ko=o(" \u2014 "),AO=a("a"),uKo=o("DetrForSegmentation"),bKo=o(" (DETR model)"),FKo=l(),wv=a("p"),vKo=o("The model is set in evaluation mode by default using "),epe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=a("code"),EKo=o("model.train()"),CKo=l(),rpe=a("p"),wKo=o("Examples:"),AKo=l(),f(oA.$$.fragment),mPe=l(),dc=a("h2"),Av=a("a"),tpe=a("span"),f(rA.$$.fragment),yKo=l(),ape=a("span"),LKo=o("AutoModelForSemanticSegmentation"),gPe=l(),ur=a("div"),f(tA.$$.fragment),xKo=l(),cc=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yO=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),LO=a("a"),BKo=o("from_config()"),PKo=o(` class
method.`),$Ko=l(),aA=a("p"),IKo=o("This class cannot be instantiated directly using "),npe=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),ft=a("div"),f(nA.$$.fragment),DKo=l(),spe=a("p"),GKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),OKo=l(),fc=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),ipe=a("p"),UKo=o("Examples:"),JKo=l(),f(sA.$$.fragment),YKo=l(),no=a("div"),f(lA.$$.fragment),KKo=l(),dpe=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eZo=l(),hn=a("p"),oZo=o("The model class to instantiate is selected based on the "),cpe=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),pn=a("ul"),yv=a("li"),gpe=a("strong"),dZo=o("beit"),cZo=o(" \u2014 "),kO=a("a"),fZo=o("BeitForSemanticSegmentation"),mZo=o(" (BEiT model)"),gZo=l(),Lv=a("li"),hpe=a("strong"),hZo=o("data2vec-vision"),pZo=o(" \u2014 "),SO=a("a"),_Zo=o("Data2VecVisionForSemanticSegmentation"),uZo=o(" (Data2VecVision model)"),bZo=l(),xv=a("li"),ppe=a("strong"),FZo=o("dpt"),vZo=o(" \u2014 "),RO=a("a"),TZo=o("DPTForSemanticSegmentation"),MZo=o(" (DPT model)"),EZo=l(),kv=a("li"),_pe=a("strong"),CZo=o("segformer"),wZo=o(" \u2014 "),BO=a("a"),AZo=o("SegformerForSemanticSegmentation"),yZo=o(" (SegFormer model)"),LZo=l(),Sv=a("p"),xZo=o("The model is set in evaluation mode by default using "),upe=a("code"),kZo=o("model.eval()"),SZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=a("code"),RZo=o("model.train()"),BZo=l(),Fpe=a("p"),PZo=o("Examples:"),$Zo=l(),f(iA.$$.fragment),hPe=l(),mc=a("h2"),Rv=a("a"),vpe=a("span"),f(dA.$$.fragment),IZo=l(),Tpe=a("span"),qZo=o("AutoModelForInstanceSegmentation"),pPe=l(),br=a("div"),f(cA.$$.fragment),NZo=l(),gc=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PO=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),$O=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),fA=a("p"),zZo=o("This class cannot be instantiated directly using "),Mpe=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),mt=a("div"),f(mA.$$.fragment),UZo=l(),Epe=a("p"),JZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),YZo=l(),hc=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),wpe=a("p"),aer=o("Examples:"),ner=l(),f(gA.$$.fragment),ser=l(),so=a("div"),f(hA.$$.fragment),ler=l(),Ape=a("p"),ier=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),der=l(),_n=a("p"),cer=o("The model class to instantiate is selected based on the "),ype=a("code"),fer=o("model_type"),mer=o(` property of the config object (either
passed as an argument or loaded from `),Lpe=a("code"),ger=o("pretrained_model_name_or_path"),her=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=a("code"),per=o("pretrained_model_name_or_path"),_er=o(":"),uer=l(),kpe=a("ul"),Bv=a("li"),Spe=a("strong"),ber=o("maskformer"),Fer=o(" \u2014 "),qO=a("a"),ver=o("MaskFormerForInstanceSegmentation"),Ter=o(" (MaskFormer model)"),Mer=l(),Pv=a("p"),Eer=o("The model is set in evaluation mode by default using "),Rpe=a("code"),Cer=o("model.eval()"),wer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=a("code"),Aer=o("model.train()"),yer=l(),Ppe=a("p"),Ler=o("Examples:"),xer=l(),f(pA.$$.fragment),_Pe=l(),pc=a("h2"),$v=a("a"),$pe=a("span"),f(_A.$$.fragment),ker=l(),Ipe=a("span"),Ser=o("TFAutoModel"),uPe=l(),Fr=a("div"),f(uA.$$.fragment),Rer=l(),_c=a("p"),Ber=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NO=a("a"),Per=o("from_pretrained()"),$er=o(" class method or the "),jO=a("a"),Ier=o("from_config()"),qer=o(` class
method.`),Ner=l(),bA=a("p"),jer=o("This class cannot be instantiated directly using "),qpe=a("code"),Der=o("__init__()"),Ger=o(" (throws an error)."),Oer=l(),gt=a("div"),f(FA.$$.fragment),Ver=l(),Npe=a("p"),Xer=o("Instantiates one of the base model classes of the library from a configuration."),zer=l(),uc=a("p"),Qer=o(`Note:
Loading a model from its configuration file does `),jpe=a("strong"),Wer=o("not"),Her=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),Uer=o("from_pretrained()"),Jer=o(" to load the model weights."),Yer=l(),Dpe=a("p"),Ker=o("Examples:"),Zer=l(),f(vA.$$.fragment),eor=l(),ho=a("div"),f(TA.$$.fragment),oor=l(),Gpe=a("p"),ror=o("Instantiate one of the base model classes of the library from a pretrained model."),tor=l(),un=a("p"),aor=o("The model class to instantiate is selected based on the "),Ope=a("code"),nor=o("model_type"),sor=o(` property of the config object (either
passed as an argument or loaded from `),Vpe=a("code"),lor=o("pretrained_model_name_or_path"),ior=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=a("code"),dor=o("pretrained_model_name_or_path"),cor=o(":"),mor=l(),x=a("ul"),Iv=a("li"),zpe=a("strong"),gor=o("albert"),hor=o(" \u2014 "),GO=a("a"),por=o("TFAlbertModel"),_or=o(" (ALBERT model)"),uor=l(),qv=a("li"),Qpe=a("strong"),bor=o("bart"),For=o(" \u2014 "),OO=a("a"),vor=o("TFBartModel"),Tor=o(" (BART model)"),Mor=l(),Nv=a("li"),Wpe=a("strong"),Eor=o("bert"),Cor=o(" \u2014 "),VO=a("a"),wor=o("TFBertModel"),Aor=o(" (BERT model)"),yor=l(),jv=a("li"),Hpe=a("strong"),Lor=o("blenderbot"),xor=o(" \u2014 "),XO=a("a"),kor=o("TFBlenderbotModel"),Sor=o(" (Blenderbot model)"),Ror=l(),Dv=a("li"),Upe=a("strong"),Bor=o("blenderbot-small"),Por=o(" \u2014 "),zO=a("a"),$or=o("TFBlenderbotSmallModel"),Ior=o(" (BlenderbotSmall model)"),qor=l(),Gv=a("li"),Jpe=a("strong"),Nor=o("camembert"),jor=o(" \u2014 "),QO=a("a"),Dor=o("TFCamembertModel"),Gor=o(" (CamemBERT model)"),Oor=l(),Ov=a("li"),Ype=a("strong"),Vor=o("clip"),Xor=o(" \u2014 "),WO=a("a"),zor=o("TFCLIPModel"),Qor=o(" (CLIP model)"),Wor=l(),Vv=a("li"),Kpe=a("strong"),Hor=o("convbert"),Uor=o(" \u2014 "),HO=a("a"),Jor=o("TFConvBertModel"),Yor=o(" (ConvBERT model)"),Kor=l(),Xv=a("li"),Zpe=a("strong"),Zor=o("convnext"),err=o(" \u2014 "),UO=a("a"),orr=o("TFConvNextModel"),rrr=o(" (ConvNext model)"),trr=l(),zv=a("li"),e_e=a("strong"),arr=o("ctrl"),nrr=o(" \u2014 "),JO=a("a"),srr=o("TFCTRLModel"),lrr=o(" (CTRL model)"),irr=l(),Qv=a("li"),o_e=a("strong"),drr=o("deberta"),crr=o(" \u2014 "),YO=a("a"),frr=o("TFDebertaModel"),mrr=o(" (DeBERTa model)"),grr=l(),Wv=a("li"),r_e=a("strong"),hrr=o("deberta-v2"),prr=o(" \u2014 "),KO=a("a"),_rr=o("TFDebertaV2Model"),urr=o(" (DeBERTa-v2 model)"),brr=l(),Hv=a("li"),t_e=a("strong"),Frr=o("distilbert"),vrr=o(" \u2014 "),ZO=a("a"),Trr=o("TFDistilBertModel"),Mrr=o(" (DistilBERT model)"),Err=l(),Uv=a("li"),a_e=a("strong"),Crr=o("dpr"),wrr=o(" \u2014 "),eV=a("a"),Arr=o("TFDPRQuestionEncoder"),yrr=o(" (DPR model)"),Lrr=l(),Jv=a("li"),n_e=a("strong"),xrr=o("electra"),krr=o(" \u2014 "),oV=a("a"),Srr=o("TFElectraModel"),Rrr=o(" (ELECTRA model)"),Brr=l(),Yv=a("li"),s_e=a("strong"),Prr=o("flaubert"),$rr=o(" \u2014 "),rV=a("a"),Irr=o("TFFlaubertModel"),qrr=o(" (FlauBERT model)"),Nrr=l(),Xs=a("li"),l_e=a("strong"),jrr=o("funnel"),Drr=o(" \u2014 "),tV=a("a"),Grr=o("TFFunnelModel"),Orr=o(" or "),aV=a("a"),Vrr=o("TFFunnelBaseModel"),Xrr=o(" (Funnel Transformer model)"),zrr=l(),Kv=a("li"),i_e=a("strong"),Qrr=o("gpt2"),Wrr=o(" \u2014 "),nV=a("a"),Hrr=o("TFGPT2Model"),Urr=o(" (OpenAI GPT-2 model)"),Jrr=l(),Zv=a("li"),d_e=a("strong"),Yrr=o("gptj"),Krr=o(" \u2014 "),sV=a("a"),Zrr=o("TFGPTJModel"),etr=o(" (GPT-J model)"),otr=l(),eT=a("li"),c_e=a("strong"),rtr=o("hubert"),ttr=o(" \u2014 "),lV=a("a"),atr=o("TFHubertModel"),ntr=o(" (Hubert model)"),str=l(),oT=a("li"),f_e=a("strong"),ltr=o("layoutlm"),itr=o(" \u2014 "),iV=a("a"),dtr=o("TFLayoutLMModel"),ctr=o(" (LayoutLM model)"),ftr=l(),rT=a("li"),m_e=a("strong"),mtr=o("led"),gtr=o(" \u2014 "),dV=a("a"),htr=o("TFLEDModel"),ptr=o(" (LED model)"),_tr=l(),tT=a("li"),g_e=a("strong"),utr=o("longformer"),btr=o(" \u2014 "),cV=a("a"),Ftr=o("TFLongformerModel"),vtr=o(" (Longformer model)"),Ttr=l(),aT=a("li"),h_e=a("strong"),Mtr=o("lxmert"),Etr=o(" \u2014 "),fV=a("a"),Ctr=o("TFLxmertModel"),wtr=o(" (LXMERT model)"),Atr=l(),nT=a("li"),p_e=a("strong"),ytr=o("marian"),Ltr=o(" \u2014 "),mV=a("a"),xtr=o("TFMarianModel"),ktr=o(" (Marian model)"),Str=l(),sT=a("li"),__e=a("strong"),Rtr=o("mbart"),Btr=o(" \u2014 "),gV=a("a"),Ptr=o("TFMBartModel"),$tr=o(" (mBART model)"),Itr=l(),lT=a("li"),u_e=a("strong"),qtr=o("mobilebert"),Ntr=o(" \u2014 "),hV=a("a"),jtr=o("TFMobileBertModel"),Dtr=o(" (MobileBERT model)"),Gtr=l(),iT=a("li"),b_e=a("strong"),Otr=o("mpnet"),Vtr=o(" \u2014 "),pV=a("a"),Xtr=o("TFMPNetModel"),ztr=o(" (MPNet model)"),Qtr=l(),dT=a("li"),F_e=a("strong"),Wtr=o("mt5"),Htr=o(" \u2014 "),_V=a("a"),Utr=o("TFMT5Model"),Jtr=o(" (mT5 model)"),Ytr=l(),cT=a("li"),v_e=a("strong"),Ktr=o("openai-gpt"),Ztr=o(" \u2014 "),uV=a("a"),ear=o("TFOpenAIGPTModel"),oar=o(" (OpenAI GPT model)"),rar=l(),fT=a("li"),T_e=a("strong"),tar=o("pegasus"),aar=o(" \u2014 "),bV=a("a"),nar=o("TFPegasusModel"),sar=o(" (Pegasus model)"),lar=l(),mT=a("li"),M_e=a("strong"),iar=o("rembert"),dar=o(" \u2014 "),FV=a("a"),car=o("TFRemBertModel"),far=o(" (RemBERT model)"),mar=l(),gT=a("li"),E_e=a("strong"),gar=o("roberta"),har=o(" \u2014 "),vV=a("a"),par=o("TFRobertaModel"),_ar=o(" (RoBERTa model)"),uar=l(),hT=a("li"),C_e=a("strong"),bar=o("roformer"),Far=o(" \u2014 "),TV=a("a"),Tar=o("TFRoFormerModel"),Mar=o(" (RoFormer model)"),Ear=l(),pT=a("li"),w_e=a("strong"),Car=o("speech_to_text"),war=o(" \u2014 "),MV=a("a"),Aar=o("TFSpeech2TextModel"),yar=o(" (Speech2Text model)"),Lar=l(),_T=a("li"),A_e=a("strong"),xar=o("t5"),kar=o(" \u2014 "),EV=a("a"),Sar=o("TFT5Model"),Rar=o(" (T5 model)"),Bar=l(),uT=a("li"),y_e=a("strong"),Par=o("tapas"),$ar=o(" \u2014 "),CV=a("a"),Iar=o("TFTapasModel"),qar=o(" (TAPAS model)"),Nar=l(),bT=a("li"),L_e=a("strong"),jar=o("transfo-xl"),Dar=o(" \u2014 "),wV=a("a"),Gar=o("TFTransfoXLModel"),Oar=o(" (Transformer-XL model)"),Var=l(),FT=a("li"),x_e=a("strong"),Xar=o("vit"),zar=o(" \u2014 "),AV=a("a"),Qar=o("TFViTModel"),War=o(" (ViT model)"),Har=l(),vT=a("li"),k_e=a("strong"),Uar=o("vit_mae"),Jar=o(" \u2014 "),yV=a("a"),Yar=o("TFViTMAEModel"),Kar=o(" (ViTMAE model)"),Zar=l(),TT=a("li"),S_e=a("strong"),enr=o("wav2vec2"),onr=o(" \u2014 "),LV=a("a"),rnr=o("TFWav2Vec2Model"),tnr=o(" (Wav2Vec2 model)"),anr=l(),MT=a("li"),R_e=a("strong"),nnr=o("xlm"),snr=o(" \u2014 "),xV=a("a"),lnr=o("TFXLMModel"),inr=o(" (XLM model)"),dnr=l(),ET=a("li"),B_e=a("strong"),cnr=o("xlm-roberta"),fnr=o(" \u2014 "),kV=a("a"),mnr=o("TFXLMRobertaModel"),gnr=o(" (XLM-RoBERTa model)"),hnr=l(),CT=a("li"),P_e=a("strong"),pnr=o("xlnet"),_nr=o(" \u2014 "),SV=a("a"),unr=o("TFXLNetModel"),bnr=o(" (XLNet model)"),Fnr=l(),$_e=a("p"),vnr=o("Examples:"),Tnr=l(),f(MA.$$.fragment),bPe=l(),bc=a("h2"),wT=a("a"),I_e=a("span"),f(EA.$$.fragment),Mnr=l(),q_e=a("span"),Enr=o("TFAutoModelForPreTraining"),FPe=l(),vr=a("div"),f(CA.$$.fragment),Cnr=l(),Fc=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RV=a("a"),Anr=o("from_pretrained()"),ynr=o(" class method or the "),BV=a("a"),Lnr=o("from_config()"),xnr=o(` class
method.`),knr=l(),wA=a("p"),Snr=o("This class cannot be instantiated directly using "),N_e=a("code"),Rnr=o("__init__()"),Bnr=o(" (throws an error)."),Pnr=l(),ht=a("div"),f(AA.$$.fragment),$nr=l(),j_e=a("p"),Inr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),qnr=l(),vc=a("p"),Nnr=o(`Note:
Loading a model from its configuration file does `),D_e=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),G_e=a("p"),Xnr=o("Examples:"),znr=l(),f(yA.$$.fragment),Qnr=l(),po=a("div"),f(LA.$$.fragment),Wnr=l(),O_e=a("p"),Hnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Unr=l(),bn=a("p"),Jnr=o("The model class to instantiate is selected based on the "),V_e=a("code"),Ynr=o("model_type"),Knr=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),osr=o("pretrained_model_name_or_path"),rsr=o(":"),tsr=l(),H=a("ul"),AT=a("li"),Q_e=a("strong"),asr=o("albert"),nsr=o(" \u2014 "),$V=a("a"),ssr=o("TFAlbertForPreTraining"),lsr=o(" (ALBERT model)"),isr=l(),yT=a("li"),W_e=a("strong"),dsr=o("bart"),csr=o(" \u2014 "),IV=a("a"),fsr=o("TFBartForConditionalGeneration"),msr=o(" (BART model)"),gsr=l(),LT=a("li"),H_e=a("strong"),hsr=o("bert"),psr=o(" \u2014 "),qV=a("a"),_sr=o("TFBertForPreTraining"),usr=o(" (BERT model)"),bsr=l(),xT=a("li"),U_e=a("strong"),Fsr=o("camembert"),vsr=o(" \u2014 "),NV=a("a"),Tsr=o("TFCamembertForMaskedLM"),Msr=o(" (CamemBERT model)"),Esr=l(),kT=a("li"),J_e=a("strong"),Csr=o("ctrl"),wsr=o(" \u2014 "),jV=a("a"),Asr=o("TFCTRLLMHeadModel"),ysr=o(" (CTRL model)"),Lsr=l(),ST=a("li"),Y_e=a("strong"),xsr=o("distilbert"),ksr=o(" \u2014 "),DV=a("a"),Ssr=o("TFDistilBertForMaskedLM"),Rsr=o(" (DistilBERT model)"),Bsr=l(),RT=a("li"),K_e=a("strong"),Psr=o("electra"),$sr=o(" \u2014 "),GV=a("a"),Isr=o("TFElectraForPreTraining"),qsr=o(" (ELECTRA model)"),Nsr=l(),BT=a("li"),Z_e=a("strong"),jsr=o("flaubert"),Dsr=o(" \u2014 "),OV=a("a"),Gsr=o("TFFlaubertWithLMHeadModel"),Osr=o(" (FlauBERT model)"),Vsr=l(),PT=a("li"),eue=a("strong"),Xsr=o("funnel"),zsr=o(" \u2014 "),VV=a("a"),Qsr=o("TFFunnelForPreTraining"),Wsr=o(" (Funnel Transformer model)"),Hsr=l(),$T=a("li"),oue=a("strong"),Usr=o("gpt2"),Jsr=o(" \u2014 "),XV=a("a"),Ysr=o("TFGPT2LMHeadModel"),Ksr=o(" (OpenAI GPT-2 model)"),Zsr=l(),IT=a("li"),rue=a("strong"),elr=o("layoutlm"),olr=o(" \u2014 "),zV=a("a"),rlr=o("TFLayoutLMForMaskedLM"),tlr=o(" (LayoutLM model)"),alr=l(),qT=a("li"),tue=a("strong"),nlr=o("lxmert"),slr=o(" \u2014 "),QV=a("a"),llr=o("TFLxmertForPreTraining"),ilr=o(" (LXMERT model)"),dlr=l(),NT=a("li"),aue=a("strong"),clr=o("mobilebert"),flr=o(" \u2014 "),WV=a("a"),mlr=o("TFMobileBertForPreTraining"),glr=o(" (MobileBERT model)"),hlr=l(),jT=a("li"),nue=a("strong"),plr=o("mpnet"),_lr=o(" \u2014 "),HV=a("a"),ulr=o("TFMPNetForMaskedLM"),blr=o(" (MPNet model)"),Flr=l(),DT=a("li"),sue=a("strong"),vlr=o("openai-gpt"),Tlr=o(" \u2014 "),UV=a("a"),Mlr=o("TFOpenAIGPTLMHeadModel"),Elr=o(" (OpenAI GPT model)"),Clr=l(),GT=a("li"),lue=a("strong"),wlr=o("roberta"),Alr=o(" \u2014 "),JV=a("a"),ylr=o("TFRobertaForMaskedLM"),Llr=o(" (RoBERTa model)"),xlr=l(),OT=a("li"),iue=a("strong"),klr=o("t5"),Slr=o(" \u2014 "),YV=a("a"),Rlr=o("TFT5ForConditionalGeneration"),Blr=o(" (T5 model)"),Plr=l(),VT=a("li"),due=a("strong"),$lr=o("tapas"),Ilr=o(" \u2014 "),KV=a("a"),qlr=o("TFTapasForMaskedLM"),Nlr=o(" (TAPAS model)"),jlr=l(),XT=a("li"),cue=a("strong"),Dlr=o("transfo-xl"),Glr=o(" \u2014 "),ZV=a("a"),Olr=o("TFTransfoXLLMHeadModel"),Vlr=o(" (Transformer-XL model)"),Xlr=l(),zT=a("li"),fue=a("strong"),zlr=o("vit_mae"),Qlr=o(" \u2014 "),eX=a("a"),Wlr=o("TFViTMAEForPreTraining"),Hlr=o(" (ViTMAE model)"),Ulr=l(),QT=a("li"),mue=a("strong"),Jlr=o("xlm"),Ylr=o(" \u2014 "),oX=a("a"),Klr=o("TFXLMWithLMHeadModel"),Zlr=o(" (XLM model)"),eir=l(),WT=a("li"),gue=a("strong"),oir=o("xlm-roberta"),rir=o(" \u2014 "),rX=a("a"),tir=o("TFXLMRobertaForMaskedLM"),air=o(" (XLM-RoBERTa model)"),nir=l(),HT=a("li"),hue=a("strong"),sir=o("xlnet"),lir=o(" \u2014 "),tX=a("a"),iir=o("TFXLNetLMHeadModel"),dir=o(" (XLNet model)"),cir=l(),pue=a("p"),fir=o("Examples:"),mir=l(),f(xA.$$.fragment),vPe=l(),Tc=a("h2"),UT=a("a"),_ue=a("span"),f(kA.$$.fragment),gir=l(),uue=a("span"),hir=o("TFAutoModelForCausalLM"),TPe=l(),Tr=a("div"),f(SA.$$.fragment),pir=l(),Mc=a("p"),_ir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aX=a("a"),uir=o("from_pretrained()"),bir=o(" class method or the "),nX=a("a"),Fir=o("from_config()"),vir=o(` class
method.`),Tir=l(),RA=a("p"),Mir=o("This class cannot be instantiated directly using "),bue=a("code"),Eir=o("__init__()"),Cir=o(" (throws an error)."),wir=l(),pt=a("div"),f(BA.$$.fragment),Air=l(),Fue=a("p"),yir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Lir=l(),Ec=a("p"),xir=o(`Note:
Loading a model from its configuration file does `),vue=a("strong"),kir=o("not"),Sir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),Rir=o("from_pretrained()"),Bir=o(" to load the model weights."),Pir=l(),Tue=a("p"),$ir=o("Examples:"),Iir=l(),f(PA.$$.fragment),qir=l(),_o=a("div"),f($A.$$.fragment),Nir=l(),Mue=a("p"),jir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Dir=l(),Fn=a("p"),Gir=o("The model class to instantiate is selected based on the "),Eue=a("code"),Oir=o("model_type"),Vir=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),Xir=o("pretrained_model_name_or_path"),zir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),Qir=o("pretrained_model_name_or_path"),Wir=o(":"),Hir=l(),me=a("ul"),JT=a("li"),Aue=a("strong"),Uir=o("bert"),Jir=o(" \u2014 "),lX=a("a"),Yir=o("TFBertLMHeadModel"),Kir=o(" (BERT model)"),Zir=l(),YT=a("li"),yue=a("strong"),edr=o("camembert"),odr=o(" \u2014 "),iX=a("a"),rdr=o("TFCamembertForCausalLM"),tdr=o(" (CamemBERT model)"),adr=l(),KT=a("li"),Lue=a("strong"),ndr=o("ctrl"),sdr=o(" \u2014 "),dX=a("a"),ldr=o("TFCTRLLMHeadModel"),idr=o(" (CTRL model)"),ddr=l(),ZT=a("li"),xue=a("strong"),cdr=o("gpt2"),fdr=o(" \u2014 "),cX=a("a"),mdr=o("TFGPT2LMHeadModel"),gdr=o(" (OpenAI GPT-2 model)"),hdr=l(),e7=a("li"),kue=a("strong"),pdr=o("gptj"),_dr=o(" \u2014 "),fX=a("a"),udr=o("TFGPTJForCausalLM"),bdr=o(" (GPT-J model)"),Fdr=l(),o7=a("li"),Sue=a("strong"),vdr=o("openai-gpt"),Tdr=o(" \u2014 "),mX=a("a"),Mdr=o("TFOpenAIGPTLMHeadModel"),Edr=o(" (OpenAI GPT model)"),Cdr=l(),r7=a("li"),Rue=a("strong"),wdr=o("rembert"),Adr=o(" \u2014 "),gX=a("a"),ydr=o("TFRemBertForCausalLM"),Ldr=o(" (RemBERT model)"),xdr=l(),t7=a("li"),Bue=a("strong"),kdr=o("roberta"),Sdr=o(" \u2014 "),hX=a("a"),Rdr=o("TFRobertaForCausalLM"),Bdr=o(" (RoBERTa model)"),Pdr=l(),a7=a("li"),Pue=a("strong"),$dr=o("roformer"),Idr=o(" \u2014 "),pX=a("a"),qdr=o("TFRoFormerForCausalLM"),Ndr=o(" (RoFormer model)"),jdr=l(),n7=a("li"),$ue=a("strong"),Ddr=o("transfo-xl"),Gdr=o(" \u2014 "),_X=a("a"),Odr=o("TFTransfoXLLMHeadModel"),Vdr=o(" (Transformer-XL model)"),Xdr=l(),s7=a("li"),Iue=a("strong"),zdr=o("xlm"),Qdr=o(" \u2014 "),uX=a("a"),Wdr=o("TFXLMWithLMHeadModel"),Hdr=o(" (XLM model)"),Udr=l(),l7=a("li"),que=a("strong"),Jdr=o("xlnet"),Ydr=o(" \u2014 "),bX=a("a"),Kdr=o("TFXLNetLMHeadModel"),Zdr=o(" (XLNet model)"),ecr=l(),Nue=a("p"),ocr=o("Examples:"),rcr=l(),f(IA.$$.fragment),MPe=l(),Cc=a("h2"),i7=a("a"),jue=a("span"),f(qA.$$.fragment),tcr=l(),Due=a("span"),acr=o("TFAutoModelForImageClassification"),EPe=l(),Mr=a("div"),f(NA.$$.fragment),ncr=l(),wc=a("p"),scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=a("a"),lcr=o("from_pretrained()"),icr=o(" class method or the "),vX=a("a"),dcr=o("from_config()"),ccr=o(` class
method.`),fcr=l(),jA=a("p"),mcr=o("This class cannot be instantiated directly using "),Gue=a("code"),gcr=o("__init__()"),hcr=o(" (throws an error)."),pcr=l(),_t=a("div"),f(DA.$$.fragment),_cr=l(),Oue=a("p"),ucr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bcr=l(),Ac=a("p"),Fcr=o(`Note:
Loading a model from its configuration file does `),Vue=a("strong"),vcr=o("not"),Tcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" to load the model weights."),Ccr=l(),Xue=a("p"),wcr=o("Examples:"),Acr=l(),f(GA.$$.fragment),ycr=l(),uo=a("div"),f(OA.$$.fragment),Lcr=l(),zue=a("p"),xcr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kcr=l(),vn=a("p"),Scr=o("The model class to instantiate is selected based on the "),Que=a("code"),Rcr=o("model_type"),Bcr=o(` property of the config object (either
passed as an argument or loaded from `),Wue=a("code"),Pcr=o("pretrained_model_name_or_path"),$cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=a("code"),Icr=o("pretrained_model_name_or_path"),qcr=o(":"),Ncr=l(),VA=a("ul"),d7=a("li"),Uue=a("strong"),jcr=o("convnext"),Dcr=o(" \u2014 "),MX=a("a"),Gcr=o("TFConvNextForImageClassification"),Ocr=o(" (ConvNext model)"),Vcr=l(),c7=a("li"),Jue=a("strong"),Xcr=o("vit"),zcr=o(" \u2014 "),EX=a("a"),Qcr=o("TFViTForImageClassification"),Wcr=o(" (ViT model)"),Hcr=l(),Yue=a("p"),Ucr=o("Examples:"),Jcr=l(),f(XA.$$.fragment),CPe=l(),yc=a("h2"),f7=a("a"),Kue=a("span"),f(zA.$$.fragment),Ycr=l(),Zue=a("span"),Kcr=o("TFAutoModelForMaskedLM"),wPe=l(),Er=a("div"),f(QA.$$.fragment),Zcr=l(),Lc=a("p"),efr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CX=a("a"),ofr=o("from_pretrained()"),rfr=o(" class method or the "),wX=a("a"),tfr=o("from_config()"),afr=o(` class
method.`),nfr=l(),WA=a("p"),sfr=o("This class cannot be instantiated directly using "),e2e=a("code"),lfr=o("__init__()"),ifr=o(" (throws an error)."),dfr=l(),ut=a("div"),f(HA.$$.fragment),cfr=l(),o2e=a("p"),ffr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),mfr=l(),xc=a("p"),gfr=o(`Note:
Loading a model from its configuration file does `),r2e=a("strong"),hfr=o("not"),pfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=a("a"),_fr=o("from_pretrained()"),ufr=o(" to load the model weights."),bfr=l(),t2e=a("p"),Ffr=o("Examples:"),vfr=l(),f(UA.$$.fragment),Tfr=l(),bo=a("div"),f(JA.$$.fragment),Mfr=l(),a2e=a("p"),Efr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Cfr=l(),Tn=a("p"),wfr=o("The model class to instantiate is selected based on the "),n2e=a("code"),Afr=o("model_type"),yfr=o(` property of the config object (either
passed as an argument or loaded from `),s2e=a("code"),Lfr=o("pretrained_model_name_or_path"),xfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(":"),Rfr=l(),J=a("ul"),m7=a("li"),i2e=a("strong"),Bfr=o("albert"),Pfr=o(" \u2014 "),yX=a("a"),$fr=o("TFAlbertForMaskedLM"),Ifr=o(" (ALBERT model)"),qfr=l(),g7=a("li"),d2e=a("strong"),Nfr=o("bert"),jfr=o(" \u2014 "),LX=a("a"),Dfr=o("TFBertForMaskedLM"),Gfr=o(" (BERT model)"),Ofr=l(),h7=a("li"),c2e=a("strong"),Vfr=o("camembert"),Xfr=o(" \u2014 "),xX=a("a"),zfr=o("TFCamembertForMaskedLM"),Qfr=o(" (CamemBERT model)"),Wfr=l(),p7=a("li"),f2e=a("strong"),Hfr=o("convbert"),Ufr=o(" \u2014 "),kX=a("a"),Jfr=o("TFConvBertForMaskedLM"),Yfr=o(" (ConvBERT model)"),Kfr=l(),_7=a("li"),m2e=a("strong"),Zfr=o("deberta"),emr=o(" \u2014 "),SX=a("a"),omr=o("TFDebertaForMaskedLM"),rmr=o(" (DeBERTa model)"),tmr=l(),u7=a("li"),g2e=a("strong"),amr=o("deberta-v2"),nmr=o(" \u2014 "),RX=a("a"),smr=o("TFDebertaV2ForMaskedLM"),lmr=o(" (DeBERTa-v2 model)"),imr=l(),b7=a("li"),h2e=a("strong"),dmr=o("distilbert"),cmr=o(" \u2014 "),BX=a("a"),fmr=o("TFDistilBertForMaskedLM"),mmr=o(" (DistilBERT model)"),gmr=l(),F7=a("li"),p2e=a("strong"),hmr=o("electra"),pmr=o(" \u2014 "),PX=a("a"),_mr=o("TFElectraForMaskedLM"),umr=o(" (ELECTRA model)"),bmr=l(),v7=a("li"),_2e=a("strong"),Fmr=o("flaubert"),vmr=o(" \u2014 "),$X=a("a"),Tmr=o("TFFlaubertWithLMHeadModel"),Mmr=o(" (FlauBERT model)"),Emr=l(),T7=a("li"),u2e=a("strong"),Cmr=o("funnel"),wmr=o(" \u2014 "),IX=a("a"),Amr=o("TFFunnelForMaskedLM"),ymr=o(" (Funnel Transformer model)"),Lmr=l(),M7=a("li"),b2e=a("strong"),xmr=o("layoutlm"),kmr=o(" \u2014 "),qX=a("a"),Smr=o("TFLayoutLMForMaskedLM"),Rmr=o(" (LayoutLM model)"),Bmr=l(),E7=a("li"),F2e=a("strong"),Pmr=o("longformer"),$mr=o(" \u2014 "),NX=a("a"),Imr=o("TFLongformerForMaskedLM"),qmr=o(" (Longformer model)"),Nmr=l(),C7=a("li"),v2e=a("strong"),jmr=o("mobilebert"),Dmr=o(" \u2014 "),jX=a("a"),Gmr=o("TFMobileBertForMaskedLM"),Omr=o(" (MobileBERT model)"),Vmr=l(),w7=a("li"),T2e=a("strong"),Xmr=o("mpnet"),zmr=o(" \u2014 "),DX=a("a"),Qmr=o("TFMPNetForMaskedLM"),Wmr=o(" (MPNet model)"),Hmr=l(),A7=a("li"),M2e=a("strong"),Umr=o("rembert"),Jmr=o(" \u2014 "),GX=a("a"),Ymr=o("TFRemBertForMaskedLM"),Kmr=o(" (RemBERT model)"),Zmr=l(),y7=a("li"),E2e=a("strong"),egr=o("roberta"),ogr=o(" \u2014 "),OX=a("a"),rgr=o("TFRobertaForMaskedLM"),tgr=o(" (RoBERTa model)"),agr=l(),L7=a("li"),C2e=a("strong"),ngr=o("roformer"),sgr=o(" \u2014 "),VX=a("a"),lgr=o("TFRoFormerForMaskedLM"),igr=o(" (RoFormer model)"),dgr=l(),x7=a("li"),w2e=a("strong"),cgr=o("tapas"),fgr=o(" \u2014 "),XX=a("a"),mgr=o("TFTapasForMaskedLM"),ggr=o(" (TAPAS model)"),hgr=l(),k7=a("li"),A2e=a("strong"),pgr=o("xlm"),_gr=o(" \u2014 "),zX=a("a"),ugr=o("TFXLMWithLMHeadModel"),bgr=o(" (XLM model)"),Fgr=l(),S7=a("li"),y2e=a("strong"),vgr=o("xlm-roberta"),Tgr=o(" \u2014 "),QX=a("a"),Mgr=o("TFXLMRobertaForMaskedLM"),Egr=o(" (XLM-RoBERTa model)"),Cgr=l(),L2e=a("p"),wgr=o("Examples:"),Agr=l(),f(YA.$$.fragment),APe=l(),kc=a("h2"),R7=a("a"),x2e=a("span"),f(KA.$$.fragment),ygr=l(),k2e=a("span"),Lgr=o("TFAutoModelForSeq2SeqLM"),yPe=l(),Cr=a("div"),f(ZA.$$.fragment),xgr=l(),Sc=a("p"),kgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WX=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" class method or the "),HX=a("a"),Bgr=o("from_config()"),Pgr=o(` class
method.`),$gr=l(),e0=a("p"),Igr=o("This class cannot be instantiated directly using "),S2e=a("code"),qgr=o("__init__()"),Ngr=o(" (throws an error)."),jgr=l(),bt=a("div"),f(o0.$$.fragment),Dgr=l(),R2e=a("p"),Ggr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ogr=l(),Rc=a("p"),Vgr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Xgr=o("not"),zgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),Qgr=o("from_pretrained()"),Wgr=o(" to load the model weights."),Hgr=l(),P2e=a("p"),Ugr=o("Examples:"),Jgr=l(),f(r0.$$.fragment),Ygr=l(),Fo=a("div"),f(t0.$$.fragment),Kgr=l(),$2e=a("p"),Zgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ehr=l(),Mn=a("p"),ohr=o("The model class to instantiate is selected based on the "),I2e=a("code"),rhr=o("model_type"),thr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),shr=o("pretrained_model_name_or_path"),lhr=o(":"),ihr=l(),be=a("ul"),B7=a("li"),j2e=a("strong"),dhr=o("bart"),chr=o(" \u2014 "),JX=a("a"),fhr=o("TFBartForConditionalGeneration"),mhr=o(" (BART model)"),ghr=l(),P7=a("li"),D2e=a("strong"),hhr=o("blenderbot"),phr=o(" \u2014 "),YX=a("a"),_hr=o("TFBlenderbotForConditionalGeneration"),uhr=o(" (Blenderbot model)"),bhr=l(),$7=a("li"),G2e=a("strong"),Fhr=o("blenderbot-small"),vhr=o(" \u2014 "),KX=a("a"),Thr=o("TFBlenderbotSmallForConditionalGeneration"),Mhr=o(" (BlenderbotSmall model)"),Ehr=l(),I7=a("li"),O2e=a("strong"),Chr=o("encoder-decoder"),whr=o(" \u2014 "),ZX=a("a"),Ahr=o("TFEncoderDecoderModel"),yhr=o(" (Encoder decoder model)"),Lhr=l(),q7=a("li"),V2e=a("strong"),xhr=o("led"),khr=o(" \u2014 "),ez=a("a"),Shr=o("TFLEDForConditionalGeneration"),Rhr=o(" (LED model)"),Bhr=l(),N7=a("li"),X2e=a("strong"),Phr=o("marian"),$hr=o(" \u2014 "),oz=a("a"),Ihr=o("TFMarianMTModel"),qhr=o(" (Marian model)"),Nhr=l(),j7=a("li"),z2e=a("strong"),jhr=o("mbart"),Dhr=o(" \u2014 "),rz=a("a"),Ghr=o("TFMBartForConditionalGeneration"),Ohr=o(" (mBART model)"),Vhr=l(),D7=a("li"),Q2e=a("strong"),Xhr=o("mt5"),zhr=o(" \u2014 "),tz=a("a"),Qhr=o("TFMT5ForConditionalGeneration"),Whr=o(" (mT5 model)"),Hhr=l(),G7=a("li"),W2e=a("strong"),Uhr=o("pegasus"),Jhr=o(" \u2014 "),az=a("a"),Yhr=o("TFPegasusForConditionalGeneration"),Khr=o(" (Pegasus model)"),Zhr=l(),O7=a("li"),H2e=a("strong"),epr=o("t5"),opr=o(" \u2014 "),nz=a("a"),rpr=o("TFT5ForConditionalGeneration"),tpr=o(" (T5 model)"),apr=l(),U2e=a("p"),npr=o("Examples:"),spr=l(),f(a0.$$.fragment),LPe=l(),Bc=a("h2"),V7=a("a"),J2e=a("span"),f(n0.$$.fragment),lpr=l(),Y2e=a("span"),ipr=o("TFAutoModelForSequenceClassification"),xPe=l(),wr=a("div"),f(s0.$$.fragment),dpr=l(),Pc=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sz=a("a"),fpr=o("from_pretrained()"),mpr=o(" class method or the "),lz=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),ppr=l(),l0=a("p"),_pr=o("This class cannot be instantiated directly using "),K2e=a("code"),upr=o("__init__()"),bpr=o(" (throws an error)."),Fpr=l(),Ft=a("div"),f(i0.$$.fragment),vpr=l(),Z2e=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Mpr=l(),$c=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),e1e=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),Apr=o("from_pretrained()"),ypr=o(" to load the model weights."),Lpr=l(),o1e=a("p"),xpr=o("Examples:"),kpr=l(),f(d0.$$.fragment),Spr=l(),vo=a("div"),f(c0.$$.fragment),Rpr=l(),r1e=a("p"),Bpr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Ppr=l(),En=a("p"),$pr=o("The model class to instantiate is selected based on the "),t1e=a("code"),Ipr=o("model_type"),qpr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),Npr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),V=a("ul"),X7=a("li"),s1e=a("strong"),Vpr=o("albert"),Xpr=o(" \u2014 "),dz=a("a"),zpr=o("TFAlbertForSequenceClassification"),Qpr=o(" (ALBERT model)"),Wpr=l(),z7=a("li"),l1e=a("strong"),Hpr=o("bert"),Upr=o(" \u2014 "),cz=a("a"),Jpr=o("TFBertForSequenceClassification"),Ypr=o(" (BERT model)"),Kpr=l(),Q7=a("li"),i1e=a("strong"),Zpr=o("camembert"),e_r=o(" \u2014 "),fz=a("a"),o_r=o("TFCamembertForSequenceClassification"),r_r=o(" (CamemBERT model)"),t_r=l(),W7=a("li"),d1e=a("strong"),a_r=o("convbert"),n_r=o(" \u2014 "),mz=a("a"),s_r=o("TFConvBertForSequenceClassification"),l_r=o(" (ConvBERT model)"),i_r=l(),H7=a("li"),c1e=a("strong"),d_r=o("ctrl"),c_r=o(" \u2014 "),gz=a("a"),f_r=o("TFCTRLForSequenceClassification"),m_r=o(" (CTRL model)"),g_r=l(),U7=a("li"),f1e=a("strong"),h_r=o("deberta"),p_r=o(" \u2014 "),hz=a("a"),__r=o("TFDebertaForSequenceClassification"),u_r=o(" (DeBERTa model)"),b_r=l(),J7=a("li"),m1e=a("strong"),F_r=o("deberta-v2"),v_r=o(" \u2014 "),pz=a("a"),T_r=o("TFDebertaV2ForSequenceClassification"),M_r=o(" (DeBERTa-v2 model)"),E_r=l(),Y7=a("li"),g1e=a("strong"),C_r=o("distilbert"),w_r=o(" \u2014 "),_z=a("a"),A_r=o("TFDistilBertForSequenceClassification"),y_r=o(" (DistilBERT model)"),L_r=l(),K7=a("li"),h1e=a("strong"),x_r=o("electra"),k_r=o(" \u2014 "),uz=a("a"),S_r=o("TFElectraForSequenceClassification"),R_r=o(" (ELECTRA model)"),B_r=l(),Z7=a("li"),p1e=a("strong"),P_r=o("flaubert"),$_r=o(" \u2014 "),bz=a("a"),I_r=o("TFFlaubertForSequenceClassification"),q_r=o(" (FlauBERT model)"),N_r=l(),e9=a("li"),_1e=a("strong"),j_r=o("funnel"),D_r=o(" \u2014 "),Fz=a("a"),G_r=o("TFFunnelForSequenceClassification"),O_r=o(" (Funnel Transformer model)"),V_r=l(),o9=a("li"),u1e=a("strong"),X_r=o("gpt2"),z_r=o(" \u2014 "),vz=a("a"),Q_r=o("TFGPT2ForSequenceClassification"),W_r=o(" (OpenAI GPT-2 model)"),H_r=l(),r9=a("li"),b1e=a("strong"),U_r=o("gptj"),J_r=o(" \u2014 "),Tz=a("a"),Y_r=o("TFGPTJForSequenceClassification"),K_r=o(" (GPT-J model)"),Z_r=l(),t9=a("li"),F1e=a("strong"),eur=o("layoutlm"),our=o(" \u2014 "),Mz=a("a"),rur=o("TFLayoutLMForSequenceClassification"),tur=o(" (LayoutLM model)"),aur=l(),a9=a("li"),v1e=a("strong"),nur=o("longformer"),sur=o(" \u2014 "),Ez=a("a"),lur=o("TFLongformerForSequenceClassification"),iur=o(" (Longformer model)"),dur=l(),n9=a("li"),T1e=a("strong"),cur=o("mobilebert"),fur=o(" \u2014 "),Cz=a("a"),mur=o("TFMobileBertForSequenceClassification"),gur=o(" (MobileBERT model)"),hur=l(),s9=a("li"),M1e=a("strong"),pur=o("mpnet"),_ur=o(" \u2014 "),wz=a("a"),uur=o("TFMPNetForSequenceClassification"),bur=o(" (MPNet model)"),Fur=l(),l9=a("li"),E1e=a("strong"),vur=o("openai-gpt"),Tur=o(" \u2014 "),Az=a("a"),Mur=o("TFOpenAIGPTForSequenceClassification"),Eur=o(" (OpenAI GPT model)"),Cur=l(),i9=a("li"),C1e=a("strong"),wur=o("rembert"),Aur=o(" \u2014 "),yz=a("a"),yur=o("TFRemBertForSequenceClassification"),Lur=o(" (RemBERT model)"),xur=l(),d9=a("li"),w1e=a("strong"),kur=o("roberta"),Sur=o(" \u2014 "),Lz=a("a"),Rur=o("TFRobertaForSequenceClassification"),Bur=o(" (RoBERTa model)"),Pur=l(),c9=a("li"),A1e=a("strong"),$ur=o("roformer"),Iur=o(" \u2014 "),xz=a("a"),qur=o("TFRoFormerForSequenceClassification"),Nur=o(" (RoFormer model)"),jur=l(),f9=a("li"),y1e=a("strong"),Dur=o("tapas"),Gur=o(" \u2014 "),kz=a("a"),Our=o("TFTapasForSequenceClassification"),Vur=o(" (TAPAS model)"),Xur=l(),m9=a("li"),L1e=a("strong"),zur=o("transfo-xl"),Qur=o(" \u2014 "),Sz=a("a"),Wur=o("TFTransfoXLForSequenceClassification"),Hur=o(" (Transformer-XL model)"),Uur=l(),g9=a("li"),x1e=a("strong"),Jur=o("xlm"),Yur=o(" \u2014 "),Rz=a("a"),Kur=o("TFXLMForSequenceClassification"),Zur=o(" (XLM model)"),e2r=l(),h9=a("li"),k1e=a("strong"),o2r=o("xlm-roberta"),r2r=o(" \u2014 "),Bz=a("a"),t2r=o("TFXLMRobertaForSequenceClassification"),a2r=o(" (XLM-RoBERTa model)"),n2r=l(),p9=a("li"),S1e=a("strong"),s2r=o("xlnet"),l2r=o(" \u2014 "),Pz=a("a"),i2r=o("TFXLNetForSequenceClassification"),d2r=o(" (XLNet model)"),c2r=l(),R1e=a("p"),f2r=o("Examples:"),m2r=l(),f(f0.$$.fragment),kPe=l(),Ic=a("h2"),_9=a("a"),B1e=a("span"),f(m0.$$.fragment),g2r=l(),P1e=a("span"),h2r=o("TFAutoModelForMultipleChoice"),SPe=l(),Ar=a("div"),f(g0.$$.fragment),p2r=l(),qc=a("p"),_2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=a("a"),u2r=o("from_pretrained()"),b2r=o(" class method or the "),Iz=a("a"),F2r=o("from_config()"),v2r=o(` class
method.`),T2r=l(),h0=a("p"),M2r=o("This class cannot be instantiated directly using "),$1e=a("code"),E2r=o("__init__()"),C2r=o(" (throws an error)."),w2r=l(),vt=a("div"),f(p0.$$.fragment),A2r=l(),I1e=a("p"),y2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L2r=l(),Nc=a("p"),x2r=o(`Note:
Loading a model from its configuration file does `),q1e=a("strong"),k2r=o("not"),S2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),R2r=o("from_pretrained()"),B2r=o(" to load the model weights."),P2r=l(),N1e=a("p"),$2r=o("Examples:"),I2r=l(),f(_0.$$.fragment),q2r=l(),To=a("div"),f(u0.$$.fragment),N2r=l(),j1e=a("p"),j2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D2r=l(),Cn=a("p"),G2r=o("The model class to instantiate is selected based on the "),D1e=a("code"),O2r=o("model_type"),V2r=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),Q2r=o("pretrained_model_name_or_path"),W2r=o(":"),H2r=l(),se=a("ul"),u9=a("li"),V1e=a("strong"),U2r=o("albert"),J2r=o(" \u2014 "),Nz=a("a"),Y2r=o("TFAlbertForMultipleChoice"),K2r=o(" (ALBERT model)"),Z2r=l(),b9=a("li"),X1e=a("strong"),e1r=o("bert"),o1r=o(" \u2014 "),jz=a("a"),r1r=o("TFBertForMultipleChoice"),t1r=o(" (BERT model)"),a1r=l(),F9=a("li"),z1e=a("strong"),n1r=o("camembert"),s1r=o(" \u2014 "),Dz=a("a"),l1r=o("TFCamembertForMultipleChoice"),i1r=o(" (CamemBERT model)"),d1r=l(),v9=a("li"),Q1e=a("strong"),c1r=o("convbert"),f1r=o(" \u2014 "),Gz=a("a"),m1r=o("TFConvBertForMultipleChoice"),g1r=o(" (ConvBERT model)"),h1r=l(),T9=a("li"),W1e=a("strong"),p1r=o("distilbert"),_1r=o(" \u2014 "),Oz=a("a"),u1r=o("TFDistilBertForMultipleChoice"),b1r=o(" (DistilBERT model)"),F1r=l(),M9=a("li"),H1e=a("strong"),v1r=o("electra"),T1r=o(" \u2014 "),Vz=a("a"),M1r=o("TFElectraForMultipleChoice"),E1r=o(" (ELECTRA model)"),C1r=l(),E9=a("li"),U1e=a("strong"),w1r=o("flaubert"),A1r=o(" \u2014 "),Xz=a("a"),y1r=o("TFFlaubertForMultipleChoice"),L1r=o(" (FlauBERT model)"),x1r=l(),C9=a("li"),J1e=a("strong"),k1r=o("funnel"),S1r=o(" \u2014 "),zz=a("a"),R1r=o("TFFunnelForMultipleChoice"),B1r=o(" (Funnel Transformer model)"),P1r=l(),w9=a("li"),Y1e=a("strong"),$1r=o("longformer"),I1r=o(" \u2014 "),Qz=a("a"),q1r=o("TFLongformerForMultipleChoice"),N1r=o(" (Longformer model)"),j1r=l(),A9=a("li"),K1e=a("strong"),D1r=o("mobilebert"),G1r=o(" \u2014 "),Wz=a("a"),O1r=o("TFMobileBertForMultipleChoice"),V1r=o(" (MobileBERT model)"),X1r=l(),y9=a("li"),Z1e=a("strong"),z1r=o("mpnet"),Q1r=o(" \u2014 "),Hz=a("a"),W1r=o("TFMPNetForMultipleChoice"),H1r=o(" (MPNet model)"),U1r=l(),L9=a("li"),ebe=a("strong"),J1r=o("rembert"),Y1r=o(" \u2014 "),Uz=a("a"),K1r=o("TFRemBertForMultipleChoice"),Z1r=o(" (RemBERT model)"),ebr=l(),x9=a("li"),obe=a("strong"),obr=o("roberta"),rbr=o(" \u2014 "),Jz=a("a"),tbr=o("TFRobertaForMultipleChoice"),abr=o(" (RoBERTa model)"),nbr=l(),k9=a("li"),rbe=a("strong"),sbr=o("roformer"),lbr=o(" \u2014 "),Yz=a("a"),ibr=o("TFRoFormerForMultipleChoice"),dbr=o(" (RoFormer model)"),cbr=l(),S9=a("li"),tbe=a("strong"),fbr=o("xlm"),mbr=o(" \u2014 "),Kz=a("a"),gbr=o("TFXLMForMultipleChoice"),hbr=o(" (XLM model)"),pbr=l(),R9=a("li"),abe=a("strong"),_br=o("xlm-roberta"),ubr=o(" \u2014 "),Zz=a("a"),bbr=o("TFXLMRobertaForMultipleChoice"),Fbr=o(" (XLM-RoBERTa model)"),vbr=l(),B9=a("li"),nbe=a("strong"),Tbr=o("xlnet"),Mbr=o(" \u2014 "),eQ=a("a"),Ebr=o("TFXLNetForMultipleChoice"),Cbr=o(" (XLNet model)"),wbr=l(),sbe=a("p"),Abr=o("Examples:"),ybr=l(),f(b0.$$.fragment),RPe=l(),jc=a("h2"),P9=a("a"),lbe=a("span"),f(F0.$$.fragment),Lbr=l(),ibe=a("span"),xbr=o("TFAutoModelForTableQuestionAnswering"),BPe=l(),yr=a("div"),f(v0.$$.fragment),kbr=l(),Dc=a("p"),Sbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oQ=a("a"),Rbr=o("from_pretrained()"),Bbr=o(" class method or the "),rQ=a("a"),Pbr=o("from_config()"),$br=o(` class
method.`),Ibr=l(),T0=a("p"),qbr=o("This class cannot be instantiated directly using "),dbe=a("code"),Nbr=o("__init__()"),jbr=o(" (throws an error)."),Dbr=l(),Tt=a("div"),f(M0.$$.fragment),Gbr=l(),cbe=a("p"),Obr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vbr=l(),Gc=a("p"),Xbr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),zbr=o("not"),Qbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=a("a"),Wbr=o("from_pretrained()"),Hbr=o(" to load the model weights."),Ubr=l(),mbe=a("p"),Jbr=o("Examples:"),Ybr=l(),f(E0.$$.fragment),Kbr=l(),Mo=a("div"),f(C0.$$.fragment),Zbr=l(),gbe=a("p"),e6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o6r=l(),wn=a("p"),r6r=o("The model class to instantiate is selected based on the "),hbe=a("code"),t6r=o("model_type"),a6r=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),n6r=o("pretrained_model_name_or_path"),s6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),l6r=o("pretrained_model_name_or_path"),i6r=o(":"),d6r=l(),ube=a("ul"),$9=a("li"),bbe=a("strong"),c6r=o("tapas"),f6r=o(" \u2014 "),aQ=a("a"),m6r=o("TFTapasForQuestionAnswering"),g6r=o(" (TAPAS model)"),h6r=l(),Fbe=a("p"),p6r=o("Examples:"),_6r=l(),f(w0.$$.fragment),PPe=l(),Oc=a("h2"),I9=a("a"),vbe=a("span"),f(A0.$$.fragment),u6r=l(),Tbe=a("span"),b6r=o("TFAutoModelForTokenClassification"),$Pe=l(),Lr=a("div"),f(y0.$$.fragment),F6r=l(),Vc=a("p"),v6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nQ=a("a"),T6r=o("from_pretrained()"),M6r=o(" class method or the "),sQ=a("a"),E6r=o("from_config()"),C6r=o(` class
method.`),w6r=l(),L0=a("p"),A6r=o("This class cannot be instantiated directly using "),Mbe=a("code"),y6r=o("__init__()"),L6r=o(" (throws an error)."),x6r=l(),Mt=a("div"),f(x0.$$.fragment),k6r=l(),Ebe=a("p"),S6r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),R6r=l(),Xc=a("p"),B6r=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),P6r=o("not"),$6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),I6r=o("from_pretrained()"),q6r=o(" to load the model weights."),N6r=l(),wbe=a("p"),j6r=o("Examples:"),D6r=l(),f(k0.$$.fragment),G6r=l(),Eo=a("div"),f(S0.$$.fragment),O6r=l(),Abe=a("p"),V6r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),X6r=l(),An=a("p"),z6r=o("The model class to instantiate is selected based on the "),ybe=a("code"),Q6r=o("model_type"),W6r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),H6r=o("pretrained_model_name_or_path"),U6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),J6r=o("pretrained_model_name_or_path"),Y6r=o(":"),K6r=l(),Y=a("ul"),q9=a("li"),kbe=a("strong"),Z6r=o("albert"),eFr=o(" \u2014 "),iQ=a("a"),oFr=o("TFAlbertForTokenClassification"),rFr=o(" (ALBERT model)"),tFr=l(),N9=a("li"),Sbe=a("strong"),aFr=o("bert"),nFr=o(" \u2014 "),dQ=a("a"),sFr=o("TFBertForTokenClassification"),lFr=o(" (BERT model)"),iFr=l(),j9=a("li"),Rbe=a("strong"),dFr=o("camembert"),cFr=o(" \u2014 "),cQ=a("a"),fFr=o("TFCamembertForTokenClassification"),mFr=o(" (CamemBERT model)"),gFr=l(),D9=a("li"),Bbe=a("strong"),hFr=o("convbert"),pFr=o(" \u2014 "),fQ=a("a"),_Fr=o("TFConvBertForTokenClassification"),uFr=o(" (ConvBERT model)"),bFr=l(),G9=a("li"),Pbe=a("strong"),FFr=o("deberta"),vFr=o(" \u2014 "),mQ=a("a"),TFr=o("TFDebertaForTokenClassification"),MFr=o(" (DeBERTa model)"),EFr=l(),O9=a("li"),$be=a("strong"),CFr=o("deberta-v2"),wFr=o(" \u2014 "),gQ=a("a"),AFr=o("TFDebertaV2ForTokenClassification"),yFr=o(" (DeBERTa-v2 model)"),LFr=l(),V9=a("li"),Ibe=a("strong"),xFr=o("distilbert"),kFr=o(" \u2014 "),hQ=a("a"),SFr=o("TFDistilBertForTokenClassification"),RFr=o(" (DistilBERT model)"),BFr=l(),X9=a("li"),qbe=a("strong"),PFr=o("electra"),$Fr=o(" \u2014 "),pQ=a("a"),IFr=o("TFElectraForTokenClassification"),qFr=o(" (ELECTRA model)"),NFr=l(),z9=a("li"),Nbe=a("strong"),jFr=o("flaubert"),DFr=o(" \u2014 "),_Q=a("a"),GFr=o("TFFlaubertForTokenClassification"),OFr=o(" (FlauBERT model)"),VFr=l(),Q9=a("li"),jbe=a("strong"),XFr=o("funnel"),zFr=o(" \u2014 "),uQ=a("a"),QFr=o("TFFunnelForTokenClassification"),WFr=o(" (Funnel Transformer model)"),HFr=l(),W9=a("li"),Dbe=a("strong"),UFr=o("layoutlm"),JFr=o(" \u2014 "),bQ=a("a"),YFr=o("TFLayoutLMForTokenClassification"),KFr=o(" (LayoutLM model)"),ZFr=l(),H9=a("li"),Gbe=a("strong"),evr=o("longformer"),ovr=o(" \u2014 "),FQ=a("a"),rvr=o("TFLongformerForTokenClassification"),tvr=o(" (Longformer model)"),avr=l(),U9=a("li"),Obe=a("strong"),nvr=o("mobilebert"),svr=o(" \u2014 "),vQ=a("a"),lvr=o("TFMobileBertForTokenClassification"),ivr=o(" (MobileBERT model)"),dvr=l(),J9=a("li"),Vbe=a("strong"),cvr=o("mpnet"),fvr=o(" \u2014 "),TQ=a("a"),mvr=o("TFMPNetForTokenClassification"),gvr=o(" (MPNet model)"),hvr=l(),Y9=a("li"),Xbe=a("strong"),pvr=o("rembert"),_vr=o(" \u2014 "),MQ=a("a"),uvr=o("TFRemBertForTokenClassification"),bvr=o(" (RemBERT model)"),Fvr=l(),K9=a("li"),zbe=a("strong"),vvr=o("roberta"),Tvr=o(" \u2014 "),EQ=a("a"),Mvr=o("TFRobertaForTokenClassification"),Evr=o(" (RoBERTa model)"),Cvr=l(),Z9=a("li"),Qbe=a("strong"),wvr=o("roformer"),Avr=o(" \u2014 "),CQ=a("a"),yvr=o("TFRoFormerForTokenClassification"),Lvr=o(" (RoFormer model)"),xvr=l(),eM=a("li"),Wbe=a("strong"),kvr=o("xlm"),Svr=o(" \u2014 "),wQ=a("a"),Rvr=o("TFXLMForTokenClassification"),Bvr=o(" (XLM model)"),Pvr=l(),oM=a("li"),Hbe=a("strong"),$vr=o("xlm-roberta"),Ivr=o(" \u2014 "),AQ=a("a"),qvr=o("TFXLMRobertaForTokenClassification"),Nvr=o(" (XLM-RoBERTa model)"),jvr=l(),rM=a("li"),Ube=a("strong"),Dvr=o("xlnet"),Gvr=o(" \u2014 "),yQ=a("a"),Ovr=o("TFXLNetForTokenClassification"),Vvr=o(" (XLNet model)"),Xvr=l(),Jbe=a("p"),zvr=o("Examples:"),Qvr=l(),f(R0.$$.fragment),IPe=l(),zc=a("h2"),tM=a("a"),Ybe=a("span"),f(B0.$$.fragment),Wvr=l(),Kbe=a("span"),Hvr=o("TFAutoModelForQuestionAnswering"),qPe=l(),xr=a("div"),f(P0.$$.fragment),Uvr=l(),Qc=a("p"),Jvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LQ=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" class method or the "),xQ=a("a"),Zvr=o("from_config()"),eTr=o(` class
method.`),oTr=l(),$0=a("p"),rTr=o("This class cannot be instantiated directly using "),Zbe=a("code"),tTr=o("__init__()"),aTr=o(" (throws an error)."),nTr=l(),Et=a("div"),f(I0.$$.fragment),sTr=l(),e6e=a("p"),lTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),iTr=l(),Wc=a("p"),dTr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),cTr=o("not"),fTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=a("a"),mTr=o("from_pretrained()"),gTr=o(" to load the model weights."),hTr=l(),r6e=a("p"),pTr=o("Examples:"),_Tr=l(),f(q0.$$.fragment),uTr=l(),Co=a("div"),f(N0.$$.fragment),bTr=l(),t6e=a("p"),FTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vTr=l(),yn=a("p"),TTr=o("The model class to instantiate is selected based on the "),a6e=a("code"),MTr=o("model_type"),ETr=o(` property of the config object (either
passed as an argument or loaded from `),n6e=a("code"),CTr=o("pretrained_model_name_or_path"),wTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(":"),LTr=l(),K=a("ul"),aM=a("li"),l6e=a("strong"),xTr=o("albert"),kTr=o(" \u2014 "),SQ=a("a"),STr=o("TFAlbertForQuestionAnswering"),RTr=o(" (ALBERT model)"),BTr=l(),nM=a("li"),i6e=a("strong"),PTr=o("bert"),$Tr=o(" \u2014 "),RQ=a("a"),ITr=o("TFBertForQuestionAnswering"),qTr=o(" (BERT model)"),NTr=l(),sM=a("li"),d6e=a("strong"),jTr=o("camembert"),DTr=o(" \u2014 "),BQ=a("a"),GTr=o("TFCamembertForQuestionAnswering"),OTr=o(" (CamemBERT model)"),VTr=l(),lM=a("li"),c6e=a("strong"),XTr=o("convbert"),zTr=o(" \u2014 "),PQ=a("a"),QTr=o("TFConvBertForQuestionAnswering"),WTr=o(" (ConvBERT model)"),HTr=l(),iM=a("li"),f6e=a("strong"),UTr=o("deberta"),JTr=o(" \u2014 "),$Q=a("a"),YTr=o("TFDebertaForQuestionAnswering"),KTr=o(" (DeBERTa model)"),ZTr=l(),dM=a("li"),m6e=a("strong"),e7r=o("deberta-v2"),o7r=o(" \u2014 "),IQ=a("a"),r7r=o("TFDebertaV2ForQuestionAnswering"),t7r=o(" (DeBERTa-v2 model)"),a7r=l(),cM=a("li"),g6e=a("strong"),n7r=o("distilbert"),s7r=o(" \u2014 "),qQ=a("a"),l7r=o("TFDistilBertForQuestionAnswering"),i7r=o(" (DistilBERT model)"),d7r=l(),fM=a("li"),h6e=a("strong"),c7r=o("electra"),f7r=o(" \u2014 "),NQ=a("a"),m7r=o("TFElectraForQuestionAnswering"),g7r=o(" (ELECTRA model)"),h7r=l(),mM=a("li"),p6e=a("strong"),p7r=o("flaubert"),_7r=o(" \u2014 "),jQ=a("a"),u7r=o("TFFlaubertForQuestionAnsweringSimple"),b7r=o(" (FlauBERT model)"),F7r=l(),gM=a("li"),_6e=a("strong"),v7r=o("funnel"),T7r=o(" \u2014 "),DQ=a("a"),M7r=o("TFFunnelForQuestionAnswering"),E7r=o(" (Funnel Transformer model)"),C7r=l(),hM=a("li"),u6e=a("strong"),w7r=o("gptj"),A7r=o(" \u2014 "),GQ=a("a"),y7r=o("TFGPTJForQuestionAnswering"),L7r=o(" (GPT-J model)"),x7r=l(),pM=a("li"),b6e=a("strong"),k7r=o("longformer"),S7r=o(" \u2014 "),OQ=a("a"),R7r=o("TFLongformerForQuestionAnswering"),B7r=o(" (Longformer model)"),P7r=l(),_M=a("li"),F6e=a("strong"),$7r=o("mobilebert"),I7r=o(" \u2014 "),VQ=a("a"),q7r=o("TFMobileBertForQuestionAnswering"),N7r=o(" (MobileBERT model)"),j7r=l(),uM=a("li"),v6e=a("strong"),D7r=o("mpnet"),G7r=o(" \u2014 "),XQ=a("a"),O7r=o("TFMPNetForQuestionAnswering"),V7r=o(" (MPNet model)"),X7r=l(),bM=a("li"),T6e=a("strong"),z7r=o("rembert"),Q7r=o(" \u2014 "),zQ=a("a"),W7r=o("TFRemBertForQuestionAnswering"),H7r=o(" (RemBERT model)"),U7r=l(),FM=a("li"),M6e=a("strong"),J7r=o("roberta"),Y7r=o(" \u2014 "),QQ=a("a"),K7r=o("TFRobertaForQuestionAnswering"),Z7r=o(" (RoBERTa model)"),e9r=l(),vM=a("li"),E6e=a("strong"),o9r=o("roformer"),r9r=o(" \u2014 "),WQ=a("a"),t9r=o("TFRoFormerForQuestionAnswering"),a9r=o(" (RoFormer model)"),n9r=l(),TM=a("li"),C6e=a("strong"),s9r=o("xlm"),l9r=o(" \u2014 "),HQ=a("a"),i9r=o("TFXLMForQuestionAnsweringSimple"),d9r=o(" (XLM model)"),c9r=l(),MM=a("li"),w6e=a("strong"),f9r=o("xlm-roberta"),m9r=o(" \u2014 "),UQ=a("a"),g9r=o("TFXLMRobertaForQuestionAnswering"),h9r=o(" (XLM-RoBERTa model)"),p9r=l(),EM=a("li"),A6e=a("strong"),_9r=o("xlnet"),u9r=o(" \u2014 "),JQ=a("a"),b9r=o("TFXLNetForQuestionAnsweringSimple"),F9r=o(" (XLNet model)"),v9r=l(),y6e=a("p"),T9r=o("Examples:"),M9r=l(),f(j0.$$.fragment),NPe=l(),Hc=a("h2"),CM=a("a"),L6e=a("span"),f(D0.$$.fragment),E9r=l(),x6e=a("span"),C9r=o("TFAutoModelForVision2Seq"),jPe=l(),kr=a("div"),f(G0.$$.fragment),w9r=l(),Uc=a("p"),A9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YQ=a("a"),y9r=o("from_pretrained()"),L9r=o(" class method or the "),KQ=a("a"),x9r=o("from_config()"),k9r=o(` class
method.`),S9r=l(),O0=a("p"),R9r=o("This class cannot be instantiated directly using "),k6e=a("code"),B9r=o("__init__()"),P9r=o(" (throws an error)."),$9r=l(),Ct=a("div"),f(V0.$$.fragment),I9r=l(),S6e=a("p"),q9r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),N9r=l(),Jc=a("p"),j9r=o(`Note:
Loading a model from its configuration file does `),R6e=a("strong"),D9r=o("not"),G9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=a("a"),O9r=o("from_pretrained()"),V9r=o(" to load the model weights."),X9r=l(),B6e=a("p"),z9r=o("Examples:"),Q9r=l(),f(X0.$$.fragment),W9r=l(),wo=a("div"),f(z0.$$.fragment),H9r=l(),P6e=a("p"),U9r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J9r=l(),Ln=a("p"),Y9r=o("The model class to instantiate is selected based on the "),$6e=a("code"),K9r=o("model_type"),Z9r=o(` property of the config object (either
passed as an argument or loaded from `),I6e=a("code"),eMr=o("pretrained_model_name_or_path"),oMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=a("code"),rMr=o("pretrained_model_name_or_path"),tMr=o(":"),aMr=l(),N6e=a("ul"),wM=a("li"),j6e=a("strong"),nMr=o("vision-encoder-decoder"),sMr=o(" \u2014 "),eW=a("a"),lMr=o("TFVisionEncoderDecoderModel"),iMr=o(" (Vision Encoder decoder model)"),dMr=l(),D6e=a("p"),cMr=o("Examples:"),fMr=l(),f(Q0.$$.fragment),DPe=l(),Yc=a("h2"),AM=a("a"),G6e=a("span"),f(W0.$$.fragment),mMr=l(),O6e=a("span"),gMr=o("TFAutoModelForSpeechSeq2Seq"),GPe=l(),Sr=a("div"),f(H0.$$.fragment),hMr=l(),Kc=a("p"),pMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oW=a("a"),_Mr=o("from_pretrained()"),uMr=o(" class method or the "),rW=a("a"),bMr=o("from_config()"),FMr=o(` class
method.`),vMr=l(),U0=a("p"),TMr=o("This class cannot be instantiated directly using "),V6e=a("code"),MMr=o("__init__()"),EMr=o(" (throws an error)."),CMr=l(),wt=a("div"),f(J0.$$.fragment),wMr=l(),X6e=a("p"),AMr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),yMr=l(),Zc=a("p"),LMr=o(`Note:
Loading a model from its configuration file does `),z6e=a("strong"),xMr=o("not"),kMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),SMr=o("from_pretrained()"),RMr=o(" to load the model weights."),BMr=l(),Q6e=a("p"),PMr=o("Examples:"),$Mr=l(),f(Y0.$$.fragment),IMr=l(),Ao=a("div"),f(K0.$$.fragment),qMr=l(),W6e=a("p"),NMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jMr=l(),xn=a("p"),DMr=o("The model class to instantiate is selected based on the "),H6e=a("code"),GMr=o("model_type"),OMr=o(` property of the config object (either
passed as an argument or loaded from `),U6e=a("code"),VMr=o("pretrained_model_name_or_path"),XMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=a("code"),zMr=o("pretrained_model_name_or_path"),QMr=o(":"),WMr=l(),Y6e=a("ul"),yM=a("li"),K6e=a("strong"),HMr=o("speech_to_text"),UMr=o(" \u2014 "),aW=a("a"),JMr=o("TFSpeech2TextForConditionalGeneration"),YMr=o(" (Speech2Text model)"),KMr=l(),Z6e=a("p"),ZMr=o("Examples:"),e4r=l(),f(Z0.$$.fragment),OPe=l(),ef=a("h2"),LM=a("a"),eFe=a("span"),f(ey.$$.fragment),o4r=l(),oFe=a("span"),r4r=o("FlaxAutoModel"),VPe=l(),Rr=a("div"),f(oy.$$.fragment),t4r=l(),of=a("p"),a4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=a("a"),n4r=o("from_pretrained()"),s4r=o(" class method or the "),sW=a("a"),l4r=o("from_config()"),i4r=o(` class
method.`),d4r=l(),ry=a("p"),c4r=o("This class cannot be instantiated directly using "),rFe=a("code"),f4r=o("__init__()"),m4r=o(" (throws an error)."),g4r=l(),At=a("div"),f(ty.$$.fragment),h4r=l(),tFe=a("p"),p4r=o("Instantiates one of the base model classes of the library from a configuration."),_4r=l(),rf=a("p"),u4r=o(`Note:
Loading a model from its configuration file does `),aFe=a("strong"),b4r=o("not"),F4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=a("a"),v4r=o("from_pretrained()"),T4r=o(" to load the model weights."),M4r=l(),nFe=a("p"),E4r=o("Examples:"),C4r=l(),f(ay.$$.fragment),w4r=l(),yo=a("div"),f(ny.$$.fragment),A4r=l(),sFe=a("p"),y4r=o("Instantiate one of the base model classes of the library from a pretrained model."),L4r=l(),kn=a("p"),x4r=o("The model class to instantiate is selected based on the "),lFe=a("code"),k4r=o("model_type"),S4r=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),R4r=o("pretrained_model_name_or_path"),B4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),P4r=o("pretrained_model_name_or_path"),$4r=o(":"),I4r=l(),X=a("ul"),xM=a("li"),cFe=a("strong"),q4r=o("albert"),N4r=o(" \u2014 "),iW=a("a"),j4r=o("FlaxAlbertModel"),D4r=o(" (ALBERT model)"),G4r=l(),kM=a("li"),fFe=a("strong"),O4r=o("bart"),V4r=o(" \u2014 "),dW=a("a"),X4r=o("FlaxBartModel"),z4r=o(" (BART model)"),Q4r=l(),SM=a("li"),mFe=a("strong"),W4r=o("beit"),H4r=o(" \u2014 "),cW=a("a"),U4r=o("FlaxBeitModel"),J4r=o(" (BEiT model)"),Y4r=l(),RM=a("li"),gFe=a("strong"),K4r=o("bert"),Z4r=o(" \u2014 "),fW=a("a"),eEr=o("FlaxBertModel"),oEr=o(" (BERT model)"),rEr=l(),BM=a("li"),hFe=a("strong"),tEr=o("big_bird"),aEr=o(" \u2014 "),mW=a("a"),nEr=o("FlaxBigBirdModel"),sEr=o(" (BigBird model)"),lEr=l(),PM=a("li"),pFe=a("strong"),iEr=o("blenderbot"),dEr=o(" \u2014 "),gW=a("a"),cEr=o("FlaxBlenderbotModel"),fEr=o(" (Blenderbot model)"),mEr=l(),$M=a("li"),_Fe=a("strong"),gEr=o("blenderbot-small"),hEr=o(" \u2014 "),hW=a("a"),pEr=o("FlaxBlenderbotSmallModel"),_Er=o(" (BlenderbotSmall model)"),uEr=l(),IM=a("li"),uFe=a("strong"),bEr=o("clip"),FEr=o(" \u2014 "),pW=a("a"),vEr=o("FlaxCLIPModel"),TEr=o(" (CLIP model)"),MEr=l(),qM=a("li"),bFe=a("strong"),EEr=o("distilbert"),CEr=o(" \u2014 "),_W=a("a"),wEr=o("FlaxDistilBertModel"),AEr=o(" (DistilBERT model)"),yEr=l(),NM=a("li"),FFe=a("strong"),LEr=o("electra"),xEr=o(" \u2014 "),uW=a("a"),kEr=o("FlaxElectraModel"),SEr=o(" (ELECTRA model)"),REr=l(),jM=a("li"),vFe=a("strong"),BEr=o("gpt2"),PEr=o(" \u2014 "),bW=a("a"),$Er=o("FlaxGPT2Model"),IEr=o(" (OpenAI GPT-2 model)"),qEr=l(),DM=a("li"),TFe=a("strong"),NEr=o("gpt_neo"),jEr=o(" \u2014 "),FW=a("a"),DEr=o("FlaxGPTNeoModel"),GEr=o(" (GPT Neo model)"),OEr=l(),GM=a("li"),MFe=a("strong"),VEr=o("gptj"),XEr=o(" \u2014 "),vW=a("a"),zEr=o("FlaxGPTJModel"),QEr=o(" (GPT-J model)"),WEr=l(),OM=a("li"),EFe=a("strong"),HEr=o("longt5"),UEr=o(" \u2014 "),TW=a("a"),JEr=o("FlaxLongT5Model"),YEr=o(" (LongT5 model)"),KEr=l(),VM=a("li"),CFe=a("strong"),ZEr=o("marian"),e5r=o(" \u2014 "),MW=a("a"),o5r=o("FlaxMarianModel"),r5r=o(" (Marian model)"),t5r=l(),XM=a("li"),wFe=a("strong"),a5r=o("mbart"),n5r=o(" \u2014 "),EW=a("a"),s5r=o("FlaxMBartModel"),l5r=o(" (mBART model)"),i5r=l(),zM=a("li"),AFe=a("strong"),d5r=o("mt5"),c5r=o(" \u2014 "),CW=a("a"),f5r=o("FlaxMT5Model"),m5r=o(" (mT5 model)"),g5r=l(),QM=a("li"),yFe=a("strong"),h5r=o("pegasus"),p5r=o(" \u2014 "),wW=a("a"),_5r=o("FlaxPegasusModel"),u5r=o(" (Pegasus model)"),b5r=l(),WM=a("li"),LFe=a("strong"),F5r=o("roberta"),v5r=o(" \u2014 "),AW=a("a"),T5r=o("FlaxRobertaModel"),M5r=o(" (RoBERTa model)"),E5r=l(),HM=a("li"),xFe=a("strong"),C5r=o("roformer"),w5r=o(" \u2014 "),yW=a("a"),A5r=o("FlaxRoFormerModel"),y5r=o(" (RoFormer model)"),L5r=l(),UM=a("li"),kFe=a("strong"),x5r=o("t5"),k5r=o(" \u2014 "),LW=a("a"),S5r=o("FlaxT5Model"),R5r=o(" (T5 model)"),B5r=l(),JM=a("li"),SFe=a("strong"),P5r=o("vision-text-dual-encoder"),$5r=o(" \u2014 "),xW=a("a"),I5r=o("FlaxVisionTextDualEncoderModel"),q5r=o(" (VisionTextDualEncoder model)"),N5r=l(),YM=a("li"),RFe=a("strong"),j5r=o("vit"),D5r=o(" \u2014 "),kW=a("a"),G5r=o("FlaxViTModel"),O5r=o(" (ViT model)"),V5r=l(),KM=a("li"),BFe=a("strong"),X5r=o("wav2vec2"),z5r=o(" \u2014 "),SW=a("a"),Q5r=o("FlaxWav2Vec2Model"),W5r=o(" (Wav2Vec2 model)"),H5r=l(),ZM=a("li"),PFe=a("strong"),U5r=o("xglm"),J5r=o(" \u2014 "),RW=a("a"),Y5r=o("FlaxXGLMModel"),K5r=o(" (XGLM model)"),Z5r=l(),e4=a("li"),$Fe=a("strong"),e3r=o("xlm-roberta"),o3r=o(" \u2014 "),BW=a("a"),r3r=o("FlaxXLMRobertaModel"),t3r=o(" (XLM-RoBERTa model)"),a3r=l(),IFe=a("p"),n3r=o("Examples:"),s3r=l(),f(sy.$$.fragment),XPe=l(),tf=a("h2"),o4=a("a"),qFe=a("span"),f(ly.$$.fragment),l3r=l(),NFe=a("span"),i3r=o("FlaxAutoModelForCausalLM"),zPe=l(),Br=a("div"),f(iy.$$.fragment),d3r=l(),af=a("p"),c3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PW=a("a"),f3r=o("from_pretrained()"),m3r=o(" class method or the "),$W=a("a"),g3r=o("from_config()"),h3r=o(` class
method.`),p3r=l(),dy=a("p"),_3r=o("This class cannot be instantiated directly using "),jFe=a("code"),u3r=o("__init__()"),b3r=o(" (throws an error)."),F3r=l(),yt=a("div"),f(cy.$$.fragment),v3r=l(),DFe=a("p"),T3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),M3r=l(),nf=a("p"),E3r=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),C3r=o("not"),w3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),A3r=o("from_pretrained()"),y3r=o(" to load the model weights."),L3r=l(),OFe=a("p"),x3r=o("Examples:"),k3r=l(),f(fy.$$.fragment),S3r=l(),Lo=a("div"),f(my.$$.fragment),R3r=l(),VFe=a("p"),B3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),P3r=l(),Sn=a("p"),$3r=o("The model class to instantiate is selected based on the "),XFe=a("code"),I3r=o("model_type"),q3r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),N3r=o("pretrained_model_name_or_path"),j3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(":"),O3r=l(),ca=a("ul"),r4=a("li"),WFe=a("strong"),V3r=o("bart"),X3r=o(" \u2014 "),qW=a("a"),z3r=o("FlaxBartForCausalLM"),Q3r=o(" (BART model)"),W3r=l(),t4=a("li"),HFe=a("strong"),H3r=o("gpt2"),U3r=o(" \u2014 "),NW=a("a"),J3r=o("FlaxGPT2LMHeadModel"),Y3r=o(" (OpenAI GPT-2 model)"),K3r=l(),a4=a("li"),UFe=a("strong"),Z3r=o("gpt_neo"),eCr=o(" \u2014 "),jW=a("a"),oCr=o("FlaxGPTNeoForCausalLM"),rCr=o(" (GPT Neo model)"),tCr=l(),n4=a("li"),JFe=a("strong"),aCr=o("gptj"),nCr=o(" \u2014 "),DW=a("a"),sCr=o("FlaxGPTJForCausalLM"),lCr=o(" (GPT-J model)"),iCr=l(),s4=a("li"),YFe=a("strong"),dCr=o("xglm"),cCr=o(" \u2014 "),GW=a("a"),fCr=o("FlaxXGLMForCausalLM"),mCr=o(" (XGLM model)"),gCr=l(),KFe=a("p"),hCr=o("Examples:"),pCr=l(),f(gy.$$.fragment),QPe=l(),sf=a("h2"),l4=a("a"),ZFe=a("span"),f(hy.$$.fragment),_Cr=l(),eve=a("span"),uCr=o("FlaxAutoModelForPreTraining"),WPe=l(),Pr=a("div"),f(py.$$.fragment),bCr=l(),lf=a("p"),FCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OW=a("a"),vCr=o("from_pretrained()"),TCr=o(" class method or the "),VW=a("a"),MCr=o("from_config()"),ECr=o(` class
method.`),CCr=l(),_y=a("p"),wCr=o("This class cannot be instantiated directly using "),ove=a("code"),ACr=o("__init__()"),yCr=o(" (throws an error)."),LCr=l(),Lt=a("div"),f(uy.$$.fragment),xCr=l(),rve=a("p"),kCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SCr=l(),df=a("p"),RCr=o(`Note:
Loading a model from its configuration file does `),tve=a("strong"),BCr=o("not"),PCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),$Cr=o("from_pretrained()"),ICr=o(" to load the model weights."),qCr=l(),ave=a("p"),NCr=o("Examples:"),jCr=l(),f(by.$$.fragment),DCr=l(),xo=a("div"),f(Fy.$$.fragment),GCr=l(),nve=a("p"),OCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VCr=l(),Rn=a("p"),XCr=o("The model class to instantiate is selected based on the "),sve=a("code"),zCr=o("model_type"),QCr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),WCr=o("pretrained_model_name_or_path"),HCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(":"),YCr=l(),ce=a("ul"),i4=a("li"),dve=a("strong"),KCr=o("albert"),ZCr=o(" \u2014 "),zW=a("a"),ewr=o("FlaxAlbertForPreTraining"),owr=o(" (ALBERT model)"),rwr=l(),d4=a("li"),cve=a("strong"),twr=o("bart"),awr=o(" \u2014 "),QW=a("a"),nwr=o("FlaxBartForConditionalGeneration"),swr=o(" (BART model)"),lwr=l(),c4=a("li"),fve=a("strong"),iwr=o("bert"),dwr=o(" \u2014 "),WW=a("a"),cwr=o("FlaxBertForPreTraining"),fwr=o(" (BERT model)"),mwr=l(),f4=a("li"),mve=a("strong"),gwr=o("big_bird"),hwr=o(" \u2014 "),HW=a("a"),pwr=o("FlaxBigBirdForPreTraining"),_wr=o(" (BigBird model)"),uwr=l(),m4=a("li"),gve=a("strong"),bwr=o("electra"),Fwr=o(" \u2014 "),UW=a("a"),vwr=o("FlaxElectraForPreTraining"),Twr=o(" (ELECTRA model)"),Mwr=l(),g4=a("li"),hve=a("strong"),Ewr=o("longt5"),Cwr=o(" \u2014 "),JW=a("a"),wwr=o("FlaxLongT5ForConditionalGeneration"),Awr=o(" (LongT5 model)"),ywr=l(),h4=a("li"),pve=a("strong"),Lwr=o("mbart"),xwr=o(" \u2014 "),YW=a("a"),kwr=o("FlaxMBartForConditionalGeneration"),Swr=o(" (mBART model)"),Rwr=l(),p4=a("li"),_ve=a("strong"),Bwr=o("mt5"),Pwr=o(" \u2014 "),KW=a("a"),$wr=o("FlaxMT5ForConditionalGeneration"),Iwr=o(" (mT5 model)"),qwr=l(),_4=a("li"),uve=a("strong"),Nwr=o("roberta"),jwr=o(" \u2014 "),ZW=a("a"),Dwr=o("FlaxRobertaForMaskedLM"),Gwr=o(" (RoBERTa model)"),Owr=l(),u4=a("li"),bve=a("strong"),Vwr=o("roformer"),Xwr=o(" \u2014 "),eH=a("a"),zwr=o("FlaxRoFormerForMaskedLM"),Qwr=o(" (RoFormer model)"),Wwr=l(),b4=a("li"),Fve=a("strong"),Hwr=o("t5"),Uwr=o(" \u2014 "),oH=a("a"),Jwr=o("FlaxT5ForConditionalGeneration"),Ywr=o(" (T5 model)"),Kwr=l(),F4=a("li"),vve=a("strong"),Zwr=o("wav2vec2"),eAr=o(" \u2014 "),rH=a("a"),oAr=o("FlaxWav2Vec2ForPreTraining"),rAr=o(" (Wav2Vec2 model)"),tAr=l(),v4=a("li"),Tve=a("strong"),aAr=o("xlm-roberta"),nAr=o(" \u2014 "),tH=a("a"),sAr=o("FlaxXLMRobertaForMaskedLM"),lAr=o(" (XLM-RoBERTa model)"),iAr=l(),Mve=a("p"),dAr=o("Examples:"),cAr=l(),f(vy.$$.fragment),HPe=l(),cf=a("h2"),T4=a("a"),Eve=a("span"),f(Ty.$$.fragment),fAr=l(),Cve=a("span"),mAr=o("FlaxAutoModelForMaskedLM"),UPe=l(),$r=a("div"),f(My.$$.fragment),gAr=l(),ff=a("p"),hAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aH=a("a"),pAr=o("from_pretrained()"),_Ar=o(" class method or the "),nH=a("a"),uAr=o("from_config()"),bAr=o(` class
method.`),FAr=l(),Ey=a("p"),vAr=o("This class cannot be instantiated directly using "),wve=a("code"),TAr=o("__init__()"),MAr=o(" (throws an error)."),EAr=l(),xt=a("div"),f(Cy.$$.fragment),CAr=l(),Ave=a("p"),wAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AAr=l(),mf=a("p"),yAr=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),LAr=o("not"),xAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),kAr=o("from_pretrained()"),SAr=o(" to load the model weights."),RAr=l(),Lve=a("p"),BAr=o("Examples:"),PAr=l(),f(wy.$$.fragment),$Ar=l(),ko=a("div"),f(Ay.$$.fragment),IAr=l(),xve=a("p"),qAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NAr=l(),Bn=a("p"),jAr=o("The model class to instantiate is selected based on the "),kve=a("code"),DAr=o("model_type"),GAr=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),OAr=o("pretrained_model_name_or_path"),VAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),XAr=o("pretrained_model_name_or_path"),zAr=o(":"),QAr=l(),Fe=a("ul"),M4=a("li"),Bve=a("strong"),WAr=o("albert"),HAr=o(" \u2014 "),lH=a("a"),UAr=o("FlaxAlbertForMaskedLM"),JAr=o(" (ALBERT model)"),YAr=l(),E4=a("li"),Pve=a("strong"),KAr=o("bart"),ZAr=o(" \u2014 "),iH=a("a"),e0r=o("FlaxBartForConditionalGeneration"),o0r=o(" (BART model)"),r0r=l(),C4=a("li"),$ve=a("strong"),t0r=o("bert"),a0r=o(" \u2014 "),dH=a("a"),n0r=o("FlaxBertForMaskedLM"),s0r=o(" (BERT model)"),l0r=l(),w4=a("li"),Ive=a("strong"),i0r=o("big_bird"),d0r=o(" \u2014 "),cH=a("a"),c0r=o("FlaxBigBirdForMaskedLM"),f0r=o(" (BigBird model)"),m0r=l(),A4=a("li"),qve=a("strong"),g0r=o("distilbert"),h0r=o(" \u2014 "),fH=a("a"),p0r=o("FlaxDistilBertForMaskedLM"),_0r=o(" (DistilBERT model)"),u0r=l(),y4=a("li"),Nve=a("strong"),b0r=o("electra"),F0r=o(" \u2014 "),mH=a("a"),v0r=o("FlaxElectraForMaskedLM"),T0r=o(" (ELECTRA model)"),M0r=l(),L4=a("li"),jve=a("strong"),E0r=o("mbart"),C0r=o(" \u2014 "),gH=a("a"),w0r=o("FlaxMBartForConditionalGeneration"),A0r=o(" (mBART model)"),y0r=l(),x4=a("li"),Dve=a("strong"),L0r=o("roberta"),x0r=o(" \u2014 "),hH=a("a"),k0r=o("FlaxRobertaForMaskedLM"),S0r=o(" (RoBERTa model)"),R0r=l(),k4=a("li"),Gve=a("strong"),B0r=o("roformer"),P0r=o(" \u2014 "),pH=a("a"),$0r=o("FlaxRoFormerForMaskedLM"),I0r=o(" (RoFormer model)"),q0r=l(),S4=a("li"),Ove=a("strong"),N0r=o("xlm-roberta"),j0r=o(" \u2014 "),_H=a("a"),D0r=o("FlaxXLMRobertaForMaskedLM"),G0r=o(" (XLM-RoBERTa model)"),O0r=l(),Vve=a("p"),V0r=o("Examples:"),X0r=l(),f(yy.$$.fragment),JPe=l(),gf=a("h2"),R4=a("a"),Xve=a("span"),f(Ly.$$.fragment),z0r=l(),zve=a("span"),Q0r=o("FlaxAutoModelForSeq2SeqLM"),YPe=l(),Ir=a("div"),f(xy.$$.fragment),W0r=l(),hf=a("p"),H0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uH=a("a"),U0r=o("from_pretrained()"),J0r=o(" class method or the "),bH=a("a"),Y0r=o("from_config()"),K0r=o(` class
method.`),Z0r=l(),ky=a("p"),eyr=o("This class cannot be instantiated directly using "),Qve=a("code"),oyr=o("__init__()"),ryr=o(" (throws an error)."),tyr=l(),kt=a("div"),f(Sy.$$.fragment),ayr=l(),Wve=a("p"),nyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),syr=l(),pf=a("p"),lyr=o(`Note:
Loading a model from its configuration file does `),Hve=a("strong"),iyr=o("not"),dyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),cyr=o("from_pretrained()"),fyr=o(" to load the model weights."),myr=l(),Uve=a("p"),gyr=o("Examples:"),hyr=l(),f(Ry.$$.fragment),pyr=l(),So=a("div"),f(By.$$.fragment),_yr=l(),Jve=a("p"),uyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),byr=l(),Pn=a("p"),Fyr=o("The model class to instantiate is selected based on the "),Yve=a("code"),vyr=o("model_type"),Tyr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),Myr=o("pretrained_model_name_or_path"),Eyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),Cyr=o("pretrained_model_name_or_path"),wyr=o(":"),Ayr=l(),ve=a("ul"),B4=a("li"),eTe=a("strong"),yyr=o("bart"),Lyr=o(" \u2014 "),vH=a("a"),xyr=o("FlaxBartForConditionalGeneration"),kyr=o(" (BART model)"),Syr=l(),P4=a("li"),oTe=a("strong"),Ryr=o("blenderbot"),Byr=o(" \u2014 "),TH=a("a"),Pyr=o("FlaxBlenderbotForConditionalGeneration"),$yr=o(" (Blenderbot model)"),Iyr=l(),$4=a("li"),rTe=a("strong"),qyr=o("blenderbot-small"),Nyr=o(" \u2014 "),MH=a("a"),jyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Dyr=o(" (BlenderbotSmall model)"),Gyr=l(),I4=a("li"),tTe=a("strong"),Oyr=o("encoder-decoder"),Vyr=o(" \u2014 "),EH=a("a"),Xyr=o("FlaxEncoderDecoderModel"),zyr=o(" (Encoder decoder model)"),Qyr=l(),q4=a("li"),aTe=a("strong"),Wyr=o("longt5"),Hyr=o(" \u2014 "),CH=a("a"),Uyr=o("FlaxLongT5ForConditionalGeneration"),Jyr=o(" (LongT5 model)"),Yyr=l(),N4=a("li"),nTe=a("strong"),Kyr=o("marian"),Zyr=o(" \u2014 "),wH=a("a"),eLr=o("FlaxMarianMTModel"),oLr=o(" (Marian model)"),rLr=l(),j4=a("li"),sTe=a("strong"),tLr=o("mbart"),aLr=o(" \u2014 "),AH=a("a"),nLr=o("FlaxMBartForConditionalGeneration"),sLr=o(" (mBART model)"),lLr=l(),D4=a("li"),lTe=a("strong"),iLr=o("mt5"),dLr=o(" \u2014 "),yH=a("a"),cLr=o("FlaxMT5ForConditionalGeneration"),fLr=o(" (mT5 model)"),mLr=l(),G4=a("li"),iTe=a("strong"),gLr=o("pegasus"),hLr=o(" \u2014 "),LH=a("a"),pLr=o("FlaxPegasusForConditionalGeneration"),_Lr=o(" (Pegasus model)"),uLr=l(),O4=a("li"),dTe=a("strong"),bLr=o("t5"),FLr=o(" \u2014 "),xH=a("a"),vLr=o("FlaxT5ForConditionalGeneration"),TLr=o(" (T5 model)"),MLr=l(),cTe=a("p"),ELr=o("Examples:"),CLr=l(),f(Py.$$.fragment),KPe=l(),_f=a("h2"),V4=a("a"),fTe=a("span"),f($y.$$.fragment),wLr=l(),mTe=a("span"),ALr=o("FlaxAutoModelForSequenceClassification"),ZPe=l(),qr=a("div"),f(Iy.$$.fragment),yLr=l(),uf=a("p"),LLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=a("a"),xLr=o("from_pretrained()"),kLr=o(" class method or the "),SH=a("a"),SLr=o("from_config()"),RLr=o(` class
method.`),BLr=l(),qy=a("p"),PLr=o("This class cannot be instantiated directly using "),gTe=a("code"),$Lr=o("__init__()"),ILr=o(" (throws an error)."),qLr=l(),St=a("div"),f(Ny.$$.fragment),NLr=l(),hTe=a("p"),jLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DLr=l(),bf=a("p"),GLr=o(`Note:
Loading a model from its configuration file does `),pTe=a("strong"),OLr=o("not"),VLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),XLr=o("from_pretrained()"),zLr=o(" to load the model weights."),QLr=l(),_Te=a("p"),WLr=o("Examples:"),HLr=l(),f(jy.$$.fragment),ULr=l(),Ro=a("div"),f(Dy.$$.fragment),JLr=l(),uTe=a("p"),YLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),KLr=l(),$n=a("p"),ZLr=o("The model class to instantiate is selected based on the "),bTe=a("code"),e8r=o("model_type"),o8r=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),r8r=o("pretrained_model_name_or_path"),t8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(":"),s8r=l(),Te=a("ul"),X4=a("li"),TTe=a("strong"),l8r=o("albert"),i8r=o(" \u2014 "),BH=a("a"),d8r=o("FlaxAlbertForSequenceClassification"),c8r=o(" (ALBERT model)"),f8r=l(),z4=a("li"),MTe=a("strong"),m8r=o("bart"),g8r=o(" \u2014 "),PH=a("a"),h8r=o("FlaxBartForSequenceClassification"),p8r=o(" (BART model)"),_8r=l(),Q4=a("li"),ETe=a("strong"),u8r=o("bert"),b8r=o(" \u2014 "),$H=a("a"),F8r=o("FlaxBertForSequenceClassification"),v8r=o(" (BERT model)"),T8r=l(),W4=a("li"),CTe=a("strong"),M8r=o("big_bird"),E8r=o(" \u2014 "),IH=a("a"),C8r=o("FlaxBigBirdForSequenceClassification"),w8r=o(" (BigBird model)"),A8r=l(),H4=a("li"),wTe=a("strong"),y8r=o("distilbert"),L8r=o(" \u2014 "),qH=a("a"),x8r=o("FlaxDistilBertForSequenceClassification"),k8r=o(" (DistilBERT model)"),S8r=l(),U4=a("li"),ATe=a("strong"),R8r=o("electra"),B8r=o(" \u2014 "),NH=a("a"),P8r=o("FlaxElectraForSequenceClassification"),$8r=o(" (ELECTRA model)"),I8r=l(),J4=a("li"),yTe=a("strong"),q8r=o("mbart"),N8r=o(" \u2014 "),jH=a("a"),j8r=o("FlaxMBartForSequenceClassification"),D8r=o(" (mBART model)"),G8r=l(),Y4=a("li"),LTe=a("strong"),O8r=o("roberta"),V8r=o(" \u2014 "),DH=a("a"),X8r=o("FlaxRobertaForSequenceClassification"),z8r=o(" (RoBERTa model)"),Q8r=l(),K4=a("li"),xTe=a("strong"),W8r=o("roformer"),H8r=o(" \u2014 "),GH=a("a"),U8r=o("FlaxRoFormerForSequenceClassification"),J8r=o(" (RoFormer model)"),Y8r=l(),Z4=a("li"),kTe=a("strong"),K8r=o("xlm-roberta"),Z8r=o(" \u2014 "),OH=a("a"),exr=o("FlaxXLMRobertaForSequenceClassification"),oxr=o(" (XLM-RoBERTa model)"),rxr=l(),STe=a("p"),txr=o("Examples:"),axr=l(),f(Gy.$$.fragment),e$e=l(),Ff=a("h2"),eE=a("a"),RTe=a("span"),f(Oy.$$.fragment),nxr=l(),BTe=a("span"),sxr=o("FlaxAutoModelForQuestionAnswering"),o$e=l(),Nr=a("div"),f(Vy.$$.fragment),lxr=l(),vf=a("p"),ixr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VH=a("a"),dxr=o("from_pretrained()"),cxr=o(" class method or the "),XH=a("a"),fxr=o("from_config()"),mxr=o(` class
method.`),gxr=l(),Xy=a("p"),hxr=o("This class cannot be instantiated directly using "),PTe=a("code"),pxr=o("__init__()"),_xr=o(" (throws an error)."),uxr=l(),Rt=a("div"),f(zy.$$.fragment),bxr=l(),$Te=a("p"),Fxr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vxr=l(),Tf=a("p"),Txr=o(`Note:
Loading a model from its configuration file does `),ITe=a("strong"),Mxr=o("not"),Exr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),Cxr=o("from_pretrained()"),wxr=o(" to load the model weights."),Axr=l(),qTe=a("p"),yxr=o("Examples:"),Lxr=l(),f(Qy.$$.fragment),xxr=l(),Bo=a("div"),f(Wy.$$.fragment),kxr=l(),NTe=a("p"),Sxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Rxr=l(),In=a("p"),Bxr=o("The model class to instantiate is selected based on the "),jTe=a("code"),Pxr=o("model_type"),$xr=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),Ixr=o("pretrained_model_name_or_path"),qxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),Nxr=o("pretrained_model_name_or_path"),jxr=o(":"),Dxr=l(),Me=a("ul"),oE=a("li"),OTe=a("strong"),Gxr=o("albert"),Oxr=o(" \u2014 "),QH=a("a"),Vxr=o("FlaxAlbertForQuestionAnswering"),Xxr=o(" (ALBERT model)"),zxr=l(),rE=a("li"),VTe=a("strong"),Qxr=o("bart"),Wxr=o(" \u2014 "),WH=a("a"),Hxr=o("FlaxBartForQuestionAnswering"),Uxr=o(" (BART model)"),Jxr=l(),tE=a("li"),XTe=a("strong"),Yxr=o("bert"),Kxr=o(" \u2014 "),HH=a("a"),Zxr=o("FlaxBertForQuestionAnswering"),ekr=o(" (BERT model)"),okr=l(),aE=a("li"),zTe=a("strong"),rkr=o("big_bird"),tkr=o(" \u2014 "),UH=a("a"),akr=o("FlaxBigBirdForQuestionAnswering"),nkr=o(" (BigBird model)"),skr=l(),nE=a("li"),QTe=a("strong"),lkr=o("distilbert"),ikr=o(" \u2014 "),JH=a("a"),dkr=o("FlaxDistilBertForQuestionAnswering"),ckr=o(" (DistilBERT model)"),fkr=l(),sE=a("li"),WTe=a("strong"),mkr=o("electra"),gkr=o(" \u2014 "),YH=a("a"),hkr=o("FlaxElectraForQuestionAnswering"),pkr=o(" (ELECTRA model)"),_kr=l(),lE=a("li"),HTe=a("strong"),ukr=o("mbart"),bkr=o(" \u2014 "),KH=a("a"),Fkr=o("FlaxMBartForQuestionAnswering"),vkr=o(" (mBART model)"),Tkr=l(),iE=a("li"),UTe=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),ZH=a("a"),Ckr=o("FlaxRobertaForQuestionAnswering"),wkr=o(" (RoBERTa model)"),Akr=l(),dE=a("li"),JTe=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),eU=a("a"),xkr=o("FlaxRoFormerForQuestionAnswering"),kkr=o(" (RoFormer model)"),Skr=l(),cE=a("li"),YTe=a("strong"),Rkr=o("xlm-roberta"),Bkr=o(" \u2014 "),oU=a("a"),Pkr=o("FlaxXLMRobertaForQuestionAnswering"),$kr=o(" (XLM-RoBERTa model)"),Ikr=l(),KTe=a("p"),qkr=o("Examples:"),Nkr=l(),f(Hy.$$.fragment),r$e=l(),Mf=a("h2"),fE=a("a"),ZTe=a("span"),f(Uy.$$.fragment),jkr=l(),e7e=a("span"),Dkr=o("FlaxAutoModelForTokenClassification"),t$e=l(),jr=a("div"),f(Jy.$$.fragment),Gkr=l(),Ef=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rU=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),tU=a("a"),zkr=o("from_config()"),Qkr=o(` class
method.`),Wkr=l(),Yy=a("p"),Hkr=o("This class cannot be instantiated directly using "),o7e=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Bt=a("div"),f(Ky.$$.fragment),Kkr=l(),r7e=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eSr=l(),Cf=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),t7e=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),a7e=a("p"),lSr=o("Examples:"),iSr=l(),f(Zy.$$.fragment),dSr=l(),Po=a("div"),f(eL.$$.fragment),cSr=l(),n7e=a("p"),fSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mSr=l(),qn=a("p"),gSr=o("The model class to instantiate is selected based on the "),s7e=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),bSr=o("pretrained_model_name_or_path"),FSr=o(":"),vSr=l(),Pe=a("ul"),mE=a("li"),d7e=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),nU=a("a"),ESr=o("FlaxAlbertForTokenClassification"),CSr=o(" (ALBERT model)"),wSr=l(),gE=a("li"),c7e=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),sU=a("a"),LSr=o("FlaxBertForTokenClassification"),xSr=o(" (BERT model)"),kSr=l(),hE=a("li"),f7e=a("strong"),SSr=o("big_bird"),RSr=o(" \u2014 "),lU=a("a"),BSr=o("FlaxBigBirdForTokenClassification"),PSr=o(" (BigBird model)"),$Sr=l(),pE=a("li"),m7e=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),iU=a("a"),NSr=o("FlaxDistilBertForTokenClassification"),jSr=o(" (DistilBERT model)"),DSr=l(),_E=a("li"),g7e=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),dU=a("a"),VSr=o("FlaxElectraForTokenClassification"),XSr=o(" (ELECTRA model)"),zSr=l(),uE=a("li"),h7e=a("strong"),QSr=o("roberta"),WSr=o(" \u2014 "),cU=a("a"),HSr=o("FlaxRobertaForTokenClassification"),USr=o(" (RoBERTa model)"),JSr=l(),bE=a("li"),p7e=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),fU=a("a"),ZSr=o("FlaxRoFormerForTokenClassification"),eRr=o(" (RoFormer model)"),oRr=l(),FE=a("li"),_7e=a("strong"),rRr=o("xlm-roberta"),tRr=o(" \u2014 "),mU=a("a"),aRr=o("FlaxXLMRobertaForTokenClassification"),nRr=o(" (XLM-RoBERTa model)"),sRr=l(),u7e=a("p"),lRr=o("Examples:"),iRr=l(),f(oL.$$.fragment),a$e=l(),wf=a("h2"),vE=a("a"),b7e=a("span"),f(rL.$$.fragment),dRr=l(),F7e=a("span"),cRr=o("FlaxAutoModelForMultipleChoice"),n$e=l(),Dr=a("div"),f(tL.$$.fragment),fRr=l(),Af=a("p"),mRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gU=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),hU=a("a"),pRr=o("from_config()"),_Rr=o(` class
method.`),uRr=l(),aL=a("p"),bRr=o("This class cannot be instantiated directly using "),v7e=a("code"),FRr=o("__init__()"),vRr=o(" (throws an error)."),TRr=l(),Pt=a("div"),f(nL.$$.fragment),MRr=l(),T7e=a("p"),ERr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CRr=l(),yf=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),kRr=l(),E7e=a("p"),SRr=o("Examples:"),RRr=l(),f(sL.$$.fragment),BRr=l(),$o=a("div"),f(lL.$$.fragment),PRr=l(),C7e=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IRr=l(),Nn=a("p"),qRr=o("The model class to instantiate is selected based on the "),w7e=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),A7e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),$e=a("ul"),TE=a("li"),L7e=a("strong"),zRr=o("albert"),QRr=o(" \u2014 "),_U=a("a"),WRr=o("FlaxAlbertForMultipleChoice"),HRr=o(" (ALBERT model)"),URr=l(),ME=a("li"),x7e=a("strong"),JRr=o("bert"),YRr=o(" \u2014 "),uU=a("a"),KRr=o("FlaxBertForMultipleChoice"),ZRr=o(" (BERT model)"),eBr=l(),EE=a("li"),k7e=a("strong"),oBr=o("big_bird"),rBr=o(" \u2014 "),bU=a("a"),tBr=o("FlaxBigBirdForMultipleChoice"),aBr=o(" (BigBird model)"),nBr=l(),CE=a("li"),S7e=a("strong"),sBr=o("distilbert"),lBr=o(" \u2014 "),FU=a("a"),iBr=o("FlaxDistilBertForMultipleChoice"),dBr=o(" (DistilBERT model)"),cBr=l(),wE=a("li"),R7e=a("strong"),fBr=o("electra"),mBr=o(" \u2014 "),vU=a("a"),gBr=o("FlaxElectraForMultipleChoice"),hBr=o(" (ELECTRA model)"),pBr=l(),AE=a("li"),B7e=a("strong"),_Br=o("roberta"),uBr=o(" \u2014 "),TU=a("a"),bBr=o("FlaxRobertaForMultipleChoice"),FBr=o(" (RoBERTa model)"),vBr=l(),yE=a("li"),P7e=a("strong"),TBr=o("roformer"),MBr=o(" \u2014 "),MU=a("a"),EBr=o("FlaxRoFormerForMultipleChoice"),CBr=o(" (RoFormer model)"),wBr=l(),LE=a("li"),$7e=a("strong"),ABr=o("xlm-roberta"),yBr=o(" \u2014 "),EU=a("a"),LBr=o("FlaxXLMRobertaForMultipleChoice"),xBr=o(" (XLM-RoBERTa model)"),kBr=l(),I7e=a("p"),SBr=o("Examples:"),RBr=l(),f(iL.$$.fragment),s$e=l(),Lf=a("h2"),xE=a("a"),q7e=a("span"),f(dL.$$.fragment),BBr=l(),N7e=a("span"),PBr=o("FlaxAutoModelForNextSentencePrediction"),l$e=l(),Gr=a("div"),f(cL.$$.fragment),$Br=l(),xf=a("p"),IBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CU=a("a"),qBr=o("from_pretrained()"),NBr=o(" class method or the "),wU=a("a"),jBr=o("from_config()"),DBr=o(` class
method.`),GBr=l(),fL=a("p"),OBr=o("This class cannot be instantiated directly using "),j7e=a("code"),VBr=o("__init__()"),XBr=o(" (throws an error)."),zBr=l(),$t=a("div"),f(mL.$$.fragment),QBr=l(),D7e=a("p"),WBr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HBr=l(),kf=a("p"),UBr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),JBr=o("not"),YBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=a("a"),KBr=o("from_pretrained()"),ZBr=o(" to load the model weights."),ePr=l(),O7e=a("p"),oPr=o("Examples:"),rPr=l(),f(gL.$$.fragment),tPr=l(),Io=a("div"),f(hL.$$.fragment),aPr=l(),V7e=a("p"),nPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sPr=l(),jn=a("p"),lPr=o("The model class to instantiate is selected based on the "),X7e=a("code"),iPr=o("model_type"),dPr=o(` property of the config object (either
passed as an argument or loaded from `),z7e=a("code"),cPr=o("pretrained_model_name_or_path"),fPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=a("code"),mPr=o("pretrained_model_name_or_path"),gPr=o(":"),hPr=l(),W7e=a("ul"),kE=a("li"),H7e=a("strong"),pPr=o("bert"),_Pr=o(" \u2014 "),yU=a("a"),uPr=o("FlaxBertForNextSentencePrediction"),bPr=o(" (BERT model)"),FPr=l(),U7e=a("p"),vPr=o("Examples:"),TPr=l(),f(pL.$$.fragment),i$e=l(),Sf=a("h2"),SE=a("a"),J7e=a("span"),f(_L.$$.fragment),MPr=l(),Y7e=a("span"),EPr=o("FlaxAutoModelForImageClassification"),d$e=l(),Or=a("div"),f(uL.$$.fragment),CPr=l(),Rf=a("p"),wPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=a("a"),APr=o("from_pretrained()"),yPr=o(" class method or the "),xU=a("a"),LPr=o("from_config()"),xPr=o(` class
method.`),kPr=l(),bL=a("p"),SPr=o("This class cannot be instantiated directly using "),K7e=a("code"),RPr=o("__init__()"),BPr=o(" (throws an error)."),PPr=l(),It=a("div"),f(FL.$$.fragment),$Pr=l(),Z7e=a("p"),IPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qPr=l(),Bf=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),e9e=a("strong"),jPr=o("not"),DPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=a("a"),GPr=o("from_pretrained()"),OPr=o(" to load the model weights."),VPr=l(),o9e=a("p"),XPr=o("Examples:"),zPr=l(),f(vL.$$.fragment),QPr=l(),qo=a("div"),f(TL.$$.fragment),WPr=l(),r9e=a("p"),HPr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UPr=l(),Dn=a("p"),JPr=o("The model class to instantiate is selected based on the "),t9e=a("code"),YPr=o("model_type"),KPr=o(` property of the config object (either
passed as an argument or loaded from `),a9e=a("code"),ZPr=o("pretrained_model_name_or_path"),e$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=a("code"),o$r=o("pretrained_model_name_or_path"),r$r=o(":"),t$r=l(),ML=a("ul"),RE=a("li"),s9e=a("strong"),a$r=o("beit"),n$r=o(" \u2014 "),SU=a("a"),s$r=o("FlaxBeitForImageClassification"),l$r=o(" (BEiT model)"),i$r=l(),BE=a("li"),l9e=a("strong"),d$r=o("vit"),c$r=o(" \u2014 "),RU=a("a"),f$r=o("FlaxViTForImageClassification"),m$r=o(" (ViT model)"),g$r=l(),i9e=a("p"),h$r=o("Examples:"),p$r=l(),f(EL.$$.fragment),c$e=l(),Pf=a("h2"),PE=a("a"),d9e=a("span"),f(CL.$$.fragment),_$r=l(),c9e=a("span"),u$r=o("FlaxAutoModelForVision2Seq"),f$e=l(),Vr=a("div"),f(wL.$$.fragment),b$r=l(),$f=a("p"),F$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BU=a("a"),v$r=o("from_pretrained()"),T$r=o(" class method or the "),PU=a("a"),M$r=o("from_config()"),E$r=o(` class
method.`),C$r=l(),AL=a("p"),w$r=o("This class cannot be instantiated directly using "),f9e=a("code"),A$r=o("__init__()"),y$r=o(" (throws an error)."),L$r=l(),qt=a("div"),f(yL.$$.fragment),x$r=l(),m9e=a("p"),k$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),S$r=l(),If=a("p"),R$r=o(`Note:
Loading a model from its configuration file does `),g9e=a("strong"),B$r=o("not"),P$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),$$r=o("from_pretrained()"),I$r=o(" to load the model weights."),q$r=l(),h9e=a("p"),N$r=o("Examples:"),j$r=l(),f(LL.$$.fragment),D$r=l(),No=a("div"),f(xL.$$.fragment),G$r=l(),p9e=a("p"),O$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),V$r=l(),Gn=a("p"),X$r=o("The model class to instantiate is selected based on the "),_9e=a("code"),z$r=o("model_type"),Q$r=o(` property of the config object (either
passed as an argument or loaded from `),u9e=a("code"),W$r=o("pretrained_model_name_or_path"),H$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b9e=a("code"),U$r=o("pretrained_model_name_or_path"),J$r=o(":"),Y$r=l(),F9e=a("ul"),$E=a("li"),v9e=a("strong"),K$r=o("vision-encoder-decoder"),Z$r=o(" \u2014 "),IU=a("a"),eIr=o("FlaxVisionEncoderDecoderModel"),oIr=o(" (Vision Encoder decoder model)"),rIr=l(),T9e=a("p"),tIr=o("Examples:"),aIr=l(),f(kL.$$.fragment),this.h()},l(c){const u=fwt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),fe=n(c,"H1",{class:!0});var SL=s(fe);Ce=n(SL,"A",{id:!0,class:!0,href:!0});var M9e=s(Ce);lo=n(M9e,"SPAN",{});var E9e=s(lo);m(pe.$$.fragment,E9e),E9e.forEach(t),M9e.forEach(t),Ee=i(SL),Xo=n(SL,"SPAN",{});var sIr=s(Xo);ji=r(sIr,"Auto Classes"),sIr.forEach(t),SL.forEach(t),jf=i(c),fa=n(c,"P",{});var g$e=s(fa);Di=r(g$e,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Gi=n(g$e,"CODE",{});var lIr=s(Gi);I5=r(lIr,"from_pretrained()"),lIr.forEach(t),Df=r(g$e,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g$e.forEach(t),ke=i(c),co=n(c,"P",{});var IE=s(co);Oi=r(IE,"Instantiating one of "),On=n(IE,"A",{href:!0});var iIr=s(On);q5=r(iIr,"AutoConfig"),iIr.forEach(t),Vn=r(IE,", "),Xn=n(IE,"A",{href:!0});var dIr=s(Xn);N5=r(dIr,"AutoModel"),dIr.forEach(t),Vi=r(IE,`, and
`),zn=n(IE,"A",{href:!0});var cIr=s(zn);j5=r(cIr,"AutoTokenizer"),cIr.forEach(t),Xi=r(IE," will directly create a class of the relevant architecture. For instance"),IE.forEach(t),Gf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var h$e=s(ue);k8=r(h$e,"will create a model that is an instance of "),zi=n(h$e,"A",{href:!0});var fIr=s(zi);S8=r(fIr,"BertModel"),fIr.forEach(t),R8=r(h$e,"."),h$e.forEach(t),zo=i(c),Ga=n(c,"P",{});var p$e=s(Ga);B8=r(p$e,"There is one class of "),Of=n(p$e,"CODE",{});var mIr=s(Of);P8=r(mIr,"AutoModel"),mIr.forEach(t),Cqe=r(p$e," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p$e.forEach(t),fBe=i(c),Qi=n(c,"H2",{class:!0});var _$e=s(Qi);Vf=n(_$e,"A",{id:!0,class:!0,href:!0});var gIr=s(Vf);xY=n(gIr,"SPAN",{});var hIr=s(xY);m(D5.$$.fragment,hIr),hIr.forEach(t),gIr.forEach(t),wqe=i(_$e),kY=n(_$e,"SPAN",{});var pIr=s(kY);Aqe=r(pIr,"Extending the Auto Classes"),pIr.forEach(t),_$e.forEach(t),mBe=i(c),Qn=n(c,"P",{});var qU=s(Qn);yqe=r(qU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),SY=n(qU,"CODE",{});var _Ir=s(SY);Lqe=r(_Ir,"NewModel"),_Ir.forEach(t),xqe=r(qU,", make sure you have a "),RY=n(qU,"CODE",{});var uIr=s(RY);kqe=r(uIr,"NewModelConfig"),uIr.forEach(t),Sqe=r(qU,` then you can add those to the auto
classes like this:`),qU.forEach(t),gBe=i(c),m(G5.$$.fragment,c),hBe=i(c),$8=n(c,"P",{});var bIr=s($8);Rqe=r(bIr,"You will then be able to use the auto classes like you would usually do!"),bIr.forEach(t),pBe=i(c),m(Xf.$$.fragment,c),_Be=i(c),Wi=n(c,"H2",{class:!0});var u$e=s(Wi);zf=n(u$e,"A",{id:!0,class:!0,href:!0});var FIr=s(zf);BY=n(FIr,"SPAN",{});var vIr=s(BY);m(O5.$$.fragment,vIr),vIr.forEach(t),FIr.forEach(t),Bqe=i(u$e),PY=n(u$e,"SPAN",{});var TIr=s(PY);Pqe=r(TIr,"AutoConfig"),TIr.forEach(t),u$e.forEach(t),uBe=i(c),Qo=n(c,"DIV",{class:!0});var zs=s(Qo);m(V5.$$.fragment,zs),$qe=i(zs),X5=n(zs,"P",{});var b$e=s(X5);Iqe=r(b$e,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),I8=n(b$e,"A",{href:!0});var MIr=s(I8);qqe=r(MIr,"from_pretrained()"),MIr.forEach(t),Nqe=r(b$e," class method."),b$e.forEach(t),jqe=i(zs),z5=n(zs,"P",{});var F$e=s(z5);Dqe=r(F$e,"This class cannot be instantiated directly using "),$Y=n(F$e,"CODE",{});var EIr=s($Y);Gqe=r(EIr,"__init__()"),EIr.forEach(t),Oqe=r(F$e," (throws an error)."),F$e.forEach(t),Vqe=i(zs),mo=n(zs,"DIV",{class:!0});var ga=s(mo);m(Q5.$$.fragment,ga),Xqe=i(ga),IY=n(ga,"P",{});var CIr=s(IY);zqe=r(CIr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CIr.forEach(t),Qqe=i(ga),Hi=n(ga,"P",{});var NU=s(Hi);Wqe=r(NU,"The configuration class to instantiate is selected based on the "),qY=n(NU,"CODE",{});var wIr=s(qY);Hqe=r(wIr,"model_type"),wIr.forEach(t),Uqe=r(NU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),NY=n(NU,"CODE",{});var AIr=s(NY);Jqe=r(AIr,"pretrained_model_name_or_path"),AIr.forEach(t),Yqe=r(NU,":"),NU.forEach(t),Kqe=i(ga),F=n(ga,"UL",{});var v=s(F);Qf=n(v,"LI",{});var C9e=s(Qf);jY=n(C9e,"STRONG",{});var yIr=s(jY);Zqe=r(yIr,"albert"),yIr.forEach(t),eNe=r(C9e," \u2014 "),q8=n(C9e,"A",{href:!0});var LIr=s(q8);oNe=r(LIr,"AlbertConfig"),LIr.forEach(t),rNe=r(C9e," (ALBERT model)"),C9e.forEach(t),tNe=i(v),Wf=n(v,"LI",{});var w9e=s(Wf);DY=n(w9e,"STRONG",{});var xIr=s(DY);aNe=r(xIr,"bart"),xIr.forEach(t),nNe=r(w9e," \u2014 "),N8=n(w9e,"A",{href:!0});var kIr=s(N8);sNe=r(kIr,"BartConfig"),kIr.forEach(t),lNe=r(w9e," (BART model)"),w9e.forEach(t),iNe=i(v),Hf=n(v,"LI",{});var A9e=s(Hf);GY=n(A9e,"STRONG",{});var SIr=s(GY);dNe=r(SIr,"beit"),SIr.forEach(t),cNe=r(A9e," \u2014 "),j8=n(A9e,"A",{href:!0});var RIr=s(j8);fNe=r(RIr,"BeitConfig"),RIr.forEach(t),mNe=r(A9e," (BEiT model)"),A9e.forEach(t),gNe=i(v),Uf=n(v,"LI",{});var y9e=s(Uf);OY=n(y9e,"STRONG",{});var BIr=s(OY);hNe=r(BIr,"bert"),BIr.forEach(t),pNe=r(y9e," \u2014 "),D8=n(y9e,"A",{href:!0});var PIr=s(D8);_Ne=r(PIr,"BertConfig"),PIr.forEach(t),uNe=r(y9e," (BERT model)"),y9e.forEach(t),bNe=i(v),Jf=n(v,"LI",{});var L9e=s(Jf);VY=n(L9e,"STRONG",{});var $Ir=s(VY);FNe=r($Ir,"bert-generation"),$Ir.forEach(t),vNe=r(L9e," \u2014 "),G8=n(L9e,"A",{href:!0});var IIr=s(G8);TNe=r(IIr,"BertGenerationConfig"),IIr.forEach(t),MNe=r(L9e," (Bert Generation model)"),L9e.forEach(t),ENe=i(v),Yf=n(v,"LI",{});var x9e=s(Yf);XY=n(x9e,"STRONG",{});var qIr=s(XY);CNe=r(qIr,"big_bird"),qIr.forEach(t),wNe=r(x9e," \u2014 "),O8=n(x9e,"A",{href:!0});var NIr=s(O8);ANe=r(NIr,"BigBirdConfig"),NIr.forEach(t),yNe=r(x9e," (BigBird model)"),x9e.forEach(t),LNe=i(v),Kf=n(v,"LI",{});var k9e=s(Kf);zY=n(k9e,"STRONG",{});var jIr=s(zY);xNe=r(jIr,"bigbird_pegasus"),jIr.forEach(t),kNe=r(k9e," \u2014 "),V8=n(k9e,"A",{href:!0});var DIr=s(V8);SNe=r(DIr,"BigBirdPegasusConfig"),DIr.forEach(t),RNe=r(k9e," (BigBirdPegasus model)"),k9e.forEach(t),BNe=i(v),Zf=n(v,"LI",{});var S9e=s(Zf);QY=n(S9e,"STRONG",{});var GIr=s(QY);PNe=r(GIr,"blenderbot"),GIr.forEach(t),$Ne=r(S9e," \u2014 "),X8=n(S9e,"A",{href:!0});var OIr=s(X8);INe=r(OIr,"BlenderbotConfig"),OIr.forEach(t),qNe=r(S9e," (Blenderbot model)"),S9e.forEach(t),NNe=i(v),em=n(v,"LI",{});var R9e=s(em);WY=n(R9e,"STRONG",{});var VIr=s(WY);jNe=r(VIr,"blenderbot-small"),VIr.forEach(t),DNe=r(R9e," \u2014 "),z8=n(R9e,"A",{href:!0});var XIr=s(z8);GNe=r(XIr,"BlenderbotSmallConfig"),XIr.forEach(t),ONe=r(R9e," (BlenderbotSmall model)"),R9e.forEach(t),VNe=i(v),om=n(v,"LI",{});var B9e=s(om);HY=n(B9e,"STRONG",{});var zIr=s(HY);XNe=r(zIr,"camembert"),zIr.forEach(t),zNe=r(B9e," \u2014 "),Q8=n(B9e,"A",{href:!0});var QIr=s(Q8);QNe=r(QIr,"CamembertConfig"),QIr.forEach(t),WNe=r(B9e," (CamemBERT model)"),B9e.forEach(t),HNe=i(v),rm=n(v,"LI",{});var P9e=s(rm);UY=n(P9e,"STRONG",{});var WIr=s(UY);UNe=r(WIr,"canine"),WIr.forEach(t),JNe=r(P9e," \u2014 "),W8=n(P9e,"A",{href:!0});var HIr=s(W8);YNe=r(HIr,"CanineConfig"),HIr.forEach(t),KNe=r(P9e," (Canine model)"),P9e.forEach(t),ZNe=i(v),tm=n(v,"LI",{});var $9e=s(tm);JY=n($9e,"STRONG",{});var UIr=s(JY);eje=r(UIr,"clip"),UIr.forEach(t),oje=r($9e," \u2014 "),H8=n($9e,"A",{href:!0});var JIr=s(H8);rje=r(JIr,"CLIPConfig"),JIr.forEach(t),tje=r($9e," (CLIP model)"),$9e.forEach(t),aje=i(v),am=n(v,"LI",{});var I9e=s(am);YY=n(I9e,"STRONG",{});var YIr=s(YY);nje=r(YIr,"convbert"),YIr.forEach(t),sje=r(I9e," \u2014 "),U8=n(I9e,"A",{href:!0});var KIr=s(U8);lje=r(KIr,"ConvBertConfig"),KIr.forEach(t),ije=r(I9e," (ConvBERT model)"),I9e.forEach(t),dje=i(v),nm=n(v,"LI",{});var q9e=s(nm);KY=n(q9e,"STRONG",{});var ZIr=s(KY);cje=r(ZIr,"convnext"),ZIr.forEach(t),fje=r(q9e," \u2014 "),J8=n(q9e,"A",{href:!0});var eqr=s(J8);mje=r(eqr,"ConvNextConfig"),eqr.forEach(t),gje=r(q9e," (ConvNext model)"),q9e.forEach(t),hje=i(v),sm=n(v,"LI",{});var N9e=s(sm);ZY=n(N9e,"STRONG",{});var oqr=s(ZY);pje=r(oqr,"ctrl"),oqr.forEach(t),_je=r(N9e," \u2014 "),Y8=n(N9e,"A",{href:!0});var rqr=s(Y8);uje=r(rqr,"CTRLConfig"),rqr.forEach(t),bje=r(N9e," (CTRL model)"),N9e.forEach(t),Fje=i(v),lm=n(v,"LI",{});var j9e=s(lm);eK=n(j9e,"STRONG",{});var tqr=s(eK);vje=r(tqr,"data2vec-audio"),tqr.forEach(t),Tje=r(j9e," \u2014 "),K8=n(j9e,"A",{href:!0});var aqr=s(K8);Mje=r(aqr,"Data2VecAudioConfig"),aqr.forEach(t),Eje=r(j9e," (Data2VecAudio model)"),j9e.forEach(t),Cje=i(v),im=n(v,"LI",{});var D9e=s(im);oK=n(D9e,"STRONG",{});var nqr=s(oK);wje=r(nqr,"data2vec-text"),nqr.forEach(t),Aje=r(D9e," \u2014 "),Z8=n(D9e,"A",{href:!0});var sqr=s(Z8);yje=r(sqr,"Data2VecTextConfig"),sqr.forEach(t),Lje=r(D9e," (Data2VecText model)"),D9e.forEach(t),xje=i(v),dm=n(v,"LI",{});var G9e=s(dm);rK=n(G9e,"STRONG",{});var lqr=s(rK);kje=r(lqr,"data2vec-vision"),lqr.forEach(t),Sje=r(G9e," \u2014 "),ex=n(G9e,"A",{href:!0});var iqr=s(ex);Rje=r(iqr,"Data2VecVisionConfig"),iqr.forEach(t),Bje=r(G9e," (Data2VecVision model)"),G9e.forEach(t),Pje=i(v),cm=n(v,"LI",{});var O9e=s(cm);tK=n(O9e,"STRONG",{});var dqr=s(tK);$je=r(dqr,"deberta"),dqr.forEach(t),Ije=r(O9e," \u2014 "),ox=n(O9e,"A",{href:!0});var cqr=s(ox);qje=r(cqr,"DebertaConfig"),cqr.forEach(t),Nje=r(O9e," (DeBERTa model)"),O9e.forEach(t),jje=i(v),fm=n(v,"LI",{});var V9e=s(fm);aK=n(V9e,"STRONG",{});var fqr=s(aK);Dje=r(fqr,"deberta-v2"),fqr.forEach(t),Gje=r(V9e," \u2014 "),rx=n(V9e,"A",{href:!0});var mqr=s(rx);Oje=r(mqr,"DebertaV2Config"),mqr.forEach(t),Vje=r(V9e," (DeBERTa-v2 model)"),V9e.forEach(t),Xje=i(v),mm=n(v,"LI",{});var X9e=s(mm);nK=n(X9e,"STRONG",{});var gqr=s(nK);zje=r(gqr,"decision_transformer"),gqr.forEach(t),Qje=r(X9e," \u2014 "),tx=n(X9e,"A",{href:!0});var hqr=s(tx);Wje=r(hqr,"DecisionTransformerConfig"),hqr.forEach(t),Hje=r(X9e," (Decision Transformer model)"),X9e.forEach(t),Uje=i(v),gm=n(v,"LI",{});var z9e=s(gm);sK=n(z9e,"STRONG",{});var pqr=s(sK);Jje=r(pqr,"deit"),pqr.forEach(t),Yje=r(z9e," \u2014 "),ax=n(z9e,"A",{href:!0});var _qr=s(ax);Kje=r(_qr,"DeiTConfig"),_qr.forEach(t),Zje=r(z9e," (DeiT model)"),z9e.forEach(t),eDe=i(v),hm=n(v,"LI",{});var Q9e=s(hm);lK=n(Q9e,"STRONG",{});var uqr=s(lK);oDe=r(uqr,"detr"),uqr.forEach(t),rDe=r(Q9e," \u2014 "),nx=n(Q9e,"A",{href:!0});var bqr=s(nx);tDe=r(bqr,"DetrConfig"),bqr.forEach(t),aDe=r(Q9e," (DETR model)"),Q9e.forEach(t),nDe=i(v),pm=n(v,"LI",{});var W9e=s(pm);iK=n(W9e,"STRONG",{});var Fqr=s(iK);sDe=r(Fqr,"distilbert"),Fqr.forEach(t),lDe=r(W9e," \u2014 "),sx=n(W9e,"A",{href:!0});var vqr=s(sx);iDe=r(vqr,"DistilBertConfig"),vqr.forEach(t),dDe=r(W9e," (DistilBERT model)"),W9e.forEach(t),cDe=i(v),_m=n(v,"LI",{});var H9e=s(_m);dK=n(H9e,"STRONG",{});var Tqr=s(dK);fDe=r(Tqr,"dpr"),Tqr.forEach(t),mDe=r(H9e," \u2014 "),lx=n(H9e,"A",{href:!0});var Mqr=s(lx);gDe=r(Mqr,"DPRConfig"),Mqr.forEach(t),hDe=r(H9e," (DPR model)"),H9e.forEach(t),pDe=i(v),um=n(v,"LI",{});var U9e=s(um);cK=n(U9e,"STRONG",{});var Eqr=s(cK);_De=r(Eqr,"dpt"),Eqr.forEach(t),uDe=r(U9e," \u2014 "),ix=n(U9e,"A",{href:!0});var Cqr=s(ix);bDe=r(Cqr,"DPTConfig"),Cqr.forEach(t),FDe=r(U9e," (DPT model)"),U9e.forEach(t),vDe=i(v),bm=n(v,"LI",{});var J9e=s(bm);fK=n(J9e,"STRONG",{});var wqr=s(fK);TDe=r(wqr,"electra"),wqr.forEach(t),MDe=r(J9e," \u2014 "),dx=n(J9e,"A",{href:!0});var Aqr=s(dx);EDe=r(Aqr,"ElectraConfig"),Aqr.forEach(t),CDe=r(J9e," (ELECTRA model)"),J9e.forEach(t),wDe=i(v),Fm=n(v,"LI",{});var Y9e=s(Fm);mK=n(Y9e,"STRONG",{});var yqr=s(mK);ADe=r(yqr,"encoder-decoder"),yqr.forEach(t),yDe=r(Y9e," \u2014 "),cx=n(Y9e,"A",{href:!0});var Lqr=s(cx);LDe=r(Lqr,"EncoderDecoderConfig"),Lqr.forEach(t),xDe=r(Y9e," (Encoder decoder model)"),Y9e.forEach(t),kDe=i(v),vm=n(v,"LI",{});var K9e=s(vm);gK=n(K9e,"STRONG",{});var xqr=s(gK);SDe=r(xqr,"flaubert"),xqr.forEach(t),RDe=r(K9e," \u2014 "),fx=n(K9e,"A",{href:!0});var kqr=s(fx);BDe=r(kqr,"FlaubertConfig"),kqr.forEach(t),PDe=r(K9e," (FlauBERT model)"),K9e.forEach(t),$De=i(v),Tm=n(v,"LI",{});var Z9e=s(Tm);hK=n(Z9e,"STRONG",{});var Sqr=s(hK);IDe=r(Sqr,"fnet"),Sqr.forEach(t),qDe=r(Z9e," \u2014 "),mx=n(Z9e,"A",{href:!0});var Rqr=s(mx);NDe=r(Rqr,"FNetConfig"),Rqr.forEach(t),jDe=r(Z9e," (FNet model)"),Z9e.forEach(t),DDe=i(v),Mm=n(v,"LI",{});var eMe=s(Mm);pK=n(eMe,"STRONG",{});var Bqr=s(pK);GDe=r(Bqr,"fsmt"),Bqr.forEach(t),ODe=r(eMe," \u2014 "),gx=n(eMe,"A",{href:!0});var Pqr=s(gx);VDe=r(Pqr,"FSMTConfig"),Pqr.forEach(t),XDe=r(eMe," (FairSeq Machine-Translation model)"),eMe.forEach(t),zDe=i(v),Em=n(v,"LI",{});var oMe=s(Em);_K=n(oMe,"STRONG",{});var $qr=s(_K);QDe=r($qr,"funnel"),$qr.forEach(t),WDe=r(oMe," \u2014 "),hx=n(oMe,"A",{href:!0});var Iqr=s(hx);HDe=r(Iqr,"FunnelConfig"),Iqr.forEach(t),UDe=r(oMe," (Funnel Transformer model)"),oMe.forEach(t),JDe=i(v),Cm=n(v,"LI",{});var rMe=s(Cm);uK=n(rMe,"STRONG",{});var qqr=s(uK);YDe=r(qqr,"glpn"),qqr.forEach(t),KDe=r(rMe," \u2014 "),px=n(rMe,"A",{href:!0});var Nqr=s(px);ZDe=r(Nqr,"GLPNConfig"),Nqr.forEach(t),eGe=r(rMe," (GLPN model)"),rMe.forEach(t),oGe=i(v),wm=n(v,"LI",{});var tMe=s(wm);bK=n(tMe,"STRONG",{});var jqr=s(bK);rGe=r(jqr,"gpt2"),jqr.forEach(t),tGe=r(tMe," \u2014 "),_x=n(tMe,"A",{href:!0});var Dqr=s(_x);aGe=r(Dqr,"GPT2Config"),Dqr.forEach(t),nGe=r(tMe," (OpenAI GPT-2 model)"),tMe.forEach(t),sGe=i(v),Am=n(v,"LI",{});var aMe=s(Am);FK=n(aMe,"STRONG",{});var Gqr=s(FK);lGe=r(Gqr,"gpt_neo"),Gqr.forEach(t),iGe=r(aMe," \u2014 "),ux=n(aMe,"A",{href:!0});var Oqr=s(ux);dGe=r(Oqr,"GPTNeoConfig"),Oqr.forEach(t),cGe=r(aMe," (GPT Neo model)"),aMe.forEach(t),fGe=i(v),ym=n(v,"LI",{});var nMe=s(ym);vK=n(nMe,"STRONG",{});var Vqr=s(vK);mGe=r(Vqr,"gptj"),Vqr.forEach(t),gGe=r(nMe," \u2014 "),bx=n(nMe,"A",{href:!0});var Xqr=s(bx);hGe=r(Xqr,"GPTJConfig"),Xqr.forEach(t),pGe=r(nMe," (GPT-J model)"),nMe.forEach(t),_Ge=i(v),Lm=n(v,"LI",{});var sMe=s(Lm);TK=n(sMe,"STRONG",{});var zqr=s(TK);uGe=r(zqr,"hubert"),zqr.forEach(t),bGe=r(sMe," \u2014 "),Fx=n(sMe,"A",{href:!0});var Qqr=s(Fx);FGe=r(Qqr,"HubertConfig"),Qqr.forEach(t),vGe=r(sMe," (Hubert model)"),sMe.forEach(t),TGe=i(v),xm=n(v,"LI",{});var lMe=s(xm);MK=n(lMe,"STRONG",{});var Wqr=s(MK);MGe=r(Wqr,"ibert"),Wqr.forEach(t),EGe=r(lMe," \u2014 "),vx=n(lMe,"A",{href:!0});var Hqr=s(vx);CGe=r(Hqr,"IBertConfig"),Hqr.forEach(t),wGe=r(lMe," (I-BERT model)"),lMe.forEach(t),AGe=i(v),km=n(v,"LI",{});var iMe=s(km);EK=n(iMe,"STRONG",{});var Uqr=s(EK);yGe=r(Uqr,"imagegpt"),Uqr.forEach(t),LGe=r(iMe," \u2014 "),Tx=n(iMe,"A",{href:!0});var Jqr=s(Tx);xGe=r(Jqr,"ImageGPTConfig"),Jqr.forEach(t),kGe=r(iMe," (ImageGPT model)"),iMe.forEach(t),SGe=i(v),Sm=n(v,"LI",{});var dMe=s(Sm);CK=n(dMe,"STRONG",{});var Yqr=s(CK);RGe=r(Yqr,"layoutlm"),Yqr.forEach(t),BGe=r(dMe," \u2014 "),Mx=n(dMe,"A",{href:!0});var Kqr=s(Mx);PGe=r(Kqr,"LayoutLMConfig"),Kqr.forEach(t),$Ge=r(dMe," (LayoutLM model)"),dMe.forEach(t),IGe=i(v),Rm=n(v,"LI",{});var cMe=s(Rm);wK=n(cMe,"STRONG",{});var Zqr=s(wK);qGe=r(Zqr,"layoutlmv2"),Zqr.forEach(t),NGe=r(cMe," \u2014 "),Ex=n(cMe,"A",{href:!0});var eNr=s(Ex);jGe=r(eNr,"LayoutLMv2Config"),eNr.forEach(t),DGe=r(cMe," (LayoutLMv2 model)"),cMe.forEach(t),GGe=i(v),Bm=n(v,"LI",{});var fMe=s(Bm);AK=n(fMe,"STRONG",{});var oNr=s(AK);OGe=r(oNr,"led"),oNr.forEach(t),VGe=r(fMe," \u2014 "),Cx=n(fMe,"A",{href:!0});var rNr=s(Cx);XGe=r(rNr,"LEDConfig"),rNr.forEach(t),zGe=r(fMe," (LED model)"),fMe.forEach(t),QGe=i(v),Pm=n(v,"LI",{});var mMe=s(Pm);yK=n(mMe,"STRONG",{});var tNr=s(yK);WGe=r(tNr,"longformer"),tNr.forEach(t),HGe=r(mMe," \u2014 "),wx=n(mMe,"A",{href:!0});var aNr=s(wx);UGe=r(aNr,"LongformerConfig"),aNr.forEach(t),JGe=r(mMe," (Longformer model)"),mMe.forEach(t),YGe=i(v),$m=n(v,"LI",{});var gMe=s($m);LK=n(gMe,"STRONG",{});var nNr=s(LK);KGe=r(nNr,"longt5"),nNr.forEach(t),ZGe=r(gMe," \u2014 "),Ax=n(gMe,"A",{href:!0});var sNr=s(Ax);eOe=r(sNr,"LongT5Config"),sNr.forEach(t),oOe=r(gMe," (LongT5 model)"),gMe.forEach(t),rOe=i(v),Im=n(v,"LI",{});var hMe=s(Im);xK=n(hMe,"STRONG",{});var lNr=s(xK);tOe=r(lNr,"luke"),lNr.forEach(t),aOe=r(hMe," \u2014 "),yx=n(hMe,"A",{href:!0});var iNr=s(yx);nOe=r(iNr,"LukeConfig"),iNr.forEach(t),sOe=r(hMe," (LUKE model)"),hMe.forEach(t),lOe=i(v),qm=n(v,"LI",{});var pMe=s(qm);kK=n(pMe,"STRONG",{});var dNr=s(kK);iOe=r(dNr,"lxmert"),dNr.forEach(t),dOe=r(pMe," \u2014 "),Lx=n(pMe,"A",{href:!0});var cNr=s(Lx);cOe=r(cNr,"LxmertConfig"),cNr.forEach(t),fOe=r(pMe," (LXMERT model)"),pMe.forEach(t),mOe=i(v),Nm=n(v,"LI",{});var _Me=s(Nm);SK=n(_Me,"STRONG",{});var fNr=s(SK);gOe=r(fNr,"m2m_100"),fNr.forEach(t),hOe=r(_Me," \u2014 "),xx=n(_Me,"A",{href:!0});var mNr=s(xx);pOe=r(mNr,"M2M100Config"),mNr.forEach(t),_Oe=r(_Me," (M2M100 model)"),_Me.forEach(t),uOe=i(v),jm=n(v,"LI",{});var uMe=s(jm);RK=n(uMe,"STRONG",{});var gNr=s(RK);bOe=r(gNr,"marian"),gNr.forEach(t),FOe=r(uMe," \u2014 "),kx=n(uMe,"A",{href:!0});var hNr=s(kx);vOe=r(hNr,"MarianConfig"),hNr.forEach(t),TOe=r(uMe," (Marian model)"),uMe.forEach(t),MOe=i(v),Dm=n(v,"LI",{});var bMe=s(Dm);BK=n(bMe,"STRONG",{});var pNr=s(BK);EOe=r(pNr,"maskformer"),pNr.forEach(t),COe=r(bMe," \u2014 "),Sx=n(bMe,"A",{href:!0});var _Nr=s(Sx);wOe=r(_Nr,"MaskFormerConfig"),_Nr.forEach(t),AOe=r(bMe," (MaskFormer model)"),bMe.forEach(t),yOe=i(v),Gm=n(v,"LI",{});var FMe=s(Gm);PK=n(FMe,"STRONG",{});var uNr=s(PK);LOe=r(uNr,"mbart"),uNr.forEach(t),xOe=r(FMe," \u2014 "),Rx=n(FMe,"A",{href:!0});var bNr=s(Rx);kOe=r(bNr,"MBartConfig"),bNr.forEach(t),SOe=r(FMe," (mBART model)"),FMe.forEach(t),ROe=i(v),Om=n(v,"LI",{});var vMe=s(Om);$K=n(vMe,"STRONG",{});var FNr=s($K);BOe=r(FNr,"megatron-bert"),FNr.forEach(t),POe=r(vMe," \u2014 "),Bx=n(vMe,"A",{href:!0});var vNr=s(Bx);$Oe=r(vNr,"MegatronBertConfig"),vNr.forEach(t),IOe=r(vMe," (MegatronBert model)"),vMe.forEach(t),qOe=i(v),Vm=n(v,"LI",{});var TMe=s(Vm);IK=n(TMe,"STRONG",{});var TNr=s(IK);NOe=r(TNr,"mobilebert"),TNr.forEach(t),jOe=r(TMe," \u2014 "),Px=n(TMe,"A",{href:!0});var MNr=s(Px);DOe=r(MNr,"MobileBertConfig"),MNr.forEach(t),GOe=r(TMe," (MobileBERT model)"),TMe.forEach(t),OOe=i(v),Xm=n(v,"LI",{});var MMe=s(Xm);qK=n(MMe,"STRONG",{});var ENr=s(qK);VOe=r(ENr,"mpnet"),ENr.forEach(t),XOe=r(MMe," \u2014 "),$x=n(MMe,"A",{href:!0});var CNr=s($x);zOe=r(CNr,"MPNetConfig"),CNr.forEach(t),QOe=r(MMe," (MPNet model)"),MMe.forEach(t),WOe=i(v),zm=n(v,"LI",{});var EMe=s(zm);NK=n(EMe,"STRONG",{});var wNr=s(NK);HOe=r(wNr,"mt5"),wNr.forEach(t),UOe=r(EMe," \u2014 "),Ix=n(EMe,"A",{href:!0});var ANr=s(Ix);JOe=r(ANr,"MT5Config"),ANr.forEach(t),YOe=r(EMe," (mT5 model)"),EMe.forEach(t),KOe=i(v),Qm=n(v,"LI",{});var CMe=s(Qm);jK=n(CMe,"STRONG",{});var yNr=s(jK);ZOe=r(yNr,"nystromformer"),yNr.forEach(t),eVe=r(CMe," \u2014 "),qx=n(CMe,"A",{href:!0});var LNr=s(qx);oVe=r(LNr,"NystromformerConfig"),LNr.forEach(t),rVe=r(CMe," (Nystromformer model)"),CMe.forEach(t),tVe=i(v),Wm=n(v,"LI",{});var wMe=s(Wm);DK=n(wMe,"STRONG",{});var xNr=s(DK);aVe=r(xNr,"openai-gpt"),xNr.forEach(t),nVe=r(wMe," \u2014 "),Nx=n(wMe,"A",{href:!0});var kNr=s(Nx);sVe=r(kNr,"OpenAIGPTConfig"),kNr.forEach(t),lVe=r(wMe," (OpenAI GPT model)"),wMe.forEach(t),iVe=i(v),Hm=n(v,"LI",{});var AMe=s(Hm);GK=n(AMe,"STRONG",{});var SNr=s(GK);dVe=r(SNr,"pegasus"),SNr.forEach(t),cVe=r(AMe," \u2014 "),jx=n(AMe,"A",{href:!0});var RNr=s(jx);fVe=r(RNr,"PegasusConfig"),RNr.forEach(t),mVe=r(AMe," (Pegasus model)"),AMe.forEach(t),gVe=i(v),Um=n(v,"LI",{});var yMe=s(Um);OK=n(yMe,"STRONG",{});var BNr=s(OK);hVe=r(BNr,"perceiver"),BNr.forEach(t),pVe=r(yMe," \u2014 "),Dx=n(yMe,"A",{href:!0});var PNr=s(Dx);_Ve=r(PNr,"PerceiverConfig"),PNr.forEach(t),uVe=r(yMe," (Perceiver model)"),yMe.forEach(t),bVe=i(v),Jm=n(v,"LI",{});var LMe=s(Jm);VK=n(LMe,"STRONG",{});var $Nr=s(VK);FVe=r($Nr,"plbart"),$Nr.forEach(t),vVe=r(LMe," \u2014 "),Gx=n(LMe,"A",{href:!0});var INr=s(Gx);TVe=r(INr,"PLBartConfig"),INr.forEach(t),MVe=r(LMe," (PLBart model)"),LMe.forEach(t),EVe=i(v),Ym=n(v,"LI",{});var xMe=s(Ym);XK=n(xMe,"STRONG",{});var qNr=s(XK);CVe=r(qNr,"poolformer"),qNr.forEach(t),wVe=r(xMe," \u2014 "),Ox=n(xMe,"A",{href:!0});var NNr=s(Ox);AVe=r(NNr,"PoolFormerConfig"),NNr.forEach(t),yVe=r(xMe," (PoolFormer model)"),xMe.forEach(t),LVe=i(v),Km=n(v,"LI",{});var kMe=s(Km);zK=n(kMe,"STRONG",{});var jNr=s(zK);xVe=r(jNr,"prophetnet"),jNr.forEach(t),kVe=r(kMe," \u2014 "),Vx=n(kMe,"A",{href:!0});var DNr=s(Vx);SVe=r(DNr,"ProphetNetConfig"),DNr.forEach(t),RVe=r(kMe," (ProphetNet model)"),kMe.forEach(t),BVe=i(v),Zm=n(v,"LI",{});var SMe=s(Zm);QK=n(SMe,"STRONG",{});var GNr=s(QK);PVe=r(GNr,"qdqbert"),GNr.forEach(t),$Ve=r(SMe," \u2014 "),Xx=n(SMe,"A",{href:!0});var ONr=s(Xx);IVe=r(ONr,"QDQBertConfig"),ONr.forEach(t),qVe=r(SMe," (QDQBert model)"),SMe.forEach(t),NVe=i(v),eg=n(v,"LI",{});var RMe=s(eg);WK=n(RMe,"STRONG",{});var VNr=s(WK);jVe=r(VNr,"rag"),VNr.forEach(t),DVe=r(RMe," \u2014 "),zx=n(RMe,"A",{href:!0});var XNr=s(zx);GVe=r(XNr,"RagConfig"),XNr.forEach(t),OVe=r(RMe," (RAG model)"),RMe.forEach(t),VVe=i(v),og=n(v,"LI",{});var BMe=s(og);HK=n(BMe,"STRONG",{});var zNr=s(HK);XVe=r(zNr,"realm"),zNr.forEach(t),zVe=r(BMe," \u2014 "),Qx=n(BMe,"A",{href:!0});var QNr=s(Qx);QVe=r(QNr,"RealmConfig"),QNr.forEach(t),WVe=r(BMe," (Realm model)"),BMe.forEach(t),HVe=i(v),rg=n(v,"LI",{});var PMe=s(rg);UK=n(PMe,"STRONG",{});var WNr=s(UK);UVe=r(WNr,"reformer"),WNr.forEach(t),JVe=r(PMe," \u2014 "),Wx=n(PMe,"A",{href:!0});var HNr=s(Wx);YVe=r(HNr,"ReformerConfig"),HNr.forEach(t),KVe=r(PMe," (Reformer model)"),PMe.forEach(t),ZVe=i(v),tg=n(v,"LI",{});var $Me=s(tg);JK=n($Me,"STRONG",{});var UNr=s(JK);eXe=r(UNr,"regnet"),UNr.forEach(t),oXe=r($Me," \u2014 "),Hx=n($Me,"A",{href:!0});var JNr=s(Hx);rXe=r(JNr,"RegNetConfig"),JNr.forEach(t),tXe=r($Me," (RegNet model)"),$Me.forEach(t),aXe=i(v),ag=n(v,"LI",{});var IMe=s(ag);YK=n(IMe,"STRONG",{});var YNr=s(YK);nXe=r(YNr,"rembert"),YNr.forEach(t),sXe=r(IMe," \u2014 "),Ux=n(IMe,"A",{href:!0});var KNr=s(Ux);lXe=r(KNr,"RemBertConfig"),KNr.forEach(t),iXe=r(IMe," (RemBERT model)"),IMe.forEach(t),dXe=i(v),ng=n(v,"LI",{});var qMe=s(ng);KK=n(qMe,"STRONG",{});var ZNr=s(KK);cXe=r(ZNr,"resnet"),ZNr.forEach(t),fXe=r(qMe," \u2014 "),Jx=n(qMe,"A",{href:!0});var ejr=s(Jx);mXe=r(ejr,"ResNetConfig"),ejr.forEach(t),gXe=r(qMe," (ResNet model)"),qMe.forEach(t),hXe=i(v),sg=n(v,"LI",{});var NMe=s(sg);ZK=n(NMe,"STRONG",{});var ojr=s(ZK);pXe=r(ojr,"retribert"),ojr.forEach(t),_Xe=r(NMe," \u2014 "),Yx=n(NMe,"A",{href:!0});var rjr=s(Yx);uXe=r(rjr,"RetriBertConfig"),rjr.forEach(t),bXe=r(NMe," (RetriBERT model)"),NMe.forEach(t),FXe=i(v),lg=n(v,"LI",{});var jMe=s(lg);eZ=n(jMe,"STRONG",{});var tjr=s(eZ);vXe=r(tjr,"roberta"),tjr.forEach(t),TXe=r(jMe," \u2014 "),Kx=n(jMe,"A",{href:!0});var ajr=s(Kx);MXe=r(ajr,"RobertaConfig"),ajr.forEach(t),EXe=r(jMe," (RoBERTa model)"),jMe.forEach(t),CXe=i(v),ig=n(v,"LI",{});var DMe=s(ig);oZ=n(DMe,"STRONG",{});var njr=s(oZ);wXe=r(njr,"roformer"),njr.forEach(t),AXe=r(DMe," \u2014 "),Zx=n(DMe,"A",{href:!0});var sjr=s(Zx);yXe=r(sjr,"RoFormerConfig"),sjr.forEach(t),LXe=r(DMe," (RoFormer model)"),DMe.forEach(t),xXe=i(v),dg=n(v,"LI",{});var GMe=s(dg);rZ=n(GMe,"STRONG",{});var ljr=s(rZ);kXe=r(ljr,"segformer"),ljr.forEach(t),SXe=r(GMe," \u2014 "),ek=n(GMe,"A",{href:!0});var ijr=s(ek);RXe=r(ijr,"SegformerConfig"),ijr.forEach(t),BXe=r(GMe," (SegFormer model)"),GMe.forEach(t),PXe=i(v),cg=n(v,"LI",{});var OMe=s(cg);tZ=n(OMe,"STRONG",{});var djr=s(tZ);$Xe=r(djr,"sew"),djr.forEach(t),IXe=r(OMe," \u2014 "),ok=n(OMe,"A",{href:!0});var cjr=s(ok);qXe=r(cjr,"SEWConfig"),cjr.forEach(t),NXe=r(OMe," (SEW model)"),OMe.forEach(t),jXe=i(v),fg=n(v,"LI",{});var VMe=s(fg);aZ=n(VMe,"STRONG",{});var fjr=s(aZ);DXe=r(fjr,"sew-d"),fjr.forEach(t),GXe=r(VMe," \u2014 "),rk=n(VMe,"A",{href:!0});var mjr=s(rk);OXe=r(mjr,"SEWDConfig"),mjr.forEach(t),VXe=r(VMe," (SEW-D model)"),VMe.forEach(t),XXe=i(v),mg=n(v,"LI",{});var XMe=s(mg);nZ=n(XMe,"STRONG",{});var gjr=s(nZ);zXe=r(gjr,"speech-encoder-decoder"),gjr.forEach(t),QXe=r(XMe," \u2014 "),tk=n(XMe,"A",{href:!0});var hjr=s(tk);WXe=r(hjr,"SpeechEncoderDecoderConfig"),hjr.forEach(t),HXe=r(XMe," (Speech Encoder decoder model)"),XMe.forEach(t),UXe=i(v),gg=n(v,"LI",{});var zMe=s(gg);sZ=n(zMe,"STRONG",{});var pjr=s(sZ);JXe=r(pjr,"speech_to_text"),pjr.forEach(t),YXe=r(zMe," \u2014 "),ak=n(zMe,"A",{href:!0});var _jr=s(ak);KXe=r(_jr,"Speech2TextConfig"),_jr.forEach(t),ZXe=r(zMe," (Speech2Text model)"),zMe.forEach(t),eze=i(v),hg=n(v,"LI",{});var QMe=s(hg);lZ=n(QMe,"STRONG",{});var ujr=s(lZ);oze=r(ujr,"speech_to_text_2"),ujr.forEach(t),rze=r(QMe," \u2014 "),nk=n(QMe,"A",{href:!0});var bjr=s(nk);tze=r(bjr,"Speech2Text2Config"),bjr.forEach(t),aze=r(QMe," (Speech2Text2 model)"),QMe.forEach(t),nze=i(v),pg=n(v,"LI",{});var WMe=s(pg);iZ=n(WMe,"STRONG",{});var Fjr=s(iZ);sze=r(Fjr,"splinter"),Fjr.forEach(t),lze=r(WMe," \u2014 "),sk=n(WMe,"A",{href:!0});var vjr=s(sk);ize=r(vjr,"SplinterConfig"),vjr.forEach(t),dze=r(WMe," (Splinter model)"),WMe.forEach(t),cze=i(v),_g=n(v,"LI",{});var HMe=s(_g);dZ=n(HMe,"STRONG",{});var Tjr=s(dZ);fze=r(Tjr,"squeezebert"),Tjr.forEach(t),mze=r(HMe," \u2014 "),lk=n(HMe,"A",{href:!0});var Mjr=s(lk);gze=r(Mjr,"SqueezeBertConfig"),Mjr.forEach(t),hze=r(HMe," (SqueezeBERT model)"),HMe.forEach(t),pze=i(v),ug=n(v,"LI",{});var UMe=s(ug);cZ=n(UMe,"STRONG",{});var Ejr=s(cZ);_ze=r(Ejr,"swin"),Ejr.forEach(t),uze=r(UMe," \u2014 "),ik=n(UMe,"A",{href:!0});var Cjr=s(ik);bze=r(Cjr,"SwinConfig"),Cjr.forEach(t),Fze=r(UMe," (Swin model)"),UMe.forEach(t),vze=i(v),bg=n(v,"LI",{});var JMe=s(bg);fZ=n(JMe,"STRONG",{});var wjr=s(fZ);Tze=r(wjr,"t5"),wjr.forEach(t),Mze=r(JMe," \u2014 "),dk=n(JMe,"A",{href:!0});var Ajr=s(dk);Eze=r(Ajr,"T5Config"),Ajr.forEach(t),Cze=r(JMe," (T5 model)"),JMe.forEach(t),wze=i(v),Fg=n(v,"LI",{});var YMe=s(Fg);mZ=n(YMe,"STRONG",{});var yjr=s(mZ);Aze=r(yjr,"tapas"),yjr.forEach(t),yze=r(YMe," \u2014 "),ck=n(YMe,"A",{href:!0});var Ljr=s(ck);Lze=r(Ljr,"TapasConfig"),Ljr.forEach(t),xze=r(YMe," (TAPAS model)"),YMe.forEach(t),kze=i(v),vg=n(v,"LI",{});var KMe=s(vg);gZ=n(KMe,"STRONG",{});var xjr=s(gZ);Sze=r(xjr,"tapex"),xjr.forEach(t),Rze=r(KMe," \u2014 "),fk=n(KMe,"A",{href:!0});var kjr=s(fk);Bze=r(kjr,"BartConfig"),kjr.forEach(t),Pze=r(KMe," (TAPEX model)"),KMe.forEach(t),$ze=i(v),Tg=n(v,"LI",{});var ZMe=s(Tg);hZ=n(ZMe,"STRONG",{});var Sjr=s(hZ);Ize=r(Sjr,"transfo-xl"),Sjr.forEach(t),qze=r(ZMe," \u2014 "),mk=n(ZMe,"A",{href:!0});var Rjr=s(mk);Nze=r(Rjr,"TransfoXLConfig"),Rjr.forEach(t),jze=r(ZMe," (Transformer-XL model)"),ZMe.forEach(t),Dze=i(v),Mg=n(v,"LI",{});var e4e=s(Mg);pZ=n(e4e,"STRONG",{});var Bjr=s(pZ);Gze=r(Bjr,"trocr"),Bjr.forEach(t),Oze=r(e4e," \u2014 "),gk=n(e4e,"A",{href:!0});var Pjr=s(gk);Vze=r(Pjr,"TrOCRConfig"),Pjr.forEach(t),Xze=r(e4e," (TrOCR model)"),e4e.forEach(t),zze=i(v),Eg=n(v,"LI",{});var o4e=s(Eg);_Z=n(o4e,"STRONG",{});var $jr=s(_Z);Qze=r($jr,"unispeech"),$jr.forEach(t),Wze=r(o4e," \u2014 "),hk=n(o4e,"A",{href:!0});var Ijr=s(hk);Hze=r(Ijr,"UniSpeechConfig"),Ijr.forEach(t),Uze=r(o4e," (UniSpeech model)"),o4e.forEach(t),Jze=i(v),Cg=n(v,"LI",{});var r4e=s(Cg);uZ=n(r4e,"STRONG",{});var qjr=s(uZ);Yze=r(qjr,"unispeech-sat"),qjr.forEach(t),Kze=r(r4e," \u2014 "),pk=n(r4e,"A",{href:!0});var Njr=s(pk);Zze=r(Njr,"UniSpeechSatConfig"),Njr.forEach(t),eQe=r(r4e," (UniSpeechSat model)"),r4e.forEach(t),oQe=i(v),wg=n(v,"LI",{});var t4e=s(wg);bZ=n(t4e,"STRONG",{});var jjr=s(bZ);rQe=r(jjr,"van"),jjr.forEach(t),tQe=r(t4e," \u2014 "),_k=n(t4e,"A",{href:!0});var Djr=s(_k);aQe=r(Djr,"VanConfig"),Djr.forEach(t),nQe=r(t4e," (VAN model)"),t4e.forEach(t),sQe=i(v),Ag=n(v,"LI",{});var a4e=s(Ag);FZ=n(a4e,"STRONG",{});var Gjr=s(FZ);lQe=r(Gjr,"vilt"),Gjr.forEach(t),iQe=r(a4e," \u2014 "),uk=n(a4e,"A",{href:!0});var Ojr=s(uk);dQe=r(Ojr,"ViltConfig"),Ojr.forEach(t),cQe=r(a4e," (ViLT model)"),a4e.forEach(t),fQe=i(v),yg=n(v,"LI",{});var n4e=s(yg);vZ=n(n4e,"STRONG",{});var Vjr=s(vZ);mQe=r(Vjr,"vision-encoder-decoder"),Vjr.forEach(t),gQe=r(n4e," \u2014 "),bk=n(n4e,"A",{href:!0});var Xjr=s(bk);hQe=r(Xjr,"VisionEncoderDecoderConfig"),Xjr.forEach(t),pQe=r(n4e," (Vision Encoder decoder model)"),n4e.forEach(t),_Qe=i(v),Lg=n(v,"LI",{});var s4e=s(Lg);TZ=n(s4e,"STRONG",{});var zjr=s(TZ);uQe=r(zjr,"vision-text-dual-encoder"),zjr.forEach(t),bQe=r(s4e," \u2014 "),Fk=n(s4e,"A",{href:!0});var Qjr=s(Fk);FQe=r(Qjr,"VisionTextDualEncoderConfig"),Qjr.forEach(t),vQe=r(s4e," (VisionTextDualEncoder model)"),s4e.forEach(t),TQe=i(v),xg=n(v,"LI",{});var l4e=s(xg);MZ=n(l4e,"STRONG",{});var Wjr=s(MZ);MQe=r(Wjr,"visual_bert"),Wjr.forEach(t),EQe=r(l4e," \u2014 "),vk=n(l4e,"A",{href:!0});var Hjr=s(vk);CQe=r(Hjr,"VisualBertConfig"),Hjr.forEach(t),wQe=r(l4e," (VisualBert model)"),l4e.forEach(t),AQe=i(v),kg=n(v,"LI",{});var i4e=s(kg);EZ=n(i4e,"STRONG",{});var Ujr=s(EZ);yQe=r(Ujr,"vit"),Ujr.forEach(t),LQe=r(i4e," \u2014 "),Tk=n(i4e,"A",{href:!0});var Jjr=s(Tk);xQe=r(Jjr,"ViTConfig"),Jjr.forEach(t),kQe=r(i4e," (ViT model)"),i4e.forEach(t),SQe=i(v),Sg=n(v,"LI",{});var d4e=s(Sg);CZ=n(d4e,"STRONG",{});var Yjr=s(CZ);RQe=r(Yjr,"vit_mae"),Yjr.forEach(t),BQe=r(d4e," \u2014 "),Mk=n(d4e,"A",{href:!0});var Kjr=s(Mk);PQe=r(Kjr,"ViTMAEConfig"),Kjr.forEach(t),$Qe=r(d4e," (ViTMAE model)"),d4e.forEach(t),IQe=i(v),Rg=n(v,"LI",{});var c4e=s(Rg);wZ=n(c4e,"STRONG",{});var Zjr=s(wZ);qQe=r(Zjr,"wav2vec2"),Zjr.forEach(t),NQe=r(c4e," \u2014 "),Ek=n(c4e,"A",{href:!0});var eDr=s(Ek);jQe=r(eDr,"Wav2Vec2Config"),eDr.forEach(t),DQe=r(c4e," (Wav2Vec2 model)"),c4e.forEach(t),GQe=i(v),Bg=n(v,"LI",{});var f4e=s(Bg);AZ=n(f4e,"STRONG",{});var oDr=s(AZ);OQe=r(oDr,"wavlm"),oDr.forEach(t),VQe=r(f4e," \u2014 "),Ck=n(f4e,"A",{href:!0});var rDr=s(Ck);XQe=r(rDr,"WavLMConfig"),rDr.forEach(t),zQe=r(f4e," (WavLM model)"),f4e.forEach(t),QQe=i(v),Pg=n(v,"LI",{});var m4e=s(Pg);yZ=n(m4e,"STRONG",{});var tDr=s(yZ);WQe=r(tDr,"xglm"),tDr.forEach(t),HQe=r(m4e," \u2014 "),wk=n(m4e,"A",{href:!0});var aDr=s(wk);UQe=r(aDr,"XGLMConfig"),aDr.forEach(t),JQe=r(m4e," (XGLM model)"),m4e.forEach(t),YQe=i(v),$g=n(v,"LI",{});var g4e=s($g);LZ=n(g4e,"STRONG",{});var nDr=s(LZ);KQe=r(nDr,"xlm"),nDr.forEach(t),ZQe=r(g4e," \u2014 "),Ak=n(g4e,"A",{href:!0});var sDr=s(Ak);eWe=r(sDr,"XLMConfig"),sDr.forEach(t),oWe=r(g4e," (XLM model)"),g4e.forEach(t),rWe=i(v),Ig=n(v,"LI",{});var h4e=s(Ig);xZ=n(h4e,"STRONG",{});var lDr=s(xZ);tWe=r(lDr,"xlm-prophetnet"),lDr.forEach(t),aWe=r(h4e," \u2014 "),yk=n(h4e,"A",{href:!0});var iDr=s(yk);nWe=r(iDr,"XLMProphetNetConfig"),iDr.forEach(t),sWe=r(h4e," (XLMProphetNet model)"),h4e.forEach(t),lWe=i(v),qg=n(v,"LI",{});var p4e=s(qg);kZ=n(p4e,"STRONG",{});var dDr=s(kZ);iWe=r(dDr,"xlm-roberta"),dDr.forEach(t),dWe=r(p4e," \u2014 "),Lk=n(p4e,"A",{href:!0});var cDr=s(Lk);cWe=r(cDr,"XLMRobertaConfig"),cDr.forEach(t),fWe=r(p4e," (XLM-RoBERTa model)"),p4e.forEach(t),mWe=i(v),Ng=n(v,"LI",{});var _4e=s(Ng);SZ=n(_4e,"STRONG",{});var fDr=s(SZ);gWe=r(fDr,"xlm-roberta-xl"),fDr.forEach(t),hWe=r(_4e," \u2014 "),xk=n(_4e,"A",{href:!0});var mDr=s(xk);pWe=r(mDr,"XLMRobertaXLConfig"),mDr.forEach(t),_We=r(_4e," (XLM-RoBERTa-XL model)"),_4e.forEach(t),uWe=i(v),jg=n(v,"LI",{});var u4e=s(jg);RZ=n(u4e,"STRONG",{});var gDr=s(RZ);bWe=r(gDr,"xlnet"),gDr.forEach(t),FWe=r(u4e," \u2014 "),kk=n(u4e,"A",{href:!0});var hDr=s(kk);vWe=r(hDr,"XLNetConfig"),hDr.forEach(t),TWe=r(u4e," (XLNet model)"),u4e.forEach(t),MWe=i(v),Dg=n(v,"LI",{});var b4e=s(Dg);BZ=n(b4e,"STRONG",{});var pDr=s(BZ);EWe=r(pDr,"yoso"),pDr.forEach(t),CWe=r(b4e," \u2014 "),Sk=n(b4e,"A",{href:!0});var _Dr=s(Sk);wWe=r(_Dr,"YosoConfig"),_Dr.forEach(t),AWe=r(b4e," (YOSO model)"),b4e.forEach(t),v.forEach(t),yWe=i(ga),PZ=n(ga,"P",{});var uDr=s(PZ);LWe=r(uDr,"Examples:"),uDr.forEach(t),xWe=i(ga),m(W5.$$.fragment,ga),ga.forEach(t),kWe=i(zs),Gg=n(zs,"DIV",{class:!0});var v$e=s(Gg);m(H5.$$.fragment,v$e),SWe=i(v$e),$Z=n(v$e,"P",{});var bDr=s($Z);RWe=r(bDr,"Register a new configuration for this class."),bDr.forEach(t),v$e.forEach(t),zs.forEach(t),bBe=i(c),Ui=n(c,"H2",{class:!0});var T$e=s(Ui);Og=n(T$e,"A",{id:!0,class:!0,href:!0});var FDr=s(Og);IZ=n(FDr,"SPAN",{});var vDr=s(IZ);m(U5.$$.fragment,vDr),vDr.forEach(t),FDr.forEach(t),BWe=i(T$e),qZ=n(T$e,"SPAN",{});var TDr=s(qZ);PWe=r(TDr,"AutoTokenizer"),TDr.forEach(t),T$e.forEach(t),FBe=i(c),Wo=n(c,"DIV",{class:!0});var Qs=s(Wo);m(J5.$$.fragment,Qs),$We=i(Qs),Y5=n(Qs,"P",{});var M$e=s(Y5);IWe=r(M$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Rk=n(M$e,"A",{href:!0});var MDr=s(Rk);qWe=r(MDr,"AutoTokenizer.from_pretrained()"),MDr.forEach(t),NWe=r(M$e," class method."),M$e.forEach(t),jWe=i(Qs),K5=n(Qs,"P",{});var E$e=s(K5);DWe=r(E$e,"This class cannot be instantiated directly using "),NZ=n(E$e,"CODE",{});var EDr=s(NZ);GWe=r(EDr,"__init__()"),EDr.forEach(t),OWe=r(E$e," (throws an error)."),E$e.forEach(t),VWe=i(Qs),go=n(Qs,"DIV",{class:!0});var ha=s(go);m(Z5.$$.fragment,ha),XWe=i(ha),jZ=n(ha,"P",{});var CDr=s(jZ);zWe=r(CDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CDr.forEach(t),QWe=i(ha),Oa=n(ha,"P",{});var qE=s(Oa);WWe=r(qE,"The tokenizer class to instantiate is selected based on the "),DZ=n(qE,"CODE",{});var wDr=s(DZ);HWe=r(wDr,"model_type"),wDr.forEach(t),UWe=r(qE,` property of the config object (either
passed as an argument or loaded from `),GZ=n(qE,"CODE",{});var ADr=s(GZ);JWe=r(ADr,"pretrained_model_name_or_path"),ADr.forEach(t),YWe=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OZ=n(qE,"CODE",{});var yDr=s(OZ);KWe=r(yDr,"pretrained_model_name_or_path"),yDr.forEach(t),ZWe=r(qE,":"),qE.forEach(t),eHe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var RL=s(Wn);VZ=n(RL,"STRONG",{});var LDr=s(VZ);oHe=r(LDr,"albert"),LDr.forEach(t),rHe=r(RL," \u2014 "),Bk=n(RL,"A",{href:!0});var xDr=s(Bk);tHe=r(xDr,"AlbertTokenizer"),xDr.forEach(t),aHe=r(RL," or "),Pk=n(RL,"A",{href:!0});var kDr=s(Pk);nHe=r(kDr,"AlbertTokenizerFast"),kDr.forEach(t),sHe=r(RL," (ALBERT model)"),RL.forEach(t),lHe=i(C),Hn=n(C,"LI",{});var BL=s(Hn);XZ=n(BL,"STRONG",{});var SDr=s(XZ);iHe=r(SDr,"bart"),SDr.forEach(t),dHe=r(BL," \u2014 "),$k=n(BL,"A",{href:!0});var RDr=s($k);cHe=r(RDr,"BartTokenizer"),RDr.forEach(t),fHe=r(BL," or "),Ik=n(BL,"A",{href:!0});var BDr=s(Ik);mHe=r(BDr,"BartTokenizerFast"),BDr.forEach(t),gHe=r(BL," (BART model)"),BL.forEach(t),hHe=i(C),Un=n(C,"LI",{});var PL=s(Un);zZ=n(PL,"STRONG",{});var PDr=s(zZ);pHe=r(PDr,"barthez"),PDr.forEach(t),_He=r(PL," \u2014 "),qk=n(PL,"A",{href:!0});var $Dr=s(qk);uHe=r($Dr,"BarthezTokenizer"),$Dr.forEach(t),bHe=r(PL," or "),Nk=n(PL,"A",{href:!0});var IDr=s(Nk);FHe=r(IDr,"BarthezTokenizerFast"),IDr.forEach(t),vHe=r(PL," (BARThez model)"),PL.forEach(t),THe=i(C),Vg=n(C,"LI",{});var F4e=s(Vg);QZ=n(F4e,"STRONG",{});var qDr=s(QZ);MHe=r(qDr,"bartpho"),qDr.forEach(t),EHe=r(F4e," \u2014 "),jk=n(F4e,"A",{href:!0});var NDr=s(jk);CHe=r(NDr,"BartphoTokenizer"),NDr.forEach(t),wHe=r(F4e," (BARTpho model)"),F4e.forEach(t),AHe=i(C),Jn=n(C,"LI",{});var $L=s(Jn);WZ=n($L,"STRONG",{});var jDr=s(WZ);yHe=r(jDr,"bert"),jDr.forEach(t),LHe=r($L," \u2014 "),Dk=n($L,"A",{href:!0});var DDr=s(Dk);xHe=r(DDr,"BertTokenizer"),DDr.forEach(t),kHe=r($L," or "),Gk=n($L,"A",{href:!0});var GDr=s(Gk);SHe=r(GDr,"BertTokenizerFast"),GDr.forEach(t),RHe=r($L," (BERT model)"),$L.forEach(t),BHe=i(C),Xg=n(C,"LI",{});var v4e=s(Xg);HZ=n(v4e,"STRONG",{});var ODr=s(HZ);PHe=r(ODr,"bert-generation"),ODr.forEach(t),$He=r(v4e," \u2014 "),Ok=n(v4e,"A",{href:!0});var VDr=s(Ok);IHe=r(VDr,"BertGenerationTokenizer"),VDr.forEach(t),qHe=r(v4e," (Bert Generation model)"),v4e.forEach(t),NHe=i(C),zg=n(C,"LI",{});var T4e=s(zg);UZ=n(T4e,"STRONG",{});var XDr=s(UZ);jHe=r(XDr,"bert-japanese"),XDr.forEach(t),DHe=r(T4e," \u2014 "),Vk=n(T4e,"A",{href:!0});var zDr=s(Vk);GHe=r(zDr,"BertJapaneseTokenizer"),zDr.forEach(t),OHe=r(T4e," (BertJapanese model)"),T4e.forEach(t),VHe=i(C),Qg=n(C,"LI",{});var M4e=s(Qg);JZ=n(M4e,"STRONG",{});var QDr=s(JZ);XHe=r(QDr,"bertweet"),QDr.forEach(t),zHe=r(M4e," \u2014 "),Xk=n(M4e,"A",{href:!0});var WDr=s(Xk);QHe=r(WDr,"BertweetTokenizer"),WDr.forEach(t),WHe=r(M4e," (Bertweet model)"),M4e.forEach(t),HHe=i(C),Yn=n(C,"LI",{});var IL=s(Yn);YZ=n(IL,"STRONG",{});var HDr=s(YZ);UHe=r(HDr,"big_bird"),HDr.forEach(t),JHe=r(IL," \u2014 "),zk=n(IL,"A",{href:!0});var UDr=s(zk);YHe=r(UDr,"BigBirdTokenizer"),UDr.forEach(t),KHe=r(IL," or "),Qk=n(IL,"A",{href:!0});var JDr=s(Qk);ZHe=r(JDr,"BigBirdTokenizerFast"),JDr.forEach(t),eUe=r(IL," (BigBird model)"),IL.forEach(t),oUe=i(C),Kn=n(C,"LI",{});var qL=s(Kn);KZ=n(qL,"STRONG",{});var YDr=s(KZ);rUe=r(YDr,"bigbird_pegasus"),YDr.forEach(t),tUe=r(qL," \u2014 "),Wk=n(qL,"A",{href:!0});var KDr=s(Wk);aUe=r(KDr,"PegasusTokenizer"),KDr.forEach(t),nUe=r(qL," or "),Hk=n(qL,"A",{href:!0});var ZDr=s(Hk);sUe=r(ZDr,"PegasusTokenizerFast"),ZDr.forEach(t),lUe=r(qL," (BigBirdPegasus model)"),qL.forEach(t),iUe=i(C),Zn=n(C,"LI",{});var NL=s(Zn);ZZ=n(NL,"STRONG",{});var eGr=s(ZZ);dUe=r(eGr,"blenderbot"),eGr.forEach(t),cUe=r(NL," \u2014 "),Uk=n(NL,"A",{href:!0});var oGr=s(Uk);fUe=r(oGr,"BlenderbotTokenizer"),oGr.forEach(t),mUe=r(NL," or "),Jk=n(NL,"A",{href:!0});var rGr=s(Jk);gUe=r(rGr,"BlenderbotTokenizerFast"),rGr.forEach(t),hUe=r(NL," (Blenderbot model)"),NL.forEach(t),pUe=i(C),Wg=n(C,"LI",{});var E4e=s(Wg);eee=n(E4e,"STRONG",{});var tGr=s(eee);_Ue=r(tGr,"blenderbot-small"),tGr.forEach(t),uUe=r(E4e," \u2014 "),Yk=n(E4e,"A",{href:!0});var aGr=s(Yk);bUe=r(aGr,"BlenderbotSmallTokenizer"),aGr.forEach(t),FUe=r(E4e," (BlenderbotSmall model)"),E4e.forEach(t),vUe=i(C),Hg=n(C,"LI",{});var C4e=s(Hg);oee=n(C4e,"STRONG",{});var nGr=s(oee);TUe=r(nGr,"byt5"),nGr.forEach(t),MUe=r(C4e," \u2014 "),Kk=n(C4e,"A",{href:!0});var sGr=s(Kk);EUe=r(sGr,"ByT5Tokenizer"),sGr.forEach(t),CUe=r(C4e," (ByT5 model)"),C4e.forEach(t),wUe=i(C),es=n(C,"LI",{});var jL=s(es);ree=n(jL,"STRONG",{});var lGr=s(ree);AUe=r(lGr,"camembert"),lGr.forEach(t),yUe=r(jL," \u2014 "),Zk=n(jL,"A",{href:!0});var iGr=s(Zk);LUe=r(iGr,"CamembertTokenizer"),iGr.forEach(t),xUe=r(jL," or "),eS=n(jL,"A",{href:!0});var dGr=s(eS);kUe=r(dGr,"CamembertTokenizerFast"),dGr.forEach(t),SUe=r(jL," (CamemBERT model)"),jL.forEach(t),RUe=i(C),Ug=n(C,"LI",{});var w4e=s(Ug);tee=n(w4e,"STRONG",{});var cGr=s(tee);BUe=r(cGr,"canine"),cGr.forEach(t),PUe=r(w4e," \u2014 "),oS=n(w4e,"A",{href:!0});var fGr=s(oS);$Ue=r(fGr,"CanineTokenizer"),fGr.forEach(t),IUe=r(w4e," (Canine model)"),w4e.forEach(t),qUe=i(C),os=n(C,"LI",{});var DL=s(os);aee=n(DL,"STRONG",{});var mGr=s(aee);NUe=r(mGr,"clip"),mGr.forEach(t),jUe=r(DL," \u2014 "),rS=n(DL,"A",{href:!0});var gGr=s(rS);DUe=r(gGr,"CLIPTokenizer"),gGr.forEach(t),GUe=r(DL," or "),tS=n(DL,"A",{href:!0});var hGr=s(tS);OUe=r(hGr,"CLIPTokenizerFast"),hGr.forEach(t),VUe=r(DL," (CLIP model)"),DL.forEach(t),XUe=i(C),rs=n(C,"LI",{});var GL=s(rs);nee=n(GL,"STRONG",{});var pGr=s(nee);zUe=r(pGr,"convbert"),pGr.forEach(t),QUe=r(GL," \u2014 "),aS=n(GL,"A",{href:!0});var _Gr=s(aS);WUe=r(_Gr,"ConvBertTokenizer"),_Gr.forEach(t),HUe=r(GL," or "),nS=n(GL,"A",{href:!0});var uGr=s(nS);UUe=r(uGr,"ConvBertTokenizerFast"),uGr.forEach(t),JUe=r(GL," (ConvBERT model)"),GL.forEach(t),YUe=i(C),ts=n(C,"LI",{});var OL=s(ts);see=n(OL,"STRONG",{});var bGr=s(see);KUe=r(bGr,"cpm"),bGr.forEach(t),ZUe=r(OL," \u2014 "),sS=n(OL,"A",{href:!0});var FGr=s(sS);eJe=r(FGr,"CpmTokenizer"),FGr.forEach(t),oJe=r(OL," or "),lee=n(OL,"CODE",{});var vGr=s(lee);rJe=r(vGr,"CpmTokenizerFast"),vGr.forEach(t),tJe=r(OL," (CPM model)"),OL.forEach(t),aJe=i(C),Jg=n(C,"LI",{});var A4e=s(Jg);iee=n(A4e,"STRONG",{});var TGr=s(iee);nJe=r(TGr,"ctrl"),TGr.forEach(t),sJe=r(A4e," \u2014 "),lS=n(A4e,"A",{href:!0});var MGr=s(lS);lJe=r(MGr,"CTRLTokenizer"),MGr.forEach(t),iJe=r(A4e," (CTRL model)"),A4e.forEach(t),dJe=i(C),as=n(C,"LI",{});var VL=s(as);dee=n(VL,"STRONG",{});var EGr=s(dee);cJe=r(EGr,"deberta"),EGr.forEach(t),fJe=r(VL," \u2014 "),iS=n(VL,"A",{href:!0});var CGr=s(iS);mJe=r(CGr,"DebertaTokenizer"),CGr.forEach(t),gJe=r(VL," or "),dS=n(VL,"A",{href:!0});var wGr=s(dS);hJe=r(wGr,"DebertaTokenizerFast"),wGr.forEach(t),pJe=r(VL," (DeBERTa model)"),VL.forEach(t),_Je=i(C),ns=n(C,"LI",{});var XL=s(ns);cee=n(XL,"STRONG",{});var AGr=s(cee);uJe=r(AGr,"deberta-v2"),AGr.forEach(t),bJe=r(XL," \u2014 "),cS=n(XL,"A",{href:!0});var yGr=s(cS);FJe=r(yGr,"DebertaV2Tokenizer"),yGr.forEach(t),vJe=r(XL," or "),fS=n(XL,"A",{href:!0});var LGr=s(fS);TJe=r(LGr,"DebertaV2TokenizerFast"),LGr.forEach(t),MJe=r(XL," (DeBERTa-v2 model)"),XL.forEach(t),EJe=i(C),ss=n(C,"LI",{});var zL=s(ss);fee=n(zL,"STRONG",{});var xGr=s(fee);CJe=r(xGr,"distilbert"),xGr.forEach(t),wJe=r(zL," \u2014 "),mS=n(zL,"A",{href:!0});var kGr=s(mS);AJe=r(kGr,"DistilBertTokenizer"),kGr.forEach(t),yJe=r(zL," or "),gS=n(zL,"A",{href:!0});var SGr=s(gS);LJe=r(SGr,"DistilBertTokenizerFast"),SGr.forEach(t),xJe=r(zL," (DistilBERT model)"),zL.forEach(t),kJe=i(C),ls=n(C,"LI",{});var QL=s(ls);mee=n(QL,"STRONG",{});var RGr=s(mee);SJe=r(RGr,"dpr"),RGr.forEach(t),RJe=r(QL," \u2014 "),hS=n(QL,"A",{href:!0});var BGr=s(hS);BJe=r(BGr,"DPRQuestionEncoderTokenizer"),BGr.forEach(t),PJe=r(QL," or "),pS=n(QL,"A",{href:!0});var PGr=s(pS);$Je=r(PGr,"DPRQuestionEncoderTokenizerFast"),PGr.forEach(t),IJe=r(QL," (DPR model)"),QL.forEach(t),qJe=i(C),is=n(C,"LI",{});var WL=s(is);gee=n(WL,"STRONG",{});var $Gr=s(gee);NJe=r($Gr,"electra"),$Gr.forEach(t),jJe=r(WL," \u2014 "),_S=n(WL,"A",{href:!0});var IGr=s(_S);DJe=r(IGr,"ElectraTokenizer"),IGr.forEach(t),GJe=r(WL," or "),uS=n(WL,"A",{href:!0});var qGr=s(uS);OJe=r(qGr,"ElectraTokenizerFast"),qGr.forEach(t),VJe=r(WL," (ELECTRA model)"),WL.forEach(t),XJe=i(C),Yg=n(C,"LI",{});var y4e=s(Yg);hee=n(y4e,"STRONG",{});var NGr=s(hee);zJe=r(NGr,"flaubert"),NGr.forEach(t),QJe=r(y4e," \u2014 "),bS=n(y4e,"A",{href:!0});var jGr=s(bS);WJe=r(jGr,"FlaubertTokenizer"),jGr.forEach(t),HJe=r(y4e," (FlauBERT model)"),y4e.forEach(t),UJe=i(C),ds=n(C,"LI",{});var HL=s(ds);pee=n(HL,"STRONG",{});var DGr=s(pee);JJe=r(DGr,"fnet"),DGr.forEach(t),YJe=r(HL," \u2014 "),FS=n(HL,"A",{href:!0});var GGr=s(FS);KJe=r(GGr,"FNetTokenizer"),GGr.forEach(t),ZJe=r(HL," or "),vS=n(HL,"A",{href:!0});var OGr=s(vS);eYe=r(OGr,"FNetTokenizerFast"),OGr.forEach(t),oYe=r(HL," (FNet model)"),HL.forEach(t),rYe=i(C),Kg=n(C,"LI",{});var L4e=s(Kg);_ee=n(L4e,"STRONG",{});var VGr=s(_ee);tYe=r(VGr,"fsmt"),VGr.forEach(t),aYe=r(L4e," \u2014 "),TS=n(L4e,"A",{href:!0});var XGr=s(TS);nYe=r(XGr,"FSMTTokenizer"),XGr.forEach(t),sYe=r(L4e," (FairSeq Machine-Translation model)"),L4e.forEach(t),lYe=i(C),cs=n(C,"LI",{});var UL=s(cs);uee=n(UL,"STRONG",{});var zGr=s(uee);iYe=r(zGr,"funnel"),zGr.forEach(t),dYe=r(UL," \u2014 "),MS=n(UL,"A",{href:!0});var QGr=s(MS);cYe=r(QGr,"FunnelTokenizer"),QGr.forEach(t),fYe=r(UL," or "),ES=n(UL,"A",{href:!0});var WGr=s(ES);mYe=r(WGr,"FunnelTokenizerFast"),WGr.forEach(t),gYe=r(UL," (Funnel Transformer model)"),UL.forEach(t),hYe=i(C),fs=n(C,"LI",{});var JL=s(fs);bee=n(JL,"STRONG",{});var HGr=s(bee);pYe=r(HGr,"gpt2"),HGr.forEach(t),_Ye=r(JL," \u2014 "),CS=n(JL,"A",{href:!0});var UGr=s(CS);uYe=r(UGr,"GPT2Tokenizer"),UGr.forEach(t),bYe=r(JL," or "),wS=n(JL,"A",{href:!0});var JGr=s(wS);FYe=r(JGr,"GPT2TokenizerFast"),JGr.forEach(t),vYe=r(JL," (OpenAI GPT-2 model)"),JL.forEach(t),TYe=i(C),ms=n(C,"LI",{});var YL=s(ms);Fee=n(YL,"STRONG",{});var YGr=s(Fee);MYe=r(YGr,"gpt_neo"),YGr.forEach(t),EYe=r(YL," \u2014 "),AS=n(YL,"A",{href:!0});var KGr=s(AS);CYe=r(KGr,"GPT2Tokenizer"),KGr.forEach(t),wYe=r(YL," or "),yS=n(YL,"A",{href:!0});var ZGr=s(yS);AYe=r(ZGr,"GPT2TokenizerFast"),ZGr.forEach(t),yYe=r(YL," (GPT Neo model)"),YL.forEach(t),LYe=i(C),gs=n(C,"LI",{});var KL=s(gs);vee=n(KL,"STRONG",{});var eOr=s(vee);xYe=r(eOr,"herbert"),eOr.forEach(t),kYe=r(KL," \u2014 "),LS=n(KL,"A",{href:!0});var oOr=s(LS);SYe=r(oOr,"HerbertTokenizer"),oOr.forEach(t),RYe=r(KL," or "),xS=n(KL,"A",{href:!0});var rOr=s(xS);BYe=r(rOr,"HerbertTokenizerFast"),rOr.forEach(t),PYe=r(KL," (HerBERT model)"),KL.forEach(t),$Ye=i(C),Zg=n(C,"LI",{});var x4e=s(Zg);Tee=n(x4e,"STRONG",{});var tOr=s(Tee);IYe=r(tOr,"hubert"),tOr.forEach(t),qYe=r(x4e," \u2014 "),kS=n(x4e,"A",{href:!0});var aOr=s(kS);NYe=r(aOr,"Wav2Vec2CTCTokenizer"),aOr.forEach(t),jYe=r(x4e," (Hubert model)"),x4e.forEach(t),DYe=i(C),hs=n(C,"LI",{});var ZL=s(hs);Mee=n(ZL,"STRONG",{});var nOr=s(Mee);GYe=r(nOr,"ibert"),nOr.forEach(t),OYe=r(ZL," \u2014 "),SS=n(ZL,"A",{href:!0});var sOr=s(SS);VYe=r(sOr,"RobertaTokenizer"),sOr.forEach(t),XYe=r(ZL," or "),RS=n(ZL,"A",{href:!0});var lOr=s(RS);zYe=r(lOr,"RobertaTokenizerFast"),lOr.forEach(t),QYe=r(ZL," (I-BERT model)"),ZL.forEach(t),WYe=i(C),ps=n(C,"LI",{});var e8=s(ps);Eee=n(e8,"STRONG",{});var iOr=s(Eee);HYe=r(iOr,"layoutlm"),iOr.forEach(t),UYe=r(e8," \u2014 "),BS=n(e8,"A",{href:!0});var dOr=s(BS);JYe=r(dOr,"LayoutLMTokenizer"),dOr.forEach(t),YYe=r(e8," or "),PS=n(e8,"A",{href:!0});var cOr=s(PS);KYe=r(cOr,"LayoutLMTokenizerFast"),cOr.forEach(t),ZYe=r(e8," (LayoutLM model)"),e8.forEach(t),eKe=i(C),_s=n(C,"LI",{});var o8=s(_s);Cee=n(o8,"STRONG",{});var fOr=s(Cee);oKe=r(fOr,"layoutlmv2"),fOr.forEach(t),rKe=r(o8," \u2014 "),$S=n(o8,"A",{href:!0});var mOr=s($S);tKe=r(mOr,"LayoutLMv2Tokenizer"),mOr.forEach(t),aKe=r(o8," or "),IS=n(o8,"A",{href:!0});var gOr=s(IS);nKe=r(gOr,"LayoutLMv2TokenizerFast"),gOr.forEach(t),sKe=r(o8," (LayoutLMv2 model)"),o8.forEach(t),lKe=i(C),us=n(C,"LI",{});var r8=s(us);wee=n(r8,"STRONG",{});var hOr=s(wee);iKe=r(hOr,"layoutxlm"),hOr.forEach(t),dKe=r(r8," \u2014 "),qS=n(r8,"A",{href:!0});var pOr=s(qS);cKe=r(pOr,"LayoutXLMTokenizer"),pOr.forEach(t),fKe=r(r8," or "),NS=n(r8,"A",{href:!0});var _Or=s(NS);mKe=r(_Or,"LayoutXLMTokenizerFast"),_Or.forEach(t),gKe=r(r8," (LayoutXLM model)"),r8.forEach(t),hKe=i(C),bs=n(C,"LI",{});var t8=s(bs);Aee=n(t8,"STRONG",{});var uOr=s(Aee);pKe=r(uOr,"led"),uOr.forEach(t),_Ke=r(t8," \u2014 "),jS=n(t8,"A",{href:!0});var bOr=s(jS);uKe=r(bOr,"LEDTokenizer"),bOr.forEach(t),bKe=r(t8," or "),DS=n(t8,"A",{href:!0});var FOr=s(DS);FKe=r(FOr,"LEDTokenizerFast"),FOr.forEach(t),vKe=r(t8," (LED model)"),t8.forEach(t),TKe=i(C),Fs=n(C,"LI",{});var a8=s(Fs);yee=n(a8,"STRONG",{});var vOr=s(yee);MKe=r(vOr,"longformer"),vOr.forEach(t),EKe=r(a8," \u2014 "),GS=n(a8,"A",{href:!0});var TOr=s(GS);CKe=r(TOr,"LongformerTokenizer"),TOr.forEach(t),wKe=r(a8," or "),OS=n(a8,"A",{href:!0});var MOr=s(OS);AKe=r(MOr,"LongformerTokenizerFast"),MOr.forEach(t),yKe=r(a8," (Longformer model)"),a8.forEach(t),LKe=i(C),vs=n(C,"LI",{});var n8=s(vs);Lee=n(n8,"STRONG",{});var EOr=s(Lee);xKe=r(EOr,"longt5"),EOr.forEach(t),kKe=r(n8," \u2014 "),VS=n(n8,"A",{href:!0});var COr=s(VS);SKe=r(COr,"T5Tokenizer"),COr.forEach(t),RKe=r(n8," or "),XS=n(n8,"A",{href:!0});var wOr=s(XS);BKe=r(wOr,"T5TokenizerFast"),wOr.forEach(t),PKe=r(n8," (LongT5 model)"),n8.forEach(t),$Ke=i(C),eh=n(C,"LI",{});var k4e=s(eh);xee=n(k4e,"STRONG",{});var AOr=s(xee);IKe=r(AOr,"luke"),AOr.forEach(t),qKe=r(k4e," \u2014 "),zS=n(k4e,"A",{href:!0});var yOr=s(zS);NKe=r(yOr,"LukeTokenizer"),yOr.forEach(t),jKe=r(k4e," (LUKE model)"),k4e.forEach(t),DKe=i(C),Ts=n(C,"LI",{});var s8=s(Ts);kee=n(s8,"STRONG",{});var LOr=s(kee);GKe=r(LOr,"lxmert"),LOr.forEach(t),OKe=r(s8," \u2014 "),QS=n(s8,"A",{href:!0});var xOr=s(QS);VKe=r(xOr,"LxmertTokenizer"),xOr.forEach(t),XKe=r(s8," or "),WS=n(s8,"A",{href:!0});var kOr=s(WS);zKe=r(kOr,"LxmertTokenizerFast"),kOr.forEach(t),QKe=r(s8," (LXMERT model)"),s8.forEach(t),WKe=i(C),oh=n(C,"LI",{});var S4e=s(oh);See=n(S4e,"STRONG",{});var SOr=s(See);HKe=r(SOr,"m2m_100"),SOr.forEach(t),UKe=r(S4e," \u2014 "),HS=n(S4e,"A",{href:!0});var ROr=s(HS);JKe=r(ROr,"M2M100Tokenizer"),ROr.forEach(t),YKe=r(S4e," (M2M100 model)"),S4e.forEach(t),KKe=i(C),rh=n(C,"LI",{});var R4e=s(rh);Ree=n(R4e,"STRONG",{});var BOr=s(Ree);ZKe=r(BOr,"marian"),BOr.forEach(t),eZe=r(R4e," \u2014 "),US=n(R4e,"A",{href:!0});var POr=s(US);oZe=r(POr,"MarianTokenizer"),POr.forEach(t),rZe=r(R4e," (Marian model)"),R4e.forEach(t),tZe=i(C),Ms=n(C,"LI",{});var l8=s(Ms);Bee=n(l8,"STRONG",{});var $Or=s(Bee);aZe=r($Or,"mbart"),$Or.forEach(t),nZe=r(l8," \u2014 "),JS=n(l8,"A",{href:!0});var IOr=s(JS);sZe=r(IOr,"MBartTokenizer"),IOr.forEach(t),lZe=r(l8," or "),YS=n(l8,"A",{href:!0});var qOr=s(YS);iZe=r(qOr,"MBartTokenizerFast"),qOr.forEach(t),dZe=r(l8," (mBART model)"),l8.forEach(t),cZe=i(C),Es=n(C,"LI",{});var i8=s(Es);Pee=n(i8,"STRONG",{});var NOr=s(Pee);fZe=r(NOr,"mbart50"),NOr.forEach(t),mZe=r(i8," \u2014 "),KS=n(i8,"A",{href:!0});var jOr=s(KS);gZe=r(jOr,"MBart50Tokenizer"),jOr.forEach(t),hZe=r(i8," or "),ZS=n(i8,"A",{href:!0});var DOr=s(ZS);pZe=r(DOr,"MBart50TokenizerFast"),DOr.forEach(t),_Ze=r(i8," (mBART-50 model)"),i8.forEach(t),uZe=i(C),th=n(C,"LI",{});var B4e=s(th);$ee=n(B4e,"STRONG",{});var GOr=s($ee);bZe=r(GOr,"mluke"),GOr.forEach(t),FZe=r(B4e," \u2014 "),eR=n(B4e,"A",{href:!0});var OOr=s(eR);vZe=r(OOr,"MLukeTokenizer"),OOr.forEach(t),TZe=r(B4e," (mLUKE model)"),B4e.forEach(t),MZe=i(C),Cs=n(C,"LI",{});var d8=s(Cs);Iee=n(d8,"STRONG",{});var VOr=s(Iee);EZe=r(VOr,"mobilebert"),VOr.forEach(t),CZe=r(d8," \u2014 "),oR=n(d8,"A",{href:!0});var XOr=s(oR);wZe=r(XOr,"MobileBertTokenizer"),XOr.forEach(t),AZe=r(d8," or "),rR=n(d8,"A",{href:!0});var zOr=s(rR);yZe=r(zOr,"MobileBertTokenizerFast"),zOr.forEach(t),LZe=r(d8," (MobileBERT model)"),d8.forEach(t),xZe=i(C),ws=n(C,"LI",{});var c8=s(ws);qee=n(c8,"STRONG",{});var QOr=s(qee);kZe=r(QOr,"mpnet"),QOr.forEach(t),SZe=r(c8," \u2014 "),tR=n(c8,"A",{href:!0});var WOr=s(tR);RZe=r(WOr,"MPNetTokenizer"),WOr.forEach(t),BZe=r(c8," or "),aR=n(c8,"A",{href:!0});var HOr=s(aR);PZe=r(HOr,"MPNetTokenizerFast"),HOr.forEach(t),$Ze=r(c8," (MPNet model)"),c8.forEach(t),IZe=i(C),As=n(C,"LI",{});var f8=s(As);Nee=n(f8,"STRONG",{});var UOr=s(Nee);qZe=r(UOr,"mt5"),UOr.forEach(t),NZe=r(f8," \u2014 "),nR=n(f8,"A",{href:!0});var JOr=s(nR);jZe=r(JOr,"MT5Tokenizer"),JOr.forEach(t),DZe=r(f8," or "),sR=n(f8,"A",{href:!0});var YOr=s(sR);GZe=r(YOr,"MT5TokenizerFast"),YOr.forEach(t),OZe=r(f8," (mT5 model)"),f8.forEach(t),VZe=i(C),ys=n(C,"LI",{});var m8=s(ys);jee=n(m8,"STRONG",{});var KOr=s(jee);XZe=r(KOr,"openai-gpt"),KOr.forEach(t),zZe=r(m8," \u2014 "),lR=n(m8,"A",{href:!0});var ZOr=s(lR);QZe=r(ZOr,"OpenAIGPTTokenizer"),ZOr.forEach(t),WZe=r(m8," or "),iR=n(m8,"A",{href:!0});var eVr=s(iR);HZe=r(eVr,"OpenAIGPTTokenizerFast"),eVr.forEach(t),UZe=r(m8," (OpenAI GPT model)"),m8.forEach(t),JZe=i(C),Ls=n(C,"LI",{});var g8=s(Ls);Dee=n(g8,"STRONG",{});var oVr=s(Dee);YZe=r(oVr,"pegasus"),oVr.forEach(t),KZe=r(g8," \u2014 "),dR=n(g8,"A",{href:!0});var rVr=s(dR);ZZe=r(rVr,"PegasusTokenizer"),rVr.forEach(t),eeo=r(g8," or "),cR=n(g8,"A",{href:!0});var tVr=s(cR);oeo=r(tVr,"PegasusTokenizerFast"),tVr.forEach(t),reo=r(g8," (Pegasus model)"),g8.forEach(t),teo=i(C),ah=n(C,"LI",{});var P4e=s(ah);Gee=n(P4e,"STRONG",{});var aVr=s(Gee);aeo=r(aVr,"perceiver"),aVr.forEach(t),neo=r(P4e," \u2014 "),fR=n(P4e,"A",{href:!0});var nVr=s(fR);seo=r(nVr,"PerceiverTokenizer"),nVr.forEach(t),leo=r(P4e," (Perceiver model)"),P4e.forEach(t),ieo=i(C),nh=n(C,"LI",{});var $4e=s(nh);Oee=n($4e,"STRONG",{});var sVr=s(Oee);deo=r(sVr,"phobert"),sVr.forEach(t),ceo=r($4e," \u2014 "),mR=n($4e,"A",{href:!0});var lVr=s(mR);feo=r(lVr,"PhobertTokenizer"),lVr.forEach(t),meo=r($4e," (PhoBERT model)"),$4e.forEach(t),geo=i(C),sh=n(C,"LI",{});var I4e=s(sh);Vee=n(I4e,"STRONG",{});var iVr=s(Vee);heo=r(iVr,"plbart"),iVr.forEach(t),peo=r(I4e," \u2014 "),gR=n(I4e,"A",{href:!0});var dVr=s(gR);_eo=r(dVr,"PLBartTokenizer"),dVr.forEach(t),ueo=r(I4e," (PLBart model)"),I4e.forEach(t),beo=i(C),lh=n(C,"LI",{});var q4e=s(lh);Xee=n(q4e,"STRONG",{});var cVr=s(Xee);Feo=r(cVr,"prophetnet"),cVr.forEach(t),veo=r(q4e," \u2014 "),hR=n(q4e,"A",{href:!0});var fVr=s(hR);Teo=r(fVr,"ProphetNetTokenizer"),fVr.forEach(t),Meo=r(q4e," (ProphetNet model)"),q4e.forEach(t),Eeo=i(C),xs=n(C,"LI",{});var h8=s(xs);zee=n(h8,"STRONG",{});var mVr=s(zee);Ceo=r(mVr,"qdqbert"),mVr.forEach(t),weo=r(h8," \u2014 "),pR=n(h8,"A",{href:!0});var gVr=s(pR);Aeo=r(gVr,"BertTokenizer"),gVr.forEach(t),yeo=r(h8," or "),_R=n(h8,"A",{href:!0});var hVr=s(_R);Leo=r(hVr,"BertTokenizerFast"),hVr.forEach(t),xeo=r(h8," (QDQBert model)"),h8.forEach(t),keo=i(C),ih=n(C,"LI",{});var N4e=s(ih);Qee=n(N4e,"STRONG",{});var pVr=s(Qee);Seo=r(pVr,"rag"),pVr.forEach(t),Reo=r(N4e," \u2014 "),uR=n(N4e,"A",{href:!0});var _Vr=s(uR);Beo=r(_Vr,"RagTokenizer"),_Vr.forEach(t),Peo=r(N4e," (RAG model)"),N4e.forEach(t),$eo=i(C),ks=n(C,"LI",{});var p8=s(ks);Wee=n(p8,"STRONG",{});var uVr=s(Wee);Ieo=r(uVr,"realm"),uVr.forEach(t),qeo=r(p8," \u2014 "),bR=n(p8,"A",{href:!0});var bVr=s(bR);Neo=r(bVr,"RealmTokenizer"),bVr.forEach(t),jeo=r(p8," or "),FR=n(p8,"A",{href:!0});var FVr=s(FR);Deo=r(FVr,"RealmTokenizerFast"),FVr.forEach(t),Geo=r(p8," (Realm model)"),p8.forEach(t),Oeo=i(C),Ss=n(C,"LI",{});var _8=s(Ss);Hee=n(_8,"STRONG",{});var vVr=s(Hee);Veo=r(vVr,"reformer"),vVr.forEach(t),Xeo=r(_8," \u2014 "),vR=n(_8,"A",{href:!0});var TVr=s(vR);zeo=r(TVr,"ReformerTokenizer"),TVr.forEach(t),Qeo=r(_8," or "),TR=n(_8,"A",{href:!0});var MVr=s(TR);Weo=r(MVr,"ReformerTokenizerFast"),MVr.forEach(t),Heo=r(_8," (Reformer model)"),_8.forEach(t),Ueo=i(C),Rs=n(C,"LI",{});var u8=s(Rs);Uee=n(u8,"STRONG",{});var EVr=s(Uee);Jeo=r(EVr,"rembert"),EVr.forEach(t),Yeo=r(u8," \u2014 "),MR=n(u8,"A",{href:!0});var CVr=s(MR);Keo=r(CVr,"RemBertTokenizer"),CVr.forEach(t),Zeo=r(u8," or "),ER=n(u8,"A",{href:!0});var wVr=s(ER);eoo=r(wVr,"RemBertTokenizerFast"),wVr.forEach(t),ooo=r(u8," (RemBERT model)"),u8.forEach(t),roo=i(C),Bs=n(C,"LI",{});var b8=s(Bs);Jee=n(b8,"STRONG",{});var AVr=s(Jee);too=r(AVr,"retribert"),AVr.forEach(t),aoo=r(b8," \u2014 "),CR=n(b8,"A",{href:!0});var yVr=s(CR);noo=r(yVr,"RetriBertTokenizer"),yVr.forEach(t),soo=r(b8," or "),wR=n(b8,"A",{href:!0});var LVr=s(wR);loo=r(LVr,"RetriBertTokenizerFast"),LVr.forEach(t),ioo=r(b8," (RetriBERT model)"),b8.forEach(t),doo=i(C),Ps=n(C,"LI",{});var F8=s(Ps);Yee=n(F8,"STRONG",{});var xVr=s(Yee);coo=r(xVr,"roberta"),xVr.forEach(t),foo=r(F8," \u2014 "),AR=n(F8,"A",{href:!0});var kVr=s(AR);moo=r(kVr,"RobertaTokenizer"),kVr.forEach(t),goo=r(F8," or "),yR=n(F8,"A",{href:!0});var SVr=s(yR);hoo=r(SVr,"RobertaTokenizerFast"),SVr.forEach(t),poo=r(F8," (RoBERTa model)"),F8.forEach(t),_oo=i(C),$s=n(C,"LI",{});var v8=s($s);Kee=n(v8,"STRONG",{});var RVr=s(Kee);uoo=r(RVr,"roformer"),RVr.forEach(t),boo=r(v8," \u2014 "),LR=n(v8,"A",{href:!0});var BVr=s(LR);Foo=r(BVr,"RoFormerTokenizer"),BVr.forEach(t),voo=r(v8," or "),xR=n(v8,"A",{href:!0});var PVr=s(xR);Too=r(PVr,"RoFormerTokenizerFast"),PVr.forEach(t),Moo=r(v8," (RoFormer model)"),v8.forEach(t),Eoo=i(C),dh=n(C,"LI",{});var j4e=s(dh);Zee=n(j4e,"STRONG",{});var $Vr=s(Zee);Coo=r($Vr,"speech_to_text"),$Vr.forEach(t),woo=r(j4e," \u2014 "),kR=n(j4e,"A",{href:!0});var IVr=s(kR);Aoo=r(IVr,"Speech2TextTokenizer"),IVr.forEach(t),yoo=r(j4e," (Speech2Text model)"),j4e.forEach(t),Loo=i(C),ch=n(C,"LI",{});var D4e=s(ch);eoe=n(D4e,"STRONG",{});var qVr=s(eoe);xoo=r(qVr,"speech_to_text_2"),qVr.forEach(t),koo=r(D4e," \u2014 "),SR=n(D4e,"A",{href:!0});var NVr=s(SR);Soo=r(NVr,"Speech2Text2Tokenizer"),NVr.forEach(t),Roo=r(D4e," (Speech2Text2 model)"),D4e.forEach(t),Boo=i(C),Is=n(C,"LI",{});var T8=s(Is);ooe=n(T8,"STRONG",{});var jVr=s(ooe);Poo=r(jVr,"splinter"),jVr.forEach(t),$oo=r(T8," \u2014 "),RR=n(T8,"A",{href:!0});var DVr=s(RR);Ioo=r(DVr,"SplinterTokenizer"),DVr.forEach(t),qoo=r(T8," or "),BR=n(T8,"A",{href:!0});var GVr=s(BR);Noo=r(GVr,"SplinterTokenizerFast"),GVr.forEach(t),joo=r(T8," (Splinter model)"),T8.forEach(t),Doo=i(C),qs=n(C,"LI",{});var M8=s(qs);roe=n(M8,"STRONG",{});var OVr=s(roe);Goo=r(OVr,"squeezebert"),OVr.forEach(t),Ooo=r(M8," \u2014 "),PR=n(M8,"A",{href:!0});var VVr=s(PR);Voo=r(VVr,"SqueezeBertTokenizer"),VVr.forEach(t),Xoo=r(M8," or "),$R=n(M8,"A",{href:!0});var XVr=s($R);zoo=r(XVr,"SqueezeBertTokenizerFast"),XVr.forEach(t),Qoo=r(M8," (SqueezeBERT model)"),M8.forEach(t),Woo=i(C),Ns=n(C,"LI",{});var E8=s(Ns);toe=n(E8,"STRONG",{});var zVr=s(toe);Hoo=r(zVr,"t5"),zVr.forEach(t),Uoo=r(E8," \u2014 "),IR=n(E8,"A",{href:!0});var QVr=s(IR);Joo=r(QVr,"T5Tokenizer"),QVr.forEach(t),Yoo=r(E8," or "),qR=n(E8,"A",{href:!0});var WVr=s(qR);Koo=r(WVr,"T5TokenizerFast"),WVr.forEach(t),Zoo=r(E8," (T5 model)"),E8.forEach(t),ero=i(C),fh=n(C,"LI",{});var G4e=s(fh);aoe=n(G4e,"STRONG",{});var HVr=s(aoe);oro=r(HVr,"tapas"),HVr.forEach(t),rro=r(G4e," \u2014 "),NR=n(G4e,"A",{href:!0});var UVr=s(NR);tro=r(UVr,"TapasTokenizer"),UVr.forEach(t),aro=r(G4e," (TAPAS model)"),G4e.forEach(t),nro=i(C),mh=n(C,"LI",{});var O4e=s(mh);noe=n(O4e,"STRONG",{});var JVr=s(noe);sro=r(JVr,"tapex"),JVr.forEach(t),lro=r(O4e," \u2014 "),jR=n(O4e,"A",{href:!0});var YVr=s(jR);iro=r(YVr,"TapexTokenizer"),YVr.forEach(t),dro=r(O4e," (TAPEX model)"),O4e.forEach(t),cro=i(C),gh=n(C,"LI",{});var V4e=s(gh);soe=n(V4e,"STRONG",{});var KVr=s(soe);fro=r(KVr,"transfo-xl"),KVr.forEach(t),mro=r(V4e," \u2014 "),DR=n(V4e,"A",{href:!0});var ZVr=s(DR);gro=r(ZVr,"TransfoXLTokenizer"),ZVr.forEach(t),hro=r(V4e," (Transformer-XL model)"),V4e.forEach(t),pro=i(C),hh=n(C,"LI",{});var X4e=s(hh);loe=n(X4e,"STRONG",{});var eXr=s(loe);_ro=r(eXr,"wav2vec2"),eXr.forEach(t),uro=r(X4e," \u2014 "),GR=n(X4e,"A",{href:!0});var oXr=s(GR);bro=r(oXr,"Wav2Vec2CTCTokenizer"),oXr.forEach(t),Fro=r(X4e," (Wav2Vec2 model)"),X4e.forEach(t),vro=i(C),ph=n(C,"LI",{});var z4e=s(ph);ioe=n(z4e,"STRONG",{});var rXr=s(ioe);Tro=r(rXr,"wav2vec2_phoneme"),rXr.forEach(t),Mro=r(z4e," \u2014 "),OR=n(z4e,"A",{href:!0});var tXr=s(OR);Ero=r(tXr,"Wav2Vec2PhonemeCTCTokenizer"),tXr.forEach(t),Cro=r(z4e," (Wav2Vec2Phoneme model)"),z4e.forEach(t),wro=i(C),js=n(C,"LI",{});var C8=s(js);doe=n(C8,"STRONG",{});var aXr=s(doe);Aro=r(aXr,"xglm"),aXr.forEach(t),yro=r(C8," \u2014 "),VR=n(C8,"A",{href:!0});var nXr=s(VR);Lro=r(nXr,"XGLMTokenizer"),nXr.forEach(t),xro=r(C8," or "),XR=n(C8,"A",{href:!0});var sXr=s(XR);kro=r(sXr,"XGLMTokenizerFast"),sXr.forEach(t),Sro=r(C8," (XGLM model)"),C8.forEach(t),Rro=i(C),_h=n(C,"LI",{});var Q4e=s(_h);coe=n(Q4e,"STRONG",{});var lXr=s(coe);Bro=r(lXr,"xlm"),lXr.forEach(t),Pro=r(Q4e," \u2014 "),zR=n(Q4e,"A",{href:!0});var iXr=s(zR);$ro=r(iXr,"XLMTokenizer"),iXr.forEach(t),Iro=r(Q4e," (XLM model)"),Q4e.forEach(t),qro=i(C),uh=n(C,"LI",{});var W4e=s(uh);foe=n(W4e,"STRONG",{});var dXr=s(foe);Nro=r(dXr,"xlm-prophetnet"),dXr.forEach(t),jro=r(W4e," \u2014 "),QR=n(W4e,"A",{href:!0});var cXr=s(QR);Dro=r(cXr,"XLMProphetNetTokenizer"),cXr.forEach(t),Gro=r(W4e," (XLMProphetNet model)"),W4e.forEach(t),Oro=i(C),Ds=n(C,"LI",{});var w8=s(Ds);moe=n(w8,"STRONG",{});var fXr=s(moe);Vro=r(fXr,"xlm-roberta"),fXr.forEach(t),Xro=r(w8," \u2014 "),WR=n(w8,"A",{href:!0});var mXr=s(WR);zro=r(mXr,"XLMRobertaTokenizer"),mXr.forEach(t),Qro=r(w8," or "),HR=n(w8,"A",{href:!0});var gXr=s(HR);Wro=r(gXr,"XLMRobertaTokenizerFast"),gXr.forEach(t),Hro=r(w8," (XLM-RoBERTa model)"),w8.forEach(t),Uro=i(C),Gs=n(C,"LI",{});var A8=s(Gs);goe=n(A8,"STRONG",{});var hXr=s(goe);Jro=r(hXr,"xlnet"),hXr.forEach(t),Yro=r(A8," \u2014 "),UR=n(A8,"A",{href:!0});var pXr=s(UR);Kro=r(pXr,"XLNetTokenizer"),pXr.forEach(t),Zro=r(A8," or "),JR=n(A8,"A",{href:!0});var _Xr=s(JR);eto=r(_Xr,"XLNetTokenizerFast"),_Xr.forEach(t),oto=r(A8," (XLNet model)"),A8.forEach(t),C.forEach(t),rto=i(ha),hoe=n(ha,"P",{});var uXr=s(hoe);tto=r(uXr,"Examples:"),uXr.forEach(t),ato=i(ha),m(e3.$$.fragment,ha),ha.forEach(t),nto=i(Qs),bh=n(Qs,"DIV",{class:!0});var C$e=s(bh);m(o3.$$.fragment,C$e),sto=i(C$e),poe=n(C$e,"P",{});var bXr=s(poe);lto=r(bXr,"Register a new tokenizer in this mapping."),bXr.forEach(t),C$e.forEach(t),Qs.forEach(t),vBe=i(c),Ji=n(c,"H2",{class:!0});var w$e=s(Ji);Fh=n(w$e,"A",{id:!0,class:!0,href:!0});var FXr=s(Fh);_oe=n(FXr,"SPAN",{});var vXr=s(_oe);m(r3.$$.fragment,vXr),vXr.forEach(t),FXr.forEach(t),ito=i(w$e),uoe=n(w$e,"SPAN",{});var TXr=s(uoe);dto=r(TXr,"AutoFeatureExtractor"),TXr.forEach(t),w$e.forEach(t),TBe=i(c),Ho=n(c,"DIV",{class:!0});var Ws=s(Ho);m(t3.$$.fragment,Ws),cto=i(Ws),a3=n(Ws,"P",{});var A$e=s(a3);fto=r(A$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),YR=n(A$e,"A",{href:!0});var MXr=s(YR);mto=r(MXr,"AutoFeatureExtractor.from_pretrained()"),MXr.forEach(t),gto=r(A$e," class method."),A$e.forEach(t),hto=i(Ws),n3=n(Ws,"P",{});var y$e=s(n3);pto=r(y$e,"This class cannot be instantiated directly using "),boe=n(y$e,"CODE",{});var EXr=s(boe);_to=r(EXr,"__init__()"),EXr.forEach(t),uto=r(y$e," (throws an error)."),y$e.forEach(t),bto=i(Ws),Ie=n(Ws,"DIV",{class:!0});var Nt=s(Ie);m(s3.$$.fragment,Nt),Fto=i(Nt),Foe=n(Nt,"P",{});var CXr=s(Foe);vto=r(CXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),CXr.forEach(t),Tto=i(Nt),Va=n(Nt,"P",{});var NE=s(Va);Mto=r(NE,"The feature extractor class to instantiate is selected based on the "),voe=n(NE,"CODE",{});var wXr=s(voe);Eto=r(wXr,"model_type"),wXr.forEach(t),Cto=r(NE,` property of the config object
(either passed as an argument or loaded from `),Toe=n(NE,"CODE",{});var AXr=s(Toe);wto=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),Ato=r(NE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Moe=n(NE,"CODE",{});var yXr=s(Moe);yto=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Lto=r(NE,":"),NE.forEach(t),xto=i(Nt),ee=n(Nt,"UL",{});var ne=s(ee);vh=n(ne,"LI",{});var H4e=s(vh);Eoe=n(H4e,"STRONG",{});var LXr=s(Eoe);kto=r(LXr,"beit"),LXr.forEach(t),Sto=r(H4e," \u2014 "),KR=n(H4e,"A",{href:!0});var xXr=s(KR);Rto=r(xXr,"BeitFeatureExtractor"),xXr.forEach(t),Bto=r(H4e," (BEiT model)"),H4e.forEach(t),Pto=i(ne),Th=n(ne,"LI",{});var U4e=s(Th);Coe=n(U4e,"STRONG",{});var kXr=s(Coe);$to=r(kXr,"clip"),kXr.forEach(t),Ito=r(U4e," \u2014 "),ZR=n(U4e,"A",{href:!0});var SXr=s(ZR);qto=r(SXr,"CLIPFeatureExtractor"),SXr.forEach(t),Nto=r(U4e," (CLIP model)"),U4e.forEach(t),jto=i(ne),Mh=n(ne,"LI",{});var J4e=s(Mh);woe=n(J4e,"STRONG",{});var RXr=s(woe);Dto=r(RXr,"convnext"),RXr.forEach(t),Gto=r(J4e," \u2014 "),eB=n(J4e,"A",{href:!0});var BXr=s(eB);Oto=r(BXr,"ConvNextFeatureExtractor"),BXr.forEach(t),Vto=r(J4e," (ConvNext model)"),J4e.forEach(t),Xto=i(ne),Eh=n(ne,"LI",{});var Y4e=s(Eh);Aoe=n(Y4e,"STRONG",{});var PXr=s(Aoe);zto=r(PXr,"deit"),PXr.forEach(t),Qto=r(Y4e," \u2014 "),oB=n(Y4e,"A",{href:!0});var $Xr=s(oB);Wto=r($Xr,"DeiTFeatureExtractor"),$Xr.forEach(t),Hto=r(Y4e," (DeiT model)"),Y4e.forEach(t),Uto=i(ne),Ch=n(ne,"LI",{});var K4e=s(Ch);yoe=n(K4e,"STRONG",{});var IXr=s(yoe);Jto=r(IXr,"detr"),IXr.forEach(t),Yto=r(K4e," \u2014 "),rB=n(K4e,"A",{href:!0});var qXr=s(rB);Kto=r(qXr,"DetrFeatureExtractor"),qXr.forEach(t),Zto=r(K4e," (DETR model)"),K4e.forEach(t),eao=i(ne),wh=n(ne,"LI",{});var Z4e=s(wh);Loe=n(Z4e,"STRONG",{});var NXr=s(Loe);oao=r(NXr,"hubert"),NXr.forEach(t),rao=r(Z4e," \u2014 "),tB=n(Z4e,"A",{href:!0});var jXr=s(tB);tao=r(jXr,"Wav2Vec2FeatureExtractor"),jXr.forEach(t),aao=r(Z4e," (Hubert model)"),Z4e.forEach(t),nao=i(ne),Ah=n(ne,"LI",{});var eEe=s(Ah);xoe=n(eEe,"STRONG",{});var DXr=s(xoe);sao=r(DXr,"layoutlmv2"),DXr.forEach(t),lao=r(eEe," \u2014 "),aB=n(eEe,"A",{href:!0});var GXr=s(aB);iao=r(GXr,"LayoutLMv2FeatureExtractor"),GXr.forEach(t),dao=r(eEe," (LayoutLMv2 model)"),eEe.forEach(t),cao=i(ne),yh=n(ne,"LI",{});var oEe=s(yh);koe=n(oEe,"STRONG",{});var OXr=s(koe);fao=r(OXr,"maskformer"),OXr.forEach(t),mao=r(oEe," \u2014 "),nB=n(oEe,"A",{href:!0});var VXr=s(nB);gao=r(VXr,"MaskFormerFeatureExtractor"),VXr.forEach(t),hao=r(oEe," (MaskFormer model)"),oEe.forEach(t),pao=i(ne),Lh=n(ne,"LI",{});var rEe=s(Lh);Soe=n(rEe,"STRONG",{});var XXr=s(Soe);_ao=r(XXr,"perceiver"),XXr.forEach(t),uao=r(rEe," \u2014 "),sB=n(rEe,"A",{href:!0});var zXr=s(sB);bao=r(zXr,"PerceiverFeatureExtractor"),zXr.forEach(t),Fao=r(rEe," (Perceiver model)"),rEe.forEach(t),vao=i(ne),xh=n(ne,"LI",{});var tEe=s(xh);Roe=n(tEe,"STRONG",{});var QXr=s(Roe);Tao=r(QXr,"poolformer"),QXr.forEach(t),Mao=r(tEe," \u2014 "),lB=n(tEe,"A",{href:!0});var WXr=s(lB);Eao=r(WXr,"PoolFormerFeatureExtractor"),WXr.forEach(t),Cao=r(tEe," (PoolFormer model)"),tEe.forEach(t),wao=i(ne),kh=n(ne,"LI",{});var aEe=s(kh);Boe=n(aEe,"STRONG",{});var HXr=s(Boe);Aao=r(HXr,"regnet"),HXr.forEach(t),yao=r(aEe," \u2014 "),iB=n(aEe,"A",{href:!0});var UXr=s(iB);Lao=r(UXr,"ConvNextFeatureExtractor"),UXr.forEach(t),xao=r(aEe," (RegNet model)"),aEe.forEach(t),kao=i(ne),Sh=n(ne,"LI",{});var nEe=s(Sh);Poe=n(nEe,"STRONG",{});var JXr=s(Poe);Sao=r(JXr,"resnet"),JXr.forEach(t),Rao=r(nEe," \u2014 "),dB=n(nEe,"A",{href:!0});var YXr=s(dB);Bao=r(YXr,"ConvNextFeatureExtractor"),YXr.forEach(t),Pao=r(nEe," (ResNet model)"),nEe.forEach(t),$ao=i(ne),Rh=n(ne,"LI",{});var sEe=s(Rh);$oe=n(sEe,"STRONG",{});var KXr=s($oe);Iao=r(KXr,"segformer"),KXr.forEach(t),qao=r(sEe," \u2014 "),cB=n(sEe,"A",{href:!0});var ZXr=s(cB);Nao=r(ZXr,"SegformerFeatureExtractor"),ZXr.forEach(t),jao=r(sEe," (SegFormer model)"),sEe.forEach(t),Dao=i(ne),Bh=n(ne,"LI",{});var lEe=s(Bh);Ioe=n(lEe,"STRONG",{});var ezr=s(Ioe);Gao=r(ezr,"speech_to_text"),ezr.forEach(t),Oao=r(lEe," \u2014 "),fB=n(lEe,"A",{href:!0});var ozr=s(fB);Vao=r(ozr,"Speech2TextFeatureExtractor"),ozr.forEach(t),Xao=r(lEe," (Speech2Text model)"),lEe.forEach(t),zao=i(ne),Ph=n(ne,"LI",{});var iEe=s(Ph);qoe=n(iEe,"STRONG",{});var rzr=s(qoe);Qao=r(rzr,"swin"),rzr.forEach(t),Wao=r(iEe," \u2014 "),mB=n(iEe,"A",{href:!0});var tzr=s(mB);Hao=r(tzr,"ViTFeatureExtractor"),tzr.forEach(t),Uao=r(iEe," (Swin model)"),iEe.forEach(t),Jao=i(ne),$h=n(ne,"LI",{});var dEe=s($h);Noe=n(dEe,"STRONG",{});var azr=s(Noe);Yao=r(azr,"van"),azr.forEach(t),Kao=r(dEe," \u2014 "),gB=n(dEe,"A",{href:!0});var nzr=s(gB);Zao=r(nzr,"ConvNextFeatureExtractor"),nzr.forEach(t),eno=r(dEe," (VAN model)"),dEe.forEach(t),ono=i(ne),Ih=n(ne,"LI",{});var cEe=s(Ih);joe=n(cEe,"STRONG",{});var szr=s(joe);rno=r(szr,"vit"),szr.forEach(t),tno=r(cEe," \u2014 "),hB=n(cEe,"A",{href:!0});var lzr=s(hB);ano=r(lzr,"ViTFeatureExtractor"),lzr.forEach(t),nno=r(cEe," (ViT model)"),cEe.forEach(t),sno=i(ne),qh=n(ne,"LI",{});var fEe=s(qh);Doe=n(fEe,"STRONG",{});var izr=s(Doe);lno=r(izr,"vit_mae"),izr.forEach(t),ino=r(fEe," \u2014 "),pB=n(fEe,"A",{href:!0});var dzr=s(pB);dno=r(dzr,"ViTFeatureExtractor"),dzr.forEach(t),cno=r(fEe," (ViTMAE model)"),fEe.forEach(t),fno=i(ne),Nh=n(ne,"LI",{});var mEe=s(Nh);Goe=n(mEe,"STRONG",{});var czr=s(Goe);mno=r(czr,"wav2vec2"),czr.forEach(t),gno=r(mEe," \u2014 "),_B=n(mEe,"A",{href:!0});var fzr=s(_B);hno=r(fzr,"Wav2Vec2FeatureExtractor"),fzr.forEach(t),pno=r(mEe," (Wav2Vec2 model)"),mEe.forEach(t),ne.forEach(t),_no=i(Nt),m(jh.$$.fragment,Nt),uno=i(Nt),Ooe=n(Nt,"P",{});var mzr=s(Ooe);bno=r(mzr,"Examples:"),mzr.forEach(t),Fno=i(Nt),m(l3.$$.fragment,Nt),Nt.forEach(t),vno=i(Ws),Dh=n(Ws,"DIV",{class:!0});var L$e=s(Dh);m(i3.$$.fragment,L$e),Tno=i(L$e),Voe=n(L$e,"P",{});var gzr=s(Voe);Mno=r(gzr,"Register a new feature extractor for this class."),gzr.forEach(t),L$e.forEach(t),Ws.forEach(t),MBe=i(c),Yi=n(c,"H2",{class:!0});var x$e=s(Yi);Gh=n(x$e,"A",{id:!0,class:!0,href:!0});var hzr=s(Gh);Xoe=n(hzr,"SPAN",{});var pzr=s(Xoe);m(d3.$$.fragment,pzr),pzr.forEach(t),hzr.forEach(t),Eno=i(x$e),zoe=n(x$e,"SPAN",{});var _zr=s(zoe);Cno=r(_zr,"AutoProcessor"),_zr.forEach(t),x$e.forEach(t),EBe=i(c),Uo=n(c,"DIV",{class:!0});var Hs=s(Uo);m(c3.$$.fragment,Hs),wno=i(Hs),f3=n(Hs,"P",{});var k$e=s(f3);Ano=r(k$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uB=n(k$e,"A",{href:!0});var uzr=s(uB);yno=r(uzr,"AutoProcessor.from_pretrained()"),uzr.forEach(t),Lno=r(k$e," class method."),k$e.forEach(t),xno=i(Hs),m3=n(Hs,"P",{});var S$e=s(m3);kno=r(S$e,"This class cannot be instantiated directly using "),Qoe=n(S$e,"CODE",{});var bzr=s(Qoe);Sno=r(bzr,"__init__()"),bzr.forEach(t),Rno=r(S$e," (throws an error)."),S$e.forEach(t),Bno=i(Hs),qe=n(Hs,"DIV",{class:!0});var jt=s(qe);m(g3.$$.fragment,jt),Pno=i(jt),Woe=n(jt,"P",{});var Fzr=s(Woe);$no=r(Fzr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fzr.forEach(t),Ino=i(jt),Ki=n(jt,"P",{});var jU=s(Ki);qno=r(jU,"The processor class to instantiate is selected based on the "),Hoe=n(jU,"CODE",{});var vzr=s(Hoe);Nno=r(vzr,"model_type"),vzr.forEach(t),jno=r(jU,` property of the config object (either
passed as an argument or loaded from `),Uoe=n(jU,"CODE",{});var Tzr=s(Uoe);Dno=r(Tzr,"pretrained_model_name_or_path"),Tzr.forEach(t),Gno=r(jU," if possible):"),jU.forEach(t),Ono=i(jt),Se=n(jt,"UL",{});var jo=s(Se);Oh=n(jo,"LI",{});var gEe=s(Oh);Joe=n(gEe,"STRONG",{});var Mzr=s(Joe);Vno=r(Mzr,"clip"),Mzr.forEach(t),Xno=r(gEe," \u2014 "),bB=n(gEe,"A",{href:!0});var Ezr=s(bB);zno=r(Ezr,"CLIPProcessor"),Ezr.forEach(t),Qno=r(gEe," (CLIP model)"),gEe.forEach(t),Wno=i(jo),Vh=n(jo,"LI",{});var hEe=s(Vh);Yoe=n(hEe,"STRONG",{});var Czr=s(Yoe);Hno=r(Czr,"layoutlmv2"),Czr.forEach(t),Uno=r(hEe," \u2014 "),FB=n(hEe,"A",{href:!0});var wzr=s(FB);Jno=r(wzr,"LayoutLMv2Processor"),wzr.forEach(t),Yno=r(hEe," (LayoutLMv2 model)"),hEe.forEach(t),Kno=i(jo),Xh=n(jo,"LI",{});var pEe=s(Xh);Koe=n(pEe,"STRONG",{});var Azr=s(Koe);Zno=r(Azr,"layoutxlm"),Azr.forEach(t),eso=r(pEe," \u2014 "),vB=n(pEe,"A",{href:!0});var yzr=s(vB);oso=r(yzr,"LayoutXLMProcessor"),yzr.forEach(t),rso=r(pEe," (LayoutXLM model)"),pEe.forEach(t),tso=i(jo),zh=n(jo,"LI",{});var _Ee=s(zh);Zoe=n(_Ee,"STRONG",{});var Lzr=s(Zoe);aso=r(Lzr,"speech_to_text"),Lzr.forEach(t),nso=r(_Ee," \u2014 "),TB=n(_Ee,"A",{href:!0});var xzr=s(TB);sso=r(xzr,"Speech2TextProcessor"),xzr.forEach(t),lso=r(_Ee," (Speech2Text model)"),_Ee.forEach(t),iso=i(jo),Qh=n(jo,"LI",{});var uEe=s(Qh);ere=n(uEe,"STRONG",{});var kzr=s(ere);dso=r(kzr,"speech_to_text_2"),kzr.forEach(t),cso=r(uEe," \u2014 "),MB=n(uEe,"A",{href:!0});var Szr=s(MB);fso=r(Szr,"Speech2Text2Processor"),Szr.forEach(t),mso=r(uEe," (Speech2Text2 model)"),uEe.forEach(t),gso=i(jo),Wh=n(jo,"LI",{});var bEe=s(Wh);ore=n(bEe,"STRONG",{});var Rzr=s(ore);hso=r(Rzr,"trocr"),Rzr.forEach(t),pso=r(bEe," \u2014 "),EB=n(bEe,"A",{href:!0});var Bzr=s(EB);_so=r(Bzr,"TrOCRProcessor"),Bzr.forEach(t),uso=r(bEe," (TrOCR model)"),bEe.forEach(t),bso=i(jo),Hh=n(jo,"LI",{});var FEe=s(Hh);rre=n(FEe,"STRONG",{});var Pzr=s(rre);Fso=r(Pzr,"vision-text-dual-encoder"),Pzr.forEach(t),vso=r(FEe," \u2014 "),CB=n(FEe,"A",{href:!0});var $zr=s(CB);Tso=r($zr,"VisionTextDualEncoderProcessor"),$zr.forEach(t),Mso=r(FEe," (VisionTextDualEncoder model)"),FEe.forEach(t),Eso=i(jo),Uh=n(jo,"LI",{});var vEe=s(Uh);tre=n(vEe,"STRONG",{});var Izr=s(tre);Cso=r(Izr,"wav2vec2"),Izr.forEach(t),wso=r(vEe," \u2014 "),wB=n(vEe,"A",{href:!0});var qzr=s(wB);Aso=r(qzr,"Wav2Vec2Processor"),qzr.forEach(t),yso=r(vEe," (Wav2Vec2 model)"),vEe.forEach(t),jo.forEach(t),Lso=i(jt),m(Jh.$$.fragment,jt),xso=i(jt),are=n(jt,"P",{});var Nzr=s(are);kso=r(Nzr,"Examples:"),Nzr.forEach(t),Sso=i(jt),m(h3.$$.fragment,jt),jt.forEach(t),Rso=i(Hs),Yh=n(Hs,"DIV",{class:!0});var R$e=s(Yh);m(p3.$$.fragment,R$e),Bso=i(R$e),nre=n(R$e,"P",{});var jzr=s(nre);Pso=r(jzr,"Register a new processor for this class."),jzr.forEach(t),R$e.forEach(t),Hs.forEach(t),CBe=i(c),Zi=n(c,"H2",{class:!0});var B$e=s(Zi);Kh=n(B$e,"A",{id:!0,class:!0,href:!0});var Dzr=s(Kh);sre=n(Dzr,"SPAN",{});var Gzr=s(sre);m(_3.$$.fragment,Gzr),Gzr.forEach(t),Dzr.forEach(t),$so=i(B$e),lre=n(B$e,"SPAN",{});var Ozr=s(lre);Iso=r(Ozr,"AutoModel"),Ozr.forEach(t),B$e.forEach(t),wBe=i(c),Jo=n(c,"DIV",{class:!0});var Us=s(Jo);m(u3.$$.fragment,Us),qso=i(Us),ed=n(Us,"P",{});var DU=s(ed);Nso=r(DU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),AB=n(DU,"A",{href:!0});var Vzr=s(AB);jso=r(Vzr,"from_pretrained()"),Vzr.forEach(t),Dso=r(DU," class method or the "),yB=n(DU,"A",{href:!0});var Xzr=s(yB);Gso=r(Xzr,"from_config()"),Xzr.forEach(t),Oso=r(DU,` class
method.`),DU.forEach(t),Vso=i(Us),b3=n(Us,"P",{});var P$e=s(b3);Xso=r(P$e,"This class cannot be instantiated directly using "),ire=n(P$e,"CODE",{});var zzr=s(ire);zso=r(zzr,"__init__()"),zzr.forEach(t),Qso=r(P$e," (throws an error)."),P$e.forEach(t),Wso=i(Us),Xr=n(Us,"DIV",{class:!0});var Js=s(Xr);m(F3.$$.fragment,Js),Hso=i(Js),dre=n(Js,"P",{});var Qzr=s(dre);Uso=r(Qzr,"Instantiates one of the base model classes of the library from a configuration."),Qzr.forEach(t),Jso=i(Js),od=n(Js,"P",{});var GU=s(od);Yso=r(GU,`Note:
Loading a model from its configuration file does `),cre=n(GU,"STRONG",{});var Wzr=s(cre);Kso=r(Wzr,"not"),Wzr.forEach(t),Zso=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),LB=n(GU,"A",{href:!0});var Hzr=s(LB);elo=r(Hzr,"from_pretrained()"),Hzr.forEach(t),olo=r(GU," to load the model weights."),GU.forEach(t),rlo=i(Js),fre=n(Js,"P",{});var Uzr=s(fre);tlo=r(Uzr,"Examples:"),Uzr.forEach(t),alo=i(Js),m(v3.$$.fragment,Js),Js.forEach(t),nlo=i(Us),Ne=n(Us,"DIV",{class:!0});var Dt=s(Ne);m(T3.$$.fragment,Dt),slo=i(Dt),mre=n(Dt,"P",{});var Jzr=s(mre);llo=r(Jzr,"Instantiate one of the base model classes of the library from a pretrained model."),Jzr.forEach(t),ilo=i(Dt),Xa=n(Dt,"P",{});var jE=s(Xa);dlo=r(jE,"The model class to instantiate is selected based on the "),gre=n(jE,"CODE",{});var Yzr=s(gre);clo=r(Yzr,"model_type"),Yzr.forEach(t),flo=r(jE,` property of the config object (either
passed as an argument or loaded from `),hre=n(jE,"CODE",{});var Kzr=s(hre);mlo=r(Kzr,"pretrained_model_name_or_path"),Kzr.forEach(t),glo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pre=n(jE,"CODE",{});var Zzr=s(pre);hlo=r(Zzr,"pretrained_model_name_or_path"),Zzr.forEach(t),plo=r(jE,":"),jE.forEach(t),_lo=i(Dt),T=n(Dt,"UL",{});var M=s(T);Zh=n(M,"LI",{});var TEe=s(Zh);_re=n(TEe,"STRONG",{});var eQr=s(_re);ulo=r(eQr,"albert"),eQr.forEach(t),blo=r(TEe," \u2014 "),xB=n(TEe,"A",{href:!0});var oQr=s(xB);Flo=r(oQr,"AlbertModel"),oQr.forEach(t),vlo=r(TEe," (ALBERT model)"),TEe.forEach(t),Tlo=i(M),ep=n(M,"LI",{});var MEe=s(ep);ure=n(MEe,"STRONG",{});var rQr=s(ure);Mlo=r(rQr,"bart"),rQr.forEach(t),Elo=r(MEe," \u2014 "),kB=n(MEe,"A",{href:!0});var tQr=s(kB);Clo=r(tQr,"BartModel"),tQr.forEach(t),wlo=r(MEe," (BART model)"),MEe.forEach(t),Alo=i(M),op=n(M,"LI",{});var EEe=s(op);bre=n(EEe,"STRONG",{});var aQr=s(bre);ylo=r(aQr,"beit"),aQr.forEach(t),Llo=r(EEe," \u2014 "),SB=n(EEe,"A",{href:!0});var nQr=s(SB);xlo=r(nQr,"BeitModel"),nQr.forEach(t),klo=r(EEe," (BEiT model)"),EEe.forEach(t),Slo=i(M),rp=n(M,"LI",{});var CEe=s(rp);Fre=n(CEe,"STRONG",{});var sQr=s(Fre);Rlo=r(sQr,"bert"),sQr.forEach(t),Blo=r(CEe," \u2014 "),RB=n(CEe,"A",{href:!0});var lQr=s(RB);Plo=r(lQr,"BertModel"),lQr.forEach(t),$lo=r(CEe," (BERT model)"),CEe.forEach(t),Ilo=i(M),tp=n(M,"LI",{});var wEe=s(tp);vre=n(wEe,"STRONG",{});var iQr=s(vre);qlo=r(iQr,"bert-generation"),iQr.forEach(t),Nlo=r(wEe," \u2014 "),BB=n(wEe,"A",{href:!0});var dQr=s(BB);jlo=r(dQr,"BertGenerationEncoder"),dQr.forEach(t),Dlo=r(wEe," (Bert Generation model)"),wEe.forEach(t),Glo=i(M),ap=n(M,"LI",{});var AEe=s(ap);Tre=n(AEe,"STRONG",{});var cQr=s(Tre);Olo=r(cQr,"big_bird"),cQr.forEach(t),Vlo=r(AEe," \u2014 "),PB=n(AEe,"A",{href:!0});var fQr=s(PB);Xlo=r(fQr,"BigBirdModel"),fQr.forEach(t),zlo=r(AEe," (BigBird model)"),AEe.forEach(t),Qlo=i(M),np=n(M,"LI",{});var yEe=s(np);Mre=n(yEe,"STRONG",{});var mQr=s(Mre);Wlo=r(mQr,"bigbird_pegasus"),mQr.forEach(t),Hlo=r(yEe," \u2014 "),$B=n(yEe,"A",{href:!0});var gQr=s($B);Ulo=r(gQr,"BigBirdPegasusModel"),gQr.forEach(t),Jlo=r(yEe," (BigBirdPegasus model)"),yEe.forEach(t),Ylo=i(M),sp=n(M,"LI",{});var LEe=s(sp);Ere=n(LEe,"STRONG",{});var hQr=s(Ere);Klo=r(hQr,"blenderbot"),hQr.forEach(t),Zlo=r(LEe," \u2014 "),IB=n(LEe,"A",{href:!0});var pQr=s(IB);eio=r(pQr,"BlenderbotModel"),pQr.forEach(t),oio=r(LEe," (Blenderbot model)"),LEe.forEach(t),rio=i(M),lp=n(M,"LI",{});var xEe=s(lp);Cre=n(xEe,"STRONG",{});var _Qr=s(Cre);tio=r(_Qr,"blenderbot-small"),_Qr.forEach(t),aio=r(xEe," \u2014 "),qB=n(xEe,"A",{href:!0});var uQr=s(qB);nio=r(uQr,"BlenderbotSmallModel"),uQr.forEach(t),sio=r(xEe," (BlenderbotSmall model)"),xEe.forEach(t),lio=i(M),ip=n(M,"LI",{});var kEe=s(ip);wre=n(kEe,"STRONG",{});var bQr=s(wre);iio=r(bQr,"camembert"),bQr.forEach(t),dio=r(kEe," \u2014 "),NB=n(kEe,"A",{href:!0});var FQr=s(NB);cio=r(FQr,"CamembertModel"),FQr.forEach(t),fio=r(kEe," (CamemBERT model)"),kEe.forEach(t),mio=i(M),dp=n(M,"LI",{});var SEe=s(dp);Are=n(SEe,"STRONG",{});var vQr=s(Are);gio=r(vQr,"canine"),vQr.forEach(t),hio=r(SEe," \u2014 "),jB=n(SEe,"A",{href:!0});var TQr=s(jB);pio=r(TQr,"CanineModel"),TQr.forEach(t),_io=r(SEe," (Canine model)"),SEe.forEach(t),uio=i(M),cp=n(M,"LI",{});var REe=s(cp);yre=n(REe,"STRONG",{});var MQr=s(yre);bio=r(MQr,"clip"),MQr.forEach(t),Fio=r(REe," \u2014 "),DB=n(REe,"A",{href:!0});var EQr=s(DB);vio=r(EQr,"CLIPModel"),EQr.forEach(t),Tio=r(REe," (CLIP model)"),REe.forEach(t),Mio=i(M),fp=n(M,"LI",{});var BEe=s(fp);Lre=n(BEe,"STRONG",{});var CQr=s(Lre);Eio=r(CQr,"convbert"),CQr.forEach(t),Cio=r(BEe," \u2014 "),GB=n(BEe,"A",{href:!0});var wQr=s(GB);wio=r(wQr,"ConvBertModel"),wQr.forEach(t),Aio=r(BEe," (ConvBERT model)"),BEe.forEach(t),yio=i(M),mp=n(M,"LI",{});var PEe=s(mp);xre=n(PEe,"STRONG",{});var AQr=s(xre);Lio=r(AQr,"convnext"),AQr.forEach(t),xio=r(PEe," \u2014 "),OB=n(PEe,"A",{href:!0});var yQr=s(OB);kio=r(yQr,"ConvNextModel"),yQr.forEach(t),Sio=r(PEe," (ConvNext model)"),PEe.forEach(t),Rio=i(M),gp=n(M,"LI",{});var $Ee=s(gp);kre=n($Ee,"STRONG",{});var LQr=s(kre);Bio=r(LQr,"ctrl"),LQr.forEach(t),Pio=r($Ee," \u2014 "),VB=n($Ee,"A",{href:!0});var xQr=s(VB);$io=r(xQr,"CTRLModel"),xQr.forEach(t),Iio=r($Ee," (CTRL model)"),$Ee.forEach(t),qio=i(M),hp=n(M,"LI",{});var IEe=s(hp);Sre=n(IEe,"STRONG",{});var kQr=s(Sre);Nio=r(kQr,"data2vec-audio"),kQr.forEach(t),jio=r(IEe," \u2014 "),XB=n(IEe,"A",{href:!0});var SQr=s(XB);Dio=r(SQr,"Data2VecAudioModel"),SQr.forEach(t),Gio=r(IEe," (Data2VecAudio model)"),IEe.forEach(t),Oio=i(M),pp=n(M,"LI",{});var qEe=s(pp);Rre=n(qEe,"STRONG",{});var RQr=s(Rre);Vio=r(RQr,"data2vec-text"),RQr.forEach(t),Xio=r(qEe," \u2014 "),zB=n(qEe,"A",{href:!0});var BQr=s(zB);zio=r(BQr,"Data2VecTextModel"),BQr.forEach(t),Qio=r(qEe," (Data2VecText model)"),qEe.forEach(t),Wio=i(M),_p=n(M,"LI",{});var NEe=s(_p);Bre=n(NEe,"STRONG",{});var PQr=s(Bre);Hio=r(PQr,"data2vec-vision"),PQr.forEach(t),Uio=r(NEe," \u2014 "),QB=n(NEe,"A",{href:!0});var $Qr=s(QB);Jio=r($Qr,"Data2VecVisionModel"),$Qr.forEach(t),Yio=r(NEe," (Data2VecVision model)"),NEe.forEach(t),Kio=i(M),up=n(M,"LI",{});var jEe=s(up);Pre=n(jEe,"STRONG",{});var IQr=s(Pre);Zio=r(IQr,"deberta"),IQr.forEach(t),edo=r(jEe," \u2014 "),WB=n(jEe,"A",{href:!0});var qQr=s(WB);odo=r(qQr,"DebertaModel"),qQr.forEach(t),rdo=r(jEe," (DeBERTa model)"),jEe.forEach(t),tdo=i(M),bp=n(M,"LI",{});var DEe=s(bp);$re=n(DEe,"STRONG",{});var NQr=s($re);ado=r(NQr,"deberta-v2"),NQr.forEach(t),ndo=r(DEe," \u2014 "),HB=n(DEe,"A",{href:!0});var jQr=s(HB);sdo=r(jQr,"DebertaV2Model"),jQr.forEach(t),ldo=r(DEe," (DeBERTa-v2 model)"),DEe.forEach(t),ido=i(M),Fp=n(M,"LI",{});var GEe=s(Fp);Ire=n(GEe,"STRONG",{});var DQr=s(Ire);ddo=r(DQr,"decision_transformer"),DQr.forEach(t),cdo=r(GEe," \u2014 "),UB=n(GEe,"A",{href:!0});var GQr=s(UB);fdo=r(GQr,"DecisionTransformerModel"),GQr.forEach(t),mdo=r(GEe," (Decision Transformer model)"),GEe.forEach(t),gdo=i(M),vp=n(M,"LI",{});var OEe=s(vp);qre=n(OEe,"STRONG",{});var OQr=s(qre);hdo=r(OQr,"deit"),OQr.forEach(t),pdo=r(OEe," \u2014 "),JB=n(OEe,"A",{href:!0});var VQr=s(JB);_do=r(VQr,"DeiTModel"),VQr.forEach(t),udo=r(OEe," (DeiT model)"),OEe.forEach(t),bdo=i(M),Tp=n(M,"LI",{});var VEe=s(Tp);Nre=n(VEe,"STRONG",{});var XQr=s(Nre);Fdo=r(XQr,"detr"),XQr.forEach(t),vdo=r(VEe," \u2014 "),YB=n(VEe,"A",{href:!0});var zQr=s(YB);Tdo=r(zQr,"DetrModel"),zQr.forEach(t),Mdo=r(VEe," (DETR model)"),VEe.forEach(t),Edo=i(M),Mp=n(M,"LI",{});var XEe=s(Mp);jre=n(XEe,"STRONG",{});var QQr=s(jre);Cdo=r(QQr,"distilbert"),QQr.forEach(t),wdo=r(XEe," \u2014 "),KB=n(XEe,"A",{href:!0});var WQr=s(KB);Ado=r(WQr,"DistilBertModel"),WQr.forEach(t),ydo=r(XEe," (DistilBERT model)"),XEe.forEach(t),Ldo=i(M),Ep=n(M,"LI",{});var zEe=s(Ep);Dre=n(zEe,"STRONG",{});var HQr=s(Dre);xdo=r(HQr,"dpr"),HQr.forEach(t),kdo=r(zEe," \u2014 "),ZB=n(zEe,"A",{href:!0});var UQr=s(ZB);Sdo=r(UQr,"DPRQuestionEncoder"),UQr.forEach(t),Rdo=r(zEe," (DPR model)"),zEe.forEach(t),Bdo=i(M),Cp=n(M,"LI",{});var QEe=s(Cp);Gre=n(QEe,"STRONG",{});var JQr=s(Gre);Pdo=r(JQr,"dpt"),JQr.forEach(t),$do=r(QEe," \u2014 "),eP=n(QEe,"A",{href:!0});var YQr=s(eP);Ido=r(YQr,"DPTModel"),YQr.forEach(t),qdo=r(QEe," (DPT model)"),QEe.forEach(t),Ndo=i(M),wp=n(M,"LI",{});var WEe=s(wp);Ore=n(WEe,"STRONG",{});var KQr=s(Ore);jdo=r(KQr,"electra"),KQr.forEach(t),Ddo=r(WEe," \u2014 "),oP=n(WEe,"A",{href:!0});var ZQr=s(oP);Gdo=r(ZQr,"ElectraModel"),ZQr.forEach(t),Odo=r(WEe," (ELECTRA model)"),WEe.forEach(t),Vdo=i(M),Ap=n(M,"LI",{});var HEe=s(Ap);Vre=n(HEe,"STRONG",{});var eWr=s(Vre);Xdo=r(eWr,"flaubert"),eWr.forEach(t),zdo=r(HEe," \u2014 "),rP=n(HEe,"A",{href:!0});var oWr=s(rP);Qdo=r(oWr,"FlaubertModel"),oWr.forEach(t),Wdo=r(HEe," (FlauBERT model)"),HEe.forEach(t),Hdo=i(M),yp=n(M,"LI",{});var UEe=s(yp);Xre=n(UEe,"STRONG",{});var rWr=s(Xre);Udo=r(rWr,"fnet"),rWr.forEach(t),Jdo=r(UEe," \u2014 "),tP=n(UEe,"A",{href:!0});var tWr=s(tP);Ydo=r(tWr,"FNetModel"),tWr.forEach(t),Kdo=r(UEe," (FNet model)"),UEe.forEach(t),Zdo=i(M),Lp=n(M,"LI",{});var JEe=s(Lp);zre=n(JEe,"STRONG",{});var aWr=s(zre);eco=r(aWr,"fsmt"),aWr.forEach(t),oco=r(JEe," \u2014 "),aP=n(JEe,"A",{href:!0});var nWr=s(aP);rco=r(nWr,"FSMTModel"),nWr.forEach(t),tco=r(JEe," (FairSeq Machine-Translation model)"),JEe.forEach(t),aco=i(M),Os=n(M,"LI",{});var y8=s(Os);Qre=n(y8,"STRONG",{});var sWr=s(Qre);nco=r(sWr,"funnel"),sWr.forEach(t),sco=r(y8," \u2014 "),nP=n(y8,"A",{href:!0});var lWr=s(nP);lco=r(lWr,"FunnelModel"),lWr.forEach(t),ico=r(y8," or "),sP=n(y8,"A",{href:!0});var iWr=s(sP);dco=r(iWr,"FunnelBaseModel"),iWr.forEach(t),cco=r(y8," (Funnel Transformer model)"),y8.forEach(t),fco=i(M),xp=n(M,"LI",{});var YEe=s(xp);Wre=n(YEe,"STRONG",{});var dWr=s(Wre);mco=r(dWr,"glpn"),dWr.forEach(t),gco=r(YEe," \u2014 "),lP=n(YEe,"A",{href:!0});var cWr=s(lP);hco=r(cWr,"GLPNModel"),cWr.forEach(t),pco=r(YEe," (GLPN model)"),YEe.forEach(t),_co=i(M),kp=n(M,"LI",{});var KEe=s(kp);Hre=n(KEe,"STRONG",{});var fWr=s(Hre);uco=r(fWr,"gpt2"),fWr.forEach(t),bco=r(KEe," \u2014 "),iP=n(KEe,"A",{href:!0});var mWr=s(iP);Fco=r(mWr,"GPT2Model"),mWr.forEach(t),vco=r(KEe," (OpenAI GPT-2 model)"),KEe.forEach(t),Tco=i(M),Sp=n(M,"LI",{});var ZEe=s(Sp);Ure=n(ZEe,"STRONG",{});var gWr=s(Ure);Mco=r(gWr,"gpt_neo"),gWr.forEach(t),Eco=r(ZEe," \u2014 "),dP=n(ZEe,"A",{href:!0});var hWr=s(dP);Cco=r(hWr,"GPTNeoModel"),hWr.forEach(t),wco=r(ZEe," (GPT Neo model)"),ZEe.forEach(t),Aco=i(M),Rp=n(M,"LI",{});var e5e=s(Rp);Jre=n(e5e,"STRONG",{});var pWr=s(Jre);yco=r(pWr,"gptj"),pWr.forEach(t),Lco=r(e5e," \u2014 "),cP=n(e5e,"A",{href:!0});var _Wr=s(cP);xco=r(_Wr,"GPTJModel"),_Wr.forEach(t),kco=r(e5e," (GPT-J model)"),e5e.forEach(t),Sco=i(M),Bp=n(M,"LI",{});var o5e=s(Bp);Yre=n(o5e,"STRONG",{});var uWr=s(Yre);Rco=r(uWr,"hubert"),uWr.forEach(t),Bco=r(o5e," \u2014 "),fP=n(o5e,"A",{href:!0});var bWr=s(fP);Pco=r(bWr,"HubertModel"),bWr.forEach(t),$co=r(o5e," (Hubert model)"),o5e.forEach(t),Ico=i(M),Pp=n(M,"LI",{});var r5e=s(Pp);Kre=n(r5e,"STRONG",{});var FWr=s(Kre);qco=r(FWr,"ibert"),FWr.forEach(t),Nco=r(r5e," \u2014 "),mP=n(r5e,"A",{href:!0});var vWr=s(mP);jco=r(vWr,"IBertModel"),vWr.forEach(t),Dco=r(r5e," (I-BERT model)"),r5e.forEach(t),Gco=i(M),$p=n(M,"LI",{});var t5e=s($p);Zre=n(t5e,"STRONG",{});var TWr=s(Zre);Oco=r(TWr,"imagegpt"),TWr.forEach(t),Vco=r(t5e," \u2014 "),gP=n(t5e,"A",{href:!0});var MWr=s(gP);Xco=r(MWr,"ImageGPTModel"),MWr.forEach(t),zco=r(t5e," (ImageGPT model)"),t5e.forEach(t),Qco=i(M),Ip=n(M,"LI",{});var a5e=s(Ip);ete=n(a5e,"STRONG",{});var EWr=s(ete);Wco=r(EWr,"layoutlm"),EWr.forEach(t),Hco=r(a5e," \u2014 "),hP=n(a5e,"A",{href:!0});var CWr=s(hP);Uco=r(CWr,"LayoutLMModel"),CWr.forEach(t),Jco=r(a5e," (LayoutLM model)"),a5e.forEach(t),Yco=i(M),qp=n(M,"LI",{});var n5e=s(qp);ote=n(n5e,"STRONG",{});var wWr=s(ote);Kco=r(wWr,"layoutlmv2"),wWr.forEach(t),Zco=r(n5e," \u2014 "),pP=n(n5e,"A",{href:!0});var AWr=s(pP);efo=r(AWr,"LayoutLMv2Model"),AWr.forEach(t),ofo=r(n5e," (LayoutLMv2 model)"),n5e.forEach(t),rfo=i(M),Np=n(M,"LI",{});var s5e=s(Np);rte=n(s5e,"STRONG",{});var yWr=s(rte);tfo=r(yWr,"led"),yWr.forEach(t),afo=r(s5e," \u2014 "),_P=n(s5e,"A",{href:!0});var LWr=s(_P);nfo=r(LWr,"LEDModel"),LWr.forEach(t),sfo=r(s5e," (LED model)"),s5e.forEach(t),lfo=i(M),jp=n(M,"LI",{});var l5e=s(jp);tte=n(l5e,"STRONG",{});var xWr=s(tte);ifo=r(xWr,"longformer"),xWr.forEach(t),dfo=r(l5e," \u2014 "),uP=n(l5e,"A",{href:!0});var kWr=s(uP);cfo=r(kWr,"LongformerModel"),kWr.forEach(t),ffo=r(l5e," (Longformer model)"),l5e.forEach(t),mfo=i(M),Dp=n(M,"LI",{});var i5e=s(Dp);ate=n(i5e,"STRONG",{});var SWr=s(ate);gfo=r(SWr,"longt5"),SWr.forEach(t),hfo=r(i5e," \u2014 "),bP=n(i5e,"A",{href:!0});var RWr=s(bP);pfo=r(RWr,"LongT5Model"),RWr.forEach(t),_fo=r(i5e," (LongT5 model)"),i5e.forEach(t),ufo=i(M),Gp=n(M,"LI",{});var d5e=s(Gp);nte=n(d5e,"STRONG",{});var BWr=s(nte);bfo=r(BWr,"luke"),BWr.forEach(t),Ffo=r(d5e," \u2014 "),FP=n(d5e,"A",{href:!0});var PWr=s(FP);vfo=r(PWr,"LukeModel"),PWr.forEach(t),Tfo=r(d5e," (LUKE model)"),d5e.forEach(t),Mfo=i(M),Op=n(M,"LI",{});var c5e=s(Op);ste=n(c5e,"STRONG",{});var $Wr=s(ste);Efo=r($Wr,"lxmert"),$Wr.forEach(t),Cfo=r(c5e," \u2014 "),vP=n(c5e,"A",{href:!0});var IWr=s(vP);wfo=r(IWr,"LxmertModel"),IWr.forEach(t),Afo=r(c5e," (LXMERT model)"),c5e.forEach(t),yfo=i(M),Vp=n(M,"LI",{});var f5e=s(Vp);lte=n(f5e,"STRONG",{});var qWr=s(lte);Lfo=r(qWr,"m2m_100"),qWr.forEach(t),xfo=r(f5e," \u2014 "),TP=n(f5e,"A",{href:!0});var NWr=s(TP);kfo=r(NWr,"M2M100Model"),NWr.forEach(t),Sfo=r(f5e," (M2M100 model)"),f5e.forEach(t),Rfo=i(M),Xp=n(M,"LI",{});var m5e=s(Xp);ite=n(m5e,"STRONG",{});var jWr=s(ite);Bfo=r(jWr,"marian"),jWr.forEach(t),Pfo=r(m5e," \u2014 "),MP=n(m5e,"A",{href:!0});var DWr=s(MP);$fo=r(DWr,"MarianModel"),DWr.forEach(t),Ifo=r(m5e," (Marian model)"),m5e.forEach(t),qfo=i(M),zp=n(M,"LI",{});var g5e=s(zp);dte=n(g5e,"STRONG",{});var GWr=s(dte);Nfo=r(GWr,"maskformer"),GWr.forEach(t),jfo=r(g5e," \u2014 "),EP=n(g5e,"A",{href:!0});var OWr=s(EP);Dfo=r(OWr,"MaskFormerModel"),OWr.forEach(t),Gfo=r(g5e," (MaskFormer model)"),g5e.forEach(t),Ofo=i(M),Qp=n(M,"LI",{});var h5e=s(Qp);cte=n(h5e,"STRONG",{});var VWr=s(cte);Vfo=r(VWr,"mbart"),VWr.forEach(t),Xfo=r(h5e," \u2014 "),CP=n(h5e,"A",{href:!0});var XWr=s(CP);zfo=r(XWr,"MBartModel"),XWr.forEach(t),Qfo=r(h5e," (mBART model)"),h5e.forEach(t),Wfo=i(M),Wp=n(M,"LI",{});var p5e=s(Wp);fte=n(p5e,"STRONG",{});var zWr=s(fte);Hfo=r(zWr,"megatron-bert"),zWr.forEach(t),Ufo=r(p5e," \u2014 "),wP=n(p5e,"A",{href:!0});var QWr=s(wP);Jfo=r(QWr,"MegatronBertModel"),QWr.forEach(t),Yfo=r(p5e," (MegatronBert model)"),p5e.forEach(t),Kfo=i(M),Hp=n(M,"LI",{});var _5e=s(Hp);mte=n(_5e,"STRONG",{});var WWr=s(mte);Zfo=r(WWr,"mobilebert"),WWr.forEach(t),emo=r(_5e," \u2014 "),AP=n(_5e,"A",{href:!0});var HWr=s(AP);omo=r(HWr,"MobileBertModel"),HWr.forEach(t),rmo=r(_5e," (MobileBERT model)"),_5e.forEach(t),tmo=i(M),Up=n(M,"LI",{});var u5e=s(Up);gte=n(u5e,"STRONG",{});var UWr=s(gte);amo=r(UWr,"mpnet"),UWr.forEach(t),nmo=r(u5e," \u2014 "),yP=n(u5e,"A",{href:!0});var JWr=s(yP);smo=r(JWr,"MPNetModel"),JWr.forEach(t),lmo=r(u5e," (MPNet model)"),u5e.forEach(t),imo=i(M),Jp=n(M,"LI",{});var b5e=s(Jp);hte=n(b5e,"STRONG",{});var YWr=s(hte);dmo=r(YWr,"mt5"),YWr.forEach(t),cmo=r(b5e," \u2014 "),LP=n(b5e,"A",{href:!0});var KWr=s(LP);fmo=r(KWr,"MT5Model"),KWr.forEach(t),mmo=r(b5e," (mT5 model)"),b5e.forEach(t),gmo=i(M),Yp=n(M,"LI",{});var F5e=s(Yp);pte=n(F5e,"STRONG",{});var ZWr=s(pte);hmo=r(ZWr,"nystromformer"),ZWr.forEach(t),pmo=r(F5e," \u2014 "),xP=n(F5e,"A",{href:!0});var eHr=s(xP);_mo=r(eHr,"NystromformerModel"),eHr.forEach(t),umo=r(F5e," (Nystromformer model)"),F5e.forEach(t),bmo=i(M),Kp=n(M,"LI",{});var v5e=s(Kp);_te=n(v5e,"STRONG",{});var oHr=s(_te);Fmo=r(oHr,"openai-gpt"),oHr.forEach(t),vmo=r(v5e," \u2014 "),kP=n(v5e,"A",{href:!0});var rHr=s(kP);Tmo=r(rHr,"OpenAIGPTModel"),rHr.forEach(t),Mmo=r(v5e," (OpenAI GPT model)"),v5e.forEach(t),Emo=i(M),Zp=n(M,"LI",{});var T5e=s(Zp);ute=n(T5e,"STRONG",{});var tHr=s(ute);Cmo=r(tHr,"pegasus"),tHr.forEach(t),wmo=r(T5e," \u2014 "),SP=n(T5e,"A",{href:!0});var aHr=s(SP);Amo=r(aHr,"PegasusModel"),aHr.forEach(t),ymo=r(T5e," (Pegasus model)"),T5e.forEach(t),Lmo=i(M),e_=n(M,"LI",{});var M5e=s(e_);bte=n(M5e,"STRONG",{});var nHr=s(bte);xmo=r(nHr,"perceiver"),nHr.forEach(t),kmo=r(M5e," \u2014 "),RP=n(M5e,"A",{href:!0});var sHr=s(RP);Smo=r(sHr,"PerceiverModel"),sHr.forEach(t),Rmo=r(M5e," (Perceiver model)"),M5e.forEach(t),Bmo=i(M),o_=n(M,"LI",{});var E5e=s(o_);Fte=n(E5e,"STRONG",{});var lHr=s(Fte);Pmo=r(lHr,"plbart"),lHr.forEach(t),$mo=r(E5e," \u2014 "),BP=n(E5e,"A",{href:!0});var iHr=s(BP);Imo=r(iHr,"PLBartModel"),iHr.forEach(t),qmo=r(E5e," (PLBart model)"),E5e.forEach(t),Nmo=i(M),r_=n(M,"LI",{});var C5e=s(r_);vte=n(C5e,"STRONG",{});var dHr=s(vte);jmo=r(dHr,"poolformer"),dHr.forEach(t),Dmo=r(C5e," \u2014 "),PP=n(C5e,"A",{href:!0});var cHr=s(PP);Gmo=r(cHr,"PoolFormerModel"),cHr.forEach(t),Omo=r(C5e," (PoolFormer model)"),C5e.forEach(t),Vmo=i(M),t_=n(M,"LI",{});var w5e=s(t_);Tte=n(w5e,"STRONG",{});var fHr=s(Tte);Xmo=r(fHr,"prophetnet"),fHr.forEach(t),zmo=r(w5e," \u2014 "),$P=n(w5e,"A",{href:!0});var mHr=s($P);Qmo=r(mHr,"ProphetNetModel"),mHr.forEach(t),Wmo=r(w5e," (ProphetNet model)"),w5e.forEach(t),Hmo=i(M),a_=n(M,"LI",{});var A5e=s(a_);Mte=n(A5e,"STRONG",{});var gHr=s(Mte);Umo=r(gHr,"qdqbert"),gHr.forEach(t),Jmo=r(A5e," \u2014 "),IP=n(A5e,"A",{href:!0});var hHr=s(IP);Ymo=r(hHr,"QDQBertModel"),hHr.forEach(t),Kmo=r(A5e," (QDQBert model)"),A5e.forEach(t),Zmo=i(M),n_=n(M,"LI",{});var y5e=s(n_);Ete=n(y5e,"STRONG",{});var pHr=s(Ete);ego=r(pHr,"reformer"),pHr.forEach(t),ogo=r(y5e," \u2014 "),qP=n(y5e,"A",{href:!0});var _Hr=s(qP);rgo=r(_Hr,"ReformerModel"),_Hr.forEach(t),tgo=r(y5e," (Reformer model)"),y5e.forEach(t),ago=i(M),s_=n(M,"LI",{});var L5e=s(s_);Cte=n(L5e,"STRONG",{});var uHr=s(Cte);ngo=r(uHr,"regnet"),uHr.forEach(t),sgo=r(L5e," \u2014 "),NP=n(L5e,"A",{href:!0});var bHr=s(NP);lgo=r(bHr,"RegNetModel"),bHr.forEach(t),igo=r(L5e," (RegNet model)"),L5e.forEach(t),dgo=i(M),l_=n(M,"LI",{});var x5e=s(l_);wte=n(x5e,"STRONG",{});var FHr=s(wte);cgo=r(FHr,"rembert"),FHr.forEach(t),fgo=r(x5e," \u2014 "),jP=n(x5e,"A",{href:!0});var vHr=s(jP);mgo=r(vHr,"RemBertModel"),vHr.forEach(t),ggo=r(x5e," (RemBERT model)"),x5e.forEach(t),hgo=i(M),i_=n(M,"LI",{});var k5e=s(i_);Ate=n(k5e,"STRONG",{});var THr=s(Ate);pgo=r(THr,"resnet"),THr.forEach(t),_go=r(k5e," \u2014 "),DP=n(k5e,"A",{href:!0});var MHr=s(DP);ugo=r(MHr,"ResNetModel"),MHr.forEach(t),bgo=r(k5e," (ResNet model)"),k5e.forEach(t),Fgo=i(M),d_=n(M,"LI",{});var S5e=s(d_);yte=n(S5e,"STRONG",{});var EHr=s(yte);vgo=r(EHr,"retribert"),EHr.forEach(t),Tgo=r(S5e," \u2014 "),GP=n(S5e,"A",{href:!0});var CHr=s(GP);Mgo=r(CHr,"RetriBertModel"),CHr.forEach(t),Ego=r(S5e," (RetriBERT model)"),S5e.forEach(t),Cgo=i(M),c_=n(M,"LI",{});var R5e=s(c_);Lte=n(R5e,"STRONG",{});var wHr=s(Lte);wgo=r(wHr,"roberta"),wHr.forEach(t),Ago=r(R5e," \u2014 "),OP=n(R5e,"A",{href:!0});var AHr=s(OP);ygo=r(AHr,"RobertaModel"),AHr.forEach(t),Lgo=r(R5e," (RoBERTa model)"),R5e.forEach(t),xgo=i(M),f_=n(M,"LI",{});var B5e=s(f_);xte=n(B5e,"STRONG",{});var yHr=s(xte);kgo=r(yHr,"roformer"),yHr.forEach(t),Sgo=r(B5e," \u2014 "),VP=n(B5e,"A",{href:!0});var LHr=s(VP);Rgo=r(LHr,"RoFormerModel"),LHr.forEach(t),Bgo=r(B5e," (RoFormer model)"),B5e.forEach(t),Pgo=i(M),m_=n(M,"LI",{});var P5e=s(m_);kte=n(P5e,"STRONG",{});var xHr=s(kte);$go=r(xHr,"segformer"),xHr.forEach(t),Igo=r(P5e," \u2014 "),XP=n(P5e,"A",{href:!0});var kHr=s(XP);qgo=r(kHr,"SegformerModel"),kHr.forEach(t),Ngo=r(P5e," (SegFormer model)"),P5e.forEach(t),jgo=i(M),g_=n(M,"LI",{});var $5e=s(g_);Ste=n($5e,"STRONG",{});var SHr=s(Ste);Dgo=r(SHr,"sew"),SHr.forEach(t),Ggo=r($5e," \u2014 "),zP=n($5e,"A",{href:!0});var RHr=s(zP);Ogo=r(RHr,"SEWModel"),RHr.forEach(t),Vgo=r($5e," (SEW model)"),$5e.forEach(t),Xgo=i(M),h_=n(M,"LI",{});var I5e=s(h_);Rte=n(I5e,"STRONG",{});var BHr=s(Rte);zgo=r(BHr,"sew-d"),BHr.forEach(t),Qgo=r(I5e," \u2014 "),QP=n(I5e,"A",{href:!0});var PHr=s(QP);Wgo=r(PHr,"SEWDModel"),PHr.forEach(t),Hgo=r(I5e," (SEW-D model)"),I5e.forEach(t),Ugo=i(M),p_=n(M,"LI",{});var q5e=s(p_);Bte=n(q5e,"STRONG",{});var $Hr=s(Bte);Jgo=r($Hr,"speech_to_text"),$Hr.forEach(t),Ygo=r(q5e," \u2014 "),WP=n(q5e,"A",{href:!0});var IHr=s(WP);Kgo=r(IHr,"Speech2TextModel"),IHr.forEach(t),Zgo=r(q5e," (Speech2Text model)"),q5e.forEach(t),eho=i(M),__=n(M,"LI",{});var N5e=s(__);Pte=n(N5e,"STRONG",{});var qHr=s(Pte);oho=r(qHr,"splinter"),qHr.forEach(t),rho=r(N5e," \u2014 "),HP=n(N5e,"A",{href:!0});var NHr=s(HP);tho=r(NHr,"SplinterModel"),NHr.forEach(t),aho=r(N5e," (Splinter model)"),N5e.forEach(t),nho=i(M),u_=n(M,"LI",{});var j5e=s(u_);$te=n(j5e,"STRONG",{});var jHr=s($te);sho=r(jHr,"squeezebert"),jHr.forEach(t),lho=r(j5e," \u2014 "),UP=n(j5e,"A",{href:!0});var DHr=s(UP);iho=r(DHr,"SqueezeBertModel"),DHr.forEach(t),dho=r(j5e," (SqueezeBERT model)"),j5e.forEach(t),cho=i(M),b_=n(M,"LI",{});var D5e=s(b_);Ite=n(D5e,"STRONG",{});var GHr=s(Ite);fho=r(GHr,"swin"),GHr.forEach(t),mho=r(D5e," \u2014 "),JP=n(D5e,"A",{href:!0});var OHr=s(JP);gho=r(OHr,"SwinModel"),OHr.forEach(t),hho=r(D5e," (Swin model)"),D5e.forEach(t),pho=i(M),F_=n(M,"LI",{});var G5e=s(F_);qte=n(G5e,"STRONG",{});var VHr=s(qte);_ho=r(VHr,"t5"),VHr.forEach(t),uho=r(G5e," \u2014 "),YP=n(G5e,"A",{href:!0});var XHr=s(YP);bho=r(XHr,"T5Model"),XHr.forEach(t),Fho=r(G5e," (T5 model)"),G5e.forEach(t),vho=i(M),v_=n(M,"LI",{});var O5e=s(v_);Nte=n(O5e,"STRONG",{});var zHr=s(Nte);Tho=r(zHr,"tapas"),zHr.forEach(t),Mho=r(O5e," \u2014 "),KP=n(O5e,"A",{href:!0});var QHr=s(KP);Eho=r(QHr,"TapasModel"),QHr.forEach(t),Cho=r(O5e," (TAPAS model)"),O5e.forEach(t),who=i(M),T_=n(M,"LI",{});var V5e=s(T_);jte=n(V5e,"STRONG",{});var WHr=s(jte);Aho=r(WHr,"transfo-xl"),WHr.forEach(t),yho=r(V5e," \u2014 "),ZP=n(V5e,"A",{href:!0});var HHr=s(ZP);Lho=r(HHr,"TransfoXLModel"),HHr.forEach(t),xho=r(V5e," (Transformer-XL model)"),V5e.forEach(t),kho=i(M),M_=n(M,"LI",{});var X5e=s(M_);Dte=n(X5e,"STRONG",{});var UHr=s(Dte);Sho=r(UHr,"unispeech"),UHr.forEach(t),Rho=r(X5e," \u2014 "),e$=n(X5e,"A",{href:!0});var JHr=s(e$);Bho=r(JHr,"UniSpeechModel"),JHr.forEach(t),Pho=r(X5e," (UniSpeech model)"),X5e.forEach(t),$ho=i(M),E_=n(M,"LI",{});var z5e=s(E_);Gte=n(z5e,"STRONG",{});var YHr=s(Gte);Iho=r(YHr,"unispeech-sat"),YHr.forEach(t),qho=r(z5e," \u2014 "),o$=n(z5e,"A",{href:!0});var KHr=s(o$);Nho=r(KHr,"UniSpeechSatModel"),KHr.forEach(t),jho=r(z5e," (UniSpeechSat model)"),z5e.forEach(t),Dho=i(M),C_=n(M,"LI",{});var Q5e=s(C_);Ote=n(Q5e,"STRONG",{});var ZHr=s(Ote);Gho=r(ZHr,"van"),ZHr.forEach(t),Oho=r(Q5e," \u2014 "),r$=n(Q5e,"A",{href:!0});var eUr=s(r$);Vho=r(eUr,"VanModel"),eUr.forEach(t),Xho=r(Q5e," (VAN model)"),Q5e.forEach(t),zho=i(M),w_=n(M,"LI",{});var W5e=s(w_);Vte=n(W5e,"STRONG",{});var oUr=s(Vte);Qho=r(oUr,"vilt"),oUr.forEach(t),Who=r(W5e," \u2014 "),t$=n(W5e,"A",{href:!0});var rUr=s(t$);Hho=r(rUr,"ViltModel"),rUr.forEach(t),Uho=r(W5e," (ViLT model)"),W5e.forEach(t),Jho=i(M),A_=n(M,"LI",{});var H5e=s(A_);Xte=n(H5e,"STRONG",{});var tUr=s(Xte);Yho=r(tUr,"vision-text-dual-encoder"),tUr.forEach(t),Kho=r(H5e," \u2014 "),a$=n(H5e,"A",{href:!0});var aUr=s(a$);Zho=r(aUr,"VisionTextDualEncoderModel"),aUr.forEach(t),epo=r(H5e," (VisionTextDualEncoder model)"),H5e.forEach(t),opo=i(M),y_=n(M,"LI",{});var U5e=s(y_);zte=n(U5e,"STRONG",{});var nUr=s(zte);rpo=r(nUr,"visual_bert"),nUr.forEach(t),tpo=r(U5e," \u2014 "),n$=n(U5e,"A",{href:!0});var sUr=s(n$);apo=r(sUr,"VisualBertModel"),sUr.forEach(t),npo=r(U5e," (VisualBert model)"),U5e.forEach(t),spo=i(M),L_=n(M,"LI",{});var J5e=s(L_);Qte=n(J5e,"STRONG",{});var lUr=s(Qte);lpo=r(lUr,"vit"),lUr.forEach(t),ipo=r(J5e," \u2014 "),s$=n(J5e,"A",{href:!0});var iUr=s(s$);dpo=r(iUr,"ViTModel"),iUr.forEach(t),cpo=r(J5e," (ViT model)"),J5e.forEach(t),fpo=i(M),x_=n(M,"LI",{});var Y5e=s(x_);Wte=n(Y5e,"STRONG",{});var dUr=s(Wte);mpo=r(dUr,"vit_mae"),dUr.forEach(t),gpo=r(Y5e," \u2014 "),l$=n(Y5e,"A",{href:!0});var cUr=s(l$);hpo=r(cUr,"ViTMAEModel"),cUr.forEach(t),ppo=r(Y5e," (ViTMAE model)"),Y5e.forEach(t),_po=i(M),k_=n(M,"LI",{});var K5e=s(k_);Hte=n(K5e,"STRONG",{});var fUr=s(Hte);upo=r(fUr,"wav2vec2"),fUr.forEach(t),bpo=r(K5e," \u2014 "),i$=n(K5e,"A",{href:!0});var mUr=s(i$);Fpo=r(mUr,"Wav2Vec2Model"),mUr.forEach(t),vpo=r(K5e," (Wav2Vec2 model)"),K5e.forEach(t),Tpo=i(M),S_=n(M,"LI",{});var Z5e=s(S_);Ute=n(Z5e,"STRONG",{});var gUr=s(Ute);Mpo=r(gUr,"wavlm"),gUr.forEach(t),Epo=r(Z5e," \u2014 "),d$=n(Z5e,"A",{href:!0});var hUr=s(d$);Cpo=r(hUr,"WavLMModel"),hUr.forEach(t),wpo=r(Z5e," (WavLM model)"),Z5e.forEach(t),Apo=i(M),R_=n(M,"LI",{});var e3e=s(R_);Jte=n(e3e,"STRONG",{});var pUr=s(Jte);ypo=r(pUr,"xglm"),pUr.forEach(t),Lpo=r(e3e," \u2014 "),c$=n(e3e,"A",{href:!0});var _Ur=s(c$);xpo=r(_Ur,"XGLMModel"),_Ur.forEach(t),kpo=r(e3e," (XGLM model)"),e3e.forEach(t),Spo=i(M),B_=n(M,"LI",{});var o3e=s(B_);Yte=n(o3e,"STRONG",{});var uUr=s(Yte);Rpo=r(uUr,"xlm"),uUr.forEach(t),Bpo=r(o3e," \u2014 "),f$=n(o3e,"A",{href:!0});var bUr=s(f$);Ppo=r(bUr,"XLMModel"),bUr.forEach(t),$po=r(o3e," (XLM model)"),o3e.forEach(t),Ipo=i(M),P_=n(M,"LI",{});var r3e=s(P_);Kte=n(r3e,"STRONG",{});var FUr=s(Kte);qpo=r(FUr,"xlm-prophetnet"),FUr.forEach(t),Npo=r(r3e," \u2014 "),m$=n(r3e,"A",{href:!0});var vUr=s(m$);jpo=r(vUr,"XLMProphetNetModel"),vUr.forEach(t),Dpo=r(r3e," (XLMProphetNet model)"),r3e.forEach(t),Gpo=i(M),$_=n(M,"LI",{});var t3e=s($_);Zte=n(t3e,"STRONG",{});var TUr=s(Zte);Opo=r(TUr,"xlm-roberta"),TUr.forEach(t),Vpo=r(t3e," \u2014 "),g$=n(t3e,"A",{href:!0});var MUr=s(g$);Xpo=r(MUr,"XLMRobertaModel"),MUr.forEach(t),zpo=r(t3e," (XLM-RoBERTa model)"),t3e.forEach(t),Qpo=i(M),I_=n(M,"LI",{});var a3e=s(I_);eae=n(a3e,"STRONG",{});var EUr=s(eae);Wpo=r(EUr,"xlm-roberta-xl"),EUr.forEach(t),Hpo=r(a3e," \u2014 "),h$=n(a3e,"A",{href:!0});var CUr=s(h$);Upo=r(CUr,"XLMRobertaXLModel"),CUr.forEach(t),Jpo=r(a3e," (XLM-RoBERTa-XL model)"),a3e.forEach(t),Ypo=i(M),q_=n(M,"LI",{});var n3e=s(q_);oae=n(n3e,"STRONG",{});var wUr=s(oae);Kpo=r(wUr,"xlnet"),wUr.forEach(t),Zpo=r(n3e," \u2014 "),p$=n(n3e,"A",{href:!0});var AUr=s(p$);e_o=r(AUr,"XLNetModel"),AUr.forEach(t),o_o=r(n3e," (XLNet model)"),n3e.forEach(t),r_o=i(M),N_=n(M,"LI",{});var s3e=s(N_);rae=n(s3e,"STRONG",{});var yUr=s(rae);t_o=r(yUr,"yoso"),yUr.forEach(t),a_o=r(s3e," \u2014 "),_$=n(s3e,"A",{href:!0});var LUr=s(_$);n_o=r(LUr,"YosoModel"),LUr.forEach(t),s_o=r(s3e," (YOSO model)"),s3e.forEach(t),M.forEach(t),l_o=i(Dt),j_=n(Dt,"P",{});var l3e=s(j_);i_o=r(l3e,"The model is set in evaluation mode by default using "),tae=n(l3e,"CODE",{});var xUr=s(tae);d_o=r(xUr,"model.eval()"),xUr.forEach(t),c_o=r(l3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=n(l3e,"CODE",{});var kUr=s(aae);f_o=r(kUr,"model.train()"),kUr.forEach(t),l3e.forEach(t),m_o=i(Dt),nae=n(Dt,"P",{});var SUr=s(nae);g_o=r(SUr,"Examples:"),SUr.forEach(t),h_o=i(Dt),m(M3.$$.fragment,Dt),Dt.forEach(t),Us.forEach(t),ABe=i(c),rd=n(c,"H2",{class:!0});var $$e=s(rd);D_=n($$e,"A",{id:!0,class:!0,href:!0});var RUr=s(D_);sae=n(RUr,"SPAN",{});var BUr=s(sae);m(E3.$$.fragment,BUr),BUr.forEach(t),RUr.forEach(t),p_o=i($$e),lae=n($$e,"SPAN",{});var PUr=s(lae);__o=r(PUr,"AutoModelForPreTraining"),PUr.forEach(t),$$e.forEach(t),yBe=i(c),Yo=n(c,"DIV",{class:!0});var Ys=s(Yo);m(C3.$$.fragment,Ys),u_o=i(Ys),td=n(Ys,"P",{});var OU=s(td);b_o=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),u$=n(OU,"A",{href:!0});var $Ur=s(u$);F_o=r($Ur,"from_pretrained()"),$Ur.forEach(t),v_o=r(OU," class method or the "),b$=n(OU,"A",{href:!0});var IUr=s(b$);T_o=r(IUr,"from_config()"),IUr.forEach(t),M_o=r(OU,` class
method.`),OU.forEach(t),E_o=i(Ys),w3=n(Ys,"P",{});var I$e=s(w3);C_o=r(I$e,"This class cannot be instantiated directly using "),iae=n(I$e,"CODE",{});var qUr=s(iae);w_o=r(qUr,"__init__()"),qUr.forEach(t),A_o=r(I$e," (throws an error)."),I$e.forEach(t),y_o=i(Ys),zr=n(Ys,"DIV",{class:!0});var Ks=s(zr);m(A3.$$.fragment,Ks),L_o=i(Ks),dae=n(Ks,"P",{});var NUr=s(dae);x_o=r(NUr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),NUr.forEach(t),k_o=i(Ks),ad=n(Ks,"P",{});var VU=s(ad);S_o=r(VU,`Note:
Loading a model from its configuration file does `),cae=n(VU,"STRONG",{});var jUr=s(cae);R_o=r(jUr,"not"),jUr.forEach(t),B_o=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),F$=n(VU,"A",{href:!0});var DUr=s(F$);P_o=r(DUr,"from_pretrained()"),DUr.forEach(t),$_o=r(VU," to load the model weights."),VU.forEach(t),I_o=i(Ks),fae=n(Ks,"P",{});var GUr=s(fae);q_o=r(GUr,"Examples:"),GUr.forEach(t),N_o=i(Ks),m(y3.$$.fragment,Ks),Ks.forEach(t),j_o=i(Ys),je=n(Ys,"DIV",{class:!0});var Gt=s(je);m(L3.$$.fragment,Gt),D_o=i(Gt),mae=n(Gt,"P",{});var OUr=s(mae);G_o=r(OUr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OUr.forEach(t),O_o=i(Gt),za=n(Gt,"P",{});var DE=s(za);V_o=r(DE,"The model class to instantiate is selected based on the "),gae=n(DE,"CODE",{});var VUr=s(gae);X_o=r(VUr,"model_type"),VUr.forEach(t),z_o=r(DE,` property of the config object (either
passed as an argument or loaded from `),hae=n(DE,"CODE",{});var XUr=s(hae);Q_o=r(XUr,"pretrained_model_name_or_path"),XUr.forEach(t),W_o=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(DE,"CODE",{});var zUr=s(pae);H_o=r(zUr,"pretrained_model_name_or_path"),zUr.forEach(t),U_o=r(DE,":"),DE.forEach(t),J_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);G_=n(B,"LI",{});var i3e=s(G_);_ae=n(i3e,"STRONG",{});var QUr=s(_ae);Y_o=r(QUr,"albert"),QUr.forEach(t),K_o=r(i3e," \u2014 "),v$=n(i3e,"A",{href:!0});var WUr=s(v$);Z_o=r(WUr,"AlbertForPreTraining"),WUr.forEach(t),euo=r(i3e," (ALBERT model)"),i3e.forEach(t),ouo=i(B),O_=n(B,"LI",{});var d3e=s(O_);uae=n(d3e,"STRONG",{});var HUr=s(uae);ruo=r(HUr,"bart"),HUr.forEach(t),tuo=r(d3e," \u2014 "),T$=n(d3e,"A",{href:!0});var UUr=s(T$);auo=r(UUr,"BartForConditionalGeneration"),UUr.forEach(t),nuo=r(d3e," (BART model)"),d3e.forEach(t),suo=i(B),V_=n(B,"LI",{});var c3e=s(V_);bae=n(c3e,"STRONG",{});var JUr=s(bae);luo=r(JUr,"bert"),JUr.forEach(t),iuo=r(c3e," \u2014 "),M$=n(c3e,"A",{href:!0});var YUr=s(M$);duo=r(YUr,"BertForPreTraining"),YUr.forEach(t),cuo=r(c3e," (BERT model)"),c3e.forEach(t),fuo=i(B),X_=n(B,"LI",{});var f3e=s(X_);Fae=n(f3e,"STRONG",{});var KUr=s(Fae);muo=r(KUr,"big_bird"),KUr.forEach(t),guo=r(f3e," \u2014 "),E$=n(f3e,"A",{href:!0});var ZUr=s(E$);huo=r(ZUr,"BigBirdForPreTraining"),ZUr.forEach(t),puo=r(f3e," (BigBird model)"),f3e.forEach(t),_uo=i(B),z_=n(B,"LI",{});var m3e=s(z_);vae=n(m3e,"STRONG",{});var eJr=s(vae);uuo=r(eJr,"camembert"),eJr.forEach(t),buo=r(m3e," \u2014 "),C$=n(m3e,"A",{href:!0});var oJr=s(C$);Fuo=r(oJr,"CamembertForMaskedLM"),oJr.forEach(t),vuo=r(m3e," (CamemBERT model)"),m3e.forEach(t),Tuo=i(B),Q_=n(B,"LI",{});var g3e=s(Q_);Tae=n(g3e,"STRONG",{});var rJr=s(Tae);Muo=r(rJr,"ctrl"),rJr.forEach(t),Euo=r(g3e," \u2014 "),w$=n(g3e,"A",{href:!0});var tJr=s(w$);Cuo=r(tJr,"CTRLLMHeadModel"),tJr.forEach(t),wuo=r(g3e," (CTRL model)"),g3e.forEach(t),Auo=i(B),W_=n(B,"LI",{});var h3e=s(W_);Mae=n(h3e,"STRONG",{});var aJr=s(Mae);yuo=r(aJr,"data2vec-text"),aJr.forEach(t),Luo=r(h3e," \u2014 "),A$=n(h3e,"A",{href:!0});var nJr=s(A$);xuo=r(nJr,"Data2VecTextForMaskedLM"),nJr.forEach(t),kuo=r(h3e," (Data2VecText model)"),h3e.forEach(t),Suo=i(B),H_=n(B,"LI",{});var p3e=s(H_);Eae=n(p3e,"STRONG",{});var sJr=s(Eae);Ruo=r(sJr,"deberta"),sJr.forEach(t),Buo=r(p3e," \u2014 "),y$=n(p3e,"A",{href:!0});var lJr=s(y$);Puo=r(lJr,"DebertaForMaskedLM"),lJr.forEach(t),$uo=r(p3e," (DeBERTa model)"),p3e.forEach(t),Iuo=i(B),U_=n(B,"LI",{});var _3e=s(U_);Cae=n(_3e,"STRONG",{});var iJr=s(Cae);quo=r(iJr,"deberta-v2"),iJr.forEach(t),Nuo=r(_3e," \u2014 "),L$=n(_3e,"A",{href:!0});var dJr=s(L$);juo=r(dJr,"DebertaV2ForMaskedLM"),dJr.forEach(t),Duo=r(_3e," (DeBERTa-v2 model)"),_3e.forEach(t),Guo=i(B),J_=n(B,"LI",{});var u3e=s(J_);wae=n(u3e,"STRONG",{});var cJr=s(wae);Ouo=r(cJr,"distilbert"),cJr.forEach(t),Vuo=r(u3e," \u2014 "),x$=n(u3e,"A",{href:!0});var fJr=s(x$);Xuo=r(fJr,"DistilBertForMaskedLM"),fJr.forEach(t),zuo=r(u3e," (DistilBERT model)"),u3e.forEach(t),Quo=i(B),Y_=n(B,"LI",{});var b3e=s(Y_);Aae=n(b3e,"STRONG",{});var mJr=s(Aae);Wuo=r(mJr,"electra"),mJr.forEach(t),Huo=r(b3e," \u2014 "),k$=n(b3e,"A",{href:!0});var gJr=s(k$);Uuo=r(gJr,"ElectraForPreTraining"),gJr.forEach(t),Juo=r(b3e," (ELECTRA model)"),b3e.forEach(t),Yuo=i(B),K_=n(B,"LI",{});var F3e=s(K_);yae=n(F3e,"STRONG",{});var hJr=s(yae);Kuo=r(hJr,"flaubert"),hJr.forEach(t),Zuo=r(F3e," \u2014 "),S$=n(F3e,"A",{href:!0});var pJr=s(S$);e2o=r(pJr,"FlaubertWithLMHeadModel"),pJr.forEach(t),o2o=r(F3e," (FlauBERT model)"),F3e.forEach(t),r2o=i(B),Z_=n(B,"LI",{});var v3e=s(Z_);Lae=n(v3e,"STRONG",{});var _Jr=s(Lae);t2o=r(_Jr,"fnet"),_Jr.forEach(t),a2o=r(v3e," \u2014 "),R$=n(v3e,"A",{href:!0});var uJr=s(R$);n2o=r(uJr,"FNetForPreTraining"),uJr.forEach(t),s2o=r(v3e," (FNet model)"),v3e.forEach(t),l2o=i(B),eu=n(B,"LI",{});var T3e=s(eu);xae=n(T3e,"STRONG",{});var bJr=s(xae);i2o=r(bJr,"fsmt"),bJr.forEach(t),d2o=r(T3e," \u2014 "),B$=n(T3e,"A",{href:!0});var FJr=s(B$);c2o=r(FJr,"FSMTForConditionalGeneration"),FJr.forEach(t),f2o=r(T3e," (FairSeq Machine-Translation model)"),T3e.forEach(t),m2o=i(B),ou=n(B,"LI",{});var M3e=s(ou);kae=n(M3e,"STRONG",{});var vJr=s(kae);g2o=r(vJr,"funnel"),vJr.forEach(t),h2o=r(M3e," \u2014 "),P$=n(M3e,"A",{href:!0});var TJr=s(P$);p2o=r(TJr,"FunnelForPreTraining"),TJr.forEach(t),_2o=r(M3e," (Funnel Transformer model)"),M3e.forEach(t),u2o=i(B),ru=n(B,"LI",{});var E3e=s(ru);Sae=n(E3e,"STRONG",{});var MJr=s(Sae);b2o=r(MJr,"gpt2"),MJr.forEach(t),F2o=r(E3e," \u2014 "),$$=n(E3e,"A",{href:!0});var EJr=s($$);v2o=r(EJr,"GPT2LMHeadModel"),EJr.forEach(t),T2o=r(E3e," (OpenAI GPT-2 model)"),E3e.forEach(t),M2o=i(B),tu=n(B,"LI",{});var C3e=s(tu);Rae=n(C3e,"STRONG",{});var CJr=s(Rae);E2o=r(CJr,"ibert"),CJr.forEach(t),C2o=r(C3e," \u2014 "),I$=n(C3e,"A",{href:!0});var wJr=s(I$);w2o=r(wJr,"IBertForMaskedLM"),wJr.forEach(t),A2o=r(C3e," (I-BERT model)"),C3e.forEach(t),y2o=i(B),au=n(B,"LI",{});var w3e=s(au);Bae=n(w3e,"STRONG",{});var AJr=s(Bae);L2o=r(AJr,"layoutlm"),AJr.forEach(t),x2o=r(w3e," \u2014 "),q$=n(w3e,"A",{href:!0});var yJr=s(q$);k2o=r(yJr,"LayoutLMForMaskedLM"),yJr.forEach(t),S2o=r(w3e," (LayoutLM model)"),w3e.forEach(t),R2o=i(B),nu=n(B,"LI",{});var A3e=s(nu);Pae=n(A3e,"STRONG",{});var LJr=s(Pae);B2o=r(LJr,"longformer"),LJr.forEach(t),P2o=r(A3e," \u2014 "),N$=n(A3e,"A",{href:!0});var xJr=s(N$);$2o=r(xJr,"LongformerForMaskedLM"),xJr.forEach(t),I2o=r(A3e," (Longformer model)"),A3e.forEach(t),q2o=i(B),su=n(B,"LI",{});var y3e=s(su);$ae=n(y3e,"STRONG",{});var kJr=s($ae);N2o=r(kJr,"longt5"),kJr.forEach(t),j2o=r(y3e," \u2014 "),j$=n(y3e,"A",{href:!0});var SJr=s(j$);D2o=r(SJr,"LongT5ForConditionalGeneration"),SJr.forEach(t),G2o=r(y3e," (LongT5 model)"),y3e.forEach(t),O2o=i(B),lu=n(B,"LI",{});var L3e=s(lu);Iae=n(L3e,"STRONG",{});var RJr=s(Iae);V2o=r(RJr,"lxmert"),RJr.forEach(t),X2o=r(L3e," \u2014 "),D$=n(L3e,"A",{href:!0});var BJr=s(D$);z2o=r(BJr,"LxmertForPreTraining"),BJr.forEach(t),Q2o=r(L3e," (LXMERT model)"),L3e.forEach(t),W2o=i(B),iu=n(B,"LI",{});var x3e=s(iu);qae=n(x3e,"STRONG",{});var PJr=s(qae);H2o=r(PJr,"megatron-bert"),PJr.forEach(t),U2o=r(x3e," \u2014 "),G$=n(x3e,"A",{href:!0});var $Jr=s(G$);J2o=r($Jr,"MegatronBertForPreTraining"),$Jr.forEach(t),Y2o=r(x3e," (MegatronBert model)"),x3e.forEach(t),K2o=i(B),du=n(B,"LI",{});var k3e=s(du);Nae=n(k3e,"STRONG",{});var IJr=s(Nae);Z2o=r(IJr,"mobilebert"),IJr.forEach(t),e1o=r(k3e," \u2014 "),O$=n(k3e,"A",{href:!0});var qJr=s(O$);o1o=r(qJr,"MobileBertForPreTraining"),qJr.forEach(t),r1o=r(k3e," (MobileBERT model)"),k3e.forEach(t),t1o=i(B),cu=n(B,"LI",{});var S3e=s(cu);jae=n(S3e,"STRONG",{});var NJr=s(jae);a1o=r(NJr,"mpnet"),NJr.forEach(t),n1o=r(S3e," \u2014 "),V$=n(S3e,"A",{href:!0});var jJr=s(V$);s1o=r(jJr,"MPNetForMaskedLM"),jJr.forEach(t),l1o=r(S3e," (MPNet model)"),S3e.forEach(t),i1o=i(B),fu=n(B,"LI",{});var R3e=s(fu);Dae=n(R3e,"STRONG",{});var DJr=s(Dae);d1o=r(DJr,"openai-gpt"),DJr.forEach(t),c1o=r(R3e," \u2014 "),X$=n(R3e,"A",{href:!0});var GJr=s(X$);f1o=r(GJr,"OpenAIGPTLMHeadModel"),GJr.forEach(t),m1o=r(R3e," (OpenAI GPT model)"),R3e.forEach(t),g1o=i(B),mu=n(B,"LI",{});var B3e=s(mu);Gae=n(B3e,"STRONG",{});var OJr=s(Gae);h1o=r(OJr,"retribert"),OJr.forEach(t),p1o=r(B3e," \u2014 "),z$=n(B3e,"A",{href:!0});var VJr=s(z$);_1o=r(VJr,"RetriBertModel"),VJr.forEach(t),u1o=r(B3e," (RetriBERT model)"),B3e.forEach(t),b1o=i(B),gu=n(B,"LI",{});var P3e=s(gu);Oae=n(P3e,"STRONG",{});var XJr=s(Oae);F1o=r(XJr,"roberta"),XJr.forEach(t),v1o=r(P3e," \u2014 "),Q$=n(P3e,"A",{href:!0});var zJr=s(Q$);T1o=r(zJr,"RobertaForMaskedLM"),zJr.forEach(t),M1o=r(P3e," (RoBERTa model)"),P3e.forEach(t),E1o=i(B),hu=n(B,"LI",{});var $3e=s(hu);Vae=n($3e,"STRONG",{});var QJr=s(Vae);C1o=r(QJr,"squeezebert"),QJr.forEach(t),w1o=r($3e," \u2014 "),W$=n($3e,"A",{href:!0});var WJr=s(W$);A1o=r(WJr,"SqueezeBertForMaskedLM"),WJr.forEach(t),y1o=r($3e," (SqueezeBERT model)"),$3e.forEach(t),L1o=i(B),pu=n(B,"LI",{});var I3e=s(pu);Xae=n(I3e,"STRONG",{});var HJr=s(Xae);x1o=r(HJr,"t5"),HJr.forEach(t),k1o=r(I3e," \u2014 "),H$=n(I3e,"A",{href:!0});var UJr=s(H$);S1o=r(UJr,"T5ForConditionalGeneration"),UJr.forEach(t),R1o=r(I3e," (T5 model)"),I3e.forEach(t),B1o=i(B),_u=n(B,"LI",{});var q3e=s(_u);zae=n(q3e,"STRONG",{});var JJr=s(zae);P1o=r(JJr,"tapas"),JJr.forEach(t),$1o=r(q3e," \u2014 "),U$=n(q3e,"A",{href:!0});var YJr=s(U$);I1o=r(YJr,"TapasForMaskedLM"),YJr.forEach(t),q1o=r(q3e," (TAPAS model)"),q3e.forEach(t),N1o=i(B),uu=n(B,"LI",{});var N3e=s(uu);Qae=n(N3e,"STRONG",{});var KJr=s(Qae);j1o=r(KJr,"transfo-xl"),KJr.forEach(t),D1o=r(N3e," \u2014 "),J$=n(N3e,"A",{href:!0});var ZJr=s(J$);G1o=r(ZJr,"TransfoXLLMHeadModel"),ZJr.forEach(t),O1o=r(N3e," (Transformer-XL model)"),N3e.forEach(t),V1o=i(B),bu=n(B,"LI",{});var j3e=s(bu);Wae=n(j3e,"STRONG",{});var eYr=s(Wae);X1o=r(eYr,"unispeech"),eYr.forEach(t),z1o=r(j3e," \u2014 "),Y$=n(j3e,"A",{href:!0});var oYr=s(Y$);Q1o=r(oYr,"UniSpeechForPreTraining"),oYr.forEach(t),W1o=r(j3e," (UniSpeech model)"),j3e.forEach(t),H1o=i(B),Fu=n(B,"LI",{});var D3e=s(Fu);Hae=n(D3e,"STRONG",{});var rYr=s(Hae);U1o=r(rYr,"unispeech-sat"),rYr.forEach(t),J1o=r(D3e," \u2014 "),K$=n(D3e,"A",{href:!0});var tYr=s(K$);Y1o=r(tYr,"UniSpeechSatForPreTraining"),tYr.forEach(t),K1o=r(D3e," (UniSpeechSat model)"),D3e.forEach(t),Z1o=i(B),vu=n(B,"LI",{});var G3e=s(vu);Uae=n(G3e,"STRONG",{});var aYr=s(Uae);ebo=r(aYr,"visual_bert"),aYr.forEach(t),obo=r(G3e," \u2014 "),Z$=n(G3e,"A",{href:!0});var nYr=s(Z$);rbo=r(nYr,"VisualBertForPreTraining"),nYr.forEach(t),tbo=r(G3e," (VisualBert model)"),G3e.forEach(t),abo=i(B),Tu=n(B,"LI",{});var O3e=s(Tu);Jae=n(O3e,"STRONG",{});var sYr=s(Jae);nbo=r(sYr,"vit_mae"),sYr.forEach(t),sbo=r(O3e," \u2014 "),eI=n(O3e,"A",{href:!0});var lYr=s(eI);lbo=r(lYr,"ViTMAEForPreTraining"),lYr.forEach(t),ibo=r(O3e," (ViTMAE model)"),O3e.forEach(t),dbo=i(B),Mu=n(B,"LI",{});var V3e=s(Mu);Yae=n(V3e,"STRONG",{});var iYr=s(Yae);cbo=r(iYr,"wav2vec2"),iYr.forEach(t),fbo=r(V3e," \u2014 "),oI=n(V3e,"A",{href:!0});var dYr=s(oI);mbo=r(dYr,"Wav2Vec2ForPreTraining"),dYr.forEach(t),gbo=r(V3e," (Wav2Vec2 model)"),V3e.forEach(t),hbo=i(B),Eu=n(B,"LI",{});var X3e=s(Eu);Kae=n(X3e,"STRONG",{});var cYr=s(Kae);pbo=r(cYr,"xlm"),cYr.forEach(t),_bo=r(X3e," \u2014 "),rI=n(X3e,"A",{href:!0});var fYr=s(rI);ubo=r(fYr,"XLMWithLMHeadModel"),fYr.forEach(t),bbo=r(X3e," (XLM model)"),X3e.forEach(t),Fbo=i(B),Cu=n(B,"LI",{});var z3e=s(Cu);Zae=n(z3e,"STRONG",{});var mYr=s(Zae);vbo=r(mYr,"xlm-roberta"),mYr.forEach(t),Tbo=r(z3e," \u2014 "),tI=n(z3e,"A",{href:!0});var gYr=s(tI);Mbo=r(gYr,"XLMRobertaForMaskedLM"),gYr.forEach(t),Ebo=r(z3e," (XLM-RoBERTa model)"),z3e.forEach(t),Cbo=i(B),wu=n(B,"LI",{});var Q3e=s(wu);ene=n(Q3e,"STRONG",{});var hYr=s(ene);wbo=r(hYr,"xlm-roberta-xl"),hYr.forEach(t),Abo=r(Q3e," \u2014 "),aI=n(Q3e,"A",{href:!0});var pYr=s(aI);ybo=r(pYr,"XLMRobertaXLForMaskedLM"),pYr.forEach(t),Lbo=r(Q3e," (XLM-RoBERTa-XL model)"),Q3e.forEach(t),xbo=i(B),Au=n(B,"LI",{});var W3e=s(Au);one=n(W3e,"STRONG",{});var _Yr=s(one);kbo=r(_Yr,"xlnet"),_Yr.forEach(t),Sbo=r(W3e," \u2014 "),nI=n(W3e,"A",{href:!0});var uYr=s(nI);Rbo=r(uYr,"XLNetLMHeadModel"),uYr.forEach(t),Bbo=r(W3e," (XLNet model)"),W3e.forEach(t),B.forEach(t),Pbo=i(Gt),yu=n(Gt,"P",{});var H3e=s(yu);$bo=r(H3e,"The model is set in evaluation mode by default using "),rne=n(H3e,"CODE",{});var bYr=s(rne);Ibo=r(bYr,"model.eval()"),bYr.forEach(t),qbo=r(H3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tne=n(H3e,"CODE",{});var FYr=s(tne);Nbo=r(FYr,"model.train()"),FYr.forEach(t),H3e.forEach(t),jbo=i(Gt),ane=n(Gt,"P",{});var vYr=s(ane);Dbo=r(vYr,"Examples:"),vYr.forEach(t),Gbo=i(Gt),m(x3.$$.fragment,Gt),Gt.forEach(t),Ys.forEach(t),LBe=i(c),nd=n(c,"H2",{class:!0});var q$e=s(nd);Lu=n(q$e,"A",{id:!0,class:!0,href:!0});var TYr=s(Lu);nne=n(TYr,"SPAN",{});var MYr=s(nne);m(k3.$$.fragment,MYr),MYr.forEach(t),TYr.forEach(t),Obo=i(q$e),sne=n(q$e,"SPAN",{});var EYr=s(sne);Vbo=r(EYr,"AutoModelForCausalLM"),EYr.forEach(t),q$e.forEach(t),xBe=i(c),Ko=n(c,"DIV",{class:!0});var Zs=s(Ko);m(S3.$$.fragment,Zs),Xbo=i(Zs),sd=n(Zs,"P",{});var XU=s(sd);zbo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),sI=n(XU,"A",{href:!0});var CYr=s(sI);Qbo=r(CYr,"from_pretrained()"),CYr.forEach(t),Wbo=r(XU," class method or the "),lI=n(XU,"A",{href:!0});var wYr=s(lI);Hbo=r(wYr,"from_config()"),wYr.forEach(t),Ubo=r(XU,` class
method.`),XU.forEach(t),Jbo=i(Zs),R3=n(Zs,"P",{});var N$e=s(R3);Ybo=r(N$e,"This class cannot be instantiated directly using "),lne=n(N$e,"CODE",{});var AYr=s(lne);Kbo=r(AYr,"__init__()"),AYr.forEach(t),Zbo=r(N$e," (throws an error)."),N$e.forEach(t),e6o=i(Zs),Qr=n(Zs,"DIV",{class:!0});var el=s(Qr);m(B3.$$.fragment,el),o6o=i(el),ine=n(el,"P",{});var yYr=s(ine);r6o=r(yYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yYr.forEach(t),t6o=i(el),ld=n(el,"P",{});var zU=s(ld);a6o=r(zU,`Note:
Loading a model from its configuration file does `),dne=n(zU,"STRONG",{});var LYr=s(dne);n6o=r(LYr,"not"),LYr.forEach(t),s6o=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iI=n(zU,"A",{href:!0});var xYr=s(iI);l6o=r(xYr,"from_pretrained()"),xYr.forEach(t),i6o=r(zU," to load the model weights."),zU.forEach(t),d6o=i(el),cne=n(el,"P",{});var kYr=s(cne);c6o=r(kYr,"Examples:"),kYr.forEach(t),f6o=i(el),m(P3.$$.fragment,el),el.forEach(t),m6o=i(Zs),De=n(Zs,"DIV",{class:!0});var Ot=s(De);m($3.$$.fragment,Ot),g6o=i(Ot),fne=n(Ot,"P",{});var SYr=s(fne);h6o=r(SYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SYr.forEach(t),p6o=i(Ot),Qa=n(Ot,"P",{});var GE=s(Qa);_6o=r(GE,"The model class to instantiate is selected based on the "),mne=n(GE,"CODE",{});var RYr=s(mne);u6o=r(RYr,"model_type"),RYr.forEach(t),b6o=r(GE,` property of the config object (either
passed as an argument or loaded from `),gne=n(GE,"CODE",{});var BYr=s(gne);F6o=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),v6o=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hne=n(GE,"CODE",{});var PYr=s(hne);T6o=r(PYr,"pretrained_model_name_or_path"),PYr.forEach(t),M6o=r(GE,":"),GE.forEach(t),E6o=i(Ot),$=n(Ot,"UL",{});var q=s($);xu=n(q,"LI",{});var U3e=s(xu);pne=n(U3e,"STRONG",{});var $Yr=s(pne);C6o=r($Yr,"bart"),$Yr.forEach(t),w6o=r(U3e," \u2014 "),dI=n(U3e,"A",{href:!0});var IYr=s(dI);A6o=r(IYr,"BartForCausalLM"),IYr.forEach(t),y6o=r(U3e," (BART model)"),U3e.forEach(t),L6o=i(q),ku=n(q,"LI",{});var J3e=s(ku);_ne=n(J3e,"STRONG",{});var qYr=s(_ne);x6o=r(qYr,"bert"),qYr.forEach(t),k6o=r(J3e," \u2014 "),cI=n(J3e,"A",{href:!0});var NYr=s(cI);S6o=r(NYr,"BertLMHeadModel"),NYr.forEach(t),R6o=r(J3e," (BERT model)"),J3e.forEach(t),B6o=i(q),Su=n(q,"LI",{});var Y3e=s(Su);une=n(Y3e,"STRONG",{});var jYr=s(une);P6o=r(jYr,"bert-generation"),jYr.forEach(t),$6o=r(Y3e," \u2014 "),fI=n(Y3e,"A",{href:!0});var DYr=s(fI);I6o=r(DYr,"BertGenerationDecoder"),DYr.forEach(t),q6o=r(Y3e," (Bert Generation model)"),Y3e.forEach(t),N6o=i(q),Ru=n(q,"LI",{});var K3e=s(Ru);bne=n(K3e,"STRONG",{});var GYr=s(bne);j6o=r(GYr,"big_bird"),GYr.forEach(t),D6o=r(K3e," \u2014 "),mI=n(K3e,"A",{href:!0});var OYr=s(mI);G6o=r(OYr,"BigBirdForCausalLM"),OYr.forEach(t),O6o=r(K3e," (BigBird model)"),K3e.forEach(t),V6o=i(q),Bu=n(q,"LI",{});var Z3e=s(Bu);Fne=n(Z3e,"STRONG",{});var VYr=s(Fne);X6o=r(VYr,"bigbird_pegasus"),VYr.forEach(t),z6o=r(Z3e," \u2014 "),gI=n(Z3e,"A",{href:!0});var XYr=s(gI);Q6o=r(XYr,"BigBirdPegasusForCausalLM"),XYr.forEach(t),W6o=r(Z3e," (BigBirdPegasus model)"),Z3e.forEach(t),H6o=i(q),Pu=n(q,"LI",{});var eCe=s(Pu);vne=n(eCe,"STRONG",{});var zYr=s(vne);U6o=r(zYr,"blenderbot"),zYr.forEach(t),J6o=r(eCe," \u2014 "),hI=n(eCe,"A",{href:!0});var QYr=s(hI);Y6o=r(QYr,"BlenderbotForCausalLM"),QYr.forEach(t),K6o=r(eCe," (Blenderbot model)"),eCe.forEach(t),Z6o=i(q),$u=n(q,"LI",{});var oCe=s($u);Tne=n(oCe,"STRONG",{});var WYr=s(Tne);eFo=r(WYr,"blenderbot-small"),WYr.forEach(t),oFo=r(oCe," \u2014 "),pI=n(oCe,"A",{href:!0});var HYr=s(pI);rFo=r(HYr,"BlenderbotSmallForCausalLM"),HYr.forEach(t),tFo=r(oCe," (BlenderbotSmall model)"),oCe.forEach(t),aFo=i(q),Iu=n(q,"LI",{});var rCe=s(Iu);Mne=n(rCe,"STRONG",{});var UYr=s(Mne);nFo=r(UYr,"camembert"),UYr.forEach(t),sFo=r(rCe," \u2014 "),_I=n(rCe,"A",{href:!0});var JYr=s(_I);lFo=r(JYr,"CamembertForCausalLM"),JYr.forEach(t),iFo=r(rCe," (CamemBERT model)"),rCe.forEach(t),dFo=i(q),qu=n(q,"LI",{});var tCe=s(qu);Ene=n(tCe,"STRONG",{});var YYr=s(Ene);cFo=r(YYr,"ctrl"),YYr.forEach(t),fFo=r(tCe," \u2014 "),uI=n(tCe,"A",{href:!0});var KYr=s(uI);mFo=r(KYr,"CTRLLMHeadModel"),KYr.forEach(t),gFo=r(tCe," (CTRL model)"),tCe.forEach(t),hFo=i(q),Nu=n(q,"LI",{});var aCe=s(Nu);Cne=n(aCe,"STRONG",{});var ZYr=s(Cne);pFo=r(ZYr,"data2vec-text"),ZYr.forEach(t),_Fo=r(aCe," \u2014 "),bI=n(aCe,"A",{href:!0});var eKr=s(bI);uFo=r(eKr,"Data2VecTextForCausalLM"),eKr.forEach(t),bFo=r(aCe," (Data2VecText model)"),aCe.forEach(t),FFo=i(q),ju=n(q,"LI",{});var nCe=s(ju);wne=n(nCe,"STRONG",{});var oKr=s(wne);vFo=r(oKr,"electra"),oKr.forEach(t),TFo=r(nCe," \u2014 "),FI=n(nCe,"A",{href:!0});var rKr=s(FI);MFo=r(rKr,"ElectraForCausalLM"),rKr.forEach(t),EFo=r(nCe," (ELECTRA model)"),nCe.forEach(t),CFo=i(q),Du=n(q,"LI",{});var sCe=s(Du);Ane=n(sCe,"STRONG",{});var tKr=s(Ane);wFo=r(tKr,"gpt2"),tKr.forEach(t),AFo=r(sCe," \u2014 "),vI=n(sCe,"A",{href:!0});var aKr=s(vI);yFo=r(aKr,"GPT2LMHeadModel"),aKr.forEach(t),LFo=r(sCe," (OpenAI GPT-2 model)"),sCe.forEach(t),xFo=i(q),Gu=n(q,"LI",{});var lCe=s(Gu);yne=n(lCe,"STRONG",{});var nKr=s(yne);kFo=r(nKr,"gpt_neo"),nKr.forEach(t),SFo=r(lCe," \u2014 "),TI=n(lCe,"A",{href:!0});var sKr=s(TI);RFo=r(sKr,"GPTNeoForCausalLM"),sKr.forEach(t),BFo=r(lCe," (GPT Neo model)"),lCe.forEach(t),PFo=i(q),Ou=n(q,"LI",{});var iCe=s(Ou);Lne=n(iCe,"STRONG",{});var lKr=s(Lne);$Fo=r(lKr,"gptj"),lKr.forEach(t),IFo=r(iCe," \u2014 "),MI=n(iCe,"A",{href:!0});var iKr=s(MI);qFo=r(iKr,"GPTJForCausalLM"),iKr.forEach(t),NFo=r(iCe," (GPT-J model)"),iCe.forEach(t),jFo=i(q),Vu=n(q,"LI",{});var dCe=s(Vu);xne=n(dCe,"STRONG",{});var dKr=s(xne);DFo=r(dKr,"marian"),dKr.forEach(t),GFo=r(dCe," \u2014 "),EI=n(dCe,"A",{href:!0});var cKr=s(EI);OFo=r(cKr,"MarianForCausalLM"),cKr.forEach(t),VFo=r(dCe," (Marian model)"),dCe.forEach(t),XFo=i(q),Xu=n(q,"LI",{});var cCe=s(Xu);kne=n(cCe,"STRONG",{});var fKr=s(kne);zFo=r(fKr,"mbart"),fKr.forEach(t),QFo=r(cCe," \u2014 "),CI=n(cCe,"A",{href:!0});var mKr=s(CI);WFo=r(mKr,"MBartForCausalLM"),mKr.forEach(t),HFo=r(cCe," (mBART model)"),cCe.forEach(t),UFo=i(q),zu=n(q,"LI",{});var fCe=s(zu);Sne=n(fCe,"STRONG",{});var gKr=s(Sne);JFo=r(gKr,"megatron-bert"),gKr.forEach(t),YFo=r(fCe," \u2014 "),wI=n(fCe,"A",{href:!0});var hKr=s(wI);KFo=r(hKr,"MegatronBertForCausalLM"),hKr.forEach(t),ZFo=r(fCe," (MegatronBert model)"),fCe.forEach(t),evo=i(q),Qu=n(q,"LI",{});var mCe=s(Qu);Rne=n(mCe,"STRONG",{});var pKr=s(Rne);ovo=r(pKr,"openai-gpt"),pKr.forEach(t),rvo=r(mCe," \u2014 "),AI=n(mCe,"A",{href:!0});var _Kr=s(AI);tvo=r(_Kr,"OpenAIGPTLMHeadModel"),_Kr.forEach(t),avo=r(mCe," (OpenAI GPT model)"),mCe.forEach(t),nvo=i(q),Wu=n(q,"LI",{});var gCe=s(Wu);Bne=n(gCe,"STRONG",{});var uKr=s(Bne);svo=r(uKr,"pegasus"),uKr.forEach(t),lvo=r(gCe," \u2014 "),yI=n(gCe,"A",{href:!0});var bKr=s(yI);ivo=r(bKr,"PegasusForCausalLM"),bKr.forEach(t),dvo=r(gCe," (Pegasus model)"),gCe.forEach(t),cvo=i(q),Hu=n(q,"LI",{});var hCe=s(Hu);Pne=n(hCe,"STRONG",{});var FKr=s(Pne);fvo=r(FKr,"plbart"),FKr.forEach(t),mvo=r(hCe," \u2014 "),LI=n(hCe,"A",{href:!0});var vKr=s(LI);gvo=r(vKr,"PLBartForCausalLM"),vKr.forEach(t),hvo=r(hCe," (PLBart model)"),hCe.forEach(t),pvo=i(q),Uu=n(q,"LI",{});var pCe=s(Uu);$ne=n(pCe,"STRONG",{});var TKr=s($ne);_vo=r(TKr,"prophetnet"),TKr.forEach(t),uvo=r(pCe," \u2014 "),xI=n(pCe,"A",{href:!0});var MKr=s(xI);bvo=r(MKr,"ProphetNetForCausalLM"),MKr.forEach(t),Fvo=r(pCe," (ProphetNet model)"),pCe.forEach(t),vvo=i(q),Ju=n(q,"LI",{});var _Ce=s(Ju);Ine=n(_Ce,"STRONG",{});var EKr=s(Ine);Tvo=r(EKr,"qdqbert"),EKr.forEach(t),Mvo=r(_Ce," \u2014 "),kI=n(_Ce,"A",{href:!0});var CKr=s(kI);Evo=r(CKr,"QDQBertLMHeadModel"),CKr.forEach(t),Cvo=r(_Ce," (QDQBert model)"),_Ce.forEach(t),wvo=i(q),Yu=n(q,"LI",{});var uCe=s(Yu);qne=n(uCe,"STRONG",{});var wKr=s(qne);Avo=r(wKr,"reformer"),wKr.forEach(t),yvo=r(uCe," \u2014 "),SI=n(uCe,"A",{href:!0});var AKr=s(SI);Lvo=r(AKr,"ReformerModelWithLMHead"),AKr.forEach(t),xvo=r(uCe," (Reformer model)"),uCe.forEach(t),kvo=i(q),Ku=n(q,"LI",{});var bCe=s(Ku);Nne=n(bCe,"STRONG",{});var yKr=s(Nne);Svo=r(yKr,"rembert"),yKr.forEach(t),Rvo=r(bCe," \u2014 "),RI=n(bCe,"A",{href:!0});var LKr=s(RI);Bvo=r(LKr,"RemBertForCausalLM"),LKr.forEach(t),Pvo=r(bCe," (RemBERT model)"),bCe.forEach(t),$vo=i(q),Zu=n(q,"LI",{});var FCe=s(Zu);jne=n(FCe,"STRONG",{});var xKr=s(jne);Ivo=r(xKr,"roberta"),xKr.forEach(t),qvo=r(FCe," \u2014 "),BI=n(FCe,"A",{href:!0});var kKr=s(BI);Nvo=r(kKr,"RobertaForCausalLM"),kKr.forEach(t),jvo=r(FCe," (RoBERTa model)"),FCe.forEach(t),Dvo=i(q),e2=n(q,"LI",{});var vCe=s(e2);Dne=n(vCe,"STRONG",{});var SKr=s(Dne);Gvo=r(SKr,"roformer"),SKr.forEach(t),Ovo=r(vCe," \u2014 "),PI=n(vCe,"A",{href:!0});var RKr=s(PI);Vvo=r(RKr,"RoFormerForCausalLM"),RKr.forEach(t),Xvo=r(vCe," (RoFormer model)"),vCe.forEach(t),zvo=i(q),o2=n(q,"LI",{});var TCe=s(o2);Gne=n(TCe,"STRONG",{});var BKr=s(Gne);Qvo=r(BKr,"speech_to_text_2"),BKr.forEach(t),Wvo=r(TCe," \u2014 "),$I=n(TCe,"A",{href:!0});var PKr=s($I);Hvo=r(PKr,"Speech2Text2ForCausalLM"),PKr.forEach(t),Uvo=r(TCe," (Speech2Text2 model)"),TCe.forEach(t),Jvo=i(q),r2=n(q,"LI",{});var MCe=s(r2);One=n(MCe,"STRONG",{});var $Kr=s(One);Yvo=r($Kr,"transfo-xl"),$Kr.forEach(t),Kvo=r(MCe," \u2014 "),II=n(MCe,"A",{href:!0});var IKr=s(II);Zvo=r(IKr,"TransfoXLLMHeadModel"),IKr.forEach(t),eTo=r(MCe," (Transformer-XL model)"),MCe.forEach(t),oTo=i(q),t2=n(q,"LI",{});var ECe=s(t2);Vne=n(ECe,"STRONG",{});var qKr=s(Vne);rTo=r(qKr,"trocr"),qKr.forEach(t),tTo=r(ECe," \u2014 "),qI=n(ECe,"A",{href:!0});var NKr=s(qI);aTo=r(NKr,"TrOCRForCausalLM"),NKr.forEach(t),nTo=r(ECe," (TrOCR model)"),ECe.forEach(t),sTo=i(q),a2=n(q,"LI",{});var CCe=s(a2);Xne=n(CCe,"STRONG",{});var jKr=s(Xne);lTo=r(jKr,"xglm"),jKr.forEach(t),iTo=r(CCe," \u2014 "),NI=n(CCe,"A",{href:!0});var DKr=s(NI);dTo=r(DKr,"XGLMForCausalLM"),DKr.forEach(t),cTo=r(CCe," (XGLM model)"),CCe.forEach(t),fTo=i(q),n2=n(q,"LI",{});var wCe=s(n2);zne=n(wCe,"STRONG",{});var GKr=s(zne);mTo=r(GKr,"xlm"),GKr.forEach(t),gTo=r(wCe," \u2014 "),jI=n(wCe,"A",{href:!0});var OKr=s(jI);hTo=r(OKr,"XLMWithLMHeadModel"),OKr.forEach(t),pTo=r(wCe," (XLM model)"),wCe.forEach(t),_To=i(q),s2=n(q,"LI",{});var ACe=s(s2);Qne=n(ACe,"STRONG",{});var VKr=s(Qne);uTo=r(VKr,"xlm-prophetnet"),VKr.forEach(t),bTo=r(ACe," \u2014 "),DI=n(ACe,"A",{href:!0});var XKr=s(DI);FTo=r(XKr,"XLMProphetNetForCausalLM"),XKr.forEach(t),vTo=r(ACe," (XLMProphetNet model)"),ACe.forEach(t),TTo=i(q),l2=n(q,"LI",{});var yCe=s(l2);Wne=n(yCe,"STRONG",{});var zKr=s(Wne);MTo=r(zKr,"xlm-roberta"),zKr.forEach(t),ETo=r(yCe," \u2014 "),GI=n(yCe,"A",{href:!0});var QKr=s(GI);CTo=r(QKr,"XLMRobertaForCausalLM"),QKr.forEach(t),wTo=r(yCe," (XLM-RoBERTa model)"),yCe.forEach(t),ATo=i(q),i2=n(q,"LI",{});var LCe=s(i2);Hne=n(LCe,"STRONG",{});var WKr=s(Hne);yTo=r(WKr,"xlm-roberta-xl"),WKr.forEach(t),LTo=r(LCe," \u2014 "),OI=n(LCe,"A",{href:!0});var HKr=s(OI);xTo=r(HKr,"XLMRobertaXLForCausalLM"),HKr.forEach(t),kTo=r(LCe," (XLM-RoBERTa-XL model)"),LCe.forEach(t),STo=i(q),d2=n(q,"LI",{});var xCe=s(d2);Une=n(xCe,"STRONG",{});var UKr=s(Une);RTo=r(UKr,"xlnet"),UKr.forEach(t),BTo=r(xCe," \u2014 "),VI=n(xCe,"A",{href:!0});var JKr=s(VI);PTo=r(JKr,"XLNetLMHeadModel"),JKr.forEach(t),$To=r(xCe," (XLNet model)"),xCe.forEach(t),q.forEach(t),ITo=i(Ot),c2=n(Ot,"P",{});var kCe=s(c2);qTo=r(kCe,"The model is set in evaluation mode by default using "),Jne=n(kCe,"CODE",{});var YKr=s(Jne);NTo=r(YKr,"model.eval()"),YKr.forEach(t),jTo=r(kCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yne=n(kCe,"CODE",{});var KKr=s(Yne);DTo=r(KKr,"model.train()"),KKr.forEach(t),kCe.forEach(t),GTo=i(Ot),Kne=n(Ot,"P",{});var ZKr=s(Kne);OTo=r(ZKr,"Examples:"),ZKr.forEach(t),VTo=i(Ot),m(I3.$$.fragment,Ot),Ot.forEach(t),Zs.forEach(t),kBe=i(c),id=n(c,"H2",{class:!0});var j$e=s(id);f2=n(j$e,"A",{id:!0,class:!0,href:!0});var eZr=s(f2);Zne=n(eZr,"SPAN",{});var oZr=s(Zne);m(q3.$$.fragment,oZr),oZr.forEach(t),eZr.forEach(t),XTo=i(j$e),ese=n(j$e,"SPAN",{});var rZr=s(ese);zTo=r(rZr,"AutoModelForMaskedLM"),rZr.forEach(t),j$e.forEach(t),SBe=i(c),Zo=n(c,"DIV",{class:!0});var ol=s(Zo);m(N3.$$.fragment,ol),QTo=i(ol),dd=n(ol,"P",{});var QU=s(dd);WTo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),XI=n(QU,"A",{href:!0});var tZr=s(XI);HTo=r(tZr,"from_pretrained()"),tZr.forEach(t),UTo=r(QU," class method or the "),zI=n(QU,"A",{href:!0});var aZr=s(zI);JTo=r(aZr,"from_config()"),aZr.forEach(t),YTo=r(QU,` class
method.`),QU.forEach(t),KTo=i(ol),j3=n(ol,"P",{});var D$e=s(j3);ZTo=r(D$e,"This class cannot be instantiated directly using "),ose=n(D$e,"CODE",{});var nZr=s(ose);e7o=r(nZr,"__init__()"),nZr.forEach(t),o7o=r(D$e," (throws an error)."),D$e.forEach(t),r7o=i(ol),Wr=n(ol,"DIV",{class:!0});var rl=s(Wr);m(D3.$$.fragment,rl),t7o=i(rl),rse=n(rl,"P",{});var sZr=s(rse);a7o=r(sZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sZr.forEach(t),n7o=i(rl),cd=n(rl,"P",{});var WU=s(cd);s7o=r(WU,`Note:
Loading a model from its configuration file does `),tse=n(WU,"STRONG",{});var lZr=s(tse);l7o=r(lZr,"not"),lZr.forEach(t),i7o=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QI=n(WU,"A",{href:!0});var iZr=s(QI);d7o=r(iZr,"from_pretrained()"),iZr.forEach(t),c7o=r(WU," to load the model weights."),WU.forEach(t),f7o=i(rl),ase=n(rl,"P",{});var dZr=s(ase);m7o=r(dZr,"Examples:"),dZr.forEach(t),g7o=i(rl),m(G3.$$.fragment,rl),rl.forEach(t),h7o=i(ol),Ge=n(ol,"DIV",{class:!0});var Vt=s(Ge);m(O3.$$.fragment,Vt),p7o=i(Vt),nse=n(Vt,"P",{});var cZr=s(nse);_7o=r(cZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cZr.forEach(t),u7o=i(Vt),Wa=n(Vt,"P",{});var OE=s(Wa);b7o=r(OE,"The model class to instantiate is selected based on the "),sse=n(OE,"CODE",{});var fZr=s(sse);F7o=r(fZr,"model_type"),fZr.forEach(t),v7o=r(OE,` property of the config object (either
passed as an argument or loaded from `),lse=n(OE,"CODE",{});var mZr=s(lse);T7o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),M7o=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ise=n(OE,"CODE",{});var gZr=s(ise);E7o=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),C7o=r(OE,":"),OE.forEach(t),w7o=i(Vt),I=n(Vt,"UL",{});var N=s(I);m2=n(N,"LI",{});var SCe=s(m2);dse=n(SCe,"STRONG",{});var hZr=s(dse);A7o=r(hZr,"albert"),hZr.forEach(t),y7o=r(SCe," \u2014 "),WI=n(SCe,"A",{href:!0});var pZr=s(WI);L7o=r(pZr,"AlbertForMaskedLM"),pZr.forEach(t),x7o=r(SCe," (ALBERT model)"),SCe.forEach(t),k7o=i(N),g2=n(N,"LI",{});var RCe=s(g2);cse=n(RCe,"STRONG",{});var _Zr=s(cse);S7o=r(_Zr,"bart"),_Zr.forEach(t),R7o=r(RCe," \u2014 "),HI=n(RCe,"A",{href:!0});var uZr=s(HI);B7o=r(uZr,"BartForConditionalGeneration"),uZr.forEach(t),P7o=r(RCe," (BART model)"),RCe.forEach(t),$7o=i(N),h2=n(N,"LI",{});var BCe=s(h2);fse=n(BCe,"STRONG",{});var bZr=s(fse);I7o=r(bZr,"bert"),bZr.forEach(t),q7o=r(BCe," \u2014 "),UI=n(BCe,"A",{href:!0});var FZr=s(UI);N7o=r(FZr,"BertForMaskedLM"),FZr.forEach(t),j7o=r(BCe," (BERT model)"),BCe.forEach(t),D7o=i(N),p2=n(N,"LI",{});var PCe=s(p2);mse=n(PCe,"STRONG",{});var vZr=s(mse);G7o=r(vZr,"big_bird"),vZr.forEach(t),O7o=r(PCe," \u2014 "),JI=n(PCe,"A",{href:!0});var TZr=s(JI);V7o=r(TZr,"BigBirdForMaskedLM"),TZr.forEach(t),X7o=r(PCe," (BigBird model)"),PCe.forEach(t),z7o=i(N),_2=n(N,"LI",{});var $Ce=s(_2);gse=n($Ce,"STRONG",{});var MZr=s(gse);Q7o=r(MZr,"camembert"),MZr.forEach(t),W7o=r($Ce," \u2014 "),YI=n($Ce,"A",{href:!0});var EZr=s(YI);H7o=r(EZr,"CamembertForMaskedLM"),EZr.forEach(t),U7o=r($Ce," (CamemBERT model)"),$Ce.forEach(t),J7o=i(N),u2=n(N,"LI",{});var ICe=s(u2);hse=n(ICe,"STRONG",{});var CZr=s(hse);Y7o=r(CZr,"convbert"),CZr.forEach(t),K7o=r(ICe," \u2014 "),KI=n(ICe,"A",{href:!0});var wZr=s(KI);Z7o=r(wZr,"ConvBertForMaskedLM"),wZr.forEach(t),e9o=r(ICe," (ConvBERT model)"),ICe.forEach(t),o9o=i(N),b2=n(N,"LI",{});var qCe=s(b2);pse=n(qCe,"STRONG",{});var AZr=s(pse);r9o=r(AZr,"data2vec-text"),AZr.forEach(t),t9o=r(qCe," \u2014 "),ZI=n(qCe,"A",{href:!0});var yZr=s(ZI);a9o=r(yZr,"Data2VecTextForMaskedLM"),yZr.forEach(t),n9o=r(qCe," (Data2VecText model)"),qCe.forEach(t),s9o=i(N),F2=n(N,"LI",{});var NCe=s(F2);_se=n(NCe,"STRONG",{});var LZr=s(_se);l9o=r(LZr,"deberta"),LZr.forEach(t),i9o=r(NCe," \u2014 "),eq=n(NCe,"A",{href:!0});var xZr=s(eq);d9o=r(xZr,"DebertaForMaskedLM"),xZr.forEach(t),c9o=r(NCe," (DeBERTa model)"),NCe.forEach(t),f9o=i(N),v2=n(N,"LI",{});var jCe=s(v2);use=n(jCe,"STRONG",{});var kZr=s(use);m9o=r(kZr,"deberta-v2"),kZr.forEach(t),g9o=r(jCe," \u2014 "),oq=n(jCe,"A",{href:!0});var SZr=s(oq);h9o=r(SZr,"DebertaV2ForMaskedLM"),SZr.forEach(t),p9o=r(jCe," (DeBERTa-v2 model)"),jCe.forEach(t),_9o=i(N),T2=n(N,"LI",{});var DCe=s(T2);bse=n(DCe,"STRONG",{});var RZr=s(bse);u9o=r(RZr,"distilbert"),RZr.forEach(t),b9o=r(DCe," \u2014 "),rq=n(DCe,"A",{href:!0});var BZr=s(rq);F9o=r(BZr,"DistilBertForMaskedLM"),BZr.forEach(t),v9o=r(DCe," (DistilBERT model)"),DCe.forEach(t),T9o=i(N),M2=n(N,"LI",{});var GCe=s(M2);Fse=n(GCe,"STRONG",{});var PZr=s(Fse);M9o=r(PZr,"electra"),PZr.forEach(t),E9o=r(GCe," \u2014 "),tq=n(GCe,"A",{href:!0});var $Zr=s(tq);C9o=r($Zr,"ElectraForMaskedLM"),$Zr.forEach(t),w9o=r(GCe," (ELECTRA model)"),GCe.forEach(t),A9o=i(N),E2=n(N,"LI",{});var OCe=s(E2);vse=n(OCe,"STRONG",{});var IZr=s(vse);y9o=r(IZr,"flaubert"),IZr.forEach(t),L9o=r(OCe," \u2014 "),aq=n(OCe,"A",{href:!0});var qZr=s(aq);x9o=r(qZr,"FlaubertWithLMHeadModel"),qZr.forEach(t),k9o=r(OCe," (FlauBERT model)"),OCe.forEach(t),S9o=i(N),C2=n(N,"LI",{});var VCe=s(C2);Tse=n(VCe,"STRONG",{});var NZr=s(Tse);R9o=r(NZr,"fnet"),NZr.forEach(t),B9o=r(VCe," \u2014 "),nq=n(VCe,"A",{href:!0});var jZr=s(nq);P9o=r(jZr,"FNetForMaskedLM"),jZr.forEach(t),$9o=r(VCe," (FNet model)"),VCe.forEach(t),I9o=i(N),w2=n(N,"LI",{});var XCe=s(w2);Mse=n(XCe,"STRONG",{});var DZr=s(Mse);q9o=r(DZr,"funnel"),DZr.forEach(t),N9o=r(XCe," \u2014 "),sq=n(XCe,"A",{href:!0});var GZr=s(sq);j9o=r(GZr,"FunnelForMaskedLM"),GZr.forEach(t),D9o=r(XCe," (Funnel Transformer model)"),XCe.forEach(t),G9o=i(N),A2=n(N,"LI",{});var zCe=s(A2);Ese=n(zCe,"STRONG",{});var OZr=s(Ese);O9o=r(OZr,"ibert"),OZr.forEach(t),V9o=r(zCe," \u2014 "),lq=n(zCe,"A",{href:!0});var VZr=s(lq);X9o=r(VZr,"IBertForMaskedLM"),VZr.forEach(t),z9o=r(zCe," (I-BERT model)"),zCe.forEach(t),Q9o=i(N),y2=n(N,"LI",{});var QCe=s(y2);Cse=n(QCe,"STRONG",{});var XZr=s(Cse);W9o=r(XZr,"layoutlm"),XZr.forEach(t),H9o=r(QCe," \u2014 "),iq=n(QCe,"A",{href:!0});var zZr=s(iq);U9o=r(zZr,"LayoutLMForMaskedLM"),zZr.forEach(t),J9o=r(QCe," (LayoutLM model)"),QCe.forEach(t),Y9o=i(N),L2=n(N,"LI",{});var WCe=s(L2);wse=n(WCe,"STRONG",{});var QZr=s(wse);K9o=r(QZr,"longformer"),QZr.forEach(t),Z9o=r(WCe," \u2014 "),dq=n(WCe,"A",{href:!0});var WZr=s(dq);eMo=r(WZr,"LongformerForMaskedLM"),WZr.forEach(t),oMo=r(WCe," (Longformer model)"),WCe.forEach(t),rMo=i(N),x2=n(N,"LI",{});var HCe=s(x2);Ase=n(HCe,"STRONG",{});var HZr=s(Ase);tMo=r(HZr,"mbart"),HZr.forEach(t),aMo=r(HCe," \u2014 "),cq=n(HCe,"A",{href:!0});var UZr=s(cq);nMo=r(UZr,"MBartForConditionalGeneration"),UZr.forEach(t),sMo=r(HCe," (mBART model)"),HCe.forEach(t),lMo=i(N),k2=n(N,"LI",{});var UCe=s(k2);yse=n(UCe,"STRONG",{});var JZr=s(yse);iMo=r(JZr,"megatron-bert"),JZr.forEach(t),dMo=r(UCe," \u2014 "),fq=n(UCe,"A",{href:!0});var YZr=s(fq);cMo=r(YZr,"MegatronBertForMaskedLM"),YZr.forEach(t),fMo=r(UCe," (MegatronBert model)"),UCe.forEach(t),mMo=i(N),S2=n(N,"LI",{});var JCe=s(S2);Lse=n(JCe,"STRONG",{});var KZr=s(Lse);gMo=r(KZr,"mobilebert"),KZr.forEach(t),hMo=r(JCe," \u2014 "),mq=n(JCe,"A",{href:!0});var ZZr=s(mq);pMo=r(ZZr,"MobileBertForMaskedLM"),ZZr.forEach(t),_Mo=r(JCe," (MobileBERT model)"),JCe.forEach(t),uMo=i(N),R2=n(N,"LI",{});var YCe=s(R2);xse=n(YCe,"STRONG",{});var eet=s(xse);bMo=r(eet,"mpnet"),eet.forEach(t),FMo=r(YCe," \u2014 "),gq=n(YCe,"A",{href:!0});var oet=s(gq);vMo=r(oet,"MPNetForMaskedLM"),oet.forEach(t),TMo=r(YCe," (MPNet model)"),YCe.forEach(t),MMo=i(N),B2=n(N,"LI",{});var KCe=s(B2);kse=n(KCe,"STRONG",{});var ret=s(kse);EMo=r(ret,"nystromformer"),ret.forEach(t),CMo=r(KCe," \u2014 "),hq=n(KCe,"A",{href:!0});var tet=s(hq);wMo=r(tet,"NystromformerForMaskedLM"),tet.forEach(t),AMo=r(KCe," (Nystromformer model)"),KCe.forEach(t),yMo=i(N),P2=n(N,"LI",{});var ZCe=s(P2);Sse=n(ZCe,"STRONG",{});var aet=s(Sse);LMo=r(aet,"perceiver"),aet.forEach(t),xMo=r(ZCe," \u2014 "),pq=n(ZCe,"A",{href:!0});var net=s(pq);kMo=r(net,"PerceiverForMaskedLM"),net.forEach(t),SMo=r(ZCe," (Perceiver model)"),ZCe.forEach(t),RMo=i(N),$2=n(N,"LI",{});var ewe=s($2);Rse=n(ewe,"STRONG",{});var set=s(Rse);BMo=r(set,"qdqbert"),set.forEach(t),PMo=r(ewe," \u2014 "),_q=n(ewe,"A",{href:!0});var iet=s(_q);$Mo=r(iet,"QDQBertForMaskedLM"),iet.forEach(t),IMo=r(ewe," (QDQBert model)"),ewe.forEach(t),qMo=i(N),I2=n(N,"LI",{});var owe=s(I2);Bse=n(owe,"STRONG",{});var det=s(Bse);NMo=r(det,"reformer"),det.forEach(t),jMo=r(owe," \u2014 "),uq=n(owe,"A",{href:!0});var cet=s(uq);DMo=r(cet,"ReformerForMaskedLM"),cet.forEach(t),GMo=r(owe," (Reformer model)"),owe.forEach(t),OMo=i(N),q2=n(N,"LI",{});var rwe=s(q2);Pse=n(rwe,"STRONG",{});var fet=s(Pse);VMo=r(fet,"rembert"),fet.forEach(t),XMo=r(rwe," \u2014 "),bq=n(rwe,"A",{href:!0});var met=s(bq);zMo=r(met,"RemBertForMaskedLM"),met.forEach(t),QMo=r(rwe," (RemBERT model)"),rwe.forEach(t),WMo=i(N),N2=n(N,"LI",{});var twe=s(N2);$se=n(twe,"STRONG",{});var get=s($se);HMo=r(get,"roberta"),get.forEach(t),UMo=r(twe," \u2014 "),Fq=n(twe,"A",{href:!0});var het=s(Fq);JMo=r(het,"RobertaForMaskedLM"),het.forEach(t),YMo=r(twe," (RoBERTa model)"),twe.forEach(t),KMo=i(N),j2=n(N,"LI",{});var awe=s(j2);Ise=n(awe,"STRONG",{});var pet=s(Ise);ZMo=r(pet,"roformer"),pet.forEach(t),e4o=r(awe," \u2014 "),vq=n(awe,"A",{href:!0});var _et=s(vq);o4o=r(_et,"RoFormerForMaskedLM"),_et.forEach(t),r4o=r(awe," (RoFormer model)"),awe.forEach(t),t4o=i(N),D2=n(N,"LI",{});var nwe=s(D2);qse=n(nwe,"STRONG",{});var uet=s(qse);a4o=r(uet,"squeezebert"),uet.forEach(t),n4o=r(nwe," \u2014 "),Tq=n(nwe,"A",{href:!0});var bet=s(Tq);s4o=r(bet,"SqueezeBertForMaskedLM"),bet.forEach(t),l4o=r(nwe," (SqueezeBERT model)"),nwe.forEach(t),i4o=i(N),G2=n(N,"LI",{});var swe=s(G2);Nse=n(swe,"STRONG",{});var Fet=s(Nse);d4o=r(Fet,"tapas"),Fet.forEach(t),c4o=r(swe," \u2014 "),Mq=n(swe,"A",{href:!0});var vet=s(Mq);f4o=r(vet,"TapasForMaskedLM"),vet.forEach(t),m4o=r(swe," (TAPAS model)"),swe.forEach(t),g4o=i(N),O2=n(N,"LI",{});var lwe=s(O2);jse=n(lwe,"STRONG",{});var Tet=s(jse);h4o=r(Tet,"wav2vec2"),Tet.forEach(t),p4o=r(lwe," \u2014 "),Dse=n(lwe,"CODE",{});var Met=s(Dse);_4o=r(Met,"Wav2Vec2ForMaskedLM"),Met.forEach(t),u4o=r(lwe," (Wav2Vec2 model)"),lwe.forEach(t),b4o=i(N),V2=n(N,"LI",{});var iwe=s(V2);Gse=n(iwe,"STRONG",{});var Eet=s(Gse);F4o=r(Eet,"xlm"),Eet.forEach(t),v4o=r(iwe," \u2014 "),Eq=n(iwe,"A",{href:!0});var Cet=s(Eq);T4o=r(Cet,"XLMWithLMHeadModel"),Cet.forEach(t),M4o=r(iwe," (XLM model)"),iwe.forEach(t),E4o=i(N),X2=n(N,"LI",{});var dwe=s(X2);Ose=n(dwe,"STRONG",{});var wet=s(Ose);C4o=r(wet,"xlm-roberta"),wet.forEach(t),w4o=r(dwe," \u2014 "),Cq=n(dwe,"A",{href:!0});var Aet=s(Cq);A4o=r(Aet,"XLMRobertaForMaskedLM"),Aet.forEach(t),y4o=r(dwe," (XLM-RoBERTa model)"),dwe.forEach(t),L4o=i(N),z2=n(N,"LI",{});var cwe=s(z2);Vse=n(cwe,"STRONG",{});var yet=s(Vse);x4o=r(yet,"xlm-roberta-xl"),yet.forEach(t),k4o=r(cwe," \u2014 "),wq=n(cwe,"A",{href:!0});var Let=s(wq);S4o=r(Let,"XLMRobertaXLForMaskedLM"),Let.forEach(t),R4o=r(cwe," (XLM-RoBERTa-XL model)"),cwe.forEach(t),B4o=i(N),Q2=n(N,"LI",{});var fwe=s(Q2);Xse=n(fwe,"STRONG",{});var xet=s(Xse);P4o=r(xet,"yoso"),xet.forEach(t),$4o=r(fwe," \u2014 "),Aq=n(fwe,"A",{href:!0});var ket=s(Aq);I4o=r(ket,"YosoForMaskedLM"),ket.forEach(t),q4o=r(fwe," (YOSO model)"),fwe.forEach(t),N.forEach(t),N4o=i(Vt),W2=n(Vt,"P",{});var mwe=s(W2);j4o=r(mwe,"The model is set in evaluation mode by default using "),zse=n(mwe,"CODE",{});var Set=s(zse);D4o=r(Set,"model.eval()"),Set.forEach(t),G4o=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=n(mwe,"CODE",{});var Ret=s(Qse);O4o=r(Ret,"model.train()"),Ret.forEach(t),mwe.forEach(t),V4o=i(Vt),Wse=n(Vt,"P",{});var Bet=s(Wse);X4o=r(Bet,"Examples:"),Bet.forEach(t),z4o=i(Vt),m(V3.$$.fragment,Vt),Vt.forEach(t),ol.forEach(t),RBe=i(c),fd=n(c,"H2",{class:!0});var G$e=s(fd);H2=n(G$e,"A",{id:!0,class:!0,href:!0});var Pet=s(H2);Hse=n(Pet,"SPAN",{});var $et=s(Hse);m(X3.$$.fragment,$et),$et.forEach(t),Pet.forEach(t),Q4o=i(G$e),Use=n(G$e,"SPAN",{});var Iet=s(Use);W4o=r(Iet,"AutoModelForSeq2SeqLM"),Iet.forEach(t),G$e.forEach(t),BBe=i(c),er=n(c,"DIV",{class:!0});var tl=s(er);m(z3.$$.fragment,tl),H4o=i(tl),md=n(tl,"P",{});var HU=s(md);U4o=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yq=n(HU,"A",{href:!0});var qet=s(yq);J4o=r(qet,"from_pretrained()"),qet.forEach(t),Y4o=r(HU," class method or the "),Lq=n(HU,"A",{href:!0});var Net=s(Lq);K4o=r(Net,"from_config()"),Net.forEach(t),Z4o=r(HU,` class
method.`),HU.forEach(t),eEo=i(tl),Q3=n(tl,"P",{});var O$e=s(Q3);oEo=r(O$e,"This class cannot be instantiated directly using "),Jse=n(O$e,"CODE",{});var jet=s(Jse);rEo=r(jet,"__init__()"),jet.forEach(t),tEo=r(O$e," (throws an error)."),O$e.forEach(t),aEo=i(tl),Hr=n(tl,"DIV",{class:!0});var al=s(Hr);m(W3.$$.fragment,al),nEo=i(al),Yse=n(al,"P",{});var Det=s(Yse);sEo=r(Det,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Det.forEach(t),lEo=i(al),gd=n(al,"P",{});var UU=s(gd);iEo=r(UU,`Note:
Loading a model from its configuration file does `),Kse=n(UU,"STRONG",{});var Get=s(Kse);dEo=r(Get,"not"),Get.forEach(t),cEo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(UU,"A",{href:!0});var Oet=s(xq);fEo=r(Oet,"from_pretrained()"),Oet.forEach(t),mEo=r(UU," to load the model weights."),UU.forEach(t),gEo=i(al),Zse=n(al,"P",{});var Vet=s(Zse);hEo=r(Vet,"Examples:"),Vet.forEach(t),pEo=i(al),m(H3.$$.fragment,al),al.forEach(t),_Eo=i(tl),Oe=n(tl,"DIV",{class:!0});var Xt=s(Oe);m(U3.$$.fragment,Xt),uEo=i(Xt),ele=n(Xt,"P",{});var Xet=s(ele);bEo=r(Xet,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Xet.forEach(t),FEo=i(Xt),Ha=n(Xt,"P",{});var VE=s(Ha);vEo=r(VE,"The model class to instantiate is selected based on the "),ole=n(VE,"CODE",{});var zet=s(ole);TEo=r(zet,"model_type"),zet.forEach(t),MEo=r(VE,` property of the config object (either
passed as an argument or loaded from `),rle=n(VE,"CODE",{});var Qet=s(rle);EEo=r(Qet,"pretrained_model_name_or_path"),Qet.forEach(t),CEo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(VE,"CODE",{});var Wet=s(tle);wEo=r(Wet,"pretrained_model_name_or_path"),Wet.forEach(t),AEo=r(VE,":"),VE.forEach(t),yEo=i(Xt),ae=n(Xt,"UL",{});var le=s(ae);U2=n(le,"LI",{});var gwe=s(U2);ale=n(gwe,"STRONG",{});var Het=s(ale);LEo=r(Het,"bart"),Het.forEach(t),xEo=r(gwe," \u2014 "),kq=n(gwe,"A",{href:!0});var Uet=s(kq);kEo=r(Uet,"BartForConditionalGeneration"),Uet.forEach(t),SEo=r(gwe," (BART model)"),gwe.forEach(t),REo=i(le),J2=n(le,"LI",{});var hwe=s(J2);nle=n(hwe,"STRONG",{});var Jet=s(nle);BEo=r(Jet,"bigbird_pegasus"),Jet.forEach(t),PEo=r(hwe," \u2014 "),Sq=n(hwe,"A",{href:!0});var Yet=s(Sq);$Eo=r(Yet,"BigBirdPegasusForConditionalGeneration"),Yet.forEach(t),IEo=r(hwe," (BigBirdPegasus model)"),hwe.forEach(t),qEo=i(le),Y2=n(le,"LI",{});var pwe=s(Y2);sle=n(pwe,"STRONG",{});var Ket=s(sle);NEo=r(Ket,"blenderbot"),Ket.forEach(t),jEo=r(pwe," \u2014 "),Rq=n(pwe,"A",{href:!0});var Zet=s(Rq);DEo=r(Zet,"BlenderbotForConditionalGeneration"),Zet.forEach(t),GEo=r(pwe," (Blenderbot model)"),pwe.forEach(t),OEo=i(le),K2=n(le,"LI",{});var _we=s(K2);lle=n(_we,"STRONG",{});var eot=s(lle);VEo=r(eot,"blenderbot-small"),eot.forEach(t),XEo=r(_we," \u2014 "),Bq=n(_we,"A",{href:!0});var oot=s(Bq);zEo=r(oot,"BlenderbotSmallForConditionalGeneration"),oot.forEach(t),QEo=r(_we," (BlenderbotSmall model)"),_we.forEach(t),WEo=i(le),Z2=n(le,"LI",{});var uwe=s(Z2);ile=n(uwe,"STRONG",{});var rot=s(ile);HEo=r(rot,"encoder-decoder"),rot.forEach(t),UEo=r(uwe," \u2014 "),Pq=n(uwe,"A",{href:!0});var tot=s(Pq);JEo=r(tot,"EncoderDecoderModel"),tot.forEach(t),YEo=r(uwe," (Encoder decoder model)"),uwe.forEach(t),KEo=i(le),e1=n(le,"LI",{});var bwe=s(e1);dle=n(bwe,"STRONG",{});var aot=s(dle);ZEo=r(aot,"fsmt"),aot.forEach(t),e5o=r(bwe," \u2014 "),$q=n(bwe,"A",{href:!0});var not=s($q);o5o=r(not,"FSMTForConditionalGeneration"),not.forEach(t),r5o=r(bwe," (FairSeq Machine-Translation model)"),bwe.forEach(t),t5o=i(le),o1=n(le,"LI",{});var Fwe=s(o1);cle=n(Fwe,"STRONG",{});var sot=s(cle);a5o=r(sot,"led"),sot.forEach(t),n5o=r(Fwe," \u2014 "),Iq=n(Fwe,"A",{href:!0});var lot=s(Iq);s5o=r(lot,"LEDForConditionalGeneration"),lot.forEach(t),l5o=r(Fwe," (LED model)"),Fwe.forEach(t),i5o=i(le),r1=n(le,"LI",{});var vwe=s(r1);fle=n(vwe,"STRONG",{});var iot=s(fle);d5o=r(iot,"longt5"),iot.forEach(t),c5o=r(vwe," \u2014 "),qq=n(vwe,"A",{href:!0});var dot=s(qq);f5o=r(dot,"LongT5ForConditionalGeneration"),dot.forEach(t),m5o=r(vwe," (LongT5 model)"),vwe.forEach(t),g5o=i(le),t1=n(le,"LI",{});var Twe=s(t1);mle=n(Twe,"STRONG",{});var cot=s(mle);h5o=r(cot,"m2m_100"),cot.forEach(t),p5o=r(Twe," \u2014 "),Nq=n(Twe,"A",{href:!0});var fot=s(Nq);_5o=r(fot,"M2M100ForConditionalGeneration"),fot.forEach(t),u5o=r(Twe," (M2M100 model)"),Twe.forEach(t),b5o=i(le),a1=n(le,"LI",{});var Mwe=s(a1);gle=n(Mwe,"STRONG",{});var mot=s(gle);F5o=r(mot,"marian"),mot.forEach(t),v5o=r(Mwe," \u2014 "),jq=n(Mwe,"A",{href:!0});var got=s(jq);T5o=r(got,"MarianMTModel"),got.forEach(t),M5o=r(Mwe," (Marian model)"),Mwe.forEach(t),E5o=i(le),n1=n(le,"LI",{});var Ewe=s(n1);hle=n(Ewe,"STRONG",{});var hot=s(hle);C5o=r(hot,"mbart"),hot.forEach(t),w5o=r(Ewe," \u2014 "),Dq=n(Ewe,"A",{href:!0});var pot=s(Dq);A5o=r(pot,"MBartForConditionalGeneration"),pot.forEach(t),y5o=r(Ewe," (mBART model)"),Ewe.forEach(t),L5o=i(le),s1=n(le,"LI",{});var Cwe=s(s1);ple=n(Cwe,"STRONG",{});var _ot=s(ple);x5o=r(_ot,"mt5"),_ot.forEach(t),k5o=r(Cwe," \u2014 "),Gq=n(Cwe,"A",{href:!0});var uot=s(Gq);S5o=r(uot,"MT5ForConditionalGeneration"),uot.forEach(t),R5o=r(Cwe," (mT5 model)"),Cwe.forEach(t),B5o=i(le),l1=n(le,"LI",{});var wwe=s(l1);_le=n(wwe,"STRONG",{});var bot=s(_le);P5o=r(bot,"pegasus"),bot.forEach(t),$5o=r(wwe," \u2014 "),Oq=n(wwe,"A",{href:!0});var Fot=s(Oq);I5o=r(Fot,"PegasusForConditionalGeneration"),Fot.forEach(t),q5o=r(wwe," (Pegasus model)"),wwe.forEach(t),N5o=i(le),i1=n(le,"LI",{});var Awe=s(i1);ule=n(Awe,"STRONG",{});var vot=s(ule);j5o=r(vot,"plbart"),vot.forEach(t),D5o=r(Awe," \u2014 "),Vq=n(Awe,"A",{href:!0});var Tot=s(Vq);G5o=r(Tot,"PLBartForConditionalGeneration"),Tot.forEach(t),O5o=r(Awe," (PLBart model)"),Awe.forEach(t),V5o=i(le),d1=n(le,"LI",{});var ywe=s(d1);ble=n(ywe,"STRONG",{});var Mot=s(ble);X5o=r(Mot,"prophetnet"),Mot.forEach(t),z5o=r(ywe," \u2014 "),Xq=n(ywe,"A",{href:!0});var Eot=s(Xq);Q5o=r(Eot,"ProphetNetForConditionalGeneration"),Eot.forEach(t),W5o=r(ywe," (ProphetNet model)"),ywe.forEach(t),H5o=i(le),c1=n(le,"LI",{});var Lwe=s(c1);Fle=n(Lwe,"STRONG",{});var Cot=s(Fle);U5o=r(Cot,"t5"),Cot.forEach(t),J5o=r(Lwe," \u2014 "),zq=n(Lwe,"A",{href:!0});var wot=s(zq);Y5o=r(wot,"T5ForConditionalGeneration"),wot.forEach(t),K5o=r(Lwe," (T5 model)"),Lwe.forEach(t),Z5o=i(le),f1=n(le,"LI",{});var xwe=s(f1);vle=n(xwe,"STRONG",{});var Aot=s(vle);e3o=r(Aot,"tapex"),Aot.forEach(t),o3o=r(xwe," \u2014 "),Qq=n(xwe,"A",{href:!0});var yot=s(Qq);r3o=r(yot,"BartForConditionalGeneration"),yot.forEach(t),t3o=r(xwe," (TAPEX model)"),xwe.forEach(t),a3o=i(le),m1=n(le,"LI",{});var kwe=s(m1);Tle=n(kwe,"STRONG",{});var Lot=s(Tle);n3o=r(Lot,"xlm-prophetnet"),Lot.forEach(t),s3o=r(kwe," \u2014 "),Wq=n(kwe,"A",{href:!0});var xot=s(Wq);l3o=r(xot,"XLMProphetNetForConditionalGeneration"),xot.forEach(t),i3o=r(kwe," (XLMProphetNet model)"),kwe.forEach(t),le.forEach(t),d3o=i(Xt),g1=n(Xt,"P",{});var Swe=s(g1);c3o=r(Swe,"The model is set in evaluation mode by default using "),Mle=n(Swe,"CODE",{});var kot=s(Mle);f3o=r(kot,"model.eval()"),kot.forEach(t),m3o=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ele=n(Swe,"CODE",{});var Sot=s(Ele);g3o=r(Sot,"model.train()"),Sot.forEach(t),Swe.forEach(t),h3o=i(Xt),Cle=n(Xt,"P",{});var Rot=s(Cle);p3o=r(Rot,"Examples:"),Rot.forEach(t),_3o=i(Xt),m(J3.$$.fragment,Xt),Xt.forEach(t),tl.forEach(t),PBe=i(c),hd=n(c,"H2",{class:!0});var V$e=s(hd);h1=n(V$e,"A",{id:!0,class:!0,href:!0});var Bot=s(h1);wle=n(Bot,"SPAN",{});var Pot=s(wle);m(Y3.$$.fragment,Pot),Pot.forEach(t),Bot.forEach(t),u3o=i(V$e),Ale=n(V$e,"SPAN",{});var $ot=s(Ale);b3o=r($ot,"AutoModelForSequenceClassification"),$ot.forEach(t),V$e.forEach(t),$Be=i(c),or=n(c,"DIV",{class:!0});var nl=s(or);m(K3.$$.fragment,nl),F3o=i(nl),pd=n(nl,"P",{});var JU=s(pd);v3o=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Hq=n(JU,"A",{href:!0});var Iot=s(Hq);T3o=r(Iot,"from_pretrained()"),Iot.forEach(t),M3o=r(JU," class method or the "),Uq=n(JU,"A",{href:!0});var qot=s(Uq);E3o=r(qot,"from_config()"),qot.forEach(t),C3o=r(JU,` class
method.`),JU.forEach(t),w3o=i(nl),Z3=n(nl,"P",{});var X$e=s(Z3);A3o=r(X$e,"This class cannot be instantiated directly using "),yle=n(X$e,"CODE",{});var Not=s(yle);y3o=r(Not,"__init__()"),Not.forEach(t),L3o=r(X$e," (throws an error)."),X$e.forEach(t),x3o=i(nl),Ur=n(nl,"DIV",{class:!0});var sl=s(Ur);m(eC.$$.fragment,sl),k3o=i(sl),Lle=n(sl,"P",{});var jot=s(Lle);S3o=r(jot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),jot.forEach(t),R3o=i(sl),_d=n(sl,"P",{});var YU=s(_d);B3o=r(YU,`Note:
Loading a model from its configuration file does `),xle=n(YU,"STRONG",{});var Dot=s(xle);P3o=r(Dot,"not"),Dot.forEach(t),$3o=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jq=n(YU,"A",{href:!0});var Got=s(Jq);I3o=r(Got,"from_pretrained()"),Got.forEach(t),q3o=r(YU," to load the model weights."),YU.forEach(t),N3o=i(sl),kle=n(sl,"P",{});var Oot=s(kle);j3o=r(Oot,"Examples:"),Oot.forEach(t),D3o=i(sl),m(oC.$$.fragment,sl),sl.forEach(t),G3o=i(nl),Ve=n(nl,"DIV",{class:!0});var zt=s(Ve);m(rC.$$.fragment,zt),O3o=i(zt),Sle=n(zt,"P",{});var Vot=s(Sle);V3o=r(Vot,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vot.forEach(t),X3o=i(zt),Ua=n(zt,"P",{});var XE=s(Ua);z3o=r(XE,"The model class to instantiate is selected based on the "),Rle=n(XE,"CODE",{});var Xot=s(Rle);Q3o=r(Xot,"model_type"),Xot.forEach(t),W3o=r(XE,` property of the config object (either
passed as an argument or loaded from `),Ble=n(XE,"CODE",{});var zot=s(Ble);H3o=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),U3o=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ple=n(XE,"CODE",{});var Qot=s(Ple);J3o=r(Qot,"pretrained_model_name_or_path"),Qot.forEach(t),Y3o=r(XE,":"),XE.forEach(t),K3o=i(zt),y=n(zt,"UL",{});var L=s(y);p1=n(L,"LI",{});var Rwe=s(p1);$le=n(Rwe,"STRONG",{});var Wot=s($le);Z3o=r(Wot,"albert"),Wot.forEach(t),eCo=r(Rwe," \u2014 "),Yq=n(Rwe,"A",{href:!0});var Hot=s(Yq);oCo=r(Hot,"AlbertForSequenceClassification"),Hot.forEach(t),rCo=r(Rwe," (ALBERT model)"),Rwe.forEach(t),tCo=i(L),_1=n(L,"LI",{});var Bwe=s(_1);Ile=n(Bwe,"STRONG",{});var Uot=s(Ile);aCo=r(Uot,"bart"),Uot.forEach(t),nCo=r(Bwe," \u2014 "),Kq=n(Bwe,"A",{href:!0});var Jot=s(Kq);sCo=r(Jot,"BartForSequenceClassification"),Jot.forEach(t),lCo=r(Bwe," (BART model)"),Bwe.forEach(t),iCo=i(L),u1=n(L,"LI",{});var Pwe=s(u1);qle=n(Pwe,"STRONG",{});var Yot=s(qle);dCo=r(Yot,"bert"),Yot.forEach(t),cCo=r(Pwe," \u2014 "),Zq=n(Pwe,"A",{href:!0});var Kot=s(Zq);fCo=r(Kot,"BertForSequenceClassification"),Kot.forEach(t),mCo=r(Pwe," (BERT model)"),Pwe.forEach(t),gCo=i(L),b1=n(L,"LI",{});var $we=s(b1);Nle=n($we,"STRONG",{});var Zot=s(Nle);hCo=r(Zot,"big_bird"),Zot.forEach(t),pCo=r($we," \u2014 "),eN=n($we,"A",{href:!0});var ert=s(eN);_Co=r(ert,"BigBirdForSequenceClassification"),ert.forEach(t),uCo=r($we," (BigBird model)"),$we.forEach(t),bCo=i(L),F1=n(L,"LI",{});var Iwe=s(F1);jle=n(Iwe,"STRONG",{});var ort=s(jle);FCo=r(ort,"bigbird_pegasus"),ort.forEach(t),vCo=r(Iwe," \u2014 "),oN=n(Iwe,"A",{href:!0});var rrt=s(oN);TCo=r(rrt,"BigBirdPegasusForSequenceClassification"),rrt.forEach(t),MCo=r(Iwe," (BigBirdPegasus model)"),Iwe.forEach(t),ECo=i(L),v1=n(L,"LI",{});var qwe=s(v1);Dle=n(qwe,"STRONG",{});var trt=s(Dle);CCo=r(trt,"camembert"),trt.forEach(t),wCo=r(qwe," \u2014 "),rN=n(qwe,"A",{href:!0});var art=s(rN);ACo=r(art,"CamembertForSequenceClassification"),art.forEach(t),yCo=r(qwe," (CamemBERT model)"),qwe.forEach(t),LCo=i(L),T1=n(L,"LI",{});var Nwe=s(T1);Gle=n(Nwe,"STRONG",{});var nrt=s(Gle);xCo=r(nrt,"canine"),nrt.forEach(t),kCo=r(Nwe," \u2014 "),tN=n(Nwe,"A",{href:!0});var srt=s(tN);SCo=r(srt,"CanineForSequenceClassification"),srt.forEach(t),RCo=r(Nwe," (Canine model)"),Nwe.forEach(t),BCo=i(L),M1=n(L,"LI",{});var jwe=s(M1);Ole=n(jwe,"STRONG",{});var lrt=s(Ole);PCo=r(lrt,"convbert"),lrt.forEach(t),$Co=r(jwe," \u2014 "),aN=n(jwe,"A",{href:!0});var irt=s(aN);ICo=r(irt,"ConvBertForSequenceClassification"),irt.forEach(t),qCo=r(jwe," (ConvBERT model)"),jwe.forEach(t),NCo=i(L),E1=n(L,"LI",{});var Dwe=s(E1);Vle=n(Dwe,"STRONG",{});var drt=s(Vle);jCo=r(drt,"ctrl"),drt.forEach(t),DCo=r(Dwe," \u2014 "),nN=n(Dwe,"A",{href:!0});var crt=s(nN);GCo=r(crt,"CTRLForSequenceClassification"),crt.forEach(t),OCo=r(Dwe," (CTRL model)"),Dwe.forEach(t),VCo=i(L),C1=n(L,"LI",{});var Gwe=s(C1);Xle=n(Gwe,"STRONG",{});var frt=s(Xle);XCo=r(frt,"data2vec-text"),frt.forEach(t),zCo=r(Gwe," \u2014 "),sN=n(Gwe,"A",{href:!0});var mrt=s(sN);QCo=r(mrt,"Data2VecTextForSequenceClassification"),mrt.forEach(t),WCo=r(Gwe," (Data2VecText model)"),Gwe.forEach(t),HCo=i(L),w1=n(L,"LI",{});var Owe=s(w1);zle=n(Owe,"STRONG",{});var grt=s(zle);UCo=r(grt,"deberta"),grt.forEach(t),JCo=r(Owe," \u2014 "),lN=n(Owe,"A",{href:!0});var hrt=s(lN);YCo=r(hrt,"DebertaForSequenceClassification"),hrt.forEach(t),KCo=r(Owe," (DeBERTa model)"),Owe.forEach(t),ZCo=i(L),A1=n(L,"LI",{});var Vwe=s(A1);Qle=n(Vwe,"STRONG",{});var prt=s(Qle);ewo=r(prt,"deberta-v2"),prt.forEach(t),owo=r(Vwe," \u2014 "),iN=n(Vwe,"A",{href:!0});var _rt=s(iN);rwo=r(_rt,"DebertaV2ForSequenceClassification"),_rt.forEach(t),two=r(Vwe," (DeBERTa-v2 model)"),Vwe.forEach(t),awo=i(L),y1=n(L,"LI",{});var Xwe=s(y1);Wle=n(Xwe,"STRONG",{});var urt=s(Wle);nwo=r(urt,"distilbert"),urt.forEach(t),swo=r(Xwe," \u2014 "),dN=n(Xwe,"A",{href:!0});var brt=s(dN);lwo=r(brt,"DistilBertForSequenceClassification"),brt.forEach(t),iwo=r(Xwe," (DistilBERT model)"),Xwe.forEach(t),dwo=i(L),L1=n(L,"LI",{});var zwe=s(L1);Hle=n(zwe,"STRONG",{});var Frt=s(Hle);cwo=r(Frt,"electra"),Frt.forEach(t),fwo=r(zwe," \u2014 "),cN=n(zwe,"A",{href:!0});var vrt=s(cN);mwo=r(vrt,"ElectraForSequenceClassification"),vrt.forEach(t),gwo=r(zwe," (ELECTRA model)"),zwe.forEach(t),hwo=i(L),x1=n(L,"LI",{});var Qwe=s(x1);Ule=n(Qwe,"STRONG",{});var Trt=s(Ule);pwo=r(Trt,"flaubert"),Trt.forEach(t),_wo=r(Qwe," \u2014 "),fN=n(Qwe,"A",{href:!0});var Mrt=s(fN);uwo=r(Mrt,"FlaubertForSequenceClassification"),Mrt.forEach(t),bwo=r(Qwe," (FlauBERT model)"),Qwe.forEach(t),Fwo=i(L),k1=n(L,"LI",{});var Wwe=s(k1);Jle=n(Wwe,"STRONG",{});var Ert=s(Jle);vwo=r(Ert,"fnet"),Ert.forEach(t),Two=r(Wwe," \u2014 "),mN=n(Wwe,"A",{href:!0});var Crt=s(mN);Mwo=r(Crt,"FNetForSequenceClassification"),Crt.forEach(t),Ewo=r(Wwe," (FNet model)"),Wwe.forEach(t),Cwo=i(L),S1=n(L,"LI",{});var Hwe=s(S1);Yle=n(Hwe,"STRONG",{});var wrt=s(Yle);wwo=r(wrt,"funnel"),wrt.forEach(t),Awo=r(Hwe," \u2014 "),gN=n(Hwe,"A",{href:!0});var Art=s(gN);ywo=r(Art,"FunnelForSequenceClassification"),Art.forEach(t),Lwo=r(Hwe," (Funnel Transformer model)"),Hwe.forEach(t),xwo=i(L),R1=n(L,"LI",{});var Uwe=s(R1);Kle=n(Uwe,"STRONG",{});var yrt=s(Kle);kwo=r(yrt,"gpt2"),yrt.forEach(t),Swo=r(Uwe," \u2014 "),hN=n(Uwe,"A",{href:!0});var Lrt=s(hN);Rwo=r(Lrt,"GPT2ForSequenceClassification"),Lrt.forEach(t),Bwo=r(Uwe," (OpenAI GPT-2 model)"),Uwe.forEach(t),Pwo=i(L),B1=n(L,"LI",{});var Jwe=s(B1);Zle=n(Jwe,"STRONG",{});var xrt=s(Zle);$wo=r(xrt,"gpt_neo"),xrt.forEach(t),Iwo=r(Jwe," \u2014 "),pN=n(Jwe,"A",{href:!0});var krt=s(pN);qwo=r(krt,"GPTNeoForSequenceClassification"),krt.forEach(t),Nwo=r(Jwe," (GPT Neo model)"),Jwe.forEach(t),jwo=i(L),P1=n(L,"LI",{});var Ywe=s(P1);eie=n(Ywe,"STRONG",{});var Srt=s(eie);Dwo=r(Srt,"gptj"),Srt.forEach(t),Gwo=r(Ywe," \u2014 "),_N=n(Ywe,"A",{href:!0});var Rrt=s(_N);Owo=r(Rrt,"GPTJForSequenceClassification"),Rrt.forEach(t),Vwo=r(Ywe," (GPT-J model)"),Ywe.forEach(t),Xwo=i(L),$1=n(L,"LI",{});var Kwe=s($1);oie=n(Kwe,"STRONG",{});var Brt=s(oie);zwo=r(Brt,"ibert"),Brt.forEach(t),Qwo=r(Kwe," \u2014 "),uN=n(Kwe,"A",{href:!0});var Prt=s(uN);Wwo=r(Prt,"IBertForSequenceClassification"),Prt.forEach(t),Hwo=r(Kwe," (I-BERT model)"),Kwe.forEach(t),Uwo=i(L),I1=n(L,"LI",{});var Zwe=s(I1);rie=n(Zwe,"STRONG",{});var $rt=s(rie);Jwo=r($rt,"layoutlm"),$rt.forEach(t),Ywo=r(Zwe," \u2014 "),bN=n(Zwe,"A",{href:!0});var Irt=s(bN);Kwo=r(Irt,"LayoutLMForSequenceClassification"),Irt.forEach(t),Zwo=r(Zwe," (LayoutLM model)"),Zwe.forEach(t),eAo=i(L),q1=n(L,"LI",{});var eAe=s(q1);tie=n(eAe,"STRONG",{});var qrt=s(tie);oAo=r(qrt,"layoutlmv2"),qrt.forEach(t),rAo=r(eAe," \u2014 "),FN=n(eAe,"A",{href:!0});var Nrt=s(FN);tAo=r(Nrt,"LayoutLMv2ForSequenceClassification"),Nrt.forEach(t),aAo=r(eAe," (LayoutLMv2 model)"),eAe.forEach(t),nAo=i(L),N1=n(L,"LI",{});var oAe=s(N1);aie=n(oAe,"STRONG",{});var jrt=s(aie);sAo=r(jrt,"led"),jrt.forEach(t),lAo=r(oAe," \u2014 "),vN=n(oAe,"A",{href:!0});var Drt=s(vN);iAo=r(Drt,"LEDForSequenceClassification"),Drt.forEach(t),dAo=r(oAe," (LED model)"),oAe.forEach(t),cAo=i(L),j1=n(L,"LI",{});var rAe=s(j1);nie=n(rAe,"STRONG",{});var Grt=s(nie);fAo=r(Grt,"longformer"),Grt.forEach(t),mAo=r(rAe," \u2014 "),TN=n(rAe,"A",{href:!0});var Ort=s(TN);gAo=r(Ort,"LongformerForSequenceClassification"),Ort.forEach(t),hAo=r(rAe," (Longformer model)"),rAe.forEach(t),pAo=i(L),D1=n(L,"LI",{});var tAe=s(D1);sie=n(tAe,"STRONG",{});var Vrt=s(sie);_Ao=r(Vrt,"mbart"),Vrt.forEach(t),uAo=r(tAe," \u2014 "),MN=n(tAe,"A",{href:!0});var Xrt=s(MN);bAo=r(Xrt,"MBartForSequenceClassification"),Xrt.forEach(t),FAo=r(tAe," (mBART model)"),tAe.forEach(t),vAo=i(L),G1=n(L,"LI",{});var aAe=s(G1);lie=n(aAe,"STRONG",{});var zrt=s(lie);TAo=r(zrt,"megatron-bert"),zrt.forEach(t),MAo=r(aAe," \u2014 "),EN=n(aAe,"A",{href:!0});var Qrt=s(EN);EAo=r(Qrt,"MegatronBertForSequenceClassification"),Qrt.forEach(t),CAo=r(aAe," (MegatronBert model)"),aAe.forEach(t),wAo=i(L),O1=n(L,"LI",{});var nAe=s(O1);iie=n(nAe,"STRONG",{});var Wrt=s(iie);AAo=r(Wrt,"mobilebert"),Wrt.forEach(t),yAo=r(nAe," \u2014 "),CN=n(nAe,"A",{href:!0});var Hrt=s(CN);LAo=r(Hrt,"MobileBertForSequenceClassification"),Hrt.forEach(t),xAo=r(nAe," (MobileBERT model)"),nAe.forEach(t),kAo=i(L),V1=n(L,"LI",{});var sAe=s(V1);die=n(sAe,"STRONG",{});var Urt=s(die);SAo=r(Urt,"mpnet"),Urt.forEach(t),RAo=r(sAe," \u2014 "),wN=n(sAe,"A",{href:!0});var Jrt=s(wN);BAo=r(Jrt,"MPNetForSequenceClassification"),Jrt.forEach(t),PAo=r(sAe," (MPNet model)"),sAe.forEach(t),$Ao=i(L),X1=n(L,"LI",{});var lAe=s(X1);cie=n(lAe,"STRONG",{});var Yrt=s(cie);IAo=r(Yrt,"nystromformer"),Yrt.forEach(t),qAo=r(lAe," \u2014 "),AN=n(lAe,"A",{href:!0});var Krt=s(AN);NAo=r(Krt,"NystromformerForSequenceClassification"),Krt.forEach(t),jAo=r(lAe," (Nystromformer model)"),lAe.forEach(t),DAo=i(L),z1=n(L,"LI",{});var iAe=s(z1);fie=n(iAe,"STRONG",{});var Zrt=s(fie);GAo=r(Zrt,"openai-gpt"),Zrt.forEach(t),OAo=r(iAe," \u2014 "),yN=n(iAe,"A",{href:!0});var ett=s(yN);VAo=r(ett,"OpenAIGPTForSequenceClassification"),ett.forEach(t),XAo=r(iAe," (OpenAI GPT model)"),iAe.forEach(t),zAo=i(L),Q1=n(L,"LI",{});var dAe=s(Q1);mie=n(dAe,"STRONG",{});var ott=s(mie);QAo=r(ott,"perceiver"),ott.forEach(t),WAo=r(dAe," \u2014 "),LN=n(dAe,"A",{href:!0});var rtt=s(LN);HAo=r(rtt,"PerceiverForSequenceClassification"),rtt.forEach(t),UAo=r(dAe," (Perceiver model)"),dAe.forEach(t),JAo=i(L),W1=n(L,"LI",{});var cAe=s(W1);gie=n(cAe,"STRONG",{});var ttt=s(gie);YAo=r(ttt,"plbart"),ttt.forEach(t),KAo=r(cAe," \u2014 "),xN=n(cAe,"A",{href:!0});var att=s(xN);ZAo=r(att,"PLBartForSequenceClassification"),att.forEach(t),e0o=r(cAe," (PLBart model)"),cAe.forEach(t),o0o=i(L),H1=n(L,"LI",{});var fAe=s(H1);hie=n(fAe,"STRONG",{});var ntt=s(hie);r0o=r(ntt,"qdqbert"),ntt.forEach(t),t0o=r(fAe," \u2014 "),kN=n(fAe,"A",{href:!0});var stt=s(kN);a0o=r(stt,"QDQBertForSequenceClassification"),stt.forEach(t),n0o=r(fAe," (QDQBert model)"),fAe.forEach(t),s0o=i(L),U1=n(L,"LI",{});var mAe=s(U1);pie=n(mAe,"STRONG",{});var ltt=s(pie);l0o=r(ltt,"reformer"),ltt.forEach(t),i0o=r(mAe," \u2014 "),SN=n(mAe,"A",{href:!0});var itt=s(SN);d0o=r(itt,"ReformerForSequenceClassification"),itt.forEach(t),c0o=r(mAe," (Reformer model)"),mAe.forEach(t),f0o=i(L),J1=n(L,"LI",{});var gAe=s(J1);_ie=n(gAe,"STRONG",{});var dtt=s(_ie);m0o=r(dtt,"rembert"),dtt.forEach(t),g0o=r(gAe," \u2014 "),RN=n(gAe,"A",{href:!0});var ctt=s(RN);h0o=r(ctt,"RemBertForSequenceClassification"),ctt.forEach(t),p0o=r(gAe," (RemBERT model)"),gAe.forEach(t),_0o=i(L),Y1=n(L,"LI",{});var hAe=s(Y1);uie=n(hAe,"STRONG",{});var ftt=s(uie);u0o=r(ftt,"roberta"),ftt.forEach(t),b0o=r(hAe," \u2014 "),BN=n(hAe,"A",{href:!0});var mtt=s(BN);F0o=r(mtt,"RobertaForSequenceClassification"),mtt.forEach(t),v0o=r(hAe," (RoBERTa model)"),hAe.forEach(t),T0o=i(L),K1=n(L,"LI",{});var pAe=s(K1);bie=n(pAe,"STRONG",{});var gtt=s(bie);M0o=r(gtt,"roformer"),gtt.forEach(t),E0o=r(pAe," \u2014 "),PN=n(pAe,"A",{href:!0});var htt=s(PN);C0o=r(htt,"RoFormerForSequenceClassification"),htt.forEach(t),w0o=r(pAe," (RoFormer model)"),pAe.forEach(t),A0o=i(L),Z1=n(L,"LI",{});var _Ae=s(Z1);Fie=n(_Ae,"STRONG",{});var ptt=s(Fie);y0o=r(ptt,"squeezebert"),ptt.forEach(t),L0o=r(_Ae," \u2014 "),$N=n(_Ae,"A",{href:!0});var _tt=s($N);x0o=r(_tt,"SqueezeBertForSequenceClassification"),_tt.forEach(t),k0o=r(_Ae," (SqueezeBERT model)"),_Ae.forEach(t),S0o=i(L),eb=n(L,"LI",{});var uAe=s(eb);vie=n(uAe,"STRONG",{});var utt=s(vie);R0o=r(utt,"tapas"),utt.forEach(t),B0o=r(uAe," \u2014 "),IN=n(uAe,"A",{href:!0});var btt=s(IN);P0o=r(btt,"TapasForSequenceClassification"),btt.forEach(t),$0o=r(uAe," (TAPAS model)"),uAe.forEach(t),I0o=i(L),ob=n(L,"LI",{});var bAe=s(ob);Tie=n(bAe,"STRONG",{});var Ftt=s(Tie);q0o=r(Ftt,"tapex"),Ftt.forEach(t),N0o=r(bAe," \u2014 "),qN=n(bAe,"A",{href:!0});var vtt=s(qN);j0o=r(vtt,"BartForSequenceClassification"),vtt.forEach(t),D0o=r(bAe," (TAPEX model)"),bAe.forEach(t),G0o=i(L),rb=n(L,"LI",{});var FAe=s(rb);Mie=n(FAe,"STRONG",{});var Ttt=s(Mie);O0o=r(Ttt,"transfo-xl"),Ttt.forEach(t),V0o=r(FAe," \u2014 "),NN=n(FAe,"A",{href:!0});var Mtt=s(NN);X0o=r(Mtt,"TransfoXLForSequenceClassification"),Mtt.forEach(t),z0o=r(FAe," (Transformer-XL model)"),FAe.forEach(t),Q0o=i(L),tb=n(L,"LI",{});var vAe=s(tb);Eie=n(vAe,"STRONG",{});var Ett=s(Eie);W0o=r(Ett,"xlm"),Ett.forEach(t),H0o=r(vAe," \u2014 "),jN=n(vAe,"A",{href:!0});var Ctt=s(jN);U0o=r(Ctt,"XLMForSequenceClassification"),Ctt.forEach(t),J0o=r(vAe," (XLM model)"),vAe.forEach(t),Y0o=i(L),ab=n(L,"LI",{});var TAe=s(ab);Cie=n(TAe,"STRONG",{});var wtt=s(Cie);K0o=r(wtt,"xlm-roberta"),wtt.forEach(t),Z0o=r(TAe," \u2014 "),DN=n(TAe,"A",{href:!0});var Att=s(DN);eyo=r(Att,"XLMRobertaForSequenceClassification"),Att.forEach(t),oyo=r(TAe," (XLM-RoBERTa model)"),TAe.forEach(t),ryo=i(L),nb=n(L,"LI",{});var MAe=s(nb);wie=n(MAe,"STRONG",{});var ytt=s(wie);tyo=r(ytt,"xlm-roberta-xl"),ytt.forEach(t),ayo=r(MAe," \u2014 "),GN=n(MAe,"A",{href:!0});var Ltt=s(GN);nyo=r(Ltt,"XLMRobertaXLForSequenceClassification"),Ltt.forEach(t),syo=r(MAe," (XLM-RoBERTa-XL model)"),MAe.forEach(t),lyo=i(L),sb=n(L,"LI",{});var EAe=s(sb);Aie=n(EAe,"STRONG",{});var xtt=s(Aie);iyo=r(xtt,"xlnet"),xtt.forEach(t),dyo=r(EAe," \u2014 "),ON=n(EAe,"A",{href:!0});var ktt=s(ON);cyo=r(ktt,"XLNetForSequenceClassification"),ktt.forEach(t),fyo=r(EAe," (XLNet model)"),EAe.forEach(t),myo=i(L),lb=n(L,"LI",{});var CAe=s(lb);yie=n(CAe,"STRONG",{});var Stt=s(yie);gyo=r(Stt,"yoso"),Stt.forEach(t),hyo=r(CAe," \u2014 "),VN=n(CAe,"A",{href:!0});var Rtt=s(VN);pyo=r(Rtt,"YosoForSequenceClassification"),Rtt.forEach(t),_yo=r(CAe," (YOSO model)"),CAe.forEach(t),L.forEach(t),uyo=i(zt),ib=n(zt,"P",{});var wAe=s(ib);byo=r(wAe,"The model is set in evaluation mode by default using "),Lie=n(wAe,"CODE",{});var Btt=s(Lie);Fyo=r(Btt,"model.eval()"),Btt.forEach(t),vyo=r(wAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(wAe,"CODE",{});var Ptt=s(xie);Tyo=r(Ptt,"model.train()"),Ptt.forEach(t),wAe.forEach(t),Myo=i(zt),kie=n(zt,"P",{});var $tt=s(kie);Eyo=r($tt,"Examples:"),$tt.forEach(t),Cyo=i(zt),m(tC.$$.fragment,zt),zt.forEach(t),nl.forEach(t),IBe=i(c),ud=n(c,"H2",{class:!0});var z$e=s(ud);db=n(z$e,"A",{id:!0,class:!0,href:!0});var Itt=s(db);Sie=n(Itt,"SPAN",{});var qtt=s(Sie);m(aC.$$.fragment,qtt),qtt.forEach(t),Itt.forEach(t),wyo=i(z$e),Rie=n(z$e,"SPAN",{});var Ntt=s(Rie);Ayo=r(Ntt,"AutoModelForMultipleChoice"),Ntt.forEach(t),z$e.forEach(t),qBe=i(c),rr=n(c,"DIV",{class:!0});var ll=s(rr);m(nC.$$.fragment,ll),yyo=i(ll),bd=n(ll,"P",{});var KU=s(bd);Lyo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),XN=n(KU,"A",{href:!0});var jtt=s(XN);xyo=r(jtt,"from_pretrained()"),jtt.forEach(t),kyo=r(KU," class method or the "),zN=n(KU,"A",{href:!0});var Dtt=s(zN);Syo=r(Dtt,"from_config()"),Dtt.forEach(t),Ryo=r(KU,` class
method.`),KU.forEach(t),Byo=i(ll),sC=n(ll,"P",{});var Q$e=s(sC);Pyo=r(Q$e,"This class cannot be instantiated directly using "),Bie=n(Q$e,"CODE",{});var Gtt=s(Bie);$yo=r(Gtt,"__init__()"),Gtt.forEach(t),Iyo=r(Q$e," (throws an error)."),Q$e.forEach(t),qyo=i(ll),Jr=n(ll,"DIV",{class:!0});var il=s(Jr);m(lC.$$.fragment,il),Nyo=i(il),Pie=n(il,"P",{});var Ott=s(Pie);jyo=r(Ott,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ott.forEach(t),Dyo=i(il),Fd=n(il,"P",{});var ZU=s(Fd);Gyo=r(ZU,`Note:
Loading a model from its configuration file does `),$ie=n(ZU,"STRONG",{});var Vtt=s($ie);Oyo=r(Vtt,"not"),Vtt.forEach(t),Vyo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),QN=n(ZU,"A",{href:!0});var Xtt=s(QN);Xyo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),zyo=r(ZU," to load the model weights."),ZU.forEach(t),Qyo=i(il),Iie=n(il,"P",{});var ztt=s(Iie);Wyo=r(ztt,"Examples:"),ztt.forEach(t),Hyo=i(il),m(iC.$$.fragment,il),il.forEach(t),Uyo=i(ll),Xe=n(ll,"DIV",{class:!0});var Qt=s(Xe);m(dC.$$.fragment,Qt),Jyo=i(Qt),qie=n(Qt,"P",{});var Qtt=s(qie);Yyo=r(Qtt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qtt.forEach(t),Kyo=i(Qt),Ja=n(Qt,"P",{});var zE=s(Ja);Zyo=r(zE,"The model class to instantiate is selected based on the "),Nie=n(zE,"CODE",{});var Wtt=s(Nie);eLo=r(Wtt,"model_type"),Wtt.forEach(t),oLo=r(zE,` property of the config object (either
passed as an argument or loaded from `),jie=n(zE,"CODE",{});var Htt=s(jie);rLo=r(Htt,"pretrained_model_name_or_path"),Htt.forEach(t),tLo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Die=n(zE,"CODE",{});var Utt=s(Die);aLo=r(Utt,"pretrained_model_name_or_path"),Utt.forEach(t),nLo=r(zE,":"),zE.forEach(t),sLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);cb=n(O,"LI",{});var AAe=s(cb);Gie=n(AAe,"STRONG",{});var Jtt=s(Gie);lLo=r(Jtt,"albert"),Jtt.forEach(t),iLo=r(AAe," \u2014 "),WN=n(AAe,"A",{href:!0});var Ytt=s(WN);dLo=r(Ytt,"AlbertForMultipleChoice"),Ytt.forEach(t),cLo=r(AAe," (ALBERT model)"),AAe.forEach(t),fLo=i(O),fb=n(O,"LI",{});var yAe=s(fb);Oie=n(yAe,"STRONG",{});var Ktt=s(Oie);mLo=r(Ktt,"bert"),Ktt.forEach(t),gLo=r(yAe," \u2014 "),HN=n(yAe,"A",{href:!0});var Ztt=s(HN);hLo=r(Ztt,"BertForMultipleChoice"),Ztt.forEach(t),pLo=r(yAe," (BERT model)"),yAe.forEach(t),_Lo=i(O),mb=n(O,"LI",{});var LAe=s(mb);Vie=n(LAe,"STRONG",{});var eat=s(Vie);uLo=r(eat,"big_bird"),eat.forEach(t),bLo=r(LAe," \u2014 "),UN=n(LAe,"A",{href:!0});var oat=s(UN);FLo=r(oat,"BigBirdForMultipleChoice"),oat.forEach(t),vLo=r(LAe," (BigBird model)"),LAe.forEach(t),TLo=i(O),gb=n(O,"LI",{});var xAe=s(gb);Xie=n(xAe,"STRONG",{});var rat=s(Xie);MLo=r(rat,"camembert"),rat.forEach(t),ELo=r(xAe," \u2014 "),JN=n(xAe,"A",{href:!0});var tat=s(JN);CLo=r(tat,"CamembertForMultipleChoice"),tat.forEach(t),wLo=r(xAe," (CamemBERT model)"),xAe.forEach(t),ALo=i(O),hb=n(O,"LI",{});var kAe=s(hb);zie=n(kAe,"STRONG",{});var aat=s(zie);yLo=r(aat,"canine"),aat.forEach(t),LLo=r(kAe," \u2014 "),YN=n(kAe,"A",{href:!0});var nat=s(YN);xLo=r(nat,"CanineForMultipleChoice"),nat.forEach(t),kLo=r(kAe," (Canine model)"),kAe.forEach(t),SLo=i(O),pb=n(O,"LI",{});var SAe=s(pb);Qie=n(SAe,"STRONG",{});var sat=s(Qie);RLo=r(sat,"convbert"),sat.forEach(t),BLo=r(SAe," \u2014 "),KN=n(SAe,"A",{href:!0});var lat=s(KN);PLo=r(lat,"ConvBertForMultipleChoice"),lat.forEach(t),$Lo=r(SAe," (ConvBERT model)"),SAe.forEach(t),ILo=i(O),_b=n(O,"LI",{});var RAe=s(_b);Wie=n(RAe,"STRONG",{});var iat=s(Wie);qLo=r(iat,"data2vec-text"),iat.forEach(t),NLo=r(RAe," \u2014 "),ZN=n(RAe,"A",{href:!0});var dat=s(ZN);jLo=r(dat,"Data2VecTextForMultipleChoice"),dat.forEach(t),DLo=r(RAe," (Data2VecText model)"),RAe.forEach(t),GLo=i(O),ub=n(O,"LI",{});var BAe=s(ub);Hie=n(BAe,"STRONG",{});var cat=s(Hie);OLo=r(cat,"distilbert"),cat.forEach(t),VLo=r(BAe," \u2014 "),ej=n(BAe,"A",{href:!0});var fat=s(ej);XLo=r(fat,"DistilBertForMultipleChoice"),fat.forEach(t),zLo=r(BAe," (DistilBERT model)"),BAe.forEach(t),QLo=i(O),bb=n(O,"LI",{});var PAe=s(bb);Uie=n(PAe,"STRONG",{});var mat=s(Uie);WLo=r(mat,"electra"),mat.forEach(t),HLo=r(PAe," \u2014 "),oj=n(PAe,"A",{href:!0});var gat=s(oj);ULo=r(gat,"ElectraForMultipleChoice"),gat.forEach(t),JLo=r(PAe," (ELECTRA model)"),PAe.forEach(t),YLo=i(O),Fb=n(O,"LI",{});var $Ae=s(Fb);Jie=n($Ae,"STRONG",{});var hat=s(Jie);KLo=r(hat,"flaubert"),hat.forEach(t),ZLo=r($Ae," \u2014 "),rj=n($Ae,"A",{href:!0});var pat=s(rj);e8o=r(pat,"FlaubertForMultipleChoice"),pat.forEach(t),o8o=r($Ae," (FlauBERT model)"),$Ae.forEach(t),r8o=i(O),vb=n(O,"LI",{});var IAe=s(vb);Yie=n(IAe,"STRONG",{});var _at=s(Yie);t8o=r(_at,"fnet"),_at.forEach(t),a8o=r(IAe," \u2014 "),tj=n(IAe,"A",{href:!0});var uat=s(tj);n8o=r(uat,"FNetForMultipleChoice"),uat.forEach(t),s8o=r(IAe," (FNet model)"),IAe.forEach(t),l8o=i(O),Tb=n(O,"LI",{});var qAe=s(Tb);Kie=n(qAe,"STRONG",{});var bat=s(Kie);i8o=r(bat,"funnel"),bat.forEach(t),d8o=r(qAe," \u2014 "),aj=n(qAe,"A",{href:!0});var Fat=s(aj);c8o=r(Fat,"FunnelForMultipleChoice"),Fat.forEach(t),f8o=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),m8o=i(O),Mb=n(O,"LI",{});var NAe=s(Mb);Zie=n(NAe,"STRONG",{});var vat=s(Zie);g8o=r(vat,"ibert"),vat.forEach(t),h8o=r(NAe," \u2014 "),nj=n(NAe,"A",{href:!0});var Tat=s(nj);p8o=r(Tat,"IBertForMultipleChoice"),Tat.forEach(t),_8o=r(NAe," (I-BERT model)"),NAe.forEach(t),u8o=i(O),Eb=n(O,"LI",{});var jAe=s(Eb);ede=n(jAe,"STRONG",{});var Mat=s(ede);b8o=r(Mat,"longformer"),Mat.forEach(t),F8o=r(jAe," \u2014 "),sj=n(jAe,"A",{href:!0});var Eat=s(sj);v8o=r(Eat,"LongformerForMultipleChoice"),Eat.forEach(t),T8o=r(jAe," (Longformer model)"),jAe.forEach(t),M8o=i(O),Cb=n(O,"LI",{});var DAe=s(Cb);ode=n(DAe,"STRONG",{});var Cat=s(ode);E8o=r(Cat,"megatron-bert"),Cat.forEach(t),C8o=r(DAe," \u2014 "),lj=n(DAe,"A",{href:!0});var wat=s(lj);w8o=r(wat,"MegatronBertForMultipleChoice"),wat.forEach(t),A8o=r(DAe," (MegatronBert model)"),DAe.forEach(t),y8o=i(O),wb=n(O,"LI",{});var GAe=s(wb);rde=n(GAe,"STRONG",{});var Aat=s(rde);L8o=r(Aat,"mobilebert"),Aat.forEach(t),x8o=r(GAe," \u2014 "),ij=n(GAe,"A",{href:!0});var yat=s(ij);k8o=r(yat,"MobileBertForMultipleChoice"),yat.forEach(t),S8o=r(GAe," (MobileBERT model)"),GAe.forEach(t),R8o=i(O),Ab=n(O,"LI",{});var OAe=s(Ab);tde=n(OAe,"STRONG",{});var Lat=s(tde);B8o=r(Lat,"mpnet"),Lat.forEach(t),P8o=r(OAe," \u2014 "),dj=n(OAe,"A",{href:!0});var xat=s(dj);$8o=r(xat,"MPNetForMultipleChoice"),xat.forEach(t),I8o=r(OAe," (MPNet model)"),OAe.forEach(t),q8o=i(O),yb=n(O,"LI",{});var VAe=s(yb);ade=n(VAe,"STRONG",{});var kat=s(ade);N8o=r(kat,"nystromformer"),kat.forEach(t),j8o=r(VAe," \u2014 "),cj=n(VAe,"A",{href:!0});var Sat=s(cj);D8o=r(Sat,"NystromformerForMultipleChoice"),Sat.forEach(t),G8o=r(VAe," (Nystromformer model)"),VAe.forEach(t),O8o=i(O),Lb=n(O,"LI",{});var XAe=s(Lb);nde=n(XAe,"STRONG",{});var Rat=s(nde);V8o=r(Rat,"qdqbert"),Rat.forEach(t),X8o=r(XAe," \u2014 "),fj=n(XAe,"A",{href:!0});var Bat=s(fj);z8o=r(Bat,"QDQBertForMultipleChoice"),Bat.forEach(t),Q8o=r(XAe," (QDQBert model)"),XAe.forEach(t),W8o=i(O),xb=n(O,"LI",{});var zAe=s(xb);sde=n(zAe,"STRONG",{});var Pat=s(sde);H8o=r(Pat,"rembert"),Pat.forEach(t),U8o=r(zAe," \u2014 "),mj=n(zAe,"A",{href:!0});var $at=s(mj);J8o=r($at,"RemBertForMultipleChoice"),$at.forEach(t),Y8o=r(zAe," (RemBERT model)"),zAe.forEach(t),K8o=i(O),kb=n(O,"LI",{});var QAe=s(kb);lde=n(QAe,"STRONG",{});var Iat=s(lde);Z8o=r(Iat,"roberta"),Iat.forEach(t),exo=r(QAe," \u2014 "),gj=n(QAe,"A",{href:!0});var qat=s(gj);oxo=r(qat,"RobertaForMultipleChoice"),qat.forEach(t),rxo=r(QAe," (RoBERTa model)"),QAe.forEach(t),txo=i(O),Sb=n(O,"LI",{});var WAe=s(Sb);ide=n(WAe,"STRONG",{});var Nat=s(ide);axo=r(Nat,"roformer"),Nat.forEach(t),nxo=r(WAe," \u2014 "),hj=n(WAe,"A",{href:!0});var jat=s(hj);sxo=r(jat,"RoFormerForMultipleChoice"),jat.forEach(t),lxo=r(WAe," (RoFormer model)"),WAe.forEach(t),ixo=i(O),Rb=n(O,"LI",{});var HAe=s(Rb);dde=n(HAe,"STRONG",{});var Dat=s(dde);dxo=r(Dat,"squeezebert"),Dat.forEach(t),cxo=r(HAe," \u2014 "),pj=n(HAe,"A",{href:!0});var Gat=s(pj);fxo=r(Gat,"SqueezeBertForMultipleChoice"),Gat.forEach(t),mxo=r(HAe," (SqueezeBERT model)"),HAe.forEach(t),gxo=i(O),Bb=n(O,"LI",{});var UAe=s(Bb);cde=n(UAe,"STRONG",{});var Oat=s(cde);hxo=r(Oat,"xlm"),Oat.forEach(t),pxo=r(UAe," \u2014 "),_j=n(UAe,"A",{href:!0});var Vat=s(_j);_xo=r(Vat,"XLMForMultipleChoice"),Vat.forEach(t),uxo=r(UAe," (XLM model)"),UAe.forEach(t),bxo=i(O),Pb=n(O,"LI",{});var JAe=s(Pb);fde=n(JAe,"STRONG",{});var Xat=s(fde);Fxo=r(Xat,"xlm-roberta"),Xat.forEach(t),vxo=r(JAe," \u2014 "),uj=n(JAe,"A",{href:!0});var zat=s(uj);Txo=r(zat,"XLMRobertaForMultipleChoice"),zat.forEach(t),Mxo=r(JAe," (XLM-RoBERTa model)"),JAe.forEach(t),Exo=i(O),$b=n(O,"LI",{});var YAe=s($b);mde=n(YAe,"STRONG",{});var Qat=s(mde);Cxo=r(Qat,"xlm-roberta-xl"),Qat.forEach(t),wxo=r(YAe," \u2014 "),bj=n(YAe,"A",{href:!0});var Wat=s(bj);Axo=r(Wat,"XLMRobertaXLForMultipleChoice"),Wat.forEach(t),yxo=r(YAe," (XLM-RoBERTa-XL model)"),YAe.forEach(t),Lxo=i(O),Ib=n(O,"LI",{});var KAe=s(Ib);gde=n(KAe,"STRONG",{});var Hat=s(gde);xxo=r(Hat,"xlnet"),Hat.forEach(t),kxo=r(KAe," \u2014 "),Fj=n(KAe,"A",{href:!0});var Uat=s(Fj);Sxo=r(Uat,"XLNetForMultipleChoice"),Uat.forEach(t),Rxo=r(KAe," (XLNet model)"),KAe.forEach(t),Bxo=i(O),qb=n(O,"LI",{});var ZAe=s(qb);hde=n(ZAe,"STRONG",{});var Jat=s(hde);Pxo=r(Jat,"yoso"),Jat.forEach(t),$xo=r(ZAe," \u2014 "),vj=n(ZAe,"A",{href:!0});var Yat=s(vj);Ixo=r(Yat,"YosoForMultipleChoice"),Yat.forEach(t),qxo=r(ZAe," (YOSO model)"),ZAe.forEach(t),O.forEach(t),Nxo=i(Qt),Nb=n(Qt,"P",{});var e0e=s(Nb);jxo=r(e0e,"The model is set in evaluation mode by default using "),pde=n(e0e,"CODE",{});var Kat=s(pde);Dxo=r(Kat,"model.eval()"),Kat.forEach(t),Gxo=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_de=n(e0e,"CODE",{});var Zat=s(_de);Oxo=r(Zat,"model.train()"),Zat.forEach(t),e0e.forEach(t),Vxo=i(Qt),ude=n(Qt,"P",{});var ent=s(ude);Xxo=r(ent,"Examples:"),ent.forEach(t),zxo=i(Qt),m(cC.$$.fragment,Qt),Qt.forEach(t),ll.forEach(t),NBe=i(c),vd=n(c,"H2",{class:!0});var W$e=s(vd);jb=n(W$e,"A",{id:!0,class:!0,href:!0});var ont=s(jb);bde=n(ont,"SPAN",{});var rnt=s(bde);m(fC.$$.fragment,rnt),rnt.forEach(t),ont.forEach(t),Qxo=i(W$e),Fde=n(W$e,"SPAN",{});var tnt=s(Fde);Wxo=r(tnt,"AutoModelForNextSentencePrediction"),tnt.forEach(t),W$e.forEach(t),jBe=i(c),tr=n(c,"DIV",{class:!0});var dl=s(tr);m(mC.$$.fragment,dl),Hxo=i(dl),Td=n(dl,"P",{});var eJ=s(Td);Uxo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tj=n(eJ,"A",{href:!0});var ant=s(Tj);Jxo=r(ant,"from_pretrained()"),ant.forEach(t),Yxo=r(eJ," class method or the "),Mj=n(eJ,"A",{href:!0});var nnt=s(Mj);Kxo=r(nnt,"from_config()"),nnt.forEach(t),Zxo=r(eJ,` class
method.`),eJ.forEach(t),eko=i(dl),gC=n(dl,"P",{});var H$e=s(gC);oko=r(H$e,"This class cannot be instantiated directly using "),vde=n(H$e,"CODE",{});var snt=s(vde);rko=r(snt,"__init__()"),snt.forEach(t),tko=r(H$e," (throws an error)."),H$e.forEach(t),ako=i(dl),Yr=n(dl,"DIV",{class:!0});var cl=s(Yr);m(hC.$$.fragment,cl),nko=i(cl),Tde=n(cl,"P",{});var lnt=s(Tde);sko=r(lnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lnt.forEach(t),lko=i(cl),Md=n(cl,"P",{});var oJ=s(Md);iko=r(oJ,`Note:
Loading a model from its configuration file does `),Mde=n(oJ,"STRONG",{});var int=s(Mde);dko=r(int,"not"),int.forEach(t),cko=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ej=n(oJ,"A",{href:!0});var dnt=s(Ej);fko=r(dnt,"from_pretrained()"),dnt.forEach(t),mko=r(oJ," to load the model weights."),oJ.forEach(t),gko=i(cl),Ede=n(cl,"P",{});var cnt=s(Ede);hko=r(cnt,"Examples:"),cnt.forEach(t),pko=i(cl),m(pC.$$.fragment,cl),cl.forEach(t),_ko=i(dl),ze=n(dl,"DIV",{class:!0});var Wt=s(ze);m(_C.$$.fragment,Wt),uko=i(Wt),Cde=n(Wt,"P",{});var fnt=s(Cde);bko=r(fnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fnt.forEach(t),Fko=i(Wt),Ya=n(Wt,"P",{});var QE=s(Ya);vko=r(QE,"The model class to instantiate is selected based on the "),wde=n(QE,"CODE",{});var mnt=s(wde);Tko=r(mnt,"model_type"),mnt.forEach(t),Mko=r(QE,` property of the config object (either
passed as an argument or loaded from `),Ade=n(QE,"CODE",{});var gnt=s(Ade);Eko=r(gnt,"pretrained_model_name_or_path"),gnt.forEach(t),Cko=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yde=n(QE,"CODE",{});var hnt=s(yde);wko=r(hnt,"pretrained_model_name_or_path"),hnt.forEach(t),Ako=r(QE,":"),QE.forEach(t),yko=i(Wt),da=n(Wt,"UL",{});var fl=s(da);Db=n(fl,"LI",{});var o0e=s(Db);Lde=n(o0e,"STRONG",{});var pnt=s(Lde);Lko=r(pnt,"bert"),pnt.forEach(t),xko=r(o0e," \u2014 "),Cj=n(o0e,"A",{href:!0});var _nt=s(Cj);kko=r(_nt,"BertForNextSentencePrediction"),_nt.forEach(t),Sko=r(o0e," (BERT model)"),o0e.forEach(t),Rko=i(fl),Gb=n(fl,"LI",{});var r0e=s(Gb);xde=n(r0e,"STRONG",{});var unt=s(xde);Bko=r(unt,"fnet"),unt.forEach(t),Pko=r(r0e," \u2014 "),wj=n(r0e,"A",{href:!0});var bnt=s(wj);$ko=r(bnt,"FNetForNextSentencePrediction"),bnt.forEach(t),Iko=r(r0e," (FNet model)"),r0e.forEach(t),qko=i(fl),Ob=n(fl,"LI",{});var t0e=s(Ob);kde=n(t0e,"STRONG",{});var Fnt=s(kde);Nko=r(Fnt,"megatron-bert"),Fnt.forEach(t),jko=r(t0e," \u2014 "),Aj=n(t0e,"A",{href:!0});var vnt=s(Aj);Dko=r(vnt,"MegatronBertForNextSentencePrediction"),vnt.forEach(t),Gko=r(t0e," (MegatronBert model)"),t0e.forEach(t),Oko=i(fl),Vb=n(fl,"LI",{});var a0e=s(Vb);Sde=n(a0e,"STRONG",{});var Tnt=s(Sde);Vko=r(Tnt,"mobilebert"),Tnt.forEach(t),Xko=r(a0e," \u2014 "),yj=n(a0e,"A",{href:!0});var Mnt=s(yj);zko=r(Mnt,"MobileBertForNextSentencePrediction"),Mnt.forEach(t),Qko=r(a0e," (MobileBERT model)"),a0e.forEach(t),Wko=i(fl),Xb=n(fl,"LI",{});var n0e=s(Xb);Rde=n(n0e,"STRONG",{});var Ent=s(Rde);Hko=r(Ent,"qdqbert"),Ent.forEach(t),Uko=r(n0e," \u2014 "),Lj=n(n0e,"A",{href:!0});var Cnt=s(Lj);Jko=r(Cnt,"QDQBertForNextSentencePrediction"),Cnt.forEach(t),Yko=r(n0e," (QDQBert model)"),n0e.forEach(t),fl.forEach(t),Kko=i(Wt),zb=n(Wt,"P",{});var s0e=s(zb);Zko=r(s0e,"The model is set in evaluation mode by default using "),Bde=n(s0e,"CODE",{});var wnt=s(Bde);eSo=r(wnt,"model.eval()"),wnt.forEach(t),oSo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pde=n(s0e,"CODE",{});var Ant=s(Pde);rSo=r(Ant,"model.train()"),Ant.forEach(t),s0e.forEach(t),tSo=i(Wt),$de=n(Wt,"P",{});var ynt=s($de);aSo=r(ynt,"Examples:"),ynt.forEach(t),nSo=i(Wt),m(uC.$$.fragment,Wt),Wt.forEach(t),dl.forEach(t),DBe=i(c),Ed=n(c,"H2",{class:!0});var U$e=s(Ed);Qb=n(U$e,"A",{id:!0,class:!0,href:!0});var Lnt=s(Qb);Ide=n(Lnt,"SPAN",{});var xnt=s(Ide);m(bC.$$.fragment,xnt),xnt.forEach(t),Lnt.forEach(t),sSo=i(U$e),qde=n(U$e,"SPAN",{});var knt=s(qde);lSo=r(knt,"AutoModelForTokenClassification"),knt.forEach(t),U$e.forEach(t),GBe=i(c),ar=n(c,"DIV",{class:!0});var ml=s(ar);m(FC.$$.fragment,ml),iSo=i(ml),Cd=n(ml,"P",{});var rJ=s(Cd);dSo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),xj=n(rJ,"A",{href:!0});var Snt=s(xj);cSo=r(Snt,"from_pretrained()"),Snt.forEach(t),fSo=r(rJ," class method or the "),kj=n(rJ,"A",{href:!0});var Rnt=s(kj);mSo=r(Rnt,"from_config()"),Rnt.forEach(t),gSo=r(rJ,` class
method.`),rJ.forEach(t),hSo=i(ml),vC=n(ml,"P",{});var J$e=s(vC);pSo=r(J$e,"This class cannot be instantiated directly using "),Nde=n(J$e,"CODE",{});var Bnt=s(Nde);_So=r(Bnt,"__init__()"),Bnt.forEach(t),uSo=r(J$e," (throws an error)."),J$e.forEach(t),bSo=i(ml),Kr=n(ml,"DIV",{class:!0});var gl=s(Kr);m(TC.$$.fragment,gl),FSo=i(gl),jde=n(gl,"P",{});var Pnt=s(jde);vSo=r(Pnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pnt.forEach(t),TSo=i(gl),wd=n(gl,"P",{});var tJ=s(wd);MSo=r(tJ,`Note:
Loading a model from its configuration file does `),Dde=n(tJ,"STRONG",{});var $nt=s(Dde);ESo=r($nt,"not"),$nt.forEach(t),CSo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sj=n(tJ,"A",{href:!0});var Int=s(Sj);wSo=r(Int,"from_pretrained()"),Int.forEach(t),ASo=r(tJ," to load the model weights."),tJ.forEach(t),ySo=i(gl),Gde=n(gl,"P",{});var qnt=s(Gde);LSo=r(qnt,"Examples:"),qnt.forEach(t),xSo=i(gl),m(MC.$$.fragment,gl),gl.forEach(t),kSo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ht=s(Qe);m(EC.$$.fragment,Ht),SSo=i(Ht),Ode=n(Ht,"P",{});var Nnt=s(Ode);RSo=r(Nnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Nnt.forEach(t),BSo=i(Ht),Ka=n(Ht,"P",{});var WE=s(Ka);PSo=r(WE,"The model class to instantiate is selected based on the "),Vde=n(WE,"CODE",{});var jnt=s(Vde);$So=r(jnt,"model_type"),jnt.forEach(t),ISo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Xde=n(WE,"CODE",{});var Dnt=s(Xde);qSo=r(Dnt,"pretrained_model_name_or_path"),Dnt.forEach(t),NSo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zde=n(WE,"CODE",{});var Gnt=s(zde);jSo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),DSo=r(WE,":"),WE.forEach(t),GSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);Wb=n(D,"LI",{});var l0e=s(Wb);Qde=n(l0e,"STRONG",{});var Ont=s(Qde);OSo=r(Ont,"albert"),Ont.forEach(t),VSo=r(l0e," \u2014 "),Rj=n(l0e,"A",{href:!0});var Vnt=s(Rj);XSo=r(Vnt,"AlbertForTokenClassification"),Vnt.forEach(t),zSo=r(l0e," (ALBERT model)"),l0e.forEach(t),QSo=i(D),Hb=n(D,"LI",{});var i0e=s(Hb);Wde=n(i0e,"STRONG",{});var Xnt=s(Wde);WSo=r(Xnt,"bert"),Xnt.forEach(t),HSo=r(i0e," \u2014 "),Bj=n(i0e,"A",{href:!0});var znt=s(Bj);USo=r(znt,"BertForTokenClassification"),znt.forEach(t),JSo=r(i0e," (BERT model)"),i0e.forEach(t),YSo=i(D),Ub=n(D,"LI",{});var d0e=s(Ub);Hde=n(d0e,"STRONG",{});var Qnt=s(Hde);KSo=r(Qnt,"big_bird"),Qnt.forEach(t),ZSo=r(d0e," \u2014 "),Pj=n(d0e,"A",{href:!0});var Wnt=s(Pj);eRo=r(Wnt,"BigBirdForTokenClassification"),Wnt.forEach(t),oRo=r(d0e," (BigBird model)"),d0e.forEach(t),rRo=i(D),Jb=n(D,"LI",{});var c0e=s(Jb);Ude=n(c0e,"STRONG",{});var Hnt=s(Ude);tRo=r(Hnt,"camembert"),Hnt.forEach(t),aRo=r(c0e," \u2014 "),$j=n(c0e,"A",{href:!0});var Unt=s($j);nRo=r(Unt,"CamembertForTokenClassification"),Unt.forEach(t),sRo=r(c0e," (CamemBERT model)"),c0e.forEach(t),lRo=i(D),Yb=n(D,"LI",{});var f0e=s(Yb);Jde=n(f0e,"STRONG",{});var Jnt=s(Jde);iRo=r(Jnt,"canine"),Jnt.forEach(t),dRo=r(f0e," \u2014 "),Ij=n(f0e,"A",{href:!0});var Ynt=s(Ij);cRo=r(Ynt,"CanineForTokenClassification"),Ynt.forEach(t),fRo=r(f0e," (Canine model)"),f0e.forEach(t),mRo=i(D),Kb=n(D,"LI",{});var m0e=s(Kb);Yde=n(m0e,"STRONG",{});var Knt=s(Yde);gRo=r(Knt,"convbert"),Knt.forEach(t),hRo=r(m0e," \u2014 "),qj=n(m0e,"A",{href:!0});var Znt=s(qj);pRo=r(Znt,"ConvBertForTokenClassification"),Znt.forEach(t),_Ro=r(m0e," (ConvBERT model)"),m0e.forEach(t),uRo=i(D),Zb=n(D,"LI",{});var g0e=s(Zb);Kde=n(g0e,"STRONG",{});var est=s(Kde);bRo=r(est,"data2vec-text"),est.forEach(t),FRo=r(g0e," \u2014 "),Nj=n(g0e,"A",{href:!0});var ost=s(Nj);vRo=r(ost,"Data2VecTextForTokenClassification"),ost.forEach(t),TRo=r(g0e," (Data2VecText model)"),g0e.forEach(t),MRo=i(D),e6=n(D,"LI",{});var h0e=s(e6);Zde=n(h0e,"STRONG",{});var rst=s(Zde);ERo=r(rst,"deberta"),rst.forEach(t),CRo=r(h0e," \u2014 "),jj=n(h0e,"A",{href:!0});var tst=s(jj);wRo=r(tst,"DebertaForTokenClassification"),tst.forEach(t),ARo=r(h0e," (DeBERTa model)"),h0e.forEach(t),yRo=i(D),o6=n(D,"LI",{});var p0e=s(o6);ece=n(p0e,"STRONG",{});var ast=s(ece);LRo=r(ast,"deberta-v2"),ast.forEach(t),xRo=r(p0e," \u2014 "),Dj=n(p0e,"A",{href:!0});var nst=s(Dj);kRo=r(nst,"DebertaV2ForTokenClassification"),nst.forEach(t),SRo=r(p0e," (DeBERTa-v2 model)"),p0e.forEach(t),RRo=i(D),r6=n(D,"LI",{});var _0e=s(r6);oce=n(_0e,"STRONG",{});var sst=s(oce);BRo=r(sst,"distilbert"),sst.forEach(t),PRo=r(_0e," \u2014 "),Gj=n(_0e,"A",{href:!0});var lst=s(Gj);$Ro=r(lst,"DistilBertForTokenClassification"),lst.forEach(t),IRo=r(_0e," (DistilBERT model)"),_0e.forEach(t),qRo=i(D),t6=n(D,"LI",{});var u0e=s(t6);rce=n(u0e,"STRONG",{});var ist=s(rce);NRo=r(ist,"electra"),ist.forEach(t),jRo=r(u0e," \u2014 "),Oj=n(u0e,"A",{href:!0});var dst=s(Oj);DRo=r(dst,"ElectraForTokenClassification"),dst.forEach(t),GRo=r(u0e," (ELECTRA model)"),u0e.forEach(t),ORo=i(D),a6=n(D,"LI",{});var b0e=s(a6);tce=n(b0e,"STRONG",{});var cst=s(tce);VRo=r(cst,"flaubert"),cst.forEach(t),XRo=r(b0e," \u2014 "),Vj=n(b0e,"A",{href:!0});var fst=s(Vj);zRo=r(fst,"FlaubertForTokenClassification"),fst.forEach(t),QRo=r(b0e," (FlauBERT model)"),b0e.forEach(t),WRo=i(D),n6=n(D,"LI",{});var F0e=s(n6);ace=n(F0e,"STRONG",{});var mst=s(ace);HRo=r(mst,"fnet"),mst.forEach(t),URo=r(F0e," \u2014 "),Xj=n(F0e,"A",{href:!0});var gst=s(Xj);JRo=r(gst,"FNetForTokenClassification"),gst.forEach(t),YRo=r(F0e," (FNet model)"),F0e.forEach(t),KRo=i(D),s6=n(D,"LI",{});var v0e=s(s6);nce=n(v0e,"STRONG",{});var hst=s(nce);ZRo=r(hst,"funnel"),hst.forEach(t),eBo=r(v0e," \u2014 "),zj=n(v0e,"A",{href:!0});var pst=s(zj);oBo=r(pst,"FunnelForTokenClassification"),pst.forEach(t),rBo=r(v0e," (Funnel Transformer model)"),v0e.forEach(t),tBo=i(D),l6=n(D,"LI",{});var T0e=s(l6);sce=n(T0e,"STRONG",{});var _st=s(sce);aBo=r(_st,"gpt2"),_st.forEach(t),nBo=r(T0e," \u2014 "),Qj=n(T0e,"A",{href:!0});var ust=s(Qj);sBo=r(ust,"GPT2ForTokenClassification"),ust.forEach(t),lBo=r(T0e," (OpenAI GPT-2 model)"),T0e.forEach(t),iBo=i(D),i6=n(D,"LI",{});var M0e=s(i6);lce=n(M0e,"STRONG",{});var bst=s(lce);dBo=r(bst,"ibert"),bst.forEach(t),cBo=r(M0e," \u2014 "),Wj=n(M0e,"A",{href:!0});var Fst=s(Wj);fBo=r(Fst,"IBertForTokenClassification"),Fst.forEach(t),mBo=r(M0e," (I-BERT model)"),M0e.forEach(t),gBo=i(D),d6=n(D,"LI",{});var E0e=s(d6);ice=n(E0e,"STRONG",{});var vst=s(ice);hBo=r(vst,"layoutlm"),vst.forEach(t),pBo=r(E0e," \u2014 "),Hj=n(E0e,"A",{href:!0});var Tst=s(Hj);_Bo=r(Tst,"LayoutLMForTokenClassification"),Tst.forEach(t),uBo=r(E0e," (LayoutLM model)"),E0e.forEach(t),bBo=i(D),c6=n(D,"LI",{});var C0e=s(c6);dce=n(C0e,"STRONG",{});var Mst=s(dce);FBo=r(Mst,"layoutlmv2"),Mst.forEach(t),vBo=r(C0e," \u2014 "),Uj=n(C0e,"A",{href:!0});var Est=s(Uj);TBo=r(Est,"LayoutLMv2ForTokenClassification"),Est.forEach(t),MBo=r(C0e," (LayoutLMv2 model)"),C0e.forEach(t),EBo=i(D),f6=n(D,"LI",{});var w0e=s(f6);cce=n(w0e,"STRONG",{});var Cst=s(cce);CBo=r(Cst,"longformer"),Cst.forEach(t),wBo=r(w0e," \u2014 "),Jj=n(w0e,"A",{href:!0});var wst=s(Jj);ABo=r(wst,"LongformerForTokenClassification"),wst.forEach(t),yBo=r(w0e," (Longformer model)"),w0e.forEach(t),LBo=i(D),m6=n(D,"LI",{});var A0e=s(m6);fce=n(A0e,"STRONG",{});var Ast=s(fce);xBo=r(Ast,"megatron-bert"),Ast.forEach(t),kBo=r(A0e," \u2014 "),Yj=n(A0e,"A",{href:!0});var yst=s(Yj);SBo=r(yst,"MegatronBertForTokenClassification"),yst.forEach(t),RBo=r(A0e," (MegatronBert model)"),A0e.forEach(t),BBo=i(D),g6=n(D,"LI",{});var y0e=s(g6);mce=n(y0e,"STRONG",{});var Lst=s(mce);PBo=r(Lst,"mobilebert"),Lst.forEach(t),$Bo=r(y0e," \u2014 "),Kj=n(y0e,"A",{href:!0});var xst=s(Kj);IBo=r(xst,"MobileBertForTokenClassification"),xst.forEach(t),qBo=r(y0e," (MobileBERT model)"),y0e.forEach(t),NBo=i(D),h6=n(D,"LI",{});var L0e=s(h6);gce=n(L0e,"STRONG",{});var kst=s(gce);jBo=r(kst,"mpnet"),kst.forEach(t),DBo=r(L0e," \u2014 "),Zj=n(L0e,"A",{href:!0});var Sst=s(Zj);GBo=r(Sst,"MPNetForTokenClassification"),Sst.forEach(t),OBo=r(L0e," (MPNet model)"),L0e.forEach(t),VBo=i(D),p6=n(D,"LI",{});var x0e=s(p6);hce=n(x0e,"STRONG",{});var Rst=s(hce);XBo=r(Rst,"nystromformer"),Rst.forEach(t),zBo=r(x0e," \u2014 "),eD=n(x0e,"A",{href:!0});var Bst=s(eD);QBo=r(Bst,"NystromformerForTokenClassification"),Bst.forEach(t),WBo=r(x0e," (Nystromformer model)"),x0e.forEach(t),HBo=i(D),_6=n(D,"LI",{});var k0e=s(_6);pce=n(k0e,"STRONG",{});var Pst=s(pce);UBo=r(Pst,"qdqbert"),Pst.forEach(t),JBo=r(k0e," \u2014 "),oD=n(k0e,"A",{href:!0});var $st=s(oD);YBo=r($st,"QDQBertForTokenClassification"),$st.forEach(t),KBo=r(k0e," (QDQBert model)"),k0e.forEach(t),ZBo=i(D),u6=n(D,"LI",{});var S0e=s(u6);_ce=n(S0e,"STRONG",{});var Ist=s(_ce);ePo=r(Ist,"rembert"),Ist.forEach(t),oPo=r(S0e," \u2014 "),rD=n(S0e,"A",{href:!0});var qst=s(rD);rPo=r(qst,"RemBertForTokenClassification"),qst.forEach(t),tPo=r(S0e," (RemBERT model)"),S0e.forEach(t),aPo=i(D),b6=n(D,"LI",{});var R0e=s(b6);uce=n(R0e,"STRONG",{});var Nst=s(uce);nPo=r(Nst,"roberta"),Nst.forEach(t),sPo=r(R0e," \u2014 "),tD=n(R0e,"A",{href:!0});var jst=s(tD);lPo=r(jst,"RobertaForTokenClassification"),jst.forEach(t),iPo=r(R0e," (RoBERTa model)"),R0e.forEach(t),dPo=i(D),F6=n(D,"LI",{});var B0e=s(F6);bce=n(B0e,"STRONG",{});var Dst=s(bce);cPo=r(Dst,"roformer"),Dst.forEach(t),fPo=r(B0e," \u2014 "),aD=n(B0e,"A",{href:!0});var Gst=s(aD);mPo=r(Gst,"RoFormerForTokenClassification"),Gst.forEach(t),gPo=r(B0e," (RoFormer model)"),B0e.forEach(t),hPo=i(D),v6=n(D,"LI",{});var P0e=s(v6);Fce=n(P0e,"STRONG",{});var Ost=s(Fce);pPo=r(Ost,"squeezebert"),Ost.forEach(t),_Po=r(P0e," \u2014 "),nD=n(P0e,"A",{href:!0});var Vst=s(nD);uPo=r(Vst,"SqueezeBertForTokenClassification"),Vst.forEach(t),bPo=r(P0e," (SqueezeBERT model)"),P0e.forEach(t),FPo=i(D),T6=n(D,"LI",{});var $0e=s(T6);vce=n($0e,"STRONG",{});var Xst=s(vce);vPo=r(Xst,"xlm"),Xst.forEach(t),TPo=r($0e," \u2014 "),sD=n($0e,"A",{href:!0});var zst=s(sD);MPo=r(zst,"XLMForTokenClassification"),zst.forEach(t),EPo=r($0e," (XLM model)"),$0e.forEach(t),CPo=i(D),M6=n(D,"LI",{});var I0e=s(M6);Tce=n(I0e,"STRONG",{});var Qst=s(Tce);wPo=r(Qst,"xlm-roberta"),Qst.forEach(t),APo=r(I0e," \u2014 "),lD=n(I0e,"A",{href:!0});var Wst=s(lD);yPo=r(Wst,"XLMRobertaForTokenClassification"),Wst.forEach(t),LPo=r(I0e," (XLM-RoBERTa model)"),I0e.forEach(t),xPo=i(D),E6=n(D,"LI",{});var q0e=s(E6);Mce=n(q0e,"STRONG",{});var Hst=s(Mce);kPo=r(Hst,"xlm-roberta-xl"),Hst.forEach(t),SPo=r(q0e," \u2014 "),iD=n(q0e,"A",{href:!0});var Ust=s(iD);RPo=r(Ust,"XLMRobertaXLForTokenClassification"),Ust.forEach(t),BPo=r(q0e," (XLM-RoBERTa-XL model)"),q0e.forEach(t),PPo=i(D),C6=n(D,"LI",{});var N0e=s(C6);Ece=n(N0e,"STRONG",{});var Jst=s(Ece);$Po=r(Jst,"xlnet"),Jst.forEach(t),IPo=r(N0e," \u2014 "),dD=n(N0e,"A",{href:!0});var Yst=s(dD);qPo=r(Yst,"XLNetForTokenClassification"),Yst.forEach(t),NPo=r(N0e," (XLNet model)"),N0e.forEach(t),jPo=i(D),w6=n(D,"LI",{});var j0e=s(w6);Cce=n(j0e,"STRONG",{});var Kst=s(Cce);DPo=r(Kst,"yoso"),Kst.forEach(t),GPo=r(j0e," \u2014 "),cD=n(j0e,"A",{href:!0});var Zst=s(cD);OPo=r(Zst,"YosoForTokenClassification"),Zst.forEach(t),VPo=r(j0e," (YOSO model)"),j0e.forEach(t),D.forEach(t),XPo=i(Ht),A6=n(Ht,"P",{});var D0e=s(A6);zPo=r(D0e,"The model is set in evaluation mode by default using "),wce=n(D0e,"CODE",{});var elt=s(wce);QPo=r(elt,"model.eval()"),elt.forEach(t),WPo=r(D0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ace=n(D0e,"CODE",{});var olt=s(Ace);HPo=r(olt,"model.train()"),olt.forEach(t),D0e.forEach(t),UPo=i(Ht),yce=n(Ht,"P",{});var rlt=s(yce);JPo=r(rlt,"Examples:"),rlt.forEach(t),YPo=i(Ht),m(CC.$$.fragment,Ht),Ht.forEach(t),ml.forEach(t),OBe=i(c),Ad=n(c,"H2",{class:!0});var Y$e=s(Ad);y6=n(Y$e,"A",{id:!0,class:!0,href:!0});var tlt=s(y6);Lce=n(tlt,"SPAN",{});var alt=s(Lce);m(wC.$$.fragment,alt),alt.forEach(t),tlt.forEach(t),KPo=i(Y$e),xce=n(Y$e,"SPAN",{});var nlt=s(xce);ZPo=r(nlt,"AutoModelForQuestionAnswering"),nlt.forEach(t),Y$e.forEach(t),VBe=i(c),nr=n(c,"DIV",{class:!0});var hl=s(nr);m(AC.$$.fragment,hl),e$o=i(hl),yd=n(hl,"P",{});var aJ=s(yd);o$o=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),fD=n(aJ,"A",{href:!0});var slt=s(fD);r$o=r(slt,"from_pretrained()"),slt.forEach(t),t$o=r(aJ," class method or the "),mD=n(aJ,"A",{href:!0});var llt=s(mD);a$o=r(llt,"from_config()"),llt.forEach(t),n$o=r(aJ,` class
method.`),aJ.forEach(t),s$o=i(hl),yC=n(hl,"P",{});var K$e=s(yC);l$o=r(K$e,"This class cannot be instantiated directly using "),kce=n(K$e,"CODE",{});var ilt=s(kce);i$o=r(ilt,"__init__()"),ilt.forEach(t),d$o=r(K$e," (throws an error)."),K$e.forEach(t),c$o=i(hl),Zr=n(hl,"DIV",{class:!0});var pl=s(Zr);m(LC.$$.fragment,pl),f$o=i(pl),Sce=n(pl,"P",{});var dlt=s(Sce);m$o=r(dlt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dlt.forEach(t),g$o=i(pl),Ld=n(pl,"P",{});var nJ=s(Ld);h$o=r(nJ,`Note:
Loading a model from its configuration file does `),Rce=n(nJ,"STRONG",{});var clt=s(Rce);p$o=r(clt,"not"),clt.forEach(t),_$o=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gD=n(nJ,"A",{href:!0});var flt=s(gD);u$o=r(flt,"from_pretrained()"),flt.forEach(t),b$o=r(nJ," to load the model weights."),nJ.forEach(t),F$o=i(pl),Bce=n(pl,"P",{});var mlt=s(Bce);v$o=r(mlt,"Examples:"),mlt.forEach(t),T$o=i(pl),m(xC.$$.fragment,pl),pl.forEach(t),M$o=i(hl),We=n(hl,"DIV",{class:!0});var Ut=s(We);m(kC.$$.fragment,Ut),E$o=i(Ut),Pce=n(Ut,"P",{});var glt=s(Pce);C$o=r(glt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),glt.forEach(t),w$o=i(Ut),Za=n(Ut,"P",{});var HE=s(Za);A$o=r(HE,"The model class to instantiate is selected based on the "),$ce=n(HE,"CODE",{});var hlt=s($ce);y$o=r(hlt,"model_type"),hlt.forEach(t),L$o=r(HE,` property of the config object (either
passed as an argument or loaded from `),Ice=n(HE,"CODE",{});var plt=s(Ice);x$o=r(plt,"pretrained_model_name_or_path"),plt.forEach(t),k$o=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qce=n(HE,"CODE",{});var _lt=s(qce);S$o=r(_lt,"pretrained_model_name_or_path"),_lt.forEach(t),R$o=r(HE,":"),HE.forEach(t),B$o=i(Ut),R=n(Ut,"UL",{});var P=s(R);L6=n(P,"LI",{});var G0e=s(L6);Nce=n(G0e,"STRONG",{});var ult=s(Nce);P$o=r(ult,"albert"),ult.forEach(t),$$o=r(G0e," \u2014 "),hD=n(G0e,"A",{href:!0});var blt=s(hD);I$o=r(blt,"AlbertForQuestionAnswering"),blt.forEach(t),q$o=r(G0e," (ALBERT model)"),G0e.forEach(t),N$o=i(P),x6=n(P,"LI",{});var O0e=s(x6);jce=n(O0e,"STRONG",{});var Flt=s(jce);j$o=r(Flt,"bart"),Flt.forEach(t),D$o=r(O0e," \u2014 "),pD=n(O0e,"A",{href:!0});var vlt=s(pD);G$o=r(vlt,"BartForQuestionAnswering"),vlt.forEach(t),O$o=r(O0e," (BART model)"),O0e.forEach(t),V$o=i(P),k6=n(P,"LI",{});var V0e=s(k6);Dce=n(V0e,"STRONG",{});var Tlt=s(Dce);X$o=r(Tlt,"bert"),Tlt.forEach(t),z$o=r(V0e," \u2014 "),_D=n(V0e,"A",{href:!0});var Mlt=s(_D);Q$o=r(Mlt,"BertForQuestionAnswering"),Mlt.forEach(t),W$o=r(V0e," (BERT model)"),V0e.forEach(t),H$o=i(P),S6=n(P,"LI",{});var X0e=s(S6);Gce=n(X0e,"STRONG",{});var Elt=s(Gce);U$o=r(Elt,"big_bird"),Elt.forEach(t),J$o=r(X0e," \u2014 "),uD=n(X0e,"A",{href:!0});var Clt=s(uD);Y$o=r(Clt,"BigBirdForQuestionAnswering"),Clt.forEach(t),K$o=r(X0e," (BigBird model)"),X0e.forEach(t),Z$o=i(P),R6=n(P,"LI",{});var z0e=s(R6);Oce=n(z0e,"STRONG",{});var wlt=s(Oce);eIo=r(wlt,"bigbird_pegasus"),wlt.forEach(t),oIo=r(z0e," \u2014 "),bD=n(z0e,"A",{href:!0});var Alt=s(bD);rIo=r(Alt,"BigBirdPegasusForQuestionAnswering"),Alt.forEach(t),tIo=r(z0e," (BigBirdPegasus model)"),z0e.forEach(t),aIo=i(P),B6=n(P,"LI",{});var Q0e=s(B6);Vce=n(Q0e,"STRONG",{});var ylt=s(Vce);nIo=r(ylt,"camembert"),ylt.forEach(t),sIo=r(Q0e," \u2014 "),FD=n(Q0e,"A",{href:!0});var Llt=s(FD);lIo=r(Llt,"CamembertForQuestionAnswering"),Llt.forEach(t),iIo=r(Q0e," (CamemBERT model)"),Q0e.forEach(t),dIo=i(P),P6=n(P,"LI",{});var W0e=s(P6);Xce=n(W0e,"STRONG",{});var xlt=s(Xce);cIo=r(xlt,"canine"),xlt.forEach(t),fIo=r(W0e," \u2014 "),vD=n(W0e,"A",{href:!0});var klt=s(vD);mIo=r(klt,"CanineForQuestionAnswering"),klt.forEach(t),gIo=r(W0e," (Canine model)"),W0e.forEach(t),hIo=i(P),$6=n(P,"LI",{});var H0e=s($6);zce=n(H0e,"STRONG",{});var Slt=s(zce);pIo=r(Slt,"convbert"),Slt.forEach(t),_Io=r(H0e," \u2014 "),TD=n(H0e,"A",{href:!0});var Rlt=s(TD);uIo=r(Rlt,"ConvBertForQuestionAnswering"),Rlt.forEach(t),bIo=r(H0e," (ConvBERT model)"),H0e.forEach(t),FIo=i(P),I6=n(P,"LI",{});var U0e=s(I6);Qce=n(U0e,"STRONG",{});var Blt=s(Qce);vIo=r(Blt,"data2vec-text"),Blt.forEach(t),TIo=r(U0e," \u2014 "),MD=n(U0e,"A",{href:!0});var Plt=s(MD);MIo=r(Plt,"Data2VecTextForQuestionAnswering"),Plt.forEach(t),EIo=r(U0e," (Data2VecText model)"),U0e.forEach(t),CIo=i(P),q6=n(P,"LI",{});var J0e=s(q6);Wce=n(J0e,"STRONG",{});var $lt=s(Wce);wIo=r($lt,"deberta"),$lt.forEach(t),AIo=r(J0e," \u2014 "),ED=n(J0e,"A",{href:!0});var Ilt=s(ED);yIo=r(Ilt,"DebertaForQuestionAnswering"),Ilt.forEach(t),LIo=r(J0e," (DeBERTa model)"),J0e.forEach(t),xIo=i(P),N6=n(P,"LI",{});var Y0e=s(N6);Hce=n(Y0e,"STRONG",{});var qlt=s(Hce);kIo=r(qlt,"deberta-v2"),qlt.forEach(t),SIo=r(Y0e," \u2014 "),CD=n(Y0e,"A",{href:!0});var Nlt=s(CD);RIo=r(Nlt,"DebertaV2ForQuestionAnswering"),Nlt.forEach(t),BIo=r(Y0e," (DeBERTa-v2 model)"),Y0e.forEach(t),PIo=i(P),j6=n(P,"LI",{});var K0e=s(j6);Uce=n(K0e,"STRONG",{});var jlt=s(Uce);$Io=r(jlt,"distilbert"),jlt.forEach(t),IIo=r(K0e," \u2014 "),wD=n(K0e,"A",{href:!0});var Dlt=s(wD);qIo=r(Dlt,"DistilBertForQuestionAnswering"),Dlt.forEach(t),NIo=r(K0e," (DistilBERT model)"),K0e.forEach(t),jIo=i(P),D6=n(P,"LI",{});var Z0e=s(D6);Jce=n(Z0e,"STRONG",{});var Glt=s(Jce);DIo=r(Glt,"electra"),Glt.forEach(t),GIo=r(Z0e," \u2014 "),AD=n(Z0e,"A",{href:!0});var Olt=s(AD);OIo=r(Olt,"ElectraForQuestionAnswering"),Olt.forEach(t),VIo=r(Z0e," (ELECTRA model)"),Z0e.forEach(t),XIo=i(P),G6=n(P,"LI",{});var eye=s(G6);Yce=n(eye,"STRONG",{});var Vlt=s(Yce);zIo=r(Vlt,"flaubert"),Vlt.forEach(t),QIo=r(eye," \u2014 "),yD=n(eye,"A",{href:!0});var Xlt=s(yD);WIo=r(Xlt,"FlaubertForQuestionAnsweringSimple"),Xlt.forEach(t),HIo=r(eye," (FlauBERT model)"),eye.forEach(t),UIo=i(P),O6=n(P,"LI",{});var oye=s(O6);Kce=n(oye,"STRONG",{});var zlt=s(Kce);JIo=r(zlt,"fnet"),zlt.forEach(t),YIo=r(oye," \u2014 "),LD=n(oye,"A",{href:!0});var Qlt=s(LD);KIo=r(Qlt,"FNetForQuestionAnswering"),Qlt.forEach(t),ZIo=r(oye," (FNet model)"),oye.forEach(t),eqo=i(P),V6=n(P,"LI",{});var rye=s(V6);Zce=n(rye,"STRONG",{});var Wlt=s(Zce);oqo=r(Wlt,"funnel"),Wlt.forEach(t),rqo=r(rye," \u2014 "),xD=n(rye,"A",{href:!0});var Hlt=s(xD);tqo=r(Hlt,"FunnelForQuestionAnswering"),Hlt.forEach(t),aqo=r(rye," (Funnel Transformer model)"),rye.forEach(t),nqo=i(P),X6=n(P,"LI",{});var tye=s(X6);efe=n(tye,"STRONG",{});var Ult=s(efe);sqo=r(Ult,"gptj"),Ult.forEach(t),lqo=r(tye," \u2014 "),kD=n(tye,"A",{href:!0});var Jlt=s(kD);iqo=r(Jlt,"GPTJForQuestionAnswering"),Jlt.forEach(t),dqo=r(tye," (GPT-J model)"),tye.forEach(t),cqo=i(P),z6=n(P,"LI",{});var aye=s(z6);ofe=n(aye,"STRONG",{});var Ylt=s(ofe);fqo=r(Ylt,"ibert"),Ylt.forEach(t),mqo=r(aye," \u2014 "),SD=n(aye,"A",{href:!0});var Klt=s(SD);gqo=r(Klt,"IBertForQuestionAnswering"),Klt.forEach(t),hqo=r(aye," (I-BERT model)"),aye.forEach(t),pqo=i(P),Q6=n(P,"LI",{});var nye=s(Q6);rfe=n(nye,"STRONG",{});var Zlt=s(rfe);_qo=r(Zlt,"layoutlmv2"),Zlt.forEach(t),uqo=r(nye," \u2014 "),RD=n(nye,"A",{href:!0});var eit=s(RD);bqo=r(eit,"LayoutLMv2ForQuestionAnswering"),eit.forEach(t),Fqo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),vqo=i(P),W6=n(P,"LI",{});var sye=s(W6);tfe=n(sye,"STRONG",{});var oit=s(tfe);Tqo=r(oit,"led"),oit.forEach(t),Mqo=r(sye," \u2014 "),BD=n(sye,"A",{href:!0});var rit=s(BD);Eqo=r(rit,"LEDForQuestionAnswering"),rit.forEach(t),Cqo=r(sye," (LED model)"),sye.forEach(t),wqo=i(P),H6=n(P,"LI",{});var lye=s(H6);afe=n(lye,"STRONG",{});var tit=s(afe);Aqo=r(tit,"longformer"),tit.forEach(t),yqo=r(lye," \u2014 "),PD=n(lye,"A",{href:!0});var ait=s(PD);Lqo=r(ait,"LongformerForQuestionAnswering"),ait.forEach(t),xqo=r(lye," (Longformer model)"),lye.forEach(t),kqo=i(P),U6=n(P,"LI",{});var iye=s(U6);nfe=n(iye,"STRONG",{});var nit=s(nfe);Sqo=r(nit,"lxmert"),nit.forEach(t),Rqo=r(iye," \u2014 "),$D=n(iye,"A",{href:!0});var sit=s($D);Bqo=r(sit,"LxmertForQuestionAnswering"),sit.forEach(t),Pqo=r(iye," (LXMERT model)"),iye.forEach(t),$qo=i(P),J6=n(P,"LI",{});var dye=s(J6);sfe=n(dye,"STRONG",{});var lit=s(sfe);Iqo=r(lit,"mbart"),lit.forEach(t),qqo=r(dye," \u2014 "),ID=n(dye,"A",{href:!0});var iit=s(ID);Nqo=r(iit,"MBartForQuestionAnswering"),iit.forEach(t),jqo=r(dye," (mBART model)"),dye.forEach(t),Dqo=i(P),Y6=n(P,"LI",{});var cye=s(Y6);lfe=n(cye,"STRONG",{});var dit=s(lfe);Gqo=r(dit,"megatron-bert"),dit.forEach(t),Oqo=r(cye," \u2014 "),qD=n(cye,"A",{href:!0});var cit=s(qD);Vqo=r(cit,"MegatronBertForQuestionAnswering"),cit.forEach(t),Xqo=r(cye," (MegatronBert model)"),cye.forEach(t),zqo=i(P),K6=n(P,"LI",{});var fye=s(K6);ife=n(fye,"STRONG",{});var fit=s(ife);Qqo=r(fit,"mobilebert"),fit.forEach(t),Wqo=r(fye," \u2014 "),ND=n(fye,"A",{href:!0});var mit=s(ND);Hqo=r(mit,"MobileBertForQuestionAnswering"),mit.forEach(t),Uqo=r(fye," (MobileBERT model)"),fye.forEach(t),Jqo=i(P),Z6=n(P,"LI",{});var mye=s(Z6);dfe=n(mye,"STRONG",{});var git=s(dfe);Yqo=r(git,"mpnet"),git.forEach(t),Kqo=r(mye," \u2014 "),jD=n(mye,"A",{href:!0});var hit=s(jD);Zqo=r(hit,"MPNetForQuestionAnswering"),hit.forEach(t),eNo=r(mye," (MPNet model)"),mye.forEach(t),oNo=i(P),eF=n(P,"LI",{});var gye=s(eF);cfe=n(gye,"STRONG",{});var pit=s(cfe);rNo=r(pit,"nystromformer"),pit.forEach(t),tNo=r(gye," \u2014 "),DD=n(gye,"A",{href:!0});var _it=s(DD);aNo=r(_it,"NystromformerForQuestionAnswering"),_it.forEach(t),nNo=r(gye," (Nystromformer model)"),gye.forEach(t),sNo=i(P),oF=n(P,"LI",{});var hye=s(oF);ffe=n(hye,"STRONG",{});var uit=s(ffe);lNo=r(uit,"qdqbert"),uit.forEach(t),iNo=r(hye," \u2014 "),GD=n(hye,"A",{href:!0});var bit=s(GD);dNo=r(bit,"QDQBertForQuestionAnswering"),bit.forEach(t),cNo=r(hye," (QDQBert model)"),hye.forEach(t),fNo=i(P),rF=n(P,"LI",{});var pye=s(rF);mfe=n(pye,"STRONG",{});var Fit=s(mfe);mNo=r(Fit,"reformer"),Fit.forEach(t),gNo=r(pye," \u2014 "),OD=n(pye,"A",{href:!0});var vit=s(OD);hNo=r(vit,"ReformerForQuestionAnswering"),vit.forEach(t),pNo=r(pye," (Reformer model)"),pye.forEach(t),_No=i(P),tF=n(P,"LI",{});var _ye=s(tF);gfe=n(_ye,"STRONG",{});var Tit=s(gfe);uNo=r(Tit,"rembert"),Tit.forEach(t),bNo=r(_ye," \u2014 "),VD=n(_ye,"A",{href:!0});var Mit=s(VD);FNo=r(Mit,"RemBertForQuestionAnswering"),Mit.forEach(t),vNo=r(_ye," (RemBERT model)"),_ye.forEach(t),TNo=i(P),aF=n(P,"LI",{});var uye=s(aF);hfe=n(uye,"STRONG",{});var Eit=s(hfe);MNo=r(Eit,"roberta"),Eit.forEach(t),ENo=r(uye," \u2014 "),XD=n(uye,"A",{href:!0});var Cit=s(XD);CNo=r(Cit,"RobertaForQuestionAnswering"),Cit.forEach(t),wNo=r(uye," (RoBERTa model)"),uye.forEach(t),ANo=i(P),nF=n(P,"LI",{});var bye=s(nF);pfe=n(bye,"STRONG",{});var wit=s(pfe);yNo=r(wit,"roformer"),wit.forEach(t),LNo=r(bye," \u2014 "),zD=n(bye,"A",{href:!0});var Ait=s(zD);xNo=r(Ait,"RoFormerForQuestionAnswering"),Ait.forEach(t),kNo=r(bye," (RoFormer model)"),bye.forEach(t),SNo=i(P),sF=n(P,"LI",{});var Fye=s(sF);_fe=n(Fye,"STRONG",{});var yit=s(_fe);RNo=r(yit,"splinter"),yit.forEach(t),BNo=r(Fye," \u2014 "),QD=n(Fye,"A",{href:!0});var Lit=s(QD);PNo=r(Lit,"SplinterForQuestionAnswering"),Lit.forEach(t),$No=r(Fye," (Splinter model)"),Fye.forEach(t),INo=i(P),lF=n(P,"LI",{});var vye=s(lF);ufe=n(vye,"STRONG",{});var xit=s(ufe);qNo=r(xit,"squeezebert"),xit.forEach(t),NNo=r(vye," \u2014 "),WD=n(vye,"A",{href:!0});var kit=s(WD);jNo=r(kit,"SqueezeBertForQuestionAnswering"),kit.forEach(t),DNo=r(vye," (SqueezeBERT model)"),vye.forEach(t),GNo=i(P),iF=n(P,"LI",{});var Tye=s(iF);bfe=n(Tye,"STRONG",{});var Sit=s(bfe);ONo=r(Sit,"xlm"),Sit.forEach(t),VNo=r(Tye," \u2014 "),HD=n(Tye,"A",{href:!0});var Rit=s(HD);XNo=r(Rit,"XLMForQuestionAnsweringSimple"),Rit.forEach(t),zNo=r(Tye," (XLM model)"),Tye.forEach(t),QNo=i(P),dF=n(P,"LI",{});var Mye=s(dF);Ffe=n(Mye,"STRONG",{});var Bit=s(Ffe);WNo=r(Bit,"xlm-roberta"),Bit.forEach(t),HNo=r(Mye," \u2014 "),UD=n(Mye,"A",{href:!0});var Pit=s(UD);UNo=r(Pit,"XLMRobertaForQuestionAnswering"),Pit.forEach(t),JNo=r(Mye," (XLM-RoBERTa model)"),Mye.forEach(t),YNo=i(P),cF=n(P,"LI",{});var Eye=s(cF);vfe=n(Eye,"STRONG",{});var $it=s(vfe);KNo=r($it,"xlm-roberta-xl"),$it.forEach(t),ZNo=r(Eye," \u2014 "),JD=n(Eye,"A",{href:!0});var Iit=s(JD);ejo=r(Iit,"XLMRobertaXLForQuestionAnswering"),Iit.forEach(t),ojo=r(Eye," (XLM-RoBERTa-XL model)"),Eye.forEach(t),rjo=i(P),fF=n(P,"LI",{});var Cye=s(fF);Tfe=n(Cye,"STRONG",{});var qit=s(Tfe);tjo=r(qit,"xlnet"),qit.forEach(t),ajo=r(Cye," \u2014 "),YD=n(Cye,"A",{href:!0});var Nit=s(YD);njo=r(Nit,"XLNetForQuestionAnsweringSimple"),Nit.forEach(t),sjo=r(Cye," (XLNet model)"),Cye.forEach(t),ljo=i(P),mF=n(P,"LI",{});var wye=s(mF);Mfe=n(wye,"STRONG",{});var jit=s(Mfe);ijo=r(jit,"yoso"),jit.forEach(t),djo=r(wye," \u2014 "),KD=n(wye,"A",{href:!0});var Dit=s(KD);cjo=r(Dit,"YosoForQuestionAnswering"),Dit.forEach(t),fjo=r(wye," (YOSO model)"),wye.forEach(t),P.forEach(t),mjo=i(Ut),gF=n(Ut,"P",{});var Aye=s(gF);gjo=r(Aye,"The model is set in evaluation mode by default using "),Efe=n(Aye,"CODE",{});var Git=s(Efe);hjo=r(Git,"model.eval()"),Git.forEach(t),pjo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(Aye,"CODE",{});var Oit=s(Cfe);_jo=r(Oit,"model.train()"),Oit.forEach(t),Aye.forEach(t),ujo=i(Ut),wfe=n(Ut,"P",{});var Vit=s(wfe);bjo=r(Vit,"Examples:"),Vit.forEach(t),Fjo=i(Ut),m(SC.$$.fragment,Ut),Ut.forEach(t),hl.forEach(t),XBe=i(c),xd=n(c,"H2",{class:!0});var Z$e=s(xd);hF=n(Z$e,"A",{id:!0,class:!0,href:!0});var Xit=s(hF);Afe=n(Xit,"SPAN",{});var zit=s(Afe);m(RC.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),vjo=i(Z$e),yfe=n(Z$e,"SPAN",{});var Qit=s(yfe);Tjo=r(Qit,"AutoModelForTableQuestionAnswering"),Qit.forEach(t),Z$e.forEach(t),zBe=i(c),sr=n(c,"DIV",{class:!0});var _l=s(sr);m(BC.$$.fragment,_l),Mjo=i(_l),kd=n(_l,"P",{});var sJ=s(kd);Ejo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZD=n(sJ,"A",{href:!0});var Wit=s(ZD);Cjo=r(Wit,"from_pretrained()"),Wit.forEach(t),wjo=r(sJ," class method or the "),eG=n(sJ,"A",{href:!0});var Hit=s(eG);Ajo=r(Hit,"from_config()"),Hit.forEach(t),yjo=r(sJ,` class
method.`),sJ.forEach(t),Ljo=i(_l),PC=n(_l,"P",{});var eIe=s(PC);xjo=r(eIe,"This class cannot be instantiated directly using "),Lfe=n(eIe,"CODE",{});var Uit=s(Lfe);kjo=r(Uit,"__init__()"),Uit.forEach(t),Sjo=r(eIe," (throws an error)."),eIe.forEach(t),Rjo=i(_l),et=n(_l,"DIV",{class:!0});var ul=s(et);m($C.$$.fragment,ul),Bjo=i(ul),xfe=n(ul,"P",{});var Jit=s(xfe);Pjo=r(Jit,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jit.forEach(t),$jo=i(ul),Sd=n(ul,"P",{});var lJ=s(Sd);Ijo=r(lJ,`Note:
Loading a model from its configuration file does `),kfe=n(lJ,"STRONG",{});var Yit=s(kfe);qjo=r(Yit,"not"),Yit.forEach(t),Njo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oG=n(lJ,"A",{href:!0});var Kit=s(oG);jjo=r(Kit,"from_pretrained()"),Kit.forEach(t),Djo=r(lJ," to load the model weights."),lJ.forEach(t),Gjo=i(ul),Sfe=n(ul,"P",{});var Zit=s(Sfe);Ojo=r(Zit,"Examples:"),Zit.forEach(t),Vjo=i(ul),m(IC.$$.fragment,ul),ul.forEach(t),Xjo=i(_l),He=n(_l,"DIV",{class:!0});var Jt=s(He);m(qC.$$.fragment,Jt),zjo=i(Jt),Rfe=n(Jt,"P",{});var edt=s(Rfe);Qjo=r(edt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),edt.forEach(t),Wjo=i(Jt),en=n(Jt,"P",{});var UE=s(en);Hjo=r(UE,"The model class to instantiate is selected based on the "),Bfe=n(UE,"CODE",{});var odt=s(Bfe);Ujo=r(odt,"model_type"),odt.forEach(t),Jjo=r(UE,` property of the config object (either
passed as an argument or loaded from `),Pfe=n(UE,"CODE",{});var rdt=s(Pfe);Yjo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),Kjo=r(UE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$fe=n(UE,"CODE",{});var tdt=s($fe);Zjo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),eDo=r(UE,":"),UE.forEach(t),oDo=i(Jt),Ife=n(Jt,"UL",{});var adt=s(Ife);pF=n(adt,"LI",{});var yye=s(pF);qfe=n(yye,"STRONG",{});var ndt=s(qfe);rDo=r(ndt,"tapas"),ndt.forEach(t),tDo=r(yye," \u2014 "),rG=n(yye,"A",{href:!0});var sdt=s(rG);aDo=r(sdt,"TapasForQuestionAnswering"),sdt.forEach(t),nDo=r(yye," (TAPAS model)"),yye.forEach(t),adt.forEach(t),sDo=i(Jt),_F=n(Jt,"P",{});var Lye=s(_F);lDo=r(Lye,"The model is set in evaluation mode by default using "),Nfe=n(Lye,"CODE",{});var ldt=s(Nfe);iDo=r(ldt,"model.eval()"),ldt.forEach(t),dDo=r(Lye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(Lye,"CODE",{});var idt=s(jfe);cDo=r(idt,"model.train()"),idt.forEach(t),Lye.forEach(t),fDo=i(Jt),Dfe=n(Jt,"P",{});var ddt=s(Dfe);mDo=r(ddt,"Examples:"),ddt.forEach(t),gDo=i(Jt),m(NC.$$.fragment,Jt),Jt.forEach(t),_l.forEach(t),QBe=i(c),Rd=n(c,"H2",{class:!0});var oIe=s(Rd);uF=n(oIe,"A",{id:!0,class:!0,href:!0});var cdt=s(uF);Gfe=n(cdt,"SPAN",{});var fdt=s(Gfe);m(jC.$$.fragment,fdt),fdt.forEach(t),cdt.forEach(t),hDo=i(oIe),Ofe=n(oIe,"SPAN",{});var mdt=s(Ofe);pDo=r(mdt,"AutoModelForImageClassification"),mdt.forEach(t),oIe.forEach(t),WBe=i(c),lr=n(c,"DIV",{class:!0});var bl=s(lr);m(DC.$$.fragment,bl),_Do=i(bl),Bd=n(bl,"P",{});var iJ=s(Bd);uDo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),tG=n(iJ,"A",{href:!0});var gdt=s(tG);bDo=r(gdt,"from_pretrained()"),gdt.forEach(t),FDo=r(iJ," class method or the "),aG=n(iJ,"A",{href:!0});var hdt=s(aG);vDo=r(hdt,"from_config()"),hdt.forEach(t),TDo=r(iJ,` class
method.`),iJ.forEach(t),MDo=i(bl),GC=n(bl,"P",{});var rIe=s(GC);EDo=r(rIe,"This class cannot be instantiated directly using "),Vfe=n(rIe,"CODE",{});var pdt=s(Vfe);CDo=r(pdt,"__init__()"),pdt.forEach(t),wDo=r(rIe," (throws an error)."),rIe.forEach(t),ADo=i(bl),ot=n(bl,"DIV",{class:!0});var Fl=s(ot);m(OC.$$.fragment,Fl),yDo=i(Fl),Xfe=n(Fl,"P",{});var _dt=s(Xfe);LDo=r(_dt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_dt.forEach(t),xDo=i(Fl),Pd=n(Fl,"P",{});var dJ=s(Pd);kDo=r(dJ,`Note:
Loading a model from its configuration file does `),zfe=n(dJ,"STRONG",{});var udt=s(zfe);SDo=r(udt,"not"),udt.forEach(t),RDo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(dJ,"A",{href:!0});var bdt=s(nG);BDo=r(bdt,"from_pretrained()"),bdt.forEach(t),PDo=r(dJ," to load the model weights."),dJ.forEach(t),$Do=i(Fl),Qfe=n(Fl,"P",{});var Fdt=s(Qfe);IDo=r(Fdt,"Examples:"),Fdt.forEach(t),qDo=i(Fl),m(VC.$$.fragment,Fl),Fl.forEach(t),NDo=i(bl),Ue=n(bl,"DIV",{class:!0});var Yt=s(Ue);m(XC.$$.fragment,Yt),jDo=i(Yt),Wfe=n(Yt,"P",{});var vdt=s(Wfe);DDo=r(vdt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vdt.forEach(t),GDo=i(Yt),on=n(Yt,"P",{});var JE=s(on);ODo=r(JE,"The model class to instantiate is selected based on the "),Hfe=n(JE,"CODE",{});var Tdt=s(Hfe);VDo=r(Tdt,"model_type"),Tdt.forEach(t),XDo=r(JE,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(JE,"CODE",{});var Mdt=s(Ufe);zDo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),QDo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(JE,"CODE",{});var Edt=s(Jfe);WDo=r(Edt,"pretrained_model_name_or_path"),Edt.forEach(t),HDo=r(JE,":"),JE.forEach(t),UDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);bF=n(ge,"LI",{});var xye=s(bF);Yfe=n(xye,"STRONG",{});var Cdt=s(Yfe);JDo=r(Cdt,"beit"),Cdt.forEach(t),YDo=r(xye," \u2014 "),sG=n(xye,"A",{href:!0});var wdt=s(sG);KDo=r(wdt,"BeitForImageClassification"),wdt.forEach(t),ZDo=r(xye," (BEiT model)"),xye.forEach(t),eGo=i(ge),FF=n(ge,"LI",{});var kye=s(FF);Kfe=n(kye,"STRONG",{});var Adt=s(Kfe);oGo=r(Adt,"convnext"),Adt.forEach(t),rGo=r(kye," \u2014 "),lG=n(kye,"A",{href:!0});var ydt=s(lG);tGo=r(ydt,"ConvNextForImageClassification"),ydt.forEach(t),aGo=r(kye," (ConvNext model)"),kye.forEach(t),nGo=i(ge),vF=n(ge,"LI",{});var Sye=s(vF);Zfe=n(Sye,"STRONG",{});var Ldt=s(Zfe);sGo=r(Ldt,"data2vec-vision"),Ldt.forEach(t),lGo=r(Sye," \u2014 "),iG=n(Sye,"A",{href:!0});var xdt=s(iG);iGo=r(xdt,"Data2VecVisionForImageClassification"),xdt.forEach(t),dGo=r(Sye," (Data2VecVision model)"),Sye.forEach(t),cGo=i(ge),Vs=n(ge,"LI",{});var L8=s(Vs);eme=n(L8,"STRONG",{});var kdt=s(eme);fGo=r(kdt,"deit"),kdt.forEach(t),mGo=r(L8," \u2014 "),dG=n(L8,"A",{href:!0});var Sdt=s(dG);gGo=r(Sdt,"DeiTForImageClassification"),Sdt.forEach(t),hGo=r(L8," or "),cG=n(L8,"A",{href:!0});var Rdt=s(cG);pGo=r(Rdt,"DeiTForImageClassificationWithTeacher"),Rdt.forEach(t),_Go=r(L8," (DeiT model)"),L8.forEach(t),uGo=i(ge),TF=n(ge,"LI",{});var Rye=s(TF);ome=n(Rye,"STRONG",{});var Bdt=s(ome);bGo=r(Bdt,"imagegpt"),Bdt.forEach(t),FGo=r(Rye," \u2014 "),fG=n(Rye,"A",{href:!0});var Pdt=s(fG);vGo=r(Pdt,"ImageGPTForImageClassification"),Pdt.forEach(t),TGo=r(Rye," (ImageGPT model)"),Rye.forEach(t),MGo=i(ge),ma=n(ge,"LI",{});var qf=s(ma);rme=n(qf,"STRONG",{});var $dt=s(rme);EGo=r($dt,"perceiver"),$dt.forEach(t),CGo=r(qf," \u2014 "),mG=n(qf,"A",{href:!0});var Idt=s(mG);wGo=r(Idt,"PerceiverForImageClassificationLearned"),Idt.forEach(t),AGo=r(qf," or "),gG=n(qf,"A",{href:!0});var qdt=s(gG);yGo=r(qdt,"PerceiverForImageClassificationFourier"),qdt.forEach(t),LGo=r(qf," or "),hG=n(qf,"A",{href:!0});var Ndt=s(hG);xGo=r(Ndt,"PerceiverForImageClassificationConvProcessing"),Ndt.forEach(t),kGo=r(qf," (Perceiver model)"),qf.forEach(t),SGo=i(ge),MF=n(ge,"LI",{});var Bye=s(MF);tme=n(Bye,"STRONG",{});var jdt=s(tme);RGo=r(jdt,"poolformer"),jdt.forEach(t),BGo=r(Bye," \u2014 "),pG=n(Bye,"A",{href:!0});var Ddt=s(pG);PGo=r(Ddt,"PoolFormerForImageClassification"),Ddt.forEach(t),$Go=r(Bye," (PoolFormer model)"),Bye.forEach(t),IGo=i(ge),EF=n(ge,"LI",{});var Pye=s(EF);ame=n(Pye,"STRONG",{});var Gdt=s(ame);qGo=r(Gdt,"regnet"),Gdt.forEach(t),NGo=r(Pye," \u2014 "),_G=n(Pye,"A",{href:!0});var Odt=s(_G);jGo=r(Odt,"RegNetForImageClassification"),Odt.forEach(t),DGo=r(Pye," (RegNet model)"),Pye.forEach(t),GGo=i(ge),CF=n(ge,"LI",{});var $ye=s(CF);nme=n($ye,"STRONG",{});var Vdt=s(nme);OGo=r(Vdt,"resnet"),Vdt.forEach(t),VGo=r($ye," \u2014 "),uG=n($ye,"A",{href:!0});var Xdt=s(uG);XGo=r(Xdt,"ResNetForImageClassification"),Xdt.forEach(t),zGo=r($ye," (ResNet model)"),$ye.forEach(t),QGo=i(ge),wF=n(ge,"LI",{});var Iye=s(wF);sme=n(Iye,"STRONG",{});var zdt=s(sme);WGo=r(zdt,"segformer"),zdt.forEach(t),HGo=r(Iye," \u2014 "),bG=n(Iye,"A",{href:!0});var Qdt=s(bG);UGo=r(Qdt,"SegformerForImageClassification"),Qdt.forEach(t),JGo=r(Iye," (SegFormer model)"),Iye.forEach(t),YGo=i(ge),AF=n(ge,"LI",{});var qye=s(AF);lme=n(qye,"STRONG",{});var Wdt=s(lme);KGo=r(Wdt,"swin"),Wdt.forEach(t),ZGo=r(qye," \u2014 "),FG=n(qye,"A",{href:!0});var Hdt=s(FG);eOo=r(Hdt,"SwinForImageClassification"),Hdt.forEach(t),oOo=r(qye," (Swin model)"),qye.forEach(t),rOo=i(ge),yF=n(ge,"LI",{});var Nye=s(yF);ime=n(Nye,"STRONG",{});var Udt=s(ime);tOo=r(Udt,"van"),Udt.forEach(t),aOo=r(Nye," \u2014 "),vG=n(Nye,"A",{href:!0});var Jdt=s(vG);nOo=r(Jdt,"VanForImageClassification"),Jdt.forEach(t),sOo=r(Nye," (VAN model)"),Nye.forEach(t),lOo=i(ge),LF=n(ge,"LI",{});var jye=s(LF);dme=n(jye,"STRONG",{});var Ydt=s(dme);iOo=r(Ydt,"vit"),Ydt.forEach(t),dOo=r(jye," \u2014 "),TG=n(jye,"A",{href:!0});var Kdt=s(TG);cOo=r(Kdt,"ViTForImageClassification"),Kdt.forEach(t),fOo=r(jye," (ViT model)"),jye.forEach(t),ge.forEach(t),mOo=i(Yt),xF=n(Yt,"P",{});var Dye=s(xF);gOo=r(Dye,"The model is set in evaluation mode by default using "),cme=n(Dye,"CODE",{});var Zdt=s(cme);hOo=r(Zdt,"model.eval()"),Zdt.forEach(t),pOo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Dye,"CODE",{});var ect=s(fme);_Oo=r(ect,"model.train()"),ect.forEach(t),Dye.forEach(t),uOo=i(Yt),mme=n(Yt,"P",{});var oct=s(mme);bOo=r(oct,"Examples:"),oct.forEach(t),FOo=i(Yt),m(zC.$$.fragment,Yt),Yt.forEach(t),bl.forEach(t),HBe=i(c),$d=n(c,"H2",{class:!0});var tIe=s($d);kF=n(tIe,"A",{id:!0,class:!0,href:!0});var rct=s(kF);gme=n(rct,"SPAN",{});var tct=s(gme);m(QC.$$.fragment,tct),tct.forEach(t),rct.forEach(t),vOo=i(tIe),hme=n(tIe,"SPAN",{});var act=s(hme);TOo=r(act,"AutoModelForVision2Seq"),act.forEach(t),tIe.forEach(t),UBe=i(c),ir=n(c,"DIV",{class:!0});var vl=s(ir);m(WC.$$.fragment,vl),MOo=i(vl),Id=n(vl,"P",{});var cJ=s(Id);EOo=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),MG=n(cJ,"A",{href:!0});var nct=s(MG);COo=r(nct,"from_pretrained()"),nct.forEach(t),wOo=r(cJ," class method or the "),EG=n(cJ,"A",{href:!0});var sct=s(EG);AOo=r(sct,"from_config()"),sct.forEach(t),yOo=r(cJ,` class
method.`),cJ.forEach(t),LOo=i(vl),HC=n(vl,"P",{});var aIe=s(HC);xOo=r(aIe,"This class cannot be instantiated directly using "),pme=n(aIe,"CODE",{});var lct=s(pme);kOo=r(lct,"__init__()"),lct.forEach(t),SOo=r(aIe," (throws an error)."),aIe.forEach(t),ROo=i(vl),rt=n(vl,"DIV",{class:!0});var Tl=s(rt);m(UC.$$.fragment,Tl),BOo=i(Tl),_me=n(Tl,"P",{});var ict=s(_me);POo=r(ict,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ict.forEach(t),$Oo=i(Tl),qd=n(Tl,"P",{});var fJ=s(qd);IOo=r(fJ,`Note:
Loading a model from its configuration file does `),ume=n(fJ,"STRONG",{});var dct=s(ume);qOo=r(dct,"not"),dct.forEach(t),NOo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(fJ,"A",{href:!0});var cct=s(CG);jOo=r(cct,"from_pretrained()"),cct.forEach(t),DOo=r(fJ," to load the model weights."),fJ.forEach(t),GOo=i(Tl),bme=n(Tl,"P",{});var fct=s(bme);OOo=r(fct,"Examples:"),fct.forEach(t),VOo=i(Tl),m(JC.$$.fragment,Tl),Tl.forEach(t),XOo=i(vl),Je=n(vl,"DIV",{class:!0});var Kt=s(Je);m(YC.$$.fragment,Kt),zOo=i(Kt),Fme=n(Kt,"P",{});var mct=s(Fme);QOo=r(mct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mct.forEach(t),WOo=i(Kt),rn=n(Kt,"P",{});var YE=s(rn);HOo=r(YE,"The model class to instantiate is selected based on the "),vme=n(YE,"CODE",{});var gct=s(vme);UOo=r(gct,"model_type"),gct.forEach(t),JOo=r(YE,` property of the config object (either
passed as an argument or loaded from `),Tme=n(YE,"CODE",{});var hct=s(Tme);YOo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),KOo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mme=n(YE,"CODE",{});var pct=s(Mme);ZOo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),eVo=r(YE,":"),YE.forEach(t),oVo=i(Kt),Eme=n(Kt,"UL",{});var _ct=s(Eme);SF=n(_ct,"LI",{});var Gye=s(SF);Cme=n(Gye,"STRONG",{});var uct=s(Cme);rVo=r(uct,"vision-encoder-decoder"),uct.forEach(t),tVo=r(Gye," \u2014 "),wG=n(Gye,"A",{href:!0});var bct=s(wG);aVo=r(bct,"VisionEncoderDecoderModel"),bct.forEach(t),nVo=r(Gye," (Vision Encoder decoder model)"),Gye.forEach(t),_ct.forEach(t),sVo=i(Kt),RF=n(Kt,"P",{});var Oye=s(RF);lVo=r(Oye,"The model is set in evaluation mode by default using "),wme=n(Oye,"CODE",{});var Fct=s(wme);iVo=r(Fct,"model.eval()"),Fct.forEach(t),dVo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ame=n(Oye,"CODE",{});var vct=s(Ame);cVo=r(vct,"model.train()"),vct.forEach(t),Oye.forEach(t),fVo=i(Kt),yme=n(Kt,"P",{});var Tct=s(yme);mVo=r(Tct,"Examples:"),Tct.forEach(t),gVo=i(Kt),m(KC.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),JBe=i(c),Nd=n(c,"H2",{class:!0});var nIe=s(Nd);BF=n(nIe,"A",{id:!0,class:!0,href:!0});var Mct=s(BF);Lme=n(Mct,"SPAN",{});var Ect=s(Lme);m(ZC.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),hVo=i(nIe),xme=n(nIe,"SPAN",{});var Cct=s(xme);pVo=r(Cct,"AutoModelForAudioClassification"),Cct.forEach(t),nIe.forEach(t),YBe=i(c),dr=n(c,"DIV",{class:!0});var Ml=s(dr);m(ew.$$.fragment,Ml),_Vo=i(Ml),jd=n(Ml,"P",{});var mJ=s(jd);uVo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),AG=n(mJ,"A",{href:!0});var wct=s(AG);bVo=r(wct,"from_pretrained()"),wct.forEach(t),FVo=r(mJ," class method or the "),yG=n(mJ,"A",{href:!0});var Act=s(yG);vVo=r(Act,"from_config()"),Act.forEach(t),TVo=r(mJ,` class
method.`),mJ.forEach(t),MVo=i(Ml),ow=n(Ml,"P",{});var sIe=s(ow);EVo=r(sIe,"This class cannot be instantiated directly using "),kme=n(sIe,"CODE",{});var yct=s(kme);CVo=r(yct,"__init__()"),yct.forEach(t),wVo=r(sIe," (throws an error)."),sIe.forEach(t),AVo=i(Ml),tt=n(Ml,"DIV",{class:!0});var El=s(tt);m(rw.$$.fragment,El),yVo=i(El),Sme=n(El,"P",{});var Lct=s(Sme);LVo=r(Lct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lct.forEach(t),xVo=i(El),Dd=n(El,"P",{});var gJ=s(Dd);kVo=r(gJ,`Note:
Loading a model from its configuration file does `),Rme=n(gJ,"STRONG",{});var xct=s(Rme);SVo=r(xct,"not"),xct.forEach(t),RVo=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(gJ,"A",{href:!0});var kct=s(LG);BVo=r(kct,"from_pretrained()"),kct.forEach(t),PVo=r(gJ," to load the model weights."),gJ.forEach(t),$Vo=i(El),Bme=n(El,"P",{});var Sct=s(Bme);IVo=r(Sct,"Examples:"),Sct.forEach(t),qVo=i(El),m(tw.$$.fragment,El),El.forEach(t),NVo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var Zt=s(Ye);m(aw.$$.fragment,Zt),jVo=i(Zt),Pme=n(Zt,"P",{});var Rct=s(Pme);DVo=r(Rct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rct.forEach(t),GVo=i(Zt),tn=n(Zt,"P",{});var KE=s(tn);OVo=r(KE,"The model class to instantiate is selected based on the "),$me=n(KE,"CODE",{});var Bct=s($me);VVo=r(Bct,"model_type"),Bct.forEach(t),XVo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Ime=n(KE,"CODE",{});var Pct=s(Ime);zVo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),QVo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(KE,"CODE",{});var $ct=s(qme);WVo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),HVo=r(KE,":"),KE.forEach(t),UVo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);PF=n(Do,"LI",{});var Vye=s(PF);Nme=n(Vye,"STRONG",{});var Ict=s(Nme);JVo=r(Ict,"data2vec-audio"),Ict.forEach(t),YVo=r(Vye," \u2014 "),xG=n(Vye,"A",{href:!0});var qct=s(xG);KVo=r(qct,"Data2VecAudioForSequenceClassification"),qct.forEach(t),ZVo=r(Vye," (Data2VecAudio model)"),Vye.forEach(t),eXo=i(Do),$F=n(Do,"LI",{});var Xye=s($F);jme=n(Xye,"STRONG",{});var Nct=s(jme);oXo=r(Nct,"hubert"),Nct.forEach(t),rXo=r(Xye," \u2014 "),kG=n(Xye,"A",{href:!0});var jct=s(kG);tXo=r(jct,"HubertForSequenceClassification"),jct.forEach(t),aXo=r(Xye," (Hubert model)"),Xye.forEach(t),nXo=i(Do),IF=n(Do,"LI",{});var zye=s(IF);Dme=n(zye,"STRONG",{});var Dct=s(Dme);sXo=r(Dct,"sew"),Dct.forEach(t),lXo=r(zye," \u2014 "),SG=n(zye,"A",{href:!0});var Gct=s(SG);iXo=r(Gct,"SEWForSequenceClassification"),Gct.forEach(t),dXo=r(zye," (SEW model)"),zye.forEach(t),cXo=i(Do),qF=n(Do,"LI",{});var Qye=s(qF);Gme=n(Qye,"STRONG",{});var Oct=s(Gme);fXo=r(Oct,"sew-d"),Oct.forEach(t),mXo=r(Qye," \u2014 "),RG=n(Qye,"A",{href:!0});var Vct=s(RG);gXo=r(Vct,"SEWDForSequenceClassification"),Vct.forEach(t),hXo=r(Qye," (SEW-D model)"),Qye.forEach(t),pXo=i(Do),NF=n(Do,"LI",{});var Wye=s(NF);Ome=n(Wye,"STRONG",{});var Xct=s(Ome);_Xo=r(Xct,"unispeech"),Xct.forEach(t),uXo=r(Wye," \u2014 "),BG=n(Wye,"A",{href:!0});var zct=s(BG);bXo=r(zct,"UniSpeechForSequenceClassification"),zct.forEach(t),FXo=r(Wye," (UniSpeech model)"),Wye.forEach(t),vXo=i(Do),jF=n(Do,"LI",{});var Hye=s(jF);Vme=n(Hye,"STRONG",{});var Qct=s(Vme);TXo=r(Qct,"unispeech-sat"),Qct.forEach(t),MXo=r(Hye," \u2014 "),PG=n(Hye,"A",{href:!0});var Wct=s(PG);EXo=r(Wct,"UniSpeechSatForSequenceClassification"),Wct.forEach(t),CXo=r(Hye," (UniSpeechSat model)"),Hye.forEach(t),wXo=i(Do),DF=n(Do,"LI",{});var Uye=s(DF);Xme=n(Uye,"STRONG",{});var Hct=s(Xme);AXo=r(Hct,"wav2vec2"),Hct.forEach(t),yXo=r(Uye," \u2014 "),$G=n(Uye,"A",{href:!0});var Uct=s($G);LXo=r(Uct,"Wav2Vec2ForSequenceClassification"),Uct.forEach(t),xXo=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),kXo=i(Do),GF=n(Do,"LI",{});var Jye=s(GF);zme=n(Jye,"STRONG",{});var Jct=s(zme);SXo=r(Jct,"wavlm"),Jct.forEach(t),RXo=r(Jye," \u2014 "),IG=n(Jye,"A",{href:!0});var Yct=s(IG);BXo=r(Yct,"WavLMForSequenceClassification"),Yct.forEach(t),PXo=r(Jye," (WavLM model)"),Jye.forEach(t),Do.forEach(t),$Xo=i(Zt),OF=n(Zt,"P",{});var Yye=s(OF);IXo=r(Yye,"The model is set in evaluation mode by default using "),Qme=n(Yye,"CODE",{});var Kct=s(Qme);qXo=r(Kct,"model.eval()"),Kct.forEach(t),NXo=r(Yye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wme=n(Yye,"CODE",{});var Zct=s(Wme);jXo=r(Zct,"model.train()"),Zct.forEach(t),Yye.forEach(t),DXo=i(Zt),Hme=n(Zt,"P",{});var eft=s(Hme);GXo=r(eft,"Examples:"),eft.forEach(t),OXo=i(Zt),m(nw.$$.fragment,Zt),Zt.forEach(t),Ml.forEach(t),KBe=i(c),Gd=n(c,"H2",{class:!0});var lIe=s(Gd);VF=n(lIe,"A",{id:!0,class:!0,href:!0});var oft=s(VF);Ume=n(oft,"SPAN",{});var rft=s(Ume);m(sw.$$.fragment,rft),rft.forEach(t),oft.forEach(t),VXo=i(lIe),Jme=n(lIe,"SPAN",{});var tft=s(Jme);XXo=r(tft,"AutoModelForAudioFrameClassification"),tft.forEach(t),lIe.forEach(t),ZBe=i(c),cr=n(c,"DIV",{class:!0});var Cl=s(cr);m(lw.$$.fragment,Cl),zXo=i(Cl),Od=n(Cl,"P",{});var hJ=s(Od);QXo=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),qG=n(hJ,"A",{href:!0});var aft=s(qG);WXo=r(aft,"from_pretrained()"),aft.forEach(t),HXo=r(hJ," class method or the "),NG=n(hJ,"A",{href:!0});var nft=s(NG);UXo=r(nft,"from_config()"),nft.forEach(t),JXo=r(hJ,` class
method.`),hJ.forEach(t),YXo=i(Cl),iw=n(Cl,"P",{});var iIe=s(iw);KXo=r(iIe,"This class cannot be instantiated directly using "),Yme=n(iIe,"CODE",{});var sft=s(Yme);ZXo=r(sft,"__init__()"),sft.forEach(t),ezo=r(iIe," (throws an error)."),iIe.forEach(t),ozo=i(Cl),at=n(Cl,"DIV",{class:!0});var wl=s(at);m(dw.$$.fragment,wl),rzo=i(wl),Kme=n(wl,"P",{});var lft=s(Kme);tzo=r(lft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),lft.forEach(t),azo=i(wl),Vd=n(wl,"P",{});var pJ=s(Vd);nzo=r(pJ,`Note:
Loading a model from its configuration file does `),Zme=n(pJ,"STRONG",{});var ift=s(Zme);szo=r(ift,"not"),ift.forEach(t),lzo=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(pJ,"A",{href:!0});var dft=s(jG);izo=r(dft,"from_pretrained()"),dft.forEach(t),dzo=r(pJ," to load the model weights."),pJ.forEach(t),czo=i(wl),ege=n(wl,"P",{});var cft=s(ege);fzo=r(cft,"Examples:"),cft.forEach(t),mzo=i(wl),m(cw.$$.fragment,wl),wl.forEach(t),gzo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var ea=s(Ke);m(fw.$$.fragment,ea),hzo=i(ea),oge=n(ea,"P",{});var fft=s(oge);pzo=r(fft,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),fft.forEach(t),_zo=i(ea),an=n(ea,"P",{});var ZE=s(an);uzo=r(ZE,"The model class to instantiate is selected based on the "),rge=n(ZE,"CODE",{});var mft=s(rge);bzo=r(mft,"model_type"),mft.forEach(t),Fzo=r(ZE,` property of the config object (either
passed as an argument or loaded from `),tge=n(ZE,"CODE",{});var gft=s(tge);vzo=r(gft,"pretrained_model_name_or_path"),gft.forEach(t),Tzo=r(ZE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),age=n(ZE,"CODE",{});var hft=s(age);Mzo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),Ezo=r(ZE,":"),ZE.forEach(t),Czo=i(ea),nn=n(ea,"UL",{});var e5=s(nn);XF=n(e5,"LI",{});var Kye=s(XF);nge=n(Kye,"STRONG",{});var pft=s(nge);wzo=r(pft,"data2vec-audio"),pft.forEach(t),Azo=r(Kye," \u2014 "),DG=n(Kye,"A",{href:!0});var _ft=s(DG);yzo=r(_ft,"Data2VecAudioForAudioFrameClassification"),_ft.forEach(t),Lzo=r(Kye," (Data2VecAudio model)"),Kye.forEach(t),xzo=i(e5),zF=n(e5,"LI",{});var Zye=s(zF);sge=n(Zye,"STRONG",{});var uft=s(sge);kzo=r(uft,"unispeech-sat"),uft.forEach(t),Szo=r(Zye," \u2014 "),GG=n(Zye,"A",{href:!0});var bft=s(GG);Rzo=r(bft,"UniSpeechSatForAudioFrameClassification"),bft.forEach(t),Bzo=r(Zye," (UniSpeechSat model)"),Zye.forEach(t),Pzo=i(e5),QF=n(e5,"LI",{});var eLe=s(QF);lge=n(eLe,"STRONG",{});var Fft=s(lge);$zo=r(Fft,"wav2vec2"),Fft.forEach(t),Izo=r(eLe," \u2014 "),OG=n(eLe,"A",{href:!0});var vft=s(OG);qzo=r(vft,"Wav2Vec2ForAudioFrameClassification"),vft.forEach(t),Nzo=r(eLe," (Wav2Vec2 model)"),eLe.forEach(t),jzo=i(e5),WF=n(e5,"LI",{});var oLe=s(WF);ige=n(oLe,"STRONG",{});var Tft=s(ige);Dzo=r(Tft,"wavlm"),Tft.forEach(t),Gzo=r(oLe," \u2014 "),VG=n(oLe,"A",{href:!0});var Mft=s(VG);Ozo=r(Mft,"WavLMForAudioFrameClassification"),Mft.forEach(t),Vzo=r(oLe," (WavLM model)"),oLe.forEach(t),e5.forEach(t),Xzo=i(ea),HF=n(ea,"P",{});var rLe=s(HF);zzo=r(rLe,"The model is set in evaluation mode by default using "),dge=n(rLe,"CODE",{});var Eft=s(dge);Qzo=r(Eft,"model.eval()"),Eft.forEach(t),Wzo=r(rLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cge=n(rLe,"CODE",{});var Cft=s(cge);Hzo=r(Cft,"model.train()"),Cft.forEach(t),rLe.forEach(t),Uzo=i(ea),fge=n(ea,"P",{});var wft=s(fge);Jzo=r(wft,"Examples:"),wft.forEach(t),Yzo=i(ea),m(mw.$$.fragment,ea),ea.forEach(t),Cl.forEach(t),ePe=i(c),Xd=n(c,"H2",{class:!0});var dIe=s(Xd);UF=n(dIe,"A",{id:!0,class:!0,href:!0});var Aft=s(UF);mge=n(Aft,"SPAN",{});var yft=s(mge);m(gw.$$.fragment,yft),yft.forEach(t),Aft.forEach(t),Kzo=i(dIe),gge=n(dIe,"SPAN",{});var Lft=s(gge);Zzo=r(Lft,"AutoModelForCTC"),Lft.forEach(t),dIe.forEach(t),oPe=i(c),fr=n(c,"DIV",{class:!0});var Al=s(fr);m(hw.$$.fragment,Al),eQo=i(Al),zd=n(Al,"P",{});var _J=s(zd);oQo=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),XG=n(_J,"A",{href:!0});var xft=s(XG);rQo=r(xft,"from_pretrained()"),xft.forEach(t),tQo=r(_J," class method or the "),zG=n(_J,"A",{href:!0});var kft=s(zG);aQo=r(kft,"from_config()"),kft.forEach(t),nQo=r(_J,` class
method.`),_J.forEach(t),sQo=i(Al),pw=n(Al,"P",{});var cIe=s(pw);lQo=r(cIe,"This class cannot be instantiated directly using "),hge=n(cIe,"CODE",{});var Sft=s(hge);iQo=r(Sft,"__init__()"),Sft.forEach(t),dQo=r(cIe," (throws an error)."),cIe.forEach(t),cQo=i(Al),nt=n(Al,"DIV",{class:!0});var yl=s(nt);m(_w.$$.fragment,yl),fQo=i(yl),pge=n(yl,"P",{});var Rft=s(pge);mQo=r(Rft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rft.forEach(t),gQo=i(yl),Qd=n(yl,"P",{});var uJ=s(Qd);hQo=r(uJ,`Note:
Loading a model from its configuration file does `),_ge=n(uJ,"STRONG",{});var Bft=s(_ge);pQo=r(Bft,"not"),Bft.forEach(t),_Qo=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(uJ,"A",{href:!0});var Pft=s(QG);uQo=r(Pft,"from_pretrained()"),Pft.forEach(t),bQo=r(uJ," to load the model weights."),uJ.forEach(t),FQo=i(yl),uge=n(yl,"P",{});var $ft=s(uge);vQo=r($ft,"Examples:"),$ft.forEach(t),TQo=i(yl),m(uw.$$.fragment,yl),yl.forEach(t),MQo=i(Al),Ze=n(Al,"DIV",{class:!0});var oa=s(Ze);m(bw.$$.fragment,oa),EQo=i(oa),bge=n(oa,"P",{});var Ift=s(bge);CQo=r(Ift,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ift.forEach(t),wQo=i(oa),sn=n(oa,"P",{});var o5=s(sn);AQo=r(o5,"The model class to instantiate is selected based on the "),Fge=n(o5,"CODE",{});var qft=s(Fge);yQo=r(qft,"model_type"),qft.forEach(t),LQo=r(o5,` property of the config object (either
passed as an argument or loaded from `),vge=n(o5,"CODE",{});var Nft=s(vge);xQo=r(Nft,"pretrained_model_name_or_path"),Nft.forEach(t),kQo=r(o5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tge=n(o5,"CODE",{});var jft=s(Tge);SQo=r(jft,"pretrained_model_name_or_path"),jft.forEach(t),RQo=r(o5,":"),o5.forEach(t),BQo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);JF=n(Go,"LI",{});var tLe=s(JF);Mge=n(tLe,"STRONG",{});var Dft=s(Mge);PQo=r(Dft,"data2vec-audio"),Dft.forEach(t),$Qo=r(tLe," \u2014 "),WG=n(tLe,"A",{href:!0});var Gft=s(WG);IQo=r(Gft,"Data2VecAudioForCTC"),Gft.forEach(t),qQo=r(tLe," (Data2VecAudio model)"),tLe.forEach(t),NQo=i(Go),YF=n(Go,"LI",{});var aLe=s(YF);Ege=n(aLe,"STRONG",{});var Oft=s(Ege);jQo=r(Oft,"hubert"),Oft.forEach(t),DQo=r(aLe," \u2014 "),HG=n(aLe,"A",{href:!0});var Vft=s(HG);GQo=r(Vft,"HubertForCTC"),Vft.forEach(t),OQo=r(aLe," (Hubert model)"),aLe.forEach(t),VQo=i(Go),KF=n(Go,"LI",{});var nLe=s(KF);Cge=n(nLe,"STRONG",{});var Xft=s(Cge);XQo=r(Xft,"sew"),Xft.forEach(t),zQo=r(nLe," \u2014 "),UG=n(nLe,"A",{href:!0});var zft=s(UG);QQo=r(zft,"SEWForCTC"),zft.forEach(t),WQo=r(nLe," (SEW model)"),nLe.forEach(t),HQo=i(Go),ZF=n(Go,"LI",{});var sLe=s(ZF);wge=n(sLe,"STRONG",{});var Qft=s(wge);UQo=r(Qft,"sew-d"),Qft.forEach(t),JQo=r(sLe," \u2014 "),JG=n(sLe,"A",{href:!0});var Wft=s(JG);YQo=r(Wft,"SEWDForCTC"),Wft.forEach(t),KQo=r(sLe," (SEW-D model)"),sLe.forEach(t),ZQo=i(Go),ev=n(Go,"LI",{});var lLe=s(ev);Age=n(lLe,"STRONG",{});var Hft=s(Age);eWo=r(Hft,"unispeech"),Hft.forEach(t),oWo=r(lLe," \u2014 "),YG=n(lLe,"A",{href:!0});var Uft=s(YG);rWo=r(Uft,"UniSpeechForCTC"),Uft.forEach(t),tWo=r(lLe," (UniSpeech model)"),lLe.forEach(t),aWo=i(Go),ov=n(Go,"LI",{});var iLe=s(ov);yge=n(iLe,"STRONG",{});var Jft=s(yge);nWo=r(Jft,"unispeech-sat"),Jft.forEach(t),sWo=r(iLe," \u2014 "),KG=n(iLe,"A",{href:!0});var Yft=s(KG);lWo=r(Yft,"UniSpeechSatForCTC"),Yft.forEach(t),iWo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),dWo=i(Go),rv=n(Go,"LI",{});var dLe=s(rv);Lge=n(dLe,"STRONG",{});var Kft=s(Lge);cWo=r(Kft,"wav2vec2"),Kft.forEach(t),fWo=r(dLe," \u2014 "),ZG=n(dLe,"A",{href:!0});var Zft=s(ZG);mWo=r(Zft,"Wav2Vec2ForCTC"),Zft.forEach(t),gWo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),hWo=i(Go),tv=n(Go,"LI",{});var cLe=s(tv);xge=n(cLe,"STRONG",{});var emt=s(xge);pWo=r(emt,"wavlm"),emt.forEach(t),_Wo=r(cLe," \u2014 "),eO=n(cLe,"A",{href:!0});var omt=s(eO);uWo=r(omt,"WavLMForCTC"),omt.forEach(t),bWo=r(cLe," (WavLM model)"),cLe.forEach(t),Go.forEach(t),FWo=i(oa),av=n(oa,"P",{});var fLe=s(av);vWo=r(fLe,"The model is set in evaluation mode by default using "),kge=n(fLe,"CODE",{});var rmt=s(kge);TWo=r(rmt,"model.eval()"),rmt.forEach(t),MWo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sge=n(fLe,"CODE",{});var tmt=s(Sge);EWo=r(tmt,"model.train()"),tmt.forEach(t),fLe.forEach(t),CWo=i(oa),Rge=n(oa,"P",{});var amt=s(Rge);wWo=r(amt,"Examples:"),amt.forEach(t),AWo=i(oa),m(Fw.$$.fragment,oa),oa.forEach(t),Al.forEach(t),rPe=i(c),Wd=n(c,"H2",{class:!0});var fIe=s(Wd);nv=n(fIe,"A",{id:!0,class:!0,href:!0});var nmt=s(nv);Bge=n(nmt,"SPAN",{});var smt=s(Bge);m(vw.$$.fragment,smt),smt.forEach(t),nmt.forEach(t),yWo=i(fIe),Pge=n(fIe,"SPAN",{});var lmt=s(Pge);LWo=r(lmt,"AutoModelForSpeechSeq2Seq"),lmt.forEach(t),fIe.forEach(t),tPe=i(c),mr=n(c,"DIV",{class:!0});var Ll=s(mr);m(Tw.$$.fragment,Ll),xWo=i(Ll),Hd=n(Ll,"P",{});var bJ=s(Hd);kWo=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oO=n(bJ,"A",{href:!0});var imt=s(oO);SWo=r(imt,"from_pretrained()"),imt.forEach(t),RWo=r(bJ," class method or the "),rO=n(bJ,"A",{href:!0});var dmt=s(rO);BWo=r(dmt,"from_config()"),dmt.forEach(t),PWo=r(bJ,` class
method.`),bJ.forEach(t),$Wo=i(Ll),Mw=n(Ll,"P",{});var mIe=s(Mw);IWo=r(mIe,"This class cannot be instantiated directly using "),$ge=n(mIe,"CODE",{});var cmt=s($ge);qWo=r(cmt,"__init__()"),cmt.forEach(t),NWo=r(mIe," (throws an error)."),mIe.forEach(t),jWo=i(Ll),st=n(Ll,"DIV",{class:!0});var xl=s(st);m(Ew.$$.fragment,xl),DWo=i(xl),Ige=n(xl,"P",{});var fmt=s(Ige);GWo=r(fmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fmt.forEach(t),OWo=i(xl),Ud=n(xl,"P",{});var FJ=s(Ud);VWo=r(FJ,`Note:
Loading a model from its configuration file does `),qge=n(FJ,"STRONG",{});var mmt=s(qge);XWo=r(mmt,"not"),mmt.forEach(t),zWo=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tO=n(FJ,"A",{href:!0});var gmt=s(tO);QWo=r(gmt,"from_pretrained()"),gmt.forEach(t),WWo=r(FJ," to load the model weights."),FJ.forEach(t),HWo=i(xl),Nge=n(xl,"P",{});var hmt=s(Nge);UWo=r(hmt,"Examples:"),hmt.forEach(t),JWo=i(xl),m(Cw.$$.fragment,xl),xl.forEach(t),YWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ra=s(eo);m(ww.$$.fragment,ra),KWo=i(ra),jge=n(ra,"P",{});var pmt=s(jge);ZWo=r(pmt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pmt.forEach(t),eHo=i(ra),ln=n(ra,"P",{});var r5=s(ln);oHo=r(r5,"The model class to instantiate is selected based on the "),Dge=n(r5,"CODE",{});var _mt=s(Dge);rHo=r(_mt,"model_type"),_mt.forEach(t),tHo=r(r5,` property of the config object (either
passed as an argument or loaded from `),Gge=n(r5,"CODE",{});var umt=s(Gge);aHo=r(umt,"pretrained_model_name_or_path"),umt.forEach(t),nHo=r(r5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(r5,"CODE",{});var bmt=s(Oge);sHo=r(bmt,"pretrained_model_name_or_path"),bmt.forEach(t),lHo=r(r5,":"),r5.forEach(t),iHo=i(ra),Aw=n(ra,"UL",{});var gIe=s(Aw);sv=n(gIe,"LI",{});var mLe=s(sv);Vge=n(mLe,"STRONG",{});var Fmt=s(Vge);dHo=r(Fmt,"speech-encoder-decoder"),Fmt.forEach(t),cHo=r(mLe," \u2014 "),aO=n(mLe,"A",{href:!0});var vmt=s(aO);fHo=r(vmt,"SpeechEncoderDecoderModel"),vmt.forEach(t),mHo=r(mLe," (Speech Encoder decoder model)"),mLe.forEach(t),gHo=i(gIe),lv=n(gIe,"LI",{});var gLe=s(lv);Xge=n(gLe,"STRONG",{});var Tmt=s(Xge);hHo=r(Tmt,"speech_to_text"),Tmt.forEach(t),pHo=r(gLe," \u2014 "),nO=n(gLe,"A",{href:!0});var Mmt=s(nO);_Ho=r(Mmt,"Speech2TextForConditionalGeneration"),Mmt.forEach(t),uHo=r(gLe," (Speech2Text model)"),gLe.forEach(t),gIe.forEach(t),bHo=i(ra),iv=n(ra,"P",{});var hLe=s(iv);FHo=r(hLe,"The model is set in evaluation mode by default using "),zge=n(hLe,"CODE",{});var Emt=s(zge);vHo=r(Emt,"model.eval()"),Emt.forEach(t),THo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qge=n(hLe,"CODE",{});var Cmt=s(Qge);MHo=r(Cmt,"model.train()"),Cmt.forEach(t),hLe.forEach(t),EHo=i(ra),Wge=n(ra,"P",{});var wmt=s(Wge);CHo=r(wmt,"Examples:"),wmt.forEach(t),wHo=i(ra),m(yw.$$.fragment,ra),ra.forEach(t),Ll.forEach(t),aPe=i(c),Jd=n(c,"H2",{class:!0});var hIe=s(Jd);dv=n(hIe,"A",{id:!0,class:!0,href:!0});var Amt=s(dv);Hge=n(Amt,"SPAN",{});var ymt=s(Hge);m(Lw.$$.fragment,ymt),ymt.forEach(t),Amt.forEach(t),AHo=i(hIe),Uge=n(hIe,"SPAN",{});var Lmt=s(Uge);yHo=r(Lmt,"AutoModelForAudioXVector"),Lmt.forEach(t),hIe.forEach(t),nPe=i(c),gr=n(c,"DIV",{class:!0});var kl=s(gr);m(xw.$$.fragment,kl),LHo=i(kl),Yd=n(kl,"P",{});var vJ=s(Yd);xHo=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),sO=n(vJ,"A",{href:!0});var xmt=s(sO);kHo=r(xmt,"from_pretrained()"),xmt.forEach(t),SHo=r(vJ," class method or the "),lO=n(vJ,"A",{href:!0});var kmt=s(lO);RHo=r(kmt,"from_config()"),kmt.forEach(t),BHo=r(vJ,` class
method.`),vJ.forEach(t),PHo=i(kl),kw=n(kl,"P",{});var pIe=s(kw);$Ho=r(pIe,"This class cannot be instantiated directly using "),Jge=n(pIe,"CODE",{});var Smt=s(Jge);IHo=r(Smt,"__init__()"),Smt.forEach(t),qHo=r(pIe," (throws an error)."),pIe.forEach(t),NHo=i(kl),lt=n(kl,"DIV",{class:!0});var Sl=s(lt);m(Sw.$$.fragment,Sl),jHo=i(Sl),Yge=n(Sl,"P",{});var Rmt=s(Yge);DHo=r(Rmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rmt.forEach(t),GHo=i(Sl),Kd=n(Sl,"P",{});var TJ=s(Kd);OHo=r(TJ,`Note:
Loading a model from its configuration file does `),Kge=n(TJ,"STRONG",{});var Bmt=s(Kge);VHo=r(Bmt,"not"),Bmt.forEach(t),XHo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(TJ,"A",{href:!0});var Pmt=s(iO);zHo=r(Pmt,"from_pretrained()"),Pmt.forEach(t),QHo=r(TJ," to load the model weights."),TJ.forEach(t),WHo=i(Sl),Zge=n(Sl,"P",{});var $mt=s(Zge);HHo=r($mt,"Examples:"),$mt.forEach(t),UHo=i(Sl),m(Rw.$$.fragment,Sl),Sl.forEach(t),JHo=i(kl),oo=n(kl,"DIV",{class:!0});var ta=s(oo);m(Bw.$$.fragment,ta),YHo=i(ta),ehe=n(ta,"P",{});var Imt=s(ehe);KHo=r(Imt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Imt.forEach(t),ZHo=i(ta),dn=n(ta,"P",{});var t5=s(dn);eUo=r(t5,"The model class to instantiate is selected based on the "),ohe=n(t5,"CODE",{});var qmt=s(ohe);oUo=r(qmt,"model_type"),qmt.forEach(t),rUo=r(t5,` property of the config object (either
passed as an argument or loaded from `),rhe=n(t5,"CODE",{});var Nmt=s(rhe);tUo=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),aUo=r(t5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),the=n(t5,"CODE",{});var jmt=s(the);nUo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),sUo=r(t5,":"),t5.forEach(t),lUo=i(ta),cn=n(ta,"UL",{});var a5=s(cn);cv=n(a5,"LI",{});var pLe=s(cv);ahe=n(pLe,"STRONG",{});var Dmt=s(ahe);iUo=r(Dmt,"data2vec-audio"),Dmt.forEach(t),dUo=r(pLe," \u2014 "),dO=n(pLe,"A",{href:!0});var Gmt=s(dO);cUo=r(Gmt,"Data2VecAudioForXVector"),Gmt.forEach(t),fUo=r(pLe," (Data2VecAudio model)"),pLe.forEach(t),mUo=i(a5),fv=n(a5,"LI",{});var _Le=s(fv);nhe=n(_Le,"STRONG",{});var Omt=s(nhe);gUo=r(Omt,"unispeech-sat"),Omt.forEach(t),hUo=r(_Le," \u2014 "),cO=n(_Le,"A",{href:!0});var Vmt=s(cO);pUo=r(Vmt,"UniSpeechSatForXVector"),Vmt.forEach(t),_Uo=r(_Le," (UniSpeechSat model)"),_Le.forEach(t),uUo=i(a5),mv=n(a5,"LI",{});var uLe=s(mv);she=n(uLe,"STRONG",{});var Xmt=s(she);bUo=r(Xmt,"wav2vec2"),Xmt.forEach(t),FUo=r(uLe," \u2014 "),fO=n(uLe,"A",{href:!0});var zmt=s(fO);vUo=r(zmt,"Wav2Vec2ForXVector"),zmt.forEach(t),TUo=r(uLe," (Wav2Vec2 model)"),uLe.forEach(t),MUo=i(a5),gv=n(a5,"LI",{});var bLe=s(gv);lhe=n(bLe,"STRONG",{});var Qmt=s(lhe);EUo=r(Qmt,"wavlm"),Qmt.forEach(t),CUo=r(bLe," \u2014 "),mO=n(bLe,"A",{href:!0});var Wmt=s(mO);wUo=r(Wmt,"WavLMForXVector"),Wmt.forEach(t),AUo=r(bLe," (WavLM model)"),bLe.forEach(t),a5.forEach(t),yUo=i(ta),hv=n(ta,"P",{});var FLe=s(hv);LUo=r(FLe,"The model is set in evaluation mode by default using "),ihe=n(FLe,"CODE",{});var Hmt=s(ihe);xUo=r(Hmt,"model.eval()"),Hmt.forEach(t),kUo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(FLe,"CODE",{});var Umt=s(dhe);SUo=r(Umt,"model.train()"),Umt.forEach(t),FLe.forEach(t),RUo=i(ta),che=n(ta,"P",{});var Jmt=s(che);BUo=r(Jmt,"Examples:"),Jmt.forEach(t),PUo=i(ta),m(Pw.$$.fragment,ta),ta.forEach(t),kl.forEach(t),sPe=i(c),Zd=n(c,"H2",{class:!0});var _Ie=s(Zd);pv=n(_Ie,"A",{id:!0,class:!0,href:!0});var Ymt=s(pv);fhe=n(Ymt,"SPAN",{});var Kmt=s(fhe);m($w.$$.fragment,Kmt),Kmt.forEach(t),Ymt.forEach(t),$Uo=i(_Ie),mhe=n(_Ie,"SPAN",{});var Zmt=s(mhe);IUo=r(Zmt,"AutoModelForMaskedImageModeling"),Zmt.forEach(t),_Ie.forEach(t),lPe=i(c),hr=n(c,"DIV",{class:!0});var Rl=s(hr);m(Iw.$$.fragment,Rl),qUo=i(Rl),ec=n(Rl,"P",{});var MJ=s(ec);NUo=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),gO=n(MJ,"A",{href:!0});var egt=s(gO);jUo=r(egt,"from_pretrained()"),egt.forEach(t),DUo=r(MJ," class method or the "),hO=n(MJ,"A",{href:!0});var ogt=s(hO);GUo=r(ogt,"from_config()"),ogt.forEach(t),OUo=r(MJ,` class
method.`),MJ.forEach(t),VUo=i(Rl),qw=n(Rl,"P",{});var uIe=s(qw);XUo=r(uIe,"This class cannot be instantiated directly using "),ghe=n(uIe,"CODE",{});var rgt=s(ghe);zUo=r(rgt,"__init__()"),rgt.forEach(t),QUo=r(uIe," (throws an error)."),uIe.forEach(t),WUo=i(Rl),it=n(Rl,"DIV",{class:!0});var Bl=s(it);m(Nw.$$.fragment,Bl),HUo=i(Bl),hhe=n(Bl,"P",{});var tgt=s(hhe);UUo=r(tgt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tgt.forEach(t),JUo=i(Bl),oc=n(Bl,"P",{});var EJ=s(oc);YUo=r(EJ,`Note:
Loading a model from its configuration file does `),phe=n(EJ,"STRONG",{});var agt=s(phe);KUo=r(agt,"not"),agt.forEach(t),ZUo=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(EJ,"A",{href:!0});var ngt=s(pO);eJo=r(ngt,"from_pretrained()"),ngt.forEach(t),oJo=r(EJ," to load the model weights."),EJ.forEach(t),rJo=i(Bl),_he=n(Bl,"P",{});var sgt=s(_he);tJo=r(sgt,"Examples:"),sgt.forEach(t),aJo=i(Bl),m(jw.$$.fragment,Bl),Bl.forEach(t),nJo=i(Rl),ro=n(Rl,"DIV",{class:!0});var aa=s(ro);m(Dw.$$.fragment,aa),sJo=i(aa),uhe=n(aa,"P",{});var lgt=s(uhe);lJo=r(lgt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lgt.forEach(t),iJo=i(aa),fn=n(aa,"P",{});var n5=s(fn);dJo=r(n5,"The model class to instantiate is selected based on the "),bhe=n(n5,"CODE",{});var igt=s(bhe);cJo=r(igt,"model_type"),igt.forEach(t),fJo=r(n5,` property of the config object (either
passed as an argument or loaded from `),Fhe=n(n5,"CODE",{});var dgt=s(Fhe);mJo=r(dgt,"pretrained_model_name_or_path"),dgt.forEach(t),gJo=r(n5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vhe=n(n5,"CODE",{});var cgt=s(vhe);hJo=r(cgt,"pretrained_model_name_or_path"),cgt.forEach(t),pJo=r(n5,":"),n5.forEach(t),_Jo=i(aa),rc=n(aa,"UL",{});var CJ=s(rc);_v=n(CJ,"LI",{});var vLe=s(_v);The=n(vLe,"STRONG",{});var fgt=s(The);uJo=r(fgt,"deit"),fgt.forEach(t),bJo=r(vLe," \u2014 "),_O=n(vLe,"A",{href:!0});var mgt=s(_O);FJo=r(mgt,"DeiTForMaskedImageModeling"),mgt.forEach(t),vJo=r(vLe," (DeiT model)"),vLe.forEach(t),TJo=i(CJ),uv=n(CJ,"LI",{});var TLe=s(uv);Mhe=n(TLe,"STRONG",{});var ggt=s(Mhe);MJo=r(ggt,"swin"),ggt.forEach(t),EJo=r(TLe," \u2014 "),uO=n(TLe,"A",{href:!0});var hgt=s(uO);CJo=r(hgt,"SwinForMaskedImageModeling"),hgt.forEach(t),wJo=r(TLe," (Swin model)"),TLe.forEach(t),AJo=i(CJ),bv=n(CJ,"LI",{});var MLe=s(bv);Ehe=n(MLe,"STRONG",{});var pgt=s(Ehe);yJo=r(pgt,"vit"),pgt.forEach(t),LJo=r(MLe," \u2014 "),bO=n(MLe,"A",{href:!0});var _gt=s(bO);xJo=r(_gt,"ViTForMaskedImageModeling"),_gt.forEach(t),kJo=r(MLe," (ViT model)"),MLe.forEach(t),CJ.forEach(t),SJo=i(aa),Fv=n(aa,"P",{});var ELe=s(Fv);RJo=r(ELe,"The model is set in evaluation mode by default using "),Che=n(ELe,"CODE",{});var ugt=s(Che);BJo=r(ugt,"model.eval()"),ugt.forEach(t),PJo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),whe=n(ELe,"CODE",{});var bgt=s(whe);$Jo=r(bgt,"model.train()"),bgt.forEach(t),ELe.forEach(t),IJo=i(aa),Ahe=n(aa,"P",{});var Fgt=s(Ahe);qJo=r(Fgt,"Examples:"),Fgt.forEach(t),NJo=i(aa),m(Gw.$$.fragment,aa),aa.forEach(t),Rl.forEach(t),iPe=i(c),tc=n(c,"H2",{class:!0});var bIe=s(tc);vv=n(bIe,"A",{id:!0,class:!0,href:!0});var vgt=s(vv);yhe=n(vgt,"SPAN",{});var Tgt=s(yhe);m(Ow.$$.fragment,Tgt),Tgt.forEach(t),vgt.forEach(t),jJo=i(bIe),Lhe=n(bIe,"SPAN",{});var Mgt=s(Lhe);DJo=r(Mgt,"AutoModelForObjectDetection"),Mgt.forEach(t),bIe.forEach(t),dPe=i(c),pr=n(c,"DIV",{class:!0});var Pl=s(pr);m(Vw.$$.fragment,Pl),GJo=i(Pl),ac=n(Pl,"P",{});var wJ=s(ac);OJo=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),FO=n(wJ,"A",{href:!0});var Egt=s(FO);VJo=r(Egt,"from_pretrained()"),Egt.forEach(t),XJo=r(wJ," class method or the "),vO=n(wJ,"A",{href:!0});var Cgt=s(vO);zJo=r(Cgt,"from_config()"),Cgt.forEach(t),QJo=r(wJ,` class
method.`),wJ.forEach(t),WJo=i(Pl),Xw=n(Pl,"P",{});var FIe=s(Xw);HJo=r(FIe,"This class cannot be instantiated directly using "),xhe=n(FIe,"CODE",{});var wgt=s(xhe);UJo=r(wgt,"__init__()"),wgt.forEach(t),JJo=r(FIe," (throws an error)."),FIe.forEach(t),YJo=i(Pl),dt=n(Pl,"DIV",{class:!0});var $l=s(dt);m(zw.$$.fragment,$l),KJo=i($l),khe=n($l,"P",{});var Agt=s(khe);ZJo=r(Agt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Agt.forEach(t),eYo=i($l),nc=n($l,"P",{});var AJ=s(nc);oYo=r(AJ,`Note:
Loading a model from its configuration file does `),She=n(AJ,"STRONG",{});var ygt=s(She);rYo=r(ygt,"not"),ygt.forEach(t),tYo=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(AJ,"A",{href:!0});var Lgt=s(TO);aYo=r(Lgt,"from_pretrained()"),Lgt.forEach(t),nYo=r(AJ," to load the model weights."),AJ.forEach(t),sYo=i($l),Rhe=n($l,"P",{});var xgt=s(Rhe);lYo=r(xgt,"Examples:"),xgt.forEach(t),iYo=i($l),m(Qw.$$.fragment,$l),$l.forEach(t),dYo=i(Pl),to=n(Pl,"DIV",{class:!0});var na=s(to);m(Ww.$$.fragment,na),cYo=i(na),Bhe=n(na,"P",{});var kgt=s(Bhe);fYo=r(kgt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kgt.forEach(t),mYo=i(na),mn=n(na,"P",{});var s5=s(mn);gYo=r(s5,"The model class to instantiate is selected based on the "),Phe=n(s5,"CODE",{});var Sgt=s(Phe);hYo=r(Sgt,"model_type"),Sgt.forEach(t),pYo=r(s5,` property of the config object (either
passed as an argument or loaded from `),$he=n(s5,"CODE",{});var Rgt=s($he);_Yo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),uYo=r(s5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ihe=n(s5,"CODE",{});var Bgt=s(Ihe);bYo=r(Bgt,"pretrained_model_name_or_path"),Bgt.forEach(t),FYo=r(s5,":"),s5.forEach(t),vYo=i(na),qhe=n(na,"UL",{});var Pgt=s(qhe);Tv=n(Pgt,"LI",{});var CLe=s(Tv);Nhe=n(CLe,"STRONG",{});var $gt=s(Nhe);TYo=r($gt,"detr"),$gt.forEach(t),MYo=r(CLe," \u2014 "),MO=n(CLe,"A",{href:!0});var Igt=s(MO);EYo=r(Igt,"DetrForObjectDetection"),Igt.forEach(t),CYo=r(CLe," (DETR model)"),CLe.forEach(t),Pgt.forEach(t),wYo=i(na),Mv=n(na,"P",{});var wLe=s(Mv);AYo=r(wLe,"The model is set in evaluation mode by default using "),jhe=n(wLe,"CODE",{});var qgt=s(jhe);yYo=r(qgt,"model.eval()"),qgt.forEach(t),LYo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dhe=n(wLe,"CODE",{});var Ngt=s(Dhe);xYo=r(Ngt,"model.train()"),Ngt.forEach(t),wLe.forEach(t),kYo=i(na),Ghe=n(na,"P",{});var jgt=s(Ghe);SYo=r(jgt,"Examples:"),jgt.forEach(t),RYo=i(na),m(Hw.$$.fragment,na),na.forEach(t),Pl.forEach(t),cPe=i(c),sc=n(c,"H2",{class:!0});var vIe=s(sc);Ev=n(vIe,"A",{id:!0,class:!0,href:!0});var Dgt=s(Ev);Ohe=n(Dgt,"SPAN",{});var Ggt=s(Ohe);m(Uw.$$.fragment,Ggt),Ggt.forEach(t),Dgt.forEach(t),BYo=i(vIe),Vhe=n(vIe,"SPAN",{});var Ogt=s(Vhe);PYo=r(Ogt,"AutoModelForImageSegmentation"),Ogt.forEach(t),vIe.forEach(t),fPe=i(c),_r=n(c,"DIV",{class:!0});var Il=s(_r);m(Jw.$$.fragment,Il),$Yo=i(Il),lc=n(Il,"P",{});var yJ=s(lc);IYo=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),EO=n(yJ,"A",{href:!0});var Vgt=s(EO);qYo=r(Vgt,"from_pretrained()"),Vgt.forEach(t),NYo=r(yJ," class method or the "),CO=n(yJ,"A",{href:!0});var Xgt=s(CO);jYo=r(Xgt,"from_config()"),Xgt.forEach(t),DYo=r(yJ,` class
method.`),yJ.forEach(t),GYo=i(Il),Yw=n(Il,"P",{});var TIe=s(Yw);OYo=r(TIe,"This class cannot be instantiated directly using "),Xhe=n(TIe,"CODE",{});var zgt=s(Xhe);VYo=r(zgt,"__init__()"),zgt.forEach(t),XYo=r(TIe," (throws an error)."),TIe.forEach(t),zYo=i(Il),ct=n(Il,"DIV",{class:!0});var ql=s(ct);m(Kw.$$.fragment,ql),QYo=i(ql),zhe=n(ql,"P",{});var Qgt=s(zhe);WYo=r(Qgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qgt.forEach(t),HYo=i(ql),ic=n(ql,"P",{});var LJ=s(ic);UYo=r(LJ,`Note:
Loading a model from its configuration file does `),Qhe=n(LJ,"STRONG",{});var Wgt=s(Qhe);JYo=r(Wgt,"not"),Wgt.forEach(t),YYo=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(LJ,"A",{href:!0});var Hgt=s(wO);KYo=r(Hgt,"from_pretrained()"),Hgt.forEach(t),ZYo=r(LJ," to load the model weights."),LJ.forEach(t),eKo=i(ql),Whe=n(ql,"P",{});var Ugt=s(Whe);oKo=r(Ugt,"Examples:"),Ugt.forEach(t),rKo=i(ql),m(Zw.$$.fragment,ql),ql.forEach(t),tKo=i(Il),ao=n(Il,"DIV",{class:!0});var sa=s(ao);m(eA.$$.fragment,sa),aKo=i(sa),Hhe=n(sa,"P",{});var Jgt=s(Hhe);nKo=r(Jgt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jgt.forEach(t),sKo=i(sa),gn=n(sa,"P",{});var l5=s(gn);lKo=r(l5,"The model class to instantiate is selected based on the "),Uhe=n(l5,"CODE",{});var Ygt=s(Uhe);iKo=r(Ygt,"model_type"),Ygt.forEach(t),dKo=r(l5,` property of the config object (either
passed as an argument or loaded from `),Jhe=n(l5,"CODE",{});var Kgt=s(Jhe);cKo=r(Kgt,"pretrained_model_name_or_path"),Kgt.forEach(t),fKo=r(l5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yhe=n(l5,"CODE",{});var Zgt=s(Yhe);mKo=r(Zgt,"pretrained_model_name_or_path"),Zgt.forEach(t),gKo=r(l5,":"),l5.forEach(t),hKo=i(sa),Khe=n(sa,"UL",{});var eht=s(Khe);Cv=n(eht,"LI",{});var ALe=s(Cv);Zhe=n(ALe,"STRONG",{});var oht=s(Zhe);pKo=r(oht,"detr"),oht.forEach(t),_Ko=r(ALe," \u2014 "),AO=n(ALe,"A",{href:!0});var rht=s(AO);uKo=r(rht,"DetrForSegmentation"),rht.forEach(t),bKo=r(ALe," (DETR model)"),ALe.forEach(t),eht.forEach(t),FKo=i(sa),wv=n(sa,"P",{});var yLe=s(wv);vKo=r(yLe,"The model is set in evaluation mode by default using "),epe=n(yLe,"CODE",{});var tht=s(epe);TKo=r(tht,"model.eval()"),tht.forEach(t),MKo=r(yLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ope=n(yLe,"CODE",{});var aht=s(ope);EKo=r(aht,"model.train()"),aht.forEach(t),yLe.forEach(t),CKo=i(sa),rpe=n(sa,"P",{});var nht=s(rpe);wKo=r(nht,"Examples:"),nht.forEach(t),AKo=i(sa),m(oA.$$.fragment,sa),sa.forEach(t),Il.forEach(t),mPe=i(c),dc=n(c,"H2",{class:!0});var MIe=s(dc);Av=n(MIe,"A",{id:!0,class:!0,href:!0});var sht=s(Av);tpe=n(sht,"SPAN",{});var lht=s(tpe);m(rA.$$.fragment,lht),lht.forEach(t),sht.forEach(t),yKo=i(MIe),ape=n(MIe,"SPAN",{});var iht=s(ape);LKo=r(iht,"AutoModelForSemanticSegmentation"),iht.forEach(t),MIe.forEach(t),gPe=i(c),ur=n(c,"DIV",{class:!0});var Nl=s(ur);m(tA.$$.fragment,Nl),xKo=i(Nl),cc=n(Nl,"P",{});var xJ=s(cc);kKo=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),yO=n(xJ,"A",{href:!0});var dht=s(yO);SKo=r(dht,"from_pretrained()"),dht.forEach(t),RKo=r(xJ," class method or the "),LO=n(xJ,"A",{href:!0});var cht=s(LO);BKo=r(cht,"from_config()"),cht.forEach(t),PKo=r(xJ,` class
method.`),xJ.forEach(t),$Ko=i(Nl),aA=n(Nl,"P",{});var EIe=s(aA);IKo=r(EIe,"This class cannot be instantiated directly using "),npe=n(EIe,"CODE",{});var fht=s(npe);qKo=r(fht,"__init__()"),fht.forEach(t),NKo=r(EIe," (throws an error)."),EIe.forEach(t),jKo=i(Nl),ft=n(Nl,"DIV",{class:!0});var jl=s(ft);m(nA.$$.fragment,jl),DKo=i(jl),spe=n(jl,"P",{});var mht=s(spe);GKo=r(mht,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),mht.forEach(t),OKo=i(jl),fc=n(jl,"P",{});var kJ=s(fc);VKo=r(kJ,`Note:
Loading a model from its configuration file does `),lpe=n(kJ,"STRONG",{});var ght=s(lpe);XKo=r(ght,"not"),ght.forEach(t),zKo=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(kJ,"A",{href:!0});var hht=s(xO);QKo=r(hht,"from_pretrained()"),hht.forEach(t),WKo=r(kJ," to load the model weights."),kJ.forEach(t),HKo=i(jl),ipe=n(jl,"P",{});var pht=s(ipe);UKo=r(pht,"Examples:"),pht.forEach(t),JKo=i(jl),m(sA.$$.fragment,jl),jl.forEach(t),YKo=i(Nl),no=n(Nl,"DIV",{class:!0});var la=s(no);m(lA.$$.fragment,la),KKo=i(la),dpe=n(la,"P",{});var _ht=s(dpe);ZKo=r(_ht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_ht.forEach(t),eZo=i(la),hn=n(la,"P",{});var i5=s(hn);oZo=r(i5,"The model class to instantiate is selected based on the "),cpe=n(i5,"CODE",{});var uht=s(cpe);rZo=r(uht,"model_type"),uht.forEach(t),tZo=r(i5,` property of the config object (either
passed as an argument or loaded from `),fpe=n(i5,"CODE",{});var bht=s(fpe);aZo=r(bht,"pretrained_model_name_or_path"),bht.forEach(t),nZo=r(i5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(i5,"CODE",{});var Fht=s(mpe);sZo=r(Fht,"pretrained_model_name_or_path"),Fht.forEach(t),lZo=r(i5,":"),i5.forEach(t),iZo=i(la),pn=n(la,"UL",{});var d5=s(pn);yv=n(d5,"LI",{});var LLe=s(yv);gpe=n(LLe,"STRONG",{});var vht=s(gpe);dZo=r(vht,"beit"),vht.forEach(t),cZo=r(LLe," \u2014 "),kO=n(LLe,"A",{href:!0});var Tht=s(kO);fZo=r(Tht,"BeitForSemanticSegmentation"),Tht.forEach(t),mZo=r(LLe," (BEiT model)"),LLe.forEach(t),gZo=i(d5),Lv=n(d5,"LI",{});var xLe=s(Lv);hpe=n(xLe,"STRONG",{});var Mht=s(hpe);hZo=r(Mht,"data2vec-vision"),Mht.forEach(t),pZo=r(xLe," \u2014 "),SO=n(xLe,"A",{href:!0});var Eht=s(SO);_Zo=r(Eht,"Data2VecVisionForSemanticSegmentation"),Eht.forEach(t),uZo=r(xLe," (Data2VecVision model)"),xLe.forEach(t),bZo=i(d5),xv=n(d5,"LI",{});var kLe=s(xv);ppe=n(kLe,"STRONG",{});var Cht=s(ppe);FZo=r(Cht,"dpt"),Cht.forEach(t),vZo=r(kLe," \u2014 "),RO=n(kLe,"A",{href:!0});var wht=s(RO);TZo=r(wht,"DPTForSemanticSegmentation"),wht.forEach(t),MZo=r(kLe," (DPT model)"),kLe.forEach(t),EZo=i(d5),kv=n(d5,"LI",{});var SLe=s(kv);_pe=n(SLe,"STRONG",{});var Aht=s(_pe);CZo=r(Aht,"segformer"),Aht.forEach(t),wZo=r(SLe," \u2014 "),BO=n(SLe,"A",{href:!0});var yht=s(BO);AZo=r(yht,"SegformerForSemanticSegmentation"),yht.forEach(t),yZo=r(SLe," (SegFormer model)"),SLe.forEach(t),d5.forEach(t),LZo=i(la),Sv=n(la,"P",{});var RLe=s(Sv);xZo=r(RLe,"The model is set in evaluation mode by default using "),upe=n(RLe,"CODE",{});var Lht=s(upe);kZo=r(Lht,"model.eval()"),Lht.forEach(t),SZo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bpe=n(RLe,"CODE",{});var xht=s(bpe);RZo=r(xht,"model.train()"),xht.forEach(t),RLe.forEach(t),BZo=i(la),Fpe=n(la,"P",{});var kht=s(Fpe);PZo=r(kht,"Examples:"),kht.forEach(t),$Zo=i(la),m(iA.$$.fragment,la),la.forEach(t),Nl.forEach(t),hPe=i(c),mc=n(c,"H2",{class:!0});var CIe=s(mc);Rv=n(CIe,"A",{id:!0,class:!0,href:!0});var Sht=s(Rv);vpe=n(Sht,"SPAN",{});var Rht=s(vpe);m(dA.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),IZo=i(CIe),Tpe=n(CIe,"SPAN",{});var Bht=s(Tpe);qZo=r(Bht,"AutoModelForInstanceSegmentation"),Bht.forEach(t),CIe.forEach(t),pPe=i(c),br=n(c,"DIV",{class:!0});var Dl=s(br);m(cA.$$.fragment,Dl),NZo=i(Dl),gc=n(Dl,"P",{});var SJ=s(gc);jZo=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),PO=n(SJ,"A",{href:!0});var Pht=s(PO);DZo=r(Pht,"from_pretrained()"),Pht.forEach(t),GZo=r(SJ," class method or the "),$O=n(SJ,"A",{href:!0});var $ht=s($O);OZo=r($ht,"from_config()"),$ht.forEach(t),VZo=r(SJ,` class
method.`),SJ.forEach(t),XZo=i(Dl),fA=n(Dl,"P",{});var wIe=s(fA);zZo=r(wIe,"This class cannot be instantiated directly using "),Mpe=n(wIe,"CODE",{});var Iht=s(Mpe);QZo=r(Iht,"__init__()"),Iht.forEach(t),WZo=r(wIe," (throws an error)."),wIe.forEach(t),HZo=i(Dl),mt=n(Dl,"DIV",{class:!0});var Gl=s(mt);m(mA.$$.fragment,Gl),UZo=i(Gl),Epe=n(Gl,"P",{});var qht=s(Epe);JZo=r(qht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),qht.forEach(t),YZo=i(Gl),hc=n(Gl,"P",{});var RJ=s(hc);KZo=r(RJ,`Note:
Loading a model from its configuration file does `),Cpe=n(RJ,"STRONG",{});var Nht=s(Cpe);ZZo=r(Nht,"not"),Nht.forEach(t),eer=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(RJ,"A",{href:!0});var jht=s(IO);oer=r(jht,"from_pretrained()"),jht.forEach(t),rer=r(RJ," to load the model weights."),RJ.forEach(t),ter=i(Gl),wpe=n(Gl,"P",{});var Dht=s(wpe);aer=r(Dht,"Examples:"),Dht.forEach(t),ner=i(Gl),m(gA.$$.fragment,Gl),Gl.forEach(t),ser=i(Dl),so=n(Dl,"DIV",{class:!0});var ia=s(so);m(hA.$$.fragment,ia),ler=i(ia),Ape=n(ia,"P",{});var Ght=s(Ape);ier=r(Ght,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ght.forEach(t),der=i(ia),_n=n(ia,"P",{});var c5=s(_n);cer=r(c5,"The model class to instantiate is selected based on the "),ype=n(c5,"CODE",{});var Oht=s(ype);fer=r(Oht,"model_type"),Oht.forEach(t),mer=r(c5,` property of the config object (either
passed as an argument or loaded from `),Lpe=n(c5,"CODE",{});var Vht=s(Lpe);ger=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),her=r(c5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xpe=n(c5,"CODE",{});var Xht=s(xpe);per=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),_er=r(c5,":"),c5.forEach(t),uer=i(ia),kpe=n(ia,"UL",{});var zht=s(kpe);Bv=n(zht,"LI",{});var BLe=s(Bv);Spe=n(BLe,"STRONG",{});var Qht=s(Spe);ber=r(Qht,"maskformer"),Qht.forEach(t),Fer=r(BLe," \u2014 "),qO=n(BLe,"A",{href:!0});var Wht=s(qO);ver=r(Wht,"MaskFormerForInstanceSegmentation"),Wht.forEach(t),Ter=r(BLe," (MaskFormer model)"),BLe.forEach(t),zht.forEach(t),Mer=i(ia),Pv=n(ia,"P",{});var PLe=s(Pv);Eer=r(PLe,"The model is set in evaluation mode by default using "),Rpe=n(PLe,"CODE",{});var Hht=s(Rpe);Cer=r(Hht,"model.eval()"),Hht.forEach(t),wer=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bpe=n(PLe,"CODE",{});var Uht=s(Bpe);Aer=r(Uht,"model.train()"),Uht.forEach(t),PLe.forEach(t),yer=i(ia),Ppe=n(ia,"P",{});var Jht=s(Ppe);Ler=r(Jht,"Examples:"),Jht.forEach(t),xer=i(ia),m(pA.$$.fragment,ia),ia.forEach(t),Dl.forEach(t),_Pe=i(c),pc=n(c,"H2",{class:!0});var AIe=s(pc);$v=n(AIe,"A",{id:!0,class:!0,href:!0});var Yht=s($v);$pe=n(Yht,"SPAN",{});var Kht=s($pe);m(_A.$$.fragment,Kht),Kht.forEach(t),Yht.forEach(t),ker=i(AIe),Ipe=n(AIe,"SPAN",{});var Zht=s(Ipe);Ser=r(Zht,"TFAutoModel"),Zht.forEach(t),AIe.forEach(t),uPe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(uA.$$.fragment,Ol),Rer=i(Ol),_c=n(Ol,"P",{});var BJ=s(_c);Ber=r(BJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NO=n(BJ,"A",{href:!0});var ept=s(NO);Per=r(ept,"from_pretrained()"),ept.forEach(t),$er=r(BJ," class method or the "),jO=n(BJ,"A",{href:!0});var opt=s(jO);Ier=r(opt,"from_config()"),opt.forEach(t),qer=r(BJ,` class
method.`),BJ.forEach(t),Ner=i(Ol),bA=n(Ol,"P",{});var yIe=s(bA);jer=r(yIe,"This class cannot be instantiated directly using "),qpe=n(yIe,"CODE",{});var rpt=s(qpe);Der=r(rpt,"__init__()"),rpt.forEach(t),Ger=r(yIe," (throws an error)."),yIe.forEach(t),Oer=i(Ol),gt=n(Ol,"DIV",{class:!0});var Vl=s(gt);m(FA.$$.fragment,Vl),Ver=i(Vl),Npe=n(Vl,"P",{});var tpt=s(Npe);Xer=r(tpt,"Instantiates one of the base model classes of the library from a configuration."),tpt.forEach(t),zer=i(Vl),uc=n(Vl,"P",{});var PJ=s(uc);Qer=r(PJ,`Note:
Loading a model from its configuration file does `),jpe=n(PJ,"STRONG",{});var apt=s(jpe);Wer=r(apt,"not"),apt.forEach(t),Her=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(PJ,"A",{href:!0});var npt=s(DO);Uer=r(npt,"from_pretrained()"),npt.forEach(t),Jer=r(PJ," to load the model weights."),PJ.forEach(t),Yer=i(Vl),Dpe=n(Vl,"P",{});var spt=s(Dpe);Ker=r(spt,"Examples:"),spt.forEach(t),Zer=i(Vl),m(vA.$$.fragment,Vl),Vl.forEach(t),eor=i(Ol),ho=n(Ol,"DIV",{class:!0});var pa=s(ho);m(TA.$$.fragment,pa),oor=i(pa),Gpe=n(pa,"P",{});var lpt=s(Gpe);ror=r(lpt,"Instantiate one of the base model classes of the library from a pretrained model."),lpt.forEach(t),tor=i(pa),un=n(pa,"P",{});var f5=s(un);aor=r(f5,"The model class to instantiate is selected based on the "),Ope=n(f5,"CODE",{});var ipt=s(Ope);nor=r(ipt,"model_type"),ipt.forEach(t),sor=r(f5,` property of the config object (either
passed as an argument or loaded from `),Vpe=n(f5,"CODE",{});var dpt=s(Vpe);lor=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),ior=r(f5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xpe=n(f5,"CODE",{});var cpt=s(Xpe);dor=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),cor=r(f5,":"),f5.forEach(t),mor=i(pa),x=n(pa,"UL",{});var k=s(x);Iv=n(k,"LI",{});var $Le=s(Iv);zpe=n($Le,"STRONG",{});var fpt=s(zpe);gor=r(fpt,"albert"),fpt.forEach(t),hor=r($Le," \u2014 "),GO=n($Le,"A",{href:!0});var mpt=s(GO);por=r(mpt,"TFAlbertModel"),mpt.forEach(t),_or=r($Le," (ALBERT model)"),$Le.forEach(t),uor=i(k),qv=n(k,"LI",{});var ILe=s(qv);Qpe=n(ILe,"STRONG",{});var gpt=s(Qpe);bor=r(gpt,"bart"),gpt.forEach(t),For=r(ILe," \u2014 "),OO=n(ILe,"A",{href:!0});var hpt=s(OO);vor=r(hpt,"TFBartModel"),hpt.forEach(t),Tor=r(ILe," (BART model)"),ILe.forEach(t),Mor=i(k),Nv=n(k,"LI",{});var qLe=s(Nv);Wpe=n(qLe,"STRONG",{});var ppt=s(Wpe);Eor=r(ppt,"bert"),ppt.forEach(t),Cor=r(qLe," \u2014 "),VO=n(qLe,"A",{href:!0});var _pt=s(VO);wor=r(_pt,"TFBertModel"),_pt.forEach(t),Aor=r(qLe," (BERT model)"),qLe.forEach(t),yor=i(k),jv=n(k,"LI",{});var NLe=s(jv);Hpe=n(NLe,"STRONG",{});var upt=s(Hpe);Lor=r(upt,"blenderbot"),upt.forEach(t),xor=r(NLe," \u2014 "),XO=n(NLe,"A",{href:!0});var bpt=s(XO);kor=r(bpt,"TFBlenderbotModel"),bpt.forEach(t),Sor=r(NLe," (Blenderbot model)"),NLe.forEach(t),Ror=i(k),Dv=n(k,"LI",{});var jLe=s(Dv);Upe=n(jLe,"STRONG",{});var Fpt=s(Upe);Bor=r(Fpt,"blenderbot-small"),Fpt.forEach(t),Por=r(jLe," \u2014 "),zO=n(jLe,"A",{href:!0});var vpt=s(zO);$or=r(vpt,"TFBlenderbotSmallModel"),vpt.forEach(t),Ior=r(jLe," (BlenderbotSmall model)"),jLe.forEach(t),qor=i(k),Gv=n(k,"LI",{});var DLe=s(Gv);Jpe=n(DLe,"STRONG",{});var Tpt=s(Jpe);Nor=r(Tpt,"camembert"),Tpt.forEach(t),jor=r(DLe," \u2014 "),QO=n(DLe,"A",{href:!0});var Mpt=s(QO);Dor=r(Mpt,"TFCamembertModel"),Mpt.forEach(t),Gor=r(DLe," (CamemBERT model)"),DLe.forEach(t),Oor=i(k),Ov=n(k,"LI",{});var GLe=s(Ov);Ype=n(GLe,"STRONG",{});var Ept=s(Ype);Vor=r(Ept,"clip"),Ept.forEach(t),Xor=r(GLe," \u2014 "),WO=n(GLe,"A",{href:!0});var Cpt=s(WO);zor=r(Cpt,"TFCLIPModel"),Cpt.forEach(t),Qor=r(GLe," (CLIP model)"),GLe.forEach(t),Wor=i(k),Vv=n(k,"LI",{});var OLe=s(Vv);Kpe=n(OLe,"STRONG",{});var wpt=s(Kpe);Hor=r(wpt,"convbert"),wpt.forEach(t),Uor=r(OLe," \u2014 "),HO=n(OLe,"A",{href:!0});var Apt=s(HO);Jor=r(Apt,"TFConvBertModel"),Apt.forEach(t),Yor=r(OLe," (ConvBERT model)"),OLe.forEach(t),Kor=i(k),Xv=n(k,"LI",{});var VLe=s(Xv);Zpe=n(VLe,"STRONG",{});var ypt=s(Zpe);Zor=r(ypt,"convnext"),ypt.forEach(t),err=r(VLe," \u2014 "),UO=n(VLe,"A",{href:!0});var Lpt=s(UO);orr=r(Lpt,"TFConvNextModel"),Lpt.forEach(t),rrr=r(VLe," (ConvNext model)"),VLe.forEach(t),trr=i(k),zv=n(k,"LI",{});var XLe=s(zv);e_e=n(XLe,"STRONG",{});var xpt=s(e_e);arr=r(xpt,"ctrl"),xpt.forEach(t),nrr=r(XLe," \u2014 "),JO=n(XLe,"A",{href:!0});var kpt=s(JO);srr=r(kpt,"TFCTRLModel"),kpt.forEach(t),lrr=r(XLe," (CTRL model)"),XLe.forEach(t),irr=i(k),Qv=n(k,"LI",{});var zLe=s(Qv);o_e=n(zLe,"STRONG",{});var Spt=s(o_e);drr=r(Spt,"deberta"),Spt.forEach(t),crr=r(zLe," \u2014 "),YO=n(zLe,"A",{href:!0});var Rpt=s(YO);frr=r(Rpt,"TFDebertaModel"),Rpt.forEach(t),mrr=r(zLe," (DeBERTa model)"),zLe.forEach(t),grr=i(k),Wv=n(k,"LI",{});var QLe=s(Wv);r_e=n(QLe,"STRONG",{});var Bpt=s(r_e);hrr=r(Bpt,"deberta-v2"),Bpt.forEach(t),prr=r(QLe," \u2014 "),KO=n(QLe,"A",{href:!0});var Ppt=s(KO);_rr=r(Ppt,"TFDebertaV2Model"),Ppt.forEach(t),urr=r(QLe," (DeBERTa-v2 model)"),QLe.forEach(t),brr=i(k),Hv=n(k,"LI",{});var WLe=s(Hv);t_e=n(WLe,"STRONG",{});var $pt=s(t_e);Frr=r($pt,"distilbert"),$pt.forEach(t),vrr=r(WLe," \u2014 "),ZO=n(WLe,"A",{href:!0});var Ipt=s(ZO);Trr=r(Ipt,"TFDistilBertModel"),Ipt.forEach(t),Mrr=r(WLe," (DistilBERT model)"),WLe.forEach(t),Err=i(k),Uv=n(k,"LI",{});var HLe=s(Uv);a_e=n(HLe,"STRONG",{});var qpt=s(a_e);Crr=r(qpt,"dpr"),qpt.forEach(t),wrr=r(HLe," \u2014 "),eV=n(HLe,"A",{href:!0});var Npt=s(eV);Arr=r(Npt,"TFDPRQuestionEncoder"),Npt.forEach(t),yrr=r(HLe," (DPR model)"),HLe.forEach(t),Lrr=i(k),Jv=n(k,"LI",{});var ULe=s(Jv);n_e=n(ULe,"STRONG",{});var jpt=s(n_e);xrr=r(jpt,"electra"),jpt.forEach(t),krr=r(ULe," \u2014 "),oV=n(ULe,"A",{href:!0});var Dpt=s(oV);Srr=r(Dpt,"TFElectraModel"),Dpt.forEach(t),Rrr=r(ULe," (ELECTRA model)"),ULe.forEach(t),Brr=i(k),Yv=n(k,"LI",{});var JLe=s(Yv);s_e=n(JLe,"STRONG",{});var Gpt=s(s_e);Prr=r(Gpt,"flaubert"),Gpt.forEach(t),$rr=r(JLe," \u2014 "),rV=n(JLe,"A",{href:!0});var Opt=s(rV);Irr=r(Opt,"TFFlaubertModel"),Opt.forEach(t),qrr=r(JLe," (FlauBERT model)"),JLe.forEach(t),Nrr=i(k),Xs=n(k,"LI",{});var x8=s(Xs);l_e=n(x8,"STRONG",{});var Vpt=s(l_e);jrr=r(Vpt,"funnel"),Vpt.forEach(t),Drr=r(x8," \u2014 "),tV=n(x8,"A",{href:!0});var Xpt=s(tV);Grr=r(Xpt,"TFFunnelModel"),Xpt.forEach(t),Orr=r(x8," or "),aV=n(x8,"A",{href:!0});var zpt=s(aV);Vrr=r(zpt,"TFFunnelBaseModel"),zpt.forEach(t),Xrr=r(x8," (Funnel Transformer model)"),x8.forEach(t),zrr=i(k),Kv=n(k,"LI",{});var YLe=s(Kv);i_e=n(YLe,"STRONG",{});var Qpt=s(i_e);Qrr=r(Qpt,"gpt2"),Qpt.forEach(t),Wrr=r(YLe," \u2014 "),nV=n(YLe,"A",{href:!0});var Wpt=s(nV);Hrr=r(Wpt,"TFGPT2Model"),Wpt.forEach(t),Urr=r(YLe," (OpenAI GPT-2 model)"),YLe.forEach(t),Jrr=i(k),Zv=n(k,"LI",{});var KLe=s(Zv);d_e=n(KLe,"STRONG",{});var Hpt=s(d_e);Yrr=r(Hpt,"gptj"),Hpt.forEach(t),Krr=r(KLe," \u2014 "),sV=n(KLe,"A",{href:!0});var Upt=s(sV);Zrr=r(Upt,"TFGPTJModel"),Upt.forEach(t),etr=r(KLe," (GPT-J model)"),KLe.forEach(t),otr=i(k),eT=n(k,"LI",{});var ZLe=s(eT);c_e=n(ZLe,"STRONG",{});var Jpt=s(c_e);rtr=r(Jpt,"hubert"),Jpt.forEach(t),ttr=r(ZLe," \u2014 "),lV=n(ZLe,"A",{href:!0});var Ypt=s(lV);atr=r(Ypt,"TFHubertModel"),Ypt.forEach(t),ntr=r(ZLe," (Hubert model)"),ZLe.forEach(t),str=i(k),oT=n(k,"LI",{});var e8e=s(oT);f_e=n(e8e,"STRONG",{});var Kpt=s(f_e);ltr=r(Kpt,"layoutlm"),Kpt.forEach(t),itr=r(e8e," \u2014 "),iV=n(e8e,"A",{href:!0});var Zpt=s(iV);dtr=r(Zpt,"TFLayoutLMModel"),Zpt.forEach(t),ctr=r(e8e," (LayoutLM model)"),e8e.forEach(t),ftr=i(k),rT=n(k,"LI",{});var o8e=s(rT);m_e=n(o8e,"STRONG",{});var e_t=s(m_e);mtr=r(e_t,"led"),e_t.forEach(t),gtr=r(o8e," \u2014 "),dV=n(o8e,"A",{href:!0});var o_t=s(dV);htr=r(o_t,"TFLEDModel"),o_t.forEach(t),ptr=r(o8e," (LED model)"),o8e.forEach(t),_tr=i(k),tT=n(k,"LI",{});var r8e=s(tT);g_e=n(r8e,"STRONG",{});var r_t=s(g_e);utr=r(r_t,"longformer"),r_t.forEach(t),btr=r(r8e," \u2014 "),cV=n(r8e,"A",{href:!0});var t_t=s(cV);Ftr=r(t_t,"TFLongformerModel"),t_t.forEach(t),vtr=r(r8e," (Longformer model)"),r8e.forEach(t),Ttr=i(k),aT=n(k,"LI",{});var t8e=s(aT);h_e=n(t8e,"STRONG",{});var a_t=s(h_e);Mtr=r(a_t,"lxmert"),a_t.forEach(t),Etr=r(t8e," \u2014 "),fV=n(t8e,"A",{href:!0});var n_t=s(fV);Ctr=r(n_t,"TFLxmertModel"),n_t.forEach(t),wtr=r(t8e," (LXMERT model)"),t8e.forEach(t),Atr=i(k),nT=n(k,"LI",{});var a8e=s(nT);p_e=n(a8e,"STRONG",{});var s_t=s(p_e);ytr=r(s_t,"marian"),s_t.forEach(t),Ltr=r(a8e," \u2014 "),mV=n(a8e,"A",{href:!0});var l_t=s(mV);xtr=r(l_t,"TFMarianModel"),l_t.forEach(t),ktr=r(a8e," (Marian model)"),a8e.forEach(t),Str=i(k),sT=n(k,"LI",{});var n8e=s(sT);__e=n(n8e,"STRONG",{});var i_t=s(__e);Rtr=r(i_t,"mbart"),i_t.forEach(t),Btr=r(n8e," \u2014 "),gV=n(n8e,"A",{href:!0});var d_t=s(gV);Ptr=r(d_t,"TFMBartModel"),d_t.forEach(t),$tr=r(n8e," (mBART model)"),n8e.forEach(t),Itr=i(k),lT=n(k,"LI",{});var s8e=s(lT);u_e=n(s8e,"STRONG",{});var c_t=s(u_e);qtr=r(c_t,"mobilebert"),c_t.forEach(t),Ntr=r(s8e," \u2014 "),hV=n(s8e,"A",{href:!0});var f_t=s(hV);jtr=r(f_t,"TFMobileBertModel"),f_t.forEach(t),Dtr=r(s8e," (MobileBERT model)"),s8e.forEach(t),Gtr=i(k),iT=n(k,"LI",{});var l8e=s(iT);b_e=n(l8e,"STRONG",{});var m_t=s(b_e);Otr=r(m_t,"mpnet"),m_t.forEach(t),Vtr=r(l8e," \u2014 "),pV=n(l8e,"A",{href:!0});var g_t=s(pV);Xtr=r(g_t,"TFMPNetModel"),g_t.forEach(t),ztr=r(l8e," (MPNet model)"),l8e.forEach(t),Qtr=i(k),dT=n(k,"LI",{});var i8e=s(dT);F_e=n(i8e,"STRONG",{});var h_t=s(F_e);Wtr=r(h_t,"mt5"),h_t.forEach(t),Htr=r(i8e," \u2014 "),_V=n(i8e,"A",{href:!0});var p_t=s(_V);Utr=r(p_t,"TFMT5Model"),p_t.forEach(t),Jtr=r(i8e," (mT5 model)"),i8e.forEach(t),Ytr=i(k),cT=n(k,"LI",{});var d8e=s(cT);v_e=n(d8e,"STRONG",{});var __t=s(v_e);Ktr=r(__t,"openai-gpt"),__t.forEach(t),Ztr=r(d8e," \u2014 "),uV=n(d8e,"A",{href:!0});var u_t=s(uV);ear=r(u_t,"TFOpenAIGPTModel"),u_t.forEach(t),oar=r(d8e," (OpenAI GPT model)"),d8e.forEach(t),rar=i(k),fT=n(k,"LI",{});var c8e=s(fT);T_e=n(c8e,"STRONG",{});var b_t=s(T_e);tar=r(b_t,"pegasus"),b_t.forEach(t),aar=r(c8e," \u2014 "),bV=n(c8e,"A",{href:!0});var F_t=s(bV);nar=r(F_t,"TFPegasusModel"),F_t.forEach(t),sar=r(c8e," (Pegasus model)"),c8e.forEach(t),lar=i(k),mT=n(k,"LI",{});var f8e=s(mT);M_e=n(f8e,"STRONG",{});var v_t=s(M_e);iar=r(v_t,"rembert"),v_t.forEach(t),dar=r(f8e," \u2014 "),FV=n(f8e,"A",{href:!0});var T_t=s(FV);car=r(T_t,"TFRemBertModel"),T_t.forEach(t),far=r(f8e," (RemBERT model)"),f8e.forEach(t),mar=i(k),gT=n(k,"LI",{});var m8e=s(gT);E_e=n(m8e,"STRONG",{});var M_t=s(E_e);gar=r(M_t,"roberta"),M_t.forEach(t),har=r(m8e," \u2014 "),vV=n(m8e,"A",{href:!0});var E_t=s(vV);par=r(E_t,"TFRobertaModel"),E_t.forEach(t),_ar=r(m8e," (RoBERTa model)"),m8e.forEach(t),uar=i(k),hT=n(k,"LI",{});var g8e=s(hT);C_e=n(g8e,"STRONG",{});var C_t=s(C_e);bar=r(C_t,"roformer"),C_t.forEach(t),Far=r(g8e," \u2014 "),TV=n(g8e,"A",{href:!0});var w_t=s(TV);Tar=r(w_t,"TFRoFormerModel"),w_t.forEach(t),Mar=r(g8e," (RoFormer model)"),g8e.forEach(t),Ear=i(k),pT=n(k,"LI",{});var h8e=s(pT);w_e=n(h8e,"STRONG",{});var A_t=s(w_e);Car=r(A_t,"speech_to_text"),A_t.forEach(t),war=r(h8e," \u2014 "),MV=n(h8e,"A",{href:!0});var y_t=s(MV);Aar=r(y_t,"TFSpeech2TextModel"),y_t.forEach(t),yar=r(h8e," (Speech2Text model)"),h8e.forEach(t),Lar=i(k),_T=n(k,"LI",{});var p8e=s(_T);A_e=n(p8e,"STRONG",{});var L_t=s(A_e);xar=r(L_t,"t5"),L_t.forEach(t),kar=r(p8e," \u2014 "),EV=n(p8e,"A",{href:!0});var x_t=s(EV);Sar=r(x_t,"TFT5Model"),x_t.forEach(t),Rar=r(p8e," (T5 model)"),p8e.forEach(t),Bar=i(k),uT=n(k,"LI",{});var _8e=s(uT);y_e=n(_8e,"STRONG",{});var k_t=s(y_e);Par=r(k_t,"tapas"),k_t.forEach(t),$ar=r(_8e," \u2014 "),CV=n(_8e,"A",{href:!0});var S_t=s(CV);Iar=r(S_t,"TFTapasModel"),S_t.forEach(t),qar=r(_8e," (TAPAS model)"),_8e.forEach(t),Nar=i(k),bT=n(k,"LI",{});var u8e=s(bT);L_e=n(u8e,"STRONG",{});var R_t=s(L_e);jar=r(R_t,"transfo-xl"),R_t.forEach(t),Dar=r(u8e," \u2014 "),wV=n(u8e,"A",{href:!0});var B_t=s(wV);Gar=r(B_t,"TFTransfoXLModel"),B_t.forEach(t),Oar=r(u8e," (Transformer-XL model)"),u8e.forEach(t),Var=i(k),FT=n(k,"LI",{});var b8e=s(FT);x_e=n(b8e,"STRONG",{});var P_t=s(x_e);Xar=r(P_t,"vit"),P_t.forEach(t),zar=r(b8e," \u2014 "),AV=n(b8e,"A",{href:!0});var $_t=s(AV);Qar=r($_t,"TFViTModel"),$_t.forEach(t),War=r(b8e," (ViT model)"),b8e.forEach(t),Har=i(k),vT=n(k,"LI",{});var F8e=s(vT);k_e=n(F8e,"STRONG",{});var I_t=s(k_e);Uar=r(I_t,"vit_mae"),I_t.forEach(t),Jar=r(F8e," \u2014 "),yV=n(F8e,"A",{href:!0});var q_t=s(yV);Yar=r(q_t,"TFViTMAEModel"),q_t.forEach(t),Kar=r(F8e," (ViTMAE model)"),F8e.forEach(t),Zar=i(k),TT=n(k,"LI",{});var v8e=s(TT);S_e=n(v8e,"STRONG",{});var N_t=s(S_e);enr=r(N_t,"wav2vec2"),N_t.forEach(t),onr=r(v8e," \u2014 "),LV=n(v8e,"A",{href:!0});var j_t=s(LV);rnr=r(j_t,"TFWav2Vec2Model"),j_t.forEach(t),tnr=r(v8e," (Wav2Vec2 model)"),v8e.forEach(t),anr=i(k),MT=n(k,"LI",{});var T8e=s(MT);R_e=n(T8e,"STRONG",{});var D_t=s(R_e);nnr=r(D_t,"xlm"),D_t.forEach(t),snr=r(T8e," \u2014 "),xV=n(T8e,"A",{href:!0});var G_t=s(xV);lnr=r(G_t,"TFXLMModel"),G_t.forEach(t),inr=r(T8e," (XLM model)"),T8e.forEach(t),dnr=i(k),ET=n(k,"LI",{});var M8e=s(ET);B_e=n(M8e,"STRONG",{});var O_t=s(B_e);cnr=r(O_t,"xlm-roberta"),O_t.forEach(t),fnr=r(M8e," \u2014 "),kV=n(M8e,"A",{href:!0});var V_t=s(kV);mnr=r(V_t,"TFXLMRobertaModel"),V_t.forEach(t),gnr=r(M8e," (XLM-RoBERTa model)"),M8e.forEach(t),hnr=i(k),CT=n(k,"LI",{});var E8e=s(CT);P_e=n(E8e,"STRONG",{});var X_t=s(P_e);pnr=r(X_t,"xlnet"),X_t.forEach(t),_nr=r(E8e," \u2014 "),SV=n(E8e,"A",{href:!0});var z_t=s(SV);unr=r(z_t,"TFXLNetModel"),z_t.forEach(t),bnr=r(E8e," (XLNet model)"),E8e.forEach(t),k.forEach(t),Fnr=i(pa),$_e=n(pa,"P",{});var Q_t=s($_e);vnr=r(Q_t,"Examples:"),Q_t.forEach(t),Tnr=i(pa),m(MA.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),bPe=i(c),bc=n(c,"H2",{class:!0});var LIe=s(bc);wT=n(LIe,"A",{id:!0,class:!0,href:!0});var W_t=s(wT);I_e=n(W_t,"SPAN",{});var H_t=s(I_e);m(EA.$$.fragment,H_t),H_t.forEach(t),W_t.forEach(t),Mnr=i(LIe),q_e=n(LIe,"SPAN",{});var U_t=s(q_e);Enr=r(U_t,"TFAutoModelForPreTraining"),U_t.forEach(t),LIe.forEach(t),FPe=i(c),vr=n(c,"DIV",{class:!0});var Xl=s(vr);m(CA.$$.fragment,Xl),Cnr=i(Xl),Fc=n(Xl,"P",{});var $J=s(Fc);wnr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),RV=n($J,"A",{href:!0});var J_t=s(RV);Anr=r(J_t,"from_pretrained()"),J_t.forEach(t),ynr=r($J," class method or the "),BV=n($J,"A",{href:!0});var Y_t=s(BV);Lnr=r(Y_t,"from_config()"),Y_t.forEach(t),xnr=r($J,` class
method.`),$J.forEach(t),knr=i(Xl),wA=n(Xl,"P",{});var xIe=s(wA);Snr=r(xIe,"This class cannot be instantiated directly using "),N_e=n(xIe,"CODE",{});var K_t=s(N_e);Rnr=r(K_t,"__init__()"),K_t.forEach(t),Bnr=r(xIe," (throws an error)."),xIe.forEach(t),Pnr=i(Xl),ht=n(Xl,"DIV",{class:!0});var zl=s(ht);m(AA.$$.fragment,zl),$nr=i(zl),j_e=n(zl,"P",{});var Z_t=s(j_e);Inr=r(Z_t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Z_t.forEach(t),qnr=i(zl),vc=n(zl,"P",{});var IJ=s(vc);Nnr=r(IJ,`Note:
Loading a model from its configuration file does `),D_e=n(IJ,"STRONG",{});var eut=s(D_e);jnr=r(eut,"not"),eut.forEach(t),Dnr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(IJ,"A",{href:!0});var out=s(PV);Gnr=r(out,"from_pretrained()"),out.forEach(t),Onr=r(IJ," to load the model weights."),IJ.forEach(t),Vnr=i(zl),G_e=n(zl,"P",{});var rut=s(G_e);Xnr=r(rut,"Examples:"),rut.forEach(t),znr=i(zl),m(yA.$$.fragment,zl),zl.forEach(t),Qnr=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);m(LA.$$.fragment,_a),Wnr=i(_a),O_e=n(_a,"P",{});var tut=s(O_e);Hnr=r(tut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),tut.forEach(t),Unr=i(_a),bn=n(_a,"P",{});var m5=s(bn);Jnr=r(m5,"The model class to instantiate is selected based on the "),V_e=n(m5,"CODE",{});var aut=s(V_e);Ynr=r(aut,"model_type"),aut.forEach(t),Knr=r(m5,` property of the config object (either
passed as an argument or loaded from `),X_e=n(m5,"CODE",{});var nut=s(X_e);Znr=r(nut,"pretrained_model_name_or_path"),nut.forEach(t),esr=r(m5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(m5,"CODE",{});var sut=s(z_e);osr=r(sut,"pretrained_model_name_or_path"),sut.forEach(t),rsr=r(m5,":"),m5.forEach(t),tsr=i(_a),H=n(_a,"UL",{});var U=s(H);AT=n(U,"LI",{});var C8e=s(AT);Q_e=n(C8e,"STRONG",{});var lut=s(Q_e);asr=r(lut,"albert"),lut.forEach(t),nsr=r(C8e," \u2014 "),$V=n(C8e,"A",{href:!0});var iut=s($V);ssr=r(iut,"TFAlbertForPreTraining"),iut.forEach(t),lsr=r(C8e," (ALBERT model)"),C8e.forEach(t),isr=i(U),yT=n(U,"LI",{});var w8e=s(yT);W_e=n(w8e,"STRONG",{});var dut=s(W_e);dsr=r(dut,"bart"),dut.forEach(t),csr=r(w8e," \u2014 "),IV=n(w8e,"A",{href:!0});var cut=s(IV);fsr=r(cut,"TFBartForConditionalGeneration"),cut.forEach(t),msr=r(w8e," (BART model)"),w8e.forEach(t),gsr=i(U),LT=n(U,"LI",{});var A8e=s(LT);H_e=n(A8e,"STRONG",{});var fut=s(H_e);hsr=r(fut,"bert"),fut.forEach(t),psr=r(A8e," \u2014 "),qV=n(A8e,"A",{href:!0});var mut=s(qV);_sr=r(mut,"TFBertForPreTraining"),mut.forEach(t),usr=r(A8e," (BERT model)"),A8e.forEach(t),bsr=i(U),xT=n(U,"LI",{});var y8e=s(xT);U_e=n(y8e,"STRONG",{});var gut=s(U_e);Fsr=r(gut,"camembert"),gut.forEach(t),vsr=r(y8e," \u2014 "),NV=n(y8e,"A",{href:!0});var hut=s(NV);Tsr=r(hut,"TFCamembertForMaskedLM"),hut.forEach(t),Msr=r(y8e," (CamemBERT model)"),y8e.forEach(t),Esr=i(U),kT=n(U,"LI",{});var L8e=s(kT);J_e=n(L8e,"STRONG",{});var put=s(J_e);Csr=r(put,"ctrl"),put.forEach(t),wsr=r(L8e," \u2014 "),jV=n(L8e,"A",{href:!0});var _ut=s(jV);Asr=r(_ut,"TFCTRLLMHeadModel"),_ut.forEach(t),ysr=r(L8e," (CTRL model)"),L8e.forEach(t),Lsr=i(U),ST=n(U,"LI",{});var x8e=s(ST);Y_e=n(x8e,"STRONG",{});var uut=s(Y_e);xsr=r(uut,"distilbert"),uut.forEach(t),ksr=r(x8e," \u2014 "),DV=n(x8e,"A",{href:!0});var but=s(DV);Ssr=r(but,"TFDistilBertForMaskedLM"),but.forEach(t),Rsr=r(x8e," (DistilBERT model)"),x8e.forEach(t),Bsr=i(U),RT=n(U,"LI",{});var k8e=s(RT);K_e=n(k8e,"STRONG",{});var Fut=s(K_e);Psr=r(Fut,"electra"),Fut.forEach(t),$sr=r(k8e," \u2014 "),GV=n(k8e,"A",{href:!0});var vut=s(GV);Isr=r(vut,"TFElectraForPreTraining"),vut.forEach(t),qsr=r(k8e," (ELECTRA model)"),k8e.forEach(t),Nsr=i(U),BT=n(U,"LI",{});var S8e=s(BT);Z_e=n(S8e,"STRONG",{});var Tut=s(Z_e);jsr=r(Tut,"flaubert"),Tut.forEach(t),Dsr=r(S8e," \u2014 "),OV=n(S8e,"A",{href:!0});var Mut=s(OV);Gsr=r(Mut,"TFFlaubertWithLMHeadModel"),Mut.forEach(t),Osr=r(S8e," (FlauBERT model)"),S8e.forEach(t),Vsr=i(U),PT=n(U,"LI",{});var R8e=s(PT);eue=n(R8e,"STRONG",{});var Eut=s(eue);Xsr=r(Eut,"funnel"),Eut.forEach(t),zsr=r(R8e," \u2014 "),VV=n(R8e,"A",{href:!0});var Cut=s(VV);Qsr=r(Cut,"TFFunnelForPreTraining"),Cut.forEach(t),Wsr=r(R8e," (Funnel Transformer model)"),R8e.forEach(t),Hsr=i(U),$T=n(U,"LI",{});var B8e=s($T);oue=n(B8e,"STRONG",{});var wut=s(oue);Usr=r(wut,"gpt2"),wut.forEach(t),Jsr=r(B8e," \u2014 "),XV=n(B8e,"A",{href:!0});var Aut=s(XV);Ysr=r(Aut,"TFGPT2LMHeadModel"),Aut.forEach(t),Ksr=r(B8e," (OpenAI GPT-2 model)"),B8e.forEach(t),Zsr=i(U),IT=n(U,"LI",{});var P8e=s(IT);rue=n(P8e,"STRONG",{});var yut=s(rue);elr=r(yut,"layoutlm"),yut.forEach(t),olr=r(P8e," \u2014 "),zV=n(P8e,"A",{href:!0});var Lut=s(zV);rlr=r(Lut,"TFLayoutLMForMaskedLM"),Lut.forEach(t),tlr=r(P8e," (LayoutLM model)"),P8e.forEach(t),alr=i(U),qT=n(U,"LI",{});var $8e=s(qT);tue=n($8e,"STRONG",{});var xut=s(tue);nlr=r(xut,"lxmert"),xut.forEach(t),slr=r($8e," \u2014 "),QV=n($8e,"A",{href:!0});var kut=s(QV);llr=r(kut,"TFLxmertForPreTraining"),kut.forEach(t),ilr=r($8e," (LXMERT model)"),$8e.forEach(t),dlr=i(U),NT=n(U,"LI",{});var I8e=s(NT);aue=n(I8e,"STRONG",{});var Sut=s(aue);clr=r(Sut,"mobilebert"),Sut.forEach(t),flr=r(I8e," \u2014 "),WV=n(I8e,"A",{href:!0});var Rut=s(WV);mlr=r(Rut,"TFMobileBertForPreTraining"),Rut.forEach(t),glr=r(I8e," (MobileBERT model)"),I8e.forEach(t),hlr=i(U),jT=n(U,"LI",{});var q8e=s(jT);nue=n(q8e,"STRONG",{});var But=s(nue);plr=r(But,"mpnet"),But.forEach(t),_lr=r(q8e," \u2014 "),HV=n(q8e,"A",{href:!0});var Put=s(HV);ulr=r(Put,"TFMPNetForMaskedLM"),Put.forEach(t),blr=r(q8e," (MPNet model)"),q8e.forEach(t),Flr=i(U),DT=n(U,"LI",{});var N8e=s(DT);sue=n(N8e,"STRONG",{});var $ut=s(sue);vlr=r($ut,"openai-gpt"),$ut.forEach(t),Tlr=r(N8e," \u2014 "),UV=n(N8e,"A",{href:!0});var Iut=s(UV);Mlr=r(Iut,"TFOpenAIGPTLMHeadModel"),Iut.forEach(t),Elr=r(N8e," (OpenAI GPT model)"),N8e.forEach(t),Clr=i(U),GT=n(U,"LI",{});var j8e=s(GT);lue=n(j8e,"STRONG",{});var qut=s(lue);wlr=r(qut,"roberta"),qut.forEach(t),Alr=r(j8e," \u2014 "),JV=n(j8e,"A",{href:!0});var Nut=s(JV);ylr=r(Nut,"TFRobertaForMaskedLM"),Nut.forEach(t),Llr=r(j8e," (RoBERTa model)"),j8e.forEach(t),xlr=i(U),OT=n(U,"LI",{});var D8e=s(OT);iue=n(D8e,"STRONG",{});var jut=s(iue);klr=r(jut,"t5"),jut.forEach(t),Slr=r(D8e," \u2014 "),YV=n(D8e,"A",{href:!0});var Dut=s(YV);Rlr=r(Dut,"TFT5ForConditionalGeneration"),Dut.forEach(t),Blr=r(D8e," (T5 model)"),D8e.forEach(t),Plr=i(U),VT=n(U,"LI",{});var G8e=s(VT);due=n(G8e,"STRONG",{});var Gut=s(due);$lr=r(Gut,"tapas"),Gut.forEach(t),Ilr=r(G8e," \u2014 "),KV=n(G8e,"A",{href:!0});var Out=s(KV);qlr=r(Out,"TFTapasForMaskedLM"),Out.forEach(t),Nlr=r(G8e," (TAPAS model)"),G8e.forEach(t),jlr=i(U),XT=n(U,"LI",{});var O8e=s(XT);cue=n(O8e,"STRONG",{});var Vut=s(cue);Dlr=r(Vut,"transfo-xl"),Vut.forEach(t),Glr=r(O8e," \u2014 "),ZV=n(O8e,"A",{href:!0});var Xut=s(ZV);Olr=r(Xut,"TFTransfoXLLMHeadModel"),Xut.forEach(t),Vlr=r(O8e," (Transformer-XL model)"),O8e.forEach(t),Xlr=i(U),zT=n(U,"LI",{});var V8e=s(zT);fue=n(V8e,"STRONG",{});var zut=s(fue);zlr=r(zut,"vit_mae"),zut.forEach(t),Qlr=r(V8e," \u2014 "),eX=n(V8e,"A",{href:!0});var Qut=s(eX);Wlr=r(Qut,"TFViTMAEForPreTraining"),Qut.forEach(t),Hlr=r(V8e," (ViTMAE model)"),V8e.forEach(t),Ulr=i(U),QT=n(U,"LI",{});var X8e=s(QT);mue=n(X8e,"STRONG",{});var Wut=s(mue);Jlr=r(Wut,"xlm"),Wut.forEach(t),Ylr=r(X8e," \u2014 "),oX=n(X8e,"A",{href:!0});var Hut=s(oX);Klr=r(Hut,"TFXLMWithLMHeadModel"),Hut.forEach(t),Zlr=r(X8e," (XLM model)"),X8e.forEach(t),eir=i(U),WT=n(U,"LI",{});var z8e=s(WT);gue=n(z8e,"STRONG",{});var Uut=s(gue);oir=r(Uut,"xlm-roberta"),Uut.forEach(t),rir=r(z8e," \u2014 "),rX=n(z8e,"A",{href:!0});var Jut=s(rX);tir=r(Jut,"TFXLMRobertaForMaskedLM"),Jut.forEach(t),air=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),nir=i(U),HT=n(U,"LI",{});var Q8e=s(HT);hue=n(Q8e,"STRONG",{});var Yut=s(hue);sir=r(Yut,"xlnet"),Yut.forEach(t),lir=r(Q8e," \u2014 "),tX=n(Q8e,"A",{href:!0});var Kut=s(tX);iir=r(Kut,"TFXLNetLMHeadModel"),Kut.forEach(t),dir=r(Q8e," (XLNet model)"),Q8e.forEach(t),U.forEach(t),cir=i(_a),pue=n(_a,"P",{});var Zut=s(pue);fir=r(Zut,"Examples:"),Zut.forEach(t),mir=i(_a),m(xA.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),vPe=i(c),Tc=n(c,"H2",{class:!0});var kIe=s(Tc);UT=n(kIe,"A",{id:!0,class:!0,href:!0});var e2t=s(UT);_ue=n(e2t,"SPAN",{});var o2t=s(_ue);m(kA.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),gir=i(kIe),uue=n(kIe,"SPAN",{});var r2t=s(uue);hir=r(r2t,"TFAutoModelForCausalLM"),r2t.forEach(t),kIe.forEach(t),TPe=i(c),Tr=n(c,"DIV",{class:!0});var Ql=s(Tr);m(SA.$$.fragment,Ql),pir=i(Ql),Mc=n(Ql,"P",{});var qJ=s(Mc);_ir=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aX=n(qJ,"A",{href:!0});var t2t=s(aX);uir=r(t2t,"from_pretrained()"),t2t.forEach(t),bir=r(qJ," class method or the "),nX=n(qJ,"A",{href:!0});var a2t=s(nX);Fir=r(a2t,"from_config()"),a2t.forEach(t),vir=r(qJ,` class
method.`),qJ.forEach(t),Tir=i(Ql),RA=n(Ql,"P",{});var SIe=s(RA);Mir=r(SIe,"This class cannot be instantiated directly using "),bue=n(SIe,"CODE",{});var n2t=s(bue);Eir=r(n2t,"__init__()"),n2t.forEach(t),Cir=r(SIe," (throws an error)."),SIe.forEach(t),wir=i(Ql),pt=n(Ql,"DIV",{class:!0});var Wl=s(pt);m(BA.$$.fragment,Wl),Air=i(Wl),Fue=n(Wl,"P",{});var s2t=s(Fue);yir=r(s2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s2t.forEach(t),Lir=i(Wl),Ec=n(Wl,"P",{});var NJ=s(Ec);xir=r(NJ,`Note:
Loading a model from its configuration file does `),vue=n(NJ,"STRONG",{});var l2t=s(vue);kir=r(l2t,"not"),l2t.forEach(t),Sir=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(NJ,"A",{href:!0});var i2t=s(sX);Rir=r(i2t,"from_pretrained()"),i2t.forEach(t),Bir=r(NJ," to load the model weights."),NJ.forEach(t),Pir=i(Wl),Tue=n(Wl,"P",{});var d2t=s(Tue);$ir=r(d2t,"Examples:"),d2t.forEach(t),Iir=i(Wl),m(PA.$$.fragment,Wl),Wl.forEach(t),qir=i(Ql),_o=n(Ql,"DIV",{class:!0});var ua=s(_o);m($A.$$.fragment,ua),Nir=i(ua),Mue=n(ua,"P",{});var c2t=s(Mue);jir=r(c2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),c2t.forEach(t),Dir=i(ua),Fn=n(ua,"P",{});var g5=s(Fn);Gir=r(g5,"The model class to instantiate is selected based on the "),Eue=n(g5,"CODE",{});var f2t=s(Eue);Oir=r(f2t,"model_type"),f2t.forEach(t),Vir=r(g5,` property of the config object (either
passed as an argument or loaded from `),Cue=n(g5,"CODE",{});var m2t=s(Cue);Xir=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),zir=r(g5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(g5,"CODE",{});var g2t=s(wue);Qir=r(g2t,"pretrained_model_name_or_path"),g2t.forEach(t),Wir=r(g5,":"),g5.forEach(t),Hir=i(ua),me=n(ua,"UL",{});var _e=s(me);JT=n(_e,"LI",{});var W8e=s(JT);Aue=n(W8e,"STRONG",{});var h2t=s(Aue);Uir=r(h2t,"bert"),h2t.forEach(t),Jir=r(W8e," \u2014 "),lX=n(W8e,"A",{href:!0});var p2t=s(lX);Yir=r(p2t,"TFBertLMHeadModel"),p2t.forEach(t),Kir=r(W8e," (BERT model)"),W8e.forEach(t),Zir=i(_e),YT=n(_e,"LI",{});var H8e=s(YT);yue=n(H8e,"STRONG",{});var _2t=s(yue);edr=r(_2t,"camembert"),_2t.forEach(t),odr=r(H8e," \u2014 "),iX=n(H8e,"A",{href:!0});var u2t=s(iX);rdr=r(u2t,"TFCamembertForCausalLM"),u2t.forEach(t),tdr=r(H8e," (CamemBERT model)"),H8e.forEach(t),adr=i(_e),KT=n(_e,"LI",{});var U8e=s(KT);Lue=n(U8e,"STRONG",{});var b2t=s(Lue);ndr=r(b2t,"ctrl"),b2t.forEach(t),sdr=r(U8e," \u2014 "),dX=n(U8e,"A",{href:!0});var F2t=s(dX);ldr=r(F2t,"TFCTRLLMHeadModel"),F2t.forEach(t),idr=r(U8e," (CTRL model)"),U8e.forEach(t),ddr=i(_e),ZT=n(_e,"LI",{});var J8e=s(ZT);xue=n(J8e,"STRONG",{});var v2t=s(xue);cdr=r(v2t,"gpt2"),v2t.forEach(t),fdr=r(J8e," \u2014 "),cX=n(J8e,"A",{href:!0});var T2t=s(cX);mdr=r(T2t,"TFGPT2LMHeadModel"),T2t.forEach(t),gdr=r(J8e," (OpenAI GPT-2 model)"),J8e.forEach(t),hdr=i(_e),e7=n(_e,"LI",{});var Y8e=s(e7);kue=n(Y8e,"STRONG",{});var M2t=s(kue);pdr=r(M2t,"gptj"),M2t.forEach(t),_dr=r(Y8e," \u2014 "),fX=n(Y8e,"A",{href:!0});var E2t=s(fX);udr=r(E2t,"TFGPTJForCausalLM"),E2t.forEach(t),bdr=r(Y8e," (GPT-J model)"),Y8e.forEach(t),Fdr=i(_e),o7=n(_e,"LI",{});var K8e=s(o7);Sue=n(K8e,"STRONG",{});var C2t=s(Sue);vdr=r(C2t,"openai-gpt"),C2t.forEach(t),Tdr=r(K8e," \u2014 "),mX=n(K8e,"A",{href:!0});var w2t=s(mX);Mdr=r(w2t,"TFOpenAIGPTLMHeadModel"),w2t.forEach(t),Edr=r(K8e," (OpenAI GPT model)"),K8e.forEach(t),Cdr=i(_e),r7=n(_e,"LI",{});var Z8e=s(r7);Rue=n(Z8e,"STRONG",{});var A2t=s(Rue);wdr=r(A2t,"rembert"),A2t.forEach(t),Adr=r(Z8e," \u2014 "),gX=n(Z8e,"A",{href:!0});var y2t=s(gX);ydr=r(y2t,"TFRemBertForCausalLM"),y2t.forEach(t),Ldr=r(Z8e," (RemBERT model)"),Z8e.forEach(t),xdr=i(_e),t7=n(_e,"LI",{});var exe=s(t7);Bue=n(exe,"STRONG",{});var L2t=s(Bue);kdr=r(L2t,"roberta"),L2t.forEach(t),Sdr=r(exe," \u2014 "),hX=n(exe,"A",{href:!0});var x2t=s(hX);Rdr=r(x2t,"TFRobertaForCausalLM"),x2t.forEach(t),Bdr=r(exe," (RoBERTa model)"),exe.forEach(t),Pdr=i(_e),a7=n(_e,"LI",{});var oxe=s(a7);Pue=n(oxe,"STRONG",{});var k2t=s(Pue);$dr=r(k2t,"roformer"),k2t.forEach(t),Idr=r(oxe," \u2014 "),pX=n(oxe,"A",{href:!0});var S2t=s(pX);qdr=r(S2t,"TFRoFormerForCausalLM"),S2t.forEach(t),Ndr=r(oxe," (RoFormer model)"),oxe.forEach(t),jdr=i(_e),n7=n(_e,"LI",{});var rxe=s(n7);$ue=n(rxe,"STRONG",{});var R2t=s($ue);Ddr=r(R2t,"transfo-xl"),R2t.forEach(t),Gdr=r(rxe," \u2014 "),_X=n(rxe,"A",{href:!0});var B2t=s(_X);Odr=r(B2t,"TFTransfoXLLMHeadModel"),B2t.forEach(t),Vdr=r(rxe," (Transformer-XL model)"),rxe.forEach(t),Xdr=i(_e),s7=n(_e,"LI",{});var txe=s(s7);Iue=n(txe,"STRONG",{});var P2t=s(Iue);zdr=r(P2t,"xlm"),P2t.forEach(t),Qdr=r(txe," \u2014 "),uX=n(txe,"A",{href:!0});var $2t=s(uX);Wdr=r($2t,"TFXLMWithLMHeadModel"),$2t.forEach(t),Hdr=r(txe," (XLM model)"),txe.forEach(t),Udr=i(_e),l7=n(_e,"LI",{});var axe=s(l7);que=n(axe,"STRONG",{});var I2t=s(que);Jdr=r(I2t,"xlnet"),I2t.forEach(t),Ydr=r(axe," \u2014 "),bX=n(axe,"A",{href:!0});var q2t=s(bX);Kdr=r(q2t,"TFXLNetLMHeadModel"),q2t.forEach(t),Zdr=r(axe," (XLNet model)"),axe.forEach(t),_e.forEach(t),ecr=i(ua),Nue=n(ua,"P",{});var N2t=s(Nue);ocr=r(N2t,"Examples:"),N2t.forEach(t),rcr=i(ua),m(IA.$$.fragment,ua),ua.forEach(t),Ql.forEach(t),MPe=i(c),Cc=n(c,"H2",{class:!0});var RIe=s(Cc);i7=n(RIe,"A",{id:!0,class:!0,href:!0});var j2t=s(i7);jue=n(j2t,"SPAN",{});var D2t=s(jue);m(qA.$$.fragment,D2t),D2t.forEach(t),j2t.forEach(t),tcr=i(RIe),Due=n(RIe,"SPAN",{});var G2t=s(Due);acr=r(G2t,"TFAutoModelForImageClassification"),G2t.forEach(t),RIe.forEach(t),EPe=i(c),Mr=n(c,"DIV",{class:!0});var Hl=s(Mr);m(NA.$$.fragment,Hl),ncr=i(Hl),wc=n(Hl,"P",{});var jJ=s(wc);scr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=n(jJ,"A",{href:!0});var O2t=s(FX);lcr=r(O2t,"from_pretrained()"),O2t.forEach(t),icr=r(jJ," class method or the "),vX=n(jJ,"A",{href:!0});var V2t=s(vX);dcr=r(V2t,"from_config()"),V2t.forEach(t),ccr=r(jJ,` class
method.`),jJ.forEach(t),fcr=i(Hl),jA=n(Hl,"P",{});var BIe=s(jA);mcr=r(BIe,"This class cannot be instantiated directly using "),Gue=n(BIe,"CODE",{});var X2t=s(Gue);gcr=r(X2t,"__init__()"),X2t.forEach(t),hcr=r(BIe," (throws an error)."),BIe.forEach(t),pcr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);m(DA.$$.fragment,Ul),_cr=i(Ul),Oue=n(Ul,"P",{});var z2t=s(Oue);ucr=r(z2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),z2t.forEach(t),bcr=i(Ul),Ac=n(Ul,"P",{});var DJ=s(Ac);Fcr=r(DJ,`Note:
Loading a model from its configuration file does `),Vue=n(DJ,"STRONG",{});var Q2t=s(Vue);vcr=r(Q2t,"not"),Q2t.forEach(t),Tcr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(DJ,"A",{href:!0});var W2t=s(TX);Mcr=r(W2t,"from_pretrained()"),W2t.forEach(t),Ecr=r(DJ," to load the model weights."),DJ.forEach(t),Ccr=i(Ul),Xue=n(Ul,"P",{});var H2t=s(Xue);wcr=r(H2t,"Examples:"),H2t.forEach(t),Acr=i(Ul),m(GA.$$.fragment,Ul),Ul.forEach(t),ycr=i(Hl),uo=n(Hl,"DIV",{class:!0});var ba=s(uo);m(OA.$$.fragment,ba),Lcr=i(ba),zue=n(ba,"P",{});var U2t=s(zue);xcr=r(U2t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),U2t.forEach(t),kcr=i(ba),vn=n(ba,"P",{});var h5=s(vn);Scr=r(h5,"The model class to instantiate is selected based on the "),Que=n(h5,"CODE",{});var J2t=s(Que);Rcr=r(J2t,"model_type"),J2t.forEach(t),Bcr=r(h5,` property of the config object (either
passed as an argument or loaded from `),Wue=n(h5,"CODE",{});var Y2t=s(Wue);Pcr=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),$cr=r(h5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hue=n(h5,"CODE",{});var K2t=s(Hue);Icr=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),qcr=r(h5,":"),h5.forEach(t),Ncr=i(ba),VA=n(ba,"UL",{});var PIe=s(VA);d7=n(PIe,"LI",{});var nxe=s(d7);Uue=n(nxe,"STRONG",{});var Z2t=s(Uue);jcr=r(Z2t,"convnext"),Z2t.forEach(t),Dcr=r(nxe," \u2014 "),MX=n(nxe,"A",{href:!0});var e1t=s(MX);Gcr=r(e1t,"TFConvNextForImageClassification"),e1t.forEach(t),Ocr=r(nxe," (ConvNext model)"),nxe.forEach(t),Vcr=i(PIe),c7=n(PIe,"LI",{});var sxe=s(c7);Jue=n(sxe,"STRONG",{});var o1t=s(Jue);Xcr=r(o1t,"vit"),o1t.forEach(t),zcr=r(sxe," \u2014 "),EX=n(sxe,"A",{href:!0});var r1t=s(EX);Qcr=r(r1t,"TFViTForImageClassification"),r1t.forEach(t),Wcr=r(sxe," (ViT model)"),sxe.forEach(t),PIe.forEach(t),Hcr=i(ba),Yue=n(ba,"P",{});var t1t=s(Yue);Ucr=r(t1t,"Examples:"),t1t.forEach(t),Jcr=i(ba),m(XA.$$.fragment,ba),ba.forEach(t),Hl.forEach(t),CPe=i(c),yc=n(c,"H2",{class:!0});var $Ie=s(yc);f7=n($Ie,"A",{id:!0,class:!0,href:!0});var a1t=s(f7);Kue=n(a1t,"SPAN",{});var n1t=s(Kue);m(zA.$$.fragment,n1t),n1t.forEach(t),a1t.forEach(t),Ycr=i($Ie),Zue=n($Ie,"SPAN",{});var s1t=s(Zue);Kcr=r(s1t,"TFAutoModelForMaskedLM"),s1t.forEach(t),$Ie.forEach(t),wPe=i(c),Er=n(c,"DIV",{class:!0});var Jl=s(Er);m(QA.$$.fragment,Jl),Zcr=i(Jl),Lc=n(Jl,"P",{});var GJ=s(Lc);efr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CX=n(GJ,"A",{href:!0});var l1t=s(CX);ofr=r(l1t,"from_pretrained()"),l1t.forEach(t),rfr=r(GJ," class method or the "),wX=n(GJ,"A",{href:!0});var i1t=s(wX);tfr=r(i1t,"from_config()"),i1t.forEach(t),afr=r(GJ,` class
method.`),GJ.forEach(t),nfr=i(Jl),WA=n(Jl,"P",{});var IIe=s(WA);sfr=r(IIe,"This class cannot be instantiated directly using "),e2e=n(IIe,"CODE",{});var d1t=s(e2e);lfr=r(d1t,"__init__()"),d1t.forEach(t),ifr=r(IIe," (throws an error)."),IIe.forEach(t),dfr=i(Jl),ut=n(Jl,"DIV",{class:!0});var Yl=s(ut);m(HA.$$.fragment,Yl),cfr=i(Yl),o2e=n(Yl,"P",{});var c1t=s(o2e);ffr=r(c1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c1t.forEach(t),mfr=i(Yl),xc=n(Yl,"P",{});var OJ=s(xc);gfr=r(OJ,`Note:
Loading a model from its configuration file does `),r2e=n(OJ,"STRONG",{});var f1t=s(r2e);hfr=r(f1t,"not"),f1t.forEach(t),pfr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AX=n(OJ,"A",{href:!0});var m1t=s(AX);_fr=r(m1t,"from_pretrained()"),m1t.forEach(t),ufr=r(OJ," to load the model weights."),OJ.forEach(t),bfr=i(Yl),t2e=n(Yl,"P",{});var g1t=s(t2e);Ffr=r(g1t,"Examples:"),g1t.forEach(t),vfr=i(Yl),m(UA.$$.fragment,Yl),Yl.forEach(t),Tfr=i(Jl),bo=n(Jl,"DIV",{class:!0});var Fa=s(bo);m(JA.$$.fragment,Fa),Mfr=i(Fa),a2e=n(Fa,"P",{});var h1t=s(a2e);Efr=r(h1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),h1t.forEach(t),Cfr=i(Fa),Tn=n(Fa,"P",{});var p5=s(Tn);wfr=r(p5,"The model class to instantiate is selected based on the "),n2e=n(p5,"CODE",{});var p1t=s(n2e);Afr=r(p1t,"model_type"),p1t.forEach(t),yfr=r(p5,` property of the config object (either
passed as an argument or loaded from `),s2e=n(p5,"CODE",{});var _1t=s(s2e);Lfr=r(_1t,"pretrained_model_name_or_path"),_1t.forEach(t),xfr=r(p5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l2e=n(p5,"CODE",{});var u1t=s(l2e);kfr=r(u1t,"pretrained_model_name_or_path"),u1t.forEach(t),Sfr=r(p5,":"),p5.forEach(t),Rfr=i(Fa),J=n(Fa,"UL",{});var oe=s(J);m7=n(oe,"LI",{});var lxe=s(m7);i2e=n(lxe,"STRONG",{});var b1t=s(i2e);Bfr=r(b1t,"albert"),b1t.forEach(t),Pfr=r(lxe," \u2014 "),yX=n(lxe,"A",{href:!0});var F1t=s(yX);$fr=r(F1t,"TFAlbertForMaskedLM"),F1t.forEach(t),Ifr=r(lxe," (ALBERT model)"),lxe.forEach(t),qfr=i(oe),g7=n(oe,"LI",{});var ixe=s(g7);d2e=n(ixe,"STRONG",{});var v1t=s(d2e);Nfr=r(v1t,"bert"),v1t.forEach(t),jfr=r(ixe," \u2014 "),LX=n(ixe,"A",{href:!0});var T1t=s(LX);Dfr=r(T1t,"TFBertForMaskedLM"),T1t.forEach(t),Gfr=r(ixe," (BERT model)"),ixe.forEach(t),Ofr=i(oe),h7=n(oe,"LI",{});var dxe=s(h7);c2e=n(dxe,"STRONG",{});var M1t=s(c2e);Vfr=r(M1t,"camembert"),M1t.forEach(t),Xfr=r(dxe," \u2014 "),xX=n(dxe,"A",{href:!0});var E1t=s(xX);zfr=r(E1t,"TFCamembertForMaskedLM"),E1t.forEach(t),Qfr=r(dxe," (CamemBERT model)"),dxe.forEach(t),Wfr=i(oe),p7=n(oe,"LI",{});var cxe=s(p7);f2e=n(cxe,"STRONG",{});var C1t=s(f2e);Hfr=r(C1t,"convbert"),C1t.forEach(t),Ufr=r(cxe," \u2014 "),kX=n(cxe,"A",{href:!0});var w1t=s(kX);Jfr=r(w1t,"TFConvBertForMaskedLM"),w1t.forEach(t),Yfr=r(cxe," (ConvBERT model)"),cxe.forEach(t),Kfr=i(oe),_7=n(oe,"LI",{});var fxe=s(_7);m2e=n(fxe,"STRONG",{});var A1t=s(m2e);Zfr=r(A1t,"deberta"),A1t.forEach(t),emr=r(fxe," \u2014 "),SX=n(fxe,"A",{href:!0});var y1t=s(SX);omr=r(y1t,"TFDebertaForMaskedLM"),y1t.forEach(t),rmr=r(fxe," (DeBERTa model)"),fxe.forEach(t),tmr=i(oe),u7=n(oe,"LI",{});var mxe=s(u7);g2e=n(mxe,"STRONG",{});var L1t=s(g2e);amr=r(L1t,"deberta-v2"),L1t.forEach(t),nmr=r(mxe," \u2014 "),RX=n(mxe,"A",{href:!0});var x1t=s(RX);smr=r(x1t,"TFDebertaV2ForMaskedLM"),x1t.forEach(t),lmr=r(mxe," (DeBERTa-v2 model)"),mxe.forEach(t),imr=i(oe),b7=n(oe,"LI",{});var gxe=s(b7);h2e=n(gxe,"STRONG",{});var k1t=s(h2e);dmr=r(k1t,"distilbert"),k1t.forEach(t),cmr=r(gxe," \u2014 "),BX=n(gxe,"A",{href:!0});var S1t=s(BX);fmr=r(S1t,"TFDistilBertForMaskedLM"),S1t.forEach(t),mmr=r(gxe," (DistilBERT model)"),gxe.forEach(t),gmr=i(oe),F7=n(oe,"LI",{});var hxe=s(F7);p2e=n(hxe,"STRONG",{});var R1t=s(p2e);hmr=r(R1t,"electra"),R1t.forEach(t),pmr=r(hxe," \u2014 "),PX=n(hxe,"A",{href:!0});var B1t=s(PX);_mr=r(B1t,"TFElectraForMaskedLM"),B1t.forEach(t),umr=r(hxe," (ELECTRA model)"),hxe.forEach(t),bmr=i(oe),v7=n(oe,"LI",{});var pxe=s(v7);_2e=n(pxe,"STRONG",{});var P1t=s(_2e);Fmr=r(P1t,"flaubert"),P1t.forEach(t),vmr=r(pxe," \u2014 "),$X=n(pxe,"A",{href:!0});var $1t=s($X);Tmr=r($1t,"TFFlaubertWithLMHeadModel"),$1t.forEach(t),Mmr=r(pxe," (FlauBERT model)"),pxe.forEach(t),Emr=i(oe),T7=n(oe,"LI",{});var _xe=s(T7);u2e=n(_xe,"STRONG",{});var I1t=s(u2e);Cmr=r(I1t,"funnel"),I1t.forEach(t),wmr=r(_xe," \u2014 "),IX=n(_xe,"A",{href:!0});var q1t=s(IX);Amr=r(q1t,"TFFunnelForMaskedLM"),q1t.forEach(t),ymr=r(_xe," (Funnel Transformer model)"),_xe.forEach(t),Lmr=i(oe),M7=n(oe,"LI",{});var uxe=s(M7);b2e=n(uxe,"STRONG",{});var N1t=s(b2e);xmr=r(N1t,"layoutlm"),N1t.forEach(t),kmr=r(uxe," \u2014 "),qX=n(uxe,"A",{href:!0});var j1t=s(qX);Smr=r(j1t,"TFLayoutLMForMaskedLM"),j1t.forEach(t),Rmr=r(uxe," (LayoutLM model)"),uxe.forEach(t),Bmr=i(oe),E7=n(oe,"LI",{});var bxe=s(E7);F2e=n(bxe,"STRONG",{});var D1t=s(F2e);Pmr=r(D1t,"longformer"),D1t.forEach(t),$mr=r(bxe," \u2014 "),NX=n(bxe,"A",{href:!0});var G1t=s(NX);Imr=r(G1t,"TFLongformerForMaskedLM"),G1t.forEach(t),qmr=r(bxe," (Longformer model)"),bxe.forEach(t),Nmr=i(oe),C7=n(oe,"LI",{});var Fxe=s(C7);v2e=n(Fxe,"STRONG",{});var O1t=s(v2e);jmr=r(O1t,"mobilebert"),O1t.forEach(t),Dmr=r(Fxe," \u2014 "),jX=n(Fxe,"A",{href:!0});var V1t=s(jX);Gmr=r(V1t,"TFMobileBertForMaskedLM"),V1t.forEach(t),Omr=r(Fxe," (MobileBERT model)"),Fxe.forEach(t),Vmr=i(oe),w7=n(oe,"LI",{});var vxe=s(w7);T2e=n(vxe,"STRONG",{});var X1t=s(T2e);Xmr=r(X1t,"mpnet"),X1t.forEach(t),zmr=r(vxe," \u2014 "),DX=n(vxe,"A",{href:!0});var z1t=s(DX);Qmr=r(z1t,"TFMPNetForMaskedLM"),z1t.forEach(t),Wmr=r(vxe," (MPNet model)"),vxe.forEach(t),Hmr=i(oe),A7=n(oe,"LI",{});var Txe=s(A7);M2e=n(Txe,"STRONG",{});var Q1t=s(M2e);Umr=r(Q1t,"rembert"),Q1t.forEach(t),Jmr=r(Txe," \u2014 "),GX=n(Txe,"A",{href:!0});var W1t=s(GX);Ymr=r(W1t,"TFRemBertForMaskedLM"),W1t.forEach(t),Kmr=r(Txe," (RemBERT model)"),Txe.forEach(t),Zmr=i(oe),y7=n(oe,"LI",{});var Mxe=s(y7);E2e=n(Mxe,"STRONG",{});var H1t=s(E2e);egr=r(H1t,"roberta"),H1t.forEach(t),ogr=r(Mxe," \u2014 "),OX=n(Mxe,"A",{href:!0});var U1t=s(OX);rgr=r(U1t,"TFRobertaForMaskedLM"),U1t.forEach(t),tgr=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),agr=i(oe),L7=n(oe,"LI",{});var Exe=s(L7);C2e=n(Exe,"STRONG",{});var J1t=s(C2e);ngr=r(J1t,"roformer"),J1t.forEach(t),sgr=r(Exe," \u2014 "),VX=n(Exe,"A",{href:!0});var Y1t=s(VX);lgr=r(Y1t,"TFRoFormerForMaskedLM"),Y1t.forEach(t),igr=r(Exe," (RoFormer model)"),Exe.forEach(t),dgr=i(oe),x7=n(oe,"LI",{});var Cxe=s(x7);w2e=n(Cxe,"STRONG",{});var K1t=s(w2e);cgr=r(K1t,"tapas"),K1t.forEach(t),fgr=r(Cxe," \u2014 "),XX=n(Cxe,"A",{href:!0});var Z1t=s(XX);mgr=r(Z1t,"TFTapasForMaskedLM"),Z1t.forEach(t),ggr=r(Cxe," (TAPAS model)"),Cxe.forEach(t),hgr=i(oe),k7=n(oe,"LI",{});var wxe=s(k7);A2e=n(wxe,"STRONG",{});var ebt=s(A2e);pgr=r(ebt,"xlm"),ebt.forEach(t),_gr=r(wxe," \u2014 "),zX=n(wxe,"A",{href:!0});var obt=s(zX);ugr=r(obt,"TFXLMWithLMHeadModel"),obt.forEach(t),bgr=r(wxe," (XLM model)"),wxe.forEach(t),Fgr=i(oe),S7=n(oe,"LI",{});var Axe=s(S7);y2e=n(Axe,"STRONG",{});var rbt=s(y2e);vgr=r(rbt,"xlm-roberta"),rbt.forEach(t),Tgr=r(Axe," \u2014 "),QX=n(Axe,"A",{href:!0});var tbt=s(QX);Mgr=r(tbt,"TFXLMRobertaForMaskedLM"),tbt.forEach(t),Egr=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),oe.forEach(t),Cgr=i(Fa),L2e=n(Fa,"P",{});var abt=s(L2e);wgr=r(abt,"Examples:"),abt.forEach(t),Agr=i(Fa),m(YA.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),APe=i(c),kc=n(c,"H2",{class:!0});var qIe=s(kc);R7=n(qIe,"A",{id:!0,class:!0,href:!0});var nbt=s(R7);x2e=n(nbt,"SPAN",{});var sbt=s(x2e);m(KA.$$.fragment,sbt),sbt.forEach(t),nbt.forEach(t),ygr=i(qIe),k2e=n(qIe,"SPAN",{});var lbt=s(k2e);Lgr=r(lbt,"TFAutoModelForSeq2SeqLM"),lbt.forEach(t),qIe.forEach(t),yPe=i(c),Cr=n(c,"DIV",{class:!0});var Kl=s(Cr);m(ZA.$$.fragment,Kl),xgr=i(Kl),Sc=n(Kl,"P",{});var VJ=s(Sc);kgr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),WX=n(VJ,"A",{href:!0});var ibt=s(WX);Sgr=r(ibt,"from_pretrained()"),ibt.forEach(t),Rgr=r(VJ," class method or the "),HX=n(VJ,"A",{href:!0});var dbt=s(HX);Bgr=r(dbt,"from_config()"),dbt.forEach(t),Pgr=r(VJ,` class
method.`),VJ.forEach(t),$gr=i(Kl),e0=n(Kl,"P",{});var NIe=s(e0);Igr=r(NIe,"This class cannot be instantiated directly using "),S2e=n(NIe,"CODE",{});var cbt=s(S2e);qgr=r(cbt,"__init__()"),cbt.forEach(t),Ngr=r(NIe," (throws an error)."),NIe.forEach(t),jgr=i(Kl),bt=n(Kl,"DIV",{class:!0});var Zl=s(bt);m(o0.$$.fragment,Zl),Dgr=i(Zl),R2e=n(Zl,"P",{});var fbt=s(R2e);Ggr=r(fbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),fbt.forEach(t),Ogr=i(Zl),Rc=n(Zl,"P",{});var XJ=s(Rc);Vgr=r(XJ,`Note:
Loading a model from its configuration file does `),B2e=n(XJ,"STRONG",{});var mbt=s(B2e);Xgr=r(mbt,"not"),mbt.forEach(t),zgr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(XJ,"A",{href:!0});var gbt=s(UX);Qgr=r(gbt,"from_pretrained()"),gbt.forEach(t),Wgr=r(XJ," to load the model weights."),XJ.forEach(t),Hgr=i(Zl),P2e=n(Zl,"P",{});var hbt=s(P2e);Ugr=r(hbt,"Examples:"),hbt.forEach(t),Jgr=i(Zl),m(r0.$$.fragment,Zl),Zl.forEach(t),Ygr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var va=s(Fo);m(t0.$$.fragment,va),Kgr=i(va),$2e=n(va,"P",{});var pbt=s($2e);Zgr=r(pbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pbt.forEach(t),ehr=i(va),Mn=n(va,"P",{});var _5=s(Mn);ohr=r(_5,"The model class to instantiate is selected based on the "),I2e=n(_5,"CODE",{});var _bt=s(I2e);rhr=r(_bt,"model_type"),_bt.forEach(t),thr=r(_5,` property of the config object (either
passed as an argument or loaded from `),q2e=n(_5,"CODE",{});var ubt=s(q2e);ahr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),nhr=r(_5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(_5,"CODE",{});var bbt=s(N2e);shr=r(bbt,"pretrained_model_name_or_path"),bbt.forEach(t),lhr=r(_5,":"),_5.forEach(t),ihr=i(va),be=n(va,"UL",{});var we=s(be);B7=n(we,"LI",{});var yxe=s(B7);j2e=n(yxe,"STRONG",{});var Fbt=s(j2e);dhr=r(Fbt,"bart"),Fbt.forEach(t),chr=r(yxe," \u2014 "),JX=n(yxe,"A",{href:!0});var vbt=s(JX);fhr=r(vbt,"TFBartForConditionalGeneration"),vbt.forEach(t),mhr=r(yxe," (BART model)"),yxe.forEach(t),ghr=i(we),P7=n(we,"LI",{});var Lxe=s(P7);D2e=n(Lxe,"STRONG",{});var Tbt=s(D2e);hhr=r(Tbt,"blenderbot"),Tbt.forEach(t),phr=r(Lxe," \u2014 "),YX=n(Lxe,"A",{href:!0});var Mbt=s(YX);_hr=r(Mbt,"TFBlenderbotForConditionalGeneration"),Mbt.forEach(t),uhr=r(Lxe," (Blenderbot model)"),Lxe.forEach(t),bhr=i(we),$7=n(we,"LI",{});var xxe=s($7);G2e=n(xxe,"STRONG",{});var Ebt=s(G2e);Fhr=r(Ebt,"blenderbot-small"),Ebt.forEach(t),vhr=r(xxe," \u2014 "),KX=n(xxe,"A",{href:!0});var Cbt=s(KX);Thr=r(Cbt,"TFBlenderbotSmallForConditionalGeneration"),Cbt.forEach(t),Mhr=r(xxe," (BlenderbotSmall model)"),xxe.forEach(t),Ehr=i(we),I7=n(we,"LI",{});var kxe=s(I7);O2e=n(kxe,"STRONG",{});var wbt=s(O2e);Chr=r(wbt,"encoder-decoder"),wbt.forEach(t),whr=r(kxe," \u2014 "),ZX=n(kxe,"A",{href:!0});var Abt=s(ZX);Ahr=r(Abt,"TFEncoderDecoderModel"),Abt.forEach(t),yhr=r(kxe," (Encoder decoder model)"),kxe.forEach(t),Lhr=i(we),q7=n(we,"LI",{});var Sxe=s(q7);V2e=n(Sxe,"STRONG",{});var ybt=s(V2e);xhr=r(ybt,"led"),ybt.forEach(t),khr=r(Sxe," \u2014 "),ez=n(Sxe,"A",{href:!0});var Lbt=s(ez);Shr=r(Lbt,"TFLEDForConditionalGeneration"),Lbt.forEach(t),Rhr=r(Sxe," (LED model)"),Sxe.forEach(t),Bhr=i(we),N7=n(we,"LI",{});var Rxe=s(N7);X2e=n(Rxe,"STRONG",{});var xbt=s(X2e);Phr=r(xbt,"marian"),xbt.forEach(t),$hr=r(Rxe," \u2014 "),oz=n(Rxe,"A",{href:!0});var kbt=s(oz);Ihr=r(kbt,"TFMarianMTModel"),kbt.forEach(t),qhr=r(Rxe," (Marian model)"),Rxe.forEach(t),Nhr=i(we),j7=n(we,"LI",{});var Bxe=s(j7);z2e=n(Bxe,"STRONG",{});var Sbt=s(z2e);jhr=r(Sbt,"mbart"),Sbt.forEach(t),Dhr=r(Bxe," \u2014 "),rz=n(Bxe,"A",{href:!0});var Rbt=s(rz);Ghr=r(Rbt,"TFMBartForConditionalGeneration"),Rbt.forEach(t),Ohr=r(Bxe," (mBART model)"),Bxe.forEach(t),Vhr=i(we),D7=n(we,"LI",{});var Pxe=s(D7);Q2e=n(Pxe,"STRONG",{});var Bbt=s(Q2e);Xhr=r(Bbt,"mt5"),Bbt.forEach(t),zhr=r(Pxe," \u2014 "),tz=n(Pxe,"A",{href:!0});var Pbt=s(tz);Qhr=r(Pbt,"TFMT5ForConditionalGeneration"),Pbt.forEach(t),Whr=r(Pxe," (mT5 model)"),Pxe.forEach(t),Hhr=i(we),G7=n(we,"LI",{});var $xe=s(G7);W2e=n($xe,"STRONG",{});var $bt=s(W2e);Uhr=r($bt,"pegasus"),$bt.forEach(t),Jhr=r($xe," \u2014 "),az=n($xe,"A",{href:!0});var Ibt=s(az);Yhr=r(Ibt,"TFPegasusForConditionalGeneration"),Ibt.forEach(t),Khr=r($xe," (Pegasus model)"),$xe.forEach(t),Zhr=i(we),O7=n(we,"LI",{});var Ixe=s(O7);H2e=n(Ixe,"STRONG",{});var qbt=s(H2e);epr=r(qbt,"t5"),qbt.forEach(t),opr=r(Ixe," \u2014 "),nz=n(Ixe,"A",{href:!0});var Nbt=s(nz);rpr=r(Nbt,"TFT5ForConditionalGeneration"),Nbt.forEach(t),tpr=r(Ixe," (T5 model)"),Ixe.forEach(t),we.forEach(t),apr=i(va),U2e=n(va,"P",{});var jbt=s(U2e);npr=r(jbt,"Examples:"),jbt.forEach(t),spr=i(va),m(a0.$$.fragment,va),va.forEach(t),Kl.forEach(t),LPe=i(c),Bc=n(c,"H2",{class:!0});var jIe=s(Bc);V7=n(jIe,"A",{id:!0,class:!0,href:!0});var Dbt=s(V7);J2e=n(Dbt,"SPAN",{});var Gbt=s(J2e);m(n0.$$.fragment,Gbt),Gbt.forEach(t),Dbt.forEach(t),lpr=i(jIe),Y2e=n(jIe,"SPAN",{});var Obt=s(Y2e);ipr=r(Obt,"TFAutoModelForSequenceClassification"),Obt.forEach(t),jIe.forEach(t),xPe=i(c),wr=n(c,"DIV",{class:!0});var ei=s(wr);m(s0.$$.fragment,ei),dpr=i(ei),Pc=n(ei,"P",{});var zJ=s(Pc);cpr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sz=n(zJ,"A",{href:!0});var Vbt=s(sz);fpr=r(Vbt,"from_pretrained()"),Vbt.forEach(t),mpr=r(zJ," class method or the "),lz=n(zJ,"A",{href:!0});var Xbt=s(lz);gpr=r(Xbt,"from_config()"),Xbt.forEach(t),hpr=r(zJ,` class
method.`),zJ.forEach(t),ppr=i(ei),l0=n(ei,"P",{});var DIe=s(l0);_pr=r(DIe,"This class cannot be instantiated directly using "),K2e=n(DIe,"CODE",{});var zbt=s(K2e);upr=r(zbt,"__init__()"),zbt.forEach(t),bpr=r(DIe," (throws an error)."),DIe.forEach(t),Fpr=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);m(i0.$$.fragment,oi),vpr=i(oi),Z2e=n(oi,"P",{});var Qbt=s(Z2e);Tpr=r(Qbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Qbt.forEach(t),Mpr=i(oi),$c=n(oi,"P",{});var QJ=s($c);Epr=r(QJ,`Note:
Loading a model from its configuration file does `),e1e=n(QJ,"STRONG",{});var Wbt=s(e1e);Cpr=r(Wbt,"not"),Wbt.forEach(t),wpr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(QJ,"A",{href:!0});var Hbt=s(iz);Apr=r(Hbt,"from_pretrained()"),Hbt.forEach(t),ypr=r(QJ," to load the model weights."),QJ.forEach(t),Lpr=i(oi),o1e=n(oi,"P",{});var Ubt=s(o1e);xpr=r(Ubt,"Examples:"),Ubt.forEach(t),kpr=i(oi),m(d0.$$.fragment,oi),oi.forEach(t),Spr=i(ei),vo=n(ei,"DIV",{class:!0});var Ta=s(vo);m(c0.$$.fragment,Ta),Rpr=i(Ta),r1e=n(Ta,"P",{});var Jbt=s(r1e);Bpr=r(Jbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jbt.forEach(t),Ppr=i(Ta),En=n(Ta,"P",{});var u5=s(En);$pr=r(u5,"The model class to instantiate is selected based on the "),t1e=n(u5,"CODE",{});var Ybt=s(t1e);Ipr=r(Ybt,"model_type"),Ybt.forEach(t),qpr=r(u5,` property of the config object (either
passed as an argument or loaded from `),a1e=n(u5,"CODE",{});var Kbt=s(a1e);Npr=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),jpr=r(u5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(u5,"CODE",{});var Zbt=s(n1e);Dpr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),Gpr=r(u5,":"),u5.forEach(t),Opr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);X7=n(Q,"LI",{});var qxe=s(X7);s1e=n(qxe,"STRONG",{});var e6t=s(s1e);Vpr=r(e6t,"albert"),e6t.forEach(t),Xpr=r(qxe," \u2014 "),dz=n(qxe,"A",{href:!0});var o6t=s(dz);zpr=r(o6t,"TFAlbertForSequenceClassification"),o6t.forEach(t),Qpr=r(qxe," (ALBERT model)"),qxe.forEach(t),Wpr=i(Q),z7=n(Q,"LI",{});var Nxe=s(z7);l1e=n(Nxe,"STRONG",{});var r6t=s(l1e);Hpr=r(r6t,"bert"),r6t.forEach(t),Upr=r(Nxe," \u2014 "),cz=n(Nxe,"A",{href:!0});var t6t=s(cz);Jpr=r(t6t,"TFBertForSequenceClassification"),t6t.forEach(t),Ypr=r(Nxe," (BERT model)"),Nxe.forEach(t),Kpr=i(Q),Q7=n(Q,"LI",{});var jxe=s(Q7);i1e=n(jxe,"STRONG",{});var a6t=s(i1e);Zpr=r(a6t,"camembert"),a6t.forEach(t),e_r=r(jxe," \u2014 "),fz=n(jxe,"A",{href:!0});var n6t=s(fz);o_r=r(n6t,"TFCamembertForSequenceClassification"),n6t.forEach(t),r_r=r(jxe," (CamemBERT model)"),jxe.forEach(t),t_r=i(Q),W7=n(Q,"LI",{});var Dxe=s(W7);d1e=n(Dxe,"STRONG",{});var s6t=s(d1e);a_r=r(s6t,"convbert"),s6t.forEach(t),n_r=r(Dxe," \u2014 "),mz=n(Dxe,"A",{href:!0});var l6t=s(mz);s_r=r(l6t,"TFConvBertForSequenceClassification"),l6t.forEach(t),l_r=r(Dxe," (ConvBERT model)"),Dxe.forEach(t),i_r=i(Q),H7=n(Q,"LI",{});var Gxe=s(H7);c1e=n(Gxe,"STRONG",{});var i6t=s(c1e);d_r=r(i6t,"ctrl"),i6t.forEach(t),c_r=r(Gxe," \u2014 "),gz=n(Gxe,"A",{href:!0});var d6t=s(gz);f_r=r(d6t,"TFCTRLForSequenceClassification"),d6t.forEach(t),m_r=r(Gxe," (CTRL model)"),Gxe.forEach(t),g_r=i(Q),U7=n(Q,"LI",{});var Oxe=s(U7);f1e=n(Oxe,"STRONG",{});var c6t=s(f1e);h_r=r(c6t,"deberta"),c6t.forEach(t),p_r=r(Oxe," \u2014 "),hz=n(Oxe,"A",{href:!0});var f6t=s(hz);__r=r(f6t,"TFDebertaForSequenceClassification"),f6t.forEach(t),u_r=r(Oxe," (DeBERTa model)"),Oxe.forEach(t),b_r=i(Q),J7=n(Q,"LI",{});var Vxe=s(J7);m1e=n(Vxe,"STRONG",{});var m6t=s(m1e);F_r=r(m6t,"deberta-v2"),m6t.forEach(t),v_r=r(Vxe," \u2014 "),pz=n(Vxe,"A",{href:!0});var g6t=s(pz);T_r=r(g6t,"TFDebertaV2ForSequenceClassification"),g6t.forEach(t),M_r=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),E_r=i(Q),Y7=n(Q,"LI",{});var Xxe=s(Y7);g1e=n(Xxe,"STRONG",{});var h6t=s(g1e);C_r=r(h6t,"distilbert"),h6t.forEach(t),w_r=r(Xxe," \u2014 "),_z=n(Xxe,"A",{href:!0});var p6t=s(_z);A_r=r(p6t,"TFDistilBertForSequenceClassification"),p6t.forEach(t),y_r=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),L_r=i(Q),K7=n(Q,"LI",{});var zxe=s(K7);h1e=n(zxe,"STRONG",{});var _6t=s(h1e);x_r=r(_6t,"electra"),_6t.forEach(t),k_r=r(zxe," \u2014 "),uz=n(zxe,"A",{href:!0});var u6t=s(uz);S_r=r(u6t,"TFElectraForSequenceClassification"),u6t.forEach(t),R_r=r(zxe," (ELECTRA model)"),zxe.forEach(t),B_r=i(Q),Z7=n(Q,"LI",{});var Qxe=s(Z7);p1e=n(Qxe,"STRONG",{});var b6t=s(p1e);P_r=r(b6t,"flaubert"),b6t.forEach(t),$_r=r(Qxe," \u2014 "),bz=n(Qxe,"A",{href:!0});var F6t=s(bz);I_r=r(F6t,"TFFlaubertForSequenceClassification"),F6t.forEach(t),q_r=r(Qxe," (FlauBERT model)"),Qxe.forEach(t),N_r=i(Q),e9=n(Q,"LI",{});var Wxe=s(e9);_1e=n(Wxe,"STRONG",{});var v6t=s(_1e);j_r=r(v6t,"funnel"),v6t.forEach(t),D_r=r(Wxe," \u2014 "),Fz=n(Wxe,"A",{href:!0});var T6t=s(Fz);G_r=r(T6t,"TFFunnelForSequenceClassification"),T6t.forEach(t),O_r=r(Wxe," (Funnel Transformer model)"),Wxe.forEach(t),V_r=i(Q),o9=n(Q,"LI",{});var Hxe=s(o9);u1e=n(Hxe,"STRONG",{});var M6t=s(u1e);X_r=r(M6t,"gpt2"),M6t.forEach(t),z_r=r(Hxe," \u2014 "),vz=n(Hxe,"A",{href:!0});var E6t=s(vz);Q_r=r(E6t,"TFGPT2ForSequenceClassification"),E6t.forEach(t),W_r=r(Hxe," (OpenAI GPT-2 model)"),Hxe.forEach(t),H_r=i(Q),r9=n(Q,"LI",{});var Uxe=s(r9);b1e=n(Uxe,"STRONG",{});var C6t=s(b1e);U_r=r(C6t,"gptj"),C6t.forEach(t),J_r=r(Uxe," \u2014 "),Tz=n(Uxe,"A",{href:!0});var w6t=s(Tz);Y_r=r(w6t,"TFGPTJForSequenceClassification"),w6t.forEach(t),K_r=r(Uxe," (GPT-J model)"),Uxe.forEach(t),Z_r=i(Q),t9=n(Q,"LI",{});var Jxe=s(t9);F1e=n(Jxe,"STRONG",{});var A6t=s(F1e);eur=r(A6t,"layoutlm"),A6t.forEach(t),our=r(Jxe," \u2014 "),Mz=n(Jxe,"A",{href:!0});var y6t=s(Mz);rur=r(y6t,"TFLayoutLMForSequenceClassification"),y6t.forEach(t),tur=r(Jxe," (LayoutLM model)"),Jxe.forEach(t),aur=i(Q),a9=n(Q,"LI",{});var Yxe=s(a9);v1e=n(Yxe,"STRONG",{});var L6t=s(v1e);nur=r(L6t,"longformer"),L6t.forEach(t),sur=r(Yxe," \u2014 "),Ez=n(Yxe,"A",{href:!0});var x6t=s(Ez);lur=r(x6t,"TFLongformerForSequenceClassification"),x6t.forEach(t),iur=r(Yxe," (Longformer model)"),Yxe.forEach(t),dur=i(Q),n9=n(Q,"LI",{});var Kxe=s(n9);T1e=n(Kxe,"STRONG",{});var k6t=s(T1e);cur=r(k6t,"mobilebert"),k6t.forEach(t),fur=r(Kxe," \u2014 "),Cz=n(Kxe,"A",{href:!0});var S6t=s(Cz);mur=r(S6t,"TFMobileBertForSequenceClassification"),S6t.forEach(t),gur=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),hur=i(Q),s9=n(Q,"LI",{});var Zxe=s(s9);M1e=n(Zxe,"STRONG",{});var R6t=s(M1e);pur=r(R6t,"mpnet"),R6t.forEach(t),_ur=r(Zxe," \u2014 "),wz=n(Zxe,"A",{href:!0});var B6t=s(wz);uur=r(B6t,"TFMPNetForSequenceClassification"),B6t.forEach(t),bur=r(Zxe," (MPNet model)"),Zxe.forEach(t),Fur=i(Q),l9=n(Q,"LI",{});var eke=s(l9);E1e=n(eke,"STRONG",{});var P6t=s(E1e);vur=r(P6t,"openai-gpt"),P6t.forEach(t),Tur=r(eke," \u2014 "),Az=n(eke,"A",{href:!0});var $6t=s(Az);Mur=r($6t,"TFOpenAIGPTForSequenceClassification"),$6t.forEach(t),Eur=r(eke," (OpenAI GPT model)"),eke.forEach(t),Cur=i(Q),i9=n(Q,"LI",{});var oke=s(i9);C1e=n(oke,"STRONG",{});var I6t=s(C1e);wur=r(I6t,"rembert"),I6t.forEach(t),Aur=r(oke," \u2014 "),yz=n(oke,"A",{href:!0});var q6t=s(yz);yur=r(q6t,"TFRemBertForSequenceClassification"),q6t.forEach(t),Lur=r(oke," (RemBERT model)"),oke.forEach(t),xur=i(Q),d9=n(Q,"LI",{});var rke=s(d9);w1e=n(rke,"STRONG",{});var N6t=s(w1e);kur=r(N6t,"roberta"),N6t.forEach(t),Sur=r(rke," \u2014 "),Lz=n(rke,"A",{href:!0});var j6t=s(Lz);Rur=r(j6t,"TFRobertaForSequenceClassification"),j6t.forEach(t),Bur=r(rke," (RoBERTa model)"),rke.forEach(t),Pur=i(Q),c9=n(Q,"LI",{});var tke=s(c9);A1e=n(tke,"STRONG",{});var D6t=s(A1e);$ur=r(D6t,"roformer"),D6t.forEach(t),Iur=r(tke," \u2014 "),xz=n(tke,"A",{href:!0});var G6t=s(xz);qur=r(G6t,"TFRoFormerForSequenceClassification"),G6t.forEach(t),Nur=r(tke," (RoFormer model)"),tke.forEach(t),jur=i(Q),f9=n(Q,"LI",{});var ake=s(f9);y1e=n(ake,"STRONG",{});var O6t=s(y1e);Dur=r(O6t,"tapas"),O6t.forEach(t),Gur=r(ake," \u2014 "),kz=n(ake,"A",{href:!0});var V6t=s(kz);Our=r(V6t,"TFTapasForSequenceClassification"),V6t.forEach(t),Vur=r(ake," (TAPAS model)"),ake.forEach(t),Xur=i(Q),m9=n(Q,"LI",{});var nke=s(m9);L1e=n(nke,"STRONG",{});var X6t=s(L1e);zur=r(X6t,"transfo-xl"),X6t.forEach(t),Qur=r(nke," \u2014 "),Sz=n(nke,"A",{href:!0});var z6t=s(Sz);Wur=r(z6t,"TFTransfoXLForSequenceClassification"),z6t.forEach(t),Hur=r(nke," (Transformer-XL model)"),nke.forEach(t),Uur=i(Q),g9=n(Q,"LI",{});var ske=s(g9);x1e=n(ske,"STRONG",{});var Q6t=s(x1e);Jur=r(Q6t,"xlm"),Q6t.forEach(t),Yur=r(ske," \u2014 "),Rz=n(ske,"A",{href:!0});var W6t=s(Rz);Kur=r(W6t,"TFXLMForSequenceClassification"),W6t.forEach(t),Zur=r(ske," (XLM model)"),ske.forEach(t),e2r=i(Q),h9=n(Q,"LI",{});var lke=s(h9);k1e=n(lke,"STRONG",{});var H6t=s(k1e);o2r=r(H6t,"xlm-roberta"),H6t.forEach(t),r2r=r(lke," \u2014 "),Bz=n(lke,"A",{href:!0});var U6t=s(Bz);t2r=r(U6t,"TFXLMRobertaForSequenceClassification"),U6t.forEach(t),a2r=r(lke," (XLM-RoBERTa model)"),lke.forEach(t),n2r=i(Q),p9=n(Q,"LI",{});var ike=s(p9);S1e=n(ike,"STRONG",{});var J6t=s(S1e);s2r=r(J6t,"xlnet"),J6t.forEach(t),l2r=r(ike," \u2014 "),Pz=n(ike,"A",{href:!0});var Y6t=s(Pz);i2r=r(Y6t,"TFXLNetForSequenceClassification"),Y6t.forEach(t),d2r=r(ike," (XLNet model)"),ike.forEach(t),Q.forEach(t),c2r=i(Ta),R1e=n(Ta,"P",{});var K6t=s(R1e);f2r=r(K6t,"Examples:"),K6t.forEach(t),m2r=i(Ta),m(f0.$$.fragment,Ta),Ta.forEach(t),ei.forEach(t),kPe=i(c),Ic=n(c,"H2",{class:!0});var GIe=s(Ic);_9=n(GIe,"A",{id:!0,class:!0,href:!0});var Z6t=s(_9);B1e=n(Z6t,"SPAN",{});var eFt=s(B1e);m(m0.$$.fragment,eFt),eFt.forEach(t),Z6t.forEach(t),g2r=i(GIe),P1e=n(GIe,"SPAN",{});var oFt=s(P1e);h2r=r(oFt,"TFAutoModelForMultipleChoice"),oFt.forEach(t),GIe.forEach(t),SPe=i(c),Ar=n(c,"DIV",{class:!0});var ri=s(Ar);m(g0.$$.fragment,ri),p2r=i(ri),qc=n(ri,"P",{});var WJ=s(qc);_2r=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),$z=n(WJ,"A",{href:!0});var rFt=s($z);u2r=r(rFt,"from_pretrained()"),rFt.forEach(t),b2r=r(WJ," class method or the "),Iz=n(WJ,"A",{href:!0});var tFt=s(Iz);F2r=r(tFt,"from_config()"),tFt.forEach(t),v2r=r(WJ,` class
method.`),WJ.forEach(t),T2r=i(ri),h0=n(ri,"P",{});var OIe=s(h0);M2r=r(OIe,"This class cannot be instantiated directly using "),$1e=n(OIe,"CODE",{});var aFt=s($1e);E2r=r(aFt,"__init__()"),aFt.forEach(t),C2r=r(OIe," (throws an error)."),OIe.forEach(t),w2r=i(ri),vt=n(ri,"DIV",{class:!0});var ti=s(vt);m(p0.$$.fragment,ti),A2r=i(ti),I1e=n(ti,"P",{});var nFt=s(I1e);y2r=r(nFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nFt.forEach(t),L2r=i(ti),Nc=n(ti,"P",{});var HJ=s(Nc);x2r=r(HJ,`Note:
Loading a model from its configuration file does `),q1e=n(HJ,"STRONG",{});var sFt=s(q1e);k2r=r(sFt,"not"),sFt.forEach(t),S2r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(HJ,"A",{href:!0});var lFt=s(qz);R2r=r(lFt,"from_pretrained()"),lFt.forEach(t),B2r=r(HJ," to load the model weights."),HJ.forEach(t),P2r=i(ti),N1e=n(ti,"P",{});var iFt=s(N1e);$2r=r(iFt,"Examples:"),iFt.forEach(t),I2r=i(ti),m(_0.$$.fragment,ti),ti.forEach(t),q2r=i(ri),To=n(ri,"DIV",{class:!0});var Ma=s(To);m(u0.$$.fragment,Ma),N2r=i(Ma),j1e=n(Ma,"P",{});var dFt=s(j1e);j2r=r(dFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dFt.forEach(t),D2r=i(Ma),Cn=n(Ma,"P",{});var b5=s(Cn);G2r=r(b5,"The model class to instantiate is selected based on the "),D1e=n(b5,"CODE",{});var cFt=s(D1e);O2r=r(cFt,"model_type"),cFt.forEach(t),V2r=r(b5,` property of the config object (either
passed as an argument or loaded from `),G1e=n(b5,"CODE",{});var fFt=s(G1e);X2r=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),z2r=r(b5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(b5,"CODE",{});var mFt=s(O1e);Q2r=r(mFt,"pretrained_model_name_or_path"),mFt.forEach(t),W2r=r(b5,":"),b5.forEach(t),H2r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);u9=n(ie,"LI",{});var dke=s(u9);V1e=n(dke,"STRONG",{});var gFt=s(V1e);U2r=r(gFt,"albert"),gFt.forEach(t),J2r=r(dke," \u2014 "),Nz=n(dke,"A",{href:!0});var hFt=s(Nz);Y2r=r(hFt,"TFAlbertForMultipleChoice"),hFt.forEach(t),K2r=r(dke," (ALBERT model)"),dke.forEach(t),Z2r=i(ie),b9=n(ie,"LI",{});var cke=s(b9);X1e=n(cke,"STRONG",{});var pFt=s(X1e);e1r=r(pFt,"bert"),pFt.forEach(t),o1r=r(cke," \u2014 "),jz=n(cke,"A",{href:!0});var _Ft=s(jz);r1r=r(_Ft,"TFBertForMultipleChoice"),_Ft.forEach(t),t1r=r(cke," (BERT model)"),cke.forEach(t),a1r=i(ie),F9=n(ie,"LI",{});var fke=s(F9);z1e=n(fke,"STRONG",{});var uFt=s(z1e);n1r=r(uFt,"camembert"),uFt.forEach(t),s1r=r(fke," \u2014 "),Dz=n(fke,"A",{href:!0});var bFt=s(Dz);l1r=r(bFt,"TFCamembertForMultipleChoice"),bFt.forEach(t),i1r=r(fke," (CamemBERT model)"),fke.forEach(t),d1r=i(ie),v9=n(ie,"LI",{});var mke=s(v9);Q1e=n(mke,"STRONG",{});var FFt=s(Q1e);c1r=r(FFt,"convbert"),FFt.forEach(t),f1r=r(mke," \u2014 "),Gz=n(mke,"A",{href:!0});var vFt=s(Gz);m1r=r(vFt,"TFConvBertForMultipleChoice"),vFt.forEach(t),g1r=r(mke," (ConvBERT model)"),mke.forEach(t),h1r=i(ie),T9=n(ie,"LI",{});var gke=s(T9);W1e=n(gke,"STRONG",{});var TFt=s(W1e);p1r=r(TFt,"distilbert"),TFt.forEach(t),_1r=r(gke," \u2014 "),Oz=n(gke,"A",{href:!0});var MFt=s(Oz);u1r=r(MFt,"TFDistilBertForMultipleChoice"),MFt.forEach(t),b1r=r(gke," (DistilBERT model)"),gke.forEach(t),F1r=i(ie),M9=n(ie,"LI",{});var hke=s(M9);H1e=n(hke,"STRONG",{});var EFt=s(H1e);v1r=r(EFt,"electra"),EFt.forEach(t),T1r=r(hke," \u2014 "),Vz=n(hke,"A",{href:!0});var CFt=s(Vz);M1r=r(CFt,"TFElectraForMultipleChoice"),CFt.forEach(t),E1r=r(hke," (ELECTRA model)"),hke.forEach(t),C1r=i(ie),E9=n(ie,"LI",{});var pke=s(E9);U1e=n(pke,"STRONG",{});var wFt=s(U1e);w1r=r(wFt,"flaubert"),wFt.forEach(t),A1r=r(pke," \u2014 "),Xz=n(pke,"A",{href:!0});var AFt=s(Xz);y1r=r(AFt,"TFFlaubertForMultipleChoice"),AFt.forEach(t),L1r=r(pke," (FlauBERT model)"),pke.forEach(t),x1r=i(ie),C9=n(ie,"LI",{});var _ke=s(C9);J1e=n(_ke,"STRONG",{});var yFt=s(J1e);k1r=r(yFt,"funnel"),yFt.forEach(t),S1r=r(_ke," \u2014 "),zz=n(_ke,"A",{href:!0});var LFt=s(zz);R1r=r(LFt,"TFFunnelForMultipleChoice"),LFt.forEach(t),B1r=r(_ke," (Funnel Transformer model)"),_ke.forEach(t),P1r=i(ie),w9=n(ie,"LI",{});var uke=s(w9);Y1e=n(uke,"STRONG",{});var xFt=s(Y1e);$1r=r(xFt,"longformer"),xFt.forEach(t),I1r=r(uke," \u2014 "),Qz=n(uke,"A",{href:!0});var kFt=s(Qz);q1r=r(kFt,"TFLongformerForMultipleChoice"),kFt.forEach(t),N1r=r(uke," (Longformer model)"),uke.forEach(t),j1r=i(ie),A9=n(ie,"LI",{});var bke=s(A9);K1e=n(bke,"STRONG",{});var SFt=s(K1e);D1r=r(SFt,"mobilebert"),SFt.forEach(t),G1r=r(bke," \u2014 "),Wz=n(bke,"A",{href:!0});var RFt=s(Wz);O1r=r(RFt,"TFMobileBertForMultipleChoice"),RFt.forEach(t),V1r=r(bke," (MobileBERT model)"),bke.forEach(t),X1r=i(ie),y9=n(ie,"LI",{});var Fke=s(y9);Z1e=n(Fke,"STRONG",{});var BFt=s(Z1e);z1r=r(BFt,"mpnet"),BFt.forEach(t),Q1r=r(Fke," \u2014 "),Hz=n(Fke,"A",{href:!0});var PFt=s(Hz);W1r=r(PFt,"TFMPNetForMultipleChoice"),PFt.forEach(t),H1r=r(Fke," (MPNet model)"),Fke.forEach(t),U1r=i(ie),L9=n(ie,"LI",{});var vke=s(L9);ebe=n(vke,"STRONG",{});var $Ft=s(ebe);J1r=r($Ft,"rembert"),$Ft.forEach(t),Y1r=r(vke," \u2014 "),Uz=n(vke,"A",{href:!0});var IFt=s(Uz);K1r=r(IFt,"TFRemBertForMultipleChoice"),IFt.forEach(t),Z1r=r(vke," (RemBERT model)"),vke.forEach(t),ebr=i(ie),x9=n(ie,"LI",{});var Tke=s(x9);obe=n(Tke,"STRONG",{});var qFt=s(obe);obr=r(qFt,"roberta"),qFt.forEach(t),rbr=r(Tke," \u2014 "),Jz=n(Tke,"A",{href:!0});var NFt=s(Jz);tbr=r(NFt,"TFRobertaForMultipleChoice"),NFt.forEach(t),abr=r(Tke," (RoBERTa model)"),Tke.forEach(t),nbr=i(ie),k9=n(ie,"LI",{});var Mke=s(k9);rbe=n(Mke,"STRONG",{});var jFt=s(rbe);sbr=r(jFt,"roformer"),jFt.forEach(t),lbr=r(Mke," \u2014 "),Yz=n(Mke,"A",{href:!0});var DFt=s(Yz);ibr=r(DFt,"TFRoFormerForMultipleChoice"),DFt.forEach(t),dbr=r(Mke," (RoFormer model)"),Mke.forEach(t),cbr=i(ie),S9=n(ie,"LI",{});var Eke=s(S9);tbe=n(Eke,"STRONG",{});var GFt=s(tbe);fbr=r(GFt,"xlm"),GFt.forEach(t),mbr=r(Eke," \u2014 "),Kz=n(Eke,"A",{href:!0});var OFt=s(Kz);gbr=r(OFt,"TFXLMForMultipleChoice"),OFt.forEach(t),hbr=r(Eke," (XLM model)"),Eke.forEach(t),pbr=i(ie),R9=n(ie,"LI",{});var Cke=s(R9);abe=n(Cke,"STRONG",{});var VFt=s(abe);_br=r(VFt,"xlm-roberta"),VFt.forEach(t),ubr=r(Cke," \u2014 "),Zz=n(Cke,"A",{href:!0});var XFt=s(Zz);bbr=r(XFt,"TFXLMRobertaForMultipleChoice"),XFt.forEach(t),Fbr=r(Cke," (XLM-RoBERTa model)"),Cke.forEach(t),vbr=i(ie),B9=n(ie,"LI",{});var wke=s(B9);nbe=n(wke,"STRONG",{});var zFt=s(nbe);Tbr=r(zFt,"xlnet"),zFt.forEach(t),Mbr=r(wke," \u2014 "),eQ=n(wke,"A",{href:!0});var QFt=s(eQ);Ebr=r(QFt,"TFXLNetForMultipleChoice"),QFt.forEach(t),Cbr=r(wke," (XLNet model)"),wke.forEach(t),ie.forEach(t),wbr=i(Ma),sbe=n(Ma,"P",{});var WFt=s(sbe);Abr=r(WFt,"Examples:"),WFt.forEach(t),ybr=i(Ma),m(b0.$$.fragment,Ma),Ma.forEach(t),ri.forEach(t),RPe=i(c),jc=n(c,"H2",{class:!0});var VIe=s(jc);P9=n(VIe,"A",{id:!0,class:!0,href:!0});var HFt=s(P9);lbe=n(HFt,"SPAN",{});var UFt=s(lbe);m(F0.$$.fragment,UFt),UFt.forEach(t),HFt.forEach(t),Lbr=i(VIe),ibe=n(VIe,"SPAN",{});var JFt=s(ibe);xbr=r(JFt,"TFAutoModelForTableQuestionAnswering"),JFt.forEach(t),VIe.forEach(t),BPe=i(c),yr=n(c,"DIV",{class:!0});var ai=s(yr);m(v0.$$.fragment,ai),kbr=i(ai),Dc=n(ai,"P",{});var UJ=s(Dc);Sbr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),oQ=n(UJ,"A",{href:!0});var YFt=s(oQ);Rbr=r(YFt,"from_pretrained()"),YFt.forEach(t),Bbr=r(UJ," class method or the "),rQ=n(UJ,"A",{href:!0});var KFt=s(rQ);Pbr=r(KFt,"from_config()"),KFt.forEach(t),$br=r(UJ,` class
method.`),UJ.forEach(t),Ibr=i(ai),T0=n(ai,"P",{});var XIe=s(T0);qbr=r(XIe,"This class cannot be instantiated directly using "),dbe=n(XIe,"CODE",{});var ZFt=s(dbe);Nbr=r(ZFt,"__init__()"),ZFt.forEach(t),jbr=r(XIe," (throws an error)."),XIe.forEach(t),Dbr=i(ai),Tt=n(ai,"DIV",{class:!0});var ni=s(Tt);m(M0.$$.fragment,ni),Gbr=i(ni),cbe=n(ni,"P",{});var evt=s(cbe);Obr=r(evt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),evt.forEach(t),Vbr=i(ni),Gc=n(ni,"P",{});var JJ=s(Gc);Xbr=r(JJ,`Note:
Loading a model from its configuration file does `),fbe=n(JJ,"STRONG",{});var ovt=s(fbe);zbr=r(ovt,"not"),ovt.forEach(t),Qbr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),tQ=n(JJ,"A",{href:!0});var rvt=s(tQ);Wbr=r(rvt,"from_pretrained()"),rvt.forEach(t),Hbr=r(JJ," to load the model weights."),JJ.forEach(t),Ubr=i(ni),mbe=n(ni,"P",{});var tvt=s(mbe);Jbr=r(tvt,"Examples:"),tvt.forEach(t),Ybr=i(ni),m(E0.$$.fragment,ni),ni.forEach(t),Kbr=i(ai),Mo=n(ai,"DIV",{class:!0});var Ea=s(Mo);m(C0.$$.fragment,Ea),Zbr=i(Ea),gbe=n(Ea,"P",{});var avt=s(gbe);e6r=r(avt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),avt.forEach(t),o6r=i(Ea),wn=n(Ea,"P",{});var F5=s(wn);r6r=r(F5,"The model class to instantiate is selected based on the "),hbe=n(F5,"CODE",{});var nvt=s(hbe);t6r=r(nvt,"model_type"),nvt.forEach(t),a6r=r(F5,` property of the config object (either
passed as an argument or loaded from `),pbe=n(F5,"CODE",{});var svt=s(pbe);n6r=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),s6r=r(F5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(F5,"CODE",{});var lvt=s(_be);l6r=r(lvt,"pretrained_model_name_or_path"),lvt.forEach(t),i6r=r(F5,":"),F5.forEach(t),d6r=i(Ea),ube=n(Ea,"UL",{});var ivt=s(ube);$9=n(ivt,"LI",{});var Ake=s($9);bbe=n(Ake,"STRONG",{});var dvt=s(bbe);c6r=r(dvt,"tapas"),dvt.forEach(t),f6r=r(Ake," \u2014 "),aQ=n(Ake,"A",{href:!0});var cvt=s(aQ);m6r=r(cvt,"TFTapasForQuestionAnswering"),cvt.forEach(t),g6r=r(Ake," (TAPAS model)"),Ake.forEach(t),ivt.forEach(t),h6r=i(Ea),Fbe=n(Ea,"P",{});var fvt=s(Fbe);p6r=r(fvt,"Examples:"),fvt.forEach(t),_6r=i(Ea),m(w0.$$.fragment,Ea),Ea.forEach(t),ai.forEach(t),PPe=i(c),Oc=n(c,"H2",{class:!0});var zIe=s(Oc);I9=n(zIe,"A",{id:!0,class:!0,href:!0});var mvt=s(I9);vbe=n(mvt,"SPAN",{});var gvt=s(vbe);m(A0.$$.fragment,gvt),gvt.forEach(t),mvt.forEach(t),u6r=i(zIe),Tbe=n(zIe,"SPAN",{});var hvt=s(Tbe);b6r=r(hvt,"TFAutoModelForTokenClassification"),hvt.forEach(t),zIe.forEach(t),$Pe=i(c),Lr=n(c,"DIV",{class:!0});var si=s(Lr);m(y0.$$.fragment,si),F6r=i(si),Vc=n(si,"P",{});var YJ=s(Vc);v6r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nQ=n(YJ,"A",{href:!0});var pvt=s(nQ);T6r=r(pvt,"from_pretrained()"),pvt.forEach(t),M6r=r(YJ," class method or the "),sQ=n(YJ,"A",{href:!0});var _vt=s(sQ);E6r=r(_vt,"from_config()"),_vt.forEach(t),C6r=r(YJ,` class
method.`),YJ.forEach(t),w6r=i(si),L0=n(si,"P",{});var QIe=s(L0);A6r=r(QIe,"This class cannot be instantiated directly using "),Mbe=n(QIe,"CODE",{});var uvt=s(Mbe);y6r=r(uvt,"__init__()"),uvt.forEach(t),L6r=r(QIe," (throws an error)."),QIe.forEach(t),x6r=i(si),Mt=n(si,"DIV",{class:!0});var li=s(Mt);m(x0.$$.fragment,li),k6r=i(li),Ebe=n(li,"P",{});var bvt=s(Ebe);S6r=r(bvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bvt.forEach(t),R6r=i(li),Xc=n(li,"P",{});var KJ=s(Xc);B6r=r(KJ,`Note:
Loading a model from its configuration file does `),Cbe=n(KJ,"STRONG",{});var Fvt=s(Cbe);P6r=r(Fvt,"not"),Fvt.forEach(t),$6r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(KJ,"A",{href:!0});var vvt=s(lQ);I6r=r(vvt,"from_pretrained()"),vvt.forEach(t),q6r=r(KJ," to load the model weights."),KJ.forEach(t),N6r=i(li),wbe=n(li,"P",{});var Tvt=s(wbe);j6r=r(Tvt,"Examples:"),Tvt.forEach(t),D6r=i(li),m(k0.$$.fragment,li),li.forEach(t),G6r=i(si),Eo=n(si,"DIV",{class:!0});var Ca=s(Eo);m(S0.$$.fragment,Ca),O6r=i(Ca),Abe=n(Ca,"P",{});var Mvt=s(Abe);V6r=r(Mvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Mvt.forEach(t),X6r=i(Ca),An=n(Ca,"P",{});var v5=s(An);z6r=r(v5,"The model class to instantiate is selected based on the "),ybe=n(v5,"CODE",{});var Evt=s(ybe);Q6r=r(Evt,"model_type"),Evt.forEach(t),W6r=r(v5,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(v5,"CODE",{});var Cvt=s(Lbe);H6r=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),U6r=r(v5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(v5,"CODE",{});var wvt=s(xbe);J6r=r(wvt,"pretrained_model_name_or_path"),wvt.forEach(t),Y6r=r(v5,":"),v5.forEach(t),K6r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);q9=n(re,"LI",{});var yke=s(q9);kbe=n(yke,"STRONG",{});var Avt=s(kbe);Z6r=r(Avt,"albert"),Avt.forEach(t),eFr=r(yke," \u2014 "),iQ=n(yke,"A",{href:!0});var yvt=s(iQ);oFr=r(yvt,"TFAlbertForTokenClassification"),yvt.forEach(t),rFr=r(yke," (ALBERT model)"),yke.forEach(t),tFr=i(re),N9=n(re,"LI",{});var Lke=s(N9);Sbe=n(Lke,"STRONG",{});var Lvt=s(Sbe);aFr=r(Lvt,"bert"),Lvt.forEach(t),nFr=r(Lke," \u2014 "),dQ=n(Lke,"A",{href:!0});var xvt=s(dQ);sFr=r(xvt,"TFBertForTokenClassification"),xvt.forEach(t),lFr=r(Lke," (BERT model)"),Lke.forEach(t),iFr=i(re),j9=n(re,"LI",{});var xke=s(j9);Rbe=n(xke,"STRONG",{});var kvt=s(Rbe);dFr=r(kvt,"camembert"),kvt.forEach(t),cFr=r(xke," \u2014 "),cQ=n(xke,"A",{href:!0});var Svt=s(cQ);fFr=r(Svt,"TFCamembertForTokenClassification"),Svt.forEach(t),mFr=r(xke," (CamemBERT model)"),xke.forEach(t),gFr=i(re),D9=n(re,"LI",{});var kke=s(D9);Bbe=n(kke,"STRONG",{});var Rvt=s(Bbe);hFr=r(Rvt,"convbert"),Rvt.forEach(t),pFr=r(kke," \u2014 "),fQ=n(kke,"A",{href:!0});var Bvt=s(fQ);_Fr=r(Bvt,"TFConvBertForTokenClassification"),Bvt.forEach(t),uFr=r(kke," (ConvBERT model)"),kke.forEach(t),bFr=i(re),G9=n(re,"LI",{});var Ske=s(G9);Pbe=n(Ske,"STRONG",{});var Pvt=s(Pbe);FFr=r(Pvt,"deberta"),Pvt.forEach(t),vFr=r(Ske," \u2014 "),mQ=n(Ske,"A",{href:!0});var $vt=s(mQ);TFr=r($vt,"TFDebertaForTokenClassification"),$vt.forEach(t),MFr=r(Ske," (DeBERTa model)"),Ske.forEach(t),EFr=i(re),O9=n(re,"LI",{});var Rke=s(O9);$be=n(Rke,"STRONG",{});var Ivt=s($be);CFr=r(Ivt,"deberta-v2"),Ivt.forEach(t),wFr=r(Rke," \u2014 "),gQ=n(Rke,"A",{href:!0});var qvt=s(gQ);AFr=r(qvt,"TFDebertaV2ForTokenClassification"),qvt.forEach(t),yFr=r(Rke," (DeBERTa-v2 model)"),Rke.forEach(t),LFr=i(re),V9=n(re,"LI",{});var Bke=s(V9);Ibe=n(Bke,"STRONG",{});var Nvt=s(Ibe);xFr=r(Nvt,"distilbert"),Nvt.forEach(t),kFr=r(Bke," \u2014 "),hQ=n(Bke,"A",{href:!0});var jvt=s(hQ);SFr=r(jvt,"TFDistilBertForTokenClassification"),jvt.forEach(t),RFr=r(Bke," (DistilBERT model)"),Bke.forEach(t),BFr=i(re),X9=n(re,"LI",{});var Pke=s(X9);qbe=n(Pke,"STRONG",{});var Dvt=s(qbe);PFr=r(Dvt,"electra"),Dvt.forEach(t),$Fr=r(Pke," \u2014 "),pQ=n(Pke,"A",{href:!0});var Gvt=s(pQ);IFr=r(Gvt,"TFElectraForTokenClassification"),Gvt.forEach(t),qFr=r(Pke," (ELECTRA model)"),Pke.forEach(t),NFr=i(re),z9=n(re,"LI",{});var $ke=s(z9);Nbe=n($ke,"STRONG",{});var Ovt=s(Nbe);jFr=r(Ovt,"flaubert"),Ovt.forEach(t),DFr=r($ke," \u2014 "),_Q=n($ke,"A",{href:!0});var Vvt=s(_Q);GFr=r(Vvt,"TFFlaubertForTokenClassification"),Vvt.forEach(t),OFr=r($ke," (FlauBERT model)"),$ke.forEach(t),VFr=i(re),Q9=n(re,"LI",{});var Ike=s(Q9);jbe=n(Ike,"STRONG",{});var Xvt=s(jbe);XFr=r(Xvt,"funnel"),Xvt.forEach(t),zFr=r(Ike," \u2014 "),uQ=n(Ike,"A",{href:!0});var zvt=s(uQ);QFr=r(zvt,"TFFunnelForTokenClassification"),zvt.forEach(t),WFr=r(Ike," (Funnel Transformer model)"),Ike.forEach(t),HFr=i(re),W9=n(re,"LI",{});var qke=s(W9);Dbe=n(qke,"STRONG",{});var Qvt=s(Dbe);UFr=r(Qvt,"layoutlm"),Qvt.forEach(t),JFr=r(qke," \u2014 "),bQ=n(qke,"A",{href:!0});var Wvt=s(bQ);YFr=r(Wvt,"TFLayoutLMForTokenClassification"),Wvt.forEach(t),KFr=r(qke," (LayoutLM model)"),qke.forEach(t),ZFr=i(re),H9=n(re,"LI",{});var Nke=s(H9);Gbe=n(Nke,"STRONG",{});var Hvt=s(Gbe);evr=r(Hvt,"longformer"),Hvt.forEach(t),ovr=r(Nke," \u2014 "),FQ=n(Nke,"A",{href:!0});var Uvt=s(FQ);rvr=r(Uvt,"TFLongformerForTokenClassification"),Uvt.forEach(t),tvr=r(Nke," (Longformer model)"),Nke.forEach(t),avr=i(re),U9=n(re,"LI",{});var jke=s(U9);Obe=n(jke,"STRONG",{});var Jvt=s(Obe);nvr=r(Jvt,"mobilebert"),Jvt.forEach(t),svr=r(jke," \u2014 "),vQ=n(jke,"A",{href:!0});var Yvt=s(vQ);lvr=r(Yvt,"TFMobileBertForTokenClassification"),Yvt.forEach(t),ivr=r(jke," (MobileBERT model)"),jke.forEach(t),dvr=i(re),J9=n(re,"LI",{});var Dke=s(J9);Vbe=n(Dke,"STRONG",{});var Kvt=s(Vbe);cvr=r(Kvt,"mpnet"),Kvt.forEach(t),fvr=r(Dke," \u2014 "),TQ=n(Dke,"A",{href:!0});var Zvt=s(TQ);mvr=r(Zvt,"TFMPNetForTokenClassification"),Zvt.forEach(t),gvr=r(Dke," (MPNet model)"),Dke.forEach(t),hvr=i(re),Y9=n(re,"LI",{});var Gke=s(Y9);Xbe=n(Gke,"STRONG",{});var eTt=s(Xbe);pvr=r(eTt,"rembert"),eTt.forEach(t),_vr=r(Gke," \u2014 "),MQ=n(Gke,"A",{href:!0});var oTt=s(MQ);uvr=r(oTt,"TFRemBertForTokenClassification"),oTt.forEach(t),bvr=r(Gke," (RemBERT model)"),Gke.forEach(t),Fvr=i(re),K9=n(re,"LI",{});var Oke=s(K9);zbe=n(Oke,"STRONG",{});var rTt=s(zbe);vvr=r(rTt,"roberta"),rTt.forEach(t),Tvr=r(Oke," \u2014 "),EQ=n(Oke,"A",{href:!0});var tTt=s(EQ);Mvr=r(tTt,"TFRobertaForTokenClassification"),tTt.forEach(t),Evr=r(Oke," (RoBERTa model)"),Oke.forEach(t),Cvr=i(re),Z9=n(re,"LI",{});var Vke=s(Z9);Qbe=n(Vke,"STRONG",{});var aTt=s(Qbe);wvr=r(aTt,"roformer"),aTt.forEach(t),Avr=r(Vke," \u2014 "),CQ=n(Vke,"A",{href:!0});var nTt=s(CQ);yvr=r(nTt,"TFRoFormerForTokenClassification"),nTt.forEach(t),Lvr=r(Vke," (RoFormer model)"),Vke.forEach(t),xvr=i(re),eM=n(re,"LI",{});var Xke=s(eM);Wbe=n(Xke,"STRONG",{});var sTt=s(Wbe);kvr=r(sTt,"xlm"),sTt.forEach(t),Svr=r(Xke," \u2014 "),wQ=n(Xke,"A",{href:!0});var lTt=s(wQ);Rvr=r(lTt,"TFXLMForTokenClassification"),lTt.forEach(t),Bvr=r(Xke," (XLM model)"),Xke.forEach(t),Pvr=i(re),oM=n(re,"LI",{});var zke=s(oM);Hbe=n(zke,"STRONG",{});var iTt=s(Hbe);$vr=r(iTt,"xlm-roberta"),iTt.forEach(t),Ivr=r(zke," \u2014 "),AQ=n(zke,"A",{href:!0});var dTt=s(AQ);qvr=r(dTt,"TFXLMRobertaForTokenClassification"),dTt.forEach(t),Nvr=r(zke," (XLM-RoBERTa model)"),zke.forEach(t),jvr=i(re),rM=n(re,"LI",{});var Qke=s(rM);Ube=n(Qke,"STRONG",{});var cTt=s(Ube);Dvr=r(cTt,"xlnet"),cTt.forEach(t),Gvr=r(Qke," \u2014 "),yQ=n(Qke,"A",{href:!0});var fTt=s(yQ);Ovr=r(fTt,"TFXLNetForTokenClassification"),fTt.forEach(t),Vvr=r(Qke," (XLNet model)"),Qke.forEach(t),re.forEach(t),Xvr=i(Ca),Jbe=n(Ca,"P",{});var mTt=s(Jbe);zvr=r(mTt,"Examples:"),mTt.forEach(t),Qvr=i(Ca),m(R0.$$.fragment,Ca),Ca.forEach(t),si.forEach(t),IPe=i(c),zc=n(c,"H2",{class:!0});var WIe=s(zc);tM=n(WIe,"A",{id:!0,class:!0,href:!0});var gTt=s(tM);Ybe=n(gTt,"SPAN",{});var hTt=s(Ybe);m(B0.$$.fragment,hTt),hTt.forEach(t),gTt.forEach(t),Wvr=i(WIe),Kbe=n(WIe,"SPAN",{});var pTt=s(Kbe);Hvr=r(pTt,"TFAutoModelForQuestionAnswering"),pTt.forEach(t),WIe.forEach(t),qPe=i(c),xr=n(c,"DIV",{class:!0});var ii=s(xr);m(P0.$$.fragment,ii),Uvr=i(ii),Qc=n(ii,"P",{});var ZJ=s(Qc);Jvr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),LQ=n(ZJ,"A",{href:!0});var _Tt=s(LQ);Yvr=r(_Tt,"from_pretrained()"),_Tt.forEach(t),Kvr=r(ZJ," class method or the "),xQ=n(ZJ,"A",{href:!0});var uTt=s(xQ);Zvr=r(uTt,"from_config()"),uTt.forEach(t),eTr=r(ZJ,` class
method.`),ZJ.forEach(t),oTr=i(ii),$0=n(ii,"P",{});var HIe=s($0);rTr=r(HIe,"This class cannot be instantiated directly using "),Zbe=n(HIe,"CODE",{});var bTt=s(Zbe);tTr=r(bTt,"__init__()"),bTt.forEach(t),aTr=r(HIe," (throws an error)."),HIe.forEach(t),nTr=i(ii),Et=n(ii,"DIV",{class:!0});var di=s(Et);m(I0.$$.fragment,di),sTr=i(di),e6e=n(di,"P",{});var FTt=s(e6e);lTr=r(FTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FTt.forEach(t),iTr=i(di),Wc=n(di,"P",{});var eY=s(Wc);dTr=r(eY,`Note:
Loading a model from its configuration file does `),o6e=n(eY,"STRONG",{});var vTt=s(o6e);cTr=r(vTt,"not"),vTt.forEach(t),fTr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kQ=n(eY,"A",{href:!0});var TTt=s(kQ);mTr=r(TTt,"from_pretrained()"),TTt.forEach(t),gTr=r(eY," to load the model weights."),eY.forEach(t),hTr=i(di),r6e=n(di,"P",{});var MTt=s(r6e);pTr=r(MTt,"Examples:"),MTt.forEach(t),_Tr=i(di),m(q0.$$.fragment,di),di.forEach(t),uTr=i(ii),Co=n(ii,"DIV",{class:!0});var wa=s(Co);m(N0.$$.fragment,wa),bTr=i(wa),t6e=n(wa,"P",{});var ETt=s(t6e);FTr=r(ETt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ETt.forEach(t),vTr=i(wa),yn=n(wa,"P",{});var T5=s(yn);TTr=r(T5,"The model class to instantiate is selected based on the "),a6e=n(T5,"CODE",{});var CTt=s(a6e);MTr=r(CTt,"model_type"),CTt.forEach(t),ETr=r(T5,` property of the config object (either
passed as an argument or loaded from `),n6e=n(T5,"CODE",{});var wTt=s(n6e);CTr=r(wTt,"pretrained_model_name_or_path"),wTt.forEach(t),wTr=r(T5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s6e=n(T5,"CODE",{});var ATt=s(s6e);ATr=r(ATt,"pretrained_model_name_or_path"),ATt.forEach(t),yTr=r(T5,":"),T5.forEach(t),LTr=i(wa),K=n(wa,"UL",{});var te=s(K);aM=n(te,"LI",{});var Wke=s(aM);l6e=n(Wke,"STRONG",{});var yTt=s(l6e);xTr=r(yTt,"albert"),yTt.forEach(t),kTr=r(Wke," \u2014 "),SQ=n(Wke,"A",{href:!0});var LTt=s(SQ);STr=r(LTt,"TFAlbertForQuestionAnswering"),LTt.forEach(t),RTr=r(Wke," (ALBERT model)"),Wke.forEach(t),BTr=i(te),nM=n(te,"LI",{});var Hke=s(nM);i6e=n(Hke,"STRONG",{});var xTt=s(i6e);PTr=r(xTt,"bert"),xTt.forEach(t),$Tr=r(Hke," \u2014 "),RQ=n(Hke,"A",{href:!0});var kTt=s(RQ);ITr=r(kTt,"TFBertForQuestionAnswering"),kTt.forEach(t),qTr=r(Hke," (BERT model)"),Hke.forEach(t),NTr=i(te),sM=n(te,"LI",{});var Uke=s(sM);d6e=n(Uke,"STRONG",{});var STt=s(d6e);jTr=r(STt,"camembert"),STt.forEach(t),DTr=r(Uke," \u2014 "),BQ=n(Uke,"A",{href:!0});var RTt=s(BQ);GTr=r(RTt,"TFCamembertForQuestionAnswering"),RTt.forEach(t),OTr=r(Uke," (CamemBERT model)"),Uke.forEach(t),VTr=i(te),lM=n(te,"LI",{});var Jke=s(lM);c6e=n(Jke,"STRONG",{});var BTt=s(c6e);XTr=r(BTt,"convbert"),BTt.forEach(t),zTr=r(Jke," \u2014 "),PQ=n(Jke,"A",{href:!0});var PTt=s(PQ);QTr=r(PTt,"TFConvBertForQuestionAnswering"),PTt.forEach(t),WTr=r(Jke," (ConvBERT model)"),Jke.forEach(t),HTr=i(te),iM=n(te,"LI",{});var Yke=s(iM);f6e=n(Yke,"STRONG",{});var $Tt=s(f6e);UTr=r($Tt,"deberta"),$Tt.forEach(t),JTr=r(Yke," \u2014 "),$Q=n(Yke,"A",{href:!0});var ITt=s($Q);YTr=r(ITt,"TFDebertaForQuestionAnswering"),ITt.forEach(t),KTr=r(Yke," (DeBERTa model)"),Yke.forEach(t),ZTr=i(te),dM=n(te,"LI",{});var Kke=s(dM);m6e=n(Kke,"STRONG",{});var qTt=s(m6e);e7r=r(qTt,"deberta-v2"),qTt.forEach(t),o7r=r(Kke," \u2014 "),IQ=n(Kke,"A",{href:!0});var NTt=s(IQ);r7r=r(NTt,"TFDebertaV2ForQuestionAnswering"),NTt.forEach(t),t7r=r(Kke," (DeBERTa-v2 model)"),Kke.forEach(t),a7r=i(te),cM=n(te,"LI",{});var Zke=s(cM);g6e=n(Zke,"STRONG",{});var jTt=s(g6e);n7r=r(jTt,"distilbert"),jTt.forEach(t),s7r=r(Zke," \u2014 "),qQ=n(Zke,"A",{href:!0});var DTt=s(qQ);l7r=r(DTt,"TFDistilBertForQuestionAnswering"),DTt.forEach(t),i7r=r(Zke," (DistilBERT model)"),Zke.forEach(t),d7r=i(te),fM=n(te,"LI",{});var eSe=s(fM);h6e=n(eSe,"STRONG",{});var GTt=s(h6e);c7r=r(GTt,"electra"),GTt.forEach(t),f7r=r(eSe," \u2014 "),NQ=n(eSe,"A",{href:!0});var OTt=s(NQ);m7r=r(OTt,"TFElectraForQuestionAnswering"),OTt.forEach(t),g7r=r(eSe," (ELECTRA model)"),eSe.forEach(t),h7r=i(te),mM=n(te,"LI",{});var oSe=s(mM);p6e=n(oSe,"STRONG",{});var VTt=s(p6e);p7r=r(VTt,"flaubert"),VTt.forEach(t),_7r=r(oSe," \u2014 "),jQ=n(oSe,"A",{href:!0});var XTt=s(jQ);u7r=r(XTt,"TFFlaubertForQuestionAnsweringSimple"),XTt.forEach(t),b7r=r(oSe," (FlauBERT model)"),oSe.forEach(t),F7r=i(te),gM=n(te,"LI",{});var rSe=s(gM);_6e=n(rSe,"STRONG",{});var zTt=s(_6e);v7r=r(zTt,"funnel"),zTt.forEach(t),T7r=r(rSe," \u2014 "),DQ=n(rSe,"A",{href:!0});var QTt=s(DQ);M7r=r(QTt,"TFFunnelForQuestionAnswering"),QTt.forEach(t),E7r=r(rSe," (Funnel Transformer model)"),rSe.forEach(t),C7r=i(te),hM=n(te,"LI",{});var tSe=s(hM);u6e=n(tSe,"STRONG",{});var WTt=s(u6e);w7r=r(WTt,"gptj"),WTt.forEach(t),A7r=r(tSe," \u2014 "),GQ=n(tSe,"A",{href:!0});var HTt=s(GQ);y7r=r(HTt,"TFGPTJForQuestionAnswering"),HTt.forEach(t),L7r=r(tSe," (GPT-J model)"),tSe.forEach(t),x7r=i(te),pM=n(te,"LI",{});var aSe=s(pM);b6e=n(aSe,"STRONG",{});var UTt=s(b6e);k7r=r(UTt,"longformer"),UTt.forEach(t),S7r=r(aSe," \u2014 "),OQ=n(aSe,"A",{href:!0});var JTt=s(OQ);R7r=r(JTt,"TFLongformerForQuestionAnswering"),JTt.forEach(t),B7r=r(aSe," (Longformer model)"),aSe.forEach(t),P7r=i(te),_M=n(te,"LI",{});var nSe=s(_M);F6e=n(nSe,"STRONG",{});var YTt=s(F6e);$7r=r(YTt,"mobilebert"),YTt.forEach(t),I7r=r(nSe," \u2014 "),VQ=n(nSe,"A",{href:!0});var KTt=s(VQ);q7r=r(KTt,"TFMobileBertForQuestionAnswering"),KTt.forEach(t),N7r=r(nSe," (MobileBERT model)"),nSe.forEach(t),j7r=i(te),uM=n(te,"LI",{});var sSe=s(uM);v6e=n(sSe,"STRONG",{});var ZTt=s(v6e);D7r=r(ZTt,"mpnet"),ZTt.forEach(t),G7r=r(sSe," \u2014 "),XQ=n(sSe,"A",{href:!0});var e7t=s(XQ);O7r=r(e7t,"TFMPNetForQuestionAnswering"),e7t.forEach(t),V7r=r(sSe," (MPNet model)"),sSe.forEach(t),X7r=i(te),bM=n(te,"LI",{});var lSe=s(bM);T6e=n(lSe,"STRONG",{});var o7t=s(T6e);z7r=r(o7t,"rembert"),o7t.forEach(t),Q7r=r(lSe," \u2014 "),zQ=n(lSe,"A",{href:!0});var r7t=s(zQ);W7r=r(r7t,"TFRemBertForQuestionAnswering"),r7t.forEach(t),H7r=r(lSe," (RemBERT model)"),lSe.forEach(t),U7r=i(te),FM=n(te,"LI",{});var iSe=s(FM);M6e=n(iSe,"STRONG",{});var t7t=s(M6e);J7r=r(t7t,"roberta"),t7t.forEach(t),Y7r=r(iSe," \u2014 "),QQ=n(iSe,"A",{href:!0});var a7t=s(QQ);K7r=r(a7t,"TFRobertaForQuestionAnswering"),a7t.forEach(t),Z7r=r(iSe," (RoBERTa model)"),iSe.forEach(t),e9r=i(te),vM=n(te,"LI",{});var dSe=s(vM);E6e=n(dSe,"STRONG",{});var n7t=s(E6e);o9r=r(n7t,"roformer"),n7t.forEach(t),r9r=r(dSe," \u2014 "),WQ=n(dSe,"A",{href:!0});var s7t=s(WQ);t9r=r(s7t,"TFRoFormerForQuestionAnswering"),s7t.forEach(t),a9r=r(dSe," (RoFormer model)"),dSe.forEach(t),n9r=i(te),TM=n(te,"LI",{});var cSe=s(TM);C6e=n(cSe,"STRONG",{});var l7t=s(C6e);s9r=r(l7t,"xlm"),l7t.forEach(t),l9r=r(cSe," \u2014 "),HQ=n(cSe,"A",{href:!0});var i7t=s(HQ);i9r=r(i7t,"TFXLMForQuestionAnsweringSimple"),i7t.forEach(t),d9r=r(cSe," (XLM model)"),cSe.forEach(t),c9r=i(te),MM=n(te,"LI",{});var fSe=s(MM);w6e=n(fSe,"STRONG",{});var d7t=s(w6e);f9r=r(d7t,"xlm-roberta"),d7t.forEach(t),m9r=r(fSe," \u2014 "),UQ=n(fSe,"A",{href:!0});var c7t=s(UQ);g9r=r(c7t,"TFXLMRobertaForQuestionAnswering"),c7t.forEach(t),h9r=r(fSe," (XLM-RoBERTa model)"),fSe.forEach(t),p9r=i(te),EM=n(te,"LI",{});var mSe=s(EM);A6e=n(mSe,"STRONG",{});var f7t=s(A6e);_9r=r(f7t,"xlnet"),f7t.forEach(t),u9r=r(mSe," \u2014 "),JQ=n(mSe,"A",{href:!0});var m7t=s(JQ);b9r=r(m7t,"TFXLNetForQuestionAnsweringSimple"),m7t.forEach(t),F9r=r(mSe," (XLNet model)"),mSe.forEach(t),te.forEach(t),v9r=i(wa),y6e=n(wa,"P",{});var g7t=s(y6e);T9r=r(g7t,"Examples:"),g7t.forEach(t),M9r=i(wa),m(j0.$$.fragment,wa),wa.forEach(t),ii.forEach(t),NPe=i(c),Hc=n(c,"H2",{class:!0});var UIe=s(Hc);CM=n(UIe,"A",{id:!0,class:!0,href:!0});var h7t=s(CM);L6e=n(h7t,"SPAN",{});var p7t=s(L6e);m(D0.$$.fragment,p7t),p7t.forEach(t),h7t.forEach(t),E9r=i(UIe),x6e=n(UIe,"SPAN",{});var _7t=s(x6e);C9r=r(_7t,"TFAutoModelForVision2Seq"),_7t.forEach(t),UIe.forEach(t),jPe=i(c),kr=n(c,"DIV",{class:!0});var ci=s(kr);m(G0.$$.fragment,ci),w9r=i(ci),Uc=n(ci,"P",{});var oY=s(Uc);A9r=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),YQ=n(oY,"A",{href:!0});var u7t=s(YQ);y9r=r(u7t,"from_pretrained()"),u7t.forEach(t),L9r=r(oY," class method or the "),KQ=n(oY,"A",{href:!0});var b7t=s(KQ);x9r=r(b7t,"from_config()"),b7t.forEach(t),k9r=r(oY,` class
method.`),oY.forEach(t),S9r=i(ci),O0=n(ci,"P",{});var JIe=s(O0);R9r=r(JIe,"This class cannot be instantiated directly using "),k6e=n(JIe,"CODE",{});var F7t=s(k6e);B9r=r(F7t,"__init__()"),F7t.forEach(t),P9r=r(JIe," (throws an error)."),JIe.forEach(t),$9r=i(ci),Ct=n(ci,"DIV",{class:!0});var fi=s(Ct);m(V0.$$.fragment,fi),I9r=i(fi),S6e=n(fi,"P",{});var v7t=s(S6e);q9r=r(v7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v7t.forEach(t),N9r=i(fi),Jc=n(fi,"P",{});var rY=s(Jc);j9r=r(rY,`Note:
Loading a model from its configuration file does `),R6e=n(rY,"STRONG",{});var T7t=s(R6e);D9r=r(T7t,"not"),T7t.forEach(t),G9r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZQ=n(rY,"A",{href:!0});var M7t=s(ZQ);O9r=r(M7t,"from_pretrained()"),M7t.forEach(t),V9r=r(rY," to load the model weights."),rY.forEach(t),X9r=i(fi),B6e=n(fi,"P",{});var E7t=s(B6e);z9r=r(E7t,"Examples:"),E7t.forEach(t),Q9r=i(fi),m(X0.$$.fragment,fi),fi.forEach(t),W9r=i(ci),wo=n(ci,"DIV",{class:!0});var Aa=s(wo);m(z0.$$.fragment,Aa),H9r=i(Aa),P6e=n(Aa,"P",{});var C7t=s(P6e);U9r=r(C7t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),C7t.forEach(t),J9r=i(Aa),Ln=n(Aa,"P",{});var M5=s(Ln);Y9r=r(M5,"The model class to instantiate is selected based on the "),$6e=n(M5,"CODE",{});var w7t=s($6e);K9r=r(w7t,"model_type"),w7t.forEach(t),Z9r=r(M5,` property of the config object (either
passed as an argument or loaded from `),I6e=n(M5,"CODE",{});var A7t=s(I6e);eMr=r(A7t,"pretrained_model_name_or_path"),A7t.forEach(t),oMr=r(M5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q6e=n(M5,"CODE",{});var y7t=s(q6e);rMr=r(y7t,"pretrained_model_name_or_path"),y7t.forEach(t),tMr=r(M5,":"),M5.forEach(t),aMr=i(Aa),N6e=n(Aa,"UL",{});var L7t=s(N6e);wM=n(L7t,"LI",{});var gSe=s(wM);j6e=n(gSe,"STRONG",{});var x7t=s(j6e);nMr=r(x7t,"vision-encoder-decoder"),x7t.forEach(t),sMr=r(gSe," \u2014 "),eW=n(gSe,"A",{href:!0});var k7t=s(eW);lMr=r(k7t,"TFVisionEncoderDecoderModel"),k7t.forEach(t),iMr=r(gSe," (Vision Encoder decoder model)"),gSe.forEach(t),L7t.forEach(t),dMr=i(Aa),D6e=n(Aa,"P",{});var S7t=s(D6e);cMr=r(S7t,"Examples:"),S7t.forEach(t),fMr=i(Aa),m(Q0.$$.fragment,Aa),Aa.forEach(t),ci.forEach(t),DPe=i(c),Yc=n(c,"H2",{class:!0});var YIe=s(Yc);AM=n(YIe,"A",{id:!0,class:!0,href:!0});var R7t=s(AM);G6e=n(R7t,"SPAN",{});var B7t=s(G6e);m(W0.$$.fragment,B7t),B7t.forEach(t),R7t.forEach(t),mMr=i(YIe),O6e=n(YIe,"SPAN",{});var P7t=s(O6e);gMr=r(P7t,"TFAutoModelForSpeechSeq2Seq"),P7t.forEach(t),YIe.forEach(t),GPe=i(c),Sr=n(c,"DIV",{class:!0});var mi=s(Sr);m(H0.$$.fragment,mi),hMr=i(mi),Kc=n(mi,"P",{});var tY=s(Kc);pMr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),oW=n(tY,"A",{href:!0});var $7t=s(oW);_Mr=r($7t,"from_pretrained()"),$7t.forEach(t),uMr=r(tY," class method or the "),rW=n(tY,"A",{href:!0});var I7t=s(rW);bMr=r(I7t,"from_config()"),I7t.forEach(t),FMr=r(tY,` class
method.`),tY.forEach(t),vMr=i(mi),U0=n(mi,"P",{});var KIe=s(U0);TMr=r(KIe,"This class cannot be instantiated directly using "),V6e=n(KIe,"CODE",{});var q7t=s(V6e);MMr=r(q7t,"__init__()"),q7t.forEach(t),EMr=r(KIe," (throws an error)."),KIe.forEach(t),CMr=i(mi),wt=n(mi,"DIV",{class:!0});var gi=s(wt);m(J0.$$.fragment,gi),wMr=i(gi),X6e=n(gi,"P",{});var N7t=s(X6e);AMr=r(N7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),N7t.forEach(t),yMr=i(gi),Zc=n(gi,"P",{});var aY=s(Zc);LMr=r(aY,`Note:
Loading a model from its configuration file does `),z6e=n(aY,"STRONG",{});var j7t=s(z6e);xMr=r(j7t,"not"),j7t.forEach(t),kMr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(aY,"A",{href:!0});var D7t=s(tW);SMr=r(D7t,"from_pretrained()"),D7t.forEach(t),RMr=r(aY," to load the model weights."),aY.forEach(t),BMr=i(gi),Q6e=n(gi,"P",{});var G7t=s(Q6e);PMr=r(G7t,"Examples:"),G7t.forEach(t),$Mr=i(gi),m(Y0.$$.fragment,gi),gi.forEach(t),IMr=i(mi),Ao=n(mi,"DIV",{class:!0});var ya=s(Ao);m(K0.$$.fragment,ya),qMr=i(ya),W6e=n(ya,"P",{});var O7t=s(W6e);NMr=r(O7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),O7t.forEach(t),jMr=i(ya),xn=n(ya,"P",{});var E5=s(xn);DMr=r(E5,"The model class to instantiate is selected based on the "),H6e=n(E5,"CODE",{});var V7t=s(H6e);GMr=r(V7t,"model_type"),V7t.forEach(t),OMr=r(E5,` property of the config object (either
passed as an argument or loaded from `),U6e=n(E5,"CODE",{});var X7t=s(U6e);VMr=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),XMr=r(E5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J6e=n(E5,"CODE",{});var z7t=s(J6e);zMr=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),QMr=r(E5,":"),E5.forEach(t),WMr=i(ya),Y6e=n(ya,"UL",{});var Q7t=s(Y6e);yM=n(Q7t,"LI",{});var hSe=s(yM);K6e=n(hSe,"STRONG",{});var W7t=s(K6e);HMr=r(W7t,"speech_to_text"),W7t.forEach(t),UMr=r(hSe," \u2014 "),aW=n(hSe,"A",{href:!0});var H7t=s(aW);JMr=r(H7t,"TFSpeech2TextForConditionalGeneration"),H7t.forEach(t),YMr=r(hSe," (Speech2Text model)"),hSe.forEach(t),Q7t.forEach(t),KMr=i(ya),Z6e=n(ya,"P",{});var U7t=s(Z6e);ZMr=r(U7t,"Examples:"),U7t.forEach(t),e4r=i(ya),m(Z0.$$.fragment,ya),ya.forEach(t),mi.forEach(t),OPe=i(c),ef=n(c,"H2",{class:!0});var ZIe=s(ef);LM=n(ZIe,"A",{id:!0,class:!0,href:!0});var J7t=s(LM);eFe=n(J7t,"SPAN",{});var Y7t=s(eFe);m(ey.$$.fragment,Y7t),Y7t.forEach(t),J7t.forEach(t),o4r=i(ZIe),oFe=n(ZIe,"SPAN",{});var K7t=s(oFe);r4r=r(K7t,"FlaxAutoModel"),K7t.forEach(t),ZIe.forEach(t),VPe=i(c),Rr=n(c,"DIV",{class:!0});var hi=s(Rr);m(oy.$$.fragment,hi),t4r=i(hi),of=n(hi,"P",{});var nY=s(of);a4r=r(nY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),nW=n(nY,"A",{href:!0});var Z7t=s(nW);n4r=r(Z7t,"from_pretrained()"),Z7t.forEach(t),s4r=r(nY," class method or the "),sW=n(nY,"A",{href:!0});var e9t=s(sW);l4r=r(e9t,"from_config()"),e9t.forEach(t),i4r=r(nY,` class
method.`),nY.forEach(t),d4r=i(hi),ry=n(hi,"P",{});var eqe=s(ry);c4r=r(eqe,"This class cannot be instantiated directly using "),rFe=n(eqe,"CODE",{});var o9t=s(rFe);f4r=r(o9t,"__init__()"),o9t.forEach(t),m4r=r(eqe," (throws an error)."),eqe.forEach(t),g4r=i(hi),At=n(hi,"DIV",{class:!0});var pi=s(At);m(ty.$$.fragment,pi),h4r=i(pi),tFe=n(pi,"P",{});var r9t=s(tFe);p4r=r(r9t,"Instantiates one of the base model classes of the library from a configuration."),r9t.forEach(t),_4r=i(pi),rf=n(pi,"P",{});var sY=s(rf);u4r=r(sY,`Note:
Loading a model from its configuration file does `),aFe=n(sY,"STRONG",{});var t9t=s(aFe);b4r=r(t9t,"not"),t9t.forEach(t),F4r=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lW=n(sY,"A",{href:!0});var a9t=s(lW);v4r=r(a9t,"from_pretrained()"),a9t.forEach(t),T4r=r(sY," to load the model weights."),sY.forEach(t),M4r=i(pi),nFe=n(pi,"P",{});var n9t=s(nFe);E4r=r(n9t,"Examples:"),n9t.forEach(t),C4r=i(pi),m(ay.$$.fragment,pi),pi.forEach(t),w4r=i(hi),yo=n(hi,"DIV",{class:!0});var La=s(yo);m(ny.$$.fragment,La),A4r=i(La),sFe=n(La,"P",{});var s9t=s(sFe);y4r=r(s9t,"Instantiate one of the base model classes of the library from a pretrained model."),s9t.forEach(t),L4r=i(La),kn=n(La,"P",{});var C5=s(kn);x4r=r(C5,"The model class to instantiate is selected based on the "),lFe=n(C5,"CODE",{});var l9t=s(lFe);k4r=r(l9t,"model_type"),l9t.forEach(t),S4r=r(C5,` property of the config object (either
passed as an argument or loaded from `),iFe=n(C5,"CODE",{});var i9t=s(iFe);R4r=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),B4r=r(C5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(C5,"CODE",{});var d9t=s(dFe);P4r=r(d9t,"pretrained_model_name_or_path"),d9t.forEach(t),$4r=r(C5,":"),C5.forEach(t),I4r=i(La),X=n(La,"UL",{});var W=s(X);xM=n(W,"LI",{});var pSe=s(xM);cFe=n(pSe,"STRONG",{});var c9t=s(cFe);q4r=r(c9t,"albert"),c9t.forEach(t),N4r=r(pSe," \u2014 "),iW=n(pSe,"A",{href:!0});var f9t=s(iW);j4r=r(f9t,"FlaxAlbertModel"),f9t.forEach(t),D4r=r(pSe," (ALBERT model)"),pSe.forEach(t),G4r=i(W),kM=n(W,"LI",{});var _Se=s(kM);fFe=n(_Se,"STRONG",{});var m9t=s(fFe);O4r=r(m9t,"bart"),m9t.forEach(t),V4r=r(_Se," \u2014 "),dW=n(_Se,"A",{href:!0});var g9t=s(dW);X4r=r(g9t,"FlaxBartModel"),g9t.forEach(t),z4r=r(_Se," (BART model)"),_Se.forEach(t),Q4r=i(W),SM=n(W,"LI",{});var uSe=s(SM);mFe=n(uSe,"STRONG",{});var h9t=s(mFe);W4r=r(h9t,"beit"),h9t.forEach(t),H4r=r(uSe," \u2014 "),cW=n(uSe,"A",{href:!0});var p9t=s(cW);U4r=r(p9t,"FlaxBeitModel"),p9t.forEach(t),J4r=r(uSe," (BEiT model)"),uSe.forEach(t),Y4r=i(W),RM=n(W,"LI",{});var bSe=s(RM);gFe=n(bSe,"STRONG",{});var _9t=s(gFe);K4r=r(_9t,"bert"),_9t.forEach(t),Z4r=r(bSe," \u2014 "),fW=n(bSe,"A",{href:!0});var u9t=s(fW);eEr=r(u9t,"FlaxBertModel"),u9t.forEach(t),oEr=r(bSe," (BERT model)"),bSe.forEach(t),rEr=i(W),BM=n(W,"LI",{});var FSe=s(BM);hFe=n(FSe,"STRONG",{});var b9t=s(hFe);tEr=r(b9t,"big_bird"),b9t.forEach(t),aEr=r(FSe," \u2014 "),mW=n(FSe,"A",{href:!0});var F9t=s(mW);nEr=r(F9t,"FlaxBigBirdModel"),F9t.forEach(t),sEr=r(FSe," (BigBird model)"),FSe.forEach(t),lEr=i(W),PM=n(W,"LI",{});var vSe=s(PM);pFe=n(vSe,"STRONG",{});var v9t=s(pFe);iEr=r(v9t,"blenderbot"),v9t.forEach(t),dEr=r(vSe," \u2014 "),gW=n(vSe,"A",{href:!0});var T9t=s(gW);cEr=r(T9t,"FlaxBlenderbotModel"),T9t.forEach(t),fEr=r(vSe," (Blenderbot model)"),vSe.forEach(t),mEr=i(W),$M=n(W,"LI",{});var TSe=s($M);_Fe=n(TSe,"STRONG",{});var M9t=s(_Fe);gEr=r(M9t,"blenderbot-small"),M9t.forEach(t),hEr=r(TSe," \u2014 "),hW=n(TSe,"A",{href:!0});var E9t=s(hW);pEr=r(E9t,"FlaxBlenderbotSmallModel"),E9t.forEach(t),_Er=r(TSe," (BlenderbotSmall model)"),TSe.forEach(t),uEr=i(W),IM=n(W,"LI",{});var MSe=s(IM);uFe=n(MSe,"STRONG",{});var C9t=s(uFe);bEr=r(C9t,"clip"),C9t.forEach(t),FEr=r(MSe," \u2014 "),pW=n(MSe,"A",{href:!0});var w9t=s(pW);vEr=r(w9t,"FlaxCLIPModel"),w9t.forEach(t),TEr=r(MSe," (CLIP model)"),MSe.forEach(t),MEr=i(W),qM=n(W,"LI",{});var ESe=s(qM);bFe=n(ESe,"STRONG",{});var A9t=s(bFe);EEr=r(A9t,"distilbert"),A9t.forEach(t),CEr=r(ESe," \u2014 "),_W=n(ESe,"A",{href:!0});var y9t=s(_W);wEr=r(y9t,"FlaxDistilBertModel"),y9t.forEach(t),AEr=r(ESe," (DistilBERT model)"),ESe.forEach(t),yEr=i(W),NM=n(W,"LI",{});var CSe=s(NM);FFe=n(CSe,"STRONG",{});var L9t=s(FFe);LEr=r(L9t,"electra"),L9t.forEach(t),xEr=r(CSe," \u2014 "),uW=n(CSe,"A",{href:!0});var x9t=s(uW);kEr=r(x9t,"FlaxElectraModel"),x9t.forEach(t),SEr=r(CSe," (ELECTRA model)"),CSe.forEach(t),REr=i(W),jM=n(W,"LI",{});var wSe=s(jM);vFe=n(wSe,"STRONG",{});var k9t=s(vFe);BEr=r(k9t,"gpt2"),k9t.forEach(t),PEr=r(wSe," \u2014 "),bW=n(wSe,"A",{href:!0});var S9t=s(bW);$Er=r(S9t,"FlaxGPT2Model"),S9t.forEach(t),IEr=r(wSe," (OpenAI GPT-2 model)"),wSe.forEach(t),qEr=i(W),DM=n(W,"LI",{});var ASe=s(DM);TFe=n(ASe,"STRONG",{});var R9t=s(TFe);NEr=r(R9t,"gpt_neo"),R9t.forEach(t),jEr=r(ASe," \u2014 "),FW=n(ASe,"A",{href:!0});var B9t=s(FW);DEr=r(B9t,"FlaxGPTNeoModel"),B9t.forEach(t),GEr=r(ASe," (GPT Neo model)"),ASe.forEach(t),OEr=i(W),GM=n(W,"LI",{});var ySe=s(GM);MFe=n(ySe,"STRONG",{});var P9t=s(MFe);VEr=r(P9t,"gptj"),P9t.forEach(t),XEr=r(ySe," \u2014 "),vW=n(ySe,"A",{href:!0});var $9t=s(vW);zEr=r($9t,"FlaxGPTJModel"),$9t.forEach(t),QEr=r(ySe," (GPT-J model)"),ySe.forEach(t),WEr=i(W),OM=n(W,"LI",{});var LSe=s(OM);EFe=n(LSe,"STRONG",{});var I9t=s(EFe);HEr=r(I9t,"longt5"),I9t.forEach(t),UEr=r(LSe," \u2014 "),TW=n(LSe,"A",{href:!0});var q9t=s(TW);JEr=r(q9t,"FlaxLongT5Model"),q9t.forEach(t),YEr=r(LSe," (LongT5 model)"),LSe.forEach(t),KEr=i(W),VM=n(W,"LI",{});var xSe=s(VM);CFe=n(xSe,"STRONG",{});var N9t=s(CFe);ZEr=r(N9t,"marian"),N9t.forEach(t),e5r=r(xSe," \u2014 "),MW=n(xSe,"A",{href:!0});var j9t=s(MW);o5r=r(j9t,"FlaxMarianModel"),j9t.forEach(t),r5r=r(xSe," (Marian model)"),xSe.forEach(t),t5r=i(W),XM=n(W,"LI",{});var kSe=s(XM);wFe=n(kSe,"STRONG",{});var D9t=s(wFe);a5r=r(D9t,"mbart"),D9t.forEach(t),n5r=r(kSe," \u2014 "),EW=n(kSe,"A",{href:!0});var G9t=s(EW);s5r=r(G9t,"FlaxMBartModel"),G9t.forEach(t),l5r=r(kSe," (mBART model)"),kSe.forEach(t),i5r=i(W),zM=n(W,"LI",{});var SSe=s(zM);AFe=n(SSe,"STRONG",{});var O9t=s(AFe);d5r=r(O9t,"mt5"),O9t.forEach(t),c5r=r(SSe," \u2014 "),CW=n(SSe,"A",{href:!0});var V9t=s(CW);f5r=r(V9t,"FlaxMT5Model"),V9t.forEach(t),m5r=r(SSe," (mT5 model)"),SSe.forEach(t),g5r=i(W),QM=n(W,"LI",{});var RSe=s(QM);yFe=n(RSe,"STRONG",{});var X9t=s(yFe);h5r=r(X9t,"pegasus"),X9t.forEach(t),p5r=r(RSe," \u2014 "),wW=n(RSe,"A",{href:!0});var z9t=s(wW);_5r=r(z9t,"FlaxPegasusModel"),z9t.forEach(t),u5r=r(RSe," (Pegasus model)"),RSe.forEach(t),b5r=i(W),WM=n(W,"LI",{});var BSe=s(WM);LFe=n(BSe,"STRONG",{});var Q9t=s(LFe);F5r=r(Q9t,"roberta"),Q9t.forEach(t),v5r=r(BSe," \u2014 "),AW=n(BSe,"A",{href:!0});var W9t=s(AW);T5r=r(W9t,"FlaxRobertaModel"),W9t.forEach(t),M5r=r(BSe," (RoBERTa model)"),BSe.forEach(t),E5r=i(W),HM=n(W,"LI",{});var PSe=s(HM);xFe=n(PSe,"STRONG",{});var H9t=s(xFe);C5r=r(H9t,"roformer"),H9t.forEach(t),w5r=r(PSe," \u2014 "),yW=n(PSe,"A",{href:!0});var U9t=s(yW);A5r=r(U9t,"FlaxRoFormerModel"),U9t.forEach(t),y5r=r(PSe," (RoFormer model)"),PSe.forEach(t),L5r=i(W),UM=n(W,"LI",{});var $Se=s(UM);kFe=n($Se,"STRONG",{});var J9t=s(kFe);x5r=r(J9t,"t5"),J9t.forEach(t),k5r=r($Se," \u2014 "),LW=n($Se,"A",{href:!0});var Y9t=s(LW);S5r=r(Y9t,"FlaxT5Model"),Y9t.forEach(t),R5r=r($Se," (T5 model)"),$Se.forEach(t),B5r=i(W),JM=n(W,"LI",{});var ISe=s(JM);SFe=n(ISe,"STRONG",{});var K9t=s(SFe);P5r=r(K9t,"vision-text-dual-encoder"),K9t.forEach(t),$5r=r(ISe," \u2014 "),xW=n(ISe,"A",{href:!0});var Z9t=s(xW);I5r=r(Z9t,"FlaxVisionTextDualEncoderModel"),Z9t.forEach(t),q5r=r(ISe," (VisionTextDualEncoder model)"),ISe.forEach(t),N5r=i(W),YM=n(W,"LI",{});var qSe=s(YM);RFe=n(qSe,"STRONG",{});var eMt=s(RFe);j5r=r(eMt,"vit"),eMt.forEach(t),D5r=r(qSe," \u2014 "),kW=n(qSe,"A",{href:!0});var oMt=s(kW);G5r=r(oMt,"FlaxViTModel"),oMt.forEach(t),O5r=r(qSe," (ViT model)"),qSe.forEach(t),V5r=i(W),KM=n(W,"LI",{});var NSe=s(KM);BFe=n(NSe,"STRONG",{});var rMt=s(BFe);X5r=r(rMt,"wav2vec2"),rMt.forEach(t),z5r=r(NSe," \u2014 "),SW=n(NSe,"A",{href:!0});var tMt=s(SW);Q5r=r(tMt,"FlaxWav2Vec2Model"),tMt.forEach(t),W5r=r(NSe," (Wav2Vec2 model)"),NSe.forEach(t),H5r=i(W),ZM=n(W,"LI",{});var jSe=s(ZM);PFe=n(jSe,"STRONG",{});var aMt=s(PFe);U5r=r(aMt,"xglm"),aMt.forEach(t),J5r=r(jSe," \u2014 "),RW=n(jSe,"A",{href:!0});var nMt=s(RW);Y5r=r(nMt,"FlaxXGLMModel"),nMt.forEach(t),K5r=r(jSe," (XGLM model)"),jSe.forEach(t),Z5r=i(W),e4=n(W,"LI",{});var DSe=s(e4);$Fe=n(DSe,"STRONG",{});var sMt=s($Fe);e3r=r(sMt,"xlm-roberta"),sMt.forEach(t),o3r=r(DSe," \u2014 "),BW=n(DSe,"A",{href:!0});var lMt=s(BW);r3r=r(lMt,"FlaxXLMRobertaModel"),lMt.forEach(t),t3r=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),W.forEach(t),a3r=i(La),IFe=n(La,"P",{});var iMt=s(IFe);n3r=r(iMt,"Examples:"),iMt.forEach(t),s3r=i(La),m(sy.$$.fragment,La),La.forEach(t),hi.forEach(t),XPe=i(c),tf=n(c,"H2",{class:!0});var oqe=s(tf);o4=n(oqe,"A",{id:!0,class:!0,href:!0});var dMt=s(o4);qFe=n(dMt,"SPAN",{});var cMt=s(qFe);m(ly.$$.fragment,cMt),cMt.forEach(t),dMt.forEach(t),l3r=i(oqe),NFe=n(oqe,"SPAN",{});var fMt=s(NFe);i3r=r(fMt,"FlaxAutoModelForCausalLM"),fMt.forEach(t),oqe.forEach(t),zPe=i(c),Br=n(c,"DIV",{class:!0});var _i=s(Br);m(iy.$$.fragment,_i),d3r=i(_i),af=n(_i,"P",{});var lY=s(af);c3r=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),PW=n(lY,"A",{href:!0});var mMt=s(PW);f3r=r(mMt,"from_pretrained()"),mMt.forEach(t),m3r=r(lY," class method or the "),$W=n(lY,"A",{href:!0});var gMt=s($W);g3r=r(gMt,"from_config()"),gMt.forEach(t),h3r=r(lY,` class
method.`),lY.forEach(t),p3r=i(_i),dy=n(_i,"P",{});var rqe=s(dy);_3r=r(rqe,"This class cannot be instantiated directly using "),jFe=n(rqe,"CODE",{});var hMt=s(jFe);u3r=r(hMt,"__init__()"),hMt.forEach(t),b3r=r(rqe," (throws an error)."),rqe.forEach(t),F3r=i(_i),yt=n(_i,"DIV",{class:!0});var ui=s(yt);m(cy.$$.fragment,ui),v3r=i(ui),DFe=n(ui,"P",{});var pMt=s(DFe);T3r=r(pMt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pMt.forEach(t),M3r=i(ui),nf=n(ui,"P",{});var iY=s(nf);E3r=r(iY,`Note:
Loading a model from its configuration file does `),GFe=n(iY,"STRONG",{});var _Mt=s(GFe);C3r=r(_Mt,"not"),_Mt.forEach(t),w3r=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(iY,"A",{href:!0});var uMt=s(IW);A3r=r(uMt,"from_pretrained()"),uMt.forEach(t),y3r=r(iY," to load the model weights."),iY.forEach(t),L3r=i(ui),OFe=n(ui,"P",{});var bMt=s(OFe);x3r=r(bMt,"Examples:"),bMt.forEach(t),k3r=i(ui),m(fy.$$.fragment,ui),ui.forEach(t),S3r=i(_i),Lo=n(_i,"DIV",{class:!0});var xa=s(Lo);m(my.$$.fragment,xa),R3r=i(xa),VFe=n(xa,"P",{});var FMt=s(VFe);B3r=r(FMt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),FMt.forEach(t),P3r=i(xa),Sn=n(xa,"P",{});var w5=s(Sn);$3r=r(w5,"The model class to instantiate is selected based on the "),XFe=n(w5,"CODE",{});var vMt=s(XFe);I3r=r(vMt,"model_type"),vMt.forEach(t),q3r=r(w5,` property of the config object (either
passed as an argument or loaded from `),zFe=n(w5,"CODE",{});var TMt=s(zFe);N3r=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),j3r=r(w5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(w5,"CODE",{});var MMt=s(QFe);D3r=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),G3r=r(w5,":"),w5.forEach(t),O3r=i(xa),ca=n(xa,"UL",{});var bi=s(ca);r4=n(bi,"LI",{});var GSe=s(r4);WFe=n(GSe,"STRONG",{});var EMt=s(WFe);V3r=r(EMt,"bart"),EMt.forEach(t),X3r=r(GSe," \u2014 "),qW=n(GSe,"A",{href:!0});var CMt=s(qW);z3r=r(CMt,"FlaxBartForCausalLM"),CMt.forEach(t),Q3r=r(GSe," (BART model)"),GSe.forEach(t),W3r=i(bi),t4=n(bi,"LI",{});var OSe=s(t4);HFe=n(OSe,"STRONG",{});var wMt=s(HFe);H3r=r(wMt,"gpt2"),wMt.forEach(t),U3r=r(OSe," \u2014 "),NW=n(OSe,"A",{href:!0});var AMt=s(NW);J3r=r(AMt,"FlaxGPT2LMHeadModel"),AMt.forEach(t),Y3r=r(OSe," (OpenAI GPT-2 model)"),OSe.forEach(t),K3r=i(bi),a4=n(bi,"LI",{});var VSe=s(a4);UFe=n(VSe,"STRONG",{});var yMt=s(UFe);Z3r=r(yMt,"gpt_neo"),yMt.forEach(t),eCr=r(VSe," \u2014 "),jW=n(VSe,"A",{href:!0});var LMt=s(jW);oCr=r(LMt,"FlaxGPTNeoForCausalLM"),LMt.forEach(t),rCr=r(VSe," (GPT Neo model)"),VSe.forEach(t),tCr=i(bi),n4=n(bi,"LI",{});var XSe=s(n4);JFe=n(XSe,"STRONG",{});var xMt=s(JFe);aCr=r(xMt,"gptj"),xMt.forEach(t),nCr=r(XSe," \u2014 "),DW=n(XSe,"A",{href:!0});var kMt=s(DW);sCr=r(kMt,"FlaxGPTJForCausalLM"),kMt.forEach(t),lCr=r(XSe," (GPT-J model)"),XSe.forEach(t),iCr=i(bi),s4=n(bi,"LI",{});var zSe=s(s4);YFe=n(zSe,"STRONG",{});var SMt=s(YFe);dCr=r(SMt,"xglm"),SMt.forEach(t),cCr=r(zSe," \u2014 "),GW=n(zSe,"A",{href:!0});var RMt=s(GW);fCr=r(RMt,"FlaxXGLMForCausalLM"),RMt.forEach(t),mCr=r(zSe," (XGLM model)"),zSe.forEach(t),bi.forEach(t),gCr=i(xa),KFe=n(xa,"P",{});var BMt=s(KFe);hCr=r(BMt,"Examples:"),BMt.forEach(t),pCr=i(xa),m(gy.$$.fragment,xa),xa.forEach(t),_i.forEach(t),QPe=i(c),sf=n(c,"H2",{class:!0});var tqe=s(sf);l4=n(tqe,"A",{id:!0,class:!0,href:!0});var PMt=s(l4);ZFe=n(PMt,"SPAN",{});var $Mt=s(ZFe);m(hy.$$.fragment,$Mt),$Mt.forEach(t),PMt.forEach(t),_Cr=i(tqe),eve=n(tqe,"SPAN",{});var IMt=s(eve);uCr=r(IMt,"FlaxAutoModelForPreTraining"),IMt.forEach(t),tqe.forEach(t),WPe=i(c),Pr=n(c,"DIV",{class:!0});var Fi=s(Pr);m(py.$$.fragment,Fi),bCr=i(Fi),lf=n(Fi,"P",{});var dY=s(lf);FCr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),OW=n(dY,"A",{href:!0});var qMt=s(OW);vCr=r(qMt,"from_pretrained()"),qMt.forEach(t),TCr=r(dY," class method or the "),VW=n(dY,"A",{href:!0});var NMt=s(VW);MCr=r(NMt,"from_config()"),NMt.forEach(t),ECr=r(dY,` class
method.`),dY.forEach(t),CCr=i(Fi),_y=n(Fi,"P",{});var aqe=s(_y);wCr=r(aqe,"This class cannot be instantiated directly using "),ove=n(aqe,"CODE",{});var jMt=s(ove);ACr=r(jMt,"__init__()"),jMt.forEach(t),yCr=r(aqe," (throws an error)."),aqe.forEach(t),LCr=i(Fi),Lt=n(Fi,"DIV",{class:!0});var vi=s(Lt);m(uy.$$.fragment,vi),xCr=i(vi),rve=n(vi,"P",{});var DMt=s(rve);kCr=r(DMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),DMt.forEach(t),SCr=i(vi),df=n(vi,"P",{});var cY=s(df);RCr=r(cY,`Note:
Loading a model from its configuration file does `),tve=n(cY,"STRONG",{});var GMt=s(tve);BCr=r(GMt,"not"),GMt.forEach(t),PCr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(cY,"A",{href:!0});var OMt=s(XW);$Cr=r(OMt,"from_pretrained()"),OMt.forEach(t),ICr=r(cY," to load the model weights."),cY.forEach(t),qCr=i(vi),ave=n(vi,"P",{});var VMt=s(ave);NCr=r(VMt,"Examples:"),VMt.forEach(t),jCr=i(vi),m(by.$$.fragment,vi),vi.forEach(t),DCr=i(Fi),xo=n(Fi,"DIV",{class:!0});var ka=s(xo);m(Fy.$$.fragment,ka),GCr=i(ka),nve=n(ka,"P",{});var XMt=s(nve);OCr=r(XMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XMt.forEach(t),VCr=i(ka),Rn=n(ka,"P",{});var A5=s(Rn);XCr=r(A5,"The model class to instantiate is selected based on the "),sve=n(A5,"CODE",{});var zMt=s(sve);zCr=r(zMt,"model_type"),zMt.forEach(t),QCr=r(A5,` property of the config object (either
passed as an argument or loaded from `),lve=n(A5,"CODE",{});var QMt=s(lve);WCr=r(QMt,"pretrained_model_name_or_path"),QMt.forEach(t),HCr=r(A5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(A5,"CODE",{});var WMt=s(ive);UCr=r(WMt,"pretrained_model_name_or_path"),WMt.forEach(t),JCr=r(A5,":"),A5.forEach(t),YCr=i(ka),ce=n(ka,"UL",{});var he=s(ce);i4=n(he,"LI",{});var QSe=s(i4);dve=n(QSe,"STRONG",{});var HMt=s(dve);KCr=r(HMt,"albert"),HMt.forEach(t),ZCr=r(QSe," \u2014 "),zW=n(QSe,"A",{href:!0});var UMt=s(zW);ewr=r(UMt,"FlaxAlbertForPreTraining"),UMt.forEach(t),owr=r(QSe," (ALBERT model)"),QSe.forEach(t),rwr=i(he),d4=n(he,"LI",{});var WSe=s(d4);cve=n(WSe,"STRONG",{});var JMt=s(cve);twr=r(JMt,"bart"),JMt.forEach(t),awr=r(WSe," \u2014 "),QW=n(WSe,"A",{href:!0});var YMt=s(QW);nwr=r(YMt,"FlaxBartForConditionalGeneration"),YMt.forEach(t),swr=r(WSe," (BART model)"),WSe.forEach(t),lwr=i(he),c4=n(he,"LI",{});var HSe=s(c4);fve=n(HSe,"STRONG",{});var KMt=s(fve);iwr=r(KMt,"bert"),KMt.forEach(t),dwr=r(HSe," \u2014 "),WW=n(HSe,"A",{href:!0});var ZMt=s(WW);cwr=r(ZMt,"FlaxBertForPreTraining"),ZMt.forEach(t),fwr=r(HSe," (BERT model)"),HSe.forEach(t),mwr=i(he),f4=n(he,"LI",{});var USe=s(f4);mve=n(USe,"STRONG",{});var e4t=s(mve);gwr=r(e4t,"big_bird"),e4t.forEach(t),hwr=r(USe," \u2014 "),HW=n(USe,"A",{href:!0});var o4t=s(HW);pwr=r(o4t,"FlaxBigBirdForPreTraining"),o4t.forEach(t),_wr=r(USe," (BigBird model)"),USe.forEach(t),uwr=i(he),m4=n(he,"LI",{});var JSe=s(m4);gve=n(JSe,"STRONG",{});var r4t=s(gve);bwr=r(r4t,"electra"),r4t.forEach(t),Fwr=r(JSe," \u2014 "),UW=n(JSe,"A",{href:!0});var t4t=s(UW);vwr=r(t4t,"FlaxElectraForPreTraining"),t4t.forEach(t),Twr=r(JSe," (ELECTRA model)"),JSe.forEach(t),Mwr=i(he),g4=n(he,"LI",{});var YSe=s(g4);hve=n(YSe,"STRONG",{});var a4t=s(hve);Ewr=r(a4t,"longt5"),a4t.forEach(t),Cwr=r(YSe," \u2014 "),JW=n(YSe,"A",{href:!0});var n4t=s(JW);wwr=r(n4t,"FlaxLongT5ForConditionalGeneration"),n4t.forEach(t),Awr=r(YSe," (LongT5 model)"),YSe.forEach(t),ywr=i(he),h4=n(he,"LI",{});var KSe=s(h4);pve=n(KSe,"STRONG",{});var s4t=s(pve);Lwr=r(s4t,"mbart"),s4t.forEach(t),xwr=r(KSe," \u2014 "),YW=n(KSe,"A",{href:!0});var l4t=s(YW);kwr=r(l4t,"FlaxMBartForConditionalGeneration"),l4t.forEach(t),Swr=r(KSe," (mBART model)"),KSe.forEach(t),Rwr=i(he),p4=n(he,"LI",{});var ZSe=s(p4);_ve=n(ZSe,"STRONG",{});var i4t=s(_ve);Bwr=r(i4t,"mt5"),i4t.forEach(t),Pwr=r(ZSe," \u2014 "),KW=n(ZSe,"A",{href:!0});var d4t=s(KW);$wr=r(d4t,"FlaxMT5ForConditionalGeneration"),d4t.forEach(t),Iwr=r(ZSe," (mT5 model)"),ZSe.forEach(t),qwr=i(he),_4=n(he,"LI",{});var eRe=s(_4);uve=n(eRe,"STRONG",{});var c4t=s(uve);Nwr=r(c4t,"roberta"),c4t.forEach(t),jwr=r(eRe," \u2014 "),ZW=n(eRe,"A",{href:!0});var f4t=s(ZW);Dwr=r(f4t,"FlaxRobertaForMaskedLM"),f4t.forEach(t),Gwr=r(eRe," (RoBERTa model)"),eRe.forEach(t),Owr=i(he),u4=n(he,"LI",{});var oRe=s(u4);bve=n(oRe,"STRONG",{});var m4t=s(bve);Vwr=r(m4t,"roformer"),m4t.forEach(t),Xwr=r(oRe," \u2014 "),eH=n(oRe,"A",{href:!0});var g4t=s(eH);zwr=r(g4t,"FlaxRoFormerForMaskedLM"),g4t.forEach(t),Qwr=r(oRe," (RoFormer model)"),oRe.forEach(t),Wwr=i(he),b4=n(he,"LI",{});var rRe=s(b4);Fve=n(rRe,"STRONG",{});var h4t=s(Fve);Hwr=r(h4t,"t5"),h4t.forEach(t),Uwr=r(rRe," \u2014 "),oH=n(rRe,"A",{href:!0});var p4t=s(oH);Jwr=r(p4t,"FlaxT5ForConditionalGeneration"),p4t.forEach(t),Ywr=r(rRe," (T5 model)"),rRe.forEach(t),Kwr=i(he),F4=n(he,"LI",{});var tRe=s(F4);vve=n(tRe,"STRONG",{});var _4t=s(vve);Zwr=r(_4t,"wav2vec2"),_4t.forEach(t),eAr=r(tRe," \u2014 "),rH=n(tRe,"A",{href:!0});var u4t=s(rH);oAr=r(u4t,"FlaxWav2Vec2ForPreTraining"),u4t.forEach(t),rAr=r(tRe," (Wav2Vec2 model)"),tRe.forEach(t),tAr=i(he),v4=n(he,"LI",{});var aRe=s(v4);Tve=n(aRe,"STRONG",{});var b4t=s(Tve);aAr=r(b4t,"xlm-roberta"),b4t.forEach(t),nAr=r(aRe," \u2014 "),tH=n(aRe,"A",{href:!0});var F4t=s(tH);sAr=r(F4t,"FlaxXLMRobertaForMaskedLM"),F4t.forEach(t),lAr=r(aRe," (XLM-RoBERTa model)"),aRe.forEach(t),he.forEach(t),iAr=i(ka),Mve=n(ka,"P",{});var v4t=s(Mve);dAr=r(v4t,"Examples:"),v4t.forEach(t),cAr=i(ka),m(vy.$$.fragment,ka),ka.forEach(t),Fi.forEach(t),HPe=i(c),cf=n(c,"H2",{class:!0});var nqe=s(cf);T4=n(nqe,"A",{id:!0,class:!0,href:!0});var T4t=s(T4);Eve=n(T4t,"SPAN",{});var M4t=s(Eve);m(Ty.$$.fragment,M4t),M4t.forEach(t),T4t.forEach(t),fAr=i(nqe),Cve=n(nqe,"SPAN",{});var E4t=s(Cve);mAr=r(E4t,"FlaxAutoModelForMaskedLM"),E4t.forEach(t),nqe.forEach(t),UPe=i(c),$r=n(c,"DIV",{class:!0});var Ti=s($r);m(My.$$.fragment,Ti),gAr=i(Ti),ff=n(Ti,"P",{});var fY=s(ff);hAr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),aH=n(fY,"A",{href:!0});var C4t=s(aH);pAr=r(C4t,"from_pretrained()"),C4t.forEach(t),_Ar=r(fY," class method or the "),nH=n(fY,"A",{href:!0});var w4t=s(nH);uAr=r(w4t,"from_config()"),w4t.forEach(t),bAr=r(fY,` class
method.`),fY.forEach(t),FAr=i(Ti),Ey=n(Ti,"P",{});var sqe=s(Ey);vAr=r(sqe,"This class cannot be instantiated directly using "),wve=n(sqe,"CODE",{});var A4t=s(wve);TAr=r(A4t,"__init__()"),A4t.forEach(t),MAr=r(sqe," (throws an error)."),sqe.forEach(t),EAr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Mi=s(xt);m(Cy.$$.fragment,Mi),CAr=i(Mi),Ave=n(Mi,"P",{});var y4t=s(Ave);wAr=r(y4t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y4t.forEach(t),AAr=i(Mi),mf=n(Mi,"P",{});var mY=s(mf);yAr=r(mY,`Note:
Loading a model from its configuration file does `),yve=n(mY,"STRONG",{});var L4t=s(yve);LAr=r(L4t,"not"),L4t.forEach(t),xAr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(mY,"A",{href:!0});var x4t=s(sH);kAr=r(x4t,"from_pretrained()"),x4t.forEach(t),SAr=r(mY," to load the model weights."),mY.forEach(t),RAr=i(Mi),Lve=n(Mi,"P",{});var k4t=s(Lve);BAr=r(k4t,"Examples:"),k4t.forEach(t),PAr=i(Mi),m(wy.$$.fragment,Mi),Mi.forEach(t),$Ar=i(Ti),ko=n(Ti,"DIV",{class:!0});var Sa=s(ko);m(Ay.$$.fragment,Sa),IAr=i(Sa),xve=n(Sa,"P",{});var S4t=s(xve);qAr=r(S4t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),S4t.forEach(t),NAr=i(Sa),Bn=n(Sa,"P",{});var y5=s(Bn);jAr=r(y5,"The model class to instantiate is selected based on the "),kve=n(y5,"CODE",{});var R4t=s(kve);DAr=r(R4t,"model_type"),R4t.forEach(t),GAr=r(y5,` property of the config object (either
passed as an argument or loaded from `),Sve=n(y5,"CODE",{});var B4t=s(Sve);OAr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),VAr=r(y5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(y5,"CODE",{});var P4t=s(Rve);XAr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),zAr=r(y5,":"),y5.forEach(t),QAr=i(Sa),Fe=n(Sa,"UL",{});var Ae=s(Fe);M4=n(Ae,"LI",{});var nRe=s(M4);Bve=n(nRe,"STRONG",{});var $4t=s(Bve);WAr=r($4t,"albert"),$4t.forEach(t),HAr=r(nRe," \u2014 "),lH=n(nRe,"A",{href:!0});var I4t=s(lH);UAr=r(I4t,"FlaxAlbertForMaskedLM"),I4t.forEach(t),JAr=r(nRe," (ALBERT model)"),nRe.forEach(t),YAr=i(Ae),E4=n(Ae,"LI",{});var sRe=s(E4);Pve=n(sRe,"STRONG",{});var q4t=s(Pve);KAr=r(q4t,"bart"),q4t.forEach(t),ZAr=r(sRe," \u2014 "),iH=n(sRe,"A",{href:!0});var N4t=s(iH);e0r=r(N4t,"FlaxBartForConditionalGeneration"),N4t.forEach(t),o0r=r(sRe," (BART model)"),sRe.forEach(t),r0r=i(Ae),C4=n(Ae,"LI",{});var lRe=s(C4);$ve=n(lRe,"STRONG",{});var j4t=s($ve);t0r=r(j4t,"bert"),j4t.forEach(t),a0r=r(lRe," \u2014 "),dH=n(lRe,"A",{href:!0});var D4t=s(dH);n0r=r(D4t,"FlaxBertForMaskedLM"),D4t.forEach(t),s0r=r(lRe," (BERT model)"),lRe.forEach(t),l0r=i(Ae),w4=n(Ae,"LI",{});var iRe=s(w4);Ive=n(iRe,"STRONG",{});var G4t=s(Ive);i0r=r(G4t,"big_bird"),G4t.forEach(t),d0r=r(iRe," \u2014 "),cH=n(iRe,"A",{href:!0});var O4t=s(cH);c0r=r(O4t,"FlaxBigBirdForMaskedLM"),O4t.forEach(t),f0r=r(iRe," (BigBird model)"),iRe.forEach(t),m0r=i(Ae),A4=n(Ae,"LI",{});var dRe=s(A4);qve=n(dRe,"STRONG",{});var V4t=s(qve);g0r=r(V4t,"distilbert"),V4t.forEach(t),h0r=r(dRe," \u2014 "),fH=n(dRe,"A",{href:!0});var X4t=s(fH);p0r=r(X4t,"FlaxDistilBertForMaskedLM"),X4t.forEach(t),_0r=r(dRe," (DistilBERT model)"),dRe.forEach(t),u0r=i(Ae),y4=n(Ae,"LI",{});var cRe=s(y4);Nve=n(cRe,"STRONG",{});var z4t=s(Nve);b0r=r(z4t,"electra"),z4t.forEach(t),F0r=r(cRe," \u2014 "),mH=n(cRe,"A",{href:!0});var Q4t=s(mH);v0r=r(Q4t,"FlaxElectraForMaskedLM"),Q4t.forEach(t),T0r=r(cRe," (ELECTRA model)"),cRe.forEach(t),M0r=i(Ae),L4=n(Ae,"LI",{});var fRe=s(L4);jve=n(fRe,"STRONG",{});var W4t=s(jve);E0r=r(W4t,"mbart"),W4t.forEach(t),C0r=r(fRe," \u2014 "),gH=n(fRe,"A",{href:!0});var H4t=s(gH);w0r=r(H4t,"FlaxMBartForConditionalGeneration"),H4t.forEach(t),A0r=r(fRe," (mBART model)"),fRe.forEach(t),y0r=i(Ae),x4=n(Ae,"LI",{});var mRe=s(x4);Dve=n(mRe,"STRONG",{});var U4t=s(Dve);L0r=r(U4t,"roberta"),U4t.forEach(t),x0r=r(mRe," \u2014 "),hH=n(mRe,"A",{href:!0});var J4t=s(hH);k0r=r(J4t,"FlaxRobertaForMaskedLM"),J4t.forEach(t),S0r=r(mRe," (RoBERTa model)"),mRe.forEach(t),R0r=i(Ae),k4=n(Ae,"LI",{});var gRe=s(k4);Gve=n(gRe,"STRONG",{});var Y4t=s(Gve);B0r=r(Y4t,"roformer"),Y4t.forEach(t),P0r=r(gRe," \u2014 "),pH=n(gRe,"A",{href:!0});var K4t=s(pH);$0r=r(K4t,"FlaxRoFormerForMaskedLM"),K4t.forEach(t),I0r=r(gRe," (RoFormer model)"),gRe.forEach(t),q0r=i(Ae),S4=n(Ae,"LI",{});var hRe=s(S4);Ove=n(hRe,"STRONG",{});var Z4t=s(Ove);N0r=r(Z4t,"xlm-roberta"),Z4t.forEach(t),j0r=r(hRe," \u2014 "),_H=n(hRe,"A",{href:!0});var eEt=s(_H);D0r=r(eEt,"FlaxXLMRobertaForMaskedLM"),eEt.forEach(t),G0r=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),Ae.forEach(t),O0r=i(Sa),Vve=n(Sa,"P",{});var oEt=s(Vve);V0r=r(oEt,"Examples:"),oEt.forEach(t),X0r=i(Sa),m(yy.$$.fragment,Sa),Sa.forEach(t),Ti.forEach(t),JPe=i(c),gf=n(c,"H2",{class:!0});var lqe=s(gf);R4=n(lqe,"A",{id:!0,class:!0,href:!0});var rEt=s(R4);Xve=n(rEt,"SPAN",{});var tEt=s(Xve);m(Ly.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),z0r=i(lqe),zve=n(lqe,"SPAN",{});var aEt=s(zve);Q0r=r(aEt,"FlaxAutoModelForSeq2SeqLM"),aEt.forEach(t),lqe.forEach(t),YPe=i(c),Ir=n(c,"DIV",{class:!0});var Ei=s(Ir);m(xy.$$.fragment,Ei),W0r=i(Ei),hf=n(Ei,"P",{});var gY=s(hf);H0r=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uH=n(gY,"A",{href:!0});var nEt=s(uH);U0r=r(nEt,"from_pretrained()"),nEt.forEach(t),J0r=r(gY," class method or the "),bH=n(gY,"A",{href:!0});var sEt=s(bH);Y0r=r(sEt,"from_config()"),sEt.forEach(t),K0r=r(gY,` class
method.`),gY.forEach(t),Z0r=i(Ei),ky=n(Ei,"P",{});var iqe=s(ky);eyr=r(iqe,"This class cannot be instantiated directly using "),Qve=n(iqe,"CODE",{});var lEt=s(Qve);oyr=r(lEt,"__init__()"),lEt.forEach(t),ryr=r(iqe," (throws an error)."),iqe.forEach(t),tyr=i(Ei),kt=n(Ei,"DIV",{class:!0});var Ci=s(kt);m(Sy.$$.fragment,Ci),ayr=i(Ci),Wve=n(Ci,"P",{});var iEt=s(Wve);nyr=r(iEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iEt.forEach(t),syr=i(Ci),pf=n(Ci,"P",{});var hY=s(pf);lyr=r(hY,`Note:
Loading a model from its configuration file does `),Hve=n(hY,"STRONG",{});var dEt=s(Hve);iyr=r(dEt,"not"),dEt.forEach(t),dyr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(hY,"A",{href:!0});var cEt=s(FH);cyr=r(cEt,"from_pretrained()"),cEt.forEach(t),fyr=r(hY," to load the model weights."),hY.forEach(t),myr=i(Ci),Uve=n(Ci,"P",{});var fEt=s(Uve);gyr=r(fEt,"Examples:"),fEt.forEach(t),hyr=i(Ci),m(Ry.$$.fragment,Ci),Ci.forEach(t),pyr=i(Ei),So=n(Ei,"DIV",{class:!0});var Ra=s(So);m(By.$$.fragment,Ra),_yr=i(Ra),Jve=n(Ra,"P",{});var mEt=s(Jve);uyr=r(mEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mEt.forEach(t),byr=i(Ra),Pn=n(Ra,"P",{});var L5=s(Pn);Fyr=r(L5,"The model class to instantiate is selected based on the "),Yve=n(L5,"CODE",{});var gEt=s(Yve);vyr=r(gEt,"model_type"),gEt.forEach(t),Tyr=r(L5,` property of the config object (either
passed as an argument or loaded from `),Kve=n(L5,"CODE",{});var hEt=s(Kve);Myr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Eyr=r(L5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(L5,"CODE",{});var pEt=s(Zve);Cyr=r(pEt,"pretrained_model_name_or_path"),pEt.forEach(t),wyr=r(L5,":"),L5.forEach(t),Ayr=i(Ra),ve=n(Ra,"UL",{});var ye=s(ve);B4=n(ye,"LI",{});var pRe=s(B4);eTe=n(pRe,"STRONG",{});var _Et=s(eTe);yyr=r(_Et,"bart"),_Et.forEach(t),Lyr=r(pRe," \u2014 "),vH=n(pRe,"A",{href:!0});var uEt=s(vH);xyr=r(uEt,"FlaxBartForConditionalGeneration"),uEt.forEach(t),kyr=r(pRe," (BART model)"),pRe.forEach(t),Syr=i(ye),P4=n(ye,"LI",{});var _Re=s(P4);oTe=n(_Re,"STRONG",{});var bEt=s(oTe);Ryr=r(bEt,"blenderbot"),bEt.forEach(t),Byr=r(_Re," \u2014 "),TH=n(_Re,"A",{href:!0});var FEt=s(TH);Pyr=r(FEt,"FlaxBlenderbotForConditionalGeneration"),FEt.forEach(t),$yr=r(_Re," (Blenderbot model)"),_Re.forEach(t),Iyr=i(ye),$4=n(ye,"LI",{});var uRe=s($4);rTe=n(uRe,"STRONG",{});var vEt=s(rTe);qyr=r(vEt,"blenderbot-small"),vEt.forEach(t),Nyr=r(uRe," \u2014 "),MH=n(uRe,"A",{href:!0});var TEt=s(MH);jyr=r(TEt,"FlaxBlenderbotSmallForConditionalGeneration"),TEt.forEach(t),Dyr=r(uRe," (BlenderbotSmall model)"),uRe.forEach(t),Gyr=i(ye),I4=n(ye,"LI",{});var bRe=s(I4);tTe=n(bRe,"STRONG",{});var MEt=s(tTe);Oyr=r(MEt,"encoder-decoder"),MEt.forEach(t),Vyr=r(bRe," \u2014 "),EH=n(bRe,"A",{href:!0});var EEt=s(EH);Xyr=r(EEt,"FlaxEncoderDecoderModel"),EEt.forEach(t),zyr=r(bRe," (Encoder decoder model)"),bRe.forEach(t),Qyr=i(ye),q4=n(ye,"LI",{});var FRe=s(q4);aTe=n(FRe,"STRONG",{});var CEt=s(aTe);Wyr=r(CEt,"longt5"),CEt.forEach(t),Hyr=r(FRe," \u2014 "),CH=n(FRe,"A",{href:!0});var wEt=s(CH);Uyr=r(wEt,"FlaxLongT5ForConditionalGeneration"),wEt.forEach(t),Jyr=r(FRe," (LongT5 model)"),FRe.forEach(t),Yyr=i(ye),N4=n(ye,"LI",{});var vRe=s(N4);nTe=n(vRe,"STRONG",{});var AEt=s(nTe);Kyr=r(AEt,"marian"),AEt.forEach(t),Zyr=r(vRe," \u2014 "),wH=n(vRe,"A",{href:!0});var yEt=s(wH);eLr=r(yEt,"FlaxMarianMTModel"),yEt.forEach(t),oLr=r(vRe," (Marian model)"),vRe.forEach(t),rLr=i(ye),j4=n(ye,"LI",{});var TRe=s(j4);sTe=n(TRe,"STRONG",{});var LEt=s(sTe);tLr=r(LEt,"mbart"),LEt.forEach(t),aLr=r(TRe," \u2014 "),AH=n(TRe,"A",{href:!0});var xEt=s(AH);nLr=r(xEt,"FlaxMBartForConditionalGeneration"),xEt.forEach(t),sLr=r(TRe," (mBART model)"),TRe.forEach(t),lLr=i(ye),D4=n(ye,"LI",{});var MRe=s(D4);lTe=n(MRe,"STRONG",{});var kEt=s(lTe);iLr=r(kEt,"mt5"),kEt.forEach(t),dLr=r(MRe," \u2014 "),yH=n(MRe,"A",{href:!0});var SEt=s(yH);cLr=r(SEt,"FlaxMT5ForConditionalGeneration"),SEt.forEach(t),fLr=r(MRe," (mT5 model)"),MRe.forEach(t),mLr=i(ye),G4=n(ye,"LI",{});var ERe=s(G4);iTe=n(ERe,"STRONG",{});var REt=s(iTe);gLr=r(REt,"pegasus"),REt.forEach(t),hLr=r(ERe," \u2014 "),LH=n(ERe,"A",{href:!0});var BEt=s(LH);pLr=r(BEt,"FlaxPegasusForConditionalGeneration"),BEt.forEach(t),_Lr=r(ERe," (Pegasus model)"),ERe.forEach(t),uLr=i(ye),O4=n(ye,"LI",{});var CRe=s(O4);dTe=n(CRe,"STRONG",{});var PEt=s(dTe);bLr=r(PEt,"t5"),PEt.forEach(t),FLr=r(CRe," \u2014 "),xH=n(CRe,"A",{href:!0});var $Et=s(xH);vLr=r($Et,"FlaxT5ForConditionalGeneration"),$Et.forEach(t),TLr=r(CRe," (T5 model)"),CRe.forEach(t),ye.forEach(t),MLr=i(Ra),cTe=n(Ra,"P",{});var IEt=s(cTe);ELr=r(IEt,"Examples:"),IEt.forEach(t),CLr=i(Ra),m(Py.$$.fragment,Ra),Ra.forEach(t),Ei.forEach(t),KPe=i(c),_f=n(c,"H2",{class:!0});var dqe=s(_f);V4=n(dqe,"A",{id:!0,class:!0,href:!0});var qEt=s(V4);fTe=n(qEt,"SPAN",{});var NEt=s(fTe);m($y.$$.fragment,NEt),NEt.forEach(t),qEt.forEach(t),wLr=i(dqe),mTe=n(dqe,"SPAN",{});var jEt=s(mTe);ALr=r(jEt,"FlaxAutoModelForSequenceClassification"),jEt.forEach(t),dqe.forEach(t),ZPe=i(c),qr=n(c,"DIV",{class:!0});var wi=s(qr);m(Iy.$$.fragment,wi),yLr=i(wi),uf=n(wi,"P",{});var pY=s(uf);LLr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kH=n(pY,"A",{href:!0});var DEt=s(kH);xLr=r(DEt,"from_pretrained()"),DEt.forEach(t),kLr=r(pY," class method or the "),SH=n(pY,"A",{href:!0});var GEt=s(SH);SLr=r(GEt,"from_config()"),GEt.forEach(t),RLr=r(pY,` class
method.`),pY.forEach(t),BLr=i(wi),qy=n(wi,"P",{});var cqe=s(qy);PLr=r(cqe,"This class cannot be instantiated directly using "),gTe=n(cqe,"CODE",{});var OEt=s(gTe);$Lr=r(OEt,"__init__()"),OEt.forEach(t),ILr=r(cqe," (throws an error)."),cqe.forEach(t),qLr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(Ny.$$.fragment,Ai),NLr=i(Ai),hTe=n(Ai,"P",{});var VEt=s(hTe);jLr=r(VEt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VEt.forEach(t),DLr=i(Ai),bf=n(Ai,"P",{});var _Y=s(bf);GLr=r(_Y,`Note:
Loading a model from its configuration file does `),pTe=n(_Y,"STRONG",{});var XEt=s(pTe);OLr=r(XEt,"not"),XEt.forEach(t),VLr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(_Y,"A",{href:!0});var zEt=s(RH);XLr=r(zEt,"from_pretrained()"),zEt.forEach(t),zLr=r(_Y," to load the model weights."),_Y.forEach(t),QLr=i(Ai),_Te=n(Ai,"P",{});var QEt=s(_Te);WLr=r(QEt,"Examples:"),QEt.forEach(t),HLr=i(Ai),m(jy.$$.fragment,Ai),Ai.forEach(t),ULr=i(wi),Ro=n(wi,"DIV",{class:!0});var Ba=s(Ro);m(Dy.$$.fragment,Ba),JLr=i(Ba),uTe=n(Ba,"P",{});var WEt=s(uTe);YLr=r(WEt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),WEt.forEach(t),KLr=i(Ba),$n=n(Ba,"P",{});var x5=s($n);ZLr=r(x5,"The model class to instantiate is selected based on the "),bTe=n(x5,"CODE",{});var HEt=s(bTe);e8r=r(HEt,"model_type"),HEt.forEach(t),o8r=r(x5,` property of the config object (either
passed as an argument or loaded from `),FTe=n(x5,"CODE",{});var UEt=s(FTe);r8r=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),t8r=r(x5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vTe=n(x5,"CODE",{});var JEt=s(vTe);a8r=r(JEt,"pretrained_model_name_or_path"),JEt.forEach(t),n8r=r(x5,":"),x5.forEach(t),s8r=i(Ba),Te=n(Ba,"UL",{});var Le=s(Te);X4=n(Le,"LI",{});var wRe=s(X4);TTe=n(wRe,"STRONG",{});var YEt=s(TTe);l8r=r(YEt,"albert"),YEt.forEach(t),i8r=r(wRe," \u2014 "),BH=n(wRe,"A",{href:!0});var KEt=s(BH);d8r=r(KEt,"FlaxAlbertForSequenceClassification"),KEt.forEach(t),c8r=r(wRe," (ALBERT model)"),wRe.forEach(t),f8r=i(Le),z4=n(Le,"LI",{});var ARe=s(z4);MTe=n(ARe,"STRONG",{});var ZEt=s(MTe);m8r=r(ZEt,"bart"),ZEt.forEach(t),g8r=r(ARe," \u2014 "),PH=n(ARe,"A",{href:!0});var e5t=s(PH);h8r=r(e5t,"FlaxBartForSequenceClassification"),e5t.forEach(t),p8r=r(ARe," (BART model)"),ARe.forEach(t),_8r=i(Le),Q4=n(Le,"LI",{});var yRe=s(Q4);ETe=n(yRe,"STRONG",{});var o5t=s(ETe);u8r=r(o5t,"bert"),o5t.forEach(t),b8r=r(yRe," \u2014 "),$H=n(yRe,"A",{href:!0});var r5t=s($H);F8r=r(r5t,"FlaxBertForSequenceClassification"),r5t.forEach(t),v8r=r(yRe," (BERT model)"),yRe.forEach(t),T8r=i(Le),W4=n(Le,"LI",{});var LRe=s(W4);CTe=n(LRe,"STRONG",{});var t5t=s(CTe);M8r=r(t5t,"big_bird"),t5t.forEach(t),E8r=r(LRe," \u2014 "),IH=n(LRe,"A",{href:!0});var a5t=s(IH);C8r=r(a5t,"FlaxBigBirdForSequenceClassification"),a5t.forEach(t),w8r=r(LRe," (BigBird model)"),LRe.forEach(t),A8r=i(Le),H4=n(Le,"LI",{});var xRe=s(H4);wTe=n(xRe,"STRONG",{});var n5t=s(wTe);y8r=r(n5t,"distilbert"),n5t.forEach(t),L8r=r(xRe," \u2014 "),qH=n(xRe,"A",{href:!0});var s5t=s(qH);x8r=r(s5t,"FlaxDistilBertForSequenceClassification"),s5t.forEach(t),k8r=r(xRe," (DistilBERT model)"),xRe.forEach(t),S8r=i(Le),U4=n(Le,"LI",{});var kRe=s(U4);ATe=n(kRe,"STRONG",{});var l5t=s(ATe);R8r=r(l5t,"electra"),l5t.forEach(t),B8r=r(kRe," \u2014 "),NH=n(kRe,"A",{href:!0});var i5t=s(NH);P8r=r(i5t,"FlaxElectraForSequenceClassification"),i5t.forEach(t),$8r=r(kRe," (ELECTRA model)"),kRe.forEach(t),I8r=i(Le),J4=n(Le,"LI",{});var SRe=s(J4);yTe=n(SRe,"STRONG",{});var d5t=s(yTe);q8r=r(d5t,"mbart"),d5t.forEach(t),N8r=r(SRe," \u2014 "),jH=n(SRe,"A",{href:!0});var c5t=s(jH);j8r=r(c5t,"FlaxMBartForSequenceClassification"),c5t.forEach(t),D8r=r(SRe," (mBART model)"),SRe.forEach(t),G8r=i(Le),Y4=n(Le,"LI",{});var RRe=s(Y4);LTe=n(RRe,"STRONG",{});var f5t=s(LTe);O8r=r(f5t,"roberta"),f5t.forEach(t),V8r=r(RRe," \u2014 "),DH=n(RRe,"A",{href:!0});var m5t=s(DH);X8r=r(m5t,"FlaxRobertaForSequenceClassification"),m5t.forEach(t),z8r=r(RRe," (RoBERTa model)"),RRe.forEach(t),Q8r=i(Le),K4=n(Le,"LI",{});var BRe=s(K4);xTe=n(BRe,"STRONG",{});var g5t=s(xTe);W8r=r(g5t,"roformer"),g5t.forEach(t),H8r=r(BRe," \u2014 "),GH=n(BRe,"A",{href:!0});var h5t=s(GH);U8r=r(h5t,"FlaxRoFormerForSequenceClassification"),h5t.forEach(t),J8r=r(BRe," (RoFormer model)"),BRe.forEach(t),Y8r=i(Le),Z4=n(Le,"LI",{});var PRe=s(Z4);kTe=n(PRe,"STRONG",{});var p5t=s(kTe);K8r=r(p5t,"xlm-roberta"),p5t.forEach(t),Z8r=r(PRe," \u2014 "),OH=n(PRe,"A",{href:!0});var _5t=s(OH);exr=r(_5t,"FlaxXLMRobertaForSequenceClassification"),_5t.forEach(t),oxr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),Le.forEach(t),rxr=i(Ba),STe=n(Ba,"P",{});var u5t=s(STe);txr=r(u5t,"Examples:"),u5t.forEach(t),axr=i(Ba),m(Gy.$$.fragment,Ba),Ba.forEach(t),wi.forEach(t),e$e=i(c),Ff=n(c,"H2",{class:!0});var fqe=s(Ff);eE=n(fqe,"A",{id:!0,class:!0,href:!0});var b5t=s(eE);RTe=n(b5t,"SPAN",{});var F5t=s(RTe);m(Oy.$$.fragment,F5t),F5t.forEach(t),b5t.forEach(t),nxr=i(fqe),BTe=n(fqe,"SPAN",{});var v5t=s(BTe);sxr=r(v5t,"FlaxAutoModelForQuestionAnswering"),v5t.forEach(t),fqe.forEach(t),o$e=i(c),Nr=n(c,"DIV",{class:!0});var yi=s(Nr);m(Vy.$$.fragment,yi),lxr=i(yi),vf=n(yi,"P",{});var uY=s(vf);ixr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VH=n(uY,"A",{href:!0});var T5t=s(VH);dxr=r(T5t,"from_pretrained()"),T5t.forEach(t),cxr=r(uY," class method or the "),XH=n(uY,"A",{href:!0});var M5t=s(XH);fxr=r(M5t,"from_config()"),M5t.forEach(t),mxr=r(uY,` class
method.`),uY.forEach(t),gxr=i(yi),Xy=n(yi,"P",{});var mqe=s(Xy);hxr=r(mqe,"This class cannot be instantiated directly using "),PTe=n(mqe,"CODE",{});var E5t=s(PTe);pxr=r(E5t,"__init__()"),E5t.forEach(t),_xr=r(mqe," (throws an error)."),mqe.forEach(t),uxr=i(yi),Rt=n(yi,"DIV",{class:!0});var Li=s(Rt);m(zy.$$.fragment,Li),bxr=i(Li),$Te=n(Li,"P",{});var C5t=s($Te);Fxr=r(C5t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),C5t.forEach(t),vxr=i(Li),Tf=n(Li,"P",{});var bY=s(Tf);Txr=r(bY,`Note:
Loading a model from its configuration file does `),ITe=n(bY,"STRONG",{});var w5t=s(ITe);Mxr=r(w5t,"not"),w5t.forEach(t),Exr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(bY,"A",{href:!0});var A5t=s(zH);Cxr=r(A5t,"from_pretrained()"),A5t.forEach(t),wxr=r(bY," to load the model weights."),bY.forEach(t),Axr=i(Li),qTe=n(Li,"P",{});var y5t=s(qTe);yxr=r(y5t,"Examples:"),y5t.forEach(t),Lxr=i(Li),m(Qy.$$.fragment,Li),Li.forEach(t),xxr=i(yi),Bo=n(yi,"DIV",{class:!0});var Pa=s(Bo);m(Wy.$$.fragment,Pa),kxr=i(Pa),NTe=n(Pa,"P",{});var L5t=s(NTe);Sxr=r(L5t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L5t.forEach(t),Rxr=i(Pa),In=n(Pa,"P",{});var k5=s(In);Bxr=r(k5,"The model class to instantiate is selected based on the "),jTe=n(k5,"CODE",{});var x5t=s(jTe);Pxr=r(x5t,"model_type"),x5t.forEach(t),$xr=r(k5,` property of the config object (either
passed as an argument or loaded from `),DTe=n(k5,"CODE",{});var k5t=s(DTe);Ixr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),qxr=r(k5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(k5,"CODE",{});var S5t=s(GTe);Nxr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),jxr=r(k5,":"),k5.forEach(t),Dxr=i(Pa),Me=n(Pa,"UL",{});var xe=s(Me);oE=n(xe,"LI",{});var $Re=s(oE);OTe=n($Re,"STRONG",{});var R5t=s(OTe);Gxr=r(R5t,"albert"),R5t.forEach(t),Oxr=r($Re," \u2014 "),QH=n($Re,"A",{href:!0});var B5t=s(QH);Vxr=r(B5t,"FlaxAlbertForQuestionAnswering"),B5t.forEach(t),Xxr=r($Re," (ALBERT model)"),$Re.forEach(t),zxr=i(xe),rE=n(xe,"LI",{});var IRe=s(rE);VTe=n(IRe,"STRONG",{});var P5t=s(VTe);Qxr=r(P5t,"bart"),P5t.forEach(t),Wxr=r(IRe," \u2014 "),WH=n(IRe,"A",{href:!0});var $5t=s(WH);Hxr=r($5t,"FlaxBartForQuestionAnswering"),$5t.forEach(t),Uxr=r(IRe," (BART model)"),IRe.forEach(t),Jxr=i(xe),tE=n(xe,"LI",{});var qRe=s(tE);XTe=n(qRe,"STRONG",{});var I5t=s(XTe);Yxr=r(I5t,"bert"),I5t.forEach(t),Kxr=r(qRe," \u2014 "),HH=n(qRe,"A",{href:!0});var q5t=s(HH);Zxr=r(q5t,"FlaxBertForQuestionAnswering"),q5t.forEach(t),ekr=r(qRe," (BERT model)"),qRe.forEach(t),okr=i(xe),aE=n(xe,"LI",{});var NRe=s(aE);zTe=n(NRe,"STRONG",{});var N5t=s(zTe);rkr=r(N5t,"big_bird"),N5t.forEach(t),tkr=r(NRe," \u2014 "),UH=n(NRe,"A",{href:!0});var j5t=s(UH);akr=r(j5t,"FlaxBigBirdForQuestionAnswering"),j5t.forEach(t),nkr=r(NRe," (BigBird model)"),NRe.forEach(t),skr=i(xe),nE=n(xe,"LI",{});var jRe=s(nE);QTe=n(jRe,"STRONG",{});var D5t=s(QTe);lkr=r(D5t,"distilbert"),D5t.forEach(t),ikr=r(jRe," \u2014 "),JH=n(jRe,"A",{href:!0});var G5t=s(JH);dkr=r(G5t,"FlaxDistilBertForQuestionAnswering"),G5t.forEach(t),ckr=r(jRe," (DistilBERT model)"),jRe.forEach(t),fkr=i(xe),sE=n(xe,"LI",{});var DRe=s(sE);WTe=n(DRe,"STRONG",{});var O5t=s(WTe);mkr=r(O5t,"electra"),O5t.forEach(t),gkr=r(DRe," \u2014 "),YH=n(DRe,"A",{href:!0});var V5t=s(YH);hkr=r(V5t,"FlaxElectraForQuestionAnswering"),V5t.forEach(t),pkr=r(DRe," (ELECTRA model)"),DRe.forEach(t),_kr=i(xe),lE=n(xe,"LI",{});var GRe=s(lE);HTe=n(GRe,"STRONG",{});var X5t=s(HTe);ukr=r(X5t,"mbart"),X5t.forEach(t),bkr=r(GRe," \u2014 "),KH=n(GRe,"A",{href:!0});var z5t=s(KH);Fkr=r(z5t,"FlaxMBartForQuestionAnswering"),z5t.forEach(t),vkr=r(GRe," (mBART model)"),GRe.forEach(t),Tkr=i(xe),iE=n(xe,"LI",{});var ORe=s(iE);UTe=n(ORe,"STRONG",{});var Q5t=s(UTe);Mkr=r(Q5t,"roberta"),Q5t.forEach(t),Ekr=r(ORe," \u2014 "),ZH=n(ORe,"A",{href:!0});var W5t=s(ZH);Ckr=r(W5t,"FlaxRobertaForQuestionAnswering"),W5t.forEach(t),wkr=r(ORe," (RoBERTa model)"),ORe.forEach(t),Akr=i(xe),dE=n(xe,"LI",{});var VRe=s(dE);JTe=n(VRe,"STRONG",{});var H5t=s(JTe);ykr=r(H5t,"roformer"),H5t.forEach(t),Lkr=r(VRe," \u2014 "),eU=n(VRe,"A",{href:!0});var U5t=s(eU);xkr=r(U5t,"FlaxRoFormerForQuestionAnswering"),U5t.forEach(t),kkr=r(VRe," (RoFormer model)"),VRe.forEach(t),Skr=i(xe),cE=n(xe,"LI",{});var XRe=s(cE);YTe=n(XRe,"STRONG",{});var J5t=s(YTe);Rkr=r(J5t,"xlm-roberta"),J5t.forEach(t),Bkr=r(XRe," \u2014 "),oU=n(XRe,"A",{href:!0});var Y5t=s(oU);Pkr=r(Y5t,"FlaxXLMRobertaForQuestionAnswering"),Y5t.forEach(t),$kr=r(XRe," (XLM-RoBERTa model)"),XRe.forEach(t),xe.forEach(t),Ikr=i(Pa),KTe=n(Pa,"P",{});var K5t=s(KTe);qkr=r(K5t,"Examples:"),K5t.forEach(t),Nkr=i(Pa),m(Hy.$$.fragment,Pa),Pa.forEach(t),yi.forEach(t),r$e=i(c),Mf=n(c,"H2",{class:!0});var gqe=s(Mf);fE=n(gqe,"A",{id:!0,class:!0,href:!0});var Z5t=s(fE);ZTe=n(Z5t,"SPAN",{});var e3t=s(ZTe);m(Uy.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),jkr=i(gqe),e7e=n(gqe,"SPAN",{});var o3t=s(e7e);Dkr=r(o3t,"FlaxAutoModelForTokenClassification"),o3t.forEach(t),gqe.forEach(t),t$e=i(c),jr=n(c,"DIV",{class:!0});var xi=s(jr);m(Jy.$$.fragment,xi),Gkr=i(xi),Ef=n(xi,"P",{});var FY=s(Ef);Okr=r(FY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rU=n(FY,"A",{href:!0});var r3t=s(rU);Vkr=r(r3t,"from_pretrained()"),r3t.forEach(t),Xkr=r(FY," class method or the "),tU=n(FY,"A",{href:!0});var t3t=s(tU);zkr=r(t3t,"from_config()"),t3t.forEach(t),Qkr=r(FY,` class
method.`),FY.forEach(t),Wkr=i(xi),Yy=n(xi,"P",{});var hqe=s(Yy);Hkr=r(hqe,"This class cannot be instantiated directly using "),o7e=n(hqe,"CODE",{});var a3t=s(o7e);Ukr=r(a3t,"__init__()"),a3t.forEach(t),Jkr=r(hqe," (throws an error)."),hqe.forEach(t),Ykr=i(xi),Bt=n(xi,"DIV",{class:!0});var ki=s(Bt);m(Ky.$$.fragment,ki),Kkr=i(ki),r7e=n(ki,"P",{});var n3t=s(r7e);Zkr=r(n3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n3t.forEach(t),eSr=i(ki),Cf=n(ki,"P",{});var vY=s(Cf);oSr=r(vY,`Note:
Loading a model from its configuration file does `),t7e=n(vY,"STRONG",{});var s3t=s(t7e);rSr=r(s3t,"not"),s3t.forEach(t),tSr=r(vY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(vY,"A",{href:!0});var l3t=s(aU);aSr=r(l3t,"from_pretrained()"),l3t.forEach(t),nSr=r(vY," to load the model weights."),vY.forEach(t),sSr=i(ki),a7e=n(ki,"P",{});var i3t=s(a7e);lSr=r(i3t,"Examples:"),i3t.forEach(t),iSr=i(ki),m(Zy.$$.fragment,ki),ki.forEach(t),dSr=i(xi),Po=n(xi,"DIV",{class:!0});var $a=s(Po);m(eL.$$.fragment,$a),cSr=i($a),n7e=n($a,"P",{});var d3t=s(n7e);fSr=r(d3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),d3t.forEach(t),mSr=i($a),qn=n($a,"P",{});var S5=s(qn);gSr=r(S5,"The model class to instantiate is selected based on the "),s7e=n(S5,"CODE",{});var c3t=s(s7e);hSr=r(c3t,"model_type"),c3t.forEach(t),pSr=r(S5,` property of the config object (either
passed as an argument or loaded from `),l7e=n(S5,"CODE",{});var f3t=s(l7e);_Sr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),uSr=r(S5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(S5,"CODE",{});var m3t=s(i7e);bSr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),FSr=r(S5,":"),S5.forEach(t),vSr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);mE=n(Oo,"LI",{});var zRe=s(mE);d7e=n(zRe,"STRONG",{});var g3t=s(d7e);TSr=r(g3t,"albert"),g3t.forEach(t),MSr=r(zRe," \u2014 "),nU=n(zRe,"A",{href:!0});var h3t=s(nU);ESr=r(h3t,"FlaxAlbertForTokenClassification"),h3t.forEach(t),CSr=r(zRe," (ALBERT model)"),zRe.forEach(t),wSr=i(Oo),gE=n(Oo,"LI",{});var QRe=s(gE);c7e=n(QRe,"STRONG",{});var p3t=s(c7e);ASr=r(p3t,"bert"),p3t.forEach(t),ySr=r(QRe," \u2014 "),sU=n(QRe,"A",{href:!0});var _3t=s(sU);LSr=r(_3t,"FlaxBertForTokenClassification"),_3t.forEach(t),xSr=r(QRe," (BERT model)"),QRe.forEach(t),kSr=i(Oo),hE=n(Oo,"LI",{});var WRe=s(hE);f7e=n(WRe,"STRONG",{});var u3t=s(f7e);SSr=r(u3t,"big_bird"),u3t.forEach(t),RSr=r(WRe," \u2014 "),lU=n(WRe,"A",{href:!0});var b3t=s(lU);BSr=r(b3t,"FlaxBigBirdForTokenClassification"),b3t.forEach(t),PSr=r(WRe," (BigBird model)"),WRe.forEach(t),$Sr=i(Oo),pE=n(Oo,"LI",{});var HRe=s(pE);m7e=n(HRe,"STRONG",{});var F3t=s(m7e);ISr=r(F3t,"distilbert"),F3t.forEach(t),qSr=r(HRe," \u2014 "),iU=n(HRe,"A",{href:!0});var v3t=s(iU);NSr=r(v3t,"FlaxDistilBertForTokenClassification"),v3t.forEach(t),jSr=r(HRe," (DistilBERT model)"),HRe.forEach(t),DSr=i(Oo),_E=n(Oo,"LI",{});var URe=s(_E);g7e=n(URe,"STRONG",{});var T3t=s(g7e);GSr=r(T3t,"electra"),T3t.forEach(t),OSr=r(URe," \u2014 "),dU=n(URe,"A",{href:!0});var M3t=s(dU);VSr=r(M3t,"FlaxElectraForTokenClassification"),M3t.forEach(t),XSr=r(URe," (ELECTRA model)"),URe.forEach(t),zSr=i(Oo),uE=n(Oo,"LI",{});var JRe=s(uE);h7e=n(JRe,"STRONG",{});var E3t=s(h7e);QSr=r(E3t,"roberta"),E3t.forEach(t),WSr=r(JRe," \u2014 "),cU=n(JRe,"A",{href:!0});var C3t=s(cU);HSr=r(C3t,"FlaxRobertaForTokenClassification"),C3t.forEach(t),USr=r(JRe," (RoBERTa model)"),JRe.forEach(t),JSr=i(Oo),bE=n(Oo,"LI",{});var YRe=s(bE);p7e=n(YRe,"STRONG",{});var w3t=s(p7e);YSr=r(w3t,"roformer"),w3t.forEach(t),KSr=r(YRe," \u2014 "),fU=n(YRe,"A",{href:!0});var A3t=s(fU);ZSr=r(A3t,"FlaxRoFormerForTokenClassification"),A3t.forEach(t),eRr=r(YRe," (RoFormer model)"),YRe.forEach(t),oRr=i(Oo),FE=n(Oo,"LI",{});var KRe=s(FE);_7e=n(KRe,"STRONG",{});var y3t=s(_7e);rRr=r(y3t,"xlm-roberta"),y3t.forEach(t),tRr=r(KRe," \u2014 "),mU=n(KRe,"A",{href:!0});var L3t=s(mU);aRr=r(L3t,"FlaxXLMRobertaForTokenClassification"),L3t.forEach(t),nRr=r(KRe," (XLM-RoBERTa model)"),KRe.forEach(t),Oo.forEach(t),sRr=i($a),u7e=n($a,"P",{});var x3t=s(u7e);lRr=r(x3t,"Examples:"),x3t.forEach(t),iRr=i($a),m(oL.$$.fragment,$a),$a.forEach(t),xi.forEach(t),a$e=i(c),wf=n(c,"H2",{class:!0});var pqe=s(wf);vE=n(pqe,"A",{id:!0,class:!0,href:!0});var k3t=s(vE);b7e=n(k3t,"SPAN",{});var S3t=s(b7e);m(rL.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),dRr=i(pqe),F7e=n(pqe,"SPAN",{});var R3t=s(F7e);cRr=r(R3t,"FlaxAutoModelForMultipleChoice"),R3t.forEach(t),pqe.forEach(t),n$e=i(c),Dr=n(c,"DIV",{class:!0});var Si=s(Dr);m(tL.$$.fragment,Si),fRr=i(Si),Af=n(Si,"P",{});var TY=s(Af);mRr=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),gU=n(TY,"A",{href:!0});var B3t=s(gU);gRr=r(B3t,"from_pretrained()"),B3t.forEach(t),hRr=r(TY," class method or the "),hU=n(TY,"A",{href:!0});var P3t=s(hU);pRr=r(P3t,"from_config()"),P3t.forEach(t),_Rr=r(TY,` class
method.`),TY.forEach(t),uRr=i(Si),aL=n(Si,"P",{});var _qe=s(aL);bRr=r(_qe,"This class cannot be instantiated directly using "),v7e=n(_qe,"CODE",{});var $3t=s(v7e);FRr=r($3t,"__init__()"),$3t.forEach(t),vRr=r(_qe," (throws an error)."),_qe.forEach(t),TRr=i(Si),Pt=n(Si,"DIV",{class:!0});var Ri=s(Pt);m(nL.$$.fragment,Ri),MRr=i(Ri),T7e=n(Ri,"P",{});var I3t=s(T7e);ERr=r(I3t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),I3t.forEach(t),CRr=i(Ri),yf=n(Ri,"P",{});var MY=s(yf);wRr=r(MY,`Note:
Loading a model from its configuration file does `),M7e=n(MY,"STRONG",{});var q3t=s(M7e);ARr=r(q3t,"not"),q3t.forEach(t),yRr=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(MY,"A",{href:!0});var N3t=s(pU);LRr=r(N3t,"from_pretrained()"),N3t.forEach(t),xRr=r(MY," to load the model weights."),MY.forEach(t),kRr=i(Ri),E7e=n(Ri,"P",{});var j3t=s(E7e);SRr=r(j3t,"Examples:"),j3t.forEach(t),RRr=i(Ri),m(sL.$$.fragment,Ri),Ri.forEach(t),BRr=i(Si),$o=n(Si,"DIV",{class:!0});var Ia=s($o);m(lL.$$.fragment,Ia),PRr=i(Ia),C7e=n(Ia,"P",{});var D3t=s(C7e);$Rr=r(D3t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),D3t.forEach(t),IRr=i(Ia),Nn=n(Ia,"P",{});var R5=s(Nn);qRr=r(R5,"The model class to instantiate is selected based on the "),w7e=n(R5,"CODE",{});var G3t=s(w7e);NRr=r(G3t,"model_type"),G3t.forEach(t),jRr=r(R5,` property of the config object (either
passed as an argument or loaded from `),A7e=n(R5,"CODE",{});var O3t=s(A7e);DRr=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),GRr=r(R5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y7e=n(R5,"CODE",{});var V3t=s(y7e);ORr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),VRr=r(R5,":"),R5.forEach(t),XRr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);TE=n(Vo,"LI",{});var ZRe=s(TE);L7e=n(ZRe,"STRONG",{});var X3t=s(L7e);zRr=r(X3t,"albert"),X3t.forEach(t),QRr=r(ZRe," \u2014 "),_U=n(ZRe,"A",{href:!0});var z3t=s(_U);WRr=r(z3t,"FlaxAlbertForMultipleChoice"),z3t.forEach(t),HRr=r(ZRe," (ALBERT model)"),ZRe.forEach(t),URr=i(Vo),ME=n(Vo,"LI",{});var eBe=s(ME);x7e=n(eBe,"STRONG",{});var Q3t=s(x7e);JRr=r(Q3t,"bert"),Q3t.forEach(t),YRr=r(eBe," \u2014 "),uU=n(eBe,"A",{href:!0});var W3t=s(uU);KRr=r(W3t,"FlaxBertForMultipleChoice"),W3t.forEach(t),ZRr=r(eBe," (BERT model)"),eBe.forEach(t),eBr=i(Vo),EE=n(Vo,"LI",{});var oBe=s(EE);k7e=n(oBe,"STRONG",{});var H3t=s(k7e);oBr=r(H3t,"big_bird"),H3t.forEach(t),rBr=r(oBe," \u2014 "),bU=n(oBe,"A",{href:!0});var U3t=s(bU);tBr=r(U3t,"FlaxBigBirdForMultipleChoice"),U3t.forEach(t),aBr=r(oBe," (BigBird model)"),oBe.forEach(t),nBr=i(Vo),CE=n(Vo,"LI",{});var rBe=s(CE);S7e=n(rBe,"STRONG",{});var J3t=s(S7e);sBr=r(J3t,"distilbert"),J3t.forEach(t),lBr=r(rBe," \u2014 "),FU=n(rBe,"A",{href:!0});var Y3t=s(FU);iBr=r(Y3t,"FlaxDistilBertForMultipleChoice"),Y3t.forEach(t),dBr=r(rBe," (DistilBERT model)"),rBe.forEach(t),cBr=i(Vo),wE=n(Vo,"LI",{});var tBe=s(wE);R7e=n(tBe,"STRONG",{});var K3t=s(R7e);fBr=r(K3t,"electra"),K3t.forEach(t),mBr=r(tBe," \u2014 "),vU=n(tBe,"A",{href:!0});var Z3t=s(vU);gBr=r(Z3t,"FlaxElectraForMultipleChoice"),Z3t.forEach(t),hBr=r(tBe," (ELECTRA model)"),tBe.forEach(t),pBr=i(Vo),AE=n(Vo,"LI",{});var aBe=s(AE);B7e=n(aBe,"STRONG",{});var eCt=s(B7e);_Br=r(eCt,"roberta"),eCt.forEach(t),uBr=r(aBe," \u2014 "),TU=n(aBe,"A",{href:!0});var oCt=s(TU);bBr=r(oCt,"FlaxRobertaForMultipleChoice"),oCt.forEach(t),FBr=r(aBe," (RoBERTa model)"),aBe.forEach(t),vBr=i(Vo),yE=n(Vo,"LI",{});var nBe=s(yE);P7e=n(nBe,"STRONG",{});var rCt=s(P7e);TBr=r(rCt,"roformer"),rCt.forEach(t),MBr=r(nBe," \u2014 "),MU=n(nBe,"A",{href:!0});var tCt=s(MU);EBr=r(tCt,"FlaxRoFormerForMultipleChoice"),tCt.forEach(t),CBr=r(nBe," (RoFormer model)"),nBe.forEach(t),wBr=i(Vo),LE=n(Vo,"LI",{});var sBe=s(LE);$7e=n(sBe,"STRONG",{});var aCt=s($7e);ABr=r(aCt,"xlm-roberta"),aCt.forEach(t),yBr=r(sBe," \u2014 "),EU=n(sBe,"A",{href:!0});var nCt=s(EU);LBr=r(nCt,"FlaxXLMRobertaForMultipleChoice"),nCt.forEach(t),xBr=r(sBe," (XLM-RoBERTa model)"),sBe.forEach(t),Vo.forEach(t),kBr=i(Ia),I7e=n(Ia,"P",{});var sCt=s(I7e);SBr=r(sCt,"Examples:"),sCt.forEach(t),RBr=i(Ia),m(iL.$$.fragment,Ia),Ia.forEach(t),Si.forEach(t),s$e=i(c),Lf=n(c,"H2",{class:!0});var uqe=s(Lf);xE=n(uqe,"A",{id:!0,class:!0,href:!0});var lCt=s(xE);q7e=n(lCt,"SPAN",{});var iCt=s(q7e);m(dL.$$.fragment,iCt),iCt.forEach(t),lCt.forEach(t),BBr=i(uqe),N7e=n(uqe,"SPAN",{});var dCt=s(N7e);PBr=r(dCt,"FlaxAutoModelForNextSentencePrediction"),dCt.forEach(t),uqe.forEach(t),l$e=i(c),Gr=n(c,"DIV",{class:!0});var Bi=s(Gr);m(cL.$$.fragment,Bi),$Br=i(Bi),xf=n(Bi,"P",{});var EY=s(xf);IBr=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),CU=n(EY,"A",{href:!0});var cCt=s(CU);qBr=r(cCt,"from_pretrained()"),cCt.forEach(t),NBr=r(EY," class method or the "),wU=n(EY,"A",{href:!0});var fCt=s(wU);jBr=r(fCt,"from_config()"),fCt.forEach(t),DBr=r(EY,` class
method.`),EY.forEach(t),GBr=i(Bi),fL=n(Bi,"P",{});var bqe=s(fL);OBr=r(bqe,"This class cannot be instantiated directly using "),j7e=n(bqe,"CODE",{});var mCt=s(j7e);VBr=r(mCt,"__init__()"),mCt.forEach(t),XBr=r(bqe," (throws an error)."),bqe.forEach(t),zBr=i(Bi),$t=n(Bi,"DIV",{class:!0});var Pi=s($t);m(mL.$$.fragment,Pi),QBr=i(Pi),D7e=n(Pi,"P",{});var gCt=s(D7e);WBr=r(gCt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),gCt.forEach(t),HBr=i(Pi),kf=n(Pi,"P",{});var CY=s(kf);UBr=r(CY,`Note:
Loading a model from its configuration file does `),G7e=n(CY,"STRONG",{});var hCt=s(G7e);JBr=r(hCt,"not"),hCt.forEach(t),YBr=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),AU=n(CY,"A",{href:!0});var pCt=s(AU);KBr=r(pCt,"from_pretrained()"),pCt.forEach(t),ZBr=r(CY," to load the model weights."),CY.forEach(t),ePr=i(Pi),O7e=n(Pi,"P",{});var _Ct=s(O7e);oPr=r(_Ct,"Examples:"),_Ct.forEach(t),rPr=i(Pi),m(gL.$$.fragment,Pi),Pi.forEach(t),tPr=i(Bi),Io=n(Bi,"DIV",{class:!0});var qa=s(Io);m(hL.$$.fragment,qa),aPr=i(qa),V7e=n(qa,"P",{});var uCt=s(V7e);nPr=r(uCt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uCt.forEach(t),sPr=i(qa),jn=n(qa,"P",{});var B5=s(jn);lPr=r(B5,"The model class to instantiate is selected based on the "),X7e=n(B5,"CODE",{});var bCt=s(X7e);iPr=r(bCt,"model_type"),bCt.forEach(t),dPr=r(B5,` property of the config object (either
passed as an argument or loaded from `),z7e=n(B5,"CODE",{});var FCt=s(z7e);cPr=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),fPr=r(B5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q7e=n(B5,"CODE",{});var vCt=s(Q7e);mPr=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),gPr=r(B5,":"),B5.forEach(t),hPr=i(qa),W7e=n(qa,"UL",{});var TCt=s(W7e);kE=n(TCt,"LI",{});var lBe=s(kE);H7e=n(lBe,"STRONG",{});var MCt=s(H7e);pPr=r(MCt,"bert"),MCt.forEach(t),_Pr=r(lBe," \u2014 "),yU=n(lBe,"A",{href:!0});var ECt=s(yU);uPr=r(ECt,"FlaxBertForNextSentencePrediction"),ECt.forEach(t),bPr=r(lBe," (BERT model)"),lBe.forEach(t),TCt.forEach(t),FPr=i(qa),U7e=n(qa,"P",{});var CCt=s(U7e);vPr=r(CCt,"Examples:"),CCt.forEach(t),TPr=i(qa),m(pL.$$.fragment,qa),qa.forEach(t),Bi.forEach(t),i$e=i(c),Sf=n(c,"H2",{class:!0});var Fqe=s(Sf);SE=n(Fqe,"A",{id:!0,class:!0,href:!0});var wCt=s(SE);J7e=n(wCt,"SPAN",{});var ACt=s(J7e);m(_L.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),MPr=i(Fqe),Y7e=n(Fqe,"SPAN",{});var yCt=s(Y7e);EPr=r(yCt,"FlaxAutoModelForImageClassification"),yCt.forEach(t),Fqe.forEach(t),d$e=i(c),Or=n(c,"DIV",{class:!0});var $i=s(Or);m(uL.$$.fragment,$i),CPr=i($i),Rf=n($i,"P",{});var wY=s(Rf);wPr=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),LU=n(wY,"A",{href:!0});var LCt=s(LU);APr=r(LCt,"from_pretrained()"),LCt.forEach(t),yPr=r(wY," class method or the "),xU=n(wY,"A",{href:!0});var xCt=s(xU);LPr=r(xCt,"from_config()"),xCt.forEach(t),xPr=r(wY,` class
method.`),wY.forEach(t),kPr=i($i),bL=n($i,"P",{});var vqe=s(bL);SPr=r(vqe,"This class cannot be instantiated directly using "),K7e=n(vqe,"CODE",{});var kCt=s(K7e);RPr=r(kCt,"__init__()"),kCt.forEach(t),BPr=r(vqe," (throws an error)."),vqe.forEach(t),PPr=i($i),It=n($i,"DIV",{class:!0});var Ii=s(It);m(FL.$$.fragment,Ii),$Pr=i(Ii),Z7e=n(Ii,"P",{});var SCt=s(Z7e);IPr=r(SCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),SCt.forEach(t),qPr=i(Ii),Bf=n(Ii,"P",{});var AY=s(Bf);NPr=r(AY,`Note:
Loading a model from its configuration file does `),e9e=n(AY,"STRONG",{});var RCt=s(e9e);jPr=r(RCt,"not"),RCt.forEach(t),DPr=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kU=n(AY,"A",{href:!0});var BCt=s(kU);GPr=r(BCt,"from_pretrained()"),BCt.forEach(t),OPr=r(AY," to load the model weights."),AY.forEach(t),VPr=i(Ii),o9e=n(Ii,"P",{});var PCt=s(o9e);XPr=r(PCt,"Examples:"),PCt.forEach(t),zPr=i(Ii),m(vL.$$.fragment,Ii),Ii.forEach(t),QPr=i($i),qo=n($i,"DIV",{class:!0});var Na=s(qo);m(TL.$$.fragment,Na),WPr=i(Na),r9e=n(Na,"P",{});var $Ct=s(r9e);HPr=r($Ct,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$Ct.forEach(t),UPr=i(Na),Dn=n(Na,"P",{});var P5=s(Dn);JPr=r(P5,"The model class to instantiate is selected based on the "),t9e=n(P5,"CODE",{});var ICt=s(t9e);YPr=r(ICt,"model_type"),ICt.forEach(t),KPr=r(P5,` property of the config object (either
passed as an argument or loaded from `),a9e=n(P5,"CODE",{});var qCt=s(a9e);ZPr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),e$r=r(P5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n9e=n(P5,"CODE",{});var NCt=s(n9e);o$r=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),r$r=r(P5,":"),P5.forEach(t),t$r=i(Na),ML=n(Na,"UL",{});var Tqe=s(ML);RE=n(Tqe,"LI",{});var iBe=s(RE);s9e=n(iBe,"STRONG",{});var jCt=s(s9e);a$r=r(jCt,"beit"),jCt.forEach(t),n$r=r(iBe," \u2014 "),SU=n(iBe,"A",{href:!0});var DCt=s(SU);s$r=r(DCt,"FlaxBeitForImageClassification"),DCt.forEach(t),l$r=r(iBe," (BEiT model)"),iBe.forEach(t),i$r=i(Tqe),BE=n(Tqe,"LI",{});var dBe=s(BE);l9e=n(dBe,"STRONG",{});var GCt=s(l9e);d$r=r(GCt,"vit"),GCt.forEach(t),c$r=r(dBe," \u2014 "),RU=n(dBe,"A",{href:!0});var OCt=s(RU);f$r=r(OCt,"FlaxViTForImageClassification"),OCt.forEach(t),m$r=r(dBe," (ViT model)"),dBe.forEach(t),Tqe.forEach(t),g$r=i(Na),i9e=n(Na,"P",{});var VCt=s(i9e);h$r=r(VCt,"Examples:"),VCt.forEach(t),p$r=i(Na),m(EL.$$.fragment,Na),Na.forEach(t),$i.forEach(t),c$e=i(c),Pf=n(c,"H2",{class:!0});var Mqe=s(Pf);PE=n(Mqe,"A",{id:!0,class:!0,href:!0});var XCt=s(PE);d9e=n(XCt,"SPAN",{});var zCt=s(d9e);m(CL.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),_$r=i(Mqe),c9e=n(Mqe,"SPAN",{});var QCt=s(c9e);u$r=r(QCt,"FlaxAutoModelForVision2Seq"),QCt.forEach(t),Mqe.forEach(t),f$e=i(c),Vr=n(c,"DIV",{class:!0});var qi=s(Vr);m(wL.$$.fragment,qi),b$r=i(qi),$f=n(qi,"P",{});var yY=s($f);F$r=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BU=n(yY,"A",{href:!0});var WCt=s(BU);v$r=r(WCt,"from_pretrained()"),WCt.forEach(t),T$r=r(yY," class method or the "),PU=n(yY,"A",{href:!0});var HCt=s(PU);M$r=r(HCt,"from_config()"),HCt.forEach(t),E$r=r(yY,` class
method.`),yY.forEach(t),C$r=i(qi),AL=n(qi,"P",{});var Eqe=s(AL);w$r=r(Eqe,"This class cannot be instantiated directly using "),f9e=n(Eqe,"CODE",{});var UCt=s(f9e);A$r=r(UCt,"__init__()"),UCt.forEach(t),y$r=r(Eqe," (throws an error)."),Eqe.forEach(t),L$r=i(qi),qt=n(qi,"DIV",{class:!0});var Ni=s(qt);m(yL.$$.fragment,Ni),x$r=i(Ni),m9e=n(Ni,"P",{});var JCt=s(m9e);k$r=r(JCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JCt.forEach(t),S$r=i(Ni),If=n(Ni,"P",{});var LY=s(If);R$r=r(LY,`Note:
Loading a model from its configuration file does `),g9e=n(LY,"STRONG",{});var YCt=s(g9e);B$r=r(YCt,"not"),YCt.forEach(t),P$r=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(LY,"A",{href:!0});var KCt=s($U);$$r=r(KCt,"from_pretrained()"),KCt.forEach(t),I$r=r(LY," to load the model weights."),LY.forEach(t),q$r=i(Ni),h9e=n(Ni,"P",{});var ZCt=s(h9e);N$r=r(ZCt,"Examples:"),ZCt.forEach(t),j$r=i(Ni),m(LL.$$.fragment,Ni),Ni.forEach(t),D$r=i(qi),No=n(qi,"DIV",{class:!0});var ja=s(No);m(xL.$$.fragment,ja),G$r=i(ja),p9e=n(ja,"P",{});var ewt=s(p9e);O$r=r(ewt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ewt.forEach(t),V$r=i(ja),Gn=n(ja,"P",{});var $5=s(Gn);X$r=r($5,"The model class to instantiate is selected based on the "),_9e=n($5,"CODE",{});var owt=s(_9e);z$r=r(owt,"model_type"),owt.forEach(t),Q$r=r($5,` property of the config object (either
passed as an argument or loaded from `),u9e=n($5,"CODE",{});var rwt=s(u9e);W$r=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),H$r=r($5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b9e=n($5,"CODE",{});var twt=s(b9e);U$r=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),J$r=r($5,":"),$5.forEach(t),Y$r=i(ja),F9e=n(ja,"UL",{});var awt=s(F9e);$E=n(awt,"LI",{});var cBe=s($E);v9e=n(cBe,"STRONG",{});var nwt=s(v9e);K$r=r(nwt,"vision-encoder-decoder"),nwt.forEach(t),Z$r=r(cBe," \u2014 "),IU=n(cBe,"A",{href:!0});var swt=s(IU);eIr=r(swt,"FlaxVisionEncoderDecoderModel"),swt.forEach(t),oIr=r(cBe," (Vision Encoder decoder model)"),cBe.forEach(t),awt.forEach(t),rIr=i(ja),T9e=n(ja,"P",{});var lwt=s(T9e);tIr=r(lwt,"Examples:"),lwt.forEach(t),aIr=i(ja),m(kL.$$.fragment,ja),ja.forEach(t),qi.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(uwt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(fe,"class","relative group"),d(On,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer"),d(zi,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(Vf,"id","extending-the-auto-classes"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#extending-the-auto-classes"),d(Qi,"class","relative group"),d(zf,"id","transformers.AutoConfig"),d(zf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zf,"href","#transformers.AutoConfig"),d(Wi,"class","relative group"),d(I8,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(q8,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertConfig"),d(N8,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(j8,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitConfig"),d(D8,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertConfig"),d(G8,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(O8,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdConfig"),d(V8,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(X8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(z8,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(Q8,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertConfig"),d(W8,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineConfig"),d(H8,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPConfig"),d(U8,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertConfig"),d(J8,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextConfig"),d(Y8,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLConfig"),d(K8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Z8,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(ex,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(ox,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaConfig"),d(rx,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(tx,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(ax,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTConfig"),d(nx,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrConfig"),d(sx,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertConfig"),d(lx,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRConfig"),d(ix,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTConfig"),d(dx,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraConfig"),d(cx,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(fx,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertConfig"),d(mx,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetConfig"),d(gx,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTConfig"),d(hx,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelConfig"),d(px,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNConfig"),d(_x,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Config"),d(ux,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(bx,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJConfig"),d(Fx,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertConfig"),d(vx,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertConfig"),d(Tx,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Mx,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(Ex,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Cx,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDConfig"),d(wx,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerConfig"),d(Ax,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Config"),d(yx,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeConfig"),d(Lx,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertConfig"),d(xx,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Config"),d(kx,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianConfig"),d(Sx,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Rx,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartConfig"),d(Bx,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Px,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertConfig"),d($x,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetConfig"),d(Ix,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Config"),d(qx,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Nx,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(jx,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusConfig"),d(Dx,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Gx,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartConfig"),d(Ox,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Vx,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Xx,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(zx,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagConfig"),d(Qx,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmConfig"),d(Wx,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerConfig"),d(Hx,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetConfig"),d(Ux,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertConfig"),d(Jx,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetConfig"),d(Yx,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertConfig"),d(Kx,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaConfig"),d(Zx,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerConfig"),d(ek,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerConfig"),d(ok,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWConfig"),d(rk,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDConfig"),d(tk,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(ak,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(nk,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(sk,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterConfig"),d(lk,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ik,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinConfig"),d(dk,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Config"),d(ck,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasConfig"),d(fk,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartConfig"),d(mk,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(gk,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRConfig"),d(hk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(pk,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(_k,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanConfig"),d(uk,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltConfig"),d(bk,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Fk,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(vk,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Tk,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTConfig"),d(Mk,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Ek,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Ck,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMConfig"),d(wk,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMConfig"),d(Ak,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMConfig"),d(yk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Lk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(xk,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(kk,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetConfig"),d(Sk,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Og,"id","transformers.AutoTokenizer"),d(Og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Og,"href","#transformers.AutoTokenizer"),d(Ui,"class","relative group"),d(Rk,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Bk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizer"),d(Pk,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertTokenizerFast"),d($k,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizer"),d(Ik,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartTokenizerFast"),d(qk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Nk,"href","/docs/transformers/pr_16792/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(jk,"href","/docs/transformers/pr_16792/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Dk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(Gk,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Vk,"href","/docs/transformers/pr_16792/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Xk,"href","/docs/transformers/pr_16792/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(zk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Qk,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Hk,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Uk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Jk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Kk,"href","/docs/transformers/pr_16792/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Zk,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizer"),d(eS,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(oS,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineTokenizer"),d(rS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizer"),d(tS,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(aS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(nS,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(sS,"href","/docs/transformers/pr_16792/en/model_doc/cpm#transformers.CpmTokenizer"),d(lS,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(iS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizer"),d(dS,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(cS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(fS,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(mS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(gS,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(hS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(pS,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(_S,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizer"),d(uS,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(bS,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(FS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizer"),d(vS,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(TS,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(MS,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizer"),d(ES,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(CS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(wS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(AS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(yS,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(LS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizer"),d(xS,"href","/docs/transformers/pr_16792/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(kS,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(SS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(RS,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(BS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(PS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d($S,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(IS,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(qS,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(NS,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(jS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizer"),d(DS,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDTokenizerFast"),d(GS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizer"),d(OS,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(VS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(XS,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(zS,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeTokenizer"),d(QS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(WS,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(HS,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(US,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianTokenizer"),d(JS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizer"),d(YS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(KS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ZS,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(eR,"href","/docs/transformers/pr_16792/en/model_doc/mluke#transformers.MLukeTokenizer"),d(oR,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(rR,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(tR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(aR,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(nR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(sR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(lR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(iR,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(dR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(cR,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(fR,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(mR,"href","/docs/transformers/pr_16792/en/model_doc/phobert#transformers.PhobertTokenizer"),d(gR,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartTokenizer"),d(hR,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(pR,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizer"),d(_R,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertTokenizerFast"),d(uR,"href","/docs/transformers/pr_16792/en/model_doc/rag#transformers.RagTokenizer"),d(bR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizer"),d(FR,"href","/docs/transformers/pr_16792/en/model_doc/realm#transformers.RealmTokenizerFast"),d(vR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizer"),d(TR,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(MR,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizer"),d(ER,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(CR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(wR,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(AR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizer"),d(yR,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(LR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(xR,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(kR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(SR,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(RR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizer"),d(BR,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(PR,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d($R,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(IR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5Tokenizer"),d(qR,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.T5TokenizerFast"),d(NR,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasTokenizer"),d(jR,"href","/docs/transformers/pr_16792/en/model_doc/tapex#transformers.TapexTokenizer"),d(DR,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(GR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(OR,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(VR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizer"),d(XR,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(zR,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMTokenizer"),d(QR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(WR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(HR,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(UR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(JR,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fh,"id","transformers.AutoFeatureExtractor"),d(Fh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Fh,"href","#transformers.AutoFeatureExtractor"),d(Ji,"class","relative group"),d(YR,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(KR,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(rB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(tB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(aB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(nB,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(sB,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(lB,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(iB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(dB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(cB,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(fB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(mB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(gB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(hB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(pB,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(_B,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"id","transformers.AutoProcessor"),d(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gh,"href","#transformers.AutoProcessor"),d(Yi,"class","relative group"),d(uB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(bB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPProcessor"),d(FB,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(vB,"href","/docs/transformers/pr_16792/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(TB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(MB,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(EB,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRProcessor"),d(CB,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(wB,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"id","transformers.AutoModel"),d(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kh,"href","#transformers.AutoModel"),d(Zi,"class","relative group"),d(AB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LB,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xB,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertModel"),d(kB,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartModel"),d(SB,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitModel"),d(RB,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertModel"),d(BB,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(PB,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdModel"),d($B,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(IB,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(qB,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(NB,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertModel"),d(jB,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineModel"),d(DB,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.CLIPModel"),d(GB,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertModel"),d(OB,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextModel"),d(VB,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLModel"),d(XB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(zB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(QB,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(WB,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaModel"),d(HB,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(UB,"href","/docs/transformers/pr_16792/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(JB,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTModel"),d(YB,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrModel"),d(KB,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertModel"),d(ZB,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(eP,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTModel"),d(oP,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraModel"),d(rP,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertModel"),d(tP,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetModel"),d(aP,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTModel"),d(nP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelModel"),d(sP,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelBaseModel"),d(lP,"href","/docs/transformers/pr_16792/en/model_doc/glpn#transformers.GLPNModel"),d(iP,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2Model"),d(dP,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(cP,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJModel"),d(fP,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertModel"),d(mP,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertModel"),d(gP,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(hP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(pP,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(_P,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDModel"),d(uP,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerModel"),d(bP,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5Model"),d(FP,"href","/docs/transformers/pr_16792/en/model_doc/luke#transformers.LukeModel"),d(vP,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertModel"),d(TP,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100Model"),d(MP,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianModel"),d(EP,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerModel"),d(CP,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartModel"),d(wP,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(AP,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertModel"),d(yP,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetModel"),d(LP,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5Model"),d(xP,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerModel"),d(kP,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SP,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusModel"),d(RP,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverModel"),d(BP,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartModel"),d(PP,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerModel"),d($P,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(IP,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertModel"),d(qP,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModel"),d(NP,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetModel"),d(jP,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertModel"),d(DP,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetModel"),d(GP,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(OP,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaModel"),d(VP,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerModel"),d(XP,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerModel"),d(zP,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWModel"),d(QP,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDModel"),d(WP,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(HP,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterModel"),d(UP,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(JP,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinModel"),d(YP,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5Model"),d(KP,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasModel"),d(ZP,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(e$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechModel"),d(o$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(r$,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanModel"),d(t$,"href","/docs/transformers/pr_16792/en/model_doc/vilt#transformers.ViltModel"),d(a$,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(n$,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertModel"),d(s$,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTModel"),d(l$,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(i$,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(d$,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMModel"),d(c$,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMModel"),d(f$,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMModel"),d(m$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(g$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(h$,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(p$,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetModel"),d(_$,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D_,"id","transformers.AutoModelForPreTraining"),d(D_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D_,"href","#transformers.AutoModelForPreTraining"),d(rd,"class","relative group"),d(u$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(b$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(F$,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v$,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForPreTraining"),d(T$,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(M$,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForPreTraining"),d(E$,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(C$,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(w$,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(A$,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(y$,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(L$,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(x$,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(k$,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForPreTraining"),d(S$,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(R$,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForPreTraining"),d(B$,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(P$,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForPreTraining"),d($$,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(I$,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(q$,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(N$,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(j$,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(D$,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(G$,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(O$,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(V$,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(X$,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(z$,"href","/docs/transformers/pr_16792/en/model_doc/retribert#transformers.RetriBertModel"),d(Q$,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(W$,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(H$,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(U$,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(J$,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(Y$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(K$,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(Z$,"href","/docs/transformers/pr_16792/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(eI,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(oI,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(rI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(tI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(aI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(nI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lu,"id","transformers.AutoModelForCausalLM"),d(Lu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lu,"href","#transformers.AutoModelForCausalLM"),d(nd,"class","relative group"),d(sI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForCausalLM"),d(cI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertLMHeadModel"),d(fI,"href","/docs/transformers/pr_16792/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(mI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(gI,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(hI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(pI,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(_I,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(uI,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(bI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(FI,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForCausalLM"),d(vI,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(TI,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(MI,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(EI,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianForCausalLM"),d(CI,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForCausalLM"),d(wI,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(AI,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(yI,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(LI,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(xI,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(kI,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(SI,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(RI,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(BI,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(PI,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d($I,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(II,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(qI,"href","/docs/transformers/pr_16792/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(NI,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(jI,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(DI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(GI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(OI,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(VI,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f2,"id","transformers.AutoModelForMaskedLM"),d(f2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f2,"href","#transformers.AutoModelForMaskedLM"),d(id,"class","relative group"),d(XI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QI,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WI,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(HI,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(UI,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMaskedLM"),d(JI,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(YI,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(KI,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(eq,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(oq,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(rq,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(aq,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(nq,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(sq,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(lq,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(iq,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(dq,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(cq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(mq,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(gq,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(hq,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(pq,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(_q,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(uq,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(bq,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(Fq,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(vq,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(Tq,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(Mq,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(Eq,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Cq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(wq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(Aq,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(H2,"id","transformers.AutoModelForSeq2SeqLM"),d(H2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H2,"href","#transformers.AutoModelForSeq2SeqLM"),d(fd,"class","relative group"),d(yq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d($q,"href","/docs/transformers/pr_16792/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(qq,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),d(Nq,"href","/docs/transformers/pr_16792/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(jq,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.MarianMTModel"),d(Dq,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Gq,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Oq,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Vq,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Xq,"href","/docs/transformers/pr_16792/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(zq,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Qq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Wq,"href","/docs/transformers/pr_16792/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h1,"id","transformers.AutoModelForSequenceClassification"),d(h1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h1,"href","#transformers.AutoModelForSequenceClassification"),d(hd,"class","relative group"),d(Hq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jq,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yq,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(wN,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(AN,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(LN,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(xN,"href","/docs/transformers/pr_16792/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(kN,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(SN,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(RN,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d($N,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(qN,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForSequenceClassification"),d(NN,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(jN,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(DN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(GN,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(ON,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(VN,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(db,"id","transformers.AutoModelForMultipleChoice"),d(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(db,"href","#transformers.AutoModelForMultipleChoice"),d(ud,"class","relative group"),d(XN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QN,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WN,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(ej,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(rj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(tj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(aj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(nj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(sj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(lj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(ij,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(dj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(cj,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(fj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(mj,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(gj,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(hj,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(pj,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(_j,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(uj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(bj,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(Fj,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(vj,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jb,"id","transformers.AutoModelForNextSentencePrediction"),d(jb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jb,"href","#transformers.AutoModelForNextSentencePrediction"),d(vd,"class","relative group"),d(Tj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Ej,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(wj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(Aj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(yj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(Lj,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qb,"id","transformers.AutoModelForTokenClassification"),d(Qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Qb,"href","#transformers.AutoModelForTokenClassification"),d(Ed,"class","relative group"),d(xj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Sj,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rj,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d($j,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForTokenClassification"),d(qj,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(jj,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Xj,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(zj,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Qj,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Wj,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Hj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Uj,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Jj,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Yj,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Kj,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Zj,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(eD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(oD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(rD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(tD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(aD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(nD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(sD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(lD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(iD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(dD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(cD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y6,"id","transformers.AutoModelForQuestionAnswering"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.AutoModelForQuestionAnswering"),d(Ad,"class","relative group"),d(fD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hD,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16792/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16792/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(LD,"href","/docs/transformers/pr_16792/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_16792/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_16792/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d($D,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_16792/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ND,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_16792/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(GD,"href","/docs/transformers/pr_16792/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(OD,"href","/docs/transformers/pr_16792/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(VD,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(XD,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(zD,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(QD,"href","/docs/transformers/pr_16792/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(WD,"href","/docs/transformers/pr_16792/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(HD,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(UD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(KD,"href","/docs/transformers/pr_16792/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hF,"id","transformers.AutoModelForTableQuestionAnswering"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(xd,"class","relative group"),d(ZD,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rG,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uF,"id","transformers.AutoModelForImageClassification"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForImageClassification"),d(Rd,"class","relative group"),d(tG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sG,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForImageClassification"),d(lG,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(iG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(dG,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassification"),d(cG,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(fG,"href","/docs/transformers/pr_16792/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(mG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(gG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(hG,"href","/docs/transformers/pr_16792/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(pG,"href","/docs/transformers/pr_16792/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(_G,"href","/docs/transformers/pr_16792/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(uG,"href","/docs/transformers/pr_16792/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(bG,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(FG,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForImageClassification"),d(vG,"href","/docs/transformers/pr_16792/en/model_doc/van#transformers.VanForImageClassification"),d(TG,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.AutoModelForVision2Seq"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.AutoModelForVision2Seq"),d($d,"class","relative group"),d(MG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wG,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BF,"id","transformers.AutoModelForAudioClassification"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.AutoModelForAudioClassification"),d(Nd,"class","relative group"),d(AG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(kG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(SG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(RG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(BG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(PG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d($G,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(IG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VF,"id","transformers.AutoModelForAudioFrameClassification"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.AutoModelForAudioFrameClassification"),d(Gd,"class","relative group"),d(qG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(GG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(OG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(VG,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UF,"id","transformers.AutoModelForCTC"),d(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UF,"href","#transformers.AutoModelForCTC"),d(Xd,"class","relative group"),d(XG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WG,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(HG,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.HubertForCTC"),d(UG,"href","/docs/transformers/pr_16792/en/model_doc/sew#transformers.SEWForCTC"),d(JG,"href","/docs/transformers/pr_16792/en/model_doc/sew-d#transformers.SEWDForCTC"),d(YG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(KG,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(ZG,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(eO,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(nv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(nv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Wd,"class","relative group"),d(oO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aO,"href","/docs/transformers/pr_16792/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(nO,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dv,"id","transformers.AutoModelForAudioXVector"),d(dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dv,"href","#transformers.AutoModelForAudioXVector"),d(Jd,"class","relative group"),d(sO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(cO,"href","/docs/transformers/pr_16792/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(fO,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(mO,"href","/docs/transformers/pr_16792/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pv,"id","transformers.AutoModelForMaskedImageModeling"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Zd,"class","relative group"),d(gO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_O,"href","/docs/transformers/pr_16792/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(uO,"href","/docs/transformers/pr_16792/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(bO,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vv,"id","transformers.AutoModelForObjectDetection"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForObjectDetection"),d(tc,"class","relative group"),d(FO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MO,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.AutoModelForImageSegmentation"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.AutoModelForImageSegmentation"),d(sc,"class","relative group"),d(EO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_16792/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Av,"id","transformers.AutoModelForSemanticSegmentation"),d(Av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Av,"href","#transformers.AutoModelForSemanticSegmentation"),d(dc,"class","relative group"),d(yO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(SO,"href","/docs/transformers/pr_16792/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(RO,"href","/docs/transformers/pr_16792/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(BO,"href","/docs/transformers/pr_16792/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rv,"id","transformers.AutoModelForInstanceSegmentation"),d(Rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rv,"href","#transformers.AutoModelForInstanceSegmentation"),d(mc,"class","relative group"),d(PO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($O,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qO,"href","/docs/transformers/pr_16792/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($v,"id","transformers.TFAutoModel"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.TFAutoModel"),d(pc,"class","relative group"),d(NO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DO,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GO,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertModel"),d(OO,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartModel"),d(VO,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertModel"),d(XO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(zO,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(QO,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertModel"),d(WO,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.TFCLIPModel"),d(HO,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertModel"),d(UO,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextModel"),d(JO,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLModel"),d(YO,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaModel"),d(KO,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(ZO,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(eV,"href","/docs/transformers/pr_16792/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(oV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraModel"),d(rV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(tV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelModel"),d(aV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(nV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2Model"),d(sV,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJModel"),d(lV,"href","/docs/transformers/pr_16792/en/model_doc/hubert#transformers.TFHubertModel"),d(iV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(dV,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDModel"),d(cV,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerModel"),d(fV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertModel"),d(mV,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianModel"),d(gV,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartModel"),d(hV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(pV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetModel"),d(_V,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5Model"),d(uV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(bV,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusModel"),d(FV,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertModel"),d(vV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaModel"),d(TV,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerModel"),d(MV,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(EV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5Model"),d(CV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasModel"),d(wV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(AV,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTModel"),d(yV,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(LV,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(xV,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMModel"),d(kV,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(SV,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wT,"id","transformers.TFAutoModelForPreTraining"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.TFAutoModelForPreTraining"),d(bc,"class","relative group"),d(RV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($V,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(IV,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForPreTraining"),d(NV,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(jV,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(DV,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(GV,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(OV,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(VV,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(XV,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(zV,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(QV,"href","/docs/transformers/pr_16792/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(WV,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(HV,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(UV,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(JV,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(YV,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(KV,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(eX,"href","/docs/transformers/pr_16792/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(oX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(rX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(tX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UT,"id","transformers.TFAutoModelForCausalLM"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.TFAutoModelForCausalLM"),d(Tc,"class","relative group"),d(aX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(iX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(dX,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(cX,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(fX,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(mX,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(gX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(hX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(pX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(_X,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(uX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(bX,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(i7,"id","transformers.TFAutoModelForImageClassification"),d(i7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i7,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(FX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MX,"href","/docs/transformers/pr_16792/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(EX,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f7,"id","transformers.TFAutoModelForMaskedLM"),d(f7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f7,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(CX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yX,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(LX,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(kX,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(RX,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(BX,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(PX,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d($X,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(IX,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(qX,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(NX,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(jX,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(DX,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(GX,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(OX,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(VX,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(XX,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(zX,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(QX,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R7,"id","transformers.TFAutoModelForSeq2SeqLM"),d(R7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R7,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(kc,"class","relative group"),d(WX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UX,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JX,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(YX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(KX,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(ZX,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(ez,"href","/docs/transformers/pr_16792/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.TFMarianMTModel"),d(rz,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(tz,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(az,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(nz,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V7,"id","transformers.TFAutoModelForSequenceClassification"),d(V7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V7,"href","#transformers.TFAutoModelForSequenceClassification"),d(Bc,"class","relative group"),d(sz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16792/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(hz,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(pz,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(_z,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(bz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(vz,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(Cz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(wz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(Az,"href","/docs/transformers/pr_16792/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(yz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(Lz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(xz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(kz,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Sz,"href","/docs/transformers/pr_16792/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Rz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Bz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Pz,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_9,"id","transformers.TFAutoModelForMultipleChoice"),d(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_9,"href","#transformers.TFAutoModelForMultipleChoice"),d(Ic,"class","relative group"),d($z,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Iz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qz,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nz,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Xz,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(zz,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Qz,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Wz,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Hz,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Uz,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Jz,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Yz,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Kz,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Zz,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(eQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P9,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(P9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(jc,"class","relative group"),d(oQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aQ,"href","/docs/transformers/pr_16792/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I9,"id","transformers.TFAutoModelForTokenClassification"),d(I9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I9,"href","#transformers.TFAutoModelForTokenClassification"),d(Oc,"class","relative group"),d(nQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(dQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(fQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(mQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(gQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(hQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(pQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(_Q,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(uQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(bQ,"href","/docs/transformers/pr_16792/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(FQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(vQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(TQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(MQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(EQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(CQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(wQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(AQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(yQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tM,"id","transformers.TFAutoModelForQuestionAnswering"),d(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(zc,"class","relative group"),d(LQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SQ,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_16792/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_16792/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_16792/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_16792/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(NQ,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_16792/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(DQ,"href","/docs/transformers/pr_16792/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(GQ,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(OQ,"href","/docs/transformers/pr_16792/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(VQ,"href","/docs/transformers/pr_16792/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(XQ,"href","/docs/transformers/pr_16792/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(zQ,"href","/docs/transformers/pr_16792/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(QQ,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(WQ,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(HQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(UQ,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(JQ,"href","/docs/transformers/pr_16792/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.TFAutoModelForVision2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForVision2Seq"),d(Hc,"class","relative group"),d(YQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZQ,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eW,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Yc,"class","relative group"),d(oW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aW,"href","/docs/transformers/pr_16792/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LM,"id","transformers.FlaxAutoModel"),d(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LM,"href","#transformers.FlaxAutoModel"),d(ef,"class","relative group"),d(nW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertModel"),d(dW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartModel"),d(cW,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitModel"),d(fW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertModel"),d(mW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(gW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(hW,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(pW,"href","/docs/transformers/pr_16792/en/model_doc/clip#transformers.FlaxCLIPModel"),d(_W,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(uW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraModel"),d(bW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(FW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(vW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(TW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5Model"),d(MW,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianModel"),d(EW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartModel"),d(CW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5Model"),d(wW,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(AW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(yW,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(LW,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5Model"),d(xW,"href","/docs/transformers/pr_16792/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(kW,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTModel"),d(SW,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(RW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(BW,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o4,"id","transformers.FlaxAutoModelForCausalLM"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForCausalLM"),d(tf,"class","relative group"),d(PW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($W,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(NW,"href","/docs/transformers/pr_16792/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(jW,"href","/docs/transformers/pr_16792/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(DW,"href","/docs/transformers/pr_16792/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(GW,"href","/docs/transformers/pr_16792/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l4,"id","transformers.FlaxAutoModelForPreTraining"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.FlaxAutoModelForPreTraining"),d(sf,"class","relative group"),d(OW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XW,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zW,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(QW,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(WW,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(HW,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(UW,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(JW,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(eH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(oH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(rH,"href","/docs/transformers/pr_16792/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(tH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.FlaxAutoModelForMaskedLM"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(cf,"class","relative group"),d(aH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(iH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(dH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(cH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(fH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(mH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(gH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(hH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(pH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(_H,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(gf,"class","relative group"),d(uH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(TH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(MH,"href","/docs/transformers/pr_16792/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(EH,"href","/docs/transformers/pr_16792/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(CH,"href","/docs/transformers/pr_16792/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),d(wH,"href","/docs/transformers/pr_16792/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(AH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(yH,"href","/docs/transformers/pr_16792/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(LH,"href","/docs/transformers/pr_16792/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(xH,"href","/docs/transformers/pr_16792/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(_f,"class","relative group"),d(kH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(PH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d($H,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(IH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(qH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(NH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(jH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(DH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(GH,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(OH,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(Ff,"class","relative group"),d(VH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QH,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(WH,"href","/docs/transformers/pr_16792/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(HH,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(UH,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(JH,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(YH,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(KH,"href","/docs/transformers/pr_16792/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(ZH,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(eU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(oU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.FlaxAutoModelForTokenClassification"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Mf,"class","relative group"),d(rU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nU,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(sU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(lU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(iU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(dU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(cU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(fU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(mU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(vE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(wf,"class","relative group"),d(gU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_U,"href","/docs/transformers/pr_16792/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(uU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(bU,"href","/docs/transformers/pr_16792/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(FU,"href","/docs/transformers/pr_16792/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(vU,"href","/docs/transformers/pr_16792/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(TU,"href","/docs/transformers/pr_16792/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(MU,"href","/docs/transformers/pr_16792/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(EU,"href","/docs/transformers/pr_16792/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Lf,"class","relative group"),d(CU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yU,"href","/docs/transformers/pr_16792/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.FlaxAutoModelForImageClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.FlaxAutoModelForImageClassification"),d(Sf,"class","relative group"),d(LU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SU,"href","/docs/transformers/pr_16792/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(RU,"href","/docs/transformers/pr_16792/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PE,"id","transformers.FlaxAutoModelForVision2Seq"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Pf,"class","relative group"),d(BU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PU,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($U,"href","/docs/transformers/pr_16792/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IU,"href","/docs/transformers/pr_16792/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,fe,u),e(fe,Ce),e(Ce,lo),g(pe,lo,null),e(fe,Ee),e(fe,Xo),e(Xo,ji),b(c,jf,u),b(c,fa,u),e(fa,Di),e(fa,Gi),e(Gi,I5),e(fa,Df),b(c,ke,u),b(c,co,u),e(co,Oi),e(co,On),e(On,q5),e(co,Vn),e(co,Xn),e(Xn,N5),e(co,Vi),e(co,zn),e(zn,j5),e(co,Xi),b(c,Gf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,k8),e(ue,zi),e(zi,S8),e(ue,R8),b(c,zo,u),b(c,Ga,u),e(Ga,B8),e(Ga,Of),e(Of,P8),e(Ga,Cqe),b(c,fBe,u),b(c,Qi,u),e(Qi,Vf),e(Vf,xY),g(D5,xY,null),e(Qi,wqe),e(Qi,kY),e(kY,Aqe),b(c,mBe,u),b(c,Qn,u),e(Qn,yqe),e(Qn,SY),e(SY,Lqe),e(Qn,xqe),e(Qn,RY),e(RY,kqe),e(Qn,Sqe),b(c,gBe,u),g(G5,c,u),b(c,hBe,u),b(c,$8,u),e($8,Rqe),b(c,pBe,u),g(Xf,c,u),b(c,_Be,u),b(c,Wi,u),e(Wi,zf),e(zf,BY),g(O5,BY,null),e(Wi,Bqe),e(Wi,PY),e(PY,Pqe),b(c,uBe,u),b(c,Qo,u),g(V5,Qo,null),e(Qo,$qe),e(Qo,X5),e(X5,Iqe),e(X5,I8),e(I8,qqe),e(X5,Nqe),e(Qo,jqe),e(Qo,z5),e(z5,Dqe),e(z5,$Y),e($Y,Gqe),e(z5,Oqe),e(Qo,Vqe),e(Qo,mo),g(Q5,mo,null),e(mo,Xqe),e(mo,IY),e(IY,zqe),e(mo,Qqe),e(mo,Hi),e(Hi,Wqe),e(Hi,qY),e(qY,Hqe),e(Hi,Uqe),e(Hi,NY),e(NY,Jqe),e(Hi,Yqe),e(mo,Kqe),e(mo,F),e(F,Qf),e(Qf,jY),e(jY,Zqe),e(Qf,eNe),e(Qf,q8),e(q8,oNe),e(Qf,rNe),e(F,tNe),e(F,Wf),e(Wf,DY),e(DY,aNe),e(Wf,nNe),e(Wf,N8),e(N8,sNe),e(Wf,lNe),e(F,iNe),e(F,Hf),e(Hf,GY),e(GY,dNe),e(Hf,cNe),e(Hf,j8),e(j8,fNe),e(Hf,mNe),e(F,gNe),e(F,Uf),e(Uf,OY),e(OY,hNe),e(Uf,pNe),e(Uf,D8),e(D8,_Ne),e(Uf,uNe),e(F,bNe),e(F,Jf),e(Jf,VY),e(VY,FNe),e(Jf,vNe),e(Jf,G8),e(G8,TNe),e(Jf,MNe),e(F,ENe),e(F,Yf),e(Yf,XY),e(XY,CNe),e(Yf,wNe),e(Yf,O8),e(O8,ANe),e(Yf,yNe),e(F,LNe),e(F,Kf),e(Kf,zY),e(zY,xNe),e(Kf,kNe),e(Kf,V8),e(V8,SNe),e(Kf,RNe),e(F,BNe),e(F,Zf),e(Zf,QY),e(QY,PNe),e(Zf,$Ne),e(Zf,X8),e(X8,INe),e(Zf,qNe),e(F,NNe),e(F,em),e(em,WY),e(WY,jNe),e(em,DNe),e(em,z8),e(z8,GNe),e(em,ONe),e(F,VNe),e(F,om),e(om,HY),e(HY,XNe),e(om,zNe),e(om,Q8),e(Q8,QNe),e(om,WNe),e(F,HNe),e(F,rm),e(rm,UY),e(UY,UNe),e(rm,JNe),e(rm,W8),e(W8,YNe),e(rm,KNe),e(F,ZNe),e(F,tm),e(tm,JY),e(JY,eje),e(tm,oje),e(tm,H8),e(H8,rje),e(tm,tje),e(F,aje),e(F,am),e(am,YY),e(YY,nje),e(am,sje),e(am,U8),e(U8,lje),e(am,ije),e(F,dje),e(F,nm),e(nm,KY),e(KY,cje),e(nm,fje),e(nm,J8),e(J8,mje),e(nm,gje),e(F,hje),e(F,sm),e(sm,ZY),e(ZY,pje),e(sm,_je),e(sm,Y8),e(Y8,uje),e(sm,bje),e(F,Fje),e(F,lm),e(lm,eK),e(eK,vje),e(lm,Tje),e(lm,K8),e(K8,Mje),e(lm,Eje),e(F,Cje),e(F,im),e(im,oK),e(oK,wje),e(im,Aje),e(im,Z8),e(Z8,yje),e(im,Lje),e(F,xje),e(F,dm),e(dm,rK),e(rK,kje),e(dm,Sje),e(dm,ex),e(ex,Rje),e(dm,Bje),e(F,Pje),e(F,cm),e(cm,tK),e(tK,$je),e(cm,Ije),e(cm,ox),e(ox,qje),e(cm,Nje),e(F,jje),e(F,fm),e(fm,aK),e(aK,Dje),e(fm,Gje),e(fm,rx),e(rx,Oje),e(fm,Vje),e(F,Xje),e(F,mm),e(mm,nK),e(nK,zje),e(mm,Qje),e(mm,tx),e(tx,Wje),e(mm,Hje),e(F,Uje),e(F,gm),e(gm,sK),e(sK,Jje),e(gm,Yje),e(gm,ax),e(ax,Kje),e(gm,Zje),e(F,eDe),e(F,hm),e(hm,lK),e(lK,oDe),e(hm,rDe),e(hm,nx),e(nx,tDe),e(hm,aDe),e(F,nDe),e(F,pm),e(pm,iK),e(iK,sDe),e(pm,lDe),e(pm,sx),e(sx,iDe),e(pm,dDe),e(F,cDe),e(F,_m),e(_m,dK),e(dK,fDe),e(_m,mDe),e(_m,lx),e(lx,gDe),e(_m,hDe),e(F,pDe),e(F,um),e(um,cK),e(cK,_De),e(um,uDe),e(um,ix),e(ix,bDe),e(um,FDe),e(F,vDe),e(F,bm),e(bm,fK),e(fK,TDe),e(bm,MDe),e(bm,dx),e(dx,EDe),e(bm,CDe),e(F,wDe),e(F,Fm),e(Fm,mK),e(mK,ADe),e(Fm,yDe),e(Fm,cx),e(cx,LDe),e(Fm,xDe),e(F,kDe),e(F,vm),e(vm,gK),e(gK,SDe),e(vm,RDe),e(vm,fx),e(fx,BDe),e(vm,PDe),e(F,$De),e(F,Tm),e(Tm,hK),e(hK,IDe),e(Tm,qDe),e(Tm,mx),e(mx,NDe),e(Tm,jDe),e(F,DDe),e(F,Mm),e(Mm,pK),e(pK,GDe),e(Mm,ODe),e(Mm,gx),e(gx,VDe),e(Mm,XDe),e(F,zDe),e(F,Em),e(Em,_K),e(_K,QDe),e(Em,WDe),e(Em,hx),e(hx,HDe),e(Em,UDe),e(F,JDe),e(F,Cm),e(Cm,uK),e(uK,YDe),e(Cm,KDe),e(Cm,px),e(px,ZDe),e(Cm,eGe),e(F,oGe),e(F,wm),e(wm,bK),e(bK,rGe),e(wm,tGe),e(wm,_x),e(_x,aGe),e(wm,nGe),e(F,sGe),e(F,Am),e(Am,FK),e(FK,lGe),e(Am,iGe),e(Am,ux),e(ux,dGe),e(Am,cGe),e(F,fGe),e(F,ym),e(ym,vK),e(vK,mGe),e(ym,gGe),e(ym,bx),e(bx,hGe),e(ym,pGe),e(F,_Ge),e(F,Lm),e(Lm,TK),e(TK,uGe),e(Lm,bGe),e(Lm,Fx),e(Fx,FGe),e(Lm,vGe),e(F,TGe),e(F,xm),e(xm,MK),e(MK,MGe),e(xm,EGe),e(xm,vx),e(vx,CGe),e(xm,wGe),e(F,AGe),e(F,km),e(km,EK),e(EK,yGe),e(km,LGe),e(km,Tx),e(Tx,xGe),e(km,kGe),e(F,SGe),e(F,Sm),e(Sm,CK),e(CK,RGe),e(Sm,BGe),e(Sm,Mx),e(Mx,PGe),e(Sm,$Ge),e(F,IGe),e(F,Rm),e(Rm,wK),e(wK,qGe),e(Rm,NGe),e(Rm,Ex),e(Ex,jGe),e(Rm,DGe),e(F,GGe),e(F,Bm),e(Bm,AK),e(AK,OGe),e(Bm,VGe),e(Bm,Cx),e(Cx,XGe),e(Bm,zGe),e(F,QGe),e(F,Pm),e(Pm,yK),e(yK,WGe),e(Pm,HGe),e(Pm,wx),e(wx,UGe),e(Pm,JGe),e(F,YGe),e(F,$m),e($m,LK),e(LK,KGe),e($m,ZGe),e($m,Ax),e(Ax,eOe),e($m,oOe),e(F,rOe),e(F,Im),e(Im,xK),e(xK,tOe),e(Im,aOe),e(Im,yx),e(yx,nOe),e(Im,sOe),e(F,lOe),e(F,qm),e(qm,kK),e(kK,iOe),e(qm,dOe),e(qm,Lx),e(Lx,cOe),e(qm,fOe),e(F,mOe),e(F,Nm),e(Nm,SK),e(SK,gOe),e(Nm,hOe),e(Nm,xx),e(xx,pOe),e(Nm,_Oe),e(F,uOe),e(F,jm),e(jm,RK),e(RK,bOe),e(jm,FOe),e(jm,kx),e(kx,vOe),e(jm,TOe),e(F,MOe),e(F,Dm),e(Dm,BK),e(BK,EOe),e(Dm,COe),e(Dm,Sx),e(Sx,wOe),e(Dm,AOe),e(F,yOe),e(F,Gm),e(Gm,PK),e(PK,LOe),e(Gm,xOe),e(Gm,Rx),e(Rx,kOe),e(Gm,SOe),e(F,ROe),e(F,Om),e(Om,$K),e($K,BOe),e(Om,POe),e(Om,Bx),e(Bx,$Oe),e(Om,IOe),e(F,qOe),e(F,Vm),e(Vm,IK),e(IK,NOe),e(Vm,jOe),e(Vm,Px),e(Px,DOe),e(Vm,GOe),e(F,OOe),e(F,Xm),e(Xm,qK),e(qK,VOe),e(Xm,XOe),e(Xm,$x),e($x,zOe),e(Xm,QOe),e(F,WOe),e(F,zm),e(zm,NK),e(NK,HOe),e(zm,UOe),e(zm,Ix),e(Ix,JOe),e(zm,YOe),e(F,KOe),e(F,Qm),e(Qm,jK),e(jK,ZOe),e(Qm,eVe),e(Qm,qx),e(qx,oVe),e(Qm,rVe),e(F,tVe),e(F,Wm),e(Wm,DK),e(DK,aVe),e(Wm,nVe),e(Wm,Nx),e(Nx,sVe),e(Wm,lVe),e(F,iVe),e(F,Hm),e(Hm,GK),e(GK,dVe),e(Hm,cVe),e(Hm,jx),e(jx,fVe),e(Hm,mVe),e(F,gVe),e(F,Um),e(Um,OK),e(OK,hVe),e(Um,pVe),e(Um,Dx),e(Dx,_Ve),e(Um,uVe),e(F,bVe),e(F,Jm),e(Jm,VK),e(VK,FVe),e(Jm,vVe),e(Jm,Gx),e(Gx,TVe),e(Jm,MVe),e(F,EVe),e(F,Ym),e(Ym,XK),e(XK,CVe),e(Ym,wVe),e(Ym,Ox),e(Ox,AVe),e(Ym,yVe),e(F,LVe),e(F,Km),e(Km,zK),e(zK,xVe),e(Km,kVe),e(Km,Vx),e(Vx,SVe),e(Km,RVe),e(F,BVe),e(F,Zm),e(Zm,QK),e(QK,PVe),e(Zm,$Ve),e(Zm,Xx),e(Xx,IVe),e(Zm,qVe),e(F,NVe),e(F,eg),e(eg,WK),e(WK,jVe),e(eg,DVe),e(eg,zx),e(zx,GVe),e(eg,OVe),e(F,VVe),e(F,og),e(og,HK),e(HK,XVe),e(og,zVe),e(og,Qx),e(Qx,QVe),e(og,WVe),e(F,HVe),e(F,rg),e(rg,UK),e(UK,UVe),e(rg,JVe),e(rg,Wx),e(Wx,YVe),e(rg,KVe),e(F,ZVe),e(F,tg),e(tg,JK),e(JK,eXe),e(tg,oXe),e(tg,Hx),e(Hx,rXe),e(tg,tXe),e(F,aXe),e(F,ag),e(ag,YK),e(YK,nXe),e(ag,sXe),e(ag,Ux),e(Ux,lXe),e(ag,iXe),e(F,dXe),e(F,ng),e(ng,KK),e(KK,cXe),e(ng,fXe),e(ng,Jx),e(Jx,mXe),e(ng,gXe),e(F,hXe),e(F,sg),e(sg,ZK),e(ZK,pXe),e(sg,_Xe),e(sg,Yx),e(Yx,uXe),e(sg,bXe),e(F,FXe),e(F,lg),e(lg,eZ),e(eZ,vXe),e(lg,TXe),e(lg,Kx),e(Kx,MXe),e(lg,EXe),e(F,CXe),e(F,ig),e(ig,oZ),e(oZ,wXe),e(ig,AXe),e(ig,Zx),e(Zx,yXe),e(ig,LXe),e(F,xXe),e(F,dg),e(dg,rZ),e(rZ,kXe),e(dg,SXe),e(dg,ek),e(ek,RXe),e(dg,BXe),e(F,PXe),e(F,cg),e(cg,tZ),e(tZ,$Xe),e(cg,IXe),e(cg,ok),e(ok,qXe),e(cg,NXe),e(F,jXe),e(F,fg),e(fg,aZ),e(aZ,DXe),e(fg,GXe),e(fg,rk),e(rk,OXe),e(fg,VXe),e(F,XXe),e(F,mg),e(mg,nZ),e(nZ,zXe),e(mg,QXe),e(mg,tk),e(tk,WXe),e(mg,HXe),e(F,UXe),e(F,gg),e(gg,sZ),e(sZ,JXe),e(gg,YXe),e(gg,ak),e(ak,KXe),e(gg,ZXe),e(F,eze),e(F,hg),e(hg,lZ),e(lZ,oze),e(hg,rze),e(hg,nk),e(nk,tze),e(hg,aze),e(F,nze),e(F,pg),e(pg,iZ),e(iZ,sze),e(pg,lze),e(pg,sk),e(sk,ize),e(pg,dze),e(F,cze),e(F,_g),e(_g,dZ),e(dZ,fze),e(_g,mze),e(_g,lk),e(lk,gze),e(_g,hze),e(F,pze),e(F,ug),e(ug,cZ),e(cZ,_ze),e(ug,uze),e(ug,ik),e(ik,bze),e(ug,Fze),e(F,vze),e(F,bg),e(bg,fZ),e(fZ,Tze),e(bg,Mze),e(bg,dk),e(dk,Eze),e(bg,Cze),e(F,wze),e(F,Fg),e(Fg,mZ),e(mZ,Aze),e(Fg,yze),e(Fg,ck),e(ck,Lze),e(Fg,xze),e(F,kze),e(F,vg),e(vg,gZ),e(gZ,Sze),e(vg,Rze),e(vg,fk),e(fk,Bze),e(vg,Pze),e(F,$ze),e(F,Tg),e(Tg,hZ),e(hZ,Ize),e(Tg,qze),e(Tg,mk),e(mk,Nze),e(Tg,jze),e(F,Dze),e(F,Mg),e(Mg,pZ),e(pZ,Gze),e(Mg,Oze),e(Mg,gk),e(gk,Vze),e(Mg,Xze),e(F,zze),e(F,Eg),e(Eg,_Z),e(_Z,Qze),e(Eg,Wze),e(Eg,hk),e(hk,Hze),e(Eg,Uze),e(F,Jze),e(F,Cg),e(Cg,uZ),e(uZ,Yze),e(Cg,Kze),e(Cg,pk),e(pk,Zze),e(Cg,eQe),e(F,oQe),e(F,wg),e(wg,bZ),e(bZ,rQe),e(wg,tQe),e(wg,_k),e(_k,aQe),e(wg,nQe),e(F,sQe),e(F,Ag),e(Ag,FZ),e(FZ,lQe),e(Ag,iQe),e(Ag,uk),e(uk,dQe),e(Ag,cQe),e(F,fQe),e(F,yg),e(yg,vZ),e(vZ,mQe),e(yg,gQe),e(yg,bk),e(bk,hQe),e(yg,pQe),e(F,_Qe),e(F,Lg),e(Lg,TZ),e(TZ,uQe),e(Lg,bQe),e(Lg,Fk),e(Fk,FQe),e(Lg,vQe),e(F,TQe),e(F,xg),e(xg,MZ),e(MZ,MQe),e(xg,EQe),e(xg,vk),e(vk,CQe),e(xg,wQe),e(F,AQe),e(F,kg),e(kg,EZ),e(EZ,yQe),e(kg,LQe),e(kg,Tk),e(Tk,xQe),e(kg,kQe),e(F,SQe),e(F,Sg),e(Sg,CZ),e(CZ,RQe),e(Sg,BQe),e(Sg,Mk),e(Mk,PQe),e(Sg,$Qe),e(F,IQe),e(F,Rg),e(Rg,wZ),e(wZ,qQe),e(Rg,NQe),e(Rg,Ek),e(Ek,jQe),e(Rg,DQe),e(F,GQe),e(F,Bg),e(Bg,AZ),e(AZ,OQe),e(Bg,VQe),e(Bg,Ck),e(Ck,XQe),e(Bg,zQe),e(F,QQe),e(F,Pg),e(Pg,yZ),e(yZ,WQe),e(Pg,HQe),e(Pg,wk),e(wk,UQe),e(Pg,JQe),e(F,YQe),e(F,$g),e($g,LZ),e(LZ,KQe),e($g,ZQe),e($g,Ak),e(Ak,eWe),e($g,oWe),e(F,rWe),e(F,Ig),e(Ig,xZ),e(xZ,tWe),e(Ig,aWe),e(Ig,yk),e(yk,nWe),e(Ig,sWe),e(F,lWe),e(F,qg),e(qg,kZ),e(kZ,iWe),e(qg,dWe),e(qg,Lk),e(Lk,cWe),e(qg,fWe),e(F,mWe),e(F,Ng),e(Ng,SZ),e(SZ,gWe),e(Ng,hWe),e(Ng,xk),e(xk,pWe),e(Ng,_We),e(F,uWe),e(F,jg),e(jg,RZ),e(RZ,bWe),e(jg,FWe),e(jg,kk),e(kk,vWe),e(jg,TWe),e(F,MWe),e(F,Dg),e(Dg,BZ),e(BZ,EWe),e(Dg,CWe),e(Dg,Sk),e(Sk,wWe),e(Dg,AWe),e(mo,yWe),e(mo,PZ),e(PZ,LWe),e(mo,xWe),g(W5,mo,null),e(Qo,kWe),e(Qo,Gg),g(H5,Gg,null),e(Gg,SWe),e(Gg,$Z),e($Z,RWe),b(c,bBe,u),b(c,Ui,u),e(Ui,Og),e(Og,IZ),g(U5,IZ,null),e(Ui,BWe),e(Ui,qZ),e(qZ,PWe),b(c,FBe,u),b(c,Wo,u),g(J5,Wo,null),e(Wo,$We),e(Wo,Y5),e(Y5,IWe),e(Y5,Rk),e(Rk,qWe),e(Y5,NWe),e(Wo,jWe),e(Wo,K5),e(K5,DWe),e(K5,NZ),e(NZ,GWe),e(K5,OWe),e(Wo,VWe),e(Wo,go),g(Z5,go,null),e(go,XWe),e(go,jZ),e(jZ,zWe),e(go,QWe),e(go,Oa),e(Oa,WWe),e(Oa,DZ),e(DZ,HWe),e(Oa,UWe),e(Oa,GZ),e(GZ,JWe),e(Oa,YWe),e(Oa,OZ),e(OZ,KWe),e(Oa,ZWe),e(go,eHe),e(go,E),e(E,Wn),e(Wn,VZ),e(VZ,oHe),e(Wn,rHe),e(Wn,Bk),e(Bk,tHe),e(Wn,aHe),e(Wn,Pk),e(Pk,nHe),e(Wn,sHe),e(E,lHe),e(E,Hn),e(Hn,XZ),e(XZ,iHe),e(Hn,dHe),e(Hn,$k),e($k,cHe),e(Hn,fHe),e(Hn,Ik),e(Ik,mHe),e(Hn,gHe),e(E,hHe),e(E,Un),e(Un,zZ),e(zZ,pHe),e(Un,_He),e(Un,qk),e(qk,uHe),e(Un,bHe),e(Un,Nk),e(Nk,FHe),e(Un,vHe),e(E,THe),e(E,Vg),e(Vg,QZ),e(QZ,MHe),e(Vg,EHe),e(Vg,jk),e(jk,CHe),e(Vg,wHe),e(E,AHe),e(E,Jn),e(Jn,WZ),e(WZ,yHe),e(Jn,LHe),e(Jn,Dk),e(Dk,xHe),e(Jn,kHe),e(Jn,Gk),e(Gk,SHe),e(Jn,RHe),e(E,BHe),e(E,Xg),e(Xg,HZ),e(HZ,PHe),e(Xg,$He),e(Xg,Ok),e(Ok,IHe),e(Xg,qHe),e(E,NHe),e(E,zg),e(zg,UZ),e(UZ,jHe),e(zg,DHe),e(zg,Vk),e(Vk,GHe),e(zg,OHe),e(E,VHe),e(E,Qg),e(Qg,JZ),e(JZ,XHe),e(Qg,zHe),e(Qg,Xk),e(Xk,QHe),e(Qg,WHe),e(E,HHe),e(E,Yn),e(Yn,YZ),e(YZ,UHe),e(Yn,JHe),e(Yn,zk),e(zk,YHe),e(Yn,KHe),e(Yn,Qk),e(Qk,ZHe),e(Yn,eUe),e(E,oUe),e(E,Kn),e(Kn,KZ),e(KZ,rUe),e(Kn,tUe),e(Kn,Wk),e(Wk,aUe),e(Kn,nUe),e(Kn,Hk),e(Hk,sUe),e(Kn,lUe),e(E,iUe),e(E,Zn),e(Zn,ZZ),e(ZZ,dUe),e(Zn,cUe),e(Zn,Uk),e(Uk,fUe),e(Zn,mUe),e(Zn,Jk),e(Jk,gUe),e(Zn,hUe),e(E,pUe),e(E,Wg),e(Wg,eee),e(eee,_Ue),e(Wg,uUe),e(Wg,Yk),e(Yk,bUe),e(Wg,FUe),e(E,vUe),e(E,Hg),e(Hg,oee),e(oee,TUe),e(Hg,MUe),e(Hg,Kk),e(Kk,EUe),e(Hg,CUe),e(E,wUe),e(E,es),e(es,ree),e(ree,AUe),e(es,yUe),e(es,Zk),e(Zk,LUe),e(es,xUe),e(es,eS),e(eS,kUe),e(es,SUe),e(E,RUe),e(E,Ug),e(Ug,tee),e(tee,BUe),e(Ug,PUe),e(Ug,oS),e(oS,$Ue),e(Ug,IUe),e(E,qUe),e(E,os),e(os,aee),e(aee,NUe),e(os,jUe),e(os,rS),e(rS,DUe),e(os,GUe),e(os,tS),e(tS,OUe),e(os,VUe),e(E,XUe),e(E,rs),e(rs,nee),e(nee,zUe),e(rs,QUe),e(rs,aS),e(aS,WUe),e(rs,HUe),e(rs,nS),e(nS,UUe),e(rs,JUe),e(E,YUe),e(E,ts),e(ts,see),e(see,KUe),e(ts,ZUe),e(ts,sS),e(sS,eJe),e(ts,oJe),e(ts,lee),e(lee,rJe),e(ts,tJe),e(E,aJe),e(E,Jg),e(Jg,iee),e(iee,nJe),e(Jg,sJe),e(Jg,lS),e(lS,lJe),e(Jg,iJe),e(E,dJe),e(E,as),e(as,dee),e(dee,cJe),e(as,fJe),e(as,iS),e(iS,mJe),e(as,gJe),e(as,dS),e(dS,hJe),e(as,pJe),e(E,_Je),e(E,ns),e(ns,cee),e(cee,uJe),e(ns,bJe),e(ns,cS),e(cS,FJe),e(ns,vJe),e(ns,fS),e(fS,TJe),e(ns,MJe),e(E,EJe),e(E,ss),e(ss,fee),e(fee,CJe),e(ss,wJe),e(ss,mS),e(mS,AJe),e(ss,yJe),e(ss,gS),e(gS,LJe),e(ss,xJe),e(E,kJe),e(E,ls),e(ls,mee),e(mee,SJe),e(ls,RJe),e(ls,hS),e(hS,BJe),e(ls,PJe),e(ls,pS),e(pS,$Je),e(ls,IJe),e(E,qJe),e(E,is),e(is,gee),e(gee,NJe),e(is,jJe),e(is,_S),e(_S,DJe),e(is,GJe),e(is,uS),e(uS,OJe),e(is,VJe),e(E,XJe),e(E,Yg),e(Yg,hee),e(hee,zJe),e(Yg,QJe),e(Yg,bS),e(bS,WJe),e(Yg,HJe),e(E,UJe),e(E,ds),e(ds,pee),e(pee,JJe),e(ds,YJe),e(ds,FS),e(FS,KJe),e(ds,ZJe),e(ds,vS),e(vS,eYe),e(ds,oYe),e(E,rYe),e(E,Kg),e(Kg,_ee),e(_ee,tYe),e(Kg,aYe),e(Kg,TS),e(TS,nYe),e(Kg,sYe),e(E,lYe),e(E,cs),e(cs,uee),e(uee,iYe),e(cs,dYe),e(cs,MS),e(MS,cYe),e(cs,fYe),e(cs,ES),e(ES,mYe),e(cs,gYe),e(E,hYe),e(E,fs),e(fs,bee),e(bee,pYe),e(fs,_Ye),e(fs,CS),e(CS,uYe),e(fs,bYe),e(fs,wS),e(wS,FYe),e(fs,vYe),e(E,TYe),e(E,ms),e(ms,Fee),e(Fee,MYe),e(ms,EYe),e(ms,AS),e(AS,CYe),e(ms,wYe),e(ms,yS),e(yS,AYe),e(ms,yYe),e(E,LYe),e(E,gs),e(gs,vee),e(vee,xYe),e(gs,kYe),e(gs,LS),e(LS,SYe),e(gs,RYe),e(gs,xS),e(xS,BYe),e(gs,PYe),e(E,$Ye),e(E,Zg),e(Zg,Tee),e(Tee,IYe),e(Zg,qYe),e(Zg,kS),e(kS,NYe),e(Zg,jYe),e(E,DYe),e(E,hs),e(hs,Mee),e(Mee,GYe),e(hs,OYe),e(hs,SS),e(SS,VYe),e(hs,XYe),e(hs,RS),e(RS,zYe),e(hs,QYe),e(E,WYe),e(E,ps),e(ps,Eee),e(Eee,HYe),e(ps,UYe),e(ps,BS),e(BS,JYe),e(ps,YYe),e(ps,PS),e(PS,KYe),e(ps,ZYe),e(E,eKe),e(E,_s),e(_s,Cee),e(Cee,oKe),e(_s,rKe),e(_s,$S),e($S,tKe),e(_s,aKe),e(_s,IS),e(IS,nKe),e(_s,sKe),e(E,lKe),e(E,us),e(us,wee),e(wee,iKe),e(us,dKe),e(us,qS),e(qS,cKe),e(us,fKe),e(us,NS),e(NS,mKe),e(us,gKe),e(E,hKe),e(E,bs),e(bs,Aee),e(Aee,pKe),e(bs,_Ke),e(bs,jS),e(jS,uKe),e(bs,bKe),e(bs,DS),e(DS,FKe),e(bs,vKe),e(E,TKe),e(E,Fs),e(Fs,yee),e(yee,MKe),e(Fs,EKe),e(Fs,GS),e(GS,CKe),e(Fs,wKe),e(Fs,OS),e(OS,AKe),e(Fs,yKe),e(E,LKe),e(E,vs),e(vs,Lee),e(Lee,xKe),e(vs,kKe),e(vs,VS),e(VS,SKe),e(vs,RKe),e(vs,XS),e(XS,BKe),e(vs,PKe),e(E,$Ke),e(E,eh),e(eh,xee),e(xee,IKe),e(eh,qKe),e(eh,zS),e(zS,NKe),e(eh,jKe),e(E,DKe),e(E,Ts),e(Ts,kee),e(kee,GKe),e(Ts,OKe),e(Ts,QS),e(QS,VKe),e(Ts,XKe),e(Ts,WS),e(WS,zKe),e(Ts,QKe),e(E,WKe),e(E,oh),e(oh,See),e(See,HKe),e(oh,UKe),e(oh,HS),e(HS,JKe),e(oh,YKe),e(E,KKe),e(E,rh),e(rh,Ree),e(Ree,ZKe),e(rh,eZe),e(rh,US),e(US,oZe),e(rh,rZe),e(E,tZe),e(E,Ms),e(Ms,Bee),e(Bee,aZe),e(Ms,nZe),e(Ms,JS),e(JS,sZe),e(Ms,lZe),e(Ms,YS),e(YS,iZe),e(Ms,dZe),e(E,cZe),e(E,Es),e(Es,Pee),e(Pee,fZe),e(Es,mZe),e(Es,KS),e(KS,gZe),e(Es,hZe),e(Es,ZS),e(ZS,pZe),e(Es,_Ze),e(E,uZe),e(E,th),e(th,$ee),e($ee,bZe),e(th,FZe),e(th,eR),e(eR,vZe),e(th,TZe),e(E,MZe),e(E,Cs),e(Cs,Iee),e(Iee,EZe),e(Cs,CZe),e(Cs,oR),e(oR,wZe),e(Cs,AZe),e(Cs,rR),e(rR,yZe),e(Cs,LZe),e(E,xZe),e(E,ws),e(ws,qee),e(qee,kZe),e(ws,SZe),e(ws,tR),e(tR,RZe),e(ws,BZe),e(ws,aR),e(aR,PZe),e(ws,$Ze),e(E,IZe),e(E,As),e(As,Nee),e(Nee,qZe),e(As,NZe),e(As,nR),e(nR,jZe),e(As,DZe),e(As,sR),e(sR,GZe),e(As,OZe),e(E,VZe),e(E,ys),e(ys,jee),e(jee,XZe),e(ys,zZe),e(ys,lR),e(lR,QZe),e(ys,WZe),e(ys,iR),e(iR,HZe),e(ys,UZe),e(E,JZe),e(E,Ls),e(Ls,Dee),e(Dee,YZe),e(Ls,KZe),e(Ls,dR),e(dR,ZZe),e(Ls,eeo),e(Ls,cR),e(cR,oeo),e(Ls,reo),e(E,teo),e(E,ah),e(ah,Gee),e(Gee,aeo),e(ah,neo),e(ah,fR),e(fR,seo),e(ah,leo),e(E,ieo),e(E,nh),e(nh,Oee),e(Oee,deo),e(nh,ceo),e(nh,mR),e(mR,feo),e(nh,meo),e(E,geo),e(E,sh),e(sh,Vee),e(Vee,heo),e(sh,peo),e(sh,gR),e(gR,_eo),e(sh,ueo),e(E,beo),e(E,lh),e(lh,Xee),e(Xee,Feo),e(lh,veo),e(lh,hR),e(hR,Teo),e(lh,Meo),e(E,Eeo),e(E,xs),e(xs,zee),e(zee,Ceo),e(xs,weo),e(xs,pR),e(pR,Aeo),e(xs,yeo),e(xs,_R),e(_R,Leo),e(xs,xeo),e(E,keo),e(E,ih),e(ih,Qee),e(Qee,Seo),e(ih,Reo),e(ih,uR),e(uR,Beo),e(ih,Peo),e(E,$eo),e(E,ks),e(ks,Wee),e(Wee,Ieo),e(ks,qeo),e(ks,bR),e(bR,Neo),e(ks,jeo),e(ks,FR),e(FR,Deo),e(ks,Geo),e(E,Oeo),e(E,Ss),e(Ss,Hee),e(Hee,Veo),e(Ss,Xeo),e(Ss,vR),e(vR,zeo),e(Ss,Qeo),e(Ss,TR),e(TR,Weo),e(Ss,Heo),e(E,Ueo),e(E,Rs),e(Rs,Uee),e(Uee,Jeo),e(Rs,Yeo),e(Rs,MR),e(MR,Keo),e(Rs,Zeo),e(Rs,ER),e(ER,eoo),e(Rs,ooo),e(E,roo),e(E,Bs),e(Bs,Jee),e(Jee,too),e(Bs,aoo),e(Bs,CR),e(CR,noo),e(Bs,soo),e(Bs,wR),e(wR,loo),e(Bs,ioo),e(E,doo),e(E,Ps),e(Ps,Yee),e(Yee,coo),e(Ps,foo),e(Ps,AR),e(AR,moo),e(Ps,goo),e(Ps,yR),e(yR,hoo),e(Ps,poo),e(E,_oo),e(E,$s),e($s,Kee),e(Kee,uoo),e($s,boo),e($s,LR),e(LR,Foo),e($s,voo),e($s,xR),e(xR,Too),e($s,Moo),e(E,Eoo),e(E,dh),e(dh,Zee),e(Zee,Coo),e(dh,woo),e(dh,kR),e(kR,Aoo),e(dh,yoo),e(E,Loo),e(E,ch),e(ch,eoe),e(eoe,xoo),e(ch,koo),e(ch,SR),e(SR,Soo),e(ch,Roo),e(E,Boo),e(E,Is),e(Is,ooe),e(ooe,Poo),e(Is,$oo),e(Is,RR),e(RR,Ioo),e(Is,qoo),e(Is,BR),e(BR,Noo),e(Is,joo),e(E,Doo),e(E,qs),e(qs,roe),e(roe,Goo),e(qs,Ooo),e(qs,PR),e(PR,Voo),e(qs,Xoo),e(qs,$R),e($R,zoo),e(qs,Qoo),e(E,Woo),e(E,Ns),e(Ns,toe),e(toe,Hoo),e(Ns,Uoo),e(Ns,IR),e(IR,Joo),e(Ns,Yoo),e(Ns,qR),e(qR,Koo),e(Ns,Zoo),e(E,ero),e(E,fh),e(fh,aoe),e(aoe,oro),e(fh,rro),e(fh,NR),e(NR,tro),e(fh,aro),e(E,nro),e(E,mh),e(mh,noe),e(noe,sro),e(mh,lro),e(mh,jR),e(jR,iro),e(mh,dro),e(E,cro),e(E,gh),e(gh,soe),e(soe,fro),e(gh,mro),e(gh,DR),e(DR,gro),e(gh,hro),e(E,pro),e(E,hh),e(hh,loe),e(loe,_ro),e(hh,uro),e(hh,GR),e(GR,bro),e(hh,Fro),e(E,vro),e(E,ph),e(ph,ioe),e(ioe,Tro),e(ph,Mro),e(ph,OR),e(OR,Ero),e(ph,Cro),e(E,wro),e(E,js),e(js,doe),e(doe,Aro),e(js,yro),e(js,VR),e(VR,Lro),e(js,xro),e(js,XR),e(XR,kro),e(js,Sro),e(E,Rro),e(E,_h),e(_h,coe),e(coe,Bro),e(_h,Pro),e(_h,zR),e(zR,$ro),e(_h,Iro),e(E,qro),e(E,uh),e(uh,foe),e(foe,Nro),e(uh,jro),e(uh,QR),e(QR,Dro),e(uh,Gro),e(E,Oro),e(E,Ds),e(Ds,moe),e(moe,Vro),e(Ds,Xro),e(Ds,WR),e(WR,zro),e(Ds,Qro),e(Ds,HR),e(HR,Wro),e(Ds,Hro),e(E,Uro),e(E,Gs),e(Gs,goe),e(goe,Jro),e(Gs,Yro),e(Gs,UR),e(UR,Kro),e(Gs,Zro),e(Gs,JR),e(JR,eto),e(Gs,oto),e(go,rto),e(go,hoe),e(hoe,tto),e(go,ato),g(e3,go,null),e(Wo,nto),e(Wo,bh),g(o3,bh,null),e(bh,sto),e(bh,poe),e(poe,lto),b(c,vBe,u),b(c,Ji,u),e(Ji,Fh),e(Fh,_oe),g(r3,_oe,null),e(Ji,ito),e(Ji,uoe),e(uoe,dto),b(c,TBe,u),b(c,Ho,u),g(t3,Ho,null),e(Ho,cto),e(Ho,a3),e(a3,fto),e(a3,YR),e(YR,mto),e(a3,gto),e(Ho,hto),e(Ho,n3),e(n3,pto),e(n3,boe),e(boe,_to),e(n3,uto),e(Ho,bto),e(Ho,Ie),g(s3,Ie,null),e(Ie,Fto),e(Ie,Foe),e(Foe,vto),e(Ie,Tto),e(Ie,Va),e(Va,Mto),e(Va,voe),e(voe,Eto),e(Va,Cto),e(Va,Toe),e(Toe,wto),e(Va,Ato),e(Va,Moe),e(Moe,yto),e(Va,Lto),e(Ie,xto),e(Ie,ee),e(ee,vh),e(vh,Eoe),e(Eoe,kto),e(vh,Sto),e(vh,KR),e(KR,Rto),e(vh,Bto),e(ee,Pto),e(ee,Th),e(Th,Coe),e(Coe,$to),e(Th,Ito),e(Th,ZR),e(ZR,qto),e(Th,Nto),e(ee,jto),e(ee,Mh),e(Mh,woe),e(woe,Dto),e(Mh,Gto),e(Mh,eB),e(eB,Oto),e(Mh,Vto),e(ee,Xto),e(ee,Eh),e(Eh,Aoe),e(Aoe,zto),e(Eh,Qto),e(Eh,oB),e(oB,Wto),e(Eh,Hto),e(ee,Uto),e(ee,Ch),e(Ch,yoe),e(yoe,Jto),e(Ch,Yto),e(Ch,rB),e(rB,Kto),e(Ch,Zto),e(ee,eao),e(ee,wh),e(wh,Loe),e(Loe,oao),e(wh,rao),e(wh,tB),e(tB,tao),e(wh,aao),e(ee,nao),e(ee,Ah),e(Ah,xoe),e(xoe,sao),e(Ah,lao),e(Ah,aB),e(aB,iao),e(Ah,dao),e(ee,cao),e(ee,yh),e(yh,koe),e(koe,fao),e(yh,mao),e(yh,nB),e(nB,gao),e(yh,hao),e(ee,pao),e(ee,Lh),e(Lh,Soe),e(Soe,_ao),e(Lh,uao),e(Lh,sB),e(sB,bao),e(Lh,Fao),e(ee,vao),e(ee,xh),e(xh,Roe),e(Roe,Tao),e(xh,Mao),e(xh,lB),e(lB,Eao),e(xh,Cao),e(ee,wao),e(ee,kh),e(kh,Boe),e(Boe,Aao),e(kh,yao),e(kh,iB),e(iB,Lao),e(kh,xao),e(ee,kao),e(ee,Sh),e(Sh,Poe),e(Poe,Sao),e(Sh,Rao),e(Sh,dB),e(dB,Bao),e(Sh,Pao),e(ee,$ao),e(ee,Rh),e(Rh,$oe),e($oe,Iao),e(Rh,qao),e(Rh,cB),e(cB,Nao),e(Rh,jao),e(ee,Dao),e(ee,Bh),e(Bh,Ioe),e(Ioe,Gao),e(Bh,Oao),e(Bh,fB),e(fB,Vao),e(Bh,Xao),e(ee,zao),e(ee,Ph),e(Ph,qoe),e(qoe,Qao),e(Ph,Wao),e(Ph,mB),e(mB,Hao),e(Ph,Uao),e(ee,Jao),e(ee,$h),e($h,Noe),e(Noe,Yao),e($h,Kao),e($h,gB),e(gB,Zao),e($h,eno),e(ee,ono),e(ee,Ih),e(Ih,joe),e(joe,rno),e(Ih,tno),e(Ih,hB),e(hB,ano),e(Ih,nno),e(ee,sno),e(ee,qh),e(qh,Doe),e(Doe,lno),e(qh,ino),e(qh,pB),e(pB,dno),e(qh,cno),e(ee,fno),e(ee,Nh),e(Nh,Goe),e(Goe,mno),e(Nh,gno),e(Nh,_B),e(_B,hno),e(Nh,pno),e(Ie,_no),g(jh,Ie,null),e(Ie,uno),e(Ie,Ooe),e(Ooe,bno),e(Ie,Fno),g(l3,Ie,null),e(Ho,vno),e(Ho,Dh),g(i3,Dh,null),e(Dh,Tno),e(Dh,Voe),e(Voe,Mno),b(c,MBe,u),b(c,Yi,u),e(Yi,Gh),e(Gh,Xoe),g(d3,Xoe,null),e(Yi,Eno),e(Yi,zoe),e(zoe,Cno),b(c,EBe,u),b(c,Uo,u),g(c3,Uo,null),e(Uo,wno),e(Uo,f3),e(f3,Ano),e(f3,uB),e(uB,yno),e(f3,Lno),e(Uo,xno),e(Uo,m3),e(m3,kno),e(m3,Qoe),e(Qoe,Sno),e(m3,Rno),e(Uo,Bno),e(Uo,qe),g(g3,qe,null),e(qe,Pno),e(qe,Woe),e(Woe,$no),e(qe,Ino),e(qe,Ki),e(Ki,qno),e(Ki,Hoe),e(Hoe,Nno),e(Ki,jno),e(Ki,Uoe),e(Uoe,Dno),e(Ki,Gno),e(qe,Ono),e(qe,Se),e(Se,Oh),e(Oh,Joe),e(Joe,Vno),e(Oh,Xno),e(Oh,bB),e(bB,zno),e(Oh,Qno),e(Se,Wno),e(Se,Vh),e(Vh,Yoe),e(Yoe,Hno),e(Vh,Uno),e(Vh,FB),e(FB,Jno),e(Vh,Yno),e(Se,Kno),e(Se,Xh),e(Xh,Koe),e(Koe,Zno),e(Xh,eso),e(Xh,vB),e(vB,oso),e(Xh,rso),e(Se,tso),e(Se,zh),e(zh,Zoe),e(Zoe,aso),e(zh,nso),e(zh,TB),e(TB,sso),e(zh,lso),e(Se,iso),e(Se,Qh),e(Qh,ere),e(ere,dso),e(Qh,cso),e(Qh,MB),e(MB,fso),e(Qh,mso),e(Se,gso),e(Se,Wh),e(Wh,ore),e(ore,hso),e(Wh,pso),e(Wh,EB),e(EB,_so),e(Wh,uso),e(Se,bso),e(Se,Hh),e(Hh,rre),e(rre,Fso),e(Hh,vso),e(Hh,CB),e(CB,Tso),e(Hh,Mso),e(Se,Eso),e(Se,Uh),e(Uh,tre),e(tre,Cso),e(Uh,wso),e(Uh,wB),e(wB,Aso),e(Uh,yso),e(qe,Lso),g(Jh,qe,null),e(qe,xso),e(qe,are),e(are,kso),e(qe,Sso),g(h3,qe,null),e(Uo,Rso),e(Uo,Yh),g(p3,Yh,null),e(Yh,Bso),e(Yh,nre),e(nre,Pso),b(c,CBe,u),b(c,Zi,u),e(Zi,Kh),e(Kh,sre),g(_3,sre,null),e(Zi,$so),e(Zi,lre),e(lre,Iso),b(c,wBe,u),b(c,Jo,u),g(u3,Jo,null),e(Jo,qso),e(Jo,ed),e(ed,Nso),e(ed,AB),e(AB,jso),e(ed,Dso),e(ed,yB),e(yB,Gso),e(ed,Oso),e(Jo,Vso),e(Jo,b3),e(b3,Xso),e(b3,ire),e(ire,zso),e(b3,Qso),e(Jo,Wso),e(Jo,Xr),g(F3,Xr,null),e(Xr,Hso),e(Xr,dre),e(dre,Uso),e(Xr,Jso),e(Xr,od),e(od,Yso),e(od,cre),e(cre,Kso),e(od,Zso),e(od,LB),e(LB,elo),e(od,olo),e(Xr,rlo),e(Xr,fre),e(fre,tlo),e(Xr,alo),g(v3,Xr,null),e(Jo,nlo),e(Jo,Ne),g(T3,Ne,null),e(Ne,slo),e(Ne,mre),e(mre,llo),e(Ne,ilo),e(Ne,Xa),e(Xa,dlo),e(Xa,gre),e(gre,clo),e(Xa,flo),e(Xa,hre),e(hre,mlo),e(Xa,glo),e(Xa,pre),e(pre,hlo),e(Xa,plo),e(Ne,_lo),e(Ne,T),e(T,Zh),e(Zh,_re),e(_re,ulo),e(Zh,blo),e(Zh,xB),e(xB,Flo),e(Zh,vlo),e(T,Tlo),e(T,ep),e(ep,ure),e(ure,Mlo),e(ep,Elo),e(ep,kB),e(kB,Clo),e(ep,wlo),e(T,Alo),e(T,op),e(op,bre),e(bre,ylo),e(op,Llo),e(op,SB),e(SB,xlo),e(op,klo),e(T,Slo),e(T,rp),e(rp,Fre),e(Fre,Rlo),e(rp,Blo),e(rp,RB),e(RB,Plo),e(rp,$lo),e(T,Ilo),e(T,tp),e(tp,vre),e(vre,qlo),e(tp,Nlo),e(tp,BB),e(BB,jlo),e(tp,Dlo),e(T,Glo),e(T,ap),e(ap,Tre),e(Tre,Olo),e(ap,Vlo),e(ap,PB),e(PB,Xlo),e(ap,zlo),e(T,Qlo),e(T,np),e(np,Mre),e(Mre,Wlo),e(np,Hlo),e(np,$B),e($B,Ulo),e(np,Jlo),e(T,Ylo),e(T,sp),e(sp,Ere),e(Ere,Klo),e(sp,Zlo),e(sp,IB),e(IB,eio),e(sp,oio),e(T,rio),e(T,lp),e(lp,Cre),e(Cre,tio),e(lp,aio),e(lp,qB),e(qB,nio),e(lp,sio),e(T,lio),e(T,ip),e(ip,wre),e(wre,iio),e(ip,dio),e(ip,NB),e(NB,cio),e(ip,fio),e(T,mio),e(T,dp),e(dp,Are),e(Are,gio),e(dp,hio),e(dp,jB),e(jB,pio),e(dp,_io),e(T,uio),e(T,cp),e(cp,yre),e(yre,bio),e(cp,Fio),e(cp,DB),e(DB,vio),e(cp,Tio),e(T,Mio),e(T,fp),e(fp,Lre),e(Lre,Eio),e(fp,Cio),e(fp,GB),e(GB,wio),e(fp,Aio),e(T,yio),e(T,mp),e(mp,xre),e(xre,Lio),e(mp,xio),e(mp,OB),e(OB,kio),e(mp,Sio),e(T,Rio),e(T,gp),e(gp,kre),e(kre,Bio),e(gp,Pio),e(gp,VB),e(VB,$io),e(gp,Iio),e(T,qio),e(T,hp),e(hp,Sre),e(Sre,Nio),e(hp,jio),e(hp,XB),e(XB,Dio),e(hp,Gio),e(T,Oio),e(T,pp),e(pp,Rre),e(Rre,Vio),e(pp,Xio),e(pp,zB),e(zB,zio),e(pp,Qio),e(T,Wio),e(T,_p),e(_p,Bre),e(Bre,Hio),e(_p,Uio),e(_p,QB),e(QB,Jio),e(_p,Yio),e(T,Kio),e(T,up),e(up,Pre),e(Pre,Zio),e(up,edo),e(up,WB),e(WB,odo),e(up,rdo),e(T,tdo),e(T,bp),e(bp,$re),e($re,ado),e(bp,ndo),e(bp,HB),e(HB,sdo),e(bp,ldo),e(T,ido),e(T,Fp),e(Fp,Ire),e(Ire,ddo),e(Fp,cdo),e(Fp,UB),e(UB,fdo),e(Fp,mdo),e(T,gdo),e(T,vp),e(vp,qre),e(qre,hdo),e(vp,pdo),e(vp,JB),e(JB,_do),e(vp,udo),e(T,bdo),e(T,Tp),e(Tp,Nre),e(Nre,Fdo),e(Tp,vdo),e(Tp,YB),e(YB,Tdo),e(Tp,Mdo),e(T,Edo),e(T,Mp),e(Mp,jre),e(jre,Cdo),e(Mp,wdo),e(Mp,KB),e(KB,Ado),e(Mp,ydo),e(T,Ldo),e(T,Ep),e(Ep,Dre),e(Dre,xdo),e(Ep,kdo),e(Ep,ZB),e(ZB,Sdo),e(Ep,Rdo),e(T,Bdo),e(T,Cp),e(Cp,Gre),e(Gre,Pdo),e(Cp,$do),e(Cp,eP),e(eP,Ido),e(Cp,qdo),e(T,Ndo),e(T,wp),e(wp,Ore),e(Ore,jdo),e(wp,Ddo),e(wp,oP),e(oP,Gdo),e(wp,Odo),e(T,Vdo),e(T,Ap),e(Ap,Vre),e(Vre,Xdo),e(Ap,zdo),e(Ap,rP),e(rP,Qdo),e(Ap,Wdo),e(T,Hdo),e(T,yp),e(yp,Xre),e(Xre,Udo),e(yp,Jdo),e(yp,tP),e(tP,Ydo),e(yp,Kdo),e(T,Zdo),e(T,Lp),e(Lp,zre),e(zre,eco),e(Lp,oco),e(Lp,aP),e(aP,rco),e(Lp,tco),e(T,aco),e(T,Os),e(Os,Qre),e(Qre,nco),e(Os,sco),e(Os,nP),e(nP,lco),e(Os,ico),e(Os,sP),e(sP,dco),e(Os,cco),e(T,fco),e(T,xp),e(xp,Wre),e(Wre,mco),e(xp,gco),e(xp,lP),e(lP,hco),e(xp,pco),e(T,_co),e(T,kp),e(kp,Hre),e(Hre,uco),e(kp,bco),e(kp,iP),e(iP,Fco),e(kp,vco),e(T,Tco),e(T,Sp),e(Sp,Ure),e(Ure,Mco),e(Sp,Eco),e(Sp,dP),e(dP,Cco),e(Sp,wco),e(T,Aco),e(T,Rp),e(Rp,Jre),e(Jre,yco),e(Rp,Lco),e(Rp,cP),e(cP,xco),e(Rp,kco),e(T,Sco),e(T,Bp),e(Bp,Yre),e(Yre,Rco),e(Bp,Bco),e(Bp,fP),e(fP,Pco),e(Bp,$co),e(T,Ico),e(T,Pp),e(Pp,Kre),e(Kre,qco),e(Pp,Nco),e(Pp,mP),e(mP,jco),e(Pp,Dco),e(T,Gco),e(T,$p),e($p,Zre),e(Zre,Oco),e($p,Vco),e($p,gP),e(gP,Xco),e($p,zco),e(T,Qco),e(T,Ip),e(Ip,ete),e(ete,Wco),e(Ip,Hco),e(Ip,hP),e(hP,Uco),e(Ip,Jco),e(T,Yco),e(T,qp),e(qp,ote),e(ote,Kco),e(qp,Zco),e(qp,pP),e(pP,efo),e(qp,ofo),e(T,rfo),e(T,Np),e(Np,rte),e(rte,tfo),e(Np,afo),e(Np,_P),e(_P,nfo),e(Np,sfo),e(T,lfo),e(T,jp),e(jp,tte),e(tte,ifo),e(jp,dfo),e(jp,uP),e(uP,cfo),e(jp,ffo),e(T,mfo),e(T,Dp),e(Dp,ate),e(ate,gfo),e(Dp,hfo),e(Dp,bP),e(bP,pfo),e(Dp,_fo),e(T,ufo),e(T,Gp),e(Gp,nte),e(nte,bfo),e(Gp,Ffo),e(Gp,FP),e(FP,vfo),e(Gp,Tfo),e(T,Mfo),e(T,Op),e(Op,ste),e(ste,Efo),e(Op,Cfo),e(Op,vP),e(vP,wfo),e(Op,Afo),e(T,yfo),e(T,Vp),e(Vp,lte),e(lte,Lfo),e(Vp,xfo),e(Vp,TP),e(TP,kfo),e(Vp,Sfo),e(T,Rfo),e(T,Xp),e(Xp,ite),e(ite,Bfo),e(Xp,Pfo),e(Xp,MP),e(MP,$fo),e(Xp,Ifo),e(T,qfo),e(T,zp),e(zp,dte),e(dte,Nfo),e(zp,jfo),e(zp,EP),e(EP,Dfo),e(zp,Gfo),e(T,Ofo),e(T,Qp),e(Qp,cte),e(cte,Vfo),e(Qp,Xfo),e(Qp,CP),e(CP,zfo),e(Qp,Qfo),e(T,Wfo),e(T,Wp),e(Wp,fte),e(fte,Hfo),e(Wp,Ufo),e(Wp,wP),e(wP,Jfo),e(Wp,Yfo),e(T,Kfo),e(T,Hp),e(Hp,mte),e(mte,Zfo),e(Hp,emo),e(Hp,AP),e(AP,omo),e(Hp,rmo),e(T,tmo),e(T,Up),e(Up,gte),e(gte,amo),e(Up,nmo),e(Up,yP),e(yP,smo),e(Up,lmo),e(T,imo),e(T,Jp),e(Jp,hte),e(hte,dmo),e(Jp,cmo),e(Jp,LP),e(LP,fmo),e(Jp,mmo),e(T,gmo),e(T,Yp),e(Yp,pte),e(pte,hmo),e(Yp,pmo),e(Yp,xP),e(xP,_mo),e(Yp,umo),e(T,bmo),e(T,Kp),e(Kp,_te),e(_te,Fmo),e(Kp,vmo),e(Kp,kP),e(kP,Tmo),e(Kp,Mmo),e(T,Emo),e(T,Zp),e(Zp,ute),e(ute,Cmo),e(Zp,wmo),e(Zp,SP),e(SP,Amo),e(Zp,ymo),e(T,Lmo),e(T,e_),e(e_,bte),e(bte,xmo),e(e_,kmo),e(e_,RP),e(RP,Smo),e(e_,Rmo),e(T,Bmo),e(T,o_),e(o_,Fte),e(Fte,Pmo),e(o_,$mo),e(o_,BP),e(BP,Imo),e(o_,qmo),e(T,Nmo),e(T,r_),e(r_,vte),e(vte,jmo),e(r_,Dmo),e(r_,PP),e(PP,Gmo),e(r_,Omo),e(T,Vmo),e(T,t_),e(t_,Tte),e(Tte,Xmo),e(t_,zmo),e(t_,$P),e($P,Qmo),e(t_,Wmo),e(T,Hmo),e(T,a_),e(a_,Mte),e(Mte,Umo),e(a_,Jmo),e(a_,IP),e(IP,Ymo),e(a_,Kmo),e(T,Zmo),e(T,n_),e(n_,Ete),e(Ete,ego),e(n_,ogo),e(n_,qP),e(qP,rgo),e(n_,tgo),e(T,ago),e(T,s_),e(s_,Cte),e(Cte,ngo),e(s_,sgo),e(s_,NP),e(NP,lgo),e(s_,igo),e(T,dgo),e(T,l_),e(l_,wte),e(wte,cgo),e(l_,fgo),e(l_,jP),e(jP,mgo),e(l_,ggo),e(T,hgo),e(T,i_),e(i_,Ate),e(Ate,pgo),e(i_,_go),e(i_,DP),e(DP,ugo),e(i_,bgo),e(T,Fgo),e(T,d_),e(d_,yte),e(yte,vgo),e(d_,Tgo),e(d_,GP),e(GP,Mgo),e(d_,Ego),e(T,Cgo),e(T,c_),e(c_,Lte),e(Lte,wgo),e(c_,Ago),e(c_,OP),e(OP,ygo),e(c_,Lgo),e(T,xgo),e(T,f_),e(f_,xte),e(xte,kgo),e(f_,Sgo),e(f_,VP),e(VP,Rgo),e(f_,Bgo),e(T,Pgo),e(T,m_),e(m_,kte),e(kte,$go),e(m_,Igo),e(m_,XP),e(XP,qgo),e(m_,Ngo),e(T,jgo),e(T,g_),e(g_,Ste),e(Ste,Dgo),e(g_,Ggo),e(g_,zP),e(zP,Ogo),e(g_,Vgo),e(T,Xgo),e(T,h_),e(h_,Rte),e(Rte,zgo),e(h_,Qgo),e(h_,QP),e(QP,Wgo),e(h_,Hgo),e(T,Ugo),e(T,p_),e(p_,Bte),e(Bte,Jgo),e(p_,Ygo),e(p_,WP),e(WP,Kgo),e(p_,Zgo),e(T,eho),e(T,__),e(__,Pte),e(Pte,oho),e(__,rho),e(__,HP),e(HP,tho),e(__,aho),e(T,nho),e(T,u_),e(u_,$te),e($te,sho),e(u_,lho),e(u_,UP),e(UP,iho),e(u_,dho),e(T,cho),e(T,b_),e(b_,Ite),e(Ite,fho),e(b_,mho),e(b_,JP),e(JP,gho),e(b_,hho),e(T,pho),e(T,F_),e(F_,qte),e(qte,_ho),e(F_,uho),e(F_,YP),e(YP,bho),e(F_,Fho),e(T,vho),e(T,v_),e(v_,Nte),e(Nte,Tho),e(v_,Mho),e(v_,KP),e(KP,Eho),e(v_,Cho),e(T,who),e(T,T_),e(T_,jte),e(jte,Aho),e(T_,yho),e(T_,ZP),e(ZP,Lho),e(T_,xho),e(T,kho),e(T,M_),e(M_,Dte),e(Dte,Sho),e(M_,Rho),e(M_,e$),e(e$,Bho),e(M_,Pho),e(T,$ho),e(T,E_),e(E_,Gte),e(Gte,Iho),e(E_,qho),e(E_,o$),e(o$,Nho),e(E_,jho),e(T,Dho),e(T,C_),e(C_,Ote),e(Ote,Gho),e(C_,Oho),e(C_,r$),e(r$,Vho),e(C_,Xho),e(T,zho),e(T,w_),e(w_,Vte),e(Vte,Qho),e(w_,Who),e(w_,t$),e(t$,Hho),e(w_,Uho),e(T,Jho),e(T,A_),e(A_,Xte),e(Xte,Yho),e(A_,Kho),e(A_,a$),e(a$,Zho),e(A_,epo),e(T,opo),e(T,y_),e(y_,zte),e(zte,rpo),e(y_,tpo),e(y_,n$),e(n$,apo),e(y_,npo),e(T,spo),e(T,L_),e(L_,Qte),e(Qte,lpo),e(L_,ipo),e(L_,s$),e(s$,dpo),e(L_,cpo),e(T,fpo),e(T,x_),e(x_,Wte),e(Wte,mpo),e(x_,gpo),e(x_,l$),e(l$,hpo),e(x_,ppo),e(T,_po),e(T,k_),e(k_,Hte),e(Hte,upo),e(k_,bpo),e(k_,i$),e(i$,Fpo),e(k_,vpo),e(T,Tpo),e(T,S_),e(S_,Ute),e(Ute,Mpo),e(S_,Epo),e(S_,d$),e(d$,Cpo),e(S_,wpo),e(T,Apo),e(T,R_),e(R_,Jte),e(Jte,ypo),e(R_,Lpo),e(R_,c$),e(c$,xpo),e(R_,kpo),e(T,Spo),e(T,B_),e(B_,Yte),e(Yte,Rpo),e(B_,Bpo),e(B_,f$),e(f$,Ppo),e(B_,$po),e(T,Ipo),e(T,P_),e(P_,Kte),e(Kte,qpo),e(P_,Npo),e(P_,m$),e(m$,jpo),e(P_,Dpo),e(T,Gpo),e(T,$_),e($_,Zte),e(Zte,Opo),e($_,Vpo),e($_,g$),e(g$,Xpo),e($_,zpo),e(T,Qpo),e(T,I_),e(I_,eae),e(eae,Wpo),e(I_,Hpo),e(I_,h$),e(h$,Upo),e(I_,Jpo),e(T,Ypo),e(T,q_),e(q_,oae),e(oae,Kpo),e(q_,Zpo),e(q_,p$),e(p$,e_o),e(q_,o_o),e(T,r_o),e(T,N_),e(N_,rae),e(rae,t_o),e(N_,a_o),e(N_,_$),e(_$,n_o),e(N_,s_o),e(Ne,l_o),e(Ne,j_),e(j_,i_o),e(j_,tae),e(tae,d_o),e(j_,c_o),e(j_,aae),e(aae,f_o),e(Ne,m_o),e(Ne,nae),e(nae,g_o),e(Ne,h_o),g(M3,Ne,null),b(c,ABe,u),b(c,rd,u),e(rd,D_),e(D_,sae),g(E3,sae,null),e(rd,p_o),e(rd,lae),e(lae,__o),b(c,yBe,u),b(c,Yo,u),g(C3,Yo,null),e(Yo,u_o),e(Yo,td),e(td,b_o),e(td,u$),e(u$,F_o),e(td,v_o),e(td,b$),e(b$,T_o),e(td,M_o),e(Yo,E_o),e(Yo,w3),e(w3,C_o),e(w3,iae),e(iae,w_o),e(w3,A_o),e(Yo,y_o),e(Yo,zr),g(A3,zr,null),e(zr,L_o),e(zr,dae),e(dae,x_o),e(zr,k_o),e(zr,ad),e(ad,S_o),e(ad,cae),e(cae,R_o),e(ad,B_o),e(ad,F$),e(F$,P_o),e(ad,$_o),e(zr,I_o),e(zr,fae),e(fae,q_o),e(zr,N_o),g(y3,zr,null),e(Yo,j_o),e(Yo,je),g(L3,je,null),e(je,D_o),e(je,mae),e(mae,G_o),e(je,O_o),e(je,za),e(za,V_o),e(za,gae),e(gae,X_o),e(za,z_o),e(za,hae),e(hae,Q_o),e(za,W_o),e(za,pae),e(pae,H_o),e(za,U_o),e(je,J_o),e(je,S),e(S,G_),e(G_,_ae),e(_ae,Y_o),e(G_,K_o),e(G_,v$),e(v$,Z_o),e(G_,euo),e(S,ouo),e(S,O_),e(O_,uae),e(uae,ruo),e(O_,tuo),e(O_,T$),e(T$,auo),e(O_,nuo),e(S,suo),e(S,V_),e(V_,bae),e(bae,luo),e(V_,iuo),e(V_,M$),e(M$,duo),e(V_,cuo),e(S,fuo),e(S,X_),e(X_,Fae),e(Fae,muo),e(X_,guo),e(X_,E$),e(E$,huo),e(X_,puo),e(S,_uo),e(S,z_),e(z_,vae),e(vae,uuo),e(z_,buo),e(z_,C$),e(C$,Fuo),e(z_,vuo),e(S,Tuo),e(S,Q_),e(Q_,Tae),e(Tae,Muo),e(Q_,Euo),e(Q_,w$),e(w$,Cuo),e(Q_,wuo),e(S,Auo),e(S,W_),e(W_,Mae),e(Mae,yuo),e(W_,Luo),e(W_,A$),e(A$,xuo),e(W_,kuo),e(S,Suo),e(S,H_),e(H_,Eae),e(Eae,Ruo),e(H_,Buo),e(H_,y$),e(y$,Puo),e(H_,$uo),e(S,Iuo),e(S,U_),e(U_,Cae),e(Cae,quo),e(U_,Nuo),e(U_,L$),e(L$,juo),e(U_,Duo),e(S,Guo),e(S,J_),e(J_,wae),e(wae,Ouo),e(J_,Vuo),e(J_,x$),e(x$,Xuo),e(J_,zuo),e(S,Quo),e(S,Y_),e(Y_,Aae),e(Aae,Wuo),e(Y_,Huo),e(Y_,k$),e(k$,Uuo),e(Y_,Juo),e(S,Yuo),e(S,K_),e(K_,yae),e(yae,Kuo),e(K_,Zuo),e(K_,S$),e(S$,e2o),e(K_,o2o),e(S,r2o),e(S,Z_),e(Z_,Lae),e(Lae,t2o),e(Z_,a2o),e(Z_,R$),e(R$,n2o),e(Z_,s2o),e(S,l2o),e(S,eu),e(eu,xae),e(xae,i2o),e(eu,d2o),e(eu,B$),e(B$,c2o),e(eu,f2o),e(S,m2o),e(S,ou),e(ou,kae),e(kae,g2o),e(ou,h2o),e(ou,P$),e(P$,p2o),e(ou,_2o),e(S,u2o),e(S,ru),e(ru,Sae),e(Sae,b2o),e(ru,F2o),e(ru,$$),e($$,v2o),e(ru,T2o),e(S,M2o),e(S,tu),e(tu,Rae),e(Rae,E2o),e(tu,C2o),e(tu,I$),e(I$,w2o),e(tu,A2o),e(S,y2o),e(S,au),e(au,Bae),e(Bae,L2o),e(au,x2o),e(au,q$),e(q$,k2o),e(au,S2o),e(S,R2o),e(S,nu),e(nu,Pae),e(Pae,B2o),e(nu,P2o),e(nu,N$),e(N$,$2o),e(nu,I2o),e(S,q2o),e(S,su),e(su,$ae),e($ae,N2o),e(su,j2o),e(su,j$),e(j$,D2o),e(su,G2o),e(S,O2o),e(S,lu),e(lu,Iae),e(Iae,V2o),e(lu,X2o),e(lu,D$),e(D$,z2o),e(lu,Q2o),e(S,W2o),e(S,iu),e(iu,qae),e(qae,H2o),e(iu,U2o),e(iu,G$),e(G$,J2o),e(iu,Y2o),e(S,K2o),e(S,du),e(du,Nae),e(Nae,Z2o),e(du,e1o),e(du,O$),e(O$,o1o),e(du,r1o),e(S,t1o),e(S,cu),e(cu,jae),e(jae,a1o),e(cu,n1o),e(cu,V$),e(V$,s1o),e(cu,l1o),e(S,i1o),e(S,fu),e(fu,Dae),e(Dae,d1o),e(fu,c1o),e(fu,X$),e(X$,f1o),e(fu,m1o),e(S,g1o),e(S,mu),e(mu,Gae),e(Gae,h1o),e(mu,p1o),e(mu,z$),e(z$,_1o),e(mu,u1o),e(S,b1o),e(S,gu),e(gu,Oae),e(Oae,F1o),e(gu,v1o),e(gu,Q$),e(Q$,T1o),e(gu,M1o),e(S,E1o),e(S,hu),e(hu,Vae),e(Vae,C1o),e(hu,w1o),e(hu,W$),e(W$,A1o),e(hu,y1o),e(S,L1o),e(S,pu),e(pu,Xae),e(Xae,x1o),e(pu,k1o),e(pu,H$),e(H$,S1o),e(pu,R1o),e(S,B1o),e(S,_u),e(_u,zae),e(zae,P1o),e(_u,$1o),e(_u,U$),e(U$,I1o),e(_u,q1o),e(S,N1o),e(S,uu),e(uu,Qae),e(Qae,j1o),e(uu,D1o),e(uu,J$),e(J$,G1o),e(uu,O1o),e(S,V1o),e(S,bu),e(bu,Wae),e(Wae,X1o),e(bu,z1o),e(bu,Y$),e(Y$,Q1o),e(bu,W1o),e(S,H1o),e(S,Fu),e(Fu,Hae),e(Hae,U1o),e(Fu,J1o),e(Fu,K$),e(K$,Y1o),e(Fu,K1o),e(S,Z1o),e(S,vu),e(vu,Uae),e(Uae,ebo),e(vu,obo),e(vu,Z$),e(Z$,rbo),e(vu,tbo),e(S,abo),e(S,Tu),e(Tu,Jae),e(Jae,nbo),e(Tu,sbo),e(Tu,eI),e(eI,lbo),e(Tu,ibo),e(S,dbo),e(S,Mu),e(Mu,Yae),e(Yae,cbo),e(Mu,fbo),e(Mu,oI),e(oI,mbo),e(Mu,gbo),e(S,hbo),e(S,Eu),e(Eu,Kae),e(Kae,pbo),e(Eu,_bo),e(Eu,rI),e(rI,ubo),e(Eu,bbo),e(S,Fbo),e(S,Cu),e(Cu,Zae),e(Zae,vbo),e(Cu,Tbo),e(Cu,tI),e(tI,Mbo),e(Cu,Ebo),e(S,Cbo),e(S,wu),e(wu,ene),e(ene,wbo),e(wu,Abo),e(wu,aI),e(aI,ybo),e(wu,Lbo),e(S,xbo),e(S,Au),e(Au,one),e(one,kbo),e(Au,Sbo),e(Au,nI),e(nI,Rbo),e(Au,Bbo),e(je,Pbo),e(je,yu),e(yu,$bo),e(yu,rne),e(rne,Ibo),e(yu,qbo),e(yu,tne),e(tne,Nbo),e(je,jbo),e(je,ane),e(ane,Dbo),e(je,Gbo),g(x3,je,null),b(c,LBe,u),b(c,nd,u),e(nd,Lu),e(Lu,nne),g(k3,nne,null),e(nd,Obo),e(nd,sne),e(sne,Vbo),b(c,xBe,u),b(c,Ko,u),g(S3,Ko,null),e(Ko,Xbo),e(Ko,sd),e(sd,zbo),e(sd,sI),e(sI,Qbo),e(sd,Wbo),e(sd,lI),e(lI,Hbo),e(sd,Ubo),e(Ko,Jbo),e(Ko,R3),e(R3,Ybo),e(R3,lne),e(lne,Kbo),e(R3,Zbo),e(Ko,e6o),e(Ko,Qr),g(B3,Qr,null),e(Qr,o6o),e(Qr,ine),e(ine,r6o),e(Qr,t6o),e(Qr,ld),e(ld,a6o),e(ld,dne),e(dne,n6o),e(ld,s6o),e(ld,iI),e(iI,l6o),e(ld,i6o),e(Qr,d6o),e(Qr,cne),e(cne,c6o),e(Qr,f6o),g(P3,Qr,null),e(Ko,m6o),e(Ko,De),g($3,De,null),e(De,g6o),e(De,fne),e(fne,h6o),e(De,p6o),e(De,Qa),e(Qa,_6o),e(Qa,mne),e(mne,u6o),e(Qa,b6o),e(Qa,gne),e(gne,F6o),e(Qa,v6o),e(Qa,hne),e(hne,T6o),e(Qa,M6o),e(De,E6o),e(De,$),e($,xu),e(xu,pne),e(pne,C6o),e(xu,w6o),e(xu,dI),e(dI,A6o),e(xu,y6o),e($,L6o),e($,ku),e(ku,_ne),e(_ne,x6o),e(ku,k6o),e(ku,cI),e(cI,S6o),e(ku,R6o),e($,B6o),e($,Su),e(Su,une),e(une,P6o),e(Su,$6o),e(Su,fI),e(fI,I6o),e(Su,q6o),e($,N6o),e($,Ru),e(Ru,bne),e(bne,j6o),e(Ru,D6o),e(Ru,mI),e(mI,G6o),e(Ru,O6o),e($,V6o),e($,Bu),e(Bu,Fne),e(Fne,X6o),e(Bu,z6o),e(Bu,gI),e(gI,Q6o),e(Bu,W6o),e($,H6o),e($,Pu),e(Pu,vne),e(vne,U6o),e(Pu,J6o),e(Pu,hI),e(hI,Y6o),e(Pu,K6o),e($,Z6o),e($,$u),e($u,Tne),e(Tne,eFo),e($u,oFo),e($u,pI),e(pI,rFo),e($u,tFo),e($,aFo),e($,Iu),e(Iu,Mne),e(Mne,nFo),e(Iu,sFo),e(Iu,_I),e(_I,lFo),e(Iu,iFo),e($,dFo),e($,qu),e(qu,Ene),e(Ene,cFo),e(qu,fFo),e(qu,uI),e(uI,mFo),e(qu,gFo),e($,hFo),e($,Nu),e(Nu,Cne),e(Cne,pFo),e(Nu,_Fo),e(Nu,bI),e(bI,uFo),e(Nu,bFo),e($,FFo),e($,ju),e(ju,wne),e(wne,vFo),e(ju,TFo),e(ju,FI),e(FI,MFo),e(ju,EFo),e($,CFo),e($,Du),e(Du,Ane),e(Ane,wFo),e(Du,AFo),e(Du,vI),e(vI,yFo),e(Du,LFo),e($,xFo),e($,Gu),e(Gu,yne),e(yne,kFo),e(Gu,SFo),e(Gu,TI),e(TI,RFo),e(Gu,BFo),e($,PFo),e($,Ou),e(Ou,Lne),e(Lne,$Fo),e(Ou,IFo),e(Ou,MI),e(MI,qFo),e(Ou,NFo),e($,jFo),e($,Vu),e(Vu,xne),e(xne,DFo),e(Vu,GFo),e(Vu,EI),e(EI,OFo),e(Vu,VFo),e($,XFo),e($,Xu),e(Xu,kne),e(kne,zFo),e(Xu,QFo),e(Xu,CI),e(CI,WFo),e(Xu,HFo),e($,UFo),e($,zu),e(zu,Sne),e(Sne,JFo),e(zu,YFo),e(zu,wI),e(wI,KFo),e(zu,ZFo),e($,evo),e($,Qu),e(Qu,Rne),e(Rne,ovo),e(Qu,rvo),e(Qu,AI),e(AI,tvo),e(Qu,avo),e($,nvo),e($,Wu),e(Wu,Bne),e(Bne,svo),e(Wu,lvo),e(Wu,yI),e(yI,ivo),e(Wu,dvo),e($,cvo),e($,Hu),e(Hu,Pne),e(Pne,fvo),e(Hu,mvo),e(Hu,LI),e(LI,gvo),e(Hu,hvo),e($,pvo),e($,Uu),e(Uu,$ne),e($ne,_vo),e(Uu,uvo),e(Uu,xI),e(xI,bvo),e(Uu,Fvo),e($,vvo),e($,Ju),e(Ju,Ine),e(Ine,Tvo),e(Ju,Mvo),e(Ju,kI),e(kI,Evo),e(Ju,Cvo),e($,wvo),e($,Yu),e(Yu,qne),e(qne,Avo),e(Yu,yvo),e(Yu,SI),e(SI,Lvo),e(Yu,xvo),e($,kvo),e($,Ku),e(Ku,Nne),e(Nne,Svo),e(Ku,Rvo),e(Ku,RI),e(RI,Bvo),e(Ku,Pvo),e($,$vo),e($,Zu),e(Zu,jne),e(jne,Ivo),e(Zu,qvo),e(Zu,BI),e(BI,Nvo),e(Zu,jvo),e($,Dvo),e($,e2),e(e2,Dne),e(Dne,Gvo),e(e2,Ovo),e(e2,PI),e(PI,Vvo),e(e2,Xvo),e($,zvo),e($,o2),e(o2,Gne),e(Gne,Qvo),e(o2,Wvo),e(o2,$I),e($I,Hvo),e(o2,Uvo),e($,Jvo),e($,r2),e(r2,One),e(One,Yvo),e(r2,Kvo),e(r2,II),e(II,Zvo),e(r2,eTo),e($,oTo),e($,t2),e(t2,Vne),e(Vne,rTo),e(t2,tTo),e(t2,qI),e(qI,aTo),e(t2,nTo),e($,sTo),e($,a2),e(a2,Xne),e(Xne,lTo),e(a2,iTo),e(a2,NI),e(NI,dTo),e(a2,cTo),e($,fTo),e($,n2),e(n2,zne),e(zne,mTo),e(n2,gTo),e(n2,jI),e(jI,hTo),e(n2,pTo),e($,_To),e($,s2),e(s2,Qne),e(Qne,uTo),e(s2,bTo),e(s2,DI),e(DI,FTo),e(s2,vTo),e($,TTo),e($,l2),e(l2,Wne),e(Wne,MTo),e(l2,ETo),e(l2,GI),e(GI,CTo),e(l2,wTo),e($,ATo),e($,i2),e(i2,Hne),e(Hne,yTo),e(i2,LTo),e(i2,OI),e(OI,xTo),e(i2,kTo),e($,STo),e($,d2),e(d2,Une),e(Une,RTo),e(d2,BTo),e(d2,VI),e(VI,PTo),e(d2,$To),e(De,ITo),e(De,c2),e(c2,qTo),e(c2,Jne),e(Jne,NTo),e(c2,jTo),e(c2,Yne),e(Yne,DTo),e(De,GTo),e(De,Kne),e(Kne,OTo),e(De,VTo),g(I3,De,null),b(c,kBe,u),b(c,id,u),e(id,f2),e(f2,Zne),g(q3,Zne,null),e(id,XTo),e(id,ese),e(ese,zTo),b(c,SBe,u),b(c,Zo,u),g(N3,Zo,null),e(Zo,QTo),e(Zo,dd),e(dd,WTo),e(dd,XI),e(XI,HTo),e(dd,UTo),e(dd,zI),e(zI,JTo),e(dd,YTo),e(Zo,KTo),e(Zo,j3),e(j3,ZTo),e(j3,ose),e(ose,e7o),e(j3,o7o),e(Zo,r7o),e(Zo,Wr),g(D3,Wr,null),e(Wr,t7o),e(Wr,rse),e(rse,a7o),e(Wr,n7o),e(Wr,cd),e(cd,s7o),e(cd,tse),e(tse,l7o),e(cd,i7o),e(cd,QI),e(QI,d7o),e(cd,c7o),e(Wr,f7o),e(Wr,ase),e(ase,m7o),e(Wr,g7o),g(G3,Wr,null),e(Zo,h7o),e(Zo,Ge),g(O3,Ge,null),e(Ge,p7o),e(Ge,nse),e(nse,_7o),e(Ge,u7o),e(Ge,Wa),e(Wa,b7o),e(Wa,sse),e(sse,F7o),e(Wa,v7o),e(Wa,lse),e(lse,T7o),e(Wa,M7o),e(Wa,ise),e(ise,E7o),e(Wa,C7o),e(Ge,w7o),e(Ge,I),e(I,m2),e(m2,dse),e(dse,A7o),e(m2,y7o),e(m2,WI),e(WI,L7o),e(m2,x7o),e(I,k7o),e(I,g2),e(g2,cse),e(cse,S7o),e(g2,R7o),e(g2,HI),e(HI,B7o),e(g2,P7o),e(I,$7o),e(I,h2),e(h2,fse),e(fse,I7o),e(h2,q7o),e(h2,UI),e(UI,N7o),e(h2,j7o),e(I,D7o),e(I,p2),e(p2,mse),e(mse,G7o),e(p2,O7o),e(p2,JI),e(JI,V7o),e(p2,X7o),e(I,z7o),e(I,_2),e(_2,gse),e(gse,Q7o),e(_2,W7o),e(_2,YI),e(YI,H7o),e(_2,U7o),e(I,J7o),e(I,u2),e(u2,hse),e(hse,Y7o),e(u2,K7o),e(u2,KI),e(KI,Z7o),e(u2,e9o),e(I,o9o),e(I,b2),e(b2,pse),e(pse,r9o),e(b2,t9o),e(b2,ZI),e(ZI,a9o),e(b2,n9o),e(I,s9o),e(I,F2),e(F2,_se),e(_se,l9o),e(F2,i9o),e(F2,eq),e(eq,d9o),e(F2,c9o),e(I,f9o),e(I,v2),e(v2,use),e(use,m9o),e(v2,g9o),e(v2,oq),e(oq,h9o),e(v2,p9o),e(I,_9o),e(I,T2),e(T2,bse),e(bse,u9o),e(T2,b9o),e(T2,rq),e(rq,F9o),e(T2,v9o),e(I,T9o),e(I,M2),e(M2,Fse),e(Fse,M9o),e(M2,E9o),e(M2,tq),e(tq,C9o),e(M2,w9o),e(I,A9o),e(I,E2),e(E2,vse),e(vse,y9o),e(E2,L9o),e(E2,aq),e(aq,x9o),e(E2,k9o),e(I,S9o),e(I,C2),e(C2,Tse),e(Tse,R9o),e(C2,B9o),e(C2,nq),e(nq,P9o),e(C2,$9o),e(I,I9o),e(I,w2),e(w2,Mse),e(Mse,q9o),e(w2,N9o),e(w2,sq),e(sq,j9o),e(w2,D9o),e(I,G9o),e(I,A2),e(A2,Ese),e(Ese,O9o),e(A2,V9o),e(A2,lq),e(lq,X9o),e(A2,z9o),e(I,Q9o),e(I,y2),e(y2,Cse),e(Cse,W9o),e(y2,H9o),e(y2,iq),e(iq,U9o),e(y2,J9o),e(I,Y9o),e(I,L2),e(L2,wse),e(wse,K9o),e(L2,Z9o),e(L2,dq),e(dq,eMo),e(L2,oMo),e(I,rMo),e(I,x2),e(x2,Ase),e(Ase,tMo),e(x2,aMo),e(x2,cq),e(cq,nMo),e(x2,sMo),e(I,lMo),e(I,k2),e(k2,yse),e(yse,iMo),e(k2,dMo),e(k2,fq),e(fq,cMo),e(k2,fMo),e(I,mMo),e(I,S2),e(S2,Lse),e(Lse,gMo),e(S2,hMo),e(S2,mq),e(mq,pMo),e(S2,_Mo),e(I,uMo),e(I,R2),e(R2,xse),e(xse,bMo),e(R2,FMo),e(R2,gq),e(gq,vMo),e(R2,TMo),e(I,MMo),e(I,B2),e(B2,kse),e(kse,EMo),e(B2,CMo),e(B2,hq),e(hq,wMo),e(B2,AMo),e(I,yMo),e(I,P2),e(P2,Sse),e(Sse,LMo),e(P2,xMo),e(P2,pq),e(pq,kMo),e(P2,SMo),e(I,RMo),e(I,$2),e($2,Rse),e(Rse,BMo),e($2,PMo),e($2,_q),e(_q,$Mo),e($2,IMo),e(I,qMo),e(I,I2),e(I2,Bse),e(Bse,NMo),e(I2,jMo),e(I2,uq),e(uq,DMo),e(I2,GMo),e(I,OMo),e(I,q2),e(q2,Pse),e(Pse,VMo),e(q2,XMo),e(q2,bq),e(bq,zMo),e(q2,QMo),e(I,WMo),e(I,N2),e(N2,$se),e($se,HMo),e(N2,UMo),e(N2,Fq),e(Fq,JMo),e(N2,YMo),e(I,KMo),e(I,j2),e(j2,Ise),e(Ise,ZMo),e(j2,e4o),e(j2,vq),e(vq,o4o),e(j2,r4o),e(I,t4o),e(I,D2),e(D2,qse),e(qse,a4o),e(D2,n4o),e(D2,Tq),e(Tq,s4o),e(D2,l4o),e(I,i4o),e(I,G2),e(G2,Nse),e(Nse,d4o),e(G2,c4o),e(G2,Mq),e(Mq,f4o),e(G2,m4o),e(I,g4o),e(I,O2),e(O2,jse),e(jse,h4o),e(O2,p4o),e(O2,Dse),e(Dse,_4o),e(O2,u4o),e(I,b4o),e(I,V2),e(V2,Gse),e(Gse,F4o),e(V2,v4o),e(V2,Eq),e(Eq,T4o),e(V2,M4o),e(I,E4o),e(I,X2),e(X2,Ose),e(Ose,C4o),e(X2,w4o),e(X2,Cq),e(Cq,A4o),e(X2,y4o),e(I,L4o),e(I,z2),e(z2,Vse),e(Vse,x4o),e(z2,k4o),e(z2,wq),e(wq,S4o),e(z2,R4o),e(I,B4o),e(I,Q2),e(Q2,Xse),e(Xse,P4o),e(Q2,$4o),e(Q2,Aq),e(Aq,I4o),e(Q2,q4o),e(Ge,N4o),e(Ge,W2),e(W2,j4o),e(W2,zse),e(zse,D4o),e(W2,G4o),e(W2,Qse),e(Qse,O4o),e(Ge,V4o),e(Ge,Wse),e(Wse,X4o),e(Ge,z4o),g(V3,Ge,null),b(c,RBe,u),b(c,fd,u),e(fd,H2),e(H2,Hse),g(X3,Hse,null),e(fd,Q4o),e(fd,Use),e(Use,W4o),b(c,BBe,u),b(c,er,u),g(z3,er,null),e(er,H4o),e(er,md),e(md,U4o),e(md,yq),e(yq,J4o),e(md,Y4o),e(md,Lq),e(Lq,K4o),e(md,Z4o),e(er,eEo),e(er,Q3),e(Q3,oEo),e(Q3,Jse),e(Jse,rEo),e(Q3,tEo),e(er,aEo),e(er,Hr),g(W3,Hr,null),e(Hr,nEo),e(Hr,Yse),e(Yse,sEo),e(Hr,lEo),e(Hr,gd),e(gd,iEo),e(gd,Kse),e(Kse,dEo),e(gd,cEo),e(gd,xq),e(xq,fEo),e(gd,mEo),e(Hr,gEo),e(Hr,Zse),e(Zse,hEo),e(Hr,pEo),g(H3,Hr,null),e(er,_Eo),e(er,Oe),g(U3,Oe,null),e(Oe,uEo),e(Oe,ele),e(ele,bEo),e(Oe,FEo),e(Oe,Ha),e(Ha,vEo),e(Ha,ole),e(ole,TEo),e(Ha,MEo),e(Ha,rle),e(rle,EEo),e(Ha,CEo),e(Ha,tle),e(tle,wEo),e(Ha,AEo),e(Oe,yEo),e(Oe,ae),e(ae,U2),e(U2,ale),e(ale,LEo),e(U2,xEo),e(U2,kq),e(kq,kEo),e(U2,SEo),e(ae,REo),e(ae,J2),e(J2,nle),e(nle,BEo),e(J2,PEo),e(J2,Sq),e(Sq,$Eo),e(J2,IEo),e(ae,qEo),e(ae,Y2),e(Y2,sle),e(sle,NEo),e(Y2,jEo),e(Y2,Rq),e(Rq,DEo),e(Y2,GEo),e(ae,OEo),e(ae,K2),e(K2,lle),e(lle,VEo),e(K2,XEo),e(K2,Bq),e(Bq,zEo),e(K2,QEo),e(ae,WEo),e(ae,Z2),e(Z2,ile),e(ile,HEo),e(Z2,UEo),e(Z2,Pq),e(Pq,JEo),e(Z2,YEo),e(ae,KEo),e(ae,e1),e(e1,dle),e(dle,ZEo),e(e1,e5o),e(e1,$q),e($q,o5o),e(e1,r5o),e(ae,t5o),e(ae,o1),e(o1,cle),e(cle,a5o),e(o1,n5o),e(o1,Iq),e(Iq,s5o),e(o1,l5o),e(ae,i5o),e(ae,r1),e(r1,fle),e(fle,d5o),e(r1,c5o),e(r1,qq),e(qq,f5o),e(r1,m5o),e(ae,g5o),e(ae,t1),e(t1,mle),e(mle,h5o),e(t1,p5o),e(t1,Nq),e(Nq,_5o),e(t1,u5o),e(ae,b5o),e(ae,a1),e(a1,gle),e(gle,F5o),e(a1,v5o),e(a1,jq),e(jq,T5o),e(a1,M5o),e(ae,E5o),e(ae,n1),e(n1,hle),e(hle,C5o),e(n1,w5o),e(n1,Dq),e(Dq,A5o),e(n1,y5o),e(ae,L5o),e(ae,s1),e(s1,ple),e(ple,x5o),e(s1,k5o),e(s1,Gq),e(Gq,S5o),e(s1,R5o),e(ae,B5o),e(ae,l1),e(l1,_le),e(_le,P5o),e(l1,$5o),e(l1,Oq),e(Oq,I5o),e(l1,q5o),e(ae,N5o),e(ae,i1),e(i1,ule),e(ule,j5o),e(i1,D5o),e(i1,Vq),e(Vq,G5o),e(i1,O5o),e(ae,V5o),e(ae,d1),e(d1,ble),e(ble,X5o),e(d1,z5o),e(d1,Xq),e(Xq,Q5o),e(d1,W5o),e(ae,H5o),e(ae,c1),e(c1,Fle),e(Fle,U5o),e(c1,J5o),e(c1,zq),e(zq,Y5o),e(c1,K5o),e(ae,Z5o),e(ae,f1),e(f1,vle),e(vle,e3o),e(f1,o3o),e(f1,Qq),e(Qq,r3o),e(f1,t3o),e(ae,a3o),e(ae,m1),e(m1,Tle),e(Tle,n3o),e(m1,s3o),e(m1,Wq),e(Wq,l3o),e(m1,i3o),e(Oe,d3o),e(Oe,g1),e(g1,c3o),e(g1,Mle),e(Mle,f3o),e(g1,m3o),e(g1,Ele),e(Ele,g3o),e(Oe,h3o),e(Oe,Cle),e(Cle,p3o),e(Oe,_3o),g(J3,Oe,null),b(c,PBe,u),b(c,hd,u),e(hd,h1),e(h1,wle),g(Y3,wle,null),e(hd,u3o),e(hd,Ale),e(Ale,b3o),b(c,$Be,u),b(c,or,u),g(K3,or,null),e(or,F3o),e(or,pd),e(pd,v3o),e(pd,Hq),e(Hq,T3o),e(pd,M3o),e(pd,Uq),e(Uq,E3o),e(pd,C3o),e(or,w3o),e(or,Z3),e(Z3,A3o),e(Z3,yle),e(yle,y3o),e(Z3,L3o),e(or,x3o),e(or,Ur),g(eC,Ur,null),e(Ur,k3o),e(Ur,Lle),e(Lle,S3o),e(Ur,R3o),e(Ur,_d),e(_d,B3o),e(_d,xle),e(xle,P3o),e(_d,$3o),e(_d,Jq),e(Jq,I3o),e(_d,q3o),e(Ur,N3o),e(Ur,kle),e(kle,j3o),e(Ur,D3o),g(oC,Ur,null),e(or,G3o),e(or,Ve),g(rC,Ve,null),e(Ve,O3o),e(Ve,Sle),e(Sle,V3o),e(Ve,X3o),e(Ve,Ua),e(Ua,z3o),e(Ua,Rle),e(Rle,Q3o),e(Ua,W3o),e(Ua,Ble),e(Ble,H3o),e(Ua,U3o),e(Ua,Ple),e(Ple,J3o),e(Ua,Y3o),e(Ve,K3o),e(Ve,y),e(y,p1),e(p1,$le),e($le,Z3o),e(p1,eCo),e(p1,Yq),e(Yq,oCo),e(p1,rCo),e(y,tCo),e(y,_1),e(_1,Ile),e(Ile,aCo),e(_1,nCo),e(_1,Kq),e(Kq,sCo),e(_1,lCo),e(y,iCo),e(y,u1),e(u1,qle),e(qle,dCo),e(u1,cCo),e(u1,Zq),e(Zq,fCo),e(u1,mCo),e(y,gCo),e(y,b1),e(b1,Nle),e(Nle,hCo),e(b1,pCo),e(b1,eN),e(eN,_Co),e(b1,uCo),e(y,bCo),e(y,F1),e(F1,jle),e(jle,FCo),e(F1,vCo),e(F1,oN),e(oN,TCo),e(F1,MCo),e(y,ECo),e(y,v1),e(v1,Dle),e(Dle,CCo),e(v1,wCo),e(v1,rN),e(rN,ACo),e(v1,yCo),e(y,LCo),e(y,T1),e(T1,Gle),e(Gle,xCo),e(T1,kCo),e(T1,tN),e(tN,SCo),e(T1,RCo),e(y,BCo),e(y,M1),e(M1,Ole),e(Ole,PCo),e(M1,$Co),e(M1,aN),e(aN,ICo),e(M1,qCo),e(y,NCo),e(y,E1),e(E1,Vle),e(Vle,jCo),e(E1,DCo),e(E1,nN),e(nN,GCo),e(E1,OCo),e(y,VCo),e(y,C1),e(C1,Xle),e(Xle,XCo),e(C1,zCo),e(C1,sN),e(sN,QCo),e(C1,WCo),e(y,HCo),e(y,w1),e(w1,zle),e(zle,UCo),e(w1,JCo),e(w1,lN),e(lN,YCo),e(w1,KCo),e(y,ZCo),e(y,A1),e(A1,Qle),e(Qle,ewo),e(A1,owo),e(A1,iN),e(iN,rwo),e(A1,two),e(y,awo),e(y,y1),e(y1,Wle),e(Wle,nwo),e(y1,swo),e(y1,dN),e(dN,lwo),e(y1,iwo),e(y,dwo),e(y,L1),e(L1,Hle),e(Hle,cwo),e(L1,fwo),e(L1,cN),e(cN,mwo),e(L1,gwo),e(y,hwo),e(y,x1),e(x1,Ule),e(Ule,pwo),e(x1,_wo),e(x1,fN),e(fN,uwo),e(x1,bwo),e(y,Fwo),e(y,k1),e(k1,Jle),e(Jle,vwo),e(k1,Two),e(k1,mN),e(mN,Mwo),e(k1,Ewo),e(y,Cwo),e(y,S1),e(S1,Yle),e(Yle,wwo),e(S1,Awo),e(S1,gN),e(gN,ywo),e(S1,Lwo),e(y,xwo),e(y,R1),e(R1,Kle),e(Kle,kwo),e(R1,Swo),e(R1,hN),e(hN,Rwo),e(R1,Bwo),e(y,Pwo),e(y,B1),e(B1,Zle),e(Zle,$wo),e(B1,Iwo),e(B1,pN),e(pN,qwo),e(B1,Nwo),e(y,jwo),e(y,P1),e(P1,eie),e(eie,Dwo),e(P1,Gwo),e(P1,_N),e(_N,Owo),e(P1,Vwo),e(y,Xwo),e(y,$1),e($1,oie),e(oie,zwo),e($1,Qwo),e($1,uN),e(uN,Wwo),e($1,Hwo),e(y,Uwo),e(y,I1),e(I1,rie),e(rie,Jwo),e(I1,Ywo),e(I1,bN),e(bN,Kwo),e(I1,Zwo),e(y,eAo),e(y,q1),e(q1,tie),e(tie,oAo),e(q1,rAo),e(q1,FN),e(FN,tAo),e(q1,aAo),e(y,nAo),e(y,N1),e(N1,aie),e(aie,sAo),e(N1,lAo),e(N1,vN),e(vN,iAo),e(N1,dAo),e(y,cAo),e(y,j1),e(j1,nie),e(nie,fAo),e(j1,mAo),e(j1,TN),e(TN,gAo),e(j1,hAo),e(y,pAo),e(y,D1),e(D1,sie),e(sie,_Ao),e(D1,uAo),e(D1,MN),e(MN,bAo),e(D1,FAo),e(y,vAo),e(y,G1),e(G1,lie),e(lie,TAo),e(G1,MAo),e(G1,EN),e(EN,EAo),e(G1,CAo),e(y,wAo),e(y,O1),e(O1,iie),e(iie,AAo),e(O1,yAo),e(O1,CN),e(CN,LAo),e(O1,xAo),e(y,kAo),e(y,V1),e(V1,die),e(die,SAo),e(V1,RAo),e(V1,wN),e(wN,BAo),e(V1,PAo),e(y,$Ao),e(y,X1),e(X1,cie),e(cie,IAo),e(X1,qAo),e(X1,AN),e(AN,NAo),e(X1,jAo),e(y,DAo),e(y,z1),e(z1,fie),e(fie,GAo),e(z1,OAo),e(z1,yN),e(yN,VAo),e(z1,XAo),e(y,zAo),e(y,Q1),e(Q1,mie),e(mie,QAo),e(Q1,WAo),e(Q1,LN),e(LN,HAo),e(Q1,UAo),e(y,JAo),e(y,W1),e(W1,gie),e(gie,YAo),e(W1,KAo),e(W1,xN),e(xN,ZAo),e(W1,e0o),e(y,o0o),e(y,H1),e(H1,hie),e(hie,r0o),e(H1,t0o),e(H1,kN),e(kN,a0o),e(H1,n0o),e(y,s0o),e(y,U1),e(U1,pie),e(pie,l0o),e(U1,i0o),e(U1,SN),e(SN,d0o),e(U1,c0o),e(y,f0o),e(y,J1),e(J1,_ie),e(_ie,m0o),e(J1,g0o),e(J1,RN),e(RN,h0o),e(J1,p0o),e(y,_0o),e(y,Y1),e(Y1,uie),e(uie,u0o),e(Y1,b0o),e(Y1,BN),e(BN,F0o),e(Y1,v0o),e(y,T0o),e(y,K1),e(K1,bie),e(bie,M0o),e(K1,E0o),e(K1,PN),e(PN,C0o),e(K1,w0o),e(y,A0o),e(y,Z1),e(Z1,Fie),e(Fie,y0o),e(Z1,L0o),e(Z1,$N),e($N,x0o),e(Z1,k0o),e(y,S0o),e(y,eb),e(eb,vie),e(vie,R0o),e(eb,B0o),e(eb,IN),e(IN,P0o),e(eb,$0o),e(y,I0o),e(y,ob),e(ob,Tie),e(Tie,q0o),e(ob,N0o),e(ob,qN),e(qN,j0o),e(ob,D0o),e(y,G0o),e(y,rb),e(rb,Mie),e(Mie,O0o),e(rb,V0o),e(rb,NN),e(NN,X0o),e(rb,z0o),e(y,Q0o),e(y,tb),e(tb,Eie),e(Eie,W0o),e(tb,H0o),e(tb,jN),e(jN,U0o),e(tb,J0o),e(y,Y0o),e(y,ab),e(ab,Cie),e(Cie,K0o),e(ab,Z0o),e(ab,DN),e(DN,eyo),e(ab,oyo),e(y,ryo),e(y,nb),e(nb,wie),e(wie,tyo),e(nb,ayo),e(nb,GN),e(GN,nyo),e(nb,syo),e(y,lyo),e(y,sb),e(sb,Aie),e(Aie,iyo),e(sb,dyo),e(sb,ON),e(ON,cyo),e(sb,fyo),e(y,myo),e(y,lb),e(lb,yie),e(yie,gyo),e(lb,hyo),e(lb,VN),e(VN,pyo),e(lb,_yo),e(Ve,uyo),e(Ve,ib),e(ib,byo),e(ib,Lie),e(Lie,Fyo),e(ib,vyo),e(ib,xie),e(xie,Tyo),e(Ve,Myo),e(Ve,kie),e(kie,Eyo),e(Ve,Cyo),g(tC,Ve,null),b(c,IBe,u),b(c,ud,u),e(ud,db),e(db,Sie),g(aC,Sie,null),e(ud,wyo),e(ud,Rie),e(Rie,Ayo),b(c,qBe,u),b(c,rr,u),g(nC,rr,null),e(rr,yyo),e(rr,bd),e(bd,Lyo),e(bd,XN),e(XN,xyo),e(bd,kyo),e(bd,zN),e(zN,Syo),e(bd,Ryo),e(rr,Byo),e(rr,sC),e(sC,Pyo),e(sC,Bie),e(Bie,$yo),e(sC,Iyo),e(rr,qyo),e(rr,Jr),g(lC,Jr,null),e(Jr,Nyo),e(Jr,Pie),e(Pie,jyo),e(Jr,Dyo),e(Jr,Fd),e(Fd,Gyo),e(Fd,$ie),e($ie,Oyo),e(Fd,Vyo),e(Fd,QN),e(QN,Xyo),e(Fd,zyo),e(Jr,Qyo),e(Jr,Iie),e(Iie,Wyo),e(Jr,Hyo),g(iC,Jr,null),e(rr,Uyo),e(rr,Xe),g(dC,Xe,null),e(Xe,Jyo),e(Xe,qie),e(qie,Yyo),e(Xe,Kyo),e(Xe,Ja),e(Ja,Zyo),e(Ja,Nie),e(Nie,eLo),e(Ja,oLo),e(Ja,jie),e(jie,rLo),e(Ja,tLo),e(Ja,Die),e(Die,aLo),e(Ja,nLo),e(Xe,sLo),e(Xe,G),e(G,cb),e(cb,Gie),e(Gie,lLo),e(cb,iLo),e(cb,WN),e(WN,dLo),e(cb,cLo),e(G,fLo),e(G,fb),e(fb,Oie),e(Oie,mLo),e(fb,gLo),e(fb,HN),e(HN,hLo),e(fb,pLo),e(G,_Lo),e(G,mb),e(mb,Vie),e(Vie,uLo),e(mb,bLo),e(mb,UN),e(UN,FLo),e(mb,vLo),e(G,TLo),e(G,gb),e(gb,Xie),e(Xie,MLo),e(gb,ELo),e(gb,JN),e(JN,CLo),e(gb,wLo),e(G,ALo),e(G,hb),e(hb,zie),e(zie,yLo),e(hb,LLo),e(hb,YN),e(YN,xLo),e(hb,kLo),e(G,SLo),e(G,pb),e(pb,Qie),e(Qie,RLo),e(pb,BLo),e(pb,KN),e(KN,PLo),e(pb,$Lo),e(G,ILo),e(G,_b),e(_b,Wie),e(Wie,qLo),e(_b,NLo),e(_b,ZN),e(ZN,jLo),e(_b,DLo),e(G,GLo),e(G,ub),e(ub,Hie),e(Hie,OLo),e(ub,VLo),e(ub,ej),e(ej,XLo),e(ub,zLo),e(G,QLo),e(G,bb),e(bb,Uie),e(Uie,WLo),e(bb,HLo),e(bb,oj),e(oj,ULo),e(bb,JLo),e(G,YLo),e(G,Fb),e(Fb,Jie),e(Jie,KLo),e(Fb,ZLo),e(Fb,rj),e(rj,e8o),e(Fb,o8o),e(G,r8o),e(G,vb),e(vb,Yie),e(Yie,t8o),e(vb,a8o),e(vb,tj),e(tj,n8o),e(vb,s8o),e(G,l8o),e(G,Tb),e(Tb,Kie),e(Kie,i8o),e(Tb,d8o),e(Tb,aj),e(aj,c8o),e(Tb,f8o),e(G,m8o),e(G,Mb),e(Mb,Zie),e(Zie,g8o),e(Mb,h8o),e(Mb,nj),e(nj,p8o),e(Mb,_8o),e(G,u8o),e(G,Eb),e(Eb,ede),e(ede,b8o),e(Eb,F8o),e(Eb,sj),e(sj,v8o),e(Eb,T8o),e(G,M8o),e(G,Cb),e(Cb,ode),e(ode,E8o),e(Cb,C8o),e(Cb,lj),e(lj,w8o),e(Cb,A8o),e(G,y8o),e(G,wb),e(wb,rde),e(rde,L8o),e(wb,x8o),e(wb,ij),e(ij,k8o),e(wb,S8o),e(G,R8o),e(G,Ab),e(Ab,tde),e(tde,B8o),e(Ab,P8o),e(Ab,dj),e(dj,$8o),e(Ab,I8o),e(G,q8o),e(G,yb),e(yb,ade),e(ade,N8o),e(yb,j8o),e(yb,cj),e(cj,D8o),e(yb,G8o),e(G,O8o),e(G,Lb),e(Lb,nde),e(nde,V8o),e(Lb,X8o),e(Lb,fj),e(fj,z8o),e(Lb,Q8o),e(G,W8o),e(G,xb),e(xb,sde),e(sde,H8o),e(xb,U8o),e(xb,mj),e(mj,J8o),e(xb,Y8o),e(G,K8o),e(G,kb),e(kb,lde),e(lde,Z8o),e(kb,exo),e(kb,gj),e(gj,oxo),e(kb,rxo),e(G,txo),e(G,Sb),e(Sb,ide),e(ide,axo),e(Sb,nxo),e(Sb,hj),e(hj,sxo),e(Sb,lxo),e(G,ixo),e(G,Rb),e(Rb,dde),e(dde,dxo),e(Rb,cxo),e(Rb,pj),e(pj,fxo),e(Rb,mxo),e(G,gxo),e(G,Bb),e(Bb,cde),e(cde,hxo),e(Bb,pxo),e(Bb,_j),e(_j,_xo),e(Bb,uxo),e(G,bxo),e(G,Pb),e(Pb,fde),e(fde,Fxo),e(Pb,vxo),e(Pb,uj),e(uj,Txo),e(Pb,Mxo),e(G,Exo),e(G,$b),e($b,mde),e(mde,Cxo),e($b,wxo),e($b,bj),e(bj,Axo),e($b,yxo),e(G,Lxo),e(G,Ib),e(Ib,gde),e(gde,xxo),e(Ib,kxo),e(Ib,Fj),e(Fj,Sxo),e(Ib,Rxo),e(G,Bxo),e(G,qb),e(qb,hde),e(hde,Pxo),e(qb,$xo),e(qb,vj),e(vj,Ixo),e(qb,qxo),e(Xe,Nxo),e(Xe,Nb),e(Nb,jxo),e(Nb,pde),e(pde,Dxo),e(Nb,Gxo),e(Nb,_de),e(_de,Oxo),e(Xe,Vxo),e(Xe,ude),e(ude,Xxo),e(Xe,zxo),g(cC,Xe,null),b(c,NBe,u),b(c,vd,u),e(vd,jb),e(jb,bde),g(fC,bde,null),e(vd,Qxo),e(vd,Fde),e(Fde,Wxo),b(c,jBe,u),b(c,tr,u),g(mC,tr,null),e(tr,Hxo),e(tr,Td),e(Td,Uxo),e(Td,Tj),e(Tj,Jxo),e(Td,Yxo),e(Td,Mj),e(Mj,Kxo),e(Td,Zxo),e(tr,eko),e(tr,gC),e(gC,oko),e(gC,vde),e(vde,rko),e(gC,tko),e(tr,ako),e(tr,Yr),g(hC,Yr,null),e(Yr,nko),e(Yr,Tde),e(Tde,sko),e(Yr,lko),e(Yr,Md),e(Md,iko),e(Md,Mde),e(Mde,dko),e(Md,cko),e(Md,Ej),e(Ej,fko),e(Md,mko),e(Yr,gko),e(Yr,Ede),e(Ede,hko),e(Yr,pko),g(pC,Yr,null),e(tr,_ko),e(tr,ze),g(_C,ze,null),e(ze,uko),e(ze,Cde),e(Cde,bko),e(ze,Fko),e(ze,Ya),e(Ya,vko),e(Ya,wde),e(wde,Tko),e(Ya,Mko),e(Ya,Ade),e(Ade,Eko),e(Ya,Cko),e(Ya,yde),e(yde,wko),e(Ya,Ako),e(ze,yko),e(ze,da),e(da,Db),e(Db,Lde),e(Lde,Lko),e(Db,xko),e(Db,Cj),e(Cj,kko),e(Db,Sko),e(da,Rko),e(da,Gb),e(Gb,xde),e(xde,Bko),e(Gb,Pko),e(Gb,wj),e(wj,$ko),e(Gb,Iko),e(da,qko),e(da,Ob),e(Ob,kde),e(kde,Nko),e(Ob,jko),e(Ob,Aj),e(Aj,Dko),e(Ob,Gko),e(da,Oko),e(da,Vb),e(Vb,Sde),e(Sde,Vko),e(Vb,Xko),e(Vb,yj),e(yj,zko),e(Vb,Qko),e(da,Wko),e(da,Xb),e(Xb,Rde),e(Rde,Hko),e(Xb,Uko),e(Xb,Lj),e(Lj,Jko),e(Xb,Yko),e(ze,Kko),e(ze,zb),e(zb,Zko),e(zb,Bde),e(Bde,eSo),e(zb,oSo),e(zb,Pde),e(Pde,rSo),e(ze,tSo),e(ze,$de),e($de,aSo),e(ze,nSo),g(uC,ze,null),b(c,DBe,u),b(c,Ed,u),e(Ed,Qb),e(Qb,Ide),g(bC,Ide,null),e(Ed,sSo),e(Ed,qde),e(qde,lSo),b(c,GBe,u),b(c,ar,u),g(FC,ar,null),e(ar,iSo),e(ar,Cd),e(Cd,dSo),e(Cd,xj),e(xj,cSo),e(Cd,fSo),e(Cd,kj),e(kj,mSo),e(Cd,gSo),e(ar,hSo),e(ar,vC),e(vC,pSo),e(vC,Nde),e(Nde,_So),e(vC,uSo),e(ar,bSo),e(ar,Kr),g(TC,Kr,null),e(Kr,FSo),e(Kr,jde),e(jde,vSo),e(Kr,TSo),e(Kr,wd),e(wd,MSo),e(wd,Dde),e(Dde,ESo),e(wd,CSo),e(wd,Sj),e(Sj,wSo),e(wd,ASo),e(Kr,ySo),e(Kr,Gde),e(Gde,LSo),e(Kr,xSo),g(MC,Kr,null),e(ar,kSo),e(ar,Qe),g(EC,Qe,null),e(Qe,SSo),e(Qe,Ode),e(Ode,RSo),e(Qe,BSo),e(Qe,Ka),e(Ka,PSo),e(Ka,Vde),e(Vde,$So),e(Ka,ISo),e(Ka,Xde),e(Xde,qSo),e(Ka,NSo),e(Ka,zde),e(zde,jSo),e(Ka,DSo),e(Qe,GSo),e(Qe,j),e(j,Wb),e(Wb,Qde),e(Qde,OSo),e(Wb,VSo),e(Wb,Rj),e(Rj,XSo),e(Wb,zSo),e(j,QSo),e(j,Hb),e(Hb,Wde),e(Wde,WSo),e(Hb,HSo),e(Hb,Bj),e(Bj,USo),e(Hb,JSo),e(j,YSo),e(j,Ub),e(Ub,Hde),e(Hde,KSo),e(Ub,ZSo),e(Ub,Pj),e(Pj,eRo),e(Ub,oRo),e(j,rRo),e(j,Jb),e(Jb,Ude),e(Ude,tRo),e(Jb,aRo),e(Jb,$j),e($j,nRo),e(Jb,sRo),e(j,lRo),e(j,Yb),e(Yb,Jde),e(Jde,iRo),e(Yb,dRo),e(Yb,Ij),e(Ij,cRo),e(Yb,fRo),e(j,mRo),e(j,Kb),e(Kb,Yde),e(Yde,gRo),e(Kb,hRo),e(Kb,qj),e(qj,pRo),e(Kb,_Ro),e(j,uRo),e(j,Zb),e(Zb,Kde),e(Kde,bRo),e(Zb,FRo),e(Zb,Nj),e(Nj,vRo),e(Zb,TRo),e(j,MRo),e(j,e6),e(e6,Zde),e(Zde,ERo),e(e6,CRo),e(e6,jj),e(jj,wRo),e(e6,ARo),e(j,yRo),e(j,o6),e(o6,ece),e(ece,LRo),e(o6,xRo),e(o6,Dj),e(Dj,kRo),e(o6,SRo),e(j,RRo),e(j,r6),e(r6,oce),e(oce,BRo),e(r6,PRo),e(r6,Gj),e(Gj,$Ro),e(r6,IRo),e(j,qRo),e(j,t6),e(t6,rce),e(rce,NRo),e(t6,jRo),e(t6,Oj),e(Oj,DRo),e(t6,GRo),e(j,ORo),e(j,a6),e(a6,tce),e(tce,VRo),e(a6,XRo),e(a6,Vj),e(Vj,zRo),e(a6,QRo),e(j,WRo),e(j,n6),e(n6,ace),e(ace,HRo),e(n6,URo),e(n6,Xj),e(Xj,JRo),e(n6,YRo),e(j,KRo),e(j,s6),e(s6,nce),e(nce,ZRo),e(s6,eBo),e(s6,zj),e(zj,oBo),e(s6,rBo),e(j,tBo),e(j,l6),e(l6,sce),e(sce,aBo),e(l6,nBo),e(l6,Qj),e(Qj,sBo),e(l6,lBo),e(j,iBo),e(j,i6),e(i6,lce),e(lce,dBo),e(i6,cBo),e(i6,Wj),e(Wj,fBo),e(i6,mBo),e(j,gBo),e(j,d6),e(d6,ice),e(ice,hBo),e(d6,pBo),e(d6,Hj),e(Hj,_Bo),e(d6,uBo),e(j,bBo),e(j,c6),e(c6,dce),e(dce,FBo),e(c6,vBo),e(c6,Uj),e(Uj,TBo),e(c6,MBo),e(j,EBo),e(j,f6),e(f6,cce),e(cce,CBo),e(f6,wBo),e(f6,Jj),e(Jj,ABo),e(f6,yBo),e(j,LBo),e(j,m6),e(m6,fce),e(fce,xBo),e(m6,kBo),e(m6,Yj),e(Yj,SBo),e(m6,RBo),e(j,BBo),e(j,g6),e(g6,mce),e(mce,PBo),e(g6,$Bo),e(g6,Kj),e(Kj,IBo),e(g6,qBo),e(j,NBo),e(j,h6),e(h6,gce),e(gce,jBo),e(h6,DBo),e(h6,Zj),e(Zj,GBo),e(h6,OBo),e(j,VBo),e(j,p6),e(p6,hce),e(hce,XBo),e(p6,zBo),e(p6,eD),e(eD,QBo),e(p6,WBo),e(j,HBo),e(j,_6),e(_6,pce),e(pce,UBo),e(_6,JBo),e(_6,oD),e(oD,YBo),e(_6,KBo),e(j,ZBo),e(j,u6),e(u6,_ce),e(_ce,ePo),e(u6,oPo),e(u6,rD),e(rD,rPo),e(u6,tPo),e(j,aPo),e(j,b6),e(b6,uce),e(uce,nPo),e(b6,sPo),e(b6,tD),e(tD,lPo),e(b6,iPo),e(j,dPo),e(j,F6),e(F6,bce),e(bce,cPo),e(F6,fPo),e(F6,aD),e(aD,mPo),e(F6,gPo),e(j,hPo),e(j,v6),e(v6,Fce),e(Fce,pPo),e(v6,_Po),e(v6,nD),e(nD,uPo),e(v6,bPo),e(j,FPo),e(j,T6),e(T6,vce),e(vce,vPo),e(T6,TPo),e(T6,sD),e(sD,MPo),e(T6,EPo),e(j,CPo),e(j,M6),e(M6,Tce),e(Tce,wPo),e(M6,APo),e(M6,lD),e(lD,yPo),e(M6,LPo),e(j,xPo),e(j,E6),e(E6,Mce),e(Mce,kPo),e(E6,SPo),e(E6,iD),e(iD,RPo),e(E6,BPo),e(j,PPo),e(j,C6),e(C6,Ece),e(Ece,$Po),e(C6,IPo),e(C6,dD),e(dD,qPo),e(C6,NPo),e(j,jPo),e(j,w6),e(w6,Cce),e(Cce,DPo),e(w6,GPo),e(w6,cD),e(cD,OPo),e(w6,VPo),e(Qe,XPo),e(Qe,A6),e(A6,zPo),e(A6,wce),e(wce,QPo),e(A6,WPo),e(A6,Ace),e(Ace,HPo),e(Qe,UPo),e(Qe,yce),e(yce,JPo),e(Qe,YPo),g(CC,Qe,null),b(c,OBe,u),b(c,Ad,u),e(Ad,y6),e(y6,Lce),g(wC,Lce,null),e(Ad,KPo),e(Ad,xce),e(xce,ZPo),b(c,VBe,u),b(c,nr,u),g(AC,nr,null),e(nr,e$o),e(nr,yd),e(yd,o$o),e(yd,fD),e(fD,r$o),e(yd,t$o),e(yd,mD),e(mD,a$o),e(yd,n$o),e(nr,s$o),e(nr,yC),e(yC,l$o),e(yC,kce),e(kce,i$o),e(yC,d$o),e(nr,c$o),e(nr,Zr),g(LC,Zr,null),e(Zr,f$o),e(Zr,Sce),e(Sce,m$o),e(Zr,g$o),e(Zr,Ld),e(Ld,h$o),e(Ld,Rce),e(Rce,p$o),e(Ld,_$o),e(Ld,gD),e(gD,u$o),e(Ld,b$o),e(Zr,F$o),e(Zr,Bce),e(Bce,v$o),e(Zr,T$o),g(xC,Zr,null),e(nr,M$o),e(nr,We),g(kC,We,null),e(We,E$o),e(We,Pce),e(Pce,C$o),e(We,w$o),e(We,Za),e(Za,A$o),e(Za,$ce),e($ce,y$o),e(Za,L$o),e(Za,Ice),e(Ice,x$o),e(Za,k$o),e(Za,qce),e(qce,S$o),e(Za,R$o),e(We,B$o),e(We,R),e(R,L6),e(L6,Nce),e(Nce,P$o),e(L6,$$o),e(L6,hD),e(hD,I$o),e(L6,q$o),e(R,N$o),e(R,x6),e(x6,jce),e(jce,j$o),e(x6,D$o),e(x6,pD),e(pD,G$o),e(x6,O$o),e(R,V$o),e(R,k6),e(k6,Dce),e(Dce,X$o),e(k6,z$o),e(k6,_D),e(_D,Q$o),e(k6,W$o),e(R,H$o),e(R,S6),e(S6,Gce),e(Gce,U$o),e(S6,J$o),e(S6,uD),e(uD,Y$o),e(S6,K$o),e(R,Z$o),e(R,R6),e(R6,Oce),e(Oce,eIo),e(R6,oIo),e(R6,bD),e(bD,rIo),e(R6,tIo),e(R,aIo),e(R,B6),e(B6,Vce),e(Vce,nIo),e(B6,sIo),e(B6,FD),e(FD,lIo),e(B6,iIo),e(R,dIo),e(R,P6),e(P6,Xce),e(Xce,cIo),e(P6,fIo),e(P6,vD),e(vD,mIo),e(P6,gIo),e(R,hIo),e(R,$6),e($6,zce),e(zce,pIo),e($6,_Io),e($6,TD),e(TD,uIo),e($6,bIo),e(R,FIo),e(R,I6),e(I6,Qce),e(Qce,vIo),e(I6,TIo),e(I6,MD),e(MD,MIo),e(I6,EIo),e(R,CIo),e(R,q6),e(q6,Wce),e(Wce,wIo),e(q6,AIo),e(q6,ED),e(ED,yIo),e(q6,LIo),e(R,xIo),e(R,N6),e(N6,Hce),e(Hce,kIo),e(N6,SIo),e(N6,CD),e(CD,RIo),e(N6,BIo),e(R,PIo),e(R,j6),e(j6,Uce),e(Uce,$Io),e(j6,IIo),e(j6,wD),e(wD,qIo),e(j6,NIo),e(R,jIo),e(R,D6),e(D6,Jce),e(Jce,DIo),e(D6,GIo),e(D6,AD),e(AD,OIo),e(D6,VIo),e(R,XIo),e(R,G6),e(G6,Yce),e(Yce,zIo),e(G6,QIo),e(G6,yD),e(yD,WIo),e(G6,HIo),e(R,UIo),e(R,O6),e(O6,Kce),e(Kce,JIo),e(O6,YIo),e(O6,LD),e(LD,KIo),e(O6,ZIo),e(R,eqo),e(R,V6),e(V6,Zce),e(Zce,oqo),e(V6,rqo),e(V6,xD),e(xD,tqo),e(V6,aqo),e(R,nqo),e(R,X6),e(X6,efe),e(efe,sqo),e(X6,lqo),e(X6,kD),e(kD,iqo),e(X6,dqo),e(R,cqo),e(R,z6),e(z6,ofe),e(ofe,fqo),e(z6,mqo),e(z6,SD),e(SD,gqo),e(z6,hqo),e(R,pqo),e(R,Q6),e(Q6,rfe),e(rfe,_qo),e(Q6,uqo),e(Q6,RD),e(RD,bqo),e(Q6,Fqo),e(R,vqo),e(R,W6),e(W6,tfe),e(tfe,Tqo),e(W6,Mqo),e(W6,BD),e(BD,Eqo),e(W6,Cqo),e(R,wqo),e(R,H6),e(H6,afe),e(afe,Aqo),e(H6,yqo),e(H6,PD),e(PD,Lqo),e(H6,xqo),e(R,kqo),e(R,U6),e(U6,nfe),e(nfe,Sqo),e(U6,Rqo),e(U6,$D),e($D,Bqo),e(U6,Pqo),e(R,$qo),e(R,J6),e(J6,sfe),e(sfe,Iqo),e(J6,qqo),e(J6,ID),e(ID,Nqo),e(J6,jqo),e(R,Dqo),e(R,Y6),e(Y6,lfe),e(lfe,Gqo),e(Y6,Oqo),e(Y6,qD),e(qD,Vqo),e(Y6,Xqo),e(R,zqo),e(R,K6),e(K6,ife),e(ife,Qqo),e(K6,Wqo),e(K6,ND),e(ND,Hqo),e(K6,Uqo),e(R,Jqo),e(R,Z6),e(Z6,dfe),e(dfe,Yqo),e(Z6,Kqo),e(Z6,jD),e(jD,Zqo),e(Z6,eNo),e(R,oNo),e(R,eF),e(eF,cfe),e(cfe,rNo),e(eF,tNo),e(eF,DD),e(DD,aNo),e(eF,nNo),e(R,sNo),e(R,oF),e(oF,ffe),e(ffe,lNo),e(oF,iNo),e(oF,GD),e(GD,dNo),e(oF,cNo),e(R,fNo),e(R,rF),e(rF,mfe),e(mfe,mNo),e(rF,gNo),e(rF,OD),e(OD,hNo),e(rF,pNo),e(R,_No),e(R,tF),e(tF,gfe),e(gfe,uNo),e(tF,bNo),e(tF,VD),e(VD,FNo),e(tF,vNo),e(R,TNo),e(R,aF),e(aF,hfe),e(hfe,MNo),e(aF,ENo),e(aF,XD),e(XD,CNo),e(aF,wNo),e(R,ANo),e(R,nF),e(nF,pfe),e(pfe,yNo),e(nF,LNo),e(nF,zD),e(zD,xNo),e(nF,kNo),e(R,SNo),e(R,sF),e(sF,_fe),e(_fe,RNo),e(sF,BNo),e(sF,QD),e(QD,PNo),e(sF,$No),e(R,INo),e(R,lF),e(lF,ufe),e(ufe,qNo),e(lF,NNo),e(lF,WD),e(WD,jNo),e(lF,DNo),e(R,GNo),e(R,iF),e(iF,bfe),e(bfe,ONo),e(iF,VNo),e(iF,HD),e(HD,XNo),e(iF,zNo),e(R,QNo),e(R,dF),e(dF,Ffe),e(Ffe,WNo),e(dF,HNo),e(dF,UD),e(UD,UNo),e(dF,JNo),e(R,YNo),e(R,cF),e(cF,vfe),e(vfe,KNo),e(cF,ZNo),e(cF,JD),e(JD,ejo),e(cF,ojo),e(R,rjo),e(R,fF),e(fF,Tfe),e(Tfe,tjo),e(fF,ajo),e(fF,YD),e(YD,njo),e(fF,sjo),e(R,ljo),e(R,mF),e(mF,Mfe),e(Mfe,ijo),e(mF,djo),e(mF,KD),e(KD,cjo),e(mF,fjo),e(We,mjo),e(We,gF),e(gF,gjo),e(gF,Efe),e(Efe,hjo),e(gF,pjo),e(gF,Cfe),e(Cfe,_jo),e(We,ujo),e(We,wfe),e(wfe,bjo),e(We,Fjo),g(SC,We,null),b(c,XBe,u),b(c,xd,u),e(xd,hF),e(hF,Afe),g(RC,Afe,null),e(xd,vjo),e(xd,yfe),e(yfe,Tjo),b(c,zBe,u),b(c,sr,u),g(BC,sr,null),e(sr,Mjo),e(sr,kd),e(kd,Ejo),e(kd,ZD),e(ZD,Cjo),e(kd,wjo),e(kd,eG),e(eG,Ajo),e(kd,yjo),e(sr,Ljo),e(sr,PC),e(PC,xjo),e(PC,Lfe),e(Lfe,kjo),e(PC,Sjo),e(sr,Rjo),e(sr,et),g($C,et,null),e(et,Bjo),e(et,xfe),e(xfe,Pjo),e(et,$jo),e(et,Sd),e(Sd,Ijo),e(Sd,kfe),e(kfe,qjo),e(Sd,Njo),e(Sd,oG),e(oG,jjo),e(Sd,Djo),e(et,Gjo),e(et,Sfe),e(Sfe,Ojo),e(et,Vjo),g(IC,et,null),e(sr,Xjo),e(sr,He),g(qC,He,null),e(He,zjo),e(He,Rfe),e(Rfe,Qjo),e(He,Wjo),e(He,en),e(en,Hjo),e(en,Bfe),e(Bfe,Ujo),e(en,Jjo),e(en,Pfe),e(Pfe,Yjo),e(en,Kjo),e(en,$fe),e($fe,Zjo),e(en,eDo),e(He,oDo),e(He,Ife),e(Ife,pF),e(pF,qfe),e(qfe,rDo),e(pF,tDo),e(pF,rG),e(rG,aDo),e(pF,nDo),e(He,sDo),e(He,_F),e(_F,lDo),e(_F,Nfe),e(Nfe,iDo),e(_F,dDo),e(_F,jfe),e(jfe,cDo),e(He,fDo),e(He,Dfe),e(Dfe,mDo),e(He,gDo),g(NC,He,null),b(c,QBe,u),b(c,Rd,u),e(Rd,uF),e(uF,Gfe),g(jC,Gfe,null),e(Rd,hDo),e(Rd,Ofe),e(Ofe,pDo),b(c,WBe,u),b(c,lr,u),g(DC,lr,null),e(lr,_Do),e(lr,Bd),e(Bd,uDo),e(Bd,tG),e(tG,bDo),e(Bd,FDo),e(Bd,aG),e(aG,vDo),e(Bd,TDo),e(lr,MDo),e(lr,GC),e(GC,EDo),e(GC,Vfe),e(Vfe,CDo),e(GC,wDo),e(lr,ADo),e(lr,ot),g(OC,ot,null),e(ot,yDo),e(ot,Xfe),e(Xfe,LDo),e(ot,xDo),e(ot,Pd),e(Pd,kDo),e(Pd,zfe),e(zfe,SDo),e(Pd,RDo),e(Pd,nG),e(nG,BDo),e(Pd,PDo),e(ot,$Do),e(ot,Qfe),e(Qfe,IDo),e(ot,qDo),g(VC,ot,null),e(lr,NDo),e(lr,Ue),g(XC,Ue,null),e(Ue,jDo),e(Ue,Wfe),e(Wfe,DDo),e(Ue,GDo),e(Ue,on),e(on,ODo),e(on,Hfe),e(Hfe,VDo),e(on,XDo),e(on,Ufe),e(Ufe,zDo),e(on,QDo),e(on,Jfe),e(Jfe,WDo),e(on,HDo),e(Ue,UDo),e(Ue,de),e(de,bF),e(bF,Yfe),e(Yfe,JDo),e(bF,YDo),e(bF,sG),e(sG,KDo),e(bF,ZDo),e(de,eGo),e(de,FF),e(FF,Kfe),e(Kfe,oGo),e(FF,rGo),e(FF,lG),e(lG,tGo),e(FF,aGo),e(de,nGo),e(de,vF),e(vF,Zfe),e(Zfe,sGo),e(vF,lGo),e(vF,iG),e(iG,iGo),e(vF,dGo),e(de,cGo),e(de,Vs),e(Vs,eme),e(eme,fGo),e(Vs,mGo),e(Vs,dG),e(dG,gGo),e(Vs,hGo),e(Vs,cG),e(cG,pGo),e(Vs,_Go),e(de,uGo),e(de,TF),e(TF,ome),e(ome,bGo),e(TF,FGo),e(TF,fG),e(fG,vGo),e(TF,TGo),e(de,MGo),e(de,ma),e(ma,rme),e(rme,EGo),e(ma,CGo),e(ma,mG),e(mG,wGo),e(ma,AGo),e(ma,gG),e(gG,yGo),e(ma,LGo),e(ma,hG),e(hG,xGo),e(ma,kGo),e(de,SGo),e(de,MF),e(MF,tme),e(tme,RGo),e(MF,BGo),e(MF,pG),e(pG,PGo),e(MF,$Go),e(de,IGo),e(de,EF),e(EF,ame),e(ame,qGo),e(EF,NGo),e(EF,_G),e(_G,jGo),e(EF,DGo),e(de,GGo),e(de,CF),e(CF,nme),e(nme,OGo),e(CF,VGo),e(CF,uG),e(uG,XGo),e(CF,zGo),e(de,QGo),e(de,wF),e(wF,sme),e(sme,WGo),e(wF,HGo),e(wF,bG),e(bG,UGo),e(wF,JGo),e(de,YGo),e(de,AF),e(AF,lme),e(lme,KGo),e(AF,ZGo),e(AF,FG),e(FG,eOo),e(AF,oOo),e(de,rOo),e(de,yF),e(yF,ime),e(ime,tOo),e(yF,aOo),e(yF,vG),e(vG,nOo),e(yF,sOo),e(de,lOo),e(de,LF),e(LF,dme),e(dme,iOo),e(LF,dOo),e(LF,TG),e(TG,cOo),e(LF,fOo),e(Ue,mOo),e(Ue,xF),e(xF,gOo),e(xF,cme),e(cme,hOo),e(xF,pOo),e(xF,fme),e(fme,_Oo),e(Ue,uOo),e(Ue,mme),e(mme,bOo),e(Ue,FOo),g(zC,Ue,null),b(c,HBe,u),b(c,$d,u),e($d,kF),e(kF,gme),g(QC,gme,null),e($d,vOo),e($d,hme),e(hme,TOo),b(c,UBe,u),b(c,ir,u),g(WC,ir,null),e(ir,MOo),e(ir,Id),e(Id,EOo),e(Id,MG),e(MG,COo),e(Id,wOo),e(Id,EG),e(EG,AOo),e(Id,yOo),e(ir,LOo),e(ir,HC),e(HC,xOo),e(HC,pme),e(pme,kOo),e(HC,SOo),e(ir,ROo),e(ir,rt),g(UC,rt,null),e(rt,BOo),e(rt,_me),e(_me,POo),e(rt,$Oo),e(rt,qd),e(qd,IOo),e(qd,ume),e(ume,qOo),e(qd,NOo),e(qd,CG),e(CG,jOo),e(qd,DOo),e(rt,GOo),e(rt,bme),e(bme,OOo),e(rt,VOo),g(JC,rt,null),e(ir,XOo),e(ir,Je),g(YC,Je,null),e(Je,zOo),e(Je,Fme),e(Fme,QOo),e(Je,WOo),e(Je,rn),e(rn,HOo),e(rn,vme),e(vme,UOo),e(rn,JOo),e(rn,Tme),e(Tme,YOo),e(rn,KOo),e(rn,Mme),e(Mme,ZOo),e(rn,eVo),e(Je,oVo),e(Je,Eme),e(Eme,SF),e(SF,Cme),e(Cme,rVo),e(SF,tVo),e(SF,wG),e(wG,aVo),e(SF,nVo),e(Je,sVo),e(Je,RF),e(RF,lVo),e(RF,wme),e(wme,iVo),e(RF,dVo),e(RF,Ame),e(Ame,cVo),e(Je,fVo),e(Je,yme),e(yme,mVo),e(Je,gVo),g(KC,Je,null),b(c,JBe,u),b(c,Nd,u),e(Nd,BF),e(BF,Lme),g(ZC,Lme,null),e(Nd,hVo),e(Nd,xme),e(xme,pVo),b(c,YBe,u),b(c,dr,u),g(ew,dr,null),e(dr,_Vo),e(dr,jd),e(jd,uVo),e(jd,AG),e(AG,bVo),e(jd,FVo),e(jd,yG),e(yG,vVo),e(jd,TVo),e(dr,MVo),e(dr,ow),e(ow,EVo),e(ow,kme),e(kme,CVo),e(ow,wVo),e(dr,AVo),e(dr,tt),g(rw,tt,null),e(tt,yVo),e(tt,Sme),e(Sme,LVo),e(tt,xVo),e(tt,Dd),e(Dd,kVo),e(Dd,Rme),e(Rme,SVo),e(Dd,RVo),e(Dd,LG),e(LG,BVo),e(Dd,PVo),e(tt,$Vo),e(tt,Bme),e(Bme,IVo),e(tt,qVo),g(tw,tt,null),e(dr,NVo),e(dr,Ye),g(aw,Ye,null),e(Ye,jVo),e(Ye,Pme),e(Pme,DVo),e(Ye,GVo),e(Ye,tn),e(tn,OVo),e(tn,$me),e($me,VVo),e(tn,XVo),e(tn,Ime),e(Ime,zVo),e(tn,QVo),e(tn,qme),e(qme,WVo),e(tn,HVo),e(Ye,UVo),e(Ye,Re),e(Re,PF),e(PF,Nme),e(Nme,JVo),e(PF,YVo),e(PF,xG),e(xG,KVo),e(PF,ZVo),e(Re,eXo),e(Re,$F),e($F,jme),e(jme,oXo),e($F,rXo),e($F,kG),e(kG,tXo),e($F,aXo),e(Re,nXo),e(Re,IF),e(IF,Dme),e(Dme,sXo),e(IF,lXo),e(IF,SG),e(SG,iXo),e(IF,dXo),e(Re,cXo),e(Re,qF),e(qF,Gme),e(Gme,fXo),e(qF,mXo),e(qF,RG),e(RG,gXo),e(qF,hXo),e(Re,pXo),e(Re,NF),e(NF,Ome),e(Ome,_Xo),e(NF,uXo),e(NF,BG),e(BG,bXo),e(NF,FXo),e(Re,vXo),e(Re,jF),e(jF,Vme),e(Vme,TXo),e(jF,MXo),e(jF,PG),e(PG,EXo),e(jF,CXo),e(Re,wXo),e(Re,DF),e(DF,Xme),e(Xme,AXo),e(DF,yXo),e(DF,$G),e($G,LXo),e(DF,xXo),e(Re,kXo),e(Re,GF),e(GF,zme),e(zme,SXo),e(GF,RXo),e(GF,IG),e(IG,BXo),e(GF,PXo),e(Ye,$Xo),e(Ye,OF),e(OF,IXo),e(OF,Qme),e(Qme,qXo),e(OF,NXo),e(OF,Wme),e(Wme,jXo),e(Ye,DXo),e(Ye,Hme),e(Hme,GXo),e(Ye,OXo),g(nw,Ye,null),b(c,KBe,u),b(c,Gd,u),e(Gd,VF),e(VF,Ume),g(sw,Ume,null),e(Gd,VXo),e(Gd,Jme),e(Jme,XXo),b(c,ZBe,u),b(c,cr,u),g(lw,cr,null),e(cr,zXo),e(cr,Od),e(Od,QXo),e(Od,qG),e(qG,WXo),e(Od,HXo),e(Od,NG),e(NG,UXo),e(Od,JXo),e(cr,YXo),e(cr,iw),e(iw,KXo),e(iw,Yme),e(Yme,ZXo),e(iw,ezo),e(cr,ozo),e(cr,at),g(dw,at,null),e(at,rzo),e(at,Kme),e(Kme,tzo),e(at,azo),e(at,Vd),e(Vd,nzo),e(Vd,Zme),e(Zme,szo),e(Vd,lzo),e(Vd,jG),e(jG,izo),e(Vd,dzo),e(at,czo),e(at,ege),e(ege,fzo),e(at,mzo),g(cw,at,null),e(cr,gzo),e(cr,Ke),g(fw,Ke,null),e(Ke,hzo),e(Ke,oge),e(oge,pzo),e(Ke,_zo),e(Ke,an),e(an,uzo),e(an,rge),e(rge,bzo),e(an,Fzo),e(an,tge),e(tge,vzo),e(an,Tzo),e(an,age),e(age,Mzo),e(an,Ezo),e(Ke,Czo),e(Ke,nn),e(nn,XF),e(XF,nge),e(nge,wzo),e(XF,Azo),e(XF,DG),e(DG,yzo),e(XF,Lzo),e(nn,xzo),e(nn,zF),e(zF,sge),e(sge,kzo),e(zF,Szo),e(zF,GG),e(GG,Rzo),e(zF,Bzo),e(nn,Pzo),e(nn,QF),e(QF,lge),e(lge,$zo),e(QF,Izo),e(QF,OG),e(OG,qzo),e(QF,Nzo),e(nn,jzo),e(nn,WF),e(WF,ige),e(ige,Dzo),e(WF,Gzo),e(WF,VG),e(VG,Ozo),e(WF,Vzo),e(Ke,Xzo),e(Ke,HF),e(HF,zzo),e(HF,dge),e(dge,Qzo),e(HF,Wzo),e(HF,cge),e(cge,Hzo),e(Ke,Uzo),e(Ke,fge),e(fge,Jzo),e(Ke,Yzo),g(mw,Ke,null),b(c,ePe,u),b(c,Xd,u),e(Xd,UF),e(UF,mge),g(gw,mge,null),e(Xd,Kzo),e(Xd,gge),e(gge,Zzo),b(c,oPe,u),b(c,fr,u),g(hw,fr,null),e(fr,eQo),e(fr,zd),e(zd,oQo),e(zd,XG),e(XG,rQo),e(zd,tQo),e(zd,zG),e(zG,aQo),e(zd,nQo),e(fr,sQo),e(fr,pw),e(pw,lQo),e(pw,hge),e(hge,iQo),e(pw,dQo),e(fr,cQo),e(fr,nt),g(_w,nt,null),e(nt,fQo),e(nt,pge),e(pge,mQo),e(nt,gQo),e(nt,Qd),e(Qd,hQo),e(Qd,_ge),e(_ge,pQo),e(Qd,_Qo),e(Qd,QG),e(QG,uQo),e(Qd,bQo),e(nt,FQo),e(nt,uge),e(uge,vQo),e(nt,TQo),g(uw,nt,null),e(fr,MQo),e(fr,Ze),g(bw,Ze,null),e(Ze,EQo),e(Ze,bge),e(bge,CQo),e(Ze,wQo),e(Ze,sn),e(sn,AQo),e(sn,Fge),e(Fge,yQo),e(sn,LQo),e(sn,vge),e(vge,xQo),e(sn,kQo),e(sn,Tge),e(Tge,SQo),e(sn,RQo),e(Ze,BQo),e(Ze,Be),e(Be,JF),e(JF,Mge),e(Mge,PQo),e(JF,$Qo),e(JF,WG),e(WG,IQo),e(JF,qQo),e(Be,NQo),e(Be,YF),e(YF,Ege),e(Ege,jQo),e(YF,DQo),e(YF,HG),e(HG,GQo),e(YF,OQo),e(Be,VQo),e(Be,KF),e(KF,Cge),e(Cge,XQo),e(KF,zQo),e(KF,UG),e(UG,QQo),e(KF,WQo),e(Be,HQo),e(Be,ZF),e(ZF,wge),e(wge,UQo),e(ZF,JQo),e(ZF,JG),e(JG,YQo),e(ZF,KQo),e(Be,ZQo),e(Be,ev),e(ev,Age),e(Age,eWo),e(ev,oWo),e(ev,YG),e(YG,rWo),e(ev,tWo),e(Be,aWo),e(Be,ov),e(ov,yge),e(yge,nWo),e(ov,sWo),e(ov,KG),e(KG,lWo),e(ov,iWo),e(Be,dWo),e(Be,rv),e(rv,Lge),e(Lge,cWo),e(rv,fWo),e(rv,ZG),e(ZG,mWo),e(rv,gWo),e(Be,hWo),e(Be,tv),e(tv,xge),e(xge,pWo),e(tv,_Wo),e(tv,eO),e(eO,uWo),e(tv,bWo),e(Ze,FWo),e(Ze,av),e(av,vWo),e(av,kge),e(kge,TWo),e(av,MWo),e(av,Sge),e(Sge,EWo),e(Ze,CWo),e(Ze,Rge),e(Rge,wWo),e(Ze,AWo),g(Fw,Ze,null),b(c,rPe,u),b(c,Wd,u),e(Wd,nv),e(nv,Bge),g(vw,Bge,null),e(Wd,yWo),e(Wd,Pge),e(Pge,LWo),b(c,tPe,u),b(c,mr,u),g(Tw,mr,null),e(mr,xWo),e(mr,Hd),e(Hd,kWo),e(Hd,oO),e(oO,SWo),e(Hd,RWo),e(Hd,rO),e(rO,BWo),e(Hd,PWo),e(mr,$Wo),e(mr,Mw),e(Mw,IWo),e(Mw,$ge),e($ge,qWo),e(Mw,NWo),e(mr,jWo),e(mr,st),g(Ew,st,null),e(st,DWo),e(st,Ige),e(Ige,GWo),e(st,OWo),e(st,Ud),e(Ud,VWo),e(Ud,qge),e(qge,XWo),e(Ud,zWo),e(Ud,tO),e(tO,QWo),e(Ud,WWo),e(st,HWo),e(st,Nge),e(Nge,UWo),e(st,JWo),g(Cw,st,null),e(mr,YWo),e(mr,eo),g(ww,eo,null),e(eo,KWo),e(eo,jge),e(jge,ZWo),e(eo,eHo),e(eo,ln),e(ln,oHo),e(ln,Dge),e(Dge,rHo),e(ln,tHo),e(ln,Gge),e(Gge,aHo),e(ln,nHo),e(ln,Oge),e(Oge,sHo),e(ln,lHo),e(eo,iHo),e(eo,Aw),e(Aw,sv),e(sv,Vge),e(Vge,dHo),e(sv,cHo),e(sv,aO),e(aO,fHo),e(sv,mHo),e(Aw,gHo),e(Aw,lv),e(lv,Xge),e(Xge,hHo),e(lv,pHo),e(lv,nO),e(nO,_Ho),e(lv,uHo),e(eo,bHo),e(eo,iv),e(iv,FHo),e(iv,zge),e(zge,vHo),e(iv,THo),e(iv,Qge),e(Qge,MHo),e(eo,EHo),e(eo,Wge),e(Wge,CHo),e(eo,wHo),g(yw,eo,null),b(c,aPe,u),b(c,Jd,u),e(Jd,dv),e(dv,Hge),g(Lw,Hge,null),e(Jd,AHo),e(Jd,Uge),e(Uge,yHo),b(c,nPe,u),b(c,gr,u),g(xw,gr,null),e(gr,LHo),e(gr,Yd),e(Yd,xHo),e(Yd,sO),e(sO,kHo),e(Yd,SHo),e(Yd,lO),e(lO,RHo),e(Yd,BHo),e(gr,PHo),e(gr,kw),e(kw,$Ho),e(kw,Jge),e(Jge,IHo),e(kw,qHo),e(gr,NHo),e(gr,lt),g(Sw,lt,null),e(lt,jHo),e(lt,Yge),e(Yge,DHo),e(lt,GHo),e(lt,Kd),e(Kd,OHo),e(Kd,Kge),e(Kge,VHo),e(Kd,XHo),e(Kd,iO),e(iO,zHo),e(Kd,QHo),e(lt,WHo),e(lt,Zge),e(Zge,HHo),e(lt,UHo),g(Rw,lt,null),e(gr,JHo),e(gr,oo),g(Bw,oo,null),e(oo,YHo),e(oo,ehe),e(ehe,KHo),e(oo,ZHo),e(oo,dn),e(dn,eUo),e(dn,ohe),e(ohe,oUo),e(dn,rUo),e(dn,rhe),e(rhe,tUo),e(dn,aUo),e(dn,the),e(the,nUo),e(dn,sUo),e(oo,lUo),e(oo,cn),e(cn,cv),e(cv,ahe),e(ahe,iUo),e(cv,dUo),e(cv,dO),e(dO,cUo),e(cv,fUo),e(cn,mUo),e(cn,fv),e(fv,nhe),e(nhe,gUo),e(fv,hUo),e(fv,cO),e(cO,pUo),e(fv,_Uo),e(cn,uUo),e(cn,mv),e(mv,she),e(she,bUo),e(mv,FUo),e(mv,fO),e(fO,vUo),e(mv,TUo),e(cn,MUo),e(cn,gv),e(gv,lhe),e(lhe,EUo),e(gv,CUo),e(gv,mO),e(mO,wUo),e(gv,AUo),e(oo,yUo),e(oo,hv),e(hv,LUo),e(hv,ihe),e(ihe,xUo),e(hv,kUo),e(hv,dhe),e(dhe,SUo),e(oo,RUo),e(oo,che),e(che,BUo),e(oo,PUo),g(Pw,oo,null),b(c,sPe,u),b(c,Zd,u),e(Zd,pv),e(pv,fhe),g($w,fhe,null),e(Zd,$Uo),e(Zd,mhe),e(mhe,IUo),b(c,lPe,u),b(c,hr,u),g(Iw,hr,null),e(hr,qUo),e(hr,ec),e(ec,NUo),e(ec,gO),e(gO,jUo),e(ec,DUo),e(ec,hO),e(hO,GUo),e(ec,OUo),e(hr,VUo),e(hr,qw),e(qw,XUo),e(qw,ghe),e(ghe,zUo),e(qw,QUo),e(hr,WUo),e(hr,it),g(Nw,it,null),e(it,HUo),e(it,hhe),e(hhe,UUo),e(it,JUo),e(it,oc),e(oc,YUo),e(oc,phe),e(phe,KUo),e(oc,ZUo),e(oc,pO),e(pO,eJo),e(oc,oJo),e(it,rJo),e(it,_he),e(_he,tJo),e(it,aJo),g(jw,it,null),e(hr,nJo),e(hr,ro),g(Dw,ro,null),e(ro,sJo),e(ro,uhe),e(uhe,lJo),e(ro,iJo),e(ro,fn),e(fn,dJo),e(fn,bhe),e(bhe,cJo),e(fn,fJo),e(fn,Fhe),e(Fhe,mJo),e(fn,gJo),e(fn,vhe),e(vhe,hJo),e(fn,pJo),e(ro,_Jo),e(ro,rc),e(rc,_v),e(_v,The),e(The,uJo),e(_v,bJo),e(_v,_O),e(_O,FJo),e(_v,vJo),e(rc,TJo),e(rc,uv),e(uv,Mhe),e(Mhe,MJo),e(uv,EJo),e(uv,uO),e(uO,CJo),e(uv,wJo),e(rc,AJo),e(rc,bv),e(bv,Ehe),e(Ehe,yJo),e(bv,LJo),e(bv,bO),e(bO,xJo),e(bv,kJo),e(ro,SJo),e(ro,Fv),e(Fv,RJo),e(Fv,Che),e(Che,BJo),e(Fv,PJo),e(Fv,whe),e(whe,$Jo),e(ro,IJo),e(ro,Ahe),e(Ahe,qJo),e(ro,NJo),g(Gw,ro,null),b(c,iPe,u),b(c,tc,u),e(tc,vv),e(vv,yhe),g(Ow,yhe,null),e(tc,jJo),e(tc,Lhe),e(Lhe,DJo),b(c,dPe,u),b(c,pr,u),g(Vw,pr,null),e(pr,GJo),e(pr,ac),e(ac,OJo),e(ac,FO),e(FO,VJo),e(ac,XJo),e(ac,vO),e(vO,zJo),e(ac,QJo),e(pr,WJo),e(pr,Xw),e(Xw,HJo),e(Xw,xhe),e(xhe,UJo),e(Xw,JJo),e(pr,YJo),e(pr,dt),g(zw,dt,null),e(dt,KJo),e(dt,khe),e(khe,ZJo),e(dt,eYo),e(dt,nc),e(nc,oYo),e(nc,She),e(She,rYo),e(nc,tYo),e(nc,TO),e(TO,aYo),e(nc,nYo),e(dt,sYo),e(dt,Rhe),e(Rhe,lYo),e(dt,iYo),g(Qw,dt,null),e(pr,dYo),e(pr,to),g(Ww,to,null),e(to,cYo),e(to,Bhe),e(Bhe,fYo),e(to,mYo),e(to,mn),e(mn,gYo),e(mn,Phe),e(Phe,hYo),e(mn,pYo),e(mn,$he),e($he,_Yo),e(mn,uYo),e(mn,Ihe),e(Ihe,bYo),e(mn,FYo),e(to,vYo),e(to,qhe),e(qhe,Tv),e(Tv,Nhe),e(Nhe,TYo),e(Tv,MYo),e(Tv,MO),e(MO,EYo),e(Tv,CYo),e(to,wYo),e(to,Mv),e(Mv,AYo),e(Mv,jhe),e(jhe,yYo),e(Mv,LYo),e(Mv,Dhe),e(Dhe,xYo),e(to,kYo),e(to,Ghe),e(Ghe,SYo),e(to,RYo),g(Hw,to,null),b(c,cPe,u),b(c,sc,u),e(sc,Ev),e(Ev,Ohe),g(Uw,Ohe,null),e(sc,BYo),e(sc,Vhe),e(Vhe,PYo),b(c,fPe,u),b(c,_r,u),g(Jw,_r,null),e(_r,$Yo),e(_r,lc),e(lc,IYo),e(lc,EO),e(EO,qYo),e(lc,NYo),e(lc,CO),e(CO,jYo),e(lc,DYo),e(_r,GYo),e(_r,Yw),e(Yw,OYo),e(Yw,Xhe),e(Xhe,VYo),e(Yw,XYo),e(_r,zYo),e(_r,ct),g(Kw,ct,null),e(ct,QYo),e(ct,zhe),e(zhe,WYo),e(ct,HYo),e(ct,ic),e(ic,UYo),e(ic,Qhe),e(Qhe,JYo),e(ic,YYo),e(ic,wO),e(wO,KYo),e(ic,ZYo),e(ct,eKo),e(ct,Whe),e(Whe,oKo),e(ct,rKo),g(Zw,ct,null),e(_r,tKo),e(_r,ao),g(eA,ao,null),e(ao,aKo),e(ao,Hhe),e(Hhe,nKo),e(ao,sKo),e(ao,gn),e(gn,lKo),e(gn,Uhe),e(Uhe,iKo),e(gn,dKo),e(gn,Jhe),e(Jhe,cKo),e(gn,fKo),e(gn,Yhe),e(Yhe,mKo),e(gn,gKo),e(ao,hKo),e(ao,Khe),e(Khe,Cv),e(Cv,Zhe),e(Zhe,pKo),e(Cv,_Ko),e(Cv,AO),e(AO,uKo),e(Cv,bKo),e(ao,FKo),e(ao,wv),e(wv,vKo),e(wv,epe),e(epe,TKo),e(wv,MKo),e(wv,ope),e(ope,EKo),e(ao,CKo),e(ao,rpe),e(rpe,wKo),e(ao,AKo),g(oA,ao,null),b(c,mPe,u),b(c,dc,u),e(dc,Av),e(Av,tpe),g(rA,tpe,null),e(dc,yKo),e(dc,ape),e(ape,LKo),b(c,gPe,u),b(c,ur,u),g(tA,ur,null),e(ur,xKo),e(ur,cc),e(cc,kKo),e(cc,yO),e(yO,SKo),e(cc,RKo),e(cc,LO),e(LO,BKo),e(cc,PKo),e(ur,$Ko),e(ur,aA),e(aA,IKo),e(aA,npe),e(npe,qKo),e(aA,NKo),e(ur,jKo),e(ur,ft),g(nA,ft,null),e(ft,DKo),e(ft,spe),e(spe,GKo),e(ft,OKo),e(ft,fc),e(fc,VKo),e(fc,lpe),e(lpe,XKo),e(fc,zKo),e(fc,xO),e(xO,QKo),e(fc,WKo),e(ft,HKo),e(ft,ipe),e(ipe,UKo),e(ft,JKo),g(sA,ft,null),e(ur,YKo),e(ur,no),g(lA,no,null),e(no,KKo),e(no,dpe),e(dpe,ZKo),e(no,eZo),e(no,hn),e(hn,oZo),e(hn,cpe),e(cpe,rZo),e(hn,tZo),e(hn,fpe),e(fpe,aZo),e(hn,nZo),e(hn,mpe),e(mpe,sZo),e(hn,lZo),e(no,iZo),e(no,pn),e(pn,yv),e(yv,gpe),e(gpe,dZo),e(yv,cZo),e(yv,kO),e(kO,fZo),e(yv,mZo),e(pn,gZo),e(pn,Lv),e(Lv,hpe),e(hpe,hZo),e(Lv,pZo),e(Lv,SO),e(SO,_Zo),e(Lv,uZo),e(pn,bZo),e(pn,xv),e(xv,ppe),e(ppe,FZo),e(xv,vZo),e(xv,RO),e(RO,TZo),e(xv,MZo),e(pn,EZo),e(pn,kv),e(kv,_pe),e(_pe,CZo),e(kv,wZo),e(kv,BO),e(BO,AZo),e(kv,yZo),e(no,LZo),e(no,Sv),e(Sv,xZo),e(Sv,upe),e(upe,kZo),e(Sv,SZo),e(Sv,bpe),e(bpe,RZo),e(no,BZo),e(no,Fpe),e(Fpe,PZo),e(no,$Zo),g(iA,no,null),b(c,hPe,u),b(c,mc,u),e(mc,Rv),e(Rv,vpe),g(dA,vpe,null),e(mc,IZo),e(mc,Tpe),e(Tpe,qZo),b(c,pPe,u),b(c,br,u),g(cA,br,null),e(br,NZo),e(br,gc),e(gc,jZo),e(gc,PO),e(PO,DZo),e(gc,GZo),e(gc,$O),e($O,OZo),e(gc,VZo),e(br,XZo),e(br,fA),e(fA,zZo),e(fA,Mpe),e(Mpe,QZo),e(fA,WZo),e(br,HZo),e(br,mt),g(mA,mt,null),e(mt,UZo),e(mt,Epe),e(Epe,JZo),e(mt,YZo),e(mt,hc),e(hc,KZo),e(hc,Cpe),e(Cpe,ZZo),e(hc,eer),e(hc,IO),e(IO,oer),e(hc,rer),e(mt,ter),e(mt,wpe),e(wpe,aer),e(mt,ner),g(gA,mt,null),e(br,ser),e(br,so),g(hA,so,null),e(so,ler),e(so,Ape),e(Ape,ier),e(so,der),e(so,_n),e(_n,cer),e(_n,ype),e(ype,fer),e(_n,mer),e(_n,Lpe),e(Lpe,ger),e(_n,her),e(_n,xpe),e(xpe,per),e(_n,_er),e(so,uer),e(so,kpe),e(kpe,Bv),e(Bv,Spe),e(Spe,ber),e(Bv,Fer),e(Bv,qO),e(qO,ver),e(Bv,Ter),e(so,Mer),e(so,Pv),e(Pv,Eer),e(Pv,Rpe),e(Rpe,Cer),e(Pv,wer),e(Pv,Bpe),e(Bpe,Aer),e(so,yer),e(so,Ppe),e(Ppe,Ler),e(so,xer),g(pA,so,null),b(c,_Pe,u),b(c,pc,u),e(pc,$v),e($v,$pe),g(_A,$pe,null),e(pc,ker),e(pc,Ipe),e(Ipe,Ser),b(c,uPe,u),b(c,Fr,u),g(uA,Fr,null),e(Fr,Rer),e(Fr,_c),e(_c,Ber),e(_c,NO),e(NO,Per),e(_c,$er),e(_c,jO),e(jO,Ier),e(_c,qer),e(Fr,Ner),e(Fr,bA),e(bA,jer),e(bA,qpe),e(qpe,Der),e(bA,Ger),e(Fr,Oer),e(Fr,gt),g(FA,gt,null),e(gt,Ver),e(gt,Npe),e(Npe,Xer),e(gt,zer),e(gt,uc),e(uc,Qer),e(uc,jpe),e(jpe,Wer),e(uc,Her),e(uc,DO),e(DO,Uer),e(uc,Jer),e(gt,Yer),e(gt,Dpe),e(Dpe,Ker),e(gt,Zer),g(vA,gt,null),e(Fr,eor),e(Fr,ho),g(TA,ho,null),e(ho,oor),e(ho,Gpe),e(Gpe,ror),e(ho,tor),e(ho,un),e(un,aor),e(un,Ope),e(Ope,nor),e(un,sor),e(un,Vpe),e(Vpe,lor),e(un,ior),e(un,Xpe),e(Xpe,dor),e(un,cor),e(ho,mor),e(ho,x),e(x,Iv),e(Iv,zpe),e(zpe,gor),e(Iv,hor),e(Iv,GO),e(GO,por),e(Iv,_or),e(x,uor),e(x,qv),e(qv,Qpe),e(Qpe,bor),e(qv,For),e(qv,OO),e(OO,vor),e(qv,Tor),e(x,Mor),e(x,Nv),e(Nv,Wpe),e(Wpe,Eor),e(Nv,Cor),e(Nv,VO),e(VO,wor),e(Nv,Aor),e(x,yor),e(x,jv),e(jv,Hpe),e(Hpe,Lor),e(jv,xor),e(jv,XO),e(XO,kor),e(jv,Sor),e(x,Ror),e(x,Dv),e(Dv,Upe),e(Upe,Bor),e(Dv,Por),e(Dv,zO),e(zO,$or),e(Dv,Ior),e(x,qor),e(x,Gv),e(Gv,Jpe),e(Jpe,Nor),e(Gv,jor),e(Gv,QO),e(QO,Dor),e(Gv,Gor),e(x,Oor),e(x,Ov),e(Ov,Ype),e(Ype,Vor),e(Ov,Xor),e(Ov,WO),e(WO,zor),e(Ov,Qor),e(x,Wor),e(x,Vv),e(Vv,Kpe),e(Kpe,Hor),e(Vv,Uor),e(Vv,HO),e(HO,Jor),e(Vv,Yor),e(x,Kor),e(x,Xv),e(Xv,Zpe),e(Zpe,Zor),e(Xv,err),e(Xv,UO),e(UO,orr),e(Xv,rrr),e(x,trr),e(x,zv),e(zv,e_e),e(e_e,arr),e(zv,nrr),e(zv,JO),e(JO,srr),e(zv,lrr),e(x,irr),e(x,Qv),e(Qv,o_e),e(o_e,drr),e(Qv,crr),e(Qv,YO),e(YO,frr),e(Qv,mrr),e(x,grr),e(x,Wv),e(Wv,r_e),e(r_e,hrr),e(Wv,prr),e(Wv,KO),e(KO,_rr),e(Wv,urr),e(x,brr),e(x,Hv),e(Hv,t_e),e(t_e,Frr),e(Hv,vrr),e(Hv,ZO),e(ZO,Trr),e(Hv,Mrr),e(x,Err),e(x,Uv),e(Uv,a_e),e(a_e,Crr),e(Uv,wrr),e(Uv,eV),e(eV,Arr),e(Uv,yrr),e(x,Lrr),e(x,Jv),e(Jv,n_e),e(n_e,xrr),e(Jv,krr),e(Jv,oV),e(oV,Srr),e(Jv,Rrr),e(x,Brr),e(x,Yv),e(Yv,s_e),e(s_e,Prr),e(Yv,$rr),e(Yv,rV),e(rV,Irr),e(Yv,qrr),e(x,Nrr),e(x,Xs),e(Xs,l_e),e(l_e,jrr),e(Xs,Drr),e(Xs,tV),e(tV,Grr),e(Xs,Orr),e(Xs,aV),e(aV,Vrr),e(Xs,Xrr),e(x,zrr),e(x,Kv),e(Kv,i_e),e(i_e,Qrr),e(Kv,Wrr),e(Kv,nV),e(nV,Hrr),e(Kv,Urr),e(x,Jrr),e(x,Zv),e(Zv,d_e),e(d_e,Yrr),e(Zv,Krr),e(Zv,sV),e(sV,Zrr),e(Zv,etr),e(x,otr),e(x,eT),e(eT,c_e),e(c_e,rtr),e(eT,ttr),e(eT,lV),e(lV,atr),e(eT,ntr),e(x,str),e(x,oT),e(oT,f_e),e(f_e,ltr),e(oT,itr),e(oT,iV),e(iV,dtr),e(oT,ctr),e(x,ftr),e(x,rT),e(rT,m_e),e(m_e,mtr),e(rT,gtr),e(rT,dV),e(dV,htr),e(rT,ptr),e(x,_tr),e(x,tT),e(tT,g_e),e(g_e,utr),e(tT,btr),e(tT,cV),e(cV,Ftr),e(tT,vtr),e(x,Ttr),e(x,aT),e(aT,h_e),e(h_e,Mtr),e(aT,Etr),e(aT,fV),e(fV,Ctr),e(aT,wtr),e(x,Atr),e(x,nT),e(nT,p_e),e(p_e,ytr),e(nT,Ltr),e(nT,mV),e(mV,xtr),e(nT,ktr),e(x,Str),e(x,sT),e(sT,__e),e(__e,Rtr),e(sT,Btr),e(sT,gV),e(gV,Ptr),e(sT,$tr),e(x,Itr),e(x,lT),e(lT,u_e),e(u_e,qtr),e(lT,Ntr),e(lT,hV),e(hV,jtr),e(lT,Dtr),e(x,Gtr),e(x,iT),e(iT,b_e),e(b_e,Otr),e(iT,Vtr),e(iT,pV),e(pV,Xtr),e(iT,ztr),e(x,Qtr),e(x,dT),e(dT,F_e),e(F_e,Wtr),e(dT,Htr),e(dT,_V),e(_V,Utr),e(dT,Jtr),e(x,Ytr),e(x,cT),e(cT,v_e),e(v_e,Ktr),e(cT,Ztr),e(cT,uV),e(uV,ear),e(cT,oar),e(x,rar),e(x,fT),e(fT,T_e),e(T_e,tar),e(fT,aar),e(fT,bV),e(bV,nar),e(fT,sar),e(x,lar),e(x,mT),e(mT,M_e),e(M_e,iar),e(mT,dar),e(mT,FV),e(FV,car),e(mT,far),e(x,mar),e(x,gT),e(gT,E_e),e(E_e,gar),e(gT,har),e(gT,vV),e(vV,par),e(gT,_ar),e(x,uar),e(x,hT),e(hT,C_e),e(C_e,bar),e(hT,Far),e(hT,TV),e(TV,Tar),e(hT,Mar),e(x,Ear),e(x,pT),e(pT,w_e),e(w_e,Car),e(pT,war),e(pT,MV),e(MV,Aar),e(pT,yar),e(x,Lar),e(x,_T),e(_T,A_e),e(A_e,xar),e(_T,kar),e(_T,EV),e(EV,Sar),e(_T,Rar),e(x,Bar),e(x,uT),e(uT,y_e),e(y_e,Par),e(uT,$ar),e(uT,CV),e(CV,Iar),e(uT,qar),e(x,Nar),e(x,bT),e(bT,L_e),e(L_e,jar),e(bT,Dar),e(bT,wV),e(wV,Gar),e(bT,Oar),e(x,Var),e(x,FT),e(FT,x_e),e(x_e,Xar),e(FT,zar),e(FT,AV),e(AV,Qar),e(FT,War),e(x,Har),e(x,vT),e(vT,k_e),e(k_e,Uar),e(vT,Jar),e(vT,yV),e(yV,Yar),e(vT,Kar),e(x,Zar),e(x,TT),e(TT,S_e),e(S_e,enr),e(TT,onr),e(TT,LV),e(LV,rnr),e(TT,tnr),e(x,anr),e(x,MT),e(MT,R_e),e(R_e,nnr),e(MT,snr),e(MT,xV),e(xV,lnr),e(MT,inr),e(x,dnr),e(x,ET),e(ET,B_e),e(B_e,cnr),e(ET,fnr),e(ET,kV),e(kV,mnr),e(ET,gnr),e(x,hnr),e(x,CT),e(CT,P_e),e(P_e,pnr),e(CT,_nr),e(CT,SV),e(SV,unr),e(CT,bnr),e(ho,Fnr),e(ho,$_e),e($_e,vnr),e(ho,Tnr),g(MA,ho,null),b(c,bPe,u),b(c,bc,u),e(bc,wT),e(wT,I_e),g(EA,I_e,null),e(bc,Mnr),e(bc,q_e),e(q_e,Enr),b(c,FPe,u),b(c,vr,u),g(CA,vr,null),e(vr,Cnr),e(vr,Fc),e(Fc,wnr),e(Fc,RV),e(RV,Anr),e(Fc,ynr),e(Fc,BV),e(BV,Lnr),e(Fc,xnr),e(vr,knr),e(vr,wA),e(wA,Snr),e(wA,N_e),e(N_e,Rnr),e(wA,Bnr),e(vr,Pnr),e(vr,ht),g(AA,ht,null),e(ht,$nr),e(ht,j_e),e(j_e,Inr),e(ht,qnr),e(ht,vc),e(vc,Nnr),e(vc,D_e),e(D_e,jnr),e(vc,Dnr),e(vc,PV),e(PV,Gnr),e(vc,Onr),e(ht,Vnr),e(ht,G_e),e(G_e,Xnr),e(ht,znr),g(yA,ht,null),e(vr,Qnr),e(vr,po),g(LA,po,null),e(po,Wnr),e(po,O_e),e(O_e,Hnr),e(po,Unr),e(po,bn),e(bn,Jnr),e(bn,V_e),e(V_e,Ynr),e(bn,Knr),e(bn,X_e),e(X_e,Znr),e(bn,esr),e(bn,z_e),e(z_e,osr),e(bn,rsr),e(po,tsr),e(po,H),e(H,AT),e(AT,Q_e),e(Q_e,asr),e(AT,nsr),e(AT,$V),e($V,ssr),e(AT,lsr),e(H,isr),e(H,yT),e(yT,W_e),e(W_e,dsr),e(yT,csr),e(yT,IV),e(IV,fsr),e(yT,msr),e(H,gsr),e(H,LT),e(LT,H_e),e(H_e,hsr),e(LT,psr),e(LT,qV),e(qV,_sr),e(LT,usr),e(H,bsr),e(H,xT),e(xT,U_e),e(U_e,Fsr),e(xT,vsr),e(xT,NV),e(NV,Tsr),e(xT,Msr),e(H,Esr),e(H,kT),e(kT,J_e),e(J_e,Csr),e(kT,wsr),e(kT,jV),e(jV,Asr),e(kT,ysr),e(H,Lsr),e(H,ST),e(ST,Y_e),e(Y_e,xsr),e(ST,ksr),e(ST,DV),e(DV,Ssr),e(ST,Rsr),e(H,Bsr),e(H,RT),e(RT,K_e),e(K_e,Psr),e(RT,$sr),e(RT,GV),e(GV,Isr),e(RT,qsr),e(H,Nsr),e(H,BT),e(BT,Z_e),e(Z_e,jsr),e(BT,Dsr),e(BT,OV),e(OV,Gsr),e(BT,Osr),e(H,Vsr),e(H,PT),e(PT,eue),e(eue,Xsr),e(PT,zsr),e(PT,VV),e(VV,Qsr),e(PT,Wsr),e(H,Hsr),e(H,$T),e($T,oue),e(oue,Usr),e($T,Jsr),e($T,XV),e(XV,Ysr),e($T,Ksr),e(H,Zsr),e(H,IT),e(IT,rue),e(rue,elr),e(IT,olr),e(IT,zV),e(zV,rlr),e(IT,tlr),e(H,alr),e(H,qT),e(qT,tue),e(tue,nlr),e(qT,slr),e(qT,QV),e(QV,llr),e(qT,ilr),e(H,dlr),e(H,NT),e(NT,aue),e(aue,clr),e(NT,flr),e(NT,WV),e(WV,mlr),e(NT,glr),e(H,hlr),e(H,jT),e(jT,nue),e(nue,plr),e(jT,_lr),e(jT,HV),e(HV,ulr),e(jT,blr),e(H,Flr),e(H,DT),e(DT,sue),e(sue,vlr),e(DT,Tlr),e(DT,UV),e(UV,Mlr),e(DT,Elr),e(H,Clr),e(H,GT),e(GT,lue),e(lue,wlr),e(GT,Alr),e(GT,JV),e(JV,ylr),e(GT,Llr),e(H,xlr),e(H,OT),e(OT,iue),e(iue,klr),e(OT,Slr),e(OT,YV),e(YV,Rlr),e(OT,Blr),e(H,Plr),e(H,VT),e(VT,due),e(due,$lr),e(VT,Ilr),e(VT,KV),e(KV,qlr),e(VT,Nlr),e(H,jlr),e(H,XT),e(XT,cue),e(cue,Dlr),e(XT,Glr),e(XT,ZV),e(ZV,Olr),e(XT,Vlr),e(H,Xlr),e(H,zT),e(zT,fue),e(fue,zlr),e(zT,Qlr),e(zT,eX),e(eX,Wlr),e(zT,Hlr),e(H,Ulr),e(H,QT),e(QT,mue),e(mue,Jlr),e(QT,Ylr),e(QT,oX),e(oX,Klr),e(QT,Zlr),e(H,eir),e(H,WT),e(WT,gue),e(gue,oir),e(WT,rir),e(WT,rX),e(rX,tir),e(WT,air),e(H,nir),e(H,HT),e(HT,hue),e(hue,sir),e(HT,lir),e(HT,tX),e(tX,iir),e(HT,dir),e(po,cir),e(po,pue),e(pue,fir),e(po,mir),g(xA,po,null),b(c,vPe,u),b(c,Tc,u),e(Tc,UT),e(UT,_ue),g(kA,_ue,null),e(Tc,gir),e(Tc,uue),e(uue,hir),b(c,TPe,u),b(c,Tr,u),g(SA,Tr,null),e(Tr,pir),e(Tr,Mc),e(Mc,_ir),e(Mc,aX),e(aX,uir),e(Mc,bir),e(Mc,nX),e(nX,Fir),e(Mc,vir),e(Tr,Tir),e(Tr,RA),e(RA,Mir),e(RA,bue),e(bue,Eir),e(RA,Cir),e(Tr,wir),e(Tr,pt),g(BA,pt,null),e(pt,Air),e(pt,Fue),e(Fue,yir),e(pt,Lir),e(pt,Ec),e(Ec,xir),e(Ec,vue),e(vue,kir),e(Ec,Sir),e(Ec,sX),e(sX,Rir),e(Ec,Bir),e(pt,Pir),e(pt,Tue),e(Tue,$ir),e(pt,Iir),g(PA,pt,null),e(Tr,qir),e(Tr,_o),g($A,_o,null),e(_o,Nir),e(_o,Mue),e(Mue,jir),e(_o,Dir),e(_o,Fn),e(Fn,Gir),e(Fn,Eue),e(Eue,Oir),e(Fn,Vir),e(Fn,Cue),e(Cue,Xir),e(Fn,zir),e(Fn,wue),e(wue,Qir),e(Fn,Wir),e(_o,Hir),e(_o,me),e(me,JT),e(JT,Aue),e(Aue,Uir),e(JT,Jir),e(JT,lX),e(lX,Yir),e(JT,Kir),e(me,Zir),e(me,YT),e(YT,yue),e(yue,edr),e(YT,odr),e(YT,iX),e(iX,rdr),e(YT,tdr),e(me,adr),e(me,KT),e(KT,Lue),e(Lue,ndr),e(KT,sdr),e(KT,dX),e(dX,ldr),e(KT,idr),e(me,ddr),e(me,ZT),e(ZT,xue),e(xue,cdr),e(ZT,fdr),e(ZT,cX),e(cX,mdr),e(ZT,gdr),e(me,hdr),e(me,e7),e(e7,kue),e(kue,pdr),e(e7,_dr),e(e7,fX),e(fX,udr),e(e7,bdr),e(me,Fdr),e(me,o7),e(o7,Sue),e(Sue,vdr),e(o7,Tdr),e(o7,mX),e(mX,Mdr),e(o7,Edr),e(me,Cdr),e(me,r7),e(r7,Rue),e(Rue,wdr),e(r7,Adr),e(r7,gX),e(gX,ydr),e(r7,Ldr),e(me,xdr),e(me,t7),e(t7,Bue),e(Bue,kdr),e(t7,Sdr),e(t7,hX),e(hX,Rdr),e(t7,Bdr),e(me,Pdr),e(me,a7),e(a7,Pue),e(Pue,$dr),e(a7,Idr),e(a7,pX),e(pX,qdr),e(a7,Ndr),e(me,jdr),e(me,n7),e(n7,$ue),e($ue,Ddr),e(n7,Gdr),e(n7,_X),e(_X,Odr),e(n7,Vdr),e(me,Xdr),e(me,s7),e(s7,Iue),e(Iue,zdr),e(s7,Qdr),e(s7,uX),e(uX,Wdr),e(s7,Hdr),e(me,Udr),e(me,l7),e(l7,que),e(que,Jdr),e(l7,Ydr),e(l7,bX),e(bX,Kdr),e(l7,Zdr),e(_o,ecr),e(_o,Nue),e(Nue,ocr),e(_o,rcr),g(IA,_o,null),b(c,MPe,u),b(c,Cc,u),e(Cc,i7),e(i7,jue),g(qA,jue,null),e(Cc,tcr),e(Cc,Due),e(Due,acr),b(c,EPe,u),b(c,Mr,u),g(NA,Mr,null),e(Mr,ncr),e(Mr,wc),e(wc,scr),e(wc,FX),e(FX,lcr),e(wc,icr),e(wc,vX),e(vX,dcr),e(wc,ccr),e(Mr,fcr),e(Mr,jA),e(jA,mcr),e(jA,Gue),e(Gue,gcr),e(jA,hcr),e(Mr,pcr),e(Mr,_t),g(DA,_t,null),e(_t,_cr),e(_t,Oue),e(Oue,ucr),e(_t,bcr),e(_t,Ac),e(Ac,Fcr),e(Ac,Vue),e(Vue,vcr),e(Ac,Tcr),e(Ac,TX),e(TX,Mcr),e(Ac,Ecr),e(_t,Ccr),e(_t,Xue),e(Xue,wcr),e(_t,Acr),g(GA,_t,null),e(Mr,ycr),e(Mr,uo),g(OA,uo,null),e(uo,Lcr),e(uo,zue),e(zue,xcr),e(uo,kcr),e(uo,vn),e(vn,Scr),e(vn,Que),e(Que,Rcr),e(vn,Bcr),e(vn,Wue),e(Wue,Pcr),e(vn,$cr),e(vn,Hue),e(Hue,Icr),e(vn,qcr),e(uo,Ncr),e(uo,VA),e(VA,d7),e(d7,Uue),e(Uue,jcr),e(d7,Dcr),e(d7,MX),e(MX,Gcr),e(d7,Ocr),e(VA,Vcr),e(VA,c7),e(c7,Jue),e(Jue,Xcr),e(c7,zcr),e(c7,EX),e(EX,Qcr),e(c7,Wcr),e(uo,Hcr),e(uo,Yue),e(Yue,Ucr),e(uo,Jcr),g(XA,uo,null),b(c,CPe,u),b(c,yc,u),e(yc,f7),e(f7,Kue),g(zA,Kue,null),e(yc,Ycr),e(yc,Zue),e(Zue,Kcr),b(c,wPe,u),b(c,Er,u),g(QA,Er,null),e(Er,Zcr),e(Er,Lc),e(Lc,efr),e(Lc,CX),e(CX,ofr),e(Lc,rfr),e(Lc,wX),e(wX,tfr),e(Lc,afr),e(Er,nfr),e(Er,WA),e(WA,sfr),e(WA,e2e),e(e2e,lfr),e(WA,ifr),e(Er,dfr),e(Er,ut),g(HA,ut,null),e(ut,cfr),e(ut,o2e),e(o2e,ffr),e(ut,mfr),e(ut,xc),e(xc,gfr),e(xc,r2e),e(r2e,hfr),e(xc,pfr),e(xc,AX),e(AX,_fr),e(xc,ufr),e(ut,bfr),e(ut,t2e),e(t2e,Ffr),e(ut,vfr),g(UA,ut,null),e(Er,Tfr),e(Er,bo),g(JA,bo,null),e(bo,Mfr),e(bo,a2e),e(a2e,Efr),e(bo,Cfr),e(bo,Tn),e(Tn,wfr),e(Tn,n2e),e(n2e,Afr),e(Tn,yfr),e(Tn,s2e),e(s2e,Lfr),e(Tn,xfr),e(Tn,l2e),e(l2e,kfr),e(Tn,Sfr),e(bo,Rfr),e(bo,J),e(J,m7),e(m7,i2e),e(i2e,Bfr),e(m7,Pfr),e(m7,yX),e(yX,$fr),e(m7,Ifr),e(J,qfr),e(J,g7),e(g7,d2e),e(d2e,Nfr),e(g7,jfr),e(g7,LX),e(LX,Dfr),e(g7,Gfr),e(J,Ofr),e(J,h7),e(h7,c2e),e(c2e,Vfr),e(h7,Xfr),e(h7,xX),e(xX,zfr),e(h7,Qfr),e(J,Wfr),e(J,p7),e(p7,f2e),e(f2e,Hfr),e(p7,Ufr),e(p7,kX),e(kX,Jfr),e(p7,Yfr),e(J,Kfr),e(J,_7),e(_7,m2e),e(m2e,Zfr),e(_7,emr),e(_7,SX),e(SX,omr),e(_7,rmr),e(J,tmr),e(J,u7),e(u7,g2e),e(g2e,amr),e(u7,nmr),e(u7,RX),e(RX,smr),e(u7,lmr),e(J,imr),e(J,b7),e(b7,h2e),e(h2e,dmr),e(b7,cmr),e(b7,BX),e(BX,fmr),e(b7,mmr),e(J,gmr),e(J,F7),e(F7,p2e),e(p2e,hmr),e(F7,pmr),e(F7,PX),e(PX,_mr),e(F7,umr),e(J,bmr),e(J,v7),e(v7,_2e),e(_2e,Fmr),e(v7,vmr),e(v7,$X),e($X,Tmr),e(v7,Mmr),e(J,Emr),e(J,T7),e(T7,u2e),e(u2e,Cmr),e(T7,wmr),e(T7,IX),e(IX,Amr),e(T7,ymr),e(J,Lmr),e(J,M7),e(M7,b2e),e(b2e,xmr),e(M7,kmr),e(M7,qX),e(qX,Smr),e(M7,Rmr),e(J,Bmr),e(J,E7),e(E7,F2e),e(F2e,Pmr),e(E7,$mr),e(E7,NX),e(NX,Imr),e(E7,qmr),e(J,Nmr),e(J,C7),e(C7,v2e),e(v2e,jmr),e(C7,Dmr),e(C7,jX),e(jX,Gmr),e(C7,Omr),e(J,Vmr),e(J,w7),e(w7,T2e),e(T2e,Xmr),e(w7,zmr),e(w7,DX),e(DX,Qmr),e(w7,Wmr),e(J,Hmr),e(J,A7),e(A7,M2e),e(M2e,Umr),e(A7,Jmr),e(A7,GX),e(GX,Ymr),e(A7,Kmr),e(J,Zmr),e(J,y7),e(y7,E2e),e(E2e,egr),e(y7,ogr),e(y7,OX),e(OX,rgr),e(y7,tgr),e(J,agr),e(J,L7),e(L7,C2e),e(C2e,ngr),e(L7,sgr),e(L7,VX),e(VX,lgr),e(L7,igr),e(J,dgr),e(J,x7),e(x7,w2e),e(w2e,cgr),e(x7,fgr),e(x7,XX),e(XX,mgr),e(x7,ggr),e(J,hgr),e(J,k7),e(k7,A2e),e(A2e,pgr),e(k7,_gr),e(k7,zX),e(zX,ugr),e(k7,bgr),e(J,Fgr),e(J,S7),e(S7,y2e),e(y2e,vgr),e(S7,Tgr),e(S7,QX),e(QX,Mgr),e(S7,Egr),e(bo,Cgr),e(bo,L2e),e(L2e,wgr),e(bo,Agr),g(YA,bo,null),b(c,APe,u),b(c,kc,u),e(kc,R7),e(R7,x2e),g(KA,x2e,null),e(kc,ygr),e(kc,k2e),e(k2e,Lgr),b(c,yPe,u),b(c,Cr,u),g(ZA,Cr,null),e(Cr,xgr),e(Cr,Sc),e(Sc,kgr),e(Sc,WX),e(WX,Sgr),e(Sc,Rgr),e(Sc,HX),e(HX,Bgr),e(Sc,Pgr),e(Cr,$gr),e(Cr,e0),e(e0,Igr),e(e0,S2e),e(S2e,qgr),e(e0,Ngr),e(Cr,jgr),e(Cr,bt),g(o0,bt,null),e(bt,Dgr),e(bt,R2e),e(R2e,Ggr),e(bt,Ogr),e(bt,Rc),e(Rc,Vgr),e(Rc,B2e),e(B2e,Xgr),e(Rc,zgr),e(Rc,UX),e(UX,Qgr),e(Rc,Wgr),e(bt,Hgr),e(bt,P2e),e(P2e,Ugr),e(bt,Jgr),g(r0,bt,null),e(Cr,Ygr),e(Cr,Fo),g(t0,Fo,null),e(Fo,Kgr),e(Fo,$2e),e($2e,Zgr),e(Fo,ehr),e(Fo,Mn),e(Mn,ohr),e(Mn,I2e),e(I2e,rhr),e(Mn,thr),e(Mn,q2e),e(q2e,ahr),e(Mn,nhr),e(Mn,N2e),e(N2e,shr),e(Mn,lhr),e(Fo,ihr),e(Fo,be),e(be,B7),e(B7,j2e),e(j2e,dhr),e(B7,chr),e(B7,JX),e(JX,fhr),e(B7,mhr),e(be,ghr),e(be,P7),e(P7,D2e),e(D2e,hhr),e(P7,phr),e(P7,YX),e(YX,_hr),e(P7,uhr),e(be,bhr),e(be,$7),e($7,G2e),e(G2e,Fhr),e($7,vhr),e($7,KX),e(KX,Thr),e($7,Mhr),e(be,Ehr),e(be,I7),e(I7,O2e),e(O2e,Chr),e(I7,whr),e(I7,ZX),e(ZX,Ahr),e(I7,yhr),e(be,Lhr),e(be,q7),e(q7,V2e),e(V2e,xhr),e(q7,khr),e(q7,ez),e(ez,Shr),e(q7,Rhr),e(be,Bhr),e(be,N7),e(N7,X2e),e(X2e,Phr),e(N7,$hr),e(N7,oz),e(oz,Ihr),e(N7,qhr),e(be,Nhr),e(be,j7),e(j7,z2e),e(z2e,jhr),e(j7,Dhr),e(j7,rz),e(rz,Ghr),e(j7,Ohr),e(be,Vhr),e(be,D7),e(D7,Q2e),e(Q2e,Xhr),e(D7,zhr),e(D7,tz),e(tz,Qhr),e(D7,Whr),e(be,Hhr),e(be,G7),e(G7,W2e),e(W2e,Uhr),e(G7,Jhr),e(G7,az),e(az,Yhr),e(G7,Khr),e(be,Zhr),e(be,O7),e(O7,H2e),e(H2e,epr),e(O7,opr),e(O7,nz),e(nz,rpr),e(O7,tpr),e(Fo,apr),e(Fo,U2e),e(U2e,npr),e(Fo,spr),g(a0,Fo,null),b(c,LPe,u),b(c,Bc,u),e(Bc,V7),e(V7,J2e),g(n0,J2e,null),e(Bc,lpr),e(Bc,Y2e),e(Y2e,ipr),b(c,xPe,u),b(c,wr,u),g(s0,wr,null),e(wr,dpr),e(wr,Pc),e(Pc,cpr),e(Pc,sz),e(sz,fpr),e(Pc,mpr),e(Pc,lz),e(lz,gpr),e(Pc,hpr),e(wr,ppr),e(wr,l0),e(l0,_pr),e(l0,K2e),e(K2e,upr),e(l0,bpr),e(wr,Fpr),e(wr,Ft),g(i0,Ft,null),e(Ft,vpr),e(Ft,Z2e),e(Z2e,Tpr),e(Ft,Mpr),e(Ft,$c),e($c,Epr),e($c,e1e),e(e1e,Cpr),e($c,wpr),e($c,iz),e(iz,Apr),e($c,ypr),e(Ft,Lpr),e(Ft,o1e),e(o1e,xpr),e(Ft,kpr),g(d0,Ft,null),e(wr,Spr),e(wr,vo),g(c0,vo,null),e(vo,Rpr),e(vo,r1e),e(r1e,Bpr),e(vo,Ppr),e(vo,En),e(En,$pr),e(En,t1e),e(t1e,Ipr),e(En,qpr),e(En,a1e),e(a1e,Npr),e(En,jpr),e(En,n1e),e(n1e,Dpr),e(En,Gpr),e(vo,Opr),e(vo,V),e(V,X7),e(X7,s1e),e(s1e,Vpr),e(X7,Xpr),e(X7,dz),e(dz,zpr),e(X7,Qpr),e(V,Wpr),e(V,z7),e(z7,l1e),e(l1e,Hpr),e(z7,Upr),e(z7,cz),e(cz,Jpr),e(z7,Ypr),e(V,Kpr),e(V,Q7),e(Q7,i1e),e(i1e,Zpr),e(Q7,e_r),e(Q7,fz),e(fz,o_r),e(Q7,r_r),e(V,t_r),e(V,W7),e(W7,d1e),e(d1e,a_r),e(W7,n_r),e(W7,mz),e(mz,s_r),e(W7,l_r),e(V,i_r),e(V,H7),e(H7,c1e),e(c1e,d_r),e(H7,c_r),e(H7,gz),e(gz,f_r),e(H7,m_r),e(V,g_r),e(V,U7),e(U7,f1e),e(f1e,h_r),e(U7,p_r),e(U7,hz),e(hz,__r),e(U7,u_r),e(V,b_r),e(V,J7),e(J7,m1e),e(m1e,F_r),e(J7,v_r),e(J7,pz),e(pz,T_r),e(J7,M_r),e(V,E_r),e(V,Y7),e(Y7,g1e),e(g1e,C_r),e(Y7,w_r),e(Y7,_z),e(_z,A_r),e(Y7,y_r),e(V,L_r),e(V,K7),e(K7,h1e),e(h1e,x_r),e(K7,k_r),e(K7,uz),e(uz,S_r),e(K7,R_r),e(V,B_r),e(V,Z7),e(Z7,p1e),e(p1e,P_r),e(Z7,$_r),e(Z7,bz),e(bz,I_r),e(Z7,q_r),e(V,N_r),e(V,e9),e(e9,_1e),e(_1e,j_r),e(e9,D_r),e(e9,Fz),e(Fz,G_r),e(e9,O_r),e(V,V_r),e(V,o9),e(o9,u1e),e(u1e,X_r),e(o9,z_r),e(o9,vz),e(vz,Q_r),e(o9,W_r),e(V,H_r),e(V,r9),e(r9,b1e),e(b1e,U_r),e(r9,J_r),e(r9,Tz),e(Tz,Y_r),e(r9,K_r),e(V,Z_r),e(V,t9),e(t9,F1e),e(F1e,eur),e(t9,our),e(t9,Mz),e(Mz,rur),e(t9,tur),e(V,aur),e(V,a9),e(a9,v1e),e(v1e,nur),e(a9,sur),e(a9,Ez),e(Ez,lur),e(a9,iur),e(V,dur),e(V,n9),e(n9,T1e),e(T1e,cur),e(n9,fur),e(n9,Cz),e(Cz,mur),e(n9,gur),e(V,hur),e(V,s9),e(s9,M1e),e(M1e,pur),e(s9,_ur),e(s9,wz),e(wz,uur),e(s9,bur),e(V,Fur),e(V,l9),e(l9,E1e),e(E1e,vur),e(l9,Tur),e(l9,Az),e(Az,Mur),e(l9,Eur),e(V,Cur),e(V,i9),e(i9,C1e),e(C1e,wur),e(i9,Aur),e(i9,yz),e(yz,yur),e(i9,Lur),e(V,xur),e(V,d9),e(d9,w1e),e(w1e,kur),e(d9,Sur),e(d9,Lz),e(Lz,Rur),e(d9,Bur),e(V,Pur),e(V,c9),e(c9,A1e),e(A1e,$ur),e(c9,Iur),e(c9,xz),e(xz,qur),e(c9,Nur),e(V,jur),e(V,f9),e(f9,y1e),e(y1e,Dur),e(f9,Gur),e(f9,kz),e(kz,Our),e(f9,Vur),e(V,Xur),e(V,m9),e(m9,L1e),e(L1e,zur),e(m9,Qur),e(m9,Sz),e(Sz,Wur),e(m9,Hur),e(V,Uur),e(V,g9),e(g9,x1e),e(x1e,Jur),e(g9,Yur),e(g9,Rz),e(Rz,Kur),e(g9,Zur),e(V,e2r),e(V,h9),e(h9,k1e),e(k1e,o2r),e(h9,r2r),e(h9,Bz),e(Bz,t2r),e(h9,a2r),e(V,n2r),e(V,p9),e(p9,S1e),e(S1e,s2r),e(p9,l2r),e(p9,Pz),e(Pz,i2r),e(p9,d2r),e(vo,c2r),e(vo,R1e),e(R1e,f2r),e(vo,m2r),g(f0,vo,null),b(c,kPe,u),b(c,Ic,u),e(Ic,_9),e(_9,B1e),g(m0,B1e,null),e(Ic,g2r),e(Ic,P1e),e(P1e,h2r),b(c,SPe,u),b(c,Ar,u),g(g0,Ar,null),e(Ar,p2r),e(Ar,qc),e(qc,_2r),e(qc,$z),e($z,u2r),e(qc,b2r),e(qc,Iz),e(Iz,F2r),e(qc,v2r),e(Ar,T2r),e(Ar,h0),e(h0,M2r),e(h0,$1e),e($1e,E2r),e(h0,C2r),e(Ar,w2r),e(Ar,vt),g(p0,vt,null),e(vt,A2r),e(vt,I1e),e(I1e,y2r),e(vt,L2r),e(vt,Nc),e(Nc,x2r),e(Nc,q1e),e(q1e,k2r),e(Nc,S2r),e(Nc,qz),e(qz,R2r),e(Nc,B2r),e(vt,P2r),e(vt,N1e),e(N1e,$2r),e(vt,I2r),g(_0,vt,null),e(Ar,q2r),e(Ar,To),g(u0,To,null),e(To,N2r),e(To,j1e),e(j1e,j2r),e(To,D2r),e(To,Cn),e(Cn,G2r),e(Cn,D1e),e(D1e,O2r),e(Cn,V2r),e(Cn,G1e),e(G1e,X2r),e(Cn,z2r),e(Cn,O1e),e(O1e,Q2r),e(Cn,W2r),e(To,H2r),e(To,se),e(se,u9),e(u9,V1e),e(V1e,U2r),e(u9,J2r),e(u9,Nz),e(Nz,Y2r),e(u9,K2r),e(se,Z2r),e(se,b9),e(b9,X1e),e(X1e,e1r),e(b9,o1r),e(b9,jz),e(jz,r1r),e(b9,t1r),e(se,a1r),e(se,F9),e(F9,z1e),e(z1e,n1r),e(F9,s1r),e(F9,Dz),e(Dz,l1r),e(F9,i1r),e(se,d1r),e(se,v9),e(v9,Q1e),e(Q1e,c1r),e(v9,f1r),e(v9,Gz),e(Gz,m1r),e(v9,g1r),e(se,h1r),e(se,T9),e(T9,W1e),e(W1e,p1r),e(T9,_1r),e(T9,Oz),e(Oz,u1r),e(T9,b1r),e(se,F1r),e(se,M9),e(M9,H1e),e(H1e,v1r),e(M9,T1r),e(M9,Vz),e(Vz,M1r),e(M9,E1r),e(se,C1r),e(se,E9),e(E9,U1e),e(U1e,w1r),e(E9,A1r),e(E9,Xz),e(Xz,y1r),e(E9,L1r),e(se,x1r),e(se,C9),e(C9,J1e),e(J1e,k1r),e(C9,S1r),e(C9,zz),e(zz,R1r),e(C9,B1r),e(se,P1r),e(se,w9),e(w9,Y1e),e(Y1e,$1r),e(w9,I1r),e(w9,Qz),e(Qz,q1r),e(w9,N1r),e(se,j1r),e(se,A9),e(A9,K1e),e(K1e,D1r),e(A9,G1r),e(A9,Wz),e(Wz,O1r),e(A9,V1r),e(se,X1r),e(se,y9),e(y9,Z1e),e(Z1e,z1r),e(y9,Q1r),e(y9,Hz),e(Hz,W1r),e(y9,H1r),e(se,U1r),e(se,L9),e(L9,ebe),e(ebe,J1r),e(L9,Y1r),e(L9,Uz),e(Uz,K1r),e(L9,Z1r),e(se,ebr),e(se,x9),e(x9,obe),e(obe,obr),e(x9,rbr),e(x9,Jz),e(Jz,tbr),e(x9,abr),e(se,nbr),e(se,k9),e(k9,rbe),e(rbe,sbr),e(k9,lbr),e(k9,Yz),e(Yz,ibr),e(k9,dbr),e(se,cbr),e(se,S9),e(S9,tbe),e(tbe,fbr),e(S9,mbr),e(S9,Kz),e(Kz,gbr),e(S9,hbr),e(se,pbr),e(se,R9),e(R9,abe),e(abe,_br),e(R9,ubr),e(R9,Zz),e(Zz,bbr),e(R9,Fbr),e(se,vbr),e(se,B9),e(B9,nbe),e(nbe,Tbr),e(B9,Mbr),e(B9,eQ),e(eQ,Ebr),e(B9,Cbr),e(To,wbr),e(To,sbe),e(sbe,Abr),e(To,ybr),g(b0,To,null),b(c,RPe,u),b(c,jc,u),e(jc,P9),e(P9,lbe),g(F0,lbe,null),e(jc,Lbr),e(jc,ibe),e(ibe,xbr),b(c,BPe,u),b(c,yr,u),g(v0,yr,null),e(yr,kbr),e(yr,Dc),e(Dc,Sbr),e(Dc,oQ),e(oQ,Rbr),e(Dc,Bbr),e(Dc,rQ),e(rQ,Pbr),e(Dc,$br),e(yr,Ibr),e(yr,T0),e(T0,qbr),e(T0,dbe),e(dbe,Nbr),e(T0,jbr),e(yr,Dbr),e(yr,Tt),g(M0,Tt,null),e(Tt,Gbr),e(Tt,cbe),e(cbe,Obr),e(Tt,Vbr),e(Tt,Gc),e(Gc,Xbr),e(Gc,fbe),e(fbe,zbr),e(Gc,Qbr),e(Gc,tQ),e(tQ,Wbr),e(Gc,Hbr),e(Tt,Ubr),e(Tt,mbe),e(mbe,Jbr),e(Tt,Ybr),g(E0,Tt,null),e(yr,Kbr),e(yr,Mo),g(C0,Mo,null),e(Mo,Zbr),e(Mo,gbe),e(gbe,e6r),e(Mo,o6r),e(Mo,wn),e(wn,r6r),e(wn,hbe),e(hbe,t6r),e(wn,a6r),e(wn,pbe),e(pbe,n6r),e(wn,s6r),e(wn,_be),e(_be,l6r),e(wn,i6r),e(Mo,d6r),e(Mo,ube),e(ube,$9),e($9,bbe),e(bbe,c6r),e($9,f6r),e($9,aQ),e(aQ,m6r),e($9,g6r),e(Mo,h6r),e(Mo,Fbe),e(Fbe,p6r),e(Mo,_6r),g(w0,Mo,null),b(c,PPe,u),b(c,Oc,u),e(Oc,I9),e(I9,vbe),g(A0,vbe,null),e(Oc,u6r),e(Oc,Tbe),e(Tbe,b6r),b(c,$Pe,u),b(c,Lr,u),g(y0,Lr,null),e(Lr,F6r),e(Lr,Vc),e(Vc,v6r),e(Vc,nQ),e(nQ,T6r),e(Vc,M6r),e(Vc,sQ),e(sQ,E6r),e(Vc,C6r),e(Lr,w6r),e(Lr,L0),e(L0,A6r),e(L0,Mbe),e(Mbe,y6r),e(L0,L6r),e(Lr,x6r),e(Lr,Mt),g(x0,Mt,null),e(Mt,k6r),e(Mt,Ebe),e(Ebe,S6r),e(Mt,R6r),e(Mt,Xc),e(Xc,B6r),e(Xc,Cbe),e(Cbe,P6r),e(Xc,$6r),e(Xc,lQ),e(lQ,I6r),e(Xc,q6r),e(Mt,N6r),e(Mt,wbe),e(wbe,j6r),e(Mt,D6r),g(k0,Mt,null),e(Lr,G6r),e(Lr,Eo),g(S0,Eo,null),e(Eo,O6r),e(Eo,Abe),e(Abe,V6r),e(Eo,X6r),e(Eo,An),e(An,z6r),e(An,ybe),e(ybe,Q6r),e(An,W6r),e(An,Lbe),e(Lbe,H6r),e(An,U6r),e(An,xbe),e(xbe,J6r),e(An,Y6r),e(Eo,K6r),e(Eo,Y),e(Y,q9),e(q9,kbe),e(kbe,Z6r),e(q9,eFr),e(q9,iQ),e(iQ,oFr),e(q9,rFr),e(Y,tFr),e(Y,N9),e(N9,Sbe),e(Sbe,aFr),e(N9,nFr),e(N9,dQ),e(dQ,sFr),e(N9,lFr),e(Y,iFr),e(Y,j9),e(j9,Rbe),e(Rbe,dFr),e(j9,cFr),e(j9,cQ),e(cQ,fFr),e(j9,mFr),e(Y,gFr),e(Y,D9),e(D9,Bbe),e(Bbe,hFr),e(D9,pFr),e(D9,fQ),e(fQ,_Fr),e(D9,uFr),e(Y,bFr),e(Y,G9),e(G9,Pbe),e(Pbe,FFr),e(G9,vFr),e(G9,mQ),e(mQ,TFr),e(G9,MFr),e(Y,EFr),e(Y,O9),e(O9,$be),e($be,CFr),e(O9,wFr),e(O9,gQ),e(gQ,AFr),e(O9,yFr),e(Y,LFr),e(Y,V9),e(V9,Ibe),e(Ibe,xFr),e(V9,kFr),e(V9,hQ),e(hQ,SFr),e(V9,RFr),e(Y,BFr),e(Y,X9),e(X9,qbe),e(qbe,PFr),e(X9,$Fr),e(X9,pQ),e(pQ,IFr),e(X9,qFr),e(Y,NFr),e(Y,z9),e(z9,Nbe),e(Nbe,jFr),e(z9,DFr),e(z9,_Q),e(_Q,GFr),e(z9,OFr),e(Y,VFr),e(Y,Q9),e(Q9,jbe),e(jbe,XFr),e(Q9,zFr),e(Q9,uQ),e(uQ,QFr),e(Q9,WFr),e(Y,HFr),e(Y,W9),e(W9,Dbe),e(Dbe,UFr),e(W9,JFr),e(W9,bQ),e(bQ,YFr),e(W9,KFr),e(Y,ZFr),e(Y,H9),e(H9,Gbe),e(Gbe,evr),e(H9,ovr),e(H9,FQ),e(FQ,rvr),e(H9,tvr),e(Y,avr),e(Y,U9),e(U9,Obe),e(Obe,nvr),e(U9,svr),e(U9,vQ),e(vQ,lvr),e(U9,ivr),e(Y,dvr),e(Y,J9),e(J9,Vbe),e(Vbe,cvr),e(J9,fvr),e(J9,TQ),e(TQ,mvr),e(J9,gvr),e(Y,hvr),e(Y,Y9),e(Y9,Xbe),e(Xbe,pvr),e(Y9,_vr),e(Y9,MQ),e(MQ,uvr),e(Y9,bvr),e(Y,Fvr),e(Y,K9),e(K9,zbe),e(zbe,vvr),e(K9,Tvr),e(K9,EQ),e(EQ,Mvr),e(K9,Evr),e(Y,Cvr),e(Y,Z9),e(Z9,Qbe),e(Qbe,wvr),e(Z9,Avr),e(Z9,CQ),e(CQ,yvr),e(Z9,Lvr),e(Y,xvr),e(Y,eM),e(eM,Wbe),e(Wbe,kvr),e(eM,Svr),e(eM,wQ),e(wQ,Rvr),e(eM,Bvr),e(Y,Pvr),e(Y,oM),e(oM,Hbe),e(Hbe,$vr),e(oM,Ivr),e(oM,AQ),e(AQ,qvr),e(oM,Nvr),e(Y,jvr),e(Y,rM),e(rM,Ube),e(Ube,Dvr),e(rM,Gvr),e(rM,yQ),e(yQ,Ovr),e(rM,Vvr),e(Eo,Xvr),e(Eo,Jbe),e(Jbe,zvr),e(Eo,Qvr),g(R0,Eo,null),b(c,IPe,u),b(c,zc,u),e(zc,tM),e(tM,Ybe),g(B0,Ybe,null),e(zc,Wvr),e(zc,Kbe),e(Kbe,Hvr),b(c,qPe,u),b(c,xr,u),g(P0,xr,null),e(xr,Uvr),e(xr,Qc),e(Qc,Jvr),e(Qc,LQ),e(LQ,Yvr),e(Qc,Kvr),e(Qc,xQ),e(xQ,Zvr),e(Qc,eTr),e(xr,oTr),e(xr,$0),e($0,rTr),e($0,Zbe),e(Zbe,tTr),e($0,aTr),e(xr,nTr),e(xr,Et),g(I0,Et,null),e(Et,sTr),e(Et,e6e),e(e6e,lTr),e(Et,iTr),e(Et,Wc),e(Wc,dTr),e(Wc,o6e),e(o6e,cTr),e(Wc,fTr),e(Wc,kQ),e(kQ,mTr),e(Wc,gTr),e(Et,hTr),e(Et,r6e),e(r6e,pTr),e(Et,_Tr),g(q0,Et,null),e(xr,uTr),e(xr,Co),g(N0,Co,null),e(Co,bTr),e(Co,t6e),e(t6e,FTr),e(Co,vTr),e(Co,yn),e(yn,TTr),e(yn,a6e),e(a6e,MTr),e(yn,ETr),e(yn,n6e),e(n6e,CTr),e(yn,wTr),e(yn,s6e),e(s6e,ATr),e(yn,yTr),e(Co,LTr),e(Co,K),e(K,aM),e(aM,l6e),e(l6e,xTr),e(aM,kTr),e(aM,SQ),e(SQ,STr),e(aM,RTr),e(K,BTr),e(K,nM),e(nM,i6e),e(i6e,PTr),e(nM,$Tr),e(nM,RQ),e(RQ,ITr),e(nM,qTr),e(K,NTr),e(K,sM),e(sM,d6e),e(d6e,jTr),e(sM,DTr),e(sM,BQ),e(BQ,GTr),e(sM,OTr),e(K,VTr),e(K,lM),e(lM,c6e),e(c6e,XTr),e(lM,zTr),e(lM,PQ),e(PQ,QTr),e(lM,WTr),e(K,HTr),e(K,iM),e(iM,f6e),e(f6e,UTr),e(iM,JTr),e(iM,$Q),e($Q,YTr),e(iM,KTr),e(K,ZTr),e(K,dM),e(dM,m6e),e(m6e,e7r),e(dM,o7r),e(dM,IQ),e(IQ,r7r),e(dM,t7r),e(K,a7r),e(K,cM),e(cM,g6e),e(g6e,n7r),e(cM,s7r),e(cM,qQ),e(qQ,l7r),e(cM,i7r),e(K,d7r),e(K,fM),e(fM,h6e),e(h6e,c7r),e(fM,f7r),e(fM,NQ),e(NQ,m7r),e(fM,g7r),e(K,h7r),e(K,mM),e(mM,p6e),e(p6e,p7r),e(mM,_7r),e(mM,jQ),e(jQ,u7r),e(mM,b7r),e(K,F7r),e(K,gM),e(gM,_6e),e(_6e,v7r),e(gM,T7r),e(gM,DQ),e(DQ,M7r),e(gM,E7r),e(K,C7r),e(K,hM),e(hM,u6e),e(u6e,w7r),e(hM,A7r),e(hM,GQ),e(GQ,y7r),e(hM,L7r),e(K,x7r),e(K,pM),e(pM,b6e),e(b6e,k7r),e(pM,S7r),e(pM,OQ),e(OQ,R7r),e(pM,B7r),e(K,P7r),e(K,_M),e(_M,F6e),e(F6e,$7r),e(_M,I7r),e(_M,VQ),e(VQ,q7r),e(_M,N7r),e(K,j7r),e(K,uM),e(uM,v6e),e(v6e,D7r),e(uM,G7r),e(uM,XQ),e(XQ,O7r),e(uM,V7r),e(K,X7r),e(K,bM),e(bM,T6e),e(T6e,z7r),e(bM,Q7r),e(bM,zQ),e(zQ,W7r),e(bM,H7r),e(K,U7r),e(K,FM),e(FM,M6e),e(M6e,J7r),e(FM,Y7r),e(FM,QQ),e(QQ,K7r),e(FM,Z7r),e(K,e9r),e(K,vM),e(vM,E6e),e(E6e,o9r),e(vM,r9r),e(vM,WQ),e(WQ,t9r),e(vM,a9r),e(K,n9r),e(K,TM),e(TM,C6e),e(C6e,s9r),e(TM,l9r),e(TM,HQ),e(HQ,i9r),e(TM,d9r),e(K,c9r),e(K,MM),e(MM,w6e),e(w6e,f9r),e(MM,m9r),e(MM,UQ),e(UQ,g9r),e(MM,h9r),e(K,p9r),e(K,EM),e(EM,A6e),e(A6e,_9r),e(EM,u9r),e(EM,JQ),e(JQ,b9r),e(EM,F9r),e(Co,v9r),e(Co,y6e),e(y6e,T9r),e(Co,M9r),g(j0,Co,null),b(c,NPe,u),b(c,Hc,u),e(Hc,CM),e(CM,L6e),g(D0,L6e,null),e(Hc,E9r),e(Hc,x6e),e(x6e,C9r),b(c,jPe,u),b(c,kr,u),g(G0,kr,null),e(kr,w9r),e(kr,Uc),e(Uc,A9r),e(Uc,YQ),e(YQ,y9r),e(Uc,L9r),e(Uc,KQ),e(KQ,x9r),e(Uc,k9r),e(kr,S9r),e(kr,O0),e(O0,R9r),e(O0,k6e),e(k6e,B9r),e(O0,P9r),e(kr,$9r),e(kr,Ct),g(V0,Ct,null),e(Ct,I9r),e(Ct,S6e),e(S6e,q9r),e(Ct,N9r),e(Ct,Jc),e(Jc,j9r),e(Jc,R6e),e(R6e,D9r),e(Jc,G9r),e(Jc,ZQ),e(ZQ,O9r),e(Jc,V9r),e(Ct,X9r),e(Ct,B6e),e(B6e,z9r),e(Ct,Q9r),g(X0,Ct,null),e(kr,W9r),e(kr,wo),g(z0,wo,null),e(wo,H9r),e(wo,P6e),e(P6e,U9r),e(wo,J9r),e(wo,Ln),e(Ln,Y9r),e(Ln,$6e),e($6e,K9r),e(Ln,Z9r),e(Ln,I6e),e(I6e,eMr),e(Ln,oMr),e(Ln,q6e),e(q6e,rMr),e(Ln,tMr),e(wo,aMr),e(wo,N6e),e(N6e,wM),e(wM,j6e),e(j6e,nMr),e(wM,sMr),e(wM,eW),e(eW,lMr),e(wM,iMr),e(wo,dMr),e(wo,D6e),e(D6e,cMr),e(wo,fMr),g(Q0,wo,null),b(c,DPe,u),b(c,Yc,u),e(Yc,AM),e(AM,G6e),g(W0,G6e,null),e(Yc,mMr),e(Yc,O6e),e(O6e,gMr),b(c,GPe,u),b(c,Sr,u),g(H0,Sr,null),e(Sr,hMr),e(Sr,Kc),e(Kc,pMr),e(Kc,oW),e(oW,_Mr),e(Kc,uMr),e(Kc,rW),e(rW,bMr),e(Kc,FMr),e(Sr,vMr),e(Sr,U0),e(U0,TMr),e(U0,V6e),e(V6e,MMr),e(U0,EMr),e(Sr,CMr),e(Sr,wt),g(J0,wt,null),e(wt,wMr),e(wt,X6e),e(X6e,AMr),e(wt,yMr),e(wt,Zc),e(Zc,LMr),e(Zc,z6e),e(z6e,xMr),e(Zc,kMr),e(Zc,tW),e(tW,SMr),e(Zc,RMr),e(wt,BMr),e(wt,Q6e),e(Q6e,PMr),e(wt,$Mr),g(Y0,wt,null),e(Sr,IMr),e(Sr,Ao),g(K0,Ao,null),e(Ao,qMr),e(Ao,W6e),e(W6e,NMr),e(Ao,jMr),e(Ao,xn),e(xn,DMr),e(xn,H6e),e(H6e,GMr),e(xn,OMr),e(xn,U6e),e(U6e,VMr),e(xn,XMr),e(xn,J6e),e(J6e,zMr),e(xn,QMr),e(Ao,WMr),e(Ao,Y6e),e(Y6e,yM),e(yM,K6e),e(K6e,HMr),e(yM,UMr),e(yM,aW),e(aW,JMr),e(yM,YMr),e(Ao,KMr),e(Ao,Z6e),e(Z6e,ZMr),e(Ao,e4r),g(Z0,Ao,null),b(c,OPe,u),b(c,ef,u),e(ef,LM),e(LM,eFe),g(ey,eFe,null),e(ef,o4r),e(ef,oFe),e(oFe,r4r),b(c,VPe,u),b(c,Rr,u),g(oy,Rr,null),e(Rr,t4r),e(Rr,of),e(of,a4r),e(of,nW),e(nW,n4r),e(of,s4r),e(of,sW),e(sW,l4r),e(of,i4r),e(Rr,d4r),e(Rr,ry),e(ry,c4r),e(ry,rFe),e(rFe,f4r),e(ry,m4r),e(Rr,g4r),e(Rr,At),g(ty,At,null),e(At,h4r),e(At,tFe),e(tFe,p4r),e(At,_4r),e(At,rf),e(rf,u4r),e(rf,aFe),e(aFe,b4r),e(rf,F4r),e(rf,lW),e(lW,v4r),e(rf,T4r),e(At,M4r),e(At,nFe),e(nFe,E4r),e(At,C4r),g(ay,At,null),e(Rr,w4r),e(Rr,yo),g(ny,yo,null),e(yo,A4r),e(yo,sFe),e(sFe,y4r),e(yo,L4r),e(yo,kn),e(kn,x4r),e(kn,lFe),e(lFe,k4r),e(kn,S4r),e(kn,iFe),e(iFe,R4r),e(kn,B4r),e(kn,dFe),e(dFe,P4r),e(kn,$4r),e(yo,I4r),e(yo,X),e(X,xM),e(xM,cFe),e(cFe,q4r),e(xM,N4r),e(xM,iW),e(iW,j4r),e(xM,D4r),e(X,G4r),e(X,kM),e(kM,fFe),e(fFe,O4r),e(kM,V4r),e(kM,dW),e(dW,X4r),e(kM,z4r),e(X,Q4r),e(X,SM),e(SM,mFe),e(mFe,W4r),e(SM,H4r),e(SM,cW),e(cW,U4r),e(SM,J4r),e(X,Y4r),e(X,RM),e(RM,gFe),e(gFe,K4r),e(RM,Z4r),e(RM,fW),e(fW,eEr),e(RM,oEr),e(X,rEr),e(X,BM),e(BM,hFe),e(hFe,tEr),e(BM,aEr),e(BM,mW),e(mW,nEr),e(BM,sEr),e(X,lEr),e(X,PM),e(PM,pFe),e(pFe,iEr),e(PM,dEr),e(PM,gW),e(gW,cEr),e(PM,fEr),e(X,mEr),e(X,$M),e($M,_Fe),e(_Fe,gEr),e($M,hEr),e($M,hW),e(hW,pEr),e($M,_Er),e(X,uEr),e(X,IM),e(IM,uFe),e(uFe,bEr),e(IM,FEr),e(IM,pW),e(pW,vEr),e(IM,TEr),e(X,MEr),e(X,qM),e(qM,bFe),e(bFe,EEr),e(qM,CEr),e(qM,_W),e(_W,wEr),e(qM,AEr),e(X,yEr),e(X,NM),e(NM,FFe),e(FFe,LEr),e(NM,xEr),e(NM,uW),e(uW,kEr),e(NM,SEr),e(X,REr),e(X,jM),e(jM,vFe),e(vFe,BEr),e(jM,PEr),e(jM,bW),e(bW,$Er),e(jM,IEr),e(X,qEr),e(X,DM),e(DM,TFe),e(TFe,NEr),e(DM,jEr),e(DM,FW),e(FW,DEr),e(DM,GEr),e(X,OEr),e(X,GM),e(GM,MFe),e(MFe,VEr),e(GM,XEr),e(GM,vW),e(vW,zEr),e(GM,QEr),e(X,WEr),e(X,OM),e(OM,EFe),e(EFe,HEr),e(OM,UEr),e(OM,TW),e(TW,JEr),e(OM,YEr),e(X,KEr),e(X,VM),e(VM,CFe),e(CFe,ZEr),e(VM,e5r),e(VM,MW),e(MW,o5r),e(VM,r5r),e(X,t5r),e(X,XM),e(XM,wFe),e(wFe,a5r),e(XM,n5r),e(XM,EW),e(EW,s5r),e(XM,l5r),e(X,i5r),e(X,zM),e(zM,AFe),e(AFe,d5r),e(zM,c5r),e(zM,CW),e(CW,f5r),e(zM,m5r),e(X,g5r),e(X,QM),e(QM,yFe),e(yFe,h5r),e(QM,p5r),e(QM,wW),e(wW,_5r),e(QM,u5r),e(X,b5r),e(X,WM),e(WM,LFe),e(LFe,F5r),e(WM,v5r),e(WM,AW),e(AW,T5r),e(WM,M5r),e(X,E5r),e(X,HM),e(HM,xFe),e(xFe,C5r),e(HM,w5r),e(HM,yW),e(yW,A5r),e(HM,y5r),e(X,L5r),e(X,UM),e(UM,kFe),e(kFe,x5r),e(UM,k5r),e(UM,LW),e(LW,S5r),e(UM,R5r),e(X,B5r),e(X,JM),e(JM,SFe),e(SFe,P5r),e(JM,$5r),e(JM,xW),e(xW,I5r),e(JM,q5r),e(X,N5r),e(X,YM),e(YM,RFe),e(RFe,j5r),e(YM,D5r),e(YM,kW),e(kW,G5r),e(YM,O5r),e(X,V5r),e(X,KM),e(KM,BFe),e(BFe,X5r),e(KM,z5r),e(KM,SW),e(SW,Q5r),e(KM,W5r),e(X,H5r),e(X,ZM),e(ZM,PFe),e(PFe,U5r),e(ZM,J5r),e(ZM,RW),e(RW,Y5r),e(ZM,K5r),e(X,Z5r),e(X,e4),e(e4,$Fe),e($Fe,e3r),e(e4,o3r),e(e4,BW),e(BW,r3r),e(e4,t3r),e(yo,a3r),e(yo,IFe),e(IFe,n3r),e(yo,s3r),g(sy,yo,null),b(c,XPe,u),b(c,tf,u),e(tf,o4),e(o4,qFe),g(ly,qFe,null),e(tf,l3r),e(tf,NFe),e(NFe,i3r),b(c,zPe,u),b(c,Br,u),g(iy,Br,null),e(Br,d3r),e(Br,af),e(af,c3r),e(af,PW),e(PW,f3r),e(af,m3r),e(af,$W),e($W,g3r),e(af,h3r),e(Br,p3r),e(Br,dy),e(dy,_3r),e(dy,jFe),e(jFe,u3r),e(dy,b3r),e(Br,F3r),e(Br,yt),g(cy,yt,null),e(yt,v3r),e(yt,DFe),e(DFe,T3r),e(yt,M3r),e(yt,nf),e(nf,E3r),e(nf,GFe),e(GFe,C3r),e(nf,w3r),e(nf,IW),e(IW,A3r),e(nf,y3r),e(yt,L3r),e(yt,OFe),e(OFe,x3r),e(yt,k3r),g(fy,yt,null),e(Br,S3r),e(Br,Lo),g(my,Lo,null),e(Lo,R3r),e(Lo,VFe),e(VFe,B3r),e(Lo,P3r),e(Lo,Sn),e(Sn,$3r),e(Sn,XFe),e(XFe,I3r),e(Sn,q3r),e(Sn,zFe),e(zFe,N3r),e(Sn,j3r),e(Sn,QFe),e(QFe,D3r),e(Sn,G3r),e(Lo,O3r),e(Lo,ca),e(ca,r4),e(r4,WFe),e(WFe,V3r),e(r4,X3r),e(r4,qW),e(qW,z3r),e(r4,Q3r),e(ca,W3r),e(ca,t4),e(t4,HFe),e(HFe,H3r),e(t4,U3r),e(t4,NW),e(NW,J3r),e(t4,Y3r),e(ca,K3r),e(ca,a4),e(a4,UFe),e(UFe,Z3r),e(a4,eCr),e(a4,jW),e(jW,oCr),e(a4,rCr),e(ca,tCr),e(ca,n4),e(n4,JFe),e(JFe,aCr),e(n4,nCr),e(n4,DW),e(DW,sCr),e(n4,lCr),e(ca,iCr),e(ca,s4),e(s4,YFe),e(YFe,dCr),e(s4,cCr),e(s4,GW),e(GW,fCr),e(s4,mCr),e(Lo,gCr),e(Lo,KFe),e(KFe,hCr),e(Lo,pCr),g(gy,Lo,null),b(c,QPe,u),b(c,sf,u),e(sf,l4),e(l4,ZFe),g(hy,ZFe,null),e(sf,_Cr),e(sf,eve),e(eve,uCr),b(c,WPe,u),b(c,Pr,u),g(py,Pr,null),e(Pr,bCr),e(Pr,lf),e(lf,FCr),e(lf,OW),e(OW,vCr),e(lf,TCr),e(lf,VW),e(VW,MCr),e(lf,ECr),e(Pr,CCr),e(Pr,_y),e(_y,wCr),e(_y,ove),e(ove,ACr),e(_y,yCr),e(Pr,LCr),e(Pr,Lt),g(uy,Lt,null),e(Lt,xCr),e(Lt,rve),e(rve,kCr),e(Lt,SCr),e(Lt,df),e(df,RCr),e(df,tve),e(tve,BCr),e(df,PCr),e(df,XW),e(XW,$Cr),e(df,ICr),e(Lt,qCr),e(Lt,ave),e(ave,NCr),e(Lt,jCr),g(by,Lt,null),e(Pr,DCr),e(Pr,xo),g(Fy,xo,null),e(xo,GCr),e(xo,nve),e(nve,OCr),e(xo,VCr),e(xo,Rn),e(Rn,XCr),e(Rn,sve),e(sve,zCr),e(Rn,QCr),e(Rn,lve),e(lve,WCr),e(Rn,HCr),e(Rn,ive),e(ive,UCr),e(Rn,JCr),e(xo,YCr),e(xo,ce),e(ce,i4),e(i4,dve),e(dve,KCr),e(i4,ZCr),e(i4,zW),e(zW,ewr),e(i4,owr),e(ce,rwr),e(ce,d4),e(d4,cve),e(cve,twr),e(d4,awr),e(d4,QW),e(QW,nwr),e(d4,swr),e(ce,lwr),e(ce,c4),e(c4,fve),e(fve,iwr),e(c4,dwr),e(c4,WW),e(WW,cwr),e(c4,fwr),e(ce,mwr),e(ce,f4),e(f4,mve),e(mve,gwr),e(f4,hwr),e(f4,HW),e(HW,pwr),e(f4,_wr),e(ce,uwr),e(ce,m4),e(m4,gve),e(gve,bwr),e(m4,Fwr),e(m4,UW),e(UW,vwr),e(m4,Twr),e(ce,Mwr),e(ce,g4),e(g4,hve),e(hve,Ewr),e(g4,Cwr),e(g4,JW),e(JW,wwr),e(g4,Awr),e(ce,ywr),e(ce,h4),e(h4,pve),e(pve,Lwr),e(h4,xwr),e(h4,YW),e(YW,kwr),e(h4,Swr),e(ce,Rwr),e(ce,p4),e(p4,_ve),e(_ve,Bwr),e(p4,Pwr),e(p4,KW),e(KW,$wr),e(p4,Iwr),e(ce,qwr),e(ce,_4),e(_4,uve),e(uve,Nwr),e(_4,jwr),e(_4,ZW),e(ZW,Dwr),e(_4,Gwr),e(ce,Owr),e(ce,u4),e(u4,bve),e(bve,Vwr),e(u4,Xwr),e(u4,eH),e(eH,zwr),e(u4,Qwr),e(ce,Wwr),e(ce,b4),e(b4,Fve),e(Fve,Hwr),e(b4,Uwr),e(b4,oH),e(oH,Jwr),e(b4,Ywr),e(ce,Kwr),e(ce,F4),e(F4,vve),e(vve,Zwr),e(F4,eAr),e(F4,rH),e(rH,oAr),e(F4,rAr),e(ce,tAr),e(ce,v4),e(v4,Tve),e(Tve,aAr),e(v4,nAr),e(v4,tH),e(tH,sAr),e(v4,lAr),e(xo,iAr),e(xo,Mve),e(Mve,dAr),e(xo,cAr),g(vy,xo,null),b(c,HPe,u),b(c,cf,u),e(cf,T4),e(T4,Eve),g(Ty,Eve,null),e(cf,fAr),e(cf,Cve),e(Cve,mAr),b(c,UPe,u),b(c,$r,u),g(My,$r,null),e($r,gAr),e($r,ff),e(ff,hAr),e(ff,aH),e(aH,pAr),e(ff,_Ar),e(ff,nH),e(nH,uAr),e(ff,bAr),e($r,FAr),e($r,Ey),e(Ey,vAr),e(Ey,wve),e(wve,TAr),e(Ey,MAr),e($r,EAr),e($r,xt),g(Cy,xt,null),e(xt,CAr),e(xt,Ave),e(Ave,wAr),e(xt,AAr),e(xt,mf),e(mf,yAr),e(mf,yve),e(yve,LAr),e(mf,xAr),e(mf,sH),e(sH,kAr),e(mf,SAr),e(xt,RAr),e(xt,Lve),e(Lve,BAr),e(xt,PAr),g(wy,xt,null),e($r,$Ar),e($r,ko),g(Ay,ko,null),e(ko,IAr),e(ko,xve),e(xve,qAr),e(ko,NAr),e(ko,Bn),e(Bn,jAr),e(Bn,kve),e(kve,DAr),e(Bn,GAr),e(Bn,Sve),e(Sve,OAr),e(Bn,VAr),e(Bn,Rve),e(Rve,XAr),e(Bn,zAr),e(ko,QAr),e(ko,Fe),e(Fe,M4),e(M4,Bve),e(Bve,WAr),e(M4,HAr),e(M4,lH),e(lH,UAr),e(M4,JAr),e(Fe,YAr),e(Fe,E4),e(E4,Pve),e(Pve,KAr),e(E4,ZAr),e(E4,iH),e(iH,e0r),e(E4,o0r),e(Fe,r0r),e(Fe,C4),e(C4,$ve),e($ve,t0r),e(C4,a0r),e(C4,dH),e(dH,n0r),e(C4,s0r),e(Fe,l0r),e(Fe,w4),e(w4,Ive),e(Ive,i0r),e(w4,d0r),e(w4,cH),e(cH,c0r),e(w4,f0r),e(Fe,m0r),e(Fe,A4),e(A4,qve),e(qve,g0r),e(A4,h0r),e(A4,fH),e(fH,p0r),e(A4,_0r),e(Fe,u0r),e(Fe,y4),e(y4,Nve),e(Nve,b0r),e(y4,F0r),e(y4,mH),e(mH,v0r),e(y4,T0r),e(Fe,M0r),e(Fe,L4),e(L4,jve),e(jve,E0r),e(L4,C0r),e(L4,gH),e(gH,w0r),e(L4,A0r),e(Fe,y0r),e(Fe,x4),e(x4,Dve),e(Dve,L0r),e(x4,x0r),e(x4,hH),e(hH,k0r),e(x4,S0r),e(Fe,R0r),e(Fe,k4),e(k4,Gve),e(Gve,B0r),e(k4,P0r),e(k4,pH),e(pH,$0r),e(k4,I0r),e(Fe,q0r),e(Fe,S4),e(S4,Ove),e(Ove,N0r),e(S4,j0r),e(S4,_H),e(_H,D0r),e(S4,G0r),e(ko,O0r),e(ko,Vve),e(Vve,V0r),e(ko,X0r),g(yy,ko,null),b(c,JPe,u),b(c,gf,u),e(gf,R4),e(R4,Xve),g(Ly,Xve,null),e(gf,z0r),e(gf,zve),e(zve,Q0r),b(c,YPe,u),b(c,Ir,u),g(xy,Ir,null),e(Ir,W0r),e(Ir,hf),e(hf,H0r),e(hf,uH),e(uH,U0r),e(hf,J0r),e(hf,bH),e(bH,Y0r),e(hf,K0r),e(Ir,Z0r),e(Ir,ky),e(ky,eyr),e(ky,Qve),e(Qve,oyr),e(ky,ryr),e(Ir,tyr),e(Ir,kt),g(Sy,kt,null),e(kt,ayr),e(kt,Wve),e(Wve,nyr),e(kt,syr),e(kt,pf),e(pf,lyr),e(pf,Hve),e(Hve,iyr),e(pf,dyr),e(pf,FH),e(FH,cyr),e(pf,fyr),e(kt,myr),e(kt,Uve),e(Uve,gyr),e(kt,hyr),g(Ry,kt,null),e(Ir,pyr),e(Ir,So),g(By,So,null),e(So,_yr),e(So,Jve),e(Jve,uyr),e(So,byr),e(So,Pn),e(Pn,Fyr),e(Pn,Yve),e(Yve,vyr),e(Pn,Tyr),e(Pn,Kve),e(Kve,Myr),e(Pn,Eyr),e(Pn,Zve),e(Zve,Cyr),e(Pn,wyr),e(So,Ayr),e(So,ve),e(ve,B4),e(B4,eTe),e(eTe,yyr),e(B4,Lyr),e(B4,vH),e(vH,xyr),e(B4,kyr),e(ve,Syr),e(ve,P4),e(P4,oTe),e(oTe,Ryr),e(P4,Byr),e(P4,TH),e(TH,Pyr),e(P4,$yr),e(ve,Iyr),e(ve,$4),e($4,rTe),e(rTe,qyr),e($4,Nyr),e($4,MH),e(MH,jyr),e($4,Dyr),e(ve,Gyr),e(ve,I4),e(I4,tTe),e(tTe,Oyr),e(I4,Vyr),e(I4,EH),e(EH,Xyr),e(I4,zyr),e(ve,Qyr),e(ve,q4),e(q4,aTe),e(aTe,Wyr),e(q4,Hyr),e(q4,CH),e(CH,Uyr),e(q4,Jyr),e(ve,Yyr),e(ve,N4),e(N4,nTe),e(nTe,Kyr),e(N4,Zyr),e(N4,wH),e(wH,eLr),e(N4,oLr),e(ve,rLr),e(ve,j4),e(j4,sTe),e(sTe,tLr),e(j4,aLr),e(j4,AH),e(AH,nLr),e(j4,sLr),e(ve,lLr),e(ve,D4),e(D4,lTe),e(lTe,iLr),e(D4,dLr),e(D4,yH),e(yH,cLr),e(D4,fLr),e(ve,mLr),e(ve,G4),e(G4,iTe),e(iTe,gLr),e(G4,hLr),e(G4,LH),e(LH,pLr),e(G4,_Lr),e(ve,uLr),e(ve,O4),e(O4,dTe),e(dTe,bLr),e(O4,FLr),e(O4,xH),e(xH,vLr),e(O4,TLr),e(So,MLr),e(So,cTe),e(cTe,ELr),e(So,CLr),g(Py,So,null),b(c,KPe,u),b(c,_f,u),e(_f,V4),e(V4,fTe),g($y,fTe,null),e(_f,wLr),e(_f,mTe),e(mTe,ALr),b(c,ZPe,u),b(c,qr,u),g(Iy,qr,null),e(qr,yLr),e(qr,uf),e(uf,LLr),e(uf,kH),e(kH,xLr),e(uf,kLr),e(uf,SH),e(SH,SLr),e(uf,RLr),e(qr,BLr),e(qr,qy),e(qy,PLr),e(qy,gTe),e(gTe,$Lr),e(qy,ILr),e(qr,qLr),e(qr,St),g(Ny,St,null),e(St,NLr),e(St,hTe),e(hTe,jLr),e(St,DLr),e(St,bf),e(bf,GLr),e(bf,pTe),e(pTe,OLr),e(bf,VLr),e(bf,RH),e(RH,XLr),e(bf,zLr),e(St,QLr),e(St,_Te),e(_Te,WLr),e(St,HLr),g(jy,St,null),e(qr,ULr),e(qr,Ro),g(Dy,Ro,null),e(Ro,JLr),e(Ro,uTe),e(uTe,YLr),e(Ro,KLr),e(Ro,$n),e($n,ZLr),e($n,bTe),e(bTe,e8r),e($n,o8r),e($n,FTe),e(FTe,r8r),e($n,t8r),e($n,vTe),e(vTe,a8r),e($n,n8r),e(Ro,s8r),e(Ro,Te),e(Te,X4),e(X4,TTe),e(TTe,l8r),e(X4,i8r),e(X4,BH),e(BH,d8r),e(X4,c8r),e(Te,f8r),e(Te,z4),e(z4,MTe),e(MTe,m8r),e(z4,g8r),e(z4,PH),e(PH,h8r),e(z4,p8r),e(Te,_8r),e(Te,Q4),e(Q4,ETe),e(ETe,u8r),e(Q4,b8r),e(Q4,$H),e($H,F8r),e(Q4,v8r),e(Te,T8r),e(Te,W4),e(W4,CTe),e(CTe,M8r),e(W4,E8r),e(W4,IH),e(IH,C8r),e(W4,w8r),e(Te,A8r),e(Te,H4),e(H4,wTe),e(wTe,y8r),e(H4,L8r),e(H4,qH),e(qH,x8r),e(H4,k8r),e(Te,S8r),e(Te,U4),e(U4,ATe),e(ATe,R8r),e(U4,B8r),e(U4,NH),e(NH,P8r),e(U4,$8r),e(Te,I8r),e(Te,J4),e(J4,yTe),e(yTe,q8r),e(J4,N8r),e(J4,jH),e(jH,j8r),e(J4,D8r),e(Te,G8r),e(Te,Y4),e(Y4,LTe),e(LTe,O8r),e(Y4,V8r),e(Y4,DH),e(DH,X8r),e(Y4,z8r),e(Te,Q8r),e(Te,K4),e(K4,xTe),e(xTe,W8r),e(K4,H8r),e(K4,GH),e(GH,U8r),e(K4,J8r),e(Te,Y8r),e(Te,Z4),e(Z4,kTe),e(kTe,K8r),e(Z4,Z8r),e(Z4,OH),e(OH,exr),e(Z4,oxr),e(Ro,rxr),e(Ro,STe),e(STe,txr),e(Ro,axr),g(Gy,Ro,null),b(c,e$e,u),b(c,Ff,u),e(Ff,eE),e(eE,RTe),g(Oy,RTe,null),e(Ff,nxr),e(Ff,BTe),e(BTe,sxr),b(c,o$e,u),b(c,Nr,u),g(Vy,Nr,null),e(Nr,lxr),e(Nr,vf),e(vf,ixr),e(vf,VH),e(VH,dxr),e(vf,cxr),e(vf,XH),e(XH,fxr),e(vf,mxr),e(Nr,gxr),e(Nr,Xy),e(Xy,hxr),e(Xy,PTe),e(PTe,pxr),e(Xy,_xr),e(Nr,uxr),e(Nr,Rt),g(zy,Rt,null),e(Rt,bxr),e(Rt,$Te),e($Te,Fxr),e(Rt,vxr),e(Rt,Tf),e(Tf,Txr),e(Tf,ITe),e(ITe,Mxr),e(Tf,Exr),e(Tf,zH),e(zH,Cxr),e(Tf,wxr),e(Rt,Axr),e(Rt,qTe),e(qTe,yxr),e(Rt,Lxr),g(Qy,Rt,null),e(Nr,xxr),e(Nr,Bo),g(Wy,Bo,null),e(Bo,kxr),e(Bo,NTe),e(NTe,Sxr),e(Bo,Rxr),e(Bo,In),e(In,Bxr),e(In,jTe),e(jTe,Pxr),e(In,$xr),e(In,DTe),e(DTe,Ixr),e(In,qxr),e(In,GTe),e(GTe,Nxr),e(In,jxr),e(Bo,Dxr),e(Bo,Me),e(Me,oE),e(oE,OTe),e(OTe,Gxr),e(oE,Oxr),e(oE,QH),e(QH,Vxr),e(oE,Xxr),e(Me,zxr),e(Me,rE),e(rE,VTe),e(VTe,Qxr),e(rE,Wxr),e(rE,WH),e(WH,Hxr),e(rE,Uxr),e(Me,Jxr),e(Me,tE),e(tE,XTe),e(XTe,Yxr),e(tE,Kxr),e(tE,HH),e(HH,Zxr),e(tE,ekr),e(Me,okr),e(Me,aE),e(aE,zTe),e(zTe,rkr),e(aE,tkr),e(aE,UH),e(UH,akr),e(aE,nkr),e(Me,skr),e(Me,nE),e(nE,QTe),e(QTe,lkr),e(nE,ikr),e(nE,JH),e(JH,dkr),e(nE,ckr),e(Me,fkr),e(Me,sE),e(sE,WTe),e(WTe,mkr),e(sE,gkr),e(sE,YH),e(YH,hkr),e(sE,pkr),e(Me,_kr),e(Me,lE),e(lE,HTe),e(HTe,ukr),e(lE,bkr),e(lE,KH),e(KH,Fkr),e(lE,vkr),e(Me,Tkr),e(Me,iE),e(iE,UTe),e(UTe,Mkr),e(iE,Ekr),e(iE,ZH),e(ZH,Ckr),e(iE,wkr),e(Me,Akr),e(Me,dE),e(dE,JTe),e(JTe,ykr),e(dE,Lkr),e(dE,eU),e(eU,xkr),e(dE,kkr),e(Me,Skr),e(Me,cE),e(cE,YTe),e(YTe,Rkr),e(cE,Bkr),e(cE,oU),e(oU,Pkr),e(cE,$kr),e(Bo,Ikr),e(Bo,KTe),e(KTe,qkr),e(Bo,Nkr),g(Hy,Bo,null),b(c,r$e,u),b(c,Mf,u),e(Mf,fE),e(fE,ZTe),g(Uy,ZTe,null),e(Mf,jkr),e(Mf,e7e),e(e7e,Dkr),b(c,t$e,u),b(c,jr,u),g(Jy,jr,null),e(jr,Gkr),e(jr,Ef),e(Ef,Okr),e(Ef,rU),e(rU,Vkr),e(Ef,Xkr),e(Ef,tU),e(tU,zkr),e(Ef,Qkr),e(jr,Wkr),e(jr,Yy),e(Yy,Hkr),e(Yy,o7e),e(o7e,Ukr),e(Yy,Jkr),e(jr,Ykr),e(jr,Bt),g(Ky,Bt,null),e(Bt,Kkr),e(Bt,r7e),e(r7e,Zkr),e(Bt,eSr),e(Bt,Cf),e(Cf,oSr),e(Cf,t7e),e(t7e,rSr),e(Cf,tSr),e(Cf,aU),e(aU,aSr),e(Cf,nSr),e(Bt,sSr),e(Bt,a7e),e(a7e,lSr),e(Bt,iSr),g(Zy,Bt,null),e(jr,dSr),e(jr,Po),g(eL,Po,null),e(Po,cSr),e(Po,n7e),e(n7e,fSr),e(Po,mSr),e(Po,qn),e(qn,gSr),e(qn,s7e),e(s7e,hSr),e(qn,pSr),e(qn,l7e),e(l7e,_Sr),e(qn,uSr),e(qn,i7e),e(i7e,bSr),e(qn,FSr),e(Po,vSr),e(Po,Pe),e(Pe,mE),e(mE,d7e),e(d7e,TSr),e(mE,MSr),e(mE,nU),e(nU,ESr),e(mE,CSr),e(Pe,wSr),e(Pe,gE),e(gE,c7e),e(c7e,ASr),e(gE,ySr),e(gE,sU),e(sU,LSr),e(gE,xSr),e(Pe,kSr),e(Pe,hE),e(hE,f7e),e(f7e,SSr),e(hE,RSr),e(hE,lU),e(lU,BSr),e(hE,PSr),e(Pe,$Sr),e(Pe,pE),e(pE,m7e),e(m7e,ISr),e(pE,qSr),e(pE,iU),e(iU,NSr),e(pE,jSr),e(Pe,DSr),e(Pe,_E),e(_E,g7e),e(g7e,GSr),e(_E,OSr),e(_E,dU),e(dU,VSr),e(_E,XSr),e(Pe,zSr),e(Pe,uE),e(uE,h7e),e(h7e,QSr),e(uE,WSr),e(uE,cU),e(cU,HSr),e(uE,USr),e(Pe,JSr),e(Pe,bE),e(bE,p7e),e(p7e,YSr),e(bE,KSr),e(bE,fU),e(fU,ZSr),e(bE,eRr),e(Pe,oRr),e(Pe,FE),e(FE,_7e),e(_7e,rRr),e(FE,tRr),e(FE,mU),e(mU,aRr),e(FE,nRr),e(Po,sRr),e(Po,u7e),e(u7e,lRr),e(Po,iRr),g(oL,Po,null),b(c,a$e,u),b(c,wf,u),e(wf,vE),e(vE,b7e),g(rL,b7e,null),e(wf,dRr),e(wf,F7e),e(F7e,cRr),b(c,n$e,u),b(c,Dr,u),g(tL,Dr,null),e(Dr,fRr),e(Dr,Af),e(Af,mRr),e(Af,gU),e(gU,gRr),e(Af,hRr),e(Af,hU),e(hU,pRr),e(Af,_Rr),e(Dr,uRr),e(Dr,aL),e(aL,bRr),e(aL,v7e),e(v7e,FRr),e(aL,vRr),e(Dr,TRr),e(Dr,Pt),g(nL,Pt,null),e(Pt,MRr),e(Pt,T7e),e(T7e,ERr),e(Pt,CRr),e(Pt,yf),e(yf,wRr),e(yf,M7e),e(M7e,ARr),e(yf,yRr),e(yf,pU),e(pU,LRr),e(yf,xRr),e(Pt,kRr),e(Pt,E7e),e(E7e,SRr),e(Pt,RRr),g(sL,Pt,null),e(Dr,BRr),e(Dr,$o),g(lL,$o,null),e($o,PRr),e($o,C7e),e(C7e,$Rr),e($o,IRr),e($o,Nn),e(Nn,qRr),e(Nn,w7e),e(w7e,NRr),e(Nn,jRr),e(Nn,A7e),e(A7e,DRr),e(Nn,GRr),e(Nn,y7e),e(y7e,ORr),e(Nn,VRr),e($o,XRr),e($o,$e),e($e,TE),e(TE,L7e),e(L7e,zRr),e(TE,QRr),e(TE,_U),e(_U,WRr),e(TE,HRr),e($e,URr),e($e,ME),e(ME,x7e),e(x7e,JRr),e(ME,YRr),e(ME,uU),e(uU,KRr),e(ME,ZRr),e($e,eBr),e($e,EE),e(EE,k7e),e(k7e,oBr),e(EE,rBr),e(EE,bU),e(bU,tBr),e(EE,aBr),e($e,nBr),e($e,CE),e(CE,S7e),e(S7e,sBr),e(CE,lBr),e(CE,FU),e(FU,iBr),e(CE,dBr),e($e,cBr),e($e,wE),e(wE,R7e),e(R7e,fBr),e(wE,mBr),e(wE,vU),e(vU,gBr),e(wE,hBr),e($e,pBr),e($e,AE),e(AE,B7e),e(B7e,_Br),e(AE,uBr),e(AE,TU),e(TU,bBr),e(AE,FBr),e($e,vBr),e($e,yE),e(yE,P7e),e(P7e,TBr),e(yE,MBr),e(yE,MU),e(MU,EBr),e(yE,CBr),e($e,wBr),e($e,LE),e(LE,$7e),e($7e,ABr),e(LE,yBr),e(LE,EU),e(EU,LBr),e(LE,xBr),e($o,kBr),e($o,I7e),e(I7e,SBr),e($o,RBr),g(iL,$o,null),b(c,s$e,u),b(c,Lf,u),e(Lf,xE),e(xE,q7e),g(dL,q7e,null),e(Lf,BBr),e(Lf,N7e),e(N7e,PBr),b(c,l$e,u),b(c,Gr,u),g(cL,Gr,null),e(Gr,$Br),e(Gr,xf),e(xf,IBr),e(xf,CU),e(CU,qBr),e(xf,NBr),e(xf,wU),e(wU,jBr),e(xf,DBr),e(Gr,GBr),e(Gr,fL),e(fL,OBr),e(fL,j7e),e(j7e,VBr),e(fL,XBr),e(Gr,zBr),e(Gr,$t),g(mL,$t,null),e($t,QBr),e($t,D7e),e(D7e,WBr),e($t,HBr),e($t,kf),e(kf,UBr),e(kf,G7e),e(G7e,JBr),e(kf,YBr),e(kf,AU),e(AU,KBr),e(kf,ZBr),e($t,ePr),e($t,O7e),e(O7e,oPr),e($t,rPr),g(gL,$t,null),e(Gr,tPr),e(Gr,Io),g(hL,Io,null),e(Io,aPr),e(Io,V7e),e(V7e,nPr),e(Io,sPr),e(Io,jn),e(jn,lPr),e(jn,X7e),e(X7e,iPr),e(jn,dPr),e(jn,z7e),e(z7e,cPr),e(jn,fPr),e(jn,Q7e),e(Q7e,mPr),e(jn,gPr),e(Io,hPr),e(Io,W7e),e(W7e,kE),e(kE,H7e),e(H7e,pPr),e(kE,_Pr),e(kE,yU),e(yU,uPr),e(kE,bPr),e(Io,FPr),e(Io,U7e),e(U7e,vPr),e(Io,TPr),g(pL,Io,null),b(c,i$e,u),b(c,Sf,u),e(Sf,SE),e(SE,J7e),g(_L,J7e,null),e(Sf,MPr),e(Sf,Y7e),e(Y7e,EPr),b(c,d$e,u),b(c,Or,u),g(uL,Or,null),e(Or,CPr),e(Or,Rf),e(Rf,wPr),e(Rf,LU),e(LU,APr),e(Rf,yPr),e(Rf,xU),e(xU,LPr),e(Rf,xPr),e(Or,kPr),e(Or,bL),e(bL,SPr),e(bL,K7e),e(K7e,RPr),e(bL,BPr),e(Or,PPr),e(Or,It),g(FL,It,null),e(It,$Pr),e(It,Z7e),e(Z7e,IPr),e(It,qPr),e(It,Bf),e(Bf,NPr),e(Bf,e9e),e(e9e,jPr),e(Bf,DPr),e(Bf,kU),e(kU,GPr),e(Bf,OPr),e(It,VPr),e(It,o9e),e(o9e,XPr),e(It,zPr),g(vL,It,null),e(Or,QPr),e(Or,qo),g(TL,qo,null),e(qo,WPr),e(qo,r9e),e(r9e,HPr),e(qo,UPr),e(qo,Dn),e(Dn,JPr),e(Dn,t9e),e(t9e,YPr),e(Dn,KPr),e(Dn,a9e),e(a9e,ZPr),e(Dn,e$r),e(Dn,n9e),e(n9e,o$r),e(Dn,r$r),e(qo,t$r),e(qo,ML),e(ML,RE),e(RE,s9e),e(s9e,a$r),e(RE,n$r),e(RE,SU),e(SU,s$r),e(RE,l$r),e(ML,i$r),e(ML,BE),e(BE,l9e),e(l9e,d$r),e(BE,c$r),e(BE,RU),e(RU,f$r),e(BE,m$r),e(qo,g$r),e(qo,i9e),e(i9e,h$r),e(qo,p$r),g(EL,qo,null),b(c,c$e,u),b(c,Pf,u),e(Pf,PE),e(PE,d9e),g(CL,d9e,null),e(Pf,_$r),e(Pf,c9e),e(c9e,u$r),b(c,f$e,u),b(c,Vr,u),g(wL,Vr,null),e(Vr,b$r),e(Vr,$f),e($f,F$r),e($f,BU),e(BU,v$r),e($f,T$r),e($f,PU),e(PU,M$r),e($f,E$r),e(Vr,C$r),e(Vr,AL),e(AL,w$r),e(AL,f9e),e(f9e,A$r),e(AL,y$r),e(Vr,L$r),e(Vr,qt),g(yL,qt,null),e(qt,x$r),e(qt,m9e),e(m9e,k$r),e(qt,S$r),e(qt,If),e(If,R$r),e(If,g9e),e(g9e,B$r),e(If,P$r),e(If,$U),e($U,$$r),e(If,I$r),e(qt,q$r),e(qt,h9e),e(h9e,N$r),e(qt,j$r),g(LL,qt,null),e(Vr,D$r),e(Vr,No),g(xL,No,null),e(No,G$r),e(No,p9e),e(p9e,O$r),e(No,V$r),e(No,Gn),e(Gn,X$r),e(Gn,_9e),e(_9e,z$r),e(Gn,Q$r),e(Gn,u9e),e(u9e,W$r),e(Gn,H$r),e(Gn,b9e),e(b9e,U$r),e(Gn,J$r),e(No,Y$r),e(No,F9e),e(F9e,$E),e($E,v9e),e(v9e,K$r),e($E,Z$r),e($E,IU),e(IU,eIr),e($E,oIr),e(No,rIr),e(No,T9e),e(T9e,tIr),e(No,aIr),g(kL,No,null),m$e=!0},p(c,[u]){const SL={};u&2&&(SL.$$scope={dirty:u,ctx:c}),Xf.$set(SL);const M9e={};u&2&&(M9e.$$scope={dirty:u,ctx:c}),jh.$set(M9e);const E9e={};u&2&&(E9e.$$scope={dirty:u,ctx:c}),Jh.$set(E9e)},i(c){m$e||(h(pe.$$.fragment,c),h(Da.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(Xf.$$.fragment,c),h(O5.$$.fragment,c),h(V5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(J5.$$.fragment,c),h(Z5.$$.fragment,c),h(e3.$$.fragment,c),h(o3.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(s3.$$.fragment,c),h(jh.$$.fragment,c),h(l3.$$.fragment,c),h(i3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(g3.$$.fragment,c),h(Jh.$$.fragment,c),h(h3.$$.fragment,c),h(p3.$$.fragment,c),h(_3.$$.fragment,c),h(u3.$$.fragment,c),h(F3.$$.fragment,c),h(v3.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(E3.$$.fragment,c),h(C3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(FA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),m$e=!0)},o(c){p(pe.$$.fragment,c),p(Da.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(Xf.$$.fragment,c),p(O5.$$.fragment,c),p(V5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(J5.$$.fragment,c),p(Z5.$$.fragment,c),p(e3.$$.fragment,c),p(o3.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(s3.$$.fragment,c),p(jh.$$.fragment,c),p(l3.$$.fragment,c),p(i3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(g3.$$.fragment,c),p(Jh.$$.fragment,c),p(h3.$$.fragment,c),p(p3.$$.fragment,c),p(_3.$$.fragment,c),p(u3.$$.fragment,c),p(F3.$$.fragment,c),p(v3.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(E3.$$.fragment,c),p(C3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(FA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),m$e=!1},d(c){t(Z),c&&t(io),c&&t(fe),_(pe),c&&t(jf),c&&t(fa),c&&t(ke),c&&t(co),c&&t(Gf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(fBe),c&&t(Qi),_(D5),c&&t(mBe),c&&t(Qn),c&&t(gBe),_(G5,c),c&&t(hBe),c&&t($8),c&&t(pBe),_(Xf,c),c&&t(_Be),c&&t(Wi),_(O5),c&&t(uBe),c&&t(Qo),_(V5),_(Q5),_(W5),_(H5),c&&t(bBe),c&&t(Ui),_(U5),c&&t(FBe),c&&t(Wo),_(J5),_(Z5),_(e3),_(o3),c&&t(vBe),c&&t(Ji),_(r3),c&&t(TBe),c&&t(Ho),_(t3),_(s3),_(jh),_(l3),_(i3),c&&t(MBe),c&&t(Yi),_(d3),c&&t(EBe),c&&t(Uo),_(c3),_(g3),_(Jh),_(h3),_(p3),c&&t(CBe),c&&t(Zi),_(_3),c&&t(wBe),c&&t(Jo),_(u3),_(F3),_(v3),_(T3),_(M3),c&&t(ABe),c&&t(rd),_(E3),c&&t(yBe),c&&t(Yo),_(C3),_(A3),_(y3),_(L3),_(x3),c&&t(LBe),c&&t(nd),_(k3),c&&t(xBe),c&&t(Ko),_(S3),_(B3),_(P3),_($3),_(I3),c&&t(kBe),c&&t(id),_(q3),c&&t(SBe),c&&t(Zo),_(N3),_(D3),_(G3),_(O3),_(V3),c&&t(RBe),c&&t(fd),_(X3),c&&t(BBe),c&&t(er),_(z3),_(W3),_(H3),_(U3),_(J3),c&&t(PBe),c&&t(hd),_(Y3),c&&t($Be),c&&t(or),_(K3),_(eC),_(oC),_(rC),_(tC),c&&t(IBe),c&&t(ud),_(aC),c&&t(qBe),c&&t(rr),_(nC),_(lC),_(iC),_(dC),_(cC),c&&t(NBe),c&&t(vd),_(fC),c&&t(jBe),c&&t(tr),_(mC),_(hC),_(pC),_(_C),_(uC),c&&t(DBe),c&&t(Ed),_(bC),c&&t(GBe),c&&t(ar),_(FC),_(TC),_(MC),_(EC),_(CC),c&&t(OBe),c&&t(Ad),_(wC),c&&t(VBe),c&&t(nr),_(AC),_(LC),_(xC),_(kC),_(SC),c&&t(XBe),c&&t(xd),_(RC),c&&t(zBe),c&&t(sr),_(BC),_($C),_(IC),_(qC),_(NC),c&&t(QBe),c&&t(Rd),_(jC),c&&t(WBe),c&&t(lr),_(DC),_(OC),_(VC),_(XC),_(zC),c&&t(HBe),c&&t($d),_(QC),c&&t(UBe),c&&t(ir),_(WC),_(UC),_(JC),_(YC),_(KC),c&&t(JBe),c&&t(Nd),_(ZC),c&&t(YBe),c&&t(dr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(KBe),c&&t(Gd),_(sw),c&&t(ZBe),c&&t(cr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(ePe),c&&t(Xd),_(gw),c&&t(oPe),c&&t(fr),_(hw),_(_w),_(uw),_(bw),_(Fw),c&&t(rPe),c&&t(Wd),_(vw),c&&t(tPe),c&&t(mr),_(Tw),_(Ew),_(Cw),_(ww),_(yw),c&&t(aPe),c&&t(Jd),_(Lw),c&&t(nPe),c&&t(gr),_(xw),_(Sw),_(Rw),_(Bw),_(Pw),c&&t(sPe),c&&t(Zd),_($w),c&&t(lPe),c&&t(hr),_(Iw),_(Nw),_(jw),_(Dw),_(Gw),c&&t(iPe),c&&t(tc),_(Ow),c&&t(dPe),c&&t(pr),_(Vw),_(zw),_(Qw),_(Ww),_(Hw),c&&t(cPe),c&&t(sc),_(Uw),c&&t(fPe),c&&t(_r),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(mPe),c&&t(dc),_(rA),c&&t(gPe),c&&t(ur),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(hPe),c&&t(mc),_(dA),c&&t(pPe),c&&t(br),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(_Pe),c&&t(pc),_(_A),c&&t(uPe),c&&t(Fr),_(uA),_(FA),_(vA),_(TA),_(MA),c&&t(bPe),c&&t(bc),_(EA),c&&t(FPe),c&&t(vr),_(CA),_(AA),_(yA),_(LA),_(xA),c&&t(vPe),c&&t(Tc),_(kA),c&&t(TPe),c&&t(Tr),_(SA),_(BA),_(PA),_($A),_(IA),c&&t(MPe),c&&t(Cc),_(qA),c&&t(EPe),c&&t(Mr),_(NA),_(DA),_(GA),_(OA),_(XA),c&&t(CPe),c&&t(yc),_(zA),c&&t(wPe),c&&t(Er),_(QA),_(HA),_(UA),_(JA),_(YA),c&&t(APe),c&&t(kc),_(KA),c&&t(yPe),c&&t(Cr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(LPe),c&&t(Bc),_(n0),c&&t(xPe),c&&t(wr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(kPe),c&&t(Ic),_(m0),c&&t(SPe),c&&t(Ar),_(g0),_(p0),_(_0),_(u0),_(b0),c&&t(RPe),c&&t(jc),_(F0),c&&t(BPe),c&&t(yr),_(v0),_(M0),_(E0),_(C0),_(w0),c&&t(PPe),c&&t(Oc),_(A0),c&&t($Pe),c&&t(Lr),_(y0),_(x0),_(k0),_(S0),_(R0),c&&t(IPe),c&&t(zc),_(B0),c&&t(qPe),c&&t(xr),_(P0),_(I0),_(q0),_(N0),_(j0),c&&t(NPe),c&&t(Hc),_(D0),c&&t(jPe),c&&t(kr),_(G0),_(V0),_(X0),_(z0),_(Q0),c&&t(DPe),c&&t(Yc),_(W0),c&&t(GPe),c&&t(Sr),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(OPe),c&&t(ef),_(ey),c&&t(VPe),c&&t(Rr),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(XPe),c&&t(tf),_(ly),c&&t(zPe),c&&t(Br),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(QPe),c&&t(sf),_(hy),c&&t(WPe),c&&t(Pr),_(py),_(uy),_(by),_(Fy),_(vy),c&&t(HPe),c&&t(cf),_(Ty),c&&t(UPe),c&&t($r),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(JPe),c&&t(gf),_(Ly),c&&t(YPe),c&&t(Ir),_(xy),_(Sy),_(Ry),_(By),_(Py),c&&t(KPe),c&&t(_f),_($y),c&&t(ZPe),c&&t(qr),_(Iy),_(Ny),_(jy),_(Dy),_(Gy),c&&t(e$e),c&&t(Ff),_(Oy),c&&t(o$e),c&&t(Nr),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(r$e),c&&t(Mf),_(Uy),c&&t(t$e),c&&t(jr),_(Jy),_(Ky),_(Zy),_(eL),_(oL),c&&t(a$e),c&&t(wf),_(rL),c&&t(n$e),c&&t(Dr),_(tL),_(nL),_(sL),_(lL),_(iL),c&&t(s$e),c&&t(Lf),_(dL),c&&t(l$e),c&&t(Gr),_(cL),_(mL),_(gL),_(hL),_(pL),c&&t(i$e),c&&t(Sf),_(_L),c&&t(d$e),c&&t(Or),_(uL),_(FL),_(vL),_(TL),_(EL),c&&t(c$e),c&&t(Pf),_(CL),c&&t(f$e),c&&t(Vr),_(wL),_(yL),_(LL),_(xL),_(kL)}}}const uwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function bwt(Nf){return mwt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Cwt extends iwt{constructor(Z){super();dwt(this,Z,bwt,_wt,cwt,{})}}export{Cwt as default,uwt as metadata};
