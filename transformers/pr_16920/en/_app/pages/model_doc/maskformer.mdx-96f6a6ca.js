import{S as ud,i as gd,s as _d,e as s,k as l,w as u,t as r,M as kd,c as n,d as o,m as c,a as i,x as g,h as a,b as d,N as bd,F as e,g as p,y as _,q as k,o as b,B as F,v as Fd}from"../../chunks/vendor-6b77c823.js";import{T as Lr}from"../../chunks/Tip-39098574.js";import{D as P}from"../../chunks/Docstring-1088f2fb.js";import{C as Xn}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as wt}from"../../chunks/IconCopyLink-7a11ce68.js";function vd(B){let h,T,f,v,$;return{c(){h=s("p"),T=r(`This is a recently introduced model so the API hasn\u2019t been tested extensively. There may be some bugs or slight
breaking changes to fix it in the future. If you see something strange, file a `),f=s("a"),v=r("Github Issue"),$=r("."),this.h()},l(w){h=n(w,"P",{});var x=i(h);T=a(x,`This is a recently introduced model so the API hasn\u2019t been tested extensively. There may be some bugs or slight
breaking changes to fix it in the future. If you see something strange, file a `),f=n(x,"A",{href:!0,rel:!0});var O=i(f);v=a(O,"Github Issue"),O.forEach(o),$=a(x,"."),x.forEach(o),this.h()},h(){d(f,"href","https://github.com/huggingface/transformers/issues/new?assignees=&labels=&template=bug-report.md&title"),d(f,"rel","nofollow")},m(w,x){p(w,h,x),e(h,T),e(h,f),e(f,v),e(h,$)},d(w){w&&o(h)}}}function wd(B){let h,T;return{c(){h=s("p"),T=r(`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`)},l(f){h=n(f,"P",{});var v=i(h);T=a(v,`NumPy arrays and PyTorch tensors are converted to PIL images when resizing, so the most efficient is to pass
PIL images.`),v.forEach(o)},m(f,v){p(f,h,v),e(h,T)},d(f){f&&o(h)}}}function xd(B){let h,T,f,v,$;return{c(){h=s("p"),T=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s("code"),v=r("Module"),$=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){h=n(w,"P",{});var x=i(h);T=a(x,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n(x,"CODE",{});var O=i(f);v=a(O,"Module"),O.forEach(o),$=a(x,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),x.forEach(o)},m(w,x){p(w,h,x),e(h,T),e(h,f),e(f,v),e(h,$)},d(w){w&&o(h)}}}function yd(B){let h,T,f,v,$;return{c(){h=s("p"),T=r("Although the recipe for forward pass needs to be defined within this function, one should call the "),f=s("code"),v=r("Module"),$=r(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(w){h=n(w,"P",{});var x=i(h);T=a(x,"Although the recipe for forward pass needs to be defined within this function, one should call the "),f=n(x,"CODE",{});var O=i(f);v=a(O,"Module"),O.forEach(o),$=a(x,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),x.forEach(o)},m(w,x){p(w,h,x),e(h,T),e(h,f),e(f,v),e(h,$)},d(w){w&&o(h)}}}function Md(B){let h,T,f,v,$,w,x,O,Ar,qo,ce,Ho,Y,me,eo,Oe,jr,to,Nr,Ro,pe,Dr,ze,qr,Hr,Bo,xt,Rr,Wo,yt,oo,Br,Uo,Mt,Wr,Vo,j,S,Ur,Tt,Vr,Gr,ro,Kr,Qr,$t,Xr,Yr,ao,Jr,Zr,ea,L,ta,so,oa,ra,no,aa,sa,io,na,ia,Ce,da,la,ca,Se,ma,Et,pa,ha,fa,A,ua,It,ga,_a,Pt,ka,ba,Ot,Fa,va,lo,wa,xa,Go,he,ya,Le,Ma,Ta,Ko,Ae,Yn,Qo,W,$a,je,Ea,Ia,Ne,Pa,Oa,Xo,J,fe,co,De,za,mo,Ca,Yo,Z,qe,Sa,He,La,zt,Aa,ja,Jo,D,Re,Na,Be,Da,Ct,qa,Ha,Ra,ee,Ba,St,Wa,Ua,Lt,Va,Ga,Zo,te,ue,po,We,Ka,ho,Qa,er,y,Ue,Xa,oe,Ya,At,Ja,Za,Ve,es,ts,os,re,rs,jt,as,ss,Nt,ns,is,ds,Ge,ls,Dt,cs,ms,ps,fo,hs,fs,Ke,us,ge,Qe,gs,Xe,_s,qt,ks,bs,Fs,_e,Ye,vs,Je,ws,Ht,xs,ys,tr,ae,ke,uo,Ze,Ms,go,Ts,or,M,et,$s,_o,Es,Is,tt,Ps,Rt,Os,zs,Cs,N,ot,Ss,ko,Ls,As,q,js,bo,Ns,Ds,Fo,qs,Hs,vo,Rs,Bs,Ws,be,Us,U,rt,Vs,at,Gs,wo,Ks,Qs,Xs,H,Ys,xo,Js,Zs,yo,en,tn,Mo,on,rn,an,Fe,st,sn,nt,nn,To,dn,ln,cn,ve,it,mn,dt,pn,$o,hn,fn,un,we,lt,gn,ct,_n,Eo,kn,bn,rr,se,xe,Io,mt,Fn,Po,vn,ar,R,pt,wn,ht,xn,ft,yn,Mn,Tn,z,ut,$n,ne,En,Bt,In,Pn,Oo,On,zn,Cn,ye,Sn,zo,Ln,An,gt,sr,ie,Me,Co,_t,jn,So,Nn,nr,de,kt,Dn,C,bt,qn,le,Hn,Wt,Rn,Bn,Lo,Wn,Un,Vn,Te,Gn,Ao,Kn,Qn,Ft,ir;return w=new wt({}),ce=new Lr({props:{$$slots:{default:[vd]},$$scope:{ctx:B}}}),Oe=new wt({}),De=new wt({}),qe=new P({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",parameters:[{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.transformer_decoder_hidden_states",description:`<strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.`,name:"transformer_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L215"}}),Re=new P({props:{name:"class transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput",parameters:[{name:"loss",val:": typing.Optional[torch.FloatTensor] = None"},{name:"class_queries_logits",val:": FloatTensor = None"},{name:"masks_queries_logits",val:": FloatTensor = None"},{name:"auxiliary_logits",val:": FloatTensor = None"},{name:"encoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"pixel_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"transformer_decoder_last_hidden_state",val:": typing.Optional[torch.FloatTensor] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"pixel_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"transformer_decoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],parametersDescription:[{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.loss",description:`<strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) &#x2014;
The computed loss, returned when labels are present.`,name:"loss"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.class_queries_logits",description:`<strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.`,name:"class_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.masks_queries_logits",description:`<strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) &#x2014;
A tensor of shape <code>(batch_size, num_queries, num_labels + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.`,name:"masks_queries_logits"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_last_hidden_state",description:`<strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the encoder model (backbone).`,name:"encoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_last_hidden_state",description:`<strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).`,name:"pixel_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.transformer_decoder_last_hidden_state",description:`<strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the transformer decoder model.`,name:"transformer_decoder_last_hidden_state"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.`,name:"encoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.pixel_decoder_hidden_states",description:`<strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.`,name:"pixel_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.transformer_decoder_hidden_states",description:`<strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the transformer decoder at the output
of each stage.`,name:"transformer_decoder_hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.hidden_states",description:`<strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.`,name:"hidden_states"},{anchor:"transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr&#x2019;s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.`,name:"attentions"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L258"}}),We=new wt({}),Ue=new P({props:{name:"class transformers.MaskFormerConfig",anchor:"transformers.MaskFormerConfig",parameters:[{name:"fpn_feature_size",val:": int = 256"},{name:"mask_feature_size",val:": int = 256"},{name:"no_object_weight",val:": float = 0.1"},{name:"use_auxiliary_loss",val:": bool = False"},{name:"backbone_config",val:": typing.Optional[typing.Dict] = None"},{name:"decoder_config",val:": typing.Optional[typing.Dict] = None"},{name:"init_std",val:": float = 0.02"},{name:"init_xavier_std",val:": float = 1.0"},{name:"dice_weight",val:": float = 1.0"},{name:"cross_entropy_weight",val:": float = 1.0"},{name:"mask_weight",val:": float = 20.0"},{name:"output_auxiliary_logits",val:": typing.Optional[bool] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerConfig.mask_feature_size",description:`<strong>mask_feature_size</strong> (<code>int</code>, <em>optional</em>, defaults to 256) &#x2014;
The masks&#x2019; features size, this value will also be used to specify the Feature Pyramid Network features&#x2019;
size.`,name:"mask_feature_size"},{anchor:"transformers.MaskFormerConfig.no_object_weight",description:`<strong>no_object_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 0.1) &#x2014;
Weight to apply to the null (no object) class.`,name:"no_object_weight"},{anchor:"transformers.MaskFormerConfig.use_auxiliary_loss(bool,",description:`<strong>use_auxiliary_loss(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code> <code>MaskFormerForInstanceSegmentationOutput</code> will contain the auxiliary losses computed using the
logits from each decoder&#x2019;s stage.`,name:"use_auxiliary_loss(bool,"},{anchor:"transformers.MaskFormerConfig.backbone_config",description:`<strong>backbone_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the backbone, if unset, the configuration corresponding to
<code>swin-base-patch4-window12-384</code> will be used.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.decoder_config",description:`<strong>decoder_config</strong> (<code>Dict</code>, <em>optional</em>) &#x2014;
The configuration passed to the transformer decoder model, if unset the base config for <code>detr-resnet-50</code>
will be used.`,name:"decoder_config"},{anchor:"transformers.MaskFormerConfig.init_std",description:`<strong>init_std</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"init_std"},{anchor:"transformers.MaskFormerConfig.init_xavier_std",description:`<strong>init_xavier_std</strong> (<code>float</code>, <em>optional</em>, defaults to 1) &#x2014;
The scaling factor used for the Xavier initialization gain in the HM Attention map module.`,name:"init_xavier_std"},{anchor:"transformers.MaskFormerConfig.dice_weight",description:`<strong>dice_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the dice loss.`,name:"dice_weight"},{anchor:"transformers.MaskFormerConfig.cross_entropy_weight",description:`<strong>cross_entropy_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
The weight for the cross entropy loss.`,name:"cross_entropy_weight"},{anchor:"transformers.MaskFormerConfig.mask_weight",description:`<strong>mask_weight</strong> (<code>float</code>, <em>optional</em>, defaults to 20.0) &#x2014;
The weight for the mask loss.`,name:"mask_weight"},{anchor:"transformers.MaskFormerConfig.output_auxiliary_logits",description:`<strong>output_auxiliary_logits</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Should the model output its <code>auxiliary_logits</code> or not.`,name:"output_auxiliary_logits"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/configuration_maskformer.py#L34"}}),Ke=new Xn({props:{code:`from transformers import MaskFormerConfig, MaskFormerModel

# Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration
configuration = MaskFormerConfig()

# Initializing a model from the facebook/maskformer-swin-base-ade style configuration
model = MaskFormerModel(configuration)

# Accessing the model configuration
configuration = model.config`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerConfig, MaskFormerModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a MaskFormer facebook/maskformer-swin-base-ade configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = MaskFormerConfig()

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the facebook/maskformer-swin-base-ade style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel(configuration)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),Qe=new P({props:{name:"from_backbone_and_decoder_configs",anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs",parameters:[{name:"backbone_config",val:": PretrainedConfig"},{name:"decoder_config",val:": PretrainedConfig"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs.backbone_config",description:`<strong>backbone_config</strong> (<a href="/docs/transformers/pr_16920/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The backbone configuration.`,name:"backbone_config"},{anchor:"transformers.MaskFormerConfig.from_backbone_and_decoder_configs.decoder_config",description:`<strong>decoder_config</strong> (<a href="/docs/transformers/pr_16920/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The transformer decoder configuration to use.`,name:"decoder_config"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/configuration_maskformer.py#L168",returnDescription:`
<p>An instance of a configuration object</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a></p>
`}}),Ye=new P({props:{name:"to_dict",anchor:"transformers.MaskFormerConfig.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/configuration_maskformer.py#L190",returnDescription:`
<p>Dictionary of all the attributes that make up this configuration instance,</p>
`,returnType:`
<p><code>Dict[str, any]</code></p>
`}}),Ze=new wt({}),et=new P({props:{name:"class transformers.MaskFormerFeatureExtractor",anchor:"transformers.MaskFormerFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 800"},{name:"max_size",val:" = 1333"},{name:"resample",val:" = <Resampling.BILINEAR: 2>"},{name:"size_divisibility",val:" = 32"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"ignore_index",val:" = None"},{name:"reduce_labels",val:" = False"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.MaskFormerFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 800) &#x2014;
Resize the input to the given size. Only has an effect if <code>do_resize</code> is set to <code>True</code>. If size is a
sequence like <code>(width, height)</code>, output size will be matched to this. If size is an int, smaller edge of
the image will be matched to this number. i.e, if <code>height &gt; width</code>, then image will be rescaled to <code>(size * height / width, size)</code>.`,name:"size"},{anchor:"transformers.MaskFormerFeatureExtractor.max_size",description:`<strong>max_size</strong> (<code>int</code>, <em>optional</em>, defaults to 1333) &#x2014;
The largest size an image dimension can have (otherwise it&#x2019;s capped). Only has an effect if <code>do_resize</code> is
set to <code>True</code>.`,name:"max_size"},{anchor:"transformers.MaskFormerFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BILINEAR</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.MaskFormerFeatureExtractor.size_divisibility",description:`<strong>size_divisibility</strong> (<code>int</code>, <em>optional</em>, defaults to 32) &#x2014;
Some backbones need images divisible by a certain number. If not passed, it defaults to the value used in
Swin Transformer.`,name:"size_divisibility"},{anchor:"transformers.MaskFormerFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.MaskFormerFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images. Defaults to the ImageNet mean.`,name:"image_mean"},{anchor:"transformers.MaskFormerFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>int</code>, <em>optional</em>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images. Defaults to the
ImageNet std.`,name:"image_std"},{anchor:"transformers.MaskFormerFeatureExtractor.ignore_index",description:`<strong>ignore_index</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Value of the index (label) to be removed from the segmentation maps.`,name:"ignore_index"},{anchor:"transformers.MaskFormerFeatureExtractor.reduce_labels",description:`<strong>reduce_labels</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to reduce all label values of segmentation maps by 1. Usually used for datasets where 0 is
used for background, and background itself is not included in all classes of a dataset (e.g. ADE20k). The
background label will be replaced by <code>ignore_index</code>.`,name:"reduce_labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L38"}}),ot=new P({props:{name:"__call__",anchor:"transformers.MaskFormerFeatureExtractor.__call__",parameters:[{name:"images",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]]"},{name:"segmentation_maps",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"pad_and_return_pixel_mask",val:": typing.Optional[bool] = True"},{name:"instance_id_to_semantic_id",val:": typing.Union[typing.Dict[int, int], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.__call__.images",description:`<strong>images</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>) &#x2014;
The image or batch of images to be prepared. Each image can be a PIL image, NumPy array or PyTorch
tensor. In case of a NumPy array/PyTorch tensor, each image should be of shape (C, H, W), where C is a
number of channels, H and W are image height and width.`,name:"images"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
Optionally, the corresponding semantic segmentation maps with the pixel-wise annotations.`,name:"segmentation_maps"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.instance_id_to_semantic_id",description:`<strong>instance_id_to_semantic_id</strong> (<code>Dict[int, int]</code>, <em>optional</em>) &#x2014;
If passed, we treat <code>segmentation_maps</code> as an instance segmentation map where each pixel represents an
instance id. To convert it to a binary mask of shape (<code>batch, num_labels, height, width</code>) we need a
dictionary mapping instance ids to label ids to create a semantic segmentation map.`,name:"instance_id_to_semantic_id"},{anchor:"transformers.MaskFormerFeatureExtractor.__call__.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_16920/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L160",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16920/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<em>\u201Cpixel_mask\u201D</em> is in <code>self.model_input_names</code>).</li>
<li><strong>mask_labels</strong> \u2014 Optional list of mask labels of shape <code>(labels, height, width)</code> to be fed to a model
(when <code>annotations</code> are provided).</li>
<li><strong>class_labels</strong> \u2014 Optional list of class labels of shape <code>(labels)</code> to be fed to a model (when
<code>annotations</code> are provided). They identify the labels of <code>mask_labels</code>, e.g. the label of
<code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16920/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),be=new Lr({props:{warning:!0,$$slots:{default:[wd]},$$scope:{ctx:B}}}),rt=new P({props:{name:"encode_inputs",anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs",parameters:[{name:"pixel_values_list",val:": typing.List[ForwardRef('np.ndarray')]"},{name:"segmentation_maps",val:": typing.Union[PIL.Image.Image, numpy.ndarray, ForwardRef('torch.Tensor'), typing.List[PIL.Image.Image], typing.List[numpy.ndarray], typing.List[ForwardRef('torch.Tensor')]] = None"},{name:"pad_and_return_pixel_mask",val:": bool = True"},{name:"instance_id_to_semantic_id",val:": typing.Union[typing.Dict[int, int], NoneType] = None"},{name:"return_tensors",val:": typing.Union[str, transformers.utils.generic.TensorType, NoneType] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.pixel_values_list",description:`<strong>pixel_values_list</strong> (<code>List[torch.Tensor]</code>) &#x2014;
List of images (pixel values) to be padded. Each image should be a tensor of shape <code>(channels, height, width)</code>.`,name:"pixel_values_list"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.segmentation_maps",description:`<strong>segmentation_maps</strong> (<code>PIL.Image.Image</code>, <code>np.ndarray</code>, <code>torch.Tensor</code>, <code>List[PIL.Image.Image]</code>, <code>List[np.ndarray]</code>, <code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
The corresponding semantic segmentation maps with the pixel-wise annotations.`,name:"segmentation_maps"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.pad_and_return_pixel_mask",description:`<strong>pad_and_return_pixel_mask</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to pad images up to the largest image in a batch and create a pixel mask.</p>
<p>If left to the default, will return a pixel mask that is:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>`,name:"pad_and_return_pixel_mask"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.instance_id_to_semantic_id",description:`<strong>instance_id_to_semantic_id</strong> (<code>Dict[int, int]</code>, <em>optional</em>) &#x2014;
If passed, we treat <code>segmentation_maps</code> as an instance segmentation map where each pixel represents an
instance id. To convert it to a binary mask of shape (<code>batch, num_labels, height, width</code>) we need a
dictionary mapping instance ids to label ids to create a semantic segmentation map.`,name:"instance_id_to_semantic_id"},{anchor:"transformers.MaskFormerFeatureExtractor.encode_inputs.return_tensors",description:`<strong>return_tensors</strong> (<code>str</code> or <a href="/docs/transformers/pr_16920/en/internal/file_utils#transformers.TensorType">TensorType</a>, <em>optional</em>) &#x2014;
If set, will return tensors instead of NumPy arrays. If set to <code>&apos;pt&apos;</code>, return PyTorch <code>torch.Tensor</code>
objects.`,name:"return_tensors"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L343",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16920/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a> with the following fields:</p>
<ul>
<li><strong>pixel_values</strong> \u2014 Pixel values to be fed to a model.</li>
<li><strong>pixel_mask</strong> \u2014 Pixel mask to be fed to a model (when <code>pad_and_return_pixel_mask=True</code> or if
<em>\u201Cpixel_mask\u201D</em> is in <code>self.model_input_names</code>).</li>
<li><strong>mask_labels</strong> \u2014 Optional list of mask labels of shape <code>(labels, height, width)</code> to be fed to a model
(when <code>annotations</code> are provided).</li>
<li><strong>class_labels</strong> \u2014 Optional list of class labels of shape <code>(labels)</code> to be fed to a model (when
<code>annotations</code> are provided). They identify the labels of <code>mask_labels</code>, e.g. the label of
<code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16920/en/main_classes/feature_extractor#transformers.BatchFeature"
>BatchFeature</a></p>
`}}),st=new P({props:{name:"post_process_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"target_size",val:": typing.Tuple[int, int] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_segmentation.target_size",description:`<strong>target_size</strong> (<code>Tuple[int, int]</code>, <em>optional</em>) &#x2014;
If set, the <code>masks_queries_logits</code> will be resized to <code>target_size</code>.`,name:"target_size"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L455",returnDescription:`
<p>A tensor of shape (<code>batch_size, num_labels, height, width</code>).</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),it=new P({props:{name:"post_process_semantic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"target_size",val:": typing.Tuple[int, int] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L526",returnDescription:`
<p>A tensor of shape <code>batch_size, height, width</code>.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),lt=new P({props:{name:"post_process_panoptic_segmentation",anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation",parameters:[{name:"outputs",val:": MaskFormerForInstanceSegmentationOutput"},{name:"object_mask_threshold",val:": float = 0.8"},{name:"overlap_mask_area_threshold",val:": float = 0.8"},{name:"label_ids_to_fuse",val:": typing.Optional[typing.Set[int]] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.outputs",description:`<strong>outputs</strong> (<code>MaskFormerForInstanceSegmentationOutput</code>) &#x2014;
The outputs from <a href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a>.`,name:"outputs"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.object_mask_threshold",description:`<strong>object_mask_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The object mask threshold.`,name:"object_mask_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.overlap_mask_area_threshold",description:`<strong>overlap_mask_area_threshold</strong> (<code>float</code>, <em>optional</em>, defaults to 0.8) &#x2014;
The overlap mask area threshold to use.`,name:"overlap_mask_area_threshold"},{anchor:"transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation.label_ids_to_fuse",description:`<strong>label_ids_to_fuse</strong> (<code>Set[int]</code>, <em>optional</em>) &#x2014;
The labels in this state will have all their instances be fused together. For instance we could say
there can only be one sky in an image, but several persons, so the label ID for sky would be in that
set, but not the one for person.`,name:"label_ids_to_fuse"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/feature_extraction_maskformer.py#L544",returnDescription:`
<p>A list of dictionaries, one per image, each dictionary containing two keys:</p>
<ul>
<li><strong>segmentation</strong> \u2014 a tensor of shape <code>(height, width)</code> where each pixel represents a <code>segment_id</code>.</li>
<li><strong>segments</strong> \u2014 a dictionary with the following keys<ul>
<li><strong>id</strong> \u2014 an integer representing the <code>segment_id</code>.</li>
<li><strong>label_id</strong> \u2014 an integer representing the segment\u2019s label.</li>
<li><strong>was_fused</strong> \u2014 a boolean, <code>True</code> if <code>label_id</code> was in <code>label_ids_to_fuse</code>, <code>False</code> otherwise.</li>
</ul></li>
</ul>
`,returnType:`
<p><code>List[Dict]</code></p>
`}}),mt=new wt({}),pt=new P({props:{name:"class transformers.MaskFormerModel",anchor:"transformers.MaskFormerModel",parameters:[{name:"config",val:": MaskFormerConfig"}],parametersDescription:[{anchor:"transformers.MaskFormerModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_16920/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L2287"}}),ut=new P({props:{name:"forward",anchor:"transformers.MaskFormerModel.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16920/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerModel.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerModel.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L2297",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states (also called feature maps) of the
transformer decoder at the output of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code></li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),ye=new Lr({props:{$$slots:{default:[xd]},$$scope:{ctx:B}}}),gt=new Xn({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
model = MaskFormerModel.from_pretrained("facebook/maskformer-swin-base-ade")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape)
`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerModel.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
`}}),_t=new wt({}),kt=new P({props:{name:"class transformers.MaskFormerForInstanceSegmentation",anchor:"transformers.MaskFormerForInstanceSegmentation",parameters:[{name:"config",val:": MaskFormerConfig"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L2367"}}),bt=new P({props:{name:"forward",anchor:"transformers.MaskFormerForInstanceSegmentation.forward",parameters:[{name:"pixel_values",val:": Tensor"},{name:"mask_labels",val:": typing.Optional[typing.List[torch.Tensor]] = None"},{name:"class_labels",val:": typing.Optional[typing.List[torch.Tensor]] = None"},{name:"pixel_mask",val:": typing.Optional[torch.Tensor] = None"},{name:"output_auxiliary_logits",val:": typing.Optional[bool] = None"},{name:"output_hidden_states",val:": typing.Optional[bool] = None"},{name:"output_attentions",val:": typing.Optional[bool] = None"},{name:"return_dict",val:": typing.Optional[bool] = None"}],parametersDescription:[{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_16920/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code> for details.`,name:"pixel_values"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.pixel_mask",description:`<strong>pixel_mask</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, height, width)</code>, <em>optional</em>) &#x2014;
Mask to avoid performing attention on padding pixel values. Mask values selected in <code>[0, 1]</code>:</p>
<ul>
<li>1 for pixels that are real (i.e. <strong>not masked</strong>),</li>
<li>0 for pixels that are padding (i.e. <strong>masked</strong>).</li>
</ul>
<p><a href="../glossary#attention-mask">What are attention masks?</a>`,name:"pixel_mask"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.output_attentions",description:`<strong>output_attentions</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the attentions tensors of Detr&#x2019;s decoder attention layers.`,name:"output_attentions"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <code>~MaskFormerModelOutput</code> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.mask_labels",description:`<strong>mask_labels</strong> (<code>List[torch.Tensor]</code>, <em>optional</em>) &#x2014;
List of mask labels of shape <code>(num_labels, height, width)</code> to be fed to a model`,name:"mask_labels"},{anchor:"transformers.MaskFormerForInstanceSegmentation.forward.class_labels",description:`<strong>class_labels</strong> (<code>List[torch.LongTensor]</code>, <em>optional</em>) &#x2014;
list of target class labels of shape <code>(num_labels, height, width)</code> to be fed to a model. They identify the
labels of <code>mask_labels</code>, e.g. the label of <code>mask_labels[i][j]</code> if <code>class_labels[i][j]</code>.`,name:"class_labels"}],source:"https://github.com/huggingface/transformers/blob/pr_16920/src/transformers/models/maskformer/modeling_maskformer.py#L2448",returnDescription:`
<p>A <a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig"
>MaskFormerConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.Tensor</code>, <em>optional</em>) \u2014 The computed loss, returned when labels are present.</li>
<li><strong>class_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, height, width)</code> representing the proposed masks for each
query.</li>
<li><strong>masks_queries_logits</strong> (<code>torch.FloatTensor</code>) \u2014 A tensor of shape <code>(batch_size, num_queries, num_labels + 1)</code> representing the proposed classes for each
query. Note the <code>+ 1</code> is needed because we incorporate the null class.</li>
<li><strong>encoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the encoder model (backbone).</li>
<li><strong>pixel_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the pixel decoder model (FPN).</li>
<li><strong>transformer_decoder_last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, sequence_length, hidden_size)</code>) \u2014 Last hidden states (final feature map) of the last stage of the transformer decoder model.</li>
<li><strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the encoder
model at the output of each stage.</li>
<li><strong>pixel_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the pixel
decoder model at the output of each stage.</li>
<li><strong>transformer_decoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, sequence_length, hidden_size)</code>. Hidden-states of the transformer decoder at the output
of each stage.</li>
<li><strong>hidden_states</strong> <code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> containing <code>encoder_hidden_states</code>, <code>pixel_decoder_hidden_states</code> and
<code>decoder_hidden_states</code>.</li>
<li><strong>attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or when <code>config.output_attentions=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for each layer) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>. Attentions weights from Detr\u2019s decoder after the attention softmax, used to compute the
weighted average in the self-attention heads.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput"
>transformers.models.maskformer.modeling_maskformer.MaskFormerForInstanceSegmentationOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),Te=new Lr({props:{$$slots:{default:[yd]},$$scope:{ctx:B}}}),Ft=new Xn({props:{code:`from transformers import MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
from PIL import Image
import requests

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)
feature_extractor = MaskFormerFeatureExtractor.from_pretrained("facebook/maskformer-swin-base-ade")
inputs = feature_extractor(images=image, return_tensors="pt")

model = MaskFormerForInstanceSegmentation.from_pretrained("facebook/maskformer-swin-base-ade")
outputs = model(**inputs)
# model predicts class_queries_logits of shape \`(batch_size, num_queries)\`
# and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`
class_queries_logits = outputs.class_queries_logits
masks_queries_logits = outputs.masks_queries_logits

# you can pass them to feature_extractor for postprocessing
output = feature_extractor.post_process_segmentation(outputs)
output = feature_extractor.post_process_semantic_segmentation(outputs)
output = feature_extractor.post_process_panoptic_segmentation(outputs)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> MaskFormerFeatureExtractor, MaskFormerForInstanceSegmentation
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> requests

<span class="hljs-meta">&gt;&gt;&gt; </span>url = <span class="hljs-string">&quot;http://images.cocodataset.org/val2017/000000039769.jpg&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>image = Image.<span class="hljs-built_in">open</span>(requests.get(url, stream=<span class="hljs-literal">True</span>).raw)
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = MaskFormerFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(images=image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>model = MaskFormerForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;facebook/maskformer-swin-base-ade&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(**inputs)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts class_queries_logits of shape \`(batch_size, num_queries)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># and masks_queries_logits of shape \`(batch_size, num_queries, height, width)\`</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>class_queries_logits = outputs.class_queries_logits
<span class="hljs-meta">&gt;&gt;&gt; </span>masks_queries_logits = outputs.masks_queries_logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># you can pass them to feature_extractor for postprocessing</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_segmentation(outputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_semantic_segmentation(outputs)
<span class="hljs-meta">&gt;&gt;&gt; </span>output = feature_extractor.post_process_panoptic_segmentation(outputs)`}}),{c(){h=s("meta"),T=l(),f=s("h1"),v=s("a"),$=s("span"),u(w.$$.fragment),x=l(),O=s("span"),Ar=r("MaskFormer"),qo=l(),u(ce.$$.fragment),Ho=l(),Y=s("h2"),me=s("a"),eo=s("span"),u(Oe.$$.fragment),jr=l(),to=s("span"),Nr=r("Overview"),Ro=l(),pe=s("p"),Dr=r("The MaskFormer model was proposed in "),ze=s("a"),qr=r("Per-Pixel Classification is Not All You Need for Semantic Segmentation"),Hr=r(" by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),Bo=l(),xt=s("p"),Rr=r("The abstract from the paper is the following:"),Wo=l(),yt=s("p"),oo=s("em"),Br=r("Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),Uo=l(),Mt=s("p"),Wr=r("Tips:"),Vo=l(),j=s("ul"),S=s("li"),Ur=r("MaskFormer\u2019s Transformer decoder is identical to the decoder of "),Tt=s("a"),Vr=r("DETR"),Gr=r(". During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help the model output the correct number of objects of each class. If you set the parameter "),ro=s("code"),Kr=r("use_auxilary_loss"),Qr=r(" of "),$t=s("a"),Xr=r("MaskFormerConfig"),Yr=r(" to "),ao=s("code"),Jr=r("True"),Zr=r(", then prediction feedforward neural networks and Hungarian losses are added after each decoder layer (with the FFNs sharing parameters)."),ea=l(),L=s("li"),ta=r(`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),so=s("code"),oa=r("get_num_masks"),ra=r(" function inside in the "),no=s("code"),aa=r("MaskFormerLoss"),sa=r(" class of "),io=s("code"),na=r("modeling_maskformer.py"),ia=r(`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),Ce=s("a"),da=r("here"),la=r("."),ca=l(),Se=s("li"),ma=r("One can use "),Et=s("a"),pa=r("MaskFormerFeatureExtractor"),ha=r(" to prepare images for the model and optional targets for the model."),fa=l(),A=s("li"),ua=r("To get the final segmentation, depending on the task, you can call "),It=s("a"),ga=r("post_process_semantic_segmentation()"),_a=r(" or "),Pt=s("a"),ka=r("post_process_panoptic_segmentation()"),ba=r(". Both tasks can be solved using "),Ot=s("a"),Fa=r("MaskFormerForInstanceSegmentation"),va=r(" output, the latter needs an additional "),lo=s("code"),wa=r("is_thing_map"),xa=r(" to know which instances must be merged together.."),Go=l(),he=s("p"),ya=r("The figure below illustrates the architecture of MaskFormer. Taken from the "),Le=s("a"),Ma=r("original paper"),Ta=r("."),Ko=l(),Ae=s("img"),Qo=l(),W=s("p"),$a=r("This model was contributed by "),je=s("a"),Ea=r("francesco"),Ia=r(". The original code can be found "),Ne=s("a"),Pa=r("here"),Oa=r("."),Xo=l(),J=s("h2"),fe=s("a"),co=s("span"),u(De.$$.fragment),za=l(),mo=s("span"),Ca=r("MaskFormer specific outputs"),Yo=l(),Z=s("div"),u(qe.$$.fragment),Sa=l(),He=s("p"),La=r("Class for outputs of "),zt=s("a"),Aa=r("MaskFormerModel"),ja=r(". This class returns all the needed hidden states to compute the logits."),Jo=l(),D=s("div"),u(Re.$$.fragment),Na=l(),Be=s("p"),Da=r("Class for outputs of "),Ct=s("a"),qa=r("MaskFormerForInstanceSegmentation"),Ha=r("."),Ra=l(),ee=s("p"),Ba=r("This output can be directly passed to "),St=s("a"),Wa=r("post_process_segmentation()"),Ua=r(` or
`),Lt=s("a"),Va=r("post_process_panoptic_segmentation()"),Ga=r(" depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),Zo=l(),te=s("h2"),ue=s("a"),po=s("span"),u(We.$$.fragment),Ka=l(),ho=s("span"),Qa=r("MaskFormerConfig"),er=l(),y=s("div"),u(Ue.$$.fragment),Xa=l(),oe=s("p"),Ya=r("This is the configuration class to store the configuration of a "),At=s("a"),Ja=r("MaskFormerModel"),Za=r(`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the
\u201Cfacebook/maskformer-swin-base-ade\u201D architecture trained on
`),Ve=s("a"),es=r("ADE20k-150"),ts=r("."),os=l(),re=s("p"),rs=r("Configuration objects inherit from "),jt=s("a"),as=r("PretrainedConfig"),ss=r(` and can be used to control the model outputs. Read the
documentation from `),Nt=s("a"),ns=r("PretrainedConfig"),is=r(" for more information."),ds=l(),Ge=s("p"),ls=r("Currently, MaskFormer only supports the "),Dt=s("a"),cs=r("Swin Transformer"),ms=r(" as backbone."),ps=l(),fo=s("p"),hs=r("Examples:"),fs=l(),u(Ke.$$.fragment),us=l(),ge=s("div"),u(Qe.$$.fragment),gs=l(),Xe=s("p"),_s=r("Instantiate a "),qt=s("a"),ks=r("MaskFormerConfig"),bs=r(` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),Fs=l(),_e=s("div"),u(Ye.$$.fragment),vs=l(),Je=s("p"),ws=r("Serializes this instance to a Python dictionary. Override the default "),Ht=s("a"),xs=r("to_dict()"),ys=r("."),tr=l(),ae=s("h2"),ke=s("a"),uo=s("span"),u(Ze.$$.fragment),Ms=l(),go=s("span"),Ts=r("MaskFormerFeatureExtractor"),or=l(),M=s("div"),u(et.$$.fragment),$s=l(),_o=s("p"),Es=r(`Constructs a MaskFormer feature extractor. The feature extractor can be used to prepare image(s) and optional
targets for the model.`),Is=l(),tt=s("p"),Ps=r("This feature extractor inherits from "),Rt=s("a"),Os=r("FeatureExtractionMixin"),zs=r(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Cs=l(),N=s("div"),u(ot.$$.fragment),Ss=l(),ko=s("p"),Ls=r(`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),As=l(),q=s("p"),js=r(`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),bo=s("code"),Ns=r("segmentation_maps = [[2,6,7,9]]"),Ds=r(", the output will contain "),Fo=s("code"),qs=r("mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),Hs=r(" (four binary masks) and "),vo=s("code"),Rs=r("class_labels = [2,6,7,9]"),Bs=r(`, the labels for
each mask.`),Ws=l(),u(be.$$.fragment),Us=l(),U=s("div"),u(rt.$$.fragment),Vs=l(),at=s("p"),Gs=r("Pad images up to the largest image in a batch and create a corresponding "),wo=s("code"),Ks=r("pixel_mask"),Qs=r("."),Xs=l(),H=s("p"),Ys=r(`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),xo=s("code"),Js=r("segmentation_maps = [[2,6,7,9]]"),Zs=r(", the output will contain "),yo=s("code"),en=r("mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),tn=r(" (four binary masks) and "),Mo=s("code"),on=r("class_labels = [2,6,7,9]"),rn=r(`, the labels for
each mask.`),an=l(),Fe=s("div"),u(st.$$.fragment),sn=l(),nt=s("p"),nn=r("Converts the output of "),To=s("code"),dn=r("MaskFormerForInstanceSegmentationOutput"),ln=r(` into image segmentation predictions. Only
supports PyTorch.`),cn=l(),ve=s("div"),u(it.$$.fragment),mn=l(),dt=s("p"),pn=r("Converts the output of "),$o=s("code"),hn=r("MaskFormerForInstanceSegmentationOutput"),fn=r(` into semantic segmentation predictions. Only
supports PyTorch.`),un=l(),we=s("div"),u(lt.$$.fragment),gn=l(),ct=s("p"),_n=r("Converts the output of "),Eo=s("code"),kn=r("MaskFormerForInstanceSegmentationOutput"),bn=r(` into image panoptic segmentation
predictions. Only supports PyTorch.`),rr=l(),se=s("h2"),xe=s("a"),Io=s("span"),u(mt.$$.fragment),Fn=l(),Po=s("span"),vn=r("MaskFormerModel"),ar=l(),R=s("div"),u(pt.$$.fragment),wn=l(),ht=s("p"),xn=r(`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ft=s("a"),yn=r("torch.nn.Module"),Mn=r(` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Tn=l(),z=s("div"),u(ut.$$.fragment),$n=l(),ne=s("p"),En=r("The "),Bt=s("a"),In=r("MaskFormerModel"),Pn=r(" forward method, overrides the "),Oo=s("code"),On=r("__call__"),zn=r(" special method."),Cn=l(),u(ye.$$.fragment),Sn=l(),zo=s("p"),Ln=r("Example:"),An=l(),u(gt.$$.fragment),sr=l(),ie=s("h2"),Me=s("a"),Co=s("span"),u(_t.$$.fragment),jn=l(),So=s("span"),Nn=r("MaskFormerForInstanceSegmentation"),nr=l(),de=s("div"),u(kt.$$.fragment),Dn=l(),C=s("div"),u(bt.$$.fragment),qn=l(),le=s("p"),Hn=r("The "),Wt=s("a"),Rn=r("MaskFormerForInstanceSegmentation"),Bn=r(" forward method, overrides the "),Lo=s("code"),Wn=r("__call__"),Un=r(" special method."),Vn=l(),u(Te.$$.fragment),Gn=l(),Ao=s("p"),Kn=r("Examples:"),Qn=l(),u(Ft.$$.fragment),this.h()},l(t){const m=kd('[data-svelte="svelte-1phssyn"]',document.head);h=n(m,"META",{name:!0,content:!0}),m.forEach(o),T=c(t),f=n(t,"H1",{class:!0});var vt=i(f);v=n(vt,"A",{id:!0,class:!0,href:!0});var jo=i(v);$=n(jo,"SPAN",{});var No=i($);g(w.$$.fragment,No),No.forEach(o),jo.forEach(o),x=c(vt),O=n(vt,"SPAN",{});var Do=i(O);Ar=a(Do,"MaskFormer"),Do.forEach(o),vt.forEach(o),qo=c(t),g(ce.$$.fragment,t),Ho=c(t),Y=n(t,"H2",{class:!0});var dr=i(Y);me=n(dr,"A",{id:!0,class:!0,href:!0});var Jn=i(me);eo=n(Jn,"SPAN",{});var Zn=i(eo);g(Oe.$$.fragment,Zn),Zn.forEach(o),Jn.forEach(o),jr=c(dr),to=n(dr,"SPAN",{});var ei=i(to);Nr=a(ei,"Overview"),ei.forEach(o),dr.forEach(o),Ro=c(t),pe=n(t,"P",{});var lr=i(pe);Dr=a(lr,"The MaskFormer model was proposed in "),ze=n(lr,"A",{href:!0,rel:!0});var ti=i(ze);qr=a(ti,"Per-Pixel Classification is Not All You Need for Semantic Segmentation"),ti.forEach(o),Hr=a(lr," by Bowen Cheng, Alexander G. Schwing, Alexander Kirillov. MaskFormer addresses semantic segmentation with a mask classification paradigm instead of performing classic pixel-level classification."),lr.forEach(o),Bo=c(t),xt=n(t,"P",{});var oi=i(xt);Rr=a(oi,"The abstract from the paper is the following:"),oi.forEach(o),Wo=c(t),yt=n(t,"P",{});var ri=i(yt);oo=n(ri,"EM",{});var ai=i(oo);Br=a(ai,"Modern approaches typically formulate semantic segmentation as a per-pixel classification task, while instance-level segmentation is handled with an alternative mask classification. Our key insight: mask classification is sufficiently general to solve both semantic- and instance-level segmentation tasks in a unified manner using the exact same model, loss, and training procedure. Following this observation, we propose MaskFormer, a simple mask classification model which predicts a set of binary masks, each associated with a single global class label prediction. Overall, the proposed mask classification-based method simplifies the landscape of effective approaches to semantic and panoptic segmentation tasks and shows excellent empirical results. In particular, we observe that MaskFormer outperforms per-pixel classification baselines when the number of classes is large. Our mask classification-based method outperforms both current state-of-the-art semantic (55.6 mIoU on ADE20K) and panoptic segmentation (52.7 PQ on COCO) models."),ai.forEach(o),ri.forEach(o),Uo=c(t),Mt=n(t,"P",{});var si=i(Mt);Wr=a(si,"Tips:"),si.forEach(o),Vo=c(t),j=n(t,"UL",{});var $e=i(j);S=n($e,"LI",{});var V=i(S);Ur=a(V,"MaskFormer\u2019s Transformer decoder is identical to the decoder of "),Tt=n(V,"A",{href:!0});var ni=i(Tt);Vr=a(ni,"DETR"),ni.forEach(o),Gr=a(V,". During training, the authors of DETR did find it helpful to use auxiliary losses in the decoder, especially to help the model output the correct number of objects of each class. If you set the parameter "),ro=n(V,"CODE",{});var ii=i(ro);Kr=a(ii,"use_auxilary_loss"),ii.forEach(o),Qr=a(V," of "),$t=n(V,"A",{href:!0});var di=i($t);Xr=a(di,"MaskFormerConfig"),di.forEach(o),Yr=a(V," to "),ao=n(V,"CODE",{});var li=i(ao);Jr=a(li,"True"),li.forEach(o),Zr=a(V,", then prediction feedforward neural networks and Hungarian losses are added after each decoder layer (with the FFNs sharing parameters)."),V.forEach(o),ea=c($e),L=n($e,"LI",{});var G=i(L);ta=a(G,`If you want to train the model in a distributed environment across multiple nodes, then one should update the
`),so=n(G,"CODE",{});var ci=i(so);oa=a(ci,"get_num_masks"),ci.forEach(o),ra=a(G," function inside in the "),no=n(G,"CODE",{});var mi=i(no);aa=a(mi,"MaskFormerLoss"),mi.forEach(o),sa=a(G," class of "),io=n(G,"CODE",{});var pi=i(io);na=a(pi,"modeling_maskformer.py"),pi.forEach(o),ia=a(G,`. When training on multiple nodes, this should be
set to the average number of target masks across all nodes, as can be seen in the original implementation `),Ce=n(G,"A",{href:!0,rel:!0});var hi=i(Ce);da=a(hi,"here"),hi.forEach(o),la=a(G,"."),G.forEach(o),ca=c($e),Se=n($e,"LI",{});var cr=i(Se);ma=a(cr,"One can use "),Et=n(cr,"A",{href:!0});var fi=i(Et);pa=a(fi,"MaskFormerFeatureExtractor"),fi.forEach(o),ha=a(cr," to prepare images for the model and optional targets for the model."),cr.forEach(o),fa=c($e),A=n($e,"LI",{});var K=i(A);ua=a(K,"To get the final segmentation, depending on the task, you can call "),It=n(K,"A",{href:!0});var ui=i(It);ga=a(ui,"post_process_semantic_segmentation()"),ui.forEach(o),_a=a(K," or "),Pt=n(K,"A",{href:!0});var gi=i(Pt);ka=a(gi,"post_process_panoptic_segmentation()"),gi.forEach(o),ba=a(K,". Both tasks can be solved using "),Ot=n(K,"A",{href:!0});var _i=i(Ot);Fa=a(_i,"MaskFormerForInstanceSegmentation"),_i.forEach(o),va=a(K," output, the latter needs an additional "),lo=n(K,"CODE",{});var ki=i(lo);wa=a(ki,"is_thing_map"),ki.forEach(o),xa=a(K," to know which instances must be merged together.."),K.forEach(o),$e.forEach(o),Go=c(t),he=n(t,"P",{});var mr=i(he);ya=a(mr,"The figure below illustrates the architecture of MaskFormer. Taken from the "),Le=n(mr,"A",{href:!0,rel:!0});var bi=i(Le);Ma=a(bi,"original paper"),bi.forEach(o),Ta=a(mr,"."),mr.forEach(o),Ko=c(t),Ae=n(t,"IMG",{width:!0,src:!0}),Qo=c(t),W=n(t,"P",{});var Ut=i(W);$a=a(Ut,"This model was contributed by "),je=n(Ut,"A",{href:!0,rel:!0});var Fi=i(je);Ea=a(Fi,"francesco"),Fi.forEach(o),Ia=a(Ut,". The original code can be found "),Ne=n(Ut,"A",{href:!0,rel:!0});var vi=i(Ne);Pa=a(vi,"here"),vi.forEach(o),Oa=a(Ut,"."),Ut.forEach(o),Xo=c(t),J=n(t,"H2",{class:!0});var pr=i(J);fe=n(pr,"A",{id:!0,class:!0,href:!0});var wi=i(fe);co=n(wi,"SPAN",{});var xi=i(co);g(De.$$.fragment,xi),xi.forEach(o),wi.forEach(o),za=c(pr),mo=n(pr,"SPAN",{});var yi=i(mo);Ca=a(yi,"MaskFormer specific outputs"),yi.forEach(o),pr.forEach(o),Yo=c(t),Z=n(t,"DIV",{class:!0});var hr=i(Z);g(qe.$$.fragment,hr),Sa=c(hr),He=n(hr,"P",{});var fr=i(He);La=a(fr,"Class for outputs of "),zt=n(fr,"A",{href:!0});var Mi=i(zt);Aa=a(Mi,"MaskFormerModel"),Mi.forEach(o),ja=a(fr,". This class returns all the needed hidden states to compute the logits."),fr.forEach(o),hr.forEach(o),Jo=c(t),D=n(t,"DIV",{class:!0});var Vt=i(D);g(Re.$$.fragment,Vt),Na=c(Vt),Be=n(Vt,"P",{});var ur=i(Be);Da=a(ur,"Class for outputs of "),Ct=n(ur,"A",{href:!0});var Ti=i(Ct);qa=a(Ti,"MaskFormerForInstanceSegmentation"),Ti.forEach(o),Ha=a(ur,"."),ur.forEach(o),Ra=c(Vt),ee=n(Vt,"P",{});var Gt=i(ee);Ba=a(Gt,"This output can be directly passed to "),St=n(Gt,"A",{href:!0});var $i=i(St);Wa=a($i,"post_process_segmentation()"),$i.forEach(o),Ua=a(Gt,` or
`),Lt=n(Gt,"A",{href:!0});var Ei=i(Lt);Va=a(Ei,"post_process_panoptic_segmentation()"),Ei.forEach(o),Ga=a(Gt," depending on the task. Please, see\n[`~MaskFormerFeatureExtractor] for details regarding usage."),Gt.forEach(o),Vt.forEach(o),Zo=c(t),te=n(t,"H2",{class:!0});var gr=i(te);ue=n(gr,"A",{id:!0,class:!0,href:!0});var Ii=i(ue);po=n(Ii,"SPAN",{});var Pi=i(po);g(We.$$.fragment,Pi),Pi.forEach(o),Ii.forEach(o),Ka=c(gr),ho=n(gr,"SPAN",{});var Oi=i(ho);Qa=a(Oi,"MaskFormerConfig"),Oi.forEach(o),gr.forEach(o),er=c(t),y=n(t,"DIV",{class:!0});var E=i(y);g(Ue.$$.fragment,E),Xa=c(E),oe=n(E,"P",{});var Kt=i(oe);Ya=a(Kt,"This is the configuration class to store the configuration of a "),At=n(Kt,"A",{href:!0});var zi=i(At);Ja=a(zi,"MaskFormerModel"),zi.forEach(o),Za=a(Kt,`. It is used to instantiate a
MaskFormer model according to the specified arguments, defining the model architecture. Instantiating a
configuration with the defaults will yield a similar configuration to that of the
\u201Cfacebook/maskformer-swin-base-ade\u201D architecture trained on
`),Ve=n(Kt,"A",{href:!0,rel:!0});var Ci=i(Ve);es=a(Ci,"ADE20k-150"),Ci.forEach(o),ts=a(Kt,"."),Kt.forEach(o),os=c(E),re=n(E,"P",{});var Qt=i(re);rs=a(Qt,"Configuration objects inherit from "),jt=n(Qt,"A",{href:!0});var Si=i(jt);as=a(Si,"PretrainedConfig"),Si.forEach(o),ss=a(Qt,` and can be used to control the model outputs. Read the
documentation from `),Nt=n(Qt,"A",{href:!0});var Li=i(Nt);ns=a(Li,"PretrainedConfig"),Li.forEach(o),is=a(Qt," for more information."),Qt.forEach(o),ds=c(E),Ge=n(E,"P",{});var _r=i(Ge);ls=a(_r,"Currently, MaskFormer only supports the "),Dt=n(_r,"A",{href:!0});var Ai=i(Dt);cs=a(Ai,"Swin Transformer"),Ai.forEach(o),ms=a(_r," as backbone."),_r.forEach(o),ps=c(E),fo=n(E,"P",{});var ji=i(fo);hs=a(ji,"Examples:"),ji.forEach(o),fs=c(E),g(Ke.$$.fragment,E),us=c(E),ge=n(E,"DIV",{class:!0});var kr=i(ge);g(Qe.$$.fragment,kr),gs=c(kr),Xe=n(kr,"P",{});var br=i(Xe);_s=a(br,"Instantiate a "),qt=n(br,"A",{href:!0});var Ni=i(qt);ks=a(Ni,"MaskFormerConfig"),Ni.forEach(o),bs=a(br,` (or a derived class) from a pre-trained backbone model configuration and DETR model
configuration.`),br.forEach(o),kr.forEach(o),Fs=c(E),_e=n(E,"DIV",{class:!0});var Fr=i(_e);g(Ye.$$.fragment,Fr),vs=c(Fr),Je=n(Fr,"P",{});var vr=i(Je);ws=a(vr,"Serializes this instance to a Python dictionary. Override the default "),Ht=n(vr,"A",{href:!0});var Di=i(Ht);xs=a(Di,"to_dict()"),Di.forEach(o),ys=a(vr,"."),vr.forEach(o),Fr.forEach(o),E.forEach(o),tr=c(t),ae=n(t,"H2",{class:!0});var wr=i(ae);ke=n(wr,"A",{id:!0,class:!0,href:!0});var qi=i(ke);uo=n(qi,"SPAN",{});var Hi=i(uo);g(Ze.$$.fragment,Hi),Hi.forEach(o),qi.forEach(o),Ms=c(wr),go=n(wr,"SPAN",{});var Ri=i(go);Ts=a(Ri,"MaskFormerFeatureExtractor"),Ri.forEach(o),wr.forEach(o),or=c(t),M=n(t,"DIV",{class:!0});var I=i(M);g(et.$$.fragment,I),$s=c(I),_o=n(I,"P",{});var Bi=i(_o);Es=a(Bi,`Constructs a MaskFormer feature extractor. The feature extractor can be used to prepare image(s) and optional
targets for the model.`),Bi.forEach(o),Is=c(I),tt=n(I,"P",{});var xr=i(tt);Ps=a(xr,"This feature extractor inherits from "),Rt=n(xr,"A",{href:!0});var Wi=i(Rt);Os=a(Wi,"FeatureExtractionMixin"),Wi.forEach(o),zs=a(xr,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),xr.forEach(o),Cs=c(I),N=n(I,"DIV",{class:!0});var Ee=i(N);g(ot.$$.fragment,Ee),Ss=c(Ee),ko=n(Ee,"P",{});var Ui=i(ko);Ls=a(Ui,`Main method to prepare for the model one or several image(s) and optional annotations. Images are by default
padded up to the largest image in a batch, and a pixel mask is created that indicates which pixels are
real/which are padding.`),Ui.forEach(o),As=c(Ee),q=n(Ee,"P",{});var Ie=i(q);js=a(Ie,`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),bo=n(Ie,"CODE",{});var Vi=i(bo);Ns=a(Vi,"segmentation_maps = [[2,6,7,9]]"),Vi.forEach(o),Ds=a(Ie,", the output will contain "),Fo=n(Ie,"CODE",{});var Gi=i(Fo);qs=a(Gi,"mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),Gi.forEach(o),Hs=a(Ie," (four binary masks) and "),vo=n(Ie,"CODE",{});var Ki=i(vo);Rs=a(Ki,"class_labels = [2,6,7,9]"),Ki.forEach(o),Bs=a(Ie,`, the labels for
each mask.`),Ie.forEach(o),Ws=c(Ee),g(be.$$.fragment,Ee),Ee.forEach(o),Us=c(I),U=n(I,"DIV",{class:!0});var Xt=i(U);g(rt.$$.fragment,Xt),Vs=c(Xt),at=n(Xt,"P",{});var yr=i(at);Gs=a(yr,"Pad images up to the largest image in a batch and create a corresponding "),wo=n(yr,"CODE",{});var Qi=i(wo);Ks=a(Qi,"pixel_mask"),Qi.forEach(o),Qs=a(yr,"."),yr.forEach(o),Xs=c(Xt),H=n(Xt,"P",{});var Pe=i(H);Ys=a(Pe,`MaskFormer addresses semantic segmentation with a mask classification paradigm, thus input segmentation maps
will be converted to lists of binary masks and their respective labels. Let\u2019s see an example, assuming
`),xo=n(Pe,"CODE",{});var Xi=i(xo);Js=a(Xi,"segmentation_maps = [[2,6,7,9]]"),Xi.forEach(o),Zs=a(Pe,", the output will contain "),yo=n(Pe,"CODE",{});var Yi=i(yo);en=a(Yi,"mask_labels = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]"),Yi.forEach(o),tn=a(Pe," (four binary masks) and "),Mo=n(Pe,"CODE",{});var Ji=i(Mo);on=a(Ji,"class_labels = [2,6,7,9]"),Ji.forEach(o),rn=a(Pe,`, the labels for
each mask.`),Pe.forEach(o),Xt.forEach(o),an=c(I),Fe=n(I,"DIV",{class:!0});var Mr=i(Fe);g(st.$$.fragment,Mr),sn=c(Mr),nt=n(Mr,"P",{});var Tr=i(nt);nn=a(Tr,"Converts the output of "),To=n(Tr,"CODE",{});var Zi=i(To);dn=a(Zi,"MaskFormerForInstanceSegmentationOutput"),Zi.forEach(o),ln=a(Tr,` into image segmentation predictions. Only
supports PyTorch.`),Tr.forEach(o),Mr.forEach(o),cn=c(I),ve=n(I,"DIV",{class:!0});var $r=i(ve);g(it.$$.fragment,$r),mn=c($r),dt=n($r,"P",{});var Er=i(dt);pn=a(Er,"Converts the output of "),$o=n(Er,"CODE",{});var ed=i($o);hn=a(ed,"MaskFormerForInstanceSegmentationOutput"),ed.forEach(o),fn=a(Er,` into semantic segmentation predictions. Only
supports PyTorch.`),Er.forEach(o),$r.forEach(o),un=c(I),we=n(I,"DIV",{class:!0});var Ir=i(we);g(lt.$$.fragment,Ir),gn=c(Ir),ct=n(Ir,"P",{});var Pr=i(ct);_n=a(Pr,"Converts the output of "),Eo=n(Pr,"CODE",{});var td=i(Eo);kn=a(td,"MaskFormerForInstanceSegmentationOutput"),td.forEach(o),bn=a(Pr,` into image panoptic segmentation
predictions. Only supports PyTorch.`),Pr.forEach(o),Ir.forEach(o),I.forEach(o),rr=c(t),se=n(t,"H2",{class:!0});var Or=i(se);xe=n(Or,"A",{id:!0,class:!0,href:!0});var od=i(xe);Io=n(od,"SPAN",{});var rd=i(Io);g(mt.$$.fragment,rd),rd.forEach(o),od.forEach(o),Fn=c(Or),Po=n(Or,"SPAN",{});var ad=i(Po);vn=a(ad,"MaskFormerModel"),ad.forEach(o),Or.forEach(o),ar=c(t),R=n(t,"DIV",{class:!0});var Yt=i(R);g(pt.$$.fragment,Yt),wn=c(Yt),ht=n(Yt,"P",{});var zr=i(ht);xn=a(zr,`The bare MaskFormer Model outputting raw hidden-states without any specific head on top.
This model is a PyTorch `),ft=n(zr,"A",{href:!0,rel:!0});var sd=i(ft);yn=a(sd,"torch.nn.Module"),sd.forEach(o),Mn=a(zr,` sub-class. Use
it as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),zr.forEach(o),Tn=c(Yt),z=n(Yt,"DIV",{class:!0});var Q=i(z);g(ut.$$.fragment,Q),$n=c(Q),ne=n(Q,"P",{});var Jt=i(ne);En=a(Jt,"The "),Bt=n(Jt,"A",{href:!0});var nd=i(Bt);In=a(nd,"MaskFormerModel"),nd.forEach(o),Pn=a(Jt," forward method, overrides the "),Oo=n(Jt,"CODE",{});var id=i(Oo);On=a(id,"__call__"),id.forEach(o),zn=a(Jt," special method."),Jt.forEach(o),Cn=c(Q),g(ye.$$.fragment,Q),Sn=c(Q),zo=n(Q,"P",{});var dd=i(zo);Ln=a(dd,"Example:"),dd.forEach(o),An=c(Q),g(gt.$$.fragment,Q),Q.forEach(o),Yt.forEach(o),sr=c(t),ie=n(t,"H2",{class:!0});var Cr=i(ie);Me=n(Cr,"A",{id:!0,class:!0,href:!0});var ld=i(Me);Co=n(ld,"SPAN",{});var cd=i(Co);g(_t.$$.fragment,cd),cd.forEach(o),ld.forEach(o),jn=c(Cr),So=n(Cr,"SPAN",{});var md=i(So);Nn=a(md,"MaskFormerForInstanceSegmentation"),md.forEach(o),Cr.forEach(o),nr=c(t),de=n(t,"DIV",{class:!0});var Sr=i(de);g(kt.$$.fragment,Sr),Dn=c(Sr),C=n(Sr,"DIV",{class:!0});var X=i(C);g(bt.$$.fragment,X),qn=c(X),le=n(X,"P",{});var Zt=i(le);Hn=a(Zt,"The "),Wt=n(Zt,"A",{href:!0});var pd=i(Wt);Rn=a(pd,"MaskFormerForInstanceSegmentation"),pd.forEach(o),Bn=a(Zt," forward method, overrides the "),Lo=n(Zt,"CODE",{});var hd=i(Lo);Wn=a(hd,"__call__"),hd.forEach(o),Un=a(Zt," special method."),Zt.forEach(o),Vn=c(X),g(Te.$$.fragment,X),Gn=c(X),Ao=n(X,"P",{});var fd=i(Ao);Kn=a(fd,"Examples:"),fd.forEach(o),Qn=c(X),g(Ft.$$.fragment,X),X.forEach(o),Sr.forEach(o),this.h()},h(){d(h,"name","hf:doc:metadata"),d(h,"content",JSON.stringify(Td)),d(v,"id","maskformer"),d(v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v,"href","#maskformer"),d(f,"class","relative group"),d(me,"id","overview"),d(me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(me,"href","#overview"),d(Y,"class","relative group"),d(ze,"href","https://arxiv.org/abs/2107.06278"),d(ze,"rel","nofollow"),d(Tt,"href","detr"),d($t,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Ce,"href","https://github.com/facebookresearch/MaskFormer/blob/da3e60d85fdeedcb31476b5edd7d328826ce56cc/mask_former/modeling/criterion.py#L169"),d(Ce,"rel","nofollow"),d(Et,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(It,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_semantic_segmentation"),d(Pt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),d(Ot,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(Le,"href","https://arxiv.org/abs/2107.06278"),d(Le,"rel","nofollow"),d(Ae,"width","600"),bd(Ae.src,Yn="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/maskformer_architecture.png")||d(Ae,"src",Yn),d(je,"href","https://huggingface.co/francesco"),d(je,"rel","nofollow"),d(Ne,"href","https://github.com/facebookresearch/MaskFormer"),d(Ne,"rel","nofollow"),d(fe,"id","transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),d(fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fe,"href","#transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput"),d(J,"class","relative group"),d(zt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerModel"),d(Z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ct,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(St,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_segmentation"),d(Lt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor.post_process_panoptic_segmentation"),d(D,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ue,"id","transformers.MaskFormerConfig"),d(ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ue,"href","#transformers.MaskFormerConfig"),d(te,"class","relative group"),d(At,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerModel"),d(Ve,"href","https://huggingface.co/datasets/scene_parse_150"),d(Ve,"rel","nofollow"),d(jt,"href","/docs/transformers/pr_16920/en/main_classes/configuration#transformers.PretrainedConfig"),d(Nt,"href","/docs/transformers/pr_16920/en/main_classes/configuration#transformers.PretrainedConfig"),d(Dt,"href","swin"),d(qt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ht,"href","/docs/transformers/pr_16920/en/main_classes/configuration#transformers.PretrainedConfig.to_dict"),d(_e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ke,"id","transformers.MaskFormerFeatureExtractor"),d(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ke,"href","#transformers.MaskFormerFeatureExtractor"),d(ae,"class","relative group"),d(Rt,"href","/docs/transformers/pr_16920/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),d(N,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(we,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xe,"id","transformers.MaskFormerModel"),d(xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xe,"href","#transformers.MaskFormerModel"),d(se,"class","relative group"),d(ft,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),d(ft,"rel","nofollow"),d(Bt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerModel"),d(z,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Me,"id","transformers.MaskFormerForInstanceSegmentation"),d(Me,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Me,"href","#transformers.MaskFormerForInstanceSegmentation"),d(ie,"class","relative group"),d(Wt,"href","/docs/transformers/pr_16920/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(C,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(de,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(t,m){e(document.head,h),p(t,T,m),p(t,f,m),e(f,v),e(v,$),_(w,$,null),e(f,x),e(f,O),e(O,Ar),p(t,qo,m),_(ce,t,m),p(t,Ho,m),p(t,Y,m),e(Y,me),e(me,eo),_(Oe,eo,null),e(Y,jr),e(Y,to),e(to,Nr),p(t,Ro,m),p(t,pe,m),e(pe,Dr),e(pe,ze),e(ze,qr),e(pe,Hr),p(t,Bo,m),p(t,xt,m),e(xt,Rr),p(t,Wo,m),p(t,yt,m),e(yt,oo),e(oo,Br),p(t,Uo,m),p(t,Mt,m),e(Mt,Wr),p(t,Vo,m),p(t,j,m),e(j,S),e(S,Ur),e(S,Tt),e(Tt,Vr),e(S,Gr),e(S,ro),e(ro,Kr),e(S,Qr),e(S,$t),e($t,Xr),e(S,Yr),e(S,ao),e(ao,Jr),e(S,Zr),e(j,ea),e(j,L),e(L,ta),e(L,so),e(so,oa),e(L,ra),e(L,no),e(no,aa),e(L,sa),e(L,io),e(io,na),e(L,ia),e(L,Ce),e(Ce,da),e(L,la),e(j,ca),e(j,Se),e(Se,ma),e(Se,Et),e(Et,pa),e(Se,ha),e(j,fa),e(j,A),e(A,ua),e(A,It),e(It,ga),e(A,_a),e(A,Pt),e(Pt,ka),e(A,ba),e(A,Ot),e(Ot,Fa),e(A,va),e(A,lo),e(lo,wa),e(A,xa),p(t,Go,m),p(t,he,m),e(he,ya),e(he,Le),e(Le,Ma),e(he,Ta),p(t,Ko,m),p(t,Ae,m),p(t,Qo,m),p(t,W,m),e(W,$a),e(W,je),e(je,Ea),e(W,Ia),e(W,Ne),e(Ne,Pa),e(W,Oa),p(t,Xo,m),p(t,J,m),e(J,fe),e(fe,co),_(De,co,null),e(J,za),e(J,mo),e(mo,Ca),p(t,Yo,m),p(t,Z,m),_(qe,Z,null),e(Z,Sa),e(Z,He),e(He,La),e(He,zt),e(zt,Aa),e(He,ja),p(t,Jo,m),p(t,D,m),_(Re,D,null),e(D,Na),e(D,Be),e(Be,Da),e(Be,Ct),e(Ct,qa),e(Be,Ha),e(D,Ra),e(D,ee),e(ee,Ba),e(ee,St),e(St,Wa),e(ee,Ua),e(ee,Lt),e(Lt,Va),e(ee,Ga),p(t,Zo,m),p(t,te,m),e(te,ue),e(ue,po),_(We,po,null),e(te,Ka),e(te,ho),e(ho,Qa),p(t,er,m),p(t,y,m),_(Ue,y,null),e(y,Xa),e(y,oe),e(oe,Ya),e(oe,At),e(At,Ja),e(oe,Za),e(oe,Ve),e(Ve,es),e(oe,ts),e(y,os),e(y,re),e(re,rs),e(re,jt),e(jt,as),e(re,ss),e(re,Nt),e(Nt,ns),e(re,is),e(y,ds),e(y,Ge),e(Ge,ls),e(Ge,Dt),e(Dt,cs),e(Ge,ms),e(y,ps),e(y,fo),e(fo,hs),e(y,fs),_(Ke,y,null),e(y,us),e(y,ge),_(Qe,ge,null),e(ge,gs),e(ge,Xe),e(Xe,_s),e(Xe,qt),e(qt,ks),e(Xe,bs),e(y,Fs),e(y,_e),_(Ye,_e,null),e(_e,vs),e(_e,Je),e(Je,ws),e(Je,Ht),e(Ht,xs),e(Je,ys),p(t,tr,m),p(t,ae,m),e(ae,ke),e(ke,uo),_(Ze,uo,null),e(ae,Ms),e(ae,go),e(go,Ts),p(t,or,m),p(t,M,m),_(et,M,null),e(M,$s),e(M,_o),e(_o,Es),e(M,Is),e(M,tt),e(tt,Ps),e(tt,Rt),e(Rt,Os),e(tt,zs),e(M,Cs),e(M,N),_(ot,N,null),e(N,Ss),e(N,ko),e(ko,Ls),e(N,As),e(N,q),e(q,js),e(q,bo),e(bo,Ns),e(q,Ds),e(q,Fo),e(Fo,qs),e(q,Hs),e(q,vo),e(vo,Rs),e(q,Bs),e(N,Ws),_(be,N,null),e(M,Us),e(M,U),_(rt,U,null),e(U,Vs),e(U,at),e(at,Gs),e(at,wo),e(wo,Ks),e(at,Qs),e(U,Xs),e(U,H),e(H,Ys),e(H,xo),e(xo,Js),e(H,Zs),e(H,yo),e(yo,en),e(H,tn),e(H,Mo),e(Mo,on),e(H,rn),e(M,an),e(M,Fe),_(st,Fe,null),e(Fe,sn),e(Fe,nt),e(nt,nn),e(nt,To),e(To,dn),e(nt,ln),e(M,cn),e(M,ve),_(it,ve,null),e(ve,mn),e(ve,dt),e(dt,pn),e(dt,$o),e($o,hn),e(dt,fn),e(M,un),e(M,we),_(lt,we,null),e(we,gn),e(we,ct),e(ct,_n),e(ct,Eo),e(Eo,kn),e(ct,bn),p(t,rr,m),p(t,se,m),e(se,xe),e(xe,Io),_(mt,Io,null),e(se,Fn),e(se,Po),e(Po,vn),p(t,ar,m),p(t,R,m),_(pt,R,null),e(R,wn),e(R,ht),e(ht,xn),e(ht,ft),e(ft,yn),e(ht,Mn),e(R,Tn),e(R,z),_(ut,z,null),e(z,$n),e(z,ne),e(ne,En),e(ne,Bt),e(Bt,In),e(ne,Pn),e(ne,Oo),e(Oo,On),e(ne,zn),e(z,Cn),_(ye,z,null),e(z,Sn),e(z,zo),e(zo,Ln),e(z,An),_(gt,z,null),p(t,sr,m),p(t,ie,m),e(ie,Me),e(Me,Co),_(_t,Co,null),e(ie,jn),e(ie,So),e(So,Nn),p(t,nr,m),p(t,de,m),_(kt,de,null),e(de,Dn),e(de,C),_(bt,C,null),e(C,qn),e(C,le),e(le,Hn),e(le,Wt),e(Wt,Rn),e(le,Bn),e(le,Lo),e(Lo,Wn),e(le,Un),e(C,Vn),_(Te,C,null),e(C,Gn),e(C,Ao),e(Ao,Kn),e(C,Qn),_(Ft,C,null),ir=!0},p(t,[m]){const vt={};m&2&&(vt.$$scope={dirty:m,ctx:t}),ce.$set(vt);const jo={};m&2&&(jo.$$scope={dirty:m,ctx:t}),be.$set(jo);const No={};m&2&&(No.$$scope={dirty:m,ctx:t}),ye.$set(No);const Do={};m&2&&(Do.$$scope={dirty:m,ctx:t}),Te.$set(Do)},i(t){ir||(k(w.$$.fragment,t),k(ce.$$.fragment,t),k(Oe.$$.fragment,t),k(De.$$.fragment,t),k(qe.$$.fragment,t),k(Re.$$.fragment,t),k(We.$$.fragment,t),k(Ue.$$.fragment,t),k(Ke.$$.fragment,t),k(Qe.$$.fragment,t),k(Ye.$$.fragment,t),k(Ze.$$.fragment,t),k(et.$$.fragment,t),k(ot.$$.fragment,t),k(be.$$.fragment,t),k(rt.$$.fragment,t),k(st.$$.fragment,t),k(it.$$.fragment,t),k(lt.$$.fragment,t),k(mt.$$.fragment,t),k(pt.$$.fragment,t),k(ut.$$.fragment,t),k(ye.$$.fragment,t),k(gt.$$.fragment,t),k(_t.$$.fragment,t),k(kt.$$.fragment,t),k(bt.$$.fragment,t),k(Te.$$.fragment,t),k(Ft.$$.fragment,t),ir=!0)},o(t){b(w.$$.fragment,t),b(ce.$$.fragment,t),b(Oe.$$.fragment,t),b(De.$$.fragment,t),b(qe.$$.fragment,t),b(Re.$$.fragment,t),b(We.$$.fragment,t),b(Ue.$$.fragment,t),b(Ke.$$.fragment,t),b(Qe.$$.fragment,t),b(Ye.$$.fragment,t),b(Ze.$$.fragment,t),b(et.$$.fragment,t),b(ot.$$.fragment,t),b(be.$$.fragment,t),b(rt.$$.fragment,t),b(st.$$.fragment,t),b(it.$$.fragment,t),b(lt.$$.fragment,t),b(mt.$$.fragment,t),b(pt.$$.fragment,t),b(ut.$$.fragment,t),b(ye.$$.fragment,t),b(gt.$$.fragment,t),b(_t.$$.fragment,t),b(kt.$$.fragment,t),b(bt.$$.fragment,t),b(Te.$$.fragment,t),b(Ft.$$.fragment,t),ir=!1},d(t){o(h),t&&o(T),t&&o(f),F(w),t&&o(qo),F(ce,t),t&&o(Ho),t&&o(Y),F(Oe),t&&o(Ro),t&&o(pe),t&&o(Bo),t&&o(xt),t&&o(Wo),t&&o(yt),t&&o(Uo),t&&o(Mt),t&&o(Vo),t&&o(j),t&&o(Go),t&&o(he),t&&o(Ko),t&&o(Ae),t&&o(Qo),t&&o(W),t&&o(Xo),t&&o(J),F(De),t&&o(Yo),t&&o(Z),F(qe),t&&o(Jo),t&&o(D),F(Re),t&&o(Zo),t&&o(te),F(We),t&&o(er),t&&o(y),F(Ue),F(Ke),F(Qe),F(Ye),t&&o(tr),t&&o(ae),F(Ze),t&&o(or),t&&o(M),F(et),F(ot),F(be),F(rt),F(st),F(it),F(lt),t&&o(rr),t&&o(se),F(mt),t&&o(ar),t&&o(R),F(pt),F(ut),F(ye),F(gt),t&&o(sr),t&&o(ie),F(_t),t&&o(nr),t&&o(de),F(kt),F(bt),F(Te),F(Ft)}}}const Td={local:"maskformer",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.maskformer.modeling_maskformer.MaskFormerModelOutput",title:"MaskFormer specific outputs"},{local:"transformers.MaskFormerConfig",title:"MaskFormerConfig"},{local:"transformers.MaskFormerFeatureExtractor",title:"MaskFormerFeatureExtractor"},{local:"transformers.MaskFormerModel",title:"MaskFormerModel"},{local:"transformers.MaskFormerForInstanceSegmentation",title:"MaskFormerForInstanceSegmentation"}],title:"MaskFormer"};function $d(B){return Fd(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Cd extends ud{constructor(h){super();gd(this,h,$d,Md,_d,{})}}export{Cd as default,Td as metadata};
