import{S as Zi,i as er,s as tr,e as l,k as d,w as u,t as s,M as ar,c as o,d as a,m as g,a as n,x as h,h as i,b as f,F as t,g as m,y as c,L as lr,q as p,o as _,B as b}from"../chunks/vendor-6b77c823.js";import{I as ie}from"../chunks/IconCopyLink-7a11ce68.js";import{C as L}from"../chunks/CodeBlock-3a8b25a8.js";import{D as or}from"../chunks/DocNotebookDropdown-b2654249.js";function nr(jl){let j,ze,$,T,gt,re,zl,ft,ql,ha,me,ca,z,Cl,ut,Dl,Pl,de,Ol,Xl,pa,D,N,ht,ge,Il,ct,Al,_a,qe,Sl,ba,P,B,pt,fe,Nl,_t,Bl,ka,Ce,Rl,va,k,De,bt,Fl,Hl,Gl,Pe,kt,Wl,Ul,Yl,Oe,vt,Jl,Kl,Ql,Xe,Et,Vl,Zl,eo,Ie,$t,to,ao,lo,Ae,wt,oo,no,so,Se,Mt,io,ro,Ea,w,mo,yt,go,fo,xt,uo,ho,Tt,co,po,$a,R,_o,Lt,bo,ko,wa,ue,Ma,F,vo,jt,Eo,$o,ya,he,xa,Ne,wo,Ta,ce,La,M,Mo,zt,yo,xo,qt,To,Lo,Ct,jo,zo,ja,pe,za,H,qo,Dt,Co,Do,qa,_e,Ca,q,Po,be,Oo,Xo,Pt,Io,Ao,Da,O,G,Ot,ke,So,Xt,No,Pa,Be,Bo,Oa,W,Re,It,Ro,Fo,Ho,Fe,At,Go,Wo,Xa,He,Uo,Ia,X,U,St,ve,Yo,Nt,Jo,Aa,Ge,Ko,Sa,Y,We,Bt,Qo,Vo,Zo,Ue,Rt,en,tn,Na,Ye,an,Ba,I,J,Ft,Ee,ln,Ht,on,Ra,Je,nn,Fa,K,Ke,Gt,sn,rn,mn,Qe,Wt,dn,gn,Ha,Ve,fn,Ga,A,Q,Ut,$e,un,Yt,hn,Wa,Ze,cn,Ua,V,et,Jt,pn,_n,bn,tt,Kt,kn,vn,Ya,Z,En,Qt,$n,wn,Ja,we,Ka,at,Mn,Qa,Me,Va,y,yn,Vt,xn,Tn,Zt,Ln,jn,ea,zn,qn,Za,ye,el,S,ee,ta,xe,Cn,aa,Dn,tl,lt,Pn,al,v,ot,la,On,Xn,In,nt,oa,An,Sn,Nn,st,na,Bn,Rn,Fn,it,sa,Hn,Gn,Wn,ia,ra,Un,ll,te,Yn,ma,Jn,Kn,ol,Te,nl,rt,Qn,sl,Le,il,x,Vn,da,Zn,es,ga,ts,as,fa,ls,os,rl,je,ml,ae,ns,ua,ss,is,dl;return re=new ie({}),me=new or({props:{classNames:"absolute z-10 right-0 top-0",options:[{label:"Mixed",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/multilingual.ipynb"},{label:"PyTorch",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/multilingual.ipynb"},{label:"TensorFlow",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/multilingual.ipynb"},{label:"Mixed",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/multilingual.ipynb"},{label:"PyTorch",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/pytorch/multilingual.ipynb"},{label:"TensorFlow",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/transformers_doc/tensorflow/multilingual.ipynb"}]}}),ge=new ie({}),fe=new ie({}),ue=new L({props:{code:`import torch
from transformers import XLMTokenizer, XLMWithLMHeadModel

tokenizer = XLMTokenizer.from_pretrained("xlm-clm-enfr-1024")
model = XLMWithLMHeadModel.from_pretrained("xlm-clm-enfr-1024")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> XLMTokenizer, XLMWithLMHeadModel

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = XLMTokenizer.from_pretrained(<span class="hljs-string">&quot;xlm-clm-enfr-1024&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = XLMWithLMHeadModel.from_pretrained(<span class="hljs-string">&quot;xlm-clm-enfr-1024&quot;</span>)`}}),he=new L({props:{code:"print(tokenizer.lang2id)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(tokenizer.lang2id)
{<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-number">1</span>}`}}),ce=new L({props:{code:'input_ids = torch.tensor([tokenizer.encode("Wikipedia was used to")])  # batch size of 1',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>input_ids = torch.tensor([tokenizer.encode(<span class="hljs-string">&quot;Wikipedia was used to&quot;</span>)])  <span class="hljs-comment"># batch size of 1</span>'}}),pe=new L({props:{code:`language_id = tokenizer.lang2id["en"]  # 0
langs = torch.tensor([language_id] * input_ids.shape[1])  # torch.tensor([0, 0, 0, ..., 0])

# We reshape it to be of size (batch_size, sequence_length)
langs = langs.view(1, -1)  # is now of shape [1, sequence_length] (we have a batch size of 1)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>language_id = tokenizer.lang2id[<span class="hljs-string">&quot;en&quot;</span>]  <span class="hljs-comment"># 0</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>langs = torch.tensor([language_id] * input_ids.shape[<span class="hljs-number">1</span>])  <span class="hljs-comment"># torch.tensor([0, 0, 0, ..., 0])</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># We reshape it to be of size (batch_size, sequence_length)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>langs = langs.view(<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)  <span class="hljs-comment"># is now of shape [1, sequence_length] (we have a batch size of 1)</span>`}}),_e=new L({props:{code:"outputs = model(input_ids, langs=langs)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>outputs = model(input_ids, langs=langs)'}}),ke=new ie({}),ve=new ie({}),Ee=new ie({}),$e=new ie({}),we=new L({props:{code:`from transformers import M2M100ForConditionalGeneration, M2M100Tokenizer

en_text = "Do not meddle in the affairs of wizards, for they are subtle and quick to anger."
chinese_text = "\u4E0D\u8981\u63D2\u624B\u5DEB\u5E2B\u7684\u4E8B\u52D9, \u56E0\u70BA\u4ED6\u5011\u662F\u5FAE\u5999\u7684, \u5F88\u5FEB\u5C31\u6703\u767C\u6012."

tokenizer = M2M100Tokenizer.from_pretrained("facebook/m2m100_418M", src_lang="zh")
model = M2M100ForConditionalGeneration.from_pretrained("facebook/m2m100_418M")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> M2M100ForConditionalGeneration, M2M100Tokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>en_text = <span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>chinese_text = <span class="hljs-string">&quot;\u4E0D\u8981\u63D2\u624B\u5DEB\u5E2B\u7684\u4E8B\u52D9, \u56E0\u70BA\u4ED6\u5011\u662F\u5FAE\u5999\u7684, \u5F88\u5FEB\u5C31\u6703\u767C\u6012.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = M2M100Tokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/m2m100_418M&quot;</span>, src_lang=<span class="hljs-string">&quot;zh&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = M2M100ForConditionalGeneration.from_pretrained(<span class="hljs-string">&quot;facebook/m2m100_418M&quot;</span>)`}}),Me=new L({props:{code:'encoded_zh = tokenizer(chinese_text, return_tensors="pt")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_zh = tokenizer(chinese_text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)'}}),ye=new L({props:{code:`generated_tokens = model.generate(**encoded_zh, forced_bos_token_id=tokenizer.get_lang_id("en"))
tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generated_tokens = model.generate(**encoded_zh, forced_bos_token_id=tokenizer.get_lang_id(<span class="hljs-string">&quot;en&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(generated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)
<span class="hljs-string">&#x27;Do not interfere with the matters of the witches, because they are delicate and will soon be angry.&#x27;</span>`}}),xe=new ie({}),Te=new L({props:{code:`from transformers import AutoTokenizer, AutoModelForSeq2SeqLM

en_text = "Do not meddle in the affairs of wizards, for they are subtle and quick to anger."
fi_text = "\xC4l\xE4 sekaannu velhojen asioihin, sill\xE4 ne ovat hienovaraisia ja nopeasti vihaisia."

tokenizer = AutoTokenizer.from_pretrained("facebook/mbart-large-50-many-to-many-mmt", src_lang="fi_FI")
model = AutoModelForSeq2SeqLM.from_pretrained("facebook/mbart-large-50-many-to-many-mmt")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span>en_text = <span class="hljs-string">&quot;Do not meddle in the affairs of wizards, for they are subtle and quick to anger.&quot;</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>fi_text = <span class="hljs-string">&quot;\xC4l\xE4 sekaannu velhojen asioihin, sill\xE4 ne ovat hienovaraisia ja nopeasti vihaisia.&quot;</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;facebook/mbart-large-50-many-to-many-mmt&quot;</span>, src_lang=<span class="hljs-string">&quot;fi_FI&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;facebook/mbart-large-50-many-to-many-mmt&quot;</span>)`}}),Le=new L({props:{code:'encoded_en = tokenizer(en_text, return_tensors="pt")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>encoded_en = tokenizer(en_text, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)'}}),je=new L({props:{code:`generated_tokens = model.generate(**encoded_en, forced_bos_token_id=tokenizer.lang_code_to_id("en_XX"))
tokenizer.batch_decode(generated_tokens, skip_special_tokens=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>generated_tokens = model.generate(**encoded_en, forced_bos_token_id=tokenizer.lang_code_to_id(<span class="hljs-string">&quot;en_XX&quot;</span>))
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.batch_decode(generated_tokens, skip_special_tokens=<span class="hljs-literal">True</span>)
<span class="hljs-string">&quot;Don&#x27;t interfere with the wizard&#x27;s affairs, because they are subtle, will soon get angry.&quot;</span>`}}),{c(){j=l("meta"),ze=d(),$=l("h1"),T=l("a"),gt=l("span"),u(re.$$.fragment),zl=d(),ft=l("span"),ql=s("Multilingual models for inference"),ha=d(),u(me.$$.fragment),ca=d(),z=l("p"),Cl=s("There are several multilingual models in \u{1F917} Transformers, and their inference usage differs from monolingual models. Not "),ut=l("em"),Dl=s("all"),Pl=s(" multilingual model usage is different though. Some models, like "),de=l("a"),Ol=s("bert-base-multilingual-uncased"),Xl=s(", can be used just like a monolingual model. This guide will show you how to use multilingual models whose usage differs for inference."),pa=d(),D=l("h2"),N=l("a"),ht=l("span"),u(ge.$$.fragment),Il=d(),ct=l("span"),Al=s("XLM"),_a=d(),qe=l("p"),Sl=s("XLM has ten different checkpoints, only one of which is monolingual. The nine remaining model checkpoints can be split into two categories: the checkpoints that use language embeddings and those that don\u2019t."),ba=d(),P=l("h3"),B=l("a"),pt=l("span"),u(fe.$$.fragment),Nl=d(),_t=l("span"),Bl=s("XLM with language embeddings"),ka=d(),Ce=l("p"),Rl=s("The following XLM models use language embeddings to specify the language used at inference:"),va=d(),k=l("ul"),De=l("li"),bt=l("code"),Fl=s("xlm-mlm-ende-1024"),Hl=s(" (Masked language modeling, English-German)"),Gl=d(),Pe=l("li"),kt=l("code"),Wl=s("xlm-mlm-enfr-1024"),Ul=s(" (Masked language modeling, English-French)"),Yl=d(),Oe=l("li"),vt=l("code"),Jl=s("xlm-mlm-enro-1024"),Kl=s(" (Masked language modeling, English-Romanian)"),Ql=d(),Xe=l("li"),Et=l("code"),Vl=s("xlm-mlm-xnli15-1024"),Zl=s(" (Masked language modeling, XNLI languages)"),eo=d(),Ie=l("li"),$t=l("code"),to=s("xlm-mlm-tlm-xnli15-1024"),ao=s(" (Masked language modeling + translation, XNLI languages)"),lo=d(),Ae=l("li"),wt=l("code"),oo=s("xlm-clm-enfr-1024"),no=s(" (Causal language modeling, English-French)"),so=d(),Se=l("li"),Mt=l("code"),io=s("xlm-clm-ende-1024"),ro=s(" (Causal language modeling, English-German)"),Ea=d(),w=l("p"),mo=s("Language embeddings are represented as a tensor of the same shape as the "),yt=l("code"),go=s("input_ids"),fo=s(" passed to the model. The values in these tensors depend on the language used and are identified by the tokenizer\u2019s "),xt=l("code"),uo=s("lang2id"),ho=s(" and "),Tt=l("code"),co=s("id2lang"),po=s(" attributes."),$a=d(),R=l("p"),_o=s("In this example, load the "),Lt=l("code"),bo=s("xlm-clm-enfr-1024"),ko=s(" checkpoint (Causal language modeling, English-French):"),wa=d(),u(ue.$$.fragment),Ma=d(),F=l("p"),vo=s("The "),jt=l("code"),Eo=s("lang2id"),$o=s(" attribute of the tokenizer displays this model\u2019s languages and their ids:"),ya=d(),u(he.$$.fragment),xa=d(),Ne=l("p"),wo=s("Next, create an example input:"),Ta=d(),u(ce.$$.fragment),La=d(),M=l("p"),Mo=s("Set the language id as "),zt=l("code"),yo=s('"en"'),xo=s(" and use it to define the language embedding. The language embedding is a tensor filled with "),qt=l("code"),To=s("0"),Lo=s(" since that is the language id for English. This tensor should be the same size as "),Ct=l("code"),jo=s("input_ids"),zo=s("."),ja=d(),u(pe.$$.fragment),za=d(),H=l("p"),qo=s("Now you can pass the "),Dt=l("code"),Co=s("input_ids"),Do=s(" and language embedding to the model:"),qa=d(),u(_e.$$.fragment),Ca=d(),q=l("p"),Po=s("The "),be=l("a"),Oo=s("run_generation.py"),Xo=s(" script can generate text with language embeddings using the "),Pt=l("code"),Io=s("xlm-clm"),Ao=s(" checkpoints."),Da=d(),O=l("h3"),G=l("a"),Ot=l("span"),u(ke.$$.fragment),So=d(),Xt=l("span"),No=s("XLM without language embeddings"),Pa=d(),Be=l("p"),Bo=s("The following XLM models do not require language embeddings during inference:"),Oa=d(),W=l("ul"),Re=l("li"),It=l("code"),Ro=s("xlm-mlm-17-1280"),Fo=s(" (Masked language modeling, 17 languages)"),Ho=d(),Fe=l("li"),At=l("code"),Go=s("xlm-mlm-100-1280"),Wo=s(" (Masked language modeling, 100 languages)"),Xa=d(),He=l("p"),Uo=s("These models are used for generic sentence representations, unlike the previous XLM checkpoints."),Ia=d(),X=l("h2"),U=l("a"),St=l("span"),u(ve.$$.fragment),Yo=d(),Nt=l("span"),Jo=s("BERT"),Aa=d(),Ge=l("p"),Ko=s("The following BERT models can be used for multilingual tasks:"),Sa=d(),Y=l("ul"),We=l("li"),Bt=l("code"),Qo=s("bert-base-multilingual-uncased"),Vo=s(" (Masked language modeling + Next sentence prediction, 102 languages)"),Zo=d(),Ue=l("li"),Rt=l("code"),en=s("bert-base-multilingual-cased"),tn=s(" (Masked language modeling + Next sentence prediction, 104 languages)"),Na=d(),Ye=l("p"),an=s(`These models do not require language embeddings during inference. They should identify the language from the
context and infer accordingly.`),Ba=d(),I=l("h2"),J=l("a"),Ft=l("span"),u(Ee.$$.fragment),ln=d(),Ht=l("span"),on=s("XLM-RoBERTa"),Ra=d(),Je=l("p"),nn=s("The following XLM-RoBERTa models can be used for multilingual tasks:"),Fa=d(),K=l("ul"),Ke=l("li"),Gt=l("code"),sn=s("xlm-roberta-base"),rn=s(" (Masked language modeling, 100 languages)"),mn=d(),Qe=l("li"),Wt=l("code"),dn=s("xlm-roberta-large"),gn=s(" (Masked language modeling, 100 languages)"),Ha=d(),Ve=l("p"),fn=s("XLM-RoBERTa was trained on 2.5TB of newly created and cleaned CommonCrawl data in 100 languages. It provides strong gains over previously released multilingual models like mBERT or XLM on downstream tasks like classification, sequence labeling, and question answering."),Ga=d(),A=l("h2"),Q=l("a"),Ut=l("span"),u($e.$$.fragment),un=d(),Yt=l("span"),hn=s("M2M100"),Wa=d(),Ze=l("p"),cn=s("The following M2M100 models can be used for multilingual translation:"),Ua=d(),V=l("ul"),et=l("li"),Jt=l("code"),pn=s("facebook/m2m100_418M"),_n=s(" (Translation)"),bn=d(),tt=l("li"),Kt=l("code"),kn=s("facebook/m2m100_1.2B"),vn=s(" (Translation)"),Ya=d(),Z=l("p"),En=s("In this example, load the "),Qt=l("code"),$n=s("facebook/m2m100_418M"),wn=s(" checkpoint to translate from Chinese to English. You can set the source language in the tokenizer:"),Ja=d(),u(we.$$.fragment),Ka=d(),at=l("p"),Mn=s("Tokenize the text:"),Qa=d(),u(Me.$$.fragment),Va=d(),y=l("p"),yn=s("M2M100 forces the target language id as the first generated token to translate to the target language. Set the "),Vt=l("code"),xn=s("forced_bos_token_id"),Tn=s(" to "),Zt=l("code"),Ln=s("en"),jn=s(" in the "),ea=l("code"),zn=s("generate"),qn=s(" method to translate to English:"),Za=d(),u(ye.$$.fragment),el=d(),S=l("h2"),ee=l("a"),ta=l("span"),u(xe.$$.fragment),Cn=d(),aa=l("span"),Dn=s("MBart"),tl=d(),lt=l("p"),Pn=s("The following MBart models can be used for multilingual translation:"),al=d(),v=l("ul"),ot=l("li"),la=l("code"),On=s("facebook/mbart-large-50-one-to-many-mmt"),Xn=s(" (One-to-many multilingual machine translation, 50 languages)"),In=d(),nt=l("li"),oa=l("code"),An=s("facebook/mbart-large-50-many-to-many-mmt"),Sn=s(" (Many-to-many multilingual machine translation, 50 languages)"),Nn=d(),st=l("li"),na=l("code"),Bn=s("facebook/mbart-large-50-many-to-one-mmt"),Rn=s(" (Many-to-one multilingual machine translation, 50 languages)"),Fn=d(),it=l("li"),sa=l("code"),Hn=s("facebook/mbart-large-50"),Gn=s(" (Multilingual translation, 50 languages)"),Wn=d(),ia=l("li"),ra=l("code"),Un=s("facebook/mbart-large-cc25"),ll=d(),te=l("p"),Yn=s("In this example, load the "),ma=l("code"),Jn=s("facebook/mbart-large-50-many-to-many-mmt"),Kn=s(" checkpoint to translate Finnish to English. You can set the source language in the tokenizer:"),ol=d(),u(Te.$$.fragment),nl=d(),rt=l("p"),Qn=s("Tokenize the text:"),sl=d(),u(Le.$$.fragment),il=d(),x=l("p"),Vn=s("MBart forces the target language id as the first generated token to translate to the target language. Set the "),da=l("code"),Zn=s("forced_bos_token_id"),es=s(" to "),ga=l("code"),ts=s("en"),as=s(" in the "),fa=l("code"),ls=s("generate"),os=s(" method to translate to English:"),rl=d(),u(je.$$.fragment),ml=d(),ae=l("p"),ns=s("If you are using the "),ua=l("code"),ss=s("facebook/mbart-large-50-many-to-one-mmt"),is=s(" checkpoint, you don\u2019t need to force the target language id as the first generated token otherwise the usage is the same."),this.h()},l(e){const r=ar('[data-svelte="svelte-1phssyn"]',document.head);j=o(r,"META",{name:!0,content:!0}),r.forEach(a),ze=g(e),$=o(e,"H1",{class:!0});var gl=n($);T=o(gl,"A",{id:!0,class:!0,href:!0});var Ts=n(T);gt=o(Ts,"SPAN",{});var Ls=n(gt);h(re.$$.fragment,Ls),Ls.forEach(a),Ts.forEach(a),zl=g(gl),ft=o(gl,"SPAN",{});var js=n(ft);ql=i(js,"Multilingual models for inference"),js.forEach(a),gl.forEach(a),ha=g(e),h(me.$$.fragment,e),ca=g(e),z=o(e,"P",{});var mt=n(z);Cl=i(mt,"There are several multilingual models in \u{1F917} Transformers, and their inference usage differs from monolingual models. Not "),ut=o(mt,"EM",{});var zs=n(ut);Dl=i(zs,"all"),zs.forEach(a),Pl=i(mt," multilingual model usage is different though. Some models, like "),de=o(mt,"A",{href:!0,rel:!0});var qs=n(de);Ol=i(qs,"bert-base-multilingual-uncased"),qs.forEach(a),Xl=i(mt,", can be used just like a monolingual model. This guide will show you how to use multilingual models whose usage differs for inference."),mt.forEach(a),pa=g(e),D=o(e,"H2",{class:!0});var fl=n(D);N=o(fl,"A",{id:!0,class:!0,href:!0});var Cs=n(N);ht=o(Cs,"SPAN",{});var Ds=n(ht);h(ge.$$.fragment,Ds),Ds.forEach(a),Cs.forEach(a),Il=g(fl),ct=o(fl,"SPAN",{});var Ps=n(ct);Al=i(Ps,"XLM"),Ps.forEach(a),fl.forEach(a),_a=g(e),qe=o(e,"P",{});var Os=n(qe);Sl=i(Os,"XLM has ten different checkpoints, only one of which is monolingual. The nine remaining model checkpoints can be split into two categories: the checkpoints that use language embeddings and those that don\u2019t."),Os.forEach(a),ba=g(e),P=o(e,"H3",{class:!0});var ul=n(P);B=o(ul,"A",{id:!0,class:!0,href:!0});var Xs=n(B);pt=o(Xs,"SPAN",{});var Is=n(pt);h(fe.$$.fragment,Is),Is.forEach(a),Xs.forEach(a),Nl=g(ul),_t=o(ul,"SPAN",{});var As=n(_t);Bl=i(As,"XLM with language embeddings"),As.forEach(a),ul.forEach(a),ka=g(e),Ce=o(e,"P",{});var Ss=n(Ce);Rl=i(Ss,"The following XLM models use language embeddings to specify the language used at inference:"),Ss.forEach(a),va=g(e),k=o(e,"UL",{});var E=n(k);De=o(E,"LI",{});var rs=n(De);bt=o(rs,"CODE",{});var Ns=n(bt);Fl=i(Ns,"xlm-mlm-ende-1024"),Ns.forEach(a),Hl=i(rs," (Masked language modeling, English-German)"),rs.forEach(a),Gl=g(E),Pe=o(E,"LI",{});var ms=n(Pe);kt=o(ms,"CODE",{});var Bs=n(kt);Wl=i(Bs,"xlm-mlm-enfr-1024"),Bs.forEach(a),Ul=i(ms," (Masked language modeling, English-French)"),ms.forEach(a),Yl=g(E),Oe=o(E,"LI",{});var ds=n(Oe);vt=o(ds,"CODE",{});var Rs=n(vt);Jl=i(Rs,"xlm-mlm-enro-1024"),Rs.forEach(a),Kl=i(ds," (Masked language modeling, English-Romanian)"),ds.forEach(a),Ql=g(E),Xe=o(E,"LI",{});var gs=n(Xe);Et=o(gs,"CODE",{});var Fs=n(Et);Vl=i(Fs,"xlm-mlm-xnli15-1024"),Fs.forEach(a),Zl=i(gs," (Masked language modeling, XNLI languages)"),gs.forEach(a),eo=g(E),Ie=o(E,"LI",{});var fs=n(Ie);$t=o(fs,"CODE",{});var Hs=n($t);to=i(Hs,"xlm-mlm-tlm-xnli15-1024"),Hs.forEach(a),ao=i(fs," (Masked language modeling + translation, XNLI languages)"),fs.forEach(a),lo=g(E),Ae=o(E,"LI",{});var us=n(Ae);wt=o(us,"CODE",{});var Gs=n(wt);oo=i(Gs,"xlm-clm-enfr-1024"),Gs.forEach(a),no=i(us," (Causal language modeling, English-French)"),us.forEach(a),so=g(E),Se=o(E,"LI",{});var hs=n(Se);Mt=o(hs,"CODE",{});var Ws=n(Mt);io=i(Ws,"xlm-clm-ende-1024"),Ws.forEach(a),ro=i(hs," (Causal language modeling, English-German)"),hs.forEach(a),E.forEach(a),Ea=g(e),w=o(e,"P",{});var le=n(w);mo=i(le,"Language embeddings are represented as a tensor of the same shape as the "),yt=o(le,"CODE",{});var Us=n(yt);go=i(Us,"input_ids"),Us.forEach(a),fo=i(le," passed to the model. The values in these tensors depend on the language used and are identified by the tokenizer\u2019s "),xt=o(le,"CODE",{});var Ys=n(xt);uo=i(Ys,"lang2id"),Ys.forEach(a),ho=i(le," and "),Tt=o(le,"CODE",{});var Js=n(Tt);co=i(Js,"id2lang"),Js.forEach(a),po=i(le," attributes."),le.forEach(a),$a=g(e),R=o(e,"P",{});var hl=n(R);_o=i(hl,"In this example, load the "),Lt=o(hl,"CODE",{});var Ks=n(Lt);bo=i(Ks,"xlm-clm-enfr-1024"),Ks.forEach(a),ko=i(hl," checkpoint (Causal language modeling, English-French):"),hl.forEach(a),wa=g(e),h(ue.$$.fragment,e),Ma=g(e),F=o(e,"P",{});var cl=n(F);vo=i(cl,"The "),jt=o(cl,"CODE",{});var Qs=n(jt);Eo=i(Qs,"lang2id"),Qs.forEach(a),$o=i(cl," attribute of the tokenizer displays this model\u2019s languages and their ids:"),cl.forEach(a),ya=g(e),h(he.$$.fragment,e),xa=g(e),Ne=o(e,"P",{});var Vs=n(Ne);wo=i(Vs,"Next, create an example input:"),Vs.forEach(a),Ta=g(e),h(ce.$$.fragment,e),La=g(e),M=o(e,"P",{});var oe=n(M);Mo=i(oe,"Set the language id as "),zt=o(oe,"CODE",{});var Zs=n(zt);yo=i(Zs,'"en"'),Zs.forEach(a),xo=i(oe," and use it to define the language embedding. The language embedding is a tensor filled with "),qt=o(oe,"CODE",{});var ei=n(qt);To=i(ei,"0"),ei.forEach(a),Lo=i(oe," since that is the language id for English. This tensor should be the same size as "),Ct=o(oe,"CODE",{});var ti=n(Ct);jo=i(ti,"input_ids"),ti.forEach(a),zo=i(oe,"."),oe.forEach(a),ja=g(e),h(pe.$$.fragment,e),za=g(e),H=o(e,"P",{});var pl=n(H);qo=i(pl,"Now you can pass the "),Dt=o(pl,"CODE",{});var ai=n(Dt);Co=i(ai,"input_ids"),ai.forEach(a),Do=i(pl," and language embedding to the model:"),pl.forEach(a),qa=g(e),h(_e.$$.fragment,e),Ca=g(e),q=o(e,"P",{});var dt=n(q);Po=i(dt,"The "),be=o(dt,"A",{href:!0,rel:!0});var li=n(be);Oo=i(li,"run_generation.py"),li.forEach(a),Xo=i(dt," script can generate text with language embeddings using the "),Pt=o(dt,"CODE",{});var oi=n(Pt);Io=i(oi,"xlm-clm"),oi.forEach(a),Ao=i(dt," checkpoints."),dt.forEach(a),Da=g(e),O=o(e,"H3",{class:!0});var _l=n(O);G=o(_l,"A",{id:!0,class:!0,href:!0});var ni=n(G);Ot=o(ni,"SPAN",{});var si=n(Ot);h(ke.$$.fragment,si),si.forEach(a),ni.forEach(a),So=g(_l),Xt=o(_l,"SPAN",{});var ii=n(Xt);No=i(ii,"XLM without language embeddings"),ii.forEach(a),_l.forEach(a),Pa=g(e),Be=o(e,"P",{});var ri=n(Be);Bo=i(ri,"The following XLM models do not require language embeddings during inference:"),ri.forEach(a),Oa=g(e),W=o(e,"UL",{});var bl=n(W);Re=o(bl,"LI",{});var cs=n(Re);It=o(cs,"CODE",{});var mi=n(It);Ro=i(mi,"xlm-mlm-17-1280"),mi.forEach(a),Fo=i(cs," (Masked language modeling, 17 languages)"),cs.forEach(a),Ho=g(bl),Fe=o(bl,"LI",{});var ps=n(Fe);At=o(ps,"CODE",{});var di=n(At);Go=i(di,"xlm-mlm-100-1280"),di.forEach(a),Wo=i(ps," (Masked language modeling, 100 languages)"),ps.forEach(a),bl.forEach(a),Xa=g(e),He=o(e,"P",{});var gi=n(He);Uo=i(gi,"These models are used for generic sentence representations, unlike the previous XLM checkpoints."),gi.forEach(a),Ia=g(e),X=o(e,"H2",{class:!0});var kl=n(X);U=o(kl,"A",{id:!0,class:!0,href:!0});var fi=n(U);St=o(fi,"SPAN",{});var ui=n(St);h(ve.$$.fragment,ui),ui.forEach(a),fi.forEach(a),Yo=g(kl),Nt=o(kl,"SPAN",{});var hi=n(Nt);Jo=i(hi,"BERT"),hi.forEach(a),kl.forEach(a),Aa=g(e),Ge=o(e,"P",{});var ci=n(Ge);Ko=i(ci,"The following BERT models can be used for multilingual tasks:"),ci.forEach(a),Sa=g(e),Y=o(e,"UL",{});var vl=n(Y);We=o(vl,"LI",{});var _s=n(We);Bt=o(_s,"CODE",{});var pi=n(Bt);Qo=i(pi,"bert-base-multilingual-uncased"),pi.forEach(a),Vo=i(_s," (Masked language modeling + Next sentence prediction, 102 languages)"),_s.forEach(a),Zo=g(vl),Ue=o(vl,"LI",{});var bs=n(Ue);Rt=o(bs,"CODE",{});var _i=n(Rt);en=i(_i,"bert-base-multilingual-cased"),_i.forEach(a),tn=i(bs," (Masked language modeling + Next sentence prediction, 104 languages)"),bs.forEach(a),vl.forEach(a),Na=g(e),Ye=o(e,"P",{});var bi=n(Ye);an=i(bi,`These models do not require language embeddings during inference. They should identify the language from the
context and infer accordingly.`),bi.forEach(a),Ba=g(e),I=o(e,"H2",{class:!0});var El=n(I);J=o(El,"A",{id:!0,class:!0,href:!0});var ki=n(J);Ft=o(ki,"SPAN",{});var vi=n(Ft);h(Ee.$$.fragment,vi),vi.forEach(a),ki.forEach(a),ln=g(El),Ht=o(El,"SPAN",{});var Ei=n(Ht);on=i(Ei,"XLM-RoBERTa"),Ei.forEach(a),El.forEach(a),Ra=g(e),Je=o(e,"P",{});var $i=n(Je);nn=i($i,"The following XLM-RoBERTa models can be used for multilingual tasks:"),$i.forEach(a),Fa=g(e),K=o(e,"UL",{});var $l=n(K);Ke=o($l,"LI",{});var ks=n(Ke);Gt=o(ks,"CODE",{});var wi=n(Gt);sn=i(wi,"xlm-roberta-base"),wi.forEach(a),rn=i(ks," (Masked language modeling, 100 languages)"),ks.forEach(a),mn=g($l),Qe=o($l,"LI",{});var vs=n(Qe);Wt=o(vs,"CODE",{});var Mi=n(Wt);dn=i(Mi,"xlm-roberta-large"),Mi.forEach(a),gn=i(vs," (Masked language modeling, 100 languages)"),vs.forEach(a),$l.forEach(a),Ha=g(e),Ve=o(e,"P",{});var yi=n(Ve);fn=i(yi,"XLM-RoBERTa was trained on 2.5TB of newly created and cleaned CommonCrawl data in 100 languages. It provides strong gains over previously released multilingual models like mBERT or XLM on downstream tasks like classification, sequence labeling, and question answering."),yi.forEach(a),Ga=g(e),A=o(e,"H2",{class:!0});var wl=n(A);Q=o(wl,"A",{id:!0,class:!0,href:!0});var xi=n(Q);Ut=o(xi,"SPAN",{});var Ti=n(Ut);h($e.$$.fragment,Ti),Ti.forEach(a),xi.forEach(a),un=g(wl),Yt=o(wl,"SPAN",{});var Li=n(Yt);hn=i(Li,"M2M100"),Li.forEach(a),wl.forEach(a),Wa=g(e),Ze=o(e,"P",{});var ji=n(Ze);cn=i(ji,"The following M2M100 models can be used for multilingual translation:"),ji.forEach(a),Ua=g(e),V=o(e,"UL",{});var Ml=n(V);et=o(Ml,"LI",{});var Es=n(et);Jt=o(Es,"CODE",{});var zi=n(Jt);pn=i(zi,"facebook/m2m100_418M"),zi.forEach(a),_n=i(Es," (Translation)"),Es.forEach(a),bn=g(Ml),tt=o(Ml,"LI",{});var $s=n(tt);Kt=o($s,"CODE",{});var qi=n(Kt);kn=i(qi,"facebook/m2m100_1.2B"),qi.forEach(a),vn=i($s," (Translation)"),$s.forEach(a),Ml.forEach(a),Ya=g(e),Z=o(e,"P",{});var yl=n(Z);En=i(yl,"In this example, load the "),Qt=o(yl,"CODE",{});var Ci=n(Qt);$n=i(Ci,"facebook/m2m100_418M"),Ci.forEach(a),wn=i(yl," checkpoint to translate from Chinese to English. You can set the source language in the tokenizer:"),yl.forEach(a),Ja=g(e),h(we.$$.fragment,e),Ka=g(e),at=o(e,"P",{});var Di=n(at);Mn=i(Di,"Tokenize the text:"),Di.forEach(a),Qa=g(e),h(Me.$$.fragment,e),Va=g(e),y=o(e,"P",{});var ne=n(y);yn=i(ne,"M2M100 forces the target language id as the first generated token to translate to the target language. Set the "),Vt=o(ne,"CODE",{});var Pi=n(Vt);xn=i(Pi,"forced_bos_token_id"),Pi.forEach(a),Tn=i(ne," to "),Zt=o(ne,"CODE",{});var Oi=n(Zt);Ln=i(Oi,"en"),Oi.forEach(a),jn=i(ne," in the "),ea=o(ne,"CODE",{});var Xi=n(ea);zn=i(Xi,"generate"),Xi.forEach(a),qn=i(ne," method to translate to English:"),ne.forEach(a),Za=g(e),h(ye.$$.fragment,e),el=g(e),S=o(e,"H2",{class:!0});var xl=n(S);ee=o(xl,"A",{id:!0,class:!0,href:!0});var Ii=n(ee);ta=o(Ii,"SPAN",{});var Ai=n(ta);h(xe.$$.fragment,Ai),Ai.forEach(a),Ii.forEach(a),Cn=g(xl),aa=o(xl,"SPAN",{});var Si=n(aa);Dn=i(Si,"MBart"),Si.forEach(a),xl.forEach(a),tl=g(e),lt=o(e,"P",{});var Ni=n(lt);Pn=i(Ni,"The following MBart models can be used for multilingual translation:"),Ni.forEach(a),al=g(e),v=o(e,"UL",{});var C=n(v);ot=o(C,"LI",{});var ws=n(ot);la=o(ws,"CODE",{});var Bi=n(la);On=i(Bi,"facebook/mbart-large-50-one-to-many-mmt"),Bi.forEach(a),Xn=i(ws," (One-to-many multilingual machine translation, 50 languages)"),ws.forEach(a),In=g(C),nt=o(C,"LI",{});var Ms=n(nt);oa=o(Ms,"CODE",{});var Ri=n(oa);An=i(Ri,"facebook/mbart-large-50-many-to-many-mmt"),Ri.forEach(a),Sn=i(Ms," (Many-to-many multilingual machine translation, 50 languages)"),Ms.forEach(a),Nn=g(C),st=o(C,"LI",{});var ys=n(st);na=o(ys,"CODE",{});var Fi=n(na);Bn=i(Fi,"facebook/mbart-large-50-many-to-one-mmt"),Fi.forEach(a),Rn=i(ys," (Many-to-one multilingual machine translation, 50 languages)"),ys.forEach(a),Fn=g(C),it=o(C,"LI",{});var xs=n(it);sa=o(xs,"CODE",{});var Hi=n(sa);Hn=i(Hi,"facebook/mbart-large-50"),Hi.forEach(a),Gn=i(xs," (Multilingual translation, 50 languages)"),xs.forEach(a),Wn=g(C),ia=o(C,"LI",{});var Gi=n(ia);ra=o(Gi,"CODE",{});var Wi=n(ra);Un=i(Wi,"facebook/mbart-large-cc25"),Wi.forEach(a),Gi.forEach(a),C.forEach(a),ll=g(e),te=o(e,"P",{});var Tl=n(te);Yn=i(Tl,"In this example, load the "),ma=o(Tl,"CODE",{});var Ui=n(ma);Jn=i(Ui,"facebook/mbart-large-50-many-to-many-mmt"),Ui.forEach(a),Kn=i(Tl," checkpoint to translate Finnish to English. You can set the source language in the tokenizer:"),Tl.forEach(a),ol=g(e),h(Te.$$.fragment,e),nl=g(e),rt=o(e,"P",{});var Yi=n(rt);Qn=i(Yi,"Tokenize the text:"),Yi.forEach(a),sl=g(e),h(Le.$$.fragment,e),il=g(e),x=o(e,"P",{});var se=n(x);Vn=i(se,"MBart forces the target language id as the first generated token to translate to the target language. Set the "),da=o(se,"CODE",{});var Ji=n(da);Zn=i(Ji,"forced_bos_token_id"),Ji.forEach(a),es=i(se," to "),ga=o(se,"CODE",{});var Ki=n(ga);ts=i(Ki,"en"),Ki.forEach(a),as=i(se," in the "),fa=o(se,"CODE",{});var Qi=n(fa);ls=i(Qi,"generate"),Qi.forEach(a),os=i(se," method to translate to English:"),se.forEach(a),rl=g(e),h(je.$$.fragment,e),ml=g(e),ae=o(e,"P",{});var Ll=n(ae);ns=i(Ll,"If you are using the "),ua=o(Ll,"CODE",{});var Vi=n(ua);ss=i(Vi,"facebook/mbart-large-50-many-to-one-mmt"),Vi.forEach(a),is=i(Ll," checkpoint, you don\u2019t need to force the target language id as the first generated token otherwise the usage is the same."),Ll.forEach(a),this.h()},h(){f(j,"name","hf:doc:metadata"),f(j,"content",JSON.stringify(sr)),f(T,"id","multilingual-models-for-inference"),f(T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(T,"href","#multilingual-models-for-inference"),f($,"class","relative group"),f(de,"href","https://huggingface.co/bert-base-multilingual-uncased"),f(de,"rel","nofollow"),f(N,"id","xlm"),f(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(N,"href","#xlm"),f(D,"class","relative group"),f(B,"id","xlm-with-language-embeddings"),f(B,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(B,"href","#xlm-with-language-embeddings"),f(P,"class","relative group"),f(be,"href","https://github.com/huggingface/transformers/tree/main/examples/pytorch/text-generation/run_generation.py"),f(be,"rel","nofollow"),f(G,"id","xlm-without-language-embeddings"),f(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(G,"href","#xlm-without-language-embeddings"),f(O,"class","relative group"),f(U,"id","bert"),f(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(U,"href","#bert"),f(X,"class","relative group"),f(J,"id","xlmroberta"),f(J,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(J,"href","#xlmroberta"),f(I,"class","relative group"),f(Q,"id","m2m100"),f(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(Q,"href","#m2m100"),f(A,"class","relative group"),f(ee,"id","mbart"),f(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),f(ee,"href","#mbart"),f(S,"class","relative group")},m(e,r){t(document.head,j),m(e,ze,r),m(e,$,r),t($,T),t(T,gt),c(re,gt,null),t($,zl),t($,ft),t(ft,ql),m(e,ha,r),c(me,e,r),m(e,ca,r),m(e,z,r),t(z,Cl),t(z,ut),t(ut,Dl),t(z,Pl),t(z,de),t(de,Ol),t(z,Xl),m(e,pa,r),m(e,D,r),t(D,N),t(N,ht),c(ge,ht,null),t(D,Il),t(D,ct),t(ct,Al),m(e,_a,r),m(e,qe,r),t(qe,Sl),m(e,ba,r),m(e,P,r),t(P,B),t(B,pt),c(fe,pt,null),t(P,Nl),t(P,_t),t(_t,Bl),m(e,ka,r),m(e,Ce,r),t(Ce,Rl),m(e,va,r),m(e,k,r),t(k,De),t(De,bt),t(bt,Fl),t(De,Hl),t(k,Gl),t(k,Pe),t(Pe,kt),t(kt,Wl),t(Pe,Ul),t(k,Yl),t(k,Oe),t(Oe,vt),t(vt,Jl),t(Oe,Kl),t(k,Ql),t(k,Xe),t(Xe,Et),t(Et,Vl),t(Xe,Zl),t(k,eo),t(k,Ie),t(Ie,$t),t($t,to),t(Ie,ao),t(k,lo),t(k,Ae),t(Ae,wt),t(wt,oo),t(Ae,no),t(k,so),t(k,Se),t(Se,Mt),t(Mt,io),t(Se,ro),m(e,Ea,r),m(e,w,r),t(w,mo),t(w,yt),t(yt,go),t(w,fo),t(w,xt),t(xt,uo),t(w,ho),t(w,Tt),t(Tt,co),t(w,po),m(e,$a,r),m(e,R,r),t(R,_o),t(R,Lt),t(Lt,bo),t(R,ko),m(e,wa,r),c(ue,e,r),m(e,Ma,r),m(e,F,r),t(F,vo),t(F,jt),t(jt,Eo),t(F,$o),m(e,ya,r),c(he,e,r),m(e,xa,r),m(e,Ne,r),t(Ne,wo),m(e,Ta,r),c(ce,e,r),m(e,La,r),m(e,M,r),t(M,Mo),t(M,zt),t(zt,yo),t(M,xo),t(M,qt),t(qt,To),t(M,Lo),t(M,Ct),t(Ct,jo),t(M,zo),m(e,ja,r),c(pe,e,r),m(e,za,r),m(e,H,r),t(H,qo),t(H,Dt),t(Dt,Co),t(H,Do),m(e,qa,r),c(_e,e,r),m(e,Ca,r),m(e,q,r),t(q,Po),t(q,be),t(be,Oo),t(q,Xo),t(q,Pt),t(Pt,Io),t(q,Ao),m(e,Da,r),m(e,O,r),t(O,G),t(G,Ot),c(ke,Ot,null),t(O,So),t(O,Xt),t(Xt,No),m(e,Pa,r),m(e,Be,r),t(Be,Bo),m(e,Oa,r),m(e,W,r),t(W,Re),t(Re,It),t(It,Ro),t(Re,Fo),t(W,Ho),t(W,Fe),t(Fe,At),t(At,Go),t(Fe,Wo),m(e,Xa,r),m(e,He,r),t(He,Uo),m(e,Ia,r),m(e,X,r),t(X,U),t(U,St),c(ve,St,null),t(X,Yo),t(X,Nt),t(Nt,Jo),m(e,Aa,r),m(e,Ge,r),t(Ge,Ko),m(e,Sa,r),m(e,Y,r),t(Y,We),t(We,Bt),t(Bt,Qo),t(We,Vo),t(Y,Zo),t(Y,Ue),t(Ue,Rt),t(Rt,en),t(Ue,tn),m(e,Na,r),m(e,Ye,r),t(Ye,an),m(e,Ba,r),m(e,I,r),t(I,J),t(J,Ft),c(Ee,Ft,null),t(I,ln),t(I,Ht),t(Ht,on),m(e,Ra,r),m(e,Je,r),t(Je,nn),m(e,Fa,r),m(e,K,r),t(K,Ke),t(Ke,Gt),t(Gt,sn),t(Ke,rn),t(K,mn),t(K,Qe),t(Qe,Wt),t(Wt,dn),t(Qe,gn),m(e,Ha,r),m(e,Ve,r),t(Ve,fn),m(e,Ga,r),m(e,A,r),t(A,Q),t(Q,Ut),c($e,Ut,null),t(A,un),t(A,Yt),t(Yt,hn),m(e,Wa,r),m(e,Ze,r),t(Ze,cn),m(e,Ua,r),m(e,V,r),t(V,et),t(et,Jt),t(Jt,pn),t(et,_n),t(V,bn),t(V,tt),t(tt,Kt),t(Kt,kn),t(tt,vn),m(e,Ya,r),m(e,Z,r),t(Z,En),t(Z,Qt),t(Qt,$n),t(Z,wn),m(e,Ja,r),c(we,e,r),m(e,Ka,r),m(e,at,r),t(at,Mn),m(e,Qa,r),c(Me,e,r),m(e,Va,r),m(e,y,r),t(y,yn),t(y,Vt),t(Vt,xn),t(y,Tn),t(y,Zt),t(Zt,Ln),t(y,jn),t(y,ea),t(ea,zn),t(y,qn),m(e,Za,r),c(ye,e,r),m(e,el,r),m(e,S,r),t(S,ee),t(ee,ta),c(xe,ta,null),t(S,Cn),t(S,aa),t(aa,Dn),m(e,tl,r),m(e,lt,r),t(lt,Pn),m(e,al,r),m(e,v,r),t(v,ot),t(ot,la),t(la,On),t(ot,Xn),t(v,In),t(v,nt),t(nt,oa),t(oa,An),t(nt,Sn),t(v,Nn),t(v,st),t(st,na),t(na,Bn),t(st,Rn),t(v,Fn),t(v,it),t(it,sa),t(sa,Hn),t(it,Gn),t(v,Wn),t(v,ia),t(ia,ra),t(ra,Un),m(e,ll,r),m(e,te,r),t(te,Yn),t(te,ma),t(ma,Jn),t(te,Kn),m(e,ol,r),c(Te,e,r),m(e,nl,r),m(e,rt,r),t(rt,Qn),m(e,sl,r),c(Le,e,r),m(e,il,r),m(e,x,r),t(x,Vn),t(x,da),t(da,Zn),t(x,es),t(x,ga),t(ga,ts),t(x,as),t(x,fa),t(fa,ls),t(x,os),m(e,rl,r),c(je,e,r),m(e,ml,r),m(e,ae,r),t(ae,ns),t(ae,ua),t(ua,ss),t(ae,is),dl=!0},p:lr,i(e){dl||(p(re.$$.fragment,e),p(me.$$.fragment,e),p(ge.$$.fragment,e),p(fe.$$.fragment,e),p(ue.$$.fragment,e),p(he.$$.fragment,e),p(ce.$$.fragment,e),p(pe.$$.fragment,e),p(_e.$$.fragment,e),p(ke.$$.fragment,e),p(ve.$$.fragment,e),p(Ee.$$.fragment,e),p($e.$$.fragment,e),p(we.$$.fragment,e),p(Me.$$.fragment,e),p(ye.$$.fragment,e),p(xe.$$.fragment,e),p(Te.$$.fragment,e),p(Le.$$.fragment,e),p(je.$$.fragment,e),dl=!0)},o(e){_(re.$$.fragment,e),_(me.$$.fragment,e),_(ge.$$.fragment,e),_(fe.$$.fragment,e),_(ue.$$.fragment,e),_(he.$$.fragment,e),_(ce.$$.fragment,e),_(pe.$$.fragment,e),_(_e.$$.fragment,e),_(ke.$$.fragment,e),_(ve.$$.fragment,e),_(Ee.$$.fragment,e),_($e.$$.fragment,e),_(we.$$.fragment,e),_(Me.$$.fragment,e),_(ye.$$.fragment,e),_(xe.$$.fragment,e),_(Te.$$.fragment,e),_(Le.$$.fragment,e),_(je.$$.fragment,e),dl=!1},d(e){a(j),e&&a(ze),e&&a($),b(re),e&&a(ha),b(me,e),e&&a(ca),e&&a(z),e&&a(pa),e&&a(D),b(ge),e&&a(_a),e&&a(qe),e&&a(ba),e&&a(P),b(fe),e&&a(ka),e&&a(Ce),e&&a(va),e&&a(k),e&&a(Ea),e&&a(w),e&&a($a),e&&a(R),e&&a(wa),b(ue,e),e&&a(Ma),e&&a(F),e&&a(ya),b(he,e),e&&a(xa),e&&a(Ne),e&&a(Ta),b(ce,e),e&&a(La),e&&a(M),e&&a(ja),b(pe,e),e&&a(za),e&&a(H),e&&a(qa),b(_e,e),e&&a(Ca),e&&a(q),e&&a(Da),e&&a(O),b(ke),e&&a(Pa),e&&a(Be),e&&a(Oa),e&&a(W),e&&a(Xa),e&&a(He),e&&a(Ia),e&&a(X),b(ve),e&&a(Aa),e&&a(Ge),e&&a(Sa),e&&a(Y),e&&a(Na),e&&a(Ye),e&&a(Ba),e&&a(I),b(Ee),e&&a(Ra),e&&a(Je),e&&a(Fa),e&&a(K),e&&a(Ha),e&&a(Ve),e&&a(Ga),e&&a(A),b($e),e&&a(Wa),e&&a(Ze),e&&a(Ua),e&&a(V),e&&a(Ya),e&&a(Z),e&&a(Ja),b(we,e),e&&a(Ka),e&&a(at),e&&a(Qa),b(Me,e),e&&a(Va),e&&a(y),e&&a(Za),b(ye,e),e&&a(el),e&&a(S),b(xe),e&&a(tl),e&&a(lt),e&&a(al),e&&a(v),e&&a(ll),e&&a(te),e&&a(ol),b(Te,e),e&&a(nl),e&&a(rt),e&&a(sl),b(Le,e),e&&a(il),e&&a(x),e&&a(rl),b(je,e),e&&a(ml),e&&a(ae)}}}const sr={local:"multilingual-models-for-inference",sections:[{local:"xlm",sections:[{local:"xlm-with-language-embeddings",title:"XLM with language embeddings"},{local:"xlm-without-language-embeddings",title:"XLM without language embeddings"}],title:"XLM"},{local:"bert",title:"BERT"},{local:"xlmroberta",title:"XLM-RoBERTa"},{local:"m2m100",title:"M2M100"},{local:"mbart",title:"MBart"}],title:"Multilingual models for inference"};function ir(jl,j,ze){let{fw:$}=j;return jl.$$set=T=>{"fw"in T&&ze(0,$=T.fw)},[$]}class fr extends Zi{constructor(j){super();er(this,j,ir,nr,tr,{fw:0})}}export{fr as default,sr as metadata};
