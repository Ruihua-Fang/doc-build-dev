import{S as C6t,i as w6t,s as A6t,e as a,k as l,w as f,t as o,M as y6t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as L6t}from"../../chunks/vendor-6b77c823.js";import{T as NPr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function x6t(qf){let Z,io,ce,Ce,lo,he,Me,Xo,Ni,Nf,fa,ji,Di,Lw,jf,xe,co,Gi,On,xw,Vn,Xn,kw,Oi,zn,Sw,Vi,Df,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),Ni=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),Lw=o(")."),jf=l(),xe=a("p"),co=o("Likewise, if your "),Gi=a("code"),On=o("NewModel"),xw=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),kw=o(`, make sure its
`),Oi=a("code"),zn=o("config_class"),Sw=o(` attribute is set to the same class you use when registering the model (here
`),Vi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var T9=s(ce);Ce=r(T9,"NewModelConfig"),T9.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Xi=s(he);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Xo=r(ue,`, make sure its
`),Ni=n(ue,"CODE",{});var M9=s(Ni);Nf=r(M9,"model_type"),M9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),ji=n(ue,"CODE",{});var E9=s(ji);Di=r(E9,'"new-model"'),E9.forEach(t),Lw=r(ue,")."),ue.forEach(t),jf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Gi=n(zo,"CODE",{});var Ga=s(Gi);On=r(Ga,"NewModel"),Ga.forEach(t),xw=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var C9=s(Vn);Xn=r(C9,"PreTrainedModel"),C9.forEach(t),kw=r(zo,`, make sure its
`),Oi=n(zo,"CODE",{});var Gf=s(Oi);zn=r(Gf,"config_class"),Gf.forEach(t),Sw=r(zo,` attribute is set to the same class you use when registering the model (here
`),Vi=n(zo,"CODE",{});var w9=s(Vi);Df=r(w9,"NewModelConfig"),w9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,Ni),e(Ni,Nf),e(Z,fa),e(Z,ji),e(ji,Di),e(Z,Lw),b(fo,jf,ue),b(fo,xe,ue),e(xe,co),e(xe,Gi),e(Gi,On),e(xe,xw),e(xe,Vn),e(Vn,Xn),e(xe,kw),e(xe,Oi),e(Oi,zn),e(xe,Sw),e(xe,Vi),e(Vi,Df),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(xe)}}}function k6t(qf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function S6t(qf){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function R6t(qf){let Z,io,ce,Ce,lo,he,Me,Xo,Ni,Nf,fa,ji,Di,Lw,jf,xe,co,Gi,On,xw,Vn,Xn,kw,Oi,zn,Sw,Vi,Df,Da,fo,ue,T9,Xi,M9,E9,zo,Ga,C9,Gf,w9,zIe,RRe,zi,Of,fY,Rw,QIe,mY,WIe,BRe,Qn,HIe,gY,UIe,JIe,hY,YIe,KIe,PRe,Bw,$Re,A9,ZIe,IRe,Vf,qRe,Qi,Xf,pY,Pw,eqe,_Y,oqe,NRe,Qo,$w,rqe,Iw,tqe,y9,aqe,nqe,sqe,qw,lqe,uY,iqe,dqe,cqe,mo,Nw,fqe,bY,mqe,gqe,Wi,hqe,vY,pqe,_qe,FY,uqe,bqe,vqe,v,zf,TY,Fqe,Tqe,L9,Mqe,Eqe,Cqe,Qf,MY,wqe,Aqe,x9,yqe,Lqe,xqe,Wf,EY,kqe,Sqe,k9,Rqe,Bqe,Pqe,Hf,CY,$qe,Iqe,S9,qqe,Nqe,jqe,Uf,wY,Dqe,Gqe,R9,Oqe,Vqe,Xqe,Jf,AY,zqe,Qqe,B9,Wqe,Hqe,Uqe,Yf,yY,Jqe,Yqe,P9,Kqe,Zqe,eNe,Kf,LY,oNe,rNe,$9,tNe,aNe,nNe,Zf,xY,sNe,lNe,I9,iNe,dNe,cNe,em,kY,fNe,mNe,q9,gNe,hNe,pNe,om,SY,_Ne,uNe,N9,bNe,vNe,FNe,rm,RY,TNe,MNe,j9,ENe,CNe,wNe,tm,BY,ANe,yNe,D9,LNe,xNe,kNe,am,PY,SNe,RNe,G9,BNe,PNe,$Ne,nm,$Y,INe,qNe,O9,NNe,jNe,DNe,sm,IY,GNe,ONe,V9,VNe,XNe,zNe,lm,qY,QNe,WNe,X9,HNe,UNe,JNe,im,NY,YNe,KNe,z9,ZNe,eje,oje,dm,jY,rje,tje,Q9,aje,nje,sje,cm,DY,lje,ije,W9,dje,cje,fje,fm,GY,mje,gje,H9,hje,pje,_je,mm,OY,uje,bje,U9,vje,Fje,Tje,gm,VY,Mje,Eje,J9,Cje,wje,Aje,hm,XY,yje,Lje,Y9,xje,kje,Sje,pm,zY,Rje,Bje,K9,Pje,$je,Ije,_m,QY,qje,Nje,Z9,jje,Dje,Gje,um,WY,Oje,Vje,ex,Xje,zje,Qje,bm,HY,Wje,Hje,ox,Uje,Jje,Yje,vm,UY,Kje,Zje,rx,eDe,oDe,rDe,Fm,JY,tDe,aDe,tx,nDe,sDe,lDe,Tm,YY,iDe,dDe,ax,cDe,fDe,mDe,Mm,KY,gDe,hDe,nx,pDe,_De,uDe,Em,ZY,bDe,vDe,sx,FDe,TDe,MDe,Cm,eK,EDe,CDe,lx,wDe,ADe,yDe,wm,oK,LDe,xDe,ix,kDe,SDe,RDe,Am,rK,BDe,PDe,dx,$De,IDe,qDe,ym,tK,NDe,jDe,cx,DDe,GDe,ODe,Lm,aK,VDe,XDe,fx,zDe,QDe,WDe,xm,nK,HDe,UDe,mx,JDe,YDe,KDe,km,sK,ZDe,eGe,gx,oGe,rGe,tGe,Sm,lK,aGe,nGe,hx,sGe,lGe,iGe,Rm,iK,dGe,cGe,px,fGe,mGe,gGe,Bm,dK,hGe,pGe,_x,_Ge,uGe,bGe,Pm,cK,vGe,FGe,ux,TGe,MGe,EGe,$m,fK,CGe,wGe,bx,AGe,yGe,LGe,Im,mK,xGe,kGe,vx,SGe,RGe,BGe,qm,gK,PGe,$Ge,Fx,IGe,qGe,NGe,Nm,hK,jGe,DGe,Tx,GGe,OGe,VGe,jm,pK,XGe,zGe,Mx,QGe,WGe,HGe,Dm,_K,UGe,JGe,Ex,YGe,KGe,ZGe,Gm,uK,eOe,oOe,Cx,rOe,tOe,aOe,Om,bK,nOe,sOe,wx,lOe,iOe,dOe,Vm,vK,cOe,fOe,Ax,mOe,gOe,hOe,Xm,FK,pOe,_Oe,yx,uOe,bOe,vOe,zm,TK,FOe,TOe,Lx,MOe,EOe,COe,Qm,MK,wOe,AOe,xx,yOe,LOe,xOe,Wm,EK,kOe,SOe,kx,ROe,BOe,POe,Hm,CK,$Oe,IOe,Sx,qOe,NOe,jOe,Um,wK,DOe,GOe,Rx,OOe,VOe,XOe,Jm,AK,zOe,QOe,Bx,WOe,HOe,UOe,Ym,yK,JOe,YOe,Px,KOe,ZOe,eVe,Km,LK,oVe,rVe,$x,tVe,aVe,nVe,Zm,xK,sVe,lVe,Ix,iVe,dVe,cVe,eg,kK,fVe,mVe,qx,gVe,hVe,pVe,og,SK,_Ve,uVe,Nx,bVe,vVe,FVe,rg,RK,TVe,MVe,jx,EVe,CVe,wVe,tg,BK,AVe,yVe,Dx,LVe,xVe,kVe,ag,PK,SVe,RVe,Gx,BVe,PVe,$Ve,ng,$K,IVe,qVe,Ox,NVe,jVe,DVe,sg,IK,GVe,OVe,Vx,VVe,XVe,zVe,lg,qK,QVe,WVe,Xx,HVe,UVe,JVe,ig,NK,YVe,KVe,zx,ZVe,eXe,oXe,dg,jK,rXe,tXe,Qx,aXe,nXe,sXe,cg,DK,lXe,iXe,Wx,dXe,cXe,fXe,fg,GK,mXe,gXe,Hx,hXe,pXe,_Xe,mg,OK,uXe,bXe,Ux,vXe,FXe,TXe,gg,VK,MXe,EXe,Jx,CXe,wXe,AXe,hg,XK,yXe,LXe,Yx,xXe,kXe,SXe,pg,zK,RXe,BXe,Kx,PXe,$Xe,IXe,_g,QK,qXe,NXe,Zx,jXe,DXe,GXe,ug,WK,OXe,VXe,ek,XXe,zXe,QXe,bg,HK,WXe,HXe,ok,UXe,JXe,YXe,vg,UK,KXe,ZXe,rk,eze,oze,rze,Fg,JK,tze,aze,tk,nze,sze,lze,Tg,YK,ize,dze,ak,cze,fze,mze,Mg,KK,gze,hze,nk,pze,_ze,uze,Eg,ZK,bze,vze,sk,Fze,Tze,Mze,Cg,eZ,Eze,Cze,lk,wze,Aze,yze,wg,oZ,Lze,xze,ik,kze,Sze,Rze,Ag,rZ,Bze,Pze,dk,$ze,Ize,qze,yg,tZ,Nze,jze,ck,Dze,Gze,Oze,Lg,aZ,Vze,Xze,fk,zze,Qze,Wze,xg,nZ,Hze,Uze,mk,Jze,Yze,Kze,kg,sZ,Zze,eQe,gk,oQe,rQe,tQe,Sg,lZ,aQe,nQe,hk,sQe,lQe,iQe,Rg,iZ,dQe,cQe,pk,fQe,mQe,gQe,Bg,dZ,hQe,pQe,_k,_Qe,uQe,bQe,Pg,cZ,vQe,FQe,uk,TQe,MQe,EQe,$g,fZ,CQe,wQe,bk,AQe,yQe,LQe,Ig,mZ,xQe,kQe,vk,SQe,RQe,BQe,qg,gZ,PQe,$Qe,Fk,IQe,qQe,NQe,Ng,hZ,jQe,DQe,Tk,GQe,OQe,VQe,pZ,XQe,zQe,jw,QQe,jg,Dw,WQe,_Z,HQe,jRe,Hi,Dg,uZ,Gw,UQe,bZ,JQe,DRe,Wo,Ow,YQe,Vw,KQe,Mk,ZQe,eWe,oWe,Xw,rWe,vZ,tWe,aWe,nWe,go,zw,sWe,FZ,lWe,iWe,Oa,dWe,TZ,cWe,fWe,MZ,mWe,gWe,EZ,hWe,pWe,_We,E,Wn,CZ,uWe,bWe,Ek,vWe,FWe,Ck,TWe,MWe,EWe,Hn,wZ,CWe,wWe,wk,AWe,yWe,Ak,LWe,xWe,kWe,Un,AZ,SWe,RWe,yk,BWe,PWe,Lk,$We,IWe,qWe,Gg,yZ,NWe,jWe,xk,DWe,GWe,OWe,Jn,LZ,VWe,XWe,kk,zWe,QWe,Sk,WWe,HWe,UWe,Og,xZ,JWe,YWe,Rk,KWe,ZWe,eHe,Vg,kZ,oHe,rHe,Bk,tHe,aHe,nHe,Xg,SZ,sHe,lHe,Pk,iHe,dHe,cHe,Yn,RZ,fHe,mHe,$k,gHe,hHe,Ik,pHe,_He,uHe,Kn,BZ,bHe,vHe,qk,FHe,THe,Nk,MHe,EHe,CHe,Zn,PZ,wHe,AHe,jk,yHe,LHe,Dk,xHe,kHe,SHe,zg,$Z,RHe,BHe,Gk,PHe,$He,IHe,Qg,IZ,qHe,NHe,Ok,jHe,DHe,GHe,es,qZ,OHe,VHe,Vk,XHe,zHe,Xk,QHe,WHe,HHe,Wg,NZ,UHe,JHe,zk,YHe,KHe,ZHe,os,jZ,eUe,oUe,Qk,rUe,tUe,Wk,aUe,nUe,sUe,rs,DZ,lUe,iUe,Hk,dUe,cUe,Uk,fUe,mUe,gUe,ts,GZ,hUe,pUe,Jk,_Ue,uUe,OZ,bUe,vUe,FUe,Hg,VZ,TUe,MUe,Yk,EUe,CUe,wUe,as,XZ,AUe,yUe,Kk,LUe,xUe,Zk,kUe,SUe,RUe,ns,zZ,BUe,PUe,eS,$Ue,IUe,oS,qUe,NUe,jUe,ss,QZ,DUe,GUe,rS,OUe,VUe,tS,XUe,zUe,QUe,ls,WZ,WUe,HUe,aS,UUe,JUe,nS,YUe,KUe,ZUe,is,HZ,eJe,oJe,sS,rJe,tJe,lS,aJe,nJe,sJe,Ug,UZ,lJe,iJe,iS,dJe,cJe,fJe,ds,JZ,mJe,gJe,dS,hJe,pJe,cS,_Je,uJe,bJe,Jg,YZ,vJe,FJe,fS,TJe,MJe,EJe,cs,KZ,CJe,wJe,mS,AJe,yJe,gS,LJe,xJe,kJe,fs,ZZ,SJe,RJe,hS,BJe,PJe,pS,$Je,IJe,qJe,ms,eee,NJe,jJe,_S,DJe,GJe,uS,OJe,VJe,XJe,gs,oee,zJe,QJe,bS,WJe,HJe,vS,UJe,JJe,YJe,Yg,ree,KJe,ZJe,FS,eYe,oYe,rYe,hs,tee,tYe,aYe,TS,nYe,sYe,MS,lYe,iYe,dYe,ps,aee,cYe,fYe,ES,mYe,gYe,CS,hYe,pYe,_Ye,_s,nee,uYe,bYe,wS,vYe,FYe,AS,TYe,MYe,EYe,us,see,CYe,wYe,yS,AYe,yYe,LS,LYe,xYe,kYe,bs,lee,SYe,RYe,xS,BYe,PYe,kS,$Ye,IYe,qYe,vs,iee,NYe,jYe,SS,DYe,GYe,RS,OYe,VYe,XYe,Kg,dee,zYe,QYe,BS,WYe,HYe,UYe,Fs,cee,JYe,YYe,PS,KYe,ZYe,$S,eKe,oKe,rKe,Zg,fee,tKe,aKe,IS,nKe,sKe,lKe,eh,mee,iKe,dKe,qS,cKe,fKe,mKe,Ts,gee,gKe,hKe,NS,pKe,_Ke,jS,uKe,bKe,vKe,Ms,hee,FKe,TKe,DS,MKe,EKe,GS,CKe,wKe,AKe,oh,pee,yKe,LKe,OS,xKe,kKe,SKe,Es,_ee,RKe,BKe,VS,PKe,$Ke,XS,IKe,qKe,NKe,Cs,uee,jKe,DKe,zS,GKe,OKe,QS,VKe,XKe,zKe,ws,bee,QKe,WKe,WS,HKe,UKe,HS,JKe,YKe,KKe,As,vee,ZKe,eZe,US,oZe,rZe,JS,tZe,aZe,nZe,ys,Fee,sZe,lZe,YS,iZe,dZe,KS,cZe,fZe,mZe,rh,Tee,gZe,hZe,ZS,pZe,_Ze,uZe,th,Mee,bZe,vZe,eR,FZe,TZe,MZe,ah,Eee,EZe,CZe,oR,wZe,AZe,yZe,nh,Cee,LZe,xZe,rR,kZe,SZe,RZe,Ls,wee,BZe,PZe,tR,$Ze,IZe,aR,qZe,NZe,jZe,sh,Aee,DZe,GZe,nR,OZe,VZe,XZe,xs,yee,zZe,QZe,sR,WZe,HZe,lR,UZe,JZe,YZe,ks,Lee,KZe,ZZe,iR,eeo,oeo,dR,reo,teo,aeo,Ss,xee,neo,seo,cR,leo,ieo,fR,deo,ceo,feo,Rs,kee,meo,geo,mR,heo,peo,gR,_eo,ueo,beo,Bs,See,veo,Feo,hR,Teo,Meo,pR,Eeo,Ceo,weo,Ps,Ree,Aeo,yeo,_R,Leo,xeo,uR,keo,Seo,Reo,lh,Bee,Beo,Peo,bR,$eo,Ieo,qeo,ih,Pee,Neo,jeo,vR,Deo,Geo,Oeo,$s,$ee,Veo,Xeo,FR,zeo,Qeo,TR,Weo,Heo,Ueo,Is,Iee,Jeo,Yeo,MR,Keo,Zeo,ER,eoo,ooo,roo,qs,qee,too,aoo,CR,noo,soo,wR,loo,ioo,doo,dh,Nee,coo,foo,AR,moo,goo,hoo,ch,jee,poo,_oo,yR,uoo,boo,voo,fh,Dee,Foo,Too,LR,Moo,Eoo,Coo,mh,Gee,woo,Aoo,xR,yoo,Loo,xoo,gh,Oee,koo,Soo,kR,Roo,Boo,Poo,Ns,Vee,$oo,Ioo,SR,qoo,Noo,RR,joo,Doo,Goo,hh,Xee,Ooo,Voo,BR,Xoo,zoo,Qoo,ph,zee,Woo,Hoo,PR,Uoo,Joo,Yoo,js,Qee,Koo,Zoo,$R,ero,oro,IR,rro,tro,aro,Ds,Wee,nro,sro,qR,lro,iro,NR,dro,cro,fro,Hee,mro,gro,Qw,hro,_h,Ww,pro,Uee,_ro,GRe,Ui,uh,Jee,Hw,uro,Yee,bro,ORe,Ho,Uw,vro,Jw,Fro,jR,Tro,Mro,Ero,Yw,Cro,Kee,wro,Aro,yro,$e,Kw,Lro,Zee,xro,kro,Va,Sro,eoe,Rro,Bro,ooe,Pro,$ro,roe,Iro,qro,Nro,ee,bh,toe,jro,Dro,DR,Gro,Oro,Vro,vh,aoe,Xro,zro,GR,Qro,Wro,Hro,Fh,noe,Uro,Jro,OR,Yro,Kro,Zro,Th,soe,eto,oto,VR,rto,tto,ato,Mh,loe,nto,sto,XR,lto,ito,dto,Eh,ioe,cto,fto,zR,mto,gto,hto,Ch,doe,pto,_to,QR,uto,bto,vto,wh,coe,Fto,Tto,WR,Mto,Eto,Cto,Ah,foe,wto,Ato,HR,yto,Lto,xto,yh,moe,kto,Sto,UR,Rto,Bto,Pto,Lh,goe,$to,Ito,JR,qto,Nto,jto,xh,hoe,Dto,Gto,YR,Oto,Vto,Xto,kh,poe,zto,Qto,KR,Wto,Hto,Uto,Sh,_oe,Jto,Yto,ZR,Kto,Zto,eao,Rh,uoe,oao,rao,eB,tao,aao,nao,Bh,boe,sao,lao,oB,iao,dao,cao,Ph,voe,fao,mao,rB,gao,hao,pao,$h,Foe,_ao,uao,tB,bao,vao,Fao,Ih,Toe,Tao,Mao,aB,Eao,Cao,wao,qh,Aao,Moe,yao,Lao,Zw,xao,Nh,e6,kao,Eoe,Sao,VRe,Ji,jh,Coe,o6,Rao,woe,Bao,XRe,Uo,r6,Pao,t6,$ao,nB,Iao,qao,Nao,a6,jao,Aoe,Dao,Gao,Oao,Ie,n6,Vao,yoe,Xao,zao,Yi,Qao,Loe,Wao,Hao,xoe,Uao,Jao,Yao,ke,Dh,koe,Kao,Zao,sB,eno,ono,rno,Gh,Soe,tno,ano,lB,nno,sno,lno,Oh,Roe,ino,dno,iB,cno,fno,mno,Vh,Boe,gno,hno,dB,pno,_no,uno,Xh,Poe,bno,vno,cB,Fno,Tno,Mno,zh,$oe,Eno,Cno,fB,wno,Ano,yno,Qh,Ioe,Lno,xno,mB,kno,Sno,Rno,Wh,qoe,Bno,Pno,gB,$no,Ino,qno,Hh,Nno,Noe,jno,Dno,s6,Gno,Uh,l6,Ono,joe,Vno,zRe,Ki,Jh,Doe,i6,Xno,Goe,zno,QRe,Jo,d6,Qno,Zi,Wno,hB,Hno,Uno,pB,Jno,Yno,Kno,c6,Zno,Ooe,eso,oso,rso,Xr,f6,tso,Voe,aso,nso,ed,sso,Xoe,lso,iso,_B,dso,cso,fso,zoe,mso,gso,m6,hso,qe,g6,pso,Qoe,_so,uso,Xa,bso,Woe,vso,Fso,Hoe,Tso,Mso,Uoe,Eso,Cso,wso,T,Yh,Joe,Aso,yso,uB,Lso,xso,kso,Kh,Yoe,Sso,Rso,bB,Bso,Pso,$so,Zh,Koe,Iso,qso,vB,Nso,jso,Dso,ep,Zoe,Gso,Oso,FB,Vso,Xso,zso,op,ere,Qso,Wso,TB,Hso,Uso,Jso,rp,ore,Yso,Kso,MB,Zso,elo,olo,tp,rre,rlo,tlo,EB,alo,nlo,slo,ap,tre,llo,ilo,CB,dlo,clo,flo,np,are,mlo,glo,wB,hlo,plo,_lo,sp,nre,ulo,blo,AB,vlo,Flo,Tlo,lp,sre,Mlo,Elo,yB,Clo,wlo,Alo,ip,lre,ylo,Llo,LB,xlo,klo,Slo,dp,ire,Rlo,Blo,xB,Plo,$lo,Ilo,cp,dre,qlo,Nlo,kB,jlo,Dlo,Glo,fp,cre,Olo,Vlo,SB,Xlo,zlo,Qlo,mp,fre,Wlo,Hlo,RB,Ulo,Jlo,Ylo,gp,mre,Klo,Zlo,BB,eio,oio,rio,hp,gre,tio,aio,PB,nio,sio,lio,pp,hre,iio,dio,$B,cio,fio,mio,_p,pre,gio,hio,IB,pio,_io,uio,up,_re,bio,vio,qB,Fio,Tio,Mio,bp,ure,Eio,Cio,NB,wio,Aio,yio,vp,bre,Lio,xio,jB,kio,Sio,Rio,Fp,vre,Bio,Pio,DB,$io,Iio,qio,Tp,Fre,Nio,jio,GB,Dio,Gio,Oio,Mp,Tre,Vio,Xio,OB,zio,Qio,Wio,Ep,Mre,Hio,Uio,VB,Jio,Yio,Kio,Cp,Ere,Zio,edo,XB,odo,rdo,tdo,wp,Cre,ado,ndo,zB,sdo,ldo,ido,Ap,wre,ddo,cdo,QB,fdo,mdo,gdo,Gs,Are,hdo,pdo,WB,_do,udo,HB,bdo,vdo,Fdo,yp,yre,Tdo,Mdo,UB,Edo,Cdo,wdo,Lp,Lre,Ado,ydo,JB,Ldo,xdo,kdo,xp,xre,Sdo,Rdo,YB,Bdo,Pdo,$do,kp,kre,Ido,qdo,KB,Ndo,jdo,Ddo,Sp,Sre,Gdo,Odo,ZB,Vdo,Xdo,zdo,Rp,Rre,Qdo,Wdo,eP,Hdo,Udo,Jdo,Bp,Bre,Ydo,Kdo,oP,Zdo,eco,oco,Pp,Pre,rco,tco,rP,aco,nco,sco,$p,$re,lco,ico,tP,dco,cco,fco,Ip,Ire,mco,gco,aP,hco,pco,_co,qp,qre,uco,bco,nP,vco,Fco,Tco,Np,Nre,Mco,Eco,sP,Cco,wco,Aco,jp,jre,yco,Lco,lP,xco,kco,Sco,Dp,Dre,Rco,Bco,iP,Pco,$co,Ico,Gp,Gre,qco,Nco,dP,jco,Dco,Gco,Op,Ore,Oco,Vco,cP,Xco,zco,Qco,Vp,Vre,Wco,Hco,fP,Uco,Jco,Yco,Xp,Xre,Kco,Zco,mP,efo,ofo,rfo,zp,zre,tfo,afo,gP,nfo,sfo,lfo,Qp,Qre,ifo,dfo,hP,cfo,ffo,mfo,Wp,Wre,gfo,hfo,pP,pfo,_fo,ufo,Hp,Hre,bfo,vfo,_P,Ffo,Tfo,Mfo,Up,Ure,Efo,Cfo,uP,wfo,Afo,yfo,Jp,Jre,Lfo,xfo,bP,kfo,Sfo,Rfo,Yp,Yre,Bfo,Pfo,vP,$fo,Ifo,qfo,Kp,Kre,Nfo,jfo,FP,Dfo,Gfo,Ofo,Zp,Zre,Vfo,Xfo,TP,zfo,Qfo,Wfo,e_,ete,Hfo,Ufo,MP,Jfo,Yfo,Kfo,o_,ote,Zfo,emo,EP,omo,rmo,tmo,r_,rte,amo,nmo,CP,smo,lmo,imo,t_,tte,dmo,cmo,wP,fmo,mmo,gmo,a_,ate,hmo,pmo,AP,_mo,umo,bmo,n_,nte,vmo,Fmo,yP,Tmo,Mmo,Emo,s_,ste,Cmo,wmo,LP,Amo,ymo,Lmo,l_,lte,xmo,kmo,xP,Smo,Rmo,Bmo,i_,ite,Pmo,$mo,kP,Imo,qmo,Nmo,d_,dte,jmo,Dmo,SP,Gmo,Omo,Vmo,c_,cte,Xmo,zmo,RP,Qmo,Wmo,Hmo,f_,fte,Umo,Jmo,BP,Ymo,Kmo,Zmo,m_,mte,ego,ogo,PP,rgo,tgo,ago,g_,gte,ngo,sgo,$P,lgo,igo,dgo,h_,hte,cgo,fgo,IP,mgo,ggo,hgo,p_,pte,pgo,_go,qP,ugo,bgo,vgo,__,_te,Fgo,Tgo,NP,Mgo,Ego,Cgo,u_,ute,wgo,Ago,jP,ygo,Lgo,xgo,b_,bte,kgo,Sgo,DP,Rgo,Bgo,Pgo,v_,vte,$go,Igo,GP,qgo,Ngo,jgo,F_,Fte,Dgo,Ggo,OP,Ogo,Vgo,Xgo,T_,Tte,zgo,Qgo,VP,Wgo,Hgo,Ugo,M_,Mte,Jgo,Ygo,XP,Kgo,Zgo,eho,E_,Ete,oho,rho,zP,tho,aho,nho,C_,Cte,sho,lho,QP,iho,dho,cho,w_,wte,fho,mho,WP,gho,hho,pho,A_,Ate,_ho,uho,HP,bho,vho,Fho,y_,yte,Tho,Mho,UP,Eho,Cho,who,L_,Lte,Aho,yho,JP,Lho,xho,kho,x_,xte,Sho,Rho,YP,Bho,Pho,$ho,k_,kte,Iho,qho,KP,Nho,jho,Dho,S_,Ste,Gho,Oho,ZP,Vho,Xho,zho,R_,Rte,Qho,Who,e$,Hho,Uho,Jho,B_,Bte,Yho,Kho,o$,Zho,epo,opo,P_,Pte,rpo,tpo,r$,apo,npo,spo,$_,$te,lpo,ipo,t$,dpo,cpo,fpo,I_,mpo,Ite,gpo,hpo,qte,ppo,_po,Nte,upo,bpo,h6,WRe,od,q_,jte,p6,vpo,Dte,Fpo,HRe,Yo,_6,Tpo,rd,Mpo,a$,Epo,Cpo,n$,wpo,Apo,ypo,u6,Lpo,Gte,xpo,kpo,Spo,zr,b6,Rpo,Ote,Bpo,Ppo,td,$po,Vte,Ipo,qpo,s$,Npo,jpo,Dpo,Xte,Gpo,Opo,v6,Vpo,Ne,F6,Xpo,zte,zpo,Qpo,za,Wpo,Qte,Hpo,Upo,Wte,Jpo,Ypo,Hte,Kpo,Zpo,e_o,S,N_,Ute,o_o,r_o,l$,t_o,a_o,n_o,j_,Jte,s_o,l_o,i$,i_o,d_o,c_o,D_,Yte,f_o,m_o,d$,g_o,h_o,p_o,G_,Kte,__o,u_o,c$,b_o,v_o,F_o,O_,Zte,T_o,M_o,f$,E_o,C_o,w_o,V_,eae,A_o,y_o,m$,L_o,x_o,k_o,X_,oae,S_o,R_o,g$,B_o,P_o,$_o,z_,rae,I_o,q_o,h$,N_o,j_o,D_o,Q_,tae,G_o,O_o,p$,V_o,X_o,z_o,W_,aae,Q_o,W_o,_$,H_o,U_o,J_o,H_,nae,Y_o,K_o,u$,Z_o,euo,ouo,U_,sae,ruo,tuo,b$,auo,nuo,suo,J_,lae,luo,iuo,v$,duo,cuo,fuo,Y_,iae,muo,guo,F$,huo,puo,_uo,K_,dae,uuo,buo,T$,vuo,Fuo,Tuo,Z_,cae,Muo,Euo,M$,Cuo,wuo,Auo,eu,fae,yuo,Luo,E$,xuo,kuo,Suo,ou,mae,Ruo,Buo,C$,Puo,$uo,Iuo,ru,gae,quo,Nuo,w$,juo,Duo,Guo,tu,hae,Ouo,Vuo,A$,Xuo,zuo,Quo,au,pae,Wuo,Huo,y$,Uuo,Juo,Yuo,nu,_ae,Kuo,Zuo,L$,e1o,o1o,r1o,su,uae,t1o,a1o,x$,n1o,s1o,l1o,lu,bae,i1o,d1o,k$,c1o,f1o,m1o,iu,vae,g1o,h1o,S$,p1o,_1o,u1o,du,Fae,b1o,v1o,R$,F1o,T1o,M1o,cu,Tae,E1o,C1o,B$,w1o,A1o,y1o,fu,Mae,L1o,x1o,P$,k1o,S1o,R1o,mu,Eae,B1o,P1o,$$,$1o,I1o,q1o,gu,Cae,N1o,j1o,I$,D1o,G1o,O1o,hu,wae,V1o,X1o,q$,z1o,Q1o,W1o,pu,Aae,H1o,U1o,N$,J1o,Y1o,K1o,_u,yae,Z1o,ebo,j$,obo,rbo,tbo,uu,Lae,abo,nbo,D$,sbo,lbo,ibo,bu,xae,dbo,cbo,G$,fbo,mbo,gbo,vu,kae,hbo,pbo,O$,_bo,ubo,bbo,Fu,Sae,vbo,Fbo,V$,Tbo,Mbo,Ebo,Tu,Rae,Cbo,wbo,X$,Abo,ybo,Lbo,Mu,Bae,xbo,kbo,z$,Sbo,Rbo,Bbo,Eu,Pbo,Pae,$bo,Ibo,$ae,qbo,Nbo,Iae,jbo,Dbo,T6,URe,ad,Cu,qae,M6,Gbo,Nae,Obo,JRe,Ko,E6,Vbo,nd,Xbo,Q$,zbo,Qbo,W$,Wbo,Hbo,Ubo,C6,Jbo,jae,Ybo,Kbo,Zbo,Qr,w6,e2o,Dae,o2o,r2o,sd,t2o,Gae,a2o,n2o,H$,s2o,l2o,i2o,Oae,d2o,c2o,A6,f2o,je,y6,m2o,Vae,g2o,h2o,Qa,p2o,Xae,_2o,u2o,zae,b2o,v2o,Qae,F2o,T2o,M2o,$,wu,Wae,E2o,C2o,U$,w2o,A2o,y2o,Au,Hae,L2o,x2o,J$,k2o,S2o,R2o,yu,Uae,B2o,P2o,Y$,$2o,I2o,q2o,Lu,Jae,N2o,j2o,K$,D2o,G2o,O2o,xu,Yae,V2o,X2o,Z$,z2o,Q2o,W2o,ku,Kae,H2o,U2o,eI,J2o,Y2o,K2o,Su,Zae,Z2o,evo,oI,ovo,rvo,tvo,Ru,ene,avo,nvo,rI,svo,lvo,ivo,Bu,one,dvo,cvo,tI,fvo,mvo,gvo,Pu,rne,hvo,pvo,aI,_vo,uvo,bvo,$u,tne,vvo,Fvo,nI,Tvo,Mvo,Evo,Iu,ane,Cvo,wvo,sI,Avo,yvo,Lvo,qu,nne,xvo,kvo,lI,Svo,Rvo,Bvo,Nu,sne,Pvo,$vo,iI,Ivo,qvo,Nvo,ju,lne,jvo,Dvo,dI,Gvo,Ovo,Vvo,Du,ine,Xvo,zvo,cI,Qvo,Wvo,Hvo,Gu,dne,Uvo,Jvo,fI,Yvo,Kvo,Zvo,Ou,cne,eFo,oFo,mI,rFo,tFo,aFo,Vu,fne,nFo,sFo,gI,lFo,iFo,dFo,Xu,mne,cFo,fFo,hI,mFo,gFo,hFo,zu,gne,pFo,_Fo,pI,uFo,bFo,vFo,Qu,hne,FFo,TFo,_I,MFo,EFo,CFo,Wu,pne,wFo,AFo,uI,yFo,LFo,xFo,Hu,_ne,kFo,SFo,bI,RFo,BFo,PFo,Uu,une,$Fo,IFo,vI,qFo,NFo,jFo,Ju,bne,DFo,GFo,FI,OFo,VFo,XFo,Yu,vne,zFo,QFo,TI,WFo,HFo,UFo,Ku,Fne,JFo,YFo,MI,KFo,ZFo,eTo,Zu,Tne,oTo,rTo,EI,tTo,aTo,nTo,e1,Mne,sTo,lTo,CI,iTo,dTo,cTo,o1,Ene,fTo,mTo,wI,gTo,hTo,pTo,r1,Cne,_To,uTo,AI,bTo,vTo,FTo,t1,wne,TTo,MTo,yI,ETo,CTo,wTo,a1,Ane,ATo,yTo,LI,LTo,xTo,kTo,n1,yne,STo,RTo,xI,BTo,PTo,$To,s1,ITo,Lne,qTo,NTo,xne,jTo,DTo,kne,GTo,OTo,L6,YRe,ld,l1,Sne,x6,VTo,Rne,XTo,KRe,Zo,k6,zTo,id,QTo,kI,WTo,HTo,SI,UTo,JTo,YTo,S6,KTo,Bne,ZTo,eMo,oMo,Wr,R6,rMo,Pne,tMo,aMo,dd,nMo,$ne,sMo,lMo,RI,iMo,dMo,cMo,Ine,fMo,mMo,B6,gMo,De,P6,hMo,qne,pMo,_Mo,Wa,uMo,Nne,bMo,vMo,jne,FMo,TMo,Dne,MMo,EMo,CMo,I,i1,Gne,wMo,AMo,BI,yMo,LMo,xMo,d1,One,kMo,SMo,PI,RMo,BMo,PMo,c1,Vne,$Mo,IMo,$I,qMo,NMo,jMo,f1,Xne,DMo,GMo,II,OMo,VMo,XMo,m1,zne,zMo,QMo,qI,WMo,HMo,UMo,g1,Qne,JMo,YMo,NI,KMo,ZMo,e4o,h1,Wne,o4o,r4o,jI,t4o,a4o,n4o,p1,Hne,s4o,l4o,DI,i4o,d4o,c4o,_1,Une,f4o,m4o,GI,g4o,h4o,p4o,u1,Jne,_4o,u4o,OI,b4o,v4o,F4o,b1,Yne,T4o,M4o,VI,E4o,C4o,w4o,v1,Kne,A4o,y4o,XI,L4o,x4o,k4o,F1,Zne,S4o,R4o,zI,B4o,P4o,$4o,T1,ese,I4o,q4o,QI,N4o,j4o,D4o,M1,ose,G4o,O4o,WI,V4o,X4o,z4o,E1,rse,Q4o,W4o,HI,H4o,U4o,J4o,C1,tse,Y4o,K4o,UI,Z4o,eEo,oEo,w1,ase,rEo,tEo,JI,aEo,nEo,sEo,A1,nse,lEo,iEo,YI,dEo,cEo,fEo,y1,sse,mEo,gEo,KI,hEo,pEo,_Eo,L1,lse,uEo,bEo,ZI,vEo,FEo,TEo,x1,ise,MEo,EEo,eq,CEo,wEo,AEo,k1,dse,yEo,LEo,oq,xEo,kEo,SEo,S1,cse,REo,BEo,rq,PEo,$Eo,IEo,R1,fse,qEo,NEo,tq,jEo,DEo,GEo,B1,mse,OEo,VEo,aq,XEo,zEo,QEo,P1,gse,WEo,HEo,nq,UEo,JEo,YEo,$1,hse,KEo,ZEo,sq,e5o,o5o,r5o,I1,pse,t5o,a5o,lq,n5o,s5o,l5o,q1,_se,i5o,d5o,iq,c5o,f5o,m5o,N1,use,g5o,h5o,bse,p5o,_5o,u5o,j1,vse,b5o,v5o,dq,F5o,T5o,M5o,D1,Fse,E5o,C5o,cq,w5o,A5o,y5o,G1,Tse,L5o,x5o,fq,k5o,S5o,R5o,O1,Mse,B5o,P5o,mq,$5o,I5o,q5o,V1,N5o,Ese,j5o,D5o,Cse,G5o,O5o,wse,V5o,X5o,$6,ZRe,cd,X1,Ase,I6,z5o,yse,Q5o,eBe,er,q6,W5o,fd,H5o,gq,U5o,J5o,hq,Y5o,K5o,Z5o,N6,e3o,Lse,o3o,r3o,t3o,Hr,j6,a3o,xse,n3o,s3o,md,l3o,kse,i3o,d3o,pq,c3o,f3o,m3o,Sse,g3o,h3o,D6,p3o,Ge,G6,_3o,Rse,u3o,b3o,Ha,v3o,Bse,F3o,T3o,Pse,M3o,E3o,$se,C3o,w3o,A3o,ne,z1,Ise,y3o,L3o,_q,x3o,k3o,S3o,Q1,qse,R3o,B3o,uq,P3o,$3o,I3o,W1,Nse,q3o,N3o,bq,j3o,D3o,G3o,H1,jse,O3o,V3o,vq,X3o,z3o,Q3o,U1,Dse,W3o,H3o,Fq,U3o,J3o,Y3o,J1,Gse,K3o,Z3o,Tq,eCo,oCo,rCo,Y1,Ose,tCo,aCo,Mq,nCo,sCo,lCo,K1,Vse,iCo,dCo,Eq,cCo,fCo,mCo,Z1,Xse,gCo,hCo,Cq,pCo,_Co,uCo,eb,zse,bCo,vCo,wq,FCo,TCo,MCo,ob,Qse,ECo,CCo,Aq,wCo,ACo,yCo,rb,Wse,LCo,xCo,yq,kCo,SCo,RCo,tb,Hse,BCo,PCo,Lq,$Co,ICo,qCo,ab,Use,NCo,jCo,xq,DCo,GCo,OCo,nb,Jse,VCo,XCo,kq,zCo,QCo,WCo,sb,Yse,HCo,UCo,Sq,JCo,YCo,KCo,lb,Kse,ZCo,ewo,Rq,owo,rwo,two,ib,awo,Zse,nwo,swo,ele,lwo,iwo,ole,dwo,cwo,O6,oBe,gd,db,rle,V6,fwo,tle,mwo,rBe,or,X6,gwo,hd,hwo,Bq,pwo,_wo,Pq,uwo,bwo,vwo,z6,Fwo,ale,Two,Mwo,Ewo,Ur,Q6,Cwo,nle,wwo,Awo,pd,ywo,sle,Lwo,xwo,$q,kwo,Swo,Rwo,lle,Bwo,Pwo,W6,$wo,Oe,H6,Iwo,ile,qwo,Nwo,Ua,jwo,dle,Dwo,Gwo,cle,Owo,Vwo,fle,Xwo,zwo,Qwo,y,cb,mle,Wwo,Hwo,Iq,Uwo,Jwo,Ywo,fb,gle,Kwo,Zwo,qq,e6o,o6o,r6o,mb,hle,t6o,a6o,Nq,n6o,s6o,l6o,gb,ple,i6o,d6o,jq,c6o,f6o,m6o,hb,_le,g6o,h6o,Dq,p6o,_6o,u6o,pb,ule,b6o,v6o,Gq,F6o,T6o,M6o,_b,ble,E6o,C6o,Oq,w6o,A6o,y6o,ub,vle,L6o,x6o,Vq,k6o,S6o,R6o,bb,Fle,B6o,P6o,Xq,$6o,I6o,q6o,vb,Tle,N6o,j6o,zq,D6o,G6o,O6o,Fb,Mle,V6o,X6o,Qq,z6o,Q6o,W6o,Tb,Ele,H6o,U6o,Wq,J6o,Y6o,K6o,Mb,Cle,Z6o,eAo,Hq,oAo,rAo,tAo,Eb,wle,aAo,nAo,Uq,sAo,lAo,iAo,Cb,Ale,dAo,cAo,Jq,fAo,mAo,gAo,wb,yle,hAo,pAo,Yq,_Ao,uAo,bAo,Ab,Lle,vAo,FAo,Kq,TAo,MAo,EAo,yb,xle,CAo,wAo,Zq,AAo,yAo,LAo,Lb,kle,xAo,kAo,eN,SAo,RAo,BAo,xb,Sle,PAo,$Ao,oN,IAo,qAo,NAo,kb,Rle,jAo,DAo,rN,GAo,OAo,VAo,Sb,Ble,XAo,zAo,tN,QAo,WAo,HAo,Rb,Ple,UAo,JAo,aN,YAo,KAo,ZAo,Bb,$le,e0o,o0o,nN,r0o,t0o,a0o,Pb,Ile,n0o,s0o,sN,l0o,i0o,d0o,$b,qle,c0o,f0o,lN,m0o,g0o,h0o,Ib,Nle,p0o,_0o,iN,u0o,b0o,v0o,qb,jle,F0o,T0o,dN,M0o,E0o,C0o,Nb,Dle,w0o,A0o,cN,y0o,L0o,x0o,jb,Gle,k0o,S0o,fN,R0o,B0o,P0o,Db,Ole,$0o,I0o,mN,q0o,N0o,j0o,Gb,Vle,D0o,G0o,gN,O0o,V0o,X0o,Ob,Xle,z0o,Q0o,hN,W0o,H0o,U0o,Vb,zle,J0o,Y0o,pN,K0o,Z0o,eyo,Xb,Qle,oyo,ryo,_N,tyo,ayo,nyo,zb,Wle,syo,lyo,uN,iyo,dyo,cyo,Qb,Hle,fyo,myo,bN,gyo,hyo,pyo,Wb,Ule,_yo,uyo,vN,byo,vyo,Fyo,Hb,Jle,Tyo,Myo,FN,Eyo,Cyo,wyo,Ub,Yle,Ayo,yyo,TN,Lyo,xyo,kyo,Jb,Kle,Syo,Ryo,MN,Byo,Pyo,$yo,Yb,Zle,Iyo,qyo,EN,Nyo,jyo,Dyo,Kb,eie,Gyo,Oyo,CN,Vyo,Xyo,zyo,Zb,oie,Qyo,Wyo,wN,Hyo,Uyo,Jyo,e2,rie,Yyo,Kyo,AN,Zyo,e8o,o8o,o2,tie,r8o,t8o,yN,a8o,n8o,s8o,r2,aie,l8o,i8o,LN,d8o,c8o,f8o,t2,m8o,nie,g8o,h8o,sie,p8o,_8o,lie,u8o,b8o,U6,tBe,_d,a2,iie,J6,v8o,die,F8o,aBe,rr,Y6,T8o,ud,M8o,xN,E8o,C8o,kN,w8o,A8o,y8o,K6,L8o,cie,x8o,k8o,S8o,Jr,Z6,R8o,fie,B8o,P8o,bd,$8o,mie,I8o,q8o,SN,N8o,j8o,D8o,gie,G8o,O8o,eA,V8o,Ve,oA,X8o,hie,z8o,Q8o,Ja,W8o,pie,H8o,U8o,_ie,J8o,Y8o,uie,K8o,Z8o,eLo,G,n2,bie,oLo,rLo,RN,tLo,aLo,nLo,s2,vie,sLo,lLo,BN,iLo,dLo,cLo,l2,Fie,fLo,mLo,PN,gLo,hLo,pLo,i2,Tie,_Lo,uLo,$N,bLo,vLo,FLo,d2,Mie,TLo,MLo,IN,ELo,CLo,wLo,c2,Eie,ALo,yLo,qN,LLo,xLo,kLo,f2,Cie,SLo,RLo,NN,BLo,PLo,$Lo,m2,wie,ILo,qLo,jN,NLo,jLo,DLo,g2,Aie,GLo,OLo,DN,VLo,XLo,zLo,h2,yie,QLo,WLo,GN,HLo,ULo,JLo,p2,Lie,YLo,KLo,ON,ZLo,e7o,o7o,_2,xie,r7o,t7o,VN,a7o,n7o,s7o,u2,kie,l7o,i7o,XN,d7o,c7o,f7o,b2,Sie,m7o,g7o,zN,h7o,p7o,_7o,v2,Rie,u7o,b7o,QN,v7o,F7o,T7o,F2,Bie,M7o,E7o,WN,C7o,w7o,A7o,T2,Pie,y7o,L7o,HN,x7o,k7o,S7o,M2,$ie,R7o,B7o,UN,P7o,$7o,I7o,E2,Iie,q7o,N7o,JN,j7o,D7o,G7o,C2,qie,O7o,V7o,YN,X7o,z7o,Q7o,w2,Nie,W7o,H7o,KN,U7o,J7o,Y7o,A2,jie,K7o,Z7o,ZN,e9o,o9o,r9o,y2,Die,t9o,a9o,ej,n9o,s9o,l9o,L2,Gie,i9o,d9o,oj,c9o,f9o,m9o,x2,Oie,g9o,h9o,rj,p9o,_9o,u9o,k2,Vie,b9o,v9o,tj,F9o,T9o,M9o,S2,Xie,E9o,C9o,aj,w9o,A9o,y9o,R2,zie,L9o,x9o,nj,k9o,S9o,R9o,B2,B9o,Qie,P9o,$9o,Wie,I9o,q9o,Hie,N9o,j9o,rA,nBe,vd,P2,Uie,tA,D9o,Jie,G9o,sBe,tr,aA,O9o,Fd,V9o,sj,X9o,z9o,lj,Q9o,W9o,H9o,nA,U9o,Yie,J9o,Y9o,K9o,Yr,sA,Z9o,Kie,exo,oxo,Td,rxo,Zie,txo,axo,ij,nxo,sxo,lxo,ede,ixo,dxo,lA,cxo,Xe,iA,fxo,ode,mxo,gxo,Ya,hxo,rde,pxo,_xo,tde,uxo,bxo,ade,vxo,Fxo,Txo,da,$2,nde,Mxo,Exo,dj,Cxo,wxo,Axo,I2,sde,yxo,Lxo,cj,xxo,kxo,Sxo,q2,lde,Rxo,Bxo,fj,Pxo,$xo,Ixo,N2,ide,qxo,Nxo,mj,jxo,Dxo,Gxo,j2,dde,Oxo,Vxo,gj,Xxo,zxo,Qxo,D2,Wxo,cde,Hxo,Uxo,fde,Jxo,Yxo,mde,Kxo,Zxo,dA,lBe,Md,G2,gde,cA,eko,hde,oko,iBe,ar,fA,rko,Ed,tko,hj,ako,nko,pj,sko,lko,iko,mA,dko,pde,cko,fko,mko,Kr,gA,gko,_de,hko,pko,Cd,_ko,ude,uko,bko,_j,vko,Fko,Tko,bde,Mko,Eko,hA,Cko,ze,pA,wko,vde,Ako,yko,Ka,Lko,Fde,xko,kko,Tde,Sko,Rko,Mde,Bko,Pko,$ko,j,O2,Ede,Iko,qko,uj,Nko,jko,Dko,V2,Cde,Gko,Oko,bj,Vko,Xko,zko,X2,wde,Qko,Wko,vj,Hko,Uko,Jko,z2,Ade,Yko,Kko,Fj,Zko,eSo,oSo,Q2,yde,rSo,tSo,Tj,aSo,nSo,sSo,W2,Lde,lSo,iSo,Mj,dSo,cSo,fSo,H2,xde,mSo,gSo,Ej,hSo,pSo,_So,U2,kde,uSo,bSo,Cj,vSo,FSo,TSo,J2,Sde,MSo,ESo,wj,CSo,wSo,ASo,Y2,Rde,ySo,LSo,Aj,xSo,kSo,SSo,K2,Bde,RSo,BSo,yj,PSo,$So,ISo,Z2,Pde,qSo,NSo,Lj,jSo,DSo,GSo,ev,$de,OSo,VSo,xj,XSo,zSo,QSo,ov,Ide,WSo,HSo,kj,USo,JSo,YSo,rv,qde,KSo,ZSo,Sj,eRo,oRo,rRo,tv,Nde,tRo,aRo,Rj,nRo,sRo,lRo,av,jde,iRo,dRo,Bj,cRo,fRo,mRo,nv,Dde,gRo,hRo,Pj,pRo,_Ro,uRo,sv,Gde,bRo,vRo,$j,FRo,TRo,MRo,lv,Ode,ERo,CRo,Ij,wRo,ARo,yRo,iv,Vde,LRo,xRo,qj,kRo,SRo,RRo,dv,Xde,BRo,PRo,Nj,$Ro,IRo,qRo,cv,zde,NRo,jRo,jj,DRo,GRo,ORo,fv,Qde,VRo,XRo,Dj,zRo,QRo,WRo,mv,Wde,HRo,URo,Gj,JRo,YRo,KRo,gv,Hde,ZRo,eBo,Oj,oBo,rBo,tBo,hv,Ude,aBo,nBo,Vj,sBo,lBo,iBo,pv,Jde,dBo,cBo,Xj,fBo,mBo,gBo,_v,Yde,hBo,pBo,zj,_Bo,uBo,bBo,uv,Kde,vBo,FBo,Qj,TBo,MBo,EBo,bv,Zde,CBo,wBo,Wj,ABo,yBo,LBo,vv,ece,xBo,kBo,Hj,SBo,RBo,BBo,Fv,oce,PBo,$Bo,Uj,IBo,qBo,NBo,Tv,jBo,rce,DBo,GBo,tce,OBo,VBo,ace,XBo,zBo,_A,dBe,wd,Mv,nce,uA,QBo,sce,WBo,cBe,nr,bA,HBo,Ad,UBo,Jj,JBo,YBo,Yj,KBo,ZBo,ePo,vA,oPo,lce,rPo,tPo,aPo,Zr,FA,nPo,ice,sPo,lPo,yd,iPo,dce,dPo,cPo,Kj,fPo,mPo,gPo,cce,hPo,pPo,TA,_Po,Qe,MA,uPo,fce,bPo,vPo,Za,FPo,mce,TPo,MPo,gce,EPo,CPo,hce,wPo,APo,yPo,R,Ev,pce,LPo,xPo,Zj,kPo,SPo,RPo,Cv,_ce,BPo,PPo,eD,$Po,IPo,qPo,wv,uce,NPo,jPo,oD,DPo,GPo,OPo,Av,bce,VPo,XPo,rD,zPo,QPo,WPo,yv,vce,HPo,UPo,tD,JPo,YPo,KPo,Lv,Fce,ZPo,e$o,aD,o$o,r$o,t$o,xv,Tce,a$o,n$o,nD,s$o,l$o,i$o,kv,Mce,d$o,c$o,sD,f$o,m$o,g$o,Sv,Ece,h$o,p$o,lD,_$o,u$o,b$o,Rv,Cce,v$o,F$o,iD,T$o,M$o,E$o,Bv,wce,C$o,w$o,dD,A$o,y$o,L$o,Pv,Ace,x$o,k$o,cD,S$o,R$o,B$o,$v,yce,P$o,$$o,fD,I$o,q$o,N$o,Iv,Lce,j$o,D$o,mD,G$o,O$o,V$o,qv,xce,X$o,z$o,gD,Q$o,W$o,H$o,Nv,kce,U$o,J$o,hD,Y$o,K$o,Z$o,jv,Sce,eIo,oIo,pD,rIo,tIo,aIo,Dv,Rce,nIo,sIo,_D,lIo,iIo,dIo,Gv,Bce,cIo,fIo,uD,mIo,gIo,hIo,Ov,Pce,pIo,_Io,bD,uIo,bIo,vIo,Vv,$ce,FIo,TIo,vD,MIo,EIo,CIo,Xv,Ice,wIo,AIo,FD,yIo,LIo,xIo,zv,qce,kIo,SIo,TD,RIo,BIo,PIo,Qv,Nce,$Io,IIo,MD,qIo,NIo,jIo,Wv,jce,DIo,GIo,ED,OIo,VIo,XIo,Hv,Dce,zIo,QIo,CD,WIo,HIo,UIo,Uv,Gce,JIo,YIo,wD,KIo,ZIo,eqo,Jv,Oce,oqo,rqo,AD,tqo,aqo,nqo,Yv,Vce,sqo,lqo,yD,iqo,dqo,cqo,Kv,Xce,fqo,mqo,LD,gqo,hqo,pqo,Zv,zce,_qo,uqo,xD,bqo,vqo,Fqo,eF,Qce,Tqo,Mqo,kD,Eqo,Cqo,wqo,oF,Wce,Aqo,yqo,SD,Lqo,xqo,kqo,rF,Hce,Sqo,Rqo,RD,Bqo,Pqo,$qo,tF,Uce,Iqo,qqo,BD,Nqo,jqo,Dqo,aF,Jce,Gqo,Oqo,PD,Vqo,Xqo,zqo,nF,Yce,Qqo,Wqo,$D,Hqo,Uqo,Jqo,sF,Kce,Yqo,Kqo,ID,Zqo,eNo,oNo,lF,Zce,rNo,tNo,qD,aNo,nNo,sNo,iF,lNo,efe,iNo,dNo,ofe,cNo,fNo,rfe,mNo,gNo,EA,fBe,Ld,dF,tfe,CA,hNo,afe,pNo,mBe,sr,wA,_No,xd,uNo,ND,bNo,vNo,jD,FNo,TNo,MNo,AA,ENo,nfe,CNo,wNo,ANo,et,yA,yNo,sfe,LNo,xNo,kd,kNo,lfe,SNo,RNo,DD,BNo,PNo,$No,ife,INo,qNo,LA,NNo,We,xA,jNo,dfe,DNo,GNo,en,ONo,cfe,VNo,XNo,ffe,zNo,QNo,mfe,WNo,HNo,UNo,gfe,cF,hfe,JNo,YNo,GD,KNo,ZNo,ejo,fF,ojo,pfe,rjo,tjo,_fe,ajo,njo,ufe,sjo,ljo,kA,gBe,Sd,mF,bfe,SA,ijo,vfe,djo,hBe,lr,RA,cjo,Rd,fjo,OD,mjo,gjo,VD,hjo,pjo,_jo,BA,ujo,Ffe,bjo,vjo,Fjo,ot,PA,Tjo,Tfe,Mjo,Ejo,Bd,Cjo,Mfe,wjo,Ajo,XD,yjo,Ljo,xjo,Efe,kjo,Sjo,$A,Rjo,He,IA,Bjo,Cfe,Pjo,$jo,on,Ijo,wfe,qjo,Njo,Afe,jjo,Djo,yfe,Gjo,Ojo,Vjo,de,gF,Lfe,Xjo,zjo,zD,Qjo,Wjo,Hjo,hF,xfe,Ujo,Jjo,QD,Yjo,Kjo,Zjo,pF,kfe,eDo,oDo,WD,rDo,tDo,aDo,Os,Sfe,nDo,sDo,HD,lDo,iDo,UD,dDo,cDo,fDo,_F,Rfe,mDo,gDo,JD,hDo,pDo,_Do,ma,Bfe,uDo,bDo,YD,vDo,FDo,KD,TDo,MDo,ZD,EDo,CDo,wDo,uF,Pfe,ADo,yDo,eG,LDo,xDo,kDo,bF,$fe,SDo,RDo,oG,BDo,PDo,$Do,vF,Ife,IDo,qDo,rG,NDo,jDo,DDo,FF,qfe,GDo,ODo,tG,VDo,XDo,zDo,TF,Nfe,QDo,WDo,aG,HDo,UDo,JDo,MF,jfe,YDo,KDo,nG,ZDo,eGo,oGo,EF,Dfe,rGo,tGo,sG,aGo,nGo,sGo,CF,lGo,Gfe,iGo,dGo,Ofe,cGo,fGo,Vfe,mGo,gGo,qA,pBe,Pd,wF,Xfe,NA,hGo,zfe,pGo,_Be,ir,jA,_Go,$d,uGo,lG,bGo,vGo,iG,FGo,TGo,MGo,DA,EGo,Qfe,CGo,wGo,AGo,rt,GA,yGo,Wfe,LGo,xGo,Id,kGo,Hfe,SGo,RGo,dG,BGo,PGo,$Go,Ufe,IGo,qGo,OA,NGo,Ue,VA,jGo,Jfe,DGo,GGo,rn,OGo,Yfe,VGo,XGo,Kfe,zGo,QGo,Zfe,WGo,HGo,UGo,eme,AF,ome,JGo,YGo,cG,KGo,ZGo,eOo,yF,oOo,rme,rOo,tOo,tme,aOo,nOo,ame,sOo,lOo,XA,uBe,qd,LF,nme,zA,iOo,sme,dOo,bBe,dr,QA,cOo,Nd,fOo,fG,mOo,gOo,mG,hOo,pOo,_Oo,WA,uOo,lme,bOo,vOo,FOo,tt,HA,TOo,ime,MOo,EOo,jd,COo,dme,wOo,AOo,gG,yOo,LOo,xOo,cme,kOo,SOo,UA,ROo,Je,JA,BOo,fme,POo,$Oo,tn,IOo,mme,qOo,NOo,gme,jOo,DOo,hme,GOo,OOo,VOo,Se,xF,pme,XOo,zOo,hG,QOo,WOo,HOo,kF,_me,UOo,JOo,pG,YOo,KOo,ZOo,SF,ume,eVo,oVo,_G,rVo,tVo,aVo,RF,bme,nVo,sVo,uG,lVo,iVo,dVo,BF,vme,cVo,fVo,bG,mVo,gVo,hVo,PF,Fme,pVo,_Vo,vG,uVo,bVo,vVo,$F,Tme,FVo,TVo,FG,MVo,EVo,CVo,IF,Mme,wVo,AVo,TG,yVo,LVo,xVo,qF,kVo,Eme,SVo,RVo,Cme,BVo,PVo,wme,$Vo,IVo,YA,vBe,Dd,NF,Ame,KA,qVo,yme,NVo,FBe,cr,ZA,jVo,Gd,DVo,MG,GVo,OVo,EG,VVo,XVo,zVo,e0,QVo,Lme,WVo,HVo,UVo,at,o0,JVo,xme,YVo,KVo,Od,ZVo,kme,eXo,oXo,CG,rXo,tXo,aXo,Sme,nXo,sXo,r0,lXo,Ye,t0,iXo,Rme,dXo,cXo,an,fXo,Bme,mXo,gXo,Pme,hXo,pXo,$me,_Xo,uXo,bXo,nn,jF,Ime,vXo,FXo,wG,TXo,MXo,EXo,DF,qme,CXo,wXo,AG,AXo,yXo,LXo,GF,Nme,xXo,kXo,yG,SXo,RXo,BXo,OF,jme,PXo,$Xo,LG,IXo,qXo,NXo,VF,jXo,Dme,DXo,GXo,Gme,OXo,VXo,Ome,XXo,zXo,a0,TBe,Vd,XF,Vme,n0,QXo,Xme,WXo,MBe,fr,s0,HXo,Xd,UXo,xG,JXo,YXo,kG,KXo,ZXo,ezo,l0,ozo,zme,rzo,tzo,azo,nt,i0,nzo,Qme,szo,lzo,zd,izo,Wme,dzo,czo,SG,fzo,mzo,gzo,Hme,hzo,pzo,d0,_zo,Ke,c0,uzo,Ume,bzo,vzo,sn,Fzo,Jme,Tzo,Mzo,Yme,Ezo,Czo,Kme,wzo,Azo,yzo,Re,zF,Zme,Lzo,xzo,RG,kzo,Szo,Rzo,QF,ege,Bzo,Pzo,BG,$zo,Izo,qzo,WF,oge,Nzo,jzo,PG,Dzo,Gzo,Ozo,HF,rge,Vzo,Xzo,$G,zzo,Qzo,Wzo,UF,tge,Hzo,Uzo,IG,Jzo,Yzo,Kzo,JF,age,Zzo,eQo,qG,oQo,rQo,tQo,YF,nge,aQo,nQo,NG,sQo,lQo,iQo,KF,sge,dQo,cQo,jG,fQo,mQo,gQo,ZF,hQo,lge,pQo,_Qo,ige,uQo,bQo,dge,vQo,FQo,f0,EBe,Qd,eT,cge,m0,TQo,fge,MQo,CBe,mr,g0,EQo,Wd,CQo,DG,wQo,AQo,GG,yQo,LQo,xQo,h0,kQo,mge,SQo,RQo,BQo,st,p0,PQo,gge,$Qo,IQo,Hd,qQo,hge,NQo,jQo,OG,DQo,GQo,OQo,pge,VQo,XQo,_0,zQo,Ze,u0,QQo,_ge,WQo,HQo,ln,UQo,uge,JQo,YQo,bge,KQo,ZQo,vge,eWo,oWo,rWo,b0,oT,Fge,tWo,aWo,VG,nWo,sWo,lWo,rT,Tge,iWo,dWo,XG,cWo,fWo,mWo,tT,gWo,Mge,hWo,pWo,Ege,_Wo,uWo,Cge,bWo,vWo,v0,wBe,Ud,aT,wge,F0,FWo,Age,TWo,ABe,gr,T0,MWo,Jd,EWo,zG,CWo,wWo,QG,AWo,yWo,LWo,M0,xWo,yge,kWo,SWo,RWo,lt,E0,BWo,Lge,PWo,$Wo,Yd,IWo,xge,qWo,NWo,WG,jWo,DWo,GWo,kge,OWo,VWo,C0,XWo,eo,w0,zWo,Sge,QWo,WWo,dn,HWo,Rge,UWo,JWo,Bge,YWo,KWo,Pge,ZWo,eHo,oHo,cn,nT,$ge,rHo,tHo,HG,aHo,nHo,sHo,sT,Ige,lHo,iHo,UG,dHo,cHo,fHo,lT,qge,mHo,gHo,JG,hHo,pHo,_Ho,iT,Nge,uHo,bHo,YG,vHo,FHo,THo,dT,MHo,jge,EHo,CHo,Dge,wHo,AHo,Gge,yHo,LHo,A0,yBe,Kd,cT,Oge,y0,xHo,Vge,kHo,LBe,hr,L0,SHo,Zd,RHo,KG,BHo,PHo,ZG,$Ho,IHo,qHo,x0,NHo,Xge,jHo,DHo,GHo,it,k0,OHo,zge,VHo,XHo,ec,zHo,Qge,QHo,WHo,eO,HHo,UHo,JHo,Wge,YHo,KHo,S0,ZHo,oo,R0,eUo,Hge,oUo,rUo,fn,tUo,Uge,aUo,nUo,Jge,sUo,lUo,Yge,iUo,dUo,cUo,oc,fT,Kge,fUo,mUo,oO,gUo,hUo,pUo,mT,Zge,_Uo,uUo,rO,bUo,vUo,FUo,gT,ehe,TUo,MUo,tO,EUo,CUo,wUo,hT,AUo,ohe,yUo,LUo,rhe,xUo,kUo,the,SUo,RUo,B0,xBe,rc,pT,ahe,P0,BUo,nhe,PUo,kBe,pr,$0,$Uo,tc,IUo,aO,qUo,NUo,nO,jUo,DUo,GUo,I0,OUo,she,VUo,XUo,zUo,dt,q0,QUo,lhe,WUo,HUo,ac,UUo,ihe,JUo,YUo,sO,KUo,ZUo,eJo,dhe,oJo,rJo,N0,tJo,ro,j0,aJo,che,nJo,sJo,mn,lJo,fhe,iJo,dJo,mhe,cJo,fJo,ghe,mJo,gJo,hJo,hhe,_T,phe,pJo,_Jo,lO,uJo,bJo,vJo,uT,FJo,_he,TJo,MJo,uhe,EJo,CJo,bhe,wJo,AJo,D0,SBe,nc,bT,vhe,G0,yJo,Fhe,LJo,RBe,_r,O0,xJo,sc,kJo,iO,SJo,RJo,dO,BJo,PJo,$Jo,V0,IJo,The,qJo,NJo,jJo,ct,X0,DJo,Mhe,GJo,OJo,lc,VJo,Ehe,XJo,zJo,cO,QJo,WJo,HJo,Che,UJo,JJo,z0,YJo,to,Q0,KJo,whe,ZJo,eYo,gn,oYo,Ahe,rYo,tYo,yhe,aYo,nYo,Lhe,sYo,lYo,iYo,xhe,vT,khe,dYo,cYo,fO,fYo,mYo,gYo,FT,hYo,She,pYo,_Yo,Rhe,uYo,bYo,Bhe,vYo,FYo,W0,BBe,ic,TT,Phe,H0,TYo,$he,MYo,PBe,ur,U0,EYo,dc,CYo,mO,wYo,AYo,gO,yYo,LYo,xYo,J0,kYo,Ihe,SYo,RYo,BYo,ft,Y0,PYo,qhe,$Yo,IYo,cc,qYo,Nhe,NYo,jYo,hO,DYo,GYo,OYo,jhe,VYo,XYo,K0,zYo,ao,Z0,QYo,Dhe,WYo,HYo,hn,UYo,Ghe,JYo,YYo,Ohe,KYo,ZYo,Vhe,eKo,oKo,rKo,pn,MT,Xhe,tKo,aKo,pO,nKo,sKo,lKo,ET,zhe,iKo,dKo,_O,cKo,fKo,mKo,CT,Qhe,gKo,hKo,uO,pKo,_Ko,uKo,wT,Whe,bKo,vKo,bO,FKo,TKo,MKo,AT,EKo,Hhe,CKo,wKo,Uhe,AKo,yKo,Jhe,LKo,xKo,ey,$Be,fc,yT,Yhe,oy,kKo,Khe,SKo,IBe,br,ry,RKo,mc,BKo,vO,PKo,$Ko,FO,IKo,qKo,NKo,ty,jKo,Zhe,DKo,GKo,OKo,mt,ay,VKo,epe,XKo,zKo,gc,QKo,ope,WKo,HKo,TO,UKo,JKo,YKo,rpe,KKo,ZKo,ny,eZo,no,sy,oZo,tpe,rZo,tZo,_n,aZo,ape,nZo,sZo,npe,lZo,iZo,spe,dZo,cZo,fZo,lpe,LT,ipe,mZo,gZo,MO,hZo,pZo,_Zo,xT,uZo,dpe,bZo,vZo,cpe,FZo,TZo,fpe,MZo,EZo,ly,qBe,hc,kT,mpe,iy,CZo,gpe,wZo,NBe,vr,dy,AZo,pc,yZo,EO,LZo,xZo,CO,kZo,SZo,RZo,cy,BZo,hpe,PZo,$Zo,IZo,gt,fy,qZo,ppe,NZo,jZo,_c,DZo,_pe,GZo,OZo,wO,VZo,XZo,zZo,upe,QZo,WZo,my,HZo,ho,gy,UZo,bpe,JZo,YZo,un,KZo,vpe,ZZo,eer,Fpe,oer,rer,Tpe,ter,aer,ner,x,ST,Mpe,ser,ler,AO,ier,der,cer,RT,Epe,fer,mer,yO,ger,her,per,BT,Cpe,_er,uer,LO,ber,ver,Fer,PT,wpe,Ter,Mer,xO,Eer,Cer,wer,$T,Ape,Aer,yer,kO,Ler,xer,ker,IT,ype,Ser,Rer,SO,Ber,Per,$er,qT,Lpe,Ier,qer,RO,Ner,jer,Der,NT,xpe,Ger,Oer,BO,Ver,Xer,zer,jT,kpe,Qer,Wer,PO,Her,Uer,Jer,DT,Spe,Yer,Ker,$O,Zer,eor,oor,GT,Rpe,ror,tor,IO,aor,nor,sor,OT,Bpe,lor,ior,qO,dor,cor,mor,VT,Ppe,gor,hor,NO,por,_or,uor,XT,$pe,bor,vor,jO,For,Tor,Mor,zT,Ipe,Eor,Cor,DO,wor,Aor,yor,QT,qpe,Lor,xor,GO,kor,Sor,Ror,Vs,Npe,Bor,Por,OO,$or,Ior,VO,qor,Nor,jor,WT,jpe,Dor,Gor,XO,Oor,Vor,Xor,HT,Dpe,zor,Qor,zO,Wor,Hor,Uor,UT,Gpe,Jor,Yor,QO,Kor,Zor,err,JT,Ope,orr,rrr,WO,trr,arr,nrr,YT,Vpe,srr,lrr,HO,irr,drr,crr,KT,Xpe,frr,mrr,UO,grr,hrr,prr,ZT,zpe,_rr,urr,JO,brr,vrr,Frr,eM,Qpe,Trr,Mrr,YO,Err,Crr,wrr,oM,Wpe,Arr,yrr,KO,Lrr,xrr,krr,rM,Hpe,Srr,Rrr,ZO,Brr,Prr,$rr,tM,Upe,Irr,qrr,eV,Nrr,jrr,Drr,aM,Jpe,Grr,Orr,oV,Vrr,Xrr,zrr,nM,Ype,Qrr,Wrr,rV,Hrr,Urr,Jrr,sM,Kpe,Yrr,Krr,tV,Zrr,etr,otr,lM,Zpe,rtr,ttr,aV,atr,ntr,str,iM,e_e,ltr,itr,nV,dtr,ctr,ftr,dM,o_e,mtr,gtr,sV,htr,ptr,_tr,cM,r_e,utr,btr,lV,vtr,Ftr,Ttr,fM,t_e,Mtr,Etr,iV,Ctr,wtr,Atr,mM,a_e,ytr,Ltr,dV,xtr,ktr,Str,gM,n_e,Rtr,Btr,cV,Ptr,$tr,Itr,hM,s_e,qtr,Ntr,fV,jtr,Dtr,Gtr,pM,l_e,Otr,Vtr,mV,Xtr,ztr,Qtr,_M,i_e,Wtr,Htr,gV,Utr,Jtr,Ytr,uM,d_e,Ktr,Ztr,hV,ear,oar,rar,bM,c_e,tar,aar,pV,nar,sar,lar,vM,f_e,iar,dar,_V,car,far,mar,m_e,gar,har,hy,jBe,uc,FM,g_e,py,par,h_e,_ar,DBe,Fr,_y,uar,bc,bar,uV,Far,Tar,bV,Mar,Ear,Car,uy,war,p_e,Aar,yar,Lar,ht,by,xar,__e,kar,Sar,vc,Rar,u_e,Bar,Par,vV,$ar,Iar,qar,b_e,Nar,jar,vy,Dar,po,Fy,Gar,v_e,Oar,Var,bn,Xar,F_e,zar,Qar,T_e,War,Har,M_e,Uar,Jar,Yar,H,TM,E_e,Kar,Zar,FV,enr,onr,rnr,MM,C_e,tnr,anr,TV,nnr,snr,lnr,EM,w_e,inr,dnr,MV,cnr,fnr,mnr,CM,A_e,gnr,hnr,EV,pnr,_nr,unr,wM,y_e,bnr,vnr,CV,Fnr,Tnr,Mnr,AM,L_e,Enr,Cnr,wV,wnr,Anr,ynr,yM,x_e,Lnr,xnr,AV,knr,Snr,Rnr,LM,k_e,Bnr,Pnr,yV,$nr,Inr,qnr,xM,S_e,Nnr,jnr,LV,Dnr,Gnr,Onr,kM,R_e,Vnr,Xnr,xV,znr,Qnr,Wnr,SM,B_e,Hnr,Unr,kV,Jnr,Ynr,Knr,RM,P_e,Znr,esr,SV,osr,rsr,tsr,BM,$_e,asr,nsr,RV,ssr,lsr,isr,PM,I_e,dsr,csr,BV,fsr,msr,gsr,$M,q_e,hsr,psr,PV,_sr,usr,bsr,IM,N_e,vsr,Fsr,$V,Tsr,Msr,Esr,qM,j_e,Csr,wsr,IV,Asr,ysr,Lsr,NM,D_e,xsr,ksr,qV,Ssr,Rsr,Bsr,jM,G_e,Psr,$sr,NV,Isr,qsr,Nsr,DM,O_e,jsr,Dsr,jV,Gsr,Osr,Vsr,GM,V_e,Xsr,zsr,DV,Qsr,Wsr,Hsr,OM,X_e,Usr,Jsr,GV,Ysr,Ksr,Zsr,VM,z_e,elr,olr,OV,rlr,tlr,alr,Q_e,nlr,slr,Ty,GBe,Fc,XM,W_e,My,llr,H_e,ilr,OBe,Tr,Ey,dlr,Tc,clr,VV,flr,mlr,XV,glr,hlr,plr,Cy,_lr,U_e,ulr,blr,vlr,pt,wy,Flr,J_e,Tlr,Mlr,Mc,Elr,Y_e,Clr,wlr,zV,Alr,ylr,Llr,K_e,xlr,klr,Ay,Slr,_o,yy,Rlr,Z_e,Blr,Plr,vn,$lr,eue,Ilr,qlr,oue,Nlr,jlr,rue,Dlr,Glr,Olr,fe,zM,tue,Vlr,Xlr,QV,zlr,Qlr,Wlr,QM,aue,Hlr,Ulr,WV,Jlr,Ylr,Klr,WM,nue,Zlr,eir,HV,oir,rir,tir,HM,sue,air,nir,UV,sir,lir,iir,UM,lue,dir,cir,JV,fir,mir,gir,JM,iue,hir,pir,YV,_ir,uir,bir,YM,due,vir,Fir,KV,Tir,Mir,Eir,KM,cue,Cir,wir,ZV,Air,yir,Lir,ZM,fue,xir,kir,eX,Sir,Rir,Bir,e4,mue,Pir,$ir,oX,Iir,qir,Nir,o4,gue,jir,Dir,rX,Gir,Oir,Vir,r4,hue,Xir,zir,tX,Qir,Wir,Hir,pue,Uir,Jir,Ly,VBe,Ec,t4,_ue,xy,Yir,uue,Kir,XBe,Mr,ky,Zir,Cc,edr,aX,odr,rdr,nX,tdr,adr,ndr,Sy,sdr,bue,ldr,idr,ddr,_t,Ry,cdr,vue,fdr,mdr,wc,gdr,Fue,hdr,pdr,sX,_dr,udr,bdr,Tue,vdr,Fdr,By,Tdr,uo,Py,Mdr,Mue,Edr,Cdr,Fn,wdr,Eue,Adr,ydr,Cue,Ldr,xdr,wue,kdr,Sdr,Rdr,$y,a4,Aue,Bdr,Pdr,lX,$dr,Idr,qdr,n4,yue,Ndr,jdr,iX,Ddr,Gdr,Odr,Lue,Vdr,Xdr,Iy,zBe,Ac,s4,xue,qy,zdr,kue,Qdr,QBe,Er,Ny,Wdr,yc,Hdr,dX,Udr,Jdr,cX,Ydr,Kdr,Zdr,jy,ecr,Sue,ocr,rcr,tcr,ut,Dy,acr,Rue,ncr,scr,Lc,lcr,Bue,icr,dcr,fX,ccr,fcr,mcr,Pue,gcr,hcr,Gy,pcr,bo,Oy,_cr,$ue,ucr,bcr,Tn,vcr,Iue,Fcr,Tcr,que,Mcr,Ecr,Nue,Ccr,wcr,Acr,J,l4,jue,ycr,Lcr,mX,xcr,kcr,Scr,i4,Due,Rcr,Bcr,gX,Pcr,$cr,Icr,d4,Gue,qcr,Ncr,hX,jcr,Dcr,Gcr,c4,Oue,Ocr,Vcr,pX,Xcr,zcr,Qcr,f4,Vue,Wcr,Hcr,_X,Ucr,Jcr,Ycr,m4,Xue,Kcr,Zcr,uX,efr,ofr,rfr,g4,zue,tfr,afr,bX,nfr,sfr,lfr,h4,Que,ifr,dfr,vX,cfr,ffr,mfr,p4,Wue,gfr,hfr,FX,pfr,_fr,ufr,_4,Hue,bfr,vfr,TX,Ffr,Tfr,Mfr,u4,Uue,Efr,Cfr,MX,wfr,Afr,yfr,b4,Jue,Lfr,xfr,EX,kfr,Sfr,Rfr,v4,Yue,Bfr,Pfr,CX,$fr,Ifr,qfr,F4,Kue,Nfr,jfr,wX,Dfr,Gfr,Ofr,T4,Zue,Vfr,Xfr,AX,zfr,Qfr,Wfr,M4,e1e,Hfr,Ufr,yX,Jfr,Yfr,Kfr,E4,o1e,Zfr,emr,LX,omr,rmr,tmr,C4,r1e,amr,nmr,xX,smr,lmr,imr,w4,t1e,dmr,cmr,kX,fmr,mmr,gmr,A4,a1e,hmr,pmr,SX,_mr,umr,bmr,n1e,vmr,Fmr,Vy,WBe,xc,y4,s1e,Xy,Tmr,l1e,Mmr,HBe,Cr,zy,Emr,kc,Cmr,RX,wmr,Amr,BX,ymr,Lmr,xmr,Qy,kmr,i1e,Smr,Rmr,Bmr,bt,Wy,Pmr,d1e,$mr,Imr,Sc,qmr,c1e,Nmr,jmr,PX,Dmr,Gmr,Omr,f1e,Vmr,Xmr,Hy,zmr,vo,Uy,Qmr,m1e,Wmr,Hmr,Mn,Umr,g1e,Jmr,Ymr,h1e,Kmr,Zmr,p1e,egr,ogr,rgr,be,L4,_1e,tgr,agr,$X,ngr,sgr,lgr,x4,u1e,igr,dgr,IX,cgr,fgr,mgr,k4,b1e,ggr,hgr,qX,pgr,_gr,ugr,S4,v1e,bgr,vgr,NX,Fgr,Tgr,Mgr,R4,F1e,Egr,Cgr,jX,wgr,Agr,ygr,B4,T1e,Lgr,xgr,DX,kgr,Sgr,Rgr,P4,M1e,Bgr,Pgr,GX,$gr,Igr,qgr,$4,E1e,Ngr,jgr,OX,Dgr,Ggr,Ogr,I4,C1e,Vgr,Xgr,VX,zgr,Qgr,Wgr,q4,w1e,Hgr,Ugr,XX,Jgr,Ygr,Kgr,A1e,Zgr,ehr,Jy,UBe,Rc,N4,y1e,Yy,ohr,L1e,rhr,JBe,wr,Ky,thr,Bc,ahr,zX,nhr,shr,QX,lhr,ihr,dhr,Zy,chr,x1e,fhr,mhr,ghr,vt,e8,hhr,k1e,phr,_hr,Pc,uhr,S1e,bhr,vhr,WX,Fhr,Thr,Mhr,R1e,Ehr,Chr,o8,whr,Fo,r8,Ahr,B1e,yhr,Lhr,En,xhr,P1e,khr,Shr,$1e,Rhr,Bhr,I1e,Phr,$hr,Ihr,V,j4,q1e,qhr,Nhr,HX,jhr,Dhr,Ghr,D4,N1e,Ohr,Vhr,UX,Xhr,zhr,Qhr,G4,j1e,Whr,Hhr,JX,Uhr,Jhr,Yhr,O4,D1e,Khr,Zhr,YX,epr,opr,rpr,V4,G1e,tpr,apr,KX,npr,spr,lpr,X4,O1e,ipr,dpr,ZX,cpr,fpr,mpr,z4,V1e,gpr,hpr,ez,ppr,_pr,upr,Q4,X1e,bpr,vpr,oz,Fpr,Tpr,Mpr,W4,z1e,Epr,Cpr,rz,wpr,Apr,ypr,H4,Q1e,Lpr,xpr,tz,kpr,Spr,Rpr,U4,W1e,Bpr,Ppr,az,$pr,Ipr,qpr,J4,H1e,Npr,jpr,nz,Dpr,Gpr,Opr,Y4,U1e,Vpr,Xpr,sz,zpr,Qpr,Wpr,K4,J1e,Hpr,Upr,lz,Jpr,Ypr,Kpr,Z4,Y1e,Zpr,e_r,iz,o_r,r_r,t_r,eE,K1e,a_r,n_r,dz,s_r,l_r,i_r,oE,Z1e,d_r,c_r,cz,f_r,m_r,g_r,rE,ebe,h_r,p_r,fz,__r,u_r,b_r,tE,obe,v_r,F_r,mz,T_r,M_r,E_r,aE,rbe,C_r,w_r,gz,A_r,y_r,L_r,nE,tbe,x_r,k_r,hz,S_r,R_r,B_r,sE,abe,P_r,$_r,pz,I_r,q_r,N_r,lE,nbe,j_r,D_r,_z,G_r,O_r,V_r,iE,sbe,X_r,z_r,uz,Q_r,W_r,H_r,dE,lbe,U_r,J_r,bz,Y_r,K_r,Z_r,cE,ibe,eur,our,vz,rur,tur,aur,dbe,nur,sur,t8,YBe,$c,fE,cbe,a8,lur,fbe,iur,KBe,Ar,n8,dur,Ic,cur,Fz,fur,mur,Tz,gur,hur,pur,s8,_ur,mbe,uur,bur,vur,Ft,l8,Fur,gbe,Tur,Mur,qc,Eur,hbe,Cur,wur,Mz,Aur,yur,Lur,pbe,xur,kur,i8,Sur,To,d8,Rur,_be,Bur,Pur,Cn,$ur,ube,Iur,qur,bbe,Nur,jur,vbe,Dur,Gur,Our,se,mE,Fbe,Vur,Xur,Ez,zur,Qur,Wur,gE,Tbe,Hur,Uur,Cz,Jur,Yur,Kur,hE,Mbe,Zur,e1r,wz,o1r,r1r,t1r,pE,Ebe,a1r,n1r,Az,s1r,l1r,i1r,_E,Cbe,d1r,c1r,yz,f1r,m1r,g1r,uE,wbe,h1r,p1r,Lz,_1r,u1r,b1r,bE,Abe,v1r,F1r,xz,T1r,M1r,E1r,vE,ybe,C1r,w1r,kz,A1r,y1r,L1r,FE,Lbe,x1r,k1r,Sz,S1r,R1r,B1r,TE,xbe,P1r,$1r,Rz,I1r,q1r,N1r,ME,kbe,j1r,D1r,Bz,G1r,O1r,V1r,EE,Sbe,X1r,z1r,Pz,Q1r,W1r,H1r,CE,Rbe,U1r,J1r,$z,Y1r,K1r,Z1r,wE,Bbe,ebr,obr,Iz,rbr,tbr,abr,AE,Pbe,nbr,sbr,qz,lbr,ibr,dbr,yE,$be,cbr,fbr,Nz,mbr,gbr,hbr,LE,Ibe,pbr,_br,jz,ubr,bbr,vbr,qbe,Fbr,Tbr,c8,ZBe,Nc,xE,Nbe,f8,Mbr,jbe,Ebr,ePe,yr,m8,Cbr,jc,wbr,Dz,Abr,ybr,Gz,Lbr,xbr,kbr,g8,Sbr,Dbe,Rbr,Bbr,Pbr,Tt,h8,$br,Gbe,Ibr,qbr,Dc,Nbr,Obe,jbr,Dbr,Oz,Gbr,Obr,Vbr,Vbe,Xbr,zbr,p8,Qbr,Mo,_8,Wbr,Xbe,Hbr,Ubr,wn,Jbr,zbe,Ybr,Kbr,Qbe,Zbr,e2r,Wbe,o2r,r2r,t2r,Hbe,kE,Ube,a2r,n2r,Vz,s2r,l2r,i2r,Jbe,d2r,c2r,u8,oPe,Gc,SE,Ybe,b8,f2r,Kbe,m2r,rPe,Lr,v8,g2r,Oc,h2r,Xz,p2r,_2r,zz,u2r,b2r,v2r,F8,F2r,Zbe,T2r,M2r,E2r,Mt,T8,C2r,e2e,w2r,A2r,Vc,y2r,o2e,L2r,x2r,Qz,k2r,S2r,R2r,r2e,B2r,P2r,M8,$2r,Eo,E8,I2r,t2e,q2r,N2r,An,j2r,a2e,D2r,G2r,n2e,O2r,V2r,s2e,X2r,z2r,Q2r,Y,RE,l2e,W2r,H2r,Wz,U2r,J2r,Y2r,BE,i2e,K2r,Z2r,Hz,evr,ovr,rvr,PE,d2e,tvr,avr,Uz,nvr,svr,lvr,$E,c2e,ivr,dvr,Jz,cvr,fvr,mvr,IE,f2e,gvr,hvr,Yz,pvr,_vr,uvr,qE,m2e,bvr,vvr,Kz,Fvr,Tvr,Mvr,NE,g2e,Evr,Cvr,Zz,wvr,Avr,yvr,jE,h2e,Lvr,xvr,eQ,kvr,Svr,Rvr,DE,p2e,Bvr,Pvr,oQ,$vr,Ivr,qvr,GE,_2e,Nvr,jvr,rQ,Dvr,Gvr,Ovr,OE,u2e,Vvr,Xvr,tQ,zvr,Qvr,Wvr,VE,b2e,Hvr,Uvr,aQ,Jvr,Yvr,Kvr,XE,v2e,Zvr,eFr,nQ,oFr,rFr,tFr,zE,F2e,aFr,nFr,sQ,sFr,lFr,iFr,QE,T2e,dFr,cFr,lQ,fFr,mFr,gFr,WE,M2e,hFr,pFr,iQ,_Fr,uFr,bFr,HE,E2e,vFr,FFr,dQ,TFr,MFr,EFr,UE,C2e,CFr,wFr,cQ,AFr,yFr,LFr,JE,w2e,xFr,kFr,fQ,SFr,RFr,BFr,YE,A2e,PFr,$Fr,mQ,IFr,qFr,NFr,y2e,jFr,DFr,C8,tPe,Xc,KE,L2e,w8,GFr,x2e,OFr,aPe,xr,A8,VFr,zc,XFr,gQ,zFr,QFr,hQ,WFr,HFr,UFr,y8,JFr,k2e,YFr,KFr,ZFr,Et,L8,eTr,S2e,oTr,rTr,Qc,tTr,R2e,aTr,nTr,pQ,sTr,lTr,iTr,B2e,dTr,cTr,x8,fTr,Co,k8,mTr,P2e,gTr,hTr,yn,pTr,$2e,_Tr,uTr,I2e,bTr,vTr,q2e,FTr,TTr,MTr,K,ZE,N2e,ETr,CTr,_Q,wTr,ATr,yTr,e5,j2e,LTr,xTr,uQ,kTr,STr,RTr,o5,D2e,BTr,PTr,bQ,$Tr,ITr,qTr,r5,G2e,NTr,jTr,vQ,DTr,GTr,OTr,t5,O2e,VTr,XTr,FQ,zTr,QTr,WTr,a5,V2e,HTr,UTr,TQ,JTr,YTr,KTr,n5,X2e,ZTr,eMr,MQ,oMr,rMr,tMr,s5,z2e,aMr,nMr,EQ,sMr,lMr,iMr,l5,Q2e,dMr,cMr,CQ,fMr,mMr,gMr,i5,W2e,hMr,pMr,wQ,_Mr,uMr,bMr,d5,H2e,vMr,FMr,AQ,TMr,MMr,EMr,c5,U2e,CMr,wMr,yQ,AMr,yMr,LMr,f5,J2e,xMr,kMr,LQ,SMr,RMr,BMr,m5,Y2e,PMr,$Mr,xQ,IMr,qMr,NMr,g5,K2e,jMr,DMr,kQ,GMr,OMr,VMr,h5,Z2e,XMr,zMr,SQ,QMr,WMr,HMr,p5,eve,UMr,JMr,RQ,YMr,KMr,ZMr,_5,ove,e4r,o4r,BQ,r4r,t4r,a4r,u5,rve,n4r,s4r,PQ,l4r,i4r,d4r,b5,tve,c4r,f4r,$Q,m4r,g4r,h4r,ave,p4r,_4r,S8,nPe,Wc,v5,nve,R8,u4r,sve,b4r,sPe,kr,B8,v4r,Hc,F4r,IQ,T4r,M4r,qQ,E4r,C4r,w4r,P8,A4r,lve,y4r,L4r,x4r,Ct,$8,k4r,ive,S4r,R4r,Uc,B4r,dve,P4r,$4r,NQ,I4r,q4r,N4r,cve,j4r,D4r,I8,G4r,wo,q8,O4r,fve,V4r,X4r,Ln,z4r,mve,Q4r,W4r,gve,H4r,U4r,hve,J4r,Y4r,K4r,pve,F5,_ve,Z4r,eEr,jQ,oEr,rEr,tEr,uve,aEr,nEr,N8,lPe,Jc,T5,bve,j8,sEr,vve,lEr,iPe,Sr,D8,iEr,Yc,dEr,DQ,cEr,fEr,GQ,mEr,gEr,hEr,G8,pEr,Fve,_Er,uEr,bEr,wt,O8,vEr,Tve,FEr,TEr,Kc,MEr,Mve,EEr,CEr,OQ,wEr,AEr,yEr,Eve,LEr,xEr,V8,kEr,Ao,X8,SEr,Cve,REr,BEr,xn,PEr,wve,$Er,IEr,Ave,qEr,NEr,yve,jEr,DEr,GEr,Lve,M5,xve,OEr,VEr,VQ,XEr,zEr,QEr,kve,WEr,HEr,z8,dPe,Zc,E5,Sve,Q8,UEr,Rve,JEr,cPe,Rr,W8,YEr,ef,KEr,XQ,ZEr,e5r,zQ,o5r,r5r,t5r,H8,a5r,Bve,n5r,s5r,l5r,At,U8,i5r,Pve,d5r,c5r,of,f5r,$ve,m5r,g5r,QQ,h5r,p5r,_5r,Ive,u5r,b5r,J8,v5r,yo,Y8,F5r,qve,T5r,M5r,kn,E5r,Nve,C5r,w5r,jve,A5r,y5r,Dve,L5r,x5r,k5r,z,C5,Gve,S5r,R5r,WQ,B5r,P5r,$5r,w5,Ove,I5r,q5r,HQ,N5r,j5r,D5r,A5,Vve,G5r,O5r,UQ,V5r,X5r,z5r,y5,Xve,Q5r,W5r,JQ,H5r,U5r,J5r,L5,zve,Y5r,K5r,YQ,Z5r,e3r,o3r,x5,Qve,r3r,t3r,KQ,a3r,n3r,s3r,k5,Wve,l3r,i3r,ZQ,d3r,c3r,f3r,S5,Hve,m3r,g3r,eW,h3r,p3r,_3r,R5,Uve,u3r,b3r,oW,v3r,F3r,T3r,B5,Jve,M3r,E3r,rW,C3r,w3r,A3r,P5,Yve,y3r,L3r,tW,x3r,k3r,S3r,$5,Kve,R3r,B3r,aW,P3r,$3r,I3r,I5,Zve,q3r,N3r,nW,j3r,D3r,G3r,q5,eFe,O3r,V3r,sW,X3r,z3r,Q3r,N5,oFe,W3r,H3r,lW,U3r,J3r,Y3r,j5,rFe,K3r,Z3r,iW,eCr,oCr,rCr,D5,tFe,tCr,aCr,dW,nCr,sCr,lCr,G5,aFe,iCr,dCr,cW,cCr,fCr,mCr,O5,nFe,gCr,hCr,fW,pCr,_Cr,uCr,V5,sFe,bCr,vCr,mW,FCr,TCr,MCr,X5,lFe,ECr,CCr,gW,wCr,ACr,yCr,z5,iFe,LCr,xCr,hW,kCr,SCr,RCr,Q5,dFe,BCr,PCr,pW,$Cr,ICr,qCr,W5,cFe,NCr,jCr,_W,DCr,GCr,OCr,H5,fFe,VCr,XCr,uW,zCr,QCr,WCr,mFe,HCr,UCr,K8,fPe,rf,U5,gFe,Z8,JCr,hFe,YCr,mPe,Br,eL,KCr,tf,ZCr,bW,ewr,owr,vW,rwr,twr,awr,oL,nwr,pFe,swr,lwr,iwr,yt,rL,dwr,_Fe,cwr,fwr,af,mwr,uFe,gwr,hwr,FW,pwr,_wr,uwr,bFe,bwr,vwr,tL,Fwr,Lo,aL,Twr,vFe,Mwr,Ewr,Sn,Cwr,FFe,wwr,Awr,TFe,ywr,Lwr,MFe,xwr,kwr,Swr,ca,J5,EFe,Rwr,Bwr,TW,Pwr,$wr,Iwr,Y5,CFe,qwr,Nwr,MW,jwr,Dwr,Gwr,K5,wFe,Owr,Vwr,EW,Xwr,zwr,Qwr,Z5,AFe,Wwr,Hwr,CW,Uwr,Jwr,Ywr,e3,yFe,Kwr,Zwr,wW,e6r,o6r,r6r,LFe,t6r,a6r,nL,gPe,nf,o3,xFe,sL,n6r,kFe,s6r,hPe,Pr,lL,l6r,sf,i6r,AW,d6r,c6r,yW,f6r,m6r,g6r,iL,h6r,SFe,p6r,_6r,u6r,Lt,dL,b6r,RFe,v6r,F6r,lf,T6r,BFe,M6r,E6r,LW,C6r,w6r,A6r,PFe,y6r,L6r,cL,x6r,xo,fL,k6r,$Fe,S6r,R6r,Rn,B6r,IFe,P6r,$6r,qFe,I6r,q6r,NFe,N6r,j6r,D6r,me,r3,jFe,G6r,O6r,xW,V6r,X6r,z6r,t3,DFe,Q6r,W6r,kW,H6r,U6r,J6r,a3,GFe,Y6r,K6r,SW,Z6r,eAr,oAr,n3,OFe,rAr,tAr,RW,aAr,nAr,sAr,s3,VFe,lAr,iAr,BW,dAr,cAr,fAr,l3,XFe,mAr,gAr,PW,hAr,pAr,_Ar,i3,zFe,uAr,bAr,$W,vAr,FAr,TAr,d3,QFe,MAr,EAr,IW,CAr,wAr,AAr,c3,WFe,yAr,LAr,qW,xAr,kAr,SAr,f3,HFe,RAr,BAr,NW,PAr,$Ar,IAr,m3,UFe,qAr,NAr,jW,jAr,DAr,GAr,g3,JFe,OAr,VAr,DW,XAr,zAr,QAr,YFe,WAr,HAr,mL,pPe,df,h3,KFe,gL,UAr,ZFe,JAr,_Pe,$r,hL,YAr,cf,KAr,GW,ZAr,e0r,OW,o0r,r0r,t0r,pL,a0r,eTe,n0r,s0r,l0r,xt,_L,i0r,oTe,d0r,c0r,ff,f0r,rTe,m0r,g0r,VW,h0r,p0r,_0r,tTe,u0r,b0r,uL,v0r,ko,bL,F0r,aTe,T0r,M0r,Bn,E0r,nTe,C0r,w0r,sTe,A0r,y0r,lTe,L0r,x0r,k0r,ve,p3,iTe,S0r,R0r,XW,B0r,P0r,$0r,_3,dTe,I0r,q0r,zW,N0r,j0r,D0r,u3,cTe,G0r,O0r,QW,V0r,X0r,z0r,b3,fTe,Q0r,W0r,WW,H0r,U0r,J0r,v3,mTe,Y0r,K0r,HW,Z0r,eyr,oyr,F3,gTe,ryr,tyr,UW,ayr,nyr,syr,T3,hTe,lyr,iyr,JW,dyr,cyr,fyr,M3,pTe,myr,gyr,YW,hyr,pyr,_yr,E3,_Te,uyr,byr,KW,vyr,Fyr,Tyr,C3,uTe,Myr,Eyr,ZW,Cyr,wyr,Ayr,bTe,yyr,Lyr,vL,uPe,mf,w3,vTe,FL,xyr,FTe,kyr,bPe,Ir,TL,Syr,gf,Ryr,eH,Byr,Pyr,oH,$yr,Iyr,qyr,ML,Nyr,TTe,jyr,Dyr,Gyr,kt,EL,Oyr,MTe,Vyr,Xyr,hf,zyr,ETe,Qyr,Wyr,rH,Hyr,Uyr,Jyr,CTe,Yyr,Kyr,CL,Zyr,So,wL,e8r,wTe,o8r,r8r,Pn,t8r,ATe,a8r,n8r,yTe,s8r,l8r,LTe,i8r,d8r,c8r,Ee,A3,xTe,f8r,m8r,tH,g8r,h8r,p8r,y3,kTe,_8r,u8r,aH,b8r,v8r,F8r,L3,STe,T8r,M8r,nH,E8r,C8r,w8r,x3,RTe,A8r,y8r,sH,L8r,x8r,k8r,k3,BTe,S8r,R8r,lH,B8r,P8r,$8r,S3,PTe,I8r,q8r,iH,N8r,j8r,D8r,R3,$Te,G8r,O8r,dH,V8r,X8r,z8r,B3,ITe,Q8r,W8r,cH,H8r,U8r,J8r,P3,qTe,Y8r,K8r,fH,Z8r,eLr,oLr,NTe,rLr,tLr,AL,vPe,pf,$3,jTe,yL,aLr,DTe,nLr,FPe,qr,LL,sLr,_f,lLr,mH,iLr,dLr,gH,cLr,fLr,mLr,xL,gLr,GTe,hLr,pLr,_Lr,St,kL,uLr,OTe,bLr,vLr,uf,FLr,VTe,TLr,MLr,hH,ELr,CLr,wLr,XTe,ALr,yLr,SL,LLr,Ro,RL,xLr,zTe,kLr,SLr,$n,RLr,QTe,BLr,PLr,WTe,$Lr,ILr,HTe,qLr,NLr,jLr,Fe,I3,UTe,DLr,GLr,pH,OLr,VLr,XLr,q3,JTe,zLr,QLr,_H,WLr,HLr,ULr,N3,YTe,JLr,YLr,uH,KLr,ZLr,e7r,j3,KTe,o7r,r7r,bH,t7r,a7r,n7r,D3,ZTe,s7r,l7r,vH,i7r,d7r,c7r,G3,eMe,f7r,m7r,FH,g7r,h7r,p7r,O3,oMe,_7r,u7r,TH,b7r,v7r,F7r,V3,rMe,T7r,M7r,MH,E7r,C7r,w7r,X3,tMe,A7r,y7r,EH,L7r,x7r,k7r,z3,aMe,S7r,R7r,CH,B7r,P7r,$7r,nMe,I7r,q7r,BL,TPe,bf,Q3,sMe,PL,N7r,lMe,j7r,MPe,Nr,$L,D7r,vf,G7r,wH,O7r,V7r,AH,X7r,z7r,Q7r,IL,W7r,iMe,H7r,U7r,J7r,Rt,qL,Y7r,dMe,K7r,Z7r,Ff,e9r,cMe,o9r,r9r,yH,t9r,a9r,n9r,fMe,s9r,l9r,NL,i9r,Bo,jL,d9r,mMe,c9r,f9r,In,m9r,gMe,g9r,h9r,hMe,p9r,_9r,pMe,u9r,b9r,v9r,Te,W3,_Me,F9r,T9r,LH,M9r,E9r,C9r,H3,uMe,w9r,A9r,xH,y9r,L9r,x9r,U3,bMe,k9r,S9r,kH,R9r,B9r,P9r,J3,vMe,$9r,I9r,SH,q9r,N9r,j9r,Y3,FMe,D9r,G9r,RH,O9r,V9r,X9r,K3,TMe,z9r,Q9r,BH,W9r,H9r,U9r,Z3,MMe,J9r,Y9r,PH,K9r,Z9r,exr,eC,EMe,oxr,rxr,$H,txr,axr,nxr,oC,CMe,sxr,lxr,IH,ixr,dxr,cxr,rC,wMe,fxr,mxr,qH,gxr,hxr,pxr,AMe,_xr,uxr,DL,EPe,Tf,tC,yMe,GL,bxr,LMe,vxr,CPe,jr,OL,Fxr,Mf,Txr,NH,Mxr,Exr,jH,Cxr,wxr,Axr,VL,yxr,xMe,Lxr,xxr,kxr,Bt,XL,Sxr,kMe,Rxr,Bxr,Ef,Pxr,SMe,$xr,Ixr,DH,qxr,Nxr,jxr,RMe,Dxr,Gxr,zL,Oxr,Po,QL,Vxr,BMe,Xxr,zxr,qn,Qxr,PMe,Wxr,Hxr,$Me,Uxr,Jxr,IMe,Yxr,Kxr,Zxr,Be,aC,qMe,ekr,okr,GH,rkr,tkr,akr,nC,NMe,nkr,skr,OH,lkr,ikr,dkr,sC,jMe,ckr,fkr,VH,mkr,gkr,hkr,lC,DMe,pkr,_kr,XH,ukr,bkr,vkr,iC,GMe,Fkr,Tkr,zH,Mkr,Ekr,Ckr,dC,OMe,wkr,Akr,QH,ykr,Lkr,xkr,cC,VMe,kkr,Skr,WH,Rkr,Bkr,Pkr,fC,XMe,$kr,Ikr,HH,qkr,Nkr,jkr,zMe,Dkr,Gkr,WL,wPe,Cf,mC,QMe,HL,Okr,WMe,Vkr,APe,Dr,UL,Xkr,wf,zkr,UH,Qkr,Wkr,JH,Hkr,Ukr,Jkr,JL,Ykr,HMe,Kkr,Zkr,eSr,Pt,YL,oSr,UMe,rSr,tSr,Af,aSr,JMe,nSr,sSr,YH,lSr,iSr,dSr,YMe,cSr,fSr,KL,mSr,$o,ZL,gSr,KMe,hSr,pSr,Nn,_Sr,ZMe,uSr,bSr,e4e,vSr,FSr,o4e,TSr,MSr,ESr,Pe,gC,r4e,CSr,wSr,KH,ASr,ySr,LSr,hC,t4e,xSr,kSr,ZH,SSr,RSr,BSr,pC,a4e,PSr,$Sr,eU,ISr,qSr,NSr,_C,n4e,jSr,DSr,oU,GSr,OSr,VSr,uC,s4e,XSr,zSr,rU,QSr,WSr,HSr,bC,l4e,USr,JSr,tU,YSr,KSr,ZSr,vC,i4e,eRr,oRr,aU,rRr,tRr,aRr,FC,d4e,nRr,sRr,nU,lRr,iRr,dRr,c4e,cRr,fRr,e7,yPe,yf,TC,f4e,o7,mRr,m4e,gRr,LPe,Gr,r7,hRr,Lf,pRr,sU,_Rr,uRr,lU,bRr,vRr,FRr,t7,TRr,g4e,MRr,ERr,CRr,$t,a7,wRr,h4e,ARr,yRr,xf,LRr,p4e,xRr,kRr,iU,SRr,RRr,BRr,_4e,PRr,$Rr,n7,IRr,Io,s7,qRr,u4e,NRr,jRr,jn,DRr,b4e,GRr,ORr,v4e,VRr,XRr,F4e,zRr,QRr,WRr,T4e,MC,M4e,HRr,URr,dU,JRr,YRr,KRr,E4e,ZRr,eBr,l7,xPe,kf,EC,C4e,i7,oBr,w4e,rBr,kPe,Or,d7,tBr,Sf,aBr,cU,nBr,sBr,fU,lBr,iBr,dBr,c7,cBr,A4e,fBr,mBr,gBr,It,f7,hBr,y4e,pBr,_Br,Rf,uBr,L4e,bBr,vBr,mU,FBr,TBr,MBr,x4e,EBr,CBr,m7,wBr,qo,g7,ABr,k4e,yBr,LBr,Dn,xBr,S4e,kBr,SBr,R4e,RBr,BBr,B4e,PBr,$Br,IBr,h7,CC,P4e,qBr,NBr,gU,jBr,DBr,GBr,wC,$4e,OBr,VBr,hU,XBr,zBr,QBr,I4e,WBr,HBr,p7,SPe,Bf,AC,q4e,_7,UBr,N4e,JBr,RPe,Vr,u7,YBr,Pf,KBr,pU,ZBr,ePr,_U,oPr,rPr,tPr,b7,aPr,j4e,nPr,sPr,lPr,qt,v7,iPr,D4e,dPr,cPr,$f,fPr,G4e,mPr,gPr,uU,hPr,pPr,_Pr,O4e,uPr,bPr,F7,vPr,No,T7,FPr,V4e,TPr,MPr,Gn,EPr,X4e,CPr,wPr,z4e,APr,yPr,Q4e,LPr,xPr,kPr,W4e,yC,H4e,SPr,RPr,bU,BPr,PPr,$Pr,U4e,IPr,qPr,M7,BPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Rw=new X({}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new NPr({props:{warning:!0,$$slots:{default:[x6t]},$$scope:{ctx:qf}}}),Pw=new X({}),$w=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/configuration_auto.py#L560"}}),Nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/configuration_auto.py#L583"}}),jw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Dw=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/configuration_auto.py#L705"}}),Gw=new X({}),Ow=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/tokenization_auto.py#L358"}}),zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_1/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/tokenization_auto.py#L372"}}),Qw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Ww=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/tokenization_auto.py#L568"}}),Hw=new X({}),Uw=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),Kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_1/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),qh=new NPr({props:{$$slots:{default:[k6t]},$$scope:{ctx:qf}}}),Zw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),e6=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),o6=new X({}),r6=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/processing_auto.py#L70"}}),n6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/processing_auto.py#L84"}}),Hh=new NPr({props:{$$slots:{default:[S6t]},$$scope:{ctx:qf}}}),s6=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),l6=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/processing_auto.py#L237"}}),i6=new X({}),d6=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L714"}}),f6=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),g6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p6=new X({}),_6=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L721"}}),b6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),F6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M6=new X({}),E6=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L736"}}),w6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x6=new X({}),k6=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L743"}}),R6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),P6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new X({}),q6=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L750"}}),j6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),G6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V6=new X({}),X6=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L759"}}),Q6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),H6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new X({}),Y6=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L793"}}),Z6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),oA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L800"}}),sA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),iA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),fA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L786"}}),gA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),pA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uA=new X({}),bA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L768"}}),FA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),MA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L775"}}),yA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),xA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),RA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L809"}}),PA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),IA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),jA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L848"}}),GA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),VA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),QA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L855"}}),HA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),JA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L878"}}),o0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),t0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L862"}}),i0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),c0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m0=new X({}),g0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L869"}}),p0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),_0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),u0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),T0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L887"}}),E0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),w0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L894"}}),k0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),R0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L841"}}),q0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),j0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L816"}}),X0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Q0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L823"}}),Y0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Z0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),ey=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_auto.py#L832"}}),ay=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),ny=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),sy=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),fy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),my=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),gy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),py=new X({}),_y=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),by=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),yy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Py=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Dy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Oy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Uy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),Jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),e8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),r8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),l8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),d8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f8=new X({}),m8=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),h8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),p8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),_8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),u8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b8=new X({}),v8=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),T8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),E8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),L8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),k8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R8=new X({}),B8=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),$8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),q8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j8=new X({}),D8=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),O8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),X8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q8=new X({}),W8=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),U8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Y8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z8=new X({}),eL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),rL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),dL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),fL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),mL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),_L=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),uL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),bL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),TL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),EL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),wL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),kL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),RL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),qL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),jL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),XL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),QL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),YL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),ZL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),a7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),s7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i7=new X({}),d7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),f7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),g7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_7=new X({}),u7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),v7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),T7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_1/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_1/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_1/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),Ni=o("Auto Classes"),Nf=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),Lw=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Gi=o("Instantiating one of "),On=a("a"),xw=o("AutoConfig"),Vn=o(", "),Xn=a("a"),kw=o("AutoModel"),Oi=o(`, and
`),zn=a("a"),Sw=o("AutoTokenizer"),Vi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),T9=o("will create a model that is an instance of "),Xi=a("a"),M9=o("BertModel"),E9=o("."),zo=l(),Ga=a("p"),C9=o("There is one class of "),Gf=a("code"),w9=o("AutoModel"),zIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),RRe=l(),zi=a("h2"),Of=a("a"),fY=a("span"),f(Rw.$$.fragment),QIe=l(),mY=a("span"),WIe=o("Extending the Auto Classes"),BRe=l(),Qn=a("p"),HIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gY=a("code"),UIe=o("NewModel"),JIe=o(", make sure you have a "),hY=a("code"),YIe=o("NewModelConfig"),KIe=o(` then you can add those to the auto
classes like this:`),PRe=l(),f(Bw.$$.fragment),$Re=l(),A9=a("p"),ZIe=o("You will then be able to use the auto classes like you would usually do!"),IRe=l(),f(Vf.$$.fragment),qRe=l(),Qi=a("h2"),Xf=a("a"),pY=a("span"),f(Pw.$$.fragment),eqe=l(),_Y=a("span"),oqe=o("AutoConfig"),NRe=l(),Qo=a("div"),f($w.$$.fragment),rqe=l(),Iw=a("p"),tqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),y9=a("a"),aqe=o("from_pretrained()"),nqe=o(" class method."),sqe=l(),qw=a("p"),lqe=o("This class cannot be instantiated directly using "),uY=a("code"),iqe=o("__init__()"),dqe=o(" (throws an error)."),cqe=l(),mo=a("div"),f(Nw.$$.fragment),fqe=l(),bY=a("p"),mqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),gqe=l(),Wi=a("p"),hqe=o("The configuration class to instantiate is selected based on the "),vY=a("code"),pqe=o("model_type"),_qe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FY=a("code"),uqe=o("pretrained_model_name_or_path"),bqe=o(":"),vqe=l(),v=a("ul"),zf=a("li"),TY=a("strong"),Fqe=o("albert"),Tqe=o(" \u2014 "),L9=a("a"),Mqe=o("AlbertConfig"),Eqe=o(" (ALBERT model)"),Cqe=l(),Qf=a("li"),MY=a("strong"),wqe=o("bart"),Aqe=o(" \u2014 "),x9=a("a"),yqe=o("BartConfig"),Lqe=o(" (BART model)"),xqe=l(),Wf=a("li"),EY=a("strong"),kqe=o("beit"),Sqe=o(" \u2014 "),k9=a("a"),Rqe=o("BeitConfig"),Bqe=o(" (BEiT model)"),Pqe=l(),Hf=a("li"),CY=a("strong"),$qe=o("bert"),Iqe=o(" \u2014 "),S9=a("a"),qqe=o("BertConfig"),Nqe=o(" (BERT model)"),jqe=l(),Uf=a("li"),wY=a("strong"),Dqe=o("bert-generation"),Gqe=o(" \u2014 "),R9=a("a"),Oqe=o("BertGenerationConfig"),Vqe=o(" (Bert Generation model)"),Xqe=l(),Jf=a("li"),AY=a("strong"),zqe=o("big_bird"),Qqe=o(" \u2014 "),B9=a("a"),Wqe=o("BigBirdConfig"),Hqe=o(" (BigBird model)"),Uqe=l(),Yf=a("li"),yY=a("strong"),Jqe=o("bigbird_pegasus"),Yqe=o(" \u2014 "),P9=a("a"),Kqe=o("BigBirdPegasusConfig"),Zqe=o(" (BigBirdPegasus model)"),eNe=l(),Kf=a("li"),LY=a("strong"),oNe=o("blenderbot"),rNe=o(" \u2014 "),$9=a("a"),tNe=o("BlenderbotConfig"),aNe=o(" (Blenderbot model)"),nNe=l(),Zf=a("li"),xY=a("strong"),sNe=o("blenderbot-small"),lNe=o(" \u2014 "),I9=a("a"),iNe=o("BlenderbotSmallConfig"),dNe=o(" (BlenderbotSmall model)"),cNe=l(),em=a("li"),kY=a("strong"),fNe=o("camembert"),mNe=o(" \u2014 "),q9=a("a"),gNe=o("CamembertConfig"),hNe=o(" (CamemBERT model)"),pNe=l(),om=a("li"),SY=a("strong"),_Ne=o("canine"),uNe=o(" \u2014 "),N9=a("a"),bNe=o("CanineConfig"),vNe=o(" (Canine model)"),FNe=l(),rm=a("li"),RY=a("strong"),TNe=o("clip"),MNe=o(" \u2014 "),j9=a("a"),ENe=o("CLIPConfig"),CNe=o(" (CLIP model)"),wNe=l(),tm=a("li"),BY=a("strong"),ANe=o("convbert"),yNe=o(" \u2014 "),D9=a("a"),LNe=o("ConvBertConfig"),xNe=o(" (ConvBERT model)"),kNe=l(),am=a("li"),PY=a("strong"),SNe=o("convnext"),RNe=o(" \u2014 "),G9=a("a"),BNe=o("ConvNextConfig"),PNe=o(" (ConvNext model)"),$Ne=l(),nm=a("li"),$Y=a("strong"),INe=o("ctrl"),qNe=o(" \u2014 "),O9=a("a"),NNe=o("CTRLConfig"),jNe=o(" (CTRL model)"),DNe=l(),sm=a("li"),IY=a("strong"),GNe=o("data2vec-audio"),ONe=o(" \u2014 "),V9=a("a"),VNe=o("Data2VecAudioConfig"),XNe=o(" (Data2VecAudio model)"),zNe=l(),lm=a("li"),qY=a("strong"),QNe=o("data2vec-text"),WNe=o(" \u2014 "),X9=a("a"),HNe=o("Data2VecTextConfig"),UNe=o(" (Data2VecText model)"),JNe=l(),im=a("li"),NY=a("strong"),YNe=o("data2vec-vision"),KNe=o(" \u2014 "),z9=a("a"),ZNe=o("Data2VecVisionConfig"),eje=o(" (Data2VecVision model)"),oje=l(),dm=a("li"),jY=a("strong"),rje=o("deberta"),tje=o(" \u2014 "),Q9=a("a"),aje=o("DebertaConfig"),nje=o(" (DeBERTa model)"),sje=l(),cm=a("li"),DY=a("strong"),lje=o("deberta-v2"),ije=o(" \u2014 "),W9=a("a"),dje=o("DebertaV2Config"),cje=o(" (DeBERTa-v2 model)"),fje=l(),fm=a("li"),GY=a("strong"),mje=o("decision_transformer"),gje=o(" \u2014 "),H9=a("a"),hje=o("DecisionTransformerConfig"),pje=o(" (Decision Transformer model)"),_je=l(),mm=a("li"),OY=a("strong"),uje=o("deit"),bje=o(" \u2014 "),U9=a("a"),vje=o("DeiTConfig"),Fje=o(" (DeiT model)"),Tje=l(),gm=a("li"),VY=a("strong"),Mje=o("detr"),Eje=o(" \u2014 "),J9=a("a"),Cje=o("DetrConfig"),wje=o(" (DETR model)"),Aje=l(),hm=a("li"),XY=a("strong"),yje=o("distilbert"),Lje=o(" \u2014 "),Y9=a("a"),xje=o("DistilBertConfig"),kje=o(" (DistilBERT model)"),Sje=l(),pm=a("li"),zY=a("strong"),Rje=o("dpr"),Bje=o(" \u2014 "),K9=a("a"),Pje=o("DPRConfig"),$je=o(" (DPR model)"),Ije=l(),_m=a("li"),QY=a("strong"),qje=o("dpt"),Nje=o(" \u2014 "),Z9=a("a"),jje=o("DPTConfig"),Dje=o(" (DPT model)"),Gje=l(),um=a("li"),WY=a("strong"),Oje=o("electra"),Vje=o(" \u2014 "),ex=a("a"),Xje=o("ElectraConfig"),zje=o(" (ELECTRA model)"),Qje=l(),bm=a("li"),HY=a("strong"),Wje=o("encoder-decoder"),Hje=o(" \u2014 "),ox=a("a"),Uje=o("EncoderDecoderConfig"),Jje=o(" (Encoder decoder model)"),Yje=l(),vm=a("li"),UY=a("strong"),Kje=o("flaubert"),Zje=o(" \u2014 "),rx=a("a"),eDe=o("FlaubertConfig"),oDe=o(" (FlauBERT model)"),rDe=l(),Fm=a("li"),JY=a("strong"),tDe=o("fnet"),aDe=o(" \u2014 "),tx=a("a"),nDe=o("FNetConfig"),sDe=o(" (FNet model)"),lDe=l(),Tm=a("li"),YY=a("strong"),iDe=o("fsmt"),dDe=o(" \u2014 "),ax=a("a"),cDe=o("FSMTConfig"),fDe=o(" (FairSeq Machine-Translation model)"),mDe=l(),Mm=a("li"),KY=a("strong"),gDe=o("funnel"),hDe=o(" \u2014 "),nx=a("a"),pDe=o("FunnelConfig"),_De=o(" (Funnel Transformer model)"),uDe=l(),Em=a("li"),ZY=a("strong"),bDe=o("glpn"),vDe=o(" \u2014 "),sx=a("a"),FDe=o("GLPNConfig"),TDe=o(" (GLPN model)"),MDe=l(),Cm=a("li"),eK=a("strong"),EDe=o("gpt2"),CDe=o(" \u2014 "),lx=a("a"),wDe=o("GPT2Config"),ADe=o(" (OpenAI GPT-2 model)"),yDe=l(),wm=a("li"),oK=a("strong"),LDe=o("gpt_neo"),xDe=o(" \u2014 "),ix=a("a"),kDe=o("GPTNeoConfig"),SDe=o(" (GPT Neo model)"),RDe=l(),Am=a("li"),rK=a("strong"),BDe=o("gptj"),PDe=o(" \u2014 "),dx=a("a"),$De=o("GPTJConfig"),IDe=o(" (GPT-J model)"),qDe=l(),ym=a("li"),tK=a("strong"),NDe=o("hubert"),jDe=o(" \u2014 "),cx=a("a"),DDe=o("HubertConfig"),GDe=o(" (Hubert model)"),ODe=l(),Lm=a("li"),aK=a("strong"),VDe=o("ibert"),XDe=o(" \u2014 "),fx=a("a"),zDe=o("IBertConfig"),QDe=o(" (I-BERT model)"),WDe=l(),xm=a("li"),nK=a("strong"),HDe=o("imagegpt"),UDe=o(" \u2014 "),mx=a("a"),JDe=o("ImageGPTConfig"),YDe=o(" (ImageGPT model)"),KDe=l(),km=a("li"),sK=a("strong"),ZDe=o("layoutlm"),eGe=o(" \u2014 "),gx=a("a"),oGe=o("LayoutLMConfig"),rGe=o(" (LayoutLM model)"),tGe=l(),Sm=a("li"),lK=a("strong"),aGe=o("layoutlmv2"),nGe=o(" \u2014 "),hx=a("a"),sGe=o("LayoutLMv2Config"),lGe=o(" (LayoutLMv2 model)"),iGe=l(),Rm=a("li"),iK=a("strong"),dGe=o("led"),cGe=o(" \u2014 "),px=a("a"),fGe=o("LEDConfig"),mGe=o(" (LED model)"),gGe=l(),Bm=a("li"),dK=a("strong"),hGe=o("longformer"),pGe=o(" \u2014 "),_x=a("a"),_Ge=o("LongformerConfig"),uGe=o(" (Longformer model)"),bGe=l(),Pm=a("li"),cK=a("strong"),vGe=o("luke"),FGe=o(" \u2014 "),ux=a("a"),TGe=o("LukeConfig"),MGe=o(" (LUKE model)"),EGe=l(),$m=a("li"),fK=a("strong"),CGe=o("lxmert"),wGe=o(" \u2014 "),bx=a("a"),AGe=o("LxmertConfig"),yGe=o(" (LXMERT model)"),LGe=l(),Im=a("li"),mK=a("strong"),xGe=o("m2m_100"),kGe=o(" \u2014 "),vx=a("a"),SGe=o("M2M100Config"),RGe=o(" (M2M100 model)"),BGe=l(),qm=a("li"),gK=a("strong"),PGe=o("marian"),$Ge=o(" \u2014 "),Fx=a("a"),IGe=o("MarianConfig"),qGe=o(" (Marian model)"),NGe=l(),Nm=a("li"),hK=a("strong"),jGe=o("maskformer"),DGe=o(" \u2014 "),Tx=a("a"),GGe=o("MaskFormerConfig"),OGe=o(" (MaskFormer model)"),VGe=l(),jm=a("li"),pK=a("strong"),XGe=o("mbart"),zGe=o(" \u2014 "),Mx=a("a"),QGe=o("MBartConfig"),WGe=o(" (mBART model)"),HGe=l(),Dm=a("li"),_K=a("strong"),UGe=o("megatron-bert"),JGe=o(" \u2014 "),Ex=a("a"),YGe=o("MegatronBertConfig"),KGe=o(" (MegatronBert model)"),ZGe=l(),Gm=a("li"),uK=a("strong"),eOe=o("mobilebert"),oOe=o(" \u2014 "),Cx=a("a"),rOe=o("MobileBertConfig"),tOe=o(" (MobileBERT model)"),aOe=l(),Om=a("li"),bK=a("strong"),nOe=o("mpnet"),sOe=o(" \u2014 "),wx=a("a"),lOe=o("MPNetConfig"),iOe=o(" (MPNet model)"),dOe=l(),Vm=a("li"),vK=a("strong"),cOe=o("mt5"),fOe=o(" \u2014 "),Ax=a("a"),mOe=o("MT5Config"),gOe=o(" (mT5 model)"),hOe=l(),Xm=a("li"),FK=a("strong"),pOe=o("nystromformer"),_Oe=o(" \u2014 "),yx=a("a"),uOe=o("NystromformerConfig"),bOe=o(" (Nystromformer model)"),vOe=l(),zm=a("li"),TK=a("strong"),FOe=o("openai-gpt"),TOe=o(" \u2014 "),Lx=a("a"),MOe=o("OpenAIGPTConfig"),EOe=o(" (OpenAI GPT model)"),COe=l(),Qm=a("li"),MK=a("strong"),wOe=o("pegasus"),AOe=o(" \u2014 "),xx=a("a"),yOe=o("PegasusConfig"),LOe=o(" (Pegasus model)"),xOe=l(),Wm=a("li"),EK=a("strong"),kOe=o("perceiver"),SOe=o(" \u2014 "),kx=a("a"),ROe=o("PerceiverConfig"),BOe=o(" (Perceiver model)"),POe=l(),Hm=a("li"),CK=a("strong"),$Oe=o("plbart"),IOe=o(" \u2014 "),Sx=a("a"),qOe=o("PLBartConfig"),NOe=o(" (PLBart model)"),jOe=l(),Um=a("li"),wK=a("strong"),DOe=o("poolformer"),GOe=o(" \u2014 "),Rx=a("a"),OOe=o("PoolFormerConfig"),VOe=o(" (PoolFormer model)"),XOe=l(),Jm=a("li"),AK=a("strong"),zOe=o("prophetnet"),QOe=o(" \u2014 "),Bx=a("a"),WOe=o("ProphetNetConfig"),HOe=o(" (ProphetNet model)"),UOe=l(),Ym=a("li"),yK=a("strong"),JOe=o("qdqbert"),YOe=o(" \u2014 "),Px=a("a"),KOe=o("QDQBertConfig"),ZOe=o(" (QDQBert model)"),eVe=l(),Km=a("li"),LK=a("strong"),oVe=o("rag"),rVe=o(" \u2014 "),$x=a("a"),tVe=o("RagConfig"),aVe=o(" (RAG model)"),nVe=l(),Zm=a("li"),xK=a("strong"),sVe=o("realm"),lVe=o(" \u2014 "),Ix=a("a"),iVe=o("RealmConfig"),dVe=o(" (Realm model)"),cVe=l(),eg=a("li"),kK=a("strong"),fVe=o("reformer"),mVe=o(" \u2014 "),qx=a("a"),gVe=o("ReformerConfig"),hVe=o(" (Reformer model)"),pVe=l(),og=a("li"),SK=a("strong"),_Ve=o("regnet"),uVe=o(" \u2014 "),Nx=a("a"),bVe=o("RegNetConfig"),vVe=o(" (RegNet model)"),FVe=l(),rg=a("li"),RK=a("strong"),TVe=o("rembert"),MVe=o(" \u2014 "),jx=a("a"),EVe=o("RemBertConfig"),CVe=o(" (RemBERT model)"),wVe=l(),tg=a("li"),BK=a("strong"),AVe=o("resnet"),yVe=o(" \u2014 "),Dx=a("a"),LVe=o("ResNetConfig"),xVe=o(" (ResNet model)"),kVe=l(),ag=a("li"),PK=a("strong"),SVe=o("retribert"),RVe=o(" \u2014 "),Gx=a("a"),BVe=o("RetriBertConfig"),PVe=o(" (RetriBERT model)"),$Ve=l(),ng=a("li"),$K=a("strong"),IVe=o("roberta"),qVe=o(" \u2014 "),Ox=a("a"),NVe=o("RobertaConfig"),jVe=o(" (RoBERTa model)"),DVe=l(),sg=a("li"),IK=a("strong"),GVe=o("roformer"),OVe=o(" \u2014 "),Vx=a("a"),VVe=o("RoFormerConfig"),XVe=o(" (RoFormer model)"),zVe=l(),lg=a("li"),qK=a("strong"),QVe=o("segformer"),WVe=o(" \u2014 "),Xx=a("a"),HVe=o("SegformerConfig"),UVe=o(" (SegFormer model)"),JVe=l(),ig=a("li"),NK=a("strong"),YVe=o("sew"),KVe=o(" \u2014 "),zx=a("a"),ZVe=o("SEWConfig"),eXe=o(" (SEW model)"),oXe=l(),dg=a("li"),jK=a("strong"),rXe=o("sew-d"),tXe=o(" \u2014 "),Qx=a("a"),aXe=o("SEWDConfig"),nXe=o(" (SEW-D model)"),sXe=l(),cg=a("li"),DK=a("strong"),lXe=o("speech-encoder-decoder"),iXe=o(" \u2014 "),Wx=a("a"),dXe=o("SpeechEncoderDecoderConfig"),cXe=o(" (Speech Encoder decoder model)"),fXe=l(),fg=a("li"),GK=a("strong"),mXe=o("speech_to_text"),gXe=o(" \u2014 "),Hx=a("a"),hXe=o("Speech2TextConfig"),pXe=o(" (Speech2Text model)"),_Xe=l(),mg=a("li"),OK=a("strong"),uXe=o("speech_to_text_2"),bXe=o(" \u2014 "),Ux=a("a"),vXe=o("Speech2Text2Config"),FXe=o(" (Speech2Text2 model)"),TXe=l(),gg=a("li"),VK=a("strong"),MXe=o("splinter"),EXe=o(" \u2014 "),Jx=a("a"),CXe=o("SplinterConfig"),wXe=o(" (Splinter model)"),AXe=l(),hg=a("li"),XK=a("strong"),yXe=o("squeezebert"),LXe=o(" \u2014 "),Yx=a("a"),xXe=o("SqueezeBertConfig"),kXe=o(" (SqueezeBERT model)"),SXe=l(),pg=a("li"),zK=a("strong"),RXe=o("swin"),BXe=o(" \u2014 "),Kx=a("a"),PXe=o("SwinConfig"),$Xe=o(" (Swin model)"),IXe=l(),_g=a("li"),QK=a("strong"),qXe=o("t5"),NXe=o(" \u2014 "),Zx=a("a"),jXe=o("T5Config"),DXe=o(" (T5 model)"),GXe=l(),ug=a("li"),WK=a("strong"),OXe=o("tapas"),VXe=o(" \u2014 "),ek=a("a"),XXe=o("TapasConfig"),zXe=o(" (TAPAS model)"),QXe=l(),bg=a("li"),HK=a("strong"),WXe=o("tapex"),HXe=o(" \u2014 "),ok=a("a"),UXe=o("BartConfig"),JXe=o(" (TAPEX model)"),YXe=l(),vg=a("li"),UK=a("strong"),KXe=o("transfo-xl"),ZXe=o(" \u2014 "),rk=a("a"),eze=o("TransfoXLConfig"),oze=o(" (Transformer-XL model)"),rze=l(),Fg=a("li"),JK=a("strong"),tze=o("trocr"),aze=o(" \u2014 "),tk=a("a"),nze=o("TrOCRConfig"),sze=o(" (TrOCR model)"),lze=l(),Tg=a("li"),YK=a("strong"),ize=o("unispeech"),dze=o(" \u2014 "),ak=a("a"),cze=o("UniSpeechConfig"),fze=o(" (UniSpeech model)"),mze=l(),Mg=a("li"),KK=a("strong"),gze=o("unispeech-sat"),hze=o(" \u2014 "),nk=a("a"),pze=o("UniSpeechSatConfig"),_ze=o(" (UniSpeechSat model)"),uze=l(),Eg=a("li"),ZK=a("strong"),bze=o("van"),vze=o(" \u2014 "),sk=a("a"),Fze=o("VanConfig"),Tze=o(" (VAN model)"),Mze=l(),Cg=a("li"),eZ=a("strong"),Eze=o("vilt"),Cze=o(" \u2014 "),lk=a("a"),wze=o("ViltConfig"),Aze=o(" (ViLT model)"),yze=l(),wg=a("li"),oZ=a("strong"),Lze=o("vision-encoder-decoder"),xze=o(" \u2014 "),ik=a("a"),kze=o("VisionEncoderDecoderConfig"),Sze=o(" (Vision Encoder decoder model)"),Rze=l(),Ag=a("li"),rZ=a("strong"),Bze=o("vision-text-dual-encoder"),Pze=o(" \u2014 "),dk=a("a"),$ze=o("VisionTextDualEncoderConfig"),Ize=o(" (VisionTextDualEncoder model)"),qze=l(),yg=a("li"),tZ=a("strong"),Nze=o("visual_bert"),jze=o(" \u2014 "),ck=a("a"),Dze=o("VisualBertConfig"),Gze=o(" (VisualBert model)"),Oze=l(),Lg=a("li"),aZ=a("strong"),Vze=o("vit"),Xze=o(" \u2014 "),fk=a("a"),zze=o("ViTConfig"),Qze=o(" (ViT model)"),Wze=l(),xg=a("li"),nZ=a("strong"),Hze=o("vit_mae"),Uze=o(" \u2014 "),mk=a("a"),Jze=o("ViTMAEConfig"),Yze=o(" (ViTMAE model)"),Kze=l(),kg=a("li"),sZ=a("strong"),Zze=o("wav2vec2"),eQe=o(" \u2014 "),gk=a("a"),oQe=o("Wav2Vec2Config"),rQe=o(" (Wav2Vec2 model)"),tQe=l(),Sg=a("li"),lZ=a("strong"),aQe=o("wavlm"),nQe=o(" \u2014 "),hk=a("a"),sQe=o("WavLMConfig"),lQe=o(" (WavLM model)"),iQe=l(),Rg=a("li"),iZ=a("strong"),dQe=o("xglm"),cQe=o(" \u2014 "),pk=a("a"),fQe=o("XGLMConfig"),mQe=o(" (XGLM model)"),gQe=l(),Bg=a("li"),dZ=a("strong"),hQe=o("xlm"),pQe=o(" \u2014 "),_k=a("a"),_Qe=o("XLMConfig"),uQe=o(" (XLM model)"),bQe=l(),Pg=a("li"),cZ=a("strong"),vQe=o("xlm-prophetnet"),FQe=o(" \u2014 "),uk=a("a"),TQe=o("XLMProphetNetConfig"),MQe=o(" (XLMProphetNet model)"),EQe=l(),$g=a("li"),fZ=a("strong"),CQe=o("xlm-roberta"),wQe=o(" \u2014 "),bk=a("a"),AQe=o("XLMRobertaConfig"),yQe=o(" (XLM-RoBERTa model)"),LQe=l(),Ig=a("li"),mZ=a("strong"),xQe=o("xlm-roberta-xl"),kQe=o(" \u2014 "),vk=a("a"),SQe=o("XLMRobertaXLConfig"),RQe=o(" (XLM-RoBERTa-XL model)"),BQe=l(),qg=a("li"),gZ=a("strong"),PQe=o("xlnet"),$Qe=o(" \u2014 "),Fk=a("a"),IQe=o("XLNetConfig"),qQe=o(" (XLNet model)"),NQe=l(),Ng=a("li"),hZ=a("strong"),jQe=o("yoso"),DQe=o(" \u2014 "),Tk=a("a"),GQe=o("YosoConfig"),OQe=o(" (YOSO model)"),VQe=l(),pZ=a("p"),XQe=o("Examples:"),zQe=l(),f(jw.$$.fragment),QQe=l(),jg=a("div"),f(Dw.$$.fragment),WQe=l(),_Z=a("p"),HQe=o("Register a new configuration for this class."),jRe=l(),Hi=a("h2"),Dg=a("a"),uZ=a("span"),f(Gw.$$.fragment),UQe=l(),bZ=a("span"),JQe=o("AutoTokenizer"),DRe=l(),Wo=a("div"),f(Ow.$$.fragment),YQe=l(),Vw=a("p"),KQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Mk=a("a"),ZQe=o("AutoTokenizer.from_pretrained()"),eWe=o(" class method."),oWe=l(),Xw=a("p"),rWe=o("This class cannot be instantiated directly using "),vZ=a("code"),tWe=o("__init__()"),aWe=o(" (throws an error)."),nWe=l(),go=a("div"),f(zw.$$.fragment),sWe=l(),FZ=a("p"),lWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),iWe=l(),Oa=a("p"),dWe=o("The tokenizer class to instantiate is selected based on the "),TZ=a("code"),cWe=o("model_type"),fWe=o(` property of the config object (either
passed as an argument or loaded from `),MZ=a("code"),mWe=o("pretrained_model_name_or_path"),gWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EZ=a("code"),hWe=o("pretrained_model_name_or_path"),pWe=o(":"),_We=l(),E=a("ul"),Wn=a("li"),CZ=a("strong"),uWe=o("albert"),bWe=o(" \u2014 "),Ek=a("a"),vWe=o("AlbertTokenizer"),FWe=o(" or "),Ck=a("a"),TWe=o("AlbertTokenizerFast"),MWe=o(" (ALBERT model)"),EWe=l(),Hn=a("li"),wZ=a("strong"),CWe=o("bart"),wWe=o(" \u2014 "),wk=a("a"),AWe=o("BartTokenizer"),yWe=o(" or "),Ak=a("a"),LWe=o("BartTokenizerFast"),xWe=o(" (BART model)"),kWe=l(),Un=a("li"),AZ=a("strong"),SWe=o("barthez"),RWe=o(" \u2014 "),yk=a("a"),BWe=o("BarthezTokenizer"),PWe=o(" or "),Lk=a("a"),$We=o("BarthezTokenizerFast"),IWe=o(" (BARThez model)"),qWe=l(),Gg=a("li"),yZ=a("strong"),NWe=o("bartpho"),jWe=o(" \u2014 "),xk=a("a"),DWe=o("BartphoTokenizer"),GWe=o(" (BARTpho model)"),OWe=l(),Jn=a("li"),LZ=a("strong"),VWe=o("bert"),XWe=o(" \u2014 "),kk=a("a"),zWe=o("BertTokenizer"),QWe=o(" or "),Sk=a("a"),WWe=o("BertTokenizerFast"),HWe=o(" (BERT model)"),UWe=l(),Og=a("li"),xZ=a("strong"),JWe=o("bert-generation"),YWe=o(" \u2014 "),Rk=a("a"),KWe=o("BertGenerationTokenizer"),ZWe=o(" (Bert Generation model)"),eHe=l(),Vg=a("li"),kZ=a("strong"),oHe=o("bert-japanese"),rHe=o(" \u2014 "),Bk=a("a"),tHe=o("BertJapaneseTokenizer"),aHe=o(" (BertJapanese model)"),nHe=l(),Xg=a("li"),SZ=a("strong"),sHe=o("bertweet"),lHe=o(" \u2014 "),Pk=a("a"),iHe=o("BertweetTokenizer"),dHe=o(" (Bertweet model)"),cHe=l(),Yn=a("li"),RZ=a("strong"),fHe=o("big_bird"),mHe=o(" \u2014 "),$k=a("a"),gHe=o("BigBirdTokenizer"),hHe=o(" or "),Ik=a("a"),pHe=o("BigBirdTokenizerFast"),_He=o(" (BigBird model)"),uHe=l(),Kn=a("li"),BZ=a("strong"),bHe=o("bigbird_pegasus"),vHe=o(" \u2014 "),qk=a("a"),FHe=o("PegasusTokenizer"),THe=o(" or "),Nk=a("a"),MHe=o("PegasusTokenizerFast"),EHe=o(" (BigBirdPegasus model)"),CHe=l(),Zn=a("li"),PZ=a("strong"),wHe=o("blenderbot"),AHe=o(" \u2014 "),jk=a("a"),yHe=o("BlenderbotTokenizer"),LHe=o(" or "),Dk=a("a"),xHe=o("BlenderbotTokenizerFast"),kHe=o(" (Blenderbot model)"),SHe=l(),zg=a("li"),$Z=a("strong"),RHe=o("blenderbot-small"),BHe=o(" \u2014 "),Gk=a("a"),PHe=o("BlenderbotSmallTokenizer"),$He=o(" (BlenderbotSmall model)"),IHe=l(),Qg=a("li"),IZ=a("strong"),qHe=o("byt5"),NHe=o(" \u2014 "),Ok=a("a"),jHe=o("ByT5Tokenizer"),DHe=o(" (ByT5 model)"),GHe=l(),es=a("li"),qZ=a("strong"),OHe=o("camembert"),VHe=o(" \u2014 "),Vk=a("a"),XHe=o("CamembertTokenizer"),zHe=o(" or "),Xk=a("a"),QHe=o("CamembertTokenizerFast"),WHe=o(" (CamemBERT model)"),HHe=l(),Wg=a("li"),NZ=a("strong"),UHe=o("canine"),JHe=o(" \u2014 "),zk=a("a"),YHe=o("CanineTokenizer"),KHe=o(" (Canine model)"),ZHe=l(),os=a("li"),jZ=a("strong"),eUe=o("clip"),oUe=o(" \u2014 "),Qk=a("a"),rUe=o("CLIPTokenizer"),tUe=o(" or "),Wk=a("a"),aUe=o("CLIPTokenizerFast"),nUe=o(" (CLIP model)"),sUe=l(),rs=a("li"),DZ=a("strong"),lUe=o("convbert"),iUe=o(" \u2014 "),Hk=a("a"),dUe=o("ConvBertTokenizer"),cUe=o(" or "),Uk=a("a"),fUe=o("ConvBertTokenizerFast"),mUe=o(" (ConvBERT model)"),gUe=l(),ts=a("li"),GZ=a("strong"),hUe=o("cpm"),pUe=o(" \u2014 "),Jk=a("a"),_Ue=o("CpmTokenizer"),uUe=o(" or "),OZ=a("code"),bUe=o("CpmTokenizerFast"),vUe=o(" (CPM model)"),FUe=l(),Hg=a("li"),VZ=a("strong"),TUe=o("ctrl"),MUe=o(" \u2014 "),Yk=a("a"),EUe=o("CTRLTokenizer"),CUe=o(" (CTRL model)"),wUe=l(),as=a("li"),XZ=a("strong"),AUe=o("deberta"),yUe=o(" \u2014 "),Kk=a("a"),LUe=o("DebertaTokenizer"),xUe=o(" or "),Zk=a("a"),kUe=o("DebertaTokenizerFast"),SUe=o(" (DeBERTa model)"),RUe=l(),ns=a("li"),zZ=a("strong"),BUe=o("deberta-v2"),PUe=o(" \u2014 "),eS=a("a"),$Ue=o("DebertaV2Tokenizer"),IUe=o(" or "),oS=a("a"),qUe=o("DebertaV2TokenizerFast"),NUe=o(" (DeBERTa-v2 model)"),jUe=l(),ss=a("li"),QZ=a("strong"),DUe=o("distilbert"),GUe=o(" \u2014 "),rS=a("a"),OUe=o("DistilBertTokenizer"),VUe=o(" or "),tS=a("a"),XUe=o("DistilBertTokenizerFast"),zUe=o(" (DistilBERT model)"),QUe=l(),ls=a("li"),WZ=a("strong"),WUe=o("dpr"),HUe=o(" \u2014 "),aS=a("a"),UUe=o("DPRQuestionEncoderTokenizer"),JUe=o(" or "),nS=a("a"),YUe=o("DPRQuestionEncoderTokenizerFast"),KUe=o(" (DPR model)"),ZUe=l(),is=a("li"),HZ=a("strong"),eJe=o("electra"),oJe=o(" \u2014 "),sS=a("a"),rJe=o("ElectraTokenizer"),tJe=o(" or "),lS=a("a"),aJe=o("ElectraTokenizerFast"),nJe=o(" (ELECTRA model)"),sJe=l(),Ug=a("li"),UZ=a("strong"),lJe=o("flaubert"),iJe=o(" \u2014 "),iS=a("a"),dJe=o("FlaubertTokenizer"),cJe=o(" (FlauBERT model)"),fJe=l(),ds=a("li"),JZ=a("strong"),mJe=o("fnet"),gJe=o(" \u2014 "),dS=a("a"),hJe=o("FNetTokenizer"),pJe=o(" or "),cS=a("a"),_Je=o("FNetTokenizerFast"),uJe=o(" (FNet model)"),bJe=l(),Jg=a("li"),YZ=a("strong"),vJe=o("fsmt"),FJe=o(" \u2014 "),fS=a("a"),TJe=o("FSMTTokenizer"),MJe=o(" (FairSeq Machine-Translation model)"),EJe=l(),cs=a("li"),KZ=a("strong"),CJe=o("funnel"),wJe=o(" \u2014 "),mS=a("a"),AJe=o("FunnelTokenizer"),yJe=o(" or "),gS=a("a"),LJe=o("FunnelTokenizerFast"),xJe=o(" (Funnel Transformer model)"),kJe=l(),fs=a("li"),ZZ=a("strong"),SJe=o("gpt2"),RJe=o(" \u2014 "),hS=a("a"),BJe=o("GPT2Tokenizer"),PJe=o(" or "),pS=a("a"),$Je=o("GPT2TokenizerFast"),IJe=o(" (OpenAI GPT-2 model)"),qJe=l(),ms=a("li"),eee=a("strong"),NJe=o("gpt_neo"),jJe=o(" \u2014 "),_S=a("a"),DJe=o("GPT2Tokenizer"),GJe=o(" or "),uS=a("a"),OJe=o("GPT2TokenizerFast"),VJe=o(" (GPT Neo model)"),XJe=l(),gs=a("li"),oee=a("strong"),zJe=o("herbert"),QJe=o(" \u2014 "),bS=a("a"),WJe=o("HerbertTokenizer"),HJe=o(" or "),vS=a("a"),UJe=o("HerbertTokenizerFast"),JJe=o(" (HerBERT model)"),YJe=l(),Yg=a("li"),ree=a("strong"),KJe=o("hubert"),ZJe=o(" \u2014 "),FS=a("a"),eYe=o("Wav2Vec2CTCTokenizer"),oYe=o(" (Hubert model)"),rYe=l(),hs=a("li"),tee=a("strong"),tYe=o("ibert"),aYe=o(" \u2014 "),TS=a("a"),nYe=o("RobertaTokenizer"),sYe=o(" or "),MS=a("a"),lYe=o("RobertaTokenizerFast"),iYe=o(" (I-BERT model)"),dYe=l(),ps=a("li"),aee=a("strong"),cYe=o("layoutlm"),fYe=o(" \u2014 "),ES=a("a"),mYe=o("LayoutLMTokenizer"),gYe=o(" or "),CS=a("a"),hYe=o("LayoutLMTokenizerFast"),pYe=o(" (LayoutLM model)"),_Ye=l(),_s=a("li"),nee=a("strong"),uYe=o("layoutlmv2"),bYe=o(" \u2014 "),wS=a("a"),vYe=o("LayoutLMv2Tokenizer"),FYe=o(" or "),AS=a("a"),TYe=o("LayoutLMv2TokenizerFast"),MYe=o(" (LayoutLMv2 model)"),EYe=l(),us=a("li"),see=a("strong"),CYe=o("layoutxlm"),wYe=o(" \u2014 "),yS=a("a"),AYe=o("LayoutXLMTokenizer"),yYe=o(" or "),LS=a("a"),LYe=o("LayoutXLMTokenizerFast"),xYe=o(" (LayoutXLM model)"),kYe=l(),bs=a("li"),lee=a("strong"),SYe=o("led"),RYe=o(" \u2014 "),xS=a("a"),BYe=o("LEDTokenizer"),PYe=o(" or "),kS=a("a"),$Ye=o("LEDTokenizerFast"),IYe=o(" (LED model)"),qYe=l(),vs=a("li"),iee=a("strong"),NYe=o("longformer"),jYe=o(" \u2014 "),SS=a("a"),DYe=o("LongformerTokenizer"),GYe=o(" or "),RS=a("a"),OYe=o("LongformerTokenizerFast"),VYe=o(" (Longformer model)"),XYe=l(),Kg=a("li"),dee=a("strong"),zYe=o("luke"),QYe=o(" \u2014 "),BS=a("a"),WYe=o("LukeTokenizer"),HYe=o(" (LUKE model)"),UYe=l(),Fs=a("li"),cee=a("strong"),JYe=o("lxmert"),YYe=o(" \u2014 "),PS=a("a"),KYe=o("LxmertTokenizer"),ZYe=o(" or "),$S=a("a"),eKe=o("LxmertTokenizerFast"),oKe=o(" (LXMERT model)"),rKe=l(),Zg=a("li"),fee=a("strong"),tKe=o("m2m_100"),aKe=o(" \u2014 "),IS=a("a"),nKe=o("M2M100Tokenizer"),sKe=o(" (M2M100 model)"),lKe=l(),eh=a("li"),mee=a("strong"),iKe=o("marian"),dKe=o(" \u2014 "),qS=a("a"),cKe=o("MarianTokenizer"),fKe=o(" (Marian model)"),mKe=l(),Ts=a("li"),gee=a("strong"),gKe=o("mbart"),hKe=o(" \u2014 "),NS=a("a"),pKe=o("MBartTokenizer"),_Ke=o(" or "),jS=a("a"),uKe=o("MBartTokenizerFast"),bKe=o(" (mBART model)"),vKe=l(),Ms=a("li"),hee=a("strong"),FKe=o("mbart50"),TKe=o(" \u2014 "),DS=a("a"),MKe=o("MBart50Tokenizer"),EKe=o(" or "),GS=a("a"),CKe=o("MBart50TokenizerFast"),wKe=o(" (mBART-50 model)"),AKe=l(),oh=a("li"),pee=a("strong"),yKe=o("mluke"),LKe=o(" \u2014 "),OS=a("a"),xKe=o("MLukeTokenizer"),kKe=o(" (mLUKE model)"),SKe=l(),Es=a("li"),_ee=a("strong"),RKe=o("mobilebert"),BKe=o(" \u2014 "),VS=a("a"),PKe=o("MobileBertTokenizer"),$Ke=o(" or "),XS=a("a"),IKe=o("MobileBertTokenizerFast"),qKe=o(" (MobileBERT model)"),NKe=l(),Cs=a("li"),uee=a("strong"),jKe=o("mpnet"),DKe=o(" \u2014 "),zS=a("a"),GKe=o("MPNetTokenizer"),OKe=o(" or "),QS=a("a"),VKe=o("MPNetTokenizerFast"),XKe=o(" (MPNet model)"),zKe=l(),ws=a("li"),bee=a("strong"),QKe=o("mt5"),WKe=o(" \u2014 "),WS=a("a"),HKe=o("MT5Tokenizer"),UKe=o(" or "),HS=a("a"),JKe=o("MT5TokenizerFast"),YKe=o(" (mT5 model)"),KKe=l(),As=a("li"),vee=a("strong"),ZKe=o("openai-gpt"),eZe=o(" \u2014 "),US=a("a"),oZe=o("OpenAIGPTTokenizer"),rZe=o(" or "),JS=a("a"),tZe=o("OpenAIGPTTokenizerFast"),aZe=o(" (OpenAI GPT model)"),nZe=l(),ys=a("li"),Fee=a("strong"),sZe=o("pegasus"),lZe=o(" \u2014 "),YS=a("a"),iZe=o("PegasusTokenizer"),dZe=o(" or "),KS=a("a"),cZe=o("PegasusTokenizerFast"),fZe=o(" (Pegasus model)"),mZe=l(),rh=a("li"),Tee=a("strong"),gZe=o("perceiver"),hZe=o(" \u2014 "),ZS=a("a"),pZe=o("PerceiverTokenizer"),_Ze=o(" (Perceiver model)"),uZe=l(),th=a("li"),Mee=a("strong"),bZe=o("phobert"),vZe=o(" \u2014 "),eR=a("a"),FZe=o("PhobertTokenizer"),TZe=o(" (PhoBERT model)"),MZe=l(),ah=a("li"),Eee=a("strong"),EZe=o("plbart"),CZe=o(" \u2014 "),oR=a("a"),wZe=o("PLBartTokenizer"),AZe=o(" (PLBart model)"),yZe=l(),nh=a("li"),Cee=a("strong"),LZe=o("prophetnet"),xZe=o(" \u2014 "),rR=a("a"),kZe=o("ProphetNetTokenizer"),SZe=o(" (ProphetNet model)"),RZe=l(),Ls=a("li"),wee=a("strong"),BZe=o("qdqbert"),PZe=o(" \u2014 "),tR=a("a"),$Ze=o("BertTokenizer"),IZe=o(" or "),aR=a("a"),qZe=o("BertTokenizerFast"),NZe=o(" (QDQBert model)"),jZe=l(),sh=a("li"),Aee=a("strong"),DZe=o("rag"),GZe=o(" \u2014 "),nR=a("a"),OZe=o("RagTokenizer"),VZe=o(" (RAG model)"),XZe=l(),xs=a("li"),yee=a("strong"),zZe=o("realm"),QZe=o(" \u2014 "),sR=a("a"),WZe=o("RealmTokenizer"),HZe=o(" or "),lR=a("a"),UZe=o("RealmTokenizerFast"),JZe=o(" (Realm model)"),YZe=l(),ks=a("li"),Lee=a("strong"),KZe=o("reformer"),ZZe=o(" \u2014 "),iR=a("a"),eeo=o("ReformerTokenizer"),oeo=o(" or "),dR=a("a"),reo=o("ReformerTokenizerFast"),teo=o(" (Reformer model)"),aeo=l(),Ss=a("li"),xee=a("strong"),neo=o("rembert"),seo=o(" \u2014 "),cR=a("a"),leo=o("RemBertTokenizer"),ieo=o(" or "),fR=a("a"),deo=o("RemBertTokenizerFast"),ceo=o(" (RemBERT model)"),feo=l(),Rs=a("li"),kee=a("strong"),meo=o("retribert"),geo=o(" \u2014 "),mR=a("a"),heo=o("RetriBertTokenizer"),peo=o(" or "),gR=a("a"),_eo=o("RetriBertTokenizerFast"),ueo=o(" (RetriBERT model)"),beo=l(),Bs=a("li"),See=a("strong"),veo=o("roberta"),Feo=o(" \u2014 "),hR=a("a"),Teo=o("RobertaTokenizer"),Meo=o(" or "),pR=a("a"),Eeo=o("RobertaTokenizerFast"),Ceo=o(" (RoBERTa model)"),weo=l(),Ps=a("li"),Ree=a("strong"),Aeo=o("roformer"),yeo=o(" \u2014 "),_R=a("a"),Leo=o("RoFormerTokenizer"),xeo=o(" or "),uR=a("a"),keo=o("RoFormerTokenizerFast"),Seo=o(" (RoFormer model)"),Reo=l(),lh=a("li"),Bee=a("strong"),Beo=o("speech_to_text"),Peo=o(" \u2014 "),bR=a("a"),$eo=o("Speech2TextTokenizer"),Ieo=o(" (Speech2Text model)"),qeo=l(),ih=a("li"),Pee=a("strong"),Neo=o("speech_to_text_2"),jeo=o(" \u2014 "),vR=a("a"),Deo=o("Speech2Text2Tokenizer"),Geo=o(" (Speech2Text2 model)"),Oeo=l(),$s=a("li"),$ee=a("strong"),Veo=o("splinter"),Xeo=o(" \u2014 "),FR=a("a"),zeo=o("SplinterTokenizer"),Qeo=o(" or "),TR=a("a"),Weo=o("SplinterTokenizerFast"),Heo=o(" (Splinter model)"),Ueo=l(),Is=a("li"),Iee=a("strong"),Jeo=o("squeezebert"),Yeo=o(" \u2014 "),MR=a("a"),Keo=o("SqueezeBertTokenizer"),Zeo=o(" or "),ER=a("a"),eoo=o("SqueezeBertTokenizerFast"),ooo=o(" (SqueezeBERT model)"),roo=l(),qs=a("li"),qee=a("strong"),too=o("t5"),aoo=o(" \u2014 "),CR=a("a"),noo=o("T5Tokenizer"),soo=o(" or "),wR=a("a"),loo=o("T5TokenizerFast"),ioo=o(" (T5 model)"),doo=l(),dh=a("li"),Nee=a("strong"),coo=o("tapas"),foo=o(" \u2014 "),AR=a("a"),moo=o("TapasTokenizer"),goo=o(" (TAPAS model)"),hoo=l(),ch=a("li"),jee=a("strong"),poo=o("tapex"),_oo=o(" \u2014 "),yR=a("a"),uoo=o("TapexTokenizer"),boo=o(" (TAPEX model)"),voo=l(),fh=a("li"),Dee=a("strong"),Foo=o("transfo-xl"),Too=o(" \u2014 "),LR=a("a"),Moo=o("TransfoXLTokenizer"),Eoo=o(" (Transformer-XL model)"),Coo=l(),mh=a("li"),Gee=a("strong"),woo=o("wav2vec2"),Aoo=o(" \u2014 "),xR=a("a"),yoo=o("Wav2Vec2CTCTokenizer"),Loo=o(" (Wav2Vec2 model)"),xoo=l(),gh=a("li"),Oee=a("strong"),koo=o("wav2vec2_phoneme"),Soo=o(" \u2014 "),kR=a("a"),Roo=o("Wav2Vec2PhonemeCTCTokenizer"),Boo=o(" (Wav2Vec2Phoneme model)"),Poo=l(),Ns=a("li"),Vee=a("strong"),$oo=o("xglm"),Ioo=o(" \u2014 "),SR=a("a"),qoo=o("XGLMTokenizer"),Noo=o(" or "),RR=a("a"),joo=o("XGLMTokenizerFast"),Doo=o(" (XGLM model)"),Goo=l(),hh=a("li"),Xee=a("strong"),Ooo=o("xlm"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("XLMTokenizer"),zoo=o(" (XLM model)"),Qoo=l(),ph=a("li"),zee=a("strong"),Woo=o("xlm-prophetnet"),Hoo=o(" \u2014 "),PR=a("a"),Uoo=o("XLMProphetNetTokenizer"),Joo=o(" (XLMProphetNet model)"),Yoo=l(),js=a("li"),Qee=a("strong"),Koo=o("xlm-roberta"),Zoo=o(" \u2014 "),$R=a("a"),ero=o("XLMRobertaTokenizer"),oro=o(" or "),IR=a("a"),rro=o("XLMRobertaTokenizerFast"),tro=o(" (XLM-RoBERTa model)"),aro=l(),Ds=a("li"),Wee=a("strong"),nro=o("xlnet"),sro=o(" \u2014 "),qR=a("a"),lro=o("XLNetTokenizer"),iro=o(" or "),NR=a("a"),dro=o("XLNetTokenizerFast"),cro=o(" (XLNet model)"),fro=l(),Hee=a("p"),mro=o("Examples:"),gro=l(),f(Qw.$$.fragment),hro=l(),_h=a("div"),f(Ww.$$.fragment),pro=l(),Uee=a("p"),_ro=o("Register a new tokenizer in this mapping."),GRe=l(),Ui=a("h2"),uh=a("a"),Jee=a("span"),f(Hw.$$.fragment),uro=l(),Yee=a("span"),bro=o("AutoFeatureExtractor"),ORe=l(),Ho=a("div"),f(Uw.$$.fragment),vro=l(),Jw=a("p"),Fro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jR=a("a"),Tro=o("AutoFeatureExtractor.from_pretrained()"),Mro=o(" class method."),Ero=l(),Yw=a("p"),Cro=o("This class cannot be instantiated directly using "),Kee=a("code"),wro=o("__init__()"),Aro=o(" (throws an error)."),yro=l(),$e=a("div"),f(Kw.$$.fragment),Lro=l(),Zee=a("p"),xro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kro=l(),Va=a("p"),Sro=o("The feature extractor class to instantiate is selected based on the "),eoe=a("code"),Rro=o("model_type"),Bro=o(` property of the config object
(either passed as an argument or loaded from `),ooe=a("code"),Pro=o("pretrained_model_name_or_path"),$ro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),roe=a("code"),Iro=o("pretrained_model_name_or_path"),qro=o(":"),Nro=l(),ee=a("ul"),bh=a("li"),toe=a("strong"),jro=o("beit"),Dro=o(" \u2014 "),DR=a("a"),Gro=o("BeitFeatureExtractor"),Oro=o(" (BEiT model)"),Vro=l(),vh=a("li"),aoe=a("strong"),Xro=o("clip"),zro=o(" \u2014 "),GR=a("a"),Qro=o("CLIPFeatureExtractor"),Wro=o(" (CLIP model)"),Hro=l(),Fh=a("li"),noe=a("strong"),Uro=o("convnext"),Jro=o(" \u2014 "),OR=a("a"),Yro=o("ConvNextFeatureExtractor"),Kro=o(" (ConvNext model)"),Zro=l(),Th=a("li"),soe=a("strong"),eto=o("deit"),oto=o(" \u2014 "),VR=a("a"),rto=o("DeiTFeatureExtractor"),tto=o(" (DeiT model)"),ato=l(),Mh=a("li"),loe=a("strong"),nto=o("detr"),sto=o(" \u2014 "),XR=a("a"),lto=o("DetrFeatureExtractor"),ito=o(" (DETR model)"),dto=l(),Eh=a("li"),ioe=a("strong"),cto=o("hubert"),fto=o(" \u2014 "),zR=a("a"),mto=o("Wav2Vec2FeatureExtractor"),gto=o(" (Hubert model)"),hto=l(),Ch=a("li"),doe=a("strong"),pto=o("layoutlmv2"),_to=o(" \u2014 "),QR=a("a"),uto=o("LayoutLMv2FeatureExtractor"),bto=o(" (LayoutLMv2 model)"),vto=l(),wh=a("li"),coe=a("strong"),Fto=o("maskformer"),Tto=o(" \u2014 "),WR=a("a"),Mto=o("MaskFormerFeatureExtractor"),Eto=o(" (MaskFormer model)"),Cto=l(),Ah=a("li"),foe=a("strong"),wto=o("perceiver"),Ato=o(" \u2014 "),HR=a("a"),yto=o("PerceiverFeatureExtractor"),Lto=o(" (Perceiver model)"),xto=l(),yh=a("li"),moe=a("strong"),kto=o("poolformer"),Sto=o(" \u2014 "),UR=a("a"),Rto=o("PoolFormerFeatureExtractor"),Bto=o(" (PoolFormer model)"),Pto=l(),Lh=a("li"),goe=a("strong"),$to=o("regnet"),Ito=o(" \u2014 "),JR=a("a"),qto=o("ConvNextFeatureExtractor"),Nto=o(" (RegNet model)"),jto=l(),xh=a("li"),hoe=a("strong"),Dto=o("resnet"),Gto=o(" \u2014 "),YR=a("a"),Oto=o("ConvNextFeatureExtractor"),Vto=o(" (ResNet model)"),Xto=l(),kh=a("li"),poe=a("strong"),zto=o("segformer"),Qto=o(" \u2014 "),KR=a("a"),Wto=o("SegformerFeatureExtractor"),Hto=o(" (SegFormer model)"),Uto=l(),Sh=a("li"),_oe=a("strong"),Jto=o("speech_to_text"),Yto=o(" \u2014 "),ZR=a("a"),Kto=o("Speech2TextFeatureExtractor"),Zto=o(" (Speech2Text model)"),eao=l(),Rh=a("li"),uoe=a("strong"),oao=o("swin"),rao=o(" \u2014 "),eB=a("a"),tao=o("ViTFeatureExtractor"),aao=o(" (Swin model)"),nao=l(),Bh=a("li"),boe=a("strong"),sao=o("van"),lao=o(" \u2014 "),oB=a("a"),iao=o("ConvNextFeatureExtractor"),dao=o(" (VAN model)"),cao=l(),Ph=a("li"),voe=a("strong"),fao=o("vit"),mao=o(" \u2014 "),rB=a("a"),gao=o("ViTFeatureExtractor"),hao=o(" (ViT model)"),pao=l(),$h=a("li"),Foe=a("strong"),_ao=o("vit_mae"),uao=o(" \u2014 "),tB=a("a"),bao=o("ViTFeatureExtractor"),vao=o(" (ViTMAE model)"),Fao=l(),Ih=a("li"),Toe=a("strong"),Tao=o("wav2vec2"),Mao=o(" \u2014 "),aB=a("a"),Eao=o("Wav2Vec2FeatureExtractor"),Cao=o(" (Wav2Vec2 model)"),wao=l(),f(qh.$$.fragment),Aao=l(),Moe=a("p"),yao=o("Examples:"),Lao=l(),f(Zw.$$.fragment),xao=l(),Nh=a("div"),f(e6.$$.fragment),kao=l(),Eoe=a("p"),Sao=o("Register a new feature extractor for this class."),VRe=l(),Ji=a("h2"),jh=a("a"),Coe=a("span"),f(o6.$$.fragment),Rao=l(),woe=a("span"),Bao=o("AutoProcessor"),XRe=l(),Uo=a("div"),f(r6.$$.fragment),Pao=l(),t6=a("p"),$ao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nB=a("a"),Iao=o("AutoProcessor.from_pretrained()"),qao=o(" class method."),Nao=l(),a6=a("p"),jao=o("This class cannot be instantiated directly using "),Aoe=a("code"),Dao=o("__init__()"),Gao=o(" (throws an error)."),Oao=l(),Ie=a("div"),f(n6.$$.fragment),Vao=l(),yoe=a("p"),Xao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zao=l(),Yi=a("p"),Qao=o("The processor class to instantiate is selected based on the "),Loe=a("code"),Wao=o("model_type"),Hao=o(` property of the config object (either
passed as an argument or loaded from `),xoe=a("code"),Uao=o("pretrained_model_name_or_path"),Jao=o(" if possible):"),Yao=l(),ke=a("ul"),Dh=a("li"),koe=a("strong"),Kao=o("clip"),Zao=o(" \u2014 "),sB=a("a"),eno=o("CLIPProcessor"),ono=o(" (CLIP model)"),rno=l(),Gh=a("li"),Soe=a("strong"),tno=o("layoutlmv2"),ano=o(" \u2014 "),lB=a("a"),nno=o("LayoutLMv2Processor"),sno=o(" (LayoutLMv2 model)"),lno=l(),Oh=a("li"),Roe=a("strong"),ino=o("layoutxlm"),dno=o(" \u2014 "),iB=a("a"),cno=o("LayoutXLMProcessor"),fno=o(" (LayoutXLM model)"),mno=l(),Vh=a("li"),Boe=a("strong"),gno=o("speech_to_text"),hno=o(" \u2014 "),dB=a("a"),pno=o("Speech2TextProcessor"),_no=o(" (Speech2Text model)"),uno=l(),Xh=a("li"),Poe=a("strong"),bno=o("speech_to_text_2"),vno=o(" \u2014 "),cB=a("a"),Fno=o("Speech2Text2Processor"),Tno=o(" (Speech2Text2 model)"),Mno=l(),zh=a("li"),$oe=a("strong"),Eno=o("trocr"),Cno=o(" \u2014 "),fB=a("a"),wno=o("TrOCRProcessor"),Ano=o(" (TrOCR model)"),yno=l(),Qh=a("li"),Ioe=a("strong"),Lno=o("vision-text-dual-encoder"),xno=o(" \u2014 "),mB=a("a"),kno=o("VisionTextDualEncoderProcessor"),Sno=o(" (VisionTextDualEncoder model)"),Rno=l(),Wh=a("li"),qoe=a("strong"),Bno=o("wav2vec2"),Pno=o(" \u2014 "),gB=a("a"),$no=o("Wav2Vec2Processor"),Ino=o(" (Wav2Vec2 model)"),qno=l(),f(Hh.$$.fragment),Nno=l(),Noe=a("p"),jno=o("Examples:"),Dno=l(),f(s6.$$.fragment),Gno=l(),Uh=a("div"),f(l6.$$.fragment),Ono=l(),joe=a("p"),Vno=o("Register a new processor for this class."),zRe=l(),Ki=a("h2"),Jh=a("a"),Doe=a("span"),f(i6.$$.fragment),Xno=l(),Goe=a("span"),zno=o("AutoModel"),QRe=l(),Jo=a("div"),f(d6.$$.fragment),Qno=l(),Zi=a("p"),Wno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hB=a("a"),Hno=o("from_pretrained()"),Uno=o(" class method or the "),pB=a("a"),Jno=o("from_config()"),Yno=o(` class
method.`),Kno=l(),c6=a("p"),Zno=o("This class cannot be instantiated directly using "),Ooe=a("code"),eso=o("__init__()"),oso=o(" (throws an error)."),rso=l(),Xr=a("div"),f(f6.$$.fragment),tso=l(),Voe=a("p"),aso=o("Instantiates one of the base model classes of the library from a configuration."),nso=l(),ed=a("p"),sso=o(`Note:
Loading a model from its configuration file does `),Xoe=a("strong"),lso=o("not"),iso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_B=a("a"),dso=o("from_pretrained()"),cso=o(" to load the model weights."),fso=l(),zoe=a("p"),mso=o("Examples:"),gso=l(),f(m6.$$.fragment),hso=l(),qe=a("div"),f(g6.$$.fragment),pso=l(),Qoe=a("p"),_so=o("Instantiate one of the base model classes of the library from a pretrained model."),uso=l(),Xa=a("p"),bso=o("The model class to instantiate is selected based on the "),Woe=a("code"),vso=o("model_type"),Fso=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),Tso=o("pretrained_model_name_or_path"),Mso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),Eso=o("pretrained_model_name_or_path"),Cso=o(":"),wso=l(),T=a("ul"),Yh=a("li"),Joe=a("strong"),Aso=o("albert"),yso=o(" \u2014 "),uB=a("a"),Lso=o("AlbertModel"),xso=o(" (ALBERT model)"),kso=l(),Kh=a("li"),Yoe=a("strong"),Sso=o("bart"),Rso=o(" \u2014 "),bB=a("a"),Bso=o("BartModel"),Pso=o(" (BART model)"),$so=l(),Zh=a("li"),Koe=a("strong"),Iso=o("beit"),qso=o(" \u2014 "),vB=a("a"),Nso=o("BeitModel"),jso=o(" (BEiT model)"),Dso=l(),ep=a("li"),Zoe=a("strong"),Gso=o("bert"),Oso=o(" \u2014 "),FB=a("a"),Vso=o("BertModel"),Xso=o(" (BERT model)"),zso=l(),op=a("li"),ere=a("strong"),Qso=o("bert-generation"),Wso=o(" \u2014 "),TB=a("a"),Hso=o("BertGenerationEncoder"),Uso=o(" (Bert Generation model)"),Jso=l(),rp=a("li"),ore=a("strong"),Yso=o("big_bird"),Kso=o(" \u2014 "),MB=a("a"),Zso=o("BigBirdModel"),elo=o(" (BigBird model)"),olo=l(),tp=a("li"),rre=a("strong"),rlo=o("bigbird_pegasus"),tlo=o(" \u2014 "),EB=a("a"),alo=o("BigBirdPegasusModel"),nlo=o(" (BigBirdPegasus model)"),slo=l(),ap=a("li"),tre=a("strong"),llo=o("blenderbot"),ilo=o(" \u2014 "),CB=a("a"),dlo=o("BlenderbotModel"),clo=o(" (Blenderbot model)"),flo=l(),np=a("li"),are=a("strong"),mlo=o("blenderbot-small"),glo=o(" \u2014 "),wB=a("a"),hlo=o("BlenderbotSmallModel"),plo=o(" (BlenderbotSmall model)"),_lo=l(),sp=a("li"),nre=a("strong"),ulo=o("camembert"),blo=o(" \u2014 "),AB=a("a"),vlo=o("CamembertModel"),Flo=o(" (CamemBERT model)"),Tlo=l(),lp=a("li"),sre=a("strong"),Mlo=o("canine"),Elo=o(" \u2014 "),yB=a("a"),Clo=o("CanineModel"),wlo=o(" (Canine model)"),Alo=l(),ip=a("li"),lre=a("strong"),ylo=o("clip"),Llo=o(" \u2014 "),LB=a("a"),xlo=o("CLIPModel"),klo=o(" (CLIP model)"),Slo=l(),dp=a("li"),ire=a("strong"),Rlo=o("convbert"),Blo=o(" \u2014 "),xB=a("a"),Plo=o("ConvBertModel"),$lo=o(" (ConvBERT model)"),Ilo=l(),cp=a("li"),dre=a("strong"),qlo=o("convnext"),Nlo=o(" \u2014 "),kB=a("a"),jlo=o("ConvNextModel"),Dlo=o(" (ConvNext model)"),Glo=l(),fp=a("li"),cre=a("strong"),Olo=o("ctrl"),Vlo=o(" \u2014 "),SB=a("a"),Xlo=o("CTRLModel"),zlo=o(" (CTRL model)"),Qlo=l(),mp=a("li"),fre=a("strong"),Wlo=o("data2vec-audio"),Hlo=o(" \u2014 "),RB=a("a"),Ulo=o("Data2VecAudioModel"),Jlo=o(" (Data2VecAudio model)"),Ylo=l(),gp=a("li"),mre=a("strong"),Klo=o("data2vec-text"),Zlo=o(" \u2014 "),BB=a("a"),eio=o("Data2VecTextModel"),oio=o(" (Data2VecText model)"),rio=l(),hp=a("li"),gre=a("strong"),tio=o("data2vec-vision"),aio=o(" \u2014 "),PB=a("a"),nio=o("Data2VecVisionModel"),sio=o(" (Data2VecVision model)"),lio=l(),pp=a("li"),hre=a("strong"),iio=o("deberta"),dio=o(" \u2014 "),$B=a("a"),cio=o("DebertaModel"),fio=o(" (DeBERTa model)"),mio=l(),_p=a("li"),pre=a("strong"),gio=o("deberta-v2"),hio=o(" \u2014 "),IB=a("a"),pio=o("DebertaV2Model"),_io=o(" (DeBERTa-v2 model)"),uio=l(),up=a("li"),_re=a("strong"),bio=o("decision_transformer"),vio=o(" \u2014 "),qB=a("a"),Fio=o("DecisionTransformerModel"),Tio=o(" (Decision Transformer model)"),Mio=l(),bp=a("li"),ure=a("strong"),Eio=o("deit"),Cio=o(" \u2014 "),NB=a("a"),wio=o("DeiTModel"),Aio=o(" (DeiT model)"),yio=l(),vp=a("li"),bre=a("strong"),Lio=o("detr"),xio=o(" \u2014 "),jB=a("a"),kio=o("DetrModel"),Sio=o(" (DETR model)"),Rio=l(),Fp=a("li"),vre=a("strong"),Bio=o("distilbert"),Pio=o(" \u2014 "),DB=a("a"),$io=o("DistilBertModel"),Iio=o(" (DistilBERT model)"),qio=l(),Tp=a("li"),Fre=a("strong"),Nio=o("dpr"),jio=o(" \u2014 "),GB=a("a"),Dio=o("DPRQuestionEncoder"),Gio=o(" (DPR model)"),Oio=l(),Mp=a("li"),Tre=a("strong"),Vio=o("dpt"),Xio=o(" \u2014 "),OB=a("a"),zio=o("DPTModel"),Qio=o(" (DPT model)"),Wio=l(),Ep=a("li"),Mre=a("strong"),Hio=o("electra"),Uio=o(" \u2014 "),VB=a("a"),Jio=o("ElectraModel"),Yio=o(" (ELECTRA model)"),Kio=l(),Cp=a("li"),Ere=a("strong"),Zio=o("flaubert"),edo=o(" \u2014 "),XB=a("a"),odo=o("FlaubertModel"),rdo=o(" (FlauBERT model)"),tdo=l(),wp=a("li"),Cre=a("strong"),ado=o("fnet"),ndo=o(" \u2014 "),zB=a("a"),sdo=o("FNetModel"),ldo=o(" (FNet model)"),ido=l(),Ap=a("li"),wre=a("strong"),ddo=o("fsmt"),cdo=o(" \u2014 "),QB=a("a"),fdo=o("FSMTModel"),mdo=o(" (FairSeq Machine-Translation model)"),gdo=l(),Gs=a("li"),Are=a("strong"),hdo=o("funnel"),pdo=o(" \u2014 "),WB=a("a"),_do=o("FunnelModel"),udo=o(" or "),HB=a("a"),bdo=o("FunnelBaseModel"),vdo=o(" (Funnel Transformer model)"),Fdo=l(),yp=a("li"),yre=a("strong"),Tdo=o("glpn"),Mdo=o(" \u2014 "),UB=a("a"),Edo=o("GLPNModel"),Cdo=o(" (GLPN model)"),wdo=l(),Lp=a("li"),Lre=a("strong"),Ado=o("gpt2"),ydo=o(" \u2014 "),JB=a("a"),Ldo=o("GPT2Model"),xdo=o(" (OpenAI GPT-2 model)"),kdo=l(),xp=a("li"),xre=a("strong"),Sdo=o("gpt_neo"),Rdo=o(" \u2014 "),YB=a("a"),Bdo=o("GPTNeoModel"),Pdo=o(" (GPT Neo model)"),$do=l(),kp=a("li"),kre=a("strong"),Ido=o("gptj"),qdo=o(" \u2014 "),KB=a("a"),Ndo=o("GPTJModel"),jdo=o(" (GPT-J model)"),Ddo=l(),Sp=a("li"),Sre=a("strong"),Gdo=o("hubert"),Odo=o(" \u2014 "),ZB=a("a"),Vdo=o("HubertModel"),Xdo=o(" (Hubert model)"),zdo=l(),Rp=a("li"),Rre=a("strong"),Qdo=o("ibert"),Wdo=o(" \u2014 "),eP=a("a"),Hdo=o("IBertModel"),Udo=o(" (I-BERT model)"),Jdo=l(),Bp=a("li"),Bre=a("strong"),Ydo=o("imagegpt"),Kdo=o(" \u2014 "),oP=a("a"),Zdo=o("ImageGPTModel"),eco=o(" (ImageGPT model)"),oco=l(),Pp=a("li"),Pre=a("strong"),rco=o("layoutlm"),tco=o(" \u2014 "),rP=a("a"),aco=o("LayoutLMModel"),nco=o(" (LayoutLM model)"),sco=l(),$p=a("li"),$re=a("strong"),lco=o("layoutlmv2"),ico=o(" \u2014 "),tP=a("a"),dco=o("LayoutLMv2Model"),cco=o(" (LayoutLMv2 model)"),fco=l(),Ip=a("li"),Ire=a("strong"),mco=o("led"),gco=o(" \u2014 "),aP=a("a"),hco=o("LEDModel"),pco=o(" (LED model)"),_co=l(),qp=a("li"),qre=a("strong"),uco=o("longformer"),bco=o(" \u2014 "),nP=a("a"),vco=o("LongformerModel"),Fco=o(" (Longformer model)"),Tco=l(),Np=a("li"),Nre=a("strong"),Mco=o("luke"),Eco=o(" \u2014 "),sP=a("a"),Cco=o("LukeModel"),wco=o(" (LUKE model)"),Aco=l(),jp=a("li"),jre=a("strong"),yco=o("lxmert"),Lco=o(" \u2014 "),lP=a("a"),xco=o("LxmertModel"),kco=o(" (LXMERT model)"),Sco=l(),Dp=a("li"),Dre=a("strong"),Rco=o("m2m_100"),Bco=o(" \u2014 "),iP=a("a"),Pco=o("M2M100Model"),$co=o(" (M2M100 model)"),Ico=l(),Gp=a("li"),Gre=a("strong"),qco=o("marian"),Nco=o(" \u2014 "),dP=a("a"),jco=o("MarianModel"),Dco=o(" (Marian model)"),Gco=l(),Op=a("li"),Ore=a("strong"),Oco=o("maskformer"),Vco=o(" \u2014 "),cP=a("a"),Xco=o("MaskFormerModel"),zco=o(" (MaskFormer model)"),Qco=l(),Vp=a("li"),Vre=a("strong"),Wco=o("mbart"),Hco=o(" \u2014 "),fP=a("a"),Uco=o("MBartModel"),Jco=o(" (mBART model)"),Yco=l(),Xp=a("li"),Xre=a("strong"),Kco=o("megatron-bert"),Zco=o(" \u2014 "),mP=a("a"),efo=o("MegatronBertModel"),ofo=o(" (MegatronBert model)"),rfo=l(),zp=a("li"),zre=a("strong"),tfo=o("mobilebert"),afo=o(" \u2014 "),gP=a("a"),nfo=o("MobileBertModel"),sfo=o(" (MobileBERT model)"),lfo=l(),Qp=a("li"),Qre=a("strong"),ifo=o("mpnet"),dfo=o(" \u2014 "),hP=a("a"),cfo=o("MPNetModel"),ffo=o(" (MPNet model)"),mfo=l(),Wp=a("li"),Wre=a("strong"),gfo=o("mt5"),hfo=o(" \u2014 "),pP=a("a"),pfo=o("MT5Model"),_fo=o(" (mT5 model)"),ufo=l(),Hp=a("li"),Hre=a("strong"),bfo=o("nystromformer"),vfo=o(" \u2014 "),_P=a("a"),Ffo=o("NystromformerModel"),Tfo=o(" (Nystromformer model)"),Mfo=l(),Up=a("li"),Ure=a("strong"),Efo=o("openai-gpt"),Cfo=o(" \u2014 "),uP=a("a"),wfo=o("OpenAIGPTModel"),Afo=o(" (OpenAI GPT model)"),yfo=l(),Jp=a("li"),Jre=a("strong"),Lfo=o("pegasus"),xfo=o(" \u2014 "),bP=a("a"),kfo=o("PegasusModel"),Sfo=o(" (Pegasus model)"),Rfo=l(),Yp=a("li"),Yre=a("strong"),Bfo=o("perceiver"),Pfo=o(" \u2014 "),vP=a("a"),$fo=o("PerceiverModel"),Ifo=o(" (Perceiver model)"),qfo=l(),Kp=a("li"),Kre=a("strong"),Nfo=o("plbart"),jfo=o(" \u2014 "),FP=a("a"),Dfo=o("PLBartModel"),Gfo=o(" (PLBart model)"),Ofo=l(),Zp=a("li"),Zre=a("strong"),Vfo=o("poolformer"),Xfo=o(" \u2014 "),TP=a("a"),zfo=o("PoolFormerModel"),Qfo=o(" (PoolFormer model)"),Wfo=l(),e_=a("li"),ete=a("strong"),Hfo=o("prophetnet"),Ufo=o(" \u2014 "),MP=a("a"),Jfo=o("ProphetNetModel"),Yfo=o(" (ProphetNet model)"),Kfo=l(),o_=a("li"),ote=a("strong"),Zfo=o("qdqbert"),emo=o(" \u2014 "),EP=a("a"),omo=o("QDQBertModel"),rmo=o(" (QDQBert model)"),tmo=l(),r_=a("li"),rte=a("strong"),amo=o("reformer"),nmo=o(" \u2014 "),CP=a("a"),smo=o("ReformerModel"),lmo=o(" (Reformer model)"),imo=l(),t_=a("li"),tte=a("strong"),dmo=o("regnet"),cmo=o(" \u2014 "),wP=a("a"),fmo=o("RegNetModel"),mmo=o(" (RegNet model)"),gmo=l(),a_=a("li"),ate=a("strong"),hmo=o("rembert"),pmo=o(" \u2014 "),AP=a("a"),_mo=o("RemBertModel"),umo=o(" (RemBERT model)"),bmo=l(),n_=a("li"),nte=a("strong"),vmo=o("resnet"),Fmo=o(" \u2014 "),yP=a("a"),Tmo=o("ResNetModel"),Mmo=o(" (ResNet model)"),Emo=l(),s_=a("li"),ste=a("strong"),Cmo=o("retribert"),wmo=o(" \u2014 "),LP=a("a"),Amo=o("RetriBertModel"),ymo=o(" (RetriBERT model)"),Lmo=l(),l_=a("li"),lte=a("strong"),xmo=o("roberta"),kmo=o(" \u2014 "),xP=a("a"),Smo=o("RobertaModel"),Rmo=o(" (RoBERTa model)"),Bmo=l(),i_=a("li"),ite=a("strong"),Pmo=o("roformer"),$mo=o(" \u2014 "),kP=a("a"),Imo=o("RoFormerModel"),qmo=o(" (RoFormer model)"),Nmo=l(),d_=a("li"),dte=a("strong"),jmo=o("segformer"),Dmo=o(" \u2014 "),SP=a("a"),Gmo=o("SegformerModel"),Omo=o(" (SegFormer model)"),Vmo=l(),c_=a("li"),cte=a("strong"),Xmo=o("sew"),zmo=o(" \u2014 "),RP=a("a"),Qmo=o("SEWModel"),Wmo=o(" (SEW model)"),Hmo=l(),f_=a("li"),fte=a("strong"),Umo=o("sew-d"),Jmo=o(" \u2014 "),BP=a("a"),Ymo=o("SEWDModel"),Kmo=o(" (SEW-D model)"),Zmo=l(),m_=a("li"),mte=a("strong"),ego=o("speech_to_text"),ogo=o(" \u2014 "),PP=a("a"),rgo=o("Speech2TextModel"),tgo=o(" (Speech2Text model)"),ago=l(),g_=a("li"),gte=a("strong"),ngo=o("splinter"),sgo=o(" \u2014 "),$P=a("a"),lgo=o("SplinterModel"),igo=o(" (Splinter model)"),dgo=l(),h_=a("li"),hte=a("strong"),cgo=o("squeezebert"),fgo=o(" \u2014 "),IP=a("a"),mgo=o("SqueezeBertModel"),ggo=o(" (SqueezeBERT model)"),hgo=l(),p_=a("li"),pte=a("strong"),pgo=o("swin"),_go=o(" \u2014 "),qP=a("a"),ugo=o("SwinModel"),bgo=o(" (Swin model)"),vgo=l(),__=a("li"),_te=a("strong"),Fgo=o("t5"),Tgo=o(" \u2014 "),NP=a("a"),Mgo=o("T5Model"),Ego=o(" (T5 model)"),Cgo=l(),u_=a("li"),ute=a("strong"),wgo=o("tapas"),Ago=o(" \u2014 "),jP=a("a"),ygo=o("TapasModel"),Lgo=o(" (TAPAS model)"),xgo=l(),b_=a("li"),bte=a("strong"),kgo=o("transfo-xl"),Sgo=o(" \u2014 "),DP=a("a"),Rgo=o("TransfoXLModel"),Bgo=o(" (Transformer-XL model)"),Pgo=l(),v_=a("li"),vte=a("strong"),$go=o("unispeech"),Igo=o(" \u2014 "),GP=a("a"),qgo=o("UniSpeechModel"),Ngo=o(" (UniSpeech model)"),jgo=l(),F_=a("li"),Fte=a("strong"),Dgo=o("unispeech-sat"),Ggo=o(" \u2014 "),OP=a("a"),Ogo=o("UniSpeechSatModel"),Vgo=o(" (UniSpeechSat model)"),Xgo=l(),T_=a("li"),Tte=a("strong"),zgo=o("van"),Qgo=o(" \u2014 "),VP=a("a"),Wgo=o("VanModel"),Hgo=o(" (VAN model)"),Ugo=l(),M_=a("li"),Mte=a("strong"),Jgo=o("vilt"),Ygo=o(" \u2014 "),XP=a("a"),Kgo=o("ViltModel"),Zgo=o(" (ViLT model)"),eho=l(),E_=a("li"),Ete=a("strong"),oho=o("vision-text-dual-encoder"),rho=o(" \u2014 "),zP=a("a"),tho=o("VisionTextDualEncoderModel"),aho=o(" (VisionTextDualEncoder model)"),nho=l(),C_=a("li"),Cte=a("strong"),sho=o("visual_bert"),lho=o(" \u2014 "),QP=a("a"),iho=o("VisualBertModel"),dho=o(" (VisualBert model)"),cho=l(),w_=a("li"),wte=a("strong"),fho=o("vit"),mho=o(" \u2014 "),WP=a("a"),gho=o("ViTModel"),hho=o(" (ViT model)"),pho=l(),A_=a("li"),Ate=a("strong"),_ho=o("vit_mae"),uho=o(" \u2014 "),HP=a("a"),bho=o("ViTMAEModel"),vho=o(" (ViTMAE model)"),Fho=l(),y_=a("li"),yte=a("strong"),Tho=o("wav2vec2"),Mho=o(" \u2014 "),UP=a("a"),Eho=o("Wav2Vec2Model"),Cho=o(" (Wav2Vec2 model)"),who=l(),L_=a("li"),Lte=a("strong"),Aho=o("wavlm"),yho=o(" \u2014 "),JP=a("a"),Lho=o("WavLMModel"),xho=o(" (WavLM model)"),kho=l(),x_=a("li"),xte=a("strong"),Sho=o("xglm"),Rho=o(" \u2014 "),YP=a("a"),Bho=o("XGLMModel"),Pho=o(" (XGLM model)"),$ho=l(),k_=a("li"),kte=a("strong"),Iho=o("xlm"),qho=o(" \u2014 "),KP=a("a"),Nho=o("XLMModel"),jho=o(" (XLM model)"),Dho=l(),S_=a("li"),Ste=a("strong"),Gho=o("xlm-prophetnet"),Oho=o(" \u2014 "),ZP=a("a"),Vho=o("XLMProphetNetModel"),Xho=o(" (XLMProphetNet model)"),zho=l(),R_=a("li"),Rte=a("strong"),Qho=o("xlm-roberta"),Who=o(" \u2014 "),e$=a("a"),Hho=o("XLMRobertaModel"),Uho=o(" (XLM-RoBERTa model)"),Jho=l(),B_=a("li"),Bte=a("strong"),Yho=o("xlm-roberta-xl"),Kho=o(" \u2014 "),o$=a("a"),Zho=o("XLMRobertaXLModel"),epo=o(" (XLM-RoBERTa-XL model)"),opo=l(),P_=a("li"),Pte=a("strong"),rpo=o("xlnet"),tpo=o(" \u2014 "),r$=a("a"),apo=o("XLNetModel"),npo=o(" (XLNet model)"),spo=l(),$_=a("li"),$te=a("strong"),lpo=o("yoso"),ipo=o(" \u2014 "),t$=a("a"),dpo=o("YosoModel"),cpo=o(" (YOSO model)"),fpo=l(),I_=a("p"),mpo=o("The model is set in evaluation mode by default using "),Ite=a("code"),gpo=o("model.eval()"),hpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=a("code"),ppo=o("model.train()"),_po=l(),Nte=a("p"),upo=o("Examples:"),bpo=l(),f(h6.$$.fragment),WRe=l(),od=a("h2"),q_=a("a"),jte=a("span"),f(p6.$$.fragment),vpo=l(),Dte=a("span"),Fpo=o("AutoModelForPreTraining"),HRe=l(),Yo=a("div"),f(_6.$$.fragment),Tpo=l(),rd=a("p"),Mpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),a$=a("a"),Epo=o("from_pretrained()"),Cpo=o(" class method or the "),n$=a("a"),wpo=o("from_config()"),Apo=o(` class
method.`),ypo=l(),u6=a("p"),Lpo=o("This class cannot be instantiated directly using "),Gte=a("code"),xpo=o("__init__()"),kpo=o(" (throws an error)."),Spo=l(),zr=a("div"),f(b6.$$.fragment),Rpo=l(),Ote=a("p"),Bpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ppo=l(),td=a("p"),$po=o(`Note:
Loading a model from its configuration file does `),Vte=a("strong"),Ipo=o("not"),qpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s$=a("a"),Npo=o("from_pretrained()"),jpo=o(" to load the model weights."),Dpo=l(),Xte=a("p"),Gpo=o("Examples:"),Opo=l(),f(v6.$$.fragment),Vpo=l(),Ne=a("div"),f(F6.$$.fragment),Xpo=l(),zte=a("p"),zpo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Qpo=l(),za=a("p"),Wpo=o("The model class to instantiate is selected based on the "),Qte=a("code"),Hpo=o("model_type"),Upo=o(` property of the config object (either
passed as an argument or loaded from `),Wte=a("code"),Jpo=o("pretrained_model_name_or_path"),Ypo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hte=a("code"),Kpo=o("pretrained_model_name_or_path"),Zpo=o(":"),e_o=l(),S=a("ul"),N_=a("li"),Ute=a("strong"),o_o=o("albert"),r_o=o(" \u2014 "),l$=a("a"),t_o=o("AlbertForPreTraining"),a_o=o(" (ALBERT model)"),n_o=l(),j_=a("li"),Jte=a("strong"),s_o=o("bart"),l_o=o(" \u2014 "),i$=a("a"),i_o=o("BartForConditionalGeneration"),d_o=o(" (BART model)"),c_o=l(),D_=a("li"),Yte=a("strong"),f_o=o("bert"),m_o=o(" \u2014 "),d$=a("a"),g_o=o("BertForPreTraining"),h_o=o(" (BERT model)"),p_o=l(),G_=a("li"),Kte=a("strong"),__o=o("big_bird"),u_o=o(" \u2014 "),c$=a("a"),b_o=o("BigBirdForPreTraining"),v_o=o(" (BigBird model)"),F_o=l(),O_=a("li"),Zte=a("strong"),T_o=o("camembert"),M_o=o(" \u2014 "),f$=a("a"),E_o=o("CamembertForMaskedLM"),C_o=o(" (CamemBERT model)"),w_o=l(),V_=a("li"),eae=a("strong"),A_o=o("ctrl"),y_o=o(" \u2014 "),m$=a("a"),L_o=o("CTRLLMHeadModel"),x_o=o(" (CTRL model)"),k_o=l(),X_=a("li"),oae=a("strong"),S_o=o("data2vec-text"),R_o=o(" \u2014 "),g$=a("a"),B_o=o("Data2VecTextForMaskedLM"),P_o=o(" (Data2VecText model)"),$_o=l(),z_=a("li"),rae=a("strong"),I_o=o("deberta"),q_o=o(" \u2014 "),h$=a("a"),N_o=o("DebertaForMaskedLM"),j_o=o(" (DeBERTa model)"),D_o=l(),Q_=a("li"),tae=a("strong"),G_o=o("deberta-v2"),O_o=o(" \u2014 "),p$=a("a"),V_o=o("DebertaV2ForMaskedLM"),X_o=o(" (DeBERTa-v2 model)"),z_o=l(),W_=a("li"),aae=a("strong"),Q_o=o("distilbert"),W_o=o(" \u2014 "),_$=a("a"),H_o=o("DistilBertForMaskedLM"),U_o=o(" (DistilBERT model)"),J_o=l(),H_=a("li"),nae=a("strong"),Y_o=o("electra"),K_o=o(" \u2014 "),u$=a("a"),Z_o=o("ElectraForPreTraining"),euo=o(" (ELECTRA model)"),ouo=l(),U_=a("li"),sae=a("strong"),ruo=o("flaubert"),tuo=o(" \u2014 "),b$=a("a"),auo=o("FlaubertWithLMHeadModel"),nuo=o(" (FlauBERT model)"),suo=l(),J_=a("li"),lae=a("strong"),luo=o("fnet"),iuo=o(" \u2014 "),v$=a("a"),duo=o("FNetForPreTraining"),cuo=o(" (FNet model)"),fuo=l(),Y_=a("li"),iae=a("strong"),muo=o("fsmt"),guo=o(" \u2014 "),F$=a("a"),huo=o("FSMTForConditionalGeneration"),puo=o(" (FairSeq Machine-Translation model)"),_uo=l(),K_=a("li"),dae=a("strong"),uuo=o("funnel"),buo=o(" \u2014 "),T$=a("a"),vuo=o("FunnelForPreTraining"),Fuo=o(" (Funnel Transformer model)"),Tuo=l(),Z_=a("li"),cae=a("strong"),Muo=o("gpt2"),Euo=o(" \u2014 "),M$=a("a"),Cuo=o("GPT2LMHeadModel"),wuo=o(" (OpenAI GPT-2 model)"),Auo=l(),eu=a("li"),fae=a("strong"),yuo=o("ibert"),Luo=o(" \u2014 "),E$=a("a"),xuo=o("IBertForMaskedLM"),kuo=o(" (I-BERT model)"),Suo=l(),ou=a("li"),mae=a("strong"),Ruo=o("layoutlm"),Buo=o(" \u2014 "),C$=a("a"),Puo=o("LayoutLMForMaskedLM"),$uo=o(" (LayoutLM model)"),Iuo=l(),ru=a("li"),gae=a("strong"),quo=o("longformer"),Nuo=o(" \u2014 "),w$=a("a"),juo=o("LongformerForMaskedLM"),Duo=o(" (Longformer model)"),Guo=l(),tu=a("li"),hae=a("strong"),Ouo=o("lxmert"),Vuo=o(" \u2014 "),A$=a("a"),Xuo=o("LxmertForPreTraining"),zuo=o(" (LXMERT model)"),Quo=l(),au=a("li"),pae=a("strong"),Wuo=o("megatron-bert"),Huo=o(" \u2014 "),y$=a("a"),Uuo=o("MegatronBertForPreTraining"),Juo=o(" (MegatronBert model)"),Yuo=l(),nu=a("li"),_ae=a("strong"),Kuo=o("mobilebert"),Zuo=o(" \u2014 "),L$=a("a"),e1o=o("MobileBertForPreTraining"),o1o=o(" (MobileBERT model)"),r1o=l(),su=a("li"),uae=a("strong"),t1o=o("mpnet"),a1o=o(" \u2014 "),x$=a("a"),n1o=o("MPNetForMaskedLM"),s1o=o(" (MPNet model)"),l1o=l(),lu=a("li"),bae=a("strong"),i1o=o("openai-gpt"),d1o=o(" \u2014 "),k$=a("a"),c1o=o("OpenAIGPTLMHeadModel"),f1o=o(" (OpenAI GPT model)"),m1o=l(),iu=a("li"),vae=a("strong"),g1o=o("retribert"),h1o=o(" \u2014 "),S$=a("a"),p1o=o("RetriBertModel"),_1o=o(" (RetriBERT model)"),u1o=l(),du=a("li"),Fae=a("strong"),b1o=o("roberta"),v1o=o(" \u2014 "),R$=a("a"),F1o=o("RobertaForMaskedLM"),T1o=o(" (RoBERTa model)"),M1o=l(),cu=a("li"),Tae=a("strong"),E1o=o("squeezebert"),C1o=o(" \u2014 "),B$=a("a"),w1o=o("SqueezeBertForMaskedLM"),A1o=o(" (SqueezeBERT model)"),y1o=l(),fu=a("li"),Mae=a("strong"),L1o=o("t5"),x1o=o(" \u2014 "),P$=a("a"),k1o=o("T5ForConditionalGeneration"),S1o=o(" (T5 model)"),R1o=l(),mu=a("li"),Eae=a("strong"),B1o=o("tapas"),P1o=o(" \u2014 "),$$=a("a"),$1o=o("TapasForMaskedLM"),I1o=o(" (TAPAS model)"),q1o=l(),gu=a("li"),Cae=a("strong"),N1o=o("transfo-xl"),j1o=o(" \u2014 "),I$=a("a"),D1o=o("TransfoXLLMHeadModel"),G1o=o(" (Transformer-XL model)"),O1o=l(),hu=a("li"),wae=a("strong"),V1o=o("unispeech"),X1o=o(" \u2014 "),q$=a("a"),z1o=o("UniSpeechForPreTraining"),Q1o=o(" (UniSpeech model)"),W1o=l(),pu=a("li"),Aae=a("strong"),H1o=o("unispeech-sat"),U1o=o(" \u2014 "),N$=a("a"),J1o=o("UniSpeechSatForPreTraining"),Y1o=o(" (UniSpeechSat model)"),K1o=l(),_u=a("li"),yae=a("strong"),Z1o=o("visual_bert"),ebo=o(" \u2014 "),j$=a("a"),obo=o("VisualBertForPreTraining"),rbo=o(" (VisualBert model)"),tbo=l(),uu=a("li"),Lae=a("strong"),abo=o("vit_mae"),nbo=o(" \u2014 "),D$=a("a"),sbo=o("ViTMAEForPreTraining"),lbo=o(" (ViTMAE model)"),ibo=l(),bu=a("li"),xae=a("strong"),dbo=o("wav2vec2"),cbo=o(" \u2014 "),G$=a("a"),fbo=o("Wav2Vec2ForPreTraining"),mbo=o(" (Wav2Vec2 model)"),gbo=l(),vu=a("li"),kae=a("strong"),hbo=o("xlm"),pbo=o(" \u2014 "),O$=a("a"),_bo=o("XLMWithLMHeadModel"),ubo=o(" (XLM model)"),bbo=l(),Fu=a("li"),Sae=a("strong"),vbo=o("xlm-roberta"),Fbo=o(" \u2014 "),V$=a("a"),Tbo=o("XLMRobertaForMaskedLM"),Mbo=o(" (XLM-RoBERTa model)"),Ebo=l(),Tu=a("li"),Rae=a("strong"),Cbo=o("xlm-roberta-xl"),wbo=o(" \u2014 "),X$=a("a"),Abo=o("XLMRobertaXLForMaskedLM"),ybo=o(" (XLM-RoBERTa-XL model)"),Lbo=l(),Mu=a("li"),Bae=a("strong"),xbo=o("xlnet"),kbo=o(" \u2014 "),z$=a("a"),Sbo=o("XLNetLMHeadModel"),Rbo=o(" (XLNet model)"),Bbo=l(),Eu=a("p"),Pbo=o("The model is set in evaluation mode by default using "),Pae=a("code"),$bo=o("model.eval()"),Ibo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ae=a("code"),qbo=o("model.train()"),Nbo=l(),Iae=a("p"),jbo=o("Examples:"),Dbo=l(),f(T6.$$.fragment),URe=l(),ad=a("h2"),Cu=a("a"),qae=a("span"),f(M6.$$.fragment),Gbo=l(),Nae=a("span"),Obo=o("AutoModelForCausalLM"),JRe=l(),Ko=a("div"),f(E6.$$.fragment),Vbo=l(),nd=a("p"),Xbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Q$=a("a"),zbo=o("from_pretrained()"),Qbo=o(" class method or the "),W$=a("a"),Wbo=o("from_config()"),Hbo=o(` class
method.`),Ubo=l(),C6=a("p"),Jbo=o("This class cannot be instantiated directly using "),jae=a("code"),Ybo=o("__init__()"),Kbo=o(" (throws an error)."),Zbo=l(),Qr=a("div"),f(w6.$$.fragment),e2o=l(),Dae=a("p"),o2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r2o=l(),sd=a("p"),t2o=o(`Note:
Loading a model from its configuration file does `),Gae=a("strong"),a2o=o("not"),n2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),H$=a("a"),s2o=o("from_pretrained()"),l2o=o(" to load the model weights."),i2o=l(),Oae=a("p"),d2o=o("Examples:"),c2o=l(),f(A6.$$.fragment),f2o=l(),je=a("div"),f(y6.$$.fragment),m2o=l(),Vae=a("p"),g2o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),h2o=l(),Qa=a("p"),p2o=o("The model class to instantiate is selected based on the "),Xae=a("code"),_2o=o("model_type"),u2o=o(` property of the config object (either
passed as an argument or loaded from `),zae=a("code"),b2o=o("pretrained_model_name_or_path"),v2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=a("code"),F2o=o("pretrained_model_name_or_path"),T2o=o(":"),M2o=l(),$=a("ul"),wu=a("li"),Wae=a("strong"),E2o=o("bart"),C2o=o(" \u2014 "),U$=a("a"),w2o=o("BartForCausalLM"),A2o=o(" (BART model)"),y2o=l(),Au=a("li"),Hae=a("strong"),L2o=o("bert"),x2o=o(" \u2014 "),J$=a("a"),k2o=o("BertLMHeadModel"),S2o=o(" (BERT model)"),R2o=l(),yu=a("li"),Uae=a("strong"),B2o=o("bert-generation"),P2o=o(" \u2014 "),Y$=a("a"),$2o=o("BertGenerationDecoder"),I2o=o(" (Bert Generation model)"),q2o=l(),Lu=a("li"),Jae=a("strong"),N2o=o("big_bird"),j2o=o(" \u2014 "),K$=a("a"),D2o=o("BigBirdForCausalLM"),G2o=o(" (BigBird model)"),O2o=l(),xu=a("li"),Yae=a("strong"),V2o=o("bigbird_pegasus"),X2o=o(" \u2014 "),Z$=a("a"),z2o=o("BigBirdPegasusForCausalLM"),Q2o=o(" (BigBirdPegasus model)"),W2o=l(),ku=a("li"),Kae=a("strong"),H2o=o("blenderbot"),U2o=o(" \u2014 "),eI=a("a"),J2o=o("BlenderbotForCausalLM"),Y2o=o(" (Blenderbot model)"),K2o=l(),Su=a("li"),Zae=a("strong"),Z2o=o("blenderbot-small"),evo=o(" \u2014 "),oI=a("a"),ovo=o("BlenderbotSmallForCausalLM"),rvo=o(" (BlenderbotSmall model)"),tvo=l(),Ru=a("li"),ene=a("strong"),avo=o("camembert"),nvo=o(" \u2014 "),rI=a("a"),svo=o("CamembertForCausalLM"),lvo=o(" (CamemBERT model)"),ivo=l(),Bu=a("li"),one=a("strong"),dvo=o("ctrl"),cvo=o(" \u2014 "),tI=a("a"),fvo=o("CTRLLMHeadModel"),mvo=o(" (CTRL model)"),gvo=l(),Pu=a("li"),rne=a("strong"),hvo=o("data2vec-text"),pvo=o(" \u2014 "),aI=a("a"),_vo=o("Data2VecTextForCausalLM"),uvo=o(" (Data2VecText model)"),bvo=l(),$u=a("li"),tne=a("strong"),vvo=o("electra"),Fvo=o(" \u2014 "),nI=a("a"),Tvo=o("ElectraForCausalLM"),Mvo=o(" (ELECTRA model)"),Evo=l(),Iu=a("li"),ane=a("strong"),Cvo=o("gpt2"),wvo=o(" \u2014 "),sI=a("a"),Avo=o("GPT2LMHeadModel"),yvo=o(" (OpenAI GPT-2 model)"),Lvo=l(),qu=a("li"),nne=a("strong"),xvo=o("gpt_neo"),kvo=o(" \u2014 "),lI=a("a"),Svo=o("GPTNeoForCausalLM"),Rvo=o(" (GPT Neo model)"),Bvo=l(),Nu=a("li"),sne=a("strong"),Pvo=o("gptj"),$vo=o(" \u2014 "),iI=a("a"),Ivo=o("GPTJForCausalLM"),qvo=o(" (GPT-J model)"),Nvo=l(),ju=a("li"),lne=a("strong"),jvo=o("marian"),Dvo=o(" \u2014 "),dI=a("a"),Gvo=o("MarianForCausalLM"),Ovo=o(" (Marian model)"),Vvo=l(),Du=a("li"),ine=a("strong"),Xvo=o("mbart"),zvo=o(" \u2014 "),cI=a("a"),Qvo=o("MBartForCausalLM"),Wvo=o(" (mBART model)"),Hvo=l(),Gu=a("li"),dne=a("strong"),Uvo=o("megatron-bert"),Jvo=o(" \u2014 "),fI=a("a"),Yvo=o("MegatronBertForCausalLM"),Kvo=o(" (MegatronBert model)"),Zvo=l(),Ou=a("li"),cne=a("strong"),eFo=o("openai-gpt"),oFo=o(" \u2014 "),mI=a("a"),rFo=o("OpenAIGPTLMHeadModel"),tFo=o(" (OpenAI GPT model)"),aFo=l(),Vu=a("li"),fne=a("strong"),nFo=o("pegasus"),sFo=o(" \u2014 "),gI=a("a"),lFo=o("PegasusForCausalLM"),iFo=o(" (Pegasus model)"),dFo=l(),Xu=a("li"),mne=a("strong"),cFo=o("plbart"),fFo=o(" \u2014 "),hI=a("a"),mFo=o("PLBartForCausalLM"),gFo=o(" (PLBart model)"),hFo=l(),zu=a("li"),gne=a("strong"),pFo=o("prophetnet"),_Fo=o(" \u2014 "),pI=a("a"),uFo=o("ProphetNetForCausalLM"),bFo=o(" (ProphetNet model)"),vFo=l(),Qu=a("li"),hne=a("strong"),FFo=o("qdqbert"),TFo=o(" \u2014 "),_I=a("a"),MFo=o("QDQBertLMHeadModel"),EFo=o(" (QDQBert model)"),CFo=l(),Wu=a("li"),pne=a("strong"),wFo=o("reformer"),AFo=o(" \u2014 "),uI=a("a"),yFo=o("ReformerModelWithLMHead"),LFo=o(" (Reformer model)"),xFo=l(),Hu=a("li"),_ne=a("strong"),kFo=o("rembert"),SFo=o(" \u2014 "),bI=a("a"),RFo=o("RemBertForCausalLM"),BFo=o(" (RemBERT model)"),PFo=l(),Uu=a("li"),une=a("strong"),$Fo=o("roberta"),IFo=o(" \u2014 "),vI=a("a"),qFo=o("RobertaForCausalLM"),NFo=o(" (RoBERTa model)"),jFo=l(),Ju=a("li"),bne=a("strong"),DFo=o("roformer"),GFo=o(" \u2014 "),FI=a("a"),OFo=o("RoFormerForCausalLM"),VFo=o(" (RoFormer model)"),XFo=l(),Yu=a("li"),vne=a("strong"),zFo=o("speech_to_text_2"),QFo=o(" \u2014 "),TI=a("a"),WFo=o("Speech2Text2ForCausalLM"),HFo=o(" (Speech2Text2 model)"),UFo=l(),Ku=a("li"),Fne=a("strong"),JFo=o("transfo-xl"),YFo=o(" \u2014 "),MI=a("a"),KFo=o("TransfoXLLMHeadModel"),ZFo=o(" (Transformer-XL model)"),eTo=l(),Zu=a("li"),Tne=a("strong"),oTo=o("trocr"),rTo=o(" \u2014 "),EI=a("a"),tTo=o("TrOCRForCausalLM"),aTo=o(" (TrOCR model)"),nTo=l(),e1=a("li"),Mne=a("strong"),sTo=o("xglm"),lTo=o(" \u2014 "),CI=a("a"),iTo=o("XGLMForCausalLM"),dTo=o(" (XGLM model)"),cTo=l(),o1=a("li"),Ene=a("strong"),fTo=o("xlm"),mTo=o(" \u2014 "),wI=a("a"),gTo=o("XLMWithLMHeadModel"),hTo=o(" (XLM model)"),pTo=l(),r1=a("li"),Cne=a("strong"),_To=o("xlm-prophetnet"),uTo=o(" \u2014 "),AI=a("a"),bTo=o("XLMProphetNetForCausalLM"),vTo=o(" (XLMProphetNet model)"),FTo=l(),t1=a("li"),wne=a("strong"),TTo=o("xlm-roberta"),MTo=o(" \u2014 "),yI=a("a"),ETo=o("XLMRobertaForCausalLM"),CTo=o(" (XLM-RoBERTa model)"),wTo=l(),a1=a("li"),Ane=a("strong"),ATo=o("xlm-roberta-xl"),yTo=o(" \u2014 "),LI=a("a"),LTo=o("XLMRobertaXLForCausalLM"),xTo=o(" (XLM-RoBERTa-XL model)"),kTo=l(),n1=a("li"),yne=a("strong"),STo=o("xlnet"),RTo=o(" \u2014 "),xI=a("a"),BTo=o("XLNetLMHeadModel"),PTo=o(" (XLNet model)"),$To=l(),s1=a("p"),ITo=o("The model is set in evaluation mode by default using "),Lne=a("code"),qTo=o("model.eval()"),NTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=a("code"),jTo=o("model.train()"),DTo=l(),kne=a("p"),GTo=o("Examples:"),OTo=l(),f(L6.$$.fragment),YRe=l(),ld=a("h2"),l1=a("a"),Sne=a("span"),f(x6.$$.fragment),VTo=l(),Rne=a("span"),XTo=o("AutoModelForMaskedLM"),KRe=l(),Zo=a("div"),f(k6.$$.fragment),zTo=l(),id=a("p"),QTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kI=a("a"),WTo=o("from_pretrained()"),HTo=o(" class method or the "),SI=a("a"),UTo=o("from_config()"),JTo=o(` class
method.`),YTo=l(),S6=a("p"),KTo=o("This class cannot be instantiated directly using "),Bne=a("code"),ZTo=o("__init__()"),eMo=o(" (throws an error)."),oMo=l(),Wr=a("div"),f(R6.$$.fragment),rMo=l(),Pne=a("p"),tMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),aMo=l(),dd=a("p"),nMo=o(`Note:
Loading a model from its configuration file does `),$ne=a("strong"),sMo=o("not"),lMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),iMo=o("from_pretrained()"),dMo=o(" to load the model weights."),cMo=l(),Ine=a("p"),fMo=o("Examples:"),mMo=l(),f(B6.$$.fragment),gMo=l(),De=a("div"),f(P6.$$.fragment),hMo=l(),qne=a("p"),pMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Mo=l(),Wa=a("p"),uMo=o("The model class to instantiate is selected based on the "),Nne=a("code"),bMo=o("model_type"),vMo=o(` property of the config object (either
passed as an argument or loaded from `),jne=a("code"),FMo=o("pretrained_model_name_or_path"),TMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=a("code"),MMo=o("pretrained_model_name_or_path"),EMo=o(":"),CMo=l(),I=a("ul"),i1=a("li"),Gne=a("strong"),wMo=o("albert"),AMo=o(" \u2014 "),BI=a("a"),yMo=o("AlbertForMaskedLM"),LMo=o(" (ALBERT model)"),xMo=l(),d1=a("li"),One=a("strong"),kMo=o("bart"),SMo=o(" \u2014 "),PI=a("a"),RMo=o("BartForConditionalGeneration"),BMo=o(" (BART model)"),PMo=l(),c1=a("li"),Vne=a("strong"),$Mo=o("bert"),IMo=o(" \u2014 "),$I=a("a"),qMo=o("BertForMaskedLM"),NMo=o(" (BERT model)"),jMo=l(),f1=a("li"),Xne=a("strong"),DMo=o("big_bird"),GMo=o(" \u2014 "),II=a("a"),OMo=o("BigBirdForMaskedLM"),VMo=o(" (BigBird model)"),XMo=l(),m1=a("li"),zne=a("strong"),zMo=o("camembert"),QMo=o(" \u2014 "),qI=a("a"),WMo=o("CamembertForMaskedLM"),HMo=o(" (CamemBERT model)"),UMo=l(),g1=a("li"),Qne=a("strong"),JMo=o("convbert"),YMo=o(" \u2014 "),NI=a("a"),KMo=o("ConvBertForMaskedLM"),ZMo=o(" (ConvBERT model)"),e4o=l(),h1=a("li"),Wne=a("strong"),o4o=o("data2vec-text"),r4o=o(" \u2014 "),jI=a("a"),t4o=o("Data2VecTextForMaskedLM"),a4o=o(" (Data2VecText model)"),n4o=l(),p1=a("li"),Hne=a("strong"),s4o=o("deberta"),l4o=o(" \u2014 "),DI=a("a"),i4o=o("DebertaForMaskedLM"),d4o=o(" (DeBERTa model)"),c4o=l(),_1=a("li"),Une=a("strong"),f4o=o("deberta-v2"),m4o=o(" \u2014 "),GI=a("a"),g4o=o("DebertaV2ForMaskedLM"),h4o=o(" (DeBERTa-v2 model)"),p4o=l(),u1=a("li"),Jne=a("strong"),_4o=o("distilbert"),u4o=o(" \u2014 "),OI=a("a"),b4o=o("DistilBertForMaskedLM"),v4o=o(" (DistilBERT model)"),F4o=l(),b1=a("li"),Yne=a("strong"),T4o=o("electra"),M4o=o(" \u2014 "),VI=a("a"),E4o=o("ElectraForMaskedLM"),C4o=o(" (ELECTRA model)"),w4o=l(),v1=a("li"),Kne=a("strong"),A4o=o("flaubert"),y4o=o(" \u2014 "),XI=a("a"),L4o=o("FlaubertWithLMHeadModel"),x4o=o(" (FlauBERT model)"),k4o=l(),F1=a("li"),Zne=a("strong"),S4o=o("fnet"),R4o=o(" \u2014 "),zI=a("a"),B4o=o("FNetForMaskedLM"),P4o=o(" (FNet model)"),$4o=l(),T1=a("li"),ese=a("strong"),I4o=o("funnel"),q4o=o(" \u2014 "),QI=a("a"),N4o=o("FunnelForMaskedLM"),j4o=o(" (Funnel Transformer model)"),D4o=l(),M1=a("li"),ose=a("strong"),G4o=o("ibert"),O4o=o(" \u2014 "),WI=a("a"),V4o=o("IBertForMaskedLM"),X4o=o(" (I-BERT model)"),z4o=l(),E1=a("li"),rse=a("strong"),Q4o=o("layoutlm"),W4o=o(" \u2014 "),HI=a("a"),H4o=o("LayoutLMForMaskedLM"),U4o=o(" (LayoutLM model)"),J4o=l(),C1=a("li"),tse=a("strong"),Y4o=o("longformer"),K4o=o(" \u2014 "),UI=a("a"),Z4o=o("LongformerForMaskedLM"),eEo=o(" (Longformer model)"),oEo=l(),w1=a("li"),ase=a("strong"),rEo=o("mbart"),tEo=o(" \u2014 "),JI=a("a"),aEo=o("MBartForConditionalGeneration"),nEo=o(" (mBART model)"),sEo=l(),A1=a("li"),nse=a("strong"),lEo=o("megatron-bert"),iEo=o(" \u2014 "),YI=a("a"),dEo=o("MegatronBertForMaskedLM"),cEo=o(" (MegatronBert model)"),fEo=l(),y1=a("li"),sse=a("strong"),mEo=o("mobilebert"),gEo=o(" \u2014 "),KI=a("a"),hEo=o("MobileBertForMaskedLM"),pEo=o(" (MobileBERT model)"),_Eo=l(),L1=a("li"),lse=a("strong"),uEo=o("mpnet"),bEo=o(" \u2014 "),ZI=a("a"),vEo=o("MPNetForMaskedLM"),FEo=o(" (MPNet model)"),TEo=l(),x1=a("li"),ise=a("strong"),MEo=o("nystromformer"),EEo=o(" \u2014 "),eq=a("a"),CEo=o("NystromformerForMaskedLM"),wEo=o(" (Nystromformer model)"),AEo=l(),k1=a("li"),dse=a("strong"),yEo=o("perceiver"),LEo=o(" \u2014 "),oq=a("a"),xEo=o("PerceiverForMaskedLM"),kEo=o(" (Perceiver model)"),SEo=l(),S1=a("li"),cse=a("strong"),REo=o("qdqbert"),BEo=o(" \u2014 "),rq=a("a"),PEo=o("QDQBertForMaskedLM"),$Eo=o(" (QDQBert model)"),IEo=l(),R1=a("li"),fse=a("strong"),qEo=o("reformer"),NEo=o(" \u2014 "),tq=a("a"),jEo=o("ReformerForMaskedLM"),DEo=o(" (Reformer model)"),GEo=l(),B1=a("li"),mse=a("strong"),OEo=o("rembert"),VEo=o(" \u2014 "),aq=a("a"),XEo=o("RemBertForMaskedLM"),zEo=o(" (RemBERT model)"),QEo=l(),P1=a("li"),gse=a("strong"),WEo=o("roberta"),HEo=o(" \u2014 "),nq=a("a"),UEo=o("RobertaForMaskedLM"),JEo=o(" (RoBERTa model)"),YEo=l(),$1=a("li"),hse=a("strong"),KEo=o("roformer"),ZEo=o(" \u2014 "),sq=a("a"),e5o=o("RoFormerForMaskedLM"),o5o=o(" (RoFormer model)"),r5o=l(),I1=a("li"),pse=a("strong"),t5o=o("squeezebert"),a5o=o(" \u2014 "),lq=a("a"),n5o=o("SqueezeBertForMaskedLM"),s5o=o(" (SqueezeBERT model)"),l5o=l(),q1=a("li"),_se=a("strong"),i5o=o("tapas"),d5o=o(" \u2014 "),iq=a("a"),c5o=o("TapasForMaskedLM"),f5o=o(" (TAPAS model)"),m5o=l(),N1=a("li"),use=a("strong"),g5o=o("wav2vec2"),h5o=o(" \u2014 "),bse=a("code"),p5o=o("Wav2Vec2ForMaskedLM"),_5o=o(" (Wav2Vec2 model)"),u5o=l(),j1=a("li"),vse=a("strong"),b5o=o("xlm"),v5o=o(" \u2014 "),dq=a("a"),F5o=o("XLMWithLMHeadModel"),T5o=o(" (XLM model)"),M5o=l(),D1=a("li"),Fse=a("strong"),E5o=o("xlm-roberta"),C5o=o(" \u2014 "),cq=a("a"),w5o=o("XLMRobertaForMaskedLM"),A5o=o(" (XLM-RoBERTa model)"),y5o=l(),G1=a("li"),Tse=a("strong"),L5o=o("xlm-roberta-xl"),x5o=o(" \u2014 "),fq=a("a"),k5o=o("XLMRobertaXLForMaskedLM"),S5o=o(" (XLM-RoBERTa-XL model)"),R5o=l(),O1=a("li"),Mse=a("strong"),B5o=o("yoso"),P5o=o(" \u2014 "),mq=a("a"),$5o=o("YosoForMaskedLM"),I5o=o(" (YOSO model)"),q5o=l(),V1=a("p"),N5o=o("The model is set in evaluation mode by default using "),Ese=a("code"),j5o=o("model.eval()"),D5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=a("code"),G5o=o("model.train()"),O5o=l(),wse=a("p"),V5o=o("Examples:"),X5o=l(),f($6.$$.fragment),ZRe=l(),cd=a("h2"),X1=a("a"),Ase=a("span"),f(I6.$$.fragment),z5o=l(),yse=a("span"),Q5o=o("AutoModelForSeq2SeqLM"),eBe=l(),er=a("div"),f(q6.$$.fragment),W5o=l(),fd=a("p"),H5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gq=a("a"),U5o=o("from_pretrained()"),J5o=o(" class method or the "),hq=a("a"),Y5o=o("from_config()"),K5o=o(` class
method.`),Z5o=l(),N6=a("p"),e3o=o("This class cannot be instantiated directly using "),Lse=a("code"),o3o=o("__init__()"),r3o=o(" (throws an error)."),t3o=l(),Hr=a("div"),f(j6.$$.fragment),a3o=l(),xse=a("p"),n3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s3o=l(),md=a("p"),l3o=o(`Note:
Loading a model from its configuration file does `),kse=a("strong"),i3o=o("not"),d3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=a("a"),c3o=o("from_pretrained()"),f3o=o(" to load the model weights."),m3o=l(),Sse=a("p"),g3o=o("Examples:"),h3o=l(),f(D6.$$.fragment),p3o=l(),Ge=a("div"),f(G6.$$.fragment),_3o=l(),Rse=a("p"),u3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b3o=l(),Ha=a("p"),v3o=o("The model class to instantiate is selected based on the "),Bse=a("code"),F3o=o("model_type"),T3o=o(` property of the config object (either
passed as an argument or loaded from `),Pse=a("code"),M3o=o("pretrained_model_name_or_path"),E3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=a("code"),C3o=o("pretrained_model_name_or_path"),w3o=o(":"),A3o=l(),ne=a("ul"),z1=a("li"),Ise=a("strong"),y3o=o("bart"),L3o=o(" \u2014 "),_q=a("a"),x3o=o("BartForConditionalGeneration"),k3o=o(" (BART model)"),S3o=l(),Q1=a("li"),qse=a("strong"),R3o=o("bigbird_pegasus"),B3o=o(" \u2014 "),uq=a("a"),P3o=o("BigBirdPegasusForConditionalGeneration"),$3o=o(" (BigBirdPegasus model)"),I3o=l(),W1=a("li"),Nse=a("strong"),q3o=o("blenderbot"),N3o=o(" \u2014 "),bq=a("a"),j3o=o("BlenderbotForConditionalGeneration"),D3o=o(" (Blenderbot model)"),G3o=l(),H1=a("li"),jse=a("strong"),O3o=o("blenderbot-small"),V3o=o(" \u2014 "),vq=a("a"),X3o=o("BlenderbotSmallForConditionalGeneration"),z3o=o(" (BlenderbotSmall model)"),Q3o=l(),U1=a("li"),Dse=a("strong"),W3o=o("encoder-decoder"),H3o=o(" \u2014 "),Fq=a("a"),U3o=o("EncoderDecoderModel"),J3o=o(" (Encoder decoder model)"),Y3o=l(),J1=a("li"),Gse=a("strong"),K3o=o("fsmt"),Z3o=o(" \u2014 "),Tq=a("a"),eCo=o("FSMTForConditionalGeneration"),oCo=o(" (FairSeq Machine-Translation model)"),rCo=l(),Y1=a("li"),Ose=a("strong"),tCo=o("led"),aCo=o(" \u2014 "),Mq=a("a"),nCo=o("LEDForConditionalGeneration"),sCo=o(" (LED model)"),lCo=l(),K1=a("li"),Vse=a("strong"),iCo=o("m2m_100"),dCo=o(" \u2014 "),Eq=a("a"),cCo=o("M2M100ForConditionalGeneration"),fCo=o(" (M2M100 model)"),mCo=l(),Z1=a("li"),Xse=a("strong"),gCo=o("marian"),hCo=o(" \u2014 "),Cq=a("a"),pCo=o("MarianMTModel"),_Co=o(" (Marian model)"),uCo=l(),eb=a("li"),zse=a("strong"),bCo=o("mbart"),vCo=o(" \u2014 "),wq=a("a"),FCo=o("MBartForConditionalGeneration"),TCo=o(" (mBART model)"),MCo=l(),ob=a("li"),Qse=a("strong"),ECo=o("mt5"),CCo=o(" \u2014 "),Aq=a("a"),wCo=o("MT5ForConditionalGeneration"),ACo=o(" (mT5 model)"),yCo=l(),rb=a("li"),Wse=a("strong"),LCo=o("pegasus"),xCo=o(" \u2014 "),yq=a("a"),kCo=o("PegasusForConditionalGeneration"),SCo=o(" (Pegasus model)"),RCo=l(),tb=a("li"),Hse=a("strong"),BCo=o("plbart"),PCo=o(" \u2014 "),Lq=a("a"),$Co=o("PLBartForConditionalGeneration"),ICo=o(" (PLBart model)"),qCo=l(),ab=a("li"),Use=a("strong"),NCo=o("prophetnet"),jCo=o(" \u2014 "),xq=a("a"),DCo=o("ProphetNetForConditionalGeneration"),GCo=o(" (ProphetNet model)"),OCo=l(),nb=a("li"),Jse=a("strong"),VCo=o("t5"),XCo=o(" \u2014 "),kq=a("a"),zCo=o("T5ForConditionalGeneration"),QCo=o(" (T5 model)"),WCo=l(),sb=a("li"),Yse=a("strong"),HCo=o("tapex"),UCo=o(" \u2014 "),Sq=a("a"),JCo=o("BartForConditionalGeneration"),YCo=o(" (TAPEX model)"),KCo=l(),lb=a("li"),Kse=a("strong"),ZCo=o("xlm-prophetnet"),ewo=o(" \u2014 "),Rq=a("a"),owo=o("XLMProphetNetForConditionalGeneration"),rwo=o(" (XLMProphetNet model)"),two=l(),ib=a("p"),awo=o("The model is set in evaluation mode by default using "),Zse=a("code"),nwo=o("model.eval()"),swo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=a("code"),lwo=o("model.train()"),iwo=l(),ole=a("p"),dwo=o("Examples:"),cwo=l(),f(O6.$$.fragment),oBe=l(),gd=a("h2"),db=a("a"),rle=a("span"),f(V6.$$.fragment),fwo=l(),tle=a("span"),mwo=o("AutoModelForSequenceClassification"),rBe=l(),or=a("div"),f(X6.$$.fragment),gwo=l(),hd=a("p"),hwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bq=a("a"),pwo=o("from_pretrained()"),_wo=o(" class method or the "),Pq=a("a"),uwo=o("from_config()"),bwo=o(` class
method.`),vwo=l(),z6=a("p"),Fwo=o("This class cannot be instantiated directly using "),ale=a("code"),Two=o("__init__()"),Mwo=o(" (throws an error)."),Ewo=l(),Ur=a("div"),f(Q6.$$.fragment),Cwo=l(),nle=a("p"),wwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Awo=l(),pd=a("p"),ywo=o(`Note:
Loading a model from its configuration file does `),sle=a("strong"),Lwo=o("not"),xwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=a("a"),kwo=o("from_pretrained()"),Swo=o(" to load the model weights."),Rwo=l(),lle=a("p"),Bwo=o("Examples:"),Pwo=l(),f(W6.$$.fragment),$wo=l(),Oe=a("div"),f(H6.$$.fragment),Iwo=l(),ile=a("p"),qwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nwo=l(),Ua=a("p"),jwo=o("The model class to instantiate is selected based on the "),dle=a("code"),Dwo=o("model_type"),Gwo=o(` property of the config object (either
passed as an argument or loaded from `),cle=a("code"),Owo=o("pretrained_model_name_or_path"),Vwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=a("code"),Xwo=o("pretrained_model_name_or_path"),zwo=o(":"),Qwo=l(),y=a("ul"),cb=a("li"),mle=a("strong"),Wwo=o("albert"),Hwo=o(" \u2014 "),Iq=a("a"),Uwo=o("AlbertForSequenceClassification"),Jwo=o(" (ALBERT model)"),Ywo=l(),fb=a("li"),gle=a("strong"),Kwo=o("bart"),Zwo=o(" \u2014 "),qq=a("a"),e6o=o("BartForSequenceClassification"),o6o=o(" (BART model)"),r6o=l(),mb=a("li"),hle=a("strong"),t6o=o("bert"),a6o=o(" \u2014 "),Nq=a("a"),n6o=o("BertForSequenceClassification"),s6o=o(" (BERT model)"),l6o=l(),gb=a("li"),ple=a("strong"),i6o=o("big_bird"),d6o=o(" \u2014 "),jq=a("a"),c6o=o("BigBirdForSequenceClassification"),f6o=o(" (BigBird model)"),m6o=l(),hb=a("li"),_le=a("strong"),g6o=o("bigbird_pegasus"),h6o=o(" \u2014 "),Dq=a("a"),p6o=o("BigBirdPegasusForSequenceClassification"),_6o=o(" (BigBirdPegasus model)"),u6o=l(),pb=a("li"),ule=a("strong"),b6o=o("camembert"),v6o=o(" \u2014 "),Gq=a("a"),F6o=o("CamembertForSequenceClassification"),T6o=o(" (CamemBERT model)"),M6o=l(),_b=a("li"),ble=a("strong"),E6o=o("canine"),C6o=o(" \u2014 "),Oq=a("a"),w6o=o("CanineForSequenceClassification"),A6o=o(" (Canine model)"),y6o=l(),ub=a("li"),vle=a("strong"),L6o=o("convbert"),x6o=o(" \u2014 "),Vq=a("a"),k6o=o("ConvBertForSequenceClassification"),S6o=o(" (ConvBERT model)"),R6o=l(),bb=a("li"),Fle=a("strong"),B6o=o("ctrl"),P6o=o(" \u2014 "),Xq=a("a"),$6o=o("CTRLForSequenceClassification"),I6o=o(" (CTRL model)"),q6o=l(),vb=a("li"),Tle=a("strong"),N6o=o("data2vec-text"),j6o=o(" \u2014 "),zq=a("a"),D6o=o("Data2VecTextForSequenceClassification"),G6o=o(" (Data2VecText model)"),O6o=l(),Fb=a("li"),Mle=a("strong"),V6o=o("deberta"),X6o=o(" \u2014 "),Qq=a("a"),z6o=o("DebertaForSequenceClassification"),Q6o=o(" (DeBERTa model)"),W6o=l(),Tb=a("li"),Ele=a("strong"),H6o=o("deberta-v2"),U6o=o(" \u2014 "),Wq=a("a"),J6o=o("DebertaV2ForSequenceClassification"),Y6o=o(" (DeBERTa-v2 model)"),K6o=l(),Mb=a("li"),Cle=a("strong"),Z6o=o("distilbert"),eAo=o(" \u2014 "),Hq=a("a"),oAo=o("DistilBertForSequenceClassification"),rAo=o(" (DistilBERT model)"),tAo=l(),Eb=a("li"),wle=a("strong"),aAo=o("electra"),nAo=o(" \u2014 "),Uq=a("a"),sAo=o("ElectraForSequenceClassification"),lAo=o(" (ELECTRA model)"),iAo=l(),Cb=a("li"),Ale=a("strong"),dAo=o("flaubert"),cAo=o(" \u2014 "),Jq=a("a"),fAo=o("FlaubertForSequenceClassification"),mAo=o(" (FlauBERT model)"),gAo=l(),wb=a("li"),yle=a("strong"),hAo=o("fnet"),pAo=o(" \u2014 "),Yq=a("a"),_Ao=o("FNetForSequenceClassification"),uAo=o(" (FNet model)"),bAo=l(),Ab=a("li"),Lle=a("strong"),vAo=o("funnel"),FAo=o(" \u2014 "),Kq=a("a"),TAo=o("FunnelForSequenceClassification"),MAo=o(" (Funnel Transformer model)"),EAo=l(),yb=a("li"),xle=a("strong"),CAo=o("gpt2"),wAo=o(" \u2014 "),Zq=a("a"),AAo=o("GPT2ForSequenceClassification"),yAo=o(" (OpenAI GPT-2 model)"),LAo=l(),Lb=a("li"),kle=a("strong"),xAo=o("gpt_neo"),kAo=o(" \u2014 "),eN=a("a"),SAo=o("GPTNeoForSequenceClassification"),RAo=o(" (GPT Neo model)"),BAo=l(),xb=a("li"),Sle=a("strong"),PAo=o("gptj"),$Ao=o(" \u2014 "),oN=a("a"),IAo=o("GPTJForSequenceClassification"),qAo=o(" (GPT-J model)"),NAo=l(),kb=a("li"),Rle=a("strong"),jAo=o("ibert"),DAo=o(" \u2014 "),rN=a("a"),GAo=o("IBertForSequenceClassification"),OAo=o(" (I-BERT model)"),VAo=l(),Sb=a("li"),Ble=a("strong"),XAo=o("layoutlm"),zAo=o(" \u2014 "),tN=a("a"),QAo=o("LayoutLMForSequenceClassification"),WAo=o(" (LayoutLM model)"),HAo=l(),Rb=a("li"),Ple=a("strong"),UAo=o("layoutlmv2"),JAo=o(" \u2014 "),aN=a("a"),YAo=o("LayoutLMv2ForSequenceClassification"),KAo=o(" (LayoutLMv2 model)"),ZAo=l(),Bb=a("li"),$le=a("strong"),e0o=o("led"),o0o=o(" \u2014 "),nN=a("a"),r0o=o("LEDForSequenceClassification"),t0o=o(" (LED model)"),a0o=l(),Pb=a("li"),Ile=a("strong"),n0o=o("longformer"),s0o=o(" \u2014 "),sN=a("a"),l0o=o("LongformerForSequenceClassification"),i0o=o(" (Longformer model)"),d0o=l(),$b=a("li"),qle=a("strong"),c0o=o("mbart"),f0o=o(" \u2014 "),lN=a("a"),m0o=o("MBartForSequenceClassification"),g0o=o(" (mBART model)"),h0o=l(),Ib=a("li"),Nle=a("strong"),p0o=o("megatron-bert"),_0o=o(" \u2014 "),iN=a("a"),u0o=o("MegatronBertForSequenceClassification"),b0o=o(" (MegatronBert model)"),v0o=l(),qb=a("li"),jle=a("strong"),F0o=o("mobilebert"),T0o=o(" \u2014 "),dN=a("a"),M0o=o("MobileBertForSequenceClassification"),E0o=o(" (MobileBERT model)"),C0o=l(),Nb=a("li"),Dle=a("strong"),w0o=o("mpnet"),A0o=o(" \u2014 "),cN=a("a"),y0o=o("MPNetForSequenceClassification"),L0o=o(" (MPNet model)"),x0o=l(),jb=a("li"),Gle=a("strong"),k0o=o("nystromformer"),S0o=o(" \u2014 "),fN=a("a"),R0o=o("NystromformerForSequenceClassification"),B0o=o(" (Nystromformer model)"),P0o=l(),Db=a("li"),Ole=a("strong"),$0o=o("openai-gpt"),I0o=o(" \u2014 "),mN=a("a"),q0o=o("OpenAIGPTForSequenceClassification"),N0o=o(" (OpenAI GPT model)"),j0o=l(),Gb=a("li"),Vle=a("strong"),D0o=o("perceiver"),G0o=o(" \u2014 "),gN=a("a"),O0o=o("PerceiverForSequenceClassification"),V0o=o(" (Perceiver model)"),X0o=l(),Ob=a("li"),Xle=a("strong"),z0o=o("plbart"),Q0o=o(" \u2014 "),hN=a("a"),W0o=o("PLBartForSequenceClassification"),H0o=o(" (PLBart model)"),U0o=l(),Vb=a("li"),zle=a("strong"),J0o=o("qdqbert"),Y0o=o(" \u2014 "),pN=a("a"),K0o=o("QDQBertForSequenceClassification"),Z0o=o(" (QDQBert model)"),eyo=l(),Xb=a("li"),Qle=a("strong"),oyo=o("reformer"),ryo=o(" \u2014 "),_N=a("a"),tyo=o("ReformerForSequenceClassification"),ayo=o(" (Reformer model)"),nyo=l(),zb=a("li"),Wle=a("strong"),syo=o("rembert"),lyo=o(" \u2014 "),uN=a("a"),iyo=o("RemBertForSequenceClassification"),dyo=o(" (RemBERT model)"),cyo=l(),Qb=a("li"),Hle=a("strong"),fyo=o("roberta"),myo=o(" \u2014 "),bN=a("a"),gyo=o("RobertaForSequenceClassification"),hyo=o(" (RoBERTa model)"),pyo=l(),Wb=a("li"),Ule=a("strong"),_yo=o("roformer"),uyo=o(" \u2014 "),vN=a("a"),byo=o("RoFormerForSequenceClassification"),vyo=o(" (RoFormer model)"),Fyo=l(),Hb=a("li"),Jle=a("strong"),Tyo=o("squeezebert"),Myo=o(" \u2014 "),FN=a("a"),Eyo=o("SqueezeBertForSequenceClassification"),Cyo=o(" (SqueezeBERT model)"),wyo=l(),Ub=a("li"),Yle=a("strong"),Ayo=o("tapas"),yyo=o(" \u2014 "),TN=a("a"),Lyo=o("TapasForSequenceClassification"),xyo=o(" (TAPAS model)"),kyo=l(),Jb=a("li"),Kle=a("strong"),Syo=o("tapex"),Ryo=o(" \u2014 "),MN=a("a"),Byo=o("BartForSequenceClassification"),Pyo=o(" (TAPEX model)"),$yo=l(),Yb=a("li"),Zle=a("strong"),Iyo=o("transfo-xl"),qyo=o(" \u2014 "),EN=a("a"),Nyo=o("TransfoXLForSequenceClassification"),jyo=o(" (Transformer-XL model)"),Dyo=l(),Kb=a("li"),eie=a("strong"),Gyo=o("xlm"),Oyo=o(" \u2014 "),CN=a("a"),Vyo=o("XLMForSequenceClassification"),Xyo=o(" (XLM model)"),zyo=l(),Zb=a("li"),oie=a("strong"),Qyo=o("xlm-roberta"),Wyo=o(" \u2014 "),wN=a("a"),Hyo=o("XLMRobertaForSequenceClassification"),Uyo=o(" (XLM-RoBERTa model)"),Jyo=l(),e2=a("li"),rie=a("strong"),Yyo=o("xlm-roberta-xl"),Kyo=o(" \u2014 "),AN=a("a"),Zyo=o("XLMRobertaXLForSequenceClassification"),e8o=o(" (XLM-RoBERTa-XL model)"),o8o=l(),o2=a("li"),tie=a("strong"),r8o=o("xlnet"),t8o=o(" \u2014 "),yN=a("a"),a8o=o("XLNetForSequenceClassification"),n8o=o(" (XLNet model)"),s8o=l(),r2=a("li"),aie=a("strong"),l8o=o("yoso"),i8o=o(" \u2014 "),LN=a("a"),d8o=o("YosoForSequenceClassification"),c8o=o(" (YOSO model)"),f8o=l(),t2=a("p"),m8o=o("The model is set in evaluation mode by default using "),nie=a("code"),g8o=o("model.eval()"),h8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=a("code"),p8o=o("model.train()"),_8o=l(),lie=a("p"),u8o=o("Examples:"),b8o=l(),f(U6.$$.fragment),tBe=l(),_d=a("h2"),a2=a("a"),iie=a("span"),f(J6.$$.fragment),v8o=l(),die=a("span"),F8o=o("AutoModelForMultipleChoice"),aBe=l(),rr=a("div"),f(Y6.$$.fragment),T8o=l(),ud=a("p"),M8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xN=a("a"),E8o=o("from_pretrained()"),C8o=o(" class method or the "),kN=a("a"),w8o=o("from_config()"),A8o=o(` class
method.`),y8o=l(),K6=a("p"),L8o=o("This class cannot be instantiated directly using "),cie=a("code"),x8o=o("__init__()"),k8o=o(" (throws an error)."),S8o=l(),Jr=a("div"),f(Z6.$$.fragment),R8o=l(),fie=a("p"),B8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P8o=l(),bd=a("p"),$8o=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),I8o=o("not"),q8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=a("a"),N8o=o("from_pretrained()"),j8o=o(" to load the model weights."),D8o=l(),gie=a("p"),G8o=o("Examples:"),O8o=l(),f(eA.$$.fragment),V8o=l(),Ve=a("div"),f(oA.$$.fragment),X8o=l(),hie=a("p"),z8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q8o=l(),Ja=a("p"),W8o=o("The model class to instantiate is selected based on the "),pie=a("code"),H8o=o("model_type"),U8o=o(` property of the config object (either
passed as an argument or loaded from `),_ie=a("code"),J8o=o("pretrained_model_name_or_path"),Y8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),K8o=o("pretrained_model_name_or_path"),Z8o=o(":"),eLo=l(),G=a("ul"),n2=a("li"),bie=a("strong"),oLo=o("albert"),rLo=o(" \u2014 "),RN=a("a"),tLo=o("AlbertForMultipleChoice"),aLo=o(" (ALBERT model)"),nLo=l(),s2=a("li"),vie=a("strong"),sLo=o("bert"),lLo=o(" \u2014 "),BN=a("a"),iLo=o("BertForMultipleChoice"),dLo=o(" (BERT model)"),cLo=l(),l2=a("li"),Fie=a("strong"),fLo=o("big_bird"),mLo=o(" \u2014 "),PN=a("a"),gLo=o("BigBirdForMultipleChoice"),hLo=o(" (BigBird model)"),pLo=l(),i2=a("li"),Tie=a("strong"),_Lo=o("camembert"),uLo=o(" \u2014 "),$N=a("a"),bLo=o("CamembertForMultipleChoice"),vLo=o(" (CamemBERT model)"),FLo=l(),d2=a("li"),Mie=a("strong"),TLo=o("canine"),MLo=o(" \u2014 "),IN=a("a"),ELo=o("CanineForMultipleChoice"),CLo=o(" (Canine model)"),wLo=l(),c2=a("li"),Eie=a("strong"),ALo=o("convbert"),yLo=o(" \u2014 "),qN=a("a"),LLo=o("ConvBertForMultipleChoice"),xLo=o(" (ConvBERT model)"),kLo=l(),f2=a("li"),Cie=a("strong"),SLo=o("data2vec-text"),RLo=o(" \u2014 "),NN=a("a"),BLo=o("Data2VecTextForMultipleChoice"),PLo=o(" (Data2VecText model)"),$Lo=l(),m2=a("li"),wie=a("strong"),ILo=o("distilbert"),qLo=o(" \u2014 "),jN=a("a"),NLo=o("DistilBertForMultipleChoice"),jLo=o(" (DistilBERT model)"),DLo=l(),g2=a("li"),Aie=a("strong"),GLo=o("electra"),OLo=o(" \u2014 "),DN=a("a"),VLo=o("ElectraForMultipleChoice"),XLo=o(" (ELECTRA model)"),zLo=l(),h2=a("li"),yie=a("strong"),QLo=o("flaubert"),WLo=o(" \u2014 "),GN=a("a"),HLo=o("FlaubertForMultipleChoice"),ULo=o(" (FlauBERT model)"),JLo=l(),p2=a("li"),Lie=a("strong"),YLo=o("fnet"),KLo=o(" \u2014 "),ON=a("a"),ZLo=o("FNetForMultipleChoice"),e7o=o(" (FNet model)"),o7o=l(),_2=a("li"),xie=a("strong"),r7o=o("funnel"),t7o=o(" \u2014 "),VN=a("a"),a7o=o("FunnelForMultipleChoice"),n7o=o(" (Funnel Transformer model)"),s7o=l(),u2=a("li"),kie=a("strong"),l7o=o("ibert"),i7o=o(" \u2014 "),XN=a("a"),d7o=o("IBertForMultipleChoice"),c7o=o(" (I-BERT model)"),f7o=l(),b2=a("li"),Sie=a("strong"),m7o=o("longformer"),g7o=o(" \u2014 "),zN=a("a"),h7o=o("LongformerForMultipleChoice"),p7o=o(" (Longformer model)"),_7o=l(),v2=a("li"),Rie=a("strong"),u7o=o("megatron-bert"),b7o=o(" \u2014 "),QN=a("a"),v7o=o("MegatronBertForMultipleChoice"),F7o=o(" (MegatronBert model)"),T7o=l(),F2=a("li"),Bie=a("strong"),M7o=o("mobilebert"),E7o=o(" \u2014 "),WN=a("a"),C7o=o("MobileBertForMultipleChoice"),w7o=o(" (MobileBERT model)"),A7o=l(),T2=a("li"),Pie=a("strong"),y7o=o("mpnet"),L7o=o(" \u2014 "),HN=a("a"),x7o=o("MPNetForMultipleChoice"),k7o=o(" (MPNet model)"),S7o=l(),M2=a("li"),$ie=a("strong"),R7o=o("nystromformer"),B7o=o(" \u2014 "),UN=a("a"),P7o=o("NystromformerForMultipleChoice"),$7o=o(" (Nystromformer model)"),I7o=l(),E2=a("li"),Iie=a("strong"),q7o=o("qdqbert"),N7o=o(" \u2014 "),JN=a("a"),j7o=o("QDQBertForMultipleChoice"),D7o=o(" (QDQBert model)"),G7o=l(),C2=a("li"),qie=a("strong"),O7o=o("rembert"),V7o=o(" \u2014 "),YN=a("a"),X7o=o("RemBertForMultipleChoice"),z7o=o(" (RemBERT model)"),Q7o=l(),w2=a("li"),Nie=a("strong"),W7o=o("roberta"),H7o=o(" \u2014 "),KN=a("a"),U7o=o("RobertaForMultipleChoice"),J7o=o(" (RoBERTa model)"),Y7o=l(),A2=a("li"),jie=a("strong"),K7o=o("roformer"),Z7o=o(" \u2014 "),ZN=a("a"),e9o=o("RoFormerForMultipleChoice"),o9o=o(" (RoFormer model)"),r9o=l(),y2=a("li"),Die=a("strong"),t9o=o("squeezebert"),a9o=o(" \u2014 "),ej=a("a"),n9o=o("SqueezeBertForMultipleChoice"),s9o=o(" (SqueezeBERT model)"),l9o=l(),L2=a("li"),Gie=a("strong"),i9o=o("xlm"),d9o=o(" \u2014 "),oj=a("a"),c9o=o("XLMForMultipleChoice"),f9o=o(" (XLM model)"),m9o=l(),x2=a("li"),Oie=a("strong"),g9o=o("xlm-roberta"),h9o=o(" \u2014 "),rj=a("a"),p9o=o("XLMRobertaForMultipleChoice"),_9o=o(" (XLM-RoBERTa model)"),u9o=l(),k2=a("li"),Vie=a("strong"),b9o=o("xlm-roberta-xl"),v9o=o(" \u2014 "),tj=a("a"),F9o=o("XLMRobertaXLForMultipleChoice"),T9o=o(" (XLM-RoBERTa-XL model)"),M9o=l(),S2=a("li"),Xie=a("strong"),E9o=o("xlnet"),C9o=o(" \u2014 "),aj=a("a"),w9o=o("XLNetForMultipleChoice"),A9o=o(" (XLNet model)"),y9o=l(),R2=a("li"),zie=a("strong"),L9o=o("yoso"),x9o=o(" \u2014 "),nj=a("a"),k9o=o("YosoForMultipleChoice"),S9o=o(" (YOSO model)"),R9o=l(),B2=a("p"),B9o=o("The model is set in evaluation mode by default using "),Qie=a("code"),P9o=o("model.eval()"),$9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=a("code"),I9o=o("model.train()"),q9o=l(),Hie=a("p"),N9o=o("Examples:"),j9o=l(),f(rA.$$.fragment),nBe=l(),vd=a("h2"),P2=a("a"),Uie=a("span"),f(tA.$$.fragment),D9o=l(),Jie=a("span"),G9o=o("AutoModelForNextSentencePrediction"),sBe=l(),tr=a("div"),f(aA.$$.fragment),O9o=l(),Fd=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sj=a("a"),X9o=o("from_pretrained()"),z9o=o(" class method or the "),lj=a("a"),Q9o=o("from_config()"),W9o=o(` class
method.`),H9o=l(),nA=a("p"),U9o=o("This class cannot be instantiated directly using "),Yie=a("code"),J9o=o("__init__()"),Y9o=o(" (throws an error)."),K9o=l(),Yr=a("div"),f(sA.$$.fragment),Z9o=l(),Kie=a("p"),exo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oxo=l(),Td=a("p"),rxo=o(`Note:
Loading a model from its configuration file does `),Zie=a("strong"),txo=o("not"),axo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=a("a"),nxo=o("from_pretrained()"),sxo=o(" to load the model weights."),lxo=l(),ede=a("p"),ixo=o("Examples:"),dxo=l(),f(lA.$$.fragment),cxo=l(),Xe=a("div"),f(iA.$$.fragment),fxo=l(),ode=a("p"),mxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gxo=l(),Ya=a("p"),hxo=o("The model class to instantiate is selected based on the "),rde=a("code"),pxo=o("model_type"),_xo=o(` property of the config object (either
passed as an argument or loaded from `),tde=a("code"),uxo=o("pretrained_model_name_or_path"),bxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=a("code"),vxo=o("pretrained_model_name_or_path"),Fxo=o(":"),Txo=l(),da=a("ul"),$2=a("li"),nde=a("strong"),Mxo=o("bert"),Exo=o(" \u2014 "),dj=a("a"),Cxo=o("BertForNextSentencePrediction"),wxo=o(" (BERT model)"),Axo=l(),I2=a("li"),sde=a("strong"),yxo=o("fnet"),Lxo=o(" \u2014 "),cj=a("a"),xxo=o("FNetForNextSentencePrediction"),kxo=o(" (FNet model)"),Sxo=l(),q2=a("li"),lde=a("strong"),Rxo=o("megatron-bert"),Bxo=o(" \u2014 "),fj=a("a"),Pxo=o("MegatronBertForNextSentencePrediction"),$xo=o(" (MegatronBert model)"),Ixo=l(),N2=a("li"),ide=a("strong"),qxo=o("mobilebert"),Nxo=o(" \u2014 "),mj=a("a"),jxo=o("MobileBertForNextSentencePrediction"),Dxo=o(" (MobileBERT model)"),Gxo=l(),j2=a("li"),dde=a("strong"),Oxo=o("qdqbert"),Vxo=o(" \u2014 "),gj=a("a"),Xxo=o("QDQBertForNextSentencePrediction"),zxo=o(" (QDQBert model)"),Qxo=l(),D2=a("p"),Wxo=o("The model is set in evaluation mode by default using "),cde=a("code"),Hxo=o("model.eval()"),Uxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=a("code"),Jxo=o("model.train()"),Yxo=l(),mde=a("p"),Kxo=o("Examples:"),Zxo=l(),f(dA.$$.fragment),lBe=l(),Md=a("h2"),G2=a("a"),gde=a("span"),f(cA.$$.fragment),eko=l(),hde=a("span"),oko=o("AutoModelForTokenClassification"),iBe=l(),ar=a("div"),f(fA.$$.fragment),rko=l(),Ed=a("p"),tko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hj=a("a"),ako=o("from_pretrained()"),nko=o(" class method or the "),pj=a("a"),sko=o("from_config()"),lko=o(` class
method.`),iko=l(),mA=a("p"),dko=o("This class cannot be instantiated directly using "),pde=a("code"),cko=o("__init__()"),fko=o(" (throws an error)."),mko=l(),Kr=a("div"),f(gA.$$.fragment),gko=l(),_de=a("p"),hko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pko=l(),Cd=a("p"),_ko=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),uko=o("not"),bko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=a("a"),vko=o("from_pretrained()"),Fko=o(" to load the model weights."),Tko=l(),bde=a("p"),Mko=o("Examples:"),Eko=l(),f(hA.$$.fragment),Cko=l(),ze=a("div"),f(pA.$$.fragment),wko=l(),vde=a("p"),Ako=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yko=l(),Ka=a("p"),Lko=o("The model class to instantiate is selected based on the "),Fde=a("code"),xko=o("model_type"),kko=o(` property of the config object (either
passed as an argument or loaded from `),Tde=a("code"),Sko=o("pretrained_model_name_or_path"),Rko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=a("code"),Bko=o("pretrained_model_name_or_path"),Pko=o(":"),$ko=l(),j=a("ul"),O2=a("li"),Ede=a("strong"),Iko=o("albert"),qko=o(" \u2014 "),uj=a("a"),Nko=o("AlbertForTokenClassification"),jko=o(" (ALBERT model)"),Dko=l(),V2=a("li"),Cde=a("strong"),Gko=o("bert"),Oko=o(" \u2014 "),bj=a("a"),Vko=o("BertForTokenClassification"),Xko=o(" (BERT model)"),zko=l(),X2=a("li"),wde=a("strong"),Qko=o("big_bird"),Wko=o(" \u2014 "),vj=a("a"),Hko=o("BigBirdForTokenClassification"),Uko=o(" (BigBird model)"),Jko=l(),z2=a("li"),Ade=a("strong"),Yko=o("camembert"),Kko=o(" \u2014 "),Fj=a("a"),Zko=o("CamembertForTokenClassification"),eSo=o(" (CamemBERT model)"),oSo=l(),Q2=a("li"),yde=a("strong"),rSo=o("canine"),tSo=o(" \u2014 "),Tj=a("a"),aSo=o("CanineForTokenClassification"),nSo=o(" (Canine model)"),sSo=l(),W2=a("li"),Lde=a("strong"),lSo=o("convbert"),iSo=o(" \u2014 "),Mj=a("a"),dSo=o("ConvBertForTokenClassification"),cSo=o(" (ConvBERT model)"),fSo=l(),H2=a("li"),xde=a("strong"),mSo=o("data2vec-text"),gSo=o(" \u2014 "),Ej=a("a"),hSo=o("Data2VecTextForTokenClassification"),pSo=o(" (Data2VecText model)"),_So=l(),U2=a("li"),kde=a("strong"),uSo=o("deberta"),bSo=o(" \u2014 "),Cj=a("a"),vSo=o("DebertaForTokenClassification"),FSo=o(" (DeBERTa model)"),TSo=l(),J2=a("li"),Sde=a("strong"),MSo=o("deberta-v2"),ESo=o(" \u2014 "),wj=a("a"),CSo=o("DebertaV2ForTokenClassification"),wSo=o(" (DeBERTa-v2 model)"),ASo=l(),Y2=a("li"),Rde=a("strong"),ySo=o("distilbert"),LSo=o(" \u2014 "),Aj=a("a"),xSo=o("DistilBertForTokenClassification"),kSo=o(" (DistilBERT model)"),SSo=l(),K2=a("li"),Bde=a("strong"),RSo=o("electra"),BSo=o(" \u2014 "),yj=a("a"),PSo=o("ElectraForTokenClassification"),$So=o(" (ELECTRA model)"),ISo=l(),Z2=a("li"),Pde=a("strong"),qSo=o("flaubert"),NSo=o(" \u2014 "),Lj=a("a"),jSo=o("FlaubertForTokenClassification"),DSo=o(" (FlauBERT model)"),GSo=l(),ev=a("li"),$de=a("strong"),OSo=o("fnet"),VSo=o(" \u2014 "),xj=a("a"),XSo=o("FNetForTokenClassification"),zSo=o(" (FNet model)"),QSo=l(),ov=a("li"),Ide=a("strong"),WSo=o("funnel"),HSo=o(" \u2014 "),kj=a("a"),USo=o("FunnelForTokenClassification"),JSo=o(" (Funnel Transformer model)"),YSo=l(),rv=a("li"),qde=a("strong"),KSo=o("gpt2"),ZSo=o(" \u2014 "),Sj=a("a"),eRo=o("GPT2ForTokenClassification"),oRo=o(" (OpenAI GPT-2 model)"),rRo=l(),tv=a("li"),Nde=a("strong"),tRo=o("ibert"),aRo=o(" \u2014 "),Rj=a("a"),nRo=o("IBertForTokenClassification"),sRo=o(" (I-BERT model)"),lRo=l(),av=a("li"),jde=a("strong"),iRo=o("layoutlm"),dRo=o(" \u2014 "),Bj=a("a"),cRo=o("LayoutLMForTokenClassification"),fRo=o(" (LayoutLM model)"),mRo=l(),nv=a("li"),Dde=a("strong"),gRo=o("layoutlmv2"),hRo=o(" \u2014 "),Pj=a("a"),pRo=o("LayoutLMv2ForTokenClassification"),_Ro=o(" (LayoutLMv2 model)"),uRo=l(),sv=a("li"),Gde=a("strong"),bRo=o("longformer"),vRo=o(" \u2014 "),$j=a("a"),FRo=o("LongformerForTokenClassification"),TRo=o(" (Longformer model)"),MRo=l(),lv=a("li"),Ode=a("strong"),ERo=o("megatron-bert"),CRo=o(" \u2014 "),Ij=a("a"),wRo=o("MegatronBertForTokenClassification"),ARo=o(" (MegatronBert model)"),yRo=l(),iv=a("li"),Vde=a("strong"),LRo=o("mobilebert"),xRo=o(" \u2014 "),qj=a("a"),kRo=o("MobileBertForTokenClassification"),SRo=o(" (MobileBERT model)"),RRo=l(),dv=a("li"),Xde=a("strong"),BRo=o("mpnet"),PRo=o(" \u2014 "),Nj=a("a"),$Ro=o("MPNetForTokenClassification"),IRo=o(" (MPNet model)"),qRo=l(),cv=a("li"),zde=a("strong"),NRo=o("nystromformer"),jRo=o(" \u2014 "),jj=a("a"),DRo=o("NystromformerForTokenClassification"),GRo=o(" (Nystromformer model)"),ORo=l(),fv=a("li"),Qde=a("strong"),VRo=o("qdqbert"),XRo=o(" \u2014 "),Dj=a("a"),zRo=o("QDQBertForTokenClassification"),QRo=o(" (QDQBert model)"),WRo=l(),mv=a("li"),Wde=a("strong"),HRo=o("rembert"),URo=o(" \u2014 "),Gj=a("a"),JRo=o("RemBertForTokenClassification"),YRo=o(" (RemBERT model)"),KRo=l(),gv=a("li"),Hde=a("strong"),ZRo=o("roberta"),eBo=o(" \u2014 "),Oj=a("a"),oBo=o("RobertaForTokenClassification"),rBo=o(" (RoBERTa model)"),tBo=l(),hv=a("li"),Ude=a("strong"),aBo=o("roformer"),nBo=o(" \u2014 "),Vj=a("a"),sBo=o("RoFormerForTokenClassification"),lBo=o(" (RoFormer model)"),iBo=l(),pv=a("li"),Jde=a("strong"),dBo=o("squeezebert"),cBo=o(" \u2014 "),Xj=a("a"),fBo=o("SqueezeBertForTokenClassification"),mBo=o(" (SqueezeBERT model)"),gBo=l(),_v=a("li"),Yde=a("strong"),hBo=o("xlm"),pBo=o(" \u2014 "),zj=a("a"),_Bo=o("XLMForTokenClassification"),uBo=o(" (XLM model)"),bBo=l(),uv=a("li"),Kde=a("strong"),vBo=o("xlm-roberta"),FBo=o(" \u2014 "),Qj=a("a"),TBo=o("XLMRobertaForTokenClassification"),MBo=o(" (XLM-RoBERTa model)"),EBo=l(),bv=a("li"),Zde=a("strong"),CBo=o("xlm-roberta-xl"),wBo=o(" \u2014 "),Wj=a("a"),ABo=o("XLMRobertaXLForTokenClassification"),yBo=o(" (XLM-RoBERTa-XL model)"),LBo=l(),vv=a("li"),ece=a("strong"),xBo=o("xlnet"),kBo=o(" \u2014 "),Hj=a("a"),SBo=o("XLNetForTokenClassification"),RBo=o(" (XLNet model)"),BBo=l(),Fv=a("li"),oce=a("strong"),PBo=o("yoso"),$Bo=o(" \u2014 "),Uj=a("a"),IBo=o("YosoForTokenClassification"),qBo=o(" (YOSO model)"),NBo=l(),Tv=a("p"),jBo=o("The model is set in evaluation mode by default using "),rce=a("code"),DBo=o("model.eval()"),GBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),OBo=o("model.train()"),VBo=l(),ace=a("p"),XBo=o("Examples:"),zBo=l(),f(_A.$$.fragment),dBe=l(),wd=a("h2"),Mv=a("a"),nce=a("span"),f(uA.$$.fragment),QBo=l(),sce=a("span"),WBo=o("AutoModelForQuestionAnswering"),cBe=l(),nr=a("div"),f(bA.$$.fragment),HBo=l(),Ad=a("p"),UBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jj=a("a"),JBo=o("from_pretrained()"),YBo=o(" class method or the "),Yj=a("a"),KBo=o("from_config()"),ZBo=o(` class
method.`),ePo=l(),vA=a("p"),oPo=o("This class cannot be instantiated directly using "),lce=a("code"),rPo=o("__init__()"),tPo=o(" (throws an error)."),aPo=l(),Zr=a("div"),f(FA.$$.fragment),nPo=l(),ice=a("p"),sPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),lPo=l(),yd=a("p"),iPo=o(`Note:
Loading a model from its configuration file does `),dce=a("strong"),dPo=o("not"),cPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=a("a"),fPo=o("from_pretrained()"),mPo=o(" to load the model weights."),gPo=l(),cce=a("p"),hPo=o("Examples:"),pPo=l(),f(TA.$$.fragment),_Po=l(),Qe=a("div"),f(MA.$$.fragment),uPo=l(),fce=a("p"),bPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vPo=l(),Za=a("p"),FPo=o("The model class to instantiate is selected based on the "),mce=a("code"),TPo=o("model_type"),MPo=o(` property of the config object (either
passed as an argument or loaded from `),gce=a("code"),EPo=o("pretrained_model_name_or_path"),CPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=a("code"),wPo=o("pretrained_model_name_or_path"),APo=o(":"),yPo=l(),R=a("ul"),Ev=a("li"),pce=a("strong"),LPo=o("albert"),xPo=o(" \u2014 "),Zj=a("a"),kPo=o("AlbertForQuestionAnswering"),SPo=o(" (ALBERT model)"),RPo=l(),Cv=a("li"),_ce=a("strong"),BPo=o("bart"),PPo=o(" \u2014 "),eD=a("a"),$Po=o("BartForQuestionAnswering"),IPo=o(" (BART model)"),qPo=l(),wv=a("li"),uce=a("strong"),NPo=o("bert"),jPo=o(" \u2014 "),oD=a("a"),DPo=o("BertForQuestionAnswering"),GPo=o(" (BERT model)"),OPo=l(),Av=a("li"),bce=a("strong"),VPo=o("big_bird"),XPo=o(" \u2014 "),rD=a("a"),zPo=o("BigBirdForQuestionAnswering"),QPo=o(" (BigBird model)"),WPo=l(),yv=a("li"),vce=a("strong"),HPo=o("bigbird_pegasus"),UPo=o(" \u2014 "),tD=a("a"),JPo=o("BigBirdPegasusForQuestionAnswering"),YPo=o(" (BigBirdPegasus model)"),KPo=l(),Lv=a("li"),Fce=a("strong"),ZPo=o("camembert"),e$o=o(" \u2014 "),aD=a("a"),o$o=o("CamembertForQuestionAnswering"),r$o=o(" (CamemBERT model)"),t$o=l(),xv=a("li"),Tce=a("strong"),a$o=o("canine"),n$o=o(" \u2014 "),nD=a("a"),s$o=o("CanineForQuestionAnswering"),l$o=o(" (Canine model)"),i$o=l(),kv=a("li"),Mce=a("strong"),d$o=o("convbert"),c$o=o(" \u2014 "),sD=a("a"),f$o=o("ConvBertForQuestionAnswering"),m$o=o(" (ConvBERT model)"),g$o=l(),Sv=a("li"),Ece=a("strong"),h$o=o("data2vec-text"),p$o=o(" \u2014 "),lD=a("a"),_$o=o("Data2VecTextForQuestionAnswering"),u$o=o(" (Data2VecText model)"),b$o=l(),Rv=a("li"),Cce=a("strong"),v$o=o("deberta"),F$o=o(" \u2014 "),iD=a("a"),T$o=o("DebertaForQuestionAnswering"),M$o=o(" (DeBERTa model)"),E$o=l(),Bv=a("li"),wce=a("strong"),C$o=o("deberta-v2"),w$o=o(" \u2014 "),dD=a("a"),A$o=o("DebertaV2ForQuestionAnswering"),y$o=o(" (DeBERTa-v2 model)"),L$o=l(),Pv=a("li"),Ace=a("strong"),x$o=o("distilbert"),k$o=o(" \u2014 "),cD=a("a"),S$o=o("DistilBertForQuestionAnswering"),R$o=o(" (DistilBERT model)"),B$o=l(),$v=a("li"),yce=a("strong"),P$o=o("electra"),$$o=o(" \u2014 "),fD=a("a"),I$o=o("ElectraForQuestionAnswering"),q$o=o(" (ELECTRA model)"),N$o=l(),Iv=a("li"),Lce=a("strong"),j$o=o("flaubert"),D$o=o(" \u2014 "),mD=a("a"),G$o=o("FlaubertForQuestionAnsweringSimple"),O$o=o(" (FlauBERT model)"),V$o=l(),qv=a("li"),xce=a("strong"),X$o=o("fnet"),z$o=o(" \u2014 "),gD=a("a"),Q$o=o("FNetForQuestionAnswering"),W$o=o(" (FNet model)"),H$o=l(),Nv=a("li"),kce=a("strong"),U$o=o("funnel"),J$o=o(" \u2014 "),hD=a("a"),Y$o=o("FunnelForQuestionAnswering"),K$o=o(" (Funnel Transformer model)"),Z$o=l(),jv=a("li"),Sce=a("strong"),eIo=o("gptj"),oIo=o(" \u2014 "),pD=a("a"),rIo=o("GPTJForQuestionAnswering"),tIo=o(" (GPT-J model)"),aIo=l(),Dv=a("li"),Rce=a("strong"),nIo=o("ibert"),sIo=o(" \u2014 "),_D=a("a"),lIo=o("IBertForQuestionAnswering"),iIo=o(" (I-BERT model)"),dIo=l(),Gv=a("li"),Bce=a("strong"),cIo=o("layoutlmv2"),fIo=o(" \u2014 "),uD=a("a"),mIo=o("LayoutLMv2ForQuestionAnswering"),gIo=o(" (LayoutLMv2 model)"),hIo=l(),Ov=a("li"),Pce=a("strong"),pIo=o("led"),_Io=o(" \u2014 "),bD=a("a"),uIo=o("LEDForQuestionAnswering"),bIo=o(" (LED model)"),vIo=l(),Vv=a("li"),$ce=a("strong"),FIo=o("longformer"),TIo=o(" \u2014 "),vD=a("a"),MIo=o("LongformerForQuestionAnswering"),EIo=o(" (Longformer model)"),CIo=l(),Xv=a("li"),Ice=a("strong"),wIo=o("lxmert"),AIo=o(" \u2014 "),FD=a("a"),yIo=o("LxmertForQuestionAnswering"),LIo=o(" (LXMERT model)"),xIo=l(),zv=a("li"),qce=a("strong"),kIo=o("mbart"),SIo=o(" \u2014 "),TD=a("a"),RIo=o("MBartForQuestionAnswering"),BIo=o(" (mBART model)"),PIo=l(),Qv=a("li"),Nce=a("strong"),$Io=o("megatron-bert"),IIo=o(" \u2014 "),MD=a("a"),qIo=o("MegatronBertForQuestionAnswering"),NIo=o(" (MegatronBert model)"),jIo=l(),Wv=a("li"),jce=a("strong"),DIo=o("mobilebert"),GIo=o(" \u2014 "),ED=a("a"),OIo=o("MobileBertForQuestionAnswering"),VIo=o(" (MobileBERT model)"),XIo=l(),Hv=a("li"),Dce=a("strong"),zIo=o("mpnet"),QIo=o(" \u2014 "),CD=a("a"),WIo=o("MPNetForQuestionAnswering"),HIo=o(" (MPNet model)"),UIo=l(),Uv=a("li"),Gce=a("strong"),JIo=o("nystromformer"),YIo=o(" \u2014 "),wD=a("a"),KIo=o("NystromformerForQuestionAnswering"),ZIo=o(" (Nystromformer model)"),eqo=l(),Jv=a("li"),Oce=a("strong"),oqo=o("qdqbert"),rqo=o(" \u2014 "),AD=a("a"),tqo=o("QDQBertForQuestionAnswering"),aqo=o(" (QDQBert model)"),nqo=l(),Yv=a("li"),Vce=a("strong"),sqo=o("reformer"),lqo=o(" \u2014 "),yD=a("a"),iqo=o("ReformerForQuestionAnswering"),dqo=o(" (Reformer model)"),cqo=l(),Kv=a("li"),Xce=a("strong"),fqo=o("rembert"),mqo=o(" \u2014 "),LD=a("a"),gqo=o("RemBertForQuestionAnswering"),hqo=o(" (RemBERT model)"),pqo=l(),Zv=a("li"),zce=a("strong"),_qo=o("roberta"),uqo=o(" \u2014 "),xD=a("a"),bqo=o("RobertaForQuestionAnswering"),vqo=o(" (RoBERTa model)"),Fqo=l(),eF=a("li"),Qce=a("strong"),Tqo=o("roformer"),Mqo=o(" \u2014 "),kD=a("a"),Eqo=o("RoFormerForQuestionAnswering"),Cqo=o(" (RoFormer model)"),wqo=l(),oF=a("li"),Wce=a("strong"),Aqo=o("splinter"),yqo=o(" \u2014 "),SD=a("a"),Lqo=o("SplinterForQuestionAnswering"),xqo=o(" (Splinter model)"),kqo=l(),rF=a("li"),Hce=a("strong"),Sqo=o("squeezebert"),Rqo=o(" \u2014 "),RD=a("a"),Bqo=o("SqueezeBertForQuestionAnswering"),Pqo=o(" (SqueezeBERT model)"),$qo=l(),tF=a("li"),Uce=a("strong"),Iqo=o("xlm"),qqo=o(" \u2014 "),BD=a("a"),Nqo=o("XLMForQuestionAnsweringSimple"),jqo=o(" (XLM model)"),Dqo=l(),aF=a("li"),Jce=a("strong"),Gqo=o("xlm-roberta"),Oqo=o(" \u2014 "),PD=a("a"),Vqo=o("XLMRobertaForQuestionAnswering"),Xqo=o(" (XLM-RoBERTa model)"),zqo=l(),nF=a("li"),Yce=a("strong"),Qqo=o("xlm-roberta-xl"),Wqo=o(" \u2014 "),$D=a("a"),Hqo=o("XLMRobertaXLForQuestionAnswering"),Uqo=o(" (XLM-RoBERTa-XL model)"),Jqo=l(),sF=a("li"),Kce=a("strong"),Yqo=o("xlnet"),Kqo=o(" \u2014 "),ID=a("a"),Zqo=o("XLNetForQuestionAnsweringSimple"),eNo=o(" (XLNet model)"),oNo=l(),lF=a("li"),Zce=a("strong"),rNo=o("yoso"),tNo=o(" \u2014 "),qD=a("a"),aNo=o("YosoForQuestionAnswering"),nNo=o(" (YOSO model)"),sNo=l(),iF=a("p"),lNo=o("The model is set in evaluation mode by default using "),efe=a("code"),iNo=o("model.eval()"),dNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),cNo=o("model.train()"),fNo=l(),rfe=a("p"),mNo=o("Examples:"),gNo=l(),f(EA.$$.fragment),fBe=l(),Ld=a("h2"),dF=a("a"),tfe=a("span"),f(CA.$$.fragment),hNo=l(),afe=a("span"),pNo=o("AutoModelForTableQuestionAnswering"),mBe=l(),sr=a("div"),f(wA.$$.fragment),_No=l(),xd=a("p"),uNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ND=a("a"),bNo=o("from_pretrained()"),vNo=o(" class method or the "),jD=a("a"),FNo=o("from_config()"),TNo=o(` class
method.`),MNo=l(),AA=a("p"),ENo=o("This class cannot be instantiated directly using "),nfe=a("code"),CNo=o("__init__()"),wNo=o(" (throws an error)."),ANo=l(),et=a("div"),f(yA.$$.fragment),yNo=l(),sfe=a("p"),LNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),xNo=l(),kd=a("p"),kNo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),SNo=o("not"),RNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=a("a"),BNo=o("from_pretrained()"),PNo=o(" to load the model weights."),$No=l(),ife=a("p"),INo=o("Examples:"),qNo=l(),f(LA.$$.fragment),NNo=l(),We=a("div"),f(xA.$$.fragment),jNo=l(),dfe=a("p"),DNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),GNo=l(),en=a("p"),ONo=o("The model class to instantiate is selected based on the "),cfe=a("code"),VNo=o("model_type"),XNo=o(` property of the config object (either
passed as an argument or loaded from `),ffe=a("code"),zNo=o("pretrained_model_name_or_path"),QNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=a("code"),WNo=o("pretrained_model_name_or_path"),HNo=o(":"),UNo=l(),gfe=a("ul"),cF=a("li"),hfe=a("strong"),JNo=o("tapas"),YNo=o(" \u2014 "),GD=a("a"),KNo=o("TapasForQuestionAnswering"),ZNo=o(" (TAPAS model)"),ejo=l(),fF=a("p"),ojo=o("The model is set in evaluation mode by default using "),pfe=a("code"),rjo=o("model.eval()"),tjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=a("code"),ajo=o("model.train()"),njo=l(),ufe=a("p"),sjo=o("Examples:"),ljo=l(),f(kA.$$.fragment),gBe=l(),Sd=a("h2"),mF=a("a"),bfe=a("span"),f(SA.$$.fragment),ijo=l(),vfe=a("span"),djo=o("AutoModelForImageClassification"),hBe=l(),lr=a("div"),f(RA.$$.fragment),cjo=l(),Rd=a("p"),fjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OD=a("a"),mjo=o("from_pretrained()"),gjo=o(" class method or the "),VD=a("a"),hjo=o("from_config()"),pjo=o(` class
method.`),_jo=l(),BA=a("p"),ujo=o("This class cannot be instantiated directly using "),Ffe=a("code"),bjo=o("__init__()"),vjo=o(" (throws an error)."),Fjo=l(),ot=a("div"),f(PA.$$.fragment),Tjo=l(),Tfe=a("p"),Mjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ejo=l(),Bd=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),Mfe=a("strong"),wjo=o("not"),Ajo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),yjo=o("from_pretrained()"),Ljo=o(" to load the model weights."),xjo=l(),Efe=a("p"),kjo=o("Examples:"),Sjo=l(),f($A.$$.fragment),Rjo=l(),He=a("div"),f(IA.$$.fragment),Bjo=l(),Cfe=a("p"),Pjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),$jo=l(),on=a("p"),Ijo=o("The model class to instantiate is selected based on the "),wfe=a("code"),qjo=o("model_type"),Njo=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),jjo=o("pretrained_model_name_or_path"),Djo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=a("code"),Gjo=o("pretrained_model_name_or_path"),Ojo=o(":"),Vjo=l(),de=a("ul"),gF=a("li"),Lfe=a("strong"),Xjo=o("beit"),zjo=o(" \u2014 "),zD=a("a"),Qjo=o("BeitForImageClassification"),Wjo=o(" (BEiT model)"),Hjo=l(),hF=a("li"),xfe=a("strong"),Ujo=o("convnext"),Jjo=o(" \u2014 "),QD=a("a"),Yjo=o("ConvNextForImageClassification"),Kjo=o(" (ConvNext model)"),Zjo=l(),pF=a("li"),kfe=a("strong"),eDo=o("data2vec-vision"),oDo=o(" \u2014 "),WD=a("a"),rDo=o("Data2VecVisionForImageClassification"),tDo=o(" (Data2VecVision model)"),aDo=l(),Os=a("li"),Sfe=a("strong"),nDo=o("deit"),sDo=o(" \u2014 "),HD=a("a"),lDo=o("DeiTForImageClassification"),iDo=o(" or "),UD=a("a"),dDo=o("DeiTForImageClassificationWithTeacher"),cDo=o(" (DeiT model)"),fDo=l(),_F=a("li"),Rfe=a("strong"),mDo=o("imagegpt"),gDo=o(" \u2014 "),JD=a("a"),hDo=o("ImageGPTForImageClassification"),pDo=o(" (ImageGPT model)"),_Do=l(),ma=a("li"),Bfe=a("strong"),uDo=o("perceiver"),bDo=o(" \u2014 "),YD=a("a"),vDo=o("PerceiverForImageClassificationLearned"),FDo=o(" or "),KD=a("a"),TDo=o("PerceiverForImageClassificationFourier"),MDo=o(" or "),ZD=a("a"),EDo=o("PerceiverForImageClassificationConvProcessing"),CDo=o(" (Perceiver model)"),wDo=l(),uF=a("li"),Pfe=a("strong"),ADo=o("poolformer"),yDo=o(" \u2014 "),eG=a("a"),LDo=o("PoolFormerForImageClassification"),xDo=o(" (PoolFormer model)"),kDo=l(),bF=a("li"),$fe=a("strong"),SDo=o("regnet"),RDo=o(" \u2014 "),oG=a("a"),BDo=o("RegNetForImageClassification"),PDo=o(" (RegNet model)"),$Do=l(),vF=a("li"),Ife=a("strong"),IDo=o("resnet"),qDo=o(" \u2014 "),rG=a("a"),NDo=o("ResNetForImageClassification"),jDo=o(" (ResNet model)"),DDo=l(),FF=a("li"),qfe=a("strong"),GDo=o("segformer"),ODo=o(" \u2014 "),tG=a("a"),VDo=o("SegformerForImageClassification"),XDo=o(" (SegFormer model)"),zDo=l(),TF=a("li"),Nfe=a("strong"),QDo=o("swin"),WDo=o(" \u2014 "),aG=a("a"),HDo=o("SwinForImageClassification"),UDo=o(" (Swin model)"),JDo=l(),MF=a("li"),jfe=a("strong"),YDo=o("van"),KDo=o(" \u2014 "),nG=a("a"),ZDo=o("VanForImageClassification"),eGo=o(" (VAN model)"),oGo=l(),EF=a("li"),Dfe=a("strong"),rGo=o("vit"),tGo=o(" \u2014 "),sG=a("a"),aGo=o("ViTForImageClassification"),nGo=o(" (ViT model)"),sGo=l(),CF=a("p"),lGo=o("The model is set in evaluation mode by default using "),Gfe=a("code"),iGo=o("model.eval()"),dGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=a("code"),cGo=o("model.train()"),fGo=l(),Vfe=a("p"),mGo=o("Examples:"),gGo=l(),f(qA.$$.fragment),pBe=l(),Pd=a("h2"),wF=a("a"),Xfe=a("span"),f(NA.$$.fragment),hGo=l(),zfe=a("span"),pGo=o("AutoModelForVision2Seq"),_Be=l(),ir=a("div"),f(jA.$$.fragment),_Go=l(),$d=a("p"),uGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lG=a("a"),bGo=o("from_pretrained()"),vGo=o(" class method or the "),iG=a("a"),FGo=o("from_config()"),TGo=o(` class
method.`),MGo=l(),DA=a("p"),EGo=o("This class cannot be instantiated directly using "),Qfe=a("code"),CGo=o("__init__()"),wGo=o(" (throws an error)."),AGo=l(),rt=a("div"),f(GA.$$.fragment),yGo=l(),Wfe=a("p"),LGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xGo=l(),Id=a("p"),kGo=o(`Note:
Loading a model from its configuration file does `),Hfe=a("strong"),SGo=o("not"),RGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=a("a"),BGo=o("from_pretrained()"),PGo=o(" to load the model weights."),$Go=l(),Ufe=a("p"),IGo=o("Examples:"),qGo=l(),f(OA.$$.fragment),NGo=l(),Ue=a("div"),f(VA.$$.fragment),jGo=l(),Jfe=a("p"),DGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GGo=l(),rn=a("p"),OGo=o("The model class to instantiate is selected based on the "),Yfe=a("code"),VGo=o("model_type"),XGo=o(` property of the config object (either
passed as an argument or loaded from `),Kfe=a("code"),zGo=o("pretrained_model_name_or_path"),QGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=a("code"),WGo=o("pretrained_model_name_or_path"),HGo=o(":"),UGo=l(),eme=a("ul"),AF=a("li"),ome=a("strong"),JGo=o("vision-encoder-decoder"),YGo=o(" \u2014 "),cG=a("a"),KGo=o("VisionEncoderDecoderModel"),ZGo=o(" (Vision Encoder decoder model)"),eOo=l(),yF=a("p"),oOo=o("The model is set in evaluation mode by default using "),rme=a("code"),rOo=o("model.eval()"),tOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=a("code"),aOo=o("model.train()"),nOo=l(),ame=a("p"),sOo=o("Examples:"),lOo=l(),f(XA.$$.fragment),uBe=l(),qd=a("h2"),LF=a("a"),nme=a("span"),f(zA.$$.fragment),iOo=l(),sme=a("span"),dOo=o("AutoModelForAudioClassification"),bBe=l(),dr=a("div"),f(QA.$$.fragment),cOo=l(),Nd=a("p"),fOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fG=a("a"),mOo=o("from_pretrained()"),gOo=o(" class method or the "),mG=a("a"),hOo=o("from_config()"),pOo=o(` class
method.`),_Oo=l(),WA=a("p"),uOo=o("This class cannot be instantiated directly using "),lme=a("code"),bOo=o("__init__()"),vOo=o(" (throws an error)."),FOo=l(),tt=a("div"),f(HA.$$.fragment),TOo=l(),ime=a("p"),MOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),EOo=l(),jd=a("p"),COo=o(`Note:
Loading a model from its configuration file does `),dme=a("strong"),wOo=o("not"),AOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),yOo=o("from_pretrained()"),LOo=o(" to load the model weights."),xOo=l(),cme=a("p"),kOo=o("Examples:"),SOo=l(),f(UA.$$.fragment),ROo=l(),Je=a("div"),f(JA.$$.fragment),BOo=l(),fme=a("p"),POo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),$Oo=l(),tn=a("p"),IOo=o("The model class to instantiate is selected based on the "),mme=a("code"),qOo=o("model_type"),NOo=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),jOo=o("pretrained_model_name_or_path"),DOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),GOo=o("pretrained_model_name_or_path"),OOo=o(":"),VOo=l(),Se=a("ul"),xF=a("li"),pme=a("strong"),XOo=o("data2vec-audio"),zOo=o(" \u2014 "),hG=a("a"),QOo=o("Data2VecAudioForSequenceClassification"),WOo=o(" (Data2VecAudio model)"),HOo=l(),kF=a("li"),_me=a("strong"),UOo=o("hubert"),JOo=o(" \u2014 "),pG=a("a"),YOo=o("HubertForSequenceClassification"),KOo=o(" (Hubert model)"),ZOo=l(),SF=a("li"),ume=a("strong"),eVo=o("sew"),oVo=o(" \u2014 "),_G=a("a"),rVo=o("SEWForSequenceClassification"),tVo=o(" (SEW model)"),aVo=l(),RF=a("li"),bme=a("strong"),nVo=o("sew-d"),sVo=o(" \u2014 "),uG=a("a"),lVo=o("SEWDForSequenceClassification"),iVo=o(" (SEW-D model)"),dVo=l(),BF=a("li"),vme=a("strong"),cVo=o("unispeech"),fVo=o(" \u2014 "),bG=a("a"),mVo=o("UniSpeechForSequenceClassification"),gVo=o(" (UniSpeech model)"),hVo=l(),PF=a("li"),Fme=a("strong"),pVo=o("unispeech-sat"),_Vo=o(" \u2014 "),vG=a("a"),uVo=o("UniSpeechSatForSequenceClassification"),bVo=o(" (UniSpeechSat model)"),vVo=l(),$F=a("li"),Tme=a("strong"),FVo=o("wav2vec2"),TVo=o(" \u2014 "),FG=a("a"),MVo=o("Wav2Vec2ForSequenceClassification"),EVo=o(" (Wav2Vec2 model)"),CVo=l(),IF=a("li"),Mme=a("strong"),wVo=o("wavlm"),AVo=o(" \u2014 "),TG=a("a"),yVo=o("WavLMForSequenceClassification"),LVo=o(" (WavLM model)"),xVo=l(),qF=a("p"),kVo=o("The model is set in evaluation mode by default using "),Eme=a("code"),SVo=o("model.eval()"),RVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=a("code"),BVo=o("model.train()"),PVo=l(),wme=a("p"),$Vo=o("Examples:"),IVo=l(),f(YA.$$.fragment),vBe=l(),Dd=a("h2"),NF=a("a"),Ame=a("span"),f(KA.$$.fragment),qVo=l(),yme=a("span"),NVo=o("AutoModelForAudioFrameClassification"),FBe=l(),cr=a("div"),f(ZA.$$.fragment),jVo=l(),Gd=a("p"),DVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MG=a("a"),GVo=o("from_pretrained()"),OVo=o(" class method or the "),EG=a("a"),VVo=o("from_config()"),XVo=o(` class
method.`),zVo=l(),e0=a("p"),QVo=o("This class cannot be instantiated directly using "),Lme=a("code"),WVo=o("__init__()"),HVo=o(" (throws an error)."),UVo=l(),at=a("div"),f(o0.$$.fragment),JVo=l(),xme=a("p"),YVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),KVo=l(),Od=a("p"),ZVo=o(`Note:
Loading a model from its configuration file does `),kme=a("strong"),eXo=o("not"),oXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),rXo=o("from_pretrained()"),tXo=o(" to load the model weights."),aXo=l(),Sme=a("p"),nXo=o("Examples:"),sXo=l(),f(r0.$$.fragment),lXo=l(),Ye=a("div"),f(t0.$$.fragment),iXo=l(),Rme=a("p"),dXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),cXo=l(),an=a("p"),fXo=o("The model class to instantiate is selected based on the "),Bme=a("code"),mXo=o("model_type"),gXo=o(` property of the config object (either
passed as an argument or loaded from `),Pme=a("code"),hXo=o("pretrained_model_name_or_path"),pXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=a("code"),_Xo=o("pretrained_model_name_or_path"),uXo=o(":"),bXo=l(),nn=a("ul"),jF=a("li"),Ime=a("strong"),vXo=o("data2vec-audio"),FXo=o(" \u2014 "),wG=a("a"),TXo=o("Data2VecAudioForAudioFrameClassification"),MXo=o(" (Data2VecAudio model)"),EXo=l(),DF=a("li"),qme=a("strong"),CXo=o("unispeech-sat"),wXo=o(" \u2014 "),AG=a("a"),AXo=o("UniSpeechSatForAudioFrameClassification"),yXo=o(" (UniSpeechSat model)"),LXo=l(),GF=a("li"),Nme=a("strong"),xXo=o("wav2vec2"),kXo=o(" \u2014 "),yG=a("a"),SXo=o("Wav2Vec2ForAudioFrameClassification"),RXo=o(" (Wav2Vec2 model)"),BXo=l(),OF=a("li"),jme=a("strong"),PXo=o("wavlm"),$Xo=o(" \u2014 "),LG=a("a"),IXo=o("WavLMForAudioFrameClassification"),qXo=o(" (WavLM model)"),NXo=l(),VF=a("p"),jXo=o("The model is set in evaluation mode by default using "),Dme=a("code"),DXo=o("model.eval()"),GXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=a("code"),OXo=o("model.train()"),VXo=l(),Ome=a("p"),XXo=o("Examples:"),zXo=l(),f(a0.$$.fragment),TBe=l(),Vd=a("h2"),XF=a("a"),Vme=a("span"),f(n0.$$.fragment),QXo=l(),Xme=a("span"),WXo=o("AutoModelForCTC"),MBe=l(),fr=a("div"),f(s0.$$.fragment),HXo=l(),Xd=a("p"),UXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xG=a("a"),JXo=o("from_pretrained()"),YXo=o(" class method or the "),kG=a("a"),KXo=o("from_config()"),ZXo=o(` class
method.`),ezo=l(),l0=a("p"),ozo=o("This class cannot be instantiated directly using "),zme=a("code"),rzo=o("__init__()"),tzo=o(" (throws an error)."),azo=l(),nt=a("div"),f(i0.$$.fragment),nzo=l(),Qme=a("p"),szo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),lzo=l(),zd=a("p"),izo=o(`Note:
Loading a model from its configuration file does `),Wme=a("strong"),dzo=o("not"),czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=a("a"),fzo=o("from_pretrained()"),mzo=o(" to load the model weights."),gzo=l(),Hme=a("p"),hzo=o("Examples:"),pzo=l(),f(d0.$$.fragment),_zo=l(),Ke=a("div"),f(c0.$$.fragment),uzo=l(),Ume=a("p"),bzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),vzo=l(),sn=a("p"),Fzo=o("The model class to instantiate is selected based on the "),Jme=a("code"),Tzo=o("model_type"),Mzo=o(` property of the config object (either
passed as an argument or loaded from `),Yme=a("code"),Ezo=o("pretrained_model_name_or_path"),Czo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(":"),yzo=l(),Re=a("ul"),zF=a("li"),Zme=a("strong"),Lzo=o("data2vec-audio"),xzo=o(" \u2014 "),RG=a("a"),kzo=o("Data2VecAudioForCTC"),Szo=o(" (Data2VecAudio model)"),Rzo=l(),QF=a("li"),ege=a("strong"),Bzo=o("hubert"),Pzo=o(" \u2014 "),BG=a("a"),$zo=o("HubertForCTC"),Izo=o(" (Hubert model)"),qzo=l(),WF=a("li"),oge=a("strong"),Nzo=o("sew"),jzo=o(" \u2014 "),PG=a("a"),Dzo=o("SEWForCTC"),Gzo=o(" (SEW model)"),Ozo=l(),HF=a("li"),rge=a("strong"),Vzo=o("sew-d"),Xzo=o(" \u2014 "),$G=a("a"),zzo=o("SEWDForCTC"),Qzo=o(" (SEW-D model)"),Wzo=l(),UF=a("li"),tge=a("strong"),Hzo=o("unispeech"),Uzo=o(" \u2014 "),IG=a("a"),Jzo=o("UniSpeechForCTC"),Yzo=o(" (UniSpeech model)"),Kzo=l(),JF=a("li"),age=a("strong"),Zzo=o("unispeech-sat"),eQo=o(" \u2014 "),qG=a("a"),oQo=o("UniSpeechSatForCTC"),rQo=o(" (UniSpeechSat model)"),tQo=l(),YF=a("li"),nge=a("strong"),aQo=o("wav2vec2"),nQo=o(" \u2014 "),NG=a("a"),sQo=o("Wav2Vec2ForCTC"),lQo=o(" (Wav2Vec2 model)"),iQo=l(),KF=a("li"),sge=a("strong"),dQo=o("wavlm"),cQo=o(" \u2014 "),jG=a("a"),fQo=o("WavLMForCTC"),mQo=o(" (WavLM model)"),gQo=l(),ZF=a("p"),hQo=o("The model is set in evaluation mode by default using "),lge=a("code"),pQo=o("model.eval()"),_Qo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=a("code"),uQo=o("model.train()"),bQo=l(),dge=a("p"),vQo=o("Examples:"),FQo=l(),f(f0.$$.fragment),EBe=l(),Qd=a("h2"),eT=a("a"),cge=a("span"),f(m0.$$.fragment),TQo=l(),fge=a("span"),MQo=o("AutoModelForSpeechSeq2Seq"),CBe=l(),mr=a("div"),f(g0.$$.fragment),EQo=l(),Wd=a("p"),CQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DG=a("a"),wQo=o("from_pretrained()"),AQo=o(" class method or the "),GG=a("a"),yQo=o("from_config()"),LQo=o(` class
method.`),xQo=l(),h0=a("p"),kQo=o("This class cannot be instantiated directly using "),mge=a("code"),SQo=o("__init__()"),RQo=o(" (throws an error)."),BQo=l(),st=a("div"),f(p0.$$.fragment),PQo=l(),gge=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),IQo=l(),Hd=a("p"),qQo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),NQo=o("not"),jQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=a("a"),DQo=o("from_pretrained()"),GQo=o(" to load the model weights."),OQo=l(),pge=a("p"),VQo=o("Examples:"),XQo=l(),f(_0.$$.fragment),zQo=l(),Ze=a("div"),f(u0.$$.fragment),QQo=l(),_ge=a("p"),WQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),HQo=l(),ln=a("p"),UQo=o("The model class to instantiate is selected based on the "),uge=a("code"),JQo=o("model_type"),YQo=o(` property of the config object (either
passed as an argument or loaded from `),bge=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),b0=a("ul"),oT=a("li"),Fge=a("strong"),tWo=o("speech-encoder-decoder"),aWo=o(" \u2014 "),VG=a("a"),nWo=o("SpeechEncoderDecoderModel"),sWo=o(" (Speech Encoder decoder model)"),lWo=l(),rT=a("li"),Tge=a("strong"),iWo=o("speech_to_text"),dWo=o(" \u2014 "),XG=a("a"),cWo=o("Speech2TextForConditionalGeneration"),fWo=o(" (Speech2Text model)"),mWo=l(),tT=a("p"),gWo=o("The model is set in evaluation mode by default using "),Mge=a("code"),hWo=o("model.eval()"),pWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=a("code"),_Wo=o("model.train()"),uWo=l(),Cge=a("p"),bWo=o("Examples:"),vWo=l(),f(v0.$$.fragment),wBe=l(),Ud=a("h2"),aT=a("a"),wge=a("span"),f(F0.$$.fragment),FWo=l(),Age=a("span"),TWo=o("AutoModelForAudioXVector"),ABe=l(),gr=a("div"),f(T0.$$.fragment),MWo=l(),Jd=a("p"),EWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zG=a("a"),CWo=o("from_pretrained()"),wWo=o(" class method or the "),QG=a("a"),AWo=o("from_config()"),yWo=o(` class
method.`),LWo=l(),M0=a("p"),xWo=o("This class cannot be instantiated directly using "),yge=a("code"),kWo=o("__init__()"),SWo=o(" (throws an error)."),RWo=l(),lt=a("div"),f(E0.$$.fragment),BWo=l(),Lge=a("p"),PWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$Wo=l(),Yd=a("p"),IWo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),qWo=o("not"),NWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),jWo=o("from_pretrained()"),DWo=o(" to load the model weights."),GWo=l(),kge=a("p"),OWo=o("Examples:"),VWo=l(),f(C0.$$.fragment),XWo=l(),eo=a("div"),f(w0.$$.fragment),zWo=l(),Sge=a("p"),QWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),WWo=l(),dn=a("p"),HWo=o("The model class to instantiate is selected based on the "),Rge=a("code"),UWo=o("model_type"),JWo=o(` property of the config object (either
passed as an argument or loaded from `),Bge=a("code"),YWo=o("pretrained_model_name_or_path"),KWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),ZWo=o("pretrained_model_name_or_path"),eHo=o(":"),oHo=l(),cn=a("ul"),nT=a("li"),$ge=a("strong"),rHo=o("data2vec-audio"),tHo=o(" \u2014 "),HG=a("a"),aHo=o("Data2VecAudioForXVector"),nHo=o(" (Data2VecAudio model)"),sHo=l(),sT=a("li"),Ige=a("strong"),lHo=o("unispeech-sat"),iHo=o(" \u2014 "),UG=a("a"),dHo=o("UniSpeechSatForXVector"),cHo=o(" (UniSpeechSat model)"),fHo=l(),lT=a("li"),qge=a("strong"),mHo=o("wav2vec2"),gHo=o(" \u2014 "),JG=a("a"),hHo=o("Wav2Vec2ForXVector"),pHo=o(" (Wav2Vec2 model)"),_Ho=l(),iT=a("li"),Nge=a("strong"),uHo=o("wavlm"),bHo=o(" \u2014 "),YG=a("a"),vHo=o("WavLMForXVector"),FHo=o(" (WavLM model)"),THo=l(),dT=a("p"),MHo=o("The model is set in evaluation mode by default using "),jge=a("code"),EHo=o("model.eval()"),CHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=a("code"),wHo=o("model.train()"),AHo=l(),Gge=a("p"),yHo=o("Examples:"),LHo=l(),f(A0.$$.fragment),yBe=l(),Kd=a("h2"),cT=a("a"),Oge=a("span"),f(y0.$$.fragment),xHo=l(),Vge=a("span"),kHo=o("AutoModelForMaskedImageModeling"),LBe=l(),hr=a("div"),f(L0.$$.fragment),SHo=l(),Zd=a("p"),RHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KG=a("a"),BHo=o("from_pretrained()"),PHo=o(" class method or the "),ZG=a("a"),$Ho=o("from_config()"),IHo=o(` class
method.`),qHo=l(),x0=a("p"),NHo=o("This class cannot be instantiated directly using "),Xge=a("code"),jHo=o("__init__()"),DHo=o(" (throws an error)."),GHo=l(),it=a("div"),f(k0.$$.fragment),OHo=l(),zge=a("p"),VHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),XHo=l(),ec=a("p"),zHo=o(`Note:
Loading a model from its configuration file does `),Qge=a("strong"),QHo=o("not"),WHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),HHo=o("from_pretrained()"),UHo=o(" to load the model weights."),JHo=l(),Wge=a("p"),YHo=o("Examples:"),KHo=l(),f(S0.$$.fragment),ZHo=l(),oo=a("div"),f(R0.$$.fragment),eUo=l(),Hge=a("p"),oUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),rUo=l(),fn=a("p"),tUo=o("The model class to instantiate is selected based on the "),Uge=a("code"),aUo=o("model_type"),nUo=o(` property of the config object (either
passed as an argument or loaded from `),Jge=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(":"),cUo=l(),oc=a("ul"),fT=a("li"),Kge=a("strong"),fUo=o("deit"),mUo=o(" \u2014 "),oO=a("a"),gUo=o("DeiTForMaskedImageModeling"),hUo=o(" (DeiT model)"),pUo=l(),mT=a("li"),Zge=a("strong"),_Uo=o("swin"),uUo=o(" \u2014 "),rO=a("a"),bUo=o("SwinForMaskedImageModeling"),vUo=o(" (Swin model)"),FUo=l(),gT=a("li"),ehe=a("strong"),TUo=o("vit"),MUo=o(" \u2014 "),tO=a("a"),EUo=o("ViTForMaskedImageModeling"),CUo=o(" (ViT model)"),wUo=l(),hT=a("p"),AUo=o("The model is set in evaluation mode by default using "),ohe=a("code"),yUo=o("model.eval()"),LUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=a("code"),xUo=o("model.train()"),kUo=l(),the=a("p"),SUo=o("Examples:"),RUo=l(),f(B0.$$.fragment),xBe=l(),rc=a("h2"),pT=a("a"),ahe=a("span"),f(P0.$$.fragment),BUo=l(),nhe=a("span"),PUo=o("AutoModelForObjectDetection"),kBe=l(),pr=a("div"),f($0.$$.fragment),$Uo=l(),tc=a("p"),IUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aO=a("a"),qUo=o("from_pretrained()"),NUo=o(" class method or the "),nO=a("a"),jUo=o("from_config()"),DUo=o(` class
method.`),GUo=l(),I0=a("p"),OUo=o("This class cannot be instantiated directly using "),she=a("code"),VUo=o("__init__()"),XUo=o(" (throws an error)."),zUo=l(),dt=a("div"),f(q0.$$.fragment),QUo=l(),lhe=a("p"),WUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),HUo=l(),ac=a("p"),UUo=o(`Note:
Loading a model from its configuration file does `),ihe=a("strong"),JUo=o("not"),YUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),KUo=o("from_pretrained()"),ZUo=o(" to load the model weights."),eJo=l(),dhe=a("p"),oJo=o("Examples:"),rJo=l(),f(N0.$$.fragment),tJo=l(),ro=a("div"),f(j0.$$.fragment),aJo=l(),che=a("p"),nJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),sJo=l(),mn=a("p"),lJo=o("The model class to instantiate is selected based on the "),fhe=a("code"),iJo=o("model_type"),dJo=o(` property of the config object (either
passed as an argument or loaded from `),mhe=a("code"),cJo=o("pretrained_model_name_or_path"),fJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=a("code"),mJo=o("pretrained_model_name_or_path"),gJo=o(":"),hJo=l(),hhe=a("ul"),_T=a("li"),phe=a("strong"),pJo=o("detr"),_Jo=o(" \u2014 "),lO=a("a"),uJo=o("DetrForObjectDetection"),bJo=o(" (DETR model)"),vJo=l(),uT=a("p"),FJo=o("The model is set in evaluation mode by default using "),_he=a("code"),TJo=o("model.eval()"),MJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),EJo=o("model.train()"),CJo=l(),bhe=a("p"),wJo=o("Examples:"),AJo=l(),f(D0.$$.fragment),SBe=l(),nc=a("h2"),bT=a("a"),vhe=a("span"),f(G0.$$.fragment),yJo=l(),Fhe=a("span"),LJo=o("AutoModelForImageSegmentation"),RBe=l(),_r=a("div"),f(O0.$$.fragment),xJo=l(),sc=a("p"),kJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iO=a("a"),SJo=o("from_pretrained()"),RJo=o(" class method or the "),dO=a("a"),BJo=o("from_config()"),PJo=o(` class
method.`),$Jo=l(),V0=a("p"),IJo=o("This class cannot be instantiated directly using "),The=a("code"),qJo=o("__init__()"),NJo=o(" (throws an error)."),jJo=l(),ct=a("div"),f(X0.$$.fragment),DJo=l(),Mhe=a("p"),GJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),OJo=l(),lc=a("p"),VJo=o(`Note:
Loading a model from its configuration file does `),Ehe=a("strong"),XJo=o("not"),zJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),QJo=o("from_pretrained()"),WJo=o(" to load the model weights."),HJo=l(),Che=a("p"),UJo=o("Examples:"),JJo=l(),f(z0.$$.fragment),YJo=l(),to=a("div"),f(Q0.$$.fragment),KJo=l(),whe=a("p"),ZJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),eYo=l(),gn=a("p"),oYo=o("The model class to instantiate is selected based on the "),Ahe=a("code"),rYo=o("model_type"),tYo=o(` property of the config object (either
passed as an argument or loaded from `),yhe=a("code"),aYo=o("pretrained_model_name_or_path"),nYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=a("code"),sYo=o("pretrained_model_name_or_path"),lYo=o(":"),iYo=l(),xhe=a("ul"),vT=a("li"),khe=a("strong"),dYo=o("detr"),cYo=o(" \u2014 "),fO=a("a"),fYo=o("DetrForSegmentation"),mYo=o(" (DETR model)"),gYo=l(),FT=a("p"),hYo=o("The model is set in evaluation mode by default using "),She=a("code"),pYo=o("model.eval()"),_Yo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),uYo=o("model.train()"),bYo=l(),Bhe=a("p"),vYo=o("Examples:"),FYo=l(),f(W0.$$.fragment),BBe=l(),ic=a("h2"),TT=a("a"),Phe=a("span"),f(H0.$$.fragment),TYo=l(),$he=a("span"),MYo=o("AutoModelForSemanticSegmentation"),PBe=l(),ur=a("div"),f(U0.$$.fragment),EYo=l(),dc=a("p"),CYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mO=a("a"),wYo=o("from_pretrained()"),AYo=o(" class method or the "),gO=a("a"),yYo=o("from_config()"),LYo=o(` class
method.`),xYo=l(),J0=a("p"),kYo=o("This class cannot be instantiated directly using "),Ihe=a("code"),SYo=o("__init__()"),RYo=o(" (throws an error)."),BYo=l(),ft=a("div"),f(Y0.$$.fragment),PYo=l(),qhe=a("p"),$Yo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),IYo=l(),cc=a("p"),qYo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),NYo=o("not"),jYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),DYo=o("from_pretrained()"),GYo=o(" to load the model weights."),OYo=l(),jhe=a("p"),VYo=o("Examples:"),XYo=l(),f(K0.$$.fragment),zYo=l(),ao=a("div"),f(Z0.$$.fragment),QYo=l(),Dhe=a("p"),WYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),HYo=l(),hn=a("p"),UYo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),JYo=o("model_type"),YYo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),KYo=o("pretrained_model_name_or_path"),ZYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),eKo=o("pretrained_model_name_or_path"),oKo=o(":"),rKo=l(),pn=a("ul"),MT=a("li"),Xhe=a("strong"),tKo=o("beit"),aKo=o(" \u2014 "),pO=a("a"),nKo=o("BeitForSemanticSegmentation"),sKo=o(" (BEiT model)"),lKo=l(),ET=a("li"),zhe=a("strong"),iKo=o("data2vec-vision"),dKo=o(" \u2014 "),_O=a("a"),cKo=o("Data2VecVisionForSemanticSegmentation"),fKo=o(" (Data2VecVision model)"),mKo=l(),CT=a("li"),Qhe=a("strong"),gKo=o("dpt"),hKo=o(" \u2014 "),uO=a("a"),pKo=o("DPTForSemanticSegmentation"),_Ko=o(" (DPT model)"),uKo=l(),wT=a("li"),Whe=a("strong"),bKo=o("segformer"),vKo=o(" \u2014 "),bO=a("a"),FKo=o("SegformerForSemanticSegmentation"),TKo=o(" (SegFormer model)"),MKo=l(),AT=a("p"),EKo=o("The model is set in evaluation mode by default using "),Hhe=a("code"),CKo=o("model.eval()"),wKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=a("code"),AKo=o("model.train()"),yKo=l(),Jhe=a("p"),LKo=o("Examples:"),xKo=l(),f(ey.$$.fragment),$Be=l(),fc=a("h2"),yT=a("a"),Yhe=a("span"),f(oy.$$.fragment),kKo=l(),Khe=a("span"),SKo=o("AutoModelForInstanceSegmentation"),IBe=l(),br=a("div"),f(ry.$$.fragment),RKo=l(),mc=a("p"),BKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vO=a("a"),PKo=o("from_pretrained()"),$Ko=o(" class method or the "),FO=a("a"),IKo=o("from_config()"),qKo=o(` class
method.`),NKo=l(),ty=a("p"),jKo=o("This class cannot be instantiated directly using "),Zhe=a("code"),DKo=o("__init__()"),GKo=o(" (throws an error)."),OKo=l(),mt=a("div"),f(ay.$$.fragment),VKo=l(),epe=a("p"),XKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zKo=l(),gc=a("p"),QKo=o(`Note:
Loading a model from its configuration file does `),ope=a("strong"),WKo=o("not"),HKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=a("a"),UKo=o("from_pretrained()"),JKo=o(" to load the model weights."),YKo=l(),rpe=a("p"),KKo=o("Examples:"),ZKo=l(),f(ny.$$.fragment),eZo=l(),no=a("div"),f(sy.$$.fragment),oZo=l(),tpe=a("p"),rZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tZo=l(),_n=a("p"),aZo=o("The model class to instantiate is selected based on the "),ape=a("code"),nZo=o("model_type"),sZo=o(` property of the config object (either
passed as an argument or loaded from `),npe=a("code"),lZo=o("pretrained_model_name_or_path"),iZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(":"),fZo=l(),lpe=a("ul"),LT=a("li"),ipe=a("strong"),mZo=o("maskformer"),gZo=o(" \u2014 "),MO=a("a"),hZo=o("MaskFormerForInstanceSegmentation"),pZo=o(" (MaskFormer model)"),_Zo=l(),xT=a("p"),uZo=o("The model is set in evaluation mode by default using "),dpe=a("code"),bZo=o("model.eval()"),vZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=a("code"),FZo=o("model.train()"),TZo=l(),fpe=a("p"),MZo=o("Examples:"),EZo=l(),f(ly.$$.fragment),qBe=l(),hc=a("h2"),kT=a("a"),mpe=a("span"),f(iy.$$.fragment),CZo=l(),gpe=a("span"),wZo=o("TFAutoModel"),NBe=l(),vr=a("div"),f(dy.$$.fragment),AZo=l(),pc=a("p"),yZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EO=a("a"),LZo=o("from_pretrained()"),xZo=o(" class method or the "),CO=a("a"),kZo=o("from_config()"),SZo=o(` class
method.`),RZo=l(),cy=a("p"),BZo=o("This class cannot be instantiated directly using "),hpe=a("code"),PZo=o("__init__()"),$Zo=o(" (throws an error)."),IZo=l(),gt=a("div"),f(fy.$$.fragment),qZo=l(),ppe=a("p"),NZo=o("Instantiates one of the base model classes of the library from a configuration."),jZo=l(),_c=a("p"),DZo=o(`Note:
Loading a model from its configuration file does `),_pe=a("strong"),GZo=o("not"),OZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),VZo=o("from_pretrained()"),XZo=o(" to load the model weights."),zZo=l(),upe=a("p"),QZo=o("Examples:"),WZo=l(),f(my.$$.fragment),HZo=l(),ho=a("div"),f(gy.$$.fragment),UZo=l(),bpe=a("p"),JZo=o("Instantiate one of the base model classes of the library from a pretrained model."),YZo=l(),un=a("p"),KZo=o("The model class to instantiate is selected based on the "),vpe=a("code"),ZZo=o("model_type"),eer=o(` property of the config object (either
passed as an argument or loaded from `),Fpe=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=a("code"),ter=o("pretrained_model_name_or_path"),aer=o(":"),ner=l(),x=a("ul"),ST=a("li"),Mpe=a("strong"),ser=o("albert"),ler=o(" \u2014 "),AO=a("a"),ier=o("TFAlbertModel"),der=o(" (ALBERT model)"),cer=l(),RT=a("li"),Epe=a("strong"),fer=o("bart"),mer=o(" \u2014 "),yO=a("a"),ger=o("TFBartModel"),her=o(" (BART model)"),per=l(),BT=a("li"),Cpe=a("strong"),_er=o("bert"),uer=o(" \u2014 "),LO=a("a"),ber=o("TFBertModel"),ver=o(" (BERT model)"),Fer=l(),PT=a("li"),wpe=a("strong"),Ter=o("blenderbot"),Mer=o(" \u2014 "),xO=a("a"),Eer=o("TFBlenderbotModel"),Cer=o(" (Blenderbot model)"),wer=l(),$T=a("li"),Ape=a("strong"),Aer=o("blenderbot-small"),yer=o(" \u2014 "),kO=a("a"),Ler=o("TFBlenderbotSmallModel"),xer=o(" (BlenderbotSmall model)"),ker=l(),IT=a("li"),ype=a("strong"),Ser=o("camembert"),Rer=o(" \u2014 "),SO=a("a"),Ber=o("TFCamembertModel"),Per=o(" (CamemBERT model)"),$er=l(),qT=a("li"),Lpe=a("strong"),Ier=o("clip"),qer=o(" \u2014 "),RO=a("a"),Ner=o("TFCLIPModel"),jer=o(" (CLIP model)"),Der=l(),NT=a("li"),xpe=a("strong"),Ger=o("convbert"),Oer=o(" \u2014 "),BO=a("a"),Ver=o("TFConvBertModel"),Xer=o(" (ConvBERT model)"),zer=l(),jT=a("li"),kpe=a("strong"),Qer=o("convnext"),Wer=o(" \u2014 "),PO=a("a"),Her=o("TFConvNextModel"),Uer=o(" (ConvNext model)"),Jer=l(),DT=a("li"),Spe=a("strong"),Yer=o("ctrl"),Ker=o(" \u2014 "),$O=a("a"),Zer=o("TFCTRLModel"),eor=o(" (CTRL model)"),oor=l(),GT=a("li"),Rpe=a("strong"),ror=o("deberta"),tor=o(" \u2014 "),IO=a("a"),aor=o("TFDebertaModel"),nor=o(" (DeBERTa model)"),sor=l(),OT=a("li"),Bpe=a("strong"),lor=o("deberta-v2"),ior=o(" \u2014 "),qO=a("a"),dor=o("TFDebertaV2Model"),cor=o(" (DeBERTa-v2 model)"),mor=l(),VT=a("li"),Ppe=a("strong"),gor=o("distilbert"),hor=o(" \u2014 "),NO=a("a"),por=o("TFDistilBertModel"),_or=o(" (DistilBERT model)"),uor=l(),XT=a("li"),$pe=a("strong"),bor=o("dpr"),vor=o(" \u2014 "),jO=a("a"),For=o("TFDPRQuestionEncoder"),Tor=o(" (DPR model)"),Mor=l(),zT=a("li"),Ipe=a("strong"),Eor=o("electra"),Cor=o(" \u2014 "),DO=a("a"),wor=o("TFElectraModel"),Aor=o(" (ELECTRA model)"),yor=l(),QT=a("li"),qpe=a("strong"),Lor=o("flaubert"),xor=o(" \u2014 "),GO=a("a"),kor=o("TFFlaubertModel"),Sor=o(" (FlauBERT model)"),Ror=l(),Vs=a("li"),Npe=a("strong"),Bor=o("funnel"),Por=o(" \u2014 "),OO=a("a"),$or=o("TFFunnelModel"),Ior=o(" or "),VO=a("a"),qor=o("TFFunnelBaseModel"),Nor=o(" (Funnel Transformer model)"),jor=l(),WT=a("li"),jpe=a("strong"),Dor=o("gpt2"),Gor=o(" \u2014 "),XO=a("a"),Oor=o("TFGPT2Model"),Vor=o(" (OpenAI GPT-2 model)"),Xor=l(),HT=a("li"),Dpe=a("strong"),zor=o("gptj"),Qor=o(" \u2014 "),zO=a("a"),Wor=o("TFGPTJModel"),Hor=o(" (GPT-J model)"),Uor=l(),UT=a("li"),Gpe=a("strong"),Jor=o("hubert"),Yor=o(" \u2014 "),QO=a("a"),Kor=o("TFHubertModel"),Zor=o(" (Hubert model)"),err=l(),JT=a("li"),Ope=a("strong"),orr=o("layoutlm"),rrr=o(" \u2014 "),WO=a("a"),trr=o("TFLayoutLMModel"),arr=o(" (LayoutLM model)"),nrr=l(),YT=a("li"),Vpe=a("strong"),srr=o("led"),lrr=o(" \u2014 "),HO=a("a"),irr=o("TFLEDModel"),drr=o(" (LED model)"),crr=l(),KT=a("li"),Xpe=a("strong"),frr=o("longformer"),mrr=o(" \u2014 "),UO=a("a"),grr=o("TFLongformerModel"),hrr=o(" (Longformer model)"),prr=l(),ZT=a("li"),zpe=a("strong"),_rr=o("lxmert"),urr=o(" \u2014 "),JO=a("a"),brr=o("TFLxmertModel"),vrr=o(" (LXMERT model)"),Frr=l(),eM=a("li"),Qpe=a("strong"),Trr=o("marian"),Mrr=o(" \u2014 "),YO=a("a"),Err=o("TFMarianModel"),Crr=o(" (Marian model)"),wrr=l(),oM=a("li"),Wpe=a("strong"),Arr=o("mbart"),yrr=o(" \u2014 "),KO=a("a"),Lrr=o("TFMBartModel"),xrr=o(" (mBART model)"),krr=l(),rM=a("li"),Hpe=a("strong"),Srr=o("mobilebert"),Rrr=o(" \u2014 "),ZO=a("a"),Brr=o("TFMobileBertModel"),Prr=o(" (MobileBERT model)"),$rr=l(),tM=a("li"),Upe=a("strong"),Irr=o("mpnet"),qrr=o(" \u2014 "),eV=a("a"),Nrr=o("TFMPNetModel"),jrr=o(" (MPNet model)"),Drr=l(),aM=a("li"),Jpe=a("strong"),Grr=o("mt5"),Orr=o(" \u2014 "),oV=a("a"),Vrr=o("TFMT5Model"),Xrr=o(" (mT5 model)"),zrr=l(),nM=a("li"),Ype=a("strong"),Qrr=o("openai-gpt"),Wrr=o(" \u2014 "),rV=a("a"),Hrr=o("TFOpenAIGPTModel"),Urr=o(" (OpenAI GPT model)"),Jrr=l(),sM=a("li"),Kpe=a("strong"),Yrr=o("pegasus"),Krr=o(" \u2014 "),tV=a("a"),Zrr=o("TFPegasusModel"),etr=o(" (Pegasus model)"),otr=l(),lM=a("li"),Zpe=a("strong"),rtr=o("rembert"),ttr=o(" \u2014 "),aV=a("a"),atr=o("TFRemBertModel"),ntr=o(" (RemBERT model)"),str=l(),iM=a("li"),e_e=a("strong"),ltr=o("roberta"),itr=o(" \u2014 "),nV=a("a"),dtr=o("TFRobertaModel"),ctr=o(" (RoBERTa model)"),ftr=l(),dM=a("li"),o_e=a("strong"),mtr=o("roformer"),gtr=o(" \u2014 "),sV=a("a"),htr=o("TFRoFormerModel"),ptr=o(" (RoFormer model)"),_tr=l(),cM=a("li"),r_e=a("strong"),utr=o("speech_to_text"),btr=o(" \u2014 "),lV=a("a"),vtr=o("TFSpeech2TextModel"),Ftr=o(" (Speech2Text model)"),Ttr=l(),fM=a("li"),t_e=a("strong"),Mtr=o("t5"),Etr=o(" \u2014 "),iV=a("a"),Ctr=o("TFT5Model"),wtr=o(" (T5 model)"),Atr=l(),mM=a("li"),a_e=a("strong"),ytr=o("tapas"),Ltr=o(" \u2014 "),dV=a("a"),xtr=o("TFTapasModel"),ktr=o(" (TAPAS model)"),Str=l(),gM=a("li"),n_e=a("strong"),Rtr=o("transfo-xl"),Btr=o(" \u2014 "),cV=a("a"),Ptr=o("TFTransfoXLModel"),$tr=o(" (Transformer-XL model)"),Itr=l(),hM=a("li"),s_e=a("strong"),qtr=o("vit"),Ntr=o(" \u2014 "),fV=a("a"),jtr=o("TFViTModel"),Dtr=o(" (ViT model)"),Gtr=l(),pM=a("li"),l_e=a("strong"),Otr=o("vit_mae"),Vtr=o(" \u2014 "),mV=a("a"),Xtr=o("TFViTMAEModel"),ztr=o(" (ViTMAE model)"),Qtr=l(),_M=a("li"),i_e=a("strong"),Wtr=o("wav2vec2"),Htr=o(" \u2014 "),gV=a("a"),Utr=o("TFWav2Vec2Model"),Jtr=o(" (Wav2Vec2 model)"),Ytr=l(),uM=a("li"),d_e=a("strong"),Ktr=o("xlm"),Ztr=o(" \u2014 "),hV=a("a"),ear=o("TFXLMModel"),oar=o(" (XLM model)"),rar=l(),bM=a("li"),c_e=a("strong"),tar=o("xlm-roberta"),aar=o(" \u2014 "),pV=a("a"),nar=o("TFXLMRobertaModel"),sar=o(" (XLM-RoBERTa model)"),lar=l(),vM=a("li"),f_e=a("strong"),iar=o("xlnet"),dar=o(" \u2014 "),_V=a("a"),car=o("TFXLNetModel"),far=o(" (XLNet model)"),mar=l(),m_e=a("p"),gar=o("Examples:"),har=l(),f(hy.$$.fragment),jBe=l(),uc=a("h2"),FM=a("a"),g_e=a("span"),f(py.$$.fragment),par=l(),h_e=a("span"),_ar=o("TFAutoModelForPreTraining"),DBe=l(),Fr=a("div"),f(_y.$$.fragment),uar=l(),bc=a("p"),bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uV=a("a"),Far=o("from_pretrained()"),Tar=o(" class method or the "),bV=a("a"),Mar=o("from_config()"),Ear=o(` class
method.`),Car=l(),uy=a("p"),war=o("This class cannot be instantiated directly using "),p_e=a("code"),Aar=o("__init__()"),yar=o(" (throws an error)."),Lar=l(),ht=a("div"),f(by.$$.fragment),xar=l(),__e=a("p"),kar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sar=l(),vc=a("p"),Rar=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),Bar=o("not"),Par=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=a("a"),$ar=o("from_pretrained()"),Iar=o(" to load the model weights."),qar=l(),b_e=a("p"),Nar=o("Examples:"),jar=l(),f(vy.$$.fragment),Dar=l(),po=a("div"),f(Fy.$$.fragment),Gar=l(),v_e=a("p"),Oar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Var=l(),bn=a("p"),Xar=o("The model class to instantiate is selected based on the "),F_e=a("code"),zar=o("model_type"),Qar=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),War=o("pretrained_model_name_or_path"),Har=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),Uar=o("pretrained_model_name_or_path"),Jar=o(":"),Yar=l(),H=a("ul"),TM=a("li"),E_e=a("strong"),Kar=o("albert"),Zar=o(" \u2014 "),FV=a("a"),enr=o("TFAlbertForPreTraining"),onr=o(" (ALBERT model)"),rnr=l(),MM=a("li"),C_e=a("strong"),tnr=o("bart"),anr=o(" \u2014 "),TV=a("a"),nnr=o("TFBartForConditionalGeneration"),snr=o(" (BART model)"),lnr=l(),EM=a("li"),w_e=a("strong"),inr=o("bert"),dnr=o(" \u2014 "),MV=a("a"),cnr=o("TFBertForPreTraining"),fnr=o(" (BERT model)"),mnr=l(),CM=a("li"),A_e=a("strong"),gnr=o("camembert"),hnr=o(" \u2014 "),EV=a("a"),pnr=o("TFCamembertForMaskedLM"),_nr=o(" (CamemBERT model)"),unr=l(),wM=a("li"),y_e=a("strong"),bnr=o("ctrl"),vnr=o(" \u2014 "),CV=a("a"),Fnr=o("TFCTRLLMHeadModel"),Tnr=o(" (CTRL model)"),Mnr=l(),AM=a("li"),L_e=a("strong"),Enr=o("distilbert"),Cnr=o(" \u2014 "),wV=a("a"),wnr=o("TFDistilBertForMaskedLM"),Anr=o(" (DistilBERT model)"),ynr=l(),yM=a("li"),x_e=a("strong"),Lnr=o("electra"),xnr=o(" \u2014 "),AV=a("a"),knr=o("TFElectraForPreTraining"),Snr=o(" (ELECTRA model)"),Rnr=l(),LM=a("li"),k_e=a("strong"),Bnr=o("flaubert"),Pnr=o(" \u2014 "),yV=a("a"),$nr=o("TFFlaubertWithLMHeadModel"),Inr=o(" (FlauBERT model)"),qnr=l(),xM=a("li"),S_e=a("strong"),Nnr=o("funnel"),jnr=o(" \u2014 "),LV=a("a"),Dnr=o("TFFunnelForPreTraining"),Gnr=o(" (Funnel Transformer model)"),Onr=l(),kM=a("li"),R_e=a("strong"),Vnr=o("gpt2"),Xnr=o(" \u2014 "),xV=a("a"),znr=o("TFGPT2LMHeadModel"),Qnr=o(" (OpenAI GPT-2 model)"),Wnr=l(),SM=a("li"),B_e=a("strong"),Hnr=o("layoutlm"),Unr=o(" \u2014 "),kV=a("a"),Jnr=o("TFLayoutLMForMaskedLM"),Ynr=o(" (LayoutLM model)"),Knr=l(),RM=a("li"),P_e=a("strong"),Znr=o("lxmert"),esr=o(" \u2014 "),SV=a("a"),osr=o("TFLxmertForPreTraining"),rsr=o(" (LXMERT model)"),tsr=l(),BM=a("li"),$_e=a("strong"),asr=o("mobilebert"),nsr=o(" \u2014 "),RV=a("a"),ssr=o("TFMobileBertForPreTraining"),lsr=o(" (MobileBERT model)"),isr=l(),PM=a("li"),I_e=a("strong"),dsr=o("mpnet"),csr=o(" \u2014 "),BV=a("a"),fsr=o("TFMPNetForMaskedLM"),msr=o(" (MPNet model)"),gsr=l(),$M=a("li"),q_e=a("strong"),hsr=o("openai-gpt"),psr=o(" \u2014 "),PV=a("a"),_sr=o("TFOpenAIGPTLMHeadModel"),usr=o(" (OpenAI GPT model)"),bsr=l(),IM=a("li"),N_e=a("strong"),vsr=o("roberta"),Fsr=o(" \u2014 "),$V=a("a"),Tsr=o("TFRobertaForMaskedLM"),Msr=o(" (RoBERTa model)"),Esr=l(),qM=a("li"),j_e=a("strong"),Csr=o("t5"),wsr=o(" \u2014 "),IV=a("a"),Asr=o("TFT5ForConditionalGeneration"),ysr=o(" (T5 model)"),Lsr=l(),NM=a("li"),D_e=a("strong"),xsr=o("tapas"),ksr=o(" \u2014 "),qV=a("a"),Ssr=o("TFTapasForMaskedLM"),Rsr=o(" (TAPAS model)"),Bsr=l(),jM=a("li"),G_e=a("strong"),Psr=o("transfo-xl"),$sr=o(" \u2014 "),NV=a("a"),Isr=o("TFTransfoXLLMHeadModel"),qsr=o(" (Transformer-XL model)"),Nsr=l(),DM=a("li"),O_e=a("strong"),jsr=o("vit_mae"),Dsr=o(" \u2014 "),jV=a("a"),Gsr=o("TFViTMAEForPreTraining"),Osr=o(" (ViTMAE model)"),Vsr=l(),GM=a("li"),V_e=a("strong"),Xsr=o("xlm"),zsr=o(" \u2014 "),DV=a("a"),Qsr=o("TFXLMWithLMHeadModel"),Wsr=o(" (XLM model)"),Hsr=l(),OM=a("li"),X_e=a("strong"),Usr=o("xlm-roberta"),Jsr=o(" \u2014 "),GV=a("a"),Ysr=o("TFXLMRobertaForMaskedLM"),Ksr=o(" (XLM-RoBERTa model)"),Zsr=l(),VM=a("li"),z_e=a("strong"),elr=o("xlnet"),olr=o(" \u2014 "),OV=a("a"),rlr=o("TFXLNetLMHeadModel"),tlr=o(" (XLNet model)"),alr=l(),Q_e=a("p"),nlr=o("Examples:"),slr=l(),f(Ty.$$.fragment),GBe=l(),Fc=a("h2"),XM=a("a"),W_e=a("span"),f(My.$$.fragment),llr=l(),H_e=a("span"),ilr=o("TFAutoModelForCausalLM"),OBe=l(),Tr=a("div"),f(Ey.$$.fragment),dlr=l(),Tc=a("p"),clr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VV=a("a"),flr=o("from_pretrained()"),mlr=o(" class method or the "),XV=a("a"),glr=o("from_config()"),hlr=o(` class
method.`),plr=l(),Cy=a("p"),_lr=o("This class cannot be instantiated directly using "),U_e=a("code"),ulr=o("__init__()"),blr=o(" (throws an error)."),vlr=l(),pt=a("div"),f(wy.$$.fragment),Flr=l(),J_e=a("p"),Tlr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mlr=l(),Mc=a("p"),Elr=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),Clr=o("not"),wlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=a("a"),Alr=o("from_pretrained()"),ylr=o(" to load the model weights."),Llr=l(),K_e=a("p"),xlr=o("Examples:"),klr=l(),f(Ay.$$.fragment),Slr=l(),_o=a("div"),f(yy.$$.fragment),Rlr=l(),Z_e=a("p"),Blr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Plr=l(),vn=a("p"),$lr=o("The model class to instantiate is selected based on the "),eue=a("code"),Ilr=o("model_type"),qlr=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),Nlr=o("pretrained_model_name_or_path"),jlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),Dlr=o("pretrained_model_name_or_path"),Glr=o(":"),Olr=l(),fe=a("ul"),zM=a("li"),tue=a("strong"),Vlr=o("bert"),Xlr=o(" \u2014 "),QV=a("a"),zlr=o("TFBertLMHeadModel"),Qlr=o(" (BERT model)"),Wlr=l(),QM=a("li"),aue=a("strong"),Hlr=o("camembert"),Ulr=o(" \u2014 "),WV=a("a"),Jlr=o("TFCamembertForCausalLM"),Ylr=o(" (CamemBERT model)"),Klr=l(),WM=a("li"),nue=a("strong"),Zlr=o("ctrl"),eir=o(" \u2014 "),HV=a("a"),oir=o("TFCTRLLMHeadModel"),rir=o(" (CTRL model)"),tir=l(),HM=a("li"),sue=a("strong"),air=o("gpt2"),nir=o(" \u2014 "),UV=a("a"),sir=o("TFGPT2LMHeadModel"),lir=o(" (OpenAI GPT-2 model)"),iir=l(),UM=a("li"),lue=a("strong"),dir=o("gptj"),cir=o(" \u2014 "),JV=a("a"),fir=o("TFGPTJForCausalLM"),mir=o(" (GPT-J model)"),gir=l(),JM=a("li"),iue=a("strong"),hir=o("openai-gpt"),pir=o(" \u2014 "),YV=a("a"),_ir=o("TFOpenAIGPTLMHeadModel"),uir=o(" (OpenAI GPT model)"),bir=l(),YM=a("li"),due=a("strong"),vir=o("rembert"),Fir=o(" \u2014 "),KV=a("a"),Tir=o("TFRemBertForCausalLM"),Mir=o(" (RemBERT model)"),Eir=l(),KM=a("li"),cue=a("strong"),Cir=o("roberta"),wir=o(" \u2014 "),ZV=a("a"),Air=o("TFRobertaForCausalLM"),yir=o(" (RoBERTa model)"),Lir=l(),ZM=a("li"),fue=a("strong"),xir=o("roformer"),kir=o(" \u2014 "),eX=a("a"),Sir=o("TFRoFormerForCausalLM"),Rir=o(" (RoFormer model)"),Bir=l(),e4=a("li"),mue=a("strong"),Pir=o("transfo-xl"),$ir=o(" \u2014 "),oX=a("a"),Iir=o("TFTransfoXLLMHeadModel"),qir=o(" (Transformer-XL model)"),Nir=l(),o4=a("li"),gue=a("strong"),jir=o("xlm"),Dir=o(" \u2014 "),rX=a("a"),Gir=o("TFXLMWithLMHeadModel"),Oir=o(" (XLM model)"),Vir=l(),r4=a("li"),hue=a("strong"),Xir=o("xlnet"),zir=o(" \u2014 "),tX=a("a"),Qir=o("TFXLNetLMHeadModel"),Wir=o(" (XLNet model)"),Hir=l(),pue=a("p"),Uir=o("Examples:"),Jir=l(),f(Ly.$$.fragment),VBe=l(),Ec=a("h2"),t4=a("a"),_ue=a("span"),f(xy.$$.fragment),Yir=l(),uue=a("span"),Kir=o("TFAutoModelForImageClassification"),XBe=l(),Mr=a("div"),f(ky.$$.fragment),Zir=l(),Cc=a("p"),edr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aX=a("a"),odr=o("from_pretrained()"),rdr=o(" class method or the "),nX=a("a"),tdr=o("from_config()"),adr=o(` class
method.`),ndr=l(),Sy=a("p"),sdr=o("This class cannot be instantiated directly using "),bue=a("code"),ldr=o("__init__()"),idr=o(" (throws an error)."),ddr=l(),_t=a("div"),f(Ry.$$.fragment),cdr=l(),vue=a("p"),fdr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mdr=l(),wc=a("p"),gdr=o(`Note:
Loading a model from its configuration file does `),Fue=a("strong"),hdr=o("not"),pdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),_dr=o("from_pretrained()"),udr=o(" to load the model weights."),bdr=l(),Tue=a("p"),vdr=o("Examples:"),Fdr=l(),f(By.$$.fragment),Tdr=l(),uo=a("div"),f(Py.$$.fragment),Mdr=l(),Mue=a("p"),Edr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cdr=l(),Fn=a("p"),wdr=o("The model class to instantiate is selected based on the "),Eue=a("code"),Adr=o("model_type"),ydr=o(` property of the config object (either
passed as an argument or loaded from `),Cue=a("code"),Ldr=o("pretrained_model_name_or_path"),xdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=a("code"),kdr=o("pretrained_model_name_or_path"),Sdr=o(":"),Rdr=l(),$y=a("ul"),a4=a("li"),Aue=a("strong"),Bdr=o("convnext"),Pdr=o(" \u2014 "),lX=a("a"),$dr=o("TFConvNextForImageClassification"),Idr=o(" (ConvNext model)"),qdr=l(),n4=a("li"),yue=a("strong"),Ndr=o("vit"),jdr=o(" \u2014 "),iX=a("a"),Ddr=o("TFViTForImageClassification"),Gdr=o(" (ViT model)"),Odr=l(),Lue=a("p"),Vdr=o("Examples:"),Xdr=l(),f(Iy.$$.fragment),zBe=l(),Ac=a("h2"),s4=a("a"),xue=a("span"),f(qy.$$.fragment),zdr=l(),kue=a("span"),Qdr=o("TFAutoModelForMaskedLM"),QBe=l(),Er=a("div"),f(Ny.$$.fragment),Wdr=l(),yc=a("p"),Hdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dX=a("a"),Udr=o("from_pretrained()"),Jdr=o(" class method or the "),cX=a("a"),Ydr=o("from_config()"),Kdr=o(` class
method.`),Zdr=l(),jy=a("p"),ecr=o("This class cannot be instantiated directly using "),Sue=a("code"),ocr=o("__init__()"),rcr=o(" (throws an error)."),tcr=l(),ut=a("div"),f(Dy.$$.fragment),acr=l(),Rue=a("p"),ncr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),scr=l(),Lc=a("p"),lcr=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),icr=o("not"),dcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=a("a"),ccr=o("from_pretrained()"),fcr=o(" to load the model weights."),mcr=l(),Pue=a("p"),gcr=o("Examples:"),hcr=l(),f(Gy.$$.fragment),pcr=l(),bo=a("div"),f(Oy.$$.fragment),_cr=l(),$ue=a("p"),ucr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bcr=l(),Tn=a("p"),vcr=o("The model class to instantiate is selected based on the "),Iue=a("code"),Fcr=o("model_type"),Tcr=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),Mcr=o("pretrained_model_name_or_path"),Ecr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Ccr=o("pretrained_model_name_or_path"),wcr=o(":"),Acr=l(),J=a("ul"),l4=a("li"),jue=a("strong"),ycr=o("albert"),Lcr=o(" \u2014 "),mX=a("a"),xcr=o("TFAlbertForMaskedLM"),kcr=o(" (ALBERT model)"),Scr=l(),i4=a("li"),Due=a("strong"),Rcr=o("bert"),Bcr=o(" \u2014 "),gX=a("a"),Pcr=o("TFBertForMaskedLM"),$cr=o(" (BERT model)"),Icr=l(),d4=a("li"),Gue=a("strong"),qcr=o("camembert"),Ncr=o(" \u2014 "),hX=a("a"),jcr=o("TFCamembertForMaskedLM"),Dcr=o(" (CamemBERT model)"),Gcr=l(),c4=a("li"),Oue=a("strong"),Ocr=o("convbert"),Vcr=o(" \u2014 "),pX=a("a"),Xcr=o("TFConvBertForMaskedLM"),zcr=o(" (ConvBERT model)"),Qcr=l(),f4=a("li"),Vue=a("strong"),Wcr=o("deberta"),Hcr=o(" \u2014 "),_X=a("a"),Ucr=o("TFDebertaForMaskedLM"),Jcr=o(" (DeBERTa model)"),Ycr=l(),m4=a("li"),Xue=a("strong"),Kcr=o("deberta-v2"),Zcr=o(" \u2014 "),uX=a("a"),efr=o("TFDebertaV2ForMaskedLM"),ofr=o(" (DeBERTa-v2 model)"),rfr=l(),g4=a("li"),zue=a("strong"),tfr=o("distilbert"),afr=o(" \u2014 "),bX=a("a"),nfr=o("TFDistilBertForMaskedLM"),sfr=o(" (DistilBERT model)"),lfr=l(),h4=a("li"),Que=a("strong"),ifr=o("electra"),dfr=o(" \u2014 "),vX=a("a"),cfr=o("TFElectraForMaskedLM"),ffr=o(" (ELECTRA model)"),mfr=l(),p4=a("li"),Wue=a("strong"),gfr=o("flaubert"),hfr=o(" \u2014 "),FX=a("a"),pfr=o("TFFlaubertWithLMHeadModel"),_fr=o(" (FlauBERT model)"),ufr=l(),_4=a("li"),Hue=a("strong"),bfr=o("funnel"),vfr=o(" \u2014 "),TX=a("a"),Ffr=o("TFFunnelForMaskedLM"),Tfr=o(" (Funnel Transformer model)"),Mfr=l(),u4=a("li"),Uue=a("strong"),Efr=o("layoutlm"),Cfr=o(" \u2014 "),MX=a("a"),wfr=o("TFLayoutLMForMaskedLM"),Afr=o(" (LayoutLM model)"),yfr=l(),b4=a("li"),Jue=a("strong"),Lfr=o("longformer"),xfr=o(" \u2014 "),EX=a("a"),kfr=o("TFLongformerForMaskedLM"),Sfr=o(" (Longformer model)"),Rfr=l(),v4=a("li"),Yue=a("strong"),Bfr=o("mobilebert"),Pfr=o(" \u2014 "),CX=a("a"),$fr=o("TFMobileBertForMaskedLM"),Ifr=o(" (MobileBERT model)"),qfr=l(),F4=a("li"),Kue=a("strong"),Nfr=o("mpnet"),jfr=o(" \u2014 "),wX=a("a"),Dfr=o("TFMPNetForMaskedLM"),Gfr=o(" (MPNet model)"),Ofr=l(),T4=a("li"),Zue=a("strong"),Vfr=o("rembert"),Xfr=o(" \u2014 "),AX=a("a"),zfr=o("TFRemBertForMaskedLM"),Qfr=o(" (RemBERT model)"),Wfr=l(),M4=a("li"),e1e=a("strong"),Hfr=o("roberta"),Ufr=o(" \u2014 "),yX=a("a"),Jfr=o("TFRobertaForMaskedLM"),Yfr=o(" (RoBERTa model)"),Kfr=l(),E4=a("li"),o1e=a("strong"),Zfr=o("roformer"),emr=o(" \u2014 "),LX=a("a"),omr=o("TFRoFormerForMaskedLM"),rmr=o(" (RoFormer model)"),tmr=l(),C4=a("li"),r1e=a("strong"),amr=o("tapas"),nmr=o(" \u2014 "),xX=a("a"),smr=o("TFTapasForMaskedLM"),lmr=o(" (TAPAS model)"),imr=l(),w4=a("li"),t1e=a("strong"),dmr=o("xlm"),cmr=o(" \u2014 "),kX=a("a"),fmr=o("TFXLMWithLMHeadModel"),mmr=o(" (XLM model)"),gmr=l(),A4=a("li"),a1e=a("strong"),hmr=o("xlm-roberta"),pmr=o(" \u2014 "),SX=a("a"),_mr=o("TFXLMRobertaForMaskedLM"),umr=o(" (XLM-RoBERTa model)"),bmr=l(),n1e=a("p"),vmr=o("Examples:"),Fmr=l(),f(Vy.$$.fragment),WBe=l(),xc=a("h2"),y4=a("a"),s1e=a("span"),f(Xy.$$.fragment),Tmr=l(),l1e=a("span"),Mmr=o("TFAutoModelForSeq2SeqLM"),HBe=l(),Cr=a("div"),f(zy.$$.fragment),Emr=l(),kc=a("p"),Cmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RX=a("a"),wmr=o("from_pretrained()"),Amr=o(" class method or the "),BX=a("a"),ymr=o("from_config()"),Lmr=o(` class
method.`),xmr=l(),Qy=a("p"),kmr=o("This class cannot be instantiated directly using "),i1e=a("code"),Smr=o("__init__()"),Rmr=o(" (throws an error)."),Bmr=l(),bt=a("div"),f(Wy.$$.fragment),Pmr=l(),d1e=a("p"),$mr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Imr=l(),Sc=a("p"),qmr=o(`Note:
Loading a model from its configuration file does `),c1e=a("strong"),Nmr=o("not"),jmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" to load the model weights."),Omr=l(),f1e=a("p"),Vmr=o("Examples:"),Xmr=l(),f(Hy.$$.fragment),zmr=l(),vo=a("div"),f(Uy.$$.fragment),Qmr=l(),m1e=a("p"),Wmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hmr=l(),Mn=a("p"),Umr=o("The model class to instantiate is selected based on the "),g1e=a("code"),Jmr=o("model_type"),Ymr=o(` property of the config object (either
passed as an argument or loaded from `),h1e=a("code"),Kmr=o("pretrained_model_name_or_path"),Zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),be=a("ul"),L4=a("li"),_1e=a("strong"),tgr=o("bart"),agr=o(" \u2014 "),$X=a("a"),ngr=o("TFBartForConditionalGeneration"),sgr=o(" (BART model)"),lgr=l(),x4=a("li"),u1e=a("strong"),igr=o("blenderbot"),dgr=o(" \u2014 "),IX=a("a"),cgr=o("TFBlenderbotForConditionalGeneration"),fgr=o(" (Blenderbot model)"),mgr=l(),k4=a("li"),b1e=a("strong"),ggr=o("blenderbot-small"),hgr=o(" \u2014 "),qX=a("a"),pgr=o("TFBlenderbotSmallForConditionalGeneration"),_gr=o(" (BlenderbotSmall model)"),ugr=l(),S4=a("li"),v1e=a("strong"),bgr=o("encoder-decoder"),vgr=o(" \u2014 "),NX=a("a"),Fgr=o("TFEncoderDecoderModel"),Tgr=o(" (Encoder decoder model)"),Mgr=l(),R4=a("li"),F1e=a("strong"),Egr=o("led"),Cgr=o(" \u2014 "),jX=a("a"),wgr=o("TFLEDForConditionalGeneration"),Agr=o(" (LED model)"),ygr=l(),B4=a("li"),T1e=a("strong"),Lgr=o("marian"),xgr=o(" \u2014 "),DX=a("a"),kgr=o("TFMarianMTModel"),Sgr=o(" (Marian model)"),Rgr=l(),P4=a("li"),M1e=a("strong"),Bgr=o("mbart"),Pgr=o(" \u2014 "),GX=a("a"),$gr=o("TFMBartForConditionalGeneration"),Igr=o(" (mBART model)"),qgr=l(),$4=a("li"),E1e=a("strong"),Ngr=o("mt5"),jgr=o(" \u2014 "),OX=a("a"),Dgr=o("TFMT5ForConditionalGeneration"),Ggr=o(" (mT5 model)"),Ogr=l(),I4=a("li"),C1e=a("strong"),Vgr=o("pegasus"),Xgr=o(" \u2014 "),VX=a("a"),zgr=o("TFPegasusForConditionalGeneration"),Qgr=o(" (Pegasus model)"),Wgr=l(),q4=a("li"),w1e=a("strong"),Hgr=o("t5"),Ugr=o(" \u2014 "),XX=a("a"),Jgr=o("TFT5ForConditionalGeneration"),Ygr=o(" (T5 model)"),Kgr=l(),A1e=a("p"),Zgr=o("Examples:"),ehr=l(),f(Jy.$$.fragment),UBe=l(),Rc=a("h2"),N4=a("a"),y1e=a("span"),f(Yy.$$.fragment),ohr=l(),L1e=a("span"),rhr=o("TFAutoModelForSequenceClassification"),JBe=l(),wr=a("div"),f(Ky.$$.fragment),thr=l(),Bc=a("p"),ahr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zX=a("a"),nhr=o("from_pretrained()"),shr=o(" class method or the "),QX=a("a"),lhr=o("from_config()"),ihr=o(` class
method.`),dhr=l(),Zy=a("p"),chr=o("This class cannot be instantiated directly using "),x1e=a("code"),fhr=o("__init__()"),mhr=o(" (throws an error)."),ghr=l(),vt=a("div"),f(e8.$$.fragment),hhr=l(),k1e=a("p"),phr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_hr=l(),Pc=a("p"),uhr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),bhr=o("not"),vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),Fhr=o("from_pretrained()"),Thr=o(" to load the model weights."),Mhr=l(),R1e=a("p"),Ehr=o("Examples:"),Chr=l(),f(o8.$$.fragment),whr=l(),Fo=a("div"),f(r8.$$.fragment),Ahr=l(),B1e=a("p"),yhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lhr=l(),En=a("p"),xhr=o("The model class to instantiate is selected based on the "),P1e=a("code"),khr=o("model_type"),Shr=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),Rhr=o("pretrained_model_name_or_path"),Bhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),Phr=o("pretrained_model_name_or_path"),$hr=o(":"),Ihr=l(),V=a("ul"),j4=a("li"),q1e=a("strong"),qhr=o("albert"),Nhr=o(" \u2014 "),HX=a("a"),jhr=o("TFAlbertForSequenceClassification"),Dhr=o(" (ALBERT model)"),Ghr=l(),D4=a("li"),N1e=a("strong"),Ohr=o("bert"),Vhr=o(" \u2014 "),UX=a("a"),Xhr=o("TFBertForSequenceClassification"),zhr=o(" (BERT model)"),Qhr=l(),G4=a("li"),j1e=a("strong"),Whr=o("camembert"),Hhr=o(" \u2014 "),JX=a("a"),Uhr=o("TFCamembertForSequenceClassification"),Jhr=o(" (CamemBERT model)"),Yhr=l(),O4=a("li"),D1e=a("strong"),Khr=o("convbert"),Zhr=o(" \u2014 "),YX=a("a"),epr=o("TFConvBertForSequenceClassification"),opr=o(" (ConvBERT model)"),rpr=l(),V4=a("li"),G1e=a("strong"),tpr=o("ctrl"),apr=o(" \u2014 "),KX=a("a"),npr=o("TFCTRLForSequenceClassification"),spr=o(" (CTRL model)"),lpr=l(),X4=a("li"),O1e=a("strong"),ipr=o("deberta"),dpr=o(" \u2014 "),ZX=a("a"),cpr=o("TFDebertaForSequenceClassification"),fpr=o(" (DeBERTa model)"),mpr=l(),z4=a("li"),V1e=a("strong"),gpr=o("deberta-v2"),hpr=o(" \u2014 "),ez=a("a"),ppr=o("TFDebertaV2ForSequenceClassification"),_pr=o(" (DeBERTa-v2 model)"),upr=l(),Q4=a("li"),X1e=a("strong"),bpr=o("distilbert"),vpr=o(" \u2014 "),oz=a("a"),Fpr=o("TFDistilBertForSequenceClassification"),Tpr=o(" (DistilBERT model)"),Mpr=l(),W4=a("li"),z1e=a("strong"),Epr=o("electra"),Cpr=o(" \u2014 "),rz=a("a"),wpr=o("TFElectraForSequenceClassification"),Apr=o(" (ELECTRA model)"),ypr=l(),H4=a("li"),Q1e=a("strong"),Lpr=o("flaubert"),xpr=o(" \u2014 "),tz=a("a"),kpr=o("TFFlaubertForSequenceClassification"),Spr=o(" (FlauBERT model)"),Rpr=l(),U4=a("li"),W1e=a("strong"),Bpr=o("funnel"),Ppr=o(" \u2014 "),az=a("a"),$pr=o("TFFunnelForSequenceClassification"),Ipr=o(" (Funnel Transformer model)"),qpr=l(),J4=a("li"),H1e=a("strong"),Npr=o("gpt2"),jpr=o(" \u2014 "),nz=a("a"),Dpr=o("TFGPT2ForSequenceClassification"),Gpr=o(" (OpenAI GPT-2 model)"),Opr=l(),Y4=a("li"),U1e=a("strong"),Vpr=o("gptj"),Xpr=o(" \u2014 "),sz=a("a"),zpr=o("TFGPTJForSequenceClassification"),Qpr=o(" (GPT-J model)"),Wpr=l(),K4=a("li"),J1e=a("strong"),Hpr=o("layoutlm"),Upr=o(" \u2014 "),lz=a("a"),Jpr=o("TFLayoutLMForSequenceClassification"),Ypr=o(" (LayoutLM model)"),Kpr=l(),Z4=a("li"),Y1e=a("strong"),Zpr=o("longformer"),e_r=o(" \u2014 "),iz=a("a"),o_r=o("TFLongformerForSequenceClassification"),r_r=o(" (Longformer model)"),t_r=l(),eE=a("li"),K1e=a("strong"),a_r=o("mobilebert"),n_r=o(" \u2014 "),dz=a("a"),s_r=o("TFMobileBertForSequenceClassification"),l_r=o(" (MobileBERT model)"),i_r=l(),oE=a("li"),Z1e=a("strong"),d_r=o("mpnet"),c_r=o(" \u2014 "),cz=a("a"),f_r=o("TFMPNetForSequenceClassification"),m_r=o(" (MPNet model)"),g_r=l(),rE=a("li"),ebe=a("strong"),h_r=o("openai-gpt"),p_r=o(" \u2014 "),fz=a("a"),__r=o("TFOpenAIGPTForSequenceClassification"),u_r=o(" (OpenAI GPT model)"),b_r=l(),tE=a("li"),obe=a("strong"),v_r=o("rembert"),F_r=o(" \u2014 "),mz=a("a"),T_r=o("TFRemBertForSequenceClassification"),M_r=o(" (RemBERT model)"),E_r=l(),aE=a("li"),rbe=a("strong"),C_r=o("roberta"),w_r=o(" \u2014 "),gz=a("a"),A_r=o("TFRobertaForSequenceClassification"),y_r=o(" (RoBERTa model)"),L_r=l(),nE=a("li"),tbe=a("strong"),x_r=o("roformer"),k_r=o(" \u2014 "),hz=a("a"),S_r=o("TFRoFormerForSequenceClassification"),R_r=o(" (RoFormer model)"),B_r=l(),sE=a("li"),abe=a("strong"),P_r=o("tapas"),$_r=o(" \u2014 "),pz=a("a"),I_r=o("TFTapasForSequenceClassification"),q_r=o(" (TAPAS model)"),N_r=l(),lE=a("li"),nbe=a("strong"),j_r=o("transfo-xl"),D_r=o(" \u2014 "),_z=a("a"),G_r=o("TFTransfoXLForSequenceClassification"),O_r=o(" (Transformer-XL model)"),V_r=l(),iE=a("li"),sbe=a("strong"),X_r=o("xlm"),z_r=o(" \u2014 "),uz=a("a"),Q_r=o("TFXLMForSequenceClassification"),W_r=o(" (XLM model)"),H_r=l(),dE=a("li"),lbe=a("strong"),U_r=o("xlm-roberta"),J_r=o(" \u2014 "),bz=a("a"),Y_r=o("TFXLMRobertaForSequenceClassification"),K_r=o(" (XLM-RoBERTa model)"),Z_r=l(),cE=a("li"),ibe=a("strong"),eur=o("xlnet"),our=o(" \u2014 "),vz=a("a"),rur=o("TFXLNetForSequenceClassification"),tur=o(" (XLNet model)"),aur=l(),dbe=a("p"),nur=o("Examples:"),sur=l(),f(t8.$$.fragment),YBe=l(),$c=a("h2"),fE=a("a"),cbe=a("span"),f(a8.$$.fragment),lur=l(),fbe=a("span"),iur=o("TFAutoModelForMultipleChoice"),KBe=l(),Ar=a("div"),f(n8.$$.fragment),dur=l(),Ic=a("p"),cur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fz=a("a"),fur=o("from_pretrained()"),mur=o(" class method or the "),Tz=a("a"),gur=o("from_config()"),hur=o(` class
method.`),pur=l(),s8=a("p"),_ur=o("This class cannot be instantiated directly using "),mbe=a("code"),uur=o("__init__()"),bur=o(" (throws an error)."),vur=l(),Ft=a("div"),f(l8.$$.fragment),Fur=l(),gbe=a("p"),Tur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mur=l(),qc=a("p"),Eur=o(`Note:
Loading a model from its configuration file does `),hbe=a("strong"),Cur=o("not"),wur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=a("a"),Aur=o("from_pretrained()"),yur=o(" to load the model weights."),Lur=l(),pbe=a("p"),xur=o("Examples:"),kur=l(),f(i8.$$.fragment),Sur=l(),To=a("div"),f(d8.$$.fragment),Rur=l(),_be=a("p"),Bur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Pur=l(),Cn=a("p"),$ur=o("The model class to instantiate is selected based on the "),ube=a("code"),Iur=o("model_type"),qur=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),Nur=o("pretrained_model_name_or_path"),jur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),Dur=o("pretrained_model_name_or_path"),Gur=o(":"),Our=l(),se=a("ul"),mE=a("li"),Fbe=a("strong"),Vur=o("albert"),Xur=o(" \u2014 "),Ez=a("a"),zur=o("TFAlbertForMultipleChoice"),Qur=o(" (ALBERT model)"),Wur=l(),gE=a("li"),Tbe=a("strong"),Hur=o("bert"),Uur=o(" \u2014 "),Cz=a("a"),Jur=o("TFBertForMultipleChoice"),Yur=o(" (BERT model)"),Kur=l(),hE=a("li"),Mbe=a("strong"),Zur=o("camembert"),e1r=o(" \u2014 "),wz=a("a"),o1r=o("TFCamembertForMultipleChoice"),r1r=o(" (CamemBERT model)"),t1r=l(),pE=a("li"),Ebe=a("strong"),a1r=o("convbert"),n1r=o(" \u2014 "),Az=a("a"),s1r=o("TFConvBertForMultipleChoice"),l1r=o(" (ConvBERT model)"),i1r=l(),_E=a("li"),Cbe=a("strong"),d1r=o("distilbert"),c1r=o(" \u2014 "),yz=a("a"),f1r=o("TFDistilBertForMultipleChoice"),m1r=o(" (DistilBERT model)"),g1r=l(),uE=a("li"),wbe=a("strong"),h1r=o("electra"),p1r=o(" \u2014 "),Lz=a("a"),_1r=o("TFElectraForMultipleChoice"),u1r=o(" (ELECTRA model)"),b1r=l(),bE=a("li"),Abe=a("strong"),v1r=o("flaubert"),F1r=o(" \u2014 "),xz=a("a"),T1r=o("TFFlaubertForMultipleChoice"),M1r=o(" (FlauBERT model)"),E1r=l(),vE=a("li"),ybe=a("strong"),C1r=o("funnel"),w1r=o(" \u2014 "),kz=a("a"),A1r=o("TFFunnelForMultipleChoice"),y1r=o(" (Funnel Transformer model)"),L1r=l(),FE=a("li"),Lbe=a("strong"),x1r=o("longformer"),k1r=o(" \u2014 "),Sz=a("a"),S1r=o("TFLongformerForMultipleChoice"),R1r=o(" (Longformer model)"),B1r=l(),TE=a("li"),xbe=a("strong"),P1r=o("mobilebert"),$1r=o(" \u2014 "),Rz=a("a"),I1r=o("TFMobileBertForMultipleChoice"),q1r=o(" (MobileBERT model)"),N1r=l(),ME=a("li"),kbe=a("strong"),j1r=o("mpnet"),D1r=o(" \u2014 "),Bz=a("a"),G1r=o("TFMPNetForMultipleChoice"),O1r=o(" (MPNet model)"),V1r=l(),EE=a("li"),Sbe=a("strong"),X1r=o("rembert"),z1r=o(" \u2014 "),Pz=a("a"),Q1r=o("TFRemBertForMultipleChoice"),W1r=o(" (RemBERT model)"),H1r=l(),CE=a("li"),Rbe=a("strong"),U1r=o("roberta"),J1r=o(" \u2014 "),$z=a("a"),Y1r=o("TFRobertaForMultipleChoice"),K1r=o(" (RoBERTa model)"),Z1r=l(),wE=a("li"),Bbe=a("strong"),ebr=o("roformer"),obr=o(" \u2014 "),Iz=a("a"),rbr=o("TFRoFormerForMultipleChoice"),tbr=o(" (RoFormer model)"),abr=l(),AE=a("li"),Pbe=a("strong"),nbr=o("xlm"),sbr=o(" \u2014 "),qz=a("a"),lbr=o("TFXLMForMultipleChoice"),ibr=o(" (XLM model)"),dbr=l(),yE=a("li"),$be=a("strong"),cbr=o("xlm-roberta"),fbr=o(" \u2014 "),Nz=a("a"),mbr=o("TFXLMRobertaForMultipleChoice"),gbr=o(" (XLM-RoBERTa model)"),hbr=l(),LE=a("li"),Ibe=a("strong"),pbr=o("xlnet"),_br=o(" \u2014 "),jz=a("a"),ubr=o("TFXLNetForMultipleChoice"),bbr=o(" (XLNet model)"),vbr=l(),qbe=a("p"),Fbr=o("Examples:"),Tbr=l(),f(c8.$$.fragment),ZBe=l(),Nc=a("h2"),xE=a("a"),Nbe=a("span"),f(f8.$$.fragment),Mbr=l(),jbe=a("span"),Ebr=o("TFAutoModelForTableQuestionAnswering"),ePe=l(),yr=a("div"),f(m8.$$.fragment),Cbr=l(),jc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=a("a"),Abr=o("from_pretrained()"),ybr=o(" class method or the "),Gz=a("a"),Lbr=o("from_config()"),xbr=o(` class
method.`),kbr=l(),g8=a("p"),Sbr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Rbr=o("__init__()"),Bbr=o(" (throws an error)."),Pbr=l(),Tt=a("div"),f(h8.$$.fragment),$br=l(),Gbe=a("p"),Ibr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qbr=l(),Dc=a("p"),Nbr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),Vbe=a("p"),Xbr=o("Examples:"),zbr=l(),f(p8.$$.fragment),Qbr=l(),Mo=a("div"),f(_8.$$.fragment),Wbr=l(),Xbe=a("p"),Hbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ubr=l(),wn=a("p"),Jbr=o("The model class to instantiate is selected based on the "),zbe=a("code"),Ybr=o("model_type"),Kbr=o(` property of the config object (either
passed as an argument or loaded from `),Qbe=a("code"),Zbr=o("pretrained_model_name_or_path"),e2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),o2r=o("pretrained_model_name_or_path"),r2r=o(":"),t2r=l(),Hbe=a("ul"),kE=a("li"),Ube=a("strong"),a2r=o("tapas"),n2r=o(" \u2014 "),Vz=a("a"),s2r=o("TFTapasForQuestionAnswering"),l2r=o(" (TAPAS model)"),i2r=l(),Jbe=a("p"),d2r=o("Examples:"),c2r=l(),f(u8.$$.fragment),oPe=l(),Gc=a("h2"),SE=a("a"),Ybe=a("span"),f(b8.$$.fragment),f2r=l(),Kbe=a("span"),m2r=o("TFAutoModelForTokenClassification"),rPe=l(),Lr=a("div"),f(v8.$$.fragment),g2r=l(),Oc=a("p"),h2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=a("a"),p2r=o("from_pretrained()"),_2r=o(" class method or the "),zz=a("a"),u2r=o("from_config()"),b2r=o(` class
method.`),v2r=l(),F8=a("p"),F2r=o("This class cannot be instantiated directly using "),Zbe=a("code"),T2r=o("__init__()"),M2r=o(" (throws an error)."),E2r=l(),Mt=a("div"),f(T8.$$.fragment),C2r=l(),e2e=a("p"),w2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A2r=l(),Vc=a("p"),y2r=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),L2r=o("not"),x2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),k2r=o("from_pretrained()"),S2r=o(" to load the model weights."),R2r=l(),r2e=a("p"),B2r=o("Examples:"),P2r=l(),f(M8.$$.fragment),$2r=l(),Eo=a("div"),f(E8.$$.fragment),I2r=l(),t2e=a("p"),q2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N2r=l(),An=a("p"),j2r=o("The model class to instantiate is selected based on the "),a2e=a("code"),D2r=o("model_type"),G2r=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),O2r=o("pretrained_model_name_or_path"),V2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),X2r=o("pretrained_model_name_or_path"),z2r=o(":"),Q2r=l(),Y=a("ul"),RE=a("li"),l2e=a("strong"),W2r=o("albert"),H2r=o(" \u2014 "),Wz=a("a"),U2r=o("TFAlbertForTokenClassification"),J2r=o(" (ALBERT model)"),Y2r=l(),BE=a("li"),i2e=a("strong"),K2r=o("bert"),Z2r=o(" \u2014 "),Hz=a("a"),evr=o("TFBertForTokenClassification"),ovr=o(" (BERT model)"),rvr=l(),PE=a("li"),d2e=a("strong"),tvr=o("camembert"),avr=o(" \u2014 "),Uz=a("a"),nvr=o("TFCamembertForTokenClassification"),svr=o(" (CamemBERT model)"),lvr=l(),$E=a("li"),c2e=a("strong"),ivr=o("convbert"),dvr=o(" \u2014 "),Jz=a("a"),cvr=o("TFConvBertForTokenClassification"),fvr=o(" (ConvBERT model)"),mvr=l(),IE=a("li"),f2e=a("strong"),gvr=o("deberta"),hvr=o(" \u2014 "),Yz=a("a"),pvr=o("TFDebertaForTokenClassification"),_vr=o(" (DeBERTa model)"),uvr=l(),qE=a("li"),m2e=a("strong"),bvr=o("deberta-v2"),vvr=o(" \u2014 "),Kz=a("a"),Fvr=o("TFDebertaV2ForTokenClassification"),Tvr=o(" (DeBERTa-v2 model)"),Mvr=l(),NE=a("li"),g2e=a("strong"),Evr=o("distilbert"),Cvr=o(" \u2014 "),Zz=a("a"),wvr=o("TFDistilBertForTokenClassification"),Avr=o(" (DistilBERT model)"),yvr=l(),jE=a("li"),h2e=a("strong"),Lvr=o("electra"),xvr=o(" \u2014 "),eQ=a("a"),kvr=o("TFElectraForTokenClassification"),Svr=o(" (ELECTRA model)"),Rvr=l(),DE=a("li"),p2e=a("strong"),Bvr=o("flaubert"),Pvr=o(" \u2014 "),oQ=a("a"),$vr=o("TFFlaubertForTokenClassification"),Ivr=o(" (FlauBERT model)"),qvr=l(),GE=a("li"),_2e=a("strong"),Nvr=o("funnel"),jvr=o(" \u2014 "),rQ=a("a"),Dvr=o("TFFunnelForTokenClassification"),Gvr=o(" (Funnel Transformer model)"),Ovr=l(),OE=a("li"),u2e=a("strong"),Vvr=o("layoutlm"),Xvr=o(" \u2014 "),tQ=a("a"),zvr=o("TFLayoutLMForTokenClassification"),Qvr=o(" (LayoutLM model)"),Wvr=l(),VE=a("li"),b2e=a("strong"),Hvr=o("longformer"),Uvr=o(" \u2014 "),aQ=a("a"),Jvr=o("TFLongformerForTokenClassification"),Yvr=o(" (Longformer model)"),Kvr=l(),XE=a("li"),v2e=a("strong"),Zvr=o("mobilebert"),eFr=o(" \u2014 "),nQ=a("a"),oFr=o("TFMobileBertForTokenClassification"),rFr=o(" (MobileBERT model)"),tFr=l(),zE=a("li"),F2e=a("strong"),aFr=o("mpnet"),nFr=o(" \u2014 "),sQ=a("a"),sFr=o("TFMPNetForTokenClassification"),lFr=o(" (MPNet model)"),iFr=l(),QE=a("li"),T2e=a("strong"),dFr=o("rembert"),cFr=o(" \u2014 "),lQ=a("a"),fFr=o("TFRemBertForTokenClassification"),mFr=o(" (RemBERT model)"),gFr=l(),WE=a("li"),M2e=a("strong"),hFr=o("roberta"),pFr=o(" \u2014 "),iQ=a("a"),_Fr=o("TFRobertaForTokenClassification"),uFr=o(" (RoBERTa model)"),bFr=l(),HE=a("li"),E2e=a("strong"),vFr=o("roformer"),FFr=o(" \u2014 "),dQ=a("a"),TFr=o("TFRoFormerForTokenClassification"),MFr=o(" (RoFormer model)"),EFr=l(),UE=a("li"),C2e=a("strong"),CFr=o("xlm"),wFr=o(" \u2014 "),cQ=a("a"),AFr=o("TFXLMForTokenClassification"),yFr=o(" (XLM model)"),LFr=l(),JE=a("li"),w2e=a("strong"),xFr=o("xlm-roberta"),kFr=o(" \u2014 "),fQ=a("a"),SFr=o("TFXLMRobertaForTokenClassification"),RFr=o(" (XLM-RoBERTa model)"),BFr=l(),YE=a("li"),A2e=a("strong"),PFr=o("xlnet"),$Fr=o(" \u2014 "),mQ=a("a"),IFr=o("TFXLNetForTokenClassification"),qFr=o(" (XLNet model)"),NFr=l(),y2e=a("p"),jFr=o("Examples:"),DFr=l(),f(C8.$$.fragment),tPe=l(),Xc=a("h2"),KE=a("a"),L2e=a("span"),f(w8.$$.fragment),GFr=l(),x2e=a("span"),OFr=o("TFAutoModelForQuestionAnswering"),aPe=l(),xr=a("div"),f(A8.$$.fragment),VFr=l(),zc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),hQ=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),y8=a("p"),JFr=o("This class cannot be instantiated directly using "),k2e=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Et=a("div"),f(L8.$$.fragment),eTr=l(),S2e=a("p"),oTr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),rTr=l(),Qc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),B2e=a("p"),dTr=o("Examples:"),cTr=l(),f(x8.$$.fragment),fTr=l(),Co=a("div"),f(k8.$$.fragment),mTr=l(),P2e=a("p"),gTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hTr=l(),yn=a("p"),pTr=o("The model class to instantiate is selected based on the "),$2e=a("code"),_Tr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),FTr=o("pretrained_model_name_or_path"),TTr=o(":"),MTr=l(),K=a("ul"),ZE=a("li"),N2e=a("strong"),ETr=o("albert"),CTr=o(" \u2014 "),_Q=a("a"),wTr=o("TFAlbertForQuestionAnswering"),ATr=o(" (ALBERT model)"),yTr=l(),e5=a("li"),j2e=a("strong"),LTr=o("bert"),xTr=o(" \u2014 "),uQ=a("a"),kTr=o("TFBertForQuestionAnswering"),STr=o(" (BERT model)"),RTr=l(),o5=a("li"),D2e=a("strong"),BTr=o("camembert"),PTr=o(" \u2014 "),bQ=a("a"),$Tr=o("TFCamembertForQuestionAnswering"),ITr=o(" (CamemBERT model)"),qTr=l(),r5=a("li"),G2e=a("strong"),NTr=o("convbert"),jTr=o(" \u2014 "),vQ=a("a"),DTr=o("TFConvBertForQuestionAnswering"),GTr=o(" (ConvBERT model)"),OTr=l(),t5=a("li"),O2e=a("strong"),VTr=o("deberta"),XTr=o(" \u2014 "),FQ=a("a"),zTr=o("TFDebertaForQuestionAnswering"),QTr=o(" (DeBERTa model)"),WTr=l(),a5=a("li"),V2e=a("strong"),HTr=o("deberta-v2"),UTr=o(" \u2014 "),TQ=a("a"),JTr=o("TFDebertaV2ForQuestionAnswering"),YTr=o(" (DeBERTa-v2 model)"),KTr=l(),n5=a("li"),X2e=a("strong"),ZTr=o("distilbert"),eMr=o(" \u2014 "),MQ=a("a"),oMr=o("TFDistilBertForQuestionAnswering"),rMr=o(" (DistilBERT model)"),tMr=l(),s5=a("li"),z2e=a("strong"),aMr=o("electra"),nMr=o(" \u2014 "),EQ=a("a"),sMr=o("TFElectraForQuestionAnswering"),lMr=o(" (ELECTRA model)"),iMr=l(),l5=a("li"),Q2e=a("strong"),dMr=o("flaubert"),cMr=o(" \u2014 "),CQ=a("a"),fMr=o("TFFlaubertForQuestionAnsweringSimple"),mMr=o(" (FlauBERT model)"),gMr=l(),i5=a("li"),W2e=a("strong"),hMr=o("funnel"),pMr=o(" \u2014 "),wQ=a("a"),_Mr=o("TFFunnelForQuestionAnswering"),uMr=o(" (Funnel Transformer model)"),bMr=l(),d5=a("li"),H2e=a("strong"),vMr=o("gptj"),FMr=o(" \u2014 "),AQ=a("a"),TMr=o("TFGPTJForQuestionAnswering"),MMr=o(" (GPT-J model)"),EMr=l(),c5=a("li"),U2e=a("strong"),CMr=o("longformer"),wMr=o(" \u2014 "),yQ=a("a"),AMr=o("TFLongformerForQuestionAnswering"),yMr=o(" (Longformer model)"),LMr=l(),f5=a("li"),J2e=a("strong"),xMr=o("mobilebert"),kMr=o(" \u2014 "),LQ=a("a"),SMr=o("TFMobileBertForQuestionAnswering"),RMr=o(" (MobileBERT model)"),BMr=l(),m5=a("li"),Y2e=a("strong"),PMr=o("mpnet"),$Mr=o(" \u2014 "),xQ=a("a"),IMr=o("TFMPNetForQuestionAnswering"),qMr=o(" (MPNet model)"),NMr=l(),g5=a("li"),K2e=a("strong"),jMr=o("rembert"),DMr=o(" \u2014 "),kQ=a("a"),GMr=o("TFRemBertForQuestionAnswering"),OMr=o(" (RemBERT model)"),VMr=l(),h5=a("li"),Z2e=a("strong"),XMr=o("roberta"),zMr=o(" \u2014 "),SQ=a("a"),QMr=o("TFRobertaForQuestionAnswering"),WMr=o(" (RoBERTa model)"),HMr=l(),p5=a("li"),eve=a("strong"),UMr=o("roformer"),JMr=o(" \u2014 "),RQ=a("a"),YMr=o("TFRoFormerForQuestionAnswering"),KMr=o(" (RoFormer model)"),ZMr=l(),_5=a("li"),ove=a("strong"),e4r=o("xlm"),o4r=o(" \u2014 "),BQ=a("a"),r4r=o("TFXLMForQuestionAnsweringSimple"),t4r=o(" (XLM model)"),a4r=l(),u5=a("li"),rve=a("strong"),n4r=o("xlm-roberta"),s4r=o(" \u2014 "),PQ=a("a"),l4r=o("TFXLMRobertaForQuestionAnswering"),i4r=o(" (XLM-RoBERTa model)"),d4r=l(),b5=a("li"),tve=a("strong"),c4r=o("xlnet"),f4r=o(" \u2014 "),$Q=a("a"),m4r=o("TFXLNetForQuestionAnsweringSimple"),g4r=o(" (XLNet model)"),h4r=l(),ave=a("p"),p4r=o("Examples:"),_4r=l(),f(S8.$$.fragment),nPe=l(),Wc=a("h2"),v5=a("a"),nve=a("span"),f(R8.$$.fragment),u4r=l(),sve=a("span"),b4r=o("TFAutoModelForVision2Seq"),sPe=l(),kr=a("div"),f(B8.$$.fragment),v4r=l(),Hc=a("p"),F4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IQ=a("a"),T4r=o("from_pretrained()"),M4r=o(" class method or the "),qQ=a("a"),E4r=o("from_config()"),C4r=o(` class
method.`),w4r=l(),P8=a("p"),A4r=o("This class cannot be instantiated directly using "),lve=a("code"),y4r=o("__init__()"),L4r=o(" (throws an error)."),x4r=l(),Ct=a("div"),f($8.$$.fragment),k4r=l(),ive=a("p"),S4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),R4r=l(),Uc=a("p"),B4r=o(`Note:
Loading a model from its configuration file does `),dve=a("strong"),P4r=o("not"),$4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),I4r=o("from_pretrained()"),q4r=o(" to load the model weights."),N4r=l(),cve=a("p"),j4r=o("Examples:"),D4r=l(),f(I8.$$.fragment),G4r=l(),wo=a("div"),f(q8.$$.fragment),O4r=l(),fve=a("p"),V4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X4r=l(),Ln=a("p"),z4r=o("The model class to instantiate is selected based on the "),mve=a("code"),Q4r=o("model_type"),W4r=o(` property of the config object (either
passed as an argument or loaded from `),gve=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(":"),K4r=l(),pve=a("ul"),F5=a("li"),_ve=a("strong"),Z4r=o("vision-encoder-decoder"),eEr=o(" \u2014 "),jQ=a("a"),oEr=o("TFVisionEncoderDecoderModel"),rEr=o(" (Vision Encoder decoder model)"),tEr=l(),uve=a("p"),aEr=o("Examples:"),nEr=l(),f(N8.$$.fragment),lPe=l(),Jc=a("h2"),T5=a("a"),bve=a("span"),f(j8.$$.fragment),sEr=l(),vve=a("span"),lEr=o("TFAutoModelForSpeechSeq2Seq"),iPe=l(),Sr=a("div"),f(D8.$$.fragment),iEr=l(),Yc=a("p"),dEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DQ=a("a"),cEr=o("from_pretrained()"),fEr=o(" class method or the "),GQ=a("a"),mEr=o("from_config()"),gEr=o(` class
method.`),hEr=l(),G8=a("p"),pEr=o("This class cannot be instantiated directly using "),Fve=a("code"),_Er=o("__init__()"),uEr=o(" (throws an error)."),bEr=l(),wt=a("div"),f(O8.$$.fragment),vEr=l(),Tve=a("p"),FEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TEr=l(),Kc=a("p"),MEr=o(`Note:
Loading a model from its configuration file does `),Mve=a("strong"),EEr=o("not"),CEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),wEr=o("from_pretrained()"),AEr=o(" to load the model weights."),yEr=l(),Eve=a("p"),LEr=o("Examples:"),xEr=l(),f(V8.$$.fragment),kEr=l(),Ao=a("div"),f(X8.$$.fragment),SEr=l(),Cve=a("p"),REr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BEr=l(),xn=a("p"),PEr=o("The model class to instantiate is selected based on the "),wve=a("code"),$Er=o("model_type"),IEr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),qEr=o("pretrained_model_name_or_path"),NEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=a("code"),jEr=o("pretrained_model_name_or_path"),DEr=o(":"),GEr=l(),Lve=a("ul"),M5=a("li"),xve=a("strong"),OEr=o("speech_to_text"),VEr=o(" \u2014 "),VQ=a("a"),XEr=o("TFSpeech2TextForConditionalGeneration"),zEr=o(" (Speech2Text model)"),QEr=l(),kve=a("p"),WEr=o("Examples:"),HEr=l(),f(z8.$$.fragment),dPe=l(),Zc=a("h2"),E5=a("a"),Sve=a("span"),f(Q8.$$.fragment),UEr=l(),Rve=a("span"),JEr=o("FlaxAutoModel"),cPe=l(),Rr=a("div"),f(W8.$$.fragment),YEr=l(),ef=a("p"),KEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=a("a"),ZEr=o("from_pretrained()"),e5r=o(" class method or the "),zQ=a("a"),o5r=o("from_config()"),r5r=o(` class
method.`),t5r=l(),H8=a("p"),a5r=o("This class cannot be instantiated directly using "),Bve=a("code"),n5r=o("__init__()"),s5r=o(" (throws an error)."),l5r=l(),At=a("div"),f(U8.$$.fragment),i5r=l(),Pve=a("p"),d5r=o("Instantiates one of the base model classes of the library from a configuration."),c5r=l(),of=a("p"),f5r=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),m5r=o("not"),g5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),h5r=o("from_pretrained()"),p5r=o(" to load the model weights."),_5r=l(),Ive=a("p"),u5r=o("Examples:"),b5r=l(),f(J8.$$.fragment),v5r=l(),yo=a("div"),f(Y8.$$.fragment),F5r=l(),qve=a("p"),T5r=o("Instantiate one of the base model classes of the library from a pretrained model."),M5r=l(),kn=a("p"),E5r=o("The model class to instantiate is selected based on the "),Nve=a("code"),C5r=o("model_type"),w5r=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),A5r=o("pretrained_model_name_or_path"),y5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),L5r=o("pretrained_model_name_or_path"),x5r=o(":"),k5r=l(),z=a("ul"),C5=a("li"),Gve=a("strong"),S5r=o("albert"),R5r=o(" \u2014 "),WQ=a("a"),B5r=o("FlaxAlbertModel"),P5r=o(" (ALBERT model)"),$5r=l(),w5=a("li"),Ove=a("strong"),I5r=o("bart"),q5r=o(" \u2014 "),HQ=a("a"),N5r=o("FlaxBartModel"),j5r=o(" (BART model)"),D5r=l(),A5=a("li"),Vve=a("strong"),G5r=o("beit"),O5r=o(" \u2014 "),UQ=a("a"),V5r=o("FlaxBeitModel"),X5r=o(" (BEiT model)"),z5r=l(),y5=a("li"),Xve=a("strong"),Q5r=o("bert"),W5r=o(" \u2014 "),JQ=a("a"),H5r=o("FlaxBertModel"),U5r=o(" (BERT model)"),J5r=l(),L5=a("li"),zve=a("strong"),Y5r=o("big_bird"),K5r=o(" \u2014 "),YQ=a("a"),Z5r=o("FlaxBigBirdModel"),e3r=o(" (BigBird model)"),o3r=l(),x5=a("li"),Qve=a("strong"),r3r=o("blenderbot"),t3r=o(" \u2014 "),KQ=a("a"),a3r=o("FlaxBlenderbotModel"),n3r=o(" (Blenderbot model)"),s3r=l(),k5=a("li"),Wve=a("strong"),l3r=o("blenderbot-small"),i3r=o(" \u2014 "),ZQ=a("a"),d3r=o("FlaxBlenderbotSmallModel"),c3r=o(" (BlenderbotSmall model)"),f3r=l(),S5=a("li"),Hve=a("strong"),m3r=o("clip"),g3r=o(" \u2014 "),eW=a("a"),h3r=o("FlaxCLIPModel"),p3r=o(" (CLIP model)"),_3r=l(),R5=a("li"),Uve=a("strong"),u3r=o("distilbert"),b3r=o(" \u2014 "),oW=a("a"),v3r=o("FlaxDistilBertModel"),F3r=o(" (DistilBERT model)"),T3r=l(),B5=a("li"),Jve=a("strong"),M3r=o("electra"),E3r=o(" \u2014 "),rW=a("a"),C3r=o("FlaxElectraModel"),w3r=o(" (ELECTRA model)"),A3r=l(),P5=a("li"),Yve=a("strong"),y3r=o("gpt2"),L3r=o(" \u2014 "),tW=a("a"),x3r=o("FlaxGPT2Model"),k3r=o(" (OpenAI GPT-2 model)"),S3r=l(),$5=a("li"),Kve=a("strong"),R3r=o("gpt_neo"),B3r=o(" \u2014 "),aW=a("a"),P3r=o("FlaxGPTNeoModel"),$3r=o(" (GPT Neo model)"),I3r=l(),I5=a("li"),Zve=a("strong"),q3r=o("gptj"),N3r=o(" \u2014 "),nW=a("a"),j3r=o("FlaxGPTJModel"),D3r=o(" (GPT-J model)"),G3r=l(),q5=a("li"),eFe=a("strong"),O3r=o("marian"),V3r=o(" \u2014 "),sW=a("a"),X3r=o("FlaxMarianModel"),z3r=o(" (Marian model)"),Q3r=l(),N5=a("li"),oFe=a("strong"),W3r=o("mbart"),H3r=o(" \u2014 "),lW=a("a"),U3r=o("FlaxMBartModel"),J3r=o(" (mBART model)"),Y3r=l(),j5=a("li"),rFe=a("strong"),K3r=o("mt5"),Z3r=o(" \u2014 "),iW=a("a"),eCr=o("FlaxMT5Model"),oCr=o(" (mT5 model)"),rCr=l(),D5=a("li"),tFe=a("strong"),tCr=o("pegasus"),aCr=o(" \u2014 "),dW=a("a"),nCr=o("FlaxPegasusModel"),sCr=o(" (Pegasus model)"),lCr=l(),G5=a("li"),aFe=a("strong"),iCr=o("roberta"),dCr=o(" \u2014 "),cW=a("a"),cCr=o("FlaxRobertaModel"),fCr=o(" (RoBERTa model)"),mCr=l(),O5=a("li"),nFe=a("strong"),gCr=o("roformer"),hCr=o(" \u2014 "),fW=a("a"),pCr=o("FlaxRoFormerModel"),_Cr=o(" (RoFormer model)"),uCr=l(),V5=a("li"),sFe=a("strong"),bCr=o("t5"),vCr=o(" \u2014 "),mW=a("a"),FCr=o("FlaxT5Model"),TCr=o(" (T5 model)"),MCr=l(),X5=a("li"),lFe=a("strong"),ECr=o("vision-text-dual-encoder"),CCr=o(" \u2014 "),gW=a("a"),wCr=o("FlaxVisionTextDualEncoderModel"),ACr=o(" (VisionTextDualEncoder model)"),yCr=l(),z5=a("li"),iFe=a("strong"),LCr=o("vit"),xCr=o(" \u2014 "),hW=a("a"),kCr=o("FlaxViTModel"),SCr=o(" (ViT model)"),RCr=l(),Q5=a("li"),dFe=a("strong"),BCr=o("wav2vec2"),PCr=o(" \u2014 "),pW=a("a"),$Cr=o("FlaxWav2Vec2Model"),ICr=o(" (Wav2Vec2 model)"),qCr=l(),W5=a("li"),cFe=a("strong"),NCr=o("xglm"),jCr=o(" \u2014 "),_W=a("a"),DCr=o("FlaxXGLMModel"),GCr=o(" (XGLM model)"),OCr=l(),H5=a("li"),fFe=a("strong"),VCr=o("xlm-roberta"),XCr=o(" \u2014 "),uW=a("a"),zCr=o("FlaxXLMRobertaModel"),QCr=o(" (XLM-RoBERTa model)"),WCr=l(),mFe=a("p"),HCr=o("Examples:"),UCr=l(),f(K8.$$.fragment),fPe=l(),rf=a("h2"),U5=a("a"),gFe=a("span"),f(Z8.$$.fragment),JCr=l(),hFe=a("span"),YCr=o("FlaxAutoModelForCausalLM"),mPe=l(),Br=a("div"),f(eL.$$.fragment),KCr=l(),tf=a("p"),ZCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bW=a("a"),ewr=o("from_pretrained()"),owr=o(" class method or the "),vW=a("a"),rwr=o("from_config()"),twr=o(` class
method.`),awr=l(),oL=a("p"),nwr=o("This class cannot be instantiated directly using "),pFe=a("code"),swr=o("__init__()"),lwr=o(" (throws an error)."),iwr=l(),yt=a("div"),f(rL.$$.fragment),dwr=l(),_Fe=a("p"),cwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fwr=l(),af=a("p"),mwr=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),gwr=o("not"),hwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),pwr=o("from_pretrained()"),_wr=o(" to load the model weights."),uwr=l(),bFe=a("p"),bwr=o("Examples:"),vwr=l(),f(tL.$$.fragment),Fwr=l(),Lo=a("div"),f(aL.$$.fragment),Twr=l(),vFe=a("p"),Mwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ewr=l(),Sn=a("p"),Cwr=o("The model class to instantiate is selected based on the "),FFe=a("code"),wwr=o("model_type"),Awr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),ywr=o("pretrained_model_name_or_path"),Lwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),xwr=o("pretrained_model_name_or_path"),kwr=o(":"),Swr=l(),ca=a("ul"),J5=a("li"),EFe=a("strong"),Rwr=o("bart"),Bwr=o(" \u2014 "),TW=a("a"),Pwr=o("FlaxBartForCausalLM"),$wr=o(" (BART model)"),Iwr=l(),Y5=a("li"),CFe=a("strong"),qwr=o("gpt2"),Nwr=o(" \u2014 "),MW=a("a"),jwr=o("FlaxGPT2LMHeadModel"),Dwr=o(" (OpenAI GPT-2 model)"),Gwr=l(),K5=a("li"),wFe=a("strong"),Owr=o("gpt_neo"),Vwr=o(" \u2014 "),EW=a("a"),Xwr=o("FlaxGPTNeoForCausalLM"),zwr=o(" (GPT Neo model)"),Qwr=l(),Z5=a("li"),AFe=a("strong"),Wwr=o("gptj"),Hwr=o(" \u2014 "),CW=a("a"),Uwr=o("FlaxGPTJForCausalLM"),Jwr=o(" (GPT-J model)"),Ywr=l(),e3=a("li"),yFe=a("strong"),Kwr=o("xglm"),Zwr=o(" \u2014 "),wW=a("a"),e6r=o("FlaxXGLMForCausalLM"),o6r=o(" (XGLM model)"),r6r=l(),LFe=a("p"),t6r=o("Examples:"),a6r=l(),f(nL.$$.fragment),gPe=l(),nf=a("h2"),o3=a("a"),xFe=a("span"),f(sL.$$.fragment),n6r=l(),kFe=a("span"),s6r=o("FlaxAutoModelForPreTraining"),hPe=l(),Pr=a("div"),f(lL.$$.fragment),l6r=l(),sf=a("p"),i6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AW=a("a"),d6r=o("from_pretrained()"),c6r=o(" class method or the "),yW=a("a"),f6r=o("from_config()"),m6r=o(` class
method.`),g6r=l(),iL=a("p"),h6r=o("This class cannot be instantiated directly using "),SFe=a("code"),p6r=o("__init__()"),_6r=o(" (throws an error)."),u6r=l(),Lt=a("div"),f(dL.$$.fragment),b6r=l(),RFe=a("p"),v6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),F6r=l(),lf=a("p"),T6r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),M6r=o("not"),E6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=a("a"),C6r=o("from_pretrained()"),w6r=o(" to load the model weights."),A6r=l(),PFe=a("p"),y6r=o("Examples:"),L6r=l(),f(cL.$$.fragment),x6r=l(),xo=a("div"),f(fL.$$.fragment),k6r=l(),$Fe=a("p"),S6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),R6r=l(),Rn=a("p"),B6r=o("The model class to instantiate is selected based on the "),IFe=a("code"),P6r=o("model_type"),$6r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),I6r=o("pretrained_model_name_or_path"),q6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),N6r=o("pretrained_model_name_or_path"),j6r=o(":"),D6r=l(),me=a("ul"),r3=a("li"),jFe=a("strong"),G6r=o("albert"),O6r=o(" \u2014 "),xW=a("a"),V6r=o("FlaxAlbertForPreTraining"),X6r=o(" (ALBERT model)"),z6r=l(),t3=a("li"),DFe=a("strong"),Q6r=o("bart"),W6r=o(" \u2014 "),kW=a("a"),H6r=o("FlaxBartForConditionalGeneration"),U6r=o(" (BART model)"),J6r=l(),a3=a("li"),GFe=a("strong"),Y6r=o("bert"),K6r=o(" \u2014 "),SW=a("a"),Z6r=o("FlaxBertForPreTraining"),eAr=o(" (BERT model)"),oAr=l(),n3=a("li"),OFe=a("strong"),rAr=o("big_bird"),tAr=o(" \u2014 "),RW=a("a"),aAr=o("FlaxBigBirdForPreTraining"),nAr=o(" (BigBird model)"),sAr=l(),s3=a("li"),VFe=a("strong"),lAr=o("electra"),iAr=o(" \u2014 "),BW=a("a"),dAr=o("FlaxElectraForPreTraining"),cAr=o(" (ELECTRA model)"),fAr=l(),l3=a("li"),XFe=a("strong"),mAr=o("mbart"),gAr=o(" \u2014 "),PW=a("a"),hAr=o("FlaxMBartForConditionalGeneration"),pAr=o(" (mBART model)"),_Ar=l(),i3=a("li"),zFe=a("strong"),uAr=o("mt5"),bAr=o(" \u2014 "),$W=a("a"),vAr=o("FlaxMT5ForConditionalGeneration"),FAr=o(" (mT5 model)"),TAr=l(),d3=a("li"),QFe=a("strong"),MAr=o("roberta"),EAr=o(" \u2014 "),IW=a("a"),CAr=o("FlaxRobertaForMaskedLM"),wAr=o(" (RoBERTa model)"),AAr=l(),c3=a("li"),WFe=a("strong"),yAr=o("roformer"),LAr=o(" \u2014 "),qW=a("a"),xAr=o("FlaxRoFormerForMaskedLM"),kAr=o(" (RoFormer model)"),SAr=l(),f3=a("li"),HFe=a("strong"),RAr=o("t5"),BAr=o(" \u2014 "),NW=a("a"),PAr=o("FlaxT5ForConditionalGeneration"),$Ar=o(" (T5 model)"),IAr=l(),m3=a("li"),UFe=a("strong"),qAr=o("wav2vec2"),NAr=o(" \u2014 "),jW=a("a"),jAr=o("FlaxWav2Vec2ForPreTraining"),DAr=o(" (Wav2Vec2 model)"),GAr=l(),g3=a("li"),JFe=a("strong"),OAr=o("xlm-roberta"),VAr=o(" \u2014 "),DW=a("a"),XAr=o("FlaxXLMRobertaForMaskedLM"),zAr=o(" (XLM-RoBERTa model)"),QAr=l(),YFe=a("p"),WAr=o("Examples:"),HAr=l(),f(mL.$$.fragment),pPe=l(),df=a("h2"),h3=a("a"),KFe=a("span"),f(gL.$$.fragment),UAr=l(),ZFe=a("span"),JAr=o("FlaxAutoModelForMaskedLM"),_Pe=l(),$r=a("div"),f(hL.$$.fragment),YAr=l(),cf=a("p"),KAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GW=a("a"),ZAr=o("from_pretrained()"),e0r=o(" class method or the "),OW=a("a"),o0r=o("from_config()"),r0r=o(` class
method.`),t0r=l(),pL=a("p"),a0r=o("This class cannot be instantiated directly using "),eTe=a("code"),n0r=o("__init__()"),s0r=o(" (throws an error)."),l0r=l(),xt=a("div"),f(_L.$$.fragment),i0r=l(),oTe=a("p"),d0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c0r=l(),ff=a("p"),f0r=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),m0r=o("not"),g0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),h0r=o("from_pretrained()"),p0r=o(" to load the model weights."),_0r=l(),tTe=a("p"),u0r=o("Examples:"),b0r=l(),f(uL.$$.fragment),v0r=l(),ko=a("div"),f(bL.$$.fragment),F0r=l(),aTe=a("p"),T0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M0r=l(),Bn=a("p"),E0r=o("The model class to instantiate is selected based on the "),nTe=a("code"),C0r=o("model_type"),w0r=o(` property of the config object (either
passed as an argument or loaded from `),sTe=a("code"),A0r=o("pretrained_model_name_or_path"),y0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=a("code"),L0r=o("pretrained_model_name_or_path"),x0r=o(":"),k0r=l(),ve=a("ul"),p3=a("li"),iTe=a("strong"),S0r=o("albert"),R0r=o(" \u2014 "),XW=a("a"),B0r=o("FlaxAlbertForMaskedLM"),P0r=o(" (ALBERT model)"),$0r=l(),_3=a("li"),dTe=a("strong"),I0r=o("bart"),q0r=o(" \u2014 "),zW=a("a"),N0r=o("FlaxBartForConditionalGeneration"),j0r=o(" (BART model)"),D0r=l(),u3=a("li"),cTe=a("strong"),G0r=o("bert"),O0r=o(" \u2014 "),QW=a("a"),V0r=o("FlaxBertForMaskedLM"),X0r=o(" (BERT model)"),z0r=l(),b3=a("li"),fTe=a("strong"),Q0r=o("big_bird"),W0r=o(" \u2014 "),WW=a("a"),H0r=o("FlaxBigBirdForMaskedLM"),U0r=o(" (BigBird model)"),J0r=l(),v3=a("li"),mTe=a("strong"),Y0r=o("distilbert"),K0r=o(" \u2014 "),HW=a("a"),Z0r=o("FlaxDistilBertForMaskedLM"),eyr=o(" (DistilBERT model)"),oyr=l(),F3=a("li"),gTe=a("strong"),ryr=o("electra"),tyr=o(" \u2014 "),UW=a("a"),ayr=o("FlaxElectraForMaskedLM"),nyr=o(" (ELECTRA model)"),syr=l(),T3=a("li"),hTe=a("strong"),lyr=o("mbart"),iyr=o(" \u2014 "),JW=a("a"),dyr=o("FlaxMBartForConditionalGeneration"),cyr=o(" (mBART model)"),fyr=l(),M3=a("li"),pTe=a("strong"),myr=o("roberta"),gyr=o(" \u2014 "),YW=a("a"),hyr=o("FlaxRobertaForMaskedLM"),pyr=o(" (RoBERTa model)"),_yr=l(),E3=a("li"),_Te=a("strong"),uyr=o("roformer"),byr=o(" \u2014 "),KW=a("a"),vyr=o("FlaxRoFormerForMaskedLM"),Fyr=o(" (RoFormer model)"),Tyr=l(),C3=a("li"),uTe=a("strong"),Myr=o("xlm-roberta"),Eyr=o(" \u2014 "),ZW=a("a"),Cyr=o("FlaxXLMRobertaForMaskedLM"),wyr=o(" (XLM-RoBERTa model)"),Ayr=l(),bTe=a("p"),yyr=o("Examples:"),Lyr=l(),f(vL.$$.fragment),uPe=l(),mf=a("h2"),w3=a("a"),vTe=a("span"),f(FL.$$.fragment),xyr=l(),FTe=a("span"),kyr=o("FlaxAutoModelForSeq2SeqLM"),bPe=l(),Ir=a("div"),f(TL.$$.fragment),Syr=l(),gf=a("p"),Ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=a("a"),Byr=o("from_pretrained()"),Pyr=o(" class method or the "),oH=a("a"),$yr=o("from_config()"),Iyr=o(` class
method.`),qyr=l(),ML=a("p"),Nyr=o("This class cannot be instantiated directly using "),TTe=a("code"),jyr=o("__init__()"),Dyr=o(" (throws an error)."),Gyr=l(),kt=a("div"),f(EL.$$.fragment),Oyr=l(),MTe=a("p"),Vyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Xyr=l(),hf=a("p"),zyr=o(`Note:
Loading a model from its configuration file does `),ETe=a("strong"),Qyr=o("not"),Wyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=a("a"),Hyr=o("from_pretrained()"),Uyr=o(" to load the model weights."),Jyr=l(),CTe=a("p"),Yyr=o("Examples:"),Kyr=l(),f(CL.$$.fragment),Zyr=l(),So=a("div"),f(wL.$$.fragment),e8r=l(),wTe=a("p"),o8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r8r=l(),Pn=a("p"),t8r=o("The model class to instantiate is selected based on the "),ATe=a("code"),a8r=o("model_type"),n8r=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(":"),c8r=l(),Ee=a("ul"),A3=a("li"),xTe=a("strong"),f8r=o("bart"),m8r=o(" \u2014 "),tH=a("a"),g8r=o("FlaxBartForConditionalGeneration"),h8r=o(" (BART model)"),p8r=l(),y3=a("li"),kTe=a("strong"),_8r=o("blenderbot"),u8r=o(" \u2014 "),aH=a("a"),b8r=o("FlaxBlenderbotForConditionalGeneration"),v8r=o(" (Blenderbot model)"),F8r=l(),L3=a("li"),STe=a("strong"),T8r=o("blenderbot-small"),M8r=o(" \u2014 "),nH=a("a"),E8r=o("FlaxBlenderbotSmallForConditionalGeneration"),C8r=o(" (BlenderbotSmall model)"),w8r=l(),x3=a("li"),RTe=a("strong"),A8r=o("encoder-decoder"),y8r=o(" \u2014 "),sH=a("a"),L8r=o("FlaxEncoderDecoderModel"),x8r=o(" (Encoder decoder model)"),k8r=l(),k3=a("li"),BTe=a("strong"),S8r=o("marian"),R8r=o(" \u2014 "),lH=a("a"),B8r=o("FlaxMarianMTModel"),P8r=o(" (Marian model)"),$8r=l(),S3=a("li"),PTe=a("strong"),I8r=o("mbart"),q8r=o(" \u2014 "),iH=a("a"),N8r=o("FlaxMBartForConditionalGeneration"),j8r=o(" (mBART model)"),D8r=l(),R3=a("li"),$Te=a("strong"),G8r=o("mt5"),O8r=o(" \u2014 "),dH=a("a"),V8r=o("FlaxMT5ForConditionalGeneration"),X8r=o(" (mT5 model)"),z8r=l(),B3=a("li"),ITe=a("strong"),Q8r=o("pegasus"),W8r=o(" \u2014 "),cH=a("a"),H8r=o("FlaxPegasusForConditionalGeneration"),U8r=o(" (Pegasus model)"),J8r=l(),P3=a("li"),qTe=a("strong"),Y8r=o("t5"),K8r=o(" \u2014 "),fH=a("a"),Z8r=o("FlaxT5ForConditionalGeneration"),eLr=o(" (T5 model)"),oLr=l(),NTe=a("p"),rLr=o("Examples:"),tLr=l(),f(AL.$$.fragment),vPe=l(),pf=a("h2"),$3=a("a"),jTe=a("span"),f(yL.$$.fragment),aLr=l(),DTe=a("span"),nLr=o("FlaxAutoModelForSequenceClassification"),FPe=l(),qr=a("div"),f(LL.$$.fragment),sLr=l(),_f=a("p"),lLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mH=a("a"),iLr=o("from_pretrained()"),dLr=o(" class method or the "),gH=a("a"),cLr=o("from_config()"),fLr=o(` class
method.`),mLr=l(),xL=a("p"),gLr=o("This class cannot be instantiated directly using "),GTe=a("code"),hLr=o("__init__()"),pLr=o(" (throws an error)."),_Lr=l(),St=a("div"),f(kL.$$.fragment),uLr=l(),OTe=a("p"),bLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),vLr=l(),uf=a("p"),FLr=o(`Note:
Loading a model from its configuration file does `),VTe=a("strong"),TLr=o("not"),MLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),ELr=o("from_pretrained()"),CLr=o(" to load the model weights."),wLr=l(),XTe=a("p"),ALr=o("Examples:"),yLr=l(),f(SL.$$.fragment),LLr=l(),Ro=a("div"),f(RL.$$.fragment),xLr=l(),zTe=a("p"),kLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SLr=l(),$n=a("p"),RLr=o("The model class to instantiate is selected based on the "),QTe=a("code"),BLr=o("model_type"),PLr=o(` property of the config object (either
passed as an argument or loaded from `),WTe=a("code"),$Lr=o("pretrained_model_name_or_path"),ILr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),qLr=o("pretrained_model_name_or_path"),NLr=o(":"),jLr=l(),Fe=a("ul"),I3=a("li"),UTe=a("strong"),DLr=o("albert"),GLr=o(" \u2014 "),pH=a("a"),OLr=o("FlaxAlbertForSequenceClassification"),VLr=o(" (ALBERT model)"),XLr=l(),q3=a("li"),JTe=a("strong"),zLr=o("bart"),QLr=o(" \u2014 "),_H=a("a"),WLr=o("FlaxBartForSequenceClassification"),HLr=o(" (BART model)"),ULr=l(),N3=a("li"),YTe=a("strong"),JLr=o("bert"),YLr=o(" \u2014 "),uH=a("a"),KLr=o("FlaxBertForSequenceClassification"),ZLr=o(" (BERT model)"),e7r=l(),j3=a("li"),KTe=a("strong"),o7r=o("big_bird"),r7r=o(" \u2014 "),bH=a("a"),t7r=o("FlaxBigBirdForSequenceClassification"),a7r=o(" (BigBird model)"),n7r=l(),D3=a("li"),ZTe=a("strong"),s7r=o("distilbert"),l7r=o(" \u2014 "),vH=a("a"),i7r=o("FlaxDistilBertForSequenceClassification"),d7r=o(" (DistilBERT model)"),c7r=l(),G3=a("li"),eMe=a("strong"),f7r=o("electra"),m7r=o(" \u2014 "),FH=a("a"),g7r=o("FlaxElectraForSequenceClassification"),h7r=o(" (ELECTRA model)"),p7r=l(),O3=a("li"),oMe=a("strong"),_7r=o("mbart"),u7r=o(" \u2014 "),TH=a("a"),b7r=o("FlaxMBartForSequenceClassification"),v7r=o(" (mBART model)"),F7r=l(),V3=a("li"),rMe=a("strong"),T7r=o("roberta"),M7r=o(" \u2014 "),MH=a("a"),E7r=o("FlaxRobertaForSequenceClassification"),C7r=o(" (RoBERTa model)"),w7r=l(),X3=a("li"),tMe=a("strong"),A7r=o("roformer"),y7r=o(" \u2014 "),EH=a("a"),L7r=o("FlaxRoFormerForSequenceClassification"),x7r=o(" (RoFormer model)"),k7r=l(),z3=a("li"),aMe=a("strong"),S7r=o("xlm-roberta"),R7r=o(" \u2014 "),CH=a("a"),B7r=o("FlaxXLMRobertaForSequenceClassification"),P7r=o(" (XLM-RoBERTa model)"),$7r=l(),nMe=a("p"),I7r=o("Examples:"),q7r=l(),f(BL.$$.fragment),TPe=l(),bf=a("h2"),Q3=a("a"),sMe=a("span"),f(PL.$$.fragment),N7r=l(),lMe=a("span"),j7r=o("FlaxAutoModelForQuestionAnswering"),MPe=l(),Nr=a("div"),f($L.$$.fragment),D7r=l(),vf=a("p"),G7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wH=a("a"),O7r=o("from_pretrained()"),V7r=o(" class method or the "),AH=a("a"),X7r=o("from_config()"),z7r=o(` class
method.`),Q7r=l(),IL=a("p"),W7r=o("This class cannot be instantiated directly using "),iMe=a("code"),H7r=o("__init__()"),U7r=o(" (throws an error)."),J7r=l(),Rt=a("div"),f(qL.$$.fragment),Y7r=l(),dMe=a("p"),K7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z7r=l(),Ff=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),fMe=a("p"),s9r=o("Examples:"),l9r=l(),f(NL.$$.fragment),i9r=l(),Bo=a("div"),f(jL.$$.fragment),d9r=l(),mMe=a("p"),c9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f9r=l(),In=a("p"),m9r=o("The model class to instantiate is selected based on the "),gMe=a("code"),g9r=o("model_type"),h9r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),p9r=o("pretrained_model_name_or_path"),_9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=a("code"),u9r=o("pretrained_model_name_or_path"),b9r=o(":"),v9r=l(),Te=a("ul"),W3=a("li"),_Me=a("strong"),F9r=o("albert"),T9r=o(" \u2014 "),LH=a("a"),M9r=o("FlaxAlbertForQuestionAnswering"),E9r=o(" (ALBERT model)"),C9r=l(),H3=a("li"),uMe=a("strong"),w9r=o("bart"),A9r=o(" \u2014 "),xH=a("a"),y9r=o("FlaxBartForQuestionAnswering"),L9r=o(" (BART model)"),x9r=l(),U3=a("li"),bMe=a("strong"),k9r=o("bert"),S9r=o(" \u2014 "),kH=a("a"),R9r=o("FlaxBertForQuestionAnswering"),B9r=o(" (BERT model)"),P9r=l(),J3=a("li"),vMe=a("strong"),$9r=o("big_bird"),I9r=o(" \u2014 "),SH=a("a"),q9r=o("FlaxBigBirdForQuestionAnswering"),N9r=o(" (BigBird model)"),j9r=l(),Y3=a("li"),FMe=a("strong"),D9r=o("distilbert"),G9r=o(" \u2014 "),RH=a("a"),O9r=o("FlaxDistilBertForQuestionAnswering"),V9r=o(" (DistilBERT model)"),X9r=l(),K3=a("li"),TMe=a("strong"),z9r=o("electra"),Q9r=o(" \u2014 "),BH=a("a"),W9r=o("FlaxElectraForQuestionAnswering"),H9r=o(" (ELECTRA model)"),U9r=l(),Z3=a("li"),MMe=a("strong"),J9r=o("mbart"),Y9r=o(" \u2014 "),PH=a("a"),K9r=o("FlaxMBartForQuestionAnswering"),Z9r=o(" (mBART model)"),exr=l(),eC=a("li"),EMe=a("strong"),oxr=o("roberta"),rxr=o(" \u2014 "),$H=a("a"),txr=o("FlaxRobertaForQuestionAnswering"),axr=o(" (RoBERTa model)"),nxr=l(),oC=a("li"),CMe=a("strong"),sxr=o("roformer"),lxr=o(" \u2014 "),IH=a("a"),ixr=o("FlaxRoFormerForQuestionAnswering"),dxr=o(" (RoFormer model)"),cxr=l(),rC=a("li"),wMe=a("strong"),fxr=o("xlm-roberta"),mxr=o(" \u2014 "),qH=a("a"),gxr=o("FlaxXLMRobertaForQuestionAnswering"),hxr=o(" (XLM-RoBERTa model)"),pxr=l(),AMe=a("p"),_xr=o("Examples:"),uxr=l(),f(DL.$$.fragment),EPe=l(),Tf=a("h2"),tC=a("a"),yMe=a("span"),f(GL.$$.fragment),bxr=l(),LMe=a("span"),vxr=o("FlaxAutoModelForTokenClassification"),CPe=l(),jr=a("div"),f(OL.$$.fragment),Fxr=l(),Mf=a("p"),Txr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=a("a"),Mxr=o("from_pretrained()"),Exr=o(" class method or the "),jH=a("a"),Cxr=o("from_config()"),wxr=o(` class
method.`),Axr=l(),VL=a("p"),yxr=o("This class cannot be instantiated directly using "),xMe=a("code"),Lxr=o("__init__()"),xxr=o(" (throws an error)."),kxr=l(),Bt=a("div"),f(XL.$$.fragment),Sxr=l(),kMe=a("p"),Rxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Bxr=l(),Ef=a("p"),Pxr=o(`Note:
Loading a model from its configuration file does `),SMe=a("strong"),$xr=o("not"),Ixr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),qxr=o("from_pretrained()"),Nxr=o(" to load the model weights."),jxr=l(),RMe=a("p"),Dxr=o("Examples:"),Gxr=l(),f(zL.$$.fragment),Oxr=l(),Po=a("div"),f(QL.$$.fragment),Vxr=l(),BMe=a("p"),Xxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),zxr=l(),qn=a("p"),Qxr=o("The model class to instantiate is selected based on the "),PMe=a("code"),Wxr=o("model_type"),Hxr=o(` property of the config object (either
passed as an argument or loaded from `),$Me=a("code"),Uxr=o("pretrained_model_name_or_path"),Jxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=a("code"),Yxr=o("pretrained_model_name_or_path"),Kxr=o(":"),Zxr=l(),Be=a("ul"),aC=a("li"),qMe=a("strong"),ekr=o("albert"),okr=o(" \u2014 "),GH=a("a"),rkr=o("FlaxAlbertForTokenClassification"),tkr=o(" (ALBERT model)"),akr=l(),nC=a("li"),NMe=a("strong"),nkr=o("bert"),skr=o(" \u2014 "),OH=a("a"),lkr=o("FlaxBertForTokenClassification"),ikr=o(" (BERT model)"),dkr=l(),sC=a("li"),jMe=a("strong"),ckr=o("big_bird"),fkr=o(" \u2014 "),VH=a("a"),mkr=o("FlaxBigBirdForTokenClassification"),gkr=o(" (BigBird model)"),hkr=l(),lC=a("li"),DMe=a("strong"),pkr=o("distilbert"),_kr=o(" \u2014 "),XH=a("a"),ukr=o("FlaxDistilBertForTokenClassification"),bkr=o(" (DistilBERT model)"),vkr=l(),iC=a("li"),GMe=a("strong"),Fkr=o("electra"),Tkr=o(" \u2014 "),zH=a("a"),Mkr=o("FlaxElectraForTokenClassification"),Ekr=o(" (ELECTRA model)"),Ckr=l(),dC=a("li"),OMe=a("strong"),wkr=o("roberta"),Akr=o(" \u2014 "),QH=a("a"),ykr=o("FlaxRobertaForTokenClassification"),Lkr=o(" (RoBERTa model)"),xkr=l(),cC=a("li"),VMe=a("strong"),kkr=o("roformer"),Skr=o(" \u2014 "),WH=a("a"),Rkr=o("FlaxRoFormerForTokenClassification"),Bkr=o(" (RoFormer model)"),Pkr=l(),fC=a("li"),XMe=a("strong"),$kr=o("xlm-roberta"),Ikr=o(" \u2014 "),HH=a("a"),qkr=o("FlaxXLMRobertaForTokenClassification"),Nkr=o(" (XLM-RoBERTa model)"),jkr=l(),zMe=a("p"),Dkr=o("Examples:"),Gkr=l(),f(WL.$$.fragment),wPe=l(),Cf=a("h2"),mC=a("a"),QMe=a("span"),f(HL.$$.fragment),Okr=l(),WMe=a("span"),Vkr=o("FlaxAutoModelForMultipleChoice"),APe=l(),Dr=a("div"),f(UL.$$.fragment),Xkr=l(),wf=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UH=a("a"),Qkr=o("from_pretrained()"),Wkr=o(" class method or the "),JH=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),JL=a("p"),Ykr=o("This class cannot be instantiated directly using "),HMe=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Pt=a("div"),f(YL.$$.fragment),oSr=l(),UMe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),tSr=l(),Af=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),YMe=a("p"),cSr=o("Examples:"),fSr=l(),f(KL.$$.fragment),mSr=l(),$o=a("div"),f(ZL.$$.fragment),gSr=l(),KMe=a("p"),hSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pSr=l(),Nn=a("p"),_Sr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),uSr=o("model_type"),bSr=o(` property of the config object (either
passed as an argument or loaded from `),e4e=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=a("code"),TSr=o("pretrained_model_name_or_path"),MSr=o(":"),ESr=l(),Pe=a("ul"),gC=a("li"),r4e=a("strong"),CSr=o("albert"),wSr=o(" \u2014 "),KH=a("a"),ASr=o("FlaxAlbertForMultipleChoice"),ySr=o(" (ALBERT model)"),LSr=l(),hC=a("li"),t4e=a("strong"),xSr=o("bert"),kSr=o(" \u2014 "),ZH=a("a"),SSr=o("FlaxBertForMultipleChoice"),RSr=o(" (BERT model)"),BSr=l(),pC=a("li"),a4e=a("strong"),PSr=o("big_bird"),$Sr=o(" \u2014 "),eU=a("a"),ISr=o("FlaxBigBirdForMultipleChoice"),qSr=o(" (BigBird model)"),NSr=l(),_C=a("li"),n4e=a("strong"),jSr=o("distilbert"),DSr=o(" \u2014 "),oU=a("a"),GSr=o("FlaxDistilBertForMultipleChoice"),OSr=o(" (DistilBERT model)"),VSr=l(),uC=a("li"),s4e=a("strong"),XSr=o("electra"),zSr=o(" \u2014 "),rU=a("a"),QSr=o("FlaxElectraForMultipleChoice"),WSr=o(" (ELECTRA model)"),HSr=l(),bC=a("li"),l4e=a("strong"),USr=o("roberta"),JSr=o(" \u2014 "),tU=a("a"),YSr=o("FlaxRobertaForMultipleChoice"),KSr=o(" (RoBERTa model)"),ZSr=l(),vC=a("li"),i4e=a("strong"),eRr=o("roformer"),oRr=o(" \u2014 "),aU=a("a"),rRr=o("FlaxRoFormerForMultipleChoice"),tRr=o(" (RoFormer model)"),aRr=l(),FC=a("li"),d4e=a("strong"),nRr=o("xlm-roberta"),sRr=o(" \u2014 "),nU=a("a"),lRr=o("FlaxXLMRobertaForMultipleChoice"),iRr=o(" (XLM-RoBERTa model)"),dRr=l(),c4e=a("p"),cRr=o("Examples:"),fRr=l(),f(e7.$$.fragment),yPe=l(),yf=a("h2"),TC=a("a"),f4e=a("span"),f(o7.$$.fragment),mRr=l(),m4e=a("span"),gRr=o("FlaxAutoModelForNextSentencePrediction"),LPe=l(),Gr=a("div"),f(r7.$$.fragment),hRr=l(),Lf=a("p"),pRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sU=a("a"),_Rr=o("from_pretrained()"),uRr=o(" class method or the "),lU=a("a"),bRr=o("from_config()"),vRr=o(` class
method.`),FRr=l(),t7=a("p"),TRr=o("This class cannot be instantiated directly using "),g4e=a("code"),MRr=o("__init__()"),ERr=o(" (throws an error)."),CRr=l(),$t=a("div"),f(a7.$$.fragment),wRr=l(),h4e=a("p"),ARr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),yRr=l(),xf=a("p"),LRr=o(`Note:
Loading a model from its configuration file does `),p4e=a("strong"),xRr=o("not"),kRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=a("a"),SRr=o("from_pretrained()"),RRr=o(" to load the model weights."),BRr=l(),_4e=a("p"),PRr=o("Examples:"),$Rr=l(),f(n7.$$.fragment),IRr=l(),Io=a("div"),f(s7.$$.fragment),qRr=l(),u4e=a("p"),NRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jRr=l(),jn=a("p"),DRr=o("The model class to instantiate is selected based on the "),b4e=a("code"),GRr=o("model_type"),ORr=o(` property of the config object (either
passed as an argument or loaded from `),v4e=a("code"),VRr=o("pretrained_model_name_or_path"),XRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=a("code"),zRr=o("pretrained_model_name_or_path"),QRr=o(":"),WRr=l(),T4e=a("ul"),MC=a("li"),M4e=a("strong"),HRr=o("bert"),URr=o(" \u2014 "),dU=a("a"),JRr=o("FlaxBertForNextSentencePrediction"),YRr=o(" (BERT model)"),KRr=l(),E4e=a("p"),ZRr=o("Examples:"),eBr=l(),f(l7.$$.fragment),xPe=l(),kf=a("h2"),EC=a("a"),C4e=a("span"),f(i7.$$.fragment),oBr=l(),w4e=a("span"),rBr=o("FlaxAutoModelForImageClassification"),kPe=l(),Or=a("div"),f(d7.$$.fragment),tBr=l(),Sf=a("p"),aBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cU=a("a"),nBr=o("from_pretrained()"),sBr=o(" class method or the "),fU=a("a"),lBr=o("from_config()"),iBr=o(` class
method.`),dBr=l(),c7=a("p"),cBr=o("This class cannot be instantiated directly using "),A4e=a("code"),fBr=o("__init__()"),mBr=o(" (throws an error)."),gBr=l(),It=a("div"),f(f7.$$.fragment),hBr=l(),y4e=a("p"),pBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Br=l(),Rf=a("p"),uBr=o(`Note:
Loading a model from its configuration file does `),L4e=a("strong"),bBr=o("not"),vBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),FBr=o("from_pretrained()"),TBr=o(" to load the model weights."),MBr=l(),x4e=a("p"),EBr=o("Examples:"),CBr=l(),f(m7.$$.fragment),wBr=l(),qo=a("div"),f(g7.$$.fragment),ABr=l(),k4e=a("p"),yBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LBr=l(),Dn=a("p"),xBr=o("The model class to instantiate is selected based on the "),S4e=a("code"),kBr=o("model_type"),SBr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),RBr=o("pretrained_model_name_or_path"),BBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),PBr=o("pretrained_model_name_or_path"),$Br=o(":"),IBr=l(),h7=a("ul"),CC=a("li"),P4e=a("strong"),qBr=o("beit"),NBr=o(" \u2014 "),gU=a("a"),jBr=o("FlaxBeitForImageClassification"),DBr=o(" (BEiT model)"),GBr=l(),wC=a("li"),$4e=a("strong"),OBr=o("vit"),VBr=o(" \u2014 "),hU=a("a"),XBr=o("FlaxViTForImageClassification"),zBr=o(" (ViT model)"),QBr=l(),I4e=a("p"),WBr=o("Examples:"),HBr=l(),f(p7.$$.fragment),SPe=l(),Bf=a("h2"),AC=a("a"),q4e=a("span"),f(_7.$$.fragment),UBr=l(),N4e=a("span"),JBr=o("FlaxAutoModelForVision2Seq"),RPe=l(),Vr=a("div"),f(u7.$$.fragment),YBr=l(),Pf=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pU=a("a"),ZBr=o("from_pretrained()"),ePr=o(" class method or the "),_U=a("a"),oPr=o("from_config()"),rPr=o(` class
method.`),tPr=l(),b7=a("p"),aPr=o("This class cannot be instantiated directly using "),j4e=a("code"),nPr=o("__init__()"),sPr=o(" (throws an error)."),lPr=l(),qt=a("div"),f(v7.$$.fragment),iPr=l(),D4e=a("p"),dPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cPr=l(),$f=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),G4e=a("strong"),mPr=o("not"),gPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),hPr=o("from_pretrained()"),pPr=o(" to load the model weights."),_Pr=l(),O4e=a("p"),uPr=o("Examples:"),bPr=l(),f(F7.$$.fragment),vPr=l(),No=a("div"),f(T7.$$.fragment),FPr=l(),V4e=a("p"),TPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MPr=l(),Gn=a("p"),EPr=o("The model class to instantiate is selected based on the "),X4e=a("code"),CPr=o("model_type"),wPr=o(` property of the config object (either
passed as an argument or loaded from `),z4e=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=a("code"),LPr=o("pretrained_model_name_or_path"),xPr=o(":"),kPr=l(),W4e=a("ul"),yC=a("li"),H4e=a("strong"),SPr=o("vision-encoder-decoder"),RPr=o(" \u2014 "),bU=a("a"),BPr=o("FlaxVisionEncoderDecoderModel"),PPr=o(" (Vision Encoder decoder model)"),$Pr=l(),U4e=a("p"),IPr=o("Examples:"),qPr=l(),f(M7.$$.fragment),this.h()},l(c){const u=y6t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var E7=s(ce);Ce=n(E7,"A",{id:!0,class:!0,href:!0});var J4e=s(Ce);lo=n(J4e,"SPAN",{});var Y4e=s(lo);m(he.$$.fragment,Y4e),Y4e.forEach(t),J4e.forEach(t),Me=i(E7),Xo=n(E7,"SPAN",{});var jPr=s(Xo);Ni=r(jPr,"Auto Classes"),jPr.forEach(t),E7.forEach(t),Nf=i(c),fa=n(c,"P",{});var PPe=s(fa);ji=r(PPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(PPe,"CODE",{});var DPr=s(Di);Lw=r(DPr,"from_pretrained()"),DPr.forEach(t),jf=r(PPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),PPe.forEach(t),xe=i(c),co=n(c,"P",{});var LC=s(co);Gi=r(LC,"Instantiating one of "),On=n(LC,"A",{href:!0});var GPr=s(On);xw=r(GPr,"AutoConfig"),GPr.forEach(t),Vn=r(LC,", "),Xn=n(LC,"A",{href:!0});var OPr=s(Xn);kw=r(OPr,"AutoModel"),OPr.forEach(t),Oi=r(LC,`, and
`),zn=n(LC,"A",{href:!0});var VPr=s(zn);Sw=r(VPr,"AutoTokenizer"),VPr.forEach(t),Vi=r(LC," will directly create a class of the relevant architecture. For instance"),LC.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var $Pe=s(ue);T9=r($Pe,"will create a model that is an instance of "),Xi=n($Pe,"A",{href:!0});var XPr=s(Xi);M9=r(XPr,"BertModel"),XPr.forEach(t),E9=r($Pe,"."),$Pe.forEach(t),zo=i(c),Ga=n(c,"P",{});var IPe=s(Ga);C9=r(IPe,"There is one class of "),Gf=n(IPe,"CODE",{});var zPr=s(Gf);w9=r(zPr,"AutoModel"),zPr.forEach(t),zIe=r(IPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),IPe.forEach(t),RRe=i(c),zi=n(c,"H2",{class:!0});var qPe=s(zi);Of=n(qPe,"A",{id:!0,class:!0,href:!0});var QPr=s(Of);fY=n(QPr,"SPAN",{});var WPr=s(fY);m(Rw.$$.fragment,WPr),WPr.forEach(t),QPr.forEach(t),QIe=i(qPe),mY=n(qPe,"SPAN",{});var HPr=s(mY);WIe=r(HPr,"Extending the Auto Classes"),HPr.forEach(t),qPe.forEach(t),BRe=i(c),Qn=n(c,"P",{});var vU=s(Qn);HIe=r(vU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),gY=n(vU,"CODE",{});var UPr=s(gY);UIe=r(UPr,"NewModel"),UPr.forEach(t),JIe=r(vU,", make sure you have a "),hY=n(vU,"CODE",{});var JPr=s(hY);YIe=r(JPr,"NewModelConfig"),JPr.forEach(t),KIe=r(vU,` then you can add those to the auto
classes like this:`),vU.forEach(t),PRe=i(c),m(Bw.$$.fragment,c),$Re=i(c),A9=n(c,"P",{});var YPr=s(A9);ZIe=r(YPr,"You will then be able to use the auto classes like you would usually do!"),YPr.forEach(t),IRe=i(c),m(Vf.$$.fragment,c),qRe=i(c),Qi=n(c,"H2",{class:!0});var NPe=s(Qi);Xf=n(NPe,"A",{id:!0,class:!0,href:!0});var KPr=s(Xf);pY=n(KPr,"SPAN",{});var ZPr=s(pY);m(Pw.$$.fragment,ZPr),ZPr.forEach(t),KPr.forEach(t),eqe=i(NPe),_Y=n(NPe,"SPAN",{});var e$r=s(_Y);oqe=r(e$r,"AutoConfig"),e$r.forEach(t),NPe.forEach(t),NRe=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m($w.$$.fragment,Xs),rqe=i(Xs),Iw=n(Xs,"P",{});var jPe=s(Iw);tqe=r(jPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),y9=n(jPe,"A",{href:!0});var o$r=s(y9);aqe=r(o$r,"from_pretrained()"),o$r.forEach(t),nqe=r(jPe," class method."),jPe.forEach(t),sqe=i(Xs),qw=n(Xs,"P",{});var DPe=s(qw);lqe=r(DPe,"This class cannot be instantiated directly using "),uY=n(DPe,"CODE",{});var r$r=s(uY);iqe=r(r$r,"__init__()"),r$r.forEach(t),dqe=r(DPe," (throws an error)."),DPe.forEach(t),cqe=i(Xs),mo=n(Xs,"DIV",{class:!0});var ga=s(mo);m(Nw.$$.fragment,ga),fqe=i(ga),bY=n(ga,"P",{});var t$r=s(bY);mqe=r(t$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),t$r.forEach(t),gqe=i(ga),Wi=n(ga,"P",{});var FU=s(Wi);hqe=r(FU,"The configuration class to instantiate is selected based on the "),vY=n(FU,"CODE",{});var a$r=s(vY);pqe=r(a$r,"model_type"),a$r.forEach(t),_qe=r(FU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),FY=n(FU,"CODE",{});var n$r=s(FY);uqe=r(n$r,"pretrained_model_name_or_path"),n$r.forEach(t),bqe=r(FU,":"),FU.forEach(t),vqe=i(ga),v=n(ga,"UL",{});var F=s(v);zf=n(F,"LI",{});var K4e=s(zf);TY=n(K4e,"STRONG",{});var s$r=s(TY);Fqe=r(s$r,"albert"),s$r.forEach(t),Tqe=r(K4e," \u2014 "),L9=n(K4e,"A",{href:!0});var l$r=s(L9);Mqe=r(l$r,"AlbertConfig"),l$r.forEach(t),Eqe=r(K4e," (ALBERT model)"),K4e.forEach(t),Cqe=i(F),Qf=n(F,"LI",{});var Z4e=s(Qf);MY=n(Z4e,"STRONG",{});var i$r=s(MY);wqe=r(i$r,"bart"),i$r.forEach(t),Aqe=r(Z4e," \u2014 "),x9=n(Z4e,"A",{href:!0});var d$r=s(x9);yqe=r(d$r,"BartConfig"),d$r.forEach(t),Lqe=r(Z4e," (BART model)"),Z4e.forEach(t),xqe=i(F),Wf=n(F,"LI",{});var eEe=s(Wf);EY=n(eEe,"STRONG",{});var c$r=s(EY);kqe=r(c$r,"beit"),c$r.forEach(t),Sqe=r(eEe," \u2014 "),k9=n(eEe,"A",{href:!0});var f$r=s(k9);Rqe=r(f$r,"BeitConfig"),f$r.forEach(t),Bqe=r(eEe," (BEiT model)"),eEe.forEach(t),Pqe=i(F),Hf=n(F,"LI",{});var oEe=s(Hf);CY=n(oEe,"STRONG",{});var m$r=s(CY);$qe=r(m$r,"bert"),m$r.forEach(t),Iqe=r(oEe," \u2014 "),S9=n(oEe,"A",{href:!0});var g$r=s(S9);qqe=r(g$r,"BertConfig"),g$r.forEach(t),Nqe=r(oEe," (BERT model)"),oEe.forEach(t),jqe=i(F),Uf=n(F,"LI",{});var rEe=s(Uf);wY=n(rEe,"STRONG",{});var h$r=s(wY);Dqe=r(h$r,"bert-generation"),h$r.forEach(t),Gqe=r(rEe," \u2014 "),R9=n(rEe,"A",{href:!0});var p$r=s(R9);Oqe=r(p$r,"BertGenerationConfig"),p$r.forEach(t),Vqe=r(rEe," (Bert Generation model)"),rEe.forEach(t),Xqe=i(F),Jf=n(F,"LI",{});var tEe=s(Jf);AY=n(tEe,"STRONG",{});var _$r=s(AY);zqe=r(_$r,"big_bird"),_$r.forEach(t),Qqe=r(tEe," \u2014 "),B9=n(tEe,"A",{href:!0});var u$r=s(B9);Wqe=r(u$r,"BigBirdConfig"),u$r.forEach(t),Hqe=r(tEe," (BigBird model)"),tEe.forEach(t),Uqe=i(F),Yf=n(F,"LI",{});var aEe=s(Yf);yY=n(aEe,"STRONG",{});var b$r=s(yY);Jqe=r(b$r,"bigbird_pegasus"),b$r.forEach(t),Yqe=r(aEe," \u2014 "),P9=n(aEe,"A",{href:!0});var v$r=s(P9);Kqe=r(v$r,"BigBirdPegasusConfig"),v$r.forEach(t),Zqe=r(aEe," (BigBirdPegasus model)"),aEe.forEach(t),eNe=i(F),Kf=n(F,"LI",{});var nEe=s(Kf);LY=n(nEe,"STRONG",{});var F$r=s(LY);oNe=r(F$r,"blenderbot"),F$r.forEach(t),rNe=r(nEe," \u2014 "),$9=n(nEe,"A",{href:!0});var T$r=s($9);tNe=r(T$r,"BlenderbotConfig"),T$r.forEach(t),aNe=r(nEe," (Blenderbot model)"),nEe.forEach(t),nNe=i(F),Zf=n(F,"LI",{});var sEe=s(Zf);xY=n(sEe,"STRONG",{});var M$r=s(xY);sNe=r(M$r,"blenderbot-small"),M$r.forEach(t),lNe=r(sEe," \u2014 "),I9=n(sEe,"A",{href:!0});var E$r=s(I9);iNe=r(E$r,"BlenderbotSmallConfig"),E$r.forEach(t),dNe=r(sEe," (BlenderbotSmall model)"),sEe.forEach(t),cNe=i(F),em=n(F,"LI",{});var lEe=s(em);kY=n(lEe,"STRONG",{});var C$r=s(kY);fNe=r(C$r,"camembert"),C$r.forEach(t),mNe=r(lEe," \u2014 "),q9=n(lEe,"A",{href:!0});var w$r=s(q9);gNe=r(w$r,"CamembertConfig"),w$r.forEach(t),hNe=r(lEe," (CamemBERT model)"),lEe.forEach(t),pNe=i(F),om=n(F,"LI",{});var iEe=s(om);SY=n(iEe,"STRONG",{});var A$r=s(SY);_Ne=r(A$r,"canine"),A$r.forEach(t),uNe=r(iEe," \u2014 "),N9=n(iEe,"A",{href:!0});var y$r=s(N9);bNe=r(y$r,"CanineConfig"),y$r.forEach(t),vNe=r(iEe," (Canine model)"),iEe.forEach(t),FNe=i(F),rm=n(F,"LI",{});var dEe=s(rm);RY=n(dEe,"STRONG",{});var L$r=s(RY);TNe=r(L$r,"clip"),L$r.forEach(t),MNe=r(dEe," \u2014 "),j9=n(dEe,"A",{href:!0});var x$r=s(j9);ENe=r(x$r,"CLIPConfig"),x$r.forEach(t),CNe=r(dEe," (CLIP model)"),dEe.forEach(t),wNe=i(F),tm=n(F,"LI",{});var cEe=s(tm);BY=n(cEe,"STRONG",{});var k$r=s(BY);ANe=r(k$r,"convbert"),k$r.forEach(t),yNe=r(cEe," \u2014 "),D9=n(cEe,"A",{href:!0});var S$r=s(D9);LNe=r(S$r,"ConvBertConfig"),S$r.forEach(t),xNe=r(cEe," (ConvBERT model)"),cEe.forEach(t),kNe=i(F),am=n(F,"LI",{});var fEe=s(am);PY=n(fEe,"STRONG",{});var R$r=s(PY);SNe=r(R$r,"convnext"),R$r.forEach(t),RNe=r(fEe," \u2014 "),G9=n(fEe,"A",{href:!0});var B$r=s(G9);BNe=r(B$r,"ConvNextConfig"),B$r.forEach(t),PNe=r(fEe," (ConvNext model)"),fEe.forEach(t),$Ne=i(F),nm=n(F,"LI",{});var mEe=s(nm);$Y=n(mEe,"STRONG",{});var P$r=s($Y);INe=r(P$r,"ctrl"),P$r.forEach(t),qNe=r(mEe," \u2014 "),O9=n(mEe,"A",{href:!0});var $$r=s(O9);NNe=r($$r,"CTRLConfig"),$$r.forEach(t),jNe=r(mEe," (CTRL model)"),mEe.forEach(t),DNe=i(F),sm=n(F,"LI",{});var gEe=s(sm);IY=n(gEe,"STRONG",{});var I$r=s(IY);GNe=r(I$r,"data2vec-audio"),I$r.forEach(t),ONe=r(gEe," \u2014 "),V9=n(gEe,"A",{href:!0});var q$r=s(V9);VNe=r(q$r,"Data2VecAudioConfig"),q$r.forEach(t),XNe=r(gEe," (Data2VecAudio model)"),gEe.forEach(t),zNe=i(F),lm=n(F,"LI",{});var hEe=s(lm);qY=n(hEe,"STRONG",{});var N$r=s(qY);QNe=r(N$r,"data2vec-text"),N$r.forEach(t),WNe=r(hEe," \u2014 "),X9=n(hEe,"A",{href:!0});var j$r=s(X9);HNe=r(j$r,"Data2VecTextConfig"),j$r.forEach(t),UNe=r(hEe," (Data2VecText model)"),hEe.forEach(t),JNe=i(F),im=n(F,"LI",{});var pEe=s(im);NY=n(pEe,"STRONG",{});var D$r=s(NY);YNe=r(D$r,"data2vec-vision"),D$r.forEach(t),KNe=r(pEe," \u2014 "),z9=n(pEe,"A",{href:!0});var G$r=s(z9);ZNe=r(G$r,"Data2VecVisionConfig"),G$r.forEach(t),eje=r(pEe," (Data2VecVision model)"),pEe.forEach(t),oje=i(F),dm=n(F,"LI",{});var _Ee=s(dm);jY=n(_Ee,"STRONG",{});var O$r=s(jY);rje=r(O$r,"deberta"),O$r.forEach(t),tje=r(_Ee," \u2014 "),Q9=n(_Ee,"A",{href:!0});var V$r=s(Q9);aje=r(V$r,"DebertaConfig"),V$r.forEach(t),nje=r(_Ee," (DeBERTa model)"),_Ee.forEach(t),sje=i(F),cm=n(F,"LI",{});var uEe=s(cm);DY=n(uEe,"STRONG",{});var X$r=s(DY);lje=r(X$r,"deberta-v2"),X$r.forEach(t),ije=r(uEe," \u2014 "),W9=n(uEe,"A",{href:!0});var z$r=s(W9);dje=r(z$r,"DebertaV2Config"),z$r.forEach(t),cje=r(uEe," (DeBERTa-v2 model)"),uEe.forEach(t),fje=i(F),fm=n(F,"LI",{});var bEe=s(fm);GY=n(bEe,"STRONG",{});var Q$r=s(GY);mje=r(Q$r,"decision_transformer"),Q$r.forEach(t),gje=r(bEe," \u2014 "),H9=n(bEe,"A",{href:!0});var W$r=s(H9);hje=r(W$r,"DecisionTransformerConfig"),W$r.forEach(t),pje=r(bEe," (Decision Transformer model)"),bEe.forEach(t),_je=i(F),mm=n(F,"LI",{});var vEe=s(mm);OY=n(vEe,"STRONG",{});var H$r=s(OY);uje=r(H$r,"deit"),H$r.forEach(t),bje=r(vEe," \u2014 "),U9=n(vEe,"A",{href:!0});var U$r=s(U9);vje=r(U$r,"DeiTConfig"),U$r.forEach(t),Fje=r(vEe," (DeiT model)"),vEe.forEach(t),Tje=i(F),gm=n(F,"LI",{});var FEe=s(gm);VY=n(FEe,"STRONG",{});var J$r=s(VY);Mje=r(J$r,"detr"),J$r.forEach(t),Eje=r(FEe," \u2014 "),J9=n(FEe,"A",{href:!0});var Y$r=s(J9);Cje=r(Y$r,"DetrConfig"),Y$r.forEach(t),wje=r(FEe," (DETR model)"),FEe.forEach(t),Aje=i(F),hm=n(F,"LI",{});var TEe=s(hm);XY=n(TEe,"STRONG",{});var K$r=s(XY);yje=r(K$r,"distilbert"),K$r.forEach(t),Lje=r(TEe," \u2014 "),Y9=n(TEe,"A",{href:!0});var Z$r=s(Y9);xje=r(Z$r,"DistilBertConfig"),Z$r.forEach(t),kje=r(TEe," (DistilBERT model)"),TEe.forEach(t),Sje=i(F),pm=n(F,"LI",{});var MEe=s(pm);zY=n(MEe,"STRONG",{});var eIr=s(zY);Rje=r(eIr,"dpr"),eIr.forEach(t),Bje=r(MEe," \u2014 "),K9=n(MEe,"A",{href:!0});var oIr=s(K9);Pje=r(oIr,"DPRConfig"),oIr.forEach(t),$je=r(MEe," (DPR model)"),MEe.forEach(t),Ije=i(F),_m=n(F,"LI",{});var EEe=s(_m);QY=n(EEe,"STRONG",{});var rIr=s(QY);qje=r(rIr,"dpt"),rIr.forEach(t),Nje=r(EEe," \u2014 "),Z9=n(EEe,"A",{href:!0});var tIr=s(Z9);jje=r(tIr,"DPTConfig"),tIr.forEach(t),Dje=r(EEe," (DPT model)"),EEe.forEach(t),Gje=i(F),um=n(F,"LI",{});var CEe=s(um);WY=n(CEe,"STRONG",{});var aIr=s(WY);Oje=r(aIr,"electra"),aIr.forEach(t),Vje=r(CEe," \u2014 "),ex=n(CEe,"A",{href:!0});var nIr=s(ex);Xje=r(nIr,"ElectraConfig"),nIr.forEach(t),zje=r(CEe," (ELECTRA model)"),CEe.forEach(t),Qje=i(F),bm=n(F,"LI",{});var wEe=s(bm);HY=n(wEe,"STRONG",{});var sIr=s(HY);Wje=r(sIr,"encoder-decoder"),sIr.forEach(t),Hje=r(wEe," \u2014 "),ox=n(wEe,"A",{href:!0});var lIr=s(ox);Uje=r(lIr,"EncoderDecoderConfig"),lIr.forEach(t),Jje=r(wEe," (Encoder decoder model)"),wEe.forEach(t),Yje=i(F),vm=n(F,"LI",{});var AEe=s(vm);UY=n(AEe,"STRONG",{});var iIr=s(UY);Kje=r(iIr,"flaubert"),iIr.forEach(t),Zje=r(AEe," \u2014 "),rx=n(AEe,"A",{href:!0});var dIr=s(rx);eDe=r(dIr,"FlaubertConfig"),dIr.forEach(t),oDe=r(AEe," (FlauBERT model)"),AEe.forEach(t),rDe=i(F),Fm=n(F,"LI",{});var yEe=s(Fm);JY=n(yEe,"STRONG",{});var cIr=s(JY);tDe=r(cIr,"fnet"),cIr.forEach(t),aDe=r(yEe," \u2014 "),tx=n(yEe,"A",{href:!0});var fIr=s(tx);nDe=r(fIr,"FNetConfig"),fIr.forEach(t),sDe=r(yEe," (FNet model)"),yEe.forEach(t),lDe=i(F),Tm=n(F,"LI",{});var LEe=s(Tm);YY=n(LEe,"STRONG",{});var mIr=s(YY);iDe=r(mIr,"fsmt"),mIr.forEach(t),dDe=r(LEe," \u2014 "),ax=n(LEe,"A",{href:!0});var gIr=s(ax);cDe=r(gIr,"FSMTConfig"),gIr.forEach(t),fDe=r(LEe," (FairSeq Machine-Translation model)"),LEe.forEach(t),mDe=i(F),Mm=n(F,"LI",{});var xEe=s(Mm);KY=n(xEe,"STRONG",{});var hIr=s(KY);gDe=r(hIr,"funnel"),hIr.forEach(t),hDe=r(xEe," \u2014 "),nx=n(xEe,"A",{href:!0});var pIr=s(nx);pDe=r(pIr,"FunnelConfig"),pIr.forEach(t),_De=r(xEe," (Funnel Transformer model)"),xEe.forEach(t),uDe=i(F),Em=n(F,"LI",{});var kEe=s(Em);ZY=n(kEe,"STRONG",{});var _Ir=s(ZY);bDe=r(_Ir,"glpn"),_Ir.forEach(t),vDe=r(kEe," \u2014 "),sx=n(kEe,"A",{href:!0});var uIr=s(sx);FDe=r(uIr,"GLPNConfig"),uIr.forEach(t),TDe=r(kEe," (GLPN model)"),kEe.forEach(t),MDe=i(F),Cm=n(F,"LI",{});var SEe=s(Cm);eK=n(SEe,"STRONG",{});var bIr=s(eK);EDe=r(bIr,"gpt2"),bIr.forEach(t),CDe=r(SEe," \u2014 "),lx=n(SEe,"A",{href:!0});var vIr=s(lx);wDe=r(vIr,"GPT2Config"),vIr.forEach(t),ADe=r(SEe," (OpenAI GPT-2 model)"),SEe.forEach(t),yDe=i(F),wm=n(F,"LI",{});var REe=s(wm);oK=n(REe,"STRONG",{});var FIr=s(oK);LDe=r(FIr,"gpt_neo"),FIr.forEach(t),xDe=r(REe," \u2014 "),ix=n(REe,"A",{href:!0});var TIr=s(ix);kDe=r(TIr,"GPTNeoConfig"),TIr.forEach(t),SDe=r(REe," (GPT Neo model)"),REe.forEach(t),RDe=i(F),Am=n(F,"LI",{});var BEe=s(Am);rK=n(BEe,"STRONG",{});var MIr=s(rK);BDe=r(MIr,"gptj"),MIr.forEach(t),PDe=r(BEe," \u2014 "),dx=n(BEe,"A",{href:!0});var EIr=s(dx);$De=r(EIr,"GPTJConfig"),EIr.forEach(t),IDe=r(BEe," (GPT-J model)"),BEe.forEach(t),qDe=i(F),ym=n(F,"LI",{});var PEe=s(ym);tK=n(PEe,"STRONG",{});var CIr=s(tK);NDe=r(CIr,"hubert"),CIr.forEach(t),jDe=r(PEe," \u2014 "),cx=n(PEe,"A",{href:!0});var wIr=s(cx);DDe=r(wIr,"HubertConfig"),wIr.forEach(t),GDe=r(PEe," (Hubert model)"),PEe.forEach(t),ODe=i(F),Lm=n(F,"LI",{});var $Ee=s(Lm);aK=n($Ee,"STRONG",{});var AIr=s(aK);VDe=r(AIr,"ibert"),AIr.forEach(t),XDe=r($Ee," \u2014 "),fx=n($Ee,"A",{href:!0});var yIr=s(fx);zDe=r(yIr,"IBertConfig"),yIr.forEach(t),QDe=r($Ee," (I-BERT model)"),$Ee.forEach(t),WDe=i(F),xm=n(F,"LI",{});var IEe=s(xm);nK=n(IEe,"STRONG",{});var LIr=s(nK);HDe=r(LIr,"imagegpt"),LIr.forEach(t),UDe=r(IEe," \u2014 "),mx=n(IEe,"A",{href:!0});var xIr=s(mx);JDe=r(xIr,"ImageGPTConfig"),xIr.forEach(t),YDe=r(IEe," (ImageGPT model)"),IEe.forEach(t),KDe=i(F),km=n(F,"LI",{});var qEe=s(km);sK=n(qEe,"STRONG",{});var kIr=s(sK);ZDe=r(kIr,"layoutlm"),kIr.forEach(t),eGe=r(qEe," \u2014 "),gx=n(qEe,"A",{href:!0});var SIr=s(gx);oGe=r(SIr,"LayoutLMConfig"),SIr.forEach(t),rGe=r(qEe," (LayoutLM model)"),qEe.forEach(t),tGe=i(F),Sm=n(F,"LI",{});var NEe=s(Sm);lK=n(NEe,"STRONG",{});var RIr=s(lK);aGe=r(RIr,"layoutlmv2"),RIr.forEach(t),nGe=r(NEe," \u2014 "),hx=n(NEe,"A",{href:!0});var BIr=s(hx);sGe=r(BIr,"LayoutLMv2Config"),BIr.forEach(t),lGe=r(NEe," (LayoutLMv2 model)"),NEe.forEach(t),iGe=i(F),Rm=n(F,"LI",{});var jEe=s(Rm);iK=n(jEe,"STRONG",{});var PIr=s(iK);dGe=r(PIr,"led"),PIr.forEach(t),cGe=r(jEe," \u2014 "),px=n(jEe,"A",{href:!0});var $Ir=s(px);fGe=r($Ir,"LEDConfig"),$Ir.forEach(t),mGe=r(jEe," (LED model)"),jEe.forEach(t),gGe=i(F),Bm=n(F,"LI",{});var DEe=s(Bm);dK=n(DEe,"STRONG",{});var IIr=s(dK);hGe=r(IIr,"longformer"),IIr.forEach(t),pGe=r(DEe," \u2014 "),_x=n(DEe,"A",{href:!0});var qIr=s(_x);_Ge=r(qIr,"LongformerConfig"),qIr.forEach(t),uGe=r(DEe," (Longformer model)"),DEe.forEach(t),bGe=i(F),Pm=n(F,"LI",{});var GEe=s(Pm);cK=n(GEe,"STRONG",{});var NIr=s(cK);vGe=r(NIr,"luke"),NIr.forEach(t),FGe=r(GEe," \u2014 "),ux=n(GEe,"A",{href:!0});var jIr=s(ux);TGe=r(jIr,"LukeConfig"),jIr.forEach(t),MGe=r(GEe," (LUKE model)"),GEe.forEach(t),EGe=i(F),$m=n(F,"LI",{});var OEe=s($m);fK=n(OEe,"STRONG",{});var DIr=s(fK);CGe=r(DIr,"lxmert"),DIr.forEach(t),wGe=r(OEe," \u2014 "),bx=n(OEe,"A",{href:!0});var GIr=s(bx);AGe=r(GIr,"LxmertConfig"),GIr.forEach(t),yGe=r(OEe," (LXMERT model)"),OEe.forEach(t),LGe=i(F),Im=n(F,"LI",{});var VEe=s(Im);mK=n(VEe,"STRONG",{});var OIr=s(mK);xGe=r(OIr,"m2m_100"),OIr.forEach(t),kGe=r(VEe," \u2014 "),vx=n(VEe,"A",{href:!0});var VIr=s(vx);SGe=r(VIr,"M2M100Config"),VIr.forEach(t),RGe=r(VEe," (M2M100 model)"),VEe.forEach(t),BGe=i(F),qm=n(F,"LI",{});var XEe=s(qm);gK=n(XEe,"STRONG",{});var XIr=s(gK);PGe=r(XIr,"marian"),XIr.forEach(t),$Ge=r(XEe," \u2014 "),Fx=n(XEe,"A",{href:!0});var zIr=s(Fx);IGe=r(zIr,"MarianConfig"),zIr.forEach(t),qGe=r(XEe," (Marian model)"),XEe.forEach(t),NGe=i(F),Nm=n(F,"LI",{});var zEe=s(Nm);hK=n(zEe,"STRONG",{});var QIr=s(hK);jGe=r(QIr,"maskformer"),QIr.forEach(t),DGe=r(zEe," \u2014 "),Tx=n(zEe,"A",{href:!0});var WIr=s(Tx);GGe=r(WIr,"MaskFormerConfig"),WIr.forEach(t),OGe=r(zEe," (MaskFormer model)"),zEe.forEach(t),VGe=i(F),jm=n(F,"LI",{});var QEe=s(jm);pK=n(QEe,"STRONG",{});var HIr=s(pK);XGe=r(HIr,"mbart"),HIr.forEach(t),zGe=r(QEe," \u2014 "),Mx=n(QEe,"A",{href:!0});var UIr=s(Mx);QGe=r(UIr,"MBartConfig"),UIr.forEach(t),WGe=r(QEe," (mBART model)"),QEe.forEach(t),HGe=i(F),Dm=n(F,"LI",{});var WEe=s(Dm);_K=n(WEe,"STRONG",{});var JIr=s(_K);UGe=r(JIr,"megatron-bert"),JIr.forEach(t),JGe=r(WEe," \u2014 "),Ex=n(WEe,"A",{href:!0});var YIr=s(Ex);YGe=r(YIr,"MegatronBertConfig"),YIr.forEach(t),KGe=r(WEe," (MegatronBert model)"),WEe.forEach(t),ZGe=i(F),Gm=n(F,"LI",{});var HEe=s(Gm);uK=n(HEe,"STRONG",{});var KIr=s(uK);eOe=r(KIr,"mobilebert"),KIr.forEach(t),oOe=r(HEe," \u2014 "),Cx=n(HEe,"A",{href:!0});var ZIr=s(Cx);rOe=r(ZIr,"MobileBertConfig"),ZIr.forEach(t),tOe=r(HEe," (MobileBERT model)"),HEe.forEach(t),aOe=i(F),Om=n(F,"LI",{});var UEe=s(Om);bK=n(UEe,"STRONG",{});var eqr=s(bK);nOe=r(eqr,"mpnet"),eqr.forEach(t),sOe=r(UEe," \u2014 "),wx=n(UEe,"A",{href:!0});var oqr=s(wx);lOe=r(oqr,"MPNetConfig"),oqr.forEach(t),iOe=r(UEe," (MPNet model)"),UEe.forEach(t),dOe=i(F),Vm=n(F,"LI",{});var JEe=s(Vm);vK=n(JEe,"STRONG",{});var rqr=s(vK);cOe=r(rqr,"mt5"),rqr.forEach(t),fOe=r(JEe," \u2014 "),Ax=n(JEe,"A",{href:!0});var tqr=s(Ax);mOe=r(tqr,"MT5Config"),tqr.forEach(t),gOe=r(JEe," (mT5 model)"),JEe.forEach(t),hOe=i(F),Xm=n(F,"LI",{});var YEe=s(Xm);FK=n(YEe,"STRONG",{});var aqr=s(FK);pOe=r(aqr,"nystromformer"),aqr.forEach(t),_Oe=r(YEe," \u2014 "),yx=n(YEe,"A",{href:!0});var nqr=s(yx);uOe=r(nqr,"NystromformerConfig"),nqr.forEach(t),bOe=r(YEe," (Nystromformer model)"),YEe.forEach(t),vOe=i(F),zm=n(F,"LI",{});var KEe=s(zm);TK=n(KEe,"STRONG",{});var sqr=s(TK);FOe=r(sqr,"openai-gpt"),sqr.forEach(t),TOe=r(KEe," \u2014 "),Lx=n(KEe,"A",{href:!0});var lqr=s(Lx);MOe=r(lqr,"OpenAIGPTConfig"),lqr.forEach(t),EOe=r(KEe," (OpenAI GPT model)"),KEe.forEach(t),COe=i(F),Qm=n(F,"LI",{});var ZEe=s(Qm);MK=n(ZEe,"STRONG",{});var iqr=s(MK);wOe=r(iqr,"pegasus"),iqr.forEach(t),AOe=r(ZEe," \u2014 "),xx=n(ZEe,"A",{href:!0});var dqr=s(xx);yOe=r(dqr,"PegasusConfig"),dqr.forEach(t),LOe=r(ZEe," (Pegasus model)"),ZEe.forEach(t),xOe=i(F),Wm=n(F,"LI",{});var e5e=s(Wm);EK=n(e5e,"STRONG",{});var cqr=s(EK);kOe=r(cqr,"perceiver"),cqr.forEach(t),SOe=r(e5e," \u2014 "),kx=n(e5e,"A",{href:!0});var fqr=s(kx);ROe=r(fqr,"PerceiverConfig"),fqr.forEach(t),BOe=r(e5e," (Perceiver model)"),e5e.forEach(t),POe=i(F),Hm=n(F,"LI",{});var o5e=s(Hm);CK=n(o5e,"STRONG",{});var mqr=s(CK);$Oe=r(mqr,"plbart"),mqr.forEach(t),IOe=r(o5e," \u2014 "),Sx=n(o5e,"A",{href:!0});var gqr=s(Sx);qOe=r(gqr,"PLBartConfig"),gqr.forEach(t),NOe=r(o5e," (PLBart model)"),o5e.forEach(t),jOe=i(F),Um=n(F,"LI",{});var r5e=s(Um);wK=n(r5e,"STRONG",{});var hqr=s(wK);DOe=r(hqr,"poolformer"),hqr.forEach(t),GOe=r(r5e," \u2014 "),Rx=n(r5e,"A",{href:!0});var pqr=s(Rx);OOe=r(pqr,"PoolFormerConfig"),pqr.forEach(t),VOe=r(r5e," (PoolFormer model)"),r5e.forEach(t),XOe=i(F),Jm=n(F,"LI",{});var t5e=s(Jm);AK=n(t5e,"STRONG",{});var _qr=s(AK);zOe=r(_qr,"prophetnet"),_qr.forEach(t),QOe=r(t5e," \u2014 "),Bx=n(t5e,"A",{href:!0});var uqr=s(Bx);WOe=r(uqr,"ProphetNetConfig"),uqr.forEach(t),HOe=r(t5e," (ProphetNet model)"),t5e.forEach(t),UOe=i(F),Ym=n(F,"LI",{});var a5e=s(Ym);yK=n(a5e,"STRONG",{});var bqr=s(yK);JOe=r(bqr,"qdqbert"),bqr.forEach(t),YOe=r(a5e," \u2014 "),Px=n(a5e,"A",{href:!0});var vqr=s(Px);KOe=r(vqr,"QDQBertConfig"),vqr.forEach(t),ZOe=r(a5e," (QDQBert model)"),a5e.forEach(t),eVe=i(F),Km=n(F,"LI",{});var n5e=s(Km);LK=n(n5e,"STRONG",{});var Fqr=s(LK);oVe=r(Fqr,"rag"),Fqr.forEach(t),rVe=r(n5e," \u2014 "),$x=n(n5e,"A",{href:!0});var Tqr=s($x);tVe=r(Tqr,"RagConfig"),Tqr.forEach(t),aVe=r(n5e," (RAG model)"),n5e.forEach(t),nVe=i(F),Zm=n(F,"LI",{});var s5e=s(Zm);xK=n(s5e,"STRONG",{});var Mqr=s(xK);sVe=r(Mqr,"realm"),Mqr.forEach(t),lVe=r(s5e," \u2014 "),Ix=n(s5e,"A",{href:!0});var Eqr=s(Ix);iVe=r(Eqr,"RealmConfig"),Eqr.forEach(t),dVe=r(s5e," (Realm model)"),s5e.forEach(t),cVe=i(F),eg=n(F,"LI",{});var l5e=s(eg);kK=n(l5e,"STRONG",{});var Cqr=s(kK);fVe=r(Cqr,"reformer"),Cqr.forEach(t),mVe=r(l5e," \u2014 "),qx=n(l5e,"A",{href:!0});var wqr=s(qx);gVe=r(wqr,"ReformerConfig"),wqr.forEach(t),hVe=r(l5e," (Reformer model)"),l5e.forEach(t),pVe=i(F),og=n(F,"LI",{});var i5e=s(og);SK=n(i5e,"STRONG",{});var Aqr=s(SK);_Ve=r(Aqr,"regnet"),Aqr.forEach(t),uVe=r(i5e," \u2014 "),Nx=n(i5e,"A",{href:!0});var yqr=s(Nx);bVe=r(yqr,"RegNetConfig"),yqr.forEach(t),vVe=r(i5e," (RegNet model)"),i5e.forEach(t),FVe=i(F),rg=n(F,"LI",{});var d5e=s(rg);RK=n(d5e,"STRONG",{});var Lqr=s(RK);TVe=r(Lqr,"rembert"),Lqr.forEach(t),MVe=r(d5e," \u2014 "),jx=n(d5e,"A",{href:!0});var xqr=s(jx);EVe=r(xqr,"RemBertConfig"),xqr.forEach(t),CVe=r(d5e," (RemBERT model)"),d5e.forEach(t),wVe=i(F),tg=n(F,"LI",{});var c5e=s(tg);BK=n(c5e,"STRONG",{});var kqr=s(BK);AVe=r(kqr,"resnet"),kqr.forEach(t),yVe=r(c5e," \u2014 "),Dx=n(c5e,"A",{href:!0});var Sqr=s(Dx);LVe=r(Sqr,"ResNetConfig"),Sqr.forEach(t),xVe=r(c5e," (ResNet model)"),c5e.forEach(t),kVe=i(F),ag=n(F,"LI",{});var f5e=s(ag);PK=n(f5e,"STRONG",{});var Rqr=s(PK);SVe=r(Rqr,"retribert"),Rqr.forEach(t),RVe=r(f5e," \u2014 "),Gx=n(f5e,"A",{href:!0});var Bqr=s(Gx);BVe=r(Bqr,"RetriBertConfig"),Bqr.forEach(t),PVe=r(f5e," (RetriBERT model)"),f5e.forEach(t),$Ve=i(F),ng=n(F,"LI",{});var m5e=s(ng);$K=n(m5e,"STRONG",{});var Pqr=s($K);IVe=r(Pqr,"roberta"),Pqr.forEach(t),qVe=r(m5e," \u2014 "),Ox=n(m5e,"A",{href:!0});var $qr=s(Ox);NVe=r($qr,"RobertaConfig"),$qr.forEach(t),jVe=r(m5e," (RoBERTa model)"),m5e.forEach(t),DVe=i(F),sg=n(F,"LI",{});var g5e=s(sg);IK=n(g5e,"STRONG",{});var Iqr=s(IK);GVe=r(Iqr,"roformer"),Iqr.forEach(t),OVe=r(g5e," \u2014 "),Vx=n(g5e,"A",{href:!0});var qqr=s(Vx);VVe=r(qqr,"RoFormerConfig"),qqr.forEach(t),XVe=r(g5e," (RoFormer model)"),g5e.forEach(t),zVe=i(F),lg=n(F,"LI",{});var h5e=s(lg);qK=n(h5e,"STRONG",{});var Nqr=s(qK);QVe=r(Nqr,"segformer"),Nqr.forEach(t),WVe=r(h5e," \u2014 "),Xx=n(h5e,"A",{href:!0});var jqr=s(Xx);HVe=r(jqr,"SegformerConfig"),jqr.forEach(t),UVe=r(h5e," (SegFormer model)"),h5e.forEach(t),JVe=i(F),ig=n(F,"LI",{});var p5e=s(ig);NK=n(p5e,"STRONG",{});var Dqr=s(NK);YVe=r(Dqr,"sew"),Dqr.forEach(t),KVe=r(p5e," \u2014 "),zx=n(p5e,"A",{href:!0});var Gqr=s(zx);ZVe=r(Gqr,"SEWConfig"),Gqr.forEach(t),eXe=r(p5e," (SEW model)"),p5e.forEach(t),oXe=i(F),dg=n(F,"LI",{});var _5e=s(dg);jK=n(_5e,"STRONG",{});var Oqr=s(jK);rXe=r(Oqr,"sew-d"),Oqr.forEach(t),tXe=r(_5e," \u2014 "),Qx=n(_5e,"A",{href:!0});var Vqr=s(Qx);aXe=r(Vqr,"SEWDConfig"),Vqr.forEach(t),nXe=r(_5e," (SEW-D model)"),_5e.forEach(t),sXe=i(F),cg=n(F,"LI",{});var u5e=s(cg);DK=n(u5e,"STRONG",{});var Xqr=s(DK);lXe=r(Xqr,"speech-encoder-decoder"),Xqr.forEach(t),iXe=r(u5e," \u2014 "),Wx=n(u5e,"A",{href:!0});var zqr=s(Wx);dXe=r(zqr,"SpeechEncoderDecoderConfig"),zqr.forEach(t),cXe=r(u5e," (Speech Encoder decoder model)"),u5e.forEach(t),fXe=i(F),fg=n(F,"LI",{});var b5e=s(fg);GK=n(b5e,"STRONG",{});var Qqr=s(GK);mXe=r(Qqr,"speech_to_text"),Qqr.forEach(t),gXe=r(b5e," \u2014 "),Hx=n(b5e,"A",{href:!0});var Wqr=s(Hx);hXe=r(Wqr,"Speech2TextConfig"),Wqr.forEach(t),pXe=r(b5e," (Speech2Text model)"),b5e.forEach(t),_Xe=i(F),mg=n(F,"LI",{});var v5e=s(mg);OK=n(v5e,"STRONG",{});var Hqr=s(OK);uXe=r(Hqr,"speech_to_text_2"),Hqr.forEach(t),bXe=r(v5e," \u2014 "),Ux=n(v5e,"A",{href:!0});var Uqr=s(Ux);vXe=r(Uqr,"Speech2Text2Config"),Uqr.forEach(t),FXe=r(v5e," (Speech2Text2 model)"),v5e.forEach(t),TXe=i(F),gg=n(F,"LI",{});var F5e=s(gg);VK=n(F5e,"STRONG",{});var Jqr=s(VK);MXe=r(Jqr,"splinter"),Jqr.forEach(t),EXe=r(F5e," \u2014 "),Jx=n(F5e,"A",{href:!0});var Yqr=s(Jx);CXe=r(Yqr,"SplinterConfig"),Yqr.forEach(t),wXe=r(F5e," (Splinter model)"),F5e.forEach(t),AXe=i(F),hg=n(F,"LI",{});var T5e=s(hg);XK=n(T5e,"STRONG",{});var Kqr=s(XK);yXe=r(Kqr,"squeezebert"),Kqr.forEach(t),LXe=r(T5e," \u2014 "),Yx=n(T5e,"A",{href:!0});var Zqr=s(Yx);xXe=r(Zqr,"SqueezeBertConfig"),Zqr.forEach(t),kXe=r(T5e," (SqueezeBERT model)"),T5e.forEach(t),SXe=i(F),pg=n(F,"LI",{});var M5e=s(pg);zK=n(M5e,"STRONG",{});var eNr=s(zK);RXe=r(eNr,"swin"),eNr.forEach(t),BXe=r(M5e," \u2014 "),Kx=n(M5e,"A",{href:!0});var oNr=s(Kx);PXe=r(oNr,"SwinConfig"),oNr.forEach(t),$Xe=r(M5e," (Swin model)"),M5e.forEach(t),IXe=i(F),_g=n(F,"LI",{});var E5e=s(_g);QK=n(E5e,"STRONG",{});var rNr=s(QK);qXe=r(rNr,"t5"),rNr.forEach(t),NXe=r(E5e," \u2014 "),Zx=n(E5e,"A",{href:!0});var tNr=s(Zx);jXe=r(tNr,"T5Config"),tNr.forEach(t),DXe=r(E5e," (T5 model)"),E5e.forEach(t),GXe=i(F),ug=n(F,"LI",{});var C5e=s(ug);WK=n(C5e,"STRONG",{});var aNr=s(WK);OXe=r(aNr,"tapas"),aNr.forEach(t),VXe=r(C5e," \u2014 "),ek=n(C5e,"A",{href:!0});var nNr=s(ek);XXe=r(nNr,"TapasConfig"),nNr.forEach(t),zXe=r(C5e," (TAPAS model)"),C5e.forEach(t),QXe=i(F),bg=n(F,"LI",{});var w5e=s(bg);HK=n(w5e,"STRONG",{});var sNr=s(HK);WXe=r(sNr,"tapex"),sNr.forEach(t),HXe=r(w5e," \u2014 "),ok=n(w5e,"A",{href:!0});var lNr=s(ok);UXe=r(lNr,"BartConfig"),lNr.forEach(t),JXe=r(w5e," (TAPEX model)"),w5e.forEach(t),YXe=i(F),vg=n(F,"LI",{});var A5e=s(vg);UK=n(A5e,"STRONG",{});var iNr=s(UK);KXe=r(iNr,"transfo-xl"),iNr.forEach(t),ZXe=r(A5e," \u2014 "),rk=n(A5e,"A",{href:!0});var dNr=s(rk);eze=r(dNr,"TransfoXLConfig"),dNr.forEach(t),oze=r(A5e," (Transformer-XL model)"),A5e.forEach(t),rze=i(F),Fg=n(F,"LI",{});var y5e=s(Fg);JK=n(y5e,"STRONG",{});var cNr=s(JK);tze=r(cNr,"trocr"),cNr.forEach(t),aze=r(y5e," \u2014 "),tk=n(y5e,"A",{href:!0});var fNr=s(tk);nze=r(fNr,"TrOCRConfig"),fNr.forEach(t),sze=r(y5e," (TrOCR model)"),y5e.forEach(t),lze=i(F),Tg=n(F,"LI",{});var L5e=s(Tg);YK=n(L5e,"STRONG",{});var mNr=s(YK);ize=r(mNr,"unispeech"),mNr.forEach(t),dze=r(L5e," \u2014 "),ak=n(L5e,"A",{href:!0});var gNr=s(ak);cze=r(gNr,"UniSpeechConfig"),gNr.forEach(t),fze=r(L5e," (UniSpeech model)"),L5e.forEach(t),mze=i(F),Mg=n(F,"LI",{});var x5e=s(Mg);KK=n(x5e,"STRONG",{});var hNr=s(KK);gze=r(hNr,"unispeech-sat"),hNr.forEach(t),hze=r(x5e," \u2014 "),nk=n(x5e,"A",{href:!0});var pNr=s(nk);pze=r(pNr,"UniSpeechSatConfig"),pNr.forEach(t),_ze=r(x5e," (UniSpeechSat model)"),x5e.forEach(t),uze=i(F),Eg=n(F,"LI",{});var k5e=s(Eg);ZK=n(k5e,"STRONG",{});var _Nr=s(ZK);bze=r(_Nr,"van"),_Nr.forEach(t),vze=r(k5e," \u2014 "),sk=n(k5e,"A",{href:!0});var uNr=s(sk);Fze=r(uNr,"VanConfig"),uNr.forEach(t),Tze=r(k5e," (VAN model)"),k5e.forEach(t),Mze=i(F),Cg=n(F,"LI",{});var S5e=s(Cg);eZ=n(S5e,"STRONG",{});var bNr=s(eZ);Eze=r(bNr,"vilt"),bNr.forEach(t),Cze=r(S5e," \u2014 "),lk=n(S5e,"A",{href:!0});var vNr=s(lk);wze=r(vNr,"ViltConfig"),vNr.forEach(t),Aze=r(S5e," (ViLT model)"),S5e.forEach(t),yze=i(F),wg=n(F,"LI",{});var R5e=s(wg);oZ=n(R5e,"STRONG",{});var FNr=s(oZ);Lze=r(FNr,"vision-encoder-decoder"),FNr.forEach(t),xze=r(R5e," \u2014 "),ik=n(R5e,"A",{href:!0});var TNr=s(ik);kze=r(TNr,"VisionEncoderDecoderConfig"),TNr.forEach(t),Sze=r(R5e," (Vision Encoder decoder model)"),R5e.forEach(t),Rze=i(F),Ag=n(F,"LI",{});var B5e=s(Ag);rZ=n(B5e,"STRONG",{});var MNr=s(rZ);Bze=r(MNr,"vision-text-dual-encoder"),MNr.forEach(t),Pze=r(B5e," \u2014 "),dk=n(B5e,"A",{href:!0});var ENr=s(dk);$ze=r(ENr,"VisionTextDualEncoderConfig"),ENr.forEach(t),Ize=r(B5e," (VisionTextDualEncoder model)"),B5e.forEach(t),qze=i(F),yg=n(F,"LI",{});var P5e=s(yg);tZ=n(P5e,"STRONG",{});var CNr=s(tZ);Nze=r(CNr,"visual_bert"),CNr.forEach(t),jze=r(P5e," \u2014 "),ck=n(P5e,"A",{href:!0});var wNr=s(ck);Dze=r(wNr,"VisualBertConfig"),wNr.forEach(t),Gze=r(P5e," (VisualBert model)"),P5e.forEach(t),Oze=i(F),Lg=n(F,"LI",{});var $5e=s(Lg);aZ=n($5e,"STRONG",{});var ANr=s(aZ);Vze=r(ANr,"vit"),ANr.forEach(t),Xze=r($5e," \u2014 "),fk=n($5e,"A",{href:!0});var yNr=s(fk);zze=r(yNr,"ViTConfig"),yNr.forEach(t),Qze=r($5e," (ViT model)"),$5e.forEach(t),Wze=i(F),xg=n(F,"LI",{});var I5e=s(xg);nZ=n(I5e,"STRONG",{});var LNr=s(nZ);Hze=r(LNr,"vit_mae"),LNr.forEach(t),Uze=r(I5e," \u2014 "),mk=n(I5e,"A",{href:!0});var xNr=s(mk);Jze=r(xNr,"ViTMAEConfig"),xNr.forEach(t),Yze=r(I5e," (ViTMAE model)"),I5e.forEach(t),Kze=i(F),kg=n(F,"LI",{});var q5e=s(kg);sZ=n(q5e,"STRONG",{});var kNr=s(sZ);Zze=r(kNr,"wav2vec2"),kNr.forEach(t),eQe=r(q5e," \u2014 "),gk=n(q5e,"A",{href:!0});var SNr=s(gk);oQe=r(SNr,"Wav2Vec2Config"),SNr.forEach(t),rQe=r(q5e," (Wav2Vec2 model)"),q5e.forEach(t),tQe=i(F),Sg=n(F,"LI",{});var N5e=s(Sg);lZ=n(N5e,"STRONG",{});var RNr=s(lZ);aQe=r(RNr,"wavlm"),RNr.forEach(t),nQe=r(N5e," \u2014 "),hk=n(N5e,"A",{href:!0});var BNr=s(hk);sQe=r(BNr,"WavLMConfig"),BNr.forEach(t),lQe=r(N5e," (WavLM model)"),N5e.forEach(t),iQe=i(F),Rg=n(F,"LI",{});var j5e=s(Rg);iZ=n(j5e,"STRONG",{});var PNr=s(iZ);dQe=r(PNr,"xglm"),PNr.forEach(t),cQe=r(j5e," \u2014 "),pk=n(j5e,"A",{href:!0});var $Nr=s(pk);fQe=r($Nr,"XGLMConfig"),$Nr.forEach(t),mQe=r(j5e," (XGLM model)"),j5e.forEach(t),gQe=i(F),Bg=n(F,"LI",{});var D5e=s(Bg);dZ=n(D5e,"STRONG",{});var INr=s(dZ);hQe=r(INr,"xlm"),INr.forEach(t),pQe=r(D5e," \u2014 "),_k=n(D5e,"A",{href:!0});var qNr=s(_k);_Qe=r(qNr,"XLMConfig"),qNr.forEach(t),uQe=r(D5e," (XLM model)"),D5e.forEach(t),bQe=i(F),Pg=n(F,"LI",{});var G5e=s(Pg);cZ=n(G5e,"STRONG",{});var NNr=s(cZ);vQe=r(NNr,"xlm-prophetnet"),NNr.forEach(t),FQe=r(G5e," \u2014 "),uk=n(G5e,"A",{href:!0});var jNr=s(uk);TQe=r(jNr,"XLMProphetNetConfig"),jNr.forEach(t),MQe=r(G5e," (XLMProphetNet model)"),G5e.forEach(t),EQe=i(F),$g=n(F,"LI",{});var O5e=s($g);fZ=n(O5e,"STRONG",{});var DNr=s(fZ);CQe=r(DNr,"xlm-roberta"),DNr.forEach(t),wQe=r(O5e," \u2014 "),bk=n(O5e,"A",{href:!0});var GNr=s(bk);AQe=r(GNr,"XLMRobertaConfig"),GNr.forEach(t),yQe=r(O5e," (XLM-RoBERTa model)"),O5e.forEach(t),LQe=i(F),Ig=n(F,"LI",{});var V5e=s(Ig);mZ=n(V5e,"STRONG",{});var ONr=s(mZ);xQe=r(ONr,"xlm-roberta-xl"),ONr.forEach(t),kQe=r(V5e," \u2014 "),vk=n(V5e,"A",{href:!0});var VNr=s(vk);SQe=r(VNr,"XLMRobertaXLConfig"),VNr.forEach(t),RQe=r(V5e," (XLM-RoBERTa-XL model)"),V5e.forEach(t),BQe=i(F),qg=n(F,"LI",{});var X5e=s(qg);gZ=n(X5e,"STRONG",{});var XNr=s(gZ);PQe=r(XNr,"xlnet"),XNr.forEach(t),$Qe=r(X5e," \u2014 "),Fk=n(X5e,"A",{href:!0});var zNr=s(Fk);IQe=r(zNr,"XLNetConfig"),zNr.forEach(t),qQe=r(X5e," (XLNet model)"),X5e.forEach(t),NQe=i(F),Ng=n(F,"LI",{});var z5e=s(Ng);hZ=n(z5e,"STRONG",{});var QNr=s(hZ);jQe=r(QNr,"yoso"),QNr.forEach(t),DQe=r(z5e," \u2014 "),Tk=n(z5e,"A",{href:!0});var WNr=s(Tk);GQe=r(WNr,"YosoConfig"),WNr.forEach(t),OQe=r(z5e," (YOSO model)"),z5e.forEach(t),F.forEach(t),VQe=i(ga),pZ=n(ga,"P",{});var HNr=s(pZ);XQe=r(HNr,"Examples:"),HNr.forEach(t),zQe=i(ga),m(jw.$$.fragment,ga),ga.forEach(t),QQe=i(Xs),jg=n(Xs,"DIV",{class:!0});var GPe=s(jg);m(Dw.$$.fragment,GPe),WQe=i(GPe),_Z=n(GPe,"P",{});var UNr=s(_Z);HQe=r(UNr,"Register a new configuration for this class."),UNr.forEach(t),GPe.forEach(t),Xs.forEach(t),jRe=i(c),Hi=n(c,"H2",{class:!0});var OPe=s(Hi);Dg=n(OPe,"A",{id:!0,class:!0,href:!0});var JNr=s(Dg);uZ=n(JNr,"SPAN",{});var YNr=s(uZ);m(Gw.$$.fragment,YNr),YNr.forEach(t),JNr.forEach(t),UQe=i(OPe),bZ=n(OPe,"SPAN",{});var KNr=s(bZ);JQe=r(KNr,"AutoTokenizer"),KNr.forEach(t),OPe.forEach(t),DRe=i(c),Wo=n(c,"DIV",{class:!0});var zs=s(Wo);m(Ow.$$.fragment,zs),YQe=i(zs),Vw=n(zs,"P",{});var VPe=s(Vw);KQe=r(VPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Mk=n(VPe,"A",{href:!0});var ZNr=s(Mk);ZQe=r(ZNr,"AutoTokenizer.from_pretrained()"),ZNr.forEach(t),eWe=r(VPe," class method."),VPe.forEach(t),oWe=i(zs),Xw=n(zs,"P",{});var XPe=s(Xw);rWe=r(XPe,"This class cannot be instantiated directly using "),vZ=n(XPe,"CODE",{});var ejr=s(vZ);tWe=r(ejr,"__init__()"),ejr.forEach(t),aWe=r(XPe," (throws an error)."),XPe.forEach(t),nWe=i(zs),go=n(zs,"DIV",{class:!0});var ha=s(go);m(zw.$$.fragment,ha),sWe=i(ha),FZ=n(ha,"P",{});var ojr=s(FZ);lWe=r(ojr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ojr.forEach(t),iWe=i(ha),Oa=n(ha,"P",{});var xC=s(Oa);dWe=r(xC,"The tokenizer class to instantiate is selected based on the "),TZ=n(xC,"CODE",{});var rjr=s(TZ);cWe=r(rjr,"model_type"),rjr.forEach(t),fWe=r(xC,` property of the config object (either
passed as an argument or loaded from `),MZ=n(xC,"CODE",{});var tjr=s(MZ);mWe=r(tjr,"pretrained_model_name_or_path"),tjr.forEach(t),gWe=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),EZ=n(xC,"CODE",{});var ajr=s(EZ);hWe=r(ajr,"pretrained_model_name_or_path"),ajr.forEach(t),pWe=r(xC,":"),xC.forEach(t),_We=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var C7=s(Wn);CZ=n(C7,"STRONG",{});var njr=s(CZ);uWe=r(njr,"albert"),njr.forEach(t),bWe=r(C7," \u2014 "),Ek=n(C7,"A",{href:!0});var sjr=s(Ek);vWe=r(sjr,"AlbertTokenizer"),sjr.forEach(t),FWe=r(C7," or "),Ck=n(C7,"A",{href:!0});var ljr=s(Ck);TWe=r(ljr,"AlbertTokenizerFast"),ljr.forEach(t),MWe=r(C7," (ALBERT model)"),C7.forEach(t),EWe=i(w),Hn=n(w,"LI",{});var w7=s(Hn);wZ=n(w7,"STRONG",{});var ijr=s(wZ);CWe=r(ijr,"bart"),ijr.forEach(t),wWe=r(w7," \u2014 "),wk=n(w7,"A",{href:!0});var djr=s(wk);AWe=r(djr,"BartTokenizer"),djr.forEach(t),yWe=r(w7," or "),Ak=n(w7,"A",{href:!0});var cjr=s(Ak);LWe=r(cjr,"BartTokenizerFast"),cjr.forEach(t),xWe=r(w7," (BART model)"),w7.forEach(t),kWe=i(w),Un=n(w,"LI",{});var A7=s(Un);AZ=n(A7,"STRONG",{});var fjr=s(AZ);SWe=r(fjr,"barthez"),fjr.forEach(t),RWe=r(A7," \u2014 "),yk=n(A7,"A",{href:!0});var mjr=s(yk);BWe=r(mjr,"BarthezTokenizer"),mjr.forEach(t),PWe=r(A7," or "),Lk=n(A7,"A",{href:!0});var gjr=s(Lk);$We=r(gjr,"BarthezTokenizerFast"),gjr.forEach(t),IWe=r(A7," (BARThez model)"),A7.forEach(t),qWe=i(w),Gg=n(w,"LI",{});var Q5e=s(Gg);yZ=n(Q5e,"STRONG",{});var hjr=s(yZ);NWe=r(hjr,"bartpho"),hjr.forEach(t),jWe=r(Q5e," \u2014 "),xk=n(Q5e,"A",{href:!0});var pjr=s(xk);DWe=r(pjr,"BartphoTokenizer"),pjr.forEach(t),GWe=r(Q5e," (BARTpho model)"),Q5e.forEach(t),OWe=i(w),Jn=n(w,"LI",{});var y7=s(Jn);LZ=n(y7,"STRONG",{});var _jr=s(LZ);VWe=r(_jr,"bert"),_jr.forEach(t),XWe=r(y7," \u2014 "),kk=n(y7,"A",{href:!0});var ujr=s(kk);zWe=r(ujr,"BertTokenizer"),ujr.forEach(t),QWe=r(y7," or "),Sk=n(y7,"A",{href:!0});var bjr=s(Sk);WWe=r(bjr,"BertTokenizerFast"),bjr.forEach(t),HWe=r(y7," (BERT model)"),y7.forEach(t),UWe=i(w),Og=n(w,"LI",{});var W5e=s(Og);xZ=n(W5e,"STRONG",{});var vjr=s(xZ);JWe=r(vjr,"bert-generation"),vjr.forEach(t),YWe=r(W5e," \u2014 "),Rk=n(W5e,"A",{href:!0});var Fjr=s(Rk);KWe=r(Fjr,"BertGenerationTokenizer"),Fjr.forEach(t),ZWe=r(W5e," (Bert Generation model)"),W5e.forEach(t),eHe=i(w),Vg=n(w,"LI",{});var H5e=s(Vg);kZ=n(H5e,"STRONG",{});var Tjr=s(kZ);oHe=r(Tjr,"bert-japanese"),Tjr.forEach(t),rHe=r(H5e," \u2014 "),Bk=n(H5e,"A",{href:!0});var Mjr=s(Bk);tHe=r(Mjr,"BertJapaneseTokenizer"),Mjr.forEach(t),aHe=r(H5e," (BertJapanese model)"),H5e.forEach(t),nHe=i(w),Xg=n(w,"LI",{});var U5e=s(Xg);SZ=n(U5e,"STRONG",{});var Ejr=s(SZ);sHe=r(Ejr,"bertweet"),Ejr.forEach(t),lHe=r(U5e," \u2014 "),Pk=n(U5e,"A",{href:!0});var Cjr=s(Pk);iHe=r(Cjr,"BertweetTokenizer"),Cjr.forEach(t),dHe=r(U5e," (Bertweet model)"),U5e.forEach(t),cHe=i(w),Yn=n(w,"LI",{});var L7=s(Yn);RZ=n(L7,"STRONG",{});var wjr=s(RZ);fHe=r(wjr,"big_bird"),wjr.forEach(t),mHe=r(L7," \u2014 "),$k=n(L7,"A",{href:!0});var Ajr=s($k);gHe=r(Ajr,"BigBirdTokenizer"),Ajr.forEach(t),hHe=r(L7," or "),Ik=n(L7,"A",{href:!0});var yjr=s(Ik);pHe=r(yjr,"BigBirdTokenizerFast"),yjr.forEach(t),_He=r(L7," (BigBird model)"),L7.forEach(t),uHe=i(w),Kn=n(w,"LI",{});var x7=s(Kn);BZ=n(x7,"STRONG",{});var Ljr=s(BZ);bHe=r(Ljr,"bigbird_pegasus"),Ljr.forEach(t),vHe=r(x7," \u2014 "),qk=n(x7,"A",{href:!0});var xjr=s(qk);FHe=r(xjr,"PegasusTokenizer"),xjr.forEach(t),THe=r(x7," or "),Nk=n(x7,"A",{href:!0});var kjr=s(Nk);MHe=r(kjr,"PegasusTokenizerFast"),kjr.forEach(t),EHe=r(x7," (BigBirdPegasus model)"),x7.forEach(t),CHe=i(w),Zn=n(w,"LI",{});var k7=s(Zn);PZ=n(k7,"STRONG",{});var Sjr=s(PZ);wHe=r(Sjr,"blenderbot"),Sjr.forEach(t),AHe=r(k7," \u2014 "),jk=n(k7,"A",{href:!0});var Rjr=s(jk);yHe=r(Rjr,"BlenderbotTokenizer"),Rjr.forEach(t),LHe=r(k7," or "),Dk=n(k7,"A",{href:!0});var Bjr=s(Dk);xHe=r(Bjr,"BlenderbotTokenizerFast"),Bjr.forEach(t),kHe=r(k7," (Blenderbot model)"),k7.forEach(t),SHe=i(w),zg=n(w,"LI",{});var J5e=s(zg);$Z=n(J5e,"STRONG",{});var Pjr=s($Z);RHe=r(Pjr,"blenderbot-small"),Pjr.forEach(t),BHe=r(J5e," \u2014 "),Gk=n(J5e,"A",{href:!0});var $jr=s(Gk);PHe=r($jr,"BlenderbotSmallTokenizer"),$jr.forEach(t),$He=r(J5e," (BlenderbotSmall model)"),J5e.forEach(t),IHe=i(w),Qg=n(w,"LI",{});var Y5e=s(Qg);IZ=n(Y5e,"STRONG",{});var Ijr=s(IZ);qHe=r(Ijr,"byt5"),Ijr.forEach(t),NHe=r(Y5e," \u2014 "),Ok=n(Y5e,"A",{href:!0});var qjr=s(Ok);jHe=r(qjr,"ByT5Tokenizer"),qjr.forEach(t),DHe=r(Y5e," (ByT5 model)"),Y5e.forEach(t),GHe=i(w),es=n(w,"LI",{});var S7=s(es);qZ=n(S7,"STRONG",{});var Njr=s(qZ);OHe=r(Njr,"camembert"),Njr.forEach(t),VHe=r(S7," \u2014 "),Vk=n(S7,"A",{href:!0});var jjr=s(Vk);XHe=r(jjr,"CamembertTokenizer"),jjr.forEach(t),zHe=r(S7," or "),Xk=n(S7,"A",{href:!0});var Djr=s(Xk);QHe=r(Djr,"CamembertTokenizerFast"),Djr.forEach(t),WHe=r(S7," (CamemBERT model)"),S7.forEach(t),HHe=i(w),Wg=n(w,"LI",{});var K5e=s(Wg);NZ=n(K5e,"STRONG",{});var Gjr=s(NZ);UHe=r(Gjr,"canine"),Gjr.forEach(t),JHe=r(K5e," \u2014 "),zk=n(K5e,"A",{href:!0});var Ojr=s(zk);YHe=r(Ojr,"CanineTokenizer"),Ojr.forEach(t),KHe=r(K5e," (Canine model)"),K5e.forEach(t),ZHe=i(w),os=n(w,"LI",{});var R7=s(os);jZ=n(R7,"STRONG",{});var Vjr=s(jZ);eUe=r(Vjr,"clip"),Vjr.forEach(t),oUe=r(R7," \u2014 "),Qk=n(R7,"A",{href:!0});var Xjr=s(Qk);rUe=r(Xjr,"CLIPTokenizer"),Xjr.forEach(t),tUe=r(R7," or "),Wk=n(R7,"A",{href:!0});var zjr=s(Wk);aUe=r(zjr,"CLIPTokenizerFast"),zjr.forEach(t),nUe=r(R7," (CLIP model)"),R7.forEach(t),sUe=i(w),rs=n(w,"LI",{});var B7=s(rs);DZ=n(B7,"STRONG",{});var Qjr=s(DZ);lUe=r(Qjr,"convbert"),Qjr.forEach(t),iUe=r(B7," \u2014 "),Hk=n(B7,"A",{href:!0});var Wjr=s(Hk);dUe=r(Wjr,"ConvBertTokenizer"),Wjr.forEach(t),cUe=r(B7," or "),Uk=n(B7,"A",{href:!0});var Hjr=s(Uk);fUe=r(Hjr,"ConvBertTokenizerFast"),Hjr.forEach(t),mUe=r(B7," (ConvBERT model)"),B7.forEach(t),gUe=i(w),ts=n(w,"LI",{});var P7=s(ts);GZ=n(P7,"STRONG",{});var Ujr=s(GZ);hUe=r(Ujr,"cpm"),Ujr.forEach(t),pUe=r(P7," \u2014 "),Jk=n(P7,"A",{href:!0});var Jjr=s(Jk);_Ue=r(Jjr,"CpmTokenizer"),Jjr.forEach(t),uUe=r(P7," or "),OZ=n(P7,"CODE",{});var Yjr=s(OZ);bUe=r(Yjr,"CpmTokenizerFast"),Yjr.forEach(t),vUe=r(P7," (CPM model)"),P7.forEach(t),FUe=i(w),Hg=n(w,"LI",{});var Z5e=s(Hg);VZ=n(Z5e,"STRONG",{});var Kjr=s(VZ);TUe=r(Kjr,"ctrl"),Kjr.forEach(t),MUe=r(Z5e," \u2014 "),Yk=n(Z5e,"A",{href:!0});var Zjr=s(Yk);EUe=r(Zjr,"CTRLTokenizer"),Zjr.forEach(t),CUe=r(Z5e," (CTRL model)"),Z5e.forEach(t),wUe=i(w),as=n(w,"LI",{});var $7=s(as);XZ=n($7,"STRONG",{});var eDr=s(XZ);AUe=r(eDr,"deberta"),eDr.forEach(t),yUe=r($7," \u2014 "),Kk=n($7,"A",{href:!0});var oDr=s(Kk);LUe=r(oDr,"DebertaTokenizer"),oDr.forEach(t),xUe=r($7," or "),Zk=n($7,"A",{href:!0});var rDr=s(Zk);kUe=r(rDr,"DebertaTokenizerFast"),rDr.forEach(t),SUe=r($7," (DeBERTa model)"),$7.forEach(t),RUe=i(w),ns=n(w,"LI",{});var I7=s(ns);zZ=n(I7,"STRONG",{});var tDr=s(zZ);BUe=r(tDr,"deberta-v2"),tDr.forEach(t),PUe=r(I7," \u2014 "),eS=n(I7,"A",{href:!0});var aDr=s(eS);$Ue=r(aDr,"DebertaV2Tokenizer"),aDr.forEach(t),IUe=r(I7," or "),oS=n(I7,"A",{href:!0});var nDr=s(oS);qUe=r(nDr,"DebertaV2TokenizerFast"),nDr.forEach(t),NUe=r(I7," (DeBERTa-v2 model)"),I7.forEach(t),jUe=i(w),ss=n(w,"LI",{});var q7=s(ss);QZ=n(q7,"STRONG",{});var sDr=s(QZ);DUe=r(sDr,"distilbert"),sDr.forEach(t),GUe=r(q7," \u2014 "),rS=n(q7,"A",{href:!0});var lDr=s(rS);OUe=r(lDr,"DistilBertTokenizer"),lDr.forEach(t),VUe=r(q7," or "),tS=n(q7,"A",{href:!0});var iDr=s(tS);XUe=r(iDr,"DistilBertTokenizerFast"),iDr.forEach(t),zUe=r(q7," (DistilBERT model)"),q7.forEach(t),QUe=i(w),ls=n(w,"LI",{});var N7=s(ls);WZ=n(N7,"STRONG",{});var dDr=s(WZ);WUe=r(dDr,"dpr"),dDr.forEach(t),HUe=r(N7," \u2014 "),aS=n(N7,"A",{href:!0});var cDr=s(aS);UUe=r(cDr,"DPRQuestionEncoderTokenizer"),cDr.forEach(t),JUe=r(N7," or "),nS=n(N7,"A",{href:!0});var fDr=s(nS);YUe=r(fDr,"DPRQuestionEncoderTokenizerFast"),fDr.forEach(t),KUe=r(N7," (DPR model)"),N7.forEach(t),ZUe=i(w),is=n(w,"LI",{});var j7=s(is);HZ=n(j7,"STRONG",{});var mDr=s(HZ);eJe=r(mDr,"electra"),mDr.forEach(t),oJe=r(j7," \u2014 "),sS=n(j7,"A",{href:!0});var gDr=s(sS);rJe=r(gDr,"ElectraTokenizer"),gDr.forEach(t),tJe=r(j7," or "),lS=n(j7,"A",{href:!0});var hDr=s(lS);aJe=r(hDr,"ElectraTokenizerFast"),hDr.forEach(t),nJe=r(j7," (ELECTRA model)"),j7.forEach(t),sJe=i(w),Ug=n(w,"LI",{});var e3e=s(Ug);UZ=n(e3e,"STRONG",{});var pDr=s(UZ);lJe=r(pDr,"flaubert"),pDr.forEach(t),iJe=r(e3e," \u2014 "),iS=n(e3e,"A",{href:!0});var _Dr=s(iS);dJe=r(_Dr,"FlaubertTokenizer"),_Dr.forEach(t),cJe=r(e3e," (FlauBERT model)"),e3e.forEach(t),fJe=i(w),ds=n(w,"LI",{});var D7=s(ds);JZ=n(D7,"STRONG",{});var uDr=s(JZ);mJe=r(uDr,"fnet"),uDr.forEach(t),gJe=r(D7," \u2014 "),dS=n(D7,"A",{href:!0});var bDr=s(dS);hJe=r(bDr,"FNetTokenizer"),bDr.forEach(t),pJe=r(D7," or "),cS=n(D7,"A",{href:!0});var vDr=s(cS);_Je=r(vDr,"FNetTokenizerFast"),vDr.forEach(t),uJe=r(D7," (FNet model)"),D7.forEach(t),bJe=i(w),Jg=n(w,"LI",{});var o3e=s(Jg);YZ=n(o3e,"STRONG",{});var FDr=s(YZ);vJe=r(FDr,"fsmt"),FDr.forEach(t),FJe=r(o3e," \u2014 "),fS=n(o3e,"A",{href:!0});var TDr=s(fS);TJe=r(TDr,"FSMTTokenizer"),TDr.forEach(t),MJe=r(o3e," (FairSeq Machine-Translation model)"),o3e.forEach(t),EJe=i(w),cs=n(w,"LI",{});var G7=s(cs);KZ=n(G7,"STRONG",{});var MDr=s(KZ);CJe=r(MDr,"funnel"),MDr.forEach(t),wJe=r(G7," \u2014 "),mS=n(G7,"A",{href:!0});var EDr=s(mS);AJe=r(EDr,"FunnelTokenizer"),EDr.forEach(t),yJe=r(G7," or "),gS=n(G7,"A",{href:!0});var CDr=s(gS);LJe=r(CDr,"FunnelTokenizerFast"),CDr.forEach(t),xJe=r(G7," (Funnel Transformer model)"),G7.forEach(t),kJe=i(w),fs=n(w,"LI",{});var O7=s(fs);ZZ=n(O7,"STRONG",{});var wDr=s(ZZ);SJe=r(wDr,"gpt2"),wDr.forEach(t),RJe=r(O7," \u2014 "),hS=n(O7,"A",{href:!0});var ADr=s(hS);BJe=r(ADr,"GPT2Tokenizer"),ADr.forEach(t),PJe=r(O7," or "),pS=n(O7,"A",{href:!0});var yDr=s(pS);$Je=r(yDr,"GPT2TokenizerFast"),yDr.forEach(t),IJe=r(O7," (OpenAI GPT-2 model)"),O7.forEach(t),qJe=i(w),ms=n(w,"LI",{});var V7=s(ms);eee=n(V7,"STRONG",{});var LDr=s(eee);NJe=r(LDr,"gpt_neo"),LDr.forEach(t),jJe=r(V7," \u2014 "),_S=n(V7,"A",{href:!0});var xDr=s(_S);DJe=r(xDr,"GPT2Tokenizer"),xDr.forEach(t),GJe=r(V7," or "),uS=n(V7,"A",{href:!0});var kDr=s(uS);OJe=r(kDr,"GPT2TokenizerFast"),kDr.forEach(t),VJe=r(V7," (GPT Neo model)"),V7.forEach(t),XJe=i(w),gs=n(w,"LI",{});var X7=s(gs);oee=n(X7,"STRONG",{});var SDr=s(oee);zJe=r(SDr,"herbert"),SDr.forEach(t),QJe=r(X7," \u2014 "),bS=n(X7,"A",{href:!0});var RDr=s(bS);WJe=r(RDr,"HerbertTokenizer"),RDr.forEach(t),HJe=r(X7," or "),vS=n(X7,"A",{href:!0});var BDr=s(vS);UJe=r(BDr,"HerbertTokenizerFast"),BDr.forEach(t),JJe=r(X7," (HerBERT model)"),X7.forEach(t),YJe=i(w),Yg=n(w,"LI",{});var r3e=s(Yg);ree=n(r3e,"STRONG",{});var PDr=s(ree);KJe=r(PDr,"hubert"),PDr.forEach(t),ZJe=r(r3e," \u2014 "),FS=n(r3e,"A",{href:!0});var $Dr=s(FS);eYe=r($Dr,"Wav2Vec2CTCTokenizer"),$Dr.forEach(t),oYe=r(r3e," (Hubert model)"),r3e.forEach(t),rYe=i(w),hs=n(w,"LI",{});var z7=s(hs);tee=n(z7,"STRONG",{});var IDr=s(tee);tYe=r(IDr,"ibert"),IDr.forEach(t),aYe=r(z7," \u2014 "),TS=n(z7,"A",{href:!0});var qDr=s(TS);nYe=r(qDr,"RobertaTokenizer"),qDr.forEach(t),sYe=r(z7," or "),MS=n(z7,"A",{href:!0});var NDr=s(MS);lYe=r(NDr,"RobertaTokenizerFast"),NDr.forEach(t),iYe=r(z7," (I-BERT model)"),z7.forEach(t),dYe=i(w),ps=n(w,"LI",{});var Q7=s(ps);aee=n(Q7,"STRONG",{});var jDr=s(aee);cYe=r(jDr,"layoutlm"),jDr.forEach(t),fYe=r(Q7," \u2014 "),ES=n(Q7,"A",{href:!0});var DDr=s(ES);mYe=r(DDr,"LayoutLMTokenizer"),DDr.forEach(t),gYe=r(Q7," or "),CS=n(Q7,"A",{href:!0});var GDr=s(CS);hYe=r(GDr,"LayoutLMTokenizerFast"),GDr.forEach(t),pYe=r(Q7," (LayoutLM model)"),Q7.forEach(t),_Ye=i(w),_s=n(w,"LI",{});var W7=s(_s);nee=n(W7,"STRONG",{});var ODr=s(nee);uYe=r(ODr,"layoutlmv2"),ODr.forEach(t),bYe=r(W7," \u2014 "),wS=n(W7,"A",{href:!0});var VDr=s(wS);vYe=r(VDr,"LayoutLMv2Tokenizer"),VDr.forEach(t),FYe=r(W7," or "),AS=n(W7,"A",{href:!0});var XDr=s(AS);TYe=r(XDr,"LayoutLMv2TokenizerFast"),XDr.forEach(t),MYe=r(W7," (LayoutLMv2 model)"),W7.forEach(t),EYe=i(w),us=n(w,"LI",{});var H7=s(us);see=n(H7,"STRONG",{});var zDr=s(see);CYe=r(zDr,"layoutxlm"),zDr.forEach(t),wYe=r(H7," \u2014 "),yS=n(H7,"A",{href:!0});var QDr=s(yS);AYe=r(QDr,"LayoutXLMTokenizer"),QDr.forEach(t),yYe=r(H7," or "),LS=n(H7,"A",{href:!0});var WDr=s(LS);LYe=r(WDr,"LayoutXLMTokenizerFast"),WDr.forEach(t),xYe=r(H7," (LayoutXLM model)"),H7.forEach(t),kYe=i(w),bs=n(w,"LI",{});var U7=s(bs);lee=n(U7,"STRONG",{});var HDr=s(lee);SYe=r(HDr,"led"),HDr.forEach(t),RYe=r(U7," \u2014 "),xS=n(U7,"A",{href:!0});var UDr=s(xS);BYe=r(UDr,"LEDTokenizer"),UDr.forEach(t),PYe=r(U7," or "),kS=n(U7,"A",{href:!0});var JDr=s(kS);$Ye=r(JDr,"LEDTokenizerFast"),JDr.forEach(t),IYe=r(U7," (LED model)"),U7.forEach(t),qYe=i(w),vs=n(w,"LI",{});var J7=s(vs);iee=n(J7,"STRONG",{});var YDr=s(iee);NYe=r(YDr,"longformer"),YDr.forEach(t),jYe=r(J7," \u2014 "),SS=n(J7,"A",{href:!0});var KDr=s(SS);DYe=r(KDr,"LongformerTokenizer"),KDr.forEach(t),GYe=r(J7," or "),RS=n(J7,"A",{href:!0});var ZDr=s(RS);OYe=r(ZDr,"LongformerTokenizerFast"),ZDr.forEach(t),VYe=r(J7," (Longformer model)"),J7.forEach(t),XYe=i(w),Kg=n(w,"LI",{});var t3e=s(Kg);dee=n(t3e,"STRONG",{});var eGr=s(dee);zYe=r(eGr,"luke"),eGr.forEach(t),QYe=r(t3e," \u2014 "),BS=n(t3e,"A",{href:!0});var oGr=s(BS);WYe=r(oGr,"LukeTokenizer"),oGr.forEach(t),HYe=r(t3e," (LUKE model)"),t3e.forEach(t),UYe=i(w),Fs=n(w,"LI",{});var Y7=s(Fs);cee=n(Y7,"STRONG",{});var rGr=s(cee);JYe=r(rGr,"lxmert"),rGr.forEach(t),YYe=r(Y7," \u2014 "),PS=n(Y7,"A",{href:!0});var tGr=s(PS);KYe=r(tGr,"LxmertTokenizer"),tGr.forEach(t),ZYe=r(Y7," or "),$S=n(Y7,"A",{href:!0});var aGr=s($S);eKe=r(aGr,"LxmertTokenizerFast"),aGr.forEach(t),oKe=r(Y7," (LXMERT model)"),Y7.forEach(t),rKe=i(w),Zg=n(w,"LI",{});var a3e=s(Zg);fee=n(a3e,"STRONG",{});var nGr=s(fee);tKe=r(nGr,"m2m_100"),nGr.forEach(t),aKe=r(a3e," \u2014 "),IS=n(a3e,"A",{href:!0});var sGr=s(IS);nKe=r(sGr,"M2M100Tokenizer"),sGr.forEach(t),sKe=r(a3e," (M2M100 model)"),a3e.forEach(t),lKe=i(w),eh=n(w,"LI",{});var n3e=s(eh);mee=n(n3e,"STRONG",{});var lGr=s(mee);iKe=r(lGr,"marian"),lGr.forEach(t),dKe=r(n3e," \u2014 "),qS=n(n3e,"A",{href:!0});var iGr=s(qS);cKe=r(iGr,"MarianTokenizer"),iGr.forEach(t),fKe=r(n3e," (Marian model)"),n3e.forEach(t),mKe=i(w),Ts=n(w,"LI",{});var K7=s(Ts);gee=n(K7,"STRONG",{});var dGr=s(gee);gKe=r(dGr,"mbart"),dGr.forEach(t),hKe=r(K7," \u2014 "),NS=n(K7,"A",{href:!0});var cGr=s(NS);pKe=r(cGr,"MBartTokenizer"),cGr.forEach(t),_Ke=r(K7," or "),jS=n(K7,"A",{href:!0});var fGr=s(jS);uKe=r(fGr,"MBartTokenizerFast"),fGr.forEach(t),bKe=r(K7," (mBART model)"),K7.forEach(t),vKe=i(w),Ms=n(w,"LI",{});var Z7=s(Ms);hee=n(Z7,"STRONG",{});var mGr=s(hee);FKe=r(mGr,"mbart50"),mGr.forEach(t),TKe=r(Z7," \u2014 "),DS=n(Z7,"A",{href:!0});var gGr=s(DS);MKe=r(gGr,"MBart50Tokenizer"),gGr.forEach(t),EKe=r(Z7," or "),GS=n(Z7,"A",{href:!0});var hGr=s(GS);CKe=r(hGr,"MBart50TokenizerFast"),hGr.forEach(t),wKe=r(Z7," (mBART-50 model)"),Z7.forEach(t),AKe=i(w),oh=n(w,"LI",{});var s3e=s(oh);pee=n(s3e,"STRONG",{});var pGr=s(pee);yKe=r(pGr,"mluke"),pGr.forEach(t),LKe=r(s3e," \u2014 "),OS=n(s3e,"A",{href:!0});var _Gr=s(OS);xKe=r(_Gr,"MLukeTokenizer"),_Gr.forEach(t),kKe=r(s3e," (mLUKE model)"),s3e.forEach(t),SKe=i(w),Es=n(w,"LI",{});var e9=s(Es);_ee=n(e9,"STRONG",{});var uGr=s(_ee);RKe=r(uGr,"mobilebert"),uGr.forEach(t),BKe=r(e9," \u2014 "),VS=n(e9,"A",{href:!0});var bGr=s(VS);PKe=r(bGr,"MobileBertTokenizer"),bGr.forEach(t),$Ke=r(e9," or "),XS=n(e9,"A",{href:!0});var vGr=s(XS);IKe=r(vGr,"MobileBertTokenizerFast"),vGr.forEach(t),qKe=r(e9," (MobileBERT model)"),e9.forEach(t),NKe=i(w),Cs=n(w,"LI",{});var o9=s(Cs);uee=n(o9,"STRONG",{});var FGr=s(uee);jKe=r(FGr,"mpnet"),FGr.forEach(t),DKe=r(o9," \u2014 "),zS=n(o9,"A",{href:!0});var TGr=s(zS);GKe=r(TGr,"MPNetTokenizer"),TGr.forEach(t),OKe=r(o9," or "),QS=n(o9,"A",{href:!0});var MGr=s(QS);VKe=r(MGr,"MPNetTokenizerFast"),MGr.forEach(t),XKe=r(o9," (MPNet model)"),o9.forEach(t),zKe=i(w),ws=n(w,"LI",{});var r9=s(ws);bee=n(r9,"STRONG",{});var EGr=s(bee);QKe=r(EGr,"mt5"),EGr.forEach(t),WKe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var CGr=s(WS);HKe=r(CGr,"MT5Tokenizer"),CGr.forEach(t),UKe=r(r9," or "),HS=n(r9,"A",{href:!0});var wGr=s(HS);JKe=r(wGr,"MT5TokenizerFast"),wGr.forEach(t),YKe=r(r9," (mT5 model)"),r9.forEach(t),KKe=i(w),As=n(w,"LI",{});var t9=s(As);vee=n(t9,"STRONG",{});var AGr=s(vee);ZKe=r(AGr,"openai-gpt"),AGr.forEach(t),eZe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var yGr=s(US);oZe=r(yGr,"OpenAIGPTTokenizer"),yGr.forEach(t),rZe=r(t9," or "),JS=n(t9,"A",{href:!0});var LGr=s(JS);tZe=r(LGr,"OpenAIGPTTokenizerFast"),LGr.forEach(t),aZe=r(t9," (OpenAI GPT model)"),t9.forEach(t),nZe=i(w),ys=n(w,"LI",{});var a9=s(ys);Fee=n(a9,"STRONG",{});var xGr=s(Fee);sZe=r(xGr,"pegasus"),xGr.forEach(t),lZe=r(a9," \u2014 "),YS=n(a9,"A",{href:!0});var kGr=s(YS);iZe=r(kGr,"PegasusTokenizer"),kGr.forEach(t),dZe=r(a9," or "),KS=n(a9,"A",{href:!0});var SGr=s(KS);cZe=r(SGr,"PegasusTokenizerFast"),SGr.forEach(t),fZe=r(a9," (Pegasus model)"),a9.forEach(t),mZe=i(w),rh=n(w,"LI",{});var l3e=s(rh);Tee=n(l3e,"STRONG",{});var RGr=s(Tee);gZe=r(RGr,"perceiver"),RGr.forEach(t),hZe=r(l3e," \u2014 "),ZS=n(l3e,"A",{href:!0});var BGr=s(ZS);pZe=r(BGr,"PerceiverTokenizer"),BGr.forEach(t),_Ze=r(l3e," (Perceiver model)"),l3e.forEach(t),uZe=i(w),th=n(w,"LI",{});var i3e=s(th);Mee=n(i3e,"STRONG",{});var PGr=s(Mee);bZe=r(PGr,"phobert"),PGr.forEach(t),vZe=r(i3e," \u2014 "),eR=n(i3e,"A",{href:!0});var $Gr=s(eR);FZe=r($Gr,"PhobertTokenizer"),$Gr.forEach(t),TZe=r(i3e," (PhoBERT model)"),i3e.forEach(t),MZe=i(w),ah=n(w,"LI",{});var d3e=s(ah);Eee=n(d3e,"STRONG",{});var IGr=s(Eee);EZe=r(IGr,"plbart"),IGr.forEach(t),CZe=r(d3e," \u2014 "),oR=n(d3e,"A",{href:!0});var qGr=s(oR);wZe=r(qGr,"PLBartTokenizer"),qGr.forEach(t),AZe=r(d3e," (PLBart model)"),d3e.forEach(t),yZe=i(w),nh=n(w,"LI",{});var c3e=s(nh);Cee=n(c3e,"STRONG",{});var NGr=s(Cee);LZe=r(NGr,"prophetnet"),NGr.forEach(t),xZe=r(c3e," \u2014 "),rR=n(c3e,"A",{href:!0});var jGr=s(rR);kZe=r(jGr,"ProphetNetTokenizer"),jGr.forEach(t),SZe=r(c3e," (ProphetNet model)"),c3e.forEach(t),RZe=i(w),Ls=n(w,"LI",{});var n9=s(Ls);wee=n(n9,"STRONG",{});var DGr=s(wee);BZe=r(DGr,"qdqbert"),DGr.forEach(t),PZe=r(n9," \u2014 "),tR=n(n9,"A",{href:!0});var GGr=s(tR);$Ze=r(GGr,"BertTokenizer"),GGr.forEach(t),IZe=r(n9," or "),aR=n(n9,"A",{href:!0});var OGr=s(aR);qZe=r(OGr,"BertTokenizerFast"),OGr.forEach(t),NZe=r(n9," (QDQBert model)"),n9.forEach(t),jZe=i(w),sh=n(w,"LI",{});var f3e=s(sh);Aee=n(f3e,"STRONG",{});var VGr=s(Aee);DZe=r(VGr,"rag"),VGr.forEach(t),GZe=r(f3e," \u2014 "),nR=n(f3e,"A",{href:!0});var XGr=s(nR);OZe=r(XGr,"RagTokenizer"),XGr.forEach(t),VZe=r(f3e," (RAG model)"),f3e.forEach(t),XZe=i(w),xs=n(w,"LI",{});var s9=s(xs);yee=n(s9,"STRONG",{});var zGr=s(yee);zZe=r(zGr,"realm"),zGr.forEach(t),QZe=r(s9," \u2014 "),sR=n(s9,"A",{href:!0});var QGr=s(sR);WZe=r(QGr,"RealmTokenizer"),QGr.forEach(t),HZe=r(s9," or "),lR=n(s9,"A",{href:!0});var WGr=s(lR);UZe=r(WGr,"RealmTokenizerFast"),WGr.forEach(t),JZe=r(s9," (Realm model)"),s9.forEach(t),YZe=i(w),ks=n(w,"LI",{});var l9=s(ks);Lee=n(l9,"STRONG",{});var HGr=s(Lee);KZe=r(HGr,"reformer"),HGr.forEach(t),ZZe=r(l9," \u2014 "),iR=n(l9,"A",{href:!0});var UGr=s(iR);eeo=r(UGr,"ReformerTokenizer"),UGr.forEach(t),oeo=r(l9," or "),dR=n(l9,"A",{href:!0});var JGr=s(dR);reo=r(JGr,"ReformerTokenizerFast"),JGr.forEach(t),teo=r(l9," (Reformer model)"),l9.forEach(t),aeo=i(w),Ss=n(w,"LI",{});var i9=s(Ss);xee=n(i9,"STRONG",{});var YGr=s(xee);neo=r(YGr,"rembert"),YGr.forEach(t),seo=r(i9," \u2014 "),cR=n(i9,"A",{href:!0});var KGr=s(cR);leo=r(KGr,"RemBertTokenizer"),KGr.forEach(t),ieo=r(i9," or "),fR=n(i9,"A",{href:!0});var ZGr=s(fR);deo=r(ZGr,"RemBertTokenizerFast"),ZGr.forEach(t),ceo=r(i9," (RemBERT model)"),i9.forEach(t),feo=i(w),Rs=n(w,"LI",{});var d9=s(Rs);kee=n(d9,"STRONG",{});var eOr=s(kee);meo=r(eOr,"retribert"),eOr.forEach(t),geo=r(d9," \u2014 "),mR=n(d9,"A",{href:!0});var oOr=s(mR);heo=r(oOr,"RetriBertTokenizer"),oOr.forEach(t),peo=r(d9," or "),gR=n(d9,"A",{href:!0});var rOr=s(gR);_eo=r(rOr,"RetriBertTokenizerFast"),rOr.forEach(t),ueo=r(d9," (RetriBERT model)"),d9.forEach(t),beo=i(w),Bs=n(w,"LI",{});var c9=s(Bs);See=n(c9,"STRONG",{});var tOr=s(See);veo=r(tOr,"roberta"),tOr.forEach(t),Feo=r(c9," \u2014 "),hR=n(c9,"A",{href:!0});var aOr=s(hR);Teo=r(aOr,"RobertaTokenizer"),aOr.forEach(t),Meo=r(c9," or "),pR=n(c9,"A",{href:!0});var nOr=s(pR);Eeo=r(nOr,"RobertaTokenizerFast"),nOr.forEach(t),Ceo=r(c9," (RoBERTa model)"),c9.forEach(t),weo=i(w),Ps=n(w,"LI",{});var f9=s(Ps);Ree=n(f9,"STRONG",{});var sOr=s(Ree);Aeo=r(sOr,"roformer"),sOr.forEach(t),yeo=r(f9," \u2014 "),_R=n(f9,"A",{href:!0});var lOr=s(_R);Leo=r(lOr,"RoFormerTokenizer"),lOr.forEach(t),xeo=r(f9," or "),uR=n(f9,"A",{href:!0});var iOr=s(uR);keo=r(iOr,"RoFormerTokenizerFast"),iOr.forEach(t),Seo=r(f9," (RoFormer model)"),f9.forEach(t),Reo=i(w),lh=n(w,"LI",{});var m3e=s(lh);Bee=n(m3e,"STRONG",{});var dOr=s(Bee);Beo=r(dOr,"speech_to_text"),dOr.forEach(t),Peo=r(m3e," \u2014 "),bR=n(m3e,"A",{href:!0});var cOr=s(bR);$eo=r(cOr,"Speech2TextTokenizer"),cOr.forEach(t),Ieo=r(m3e," (Speech2Text model)"),m3e.forEach(t),qeo=i(w),ih=n(w,"LI",{});var g3e=s(ih);Pee=n(g3e,"STRONG",{});var fOr=s(Pee);Neo=r(fOr,"speech_to_text_2"),fOr.forEach(t),jeo=r(g3e," \u2014 "),vR=n(g3e,"A",{href:!0});var mOr=s(vR);Deo=r(mOr,"Speech2Text2Tokenizer"),mOr.forEach(t),Geo=r(g3e," (Speech2Text2 model)"),g3e.forEach(t),Oeo=i(w),$s=n(w,"LI",{});var m9=s($s);$ee=n(m9,"STRONG",{});var gOr=s($ee);Veo=r(gOr,"splinter"),gOr.forEach(t),Xeo=r(m9," \u2014 "),FR=n(m9,"A",{href:!0});var hOr=s(FR);zeo=r(hOr,"SplinterTokenizer"),hOr.forEach(t),Qeo=r(m9," or "),TR=n(m9,"A",{href:!0});var pOr=s(TR);Weo=r(pOr,"SplinterTokenizerFast"),pOr.forEach(t),Heo=r(m9," (Splinter model)"),m9.forEach(t),Ueo=i(w),Is=n(w,"LI",{});var g9=s(Is);Iee=n(g9,"STRONG",{});var _Or=s(Iee);Jeo=r(_Or,"squeezebert"),_Or.forEach(t),Yeo=r(g9," \u2014 "),MR=n(g9,"A",{href:!0});var uOr=s(MR);Keo=r(uOr,"SqueezeBertTokenizer"),uOr.forEach(t),Zeo=r(g9," or "),ER=n(g9,"A",{href:!0});var bOr=s(ER);eoo=r(bOr,"SqueezeBertTokenizerFast"),bOr.forEach(t),ooo=r(g9," (SqueezeBERT model)"),g9.forEach(t),roo=i(w),qs=n(w,"LI",{});var h9=s(qs);qee=n(h9,"STRONG",{});var vOr=s(qee);too=r(vOr,"t5"),vOr.forEach(t),aoo=r(h9," \u2014 "),CR=n(h9,"A",{href:!0});var FOr=s(CR);noo=r(FOr,"T5Tokenizer"),FOr.forEach(t),soo=r(h9," or "),wR=n(h9,"A",{href:!0});var TOr=s(wR);loo=r(TOr,"T5TokenizerFast"),TOr.forEach(t),ioo=r(h9," (T5 model)"),h9.forEach(t),doo=i(w),dh=n(w,"LI",{});var h3e=s(dh);Nee=n(h3e,"STRONG",{});var MOr=s(Nee);coo=r(MOr,"tapas"),MOr.forEach(t),foo=r(h3e," \u2014 "),AR=n(h3e,"A",{href:!0});var EOr=s(AR);moo=r(EOr,"TapasTokenizer"),EOr.forEach(t),goo=r(h3e," (TAPAS model)"),h3e.forEach(t),hoo=i(w),ch=n(w,"LI",{});var p3e=s(ch);jee=n(p3e,"STRONG",{});var COr=s(jee);poo=r(COr,"tapex"),COr.forEach(t),_oo=r(p3e," \u2014 "),yR=n(p3e,"A",{href:!0});var wOr=s(yR);uoo=r(wOr,"TapexTokenizer"),wOr.forEach(t),boo=r(p3e," (TAPEX model)"),p3e.forEach(t),voo=i(w),fh=n(w,"LI",{});var _3e=s(fh);Dee=n(_3e,"STRONG",{});var AOr=s(Dee);Foo=r(AOr,"transfo-xl"),AOr.forEach(t),Too=r(_3e," \u2014 "),LR=n(_3e,"A",{href:!0});var yOr=s(LR);Moo=r(yOr,"TransfoXLTokenizer"),yOr.forEach(t),Eoo=r(_3e," (Transformer-XL model)"),_3e.forEach(t),Coo=i(w),mh=n(w,"LI",{});var u3e=s(mh);Gee=n(u3e,"STRONG",{});var LOr=s(Gee);woo=r(LOr,"wav2vec2"),LOr.forEach(t),Aoo=r(u3e," \u2014 "),xR=n(u3e,"A",{href:!0});var xOr=s(xR);yoo=r(xOr,"Wav2Vec2CTCTokenizer"),xOr.forEach(t),Loo=r(u3e," (Wav2Vec2 model)"),u3e.forEach(t),xoo=i(w),gh=n(w,"LI",{});var b3e=s(gh);Oee=n(b3e,"STRONG",{});var kOr=s(Oee);koo=r(kOr,"wav2vec2_phoneme"),kOr.forEach(t),Soo=r(b3e," \u2014 "),kR=n(b3e,"A",{href:!0});var SOr=s(kR);Roo=r(SOr,"Wav2Vec2PhonemeCTCTokenizer"),SOr.forEach(t),Boo=r(b3e," (Wav2Vec2Phoneme model)"),b3e.forEach(t),Poo=i(w),Ns=n(w,"LI",{});var p9=s(Ns);Vee=n(p9,"STRONG",{});var ROr=s(Vee);$oo=r(ROr,"xglm"),ROr.forEach(t),Ioo=r(p9," \u2014 "),SR=n(p9,"A",{href:!0});var BOr=s(SR);qoo=r(BOr,"XGLMTokenizer"),BOr.forEach(t),Noo=r(p9," or "),RR=n(p9,"A",{href:!0});var POr=s(RR);joo=r(POr,"XGLMTokenizerFast"),POr.forEach(t),Doo=r(p9," (XGLM model)"),p9.forEach(t),Goo=i(w),hh=n(w,"LI",{});var v3e=s(hh);Xee=n(v3e,"STRONG",{});var $Or=s(Xee);Ooo=r($Or,"xlm"),$Or.forEach(t),Voo=r(v3e," \u2014 "),BR=n(v3e,"A",{href:!0});var IOr=s(BR);Xoo=r(IOr,"XLMTokenizer"),IOr.forEach(t),zoo=r(v3e," (XLM model)"),v3e.forEach(t),Qoo=i(w),ph=n(w,"LI",{});var F3e=s(ph);zee=n(F3e,"STRONG",{});var qOr=s(zee);Woo=r(qOr,"xlm-prophetnet"),qOr.forEach(t),Hoo=r(F3e," \u2014 "),PR=n(F3e,"A",{href:!0});var NOr=s(PR);Uoo=r(NOr,"XLMProphetNetTokenizer"),NOr.forEach(t),Joo=r(F3e," (XLMProphetNet model)"),F3e.forEach(t),Yoo=i(w),js=n(w,"LI",{});var _9=s(js);Qee=n(_9,"STRONG",{});var jOr=s(Qee);Koo=r(jOr,"xlm-roberta"),jOr.forEach(t),Zoo=r(_9," \u2014 "),$R=n(_9,"A",{href:!0});var DOr=s($R);ero=r(DOr,"XLMRobertaTokenizer"),DOr.forEach(t),oro=r(_9," or "),IR=n(_9,"A",{href:!0});var GOr=s(IR);rro=r(GOr,"XLMRobertaTokenizerFast"),GOr.forEach(t),tro=r(_9," (XLM-RoBERTa model)"),_9.forEach(t),aro=i(w),Ds=n(w,"LI",{});var u9=s(Ds);Wee=n(u9,"STRONG",{});var OOr=s(Wee);nro=r(OOr,"xlnet"),OOr.forEach(t),sro=r(u9," \u2014 "),qR=n(u9,"A",{href:!0});var VOr=s(qR);lro=r(VOr,"XLNetTokenizer"),VOr.forEach(t),iro=r(u9," or "),NR=n(u9,"A",{href:!0});var XOr=s(NR);dro=r(XOr,"XLNetTokenizerFast"),XOr.forEach(t),cro=r(u9," (XLNet model)"),u9.forEach(t),w.forEach(t),fro=i(ha),Hee=n(ha,"P",{});var zOr=s(Hee);mro=r(zOr,"Examples:"),zOr.forEach(t),gro=i(ha),m(Qw.$$.fragment,ha),ha.forEach(t),hro=i(zs),_h=n(zs,"DIV",{class:!0});var zPe=s(_h);m(Ww.$$.fragment,zPe),pro=i(zPe),Uee=n(zPe,"P",{});var QOr=s(Uee);_ro=r(QOr,"Register a new tokenizer in this mapping."),QOr.forEach(t),zPe.forEach(t),zs.forEach(t),GRe=i(c),Ui=n(c,"H2",{class:!0});var QPe=s(Ui);uh=n(QPe,"A",{id:!0,class:!0,href:!0});var WOr=s(uh);Jee=n(WOr,"SPAN",{});var HOr=s(Jee);m(Hw.$$.fragment,HOr),HOr.forEach(t),WOr.forEach(t),uro=i(QPe),Yee=n(QPe,"SPAN",{});var UOr=s(Yee);bro=r(UOr,"AutoFeatureExtractor"),UOr.forEach(t),QPe.forEach(t),ORe=i(c),Ho=n(c,"DIV",{class:!0});var Qs=s(Ho);m(Uw.$$.fragment,Qs),vro=i(Qs),Jw=n(Qs,"P",{});var WPe=s(Jw);Fro=r(WPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jR=n(WPe,"A",{href:!0});var JOr=s(jR);Tro=r(JOr,"AutoFeatureExtractor.from_pretrained()"),JOr.forEach(t),Mro=r(WPe," class method."),WPe.forEach(t),Ero=i(Qs),Yw=n(Qs,"P",{});var HPe=s(Yw);Cro=r(HPe,"This class cannot be instantiated directly using "),Kee=n(HPe,"CODE",{});var YOr=s(Kee);wro=r(YOr,"__init__()"),YOr.forEach(t),Aro=r(HPe," (throws an error)."),HPe.forEach(t),yro=i(Qs),$e=n(Qs,"DIV",{class:!0});var Nt=s($e);m(Kw.$$.fragment,Nt),Lro=i(Nt),Zee=n(Nt,"P",{});var KOr=s(Zee);xro=r(KOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),KOr.forEach(t),kro=i(Nt),Va=n(Nt,"P",{});var kC=s(Va);Sro=r(kC,"The feature extractor class to instantiate is selected based on the "),eoe=n(kC,"CODE",{});var ZOr=s(eoe);Rro=r(ZOr,"model_type"),ZOr.forEach(t),Bro=r(kC,` property of the config object
(either passed as an argument or loaded from `),ooe=n(kC,"CODE",{});var eVr=s(ooe);Pro=r(eVr,"pretrained_model_name_or_path"),eVr.forEach(t),$ro=r(kC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),roe=n(kC,"CODE",{});var oVr=s(roe);Iro=r(oVr,"pretrained_model_name_or_path"),oVr.forEach(t),qro=r(kC,":"),kC.forEach(t),Nro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);bh=n(ae,"LI",{});var T3e=s(bh);toe=n(T3e,"STRONG",{});var rVr=s(toe);jro=r(rVr,"beit"),rVr.forEach(t),Dro=r(T3e," \u2014 "),DR=n(T3e,"A",{href:!0});var tVr=s(DR);Gro=r(tVr,"BeitFeatureExtractor"),tVr.forEach(t),Oro=r(T3e," (BEiT model)"),T3e.forEach(t),Vro=i(ae),vh=n(ae,"LI",{});var M3e=s(vh);aoe=n(M3e,"STRONG",{});var aVr=s(aoe);Xro=r(aVr,"clip"),aVr.forEach(t),zro=r(M3e," \u2014 "),GR=n(M3e,"A",{href:!0});var nVr=s(GR);Qro=r(nVr,"CLIPFeatureExtractor"),nVr.forEach(t),Wro=r(M3e," (CLIP model)"),M3e.forEach(t),Hro=i(ae),Fh=n(ae,"LI",{});var E3e=s(Fh);noe=n(E3e,"STRONG",{});var sVr=s(noe);Uro=r(sVr,"convnext"),sVr.forEach(t),Jro=r(E3e," \u2014 "),OR=n(E3e,"A",{href:!0});var lVr=s(OR);Yro=r(lVr,"ConvNextFeatureExtractor"),lVr.forEach(t),Kro=r(E3e," (ConvNext model)"),E3e.forEach(t),Zro=i(ae),Th=n(ae,"LI",{});var C3e=s(Th);soe=n(C3e,"STRONG",{});var iVr=s(soe);eto=r(iVr,"deit"),iVr.forEach(t),oto=r(C3e," \u2014 "),VR=n(C3e,"A",{href:!0});var dVr=s(VR);rto=r(dVr,"DeiTFeatureExtractor"),dVr.forEach(t),tto=r(C3e," (DeiT model)"),C3e.forEach(t),ato=i(ae),Mh=n(ae,"LI",{});var w3e=s(Mh);loe=n(w3e,"STRONG",{});var cVr=s(loe);nto=r(cVr,"detr"),cVr.forEach(t),sto=r(w3e," \u2014 "),XR=n(w3e,"A",{href:!0});var fVr=s(XR);lto=r(fVr,"DetrFeatureExtractor"),fVr.forEach(t),ito=r(w3e," (DETR model)"),w3e.forEach(t),dto=i(ae),Eh=n(ae,"LI",{});var A3e=s(Eh);ioe=n(A3e,"STRONG",{});var mVr=s(ioe);cto=r(mVr,"hubert"),mVr.forEach(t),fto=r(A3e," \u2014 "),zR=n(A3e,"A",{href:!0});var gVr=s(zR);mto=r(gVr,"Wav2Vec2FeatureExtractor"),gVr.forEach(t),gto=r(A3e," (Hubert model)"),A3e.forEach(t),hto=i(ae),Ch=n(ae,"LI",{});var y3e=s(Ch);doe=n(y3e,"STRONG",{});var hVr=s(doe);pto=r(hVr,"layoutlmv2"),hVr.forEach(t),_to=r(y3e," \u2014 "),QR=n(y3e,"A",{href:!0});var pVr=s(QR);uto=r(pVr,"LayoutLMv2FeatureExtractor"),pVr.forEach(t),bto=r(y3e," (LayoutLMv2 model)"),y3e.forEach(t),vto=i(ae),wh=n(ae,"LI",{});var L3e=s(wh);coe=n(L3e,"STRONG",{});var _Vr=s(coe);Fto=r(_Vr,"maskformer"),_Vr.forEach(t),Tto=r(L3e," \u2014 "),WR=n(L3e,"A",{href:!0});var uVr=s(WR);Mto=r(uVr,"MaskFormerFeatureExtractor"),uVr.forEach(t),Eto=r(L3e," (MaskFormer model)"),L3e.forEach(t),Cto=i(ae),Ah=n(ae,"LI",{});var x3e=s(Ah);foe=n(x3e,"STRONG",{});var bVr=s(foe);wto=r(bVr,"perceiver"),bVr.forEach(t),Ato=r(x3e," \u2014 "),HR=n(x3e,"A",{href:!0});var vVr=s(HR);yto=r(vVr,"PerceiverFeatureExtractor"),vVr.forEach(t),Lto=r(x3e," (Perceiver model)"),x3e.forEach(t),xto=i(ae),yh=n(ae,"LI",{});var k3e=s(yh);moe=n(k3e,"STRONG",{});var FVr=s(moe);kto=r(FVr,"poolformer"),FVr.forEach(t),Sto=r(k3e," \u2014 "),UR=n(k3e,"A",{href:!0});var TVr=s(UR);Rto=r(TVr,"PoolFormerFeatureExtractor"),TVr.forEach(t),Bto=r(k3e," (PoolFormer model)"),k3e.forEach(t),Pto=i(ae),Lh=n(ae,"LI",{});var S3e=s(Lh);goe=n(S3e,"STRONG",{});var MVr=s(goe);$to=r(MVr,"regnet"),MVr.forEach(t),Ito=r(S3e," \u2014 "),JR=n(S3e,"A",{href:!0});var EVr=s(JR);qto=r(EVr,"ConvNextFeatureExtractor"),EVr.forEach(t),Nto=r(S3e," (RegNet model)"),S3e.forEach(t),jto=i(ae),xh=n(ae,"LI",{});var R3e=s(xh);hoe=n(R3e,"STRONG",{});var CVr=s(hoe);Dto=r(CVr,"resnet"),CVr.forEach(t),Gto=r(R3e," \u2014 "),YR=n(R3e,"A",{href:!0});var wVr=s(YR);Oto=r(wVr,"ConvNextFeatureExtractor"),wVr.forEach(t),Vto=r(R3e," (ResNet model)"),R3e.forEach(t),Xto=i(ae),kh=n(ae,"LI",{});var B3e=s(kh);poe=n(B3e,"STRONG",{});var AVr=s(poe);zto=r(AVr,"segformer"),AVr.forEach(t),Qto=r(B3e," \u2014 "),KR=n(B3e,"A",{href:!0});var yVr=s(KR);Wto=r(yVr,"SegformerFeatureExtractor"),yVr.forEach(t),Hto=r(B3e," (SegFormer model)"),B3e.forEach(t),Uto=i(ae),Sh=n(ae,"LI",{});var P3e=s(Sh);_oe=n(P3e,"STRONG",{});var LVr=s(_oe);Jto=r(LVr,"speech_to_text"),LVr.forEach(t),Yto=r(P3e," \u2014 "),ZR=n(P3e,"A",{href:!0});var xVr=s(ZR);Kto=r(xVr,"Speech2TextFeatureExtractor"),xVr.forEach(t),Zto=r(P3e," (Speech2Text model)"),P3e.forEach(t),eao=i(ae),Rh=n(ae,"LI",{});var $3e=s(Rh);uoe=n($3e,"STRONG",{});var kVr=s(uoe);oao=r(kVr,"swin"),kVr.forEach(t),rao=r($3e," \u2014 "),eB=n($3e,"A",{href:!0});var SVr=s(eB);tao=r(SVr,"ViTFeatureExtractor"),SVr.forEach(t),aao=r($3e," (Swin model)"),$3e.forEach(t),nao=i(ae),Bh=n(ae,"LI",{});var I3e=s(Bh);boe=n(I3e,"STRONG",{});var RVr=s(boe);sao=r(RVr,"van"),RVr.forEach(t),lao=r(I3e," \u2014 "),oB=n(I3e,"A",{href:!0});var BVr=s(oB);iao=r(BVr,"ConvNextFeatureExtractor"),BVr.forEach(t),dao=r(I3e," (VAN model)"),I3e.forEach(t),cao=i(ae),Ph=n(ae,"LI",{});var q3e=s(Ph);voe=n(q3e,"STRONG",{});var PVr=s(voe);fao=r(PVr,"vit"),PVr.forEach(t),mao=r(q3e," \u2014 "),rB=n(q3e,"A",{href:!0});var $Vr=s(rB);gao=r($Vr,"ViTFeatureExtractor"),$Vr.forEach(t),hao=r(q3e," (ViT model)"),q3e.forEach(t),pao=i(ae),$h=n(ae,"LI",{});var N3e=s($h);Foe=n(N3e,"STRONG",{});var IVr=s(Foe);_ao=r(IVr,"vit_mae"),IVr.forEach(t),uao=r(N3e," \u2014 "),tB=n(N3e,"A",{href:!0});var qVr=s(tB);bao=r(qVr,"ViTFeatureExtractor"),qVr.forEach(t),vao=r(N3e," (ViTMAE model)"),N3e.forEach(t),Fao=i(ae),Ih=n(ae,"LI",{});var j3e=s(Ih);Toe=n(j3e,"STRONG",{});var NVr=s(Toe);Tao=r(NVr,"wav2vec2"),NVr.forEach(t),Mao=r(j3e," \u2014 "),aB=n(j3e,"A",{href:!0});var jVr=s(aB);Eao=r(jVr,"Wav2Vec2FeatureExtractor"),jVr.forEach(t),Cao=r(j3e," (Wav2Vec2 model)"),j3e.forEach(t),ae.forEach(t),wao=i(Nt),m(qh.$$.fragment,Nt),Aao=i(Nt),Moe=n(Nt,"P",{});var DVr=s(Moe);yao=r(DVr,"Examples:"),DVr.forEach(t),Lao=i(Nt),m(Zw.$$.fragment,Nt),Nt.forEach(t),xao=i(Qs),Nh=n(Qs,"DIV",{class:!0});var UPe=s(Nh);m(e6.$$.fragment,UPe),kao=i(UPe),Eoe=n(UPe,"P",{});var GVr=s(Eoe);Sao=r(GVr,"Register a new feature extractor for this class."),GVr.forEach(t),UPe.forEach(t),Qs.forEach(t),VRe=i(c),Ji=n(c,"H2",{class:!0});var JPe=s(Ji);jh=n(JPe,"A",{id:!0,class:!0,href:!0});var OVr=s(jh);Coe=n(OVr,"SPAN",{});var VVr=s(Coe);m(o6.$$.fragment,VVr),VVr.forEach(t),OVr.forEach(t),Rao=i(JPe),woe=n(JPe,"SPAN",{});var XVr=s(woe);Bao=r(XVr,"AutoProcessor"),XVr.forEach(t),JPe.forEach(t),XRe=i(c),Uo=n(c,"DIV",{class:!0});var Ws=s(Uo);m(r6.$$.fragment,Ws),Pao=i(Ws),t6=n(Ws,"P",{});var YPe=s(t6);$ao=r(YPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),nB=n(YPe,"A",{href:!0});var zVr=s(nB);Iao=r(zVr,"AutoProcessor.from_pretrained()"),zVr.forEach(t),qao=r(YPe," class method."),YPe.forEach(t),Nao=i(Ws),a6=n(Ws,"P",{});var KPe=s(a6);jao=r(KPe,"This class cannot be instantiated directly using "),Aoe=n(KPe,"CODE",{});var QVr=s(Aoe);Dao=r(QVr,"__init__()"),QVr.forEach(t),Gao=r(KPe," (throws an error)."),KPe.forEach(t),Oao=i(Ws),Ie=n(Ws,"DIV",{class:!0});var jt=s(Ie);m(n6.$$.fragment,jt),Vao=i(jt),yoe=n(jt,"P",{});var WVr=s(yoe);Xao=r(WVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),WVr.forEach(t),zao=i(jt),Yi=n(jt,"P",{});var TU=s(Yi);Qao=r(TU,"The processor class to instantiate is selected based on the "),Loe=n(TU,"CODE",{});var HVr=s(Loe);Wao=r(HVr,"model_type"),HVr.forEach(t),Hao=r(TU,` property of the config object (either
passed as an argument or loaded from `),xoe=n(TU,"CODE",{});var UVr=s(xoe);Uao=r(UVr,"pretrained_model_name_or_path"),UVr.forEach(t),Jao=r(TU," if possible):"),TU.forEach(t),Yao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Dh=n(jo,"LI",{});var D3e=s(Dh);koe=n(D3e,"STRONG",{});var JVr=s(koe);Kao=r(JVr,"clip"),JVr.forEach(t),Zao=r(D3e," \u2014 "),sB=n(D3e,"A",{href:!0});var YVr=s(sB);eno=r(YVr,"CLIPProcessor"),YVr.forEach(t),ono=r(D3e," (CLIP model)"),D3e.forEach(t),rno=i(jo),Gh=n(jo,"LI",{});var G3e=s(Gh);Soe=n(G3e,"STRONG",{});var KVr=s(Soe);tno=r(KVr,"layoutlmv2"),KVr.forEach(t),ano=r(G3e," \u2014 "),lB=n(G3e,"A",{href:!0});var ZVr=s(lB);nno=r(ZVr,"LayoutLMv2Processor"),ZVr.forEach(t),sno=r(G3e," (LayoutLMv2 model)"),G3e.forEach(t),lno=i(jo),Oh=n(jo,"LI",{});var O3e=s(Oh);Roe=n(O3e,"STRONG",{});var eXr=s(Roe);ino=r(eXr,"layoutxlm"),eXr.forEach(t),dno=r(O3e," \u2014 "),iB=n(O3e,"A",{href:!0});var oXr=s(iB);cno=r(oXr,"LayoutXLMProcessor"),oXr.forEach(t),fno=r(O3e," (LayoutXLM model)"),O3e.forEach(t),mno=i(jo),Vh=n(jo,"LI",{});var V3e=s(Vh);Boe=n(V3e,"STRONG",{});var rXr=s(Boe);gno=r(rXr,"speech_to_text"),rXr.forEach(t),hno=r(V3e," \u2014 "),dB=n(V3e,"A",{href:!0});var tXr=s(dB);pno=r(tXr,"Speech2TextProcessor"),tXr.forEach(t),_no=r(V3e," (Speech2Text model)"),V3e.forEach(t),uno=i(jo),Xh=n(jo,"LI",{});var X3e=s(Xh);Poe=n(X3e,"STRONG",{});var aXr=s(Poe);bno=r(aXr,"speech_to_text_2"),aXr.forEach(t),vno=r(X3e," \u2014 "),cB=n(X3e,"A",{href:!0});var nXr=s(cB);Fno=r(nXr,"Speech2Text2Processor"),nXr.forEach(t),Tno=r(X3e," (Speech2Text2 model)"),X3e.forEach(t),Mno=i(jo),zh=n(jo,"LI",{});var z3e=s(zh);$oe=n(z3e,"STRONG",{});var sXr=s($oe);Eno=r(sXr,"trocr"),sXr.forEach(t),Cno=r(z3e," \u2014 "),fB=n(z3e,"A",{href:!0});var lXr=s(fB);wno=r(lXr,"TrOCRProcessor"),lXr.forEach(t),Ano=r(z3e," (TrOCR model)"),z3e.forEach(t),yno=i(jo),Qh=n(jo,"LI",{});var Q3e=s(Qh);Ioe=n(Q3e,"STRONG",{});var iXr=s(Ioe);Lno=r(iXr,"vision-text-dual-encoder"),iXr.forEach(t),xno=r(Q3e," \u2014 "),mB=n(Q3e,"A",{href:!0});var dXr=s(mB);kno=r(dXr,"VisionTextDualEncoderProcessor"),dXr.forEach(t),Sno=r(Q3e," (VisionTextDualEncoder model)"),Q3e.forEach(t),Rno=i(jo),Wh=n(jo,"LI",{});var W3e=s(Wh);qoe=n(W3e,"STRONG",{});var cXr=s(qoe);Bno=r(cXr,"wav2vec2"),cXr.forEach(t),Pno=r(W3e," \u2014 "),gB=n(W3e,"A",{href:!0});var fXr=s(gB);$no=r(fXr,"Wav2Vec2Processor"),fXr.forEach(t),Ino=r(W3e," (Wav2Vec2 model)"),W3e.forEach(t),jo.forEach(t),qno=i(jt),m(Hh.$$.fragment,jt),Nno=i(jt),Noe=n(jt,"P",{});var mXr=s(Noe);jno=r(mXr,"Examples:"),mXr.forEach(t),Dno=i(jt),m(s6.$$.fragment,jt),jt.forEach(t),Gno=i(Ws),Uh=n(Ws,"DIV",{class:!0});var ZPe=s(Uh);m(l6.$$.fragment,ZPe),Ono=i(ZPe),joe=n(ZPe,"P",{});var gXr=s(joe);Vno=r(gXr,"Register a new processor for this class."),gXr.forEach(t),ZPe.forEach(t),Ws.forEach(t),zRe=i(c),Ki=n(c,"H2",{class:!0});var e$e=s(Ki);Jh=n(e$e,"A",{id:!0,class:!0,href:!0});var hXr=s(Jh);Doe=n(hXr,"SPAN",{});var pXr=s(Doe);m(i6.$$.fragment,pXr),pXr.forEach(t),hXr.forEach(t),Xno=i(e$e),Goe=n(e$e,"SPAN",{});var _Xr=s(Goe);zno=r(_Xr,"AutoModel"),_Xr.forEach(t),e$e.forEach(t),QRe=i(c),Jo=n(c,"DIV",{class:!0});var Hs=s(Jo);m(d6.$$.fragment,Hs),Qno=i(Hs),Zi=n(Hs,"P",{});var MU=s(Zi);Wno=r(MU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),hB=n(MU,"A",{href:!0});var uXr=s(hB);Hno=r(uXr,"from_pretrained()"),uXr.forEach(t),Uno=r(MU," class method or the "),pB=n(MU,"A",{href:!0});var bXr=s(pB);Jno=r(bXr,"from_config()"),bXr.forEach(t),Yno=r(MU,` class
method.`),MU.forEach(t),Kno=i(Hs),c6=n(Hs,"P",{});var o$e=s(c6);Zno=r(o$e,"This class cannot be instantiated directly using "),Ooe=n(o$e,"CODE",{});var vXr=s(Ooe);eso=r(vXr,"__init__()"),vXr.forEach(t),oso=r(o$e," (throws an error)."),o$e.forEach(t),rso=i(Hs),Xr=n(Hs,"DIV",{class:!0});var Us=s(Xr);m(f6.$$.fragment,Us),tso=i(Us),Voe=n(Us,"P",{});var FXr=s(Voe);aso=r(FXr,"Instantiates one of the base model classes of the library from a configuration."),FXr.forEach(t),nso=i(Us),ed=n(Us,"P",{});var EU=s(ed);sso=r(EU,`Note:
Loading a model from its configuration file does `),Xoe=n(EU,"STRONG",{});var TXr=s(Xoe);lso=r(TXr,"not"),TXr.forEach(t),iso=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_B=n(EU,"A",{href:!0});var MXr=s(_B);dso=r(MXr,"from_pretrained()"),MXr.forEach(t),cso=r(EU," to load the model weights."),EU.forEach(t),fso=i(Us),zoe=n(Us,"P",{});var EXr=s(zoe);mso=r(EXr,"Examples:"),EXr.forEach(t),gso=i(Us),m(m6.$$.fragment,Us),Us.forEach(t),hso=i(Hs),qe=n(Hs,"DIV",{class:!0});var Dt=s(qe);m(g6.$$.fragment,Dt),pso=i(Dt),Qoe=n(Dt,"P",{});var CXr=s(Qoe);_so=r(CXr,"Instantiate one of the base model classes of the library from a pretrained model."),CXr.forEach(t),uso=i(Dt),Xa=n(Dt,"P",{});var SC=s(Xa);bso=r(SC,"The model class to instantiate is selected based on the "),Woe=n(SC,"CODE",{});var wXr=s(Woe);vso=r(wXr,"model_type"),wXr.forEach(t),Fso=r(SC,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(SC,"CODE",{});var AXr=s(Hoe);Tso=r(AXr,"pretrained_model_name_or_path"),AXr.forEach(t),Mso=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(SC,"CODE",{});var yXr=s(Uoe);Eso=r(yXr,"pretrained_model_name_or_path"),yXr.forEach(t),Cso=r(SC,":"),SC.forEach(t),wso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Yh=n(M,"LI",{});var H3e=s(Yh);Joe=n(H3e,"STRONG",{});var LXr=s(Joe);Aso=r(LXr,"albert"),LXr.forEach(t),yso=r(H3e," \u2014 "),uB=n(H3e,"A",{href:!0});var xXr=s(uB);Lso=r(xXr,"AlbertModel"),xXr.forEach(t),xso=r(H3e," (ALBERT model)"),H3e.forEach(t),kso=i(M),Kh=n(M,"LI",{});var U3e=s(Kh);Yoe=n(U3e,"STRONG",{});var kXr=s(Yoe);Sso=r(kXr,"bart"),kXr.forEach(t),Rso=r(U3e," \u2014 "),bB=n(U3e,"A",{href:!0});var SXr=s(bB);Bso=r(SXr,"BartModel"),SXr.forEach(t),Pso=r(U3e," (BART model)"),U3e.forEach(t),$so=i(M),Zh=n(M,"LI",{});var J3e=s(Zh);Koe=n(J3e,"STRONG",{});var RXr=s(Koe);Iso=r(RXr,"beit"),RXr.forEach(t),qso=r(J3e," \u2014 "),vB=n(J3e,"A",{href:!0});var BXr=s(vB);Nso=r(BXr,"BeitModel"),BXr.forEach(t),jso=r(J3e," (BEiT model)"),J3e.forEach(t),Dso=i(M),ep=n(M,"LI",{});var Y3e=s(ep);Zoe=n(Y3e,"STRONG",{});var PXr=s(Zoe);Gso=r(PXr,"bert"),PXr.forEach(t),Oso=r(Y3e," \u2014 "),FB=n(Y3e,"A",{href:!0});var $Xr=s(FB);Vso=r($Xr,"BertModel"),$Xr.forEach(t),Xso=r(Y3e," (BERT model)"),Y3e.forEach(t),zso=i(M),op=n(M,"LI",{});var K3e=s(op);ere=n(K3e,"STRONG",{});var IXr=s(ere);Qso=r(IXr,"bert-generation"),IXr.forEach(t),Wso=r(K3e," \u2014 "),TB=n(K3e,"A",{href:!0});var qXr=s(TB);Hso=r(qXr,"BertGenerationEncoder"),qXr.forEach(t),Uso=r(K3e," (Bert Generation model)"),K3e.forEach(t),Jso=i(M),rp=n(M,"LI",{});var Z3e=s(rp);ore=n(Z3e,"STRONG",{});var NXr=s(ore);Yso=r(NXr,"big_bird"),NXr.forEach(t),Kso=r(Z3e," \u2014 "),MB=n(Z3e,"A",{href:!0});var jXr=s(MB);Zso=r(jXr,"BigBirdModel"),jXr.forEach(t),elo=r(Z3e," (BigBird model)"),Z3e.forEach(t),olo=i(M),tp=n(M,"LI",{});var eCe=s(tp);rre=n(eCe,"STRONG",{});var DXr=s(rre);rlo=r(DXr,"bigbird_pegasus"),DXr.forEach(t),tlo=r(eCe," \u2014 "),EB=n(eCe,"A",{href:!0});var GXr=s(EB);alo=r(GXr,"BigBirdPegasusModel"),GXr.forEach(t),nlo=r(eCe," (BigBirdPegasus model)"),eCe.forEach(t),slo=i(M),ap=n(M,"LI",{});var oCe=s(ap);tre=n(oCe,"STRONG",{});var OXr=s(tre);llo=r(OXr,"blenderbot"),OXr.forEach(t),ilo=r(oCe," \u2014 "),CB=n(oCe,"A",{href:!0});var VXr=s(CB);dlo=r(VXr,"BlenderbotModel"),VXr.forEach(t),clo=r(oCe," (Blenderbot model)"),oCe.forEach(t),flo=i(M),np=n(M,"LI",{});var rCe=s(np);are=n(rCe,"STRONG",{});var XXr=s(are);mlo=r(XXr,"blenderbot-small"),XXr.forEach(t),glo=r(rCe," \u2014 "),wB=n(rCe,"A",{href:!0});var zXr=s(wB);hlo=r(zXr,"BlenderbotSmallModel"),zXr.forEach(t),plo=r(rCe," (BlenderbotSmall model)"),rCe.forEach(t),_lo=i(M),sp=n(M,"LI",{});var tCe=s(sp);nre=n(tCe,"STRONG",{});var QXr=s(nre);ulo=r(QXr,"camembert"),QXr.forEach(t),blo=r(tCe," \u2014 "),AB=n(tCe,"A",{href:!0});var WXr=s(AB);vlo=r(WXr,"CamembertModel"),WXr.forEach(t),Flo=r(tCe," (CamemBERT model)"),tCe.forEach(t),Tlo=i(M),lp=n(M,"LI",{});var aCe=s(lp);sre=n(aCe,"STRONG",{});var HXr=s(sre);Mlo=r(HXr,"canine"),HXr.forEach(t),Elo=r(aCe," \u2014 "),yB=n(aCe,"A",{href:!0});var UXr=s(yB);Clo=r(UXr,"CanineModel"),UXr.forEach(t),wlo=r(aCe," (Canine model)"),aCe.forEach(t),Alo=i(M),ip=n(M,"LI",{});var nCe=s(ip);lre=n(nCe,"STRONG",{});var JXr=s(lre);ylo=r(JXr,"clip"),JXr.forEach(t),Llo=r(nCe," \u2014 "),LB=n(nCe,"A",{href:!0});var YXr=s(LB);xlo=r(YXr,"CLIPModel"),YXr.forEach(t),klo=r(nCe," (CLIP model)"),nCe.forEach(t),Slo=i(M),dp=n(M,"LI",{});var sCe=s(dp);ire=n(sCe,"STRONG",{});var KXr=s(ire);Rlo=r(KXr,"convbert"),KXr.forEach(t),Blo=r(sCe," \u2014 "),xB=n(sCe,"A",{href:!0});var ZXr=s(xB);Plo=r(ZXr,"ConvBertModel"),ZXr.forEach(t),$lo=r(sCe," (ConvBERT model)"),sCe.forEach(t),Ilo=i(M),cp=n(M,"LI",{});var lCe=s(cp);dre=n(lCe,"STRONG",{});var ezr=s(dre);qlo=r(ezr,"convnext"),ezr.forEach(t),Nlo=r(lCe," \u2014 "),kB=n(lCe,"A",{href:!0});var ozr=s(kB);jlo=r(ozr,"ConvNextModel"),ozr.forEach(t),Dlo=r(lCe," (ConvNext model)"),lCe.forEach(t),Glo=i(M),fp=n(M,"LI",{});var iCe=s(fp);cre=n(iCe,"STRONG",{});var rzr=s(cre);Olo=r(rzr,"ctrl"),rzr.forEach(t),Vlo=r(iCe," \u2014 "),SB=n(iCe,"A",{href:!0});var tzr=s(SB);Xlo=r(tzr,"CTRLModel"),tzr.forEach(t),zlo=r(iCe," (CTRL model)"),iCe.forEach(t),Qlo=i(M),mp=n(M,"LI",{});var dCe=s(mp);fre=n(dCe,"STRONG",{});var azr=s(fre);Wlo=r(azr,"data2vec-audio"),azr.forEach(t),Hlo=r(dCe," \u2014 "),RB=n(dCe,"A",{href:!0});var nzr=s(RB);Ulo=r(nzr,"Data2VecAudioModel"),nzr.forEach(t),Jlo=r(dCe," (Data2VecAudio model)"),dCe.forEach(t),Ylo=i(M),gp=n(M,"LI",{});var cCe=s(gp);mre=n(cCe,"STRONG",{});var szr=s(mre);Klo=r(szr,"data2vec-text"),szr.forEach(t),Zlo=r(cCe," \u2014 "),BB=n(cCe,"A",{href:!0});var lzr=s(BB);eio=r(lzr,"Data2VecTextModel"),lzr.forEach(t),oio=r(cCe," (Data2VecText model)"),cCe.forEach(t),rio=i(M),hp=n(M,"LI",{});var fCe=s(hp);gre=n(fCe,"STRONG",{});var izr=s(gre);tio=r(izr,"data2vec-vision"),izr.forEach(t),aio=r(fCe," \u2014 "),PB=n(fCe,"A",{href:!0});var dzr=s(PB);nio=r(dzr,"Data2VecVisionModel"),dzr.forEach(t),sio=r(fCe," (Data2VecVision model)"),fCe.forEach(t),lio=i(M),pp=n(M,"LI",{});var mCe=s(pp);hre=n(mCe,"STRONG",{});var czr=s(hre);iio=r(czr,"deberta"),czr.forEach(t),dio=r(mCe," \u2014 "),$B=n(mCe,"A",{href:!0});var fzr=s($B);cio=r(fzr,"DebertaModel"),fzr.forEach(t),fio=r(mCe," (DeBERTa model)"),mCe.forEach(t),mio=i(M),_p=n(M,"LI",{});var gCe=s(_p);pre=n(gCe,"STRONG",{});var mzr=s(pre);gio=r(mzr,"deberta-v2"),mzr.forEach(t),hio=r(gCe," \u2014 "),IB=n(gCe,"A",{href:!0});var gzr=s(IB);pio=r(gzr,"DebertaV2Model"),gzr.forEach(t),_io=r(gCe," (DeBERTa-v2 model)"),gCe.forEach(t),uio=i(M),up=n(M,"LI",{});var hCe=s(up);_re=n(hCe,"STRONG",{});var hzr=s(_re);bio=r(hzr,"decision_transformer"),hzr.forEach(t),vio=r(hCe," \u2014 "),qB=n(hCe,"A",{href:!0});var pzr=s(qB);Fio=r(pzr,"DecisionTransformerModel"),pzr.forEach(t),Tio=r(hCe," (Decision Transformer model)"),hCe.forEach(t),Mio=i(M),bp=n(M,"LI",{});var pCe=s(bp);ure=n(pCe,"STRONG",{});var _zr=s(ure);Eio=r(_zr,"deit"),_zr.forEach(t),Cio=r(pCe," \u2014 "),NB=n(pCe,"A",{href:!0});var uzr=s(NB);wio=r(uzr,"DeiTModel"),uzr.forEach(t),Aio=r(pCe," (DeiT model)"),pCe.forEach(t),yio=i(M),vp=n(M,"LI",{});var _Ce=s(vp);bre=n(_Ce,"STRONG",{});var bzr=s(bre);Lio=r(bzr,"detr"),bzr.forEach(t),xio=r(_Ce," \u2014 "),jB=n(_Ce,"A",{href:!0});var vzr=s(jB);kio=r(vzr,"DetrModel"),vzr.forEach(t),Sio=r(_Ce," (DETR model)"),_Ce.forEach(t),Rio=i(M),Fp=n(M,"LI",{});var uCe=s(Fp);vre=n(uCe,"STRONG",{});var Fzr=s(vre);Bio=r(Fzr,"distilbert"),Fzr.forEach(t),Pio=r(uCe," \u2014 "),DB=n(uCe,"A",{href:!0});var Tzr=s(DB);$io=r(Tzr,"DistilBertModel"),Tzr.forEach(t),Iio=r(uCe," (DistilBERT model)"),uCe.forEach(t),qio=i(M),Tp=n(M,"LI",{});var bCe=s(Tp);Fre=n(bCe,"STRONG",{});var Mzr=s(Fre);Nio=r(Mzr,"dpr"),Mzr.forEach(t),jio=r(bCe," \u2014 "),GB=n(bCe,"A",{href:!0});var Ezr=s(GB);Dio=r(Ezr,"DPRQuestionEncoder"),Ezr.forEach(t),Gio=r(bCe," (DPR model)"),bCe.forEach(t),Oio=i(M),Mp=n(M,"LI",{});var vCe=s(Mp);Tre=n(vCe,"STRONG",{});var Czr=s(Tre);Vio=r(Czr,"dpt"),Czr.forEach(t),Xio=r(vCe," \u2014 "),OB=n(vCe,"A",{href:!0});var wzr=s(OB);zio=r(wzr,"DPTModel"),wzr.forEach(t),Qio=r(vCe," (DPT model)"),vCe.forEach(t),Wio=i(M),Ep=n(M,"LI",{});var FCe=s(Ep);Mre=n(FCe,"STRONG",{});var Azr=s(Mre);Hio=r(Azr,"electra"),Azr.forEach(t),Uio=r(FCe," \u2014 "),VB=n(FCe,"A",{href:!0});var yzr=s(VB);Jio=r(yzr,"ElectraModel"),yzr.forEach(t),Yio=r(FCe," (ELECTRA model)"),FCe.forEach(t),Kio=i(M),Cp=n(M,"LI",{});var TCe=s(Cp);Ere=n(TCe,"STRONG",{});var Lzr=s(Ere);Zio=r(Lzr,"flaubert"),Lzr.forEach(t),edo=r(TCe," \u2014 "),XB=n(TCe,"A",{href:!0});var xzr=s(XB);odo=r(xzr,"FlaubertModel"),xzr.forEach(t),rdo=r(TCe," (FlauBERT model)"),TCe.forEach(t),tdo=i(M),wp=n(M,"LI",{});var MCe=s(wp);Cre=n(MCe,"STRONG",{});var kzr=s(Cre);ado=r(kzr,"fnet"),kzr.forEach(t),ndo=r(MCe," \u2014 "),zB=n(MCe,"A",{href:!0});var Szr=s(zB);sdo=r(Szr,"FNetModel"),Szr.forEach(t),ldo=r(MCe," (FNet model)"),MCe.forEach(t),ido=i(M),Ap=n(M,"LI",{});var ECe=s(Ap);wre=n(ECe,"STRONG",{});var Rzr=s(wre);ddo=r(Rzr,"fsmt"),Rzr.forEach(t),cdo=r(ECe," \u2014 "),QB=n(ECe,"A",{href:!0});var Bzr=s(QB);fdo=r(Bzr,"FSMTModel"),Bzr.forEach(t),mdo=r(ECe," (FairSeq Machine-Translation model)"),ECe.forEach(t),gdo=i(M),Gs=n(M,"LI",{});var b9=s(Gs);Are=n(b9,"STRONG",{});var Pzr=s(Are);hdo=r(Pzr,"funnel"),Pzr.forEach(t),pdo=r(b9," \u2014 "),WB=n(b9,"A",{href:!0});var $zr=s(WB);_do=r($zr,"FunnelModel"),$zr.forEach(t),udo=r(b9," or "),HB=n(b9,"A",{href:!0});var Izr=s(HB);bdo=r(Izr,"FunnelBaseModel"),Izr.forEach(t),vdo=r(b9," (Funnel Transformer model)"),b9.forEach(t),Fdo=i(M),yp=n(M,"LI",{});var CCe=s(yp);yre=n(CCe,"STRONG",{});var qzr=s(yre);Tdo=r(qzr,"glpn"),qzr.forEach(t),Mdo=r(CCe," \u2014 "),UB=n(CCe,"A",{href:!0});var Nzr=s(UB);Edo=r(Nzr,"GLPNModel"),Nzr.forEach(t),Cdo=r(CCe," (GLPN model)"),CCe.forEach(t),wdo=i(M),Lp=n(M,"LI",{});var wCe=s(Lp);Lre=n(wCe,"STRONG",{});var jzr=s(Lre);Ado=r(jzr,"gpt2"),jzr.forEach(t),ydo=r(wCe," \u2014 "),JB=n(wCe,"A",{href:!0});var Dzr=s(JB);Ldo=r(Dzr,"GPT2Model"),Dzr.forEach(t),xdo=r(wCe," (OpenAI GPT-2 model)"),wCe.forEach(t),kdo=i(M),xp=n(M,"LI",{});var ACe=s(xp);xre=n(ACe,"STRONG",{});var Gzr=s(xre);Sdo=r(Gzr,"gpt_neo"),Gzr.forEach(t),Rdo=r(ACe," \u2014 "),YB=n(ACe,"A",{href:!0});var Ozr=s(YB);Bdo=r(Ozr,"GPTNeoModel"),Ozr.forEach(t),Pdo=r(ACe," (GPT Neo model)"),ACe.forEach(t),$do=i(M),kp=n(M,"LI",{});var yCe=s(kp);kre=n(yCe,"STRONG",{});var Vzr=s(kre);Ido=r(Vzr,"gptj"),Vzr.forEach(t),qdo=r(yCe," \u2014 "),KB=n(yCe,"A",{href:!0});var Xzr=s(KB);Ndo=r(Xzr,"GPTJModel"),Xzr.forEach(t),jdo=r(yCe," (GPT-J model)"),yCe.forEach(t),Ddo=i(M),Sp=n(M,"LI",{});var LCe=s(Sp);Sre=n(LCe,"STRONG",{});var zzr=s(Sre);Gdo=r(zzr,"hubert"),zzr.forEach(t),Odo=r(LCe," \u2014 "),ZB=n(LCe,"A",{href:!0});var Qzr=s(ZB);Vdo=r(Qzr,"HubertModel"),Qzr.forEach(t),Xdo=r(LCe," (Hubert model)"),LCe.forEach(t),zdo=i(M),Rp=n(M,"LI",{});var xCe=s(Rp);Rre=n(xCe,"STRONG",{});var Wzr=s(Rre);Qdo=r(Wzr,"ibert"),Wzr.forEach(t),Wdo=r(xCe," \u2014 "),eP=n(xCe,"A",{href:!0});var Hzr=s(eP);Hdo=r(Hzr,"IBertModel"),Hzr.forEach(t),Udo=r(xCe," (I-BERT model)"),xCe.forEach(t),Jdo=i(M),Bp=n(M,"LI",{});var kCe=s(Bp);Bre=n(kCe,"STRONG",{});var Uzr=s(Bre);Ydo=r(Uzr,"imagegpt"),Uzr.forEach(t),Kdo=r(kCe," \u2014 "),oP=n(kCe,"A",{href:!0});var Jzr=s(oP);Zdo=r(Jzr,"ImageGPTModel"),Jzr.forEach(t),eco=r(kCe," (ImageGPT model)"),kCe.forEach(t),oco=i(M),Pp=n(M,"LI",{});var SCe=s(Pp);Pre=n(SCe,"STRONG",{});var Yzr=s(Pre);rco=r(Yzr,"layoutlm"),Yzr.forEach(t),tco=r(SCe," \u2014 "),rP=n(SCe,"A",{href:!0});var Kzr=s(rP);aco=r(Kzr,"LayoutLMModel"),Kzr.forEach(t),nco=r(SCe," (LayoutLM model)"),SCe.forEach(t),sco=i(M),$p=n(M,"LI",{});var RCe=s($p);$re=n(RCe,"STRONG",{});var Zzr=s($re);lco=r(Zzr,"layoutlmv2"),Zzr.forEach(t),ico=r(RCe," \u2014 "),tP=n(RCe,"A",{href:!0});var eQr=s(tP);dco=r(eQr,"LayoutLMv2Model"),eQr.forEach(t),cco=r(RCe," (LayoutLMv2 model)"),RCe.forEach(t),fco=i(M),Ip=n(M,"LI",{});var BCe=s(Ip);Ire=n(BCe,"STRONG",{});var oQr=s(Ire);mco=r(oQr,"led"),oQr.forEach(t),gco=r(BCe," \u2014 "),aP=n(BCe,"A",{href:!0});var rQr=s(aP);hco=r(rQr,"LEDModel"),rQr.forEach(t),pco=r(BCe," (LED model)"),BCe.forEach(t),_co=i(M),qp=n(M,"LI",{});var PCe=s(qp);qre=n(PCe,"STRONG",{});var tQr=s(qre);uco=r(tQr,"longformer"),tQr.forEach(t),bco=r(PCe," \u2014 "),nP=n(PCe,"A",{href:!0});var aQr=s(nP);vco=r(aQr,"LongformerModel"),aQr.forEach(t),Fco=r(PCe," (Longformer model)"),PCe.forEach(t),Tco=i(M),Np=n(M,"LI",{});var $Ce=s(Np);Nre=n($Ce,"STRONG",{});var nQr=s(Nre);Mco=r(nQr,"luke"),nQr.forEach(t),Eco=r($Ce," \u2014 "),sP=n($Ce,"A",{href:!0});var sQr=s(sP);Cco=r(sQr,"LukeModel"),sQr.forEach(t),wco=r($Ce," (LUKE model)"),$Ce.forEach(t),Aco=i(M),jp=n(M,"LI",{});var ICe=s(jp);jre=n(ICe,"STRONG",{});var lQr=s(jre);yco=r(lQr,"lxmert"),lQr.forEach(t),Lco=r(ICe," \u2014 "),lP=n(ICe,"A",{href:!0});var iQr=s(lP);xco=r(iQr,"LxmertModel"),iQr.forEach(t),kco=r(ICe," (LXMERT model)"),ICe.forEach(t),Sco=i(M),Dp=n(M,"LI",{});var qCe=s(Dp);Dre=n(qCe,"STRONG",{});var dQr=s(Dre);Rco=r(dQr,"m2m_100"),dQr.forEach(t),Bco=r(qCe," \u2014 "),iP=n(qCe,"A",{href:!0});var cQr=s(iP);Pco=r(cQr,"M2M100Model"),cQr.forEach(t),$co=r(qCe," (M2M100 model)"),qCe.forEach(t),Ico=i(M),Gp=n(M,"LI",{});var NCe=s(Gp);Gre=n(NCe,"STRONG",{});var fQr=s(Gre);qco=r(fQr,"marian"),fQr.forEach(t),Nco=r(NCe," \u2014 "),dP=n(NCe,"A",{href:!0});var mQr=s(dP);jco=r(mQr,"MarianModel"),mQr.forEach(t),Dco=r(NCe," (Marian model)"),NCe.forEach(t),Gco=i(M),Op=n(M,"LI",{});var jCe=s(Op);Ore=n(jCe,"STRONG",{});var gQr=s(Ore);Oco=r(gQr,"maskformer"),gQr.forEach(t),Vco=r(jCe," \u2014 "),cP=n(jCe,"A",{href:!0});var hQr=s(cP);Xco=r(hQr,"MaskFormerModel"),hQr.forEach(t),zco=r(jCe," (MaskFormer model)"),jCe.forEach(t),Qco=i(M),Vp=n(M,"LI",{});var DCe=s(Vp);Vre=n(DCe,"STRONG",{});var pQr=s(Vre);Wco=r(pQr,"mbart"),pQr.forEach(t),Hco=r(DCe," \u2014 "),fP=n(DCe,"A",{href:!0});var _Qr=s(fP);Uco=r(_Qr,"MBartModel"),_Qr.forEach(t),Jco=r(DCe," (mBART model)"),DCe.forEach(t),Yco=i(M),Xp=n(M,"LI",{});var GCe=s(Xp);Xre=n(GCe,"STRONG",{});var uQr=s(Xre);Kco=r(uQr,"megatron-bert"),uQr.forEach(t),Zco=r(GCe," \u2014 "),mP=n(GCe,"A",{href:!0});var bQr=s(mP);efo=r(bQr,"MegatronBertModel"),bQr.forEach(t),ofo=r(GCe," (MegatronBert model)"),GCe.forEach(t),rfo=i(M),zp=n(M,"LI",{});var OCe=s(zp);zre=n(OCe,"STRONG",{});var vQr=s(zre);tfo=r(vQr,"mobilebert"),vQr.forEach(t),afo=r(OCe," \u2014 "),gP=n(OCe,"A",{href:!0});var FQr=s(gP);nfo=r(FQr,"MobileBertModel"),FQr.forEach(t),sfo=r(OCe," (MobileBERT model)"),OCe.forEach(t),lfo=i(M),Qp=n(M,"LI",{});var VCe=s(Qp);Qre=n(VCe,"STRONG",{});var TQr=s(Qre);ifo=r(TQr,"mpnet"),TQr.forEach(t),dfo=r(VCe," \u2014 "),hP=n(VCe,"A",{href:!0});var MQr=s(hP);cfo=r(MQr,"MPNetModel"),MQr.forEach(t),ffo=r(VCe," (MPNet model)"),VCe.forEach(t),mfo=i(M),Wp=n(M,"LI",{});var XCe=s(Wp);Wre=n(XCe,"STRONG",{});var EQr=s(Wre);gfo=r(EQr,"mt5"),EQr.forEach(t),hfo=r(XCe," \u2014 "),pP=n(XCe,"A",{href:!0});var CQr=s(pP);pfo=r(CQr,"MT5Model"),CQr.forEach(t),_fo=r(XCe," (mT5 model)"),XCe.forEach(t),ufo=i(M),Hp=n(M,"LI",{});var zCe=s(Hp);Hre=n(zCe,"STRONG",{});var wQr=s(Hre);bfo=r(wQr,"nystromformer"),wQr.forEach(t),vfo=r(zCe," \u2014 "),_P=n(zCe,"A",{href:!0});var AQr=s(_P);Ffo=r(AQr,"NystromformerModel"),AQr.forEach(t),Tfo=r(zCe," (Nystromformer model)"),zCe.forEach(t),Mfo=i(M),Up=n(M,"LI",{});var QCe=s(Up);Ure=n(QCe,"STRONG",{});var yQr=s(Ure);Efo=r(yQr,"openai-gpt"),yQr.forEach(t),Cfo=r(QCe," \u2014 "),uP=n(QCe,"A",{href:!0});var LQr=s(uP);wfo=r(LQr,"OpenAIGPTModel"),LQr.forEach(t),Afo=r(QCe," (OpenAI GPT model)"),QCe.forEach(t),yfo=i(M),Jp=n(M,"LI",{});var WCe=s(Jp);Jre=n(WCe,"STRONG",{});var xQr=s(Jre);Lfo=r(xQr,"pegasus"),xQr.forEach(t),xfo=r(WCe," \u2014 "),bP=n(WCe,"A",{href:!0});var kQr=s(bP);kfo=r(kQr,"PegasusModel"),kQr.forEach(t),Sfo=r(WCe," (Pegasus model)"),WCe.forEach(t),Rfo=i(M),Yp=n(M,"LI",{});var HCe=s(Yp);Yre=n(HCe,"STRONG",{});var SQr=s(Yre);Bfo=r(SQr,"perceiver"),SQr.forEach(t),Pfo=r(HCe," \u2014 "),vP=n(HCe,"A",{href:!0});var RQr=s(vP);$fo=r(RQr,"PerceiverModel"),RQr.forEach(t),Ifo=r(HCe," (Perceiver model)"),HCe.forEach(t),qfo=i(M),Kp=n(M,"LI",{});var UCe=s(Kp);Kre=n(UCe,"STRONG",{});var BQr=s(Kre);Nfo=r(BQr,"plbart"),BQr.forEach(t),jfo=r(UCe," \u2014 "),FP=n(UCe,"A",{href:!0});var PQr=s(FP);Dfo=r(PQr,"PLBartModel"),PQr.forEach(t),Gfo=r(UCe," (PLBart model)"),UCe.forEach(t),Ofo=i(M),Zp=n(M,"LI",{});var JCe=s(Zp);Zre=n(JCe,"STRONG",{});var $Qr=s(Zre);Vfo=r($Qr,"poolformer"),$Qr.forEach(t),Xfo=r(JCe," \u2014 "),TP=n(JCe,"A",{href:!0});var IQr=s(TP);zfo=r(IQr,"PoolFormerModel"),IQr.forEach(t),Qfo=r(JCe," (PoolFormer model)"),JCe.forEach(t),Wfo=i(M),e_=n(M,"LI",{});var YCe=s(e_);ete=n(YCe,"STRONG",{});var qQr=s(ete);Hfo=r(qQr,"prophetnet"),qQr.forEach(t),Ufo=r(YCe," \u2014 "),MP=n(YCe,"A",{href:!0});var NQr=s(MP);Jfo=r(NQr,"ProphetNetModel"),NQr.forEach(t),Yfo=r(YCe," (ProphetNet model)"),YCe.forEach(t),Kfo=i(M),o_=n(M,"LI",{});var KCe=s(o_);ote=n(KCe,"STRONG",{});var jQr=s(ote);Zfo=r(jQr,"qdqbert"),jQr.forEach(t),emo=r(KCe," \u2014 "),EP=n(KCe,"A",{href:!0});var DQr=s(EP);omo=r(DQr,"QDQBertModel"),DQr.forEach(t),rmo=r(KCe," (QDQBert model)"),KCe.forEach(t),tmo=i(M),r_=n(M,"LI",{});var ZCe=s(r_);rte=n(ZCe,"STRONG",{});var GQr=s(rte);amo=r(GQr,"reformer"),GQr.forEach(t),nmo=r(ZCe," \u2014 "),CP=n(ZCe,"A",{href:!0});var OQr=s(CP);smo=r(OQr,"ReformerModel"),OQr.forEach(t),lmo=r(ZCe," (Reformer model)"),ZCe.forEach(t),imo=i(M),t_=n(M,"LI",{});var ewe=s(t_);tte=n(ewe,"STRONG",{});var VQr=s(tte);dmo=r(VQr,"regnet"),VQr.forEach(t),cmo=r(ewe," \u2014 "),wP=n(ewe,"A",{href:!0});var XQr=s(wP);fmo=r(XQr,"RegNetModel"),XQr.forEach(t),mmo=r(ewe," (RegNet model)"),ewe.forEach(t),gmo=i(M),a_=n(M,"LI",{});var owe=s(a_);ate=n(owe,"STRONG",{});var zQr=s(ate);hmo=r(zQr,"rembert"),zQr.forEach(t),pmo=r(owe," \u2014 "),AP=n(owe,"A",{href:!0});var QQr=s(AP);_mo=r(QQr,"RemBertModel"),QQr.forEach(t),umo=r(owe," (RemBERT model)"),owe.forEach(t),bmo=i(M),n_=n(M,"LI",{});var rwe=s(n_);nte=n(rwe,"STRONG",{});var WQr=s(nte);vmo=r(WQr,"resnet"),WQr.forEach(t),Fmo=r(rwe," \u2014 "),yP=n(rwe,"A",{href:!0});var HQr=s(yP);Tmo=r(HQr,"ResNetModel"),HQr.forEach(t),Mmo=r(rwe," (ResNet model)"),rwe.forEach(t),Emo=i(M),s_=n(M,"LI",{});var twe=s(s_);ste=n(twe,"STRONG",{});var UQr=s(ste);Cmo=r(UQr,"retribert"),UQr.forEach(t),wmo=r(twe," \u2014 "),LP=n(twe,"A",{href:!0});var JQr=s(LP);Amo=r(JQr,"RetriBertModel"),JQr.forEach(t),ymo=r(twe," (RetriBERT model)"),twe.forEach(t),Lmo=i(M),l_=n(M,"LI",{});var awe=s(l_);lte=n(awe,"STRONG",{});var YQr=s(lte);xmo=r(YQr,"roberta"),YQr.forEach(t),kmo=r(awe," \u2014 "),xP=n(awe,"A",{href:!0});var KQr=s(xP);Smo=r(KQr,"RobertaModel"),KQr.forEach(t),Rmo=r(awe," (RoBERTa model)"),awe.forEach(t),Bmo=i(M),i_=n(M,"LI",{});var nwe=s(i_);ite=n(nwe,"STRONG",{});var ZQr=s(ite);Pmo=r(ZQr,"roformer"),ZQr.forEach(t),$mo=r(nwe," \u2014 "),kP=n(nwe,"A",{href:!0});var eWr=s(kP);Imo=r(eWr,"RoFormerModel"),eWr.forEach(t),qmo=r(nwe," (RoFormer model)"),nwe.forEach(t),Nmo=i(M),d_=n(M,"LI",{});var swe=s(d_);dte=n(swe,"STRONG",{});var oWr=s(dte);jmo=r(oWr,"segformer"),oWr.forEach(t),Dmo=r(swe," \u2014 "),SP=n(swe,"A",{href:!0});var rWr=s(SP);Gmo=r(rWr,"SegformerModel"),rWr.forEach(t),Omo=r(swe," (SegFormer model)"),swe.forEach(t),Vmo=i(M),c_=n(M,"LI",{});var lwe=s(c_);cte=n(lwe,"STRONG",{});var tWr=s(cte);Xmo=r(tWr,"sew"),tWr.forEach(t),zmo=r(lwe," \u2014 "),RP=n(lwe,"A",{href:!0});var aWr=s(RP);Qmo=r(aWr,"SEWModel"),aWr.forEach(t),Wmo=r(lwe," (SEW model)"),lwe.forEach(t),Hmo=i(M),f_=n(M,"LI",{});var iwe=s(f_);fte=n(iwe,"STRONG",{});var nWr=s(fte);Umo=r(nWr,"sew-d"),nWr.forEach(t),Jmo=r(iwe," \u2014 "),BP=n(iwe,"A",{href:!0});var sWr=s(BP);Ymo=r(sWr,"SEWDModel"),sWr.forEach(t),Kmo=r(iwe," (SEW-D model)"),iwe.forEach(t),Zmo=i(M),m_=n(M,"LI",{});var dwe=s(m_);mte=n(dwe,"STRONG",{});var lWr=s(mte);ego=r(lWr,"speech_to_text"),lWr.forEach(t),ogo=r(dwe," \u2014 "),PP=n(dwe,"A",{href:!0});var iWr=s(PP);rgo=r(iWr,"Speech2TextModel"),iWr.forEach(t),tgo=r(dwe," (Speech2Text model)"),dwe.forEach(t),ago=i(M),g_=n(M,"LI",{});var cwe=s(g_);gte=n(cwe,"STRONG",{});var dWr=s(gte);ngo=r(dWr,"splinter"),dWr.forEach(t),sgo=r(cwe," \u2014 "),$P=n(cwe,"A",{href:!0});var cWr=s($P);lgo=r(cWr,"SplinterModel"),cWr.forEach(t),igo=r(cwe," (Splinter model)"),cwe.forEach(t),dgo=i(M),h_=n(M,"LI",{});var fwe=s(h_);hte=n(fwe,"STRONG",{});var fWr=s(hte);cgo=r(fWr,"squeezebert"),fWr.forEach(t),fgo=r(fwe," \u2014 "),IP=n(fwe,"A",{href:!0});var mWr=s(IP);mgo=r(mWr,"SqueezeBertModel"),mWr.forEach(t),ggo=r(fwe," (SqueezeBERT model)"),fwe.forEach(t),hgo=i(M),p_=n(M,"LI",{});var mwe=s(p_);pte=n(mwe,"STRONG",{});var gWr=s(pte);pgo=r(gWr,"swin"),gWr.forEach(t),_go=r(mwe," \u2014 "),qP=n(mwe,"A",{href:!0});var hWr=s(qP);ugo=r(hWr,"SwinModel"),hWr.forEach(t),bgo=r(mwe," (Swin model)"),mwe.forEach(t),vgo=i(M),__=n(M,"LI",{});var gwe=s(__);_te=n(gwe,"STRONG",{});var pWr=s(_te);Fgo=r(pWr,"t5"),pWr.forEach(t),Tgo=r(gwe," \u2014 "),NP=n(gwe,"A",{href:!0});var _Wr=s(NP);Mgo=r(_Wr,"T5Model"),_Wr.forEach(t),Ego=r(gwe," (T5 model)"),gwe.forEach(t),Cgo=i(M),u_=n(M,"LI",{});var hwe=s(u_);ute=n(hwe,"STRONG",{});var uWr=s(ute);wgo=r(uWr,"tapas"),uWr.forEach(t),Ago=r(hwe," \u2014 "),jP=n(hwe,"A",{href:!0});var bWr=s(jP);ygo=r(bWr,"TapasModel"),bWr.forEach(t),Lgo=r(hwe," (TAPAS model)"),hwe.forEach(t),xgo=i(M),b_=n(M,"LI",{});var pwe=s(b_);bte=n(pwe,"STRONG",{});var vWr=s(bte);kgo=r(vWr,"transfo-xl"),vWr.forEach(t),Sgo=r(pwe," \u2014 "),DP=n(pwe,"A",{href:!0});var FWr=s(DP);Rgo=r(FWr,"TransfoXLModel"),FWr.forEach(t),Bgo=r(pwe," (Transformer-XL model)"),pwe.forEach(t),Pgo=i(M),v_=n(M,"LI",{});var _we=s(v_);vte=n(_we,"STRONG",{});var TWr=s(vte);$go=r(TWr,"unispeech"),TWr.forEach(t),Igo=r(_we," \u2014 "),GP=n(_we,"A",{href:!0});var MWr=s(GP);qgo=r(MWr,"UniSpeechModel"),MWr.forEach(t),Ngo=r(_we," (UniSpeech model)"),_we.forEach(t),jgo=i(M),F_=n(M,"LI",{});var uwe=s(F_);Fte=n(uwe,"STRONG",{});var EWr=s(Fte);Dgo=r(EWr,"unispeech-sat"),EWr.forEach(t),Ggo=r(uwe," \u2014 "),OP=n(uwe,"A",{href:!0});var CWr=s(OP);Ogo=r(CWr,"UniSpeechSatModel"),CWr.forEach(t),Vgo=r(uwe," (UniSpeechSat model)"),uwe.forEach(t),Xgo=i(M),T_=n(M,"LI",{});var bwe=s(T_);Tte=n(bwe,"STRONG",{});var wWr=s(Tte);zgo=r(wWr,"van"),wWr.forEach(t),Qgo=r(bwe," \u2014 "),VP=n(bwe,"A",{href:!0});var AWr=s(VP);Wgo=r(AWr,"VanModel"),AWr.forEach(t),Hgo=r(bwe," (VAN model)"),bwe.forEach(t),Ugo=i(M),M_=n(M,"LI",{});var vwe=s(M_);Mte=n(vwe,"STRONG",{});var yWr=s(Mte);Jgo=r(yWr,"vilt"),yWr.forEach(t),Ygo=r(vwe," \u2014 "),XP=n(vwe,"A",{href:!0});var LWr=s(XP);Kgo=r(LWr,"ViltModel"),LWr.forEach(t),Zgo=r(vwe," (ViLT model)"),vwe.forEach(t),eho=i(M),E_=n(M,"LI",{});var Fwe=s(E_);Ete=n(Fwe,"STRONG",{});var xWr=s(Ete);oho=r(xWr,"vision-text-dual-encoder"),xWr.forEach(t),rho=r(Fwe," \u2014 "),zP=n(Fwe,"A",{href:!0});var kWr=s(zP);tho=r(kWr,"VisionTextDualEncoderModel"),kWr.forEach(t),aho=r(Fwe," (VisionTextDualEncoder model)"),Fwe.forEach(t),nho=i(M),C_=n(M,"LI",{});var Twe=s(C_);Cte=n(Twe,"STRONG",{});var SWr=s(Cte);sho=r(SWr,"visual_bert"),SWr.forEach(t),lho=r(Twe," \u2014 "),QP=n(Twe,"A",{href:!0});var RWr=s(QP);iho=r(RWr,"VisualBertModel"),RWr.forEach(t),dho=r(Twe," (VisualBert model)"),Twe.forEach(t),cho=i(M),w_=n(M,"LI",{});var Mwe=s(w_);wte=n(Mwe,"STRONG",{});var BWr=s(wte);fho=r(BWr,"vit"),BWr.forEach(t),mho=r(Mwe," \u2014 "),WP=n(Mwe,"A",{href:!0});var PWr=s(WP);gho=r(PWr,"ViTModel"),PWr.forEach(t),hho=r(Mwe," (ViT model)"),Mwe.forEach(t),pho=i(M),A_=n(M,"LI",{});var Ewe=s(A_);Ate=n(Ewe,"STRONG",{});var $Wr=s(Ate);_ho=r($Wr,"vit_mae"),$Wr.forEach(t),uho=r(Ewe," \u2014 "),HP=n(Ewe,"A",{href:!0});var IWr=s(HP);bho=r(IWr,"ViTMAEModel"),IWr.forEach(t),vho=r(Ewe," (ViTMAE model)"),Ewe.forEach(t),Fho=i(M),y_=n(M,"LI",{});var Cwe=s(y_);yte=n(Cwe,"STRONG",{});var qWr=s(yte);Tho=r(qWr,"wav2vec2"),qWr.forEach(t),Mho=r(Cwe," \u2014 "),UP=n(Cwe,"A",{href:!0});var NWr=s(UP);Eho=r(NWr,"Wav2Vec2Model"),NWr.forEach(t),Cho=r(Cwe," (Wav2Vec2 model)"),Cwe.forEach(t),who=i(M),L_=n(M,"LI",{});var wwe=s(L_);Lte=n(wwe,"STRONG",{});var jWr=s(Lte);Aho=r(jWr,"wavlm"),jWr.forEach(t),yho=r(wwe," \u2014 "),JP=n(wwe,"A",{href:!0});var DWr=s(JP);Lho=r(DWr,"WavLMModel"),DWr.forEach(t),xho=r(wwe," (WavLM model)"),wwe.forEach(t),kho=i(M),x_=n(M,"LI",{});var Awe=s(x_);xte=n(Awe,"STRONG",{});var GWr=s(xte);Sho=r(GWr,"xglm"),GWr.forEach(t),Rho=r(Awe," \u2014 "),YP=n(Awe,"A",{href:!0});var OWr=s(YP);Bho=r(OWr,"XGLMModel"),OWr.forEach(t),Pho=r(Awe," (XGLM model)"),Awe.forEach(t),$ho=i(M),k_=n(M,"LI",{});var ywe=s(k_);kte=n(ywe,"STRONG",{});var VWr=s(kte);Iho=r(VWr,"xlm"),VWr.forEach(t),qho=r(ywe," \u2014 "),KP=n(ywe,"A",{href:!0});var XWr=s(KP);Nho=r(XWr,"XLMModel"),XWr.forEach(t),jho=r(ywe," (XLM model)"),ywe.forEach(t),Dho=i(M),S_=n(M,"LI",{});var Lwe=s(S_);Ste=n(Lwe,"STRONG",{});var zWr=s(Ste);Gho=r(zWr,"xlm-prophetnet"),zWr.forEach(t),Oho=r(Lwe," \u2014 "),ZP=n(Lwe,"A",{href:!0});var QWr=s(ZP);Vho=r(QWr,"XLMProphetNetModel"),QWr.forEach(t),Xho=r(Lwe," (XLMProphetNet model)"),Lwe.forEach(t),zho=i(M),R_=n(M,"LI",{});var xwe=s(R_);Rte=n(xwe,"STRONG",{});var WWr=s(Rte);Qho=r(WWr,"xlm-roberta"),WWr.forEach(t),Who=r(xwe," \u2014 "),e$=n(xwe,"A",{href:!0});var HWr=s(e$);Hho=r(HWr,"XLMRobertaModel"),HWr.forEach(t),Uho=r(xwe," (XLM-RoBERTa model)"),xwe.forEach(t),Jho=i(M),B_=n(M,"LI",{});var kwe=s(B_);Bte=n(kwe,"STRONG",{});var UWr=s(Bte);Yho=r(UWr,"xlm-roberta-xl"),UWr.forEach(t),Kho=r(kwe," \u2014 "),o$=n(kwe,"A",{href:!0});var JWr=s(o$);Zho=r(JWr,"XLMRobertaXLModel"),JWr.forEach(t),epo=r(kwe," (XLM-RoBERTa-XL model)"),kwe.forEach(t),opo=i(M),P_=n(M,"LI",{});var Swe=s(P_);Pte=n(Swe,"STRONG",{});var YWr=s(Pte);rpo=r(YWr,"xlnet"),YWr.forEach(t),tpo=r(Swe," \u2014 "),r$=n(Swe,"A",{href:!0});var KWr=s(r$);apo=r(KWr,"XLNetModel"),KWr.forEach(t),npo=r(Swe," (XLNet model)"),Swe.forEach(t),spo=i(M),$_=n(M,"LI",{});var Rwe=s($_);$te=n(Rwe,"STRONG",{});var ZWr=s($te);lpo=r(ZWr,"yoso"),ZWr.forEach(t),ipo=r(Rwe," \u2014 "),t$=n(Rwe,"A",{href:!0});var eHr=s(t$);dpo=r(eHr,"YosoModel"),eHr.forEach(t),cpo=r(Rwe," (YOSO model)"),Rwe.forEach(t),M.forEach(t),fpo=i(Dt),I_=n(Dt,"P",{});var Bwe=s(I_);mpo=r(Bwe,"The model is set in evaluation mode by default using "),Ite=n(Bwe,"CODE",{});var oHr=s(Ite);gpo=r(oHr,"model.eval()"),oHr.forEach(t),hpo=r(Bwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qte=n(Bwe,"CODE",{});var rHr=s(qte);ppo=r(rHr,"model.train()"),rHr.forEach(t),Bwe.forEach(t),_po=i(Dt),Nte=n(Dt,"P",{});var tHr=s(Nte);upo=r(tHr,"Examples:"),tHr.forEach(t),bpo=i(Dt),m(h6.$$.fragment,Dt),Dt.forEach(t),Hs.forEach(t),WRe=i(c),od=n(c,"H2",{class:!0});var r$e=s(od);q_=n(r$e,"A",{id:!0,class:!0,href:!0});var aHr=s(q_);jte=n(aHr,"SPAN",{});var nHr=s(jte);m(p6.$$.fragment,nHr),nHr.forEach(t),aHr.forEach(t),vpo=i(r$e),Dte=n(r$e,"SPAN",{});var sHr=s(Dte);Fpo=r(sHr,"AutoModelForPreTraining"),sHr.forEach(t),r$e.forEach(t),HRe=i(c),Yo=n(c,"DIV",{class:!0});var Js=s(Yo);m(_6.$$.fragment,Js),Tpo=i(Js),rd=n(Js,"P",{});var CU=s(rd);Mpo=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),a$=n(CU,"A",{href:!0});var lHr=s(a$);Epo=r(lHr,"from_pretrained()"),lHr.forEach(t),Cpo=r(CU," class method or the "),n$=n(CU,"A",{href:!0});var iHr=s(n$);wpo=r(iHr,"from_config()"),iHr.forEach(t),Apo=r(CU,` class
method.`),CU.forEach(t),ypo=i(Js),u6=n(Js,"P",{});var t$e=s(u6);Lpo=r(t$e,"This class cannot be instantiated directly using "),Gte=n(t$e,"CODE",{});var dHr=s(Gte);xpo=r(dHr,"__init__()"),dHr.forEach(t),kpo=r(t$e," (throws an error)."),t$e.forEach(t),Spo=i(Js),zr=n(Js,"DIV",{class:!0});var Ys=s(zr);m(b6.$$.fragment,Ys),Rpo=i(Ys),Ote=n(Ys,"P",{});var cHr=s(Ote);Bpo=r(cHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cHr.forEach(t),Ppo=i(Ys),td=n(Ys,"P",{});var wU=s(td);$po=r(wU,`Note:
Loading a model from its configuration file does `),Vte=n(wU,"STRONG",{});var fHr=s(Vte);Ipo=r(fHr,"not"),fHr.forEach(t),qpo=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),s$=n(wU,"A",{href:!0});var mHr=s(s$);Npo=r(mHr,"from_pretrained()"),mHr.forEach(t),jpo=r(wU," to load the model weights."),wU.forEach(t),Dpo=i(Ys),Xte=n(Ys,"P",{});var gHr=s(Xte);Gpo=r(gHr,"Examples:"),gHr.forEach(t),Opo=i(Ys),m(v6.$$.fragment,Ys),Ys.forEach(t),Vpo=i(Js),Ne=n(Js,"DIV",{class:!0});var Gt=s(Ne);m(F6.$$.fragment,Gt),Xpo=i(Gt),zte=n(Gt,"P",{});var hHr=s(zte);zpo=r(hHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hHr.forEach(t),Qpo=i(Gt),za=n(Gt,"P",{});var RC=s(za);Wpo=r(RC,"The model class to instantiate is selected based on the "),Qte=n(RC,"CODE",{});var pHr=s(Qte);Hpo=r(pHr,"model_type"),pHr.forEach(t),Upo=r(RC,` property of the config object (either
passed as an argument or loaded from `),Wte=n(RC,"CODE",{});var _Hr=s(Wte);Jpo=r(_Hr,"pretrained_model_name_or_path"),_Hr.forEach(t),Ypo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hte=n(RC,"CODE",{});var uHr=s(Hte);Kpo=r(uHr,"pretrained_model_name_or_path"),uHr.forEach(t),Zpo=r(RC,":"),RC.forEach(t),e_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);N_=n(B,"LI",{});var Pwe=s(N_);Ute=n(Pwe,"STRONG",{});var bHr=s(Ute);o_o=r(bHr,"albert"),bHr.forEach(t),r_o=r(Pwe," \u2014 "),l$=n(Pwe,"A",{href:!0});var vHr=s(l$);t_o=r(vHr,"AlbertForPreTraining"),vHr.forEach(t),a_o=r(Pwe," (ALBERT model)"),Pwe.forEach(t),n_o=i(B),j_=n(B,"LI",{});var $we=s(j_);Jte=n($we,"STRONG",{});var FHr=s(Jte);s_o=r(FHr,"bart"),FHr.forEach(t),l_o=r($we," \u2014 "),i$=n($we,"A",{href:!0});var THr=s(i$);i_o=r(THr,"BartForConditionalGeneration"),THr.forEach(t),d_o=r($we," (BART model)"),$we.forEach(t),c_o=i(B),D_=n(B,"LI",{});var Iwe=s(D_);Yte=n(Iwe,"STRONG",{});var MHr=s(Yte);f_o=r(MHr,"bert"),MHr.forEach(t),m_o=r(Iwe," \u2014 "),d$=n(Iwe,"A",{href:!0});var EHr=s(d$);g_o=r(EHr,"BertForPreTraining"),EHr.forEach(t),h_o=r(Iwe," (BERT model)"),Iwe.forEach(t),p_o=i(B),G_=n(B,"LI",{});var qwe=s(G_);Kte=n(qwe,"STRONG",{});var CHr=s(Kte);__o=r(CHr,"big_bird"),CHr.forEach(t),u_o=r(qwe," \u2014 "),c$=n(qwe,"A",{href:!0});var wHr=s(c$);b_o=r(wHr,"BigBirdForPreTraining"),wHr.forEach(t),v_o=r(qwe," (BigBird model)"),qwe.forEach(t),F_o=i(B),O_=n(B,"LI",{});var Nwe=s(O_);Zte=n(Nwe,"STRONG",{});var AHr=s(Zte);T_o=r(AHr,"camembert"),AHr.forEach(t),M_o=r(Nwe," \u2014 "),f$=n(Nwe,"A",{href:!0});var yHr=s(f$);E_o=r(yHr,"CamembertForMaskedLM"),yHr.forEach(t),C_o=r(Nwe," (CamemBERT model)"),Nwe.forEach(t),w_o=i(B),V_=n(B,"LI",{});var jwe=s(V_);eae=n(jwe,"STRONG",{});var LHr=s(eae);A_o=r(LHr,"ctrl"),LHr.forEach(t),y_o=r(jwe," \u2014 "),m$=n(jwe,"A",{href:!0});var xHr=s(m$);L_o=r(xHr,"CTRLLMHeadModel"),xHr.forEach(t),x_o=r(jwe," (CTRL model)"),jwe.forEach(t),k_o=i(B),X_=n(B,"LI",{});var Dwe=s(X_);oae=n(Dwe,"STRONG",{});var kHr=s(oae);S_o=r(kHr,"data2vec-text"),kHr.forEach(t),R_o=r(Dwe," \u2014 "),g$=n(Dwe,"A",{href:!0});var SHr=s(g$);B_o=r(SHr,"Data2VecTextForMaskedLM"),SHr.forEach(t),P_o=r(Dwe," (Data2VecText model)"),Dwe.forEach(t),$_o=i(B),z_=n(B,"LI",{});var Gwe=s(z_);rae=n(Gwe,"STRONG",{});var RHr=s(rae);I_o=r(RHr,"deberta"),RHr.forEach(t),q_o=r(Gwe," \u2014 "),h$=n(Gwe,"A",{href:!0});var BHr=s(h$);N_o=r(BHr,"DebertaForMaskedLM"),BHr.forEach(t),j_o=r(Gwe," (DeBERTa model)"),Gwe.forEach(t),D_o=i(B),Q_=n(B,"LI",{});var Owe=s(Q_);tae=n(Owe,"STRONG",{});var PHr=s(tae);G_o=r(PHr,"deberta-v2"),PHr.forEach(t),O_o=r(Owe," \u2014 "),p$=n(Owe,"A",{href:!0});var $Hr=s(p$);V_o=r($Hr,"DebertaV2ForMaskedLM"),$Hr.forEach(t),X_o=r(Owe," (DeBERTa-v2 model)"),Owe.forEach(t),z_o=i(B),W_=n(B,"LI",{});var Vwe=s(W_);aae=n(Vwe,"STRONG",{});var IHr=s(aae);Q_o=r(IHr,"distilbert"),IHr.forEach(t),W_o=r(Vwe," \u2014 "),_$=n(Vwe,"A",{href:!0});var qHr=s(_$);H_o=r(qHr,"DistilBertForMaskedLM"),qHr.forEach(t),U_o=r(Vwe," (DistilBERT model)"),Vwe.forEach(t),J_o=i(B),H_=n(B,"LI",{});var Xwe=s(H_);nae=n(Xwe,"STRONG",{});var NHr=s(nae);Y_o=r(NHr,"electra"),NHr.forEach(t),K_o=r(Xwe," \u2014 "),u$=n(Xwe,"A",{href:!0});var jHr=s(u$);Z_o=r(jHr,"ElectraForPreTraining"),jHr.forEach(t),euo=r(Xwe," (ELECTRA model)"),Xwe.forEach(t),ouo=i(B),U_=n(B,"LI",{});var zwe=s(U_);sae=n(zwe,"STRONG",{});var DHr=s(sae);ruo=r(DHr,"flaubert"),DHr.forEach(t),tuo=r(zwe," \u2014 "),b$=n(zwe,"A",{href:!0});var GHr=s(b$);auo=r(GHr,"FlaubertWithLMHeadModel"),GHr.forEach(t),nuo=r(zwe," (FlauBERT model)"),zwe.forEach(t),suo=i(B),J_=n(B,"LI",{});var Qwe=s(J_);lae=n(Qwe,"STRONG",{});var OHr=s(lae);luo=r(OHr,"fnet"),OHr.forEach(t),iuo=r(Qwe," \u2014 "),v$=n(Qwe,"A",{href:!0});var VHr=s(v$);duo=r(VHr,"FNetForPreTraining"),VHr.forEach(t),cuo=r(Qwe," (FNet model)"),Qwe.forEach(t),fuo=i(B),Y_=n(B,"LI",{});var Wwe=s(Y_);iae=n(Wwe,"STRONG",{});var XHr=s(iae);muo=r(XHr,"fsmt"),XHr.forEach(t),guo=r(Wwe," \u2014 "),F$=n(Wwe,"A",{href:!0});var zHr=s(F$);huo=r(zHr,"FSMTForConditionalGeneration"),zHr.forEach(t),puo=r(Wwe," (FairSeq Machine-Translation model)"),Wwe.forEach(t),_uo=i(B),K_=n(B,"LI",{});var Hwe=s(K_);dae=n(Hwe,"STRONG",{});var QHr=s(dae);uuo=r(QHr,"funnel"),QHr.forEach(t),buo=r(Hwe," \u2014 "),T$=n(Hwe,"A",{href:!0});var WHr=s(T$);vuo=r(WHr,"FunnelForPreTraining"),WHr.forEach(t),Fuo=r(Hwe," (Funnel Transformer model)"),Hwe.forEach(t),Tuo=i(B),Z_=n(B,"LI",{});var Uwe=s(Z_);cae=n(Uwe,"STRONG",{});var HHr=s(cae);Muo=r(HHr,"gpt2"),HHr.forEach(t),Euo=r(Uwe," \u2014 "),M$=n(Uwe,"A",{href:!0});var UHr=s(M$);Cuo=r(UHr,"GPT2LMHeadModel"),UHr.forEach(t),wuo=r(Uwe," (OpenAI GPT-2 model)"),Uwe.forEach(t),Auo=i(B),eu=n(B,"LI",{});var Jwe=s(eu);fae=n(Jwe,"STRONG",{});var JHr=s(fae);yuo=r(JHr,"ibert"),JHr.forEach(t),Luo=r(Jwe," \u2014 "),E$=n(Jwe,"A",{href:!0});var YHr=s(E$);xuo=r(YHr,"IBertForMaskedLM"),YHr.forEach(t),kuo=r(Jwe," (I-BERT model)"),Jwe.forEach(t),Suo=i(B),ou=n(B,"LI",{});var Ywe=s(ou);mae=n(Ywe,"STRONG",{});var KHr=s(mae);Ruo=r(KHr,"layoutlm"),KHr.forEach(t),Buo=r(Ywe," \u2014 "),C$=n(Ywe,"A",{href:!0});var ZHr=s(C$);Puo=r(ZHr,"LayoutLMForMaskedLM"),ZHr.forEach(t),$uo=r(Ywe," (LayoutLM model)"),Ywe.forEach(t),Iuo=i(B),ru=n(B,"LI",{});var Kwe=s(ru);gae=n(Kwe,"STRONG",{});var eUr=s(gae);quo=r(eUr,"longformer"),eUr.forEach(t),Nuo=r(Kwe," \u2014 "),w$=n(Kwe,"A",{href:!0});var oUr=s(w$);juo=r(oUr,"LongformerForMaskedLM"),oUr.forEach(t),Duo=r(Kwe," (Longformer model)"),Kwe.forEach(t),Guo=i(B),tu=n(B,"LI",{});var Zwe=s(tu);hae=n(Zwe,"STRONG",{});var rUr=s(hae);Ouo=r(rUr,"lxmert"),rUr.forEach(t),Vuo=r(Zwe," \u2014 "),A$=n(Zwe,"A",{href:!0});var tUr=s(A$);Xuo=r(tUr,"LxmertForPreTraining"),tUr.forEach(t),zuo=r(Zwe," (LXMERT model)"),Zwe.forEach(t),Quo=i(B),au=n(B,"LI",{});var e6e=s(au);pae=n(e6e,"STRONG",{});var aUr=s(pae);Wuo=r(aUr,"megatron-bert"),aUr.forEach(t),Huo=r(e6e," \u2014 "),y$=n(e6e,"A",{href:!0});var nUr=s(y$);Uuo=r(nUr,"MegatronBertForPreTraining"),nUr.forEach(t),Juo=r(e6e," (MegatronBert model)"),e6e.forEach(t),Yuo=i(B),nu=n(B,"LI",{});var o6e=s(nu);_ae=n(o6e,"STRONG",{});var sUr=s(_ae);Kuo=r(sUr,"mobilebert"),sUr.forEach(t),Zuo=r(o6e," \u2014 "),L$=n(o6e,"A",{href:!0});var lUr=s(L$);e1o=r(lUr,"MobileBertForPreTraining"),lUr.forEach(t),o1o=r(o6e," (MobileBERT model)"),o6e.forEach(t),r1o=i(B),su=n(B,"LI",{});var r6e=s(su);uae=n(r6e,"STRONG",{});var iUr=s(uae);t1o=r(iUr,"mpnet"),iUr.forEach(t),a1o=r(r6e," \u2014 "),x$=n(r6e,"A",{href:!0});var dUr=s(x$);n1o=r(dUr,"MPNetForMaskedLM"),dUr.forEach(t),s1o=r(r6e," (MPNet model)"),r6e.forEach(t),l1o=i(B),lu=n(B,"LI",{});var t6e=s(lu);bae=n(t6e,"STRONG",{});var cUr=s(bae);i1o=r(cUr,"openai-gpt"),cUr.forEach(t),d1o=r(t6e," \u2014 "),k$=n(t6e,"A",{href:!0});var fUr=s(k$);c1o=r(fUr,"OpenAIGPTLMHeadModel"),fUr.forEach(t),f1o=r(t6e," (OpenAI GPT model)"),t6e.forEach(t),m1o=i(B),iu=n(B,"LI",{});var a6e=s(iu);vae=n(a6e,"STRONG",{});var mUr=s(vae);g1o=r(mUr,"retribert"),mUr.forEach(t),h1o=r(a6e," \u2014 "),S$=n(a6e,"A",{href:!0});var gUr=s(S$);p1o=r(gUr,"RetriBertModel"),gUr.forEach(t),_1o=r(a6e," (RetriBERT model)"),a6e.forEach(t),u1o=i(B),du=n(B,"LI",{});var n6e=s(du);Fae=n(n6e,"STRONG",{});var hUr=s(Fae);b1o=r(hUr,"roberta"),hUr.forEach(t),v1o=r(n6e," \u2014 "),R$=n(n6e,"A",{href:!0});var pUr=s(R$);F1o=r(pUr,"RobertaForMaskedLM"),pUr.forEach(t),T1o=r(n6e," (RoBERTa model)"),n6e.forEach(t),M1o=i(B),cu=n(B,"LI",{});var s6e=s(cu);Tae=n(s6e,"STRONG",{});var _Ur=s(Tae);E1o=r(_Ur,"squeezebert"),_Ur.forEach(t),C1o=r(s6e," \u2014 "),B$=n(s6e,"A",{href:!0});var uUr=s(B$);w1o=r(uUr,"SqueezeBertForMaskedLM"),uUr.forEach(t),A1o=r(s6e," (SqueezeBERT model)"),s6e.forEach(t),y1o=i(B),fu=n(B,"LI",{});var l6e=s(fu);Mae=n(l6e,"STRONG",{});var bUr=s(Mae);L1o=r(bUr,"t5"),bUr.forEach(t),x1o=r(l6e," \u2014 "),P$=n(l6e,"A",{href:!0});var vUr=s(P$);k1o=r(vUr,"T5ForConditionalGeneration"),vUr.forEach(t),S1o=r(l6e," (T5 model)"),l6e.forEach(t),R1o=i(B),mu=n(B,"LI",{});var i6e=s(mu);Eae=n(i6e,"STRONG",{});var FUr=s(Eae);B1o=r(FUr,"tapas"),FUr.forEach(t),P1o=r(i6e," \u2014 "),$$=n(i6e,"A",{href:!0});var TUr=s($$);$1o=r(TUr,"TapasForMaskedLM"),TUr.forEach(t),I1o=r(i6e," (TAPAS model)"),i6e.forEach(t),q1o=i(B),gu=n(B,"LI",{});var d6e=s(gu);Cae=n(d6e,"STRONG",{});var MUr=s(Cae);N1o=r(MUr,"transfo-xl"),MUr.forEach(t),j1o=r(d6e," \u2014 "),I$=n(d6e,"A",{href:!0});var EUr=s(I$);D1o=r(EUr,"TransfoXLLMHeadModel"),EUr.forEach(t),G1o=r(d6e," (Transformer-XL model)"),d6e.forEach(t),O1o=i(B),hu=n(B,"LI",{});var c6e=s(hu);wae=n(c6e,"STRONG",{});var CUr=s(wae);V1o=r(CUr,"unispeech"),CUr.forEach(t),X1o=r(c6e," \u2014 "),q$=n(c6e,"A",{href:!0});var wUr=s(q$);z1o=r(wUr,"UniSpeechForPreTraining"),wUr.forEach(t),Q1o=r(c6e," (UniSpeech model)"),c6e.forEach(t),W1o=i(B),pu=n(B,"LI",{});var f6e=s(pu);Aae=n(f6e,"STRONG",{});var AUr=s(Aae);H1o=r(AUr,"unispeech-sat"),AUr.forEach(t),U1o=r(f6e," \u2014 "),N$=n(f6e,"A",{href:!0});var yUr=s(N$);J1o=r(yUr,"UniSpeechSatForPreTraining"),yUr.forEach(t),Y1o=r(f6e," (UniSpeechSat model)"),f6e.forEach(t),K1o=i(B),_u=n(B,"LI",{});var m6e=s(_u);yae=n(m6e,"STRONG",{});var LUr=s(yae);Z1o=r(LUr,"visual_bert"),LUr.forEach(t),ebo=r(m6e," \u2014 "),j$=n(m6e,"A",{href:!0});var xUr=s(j$);obo=r(xUr,"VisualBertForPreTraining"),xUr.forEach(t),rbo=r(m6e," (VisualBert model)"),m6e.forEach(t),tbo=i(B),uu=n(B,"LI",{});var g6e=s(uu);Lae=n(g6e,"STRONG",{});var kUr=s(Lae);abo=r(kUr,"vit_mae"),kUr.forEach(t),nbo=r(g6e," \u2014 "),D$=n(g6e,"A",{href:!0});var SUr=s(D$);sbo=r(SUr,"ViTMAEForPreTraining"),SUr.forEach(t),lbo=r(g6e," (ViTMAE model)"),g6e.forEach(t),ibo=i(B),bu=n(B,"LI",{});var h6e=s(bu);xae=n(h6e,"STRONG",{});var RUr=s(xae);dbo=r(RUr,"wav2vec2"),RUr.forEach(t),cbo=r(h6e," \u2014 "),G$=n(h6e,"A",{href:!0});var BUr=s(G$);fbo=r(BUr,"Wav2Vec2ForPreTraining"),BUr.forEach(t),mbo=r(h6e," (Wav2Vec2 model)"),h6e.forEach(t),gbo=i(B),vu=n(B,"LI",{});var p6e=s(vu);kae=n(p6e,"STRONG",{});var PUr=s(kae);hbo=r(PUr,"xlm"),PUr.forEach(t),pbo=r(p6e," \u2014 "),O$=n(p6e,"A",{href:!0});var $Ur=s(O$);_bo=r($Ur,"XLMWithLMHeadModel"),$Ur.forEach(t),ubo=r(p6e," (XLM model)"),p6e.forEach(t),bbo=i(B),Fu=n(B,"LI",{});var _6e=s(Fu);Sae=n(_6e,"STRONG",{});var IUr=s(Sae);vbo=r(IUr,"xlm-roberta"),IUr.forEach(t),Fbo=r(_6e," \u2014 "),V$=n(_6e,"A",{href:!0});var qUr=s(V$);Tbo=r(qUr,"XLMRobertaForMaskedLM"),qUr.forEach(t),Mbo=r(_6e," (XLM-RoBERTa model)"),_6e.forEach(t),Ebo=i(B),Tu=n(B,"LI",{});var u6e=s(Tu);Rae=n(u6e,"STRONG",{});var NUr=s(Rae);Cbo=r(NUr,"xlm-roberta-xl"),NUr.forEach(t),wbo=r(u6e," \u2014 "),X$=n(u6e,"A",{href:!0});var jUr=s(X$);Abo=r(jUr,"XLMRobertaXLForMaskedLM"),jUr.forEach(t),ybo=r(u6e," (XLM-RoBERTa-XL model)"),u6e.forEach(t),Lbo=i(B),Mu=n(B,"LI",{});var b6e=s(Mu);Bae=n(b6e,"STRONG",{});var DUr=s(Bae);xbo=r(DUr,"xlnet"),DUr.forEach(t),kbo=r(b6e," \u2014 "),z$=n(b6e,"A",{href:!0});var GUr=s(z$);Sbo=r(GUr,"XLNetLMHeadModel"),GUr.forEach(t),Rbo=r(b6e," (XLNet model)"),b6e.forEach(t),B.forEach(t),Bbo=i(Gt),Eu=n(Gt,"P",{});var v6e=s(Eu);Pbo=r(v6e,"The model is set in evaluation mode by default using "),Pae=n(v6e,"CODE",{});var OUr=s(Pae);$bo=r(OUr,"model.eval()"),OUr.forEach(t),Ibo=r(v6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ae=n(v6e,"CODE",{});var VUr=s($ae);qbo=r(VUr,"model.train()"),VUr.forEach(t),v6e.forEach(t),Nbo=i(Gt),Iae=n(Gt,"P",{});var XUr=s(Iae);jbo=r(XUr,"Examples:"),XUr.forEach(t),Dbo=i(Gt),m(T6.$$.fragment,Gt),Gt.forEach(t),Js.forEach(t),URe=i(c),ad=n(c,"H2",{class:!0});var a$e=s(ad);Cu=n(a$e,"A",{id:!0,class:!0,href:!0});var zUr=s(Cu);qae=n(zUr,"SPAN",{});var QUr=s(qae);m(M6.$$.fragment,QUr),QUr.forEach(t),zUr.forEach(t),Gbo=i(a$e),Nae=n(a$e,"SPAN",{});var WUr=s(Nae);Obo=r(WUr,"AutoModelForCausalLM"),WUr.forEach(t),a$e.forEach(t),JRe=i(c),Ko=n(c,"DIV",{class:!0});var Ks=s(Ko);m(E6.$$.fragment,Ks),Vbo=i(Ks),nd=n(Ks,"P",{});var AU=s(nd);Xbo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Q$=n(AU,"A",{href:!0});var HUr=s(Q$);zbo=r(HUr,"from_pretrained()"),HUr.forEach(t),Qbo=r(AU," class method or the "),W$=n(AU,"A",{href:!0});var UUr=s(W$);Wbo=r(UUr,"from_config()"),UUr.forEach(t),Hbo=r(AU,` class
method.`),AU.forEach(t),Ubo=i(Ks),C6=n(Ks,"P",{});var n$e=s(C6);Jbo=r(n$e,"This class cannot be instantiated directly using "),jae=n(n$e,"CODE",{});var JUr=s(jae);Ybo=r(JUr,"__init__()"),JUr.forEach(t),Kbo=r(n$e," (throws an error)."),n$e.forEach(t),Zbo=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(w6.$$.fragment,Zs),e2o=i(Zs),Dae=n(Zs,"P",{});var YUr=s(Dae);o2o=r(YUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),YUr.forEach(t),r2o=i(Zs),sd=n(Zs,"P",{});var yU=s(sd);t2o=r(yU,`Note:
Loading a model from its configuration file does `),Gae=n(yU,"STRONG",{});var KUr=s(Gae);a2o=r(KUr,"not"),KUr.forEach(t),n2o=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),H$=n(yU,"A",{href:!0});var ZUr=s(H$);s2o=r(ZUr,"from_pretrained()"),ZUr.forEach(t),l2o=r(yU," to load the model weights."),yU.forEach(t),i2o=i(Zs),Oae=n(Zs,"P",{});var eJr=s(Oae);d2o=r(eJr,"Examples:"),eJr.forEach(t),c2o=i(Zs),m(A6.$$.fragment,Zs),Zs.forEach(t),f2o=i(Ks),je=n(Ks,"DIV",{class:!0});var Ot=s(je);m(y6.$$.fragment,Ot),m2o=i(Ot),Vae=n(Ot,"P",{});var oJr=s(Vae);g2o=r(oJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),oJr.forEach(t),h2o=i(Ot),Qa=n(Ot,"P",{});var BC=s(Qa);p2o=r(BC,"The model class to instantiate is selected based on the "),Xae=n(BC,"CODE",{});var rJr=s(Xae);_2o=r(rJr,"model_type"),rJr.forEach(t),u2o=r(BC,` property of the config object (either
passed as an argument or loaded from `),zae=n(BC,"CODE",{});var tJr=s(zae);b2o=r(tJr,"pretrained_model_name_or_path"),tJr.forEach(t),v2o=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qae=n(BC,"CODE",{});var aJr=s(Qae);F2o=r(aJr,"pretrained_model_name_or_path"),aJr.forEach(t),T2o=r(BC,":"),BC.forEach(t),M2o=i(Ot),$=n(Ot,"UL",{});var q=s($);wu=n(q,"LI",{});var F6e=s(wu);Wae=n(F6e,"STRONG",{});var nJr=s(Wae);E2o=r(nJr,"bart"),nJr.forEach(t),C2o=r(F6e," \u2014 "),U$=n(F6e,"A",{href:!0});var sJr=s(U$);w2o=r(sJr,"BartForCausalLM"),sJr.forEach(t),A2o=r(F6e," (BART model)"),F6e.forEach(t),y2o=i(q),Au=n(q,"LI",{});var T6e=s(Au);Hae=n(T6e,"STRONG",{});var lJr=s(Hae);L2o=r(lJr,"bert"),lJr.forEach(t),x2o=r(T6e," \u2014 "),J$=n(T6e,"A",{href:!0});var iJr=s(J$);k2o=r(iJr,"BertLMHeadModel"),iJr.forEach(t),S2o=r(T6e," (BERT model)"),T6e.forEach(t),R2o=i(q),yu=n(q,"LI",{});var M6e=s(yu);Uae=n(M6e,"STRONG",{});var dJr=s(Uae);B2o=r(dJr,"bert-generation"),dJr.forEach(t),P2o=r(M6e," \u2014 "),Y$=n(M6e,"A",{href:!0});var cJr=s(Y$);$2o=r(cJr,"BertGenerationDecoder"),cJr.forEach(t),I2o=r(M6e," (Bert Generation model)"),M6e.forEach(t),q2o=i(q),Lu=n(q,"LI",{});var E6e=s(Lu);Jae=n(E6e,"STRONG",{});var fJr=s(Jae);N2o=r(fJr,"big_bird"),fJr.forEach(t),j2o=r(E6e," \u2014 "),K$=n(E6e,"A",{href:!0});var mJr=s(K$);D2o=r(mJr,"BigBirdForCausalLM"),mJr.forEach(t),G2o=r(E6e," (BigBird model)"),E6e.forEach(t),O2o=i(q),xu=n(q,"LI",{});var C6e=s(xu);Yae=n(C6e,"STRONG",{});var gJr=s(Yae);V2o=r(gJr,"bigbird_pegasus"),gJr.forEach(t),X2o=r(C6e," \u2014 "),Z$=n(C6e,"A",{href:!0});var hJr=s(Z$);z2o=r(hJr,"BigBirdPegasusForCausalLM"),hJr.forEach(t),Q2o=r(C6e," (BigBirdPegasus model)"),C6e.forEach(t),W2o=i(q),ku=n(q,"LI",{});var w6e=s(ku);Kae=n(w6e,"STRONG",{});var pJr=s(Kae);H2o=r(pJr,"blenderbot"),pJr.forEach(t),U2o=r(w6e," \u2014 "),eI=n(w6e,"A",{href:!0});var _Jr=s(eI);J2o=r(_Jr,"BlenderbotForCausalLM"),_Jr.forEach(t),Y2o=r(w6e," (Blenderbot model)"),w6e.forEach(t),K2o=i(q),Su=n(q,"LI",{});var A6e=s(Su);Zae=n(A6e,"STRONG",{});var uJr=s(Zae);Z2o=r(uJr,"blenderbot-small"),uJr.forEach(t),evo=r(A6e," \u2014 "),oI=n(A6e,"A",{href:!0});var bJr=s(oI);ovo=r(bJr,"BlenderbotSmallForCausalLM"),bJr.forEach(t),rvo=r(A6e," (BlenderbotSmall model)"),A6e.forEach(t),tvo=i(q),Ru=n(q,"LI",{});var y6e=s(Ru);ene=n(y6e,"STRONG",{});var vJr=s(ene);avo=r(vJr,"camembert"),vJr.forEach(t),nvo=r(y6e," \u2014 "),rI=n(y6e,"A",{href:!0});var FJr=s(rI);svo=r(FJr,"CamembertForCausalLM"),FJr.forEach(t),lvo=r(y6e," (CamemBERT model)"),y6e.forEach(t),ivo=i(q),Bu=n(q,"LI",{});var L6e=s(Bu);one=n(L6e,"STRONG",{});var TJr=s(one);dvo=r(TJr,"ctrl"),TJr.forEach(t),cvo=r(L6e," \u2014 "),tI=n(L6e,"A",{href:!0});var MJr=s(tI);fvo=r(MJr,"CTRLLMHeadModel"),MJr.forEach(t),mvo=r(L6e," (CTRL model)"),L6e.forEach(t),gvo=i(q),Pu=n(q,"LI",{});var x6e=s(Pu);rne=n(x6e,"STRONG",{});var EJr=s(rne);hvo=r(EJr,"data2vec-text"),EJr.forEach(t),pvo=r(x6e," \u2014 "),aI=n(x6e,"A",{href:!0});var CJr=s(aI);_vo=r(CJr,"Data2VecTextForCausalLM"),CJr.forEach(t),uvo=r(x6e," (Data2VecText model)"),x6e.forEach(t),bvo=i(q),$u=n(q,"LI",{});var k6e=s($u);tne=n(k6e,"STRONG",{});var wJr=s(tne);vvo=r(wJr,"electra"),wJr.forEach(t),Fvo=r(k6e," \u2014 "),nI=n(k6e,"A",{href:!0});var AJr=s(nI);Tvo=r(AJr,"ElectraForCausalLM"),AJr.forEach(t),Mvo=r(k6e," (ELECTRA model)"),k6e.forEach(t),Evo=i(q),Iu=n(q,"LI",{});var S6e=s(Iu);ane=n(S6e,"STRONG",{});var yJr=s(ane);Cvo=r(yJr,"gpt2"),yJr.forEach(t),wvo=r(S6e," \u2014 "),sI=n(S6e,"A",{href:!0});var LJr=s(sI);Avo=r(LJr,"GPT2LMHeadModel"),LJr.forEach(t),yvo=r(S6e," (OpenAI GPT-2 model)"),S6e.forEach(t),Lvo=i(q),qu=n(q,"LI",{});var R6e=s(qu);nne=n(R6e,"STRONG",{});var xJr=s(nne);xvo=r(xJr,"gpt_neo"),xJr.forEach(t),kvo=r(R6e," \u2014 "),lI=n(R6e,"A",{href:!0});var kJr=s(lI);Svo=r(kJr,"GPTNeoForCausalLM"),kJr.forEach(t),Rvo=r(R6e," (GPT Neo model)"),R6e.forEach(t),Bvo=i(q),Nu=n(q,"LI",{});var B6e=s(Nu);sne=n(B6e,"STRONG",{});var SJr=s(sne);Pvo=r(SJr,"gptj"),SJr.forEach(t),$vo=r(B6e," \u2014 "),iI=n(B6e,"A",{href:!0});var RJr=s(iI);Ivo=r(RJr,"GPTJForCausalLM"),RJr.forEach(t),qvo=r(B6e," (GPT-J model)"),B6e.forEach(t),Nvo=i(q),ju=n(q,"LI",{});var P6e=s(ju);lne=n(P6e,"STRONG",{});var BJr=s(lne);jvo=r(BJr,"marian"),BJr.forEach(t),Dvo=r(P6e," \u2014 "),dI=n(P6e,"A",{href:!0});var PJr=s(dI);Gvo=r(PJr,"MarianForCausalLM"),PJr.forEach(t),Ovo=r(P6e," (Marian model)"),P6e.forEach(t),Vvo=i(q),Du=n(q,"LI",{});var $6e=s(Du);ine=n($6e,"STRONG",{});var $Jr=s(ine);Xvo=r($Jr,"mbart"),$Jr.forEach(t),zvo=r($6e," \u2014 "),cI=n($6e,"A",{href:!0});var IJr=s(cI);Qvo=r(IJr,"MBartForCausalLM"),IJr.forEach(t),Wvo=r($6e," (mBART model)"),$6e.forEach(t),Hvo=i(q),Gu=n(q,"LI",{});var I6e=s(Gu);dne=n(I6e,"STRONG",{});var qJr=s(dne);Uvo=r(qJr,"megatron-bert"),qJr.forEach(t),Jvo=r(I6e," \u2014 "),fI=n(I6e,"A",{href:!0});var NJr=s(fI);Yvo=r(NJr,"MegatronBertForCausalLM"),NJr.forEach(t),Kvo=r(I6e," (MegatronBert model)"),I6e.forEach(t),Zvo=i(q),Ou=n(q,"LI",{});var q6e=s(Ou);cne=n(q6e,"STRONG",{});var jJr=s(cne);eFo=r(jJr,"openai-gpt"),jJr.forEach(t),oFo=r(q6e," \u2014 "),mI=n(q6e,"A",{href:!0});var DJr=s(mI);rFo=r(DJr,"OpenAIGPTLMHeadModel"),DJr.forEach(t),tFo=r(q6e," (OpenAI GPT model)"),q6e.forEach(t),aFo=i(q),Vu=n(q,"LI",{});var N6e=s(Vu);fne=n(N6e,"STRONG",{});var GJr=s(fne);nFo=r(GJr,"pegasus"),GJr.forEach(t),sFo=r(N6e," \u2014 "),gI=n(N6e,"A",{href:!0});var OJr=s(gI);lFo=r(OJr,"PegasusForCausalLM"),OJr.forEach(t),iFo=r(N6e," (Pegasus model)"),N6e.forEach(t),dFo=i(q),Xu=n(q,"LI",{});var j6e=s(Xu);mne=n(j6e,"STRONG",{});var VJr=s(mne);cFo=r(VJr,"plbart"),VJr.forEach(t),fFo=r(j6e," \u2014 "),hI=n(j6e,"A",{href:!0});var XJr=s(hI);mFo=r(XJr,"PLBartForCausalLM"),XJr.forEach(t),gFo=r(j6e," (PLBart model)"),j6e.forEach(t),hFo=i(q),zu=n(q,"LI",{});var D6e=s(zu);gne=n(D6e,"STRONG",{});var zJr=s(gne);pFo=r(zJr,"prophetnet"),zJr.forEach(t),_Fo=r(D6e," \u2014 "),pI=n(D6e,"A",{href:!0});var QJr=s(pI);uFo=r(QJr,"ProphetNetForCausalLM"),QJr.forEach(t),bFo=r(D6e," (ProphetNet model)"),D6e.forEach(t),vFo=i(q),Qu=n(q,"LI",{});var G6e=s(Qu);hne=n(G6e,"STRONG",{});var WJr=s(hne);FFo=r(WJr,"qdqbert"),WJr.forEach(t),TFo=r(G6e," \u2014 "),_I=n(G6e,"A",{href:!0});var HJr=s(_I);MFo=r(HJr,"QDQBertLMHeadModel"),HJr.forEach(t),EFo=r(G6e," (QDQBert model)"),G6e.forEach(t),CFo=i(q),Wu=n(q,"LI",{});var O6e=s(Wu);pne=n(O6e,"STRONG",{});var UJr=s(pne);wFo=r(UJr,"reformer"),UJr.forEach(t),AFo=r(O6e," \u2014 "),uI=n(O6e,"A",{href:!0});var JJr=s(uI);yFo=r(JJr,"ReformerModelWithLMHead"),JJr.forEach(t),LFo=r(O6e," (Reformer model)"),O6e.forEach(t),xFo=i(q),Hu=n(q,"LI",{});var V6e=s(Hu);_ne=n(V6e,"STRONG",{});var YJr=s(_ne);kFo=r(YJr,"rembert"),YJr.forEach(t),SFo=r(V6e," \u2014 "),bI=n(V6e,"A",{href:!0});var KJr=s(bI);RFo=r(KJr,"RemBertForCausalLM"),KJr.forEach(t),BFo=r(V6e," (RemBERT model)"),V6e.forEach(t),PFo=i(q),Uu=n(q,"LI",{});var X6e=s(Uu);une=n(X6e,"STRONG",{});var ZJr=s(une);$Fo=r(ZJr,"roberta"),ZJr.forEach(t),IFo=r(X6e," \u2014 "),vI=n(X6e,"A",{href:!0});var eYr=s(vI);qFo=r(eYr,"RobertaForCausalLM"),eYr.forEach(t),NFo=r(X6e," (RoBERTa model)"),X6e.forEach(t),jFo=i(q),Ju=n(q,"LI",{});var z6e=s(Ju);bne=n(z6e,"STRONG",{});var oYr=s(bne);DFo=r(oYr,"roformer"),oYr.forEach(t),GFo=r(z6e," \u2014 "),FI=n(z6e,"A",{href:!0});var rYr=s(FI);OFo=r(rYr,"RoFormerForCausalLM"),rYr.forEach(t),VFo=r(z6e," (RoFormer model)"),z6e.forEach(t),XFo=i(q),Yu=n(q,"LI",{});var Q6e=s(Yu);vne=n(Q6e,"STRONG",{});var tYr=s(vne);zFo=r(tYr,"speech_to_text_2"),tYr.forEach(t),QFo=r(Q6e," \u2014 "),TI=n(Q6e,"A",{href:!0});var aYr=s(TI);WFo=r(aYr,"Speech2Text2ForCausalLM"),aYr.forEach(t),HFo=r(Q6e," (Speech2Text2 model)"),Q6e.forEach(t),UFo=i(q),Ku=n(q,"LI",{});var W6e=s(Ku);Fne=n(W6e,"STRONG",{});var nYr=s(Fne);JFo=r(nYr,"transfo-xl"),nYr.forEach(t),YFo=r(W6e," \u2014 "),MI=n(W6e,"A",{href:!0});var sYr=s(MI);KFo=r(sYr,"TransfoXLLMHeadModel"),sYr.forEach(t),ZFo=r(W6e," (Transformer-XL model)"),W6e.forEach(t),eTo=i(q),Zu=n(q,"LI",{});var H6e=s(Zu);Tne=n(H6e,"STRONG",{});var lYr=s(Tne);oTo=r(lYr,"trocr"),lYr.forEach(t),rTo=r(H6e," \u2014 "),EI=n(H6e,"A",{href:!0});var iYr=s(EI);tTo=r(iYr,"TrOCRForCausalLM"),iYr.forEach(t),aTo=r(H6e," (TrOCR model)"),H6e.forEach(t),nTo=i(q),e1=n(q,"LI",{});var U6e=s(e1);Mne=n(U6e,"STRONG",{});var dYr=s(Mne);sTo=r(dYr,"xglm"),dYr.forEach(t),lTo=r(U6e," \u2014 "),CI=n(U6e,"A",{href:!0});var cYr=s(CI);iTo=r(cYr,"XGLMForCausalLM"),cYr.forEach(t),dTo=r(U6e," (XGLM model)"),U6e.forEach(t),cTo=i(q),o1=n(q,"LI",{});var J6e=s(o1);Ene=n(J6e,"STRONG",{});var fYr=s(Ene);fTo=r(fYr,"xlm"),fYr.forEach(t),mTo=r(J6e," \u2014 "),wI=n(J6e,"A",{href:!0});var mYr=s(wI);gTo=r(mYr,"XLMWithLMHeadModel"),mYr.forEach(t),hTo=r(J6e," (XLM model)"),J6e.forEach(t),pTo=i(q),r1=n(q,"LI",{});var Y6e=s(r1);Cne=n(Y6e,"STRONG",{});var gYr=s(Cne);_To=r(gYr,"xlm-prophetnet"),gYr.forEach(t),uTo=r(Y6e," \u2014 "),AI=n(Y6e,"A",{href:!0});var hYr=s(AI);bTo=r(hYr,"XLMProphetNetForCausalLM"),hYr.forEach(t),vTo=r(Y6e," (XLMProphetNet model)"),Y6e.forEach(t),FTo=i(q),t1=n(q,"LI",{});var K6e=s(t1);wne=n(K6e,"STRONG",{});var pYr=s(wne);TTo=r(pYr,"xlm-roberta"),pYr.forEach(t),MTo=r(K6e," \u2014 "),yI=n(K6e,"A",{href:!0});var _Yr=s(yI);ETo=r(_Yr,"XLMRobertaForCausalLM"),_Yr.forEach(t),CTo=r(K6e," (XLM-RoBERTa model)"),K6e.forEach(t),wTo=i(q),a1=n(q,"LI",{});var Z6e=s(a1);Ane=n(Z6e,"STRONG",{});var uYr=s(Ane);ATo=r(uYr,"xlm-roberta-xl"),uYr.forEach(t),yTo=r(Z6e," \u2014 "),LI=n(Z6e,"A",{href:!0});var bYr=s(LI);LTo=r(bYr,"XLMRobertaXLForCausalLM"),bYr.forEach(t),xTo=r(Z6e," (XLM-RoBERTa-XL model)"),Z6e.forEach(t),kTo=i(q),n1=n(q,"LI",{});var eAe=s(n1);yne=n(eAe,"STRONG",{});var vYr=s(yne);STo=r(vYr,"xlnet"),vYr.forEach(t),RTo=r(eAe," \u2014 "),xI=n(eAe,"A",{href:!0});var FYr=s(xI);BTo=r(FYr,"XLNetLMHeadModel"),FYr.forEach(t),PTo=r(eAe," (XLNet model)"),eAe.forEach(t),q.forEach(t),$To=i(Ot),s1=n(Ot,"P",{});var oAe=s(s1);ITo=r(oAe,"The model is set in evaluation mode by default using "),Lne=n(oAe,"CODE",{});var TYr=s(Lne);qTo=r(TYr,"model.eval()"),TYr.forEach(t),NTo=r(oAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xne=n(oAe,"CODE",{});var MYr=s(xne);jTo=r(MYr,"model.train()"),MYr.forEach(t),oAe.forEach(t),DTo=i(Ot),kne=n(Ot,"P",{});var EYr=s(kne);GTo=r(EYr,"Examples:"),EYr.forEach(t),OTo=i(Ot),m(L6.$$.fragment,Ot),Ot.forEach(t),Ks.forEach(t),YRe=i(c),ld=n(c,"H2",{class:!0});var s$e=s(ld);l1=n(s$e,"A",{id:!0,class:!0,href:!0});var CYr=s(l1);Sne=n(CYr,"SPAN",{});var wYr=s(Sne);m(x6.$$.fragment,wYr),wYr.forEach(t),CYr.forEach(t),VTo=i(s$e),Rne=n(s$e,"SPAN",{});var AYr=s(Rne);XTo=r(AYr,"AutoModelForMaskedLM"),AYr.forEach(t),s$e.forEach(t),KRe=i(c),Zo=n(c,"DIV",{class:!0});var el=s(Zo);m(k6.$$.fragment,el),zTo=i(el),id=n(el,"P",{});var LU=s(id);QTo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),kI=n(LU,"A",{href:!0});var yYr=s(kI);WTo=r(yYr,"from_pretrained()"),yYr.forEach(t),HTo=r(LU," class method or the "),SI=n(LU,"A",{href:!0});var LYr=s(SI);UTo=r(LYr,"from_config()"),LYr.forEach(t),JTo=r(LU,` class
method.`),LU.forEach(t),YTo=i(el),S6=n(el,"P",{});var l$e=s(S6);KTo=r(l$e,"This class cannot be instantiated directly using "),Bne=n(l$e,"CODE",{});var xYr=s(Bne);ZTo=r(xYr,"__init__()"),xYr.forEach(t),eMo=r(l$e," (throws an error)."),l$e.forEach(t),oMo=i(el),Wr=n(el,"DIV",{class:!0});var ol=s(Wr);m(R6.$$.fragment,ol),rMo=i(ol),Pne=n(ol,"P",{});var kYr=s(Pne);tMo=r(kYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kYr.forEach(t),aMo=i(ol),dd=n(ol,"P",{});var xU=s(dd);nMo=r(xU,`Note:
Loading a model from its configuration file does `),$ne=n(xU,"STRONG",{});var SYr=s($ne);sMo=r(SYr,"not"),SYr.forEach(t),lMo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(xU,"A",{href:!0});var RYr=s(RI);iMo=r(RYr,"from_pretrained()"),RYr.forEach(t),dMo=r(xU," to load the model weights."),xU.forEach(t),cMo=i(ol),Ine=n(ol,"P",{});var BYr=s(Ine);fMo=r(BYr,"Examples:"),BYr.forEach(t),mMo=i(ol),m(B6.$$.fragment,ol),ol.forEach(t),gMo=i(el),De=n(el,"DIV",{class:!0});var Vt=s(De);m(P6.$$.fragment,Vt),hMo=i(Vt),qne=n(Vt,"P",{});var PYr=s(qne);pMo=r(PYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),PYr.forEach(t),_Mo=i(Vt),Wa=n(Vt,"P",{});var PC=s(Wa);uMo=r(PC,"The model class to instantiate is selected based on the "),Nne=n(PC,"CODE",{});var $Yr=s(Nne);bMo=r($Yr,"model_type"),$Yr.forEach(t),vMo=r(PC,` property of the config object (either
passed as an argument or loaded from `),jne=n(PC,"CODE",{});var IYr=s(jne);FMo=r(IYr,"pretrained_model_name_or_path"),IYr.forEach(t),TMo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dne=n(PC,"CODE",{});var qYr=s(Dne);MMo=r(qYr,"pretrained_model_name_or_path"),qYr.forEach(t),EMo=r(PC,":"),PC.forEach(t),CMo=i(Vt),I=n(Vt,"UL",{});var N=s(I);i1=n(N,"LI",{});var rAe=s(i1);Gne=n(rAe,"STRONG",{});var NYr=s(Gne);wMo=r(NYr,"albert"),NYr.forEach(t),AMo=r(rAe," \u2014 "),BI=n(rAe,"A",{href:!0});var jYr=s(BI);yMo=r(jYr,"AlbertForMaskedLM"),jYr.forEach(t),LMo=r(rAe," (ALBERT model)"),rAe.forEach(t),xMo=i(N),d1=n(N,"LI",{});var tAe=s(d1);One=n(tAe,"STRONG",{});var DYr=s(One);kMo=r(DYr,"bart"),DYr.forEach(t),SMo=r(tAe," \u2014 "),PI=n(tAe,"A",{href:!0});var GYr=s(PI);RMo=r(GYr,"BartForConditionalGeneration"),GYr.forEach(t),BMo=r(tAe," (BART model)"),tAe.forEach(t),PMo=i(N),c1=n(N,"LI",{});var aAe=s(c1);Vne=n(aAe,"STRONG",{});var OYr=s(Vne);$Mo=r(OYr,"bert"),OYr.forEach(t),IMo=r(aAe," \u2014 "),$I=n(aAe,"A",{href:!0});var VYr=s($I);qMo=r(VYr,"BertForMaskedLM"),VYr.forEach(t),NMo=r(aAe," (BERT model)"),aAe.forEach(t),jMo=i(N),f1=n(N,"LI",{});var nAe=s(f1);Xne=n(nAe,"STRONG",{});var XYr=s(Xne);DMo=r(XYr,"big_bird"),XYr.forEach(t),GMo=r(nAe," \u2014 "),II=n(nAe,"A",{href:!0});var zYr=s(II);OMo=r(zYr,"BigBirdForMaskedLM"),zYr.forEach(t),VMo=r(nAe," (BigBird model)"),nAe.forEach(t),XMo=i(N),m1=n(N,"LI",{});var sAe=s(m1);zne=n(sAe,"STRONG",{});var QYr=s(zne);zMo=r(QYr,"camembert"),QYr.forEach(t),QMo=r(sAe," \u2014 "),qI=n(sAe,"A",{href:!0});var WYr=s(qI);WMo=r(WYr,"CamembertForMaskedLM"),WYr.forEach(t),HMo=r(sAe," (CamemBERT model)"),sAe.forEach(t),UMo=i(N),g1=n(N,"LI",{});var lAe=s(g1);Qne=n(lAe,"STRONG",{});var HYr=s(Qne);JMo=r(HYr,"convbert"),HYr.forEach(t),YMo=r(lAe," \u2014 "),NI=n(lAe,"A",{href:!0});var UYr=s(NI);KMo=r(UYr,"ConvBertForMaskedLM"),UYr.forEach(t),ZMo=r(lAe," (ConvBERT model)"),lAe.forEach(t),e4o=i(N),h1=n(N,"LI",{});var iAe=s(h1);Wne=n(iAe,"STRONG",{});var JYr=s(Wne);o4o=r(JYr,"data2vec-text"),JYr.forEach(t),r4o=r(iAe," \u2014 "),jI=n(iAe,"A",{href:!0});var YYr=s(jI);t4o=r(YYr,"Data2VecTextForMaskedLM"),YYr.forEach(t),a4o=r(iAe," (Data2VecText model)"),iAe.forEach(t),n4o=i(N),p1=n(N,"LI",{});var dAe=s(p1);Hne=n(dAe,"STRONG",{});var KYr=s(Hne);s4o=r(KYr,"deberta"),KYr.forEach(t),l4o=r(dAe," \u2014 "),DI=n(dAe,"A",{href:!0});var ZYr=s(DI);i4o=r(ZYr,"DebertaForMaskedLM"),ZYr.forEach(t),d4o=r(dAe," (DeBERTa model)"),dAe.forEach(t),c4o=i(N),_1=n(N,"LI",{});var cAe=s(_1);Une=n(cAe,"STRONG",{});var eKr=s(Une);f4o=r(eKr,"deberta-v2"),eKr.forEach(t),m4o=r(cAe," \u2014 "),GI=n(cAe,"A",{href:!0});var oKr=s(GI);g4o=r(oKr,"DebertaV2ForMaskedLM"),oKr.forEach(t),h4o=r(cAe," (DeBERTa-v2 model)"),cAe.forEach(t),p4o=i(N),u1=n(N,"LI",{});var fAe=s(u1);Jne=n(fAe,"STRONG",{});var rKr=s(Jne);_4o=r(rKr,"distilbert"),rKr.forEach(t),u4o=r(fAe," \u2014 "),OI=n(fAe,"A",{href:!0});var tKr=s(OI);b4o=r(tKr,"DistilBertForMaskedLM"),tKr.forEach(t),v4o=r(fAe," (DistilBERT model)"),fAe.forEach(t),F4o=i(N),b1=n(N,"LI",{});var mAe=s(b1);Yne=n(mAe,"STRONG",{});var aKr=s(Yne);T4o=r(aKr,"electra"),aKr.forEach(t),M4o=r(mAe," \u2014 "),VI=n(mAe,"A",{href:!0});var nKr=s(VI);E4o=r(nKr,"ElectraForMaskedLM"),nKr.forEach(t),C4o=r(mAe," (ELECTRA model)"),mAe.forEach(t),w4o=i(N),v1=n(N,"LI",{});var gAe=s(v1);Kne=n(gAe,"STRONG",{});var sKr=s(Kne);A4o=r(sKr,"flaubert"),sKr.forEach(t),y4o=r(gAe," \u2014 "),XI=n(gAe,"A",{href:!0});var lKr=s(XI);L4o=r(lKr,"FlaubertWithLMHeadModel"),lKr.forEach(t),x4o=r(gAe," (FlauBERT model)"),gAe.forEach(t),k4o=i(N),F1=n(N,"LI",{});var hAe=s(F1);Zne=n(hAe,"STRONG",{});var iKr=s(Zne);S4o=r(iKr,"fnet"),iKr.forEach(t),R4o=r(hAe," \u2014 "),zI=n(hAe,"A",{href:!0});var dKr=s(zI);B4o=r(dKr,"FNetForMaskedLM"),dKr.forEach(t),P4o=r(hAe," (FNet model)"),hAe.forEach(t),$4o=i(N),T1=n(N,"LI",{});var pAe=s(T1);ese=n(pAe,"STRONG",{});var cKr=s(ese);I4o=r(cKr,"funnel"),cKr.forEach(t),q4o=r(pAe," \u2014 "),QI=n(pAe,"A",{href:!0});var fKr=s(QI);N4o=r(fKr,"FunnelForMaskedLM"),fKr.forEach(t),j4o=r(pAe," (Funnel Transformer model)"),pAe.forEach(t),D4o=i(N),M1=n(N,"LI",{});var _Ae=s(M1);ose=n(_Ae,"STRONG",{});var mKr=s(ose);G4o=r(mKr,"ibert"),mKr.forEach(t),O4o=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var gKr=s(WI);V4o=r(gKr,"IBertForMaskedLM"),gKr.forEach(t),X4o=r(_Ae," (I-BERT model)"),_Ae.forEach(t),z4o=i(N),E1=n(N,"LI",{});var uAe=s(E1);rse=n(uAe,"STRONG",{});var hKr=s(rse);Q4o=r(hKr,"layoutlm"),hKr.forEach(t),W4o=r(uAe," \u2014 "),HI=n(uAe,"A",{href:!0});var pKr=s(HI);H4o=r(pKr,"LayoutLMForMaskedLM"),pKr.forEach(t),U4o=r(uAe," (LayoutLM model)"),uAe.forEach(t),J4o=i(N),C1=n(N,"LI",{});var bAe=s(C1);tse=n(bAe,"STRONG",{});var _Kr=s(tse);Y4o=r(_Kr,"longformer"),_Kr.forEach(t),K4o=r(bAe," \u2014 "),UI=n(bAe,"A",{href:!0});var uKr=s(UI);Z4o=r(uKr,"LongformerForMaskedLM"),uKr.forEach(t),eEo=r(bAe," (Longformer model)"),bAe.forEach(t),oEo=i(N),w1=n(N,"LI",{});var vAe=s(w1);ase=n(vAe,"STRONG",{});var bKr=s(ase);rEo=r(bKr,"mbart"),bKr.forEach(t),tEo=r(vAe," \u2014 "),JI=n(vAe,"A",{href:!0});var vKr=s(JI);aEo=r(vKr,"MBartForConditionalGeneration"),vKr.forEach(t),nEo=r(vAe," (mBART model)"),vAe.forEach(t),sEo=i(N),A1=n(N,"LI",{});var FAe=s(A1);nse=n(FAe,"STRONG",{});var FKr=s(nse);lEo=r(FKr,"megatron-bert"),FKr.forEach(t),iEo=r(FAe," \u2014 "),YI=n(FAe,"A",{href:!0});var TKr=s(YI);dEo=r(TKr,"MegatronBertForMaskedLM"),TKr.forEach(t),cEo=r(FAe," (MegatronBert model)"),FAe.forEach(t),fEo=i(N),y1=n(N,"LI",{});var TAe=s(y1);sse=n(TAe,"STRONG",{});var MKr=s(sse);mEo=r(MKr,"mobilebert"),MKr.forEach(t),gEo=r(TAe," \u2014 "),KI=n(TAe,"A",{href:!0});var EKr=s(KI);hEo=r(EKr,"MobileBertForMaskedLM"),EKr.forEach(t),pEo=r(TAe," (MobileBERT model)"),TAe.forEach(t),_Eo=i(N),L1=n(N,"LI",{});var MAe=s(L1);lse=n(MAe,"STRONG",{});var CKr=s(lse);uEo=r(CKr,"mpnet"),CKr.forEach(t),bEo=r(MAe," \u2014 "),ZI=n(MAe,"A",{href:!0});var wKr=s(ZI);vEo=r(wKr,"MPNetForMaskedLM"),wKr.forEach(t),FEo=r(MAe," (MPNet model)"),MAe.forEach(t),TEo=i(N),x1=n(N,"LI",{});var EAe=s(x1);ise=n(EAe,"STRONG",{});var AKr=s(ise);MEo=r(AKr,"nystromformer"),AKr.forEach(t),EEo=r(EAe," \u2014 "),eq=n(EAe,"A",{href:!0});var yKr=s(eq);CEo=r(yKr,"NystromformerForMaskedLM"),yKr.forEach(t),wEo=r(EAe," (Nystromformer model)"),EAe.forEach(t),AEo=i(N),k1=n(N,"LI",{});var CAe=s(k1);dse=n(CAe,"STRONG",{});var LKr=s(dse);yEo=r(LKr,"perceiver"),LKr.forEach(t),LEo=r(CAe," \u2014 "),oq=n(CAe,"A",{href:!0});var xKr=s(oq);xEo=r(xKr,"PerceiverForMaskedLM"),xKr.forEach(t),kEo=r(CAe," (Perceiver model)"),CAe.forEach(t),SEo=i(N),S1=n(N,"LI",{});var wAe=s(S1);cse=n(wAe,"STRONG",{});var kKr=s(cse);REo=r(kKr,"qdqbert"),kKr.forEach(t),BEo=r(wAe," \u2014 "),rq=n(wAe,"A",{href:!0});var SKr=s(rq);PEo=r(SKr,"QDQBertForMaskedLM"),SKr.forEach(t),$Eo=r(wAe," (QDQBert model)"),wAe.forEach(t),IEo=i(N),R1=n(N,"LI",{});var AAe=s(R1);fse=n(AAe,"STRONG",{});var RKr=s(fse);qEo=r(RKr,"reformer"),RKr.forEach(t),NEo=r(AAe," \u2014 "),tq=n(AAe,"A",{href:!0});var BKr=s(tq);jEo=r(BKr,"ReformerForMaskedLM"),BKr.forEach(t),DEo=r(AAe," (Reformer model)"),AAe.forEach(t),GEo=i(N),B1=n(N,"LI",{});var yAe=s(B1);mse=n(yAe,"STRONG",{});var PKr=s(mse);OEo=r(PKr,"rembert"),PKr.forEach(t),VEo=r(yAe," \u2014 "),aq=n(yAe,"A",{href:!0});var $Kr=s(aq);XEo=r($Kr,"RemBertForMaskedLM"),$Kr.forEach(t),zEo=r(yAe," (RemBERT model)"),yAe.forEach(t),QEo=i(N),P1=n(N,"LI",{});var LAe=s(P1);gse=n(LAe,"STRONG",{});var IKr=s(gse);WEo=r(IKr,"roberta"),IKr.forEach(t),HEo=r(LAe," \u2014 "),nq=n(LAe,"A",{href:!0});var qKr=s(nq);UEo=r(qKr,"RobertaForMaskedLM"),qKr.forEach(t),JEo=r(LAe," (RoBERTa model)"),LAe.forEach(t),YEo=i(N),$1=n(N,"LI",{});var xAe=s($1);hse=n(xAe,"STRONG",{});var NKr=s(hse);KEo=r(NKr,"roformer"),NKr.forEach(t),ZEo=r(xAe," \u2014 "),sq=n(xAe,"A",{href:!0});var jKr=s(sq);e5o=r(jKr,"RoFormerForMaskedLM"),jKr.forEach(t),o5o=r(xAe," (RoFormer model)"),xAe.forEach(t),r5o=i(N),I1=n(N,"LI",{});var kAe=s(I1);pse=n(kAe,"STRONG",{});var DKr=s(pse);t5o=r(DKr,"squeezebert"),DKr.forEach(t),a5o=r(kAe," \u2014 "),lq=n(kAe,"A",{href:!0});var GKr=s(lq);n5o=r(GKr,"SqueezeBertForMaskedLM"),GKr.forEach(t),s5o=r(kAe," (SqueezeBERT model)"),kAe.forEach(t),l5o=i(N),q1=n(N,"LI",{});var SAe=s(q1);_se=n(SAe,"STRONG",{});var OKr=s(_se);i5o=r(OKr,"tapas"),OKr.forEach(t),d5o=r(SAe," \u2014 "),iq=n(SAe,"A",{href:!0});var VKr=s(iq);c5o=r(VKr,"TapasForMaskedLM"),VKr.forEach(t),f5o=r(SAe," (TAPAS model)"),SAe.forEach(t),m5o=i(N),N1=n(N,"LI",{});var RAe=s(N1);use=n(RAe,"STRONG",{});var XKr=s(use);g5o=r(XKr,"wav2vec2"),XKr.forEach(t),h5o=r(RAe," \u2014 "),bse=n(RAe,"CODE",{});var zKr=s(bse);p5o=r(zKr,"Wav2Vec2ForMaskedLM"),zKr.forEach(t),_5o=r(RAe," (Wav2Vec2 model)"),RAe.forEach(t),u5o=i(N),j1=n(N,"LI",{});var BAe=s(j1);vse=n(BAe,"STRONG",{});var QKr=s(vse);b5o=r(QKr,"xlm"),QKr.forEach(t),v5o=r(BAe," \u2014 "),dq=n(BAe,"A",{href:!0});var WKr=s(dq);F5o=r(WKr,"XLMWithLMHeadModel"),WKr.forEach(t),T5o=r(BAe," (XLM model)"),BAe.forEach(t),M5o=i(N),D1=n(N,"LI",{});var PAe=s(D1);Fse=n(PAe,"STRONG",{});var HKr=s(Fse);E5o=r(HKr,"xlm-roberta"),HKr.forEach(t),C5o=r(PAe," \u2014 "),cq=n(PAe,"A",{href:!0});var UKr=s(cq);w5o=r(UKr,"XLMRobertaForMaskedLM"),UKr.forEach(t),A5o=r(PAe," (XLM-RoBERTa model)"),PAe.forEach(t),y5o=i(N),G1=n(N,"LI",{});var $Ae=s(G1);Tse=n($Ae,"STRONG",{});var JKr=s(Tse);L5o=r(JKr,"xlm-roberta-xl"),JKr.forEach(t),x5o=r($Ae," \u2014 "),fq=n($Ae,"A",{href:!0});var YKr=s(fq);k5o=r(YKr,"XLMRobertaXLForMaskedLM"),YKr.forEach(t),S5o=r($Ae," (XLM-RoBERTa-XL model)"),$Ae.forEach(t),R5o=i(N),O1=n(N,"LI",{});var IAe=s(O1);Mse=n(IAe,"STRONG",{});var KKr=s(Mse);B5o=r(KKr,"yoso"),KKr.forEach(t),P5o=r(IAe," \u2014 "),mq=n(IAe,"A",{href:!0});var ZKr=s(mq);$5o=r(ZKr,"YosoForMaskedLM"),ZKr.forEach(t),I5o=r(IAe," (YOSO model)"),IAe.forEach(t),N.forEach(t),q5o=i(Vt),V1=n(Vt,"P",{});var qAe=s(V1);N5o=r(qAe,"The model is set in evaluation mode by default using "),Ese=n(qAe,"CODE",{});var eZr=s(Ese);j5o=r(eZr,"model.eval()"),eZr.forEach(t),D5o=r(qAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cse=n(qAe,"CODE",{});var oZr=s(Cse);G5o=r(oZr,"model.train()"),oZr.forEach(t),qAe.forEach(t),O5o=i(Vt),wse=n(Vt,"P",{});var rZr=s(wse);V5o=r(rZr,"Examples:"),rZr.forEach(t),X5o=i(Vt),m($6.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),ZRe=i(c),cd=n(c,"H2",{class:!0});var i$e=s(cd);X1=n(i$e,"A",{id:!0,class:!0,href:!0});var tZr=s(X1);Ase=n(tZr,"SPAN",{});var aZr=s(Ase);m(I6.$$.fragment,aZr),aZr.forEach(t),tZr.forEach(t),z5o=i(i$e),yse=n(i$e,"SPAN",{});var nZr=s(yse);Q5o=r(nZr,"AutoModelForSeq2SeqLM"),nZr.forEach(t),i$e.forEach(t),eBe=i(c),er=n(c,"DIV",{class:!0});var rl=s(er);m(q6.$$.fragment,rl),W5o=i(rl),fd=n(rl,"P",{});var kU=s(fd);H5o=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),gq=n(kU,"A",{href:!0});var sZr=s(gq);U5o=r(sZr,"from_pretrained()"),sZr.forEach(t),J5o=r(kU," class method or the "),hq=n(kU,"A",{href:!0});var lZr=s(hq);Y5o=r(lZr,"from_config()"),lZr.forEach(t),K5o=r(kU,` class
method.`),kU.forEach(t),Z5o=i(rl),N6=n(rl,"P",{});var d$e=s(N6);e3o=r(d$e,"This class cannot be instantiated directly using "),Lse=n(d$e,"CODE",{});var iZr=s(Lse);o3o=r(iZr,"__init__()"),iZr.forEach(t),r3o=r(d$e," (throws an error)."),d$e.forEach(t),t3o=i(rl),Hr=n(rl,"DIV",{class:!0});var tl=s(Hr);m(j6.$$.fragment,tl),a3o=i(tl),xse=n(tl,"P",{});var dZr=s(xse);n3o=r(dZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),dZr.forEach(t),s3o=i(tl),md=n(tl,"P",{});var SU=s(md);l3o=r(SU,`Note:
Loading a model from its configuration file does `),kse=n(SU,"STRONG",{});var cZr=s(kse);i3o=r(cZr,"not"),cZr.forEach(t),d3o=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),pq=n(SU,"A",{href:!0});var fZr=s(pq);c3o=r(fZr,"from_pretrained()"),fZr.forEach(t),f3o=r(SU," to load the model weights."),SU.forEach(t),m3o=i(tl),Sse=n(tl,"P",{});var mZr=s(Sse);g3o=r(mZr,"Examples:"),mZr.forEach(t),h3o=i(tl),m(D6.$$.fragment,tl),tl.forEach(t),p3o=i(rl),Ge=n(rl,"DIV",{class:!0});var Xt=s(Ge);m(G6.$$.fragment,Xt),_3o=i(Xt),Rse=n(Xt,"P",{});var gZr=s(Rse);u3o=r(gZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),gZr.forEach(t),b3o=i(Xt),Ha=n(Xt,"P",{});var $C=s(Ha);v3o=r($C,"The model class to instantiate is selected based on the "),Bse=n($C,"CODE",{});var hZr=s(Bse);F3o=r(hZr,"model_type"),hZr.forEach(t),T3o=r($C,` property of the config object (either
passed as an argument or loaded from `),Pse=n($C,"CODE",{});var pZr=s(Pse);M3o=r(pZr,"pretrained_model_name_or_path"),pZr.forEach(t),E3o=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$se=n($C,"CODE",{});var _Zr=s($se);C3o=r(_Zr,"pretrained_model_name_or_path"),_Zr.forEach(t),w3o=r($C,":"),$C.forEach(t),A3o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);z1=n(le,"LI",{});var NAe=s(z1);Ise=n(NAe,"STRONG",{});var uZr=s(Ise);y3o=r(uZr,"bart"),uZr.forEach(t),L3o=r(NAe," \u2014 "),_q=n(NAe,"A",{href:!0});var bZr=s(_q);x3o=r(bZr,"BartForConditionalGeneration"),bZr.forEach(t),k3o=r(NAe," (BART model)"),NAe.forEach(t),S3o=i(le),Q1=n(le,"LI",{});var jAe=s(Q1);qse=n(jAe,"STRONG",{});var vZr=s(qse);R3o=r(vZr,"bigbird_pegasus"),vZr.forEach(t),B3o=r(jAe," \u2014 "),uq=n(jAe,"A",{href:!0});var FZr=s(uq);P3o=r(FZr,"BigBirdPegasusForConditionalGeneration"),FZr.forEach(t),$3o=r(jAe," (BigBirdPegasus model)"),jAe.forEach(t),I3o=i(le),W1=n(le,"LI",{});var DAe=s(W1);Nse=n(DAe,"STRONG",{});var TZr=s(Nse);q3o=r(TZr,"blenderbot"),TZr.forEach(t),N3o=r(DAe," \u2014 "),bq=n(DAe,"A",{href:!0});var MZr=s(bq);j3o=r(MZr,"BlenderbotForConditionalGeneration"),MZr.forEach(t),D3o=r(DAe," (Blenderbot model)"),DAe.forEach(t),G3o=i(le),H1=n(le,"LI",{});var GAe=s(H1);jse=n(GAe,"STRONG",{});var EZr=s(jse);O3o=r(EZr,"blenderbot-small"),EZr.forEach(t),V3o=r(GAe," \u2014 "),vq=n(GAe,"A",{href:!0});var CZr=s(vq);X3o=r(CZr,"BlenderbotSmallForConditionalGeneration"),CZr.forEach(t),z3o=r(GAe," (BlenderbotSmall model)"),GAe.forEach(t),Q3o=i(le),U1=n(le,"LI",{});var OAe=s(U1);Dse=n(OAe,"STRONG",{});var wZr=s(Dse);W3o=r(wZr,"encoder-decoder"),wZr.forEach(t),H3o=r(OAe," \u2014 "),Fq=n(OAe,"A",{href:!0});var AZr=s(Fq);U3o=r(AZr,"EncoderDecoderModel"),AZr.forEach(t),J3o=r(OAe," (Encoder decoder model)"),OAe.forEach(t),Y3o=i(le),J1=n(le,"LI",{});var VAe=s(J1);Gse=n(VAe,"STRONG",{});var yZr=s(Gse);K3o=r(yZr,"fsmt"),yZr.forEach(t),Z3o=r(VAe," \u2014 "),Tq=n(VAe,"A",{href:!0});var LZr=s(Tq);eCo=r(LZr,"FSMTForConditionalGeneration"),LZr.forEach(t),oCo=r(VAe," (FairSeq Machine-Translation model)"),VAe.forEach(t),rCo=i(le),Y1=n(le,"LI",{});var XAe=s(Y1);Ose=n(XAe,"STRONG",{});var xZr=s(Ose);tCo=r(xZr,"led"),xZr.forEach(t),aCo=r(XAe," \u2014 "),Mq=n(XAe,"A",{href:!0});var kZr=s(Mq);nCo=r(kZr,"LEDForConditionalGeneration"),kZr.forEach(t),sCo=r(XAe," (LED model)"),XAe.forEach(t),lCo=i(le),K1=n(le,"LI",{});var zAe=s(K1);Vse=n(zAe,"STRONG",{});var SZr=s(Vse);iCo=r(SZr,"m2m_100"),SZr.forEach(t),dCo=r(zAe," \u2014 "),Eq=n(zAe,"A",{href:!0});var RZr=s(Eq);cCo=r(RZr,"M2M100ForConditionalGeneration"),RZr.forEach(t),fCo=r(zAe," (M2M100 model)"),zAe.forEach(t),mCo=i(le),Z1=n(le,"LI",{});var QAe=s(Z1);Xse=n(QAe,"STRONG",{});var BZr=s(Xse);gCo=r(BZr,"marian"),BZr.forEach(t),hCo=r(QAe," \u2014 "),Cq=n(QAe,"A",{href:!0});var PZr=s(Cq);pCo=r(PZr,"MarianMTModel"),PZr.forEach(t),_Co=r(QAe," (Marian model)"),QAe.forEach(t),uCo=i(le),eb=n(le,"LI",{});var WAe=s(eb);zse=n(WAe,"STRONG",{});var $Zr=s(zse);bCo=r($Zr,"mbart"),$Zr.forEach(t),vCo=r(WAe," \u2014 "),wq=n(WAe,"A",{href:!0});var IZr=s(wq);FCo=r(IZr,"MBartForConditionalGeneration"),IZr.forEach(t),TCo=r(WAe," (mBART model)"),WAe.forEach(t),MCo=i(le),ob=n(le,"LI",{});var HAe=s(ob);Qse=n(HAe,"STRONG",{});var qZr=s(Qse);ECo=r(qZr,"mt5"),qZr.forEach(t),CCo=r(HAe," \u2014 "),Aq=n(HAe,"A",{href:!0});var NZr=s(Aq);wCo=r(NZr,"MT5ForConditionalGeneration"),NZr.forEach(t),ACo=r(HAe," (mT5 model)"),HAe.forEach(t),yCo=i(le),rb=n(le,"LI",{});var UAe=s(rb);Wse=n(UAe,"STRONG",{});var jZr=s(Wse);LCo=r(jZr,"pegasus"),jZr.forEach(t),xCo=r(UAe," \u2014 "),yq=n(UAe,"A",{href:!0});var DZr=s(yq);kCo=r(DZr,"PegasusForConditionalGeneration"),DZr.forEach(t),SCo=r(UAe," (Pegasus model)"),UAe.forEach(t),RCo=i(le),tb=n(le,"LI",{});var JAe=s(tb);Hse=n(JAe,"STRONG",{});var GZr=s(Hse);BCo=r(GZr,"plbart"),GZr.forEach(t),PCo=r(JAe," \u2014 "),Lq=n(JAe,"A",{href:!0});var OZr=s(Lq);$Co=r(OZr,"PLBartForConditionalGeneration"),OZr.forEach(t),ICo=r(JAe," (PLBart model)"),JAe.forEach(t),qCo=i(le),ab=n(le,"LI",{});var YAe=s(ab);Use=n(YAe,"STRONG",{});var VZr=s(Use);NCo=r(VZr,"prophetnet"),VZr.forEach(t),jCo=r(YAe," \u2014 "),xq=n(YAe,"A",{href:!0});var XZr=s(xq);DCo=r(XZr,"ProphetNetForConditionalGeneration"),XZr.forEach(t),GCo=r(YAe," (ProphetNet model)"),YAe.forEach(t),OCo=i(le),nb=n(le,"LI",{});var KAe=s(nb);Jse=n(KAe,"STRONG",{});var zZr=s(Jse);VCo=r(zZr,"t5"),zZr.forEach(t),XCo=r(KAe," \u2014 "),kq=n(KAe,"A",{href:!0});var QZr=s(kq);zCo=r(QZr,"T5ForConditionalGeneration"),QZr.forEach(t),QCo=r(KAe," (T5 model)"),KAe.forEach(t),WCo=i(le),sb=n(le,"LI",{});var ZAe=s(sb);Yse=n(ZAe,"STRONG",{});var WZr=s(Yse);HCo=r(WZr,"tapex"),WZr.forEach(t),UCo=r(ZAe," \u2014 "),Sq=n(ZAe,"A",{href:!0});var HZr=s(Sq);JCo=r(HZr,"BartForConditionalGeneration"),HZr.forEach(t),YCo=r(ZAe," (TAPEX model)"),ZAe.forEach(t),KCo=i(le),lb=n(le,"LI",{});var e0e=s(lb);Kse=n(e0e,"STRONG",{});var UZr=s(Kse);ZCo=r(UZr,"xlm-prophetnet"),UZr.forEach(t),ewo=r(e0e," \u2014 "),Rq=n(e0e,"A",{href:!0});var JZr=s(Rq);owo=r(JZr,"XLMProphetNetForConditionalGeneration"),JZr.forEach(t),rwo=r(e0e," (XLMProphetNet model)"),e0e.forEach(t),le.forEach(t),two=i(Xt),ib=n(Xt,"P",{});var o0e=s(ib);awo=r(o0e,"The model is set in evaluation mode by default using "),Zse=n(o0e,"CODE",{});var YZr=s(Zse);nwo=r(YZr,"model.eval()"),YZr.forEach(t),swo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ele=n(o0e,"CODE",{});var KZr=s(ele);lwo=r(KZr,"model.train()"),KZr.forEach(t),o0e.forEach(t),iwo=i(Xt),ole=n(Xt,"P",{});var ZZr=s(ole);dwo=r(ZZr,"Examples:"),ZZr.forEach(t),cwo=i(Xt),m(O6.$$.fragment,Xt),Xt.forEach(t),rl.forEach(t),oBe=i(c),gd=n(c,"H2",{class:!0});var c$e=s(gd);db=n(c$e,"A",{id:!0,class:!0,href:!0});var eet=s(db);rle=n(eet,"SPAN",{});var oet=s(rle);m(V6.$$.fragment,oet),oet.forEach(t),eet.forEach(t),fwo=i(c$e),tle=n(c$e,"SPAN",{});var ret=s(tle);mwo=r(ret,"AutoModelForSequenceClassification"),ret.forEach(t),c$e.forEach(t),rBe=i(c),or=n(c,"DIV",{class:!0});var al=s(or);m(X6.$$.fragment,al),gwo=i(al),hd=n(al,"P",{});var RU=s(hd);hwo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Bq=n(RU,"A",{href:!0});var tet=s(Bq);pwo=r(tet,"from_pretrained()"),tet.forEach(t),_wo=r(RU," class method or the "),Pq=n(RU,"A",{href:!0});var aet=s(Pq);uwo=r(aet,"from_config()"),aet.forEach(t),bwo=r(RU,` class
method.`),RU.forEach(t),vwo=i(al),z6=n(al,"P",{});var f$e=s(z6);Fwo=r(f$e,"This class cannot be instantiated directly using "),ale=n(f$e,"CODE",{});var net=s(ale);Two=r(net,"__init__()"),net.forEach(t),Mwo=r(f$e," (throws an error)."),f$e.forEach(t),Ewo=i(al),Ur=n(al,"DIV",{class:!0});var nl=s(Ur);m(Q6.$$.fragment,nl),Cwo=i(nl),nle=n(nl,"P",{});var set=s(nle);wwo=r(set,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),set.forEach(t),Awo=i(nl),pd=n(nl,"P",{});var BU=s(pd);ywo=r(BU,`Note:
Loading a model from its configuration file does `),sle=n(BU,"STRONG",{});var iet=s(sle);Lwo=r(iet,"not"),iet.forEach(t),xwo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$q=n(BU,"A",{href:!0});var det=s($q);kwo=r(det,"from_pretrained()"),det.forEach(t),Swo=r(BU," to load the model weights."),BU.forEach(t),Rwo=i(nl),lle=n(nl,"P",{});var cet=s(lle);Bwo=r(cet,"Examples:"),cet.forEach(t),Pwo=i(nl),m(W6.$$.fragment,nl),nl.forEach(t),$wo=i(al),Oe=n(al,"DIV",{class:!0});var zt=s(Oe);m(H6.$$.fragment,zt),Iwo=i(zt),ile=n(zt,"P",{});var fet=s(ile);qwo=r(fet,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fet.forEach(t),Nwo=i(zt),Ua=n(zt,"P",{});var IC=s(Ua);jwo=r(IC,"The model class to instantiate is selected based on the "),dle=n(IC,"CODE",{});var met=s(dle);Dwo=r(met,"model_type"),met.forEach(t),Gwo=r(IC,` property of the config object (either
passed as an argument or loaded from `),cle=n(IC,"CODE",{});var get=s(cle);Owo=r(get,"pretrained_model_name_or_path"),get.forEach(t),Vwo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fle=n(IC,"CODE",{});var het=s(fle);Xwo=r(het,"pretrained_model_name_or_path"),het.forEach(t),zwo=r(IC,":"),IC.forEach(t),Qwo=i(zt),y=n(zt,"UL",{});var L=s(y);cb=n(L,"LI",{});var r0e=s(cb);mle=n(r0e,"STRONG",{});var pet=s(mle);Wwo=r(pet,"albert"),pet.forEach(t),Hwo=r(r0e," \u2014 "),Iq=n(r0e,"A",{href:!0});var _et=s(Iq);Uwo=r(_et,"AlbertForSequenceClassification"),_et.forEach(t),Jwo=r(r0e," (ALBERT model)"),r0e.forEach(t),Ywo=i(L),fb=n(L,"LI",{});var t0e=s(fb);gle=n(t0e,"STRONG",{});var uet=s(gle);Kwo=r(uet,"bart"),uet.forEach(t),Zwo=r(t0e," \u2014 "),qq=n(t0e,"A",{href:!0});var bet=s(qq);e6o=r(bet,"BartForSequenceClassification"),bet.forEach(t),o6o=r(t0e," (BART model)"),t0e.forEach(t),r6o=i(L),mb=n(L,"LI",{});var a0e=s(mb);hle=n(a0e,"STRONG",{});var vet=s(hle);t6o=r(vet,"bert"),vet.forEach(t),a6o=r(a0e," \u2014 "),Nq=n(a0e,"A",{href:!0});var Fet=s(Nq);n6o=r(Fet,"BertForSequenceClassification"),Fet.forEach(t),s6o=r(a0e," (BERT model)"),a0e.forEach(t),l6o=i(L),gb=n(L,"LI",{});var n0e=s(gb);ple=n(n0e,"STRONG",{});var Tet=s(ple);i6o=r(Tet,"big_bird"),Tet.forEach(t),d6o=r(n0e," \u2014 "),jq=n(n0e,"A",{href:!0});var Met=s(jq);c6o=r(Met,"BigBirdForSequenceClassification"),Met.forEach(t),f6o=r(n0e," (BigBird model)"),n0e.forEach(t),m6o=i(L),hb=n(L,"LI",{});var s0e=s(hb);_le=n(s0e,"STRONG",{});var Eet=s(_le);g6o=r(Eet,"bigbird_pegasus"),Eet.forEach(t),h6o=r(s0e," \u2014 "),Dq=n(s0e,"A",{href:!0});var Cet=s(Dq);p6o=r(Cet,"BigBirdPegasusForSequenceClassification"),Cet.forEach(t),_6o=r(s0e," (BigBirdPegasus model)"),s0e.forEach(t),u6o=i(L),pb=n(L,"LI",{});var l0e=s(pb);ule=n(l0e,"STRONG",{});var wet=s(ule);b6o=r(wet,"camembert"),wet.forEach(t),v6o=r(l0e," \u2014 "),Gq=n(l0e,"A",{href:!0});var Aet=s(Gq);F6o=r(Aet,"CamembertForSequenceClassification"),Aet.forEach(t),T6o=r(l0e," (CamemBERT model)"),l0e.forEach(t),M6o=i(L),_b=n(L,"LI",{});var i0e=s(_b);ble=n(i0e,"STRONG",{});var yet=s(ble);E6o=r(yet,"canine"),yet.forEach(t),C6o=r(i0e," \u2014 "),Oq=n(i0e,"A",{href:!0});var Let=s(Oq);w6o=r(Let,"CanineForSequenceClassification"),Let.forEach(t),A6o=r(i0e," (Canine model)"),i0e.forEach(t),y6o=i(L),ub=n(L,"LI",{});var d0e=s(ub);vle=n(d0e,"STRONG",{});var xet=s(vle);L6o=r(xet,"convbert"),xet.forEach(t),x6o=r(d0e," \u2014 "),Vq=n(d0e,"A",{href:!0});var ket=s(Vq);k6o=r(ket,"ConvBertForSequenceClassification"),ket.forEach(t),S6o=r(d0e," (ConvBERT model)"),d0e.forEach(t),R6o=i(L),bb=n(L,"LI",{});var c0e=s(bb);Fle=n(c0e,"STRONG",{});var Set=s(Fle);B6o=r(Set,"ctrl"),Set.forEach(t),P6o=r(c0e," \u2014 "),Xq=n(c0e,"A",{href:!0});var Ret=s(Xq);$6o=r(Ret,"CTRLForSequenceClassification"),Ret.forEach(t),I6o=r(c0e," (CTRL model)"),c0e.forEach(t),q6o=i(L),vb=n(L,"LI",{});var f0e=s(vb);Tle=n(f0e,"STRONG",{});var Bet=s(Tle);N6o=r(Bet,"data2vec-text"),Bet.forEach(t),j6o=r(f0e," \u2014 "),zq=n(f0e,"A",{href:!0});var Pet=s(zq);D6o=r(Pet,"Data2VecTextForSequenceClassification"),Pet.forEach(t),G6o=r(f0e," (Data2VecText model)"),f0e.forEach(t),O6o=i(L),Fb=n(L,"LI",{});var m0e=s(Fb);Mle=n(m0e,"STRONG",{});var $et=s(Mle);V6o=r($et,"deberta"),$et.forEach(t),X6o=r(m0e," \u2014 "),Qq=n(m0e,"A",{href:!0});var Iet=s(Qq);z6o=r(Iet,"DebertaForSequenceClassification"),Iet.forEach(t),Q6o=r(m0e," (DeBERTa model)"),m0e.forEach(t),W6o=i(L),Tb=n(L,"LI",{});var g0e=s(Tb);Ele=n(g0e,"STRONG",{});var qet=s(Ele);H6o=r(qet,"deberta-v2"),qet.forEach(t),U6o=r(g0e," \u2014 "),Wq=n(g0e,"A",{href:!0});var Net=s(Wq);J6o=r(Net,"DebertaV2ForSequenceClassification"),Net.forEach(t),Y6o=r(g0e," (DeBERTa-v2 model)"),g0e.forEach(t),K6o=i(L),Mb=n(L,"LI",{});var h0e=s(Mb);Cle=n(h0e,"STRONG",{});var jet=s(Cle);Z6o=r(jet,"distilbert"),jet.forEach(t),eAo=r(h0e," \u2014 "),Hq=n(h0e,"A",{href:!0});var Det=s(Hq);oAo=r(Det,"DistilBertForSequenceClassification"),Det.forEach(t),rAo=r(h0e," (DistilBERT model)"),h0e.forEach(t),tAo=i(L),Eb=n(L,"LI",{});var p0e=s(Eb);wle=n(p0e,"STRONG",{});var Get=s(wle);aAo=r(Get,"electra"),Get.forEach(t),nAo=r(p0e," \u2014 "),Uq=n(p0e,"A",{href:!0});var Oet=s(Uq);sAo=r(Oet,"ElectraForSequenceClassification"),Oet.forEach(t),lAo=r(p0e," (ELECTRA model)"),p0e.forEach(t),iAo=i(L),Cb=n(L,"LI",{});var _0e=s(Cb);Ale=n(_0e,"STRONG",{});var Vet=s(Ale);dAo=r(Vet,"flaubert"),Vet.forEach(t),cAo=r(_0e," \u2014 "),Jq=n(_0e,"A",{href:!0});var Xet=s(Jq);fAo=r(Xet,"FlaubertForSequenceClassification"),Xet.forEach(t),mAo=r(_0e," (FlauBERT model)"),_0e.forEach(t),gAo=i(L),wb=n(L,"LI",{});var u0e=s(wb);yle=n(u0e,"STRONG",{});var zet=s(yle);hAo=r(zet,"fnet"),zet.forEach(t),pAo=r(u0e," \u2014 "),Yq=n(u0e,"A",{href:!0});var Qet=s(Yq);_Ao=r(Qet,"FNetForSequenceClassification"),Qet.forEach(t),uAo=r(u0e," (FNet model)"),u0e.forEach(t),bAo=i(L),Ab=n(L,"LI",{});var b0e=s(Ab);Lle=n(b0e,"STRONG",{});var Wet=s(Lle);vAo=r(Wet,"funnel"),Wet.forEach(t),FAo=r(b0e," \u2014 "),Kq=n(b0e,"A",{href:!0});var Het=s(Kq);TAo=r(Het,"FunnelForSequenceClassification"),Het.forEach(t),MAo=r(b0e," (Funnel Transformer model)"),b0e.forEach(t),EAo=i(L),yb=n(L,"LI",{});var v0e=s(yb);xle=n(v0e,"STRONG",{});var Uet=s(xle);CAo=r(Uet,"gpt2"),Uet.forEach(t),wAo=r(v0e," \u2014 "),Zq=n(v0e,"A",{href:!0});var Jet=s(Zq);AAo=r(Jet,"GPT2ForSequenceClassification"),Jet.forEach(t),yAo=r(v0e," (OpenAI GPT-2 model)"),v0e.forEach(t),LAo=i(L),Lb=n(L,"LI",{});var F0e=s(Lb);kle=n(F0e,"STRONG",{});var Yet=s(kle);xAo=r(Yet,"gpt_neo"),Yet.forEach(t),kAo=r(F0e," \u2014 "),eN=n(F0e,"A",{href:!0});var Ket=s(eN);SAo=r(Ket,"GPTNeoForSequenceClassification"),Ket.forEach(t),RAo=r(F0e," (GPT Neo model)"),F0e.forEach(t),BAo=i(L),xb=n(L,"LI",{});var T0e=s(xb);Sle=n(T0e,"STRONG",{});var Zet=s(Sle);PAo=r(Zet,"gptj"),Zet.forEach(t),$Ao=r(T0e," \u2014 "),oN=n(T0e,"A",{href:!0});var eot=s(oN);IAo=r(eot,"GPTJForSequenceClassification"),eot.forEach(t),qAo=r(T0e," (GPT-J model)"),T0e.forEach(t),NAo=i(L),kb=n(L,"LI",{});var M0e=s(kb);Rle=n(M0e,"STRONG",{});var oot=s(Rle);jAo=r(oot,"ibert"),oot.forEach(t),DAo=r(M0e," \u2014 "),rN=n(M0e,"A",{href:!0});var rot=s(rN);GAo=r(rot,"IBertForSequenceClassification"),rot.forEach(t),OAo=r(M0e," (I-BERT model)"),M0e.forEach(t),VAo=i(L),Sb=n(L,"LI",{});var E0e=s(Sb);Ble=n(E0e,"STRONG",{});var tot=s(Ble);XAo=r(tot,"layoutlm"),tot.forEach(t),zAo=r(E0e," \u2014 "),tN=n(E0e,"A",{href:!0});var aot=s(tN);QAo=r(aot,"LayoutLMForSequenceClassification"),aot.forEach(t),WAo=r(E0e," (LayoutLM model)"),E0e.forEach(t),HAo=i(L),Rb=n(L,"LI",{});var C0e=s(Rb);Ple=n(C0e,"STRONG",{});var not=s(Ple);UAo=r(not,"layoutlmv2"),not.forEach(t),JAo=r(C0e," \u2014 "),aN=n(C0e,"A",{href:!0});var sot=s(aN);YAo=r(sot,"LayoutLMv2ForSequenceClassification"),sot.forEach(t),KAo=r(C0e," (LayoutLMv2 model)"),C0e.forEach(t),ZAo=i(L),Bb=n(L,"LI",{});var w0e=s(Bb);$le=n(w0e,"STRONG",{});var lot=s($le);e0o=r(lot,"led"),lot.forEach(t),o0o=r(w0e," \u2014 "),nN=n(w0e,"A",{href:!0});var iot=s(nN);r0o=r(iot,"LEDForSequenceClassification"),iot.forEach(t),t0o=r(w0e," (LED model)"),w0e.forEach(t),a0o=i(L),Pb=n(L,"LI",{});var A0e=s(Pb);Ile=n(A0e,"STRONG",{});var dot=s(Ile);n0o=r(dot,"longformer"),dot.forEach(t),s0o=r(A0e," \u2014 "),sN=n(A0e,"A",{href:!0});var cot=s(sN);l0o=r(cot,"LongformerForSequenceClassification"),cot.forEach(t),i0o=r(A0e," (Longformer model)"),A0e.forEach(t),d0o=i(L),$b=n(L,"LI",{});var y0e=s($b);qle=n(y0e,"STRONG",{});var fot=s(qle);c0o=r(fot,"mbart"),fot.forEach(t),f0o=r(y0e," \u2014 "),lN=n(y0e,"A",{href:!0});var mot=s(lN);m0o=r(mot,"MBartForSequenceClassification"),mot.forEach(t),g0o=r(y0e," (mBART model)"),y0e.forEach(t),h0o=i(L),Ib=n(L,"LI",{});var L0e=s(Ib);Nle=n(L0e,"STRONG",{});var got=s(Nle);p0o=r(got,"megatron-bert"),got.forEach(t),_0o=r(L0e," \u2014 "),iN=n(L0e,"A",{href:!0});var hot=s(iN);u0o=r(hot,"MegatronBertForSequenceClassification"),hot.forEach(t),b0o=r(L0e," (MegatronBert model)"),L0e.forEach(t),v0o=i(L),qb=n(L,"LI",{});var x0e=s(qb);jle=n(x0e,"STRONG",{});var pot=s(jle);F0o=r(pot,"mobilebert"),pot.forEach(t),T0o=r(x0e," \u2014 "),dN=n(x0e,"A",{href:!0});var _ot=s(dN);M0o=r(_ot,"MobileBertForSequenceClassification"),_ot.forEach(t),E0o=r(x0e," (MobileBERT model)"),x0e.forEach(t),C0o=i(L),Nb=n(L,"LI",{});var k0e=s(Nb);Dle=n(k0e,"STRONG",{});var uot=s(Dle);w0o=r(uot,"mpnet"),uot.forEach(t),A0o=r(k0e," \u2014 "),cN=n(k0e,"A",{href:!0});var bot=s(cN);y0o=r(bot,"MPNetForSequenceClassification"),bot.forEach(t),L0o=r(k0e," (MPNet model)"),k0e.forEach(t),x0o=i(L),jb=n(L,"LI",{});var S0e=s(jb);Gle=n(S0e,"STRONG",{});var vot=s(Gle);k0o=r(vot,"nystromformer"),vot.forEach(t),S0o=r(S0e," \u2014 "),fN=n(S0e,"A",{href:!0});var Fot=s(fN);R0o=r(Fot,"NystromformerForSequenceClassification"),Fot.forEach(t),B0o=r(S0e," (Nystromformer model)"),S0e.forEach(t),P0o=i(L),Db=n(L,"LI",{});var R0e=s(Db);Ole=n(R0e,"STRONG",{});var Tot=s(Ole);$0o=r(Tot,"openai-gpt"),Tot.forEach(t),I0o=r(R0e," \u2014 "),mN=n(R0e,"A",{href:!0});var Mot=s(mN);q0o=r(Mot,"OpenAIGPTForSequenceClassification"),Mot.forEach(t),N0o=r(R0e," (OpenAI GPT model)"),R0e.forEach(t),j0o=i(L),Gb=n(L,"LI",{});var B0e=s(Gb);Vle=n(B0e,"STRONG",{});var Eot=s(Vle);D0o=r(Eot,"perceiver"),Eot.forEach(t),G0o=r(B0e," \u2014 "),gN=n(B0e,"A",{href:!0});var Cot=s(gN);O0o=r(Cot,"PerceiverForSequenceClassification"),Cot.forEach(t),V0o=r(B0e," (Perceiver model)"),B0e.forEach(t),X0o=i(L),Ob=n(L,"LI",{});var P0e=s(Ob);Xle=n(P0e,"STRONG",{});var wot=s(Xle);z0o=r(wot,"plbart"),wot.forEach(t),Q0o=r(P0e," \u2014 "),hN=n(P0e,"A",{href:!0});var Aot=s(hN);W0o=r(Aot,"PLBartForSequenceClassification"),Aot.forEach(t),H0o=r(P0e," (PLBart model)"),P0e.forEach(t),U0o=i(L),Vb=n(L,"LI",{});var $0e=s(Vb);zle=n($0e,"STRONG",{});var yot=s(zle);J0o=r(yot,"qdqbert"),yot.forEach(t),Y0o=r($0e," \u2014 "),pN=n($0e,"A",{href:!0});var Lot=s(pN);K0o=r(Lot,"QDQBertForSequenceClassification"),Lot.forEach(t),Z0o=r($0e," (QDQBert model)"),$0e.forEach(t),eyo=i(L),Xb=n(L,"LI",{});var I0e=s(Xb);Qle=n(I0e,"STRONG",{});var xot=s(Qle);oyo=r(xot,"reformer"),xot.forEach(t),ryo=r(I0e," \u2014 "),_N=n(I0e,"A",{href:!0});var kot=s(_N);tyo=r(kot,"ReformerForSequenceClassification"),kot.forEach(t),ayo=r(I0e," (Reformer model)"),I0e.forEach(t),nyo=i(L),zb=n(L,"LI",{});var q0e=s(zb);Wle=n(q0e,"STRONG",{});var Sot=s(Wle);syo=r(Sot,"rembert"),Sot.forEach(t),lyo=r(q0e," \u2014 "),uN=n(q0e,"A",{href:!0});var Rot=s(uN);iyo=r(Rot,"RemBertForSequenceClassification"),Rot.forEach(t),dyo=r(q0e," (RemBERT model)"),q0e.forEach(t),cyo=i(L),Qb=n(L,"LI",{});var N0e=s(Qb);Hle=n(N0e,"STRONG",{});var Bot=s(Hle);fyo=r(Bot,"roberta"),Bot.forEach(t),myo=r(N0e," \u2014 "),bN=n(N0e,"A",{href:!0});var Pot=s(bN);gyo=r(Pot,"RobertaForSequenceClassification"),Pot.forEach(t),hyo=r(N0e," (RoBERTa model)"),N0e.forEach(t),pyo=i(L),Wb=n(L,"LI",{});var j0e=s(Wb);Ule=n(j0e,"STRONG",{});var $ot=s(Ule);_yo=r($ot,"roformer"),$ot.forEach(t),uyo=r(j0e," \u2014 "),vN=n(j0e,"A",{href:!0});var Iot=s(vN);byo=r(Iot,"RoFormerForSequenceClassification"),Iot.forEach(t),vyo=r(j0e," (RoFormer model)"),j0e.forEach(t),Fyo=i(L),Hb=n(L,"LI",{});var D0e=s(Hb);Jle=n(D0e,"STRONG",{});var qot=s(Jle);Tyo=r(qot,"squeezebert"),qot.forEach(t),Myo=r(D0e," \u2014 "),FN=n(D0e,"A",{href:!0});var Not=s(FN);Eyo=r(Not,"SqueezeBertForSequenceClassification"),Not.forEach(t),Cyo=r(D0e," (SqueezeBERT model)"),D0e.forEach(t),wyo=i(L),Ub=n(L,"LI",{});var G0e=s(Ub);Yle=n(G0e,"STRONG",{});var jot=s(Yle);Ayo=r(jot,"tapas"),jot.forEach(t),yyo=r(G0e," \u2014 "),TN=n(G0e,"A",{href:!0});var Dot=s(TN);Lyo=r(Dot,"TapasForSequenceClassification"),Dot.forEach(t),xyo=r(G0e," (TAPAS model)"),G0e.forEach(t),kyo=i(L),Jb=n(L,"LI",{});var O0e=s(Jb);Kle=n(O0e,"STRONG",{});var Got=s(Kle);Syo=r(Got,"tapex"),Got.forEach(t),Ryo=r(O0e," \u2014 "),MN=n(O0e,"A",{href:!0});var Oot=s(MN);Byo=r(Oot,"BartForSequenceClassification"),Oot.forEach(t),Pyo=r(O0e," (TAPEX model)"),O0e.forEach(t),$yo=i(L),Yb=n(L,"LI",{});var V0e=s(Yb);Zle=n(V0e,"STRONG",{});var Vot=s(Zle);Iyo=r(Vot,"transfo-xl"),Vot.forEach(t),qyo=r(V0e," \u2014 "),EN=n(V0e,"A",{href:!0});var Xot=s(EN);Nyo=r(Xot,"TransfoXLForSequenceClassification"),Xot.forEach(t),jyo=r(V0e," (Transformer-XL model)"),V0e.forEach(t),Dyo=i(L),Kb=n(L,"LI",{});var X0e=s(Kb);eie=n(X0e,"STRONG",{});var zot=s(eie);Gyo=r(zot,"xlm"),zot.forEach(t),Oyo=r(X0e," \u2014 "),CN=n(X0e,"A",{href:!0});var Qot=s(CN);Vyo=r(Qot,"XLMForSequenceClassification"),Qot.forEach(t),Xyo=r(X0e," (XLM model)"),X0e.forEach(t),zyo=i(L),Zb=n(L,"LI",{});var z0e=s(Zb);oie=n(z0e,"STRONG",{});var Wot=s(oie);Qyo=r(Wot,"xlm-roberta"),Wot.forEach(t),Wyo=r(z0e," \u2014 "),wN=n(z0e,"A",{href:!0});var Hot=s(wN);Hyo=r(Hot,"XLMRobertaForSequenceClassification"),Hot.forEach(t),Uyo=r(z0e," (XLM-RoBERTa model)"),z0e.forEach(t),Jyo=i(L),e2=n(L,"LI",{});var Q0e=s(e2);rie=n(Q0e,"STRONG",{});var Uot=s(rie);Yyo=r(Uot,"xlm-roberta-xl"),Uot.forEach(t),Kyo=r(Q0e," \u2014 "),AN=n(Q0e,"A",{href:!0});var Jot=s(AN);Zyo=r(Jot,"XLMRobertaXLForSequenceClassification"),Jot.forEach(t),e8o=r(Q0e," (XLM-RoBERTa-XL model)"),Q0e.forEach(t),o8o=i(L),o2=n(L,"LI",{});var W0e=s(o2);tie=n(W0e,"STRONG",{});var Yot=s(tie);r8o=r(Yot,"xlnet"),Yot.forEach(t),t8o=r(W0e," \u2014 "),yN=n(W0e,"A",{href:!0});var Kot=s(yN);a8o=r(Kot,"XLNetForSequenceClassification"),Kot.forEach(t),n8o=r(W0e," (XLNet model)"),W0e.forEach(t),s8o=i(L),r2=n(L,"LI",{});var H0e=s(r2);aie=n(H0e,"STRONG",{});var Zot=s(aie);l8o=r(Zot,"yoso"),Zot.forEach(t),i8o=r(H0e," \u2014 "),LN=n(H0e,"A",{href:!0});var ert=s(LN);d8o=r(ert,"YosoForSequenceClassification"),ert.forEach(t),c8o=r(H0e," (YOSO model)"),H0e.forEach(t),L.forEach(t),f8o=i(zt),t2=n(zt,"P",{});var U0e=s(t2);m8o=r(U0e,"The model is set in evaluation mode by default using "),nie=n(U0e,"CODE",{});var ort=s(nie);g8o=r(ort,"model.eval()"),ort.forEach(t),h8o=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sie=n(U0e,"CODE",{});var rrt=s(sie);p8o=r(rrt,"model.train()"),rrt.forEach(t),U0e.forEach(t),_8o=i(zt),lie=n(zt,"P",{});var trt=s(lie);u8o=r(trt,"Examples:"),trt.forEach(t),b8o=i(zt),m(U6.$$.fragment,zt),zt.forEach(t),al.forEach(t),tBe=i(c),_d=n(c,"H2",{class:!0});var m$e=s(_d);a2=n(m$e,"A",{id:!0,class:!0,href:!0});var art=s(a2);iie=n(art,"SPAN",{});var nrt=s(iie);m(J6.$$.fragment,nrt),nrt.forEach(t),art.forEach(t),v8o=i(m$e),die=n(m$e,"SPAN",{});var srt=s(die);F8o=r(srt,"AutoModelForMultipleChoice"),srt.forEach(t),m$e.forEach(t),aBe=i(c),rr=n(c,"DIV",{class:!0});var sl=s(rr);m(Y6.$$.fragment,sl),T8o=i(sl),ud=n(sl,"P",{});var PU=s(ud);M8o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),xN=n(PU,"A",{href:!0});var lrt=s(xN);E8o=r(lrt,"from_pretrained()"),lrt.forEach(t),C8o=r(PU," class method or the "),kN=n(PU,"A",{href:!0});var irt=s(kN);w8o=r(irt,"from_config()"),irt.forEach(t),A8o=r(PU,` class
method.`),PU.forEach(t),y8o=i(sl),K6=n(sl,"P",{});var g$e=s(K6);L8o=r(g$e,"This class cannot be instantiated directly using "),cie=n(g$e,"CODE",{});var drt=s(cie);x8o=r(drt,"__init__()"),drt.forEach(t),k8o=r(g$e," (throws an error)."),g$e.forEach(t),S8o=i(sl),Jr=n(sl,"DIV",{class:!0});var ll=s(Jr);m(Z6.$$.fragment,ll),R8o=i(ll),fie=n(ll,"P",{});var crt=s(fie);B8o=r(crt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),crt.forEach(t),P8o=i(ll),bd=n(ll,"P",{});var $U=s(bd);$8o=r($U,`Note:
Loading a model from its configuration file does `),mie=n($U,"STRONG",{});var frt=s(mie);I8o=r(frt,"not"),frt.forEach(t),q8o=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=n($U,"A",{href:!0});var mrt=s(SN);N8o=r(mrt,"from_pretrained()"),mrt.forEach(t),j8o=r($U," to load the model weights."),$U.forEach(t),D8o=i(ll),gie=n(ll,"P",{});var grt=s(gie);G8o=r(grt,"Examples:"),grt.forEach(t),O8o=i(ll),m(eA.$$.fragment,ll),ll.forEach(t),V8o=i(sl),Ve=n(sl,"DIV",{class:!0});var Qt=s(Ve);m(oA.$$.fragment,Qt),X8o=i(Qt),hie=n(Qt,"P",{});var hrt=s(hie);z8o=r(hrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hrt.forEach(t),Q8o=i(Qt),Ja=n(Qt,"P",{});var qC=s(Ja);W8o=r(qC,"The model class to instantiate is selected based on the "),pie=n(qC,"CODE",{});var prt=s(pie);H8o=r(prt,"model_type"),prt.forEach(t),U8o=r(qC,` property of the config object (either
passed as an argument or loaded from `),_ie=n(qC,"CODE",{});var _rt=s(_ie);J8o=r(_rt,"pretrained_model_name_or_path"),_rt.forEach(t),Y8o=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(qC,"CODE",{});var urt=s(uie);K8o=r(urt,"pretrained_model_name_or_path"),urt.forEach(t),Z8o=r(qC,":"),qC.forEach(t),eLo=i(Qt),G=n(Qt,"UL",{});var O=s(G);n2=n(O,"LI",{});var J0e=s(n2);bie=n(J0e,"STRONG",{});var brt=s(bie);oLo=r(brt,"albert"),brt.forEach(t),rLo=r(J0e," \u2014 "),RN=n(J0e,"A",{href:!0});var vrt=s(RN);tLo=r(vrt,"AlbertForMultipleChoice"),vrt.forEach(t),aLo=r(J0e," (ALBERT model)"),J0e.forEach(t),nLo=i(O),s2=n(O,"LI",{});var Y0e=s(s2);vie=n(Y0e,"STRONG",{});var Frt=s(vie);sLo=r(Frt,"bert"),Frt.forEach(t),lLo=r(Y0e," \u2014 "),BN=n(Y0e,"A",{href:!0});var Trt=s(BN);iLo=r(Trt,"BertForMultipleChoice"),Trt.forEach(t),dLo=r(Y0e," (BERT model)"),Y0e.forEach(t),cLo=i(O),l2=n(O,"LI",{});var K0e=s(l2);Fie=n(K0e,"STRONG",{});var Mrt=s(Fie);fLo=r(Mrt,"big_bird"),Mrt.forEach(t),mLo=r(K0e," \u2014 "),PN=n(K0e,"A",{href:!0});var Ert=s(PN);gLo=r(Ert,"BigBirdForMultipleChoice"),Ert.forEach(t),hLo=r(K0e," (BigBird model)"),K0e.forEach(t),pLo=i(O),i2=n(O,"LI",{});var Z0e=s(i2);Tie=n(Z0e,"STRONG",{});var Crt=s(Tie);_Lo=r(Crt,"camembert"),Crt.forEach(t),uLo=r(Z0e," \u2014 "),$N=n(Z0e,"A",{href:!0});var wrt=s($N);bLo=r(wrt,"CamembertForMultipleChoice"),wrt.forEach(t),vLo=r(Z0e," (CamemBERT model)"),Z0e.forEach(t),FLo=i(O),d2=n(O,"LI",{});var eye=s(d2);Mie=n(eye,"STRONG",{});var Art=s(Mie);TLo=r(Art,"canine"),Art.forEach(t),MLo=r(eye," \u2014 "),IN=n(eye,"A",{href:!0});var yrt=s(IN);ELo=r(yrt,"CanineForMultipleChoice"),yrt.forEach(t),CLo=r(eye," (Canine model)"),eye.forEach(t),wLo=i(O),c2=n(O,"LI",{});var oye=s(c2);Eie=n(oye,"STRONG",{});var Lrt=s(Eie);ALo=r(Lrt,"convbert"),Lrt.forEach(t),yLo=r(oye," \u2014 "),qN=n(oye,"A",{href:!0});var xrt=s(qN);LLo=r(xrt,"ConvBertForMultipleChoice"),xrt.forEach(t),xLo=r(oye," (ConvBERT model)"),oye.forEach(t),kLo=i(O),f2=n(O,"LI",{});var rye=s(f2);Cie=n(rye,"STRONG",{});var krt=s(Cie);SLo=r(krt,"data2vec-text"),krt.forEach(t),RLo=r(rye," \u2014 "),NN=n(rye,"A",{href:!0});var Srt=s(NN);BLo=r(Srt,"Data2VecTextForMultipleChoice"),Srt.forEach(t),PLo=r(rye," (Data2VecText model)"),rye.forEach(t),$Lo=i(O),m2=n(O,"LI",{});var tye=s(m2);wie=n(tye,"STRONG",{});var Rrt=s(wie);ILo=r(Rrt,"distilbert"),Rrt.forEach(t),qLo=r(tye," \u2014 "),jN=n(tye,"A",{href:!0});var Brt=s(jN);NLo=r(Brt,"DistilBertForMultipleChoice"),Brt.forEach(t),jLo=r(tye," (DistilBERT model)"),tye.forEach(t),DLo=i(O),g2=n(O,"LI",{});var aye=s(g2);Aie=n(aye,"STRONG",{});var Prt=s(Aie);GLo=r(Prt,"electra"),Prt.forEach(t),OLo=r(aye," \u2014 "),DN=n(aye,"A",{href:!0});var $rt=s(DN);VLo=r($rt,"ElectraForMultipleChoice"),$rt.forEach(t),XLo=r(aye," (ELECTRA model)"),aye.forEach(t),zLo=i(O),h2=n(O,"LI",{});var nye=s(h2);yie=n(nye,"STRONG",{});var Irt=s(yie);QLo=r(Irt,"flaubert"),Irt.forEach(t),WLo=r(nye," \u2014 "),GN=n(nye,"A",{href:!0});var qrt=s(GN);HLo=r(qrt,"FlaubertForMultipleChoice"),qrt.forEach(t),ULo=r(nye," (FlauBERT model)"),nye.forEach(t),JLo=i(O),p2=n(O,"LI",{});var sye=s(p2);Lie=n(sye,"STRONG",{});var Nrt=s(Lie);YLo=r(Nrt,"fnet"),Nrt.forEach(t),KLo=r(sye," \u2014 "),ON=n(sye,"A",{href:!0});var jrt=s(ON);ZLo=r(jrt,"FNetForMultipleChoice"),jrt.forEach(t),e7o=r(sye," (FNet model)"),sye.forEach(t),o7o=i(O),_2=n(O,"LI",{});var lye=s(_2);xie=n(lye,"STRONG",{});var Drt=s(xie);r7o=r(Drt,"funnel"),Drt.forEach(t),t7o=r(lye," \u2014 "),VN=n(lye,"A",{href:!0});var Grt=s(VN);a7o=r(Grt,"FunnelForMultipleChoice"),Grt.forEach(t),n7o=r(lye," (Funnel Transformer model)"),lye.forEach(t),s7o=i(O),u2=n(O,"LI",{});var iye=s(u2);kie=n(iye,"STRONG",{});var Ort=s(kie);l7o=r(Ort,"ibert"),Ort.forEach(t),i7o=r(iye," \u2014 "),XN=n(iye,"A",{href:!0});var Vrt=s(XN);d7o=r(Vrt,"IBertForMultipleChoice"),Vrt.forEach(t),c7o=r(iye," (I-BERT model)"),iye.forEach(t),f7o=i(O),b2=n(O,"LI",{});var dye=s(b2);Sie=n(dye,"STRONG",{});var Xrt=s(Sie);m7o=r(Xrt,"longformer"),Xrt.forEach(t),g7o=r(dye," \u2014 "),zN=n(dye,"A",{href:!0});var zrt=s(zN);h7o=r(zrt,"LongformerForMultipleChoice"),zrt.forEach(t),p7o=r(dye," (Longformer model)"),dye.forEach(t),_7o=i(O),v2=n(O,"LI",{});var cye=s(v2);Rie=n(cye,"STRONG",{});var Qrt=s(Rie);u7o=r(Qrt,"megatron-bert"),Qrt.forEach(t),b7o=r(cye," \u2014 "),QN=n(cye,"A",{href:!0});var Wrt=s(QN);v7o=r(Wrt,"MegatronBertForMultipleChoice"),Wrt.forEach(t),F7o=r(cye," (MegatronBert model)"),cye.forEach(t),T7o=i(O),F2=n(O,"LI",{});var fye=s(F2);Bie=n(fye,"STRONG",{});var Hrt=s(Bie);M7o=r(Hrt,"mobilebert"),Hrt.forEach(t),E7o=r(fye," \u2014 "),WN=n(fye,"A",{href:!0});var Urt=s(WN);C7o=r(Urt,"MobileBertForMultipleChoice"),Urt.forEach(t),w7o=r(fye," (MobileBERT model)"),fye.forEach(t),A7o=i(O),T2=n(O,"LI",{});var mye=s(T2);Pie=n(mye,"STRONG",{});var Jrt=s(Pie);y7o=r(Jrt,"mpnet"),Jrt.forEach(t),L7o=r(mye," \u2014 "),HN=n(mye,"A",{href:!0});var Yrt=s(HN);x7o=r(Yrt,"MPNetForMultipleChoice"),Yrt.forEach(t),k7o=r(mye," (MPNet model)"),mye.forEach(t),S7o=i(O),M2=n(O,"LI",{});var gye=s(M2);$ie=n(gye,"STRONG",{});var Krt=s($ie);R7o=r(Krt,"nystromformer"),Krt.forEach(t),B7o=r(gye," \u2014 "),UN=n(gye,"A",{href:!0});var Zrt=s(UN);P7o=r(Zrt,"NystromformerForMultipleChoice"),Zrt.forEach(t),$7o=r(gye," (Nystromformer model)"),gye.forEach(t),I7o=i(O),E2=n(O,"LI",{});var hye=s(E2);Iie=n(hye,"STRONG",{});var ett=s(Iie);q7o=r(ett,"qdqbert"),ett.forEach(t),N7o=r(hye," \u2014 "),JN=n(hye,"A",{href:!0});var ott=s(JN);j7o=r(ott,"QDQBertForMultipleChoice"),ott.forEach(t),D7o=r(hye," (QDQBert model)"),hye.forEach(t),G7o=i(O),C2=n(O,"LI",{});var pye=s(C2);qie=n(pye,"STRONG",{});var rtt=s(qie);O7o=r(rtt,"rembert"),rtt.forEach(t),V7o=r(pye," \u2014 "),YN=n(pye,"A",{href:!0});var ttt=s(YN);X7o=r(ttt,"RemBertForMultipleChoice"),ttt.forEach(t),z7o=r(pye," (RemBERT model)"),pye.forEach(t),Q7o=i(O),w2=n(O,"LI",{});var _ye=s(w2);Nie=n(_ye,"STRONG",{});var att=s(Nie);W7o=r(att,"roberta"),att.forEach(t),H7o=r(_ye," \u2014 "),KN=n(_ye,"A",{href:!0});var ntt=s(KN);U7o=r(ntt,"RobertaForMultipleChoice"),ntt.forEach(t),J7o=r(_ye," (RoBERTa model)"),_ye.forEach(t),Y7o=i(O),A2=n(O,"LI",{});var uye=s(A2);jie=n(uye,"STRONG",{});var stt=s(jie);K7o=r(stt,"roformer"),stt.forEach(t),Z7o=r(uye," \u2014 "),ZN=n(uye,"A",{href:!0});var ltt=s(ZN);e9o=r(ltt,"RoFormerForMultipleChoice"),ltt.forEach(t),o9o=r(uye," (RoFormer model)"),uye.forEach(t),r9o=i(O),y2=n(O,"LI",{});var bye=s(y2);Die=n(bye,"STRONG",{});var itt=s(Die);t9o=r(itt,"squeezebert"),itt.forEach(t),a9o=r(bye," \u2014 "),ej=n(bye,"A",{href:!0});var dtt=s(ej);n9o=r(dtt,"SqueezeBertForMultipleChoice"),dtt.forEach(t),s9o=r(bye," (SqueezeBERT model)"),bye.forEach(t),l9o=i(O),L2=n(O,"LI",{});var vye=s(L2);Gie=n(vye,"STRONG",{});var ctt=s(Gie);i9o=r(ctt,"xlm"),ctt.forEach(t),d9o=r(vye," \u2014 "),oj=n(vye,"A",{href:!0});var ftt=s(oj);c9o=r(ftt,"XLMForMultipleChoice"),ftt.forEach(t),f9o=r(vye," (XLM model)"),vye.forEach(t),m9o=i(O),x2=n(O,"LI",{});var Fye=s(x2);Oie=n(Fye,"STRONG",{});var mtt=s(Oie);g9o=r(mtt,"xlm-roberta"),mtt.forEach(t),h9o=r(Fye," \u2014 "),rj=n(Fye,"A",{href:!0});var gtt=s(rj);p9o=r(gtt,"XLMRobertaForMultipleChoice"),gtt.forEach(t),_9o=r(Fye," (XLM-RoBERTa model)"),Fye.forEach(t),u9o=i(O),k2=n(O,"LI",{});var Tye=s(k2);Vie=n(Tye,"STRONG",{});var htt=s(Vie);b9o=r(htt,"xlm-roberta-xl"),htt.forEach(t),v9o=r(Tye," \u2014 "),tj=n(Tye,"A",{href:!0});var ptt=s(tj);F9o=r(ptt,"XLMRobertaXLForMultipleChoice"),ptt.forEach(t),T9o=r(Tye," (XLM-RoBERTa-XL model)"),Tye.forEach(t),M9o=i(O),S2=n(O,"LI",{});var Mye=s(S2);Xie=n(Mye,"STRONG",{});var _tt=s(Xie);E9o=r(_tt,"xlnet"),_tt.forEach(t),C9o=r(Mye," \u2014 "),aj=n(Mye,"A",{href:!0});var utt=s(aj);w9o=r(utt,"XLNetForMultipleChoice"),utt.forEach(t),A9o=r(Mye," (XLNet model)"),Mye.forEach(t),y9o=i(O),R2=n(O,"LI",{});var Eye=s(R2);zie=n(Eye,"STRONG",{});var btt=s(zie);L9o=r(btt,"yoso"),btt.forEach(t),x9o=r(Eye," \u2014 "),nj=n(Eye,"A",{href:!0});var vtt=s(nj);k9o=r(vtt,"YosoForMultipleChoice"),vtt.forEach(t),S9o=r(Eye," (YOSO model)"),Eye.forEach(t),O.forEach(t),R9o=i(Qt),B2=n(Qt,"P",{});var Cye=s(B2);B9o=r(Cye,"The model is set in evaluation mode by default using "),Qie=n(Cye,"CODE",{});var Ftt=s(Qie);P9o=r(Ftt,"model.eval()"),Ftt.forEach(t),$9o=r(Cye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wie=n(Cye,"CODE",{});var Ttt=s(Wie);I9o=r(Ttt,"model.train()"),Ttt.forEach(t),Cye.forEach(t),q9o=i(Qt),Hie=n(Qt,"P",{});var Mtt=s(Hie);N9o=r(Mtt,"Examples:"),Mtt.forEach(t),j9o=i(Qt),m(rA.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),nBe=i(c),vd=n(c,"H2",{class:!0});var h$e=s(vd);P2=n(h$e,"A",{id:!0,class:!0,href:!0});var Ett=s(P2);Uie=n(Ett,"SPAN",{});var Ctt=s(Uie);m(tA.$$.fragment,Ctt),Ctt.forEach(t),Ett.forEach(t),D9o=i(h$e),Jie=n(h$e,"SPAN",{});var wtt=s(Jie);G9o=r(wtt,"AutoModelForNextSentencePrediction"),wtt.forEach(t),h$e.forEach(t),sBe=i(c),tr=n(c,"DIV",{class:!0});var il=s(tr);m(aA.$$.fragment,il),O9o=i(il),Fd=n(il,"P",{});var IU=s(Fd);V9o=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sj=n(IU,"A",{href:!0});var Att=s(sj);X9o=r(Att,"from_pretrained()"),Att.forEach(t),z9o=r(IU," class method or the "),lj=n(IU,"A",{href:!0});var ytt=s(lj);Q9o=r(ytt,"from_config()"),ytt.forEach(t),W9o=r(IU,` class
method.`),IU.forEach(t),H9o=i(il),nA=n(il,"P",{});var p$e=s(nA);U9o=r(p$e,"This class cannot be instantiated directly using "),Yie=n(p$e,"CODE",{});var Ltt=s(Yie);J9o=r(Ltt,"__init__()"),Ltt.forEach(t),Y9o=r(p$e," (throws an error)."),p$e.forEach(t),K9o=i(il),Yr=n(il,"DIV",{class:!0});var dl=s(Yr);m(sA.$$.fragment,dl),Z9o=i(dl),Kie=n(dl,"P",{});var xtt=s(Kie);exo=r(xtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xtt.forEach(t),oxo=i(dl),Td=n(dl,"P",{});var qU=s(Td);rxo=r(qU,`Note:
Loading a model from its configuration file does `),Zie=n(qU,"STRONG",{});var ktt=s(Zie);txo=r(ktt,"not"),ktt.forEach(t),axo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=n(qU,"A",{href:!0});var Stt=s(ij);nxo=r(Stt,"from_pretrained()"),Stt.forEach(t),sxo=r(qU," to load the model weights."),qU.forEach(t),lxo=i(dl),ede=n(dl,"P",{});var Rtt=s(ede);ixo=r(Rtt,"Examples:"),Rtt.forEach(t),dxo=i(dl),m(lA.$$.fragment,dl),dl.forEach(t),cxo=i(il),Xe=n(il,"DIV",{class:!0});var Wt=s(Xe);m(iA.$$.fragment,Wt),fxo=i(Wt),ode=n(Wt,"P",{});var Btt=s(ode);mxo=r(Btt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Btt.forEach(t),gxo=i(Wt),Ya=n(Wt,"P",{});var NC=s(Ya);hxo=r(NC,"The model class to instantiate is selected based on the "),rde=n(NC,"CODE",{});var Ptt=s(rde);pxo=r(Ptt,"model_type"),Ptt.forEach(t),_xo=r(NC,` property of the config object (either
passed as an argument or loaded from `),tde=n(NC,"CODE",{});var $tt=s(tde);uxo=r($tt,"pretrained_model_name_or_path"),$tt.forEach(t),bxo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ade=n(NC,"CODE",{});var Itt=s(ade);vxo=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),Fxo=r(NC,":"),NC.forEach(t),Txo=i(Wt),da=n(Wt,"UL",{});var cl=s(da);$2=n(cl,"LI",{});var wye=s($2);nde=n(wye,"STRONG",{});var qtt=s(nde);Mxo=r(qtt,"bert"),qtt.forEach(t),Exo=r(wye," \u2014 "),dj=n(wye,"A",{href:!0});var Ntt=s(dj);Cxo=r(Ntt,"BertForNextSentencePrediction"),Ntt.forEach(t),wxo=r(wye," (BERT model)"),wye.forEach(t),Axo=i(cl),I2=n(cl,"LI",{});var Aye=s(I2);sde=n(Aye,"STRONG",{});var jtt=s(sde);yxo=r(jtt,"fnet"),jtt.forEach(t),Lxo=r(Aye," \u2014 "),cj=n(Aye,"A",{href:!0});var Dtt=s(cj);xxo=r(Dtt,"FNetForNextSentencePrediction"),Dtt.forEach(t),kxo=r(Aye," (FNet model)"),Aye.forEach(t),Sxo=i(cl),q2=n(cl,"LI",{});var yye=s(q2);lde=n(yye,"STRONG",{});var Gtt=s(lde);Rxo=r(Gtt,"megatron-bert"),Gtt.forEach(t),Bxo=r(yye," \u2014 "),fj=n(yye,"A",{href:!0});var Ott=s(fj);Pxo=r(Ott,"MegatronBertForNextSentencePrediction"),Ott.forEach(t),$xo=r(yye," (MegatronBert model)"),yye.forEach(t),Ixo=i(cl),N2=n(cl,"LI",{});var Lye=s(N2);ide=n(Lye,"STRONG",{});var Vtt=s(ide);qxo=r(Vtt,"mobilebert"),Vtt.forEach(t),Nxo=r(Lye," \u2014 "),mj=n(Lye,"A",{href:!0});var Xtt=s(mj);jxo=r(Xtt,"MobileBertForNextSentencePrediction"),Xtt.forEach(t),Dxo=r(Lye," (MobileBERT model)"),Lye.forEach(t),Gxo=i(cl),j2=n(cl,"LI",{});var xye=s(j2);dde=n(xye,"STRONG",{});var ztt=s(dde);Oxo=r(ztt,"qdqbert"),ztt.forEach(t),Vxo=r(xye," \u2014 "),gj=n(xye,"A",{href:!0});var Qtt=s(gj);Xxo=r(Qtt,"QDQBertForNextSentencePrediction"),Qtt.forEach(t),zxo=r(xye," (QDQBert model)"),xye.forEach(t),cl.forEach(t),Qxo=i(Wt),D2=n(Wt,"P",{});var kye=s(D2);Wxo=r(kye,"The model is set in evaluation mode by default using "),cde=n(kye,"CODE",{});var Wtt=s(cde);Hxo=r(Wtt,"model.eval()"),Wtt.forEach(t),Uxo=r(kye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fde=n(kye,"CODE",{});var Htt=s(fde);Jxo=r(Htt,"model.train()"),Htt.forEach(t),kye.forEach(t),Yxo=i(Wt),mde=n(Wt,"P",{});var Utt=s(mde);Kxo=r(Utt,"Examples:"),Utt.forEach(t),Zxo=i(Wt),m(dA.$$.fragment,Wt),Wt.forEach(t),il.forEach(t),lBe=i(c),Md=n(c,"H2",{class:!0});var _$e=s(Md);G2=n(_$e,"A",{id:!0,class:!0,href:!0});var Jtt=s(G2);gde=n(Jtt,"SPAN",{});var Ytt=s(gde);m(cA.$$.fragment,Ytt),Ytt.forEach(t),Jtt.forEach(t),eko=i(_$e),hde=n(_$e,"SPAN",{});var Ktt=s(hde);oko=r(Ktt,"AutoModelForTokenClassification"),Ktt.forEach(t),_$e.forEach(t),iBe=i(c),ar=n(c,"DIV",{class:!0});var fl=s(ar);m(fA.$$.fragment,fl),rko=i(fl),Ed=n(fl,"P",{});var NU=s(Ed);tko=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),hj=n(NU,"A",{href:!0});var Ztt=s(hj);ako=r(Ztt,"from_pretrained()"),Ztt.forEach(t),nko=r(NU," class method or the "),pj=n(NU,"A",{href:!0});var eat=s(pj);sko=r(eat,"from_config()"),eat.forEach(t),lko=r(NU,` class
method.`),NU.forEach(t),iko=i(fl),mA=n(fl,"P",{});var u$e=s(mA);dko=r(u$e,"This class cannot be instantiated directly using "),pde=n(u$e,"CODE",{});var oat=s(pde);cko=r(oat,"__init__()"),oat.forEach(t),fko=r(u$e," (throws an error)."),u$e.forEach(t),mko=i(fl),Kr=n(fl,"DIV",{class:!0});var ml=s(Kr);m(gA.$$.fragment,ml),gko=i(ml),_de=n(ml,"P",{});var rat=s(_de);hko=r(rat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),rat.forEach(t),pko=i(ml),Cd=n(ml,"P",{});var jU=s(Cd);_ko=r(jU,`Note:
Loading a model from its configuration file does `),ude=n(jU,"STRONG",{});var tat=s(ude);uko=r(tat,"not"),tat.forEach(t),bko=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),_j=n(jU,"A",{href:!0});var aat=s(_j);vko=r(aat,"from_pretrained()"),aat.forEach(t),Fko=r(jU," to load the model weights."),jU.forEach(t),Tko=i(ml),bde=n(ml,"P",{});var nat=s(bde);Mko=r(nat,"Examples:"),nat.forEach(t),Eko=i(ml),m(hA.$$.fragment,ml),ml.forEach(t),Cko=i(fl),ze=n(fl,"DIV",{class:!0});var Ht=s(ze);m(pA.$$.fragment,Ht),wko=i(Ht),vde=n(Ht,"P",{});var sat=s(vde);Ako=r(sat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sat.forEach(t),yko=i(Ht),Ka=n(Ht,"P",{});var jC=s(Ka);Lko=r(jC,"The model class to instantiate is selected based on the "),Fde=n(jC,"CODE",{});var lat=s(Fde);xko=r(lat,"model_type"),lat.forEach(t),kko=r(jC,` property of the config object (either
passed as an argument or loaded from `),Tde=n(jC,"CODE",{});var iat=s(Tde);Sko=r(iat,"pretrained_model_name_or_path"),iat.forEach(t),Rko=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mde=n(jC,"CODE",{});var dat=s(Mde);Bko=r(dat,"pretrained_model_name_or_path"),dat.forEach(t),Pko=r(jC,":"),jC.forEach(t),$ko=i(Ht),j=n(Ht,"UL",{});var D=s(j);O2=n(D,"LI",{});var Sye=s(O2);Ede=n(Sye,"STRONG",{});var cat=s(Ede);Iko=r(cat,"albert"),cat.forEach(t),qko=r(Sye," \u2014 "),uj=n(Sye,"A",{href:!0});var fat=s(uj);Nko=r(fat,"AlbertForTokenClassification"),fat.forEach(t),jko=r(Sye," (ALBERT model)"),Sye.forEach(t),Dko=i(D),V2=n(D,"LI",{});var Rye=s(V2);Cde=n(Rye,"STRONG",{});var mat=s(Cde);Gko=r(mat,"bert"),mat.forEach(t),Oko=r(Rye," \u2014 "),bj=n(Rye,"A",{href:!0});var gat=s(bj);Vko=r(gat,"BertForTokenClassification"),gat.forEach(t),Xko=r(Rye," (BERT model)"),Rye.forEach(t),zko=i(D),X2=n(D,"LI",{});var Bye=s(X2);wde=n(Bye,"STRONG",{});var hat=s(wde);Qko=r(hat,"big_bird"),hat.forEach(t),Wko=r(Bye," \u2014 "),vj=n(Bye,"A",{href:!0});var pat=s(vj);Hko=r(pat,"BigBirdForTokenClassification"),pat.forEach(t),Uko=r(Bye," (BigBird model)"),Bye.forEach(t),Jko=i(D),z2=n(D,"LI",{});var Pye=s(z2);Ade=n(Pye,"STRONG",{});var _at=s(Ade);Yko=r(_at,"camembert"),_at.forEach(t),Kko=r(Pye," \u2014 "),Fj=n(Pye,"A",{href:!0});var uat=s(Fj);Zko=r(uat,"CamembertForTokenClassification"),uat.forEach(t),eSo=r(Pye," (CamemBERT model)"),Pye.forEach(t),oSo=i(D),Q2=n(D,"LI",{});var $ye=s(Q2);yde=n($ye,"STRONG",{});var bat=s(yde);rSo=r(bat,"canine"),bat.forEach(t),tSo=r($ye," \u2014 "),Tj=n($ye,"A",{href:!0});var vat=s(Tj);aSo=r(vat,"CanineForTokenClassification"),vat.forEach(t),nSo=r($ye," (Canine model)"),$ye.forEach(t),sSo=i(D),W2=n(D,"LI",{});var Iye=s(W2);Lde=n(Iye,"STRONG",{});var Fat=s(Lde);lSo=r(Fat,"convbert"),Fat.forEach(t),iSo=r(Iye," \u2014 "),Mj=n(Iye,"A",{href:!0});var Tat=s(Mj);dSo=r(Tat,"ConvBertForTokenClassification"),Tat.forEach(t),cSo=r(Iye," (ConvBERT model)"),Iye.forEach(t),fSo=i(D),H2=n(D,"LI",{});var qye=s(H2);xde=n(qye,"STRONG",{});var Mat=s(xde);mSo=r(Mat,"data2vec-text"),Mat.forEach(t),gSo=r(qye," \u2014 "),Ej=n(qye,"A",{href:!0});var Eat=s(Ej);hSo=r(Eat,"Data2VecTextForTokenClassification"),Eat.forEach(t),pSo=r(qye," (Data2VecText model)"),qye.forEach(t),_So=i(D),U2=n(D,"LI",{});var Nye=s(U2);kde=n(Nye,"STRONG",{});var Cat=s(kde);uSo=r(Cat,"deberta"),Cat.forEach(t),bSo=r(Nye," \u2014 "),Cj=n(Nye,"A",{href:!0});var wat=s(Cj);vSo=r(wat,"DebertaForTokenClassification"),wat.forEach(t),FSo=r(Nye," (DeBERTa model)"),Nye.forEach(t),TSo=i(D),J2=n(D,"LI",{});var jye=s(J2);Sde=n(jye,"STRONG",{});var Aat=s(Sde);MSo=r(Aat,"deberta-v2"),Aat.forEach(t),ESo=r(jye," \u2014 "),wj=n(jye,"A",{href:!0});var yat=s(wj);CSo=r(yat,"DebertaV2ForTokenClassification"),yat.forEach(t),wSo=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),ASo=i(D),Y2=n(D,"LI",{});var Dye=s(Y2);Rde=n(Dye,"STRONG",{});var Lat=s(Rde);ySo=r(Lat,"distilbert"),Lat.forEach(t),LSo=r(Dye," \u2014 "),Aj=n(Dye,"A",{href:!0});var xat=s(Aj);xSo=r(xat,"DistilBertForTokenClassification"),xat.forEach(t),kSo=r(Dye," (DistilBERT model)"),Dye.forEach(t),SSo=i(D),K2=n(D,"LI",{});var Gye=s(K2);Bde=n(Gye,"STRONG",{});var kat=s(Bde);RSo=r(kat,"electra"),kat.forEach(t),BSo=r(Gye," \u2014 "),yj=n(Gye,"A",{href:!0});var Sat=s(yj);PSo=r(Sat,"ElectraForTokenClassification"),Sat.forEach(t),$So=r(Gye," (ELECTRA model)"),Gye.forEach(t),ISo=i(D),Z2=n(D,"LI",{});var Oye=s(Z2);Pde=n(Oye,"STRONG",{});var Rat=s(Pde);qSo=r(Rat,"flaubert"),Rat.forEach(t),NSo=r(Oye," \u2014 "),Lj=n(Oye,"A",{href:!0});var Bat=s(Lj);jSo=r(Bat,"FlaubertForTokenClassification"),Bat.forEach(t),DSo=r(Oye," (FlauBERT model)"),Oye.forEach(t),GSo=i(D),ev=n(D,"LI",{});var Vye=s(ev);$de=n(Vye,"STRONG",{});var Pat=s($de);OSo=r(Pat,"fnet"),Pat.forEach(t),VSo=r(Vye," \u2014 "),xj=n(Vye,"A",{href:!0});var $at=s(xj);XSo=r($at,"FNetForTokenClassification"),$at.forEach(t),zSo=r(Vye," (FNet model)"),Vye.forEach(t),QSo=i(D),ov=n(D,"LI",{});var Xye=s(ov);Ide=n(Xye,"STRONG",{});var Iat=s(Ide);WSo=r(Iat,"funnel"),Iat.forEach(t),HSo=r(Xye," \u2014 "),kj=n(Xye,"A",{href:!0});var qat=s(kj);USo=r(qat,"FunnelForTokenClassification"),qat.forEach(t),JSo=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),YSo=i(D),rv=n(D,"LI",{});var zye=s(rv);qde=n(zye,"STRONG",{});var Nat=s(qde);KSo=r(Nat,"gpt2"),Nat.forEach(t),ZSo=r(zye," \u2014 "),Sj=n(zye,"A",{href:!0});var jat=s(Sj);eRo=r(jat,"GPT2ForTokenClassification"),jat.forEach(t),oRo=r(zye," (OpenAI GPT-2 model)"),zye.forEach(t),rRo=i(D),tv=n(D,"LI",{});var Qye=s(tv);Nde=n(Qye,"STRONG",{});var Dat=s(Nde);tRo=r(Dat,"ibert"),Dat.forEach(t),aRo=r(Qye," \u2014 "),Rj=n(Qye,"A",{href:!0});var Gat=s(Rj);nRo=r(Gat,"IBertForTokenClassification"),Gat.forEach(t),sRo=r(Qye," (I-BERT model)"),Qye.forEach(t),lRo=i(D),av=n(D,"LI",{});var Wye=s(av);jde=n(Wye,"STRONG",{});var Oat=s(jde);iRo=r(Oat,"layoutlm"),Oat.forEach(t),dRo=r(Wye," \u2014 "),Bj=n(Wye,"A",{href:!0});var Vat=s(Bj);cRo=r(Vat,"LayoutLMForTokenClassification"),Vat.forEach(t),fRo=r(Wye," (LayoutLM model)"),Wye.forEach(t),mRo=i(D),nv=n(D,"LI",{});var Hye=s(nv);Dde=n(Hye,"STRONG",{});var Xat=s(Dde);gRo=r(Xat,"layoutlmv2"),Xat.forEach(t),hRo=r(Hye," \u2014 "),Pj=n(Hye,"A",{href:!0});var zat=s(Pj);pRo=r(zat,"LayoutLMv2ForTokenClassification"),zat.forEach(t),_Ro=r(Hye," (LayoutLMv2 model)"),Hye.forEach(t),uRo=i(D),sv=n(D,"LI",{});var Uye=s(sv);Gde=n(Uye,"STRONG",{});var Qat=s(Gde);bRo=r(Qat,"longformer"),Qat.forEach(t),vRo=r(Uye," \u2014 "),$j=n(Uye,"A",{href:!0});var Wat=s($j);FRo=r(Wat,"LongformerForTokenClassification"),Wat.forEach(t),TRo=r(Uye," (Longformer model)"),Uye.forEach(t),MRo=i(D),lv=n(D,"LI",{});var Jye=s(lv);Ode=n(Jye,"STRONG",{});var Hat=s(Ode);ERo=r(Hat,"megatron-bert"),Hat.forEach(t),CRo=r(Jye," \u2014 "),Ij=n(Jye,"A",{href:!0});var Uat=s(Ij);wRo=r(Uat,"MegatronBertForTokenClassification"),Uat.forEach(t),ARo=r(Jye," (MegatronBert model)"),Jye.forEach(t),yRo=i(D),iv=n(D,"LI",{});var Yye=s(iv);Vde=n(Yye,"STRONG",{});var Jat=s(Vde);LRo=r(Jat,"mobilebert"),Jat.forEach(t),xRo=r(Yye," \u2014 "),qj=n(Yye,"A",{href:!0});var Yat=s(qj);kRo=r(Yat,"MobileBertForTokenClassification"),Yat.forEach(t),SRo=r(Yye," (MobileBERT model)"),Yye.forEach(t),RRo=i(D),dv=n(D,"LI",{});var Kye=s(dv);Xde=n(Kye,"STRONG",{});var Kat=s(Xde);BRo=r(Kat,"mpnet"),Kat.forEach(t),PRo=r(Kye," \u2014 "),Nj=n(Kye,"A",{href:!0});var Zat=s(Nj);$Ro=r(Zat,"MPNetForTokenClassification"),Zat.forEach(t),IRo=r(Kye," (MPNet model)"),Kye.forEach(t),qRo=i(D),cv=n(D,"LI",{});var Zye=s(cv);zde=n(Zye,"STRONG",{});var ent=s(zde);NRo=r(ent,"nystromformer"),ent.forEach(t),jRo=r(Zye," \u2014 "),jj=n(Zye,"A",{href:!0});var ont=s(jj);DRo=r(ont,"NystromformerForTokenClassification"),ont.forEach(t),GRo=r(Zye," (Nystromformer model)"),Zye.forEach(t),ORo=i(D),fv=n(D,"LI",{});var e8e=s(fv);Qde=n(e8e,"STRONG",{});var rnt=s(Qde);VRo=r(rnt,"qdqbert"),rnt.forEach(t),XRo=r(e8e," \u2014 "),Dj=n(e8e,"A",{href:!0});var tnt=s(Dj);zRo=r(tnt,"QDQBertForTokenClassification"),tnt.forEach(t),QRo=r(e8e," (QDQBert model)"),e8e.forEach(t),WRo=i(D),mv=n(D,"LI",{});var o8e=s(mv);Wde=n(o8e,"STRONG",{});var ant=s(Wde);HRo=r(ant,"rembert"),ant.forEach(t),URo=r(o8e," \u2014 "),Gj=n(o8e,"A",{href:!0});var nnt=s(Gj);JRo=r(nnt,"RemBertForTokenClassification"),nnt.forEach(t),YRo=r(o8e," (RemBERT model)"),o8e.forEach(t),KRo=i(D),gv=n(D,"LI",{});var r8e=s(gv);Hde=n(r8e,"STRONG",{});var snt=s(Hde);ZRo=r(snt,"roberta"),snt.forEach(t),eBo=r(r8e," \u2014 "),Oj=n(r8e,"A",{href:!0});var lnt=s(Oj);oBo=r(lnt,"RobertaForTokenClassification"),lnt.forEach(t),rBo=r(r8e," (RoBERTa model)"),r8e.forEach(t),tBo=i(D),hv=n(D,"LI",{});var t8e=s(hv);Ude=n(t8e,"STRONG",{});var int=s(Ude);aBo=r(int,"roformer"),int.forEach(t),nBo=r(t8e," \u2014 "),Vj=n(t8e,"A",{href:!0});var dnt=s(Vj);sBo=r(dnt,"RoFormerForTokenClassification"),dnt.forEach(t),lBo=r(t8e," (RoFormer model)"),t8e.forEach(t),iBo=i(D),pv=n(D,"LI",{});var a8e=s(pv);Jde=n(a8e,"STRONG",{});var cnt=s(Jde);dBo=r(cnt,"squeezebert"),cnt.forEach(t),cBo=r(a8e," \u2014 "),Xj=n(a8e,"A",{href:!0});var fnt=s(Xj);fBo=r(fnt,"SqueezeBertForTokenClassification"),fnt.forEach(t),mBo=r(a8e," (SqueezeBERT model)"),a8e.forEach(t),gBo=i(D),_v=n(D,"LI",{});var n8e=s(_v);Yde=n(n8e,"STRONG",{});var mnt=s(Yde);hBo=r(mnt,"xlm"),mnt.forEach(t),pBo=r(n8e," \u2014 "),zj=n(n8e,"A",{href:!0});var gnt=s(zj);_Bo=r(gnt,"XLMForTokenClassification"),gnt.forEach(t),uBo=r(n8e," (XLM model)"),n8e.forEach(t),bBo=i(D),uv=n(D,"LI",{});var s8e=s(uv);Kde=n(s8e,"STRONG",{});var hnt=s(Kde);vBo=r(hnt,"xlm-roberta"),hnt.forEach(t),FBo=r(s8e," \u2014 "),Qj=n(s8e,"A",{href:!0});var pnt=s(Qj);TBo=r(pnt,"XLMRobertaForTokenClassification"),pnt.forEach(t),MBo=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),EBo=i(D),bv=n(D,"LI",{});var l8e=s(bv);Zde=n(l8e,"STRONG",{});var _nt=s(Zde);CBo=r(_nt,"xlm-roberta-xl"),_nt.forEach(t),wBo=r(l8e," \u2014 "),Wj=n(l8e,"A",{href:!0});var unt=s(Wj);ABo=r(unt,"XLMRobertaXLForTokenClassification"),unt.forEach(t),yBo=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),LBo=i(D),vv=n(D,"LI",{});var i8e=s(vv);ece=n(i8e,"STRONG",{});var bnt=s(ece);xBo=r(bnt,"xlnet"),bnt.forEach(t),kBo=r(i8e," \u2014 "),Hj=n(i8e,"A",{href:!0});var vnt=s(Hj);SBo=r(vnt,"XLNetForTokenClassification"),vnt.forEach(t),RBo=r(i8e," (XLNet model)"),i8e.forEach(t),BBo=i(D),Fv=n(D,"LI",{});var d8e=s(Fv);oce=n(d8e,"STRONG",{});var Fnt=s(oce);PBo=r(Fnt,"yoso"),Fnt.forEach(t),$Bo=r(d8e," \u2014 "),Uj=n(d8e,"A",{href:!0});var Tnt=s(Uj);IBo=r(Tnt,"YosoForTokenClassification"),Tnt.forEach(t),qBo=r(d8e," (YOSO model)"),d8e.forEach(t),D.forEach(t),NBo=i(Ht),Tv=n(Ht,"P",{});var c8e=s(Tv);jBo=r(c8e,"The model is set in evaluation mode by default using "),rce=n(c8e,"CODE",{});var Mnt=s(rce);DBo=r(Mnt,"model.eval()"),Mnt.forEach(t),GBo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(c8e,"CODE",{});var Ent=s(tce);OBo=r(Ent,"model.train()"),Ent.forEach(t),c8e.forEach(t),VBo=i(Ht),ace=n(Ht,"P",{});var Cnt=s(ace);XBo=r(Cnt,"Examples:"),Cnt.forEach(t),zBo=i(Ht),m(_A.$$.fragment,Ht),Ht.forEach(t),fl.forEach(t),dBe=i(c),wd=n(c,"H2",{class:!0});var b$e=s(wd);Mv=n(b$e,"A",{id:!0,class:!0,href:!0});var wnt=s(Mv);nce=n(wnt,"SPAN",{});var Ant=s(nce);m(uA.$$.fragment,Ant),Ant.forEach(t),wnt.forEach(t),QBo=i(b$e),sce=n(b$e,"SPAN",{});var ynt=s(sce);WBo=r(ynt,"AutoModelForQuestionAnswering"),ynt.forEach(t),b$e.forEach(t),cBe=i(c),nr=n(c,"DIV",{class:!0});var gl=s(nr);m(bA.$$.fragment,gl),HBo=i(gl),Ad=n(gl,"P",{});var DU=s(Ad);UBo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Jj=n(DU,"A",{href:!0});var Lnt=s(Jj);JBo=r(Lnt,"from_pretrained()"),Lnt.forEach(t),YBo=r(DU," class method or the "),Yj=n(DU,"A",{href:!0});var xnt=s(Yj);KBo=r(xnt,"from_config()"),xnt.forEach(t),ZBo=r(DU,` class
method.`),DU.forEach(t),ePo=i(gl),vA=n(gl,"P",{});var v$e=s(vA);oPo=r(v$e,"This class cannot be instantiated directly using "),lce=n(v$e,"CODE",{});var knt=s(lce);rPo=r(knt,"__init__()"),knt.forEach(t),tPo=r(v$e," (throws an error)."),v$e.forEach(t),aPo=i(gl),Zr=n(gl,"DIV",{class:!0});var hl=s(Zr);m(FA.$$.fragment,hl),nPo=i(hl),ice=n(hl,"P",{});var Snt=s(ice);sPo=r(Snt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Snt.forEach(t),lPo=i(hl),yd=n(hl,"P",{});var GU=s(yd);iPo=r(GU,`Note:
Loading a model from its configuration file does `),dce=n(GU,"STRONG",{});var Rnt=s(dce);dPo=r(Rnt,"not"),Rnt.forEach(t),cPo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kj=n(GU,"A",{href:!0});var Bnt=s(Kj);fPo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),mPo=r(GU," to load the model weights."),GU.forEach(t),gPo=i(hl),cce=n(hl,"P",{});var Pnt=s(cce);hPo=r(Pnt,"Examples:"),Pnt.forEach(t),pPo=i(hl),m(TA.$$.fragment,hl),hl.forEach(t),_Po=i(gl),Qe=n(gl,"DIV",{class:!0});var Ut=s(Qe);m(MA.$$.fragment,Ut),uPo=i(Ut),fce=n(Ut,"P",{});var $nt=s(fce);bPo=r($nt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$nt.forEach(t),vPo=i(Ut),Za=n(Ut,"P",{});var DC=s(Za);FPo=r(DC,"The model class to instantiate is selected based on the "),mce=n(DC,"CODE",{});var Int=s(mce);TPo=r(Int,"model_type"),Int.forEach(t),MPo=r(DC,` property of the config object (either
passed as an argument or loaded from `),gce=n(DC,"CODE",{});var qnt=s(gce);EPo=r(qnt,"pretrained_model_name_or_path"),qnt.forEach(t),CPo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hce=n(DC,"CODE",{});var Nnt=s(hce);wPo=r(Nnt,"pretrained_model_name_or_path"),Nnt.forEach(t),APo=r(DC,":"),DC.forEach(t),yPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);Ev=n(P,"LI",{});var f8e=s(Ev);pce=n(f8e,"STRONG",{});var jnt=s(pce);LPo=r(jnt,"albert"),jnt.forEach(t),xPo=r(f8e," \u2014 "),Zj=n(f8e,"A",{href:!0});var Dnt=s(Zj);kPo=r(Dnt,"AlbertForQuestionAnswering"),Dnt.forEach(t),SPo=r(f8e," (ALBERT model)"),f8e.forEach(t),RPo=i(P),Cv=n(P,"LI",{});var m8e=s(Cv);_ce=n(m8e,"STRONG",{});var Gnt=s(_ce);BPo=r(Gnt,"bart"),Gnt.forEach(t),PPo=r(m8e," \u2014 "),eD=n(m8e,"A",{href:!0});var Ont=s(eD);$Po=r(Ont,"BartForQuestionAnswering"),Ont.forEach(t),IPo=r(m8e," (BART model)"),m8e.forEach(t),qPo=i(P),wv=n(P,"LI",{});var g8e=s(wv);uce=n(g8e,"STRONG",{});var Vnt=s(uce);NPo=r(Vnt,"bert"),Vnt.forEach(t),jPo=r(g8e," \u2014 "),oD=n(g8e,"A",{href:!0});var Xnt=s(oD);DPo=r(Xnt,"BertForQuestionAnswering"),Xnt.forEach(t),GPo=r(g8e," (BERT model)"),g8e.forEach(t),OPo=i(P),Av=n(P,"LI",{});var h8e=s(Av);bce=n(h8e,"STRONG",{});var znt=s(bce);VPo=r(znt,"big_bird"),znt.forEach(t),XPo=r(h8e," \u2014 "),rD=n(h8e,"A",{href:!0});var Qnt=s(rD);zPo=r(Qnt,"BigBirdForQuestionAnswering"),Qnt.forEach(t),QPo=r(h8e," (BigBird model)"),h8e.forEach(t),WPo=i(P),yv=n(P,"LI",{});var p8e=s(yv);vce=n(p8e,"STRONG",{});var Wnt=s(vce);HPo=r(Wnt,"bigbird_pegasus"),Wnt.forEach(t),UPo=r(p8e," \u2014 "),tD=n(p8e,"A",{href:!0});var Hnt=s(tD);JPo=r(Hnt,"BigBirdPegasusForQuestionAnswering"),Hnt.forEach(t),YPo=r(p8e," (BigBirdPegasus model)"),p8e.forEach(t),KPo=i(P),Lv=n(P,"LI",{});var _8e=s(Lv);Fce=n(_8e,"STRONG",{});var Unt=s(Fce);ZPo=r(Unt,"camembert"),Unt.forEach(t),e$o=r(_8e," \u2014 "),aD=n(_8e,"A",{href:!0});var Jnt=s(aD);o$o=r(Jnt,"CamembertForQuestionAnswering"),Jnt.forEach(t),r$o=r(_8e," (CamemBERT model)"),_8e.forEach(t),t$o=i(P),xv=n(P,"LI",{});var u8e=s(xv);Tce=n(u8e,"STRONG",{});var Ynt=s(Tce);a$o=r(Ynt,"canine"),Ynt.forEach(t),n$o=r(u8e," \u2014 "),nD=n(u8e,"A",{href:!0});var Knt=s(nD);s$o=r(Knt,"CanineForQuestionAnswering"),Knt.forEach(t),l$o=r(u8e," (Canine model)"),u8e.forEach(t),i$o=i(P),kv=n(P,"LI",{});var b8e=s(kv);Mce=n(b8e,"STRONG",{});var Znt=s(Mce);d$o=r(Znt,"convbert"),Znt.forEach(t),c$o=r(b8e," \u2014 "),sD=n(b8e,"A",{href:!0});var est=s(sD);f$o=r(est,"ConvBertForQuestionAnswering"),est.forEach(t),m$o=r(b8e," (ConvBERT model)"),b8e.forEach(t),g$o=i(P),Sv=n(P,"LI",{});var v8e=s(Sv);Ece=n(v8e,"STRONG",{});var ost=s(Ece);h$o=r(ost,"data2vec-text"),ost.forEach(t),p$o=r(v8e," \u2014 "),lD=n(v8e,"A",{href:!0});var rst=s(lD);_$o=r(rst,"Data2VecTextForQuestionAnswering"),rst.forEach(t),u$o=r(v8e," (Data2VecText model)"),v8e.forEach(t),b$o=i(P),Rv=n(P,"LI",{});var F8e=s(Rv);Cce=n(F8e,"STRONG",{});var tst=s(Cce);v$o=r(tst,"deberta"),tst.forEach(t),F$o=r(F8e," \u2014 "),iD=n(F8e,"A",{href:!0});var ast=s(iD);T$o=r(ast,"DebertaForQuestionAnswering"),ast.forEach(t),M$o=r(F8e," (DeBERTa model)"),F8e.forEach(t),E$o=i(P),Bv=n(P,"LI",{});var T8e=s(Bv);wce=n(T8e,"STRONG",{});var nst=s(wce);C$o=r(nst,"deberta-v2"),nst.forEach(t),w$o=r(T8e," \u2014 "),dD=n(T8e,"A",{href:!0});var sst=s(dD);A$o=r(sst,"DebertaV2ForQuestionAnswering"),sst.forEach(t),y$o=r(T8e," (DeBERTa-v2 model)"),T8e.forEach(t),L$o=i(P),Pv=n(P,"LI",{});var M8e=s(Pv);Ace=n(M8e,"STRONG",{});var lst=s(Ace);x$o=r(lst,"distilbert"),lst.forEach(t),k$o=r(M8e," \u2014 "),cD=n(M8e,"A",{href:!0});var ist=s(cD);S$o=r(ist,"DistilBertForQuestionAnswering"),ist.forEach(t),R$o=r(M8e," (DistilBERT model)"),M8e.forEach(t),B$o=i(P),$v=n(P,"LI",{});var E8e=s($v);yce=n(E8e,"STRONG",{});var dst=s(yce);P$o=r(dst,"electra"),dst.forEach(t),$$o=r(E8e," \u2014 "),fD=n(E8e,"A",{href:!0});var cst=s(fD);I$o=r(cst,"ElectraForQuestionAnswering"),cst.forEach(t),q$o=r(E8e," (ELECTRA model)"),E8e.forEach(t),N$o=i(P),Iv=n(P,"LI",{});var C8e=s(Iv);Lce=n(C8e,"STRONG",{});var fst=s(Lce);j$o=r(fst,"flaubert"),fst.forEach(t),D$o=r(C8e," \u2014 "),mD=n(C8e,"A",{href:!0});var mst=s(mD);G$o=r(mst,"FlaubertForQuestionAnsweringSimple"),mst.forEach(t),O$o=r(C8e," (FlauBERT model)"),C8e.forEach(t),V$o=i(P),qv=n(P,"LI",{});var w8e=s(qv);xce=n(w8e,"STRONG",{});var gst=s(xce);X$o=r(gst,"fnet"),gst.forEach(t),z$o=r(w8e," \u2014 "),gD=n(w8e,"A",{href:!0});var hst=s(gD);Q$o=r(hst,"FNetForQuestionAnswering"),hst.forEach(t),W$o=r(w8e," (FNet model)"),w8e.forEach(t),H$o=i(P),Nv=n(P,"LI",{});var A8e=s(Nv);kce=n(A8e,"STRONG",{});var pst=s(kce);U$o=r(pst,"funnel"),pst.forEach(t),J$o=r(A8e," \u2014 "),hD=n(A8e,"A",{href:!0});var _st=s(hD);Y$o=r(_st,"FunnelForQuestionAnswering"),_st.forEach(t),K$o=r(A8e," (Funnel Transformer model)"),A8e.forEach(t),Z$o=i(P),jv=n(P,"LI",{});var y8e=s(jv);Sce=n(y8e,"STRONG",{});var ust=s(Sce);eIo=r(ust,"gptj"),ust.forEach(t),oIo=r(y8e," \u2014 "),pD=n(y8e,"A",{href:!0});var bst=s(pD);rIo=r(bst,"GPTJForQuestionAnswering"),bst.forEach(t),tIo=r(y8e," (GPT-J model)"),y8e.forEach(t),aIo=i(P),Dv=n(P,"LI",{});var L8e=s(Dv);Rce=n(L8e,"STRONG",{});var vst=s(Rce);nIo=r(vst,"ibert"),vst.forEach(t),sIo=r(L8e," \u2014 "),_D=n(L8e,"A",{href:!0});var Fst=s(_D);lIo=r(Fst,"IBertForQuestionAnswering"),Fst.forEach(t),iIo=r(L8e," (I-BERT model)"),L8e.forEach(t),dIo=i(P),Gv=n(P,"LI",{});var x8e=s(Gv);Bce=n(x8e,"STRONG",{});var Tst=s(Bce);cIo=r(Tst,"layoutlmv2"),Tst.forEach(t),fIo=r(x8e," \u2014 "),uD=n(x8e,"A",{href:!0});var Mst=s(uD);mIo=r(Mst,"LayoutLMv2ForQuestionAnswering"),Mst.forEach(t),gIo=r(x8e," (LayoutLMv2 model)"),x8e.forEach(t),hIo=i(P),Ov=n(P,"LI",{});var k8e=s(Ov);Pce=n(k8e,"STRONG",{});var Est=s(Pce);pIo=r(Est,"led"),Est.forEach(t),_Io=r(k8e," \u2014 "),bD=n(k8e,"A",{href:!0});var Cst=s(bD);uIo=r(Cst,"LEDForQuestionAnswering"),Cst.forEach(t),bIo=r(k8e," (LED model)"),k8e.forEach(t),vIo=i(P),Vv=n(P,"LI",{});var S8e=s(Vv);$ce=n(S8e,"STRONG",{});var wst=s($ce);FIo=r(wst,"longformer"),wst.forEach(t),TIo=r(S8e," \u2014 "),vD=n(S8e,"A",{href:!0});var Ast=s(vD);MIo=r(Ast,"LongformerForQuestionAnswering"),Ast.forEach(t),EIo=r(S8e," (Longformer model)"),S8e.forEach(t),CIo=i(P),Xv=n(P,"LI",{});var R8e=s(Xv);Ice=n(R8e,"STRONG",{});var yst=s(Ice);wIo=r(yst,"lxmert"),yst.forEach(t),AIo=r(R8e," \u2014 "),FD=n(R8e,"A",{href:!0});var Lst=s(FD);yIo=r(Lst,"LxmertForQuestionAnswering"),Lst.forEach(t),LIo=r(R8e," (LXMERT model)"),R8e.forEach(t),xIo=i(P),zv=n(P,"LI",{});var B8e=s(zv);qce=n(B8e,"STRONG",{});var xst=s(qce);kIo=r(xst,"mbart"),xst.forEach(t),SIo=r(B8e," \u2014 "),TD=n(B8e,"A",{href:!0});var kst=s(TD);RIo=r(kst,"MBartForQuestionAnswering"),kst.forEach(t),BIo=r(B8e," (mBART model)"),B8e.forEach(t),PIo=i(P),Qv=n(P,"LI",{});var P8e=s(Qv);Nce=n(P8e,"STRONG",{});var Sst=s(Nce);$Io=r(Sst,"megatron-bert"),Sst.forEach(t),IIo=r(P8e," \u2014 "),MD=n(P8e,"A",{href:!0});var Rst=s(MD);qIo=r(Rst,"MegatronBertForQuestionAnswering"),Rst.forEach(t),NIo=r(P8e," (MegatronBert model)"),P8e.forEach(t),jIo=i(P),Wv=n(P,"LI",{});var $8e=s(Wv);jce=n($8e,"STRONG",{});var Bst=s(jce);DIo=r(Bst,"mobilebert"),Bst.forEach(t),GIo=r($8e," \u2014 "),ED=n($8e,"A",{href:!0});var Pst=s(ED);OIo=r(Pst,"MobileBertForQuestionAnswering"),Pst.forEach(t),VIo=r($8e," (MobileBERT model)"),$8e.forEach(t),XIo=i(P),Hv=n(P,"LI",{});var I8e=s(Hv);Dce=n(I8e,"STRONG",{});var $st=s(Dce);zIo=r($st,"mpnet"),$st.forEach(t),QIo=r(I8e," \u2014 "),CD=n(I8e,"A",{href:!0});var Ist=s(CD);WIo=r(Ist,"MPNetForQuestionAnswering"),Ist.forEach(t),HIo=r(I8e," (MPNet model)"),I8e.forEach(t),UIo=i(P),Uv=n(P,"LI",{});var q8e=s(Uv);Gce=n(q8e,"STRONG",{});var qst=s(Gce);JIo=r(qst,"nystromformer"),qst.forEach(t),YIo=r(q8e," \u2014 "),wD=n(q8e,"A",{href:!0});var Nst=s(wD);KIo=r(Nst,"NystromformerForQuestionAnswering"),Nst.forEach(t),ZIo=r(q8e," (Nystromformer model)"),q8e.forEach(t),eqo=i(P),Jv=n(P,"LI",{});var N8e=s(Jv);Oce=n(N8e,"STRONG",{});var jst=s(Oce);oqo=r(jst,"qdqbert"),jst.forEach(t),rqo=r(N8e," \u2014 "),AD=n(N8e,"A",{href:!0});var Dst=s(AD);tqo=r(Dst,"QDQBertForQuestionAnswering"),Dst.forEach(t),aqo=r(N8e," (QDQBert model)"),N8e.forEach(t),nqo=i(P),Yv=n(P,"LI",{});var j8e=s(Yv);Vce=n(j8e,"STRONG",{});var Gst=s(Vce);sqo=r(Gst,"reformer"),Gst.forEach(t),lqo=r(j8e," \u2014 "),yD=n(j8e,"A",{href:!0});var Ost=s(yD);iqo=r(Ost,"ReformerForQuestionAnswering"),Ost.forEach(t),dqo=r(j8e," (Reformer model)"),j8e.forEach(t),cqo=i(P),Kv=n(P,"LI",{});var D8e=s(Kv);Xce=n(D8e,"STRONG",{});var Vst=s(Xce);fqo=r(Vst,"rembert"),Vst.forEach(t),mqo=r(D8e," \u2014 "),LD=n(D8e,"A",{href:!0});var Xst=s(LD);gqo=r(Xst,"RemBertForQuestionAnswering"),Xst.forEach(t),hqo=r(D8e," (RemBERT model)"),D8e.forEach(t),pqo=i(P),Zv=n(P,"LI",{});var G8e=s(Zv);zce=n(G8e,"STRONG",{});var zst=s(zce);_qo=r(zst,"roberta"),zst.forEach(t),uqo=r(G8e," \u2014 "),xD=n(G8e,"A",{href:!0});var Qst=s(xD);bqo=r(Qst,"RobertaForQuestionAnswering"),Qst.forEach(t),vqo=r(G8e," (RoBERTa model)"),G8e.forEach(t),Fqo=i(P),eF=n(P,"LI",{});var O8e=s(eF);Qce=n(O8e,"STRONG",{});var Wst=s(Qce);Tqo=r(Wst,"roformer"),Wst.forEach(t),Mqo=r(O8e," \u2014 "),kD=n(O8e,"A",{href:!0});var Hst=s(kD);Eqo=r(Hst,"RoFormerForQuestionAnswering"),Hst.forEach(t),Cqo=r(O8e," (RoFormer model)"),O8e.forEach(t),wqo=i(P),oF=n(P,"LI",{});var V8e=s(oF);Wce=n(V8e,"STRONG",{});var Ust=s(Wce);Aqo=r(Ust,"splinter"),Ust.forEach(t),yqo=r(V8e," \u2014 "),SD=n(V8e,"A",{href:!0});var Jst=s(SD);Lqo=r(Jst,"SplinterForQuestionAnswering"),Jst.forEach(t),xqo=r(V8e," (Splinter model)"),V8e.forEach(t),kqo=i(P),rF=n(P,"LI",{});var X8e=s(rF);Hce=n(X8e,"STRONG",{});var Yst=s(Hce);Sqo=r(Yst,"squeezebert"),Yst.forEach(t),Rqo=r(X8e," \u2014 "),RD=n(X8e,"A",{href:!0});var Kst=s(RD);Bqo=r(Kst,"SqueezeBertForQuestionAnswering"),Kst.forEach(t),Pqo=r(X8e," (SqueezeBERT model)"),X8e.forEach(t),$qo=i(P),tF=n(P,"LI",{});var z8e=s(tF);Uce=n(z8e,"STRONG",{});var Zst=s(Uce);Iqo=r(Zst,"xlm"),Zst.forEach(t),qqo=r(z8e," \u2014 "),BD=n(z8e,"A",{href:!0});var elt=s(BD);Nqo=r(elt,"XLMForQuestionAnsweringSimple"),elt.forEach(t),jqo=r(z8e," (XLM model)"),z8e.forEach(t),Dqo=i(P),aF=n(P,"LI",{});var Q8e=s(aF);Jce=n(Q8e,"STRONG",{});var olt=s(Jce);Gqo=r(olt,"xlm-roberta"),olt.forEach(t),Oqo=r(Q8e," \u2014 "),PD=n(Q8e,"A",{href:!0});var rlt=s(PD);Vqo=r(rlt,"XLMRobertaForQuestionAnswering"),rlt.forEach(t),Xqo=r(Q8e," (XLM-RoBERTa model)"),Q8e.forEach(t),zqo=i(P),nF=n(P,"LI",{});var W8e=s(nF);Yce=n(W8e,"STRONG",{});var tlt=s(Yce);Qqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),Wqo=r(W8e," \u2014 "),$D=n(W8e,"A",{href:!0});var alt=s($D);Hqo=r(alt,"XLMRobertaXLForQuestionAnswering"),alt.forEach(t),Uqo=r(W8e," (XLM-RoBERTa-XL model)"),W8e.forEach(t),Jqo=i(P),sF=n(P,"LI",{});var H8e=s(sF);Kce=n(H8e,"STRONG",{});var nlt=s(Kce);Yqo=r(nlt,"xlnet"),nlt.forEach(t),Kqo=r(H8e," \u2014 "),ID=n(H8e,"A",{href:!0});var slt=s(ID);Zqo=r(slt,"XLNetForQuestionAnsweringSimple"),slt.forEach(t),eNo=r(H8e," (XLNet model)"),H8e.forEach(t),oNo=i(P),lF=n(P,"LI",{});var U8e=s(lF);Zce=n(U8e,"STRONG",{});var llt=s(Zce);rNo=r(llt,"yoso"),llt.forEach(t),tNo=r(U8e," \u2014 "),qD=n(U8e,"A",{href:!0});var ilt=s(qD);aNo=r(ilt,"YosoForQuestionAnswering"),ilt.forEach(t),nNo=r(U8e," (YOSO model)"),U8e.forEach(t),P.forEach(t),sNo=i(Ut),iF=n(Ut,"P",{});var J8e=s(iF);lNo=r(J8e,"The model is set in evaluation mode by default using "),efe=n(J8e,"CODE",{});var dlt=s(efe);iNo=r(dlt,"model.eval()"),dlt.forEach(t),dNo=r(J8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(J8e,"CODE",{});var clt=s(ofe);cNo=r(clt,"model.train()"),clt.forEach(t),J8e.forEach(t),fNo=i(Ut),rfe=n(Ut,"P",{});var flt=s(rfe);mNo=r(flt,"Examples:"),flt.forEach(t),gNo=i(Ut),m(EA.$$.fragment,Ut),Ut.forEach(t),gl.forEach(t),fBe=i(c),Ld=n(c,"H2",{class:!0});var F$e=s(Ld);dF=n(F$e,"A",{id:!0,class:!0,href:!0});var mlt=s(dF);tfe=n(mlt,"SPAN",{});var glt=s(tfe);m(CA.$$.fragment,glt),glt.forEach(t),mlt.forEach(t),hNo=i(F$e),afe=n(F$e,"SPAN",{});var hlt=s(afe);pNo=r(hlt,"AutoModelForTableQuestionAnswering"),hlt.forEach(t),F$e.forEach(t),mBe=i(c),sr=n(c,"DIV",{class:!0});var pl=s(sr);m(wA.$$.fragment,pl),_No=i(pl),xd=n(pl,"P",{});var OU=s(xd);uNo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ND=n(OU,"A",{href:!0});var plt=s(ND);bNo=r(plt,"from_pretrained()"),plt.forEach(t),vNo=r(OU," class method or the "),jD=n(OU,"A",{href:!0});var _lt=s(jD);FNo=r(_lt,"from_config()"),_lt.forEach(t),TNo=r(OU,` class
method.`),OU.forEach(t),MNo=i(pl),AA=n(pl,"P",{});var T$e=s(AA);ENo=r(T$e,"This class cannot be instantiated directly using "),nfe=n(T$e,"CODE",{});var ult=s(nfe);CNo=r(ult,"__init__()"),ult.forEach(t),wNo=r(T$e," (throws an error)."),T$e.forEach(t),ANo=i(pl),et=n(pl,"DIV",{class:!0});var _l=s(et);m(yA.$$.fragment,_l),yNo=i(_l),sfe=n(_l,"P",{});var blt=s(sfe);LNo=r(blt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),blt.forEach(t),xNo=i(_l),kd=n(_l,"P",{});var VU=s(kd);kNo=r(VU,`Note:
Loading a model from its configuration file does `),lfe=n(VU,"STRONG",{});var vlt=s(lfe);SNo=r(vlt,"not"),vlt.forEach(t),RNo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DD=n(VU,"A",{href:!0});var Flt=s(DD);BNo=r(Flt,"from_pretrained()"),Flt.forEach(t),PNo=r(VU," to load the model weights."),VU.forEach(t),$No=i(_l),ife=n(_l,"P",{});var Tlt=s(ife);INo=r(Tlt,"Examples:"),Tlt.forEach(t),qNo=i(_l),m(LA.$$.fragment,_l),_l.forEach(t),NNo=i(pl),We=n(pl,"DIV",{class:!0});var Jt=s(We);m(xA.$$.fragment,Jt),jNo=i(Jt),dfe=n(Jt,"P",{});var Mlt=s(dfe);DNo=r(Mlt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mlt.forEach(t),GNo=i(Jt),en=n(Jt,"P",{});var GC=s(en);ONo=r(GC,"The model class to instantiate is selected based on the "),cfe=n(GC,"CODE",{});var Elt=s(cfe);VNo=r(Elt,"model_type"),Elt.forEach(t),XNo=r(GC,` property of the config object (either
passed as an argument or loaded from `),ffe=n(GC,"CODE",{});var Clt=s(ffe);zNo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),QNo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mfe=n(GC,"CODE",{});var wlt=s(mfe);WNo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),HNo=r(GC,":"),GC.forEach(t),UNo=i(Jt),gfe=n(Jt,"UL",{});var Alt=s(gfe);cF=n(Alt,"LI",{});var Y8e=s(cF);hfe=n(Y8e,"STRONG",{});var ylt=s(hfe);JNo=r(ylt,"tapas"),ylt.forEach(t),YNo=r(Y8e," \u2014 "),GD=n(Y8e,"A",{href:!0});var Llt=s(GD);KNo=r(Llt,"TapasForQuestionAnswering"),Llt.forEach(t),ZNo=r(Y8e," (TAPAS model)"),Y8e.forEach(t),Alt.forEach(t),ejo=i(Jt),fF=n(Jt,"P",{});var K8e=s(fF);ojo=r(K8e,"The model is set in evaluation mode by default using "),pfe=n(K8e,"CODE",{});var xlt=s(pfe);rjo=r(xlt,"model.eval()"),xlt.forEach(t),tjo=r(K8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_fe=n(K8e,"CODE",{});var klt=s(_fe);ajo=r(klt,"model.train()"),klt.forEach(t),K8e.forEach(t),njo=i(Jt),ufe=n(Jt,"P",{});var Slt=s(ufe);sjo=r(Slt,"Examples:"),Slt.forEach(t),ljo=i(Jt),m(kA.$$.fragment,Jt),Jt.forEach(t),pl.forEach(t),gBe=i(c),Sd=n(c,"H2",{class:!0});var M$e=s(Sd);mF=n(M$e,"A",{id:!0,class:!0,href:!0});var Rlt=s(mF);bfe=n(Rlt,"SPAN",{});var Blt=s(bfe);m(SA.$$.fragment,Blt),Blt.forEach(t),Rlt.forEach(t),ijo=i(M$e),vfe=n(M$e,"SPAN",{});var Plt=s(vfe);djo=r(Plt,"AutoModelForImageClassification"),Plt.forEach(t),M$e.forEach(t),hBe=i(c),lr=n(c,"DIV",{class:!0});var ul=s(lr);m(RA.$$.fragment,ul),cjo=i(ul),Rd=n(ul,"P",{});var XU=s(Rd);fjo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),OD=n(XU,"A",{href:!0});var $lt=s(OD);mjo=r($lt,"from_pretrained()"),$lt.forEach(t),gjo=r(XU," class method or the "),VD=n(XU,"A",{href:!0});var Ilt=s(VD);hjo=r(Ilt,"from_config()"),Ilt.forEach(t),pjo=r(XU,` class
method.`),XU.forEach(t),_jo=i(ul),BA=n(ul,"P",{});var E$e=s(BA);ujo=r(E$e,"This class cannot be instantiated directly using "),Ffe=n(E$e,"CODE",{});var qlt=s(Ffe);bjo=r(qlt,"__init__()"),qlt.forEach(t),vjo=r(E$e," (throws an error)."),E$e.forEach(t),Fjo=i(ul),ot=n(ul,"DIV",{class:!0});var bl=s(ot);m(PA.$$.fragment,bl),Tjo=i(bl),Tfe=n(bl,"P",{});var Nlt=s(Tfe);Mjo=r(Nlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nlt.forEach(t),Ejo=i(bl),Bd=n(bl,"P",{});var zU=s(Bd);Cjo=r(zU,`Note:
Loading a model from its configuration file does `),Mfe=n(zU,"STRONG",{});var jlt=s(Mfe);wjo=r(jlt,"not"),jlt.forEach(t),Ajo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(zU,"A",{href:!0});var Dlt=s(XD);yjo=r(Dlt,"from_pretrained()"),Dlt.forEach(t),Ljo=r(zU," to load the model weights."),zU.forEach(t),xjo=i(bl),Efe=n(bl,"P",{});var Glt=s(Efe);kjo=r(Glt,"Examples:"),Glt.forEach(t),Sjo=i(bl),m($A.$$.fragment,bl),bl.forEach(t),Rjo=i(ul),He=n(ul,"DIV",{class:!0});var Yt=s(He);m(IA.$$.fragment,Yt),Bjo=i(Yt),Cfe=n(Yt,"P",{});var Olt=s(Cfe);Pjo=r(Olt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Olt.forEach(t),$jo=i(Yt),on=n(Yt,"P",{});var OC=s(on);Ijo=r(OC,"The model class to instantiate is selected based on the "),wfe=n(OC,"CODE",{});var Vlt=s(wfe);qjo=r(Vlt,"model_type"),Vlt.forEach(t),Njo=r(OC,` property of the config object (either
passed as an argument or loaded from `),Afe=n(OC,"CODE",{});var Xlt=s(Afe);jjo=r(Xlt,"pretrained_model_name_or_path"),Xlt.forEach(t),Djo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yfe=n(OC,"CODE",{});var zlt=s(yfe);Gjo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),Ojo=r(OC,":"),OC.forEach(t),Vjo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);gF=n(ge,"LI",{});var Z8e=s(gF);Lfe=n(Z8e,"STRONG",{});var Qlt=s(Lfe);Xjo=r(Qlt,"beit"),Qlt.forEach(t),zjo=r(Z8e," \u2014 "),zD=n(Z8e,"A",{href:!0});var Wlt=s(zD);Qjo=r(Wlt,"BeitForImageClassification"),Wlt.forEach(t),Wjo=r(Z8e," (BEiT model)"),Z8e.forEach(t),Hjo=i(ge),hF=n(ge,"LI",{});var eLe=s(hF);xfe=n(eLe,"STRONG",{});var Hlt=s(xfe);Ujo=r(Hlt,"convnext"),Hlt.forEach(t),Jjo=r(eLe," \u2014 "),QD=n(eLe,"A",{href:!0});var Ult=s(QD);Yjo=r(Ult,"ConvNextForImageClassification"),Ult.forEach(t),Kjo=r(eLe," (ConvNext model)"),eLe.forEach(t),Zjo=i(ge),pF=n(ge,"LI",{});var oLe=s(pF);kfe=n(oLe,"STRONG",{});var Jlt=s(kfe);eDo=r(Jlt,"data2vec-vision"),Jlt.forEach(t),oDo=r(oLe," \u2014 "),WD=n(oLe,"A",{href:!0});var Ylt=s(WD);rDo=r(Ylt,"Data2VecVisionForImageClassification"),Ylt.forEach(t),tDo=r(oLe," (Data2VecVision model)"),oLe.forEach(t),aDo=i(ge),Os=n(ge,"LI",{});var v9=s(Os);Sfe=n(v9,"STRONG",{});var Klt=s(Sfe);nDo=r(Klt,"deit"),Klt.forEach(t),sDo=r(v9," \u2014 "),HD=n(v9,"A",{href:!0});var Zlt=s(HD);lDo=r(Zlt,"DeiTForImageClassification"),Zlt.forEach(t),iDo=r(v9," or "),UD=n(v9,"A",{href:!0});var eit=s(UD);dDo=r(eit,"DeiTForImageClassificationWithTeacher"),eit.forEach(t),cDo=r(v9," (DeiT model)"),v9.forEach(t),fDo=i(ge),_F=n(ge,"LI",{});var rLe=s(_F);Rfe=n(rLe,"STRONG",{});var oit=s(Rfe);mDo=r(oit,"imagegpt"),oit.forEach(t),gDo=r(rLe," \u2014 "),JD=n(rLe,"A",{href:!0});var rit=s(JD);hDo=r(rit,"ImageGPTForImageClassification"),rit.forEach(t),pDo=r(rLe," (ImageGPT model)"),rLe.forEach(t),_Do=i(ge),ma=n(ge,"LI",{});var If=s(ma);Bfe=n(If,"STRONG",{});var tit=s(Bfe);uDo=r(tit,"perceiver"),tit.forEach(t),bDo=r(If," \u2014 "),YD=n(If,"A",{href:!0});var ait=s(YD);vDo=r(ait,"PerceiverForImageClassificationLearned"),ait.forEach(t),FDo=r(If," or "),KD=n(If,"A",{href:!0});var nit=s(KD);TDo=r(nit,"PerceiverForImageClassificationFourier"),nit.forEach(t),MDo=r(If," or "),ZD=n(If,"A",{href:!0});var sit=s(ZD);EDo=r(sit,"PerceiverForImageClassificationConvProcessing"),sit.forEach(t),CDo=r(If," (Perceiver model)"),If.forEach(t),wDo=i(ge),uF=n(ge,"LI",{});var tLe=s(uF);Pfe=n(tLe,"STRONG",{});var lit=s(Pfe);ADo=r(lit,"poolformer"),lit.forEach(t),yDo=r(tLe," \u2014 "),eG=n(tLe,"A",{href:!0});var iit=s(eG);LDo=r(iit,"PoolFormerForImageClassification"),iit.forEach(t),xDo=r(tLe," (PoolFormer model)"),tLe.forEach(t),kDo=i(ge),bF=n(ge,"LI",{});var aLe=s(bF);$fe=n(aLe,"STRONG",{});var dit=s($fe);SDo=r(dit,"regnet"),dit.forEach(t),RDo=r(aLe," \u2014 "),oG=n(aLe,"A",{href:!0});var cit=s(oG);BDo=r(cit,"RegNetForImageClassification"),cit.forEach(t),PDo=r(aLe," (RegNet model)"),aLe.forEach(t),$Do=i(ge),vF=n(ge,"LI",{});var nLe=s(vF);Ife=n(nLe,"STRONG",{});var fit=s(Ife);IDo=r(fit,"resnet"),fit.forEach(t),qDo=r(nLe," \u2014 "),rG=n(nLe,"A",{href:!0});var mit=s(rG);NDo=r(mit,"ResNetForImageClassification"),mit.forEach(t),jDo=r(nLe," (ResNet model)"),nLe.forEach(t),DDo=i(ge),FF=n(ge,"LI",{});var sLe=s(FF);qfe=n(sLe,"STRONG",{});var git=s(qfe);GDo=r(git,"segformer"),git.forEach(t),ODo=r(sLe," \u2014 "),tG=n(sLe,"A",{href:!0});var hit=s(tG);VDo=r(hit,"SegformerForImageClassification"),hit.forEach(t),XDo=r(sLe," (SegFormer model)"),sLe.forEach(t),zDo=i(ge),TF=n(ge,"LI",{});var lLe=s(TF);Nfe=n(lLe,"STRONG",{});var pit=s(Nfe);QDo=r(pit,"swin"),pit.forEach(t),WDo=r(lLe," \u2014 "),aG=n(lLe,"A",{href:!0});var _it=s(aG);HDo=r(_it,"SwinForImageClassification"),_it.forEach(t),UDo=r(lLe," (Swin model)"),lLe.forEach(t),JDo=i(ge),MF=n(ge,"LI",{});var iLe=s(MF);jfe=n(iLe,"STRONG",{});var uit=s(jfe);YDo=r(uit,"van"),uit.forEach(t),KDo=r(iLe," \u2014 "),nG=n(iLe,"A",{href:!0});var bit=s(nG);ZDo=r(bit,"VanForImageClassification"),bit.forEach(t),eGo=r(iLe," (VAN model)"),iLe.forEach(t),oGo=i(ge),EF=n(ge,"LI",{});var dLe=s(EF);Dfe=n(dLe,"STRONG",{});var vit=s(Dfe);rGo=r(vit,"vit"),vit.forEach(t),tGo=r(dLe," \u2014 "),sG=n(dLe,"A",{href:!0});var Fit=s(sG);aGo=r(Fit,"ViTForImageClassification"),Fit.forEach(t),nGo=r(dLe," (ViT model)"),dLe.forEach(t),ge.forEach(t),sGo=i(Yt),CF=n(Yt,"P",{});var cLe=s(CF);lGo=r(cLe,"The model is set in evaluation mode by default using "),Gfe=n(cLe,"CODE",{});var Tit=s(Gfe);iGo=r(Tit,"model.eval()"),Tit.forEach(t),dGo=r(cLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ofe=n(cLe,"CODE",{});var Mit=s(Ofe);cGo=r(Mit,"model.train()"),Mit.forEach(t),cLe.forEach(t),fGo=i(Yt),Vfe=n(Yt,"P",{});var Eit=s(Vfe);mGo=r(Eit,"Examples:"),Eit.forEach(t),gGo=i(Yt),m(qA.$$.fragment,Yt),Yt.forEach(t),ul.forEach(t),pBe=i(c),Pd=n(c,"H2",{class:!0});var C$e=s(Pd);wF=n(C$e,"A",{id:!0,class:!0,href:!0});var Cit=s(wF);Xfe=n(Cit,"SPAN",{});var wit=s(Xfe);m(NA.$$.fragment,wit),wit.forEach(t),Cit.forEach(t),hGo=i(C$e),zfe=n(C$e,"SPAN",{});var Ait=s(zfe);pGo=r(Ait,"AutoModelForVision2Seq"),Ait.forEach(t),C$e.forEach(t),_Be=i(c),ir=n(c,"DIV",{class:!0});var vl=s(ir);m(jA.$$.fragment,vl),_Go=i(vl),$d=n(vl,"P",{});var QU=s($d);uGo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),lG=n(QU,"A",{href:!0});var yit=s(lG);bGo=r(yit,"from_pretrained()"),yit.forEach(t),vGo=r(QU," class method or the "),iG=n(QU,"A",{href:!0});var Lit=s(iG);FGo=r(Lit,"from_config()"),Lit.forEach(t),TGo=r(QU,` class
method.`),QU.forEach(t),MGo=i(vl),DA=n(vl,"P",{});var w$e=s(DA);EGo=r(w$e,"This class cannot be instantiated directly using "),Qfe=n(w$e,"CODE",{});var xit=s(Qfe);CGo=r(xit,"__init__()"),xit.forEach(t),wGo=r(w$e," (throws an error)."),w$e.forEach(t),AGo=i(vl),rt=n(vl,"DIV",{class:!0});var Fl=s(rt);m(GA.$$.fragment,Fl),yGo=i(Fl),Wfe=n(Fl,"P",{});var kit=s(Wfe);LGo=r(kit,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kit.forEach(t),xGo=i(Fl),Id=n(Fl,"P",{});var WU=s(Id);kGo=r(WU,`Note:
Loading a model from its configuration file does `),Hfe=n(WU,"STRONG",{});var Sit=s(Hfe);SGo=r(Sit,"not"),Sit.forEach(t),RGo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dG=n(WU,"A",{href:!0});var Rit=s(dG);BGo=r(Rit,"from_pretrained()"),Rit.forEach(t),PGo=r(WU," to load the model weights."),WU.forEach(t),$Go=i(Fl),Ufe=n(Fl,"P",{});var Bit=s(Ufe);IGo=r(Bit,"Examples:"),Bit.forEach(t),qGo=i(Fl),m(OA.$$.fragment,Fl),Fl.forEach(t),NGo=i(vl),Ue=n(vl,"DIV",{class:!0});var Kt=s(Ue);m(VA.$$.fragment,Kt),jGo=i(Kt),Jfe=n(Kt,"P",{});var Pit=s(Jfe);DGo=r(Pit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pit.forEach(t),GGo=i(Kt),rn=n(Kt,"P",{});var VC=s(rn);OGo=r(VC,"The model class to instantiate is selected based on the "),Yfe=n(VC,"CODE",{});var $it=s(Yfe);VGo=r($it,"model_type"),$it.forEach(t),XGo=r(VC,` property of the config object (either
passed as an argument or loaded from `),Kfe=n(VC,"CODE",{});var Iit=s(Kfe);zGo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),QGo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zfe=n(VC,"CODE",{});var qit=s(Zfe);WGo=r(qit,"pretrained_model_name_or_path"),qit.forEach(t),HGo=r(VC,":"),VC.forEach(t),UGo=i(Kt),eme=n(Kt,"UL",{});var Nit=s(eme);AF=n(Nit,"LI",{});var fLe=s(AF);ome=n(fLe,"STRONG",{});var jit=s(ome);JGo=r(jit,"vision-encoder-decoder"),jit.forEach(t),YGo=r(fLe," \u2014 "),cG=n(fLe,"A",{href:!0});var Dit=s(cG);KGo=r(Dit,"VisionEncoderDecoderModel"),Dit.forEach(t),ZGo=r(fLe," (Vision Encoder decoder model)"),fLe.forEach(t),Nit.forEach(t),eOo=i(Kt),yF=n(Kt,"P",{});var mLe=s(yF);oOo=r(mLe,"The model is set in evaluation mode by default using "),rme=n(mLe,"CODE",{});var Git=s(rme);rOo=r(Git,"model.eval()"),Git.forEach(t),tOo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tme=n(mLe,"CODE",{});var Oit=s(tme);aOo=r(Oit,"model.train()"),Oit.forEach(t),mLe.forEach(t),nOo=i(Kt),ame=n(Kt,"P",{});var Vit=s(ame);sOo=r(Vit,"Examples:"),Vit.forEach(t),lOo=i(Kt),m(XA.$$.fragment,Kt),Kt.forEach(t),vl.forEach(t),uBe=i(c),qd=n(c,"H2",{class:!0});var A$e=s(qd);LF=n(A$e,"A",{id:!0,class:!0,href:!0});var Xit=s(LF);nme=n(Xit,"SPAN",{});var zit=s(nme);m(zA.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),iOo=i(A$e),sme=n(A$e,"SPAN",{});var Qit=s(sme);dOo=r(Qit,"AutoModelForAudioClassification"),Qit.forEach(t),A$e.forEach(t),bBe=i(c),dr=n(c,"DIV",{class:!0});var Tl=s(dr);m(QA.$$.fragment,Tl),cOo=i(Tl),Nd=n(Tl,"P",{});var HU=s(Nd);fOo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fG=n(HU,"A",{href:!0});var Wit=s(fG);mOo=r(Wit,"from_pretrained()"),Wit.forEach(t),gOo=r(HU," class method or the "),mG=n(HU,"A",{href:!0});var Hit=s(mG);hOo=r(Hit,"from_config()"),Hit.forEach(t),pOo=r(HU,` class
method.`),HU.forEach(t),_Oo=i(Tl),WA=n(Tl,"P",{});var y$e=s(WA);uOo=r(y$e,"This class cannot be instantiated directly using "),lme=n(y$e,"CODE",{});var Uit=s(lme);bOo=r(Uit,"__init__()"),Uit.forEach(t),vOo=r(y$e," (throws an error)."),y$e.forEach(t),FOo=i(Tl),tt=n(Tl,"DIV",{class:!0});var Ml=s(tt);m(HA.$$.fragment,Ml),TOo=i(Ml),ime=n(Ml,"P",{});var Jit=s(ime);MOo=r(Jit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Jit.forEach(t),EOo=i(Ml),jd=n(Ml,"P",{});var UU=s(jd);COo=r(UU,`Note:
Loading a model from its configuration file does `),dme=n(UU,"STRONG",{});var Yit=s(dme);wOo=r(Yit,"not"),Yit.forEach(t),AOo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(UU,"A",{href:!0});var Kit=s(gG);yOo=r(Kit,"from_pretrained()"),Kit.forEach(t),LOo=r(UU," to load the model weights."),UU.forEach(t),xOo=i(Ml),cme=n(Ml,"P",{});var Zit=s(cme);kOo=r(Zit,"Examples:"),Zit.forEach(t),SOo=i(Ml),m(UA.$$.fragment,Ml),Ml.forEach(t),ROo=i(Tl),Je=n(Tl,"DIV",{class:!0});var Zt=s(Je);m(JA.$$.fragment,Zt),BOo=i(Zt),fme=n(Zt,"P",{});var edt=s(fme);POo=r(edt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),edt.forEach(t),$Oo=i(Zt),tn=n(Zt,"P",{});var XC=s(tn);IOo=r(XC,"The model class to instantiate is selected based on the "),mme=n(XC,"CODE",{});var odt=s(mme);qOo=r(odt,"model_type"),odt.forEach(t),NOo=r(XC,` property of the config object (either
passed as an argument or loaded from `),gme=n(XC,"CODE",{});var rdt=s(gme);jOo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),DOo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(XC,"CODE",{});var tdt=s(hme);GOo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),OOo=r(XC,":"),XC.forEach(t),VOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);xF=n(Do,"LI",{});var gLe=s(xF);pme=n(gLe,"STRONG",{});var adt=s(pme);XOo=r(adt,"data2vec-audio"),adt.forEach(t),zOo=r(gLe," \u2014 "),hG=n(gLe,"A",{href:!0});var ndt=s(hG);QOo=r(ndt,"Data2VecAudioForSequenceClassification"),ndt.forEach(t),WOo=r(gLe," (Data2VecAudio model)"),gLe.forEach(t),HOo=i(Do),kF=n(Do,"LI",{});var hLe=s(kF);_me=n(hLe,"STRONG",{});var sdt=s(_me);UOo=r(sdt,"hubert"),sdt.forEach(t),JOo=r(hLe," \u2014 "),pG=n(hLe,"A",{href:!0});var ldt=s(pG);YOo=r(ldt,"HubertForSequenceClassification"),ldt.forEach(t),KOo=r(hLe," (Hubert model)"),hLe.forEach(t),ZOo=i(Do),SF=n(Do,"LI",{});var pLe=s(SF);ume=n(pLe,"STRONG",{});var idt=s(ume);eVo=r(idt,"sew"),idt.forEach(t),oVo=r(pLe," \u2014 "),_G=n(pLe,"A",{href:!0});var ddt=s(_G);rVo=r(ddt,"SEWForSequenceClassification"),ddt.forEach(t),tVo=r(pLe," (SEW model)"),pLe.forEach(t),aVo=i(Do),RF=n(Do,"LI",{});var _Le=s(RF);bme=n(_Le,"STRONG",{});var cdt=s(bme);nVo=r(cdt,"sew-d"),cdt.forEach(t),sVo=r(_Le," \u2014 "),uG=n(_Le,"A",{href:!0});var fdt=s(uG);lVo=r(fdt,"SEWDForSequenceClassification"),fdt.forEach(t),iVo=r(_Le," (SEW-D model)"),_Le.forEach(t),dVo=i(Do),BF=n(Do,"LI",{});var uLe=s(BF);vme=n(uLe,"STRONG",{});var mdt=s(vme);cVo=r(mdt,"unispeech"),mdt.forEach(t),fVo=r(uLe," \u2014 "),bG=n(uLe,"A",{href:!0});var gdt=s(bG);mVo=r(gdt,"UniSpeechForSequenceClassification"),gdt.forEach(t),gVo=r(uLe," (UniSpeech model)"),uLe.forEach(t),hVo=i(Do),PF=n(Do,"LI",{});var bLe=s(PF);Fme=n(bLe,"STRONG",{});var hdt=s(Fme);pVo=r(hdt,"unispeech-sat"),hdt.forEach(t),_Vo=r(bLe," \u2014 "),vG=n(bLe,"A",{href:!0});var pdt=s(vG);uVo=r(pdt,"UniSpeechSatForSequenceClassification"),pdt.forEach(t),bVo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),vVo=i(Do),$F=n(Do,"LI",{});var vLe=s($F);Tme=n(vLe,"STRONG",{});var _dt=s(Tme);FVo=r(_dt,"wav2vec2"),_dt.forEach(t),TVo=r(vLe," \u2014 "),FG=n(vLe,"A",{href:!0});var udt=s(FG);MVo=r(udt,"Wav2Vec2ForSequenceClassification"),udt.forEach(t),EVo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),CVo=i(Do),IF=n(Do,"LI",{});var FLe=s(IF);Mme=n(FLe,"STRONG",{});var bdt=s(Mme);wVo=r(bdt,"wavlm"),bdt.forEach(t),AVo=r(FLe," \u2014 "),TG=n(FLe,"A",{href:!0});var vdt=s(TG);yVo=r(vdt,"WavLMForSequenceClassification"),vdt.forEach(t),LVo=r(FLe," (WavLM model)"),FLe.forEach(t),Do.forEach(t),xVo=i(Zt),qF=n(Zt,"P",{});var TLe=s(qF);kVo=r(TLe,"The model is set in evaluation mode by default using "),Eme=n(TLe,"CODE",{});var Fdt=s(Eme);SVo=r(Fdt,"model.eval()"),Fdt.forEach(t),RVo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cme=n(TLe,"CODE",{});var Tdt=s(Cme);BVo=r(Tdt,"model.train()"),Tdt.forEach(t),TLe.forEach(t),PVo=i(Zt),wme=n(Zt,"P",{});var Mdt=s(wme);$Vo=r(Mdt,"Examples:"),Mdt.forEach(t),IVo=i(Zt),m(YA.$$.fragment,Zt),Zt.forEach(t),Tl.forEach(t),vBe=i(c),Dd=n(c,"H2",{class:!0});var L$e=s(Dd);NF=n(L$e,"A",{id:!0,class:!0,href:!0});var Edt=s(NF);Ame=n(Edt,"SPAN",{});var Cdt=s(Ame);m(KA.$$.fragment,Cdt),Cdt.forEach(t),Edt.forEach(t),qVo=i(L$e),yme=n(L$e,"SPAN",{});var wdt=s(yme);NVo=r(wdt,"AutoModelForAudioFrameClassification"),wdt.forEach(t),L$e.forEach(t),FBe=i(c),cr=n(c,"DIV",{class:!0});var El=s(cr);m(ZA.$$.fragment,El),jVo=i(El),Gd=n(El,"P",{});var JU=s(Gd);DVo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),MG=n(JU,"A",{href:!0});var Adt=s(MG);GVo=r(Adt,"from_pretrained()"),Adt.forEach(t),OVo=r(JU," class method or the "),EG=n(JU,"A",{href:!0});var ydt=s(EG);VVo=r(ydt,"from_config()"),ydt.forEach(t),XVo=r(JU,` class
method.`),JU.forEach(t),zVo=i(El),e0=n(El,"P",{});var x$e=s(e0);QVo=r(x$e,"This class cannot be instantiated directly using "),Lme=n(x$e,"CODE",{});var Ldt=s(Lme);WVo=r(Ldt,"__init__()"),Ldt.forEach(t),HVo=r(x$e," (throws an error)."),x$e.forEach(t),UVo=i(El),at=n(El,"DIV",{class:!0});var Cl=s(at);m(o0.$$.fragment,Cl),JVo=i(Cl),xme=n(Cl,"P",{});var xdt=s(xme);YVo=r(xdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),xdt.forEach(t),KVo=i(Cl),Od=n(Cl,"P",{});var YU=s(Od);ZVo=r(YU,`Note:
Loading a model from its configuration file does `),kme=n(YU,"STRONG",{});var kdt=s(kme);eXo=r(kdt,"not"),kdt.forEach(t),oXo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(YU,"A",{href:!0});var Sdt=s(CG);rXo=r(Sdt,"from_pretrained()"),Sdt.forEach(t),tXo=r(YU," to load the model weights."),YU.forEach(t),aXo=i(Cl),Sme=n(Cl,"P",{});var Rdt=s(Sme);nXo=r(Rdt,"Examples:"),Rdt.forEach(t),sXo=i(Cl),m(r0.$$.fragment,Cl),Cl.forEach(t),lXo=i(El),Ye=n(El,"DIV",{class:!0});var ea=s(Ye);m(t0.$$.fragment,ea),iXo=i(ea),Rme=n(ea,"P",{});var Bdt=s(Rme);dXo=r(Bdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Bdt.forEach(t),cXo=i(ea),an=n(ea,"P",{});var zC=s(an);fXo=r(zC,"The model class to instantiate is selected based on the "),Bme=n(zC,"CODE",{});var Pdt=s(Bme);mXo=r(Pdt,"model_type"),Pdt.forEach(t),gXo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Pme=n(zC,"CODE",{});var $dt=s(Pme);hXo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),pXo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$me=n(zC,"CODE",{});var Idt=s($me);_Xo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),uXo=r(zC,":"),zC.forEach(t),bXo=i(ea),nn=n(ea,"UL",{});var QC=s(nn);jF=n(QC,"LI",{});var MLe=s(jF);Ime=n(MLe,"STRONG",{});var qdt=s(Ime);vXo=r(qdt,"data2vec-audio"),qdt.forEach(t),FXo=r(MLe," \u2014 "),wG=n(MLe,"A",{href:!0});var Ndt=s(wG);TXo=r(Ndt,"Data2VecAudioForAudioFrameClassification"),Ndt.forEach(t),MXo=r(MLe," (Data2VecAudio model)"),MLe.forEach(t),EXo=i(QC),DF=n(QC,"LI",{});var ELe=s(DF);qme=n(ELe,"STRONG",{});var jdt=s(qme);CXo=r(jdt,"unispeech-sat"),jdt.forEach(t),wXo=r(ELe," \u2014 "),AG=n(ELe,"A",{href:!0});var Ddt=s(AG);AXo=r(Ddt,"UniSpeechSatForAudioFrameClassification"),Ddt.forEach(t),yXo=r(ELe," (UniSpeechSat model)"),ELe.forEach(t),LXo=i(QC),GF=n(QC,"LI",{});var CLe=s(GF);Nme=n(CLe,"STRONG",{});var Gdt=s(Nme);xXo=r(Gdt,"wav2vec2"),Gdt.forEach(t),kXo=r(CLe," \u2014 "),yG=n(CLe,"A",{href:!0});var Odt=s(yG);SXo=r(Odt,"Wav2Vec2ForAudioFrameClassification"),Odt.forEach(t),RXo=r(CLe," (Wav2Vec2 model)"),CLe.forEach(t),BXo=i(QC),OF=n(QC,"LI",{});var wLe=s(OF);jme=n(wLe,"STRONG",{});var Vdt=s(jme);PXo=r(Vdt,"wavlm"),Vdt.forEach(t),$Xo=r(wLe," \u2014 "),LG=n(wLe,"A",{href:!0});var Xdt=s(LG);IXo=r(Xdt,"WavLMForAudioFrameClassification"),Xdt.forEach(t),qXo=r(wLe," (WavLM model)"),wLe.forEach(t),QC.forEach(t),NXo=i(ea),VF=n(ea,"P",{});var ALe=s(VF);jXo=r(ALe,"The model is set in evaluation mode by default using "),Dme=n(ALe,"CODE",{});var zdt=s(Dme);DXo=r(zdt,"model.eval()"),zdt.forEach(t),GXo=r(ALe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gme=n(ALe,"CODE",{});var Qdt=s(Gme);OXo=r(Qdt,"model.train()"),Qdt.forEach(t),ALe.forEach(t),VXo=i(ea),Ome=n(ea,"P",{});var Wdt=s(Ome);XXo=r(Wdt,"Examples:"),Wdt.forEach(t),zXo=i(ea),m(a0.$$.fragment,ea),ea.forEach(t),El.forEach(t),TBe=i(c),Vd=n(c,"H2",{class:!0});var k$e=s(Vd);XF=n(k$e,"A",{id:!0,class:!0,href:!0});var Hdt=s(XF);Vme=n(Hdt,"SPAN",{});var Udt=s(Vme);m(n0.$$.fragment,Udt),Udt.forEach(t),Hdt.forEach(t),QXo=i(k$e),Xme=n(k$e,"SPAN",{});var Jdt=s(Xme);WXo=r(Jdt,"AutoModelForCTC"),Jdt.forEach(t),k$e.forEach(t),MBe=i(c),fr=n(c,"DIV",{class:!0});var wl=s(fr);m(s0.$$.fragment,wl),HXo=i(wl),Xd=n(wl,"P",{});var KU=s(Xd);UXo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),xG=n(KU,"A",{href:!0});var Ydt=s(xG);JXo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),YXo=r(KU," class method or the "),kG=n(KU,"A",{href:!0});var Kdt=s(kG);KXo=r(Kdt,"from_config()"),Kdt.forEach(t),ZXo=r(KU,` class
method.`),KU.forEach(t),ezo=i(wl),l0=n(wl,"P",{});var S$e=s(l0);ozo=r(S$e,"This class cannot be instantiated directly using "),zme=n(S$e,"CODE",{});var Zdt=s(zme);rzo=r(Zdt,"__init__()"),Zdt.forEach(t),tzo=r(S$e," (throws an error)."),S$e.forEach(t),azo=i(wl),nt=n(wl,"DIV",{class:!0});var Al=s(nt);m(i0.$$.fragment,Al),nzo=i(Al),Qme=n(Al,"P",{});var ect=s(Qme);szo=r(ect,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ect.forEach(t),lzo=i(Al),zd=n(Al,"P",{});var ZU=s(zd);izo=r(ZU,`Note:
Loading a model from its configuration file does `),Wme=n(ZU,"STRONG",{});var oct=s(Wme);dzo=r(oct,"not"),oct.forEach(t),czo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),SG=n(ZU,"A",{href:!0});var rct=s(SG);fzo=r(rct,"from_pretrained()"),rct.forEach(t),mzo=r(ZU," to load the model weights."),ZU.forEach(t),gzo=i(Al),Hme=n(Al,"P",{});var tct=s(Hme);hzo=r(tct,"Examples:"),tct.forEach(t),pzo=i(Al),m(d0.$$.fragment,Al),Al.forEach(t),_zo=i(wl),Ke=n(wl,"DIV",{class:!0});var oa=s(Ke);m(c0.$$.fragment,oa),uzo=i(oa),Ume=n(oa,"P",{});var act=s(Ume);bzo=r(act,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),act.forEach(t),vzo=i(oa),sn=n(oa,"P",{});var WC=s(sn);Fzo=r(WC,"The model class to instantiate is selected based on the "),Jme=n(WC,"CODE",{});var nct=s(Jme);Tzo=r(nct,"model_type"),nct.forEach(t),Mzo=r(WC,` property of the config object (either
passed as an argument or loaded from `),Yme=n(WC,"CODE",{});var sct=s(Yme);Ezo=r(sct,"pretrained_model_name_or_path"),sct.forEach(t),Czo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kme=n(WC,"CODE",{});var lct=s(Kme);wzo=r(lct,"pretrained_model_name_or_path"),lct.forEach(t),Azo=r(WC,":"),WC.forEach(t),yzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);zF=n(Go,"LI",{});var yLe=s(zF);Zme=n(yLe,"STRONG",{});var ict=s(Zme);Lzo=r(ict,"data2vec-audio"),ict.forEach(t),xzo=r(yLe," \u2014 "),RG=n(yLe,"A",{href:!0});var dct=s(RG);kzo=r(dct,"Data2VecAudioForCTC"),dct.forEach(t),Szo=r(yLe," (Data2VecAudio model)"),yLe.forEach(t),Rzo=i(Go),QF=n(Go,"LI",{});var LLe=s(QF);ege=n(LLe,"STRONG",{});var cct=s(ege);Bzo=r(cct,"hubert"),cct.forEach(t),Pzo=r(LLe," \u2014 "),BG=n(LLe,"A",{href:!0});var fct=s(BG);$zo=r(fct,"HubertForCTC"),fct.forEach(t),Izo=r(LLe," (Hubert model)"),LLe.forEach(t),qzo=i(Go),WF=n(Go,"LI",{});var xLe=s(WF);oge=n(xLe,"STRONG",{});var mct=s(oge);Nzo=r(mct,"sew"),mct.forEach(t),jzo=r(xLe," \u2014 "),PG=n(xLe,"A",{href:!0});var gct=s(PG);Dzo=r(gct,"SEWForCTC"),gct.forEach(t),Gzo=r(xLe," (SEW model)"),xLe.forEach(t),Ozo=i(Go),HF=n(Go,"LI",{});var kLe=s(HF);rge=n(kLe,"STRONG",{});var hct=s(rge);Vzo=r(hct,"sew-d"),hct.forEach(t),Xzo=r(kLe," \u2014 "),$G=n(kLe,"A",{href:!0});var pct=s($G);zzo=r(pct,"SEWDForCTC"),pct.forEach(t),Qzo=r(kLe," (SEW-D model)"),kLe.forEach(t),Wzo=i(Go),UF=n(Go,"LI",{});var SLe=s(UF);tge=n(SLe,"STRONG",{});var _ct=s(tge);Hzo=r(_ct,"unispeech"),_ct.forEach(t),Uzo=r(SLe," \u2014 "),IG=n(SLe,"A",{href:!0});var uct=s(IG);Jzo=r(uct,"UniSpeechForCTC"),uct.forEach(t),Yzo=r(SLe," (UniSpeech model)"),SLe.forEach(t),Kzo=i(Go),JF=n(Go,"LI",{});var RLe=s(JF);age=n(RLe,"STRONG",{});var bct=s(age);Zzo=r(bct,"unispeech-sat"),bct.forEach(t),eQo=r(RLe," \u2014 "),qG=n(RLe,"A",{href:!0});var vct=s(qG);oQo=r(vct,"UniSpeechSatForCTC"),vct.forEach(t),rQo=r(RLe," (UniSpeechSat model)"),RLe.forEach(t),tQo=i(Go),YF=n(Go,"LI",{});var BLe=s(YF);nge=n(BLe,"STRONG",{});var Fct=s(nge);aQo=r(Fct,"wav2vec2"),Fct.forEach(t),nQo=r(BLe," \u2014 "),NG=n(BLe,"A",{href:!0});var Tct=s(NG);sQo=r(Tct,"Wav2Vec2ForCTC"),Tct.forEach(t),lQo=r(BLe," (Wav2Vec2 model)"),BLe.forEach(t),iQo=i(Go),KF=n(Go,"LI",{});var PLe=s(KF);sge=n(PLe,"STRONG",{});var Mct=s(sge);dQo=r(Mct,"wavlm"),Mct.forEach(t),cQo=r(PLe," \u2014 "),jG=n(PLe,"A",{href:!0});var Ect=s(jG);fQo=r(Ect,"WavLMForCTC"),Ect.forEach(t),mQo=r(PLe," (WavLM model)"),PLe.forEach(t),Go.forEach(t),gQo=i(oa),ZF=n(oa,"P",{});var $Le=s(ZF);hQo=r($Le,"The model is set in evaluation mode by default using "),lge=n($Le,"CODE",{});var Cct=s(lge);pQo=r(Cct,"model.eval()"),Cct.forEach(t),_Qo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ige=n($Le,"CODE",{});var wct=s(ige);uQo=r(wct,"model.train()"),wct.forEach(t),$Le.forEach(t),bQo=i(oa),dge=n(oa,"P",{});var Act=s(dge);vQo=r(Act,"Examples:"),Act.forEach(t),FQo=i(oa),m(f0.$$.fragment,oa),oa.forEach(t),wl.forEach(t),EBe=i(c),Qd=n(c,"H2",{class:!0});var R$e=s(Qd);eT=n(R$e,"A",{id:!0,class:!0,href:!0});var yct=s(eT);cge=n(yct,"SPAN",{});var Lct=s(cge);m(m0.$$.fragment,Lct),Lct.forEach(t),yct.forEach(t),TQo=i(R$e),fge=n(R$e,"SPAN",{});var xct=s(fge);MQo=r(xct,"AutoModelForSpeechSeq2Seq"),xct.forEach(t),R$e.forEach(t),CBe=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(g0.$$.fragment,yl),EQo=i(yl),Wd=n(yl,"P",{});var eJ=s(Wd);CQo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DG=n(eJ,"A",{href:!0});var kct=s(DG);wQo=r(kct,"from_pretrained()"),kct.forEach(t),AQo=r(eJ," class method or the "),GG=n(eJ,"A",{href:!0});var Sct=s(GG);yQo=r(Sct,"from_config()"),Sct.forEach(t),LQo=r(eJ,` class
method.`),eJ.forEach(t),xQo=i(yl),h0=n(yl,"P",{});var B$e=s(h0);kQo=r(B$e,"This class cannot be instantiated directly using "),mge=n(B$e,"CODE",{});var Rct=s(mge);SQo=r(Rct,"__init__()"),Rct.forEach(t),RQo=r(B$e," (throws an error)."),B$e.forEach(t),BQo=i(yl),st=n(yl,"DIV",{class:!0});var Ll=s(st);m(p0.$$.fragment,Ll),PQo=i(Ll),gge=n(Ll,"P",{});var Bct=s(gge);$Qo=r(Bct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Bct.forEach(t),IQo=i(Ll),Hd=n(Ll,"P",{});var oJ=s(Hd);qQo=r(oJ,`Note:
Loading a model from its configuration file does `),hge=n(oJ,"STRONG",{});var Pct=s(hge);NQo=r(Pct,"not"),Pct.forEach(t),jQo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OG=n(oJ,"A",{href:!0});var $ct=s(OG);DQo=r($ct,"from_pretrained()"),$ct.forEach(t),GQo=r(oJ," to load the model weights."),oJ.forEach(t),OQo=i(Ll),pge=n(Ll,"P",{});var Ict=s(pge);VQo=r(Ict,"Examples:"),Ict.forEach(t),XQo=i(Ll),m(_0.$$.fragment,Ll),Ll.forEach(t),zQo=i(yl),Ze=n(yl,"DIV",{class:!0});var ra=s(Ze);m(u0.$$.fragment,ra),QQo=i(ra),_ge=n(ra,"P",{});var qct=s(_ge);WQo=r(qct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qct.forEach(t),HQo=i(ra),ln=n(ra,"P",{});var HC=s(ln);UQo=r(HC,"The model class to instantiate is selected based on the "),uge=n(HC,"CODE",{});var Nct=s(uge);JQo=r(Nct,"model_type"),Nct.forEach(t),YQo=r(HC,` property of the config object (either
passed as an argument or loaded from `),bge=n(HC,"CODE",{});var jct=s(bge);KQo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),ZQo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vge=n(HC,"CODE",{});var Dct=s(vge);eWo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),oWo=r(HC,":"),HC.forEach(t),rWo=i(ra),b0=n(ra,"UL",{});var P$e=s(b0);oT=n(P$e,"LI",{});var ILe=s(oT);Fge=n(ILe,"STRONG",{});var Gct=s(Fge);tWo=r(Gct,"speech-encoder-decoder"),Gct.forEach(t),aWo=r(ILe," \u2014 "),VG=n(ILe,"A",{href:!0});var Oct=s(VG);nWo=r(Oct,"SpeechEncoderDecoderModel"),Oct.forEach(t),sWo=r(ILe," (Speech Encoder decoder model)"),ILe.forEach(t),lWo=i(P$e),rT=n(P$e,"LI",{});var qLe=s(rT);Tge=n(qLe,"STRONG",{});var Vct=s(Tge);iWo=r(Vct,"speech_to_text"),Vct.forEach(t),dWo=r(qLe," \u2014 "),XG=n(qLe,"A",{href:!0});var Xct=s(XG);cWo=r(Xct,"Speech2TextForConditionalGeneration"),Xct.forEach(t),fWo=r(qLe," (Speech2Text model)"),qLe.forEach(t),P$e.forEach(t),mWo=i(ra),tT=n(ra,"P",{});var NLe=s(tT);gWo=r(NLe,"The model is set in evaluation mode by default using "),Mge=n(NLe,"CODE",{});var zct=s(Mge);hWo=r(zct,"model.eval()"),zct.forEach(t),pWo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ege=n(NLe,"CODE",{});var Qct=s(Ege);_Wo=r(Qct,"model.train()"),Qct.forEach(t),NLe.forEach(t),uWo=i(ra),Cge=n(ra,"P",{});var Wct=s(Cge);bWo=r(Wct,"Examples:"),Wct.forEach(t),vWo=i(ra),m(v0.$$.fragment,ra),ra.forEach(t),yl.forEach(t),wBe=i(c),Ud=n(c,"H2",{class:!0});var $$e=s(Ud);aT=n($$e,"A",{id:!0,class:!0,href:!0});var Hct=s(aT);wge=n(Hct,"SPAN",{});var Uct=s(wge);m(F0.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),FWo=i($$e),Age=n($$e,"SPAN",{});var Jct=s(Age);TWo=r(Jct,"AutoModelForAudioXVector"),Jct.forEach(t),$$e.forEach(t),ABe=i(c),gr=n(c,"DIV",{class:!0});var xl=s(gr);m(T0.$$.fragment,xl),MWo=i(xl),Jd=n(xl,"P",{});var rJ=s(Jd);EWo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),zG=n(rJ,"A",{href:!0});var Yct=s(zG);CWo=r(Yct,"from_pretrained()"),Yct.forEach(t),wWo=r(rJ," class method or the "),QG=n(rJ,"A",{href:!0});var Kct=s(QG);AWo=r(Kct,"from_config()"),Kct.forEach(t),yWo=r(rJ,` class
method.`),rJ.forEach(t),LWo=i(xl),M0=n(xl,"P",{});var I$e=s(M0);xWo=r(I$e,"This class cannot be instantiated directly using "),yge=n(I$e,"CODE",{});var Zct=s(yge);kWo=r(Zct,"__init__()"),Zct.forEach(t),SWo=r(I$e," (throws an error)."),I$e.forEach(t),RWo=i(xl),lt=n(xl,"DIV",{class:!0});var kl=s(lt);m(E0.$$.fragment,kl),BWo=i(kl),Lge=n(kl,"P",{});var eft=s(Lge);PWo=r(eft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eft.forEach(t),$Wo=i(kl),Yd=n(kl,"P",{});var tJ=s(Yd);IWo=r(tJ,`Note:
Loading a model from its configuration file does `),xge=n(tJ,"STRONG",{});var oft=s(xge);qWo=r(oft,"not"),oft.forEach(t),NWo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n(tJ,"A",{href:!0});var rft=s(WG);jWo=r(rft,"from_pretrained()"),rft.forEach(t),DWo=r(tJ," to load the model weights."),tJ.forEach(t),GWo=i(kl),kge=n(kl,"P",{});var tft=s(kge);OWo=r(tft,"Examples:"),tft.forEach(t),VWo=i(kl),m(C0.$$.fragment,kl),kl.forEach(t),XWo=i(xl),eo=n(xl,"DIV",{class:!0});var ta=s(eo);m(w0.$$.fragment,ta),zWo=i(ta),Sge=n(ta,"P",{});var aft=s(Sge);QWo=r(aft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),aft.forEach(t),WWo=i(ta),dn=n(ta,"P",{});var UC=s(dn);HWo=r(UC,"The model class to instantiate is selected based on the "),Rge=n(UC,"CODE",{});var nft=s(Rge);UWo=r(nft,"model_type"),nft.forEach(t),JWo=r(UC,` property of the config object (either
passed as an argument or loaded from `),Bge=n(UC,"CODE",{});var sft=s(Bge);YWo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),KWo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(UC,"CODE",{});var lft=s(Pge);ZWo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),eHo=r(UC,":"),UC.forEach(t),oHo=i(ta),cn=n(ta,"UL",{});var JC=s(cn);nT=n(JC,"LI",{});var jLe=s(nT);$ge=n(jLe,"STRONG",{});var ift=s($ge);rHo=r(ift,"data2vec-audio"),ift.forEach(t),tHo=r(jLe," \u2014 "),HG=n(jLe,"A",{href:!0});var dft=s(HG);aHo=r(dft,"Data2VecAudioForXVector"),dft.forEach(t),nHo=r(jLe," (Data2VecAudio model)"),jLe.forEach(t),sHo=i(JC),sT=n(JC,"LI",{});var DLe=s(sT);Ige=n(DLe,"STRONG",{});var cft=s(Ige);lHo=r(cft,"unispeech-sat"),cft.forEach(t),iHo=r(DLe," \u2014 "),UG=n(DLe,"A",{href:!0});var fft=s(UG);dHo=r(fft,"UniSpeechSatForXVector"),fft.forEach(t),cHo=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),fHo=i(JC),lT=n(JC,"LI",{});var GLe=s(lT);qge=n(GLe,"STRONG",{});var mft=s(qge);mHo=r(mft,"wav2vec2"),mft.forEach(t),gHo=r(GLe," \u2014 "),JG=n(GLe,"A",{href:!0});var gft=s(JG);hHo=r(gft,"Wav2Vec2ForXVector"),gft.forEach(t),pHo=r(GLe," (Wav2Vec2 model)"),GLe.forEach(t),_Ho=i(JC),iT=n(JC,"LI",{});var OLe=s(iT);Nge=n(OLe,"STRONG",{});var hft=s(Nge);uHo=r(hft,"wavlm"),hft.forEach(t),bHo=r(OLe," \u2014 "),YG=n(OLe,"A",{href:!0});var pft=s(YG);vHo=r(pft,"WavLMForXVector"),pft.forEach(t),FHo=r(OLe," (WavLM model)"),OLe.forEach(t),JC.forEach(t),THo=i(ta),dT=n(ta,"P",{});var VLe=s(dT);MHo=r(VLe,"The model is set in evaluation mode by default using "),jge=n(VLe,"CODE",{});var _ft=s(jge);EHo=r(_ft,"model.eval()"),_ft.forEach(t),CHo=r(VLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dge=n(VLe,"CODE",{});var uft=s(Dge);wHo=r(uft,"model.train()"),uft.forEach(t),VLe.forEach(t),AHo=i(ta),Gge=n(ta,"P",{});var bft=s(Gge);yHo=r(bft,"Examples:"),bft.forEach(t),LHo=i(ta),m(A0.$$.fragment,ta),ta.forEach(t),xl.forEach(t),yBe=i(c),Kd=n(c,"H2",{class:!0});var q$e=s(Kd);cT=n(q$e,"A",{id:!0,class:!0,href:!0});var vft=s(cT);Oge=n(vft,"SPAN",{});var Fft=s(Oge);m(y0.$$.fragment,Fft),Fft.forEach(t),vft.forEach(t),xHo=i(q$e),Vge=n(q$e,"SPAN",{});var Tft=s(Vge);kHo=r(Tft,"AutoModelForMaskedImageModeling"),Tft.forEach(t),q$e.forEach(t),LBe=i(c),hr=n(c,"DIV",{class:!0});var Sl=s(hr);m(L0.$$.fragment,Sl),SHo=i(Sl),Zd=n(Sl,"P",{});var aJ=s(Zd);RHo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KG=n(aJ,"A",{href:!0});var Mft=s(KG);BHo=r(Mft,"from_pretrained()"),Mft.forEach(t),PHo=r(aJ," class method or the "),ZG=n(aJ,"A",{href:!0});var Eft=s(ZG);$Ho=r(Eft,"from_config()"),Eft.forEach(t),IHo=r(aJ,` class
method.`),aJ.forEach(t),qHo=i(Sl),x0=n(Sl,"P",{});var N$e=s(x0);NHo=r(N$e,"This class cannot be instantiated directly using "),Xge=n(N$e,"CODE",{});var Cft=s(Xge);jHo=r(Cft,"__init__()"),Cft.forEach(t),DHo=r(N$e," (throws an error)."),N$e.forEach(t),GHo=i(Sl),it=n(Sl,"DIV",{class:!0});var Rl=s(it);m(k0.$$.fragment,Rl),OHo=i(Rl),zge=n(Rl,"P",{});var wft=s(zge);VHo=r(wft,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),wft.forEach(t),XHo=i(Rl),ec=n(Rl,"P",{});var nJ=s(ec);zHo=r(nJ,`Note:
Loading a model from its configuration file does `),Qge=n(nJ,"STRONG",{});var Aft=s(Qge);QHo=r(Aft,"not"),Aft.forEach(t),WHo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(nJ,"A",{href:!0});var yft=s(eO);HHo=r(yft,"from_pretrained()"),yft.forEach(t),UHo=r(nJ," to load the model weights."),nJ.forEach(t),JHo=i(Rl),Wge=n(Rl,"P",{});var Lft=s(Wge);YHo=r(Lft,"Examples:"),Lft.forEach(t),KHo=i(Rl),m(S0.$$.fragment,Rl),Rl.forEach(t),ZHo=i(Sl),oo=n(Sl,"DIV",{class:!0});var aa=s(oo);m(R0.$$.fragment,aa),eUo=i(aa),Hge=n(aa,"P",{});var xft=s(Hge);oUo=r(xft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),xft.forEach(t),rUo=i(aa),fn=n(aa,"P",{});var YC=s(fn);tUo=r(YC,"The model class to instantiate is selected based on the "),Uge=n(YC,"CODE",{});var kft=s(Uge);aUo=r(kft,"model_type"),kft.forEach(t),nUo=r(YC,` property of the config object (either
passed as an argument or loaded from `),Jge=n(YC,"CODE",{});var Sft=s(Jge);sUo=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),lUo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yge=n(YC,"CODE",{});var Rft=s(Yge);iUo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),dUo=r(YC,":"),YC.forEach(t),cUo=i(aa),oc=n(aa,"UL",{});var sJ=s(oc);fT=n(sJ,"LI",{});var XLe=s(fT);Kge=n(XLe,"STRONG",{});var Bft=s(Kge);fUo=r(Bft,"deit"),Bft.forEach(t),mUo=r(XLe," \u2014 "),oO=n(XLe,"A",{href:!0});var Pft=s(oO);gUo=r(Pft,"DeiTForMaskedImageModeling"),Pft.forEach(t),hUo=r(XLe," (DeiT model)"),XLe.forEach(t),pUo=i(sJ),mT=n(sJ,"LI",{});var zLe=s(mT);Zge=n(zLe,"STRONG",{});var $ft=s(Zge);_Uo=r($ft,"swin"),$ft.forEach(t),uUo=r(zLe," \u2014 "),rO=n(zLe,"A",{href:!0});var Ift=s(rO);bUo=r(Ift,"SwinForMaskedImageModeling"),Ift.forEach(t),vUo=r(zLe," (Swin model)"),zLe.forEach(t),FUo=i(sJ),gT=n(sJ,"LI",{});var QLe=s(gT);ehe=n(QLe,"STRONG",{});var qft=s(ehe);TUo=r(qft,"vit"),qft.forEach(t),MUo=r(QLe," \u2014 "),tO=n(QLe,"A",{href:!0});var Nft=s(tO);EUo=r(Nft,"ViTForMaskedImageModeling"),Nft.forEach(t),CUo=r(QLe," (ViT model)"),QLe.forEach(t),sJ.forEach(t),wUo=i(aa),hT=n(aa,"P",{});var WLe=s(hT);AUo=r(WLe,"The model is set in evaluation mode by default using "),ohe=n(WLe,"CODE",{});var jft=s(ohe);yUo=r(jft,"model.eval()"),jft.forEach(t),LUo=r(WLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rhe=n(WLe,"CODE",{});var Dft=s(rhe);xUo=r(Dft,"model.train()"),Dft.forEach(t),WLe.forEach(t),kUo=i(aa),the=n(aa,"P",{});var Gft=s(the);SUo=r(Gft,"Examples:"),Gft.forEach(t),RUo=i(aa),m(B0.$$.fragment,aa),aa.forEach(t),Sl.forEach(t),xBe=i(c),rc=n(c,"H2",{class:!0});var j$e=s(rc);pT=n(j$e,"A",{id:!0,class:!0,href:!0});var Oft=s(pT);ahe=n(Oft,"SPAN",{});var Vft=s(ahe);m(P0.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),BUo=i(j$e),nhe=n(j$e,"SPAN",{});var Xft=s(nhe);PUo=r(Xft,"AutoModelForObjectDetection"),Xft.forEach(t),j$e.forEach(t),kBe=i(c),pr=n(c,"DIV",{class:!0});var Bl=s(pr);m($0.$$.fragment,Bl),$Uo=i(Bl),tc=n(Bl,"P",{});var lJ=s(tc);IUo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aO=n(lJ,"A",{href:!0});var zft=s(aO);qUo=r(zft,"from_pretrained()"),zft.forEach(t),NUo=r(lJ," class method or the "),nO=n(lJ,"A",{href:!0});var Qft=s(nO);jUo=r(Qft,"from_config()"),Qft.forEach(t),DUo=r(lJ,` class
method.`),lJ.forEach(t),GUo=i(Bl),I0=n(Bl,"P",{});var D$e=s(I0);OUo=r(D$e,"This class cannot be instantiated directly using "),she=n(D$e,"CODE",{});var Wft=s(she);VUo=r(Wft,"__init__()"),Wft.forEach(t),XUo=r(D$e," (throws an error)."),D$e.forEach(t),zUo=i(Bl),dt=n(Bl,"DIV",{class:!0});var Pl=s(dt);m(q0.$$.fragment,Pl),QUo=i(Pl),lhe=n(Pl,"P",{});var Hft=s(lhe);WUo=r(Hft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Hft.forEach(t),HUo=i(Pl),ac=n(Pl,"P",{});var iJ=s(ac);UUo=r(iJ,`Note:
Loading a model from its configuration file does `),ihe=n(iJ,"STRONG",{});var Uft=s(ihe);JUo=r(Uft,"not"),Uft.forEach(t),YUo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(iJ,"A",{href:!0});var Jft=s(sO);KUo=r(Jft,"from_pretrained()"),Jft.forEach(t),ZUo=r(iJ," to load the model weights."),iJ.forEach(t),eJo=i(Pl),dhe=n(Pl,"P",{});var Yft=s(dhe);oJo=r(Yft,"Examples:"),Yft.forEach(t),rJo=i(Pl),m(N0.$$.fragment,Pl),Pl.forEach(t),tJo=i(Bl),ro=n(Bl,"DIV",{class:!0});var na=s(ro);m(j0.$$.fragment,na),aJo=i(na),che=n(na,"P",{});var Kft=s(che);nJo=r(Kft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Kft.forEach(t),sJo=i(na),mn=n(na,"P",{});var KC=s(mn);lJo=r(KC,"The model class to instantiate is selected based on the "),fhe=n(KC,"CODE",{});var Zft=s(fhe);iJo=r(Zft,"model_type"),Zft.forEach(t),dJo=r(KC,` property of the config object (either
passed as an argument or loaded from `),mhe=n(KC,"CODE",{});var emt=s(mhe);cJo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),fJo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ghe=n(KC,"CODE",{});var omt=s(ghe);mJo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),gJo=r(KC,":"),KC.forEach(t),hJo=i(na),hhe=n(na,"UL",{});var rmt=s(hhe);_T=n(rmt,"LI",{});var HLe=s(_T);phe=n(HLe,"STRONG",{});var tmt=s(phe);pJo=r(tmt,"detr"),tmt.forEach(t),_Jo=r(HLe," \u2014 "),lO=n(HLe,"A",{href:!0});var amt=s(lO);uJo=r(amt,"DetrForObjectDetection"),amt.forEach(t),bJo=r(HLe," (DETR model)"),HLe.forEach(t),rmt.forEach(t),vJo=i(na),uT=n(na,"P",{});var ULe=s(uT);FJo=r(ULe,"The model is set in evaluation mode by default using "),_he=n(ULe,"CODE",{});var nmt=s(_he);TJo=r(nmt,"model.eval()"),nmt.forEach(t),MJo=r(ULe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(ULe,"CODE",{});var smt=s(uhe);EJo=r(smt,"model.train()"),smt.forEach(t),ULe.forEach(t),CJo=i(na),bhe=n(na,"P",{});var lmt=s(bhe);wJo=r(lmt,"Examples:"),lmt.forEach(t),AJo=i(na),m(D0.$$.fragment,na),na.forEach(t),Bl.forEach(t),SBe=i(c),nc=n(c,"H2",{class:!0});var G$e=s(nc);bT=n(G$e,"A",{id:!0,class:!0,href:!0});var imt=s(bT);vhe=n(imt,"SPAN",{});var dmt=s(vhe);m(G0.$$.fragment,dmt),dmt.forEach(t),imt.forEach(t),yJo=i(G$e),Fhe=n(G$e,"SPAN",{});var cmt=s(Fhe);LJo=r(cmt,"AutoModelForImageSegmentation"),cmt.forEach(t),G$e.forEach(t),RBe=i(c),_r=n(c,"DIV",{class:!0});var $l=s(_r);m(O0.$$.fragment,$l),xJo=i($l),sc=n($l,"P",{});var dJ=s(sc);kJo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iO=n(dJ,"A",{href:!0});var fmt=s(iO);SJo=r(fmt,"from_pretrained()"),fmt.forEach(t),RJo=r(dJ," class method or the "),dO=n(dJ,"A",{href:!0});var mmt=s(dO);BJo=r(mmt,"from_config()"),mmt.forEach(t),PJo=r(dJ,` class
method.`),dJ.forEach(t),$Jo=i($l),V0=n($l,"P",{});var O$e=s(V0);IJo=r(O$e,"This class cannot be instantiated directly using "),The=n(O$e,"CODE",{});var gmt=s(The);qJo=r(gmt,"__init__()"),gmt.forEach(t),NJo=r(O$e," (throws an error)."),O$e.forEach(t),jJo=i($l),ct=n($l,"DIV",{class:!0});var Il=s(ct);m(X0.$$.fragment,Il),DJo=i(Il),Mhe=n(Il,"P",{});var hmt=s(Mhe);GJo=r(hmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),hmt.forEach(t),OJo=i(Il),lc=n(Il,"P",{});var cJ=s(lc);VJo=r(cJ,`Note:
Loading a model from its configuration file does `),Ehe=n(cJ,"STRONG",{});var pmt=s(Ehe);XJo=r(pmt,"not"),pmt.forEach(t),zJo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(cJ,"A",{href:!0});var _mt=s(cO);QJo=r(_mt,"from_pretrained()"),_mt.forEach(t),WJo=r(cJ," to load the model weights."),cJ.forEach(t),HJo=i(Il),Che=n(Il,"P",{});var umt=s(Che);UJo=r(umt,"Examples:"),umt.forEach(t),JJo=i(Il),m(z0.$$.fragment,Il),Il.forEach(t),YJo=i($l),to=n($l,"DIV",{class:!0});var sa=s(to);m(Q0.$$.fragment,sa),KJo=i(sa),whe=n(sa,"P",{});var bmt=s(whe);ZJo=r(bmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),bmt.forEach(t),eYo=i(sa),gn=n(sa,"P",{});var ZC=s(gn);oYo=r(ZC,"The model class to instantiate is selected based on the "),Ahe=n(ZC,"CODE",{});var vmt=s(Ahe);rYo=r(vmt,"model_type"),vmt.forEach(t),tYo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),yhe=n(ZC,"CODE",{});var Fmt=s(yhe);aYo=r(Fmt,"pretrained_model_name_or_path"),Fmt.forEach(t),nYo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lhe=n(ZC,"CODE",{});var Tmt=s(Lhe);sYo=r(Tmt,"pretrained_model_name_or_path"),Tmt.forEach(t),lYo=r(ZC,":"),ZC.forEach(t),iYo=i(sa),xhe=n(sa,"UL",{});var Mmt=s(xhe);vT=n(Mmt,"LI",{});var JLe=s(vT);khe=n(JLe,"STRONG",{});var Emt=s(khe);dYo=r(Emt,"detr"),Emt.forEach(t),cYo=r(JLe," \u2014 "),fO=n(JLe,"A",{href:!0});var Cmt=s(fO);fYo=r(Cmt,"DetrForSegmentation"),Cmt.forEach(t),mYo=r(JLe," (DETR model)"),JLe.forEach(t),Mmt.forEach(t),gYo=i(sa),FT=n(sa,"P",{});var YLe=s(FT);hYo=r(YLe,"The model is set in evaluation mode by default using "),She=n(YLe,"CODE",{});var wmt=s(She);pYo=r(wmt,"model.eval()"),wmt.forEach(t),_Yo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(YLe,"CODE",{});var Amt=s(Rhe);uYo=r(Amt,"model.train()"),Amt.forEach(t),YLe.forEach(t),bYo=i(sa),Bhe=n(sa,"P",{});var ymt=s(Bhe);vYo=r(ymt,"Examples:"),ymt.forEach(t),FYo=i(sa),m(W0.$$.fragment,sa),sa.forEach(t),$l.forEach(t),BBe=i(c),ic=n(c,"H2",{class:!0});var V$e=s(ic);TT=n(V$e,"A",{id:!0,class:!0,href:!0});var Lmt=s(TT);Phe=n(Lmt,"SPAN",{});var xmt=s(Phe);m(H0.$$.fragment,xmt),xmt.forEach(t),Lmt.forEach(t),TYo=i(V$e),$he=n(V$e,"SPAN",{});var kmt=s($he);MYo=r(kmt,"AutoModelForSemanticSegmentation"),kmt.forEach(t),V$e.forEach(t),PBe=i(c),ur=n(c,"DIV",{class:!0});var ql=s(ur);m(U0.$$.fragment,ql),EYo=i(ql),dc=n(ql,"P",{});var fJ=s(dc);CYo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mO=n(fJ,"A",{href:!0});var Smt=s(mO);wYo=r(Smt,"from_pretrained()"),Smt.forEach(t),AYo=r(fJ," class method or the "),gO=n(fJ,"A",{href:!0});var Rmt=s(gO);yYo=r(Rmt,"from_config()"),Rmt.forEach(t),LYo=r(fJ,` class
method.`),fJ.forEach(t),xYo=i(ql),J0=n(ql,"P",{});var X$e=s(J0);kYo=r(X$e,"This class cannot be instantiated directly using "),Ihe=n(X$e,"CODE",{});var Bmt=s(Ihe);SYo=r(Bmt,"__init__()"),Bmt.forEach(t),RYo=r(X$e," (throws an error)."),X$e.forEach(t),BYo=i(ql),ft=n(ql,"DIV",{class:!0});var Nl=s(ft);m(Y0.$$.fragment,Nl),PYo=i(Nl),qhe=n(Nl,"P",{});var Pmt=s(qhe);$Yo=r(Pmt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Pmt.forEach(t),IYo=i(Nl),cc=n(Nl,"P",{});var mJ=s(cc);qYo=r(mJ,`Note:
Loading a model from its configuration file does `),Nhe=n(mJ,"STRONG",{});var $mt=s(Nhe);NYo=r($mt,"not"),$mt.forEach(t),jYo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(mJ,"A",{href:!0});var Imt=s(hO);DYo=r(Imt,"from_pretrained()"),Imt.forEach(t),GYo=r(mJ," to load the model weights."),mJ.forEach(t),OYo=i(Nl),jhe=n(Nl,"P",{});var qmt=s(jhe);VYo=r(qmt,"Examples:"),qmt.forEach(t),XYo=i(Nl),m(K0.$$.fragment,Nl),Nl.forEach(t),zYo=i(ql),ao=n(ql,"DIV",{class:!0});var la=s(ao);m(Z0.$$.fragment,la),QYo=i(la),Dhe=n(la,"P",{});var Nmt=s(Dhe);WYo=r(Nmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Nmt.forEach(t),HYo=i(la),hn=n(la,"P",{});var ew=s(hn);UYo=r(ew,"The model class to instantiate is selected based on the "),Ghe=n(ew,"CODE",{});var jmt=s(Ghe);JYo=r(jmt,"model_type"),jmt.forEach(t),YYo=r(ew,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(ew,"CODE",{});var Dmt=s(Ohe);KYo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),ZYo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(ew,"CODE",{});var Gmt=s(Vhe);eKo=r(Gmt,"pretrained_model_name_or_path"),Gmt.forEach(t),oKo=r(ew,":"),ew.forEach(t),rKo=i(la),pn=n(la,"UL",{});var ow=s(pn);MT=n(ow,"LI",{});var KLe=s(MT);Xhe=n(KLe,"STRONG",{});var Omt=s(Xhe);tKo=r(Omt,"beit"),Omt.forEach(t),aKo=r(KLe," \u2014 "),pO=n(KLe,"A",{href:!0});var Vmt=s(pO);nKo=r(Vmt,"BeitForSemanticSegmentation"),Vmt.forEach(t),sKo=r(KLe," (BEiT model)"),KLe.forEach(t),lKo=i(ow),ET=n(ow,"LI",{});var ZLe=s(ET);zhe=n(ZLe,"STRONG",{});var Xmt=s(zhe);iKo=r(Xmt,"data2vec-vision"),Xmt.forEach(t),dKo=r(ZLe," \u2014 "),_O=n(ZLe,"A",{href:!0});var zmt=s(_O);cKo=r(zmt,"Data2VecVisionForSemanticSegmentation"),zmt.forEach(t),fKo=r(ZLe," (Data2VecVision model)"),ZLe.forEach(t),mKo=i(ow),CT=n(ow,"LI",{});var e7e=s(CT);Qhe=n(e7e,"STRONG",{});var Qmt=s(Qhe);gKo=r(Qmt,"dpt"),Qmt.forEach(t),hKo=r(e7e," \u2014 "),uO=n(e7e,"A",{href:!0});var Wmt=s(uO);pKo=r(Wmt,"DPTForSemanticSegmentation"),Wmt.forEach(t),_Ko=r(e7e," (DPT model)"),e7e.forEach(t),uKo=i(ow),wT=n(ow,"LI",{});var o7e=s(wT);Whe=n(o7e,"STRONG",{});var Hmt=s(Whe);bKo=r(Hmt,"segformer"),Hmt.forEach(t),vKo=r(o7e," \u2014 "),bO=n(o7e,"A",{href:!0});var Umt=s(bO);FKo=r(Umt,"SegformerForSemanticSegmentation"),Umt.forEach(t),TKo=r(o7e," (SegFormer model)"),o7e.forEach(t),ow.forEach(t),MKo=i(la),AT=n(la,"P",{});var r7e=s(AT);EKo=r(r7e,"The model is set in evaluation mode by default using "),Hhe=n(r7e,"CODE",{});var Jmt=s(Hhe);CKo=r(Jmt,"model.eval()"),Jmt.forEach(t),wKo=r(r7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uhe=n(r7e,"CODE",{});var Ymt=s(Uhe);AKo=r(Ymt,"model.train()"),Ymt.forEach(t),r7e.forEach(t),yKo=i(la),Jhe=n(la,"P",{});var Kmt=s(Jhe);LKo=r(Kmt,"Examples:"),Kmt.forEach(t),xKo=i(la),m(ey.$$.fragment,la),la.forEach(t),ql.forEach(t),$Be=i(c),fc=n(c,"H2",{class:!0});var z$e=s(fc);yT=n(z$e,"A",{id:!0,class:!0,href:!0});var Zmt=s(yT);Yhe=n(Zmt,"SPAN",{});var egt=s(Yhe);m(oy.$$.fragment,egt),egt.forEach(t),Zmt.forEach(t),kKo=i(z$e),Khe=n(z$e,"SPAN",{});var ogt=s(Khe);SKo=r(ogt,"AutoModelForInstanceSegmentation"),ogt.forEach(t),z$e.forEach(t),IBe=i(c),br=n(c,"DIV",{class:!0});var jl=s(br);m(ry.$$.fragment,jl),RKo=i(jl),mc=n(jl,"P",{});var gJ=s(mc);BKo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vO=n(gJ,"A",{href:!0});var rgt=s(vO);PKo=r(rgt,"from_pretrained()"),rgt.forEach(t),$Ko=r(gJ," class method or the "),FO=n(gJ,"A",{href:!0});var tgt=s(FO);IKo=r(tgt,"from_config()"),tgt.forEach(t),qKo=r(gJ,` class
method.`),gJ.forEach(t),NKo=i(jl),ty=n(jl,"P",{});var Q$e=s(ty);jKo=r(Q$e,"This class cannot be instantiated directly using "),Zhe=n(Q$e,"CODE",{});var agt=s(Zhe);DKo=r(agt,"__init__()"),agt.forEach(t),GKo=r(Q$e," (throws an error)."),Q$e.forEach(t),OKo=i(jl),mt=n(jl,"DIV",{class:!0});var Dl=s(mt);m(ay.$$.fragment,Dl),VKo=i(Dl),epe=n(Dl,"P",{});var ngt=s(epe);XKo=r(ngt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ngt.forEach(t),zKo=i(Dl),gc=n(Dl,"P",{});var hJ=s(gc);QKo=r(hJ,`Note:
Loading a model from its configuration file does `),ope=n(hJ,"STRONG",{});var sgt=s(ope);WKo=r(sgt,"not"),sgt.forEach(t),HKo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TO=n(hJ,"A",{href:!0});var lgt=s(TO);UKo=r(lgt,"from_pretrained()"),lgt.forEach(t),JKo=r(hJ," to load the model weights."),hJ.forEach(t),YKo=i(Dl),rpe=n(Dl,"P",{});var igt=s(rpe);KKo=r(igt,"Examples:"),igt.forEach(t),ZKo=i(Dl),m(ny.$$.fragment,Dl),Dl.forEach(t),eZo=i(jl),no=n(jl,"DIV",{class:!0});var ia=s(no);m(sy.$$.fragment,ia),oZo=i(ia),tpe=n(ia,"P",{});var dgt=s(tpe);rZo=r(dgt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),dgt.forEach(t),tZo=i(ia),_n=n(ia,"P",{});var rw=s(_n);aZo=r(rw,"The model class to instantiate is selected based on the "),ape=n(rw,"CODE",{});var cgt=s(ape);nZo=r(cgt,"model_type"),cgt.forEach(t),sZo=r(rw,` property of the config object (either
passed as an argument or loaded from `),npe=n(rw,"CODE",{});var fgt=s(npe);lZo=r(fgt,"pretrained_model_name_or_path"),fgt.forEach(t),iZo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),spe=n(rw,"CODE",{});var mgt=s(spe);dZo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),cZo=r(rw,":"),rw.forEach(t),fZo=i(ia),lpe=n(ia,"UL",{});var ggt=s(lpe);LT=n(ggt,"LI",{});var t7e=s(LT);ipe=n(t7e,"STRONG",{});var hgt=s(ipe);mZo=r(hgt,"maskformer"),hgt.forEach(t),gZo=r(t7e," \u2014 "),MO=n(t7e,"A",{href:!0});var pgt=s(MO);hZo=r(pgt,"MaskFormerForInstanceSegmentation"),pgt.forEach(t),pZo=r(t7e," (MaskFormer model)"),t7e.forEach(t),ggt.forEach(t),_Zo=i(ia),xT=n(ia,"P",{});var a7e=s(xT);uZo=r(a7e,"The model is set in evaluation mode by default using "),dpe=n(a7e,"CODE",{});var _gt=s(dpe);bZo=r(_gt,"model.eval()"),_gt.forEach(t),vZo=r(a7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cpe=n(a7e,"CODE",{});var ugt=s(cpe);FZo=r(ugt,"model.train()"),ugt.forEach(t),a7e.forEach(t),TZo=i(ia),fpe=n(ia,"P",{});var bgt=s(fpe);MZo=r(bgt,"Examples:"),bgt.forEach(t),EZo=i(ia),m(ly.$$.fragment,ia),ia.forEach(t),jl.forEach(t),qBe=i(c),hc=n(c,"H2",{class:!0});var W$e=s(hc);kT=n(W$e,"A",{id:!0,class:!0,href:!0});var vgt=s(kT);mpe=n(vgt,"SPAN",{});var Fgt=s(mpe);m(iy.$$.fragment,Fgt),Fgt.forEach(t),vgt.forEach(t),CZo=i(W$e),gpe=n(W$e,"SPAN",{});var Tgt=s(gpe);wZo=r(Tgt,"TFAutoModel"),Tgt.forEach(t),W$e.forEach(t),NBe=i(c),vr=n(c,"DIV",{class:!0});var Gl=s(vr);m(dy.$$.fragment,Gl),AZo=i(Gl),pc=n(Gl,"P",{});var pJ=s(pc);yZo=r(pJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EO=n(pJ,"A",{href:!0});var Mgt=s(EO);LZo=r(Mgt,"from_pretrained()"),Mgt.forEach(t),xZo=r(pJ," class method or the "),CO=n(pJ,"A",{href:!0});var Egt=s(CO);kZo=r(Egt,"from_config()"),Egt.forEach(t),SZo=r(pJ,` class
method.`),pJ.forEach(t),RZo=i(Gl),cy=n(Gl,"P",{});var H$e=s(cy);BZo=r(H$e,"This class cannot be instantiated directly using "),hpe=n(H$e,"CODE",{});var Cgt=s(hpe);PZo=r(Cgt,"__init__()"),Cgt.forEach(t),$Zo=r(H$e," (throws an error)."),H$e.forEach(t),IZo=i(Gl),gt=n(Gl,"DIV",{class:!0});var Ol=s(gt);m(fy.$$.fragment,Ol),qZo=i(Ol),ppe=n(Ol,"P",{});var wgt=s(ppe);NZo=r(wgt,"Instantiates one of the base model classes of the library from a configuration."),wgt.forEach(t),jZo=i(Ol),_c=n(Ol,"P",{});var _J=s(_c);DZo=r(_J,`Note:
Loading a model from its configuration file does `),_pe=n(_J,"STRONG",{});var Agt=s(_pe);GZo=r(Agt,"not"),Agt.forEach(t),OZo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(_J,"A",{href:!0});var ygt=s(wO);VZo=r(ygt,"from_pretrained()"),ygt.forEach(t),XZo=r(_J," to load the model weights."),_J.forEach(t),zZo=i(Ol),upe=n(Ol,"P",{});var Lgt=s(upe);QZo=r(Lgt,"Examples:"),Lgt.forEach(t),WZo=i(Ol),m(my.$$.fragment,Ol),Ol.forEach(t),HZo=i(Gl),ho=n(Gl,"DIV",{class:!0});var pa=s(ho);m(gy.$$.fragment,pa),UZo=i(pa),bpe=n(pa,"P",{});var xgt=s(bpe);JZo=r(xgt,"Instantiate one of the base model classes of the library from a pretrained model."),xgt.forEach(t),YZo=i(pa),un=n(pa,"P",{});var tw=s(un);KZo=r(tw,"The model class to instantiate is selected based on the "),vpe=n(tw,"CODE",{});var kgt=s(vpe);ZZo=r(kgt,"model_type"),kgt.forEach(t),eer=r(tw,` property of the config object (either
passed as an argument or loaded from `),Fpe=n(tw,"CODE",{});var Sgt=s(Fpe);oer=r(Sgt,"pretrained_model_name_or_path"),Sgt.forEach(t),rer=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tpe=n(tw,"CODE",{});var Rgt=s(Tpe);ter=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),aer=r(tw,":"),tw.forEach(t),ner=i(pa),x=n(pa,"UL",{});var k=s(x);ST=n(k,"LI",{});var n7e=s(ST);Mpe=n(n7e,"STRONG",{});var Bgt=s(Mpe);ser=r(Bgt,"albert"),Bgt.forEach(t),ler=r(n7e," \u2014 "),AO=n(n7e,"A",{href:!0});var Pgt=s(AO);ier=r(Pgt,"TFAlbertModel"),Pgt.forEach(t),der=r(n7e," (ALBERT model)"),n7e.forEach(t),cer=i(k),RT=n(k,"LI",{});var s7e=s(RT);Epe=n(s7e,"STRONG",{});var $gt=s(Epe);fer=r($gt,"bart"),$gt.forEach(t),mer=r(s7e," \u2014 "),yO=n(s7e,"A",{href:!0});var Igt=s(yO);ger=r(Igt,"TFBartModel"),Igt.forEach(t),her=r(s7e," (BART model)"),s7e.forEach(t),per=i(k),BT=n(k,"LI",{});var l7e=s(BT);Cpe=n(l7e,"STRONG",{});var qgt=s(Cpe);_er=r(qgt,"bert"),qgt.forEach(t),uer=r(l7e," \u2014 "),LO=n(l7e,"A",{href:!0});var Ngt=s(LO);ber=r(Ngt,"TFBertModel"),Ngt.forEach(t),ver=r(l7e," (BERT model)"),l7e.forEach(t),Fer=i(k),PT=n(k,"LI",{});var i7e=s(PT);wpe=n(i7e,"STRONG",{});var jgt=s(wpe);Ter=r(jgt,"blenderbot"),jgt.forEach(t),Mer=r(i7e," \u2014 "),xO=n(i7e,"A",{href:!0});var Dgt=s(xO);Eer=r(Dgt,"TFBlenderbotModel"),Dgt.forEach(t),Cer=r(i7e," (Blenderbot model)"),i7e.forEach(t),wer=i(k),$T=n(k,"LI",{});var d7e=s($T);Ape=n(d7e,"STRONG",{});var Ggt=s(Ape);Aer=r(Ggt,"blenderbot-small"),Ggt.forEach(t),yer=r(d7e," \u2014 "),kO=n(d7e,"A",{href:!0});var Ogt=s(kO);Ler=r(Ogt,"TFBlenderbotSmallModel"),Ogt.forEach(t),xer=r(d7e," (BlenderbotSmall model)"),d7e.forEach(t),ker=i(k),IT=n(k,"LI",{});var c7e=s(IT);ype=n(c7e,"STRONG",{});var Vgt=s(ype);Ser=r(Vgt,"camembert"),Vgt.forEach(t),Rer=r(c7e," \u2014 "),SO=n(c7e,"A",{href:!0});var Xgt=s(SO);Ber=r(Xgt,"TFCamembertModel"),Xgt.forEach(t),Per=r(c7e," (CamemBERT model)"),c7e.forEach(t),$er=i(k),qT=n(k,"LI",{});var f7e=s(qT);Lpe=n(f7e,"STRONG",{});var zgt=s(Lpe);Ier=r(zgt,"clip"),zgt.forEach(t),qer=r(f7e," \u2014 "),RO=n(f7e,"A",{href:!0});var Qgt=s(RO);Ner=r(Qgt,"TFCLIPModel"),Qgt.forEach(t),jer=r(f7e," (CLIP model)"),f7e.forEach(t),Der=i(k),NT=n(k,"LI",{});var m7e=s(NT);xpe=n(m7e,"STRONG",{});var Wgt=s(xpe);Ger=r(Wgt,"convbert"),Wgt.forEach(t),Oer=r(m7e," \u2014 "),BO=n(m7e,"A",{href:!0});var Hgt=s(BO);Ver=r(Hgt,"TFConvBertModel"),Hgt.forEach(t),Xer=r(m7e," (ConvBERT model)"),m7e.forEach(t),zer=i(k),jT=n(k,"LI",{});var g7e=s(jT);kpe=n(g7e,"STRONG",{});var Ugt=s(kpe);Qer=r(Ugt,"convnext"),Ugt.forEach(t),Wer=r(g7e," \u2014 "),PO=n(g7e,"A",{href:!0});var Jgt=s(PO);Her=r(Jgt,"TFConvNextModel"),Jgt.forEach(t),Uer=r(g7e," (ConvNext model)"),g7e.forEach(t),Jer=i(k),DT=n(k,"LI",{});var h7e=s(DT);Spe=n(h7e,"STRONG",{});var Ygt=s(Spe);Yer=r(Ygt,"ctrl"),Ygt.forEach(t),Ker=r(h7e," \u2014 "),$O=n(h7e,"A",{href:!0});var Kgt=s($O);Zer=r(Kgt,"TFCTRLModel"),Kgt.forEach(t),eor=r(h7e," (CTRL model)"),h7e.forEach(t),oor=i(k),GT=n(k,"LI",{});var p7e=s(GT);Rpe=n(p7e,"STRONG",{});var Zgt=s(Rpe);ror=r(Zgt,"deberta"),Zgt.forEach(t),tor=r(p7e," \u2014 "),IO=n(p7e,"A",{href:!0});var eht=s(IO);aor=r(eht,"TFDebertaModel"),eht.forEach(t),nor=r(p7e," (DeBERTa model)"),p7e.forEach(t),sor=i(k),OT=n(k,"LI",{});var _7e=s(OT);Bpe=n(_7e,"STRONG",{});var oht=s(Bpe);lor=r(oht,"deberta-v2"),oht.forEach(t),ior=r(_7e," \u2014 "),qO=n(_7e,"A",{href:!0});var rht=s(qO);dor=r(rht,"TFDebertaV2Model"),rht.forEach(t),cor=r(_7e," (DeBERTa-v2 model)"),_7e.forEach(t),mor=i(k),VT=n(k,"LI",{});var u7e=s(VT);Ppe=n(u7e,"STRONG",{});var tht=s(Ppe);gor=r(tht,"distilbert"),tht.forEach(t),hor=r(u7e," \u2014 "),NO=n(u7e,"A",{href:!0});var aht=s(NO);por=r(aht,"TFDistilBertModel"),aht.forEach(t),_or=r(u7e," (DistilBERT model)"),u7e.forEach(t),uor=i(k),XT=n(k,"LI",{});var b7e=s(XT);$pe=n(b7e,"STRONG",{});var nht=s($pe);bor=r(nht,"dpr"),nht.forEach(t),vor=r(b7e," \u2014 "),jO=n(b7e,"A",{href:!0});var sht=s(jO);For=r(sht,"TFDPRQuestionEncoder"),sht.forEach(t),Tor=r(b7e," (DPR model)"),b7e.forEach(t),Mor=i(k),zT=n(k,"LI",{});var v7e=s(zT);Ipe=n(v7e,"STRONG",{});var lht=s(Ipe);Eor=r(lht,"electra"),lht.forEach(t),Cor=r(v7e," \u2014 "),DO=n(v7e,"A",{href:!0});var iht=s(DO);wor=r(iht,"TFElectraModel"),iht.forEach(t),Aor=r(v7e," (ELECTRA model)"),v7e.forEach(t),yor=i(k),QT=n(k,"LI",{});var F7e=s(QT);qpe=n(F7e,"STRONG",{});var dht=s(qpe);Lor=r(dht,"flaubert"),dht.forEach(t),xor=r(F7e," \u2014 "),GO=n(F7e,"A",{href:!0});var cht=s(GO);kor=r(cht,"TFFlaubertModel"),cht.forEach(t),Sor=r(F7e," (FlauBERT model)"),F7e.forEach(t),Ror=i(k),Vs=n(k,"LI",{});var F9=s(Vs);Npe=n(F9,"STRONG",{});var fht=s(Npe);Bor=r(fht,"funnel"),fht.forEach(t),Por=r(F9," \u2014 "),OO=n(F9,"A",{href:!0});var mht=s(OO);$or=r(mht,"TFFunnelModel"),mht.forEach(t),Ior=r(F9," or "),VO=n(F9,"A",{href:!0});var ght=s(VO);qor=r(ght,"TFFunnelBaseModel"),ght.forEach(t),Nor=r(F9," (Funnel Transformer model)"),F9.forEach(t),jor=i(k),WT=n(k,"LI",{});var T7e=s(WT);jpe=n(T7e,"STRONG",{});var hht=s(jpe);Dor=r(hht,"gpt2"),hht.forEach(t),Gor=r(T7e," \u2014 "),XO=n(T7e,"A",{href:!0});var pht=s(XO);Oor=r(pht,"TFGPT2Model"),pht.forEach(t),Vor=r(T7e," (OpenAI GPT-2 model)"),T7e.forEach(t),Xor=i(k),HT=n(k,"LI",{});var M7e=s(HT);Dpe=n(M7e,"STRONG",{});var _ht=s(Dpe);zor=r(_ht,"gptj"),_ht.forEach(t),Qor=r(M7e," \u2014 "),zO=n(M7e,"A",{href:!0});var uht=s(zO);Wor=r(uht,"TFGPTJModel"),uht.forEach(t),Hor=r(M7e," (GPT-J model)"),M7e.forEach(t),Uor=i(k),UT=n(k,"LI",{});var E7e=s(UT);Gpe=n(E7e,"STRONG",{});var bht=s(Gpe);Jor=r(bht,"hubert"),bht.forEach(t),Yor=r(E7e," \u2014 "),QO=n(E7e,"A",{href:!0});var vht=s(QO);Kor=r(vht,"TFHubertModel"),vht.forEach(t),Zor=r(E7e," (Hubert model)"),E7e.forEach(t),err=i(k),JT=n(k,"LI",{});var C7e=s(JT);Ope=n(C7e,"STRONG",{});var Fht=s(Ope);orr=r(Fht,"layoutlm"),Fht.forEach(t),rrr=r(C7e," \u2014 "),WO=n(C7e,"A",{href:!0});var Tht=s(WO);trr=r(Tht,"TFLayoutLMModel"),Tht.forEach(t),arr=r(C7e," (LayoutLM model)"),C7e.forEach(t),nrr=i(k),YT=n(k,"LI",{});var w7e=s(YT);Vpe=n(w7e,"STRONG",{});var Mht=s(Vpe);srr=r(Mht,"led"),Mht.forEach(t),lrr=r(w7e," \u2014 "),HO=n(w7e,"A",{href:!0});var Eht=s(HO);irr=r(Eht,"TFLEDModel"),Eht.forEach(t),drr=r(w7e," (LED model)"),w7e.forEach(t),crr=i(k),KT=n(k,"LI",{});var A7e=s(KT);Xpe=n(A7e,"STRONG",{});var Cht=s(Xpe);frr=r(Cht,"longformer"),Cht.forEach(t),mrr=r(A7e," \u2014 "),UO=n(A7e,"A",{href:!0});var wht=s(UO);grr=r(wht,"TFLongformerModel"),wht.forEach(t),hrr=r(A7e," (Longformer model)"),A7e.forEach(t),prr=i(k),ZT=n(k,"LI",{});var y7e=s(ZT);zpe=n(y7e,"STRONG",{});var Aht=s(zpe);_rr=r(Aht,"lxmert"),Aht.forEach(t),urr=r(y7e," \u2014 "),JO=n(y7e,"A",{href:!0});var yht=s(JO);brr=r(yht,"TFLxmertModel"),yht.forEach(t),vrr=r(y7e," (LXMERT model)"),y7e.forEach(t),Frr=i(k),eM=n(k,"LI",{});var L7e=s(eM);Qpe=n(L7e,"STRONG",{});var Lht=s(Qpe);Trr=r(Lht,"marian"),Lht.forEach(t),Mrr=r(L7e," \u2014 "),YO=n(L7e,"A",{href:!0});var xht=s(YO);Err=r(xht,"TFMarianModel"),xht.forEach(t),Crr=r(L7e," (Marian model)"),L7e.forEach(t),wrr=i(k),oM=n(k,"LI",{});var x7e=s(oM);Wpe=n(x7e,"STRONG",{});var kht=s(Wpe);Arr=r(kht,"mbart"),kht.forEach(t),yrr=r(x7e," \u2014 "),KO=n(x7e,"A",{href:!0});var Sht=s(KO);Lrr=r(Sht,"TFMBartModel"),Sht.forEach(t),xrr=r(x7e," (mBART model)"),x7e.forEach(t),krr=i(k),rM=n(k,"LI",{});var k7e=s(rM);Hpe=n(k7e,"STRONG",{});var Rht=s(Hpe);Srr=r(Rht,"mobilebert"),Rht.forEach(t),Rrr=r(k7e," \u2014 "),ZO=n(k7e,"A",{href:!0});var Bht=s(ZO);Brr=r(Bht,"TFMobileBertModel"),Bht.forEach(t),Prr=r(k7e," (MobileBERT model)"),k7e.forEach(t),$rr=i(k),tM=n(k,"LI",{});var S7e=s(tM);Upe=n(S7e,"STRONG",{});var Pht=s(Upe);Irr=r(Pht,"mpnet"),Pht.forEach(t),qrr=r(S7e," \u2014 "),eV=n(S7e,"A",{href:!0});var $ht=s(eV);Nrr=r($ht,"TFMPNetModel"),$ht.forEach(t),jrr=r(S7e," (MPNet model)"),S7e.forEach(t),Drr=i(k),aM=n(k,"LI",{});var R7e=s(aM);Jpe=n(R7e,"STRONG",{});var Iht=s(Jpe);Grr=r(Iht,"mt5"),Iht.forEach(t),Orr=r(R7e," \u2014 "),oV=n(R7e,"A",{href:!0});var qht=s(oV);Vrr=r(qht,"TFMT5Model"),qht.forEach(t),Xrr=r(R7e," (mT5 model)"),R7e.forEach(t),zrr=i(k),nM=n(k,"LI",{});var B7e=s(nM);Ype=n(B7e,"STRONG",{});var Nht=s(Ype);Qrr=r(Nht,"openai-gpt"),Nht.forEach(t),Wrr=r(B7e," \u2014 "),rV=n(B7e,"A",{href:!0});var jht=s(rV);Hrr=r(jht,"TFOpenAIGPTModel"),jht.forEach(t),Urr=r(B7e," (OpenAI GPT model)"),B7e.forEach(t),Jrr=i(k),sM=n(k,"LI",{});var P7e=s(sM);Kpe=n(P7e,"STRONG",{});var Dht=s(Kpe);Yrr=r(Dht,"pegasus"),Dht.forEach(t),Krr=r(P7e," \u2014 "),tV=n(P7e,"A",{href:!0});var Ght=s(tV);Zrr=r(Ght,"TFPegasusModel"),Ght.forEach(t),etr=r(P7e," (Pegasus model)"),P7e.forEach(t),otr=i(k),lM=n(k,"LI",{});var $7e=s(lM);Zpe=n($7e,"STRONG",{});var Oht=s(Zpe);rtr=r(Oht,"rembert"),Oht.forEach(t),ttr=r($7e," \u2014 "),aV=n($7e,"A",{href:!0});var Vht=s(aV);atr=r(Vht,"TFRemBertModel"),Vht.forEach(t),ntr=r($7e," (RemBERT model)"),$7e.forEach(t),str=i(k),iM=n(k,"LI",{});var I7e=s(iM);e_e=n(I7e,"STRONG",{});var Xht=s(e_e);ltr=r(Xht,"roberta"),Xht.forEach(t),itr=r(I7e," \u2014 "),nV=n(I7e,"A",{href:!0});var zht=s(nV);dtr=r(zht,"TFRobertaModel"),zht.forEach(t),ctr=r(I7e," (RoBERTa model)"),I7e.forEach(t),ftr=i(k),dM=n(k,"LI",{});var q7e=s(dM);o_e=n(q7e,"STRONG",{});var Qht=s(o_e);mtr=r(Qht,"roformer"),Qht.forEach(t),gtr=r(q7e," \u2014 "),sV=n(q7e,"A",{href:!0});var Wht=s(sV);htr=r(Wht,"TFRoFormerModel"),Wht.forEach(t),ptr=r(q7e," (RoFormer model)"),q7e.forEach(t),_tr=i(k),cM=n(k,"LI",{});var N7e=s(cM);r_e=n(N7e,"STRONG",{});var Hht=s(r_e);utr=r(Hht,"speech_to_text"),Hht.forEach(t),btr=r(N7e," \u2014 "),lV=n(N7e,"A",{href:!0});var Uht=s(lV);vtr=r(Uht,"TFSpeech2TextModel"),Uht.forEach(t),Ftr=r(N7e," (Speech2Text model)"),N7e.forEach(t),Ttr=i(k),fM=n(k,"LI",{});var j7e=s(fM);t_e=n(j7e,"STRONG",{});var Jht=s(t_e);Mtr=r(Jht,"t5"),Jht.forEach(t),Etr=r(j7e," \u2014 "),iV=n(j7e,"A",{href:!0});var Yht=s(iV);Ctr=r(Yht,"TFT5Model"),Yht.forEach(t),wtr=r(j7e," (T5 model)"),j7e.forEach(t),Atr=i(k),mM=n(k,"LI",{});var D7e=s(mM);a_e=n(D7e,"STRONG",{});var Kht=s(a_e);ytr=r(Kht,"tapas"),Kht.forEach(t),Ltr=r(D7e," \u2014 "),dV=n(D7e,"A",{href:!0});var Zht=s(dV);xtr=r(Zht,"TFTapasModel"),Zht.forEach(t),ktr=r(D7e," (TAPAS model)"),D7e.forEach(t),Str=i(k),gM=n(k,"LI",{});var G7e=s(gM);n_e=n(G7e,"STRONG",{});var ept=s(n_e);Rtr=r(ept,"transfo-xl"),ept.forEach(t),Btr=r(G7e," \u2014 "),cV=n(G7e,"A",{href:!0});var opt=s(cV);Ptr=r(opt,"TFTransfoXLModel"),opt.forEach(t),$tr=r(G7e," (Transformer-XL model)"),G7e.forEach(t),Itr=i(k),hM=n(k,"LI",{});var O7e=s(hM);s_e=n(O7e,"STRONG",{});var rpt=s(s_e);qtr=r(rpt,"vit"),rpt.forEach(t),Ntr=r(O7e," \u2014 "),fV=n(O7e,"A",{href:!0});var tpt=s(fV);jtr=r(tpt,"TFViTModel"),tpt.forEach(t),Dtr=r(O7e," (ViT model)"),O7e.forEach(t),Gtr=i(k),pM=n(k,"LI",{});var V7e=s(pM);l_e=n(V7e,"STRONG",{});var apt=s(l_e);Otr=r(apt,"vit_mae"),apt.forEach(t),Vtr=r(V7e," \u2014 "),mV=n(V7e,"A",{href:!0});var npt=s(mV);Xtr=r(npt,"TFViTMAEModel"),npt.forEach(t),ztr=r(V7e," (ViTMAE model)"),V7e.forEach(t),Qtr=i(k),_M=n(k,"LI",{});var X7e=s(_M);i_e=n(X7e,"STRONG",{});var spt=s(i_e);Wtr=r(spt,"wav2vec2"),spt.forEach(t),Htr=r(X7e," \u2014 "),gV=n(X7e,"A",{href:!0});var lpt=s(gV);Utr=r(lpt,"TFWav2Vec2Model"),lpt.forEach(t),Jtr=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),Ytr=i(k),uM=n(k,"LI",{});var z7e=s(uM);d_e=n(z7e,"STRONG",{});var ipt=s(d_e);Ktr=r(ipt,"xlm"),ipt.forEach(t),Ztr=r(z7e," \u2014 "),hV=n(z7e,"A",{href:!0});var dpt=s(hV);ear=r(dpt,"TFXLMModel"),dpt.forEach(t),oar=r(z7e," (XLM model)"),z7e.forEach(t),rar=i(k),bM=n(k,"LI",{});var Q7e=s(bM);c_e=n(Q7e,"STRONG",{});var cpt=s(c_e);tar=r(cpt,"xlm-roberta"),cpt.forEach(t),aar=r(Q7e," \u2014 "),pV=n(Q7e,"A",{href:!0});var fpt=s(pV);nar=r(fpt,"TFXLMRobertaModel"),fpt.forEach(t),sar=r(Q7e," (XLM-RoBERTa model)"),Q7e.forEach(t),lar=i(k),vM=n(k,"LI",{});var W7e=s(vM);f_e=n(W7e,"STRONG",{});var mpt=s(f_e);iar=r(mpt,"xlnet"),mpt.forEach(t),dar=r(W7e," \u2014 "),_V=n(W7e,"A",{href:!0});var gpt=s(_V);car=r(gpt,"TFXLNetModel"),gpt.forEach(t),far=r(W7e," (XLNet model)"),W7e.forEach(t),k.forEach(t),mar=i(pa),m_e=n(pa,"P",{});var hpt=s(m_e);gar=r(hpt,"Examples:"),hpt.forEach(t),har=i(pa),m(hy.$$.fragment,pa),pa.forEach(t),Gl.forEach(t),jBe=i(c),uc=n(c,"H2",{class:!0});var U$e=s(uc);FM=n(U$e,"A",{id:!0,class:!0,href:!0});var ppt=s(FM);g_e=n(ppt,"SPAN",{});var _pt=s(g_e);m(py.$$.fragment,_pt),_pt.forEach(t),ppt.forEach(t),par=i(U$e),h_e=n(U$e,"SPAN",{});var upt=s(h_e);_ar=r(upt,"TFAutoModelForPreTraining"),upt.forEach(t),U$e.forEach(t),DBe=i(c),Fr=n(c,"DIV",{class:!0});var Vl=s(Fr);m(_y.$$.fragment,Vl),uar=i(Vl),bc=n(Vl,"P",{});var uJ=s(bc);bar=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uV=n(uJ,"A",{href:!0});var bpt=s(uV);Far=r(bpt,"from_pretrained()"),bpt.forEach(t),Tar=r(uJ," class method or the "),bV=n(uJ,"A",{href:!0});var vpt=s(bV);Mar=r(vpt,"from_config()"),vpt.forEach(t),Ear=r(uJ,` class
method.`),uJ.forEach(t),Car=i(Vl),uy=n(Vl,"P",{});var J$e=s(uy);war=r(J$e,"This class cannot be instantiated directly using "),p_e=n(J$e,"CODE",{});var Fpt=s(p_e);Aar=r(Fpt,"__init__()"),Fpt.forEach(t),yar=r(J$e," (throws an error)."),J$e.forEach(t),Lar=i(Vl),ht=n(Vl,"DIV",{class:!0});var Xl=s(ht);m(by.$$.fragment,Xl),xar=i(Xl),__e=n(Xl,"P",{});var Tpt=s(__e);kar=r(Tpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Tpt.forEach(t),Sar=i(Xl),vc=n(Xl,"P",{});var bJ=s(vc);Rar=r(bJ,`Note:
Loading a model from its configuration file does `),u_e=n(bJ,"STRONG",{});var Mpt=s(u_e);Bar=r(Mpt,"not"),Mpt.forEach(t),Par=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vV=n(bJ,"A",{href:!0});var Ept=s(vV);$ar=r(Ept,"from_pretrained()"),Ept.forEach(t),Iar=r(bJ," to load the model weights."),bJ.forEach(t),qar=i(Xl),b_e=n(Xl,"P",{});var Cpt=s(b_e);Nar=r(Cpt,"Examples:"),Cpt.forEach(t),jar=i(Xl),m(vy.$$.fragment,Xl),Xl.forEach(t),Dar=i(Vl),po=n(Vl,"DIV",{class:!0});var _a=s(po);m(Fy.$$.fragment,_a),Gar=i(_a),v_e=n(_a,"P",{});var wpt=s(v_e);Oar=r(wpt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wpt.forEach(t),Var=i(_a),bn=n(_a,"P",{});var aw=s(bn);Xar=r(aw,"The model class to instantiate is selected based on the "),F_e=n(aw,"CODE",{});var Apt=s(F_e);zar=r(Apt,"model_type"),Apt.forEach(t),Qar=r(aw,` property of the config object (either
passed as an argument or loaded from `),T_e=n(aw,"CODE",{});var ypt=s(T_e);War=r(ypt,"pretrained_model_name_or_path"),ypt.forEach(t),Har=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(aw,"CODE",{});var Lpt=s(M_e);Uar=r(Lpt,"pretrained_model_name_or_path"),Lpt.forEach(t),Jar=r(aw,":"),aw.forEach(t),Yar=i(_a),H=n(_a,"UL",{});var U=s(H);TM=n(U,"LI",{});var H7e=s(TM);E_e=n(H7e,"STRONG",{});var xpt=s(E_e);Kar=r(xpt,"albert"),xpt.forEach(t),Zar=r(H7e," \u2014 "),FV=n(H7e,"A",{href:!0});var kpt=s(FV);enr=r(kpt,"TFAlbertForPreTraining"),kpt.forEach(t),onr=r(H7e," (ALBERT model)"),H7e.forEach(t),rnr=i(U),MM=n(U,"LI",{});var U7e=s(MM);C_e=n(U7e,"STRONG",{});var Spt=s(C_e);tnr=r(Spt,"bart"),Spt.forEach(t),anr=r(U7e," \u2014 "),TV=n(U7e,"A",{href:!0});var Rpt=s(TV);nnr=r(Rpt,"TFBartForConditionalGeneration"),Rpt.forEach(t),snr=r(U7e," (BART model)"),U7e.forEach(t),lnr=i(U),EM=n(U,"LI",{});var J7e=s(EM);w_e=n(J7e,"STRONG",{});var Bpt=s(w_e);inr=r(Bpt,"bert"),Bpt.forEach(t),dnr=r(J7e," \u2014 "),MV=n(J7e,"A",{href:!0});var Ppt=s(MV);cnr=r(Ppt,"TFBertForPreTraining"),Ppt.forEach(t),fnr=r(J7e," (BERT model)"),J7e.forEach(t),mnr=i(U),CM=n(U,"LI",{});var Y7e=s(CM);A_e=n(Y7e,"STRONG",{});var $pt=s(A_e);gnr=r($pt,"camembert"),$pt.forEach(t),hnr=r(Y7e," \u2014 "),EV=n(Y7e,"A",{href:!0});var Ipt=s(EV);pnr=r(Ipt,"TFCamembertForMaskedLM"),Ipt.forEach(t),_nr=r(Y7e," (CamemBERT model)"),Y7e.forEach(t),unr=i(U),wM=n(U,"LI",{});var K7e=s(wM);y_e=n(K7e,"STRONG",{});var qpt=s(y_e);bnr=r(qpt,"ctrl"),qpt.forEach(t),vnr=r(K7e," \u2014 "),CV=n(K7e,"A",{href:!0});var Npt=s(CV);Fnr=r(Npt,"TFCTRLLMHeadModel"),Npt.forEach(t),Tnr=r(K7e," (CTRL model)"),K7e.forEach(t),Mnr=i(U),AM=n(U,"LI",{});var Z7e=s(AM);L_e=n(Z7e,"STRONG",{});var jpt=s(L_e);Enr=r(jpt,"distilbert"),jpt.forEach(t),Cnr=r(Z7e," \u2014 "),wV=n(Z7e,"A",{href:!0});var Dpt=s(wV);wnr=r(Dpt,"TFDistilBertForMaskedLM"),Dpt.forEach(t),Anr=r(Z7e," (DistilBERT model)"),Z7e.forEach(t),ynr=i(U),yM=n(U,"LI",{});var e9e=s(yM);x_e=n(e9e,"STRONG",{});var Gpt=s(x_e);Lnr=r(Gpt,"electra"),Gpt.forEach(t),xnr=r(e9e," \u2014 "),AV=n(e9e,"A",{href:!0});var Opt=s(AV);knr=r(Opt,"TFElectraForPreTraining"),Opt.forEach(t),Snr=r(e9e," (ELECTRA model)"),e9e.forEach(t),Rnr=i(U),LM=n(U,"LI",{});var o9e=s(LM);k_e=n(o9e,"STRONG",{});var Vpt=s(k_e);Bnr=r(Vpt,"flaubert"),Vpt.forEach(t),Pnr=r(o9e," \u2014 "),yV=n(o9e,"A",{href:!0});var Xpt=s(yV);$nr=r(Xpt,"TFFlaubertWithLMHeadModel"),Xpt.forEach(t),Inr=r(o9e," (FlauBERT model)"),o9e.forEach(t),qnr=i(U),xM=n(U,"LI",{});var r9e=s(xM);S_e=n(r9e,"STRONG",{});var zpt=s(S_e);Nnr=r(zpt,"funnel"),zpt.forEach(t),jnr=r(r9e," \u2014 "),LV=n(r9e,"A",{href:!0});var Qpt=s(LV);Dnr=r(Qpt,"TFFunnelForPreTraining"),Qpt.forEach(t),Gnr=r(r9e," (Funnel Transformer model)"),r9e.forEach(t),Onr=i(U),kM=n(U,"LI",{});var t9e=s(kM);R_e=n(t9e,"STRONG",{});var Wpt=s(R_e);Vnr=r(Wpt,"gpt2"),Wpt.forEach(t),Xnr=r(t9e," \u2014 "),xV=n(t9e,"A",{href:!0});var Hpt=s(xV);znr=r(Hpt,"TFGPT2LMHeadModel"),Hpt.forEach(t),Qnr=r(t9e," (OpenAI GPT-2 model)"),t9e.forEach(t),Wnr=i(U),SM=n(U,"LI",{});var a9e=s(SM);B_e=n(a9e,"STRONG",{});var Upt=s(B_e);Hnr=r(Upt,"layoutlm"),Upt.forEach(t),Unr=r(a9e," \u2014 "),kV=n(a9e,"A",{href:!0});var Jpt=s(kV);Jnr=r(Jpt,"TFLayoutLMForMaskedLM"),Jpt.forEach(t),Ynr=r(a9e," (LayoutLM model)"),a9e.forEach(t),Knr=i(U),RM=n(U,"LI",{});var n9e=s(RM);P_e=n(n9e,"STRONG",{});var Ypt=s(P_e);Znr=r(Ypt,"lxmert"),Ypt.forEach(t),esr=r(n9e," \u2014 "),SV=n(n9e,"A",{href:!0});var Kpt=s(SV);osr=r(Kpt,"TFLxmertForPreTraining"),Kpt.forEach(t),rsr=r(n9e," (LXMERT model)"),n9e.forEach(t),tsr=i(U),BM=n(U,"LI",{});var s9e=s(BM);$_e=n(s9e,"STRONG",{});var Zpt=s($_e);asr=r(Zpt,"mobilebert"),Zpt.forEach(t),nsr=r(s9e," \u2014 "),RV=n(s9e,"A",{href:!0});var e_t=s(RV);ssr=r(e_t,"TFMobileBertForPreTraining"),e_t.forEach(t),lsr=r(s9e," (MobileBERT model)"),s9e.forEach(t),isr=i(U),PM=n(U,"LI",{});var l9e=s(PM);I_e=n(l9e,"STRONG",{});var o_t=s(I_e);dsr=r(o_t,"mpnet"),o_t.forEach(t),csr=r(l9e," \u2014 "),BV=n(l9e,"A",{href:!0});var r_t=s(BV);fsr=r(r_t,"TFMPNetForMaskedLM"),r_t.forEach(t),msr=r(l9e," (MPNet model)"),l9e.forEach(t),gsr=i(U),$M=n(U,"LI",{});var i9e=s($M);q_e=n(i9e,"STRONG",{});var t_t=s(q_e);hsr=r(t_t,"openai-gpt"),t_t.forEach(t),psr=r(i9e," \u2014 "),PV=n(i9e,"A",{href:!0});var a_t=s(PV);_sr=r(a_t,"TFOpenAIGPTLMHeadModel"),a_t.forEach(t),usr=r(i9e," (OpenAI GPT model)"),i9e.forEach(t),bsr=i(U),IM=n(U,"LI",{});var d9e=s(IM);N_e=n(d9e,"STRONG",{});var n_t=s(N_e);vsr=r(n_t,"roberta"),n_t.forEach(t),Fsr=r(d9e," \u2014 "),$V=n(d9e,"A",{href:!0});var s_t=s($V);Tsr=r(s_t,"TFRobertaForMaskedLM"),s_t.forEach(t),Msr=r(d9e," (RoBERTa model)"),d9e.forEach(t),Esr=i(U),qM=n(U,"LI",{});var c9e=s(qM);j_e=n(c9e,"STRONG",{});var l_t=s(j_e);Csr=r(l_t,"t5"),l_t.forEach(t),wsr=r(c9e," \u2014 "),IV=n(c9e,"A",{href:!0});var i_t=s(IV);Asr=r(i_t,"TFT5ForConditionalGeneration"),i_t.forEach(t),ysr=r(c9e," (T5 model)"),c9e.forEach(t),Lsr=i(U),NM=n(U,"LI",{});var f9e=s(NM);D_e=n(f9e,"STRONG",{});var d_t=s(D_e);xsr=r(d_t,"tapas"),d_t.forEach(t),ksr=r(f9e," \u2014 "),qV=n(f9e,"A",{href:!0});var c_t=s(qV);Ssr=r(c_t,"TFTapasForMaskedLM"),c_t.forEach(t),Rsr=r(f9e," (TAPAS model)"),f9e.forEach(t),Bsr=i(U),jM=n(U,"LI",{});var m9e=s(jM);G_e=n(m9e,"STRONG",{});var f_t=s(G_e);Psr=r(f_t,"transfo-xl"),f_t.forEach(t),$sr=r(m9e," \u2014 "),NV=n(m9e,"A",{href:!0});var m_t=s(NV);Isr=r(m_t,"TFTransfoXLLMHeadModel"),m_t.forEach(t),qsr=r(m9e," (Transformer-XL model)"),m9e.forEach(t),Nsr=i(U),DM=n(U,"LI",{});var g9e=s(DM);O_e=n(g9e,"STRONG",{});var g_t=s(O_e);jsr=r(g_t,"vit_mae"),g_t.forEach(t),Dsr=r(g9e," \u2014 "),jV=n(g9e,"A",{href:!0});var h_t=s(jV);Gsr=r(h_t,"TFViTMAEForPreTraining"),h_t.forEach(t),Osr=r(g9e," (ViTMAE model)"),g9e.forEach(t),Vsr=i(U),GM=n(U,"LI",{});var h9e=s(GM);V_e=n(h9e,"STRONG",{});var p_t=s(V_e);Xsr=r(p_t,"xlm"),p_t.forEach(t),zsr=r(h9e," \u2014 "),DV=n(h9e,"A",{href:!0});var __t=s(DV);Qsr=r(__t,"TFXLMWithLMHeadModel"),__t.forEach(t),Wsr=r(h9e," (XLM model)"),h9e.forEach(t),Hsr=i(U),OM=n(U,"LI",{});var p9e=s(OM);X_e=n(p9e,"STRONG",{});var u_t=s(X_e);Usr=r(u_t,"xlm-roberta"),u_t.forEach(t),Jsr=r(p9e," \u2014 "),GV=n(p9e,"A",{href:!0});var b_t=s(GV);Ysr=r(b_t,"TFXLMRobertaForMaskedLM"),b_t.forEach(t),Ksr=r(p9e," (XLM-RoBERTa model)"),p9e.forEach(t),Zsr=i(U),VM=n(U,"LI",{});var _9e=s(VM);z_e=n(_9e,"STRONG",{});var v_t=s(z_e);elr=r(v_t,"xlnet"),v_t.forEach(t),olr=r(_9e," \u2014 "),OV=n(_9e,"A",{href:!0});var F_t=s(OV);rlr=r(F_t,"TFXLNetLMHeadModel"),F_t.forEach(t),tlr=r(_9e," (XLNet model)"),_9e.forEach(t),U.forEach(t),alr=i(_a),Q_e=n(_a,"P",{});var T_t=s(Q_e);nlr=r(T_t,"Examples:"),T_t.forEach(t),slr=i(_a),m(Ty.$$.fragment,_a),_a.forEach(t),Vl.forEach(t),GBe=i(c),Fc=n(c,"H2",{class:!0});var Y$e=s(Fc);XM=n(Y$e,"A",{id:!0,class:!0,href:!0});var M_t=s(XM);W_e=n(M_t,"SPAN",{});var E_t=s(W_e);m(My.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),llr=i(Y$e),H_e=n(Y$e,"SPAN",{});var C_t=s(H_e);ilr=r(C_t,"TFAutoModelForCausalLM"),C_t.forEach(t),Y$e.forEach(t),OBe=i(c),Tr=n(c,"DIV",{class:!0});var zl=s(Tr);m(Ey.$$.fragment,zl),dlr=i(zl),Tc=n(zl,"P",{});var vJ=s(Tc);clr=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VV=n(vJ,"A",{href:!0});var w_t=s(VV);flr=r(w_t,"from_pretrained()"),w_t.forEach(t),mlr=r(vJ," class method or the "),XV=n(vJ,"A",{href:!0});var A_t=s(XV);glr=r(A_t,"from_config()"),A_t.forEach(t),hlr=r(vJ,` class
method.`),vJ.forEach(t),plr=i(zl),Cy=n(zl,"P",{});var K$e=s(Cy);_lr=r(K$e,"This class cannot be instantiated directly using "),U_e=n(K$e,"CODE",{});var y_t=s(U_e);ulr=r(y_t,"__init__()"),y_t.forEach(t),blr=r(K$e," (throws an error)."),K$e.forEach(t),vlr=i(zl),pt=n(zl,"DIV",{class:!0});var Ql=s(pt);m(wy.$$.fragment,Ql),Flr=i(Ql),J_e=n(Ql,"P",{});var L_t=s(J_e);Tlr=r(L_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L_t.forEach(t),Mlr=i(Ql),Mc=n(Ql,"P",{});var FJ=s(Mc);Elr=r(FJ,`Note:
Loading a model from its configuration file does `),Y_e=n(FJ,"STRONG",{});var x_t=s(Y_e);Clr=r(x_t,"not"),x_t.forEach(t),wlr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zV=n(FJ,"A",{href:!0});var k_t=s(zV);Alr=r(k_t,"from_pretrained()"),k_t.forEach(t),ylr=r(FJ," to load the model weights."),FJ.forEach(t),Llr=i(Ql),K_e=n(Ql,"P",{});var S_t=s(K_e);xlr=r(S_t,"Examples:"),S_t.forEach(t),klr=i(Ql),m(Ay.$$.fragment,Ql),Ql.forEach(t),Slr=i(zl),_o=n(zl,"DIV",{class:!0});var ua=s(_o);m(yy.$$.fragment,ua),Rlr=i(ua),Z_e=n(ua,"P",{});var R_t=s(Z_e);Blr=r(R_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),R_t.forEach(t),Plr=i(ua),vn=n(ua,"P",{});var nw=s(vn);$lr=r(nw,"The model class to instantiate is selected based on the "),eue=n(nw,"CODE",{});var B_t=s(eue);Ilr=r(B_t,"model_type"),B_t.forEach(t),qlr=r(nw,` property of the config object (either
passed as an argument or loaded from `),oue=n(nw,"CODE",{});var P_t=s(oue);Nlr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),jlr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(nw,"CODE",{});var $_t=s(rue);Dlr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Glr=r(nw,":"),nw.forEach(t),Olr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);zM=n(pe,"LI",{});var u9e=s(zM);tue=n(u9e,"STRONG",{});var I_t=s(tue);Vlr=r(I_t,"bert"),I_t.forEach(t),Xlr=r(u9e," \u2014 "),QV=n(u9e,"A",{href:!0});var q_t=s(QV);zlr=r(q_t,"TFBertLMHeadModel"),q_t.forEach(t),Qlr=r(u9e," (BERT model)"),u9e.forEach(t),Wlr=i(pe),QM=n(pe,"LI",{});var b9e=s(QM);aue=n(b9e,"STRONG",{});var N_t=s(aue);Hlr=r(N_t,"camembert"),N_t.forEach(t),Ulr=r(b9e," \u2014 "),WV=n(b9e,"A",{href:!0});var j_t=s(WV);Jlr=r(j_t,"TFCamembertForCausalLM"),j_t.forEach(t),Ylr=r(b9e," (CamemBERT model)"),b9e.forEach(t),Klr=i(pe),WM=n(pe,"LI",{});var v9e=s(WM);nue=n(v9e,"STRONG",{});var D_t=s(nue);Zlr=r(D_t,"ctrl"),D_t.forEach(t),eir=r(v9e," \u2014 "),HV=n(v9e,"A",{href:!0});var G_t=s(HV);oir=r(G_t,"TFCTRLLMHeadModel"),G_t.forEach(t),rir=r(v9e," (CTRL model)"),v9e.forEach(t),tir=i(pe),HM=n(pe,"LI",{});var F9e=s(HM);sue=n(F9e,"STRONG",{});var O_t=s(sue);air=r(O_t,"gpt2"),O_t.forEach(t),nir=r(F9e," \u2014 "),UV=n(F9e,"A",{href:!0});var V_t=s(UV);sir=r(V_t,"TFGPT2LMHeadModel"),V_t.forEach(t),lir=r(F9e," (OpenAI GPT-2 model)"),F9e.forEach(t),iir=i(pe),UM=n(pe,"LI",{});var T9e=s(UM);lue=n(T9e,"STRONG",{});var X_t=s(lue);dir=r(X_t,"gptj"),X_t.forEach(t),cir=r(T9e," \u2014 "),JV=n(T9e,"A",{href:!0});var z_t=s(JV);fir=r(z_t,"TFGPTJForCausalLM"),z_t.forEach(t),mir=r(T9e," (GPT-J model)"),T9e.forEach(t),gir=i(pe),JM=n(pe,"LI",{});var M9e=s(JM);iue=n(M9e,"STRONG",{});var Q_t=s(iue);hir=r(Q_t,"openai-gpt"),Q_t.forEach(t),pir=r(M9e," \u2014 "),YV=n(M9e,"A",{href:!0});var W_t=s(YV);_ir=r(W_t,"TFOpenAIGPTLMHeadModel"),W_t.forEach(t),uir=r(M9e," (OpenAI GPT model)"),M9e.forEach(t),bir=i(pe),YM=n(pe,"LI",{});var E9e=s(YM);due=n(E9e,"STRONG",{});var H_t=s(due);vir=r(H_t,"rembert"),H_t.forEach(t),Fir=r(E9e," \u2014 "),KV=n(E9e,"A",{href:!0});var U_t=s(KV);Tir=r(U_t,"TFRemBertForCausalLM"),U_t.forEach(t),Mir=r(E9e," (RemBERT model)"),E9e.forEach(t),Eir=i(pe),KM=n(pe,"LI",{});var C9e=s(KM);cue=n(C9e,"STRONG",{});var J_t=s(cue);Cir=r(J_t,"roberta"),J_t.forEach(t),wir=r(C9e," \u2014 "),ZV=n(C9e,"A",{href:!0});var Y_t=s(ZV);Air=r(Y_t,"TFRobertaForCausalLM"),Y_t.forEach(t),yir=r(C9e," (RoBERTa model)"),C9e.forEach(t),Lir=i(pe),ZM=n(pe,"LI",{});var w9e=s(ZM);fue=n(w9e,"STRONG",{});var K_t=s(fue);xir=r(K_t,"roformer"),K_t.forEach(t),kir=r(w9e," \u2014 "),eX=n(w9e,"A",{href:!0});var Z_t=s(eX);Sir=r(Z_t,"TFRoFormerForCausalLM"),Z_t.forEach(t),Rir=r(w9e," (RoFormer model)"),w9e.forEach(t),Bir=i(pe),e4=n(pe,"LI",{});var A9e=s(e4);mue=n(A9e,"STRONG",{});var eut=s(mue);Pir=r(eut,"transfo-xl"),eut.forEach(t),$ir=r(A9e," \u2014 "),oX=n(A9e,"A",{href:!0});var out=s(oX);Iir=r(out,"TFTransfoXLLMHeadModel"),out.forEach(t),qir=r(A9e," (Transformer-XL model)"),A9e.forEach(t),Nir=i(pe),o4=n(pe,"LI",{});var y9e=s(o4);gue=n(y9e,"STRONG",{});var rut=s(gue);jir=r(rut,"xlm"),rut.forEach(t),Dir=r(y9e," \u2014 "),rX=n(y9e,"A",{href:!0});var tut=s(rX);Gir=r(tut,"TFXLMWithLMHeadModel"),tut.forEach(t),Oir=r(y9e," (XLM model)"),y9e.forEach(t),Vir=i(pe),r4=n(pe,"LI",{});var L9e=s(r4);hue=n(L9e,"STRONG",{});var aut=s(hue);Xir=r(aut,"xlnet"),aut.forEach(t),zir=r(L9e," \u2014 "),tX=n(L9e,"A",{href:!0});var nut=s(tX);Qir=r(nut,"TFXLNetLMHeadModel"),nut.forEach(t),Wir=r(L9e," (XLNet model)"),L9e.forEach(t),pe.forEach(t),Hir=i(ua),pue=n(ua,"P",{});var sut=s(pue);Uir=r(sut,"Examples:"),sut.forEach(t),Jir=i(ua),m(Ly.$$.fragment,ua),ua.forEach(t),zl.forEach(t),VBe=i(c),Ec=n(c,"H2",{class:!0});var Z$e=s(Ec);t4=n(Z$e,"A",{id:!0,class:!0,href:!0});var lut=s(t4);_ue=n(lut,"SPAN",{});var iut=s(_ue);m(xy.$$.fragment,iut),iut.forEach(t),lut.forEach(t),Yir=i(Z$e),uue=n(Z$e,"SPAN",{});var dut=s(uue);Kir=r(dut,"TFAutoModelForImageClassification"),dut.forEach(t),Z$e.forEach(t),XBe=i(c),Mr=n(c,"DIV",{class:!0});var Wl=s(Mr);m(ky.$$.fragment,Wl),Zir=i(Wl),Cc=n(Wl,"P",{});var TJ=s(Cc);edr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aX=n(TJ,"A",{href:!0});var cut=s(aX);odr=r(cut,"from_pretrained()"),cut.forEach(t),rdr=r(TJ," class method or the "),nX=n(TJ,"A",{href:!0});var fut=s(nX);tdr=r(fut,"from_config()"),fut.forEach(t),adr=r(TJ,` class
method.`),TJ.forEach(t),ndr=i(Wl),Sy=n(Wl,"P",{});var eIe=s(Sy);sdr=r(eIe,"This class cannot be instantiated directly using "),bue=n(eIe,"CODE",{});var mut=s(bue);ldr=r(mut,"__init__()"),mut.forEach(t),idr=r(eIe," (throws an error)."),eIe.forEach(t),ddr=i(Wl),_t=n(Wl,"DIV",{class:!0});var Hl=s(_t);m(Ry.$$.fragment,Hl),cdr=i(Hl),vue=n(Hl,"P",{});var gut=s(vue);fdr=r(gut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gut.forEach(t),mdr=i(Hl),wc=n(Hl,"P",{});var MJ=s(wc);gdr=r(MJ,`Note:
Loading a model from its configuration file does `),Fue=n(MJ,"STRONG",{});var hut=s(Fue);hdr=r(hut,"not"),hut.forEach(t),pdr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(MJ,"A",{href:!0});var put=s(sX);_dr=r(put,"from_pretrained()"),put.forEach(t),udr=r(MJ," to load the model weights."),MJ.forEach(t),bdr=i(Hl),Tue=n(Hl,"P",{});var _ut=s(Tue);vdr=r(_ut,"Examples:"),_ut.forEach(t),Fdr=i(Hl),m(By.$$.fragment,Hl),Hl.forEach(t),Tdr=i(Wl),uo=n(Wl,"DIV",{class:!0});var ba=s(uo);m(Py.$$.fragment,ba),Mdr=i(ba),Mue=n(ba,"P",{});var uut=s(Mue);Edr=r(uut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uut.forEach(t),Cdr=i(ba),Fn=n(ba,"P",{});var sw=s(Fn);wdr=r(sw,"The model class to instantiate is selected based on the "),Eue=n(sw,"CODE",{});var but=s(Eue);Adr=r(but,"model_type"),but.forEach(t),ydr=r(sw,` property of the config object (either
passed as an argument or loaded from `),Cue=n(sw,"CODE",{});var vut=s(Cue);Ldr=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),xdr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wue=n(sw,"CODE",{});var Fut=s(wue);kdr=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),Sdr=r(sw,":"),sw.forEach(t),Rdr=i(ba),$y=n(ba,"UL",{});var oIe=s($y);a4=n(oIe,"LI",{});var x9e=s(a4);Aue=n(x9e,"STRONG",{});var Tut=s(Aue);Bdr=r(Tut,"convnext"),Tut.forEach(t),Pdr=r(x9e," \u2014 "),lX=n(x9e,"A",{href:!0});var Mut=s(lX);$dr=r(Mut,"TFConvNextForImageClassification"),Mut.forEach(t),Idr=r(x9e," (ConvNext model)"),x9e.forEach(t),qdr=i(oIe),n4=n(oIe,"LI",{});var k9e=s(n4);yue=n(k9e,"STRONG",{});var Eut=s(yue);Ndr=r(Eut,"vit"),Eut.forEach(t),jdr=r(k9e," \u2014 "),iX=n(k9e,"A",{href:!0});var Cut=s(iX);Ddr=r(Cut,"TFViTForImageClassification"),Cut.forEach(t),Gdr=r(k9e," (ViT model)"),k9e.forEach(t),oIe.forEach(t),Odr=i(ba),Lue=n(ba,"P",{});var wut=s(Lue);Vdr=r(wut,"Examples:"),wut.forEach(t),Xdr=i(ba),m(Iy.$$.fragment,ba),ba.forEach(t),Wl.forEach(t),zBe=i(c),Ac=n(c,"H2",{class:!0});var rIe=s(Ac);s4=n(rIe,"A",{id:!0,class:!0,href:!0});var Aut=s(s4);xue=n(Aut,"SPAN",{});var yut=s(xue);m(qy.$$.fragment,yut),yut.forEach(t),Aut.forEach(t),zdr=i(rIe),kue=n(rIe,"SPAN",{});var Lut=s(kue);Qdr=r(Lut,"TFAutoModelForMaskedLM"),Lut.forEach(t),rIe.forEach(t),QBe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(Ny.$$.fragment,Ul),Wdr=i(Ul),yc=n(Ul,"P",{});var EJ=s(yc);Hdr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dX=n(EJ,"A",{href:!0});var xut=s(dX);Udr=r(xut,"from_pretrained()"),xut.forEach(t),Jdr=r(EJ," class method or the "),cX=n(EJ,"A",{href:!0});var kut=s(cX);Ydr=r(kut,"from_config()"),kut.forEach(t),Kdr=r(EJ,` class
method.`),EJ.forEach(t),Zdr=i(Ul),jy=n(Ul,"P",{});var tIe=s(jy);ecr=r(tIe,"This class cannot be instantiated directly using "),Sue=n(tIe,"CODE",{});var Sut=s(Sue);ocr=r(Sut,"__init__()"),Sut.forEach(t),rcr=r(tIe," (throws an error)."),tIe.forEach(t),tcr=i(Ul),ut=n(Ul,"DIV",{class:!0});var Jl=s(ut);m(Dy.$$.fragment,Jl),acr=i(Jl),Rue=n(Jl,"P",{});var Rut=s(Rue);ncr=r(Rut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Rut.forEach(t),scr=i(Jl),Lc=n(Jl,"P",{});var CJ=s(Lc);lcr=r(CJ,`Note:
Loading a model from its configuration file does `),Bue=n(CJ,"STRONG",{});var But=s(Bue);icr=r(But,"not"),But.forEach(t),dcr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fX=n(CJ,"A",{href:!0});var Put=s(fX);ccr=r(Put,"from_pretrained()"),Put.forEach(t),fcr=r(CJ," to load the model weights."),CJ.forEach(t),mcr=i(Jl),Pue=n(Jl,"P",{});var $ut=s(Pue);gcr=r($ut,"Examples:"),$ut.forEach(t),hcr=i(Jl),m(Gy.$$.fragment,Jl),Jl.forEach(t),pcr=i(Ul),bo=n(Ul,"DIV",{class:!0});var va=s(bo);m(Oy.$$.fragment,va),_cr=i(va),$ue=n(va,"P",{});var Iut=s($ue);ucr=r(Iut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Iut.forEach(t),bcr=i(va),Tn=n(va,"P",{});var lw=s(Tn);vcr=r(lw,"The model class to instantiate is selected based on the "),Iue=n(lw,"CODE",{});var qut=s(Iue);Fcr=r(qut,"model_type"),qut.forEach(t),Tcr=r(lw,` property of the config object (either
passed as an argument or loaded from `),que=n(lw,"CODE",{});var Nut=s(que);Mcr=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),Ecr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(lw,"CODE",{});var jut=s(Nue);Ccr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),wcr=r(lw,":"),lw.forEach(t),Acr=i(va),J=n(va,"UL",{});var oe=s(J);l4=n(oe,"LI",{});var S9e=s(l4);jue=n(S9e,"STRONG",{});var Dut=s(jue);ycr=r(Dut,"albert"),Dut.forEach(t),Lcr=r(S9e," \u2014 "),mX=n(S9e,"A",{href:!0});var Gut=s(mX);xcr=r(Gut,"TFAlbertForMaskedLM"),Gut.forEach(t),kcr=r(S9e," (ALBERT model)"),S9e.forEach(t),Scr=i(oe),i4=n(oe,"LI",{});var R9e=s(i4);Due=n(R9e,"STRONG",{});var Out=s(Due);Rcr=r(Out,"bert"),Out.forEach(t),Bcr=r(R9e," \u2014 "),gX=n(R9e,"A",{href:!0});var Vut=s(gX);Pcr=r(Vut,"TFBertForMaskedLM"),Vut.forEach(t),$cr=r(R9e," (BERT model)"),R9e.forEach(t),Icr=i(oe),d4=n(oe,"LI",{});var B9e=s(d4);Gue=n(B9e,"STRONG",{});var Xut=s(Gue);qcr=r(Xut,"camembert"),Xut.forEach(t),Ncr=r(B9e," \u2014 "),hX=n(B9e,"A",{href:!0});var zut=s(hX);jcr=r(zut,"TFCamembertForMaskedLM"),zut.forEach(t),Dcr=r(B9e," (CamemBERT model)"),B9e.forEach(t),Gcr=i(oe),c4=n(oe,"LI",{});var P9e=s(c4);Oue=n(P9e,"STRONG",{});var Qut=s(Oue);Ocr=r(Qut,"convbert"),Qut.forEach(t),Vcr=r(P9e," \u2014 "),pX=n(P9e,"A",{href:!0});var Wut=s(pX);Xcr=r(Wut,"TFConvBertForMaskedLM"),Wut.forEach(t),zcr=r(P9e," (ConvBERT model)"),P9e.forEach(t),Qcr=i(oe),f4=n(oe,"LI",{});var $9e=s(f4);Vue=n($9e,"STRONG",{});var Hut=s(Vue);Wcr=r(Hut,"deberta"),Hut.forEach(t),Hcr=r($9e," \u2014 "),_X=n($9e,"A",{href:!0});var Uut=s(_X);Ucr=r(Uut,"TFDebertaForMaskedLM"),Uut.forEach(t),Jcr=r($9e," (DeBERTa model)"),$9e.forEach(t),Ycr=i(oe),m4=n(oe,"LI",{});var I9e=s(m4);Xue=n(I9e,"STRONG",{});var Jut=s(Xue);Kcr=r(Jut,"deberta-v2"),Jut.forEach(t),Zcr=r(I9e," \u2014 "),uX=n(I9e,"A",{href:!0});var Yut=s(uX);efr=r(Yut,"TFDebertaV2ForMaskedLM"),Yut.forEach(t),ofr=r(I9e," (DeBERTa-v2 model)"),I9e.forEach(t),rfr=i(oe),g4=n(oe,"LI",{});var q9e=s(g4);zue=n(q9e,"STRONG",{});var Kut=s(zue);tfr=r(Kut,"distilbert"),Kut.forEach(t),afr=r(q9e," \u2014 "),bX=n(q9e,"A",{href:!0});var Zut=s(bX);nfr=r(Zut,"TFDistilBertForMaskedLM"),Zut.forEach(t),sfr=r(q9e," (DistilBERT model)"),q9e.forEach(t),lfr=i(oe),h4=n(oe,"LI",{});var N9e=s(h4);Que=n(N9e,"STRONG",{});var e1t=s(Que);ifr=r(e1t,"electra"),e1t.forEach(t),dfr=r(N9e," \u2014 "),vX=n(N9e,"A",{href:!0});var o1t=s(vX);cfr=r(o1t,"TFElectraForMaskedLM"),o1t.forEach(t),ffr=r(N9e," (ELECTRA model)"),N9e.forEach(t),mfr=i(oe),p4=n(oe,"LI",{});var j9e=s(p4);Wue=n(j9e,"STRONG",{});var r1t=s(Wue);gfr=r(r1t,"flaubert"),r1t.forEach(t),hfr=r(j9e," \u2014 "),FX=n(j9e,"A",{href:!0});var t1t=s(FX);pfr=r(t1t,"TFFlaubertWithLMHeadModel"),t1t.forEach(t),_fr=r(j9e," (FlauBERT model)"),j9e.forEach(t),ufr=i(oe),_4=n(oe,"LI",{});var D9e=s(_4);Hue=n(D9e,"STRONG",{});var a1t=s(Hue);bfr=r(a1t,"funnel"),a1t.forEach(t),vfr=r(D9e," \u2014 "),TX=n(D9e,"A",{href:!0});var n1t=s(TX);Ffr=r(n1t,"TFFunnelForMaskedLM"),n1t.forEach(t),Tfr=r(D9e," (Funnel Transformer model)"),D9e.forEach(t),Mfr=i(oe),u4=n(oe,"LI",{});var G9e=s(u4);Uue=n(G9e,"STRONG",{});var s1t=s(Uue);Efr=r(s1t,"layoutlm"),s1t.forEach(t),Cfr=r(G9e," \u2014 "),MX=n(G9e,"A",{href:!0});var l1t=s(MX);wfr=r(l1t,"TFLayoutLMForMaskedLM"),l1t.forEach(t),Afr=r(G9e," (LayoutLM model)"),G9e.forEach(t),yfr=i(oe),b4=n(oe,"LI",{});var O9e=s(b4);Jue=n(O9e,"STRONG",{});var i1t=s(Jue);Lfr=r(i1t,"longformer"),i1t.forEach(t),xfr=r(O9e," \u2014 "),EX=n(O9e,"A",{href:!0});var d1t=s(EX);kfr=r(d1t,"TFLongformerForMaskedLM"),d1t.forEach(t),Sfr=r(O9e," (Longformer model)"),O9e.forEach(t),Rfr=i(oe),v4=n(oe,"LI",{});var V9e=s(v4);Yue=n(V9e,"STRONG",{});var c1t=s(Yue);Bfr=r(c1t,"mobilebert"),c1t.forEach(t),Pfr=r(V9e," \u2014 "),CX=n(V9e,"A",{href:!0});var f1t=s(CX);$fr=r(f1t,"TFMobileBertForMaskedLM"),f1t.forEach(t),Ifr=r(V9e," (MobileBERT model)"),V9e.forEach(t),qfr=i(oe),F4=n(oe,"LI",{});var X9e=s(F4);Kue=n(X9e,"STRONG",{});var m1t=s(Kue);Nfr=r(m1t,"mpnet"),m1t.forEach(t),jfr=r(X9e," \u2014 "),wX=n(X9e,"A",{href:!0});var g1t=s(wX);Dfr=r(g1t,"TFMPNetForMaskedLM"),g1t.forEach(t),Gfr=r(X9e," (MPNet model)"),X9e.forEach(t),Ofr=i(oe),T4=n(oe,"LI",{});var z9e=s(T4);Zue=n(z9e,"STRONG",{});var h1t=s(Zue);Vfr=r(h1t,"rembert"),h1t.forEach(t),Xfr=r(z9e," \u2014 "),AX=n(z9e,"A",{href:!0});var p1t=s(AX);zfr=r(p1t,"TFRemBertForMaskedLM"),p1t.forEach(t),Qfr=r(z9e," (RemBERT model)"),z9e.forEach(t),Wfr=i(oe),M4=n(oe,"LI",{});var Q9e=s(M4);e1e=n(Q9e,"STRONG",{});var _1t=s(e1e);Hfr=r(_1t,"roberta"),_1t.forEach(t),Ufr=r(Q9e," \u2014 "),yX=n(Q9e,"A",{href:!0});var u1t=s(yX);Jfr=r(u1t,"TFRobertaForMaskedLM"),u1t.forEach(t),Yfr=r(Q9e," (RoBERTa model)"),Q9e.forEach(t),Kfr=i(oe),E4=n(oe,"LI",{});var W9e=s(E4);o1e=n(W9e,"STRONG",{});var b1t=s(o1e);Zfr=r(b1t,"roformer"),b1t.forEach(t),emr=r(W9e," \u2014 "),LX=n(W9e,"A",{href:!0});var v1t=s(LX);omr=r(v1t,"TFRoFormerForMaskedLM"),v1t.forEach(t),rmr=r(W9e," (RoFormer model)"),W9e.forEach(t),tmr=i(oe),C4=n(oe,"LI",{});var H9e=s(C4);r1e=n(H9e,"STRONG",{});var F1t=s(r1e);amr=r(F1t,"tapas"),F1t.forEach(t),nmr=r(H9e," \u2014 "),xX=n(H9e,"A",{href:!0});var T1t=s(xX);smr=r(T1t,"TFTapasForMaskedLM"),T1t.forEach(t),lmr=r(H9e," (TAPAS model)"),H9e.forEach(t),imr=i(oe),w4=n(oe,"LI",{});var U9e=s(w4);t1e=n(U9e,"STRONG",{});var M1t=s(t1e);dmr=r(M1t,"xlm"),M1t.forEach(t),cmr=r(U9e," \u2014 "),kX=n(U9e,"A",{href:!0});var E1t=s(kX);fmr=r(E1t,"TFXLMWithLMHeadModel"),E1t.forEach(t),mmr=r(U9e," (XLM model)"),U9e.forEach(t),gmr=i(oe),A4=n(oe,"LI",{});var J9e=s(A4);a1e=n(J9e,"STRONG",{});var C1t=s(a1e);hmr=r(C1t,"xlm-roberta"),C1t.forEach(t),pmr=r(J9e," \u2014 "),SX=n(J9e,"A",{href:!0});var w1t=s(SX);_mr=r(w1t,"TFXLMRobertaForMaskedLM"),w1t.forEach(t),umr=r(J9e," (XLM-RoBERTa model)"),J9e.forEach(t),oe.forEach(t),bmr=i(va),n1e=n(va,"P",{});var A1t=s(n1e);vmr=r(A1t,"Examples:"),A1t.forEach(t),Fmr=i(va),m(Vy.$$.fragment,va),va.forEach(t),Ul.forEach(t),WBe=i(c),xc=n(c,"H2",{class:!0});var aIe=s(xc);y4=n(aIe,"A",{id:!0,class:!0,href:!0});var y1t=s(y4);s1e=n(y1t,"SPAN",{});var L1t=s(s1e);m(Xy.$$.fragment,L1t),L1t.forEach(t),y1t.forEach(t),Tmr=i(aIe),l1e=n(aIe,"SPAN",{});var x1t=s(l1e);Mmr=r(x1t,"TFAutoModelForSeq2SeqLM"),x1t.forEach(t),aIe.forEach(t),HBe=i(c),Cr=n(c,"DIV",{class:!0});var Yl=s(Cr);m(zy.$$.fragment,Yl),Emr=i(Yl),kc=n(Yl,"P",{});var wJ=s(kc);Cmr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),RX=n(wJ,"A",{href:!0});var k1t=s(RX);wmr=r(k1t,"from_pretrained()"),k1t.forEach(t),Amr=r(wJ," class method or the "),BX=n(wJ,"A",{href:!0});var S1t=s(BX);ymr=r(S1t,"from_config()"),S1t.forEach(t),Lmr=r(wJ,` class
method.`),wJ.forEach(t),xmr=i(Yl),Qy=n(Yl,"P",{});var nIe=s(Qy);kmr=r(nIe,"This class cannot be instantiated directly using "),i1e=n(nIe,"CODE",{});var R1t=s(i1e);Smr=r(R1t,"__init__()"),R1t.forEach(t),Rmr=r(nIe," (throws an error)."),nIe.forEach(t),Bmr=i(Yl),bt=n(Yl,"DIV",{class:!0});var Kl=s(bt);m(Wy.$$.fragment,Kl),Pmr=i(Kl),d1e=n(Kl,"P",{});var B1t=s(d1e);$mr=r(B1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),B1t.forEach(t),Imr=i(Kl),Sc=n(Kl,"P",{});var AJ=s(Sc);qmr=r(AJ,`Note:
Loading a model from its configuration file does `),c1e=n(AJ,"STRONG",{});var P1t=s(c1e);Nmr=r(P1t,"not"),P1t.forEach(t),jmr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(AJ,"A",{href:!0});var $1t=s(PX);Dmr=r($1t,"from_pretrained()"),$1t.forEach(t),Gmr=r(AJ," to load the model weights."),AJ.forEach(t),Omr=i(Kl),f1e=n(Kl,"P",{});var I1t=s(f1e);Vmr=r(I1t,"Examples:"),I1t.forEach(t),Xmr=i(Kl),m(Hy.$$.fragment,Kl),Kl.forEach(t),zmr=i(Yl),vo=n(Yl,"DIV",{class:!0});var Fa=s(vo);m(Uy.$$.fragment,Fa),Qmr=i(Fa),m1e=n(Fa,"P",{});var q1t=s(m1e);Wmr=r(q1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),q1t.forEach(t),Hmr=i(Fa),Mn=n(Fa,"P",{});var iw=s(Mn);Umr=r(iw,"The model class to instantiate is selected based on the "),g1e=n(iw,"CODE",{});var N1t=s(g1e);Jmr=r(N1t,"model_type"),N1t.forEach(t),Ymr=r(iw,` property of the config object (either
passed as an argument or loaded from `),h1e=n(iw,"CODE",{});var j1t=s(h1e);Kmr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),Zmr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p1e=n(iw,"CODE",{});var D1t=s(p1e);egr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),ogr=r(iw,":"),iw.forEach(t),rgr=i(Fa),be=n(Fa,"UL",{});var we=s(be);L4=n(we,"LI",{});var Y9e=s(L4);_1e=n(Y9e,"STRONG",{});var G1t=s(_1e);tgr=r(G1t,"bart"),G1t.forEach(t),agr=r(Y9e," \u2014 "),$X=n(Y9e,"A",{href:!0});var O1t=s($X);ngr=r(O1t,"TFBartForConditionalGeneration"),O1t.forEach(t),sgr=r(Y9e," (BART model)"),Y9e.forEach(t),lgr=i(we),x4=n(we,"LI",{});var K9e=s(x4);u1e=n(K9e,"STRONG",{});var V1t=s(u1e);igr=r(V1t,"blenderbot"),V1t.forEach(t),dgr=r(K9e," \u2014 "),IX=n(K9e,"A",{href:!0});var X1t=s(IX);cgr=r(X1t,"TFBlenderbotForConditionalGeneration"),X1t.forEach(t),fgr=r(K9e," (Blenderbot model)"),K9e.forEach(t),mgr=i(we),k4=n(we,"LI",{});var Z9e=s(k4);b1e=n(Z9e,"STRONG",{});var z1t=s(b1e);ggr=r(z1t,"blenderbot-small"),z1t.forEach(t),hgr=r(Z9e," \u2014 "),qX=n(Z9e,"A",{href:!0});var Q1t=s(qX);pgr=r(Q1t,"TFBlenderbotSmallForConditionalGeneration"),Q1t.forEach(t),_gr=r(Z9e," (BlenderbotSmall model)"),Z9e.forEach(t),ugr=i(we),S4=n(we,"LI",{});var exe=s(S4);v1e=n(exe,"STRONG",{});var W1t=s(v1e);bgr=r(W1t,"encoder-decoder"),W1t.forEach(t),vgr=r(exe," \u2014 "),NX=n(exe,"A",{href:!0});var H1t=s(NX);Fgr=r(H1t,"TFEncoderDecoderModel"),H1t.forEach(t),Tgr=r(exe," (Encoder decoder model)"),exe.forEach(t),Mgr=i(we),R4=n(we,"LI",{});var oxe=s(R4);F1e=n(oxe,"STRONG",{});var U1t=s(F1e);Egr=r(U1t,"led"),U1t.forEach(t),Cgr=r(oxe," \u2014 "),jX=n(oxe,"A",{href:!0});var J1t=s(jX);wgr=r(J1t,"TFLEDForConditionalGeneration"),J1t.forEach(t),Agr=r(oxe," (LED model)"),oxe.forEach(t),ygr=i(we),B4=n(we,"LI",{});var rxe=s(B4);T1e=n(rxe,"STRONG",{});var Y1t=s(T1e);Lgr=r(Y1t,"marian"),Y1t.forEach(t),xgr=r(rxe," \u2014 "),DX=n(rxe,"A",{href:!0});var K1t=s(DX);kgr=r(K1t,"TFMarianMTModel"),K1t.forEach(t),Sgr=r(rxe," (Marian model)"),rxe.forEach(t),Rgr=i(we),P4=n(we,"LI",{});var txe=s(P4);M1e=n(txe,"STRONG",{});var Z1t=s(M1e);Bgr=r(Z1t,"mbart"),Z1t.forEach(t),Pgr=r(txe," \u2014 "),GX=n(txe,"A",{href:!0});var ebt=s(GX);$gr=r(ebt,"TFMBartForConditionalGeneration"),ebt.forEach(t),Igr=r(txe," (mBART model)"),txe.forEach(t),qgr=i(we),$4=n(we,"LI",{});var axe=s($4);E1e=n(axe,"STRONG",{});var obt=s(E1e);Ngr=r(obt,"mt5"),obt.forEach(t),jgr=r(axe," \u2014 "),OX=n(axe,"A",{href:!0});var rbt=s(OX);Dgr=r(rbt,"TFMT5ForConditionalGeneration"),rbt.forEach(t),Ggr=r(axe," (mT5 model)"),axe.forEach(t),Ogr=i(we),I4=n(we,"LI",{});var nxe=s(I4);C1e=n(nxe,"STRONG",{});var tbt=s(C1e);Vgr=r(tbt,"pegasus"),tbt.forEach(t),Xgr=r(nxe," \u2014 "),VX=n(nxe,"A",{href:!0});var abt=s(VX);zgr=r(abt,"TFPegasusForConditionalGeneration"),abt.forEach(t),Qgr=r(nxe," (Pegasus model)"),nxe.forEach(t),Wgr=i(we),q4=n(we,"LI",{});var sxe=s(q4);w1e=n(sxe,"STRONG",{});var nbt=s(w1e);Hgr=r(nbt,"t5"),nbt.forEach(t),Ugr=r(sxe," \u2014 "),XX=n(sxe,"A",{href:!0});var sbt=s(XX);Jgr=r(sbt,"TFT5ForConditionalGeneration"),sbt.forEach(t),Ygr=r(sxe," (T5 model)"),sxe.forEach(t),we.forEach(t),Kgr=i(Fa),A1e=n(Fa,"P",{});var lbt=s(A1e);Zgr=r(lbt,"Examples:"),lbt.forEach(t),ehr=i(Fa),m(Jy.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),UBe=i(c),Rc=n(c,"H2",{class:!0});var sIe=s(Rc);N4=n(sIe,"A",{id:!0,class:!0,href:!0});var ibt=s(N4);y1e=n(ibt,"SPAN",{});var dbt=s(y1e);m(Yy.$$.fragment,dbt),dbt.forEach(t),ibt.forEach(t),ohr=i(sIe),L1e=n(sIe,"SPAN",{});var cbt=s(L1e);rhr=r(cbt,"TFAutoModelForSequenceClassification"),cbt.forEach(t),sIe.forEach(t),JBe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m(Ky.$$.fragment,Zl),thr=i(Zl),Bc=n(Zl,"P",{});var yJ=s(Bc);ahr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zX=n(yJ,"A",{href:!0});var fbt=s(zX);nhr=r(fbt,"from_pretrained()"),fbt.forEach(t),shr=r(yJ," class method or the "),QX=n(yJ,"A",{href:!0});var mbt=s(QX);lhr=r(mbt,"from_config()"),mbt.forEach(t),ihr=r(yJ,` class
method.`),yJ.forEach(t),dhr=i(Zl),Zy=n(Zl,"P",{});var lIe=s(Zy);chr=r(lIe,"This class cannot be instantiated directly using "),x1e=n(lIe,"CODE",{});var gbt=s(x1e);fhr=r(gbt,"__init__()"),gbt.forEach(t),mhr=r(lIe," (throws an error)."),lIe.forEach(t),ghr=i(Zl),vt=n(Zl,"DIV",{class:!0});var ei=s(vt);m(e8.$$.fragment,ei),hhr=i(ei),k1e=n(ei,"P",{});var hbt=s(k1e);phr=r(hbt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),hbt.forEach(t),_hr=i(ei),Pc=n(ei,"P",{});var LJ=s(Pc);uhr=r(LJ,`Note:
Loading a model from its configuration file does `),S1e=n(LJ,"STRONG",{});var pbt=s(S1e);bhr=r(pbt,"not"),pbt.forEach(t),vhr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(LJ,"A",{href:!0});var _bt=s(WX);Fhr=r(_bt,"from_pretrained()"),_bt.forEach(t),Thr=r(LJ," to load the model weights."),LJ.forEach(t),Mhr=i(ei),R1e=n(ei,"P",{});var ubt=s(R1e);Ehr=r(ubt,"Examples:"),ubt.forEach(t),Chr=i(ei),m(o8.$$.fragment,ei),ei.forEach(t),whr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ta=s(Fo);m(r8.$$.fragment,Ta),Ahr=i(Ta),B1e=n(Ta,"P",{});var bbt=s(B1e);yhr=r(bbt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bbt.forEach(t),Lhr=i(Ta),En=n(Ta,"P",{});var dw=s(En);xhr=r(dw,"The model class to instantiate is selected based on the "),P1e=n(dw,"CODE",{});var vbt=s(P1e);khr=r(vbt,"model_type"),vbt.forEach(t),Shr=r(dw,` property of the config object (either
passed as an argument or loaded from `),$1e=n(dw,"CODE",{});var Fbt=s($1e);Rhr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),Bhr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(dw,"CODE",{});var Tbt=s(I1e);Phr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),$hr=r(dw,":"),dw.forEach(t),Ihr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);j4=n(Q,"LI",{});var lxe=s(j4);q1e=n(lxe,"STRONG",{});var Mbt=s(q1e);qhr=r(Mbt,"albert"),Mbt.forEach(t),Nhr=r(lxe," \u2014 "),HX=n(lxe,"A",{href:!0});var Ebt=s(HX);jhr=r(Ebt,"TFAlbertForSequenceClassification"),Ebt.forEach(t),Dhr=r(lxe," (ALBERT model)"),lxe.forEach(t),Ghr=i(Q),D4=n(Q,"LI",{});var ixe=s(D4);N1e=n(ixe,"STRONG",{});var Cbt=s(N1e);Ohr=r(Cbt,"bert"),Cbt.forEach(t),Vhr=r(ixe," \u2014 "),UX=n(ixe,"A",{href:!0});var wbt=s(UX);Xhr=r(wbt,"TFBertForSequenceClassification"),wbt.forEach(t),zhr=r(ixe," (BERT model)"),ixe.forEach(t),Qhr=i(Q),G4=n(Q,"LI",{});var dxe=s(G4);j1e=n(dxe,"STRONG",{});var Abt=s(j1e);Whr=r(Abt,"camembert"),Abt.forEach(t),Hhr=r(dxe," \u2014 "),JX=n(dxe,"A",{href:!0});var ybt=s(JX);Uhr=r(ybt,"TFCamembertForSequenceClassification"),ybt.forEach(t),Jhr=r(dxe," (CamemBERT model)"),dxe.forEach(t),Yhr=i(Q),O4=n(Q,"LI",{});var cxe=s(O4);D1e=n(cxe,"STRONG",{});var Lbt=s(D1e);Khr=r(Lbt,"convbert"),Lbt.forEach(t),Zhr=r(cxe," \u2014 "),YX=n(cxe,"A",{href:!0});var xbt=s(YX);epr=r(xbt,"TFConvBertForSequenceClassification"),xbt.forEach(t),opr=r(cxe," (ConvBERT model)"),cxe.forEach(t),rpr=i(Q),V4=n(Q,"LI",{});var fxe=s(V4);G1e=n(fxe,"STRONG",{});var kbt=s(G1e);tpr=r(kbt,"ctrl"),kbt.forEach(t),apr=r(fxe," \u2014 "),KX=n(fxe,"A",{href:!0});var Sbt=s(KX);npr=r(Sbt,"TFCTRLForSequenceClassification"),Sbt.forEach(t),spr=r(fxe," (CTRL model)"),fxe.forEach(t),lpr=i(Q),X4=n(Q,"LI",{});var mxe=s(X4);O1e=n(mxe,"STRONG",{});var Rbt=s(O1e);ipr=r(Rbt,"deberta"),Rbt.forEach(t),dpr=r(mxe," \u2014 "),ZX=n(mxe,"A",{href:!0});var Bbt=s(ZX);cpr=r(Bbt,"TFDebertaForSequenceClassification"),Bbt.forEach(t),fpr=r(mxe," (DeBERTa model)"),mxe.forEach(t),mpr=i(Q),z4=n(Q,"LI",{});var gxe=s(z4);V1e=n(gxe,"STRONG",{});var Pbt=s(V1e);gpr=r(Pbt,"deberta-v2"),Pbt.forEach(t),hpr=r(gxe," \u2014 "),ez=n(gxe,"A",{href:!0});var $bt=s(ez);ppr=r($bt,"TFDebertaV2ForSequenceClassification"),$bt.forEach(t),_pr=r(gxe," (DeBERTa-v2 model)"),gxe.forEach(t),upr=i(Q),Q4=n(Q,"LI",{});var hxe=s(Q4);X1e=n(hxe,"STRONG",{});var Ibt=s(X1e);bpr=r(Ibt,"distilbert"),Ibt.forEach(t),vpr=r(hxe," \u2014 "),oz=n(hxe,"A",{href:!0});var qbt=s(oz);Fpr=r(qbt,"TFDistilBertForSequenceClassification"),qbt.forEach(t),Tpr=r(hxe," (DistilBERT model)"),hxe.forEach(t),Mpr=i(Q),W4=n(Q,"LI",{});var pxe=s(W4);z1e=n(pxe,"STRONG",{});var Nbt=s(z1e);Epr=r(Nbt,"electra"),Nbt.forEach(t),Cpr=r(pxe," \u2014 "),rz=n(pxe,"A",{href:!0});var jbt=s(rz);wpr=r(jbt,"TFElectraForSequenceClassification"),jbt.forEach(t),Apr=r(pxe," (ELECTRA model)"),pxe.forEach(t),ypr=i(Q),H4=n(Q,"LI",{});var _xe=s(H4);Q1e=n(_xe,"STRONG",{});var Dbt=s(Q1e);Lpr=r(Dbt,"flaubert"),Dbt.forEach(t),xpr=r(_xe," \u2014 "),tz=n(_xe,"A",{href:!0});var Gbt=s(tz);kpr=r(Gbt,"TFFlaubertForSequenceClassification"),Gbt.forEach(t),Spr=r(_xe," (FlauBERT model)"),_xe.forEach(t),Rpr=i(Q),U4=n(Q,"LI",{});var uxe=s(U4);W1e=n(uxe,"STRONG",{});var Obt=s(W1e);Bpr=r(Obt,"funnel"),Obt.forEach(t),Ppr=r(uxe," \u2014 "),az=n(uxe,"A",{href:!0});var Vbt=s(az);$pr=r(Vbt,"TFFunnelForSequenceClassification"),Vbt.forEach(t),Ipr=r(uxe," (Funnel Transformer model)"),uxe.forEach(t),qpr=i(Q),J4=n(Q,"LI",{});var bxe=s(J4);H1e=n(bxe,"STRONG",{});var Xbt=s(H1e);Npr=r(Xbt,"gpt2"),Xbt.forEach(t),jpr=r(bxe," \u2014 "),nz=n(bxe,"A",{href:!0});var zbt=s(nz);Dpr=r(zbt,"TFGPT2ForSequenceClassification"),zbt.forEach(t),Gpr=r(bxe," (OpenAI GPT-2 model)"),bxe.forEach(t),Opr=i(Q),Y4=n(Q,"LI",{});var vxe=s(Y4);U1e=n(vxe,"STRONG",{});var Qbt=s(U1e);Vpr=r(Qbt,"gptj"),Qbt.forEach(t),Xpr=r(vxe," \u2014 "),sz=n(vxe,"A",{href:!0});var Wbt=s(sz);zpr=r(Wbt,"TFGPTJForSequenceClassification"),Wbt.forEach(t),Qpr=r(vxe," (GPT-J model)"),vxe.forEach(t),Wpr=i(Q),K4=n(Q,"LI",{});var Fxe=s(K4);J1e=n(Fxe,"STRONG",{});var Hbt=s(J1e);Hpr=r(Hbt,"layoutlm"),Hbt.forEach(t),Upr=r(Fxe," \u2014 "),lz=n(Fxe,"A",{href:!0});var Ubt=s(lz);Jpr=r(Ubt,"TFLayoutLMForSequenceClassification"),Ubt.forEach(t),Ypr=r(Fxe," (LayoutLM model)"),Fxe.forEach(t),Kpr=i(Q),Z4=n(Q,"LI",{});var Txe=s(Z4);Y1e=n(Txe,"STRONG",{});var Jbt=s(Y1e);Zpr=r(Jbt,"longformer"),Jbt.forEach(t),e_r=r(Txe," \u2014 "),iz=n(Txe,"A",{href:!0});var Ybt=s(iz);o_r=r(Ybt,"TFLongformerForSequenceClassification"),Ybt.forEach(t),r_r=r(Txe," (Longformer model)"),Txe.forEach(t),t_r=i(Q),eE=n(Q,"LI",{});var Mxe=s(eE);K1e=n(Mxe,"STRONG",{});var Kbt=s(K1e);a_r=r(Kbt,"mobilebert"),Kbt.forEach(t),n_r=r(Mxe," \u2014 "),dz=n(Mxe,"A",{href:!0});var Zbt=s(dz);s_r=r(Zbt,"TFMobileBertForSequenceClassification"),Zbt.forEach(t),l_r=r(Mxe," (MobileBERT model)"),Mxe.forEach(t),i_r=i(Q),oE=n(Q,"LI",{});var Exe=s(oE);Z1e=n(Exe,"STRONG",{});var e2t=s(Z1e);d_r=r(e2t,"mpnet"),e2t.forEach(t),c_r=r(Exe," \u2014 "),cz=n(Exe,"A",{href:!0});var o2t=s(cz);f_r=r(o2t,"TFMPNetForSequenceClassification"),o2t.forEach(t),m_r=r(Exe," (MPNet model)"),Exe.forEach(t),g_r=i(Q),rE=n(Q,"LI",{});var Cxe=s(rE);ebe=n(Cxe,"STRONG",{});var r2t=s(ebe);h_r=r(r2t,"openai-gpt"),r2t.forEach(t),p_r=r(Cxe," \u2014 "),fz=n(Cxe,"A",{href:!0});var t2t=s(fz);__r=r(t2t,"TFOpenAIGPTForSequenceClassification"),t2t.forEach(t),u_r=r(Cxe," (OpenAI GPT model)"),Cxe.forEach(t),b_r=i(Q),tE=n(Q,"LI",{});var wxe=s(tE);obe=n(wxe,"STRONG",{});var a2t=s(obe);v_r=r(a2t,"rembert"),a2t.forEach(t),F_r=r(wxe," \u2014 "),mz=n(wxe,"A",{href:!0});var n2t=s(mz);T_r=r(n2t,"TFRemBertForSequenceClassification"),n2t.forEach(t),M_r=r(wxe," (RemBERT model)"),wxe.forEach(t),E_r=i(Q),aE=n(Q,"LI",{});var Axe=s(aE);rbe=n(Axe,"STRONG",{});var s2t=s(rbe);C_r=r(s2t,"roberta"),s2t.forEach(t),w_r=r(Axe," \u2014 "),gz=n(Axe,"A",{href:!0});var l2t=s(gz);A_r=r(l2t,"TFRobertaForSequenceClassification"),l2t.forEach(t),y_r=r(Axe," (RoBERTa model)"),Axe.forEach(t),L_r=i(Q),nE=n(Q,"LI",{});var yxe=s(nE);tbe=n(yxe,"STRONG",{});var i2t=s(tbe);x_r=r(i2t,"roformer"),i2t.forEach(t),k_r=r(yxe," \u2014 "),hz=n(yxe,"A",{href:!0});var d2t=s(hz);S_r=r(d2t,"TFRoFormerForSequenceClassification"),d2t.forEach(t),R_r=r(yxe," (RoFormer model)"),yxe.forEach(t),B_r=i(Q),sE=n(Q,"LI",{});var Lxe=s(sE);abe=n(Lxe,"STRONG",{});var c2t=s(abe);P_r=r(c2t,"tapas"),c2t.forEach(t),$_r=r(Lxe," \u2014 "),pz=n(Lxe,"A",{href:!0});var f2t=s(pz);I_r=r(f2t,"TFTapasForSequenceClassification"),f2t.forEach(t),q_r=r(Lxe," (TAPAS model)"),Lxe.forEach(t),N_r=i(Q),lE=n(Q,"LI",{});var xxe=s(lE);nbe=n(xxe,"STRONG",{});var m2t=s(nbe);j_r=r(m2t,"transfo-xl"),m2t.forEach(t),D_r=r(xxe," \u2014 "),_z=n(xxe,"A",{href:!0});var g2t=s(_z);G_r=r(g2t,"TFTransfoXLForSequenceClassification"),g2t.forEach(t),O_r=r(xxe," (Transformer-XL model)"),xxe.forEach(t),V_r=i(Q),iE=n(Q,"LI",{});var kxe=s(iE);sbe=n(kxe,"STRONG",{});var h2t=s(sbe);X_r=r(h2t,"xlm"),h2t.forEach(t),z_r=r(kxe," \u2014 "),uz=n(kxe,"A",{href:!0});var p2t=s(uz);Q_r=r(p2t,"TFXLMForSequenceClassification"),p2t.forEach(t),W_r=r(kxe," (XLM model)"),kxe.forEach(t),H_r=i(Q),dE=n(Q,"LI",{});var Sxe=s(dE);lbe=n(Sxe,"STRONG",{});var _2t=s(lbe);U_r=r(_2t,"xlm-roberta"),_2t.forEach(t),J_r=r(Sxe," \u2014 "),bz=n(Sxe,"A",{href:!0});var u2t=s(bz);Y_r=r(u2t,"TFXLMRobertaForSequenceClassification"),u2t.forEach(t),K_r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Z_r=i(Q),cE=n(Q,"LI",{});var Rxe=s(cE);ibe=n(Rxe,"STRONG",{});var b2t=s(ibe);eur=r(b2t,"xlnet"),b2t.forEach(t),our=r(Rxe," \u2014 "),vz=n(Rxe,"A",{href:!0});var v2t=s(vz);rur=r(v2t,"TFXLNetForSequenceClassification"),v2t.forEach(t),tur=r(Rxe," (XLNet model)"),Rxe.forEach(t),Q.forEach(t),aur=i(Ta),dbe=n(Ta,"P",{});var F2t=s(dbe);nur=r(F2t,"Examples:"),F2t.forEach(t),sur=i(Ta),m(t8.$$.fragment,Ta),Ta.forEach(t),Zl.forEach(t),YBe=i(c),$c=n(c,"H2",{class:!0});var iIe=s($c);fE=n(iIe,"A",{id:!0,class:!0,href:!0});var T2t=s(fE);cbe=n(T2t,"SPAN",{});var M2t=s(cbe);m(a8.$$.fragment,M2t),M2t.forEach(t),T2t.forEach(t),lur=i(iIe),fbe=n(iIe,"SPAN",{});var E2t=s(fbe);iur=r(E2t,"TFAutoModelForMultipleChoice"),E2t.forEach(t),iIe.forEach(t),KBe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(n8.$$.fragment,oi),dur=i(oi),Ic=n(oi,"P",{});var xJ=s(Ic);cur=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Fz=n(xJ,"A",{href:!0});var C2t=s(Fz);fur=r(C2t,"from_pretrained()"),C2t.forEach(t),mur=r(xJ," class method or the "),Tz=n(xJ,"A",{href:!0});var w2t=s(Tz);gur=r(w2t,"from_config()"),w2t.forEach(t),hur=r(xJ,` class
method.`),xJ.forEach(t),pur=i(oi),s8=n(oi,"P",{});var dIe=s(s8);_ur=r(dIe,"This class cannot be instantiated directly using "),mbe=n(dIe,"CODE",{});var A2t=s(mbe);uur=r(A2t,"__init__()"),A2t.forEach(t),bur=r(dIe," (throws an error)."),dIe.forEach(t),vur=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(l8.$$.fragment,ri),Fur=i(ri),gbe=n(ri,"P",{});var y2t=s(gbe);Tur=r(y2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y2t.forEach(t),Mur=i(ri),qc=n(ri,"P",{});var kJ=s(qc);Eur=r(kJ,`Note:
Loading a model from its configuration file does `),hbe=n(kJ,"STRONG",{});var L2t=s(hbe);Cur=r(L2t,"not"),L2t.forEach(t),wur=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mz=n(kJ,"A",{href:!0});var x2t=s(Mz);Aur=r(x2t,"from_pretrained()"),x2t.forEach(t),yur=r(kJ," to load the model weights."),kJ.forEach(t),Lur=i(ri),pbe=n(ri,"P",{});var k2t=s(pbe);xur=r(k2t,"Examples:"),k2t.forEach(t),kur=i(ri),m(i8.$$.fragment,ri),ri.forEach(t),Sur=i(oi),To=n(oi,"DIV",{class:!0});var Ma=s(To);m(d8.$$.fragment,Ma),Rur=i(Ma),_be=n(Ma,"P",{});var S2t=s(_be);Bur=r(S2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S2t.forEach(t),Pur=i(Ma),Cn=n(Ma,"P",{});var cw=s(Cn);$ur=r(cw,"The model class to instantiate is selected based on the "),ube=n(cw,"CODE",{});var R2t=s(ube);Iur=r(R2t,"model_type"),R2t.forEach(t),qur=r(cw,` property of the config object (either
passed as an argument or loaded from `),bbe=n(cw,"CODE",{});var B2t=s(bbe);Nur=r(B2t,"pretrained_model_name_or_path"),B2t.forEach(t),jur=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(cw,"CODE",{});var P2t=s(vbe);Dur=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),Gur=r(cw,":"),cw.forEach(t),Our=i(Ma),se=n(Ma,"UL",{});var ie=s(se);mE=n(ie,"LI",{});var Bxe=s(mE);Fbe=n(Bxe,"STRONG",{});var $2t=s(Fbe);Vur=r($2t,"albert"),$2t.forEach(t),Xur=r(Bxe," \u2014 "),Ez=n(Bxe,"A",{href:!0});var I2t=s(Ez);zur=r(I2t,"TFAlbertForMultipleChoice"),I2t.forEach(t),Qur=r(Bxe," (ALBERT model)"),Bxe.forEach(t),Wur=i(ie),gE=n(ie,"LI",{});var Pxe=s(gE);Tbe=n(Pxe,"STRONG",{});var q2t=s(Tbe);Hur=r(q2t,"bert"),q2t.forEach(t),Uur=r(Pxe," \u2014 "),Cz=n(Pxe,"A",{href:!0});var N2t=s(Cz);Jur=r(N2t,"TFBertForMultipleChoice"),N2t.forEach(t),Yur=r(Pxe," (BERT model)"),Pxe.forEach(t),Kur=i(ie),hE=n(ie,"LI",{});var $xe=s(hE);Mbe=n($xe,"STRONG",{});var j2t=s(Mbe);Zur=r(j2t,"camembert"),j2t.forEach(t),e1r=r($xe," \u2014 "),wz=n($xe,"A",{href:!0});var D2t=s(wz);o1r=r(D2t,"TFCamembertForMultipleChoice"),D2t.forEach(t),r1r=r($xe," (CamemBERT model)"),$xe.forEach(t),t1r=i(ie),pE=n(ie,"LI",{});var Ixe=s(pE);Ebe=n(Ixe,"STRONG",{});var G2t=s(Ebe);a1r=r(G2t,"convbert"),G2t.forEach(t),n1r=r(Ixe," \u2014 "),Az=n(Ixe,"A",{href:!0});var O2t=s(Az);s1r=r(O2t,"TFConvBertForMultipleChoice"),O2t.forEach(t),l1r=r(Ixe," (ConvBERT model)"),Ixe.forEach(t),i1r=i(ie),_E=n(ie,"LI",{});var qxe=s(_E);Cbe=n(qxe,"STRONG",{});var V2t=s(Cbe);d1r=r(V2t,"distilbert"),V2t.forEach(t),c1r=r(qxe," \u2014 "),yz=n(qxe,"A",{href:!0});var X2t=s(yz);f1r=r(X2t,"TFDistilBertForMultipleChoice"),X2t.forEach(t),m1r=r(qxe," (DistilBERT model)"),qxe.forEach(t),g1r=i(ie),uE=n(ie,"LI",{});var Nxe=s(uE);wbe=n(Nxe,"STRONG",{});var z2t=s(wbe);h1r=r(z2t,"electra"),z2t.forEach(t),p1r=r(Nxe," \u2014 "),Lz=n(Nxe,"A",{href:!0});var Q2t=s(Lz);_1r=r(Q2t,"TFElectraForMultipleChoice"),Q2t.forEach(t),u1r=r(Nxe," (ELECTRA model)"),Nxe.forEach(t),b1r=i(ie),bE=n(ie,"LI",{});var jxe=s(bE);Abe=n(jxe,"STRONG",{});var W2t=s(Abe);v1r=r(W2t,"flaubert"),W2t.forEach(t),F1r=r(jxe," \u2014 "),xz=n(jxe,"A",{href:!0});var H2t=s(xz);T1r=r(H2t,"TFFlaubertForMultipleChoice"),H2t.forEach(t),M1r=r(jxe," (FlauBERT model)"),jxe.forEach(t),E1r=i(ie),vE=n(ie,"LI",{});var Dxe=s(vE);ybe=n(Dxe,"STRONG",{});var U2t=s(ybe);C1r=r(U2t,"funnel"),U2t.forEach(t),w1r=r(Dxe," \u2014 "),kz=n(Dxe,"A",{href:!0});var J2t=s(kz);A1r=r(J2t,"TFFunnelForMultipleChoice"),J2t.forEach(t),y1r=r(Dxe," (Funnel Transformer model)"),Dxe.forEach(t),L1r=i(ie),FE=n(ie,"LI",{});var Gxe=s(FE);Lbe=n(Gxe,"STRONG",{});var Y2t=s(Lbe);x1r=r(Y2t,"longformer"),Y2t.forEach(t),k1r=r(Gxe," \u2014 "),Sz=n(Gxe,"A",{href:!0});var K2t=s(Sz);S1r=r(K2t,"TFLongformerForMultipleChoice"),K2t.forEach(t),R1r=r(Gxe," (Longformer model)"),Gxe.forEach(t),B1r=i(ie),TE=n(ie,"LI",{});var Oxe=s(TE);xbe=n(Oxe,"STRONG",{});var Z2t=s(xbe);P1r=r(Z2t,"mobilebert"),Z2t.forEach(t),$1r=r(Oxe," \u2014 "),Rz=n(Oxe,"A",{href:!0});var evt=s(Rz);I1r=r(evt,"TFMobileBertForMultipleChoice"),evt.forEach(t),q1r=r(Oxe," (MobileBERT model)"),Oxe.forEach(t),N1r=i(ie),ME=n(ie,"LI",{});var Vxe=s(ME);kbe=n(Vxe,"STRONG",{});var ovt=s(kbe);j1r=r(ovt,"mpnet"),ovt.forEach(t),D1r=r(Vxe," \u2014 "),Bz=n(Vxe,"A",{href:!0});var rvt=s(Bz);G1r=r(rvt,"TFMPNetForMultipleChoice"),rvt.forEach(t),O1r=r(Vxe," (MPNet model)"),Vxe.forEach(t),V1r=i(ie),EE=n(ie,"LI",{});var Xxe=s(EE);Sbe=n(Xxe,"STRONG",{});var tvt=s(Sbe);X1r=r(tvt,"rembert"),tvt.forEach(t),z1r=r(Xxe," \u2014 "),Pz=n(Xxe,"A",{href:!0});var avt=s(Pz);Q1r=r(avt,"TFRemBertForMultipleChoice"),avt.forEach(t),W1r=r(Xxe," (RemBERT model)"),Xxe.forEach(t),H1r=i(ie),CE=n(ie,"LI",{});var zxe=s(CE);Rbe=n(zxe,"STRONG",{});var nvt=s(Rbe);U1r=r(nvt,"roberta"),nvt.forEach(t),J1r=r(zxe," \u2014 "),$z=n(zxe,"A",{href:!0});var svt=s($z);Y1r=r(svt,"TFRobertaForMultipleChoice"),svt.forEach(t),K1r=r(zxe," (RoBERTa model)"),zxe.forEach(t),Z1r=i(ie),wE=n(ie,"LI",{});var Qxe=s(wE);Bbe=n(Qxe,"STRONG",{});var lvt=s(Bbe);ebr=r(lvt,"roformer"),lvt.forEach(t),obr=r(Qxe," \u2014 "),Iz=n(Qxe,"A",{href:!0});var ivt=s(Iz);rbr=r(ivt,"TFRoFormerForMultipleChoice"),ivt.forEach(t),tbr=r(Qxe," (RoFormer model)"),Qxe.forEach(t),abr=i(ie),AE=n(ie,"LI",{});var Wxe=s(AE);Pbe=n(Wxe,"STRONG",{});var dvt=s(Pbe);nbr=r(dvt,"xlm"),dvt.forEach(t),sbr=r(Wxe," \u2014 "),qz=n(Wxe,"A",{href:!0});var cvt=s(qz);lbr=r(cvt,"TFXLMForMultipleChoice"),cvt.forEach(t),ibr=r(Wxe," (XLM model)"),Wxe.forEach(t),dbr=i(ie),yE=n(ie,"LI",{});var Hxe=s(yE);$be=n(Hxe,"STRONG",{});var fvt=s($be);cbr=r(fvt,"xlm-roberta"),fvt.forEach(t),fbr=r(Hxe," \u2014 "),Nz=n(Hxe,"A",{href:!0});var mvt=s(Nz);mbr=r(mvt,"TFXLMRobertaForMultipleChoice"),mvt.forEach(t),gbr=r(Hxe," (XLM-RoBERTa model)"),Hxe.forEach(t),hbr=i(ie),LE=n(ie,"LI",{});var Uxe=s(LE);Ibe=n(Uxe,"STRONG",{});var gvt=s(Ibe);pbr=r(gvt,"xlnet"),gvt.forEach(t),_br=r(Uxe," \u2014 "),jz=n(Uxe,"A",{href:!0});var hvt=s(jz);ubr=r(hvt,"TFXLNetForMultipleChoice"),hvt.forEach(t),bbr=r(Uxe," (XLNet model)"),Uxe.forEach(t),ie.forEach(t),vbr=i(Ma),qbe=n(Ma,"P",{});var pvt=s(qbe);Fbr=r(pvt,"Examples:"),pvt.forEach(t),Tbr=i(Ma),m(c8.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),ZBe=i(c),Nc=n(c,"H2",{class:!0});var cIe=s(Nc);xE=n(cIe,"A",{id:!0,class:!0,href:!0});var _vt=s(xE);Nbe=n(_vt,"SPAN",{});var uvt=s(Nbe);m(f8.$$.fragment,uvt),uvt.forEach(t),_vt.forEach(t),Mbr=i(cIe),jbe=n(cIe,"SPAN",{});var bvt=s(jbe);Ebr=r(bvt,"TFAutoModelForTableQuestionAnswering"),bvt.forEach(t),cIe.forEach(t),ePe=i(c),yr=n(c,"DIV",{class:!0});var ti=s(yr);m(m8.$$.fragment,ti),Cbr=i(ti),jc=n(ti,"P",{});var SJ=s(jc);wbr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Dz=n(SJ,"A",{href:!0});var vvt=s(Dz);Abr=r(vvt,"from_pretrained()"),vvt.forEach(t),ybr=r(SJ," class method or the "),Gz=n(SJ,"A",{href:!0});var Fvt=s(Gz);Lbr=r(Fvt,"from_config()"),Fvt.forEach(t),xbr=r(SJ,` class
method.`),SJ.forEach(t),kbr=i(ti),g8=n(ti,"P",{});var fIe=s(g8);Sbr=r(fIe,"This class cannot be instantiated directly using "),Dbe=n(fIe,"CODE",{});var Tvt=s(Dbe);Rbr=r(Tvt,"__init__()"),Tvt.forEach(t),Bbr=r(fIe," (throws an error)."),fIe.forEach(t),Pbr=i(ti),Tt=n(ti,"DIV",{class:!0});var ai=s(Tt);m(h8.$$.fragment,ai),$br=i(ai),Gbe=n(ai,"P",{});var Mvt=s(Gbe);Ibr=r(Mvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Mvt.forEach(t),qbr=i(ai),Dc=n(ai,"P",{});var RJ=s(Dc);Nbr=r(RJ,`Note:
Loading a model from its configuration file does `),Obe=n(RJ,"STRONG",{});var Evt=s(Obe);jbr=r(Evt,"not"),Evt.forEach(t),Dbr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oz=n(RJ,"A",{href:!0});var Cvt=s(Oz);Gbr=r(Cvt,"from_pretrained()"),Cvt.forEach(t),Obr=r(RJ," to load the model weights."),RJ.forEach(t),Vbr=i(ai),Vbe=n(ai,"P",{});var wvt=s(Vbe);Xbr=r(wvt,"Examples:"),wvt.forEach(t),zbr=i(ai),m(p8.$$.fragment,ai),ai.forEach(t),Qbr=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(_8.$$.fragment,Ea),Wbr=i(Ea),Xbe=n(Ea,"P",{});var Avt=s(Xbe);Hbr=r(Avt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Avt.forEach(t),Ubr=i(Ea),wn=n(Ea,"P",{});var fw=s(wn);Jbr=r(fw,"The model class to instantiate is selected based on the "),zbe=n(fw,"CODE",{});var yvt=s(zbe);Ybr=r(yvt,"model_type"),yvt.forEach(t),Kbr=r(fw,` property of the config object (either
passed as an argument or loaded from `),Qbe=n(fw,"CODE",{});var Lvt=s(Qbe);Zbr=r(Lvt,"pretrained_model_name_or_path"),Lvt.forEach(t),e2r=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(fw,"CODE",{});var xvt=s(Wbe);o2r=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),r2r=r(fw,":"),fw.forEach(t),t2r=i(Ea),Hbe=n(Ea,"UL",{});var kvt=s(Hbe);kE=n(kvt,"LI",{});var Jxe=s(kE);Ube=n(Jxe,"STRONG",{});var Svt=s(Ube);a2r=r(Svt,"tapas"),Svt.forEach(t),n2r=r(Jxe," \u2014 "),Vz=n(Jxe,"A",{href:!0});var Rvt=s(Vz);s2r=r(Rvt,"TFTapasForQuestionAnswering"),Rvt.forEach(t),l2r=r(Jxe," (TAPAS model)"),Jxe.forEach(t),kvt.forEach(t),i2r=i(Ea),Jbe=n(Ea,"P",{});var Bvt=s(Jbe);d2r=r(Bvt,"Examples:"),Bvt.forEach(t),c2r=i(Ea),m(u8.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),oPe=i(c),Gc=n(c,"H2",{class:!0});var mIe=s(Gc);SE=n(mIe,"A",{id:!0,class:!0,href:!0});var Pvt=s(SE);Ybe=n(Pvt,"SPAN",{});var $vt=s(Ybe);m(b8.$$.fragment,$vt),$vt.forEach(t),Pvt.forEach(t),f2r=i(mIe),Kbe=n(mIe,"SPAN",{});var Ivt=s(Kbe);m2r=r(Ivt,"TFAutoModelForTokenClassification"),Ivt.forEach(t),mIe.forEach(t),rPe=i(c),Lr=n(c,"DIV",{class:!0});var ni=s(Lr);m(v8.$$.fragment,ni),g2r=i(ni),Oc=n(ni,"P",{});var BJ=s(Oc);h2r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Xz=n(BJ,"A",{href:!0});var qvt=s(Xz);p2r=r(qvt,"from_pretrained()"),qvt.forEach(t),_2r=r(BJ," class method or the "),zz=n(BJ,"A",{href:!0});var Nvt=s(zz);u2r=r(Nvt,"from_config()"),Nvt.forEach(t),b2r=r(BJ,` class
method.`),BJ.forEach(t),v2r=i(ni),F8=n(ni,"P",{});var gIe=s(F8);F2r=r(gIe,"This class cannot be instantiated directly using "),Zbe=n(gIe,"CODE",{});var jvt=s(Zbe);T2r=r(jvt,"__init__()"),jvt.forEach(t),M2r=r(gIe," (throws an error)."),gIe.forEach(t),E2r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(T8.$$.fragment,si),C2r=i(si),e2e=n(si,"P",{});var Dvt=s(e2e);w2r=r(Dvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Dvt.forEach(t),A2r=i(si),Vc=n(si,"P",{});var PJ=s(Vc);y2r=r(PJ,`Note:
Loading a model from its configuration file does `),o2e=n(PJ,"STRONG",{});var Gvt=s(o2e);L2r=r(Gvt,"not"),Gvt.forEach(t),x2r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(PJ,"A",{href:!0});var Ovt=s(Qz);k2r=r(Ovt,"from_pretrained()"),Ovt.forEach(t),S2r=r(PJ," to load the model weights."),PJ.forEach(t),R2r=i(si),r2e=n(si,"P",{});var Vvt=s(r2e);B2r=r(Vvt,"Examples:"),Vvt.forEach(t),P2r=i(si),m(M8.$$.fragment,si),si.forEach(t),$2r=i(ni),Eo=n(ni,"DIV",{class:!0});var Ca=s(Eo);m(E8.$$.fragment,Ca),I2r=i(Ca),t2e=n(Ca,"P",{});var Xvt=s(t2e);q2r=r(Xvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Xvt.forEach(t),N2r=i(Ca),An=n(Ca,"P",{});var mw=s(An);j2r=r(mw,"The model class to instantiate is selected based on the "),a2e=n(mw,"CODE",{});var zvt=s(a2e);D2r=r(zvt,"model_type"),zvt.forEach(t),G2r=r(mw,` property of the config object (either
passed as an argument or loaded from `),n2e=n(mw,"CODE",{});var Qvt=s(n2e);O2r=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),V2r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(mw,"CODE",{});var Wvt=s(s2e);X2r=r(Wvt,"pretrained_model_name_or_path"),Wvt.forEach(t),z2r=r(mw,":"),mw.forEach(t),Q2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);RE=n(re,"LI",{});var Yxe=s(RE);l2e=n(Yxe,"STRONG",{});var Hvt=s(l2e);W2r=r(Hvt,"albert"),Hvt.forEach(t),H2r=r(Yxe," \u2014 "),Wz=n(Yxe,"A",{href:!0});var Uvt=s(Wz);U2r=r(Uvt,"TFAlbertForTokenClassification"),Uvt.forEach(t),J2r=r(Yxe," (ALBERT model)"),Yxe.forEach(t),Y2r=i(re),BE=n(re,"LI",{});var Kxe=s(BE);i2e=n(Kxe,"STRONG",{});var Jvt=s(i2e);K2r=r(Jvt,"bert"),Jvt.forEach(t),Z2r=r(Kxe," \u2014 "),Hz=n(Kxe,"A",{href:!0});var Yvt=s(Hz);evr=r(Yvt,"TFBertForTokenClassification"),Yvt.forEach(t),ovr=r(Kxe," (BERT model)"),Kxe.forEach(t),rvr=i(re),PE=n(re,"LI",{});var Zxe=s(PE);d2e=n(Zxe,"STRONG",{});var Kvt=s(d2e);tvr=r(Kvt,"camembert"),Kvt.forEach(t),avr=r(Zxe," \u2014 "),Uz=n(Zxe,"A",{href:!0});var Zvt=s(Uz);nvr=r(Zvt,"TFCamembertForTokenClassification"),Zvt.forEach(t),svr=r(Zxe," (CamemBERT model)"),Zxe.forEach(t),lvr=i(re),$E=n(re,"LI",{});var eke=s($E);c2e=n(eke,"STRONG",{});var eFt=s(c2e);ivr=r(eFt,"convbert"),eFt.forEach(t),dvr=r(eke," \u2014 "),Jz=n(eke,"A",{href:!0});var oFt=s(Jz);cvr=r(oFt,"TFConvBertForTokenClassification"),oFt.forEach(t),fvr=r(eke," (ConvBERT model)"),eke.forEach(t),mvr=i(re),IE=n(re,"LI",{});var oke=s(IE);f2e=n(oke,"STRONG",{});var rFt=s(f2e);gvr=r(rFt,"deberta"),rFt.forEach(t),hvr=r(oke," \u2014 "),Yz=n(oke,"A",{href:!0});var tFt=s(Yz);pvr=r(tFt,"TFDebertaForTokenClassification"),tFt.forEach(t),_vr=r(oke," (DeBERTa model)"),oke.forEach(t),uvr=i(re),qE=n(re,"LI",{});var rke=s(qE);m2e=n(rke,"STRONG",{});var aFt=s(m2e);bvr=r(aFt,"deberta-v2"),aFt.forEach(t),vvr=r(rke," \u2014 "),Kz=n(rke,"A",{href:!0});var nFt=s(Kz);Fvr=r(nFt,"TFDebertaV2ForTokenClassification"),nFt.forEach(t),Tvr=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),Mvr=i(re),NE=n(re,"LI",{});var tke=s(NE);g2e=n(tke,"STRONG",{});var sFt=s(g2e);Evr=r(sFt,"distilbert"),sFt.forEach(t),Cvr=r(tke," \u2014 "),Zz=n(tke,"A",{href:!0});var lFt=s(Zz);wvr=r(lFt,"TFDistilBertForTokenClassification"),lFt.forEach(t),Avr=r(tke," (DistilBERT model)"),tke.forEach(t),yvr=i(re),jE=n(re,"LI",{});var ake=s(jE);h2e=n(ake,"STRONG",{});var iFt=s(h2e);Lvr=r(iFt,"electra"),iFt.forEach(t),xvr=r(ake," \u2014 "),eQ=n(ake,"A",{href:!0});var dFt=s(eQ);kvr=r(dFt,"TFElectraForTokenClassification"),dFt.forEach(t),Svr=r(ake," (ELECTRA model)"),ake.forEach(t),Rvr=i(re),DE=n(re,"LI",{});var nke=s(DE);p2e=n(nke,"STRONG",{});var cFt=s(p2e);Bvr=r(cFt,"flaubert"),cFt.forEach(t),Pvr=r(nke," \u2014 "),oQ=n(nke,"A",{href:!0});var fFt=s(oQ);$vr=r(fFt,"TFFlaubertForTokenClassification"),fFt.forEach(t),Ivr=r(nke," (FlauBERT model)"),nke.forEach(t),qvr=i(re),GE=n(re,"LI",{});var ske=s(GE);_2e=n(ske,"STRONG",{});var mFt=s(_2e);Nvr=r(mFt,"funnel"),mFt.forEach(t),jvr=r(ske," \u2014 "),rQ=n(ske,"A",{href:!0});var gFt=s(rQ);Dvr=r(gFt,"TFFunnelForTokenClassification"),gFt.forEach(t),Gvr=r(ske," (Funnel Transformer model)"),ske.forEach(t),Ovr=i(re),OE=n(re,"LI",{});var lke=s(OE);u2e=n(lke,"STRONG",{});var hFt=s(u2e);Vvr=r(hFt,"layoutlm"),hFt.forEach(t),Xvr=r(lke," \u2014 "),tQ=n(lke,"A",{href:!0});var pFt=s(tQ);zvr=r(pFt,"TFLayoutLMForTokenClassification"),pFt.forEach(t),Qvr=r(lke," (LayoutLM model)"),lke.forEach(t),Wvr=i(re),VE=n(re,"LI",{});var ike=s(VE);b2e=n(ike,"STRONG",{});var _Ft=s(b2e);Hvr=r(_Ft,"longformer"),_Ft.forEach(t),Uvr=r(ike," \u2014 "),aQ=n(ike,"A",{href:!0});var uFt=s(aQ);Jvr=r(uFt,"TFLongformerForTokenClassification"),uFt.forEach(t),Yvr=r(ike," (Longformer model)"),ike.forEach(t),Kvr=i(re),XE=n(re,"LI",{});var dke=s(XE);v2e=n(dke,"STRONG",{});var bFt=s(v2e);Zvr=r(bFt,"mobilebert"),bFt.forEach(t),eFr=r(dke," \u2014 "),nQ=n(dke,"A",{href:!0});var vFt=s(nQ);oFr=r(vFt,"TFMobileBertForTokenClassification"),vFt.forEach(t),rFr=r(dke," (MobileBERT model)"),dke.forEach(t),tFr=i(re),zE=n(re,"LI",{});var cke=s(zE);F2e=n(cke,"STRONG",{});var FFt=s(F2e);aFr=r(FFt,"mpnet"),FFt.forEach(t),nFr=r(cke," \u2014 "),sQ=n(cke,"A",{href:!0});var TFt=s(sQ);sFr=r(TFt,"TFMPNetForTokenClassification"),TFt.forEach(t),lFr=r(cke," (MPNet model)"),cke.forEach(t),iFr=i(re),QE=n(re,"LI",{});var fke=s(QE);T2e=n(fke,"STRONG",{});var MFt=s(T2e);dFr=r(MFt,"rembert"),MFt.forEach(t),cFr=r(fke," \u2014 "),lQ=n(fke,"A",{href:!0});var EFt=s(lQ);fFr=r(EFt,"TFRemBertForTokenClassification"),EFt.forEach(t),mFr=r(fke," (RemBERT model)"),fke.forEach(t),gFr=i(re),WE=n(re,"LI",{});var mke=s(WE);M2e=n(mke,"STRONG",{});var CFt=s(M2e);hFr=r(CFt,"roberta"),CFt.forEach(t),pFr=r(mke," \u2014 "),iQ=n(mke,"A",{href:!0});var wFt=s(iQ);_Fr=r(wFt,"TFRobertaForTokenClassification"),wFt.forEach(t),uFr=r(mke," (RoBERTa model)"),mke.forEach(t),bFr=i(re),HE=n(re,"LI",{});var gke=s(HE);E2e=n(gke,"STRONG",{});var AFt=s(E2e);vFr=r(AFt,"roformer"),AFt.forEach(t),FFr=r(gke," \u2014 "),dQ=n(gke,"A",{href:!0});var yFt=s(dQ);TFr=r(yFt,"TFRoFormerForTokenClassification"),yFt.forEach(t),MFr=r(gke," (RoFormer model)"),gke.forEach(t),EFr=i(re),UE=n(re,"LI",{});var hke=s(UE);C2e=n(hke,"STRONG",{});var LFt=s(C2e);CFr=r(LFt,"xlm"),LFt.forEach(t),wFr=r(hke," \u2014 "),cQ=n(hke,"A",{href:!0});var xFt=s(cQ);AFr=r(xFt,"TFXLMForTokenClassification"),xFt.forEach(t),yFr=r(hke," (XLM model)"),hke.forEach(t),LFr=i(re),JE=n(re,"LI",{});var pke=s(JE);w2e=n(pke,"STRONG",{});var kFt=s(w2e);xFr=r(kFt,"xlm-roberta"),kFt.forEach(t),kFr=r(pke," \u2014 "),fQ=n(pke,"A",{href:!0});var SFt=s(fQ);SFr=r(SFt,"TFXLMRobertaForTokenClassification"),SFt.forEach(t),RFr=r(pke," (XLM-RoBERTa model)"),pke.forEach(t),BFr=i(re),YE=n(re,"LI",{});var _ke=s(YE);A2e=n(_ke,"STRONG",{});var RFt=s(A2e);PFr=r(RFt,"xlnet"),RFt.forEach(t),$Fr=r(_ke," \u2014 "),mQ=n(_ke,"A",{href:!0});var BFt=s(mQ);IFr=r(BFt,"TFXLNetForTokenClassification"),BFt.forEach(t),qFr=r(_ke," (XLNet model)"),_ke.forEach(t),re.forEach(t),NFr=i(Ca),y2e=n(Ca,"P",{});var PFt=s(y2e);jFr=r(PFt,"Examples:"),PFt.forEach(t),DFr=i(Ca),m(C8.$$.fragment,Ca),Ca.forEach(t),ni.forEach(t),tPe=i(c),Xc=n(c,"H2",{class:!0});var hIe=s(Xc);KE=n(hIe,"A",{id:!0,class:!0,href:!0});var $Ft=s(KE);L2e=n($Ft,"SPAN",{});var IFt=s(L2e);m(w8.$$.fragment,IFt),IFt.forEach(t),$Ft.forEach(t),GFr=i(hIe),x2e=n(hIe,"SPAN",{});var qFt=s(x2e);OFr=r(qFt,"TFAutoModelForQuestionAnswering"),qFt.forEach(t),hIe.forEach(t),aPe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(A8.$$.fragment,li),VFr=i(li),zc=n(li,"P",{});var $J=s(zc);XFr=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=n($J,"A",{href:!0});var NFt=s(gQ);zFr=r(NFt,"from_pretrained()"),NFt.forEach(t),QFr=r($J," class method or the "),hQ=n($J,"A",{href:!0});var jFt=s(hQ);WFr=r(jFt,"from_config()"),jFt.forEach(t),HFr=r($J,` class
method.`),$J.forEach(t),UFr=i(li),y8=n(li,"P",{});var pIe=s(y8);JFr=r(pIe,"This class cannot be instantiated directly using "),k2e=n(pIe,"CODE",{});var DFt=s(k2e);YFr=r(DFt,"__init__()"),DFt.forEach(t),KFr=r(pIe," (throws an error)."),pIe.forEach(t),ZFr=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(L8.$$.fragment,ii),eTr=i(ii),S2e=n(ii,"P",{});var GFt=s(S2e);oTr=r(GFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GFt.forEach(t),rTr=i(ii),Qc=n(ii,"P",{});var IJ=s(Qc);tTr=r(IJ,`Note:
Loading a model from its configuration file does `),R2e=n(IJ,"STRONG",{});var OFt=s(R2e);aTr=r(OFt,"not"),OFt.forEach(t),nTr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(IJ,"A",{href:!0});var VFt=s(pQ);sTr=r(VFt,"from_pretrained()"),VFt.forEach(t),lTr=r(IJ," to load the model weights."),IJ.forEach(t),iTr=i(ii),B2e=n(ii,"P",{});var XFt=s(B2e);dTr=r(XFt,"Examples:"),XFt.forEach(t),cTr=i(ii),m(x8.$$.fragment,ii),ii.forEach(t),fTr=i(li),Co=n(li,"DIV",{class:!0});var wa=s(Co);m(k8.$$.fragment,wa),mTr=i(wa),P2e=n(wa,"P",{});var zFt=s(P2e);gTr=r(zFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zFt.forEach(t),hTr=i(wa),yn=n(wa,"P",{});var gw=s(yn);pTr=r(gw,"The model class to instantiate is selected based on the "),$2e=n(gw,"CODE",{});var QFt=s($2e);_Tr=r(QFt,"model_type"),QFt.forEach(t),uTr=r(gw,` property of the config object (either
passed as an argument or loaded from `),I2e=n(gw,"CODE",{});var WFt=s(I2e);bTr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),vTr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(gw,"CODE",{});var HFt=s(q2e);FTr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),TTr=r(gw,":"),gw.forEach(t),MTr=i(wa),K=n(wa,"UL",{});var te=s(K);ZE=n(te,"LI",{});var uke=s(ZE);N2e=n(uke,"STRONG",{});var UFt=s(N2e);ETr=r(UFt,"albert"),UFt.forEach(t),CTr=r(uke," \u2014 "),_Q=n(uke,"A",{href:!0});var JFt=s(_Q);wTr=r(JFt,"TFAlbertForQuestionAnswering"),JFt.forEach(t),ATr=r(uke," (ALBERT model)"),uke.forEach(t),yTr=i(te),e5=n(te,"LI",{});var bke=s(e5);j2e=n(bke,"STRONG",{});var YFt=s(j2e);LTr=r(YFt,"bert"),YFt.forEach(t),xTr=r(bke," \u2014 "),uQ=n(bke,"A",{href:!0});var KFt=s(uQ);kTr=r(KFt,"TFBertForQuestionAnswering"),KFt.forEach(t),STr=r(bke," (BERT model)"),bke.forEach(t),RTr=i(te),o5=n(te,"LI",{});var vke=s(o5);D2e=n(vke,"STRONG",{});var ZFt=s(D2e);BTr=r(ZFt,"camembert"),ZFt.forEach(t),PTr=r(vke," \u2014 "),bQ=n(vke,"A",{href:!0});var eTt=s(bQ);$Tr=r(eTt,"TFCamembertForQuestionAnswering"),eTt.forEach(t),ITr=r(vke," (CamemBERT model)"),vke.forEach(t),qTr=i(te),r5=n(te,"LI",{});var Fke=s(r5);G2e=n(Fke,"STRONG",{});var oTt=s(G2e);NTr=r(oTt,"convbert"),oTt.forEach(t),jTr=r(Fke," \u2014 "),vQ=n(Fke,"A",{href:!0});var rTt=s(vQ);DTr=r(rTt,"TFConvBertForQuestionAnswering"),rTt.forEach(t),GTr=r(Fke," (ConvBERT model)"),Fke.forEach(t),OTr=i(te),t5=n(te,"LI",{});var Tke=s(t5);O2e=n(Tke,"STRONG",{});var tTt=s(O2e);VTr=r(tTt,"deberta"),tTt.forEach(t),XTr=r(Tke," \u2014 "),FQ=n(Tke,"A",{href:!0});var aTt=s(FQ);zTr=r(aTt,"TFDebertaForQuestionAnswering"),aTt.forEach(t),QTr=r(Tke," (DeBERTa model)"),Tke.forEach(t),WTr=i(te),a5=n(te,"LI",{});var Mke=s(a5);V2e=n(Mke,"STRONG",{});var nTt=s(V2e);HTr=r(nTt,"deberta-v2"),nTt.forEach(t),UTr=r(Mke," \u2014 "),TQ=n(Mke,"A",{href:!0});var sTt=s(TQ);JTr=r(sTt,"TFDebertaV2ForQuestionAnswering"),sTt.forEach(t),YTr=r(Mke," (DeBERTa-v2 model)"),Mke.forEach(t),KTr=i(te),n5=n(te,"LI",{});var Eke=s(n5);X2e=n(Eke,"STRONG",{});var lTt=s(X2e);ZTr=r(lTt,"distilbert"),lTt.forEach(t),eMr=r(Eke," \u2014 "),MQ=n(Eke,"A",{href:!0});var iTt=s(MQ);oMr=r(iTt,"TFDistilBertForQuestionAnswering"),iTt.forEach(t),rMr=r(Eke," (DistilBERT model)"),Eke.forEach(t),tMr=i(te),s5=n(te,"LI",{});var Cke=s(s5);z2e=n(Cke,"STRONG",{});var dTt=s(z2e);aMr=r(dTt,"electra"),dTt.forEach(t),nMr=r(Cke," \u2014 "),EQ=n(Cke,"A",{href:!0});var cTt=s(EQ);sMr=r(cTt,"TFElectraForQuestionAnswering"),cTt.forEach(t),lMr=r(Cke," (ELECTRA model)"),Cke.forEach(t),iMr=i(te),l5=n(te,"LI",{});var wke=s(l5);Q2e=n(wke,"STRONG",{});var fTt=s(Q2e);dMr=r(fTt,"flaubert"),fTt.forEach(t),cMr=r(wke," \u2014 "),CQ=n(wke,"A",{href:!0});var mTt=s(CQ);fMr=r(mTt,"TFFlaubertForQuestionAnsweringSimple"),mTt.forEach(t),mMr=r(wke," (FlauBERT model)"),wke.forEach(t),gMr=i(te),i5=n(te,"LI",{});var Ake=s(i5);W2e=n(Ake,"STRONG",{});var gTt=s(W2e);hMr=r(gTt,"funnel"),gTt.forEach(t),pMr=r(Ake," \u2014 "),wQ=n(Ake,"A",{href:!0});var hTt=s(wQ);_Mr=r(hTt,"TFFunnelForQuestionAnswering"),hTt.forEach(t),uMr=r(Ake," (Funnel Transformer model)"),Ake.forEach(t),bMr=i(te),d5=n(te,"LI",{});var yke=s(d5);H2e=n(yke,"STRONG",{});var pTt=s(H2e);vMr=r(pTt,"gptj"),pTt.forEach(t),FMr=r(yke," \u2014 "),AQ=n(yke,"A",{href:!0});var _Tt=s(AQ);TMr=r(_Tt,"TFGPTJForQuestionAnswering"),_Tt.forEach(t),MMr=r(yke," (GPT-J model)"),yke.forEach(t),EMr=i(te),c5=n(te,"LI",{});var Lke=s(c5);U2e=n(Lke,"STRONG",{});var uTt=s(U2e);CMr=r(uTt,"longformer"),uTt.forEach(t),wMr=r(Lke," \u2014 "),yQ=n(Lke,"A",{href:!0});var bTt=s(yQ);AMr=r(bTt,"TFLongformerForQuestionAnswering"),bTt.forEach(t),yMr=r(Lke," (Longformer model)"),Lke.forEach(t),LMr=i(te),f5=n(te,"LI",{});var xke=s(f5);J2e=n(xke,"STRONG",{});var vTt=s(J2e);xMr=r(vTt,"mobilebert"),vTt.forEach(t),kMr=r(xke," \u2014 "),LQ=n(xke,"A",{href:!0});var FTt=s(LQ);SMr=r(FTt,"TFMobileBertForQuestionAnswering"),FTt.forEach(t),RMr=r(xke," (MobileBERT model)"),xke.forEach(t),BMr=i(te),m5=n(te,"LI",{});var kke=s(m5);Y2e=n(kke,"STRONG",{});var TTt=s(Y2e);PMr=r(TTt,"mpnet"),TTt.forEach(t),$Mr=r(kke," \u2014 "),xQ=n(kke,"A",{href:!0});var MTt=s(xQ);IMr=r(MTt,"TFMPNetForQuestionAnswering"),MTt.forEach(t),qMr=r(kke," (MPNet model)"),kke.forEach(t),NMr=i(te),g5=n(te,"LI",{});var Ske=s(g5);K2e=n(Ske,"STRONG",{});var ETt=s(K2e);jMr=r(ETt,"rembert"),ETt.forEach(t),DMr=r(Ske," \u2014 "),kQ=n(Ske,"A",{href:!0});var CTt=s(kQ);GMr=r(CTt,"TFRemBertForQuestionAnswering"),CTt.forEach(t),OMr=r(Ske," (RemBERT model)"),Ske.forEach(t),VMr=i(te),h5=n(te,"LI",{});var Rke=s(h5);Z2e=n(Rke,"STRONG",{});var wTt=s(Z2e);XMr=r(wTt,"roberta"),wTt.forEach(t),zMr=r(Rke," \u2014 "),SQ=n(Rke,"A",{href:!0});var ATt=s(SQ);QMr=r(ATt,"TFRobertaForQuestionAnswering"),ATt.forEach(t),WMr=r(Rke," (RoBERTa model)"),Rke.forEach(t),HMr=i(te),p5=n(te,"LI",{});var Bke=s(p5);eve=n(Bke,"STRONG",{});var yTt=s(eve);UMr=r(yTt,"roformer"),yTt.forEach(t),JMr=r(Bke," \u2014 "),RQ=n(Bke,"A",{href:!0});var LTt=s(RQ);YMr=r(LTt,"TFRoFormerForQuestionAnswering"),LTt.forEach(t),KMr=r(Bke," (RoFormer model)"),Bke.forEach(t),ZMr=i(te),_5=n(te,"LI",{});var Pke=s(_5);ove=n(Pke,"STRONG",{});var xTt=s(ove);e4r=r(xTt,"xlm"),xTt.forEach(t),o4r=r(Pke," \u2014 "),BQ=n(Pke,"A",{href:!0});var kTt=s(BQ);r4r=r(kTt,"TFXLMForQuestionAnsweringSimple"),kTt.forEach(t),t4r=r(Pke," (XLM model)"),Pke.forEach(t),a4r=i(te),u5=n(te,"LI",{});var $ke=s(u5);rve=n($ke,"STRONG",{});var STt=s(rve);n4r=r(STt,"xlm-roberta"),STt.forEach(t),s4r=r($ke," \u2014 "),PQ=n($ke,"A",{href:!0});var RTt=s(PQ);l4r=r(RTt,"TFXLMRobertaForQuestionAnswering"),RTt.forEach(t),i4r=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),d4r=i(te),b5=n(te,"LI",{});var Ike=s(b5);tve=n(Ike,"STRONG",{});var BTt=s(tve);c4r=r(BTt,"xlnet"),BTt.forEach(t),f4r=r(Ike," \u2014 "),$Q=n(Ike,"A",{href:!0});var PTt=s($Q);m4r=r(PTt,"TFXLNetForQuestionAnsweringSimple"),PTt.forEach(t),g4r=r(Ike," (XLNet model)"),Ike.forEach(t),te.forEach(t),h4r=i(wa),ave=n(wa,"P",{});var $Tt=s(ave);p4r=r($Tt,"Examples:"),$Tt.forEach(t),_4r=i(wa),m(S8.$$.fragment,wa),wa.forEach(t),li.forEach(t),nPe=i(c),Wc=n(c,"H2",{class:!0});var _Ie=s(Wc);v5=n(_Ie,"A",{id:!0,class:!0,href:!0});var ITt=s(v5);nve=n(ITt,"SPAN",{});var qTt=s(nve);m(R8.$$.fragment,qTt),qTt.forEach(t),ITt.forEach(t),u4r=i(_Ie),sve=n(_Ie,"SPAN",{});var NTt=s(sve);b4r=r(NTt,"TFAutoModelForVision2Seq"),NTt.forEach(t),_Ie.forEach(t),sPe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(B8.$$.fragment,di),v4r=i(di),Hc=n(di,"P",{});var qJ=s(Hc);F4r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),IQ=n(qJ,"A",{href:!0});var jTt=s(IQ);T4r=r(jTt,"from_pretrained()"),jTt.forEach(t),M4r=r(qJ," class method or the "),qQ=n(qJ,"A",{href:!0});var DTt=s(qQ);E4r=r(DTt,"from_config()"),DTt.forEach(t),C4r=r(qJ,` class
method.`),qJ.forEach(t),w4r=i(di),P8=n(di,"P",{});var uIe=s(P8);A4r=r(uIe,"This class cannot be instantiated directly using "),lve=n(uIe,"CODE",{});var GTt=s(lve);y4r=r(GTt,"__init__()"),GTt.forEach(t),L4r=r(uIe," (throws an error)."),uIe.forEach(t),x4r=i(di),Ct=n(di,"DIV",{class:!0});var ci=s(Ct);m($8.$$.fragment,ci),k4r=i(ci),ive=n(ci,"P",{});var OTt=s(ive);S4r=r(OTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OTt.forEach(t),R4r=i(ci),Uc=n(ci,"P",{});var NJ=s(Uc);B4r=r(NJ,`Note:
Loading a model from its configuration file does `),dve=n(NJ,"STRONG",{});var VTt=s(dve);P4r=r(VTt,"not"),VTt.forEach(t),$4r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(NJ,"A",{href:!0});var XTt=s(NQ);I4r=r(XTt,"from_pretrained()"),XTt.forEach(t),q4r=r(NJ," to load the model weights."),NJ.forEach(t),N4r=i(ci),cve=n(ci,"P",{});var zTt=s(cve);j4r=r(zTt,"Examples:"),zTt.forEach(t),D4r=i(ci),m(I8.$$.fragment,ci),ci.forEach(t),G4r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(q8.$$.fragment,Aa),O4r=i(Aa),fve=n(Aa,"P",{});var QTt=s(fve);V4r=r(QTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QTt.forEach(t),X4r=i(Aa),Ln=n(Aa,"P",{});var hw=s(Ln);z4r=r(hw,"The model class to instantiate is selected based on the "),mve=n(hw,"CODE",{});var WTt=s(mve);Q4r=r(WTt,"model_type"),WTt.forEach(t),W4r=r(hw,` property of the config object (either
passed as an argument or loaded from `),gve=n(hw,"CODE",{});var HTt=s(gve);H4r=r(HTt,"pretrained_model_name_or_path"),HTt.forEach(t),U4r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hve=n(hw,"CODE",{});var UTt=s(hve);J4r=r(UTt,"pretrained_model_name_or_path"),UTt.forEach(t),Y4r=r(hw,":"),hw.forEach(t),K4r=i(Aa),pve=n(Aa,"UL",{});var JTt=s(pve);F5=n(JTt,"LI",{});var qke=s(F5);_ve=n(qke,"STRONG",{});var YTt=s(_ve);Z4r=r(YTt,"vision-encoder-decoder"),YTt.forEach(t),eEr=r(qke," \u2014 "),jQ=n(qke,"A",{href:!0});var KTt=s(jQ);oEr=r(KTt,"TFVisionEncoderDecoderModel"),KTt.forEach(t),rEr=r(qke," (Vision Encoder decoder model)"),qke.forEach(t),JTt.forEach(t),tEr=i(Aa),uve=n(Aa,"P",{});var ZTt=s(uve);aEr=r(ZTt,"Examples:"),ZTt.forEach(t),nEr=i(Aa),m(N8.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),lPe=i(c),Jc=n(c,"H2",{class:!0});var bIe=s(Jc);T5=n(bIe,"A",{id:!0,class:!0,href:!0});var eMt=s(T5);bve=n(eMt,"SPAN",{});var oMt=s(bve);m(j8.$$.fragment,oMt),oMt.forEach(t),eMt.forEach(t),sEr=i(bIe),vve=n(bIe,"SPAN",{});var rMt=s(vve);lEr=r(rMt,"TFAutoModelForSpeechSeq2Seq"),rMt.forEach(t),bIe.forEach(t),iPe=i(c),Sr=n(c,"DIV",{class:!0});var fi=s(Sr);m(D8.$$.fragment,fi),iEr=i(fi),Yc=n(fi,"P",{});var jJ=s(Yc);dEr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),DQ=n(jJ,"A",{href:!0});var tMt=s(DQ);cEr=r(tMt,"from_pretrained()"),tMt.forEach(t),fEr=r(jJ," class method or the "),GQ=n(jJ,"A",{href:!0});var aMt=s(GQ);mEr=r(aMt,"from_config()"),aMt.forEach(t),gEr=r(jJ,` class
method.`),jJ.forEach(t),hEr=i(fi),G8=n(fi,"P",{});var vIe=s(G8);pEr=r(vIe,"This class cannot be instantiated directly using "),Fve=n(vIe,"CODE",{});var nMt=s(Fve);_Er=r(nMt,"__init__()"),nMt.forEach(t),uEr=r(vIe," (throws an error)."),vIe.forEach(t),bEr=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(O8.$$.fragment,mi),vEr=i(mi),Tve=n(mi,"P",{});var sMt=s(Tve);FEr=r(sMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sMt.forEach(t),TEr=i(mi),Kc=n(mi,"P",{});var DJ=s(Kc);MEr=r(DJ,`Note:
Loading a model from its configuration file does `),Mve=n(DJ,"STRONG",{});var lMt=s(Mve);EEr=r(lMt,"not"),lMt.forEach(t),CEr=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(DJ,"A",{href:!0});var iMt=s(OQ);wEr=r(iMt,"from_pretrained()"),iMt.forEach(t),AEr=r(DJ," to load the model weights."),DJ.forEach(t),yEr=i(mi),Eve=n(mi,"P",{});var dMt=s(Eve);LEr=r(dMt,"Examples:"),dMt.forEach(t),xEr=i(mi),m(V8.$$.fragment,mi),mi.forEach(t),kEr=i(fi),Ao=n(fi,"DIV",{class:!0});var ya=s(Ao);m(X8.$$.fragment,ya),SEr=i(ya),Cve=n(ya,"P",{});var cMt=s(Cve);REr=r(cMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),cMt.forEach(t),BEr=i(ya),xn=n(ya,"P",{});var pw=s(xn);PEr=r(pw,"The model class to instantiate is selected based on the "),wve=n(pw,"CODE",{});var fMt=s(wve);$Er=r(fMt,"model_type"),fMt.forEach(t),IEr=r(pw,` property of the config object (either
passed as an argument or loaded from `),Ave=n(pw,"CODE",{});var mMt=s(Ave);qEr=r(mMt,"pretrained_model_name_or_path"),mMt.forEach(t),NEr=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yve=n(pw,"CODE",{});var gMt=s(yve);jEr=r(gMt,"pretrained_model_name_or_path"),gMt.forEach(t),DEr=r(pw,":"),pw.forEach(t),GEr=i(ya),Lve=n(ya,"UL",{});var hMt=s(Lve);M5=n(hMt,"LI",{});var Nke=s(M5);xve=n(Nke,"STRONG",{});var pMt=s(xve);OEr=r(pMt,"speech_to_text"),pMt.forEach(t),VEr=r(Nke," \u2014 "),VQ=n(Nke,"A",{href:!0});var _Mt=s(VQ);XEr=r(_Mt,"TFSpeech2TextForConditionalGeneration"),_Mt.forEach(t),zEr=r(Nke," (Speech2Text model)"),Nke.forEach(t),hMt.forEach(t),QEr=i(ya),kve=n(ya,"P",{});var uMt=s(kve);WEr=r(uMt,"Examples:"),uMt.forEach(t),HEr=i(ya),m(z8.$$.fragment,ya),ya.forEach(t),fi.forEach(t),dPe=i(c),Zc=n(c,"H2",{class:!0});var FIe=s(Zc);E5=n(FIe,"A",{id:!0,class:!0,href:!0});var bMt=s(E5);Sve=n(bMt,"SPAN",{});var vMt=s(Sve);m(Q8.$$.fragment,vMt),vMt.forEach(t),bMt.forEach(t),UEr=i(FIe),Rve=n(FIe,"SPAN",{});var FMt=s(Rve);JEr=r(FMt,"FlaxAutoModel"),FMt.forEach(t),FIe.forEach(t),cPe=i(c),Rr=n(c,"DIV",{class:!0});var gi=s(Rr);m(W8.$$.fragment,gi),YEr=i(gi),ef=n(gi,"P",{});var GJ=s(ef);KEr=r(GJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),XQ=n(GJ,"A",{href:!0});var TMt=s(XQ);ZEr=r(TMt,"from_pretrained()"),TMt.forEach(t),e5r=r(GJ," class method or the "),zQ=n(GJ,"A",{href:!0});var MMt=s(zQ);o5r=r(MMt,"from_config()"),MMt.forEach(t),r5r=r(GJ,` class
method.`),GJ.forEach(t),t5r=i(gi),H8=n(gi,"P",{});var TIe=s(H8);a5r=r(TIe,"This class cannot be instantiated directly using "),Bve=n(TIe,"CODE",{});var EMt=s(Bve);n5r=r(EMt,"__init__()"),EMt.forEach(t),s5r=r(TIe," (throws an error)."),TIe.forEach(t),l5r=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(U8.$$.fragment,hi),i5r=i(hi),Pve=n(hi,"P",{});var CMt=s(Pve);d5r=r(CMt,"Instantiates one of the base model classes of the library from a configuration."),CMt.forEach(t),c5r=i(hi),of=n(hi,"P",{});var OJ=s(of);f5r=r(OJ,`Note:
Loading a model from its configuration file does `),$ve=n(OJ,"STRONG",{});var wMt=s($ve);m5r=r(wMt,"not"),wMt.forEach(t),g5r=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(OJ,"A",{href:!0});var AMt=s(QQ);h5r=r(AMt,"from_pretrained()"),AMt.forEach(t),p5r=r(OJ," to load the model weights."),OJ.forEach(t),_5r=i(hi),Ive=n(hi,"P",{});var yMt=s(Ive);u5r=r(yMt,"Examples:"),yMt.forEach(t),b5r=i(hi),m(J8.$$.fragment,hi),hi.forEach(t),v5r=i(gi),yo=n(gi,"DIV",{class:!0});var La=s(yo);m(Y8.$$.fragment,La),F5r=i(La),qve=n(La,"P",{});var LMt=s(qve);T5r=r(LMt,"Instantiate one of the base model classes of the library from a pretrained model."),LMt.forEach(t),M5r=i(La),kn=n(La,"P",{});var _w=s(kn);E5r=r(_w,"The model class to instantiate is selected based on the "),Nve=n(_w,"CODE",{});var xMt=s(Nve);C5r=r(xMt,"model_type"),xMt.forEach(t),w5r=r(_w,` property of the config object (either
passed as an argument or loaded from `),jve=n(_w,"CODE",{});var kMt=s(jve);A5r=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),y5r=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(_w,"CODE",{});var SMt=s(Dve);L5r=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),x5r=r(_w,":"),_w.forEach(t),k5r=i(La),z=n(La,"UL",{});var W=s(z);C5=n(W,"LI",{});var jke=s(C5);Gve=n(jke,"STRONG",{});var RMt=s(Gve);S5r=r(RMt,"albert"),RMt.forEach(t),R5r=r(jke," \u2014 "),WQ=n(jke,"A",{href:!0});var BMt=s(WQ);B5r=r(BMt,"FlaxAlbertModel"),BMt.forEach(t),P5r=r(jke," (ALBERT model)"),jke.forEach(t),$5r=i(W),w5=n(W,"LI",{});var Dke=s(w5);Ove=n(Dke,"STRONG",{});var PMt=s(Ove);I5r=r(PMt,"bart"),PMt.forEach(t),q5r=r(Dke," \u2014 "),HQ=n(Dke,"A",{href:!0});var $Mt=s(HQ);N5r=r($Mt,"FlaxBartModel"),$Mt.forEach(t),j5r=r(Dke," (BART model)"),Dke.forEach(t),D5r=i(W),A5=n(W,"LI",{});var Gke=s(A5);Vve=n(Gke,"STRONG",{});var IMt=s(Vve);G5r=r(IMt,"beit"),IMt.forEach(t),O5r=r(Gke," \u2014 "),UQ=n(Gke,"A",{href:!0});var qMt=s(UQ);V5r=r(qMt,"FlaxBeitModel"),qMt.forEach(t),X5r=r(Gke," (BEiT model)"),Gke.forEach(t),z5r=i(W),y5=n(W,"LI",{});var Oke=s(y5);Xve=n(Oke,"STRONG",{});var NMt=s(Xve);Q5r=r(NMt,"bert"),NMt.forEach(t),W5r=r(Oke," \u2014 "),JQ=n(Oke,"A",{href:!0});var jMt=s(JQ);H5r=r(jMt,"FlaxBertModel"),jMt.forEach(t),U5r=r(Oke," (BERT model)"),Oke.forEach(t),J5r=i(W),L5=n(W,"LI",{});var Vke=s(L5);zve=n(Vke,"STRONG",{});var DMt=s(zve);Y5r=r(DMt,"big_bird"),DMt.forEach(t),K5r=r(Vke," \u2014 "),YQ=n(Vke,"A",{href:!0});var GMt=s(YQ);Z5r=r(GMt,"FlaxBigBirdModel"),GMt.forEach(t),e3r=r(Vke," (BigBird model)"),Vke.forEach(t),o3r=i(W),x5=n(W,"LI",{});var Xke=s(x5);Qve=n(Xke,"STRONG",{});var OMt=s(Qve);r3r=r(OMt,"blenderbot"),OMt.forEach(t),t3r=r(Xke," \u2014 "),KQ=n(Xke,"A",{href:!0});var VMt=s(KQ);a3r=r(VMt,"FlaxBlenderbotModel"),VMt.forEach(t),n3r=r(Xke," (Blenderbot model)"),Xke.forEach(t),s3r=i(W),k5=n(W,"LI",{});var zke=s(k5);Wve=n(zke,"STRONG",{});var XMt=s(Wve);l3r=r(XMt,"blenderbot-small"),XMt.forEach(t),i3r=r(zke," \u2014 "),ZQ=n(zke,"A",{href:!0});var zMt=s(ZQ);d3r=r(zMt,"FlaxBlenderbotSmallModel"),zMt.forEach(t),c3r=r(zke," (BlenderbotSmall model)"),zke.forEach(t),f3r=i(W),S5=n(W,"LI",{});var Qke=s(S5);Hve=n(Qke,"STRONG",{});var QMt=s(Hve);m3r=r(QMt,"clip"),QMt.forEach(t),g3r=r(Qke," \u2014 "),eW=n(Qke,"A",{href:!0});var WMt=s(eW);h3r=r(WMt,"FlaxCLIPModel"),WMt.forEach(t),p3r=r(Qke," (CLIP model)"),Qke.forEach(t),_3r=i(W),R5=n(W,"LI",{});var Wke=s(R5);Uve=n(Wke,"STRONG",{});var HMt=s(Uve);u3r=r(HMt,"distilbert"),HMt.forEach(t),b3r=r(Wke," \u2014 "),oW=n(Wke,"A",{href:!0});var UMt=s(oW);v3r=r(UMt,"FlaxDistilBertModel"),UMt.forEach(t),F3r=r(Wke," (DistilBERT model)"),Wke.forEach(t),T3r=i(W),B5=n(W,"LI",{});var Hke=s(B5);Jve=n(Hke,"STRONG",{});var JMt=s(Jve);M3r=r(JMt,"electra"),JMt.forEach(t),E3r=r(Hke," \u2014 "),rW=n(Hke,"A",{href:!0});var YMt=s(rW);C3r=r(YMt,"FlaxElectraModel"),YMt.forEach(t),w3r=r(Hke," (ELECTRA model)"),Hke.forEach(t),A3r=i(W),P5=n(W,"LI",{});var Uke=s(P5);Yve=n(Uke,"STRONG",{});var KMt=s(Yve);y3r=r(KMt,"gpt2"),KMt.forEach(t),L3r=r(Uke," \u2014 "),tW=n(Uke,"A",{href:!0});var ZMt=s(tW);x3r=r(ZMt,"FlaxGPT2Model"),ZMt.forEach(t),k3r=r(Uke," (OpenAI GPT-2 model)"),Uke.forEach(t),S3r=i(W),$5=n(W,"LI",{});var Jke=s($5);Kve=n(Jke,"STRONG",{});var e4t=s(Kve);R3r=r(e4t,"gpt_neo"),e4t.forEach(t),B3r=r(Jke," \u2014 "),aW=n(Jke,"A",{href:!0});var o4t=s(aW);P3r=r(o4t,"FlaxGPTNeoModel"),o4t.forEach(t),$3r=r(Jke," (GPT Neo model)"),Jke.forEach(t),I3r=i(W),I5=n(W,"LI",{});var Yke=s(I5);Zve=n(Yke,"STRONG",{});var r4t=s(Zve);q3r=r(r4t,"gptj"),r4t.forEach(t),N3r=r(Yke," \u2014 "),nW=n(Yke,"A",{href:!0});var t4t=s(nW);j3r=r(t4t,"FlaxGPTJModel"),t4t.forEach(t),D3r=r(Yke," (GPT-J model)"),Yke.forEach(t),G3r=i(W),q5=n(W,"LI",{});var Kke=s(q5);eFe=n(Kke,"STRONG",{});var a4t=s(eFe);O3r=r(a4t,"marian"),a4t.forEach(t),V3r=r(Kke," \u2014 "),sW=n(Kke,"A",{href:!0});var n4t=s(sW);X3r=r(n4t,"FlaxMarianModel"),n4t.forEach(t),z3r=r(Kke," (Marian model)"),Kke.forEach(t),Q3r=i(W),N5=n(W,"LI",{});var Zke=s(N5);oFe=n(Zke,"STRONG",{});var s4t=s(oFe);W3r=r(s4t,"mbart"),s4t.forEach(t),H3r=r(Zke," \u2014 "),lW=n(Zke,"A",{href:!0});var l4t=s(lW);U3r=r(l4t,"FlaxMBartModel"),l4t.forEach(t),J3r=r(Zke," (mBART model)"),Zke.forEach(t),Y3r=i(W),j5=n(W,"LI",{});var eSe=s(j5);rFe=n(eSe,"STRONG",{});var i4t=s(rFe);K3r=r(i4t,"mt5"),i4t.forEach(t),Z3r=r(eSe," \u2014 "),iW=n(eSe,"A",{href:!0});var d4t=s(iW);eCr=r(d4t,"FlaxMT5Model"),d4t.forEach(t),oCr=r(eSe," (mT5 model)"),eSe.forEach(t),rCr=i(W),D5=n(W,"LI",{});var oSe=s(D5);tFe=n(oSe,"STRONG",{});var c4t=s(tFe);tCr=r(c4t,"pegasus"),c4t.forEach(t),aCr=r(oSe," \u2014 "),dW=n(oSe,"A",{href:!0});var f4t=s(dW);nCr=r(f4t,"FlaxPegasusModel"),f4t.forEach(t),sCr=r(oSe," (Pegasus model)"),oSe.forEach(t),lCr=i(W),G5=n(W,"LI",{});var rSe=s(G5);aFe=n(rSe,"STRONG",{});var m4t=s(aFe);iCr=r(m4t,"roberta"),m4t.forEach(t),dCr=r(rSe," \u2014 "),cW=n(rSe,"A",{href:!0});var g4t=s(cW);cCr=r(g4t,"FlaxRobertaModel"),g4t.forEach(t),fCr=r(rSe," (RoBERTa model)"),rSe.forEach(t),mCr=i(W),O5=n(W,"LI",{});var tSe=s(O5);nFe=n(tSe,"STRONG",{});var h4t=s(nFe);gCr=r(h4t,"roformer"),h4t.forEach(t),hCr=r(tSe," \u2014 "),fW=n(tSe,"A",{href:!0});var p4t=s(fW);pCr=r(p4t,"FlaxRoFormerModel"),p4t.forEach(t),_Cr=r(tSe," (RoFormer model)"),tSe.forEach(t),uCr=i(W),V5=n(W,"LI",{});var aSe=s(V5);sFe=n(aSe,"STRONG",{});var _4t=s(sFe);bCr=r(_4t,"t5"),_4t.forEach(t),vCr=r(aSe," \u2014 "),mW=n(aSe,"A",{href:!0});var u4t=s(mW);FCr=r(u4t,"FlaxT5Model"),u4t.forEach(t),TCr=r(aSe," (T5 model)"),aSe.forEach(t),MCr=i(W),X5=n(W,"LI",{});var nSe=s(X5);lFe=n(nSe,"STRONG",{});var b4t=s(lFe);ECr=r(b4t,"vision-text-dual-encoder"),b4t.forEach(t),CCr=r(nSe," \u2014 "),gW=n(nSe,"A",{href:!0});var v4t=s(gW);wCr=r(v4t,"FlaxVisionTextDualEncoderModel"),v4t.forEach(t),ACr=r(nSe," (VisionTextDualEncoder model)"),nSe.forEach(t),yCr=i(W),z5=n(W,"LI",{});var sSe=s(z5);iFe=n(sSe,"STRONG",{});var F4t=s(iFe);LCr=r(F4t,"vit"),F4t.forEach(t),xCr=r(sSe," \u2014 "),hW=n(sSe,"A",{href:!0});var T4t=s(hW);kCr=r(T4t,"FlaxViTModel"),T4t.forEach(t),SCr=r(sSe," (ViT model)"),sSe.forEach(t),RCr=i(W),Q5=n(W,"LI",{});var lSe=s(Q5);dFe=n(lSe,"STRONG",{});var M4t=s(dFe);BCr=r(M4t,"wav2vec2"),M4t.forEach(t),PCr=r(lSe," \u2014 "),pW=n(lSe,"A",{href:!0});var E4t=s(pW);$Cr=r(E4t,"FlaxWav2Vec2Model"),E4t.forEach(t),ICr=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),qCr=i(W),W5=n(W,"LI",{});var iSe=s(W5);cFe=n(iSe,"STRONG",{});var C4t=s(cFe);NCr=r(C4t,"xglm"),C4t.forEach(t),jCr=r(iSe," \u2014 "),_W=n(iSe,"A",{href:!0});var w4t=s(_W);DCr=r(w4t,"FlaxXGLMModel"),w4t.forEach(t),GCr=r(iSe," (XGLM model)"),iSe.forEach(t),OCr=i(W),H5=n(W,"LI",{});var dSe=s(H5);fFe=n(dSe,"STRONG",{});var A4t=s(fFe);VCr=r(A4t,"xlm-roberta"),A4t.forEach(t),XCr=r(dSe," \u2014 "),uW=n(dSe,"A",{href:!0});var y4t=s(uW);zCr=r(y4t,"FlaxXLMRobertaModel"),y4t.forEach(t),QCr=r(dSe," (XLM-RoBERTa model)"),dSe.forEach(t),W.forEach(t),WCr=i(La),mFe=n(La,"P",{});var L4t=s(mFe);HCr=r(L4t,"Examples:"),L4t.forEach(t),UCr=i(La),m(K8.$$.fragment,La),La.forEach(t),gi.forEach(t),fPe=i(c),rf=n(c,"H2",{class:!0});var MIe=s(rf);U5=n(MIe,"A",{id:!0,class:!0,href:!0});var x4t=s(U5);gFe=n(x4t,"SPAN",{});var k4t=s(gFe);m(Z8.$$.fragment,k4t),k4t.forEach(t),x4t.forEach(t),JCr=i(MIe),hFe=n(MIe,"SPAN",{});var S4t=s(hFe);YCr=r(S4t,"FlaxAutoModelForCausalLM"),S4t.forEach(t),MIe.forEach(t),mPe=i(c),Br=n(c,"DIV",{class:!0});var pi=s(Br);m(eL.$$.fragment,pi),KCr=i(pi),tf=n(pi,"P",{});var VJ=s(tf);ZCr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bW=n(VJ,"A",{href:!0});var R4t=s(bW);ewr=r(R4t,"from_pretrained()"),R4t.forEach(t),owr=r(VJ," class method or the "),vW=n(VJ,"A",{href:!0});var B4t=s(vW);rwr=r(B4t,"from_config()"),B4t.forEach(t),twr=r(VJ,` class
method.`),VJ.forEach(t),awr=i(pi),oL=n(pi,"P",{});var EIe=s(oL);nwr=r(EIe,"This class cannot be instantiated directly using "),pFe=n(EIe,"CODE",{});var P4t=s(pFe);swr=r(P4t,"__init__()"),P4t.forEach(t),lwr=r(EIe," (throws an error)."),EIe.forEach(t),iwr=i(pi),yt=n(pi,"DIV",{class:!0});var _i=s(yt);m(rL.$$.fragment,_i),dwr=i(_i),_Fe=n(_i,"P",{});var $4t=s(_Fe);cwr=r($4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$4t.forEach(t),fwr=i(_i),af=n(_i,"P",{});var XJ=s(af);mwr=r(XJ,`Note:
Loading a model from its configuration file does `),uFe=n(XJ,"STRONG",{});var I4t=s(uFe);gwr=r(I4t,"not"),I4t.forEach(t),hwr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(XJ,"A",{href:!0});var q4t=s(FW);pwr=r(q4t,"from_pretrained()"),q4t.forEach(t),_wr=r(XJ," to load the model weights."),XJ.forEach(t),uwr=i(_i),bFe=n(_i,"P",{});var N4t=s(bFe);bwr=r(N4t,"Examples:"),N4t.forEach(t),vwr=i(_i),m(tL.$$.fragment,_i),_i.forEach(t),Fwr=i(pi),Lo=n(pi,"DIV",{class:!0});var xa=s(Lo);m(aL.$$.fragment,xa),Twr=i(xa),vFe=n(xa,"P",{});var j4t=s(vFe);Mwr=r(j4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j4t.forEach(t),Ewr=i(xa),Sn=n(xa,"P",{});var uw=s(Sn);Cwr=r(uw,"The model class to instantiate is selected based on the "),FFe=n(uw,"CODE",{});var D4t=s(FFe);wwr=r(D4t,"model_type"),D4t.forEach(t),Awr=r(uw,` property of the config object (either
passed as an argument or loaded from `),TFe=n(uw,"CODE",{});var G4t=s(TFe);ywr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),Lwr=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(uw,"CODE",{});var O4t=s(MFe);xwr=r(O4t,"pretrained_model_name_or_path"),O4t.forEach(t),kwr=r(uw,":"),uw.forEach(t),Swr=i(xa),ca=n(xa,"UL",{});var ui=s(ca);J5=n(ui,"LI",{});var cSe=s(J5);EFe=n(cSe,"STRONG",{});var V4t=s(EFe);Rwr=r(V4t,"bart"),V4t.forEach(t),Bwr=r(cSe," \u2014 "),TW=n(cSe,"A",{href:!0});var X4t=s(TW);Pwr=r(X4t,"FlaxBartForCausalLM"),X4t.forEach(t),$wr=r(cSe," (BART model)"),cSe.forEach(t),Iwr=i(ui),Y5=n(ui,"LI",{});var fSe=s(Y5);CFe=n(fSe,"STRONG",{});var z4t=s(CFe);qwr=r(z4t,"gpt2"),z4t.forEach(t),Nwr=r(fSe," \u2014 "),MW=n(fSe,"A",{href:!0});var Q4t=s(MW);jwr=r(Q4t,"FlaxGPT2LMHeadModel"),Q4t.forEach(t),Dwr=r(fSe," (OpenAI GPT-2 model)"),fSe.forEach(t),Gwr=i(ui),K5=n(ui,"LI",{});var mSe=s(K5);wFe=n(mSe,"STRONG",{});var W4t=s(wFe);Owr=r(W4t,"gpt_neo"),W4t.forEach(t),Vwr=r(mSe," \u2014 "),EW=n(mSe,"A",{href:!0});var H4t=s(EW);Xwr=r(H4t,"FlaxGPTNeoForCausalLM"),H4t.forEach(t),zwr=r(mSe," (GPT Neo model)"),mSe.forEach(t),Qwr=i(ui),Z5=n(ui,"LI",{});var gSe=s(Z5);AFe=n(gSe,"STRONG",{});var U4t=s(AFe);Wwr=r(U4t,"gptj"),U4t.forEach(t),Hwr=r(gSe," \u2014 "),CW=n(gSe,"A",{href:!0});var J4t=s(CW);Uwr=r(J4t,"FlaxGPTJForCausalLM"),J4t.forEach(t),Jwr=r(gSe," (GPT-J model)"),gSe.forEach(t),Ywr=i(ui),e3=n(ui,"LI",{});var hSe=s(e3);yFe=n(hSe,"STRONG",{});var Y4t=s(yFe);Kwr=r(Y4t,"xglm"),Y4t.forEach(t),Zwr=r(hSe," \u2014 "),wW=n(hSe,"A",{href:!0});var K4t=s(wW);e6r=r(K4t,"FlaxXGLMForCausalLM"),K4t.forEach(t),o6r=r(hSe," (XGLM model)"),hSe.forEach(t),ui.forEach(t),r6r=i(xa),LFe=n(xa,"P",{});var Z4t=s(LFe);t6r=r(Z4t,"Examples:"),Z4t.forEach(t),a6r=i(xa),m(nL.$$.fragment,xa),xa.forEach(t),pi.forEach(t),gPe=i(c),nf=n(c,"H2",{class:!0});var CIe=s(nf);o3=n(CIe,"A",{id:!0,class:!0,href:!0});var eEt=s(o3);xFe=n(eEt,"SPAN",{});var oEt=s(xFe);m(sL.$$.fragment,oEt),oEt.forEach(t),eEt.forEach(t),n6r=i(CIe),kFe=n(CIe,"SPAN",{});var rEt=s(kFe);s6r=r(rEt,"FlaxAutoModelForPreTraining"),rEt.forEach(t),CIe.forEach(t),hPe=i(c),Pr=n(c,"DIV",{class:!0});var bi=s(Pr);m(lL.$$.fragment,bi),l6r=i(bi),sf=n(bi,"P",{});var zJ=s(sf);i6r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),AW=n(zJ,"A",{href:!0});var tEt=s(AW);d6r=r(tEt,"from_pretrained()"),tEt.forEach(t),c6r=r(zJ," class method or the "),yW=n(zJ,"A",{href:!0});var aEt=s(yW);f6r=r(aEt,"from_config()"),aEt.forEach(t),m6r=r(zJ,` class
method.`),zJ.forEach(t),g6r=i(bi),iL=n(bi,"P",{});var wIe=s(iL);h6r=r(wIe,"This class cannot be instantiated directly using "),SFe=n(wIe,"CODE",{});var nEt=s(SFe);p6r=r(nEt,"__init__()"),nEt.forEach(t),_6r=r(wIe," (throws an error)."),wIe.forEach(t),u6r=i(bi),Lt=n(bi,"DIV",{class:!0});var vi=s(Lt);m(dL.$$.fragment,vi),b6r=i(vi),RFe=n(vi,"P",{});var sEt=s(RFe);v6r=r(sEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sEt.forEach(t),F6r=i(vi),lf=n(vi,"P",{});var QJ=s(lf);T6r=r(QJ,`Note:
Loading a model from its configuration file does `),BFe=n(QJ,"STRONG",{});var lEt=s(BFe);M6r=r(lEt,"not"),lEt.forEach(t),E6r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LW=n(QJ,"A",{href:!0});var iEt=s(LW);C6r=r(iEt,"from_pretrained()"),iEt.forEach(t),w6r=r(QJ," to load the model weights."),QJ.forEach(t),A6r=i(vi),PFe=n(vi,"P",{});var dEt=s(PFe);y6r=r(dEt,"Examples:"),dEt.forEach(t),L6r=i(vi),m(cL.$$.fragment,vi),vi.forEach(t),x6r=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(fL.$$.fragment,ka),k6r=i(ka),$Fe=n(ka,"P",{});var cEt=s($Fe);S6r=r(cEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cEt.forEach(t),R6r=i(ka),Rn=n(ka,"P",{});var bw=s(Rn);B6r=r(bw,"The model class to instantiate is selected based on the "),IFe=n(bw,"CODE",{});var fEt=s(IFe);P6r=r(fEt,"model_type"),fEt.forEach(t),$6r=r(bw,` property of the config object (either
passed as an argument or loaded from `),qFe=n(bw,"CODE",{});var mEt=s(qFe);I6r=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),q6r=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(bw,"CODE",{});var gEt=s(NFe);N6r=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),j6r=r(bw,":"),bw.forEach(t),D6r=i(ka),me=n(ka,"UL",{});var _e=s(me);r3=n(_e,"LI",{});var pSe=s(r3);jFe=n(pSe,"STRONG",{});var hEt=s(jFe);G6r=r(hEt,"albert"),hEt.forEach(t),O6r=r(pSe," \u2014 "),xW=n(pSe,"A",{href:!0});var pEt=s(xW);V6r=r(pEt,"FlaxAlbertForPreTraining"),pEt.forEach(t),X6r=r(pSe," (ALBERT model)"),pSe.forEach(t),z6r=i(_e),t3=n(_e,"LI",{});var _Se=s(t3);DFe=n(_Se,"STRONG",{});var _Et=s(DFe);Q6r=r(_Et,"bart"),_Et.forEach(t),W6r=r(_Se," \u2014 "),kW=n(_Se,"A",{href:!0});var uEt=s(kW);H6r=r(uEt,"FlaxBartForConditionalGeneration"),uEt.forEach(t),U6r=r(_Se," (BART model)"),_Se.forEach(t),J6r=i(_e),a3=n(_e,"LI",{});var uSe=s(a3);GFe=n(uSe,"STRONG",{});var bEt=s(GFe);Y6r=r(bEt,"bert"),bEt.forEach(t),K6r=r(uSe," \u2014 "),SW=n(uSe,"A",{href:!0});var vEt=s(SW);Z6r=r(vEt,"FlaxBertForPreTraining"),vEt.forEach(t),eAr=r(uSe," (BERT model)"),uSe.forEach(t),oAr=i(_e),n3=n(_e,"LI",{});var bSe=s(n3);OFe=n(bSe,"STRONG",{});var FEt=s(OFe);rAr=r(FEt,"big_bird"),FEt.forEach(t),tAr=r(bSe," \u2014 "),RW=n(bSe,"A",{href:!0});var TEt=s(RW);aAr=r(TEt,"FlaxBigBirdForPreTraining"),TEt.forEach(t),nAr=r(bSe," (BigBird model)"),bSe.forEach(t),sAr=i(_e),s3=n(_e,"LI",{});var vSe=s(s3);VFe=n(vSe,"STRONG",{});var MEt=s(VFe);lAr=r(MEt,"electra"),MEt.forEach(t),iAr=r(vSe," \u2014 "),BW=n(vSe,"A",{href:!0});var EEt=s(BW);dAr=r(EEt,"FlaxElectraForPreTraining"),EEt.forEach(t),cAr=r(vSe," (ELECTRA model)"),vSe.forEach(t),fAr=i(_e),l3=n(_e,"LI",{});var FSe=s(l3);XFe=n(FSe,"STRONG",{});var CEt=s(XFe);mAr=r(CEt,"mbart"),CEt.forEach(t),gAr=r(FSe," \u2014 "),PW=n(FSe,"A",{href:!0});var wEt=s(PW);hAr=r(wEt,"FlaxMBartForConditionalGeneration"),wEt.forEach(t),pAr=r(FSe," (mBART model)"),FSe.forEach(t),_Ar=i(_e),i3=n(_e,"LI",{});var TSe=s(i3);zFe=n(TSe,"STRONG",{});var AEt=s(zFe);uAr=r(AEt,"mt5"),AEt.forEach(t),bAr=r(TSe," \u2014 "),$W=n(TSe,"A",{href:!0});var yEt=s($W);vAr=r(yEt,"FlaxMT5ForConditionalGeneration"),yEt.forEach(t),FAr=r(TSe," (mT5 model)"),TSe.forEach(t),TAr=i(_e),d3=n(_e,"LI",{});var MSe=s(d3);QFe=n(MSe,"STRONG",{});var LEt=s(QFe);MAr=r(LEt,"roberta"),LEt.forEach(t),EAr=r(MSe," \u2014 "),IW=n(MSe,"A",{href:!0});var xEt=s(IW);CAr=r(xEt,"FlaxRobertaForMaskedLM"),xEt.forEach(t),wAr=r(MSe," (RoBERTa model)"),MSe.forEach(t),AAr=i(_e),c3=n(_e,"LI",{});var ESe=s(c3);WFe=n(ESe,"STRONG",{});var kEt=s(WFe);yAr=r(kEt,"roformer"),kEt.forEach(t),LAr=r(ESe," \u2014 "),qW=n(ESe,"A",{href:!0});var SEt=s(qW);xAr=r(SEt,"FlaxRoFormerForMaskedLM"),SEt.forEach(t),kAr=r(ESe," (RoFormer model)"),ESe.forEach(t),SAr=i(_e),f3=n(_e,"LI",{});var CSe=s(f3);HFe=n(CSe,"STRONG",{});var REt=s(HFe);RAr=r(REt,"t5"),REt.forEach(t),BAr=r(CSe," \u2014 "),NW=n(CSe,"A",{href:!0});var BEt=s(NW);PAr=r(BEt,"FlaxT5ForConditionalGeneration"),BEt.forEach(t),$Ar=r(CSe," (T5 model)"),CSe.forEach(t),IAr=i(_e),m3=n(_e,"LI",{});var wSe=s(m3);UFe=n(wSe,"STRONG",{});var PEt=s(UFe);qAr=r(PEt,"wav2vec2"),PEt.forEach(t),NAr=r(wSe," \u2014 "),jW=n(wSe,"A",{href:!0});var $Et=s(jW);jAr=r($Et,"FlaxWav2Vec2ForPreTraining"),$Et.forEach(t),DAr=r(wSe," (Wav2Vec2 model)"),wSe.forEach(t),GAr=i(_e),g3=n(_e,"LI",{});var ASe=s(g3);JFe=n(ASe,"STRONG",{});var IEt=s(JFe);OAr=r(IEt,"xlm-roberta"),IEt.forEach(t),VAr=r(ASe," \u2014 "),DW=n(ASe,"A",{href:!0});var qEt=s(DW);XAr=r(qEt,"FlaxXLMRobertaForMaskedLM"),qEt.forEach(t),zAr=r(ASe," (XLM-RoBERTa model)"),ASe.forEach(t),_e.forEach(t),QAr=i(ka),YFe=n(ka,"P",{});var NEt=s(YFe);WAr=r(NEt,"Examples:"),NEt.forEach(t),HAr=i(ka),m(mL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),pPe=i(c),df=n(c,"H2",{class:!0});var AIe=s(df);h3=n(AIe,"A",{id:!0,class:!0,href:!0});var jEt=s(h3);KFe=n(jEt,"SPAN",{});var DEt=s(KFe);m(gL.$$.fragment,DEt),DEt.forEach(t),jEt.forEach(t),UAr=i(AIe),ZFe=n(AIe,"SPAN",{});var GEt=s(ZFe);JAr=r(GEt,"FlaxAutoModelForMaskedLM"),GEt.forEach(t),AIe.forEach(t),_Pe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(hL.$$.fragment,Fi),YAr=i(Fi),cf=n(Fi,"P",{});var WJ=s(cf);KAr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),GW=n(WJ,"A",{href:!0});var OEt=s(GW);ZAr=r(OEt,"from_pretrained()"),OEt.forEach(t),e0r=r(WJ," class method or the "),OW=n(WJ,"A",{href:!0});var VEt=s(OW);o0r=r(VEt,"from_config()"),VEt.forEach(t),r0r=r(WJ,` class
method.`),WJ.forEach(t),t0r=i(Fi),pL=n(Fi,"P",{});var yIe=s(pL);a0r=r(yIe,"This class cannot be instantiated directly using "),eTe=n(yIe,"CODE",{});var XEt=s(eTe);n0r=r(XEt,"__init__()"),XEt.forEach(t),s0r=r(yIe," (throws an error)."),yIe.forEach(t),l0r=i(Fi),xt=n(Fi,"DIV",{class:!0});var Ti=s(xt);m(_L.$$.fragment,Ti),i0r=i(Ti),oTe=n(Ti,"P",{});var zEt=s(oTe);d0r=r(zEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zEt.forEach(t),c0r=i(Ti),ff=n(Ti,"P",{});var HJ=s(ff);f0r=r(HJ,`Note:
Loading a model from its configuration file does `),rTe=n(HJ,"STRONG",{});var QEt=s(rTe);m0r=r(QEt,"not"),QEt.forEach(t),g0r=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(HJ,"A",{href:!0});var WEt=s(VW);h0r=r(WEt,"from_pretrained()"),WEt.forEach(t),p0r=r(HJ," to load the model weights."),HJ.forEach(t),_0r=i(Ti),tTe=n(Ti,"P",{});var HEt=s(tTe);u0r=r(HEt,"Examples:"),HEt.forEach(t),b0r=i(Ti),m(uL.$$.fragment,Ti),Ti.forEach(t),v0r=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(bL.$$.fragment,Sa),F0r=i(Sa),aTe=n(Sa,"P",{});var UEt=s(aTe);T0r=r(UEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),UEt.forEach(t),M0r=i(Sa),Bn=n(Sa,"P",{});var vw=s(Bn);E0r=r(vw,"The model class to instantiate is selected based on the "),nTe=n(vw,"CODE",{});var JEt=s(nTe);C0r=r(JEt,"model_type"),JEt.forEach(t),w0r=r(vw,` property of the config object (either
passed as an argument or loaded from `),sTe=n(vw,"CODE",{});var YEt=s(sTe);A0r=r(YEt,"pretrained_model_name_or_path"),YEt.forEach(t),y0r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lTe=n(vw,"CODE",{});var KEt=s(lTe);L0r=r(KEt,"pretrained_model_name_or_path"),KEt.forEach(t),x0r=r(vw,":"),vw.forEach(t),k0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);p3=n(Ae,"LI",{});var ySe=s(p3);iTe=n(ySe,"STRONG",{});var ZEt=s(iTe);S0r=r(ZEt,"albert"),ZEt.forEach(t),R0r=r(ySe," \u2014 "),XW=n(ySe,"A",{href:!0});var e5t=s(XW);B0r=r(e5t,"FlaxAlbertForMaskedLM"),e5t.forEach(t),P0r=r(ySe," (ALBERT model)"),ySe.forEach(t),$0r=i(Ae),_3=n(Ae,"LI",{});var LSe=s(_3);dTe=n(LSe,"STRONG",{});var o5t=s(dTe);I0r=r(o5t,"bart"),o5t.forEach(t),q0r=r(LSe," \u2014 "),zW=n(LSe,"A",{href:!0});var r5t=s(zW);N0r=r(r5t,"FlaxBartForConditionalGeneration"),r5t.forEach(t),j0r=r(LSe," (BART model)"),LSe.forEach(t),D0r=i(Ae),u3=n(Ae,"LI",{});var xSe=s(u3);cTe=n(xSe,"STRONG",{});var t5t=s(cTe);G0r=r(t5t,"bert"),t5t.forEach(t),O0r=r(xSe," \u2014 "),QW=n(xSe,"A",{href:!0});var a5t=s(QW);V0r=r(a5t,"FlaxBertForMaskedLM"),a5t.forEach(t),X0r=r(xSe," (BERT model)"),xSe.forEach(t),z0r=i(Ae),b3=n(Ae,"LI",{});var kSe=s(b3);fTe=n(kSe,"STRONG",{});var n5t=s(fTe);Q0r=r(n5t,"big_bird"),n5t.forEach(t),W0r=r(kSe," \u2014 "),WW=n(kSe,"A",{href:!0});var s5t=s(WW);H0r=r(s5t,"FlaxBigBirdForMaskedLM"),s5t.forEach(t),U0r=r(kSe," (BigBird model)"),kSe.forEach(t),J0r=i(Ae),v3=n(Ae,"LI",{});var SSe=s(v3);mTe=n(SSe,"STRONG",{});var l5t=s(mTe);Y0r=r(l5t,"distilbert"),l5t.forEach(t),K0r=r(SSe," \u2014 "),HW=n(SSe,"A",{href:!0});var i5t=s(HW);Z0r=r(i5t,"FlaxDistilBertForMaskedLM"),i5t.forEach(t),eyr=r(SSe," (DistilBERT model)"),SSe.forEach(t),oyr=i(Ae),F3=n(Ae,"LI",{});var RSe=s(F3);gTe=n(RSe,"STRONG",{});var d5t=s(gTe);ryr=r(d5t,"electra"),d5t.forEach(t),tyr=r(RSe," \u2014 "),UW=n(RSe,"A",{href:!0});var c5t=s(UW);ayr=r(c5t,"FlaxElectraForMaskedLM"),c5t.forEach(t),nyr=r(RSe," (ELECTRA model)"),RSe.forEach(t),syr=i(Ae),T3=n(Ae,"LI",{});var BSe=s(T3);hTe=n(BSe,"STRONG",{});var f5t=s(hTe);lyr=r(f5t,"mbart"),f5t.forEach(t),iyr=r(BSe," \u2014 "),JW=n(BSe,"A",{href:!0});var m5t=s(JW);dyr=r(m5t,"FlaxMBartForConditionalGeneration"),m5t.forEach(t),cyr=r(BSe," (mBART model)"),BSe.forEach(t),fyr=i(Ae),M3=n(Ae,"LI",{});var PSe=s(M3);pTe=n(PSe,"STRONG",{});var g5t=s(pTe);myr=r(g5t,"roberta"),g5t.forEach(t),gyr=r(PSe," \u2014 "),YW=n(PSe,"A",{href:!0});var h5t=s(YW);hyr=r(h5t,"FlaxRobertaForMaskedLM"),h5t.forEach(t),pyr=r(PSe," (RoBERTa model)"),PSe.forEach(t),_yr=i(Ae),E3=n(Ae,"LI",{});var $Se=s(E3);_Te=n($Se,"STRONG",{});var p5t=s(_Te);uyr=r(p5t,"roformer"),p5t.forEach(t),byr=r($Se," \u2014 "),KW=n($Se,"A",{href:!0});var _5t=s(KW);vyr=r(_5t,"FlaxRoFormerForMaskedLM"),_5t.forEach(t),Fyr=r($Se," (RoFormer model)"),$Se.forEach(t),Tyr=i(Ae),C3=n(Ae,"LI",{});var ISe=s(C3);uTe=n(ISe,"STRONG",{});var u5t=s(uTe);Myr=r(u5t,"xlm-roberta"),u5t.forEach(t),Eyr=r(ISe," \u2014 "),ZW=n(ISe,"A",{href:!0});var b5t=s(ZW);Cyr=r(b5t,"FlaxXLMRobertaForMaskedLM"),b5t.forEach(t),wyr=r(ISe," (XLM-RoBERTa model)"),ISe.forEach(t),Ae.forEach(t),Ayr=i(Sa),bTe=n(Sa,"P",{});var v5t=s(bTe);yyr=r(v5t,"Examples:"),v5t.forEach(t),Lyr=i(Sa),m(vL.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),uPe=i(c),mf=n(c,"H2",{class:!0});var LIe=s(mf);w3=n(LIe,"A",{id:!0,class:!0,href:!0});var F5t=s(w3);vTe=n(F5t,"SPAN",{});var T5t=s(vTe);m(FL.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),xyr=i(LIe),FTe=n(LIe,"SPAN",{});var M5t=s(FTe);kyr=r(M5t,"FlaxAutoModelForSeq2SeqLM"),M5t.forEach(t),LIe.forEach(t),bPe=i(c),Ir=n(c,"DIV",{class:!0});var Mi=s(Ir);m(TL.$$.fragment,Mi),Syr=i(Mi),gf=n(Mi,"P",{});var UJ=s(gf);Ryr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),eH=n(UJ,"A",{href:!0});var E5t=s(eH);Byr=r(E5t,"from_pretrained()"),E5t.forEach(t),Pyr=r(UJ," class method or the "),oH=n(UJ,"A",{href:!0});var C5t=s(oH);$yr=r(C5t,"from_config()"),C5t.forEach(t),Iyr=r(UJ,` class
method.`),UJ.forEach(t),qyr=i(Mi),ML=n(Mi,"P",{});var xIe=s(ML);Nyr=r(xIe,"This class cannot be instantiated directly using "),TTe=n(xIe,"CODE",{});var w5t=s(TTe);jyr=r(w5t,"__init__()"),w5t.forEach(t),Dyr=r(xIe," (throws an error)."),xIe.forEach(t),Gyr=i(Mi),kt=n(Mi,"DIV",{class:!0});var Ei=s(kt);m(EL.$$.fragment,Ei),Oyr=i(Ei),MTe=n(Ei,"P",{});var A5t=s(MTe);Vyr=r(A5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),A5t.forEach(t),Xyr=i(Ei),hf=n(Ei,"P",{});var JJ=s(hf);zyr=r(JJ,`Note:
Loading a model from its configuration file does `),ETe=n(JJ,"STRONG",{});var y5t=s(ETe);Qyr=r(y5t,"not"),y5t.forEach(t),Wyr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rH=n(JJ,"A",{href:!0});var L5t=s(rH);Hyr=r(L5t,"from_pretrained()"),L5t.forEach(t),Uyr=r(JJ," to load the model weights."),JJ.forEach(t),Jyr=i(Ei),CTe=n(Ei,"P",{});var x5t=s(CTe);Yyr=r(x5t,"Examples:"),x5t.forEach(t),Kyr=i(Ei),m(CL.$$.fragment,Ei),Ei.forEach(t),Zyr=i(Mi),So=n(Mi,"DIV",{class:!0});var Ra=s(So);m(wL.$$.fragment,Ra),e8r=i(Ra),wTe=n(Ra,"P",{});var k5t=s(wTe);o8r=r(k5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),k5t.forEach(t),r8r=i(Ra),Pn=n(Ra,"P",{});var Fw=s(Pn);t8r=r(Fw,"The model class to instantiate is selected based on the "),ATe=n(Fw,"CODE",{});var S5t=s(ATe);a8r=r(S5t,"model_type"),S5t.forEach(t),n8r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),yTe=n(Fw,"CODE",{});var R5t=s(yTe);s8r=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),l8r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(Fw,"CODE",{});var B5t=s(LTe);i8r=r(B5t,"pretrained_model_name_or_path"),B5t.forEach(t),d8r=r(Fw,":"),Fw.forEach(t),c8r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);A3=n(so,"LI",{});var qSe=s(A3);xTe=n(qSe,"STRONG",{});var P5t=s(xTe);f8r=r(P5t,"bart"),P5t.forEach(t),m8r=r(qSe," \u2014 "),tH=n(qSe,"A",{href:!0});var $5t=s(tH);g8r=r($5t,"FlaxBartForConditionalGeneration"),$5t.forEach(t),h8r=r(qSe," (BART model)"),qSe.forEach(t),p8r=i(so),y3=n(so,"LI",{});var NSe=s(y3);kTe=n(NSe,"STRONG",{});var I5t=s(kTe);_8r=r(I5t,"blenderbot"),I5t.forEach(t),u8r=r(NSe," \u2014 "),aH=n(NSe,"A",{href:!0});var q5t=s(aH);b8r=r(q5t,"FlaxBlenderbotForConditionalGeneration"),q5t.forEach(t),v8r=r(NSe," (Blenderbot model)"),NSe.forEach(t),F8r=i(so),L3=n(so,"LI",{});var jSe=s(L3);STe=n(jSe,"STRONG",{});var N5t=s(STe);T8r=r(N5t,"blenderbot-small"),N5t.forEach(t),M8r=r(jSe," \u2014 "),nH=n(jSe,"A",{href:!0});var j5t=s(nH);E8r=r(j5t,"FlaxBlenderbotSmallForConditionalGeneration"),j5t.forEach(t),C8r=r(jSe," (BlenderbotSmall model)"),jSe.forEach(t),w8r=i(so),x3=n(so,"LI",{});var DSe=s(x3);RTe=n(DSe,"STRONG",{});var D5t=s(RTe);A8r=r(D5t,"encoder-decoder"),D5t.forEach(t),y8r=r(DSe," \u2014 "),sH=n(DSe,"A",{href:!0});var G5t=s(sH);L8r=r(G5t,"FlaxEncoderDecoderModel"),G5t.forEach(t),x8r=r(DSe," (Encoder decoder model)"),DSe.forEach(t),k8r=i(so),k3=n(so,"LI",{});var GSe=s(k3);BTe=n(GSe,"STRONG",{});var O5t=s(BTe);S8r=r(O5t,"marian"),O5t.forEach(t),R8r=r(GSe," \u2014 "),lH=n(GSe,"A",{href:!0});var V5t=s(lH);B8r=r(V5t,"FlaxMarianMTModel"),V5t.forEach(t),P8r=r(GSe," (Marian model)"),GSe.forEach(t),$8r=i(so),S3=n(so,"LI",{});var OSe=s(S3);PTe=n(OSe,"STRONG",{});var X5t=s(PTe);I8r=r(X5t,"mbart"),X5t.forEach(t),q8r=r(OSe," \u2014 "),iH=n(OSe,"A",{href:!0});var z5t=s(iH);N8r=r(z5t,"FlaxMBartForConditionalGeneration"),z5t.forEach(t),j8r=r(OSe," (mBART model)"),OSe.forEach(t),D8r=i(so),R3=n(so,"LI",{});var VSe=s(R3);$Te=n(VSe,"STRONG",{});var Q5t=s($Te);G8r=r(Q5t,"mt5"),Q5t.forEach(t),O8r=r(VSe," \u2014 "),dH=n(VSe,"A",{href:!0});var W5t=s(dH);V8r=r(W5t,"FlaxMT5ForConditionalGeneration"),W5t.forEach(t),X8r=r(VSe," (mT5 model)"),VSe.forEach(t),z8r=i(so),B3=n(so,"LI",{});var XSe=s(B3);ITe=n(XSe,"STRONG",{});var H5t=s(ITe);Q8r=r(H5t,"pegasus"),H5t.forEach(t),W8r=r(XSe," \u2014 "),cH=n(XSe,"A",{href:!0});var U5t=s(cH);H8r=r(U5t,"FlaxPegasusForConditionalGeneration"),U5t.forEach(t),U8r=r(XSe," (Pegasus model)"),XSe.forEach(t),J8r=i(so),P3=n(so,"LI",{});var zSe=s(P3);qTe=n(zSe,"STRONG",{});var J5t=s(qTe);Y8r=r(J5t,"t5"),J5t.forEach(t),K8r=r(zSe," \u2014 "),fH=n(zSe,"A",{href:!0});var Y5t=s(fH);Z8r=r(Y5t,"FlaxT5ForConditionalGeneration"),Y5t.forEach(t),eLr=r(zSe," (T5 model)"),zSe.forEach(t),so.forEach(t),oLr=i(Ra),NTe=n(Ra,"P",{});var K5t=s(NTe);rLr=r(K5t,"Examples:"),K5t.forEach(t),tLr=i(Ra),m(AL.$$.fragment,Ra),Ra.forEach(t),Mi.forEach(t),vPe=i(c),pf=n(c,"H2",{class:!0});var kIe=s(pf);$3=n(kIe,"A",{id:!0,class:!0,href:!0});var Z5t=s($3);jTe=n(Z5t,"SPAN",{});var e3t=s(jTe);m(yL.$$.fragment,e3t),e3t.forEach(t),Z5t.forEach(t),aLr=i(kIe),DTe=n(kIe,"SPAN",{});var o3t=s(DTe);nLr=r(o3t,"FlaxAutoModelForSequenceClassification"),o3t.forEach(t),kIe.forEach(t),FPe=i(c),qr=n(c,"DIV",{class:!0});var Ci=s(qr);m(LL.$$.fragment,Ci),sLr=i(Ci),_f=n(Ci,"P",{});var YJ=s(_f);lLr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mH=n(YJ,"A",{href:!0});var r3t=s(mH);iLr=r(r3t,"from_pretrained()"),r3t.forEach(t),dLr=r(YJ," class method or the "),gH=n(YJ,"A",{href:!0});var t3t=s(gH);cLr=r(t3t,"from_config()"),t3t.forEach(t),fLr=r(YJ,` class
method.`),YJ.forEach(t),mLr=i(Ci),xL=n(Ci,"P",{});var SIe=s(xL);gLr=r(SIe,"This class cannot be instantiated directly using "),GTe=n(SIe,"CODE",{});var a3t=s(GTe);hLr=r(a3t,"__init__()"),a3t.forEach(t),pLr=r(SIe," (throws an error)."),SIe.forEach(t),_Lr=i(Ci),St=n(Ci,"DIV",{class:!0});var wi=s(St);m(kL.$$.fragment,wi),uLr=i(wi),OTe=n(wi,"P",{});var n3t=s(OTe);bLr=r(n3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),n3t.forEach(t),vLr=i(wi),uf=n(wi,"P",{});var KJ=s(uf);FLr=r(KJ,`Note:
Loading a model from its configuration file does `),VTe=n(KJ,"STRONG",{});var s3t=s(VTe);TLr=r(s3t,"not"),s3t.forEach(t),MLr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(KJ,"A",{href:!0});var l3t=s(hH);ELr=r(l3t,"from_pretrained()"),l3t.forEach(t),CLr=r(KJ," to load the model weights."),KJ.forEach(t),wLr=i(wi),XTe=n(wi,"P",{});var i3t=s(XTe);ALr=r(i3t,"Examples:"),i3t.forEach(t),yLr=i(wi),m(SL.$$.fragment,wi),wi.forEach(t),LLr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Ba=s(Ro);m(RL.$$.fragment,Ba),xLr=i(Ba),zTe=n(Ba,"P",{});var d3t=s(zTe);kLr=r(d3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d3t.forEach(t),SLr=i(Ba),$n=n(Ba,"P",{});var Tw=s($n);RLr=r(Tw,"The model class to instantiate is selected based on the "),QTe=n(Tw,"CODE",{});var c3t=s(QTe);BLr=r(c3t,"model_type"),c3t.forEach(t),PLr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),WTe=n(Tw,"CODE",{});var f3t=s(WTe);$Lr=r(f3t,"pretrained_model_name_or_path"),f3t.forEach(t),ILr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(Tw,"CODE",{});var m3t=s(HTe);qLr=r(m3t,"pretrained_model_name_or_path"),m3t.forEach(t),NLr=r(Tw,":"),Tw.forEach(t),jLr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);I3=n(ye,"LI",{});var QSe=s(I3);UTe=n(QSe,"STRONG",{});var g3t=s(UTe);DLr=r(g3t,"albert"),g3t.forEach(t),GLr=r(QSe," \u2014 "),pH=n(QSe,"A",{href:!0});var h3t=s(pH);OLr=r(h3t,"FlaxAlbertForSequenceClassification"),h3t.forEach(t),VLr=r(QSe," (ALBERT model)"),QSe.forEach(t),XLr=i(ye),q3=n(ye,"LI",{});var WSe=s(q3);JTe=n(WSe,"STRONG",{});var p3t=s(JTe);zLr=r(p3t,"bart"),p3t.forEach(t),QLr=r(WSe," \u2014 "),_H=n(WSe,"A",{href:!0});var _3t=s(_H);WLr=r(_3t,"FlaxBartForSequenceClassification"),_3t.forEach(t),HLr=r(WSe," (BART model)"),WSe.forEach(t),ULr=i(ye),N3=n(ye,"LI",{});var HSe=s(N3);YTe=n(HSe,"STRONG",{});var u3t=s(YTe);JLr=r(u3t,"bert"),u3t.forEach(t),YLr=r(HSe," \u2014 "),uH=n(HSe,"A",{href:!0});var b3t=s(uH);KLr=r(b3t,"FlaxBertForSequenceClassification"),b3t.forEach(t),ZLr=r(HSe," (BERT model)"),HSe.forEach(t),e7r=i(ye),j3=n(ye,"LI",{});var USe=s(j3);KTe=n(USe,"STRONG",{});var v3t=s(KTe);o7r=r(v3t,"big_bird"),v3t.forEach(t),r7r=r(USe," \u2014 "),bH=n(USe,"A",{href:!0});var F3t=s(bH);t7r=r(F3t,"FlaxBigBirdForSequenceClassification"),F3t.forEach(t),a7r=r(USe," (BigBird model)"),USe.forEach(t),n7r=i(ye),D3=n(ye,"LI",{});var JSe=s(D3);ZTe=n(JSe,"STRONG",{});var T3t=s(ZTe);s7r=r(T3t,"distilbert"),T3t.forEach(t),l7r=r(JSe," \u2014 "),vH=n(JSe,"A",{href:!0});var M3t=s(vH);i7r=r(M3t,"FlaxDistilBertForSequenceClassification"),M3t.forEach(t),d7r=r(JSe," (DistilBERT model)"),JSe.forEach(t),c7r=i(ye),G3=n(ye,"LI",{});var YSe=s(G3);eMe=n(YSe,"STRONG",{});var E3t=s(eMe);f7r=r(E3t,"electra"),E3t.forEach(t),m7r=r(YSe," \u2014 "),FH=n(YSe,"A",{href:!0});var C3t=s(FH);g7r=r(C3t,"FlaxElectraForSequenceClassification"),C3t.forEach(t),h7r=r(YSe," (ELECTRA model)"),YSe.forEach(t),p7r=i(ye),O3=n(ye,"LI",{});var KSe=s(O3);oMe=n(KSe,"STRONG",{});var w3t=s(oMe);_7r=r(w3t,"mbart"),w3t.forEach(t),u7r=r(KSe," \u2014 "),TH=n(KSe,"A",{href:!0});var A3t=s(TH);b7r=r(A3t,"FlaxMBartForSequenceClassification"),A3t.forEach(t),v7r=r(KSe," (mBART model)"),KSe.forEach(t),F7r=i(ye),V3=n(ye,"LI",{});var ZSe=s(V3);rMe=n(ZSe,"STRONG",{});var y3t=s(rMe);T7r=r(y3t,"roberta"),y3t.forEach(t),M7r=r(ZSe," \u2014 "),MH=n(ZSe,"A",{href:!0});var L3t=s(MH);E7r=r(L3t,"FlaxRobertaForSequenceClassification"),L3t.forEach(t),C7r=r(ZSe," (RoBERTa model)"),ZSe.forEach(t),w7r=i(ye),X3=n(ye,"LI",{});var eRe=s(X3);tMe=n(eRe,"STRONG",{});var x3t=s(tMe);A7r=r(x3t,"roformer"),x3t.forEach(t),y7r=r(eRe," \u2014 "),EH=n(eRe,"A",{href:!0});var k3t=s(EH);L7r=r(k3t,"FlaxRoFormerForSequenceClassification"),k3t.forEach(t),x7r=r(eRe," (RoFormer model)"),eRe.forEach(t),k7r=i(ye),z3=n(ye,"LI",{});var oRe=s(z3);aMe=n(oRe,"STRONG",{});var S3t=s(aMe);S7r=r(S3t,"xlm-roberta"),S3t.forEach(t),R7r=r(oRe," \u2014 "),CH=n(oRe,"A",{href:!0});var R3t=s(CH);B7r=r(R3t,"FlaxXLMRobertaForSequenceClassification"),R3t.forEach(t),P7r=r(oRe," (XLM-RoBERTa model)"),oRe.forEach(t),ye.forEach(t),$7r=i(Ba),nMe=n(Ba,"P",{});var B3t=s(nMe);I7r=r(B3t,"Examples:"),B3t.forEach(t),q7r=i(Ba),m(BL.$$.fragment,Ba),Ba.forEach(t),Ci.forEach(t),TPe=i(c),bf=n(c,"H2",{class:!0});var RIe=s(bf);Q3=n(RIe,"A",{id:!0,class:!0,href:!0});var P3t=s(Q3);sMe=n(P3t,"SPAN",{});var $3t=s(sMe);m(PL.$$.fragment,$3t),$3t.forEach(t),P3t.forEach(t),N7r=i(RIe),lMe=n(RIe,"SPAN",{});var I3t=s(lMe);j7r=r(I3t,"FlaxAutoModelForQuestionAnswering"),I3t.forEach(t),RIe.forEach(t),MPe=i(c),Nr=n(c,"DIV",{class:!0});var Ai=s(Nr);m($L.$$.fragment,Ai),D7r=i(Ai),vf=n(Ai,"P",{});var ZJ=s(vf);G7r=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wH=n(ZJ,"A",{href:!0});var q3t=s(wH);O7r=r(q3t,"from_pretrained()"),q3t.forEach(t),V7r=r(ZJ," class method or the "),AH=n(ZJ,"A",{href:!0});var N3t=s(AH);X7r=r(N3t,"from_config()"),N3t.forEach(t),z7r=r(ZJ,` class
method.`),ZJ.forEach(t),Q7r=i(Ai),IL=n(Ai,"P",{});var BIe=s(IL);W7r=r(BIe,"This class cannot be instantiated directly using "),iMe=n(BIe,"CODE",{});var j3t=s(iMe);H7r=r(j3t,"__init__()"),j3t.forEach(t),U7r=r(BIe," (throws an error)."),BIe.forEach(t),J7r=i(Ai),Rt=n(Ai,"DIV",{class:!0});var yi=s(Rt);m(qL.$$.fragment,yi),Y7r=i(yi),dMe=n(yi,"P",{});var D3t=s(dMe);K7r=r(D3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),D3t.forEach(t),Z7r=i(yi),Ff=n(yi,"P",{});var eY=s(Ff);e9r=r(eY,`Note:
Loading a model from its configuration file does `),cMe=n(eY,"STRONG",{});var G3t=s(cMe);o9r=r(G3t,"not"),G3t.forEach(t),r9r=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yH=n(eY,"A",{href:!0});var O3t=s(yH);t9r=r(O3t,"from_pretrained()"),O3t.forEach(t),a9r=r(eY," to load the model weights."),eY.forEach(t),n9r=i(yi),fMe=n(yi,"P",{});var V3t=s(fMe);s9r=r(V3t,"Examples:"),V3t.forEach(t),l9r=i(yi),m(NL.$$.fragment,yi),yi.forEach(t),i9r=i(Ai),Bo=n(Ai,"DIV",{class:!0});var Pa=s(Bo);m(jL.$$.fragment,Pa),d9r=i(Pa),mMe=n(Pa,"P",{});var X3t=s(mMe);c9r=r(X3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),X3t.forEach(t),f9r=i(Pa),In=n(Pa,"P",{});var Mw=s(In);m9r=r(Mw,"The model class to instantiate is selected based on the "),gMe=n(Mw,"CODE",{});var z3t=s(gMe);g9r=r(z3t,"model_type"),z3t.forEach(t),h9r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),hMe=n(Mw,"CODE",{});var Q3t=s(hMe);p9r=r(Q3t,"pretrained_model_name_or_path"),Q3t.forEach(t),_9r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pMe=n(Mw,"CODE",{});var W3t=s(pMe);u9r=r(W3t,"pretrained_model_name_or_path"),W3t.forEach(t),b9r=r(Mw,":"),Mw.forEach(t),v9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);W3=n(Le,"LI",{});var rRe=s(W3);_Me=n(rRe,"STRONG",{});var H3t=s(_Me);F9r=r(H3t,"albert"),H3t.forEach(t),T9r=r(rRe," \u2014 "),LH=n(rRe,"A",{href:!0});var U3t=s(LH);M9r=r(U3t,"FlaxAlbertForQuestionAnswering"),U3t.forEach(t),E9r=r(rRe," (ALBERT model)"),rRe.forEach(t),C9r=i(Le),H3=n(Le,"LI",{});var tRe=s(H3);uMe=n(tRe,"STRONG",{});var J3t=s(uMe);w9r=r(J3t,"bart"),J3t.forEach(t),A9r=r(tRe," \u2014 "),xH=n(tRe,"A",{href:!0});var Y3t=s(xH);y9r=r(Y3t,"FlaxBartForQuestionAnswering"),Y3t.forEach(t),L9r=r(tRe," (BART model)"),tRe.forEach(t),x9r=i(Le),U3=n(Le,"LI",{});var aRe=s(U3);bMe=n(aRe,"STRONG",{});var K3t=s(bMe);k9r=r(K3t,"bert"),K3t.forEach(t),S9r=r(aRe," \u2014 "),kH=n(aRe,"A",{href:!0});var Z3t=s(kH);R9r=r(Z3t,"FlaxBertForQuestionAnswering"),Z3t.forEach(t),B9r=r(aRe," (BERT model)"),aRe.forEach(t),P9r=i(Le),J3=n(Le,"LI",{});var nRe=s(J3);vMe=n(nRe,"STRONG",{});var eCt=s(vMe);$9r=r(eCt,"big_bird"),eCt.forEach(t),I9r=r(nRe," \u2014 "),SH=n(nRe,"A",{href:!0});var oCt=s(SH);q9r=r(oCt,"FlaxBigBirdForQuestionAnswering"),oCt.forEach(t),N9r=r(nRe," (BigBird model)"),nRe.forEach(t),j9r=i(Le),Y3=n(Le,"LI",{});var sRe=s(Y3);FMe=n(sRe,"STRONG",{});var rCt=s(FMe);D9r=r(rCt,"distilbert"),rCt.forEach(t),G9r=r(sRe," \u2014 "),RH=n(sRe,"A",{href:!0});var tCt=s(RH);O9r=r(tCt,"FlaxDistilBertForQuestionAnswering"),tCt.forEach(t),V9r=r(sRe," (DistilBERT model)"),sRe.forEach(t),X9r=i(Le),K3=n(Le,"LI",{});var lRe=s(K3);TMe=n(lRe,"STRONG",{});var aCt=s(TMe);z9r=r(aCt,"electra"),aCt.forEach(t),Q9r=r(lRe," \u2014 "),BH=n(lRe,"A",{href:!0});var nCt=s(BH);W9r=r(nCt,"FlaxElectraForQuestionAnswering"),nCt.forEach(t),H9r=r(lRe," (ELECTRA model)"),lRe.forEach(t),U9r=i(Le),Z3=n(Le,"LI",{});var iRe=s(Z3);MMe=n(iRe,"STRONG",{});var sCt=s(MMe);J9r=r(sCt,"mbart"),sCt.forEach(t),Y9r=r(iRe," \u2014 "),PH=n(iRe,"A",{href:!0});var lCt=s(PH);K9r=r(lCt,"FlaxMBartForQuestionAnswering"),lCt.forEach(t),Z9r=r(iRe," (mBART model)"),iRe.forEach(t),exr=i(Le),eC=n(Le,"LI",{});var dRe=s(eC);EMe=n(dRe,"STRONG",{});var iCt=s(EMe);oxr=r(iCt,"roberta"),iCt.forEach(t),rxr=r(dRe," \u2014 "),$H=n(dRe,"A",{href:!0});var dCt=s($H);txr=r(dCt,"FlaxRobertaForQuestionAnswering"),dCt.forEach(t),axr=r(dRe," (RoBERTa model)"),dRe.forEach(t),nxr=i(Le),oC=n(Le,"LI",{});var cRe=s(oC);CMe=n(cRe,"STRONG",{});var cCt=s(CMe);sxr=r(cCt,"roformer"),cCt.forEach(t),lxr=r(cRe," \u2014 "),IH=n(cRe,"A",{href:!0});var fCt=s(IH);ixr=r(fCt,"FlaxRoFormerForQuestionAnswering"),fCt.forEach(t),dxr=r(cRe," (RoFormer model)"),cRe.forEach(t),cxr=i(Le),rC=n(Le,"LI",{});var fRe=s(rC);wMe=n(fRe,"STRONG",{});var mCt=s(wMe);fxr=r(mCt,"xlm-roberta"),mCt.forEach(t),mxr=r(fRe," \u2014 "),qH=n(fRe,"A",{href:!0});var gCt=s(qH);gxr=r(gCt,"FlaxXLMRobertaForQuestionAnswering"),gCt.forEach(t),hxr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),Le.forEach(t),pxr=i(Pa),AMe=n(Pa,"P",{});var hCt=s(AMe);_xr=r(hCt,"Examples:"),hCt.forEach(t),uxr=i(Pa),m(DL.$$.fragment,Pa),Pa.forEach(t),Ai.forEach(t),EPe=i(c),Tf=n(c,"H2",{class:!0});var PIe=s(Tf);tC=n(PIe,"A",{id:!0,class:!0,href:!0});var pCt=s(tC);yMe=n(pCt,"SPAN",{});var _Ct=s(yMe);m(GL.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),bxr=i(PIe),LMe=n(PIe,"SPAN",{});var uCt=s(LMe);vxr=r(uCt,"FlaxAutoModelForTokenClassification"),uCt.forEach(t),PIe.forEach(t),CPe=i(c),jr=n(c,"DIV",{class:!0});var Li=s(jr);m(OL.$$.fragment,Li),Fxr=i(Li),Mf=n(Li,"P",{});var oY=s(Mf);Txr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NH=n(oY,"A",{href:!0});var bCt=s(NH);Mxr=r(bCt,"from_pretrained()"),bCt.forEach(t),Exr=r(oY," class method or the "),jH=n(oY,"A",{href:!0});var vCt=s(jH);Cxr=r(vCt,"from_config()"),vCt.forEach(t),wxr=r(oY,` class
method.`),oY.forEach(t),Axr=i(Li),VL=n(Li,"P",{});var $Ie=s(VL);yxr=r($Ie,"This class cannot be instantiated directly using "),xMe=n($Ie,"CODE",{});var FCt=s(xMe);Lxr=r(FCt,"__init__()"),FCt.forEach(t),xxr=r($Ie," (throws an error)."),$Ie.forEach(t),kxr=i(Li),Bt=n(Li,"DIV",{class:!0});var xi=s(Bt);m(XL.$$.fragment,xi),Sxr=i(xi),kMe=n(xi,"P",{});var TCt=s(kMe);Rxr=r(TCt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),TCt.forEach(t),Bxr=i(xi),Ef=n(xi,"P",{});var rY=s(Ef);Pxr=r(rY,`Note:
Loading a model from its configuration file does `),SMe=n(rY,"STRONG",{});var MCt=s(SMe);$xr=r(MCt,"not"),MCt.forEach(t),Ixr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(rY,"A",{href:!0});var ECt=s(DH);qxr=r(ECt,"from_pretrained()"),ECt.forEach(t),Nxr=r(rY," to load the model weights."),rY.forEach(t),jxr=i(xi),RMe=n(xi,"P",{});var CCt=s(RMe);Dxr=r(CCt,"Examples:"),CCt.forEach(t),Gxr=i(xi),m(zL.$$.fragment,xi),xi.forEach(t),Oxr=i(Li),Po=n(Li,"DIV",{class:!0});var $a=s(Po);m(QL.$$.fragment,$a),Vxr=i($a),BMe=n($a,"P",{});var wCt=s(BMe);Xxr=r(wCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),wCt.forEach(t),zxr=i($a),qn=n($a,"P",{});var Ew=s(qn);Qxr=r(Ew,"The model class to instantiate is selected based on the "),PMe=n(Ew,"CODE",{});var ACt=s(PMe);Wxr=r(ACt,"model_type"),ACt.forEach(t),Hxr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),$Me=n(Ew,"CODE",{});var yCt=s($Me);Uxr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),Jxr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IMe=n(Ew,"CODE",{});var LCt=s(IMe);Yxr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),Kxr=r(Ew,":"),Ew.forEach(t),Zxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);aC=n(Oo,"LI",{});var mRe=s(aC);qMe=n(mRe,"STRONG",{});var xCt=s(qMe);ekr=r(xCt,"albert"),xCt.forEach(t),okr=r(mRe," \u2014 "),GH=n(mRe,"A",{href:!0});var kCt=s(GH);rkr=r(kCt,"FlaxAlbertForTokenClassification"),kCt.forEach(t),tkr=r(mRe," (ALBERT model)"),mRe.forEach(t),akr=i(Oo),nC=n(Oo,"LI",{});var gRe=s(nC);NMe=n(gRe,"STRONG",{});var SCt=s(NMe);nkr=r(SCt,"bert"),SCt.forEach(t),skr=r(gRe," \u2014 "),OH=n(gRe,"A",{href:!0});var RCt=s(OH);lkr=r(RCt,"FlaxBertForTokenClassification"),RCt.forEach(t),ikr=r(gRe," (BERT model)"),gRe.forEach(t),dkr=i(Oo),sC=n(Oo,"LI",{});var hRe=s(sC);jMe=n(hRe,"STRONG",{});var BCt=s(jMe);ckr=r(BCt,"big_bird"),BCt.forEach(t),fkr=r(hRe," \u2014 "),VH=n(hRe,"A",{href:!0});var PCt=s(VH);mkr=r(PCt,"FlaxBigBirdForTokenClassification"),PCt.forEach(t),gkr=r(hRe," (BigBird model)"),hRe.forEach(t),hkr=i(Oo),lC=n(Oo,"LI",{});var pRe=s(lC);DMe=n(pRe,"STRONG",{});var $Ct=s(DMe);pkr=r($Ct,"distilbert"),$Ct.forEach(t),_kr=r(pRe," \u2014 "),XH=n(pRe,"A",{href:!0});var ICt=s(XH);ukr=r(ICt,"FlaxDistilBertForTokenClassification"),ICt.forEach(t),bkr=r(pRe," (DistilBERT model)"),pRe.forEach(t),vkr=i(Oo),iC=n(Oo,"LI",{});var _Re=s(iC);GMe=n(_Re,"STRONG",{});var qCt=s(GMe);Fkr=r(qCt,"electra"),qCt.forEach(t),Tkr=r(_Re," \u2014 "),zH=n(_Re,"A",{href:!0});var NCt=s(zH);Mkr=r(NCt,"FlaxElectraForTokenClassification"),NCt.forEach(t),Ekr=r(_Re," (ELECTRA model)"),_Re.forEach(t),Ckr=i(Oo),dC=n(Oo,"LI",{});var uRe=s(dC);OMe=n(uRe,"STRONG",{});var jCt=s(OMe);wkr=r(jCt,"roberta"),jCt.forEach(t),Akr=r(uRe," \u2014 "),QH=n(uRe,"A",{href:!0});var DCt=s(QH);ykr=r(DCt,"FlaxRobertaForTokenClassification"),DCt.forEach(t),Lkr=r(uRe," (RoBERTa model)"),uRe.forEach(t),xkr=i(Oo),cC=n(Oo,"LI",{});var bRe=s(cC);VMe=n(bRe,"STRONG",{});var GCt=s(VMe);kkr=r(GCt,"roformer"),GCt.forEach(t),Skr=r(bRe," \u2014 "),WH=n(bRe,"A",{href:!0});var OCt=s(WH);Rkr=r(OCt,"FlaxRoFormerForTokenClassification"),OCt.forEach(t),Bkr=r(bRe," (RoFormer model)"),bRe.forEach(t),Pkr=i(Oo),fC=n(Oo,"LI",{});var vRe=s(fC);XMe=n(vRe,"STRONG",{});var VCt=s(XMe);$kr=r(VCt,"xlm-roberta"),VCt.forEach(t),Ikr=r(vRe," \u2014 "),HH=n(vRe,"A",{href:!0});var XCt=s(HH);qkr=r(XCt,"FlaxXLMRobertaForTokenClassification"),XCt.forEach(t),Nkr=r(vRe," (XLM-RoBERTa model)"),vRe.forEach(t),Oo.forEach(t),jkr=i($a),zMe=n($a,"P",{});var zCt=s(zMe);Dkr=r(zCt,"Examples:"),zCt.forEach(t),Gkr=i($a),m(WL.$$.fragment,$a),$a.forEach(t),Li.forEach(t),wPe=i(c),Cf=n(c,"H2",{class:!0});var IIe=s(Cf);mC=n(IIe,"A",{id:!0,class:!0,href:!0});var QCt=s(mC);QMe=n(QCt,"SPAN",{});var WCt=s(QMe);m(HL.$$.fragment,WCt),WCt.forEach(t),QCt.forEach(t),Okr=i(IIe),WMe=n(IIe,"SPAN",{});var HCt=s(WMe);Vkr=r(HCt,"FlaxAutoModelForMultipleChoice"),HCt.forEach(t),IIe.forEach(t),APe=i(c),Dr=n(c,"DIV",{class:!0});var ki=s(Dr);m(UL.$$.fragment,ki),Xkr=i(ki),wf=n(ki,"P",{});var tY=s(wf);zkr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),UH=n(tY,"A",{href:!0});var UCt=s(UH);Qkr=r(UCt,"from_pretrained()"),UCt.forEach(t),Wkr=r(tY," class method or the "),JH=n(tY,"A",{href:!0});var JCt=s(JH);Hkr=r(JCt,"from_config()"),JCt.forEach(t),Ukr=r(tY,` class
method.`),tY.forEach(t),Jkr=i(ki),JL=n(ki,"P",{});var qIe=s(JL);Ykr=r(qIe,"This class cannot be instantiated directly using "),HMe=n(qIe,"CODE",{});var YCt=s(HMe);Kkr=r(YCt,"__init__()"),YCt.forEach(t),Zkr=r(qIe," (throws an error)."),qIe.forEach(t),eSr=i(ki),Pt=n(ki,"DIV",{class:!0});var Si=s(Pt);m(YL.$$.fragment,Si),oSr=i(Si),UMe=n(Si,"P",{});var KCt=s(UMe);rSr=r(KCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KCt.forEach(t),tSr=i(Si),Af=n(Si,"P",{});var aY=s(Af);aSr=r(aY,`Note:
Loading a model from its configuration file does `),JMe=n(aY,"STRONG",{});var ZCt=s(JMe);nSr=r(ZCt,"not"),ZCt.forEach(t),sSr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(aY,"A",{href:!0});var ewt=s(YH);lSr=r(ewt,"from_pretrained()"),ewt.forEach(t),iSr=r(aY," to load the model weights."),aY.forEach(t),dSr=i(Si),YMe=n(Si,"P",{});var owt=s(YMe);cSr=r(owt,"Examples:"),owt.forEach(t),fSr=i(Si),m(KL.$$.fragment,Si),Si.forEach(t),mSr=i(ki),$o=n(ki,"DIV",{class:!0});var Ia=s($o);m(ZL.$$.fragment,Ia),gSr=i(Ia),KMe=n(Ia,"P",{});var rwt=s(KMe);hSr=r(rwt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),rwt.forEach(t),pSr=i(Ia),Nn=n(Ia,"P",{});var Cw=s(Nn);_Sr=r(Cw,"The model class to instantiate is selected based on the "),ZMe=n(Cw,"CODE",{});var twt=s(ZMe);uSr=r(twt,"model_type"),twt.forEach(t),bSr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),e4e=n(Cw,"CODE",{});var awt=s(e4e);vSr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),FSr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o4e=n(Cw,"CODE",{});var nwt=s(o4e);TSr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),MSr=r(Cw,":"),Cw.forEach(t),ESr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);gC=n(Vo,"LI",{});var FRe=s(gC);r4e=n(FRe,"STRONG",{});var swt=s(r4e);CSr=r(swt,"albert"),swt.forEach(t),wSr=r(FRe," \u2014 "),KH=n(FRe,"A",{href:!0});var lwt=s(KH);ASr=r(lwt,"FlaxAlbertForMultipleChoice"),lwt.forEach(t),ySr=r(FRe," (ALBERT model)"),FRe.forEach(t),LSr=i(Vo),hC=n(Vo,"LI",{});var TRe=s(hC);t4e=n(TRe,"STRONG",{});var iwt=s(t4e);xSr=r(iwt,"bert"),iwt.forEach(t),kSr=r(TRe," \u2014 "),ZH=n(TRe,"A",{href:!0});var dwt=s(ZH);SSr=r(dwt,"FlaxBertForMultipleChoice"),dwt.forEach(t),RSr=r(TRe," (BERT model)"),TRe.forEach(t),BSr=i(Vo),pC=n(Vo,"LI",{});var MRe=s(pC);a4e=n(MRe,"STRONG",{});var cwt=s(a4e);PSr=r(cwt,"big_bird"),cwt.forEach(t),$Sr=r(MRe," \u2014 "),eU=n(MRe,"A",{href:!0});var fwt=s(eU);ISr=r(fwt,"FlaxBigBirdForMultipleChoice"),fwt.forEach(t),qSr=r(MRe," (BigBird model)"),MRe.forEach(t),NSr=i(Vo),_C=n(Vo,"LI",{});var ERe=s(_C);n4e=n(ERe,"STRONG",{});var mwt=s(n4e);jSr=r(mwt,"distilbert"),mwt.forEach(t),DSr=r(ERe," \u2014 "),oU=n(ERe,"A",{href:!0});var gwt=s(oU);GSr=r(gwt,"FlaxDistilBertForMultipleChoice"),gwt.forEach(t),OSr=r(ERe," (DistilBERT model)"),ERe.forEach(t),VSr=i(Vo),uC=n(Vo,"LI",{});var CRe=s(uC);s4e=n(CRe,"STRONG",{});var hwt=s(s4e);XSr=r(hwt,"electra"),hwt.forEach(t),zSr=r(CRe," \u2014 "),rU=n(CRe,"A",{href:!0});var pwt=s(rU);QSr=r(pwt,"FlaxElectraForMultipleChoice"),pwt.forEach(t),WSr=r(CRe," (ELECTRA model)"),CRe.forEach(t),HSr=i(Vo),bC=n(Vo,"LI",{});var wRe=s(bC);l4e=n(wRe,"STRONG",{});var _wt=s(l4e);USr=r(_wt,"roberta"),_wt.forEach(t),JSr=r(wRe," \u2014 "),tU=n(wRe,"A",{href:!0});var uwt=s(tU);YSr=r(uwt,"FlaxRobertaForMultipleChoice"),uwt.forEach(t),KSr=r(wRe," (RoBERTa model)"),wRe.forEach(t),ZSr=i(Vo),vC=n(Vo,"LI",{});var ARe=s(vC);i4e=n(ARe,"STRONG",{});var bwt=s(i4e);eRr=r(bwt,"roformer"),bwt.forEach(t),oRr=r(ARe," \u2014 "),aU=n(ARe,"A",{href:!0});var vwt=s(aU);rRr=r(vwt,"FlaxRoFormerForMultipleChoice"),vwt.forEach(t),tRr=r(ARe," (RoFormer model)"),ARe.forEach(t),aRr=i(Vo),FC=n(Vo,"LI",{});var yRe=s(FC);d4e=n(yRe,"STRONG",{});var Fwt=s(d4e);nRr=r(Fwt,"xlm-roberta"),Fwt.forEach(t),sRr=r(yRe," \u2014 "),nU=n(yRe,"A",{href:!0});var Twt=s(nU);lRr=r(Twt,"FlaxXLMRobertaForMultipleChoice"),Twt.forEach(t),iRr=r(yRe," (XLM-RoBERTa model)"),yRe.forEach(t),Vo.forEach(t),dRr=i(Ia),c4e=n(Ia,"P",{});var Mwt=s(c4e);cRr=r(Mwt,"Examples:"),Mwt.forEach(t),fRr=i(Ia),m(e7.$$.fragment,Ia),Ia.forEach(t),ki.forEach(t),yPe=i(c),yf=n(c,"H2",{class:!0});var NIe=s(yf);TC=n(NIe,"A",{id:!0,class:!0,href:!0});var Ewt=s(TC);f4e=n(Ewt,"SPAN",{});var Cwt=s(f4e);m(o7.$$.fragment,Cwt),Cwt.forEach(t),Ewt.forEach(t),mRr=i(NIe),m4e=n(NIe,"SPAN",{});var wwt=s(m4e);gRr=r(wwt,"FlaxAutoModelForNextSentencePrediction"),wwt.forEach(t),NIe.forEach(t),LPe=i(c),Gr=n(c,"DIV",{class:!0});var Ri=s(Gr);m(r7.$$.fragment,Ri),hRr=i(Ri),Lf=n(Ri,"P",{});var nY=s(Lf);pRr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),sU=n(nY,"A",{href:!0});var Awt=s(sU);_Rr=r(Awt,"from_pretrained()"),Awt.forEach(t),uRr=r(nY," class method or the "),lU=n(nY,"A",{href:!0});var ywt=s(lU);bRr=r(ywt,"from_config()"),ywt.forEach(t),vRr=r(nY,` class
method.`),nY.forEach(t),FRr=i(Ri),t7=n(Ri,"P",{});var jIe=s(t7);TRr=r(jIe,"This class cannot be instantiated directly using "),g4e=n(jIe,"CODE",{});var Lwt=s(g4e);MRr=r(Lwt,"__init__()"),Lwt.forEach(t),ERr=r(jIe," (throws an error)."),jIe.forEach(t),CRr=i(Ri),$t=n(Ri,"DIV",{class:!0});var Bi=s($t);m(a7.$$.fragment,Bi),wRr=i(Bi),h4e=n(Bi,"P",{});var xwt=s(h4e);ARr=r(xwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xwt.forEach(t),yRr=i(Bi),xf=n(Bi,"P",{});var sY=s(xf);LRr=r(sY,`Note:
Loading a model from its configuration file does `),p4e=n(sY,"STRONG",{});var kwt=s(p4e);xRr=r(kwt,"not"),kwt.forEach(t),kRr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),iU=n(sY,"A",{href:!0});var Swt=s(iU);SRr=r(Swt,"from_pretrained()"),Swt.forEach(t),RRr=r(sY," to load the model weights."),sY.forEach(t),BRr=i(Bi),_4e=n(Bi,"P",{});var Rwt=s(_4e);PRr=r(Rwt,"Examples:"),Rwt.forEach(t),$Rr=i(Bi),m(n7.$$.fragment,Bi),Bi.forEach(t),IRr=i(Ri),Io=n(Ri,"DIV",{class:!0});var qa=s(Io);m(s7.$$.fragment,qa),qRr=i(qa),u4e=n(qa,"P",{});var Bwt=s(u4e);NRr=r(Bwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Bwt.forEach(t),jRr=i(qa),jn=n(qa,"P",{});var ww=s(jn);DRr=r(ww,"The model class to instantiate is selected based on the "),b4e=n(ww,"CODE",{});var Pwt=s(b4e);GRr=r(Pwt,"model_type"),Pwt.forEach(t),ORr=r(ww,` property of the config object (either
passed as an argument or loaded from `),v4e=n(ww,"CODE",{});var $wt=s(v4e);VRr=r($wt,"pretrained_model_name_or_path"),$wt.forEach(t),XRr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F4e=n(ww,"CODE",{});var Iwt=s(F4e);zRr=r(Iwt,"pretrained_model_name_or_path"),Iwt.forEach(t),QRr=r(ww,":"),ww.forEach(t),WRr=i(qa),T4e=n(qa,"UL",{});var qwt=s(T4e);MC=n(qwt,"LI",{});var LRe=s(MC);M4e=n(LRe,"STRONG",{});var Nwt=s(M4e);HRr=r(Nwt,"bert"),Nwt.forEach(t),URr=r(LRe," \u2014 "),dU=n(LRe,"A",{href:!0});var jwt=s(dU);JRr=r(jwt,"FlaxBertForNextSentencePrediction"),jwt.forEach(t),YRr=r(LRe," (BERT model)"),LRe.forEach(t),qwt.forEach(t),KRr=i(qa),E4e=n(qa,"P",{});var Dwt=s(E4e);ZRr=r(Dwt,"Examples:"),Dwt.forEach(t),eBr=i(qa),m(l7.$$.fragment,qa),qa.forEach(t),Ri.forEach(t),xPe=i(c),kf=n(c,"H2",{class:!0});var DIe=s(kf);EC=n(DIe,"A",{id:!0,class:!0,href:!0});var Gwt=s(EC);C4e=n(Gwt,"SPAN",{});var Owt=s(C4e);m(i7.$$.fragment,Owt),Owt.forEach(t),Gwt.forEach(t),oBr=i(DIe),w4e=n(DIe,"SPAN",{});var Vwt=s(w4e);rBr=r(Vwt,"FlaxAutoModelForImageClassification"),Vwt.forEach(t),DIe.forEach(t),kPe=i(c),Or=n(c,"DIV",{class:!0});var Pi=s(Or);m(d7.$$.fragment,Pi),tBr=i(Pi),Sf=n(Pi,"P",{});var lY=s(Sf);aBr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),cU=n(lY,"A",{href:!0});var Xwt=s(cU);nBr=r(Xwt,"from_pretrained()"),Xwt.forEach(t),sBr=r(lY," class method or the "),fU=n(lY,"A",{href:!0});var zwt=s(fU);lBr=r(zwt,"from_config()"),zwt.forEach(t),iBr=r(lY,` class
method.`),lY.forEach(t),dBr=i(Pi),c7=n(Pi,"P",{});var GIe=s(c7);cBr=r(GIe,"This class cannot be instantiated directly using "),A4e=n(GIe,"CODE",{});var Qwt=s(A4e);fBr=r(Qwt,"__init__()"),Qwt.forEach(t),mBr=r(GIe," (throws an error)."),GIe.forEach(t),gBr=i(Pi),It=n(Pi,"DIV",{class:!0});var $i=s(It);m(f7.$$.fragment,$i),hBr=i($i),y4e=n($i,"P",{});var Wwt=s(y4e);pBr=r(Wwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wwt.forEach(t),_Br=i($i),Rf=n($i,"P",{});var iY=s(Rf);uBr=r(iY,`Note:
Loading a model from its configuration file does `),L4e=n(iY,"STRONG",{});var Hwt=s(L4e);bBr=r(Hwt,"not"),Hwt.forEach(t),vBr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(iY,"A",{href:!0});var Uwt=s(mU);FBr=r(Uwt,"from_pretrained()"),Uwt.forEach(t),TBr=r(iY," to load the model weights."),iY.forEach(t),MBr=i($i),x4e=n($i,"P",{});var Jwt=s(x4e);EBr=r(Jwt,"Examples:"),Jwt.forEach(t),CBr=i($i),m(m7.$$.fragment,$i),$i.forEach(t),wBr=i(Pi),qo=n(Pi,"DIV",{class:!0});var Na=s(qo);m(g7.$$.fragment,Na),ABr=i(Na),k4e=n(Na,"P",{});var Ywt=s(k4e);yBr=r(Ywt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ywt.forEach(t),LBr=i(Na),Dn=n(Na,"P",{});var Aw=s(Dn);xBr=r(Aw,"The model class to instantiate is selected based on the "),S4e=n(Aw,"CODE",{});var Kwt=s(S4e);kBr=r(Kwt,"model_type"),Kwt.forEach(t),SBr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),R4e=n(Aw,"CODE",{});var Zwt=s(R4e);RBr=r(Zwt,"pretrained_model_name_or_path"),Zwt.forEach(t),BBr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(Aw,"CODE",{});var e6t=s(B4e);PBr=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),$Br=r(Aw,":"),Aw.forEach(t),IBr=i(Na),h7=n(Na,"UL",{});var OIe=s(h7);CC=n(OIe,"LI",{});var xRe=s(CC);P4e=n(xRe,"STRONG",{});var o6t=s(P4e);qBr=r(o6t,"beit"),o6t.forEach(t),NBr=r(xRe," \u2014 "),gU=n(xRe,"A",{href:!0});var r6t=s(gU);jBr=r(r6t,"FlaxBeitForImageClassification"),r6t.forEach(t),DBr=r(xRe," (BEiT model)"),xRe.forEach(t),GBr=i(OIe),wC=n(OIe,"LI",{});var kRe=s(wC);$4e=n(kRe,"STRONG",{});var t6t=s($4e);OBr=r(t6t,"vit"),t6t.forEach(t),VBr=r(kRe," \u2014 "),hU=n(kRe,"A",{href:!0});var a6t=s(hU);XBr=r(a6t,"FlaxViTForImageClassification"),a6t.forEach(t),zBr=r(kRe," (ViT model)"),kRe.forEach(t),OIe.forEach(t),QBr=i(Na),I4e=n(Na,"P",{});var n6t=s(I4e);WBr=r(n6t,"Examples:"),n6t.forEach(t),HBr=i(Na),m(p7.$$.fragment,Na),Na.forEach(t),Pi.forEach(t),SPe=i(c),Bf=n(c,"H2",{class:!0});var VIe=s(Bf);AC=n(VIe,"A",{id:!0,class:!0,href:!0});var s6t=s(AC);q4e=n(s6t,"SPAN",{});var l6t=s(q4e);m(_7.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),UBr=i(VIe),N4e=n(VIe,"SPAN",{});var i6t=s(N4e);JBr=r(i6t,"FlaxAutoModelForVision2Seq"),i6t.forEach(t),VIe.forEach(t),RPe=i(c),Vr=n(c,"DIV",{class:!0});var Ii=s(Vr);m(u7.$$.fragment,Ii),YBr=i(Ii),Pf=n(Ii,"P",{});var dY=s(Pf);KBr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),pU=n(dY,"A",{href:!0});var d6t=s(pU);ZBr=r(d6t,"from_pretrained()"),d6t.forEach(t),ePr=r(dY," class method or the "),_U=n(dY,"A",{href:!0});var c6t=s(_U);oPr=r(c6t,"from_config()"),c6t.forEach(t),rPr=r(dY,` class
method.`),dY.forEach(t),tPr=i(Ii),b7=n(Ii,"P",{});var XIe=s(b7);aPr=r(XIe,"This class cannot be instantiated directly using "),j4e=n(XIe,"CODE",{});var f6t=s(j4e);nPr=r(f6t,"__init__()"),f6t.forEach(t),sPr=r(XIe," (throws an error)."),XIe.forEach(t),lPr=i(Ii),qt=n(Ii,"DIV",{class:!0});var qi=s(qt);m(v7.$$.fragment,qi),iPr=i(qi),D4e=n(qi,"P",{});var m6t=s(D4e);dPr=r(m6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m6t.forEach(t),cPr=i(qi),$f=n(qi,"P",{});var cY=s($f);fPr=r(cY,`Note:
Loading a model from its configuration file does `),G4e=n(cY,"STRONG",{});var g6t=s(G4e);mPr=r(g6t,"not"),g6t.forEach(t),gPr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(cY,"A",{href:!0});var h6t=s(uU);hPr=r(h6t,"from_pretrained()"),h6t.forEach(t),pPr=r(cY," to load the model weights."),cY.forEach(t),_Pr=i(qi),O4e=n(qi,"P",{});var p6t=s(O4e);uPr=r(p6t,"Examples:"),p6t.forEach(t),bPr=i(qi),m(F7.$$.fragment,qi),qi.forEach(t),vPr=i(Ii),No=n(Ii,"DIV",{class:!0});var ja=s(No);m(T7.$$.fragment,ja),FPr=i(ja),V4e=n(ja,"P",{});var _6t=s(V4e);TPr=r(_6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_6t.forEach(t),MPr=i(ja),Gn=n(ja,"P",{});var yw=s(Gn);EPr=r(yw,"The model class to instantiate is selected based on the "),X4e=n(yw,"CODE",{});var u6t=s(X4e);CPr=r(u6t,"model_type"),u6t.forEach(t),wPr=r(yw,` property of the config object (either
passed as an argument or loaded from `),z4e=n(yw,"CODE",{});var b6t=s(z4e);APr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),yPr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q4e=n(yw,"CODE",{});var v6t=s(Q4e);LPr=r(v6t,"pretrained_model_name_or_path"),v6t.forEach(t),xPr=r(yw,":"),yw.forEach(t),kPr=i(ja),W4e=n(ja,"UL",{});var F6t=s(W4e);yC=n(F6t,"LI",{});var SRe=s(yC);H4e=n(SRe,"STRONG",{});var T6t=s(H4e);SPr=r(T6t,"vision-encoder-decoder"),T6t.forEach(t),RPr=r(SRe," \u2014 "),bU=n(SRe,"A",{href:!0});var M6t=s(bU);BPr=r(M6t,"FlaxVisionEncoderDecoderModel"),M6t.forEach(t),PPr=r(SRe," (Vision Encoder decoder model)"),SRe.forEach(t),F6t.forEach(t),$Pr=i(ja),U4e=n(ja,"P",{});var E6t=s(U4e);IPr=r(E6t,"Examples:"),E6t.forEach(t),qPr=i(ja),m(M7.$$.fragment,ja),ja.forEach(t),Ii.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(B6t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(zi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(Qi,"class","relative group"),d(y9,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(L9,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertConfig"),d(x9,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig"),d(k9,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitConfig"),d(S9,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertConfig"),d(R9,"href","/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(B9,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdConfig"),d(P9,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d($9,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(I9,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(q9,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertConfig"),d(N9,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineConfig"),d(j9,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPConfig"),d(D9,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertConfig"),d(G9,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextConfig"),d(O9,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLConfig"),d(V9,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(X9,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(z9,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(Q9,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaConfig"),d(W9,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(H9,"href","/docs/transformers/pr_1/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(U9,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTConfig"),d(J9,"href","/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrConfig"),d(Y9,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertConfig"),d(K9,"href","/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRConfig"),d(Z9,"href","/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTConfig"),d(ex,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraConfig"),d(ox,"href","/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(rx,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertConfig"),d(tx,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetConfig"),d(ax,"href","/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTConfig"),d(nx,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelConfig"),d(sx,"href","/docs/transformers/pr_1/en/model_doc/glpn#transformers.GLPNConfig"),d(lx,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Config"),d(ix,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(dx,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJConfig"),d(cx,"href","/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertConfig"),d(fx,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertConfig"),d(mx,"href","/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(gx,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(hx,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(px,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDConfig"),d(_x,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerConfig"),d(ux,"href","/docs/transformers/pr_1/en/model_doc/luke#transformers.LukeConfig"),d(bx,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertConfig"),d(vx,"href","/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Config"),d(Fx,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianConfig"),d(Tx,"href","/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Mx,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartConfig"),d(Ex,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Cx,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(wx,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetConfig"),d(Ax,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Config"),d(yx,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Lx,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(xx,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusConfig"),d(kx,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Sx,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartConfig"),d(Rx,"href","/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Bx,"href","/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Px,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertConfig"),d($x,"href","/docs/transformers/pr_1/en/model_doc/rag#transformers.RagConfig"),d(Ix,"href","/docs/transformers/pr_1/en/model_doc/realm#transformers.RealmConfig"),d(qx,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerConfig"),d(Nx,"href","/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetConfig"),d(jx,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertConfig"),d(Dx,"href","/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetConfig"),d(Gx,"href","/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertConfig"),d(Ox,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaConfig"),d(Vx,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerConfig"),d(Xx,"href","/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerConfig"),d(zx,"href","/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWConfig"),d(Qx,"href","/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDConfig"),d(Wx,"href","/docs/transformers/pr_1/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Hx,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Ux,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Jx,"href","/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterConfig"),d(Yx,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Kx,"href","/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinConfig"),d(Zx,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Config"),d(ek,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasConfig"),d(ok,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartConfig"),d(rk,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(tk,"href","/docs/transformers/pr_1/en/model_doc/trocr#transformers.TrOCRConfig"),d(ak,"href","/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(nk,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(sk,"href","/docs/transformers/pr_1/en/model_doc/van#transformers.VanConfig"),d(lk,"href","/docs/transformers/pr_1/en/model_doc/vilt#transformers.ViltConfig"),d(ik,"href","/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(dk,"href","/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(ck,"href","/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(fk,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTConfig"),d(mk,"href","/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(gk,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(hk,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMConfig"),d(pk,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMConfig"),d(_k,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMConfig"),d(uk,"href","/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(bk,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(vk,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Fk,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetConfig"),d(Tk,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"id","transformers.AutoTokenizer"),d(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dg,"href","#transformers.AutoTokenizer"),d(Hi,"class","relative group"),d(Mk,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ek,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertTokenizer"),d(Ck,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(wk,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartTokenizer"),d(Ak,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartTokenizerFast"),d(yk,"href","/docs/transformers/pr_1/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Lk,"href","/docs/transformers/pr_1/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(xk,"href","/docs/transformers/pr_1/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(kk,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertTokenizer"),d(Sk,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertTokenizerFast"),d(Rk,"href","/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Bk,"href","/docs/transformers/pr_1/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Pk,"href","/docs/transformers/pr_1/en/model_doc/bertweet#transformers.BertweetTokenizer"),d($k,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Ik,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(qk,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Nk,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(jk,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Dk,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Gk,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ok,"href","/docs/transformers/pr_1/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Vk,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Xk,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(zk,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineTokenizer"),d(Qk,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPTokenizer"),d(Wk,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Hk,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Uk,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_1/en/model_doc/cpm#transformers.CpmTokenizer"),d(Yk,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Kk,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Zk,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(eS,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(oS,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(rS,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(tS,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(aS,"href","/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(nS,"href","/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(sS,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraTokenizer"),d(lS,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(iS,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(dS,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetTokenizer"),d(cS,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(fS,"href","/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(mS,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelTokenizer"),d(gS,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(hS,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(pS,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(_S,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uS,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(bS,"href","/docs/transformers/pr_1/en/model_doc/herbert#transformers.HerbertTokenizer"),d(vS,"href","/docs/transformers/pr_1/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(FS,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(TS,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaTokenizer"),d(MS,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ES,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(CS,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(wS,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(AS,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(yS,"href","/docs/transformers/pr_1/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(LS,"href","/docs/transformers/pr_1/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(xS,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDTokenizer"),d(kS,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDTokenizerFast"),d(SS,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerTokenizer"),d(RS,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(BS,"href","/docs/transformers/pr_1/en/model_doc/luke#transformers.LukeTokenizer"),d(PS,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertTokenizer"),d($S,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(IS,"href","/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(qS,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianTokenizer"),d(NS,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartTokenizer"),d(jS,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(DS,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(GS,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(OS,"href","/docs/transformers/pr_1/en/model_doc/mluke#transformers.MLukeTokenizer"),d(VS,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(XS,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(zS,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(QS,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(WS,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.T5Tokenizer"),d(HS,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.T5TokenizerFast"),d(US,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(JS,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(YS,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(KS,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(ZS,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(eR,"href","/docs/transformers/pr_1/en/model_doc/phobert#transformers.PhobertTokenizer"),d(oR,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartTokenizer"),d(rR,"href","/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(tR,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertTokenizer"),d(aR,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertTokenizerFast"),d(nR,"href","/docs/transformers/pr_1/en/model_doc/rag#transformers.RagTokenizer"),d(sR,"href","/docs/transformers/pr_1/en/model_doc/realm#transformers.RealmTokenizer"),d(lR,"href","/docs/transformers/pr_1/en/model_doc/realm#transformers.RealmTokenizerFast"),d(iR,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerTokenizer"),d(dR,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(cR,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertTokenizer"),d(fR,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(mR,"href","/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(gR,"href","/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(hR,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaTokenizer"),d(pR,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(_R,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(uR,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(bR,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(vR,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(FR,"href","/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterTokenizer"),d(TR,"href","/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(MR,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(ER,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(CR,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.T5Tokenizer"),d(wR,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.T5TokenizerFast"),d(AR,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasTokenizer"),d(yR,"href","/docs/transformers/pr_1/en/model_doc/tapex#transformers.TapexTokenizer"),d(LR,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(xR,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(kR,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(SR,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMTokenizer"),d(RR,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(BR,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMTokenizer"),d(PR,"href","/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d($R,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(IR,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(qR,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(NR,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Ui,"class","relative group"),d(jR,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(DR,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(GR,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(OR,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(VR,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(XR,"href","/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(zR,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(QR,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(WR,"href","/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(HR,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(UR,"href","/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(JR,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(YR,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(rB,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(tB,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(aB,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoProcessor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoProcessor"),d(Ji,"class","relative group"),d(nB,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(sB,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPProcessor"),d(lB,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(iB,"href","/docs/transformers/pr_1/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(dB,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(cB,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(fB,"href","/docs/transformers/pr_1/en/model_doc/trocr#transformers.TrOCRProcessor"),d(mB,"href","/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(gB,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoModel"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoModel"),d(Ki,"class","relative group"),d(hB,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pB,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_B,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uB,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertModel"),d(bB,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartModel"),d(vB,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitModel"),d(FB,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertModel"),d(TB,"href","/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(MB,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdModel"),d(EB,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(CB,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(wB,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(AB,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertModel"),d(yB,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineModel"),d(LB,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.CLIPModel"),d(xB,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertModel"),d(kB,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextModel"),d(SB,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLModel"),d(RB,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(BB,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(PB,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d($B,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaModel"),d(IB,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(qB,"href","/docs/transformers/pr_1/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(NB,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTModel"),d(jB,"href","/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrModel"),d(DB,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertModel"),d(GB,"href","/docs/transformers/pr_1/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(OB,"href","/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTModel"),d(VB,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraModel"),d(XB,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertModel"),d(zB,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetModel"),d(QB,"href","/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTModel"),d(WB,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelModel"),d(HB,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelBaseModel"),d(UB,"href","/docs/transformers/pr_1/en/model_doc/glpn#transformers.GLPNModel"),d(JB,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2Model"),d(YB,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(KB,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJModel"),d(ZB,"href","/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertModel"),d(eP,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertModel"),d(oP,"href","/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(rP,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(tP,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(aP,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDModel"),d(nP,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerModel"),d(sP,"href","/docs/transformers/pr_1/en/model_doc/luke#transformers.LukeModel"),d(lP,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertModel"),d(iP,"href","/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100Model"),d(dP,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianModel"),d(cP,"href","/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerModel"),d(fP,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartModel"),d(mP,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(gP,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertModel"),d(hP,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetModel"),d(pP,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5Model"),d(_P,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerModel"),d(uP,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(bP,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusModel"),d(vP,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverModel"),d(FP,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartModel"),d(TP,"href","/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerModel"),d(MP,"href","/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(EP,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertModel"),d(CP,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerModel"),d(wP,"href","/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetModel"),d(AP,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertModel"),d(yP,"href","/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetModel"),d(LP,"href","/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertModel"),d(xP,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaModel"),d(kP,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerModel"),d(SP,"href","/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerModel"),d(RP,"href","/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWModel"),d(BP,"href","/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDModel"),d(PP,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d($P,"href","/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterModel"),d(IP,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(qP,"href","/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinModel"),d(NP,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.T5Model"),d(jP,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasModel"),d(DP,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(GP,"href","/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechModel"),d(OP,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(VP,"href","/docs/transformers/pr_1/en/model_doc/van#transformers.VanModel"),d(XP,"href","/docs/transformers/pr_1/en/model_doc/vilt#transformers.ViltModel"),d(zP,"href","/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(QP,"href","/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertModel"),d(WP,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTModel"),d(HP,"href","/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(UP,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(JP,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMModel"),d(YP,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMModel"),d(KP,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMModel"),d(ZP,"href","/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(e$,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(o$,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(r$,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetModel"),d(t$,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q_,"id","transformers.AutoModelForPreTraining"),d(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q_,"href","#transformers.AutoModelForPreTraining"),d(od,"class","relative group"),d(a$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(n$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(s$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l$,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForPreTraining"),d(i$,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(d$,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForPreTraining"),d(c$,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(f$,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(m$,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(g$,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(h$,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(p$,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(_$,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(u$,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForPreTraining"),d(b$,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(v$,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForPreTraining"),d(F$,"href","/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(T$,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(M$,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(E$,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(C$,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(w$,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(A$,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(y$,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(L$,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(x$,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(k$,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(S$,"href","/docs/transformers/pr_1/en/model_doc/retribert#transformers.RetriBertModel"),d(R$,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(B$,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(P$,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($$,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(I$,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(q$,"href","/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(N$,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(j$,"href","/docs/transformers/pr_1/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(D$,"href","/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(G$,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(O$,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(V$,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(X$,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(z$,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cu,"id","transformers.AutoModelForCausalLM"),d(Cu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Cu,"href","#transformers.AutoModelForCausalLM"),d(ad,"class","relative group"),d(Q$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(W$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(H$,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U$,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForCausalLM"),d(J$,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertLMHeadModel"),d(Y$,"href","/docs/transformers/pr_1/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(K$,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Z$,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(eI,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(oI,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(rI,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(tI,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(aI,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(nI,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForCausalLM"),d(sI,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(lI,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(iI,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(dI,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianForCausalLM"),d(cI,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForCausalLM"),d(fI,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(mI,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(gI,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(hI,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(pI,"href","/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(_I,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(uI,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(bI,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(vI,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(FI,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(TI,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(MI,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(EI,"href","/docs/transformers/pr_1/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(CI,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(wI,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(AI,"href","/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(yI,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(LI,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(xI,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l1,"id","transformers.AutoModelForMaskedLM"),d(l1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l1,"href","#transformers.AutoModelForMaskedLM"),d(ld,"class","relative group"),d(kI,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SI,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RI,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BI,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(PI,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration"),d($I,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForMaskedLM"),d(II,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(qI,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(NI,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(jI,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(DI,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(GI,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(OI,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(XI,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(zI,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(QI,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(WI,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(HI,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(UI,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(JI,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(eq,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(oq,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(rq,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(aq,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(nq,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(sq,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(lq,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(iq,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(dq,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(cq,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(fq,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(mq,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X1,"id","transformers.AutoModelForSeq2SeqLM"),d(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X1,"href","#transformers.AutoModelForSeq2SeqLM"),d(cd,"class","relative group"),d(gq,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hq,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pq,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_q,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(vq,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(Tq,"href","/docs/transformers/pr_1/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_1/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.MarianMTModel"),d(wq,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(xq,"href","/docs/transformers/pr_1/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_1/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(db,"id","transformers.AutoModelForSequenceClassification"),d(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(db,"href","#transformers.AutoModelForSequenceClassification"),d(gd,"class","relative group"),d(Bq,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pq,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($q,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iq,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(qq,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForSequenceClassification"),d(jq,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(zq,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(eN,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(oN,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(rN,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(aN,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(nN,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForSequenceClassification"),d(sN,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(lN,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(iN,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(dN,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(fN,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(mN,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(gN,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(hN,"href","/docs/transformers/pr_1/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(pN,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uN,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(bN,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(vN,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(FN,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(TN,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(MN,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForSequenceClassification"),d(EN,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(CN,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(wN,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(AN,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(yN,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(LN,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a2,"id","transformers.AutoModelForMultipleChoice"),d(a2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a2,"href","#transformers.AutoModelForMultipleChoice"),d(_d,"class","relative group"),d(xN,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kN,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SN,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RN,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(BN,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d($N,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(qN,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(jN,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(GN,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(VN,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(XN,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(QN,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(HN,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(UN,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(JN,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(ej,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(rj,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(tj,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(aj,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(nj,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(P2,"id","transformers.AutoModelForNextSentencePrediction"),d(P2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(P2,"href","#transformers.AutoModelForNextSentencePrediction"),d(vd,"class","relative group"),d(sj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ij,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dj,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(cj,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(fj,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(mj,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(gj,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G2,"id","transformers.AutoModelForTokenClassification"),d(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G2,"href","#transformers.AutoModelForTokenClassification"),d(Md,"class","relative group"),d(hj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_j,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uj,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(bj,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForTokenClassification"),d(vj,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Fj,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Mj,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Cj,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(wj,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Aj,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Lj,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(xj,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(kj,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(Sj,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Rj,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Pj,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d($j,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Ij,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Nj,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(jj,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Dj,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Vj,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Xj,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(zj,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Qj,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Wj,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Hj,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Uj,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mv,"id","transformers.AutoModelForQuestionAnswering"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.AutoModelForQuestionAnswering"),d(wd,"class","relative group"),d(Jj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Kj,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zj,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_1/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_1/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(gD,"href","/docs/transformers/pr_1/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_1/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_1/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_1/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_1/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_1/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_1/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_1/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_1/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(PD,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d($D,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(qD,"href","/docs/transformers/pr_1/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dF,"id","transformers.AutoModelForTableQuestionAnswering"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ld,"class","relative group"),d(ND,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jD,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DD,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GD,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mF,"id","transformers.AutoModelForImageClassification"),d(mF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mF,"href","#transformers.AutoModelForImageClassification"),d(Sd,"class","relative group"),d(OD,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VD,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XD,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zD,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitForImageClassification"),d(QD,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(WD,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(HD,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForImageClassification"),d(UD,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(JD,"href","/docs/transformers/pr_1/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(YD,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(KD,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(ZD,"href","/docs/transformers/pr_1/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(eG,"href","/docs/transformers/pr_1/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(oG,"href","/docs/transformers/pr_1/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(rG,"href","/docs/transformers/pr_1/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(tG,"href","/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(aG,"href","/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinForImageClassification"),d(nG,"href","/docs/transformers/pr_1/en/model_doc/van#transformers.VanForImageClassification"),d(sG,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wF,"id","transformers.AutoModelForVision2Seq"),d(wF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wF,"href","#transformers.AutoModelForVision2Seq"),d(Pd,"class","relative group"),d(lG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cG,"href","/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LF,"id","transformers.AutoModelForAudioClassification"),d(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(LF,"href","#transformers.AutoModelForAudioClassification"),d(qd,"class","relative group"),d(fG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hG,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(pG,"href","/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(_G,"href","/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(uG,"href","/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(bG,"href","/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(vG,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(FG,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(TG,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NF,"id","transformers.AutoModelForAudioFrameClassification"),d(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NF,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(MG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wG,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(AG,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(yG,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(LG,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XF,"id","transformers.AutoModelForCTC"),d(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XF,"href","#transformers.AutoModelForCTC"),d(Vd,"class","relative group"),d(xG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RG,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(BG,"href","/docs/transformers/pr_1/en/model_doc/hubert#transformers.HubertForCTC"),d(PG,"href","/docs/transformers/pr_1/en/model_doc/sew#transformers.SEWForCTC"),d($G,"href","/docs/transformers/pr_1/en/model_doc/sew-d#transformers.SEWDForCTC"),d(IG,"href","/docs/transformers/pr_1/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(qG,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(NG,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(jG,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Qd,"class","relative group"),d(DG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VG,"href","/docs/transformers/pr_1/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(XG,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aT,"id","transformers.AutoModelForAudioXVector"),d(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aT,"href","#transformers.AutoModelForAudioXVector"),d(Ud,"class","relative group"),d(zG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HG,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(UG,"href","/docs/transformers/pr_1/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(JG,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(YG,"href","/docs/transformers/pr_1/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cT,"id","transformers.AutoModelForMaskedImageModeling"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Kd,"class","relative group"),d(KG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oO,"href","/docs/transformers/pr_1/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(rO,"href","/docs/transformers/pr_1/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(tO,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pT,"id","transformers.AutoModelForObjectDetection"),d(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pT,"href","#transformers.AutoModelForObjectDetection"),d(rc,"class","relative group"),d(aO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lO,"href","/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bT,"id","transformers.AutoModelForImageSegmentation"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.AutoModelForImageSegmentation"),d(nc,"class","relative group"),d(iO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fO,"href","/docs/transformers/pr_1/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.AutoModelForSemanticSegmentation"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForSemanticSegmentation"),d(ic,"class","relative group"),d(mO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(_O,"href","/docs/transformers/pr_1/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(uO,"href","/docs/transformers/pr_1/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(bO,"href","/docs/transformers/pr_1/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yT,"id","transformers.AutoModelForInstanceSegmentation"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(vO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MO,"href","/docs/transformers/pr_1/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kT,"id","transformers.TFAutoModel"),d(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kT,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(EO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertModel"),d(yO,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartModel"),d(LO,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertModel"),d(xO,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(kO,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(SO,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertModel"),d(RO,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.TFCLIPModel"),d(BO,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertModel"),d(PO,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.TFConvNextModel"),d($O,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLModel"),d(IO,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaModel"),d(qO,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(NO,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(jO,"href","/docs/transformers/pr_1/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(DO,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraModel"),d(GO,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(OO,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelModel"),d(VO,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(XO,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2Model"),d(zO,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJModel"),d(QO,"href","/docs/transformers/pr_1/en/model_doc/hubert#transformers.TFHubertModel"),d(WO,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(HO,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.TFLEDModel"),d(UO,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerModel"),d(JO,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.TFLxmertModel"),d(YO,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.TFMarianModel"),d(KO,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.TFMBartModel"),d(ZO,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(eV,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetModel"),d(oV,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.TFMT5Model"),d(rV,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(tV,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.TFPegasusModel"),d(aV,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertModel"),d(nV,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaModel"),d(sV,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerModel"),d(lV,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(iV,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5Model"),d(dV,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasModel"),d(cV,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(fV,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.TFViTModel"),d(mV,"href","/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(gV,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(hV,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMModel"),d(pV,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(_V,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.TFAutoModelForPreTraining"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(uV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FV,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(TV,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(MV,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForPreTraining"),d(EV,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(CV,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(wV,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(AV,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(yV,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(LV,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(xV,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(kV,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(SV,"href","/docs/transformers/pr_1/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(RV,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(BV,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(PV,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($V,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(IV,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(qV,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(NV,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(jV,"href","/docs/transformers/pr_1/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(DV,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(GV,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(OV,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XM,"id","transformers.TFAutoModelForCausalLM"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.TFAutoModelForCausalLM"),d(Fc,"class","relative group"),d(VV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zV,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QV,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(WV,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(HV,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(UV,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(JV,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(YV,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(KV,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(ZV,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(eX,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(oX,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(rX,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(tX,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.TFAutoModelForImageClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(aX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lX,"href","/docs/transformers/pr_1/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(iX,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s4,"id","transformers.TFAutoModelForMaskedLM"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(dX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mX,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(gX,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(hX,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(pX,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(_X,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(uX,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(bX,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(FX,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(TX,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(MX,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(EX,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(CX,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(wX,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(AX,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(yX,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(LX,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(xX,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(kX,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(SX,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(RX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($X,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(NX,"href","/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(jX,"href","/docs/transformers/pr_1/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.TFMarianMTModel"),d(GX,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(VX,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N4,"id","transformers.TFAutoModelForSequenceClassification"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(zX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WX,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HX,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(UX,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(YX,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(KX,"href","/docs/transformers/pr_1/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(ez,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(oz,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(tz,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(az,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(nz,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(sz,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(lz,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(iz,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(dz,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(cz,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(fz,"href","/docs/transformers/pr_1/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(mz,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(gz,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(hz,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(pz,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(_z,"href","/docs/transformers/pr_1/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(uz,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(bz,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(vz,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fE,"id","transformers.TFAutoModelForMultipleChoice"),d(fE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fE,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(Fz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Mz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ez,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(wz,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Az,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(xz,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d($z,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(qz,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(jz,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Dz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Gz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Oz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vz,"href","/docs/transformers/pr_1/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.TFAutoModelForTokenClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(Xz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wz,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Hz,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Uz,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Jz,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Yz,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Kz,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Zz,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(oQ,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(rQ,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(tQ,"href","/docs/transformers/pr_1/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(aQ,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(nQ,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(lQ,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(iQ,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(dQ,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(cQ,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(fQ,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(mQ,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KE,"id","transformers.TFAutoModelForQuestionAnswering"),d(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KE,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(gQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_Q,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_1/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(vQ,"href","/docs/transformers/pr_1/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_1/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_1/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_1/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(wQ,"href","/docs/transformers/pr_1/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_1/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_1/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_1/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_1/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_1/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(PQ,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_1/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v5,"id","transformers.TFAutoModelForVision2Seq"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(IQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jQ,"href","/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(DQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_1/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E5,"id","transformers.FlaxAutoModel"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(XQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertModel"),d(HQ,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartModel"),d(UQ,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.FlaxBeitModel"),d(JQ,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertModel"),d(YQ,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(KQ,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(ZQ,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(eW,"href","/docs/transformers/pr_1/en/model_doc/clip#transformers.FlaxCLIPModel"),d(oW,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(rW,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraModel"),d(tW,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(aW,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(nW,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(sW,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.FlaxMarianModel"),d(lW,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartModel"),d(iW,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5Model"),d(dW,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(cW,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(fW,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(mW,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5Model"),d(gW,"href","/docs/transformers/pr_1/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(hW,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.FlaxViTModel"),d(pW,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(_W,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(uW,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U5,"id","transformers.FlaxAutoModelForCausalLM"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(bW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TW,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(MW,"href","/docs/transformers/pr_1/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(EW,"href","/docs/transformers/pr_1/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(CW,"href","/docs/transformers/pr_1/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(wW,"href","/docs/transformers/pr_1/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o3,"id","transformers.FlaxAutoModelForPreTraining"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(AW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xW,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(kW,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(SW,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(RW,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(BW,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(PW,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(IW,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(qW,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(NW,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_1/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(DW,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h3,"id","transformers.FlaxAutoModelForMaskedLM"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(GW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VW,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XW,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(zW,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(QW,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(WW,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(HW,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(UW,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(JW,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(YW,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(KW,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(ZW,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(eH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tH,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_1/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(nH,"href","/docs/transformers/pr_1/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(sH,"href","/docs/transformers/pr_1/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(lH,"href","/docs/transformers/pr_1/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(iH,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(dH,"href","/docs/transformers/pr_1/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(cH,"href","/docs/transformers/pr_1/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(fH,"href","/docs/transformers/pr_1/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($3,"id","transformers.FlaxAutoModelForSequenceClassification"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(mH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pH,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(_H,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(uH,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(bH,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(vH,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(FH,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(TH,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(MH,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(EH,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(CH,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(wH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LH,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_1/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(RH,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_1/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d($H,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tC,"id","transformers.FlaxAutoModelForTokenClassification"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(NH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GH,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(OH,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(VH,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(XH,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(zH,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(QH,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(WH,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(HH,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(mC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(UH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YH,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KH,"href","/docs/transformers/pr_1/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(eU,"href","/docs/transformers/pr_1/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(oU,"href","/docs/transformers/pr_1/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(rU,"href","/docs/transformers/pr_1/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(tU,"href","/docs/transformers/pr_1/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(aU,"href","/docs/transformers/pr_1/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(nU,"href","/docs/transformers/pr_1/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(sU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dU,"href","/docs/transformers/pr_1/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EC,"id","transformers.FlaxAutoModelForImageClassification"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(cU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gU,"href","/docs/transformers/pr_1/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(hU,"href","/docs/transformers/pr_1/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AC,"id","transformers.FlaxAutoModelForVision2Seq"),d(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(pU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_U,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uU,"href","/docs/transformers/pr_1/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bU,"href","/docs/transformers/pr_1/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,Ni),b(c,Nf,u),b(c,fa,u),e(fa,ji),e(fa,Di),e(Di,Lw),e(fa,jf),b(c,xe,u),b(c,co,u),e(co,Gi),e(co,On),e(On,xw),e(co,Vn),e(co,Xn),e(Xn,kw),e(co,Oi),e(co,zn),e(zn,Sw),e(co,Vi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,T9),e(ue,Xi),e(Xi,M9),e(ue,E9),b(c,zo,u),b(c,Ga,u),e(Ga,C9),e(Ga,Gf),e(Gf,w9),e(Ga,zIe),b(c,RRe,u),b(c,zi,u),e(zi,Of),e(Of,fY),g(Rw,fY,null),e(zi,QIe),e(zi,mY),e(mY,WIe),b(c,BRe,u),b(c,Qn,u),e(Qn,HIe),e(Qn,gY),e(gY,UIe),e(Qn,JIe),e(Qn,hY),e(hY,YIe),e(Qn,KIe),b(c,PRe,u),g(Bw,c,u),b(c,$Re,u),b(c,A9,u),e(A9,ZIe),b(c,IRe,u),g(Vf,c,u),b(c,qRe,u),b(c,Qi,u),e(Qi,Xf),e(Xf,pY),g(Pw,pY,null),e(Qi,eqe),e(Qi,_Y),e(_Y,oqe),b(c,NRe,u),b(c,Qo,u),g($w,Qo,null),e(Qo,rqe),e(Qo,Iw),e(Iw,tqe),e(Iw,y9),e(y9,aqe),e(Iw,nqe),e(Qo,sqe),e(Qo,qw),e(qw,lqe),e(qw,uY),e(uY,iqe),e(qw,dqe),e(Qo,cqe),e(Qo,mo),g(Nw,mo,null),e(mo,fqe),e(mo,bY),e(bY,mqe),e(mo,gqe),e(mo,Wi),e(Wi,hqe),e(Wi,vY),e(vY,pqe),e(Wi,_qe),e(Wi,FY),e(FY,uqe),e(Wi,bqe),e(mo,vqe),e(mo,v),e(v,zf),e(zf,TY),e(TY,Fqe),e(zf,Tqe),e(zf,L9),e(L9,Mqe),e(zf,Eqe),e(v,Cqe),e(v,Qf),e(Qf,MY),e(MY,wqe),e(Qf,Aqe),e(Qf,x9),e(x9,yqe),e(Qf,Lqe),e(v,xqe),e(v,Wf),e(Wf,EY),e(EY,kqe),e(Wf,Sqe),e(Wf,k9),e(k9,Rqe),e(Wf,Bqe),e(v,Pqe),e(v,Hf),e(Hf,CY),e(CY,$qe),e(Hf,Iqe),e(Hf,S9),e(S9,qqe),e(Hf,Nqe),e(v,jqe),e(v,Uf),e(Uf,wY),e(wY,Dqe),e(Uf,Gqe),e(Uf,R9),e(R9,Oqe),e(Uf,Vqe),e(v,Xqe),e(v,Jf),e(Jf,AY),e(AY,zqe),e(Jf,Qqe),e(Jf,B9),e(B9,Wqe),e(Jf,Hqe),e(v,Uqe),e(v,Yf),e(Yf,yY),e(yY,Jqe),e(Yf,Yqe),e(Yf,P9),e(P9,Kqe),e(Yf,Zqe),e(v,eNe),e(v,Kf),e(Kf,LY),e(LY,oNe),e(Kf,rNe),e(Kf,$9),e($9,tNe),e(Kf,aNe),e(v,nNe),e(v,Zf),e(Zf,xY),e(xY,sNe),e(Zf,lNe),e(Zf,I9),e(I9,iNe),e(Zf,dNe),e(v,cNe),e(v,em),e(em,kY),e(kY,fNe),e(em,mNe),e(em,q9),e(q9,gNe),e(em,hNe),e(v,pNe),e(v,om),e(om,SY),e(SY,_Ne),e(om,uNe),e(om,N9),e(N9,bNe),e(om,vNe),e(v,FNe),e(v,rm),e(rm,RY),e(RY,TNe),e(rm,MNe),e(rm,j9),e(j9,ENe),e(rm,CNe),e(v,wNe),e(v,tm),e(tm,BY),e(BY,ANe),e(tm,yNe),e(tm,D9),e(D9,LNe),e(tm,xNe),e(v,kNe),e(v,am),e(am,PY),e(PY,SNe),e(am,RNe),e(am,G9),e(G9,BNe),e(am,PNe),e(v,$Ne),e(v,nm),e(nm,$Y),e($Y,INe),e(nm,qNe),e(nm,O9),e(O9,NNe),e(nm,jNe),e(v,DNe),e(v,sm),e(sm,IY),e(IY,GNe),e(sm,ONe),e(sm,V9),e(V9,VNe),e(sm,XNe),e(v,zNe),e(v,lm),e(lm,qY),e(qY,QNe),e(lm,WNe),e(lm,X9),e(X9,HNe),e(lm,UNe),e(v,JNe),e(v,im),e(im,NY),e(NY,YNe),e(im,KNe),e(im,z9),e(z9,ZNe),e(im,eje),e(v,oje),e(v,dm),e(dm,jY),e(jY,rje),e(dm,tje),e(dm,Q9),e(Q9,aje),e(dm,nje),e(v,sje),e(v,cm),e(cm,DY),e(DY,lje),e(cm,ije),e(cm,W9),e(W9,dje),e(cm,cje),e(v,fje),e(v,fm),e(fm,GY),e(GY,mje),e(fm,gje),e(fm,H9),e(H9,hje),e(fm,pje),e(v,_je),e(v,mm),e(mm,OY),e(OY,uje),e(mm,bje),e(mm,U9),e(U9,vje),e(mm,Fje),e(v,Tje),e(v,gm),e(gm,VY),e(VY,Mje),e(gm,Eje),e(gm,J9),e(J9,Cje),e(gm,wje),e(v,Aje),e(v,hm),e(hm,XY),e(XY,yje),e(hm,Lje),e(hm,Y9),e(Y9,xje),e(hm,kje),e(v,Sje),e(v,pm),e(pm,zY),e(zY,Rje),e(pm,Bje),e(pm,K9),e(K9,Pje),e(pm,$je),e(v,Ije),e(v,_m),e(_m,QY),e(QY,qje),e(_m,Nje),e(_m,Z9),e(Z9,jje),e(_m,Dje),e(v,Gje),e(v,um),e(um,WY),e(WY,Oje),e(um,Vje),e(um,ex),e(ex,Xje),e(um,zje),e(v,Qje),e(v,bm),e(bm,HY),e(HY,Wje),e(bm,Hje),e(bm,ox),e(ox,Uje),e(bm,Jje),e(v,Yje),e(v,vm),e(vm,UY),e(UY,Kje),e(vm,Zje),e(vm,rx),e(rx,eDe),e(vm,oDe),e(v,rDe),e(v,Fm),e(Fm,JY),e(JY,tDe),e(Fm,aDe),e(Fm,tx),e(tx,nDe),e(Fm,sDe),e(v,lDe),e(v,Tm),e(Tm,YY),e(YY,iDe),e(Tm,dDe),e(Tm,ax),e(ax,cDe),e(Tm,fDe),e(v,mDe),e(v,Mm),e(Mm,KY),e(KY,gDe),e(Mm,hDe),e(Mm,nx),e(nx,pDe),e(Mm,_De),e(v,uDe),e(v,Em),e(Em,ZY),e(ZY,bDe),e(Em,vDe),e(Em,sx),e(sx,FDe),e(Em,TDe),e(v,MDe),e(v,Cm),e(Cm,eK),e(eK,EDe),e(Cm,CDe),e(Cm,lx),e(lx,wDe),e(Cm,ADe),e(v,yDe),e(v,wm),e(wm,oK),e(oK,LDe),e(wm,xDe),e(wm,ix),e(ix,kDe),e(wm,SDe),e(v,RDe),e(v,Am),e(Am,rK),e(rK,BDe),e(Am,PDe),e(Am,dx),e(dx,$De),e(Am,IDe),e(v,qDe),e(v,ym),e(ym,tK),e(tK,NDe),e(ym,jDe),e(ym,cx),e(cx,DDe),e(ym,GDe),e(v,ODe),e(v,Lm),e(Lm,aK),e(aK,VDe),e(Lm,XDe),e(Lm,fx),e(fx,zDe),e(Lm,QDe),e(v,WDe),e(v,xm),e(xm,nK),e(nK,HDe),e(xm,UDe),e(xm,mx),e(mx,JDe),e(xm,YDe),e(v,KDe),e(v,km),e(km,sK),e(sK,ZDe),e(km,eGe),e(km,gx),e(gx,oGe),e(km,rGe),e(v,tGe),e(v,Sm),e(Sm,lK),e(lK,aGe),e(Sm,nGe),e(Sm,hx),e(hx,sGe),e(Sm,lGe),e(v,iGe),e(v,Rm),e(Rm,iK),e(iK,dGe),e(Rm,cGe),e(Rm,px),e(px,fGe),e(Rm,mGe),e(v,gGe),e(v,Bm),e(Bm,dK),e(dK,hGe),e(Bm,pGe),e(Bm,_x),e(_x,_Ge),e(Bm,uGe),e(v,bGe),e(v,Pm),e(Pm,cK),e(cK,vGe),e(Pm,FGe),e(Pm,ux),e(ux,TGe),e(Pm,MGe),e(v,EGe),e(v,$m),e($m,fK),e(fK,CGe),e($m,wGe),e($m,bx),e(bx,AGe),e($m,yGe),e(v,LGe),e(v,Im),e(Im,mK),e(mK,xGe),e(Im,kGe),e(Im,vx),e(vx,SGe),e(Im,RGe),e(v,BGe),e(v,qm),e(qm,gK),e(gK,PGe),e(qm,$Ge),e(qm,Fx),e(Fx,IGe),e(qm,qGe),e(v,NGe),e(v,Nm),e(Nm,hK),e(hK,jGe),e(Nm,DGe),e(Nm,Tx),e(Tx,GGe),e(Nm,OGe),e(v,VGe),e(v,jm),e(jm,pK),e(pK,XGe),e(jm,zGe),e(jm,Mx),e(Mx,QGe),e(jm,WGe),e(v,HGe),e(v,Dm),e(Dm,_K),e(_K,UGe),e(Dm,JGe),e(Dm,Ex),e(Ex,YGe),e(Dm,KGe),e(v,ZGe),e(v,Gm),e(Gm,uK),e(uK,eOe),e(Gm,oOe),e(Gm,Cx),e(Cx,rOe),e(Gm,tOe),e(v,aOe),e(v,Om),e(Om,bK),e(bK,nOe),e(Om,sOe),e(Om,wx),e(wx,lOe),e(Om,iOe),e(v,dOe),e(v,Vm),e(Vm,vK),e(vK,cOe),e(Vm,fOe),e(Vm,Ax),e(Ax,mOe),e(Vm,gOe),e(v,hOe),e(v,Xm),e(Xm,FK),e(FK,pOe),e(Xm,_Oe),e(Xm,yx),e(yx,uOe),e(Xm,bOe),e(v,vOe),e(v,zm),e(zm,TK),e(TK,FOe),e(zm,TOe),e(zm,Lx),e(Lx,MOe),e(zm,EOe),e(v,COe),e(v,Qm),e(Qm,MK),e(MK,wOe),e(Qm,AOe),e(Qm,xx),e(xx,yOe),e(Qm,LOe),e(v,xOe),e(v,Wm),e(Wm,EK),e(EK,kOe),e(Wm,SOe),e(Wm,kx),e(kx,ROe),e(Wm,BOe),e(v,POe),e(v,Hm),e(Hm,CK),e(CK,$Oe),e(Hm,IOe),e(Hm,Sx),e(Sx,qOe),e(Hm,NOe),e(v,jOe),e(v,Um),e(Um,wK),e(wK,DOe),e(Um,GOe),e(Um,Rx),e(Rx,OOe),e(Um,VOe),e(v,XOe),e(v,Jm),e(Jm,AK),e(AK,zOe),e(Jm,QOe),e(Jm,Bx),e(Bx,WOe),e(Jm,HOe),e(v,UOe),e(v,Ym),e(Ym,yK),e(yK,JOe),e(Ym,YOe),e(Ym,Px),e(Px,KOe),e(Ym,ZOe),e(v,eVe),e(v,Km),e(Km,LK),e(LK,oVe),e(Km,rVe),e(Km,$x),e($x,tVe),e(Km,aVe),e(v,nVe),e(v,Zm),e(Zm,xK),e(xK,sVe),e(Zm,lVe),e(Zm,Ix),e(Ix,iVe),e(Zm,dVe),e(v,cVe),e(v,eg),e(eg,kK),e(kK,fVe),e(eg,mVe),e(eg,qx),e(qx,gVe),e(eg,hVe),e(v,pVe),e(v,og),e(og,SK),e(SK,_Ve),e(og,uVe),e(og,Nx),e(Nx,bVe),e(og,vVe),e(v,FVe),e(v,rg),e(rg,RK),e(RK,TVe),e(rg,MVe),e(rg,jx),e(jx,EVe),e(rg,CVe),e(v,wVe),e(v,tg),e(tg,BK),e(BK,AVe),e(tg,yVe),e(tg,Dx),e(Dx,LVe),e(tg,xVe),e(v,kVe),e(v,ag),e(ag,PK),e(PK,SVe),e(ag,RVe),e(ag,Gx),e(Gx,BVe),e(ag,PVe),e(v,$Ve),e(v,ng),e(ng,$K),e($K,IVe),e(ng,qVe),e(ng,Ox),e(Ox,NVe),e(ng,jVe),e(v,DVe),e(v,sg),e(sg,IK),e(IK,GVe),e(sg,OVe),e(sg,Vx),e(Vx,VVe),e(sg,XVe),e(v,zVe),e(v,lg),e(lg,qK),e(qK,QVe),e(lg,WVe),e(lg,Xx),e(Xx,HVe),e(lg,UVe),e(v,JVe),e(v,ig),e(ig,NK),e(NK,YVe),e(ig,KVe),e(ig,zx),e(zx,ZVe),e(ig,eXe),e(v,oXe),e(v,dg),e(dg,jK),e(jK,rXe),e(dg,tXe),e(dg,Qx),e(Qx,aXe),e(dg,nXe),e(v,sXe),e(v,cg),e(cg,DK),e(DK,lXe),e(cg,iXe),e(cg,Wx),e(Wx,dXe),e(cg,cXe),e(v,fXe),e(v,fg),e(fg,GK),e(GK,mXe),e(fg,gXe),e(fg,Hx),e(Hx,hXe),e(fg,pXe),e(v,_Xe),e(v,mg),e(mg,OK),e(OK,uXe),e(mg,bXe),e(mg,Ux),e(Ux,vXe),e(mg,FXe),e(v,TXe),e(v,gg),e(gg,VK),e(VK,MXe),e(gg,EXe),e(gg,Jx),e(Jx,CXe),e(gg,wXe),e(v,AXe),e(v,hg),e(hg,XK),e(XK,yXe),e(hg,LXe),e(hg,Yx),e(Yx,xXe),e(hg,kXe),e(v,SXe),e(v,pg),e(pg,zK),e(zK,RXe),e(pg,BXe),e(pg,Kx),e(Kx,PXe),e(pg,$Xe),e(v,IXe),e(v,_g),e(_g,QK),e(QK,qXe),e(_g,NXe),e(_g,Zx),e(Zx,jXe),e(_g,DXe),e(v,GXe),e(v,ug),e(ug,WK),e(WK,OXe),e(ug,VXe),e(ug,ek),e(ek,XXe),e(ug,zXe),e(v,QXe),e(v,bg),e(bg,HK),e(HK,WXe),e(bg,HXe),e(bg,ok),e(ok,UXe),e(bg,JXe),e(v,YXe),e(v,vg),e(vg,UK),e(UK,KXe),e(vg,ZXe),e(vg,rk),e(rk,eze),e(vg,oze),e(v,rze),e(v,Fg),e(Fg,JK),e(JK,tze),e(Fg,aze),e(Fg,tk),e(tk,nze),e(Fg,sze),e(v,lze),e(v,Tg),e(Tg,YK),e(YK,ize),e(Tg,dze),e(Tg,ak),e(ak,cze),e(Tg,fze),e(v,mze),e(v,Mg),e(Mg,KK),e(KK,gze),e(Mg,hze),e(Mg,nk),e(nk,pze),e(Mg,_ze),e(v,uze),e(v,Eg),e(Eg,ZK),e(ZK,bze),e(Eg,vze),e(Eg,sk),e(sk,Fze),e(Eg,Tze),e(v,Mze),e(v,Cg),e(Cg,eZ),e(eZ,Eze),e(Cg,Cze),e(Cg,lk),e(lk,wze),e(Cg,Aze),e(v,yze),e(v,wg),e(wg,oZ),e(oZ,Lze),e(wg,xze),e(wg,ik),e(ik,kze),e(wg,Sze),e(v,Rze),e(v,Ag),e(Ag,rZ),e(rZ,Bze),e(Ag,Pze),e(Ag,dk),e(dk,$ze),e(Ag,Ize),e(v,qze),e(v,yg),e(yg,tZ),e(tZ,Nze),e(yg,jze),e(yg,ck),e(ck,Dze),e(yg,Gze),e(v,Oze),e(v,Lg),e(Lg,aZ),e(aZ,Vze),e(Lg,Xze),e(Lg,fk),e(fk,zze),e(Lg,Qze),e(v,Wze),e(v,xg),e(xg,nZ),e(nZ,Hze),e(xg,Uze),e(xg,mk),e(mk,Jze),e(xg,Yze),e(v,Kze),e(v,kg),e(kg,sZ),e(sZ,Zze),e(kg,eQe),e(kg,gk),e(gk,oQe),e(kg,rQe),e(v,tQe),e(v,Sg),e(Sg,lZ),e(lZ,aQe),e(Sg,nQe),e(Sg,hk),e(hk,sQe),e(Sg,lQe),e(v,iQe),e(v,Rg),e(Rg,iZ),e(iZ,dQe),e(Rg,cQe),e(Rg,pk),e(pk,fQe),e(Rg,mQe),e(v,gQe),e(v,Bg),e(Bg,dZ),e(dZ,hQe),e(Bg,pQe),e(Bg,_k),e(_k,_Qe),e(Bg,uQe),e(v,bQe),e(v,Pg),e(Pg,cZ),e(cZ,vQe),e(Pg,FQe),e(Pg,uk),e(uk,TQe),e(Pg,MQe),e(v,EQe),e(v,$g),e($g,fZ),e(fZ,CQe),e($g,wQe),e($g,bk),e(bk,AQe),e($g,yQe),e(v,LQe),e(v,Ig),e(Ig,mZ),e(mZ,xQe),e(Ig,kQe),e(Ig,vk),e(vk,SQe),e(Ig,RQe),e(v,BQe),e(v,qg),e(qg,gZ),e(gZ,PQe),e(qg,$Qe),e(qg,Fk),e(Fk,IQe),e(qg,qQe),e(v,NQe),e(v,Ng),e(Ng,hZ),e(hZ,jQe),e(Ng,DQe),e(Ng,Tk),e(Tk,GQe),e(Ng,OQe),e(mo,VQe),e(mo,pZ),e(pZ,XQe),e(mo,zQe),g(jw,mo,null),e(Qo,QQe),e(Qo,jg),g(Dw,jg,null),e(jg,WQe),e(jg,_Z),e(_Z,HQe),b(c,jRe,u),b(c,Hi,u),e(Hi,Dg),e(Dg,uZ),g(Gw,uZ,null),e(Hi,UQe),e(Hi,bZ),e(bZ,JQe),b(c,DRe,u),b(c,Wo,u),g(Ow,Wo,null),e(Wo,YQe),e(Wo,Vw),e(Vw,KQe),e(Vw,Mk),e(Mk,ZQe),e(Vw,eWe),e(Wo,oWe),e(Wo,Xw),e(Xw,rWe),e(Xw,vZ),e(vZ,tWe),e(Xw,aWe),e(Wo,nWe),e(Wo,go),g(zw,go,null),e(go,sWe),e(go,FZ),e(FZ,lWe),e(go,iWe),e(go,Oa),e(Oa,dWe),e(Oa,TZ),e(TZ,cWe),e(Oa,fWe),e(Oa,MZ),e(MZ,mWe),e(Oa,gWe),e(Oa,EZ),e(EZ,hWe),e(Oa,pWe),e(go,_We),e(go,E),e(E,Wn),e(Wn,CZ),e(CZ,uWe),e(Wn,bWe),e(Wn,Ek),e(Ek,vWe),e(Wn,FWe),e(Wn,Ck),e(Ck,TWe),e(Wn,MWe),e(E,EWe),e(E,Hn),e(Hn,wZ),e(wZ,CWe),e(Hn,wWe),e(Hn,wk),e(wk,AWe),e(Hn,yWe),e(Hn,Ak),e(Ak,LWe),e(Hn,xWe),e(E,kWe),e(E,Un),e(Un,AZ),e(AZ,SWe),e(Un,RWe),e(Un,yk),e(yk,BWe),e(Un,PWe),e(Un,Lk),e(Lk,$We),e(Un,IWe),e(E,qWe),e(E,Gg),e(Gg,yZ),e(yZ,NWe),e(Gg,jWe),e(Gg,xk),e(xk,DWe),e(Gg,GWe),e(E,OWe),e(E,Jn),e(Jn,LZ),e(LZ,VWe),e(Jn,XWe),e(Jn,kk),e(kk,zWe),e(Jn,QWe),e(Jn,Sk),e(Sk,WWe),e(Jn,HWe),e(E,UWe),e(E,Og),e(Og,xZ),e(xZ,JWe),e(Og,YWe),e(Og,Rk),e(Rk,KWe),e(Og,ZWe),e(E,eHe),e(E,Vg),e(Vg,kZ),e(kZ,oHe),e(Vg,rHe),e(Vg,Bk),e(Bk,tHe),e(Vg,aHe),e(E,nHe),e(E,Xg),e(Xg,SZ),e(SZ,sHe),e(Xg,lHe),e(Xg,Pk),e(Pk,iHe),e(Xg,dHe),e(E,cHe),e(E,Yn),e(Yn,RZ),e(RZ,fHe),e(Yn,mHe),e(Yn,$k),e($k,gHe),e(Yn,hHe),e(Yn,Ik),e(Ik,pHe),e(Yn,_He),e(E,uHe),e(E,Kn),e(Kn,BZ),e(BZ,bHe),e(Kn,vHe),e(Kn,qk),e(qk,FHe),e(Kn,THe),e(Kn,Nk),e(Nk,MHe),e(Kn,EHe),e(E,CHe),e(E,Zn),e(Zn,PZ),e(PZ,wHe),e(Zn,AHe),e(Zn,jk),e(jk,yHe),e(Zn,LHe),e(Zn,Dk),e(Dk,xHe),e(Zn,kHe),e(E,SHe),e(E,zg),e(zg,$Z),e($Z,RHe),e(zg,BHe),e(zg,Gk),e(Gk,PHe),e(zg,$He),e(E,IHe),e(E,Qg),e(Qg,IZ),e(IZ,qHe),e(Qg,NHe),e(Qg,Ok),e(Ok,jHe),e(Qg,DHe),e(E,GHe),e(E,es),e(es,qZ),e(qZ,OHe),e(es,VHe),e(es,Vk),e(Vk,XHe),e(es,zHe),e(es,Xk),e(Xk,QHe),e(es,WHe),e(E,HHe),e(E,Wg),e(Wg,NZ),e(NZ,UHe),e(Wg,JHe),e(Wg,zk),e(zk,YHe),e(Wg,KHe),e(E,ZHe),e(E,os),e(os,jZ),e(jZ,eUe),e(os,oUe),e(os,Qk),e(Qk,rUe),e(os,tUe),e(os,Wk),e(Wk,aUe),e(os,nUe),e(E,sUe),e(E,rs),e(rs,DZ),e(DZ,lUe),e(rs,iUe),e(rs,Hk),e(Hk,dUe),e(rs,cUe),e(rs,Uk),e(Uk,fUe),e(rs,mUe),e(E,gUe),e(E,ts),e(ts,GZ),e(GZ,hUe),e(ts,pUe),e(ts,Jk),e(Jk,_Ue),e(ts,uUe),e(ts,OZ),e(OZ,bUe),e(ts,vUe),e(E,FUe),e(E,Hg),e(Hg,VZ),e(VZ,TUe),e(Hg,MUe),e(Hg,Yk),e(Yk,EUe),e(Hg,CUe),e(E,wUe),e(E,as),e(as,XZ),e(XZ,AUe),e(as,yUe),e(as,Kk),e(Kk,LUe),e(as,xUe),e(as,Zk),e(Zk,kUe),e(as,SUe),e(E,RUe),e(E,ns),e(ns,zZ),e(zZ,BUe),e(ns,PUe),e(ns,eS),e(eS,$Ue),e(ns,IUe),e(ns,oS),e(oS,qUe),e(ns,NUe),e(E,jUe),e(E,ss),e(ss,QZ),e(QZ,DUe),e(ss,GUe),e(ss,rS),e(rS,OUe),e(ss,VUe),e(ss,tS),e(tS,XUe),e(ss,zUe),e(E,QUe),e(E,ls),e(ls,WZ),e(WZ,WUe),e(ls,HUe),e(ls,aS),e(aS,UUe),e(ls,JUe),e(ls,nS),e(nS,YUe),e(ls,KUe),e(E,ZUe),e(E,is),e(is,HZ),e(HZ,eJe),e(is,oJe),e(is,sS),e(sS,rJe),e(is,tJe),e(is,lS),e(lS,aJe),e(is,nJe),e(E,sJe),e(E,Ug),e(Ug,UZ),e(UZ,lJe),e(Ug,iJe),e(Ug,iS),e(iS,dJe),e(Ug,cJe),e(E,fJe),e(E,ds),e(ds,JZ),e(JZ,mJe),e(ds,gJe),e(ds,dS),e(dS,hJe),e(ds,pJe),e(ds,cS),e(cS,_Je),e(ds,uJe),e(E,bJe),e(E,Jg),e(Jg,YZ),e(YZ,vJe),e(Jg,FJe),e(Jg,fS),e(fS,TJe),e(Jg,MJe),e(E,EJe),e(E,cs),e(cs,KZ),e(KZ,CJe),e(cs,wJe),e(cs,mS),e(mS,AJe),e(cs,yJe),e(cs,gS),e(gS,LJe),e(cs,xJe),e(E,kJe),e(E,fs),e(fs,ZZ),e(ZZ,SJe),e(fs,RJe),e(fs,hS),e(hS,BJe),e(fs,PJe),e(fs,pS),e(pS,$Je),e(fs,IJe),e(E,qJe),e(E,ms),e(ms,eee),e(eee,NJe),e(ms,jJe),e(ms,_S),e(_S,DJe),e(ms,GJe),e(ms,uS),e(uS,OJe),e(ms,VJe),e(E,XJe),e(E,gs),e(gs,oee),e(oee,zJe),e(gs,QJe),e(gs,bS),e(bS,WJe),e(gs,HJe),e(gs,vS),e(vS,UJe),e(gs,JJe),e(E,YJe),e(E,Yg),e(Yg,ree),e(ree,KJe),e(Yg,ZJe),e(Yg,FS),e(FS,eYe),e(Yg,oYe),e(E,rYe),e(E,hs),e(hs,tee),e(tee,tYe),e(hs,aYe),e(hs,TS),e(TS,nYe),e(hs,sYe),e(hs,MS),e(MS,lYe),e(hs,iYe),e(E,dYe),e(E,ps),e(ps,aee),e(aee,cYe),e(ps,fYe),e(ps,ES),e(ES,mYe),e(ps,gYe),e(ps,CS),e(CS,hYe),e(ps,pYe),e(E,_Ye),e(E,_s),e(_s,nee),e(nee,uYe),e(_s,bYe),e(_s,wS),e(wS,vYe),e(_s,FYe),e(_s,AS),e(AS,TYe),e(_s,MYe),e(E,EYe),e(E,us),e(us,see),e(see,CYe),e(us,wYe),e(us,yS),e(yS,AYe),e(us,yYe),e(us,LS),e(LS,LYe),e(us,xYe),e(E,kYe),e(E,bs),e(bs,lee),e(lee,SYe),e(bs,RYe),e(bs,xS),e(xS,BYe),e(bs,PYe),e(bs,kS),e(kS,$Ye),e(bs,IYe),e(E,qYe),e(E,vs),e(vs,iee),e(iee,NYe),e(vs,jYe),e(vs,SS),e(SS,DYe),e(vs,GYe),e(vs,RS),e(RS,OYe),e(vs,VYe),e(E,XYe),e(E,Kg),e(Kg,dee),e(dee,zYe),e(Kg,QYe),e(Kg,BS),e(BS,WYe),e(Kg,HYe),e(E,UYe),e(E,Fs),e(Fs,cee),e(cee,JYe),e(Fs,YYe),e(Fs,PS),e(PS,KYe),e(Fs,ZYe),e(Fs,$S),e($S,eKe),e(Fs,oKe),e(E,rKe),e(E,Zg),e(Zg,fee),e(fee,tKe),e(Zg,aKe),e(Zg,IS),e(IS,nKe),e(Zg,sKe),e(E,lKe),e(E,eh),e(eh,mee),e(mee,iKe),e(eh,dKe),e(eh,qS),e(qS,cKe),e(eh,fKe),e(E,mKe),e(E,Ts),e(Ts,gee),e(gee,gKe),e(Ts,hKe),e(Ts,NS),e(NS,pKe),e(Ts,_Ke),e(Ts,jS),e(jS,uKe),e(Ts,bKe),e(E,vKe),e(E,Ms),e(Ms,hee),e(hee,FKe),e(Ms,TKe),e(Ms,DS),e(DS,MKe),e(Ms,EKe),e(Ms,GS),e(GS,CKe),e(Ms,wKe),e(E,AKe),e(E,oh),e(oh,pee),e(pee,yKe),e(oh,LKe),e(oh,OS),e(OS,xKe),e(oh,kKe),e(E,SKe),e(E,Es),e(Es,_ee),e(_ee,RKe),e(Es,BKe),e(Es,VS),e(VS,PKe),e(Es,$Ke),e(Es,XS),e(XS,IKe),e(Es,qKe),e(E,NKe),e(E,Cs),e(Cs,uee),e(uee,jKe),e(Cs,DKe),e(Cs,zS),e(zS,GKe),e(Cs,OKe),e(Cs,QS),e(QS,VKe),e(Cs,XKe),e(E,zKe),e(E,ws),e(ws,bee),e(bee,QKe),e(ws,WKe),e(ws,WS),e(WS,HKe),e(ws,UKe),e(ws,HS),e(HS,JKe),e(ws,YKe),e(E,KKe),e(E,As),e(As,vee),e(vee,ZKe),e(As,eZe),e(As,US),e(US,oZe),e(As,rZe),e(As,JS),e(JS,tZe),e(As,aZe),e(E,nZe),e(E,ys),e(ys,Fee),e(Fee,sZe),e(ys,lZe),e(ys,YS),e(YS,iZe),e(ys,dZe),e(ys,KS),e(KS,cZe),e(ys,fZe),e(E,mZe),e(E,rh),e(rh,Tee),e(Tee,gZe),e(rh,hZe),e(rh,ZS),e(ZS,pZe),e(rh,_Ze),e(E,uZe),e(E,th),e(th,Mee),e(Mee,bZe),e(th,vZe),e(th,eR),e(eR,FZe),e(th,TZe),e(E,MZe),e(E,ah),e(ah,Eee),e(Eee,EZe),e(ah,CZe),e(ah,oR),e(oR,wZe),e(ah,AZe),e(E,yZe),e(E,nh),e(nh,Cee),e(Cee,LZe),e(nh,xZe),e(nh,rR),e(rR,kZe),e(nh,SZe),e(E,RZe),e(E,Ls),e(Ls,wee),e(wee,BZe),e(Ls,PZe),e(Ls,tR),e(tR,$Ze),e(Ls,IZe),e(Ls,aR),e(aR,qZe),e(Ls,NZe),e(E,jZe),e(E,sh),e(sh,Aee),e(Aee,DZe),e(sh,GZe),e(sh,nR),e(nR,OZe),e(sh,VZe),e(E,XZe),e(E,xs),e(xs,yee),e(yee,zZe),e(xs,QZe),e(xs,sR),e(sR,WZe),e(xs,HZe),e(xs,lR),e(lR,UZe),e(xs,JZe),e(E,YZe),e(E,ks),e(ks,Lee),e(Lee,KZe),e(ks,ZZe),e(ks,iR),e(iR,eeo),e(ks,oeo),e(ks,dR),e(dR,reo),e(ks,teo),e(E,aeo),e(E,Ss),e(Ss,xee),e(xee,neo),e(Ss,seo),e(Ss,cR),e(cR,leo),e(Ss,ieo),e(Ss,fR),e(fR,deo),e(Ss,ceo),e(E,feo),e(E,Rs),e(Rs,kee),e(kee,meo),e(Rs,geo),e(Rs,mR),e(mR,heo),e(Rs,peo),e(Rs,gR),e(gR,_eo),e(Rs,ueo),e(E,beo),e(E,Bs),e(Bs,See),e(See,veo),e(Bs,Feo),e(Bs,hR),e(hR,Teo),e(Bs,Meo),e(Bs,pR),e(pR,Eeo),e(Bs,Ceo),e(E,weo),e(E,Ps),e(Ps,Ree),e(Ree,Aeo),e(Ps,yeo),e(Ps,_R),e(_R,Leo),e(Ps,xeo),e(Ps,uR),e(uR,keo),e(Ps,Seo),e(E,Reo),e(E,lh),e(lh,Bee),e(Bee,Beo),e(lh,Peo),e(lh,bR),e(bR,$eo),e(lh,Ieo),e(E,qeo),e(E,ih),e(ih,Pee),e(Pee,Neo),e(ih,jeo),e(ih,vR),e(vR,Deo),e(ih,Geo),e(E,Oeo),e(E,$s),e($s,$ee),e($ee,Veo),e($s,Xeo),e($s,FR),e(FR,zeo),e($s,Qeo),e($s,TR),e(TR,Weo),e($s,Heo),e(E,Ueo),e(E,Is),e(Is,Iee),e(Iee,Jeo),e(Is,Yeo),e(Is,MR),e(MR,Keo),e(Is,Zeo),e(Is,ER),e(ER,eoo),e(Is,ooo),e(E,roo),e(E,qs),e(qs,qee),e(qee,too),e(qs,aoo),e(qs,CR),e(CR,noo),e(qs,soo),e(qs,wR),e(wR,loo),e(qs,ioo),e(E,doo),e(E,dh),e(dh,Nee),e(Nee,coo),e(dh,foo),e(dh,AR),e(AR,moo),e(dh,goo),e(E,hoo),e(E,ch),e(ch,jee),e(jee,poo),e(ch,_oo),e(ch,yR),e(yR,uoo),e(ch,boo),e(E,voo),e(E,fh),e(fh,Dee),e(Dee,Foo),e(fh,Too),e(fh,LR),e(LR,Moo),e(fh,Eoo),e(E,Coo),e(E,mh),e(mh,Gee),e(Gee,woo),e(mh,Aoo),e(mh,xR),e(xR,yoo),e(mh,Loo),e(E,xoo),e(E,gh),e(gh,Oee),e(Oee,koo),e(gh,Soo),e(gh,kR),e(kR,Roo),e(gh,Boo),e(E,Poo),e(E,Ns),e(Ns,Vee),e(Vee,$oo),e(Ns,Ioo),e(Ns,SR),e(SR,qoo),e(Ns,Noo),e(Ns,RR),e(RR,joo),e(Ns,Doo),e(E,Goo),e(E,hh),e(hh,Xee),e(Xee,Ooo),e(hh,Voo),e(hh,BR),e(BR,Xoo),e(hh,zoo),e(E,Qoo),e(E,ph),e(ph,zee),e(zee,Woo),e(ph,Hoo),e(ph,PR),e(PR,Uoo),e(ph,Joo),e(E,Yoo),e(E,js),e(js,Qee),e(Qee,Koo),e(js,Zoo),e(js,$R),e($R,ero),e(js,oro),e(js,IR),e(IR,rro),e(js,tro),e(E,aro),e(E,Ds),e(Ds,Wee),e(Wee,nro),e(Ds,sro),e(Ds,qR),e(qR,lro),e(Ds,iro),e(Ds,NR),e(NR,dro),e(Ds,cro),e(go,fro),e(go,Hee),e(Hee,mro),e(go,gro),g(Qw,go,null),e(Wo,hro),e(Wo,_h),g(Ww,_h,null),e(_h,pro),e(_h,Uee),e(Uee,_ro),b(c,GRe,u),b(c,Ui,u),e(Ui,uh),e(uh,Jee),g(Hw,Jee,null),e(Ui,uro),e(Ui,Yee),e(Yee,bro),b(c,ORe,u),b(c,Ho,u),g(Uw,Ho,null),e(Ho,vro),e(Ho,Jw),e(Jw,Fro),e(Jw,jR),e(jR,Tro),e(Jw,Mro),e(Ho,Ero),e(Ho,Yw),e(Yw,Cro),e(Yw,Kee),e(Kee,wro),e(Yw,Aro),e(Ho,yro),e(Ho,$e),g(Kw,$e,null),e($e,Lro),e($e,Zee),e(Zee,xro),e($e,kro),e($e,Va),e(Va,Sro),e(Va,eoe),e(eoe,Rro),e(Va,Bro),e(Va,ooe),e(ooe,Pro),e(Va,$ro),e(Va,roe),e(roe,Iro),e(Va,qro),e($e,Nro),e($e,ee),e(ee,bh),e(bh,toe),e(toe,jro),e(bh,Dro),e(bh,DR),e(DR,Gro),e(bh,Oro),e(ee,Vro),e(ee,vh),e(vh,aoe),e(aoe,Xro),e(vh,zro),e(vh,GR),e(GR,Qro),e(vh,Wro),e(ee,Hro),e(ee,Fh),e(Fh,noe),e(noe,Uro),e(Fh,Jro),e(Fh,OR),e(OR,Yro),e(Fh,Kro),e(ee,Zro),e(ee,Th),e(Th,soe),e(soe,eto),e(Th,oto),e(Th,VR),e(VR,rto),e(Th,tto),e(ee,ato),e(ee,Mh),e(Mh,loe),e(loe,nto),e(Mh,sto),e(Mh,XR),e(XR,lto),e(Mh,ito),e(ee,dto),e(ee,Eh),e(Eh,ioe),e(ioe,cto),e(Eh,fto),e(Eh,zR),e(zR,mto),e(Eh,gto),e(ee,hto),e(ee,Ch),e(Ch,doe),e(doe,pto),e(Ch,_to),e(Ch,QR),e(QR,uto),e(Ch,bto),e(ee,vto),e(ee,wh),e(wh,coe),e(coe,Fto),e(wh,Tto),e(wh,WR),e(WR,Mto),e(wh,Eto),e(ee,Cto),e(ee,Ah),e(Ah,foe),e(foe,wto),e(Ah,Ato),e(Ah,HR),e(HR,yto),e(Ah,Lto),e(ee,xto),e(ee,yh),e(yh,moe),e(moe,kto),e(yh,Sto),e(yh,UR),e(UR,Rto),e(yh,Bto),e(ee,Pto),e(ee,Lh),e(Lh,goe),e(goe,$to),e(Lh,Ito),e(Lh,JR),e(JR,qto),e(Lh,Nto),e(ee,jto),e(ee,xh),e(xh,hoe),e(hoe,Dto),e(xh,Gto),e(xh,YR),e(YR,Oto),e(xh,Vto),e(ee,Xto),e(ee,kh),e(kh,poe),e(poe,zto),e(kh,Qto),e(kh,KR),e(KR,Wto),e(kh,Hto),e(ee,Uto),e(ee,Sh),e(Sh,_oe),e(_oe,Jto),e(Sh,Yto),e(Sh,ZR),e(ZR,Kto),e(Sh,Zto),e(ee,eao),e(ee,Rh),e(Rh,uoe),e(uoe,oao),e(Rh,rao),e(Rh,eB),e(eB,tao),e(Rh,aao),e(ee,nao),e(ee,Bh),e(Bh,boe),e(boe,sao),e(Bh,lao),e(Bh,oB),e(oB,iao),e(Bh,dao),e(ee,cao),e(ee,Ph),e(Ph,voe),e(voe,fao),e(Ph,mao),e(Ph,rB),e(rB,gao),e(Ph,hao),e(ee,pao),e(ee,$h),e($h,Foe),e(Foe,_ao),e($h,uao),e($h,tB),e(tB,bao),e($h,vao),e(ee,Fao),e(ee,Ih),e(Ih,Toe),e(Toe,Tao),e(Ih,Mao),e(Ih,aB),e(aB,Eao),e(Ih,Cao),e($e,wao),g(qh,$e,null),e($e,Aao),e($e,Moe),e(Moe,yao),e($e,Lao),g(Zw,$e,null),e(Ho,xao),e(Ho,Nh),g(e6,Nh,null),e(Nh,kao),e(Nh,Eoe),e(Eoe,Sao),b(c,VRe,u),b(c,Ji,u),e(Ji,jh),e(jh,Coe),g(o6,Coe,null),e(Ji,Rao),e(Ji,woe),e(woe,Bao),b(c,XRe,u),b(c,Uo,u),g(r6,Uo,null),e(Uo,Pao),e(Uo,t6),e(t6,$ao),e(t6,nB),e(nB,Iao),e(t6,qao),e(Uo,Nao),e(Uo,a6),e(a6,jao),e(a6,Aoe),e(Aoe,Dao),e(a6,Gao),e(Uo,Oao),e(Uo,Ie),g(n6,Ie,null),e(Ie,Vao),e(Ie,yoe),e(yoe,Xao),e(Ie,zao),e(Ie,Yi),e(Yi,Qao),e(Yi,Loe),e(Loe,Wao),e(Yi,Hao),e(Yi,xoe),e(xoe,Uao),e(Yi,Jao),e(Ie,Yao),e(Ie,ke),e(ke,Dh),e(Dh,koe),e(koe,Kao),e(Dh,Zao),e(Dh,sB),e(sB,eno),e(Dh,ono),e(ke,rno),e(ke,Gh),e(Gh,Soe),e(Soe,tno),e(Gh,ano),e(Gh,lB),e(lB,nno),e(Gh,sno),e(ke,lno),e(ke,Oh),e(Oh,Roe),e(Roe,ino),e(Oh,dno),e(Oh,iB),e(iB,cno),e(Oh,fno),e(ke,mno),e(ke,Vh),e(Vh,Boe),e(Boe,gno),e(Vh,hno),e(Vh,dB),e(dB,pno),e(Vh,_no),e(ke,uno),e(ke,Xh),e(Xh,Poe),e(Poe,bno),e(Xh,vno),e(Xh,cB),e(cB,Fno),e(Xh,Tno),e(ke,Mno),e(ke,zh),e(zh,$oe),e($oe,Eno),e(zh,Cno),e(zh,fB),e(fB,wno),e(zh,Ano),e(ke,yno),e(ke,Qh),e(Qh,Ioe),e(Ioe,Lno),e(Qh,xno),e(Qh,mB),e(mB,kno),e(Qh,Sno),e(ke,Rno),e(ke,Wh),e(Wh,qoe),e(qoe,Bno),e(Wh,Pno),e(Wh,gB),e(gB,$no),e(Wh,Ino),e(Ie,qno),g(Hh,Ie,null),e(Ie,Nno),e(Ie,Noe),e(Noe,jno),e(Ie,Dno),g(s6,Ie,null),e(Uo,Gno),e(Uo,Uh),g(l6,Uh,null),e(Uh,Ono),e(Uh,joe),e(joe,Vno),b(c,zRe,u),b(c,Ki,u),e(Ki,Jh),e(Jh,Doe),g(i6,Doe,null),e(Ki,Xno),e(Ki,Goe),e(Goe,zno),b(c,QRe,u),b(c,Jo,u),g(d6,Jo,null),e(Jo,Qno),e(Jo,Zi),e(Zi,Wno),e(Zi,hB),e(hB,Hno),e(Zi,Uno),e(Zi,pB),e(pB,Jno),e(Zi,Yno),e(Jo,Kno),e(Jo,c6),e(c6,Zno),e(c6,Ooe),e(Ooe,eso),e(c6,oso),e(Jo,rso),e(Jo,Xr),g(f6,Xr,null),e(Xr,tso),e(Xr,Voe),e(Voe,aso),e(Xr,nso),e(Xr,ed),e(ed,sso),e(ed,Xoe),e(Xoe,lso),e(ed,iso),e(ed,_B),e(_B,dso),e(ed,cso),e(Xr,fso),e(Xr,zoe),e(zoe,mso),e(Xr,gso),g(m6,Xr,null),e(Jo,hso),e(Jo,qe),g(g6,qe,null),e(qe,pso),e(qe,Qoe),e(Qoe,_so),e(qe,uso),e(qe,Xa),e(Xa,bso),e(Xa,Woe),e(Woe,vso),e(Xa,Fso),e(Xa,Hoe),e(Hoe,Tso),e(Xa,Mso),e(Xa,Uoe),e(Uoe,Eso),e(Xa,Cso),e(qe,wso),e(qe,T),e(T,Yh),e(Yh,Joe),e(Joe,Aso),e(Yh,yso),e(Yh,uB),e(uB,Lso),e(Yh,xso),e(T,kso),e(T,Kh),e(Kh,Yoe),e(Yoe,Sso),e(Kh,Rso),e(Kh,bB),e(bB,Bso),e(Kh,Pso),e(T,$so),e(T,Zh),e(Zh,Koe),e(Koe,Iso),e(Zh,qso),e(Zh,vB),e(vB,Nso),e(Zh,jso),e(T,Dso),e(T,ep),e(ep,Zoe),e(Zoe,Gso),e(ep,Oso),e(ep,FB),e(FB,Vso),e(ep,Xso),e(T,zso),e(T,op),e(op,ere),e(ere,Qso),e(op,Wso),e(op,TB),e(TB,Hso),e(op,Uso),e(T,Jso),e(T,rp),e(rp,ore),e(ore,Yso),e(rp,Kso),e(rp,MB),e(MB,Zso),e(rp,elo),e(T,olo),e(T,tp),e(tp,rre),e(rre,rlo),e(tp,tlo),e(tp,EB),e(EB,alo),e(tp,nlo),e(T,slo),e(T,ap),e(ap,tre),e(tre,llo),e(ap,ilo),e(ap,CB),e(CB,dlo),e(ap,clo),e(T,flo),e(T,np),e(np,are),e(are,mlo),e(np,glo),e(np,wB),e(wB,hlo),e(np,plo),e(T,_lo),e(T,sp),e(sp,nre),e(nre,ulo),e(sp,blo),e(sp,AB),e(AB,vlo),e(sp,Flo),e(T,Tlo),e(T,lp),e(lp,sre),e(sre,Mlo),e(lp,Elo),e(lp,yB),e(yB,Clo),e(lp,wlo),e(T,Alo),e(T,ip),e(ip,lre),e(lre,ylo),e(ip,Llo),e(ip,LB),e(LB,xlo),e(ip,klo),e(T,Slo),e(T,dp),e(dp,ire),e(ire,Rlo),e(dp,Blo),e(dp,xB),e(xB,Plo),e(dp,$lo),e(T,Ilo),e(T,cp),e(cp,dre),e(dre,qlo),e(cp,Nlo),e(cp,kB),e(kB,jlo),e(cp,Dlo),e(T,Glo),e(T,fp),e(fp,cre),e(cre,Olo),e(fp,Vlo),e(fp,SB),e(SB,Xlo),e(fp,zlo),e(T,Qlo),e(T,mp),e(mp,fre),e(fre,Wlo),e(mp,Hlo),e(mp,RB),e(RB,Ulo),e(mp,Jlo),e(T,Ylo),e(T,gp),e(gp,mre),e(mre,Klo),e(gp,Zlo),e(gp,BB),e(BB,eio),e(gp,oio),e(T,rio),e(T,hp),e(hp,gre),e(gre,tio),e(hp,aio),e(hp,PB),e(PB,nio),e(hp,sio),e(T,lio),e(T,pp),e(pp,hre),e(hre,iio),e(pp,dio),e(pp,$B),e($B,cio),e(pp,fio),e(T,mio),e(T,_p),e(_p,pre),e(pre,gio),e(_p,hio),e(_p,IB),e(IB,pio),e(_p,_io),e(T,uio),e(T,up),e(up,_re),e(_re,bio),e(up,vio),e(up,qB),e(qB,Fio),e(up,Tio),e(T,Mio),e(T,bp),e(bp,ure),e(ure,Eio),e(bp,Cio),e(bp,NB),e(NB,wio),e(bp,Aio),e(T,yio),e(T,vp),e(vp,bre),e(bre,Lio),e(vp,xio),e(vp,jB),e(jB,kio),e(vp,Sio),e(T,Rio),e(T,Fp),e(Fp,vre),e(vre,Bio),e(Fp,Pio),e(Fp,DB),e(DB,$io),e(Fp,Iio),e(T,qio),e(T,Tp),e(Tp,Fre),e(Fre,Nio),e(Tp,jio),e(Tp,GB),e(GB,Dio),e(Tp,Gio),e(T,Oio),e(T,Mp),e(Mp,Tre),e(Tre,Vio),e(Mp,Xio),e(Mp,OB),e(OB,zio),e(Mp,Qio),e(T,Wio),e(T,Ep),e(Ep,Mre),e(Mre,Hio),e(Ep,Uio),e(Ep,VB),e(VB,Jio),e(Ep,Yio),e(T,Kio),e(T,Cp),e(Cp,Ere),e(Ere,Zio),e(Cp,edo),e(Cp,XB),e(XB,odo),e(Cp,rdo),e(T,tdo),e(T,wp),e(wp,Cre),e(Cre,ado),e(wp,ndo),e(wp,zB),e(zB,sdo),e(wp,ldo),e(T,ido),e(T,Ap),e(Ap,wre),e(wre,ddo),e(Ap,cdo),e(Ap,QB),e(QB,fdo),e(Ap,mdo),e(T,gdo),e(T,Gs),e(Gs,Are),e(Are,hdo),e(Gs,pdo),e(Gs,WB),e(WB,_do),e(Gs,udo),e(Gs,HB),e(HB,bdo),e(Gs,vdo),e(T,Fdo),e(T,yp),e(yp,yre),e(yre,Tdo),e(yp,Mdo),e(yp,UB),e(UB,Edo),e(yp,Cdo),e(T,wdo),e(T,Lp),e(Lp,Lre),e(Lre,Ado),e(Lp,ydo),e(Lp,JB),e(JB,Ldo),e(Lp,xdo),e(T,kdo),e(T,xp),e(xp,xre),e(xre,Sdo),e(xp,Rdo),e(xp,YB),e(YB,Bdo),e(xp,Pdo),e(T,$do),e(T,kp),e(kp,kre),e(kre,Ido),e(kp,qdo),e(kp,KB),e(KB,Ndo),e(kp,jdo),e(T,Ddo),e(T,Sp),e(Sp,Sre),e(Sre,Gdo),e(Sp,Odo),e(Sp,ZB),e(ZB,Vdo),e(Sp,Xdo),e(T,zdo),e(T,Rp),e(Rp,Rre),e(Rre,Qdo),e(Rp,Wdo),e(Rp,eP),e(eP,Hdo),e(Rp,Udo),e(T,Jdo),e(T,Bp),e(Bp,Bre),e(Bre,Ydo),e(Bp,Kdo),e(Bp,oP),e(oP,Zdo),e(Bp,eco),e(T,oco),e(T,Pp),e(Pp,Pre),e(Pre,rco),e(Pp,tco),e(Pp,rP),e(rP,aco),e(Pp,nco),e(T,sco),e(T,$p),e($p,$re),e($re,lco),e($p,ico),e($p,tP),e(tP,dco),e($p,cco),e(T,fco),e(T,Ip),e(Ip,Ire),e(Ire,mco),e(Ip,gco),e(Ip,aP),e(aP,hco),e(Ip,pco),e(T,_co),e(T,qp),e(qp,qre),e(qre,uco),e(qp,bco),e(qp,nP),e(nP,vco),e(qp,Fco),e(T,Tco),e(T,Np),e(Np,Nre),e(Nre,Mco),e(Np,Eco),e(Np,sP),e(sP,Cco),e(Np,wco),e(T,Aco),e(T,jp),e(jp,jre),e(jre,yco),e(jp,Lco),e(jp,lP),e(lP,xco),e(jp,kco),e(T,Sco),e(T,Dp),e(Dp,Dre),e(Dre,Rco),e(Dp,Bco),e(Dp,iP),e(iP,Pco),e(Dp,$co),e(T,Ico),e(T,Gp),e(Gp,Gre),e(Gre,qco),e(Gp,Nco),e(Gp,dP),e(dP,jco),e(Gp,Dco),e(T,Gco),e(T,Op),e(Op,Ore),e(Ore,Oco),e(Op,Vco),e(Op,cP),e(cP,Xco),e(Op,zco),e(T,Qco),e(T,Vp),e(Vp,Vre),e(Vre,Wco),e(Vp,Hco),e(Vp,fP),e(fP,Uco),e(Vp,Jco),e(T,Yco),e(T,Xp),e(Xp,Xre),e(Xre,Kco),e(Xp,Zco),e(Xp,mP),e(mP,efo),e(Xp,ofo),e(T,rfo),e(T,zp),e(zp,zre),e(zre,tfo),e(zp,afo),e(zp,gP),e(gP,nfo),e(zp,sfo),e(T,lfo),e(T,Qp),e(Qp,Qre),e(Qre,ifo),e(Qp,dfo),e(Qp,hP),e(hP,cfo),e(Qp,ffo),e(T,mfo),e(T,Wp),e(Wp,Wre),e(Wre,gfo),e(Wp,hfo),e(Wp,pP),e(pP,pfo),e(Wp,_fo),e(T,ufo),e(T,Hp),e(Hp,Hre),e(Hre,bfo),e(Hp,vfo),e(Hp,_P),e(_P,Ffo),e(Hp,Tfo),e(T,Mfo),e(T,Up),e(Up,Ure),e(Ure,Efo),e(Up,Cfo),e(Up,uP),e(uP,wfo),e(Up,Afo),e(T,yfo),e(T,Jp),e(Jp,Jre),e(Jre,Lfo),e(Jp,xfo),e(Jp,bP),e(bP,kfo),e(Jp,Sfo),e(T,Rfo),e(T,Yp),e(Yp,Yre),e(Yre,Bfo),e(Yp,Pfo),e(Yp,vP),e(vP,$fo),e(Yp,Ifo),e(T,qfo),e(T,Kp),e(Kp,Kre),e(Kre,Nfo),e(Kp,jfo),e(Kp,FP),e(FP,Dfo),e(Kp,Gfo),e(T,Ofo),e(T,Zp),e(Zp,Zre),e(Zre,Vfo),e(Zp,Xfo),e(Zp,TP),e(TP,zfo),e(Zp,Qfo),e(T,Wfo),e(T,e_),e(e_,ete),e(ete,Hfo),e(e_,Ufo),e(e_,MP),e(MP,Jfo),e(e_,Yfo),e(T,Kfo),e(T,o_),e(o_,ote),e(ote,Zfo),e(o_,emo),e(o_,EP),e(EP,omo),e(o_,rmo),e(T,tmo),e(T,r_),e(r_,rte),e(rte,amo),e(r_,nmo),e(r_,CP),e(CP,smo),e(r_,lmo),e(T,imo),e(T,t_),e(t_,tte),e(tte,dmo),e(t_,cmo),e(t_,wP),e(wP,fmo),e(t_,mmo),e(T,gmo),e(T,a_),e(a_,ate),e(ate,hmo),e(a_,pmo),e(a_,AP),e(AP,_mo),e(a_,umo),e(T,bmo),e(T,n_),e(n_,nte),e(nte,vmo),e(n_,Fmo),e(n_,yP),e(yP,Tmo),e(n_,Mmo),e(T,Emo),e(T,s_),e(s_,ste),e(ste,Cmo),e(s_,wmo),e(s_,LP),e(LP,Amo),e(s_,ymo),e(T,Lmo),e(T,l_),e(l_,lte),e(lte,xmo),e(l_,kmo),e(l_,xP),e(xP,Smo),e(l_,Rmo),e(T,Bmo),e(T,i_),e(i_,ite),e(ite,Pmo),e(i_,$mo),e(i_,kP),e(kP,Imo),e(i_,qmo),e(T,Nmo),e(T,d_),e(d_,dte),e(dte,jmo),e(d_,Dmo),e(d_,SP),e(SP,Gmo),e(d_,Omo),e(T,Vmo),e(T,c_),e(c_,cte),e(cte,Xmo),e(c_,zmo),e(c_,RP),e(RP,Qmo),e(c_,Wmo),e(T,Hmo),e(T,f_),e(f_,fte),e(fte,Umo),e(f_,Jmo),e(f_,BP),e(BP,Ymo),e(f_,Kmo),e(T,Zmo),e(T,m_),e(m_,mte),e(mte,ego),e(m_,ogo),e(m_,PP),e(PP,rgo),e(m_,tgo),e(T,ago),e(T,g_),e(g_,gte),e(gte,ngo),e(g_,sgo),e(g_,$P),e($P,lgo),e(g_,igo),e(T,dgo),e(T,h_),e(h_,hte),e(hte,cgo),e(h_,fgo),e(h_,IP),e(IP,mgo),e(h_,ggo),e(T,hgo),e(T,p_),e(p_,pte),e(pte,pgo),e(p_,_go),e(p_,qP),e(qP,ugo),e(p_,bgo),e(T,vgo),e(T,__),e(__,_te),e(_te,Fgo),e(__,Tgo),e(__,NP),e(NP,Mgo),e(__,Ego),e(T,Cgo),e(T,u_),e(u_,ute),e(ute,wgo),e(u_,Ago),e(u_,jP),e(jP,ygo),e(u_,Lgo),e(T,xgo),e(T,b_),e(b_,bte),e(bte,kgo),e(b_,Sgo),e(b_,DP),e(DP,Rgo),e(b_,Bgo),e(T,Pgo),e(T,v_),e(v_,vte),e(vte,$go),e(v_,Igo),e(v_,GP),e(GP,qgo),e(v_,Ngo),e(T,jgo),e(T,F_),e(F_,Fte),e(Fte,Dgo),e(F_,Ggo),e(F_,OP),e(OP,Ogo),e(F_,Vgo),e(T,Xgo),e(T,T_),e(T_,Tte),e(Tte,zgo),e(T_,Qgo),e(T_,VP),e(VP,Wgo),e(T_,Hgo),e(T,Ugo),e(T,M_),e(M_,Mte),e(Mte,Jgo),e(M_,Ygo),e(M_,XP),e(XP,Kgo),e(M_,Zgo),e(T,eho),e(T,E_),e(E_,Ete),e(Ete,oho),e(E_,rho),e(E_,zP),e(zP,tho),e(E_,aho),e(T,nho),e(T,C_),e(C_,Cte),e(Cte,sho),e(C_,lho),e(C_,QP),e(QP,iho),e(C_,dho),e(T,cho),e(T,w_),e(w_,wte),e(wte,fho),e(w_,mho),e(w_,WP),e(WP,gho),e(w_,hho),e(T,pho),e(T,A_),e(A_,Ate),e(Ate,_ho),e(A_,uho),e(A_,HP),e(HP,bho),e(A_,vho),e(T,Fho),e(T,y_),e(y_,yte),e(yte,Tho),e(y_,Mho),e(y_,UP),e(UP,Eho),e(y_,Cho),e(T,who),e(T,L_),e(L_,Lte),e(Lte,Aho),e(L_,yho),e(L_,JP),e(JP,Lho),e(L_,xho),e(T,kho),e(T,x_),e(x_,xte),e(xte,Sho),e(x_,Rho),e(x_,YP),e(YP,Bho),e(x_,Pho),e(T,$ho),e(T,k_),e(k_,kte),e(kte,Iho),e(k_,qho),e(k_,KP),e(KP,Nho),e(k_,jho),e(T,Dho),e(T,S_),e(S_,Ste),e(Ste,Gho),e(S_,Oho),e(S_,ZP),e(ZP,Vho),e(S_,Xho),e(T,zho),e(T,R_),e(R_,Rte),e(Rte,Qho),e(R_,Who),e(R_,e$),e(e$,Hho),e(R_,Uho),e(T,Jho),e(T,B_),e(B_,Bte),e(Bte,Yho),e(B_,Kho),e(B_,o$),e(o$,Zho),e(B_,epo),e(T,opo),e(T,P_),e(P_,Pte),e(Pte,rpo),e(P_,tpo),e(P_,r$),e(r$,apo),e(P_,npo),e(T,spo),e(T,$_),e($_,$te),e($te,lpo),e($_,ipo),e($_,t$),e(t$,dpo),e($_,cpo),e(qe,fpo),e(qe,I_),e(I_,mpo),e(I_,Ite),e(Ite,gpo),e(I_,hpo),e(I_,qte),e(qte,ppo),e(qe,_po),e(qe,Nte),e(Nte,upo),e(qe,bpo),g(h6,qe,null),b(c,WRe,u),b(c,od,u),e(od,q_),e(q_,jte),g(p6,jte,null),e(od,vpo),e(od,Dte),e(Dte,Fpo),b(c,HRe,u),b(c,Yo,u),g(_6,Yo,null),e(Yo,Tpo),e(Yo,rd),e(rd,Mpo),e(rd,a$),e(a$,Epo),e(rd,Cpo),e(rd,n$),e(n$,wpo),e(rd,Apo),e(Yo,ypo),e(Yo,u6),e(u6,Lpo),e(u6,Gte),e(Gte,xpo),e(u6,kpo),e(Yo,Spo),e(Yo,zr),g(b6,zr,null),e(zr,Rpo),e(zr,Ote),e(Ote,Bpo),e(zr,Ppo),e(zr,td),e(td,$po),e(td,Vte),e(Vte,Ipo),e(td,qpo),e(td,s$),e(s$,Npo),e(td,jpo),e(zr,Dpo),e(zr,Xte),e(Xte,Gpo),e(zr,Opo),g(v6,zr,null),e(Yo,Vpo),e(Yo,Ne),g(F6,Ne,null),e(Ne,Xpo),e(Ne,zte),e(zte,zpo),e(Ne,Qpo),e(Ne,za),e(za,Wpo),e(za,Qte),e(Qte,Hpo),e(za,Upo),e(za,Wte),e(Wte,Jpo),e(za,Ypo),e(za,Hte),e(Hte,Kpo),e(za,Zpo),e(Ne,e_o),e(Ne,S),e(S,N_),e(N_,Ute),e(Ute,o_o),e(N_,r_o),e(N_,l$),e(l$,t_o),e(N_,a_o),e(S,n_o),e(S,j_),e(j_,Jte),e(Jte,s_o),e(j_,l_o),e(j_,i$),e(i$,i_o),e(j_,d_o),e(S,c_o),e(S,D_),e(D_,Yte),e(Yte,f_o),e(D_,m_o),e(D_,d$),e(d$,g_o),e(D_,h_o),e(S,p_o),e(S,G_),e(G_,Kte),e(Kte,__o),e(G_,u_o),e(G_,c$),e(c$,b_o),e(G_,v_o),e(S,F_o),e(S,O_),e(O_,Zte),e(Zte,T_o),e(O_,M_o),e(O_,f$),e(f$,E_o),e(O_,C_o),e(S,w_o),e(S,V_),e(V_,eae),e(eae,A_o),e(V_,y_o),e(V_,m$),e(m$,L_o),e(V_,x_o),e(S,k_o),e(S,X_),e(X_,oae),e(oae,S_o),e(X_,R_o),e(X_,g$),e(g$,B_o),e(X_,P_o),e(S,$_o),e(S,z_),e(z_,rae),e(rae,I_o),e(z_,q_o),e(z_,h$),e(h$,N_o),e(z_,j_o),e(S,D_o),e(S,Q_),e(Q_,tae),e(tae,G_o),e(Q_,O_o),e(Q_,p$),e(p$,V_o),e(Q_,X_o),e(S,z_o),e(S,W_),e(W_,aae),e(aae,Q_o),e(W_,W_o),e(W_,_$),e(_$,H_o),e(W_,U_o),e(S,J_o),e(S,H_),e(H_,nae),e(nae,Y_o),e(H_,K_o),e(H_,u$),e(u$,Z_o),e(H_,euo),e(S,ouo),e(S,U_),e(U_,sae),e(sae,ruo),e(U_,tuo),e(U_,b$),e(b$,auo),e(U_,nuo),e(S,suo),e(S,J_),e(J_,lae),e(lae,luo),e(J_,iuo),e(J_,v$),e(v$,duo),e(J_,cuo),e(S,fuo),e(S,Y_),e(Y_,iae),e(iae,muo),e(Y_,guo),e(Y_,F$),e(F$,huo),e(Y_,puo),e(S,_uo),e(S,K_),e(K_,dae),e(dae,uuo),e(K_,buo),e(K_,T$),e(T$,vuo),e(K_,Fuo),e(S,Tuo),e(S,Z_),e(Z_,cae),e(cae,Muo),e(Z_,Euo),e(Z_,M$),e(M$,Cuo),e(Z_,wuo),e(S,Auo),e(S,eu),e(eu,fae),e(fae,yuo),e(eu,Luo),e(eu,E$),e(E$,xuo),e(eu,kuo),e(S,Suo),e(S,ou),e(ou,mae),e(mae,Ruo),e(ou,Buo),e(ou,C$),e(C$,Puo),e(ou,$uo),e(S,Iuo),e(S,ru),e(ru,gae),e(gae,quo),e(ru,Nuo),e(ru,w$),e(w$,juo),e(ru,Duo),e(S,Guo),e(S,tu),e(tu,hae),e(hae,Ouo),e(tu,Vuo),e(tu,A$),e(A$,Xuo),e(tu,zuo),e(S,Quo),e(S,au),e(au,pae),e(pae,Wuo),e(au,Huo),e(au,y$),e(y$,Uuo),e(au,Juo),e(S,Yuo),e(S,nu),e(nu,_ae),e(_ae,Kuo),e(nu,Zuo),e(nu,L$),e(L$,e1o),e(nu,o1o),e(S,r1o),e(S,su),e(su,uae),e(uae,t1o),e(su,a1o),e(su,x$),e(x$,n1o),e(su,s1o),e(S,l1o),e(S,lu),e(lu,bae),e(bae,i1o),e(lu,d1o),e(lu,k$),e(k$,c1o),e(lu,f1o),e(S,m1o),e(S,iu),e(iu,vae),e(vae,g1o),e(iu,h1o),e(iu,S$),e(S$,p1o),e(iu,_1o),e(S,u1o),e(S,du),e(du,Fae),e(Fae,b1o),e(du,v1o),e(du,R$),e(R$,F1o),e(du,T1o),e(S,M1o),e(S,cu),e(cu,Tae),e(Tae,E1o),e(cu,C1o),e(cu,B$),e(B$,w1o),e(cu,A1o),e(S,y1o),e(S,fu),e(fu,Mae),e(Mae,L1o),e(fu,x1o),e(fu,P$),e(P$,k1o),e(fu,S1o),e(S,R1o),e(S,mu),e(mu,Eae),e(Eae,B1o),e(mu,P1o),e(mu,$$),e($$,$1o),e(mu,I1o),e(S,q1o),e(S,gu),e(gu,Cae),e(Cae,N1o),e(gu,j1o),e(gu,I$),e(I$,D1o),e(gu,G1o),e(S,O1o),e(S,hu),e(hu,wae),e(wae,V1o),e(hu,X1o),e(hu,q$),e(q$,z1o),e(hu,Q1o),e(S,W1o),e(S,pu),e(pu,Aae),e(Aae,H1o),e(pu,U1o),e(pu,N$),e(N$,J1o),e(pu,Y1o),e(S,K1o),e(S,_u),e(_u,yae),e(yae,Z1o),e(_u,ebo),e(_u,j$),e(j$,obo),e(_u,rbo),e(S,tbo),e(S,uu),e(uu,Lae),e(Lae,abo),e(uu,nbo),e(uu,D$),e(D$,sbo),e(uu,lbo),e(S,ibo),e(S,bu),e(bu,xae),e(xae,dbo),e(bu,cbo),e(bu,G$),e(G$,fbo),e(bu,mbo),e(S,gbo),e(S,vu),e(vu,kae),e(kae,hbo),e(vu,pbo),e(vu,O$),e(O$,_bo),e(vu,ubo),e(S,bbo),e(S,Fu),e(Fu,Sae),e(Sae,vbo),e(Fu,Fbo),e(Fu,V$),e(V$,Tbo),e(Fu,Mbo),e(S,Ebo),e(S,Tu),e(Tu,Rae),e(Rae,Cbo),e(Tu,wbo),e(Tu,X$),e(X$,Abo),e(Tu,ybo),e(S,Lbo),e(S,Mu),e(Mu,Bae),e(Bae,xbo),e(Mu,kbo),e(Mu,z$),e(z$,Sbo),e(Mu,Rbo),e(Ne,Bbo),e(Ne,Eu),e(Eu,Pbo),e(Eu,Pae),e(Pae,$bo),e(Eu,Ibo),e(Eu,$ae),e($ae,qbo),e(Ne,Nbo),e(Ne,Iae),e(Iae,jbo),e(Ne,Dbo),g(T6,Ne,null),b(c,URe,u),b(c,ad,u),e(ad,Cu),e(Cu,qae),g(M6,qae,null),e(ad,Gbo),e(ad,Nae),e(Nae,Obo),b(c,JRe,u),b(c,Ko,u),g(E6,Ko,null),e(Ko,Vbo),e(Ko,nd),e(nd,Xbo),e(nd,Q$),e(Q$,zbo),e(nd,Qbo),e(nd,W$),e(W$,Wbo),e(nd,Hbo),e(Ko,Ubo),e(Ko,C6),e(C6,Jbo),e(C6,jae),e(jae,Ybo),e(C6,Kbo),e(Ko,Zbo),e(Ko,Qr),g(w6,Qr,null),e(Qr,e2o),e(Qr,Dae),e(Dae,o2o),e(Qr,r2o),e(Qr,sd),e(sd,t2o),e(sd,Gae),e(Gae,a2o),e(sd,n2o),e(sd,H$),e(H$,s2o),e(sd,l2o),e(Qr,i2o),e(Qr,Oae),e(Oae,d2o),e(Qr,c2o),g(A6,Qr,null),e(Ko,f2o),e(Ko,je),g(y6,je,null),e(je,m2o),e(je,Vae),e(Vae,g2o),e(je,h2o),e(je,Qa),e(Qa,p2o),e(Qa,Xae),e(Xae,_2o),e(Qa,u2o),e(Qa,zae),e(zae,b2o),e(Qa,v2o),e(Qa,Qae),e(Qae,F2o),e(Qa,T2o),e(je,M2o),e(je,$),e($,wu),e(wu,Wae),e(Wae,E2o),e(wu,C2o),e(wu,U$),e(U$,w2o),e(wu,A2o),e($,y2o),e($,Au),e(Au,Hae),e(Hae,L2o),e(Au,x2o),e(Au,J$),e(J$,k2o),e(Au,S2o),e($,R2o),e($,yu),e(yu,Uae),e(Uae,B2o),e(yu,P2o),e(yu,Y$),e(Y$,$2o),e(yu,I2o),e($,q2o),e($,Lu),e(Lu,Jae),e(Jae,N2o),e(Lu,j2o),e(Lu,K$),e(K$,D2o),e(Lu,G2o),e($,O2o),e($,xu),e(xu,Yae),e(Yae,V2o),e(xu,X2o),e(xu,Z$),e(Z$,z2o),e(xu,Q2o),e($,W2o),e($,ku),e(ku,Kae),e(Kae,H2o),e(ku,U2o),e(ku,eI),e(eI,J2o),e(ku,Y2o),e($,K2o),e($,Su),e(Su,Zae),e(Zae,Z2o),e(Su,evo),e(Su,oI),e(oI,ovo),e(Su,rvo),e($,tvo),e($,Ru),e(Ru,ene),e(ene,avo),e(Ru,nvo),e(Ru,rI),e(rI,svo),e(Ru,lvo),e($,ivo),e($,Bu),e(Bu,one),e(one,dvo),e(Bu,cvo),e(Bu,tI),e(tI,fvo),e(Bu,mvo),e($,gvo),e($,Pu),e(Pu,rne),e(rne,hvo),e(Pu,pvo),e(Pu,aI),e(aI,_vo),e(Pu,uvo),e($,bvo),e($,$u),e($u,tne),e(tne,vvo),e($u,Fvo),e($u,nI),e(nI,Tvo),e($u,Mvo),e($,Evo),e($,Iu),e(Iu,ane),e(ane,Cvo),e(Iu,wvo),e(Iu,sI),e(sI,Avo),e(Iu,yvo),e($,Lvo),e($,qu),e(qu,nne),e(nne,xvo),e(qu,kvo),e(qu,lI),e(lI,Svo),e(qu,Rvo),e($,Bvo),e($,Nu),e(Nu,sne),e(sne,Pvo),e(Nu,$vo),e(Nu,iI),e(iI,Ivo),e(Nu,qvo),e($,Nvo),e($,ju),e(ju,lne),e(lne,jvo),e(ju,Dvo),e(ju,dI),e(dI,Gvo),e(ju,Ovo),e($,Vvo),e($,Du),e(Du,ine),e(ine,Xvo),e(Du,zvo),e(Du,cI),e(cI,Qvo),e(Du,Wvo),e($,Hvo),e($,Gu),e(Gu,dne),e(dne,Uvo),e(Gu,Jvo),e(Gu,fI),e(fI,Yvo),e(Gu,Kvo),e($,Zvo),e($,Ou),e(Ou,cne),e(cne,eFo),e(Ou,oFo),e(Ou,mI),e(mI,rFo),e(Ou,tFo),e($,aFo),e($,Vu),e(Vu,fne),e(fne,nFo),e(Vu,sFo),e(Vu,gI),e(gI,lFo),e(Vu,iFo),e($,dFo),e($,Xu),e(Xu,mne),e(mne,cFo),e(Xu,fFo),e(Xu,hI),e(hI,mFo),e(Xu,gFo),e($,hFo),e($,zu),e(zu,gne),e(gne,pFo),e(zu,_Fo),e(zu,pI),e(pI,uFo),e(zu,bFo),e($,vFo),e($,Qu),e(Qu,hne),e(hne,FFo),e(Qu,TFo),e(Qu,_I),e(_I,MFo),e(Qu,EFo),e($,CFo),e($,Wu),e(Wu,pne),e(pne,wFo),e(Wu,AFo),e(Wu,uI),e(uI,yFo),e(Wu,LFo),e($,xFo),e($,Hu),e(Hu,_ne),e(_ne,kFo),e(Hu,SFo),e(Hu,bI),e(bI,RFo),e(Hu,BFo),e($,PFo),e($,Uu),e(Uu,une),e(une,$Fo),e(Uu,IFo),e(Uu,vI),e(vI,qFo),e(Uu,NFo),e($,jFo),e($,Ju),e(Ju,bne),e(bne,DFo),e(Ju,GFo),e(Ju,FI),e(FI,OFo),e(Ju,VFo),e($,XFo),e($,Yu),e(Yu,vne),e(vne,zFo),e(Yu,QFo),e(Yu,TI),e(TI,WFo),e(Yu,HFo),e($,UFo),e($,Ku),e(Ku,Fne),e(Fne,JFo),e(Ku,YFo),e(Ku,MI),e(MI,KFo),e(Ku,ZFo),e($,eTo),e($,Zu),e(Zu,Tne),e(Tne,oTo),e(Zu,rTo),e(Zu,EI),e(EI,tTo),e(Zu,aTo),e($,nTo),e($,e1),e(e1,Mne),e(Mne,sTo),e(e1,lTo),e(e1,CI),e(CI,iTo),e(e1,dTo),e($,cTo),e($,o1),e(o1,Ene),e(Ene,fTo),e(o1,mTo),e(o1,wI),e(wI,gTo),e(o1,hTo),e($,pTo),e($,r1),e(r1,Cne),e(Cne,_To),e(r1,uTo),e(r1,AI),e(AI,bTo),e(r1,vTo),e($,FTo),e($,t1),e(t1,wne),e(wne,TTo),e(t1,MTo),e(t1,yI),e(yI,ETo),e(t1,CTo),e($,wTo),e($,a1),e(a1,Ane),e(Ane,ATo),e(a1,yTo),e(a1,LI),e(LI,LTo),e(a1,xTo),e($,kTo),e($,n1),e(n1,yne),e(yne,STo),e(n1,RTo),e(n1,xI),e(xI,BTo),e(n1,PTo),e(je,$To),e(je,s1),e(s1,ITo),e(s1,Lne),e(Lne,qTo),e(s1,NTo),e(s1,xne),e(xne,jTo),e(je,DTo),e(je,kne),e(kne,GTo),e(je,OTo),g(L6,je,null),b(c,YRe,u),b(c,ld,u),e(ld,l1),e(l1,Sne),g(x6,Sne,null),e(ld,VTo),e(ld,Rne),e(Rne,XTo),b(c,KRe,u),b(c,Zo,u),g(k6,Zo,null),e(Zo,zTo),e(Zo,id),e(id,QTo),e(id,kI),e(kI,WTo),e(id,HTo),e(id,SI),e(SI,UTo),e(id,JTo),e(Zo,YTo),e(Zo,S6),e(S6,KTo),e(S6,Bne),e(Bne,ZTo),e(S6,eMo),e(Zo,oMo),e(Zo,Wr),g(R6,Wr,null),e(Wr,rMo),e(Wr,Pne),e(Pne,tMo),e(Wr,aMo),e(Wr,dd),e(dd,nMo),e(dd,$ne),e($ne,sMo),e(dd,lMo),e(dd,RI),e(RI,iMo),e(dd,dMo),e(Wr,cMo),e(Wr,Ine),e(Ine,fMo),e(Wr,mMo),g(B6,Wr,null),e(Zo,gMo),e(Zo,De),g(P6,De,null),e(De,hMo),e(De,qne),e(qne,pMo),e(De,_Mo),e(De,Wa),e(Wa,uMo),e(Wa,Nne),e(Nne,bMo),e(Wa,vMo),e(Wa,jne),e(jne,FMo),e(Wa,TMo),e(Wa,Dne),e(Dne,MMo),e(Wa,EMo),e(De,CMo),e(De,I),e(I,i1),e(i1,Gne),e(Gne,wMo),e(i1,AMo),e(i1,BI),e(BI,yMo),e(i1,LMo),e(I,xMo),e(I,d1),e(d1,One),e(One,kMo),e(d1,SMo),e(d1,PI),e(PI,RMo),e(d1,BMo),e(I,PMo),e(I,c1),e(c1,Vne),e(Vne,$Mo),e(c1,IMo),e(c1,$I),e($I,qMo),e(c1,NMo),e(I,jMo),e(I,f1),e(f1,Xne),e(Xne,DMo),e(f1,GMo),e(f1,II),e(II,OMo),e(f1,VMo),e(I,XMo),e(I,m1),e(m1,zne),e(zne,zMo),e(m1,QMo),e(m1,qI),e(qI,WMo),e(m1,HMo),e(I,UMo),e(I,g1),e(g1,Qne),e(Qne,JMo),e(g1,YMo),e(g1,NI),e(NI,KMo),e(g1,ZMo),e(I,e4o),e(I,h1),e(h1,Wne),e(Wne,o4o),e(h1,r4o),e(h1,jI),e(jI,t4o),e(h1,a4o),e(I,n4o),e(I,p1),e(p1,Hne),e(Hne,s4o),e(p1,l4o),e(p1,DI),e(DI,i4o),e(p1,d4o),e(I,c4o),e(I,_1),e(_1,Une),e(Une,f4o),e(_1,m4o),e(_1,GI),e(GI,g4o),e(_1,h4o),e(I,p4o),e(I,u1),e(u1,Jne),e(Jne,_4o),e(u1,u4o),e(u1,OI),e(OI,b4o),e(u1,v4o),e(I,F4o),e(I,b1),e(b1,Yne),e(Yne,T4o),e(b1,M4o),e(b1,VI),e(VI,E4o),e(b1,C4o),e(I,w4o),e(I,v1),e(v1,Kne),e(Kne,A4o),e(v1,y4o),e(v1,XI),e(XI,L4o),e(v1,x4o),e(I,k4o),e(I,F1),e(F1,Zne),e(Zne,S4o),e(F1,R4o),e(F1,zI),e(zI,B4o),e(F1,P4o),e(I,$4o),e(I,T1),e(T1,ese),e(ese,I4o),e(T1,q4o),e(T1,QI),e(QI,N4o),e(T1,j4o),e(I,D4o),e(I,M1),e(M1,ose),e(ose,G4o),e(M1,O4o),e(M1,WI),e(WI,V4o),e(M1,X4o),e(I,z4o),e(I,E1),e(E1,rse),e(rse,Q4o),e(E1,W4o),e(E1,HI),e(HI,H4o),e(E1,U4o),e(I,J4o),e(I,C1),e(C1,tse),e(tse,Y4o),e(C1,K4o),e(C1,UI),e(UI,Z4o),e(C1,eEo),e(I,oEo),e(I,w1),e(w1,ase),e(ase,rEo),e(w1,tEo),e(w1,JI),e(JI,aEo),e(w1,nEo),e(I,sEo),e(I,A1),e(A1,nse),e(nse,lEo),e(A1,iEo),e(A1,YI),e(YI,dEo),e(A1,cEo),e(I,fEo),e(I,y1),e(y1,sse),e(sse,mEo),e(y1,gEo),e(y1,KI),e(KI,hEo),e(y1,pEo),e(I,_Eo),e(I,L1),e(L1,lse),e(lse,uEo),e(L1,bEo),e(L1,ZI),e(ZI,vEo),e(L1,FEo),e(I,TEo),e(I,x1),e(x1,ise),e(ise,MEo),e(x1,EEo),e(x1,eq),e(eq,CEo),e(x1,wEo),e(I,AEo),e(I,k1),e(k1,dse),e(dse,yEo),e(k1,LEo),e(k1,oq),e(oq,xEo),e(k1,kEo),e(I,SEo),e(I,S1),e(S1,cse),e(cse,REo),e(S1,BEo),e(S1,rq),e(rq,PEo),e(S1,$Eo),e(I,IEo),e(I,R1),e(R1,fse),e(fse,qEo),e(R1,NEo),e(R1,tq),e(tq,jEo),e(R1,DEo),e(I,GEo),e(I,B1),e(B1,mse),e(mse,OEo),e(B1,VEo),e(B1,aq),e(aq,XEo),e(B1,zEo),e(I,QEo),e(I,P1),e(P1,gse),e(gse,WEo),e(P1,HEo),e(P1,nq),e(nq,UEo),e(P1,JEo),e(I,YEo),e(I,$1),e($1,hse),e(hse,KEo),e($1,ZEo),e($1,sq),e(sq,e5o),e($1,o5o),e(I,r5o),e(I,I1),e(I1,pse),e(pse,t5o),e(I1,a5o),e(I1,lq),e(lq,n5o),e(I1,s5o),e(I,l5o),e(I,q1),e(q1,_se),e(_se,i5o),e(q1,d5o),e(q1,iq),e(iq,c5o),e(q1,f5o),e(I,m5o),e(I,N1),e(N1,use),e(use,g5o),e(N1,h5o),e(N1,bse),e(bse,p5o),e(N1,_5o),e(I,u5o),e(I,j1),e(j1,vse),e(vse,b5o),e(j1,v5o),e(j1,dq),e(dq,F5o),e(j1,T5o),e(I,M5o),e(I,D1),e(D1,Fse),e(Fse,E5o),e(D1,C5o),e(D1,cq),e(cq,w5o),e(D1,A5o),e(I,y5o),e(I,G1),e(G1,Tse),e(Tse,L5o),e(G1,x5o),e(G1,fq),e(fq,k5o),e(G1,S5o),e(I,R5o),e(I,O1),e(O1,Mse),e(Mse,B5o),e(O1,P5o),e(O1,mq),e(mq,$5o),e(O1,I5o),e(De,q5o),e(De,V1),e(V1,N5o),e(V1,Ese),e(Ese,j5o),e(V1,D5o),e(V1,Cse),e(Cse,G5o),e(De,O5o),e(De,wse),e(wse,V5o),e(De,X5o),g($6,De,null),b(c,ZRe,u),b(c,cd,u),e(cd,X1),e(X1,Ase),g(I6,Ase,null),e(cd,z5o),e(cd,yse),e(yse,Q5o),b(c,eBe,u),b(c,er,u),g(q6,er,null),e(er,W5o),e(er,fd),e(fd,H5o),e(fd,gq),e(gq,U5o),e(fd,J5o),e(fd,hq),e(hq,Y5o),e(fd,K5o),e(er,Z5o),e(er,N6),e(N6,e3o),e(N6,Lse),e(Lse,o3o),e(N6,r3o),e(er,t3o),e(er,Hr),g(j6,Hr,null),e(Hr,a3o),e(Hr,xse),e(xse,n3o),e(Hr,s3o),e(Hr,md),e(md,l3o),e(md,kse),e(kse,i3o),e(md,d3o),e(md,pq),e(pq,c3o),e(md,f3o),e(Hr,m3o),e(Hr,Sse),e(Sse,g3o),e(Hr,h3o),g(D6,Hr,null),e(er,p3o),e(er,Ge),g(G6,Ge,null),e(Ge,_3o),e(Ge,Rse),e(Rse,u3o),e(Ge,b3o),e(Ge,Ha),e(Ha,v3o),e(Ha,Bse),e(Bse,F3o),e(Ha,T3o),e(Ha,Pse),e(Pse,M3o),e(Ha,E3o),e(Ha,$se),e($se,C3o),e(Ha,w3o),e(Ge,A3o),e(Ge,ne),e(ne,z1),e(z1,Ise),e(Ise,y3o),e(z1,L3o),e(z1,_q),e(_q,x3o),e(z1,k3o),e(ne,S3o),e(ne,Q1),e(Q1,qse),e(qse,R3o),e(Q1,B3o),e(Q1,uq),e(uq,P3o),e(Q1,$3o),e(ne,I3o),e(ne,W1),e(W1,Nse),e(Nse,q3o),e(W1,N3o),e(W1,bq),e(bq,j3o),e(W1,D3o),e(ne,G3o),e(ne,H1),e(H1,jse),e(jse,O3o),e(H1,V3o),e(H1,vq),e(vq,X3o),e(H1,z3o),e(ne,Q3o),e(ne,U1),e(U1,Dse),e(Dse,W3o),e(U1,H3o),e(U1,Fq),e(Fq,U3o),e(U1,J3o),e(ne,Y3o),e(ne,J1),e(J1,Gse),e(Gse,K3o),e(J1,Z3o),e(J1,Tq),e(Tq,eCo),e(J1,oCo),e(ne,rCo),e(ne,Y1),e(Y1,Ose),e(Ose,tCo),e(Y1,aCo),e(Y1,Mq),e(Mq,nCo),e(Y1,sCo),e(ne,lCo),e(ne,K1),e(K1,Vse),e(Vse,iCo),e(K1,dCo),e(K1,Eq),e(Eq,cCo),e(K1,fCo),e(ne,mCo),e(ne,Z1),e(Z1,Xse),e(Xse,gCo),e(Z1,hCo),e(Z1,Cq),e(Cq,pCo),e(Z1,_Co),e(ne,uCo),e(ne,eb),e(eb,zse),e(zse,bCo),e(eb,vCo),e(eb,wq),e(wq,FCo),e(eb,TCo),e(ne,MCo),e(ne,ob),e(ob,Qse),e(Qse,ECo),e(ob,CCo),e(ob,Aq),e(Aq,wCo),e(ob,ACo),e(ne,yCo),e(ne,rb),e(rb,Wse),e(Wse,LCo),e(rb,xCo),e(rb,yq),e(yq,kCo),e(rb,SCo),e(ne,RCo),e(ne,tb),e(tb,Hse),e(Hse,BCo),e(tb,PCo),e(tb,Lq),e(Lq,$Co),e(tb,ICo),e(ne,qCo),e(ne,ab),e(ab,Use),e(Use,NCo),e(ab,jCo),e(ab,xq),e(xq,DCo),e(ab,GCo),e(ne,OCo),e(ne,nb),e(nb,Jse),e(Jse,VCo),e(nb,XCo),e(nb,kq),e(kq,zCo),e(nb,QCo),e(ne,WCo),e(ne,sb),e(sb,Yse),e(Yse,HCo),e(sb,UCo),e(sb,Sq),e(Sq,JCo),e(sb,YCo),e(ne,KCo),e(ne,lb),e(lb,Kse),e(Kse,ZCo),e(lb,ewo),e(lb,Rq),e(Rq,owo),e(lb,rwo),e(Ge,two),e(Ge,ib),e(ib,awo),e(ib,Zse),e(Zse,nwo),e(ib,swo),e(ib,ele),e(ele,lwo),e(Ge,iwo),e(Ge,ole),e(ole,dwo),e(Ge,cwo),g(O6,Ge,null),b(c,oBe,u),b(c,gd,u),e(gd,db),e(db,rle),g(V6,rle,null),e(gd,fwo),e(gd,tle),e(tle,mwo),b(c,rBe,u),b(c,or,u),g(X6,or,null),e(or,gwo),e(or,hd),e(hd,hwo),e(hd,Bq),e(Bq,pwo),e(hd,_wo),e(hd,Pq),e(Pq,uwo),e(hd,bwo),e(or,vwo),e(or,z6),e(z6,Fwo),e(z6,ale),e(ale,Two),e(z6,Mwo),e(or,Ewo),e(or,Ur),g(Q6,Ur,null),e(Ur,Cwo),e(Ur,nle),e(nle,wwo),e(Ur,Awo),e(Ur,pd),e(pd,ywo),e(pd,sle),e(sle,Lwo),e(pd,xwo),e(pd,$q),e($q,kwo),e(pd,Swo),e(Ur,Rwo),e(Ur,lle),e(lle,Bwo),e(Ur,Pwo),g(W6,Ur,null),e(or,$wo),e(or,Oe),g(H6,Oe,null),e(Oe,Iwo),e(Oe,ile),e(ile,qwo),e(Oe,Nwo),e(Oe,Ua),e(Ua,jwo),e(Ua,dle),e(dle,Dwo),e(Ua,Gwo),e(Ua,cle),e(cle,Owo),e(Ua,Vwo),e(Ua,fle),e(fle,Xwo),e(Ua,zwo),e(Oe,Qwo),e(Oe,y),e(y,cb),e(cb,mle),e(mle,Wwo),e(cb,Hwo),e(cb,Iq),e(Iq,Uwo),e(cb,Jwo),e(y,Ywo),e(y,fb),e(fb,gle),e(gle,Kwo),e(fb,Zwo),e(fb,qq),e(qq,e6o),e(fb,o6o),e(y,r6o),e(y,mb),e(mb,hle),e(hle,t6o),e(mb,a6o),e(mb,Nq),e(Nq,n6o),e(mb,s6o),e(y,l6o),e(y,gb),e(gb,ple),e(ple,i6o),e(gb,d6o),e(gb,jq),e(jq,c6o),e(gb,f6o),e(y,m6o),e(y,hb),e(hb,_le),e(_le,g6o),e(hb,h6o),e(hb,Dq),e(Dq,p6o),e(hb,_6o),e(y,u6o),e(y,pb),e(pb,ule),e(ule,b6o),e(pb,v6o),e(pb,Gq),e(Gq,F6o),e(pb,T6o),e(y,M6o),e(y,_b),e(_b,ble),e(ble,E6o),e(_b,C6o),e(_b,Oq),e(Oq,w6o),e(_b,A6o),e(y,y6o),e(y,ub),e(ub,vle),e(vle,L6o),e(ub,x6o),e(ub,Vq),e(Vq,k6o),e(ub,S6o),e(y,R6o),e(y,bb),e(bb,Fle),e(Fle,B6o),e(bb,P6o),e(bb,Xq),e(Xq,$6o),e(bb,I6o),e(y,q6o),e(y,vb),e(vb,Tle),e(Tle,N6o),e(vb,j6o),e(vb,zq),e(zq,D6o),e(vb,G6o),e(y,O6o),e(y,Fb),e(Fb,Mle),e(Mle,V6o),e(Fb,X6o),e(Fb,Qq),e(Qq,z6o),e(Fb,Q6o),e(y,W6o),e(y,Tb),e(Tb,Ele),e(Ele,H6o),e(Tb,U6o),e(Tb,Wq),e(Wq,J6o),e(Tb,Y6o),e(y,K6o),e(y,Mb),e(Mb,Cle),e(Cle,Z6o),e(Mb,eAo),e(Mb,Hq),e(Hq,oAo),e(Mb,rAo),e(y,tAo),e(y,Eb),e(Eb,wle),e(wle,aAo),e(Eb,nAo),e(Eb,Uq),e(Uq,sAo),e(Eb,lAo),e(y,iAo),e(y,Cb),e(Cb,Ale),e(Ale,dAo),e(Cb,cAo),e(Cb,Jq),e(Jq,fAo),e(Cb,mAo),e(y,gAo),e(y,wb),e(wb,yle),e(yle,hAo),e(wb,pAo),e(wb,Yq),e(Yq,_Ao),e(wb,uAo),e(y,bAo),e(y,Ab),e(Ab,Lle),e(Lle,vAo),e(Ab,FAo),e(Ab,Kq),e(Kq,TAo),e(Ab,MAo),e(y,EAo),e(y,yb),e(yb,xle),e(xle,CAo),e(yb,wAo),e(yb,Zq),e(Zq,AAo),e(yb,yAo),e(y,LAo),e(y,Lb),e(Lb,kle),e(kle,xAo),e(Lb,kAo),e(Lb,eN),e(eN,SAo),e(Lb,RAo),e(y,BAo),e(y,xb),e(xb,Sle),e(Sle,PAo),e(xb,$Ao),e(xb,oN),e(oN,IAo),e(xb,qAo),e(y,NAo),e(y,kb),e(kb,Rle),e(Rle,jAo),e(kb,DAo),e(kb,rN),e(rN,GAo),e(kb,OAo),e(y,VAo),e(y,Sb),e(Sb,Ble),e(Ble,XAo),e(Sb,zAo),e(Sb,tN),e(tN,QAo),e(Sb,WAo),e(y,HAo),e(y,Rb),e(Rb,Ple),e(Ple,UAo),e(Rb,JAo),e(Rb,aN),e(aN,YAo),e(Rb,KAo),e(y,ZAo),e(y,Bb),e(Bb,$le),e($le,e0o),e(Bb,o0o),e(Bb,nN),e(nN,r0o),e(Bb,t0o),e(y,a0o),e(y,Pb),e(Pb,Ile),e(Ile,n0o),e(Pb,s0o),e(Pb,sN),e(sN,l0o),e(Pb,i0o),e(y,d0o),e(y,$b),e($b,qle),e(qle,c0o),e($b,f0o),e($b,lN),e(lN,m0o),e($b,g0o),e(y,h0o),e(y,Ib),e(Ib,Nle),e(Nle,p0o),e(Ib,_0o),e(Ib,iN),e(iN,u0o),e(Ib,b0o),e(y,v0o),e(y,qb),e(qb,jle),e(jle,F0o),e(qb,T0o),e(qb,dN),e(dN,M0o),e(qb,E0o),e(y,C0o),e(y,Nb),e(Nb,Dle),e(Dle,w0o),e(Nb,A0o),e(Nb,cN),e(cN,y0o),e(Nb,L0o),e(y,x0o),e(y,jb),e(jb,Gle),e(Gle,k0o),e(jb,S0o),e(jb,fN),e(fN,R0o),e(jb,B0o),e(y,P0o),e(y,Db),e(Db,Ole),e(Ole,$0o),e(Db,I0o),e(Db,mN),e(mN,q0o),e(Db,N0o),e(y,j0o),e(y,Gb),e(Gb,Vle),e(Vle,D0o),e(Gb,G0o),e(Gb,gN),e(gN,O0o),e(Gb,V0o),e(y,X0o),e(y,Ob),e(Ob,Xle),e(Xle,z0o),e(Ob,Q0o),e(Ob,hN),e(hN,W0o),e(Ob,H0o),e(y,U0o),e(y,Vb),e(Vb,zle),e(zle,J0o),e(Vb,Y0o),e(Vb,pN),e(pN,K0o),e(Vb,Z0o),e(y,eyo),e(y,Xb),e(Xb,Qle),e(Qle,oyo),e(Xb,ryo),e(Xb,_N),e(_N,tyo),e(Xb,ayo),e(y,nyo),e(y,zb),e(zb,Wle),e(Wle,syo),e(zb,lyo),e(zb,uN),e(uN,iyo),e(zb,dyo),e(y,cyo),e(y,Qb),e(Qb,Hle),e(Hle,fyo),e(Qb,myo),e(Qb,bN),e(bN,gyo),e(Qb,hyo),e(y,pyo),e(y,Wb),e(Wb,Ule),e(Ule,_yo),e(Wb,uyo),e(Wb,vN),e(vN,byo),e(Wb,vyo),e(y,Fyo),e(y,Hb),e(Hb,Jle),e(Jle,Tyo),e(Hb,Myo),e(Hb,FN),e(FN,Eyo),e(Hb,Cyo),e(y,wyo),e(y,Ub),e(Ub,Yle),e(Yle,Ayo),e(Ub,yyo),e(Ub,TN),e(TN,Lyo),e(Ub,xyo),e(y,kyo),e(y,Jb),e(Jb,Kle),e(Kle,Syo),e(Jb,Ryo),e(Jb,MN),e(MN,Byo),e(Jb,Pyo),e(y,$yo),e(y,Yb),e(Yb,Zle),e(Zle,Iyo),e(Yb,qyo),e(Yb,EN),e(EN,Nyo),e(Yb,jyo),e(y,Dyo),e(y,Kb),e(Kb,eie),e(eie,Gyo),e(Kb,Oyo),e(Kb,CN),e(CN,Vyo),e(Kb,Xyo),e(y,zyo),e(y,Zb),e(Zb,oie),e(oie,Qyo),e(Zb,Wyo),e(Zb,wN),e(wN,Hyo),e(Zb,Uyo),e(y,Jyo),e(y,e2),e(e2,rie),e(rie,Yyo),e(e2,Kyo),e(e2,AN),e(AN,Zyo),e(e2,e8o),e(y,o8o),e(y,o2),e(o2,tie),e(tie,r8o),e(o2,t8o),e(o2,yN),e(yN,a8o),e(o2,n8o),e(y,s8o),e(y,r2),e(r2,aie),e(aie,l8o),e(r2,i8o),e(r2,LN),e(LN,d8o),e(r2,c8o),e(Oe,f8o),e(Oe,t2),e(t2,m8o),e(t2,nie),e(nie,g8o),e(t2,h8o),e(t2,sie),e(sie,p8o),e(Oe,_8o),e(Oe,lie),e(lie,u8o),e(Oe,b8o),g(U6,Oe,null),b(c,tBe,u),b(c,_d,u),e(_d,a2),e(a2,iie),g(J6,iie,null),e(_d,v8o),e(_d,die),e(die,F8o),b(c,aBe,u),b(c,rr,u),g(Y6,rr,null),e(rr,T8o),e(rr,ud),e(ud,M8o),e(ud,xN),e(xN,E8o),e(ud,C8o),e(ud,kN),e(kN,w8o),e(ud,A8o),e(rr,y8o),e(rr,K6),e(K6,L8o),e(K6,cie),e(cie,x8o),e(K6,k8o),e(rr,S8o),e(rr,Jr),g(Z6,Jr,null),e(Jr,R8o),e(Jr,fie),e(fie,B8o),e(Jr,P8o),e(Jr,bd),e(bd,$8o),e(bd,mie),e(mie,I8o),e(bd,q8o),e(bd,SN),e(SN,N8o),e(bd,j8o),e(Jr,D8o),e(Jr,gie),e(gie,G8o),e(Jr,O8o),g(eA,Jr,null),e(rr,V8o),e(rr,Ve),g(oA,Ve,null),e(Ve,X8o),e(Ve,hie),e(hie,z8o),e(Ve,Q8o),e(Ve,Ja),e(Ja,W8o),e(Ja,pie),e(pie,H8o),e(Ja,U8o),e(Ja,_ie),e(_ie,J8o),e(Ja,Y8o),e(Ja,uie),e(uie,K8o),e(Ja,Z8o),e(Ve,eLo),e(Ve,G),e(G,n2),e(n2,bie),e(bie,oLo),e(n2,rLo),e(n2,RN),e(RN,tLo),e(n2,aLo),e(G,nLo),e(G,s2),e(s2,vie),e(vie,sLo),e(s2,lLo),e(s2,BN),e(BN,iLo),e(s2,dLo),e(G,cLo),e(G,l2),e(l2,Fie),e(Fie,fLo),e(l2,mLo),e(l2,PN),e(PN,gLo),e(l2,hLo),e(G,pLo),e(G,i2),e(i2,Tie),e(Tie,_Lo),e(i2,uLo),e(i2,$N),e($N,bLo),e(i2,vLo),e(G,FLo),e(G,d2),e(d2,Mie),e(Mie,TLo),e(d2,MLo),e(d2,IN),e(IN,ELo),e(d2,CLo),e(G,wLo),e(G,c2),e(c2,Eie),e(Eie,ALo),e(c2,yLo),e(c2,qN),e(qN,LLo),e(c2,xLo),e(G,kLo),e(G,f2),e(f2,Cie),e(Cie,SLo),e(f2,RLo),e(f2,NN),e(NN,BLo),e(f2,PLo),e(G,$Lo),e(G,m2),e(m2,wie),e(wie,ILo),e(m2,qLo),e(m2,jN),e(jN,NLo),e(m2,jLo),e(G,DLo),e(G,g2),e(g2,Aie),e(Aie,GLo),e(g2,OLo),e(g2,DN),e(DN,VLo),e(g2,XLo),e(G,zLo),e(G,h2),e(h2,yie),e(yie,QLo),e(h2,WLo),e(h2,GN),e(GN,HLo),e(h2,ULo),e(G,JLo),e(G,p2),e(p2,Lie),e(Lie,YLo),e(p2,KLo),e(p2,ON),e(ON,ZLo),e(p2,e7o),e(G,o7o),e(G,_2),e(_2,xie),e(xie,r7o),e(_2,t7o),e(_2,VN),e(VN,a7o),e(_2,n7o),e(G,s7o),e(G,u2),e(u2,kie),e(kie,l7o),e(u2,i7o),e(u2,XN),e(XN,d7o),e(u2,c7o),e(G,f7o),e(G,b2),e(b2,Sie),e(Sie,m7o),e(b2,g7o),e(b2,zN),e(zN,h7o),e(b2,p7o),e(G,_7o),e(G,v2),e(v2,Rie),e(Rie,u7o),e(v2,b7o),e(v2,QN),e(QN,v7o),e(v2,F7o),e(G,T7o),e(G,F2),e(F2,Bie),e(Bie,M7o),e(F2,E7o),e(F2,WN),e(WN,C7o),e(F2,w7o),e(G,A7o),e(G,T2),e(T2,Pie),e(Pie,y7o),e(T2,L7o),e(T2,HN),e(HN,x7o),e(T2,k7o),e(G,S7o),e(G,M2),e(M2,$ie),e($ie,R7o),e(M2,B7o),e(M2,UN),e(UN,P7o),e(M2,$7o),e(G,I7o),e(G,E2),e(E2,Iie),e(Iie,q7o),e(E2,N7o),e(E2,JN),e(JN,j7o),e(E2,D7o),e(G,G7o),e(G,C2),e(C2,qie),e(qie,O7o),e(C2,V7o),e(C2,YN),e(YN,X7o),e(C2,z7o),e(G,Q7o),e(G,w2),e(w2,Nie),e(Nie,W7o),e(w2,H7o),e(w2,KN),e(KN,U7o),e(w2,J7o),e(G,Y7o),e(G,A2),e(A2,jie),e(jie,K7o),e(A2,Z7o),e(A2,ZN),e(ZN,e9o),e(A2,o9o),e(G,r9o),e(G,y2),e(y2,Die),e(Die,t9o),e(y2,a9o),e(y2,ej),e(ej,n9o),e(y2,s9o),e(G,l9o),e(G,L2),e(L2,Gie),e(Gie,i9o),e(L2,d9o),e(L2,oj),e(oj,c9o),e(L2,f9o),e(G,m9o),e(G,x2),e(x2,Oie),e(Oie,g9o),e(x2,h9o),e(x2,rj),e(rj,p9o),e(x2,_9o),e(G,u9o),e(G,k2),e(k2,Vie),e(Vie,b9o),e(k2,v9o),e(k2,tj),e(tj,F9o),e(k2,T9o),e(G,M9o),e(G,S2),e(S2,Xie),e(Xie,E9o),e(S2,C9o),e(S2,aj),e(aj,w9o),e(S2,A9o),e(G,y9o),e(G,R2),e(R2,zie),e(zie,L9o),e(R2,x9o),e(R2,nj),e(nj,k9o),e(R2,S9o),e(Ve,R9o),e(Ve,B2),e(B2,B9o),e(B2,Qie),e(Qie,P9o),e(B2,$9o),e(B2,Wie),e(Wie,I9o),e(Ve,q9o),e(Ve,Hie),e(Hie,N9o),e(Ve,j9o),g(rA,Ve,null),b(c,nBe,u),b(c,vd,u),e(vd,P2),e(P2,Uie),g(tA,Uie,null),e(vd,D9o),e(vd,Jie),e(Jie,G9o),b(c,sBe,u),b(c,tr,u),g(aA,tr,null),e(tr,O9o),e(tr,Fd),e(Fd,V9o),e(Fd,sj),e(sj,X9o),e(Fd,z9o),e(Fd,lj),e(lj,Q9o),e(Fd,W9o),e(tr,H9o),e(tr,nA),e(nA,U9o),e(nA,Yie),e(Yie,J9o),e(nA,Y9o),e(tr,K9o),e(tr,Yr),g(sA,Yr,null),e(Yr,Z9o),e(Yr,Kie),e(Kie,exo),e(Yr,oxo),e(Yr,Td),e(Td,rxo),e(Td,Zie),e(Zie,txo),e(Td,axo),e(Td,ij),e(ij,nxo),e(Td,sxo),e(Yr,lxo),e(Yr,ede),e(ede,ixo),e(Yr,dxo),g(lA,Yr,null),e(tr,cxo),e(tr,Xe),g(iA,Xe,null),e(Xe,fxo),e(Xe,ode),e(ode,mxo),e(Xe,gxo),e(Xe,Ya),e(Ya,hxo),e(Ya,rde),e(rde,pxo),e(Ya,_xo),e(Ya,tde),e(tde,uxo),e(Ya,bxo),e(Ya,ade),e(ade,vxo),e(Ya,Fxo),e(Xe,Txo),e(Xe,da),e(da,$2),e($2,nde),e(nde,Mxo),e($2,Exo),e($2,dj),e(dj,Cxo),e($2,wxo),e(da,Axo),e(da,I2),e(I2,sde),e(sde,yxo),e(I2,Lxo),e(I2,cj),e(cj,xxo),e(I2,kxo),e(da,Sxo),e(da,q2),e(q2,lde),e(lde,Rxo),e(q2,Bxo),e(q2,fj),e(fj,Pxo),e(q2,$xo),e(da,Ixo),e(da,N2),e(N2,ide),e(ide,qxo),e(N2,Nxo),e(N2,mj),e(mj,jxo),e(N2,Dxo),e(da,Gxo),e(da,j2),e(j2,dde),e(dde,Oxo),e(j2,Vxo),e(j2,gj),e(gj,Xxo),e(j2,zxo),e(Xe,Qxo),e(Xe,D2),e(D2,Wxo),e(D2,cde),e(cde,Hxo),e(D2,Uxo),e(D2,fde),e(fde,Jxo),e(Xe,Yxo),e(Xe,mde),e(mde,Kxo),e(Xe,Zxo),g(dA,Xe,null),b(c,lBe,u),b(c,Md,u),e(Md,G2),e(G2,gde),g(cA,gde,null),e(Md,eko),e(Md,hde),e(hde,oko),b(c,iBe,u),b(c,ar,u),g(fA,ar,null),e(ar,rko),e(ar,Ed),e(Ed,tko),e(Ed,hj),e(hj,ako),e(Ed,nko),e(Ed,pj),e(pj,sko),e(Ed,lko),e(ar,iko),e(ar,mA),e(mA,dko),e(mA,pde),e(pde,cko),e(mA,fko),e(ar,mko),e(ar,Kr),g(gA,Kr,null),e(Kr,gko),e(Kr,_de),e(_de,hko),e(Kr,pko),e(Kr,Cd),e(Cd,_ko),e(Cd,ude),e(ude,uko),e(Cd,bko),e(Cd,_j),e(_j,vko),e(Cd,Fko),e(Kr,Tko),e(Kr,bde),e(bde,Mko),e(Kr,Eko),g(hA,Kr,null),e(ar,Cko),e(ar,ze),g(pA,ze,null),e(ze,wko),e(ze,vde),e(vde,Ako),e(ze,yko),e(ze,Ka),e(Ka,Lko),e(Ka,Fde),e(Fde,xko),e(Ka,kko),e(Ka,Tde),e(Tde,Sko),e(Ka,Rko),e(Ka,Mde),e(Mde,Bko),e(Ka,Pko),e(ze,$ko),e(ze,j),e(j,O2),e(O2,Ede),e(Ede,Iko),e(O2,qko),e(O2,uj),e(uj,Nko),e(O2,jko),e(j,Dko),e(j,V2),e(V2,Cde),e(Cde,Gko),e(V2,Oko),e(V2,bj),e(bj,Vko),e(V2,Xko),e(j,zko),e(j,X2),e(X2,wde),e(wde,Qko),e(X2,Wko),e(X2,vj),e(vj,Hko),e(X2,Uko),e(j,Jko),e(j,z2),e(z2,Ade),e(Ade,Yko),e(z2,Kko),e(z2,Fj),e(Fj,Zko),e(z2,eSo),e(j,oSo),e(j,Q2),e(Q2,yde),e(yde,rSo),e(Q2,tSo),e(Q2,Tj),e(Tj,aSo),e(Q2,nSo),e(j,sSo),e(j,W2),e(W2,Lde),e(Lde,lSo),e(W2,iSo),e(W2,Mj),e(Mj,dSo),e(W2,cSo),e(j,fSo),e(j,H2),e(H2,xde),e(xde,mSo),e(H2,gSo),e(H2,Ej),e(Ej,hSo),e(H2,pSo),e(j,_So),e(j,U2),e(U2,kde),e(kde,uSo),e(U2,bSo),e(U2,Cj),e(Cj,vSo),e(U2,FSo),e(j,TSo),e(j,J2),e(J2,Sde),e(Sde,MSo),e(J2,ESo),e(J2,wj),e(wj,CSo),e(J2,wSo),e(j,ASo),e(j,Y2),e(Y2,Rde),e(Rde,ySo),e(Y2,LSo),e(Y2,Aj),e(Aj,xSo),e(Y2,kSo),e(j,SSo),e(j,K2),e(K2,Bde),e(Bde,RSo),e(K2,BSo),e(K2,yj),e(yj,PSo),e(K2,$So),e(j,ISo),e(j,Z2),e(Z2,Pde),e(Pde,qSo),e(Z2,NSo),e(Z2,Lj),e(Lj,jSo),e(Z2,DSo),e(j,GSo),e(j,ev),e(ev,$de),e($de,OSo),e(ev,VSo),e(ev,xj),e(xj,XSo),e(ev,zSo),e(j,QSo),e(j,ov),e(ov,Ide),e(Ide,WSo),e(ov,HSo),e(ov,kj),e(kj,USo),e(ov,JSo),e(j,YSo),e(j,rv),e(rv,qde),e(qde,KSo),e(rv,ZSo),e(rv,Sj),e(Sj,eRo),e(rv,oRo),e(j,rRo),e(j,tv),e(tv,Nde),e(Nde,tRo),e(tv,aRo),e(tv,Rj),e(Rj,nRo),e(tv,sRo),e(j,lRo),e(j,av),e(av,jde),e(jde,iRo),e(av,dRo),e(av,Bj),e(Bj,cRo),e(av,fRo),e(j,mRo),e(j,nv),e(nv,Dde),e(Dde,gRo),e(nv,hRo),e(nv,Pj),e(Pj,pRo),e(nv,_Ro),e(j,uRo),e(j,sv),e(sv,Gde),e(Gde,bRo),e(sv,vRo),e(sv,$j),e($j,FRo),e(sv,TRo),e(j,MRo),e(j,lv),e(lv,Ode),e(Ode,ERo),e(lv,CRo),e(lv,Ij),e(Ij,wRo),e(lv,ARo),e(j,yRo),e(j,iv),e(iv,Vde),e(Vde,LRo),e(iv,xRo),e(iv,qj),e(qj,kRo),e(iv,SRo),e(j,RRo),e(j,dv),e(dv,Xde),e(Xde,BRo),e(dv,PRo),e(dv,Nj),e(Nj,$Ro),e(dv,IRo),e(j,qRo),e(j,cv),e(cv,zde),e(zde,NRo),e(cv,jRo),e(cv,jj),e(jj,DRo),e(cv,GRo),e(j,ORo),e(j,fv),e(fv,Qde),e(Qde,VRo),e(fv,XRo),e(fv,Dj),e(Dj,zRo),e(fv,QRo),e(j,WRo),e(j,mv),e(mv,Wde),e(Wde,HRo),e(mv,URo),e(mv,Gj),e(Gj,JRo),e(mv,YRo),e(j,KRo),e(j,gv),e(gv,Hde),e(Hde,ZRo),e(gv,eBo),e(gv,Oj),e(Oj,oBo),e(gv,rBo),e(j,tBo),e(j,hv),e(hv,Ude),e(Ude,aBo),e(hv,nBo),e(hv,Vj),e(Vj,sBo),e(hv,lBo),e(j,iBo),e(j,pv),e(pv,Jde),e(Jde,dBo),e(pv,cBo),e(pv,Xj),e(Xj,fBo),e(pv,mBo),e(j,gBo),e(j,_v),e(_v,Yde),e(Yde,hBo),e(_v,pBo),e(_v,zj),e(zj,_Bo),e(_v,uBo),e(j,bBo),e(j,uv),e(uv,Kde),e(Kde,vBo),e(uv,FBo),e(uv,Qj),e(Qj,TBo),e(uv,MBo),e(j,EBo),e(j,bv),e(bv,Zde),e(Zde,CBo),e(bv,wBo),e(bv,Wj),e(Wj,ABo),e(bv,yBo),e(j,LBo),e(j,vv),e(vv,ece),e(ece,xBo),e(vv,kBo),e(vv,Hj),e(Hj,SBo),e(vv,RBo),e(j,BBo),e(j,Fv),e(Fv,oce),e(oce,PBo),e(Fv,$Bo),e(Fv,Uj),e(Uj,IBo),e(Fv,qBo),e(ze,NBo),e(ze,Tv),e(Tv,jBo),e(Tv,rce),e(rce,DBo),e(Tv,GBo),e(Tv,tce),e(tce,OBo),e(ze,VBo),e(ze,ace),e(ace,XBo),e(ze,zBo),g(_A,ze,null),b(c,dBe,u),b(c,wd,u),e(wd,Mv),e(Mv,nce),g(uA,nce,null),e(wd,QBo),e(wd,sce),e(sce,WBo),b(c,cBe,u),b(c,nr,u),g(bA,nr,null),e(nr,HBo),e(nr,Ad),e(Ad,UBo),e(Ad,Jj),e(Jj,JBo),e(Ad,YBo),e(Ad,Yj),e(Yj,KBo),e(Ad,ZBo),e(nr,ePo),e(nr,vA),e(vA,oPo),e(vA,lce),e(lce,rPo),e(vA,tPo),e(nr,aPo),e(nr,Zr),g(FA,Zr,null),e(Zr,nPo),e(Zr,ice),e(ice,sPo),e(Zr,lPo),e(Zr,yd),e(yd,iPo),e(yd,dce),e(dce,dPo),e(yd,cPo),e(yd,Kj),e(Kj,fPo),e(yd,mPo),e(Zr,gPo),e(Zr,cce),e(cce,hPo),e(Zr,pPo),g(TA,Zr,null),e(nr,_Po),e(nr,Qe),g(MA,Qe,null),e(Qe,uPo),e(Qe,fce),e(fce,bPo),e(Qe,vPo),e(Qe,Za),e(Za,FPo),e(Za,mce),e(mce,TPo),e(Za,MPo),e(Za,gce),e(gce,EPo),e(Za,CPo),e(Za,hce),e(hce,wPo),e(Za,APo),e(Qe,yPo),e(Qe,R),e(R,Ev),e(Ev,pce),e(pce,LPo),e(Ev,xPo),e(Ev,Zj),e(Zj,kPo),e(Ev,SPo),e(R,RPo),e(R,Cv),e(Cv,_ce),e(_ce,BPo),e(Cv,PPo),e(Cv,eD),e(eD,$Po),e(Cv,IPo),e(R,qPo),e(R,wv),e(wv,uce),e(uce,NPo),e(wv,jPo),e(wv,oD),e(oD,DPo),e(wv,GPo),e(R,OPo),e(R,Av),e(Av,bce),e(bce,VPo),e(Av,XPo),e(Av,rD),e(rD,zPo),e(Av,QPo),e(R,WPo),e(R,yv),e(yv,vce),e(vce,HPo),e(yv,UPo),e(yv,tD),e(tD,JPo),e(yv,YPo),e(R,KPo),e(R,Lv),e(Lv,Fce),e(Fce,ZPo),e(Lv,e$o),e(Lv,aD),e(aD,o$o),e(Lv,r$o),e(R,t$o),e(R,xv),e(xv,Tce),e(Tce,a$o),e(xv,n$o),e(xv,nD),e(nD,s$o),e(xv,l$o),e(R,i$o),e(R,kv),e(kv,Mce),e(Mce,d$o),e(kv,c$o),e(kv,sD),e(sD,f$o),e(kv,m$o),e(R,g$o),e(R,Sv),e(Sv,Ece),e(Ece,h$o),e(Sv,p$o),e(Sv,lD),e(lD,_$o),e(Sv,u$o),e(R,b$o),e(R,Rv),e(Rv,Cce),e(Cce,v$o),e(Rv,F$o),e(Rv,iD),e(iD,T$o),e(Rv,M$o),e(R,E$o),e(R,Bv),e(Bv,wce),e(wce,C$o),e(Bv,w$o),e(Bv,dD),e(dD,A$o),e(Bv,y$o),e(R,L$o),e(R,Pv),e(Pv,Ace),e(Ace,x$o),e(Pv,k$o),e(Pv,cD),e(cD,S$o),e(Pv,R$o),e(R,B$o),e(R,$v),e($v,yce),e(yce,P$o),e($v,$$o),e($v,fD),e(fD,I$o),e($v,q$o),e(R,N$o),e(R,Iv),e(Iv,Lce),e(Lce,j$o),e(Iv,D$o),e(Iv,mD),e(mD,G$o),e(Iv,O$o),e(R,V$o),e(R,qv),e(qv,xce),e(xce,X$o),e(qv,z$o),e(qv,gD),e(gD,Q$o),e(qv,W$o),e(R,H$o),e(R,Nv),e(Nv,kce),e(kce,U$o),e(Nv,J$o),e(Nv,hD),e(hD,Y$o),e(Nv,K$o),e(R,Z$o),e(R,jv),e(jv,Sce),e(Sce,eIo),e(jv,oIo),e(jv,pD),e(pD,rIo),e(jv,tIo),e(R,aIo),e(R,Dv),e(Dv,Rce),e(Rce,nIo),e(Dv,sIo),e(Dv,_D),e(_D,lIo),e(Dv,iIo),e(R,dIo),e(R,Gv),e(Gv,Bce),e(Bce,cIo),e(Gv,fIo),e(Gv,uD),e(uD,mIo),e(Gv,gIo),e(R,hIo),e(R,Ov),e(Ov,Pce),e(Pce,pIo),e(Ov,_Io),e(Ov,bD),e(bD,uIo),e(Ov,bIo),e(R,vIo),e(R,Vv),e(Vv,$ce),e($ce,FIo),e(Vv,TIo),e(Vv,vD),e(vD,MIo),e(Vv,EIo),e(R,CIo),e(R,Xv),e(Xv,Ice),e(Ice,wIo),e(Xv,AIo),e(Xv,FD),e(FD,yIo),e(Xv,LIo),e(R,xIo),e(R,zv),e(zv,qce),e(qce,kIo),e(zv,SIo),e(zv,TD),e(TD,RIo),e(zv,BIo),e(R,PIo),e(R,Qv),e(Qv,Nce),e(Nce,$Io),e(Qv,IIo),e(Qv,MD),e(MD,qIo),e(Qv,NIo),e(R,jIo),e(R,Wv),e(Wv,jce),e(jce,DIo),e(Wv,GIo),e(Wv,ED),e(ED,OIo),e(Wv,VIo),e(R,XIo),e(R,Hv),e(Hv,Dce),e(Dce,zIo),e(Hv,QIo),e(Hv,CD),e(CD,WIo),e(Hv,HIo),e(R,UIo),e(R,Uv),e(Uv,Gce),e(Gce,JIo),e(Uv,YIo),e(Uv,wD),e(wD,KIo),e(Uv,ZIo),e(R,eqo),e(R,Jv),e(Jv,Oce),e(Oce,oqo),e(Jv,rqo),e(Jv,AD),e(AD,tqo),e(Jv,aqo),e(R,nqo),e(R,Yv),e(Yv,Vce),e(Vce,sqo),e(Yv,lqo),e(Yv,yD),e(yD,iqo),e(Yv,dqo),e(R,cqo),e(R,Kv),e(Kv,Xce),e(Xce,fqo),e(Kv,mqo),e(Kv,LD),e(LD,gqo),e(Kv,hqo),e(R,pqo),e(R,Zv),e(Zv,zce),e(zce,_qo),e(Zv,uqo),e(Zv,xD),e(xD,bqo),e(Zv,vqo),e(R,Fqo),e(R,eF),e(eF,Qce),e(Qce,Tqo),e(eF,Mqo),e(eF,kD),e(kD,Eqo),e(eF,Cqo),e(R,wqo),e(R,oF),e(oF,Wce),e(Wce,Aqo),e(oF,yqo),e(oF,SD),e(SD,Lqo),e(oF,xqo),e(R,kqo),e(R,rF),e(rF,Hce),e(Hce,Sqo),e(rF,Rqo),e(rF,RD),e(RD,Bqo),e(rF,Pqo),e(R,$qo),e(R,tF),e(tF,Uce),e(Uce,Iqo),e(tF,qqo),e(tF,BD),e(BD,Nqo),e(tF,jqo),e(R,Dqo),e(R,aF),e(aF,Jce),e(Jce,Gqo),e(aF,Oqo),e(aF,PD),e(PD,Vqo),e(aF,Xqo),e(R,zqo),e(R,nF),e(nF,Yce),e(Yce,Qqo),e(nF,Wqo),e(nF,$D),e($D,Hqo),e(nF,Uqo),e(R,Jqo),e(R,sF),e(sF,Kce),e(Kce,Yqo),e(sF,Kqo),e(sF,ID),e(ID,Zqo),e(sF,eNo),e(R,oNo),e(R,lF),e(lF,Zce),e(Zce,rNo),e(lF,tNo),e(lF,qD),e(qD,aNo),e(lF,nNo),e(Qe,sNo),e(Qe,iF),e(iF,lNo),e(iF,efe),e(efe,iNo),e(iF,dNo),e(iF,ofe),e(ofe,cNo),e(Qe,fNo),e(Qe,rfe),e(rfe,mNo),e(Qe,gNo),g(EA,Qe,null),b(c,fBe,u),b(c,Ld,u),e(Ld,dF),e(dF,tfe),g(CA,tfe,null),e(Ld,hNo),e(Ld,afe),e(afe,pNo),b(c,mBe,u),b(c,sr,u),g(wA,sr,null),e(sr,_No),e(sr,xd),e(xd,uNo),e(xd,ND),e(ND,bNo),e(xd,vNo),e(xd,jD),e(jD,FNo),e(xd,TNo),e(sr,MNo),e(sr,AA),e(AA,ENo),e(AA,nfe),e(nfe,CNo),e(AA,wNo),e(sr,ANo),e(sr,et),g(yA,et,null),e(et,yNo),e(et,sfe),e(sfe,LNo),e(et,xNo),e(et,kd),e(kd,kNo),e(kd,lfe),e(lfe,SNo),e(kd,RNo),e(kd,DD),e(DD,BNo),e(kd,PNo),e(et,$No),e(et,ife),e(ife,INo),e(et,qNo),g(LA,et,null),e(sr,NNo),e(sr,We),g(xA,We,null),e(We,jNo),e(We,dfe),e(dfe,DNo),e(We,GNo),e(We,en),e(en,ONo),e(en,cfe),e(cfe,VNo),e(en,XNo),e(en,ffe),e(ffe,zNo),e(en,QNo),e(en,mfe),e(mfe,WNo),e(en,HNo),e(We,UNo),e(We,gfe),e(gfe,cF),e(cF,hfe),e(hfe,JNo),e(cF,YNo),e(cF,GD),e(GD,KNo),e(cF,ZNo),e(We,ejo),e(We,fF),e(fF,ojo),e(fF,pfe),e(pfe,rjo),e(fF,tjo),e(fF,_fe),e(_fe,ajo),e(We,njo),e(We,ufe),e(ufe,sjo),e(We,ljo),g(kA,We,null),b(c,gBe,u),b(c,Sd,u),e(Sd,mF),e(mF,bfe),g(SA,bfe,null),e(Sd,ijo),e(Sd,vfe),e(vfe,djo),b(c,hBe,u),b(c,lr,u),g(RA,lr,null),e(lr,cjo),e(lr,Rd),e(Rd,fjo),e(Rd,OD),e(OD,mjo),e(Rd,gjo),e(Rd,VD),e(VD,hjo),e(Rd,pjo),e(lr,_jo),e(lr,BA),e(BA,ujo),e(BA,Ffe),e(Ffe,bjo),e(BA,vjo),e(lr,Fjo),e(lr,ot),g(PA,ot,null),e(ot,Tjo),e(ot,Tfe),e(Tfe,Mjo),e(ot,Ejo),e(ot,Bd),e(Bd,Cjo),e(Bd,Mfe),e(Mfe,wjo),e(Bd,Ajo),e(Bd,XD),e(XD,yjo),e(Bd,Ljo),e(ot,xjo),e(ot,Efe),e(Efe,kjo),e(ot,Sjo),g($A,ot,null),e(lr,Rjo),e(lr,He),g(IA,He,null),e(He,Bjo),e(He,Cfe),e(Cfe,Pjo),e(He,$jo),e(He,on),e(on,Ijo),e(on,wfe),e(wfe,qjo),e(on,Njo),e(on,Afe),e(Afe,jjo),e(on,Djo),e(on,yfe),e(yfe,Gjo),e(on,Ojo),e(He,Vjo),e(He,de),e(de,gF),e(gF,Lfe),e(Lfe,Xjo),e(gF,zjo),e(gF,zD),e(zD,Qjo),e(gF,Wjo),e(de,Hjo),e(de,hF),e(hF,xfe),e(xfe,Ujo),e(hF,Jjo),e(hF,QD),e(QD,Yjo),e(hF,Kjo),e(de,Zjo),e(de,pF),e(pF,kfe),e(kfe,eDo),e(pF,oDo),e(pF,WD),e(WD,rDo),e(pF,tDo),e(de,aDo),e(de,Os),e(Os,Sfe),e(Sfe,nDo),e(Os,sDo),e(Os,HD),e(HD,lDo),e(Os,iDo),e(Os,UD),e(UD,dDo),e(Os,cDo),e(de,fDo),e(de,_F),e(_F,Rfe),e(Rfe,mDo),e(_F,gDo),e(_F,JD),e(JD,hDo),e(_F,pDo),e(de,_Do),e(de,ma),e(ma,Bfe),e(Bfe,uDo),e(ma,bDo),e(ma,YD),e(YD,vDo),e(ma,FDo),e(ma,KD),e(KD,TDo),e(ma,MDo),e(ma,ZD),e(ZD,EDo),e(ma,CDo),e(de,wDo),e(de,uF),e(uF,Pfe),e(Pfe,ADo),e(uF,yDo),e(uF,eG),e(eG,LDo),e(uF,xDo),e(de,kDo),e(de,bF),e(bF,$fe),e($fe,SDo),e(bF,RDo),e(bF,oG),e(oG,BDo),e(bF,PDo),e(de,$Do),e(de,vF),e(vF,Ife),e(Ife,IDo),e(vF,qDo),e(vF,rG),e(rG,NDo),e(vF,jDo),e(de,DDo),e(de,FF),e(FF,qfe),e(qfe,GDo),e(FF,ODo),e(FF,tG),e(tG,VDo),e(FF,XDo),e(de,zDo),e(de,TF),e(TF,Nfe),e(Nfe,QDo),e(TF,WDo),e(TF,aG),e(aG,HDo),e(TF,UDo),e(de,JDo),e(de,MF),e(MF,jfe),e(jfe,YDo),e(MF,KDo),e(MF,nG),e(nG,ZDo),e(MF,eGo),e(de,oGo),e(de,EF),e(EF,Dfe),e(Dfe,rGo),e(EF,tGo),e(EF,sG),e(sG,aGo),e(EF,nGo),e(He,sGo),e(He,CF),e(CF,lGo),e(CF,Gfe),e(Gfe,iGo),e(CF,dGo),e(CF,Ofe),e(Ofe,cGo),e(He,fGo),e(He,Vfe),e(Vfe,mGo),e(He,gGo),g(qA,He,null),b(c,pBe,u),b(c,Pd,u),e(Pd,wF),e(wF,Xfe),g(NA,Xfe,null),e(Pd,hGo),e(Pd,zfe),e(zfe,pGo),b(c,_Be,u),b(c,ir,u),g(jA,ir,null),e(ir,_Go),e(ir,$d),e($d,uGo),e($d,lG),e(lG,bGo),e($d,vGo),e($d,iG),e(iG,FGo),e($d,TGo),e(ir,MGo),e(ir,DA),e(DA,EGo),e(DA,Qfe),e(Qfe,CGo),e(DA,wGo),e(ir,AGo),e(ir,rt),g(GA,rt,null),e(rt,yGo),e(rt,Wfe),e(Wfe,LGo),e(rt,xGo),e(rt,Id),e(Id,kGo),e(Id,Hfe),e(Hfe,SGo),e(Id,RGo),e(Id,dG),e(dG,BGo),e(Id,PGo),e(rt,$Go),e(rt,Ufe),e(Ufe,IGo),e(rt,qGo),g(OA,rt,null),e(ir,NGo),e(ir,Ue),g(VA,Ue,null),e(Ue,jGo),e(Ue,Jfe),e(Jfe,DGo),e(Ue,GGo),e(Ue,rn),e(rn,OGo),e(rn,Yfe),e(Yfe,VGo),e(rn,XGo),e(rn,Kfe),e(Kfe,zGo),e(rn,QGo),e(rn,Zfe),e(Zfe,WGo),e(rn,HGo),e(Ue,UGo),e(Ue,eme),e(eme,AF),e(AF,ome),e(ome,JGo),e(AF,YGo),e(AF,cG),e(cG,KGo),e(AF,ZGo),e(Ue,eOo),e(Ue,yF),e(yF,oOo),e(yF,rme),e(rme,rOo),e(yF,tOo),e(yF,tme),e(tme,aOo),e(Ue,nOo),e(Ue,ame),e(ame,sOo),e(Ue,lOo),g(XA,Ue,null),b(c,uBe,u),b(c,qd,u),e(qd,LF),e(LF,nme),g(zA,nme,null),e(qd,iOo),e(qd,sme),e(sme,dOo),b(c,bBe,u),b(c,dr,u),g(QA,dr,null),e(dr,cOo),e(dr,Nd),e(Nd,fOo),e(Nd,fG),e(fG,mOo),e(Nd,gOo),e(Nd,mG),e(mG,hOo),e(Nd,pOo),e(dr,_Oo),e(dr,WA),e(WA,uOo),e(WA,lme),e(lme,bOo),e(WA,vOo),e(dr,FOo),e(dr,tt),g(HA,tt,null),e(tt,TOo),e(tt,ime),e(ime,MOo),e(tt,EOo),e(tt,jd),e(jd,COo),e(jd,dme),e(dme,wOo),e(jd,AOo),e(jd,gG),e(gG,yOo),e(jd,LOo),e(tt,xOo),e(tt,cme),e(cme,kOo),e(tt,SOo),g(UA,tt,null),e(dr,ROo),e(dr,Je),g(JA,Je,null),e(Je,BOo),e(Je,fme),e(fme,POo),e(Je,$Oo),e(Je,tn),e(tn,IOo),e(tn,mme),e(mme,qOo),e(tn,NOo),e(tn,gme),e(gme,jOo),e(tn,DOo),e(tn,hme),e(hme,GOo),e(tn,OOo),e(Je,VOo),e(Je,Se),e(Se,xF),e(xF,pme),e(pme,XOo),e(xF,zOo),e(xF,hG),e(hG,QOo),e(xF,WOo),e(Se,HOo),e(Se,kF),e(kF,_me),e(_me,UOo),e(kF,JOo),e(kF,pG),e(pG,YOo),e(kF,KOo),e(Se,ZOo),e(Se,SF),e(SF,ume),e(ume,eVo),e(SF,oVo),e(SF,_G),e(_G,rVo),e(SF,tVo),e(Se,aVo),e(Se,RF),e(RF,bme),e(bme,nVo),e(RF,sVo),e(RF,uG),e(uG,lVo),e(RF,iVo),e(Se,dVo),e(Se,BF),e(BF,vme),e(vme,cVo),e(BF,fVo),e(BF,bG),e(bG,mVo),e(BF,gVo),e(Se,hVo),e(Se,PF),e(PF,Fme),e(Fme,pVo),e(PF,_Vo),e(PF,vG),e(vG,uVo),e(PF,bVo),e(Se,vVo),e(Se,$F),e($F,Tme),e(Tme,FVo),e($F,TVo),e($F,FG),e(FG,MVo),e($F,EVo),e(Se,CVo),e(Se,IF),e(IF,Mme),e(Mme,wVo),e(IF,AVo),e(IF,TG),e(TG,yVo),e(IF,LVo),e(Je,xVo),e(Je,qF),e(qF,kVo),e(qF,Eme),e(Eme,SVo),e(qF,RVo),e(qF,Cme),e(Cme,BVo),e(Je,PVo),e(Je,wme),e(wme,$Vo),e(Je,IVo),g(YA,Je,null),b(c,vBe,u),b(c,Dd,u),e(Dd,NF),e(NF,Ame),g(KA,Ame,null),e(Dd,qVo),e(Dd,yme),e(yme,NVo),b(c,FBe,u),b(c,cr,u),g(ZA,cr,null),e(cr,jVo),e(cr,Gd),e(Gd,DVo),e(Gd,MG),e(MG,GVo),e(Gd,OVo),e(Gd,EG),e(EG,VVo),e(Gd,XVo),e(cr,zVo),e(cr,e0),e(e0,QVo),e(e0,Lme),e(Lme,WVo),e(e0,HVo),e(cr,UVo),e(cr,at),g(o0,at,null),e(at,JVo),e(at,xme),e(xme,YVo),e(at,KVo),e(at,Od),e(Od,ZVo),e(Od,kme),e(kme,eXo),e(Od,oXo),e(Od,CG),e(CG,rXo),e(Od,tXo),e(at,aXo),e(at,Sme),e(Sme,nXo),e(at,sXo),g(r0,at,null),e(cr,lXo),e(cr,Ye),g(t0,Ye,null),e(Ye,iXo),e(Ye,Rme),e(Rme,dXo),e(Ye,cXo),e(Ye,an),e(an,fXo),e(an,Bme),e(Bme,mXo),e(an,gXo),e(an,Pme),e(Pme,hXo),e(an,pXo),e(an,$me),e($me,_Xo),e(an,uXo),e(Ye,bXo),e(Ye,nn),e(nn,jF),e(jF,Ime),e(Ime,vXo),e(jF,FXo),e(jF,wG),e(wG,TXo),e(jF,MXo),e(nn,EXo),e(nn,DF),e(DF,qme),e(qme,CXo),e(DF,wXo),e(DF,AG),e(AG,AXo),e(DF,yXo),e(nn,LXo),e(nn,GF),e(GF,Nme),e(Nme,xXo),e(GF,kXo),e(GF,yG),e(yG,SXo),e(GF,RXo),e(nn,BXo),e(nn,OF),e(OF,jme),e(jme,PXo),e(OF,$Xo),e(OF,LG),e(LG,IXo),e(OF,qXo),e(Ye,NXo),e(Ye,VF),e(VF,jXo),e(VF,Dme),e(Dme,DXo),e(VF,GXo),e(VF,Gme),e(Gme,OXo),e(Ye,VXo),e(Ye,Ome),e(Ome,XXo),e(Ye,zXo),g(a0,Ye,null),b(c,TBe,u),b(c,Vd,u),e(Vd,XF),e(XF,Vme),g(n0,Vme,null),e(Vd,QXo),e(Vd,Xme),e(Xme,WXo),b(c,MBe,u),b(c,fr,u),g(s0,fr,null),e(fr,HXo),e(fr,Xd),e(Xd,UXo),e(Xd,xG),e(xG,JXo),e(Xd,YXo),e(Xd,kG),e(kG,KXo),e(Xd,ZXo),e(fr,ezo),e(fr,l0),e(l0,ozo),e(l0,zme),e(zme,rzo),e(l0,tzo),e(fr,azo),e(fr,nt),g(i0,nt,null),e(nt,nzo),e(nt,Qme),e(Qme,szo),e(nt,lzo),e(nt,zd),e(zd,izo),e(zd,Wme),e(Wme,dzo),e(zd,czo),e(zd,SG),e(SG,fzo),e(zd,mzo),e(nt,gzo),e(nt,Hme),e(Hme,hzo),e(nt,pzo),g(d0,nt,null),e(fr,_zo),e(fr,Ke),g(c0,Ke,null),e(Ke,uzo),e(Ke,Ume),e(Ume,bzo),e(Ke,vzo),e(Ke,sn),e(sn,Fzo),e(sn,Jme),e(Jme,Tzo),e(sn,Mzo),e(sn,Yme),e(Yme,Ezo),e(sn,Czo),e(sn,Kme),e(Kme,wzo),e(sn,Azo),e(Ke,yzo),e(Ke,Re),e(Re,zF),e(zF,Zme),e(Zme,Lzo),e(zF,xzo),e(zF,RG),e(RG,kzo),e(zF,Szo),e(Re,Rzo),e(Re,QF),e(QF,ege),e(ege,Bzo),e(QF,Pzo),e(QF,BG),e(BG,$zo),e(QF,Izo),e(Re,qzo),e(Re,WF),e(WF,oge),e(oge,Nzo),e(WF,jzo),e(WF,PG),e(PG,Dzo),e(WF,Gzo),e(Re,Ozo),e(Re,HF),e(HF,rge),e(rge,Vzo),e(HF,Xzo),e(HF,$G),e($G,zzo),e(HF,Qzo),e(Re,Wzo),e(Re,UF),e(UF,tge),e(tge,Hzo),e(UF,Uzo),e(UF,IG),e(IG,Jzo),e(UF,Yzo),e(Re,Kzo),e(Re,JF),e(JF,age),e(age,Zzo),e(JF,eQo),e(JF,qG),e(qG,oQo),e(JF,rQo),e(Re,tQo),e(Re,YF),e(YF,nge),e(nge,aQo),e(YF,nQo),e(YF,NG),e(NG,sQo),e(YF,lQo),e(Re,iQo),e(Re,KF),e(KF,sge),e(sge,dQo),e(KF,cQo),e(KF,jG),e(jG,fQo),e(KF,mQo),e(Ke,gQo),e(Ke,ZF),e(ZF,hQo),e(ZF,lge),e(lge,pQo),e(ZF,_Qo),e(ZF,ige),e(ige,uQo),e(Ke,bQo),e(Ke,dge),e(dge,vQo),e(Ke,FQo),g(f0,Ke,null),b(c,EBe,u),b(c,Qd,u),e(Qd,eT),e(eT,cge),g(m0,cge,null),e(Qd,TQo),e(Qd,fge),e(fge,MQo),b(c,CBe,u),b(c,mr,u),g(g0,mr,null),e(mr,EQo),e(mr,Wd),e(Wd,CQo),e(Wd,DG),e(DG,wQo),e(Wd,AQo),e(Wd,GG),e(GG,yQo),e(Wd,LQo),e(mr,xQo),e(mr,h0),e(h0,kQo),e(h0,mge),e(mge,SQo),e(h0,RQo),e(mr,BQo),e(mr,st),g(p0,st,null),e(st,PQo),e(st,gge),e(gge,$Qo),e(st,IQo),e(st,Hd),e(Hd,qQo),e(Hd,hge),e(hge,NQo),e(Hd,jQo),e(Hd,OG),e(OG,DQo),e(Hd,GQo),e(st,OQo),e(st,pge),e(pge,VQo),e(st,XQo),g(_0,st,null),e(mr,zQo),e(mr,Ze),g(u0,Ze,null),e(Ze,QQo),e(Ze,_ge),e(_ge,WQo),e(Ze,HQo),e(Ze,ln),e(ln,UQo),e(ln,uge),e(uge,JQo),e(ln,YQo),e(ln,bge),e(bge,KQo),e(ln,ZQo),e(ln,vge),e(vge,eWo),e(ln,oWo),e(Ze,rWo),e(Ze,b0),e(b0,oT),e(oT,Fge),e(Fge,tWo),e(oT,aWo),e(oT,VG),e(VG,nWo),e(oT,sWo),e(b0,lWo),e(b0,rT),e(rT,Tge),e(Tge,iWo),e(rT,dWo),e(rT,XG),e(XG,cWo),e(rT,fWo),e(Ze,mWo),e(Ze,tT),e(tT,gWo),e(tT,Mge),e(Mge,hWo),e(tT,pWo),e(tT,Ege),e(Ege,_Wo),e(Ze,uWo),e(Ze,Cge),e(Cge,bWo),e(Ze,vWo),g(v0,Ze,null),b(c,wBe,u),b(c,Ud,u),e(Ud,aT),e(aT,wge),g(F0,wge,null),e(Ud,FWo),e(Ud,Age),e(Age,TWo),b(c,ABe,u),b(c,gr,u),g(T0,gr,null),e(gr,MWo),e(gr,Jd),e(Jd,EWo),e(Jd,zG),e(zG,CWo),e(Jd,wWo),e(Jd,QG),e(QG,AWo),e(Jd,yWo),e(gr,LWo),e(gr,M0),e(M0,xWo),e(M0,yge),e(yge,kWo),e(M0,SWo),e(gr,RWo),e(gr,lt),g(E0,lt,null),e(lt,BWo),e(lt,Lge),e(Lge,PWo),e(lt,$Wo),e(lt,Yd),e(Yd,IWo),e(Yd,xge),e(xge,qWo),e(Yd,NWo),e(Yd,WG),e(WG,jWo),e(Yd,DWo),e(lt,GWo),e(lt,kge),e(kge,OWo),e(lt,VWo),g(C0,lt,null),e(gr,XWo),e(gr,eo),g(w0,eo,null),e(eo,zWo),e(eo,Sge),e(Sge,QWo),e(eo,WWo),e(eo,dn),e(dn,HWo),e(dn,Rge),e(Rge,UWo),e(dn,JWo),e(dn,Bge),e(Bge,YWo),e(dn,KWo),e(dn,Pge),e(Pge,ZWo),e(dn,eHo),e(eo,oHo),e(eo,cn),e(cn,nT),e(nT,$ge),e($ge,rHo),e(nT,tHo),e(nT,HG),e(HG,aHo),e(nT,nHo),e(cn,sHo),e(cn,sT),e(sT,Ige),e(Ige,lHo),e(sT,iHo),e(sT,UG),e(UG,dHo),e(sT,cHo),e(cn,fHo),e(cn,lT),e(lT,qge),e(qge,mHo),e(lT,gHo),e(lT,JG),e(JG,hHo),e(lT,pHo),e(cn,_Ho),e(cn,iT),e(iT,Nge),e(Nge,uHo),e(iT,bHo),e(iT,YG),e(YG,vHo),e(iT,FHo),e(eo,THo),e(eo,dT),e(dT,MHo),e(dT,jge),e(jge,EHo),e(dT,CHo),e(dT,Dge),e(Dge,wHo),e(eo,AHo),e(eo,Gge),e(Gge,yHo),e(eo,LHo),g(A0,eo,null),b(c,yBe,u),b(c,Kd,u),e(Kd,cT),e(cT,Oge),g(y0,Oge,null),e(Kd,xHo),e(Kd,Vge),e(Vge,kHo),b(c,LBe,u),b(c,hr,u),g(L0,hr,null),e(hr,SHo),e(hr,Zd),e(Zd,RHo),e(Zd,KG),e(KG,BHo),e(Zd,PHo),e(Zd,ZG),e(ZG,$Ho),e(Zd,IHo),e(hr,qHo),e(hr,x0),e(x0,NHo),e(x0,Xge),e(Xge,jHo),e(x0,DHo),e(hr,GHo),e(hr,it),g(k0,it,null),e(it,OHo),e(it,zge),e(zge,VHo),e(it,XHo),e(it,ec),e(ec,zHo),e(ec,Qge),e(Qge,QHo),e(ec,WHo),e(ec,eO),e(eO,HHo),e(ec,UHo),e(it,JHo),e(it,Wge),e(Wge,YHo),e(it,KHo),g(S0,it,null),e(hr,ZHo),e(hr,oo),g(R0,oo,null),e(oo,eUo),e(oo,Hge),e(Hge,oUo),e(oo,rUo),e(oo,fn),e(fn,tUo),e(fn,Uge),e(Uge,aUo),e(fn,nUo),e(fn,Jge),e(Jge,sUo),e(fn,lUo),e(fn,Yge),e(Yge,iUo),e(fn,dUo),e(oo,cUo),e(oo,oc),e(oc,fT),e(fT,Kge),e(Kge,fUo),e(fT,mUo),e(fT,oO),e(oO,gUo),e(fT,hUo),e(oc,pUo),e(oc,mT),e(mT,Zge),e(Zge,_Uo),e(mT,uUo),e(mT,rO),e(rO,bUo),e(mT,vUo),e(oc,FUo),e(oc,gT),e(gT,ehe),e(ehe,TUo),e(gT,MUo),e(gT,tO),e(tO,EUo),e(gT,CUo),e(oo,wUo),e(oo,hT),e(hT,AUo),e(hT,ohe),e(ohe,yUo),e(hT,LUo),e(hT,rhe),e(rhe,xUo),e(oo,kUo),e(oo,the),e(the,SUo),e(oo,RUo),g(B0,oo,null),b(c,xBe,u),b(c,rc,u),e(rc,pT),e(pT,ahe),g(P0,ahe,null),e(rc,BUo),e(rc,nhe),e(nhe,PUo),b(c,kBe,u),b(c,pr,u),g($0,pr,null),e(pr,$Uo),e(pr,tc),e(tc,IUo),e(tc,aO),e(aO,qUo),e(tc,NUo),e(tc,nO),e(nO,jUo),e(tc,DUo),e(pr,GUo),e(pr,I0),e(I0,OUo),e(I0,she),e(she,VUo),e(I0,XUo),e(pr,zUo),e(pr,dt),g(q0,dt,null),e(dt,QUo),e(dt,lhe),e(lhe,WUo),e(dt,HUo),e(dt,ac),e(ac,UUo),e(ac,ihe),e(ihe,JUo),e(ac,YUo),e(ac,sO),e(sO,KUo),e(ac,ZUo),e(dt,eJo),e(dt,dhe),e(dhe,oJo),e(dt,rJo),g(N0,dt,null),e(pr,tJo),e(pr,ro),g(j0,ro,null),e(ro,aJo),e(ro,che),e(che,nJo),e(ro,sJo),e(ro,mn),e(mn,lJo),e(mn,fhe),e(fhe,iJo),e(mn,dJo),e(mn,mhe),e(mhe,cJo),e(mn,fJo),e(mn,ghe),e(ghe,mJo),e(mn,gJo),e(ro,hJo),e(ro,hhe),e(hhe,_T),e(_T,phe),e(phe,pJo),e(_T,_Jo),e(_T,lO),e(lO,uJo),e(_T,bJo),e(ro,vJo),e(ro,uT),e(uT,FJo),e(uT,_he),e(_he,TJo),e(uT,MJo),e(uT,uhe),e(uhe,EJo),e(ro,CJo),e(ro,bhe),e(bhe,wJo),e(ro,AJo),g(D0,ro,null),b(c,SBe,u),b(c,nc,u),e(nc,bT),e(bT,vhe),g(G0,vhe,null),e(nc,yJo),e(nc,Fhe),e(Fhe,LJo),b(c,RBe,u),b(c,_r,u),g(O0,_r,null),e(_r,xJo),e(_r,sc),e(sc,kJo),e(sc,iO),e(iO,SJo),e(sc,RJo),e(sc,dO),e(dO,BJo),e(sc,PJo),e(_r,$Jo),e(_r,V0),e(V0,IJo),e(V0,The),e(The,qJo),e(V0,NJo),e(_r,jJo),e(_r,ct),g(X0,ct,null),e(ct,DJo),e(ct,Mhe),e(Mhe,GJo),e(ct,OJo),e(ct,lc),e(lc,VJo),e(lc,Ehe),e(Ehe,XJo),e(lc,zJo),e(lc,cO),e(cO,QJo),e(lc,WJo),e(ct,HJo),e(ct,Che),e(Che,UJo),e(ct,JJo),g(z0,ct,null),e(_r,YJo),e(_r,to),g(Q0,to,null),e(to,KJo),e(to,whe),e(whe,ZJo),e(to,eYo),e(to,gn),e(gn,oYo),e(gn,Ahe),e(Ahe,rYo),e(gn,tYo),e(gn,yhe),e(yhe,aYo),e(gn,nYo),e(gn,Lhe),e(Lhe,sYo),e(gn,lYo),e(to,iYo),e(to,xhe),e(xhe,vT),e(vT,khe),e(khe,dYo),e(vT,cYo),e(vT,fO),e(fO,fYo),e(vT,mYo),e(to,gYo),e(to,FT),e(FT,hYo),e(FT,She),e(She,pYo),e(FT,_Yo),e(FT,Rhe),e(Rhe,uYo),e(to,bYo),e(to,Bhe),e(Bhe,vYo),e(to,FYo),g(W0,to,null),b(c,BBe,u),b(c,ic,u),e(ic,TT),e(TT,Phe),g(H0,Phe,null),e(ic,TYo),e(ic,$he),e($he,MYo),b(c,PBe,u),b(c,ur,u),g(U0,ur,null),e(ur,EYo),e(ur,dc),e(dc,CYo),e(dc,mO),e(mO,wYo),e(dc,AYo),e(dc,gO),e(gO,yYo),e(dc,LYo),e(ur,xYo),e(ur,J0),e(J0,kYo),e(J0,Ihe),e(Ihe,SYo),e(J0,RYo),e(ur,BYo),e(ur,ft),g(Y0,ft,null),e(ft,PYo),e(ft,qhe),e(qhe,$Yo),e(ft,IYo),e(ft,cc),e(cc,qYo),e(cc,Nhe),e(Nhe,NYo),e(cc,jYo),e(cc,hO),e(hO,DYo),e(cc,GYo),e(ft,OYo),e(ft,jhe),e(jhe,VYo),e(ft,XYo),g(K0,ft,null),e(ur,zYo),e(ur,ao),g(Z0,ao,null),e(ao,QYo),e(ao,Dhe),e(Dhe,WYo),e(ao,HYo),e(ao,hn),e(hn,UYo),e(hn,Ghe),e(Ghe,JYo),e(hn,YYo),e(hn,Ohe),e(Ohe,KYo),e(hn,ZYo),e(hn,Vhe),e(Vhe,eKo),e(hn,oKo),e(ao,rKo),e(ao,pn),e(pn,MT),e(MT,Xhe),e(Xhe,tKo),e(MT,aKo),e(MT,pO),e(pO,nKo),e(MT,sKo),e(pn,lKo),e(pn,ET),e(ET,zhe),e(zhe,iKo),e(ET,dKo),e(ET,_O),e(_O,cKo),e(ET,fKo),e(pn,mKo),e(pn,CT),e(CT,Qhe),e(Qhe,gKo),e(CT,hKo),e(CT,uO),e(uO,pKo),e(CT,_Ko),e(pn,uKo),e(pn,wT),e(wT,Whe),e(Whe,bKo),e(wT,vKo),e(wT,bO),e(bO,FKo),e(wT,TKo),e(ao,MKo),e(ao,AT),e(AT,EKo),e(AT,Hhe),e(Hhe,CKo),e(AT,wKo),e(AT,Uhe),e(Uhe,AKo),e(ao,yKo),e(ao,Jhe),e(Jhe,LKo),e(ao,xKo),g(ey,ao,null),b(c,$Be,u),b(c,fc,u),e(fc,yT),e(yT,Yhe),g(oy,Yhe,null),e(fc,kKo),e(fc,Khe),e(Khe,SKo),b(c,IBe,u),b(c,br,u),g(ry,br,null),e(br,RKo),e(br,mc),e(mc,BKo),e(mc,vO),e(vO,PKo),e(mc,$Ko),e(mc,FO),e(FO,IKo),e(mc,qKo),e(br,NKo),e(br,ty),e(ty,jKo),e(ty,Zhe),e(Zhe,DKo),e(ty,GKo),e(br,OKo),e(br,mt),g(ay,mt,null),e(mt,VKo),e(mt,epe),e(epe,XKo),e(mt,zKo),e(mt,gc),e(gc,QKo),e(gc,ope),e(ope,WKo),e(gc,HKo),e(gc,TO),e(TO,UKo),e(gc,JKo),e(mt,YKo),e(mt,rpe),e(rpe,KKo),e(mt,ZKo),g(ny,mt,null),e(br,eZo),e(br,no),g(sy,no,null),e(no,oZo),e(no,tpe),e(tpe,rZo),e(no,tZo),e(no,_n),e(_n,aZo),e(_n,ape),e(ape,nZo),e(_n,sZo),e(_n,npe),e(npe,lZo),e(_n,iZo),e(_n,spe),e(spe,dZo),e(_n,cZo),e(no,fZo),e(no,lpe),e(lpe,LT),e(LT,ipe),e(ipe,mZo),e(LT,gZo),e(LT,MO),e(MO,hZo),e(LT,pZo),e(no,_Zo),e(no,xT),e(xT,uZo),e(xT,dpe),e(dpe,bZo),e(xT,vZo),e(xT,cpe),e(cpe,FZo),e(no,TZo),e(no,fpe),e(fpe,MZo),e(no,EZo),g(ly,no,null),b(c,qBe,u),b(c,hc,u),e(hc,kT),e(kT,mpe),g(iy,mpe,null),e(hc,CZo),e(hc,gpe),e(gpe,wZo),b(c,NBe,u),b(c,vr,u),g(dy,vr,null),e(vr,AZo),e(vr,pc),e(pc,yZo),e(pc,EO),e(EO,LZo),e(pc,xZo),e(pc,CO),e(CO,kZo),e(pc,SZo),e(vr,RZo),e(vr,cy),e(cy,BZo),e(cy,hpe),e(hpe,PZo),e(cy,$Zo),e(vr,IZo),e(vr,gt),g(fy,gt,null),e(gt,qZo),e(gt,ppe),e(ppe,NZo),e(gt,jZo),e(gt,_c),e(_c,DZo),e(_c,_pe),e(_pe,GZo),e(_c,OZo),e(_c,wO),e(wO,VZo),e(_c,XZo),e(gt,zZo),e(gt,upe),e(upe,QZo),e(gt,WZo),g(my,gt,null),e(vr,HZo),e(vr,ho),g(gy,ho,null),e(ho,UZo),e(ho,bpe),e(bpe,JZo),e(ho,YZo),e(ho,un),e(un,KZo),e(un,vpe),e(vpe,ZZo),e(un,eer),e(un,Fpe),e(Fpe,oer),e(un,rer),e(un,Tpe),e(Tpe,ter),e(un,aer),e(ho,ner),e(ho,x),e(x,ST),e(ST,Mpe),e(Mpe,ser),e(ST,ler),e(ST,AO),e(AO,ier),e(ST,der),e(x,cer),e(x,RT),e(RT,Epe),e(Epe,fer),e(RT,mer),e(RT,yO),e(yO,ger),e(RT,her),e(x,per),e(x,BT),e(BT,Cpe),e(Cpe,_er),e(BT,uer),e(BT,LO),e(LO,ber),e(BT,ver),e(x,Fer),e(x,PT),e(PT,wpe),e(wpe,Ter),e(PT,Mer),e(PT,xO),e(xO,Eer),e(PT,Cer),e(x,wer),e(x,$T),e($T,Ape),e(Ape,Aer),e($T,yer),e($T,kO),e(kO,Ler),e($T,xer),e(x,ker),e(x,IT),e(IT,ype),e(ype,Ser),e(IT,Rer),e(IT,SO),e(SO,Ber),e(IT,Per),e(x,$er),e(x,qT),e(qT,Lpe),e(Lpe,Ier),e(qT,qer),e(qT,RO),e(RO,Ner),e(qT,jer),e(x,Der),e(x,NT),e(NT,xpe),e(xpe,Ger),e(NT,Oer),e(NT,BO),e(BO,Ver),e(NT,Xer),e(x,zer),e(x,jT),e(jT,kpe),e(kpe,Qer),e(jT,Wer),e(jT,PO),e(PO,Her),e(jT,Uer),e(x,Jer),e(x,DT),e(DT,Spe),e(Spe,Yer),e(DT,Ker),e(DT,$O),e($O,Zer),e(DT,eor),e(x,oor),e(x,GT),e(GT,Rpe),e(Rpe,ror),e(GT,tor),e(GT,IO),e(IO,aor),e(GT,nor),e(x,sor),e(x,OT),e(OT,Bpe),e(Bpe,lor),e(OT,ior),e(OT,qO),e(qO,dor),e(OT,cor),e(x,mor),e(x,VT),e(VT,Ppe),e(Ppe,gor),e(VT,hor),e(VT,NO),e(NO,por),e(VT,_or),e(x,uor),e(x,XT),e(XT,$pe),e($pe,bor),e(XT,vor),e(XT,jO),e(jO,For),e(XT,Tor),e(x,Mor),e(x,zT),e(zT,Ipe),e(Ipe,Eor),e(zT,Cor),e(zT,DO),e(DO,wor),e(zT,Aor),e(x,yor),e(x,QT),e(QT,qpe),e(qpe,Lor),e(QT,xor),e(QT,GO),e(GO,kor),e(QT,Sor),e(x,Ror),e(x,Vs),e(Vs,Npe),e(Npe,Bor),e(Vs,Por),e(Vs,OO),e(OO,$or),e(Vs,Ior),e(Vs,VO),e(VO,qor),e(Vs,Nor),e(x,jor),e(x,WT),e(WT,jpe),e(jpe,Dor),e(WT,Gor),e(WT,XO),e(XO,Oor),e(WT,Vor),e(x,Xor),e(x,HT),e(HT,Dpe),e(Dpe,zor),e(HT,Qor),e(HT,zO),e(zO,Wor),e(HT,Hor),e(x,Uor),e(x,UT),e(UT,Gpe),e(Gpe,Jor),e(UT,Yor),e(UT,QO),e(QO,Kor),e(UT,Zor),e(x,err),e(x,JT),e(JT,Ope),e(Ope,orr),e(JT,rrr),e(JT,WO),e(WO,trr),e(JT,arr),e(x,nrr),e(x,YT),e(YT,Vpe),e(Vpe,srr),e(YT,lrr),e(YT,HO),e(HO,irr),e(YT,drr),e(x,crr),e(x,KT),e(KT,Xpe),e(Xpe,frr),e(KT,mrr),e(KT,UO),e(UO,grr),e(KT,hrr),e(x,prr),e(x,ZT),e(ZT,zpe),e(zpe,_rr),e(ZT,urr),e(ZT,JO),e(JO,brr),e(ZT,vrr),e(x,Frr),e(x,eM),e(eM,Qpe),e(Qpe,Trr),e(eM,Mrr),e(eM,YO),e(YO,Err),e(eM,Crr),e(x,wrr),e(x,oM),e(oM,Wpe),e(Wpe,Arr),e(oM,yrr),e(oM,KO),e(KO,Lrr),e(oM,xrr),e(x,krr),e(x,rM),e(rM,Hpe),e(Hpe,Srr),e(rM,Rrr),e(rM,ZO),e(ZO,Brr),e(rM,Prr),e(x,$rr),e(x,tM),e(tM,Upe),e(Upe,Irr),e(tM,qrr),e(tM,eV),e(eV,Nrr),e(tM,jrr),e(x,Drr),e(x,aM),e(aM,Jpe),e(Jpe,Grr),e(aM,Orr),e(aM,oV),e(oV,Vrr),e(aM,Xrr),e(x,zrr),e(x,nM),e(nM,Ype),e(Ype,Qrr),e(nM,Wrr),e(nM,rV),e(rV,Hrr),e(nM,Urr),e(x,Jrr),e(x,sM),e(sM,Kpe),e(Kpe,Yrr),e(sM,Krr),e(sM,tV),e(tV,Zrr),e(sM,etr),e(x,otr),e(x,lM),e(lM,Zpe),e(Zpe,rtr),e(lM,ttr),e(lM,aV),e(aV,atr),e(lM,ntr),e(x,str),e(x,iM),e(iM,e_e),e(e_e,ltr),e(iM,itr),e(iM,nV),e(nV,dtr),e(iM,ctr),e(x,ftr),e(x,dM),e(dM,o_e),e(o_e,mtr),e(dM,gtr),e(dM,sV),e(sV,htr),e(dM,ptr),e(x,_tr),e(x,cM),e(cM,r_e),e(r_e,utr),e(cM,btr),e(cM,lV),e(lV,vtr),e(cM,Ftr),e(x,Ttr),e(x,fM),e(fM,t_e),e(t_e,Mtr),e(fM,Etr),e(fM,iV),e(iV,Ctr),e(fM,wtr),e(x,Atr),e(x,mM),e(mM,a_e),e(a_e,ytr),e(mM,Ltr),e(mM,dV),e(dV,xtr),e(mM,ktr),e(x,Str),e(x,gM),e(gM,n_e),e(n_e,Rtr),e(gM,Btr),e(gM,cV),e(cV,Ptr),e(gM,$tr),e(x,Itr),e(x,hM),e(hM,s_e),e(s_e,qtr),e(hM,Ntr),e(hM,fV),e(fV,jtr),e(hM,Dtr),e(x,Gtr),e(x,pM),e(pM,l_e),e(l_e,Otr),e(pM,Vtr),e(pM,mV),e(mV,Xtr),e(pM,ztr),e(x,Qtr),e(x,_M),e(_M,i_e),e(i_e,Wtr),e(_M,Htr),e(_M,gV),e(gV,Utr),e(_M,Jtr),e(x,Ytr),e(x,uM),e(uM,d_e),e(d_e,Ktr),e(uM,Ztr),e(uM,hV),e(hV,ear),e(uM,oar),e(x,rar),e(x,bM),e(bM,c_e),e(c_e,tar),e(bM,aar),e(bM,pV),e(pV,nar),e(bM,sar),e(x,lar),e(x,vM),e(vM,f_e),e(f_e,iar),e(vM,dar),e(vM,_V),e(_V,car),e(vM,far),e(ho,mar),e(ho,m_e),e(m_e,gar),e(ho,har),g(hy,ho,null),b(c,jBe,u),b(c,uc,u),e(uc,FM),e(FM,g_e),g(py,g_e,null),e(uc,par),e(uc,h_e),e(h_e,_ar),b(c,DBe,u),b(c,Fr,u),g(_y,Fr,null),e(Fr,uar),e(Fr,bc),e(bc,bar),e(bc,uV),e(uV,Far),e(bc,Tar),e(bc,bV),e(bV,Mar),e(bc,Ear),e(Fr,Car),e(Fr,uy),e(uy,war),e(uy,p_e),e(p_e,Aar),e(uy,yar),e(Fr,Lar),e(Fr,ht),g(by,ht,null),e(ht,xar),e(ht,__e),e(__e,kar),e(ht,Sar),e(ht,vc),e(vc,Rar),e(vc,u_e),e(u_e,Bar),e(vc,Par),e(vc,vV),e(vV,$ar),e(vc,Iar),e(ht,qar),e(ht,b_e),e(b_e,Nar),e(ht,jar),g(vy,ht,null),e(Fr,Dar),e(Fr,po),g(Fy,po,null),e(po,Gar),e(po,v_e),e(v_e,Oar),e(po,Var),e(po,bn),e(bn,Xar),e(bn,F_e),e(F_e,zar),e(bn,Qar),e(bn,T_e),e(T_e,War),e(bn,Har),e(bn,M_e),e(M_e,Uar),e(bn,Jar),e(po,Yar),e(po,H),e(H,TM),e(TM,E_e),e(E_e,Kar),e(TM,Zar),e(TM,FV),e(FV,enr),e(TM,onr),e(H,rnr),e(H,MM),e(MM,C_e),e(C_e,tnr),e(MM,anr),e(MM,TV),e(TV,nnr),e(MM,snr),e(H,lnr),e(H,EM),e(EM,w_e),e(w_e,inr),e(EM,dnr),e(EM,MV),e(MV,cnr),e(EM,fnr),e(H,mnr),e(H,CM),e(CM,A_e),e(A_e,gnr),e(CM,hnr),e(CM,EV),e(EV,pnr),e(CM,_nr),e(H,unr),e(H,wM),e(wM,y_e),e(y_e,bnr),e(wM,vnr),e(wM,CV),e(CV,Fnr),e(wM,Tnr),e(H,Mnr),e(H,AM),e(AM,L_e),e(L_e,Enr),e(AM,Cnr),e(AM,wV),e(wV,wnr),e(AM,Anr),e(H,ynr),e(H,yM),e(yM,x_e),e(x_e,Lnr),e(yM,xnr),e(yM,AV),e(AV,knr),e(yM,Snr),e(H,Rnr),e(H,LM),e(LM,k_e),e(k_e,Bnr),e(LM,Pnr),e(LM,yV),e(yV,$nr),e(LM,Inr),e(H,qnr),e(H,xM),e(xM,S_e),e(S_e,Nnr),e(xM,jnr),e(xM,LV),e(LV,Dnr),e(xM,Gnr),e(H,Onr),e(H,kM),e(kM,R_e),e(R_e,Vnr),e(kM,Xnr),e(kM,xV),e(xV,znr),e(kM,Qnr),e(H,Wnr),e(H,SM),e(SM,B_e),e(B_e,Hnr),e(SM,Unr),e(SM,kV),e(kV,Jnr),e(SM,Ynr),e(H,Knr),e(H,RM),e(RM,P_e),e(P_e,Znr),e(RM,esr),e(RM,SV),e(SV,osr),e(RM,rsr),e(H,tsr),e(H,BM),e(BM,$_e),e($_e,asr),e(BM,nsr),e(BM,RV),e(RV,ssr),e(BM,lsr),e(H,isr),e(H,PM),e(PM,I_e),e(I_e,dsr),e(PM,csr),e(PM,BV),e(BV,fsr),e(PM,msr),e(H,gsr),e(H,$M),e($M,q_e),e(q_e,hsr),e($M,psr),e($M,PV),e(PV,_sr),e($M,usr),e(H,bsr),e(H,IM),e(IM,N_e),e(N_e,vsr),e(IM,Fsr),e(IM,$V),e($V,Tsr),e(IM,Msr),e(H,Esr),e(H,qM),e(qM,j_e),e(j_e,Csr),e(qM,wsr),e(qM,IV),e(IV,Asr),e(qM,ysr),e(H,Lsr),e(H,NM),e(NM,D_e),e(D_e,xsr),e(NM,ksr),e(NM,qV),e(qV,Ssr),e(NM,Rsr),e(H,Bsr),e(H,jM),e(jM,G_e),e(G_e,Psr),e(jM,$sr),e(jM,NV),e(NV,Isr),e(jM,qsr),e(H,Nsr),e(H,DM),e(DM,O_e),e(O_e,jsr),e(DM,Dsr),e(DM,jV),e(jV,Gsr),e(DM,Osr),e(H,Vsr),e(H,GM),e(GM,V_e),e(V_e,Xsr),e(GM,zsr),e(GM,DV),e(DV,Qsr),e(GM,Wsr),e(H,Hsr),e(H,OM),e(OM,X_e),e(X_e,Usr),e(OM,Jsr),e(OM,GV),e(GV,Ysr),e(OM,Ksr),e(H,Zsr),e(H,VM),e(VM,z_e),e(z_e,elr),e(VM,olr),e(VM,OV),e(OV,rlr),e(VM,tlr),e(po,alr),e(po,Q_e),e(Q_e,nlr),e(po,slr),g(Ty,po,null),b(c,GBe,u),b(c,Fc,u),e(Fc,XM),e(XM,W_e),g(My,W_e,null),e(Fc,llr),e(Fc,H_e),e(H_e,ilr),b(c,OBe,u),b(c,Tr,u),g(Ey,Tr,null),e(Tr,dlr),e(Tr,Tc),e(Tc,clr),e(Tc,VV),e(VV,flr),e(Tc,mlr),e(Tc,XV),e(XV,glr),e(Tc,hlr),e(Tr,plr),e(Tr,Cy),e(Cy,_lr),e(Cy,U_e),e(U_e,ulr),e(Cy,blr),e(Tr,vlr),e(Tr,pt),g(wy,pt,null),e(pt,Flr),e(pt,J_e),e(J_e,Tlr),e(pt,Mlr),e(pt,Mc),e(Mc,Elr),e(Mc,Y_e),e(Y_e,Clr),e(Mc,wlr),e(Mc,zV),e(zV,Alr),e(Mc,ylr),e(pt,Llr),e(pt,K_e),e(K_e,xlr),e(pt,klr),g(Ay,pt,null),e(Tr,Slr),e(Tr,_o),g(yy,_o,null),e(_o,Rlr),e(_o,Z_e),e(Z_e,Blr),e(_o,Plr),e(_o,vn),e(vn,$lr),e(vn,eue),e(eue,Ilr),e(vn,qlr),e(vn,oue),e(oue,Nlr),e(vn,jlr),e(vn,rue),e(rue,Dlr),e(vn,Glr),e(_o,Olr),e(_o,fe),e(fe,zM),e(zM,tue),e(tue,Vlr),e(zM,Xlr),e(zM,QV),e(QV,zlr),e(zM,Qlr),e(fe,Wlr),e(fe,QM),e(QM,aue),e(aue,Hlr),e(QM,Ulr),e(QM,WV),e(WV,Jlr),e(QM,Ylr),e(fe,Klr),e(fe,WM),e(WM,nue),e(nue,Zlr),e(WM,eir),e(WM,HV),e(HV,oir),e(WM,rir),e(fe,tir),e(fe,HM),e(HM,sue),e(sue,air),e(HM,nir),e(HM,UV),e(UV,sir),e(HM,lir),e(fe,iir),e(fe,UM),e(UM,lue),e(lue,dir),e(UM,cir),e(UM,JV),e(JV,fir),e(UM,mir),e(fe,gir),e(fe,JM),e(JM,iue),e(iue,hir),e(JM,pir),e(JM,YV),e(YV,_ir),e(JM,uir),e(fe,bir),e(fe,YM),e(YM,due),e(due,vir),e(YM,Fir),e(YM,KV),e(KV,Tir),e(YM,Mir),e(fe,Eir),e(fe,KM),e(KM,cue),e(cue,Cir),e(KM,wir),e(KM,ZV),e(ZV,Air),e(KM,yir),e(fe,Lir),e(fe,ZM),e(ZM,fue),e(fue,xir),e(ZM,kir),e(ZM,eX),e(eX,Sir),e(ZM,Rir),e(fe,Bir),e(fe,e4),e(e4,mue),e(mue,Pir),e(e4,$ir),e(e4,oX),e(oX,Iir),e(e4,qir),e(fe,Nir),e(fe,o4),e(o4,gue),e(gue,jir),e(o4,Dir),e(o4,rX),e(rX,Gir),e(o4,Oir),e(fe,Vir),e(fe,r4),e(r4,hue),e(hue,Xir),e(r4,zir),e(r4,tX),e(tX,Qir),e(r4,Wir),e(_o,Hir),e(_o,pue),e(pue,Uir),e(_o,Jir),g(Ly,_o,null),b(c,VBe,u),b(c,Ec,u),e(Ec,t4),e(t4,_ue),g(xy,_ue,null),e(Ec,Yir),e(Ec,uue),e(uue,Kir),b(c,XBe,u),b(c,Mr,u),g(ky,Mr,null),e(Mr,Zir),e(Mr,Cc),e(Cc,edr),e(Cc,aX),e(aX,odr),e(Cc,rdr),e(Cc,nX),e(nX,tdr),e(Cc,adr),e(Mr,ndr),e(Mr,Sy),e(Sy,sdr),e(Sy,bue),e(bue,ldr),e(Sy,idr),e(Mr,ddr),e(Mr,_t),g(Ry,_t,null),e(_t,cdr),e(_t,vue),e(vue,fdr),e(_t,mdr),e(_t,wc),e(wc,gdr),e(wc,Fue),e(Fue,hdr),e(wc,pdr),e(wc,sX),e(sX,_dr),e(wc,udr),e(_t,bdr),e(_t,Tue),e(Tue,vdr),e(_t,Fdr),g(By,_t,null),e(Mr,Tdr),e(Mr,uo),g(Py,uo,null),e(uo,Mdr),e(uo,Mue),e(Mue,Edr),e(uo,Cdr),e(uo,Fn),e(Fn,wdr),e(Fn,Eue),e(Eue,Adr),e(Fn,ydr),e(Fn,Cue),e(Cue,Ldr),e(Fn,xdr),e(Fn,wue),e(wue,kdr),e(Fn,Sdr),e(uo,Rdr),e(uo,$y),e($y,a4),e(a4,Aue),e(Aue,Bdr),e(a4,Pdr),e(a4,lX),e(lX,$dr),e(a4,Idr),e($y,qdr),e($y,n4),e(n4,yue),e(yue,Ndr),e(n4,jdr),e(n4,iX),e(iX,Ddr),e(n4,Gdr),e(uo,Odr),e(uo,Lue),e(Lue,Vdr),e(uo,Xdr),g(Iy,uo,null),b(c,zBe,u),b(c,Ac,u),e(Ac,s4),e(s4,xue),g(qy,xue,null),e(Ac,zdr),e(Ac,kue),e(kue,Qdr),b(c,QBe,u),b(c,Er,u),g(Ny,Er,null),e(Er,Wdr),e(Er,yc),e(yc,Hdr),e(yc,dX),e(dX,Udr),e(yc,Jdr),e(yc,cX),e(cX,Ydr),e(yc,Kdr),e(Er,Zdr),e(Er,jy),e(jy,ecr),e(jy,Sue),e(Sue,ocr),e(jy,rcr),e(Er,tcr),e(Er,ut),g(Dy,ut,null),e(ut,acr),e(ut,Rue),e(Rue,ncr),e(ut,scr),e(ut,Lc),e(Lc,lcr),e(Lc,Bue),e(Bue,icr),e(Lc,dcr),e(Lc,fX),e(fX,ccr),e(Lc,fcr),e(ut,mcr),e(ut,Pue),e(Pue,gcr),e(ut,hcr),g(Gy,ut,null),e(Er,pcr),e(Er,bo),g(Oy,bo,null),e(bo,_cr),e(bo,$ue),e($ue,ucr),e(bo,bcr),e(bo,Tn),e(Tn,vcr),e(Tn,Iue),e(Iue,Fcr),e(Tn,Tcr),e(Tn,que),e(que,Mcr),e(Tn,Ecr),e(Tn,Nue),e(Nue,Ccr),e(Tn,wcr),e(bo,Acr),e(bo,J),e(J,l4),e(l4,jue),e(jue,ycr),e(l4,Lcr),e(l4,mX),e(mX,xcr),e(l4,kcr),e(J,Scr),e(J,i4),e(i4,Due),e(Due,Rcr),e(i4,Bcr),e(i4,gX),e(gX,Pcr),e(i4,$cr),e(J,Icr),e(J,d4),e(d4,Gue),e(Gue,qcr),e(d4,Ncr),e(d4,hX),e(hX,jcr),e(d4,Dcr),e(J,Gcr),e(J,c4),e(c4,Oue),e(Oue,Ocr),e(c4,Vcr),e(c4,pX),e(pX,Xcr),e(c4,zcr),e(J,Qcr),e(J,f4),e(f4,Vue),e(Vue,Wcr),e(f4,Hcr),e(f4,_X),e(_X,Ucr),e(f4,Jcr),e(J,Ycr),e(J,m4),e(m4,Xue),e(Xue,Kcr),e(m4,Zcr),e(m4,uX),e(uX,efr),e(m4,ofr),e(J,rfr),e(J,g4),e(g4,zue),e(zue,tfr),e(g4,afr),e(g4,bX),e(bX,nfr),e(g4,sfr),e(J,lfr),e(J,h4),e(h4,Que),e(Que,ifr),e(h4,dfr),e(h4,vX),e(vX,cfr),e(h4,ffr),e(J,mfr),e(J,p4),e(p4,Wue),e(Wue,gfr),e(p4,hfr),e(p4,FX),e(FX,pfr),e(p4,_fr),e(J,ufr),e(J,_4),e(_4,Hue),e(Hue,bfr),e(_4,vfr),e(_4,TX),e(TX,Ffr),e(_4,Tfr),e(J,Mfr),e(J,u4),e(u4,Uue),e(Uue,Efr),e(u4,Cfr),e(u4,MX),e(MX,wfr),e(u4,Afr),e(J,yfr),e(J,b4),e(b4,Jue),e(Jue,Lfr),e(b4,xfr),e(b4,EX),e(EX,kfr),e(b4,Sfr),e(J,Rfr),e(J,v4),e(v4,Yue),e(Yue,Bfr),e(v4,Pfr),e(v4,CX),e(CX,$fr),e(v4,Ifr),e(J,qfr),e(J,F4),e(F4,Kue),e(Kue,Nfr),e(F4,jfr),e(F4,wX),e(wX,Dfr),e(F4,Gfr),e(J,Ofr),e(J,T4),e(T4,Zue),e(Zue,Vfr),e(T4,Xfr),e(T4,AX),e(AX,zfr),e(T4,Qfr),e(J,Wfr),e(J,M4),e(M4,e1e),e(e1e,Hfr),e(M4,Ufr),e(M4,yX),e(yX,Jfr),e(M4,Yfr),e(J,Kfr),e(J,E4),e(E4,o1e),e(o1e,Zfr),e(E4,emr),e(E4,LX),e(LX,omr),e(E4,rmr),e(J,tmr),e(J,C4),e(C4,r1e),e(r1e,amr),e(C4,nmr),e(C4,xX),e(xX,smr),e(C4,lmr),e(J,imr),e(J,w4),e(w4,t1e),e(t1e,dmr),e(w4,cmr),e(w4,kX),e(kX,fmr),e(w4,mmr),e(J,gmr),e(J,A4),e(A4,a1e),e(a1e,hmr),e(A4,pmr),e(A4,SX),e(SX,_mr),e(A4,umr),e(bo,bmr),e(bo,n1e),e(n1e,vmr),e(bo,Fmr),g(Vy,bo,null),b(c,WBe,u),b(c,xc,u),e(xc,y4),e(y4,s1e),g(Xy,s1e,null),e(xc,Tmr),e(xc,l1e),e(l1e,Mmr),b(c,HBe,u),b(c,Cr,u),g(zy,Cr,null),e(Cr,Emr),e(Cr,kc),e(kc,Cmr),e(kc,RX),e(RX,wmr),e(kc,Amr),e(kc,BX),e(BX,ymr),e(kc,Lmr),e(Cr,xmr),e(Cr,Qy),e(Qy,kmr),e(Qy,i1e),e(i1e,Smr),e(Qy,Rmr),e(Cr,Bmr),e(Cr,bt),g(Wy,bt,null),e(bt,Pmr),e(bt,d1e),e(d1e,$mr),e(bt,Imr),e(bt,Sc),e(Sc,qmr),e(Sc,c1e),e(c1e,Nmr),e(Sc,jmr),e(Sc,PX),e(PX,Dmr),e(Sc,Gmr),e(bt,Omr),e(bt,f1e),e(f1e,Vmr),e(bt,Xmr),g(Hy,bt,null),e(Cr,zmr),e(Cr,vo),g(Uy,vo,null),e(vo,Qmr),e(vo,m1e),e(m1e,Wmr),e(vo,Hmr),e(vo,Mn),e(Mn,Umr),e(Mn,g1e),e(g1e,Jmr),e(Mn,Ymr),e(Mn,h1e),e(h1e,Kmr),e(Mn,Zmr),e(Mn,p1e),e(p1e,egr),e(Mn,ogr),e(vo,rgr),e(vo,be),e(be,L4),e(L4,_1e),e(_1e,tgr),e(L4,agr),e(L4,$X),e($X,ngr),e(L4,sgr),e(be,lgr),e(be,x4),e(x4,u1e),e(u1e,igr),e(x4,dgr),e(x4,IX),e(IX,cgr),e(x4,fgr),e(be,mgr),e(be,k4),e(k4,b1e),e(b1e,ggr),e(k4,hgr),e(k4,qX),e(qX,pgr),e(k4,_gr),e(be,ugr),e(be,S4),e(S4,v1e),e(v1e,bgr),e(S4,vgr),e(S4,NX),e(NX,Fgr),e(S4,Tgr),e(be,Mgr),e(be,R4),e(R4,F1e),e(F1e,Egr),e(R4,Cgr),e(R4,jX),e(jX,wgr),e(R4,Agr),e(be,ygr),e(be,B4),e(B4,T1e),e(T1e,Lgr),e(B4,xgr),e(B4,DX),e(DX,kgr),e(B4,Sgr),e(be,Rgr),e(be,P4),e(P4,M1e),e(M1e,Bgr),e(P4,Pgr),e(P4,GX),e(GX,$gr),e(P4,Igr),e(be,qgr),e(be,$4),e($4,E1e),e(E1e,Ngr),e($4,jgr),e($4,OX),e(OX,Dgr),e($4,Ggr),e(be,Ogr),e(be,I4),e(I4,C1e),e(C1e,Vgr),e(I4,Xgr),e(I4,VX),e(VX,zgr),e(I4,Qgr),e(be,Wgr),e(be,q4),e(q4,w1e),e(w1e,Hgr),e(q4,Ugr),e(q4,XX),e(XX,Jgr),e(q4,Ygr),e(vo,Kgr),e(vo,A1e),e(A1e,Zgr),e(vo,ehr),g(Jy,vo,null),b(c,UBe,u),b(c,Rc,u),e(Rc,N4),e(N4,y1e),g(Yy,y1e,null),e(Rc,ohr),e(Rc,L1e),e(L1e,rhr),b(c,JBe,u),b(c,wr,u),g(Ky,wr,null),e(wr,thr),e(wr,Bc),e(Bc,ahr),e(Bc,zX),e(zX,nhr),e(Bc,shr),e(Bc,QX),e(QX,lhr),e(Bc,ihr),e(wr,dhr),e(wr,Zy),e(Zy,chr),e(Zy,x1e),e(x1e,fhr),e(Zy,mhr),e(wr,ghr),e(wr,vt),g(e8,vt,null),e(vt,hhr),e(vt,k1e),e(k1e,phr),e(vt,_hr),e(vt,Pc),e(Pc,uhr),e(Pc,S1e),e(S1e,bhr),e(Pc,vhr),e(Pc,WX),e(WX,Fhr),e(Pc,Thr),e(vt,Mhr),e(vt,R1e),e(R1e,Ehr),e(vt,Chr),g(o8,vt,null),e(wr,whr),e(wr,Fo),g(r8,Fo,null),e(Fo,Ahr),e(Fo,B1e),e(B1e,yhr),e(Fo,Lhr),e(Fo,En),e(En,xhr),e(En,P1e),e(P1e,khr),e(En,Shr),e(En,$1e),e($1e,Rhr),e(En,Bhr),e(En,I1e),e(I1e,Phr),e(En,$hr),e(Fo,Ihr),e(Fo,V),e(V,j4),e(j4,q1e),e(q1e,qhr),e(j4,Nhr),e(j4,HX),e(HX,jhr),e(j4,Dhr),e(V,Ghr),e(V,D4),e(D4,N1e),e(N1e,Ohr),e(D4,Vhr),e(D4,UX),e(UX,Xhr),e(D4,zhr),e(V,Qhr),e(V,G4),e(G4,j1e),e(j1e,Whr),e(G4,Hhr),e(G4,JX),e(JX,Uhr),e(G4,Jhr),e(V,Yhr),e(V,O4),e(O4,D1e),e(D1e,Khr),e(O4,Zhr),e(O4,YX),e(YX,epr),e(O4,opr),e(V,rpr),e(V,V4),e(V4,G1e),e(G1e,tpr),e(V4,apr),e(V4,KX),e(KX,npr),e(V4,spr),e(V,lpr),e(V,X4),e(X4,O1e),e(O1e,ipr),e(X4,dpr),e(X4,ZX),e(ZX,cpr),e(X4,fpr),e(V,mpr),e(V,z4),e(z4,V1e),e(V1e,gpr),e(z4,hpr),e(z4,ez),e(ez,ppr),e(z4,_pr),e(V,upr),e(V,Q4),e(Q4,X1e),e(X1e,bpr),e(Q4,vpr),e(Q4,oz),e(oz,Fpr),e(Q4,Tpr),e(V,Mpr),e(V,W4),e(W4,z1e),e(z1e,Epr),e(W4,Cpr),e(W4,rz),e(rz,wpr),e(W4,Apr),e(V,ypr),e(V,H4),e(H4,Q1e),e(Q1e,Lpr),e(H4,xpr),e(H4,tz),e(tz,kpr),e(H4,Spr),e(V,Rpr),e(V,U4),e(U4,W1e),e(W1e,Bpr),e(U4,Ppr),e(U4,az),e(az,$pr),e(U4,Ipr),e(V,qpr),e(V,J4),e(J4,H1e),e(H1e,Npr),e(J4,jpr),e(J4,nz),e(nz,Dpr),e(J4,Gpr),e(V,Opr),e(V,Y4),e(Y4,U1e),e(U1e,Vpr),e(Y4,Xpr),e(Y4,sz),e(sz,zpr),e(Y4,Qpr),e(V,Wpr),e(V,K4),e(K4,J1e),e(J1e,Hpr),e(K4,Upr),e(K4,lz),e(lz,Jpr),e(K4,Ypr),e(V,Kpr),e(V,Z4),e(Z4,Y1e),e(Y1e,Zpr),e(Z4,e_r),e(Z4,iz),e(iz,o_r),e(Z4,r_r),e(V,t_r),e(V,eE),e(eE,K1e),e(K1e,a_r),e(eE,n_r),e(eE,dz),e(dz,s_r),e(eE,l_r),e(V,i_r),e(V,oE),e(oE,Z1e),e(Z1e,d_r),e(oE,c_r),e(oE,cz),e(cz,f_r),e(oE,m_r),e(V,g_r),e(V,rE),e(rE,ebe),e(ebe,h_r),e(rE,p_r),e(rE,fz),e(fz,__r),e(rE,u_r),e(V,b_r),e(V,tE),e(tE,obe),e(obe,v_r),e(tE,F_r),e(tE,mz),e(mz,T_r),e(tE,M_r),e(V,E_r),e(V,aE),e(aE,rbe),e(rbe,C_r),e(aE,w_r),e(aE,gz),e(gz,A_r),e(aE,y_r),e(V,L_r),e(V,nE),e(nE,tbe),e(tbe,x_r),e(nE,k_r),e(nE,hz),e(hz,S_r),e(nE,R_r),e(V,B_r),e(V,sE),e(sE,abe),e(abe,P_r),e(sE,$_r),e(sE,pz),e(pz,I_r),e(sE,q_r),e(V,N_r),e(V,lE),e(lE,nbe),e(nbe,j_r),e(lE,D_r),e(lE,_z),e(_z,G_r),e(lE,O_r),e(V,V_r),e(V,iE),e(iE,sbe),e(sbe,X_r),e(iE,z_r),e(iE,uz),e(uz,Q_r),e(iE,W_r),e(V,H_r),e(V,dE),e(dE,lbe),e(lbe,U_r),e(dE,J_r),e(dE,bz),e(bz,Y_r),e(dE,K_r),e(V,Z_r),e(V,cE),e(cE,ibe),e(ibe,eur),e(cE,our),e(cE,vz),e(vz,rur),e(cE,tur),e(Fo,aur),e(Fo,dbe),e(dbe,nur),e(Fo,sur),g(t8,Fo,null),b(c,YBe,u),b(c,$c,u),e($c,fE),e(fE,cbe),g(a8,cbe,null),e($c,lur),e($c,fbe),e(fbe,iur),b(c,KBe,u),b(c,Ar,u),g(n8,Ar,null),e(Ar,dur),e(Ar,Ic),e(Ic,cur),e(Ic,Fz),e(Fz,fur),e(Ic,mur),e(Ic,Tz),e(Tz,gur),e(Ic,hur),e(Ar,pur),e(Ar,s8),e(s8,_ur),e(s8,mbe),e(mbe,uur),e(s8,bur),e(Ar,vur),e(Ar,Ft),g(l8,Ft,null),e(Ft,Fur),e(Ft,gbe),e(gbe,Tur),e(Ft,Mur),e(Ft,qc),e(qc,Eur),e(qc,hbe),e(hbe,Cur),e(qc,wur),e(qc,Mz),e(Mz,Aur),e(qc,yur),e(Ft,Lur),e(Ft,pbe),e(pbe,xur),e(Ft,kur),g(i8,Ft,null),e(Ar,Sur),e(Ar,To),g(d8,To,null),e(To,Rur),e(To,_be),e(_be,Bur),e(To,Pur),e(To,Cn),e(Cn,$ur),e(Cn,ube),e(ube,Iur),e(Cn,qur),e(Cn,bbe),e(bbe,Nur),e(Cn,jur),e(Cn,vbe),e(vbe,Dur),e(Cn,Gur),e(To,Our),e(To,se),e(se,mE),e(mE,Fbe),e(Fbe,Vur),e(mE,Xur),e(mE,Ez),e(Ez,zur),e(mE,Qur),e(se,Wur),e(se,gE),e(gE,Tbe),e(Tbe,Hur),e(gE,Uur),e(gE,Cz),e(Cz,Jur),e(gE,Yur),e(se,Kur),e(se,hE),e(hE,Mbe),e(Mbe,Zur),e(hE,e1r),e(hE,wz),e(wz,o1r),e(hE,r1r),e(se,t1r),e(se,pE),e(pE,Ebe),e(Ebe,a1r),e(pE,n1r),e(pE,Az),e(Az,s1r),e(pE,l1r),e(se,i1r),e(se,_E),e(_E,Cbe),e(Cbe,d1r),e(_E,c1r),e(_E,yz),e(yz,f1r),e(_E,m1r),e(se,g1r),e(se,uE),e(uE,wbe),e(wbe,h1r),e(uE,p1r),e(uE,Lz),e(Lz,_1r),e(uE,u1r),e(se,b1r),e(se,bE),e(bE,Abe),e(Abe,v1r),e(bE,F1r),e(bE,xz),e(xz,T1r),e(bE,M1r),e(se,E1r),e(se,vE),e(vE,ybe),e(ybe,C1r),e(vE,w1r),e(vE,kz),e(kz,A1r),e(vE,y1r),e(se,L1r),e(se,FE),e(FE,Lbe),e(Lbe,x1r),e(FE,k1r),e(FE,Sz),e(Sz,S1r),e(FE,R1r),e(se,B1r),e(se,TE),e(TE,xbe),e(xbe,P1r),e(TE,$1r),e(TE,Rz),e(Rz,I1r),e(TE,q1r),e(se,N1r),e(se,ME),e(ME,kbe),e(kbe,j1r),e(ME,D1r),e(ME,Bz),e(Bz,G1r),e(ME,O1r),e(se,V1r),e(se,EE),e(EE,Sbe),e(Sbe,X1r),e(EE,z1r),e(EE,Pz),e(Pz,Q1r),e(EE,W1r),e(se,H1r),e(se,CE),e(CE,Rbe),e(Rbe,U1r),e(CE,J1r),e(CE,$z),e($z,Y1r),e(CE,K1r),e(se,Z1r),e(se,wE),e(wE,Bbe),e(Bbe,ebr),e(wE,obr),e(wE,Iz),e(Iz,rbr),e(wE,tbr),e(se,abr),e(se,AE),e(AE,Pbe),e(Pbe,nbr),e(AE,sbr),e(AE,qz),e(qz,lbr),e(AE,ibr),e(se,dbr),e(se,yE),e(yE,$be),e($be,cbr),e(yE,fbr),e(yE,Nz),e(Nz,mbr),e(yE,gbr),e(se,hbr),e(se,LE),e(LE,Ibe),e(Ibe,pbr),e(LE,_br),e(LE,jz),e(jz,ubr),e(LE,bbr),e(To,vbr),e(To,qbe),e(qbe,Fbr),e(To,Tbr),g(c8,To,null),b(c,ZBe,u),b(c,Nc,u),e(Nc,xE),e(xE,Nbe),g(f8,Nbe,null),e(Nc,Mbr),e(Nc,jbe),e(jbe,Ebr),b(c,ePe,u),b(c,yr,u),g(m8,yr,null),e(yr,Cbr),e(yr,jc),e(jc,wbr),e(jc,Dz),e(Dz,Abr),e(jc,ybr),e(jc,Gz),e(Gz,Lbr),e(jc,xbr),e(yr,kbr),e(yr,g8),e(g8,Sbr),e(g8,Dbe),e(Dbe,Rbr),e(g8,Bbr),e(yr,Pbr),e(yr,Tt),g(h8,Tt,null),e(Tt,$br),e(Tt,Gbe),e(Gbe,Ibr),e(Tt,qbr),e(Tt,Dc),e(Dc,Nbr),e(Dc,Obe),e(Obe,jbr),e(Dc,Dbr),e(Dc,Oz),e(Oz,Gbr),e(Dc,Obr),e(Tt,Vbr),e(Tt,Vbe),e(Vbe,Xbr),e(Tt,zbr),g(p8,Tt,null),e(yr,Qbr),e(yr,Mo),g(_8,Mo,null),e(Mo,Wbr),e(Mo,Xbe),e(Xbe,Hbr),e(Mo,Ubr),e(Mo,wn),e(wn,Jbr),e(wn,zbe),e(zbe,Ybr),e(wn,Kbr),e(wn,Qbe),e(Qbe,Zbr),e(wn,e2r),e(wn,Wbe),e(Wbe,o2r),e(wn,r2r),e(Mo,t2r),e(Mo,Hbe),e(Hbe,kE),e(kE,Ube),e(Ube,a2r),e(kE,n2r),e(kE,Vz),e(Vz,s2r),e(kE,l2r),e(Mo,i2r),e(Mo,Jbe),e(Jbe,d2r),e(Mo,c2r),g(u8,Mo,null),b(c,oPe,u),b(c,Gc,u),e(Gc,SE),e(SE,Ybe),g(b8,Ybe,null),e(Gc,f2r),e(Gc,Kbe),e(Kbe,m2r),b(c,rPe,u),b(c,Lr,u),g(v8,Lr,null),e(Lr,g2r),e(Lr,Oc),e(Oc,h2r),e(Oc,Xz),e(Xz,p2r),e(Oc,_2r),e(Oc,zz),e(zz,u2r),e(Oc,b2r),e(Lr,v2r),e(Lr,F8),e(F8,F2r),e(F8,Zbe),e(Zbe,T2r),e(F8,M2r),e(Lr,E2r),e(Lr,Mt),g(T8,Mt,null),e(Mt,C2r),e(Mt,e2e),e(e2e,w2r),e(Mt,A2r),e(Mt,Vc),e(Vc,y2r),e(Vc,o2e),e(o2e,L2r),e(Vc,x2r),e(Vc,Qz),e(Qz,k2r),e(Vc,S2r),e(Mt,R2r),e(Mt,r2e),e(r2e,B2r),e(Mt,P2r),g(M8,Mt,null),e(Lr,$2r),e(Lr,Eo),g(E8,Eo,null),e(Eo,I2r),e(Eo,t2e),e(t2e,q2r),e(Eo,N2r),e(Eo,An),e(An,j2r),e(An,a2e),e(a2e,D2r),e(An,G2r),e(An,n2e),e(n2e,O2r),e(An,V2r),e(An,s2e),e(s2e,X2r),e(An,z2r),e(Eo,Q2r),e(Eo,Y),e(Y,RE),e(RE,l2e),e(l2e,W2r),e(RE,H2r),e(RE,Wz),e(Wz,U2r),e(RE,J2r),e(Y,Y2r),e(Y,BE),e(BE,i2e),e(i2e,K2r),e(BE,Z2r),e(BE,Hz),e(Hz,evr),e(BE,ovr),e(Y,rvr),e(Y,PE),e(PE,d2e),e(d2e,tvr),e(PE,avr),e(PE,Uz),e(Uz,nvr),e(PE,svr),e(Y,lvr),e(Y,$E),e($E,c2e),e(c2e,ivr),e($E,dvr),e($E,Jz),e(Jz,cvr),e($E,fvr),e(Y,mvr),e(Y,IE),e(IE,f2e),e(f2e,gvr),e(IE,hvr),e(IE,Yz),e(Yz,pvr),e(IE,_vr),e(Y,uvr),e(Y,qE),e(qE,m2e),e(m2e,bvr),e(qE,vvr),e(qE,Kz),e(Kz,Fvr),e(qE,Tvr),e(Y,Mvr),e(Y,NE),e(NE,g2e),e(g2e,Evr),e(NE,Cvr),e(NE,Zz),e(Zz,wvr),e(NE,Avr),e(Y,yvr),e(Y,jE),e(jE,h2e),e(h2e,Lvr),e(jE,xvr),e(jE,eQ),e(eQ,kvr),e(jE,Svr),e(Y,Rvr),e(Y,DE),e(DE,p2e),e(p2e,Bvr),e(DE,Pvr),e(DE,oQ),e(oQ,$vr),e(DE,Ivr),e(Y,qvr),e(Y,GE),e(GE,_2e),e(_2e,Nvr),e(GE,jvr),e(GE,rQ),e(rQ,Dvr),e(GE,Gvr),e(Y,Ovr),e(Y,OE),e(OE,u2e),e(u2e,Vvr),e(OE,Xvr),e(OE,tQ),e(tQ,zvr),e(OE,Qvr),e(Y,Wvr),e(Y,VE),e(VE,b2e),e(b2e,Hvr),e(VE,Uvr),e(VE,aQ),e(aQ,Jvr),e(VE,Yvr),e(Y,Kvr),e(Y,XE),e(XE,v2e),e(v2e,Zvr),e(XE,eFr),e(XE,nQ),e(nQ,oFr),e(XE,rFr),e(Y,tFr),e(Y,zE),e(zE,F2e),e(F2e,aFr),e(zE,nFr),e(zE,sQ),e(sQ,sFr),e(zE,lFr),e(Y,iFr),e(Y,QE),e(QE,T2e),e(T2e,dFr),e(QE,cFr),e(QE,lQ),e(lQ,fFr),e(QE,mFr),e(Y,gFr),e(Y,WE),e(WE,M2e),e(M2e,hFr),e(WE,pFr),e(WE,iQ),e(iQ,_Fr),e(WE,uFr),e(Y,bFr),e(Y,HE),e(HE,E2e),e(E2e,vFr),e(HE,FFr),e(HE,dQ),e(dQ,TFr),e(HE,MFr),e(Y,EFr),e(Y,UE),e(UE,C2e),e(C2e,CFr),e(UE,wFr),e(UE,cQ),e(cQ,AFr),e(UE,yFr),e(Y,LFr),e(Y,JE),e(JE,w2e),e(w2e,xFr),e(JE,kFr),e(JE,fQ),e(fQ,SFr),e(JE,RFr),e(Y,BFr),e(Y,YE),e(YE,A2e),e(A2e,PFr),e(YE,$Fr),e(YE,mQ),e(mQ,IFr),e(YE,qFr),e(Eo,NFr),e(Eo,y2e),e(y2e,jFr),e(Eo,DFr),g(C8,Eo,null),b(c,tPe,u),b(c,Xc,u),e(Xc,KE),e(KE,L2e),g(w8,L2e,null),e(Xc,GFr),e(Xc,x2e),e(x2e,OFr),b(c,aPe,u),b(c,xr,u),g(A8,xr,null),e(xr,VFr),e(xr,zc),e(zc,XFr),e(zc,gQ),e(gQ,zFr),e(zc,QFr),e(zc,hQ),e(hQ,WFr),e(zc,HFr),e(xr,UFr),e(xr,y8),e(y8,JFr),e(y8,k2e),e(k2e,YFr),e(y8,KFr),e(xr,ZFr),e(xr,Et),g(L8,Et,null),e(Et,eTr),e(Et,S2e),e(S2e,oTr),e(Et,rTr),e(Et,Qc),e(Qc,tTr),e(Qc,R2e),e(R2e,aTr),e(Qc,nTr),e(Qc,pQ),e(pQ,sTr),e(Qc,lTr),e(Et,iTr),e(Et,B2e),e(B2e,dTr),e(Et,cTr),g(x8,Et,null),e(xr,fTr),e(xr,Co),g(k8,Co,null),e(Co,mTr),e(Co,P2e),e(P2e,gTr),e(Co,hTr),e(Co,yn),e(yn,pTr),e(yn,$2e),e($2e,_Tr),e(yn,uTr),e(yn,I2e),e(I2e,bTr),e(yn,vTr),e(yn,q2e),e(q2e,FTr),e(yn,TTr),e(Co,MTr),e(Co,K),e(K,ZE),e(ZE,N2e),e(N2e,ETr),e(ZE,CTr),e(ZE,_Q),e(_Q,wTr),e(ZE,ATr),e(K,yTr),e(K,e5),e(e5,j2e),e(j2e,LTr),e(e5,xTr),e(e5,uQ),e(uQ,kTr),e(e5,STr),e(K,RTr),e(K,o5),e(o5,D2e),e(D2e,BTr),e(o5,PTr),e(o5,bQ),e(bQ,$Tr),e(o5,ITr),e(K,qTr),e(K,r5),e(r5,G2e),e(G2e,NTr),e(r5,jTr),e(r5,vQ),e(vQ,DTr),e(r5,GTr),e(K,OTr),e(K,t5),e(t5,O2e),e(O2e,VTr),e(t5,XTr),e(t5,FQ),e(FQ,zTr),e(t5,QTr),e(K,WTr),e(K,a5),e(a5,V2e),e(V2e,HTr),e(a5,UTr),e(a5,TQ),e(TQ,JTr),e(a5,YTr),e(K,KTr),e(K,n5),e(n5,X2e),e(X2e,ZTr),e(n5,eMr),e(n5,MQ),e(MQ,oMr),e(n5,rMr),e(K,tMr),e(K,s5),e(s5,z2e),e(z2e,aMr),e(s5,nMr),e(s5,EQ),e(EQ,sMr),e(s5,lMr),e(K,iMr),e(K,l5),e(l5,Q2e),e(Q2e,dMr),e(l5,cMr),e(l5,CQ),e(CQ,fMr),e(l5,mMr),e(K,gMr),e(K,i5),e(i5,W2e),e(W2e,hMr),e(i5,pMr),e(i5,wQ),e(wQ,_Mr),e(i5,uMr),e(K,bMr),e(K,d5),e(d5,H2e),e(H2e,vMr),e(d5,FMr),e(d5,AQ),e(AQ,TMr),e(d5,MMr),e(K,EMr),e(K,c5),e(c5,U2e),e(U2e,CMr),e(c5,wMr),e(c5,yQ),e(yQ,AMr),e(c5,yMr),e(K,LMr),e(K,f5),e(f5,J2e),e(J2e,xMr),e(f5,kMr),e(f5,LQ),e(LQ,SMr),e(f5,RMr),e(K,BMr),e(K,m5),e(m5,Y2e),e(Y2e,PMr),e(m5,$Mr),e(m5,xQ),e(xQ,IMr),e(m5,qMr),e(K,NMr),e(K,g5),e(g5,K2e),e(K2e,jMr),e(g5,DMr),e(g5,kQ),e(kQ,GMr),e(g5,OMr),e(K,VMr),e(K,h5),e(h5,Z2e),e(Z2e,XMr),e(h5,zMr),e(h5,SQ),e(SQ,QMr),e(h5,WMr),e(K,HMr),e(K,p5),e(p5,eve),e(eve,UMr),e(p5,JMr),e(p5,RQ),e(RQ,YMr),e(p5,KMr),e(K,ZMr),e(K,_5),e(_5,ove),e(ove,e4r),e(_5,o4r),e(_5,BQ),e(BQ,r4r),e(_5,t4r),e(K,a4r),e(K,u5),e(u5,rve),e(rve,n4r),e(u5,s4r),e(u5,PQ),e(PQ,l4r),e(u5,i4r),e(K,d4r),e(K,b5),e(b5,tve),e(tve,c4r),e(b5,f4r),e(b5,$Q),e($Q,m4r),e(b5,g4r),e(Co,h4r),e(Co,ave),e(ave,p4r),e(Co,_4r),g(S8,Co,null),b(c,nPe,u),b(c,Wc,u),e(Wc,v5),e(v5,nve),g(R8,nve,null),e(Wc,u4r),e(Wc,sve),e(sve,b4r),b(c,sPe,u),b(c,kr,u),g(B8,kr,null),e(kr,v4r),e(kr,Hc),e(Hc,F4r),e(Hc,IQ),e(IQ,T4r),e(Hc,M4r),e(Hc,qQ),e(qQ,E4r),e(Hc,C4r),e(kr,w4r),e(kr,P8),e(P8,A4r),e(P8,lve),e(lve,y4r),e(P8,L4r),e(kr,x4r),e(kr,Ct),g($8,Ct,null),e(Ct,k4r),e(Ct,ive),e(ive,S4r),e(Ct,R4r),e(Ct,Uc),e(Uc,B4r),e(Uc,dve),e(dve,P4r),e(Uc,$4r),e(Uc,NQ),e(NQ,I4r),e(Uc,q4r),e(Ct,N4r),e(Ct,cve),e(cve,j4r),e(Ct,D4r),g(I8,Ct,null),e(kr,G4r),e(kr,wo),g(q8,wo,null),e(wo,O4r),e(wo,fve),e(fve,V4r),e(wo,X4r),e(wo,Ln),e(Ln,z4r),e(Ln,mve),e(mve,Q4r),e(Ln,W4r),e(Ln,gve),e(gve,H4r),e(Ln,U4r),e(Ln,hve),e(hve,J4r),e(Ln,Y4r),e(wo,K4r),e(wo,pve),e(pve,F5),e(F5,_ve),e(_ve,Z4r),e(F5,eEr),e(F5,jQ),e(jQ,oEr),e(F5,rEr),e(wo,tEr),e(wo,uve),e(uve,aEr),e(wo,nEr),g(N8,wo,null),b(c,lPe,u),b(c,Jc,u),e(Jc,T5),e(T5,bve),g(j8,bve,null),e(Jc,sEr),e(Jc,vve),e(vve,lEr),b(c,iPe,u),b(c,Sr,u),g(D8,Sr,null),e(Sr,iEr),e(Sr,Yc),e(Yc,dEr),e(Yc,DQ),e(DQ,cEr),e(Yc,fEr),e(Yc,GQ),e(GQ,mEr),e(Yc,gEr),e(Sr,hEr),e(Sr,G8),e(G8,pEr),e(G8,Fve),e(Fve,_Er),e(G8,uEr),e(Sr,bEr),e(Sr,wt),g(O8,wt,null),e(wt,vEr),e(wt,Tve),e(Tve,FEr),e(wt,TEr),e(wt,Kc),e(Kc,MEr),e(Kc,Mve),e(Mve,EEr),e(Kc,CEr),e(Kc,OQ),e(OQ,wEr),e(Kc,AEr),e(wt,yEr),e(wt,Eve),e(Eve,LEr),e(wt,xEr),g(V8,wt,null),e(Sr,kEr),e(Sr,Ao),g(X8,Ao,null),e(Ao,SEr),e(Ao,Cve),e(Cve,REr),e(Ao,BEr),e(Ao,xn),e(xn,PEr),e(xn,wve),e(wve,$Er),e(xn,IEr),e(xn,Ave),e(Ave,qEr),e(xn,NEr),e(xn,yve),e(yve,jEr),e(xn,DEr),e(Ao,GEr),e(Ao,Lve),e(Lve,M5),e(M5,xve),e(xve,OEr),e(M5,VEr),e(M5,VQ),e(VQ,XEr),e(M5,zEr),e(Ao,QEr),e(Ao,kve),e(kve,WEr),e(Ao,HEr),g(z8,Ao,null),b(c,dPe,u),b(c,Zc,u),e(Zc,E5),e(E5,Sve),g(Q8,Sve,null),e(Zc,UEr),e(Zc,Rve),e(Rve,JEr),b(c,cPe,u),b(c,Rr,u),g(W8,Rr,null),e(Rr,YEr),e(Rr,ef),e(ef,KEr),e(ef,XQ),e(XQ,ZEr),e(ef,e5r),e(ef,zQ),e(zQ,o5r),e(ef,r5r),e(Rr,t5r),e(Rr,H8),e(H8,a5r),e(H8,Bve),e(Bve,n5r),e(H8,s5r),e(Rr,l5r),e(Rr,At),g(U8,At,null),e(At,i5r),e(At,Pve),e(Pve,d5r),e(At,c5r),e(At,of),e(of,f5r),e(of,$ve),e($ve,m5r),e(of,g5r),e(of,QQ),e(QQ,h5r),e(of,p5r),e(At,_5r),e(At,Ive),e(Ive,u5r),e(At,b5r),g(J8,At,null),e(Rr,v5r),e(Rr,yo),g(Y8,yo,null),e(yo,F5r),e(yo,qve),e(qve,T5r),e(yo,M5r),e(yo,kn),e(kn,E5r),e(kn,Nve),e(Nve,C5r),e(kn,w5r),e(kn,jve),e(jve,A5r),e(kn,y5r),e(kn,Dve),e(Dve,L5r),e(kn,x5r),e(yo,k5r),e(yo,z),e(z,C5),e(C5,Gve),e(Gve,S5r),e(C5,R5r),e(C5,WQ),e(WQ,B5r),e(C5,P5r),e(z,$5r),e(z,w5),e(w5,Ove),e(Ove,I5r),e(w5,q5r),e(w5,HQ),e(HQ,N5r),e(w5,j5r),e(z,D5r),e(z,A5),e(A5,Vve),e(Vve,G5r),e(A5,O5r),e(A5,UQ),e(UQ,V5r),e(A5,X5r),e(z,z5r),e(z,y5),e(y5,Xve),e(Xve,Q5r),e(y5,W5r),e(y5,JQ),e(JQ,H5r),e(y5,U5r),e(z,J5r),e(z,L5),e(L5,zve),e(zve,Y5r),e(L5,K5r),e(L5,YQ),e(YQ,Z5r),e(L5,e3r),e(z,o3r),e(z,x5),e(x5,Qve),e(Qve,r3r),e(x5,t3r),e(x5,KQ),e(KQ,a3r),e(x5,n3r),e(z,s3r),e(z,k5),e(k5,Wve),e(Wve,l3r),e(k5,i3r),e(k5,ZQ),e(ZQ,d3r),e(k5,c3r),e(z,f3r),e(z,S5),e(S5,Hve),e(Hve,m3r),e(S5,g3r),e(S5,eW),e(eW,h3r),e(S5,p3r),e(z,_3r),e(z,R5),e(R5,Uve),e(Uve,u3r),e(R5,b3r),e(R5,oW),e(oW,v3r),e(R5,F3r),e(z,T3r),e(z,B5),e(B5,Jve),e(Jve,M3r),e(B5,E3r),e(B5,rW),e(rW,C3r),e(B5,w3r),e(z,A3r),e(z,P5),e(P5,Yve),e(Yve,y3r),e(P5,L3r),e(P5,tW),e(tW,x3r),e(P5,k3r),e(z,S3r),e(z,$5),e($5,Kve),e(Kve,R3r),e($5,B3r),e($5,aW),e(aW,P3r),e($5,$3r),e(z,I3r),e(z,I5),e(I5,Zve),e(Zve,q3r),e(I5,N3r),e(I5,nW),e(nW,j3r),e(I5,D3r),e(z,G3r),e(z,q5),e(q5,eFe),e(eFe,O3r),e(q5,V3r),e(q5,sW),e(sW,X3r),e(q5,z3r),e(z,Q3r),e(z,N5),e(N5,oFe),e(oFe,W3r),e(N5,H3r),e(N5,lW),e(lW,U3r),e(N5,J3r),e(z,Y3r),e(z,j5),e(j5,rFe),e(rFe,K3r),e(j5,Z3r),e(j5,iW),e(iW,eCr),e(j5,oCr),e(z,rCr),e(z,D5),e(D5,tFe),e(tFe,tCr),e(D5,aCr),e(D5,dW),e(dW,nCr),e(D5,sCr),e(z,lCr),e(z,G5),e(G5,aFe),e(aFe,iCr),e(G5,dCr),e(G5,cW),e(cW,cCr),e(G5,fCr),e(z,mCr),e(z,O5),e(O5,nFe),e(nFe,gCr),e(O5,hCr),e(O5,fW),e(fW,pCr),e(O5,_Cr),e(z,uCr),e(z,V5),e(V5,sFe),e(sFe,bCr),e(V5,vCr),e(V5,mW),e(mW,FCr),e(V5,TCr),e(z,MCr),e(z,X5),e(X5,lFe),e(lFe,ECr),e(X5,CCr),e(X5,gW),e(gW,wCr),e(X5,ACr),e(z,yCr),e(z,z5),e(z5,iFe),e(iFe,LCr),e(z5,xCr),e(z5,hW),e(hW,kCr),e(z5,SCr),e(z,RCr),e(z,Q5),e(Q5,dFe),e(dFe,BCr),e(Q5,PCr),e(Q5,pW),e(pW,$Cr),e(Q5,ICr),e(z,qCr),e(z,W5),e(W5,cFe),e(cFe,NCr),e(W5,jCr),e(W5,_W),e(_W,DCr),e(W5,GCr),e(z,OCr),e(z,H5),e(H5,fFe),e(fFe,VCr),e(H5,XCr),e(H5,uW),e(uW,zCr),e(H5,QCr),e(yo,WCr),e(yo,mFe),e(mFe,HCr),e(yo,UCr),g(K8,yo,null),b(c,fPe,u),b(c,rf,u),e(rf,U5),e(U5,gFe),g(Z8,gFe,null),e(rf,JCr),e(rf,hFe),e(hFe,YCr),b(c,mPe,u),b(c,Br,u),g(eL,Br,null),e(Br,KCr),e(Br,tf),e(tf,ZCr),e(tf,bW),e(bW,ewr),e(tf,owr),e(tf,vW),e(vW,rwr),e(tf,twr),e(Br,awr),e(Br,oL),e(oL,nwr),e(oL,pFe),e(pFe,swr),e(oL,lwr),e(Br,iwr),e(Br,yt),g(rL,yt,null),e(yt,dwr),e(yt,_Fe),e(_Fe,cwr),e(yt,fwr),e(yt,af),e(af,mwr),e(af,uFe),e(uFe,gwr),e(af,hwr),e(af,FW),e(FW,pwr),e(af,_wr),e(yt,uwr),e(yt,bFe),e(bFe,bwr),e(yt,vwr),g(tL,yt,null),e(Br,Fwr),e(Br,Lo),g(aL,Lo,null),e(Lo,Twr),e(Lo,vFe),e(vFe,Mwr),e(Lo,Ewr),e(Lo,Sn),e(Sn,Cwr),e(Sn,FFe),e(FFe,wwr),e(Sn,Awr),e(Sn,TFe),e(TFe,ywr),e(Sn,Lwr),e(Sn,MFe),e(MFe,xwr),e(Sn,kwr),e(Lo,Swr),e(Lo,ca),e(ca,J5),e(J5,EFe),e(EFe,Rwr),e(J5,Bwr),e(J5,TW),e(TW,Pwr),e(J5,$wr),e(ca,Iwr),e(ca,Y5),e(Y5,CFe),e(CFe,qwr),e(Y5,Nwr),e(Y5,MW),e(MW,jwr),e(Y5,Dwr),e(ca,Gwr),e(ca,K5),e(K5,wFe),e(wFe,Owr),e(K5,Vwr),e(K5,EW),e(EW,Xwr),e(K5,zwr),e(ca,Qwr),e(ca,Z5),e(Z5,AFe),e(AFe,Wwr),e(Z5,Hwr),e(Z5,CW),e(CW,Uwr),e(Z5,Jwr),e(ca,Ywr),e(ca,e3),e(e3,yFe),e(yFe,Kwr),e(e3,Zwr),e(e3,wW),e(wW,e6r),e(e3,o6r),e(Lo,r6r),e(Lo,LFe),e(LFe,t6r),e(Lo,a6r),g(nL,Lo,null),b(c,gPe,u),b(c,nf,u),e(nf,o3),e(o3,xFe),g(sL,xFe,null),e(nf,n6r),e(nf,kFe),e(kFe,s6r),b(c,hPe,u),b(c,Pr,u),g(lL,Pr,null),e(Pr,l6r),e(Pr,sf),e(sf,i6r),e(sf,AW),e(AW,d6r),e(sf,c6r),e(sf,yW),e(yW,f6r),e(sf,m6r),e(Pr,g6r),e(Pr,iL),e(iL,h6r),e(iL,SFe),e(SFe,p6r),e(iL,_6r),e(Pr,u6r),e(Pr,Lt),g(dL,Lt,null),e(Lt,b6r),e(Lt,RFe),e(RFe,v6r),e(Lt,F6r),e(Lt,lf),e(lf,T6r),e(lf,BFe),e(BFe,M6r),e(lf,E6r),e(lf,LW),e(LW,C6r),e(lf,w6r),e(Lt,A6r),e(Lt,PFe),e(PFe,y6r),e(Lt,L6r),g(cL,Lt,null),e(Pr,x6r),e(Pr,xo),g(fL,xo,null),e(xo,k6r),e(xo,$Fe),e($Fe,S6r),e(xo,R6r),e(xo,Rn),e(Rn,B6r),e(Rn,IFe),e(IFe,P6r),e(Rn,$6r),e(Rn,qFe),e(qFe,I6r),e(Rn,q6r),e(Rn,NFe),e(NFe,N6r),e(Rn,j6r),e(xo,D6r),e(xo,me),e(me,r3),e(r3,jFe),e(jFe,G6r),e(r3,O6r),e(r3,xW),e(xW,V6r),e(r3,X6r),e(me,z6r),e(me,t3),e(t3,DFe),e(DFe,Q6r),e(t3,W6r),e(t3,kW),e(kW,H6r),e(t3,U6r),e(me,J6r),e(me,a3),e(a3,GFe),e(GFe,Y6r),e(a3,K6r),e(a3,SW),e(SW,Z6r),e(a3,eAr),e(me,oAr),e(me,n3),e(n3,OFe),e(OFe,rAr),e(n3,tAr),e(n3,RW),e(RW,aAr),e(n3,nAr),e(me,sAr),e(me,s3),e(s3,VFe),e(VFe,lAr),e(s3,iAr),e(s3,BW),e(BW,dAr),e(s3,cAr),e(me,fAr),e(me,l3),e(l3,XFe),e(XFe,mAr),e(l3,gAr),e(l3,PW),e(PW,hAr),e(l3,pAr),e(me,_Ar),e(me,i3),e(i3,zFe),e(zFe,uAr),e(i3,bAr),e(i3,$W),e($W,vAr),e(i3,FAr),e(me,TAr),e(me,d3),e(d3,QFe),e(QFe,MAr),e(d3,EAr),e(d3,IW),e(IW,CAr),e(d3,wAr),e(me,AAr),e(me,c3),e(c3,WFe),e(WFe,yAr),e(c3,LAr),e(c3,qW),e(qW,xAr),e(c3,kAr),e(me,SAr),e(me,f3),e(f3,HFe),e(HFe,RAr),e(f3,BAr),e(f3,NW),e(NW,PAr),e(f3,$Ar),e(me,IAr),e(me,m3),e(m3,UFe),e(UFe,qAr),e(m3,NAr),e(m3,jW),e(jW,jAr),e(m3,DAr),e(me,GAr),e(me,g3),e(g3,JFe),e(JFe,OAr),e(g3,VAr),e(g3,DW),e(DW,XAr),e(g3,zAr),e(xo,QAr),e(xo,YFe),e(YFe,WAr),e(xo,HAr),g(mL,xo,null),b(c,pPe,u),b(c,df,u),e(df,h3),e(h3,KFe),g(gL,KFe,null),e(df,UAr),e(df,ZFe),e(ZFe,JAr),b(c,_Pe,u),b(c,$r,u),g(hL,$r,null),e($r,YAr),e($r,cf),e(cf,KAr),e(cf,GW),e(GW,ZAr),e(cf,e0r),e(cf,OW),e(OW,o0r),e(cf,r0r),e($r,t0r),e($r,pL),e(pL,a0r),e(pL,eTe),e(eTe,n0r),e(pL,s0r),e($r,l0r),e($r,xt),g(_L,xt,null),e(xt,i0r),e(xt,oTe),e(oTe,d0r),e(xt,c0r),e(xt,ff),e(ff,f0r),e(ff,rTe),e(rTe,m0r),e(ff,g0r),e(ff,VW),e(VW,h0r),e(ff,p0r),e(xt,_0r),e(xt,tTe),e(tTe,u0r),e(xt,b0r),g(uL,xt,null),e($r,v0r),e($r,ko),g(bL,ko,null),e(ko,F0r),e(ko,aTe),e(aTe,T0r),e(ko,M0r),e(ko,Bn),e(Bn,E0r),e(Bn,nTe),e(nTe,C0r),e(Bn,w0r),e(Bn,sTe),e(sTe,A0r),e(Bn,y0r),e(Bn,lTe),e(lTe,L0r),e(Bn,x0r),e(ko,k0r),e(ko,ve),e(ve,p3),e(p3,iTe),e(iTe,S0r),e(p3,R0r),e(p3,XW),e(XW,B0r),e(p3,P0r),e(ve,$0r),e(ve,_3),e(_3,dTe),e(dTe,I0r),e(_3,q0r),e(_3,zW),e(zW,N0r),e(_3,j0r),e(ve,D0r),e(ve,u3),e(u3,cTe),e(cTe,G0r),e(u3,O0r),e(u3,QW),e(QW,V0r),e(u3,X0r),e(ve,z0r),e(ve,b3),e(b3,fTe),e(fTe,Q0r),e(b3,W0r),e(b3,WW),e(WW,H0r),e(b3,U0r),e(ve,J0r),e(ve,v3),e(v3,mTe),e(mTe,Y0r),e(v3,K0r),e(v3,HW),e(HW,Z0r),e(v3,eyr),e(ve,oyr),e(ve,F3),e(F3,gTe),e(gTe,ryr),e(F3,tyr),e(F3,UW),e(UW,ayr),e(F3,nyr),e(ve,syr),e(ve,T3),e(T3,hTe),e(hTe,lyr),e(T3,iyr),e(T3,JW),e(JW,dyr),e(T3,cyr),e(ve,fyr),e(ve,M3),e(M3,pTe),e(pTe,myr),e(M3,gyr),e(M3,YW),e(YW,hyr),e(M3,pyr),e(ve,_yr),e(ve,E3),e(E3,_Te),e(_Te,uyr),e(E3,byr),e(E3,KW),e(KW,vyr),e(E3,Fyr),e(ve,Tyr),e(ve,C3),e(C3,uTe),e(uTe,Myr),e(C3,Eyr),e(C3,ZW),e(ZW,Cyr),e(C3,wyr),e(ko,Ayr),e(ko,bTe),e(bTe,yyr),e(ko,Lyr),g(vL,ko,null),b(c,uPe,u),b(c,mf,u),e(mf,w3),e(w3,vTe),g(FL,vTe,null),e(mf,xyr),e(mf,FTe),e(FTe,kyr),b(c,bPe,u),b(c,Ir,u),g(TL,Ir,null),e(Ir,Syr),e(Ir,gf),e(gf,Ryr),e(gf,eH),e(eH,Byr),e(gf,Pyr),e(gf,oH),e(oH,$yr),e(gf,Iyr),e(Ir,qyr),e(Ir,ML),e(ML,Nyr),e(ML,TTe),e(TTe,jyr),e(ML,Dyr),e(Ir,Gyr),e(Ir,kt),g(EL,kt,null),e(kt,Oyr),e(kt,MTe),e(MTe,Vyr),e(kt,Xyr),e(kt,hf),e(hf,zyr),e(hf,ETe),e(ETe,Qyr),e(hf,Wyr),e(hf,rH),e(rH,Hyr),e(hf,Uyr),e(kt,Jyr),e(kt,CTe),e(CTe,Yyr),e(kt,Kyr),g(CL,kt,null),e(Ir,Zyr),e(Ir,So),g(wL,So,null),e(So,e8r),e(So,wTe),e(wTe,o8r),e(So,r8r),e(So,Pn),e(Pn,t8r),e(Pn,ATe),e(ATe,a8r),e(Pn,n8r),e(Pn,yTe),e(yTe,s8r),e(Pn,l8r),e(Pn,LTe),e(LTe,i8r),e(Pn,d8r),e(So,c8r),e(So,Ee),e(Ee,A3),e(A3,xTe),e(xTe,f8r),e(A3,m8r),e(A3,tH),e(tH,g8r),e(A3,h8r),e(Ee,p8r),e(Ee,y3),e(y3,kTe),e(kTe,_8r),e(y3,u8r),e(y3,aH),e(aH,b8r),e(y3,v8r),e(Ee,F8r),e(Ee,L3),e(L3,STe),e(STe,T8r),e(L3,M8r),e(L3,nH),e(nH,E8r),e(L3,C8r),e(Ee,w8r),e(Ee,x3),e(x3,RTe),e(RTe,A8r),e(x3,y8r),e(x3,sH),e(sH,L8r),e(x3,x8r),e(Ee,k8r),e(Ee,k3),e(k3,BTe),e(BTe,S8r),e(k3,R8r),e(k3,lH),e(lH,B8r),e(k3,P8r),e(Ee,$8r),e(Ee,S3),e(S3,PTe),e(PTe,I8r),e(S3,q8r),e(S3,iH),e(iH,N8r),e(S3,j8r),e(Ee,D8r),e(Ee,R3),e(R3,$Te),e($Te,G8r),e(R3,O8r),e(R3,dH),e(dH,V8r),e(R3,X8r),e(Ee,z8r),e(Ee,B3),e(B3,ITe),e(ITe,Q8r),e(B3,W8r),e(B3,cH),e(cH,H8r),e(B3,U8r),e(Ee,J8r),e(Ee,P3),e(P3,qTe),e(qTe,Y8r),e(P3,K8r),e(P3,fH),e(fH,Z8r),e(P3,eLr),e(So,oLr),e(So,NTe),e(NTe,rLr),e(So,tLr),g(AL,So,null),b(c,vPe,u),b(c,pf,u),e(pf,$3),e($3,jTe),g(yL,jTe,null),e(pf,aLr),e(pf,DTe),e(DTe,nLr),b(c,FPe,u),b(c,qr,u),g(LL,qr,null),e(qr,sLr),e(qr,_f),e(_f,lLr),e(_f,mH),e(mH,iLr),e(_f,dLr),e(_f,gH),e(gH,cLr),e(_f,fLr),e(qr,mLr),e(qr,xL),e(xL,gLr),e(xL,GTe),e(GTe,hLr),e(xL,pLr),e(qr,_Lr),e(qr,St),g(kL,St,null),e(St,uLr),e(St,OTe),e(OTe,bLr),e(St,vLr),e(St,uf),e(uf,FLr),e(uf,VTe),e(VTe,TLr),e(uf,MLr),e(uf,hH),e(hH,ELr),e(uf,CLr),e(St,wLr),e(St,XTe),e(XTe,ALr),e(St,yLr),g(SL,St,null),e(qr,LLr),e(qr,Ro),g(RL,Ro,null),e(Ro,xLr),e(Ro,zTe),e(zTe,kLr),e(Ro,SLr),e(Ro,$n),e($n,RLr),e($n,QTe),e(QTe,BLr),e($n,PLr),e($n,WTe),e(WTe,$Lr),e($n,ILr),e($n,HTe),e(HTe,qLr),e($n,NLr),e(Ro,jLr),e(Ro,Fe),e(Fe,I3),e(I3,UTe),e(UTe,DLr),e(I3,GLr),e(I3,pH),e(pH,OLr),e(I3,VLr),e(Fe,XLr),e(Fe,q3),e(q3,JTe),e(JTe,zLr),e(q3,QLr),e(q3,_H),e(_H,WLr),e(q3,HLr),e(Fe,ULr),e(Fe,N3),e(N3,YTe),e(YTe,JLr),e(N3,YLr),e(N3,uH),e(uH,KLr),e(N3,ZLr),e(Fe,e7r),e(Fe,j3),e(j3,KTe),e(KTe,o7r),e(j3,r7r),e(j3,bH),e(bH,t7r),e(j3,a7r),e(Fe,n7r),e(Fe,D3),e(D3,ZTe),e(ZTe,s7r),e(D3,l7r),e(D3,vH),e(vH,i7r),e(D3,d7r),e(Fe,c7r),e(Fe,G3),e(G3,eMe),e(eMe,f7r),e(G3,m7r),e(G3,FH),e(FH,g7r),e(G3,h7r),e(Fe,p7r),e(Fe,O3),e(O3,oMe),e(oMe,_7r),e(O3,u7r),e(O3,TH),e(TH,b7r),e(O3,v7r),e(Fe,F7r),e(Fe,V3),e(V3,rMe),e(rMe,T7r),e(V3,M7r),e(V3,MH),e(MH,E7r),e(V3,C7r),e(Fe,w7r),e(Fe,X3),e(X3,tMe),e(tMe,A7r),e(X3,y7r),e(X3,EH),e(EH,L7r),e(X3,x7r),e(Fe,k7r),e(Fe,z3),e(z3,aMe),e(aMe,S7r),e(z3,R7r),e(z3,CH),e(CH,B7r),e(z3,P7r),e(Ro,$7r),e(Ro,nMe),e(nMe,I7r),e(Ro,q7r),g(BL,Ro,null),b(c,TPe,u),b(c,bf,u),e(bf,Q3),e(Q3,sMe),g(PL,sMe,null),e(bf,N7r),e(bf,lMe),e(lMe,j7r),b(c,MPe,u),b(c,Nr,u),g($L,Nr,null),e(Nr,D7r),e(Nr,vf),e(vf,G7r),e(vf,wH),e(wH,O7r),e(vf,V7r),e(vf,AH),e(AH,X7r),e(vf,z7r),e(Nr,Q7r),e(Nr,IL),e(IL,W7r),e(IL,iMe),e(iMe,H7r),e(IL,U7r),e(Nr,J7r),e(Nr,Rt),g(qL,Rt,null),e(Rt,Y7r),e(Rt,dMe),e(dMe,K7r),e(Rt,Z7r),e(Rt,Ff),e(Ff,e9r),e(Ff,cMe),e(cMe,o9r),e(Ff,r9r),e(Ff,yH),e(yH,t9r),e(Ff,a9r),e(Rt,n9r),e(Rt,fMe),e(fMe,s9r),e(Rt,l9r),g(NL,Rt,null),e(Nr,i9r),e(Nr,Bo),g(jL,Bo,null),e(Bo,d9r),e(Bo,mMe),e(mMe,c9r),e(Bo,f9r),e(Bo,In),e(In,m9r),e(In,gMe),e(gMe,g9r),e(In,h9r),e(In,hMe),e(hMe,p9r),e(In,_9r),e(In,pMe),e(pMe,u9r),e(In,b9r),e(Bo,v9r),e(Bo,Te),e(Te,W3),e(W3,_Me),e(_Me,F9r),e(W3,T9r),e(W3,LH),e(LH,M9r),e(W3,E9r),e(Te,C9r),e(Te,H3),e(H3,uMe),e(uMe,w9r),e(H3,A9r),e(H3,xH),e(xH,y9r),e(H3,L9r),e(Te,x9r),e(Te,U3),e(U3,bMe),e(bMe,k9r),e(U3,S9r),e(U3,kH),e(kH,R9r),e(U3,B9r),e(Te,P9r),e(Te,J3),e(J3,vMe),e(vMe,$9r),e(J3,I9r),e(J3,SH),e(SH,q9r),e(J3,N9r),e(Te,j9r),e(Te,Y3),e(Y3,FMe),e(FMe,D9r),e(Y3,G9r),e(Y3,RH),e(RH,O9r),e(Y3,V9r),e(Te,X9r),e(Te,K3),e(K3,TMe),e(TMe,z9r),e(K3,Q9r),e(K3,BH),e(BH,W9r),e(K3,H9r),e(Te,U9r),e(Te,Z3),e(Z3,MMe),e(MMe,J9r),e(Z3,Y9r),e(Z3,PH),e(PH,K9r),e(Z3,Z9r),e(Te,exr),e(Te,eC),e(eC,EMe),e(EMe,oxr),e(eC,rxr),e(eC,$H),e($H,txr),e(eC,axr),e(Te,nxr),e(Te,oC),e(oC,CMe),e(CMe,sxr),e(oC,lxr),e(oC,IH),e(IH,ixr),e(oC,dxr),e(Te,cxr),e(Te,rC),e(rC,wMe),e(wMe,fxr),e(rC,mxr),e(rC,qH),e(qH,gxr),e(rC,hxr),e(Bo,pxr),e(Bo,AMe),e(AMe,_xr),e(Bo,uxr),g(DL,Bo,null),b(c,EPe,u),b(c,Tf,u),e(Tf,tC),e(tC,yMe),g(GL,yMe,null),e(Tf,bxr),e(Tf,LMe),e(LMe,vxr),b(c,CPe,u),b(c,jr,u),g(OL,jr,null),e(jr,Fxr),e(jr,Mf),e(Mf,Txr),e(Mf,NH),e(NH,Mxr),e(Mf,Exr),e(Mf,jH),e(jH,Cxr),e(Mf,wxr),e(jr,Axr),e(jr,VL),e(VL,yxr),e(VL,xMe),e(xMe,Lxr),e(VL,xxr),e(jr,kxr),e(jr,Bt),g(XL,Bt,null),e(Bt,Sxr),e(Bt,kMe),e(kMe,Rxr),e(Bt,Bxr),e(Bt,Ef),e(Ef,Pxr),e(Ef,SMe),e(SMe,$xr),e(Ef,Ixr),e(Ef,DH),e(DH,qxr),e(Ef,Nxr),e(Bt,jxr),e(Bt,RMe),e(RMe,Dxr),e(Bt,Gxr),g(zL,Bt,null),e(jr,Oxr),e(jr,Po),g(QL,Po,null),e(Po,Vxr),e(Po,BMe),e(BMe,Xxr),e(Po,zxr),e(Po,qn),e(qn,Qxr),e(qn,PMe),e(PMe,Wxr),e(qn,Hxr),e(qn,$Me),e($Me,Uxr),e(qn,Jxr),e(qn,IMe),e(IMe,Yxr),e(qn,Kxr),e(Po,Zxr),e(Po,Be),e(Be,aC),e(aC,qMe),e(qMe,ekr),e(aC,okr),e(aC,GH),e(GH,rkr),e(aC,tkr),e(Be,akr),e(Be,nC),e(nC,NMe),e(NMe,nkr),e(nC,skr),e(nC,OH),e(OH,lkr),e(nC,ikr),e(Be,dkr),e(Be,sC),e(sC,jMe),e(jMe,ckr),e(sC,fkr),e(sC,VH),e(VH,mkr),e(sC,gkr),e(Be,hkr),e(Be,lC),e(lC,DMe),e(DMe,pkr),e(lC,_kr),e(lC,XH),e(XH,ukr),e(lC,bkr),e(Be,vkr),e(Be,iC),e(iC,GMe),e(GMe,Fkr),e(iC,Tkr),e(iC,zH),e(zH,Mkr),e(iC,Ekr),e(Be,Ckr),e(Be,dC),e(dC,OMe),e(OMe,wkr),e(dC,Akr),e(dC,QH),e(QH,ykr),e(dC,Lkr),e(Be,xkr),e(Be,cC),e(cC,VMe),e(VMe,kkr),e(cC,Skr),e(cC,WH),e(WH,Rkr),e(cC,Bkr),e(Be,Pkr),e(Be,fC),e(fC,XMe),e(XMe,$kr),e(fC,Ikr),e(fC,HH),e(HH,qkr),e(fC,Nkr),e(Po,jkr),e(Po,zMe),e(zMe,Dkr),e(Po,Gkr),g(WL,Po,null),b(c,wPe,u),b(c,Cf,u),e(Cf,mC),e(mC,QMe),g(HL,QMe,null),e(Cf,Okr),e(Cf,WMe),e(WMe,Vkr),b(c,APe,u),b(c,Dr,u),g(UL,Dr,null),e(Dr,Xkr),e(Dr,wf),e(wf,zkr),e(wf,UH),e(UH,Qkr),e(wf,Wkr),e(wf,JH),e(JH,Hkr),e(wf,Ukr),e(Dr,Jkr),e(Dr,JL),e(JL,Ykr),e(JL,HMe),e(HMe,Kkr),e(JL,Zkr),e(Dr,eSr),e(Dr,Pt),g(YL,Pt,null),e(Pt,oSr),e(Pt,UMe),e(UMe,rSr),e(Pt,tSr),e(Pt,Af),e(Af,aSr),e(Af,JMe),e(JMe,nSr),e(Af,sSr),e(Af,YH),e(YH,lSr),e(Af,iSr),e(Pt,dSr),e(Pt,YMe),e(YMe,cSr),e(Pt,fSr),g(KL,Pt,null),e(Dr,mSr),e(Dr,$o),g(ZL,$o,null),e($o,gSr),e($o,KMe),e(KMe,hSr),e($o,pSr),e($o,Nn),e(Nn,_Sr),e(Nn,ZMe),e(ZMe,uSr),e(Nn,bSr),e(Nn,e4e),e(e4e,vSr),e(Nn,FSr),e(Nn,o4e),e(o4e,TSr),e(Nn,MSr),e($o,ESr),e($o,Pe),e(Pe,gC),e(gC,r4e),e(r4e,CSr),e(gC,wSr),e(gC,KH),e(KH,ASr),e(gC,ySr),e(Pe,LSr),e(Pe,hC),e(hC,t4e),e(t4e,xSr),e(hC,kSr),e(hC,ZH),e(ZH,SSr),e(hC,RSr),e(Pe,BSr),e(Pe,pC),e(pC,a4e),e(a4e,PSr),e(pC,$Sr),e(pC,eU),e(eU,ISr),e(pC,qSr),e(Pe,NSr),e(Pe,_C),e(_C,n4e),e(n4e,jSr),e(_C,DSr),e(_C,oU),e(oU,GSr),e(_C,OSr),e(Pe,VSr),e(Pe,uC),e(uC,s4e),e(s4e,XSr),e(uC,zSr),e(uC,rU),e(rU,QSr),e(uC,WSr),e(Pe,HSr),e(Pe,bC),e(bC,l4e),e(l4e,USr),e(bC,JSr),e(bC,tU),e(tU,YSr),e(bC,KSr),e(Pe,ZSr),e(Pe,vC),e(vC,i4e),e(i4e,eRr),e(vC,oRr),e(vC,aU),e(aU,rRr),e(vC,tRr),e(Pe,aRr),e(Pe,FC),e(FC,d4e),e(d4e,nRr),e(FC,sRr),e(FC,nU),e(nU,lRr),e(FC,iRr),e($o,dRr),e($o,c4e),e(c4e,cRr),e($o,fRr),g(e7,$o,null),b(c,yPe,u),b(c,yf,u),e(yf,TC),e(TC,f4e),g(o7,f4e,null),e(yf,mRr),e(yf,m4e),e(m4e,gRr),b(c,LPe,u),b(c,Gr,u),g(r7,Gr,null),e(Gr,hRr),e(Gr,Lf),e(Lf,pRr),e(Lf,sU),e(sU,_Rr),e(Lf,uRr),e(Lf,lU),e(lU,bRr),e(Lf,vRr),e(Gr,FRr),e(Gr,t7),e(t7,TRr),e(t7,g4e),e(g4e,MRr),e(t7,ERr),e(Gr,CRr),e(Gr,$t),g(a7,$t,null),e($t,wRr),e($t,h4e),e(h4e,ARr),e($t,yRr),e($t,xf),e(xf,LRr),e(xf,p4e),e(p4e,xRr),e(xf,kRr),e(xf,iU),e(iU,SRr),e(xf,RRr),e($t,BRr),e($t,_4e),e(_4e,PRr),e($t,$Rr),g(n7,$t,null),e(Gr,IRr),e(Gr,Io),g(s7,Io,null),e(Io,qRr),e(Io,u4e),e(u4e,NRr),e(Io,jRr),e(Io,jn),e(jn,DRr),e(jn,b4e),e(b4e,GRr),e(jn,ORr),e(jn,v4e),e(v4e,VRr),e(jn,XRr),e(jn,F4e),e(F4e,zRr),e(jn,QRr),e(Io,WRr),e(Io,T4e),e(T4e,MC),e(MC,M4e),e(M4e,HRr),e(MC,URr),e(MC,dU),e(dU,JRr),e(MC,YRr),e(Io,KRr),e(Io,E4e),e(E4e,ZRr),e(Io,eBr),g(l7,Io,null),b(c,xPe,u),b(c,kf,u),e(kf,EC),e(EC,C4e),g(i7,C4e,null),e(kf,oBr),e(kf,w4e),e(w4e,rBr),b(c,kPe,u),b(c,Or,u),g(d7,Or,null),e(Or,tBr),e(Or,Sf),e(Sf,aBr),e(Sf,cU),e(cU,nBr),e(Sf,sBr),e(Sf,fU),e(fU,lBr),e(Sf,iBr),e(Or,dBr),e(Or,c7),e(c7,cBr),e(c7,A4e),e(A4e,fBr),e(c7,mBr),e(Or,gBr),e(Or,It),g(f7,It,null),e(It,hBr),e(It,y4e),e(y4e,pBr),e(It,_Br),e(It,Rf),e(Rf,uBr),e(Rf,L4e),e(L4e,bBr),e(Rf,vBr),e(Rf,mU),e(mU,FBr),e(Rf,TBr),e(It,MBr),e(It,x4e),e(x4e,EBr),e(It,CBr),g(m7,It,null),e(Or,wBr),e(Or,qo),g(g7,qo,null),e(qo,ABr),e(qo,k4e),e(k4e,yBr),e(qo,LBr),e(qo,Dn),e(Dn,xBr),e(Dn,S4e),e(S4e,kBr),e(Dn,SBr),e(Dn,R4e),e(R4e,RBr),e(Dn,BBr),e(Dn,B4e),e(B4e,PBr),e(Dn,$Br),e(qo,IBr),e(qo,h7),e(h7,CC),e(CC,P4e),e(P4e,qBr),e(CC,NBr),e(CC,gU),e(gU,jBr),e(CC,DBr),e(h7,GBr),e(h7,wC),e(wC,$4e),e($4e,OBr),e(wC,VBr),e(wC,hU),e(hU,XBr),e(wC,zBr),e(qo,QBr),e(qo,I4e),e(I4e,WBr),e(qo,HBr),g(p7,qo,null),b(c,SPe,u),b(c,Bf,u),e(Bf,AC),e(AC,q4e),g(_7,q4e,null),e(Bf,UBr),e(Bf,N4e),e(N4e,JBr),b(c,RPe,u),b(c,Vr,u),g(u7,Vr,null),e(Vr,YBr),e(Vr,Pf),e(Pf,KBr),e(Pf,pU),e(pU,ZBr),e(Pf,ePr),e(Pf,_U),e(_U,oPr),e(Pf,rPr),e(Vr,tPr),e(Vr,b7),e(b7,aPr),e(b7,j4e),e(j4e,nPr),e(b7,sPr),e(Vr,lPr),e(Vr,qt),g(v7,qt,null),e(qt,iPr),e(qt,D4e),e(D4e,dPr),e(qt,cPr),e(qt,$f),e($f,fPr),e($f,G4e),e(G4e,mPr),e($f,gPr),e($f,uU),e(uU,hPr),e($f,pPr),e(qt,_Pr),e(qt,O4e),e(O4e,uPr),e(qt,bPr),g(F7,qt,null),e(Vr,vPr),e(Vr,No),g(T7,No,null),e(No,FPr),e(No,V4e),e(V4e,TPr),e(No,MPr),e(No,Gn),e(Gn,EPr),e(Gn,X4e),e(X4e,CPr),e(Gn,wPr),e(Gn,z4e),e(z4e,APr),e(Gn,yPr),e(Gn,Q4e),e(Q4e,LPr),e(Gn,xPr),e(No,kPr),e(No,W4e),e(W4e,yC),e(yC,H4e),e(H4e,SPr),e(yC,RPr),e(yC,bU),e(bU,BPr),e(yC,PPr),e(No,$Pr),e(No,U4e),e(U4e,IPr),e(No,qPr),g(M7,No,null),BPe=!0},p(c,[u]){const E7={};u&2&&(E7.$$scope={dirty:u,ctx:c}),Vf.$set(E7);const J4e={};u&2&&(J4e.$$scope={dirty:u,ctx:c}),qh.$set(J4e);const Y4e={};u&2&&(Y4e.$$scope={dirty:u,ctx:c}),Hh.$set(Y4e)},i(c){BPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Vf.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Kw.$$.fragment,c),h(qh.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(n6.$$.fragment,c),h(Hh.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(p6.$$.fragment,c),h(_6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(f7.$$.fragment,c),h(m7.$$.fragment,c),h(g7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(v7.$$.fragment,c),h(F7.$$.fragment,c),h(T7.$$.fragment,c),h(M7.$$.fragment,c),BPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p(Vf.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Kw.$$.fragment,c),p(qh.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(o6.$$.fragment,c),p(r6.$$.fragment,c),p(n6.$$.fragment,c),p(Hh.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(i6.$$.fragment,c),p(d6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(p6.$$.fragment,c),p(_6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(F6.$$.fragment,c),p(T6.$$.fragment,c),p(M6.$$.fragment,c),p(E6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(y6.$$.fragment,c),p(L6.$$.fragment,c),p(x6.$$.fragment,c),p(k6.$$.fragment,c),p(R6.$$.fragment,c),p(B6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(I6.$$.fragment,c),p(q6.$$.fragment,c),p(j6.$$.fragment,c),p(D6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(V6.$$.fragment,c),p(X6.$$.fragment,c),p(Q6.$$.fragment,c),p(W6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(J6.$$.fragment,c),p(Y6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(TL.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(LL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(a7.$$.fragment,c),p(n7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(f7.$$.fragment,c),p(m7.$$.fragment,c),p(g7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(v7.$$.fragment,c),p(F7.$$.fragment,c),p(T7.$$.fragment,c),p(M7.$$.fragment,c),BPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(Nf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(RRe),c&&t(zi),_(Rw),c&&t(BRe),c&&t(Qn),c&&t(PRe),_(Bw,c),c&&t($Re),c&&t(A9),c&&t(IRe),_(Vf,c),c&&t(qRe),c&&t(Qi),_(Pw),c&&t(NRe),c&&t(Qo),_($w),_(Nw),_(jw),_(Dw),c&&t(jRe),c&&t(Hi),_(Gw),c&&t(DRe),c&&t(Wo),_(Ow),_(zw),_(Qw),_(Ww),c&&t(GRe),c&&t(Ui),_(Hw),c&&t(ORe),c&&t(Ho),_(Uw),_(Kw),_(qh),_(Zw),_(e6),c&&t(VRe),c&&t(Ji),_(o6),c&&t(XRe),c&&t(Uo),_(r6),_(n6),_(Hh),_(s6),_(l6),c&&t(zRe),c&&t(Ki),_(i6),c&&t(QRe),c&&t(Jo),_(d6),_(f6),_(m6),_(g6),_(h6),c&&t(WRe),c&&t(od),_(p6),c&&t(HRe),c&&t(Yo),_(_6),_(b6),_(v6),_(F6),_(T6),c&&t(URe),c&&t(ad),_(M6),c&&t(JRe),c&&t(Ko),_(E6),_(w6),_(A6),_(y6),_(L6),c&&t(YRe),c&&t(ld),_(x6),c&&t(KRe),c&&t(Zo),_(k6),_(R6),_(B6),_(P6),_($6),c&&t(ZRe),c&&t(cd),_(I6),c&&t(eBe),c&&t(er),_(q6),_(j6),_(D6),_(G6),_(O6),c&&t(oBe),c&&t(gd),_(V6),c&&t(rBe),c&&t(or),_(X6),_(Q6),_(W6),_(H6),_(U6),c&&t(tBe),c&&t(_d),_(J6),c&&t(aBe),c&&t(rr),_(Y6),_(Z6),_(eA),_(oA),_(rA),c&&t(nBe),c&&t(vd),_(tA),c&&t(sBe),c&&t(tr),_(aA),_(sA),_(lA),_(iA),_(dA),c&&t(lBe),c&&t(Md),_(cA),c&&t(iBe),c&&t(ar),_(fA),_(gA),_(hA),_(pA),_(_A),c&&t(dBe),c&&t(wd),_(uA),c&&t(cBe),c&&t(nr),_(bA),_(FA),_(TA),_(MA),_(EA),c&&t(fBe),c&&t(Ld),_(CA),c&&t(mBe),c&&t(sr),_(wA),_(yA),_(LA),_(xA),_(kA),c&&t(gBe),c&&t(Sd),_(SA),c&&t(hBe),c&&t(lr),_(RA),_(PA),_($A),_(IA),_(qA),c&&t(pBe),c&&t(Pd),_(NA),c&&t(_Be),c&&t(ir),_(jA),_(GA),_(OA),_(VA),_(XA),c&&t(uBe),c&&t(qd),_(zA),c&&t(bBe),c&&t(dr),_(QA),_(HA),_(UA),_(JA),_(YA),c&&t(vBe),c&&t(Dd),_(KA),c&&t(FBe),c&&t(cr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(TBe),c&&t(Vd),_(n0),c&&t(MBe),c&&t(fr),_(s0),_(i0),_(d0),_(c0),_(f0),c&&t(EBe),c&&t(Qd),_(m0),c&&t(CBe),c&&t(mr),_(g0),_(p0),_(_0),_(u0),_(v0),c&&t(wBe),c&&t(Ud),_(F0),c&&t(ABe),c&&t(gr),_(T0),_(E0),_(C0),_(w0),_(A0),c&&t(yBe),c&&t(Kd),_(y0),c&&t(LBe),c&&t(hr),_(L0),_(k0),_(S0),_(R0),_(B0),c&&t(xBe),c&&t(rc),_(P0),c&&t(kBe),c&&t(pr),_($0),_(q0),_(N0),_(j0),_(D0),c&&t(SBe),c&&t(nc),_(G0),c&&t(RBe),c&&t(_r),_(O0),_(X0),_(z0),_(Q0),_(W0),c&&t(BBe),c&&t(ic),_(H0),c&&t(PBe),c&&t(ur),_(U0),_(Y0),_(K0),_(Z0),_(ey),c&&t($Be),c&&t(fc),_(oy),c&&t(IBe),c&&t(br),_(ry),_(ay),_(ny),_(sy),_(ly),c&&t(qBe),c&&t(hc),_(iy),c&&t(NBe),c&&t(vr),_(dy),_(fy),_(my),_(gy),_(hy),c&&t(jBe),c&&t(uc),_(py),c&&t(DBe),c&&t(Fr),_(_y),_(by),_(vy),_(Fy),_(Ty),c&&t(GBe),c&&t(Fc),_(My),c&&t(OBe),c&&t(Tr),_(Ey),_(wy),_(Ay),_(yy),_(Ly),c&&t(VBe),c&&t(Ec),_(xy),c&&t(XBe),c&&t(Mr),_(ky),_(Ry),_(By),_(Py),_(Iy),c&&t(zBe),c&&t(Ac),_(qy),c&&t(QBe),c&&t(Er),_(Ny),_(Dy),_(Gy),_(Oy),_(Vy),c&&t(WBe),c&&t(xc),_(Xy),c&&t(HBe),c&&t(Cr),_(zy),_(Wy),_(Hy),_(Uy),_(Jy),c&&t(UBe),c&&t(Rc),_(Yy),c&&t(JBe),c&&t(wr),_(Ky),_(e8),_(o8),_(r8),_(t8),c&&t(YBe),c&&t($c),_(a8),c&&t(KBe),c&&t(Ar),_(n8),_(l8),_(i8),_(d8),_(c8),c&&t(ZBe),c&&t(Nc),_(f8),c&&t(ePe),c&&t(yr),_(m8),_(h8),_(p8),_(_8),_(u8),c&&t(oPe),c&&t(Gc),_(b8),c&&t(rPe),c&&t(Lr),_(v8),_(T8),_(M8),_(E8),_(C8),c&&t(tPe),c&&t(Xc),_(w8),c&&t(aPe),c&&t(xr),_(A8),_(L8),_(x8),_(k8),_(S8),c&&t(nPe),c&&t(Wc),_(R8),c&&t(sPe),c&&t(kr),_(B8),_($8),_(I8),_(q8),_(N8),c&&t(lPe),c&&t(Jc),_(j8),c&&t(iPe),c&&t(Sr),_(D8),_(O8),_(V8),_(X8),_(z8),c&&t(dPe),c&&t(Zc),_(Q8),c&&t(cPe),c&&t(Rr),_(W8),_(U8),_(J8),_(Y8),_(K8),c&&t(fPe),c&&t(rf),_(Z8),c&&t(mPe),c&&t(Br),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(gPe),c&&t(nf),_(sL),c&&t(hPe),c&&t(Pr),_(lL),_(dL),_(cL),_(fL),_(mL),c&&t(pPe),c&&t(df),_(gL),c&&t(_Pe),c&&t($r),_(hL),_(_L),_(uL),_(bL),_(vL),c&&t(uPe),c&&t(mf),_(FL),c&&t(bPe),c&&t(Ir),_(TL),_(EL),_(CL),_(wL),_(AL),c&&t(vPe),c&&t(pf),_(yL),c&&t(FPe),c&&t(qr),_(LL),_(kL),_(SL),_(RL),_(BL),c&&t(TPe),c&&t(bf),_(PL),c&&t(MPe),c&&t(Nr),_($L),_(qL),_(NL),_(jL),_(DL),c&&t(EPe),c&&t(Tf),_(GL),c&&t(CPe),c&&t(jr),_(OL),_(XL),_(zL),_(QL),_(WL),c&&t(wPe),c&&t(Cf),_(HL),c&&t(APe),c&&t(Dr),_(UL),_(YL),_(KL),_(ZL),_(e7),c&&t(yPe),c&&t(yf),_(o7),c&&t(LPe),c&&t(Gr),_(r7),_(a7),_(n7),_(s7),_(l7),c&&t(xPe),c&&t(kf),_(i7),c&&t(kPe),c&&t(Or),_(d7),_(f7),_(m7),_(g7),_(p7),c&&t(SPe),c&&t(Bf),_(_7),c&&t(RPe),c&&t(Vr),_(u7),_(v7),_(F7),_(T7),_(M7)}}}const B6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function P6t(qf){return L6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class D6t extends C6t{constructor(Z){super();w6t(this,Z,P6t,R6t,A6t,{})}}export{D6t as default,B6t as metadata};
