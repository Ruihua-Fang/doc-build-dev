import{S as aL,i as nL,s as sL,e as n,k as l,w as h,t as r,L as iL,c as s,d as o,m as d,a as i,x as u,h as a,b as m,J as e,g as p,y as f,q as g,o as _,B as v}from"../../chunks/vendor-9e2b328e.js";import{T as Xb}from"../../chunks/Tip-76f97a76.js";import{D as $}from"../../chunks/Docstring-50fd6873.js";import{C as P}from"../../chunks/CodeBlock-88e23343.js";import{I as se}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function lL(Ye){let T,L,x,S,fe,R,W,V,ge,ee,G,ie,le,te,de,Y,Ze,_e,z,O,rt,oe,at,nt,ve,sa,ia,Je,Ae,la,be,da,ca;return{c(){T=n("p"),L=r("The "),x=n("a"),S=r("Trainer"),fe=r(` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),R=l(),W=n("ul"),V=n("li"),ge=r("your model always return tuples or subclasses of "),ee=n("a"),G=r("ModelOutput"),ie=r("."),le=l(),te=n("li"),de=r("your model can compute the loss if a "),Y=n("code"),Ze=r("labels"),_e=r(` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),z=l(),O=n("li"),rt=r("your model can accept multiple label arguments (use the "),oe=n("code"),at=r("label_names"),nt=r(" in your "),ve=n("a"),sa=r("TrainingArguments"),ia=r(" to indicate their name to the "),Je=n("a"),Ae=r("Trainer"),la=r(") but none of them should be named "),be=n("code"),da=r('"label"'),ca=r("."),this.h()},l(Z){T=s(Z,"P",{});var H=i(T);L=a(H,"The "),x=s(H,"A",{href:!0});var Ks=i(x);S=a(Ks,"Trainer"),Ks.forEach(o),fe=a(H,` class is optimized for \u{1F917} Transformers models and can have surprising behaviors
when you use it on other models. When using it on your own model, make sure:`),H.forEach(o),R=d(Z),W=s(Z,"UL",{});var ye=i(W);V=s(ye,"LI",{});var Lo=i(V);ge=a(Lo,"your model always return tuples or subclasses of "),ee=s(Lo,"A",{href:!0});var Qs=i(ee);G=a(Qs,"ModelOutput"),Qs.forEach(o),ie=a(Lo,"."),Lo.forEach(o),le=d(ye),te=s(ye,"LI",{});var Xt=i(te);de=a(Xt,"your model can compute the loss if a "),Y=s(Xt,"CODE",{});var D=i(Y);Ze=a(D,"labels"),D.forEach(o),_e=a(Xt,` argument is provided and that loss is returned as the first
element of the tuple (if your model returns tuples)`),Xt.forEach(o),z=d(ye),O=s(ye,"LI",{});var B=i(O);rt=a(B,"your model can accept multiple label arguments (use the "),oe=s(B,"CODE",{});var Fo=i(oe);at=a(Fo,"label_names"),Fo.forEach(o),nt=a(B," in your "),ve=s(B,"A",{href:!0});var ei=i(ve);sa=a(ei,"TrainingArguments"),ei.forEach(o),ia=a(B," to indicate their name to the "),Je=s(B,"A",{href:!0});var ti=i(Je);Ae=a(ti,"Trainer"),ti.forEach(o),la=a(B,") but none of them should be named "),be=s(B,"CODE",{});var oi=i(be);da=a(oi,'"label"'),oi.forEach(o),ca=a(B,"."),B.forEach(o),ye.forEach(o),this.h()},h(){m(x,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(ee,"href","/docs/transformers/pr_15750/en/main_classes/output#transformers.file_utils.ModelOutput"),m(ve,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(Je,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer")},m(Z,H){p(Z,T,H),e(T,L),e(T,x),e(x,S),e(T,fe),p(Z,R,H),p(Z,W,H),e(W,V),e(V,ge),e(V,ee),e(ee,G),e(V,ie),e(W,le),e(W,te),e(te,de),e(te,Y),e(Y,Ze),e(te,_e),e(W,z),e(W,O),e(O,rt),e(O,oe),e(oe,at),e(O,nt),e(O,ve),e(ve,sa),e(O,ia),e(O,Je),e(Je,Ae),e(O,la),e(O,be),e(be,da),e(O,ca)},d(Z){Z&&o(T),Z&&o(R),Z&&o(W)}}}function dL(Ye){let T,L,x,S,fe,R,W,V,ge,ee,G,ie,le,te,de,Y,Ze;return{c(){T=n("p"),L=r("To use this method, you need to have provided a "),x=n("code"),S=r("model_init"),fe=r(" when initializing your "),R=n("a"),W=r("Trainer"),V=r(`: we need to
reinitialize the model at each new run. This is incompatible with the `),ge=n("code"),ee=r("optimizers"),G=r(` argument, so you need to
subclass `),ie=n("a"),le=r("Trainer"),te=r(" and override the method "),de=n("a"),Y=r("create_optimizer_and_scheduler()"),Ze=r(` for custom
optimizer/scheduler.`),this.h()},l(_e){T=s(_e,"P",{});var z=i(T);L=a(z,"To use this method, you need to have provided a "),x=s(z,"CODE",{});var O=i(x);S=a(O,"model_init"),O.forEach(o),fe=a(z," when initializing your "),R=s(z,"A",{href:!0});var rt=i(R);W=a(rt,"Trainer"),rt.forEach(o),V=a(z,`: we need to
reinitialize the model at each new run. This is incompatible with the `),ge=s(z,"CODE",{});var oe=i(ge);ee=a(oe,"optimizers"),oe.forEach(o),G=a(z,` argument, so you need to
subclass `),ie=s(z,"A",{href:!0});var at=i(ie);le=a(at,"Trainer"),at.forEach(o),te=a(z," and override the method "),de=s(z,"A",{href:!0});var nt=i(de);Y=a(nt,"create_optimizer_and_scheduler()"),nt.forEach(o),Ze=a(z,` for custom
optimizer/scheduler.`),z.forEach(o),this.h()},h(){m(R,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(ie,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(de,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.create_optimizer_and_scheduler")},m(_e,z){p(_e,T,z),e(T,L),e(T,x),e(x,S),e(T,fe),e(T,R),e(R,W),e(T,V),e(T,ge),e(ge,ee),e(T,G),e(T,ie),e(ie,le),e(T,te),e(T,de),e(de,Y),e(T,Ze)},d(_e){_e&&o(T)}}}function cL(Ye){let T,L;return{c(){T=n("p"),L=r(`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`)},l(x){T=s(x,"P",{});var S=i(T);L=a(S,`If your predictions or labels have different sequence length (for instance because you\u2019re doing dynamic padding
in a token classification task) the predictions will be padded (on the right) to allow for concatenation into
one array. The padding index is -100.`),S.forEach(o)},m(x,S){p(x,T,S),e(T,L)},d(x){x&&o(T)}}}function pL(Ye){let T,L;return{c(){T=n("p"),L=r(`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`)},l(x){T=s(x,"P",{});var S=i(T);L=a(S,`If your predictions or labels have different sequence lengths (for instance because you\u2019re doing dynamic
padding in a token classification task) the predictions will be padded (on the right) to allow for
concatenation into one array. The padding index is -100.`),S.forEach(o)},m(x,S){p(x,T,S),e(T,L)},d(x){x&&o(T)}}}function mL(Ye){let T,L,x,S,fe,R,W,V,ge,ee,G,ie,le,te,de,Y,Ze,_e,z,O,rt,oe,at,nt,ve,sa,ia,Je,Ae,la,be,da,ca,Z,H,Ks,ye,Lo,Qs,Xt,D,B,Fo,ei,ti,oi,ri,ac,Kb,Qb,ey,ai,nc,ty,oy,ry,ni,sc,ay,ny,sy,st,ic,iy,ly,lc,dy,cy,dc,py,my,hy,si,cc,uy,fy,gy,ii,pc,_y,vy,by,li,mc,yy,wy,Ey,di,hc,Ty,$y,ky,ci,uc,xy,Ay,Dy,pi,fc,qy,Py,Sy,mi,gc,Cy,Oy,Pg,Ro,Sg,Wo,Iy,hi,Uy,zy,Cg,pa,Og,it,Ny,ui,Ly,Fy,fi,Ry,Wy,Ig,Kt,Go,_c,ma,Gy,vc,jy,Ug,b,ha,My,bc,Vy,Hy,yc,By,Yy,we,jo,wc,Zy,Jy,gi,Xy,Ky,Qy,J,Ec,e0,t0,Tc,o0,r0,$c,a0,n0,kc,s0,i0,xc,l0,d0,Ac,c0,p0,m0,_i,Dc,h0,u0,f0,De,qc,g0,_0,Pc,v0,b0,Sc,y0,w0,Cc,E0,T0,$0,qe,Oc,k0,x0,Ic,A0,D0,Uc,q0,P0,zc,S0,C0,O0,Mo,ua,I0,fa,U0,Nc,z0,N0,L0,Vo,ga,F0,_a,R0,Lc,W0,G0,j0,lt,va,M0,Fc,V0,H0,Rc,B0,Y0,dt,ba,Z0,Wc,J0,X0,ya,K0,Gc,Q0,e2,t2,ct,wa,o2,jc,r2,a2,Xe,n2,Mc,s2,i2,Vc,l2,d2,Hc,c2,p2,m2,Ho,Ea,h2,Bc,u2,f2,Pe,Ta,g2,Yc,_2,v2,$a,b2,Zc,y2,w2,E2,Jc,T2,$2,pt,ka,k2,Qt,x2,Xc,A2,D2,Kc,q2,P2,S2,Qc,C2,O2,Bo,xa,I2,Aa,U2,vi,z2,N2,L2,mt,Da,F2,qa,R2,ep,W2,G2,j2,tp,M2,V2,Yo,Pa,H2,op,B2,Y2,ht,Sa,Z2,Ca,J2,rp,X2,K2,Q2,ap,ew,tw,Se,Oa,ow,Ia,rw,np,aw,nw,sw,eo,iw,sp,lw,dw,ip,cw,pw,mw,lp,hw,uw,ut,Ua,fw,Ee,gw,dp,_w,vw,cp,bw,yw,pp,ww,Ew,mp,Tw,$w,kw,Zo,xw,Jo,za,Aw,Na,Dw,hp,qw,Pw,Sw,Xo,La,Cw,up,Ow,Iw,Ko,Fa,Uw,Ra,zw,fp,Nw,Lw,Fw,ft,Wa,Rw,Ga,Ww,gp,Gw,jw,Mw,_p,Vw,Hw,k,ja,Bw,vp,Yw,Zw,bp,Jw,Xw,yp,Kw,Qw,to,eE,wp,tE,oE,Ep,rE,aE,nE,Tp,sE,iE,Ma,lE,$p,kp,dE,cE,Ke,Te,pE,xp,mE,hE,Ap,uE,fE,Dp,gE,_E,qp,vE,bE,yE,oo,wE,Pp,EE,TE,Sp,$E,kE,xE,bi,Cp,AE,DE,qE,gt,Op,PE,SE,Ip,CE,OE,Up,IE,UE,zE,zp,NE,LE,Np,FE,RE,Va,WE,Lp,GE,jE,ME,Qe,VE,Fp,HE,BE,Rp,YE,ZE,Wp,JE,XE,KE,re,QE,yi,eT,tT,Gp,oT,rT,jp,aT,nT,Mp,sT,iT,Vp,lT,dT,cT,I,pT,Hp,mT,hT,Bp,uT,fT,Yp,gT,_T,Zp,vT,bT,Ha,yT,wT,Jp,ET,TT,Xp,$T,kT,Kp,xT,AT,Qp,DT,qT,em,PT,ST,CT,$e,OT,wi,IT,UT,tm,zT,NT,Ei,LT,FT,om,RT,WT,GT,rm,jT,MT,Qo,Ba,VT,am,HT,BT,_t,Ya,YT,Za,ZT,nm,JT,XT,KT,Ti,QT,sm,e5,t5,vt,Ja,o5,Xa,r5,im,a5,n5,s5,Ka,i5,lm,l5,d5,c5,X,Qa,p5,dm,m5,h5,en,u5,cm,f5,g5,_5,er,v5,tn,b5,pm,y5,w5,E5,ro,ao,T5,mm,$5,k5,hm,x5,A5,D5,no,q5,um,P5,S5,fm,C5,O5,I5,so,U5,gm,z5,N5,_m,L5,F5,R5,bt,on,W5,io,G5,vm,j5,M5,bm,V5,H5,B5,ym,Y5,Z5,yt,rn,J5,lo,X5,wm,K5,Q5,Em,e4,t4,o4,Tm,r4,a4,tr,an,n4,et,s4,$m,i4,l4,km,d4,c4,xm,p4,m4,h4,or,nn,u4,sn,f4,Am,g4,_4,v4,Ce,ln,b4,dn,y4,Dm,w4,E4,T4,qm,$4,k4,cn,x4,Pm,A4,D4,q4,wt,pn,P4,mn,S4,Sm,C4,O4,I4,Cm,U4,z4,Et,hn,N4,Om,L4,F4,Im,R4,W4,rr,un,G4,Um,j4,M4,Tt,fn,V4,zm,H4,B4,Nm,Y4,zg,co,ar,Lm,gn,Z4,Fm,J4,Ng,po,Oe,_n,X4,Rm,K4,Q4,vn,e$,Wm,t$,o$,r$,Gm,a$,n$,K,bn,s$,jm,i$,l$,yn,d$,Mm,c$,p$,m$,nr,h$,wn,u$,Vm,f$,g$,_$,mo,ho,v$,Hm,b$,y$,Bm,w$,E$,T$,uo,$$,Ym,k$,x$,Zm,A$,D$,q$,fo,P$,Jm,S$,C$,Xm,O$,I$,Lg,go,sr,Km,En,U$,Qm,z$,Fg,N,Tn,N$,$n,L$,eh,F$,R$,W$,_o,G$,$i,j$,M$,kn,V$,H$,B$,ce,xn,Y$,th,Z$,J$,vo,X$,oh,K$,Q$,rh,e3,t3,o3,bo,r3,ah,a3,n3,nh,s3,i3,l3,An,d3,sh,c3,p3,m3,ir,Dn,h3,ih,u3,f3,$t,qn,g3,lh,_3,v3,yo,b3,dh,y3,w3,ch,E3,T3,$3,lr,Pn,k3,Sn,x3,ph,A3,D3,q3,dr,Cn,P3,mh,S3,C3,cr,On,O3,hh,I3,Rg,wo,pr,uh,In,U3,fh,z3,Wg,ae,Un,N3,zn,L3,gh,F3,R3,W3,Eo,G3,ki,j3,M3,Nn,V3,H3,B3,ne,Y3,_h,Z3,J3,vh,X3,K3,bh,Q3,ek,yh,tk,ok,wh,rk,ak,nk,q,sk,Eh,ik,lk,Th,dk,ck,$h,pk,mk,kh,hk,uk,xh,fk,gk,Ah,_k,vk,Dh,bk,yk,qh,wk,Ek,Ph,Tk,$k,Sh,kk,xk,Ch,Ak,Dk,Oh,qk,Pk,Ih,Sk,Ck,Gg,To,mr,Uh,Ln,Ok,zh,Ik,jg,pe,Uk,xi,zk,Nk,Nh,Lk,Fk,Ai,Rk,Wk,Lh,Gk,jk,Mg,hr,Mk,Di,Vk,Hk,Vg,ur,qi,Fh,Bk,Yk,Zk,Pi,Rh,Jk,Xk,Hg,Ie,Kk,Wh,Qk,e7,Gh,t7,o7,Si,r7,a7,Bg,fr,gr,jh,n7,s7,Mh,i7,l7,d7,Ci,Vh,c7,p7,Yg,$o,_r,Hh,Fn,m7,Bh,h7,Zg,Ue,u7,Oi,f7,g7,Yh,_7,v7,Zh,b7,y7,Jg,kt,w7,Jh,E7,T7,Ii,$7,k7,Xg,vr,Ui,Xh,x7,A7,D7,zi,Kh,q7,P7,Kg,ze,S7,Ni,C7,O7,Qh,I7,U7,eu,z7,N7,Qg,Q,L7,Li,F7,R7,tu,W7,G7,ou,j7,M7,ru,V7,H7,Fi,B7,Y7,e_,Ri,Z7,t_,Rn,o_,Wi,J7,r_,Wn,a_,Gi,X7,n_,Gn,s_,ji,K7,i_,Mi,Q7,l_,jn,d_,br,ex,au,tx,ox,c_,ko,yr,nu,Mn,rx,su,ax,p_,me,nx,Vi,sx,ix,iu,lx,dx,lu,cx,px,du,mx,hx,m_,xt,ux,Vn,fx,gx,cu,_x,vx,h_,xo,wr,pu,Hn,bx,mu,yx,u_,Hi,wx,f_,Er,Ex,Bn,hu,Tx,$x,g_,Yn,__,At,kx,Zn,uu,xx,Ax,Jn,fu,Dx,qx,v_,Xn,b_,Kn,y_,Tr,Px,Bi,Sx,Cx,w_,Yi,Ox,E_,Zi,Ix,T_,Ji,gu,_u,Ux,$_,$r,zx,vu,Nx,Lx,k_,Xi,Fx,x_,Qn,A_,Dt,Rx,bu,Wx,Gx,yu,jx,Mx,D_,Ki,Vx,q_,es,P_,qt,Hx,wu,Bx,Yx,Eu,Zx,Jx,S_,Pt,Xx,Tu,Kx,Qx,ts,$u,e6,t6,C_,os,O_,Qi,o6,I_,rs,U_,el,r6,z_,as,N_,tl,a6,L_,ol,ku,xu,n6,F_,kr,s6,Au,i6,l6,R_,rl,ns,d6,Du,c6,p6,W_,ss,G_,is,qu,m6,j_,ls,M_,St,h6,Pu,u6,f6,Su,g6,_6,V_,al,v6,H_,ds,B_,nl,b6,Y_,xr,y6,Cu,w6,E6,Z_,Ao,Ar,Ou,cs,T6,Iu,$6,J_,Dr,k6,sl,x6,A6,X_,Ne,D6,ps,q6,P6,ms,S6,C6,hs,O6,I6,K_,il,U6,Q_,ll,ev,Do,qr,Uu,us,z6,zu,N6,tv,dl,L6,ov,Ct,F6,fs,R6,W6,gs,G6,j6,rv,cl,M6,av,_s,nv,pl,V6,sv,Ot,H6,Nu,B6,Y6,Lu,Z6,J6,iv,qo,Pr,Fu,vs,X6,Ru,K6,lv,ml,Q6,dv,Le,eA,Wu,tA,oA,Gu,rA,aA,ju,nA,sA,cv,It,iA,Mu,lA,dA,Vu,cA,pA,pv,bs,mv,Sr,mA,ys,hA,uA,hv,Po,Cr,Hu,ws,fA,Bu,gA,uv,hl,_A,fv,Es,gv,Ut,vA,Yu,bA,yA,Zu,wA,EA,_v,ul,TA,vv,Ts,bv,fl,$A,yv,Or,kA,Ju,xA,AA,wv,tt,Xu,DA,qA,Ku,PA,SA,Qu,CA,OA,Ev,gl,IA,Tv,$s,$v,_l,UA,kv,Fe,zA,ef,NA,LA,tf,FA,RA,of,WA,GA,xv,So,Ir,rf,ks,jA,af,MA,Av,zt,VA,nf,HA,BA,sf,YA,ZA,Dv,vl,JA,qv,bl,XA,Pv,Ur,KA,lf,QA,e9,Sv,xs,Cv,j,t9,df,o9,r9,cf,a9,n9,pf,s9,i9,mf,l9,d9,hf,c9,p9,uf,m9,h9,Ov,yl,u9,Iv,Co,zr,ff,As,f9,gf,g9,Uv,Re,_9,Ds,v9,b9,wl,y9,w9,qs,E9,T9,zv,We,_f,$9,k9,vf,x9,A9,bf,D9,q9,yf,P9,Nv,El,S9,Lv,Ps,wf,C9,O9,Fv,Tl,I9,Rv,Ss,Wv,Nt,U9,Ef,z9,N9,Tf,L9,F9,Gv,Cs,jv,Lt,R9,$f,W9,G9,Os,j9,M9,Mv,Nr,V9,$l,H9,B9,Vv,kl,Y9,Hv,Is,kf,Z9,J9,Bv,Us,Yv,xl,X9,Zv,zs,Jv,Ns,xf,K9,Q9,Xv,Ls,Kv,Al,e8,Qv,Fs,e1,Dl,t8,t1,Lr,o8,Rs,r8,a8,o1,Ws,Af,n8,s8,r1,Ft,i8,Df,l8,d8,qf,c8,p8,a1,Fr,m8,Pf,h8,u8,n1,Gs,s1,ql,f8,i1,Ge,Sf,g8,_8,Cf,v8,b8,js,y8,Of,w8,E8,T8,Ms,$8,If,k8,x8,l1,Vs,ot,A8,Uf,D8,q8,zf,P8,S8,Nf,C8,O8,d1,Rr,I8,Lf,U8,z8,c1,Hs,p1,Oo,Ff,N8,L8,Rf,F8,R8,m1,Rt,W8,Wf,G8,j8,Gf,M8,V8,h1,Pl,H8,u1,he,jf,B8,Y8,Mf,Z8,J8,Bs,X8,Vf,K8,Q8,eD,Io,tD,Hf,oD,rD,Bf,aD,nD,sD,Yf,iD,f1,Sl,lD,g1,Wr,Uo,dD,Zf,cD,pD,Jf,mD,hD,uD,ke,fD,Xf,gD,_D,Kf,vD,bD,Qf,yD,wD,eg,ED,TD,_1,Cl,$D,v1,y,kD,Ol,xD,tg,AD,Il,DD,og,qD,Ul,PD,rg,SD,zl,CD,ag,OD,Nl,ID,ng,UD,Ll,zD,sg,ND,Fl,LD,ig,FD,Rl,RD,lg,WD,Wl,GD,dg,jD,Gl,MD,cg,VD,jl,HD,pg,BD,Ml,YD,mg,ZD,Vl,JD,hg,XD,Hl,KD,ug,QD,Bl,eq,fg,tq,Yl,oq,gg,rq,Zl,aq,_g,nq,Jl,sq,vg,iq,Xl,lq,bg,dq,Kl,cq,yg,pq,Ql,mq,wg,hq,ed,uq,Eg,fq,td,gq,Tg,_q,b1;return R=new se({}),Ro=new Xb({props:{warning:"&lcub;true}",$$slots:{default:[lL]},$$scope:{ctx:Ye}}}),pa=new P({props:{code:`from torch import nn
from transformers import Trainer


class CustomTrainer(Trainer):
    def compute_loss(self, model, inputs, return_outputs=False):
        labels = inputs.get("labels")
        # forward pass
        outputs = model(**inputs)
        logits = outputs.get("logits")
        # compute custom loss (suppose one has 3 labels with different weights)
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([1.0, 2.0, 3.0]))
        loss = loss_fct(logits.view(-1, self.model.config.num_labels), labels.view(-1))
        return (loss, outputs) if return_outputs else loss,`,highlighted:`<span class="hljs-keyword">from</span> torch <span class="hljs-keyword">import</span> nn
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer


<span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomTrainer</span>(<span class="hljs-title class_ inherited__">Trainer</span>):
    <span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_loss</span>(<span class="hljs-params">self, model, inputs, return_outputs=<span class="hljs-literal">False</span></span>):
        labels = inputs.get(<span class="hljs-string">&quot;labels&quot;</span>)
        <span class="hljs-comment"># forward pass</span>
        outputs = model(**inputs)
        logits = outputs.get(<span class="hljs-string">&quot;logits&quot;</span>)
        <span class="hljs-comment"># compute custom loss (suppose one has 3 labels with different weights)</span>
        loss_fct = nn.CrossEntropyLoss(weight=torch.tensor([<span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>]))
        loss = loss_fct(logits.view(-<span class="hljs-number">1</span>, self.model.config.num_labels), labels.view(-<span class="hljs-number">1</span>))
        <span class="hljs-keyword">return</span> (loss, outputs) <span class="hljs-keyword">if</span> return_outputs <span class="hljs-keyword">else</span> loss`}}),ma=new se({}),ha=new $({props:{name:"class transformers.Trainer",anchor:"transformers.Trainer",parameters:[{name:"model",val:": typing.Union[transformers.modeling_utils.PreTrainedModel, torch.nn.modules.module.Module] = None"},{name:"args",val:": TrainingArguments = None"},{name:"data_collator",val:": typing.Optional[DataCollator] = None"},{name:"train_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"tokenizer",val:": typing.Optional[transformers.tokenization_utils_base.PreTrainedTokenizerBase] = None"},{name:"model_init",val:": typing.Callable[[], transformers.modeling_utils.PreTrainedModel] = None"},{name:"compute_metrics",val:": typing.Union[typing.Callable[[transformers.trainer_utils.EvalPrediction], typing.Dict], NoneType] = None"},{name:"callbacks",val:": typing.Optional[typing.List[transformers.trainer_callback.TrainerCallback]] = None"},{name:"optimizers",val:": typing.Tuple[torch.optim.optimizer.Optimizer, torch.optim.lr_scheduler.LambdaLR] = (None, None)"},{name:"preprocess_logits_for_metrics",val:": typing.Callable[[torch.Tensor, torch.Tensor], torch.Tensor] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L199",parametersDescription:[{anchor:"transformers.Trainer.model",description:`<strong>model</strong> (<a href="/docs/transformers/pr_15750/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> or <code>torch.nn.Module</code>, <em>optional</em>) &#x2014;
The model to train, evaluate or use for predictions. If not provided, a <code>model_init</code> must be passed.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a> is optimized to work with the <a href="/docs/transformers/pr_15750/en/main_classes/model#transformers.PreTrainedModel">PreTrainedModel</a> provided by the library. You can still use
your own models defined as <code>torch.nn.Module</code> as long as they work the same way as the &#x1F917; Transformers
models.</p>

					</div>`,name:"model"},{anchor:"transformers.Trainer.args",description:`<strong>args</strong> (<a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a>, <em>optional</em>) &#x2014;
The arguments to tweak for training. Will default to a basic instance of <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments">TrainingArguments</a> with the
<code>output_dir</code> set to a directory named <em>tmp_trainer</em> in the current directory if not provided.`,name:"args"},{anchor:"transformers.Trainer.data_collator",description:`<strong>data_collator</strong> (<code>DataCollator</code>, <em>optional</em>) &#x2014;
The function to use to form a batch from a list of elements of <code>train_dataset</code> or <code>eval_dataset</code>. Will
default to <a href="/docs/transformers/pr_15750/en/main_classes/data_collator#transformers.default_data_collator">default_data_collator()</a> if no <code>tokenizer</code> is provided, an instance of
<a href="/docs/transformers/pr_15750/en/main_classes/data_collator#transformers.DataCollatorWithPadding">DataCollatorWithPadding</a> otherwise.`,name:"data_collator"},{anchor:"transformers.Trainer.train_dataset",description:`<strong>train_dataset</strong> (<code>torch.utils.data.Dataset</code> or <code>torch.utils.data.IterableDataset</code>, <em>optional</em>) &#x2014;
The dataset to use for training. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.</p>
<p>Note that if it&#x2019;s a <code>torch.utils.data.IterableDataset</code> with some randomization and you are training in a
distributed fashion, your iterable dataset should either use a internal attribute <code>generator</code> that is a
<code>torch.Generator</code> for the randomization that must be identical on all processes (and the Trainer will
manually set the seed of this <code>generator</code> at each epoch) or have a <code>set_epoch()</code> method that internally
sets the seed of the RNGs used.`,name:"train_dataset"},{anchor:"transformers.Trainer.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The dataset to use for evaluation. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed.`,name:"eval_dataset"},{anchor:"transformers.Trainer.tokenizer",description:`<strong>tokenizer</strong> (<a href="/docs/transformers/pr_15750/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase">PreTrainedTokenizerBase</a>, <em>optional</em>) &#x2014;
The tokenizer used to preprocess the data. If provided, will be used to automatically pad the inputs the
maximum length when batching inputs, and it will be saved along the model to make it easier to rerun an
interrupted training or reuse the fine-tuned model.`,name:"tokenizer"},{anchor:"transformers.Trainer.model_init",description:`<strong>model_init</strong> (<code>Callable[[], PreTrainedModel]</code>, <em>optional</em>) &#x2014;
A function that instantiates the model to be used. If provided, each call to <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.train">train()</a> will start
from a new instance of the model as given by this function.</p>
<p>The function may have zero argument, or a single one containing the optuna/Ray Tune/SigOpt trial object, to
be able to choose different architectures according to hyper parameters (such as layer count, sizes of
inner layers, dropout probabilities etc).`,name:"model_init"},{anchor:"transformers.Trainer.compute_metrics",description:`<strong>compute_metrics</strong> (<code>Callable[[EvalPrediction], Dict]</code>, <em>optional</em>) &#x2014;
The function that will be used to compute metrics at evaluation. Must take a <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.EvalPrediction">EvalPrediction</a> and return
a dictionary string to metric values.`,name:"compute_metrics"},{anchor:"transformers.Trainer.callbacks",description:`<strong>callbacks</strong> (List of <a href="/docs/transformers/pr_15750/en/main_classes/callback#transformers.TrainerCallback">TrainerCallback</a>, <em>optional</em>) &#x2014;
A list of callbacks to customize the training loop. Will add those to the list of default callbacks
detailed in <a href="callback">here</a>.</p>
<p>If you want to remove one of the default callbacks used, use the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.remove_callback">Trainer.remove_callback()</a> method.`,name:"callbacks"},{anchor:"transformers.Trainer.optimizers",description:`<strong>optimizers</strong> (<code>Tuple[torch.optim.Optimizer, torch.optim.lr_scheduler.LambdaLR]</code>, <em>optional</em>) &#x2014; A tuple
containing the optimizer and the scheduler to use. Will default to an instance of <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> on your model
and a scheduler given by <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.get_linear_schedule_with_warmup">get_linear_schedule_with_warmup()</a> controlled by <code>args</code>.`,name:"optimizers"},{anchor:"transformers.Trainer.preprocess_logits_for_metrics",description:`<strong>preprocess_logits_for_metrics</strong> (<code>Callable[[torch.Tensor, torch.Tensor], torch.Tensor]</code>, <em>optional</em>) &#x2014;
A function that preprocess the logits right before caching them at each evaluation step. Must take two
tensors, the logits and the labels, and return the logits once processed as desired. The modifications made
by this function will be reflected in the predictions received by <code>compute_metrics</code>.</p>
<p>Note that the labels (second parameter) will be <code>None</code> if the dataset does not have them.`,name:"preprocess_logits_for_metrics"}]}}),ua=new $({props:{name:"add_callback",anchor:"transformers.Trainer.add_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L513",parametersDescription:[{anchor:"transformers.Trainer.add_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will instantiate a member of that class.`,name:"callback"}]}}),ga=new $({props:{name:"autocast_smart_context_manager",anchor:"transformers.Trainer.autocast_smart_context_manager",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L1940"}}),va=new $({props:{name:"compute_loss",anchor:"transformers.Trainer.compute_loss",parameters:[{name:"model",val:""},{name:"inputs",val:""},{name:"return_outputs",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2004"}}),ba=new $({props:{name:"create_optimizer",anchor:"transformers.Trainer.create_optimizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L827"}}),wa=new $({props:{name:"create_optimizer_and_scheduler",anchor:"transformers.Trainer.create_optimizer_and_scheduler",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L816"}}),Ea=new $({props:{name:"create_scheduler",anchor:"transformers.Trainer.create_scheduler",parameters:[{name:"num_training_steps",val:": int"},{name:"optimizer",val:": Optimizer = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L912",parametersDescription:[{anchor:"transformers.Trainer.create_scheduler.num_training_steps",description:"<strong>num_training_steps</strong> (int) &#x2014; The number of training steps to do.",name:"num_training_steps"}]}}),Ta=new $({props:{name:"evaluate",anchor:"transformers.Trainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2218",parametersDescription:[{anchor:"transformers.Trainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Trainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is &#x201C;eval&#x201D; (default)`,name:"metric_key_prefix"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),ka=new $({props:{name:"evaluation_loop",anchor:"transformers.Trainer.evaluation_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2346"}}),xa=new $({props:{name:"floating_point_ops",anchor:"transformers.Trainer.floating_point_ops",parameters:[{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2667",parametersDescription:[{anchor:"transformers.Trainer.floating_point_ops.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.`,name:"inputs"}],returnDescription:`
<p>The number of floating-point operations.</p>
`,returnType:`
<p><code>int</code></p>
`}}),Da=new $({props:{name:"get_eval_dataloader",anchor:"transformers.Trainer.get_eval_dataloader",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L726",parametersDescription:[{anchor:"transformers.Trainer.get_eval_dataloader.eval_dataset",description:`<strong>eval_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
If provided, will override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not accepted by
the <code>model.forward()</code> method are automatically removed. It must implement <code>__len__</code>.`,name:"eval_dataset"}]}}),Pa=new $({props:{name:"get_optimizer_cls_and_kwargs",anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs",parameters:[{name:"args",val:": TrainingArguments"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L864",parametersDescription:[{anchor:"transformers.Trainer.get_optimizer_cls_and_kwargs.args",description:`<strong>args</strong> (<code>transformers.training_args.TrainingArguments</code>) &#x2014;
The training arguments for the training session.`,name:"args"}]}}),Sa=new $({props:{name:"get_test_dataloader",anchor:"transformers.Trainer.get_test_dataloader",parameters:[{name:"test_dataset",val:": Dataset"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L773",parametersDescription:[{anchor:"transformers.Trainer.get_test_dataloader.test_dataset",description:`<strong>test_dataset</strong> (<code>torch.utils.data.Dataset</code>, <em>optional</em>) &#x2014;
The test dataset to use. If it is an <code>datasets.Dataset</code>, columns not accepted by the <code>model.forward()</code>
method are automatically removed. It must implement <code>__len__</code>.`,name:"test_dataset"}]}}),Oa=new $({props:{name:"get_train_dataloader",anchor:"transformers.Trainer.get_train_dataloader",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L651"}}),Ua=new $({props:{name:"hyperparameter_search",anchor:"transformers.Trainer.hyperparameter_search",parameters:[{name:"hp_space",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], typing.Dict[str, float]], NoneType] = None"},{name:"compute_objective",val:": typing.Union[typing.Callable[[typing.Dict[str, float]], float], NoneType] = None"},{name:"n_trials",val:": int = 20"},{name:"direction",val:": str = 'minimize'"},{name:"backend",val:": typing.Union[ForwardRef('str'), transformers.trainer_utils.HPSearchBackend, NoneType] = None"},{name:"hp_name",val:": typing.Union[typing.Callable[[ForwardRef('optuna.Trial')], str], NoneType] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L1801",parametersDescription:[{anchor:"transformers.Trainer.hyperparameter_search.hp_space",description:`<strong>hp_space</strong> (<code>Callable[[&quot;optuna.Trial&quot;], Dict[str, float]]</code>, <em>optional</em>) &#x2014;
A function that defines the hyperparameter search space. Will default to
<code>default_hp_space_optuna()</code>or <code>default_hp_space_ray()</code>or
<code>default_hp_space_sigopt()</code>depending on your backend.`,name:"hp_space"},{anchor:"transformers.Trainer.hyperparameter_search.compute_objective",description:`<strong>compute_objective</strong> (<code>Callable[[Dict[str, float]], float]</code>, <em>optional</em>) &#x2014;
A function computing the objective to minimize or maximize from the metrics returned by the <code>evaluate</code>
method. Will default to <code>default_compute_objective()</code>`,name:"compute_objective"},{anchor:"transformers.Trainer.hyperparameter_search.n_trials",description:`<strong>n_trials</strong> (<code>int</code>, <em>optional</em>, defaults to 100) &#x2014;
The number of trial runs to test.`,name:"n_trials"},{anchor:"transformers.Trainer.hyperparameter_search.direction(str,",description:`<strong>direction(<code>str</code>,</strong> <em>optional</em>, defaults to <code>&quot;minimize&quot;</code>) &#x2014;
Whether to optimize greater or lower objects. Can be <code>&quot;minimize&quot;</code> or <code>&quot;maximize&quot;</code>, you should pick
<code>&quot;minimize&quot;</code> when optimizing the validation loss, <code>&quot;maximize&quot;</code> when optimizing one or several metrics.`,name:"direction(str,"},{anchor:"transformers.Trainer.hyperparameter_search.backend(str",description:`<strong>backend(<code>str</code></strong> or <code>HPSearchBackend</code>, <em>optional</em>) &#x2014;
The backend to use for hyperparameter search. Will default to optuna or Ray Tune or SigOpt, depending
on which one is installed. If all are installed, will default to optuna.
kwargs &#x2014;
Additional keyword arguments passed along to <code>optuna.create_study</code> or <code>ray.tune.run</code>. For more
information see:</p>
<ul>
<li>the documentation of
<a href="https://optuna.readthedocs.io/en/stable/reference/generated/optuna.study.create_study.html" rel="nofollow">optuna.create_study</a></li>
<li>the documentation of <a href="https://docs.ray.io/en/latest/tune/api_docs/execution.html#tune-run" rel="nofollow">tune.run</a></li>
<li>the documentation of <a href="https://app.sigopt.com/docs/endpoints/experiments/create" rel="nofollow">sigopt</a></li>
</ul>`,name:"backend(str"}],returnDescription:`
<p>All the information about the best run.</p>
`}}),Zo=new Xb({props:{warning:"&lcub;true}",$$slots:{default:[dL]},$$scope:{ctx:Ye}}}),za=new $({props:{name:"init_git_repo",anchor:"transformers.Trainer.init_git_repo",parameters:[{name:"at_init",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2685",parametersDescription:[{anchor:"transformers.Trainer.init_git_repo.at_init",description:`<strong>at_init</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether this function is called before any training or not. If <code>self.args.overwrite_output_dir</code> is
<code>True</code> and <code>at_init</code> is <code>True</code>, the path to the repo (which is <code>self.args.output_dir</code>) might be wiped
out.`,name:"at_init"}]}}),La=new $({props:{name:"is_local_process_zero",anchor:"transformers.Trainer.is_local_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2028"}}),Fa=new $({props:{name:"is_world_process_zero",anchor:"transformers.Trainer.is_world_process_zero",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2035"}}),Wa=new $({props:{name:"log",anchor:"transformers.Trainer.log",parameters:[{name:"logs",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L1894",parametersDescription:[{anchor:"transformers.Trainer.log.logs",description:`<strong>logs</strong> (<code>Dict[str, float]</code>) &#x2014;
The values to log.`,name:"logs"}]}}),ja=new $({props:{name:"log_metrics",anchor:"transformers.trainer_pt_utils.log_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_pt_utils.py#L855",parametersDescription:[{anchor:"transformers.trainer_pt_utils.log_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.log_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predictmetrics: metrics dict`,name:"metrics"}]}}),Ma=new P({props:{code:`init_mem_cpu_alloc_delta   =     1301MB
init_mem_cpu_peaked_delta  =      154MB
init_mem_gpu_alloc_delta   =      230MB
init_mem_gpu_peaked_delta  =        0MB
train_mem_cpu_alloc_delta  =     1345MB
train_mem_cpu_peaked_delta =        0MB
train_mem_gpu_alloc_delta  =      693MB
train_mem_gpu_peaked_delta =        7MB,`,highlighted:`<span class="hljs-attr">init_mem_cpu_alloc_delta</span>   =     <span class="hljs-number">1301</span>MB
<span class="hljs-attr">init_mem_cpu_peaked_delta</span>  =      <span class="hljs-number">154</span>MB
<span class="hljs-attr">init_mem_gpu_alloc_delta</span>   =      <span class="hljs-number">230</span>MB
<span class="hljs-attr">init_mem_gpu_peaked_delta</span>  =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_cpu_alloc_delta</span>  =     <span class="hljs-number">1345</span>MB
<span class="hljs-attr">train_mem_cpu_peaked_delta</span> =        <span class="hljs-number">0</span>MB
<span class="hljs-attr">train_mem_gpu_alloc_delta</span>  =      <span class="hljs-number">693</span>MB
<span class="hljs-attr">train_mem_gpu_peaked_delta</span> =        <span class="hljs-number">7</span>MB`}}),Ba=new $({props:{name:"metrics_format",anchor:"transformers.trainer_pt_utils.metrics_format",parameters:[{name:"metrics",val:": typing.Dict[str, float]"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_pt_utils.py#L829",parametersDescription:[{anchor:"transformers.trainer_pt_utils.metrics_format.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"}],returnDescription:`
<p>The reformatted metrics</p>
`,returnType:`
<p>metrics (<code>Dict[str, float]</code>)</p>
`}}),Ya=new $({props:{name:"num_examples",anchor:"transformers.Trainer.num_examples",parameters:[{name:"dataloader",val:": DataLoader"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L929"}}),Ja=new $({props:{name:"pop_callback",anchor:"transformers.Trainer.pop_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L524",parametersDescription:[{anchor:"transformers.Trainer.pop_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will pop the first member of that class found in the list of callbacks.`,name:"callback"}],returnDescription:`
<p>The callback removed, if found.</p>
`,returnType:`
<p><code>TrainerCallback</code></p>
`}}),Qa=new $({props:{name:"predict",anchor:"transformers.Trainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2287",parametersDescription:[{anchor:"transformers.Trainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Trainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Trainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;test&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;test_bleu&#x201D; if the prefix is &#x201C;test&#x201D; (default)`,name:"metric_key_prefix"}]}}),er=new Xb({props:{$$slots:{default:[cL]},$$scope:{ctx:Ye}}}),on=new $({props:{name:"prediction_loop",anchor:"transformers.Trainer.prediction_loop",parameters:[{name:"dataloader",val:": DataLoader"},{name:"description",val:": str"},{name:"prediction_loss_only",val:": typing.Optional[bool] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2862"}}),rn=new $({props:{name:"prediction_step",anchor:"transformers.Trainer.prediction_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"},{name:"prediction_loss_only",val:": bool"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2570",parametersDescription:[{anchor:"transformers.Trainer.prediction_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to evaluate.`,name:"model"},{anchor:"transformers.Trainer.prediction_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"},{anchor:"transformers.Trainer.prediction_step.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>) &#x2014;
Whether or not to return the loss only.`,name:"prediction_loss_only"},{anchor:"transformers.Trainer.prediction_step.ignore_keys",description:`<strong>ignore_keys</strong> (<code>Lst[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"}],returnDescription:`
<p>A tuple with the loss,
logits and labels (each being optional).</p>
`,returnType:`
<p>Tuple[Optional[torch.Tensor], Optional[torch.Tensor], Optional[torch.Tensor]]</p>
`}}),an=new $({props:{name:"push_to_hub",anchor:"transformers.Trainer.push_to_hub",parameters:[{name:"commit_message",val:": typing.Optional[str] = 'End of training'"},{name:"blocking",val:": bool = True"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2808",parametersDescription:[{anchor:"transformers.Trainer.push_to_hub.commit_message",description:`<strong>commit_message</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;End of training&quot;</code>) &#x2014;
Message to commit while pushing.`,name:"commit_message"},{anchor:"transformers.Trainer.push_to_hub.blocking",description:`<strong>blocking</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether the function should return only when the <code>git push</code> has finished.
kwargs &#x2014;
Additional keyword arguments passed along to <code>create_model_card()</code>`,name:"blocking"}],returnDescription:`
<p>The url of the commit of your model in the given repository if <code>blocking=False</code>, a tuple with the url of
the commit and an object to track the progress of the commit if <code>blocking=True</code></p>
`}}),nn=new $({props:{name:"remove_callback",anchor:"transformers.Trainer.remove_callback",parameters:[{name:"callback",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L540",parametersDescription:[{anchor:"transformers.Trainer.remove_callback.callback",description:`<strong>callback</strong> (<code>type</code> or <code>TrainerCallback</code>) &#x2014;
A <code>TrainerCallback</code> class or an instance of a <code>TrainerCallback</code>. In the
first case, will remove the first member of that class found in the list of callbacks.`,name:"callback"}]}}),ln=new $({props:{name:"save_metrics",anchor:"transformers.trainer_pt_utils.save_metrics",parameters:[{name:"split",val:""},{name:"metrics",val:""},{name:"combined",val:" = True"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_pt_utils.py#L945",parametersDescription:[{anchor:"transformers.trainer_pt_utils.save_metrics.split",description:`<strong>split</strong> (<code>str</code>) &#x2014;
Mode/split name: one of <code>train</code>, <code>eval</code>, <code>test</code>, <code>all</code>`,name:"split"},{anchor:"transformers.trainer_pt_utils.save_metrics.metrics",description:`<strong>metrics</strong> (<code>Dict[str, float]</code>) &#x2014;
The metrics returned from train/evaluate/predict`,name:"metrics"},{anchor:"transformers.trainer_pt_utils.save_metrics.combined",description:`<strong>combined</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Creates combined metrics by updating <code>all_results.json</code> with metrics of this call`,name:"combined"}]}}),pn=new $({props:{name:"save_model",anchor:"transformers.Trainer.save_model",parameters:[{name:"output_dir",val:": typing.Optional[str] = None"},{name:"_internal_call",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L2047"}}),hn=new $({props:{name:"save_state",anchor:"transformers.trainer_pt_utils.save_state",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_pt_utils.py#L983"}}),un=new $({props:{name:"train",anchor:"transformers.Trainer.train",parameters:[{name:"resume_from_checkpoint",val:": typing.Union[str, bool, NoneType] = None"},{name:"trial",val:": typing.Union[ForwardRef('optuna.Trial'), typing.Dict[str, typing.Any]] = None"},{name:"ignore_keys_for_eval",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L1093",parametersDescription:[{anchor:"transformers.Trainer.train.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code> or <code>bool</code>, <em>optional</em>) &#x2014;
If a <code>str</code>, local path to a saved checkpoint as saved by a previous instance of <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If a
<code>bool</code> and equals <code>True</code>, load the last checkpoint in <em>args.output_dir</em> as saved by a previous instance
of <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>. If present, training will resume from the model/optimizer/scheduler states loaded here.`,name:"resume_from_checkpoint"},{anchor:"transformers.Trainer.train.trial",description:`<strong>trial</strong> (<code>optuna.Trial</code> or <code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The trial run or the hyperparameter dictionary for hyperparameter search.`,name:"trial"},{anchor:"transformers.Trainer.train.ignore_keys_for_eval",description:`<strong>ignore_keys_for_eval</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions for evaluation during the training.
kwargs &#x2014;
Additional keyword arguments used to hide deprecated arguments`,name:"ignore_keys_for_eval"}]}}),fn=new $({props:{name:"training_step",anchor:"transformers.Trainer.training_step",parameters:[{name:"model",val:": Module"},{name:"inputs",val:": typing.Dict[str, typing.Union[torch.Tensor, typing.Any]]"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer.py#L1955",parametersDescription:[{anchor:"transformers.Trainer.training_step.model",description:`<strong>model</strong> (<code>nn.Module</code>) &#x2014;
The model to train.`,name:"model"},{anchor:"transformers.Trainer.training_step.inputs",description:`<strong>inputs</strong> (<code>Dict[str, Union[torch.Tensor, Any]]</code>) &#x2014;
The inputs and targets of the model.</p>
<p>The dictionary will be unpacked before being fed to the model. Most models expect the targets under the
argument <code>labels</code>. Check your model&#x2019;s documentation for all accepted arguments.`,name:"inputs"}],returnDescription:`
<p>The tensor with training loss on this batch.</p>
`,returnType:`
<p><code>torch.Tensor</code></p>
`}}),gn=new se({}),_n=new $({props:{name:"evaluate",anchor:"transformers.Seq2SeqTrainer.evaluate",parameters:[{name:"eval_dataset",val:": typing.Optional[torch.utils.data.dataset.Dataset] = None"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'eval'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_seq2seq.py#L31",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.evaluate.eval_dataset",description:`<strong>eval_dataset</strong> (<code>Dataset</code>, <em>optional</em>) &#x2014;
Pass a dataset if you wish to override <code>self.eval_dataset</code>. If it is an <code>datasets.Dataset</code>, columns not
accepted by the <code>model.forward()</code> method are automatically removed. It must implement the <code>__len__</code>
method.`,name:"eval_dataset"},{anchor:"transformers.Seq2SeqTrainer.evaluate.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.evaluate.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.evaluate.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.evaluate.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}],returnDescription:`
<p>A dictionary containing the evaluation loss and the potential metrics computed from the predictions. The
dictionary also contains the epoch number which comes from the training state.</p>
`}}),bn=new $({props:{name:"predict",anchor:"transformers.Seq2SeqTrainer.predict",parameters:[{name:"test_dataset",val:": Dataset"},{name:"ignore_keys",val:": typing.Optional[typing.List[str]] = None"},{name:"metric_key_prefix",val:": str = 'test'"},{name:"max_length",val:": typing.Optional[int] = None"},{name:"num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/trainer_seq2seq.py#L72",parametersDescription:[{anchor:"transformers.Seq2SeqTrainer.predict.test_dataset",description:`<strong>test_dataset</strong> (<code>Dataset</code>) &#x2014;
Dataset to run the predictions on. If it is an <code>datasets.Dataset</code>, columns not accepted by the
<code>model.forward()</code> method are automatically removed. Has to implement the method <code>__len__</code>`,name:"test_dataset"},{anchor:"transformers.Seq2SeqTrainer.predict.ignore_keys",description:`<strong>ignore_keys</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
A list of keys in the output of your model (if it is a dictionary) that should be ignored when
gathering predictions.`,name:"ignore_keys"},{anchor:"transformers.Seq2SeqTrainer.predict.metric_key_prefix",description:`<strong>metric_key_prefix</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;eval&quot;</code>) &#x2014;
An optional prefix to be used as the metrics key prefix. For example the metrics &#x201C;bleu&#x201D; will be named
&#x201C;eval_bleu&#x201D; if the prefix is <code>&quot;eval&quot;</code> (default)`,name:"metric_key_prefix"},{anchor:"transformers.Seq2SeqTrainer.predict.max_length",description:`<strong>max_length</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The maximum target length to use when predicting with the generate method.`,name:"max_length"},{anchor:"transformers.Seq2SeqTrainer.predict.num_beams",description:`<strong>num_beams</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of beams for beam search that will be used when predicting with the generate method. 1 means no
beam search.`,name:"num_beams"}]}}),nr=new Xb({props:{$$slots:{default:[pL]},$$scope:{ctx:Ye}}}),En=new se({}),Tn=new $({props:{name:"class transformers.TrainingArguments",anchor:"transformers.TrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": OptimizerNames = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L86",parametersDescription:[{anchor:"transformers.TrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.TrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.TrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.TrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.TrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.TrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.TrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.TrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.TrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.TrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.TrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.TrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.TrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.TrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.TrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.TrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.TrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.TrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.TrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
In case of using a finite iterable dataset the training may stop before reaching the set number of steps
when all data is exhausted`,name:"max_steps"},{anchor:"transformers.TrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.TrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.TrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.TrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.TrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.TrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.TrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.TrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.TrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.TrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.TrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.TrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.TrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.TrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.TrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.TrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.TrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.TrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.TrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.TrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.TrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.TrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or <code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code>
will use AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.TrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.TrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.TrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable tf32 mode, available in Ampere and newer GPU architectures. This is an experimental API
and it may change.`,name:"tf32"},{anchor:"transformers.TrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.TrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.TrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.TrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.TrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.TrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.TrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.TrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.TrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.TrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code>yet.)`,name:"remove_unused_columns"},{anchor:"transformers.TrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the <code>XxxForQuestionAnswering</code> in
which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.TrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>eval_strategy</code>, and in the case
it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.TrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.TrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.TrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.TrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.TrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.TrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.TrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code> <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.TrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code> <em>optional</em>, defaults to <code>&quot;adamw_hf&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_apex_fused, or adafactor.`,name:"optim"},{anchor:"transformers.TrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated. Use <code>--optim adafactor</code> instead.`,name:"adafactor"},{anchor:"transformers.TrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.TrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.TrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations
installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.TrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.TrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.TrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.TrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.TrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the the repo (determined by <code>hub_model_id</code>) and the
content will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.TrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.TrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.TrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code> <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.TrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.TrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"}]}}),xn=new $({props:{name:"get_process_log_level",anchor:"transformers.TrainingArguments.get_process_log_level",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1194"}}),Dn=new $({props:{name:"get_warmup_steps",anchor:"transformers.TrainingArguments.get_warmup_steps",parameters:[{name:"num_training_steps",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1278"}}),qn=new $({props:{name:"main_process_first",anchor:"transformers.TrainingArguments.main_process_first",parameters:[{name:"local",val:" = True"},{name:"desc",val:" = 'work'"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1225",parametersDescription:[{anchor:"transformers.TrainingArguments.main_process_first.local",description:`<strong>local</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
if <code>True</code> first means process of rank 0 of each node if <code>False</code> first means process of rank 0 of node
rank 0 In multi-node environment with a shared filesystem you most likely will want to use
<code>local=False</code> so that only the main process of the first node will do the processing. If however, the
filesystem is not shared, then the main process of each node will need to do the processing, which is
the default behavior.`,name:"local"},{anchor:"transformers.TrainingArguments.main_process_first.desc",description:`<strong>desc</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;work&quot;</code>) &#x2014;
a work description to be used in debug logs`,name:"desc"}]}}),Pn=new $({props:{name:"to_dict",anchor:"transformers.TrainingArguments.to_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1287"}}),Cn=new $({props:{name:"to_json_string",anchor:"transformers.TrainingArguments.to_json_string",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1302"}}),On=new $({props:{name:"to_sanitized_dict",anchor:"transformers.TrainingArguments.to_sanitized_dict",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args.py#L1308"}}),In=new se({}),Un=new $({props:{name:"class transformers.Seq2SeqTrainingArguments",anchor:"transformers.Seq2SeqTrainingArguments",parameters:[{name:"output_dir",val:": str"},{name:"overwrite_output_dir",val:": bool = False"},{name:"do_train",val:": bool = False"},{name:"do_eval",val:": bool = False"},{name:"do_predict",val:": bool = False"},{name:"evaluation_strategy",val:": IntervalStrategy = 'no'"},{name:"prediction_loss_only",val:": bool = False"},{name:"per_device_train_batch_size",val:": int = 8"},{name:"per_device_eval_batch_size",val:": int = 8"},{name:"per_gpu_train_batch_size",val:": typing.Optional[int] = None"},{name:"per_gpu_eval_batch_size",val:": typing.Optional[int] = None"},{name:"gradient_accumulation_steps",val:": int = 1"},{name:"eval_accumulation_steps",val:": typing.Optional[int] = None"},{name:"learning_rate",val:": float = 5e-05"},{name:"weight_decay",val:": float = 0.0"},{name:"adam_beta1",val:": float = 0.9"},{name:"adam_beta2",val:": float = 0.999"},{name:"adam_epsilon",val:": float = 1e-08"},{name:"max_grad_norm",val:": float = 1.0"},{name:"num_train_epochs",val:": float = 3.0"},{name:"max_steps",val:": int = -1"},{name:"lr_scheduler_type",val:": SchedulerType = 'linear'"},{name:"warmup_ratio",val:": float = 0.0"},{name:"warmup_steps",val:": int = 0"},{name:"log_level",val:": typing.Optional[str] = 'passive'"},{name:"log_level_replica",val:": typing.Optional[str] = 'passive'"},{name:"log_on_each_node",val:": bool = True"},{name:"logging_dir",val:": typing.Optional[str] = None"},{name:"logging_strategy",val:": IntervalStrategy = 'steps'"},{name:"logging_first_step",val:": bool = False"},{name:"logging_steps",val:": int = 500"},{name:"logging_nan_inf_filter",val:": str = True"},{name:"save_strategy",val:": IntervalStrategy = 'steps'"},{name:"save_steps",val:": int = 500"},{name:"save_total_limit",val:": typing.Optional[int] = None"},{name:"save_on_each_node",val:": bool = False"},{name:"no_cuda",val:": bool = False"},{name:"seed",val:": int = 42"},{name:"bf16",val:": bool = False"},{name:"fp16",val:": bool = False"},{name:"fp16_opt_level",val:": str = 'O1'"},{name:"half_precision_backend",val:": str = 'auto'"},{name:"bf16_full_eval",val:": bool = False"},{name:"fp16_full_eval",val:": bool = False"},{name:"tf32",val:": bool = None"},{name:"local_rank",val:": int = -1"},{name:"xpu_backend",val:": str = None"},{name:"tpu_num_cores",val:": typing.Optional[int] = None"},{name:"tpu_metrics_debug",val:": bool = False"},{name:"debug",val:": str = ''"},{name:"dataloader_drop_last",val:": bool = False"},{name:"eval_steps",val:": int = None"},{name:"dataloader_num_workers",val:": int = 0"},{name:"past_index",val:": int = -1"},{name:"run_name",val:": typing.Optional[str] = None"},{name:"disable_tqdm",val:": typing.Optional[bool] = None"},{name:"remove_unused_columns",val:": typing.Optional[bool] = True"},{name:"label_names",val:": typing.Optional[typing.List[str]] = None"},{name:"load_best_model_at_end",val:": typing.Optional[bool] = False"},{name:"metric_for_best_model",val:": typing.Optional[str] = None"},{name:"greater_is_better",val:": typing.Optional[bool] = None"},{name:"ignore_data_skip",val:": bool = False"},{name:"sharded_ddp",val:": str = ''"},{name:"deepspeed",val:": typing.Optional[str] = None"},{name:"label_smoothing_factor",val:": float = 0.0"},{name:"optim",val:": OptimizerNames = 'adamw_hf'"},{name:"adafactor",val:": bool = False"},{name:"group_by_length",val:": bool = False"},{name:"length_column_name",val:": typing.Optional[str] = 'length'"},{name:"report_to",val:": typing.Optional[typing.List[str]] = None"},{name:"ddp_find_unused_parameters",val:": typing.Optional[bool] = None"},{name:"ddp_bucket_cap_mb",val:": typing.Optional[int] = None"},{name:"dataloader_pin_memory",val:": bool = True"},{name:"skip_memory_metrics",val:": bool = True"},{name:"use_legacy_prediction_loop",val:": bool = False"},{name:"push_to_hub",val:": bool = False"},{name:"resume_from_checkpoint",val:": typing.Optional[str] = None"},{name:"hub_model_id",val:": str = None"},{name:"hub_strategy",val:": HubStrategy = 'every_save'"},{name:"hub_token",val:": str = None"},{name:"gradient_checkpointing",val:": bool = False"},{name:"fp16_backend",val:": str = 'auto'"},{name:"push_to_hub_model_id",val:": str = None"},{name:"push_to_hub_organization",val:": str = None"},{name:"push_to_hub_token",val:": str = None"},{name:"mp_parameters",val:": str = ''"},{name:"sortish_sampler",val:": bool = False"},{name:"predict_with_generate",val:": bool = False"},{name:"generation_max_length",val:": typing.Optional[int] = None"},{name:"generation_num_beams",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15750/src/transformers/training_args_seq2seq.py#L28",parametersDescription:[{anchor:"transformers.Seq2SeqTrainingArguments.output_dir",description:`<strong>output_dir</strong> (<code>str</code>) &#x2014;
The output directory where the model predictions and checkpoints will be written.`,name:"output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.overwrite_output_dir",description:`<strong>overwrite_output_dir</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>True</code>, overwrite the content of the output directory. Use this to continue training if <code>output_dir</code>
points to a checkpoint directory.`,name:"overwrite_output_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.do_train",description:`<strong>do_train</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run training or not. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used
by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_train"},{anchor:"transformers.Seq2SeqTrainingArguments.do_eval",description:`<strong>do_eval</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to run evaluation on the validation set or not. Will be set to <code>True</code> if <code>evaluation_strategy</code> is
different from <code>&quot;no&quot;</code>. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your
training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.do_predict",description:`<strong>do_predict</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to run predictions on the test set or not. This argument is not directly used by <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s
intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"do_predict"},{anchor:"transformers.Seq2SeqTrainingArguments.evaluation_strategy",description:`<strong>evaluation_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;no&quot;</code>) &#x2014;
The evaluation strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No evaluation is done during training.</li>
<li><code>&quot;steps&quot;</code>: Evaluation is done (and logged) every <code>eval_steps</code>.</li>
<li><code>&quot;epoch&quot;</code>: Evaluation is done at the end of each epoch.</li>
</ul>`,name:"evaluation_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.prediction_loss_only",description:`<strong>prediction_loss_only</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When performing evaluation and generating predictions, only returns the loss.`,name:"prediction_loss_only"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_train_batch_size",description:`<strong>per_device_train_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for training.`,name:"per_device_train_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.per_device_eval_batch_size",description:`<strong>per_device_eval_batch_size</strong> (<code>int</code>, <em>optional</em>, defaults to 8) &#x2014;
The batch size per GPU/TPU core/CPU for evaluation.`,name:"per_device_eval_batch_size"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_accumulation_steps",description:`<strong>gradient_accumulation_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Number of updates steps to accumulate the gradients for, before performing a backward/update pass.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>When using gradient accumulation, one step is counted as one step with backward pass. Therefore, logging,
evaluation, save will be conducted every <code>gradient_accumulation_steps * xxx_step</code> training examples.</p>

					</div>`,name:"gradient_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_accumulation_steps",description:`<strong>eval_accumulation_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of predictions steps to accumulate the output tensors for, before moving the results to the CPU. If
left unset, the whole predictions are accumulated on GPU/TPU before being moved to the CPU (faster but
requires more memory).`,name:"eval_accumulation_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.learning_rate",description:`<strong>learning_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 5e-5) &#x2014;
The initial learning rate for <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"learning_rate"},{anchor:"transformers.Seq2SeqTrainingArguments.weight_decay",description:`<strong>weight_decay</strong> (<code>float</code>, <em>optional</em>, defaults to 0) &#x2014;
The weight decay to apply (if not zero) to all layers except all bias and LayerNorm weights in <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a>
optimizer.`,name:"weight_decay"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta1",description:`<strong>adam_beta1</strong> (<code>float</code>, <em>optional</em>, defaults to 0.9) &#x2014;
The beta1 hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta1"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_beta2",description:`<strong>adam_beta2</strong> (<code>float</code>, <em>optional</em>, defaults to 0.999) &#x2014;
The beta2 hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_beta2"},{anchor:"transformers.Seq2SeqTrainingArguments.adam_epsilon",description:`<strong>adam_epsilon</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-8) &#x2014;
The epsilon hyperparameter for the <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.AdamW">AdamW</a> optimizer.`,name:"adam_epsilon"},{anchor:"transformers.Seq2SeqTrainingArguments.max_grad_norm",description:`<strong>max_grad_norm</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Maximum gradient norm (for gradient clipping).`,name:"max_grad_norm"},{anchor:"transformers.Seq2SeqTrainingArguments.num_train_epochs(float,",description:`<strong>num_train_epochs(<code>float</code>,</strong> <em>optional</em>, defaults to 3.0) &#x2014;
Total number of training epochs to perform (if not an integer, will perform the decimal part percents of
the last epoch before stopping training).`,name:"num_train_epochs(float,"},{anchor:"transformers.Seq2SeqTrainingArguments.max_steps",description:`<strong>max_steps</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
If set to a positive number, the total number of training steps to perform. Overrides <code>num_train_epochs</code>.
In case of using a finite iterable dataset the training may stop before reaching the set number of steps
when all data is exhausted`,name:"max_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.lr_scheduler_type",description:`<strong>lr_scheduler_type</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a>, <em>optional</em>, defaults to <code>&quot;linear&quot;</code>) &#x2014;
The scheduler type to use. See the documentation of <a href="/docs/transformers/pr_15750/en/main_classes/optimizer_schedules#transformers.SchedulerType">SchedulerType</a> for all possible values.`,name:"lr_scheduler_type"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_ratio",description:`<strong>warmup_ratio</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
Ratio of total training steps used for a linear warmup from 0 to <code>learning_rate</code>.`,name:"warmup_ratio"},{anchor:"transformers.Seq2SeqTrainingArguments.warmup_steps",description:`<strong>warmup_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of steps used for a linear warmup from 0 to <code>learning_rate</code>. Overrides any effect of <code>warmup_ratio</code>.`,name:"warmup_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level",description:`<strong>log_level</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on the main process. Possible choices are the log levels as strings: &#x2018;debug&#x2019;,
&#x2018;info&#x2019;, &#x2018;warning&#x2019;, &#x2018;error&#x2019; and &#x2018;critical&#x2019;, plus a &#x2018;passive&#x2019; level which doesn&#x2019;t set anything and lets the
application set the level.`,name:"log_level"},{anchor:"transformers.Seq2SeqTrainingArguments.log_level_replica",description:`<strong>log_level_replica</strong> (<code>str</code>, <em>optional</em>, defaults to <code>passive</code>) &#x2014;
Logger log level to use on replicas. Same choices as <code>log_level</code>&#x201D;`,name:"log_level_replica"},{anchor:"transformers.Seq2SeqTrainingArguments.log_on_each_node",description:`<strong>log_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
In multinode distributed training, whether to log using <code>log_level</code> once per node, or only on the main
node.`,name:"log_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_dir",description:`<strong>logging_dir</strong> (<code>str</code>, <em>optional</em>) &#x2014;
<a href="https://www.tensorflow.org/tensorboard" rel="nofollow">TensorBoard</a> log directory. Will default to
*output_dir/runs/<strong>CURRENT_DATETIME_HOSTNAME*</strong>.`,name:"logging_dir"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_strategy",description:`<strong>logging_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The logging strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No logging is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Logging is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Logging is done every <code>logging_steps</code>.</li>
</ul>`,name:"logging_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_first_step",description:`<strong>logging_first_step</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to log and evaluate the first <code>global_step</code> or not.`,name:"logging_first_step"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_steps",description:`<strong>logging_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of update steps between two logs if <code>logging_strategy=&quot;steps&quot;</code>.`,name:"logging_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.logging_nan_inf_filter",description:`<strong>logging_nan_inf_filter</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to filter <code>nan</code> and <code>inf</code> losses for logging. If set to <code>True</code> the loss of every step that is <code>nan</code>
or <code>inf</code> is filtered and the average loss of the current logging window is taken instead.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p><code>logging_nan_inf_filter</code> only influences the logging of loss values, it does not change the behavior the
gradient is computed or applied to the model.</p>

					</div>`,name:"logging_nan_inf_filter"},{anchor:"transformers.Seq2SeqTrainingArguments.save_strategy",description:`<strong>save_strategy</strong> (<code>str</code> or <a href="/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.IntervalStrategy">IntervalStrategy</a>, <em>optional</em>, defaults to <code>&quot;steps&quot;</code>) &#x2014;
The checkpoint save strategy to adopt during training. Possible values are:</p>
<ul>
<li><code>&quot;no&quot;</code>: No save is done during training.</li>
<li><code>&quot;epoch&quot;</code>: Save is done at the end of each epoch.</li>
<li><code>&quot;steps&quot;</code>: Save is done every <code>save_steps</code>.</li>
</ul>`,name:"save_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.save_steps",description:`<strong>save_steps</strong> (<code>int</code>, <em>optional</em>, defaults to 500) &#x2014;
Number of updates steps before two checkpoint saves if <code>save_strategy=&quot;steps&quot;</code>.`,name:"save_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.save_total_limit",description:`<strong>save_total_limit</strong> (<code>int</code>, <em>optional</em>) &#x2014;
If a value is passed, will limit the total amount of checkpoints. Deletes the older checkpoints in
<code>output_dir</code>.`,name:"save_total_limit"},{anchor:"transformers.Seq2SeqTrainingArguments.save_on_each_node",description:`<strong>save_on_each_node</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When doing multi-node distributed training, whether to save models and checkpoints on each node, or only on
the main one.</p>
<p>This should not be activated when the different nodes use the same storage as the files will be saved with
the same names for each node.`,name:"save_on_each_node"},{anchor:"transformers.Seq2SeqTrainingArguments.no_cuda",description:`<strong>no_cuda</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to not use CUDA even when it is available or not.`,name:"no_cuda"},{anchor:"transformers.Seq2SeqTrainingArguments.seed",description:`<strong>seed</strong> (<code>int</code>, <em>optional</em>, defaults to 42) &#x2014;
Random seed that will be set at the beginning of training. To ensure reproducibility across runs, use the
<code>model_init</code> function to instantiate the model if it has some randomly initialized parameters.`,name:"seed"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16",description:`<strong>bf16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use bf16 16-bit (mixed) precision training instead of 32-bit training. Requires Ampere or higher
NVIDIA architecture. This is an experimental API and it may change.`,name:"bf16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16",description:`<strong>fp16</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use fp16 16-bit (mixed) precision training instead of 32-bit training.`,name:"fp16"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_opt_level",description:`<strong>fp16_opt_level</strong> (<code>str</code>, <em>optional</em>, defaults to &#x2018;O1&#x2019;) &#x2014;
For <code>fp16</code> training, Apex AMP optimization level selected in [&#x2018;O0&#x2019;, &#x2018;O1&#x2019;, &#x2018;O2&#x2019;, and &#x2018;O3&#x2019;]. See details on
the <a href="https://nvidia.github.io/apex/amp" rel="nofollow">Apex documentation</a>.`,name:"fp16_opt_level"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_backend",description:`<strong>fp16_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
This argument is deprecated. Use <code>half_precision_backend</code> instead.`,name:"fp16_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.half_precision_backend",description:`<strong>half_precision_backend</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;auto&quot;</code>) &#x2014;
The backend to use for mixed precision training. Must be one of <code>&quot;auto&quot;</code>, <code>&quot;amp&quot;</code> or <code>&quot;apex&quot;</code>. <code>&quot;auto&quot;</code>
will use AMP or APEX depending on the PyTorch version detected, while the other choices will force the
requested backend.`,name:"half_precision_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.bf16_full_eval",description:`<strong>bf16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full bfloat16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values. This is an experimental API and it may change.`,name:"bf16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.fp16_full_eval",description:`<strong>fp16_full_eval</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to use full float16 evaluation instead of 32-bit. This will be faster and save memory but can harm
metric values.`,name:"fp16_full_eval"},{anchor:"transformers.Seq2SeqTrainingArguments.tf32",description:`<strong>tf32</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether to enable tf32 mode, available in Ampere and newer GPU architectures. This is an experimental API
and it may change.`,name:"tf32"},{anchor:"transformers.Seq2SeqTrainingArguments.local_rank",description:`<strong>local_rank</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Rank of the process during distributed training.`,name:"local_rank"},{anchor:"transformers.Seq2SeqTrainingArguments.xpu_backend",description:`<strong>xpu_backend</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The backend to use for xpu distributed training. Must be one of <code>&quot;mpi&quot;</code> or <code>&quot;ccl&quot;</code>.`,name:"xpu_backend"},{anchor:"transformers.Seq2SeqTrainingArguments.tpu_num_cores",description:`<strong>tpu_num_cores</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When training on TPU, the number of TPU cores (automatically passed by launcher script).`,name:"tpu_num_cores"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_drop_last",description:`<strong>dataloader_drop_last</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to drop the last incomplete batch (if the length of the dataset is not divisible by the batch size)
or not.`,name:"dataloader_drop_last"},{anchor:"transformers.Seq2SeqTrainingArguments.eval_steps",description:`<strong>eval_steps</strong> (<code>int</code>, <em>optional</em>) &#x2014;
Number of update steps between two evaluations if <code>evaluation_strategy=&quot;steps&quot;</code>. Will default to the same
value as <code>logging_steps</code> if not set.`,name:"eval_steps"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_num_workers",description:`<strong>dataloader_num_workers</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
Number of subprocesses to use for data loading (PyTorch only). 0 means that the data will be loaded in the
main process.`,name:"dataloader_num_workers"},{anchor:"transformers.Seq2SeqTrainingArguments.past_index",description:`<strong>past_index</strong> (<code>int</code>, <em>optional</em>, defaults to -1) &#x2014;
Some models like <a href="../model_doc/transformerxl">TransformerXL</a> or <a href="../model_doc/xlnet">XLNet</a> can make use of
the past hidden states for their predictions. If this argument is set to a positive int, the <code>Trainer</code> will
use the corresponding output (usually index 2) as the past state and feed it to the model at the next
training step under the keyword argument <code>mems</code>.`,name:"past_index"},{anchor:"transformers.Seq2SeqTrainingArguments.run_name",description:`<strong>run_name</strong> (<code>str</code>, <em>optional</em>) &#x2014;
A descriptor for the run. Typically used for <a href="https://www.wandb.com/" rel="nofollow">wandb</a> and
<a href="https://www.mlflow.org/" rel="nofollow">mlflow</a> logging.`,name:"run_name"},{anchor:"transformers.Seq2SeqTrainingArguments.disable_tqdm",description:`<strong>disable_tqdm</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to disable the tqdm progress bars and table of metrics produced by
<code>NotebookTrainingTracker</code> in Jupyter Notebooks. Will default to <code>True</code> if the logging level is
set to warn or lower (default), <code>False</code> otherwise.`,name:"disable_tqdm"},{anchor:"transformers.Seq2SeqTrainingArguments.remove_unused_columns",description:`<strong>remove_unused_columns</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
If using <code>datasets.Dataset</code> datasets, whether or not to automatically remove the columns unused by the
model forward method.</p>
<p>(Note that this behavior is not implemented for <code>TFTrainer</code>yet.)`,name:"remove_unused_columns"},{anchor:"transformers.Seq2SeqTrainingArguments.label_names",description:`<strong>label_names</strong> (<code>List[str]</code>, <em>optional</em>) &#x2014;
The list of keys in your dictionary of inputs that correspond to the labels.</p>
<p>Will eventually default to <code>[&quot;labels&quot;]</code> except if the model used is one of the <code>XxxForQuestionAnswering</code> in
which case it will default to <code>[&quot;start_positions&quot;, &quot;end_positions&quot;]</code>.`,name:"label_names"},{anchor:"transformers.Seq2SeqTrainingArguments.load_best_model_at_end",description:`<strong>load_best_model_at_end</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to load the best model found during training at the end of training.</p>
<div class="course-tip  bg-gradient-to-br dark:bg-gradient-to-r before:border-green-500 dark:before:border-green-800 from-green-50 dark:from-gray-900 to-white dark:to-gray-950 border border-green-50 text-green-700 dark:text-gray-400">
						
<p>When set to <code>True</code>, the parameters <code>save_strategy</code> needs to be the same as <code>eval_strategy</code>, and in the case
it is &#x201C;steps&#x201D;, <code>save_steps</code> must be a round multiple of <code>eval_steps</code>.</p>

					</div>`,name:"load_best_model_at_end"},{anchor:"transformers.Seq2SeqTrainingArguments.metric_for_best_model",description:`<strong>metric_for_best_model</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> to specify the metric to use to compare two different
models. Must be the name of a metric returned by the evaluation with or without the prefix <code>&quot;eval_&quot;</code>. Will
default to <code>&quot;loss&quot;</code> if unspecified and <code>load_best_model_at_end=True</code> (to use the evaluation loss).</p>
<p>If you set this value, <code>greater_is_better</code> will default to <code>True</code>. Don&#x2019;t forget to set it to <code>False</code> if
your metric is better when lower.`,name:"metric_for_best_model"},{anchor:"transformers.Seq2SeqTrainingArguments.greater_is_better",description:`<strong>greater_is_better</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Use in conjunction with <code>load_best_model_at_end</code> and <code>metric_for_best_model</code> to specify if better models
should have a greater metric or not. Will default to:</p>
<ul>
<li><code>True</code> if <code>metric_for_best_model</code> is set to a value that isn&#x2019;t <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
<li><code>False</code> if <code>metric_for_best_model</code> is not set, or set to <code>&quot;loss&quot;</code> or <code>&quot;eval_loss&quot;</code>.</li>
</ul>`,name:"greater_is_better"},{anchor:"transformers.Seq2SeqTrainingArguments.ignore_data_skip",description:`<strong>ignore_data_skip</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
When resuming training, whether or not to skip the epochs and batches to get the data loading at the same
stage as in the previous training. If set to <code>True</code>, the training will begin faster (as that skipping step
can take a long time) but will not yield the same results as the interrupted training would have.`,name:"ignore_data_skip"},{anchor:"transformers.Seq2SeqTrainingArguments.sharded_ddp",description:`<strong>sharded_ddp</strong> (<code>bool</code>, <code>str</code> or list of <code>ShardedDDPOption</code> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Use Sharded DDP training from <a href="https://github.com/facebookresearch/fairscale" rel="nofollow">FairScale</a> (in distributed
training only). This is an experimental feature.</p>
<p>A list of options along the following:</p>
<ul>
<li><code>&quot;simple&quot;</code>: to use first instance of sharded DDP released by fairscale (<code>ShardedDDP</code>) similar to ZeRO-2.</li>
<li><code>&quot;zero_dp_2&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-2 mode (with <code>reshard_after_forward=False</code>).</li>
<li><code>&quot;zero_dp_3&quot;</code>: to use the second instance of sharded DPP released by fairscale (<code>FullyShardedDDP</code>) in
Zero-3 mode (with <code>reshard_after_forward=True</code>).</li>
<li><code>&quot;offload&quot;</code>: to add ZeRO-offload (only compatible with <code>&quot;zero_dp_2&quot;</code> and <code>&quot;zero_dp_3&quot;</code>).</li>
</ul>
<p>If a string is passed, it will be split on space. If a bool is passed, it will be converted to an empty
list for <code>False</code> and <code>[&quot;simple&quot;]</code> for <code>True</code>.`,name:"sharded_ddp"},{anchor:"transformers.Seq2SeqTrainingArguments.deepspeed",description:`<strong>deepspeed</strong> (<code>str</code> or <code>dict</code>, <em>optional</em>) &#x2014;
Use <a href="https://github.com/microsoft/deepspeed" rel="nofollow">Deepspeed</a>. This is an experimental feature and its API may
evolve in the future. The value is either the location of DeepSpeed json config file (e.g.,
<code>ds_config.json</code>) or an already loaded json file as a <code>dict</code>&#x201D;`,name:"deepspeed"},{anchor:"transformers.Seq2SeqTrainingArguments.label_smoothing_factor",description:`<strong>label_smoothing_factor</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The label smoothing factor to use. Zero means no label smoothing, otherwise the underlying onehot-encoded
labels are changed from 0s and 1s to <code>label_smoothing_factor/num_labels</code> and <code>1 - label_smoothing_factor + label_smoothing_factor/num_labels</code> respectively.`,name:"label_smoothing_factor"},{anchor:"transformers.Seq2SeqTrainingArguments.debug",description:`<strong>debug</strong> (<code>str</code> or list of <code>DebugOption</code> <em>optional</em>, defaults to <code>&quot;&quot;</code>) &#x2014;
Enable one or more debug features. This is an experimental feature.</p>
<p>Possible options are:</p>
<ul>
<li><code>&quot;underflow_overflow&quot;</code>: detects overflow in model&#x2019;s input/outputs and reports the last frames that led to
the event</li>
<li><code>&quot;tpu_metrics_debug&quot;</code>: print debug metrics on TPU</li>
</ul>
<p>The options should be separated by whitespaces.`,name:"debug"},{anchor:"transformers.Seq2SeqTrainingArguments.optim",description:`<strong>optim</strong> (<code>str</code> or <code>training_args.OptimizerNames</code> <em>optional</em>, defaults to <code>&quot;adamw_hf&quot;</code>) &#x2014;
The optimizer to use: adamw_hf, adamw_torch, adamw_apex_fused, or adafactor.`,name:"optim"},{anchor:"transformers.Seq2SeqTrainingArguments.adafactor",description:`<strong>adafactor</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
This argument is deprecated. Use <code>--optim adafactor</code> instead.`,name:"adafactor"},{anchor:"transformers.Seq2SeqTrainingArguments.group_by_length",description:`<strong>group_by_length</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to group together samples of roughly the same length in the training dataset (to minimize
padding applied and be more efficient). Only useful if applying dynamic padding.`,name:"group_by_length"},{anchor:"transformers.Seq2SeqTrainingArguments.length_column_name",description:`<strong>length_column_name</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;length&quot;</code>) &#x2014;
Column name for precomputed lengths. If the column exists, grouping by length will use these values rather
than computing them on train startup. Ignored unless <code>group_by_length</code> is <code>True</code> and the dataset is an
instance of <code>Dataset</code>.`,name:"length_column_name"},{anchor:"transformers.Seq2SeqTrainingArguments.report_to",description:`<strong>report_to</strong> (<code>str</code> or <code>List[str]</code>, <em>optional</em>, defaults to <code>&quot;all&quot;</code>) &#x2014;
The list of integrations to report the results and logs to. Supported platforms are <code>&quot;azure_ml&quot;</code>,
<code>&quot;comet_ml&quot;</code>, <code>&quot;mlflow&quot;</code>, <code>&quot;tensorboard&quot;</code> and <code>&quot;wandb&quot;</code>. Use <code>&quot;all&quot;</code> to report to all integrations
installed, <code>&quot;none&quot;</code> for no integrations.`,name:"report_to"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_find_unused_parameters",description:`<strong>ddp_find_unused_parameters</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>find_unused_parameters</code> passed to
<code>DistributedDataParallel</code>. Will default to <code>False</code> if gradient checkpointing is used, <code>True</code> otherwise.`,name:"ddp_find_unused_parameters"},{anchor:"transformers.Seq2SeqTrainingArguments.ddp_bucket_cap_mb",description:`<strong>ddp_bucket_cap_mb</strong> (<code>int</code>, <em>optional</em>) &#x2014;
When using distributed training, the value of the flag <code>bucket_cap_mb</code> passed to <code>DistributedDataParallel</code>.`,name:"ddp_bucket_cap_mb"},{anchor:"transformers.Seq2SeqTrainingArguments.dataloader_pin_memory",description:`<strong>dataloader_pin_memory</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether you want to pin memory in data loaders or not. Will default to <code>True</code>.`,name:"dataloader_pin_memory"},{anchor:"transformers.Seq2SeqTrainingArguments.skip_memory_metrics",description:`<strong>skip_memory_metrics</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to skip adding of memory profiler reports to metrics. This is skipped by default because it slows
down the training and evaluation speed.`,name:"skip_memory_metrics"},{anchor:"transformers.Seq2SeqTrainingArguments.push_to_hub",description:`<strong>push_to_hub</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to push the model to the Hub every time the model is saved. If this is activated,
<code>output_dir</code> will begin a git directory synced with the the repo (determined by <code>hub_model_id</code>) and the
content will be pushed each time a save is triggered (depending on your <code>save_strategy</code>). Calling
<a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> will also trigger a push.</p>
<div class="course-tip course-tip-orange bg-gradient-to-br dark:bg-gradient-to-r before:border-orange-500 dark:before:border-orange-800 from-orange-50 dark:from-gray-900 to-white dark:to-gray-950 border border-orange-50 text-orange-700 dark:text-gray-400">
						
<p>If <code>output_dir</code> exists, it needs to be a local clone of the repository to which the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a> will be
pushed.</p>

					</div>`,name:"push_to_hub"},{anchor:"transformers.Seq2SeqTrainingArguments.resume_from_checkpoint",description:`<strong>resume_from_checkpoint</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The path to a folder with a valid checkpoint for your model. This argument is not directly used by
<a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>, it&#x2019;s intended to be used by your training/evaluation scripts instead. See the <a href="https://github.com/huggingface/transformers/tree/master/examples" rel="nofollow">example
scripts</a> for more details.`,name:"resume_from_checkpoint"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_model_id",description:`<strong>hub_model_id</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The name of the repository to keep in sync with the local <em>output_dir</em>. It can be a simple model ID in
which case the model will be pushed in your namespace. Otherwise it should be the whole repository name,
for instance <code>&quot;user_name/model&quot;</code>, which allows you to push to an organization you are a member of with
<code>&quot;organization_name/model&quot;</code>. Will default to <code>user_name/output_dir_name</code> with <em>output_dir_name</em> being the
name of <code>output_dir</code>.</p>
<p>Will default to to the name of <code>output_dir</code>.`,name:"hub_model_id"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_strategy",description:`<strong>hub_strategy</strong> (<code>str</code> or <code>HubStrategy</code> <em>optional</em>, defaults to <code>&quot;every_save&quot;</code>) &#x2014;
Defines the scope of what is pushed to the Hub and when. Possible values are:</p>
<ul>
<li><code>&quot;end&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and a
draft of a model card when the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.save_model">save_model()</a> method is called.</li>
<li><code>&quot;every_save&quot;</code>: push the model, its configuration, the tokenizer (if passed along to the <a href="/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer">Trainer</a>) and
a draft of a model card each time there is a model save. The pushes are asynchronous to not block
training, and in case the save are very frequent, a new push is only attempted if the previous one is
finished. A last push is made with the final model at the end of training.</li>
<li><code>&quot;checkpoint&quot;</code>: like <code>&quot;every_save&quot;</code> but the latest checkpoint is also pushed in a subfolder named
last-checkpoint, allowing you to resume training easily with
<code>trainer.train(resume_from_checkpoint=&quot;last-checkpoint&quot;)</code>.</li>
<li><code>&quot;all_checkpoints&quot;</code>: like <code>&quot;checkpoint&quot;</code> but all checkpoints are pushed like they appear in the output
folder (so you will get one checkpoint folder per folder in your final repository)</li>
</ul>`,name:"hub_strategy"},{anchor:"transformers.Seq2SeqTrainingArguments.hub_token",description:`<strong>hub_token</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The token to use to push the model to the Hub. Will default to the token in the cache folder obtained with
<code>huggingface-cli login</code>.`,name:"hub_token"},{anchor:"transformers.Seq2SeqTrainingArguments.gradient_checkpointing",description:`<strong>gradient_checkpointing</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If True, use gradient checkpointing to save memory at the expense of slower backward pass.`,name:"gradient_checkpointing"}]}}),Ln=new se({}),Fn=new se({}),Rn=new P({props:{code:`[...]
logger = logging.getLogger(__name__)

# Setup logging
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    datefmt="%m/%d/%Y %H:%M:%S",
    handlers=[logging.StreamHandler(sys.stdout)],
)

# set the main code and the modules it uses to the same log-level according to the node
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...),`,highlighted:`[...]
logger = logging.getLogger(__name__)

<span class="hljs-comment"># Setup logging</span>
logging.basicConfig(
    <span class="hljs-built_in">format</span>=<span class="hljs-string">&quot;%(asctime)s - %(levelname)s - %(name)s - %(message)s&quot;</span>,
    datefmt=<span class="hljs-string">&quot;%m/%d/%Y %H:%M:%S&quot;</span>,
    handlers=[logging.StreamHandler(sys.stdout)],
)

<span class="hljs-comment"># set the main code and the modules it uses to the same log-level according to the node</span>
log_level = training_args.get_process_log_level()
logger.setLevel(log_level)
datasets.utils.logging.set_verbosity(log_level)
transformers.utils.logging.set_verbosity(log_level)

trainer = Trainer(...)`}}),Wn=new P({props:{code:"my_app.py ... --log_level warning --log_level_replica error,",highlighted:"my_app.py ... --log_level warning --log_level_replica error"}}),Gn=new P({props:{code:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level warning --log_level_replica error --log_on_each_node 0"}}),jn=new P({props:{code:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0,",highlighted:"my_app.py ... --log_level error --log_level_replica error --log_on_each_node 0"}}),Mn=new se({}),Hn=new se({}),Yn=new P({props:{code:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ...,",highlighted:"python -m torch.distributed.launch --nproc_per_node=2  trainer-program.py ..."}}),Xn=new P({props:{code:"accelerate launch --num_processes 2 trainer-program.py ...,",highlighted:"accelerate launch --num_processes 2 trainer-program.py ..."}}),Kn=new P({props:{code:"deepspeed --num_gpus 2 trainer-program.py ...,",highlighted:"deepspeed --num_gpus 2 trainer-program.py ..."}}),Qn=new P({props:{code:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ...,",highlighted:"CUDA_VISIBLE_DEVICES=0,2 python -m torch.distributed.launch trainer-program.py ..."}}),es=new P({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ...,",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python -m torch.distributed.launch trainer-program.py ..."}}),os=new P({props:{code:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ...,",highlighted:"CUDA_VISIBLE_DEVICES=2,0 python trainer-program.py ..."}}),rs=new P({props:{code:"CUDA_VISIBLE_DEVICES= python trainer-program.py ...,",highlighted:"CUDA_VISIBLE_DEVICES= python trainer-program.py ..."}}),as=new P({props:{code:`export CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...,`,highlighted:`<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=0,2
python -m torch.distributed.launch trainer-program.py ...`}}),ss=new P({props:{code:"export CUDA_DEVICE_ORDER=PCI_BUS_ID,",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=PCI_BUS_ID'}}),ls=new P({props:{code:"export CUDA_DEVICE_ORDER=FASTEST_FIRST,",highlighted:'<span class="hljs-built_in">export</span> CUDA_DEVICE_ORDER=FASTEST_FIRST'}}),ds=new P({props:{code:"export CUDA_VISIBLE_DEVICES=1,0,",highlighted:'<span class="hljs-built_in">export</span> CUDA_VISIBLE_DEVICES=1,0'}}),cs=new se({}),us=new se({}),_s=new P({props:{code:`pip install fairscale
pip install deepspeed,`,highlighted:`pip install fairscale
pip install deepspeed`}}),vs=new se({}),bs=new P({props:{code:"which nvcc,",highlighted:'<span class="hljs-built_in">which</span> nvcc'}}),ws=new se({}),Es=new P({props:{code:`/usr/local/cuda-10.2
/usr/local/cuda-11.0,`,highlighted:`/usr/local/cuda-10.2
/usr/local/cuda-11.0`}}),Ts=new P({props:{code:`echo $PATH
echo $LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">echo</span> <span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),$s=new P({props:{code:`export PATH=/usr/local/cuda-10.2/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH,`,highlighted:`<span class="hljs-built_in">export</span> PATH=/usr/local/cuda-10.2/bin:<span class="hljs-variable">$PATH</span>
<span class="hljs-built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:<span class="hljs-variable">$LD_LIBRARY_PATH</span>`}}),ks=new se({}),xs=new P({props:{code:`sudo ln -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo ln -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++,`,highlighted:`sudo <span class="hljs-built_in">ln</span> -s /usr/bin/gcc-7  /usr/local/cuda-10.2/bin/gcc
sudo <span class="hljs-built_in">ln</span> -s /usr/bin/g++-7  /usr/local/cuda-10.2/bin/g++`}}),As=new se({}),Ss=new P({props:{code:"pip install fairscale,",highlighted:"pip install fairscale"}}),Cs=new P({props:{code:"pip install transformers[fairscale],",highlighted:"pip install transformers[fairscale]"}}),Us=new P({props:{code:"pip install fairscale --no-build-isolation .,",highlighted:"pip install fairscale --no-build-isolation ."}}),zs=new P({props:{code:`git clone https://github.com/facebookresearch/fairscale/
cd fairscale
rm -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl,`,highlighted:`git <span class="hljs-built_in">clone</span> https://github.com/facebookresearch/fairscale/
<span class="hljs-built_in">cd</span> fairscale
<span class="hljs-built_in">rm</span> -r dist build
python setup.py bdist_wheel
pip uninstall -y fairscale
pip install dist/fairscale-*.whl`}}),Ls=new P({props:{code:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation,`,highlighted:`pip uninstall -y fairscale; pip install fairscale --pre \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly \\
--no-cache --no-build-isolation`}}),Fs=new P({props:{code:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre,`,highlighted:`pip install -v --disable-pip-version-check . \\
-f https://download.pytorch.org/whl/nightly/cu110/torch_nightly --pre`}}),Gs=new P({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp simple`}}),Hs=new P({props:{code:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config "ro-en" \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2,`,highlighted:`python -m torch.distributed.launch --nproc_per_node=2 examples/pytorch/translation/run_translation.py \\
--model_name_or_path t5-small --per_device_train_batch_size 1   \\
--output_dir output_dir --overwrite_output_dir \\
--do_train --max_train_samples 500 --num_train_epochs 1 \\
--dataset_name wmt16 --dataset_config <span class="hljs-string">&quot;ro-en&quot;</span> \\
--source_lang en --target_lang ro \\
--fp16 --sharded_ddp zero_dp_2`}}),{c(){T=n("meta"),L=l(),x=n("h1"),S=n("a"),fe=n("span"),h(R.$$.fragment),W=l(),V=n("span"),ge=r("Trainer"),ee=l(),G=n("p"),ie=r("The "),le=n("a"),te=r("Trainer"),de=r(" class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=n("a"),Ze=r("example scripts"),_e=r("."),z=l(),O=n("p"),rt=r("Before instantiating your "),oe=n("a"),at=r("Trainer"),nt=r(", create a "),ve=n("a"),sa=r("TrainingArguments"),ia=r(" to access all the points of customization during training."),Je=l(),Ae=n("p"),la=r("The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),be=n("a"),da=r("NVIDIA Apex"),ca=r(" and Native AMP for PyTorch."),Z=l(),H=n("p"),Ks=r("The "),ye=n("a"),Lo=r("Trainer"),Qs=r(" contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),Xt=l(),D=n("ul"),B=n("li"),Fo=n("strong"),ei=r("get_train_dataloader"),ti=r(" \u2014 Creates the training DataLoader."),oi=l(),ri=n("li"),ac=n("strong"),Kb=r("get_eval_dataloader"),Qb=r(" \u2014 Creates the evaluation DataLoader."),ey=l(),ai=n("li"),nc=n("strong"),ty=r("get_test_dataloader"),oy=r(" \u2014 Creates the test DataLoader."),ry=l(),ni=n("li"),sc=n("strong"),ay=r("log"),ny=r(" \u2014 Logs information on the various objects watching training."),sy=l(),st=n("li"),ic=n("strong"),iy=r("create_optimizer_and_scheduler"),ly=r(` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),lc=n("code"),dy=r("create_optimizer"),cy=r(" and "),dc=n("code"),py=r("create_scheduler"),my=r(` methods
separately.`),hy=l(),si=n("li"),cc=n("strong"),uy=r("create_optimizer"),fy=r(" \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),gy=l(),ii=n("li"),pc=n("strong"),_y=r("create_scheduler"),vy=r(" \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),by=l(),li=n("li"),mc=n("strong"),yy=r("compute_loss"),wy=r(" - Computes the loss on a batch of training inputs."),Ey=l(),di=n("li"),hc=n("strong"),Ty=r("training_step"),$y=r(" \u2014 Performs a training step."),ky=l(),ci=n("li"),uc=n("strong"),xy=r("prediction_step"),Ay=r(" \u2014 Performs an evaluation/test step."),Dy=l(),pi=n("li"),fc=n("strong"),qy=r("evaluate"),Py=r(" \u2014 Runs an evaluation loop and returns metrics."),Sy=l(),mi=n("li"),gc=n("strong"),Cy=r("predict"),Oy=r(" \u2014 Returns predictions (with metrics if labels are available) on a test set."),Pg=l(),h(Ro.$$.fragment),Sg=l(),Wo=n("p"),Iy=r("Here is an example of how to customize "),hi=n("a"),Uy=r("Trainer"),zy=r(" to use a weighted loss (useful when you have an unbalanced training set):"),Cg=l(),h(pa.$$.fragment),Og=l(),it=n("p"),Ny=r("Another way to customize the training loop behavior for the PyTorch "),ui=n("a"),Ly=r("Trainer"),Fy=r(" is to use "),fi=n("a"),Ry=r("callbacks"),Wy=r(" that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),Ig=l(),Kt=n("h2"),Go=n("a"),_c=n("span"),h(ma.$$.fragment),Gy=l(),vc=n("span"),jy=r("Trainer"),Ug=l(),b=n("div"),h(ha.$$.fragment),My=l(),bc=n("p"),Vy=r("Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),Hy=l(),yc=n("p"),By=r("Important attributes:"),Yy=l(),we=n("ul"),jo=n("li"),wc=n("strong"),Zy=r("model"),Jy=r(" \u2014 Always points to the core model. If using a transformers model, it will be a "),gi=n("a"),Xy=r("PreTrainedModel"),Ky=r(`
subclass.`),Qy=l(),J=n("li"),Ec=n("strong"),e0=r("model_wrapped"),t0=r(` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Tc=n("code"),o0=r("DeepSpeed"),r0=r(`,
the inner model is wrapped in `),$c=n("code"),a0=r("DeepSpeed"),n0=r(" and then again in "),kc=n("code"),s0=r("torch.nn.DistributedDataParallel"),i0=r(`. If the inner
model hasn\u2019t been wrapped, then `),xc=n("code"),l0=r("self.model_wrapped"),d0=r(" is the same as "),Ac=n("code"),c0=r("self.model"),p0=r("."),m0=l(),_i=n("li"),Dc=n("strong"),h0=r("is_model_parallel"),u0=r(` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),f0=l(),De=n("li"),qc=n("strong"),g0=r("place_model_on_device"),_0=r(` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Pc=n("code"),v0=r("False"),b0=r(` if model parallel or deepspeed is used, or if the default
`),Sc=n("code"),y0=r("TrainingArguments.place_model_on_device"),w0=r(" is overridden to return "),Cc=n("code"),E0=r("False"),T0=r(" ."),$0=l(),qe=n("li"),Oc=n("strong"),k0=r("is_in_train"),x0=r(" \u2014 Whether or not a model is currently running "),Ic=n("code"),A0=r("train"),D0=r(" (e.g. when "),Uc=n("code"),q0=r("evaluate"),P0=r(` is called while
in `),zc=n("code"),S0=r("train"),C0=r(")"),O0=l(),Mo=n("div"),h(ua.$$.fragment),I0=l(),fa=n("p"),U0=r("Add a callback to the current list of "),Nc=n("code"),z0=r("TrainerCallback"),N0=r("."),L0=l(),Vo=n("div"),h(ga.$$.fragment),F0=l(),_a=n("p"),R0=r("A helper wrapper that creates an appropriate context manager for "),Lc=n("code"),W0=r("autocast"),G0=r(` while feeding it the desired
arguments, depending on the situation.`),j0=l(),lt=n("div"),h(va.$$.fragment),M0=l(),Fc=n("p"),V0=r("How the loss is computed by Trainer. By default, all models return the loss in the first element."),H0=l(),Rc=n("p"),B0=r("Subclass and override for custom behavior."),Y0=l(),dt=n("div"),h(ba.$$.fragment),Z0=l(),Wc=n("p"),J0=r("Setup the optimizer."),X0=l(),ya=n("p"),K0=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Gc=n("code"),Q0=r("optimizers"),e2=r(", or subclass and override this method in a subclass."),t2=l(),ct=n("div"),h(wa.$$.fragment),o2=l(),jc=n("p"),r2=r("Setup the optimizer and the learning rate scheduler."),a2=l(),Xe=n("p"),n2=r(`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Mc=n("code"),s2=r("optimizers"),i2=r(", or subclass and override this method (or "),Vc=n("code"),l2=r("create_optimizer"),d2=r(` and/or
`),Hc=n("code"),c2=r("create_scheduler"),p2=r(") in a subclass."),m2=l(),Ho=n("div"),h(Ea.$$.fragment),h2=l(),Bc=n("p"),u2=r(`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),f2=l(),Pe=n("div"),h(Ta.$$.fragment),g2=l(),Yc=n("p"),_2=r("Run evaluation and returns metrics."),v2=l(),$a=n("p"),b2=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Zc=n("code"),y2=r("compute_metrics"),w2=r(" argument)."),E2=l(),Jc=n("p"),T2=r("You can also subclass and override this method to inject custom behavior."),$2=l(),pt=n("div"),h(ka.$$.fragment),k2=l(),Qt=n("p"),x2=r("Prediction/evaluation loop, shared by "),Xc=n("code"),A2=r("Trainer.evaluate()"),D2=r(" and "),Kc=n("code"),q2=r("Trainer.predict()"),P2=r("."),S2=l(),Qc=n("p"),C2=r("Works both with or without labels."),O2=l(),Bo=n("div"),h(xa.$$.fragment),I2=l(),Aa=n("p"),U2=r("For models that inherit from "),vi=n("a"),z2=r("PreTrainedModel"),N2=r(`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),L2=l(),mt=n("div"),h(Da.$$.fragment),F2=l(),qa=n("p"),R2=r("Returns the evaluation "),ep=n("code"),W2=r("DataLoader"),G2=r("."),j2=l(),tp=n("p"),M2=r("Subclass and override this method if you want to inject some custom behavior."),V2=l(),Yo=n("div"),h(Pa.$$.fragment),H2=l(),op=n("p"),B2=r("Returns the optimizer class and optimizer parameters based on the training arguments."),Y2=l(),ht=n("div"),h(Sa.$$.fragment),Z2=l(),Ca=n("p"),J2=r("Returns the test "),rp=n("code"),X2=r("DataLoader"),K2=r("."),Q2=l(),ap=n("p"),ew=r("Subclass and override this method if you want to inject some custom behavior."),tw=l(),Se=n("div"),h(Oa.$$.fragment),ow=l(),Ia=n("p"),rw=r("Returns the training "),np=n("code"),aw=r("DataLoader"),nw=r("."),sw=l(),eo=n("p"),iw=r("Will use no sampler if "),sp=n("code"),lw=r("self.train_dataset"),dw=r(" does not implement "),ip=n("code"),cw=r("__len__"),pw=r(`, a random sampler (adapted to
distributed training if necessary) otherwise.`),mw=l(),lp=n("p"),hw=r("Subclass and override this method if you want to inject some custom behavior."),uw=l(),ut=n("div"),h(Ua.$$.fragment),fw=l(),Ee=n("p"),gw=r("Launch an hyperparameter search using "),dp=n("code"),_w=r("optuna"),vw=r(" or "),cp=n("code"),bw=r("Ray Tune"),yw=r(" or "),pp=n("code"),ww=r("SigOpt"),Ew=r(`. The optimized quantity is determined
by `),mp=n("code"),Tw=r("compute_objective"),$w=r(`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),kw=l(),h(Zo.$$.fragment),xw=l(),Jo=n("div"),h(za.$$.fragment),Aw=l(),Na=n("p"),Dw=r("Initializes a git repo in "),hp=n("code"),qw=r("self.args.hub_model_id"),Pw=r("."),Sw=l(),Xo=n("div"),h(La.$$.fragment),Cw=l(),up=n("p"),Ow=r(`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),Iw=l(),Ko=n("div"),h(Fa.$$.fragment),Uw=l(),Ra=n("p"),zw=r(`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),fp=n("code"),Nw=r("True"),Lw=r(" for one process)."),Fw=l(),ft=n("div"),h(Wa.$$.fragment),Rw=l(),Ga=n("p"),Ww=r("Log "),gp=n("code"),Gw=r("logs"),jw=r(" on the various objects watching training."),Mw=l(),_p=n("p"),Vw=r("Subclass and override this method to inject custom behavior."),Hw=l(),k=n("div"),h(ja.$$.fragment),Bw=l(),vp=n("p"),Yw=r("Log metrics in a specially formatted way"),Zw=l(),bp=n("p"),Jw=r("Under distributed environment this is done only for a process with rank 0."),Xw=l(),yp=n("p"),Kw=r("Notes on memory reports:"),Qw=l(),to=n("p"),eE=r("In order to get memory usage report you need to install "),wp=n("code"),tE=r("psutil"),oE=r(". You can do that with "),Ep=n("code"),rE=r("pip install psutil"),aE=r("."),nE=l(),Tp=n("p"),sE=r("Now when this method is run, you will see a report that will include: :"),iE=l(),h(Ma.$$.fragment),lE=l(),$p=n("p"),kp=n("strong"),dE=r("Understanding the reports:"),cE=l(),Ke=n("ul"),Te=n("li"),pE=r("the first segment, e.g., "),xp=n("code"),mE=r("train__"),hE=r(", tells you which stage the metrics are for. Reports starting with "),Ap=n("code"),uE=r("init_"),fE=r(`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Dp=n("code"),gE=r("__init__"),_E=r(" will be reported along with the "),qp=n("code"),vE=r("eval_"),bE=r(" metrics."),yE=l(),oo=n("li"),wE=r("the third segment, is either "),Pp=n("code"),EE=r("cpu"),TE=r(" or "),Sp=n("code"),$E=r("gpu"),kE=r(`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),xE=l(),bi=n("li"),Cp=n("code"),AE=r("*_alloc_delta"),DE=r(` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),qE=l(),gt=n("li"),Op=n("code"),PE=r("*_peaked_delta"),SE=r(` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Ip=n("code"),CE=r("alloc_delta"),OE=r(` +
`),Up=n("code"),IE=r("peaked_delta"),UE=r(" and you know how much memory was needed to complete that stage."),zE=l(),zp=n("p"),NE=r(`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),LE=l(),Np=n("p"),FE=r(`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),RE=l(),Va=n("p"),WE=r(`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Lp=n("code"),GE=r("tracemalloc"),jE=r(` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),ME=l(),Qe=n("p"),VE=r("The GPU allocated and peak memory reporting is done with "),Fp=n("code"),HE=r("torch.cuda.memory_allocated()"),BE=r(` and
`),Rp=n("code"),YE=r("torch.cuda.max_memory_allocated()"),ZE=r(`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Wp=n("code"),JE=r("torch.cuda"),XE=r(` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),KE=l(),re=n("p"),QE=r("Note that this tracker doesn\u2019t account for memory allocations outside of "),yi=n("a"),eT=r("Trainer"),tT=r("\u2019s "),Gp=n("code"),oT=r("__init__"),rT=r(", "),jp=n("code"),aT=r("train"),nT=r(`,
`),Mp=n("code"),sT=r("evaluate"),iT=r(" and "),Vp=n("code"),lT=r("predict"),dT=r(" calls."),cT=l(),I=n("p"),pT=r("Because "),Hp=n("code"),mT=r("evaluation"),hT=r(" calls may happen during "),Bp=n("code"),uT=r("train"),fT=r(`, we can\u2019t handle nested invocations because
`),Yp=n("code"),gT=r("torch.cuda.max_memory_allocated"),_T=r(" is a single counter, so if it gets reset by a nested eval call, "),Zp=n("code"),vT=r("train"),bT=r(`\u2019s tracker
will report incorrect info. If this `),Ha=n("a"),yT=r("pytorch issue"),wT=r(` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Jp=n("code"),ET=r("train"),TT=r(", "),Xp=n("code"),$T=r("evaluate"),kT=r(" and "),Kp=n("code"),xT=r("predict"),AT=r(" methods. Which means that if "),Qp=n("code"),DT=r("eval"),qT=r(" is called during "),em=n("code"),PT=r("train"),ST=r(`, it\u2019s the latter
that will account for its memory usage and that of the former.`),CT=l(),$e=n("p"),OT=r("This also means that if any other tool that is used along the "),wi=n("a"),IT=r("Trainer"),UT=r(` calls
`),tm=n("code"),zT=r("torch.cuda.reset_peak_memory_stats"),NT=r(", the gpu peak memory stats could be invalid. And the "),Ei=n("a"),LT=r("Trainer"),FT=r(` will disrupt
the normal behavior of any such tools that rely on calling `),om=n("code"),RT=r("torch.cuda.reset_peak_memory_stats"),WT=r(" themselves."),GT=l(),rm=n("p"),jT=r("For best performance you may want to consider turning the memory profiling off for production runs."),MT=l(),Qo=n("div"),h(Ba.$$.fragment),VT=l(),am=n("p"),HT=r("Reformat Trainer metrics values to a human-readable format"),BT=l(),_t=n("div"),h(Ya.$$.fragment),YT=l(),Za=n("p"),ZT=r("Helper to get number of samples in a "),nm=n("code"),JT=r("DataLoader"),XT=r(" by accessing its dataset."),KT=l(),Ti=n("p"),QT=r("Will raise an exception if the underlying dataset does not implement method "),sm=n("code"),e5=r("__len__"),t5=l(),vt=n("div"),h(Ja.$$.fragment),o5=l(),Xa=n("p"),r5=r("Remove a callback from the current list of "),im=n("code"),a5=r("TrainerCallback"),n5=r(" and returns it."),s5=l(),Ka=n("p"),i5=r("If the callback is not found, returns "),lm=n("code"),l5=r("None"),d5=r(" (and no error is raised)."),c5=l(),X=n("div"),h(Qa.$$.fragment),p5=l(),dm=n("p"),m5=r("Run prediction and returns predictions and potential metrics."),h5=l(),en=n("p"),u5=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),cm=n("code"),f5=r("evaluate()"),g5=r("."),_5=l(),h(er.$$.fragment),v5=l(),tn=n("p"),b5=r("Returns: "),pm=n("em"),y5=r("NamedTuple"),w5=r(" A namedtuple with the following keys:"),E5=l(),ro=n("ul"),ao=n("li"),T5=r("predictions ("),mm=n("code"),$5=r("np.ndarray"),k5=r("): The predictions on "),hm=n("code"),x5=r("test_dataset"),A5=r("."),D5=l(),no=n("li"),q5=r("label_ids ("),um=n("code"),P5=r("np.ndarray"),S5=r(", "),fm=n("em"),C5=r("optional"),O5=r("): The labels (if the dataset contained some)."),I5=l(),so=n("li"),U5=r("metrics ("),gm=n("code"),z5=r("Dict[str, float]"),N5=r(", "),_m=n("em"),L5=r("optional"),F5=r(`): The potential dictionary of metrics (if the dataset contained
labels).`),R5=l(),bt=n("div"),h(on.$$.fragment),W5=l(),io=n("p"),G5=r("Prediction/evaluation loop, shared by "),vm=n("code"),j5=r("Trainer.evaluate()"),M5=r(" and "),bm=n("code"),V5=r("Trainer.predict()"),H5=r("."),B5=l(),ym=n("p"),Y5=r("Works both with or without labels."),Z5=l(),yt=n("div"),h(rn.$$.fragment),J5=l(),lo=n("p"),X5=r("Perform an evaluation step on "),wm=n("code"),K5=r("model"),Q5=r(" using "),Em=n("code"),e4=r("inputs"),t4=r("."),o4=l(),Tm=n("p"),r4=r("Subclass and override to inject custom behavior."),a4=l(),tr=n("div"),h(an.$$.fragment),n4=l(),et=n("p"),s4=r("Upload "),$m=n("em"),i4=r("self.model"),l4=r(" and "),km=n("em"),d4=r("self.tokenizer"),c4=r(" to the \u{1F917} model hub on the repo "),xm=n("em"),p4=r("self.args.hub_model_id"),m4=r("."),h4=l(),or=n("div"),h(nn.$$.fragment),u4=l(),sn=n("p"),f4=r("Remove a callback from the current list of "),Am=n("code"),g4=r("TrainerCallback"),_4=r("."),v4=l(),Ce=n("div"),h(ln.$$.fragment),b4=l(),dn=n("p"),y4=r("Save metrics into a json file for that split, e.g. "),Dm=n("code"),w4=r("train_results.json"),E4=r("."),T4=l(),qm=n("p"),$4=r("Under distributed environment this is done only for a process with rank 0."),k4=l(),cn=n("p"),x4=r("To understand the metrics please read the docstring of "),Pm=n("code"),A4=r("log_metrics()"),D4=r(` The only difference is that raw
unformatted numbers are saved in the current method.`),q4=l(),wt=n("div"),h(pn.$$.fragment),P4=l(),mn=n("p"),S4=r("Will save the model, so you can reload it using "),Sm=n("code"),C4=r("from_pretrained()"),O4=r("."),I4=l(),Cm=n("p"),U4=r("Will only save from the main process."),z4=l(),Et=n("div"),h(hn.$$.fragment),N4=l(),Om=n("p"),L4=r("Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),F4=l(),Im=n("p"),R4=r("Under distributed environment this is done only for a process with rank 0."),W4=l(),rr=n("div"),h(un.$$.fragment),G4=l(),Um=n("p"),j4=r("Main training entry point."),M4=l(),Tt=n("div"),h(fn.$$.fragment),V4=l(),zm=n("p"),H4=r("Perform a training step on a batch of inputs."),B4=l(),Nm=n("p"),Y4=r("Subclass and override to inject custom behavior."),zg=l(),co=n("h2"),ar=n("a"),Lm=n("span"),h(gn.$$.fragment),Z4=l(),Fm=n("span"),J4=r("Seq2SeqTrainer"),Ng=l(),po=n("div"),Oe=n("div"),h(_n.$$.fragment),X4=l(),Rm=n("p"),K4=r("Run evaluation and returns metrics."),Q4=l(),vn=n("p"),e$=r(`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Wm=n("code"),t$=r("compute_metrics"),o$=r(" argument)."),r$=l(),Gm=n("p"),a$=r("You can also subclass and override this method to inject custom behavior."),n$=l(),K=n("div"),h(bn.$$.fragment),s$=l(),jm=n("p"),i$=r("Run prediction and returns predictions and potential metrics."),l$=l(),yn=n("p"),d$=r(`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Mm=n("code"),c$=r("evaluate()"),p$=r("."),m$=l(),h(nr.$$.fragment),h$=l(),wn=n("p"),u$=r("Returns: "),Vm=n("em"),f$=r("NamedTuple"),g$=r(" A namedtuple with the following keys:"),_$=l(),mo=n("ul"),ho=n("li"),v$=r("predictions ("),Hm=n("code"),b$=r("np.ndarray"),y$=r("): The predictions on "),Bm=n("code"),w$=r("test_dataset"),E$=r("."),T$=l(),uo=n("li"),$$=r("label_ids ("),Ym=n("code"),k$=r("np.ndarray"),x$=r(", "),Zm=n("em"),A$=r("optional"),D$=r("): The labels (if the dataset contained some)."),q$=l(),fo=n("li"),P$=r("metrics ("),Jm=n("code"),S$=r("Dict[str, float]"),C$=r(", "),Xm=n("em"),O$=r("optional"),I$=r(`): The potential dictionary of metrics (if the dataset contained
labels).`),Lg=l(),go=n("h2"),sr=n("a"),Km=n("span"),h(En.$$.fragment),U$=l(),Qm=n("span"),z$=r("TrainingArguments"),Fg=l(),N=n("div"),h(Tn.$$.fragment),N$=l(),$n=n("p"),L$=r("TrainingArguments is the subset of the arguments we use in our example scripts "),eh=n("strong"),F$=r(`which relate to the training loop
itself`),R$=r("."),W$=l(),_o=n("p"),G$=r("Using "),$i=n("a"),j$=r("HfArgumentParser"),M$=r(` we can turn this class into
`),kn=n("a"),V$=r("argparse"),H$=r(` arguments that can be specified on the
command line.`),B$=l(),ce=n("div"),h(xn.$$.fragment),Y$=l(),th=n("p"),Z$=r(`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),J$=l(),vo=n("p"),X$=r("For the main process the log level defaults to "),oh=n("code"),K$=r("logging.INFO"),Q$=r(" unless overridden by "),rh=n("code"),e3=r("log_level"),t3=r(" argument."),o3=l(),bo=n("p"),r3=r("For the replica processes the log level defaults to "),ah=n("code"),a3=r("logging.WARNING"),n3=r(" unless overridden by "),nh=n("code"),s3=r("log_level_replica"),i3=r(`
argument.`),l3=l(),An=n("p"),d3=r("The choice between the main and replica process settings is made according to the return value of "),sh=n("code"),c3=r("should_log"),p3=r("."),m3=l(),ir=n("div"),h(Dn.$$.fragment),h3=l(),ih=n("p"),u3=r("Get number of steps used for a linear warmup."),f3=l(),$t=n("div"),h(qn.$$.fragment),g3=l(),lh=n("p"),_3=r(`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),v3=l(),yo=n("p"),b3=r("One such use is for "),dh=n("code"),y3=r("datasets"),w3=r("\u2019s "),ch=n("code"),E3=r("map"),T3=r(` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),$3=l(),lr=n("div"),h(Pn.$$.fragment),k3=l(),Sn=n("p"),x3=r("Serializes this instance while replace "),ph=n("code"),A3=r("Enum"),D3=r(` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),q3=l(),dr=n("div"),h(Cn.$$.fragment),P3=l(),mh=n("p"),S3=r("Serializes this instance to a JSON string."),C3=l(),cr=n("div"),h(On.$$.fragment),O3=l(),hh=n("p"),I3=r("Sanitized serialization to use with TensorBoard\u2019s hparams"),Rg=l(),wo=n("h2"),pr=n("a"),uh=n("span"),h(In.$$.fragment),U3=l(),fh=n("span"),z3=r("Seq2SeqTrainingArguments"),Wg=l(),ae=n("div"),h(Un.$$.fragment),N3=l(),zn=n("p"),L3=r("TrainingArguments is the subset of the arguments we use in our example scripts "),gh=n("strong"),F3=r(`which relate to the training loop
itself`),R3=r("."),W3=l(),Eo=n("p"),G3=r("Using "),ki=n("a"),j3=r("HfArgumentParser"),M3=r(` we can turn this class into
`),Nn=n("a"),V3=r("argparse"),H3=r(` arguments that can be specified on the
command line.`),B3=l(),ne=n("p"),Y3=r("sortish_sampler ("),_h=n("code"),Z3=r("bool"),J3=r(", "),vh=n("em"),X3=r("optional"),K3=r(", defaults to "),bh=n("code"),Q3=r("False"),ek=r(`):
Whether to use a `),yh=n("em"),tk=r("sortish sampler"),ok=r(" or not. Only possible if the underlying datasets are "),wh=n("em"),rk=r("Seq2SeqDataset"),ak=r(` for
now but will become generally available in the near future.`),nk=l(),q=n("p"),sk=r(`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict_with_generate (`),Eh=n("code"),ik=r("bool"),lk=r(", "),Th=n("em"),dk=r("optional"),ck=r(", defaults to "),$h=n("code"),pk=r("False"),mk=r(`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation_max_length (`),kh=n("code"),hk=r("int"),uk=r(", "),xh=n("em"),fk=r("optional"),gk=r(`):
The `),Ah=n("code"),_k=r("max_length"),vk=r(" to use on each evaluation loop when "),Dh=n("code"),bk=r("predict_with_generate=True"),yk=r(`. Will default to the
`),qh=n("code"),wk=r("max_length"),Ek=r(` value of the model configuration.
generation_num_beams (`),Ph=n("code"),Tk=r("int"),$k=r(", "),Sh=n("em"),kk=r("optional"),xk=r(`):
The `),Ch=n("code"),Ak=r("num_beams"),Dk=r(" to use on each evaluation loop when "),Oh=n("code"),qk=r("predict_with_generate=True"),Pk=r(`. Will default to the
`),Ih=n("code"),Sk=r("num_beams"),Ck=r(" value of the model configuration."),Gg=l(),To=n("h2"),mr=n("a"),Uh=n("span"),h(Ln.$$.fragment),Ok=l(),zh=n("span"),Ik=r("Checkpoints"),jg=l(),pe=n("p"),Uk=r("By default, "),xi=n("a"),zk=r("Trainer"),Nk=r(" will save all checkpoints in the "),Nh=n("code"),Lk=r("output_dir"),Fk=r(` you set in the
`),Ai=n("a"),Rk=r("TrainingArguments"),Wk=r(" you are using. Those will go in subfolder named "),Lh=n("code"),Gk=r("checkpoint-xxx"),jk=r(` with xxx
being the step at which the training was at.`),Mg=l(),hr=n("p"),Mk=r("Resuming training from a checkpoint can be done when calling "),Di=n("a"),Vk=r("Trainer.train()"),Hk=r(" with either:"),Vg=l(),ur=n("ul"),qi=n("li"),Fh=n("code"),Bk=r("resume_from_checkpoint=True"),Yk=r(" which will resume training from the latest checkpoint"),Zk=l(),Pi=n("li"),Rh=n("code"),Jk=r("resume_from_checkpoint=checkpoint_dir"),Xk=r(` which will resume training from the specific checkpoint in the directory
passed.`),Hg=l(),Ie=n("p"),Kk=r("In addition, you can easily save your checkpoints on the Model Hub when using "),Wh=n("code"),Qk=r("push_to_hub=True"),e7=r(`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Gh=n("code"),t7=r("hub-strategy"),o7=r(" value of your "),Si=n("a"),r7=r("TrainingArguments"),a7=r(" to either:"),Bg=l(),fr=n("ul"),gr=n("li"),jh=n("code"),n7=r('"checkpoint"'),s7=r(`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Mh=n("code"),i7=r('trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),l7=r("."),d7=l(),Ci=n("li"),Vh=n("code"),c7=r('"all_checkpoints"'),p7=r(`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),Yg=l(),$o=n("h2"),_r=n("a"),Hh=n("span"),h(Fn.$$.fragment),m7=l(),Bh=n("span"),h7=r("Logging"),Zg=l(),Ue=n("p"),u7=r("By default "),Oi=n("a"),f7=r("Trainer"),g7=r(" will use "),Yh=n("code"),_7=r("logging.INFO"),v7=r(" for the main process and "),Zh=n("code"),b7=r("logging.WARNING"),y7=r(" for the replicas if any."),Jg=l(),kt=n("p"),w7=r("These defaults can be overridden to use any of the 5 "),Jh=n("code"),E7=r("logging"),T7=r(" levels with "),Ii=n("a"),$7=r("TrainingArguments"),k7=r(`\u2019s
arguments:`),Xg=l(),vr=n("ul"),Ui=n("li"),Xh=n("code"),x7=r("log_level"),A7=r(" - for the main process"),D7=l(),zi=n("li"),Kh=n("code"),q7=r("log_level_replica"),P7=r(" - for the replicas"),Kg=l(),ze=n("p"),S7=r("Further, if "),Ni=n("a"),C7=r("TrainingArguments"),O7=r("\u2019s "),Qh=n("code"),I7=r("log_on_each_node"),U7=r(" is set to "),eu=n("code"),z7=r("False"),N7=r(` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Qg=l(),Q=n("p"),L7=r("Note that "),Li=n("a"),F7=r("Trainer"),R7=r(" is going to set "),tu=n("code"),W7=r("transformers"),G7=r(`\u2019s log level separately for each node in its
`),ou=n("code"),j7=r("Trainer.__init__()"),M7=r(` So you may want to set this sooner (see the next example) if you tap into other
`),ru=n("code"),V7=r("transformers"),H7=r(" functionality before creating the "),Fi=n("a"),B7=r("Trainer"),Y7=r(" object."),e_=l(),Ri=n("p"),Z7=r("Here is an example of how this can be used in an application:"),t_=l(),h(Rn.$$.fragment),o_=l(),Wi=n("p"),J7=r(`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),r_=l(),h(Wn.$$.fragment),a_=l(),Gi=n("p"),X7=r(`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),n_=l(),h(Gn.$$.fragment),s_=l(),ji=n("p"),K7=r(`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),i_=l(),Mi=n("p"),Q7=r("If you need your application to be as quiet as possible you could do:"),l_=l(),h(jn.$$.fragment),d_=l(),br=n("p"),ex=r("(add "),au=n("code"),tx=r("--log_on_each_node 0"),ox=r(" if on multi-node environment)"),c_=l(),ko=n("h2"),yr=n("a"),nu=n("span"),h(Mn.$$.fragment),rx=l(),su=n("span"),ax=r("Randomness"),p_=l(),me=n("p"),nx=r("When resuming from a checkpoint generated by "),Vi=n("a"),sx=r("Trainer"),ix=r(` all efforts are made to restore the
`),iu=n("em"),lx=r("python"),dx=r(", "),lu=n("em"),cx=r("numpy"),px=r(" and "),du=n("em"),mx=r("pytorch"),hx=r(` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),m_=l(),xt=n("p"),ux=r(`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Vn=n("a"),fx=r("Controlling sources of randomness"),gx=r(`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),cu=n("code"),_x=r("torch.backends.cudnn.deterministic"),vx=r(`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),h_=l(),xo=n("h2"),wr=n("a"),pu=n("span"),h(Hn.$$.fragment),bx=l(),mu=n("span"),yx=r("Specific GPUs Selection"),u_=l(),Hi=n("p"),wx=r("Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),f_=l(),Er=n("p"),Ex=r("When using "),Bn=n("a"),hu=n("code"),Tx=r("DistributedDataParallel"),$x=r(" to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),g_=l(),h(Yn.$$.fragment),__=l(),At=n("p"),kx=r("if you have either "),Zn=n("a"),uu=n("code"),xx=r("accelerate"),Ax=r(" or "),Jn=n("a"),fu=n("code"),Dx=r("deepspeed"),qx=r(" installed you can also accomplish the same by using one of:"),v_=l(),h(Xn.$$.fragment),b_=l(),h(Kn.$$.fragment),y_=l(),Tr=n("p"),Px=r("You don\u2019t need to use the Accelerate or "),Bi=n("a"),Sx=r("the Deepspeed integration"),Cx=r(" features to use these launchers."),w_=l(),Yi=n("p"),Ox=r("Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),E_=l(),Zi=n("p"),Ix=r("The following environment variables help you control which GPUs to use and their order."),T_=l(),Ji=n("p"),gu=n("strong"),_u=n("code"),Ux=r("CUDA_VISIBLE_DEVICES"),$_=l(),$r=n("p"),zx=r("If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),vu=n("code"),Nx=r("CUDA_VISIBLE_DEVICES"),Lx=r(" to a list of the GPUs to be used."),k_=l(),Xi=n("p"),Fx=r("For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),x_=l(),h(Qn.$$.fragment),A_=l(),Dt=n("p"),Rx=r("So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),bu=n("code"),Wx=r("cuda:0"),Gx=r(" and "),yu=n("code"),jx=r("cuda:1"),Mx=r(" correspondingly."),D_=l(),Ki=n("p"),Vx=r("You can even change their order:"),q_=l(),h(es.$$.fragment),P_=l(),qt=n("p"),Hx=r("Here your physical GPUs 0 and 2 are mapped to "),wu=n("code"),Bx=r("cuda:1"),Yx=r(" and "),Eu=n("code"),Zx=r("cuda:0"),Jx=r(" correspondingly."),S_=l(),Pt=n("p"),Xx=r("The above examples were all for "),Tu=n("code"),Kx=r("DistributedDataParallel"),Qx=r(" use pattern, but the same method works for "),ts=n("a"),$u=n("code"),e6=r("DataParallel"),t6=r(" as well:"),C_=l(),h(os.$$.fragment),O_=l(),Qi=n("p"),o6=r("To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),I_=l(),h(rs.$$.fragment),U_=l(),el=n("p"),r6=r("As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),z_=l(),h(as.$$.fragment),N_=l(),tl=n("p"),a6=r("but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),L_=l(),ol=n("p"),ku=n("strong"),xu=n("code"),n6=r("CUDA_DEVICE_ORDER"),F_=l(),kr=n("p"),s6=r("There is an additional environment variable "),Au=n("code"),i6=r("CUDA_DEVICE_ORDER"),l6=r(" that controls how the physical devices are ordered. The two choices are:"),R_=l(),rl=n("ol"),ns=n("li"),d6=r("ordered by PCIe bus IDs (matches "),Du=n("code"),c6=r("nvidia-smi"),p6=r("\u2019s order) - this is the default."),W_=l(),h(ss.$$.fragment),G_=l(),is=n("ol"),qu=n("li"),m6=r("ordered by GPU compute capabilities"),j_=l(),h(ls.$$.fragment),M_=l(),St=n("p"),h6=r("Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),Pu=n("code"),u6=r("CUDA_DEVICE_ORDER=FASTEST_FIRST"),f6=r(" will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),Su=n("code"),g6=r("nvidia-smi"),_6=r(" will still report them in the PCIe order."),V_=l(),al=n("p"),v6=r("The other solution to swapping the order is to use:"),H_=l(),h(ds.$$.fragment),B_=l(),nl=n("p"),b6=r("In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),Y_=l(),xr=n("p"),y6=r("Also if you do set this environment variable it\u2019s the best to set it in your "),Cu=n("code"),w6=r("~/.bashrc"),E6=r(" file or some other startup config file and forget about it."),Z_=l(),Ao=n("h2"),Ar=n("a"),Ou=n("span"),h(cs.$$.fragment),T6=l(),Iu=n("span"),$6=r("Trainer Integrations"),J_=l(),Dr=n("p"),k6=r("The "),sl=n("a"),x6=r("Trainer"),A6=r(` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),X_=l(),Ne=n("p"),D6=r("Currently it supports third party solutions, "),ps=n("a"),q6=r("DeepSpeed"),P6=r(" and "),ms=n("a"),S6=r("FairScale"),C6=r(", which implement parts of the paper "),hs=n("a"),O6=r(`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),I6=r("."),K_=l(),il=n("p"),U6=r("This provided support is new and experimental as of this writing."),Q_=l(),ll=n("a"),ev=l(),Do=n("h3"),qr=n("a"),Uu=n("span"),h(us.$$.fragment),z6=l(),zu=n("span"),N6=r("CUDA Extension Installation Notes"),tv=l(),dl=n("p"),L6=r("As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),ov=l(),Ct=n("p"),F6=r("While all installation issues should be dealt with through the corresponding GitHub Issues of "),fs=n("a"),R6=r("FairScale"),W6=r(" and "),gs=n("a"),G6=r("Deepspeed"),j6=r(`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),rv=l(),cl=n("p"),M6=r("Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),av=l(),h(_s.$$.fragment),nv=l(),pl=n("p"),V6=r("please, read the following notes first."),sv=l(),Ot=n("p"),H6=r("In these notes we give examples for what to do when "),Nu=n("code"),B6=r("pytorch"),Y6=r(" has been built with CUDA "),Lu=n("code"),Z6=r("10.2"),J6=r(`. If your situation is
different remember to adjust the version number to the one you are after.`),iv=l(),qo=n("h4"),Pr=n("a"),Fu=n("span"),h(vs.$$.fragment),X6=l(),Ru=n("span"),K6=r("Possible problem #1"),lv=l(),ml=n("p"),Q6=r(`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),dv=l(),Le=n("p"),eA=r("For example, if you installed "),Wu=n("code"),tA=r("pytorch"),oA=r(" with "),Gu=n("code"),rA=r("cudatoolkit==10.2"),aA=r(` in the Python environment, you also need to have
CUDA `),ju=n("code"),nA=r("10.2"),sA=r(" installed system-wide."),cv=l(),It=n("p"),iA=r("The exact location may vary from system to system, but "),Mu=n("code"),lA=r("/usr/local/cuda-10.2"),dA=r(` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),Vu=n("code"),cA=r("PATH"),pA=r(` environment variable, one can find the
installation location by doing:`),pv=l(),h(bs.$$.fragment),mv=l(),Sr=n("p"),mA=r(`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),ys=n("a"),hA=r("ubuntu cuda 10.2 install"),uA=r("."),hv=l(),Po=n("h4"),Cr=n("a"),Hu=n("span"),h(ws.$$.fragment),fA=l(),Bu=n("span"),gA=r("Possible problem #2"),uv=l(),hl=n("p"),_A=r(`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),fv=l(),h(Es.$$.fragment),gv=l(),Ut=n("p"),vA=r("Now, in this situation you need to make sure that your "),Yu=n("code"),bA=r("PATH"),yA=r(" and "),Zu=n("code"),wA=r("LD_LIBRARY_PATH"),EA=r(` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),_v=l(),ul=n("p"),TA=r("First, you may look at their contents:"),vv=l(),h(Ts.$$.fragment),bv=l(),fl=n("p"),$A=r("so you get an idea of what is inside."),yv=l(),Or=n("p"),kA=r("It\u2019s possible that "),Ju=n("code"),xA=r("LD_LIBRARY_PATH"),AA=r(" is empty."),wv=l(),tt=n("p"),Xu=n("code"),DA=r("PATH"),qA=r(" lists the locations of where executables can be found and "),Ku=n("code"),PA=r("LD_LIBRARY_PATH"),SA=r(` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Qu=n("code"),CA=r(":"),OA=r(` is used to separate multiple
entries.`),Ev=l(),gl=n("p"),IA=r(`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),Tv=l(),h($s.$$.fragment),$v=l(),_l=n("p"),UA=r("Note that we aren\u2019t overwriting the existing values, but prepending instead."),kv=l(),Fe=n("p"),zA=r(`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),ef=n("code"),NA=r("lib64"),LA=r(" sub-directory is where the various CUDA "),tf=n("code"),FA=r(".so"),RA=r(" objects, like "),of=n("code"),WA=r("libcudart.so"),GA=r(` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),xv=l(),So=n("h4"),Ir=n("a"),rf=n("span"),h(ks.$$.fragment),jA=l(),af=n("span"),MA=r("Possible problem #3"),Av=l(),zt=n("p"),VA=r("Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),nf=n("code"),HA=r("gcc-9"),BA=r(` but it wants
`),sf=n("code"),YA=r("gcc-7"),ZA=r("."),Dv=l(),vl=n("p"),JA=r("There are various ways to go about it."),qv=l(),bl=n("p"),XA=r("If you can install the latest CUDA toolkit it typically should support the newer compiler."),Pv=l(),Ur=n("p"),KA=r(`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),lf=n("code"),QA=r("gcc-7"),e9=r(` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Sv=l(),h(xs.$$.fragment),Cv=l(),j=n("p"),t9=r("Here, we are making a symlink to "),df=n("code"),o9=r("gcc-7"),r9=r(" from "),cf=n("code"),a9=r("/usr/local/cuda-10.2/bin/gcc"),n9=r(` and since
`),pf=n("code"),s9=r("/usr/local/cuda-10.2/bin/"),i9=r(" should be in the "),mf=n("code"),l9=r("PATH"),d9=r(` environment variable (see the previous problem\u2019s solution), it
should find `),hf=n("code"),c9=r("gcc-7"),p9=r(" (and "),uf=n("code"),m9=r("g++7"),h9=r(") and then the build will succeed."),Ov=l(),yl=n("p"),u9=r("As always make sure to edit the paths in the example to match your situation."),Iv=l(),Co=n("h3"),zr=n("a"),ff=n("span"),h(As.$$.fragment),f9=l(),gf=n("span"),g9=r("FairScale"),Uv=l(),Re=n("p"),_9=r("By integrating "),Ds=n("a"),v9=r("FairScale"),b9=r(" the "),wl=n("a"),y9=r("Trainer"),w9=r(`
provides support for the following features from `),qs=n("a"),E9=r("the ZeRO paper"),T9=r(":"),zv=l(),We=n("ol"),_f=n("li"),$9=r("Optimizer State Sharding"),k9=l(),vf=n("li"),x9=r("Gradient Sharding"),A9=l(),bf=n("li"),D9=r("Model Parameters Sharding (new and very experimental)"),q9=l(),yf=n("li"),P9=r("CPU offload (new and very experimental)"),Nv=l(),El=n("p"),S9=r("You will need at least two GPUs to use this feature."),Lv=l(),Ps=n("p"),wf=n("strong"),C9=r("Installation"),O9=r(":"),Fv=l(),Tl=n("p"),I9=r("Install the library via pypi:"),Rv=l(),h(Ss.$$.fragment),Wv=l(),Nt=n("p"),U9=r("or via "),Ef=n("code"),z9=r("transformers"),N9=r("\u2019 "),Tf=n("code"),L9=r("extras"),F9=r(":"),Gv=l(),h(Cs.$$.fragment),jv=l(),Lt=n("p"),R9=r("(available starting from "),$f=n("code"),W9=r("transformers==4.6.0"),G9=r(") or find more details on "),Os=n("a"),j9=r("the FairScale\u2019s GitHub page"),M9=r("."),Mv=l(),Nr=n("p"),V9=r("If you\u2019re still struggling with the build, first make sure to read "),$l=n("a"),H9=r("CUDA Extension Installation Notes"),B9=r("."),Vv=l(),kl=n("p"),Y9=r("If it\u2019s still not resolved the build issue, here are a few more ideas."),Hv=l(),Is=n("p"),kf=n("code"),Z9=r("fairscale"),J9=r(` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),Bv=l(),h(Us.$$.fragment),Yv=l(),xl=n("p"),X9=r("or:"),Zv=l(),h(zs.$$.fragment),Jv=l(),Ns=n("p"),xf=n("code"),K9=r("fairscale"),Q9=r(" also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Xv=l(),h(Ls.$$.fragment),Kv=l(),Al=n("p"),e8=r("or:"),Qv=l(),h(Fs.$$.fragment),e1=l(),Dl=n("p"),t8=r("Of course, adjust the urls to match the cuda version you use."),t1=l(),Lr=n("p"),o8=r(`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Rs=n("a"),r8=r("FairScale"),a8=r("."),o1=l(),Ws=n("p"),Af=n("strong"),n8=r("Usage"),s8=r(":"),r1=l(),Ft=n("p"),i8=r("To use the first version of Sharded data-parallelism, add "),Df=n("code"),l8=r("--sharded_ddp simple"),d8=r(` to the command line arguments, and
make sure you have added the distributed launcher `),qf=n("code"),c8=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),p8=r(" if you haven\u2019t been using it already."),a1=l(),Fr=n("p"),m8=r("For example here is how you could use it for "),Pf=n("code"),h8=r("run_translation.py"),u8=r(" with 2 GPUs:"),n1=l(),h(Gs.$$.fragment),s1=l(),ql=n("p"),f8=r("Notes:"),i1=l(),Ge=n("ul"),Sf=n("li"),g8=r("This feature requires distributed training (so multiple GPUs)."),_8=l(),Cf=n("li"),v8=r("It is not implemented for TPUs."),b8=l(),js=n("li"),y8=r("It works with "),Of=n("code"),w8=r("--fp16"),E8=r(" too, to make things even faster."),T8=l(),Ms=n("li"),$8=r("One of the main benefits of enabling "),If=n("code"),k8=r("--sharded_ddp simple"),x8=r(` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),l1=l(),Vs=n("ol"),ot=n("li"),A8=r("To use the second version of Sharded data-parallelism, add "),Uf=n("code"),D8=r("--sharded_ddp zero_dp_2"),q8=r(" or "),zf=n("code"),P8=r("--sharded_ddp zero_dp_3"),S8=r(" to the command line arguments, and make sure you have added the distributed launcher "),Nf=n("code"),C8=r("-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),O8=r(" if you haven\u2019t been using it already."),d1=l(),Rr=n("p"),I8=r("For example here is how you could use it for "),Lf=n("code"),U8=r("run_translation.py"),z8=r(" with 2 GPUs:"),c1=l(),h(Hs.$$.fragment),p1=l(),Oo=n("p"),Ff=n("code"),N8=r("zero_dp_2"),L8=r(" is an optimized version of the simple wrapper, while "),Rf=n("code"),F8=r("zero_dp_3"),R8=r(` fully shards model weights,
gradients and optimizer states.`),m1=l(),Rt=n("p"),W8=r("Both are compatible with adding "),Wf=n("code"),G8=r("cpu_offload"),j8=r(" to enable ZeRO-offload (activate it like this: "),Gf=n("code"),M8=r('--sharded_ddp "zero_dp_2 cpu_offload"'),V8=r(")."),h1=l(),Pl=n("p"),H8=r("Notes:"),u1=l(),he=n("ul"),jf=n("li"),B8=r("This feature requires distributed training (so multiple GPUs)."),Y8=l(),Mf=n("li"),Z8=r("It is not implemented for TPUs."),J8=l(),Bs=n("li"),X8=r("It works with "),Vf=n("code"),K8=r("--fp16"),Q8=r(" too, to make things even faster."),eD=l(),Io=n("li"),tD=r("The "),Hf=n("code"),oD=r("cpu_offload"),rD=r(" additional option requires "),Bf=n("code"),aD=r("--fp16"),nD=r("."),sD=l(),Yf=n("li"),iD=r(`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),f1=l(),Sl=n("p"),lD=r("Known caveats:"),g1=l(),Wr=n("ul"),Uo=n("li"),dD=r("This feature is incompatible with "),Zf=n("code"),cD=r("--predict_with_generate"),pD=r(" in the "),Jf=n("em"),mD=r("run_translation.py"),hD=r(" script."),uD=l(),ke=n("li"),fD=r("Using "),Xf=n("code"),gD=r("--sharded_ddp zero_dp_3"),_D=r(` requires wrapping each layer of the model in the special container
`),Kf=n("code"),vD=r("FullyShardedDataParallelism"),bD=r(" of fairscale. It should be used with the option "),Qf=n("code"),yD=r("auto_wrap"),wD=r(` if you are not
doing this yourself: `),eg=n("code"),ED=r('--sharded_ddp "zero_dp_3 auto_wrap"'),TD=r("."),_1=l(),Cl=n("p"),$D=r("Sections that were moved:"),v1=l(),y=n("p"),kD=r("[ "),Ol=n("a"),xD=r("DeepSpeed"),tg=n("a"),AD=r(`
| `),Il=n("a"),DD=r("Installation"),og=n("a"),qD=r(`
| `),Ul=n("a"),PD=r("Deployment with multiple GPUs"),rg=n("a"),SD=r(`
| `),zl=n("a"),CD=r("Deployment with one GPU"),ag=n("a"),OD=r(`
| `),Nl=n("a"),ID=r("Deployment in Notebooks"),ng=n("a"),UD=r(`
| `),Ll=n("a"),zD=r("Configuration"),sg=n("a"),ND=r(`
| `),Fl=n("a"),LD=r("Passing Configuration"),ig=n("a"),FD=r(`
| `),Rl=n("a"),RD=r("Shared Configuration"),lg=n("a"),WD=r(`
| `),Wl=n("a"),GD=r("ZeRO"),dg=n("a"),jD=r(`
| `),Gl=n("a"),MD=r("ZeRO-2 Config"),cg=n("a"),VD=r(`
| `),jl=n("a"),HD=r("ZeRO-3 Config"),pg=n("a"),BD=r(`
| `),Ml=n("a"),YD=r("NVMe Support"),mg=n("a"),ZD=r(`
| `),Vl=n("a"),JD=r("ZeRO-2 vs ZeRO-3 Performance"),hg=n("a"),XD=r(`
| `),Hl=n("a"),KD=r("ZeRO-2 Example"),ug=n("a"),QD=r(`
| `),Bl=n("a"),eq=r("ZeRO-3 Example"),fg=n("a"),tq=r(`
| `),Yl=n("a"),oq=r("Optimizer"),gg=n("a"),rq=r(`
| `),Zl=n("a"),aq=r("Scheduler"),_g=n("a"),nq=r(`
| `),Jl=n("a"),sq=r("fp32 Precision"),vg=n("a"),iq=r(`
| `),Xl=n("a"),lq=r("Automatic Mixed Precision"),bg=n("a"),dq=r(`
| `),Kl=n("a"),cq=r("Batch Size"),yg=n("a"),pq=r(`
| `),Ql=n("a"),mq=r("Gradient Accumulation"),wg=n("a"),hq=r(`
| `),ed=n("a"),uq=r("Gradient Clipping"),Eg=n("a"),fq=r(`
| `),td=n("a"),gq=r("Getting The Model Weights Out"),Tg=n("a"),_q=r(`
]`),this.h()},l(t){const c=iL('[data-svelte="svelte-1phssyn"]',document.head);T=s(c,"META",{name:!0,content:!0}),c.forEach(o),L=d(t),x=s(t,"H1",{class:!0});var Ys=i(x);S=s(Ys,"A",{id:!0,class:!0,href:!0});var $g=i(S);fe=s($g,"SPAN",{});var kg=i(fe);u(R.$$.fragment,kg),kg.forEach(o),$g.forEach(o),W=d(Ys),V=s(Ys,"SPAN",{});var xg=i(V);ge=a(xg,"Trainer"),xg.forEach(o),Ys.forEach(o),ee=d(t),G=s(t,"P",{});var od=i(G);ie=a(od,"The "),le=s(od,"A",{href:!0});var Wq=i(le);te=a(Wq,"Trainer"),Wq.forEach(o),de=a(od," class provides an API for feature-complete training in PyTorch for most standard use cases. It\u2019s used in most of the "),Y=s(od,"A",{href:!0});var Gq=i(Y);Ze=a(Gq,"example scripts"),Gq.forEach(o),_e=a(od,"."),od.forEach(o),z=d(t),O=s(t,"P",{});var rd=i(O);rt=a(rd,"Before instantiating your "),oe=s(rd,"A",{href:!0});var jq=i(oe);at=a(jq,"Trainer"),jq.forEach(o),nt=a(rd,", create a "),ve=s(rd,"A",{href:!0});var Mq=i(ve);sa=a(Mq,"TrainingArguments"),Mq.forEach(o),ia=a(rd," to access all the points of customization during training."),rd.forEach(o),Je=d(t),Ae=s(t,"P",{});var y1=i(Ae);la=a(y1,"The API supports distributed training on multiple GPUs/TPUs, mixed precision through "),be=s(y1,"A",{href:!0,rel:!0});var Vq=i(be);da=a(Vq,"NVIDIA Apex"),Vq.forEach(o),ca=a(y1," and Native AMP for PyTorch."),y1.forEach(o),Z=d(t),H=s(t,"P",{});var w1=i(H);Ks=a(w1,"The "),ye=s(w1,"A",{href:!0});var Hq=i(ye);Lo=a(Hq,"Trainer"),Hq.forEach(o),Qs=a(w1," contains the basic training loop which supports the above features. To inject custom behavior you can subclass them and override the following methods:"),w1.forEach(o),Xt=d(t),D=s(t,"UL",{});var U=i(D);B=s(U,"LI",{});var vq=i(B);Fo=s(vq,"STRONG",{});var Bq=i(Fo);ei=a(Bq,"get_train_dataloader"),Bq.forEach(o),ti=a(vq," \u2014 Creates the training DataLoader."),vq.forEach(o),oi=d(U),ri=s(U,"LI",{});var bq=i(ri);ac=s(bq,"STRONG",{});var Yq=i(ac);Kb=a(Yq,"get_eval_dataloader"),Yq.forEach(o),Qb=a(bq," \u2014 Creates the evaluation DataLoader."),bq.forEach(o),ey=d(U),ai=s(U,"LI",{});var yq=i(ai);nc=s(yq,"STRONG",{});var Zq=i(nc);ty=a(Zq,"get_test_dataloader"),Zq.forEach(o),oy=a(yq," \u2014 Creates the test DataLoader."),yq.forEach(o),ry=d(U),ni=s(U,"LI",{});var wq=i(ni);sc=s(wq,"STRONG",{});var Jq=i(sc);ay=a(Jq,"log"),Jq.forEach(o),ny=a(wq," \u2014 Logs information on the various objects watching training."),wq.forEach(o),sy=d(U),st=s(U,"LI",{});var Zs=i(st);ic=s(Zs,"STRONG",{});var Xq=i(ic);iy=a(Xq,"create_optimizer_and_scheduler"),Xq.forEach(o),ly=a(Zs,` \u2014 Sets up the optimizer and learning rate scheduler if they were not passed at
init. Note, that you can also subclass or override the `),lc=s(Zs,"CODE",{});var Kq=i(lc);dy=a(Kq,"create_optimizer"),Kq.forEach(o),cy=a(Zs," and "),dc=s(Zs,"CODE",{});var Qq=i(dc);py=a(Qq,"create_scheduler"),Qq.forEach(o),my=a(Zs,` methods
separately.`),Zs.forEach(o),hy=d(U),si=s(U,"LI",{});var Eq=i(si);cc=s(Eq,"STRONG",{});var eP=i(cc);uy=a(eP,"create_optimizer"),eP.forEach(o),fy=a(Eq," \u2014 Sets up the optimizer if it wasn\u2019t passed at init."),Eq.forEach(o),gy=d(U),ii=s(U,"LI",{});var Tq=i(ii);pc=s(Tq,"STRONG",{});var tP=i(pc);_y=a(tP,"create_scheduler"),tP.forEach(o),vy=a(Tq," \u2014 Sets up the learning rate scheduler if it wasn\u2019t passed at init."),Tq.forEach(o),by=d(U),li=s(U,"LI",{});var $q=i(li);mc=s($q,"STRONG",{});var oP=i(mc);yy=a(oP,"compute_loss"),oP.forEach(o),wy=a($q," - Computes the loss on a batch of training inputs."),$q.forEach(o),Ey=d(U),di=s(U,"LI",{});var kq=i(di);hc=s(kq,"STRONG",{});var rP=i(hc);Ty=a(rP,"training_step"),rP.forEach(o),$y=a(kq," \u2014 Performs a training step."),kq.forEach(o),ky=d(U),ci=s(U,"LI",{});var xq=i(ci);uc=s(xq,"STRONG",{});var aP=i(uc);xy=a(aP,"prediction_step"),aP.forEach(o),Ay=a(xq," \u2014 Performs an evaluation/test step."),xq.forEach(o),Dy=d(U),pi=s(U,"LI",{});var Aq=i(pi);fc=s(Aq,"STRONG",{});var nP=i(fc);qy=a(nP,"evaluate"),nP.forEach(o),Py=a(Aq," \u2014 Runs an evaluation loop and returns metrics."),Aq.forEach(o),Sy=d(U),mi=s(U,"LI",{});var Dq=i(mi);gc=s(Dq,"STRONG",{});var sP=i(gc);Cy=a(sP,"predict"),sP.forEach(o),Oy=a(Dq," \u2014 Returns predictions (with metrics if labels are available) on a test set."),Dq.forEach(o),U.forEach(o),Pg=d(t),u(Ro.$$.fragment,t),Sg=d(t),Wo=s(t,"P",{});var E1=i(Wo);Iy=a(E1,"Here is an example of how to customize "),hi=s(E1,"A",{href:!0});var iP=i(hi);Uy=a(iP,"Trainer"),iP.forEach(o),zy=a(E1," to use a weighted loss (useful when you have an unbalanced training set):"),E1.forEach(o),Cg=d(t),u(pa.$$.fragment,t),Og=d(t),it=s(t,"P",{});var ad=i(it);Ny=a(ad,"Another way to customize the training loop behavior for the PyTorch "),ui=s(ad,"A",{href:!0});var lP=i(ui);Ly=a(lP,"Trainer"),lP.forEach(o),Fy=a(ad," is to use "),fi=s(ad,"A",{href:!0});var dP=i(fi);Ry=a(dP,"callbacks"),dP.forEach(o),Wy=a(ad," that can inspect the training loop state (for progress reporting, logging on TensorBoard or other ML platforms\u2026) and take decisions (like early stopping)."),ad.forEach(o),Ig=d(t),Kt=s(t,"H2",{class:!0});var T1=i(Kt);Go=s(T1,"A",{id:!0,class:!0,href:!0});var cP=i(Go);_c=s(cP,"SPAN",{});var pP=i(_c);u(ma.$$.fragment,pP),pP.forEach(o),cP.forEach(o),Gy=d(T1),vc=s(T1,"SPAN",{});var mP=i(vc);jy=a(mP,"Trainer"),mP.forEach(o),T1.forEach(o),Ug=d(t),b=s(t,"DIV",{class:!0});var w=i(b);u(ha.$$.fragment,w),My=d(w),bc=s(w,"P",{});var hP=i(bc);Vy=a(hP,"Trainer is a simple but feature-complete training and eval loop for PyTorch, optimized for \u{1F917} Transformers."),hP.forEach(o),Hy=d(w),yc=s(w,"P",{});var uP=i(yc);By=a(uP,"Important attributes:"),uP.forEach(o),Yy=d(w),we=s(w,"UL",{});var Wt=i(we);jo=s(Wt,"LI",{});var Ag=i(jo);wc=s(Ag,"STRONG",{});var fP=i(wc);Zy=a(fP,"model"),fP.forEach(o),Jy=a(Ag," \u2014 Always points to the core model. If using a transformers model, it will be a "),gi=s(Ag,"A",{href:!0});var gP=i(gi);Xy=a(gP,"PreTrainedModel"),gP.forEach(o),Ky=a(Ag,`
subclass.`),Ag.forEach(o),Qy=d(Wt),J=s(Wt,"LI",{});var xe=i(J);Ec=s(xe,"STRONG",{});var _P=i(Ec);e0=a(_P,"model_wrapped"),_P.forEach(o),t0=a(xe,` \u2014 Always points to the most external model in case one or more other modules wrap the
original model. This is the model that should be used for the forward pass. For example, under `),Tc=s(xe,"CODE",{});var vP=i(Tc);o0=a(vP,"DeepSpeed"),vP.forEach(o),r0=a(xe,`,
the inner model is wrapped in `),$c=s(xe,"CODE",{});var bP=i($c);a0=a(bP,"DeepSpeed"),bP.forEach(o),n0=a(xe," and then again in "),kc=s(xe,"CODE",{});var yP=i(kc);s0=a(yP,"torch.nn.DistributedDataParallel"),yP.forEach(o),i0=a(xe,`. If the inner
model hasn\u2019t been wrapped, then `),xc=s(xe,"CODE",{});var wP=i(xc);l0=a(wP,"self.model_wrapped"),wP.forEach(o),d0=a(xe," is the same as "),Ac=s(xe,"CODE",{});var EP=i(Ac);c0=a(EP,"self.model"),EP.forEach(o),p0=a(xe,"."),xe.forEach(o),m0=d(Wt),_i=s(Wt,"LI",{});var qq=i(_i);Dc=s(qq,"STRONG",{});var TP=i(Dc);h0=a(TP,"is_model_parallel"),TP.forEach(o),u0=a(qq,` \u2014 Whether or not a model has been switched to a model parallel mode (different from
data parallelism, this means some of the model layers are split on different GPUs).`),qq.forEach(o),f0=d(Wt),De=s(Wt,"LI",{});var zo=i(De);qc=s(zo,"STRONG",{});var $P=i(qc);g0=a($P,"place_model_on_device"),$P.forEach(o),_0=a(zo,` \u2014 Whether or not to automatically place the model on the device - it will be set
to `),Pc=s(zo,"CODE",{});var kP=i(Pc);v0=a(kP,"False"),kP.forEach(o),b0=a(zo,` if model parallel or deepspeed is used, or if the default
`),Sc=s(zo,"CODE",{});var xP=i(Sc);y0=a(xP,"TrainingArguments.place_model_on_device"),xP.forEach(o),w0=a(zo," is overridden to return "),Cc=s(zo,"CODE",{});var AP=i(Cc);E0=a(AP,"False"),AP.forEach(o),T0=a(zo," ."),zo.forEach(o),$0=d(Wt),qe=s(Wt,"LI",{});var No=i(qe);Oc=s(No,"STRONG",{});var DP=i(Oc);k0=a(DP,"is_in_train"),DP.forEach(o),x0=a(No," \u2014 Whether or not a model is currently running "),Ic=s(No,"CODE",{});var qP=i(Ic);A0=a(qP,"train"),qP.forEach(o),D0=a(No," (e.g. when "),Uc=s(No,"CODE",{});var PP=i(Uc);q0=a(PP,"evaluate"),PP.forEach(o),P0=a(No,` is called while
in `),zc=s(No,"CODE",{});var SP=i(zc);S0=a(SP,"train"),SP.forEach(o),C0=a(No,")"),No.forEach(o),Wt.forEach(o),O0=d(w),Mo=s(w,"DIV",{class:!0});var $1=i(Mo);u(ua.$$.fragment,$1),I0=d($1),fa=s($1,"P",{});var k1=i(fa);U0=a(k1,"Add a callback to the current list of "),Nc=s(k1,"CODE",{});var CP=i(Nc);z0=a(CP,"TrainerCallback"),CP.forEach(o),N0=a(k1,"."),k1.forEach(o),$1.forEach(o),L0=d(w),Vo=s(w,"DIV",{class:!0});var x1=i(Vo);u(ga.$$.fragment,x1),F0=d(x1),_a=s(x1,"P",{});var A1=i(_a);R0=a(A1,"A helper wrapper that creates an appropriate context manager for "),Lc=s(A1,"CODE",{});var OP=i(Lc);W0=a(OP,"autocast"),OP.forEach(o),G0=a(A1,` while feeding it the desired
arguments, depending on the situation.`),A1.forEach(o),x1.forEach(o),j0=d(w),lt=s(w,"DIV",{class:!0});var nd=i(lt);u(va.$$.fragment,nd),M0=d(nd),Fc=s(nd,"P",{});var IP=i(Fc);V0=a(IP,"How the loss is computed by Trainer. By default, all models return the loss in the first element."),IP.forEach(o),H0=d(nd),Rc=s(nd,"P",{});var UP=i(Rc);B0=a(UP,"Subclass and override for custom behavior."),UP.forEach(o),nd.forEach(o),Y0=d(w),dt=s(w,"DIV",{class:!0});var sd=i(dt);u(ba.$$.fragment,sd),Z0=d(sd),Wc=s(sd,"P",{});var zP=i(Wc);J0=a(zP,"Setup the optimizer."),zP.forEach(o),X0=d(sd),ya=s(sd,"P",{});var D1=i(ya);K0=a(D1,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Gc=s(D1,"CODE",{});var NP=i(Gc);Q0=a(NP,"optimizers"),NP.forEach(o),e2=a(D1,", or subclass and override this method in a subclass."),D1.forEach(o),sd.forEach(o),t2=d(w),ct=s(w,"DIV",{class:!0});var id=i(ct);u(wa.$$.fragment,id),o2=d(id),jc=s(id,"P",{});var LP=i(jc);r2=a(LP,"Setup the optimizer and the learning rate scheduler."),LP.forEach(o),a2=d(id),Xe=s(id,"P",{});var Gr=i(Xe);n2=a(Gr,`We provide a reasonable default that works well. If you want to use something else, you can pass a tuple in the
Trainer\u2019s init through `),Mc=s(Gr,"CODE",{});var FP=i(Mc);s2=a(FP,"optimizers"),FP.forEach(o),i2=a(Gr,", or subclass and override this method (or "),Vc=s(Gr,"CODE",{});var RP=i(Vc);l2=a(RP,"create_optimizer"),RP.forEach(o),d2=a(Gr,` and/or
`),Hc=s(Gr,"CODE",{});var WP=i(Hc);c2=a(WP,"create_scheduler"),WP.forEach(o),p2=a(Gr,") in a subclass."),Gr.forEach(o),id.forEach(o),m2=d(w),Ho=s(w,"DIV",{class:!0});var q1=i(Ho);u(Ea.$$.fragment,q1),h2=d(q1),Bc=s(q1,"P",{});var GP=i(Bc);u2=a(GP,`Setup the scheduler. The optimizer of the trainer must have been set up either before this method is called or
passed as an argument.`),GP.forEach(o),q1.forEach(o),f2=d(w),Pe=s(w,"DIV",{class:!0});var jr=i(Pe);u(Ta.$$.fragment,jr),g2=d(jr),Yc=s(jr,"P",{});var jP=i(Yc);_2=a(jP,"Run evaluation and returns metrics."),jP.forEach(o),v2=d(jr),$a=s(jr,"P",{});var P1=i($a);b2=a(P1,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Zc=s(P1,"CODE",{});var MP=i(Zc);y2=a(MP,"compute_metrics"),MP.forEach(o),w2=a(P1," argument)."),P1.forEach(o),E2=d(jr),Jc=s(jr,"P",{});var VP=i(Jc);T2=a(VP,"You can also subclass and override this method to inject custom behavior."),VP.forEach(o),jr.forEach(o),$2=d(w),pt=s(w,"DIV",{class:!0});var ld=i(pt);u(ka.$$.fragment,ld),k2=d(ld),Qt=s(ld,"P",{});var dd=i(Qt);x2=a(dd,"Prediction/evaluation loop, shared by "),Xc=s(dd,"CODE",{});var HP=i(Xc);A2=a(HP,"Trainer.evaluate()"),HP.forEach(o),D2=a(dd," and "),Kc=s(dd,"CODE",{});var BP=i(Kc);q2=a(BP,"Trainer.predict()"),BP.forEach(o),P2=a(dd,"."),dd.forEach(o),S2=d(ld),Qc=s(ld,"P",{});var YP=i(Qc);C2=a(YP,"Works both with or without labels."),YP.forEach(o),ld.forEach(o),O2=d(w),Bo=s(w,"DIV",{class:!0});var S1=i(Bo);u(xa.$$.fragment,S1),I2=d(S1),Aa=s(S1,"P",{});var C1=i(Aa);U2=a(C1,"For models that inherit from "),vi=s(C1,"A",{href:!0});var ZP=i(vi);z2=a(ZP,"PreTrainedModel"),ZP.forEach(o),N2=a(C1,`, uses that method to compute the number of floating point
operations for every backward + forward pass. If using another model, either implement such a method in the
model or subclass and override this method.`),C1.forEach(o),S1.forEach(o),L2=d(w),mt=s(w,"DIV",{class:!0});var cd=i(mt);u(Da.$$.fragment,cd),F2=d(cd),qa=s(cd,"P",{});var O1=i(qa);R2=a(O1,"Returns the evaluation "),ep=s(O1,"CODE",{});var JP=i(ep);W2=a(JP,"DataLoader"),JP.forEach(o),G2=a(O1,"."),O1.forEach(o),j2=d(cd),tp=s(cd,"P",{});var XP=i(tp);M2=a(XP,"Subclass and override this method if you want to inject some custom behavior."),XP.forEach(o),cd.forEach(o),V2=d(w),Yo=s(w,"DIV",{class:!0});var I1=i(Yo);u(Pa.$$.fragment,I1),H2=d(I1),op=s(I1,"P",{});var KP=i(op);B2=a(KP,"Returns the optimizer class and optimizer parameters based on the training arguments."),KP.forEach(o),I1.forEach(o),Y2=d(w),ht=s(w,"DIV",{class:!0});var pd=i(ht);u(Sa.$$.fragment,pd),Z2=d(pd),Ca=s(pd,"P",{});var U1=i(Ca);J2=a(U1,"Returns the test "),rp=s(U1,"CODE",{});var QP=i(rp);X2=a(QP,"DataLoader"),QP.forEach(o),K2=a(U1,"."),U1.forEach(o),Q2=d(pd),ap=s(pd,"P",{});var eS=i(ap);ew=a(eS,"Subclass and override this method if you want to inject some custom behavior."),eS.forEach(o),pd.forEach(o),tw=d(w),Se=s(w,"DIV",{class:!0});var Mr=i(Se);u(Oa.$$.fragment,Mr),ow=d(Mr),Ia=s(Mr,"P",{});var z1=i(Ia);rw=a(z1,"Returns the training "),np=s(z1,"CODE",{});var tS=i(np);aw=a(tS,"DataLoader"),tS.forEach(o),nw=a(z1,"."),z1.forEach(o),sw=d(Mr),eo=s(Mr,"P",{});var md=i(eo);iw=a(md,"Will use no sampler if "),sp=s(md,"CODE",{});var oS=i(sp);lw=a(oS,"self.train_dataset"),oS.forEach(o),dw=a(md," does not implement "),ip=s(md,"CODE",{});var rS=i(ip);cw=a(rS,"__len__"),rS.forEach(o),pw=a(md,`, a random sampler (adapted to
distributed training if necessary) otherwise.`),md.forEach(o),mw=d(Mr),lp=s(Mr,"P",{});var aS=i(lp);hw=a(aS,"Subclass and override this method if you want to inject some custom behavior."),aS.forEach(o),Mr.forEach(o),uw=d(w),ut=s(w,"DIV",{class:!0});var hd=i(ut);u(Ua.$$.fragment,hd),fw=d(hd),Ee=s(hd,"P",{});var Gt=i(Ee);gw=a(Gt,"Launch an hyperparameter search using "),dp=s(Gt,"CODE",{});var nS=i(dp);_w=a(nS,"optuna"),nS.forEach(o),vw=a(Gt," or "),cp=s(Gt,"CODE",{});var sS=i(cp);bw=a(sS,"Ray Tune"),sS.forEach(o),yw=a(Gt," or "),pp=s(Gt,"CODE",{});var iS=i(pp);ww=a(iS,"SigOpt"),iS.forEach(o),Ew=a(Gt,`. The optimized quantity is determined
by `),mp=s(Gt,"CODE",{});var lS=i(mp);Tw=a(lS,"compute_objective"),lS.forEach(o),$w=a(Gt,`, which defaults to a function returning the evaluation loss when no metric is provided,
the sum of all metrics otherwise.`),Gt.forEach(o),kw=d(hd),u(Zo.$$.fragment,hd),hd.forEach(o),xw=d(w),Jo=s(w,"DIV",{class:!0});var N1=i(Jo);u(za.$$.fragment,N1),Aw=d(N1),Na=s(N1,"P",{});var L1=i(Na);Dw=a(L1,"Initializes a git repo in "),hp=s(L1,"CODE",{});var dS=i(hp);qw=a(dS,"self.args.hub_model_id"),dS.forEach(o),Pw=a(L1,"."),L1.forEach(o),N1.forEach(o),Sw=d(w),Xo=s(w,"DIV",{class:!0});var F1=i(Xo);u(La.$$.fragment,F1),Cw=d(F1),up=s(F1,"P",{});var cS=i(up);Ow=a(cS,`Whether or not this process is the local (e.g., on one machine if training in a distributed fashion on several
machines) main process.`),cS.forEach(o),F1.forEach(o),Iw=d(w),Ko=s(w,"DIV",{class:!0});var R1=i(Ko);u(Fa.$$.fragment,R1),Uw=d(R1),Ra=s(R1,"P",{});var W1=i(Ra);zw=a(W1,`Whether or not this process is the global main process (when training in a distributed fashion on several
machines, this is only going to be `),fp=s(W1,"CODE",{});var pS=i(fp);Nw=a(pS,"True"),pS.forEach(o),Lw=a(W1," for one process)."),W1.forEach(o),R1.forEach(o),Fw=d(w),ft=s(w,"DIV",{class:!0});var ud=i(ft);u(Wa.$$.fragment,ud),Rw=d(ud),Ga=s(ud,"P",{});var G1=i(Ga);Ww=a(G1,"Log "),gp=s(G1,"CODE",{});var mS=i(gp);Gw=a(mS,"logs"),mS.forEach(o),jw=a(G1," on the various objects watching training."),G1.forEach(o),Mw=d(ud),_p=s(ud,"P",{});var hS=i(_p);Vw=a(hS,"Subclass and override this method to inject custom behavior."),hS.forEach(o),ud.forEach(o),Hw=d(w),k=s(w,"DIV",{class:!0});var A=i(k);u(ja.$$.fragment,A),Bw=d(A),vp=s(A,"P",{});var uS=i(vp);Yw=a(uS,"Log metrics in a specially formatted way"),uS.forEach(o),Zw=d(A),bp=s(A,"P",{});var fS=i(bp);Jw=a(fS,"Under distributed environment this is done only for a process with rank 0."),fS.forEach(o),Xw=d(A),yp=s(A,"P",{});var gS=i(yp);Kw=a(gS,"Notes on memory reports:"),gS.forEach(o),Qw=d(A),to=s(A,"P",{});var fd=i(to);eE=a(fd,"In order to get memory usage report you need to install "),wp=s(fd,"CODE",{});var _S=i(wp);tE=a(_S,"psutil"),_S.forEach(o),oE=a(fd,". You can do that with "),Ep=s(fd,"CODE",{});var vS=i(Ep);rE=a(vS,"pip install psutil"),vS.forEach(o),aE=a(fd,"."),fd.forEach(o),nE=d(A),Tp=s(A,"P",{});var bS=i(Tp);sE=a(bS,"Now when this method is run, you will see a report that will include: :"),bS.forEach(o),iE=d(A),u(Ma.$$.fragment,A),lE=d(A),$p=s(A,"P",{});var yS=i($p);kp=s(yS,"STRONG",{});var wS=i(kp);dE=a(wS,"Understanding the reports:"),wS.forEach(o),yS.forEach(o),cE=d(A),Ke=s(A,"UL",{});var Vr=i(Ke);Te=s(Vr,"LI",{});var jt=i(Te);pE=a(jt,"the first segment, e.g., "),xp=s(jt,"CODE",{});var ES=i(xp);mE=a(ES,"train__"),ES.forEach(o),hE=a(jt,", tells you which stage the metrics are for. Reports starting with "),Ap=s(jt,"CODE",{});var TS=i(Ap);uE=a(TS,"init_"),TS.forEach(o),fE=a(jt,`
will be added to the first stage that gets run. So that if only evaluation is run, the memory usage for the
`),Dp=s(jt,"CODE",{});var $S=i(Dp);gE=a($S,"__init__"),$S.forEach(o),_E=a(jt," will be reported along with the "),qp=s(jt,"CODE",{});var kS=i(qp);vE=a(kS,"eval_"),kS.forEach(o),bE=a(jt," metrics."),jt.forEach(o),yE=d(Vr),oo=s(Vr,"LI",{});var gd=i(oo);wE=a(gd,"the third segment, is either "),Pp=s(gd,"CODE",{});var xS=i(Pp);EE=a(xS,"cpu"),xS.forEach(o),TE=a(gd," or "),Sp=s(gd,"CODE",{});var AS=i(Sp);$E=a(AS,"gpu"),AS.forEach(o),kE=a(gd,`, tells you whether it\u2019s the general RAM or the gpu0 memory
metric.`),gd.forEach(o),xE=d(Vr),bi=s(Vr,"LI",{});var Pq=i(bi);Cp=s(Pq,"CODE",{});var DS=i(Cp);AE=a(DS,"*_alloc_delta"),DS.forEach(o),DE=a(Pq,` - is the difference in the used/allocated memory counter between the end and the start of the
stage - it can be negative if a function released more memory than it allocated.`),Pq.forEach(o),qE=d(Vr),gt=s(Vr,"LI",{});var Js=i(gt);Op=s(Js,"CODE",{});var qS=i(Op);PE=a(qS,"*_peaked_delta"),qS.forEach(o),SE=a(Js,` - is any extra memory that was consumed and then freed - relative to the current allocated
memory counter - it is never negative. When you look at the metrics of any stage you add up `),Ip=s(Js,"CODE",{});var PS=i(Ip);CE=a(PS,"alloc_delta"),PS.forEach(o),OE=a(Js,` +
`),Up=s(Js,"CODE",{});var SS=i(Up);IE=a(SS,"peaked_delta"),SS.forEach(o),UE=a(Js," and you know how much memory was needed to complete that stage."),Js.forEach(o),Vr.forEach(o),zE=d(A),zp=s(A,"P",{});var CS=i(zp);NE=a(CS,`The reporting happens only for process of rank 0 and gpu 0 (if there is a gpu). Typically this is enough since the
main process does the bulk of work, but it could be not quite so if model parallel is used and then other GPUs may
use a different amount of gpu memory. This is also not the same under DataParallel where gpu0 may require much more
memory than the rest since it stores the gradient and optimizer states for all participating GPUS. Perhaps in the
future these reports will evolve to measure those too.`),CS.forEach(o),LE=d(A),Np=s(A,"P",{});var OS=i(Np);FE=a(OS,`The CPU RAM metric measures RSS (Resident Set Size) includes both the memory which is unique to the process and the
memory shared with other processes. It is important to note that it does not include swapped out memory, so the
reports could be imprecise.`),OS.forEach(o),RE=d(A),Va=s(A,"P",{});var j1=i(Va);WE=a(j1,`The CPU peak memory is measured using a sampling thread. Due to python\u2019s GIL it may miss some of the peak memory if
that thread didn\u2019t get a chance to run when the highest memory was used. Therefore this report can be less than
reality. Using `),Lp=s(j1,"CODE",{});var IS=i(Lp);GE=a(IS,"tracemalloc"),IS.forEach(o),jE=a(j1,` would have reported the exact peak memory, but it doesn\u2019t report memory allocations
outside of python. So if some C++ CUDA extension allocated its own memory it won\u2019t be reported. And therefore it
was dropped in favor of the memory sampling approach, which reads the current process memory usage.`),j1.forEach(o),ME=d(A),Qe=s(A,"P",{});var Hr=i(Qe);VE=a(Hr,"The GPU allocated and peak memory reporting is done with "),Fp=s(Hr,"CODE",{});var US=i(Fp);HE=a(US,"torch.cuda.memory_allocated()"),US.forEach(o),BE=a(Hr,` and
`),Rp=s(Hr,"CODE",{});var zS=i(Rp);YE=a(zS,"torch.cuda.max_memory_allocated()"),zS.forEach(o),ZE=a(Hr,`. This metric reports only \u201Cdeltas\u201D for pytorch-specific allocations, as
`),Wp=s(Hr,"CODE",{});var NS=i(Wp);JE=a(NS,"torch.cuda"),NS.forEach(o),XE=a(Hr,` memory management system doesn\u2019t track any memory allocated outside of pytorch. For example, the very
first cuda call typically loads CUDA kernels, which may take from 0.5 to 2GB of GPU memory.`),Hr.forEach(o),KE=d(A),re=s(A,"P",{});var je=i(re);QE=a(je,"Note that this tracker doesn\u2019t account for memory allocations outside of "),yi=s(je,"A",{href:!0});var LS=i(yi);eT=a(LS,"Trainer"),LS.forEach(o),tT=a(je,"\u2019s "),Gp=s(je,"CODE",{});var FS=i(Gp);oT=a(FS,"__init__"),FS.forEach(o),rT=a(je,", "),jp=s(je,"CODE",{});var RS=i(jp);aT=a(RS,"train"),RS.forEach(o),nT=a(je,`,
`),Mp=s(je,"CODE",{});var WS=i(Mp);sT=a(WS,"evaluate"),WS.forEach(o),iT=a(je," and "),Vp=s(je,"CODE",{});var GS=i(Vp);lT=a(GS,"predict"),GS.forEach(o),dT=a(je," calls."),je.forEach(o),cT=d(A),I=s(A,"P",{});var F=i(I);pT=a(F,"Because "),Hp=s(F,"CODE",{});var jS=i(Hp);mT=a(jS,"evaluation"),jS.forEach(o),hT=a(F," calls may happen during "),Bp=s(F,"CODE",{});var MS=i(Bp);uT=a(MS,"train"),MS.forEach(o),fT=a(F,`, we can\u2019t handle nested invocations because
`),Yp=s(F,"CODE",{});var VS=i(Yp);gT=a(VS,"torch.cuda.max_memory_allocated"),VS.forEach(o),_T=a(F," is a single counter, so if it gets reset by a nested eval call, "),Zp=s(F,"CODE",{});var HS=i(Zp);vT=a(HS,"train"),HS.forEach(o),bT=a(F,`\u2019s tracker
will report incorrect info. If this `),Ha=s(F,"A",{href:!0,rel:!0});var BS=i(Ha);yT=a(BS,"pytorch issue"),BS.forEach(o),wT=a(F,` gets resolved
it will be possible to change this class to be re-entrant. Until then we will only track the outer level of
`),Jp=s(F,"CODE",{});var YS=i(Jp);ET=a(YS,"train"),YS.forEach(o),TT=a(F,", "),Xp=s(F,"CODE",{});var ZS=i(Xp);$T=a(ZS,"evaluate"),ZS.forEach(o),kT=a(F," and "),Kp=s(F,"CODE",{});var JS=i(Kp);xT=a(JS,"predict"),JS.forEach(o),AT=a(F," methods. Which means that if "),Qp=s(F,"CODE",{});var XS=i(Qp);DT=a(XS,"eval"),XS.forEach(o),qT=a(F," is called during "),em=s(F,"CODE",{});var KS=i(em);PT=a(KS,"train"),KS.forEach(o),ST=a(F,`, it\u2019s the latter
that will account for its memory usage and that of the former.`),F.forEach(o),CT=d(A),$e=s(A,"P",{});var Mt=i($e);OT=a(Mt,"This also means that if any other tool that is used along the "),wi=s(Mt,"A",{href:!0});var QS=i(wi);IT=a(QS,"Trainer"),QS.forEach(o),UT=a(Mt,` calls
`),tm=s(Mt,"CODE",{});var eC=i(tm);zT=a(eC,"torch.cuda.reset_peak_memory_stats"),eC.forEach(o),NT=a(Mt,", the gpu peak memory stats could be invalid. And the "),Ei=s(Mt,"A",{href:!0});var tC=i(Ei);LT=a(tC,"Trainer"),tC.forEach(o),FT=a(Mt,` will disrupt
the normal behavior of any such tools that rely on calling `),om=s(Mt,"CODE",{});var oC=i(om);RT=a(oC,"torch.cuda.reset_peak_memory_stats"),oC.forEach(o),WT=a(Mt," themselves."),Mt.forEach(o),GT=d(A),rm=s(A,"P",{});var rC=i(rm);jT=a(rC,"For best performance you may want to consider turning the memory profiling off for production runs."),rC.forEach(o),A.forEach(o),MT=d(w),Qo=s(w,"DIV",{class:!0});var M1=i(Qo);u(Ba.$$.fragment,M1),VT=d(M1),am=s(M1,"P",{});var aC=i(am);HT=a(aC,"Reformat Trainer metrics values to a human-readable format"),aC.forEach(o),M1.forEach(o),BT=d(w),_t=s(w,"DIV",{class:!0});var _d=i(_t);u(Ya.$$.fragment,_d),YT=d(_d),Za=s(_d,"P",{});var V1=i(Za);ZT=a(V1,"Helper to get number of samples in a "),nm=s(V1,"CODE",{});var nC=i(nm);JT=a(nC,"DataLoader"),nC.forEach(o),XT=a(V1," by accessing its dataset."),V1.forEach(o),KT=d(_d),Ti=s(_d,"P",{});var Sq=i(Ti);QT=a(Sq,"Will raise an exception if the underlying dataset does not implement method "),sm=s(Sq,"CODE",{});var sC=i(sm);e5=a(sC,"__len__"),sC.forEach(o),Sq.forEach(o),_d.forEach(o),t5=d(w),vt=s(w,"DIV",{class:!0});var vd=i(vt);u(Ja.$$.fragment,vd),o5=d(vd),Xa=s(vd,"P",{});var H1=i(Xa);r5=a(H1,"Remove a callback from the current list of "),im=s(H1,"CODE",{});var iC=i(im);a5=a(iC,"TrainerCallback"),iC.forEach(o),n5=a(H1," and returns it."),H1.forEach(o),s5=d(vd),Ka=s(vd,"P",{});var B1=i(Ka);i5=a(B1,"If the callback is not found, returns "),lm=s(B1,"CODE",{});var lC=i(lm);l5=a(lC,"None"),lC.forEach(o),d5=a(B1," (and no error is raised)."),B1.forEach(o),vd.forEach(o),c5=d(w),X=s(w,"DIV",{class:!0});var Me=i(X);u(Qa.$$.fragment,Me),p5=d(Me),dm=s(Me,"P",{});var dC=i(dm);m5=a(dC,"Run prediction and returns predictions and potential metrics."),dC.forEach(o),h5=d(Me),en=s(Me,"P",{});var Y1=i(en);u5=a(Y1,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),cm=s(Y1,"CODE",{});var cC=i(cm);f5=a(cC,"evaluate()"),cC.forEach(o),g5=a(Y1,"."),Y1.forEach(o),_5=d(Me),u(er.$$.fragment,Me),v5=d(Me),tn=s(Me,"P",{});var Z1=i(tn);b5=a(Z1,"Returns: "),pm=s(Z1,"EM",{});var pC=i(pm);y5=a(pC,"NamedTuple"),pC.forEach(o),w5=a(Z1," A namedtuple with the following keys:"),Z1.forEach(o),E5=d(Me),ro=s(Me,"UL",{});var bd=i(ro);ao=s(bd,"LI",{});var yd=i(ao);T5=a(yd,"predictions ("),mm=s(yd,"CODE",{});var mC=i(mm);$5=a(mC,"np.ndarray"),mC.forEach(o),k5=a(yd,"): The predictions on "),hm=s(yd,"CODE",{});var hC=i(hm);x5=a(hC,"test_dataset"),hC.forEach(o),A5=a(yd,"."),yd.forEach(o),D5=d(bd),no=s(bd,"LI",{});var wd=i(no);q5=a(wd,"label_ids ("),um=s(wd,"CODE",{});var uC=i(um);P5=a(uC,"np.ndarray"),uC.forEach(o),S5=a(wd,", "),fm=s(wd,"EM",{});var fC=i(fm);C5=a(fC,"optional"),fC.forEach(o),O5=a(wd,"): The labels (if the dataset contained some)."),wd.forEach(o),I5=d(bd),so=s(bd,"LI",{});var Ed=i(so);U5=a(Ed,"metrics ("),gm=s(Ed,"CODE",{});var gC=i(gm);z5=a(gC,"Dict[str, float]"),gC.forEach(o),N5=a(Ed,", "),_m=s(Ed,"EM",{});var _C=i(_m);L5=a(_C,"optional"),_C.forEach(o),F5=a(Ed,`): The potential dictionary of metrics (if the dataset contained
labels).`),Ed.forEach(o),bd.forEach(o),Me.forEach(o),R5=d(w),bt=s(w,"DIV",{class:!0});var Td=i(bt);u(on.$$.fragment,Td),W5=d(Td),io=s(Td,"P",{});var $d=i(io);G5=a($d,"Prediction/evaluation loop, shared by "),vm=s($d,"CODE",{});var vC=i(vm);j5=a(vC,"Trainer.evaluate()"),vC.forEach(o),M5=a($d," and "),bm=s($d,"CODE",{});var bC=i(bm);V5=a(bC,"Trainer.predict()"),bC.forEach(o),H5=a($d,"."),$d.forEach(o),B5=d(Td),ym=s(Td,"P",{});var yC=i(ym);Y5=a(yC,"Works both with or without labels."),yC.forEach(o),Td.forEach(o),Z5=d(w),yt=s(w,"DIV",{class:!0});var kd=i(yt);u(rn.$$.fragment,kd),J5=d(kd),lo=s(kd,"P",{});var xd=i(lo);X5=a(xd,"Perform an evaluation step on "),wm=s(xd,"CODE",{});var wC=i(wm);K5=a(wC,"model"),wC.forEach(o),Q5=a(xd," using "),Em=s(xd,"CODE",{});var EC=i(Em);e4=a(EC,"inputs"),EC.forEach(o),t4=a(xd,"."),xd.forEach(o),o4=d(kd),Tm=s(kd,"P",{});var TC=i(Tm);r4=a(TC,"Subclass and override to inject custom behavior."),TC.forEach(o),kd.forEach(o),a4=d(w),tr=s(w,"DIV",{class:!0});var J1=i(tr);u(an.$$.fragment,J1),n4=d(J1),et=s(J1,"P",{});var Br=i(et);s4=a(Br,"Upload "),$m=s(Br,"EM",{});var $C=i($m);i4=a($C,"self.model"),$C.forEach(o),l4=a(Br," and "),km=s(Br,"EM",{});var kC=i(km);d4=a(kC,"self.tokenizer"),kC.forEach(o),c4=a(Br," to the \u{1F917} model hub on the repo "),xm=s(Br,"EM",{});var xC=i(xm);p4=a(xC,"self.args.hub_model_id"),xC.forEach(o),m4=a(Br,"."),Br.forEach(o),J1.forEach(o),h4=d(w),or=s(w,"DIV",{class:!0});var X1=i(or);u(nn.$$.fragment,X1),u4=d(X1),sn=s(X1,"P",{});var K1=i(sn);f4=a(K1,"Remove a callback from the current list of "),Am=s(K1,"CODE",{});var AC=i(Am);g4=a(AC,"TrainerCallback"),AC.forEach(o),_4=a(K1,"."),K1.forEach(o),X1.forEach(o),v4=d(w),Ce=s(w,"DIV",{class:!0});var Yr=i(Ce);u(ln.$$.fragment,Yr),b4=d(Yr),dn=s(Yr,"P",{});var Q1=i(dn);y4=a(Q1,"Save metrics into a json file for that split, e.g. "),Dm=s(Q1,"CODE",{});var DC=i(Dm);w4=a(DC,"train_results.json"),DC.forEach(o),E4=a(Q1,"."),Q1.forEach(o),T4=d(Yr),qm=s(Yr,"P",{});var qC=i(qm);$4=a(qC,"Under distributed environment this is done only for a process with rank 0."),qC.forEach(o),k4=d(Yr),cn=s(Yr,"P",{});var eb=i(cn);x4=a(eb,"To understand the metrics please read the docstring of "),Pm=s(eb,"CODE",{});var PC=i(Pm);A4=a(PC,"log_metrics()"),PC.forEach(o),D4=a(eb,` The only difference is that raw
unformatted numbers are saved in the current method.`),eb.forEach(o),Yr.forEach(o),q4=d(w),wt=s(w,"DIV",{class:!0});var Ad=i(wt);u(pn.$$.fragment,Ad),P4=d(Ad),mn=s(Ad,"P",{});var tb=i(mn);S4=a(tb,"Will save the model, so you can reload it using "),Sm=s(tb,"CODE",{});var SC=i(Sm);C4=a(SC,"from_pretrained()"),SC.forEach(o),O4=a(tb,"."),tb.forEach(o),I4=d(Ad),Cm=s(Ad,"P",{});var CC=i(Cm);U4=a(CC,"Will only save from the main process."),CC.forEach(o),Ad.forEach(o),z4=d(w),Et=s(w,"DIV",{class:!0});var Dd=i(Et);u(hn.$$.fragment,Dd),N4=d(Dd),Om=s(Dd,"P",{});var OC=i(Om);L4=a(OC,"Saves the Trainer state, since Trainer.save_model saves only the tokenizer with the model"),OC.forEach(o),F4=d(Dd),Im=s(Dd,"P",{});var IC=i(Im);R4=a(IC,"Under distributed environment this is done only for a process with rank 0."),IC.forEach(o),Dd.forEach(o),W4=d(w),rr=s(w,"DIV",{class:!0});var ob=i(rr);u(un.$$.fragment,ob),G4=d(ob),Um=s(ob,"P",{});var UC=i(Um);j4=a(UC,"Main training entry point."),UC.forEach(o),ob.forEach(o),M4=d(w),Tt=s(w,"DIV",{class:!0});var qd=i(Tt);u(fn.$$.fragment,qd),V4=d(qd),zm=s(qd,"P",{});var zC=i(zm);H4=a(zC,"Perform a training step on a batch of inputs."),zC.forEach(o),B4=d(qd),Nm=s(qd,"P",{});var NC=i(Nm);Y4=a(NC,"Subclass and override to inject custom behavior."),NC.forEach(o),qd.forEach(o),w.forEach(o),zg=d(t),co=s(t,"H2",{class:!0});var rb=i(co);ar=s(rb,"A",{id:!0,class:!0,href:!0});var LC=i(ar);Lm=s(LC,"SPAN",{});var FC=i(Lm);u(gn.$$.fragment,FC),FC.forEach(o),LC.forEach(o),Z4=d(rb),Fm=s(rb,"SPAN",{});var RC=i(Fm);J4=a(RC,"Seq2SeqTrainer"),RC.forEach(o),rb.forEach(o),Ng=d(t),po=s(t,"DIV",{class:!0});var ab=i(po);Oe=s(ab,"DIV",{class:!0});var Zr=i(Oe);u(_n.$$.fragment,Zr),X4=d(Zr),Rm=s(Zr,"P",{});var WC=i(Rm);K4=a(WC,"Run evaluation and returns metrics."),WC.forEach(o),Q4=d(Zr),vn=s(Zr,"P",{});var nb=i(vn);e$=a(nb,`The calling script will be responsible for providing a method to compute metrics, as they are task-dependent
(pass it to the init `),Wm=s(nb,"CODE",{});var GC=i(Wm);t$=a(GC,"compute_metrics"),GC.forEach(o),o$=a(nb," argument)."),nb.forEach(o),r$=d(Zr),Gm=s(Zr,"P",{});var jC=i(Gm);a$=a(jC,"You can also subclass and override this method to inject custom behavior."),jC.forEach(o),Zr.forEach(o),n$=d(ab),K=s(ab,"DIV",{class:!0});var Ve=i(K);u(bn.$$.fragment,Ve),s$=d(Ve),jm=s(Ve,"P",{});var MC=i(jm);i$=a(MC,"Run prediction and returns predictions and potential metrics."),MC.forEach(o),l$=d(Ve),yn=s(Ve,"P",{});var sb=i(yn);d$=a(sb,`Depending on the dataset and your use case, your test dataset may contain labels. In that case, this method
will also return metrics, like in `),Mm=s(sb,"CODE",{});var VC=i(Mm);c$=a(VC,"evaluate()"),VC.forEach(o),p$=a(sb,"."),sb.forEach(o),m$=d(Ve),u(nr.$$.fragment,Ve),h$=d(Ve),wn=s(Ve,"P",{});var ib=i(wn);u$=a(ib,"Returns: "),Vm=s(ib,"EM",{});var HC=i(Vm);f$=a(HC,"NamedTuple"),HC.forEach(o),g$=a(ib," A namedtuple with the following keys:"),ib.forEach(o),_$=d(Ve),mo=s(Ve,"UL",{});var Pd=i(mo);ho=s(Pd,"LI",{});var Sd=i(ho);v$=a(Sd,"predictions ("),Hm=s(Sd,"CODE",{});var BC=i(Hm);b$=a(BC,"np.ndarray"),BC.forEach(o),y$=a(Sd,"): The predictions on "),Bm=s(Sd,"CODE",{});var YC=i(Bm);w$=a(YC,"test_dataset"),YC.forEach(o),E$=a(Sd,"."),Sd.forEach(o),T$=d(Pd),uo=s(Pd,"LI",{});var Cd=i(uo);$$=a(Cd,"label_ids ("),Ym=s(Cd,"CODE",{});var ZC=i(Ym);k$=a(ZC,"np.ndarray"),ZC.forEach(o),x$=a(Cd,", "),Zm=s(Cd,"EM",{});var JC=i(Zm);A$=a(JC,"optional"),JC.forEach(o),D$=a(Cd,"): The labels (if the dataset contained some)."),Cd.forEach(o),q$=d(Pd),fo=s(Pd,"LI",{});var Od=i(fo);P$=a(Od,"metrics ("),Jm=s(Od,"CODE",{});var XC=i(Jm);S$=a(XC,"Dict[str, float]"),XC.forEach(o),C$=a(Od,", "),Xm=s(Od,"EM",{});var KC=i(Xm);O$=a(KC,"optional"),KC.forEach(o),I$=a(Od,`): The potential dictionary of metrics (if the dataset contained
labels).`),Od.forEach(o),Pd.forEach(o),Ve.forEach(o),ab.forEach(o),Lg=d(t),go=s(t,"H2",{class:!0});var lb=i(go);sr=s(lb,"A",{id:!0,class:!0,href:!0});var QC=i(sr);Km=s(QC,"SPAN",{});var eO=i(Km);u(En.$$.fragment,eO),eO.forEach(o),QC.forEach(o),U$=d(lb),Qm=s(lb,"SPAN",{});var tO=i(Qm);z$=a(tO,"TrainingArguments"),tO.forEach(o),lb.forEach(o),Fg=d(t),N=s(t,"DIV",{class:!0});var M=i(N);u(Tn.$$.fragment,M),N$=d(M),$n=s(M,"P",{});var db=i($n);L$=a(db,"TrainingArguments is the subset of the arguments we use in our example scripts "),eh=s(db,"STRONG",{});var oO=i(eh);F$=a(oO,`which relate to the training loop
itself`),oO.forEach(o),R$=a(db,"."),db.forEach(o),W$=d(M),_o=s(M,"P",{});var Id=i(_o);G$=a(Id,"Using "),$i=s(Id,"A",{href:!0});var rO=i($i);j$=a(rO,"HfArgumentParser"),rO.forEach(o),M$=a(Id,` we can turn this class into
`),kn=s(Id,"A",{href:!0,rel:!0});var aO=i(kn);V$=a(aO,"argparse"),aO.forEach(o),H$=a(Id,` arguments that can be specified on the
command line.`),Id.forEach(o),B$=d(M),ce=s(M,"DIV",{class:!0});var Vt=i(ce);u(xn.$$.fragment,Vt),Y$=d(Vt),th=s(Vt,"P",{});var nO=i(th);Z$=a(nO,`Returns the log level to be used depending on whether this process is the main process of node 0, main process
of node non-0, or a non-main process.`),nO.forEach(o),J$=d(Vt),vo=s(Vt,"P",{});var Ud=i(vo);X$=a(Ud,"For the main process the log level defaults to "),oh=s(Ud,"CODE",{});var sO=i(oh);K$=a(sO,"logging.INFO"),sO.forEach(o),Q$=a(Ud," unless overridden by "),rh=s(Ud,"CODE",{});var iO=i(rh);e3=a(iO,"log_level"),iO.forEach(o),t3=a(Ud," argument."),Ud.forEach(o),o3=d(Vt),bo=s(Vt,"P",{});var zd=i(bo);r3=a(zd,"For the replica processes the log level defaults to "),ah=s(zd,"CODE",{});var lO=i(ah);a3=a(lO,"logging.WARNING"),lO.forEach(o),n3=a(zd," unless overridden by "),nh=s(zd,"CODE",{});var dO=i(nh);s3=a(dO,"log_level_replica"),dO.forEach(o),i3=a(zd,`
argument.`),zd.forEach(o),l3=d(Vt),An=s(Vt,"P",{});var cb=i(An);d3=a(cb,"The choice between the main and replica process settings is made according to the return value of "),sh=s(cb,"CODE",{});var cO=i(sh);c3=a(cO,"should_log"),cO.forEach(o),p3=a(cb,"."),cb.forEach(o),Vt.forEach(o),m3=d(M),ir=s(M,"DIV",{class:!0});var pb=i(ir);u(Dn.$$.fragment,pb),h3=d(pb),ih=s(pb,"P",{});var pO=i(ih);u3=a(pO,"Get number of steps used for a linear warmup."),pO.forEach(o),pb.forEach(o),f3=d(M),$t=s(M,"DIV",{class:!0});var Nd=i($t);u(qn.$$.fragment,Nd),g3=d(Nd),lh=s(Nd,"P",{});var mO=i(lh);_3=a(mO,`A context manager for torch distributed environment where on needs to do something on the main process, while
blocking replicas, and when it\u2019s finished releasing the replicas.`),mO.forEach(o),v3=d(Nd),yo=s(Nd,"P",{});var Ld=i(yo);b3=a(Ld,"One such use is for "),dh=s(Ld,"CODE",{});var hO=i(dh);y3=a(hO,"datasets"),hO.forEach(o),w3=a(Ld,"\u2019s "),ch=s(Ld,"CODE",{});var uO=i(ch);E3=a(uO,"map"),uO.forEach(o),T3=a(Ld,` feature which to be efficient should be run once on the main process,
which upon completion saves a cached version of results and which then automatically gets loaded by the
replicas.`),Ld.forEach(o),Nd.forEach(o),$3=d(M),lr=s(M,"DIV",{class:!0});var mb=i(lr);u(Pn.$$.fragment,mb),k3=d(mb),Sn=s(mb,"P",{});var hb=i(Sn);x3=a(hb,"Serializes this instance while replace "),ph=s(hb,"CODE",{});var fO=i(ph);A3=a(fO,"Enum"),fO.forEach(o),D3=a(hb,` by their values (for JSON serialization support). It obfuscates
the token values by removing their value.`),hb.forEach(o),mb.forEach(o),q3=d(M),dr=s(M,"DIV",{class:!0});var ub=i(dr);u(Cn.$$.fragment,ub),P3=d(ub),mh=s(ub,"P",{});var gO=i(mh);S3=a(gO,"Serializes this instance to a JSON string."),gO.forEach(o),ub.forEach(o),C3=d(M),cr=s(M,"DIV",{class:!0});var fb=i(cr);u(On.$$.fragment,fb),O3=d(fb),hh=s(fb,"P",{});var _O=i(hh);I3=a(_O,"Sanitized serialization to use with TensorBoard\u2019s hparams"),_O.forEach(o),fb.forEach(o),M.forEach(o),Rg=d(t),wo=s(t,"H2",{class:!0});var gb=i(wo);pr=s(gb,"A",{id:!0,class:!0,href:!0});var vO=i(pr);uh=s(vO,"SPAN",{});var bO=i(uh);u(In.$$.fragment,bO),bO.forEach(o),vO.forEach(o),U3=d(gb),fh=s(gb,"SPAN",{});var yO=i(fh);z3=a(yO,"Seq2SeqTrainingArguments"),yO.forEach(o),gb.forEach(o),Wg=d(t),ae=s(t,"DIV",{class:!0});var Ht=i(ae);u(Un.$$.fragment,Ht),N3=d(Ht),zn=s(Ht,"P",{});var _b=i(zn);L3=a(_b,"TrainingArguments is the subset of the arguments we use in our example scripts "),gh=s(_b,"STRONG",{});var wO=i(gh);F3=a(wO,`which relate to the training loop
itself`),wO.forEach(o),R3=a(_b,"."),_b.forEach(o),W3=d(Ht),Eo=s(Ht,"P",{});var Fd=i(Eo);G3=a(Fd,"Using "),ki=s(Fd,"A",{href:!0});var EO=i(ki);j3=a(EO,"HfArgumentParser"),EO.forEach(o),M3=a(Fd,` we can turn this class into
`),Nn=s(Fd,"A",{href:!0,rel:!0});var TO=i(Nn);V3=a(TO,"argparse"),TO.forEach(o),H3=a(Fd,` arguments that can be specified on the
command line.`),Fd.forEach(o),B3=d(Ht),ne=s(Ht,"P",{});var He=i(ne);Y3=a(He,"sortish_sampler ("),_h=s(He,"CODE",{});var $O=i(_h);Z3=a($O,"bool"),$O.forEach(o),J3=a(He,", "),vh=s(He,"EM",{});var kO=i(vh);X3=a(kO,"optional"),kO.forEach(o),K3=a(He,", defaults to "),bh=s(He,"CODE",{});var xO=i(bh);Q3=a(xO,"False"),xO.forEach(o),ek=a(He,`):
Whether to use a `),yh=s(He,"EM",{});var AO=i(yh);tk=a(AO,"sortish sampler"),AO.forEach(o),ok=a(He," or not. Only possible if the underlying datasets are "),wh=s(He,"EM",{});var DO=i(wh);rk=a(DO,"Seq2SeqDataset"),DO.forEach(o),ak=a(He,` for
now but will become generally available in the near future.`),He.forEach(o),nk=d(Ht),q=s(Ht,"P",{});var C=i(q);sk=a(C,`It sorts the inputs according to lengths in order to minimize the padding size, with a bit of randomness for
the training set.
predict_with_generate (`),Eh=s(C,"CODE",{});var qO=i(Eh);ik=a(qO,"bool"),qO.forEach(o),lk=a(C,", "),Th=s(C,"EM",{});var PO=i(Th);dk=a(PO,"optional"),PO.forEach(o),ck=a(C,", defaults to "),$h=s(C,"CODE",{});var SO=i($h);pk=a(SO,"False"),SO.forEach(o),mk=a(C,`):
Whether to use generate to calculate generative metrics (ROUGE, BLEU).
generation_max_length (`),kh=s(C,"CODE",{});var CO=i(kh);hk=a(CO,"int"),CO.forEach(o),uk=a(C,", "),xh=s(C,"EM",{});var OO=i(xh);fk=a(OO,"optional"),OO.forEach(o),gk=a(C,`):
The `),Ah=s(C,"CODE",{});var IO=i(Ah);_k=a(IO,"max_length"),IO.forEach(o),vk=a(C," to use on each evaluation loop when "),Dh=s(C,"CODE",{});var UO=i(Dh);bk=a(UO,"predict_with_generate=True"),UO.forEach(o),yk=a(C,`. Will default to the
`),qh=s(C,"CODE",{});var zO=i(qh);wk=a(zO,"max_length"),zO.forEach(o),Ek=a(C,` value of the model configuration.
generation_num_beams (`),Ph=s(C,"CODE",{});var NO=i(Ph);Tk=a(NO,"int"),NO.forEach(o),$k=a(C,", "),Sh=s(C,"EM",{});var LO=i(Sh);kk=a(LO,"optional"),LO.forEach(o),xk=a(C,`):
The `),Ch=s(C,"CODE",{});var FO=i(Ch);Ak=a(FO,"num_beams"),FO.forEach(o),Dk=a(C," to use on each evaluation loop when "),Oh=s(C,"CODE",{});var RO=i(Oh);qk=a(RO,"predict_with_generate=True"),RO.forEach(o),Pk=a(C,`. Will default to the
`),Ih=s(C,"CODE",{});var WO=i(Ih);Sk=a(WO,"num_beams"),WO.forEach(o),Ck=a(C," value of the model configuration."),C.forEach(o),Ht.forEach(o),Gg=d(t),To=s(t,"H2",{class:!0});var vb=i(To);mr=s(vb,"A",{id:!0,class:!0,href:!0});var GO=i(mr);Uh=s(GO,"SPAN",{});var jO=i(Uh);u(Ln.$$.fragment,jO),jO.forEach(o),GO.forEach(o),Ok=d(vb),zh=s(vb,"SPAN",{});var MO=i(zh);Ik=a(MO,"Checkpoints"),MO.forEach(o),vb.forEach(o),jg=d(t),pe=s(t,"P",{});var Bt=i(pe);Uk=a(Bt,"By default, "),xi=s(Bt,"A",{href:!0});var VO=i(xi);zk=a(VO,"Trainer"),VO.forEach(o),Nk=a(Bt," will save all checkpoints in the "),Nh=s(Bt,"CODE",{});var HO=i(Nh);Lk=a(HO,"output_dir"),HO.forEach(o),Fk=a(Bt,` you set in the
`),Ai=s(Bt,"A",{href:!0});var BO=i(Ai);Rk=a(BO,"TrainingArguments"),BO.forEach(o),Wk=a(Bt," you are using. Those will go in subfolder named "),Lh=s(Bt,"CODE",{});var YO=i(Lh);Gk=a(YO,"checkpoint-xxx"),YO.forEach(o),jk=a(Bt,` with xxx
being the step at which the training was at.`),Bt.forEach(o),Mg=d(t),hr=s(t,"P",{});var bb=i(hr);Mk=a(bb,"Resuming training from a checkpoint can be done when calling "),Di=s(bb,"A",{href:!0});var ZO=i(Di);Vk=a(ZO,"Trainer.train()"),ZO.forEach(o),Hk=a(bb," with either:"),bb.forEach(o),Vg=d(t),ur=s(t,"UL",{});var yb=i(ur);qi=s(yb,"LI",{});var Cq=i(qi);Fh=s(Cq,"CODE",{});var JO=i(Fh);Bk=a(JO,"resume_from_checkpoint=True"),JO.forEach(o),Yk=a(Cq," which will resume training from the latest checkpoint"),Cq.forEach(o),Zk=d(yb),Pi=s(yb,"LI",{});var Oq=i(Pi);Rh=s(Oq,"CODE",{});var XO=i(Rh);Jk=a(XO,"resume_from_checkpoint=checkpoint_dir"),XO.forEach(o),Xk=a(Oq,` which will resume training from the specific checkpoint in the directory
passed.`),Oq.forEach(o),yb.forEach(o),Hg=d(t),Ie=s(t,"P",{});var Jr=i(Ie);Kk=a(Jr,"In addition, you can easily save your checkpoints on the Model Hub when using "),Wh=s(Jr,"CODE",{});var KO=i(Wh);Qk=a(KO,"push_to_hub=True"),KO.forEach(o),e7=a(Jr,`. By default, all
the models saved in intermediate checkpoints are saved in different commits, but not the optimizer state. You can adapt
the `),Gh=s(Jr,"CODE",{});var QO=i(Gh);t7=a(QO,"hub-strategy"),QO.forEach(o),o7=a(Jr," value of your "),Si=s(Jr,"A",{href:!0});var eI=i(Si);r7=a(eI,"TrainingArguments"),eI.forEach(o),a7=a(Jr," to either:"),Jr.forEach(o),Bg=d(t),fr=s(t,"UL",{});var wb=i(fr);gr=s(wb,"LI",{});var Dg=i(gr);jh=s(Dg,"CODE",{});var tI=i(jh);n7=a(tI,'"checkpoint"'),tI.forEach(o),s7=a(Dg,`: the latest checkpoint is also pushed in a subfolder named last-checkpoint, allowing you to
resume training easily with `),Mh=s(Dg,"CODE",{});var oI=i(Mh);i7=a(oI,'trainer.train(resume_from_checkpoint="output_dir/last-checkpoint")'),oI.forEach(o),l7=a(Dg,"."),Dg.forEach(o),d7=d(wb),Ci=s(wb,"LI",{});var Iq=i(Ci);Vh=s(Iq,"CODE",{});var rI=i(Vh);c7=a(rI,'"all_checkpoints"'),rI.forEach(o),p7=a(Iq,`: all checkpoints are pushed like they appear in the output folder (so you will get one
checkpoint folder per folder in your final repository)`),Iq.forEach(o),wb.forEach(o),Yg=d(t),$o=s(t,"H2",{class:!0});var Eb=i($o);_r=s(Eb,"A",{id:!0,class:!0,href:!0});var aI=i(_r);Hh=s(aI,"SPAN",{});var nI=i(Hh);u(Fn.$$.fragment,nI),nI.forEach(o),aI.forEach(o),m7=d(Eb),Bh=s(Eb,"SPAN",{});var sI=i(Bh);h7=a(sI,"Logging"),sI.forEach(o),Eb.forEach(o),Zg=d(t),Ue=s(t,"P",{});var Xr=i(Ue);u7=a(Xr,"By default "),Oi=s(Xr,"A",{href:!0});var iI=i(Oi);f7=a(iI,"Trainer"),iI.forEach(o),g7=a(Xr," will use "),Yh=s(Xr,"CODE",{});var lI=i(Yh);_7=a(lI,"logging.INFO"),lI.forEach(o),v7=a(Xr," for the main process and "),Zh=s(Xr,"CODE",{});var dI=i(Zh);b7=a(dI,"logging.WARNING"),dI.forEach(o),y7=a(Xr," for the replicas if any."),Xr.forEach(o),Jg=d(t),kt=s(t,"P",{});var Rd=i(kt);w7=a(Rd,"These defaults can be overridden to use any of the 5 "),Jh=s(Rd,"CODE",{});var cI=i(Jh);E7=a(cI,"logging"),cI.forEach(o),T7=a(Rd," levels with "),Ii=s(Rd,"A",{href:!0});var pI=i(Ii);$7=a(pI,"TrainingArguments"),pI.forEach(o),k7=a(Rd,`\u2019s
arguments:`),Rd.forEach(o),Xg=d(t),vr=s(t,"UL",{});var Tb=i(vr);Ui=s(Tb,"LI",{});var Uq=i(Ui);Xh=s(Uq,"CODE",{});var mI=i(Xh);x7=a(mI,"log_level"),mI.forEach(o),A7=a(Uq," - for the main process"),Uq.forEach(o),D7=d(Tb),zi=s(Tb,"LI",{});var zq=i(zi);Kh=s(zq,"CODE",{});var hI=i(Kh);q7=a(hI,"log_level_replica"),hI.forEach(o),P7=a(zq," - for the replicas"),zq.forEach(o),Tb.forEach(o),Kg=d(t),ze=s(t,"P",{});var Kr=i(ze);S7=a(Kr,"Further, if "),Ni=s(Kr,"A",{href:!0});var uI=i(Ni);C7=a(uI,"TrainingArguments"),uI.forEach(o),O7=a(Kr,"\u2019s "),Qh=s(Kr,"CODE",{});var fI=i(Qh);I7=a(fI,"log_on_each_node"),fI.forEach(o),U7=a(Kr," is set to "),eu=s(Kr,"CODE",{});var gI=i(eu);z7=a(gI,"False"),gI.forEach(o),N7=a(Kr,` only the main node will
use the log level settings for its main process, all other nodes will use the log level settings for replicas.`),Kr.forEach(o),Qg=d(t),Q=s(t,"P",{});var Be=i(Q);L7=a(Be,"Note that "),Li=s(Be,"A",{href:!0});var _I=i(Li);F7=a(_I,"Trainer"),_I.forEach(o),R7=a(Be," is going to set "),tu=s(Be,"CODE",{});var vI=i(tu);W7=a(vI,"transformers"),vI.forEach(o),G7=a(Be,`\u2019s log level separately for each node in its
`),ou=s(Be,"CODE",{});var bI=i(ou);j7=a(bI,"Trainer.__init__()"),bI.forEach(o),M7=a(Be,` So you may want to set this sooner (see the next example) if you tap into other
`),ru=s(Be,"CODE",{});var yI=i(ru);V7=a(yI,"transformers"),yI.forEach(o),H7=a(Be," functionality before creating the "),Fi=s(Be,"A",{href:!0});var wI=i(Fi);B7=a(wI,"Trainer"),wI.forEach(o),Y7=a(Be," object."),Be.forEach(o),e_=d(t),Ri=s(t,"P",{});var EI=i(Ri);Z7=a(EI,"Here is an example of how this can be used in an application:"),EI.forEach(o),t_=d(t),u(Rn.$$.fragment,t),o_=d(t),Wi=s(t,"P",{});var TI=i(Wi);J7=a(TI,`And then if you only want to see warnings on the main node and all other nodes to not print any most likely duplicated
warnings you could run it as:`),TI.forEach(o),r_=d(t),u(Wn.$$.fragment,t),a_=d(t),Gi=s(t,"P",{});var $I=i(Gi);X7=a($I,`In the multi-node environment if you also don\u2019t want the logs to repeat for each node\u2019s main process, you will want to
change the above to:`),$I.forEach(o),n_=d(t),u(Gn.$$.fragment,t),s_=d(t),ji=s(t,"P",{});var kI=i(ji);K7=a(kI,`and then only the main process of the first node will log at the \u201Cwarning\u201D level, and all other processes on the main
node and all processes on other nodes will log at the \u201Cerror\u201D level.`),kI.forEach(o),i_=d(t),Mi=s(t,"P",{});var xI=i(Mi);Q7=a(xI,"If you need your application to be as quiet as possible you could do:"),xI.forEach(o),l_=d(t),u(jn.$$.fragment,t),d_=d(t),br=s(t,"P",{});var $b=i(br);ex=a($b,"(add "),au=s($b,"CODE",{});var AI=i(au);tx=a(AI,"--log_on_each_node 0"),AI.forEach(o),ox=a($b," if on multi-node environment)"),$b.forEach(o),c_=d(t),ko=s(t,"H2",{class:!0});var kb=i(ko);yr=s(kb,"A",{id:!0,class:!0,href:!0});var DI=i(yr);nu=s(DI,"SPAN",{});var qI=i(nu);u(Mn.$$.fragment,qI),qI.forEach(o),DI.forEach(o),rx=d(kb),su=s(kb,"SPAN",{});var PI=i(su);ax=a(PI,"Randomness"),PI.forEach(o),kb.forEach(o),p_=d(t),me=s(t,"P",{});var Yt=i(me);nx=a(Yt,"When resuming from a checkpoint generated by "),Vi=s(Yt,"A",{href:!0});var SI=i(Vi);sx=a(SI,"Trainer"),SI.forEach(o),ix=a(Yt,` all efforts are made to restore the
`),iu=s(Yt,"EM",{});var CI=i(iu);lx=a(CI,"python"),CI.forEach(o),dx=a(Yt,", "),lu=s(Yt,"EM",{});var OI=i(lu);cx=a(OI,"numpy"),OI.forEach(o),px=a(Yt," and "),du=s(Yt,"EM",{});var II=i(du);mx=a(II,"pytorch"),II.forEach(o),hx=a(Yt,` RNG states to the same states as they were at the moment of saving that checkpoint,
which should make the \u201Cstop and resume\u201D style of training as close as possible to non-stop training.`),Yt.forEach(o),m_=d(t),xt=s(t,"P",{});var Wd=i(xt);ux=a(Wd,`However, due to various default non-deterministic pytorch settings this might not fully work. If you want full
determinism please refer to `),Vn=s(Wd,"A",{href:!0,rel:!0});var UI=i(Vn);fx=a(UI,"Controlling sources of randomness"),UI.forEach(o),gx=a(Wd,`. As explained in the document, that some of those settings
that make things deterministic (.e.g., `),cu=s(Wd,"CODE",{});var zI=i(cu);_x=a(zI,"torch.backends.cudnn.deterministic"),zI.forEach(o),vx=a(Wd,`) may slow things down, therefore this
can\u2019t be done by default, but you can enable those yourself if needed.`),Wd.forEach(o),h_=d(t),xo=s(t,"H2",{class:!0});var xb=i(xo);wr=s(xb,"A",{id:!0,class:!0,href:!0});var NI=i(wr);pu=s(NI,"SPAN",{});var LI=i(pu);u(Hn.$$.fragment,LI),LI.forEach(o),NI.forEach(o),bx=d(xb),mu=s(xb,"SPAN",{});var FI=i(mu);yx=a(FI,"Specific GPUs Selection"),FI.forEach(o),xb.forEach(o),u_=d(t),Hi=s(t,"P",{});var RI=i(Hi);wx=a(RI,"Let\u2019s discuss how you can tell your program which GPUs are to be used and in what order."),RI.forEach(o),f_=d(t),Er=s(t,"P",{});var Ab=i(Er);Ex=a(Ab,"When using "),Bn=s(Ab,"A",{href:!0,rel:!0});var WI=i(Bn);hu=s(WI,"CODE",{});var GI=i(hu);Tx=a(GI,"DistributedDataParallel"),GI.forEach(o),WI.forEach(o),$x=a(Ab," to use only a subset of your GPUs, you simply specify the number of GPUs to use. For example, if you have 4 GPUs, but you wish to use the first 2 you can do:"),Ab.forEach(o),g_=d(t),u(Yn.$$.fragment,t),__=d(t),At=s(t,"P",{});var Gd=i(At);kx=a(Gd,"if you have either "),Zn=s(Gd,"A",{href:!0,rel:!0});var jI=i(Zn);uu=s(jI,"CODE",{});var MI=i(uu);xx=a(MI,"accelerate"),MI.forEach(o),jI.forEach(o),Ax=a(Gd," or "),Jn=s(Gd,"A",{href:!0,rel:!0});var VI=i(Jn);fu=s(VI,"CODE",{});var HI=i(fu);Dx=a(HI,"deepspeed"),HI.forEach(o),VI.forEach(o),qx=a(Gd," installed you can also accomplish the same by using one of:"),Gd.forEach(o),v_=d(t),u(Xn.$$.fragment,t),b_=d(t),u(Kn.$$.fragment,t),y_=d(t),Tr=s(t,"P",{});var Db=i(Tr);Px=a(Db,"You don\u2019t need to use the Accelerate or "),Bi=s(Db,"A",{href:!0});var BI=i(Bi);Sx=a(BI,"the Deepspeed integration"),BI.forEach(o),Cx=a(Db," features to use these launchers."),Db.forEach(o),w_=d(t),Yi=s(t,"P",{});var YI=i(Yi);Ox=a(YI,"Until now you were able to tell the program how many GPUs to use. Now let\u2019s discuss how to select specific GPUs and control their order."),YI.forEach(o),E_=d(t),Zi=s(t,"P",{});var ZI=i(Zi);Ix=a(ZI,"The following environment variables help you control which GPUs to use and their order."),ZI.forEach(o),T_=d(t),Ji=s(t,"P",{});var JI=i(Ji);gu=s(JI,"STRONG",{});var XI=i(gu);_u=s(XI,"CODE",{});var KI=i(_u);Ux=a(KI,"CUDA_VISIBLE_DEVICES"),KI.forEach(o),XI.forEach(o),JI.forEach(o),$_=d(t),$r=s(t,"P",{});var qb=i($r);zx=a(qb,"If you have multiple GPUs and you\u2019d like to use only 1 or a few of those GPUs, set the environment variable "),vu=s(qb,"CODE",{});var QI=i(vu);Nx=a(QI,"CUDA_VISIBLE_DEVICES"),QI.forEach(o),Lx=a(qb," to a list of the GPUs to be used."),qb.forEach(o),k_=d(t),Xi=s(t,"P",{});var eU=i(Xi);Fx=a(eU,"For example, let\u2019s say you have 4 GPUs: 0, 1, 2 and 3. To run only on the physical GPUs 0 and 2, you can do:"),eU.forEach(o),x_=d(t),u(Qn.$$.fragment,t),A_=d(t),Dt=s(t,"P",{});var jd=i(Dt);Rx=a(jd,"So now pytorch will see only 2 GPUs, where your physical GPUs 0 and 2 are mapped to "),bu=s(jd,"CODE",{});var tU=i(bu);Wx=a(tU,"cuda:0"),tU.forEach(o),Gx=a(jd," and "),yu=s(jd,"CODE",{});var oU=i(yu);jx=a(oU,"cuda:1"),oU.forEach(o),Mx=a(jd," correspondingly."),jd.forEach(o),D_=d(t),Ki=s(t,"P",{});var rU=i(Ki);Vx=a(rU,"You can even change their order:"),rU.forEach(o),q_=d(t),u(es.$$.fragment,t),P_=d(t),qt=s(t,"P",{});var Md=i(qt);Hx=a(Md,"Here your physical GPUs 0 and 2 are mapped to "),wu=s(Md,"CODE",{});var aU=i(wu);Bx=a(aU,"cuda:1"),aU.forEach(o),Yx=a(Md," and "),Eu=s(Md,"CODE",{});var nU=i(Eu);Zx=a(nU,"cuda:0"),nU.forEach(o),Jx=a(Md," correspondingly."),Md.forEach(o),S_=d(t),Pt=s(t,"P",{});var Vd=i(Pt);Xx=a(Vd,"The above examples were all for "),Tu=s(Vd,"CODE",{});var sU=i(Tu);Kx=a(sU,"DistributedDataParallel"),sU.forEach(o),Qx=a(Vd," use pattern, but the same method works for "),ts=s(Vd,"A",{href:!0,rel:!0});var iU=i(ts);$u=s(iU,"CODE",{});var lU=i($u);e6=a(lU,"DataParallel"),lU.forEach(o),iU.forEach(o),t6=a(Vd," as well:"),Vd.forEach(o),C_=d(t),u(os.$$.fragment,t),O_=d(t),Qi=s(t,"P",{});var dU=i(Qi);o6=a(dU,"To emulate an environment without GPUs simply set this environment variable to an empty value like so:"),dU.forEach(o),I_=d(t),u(rs.$$.fragment,t),U_=d(t),el=s(t,"P",{});var cU=i(el);r6=a(cU,"As with any environment variable you can, of course, export those instead of adding these to the command line, as in:"),cU.forEach(o),z_=d(t),u(as.$$.fragment,t),N_=d(t),tl=s(t,"P",{});var pU=i(tl);a6=a(pU,"but this approach can be confusing since you may forget you set up the environment variable earlier and not understand why the wrong GPUs are used. Therefore, it\u2019s a common practice to set the environment variable just for a specific run on the same command line as it\u2019s shown in most examples of this section."),pU.forEach(o),L_=d(t),ol=s(t,"P",{});var mU=i(ol);ku=s(mU,"STRONG",{});var hU=i(ku);xu=s(hU,"CODE",{});var uU=i(xu);n6=a(uU,"CUDA_DEVICE_ORDER"),uU.forEach(o),hU.forEach(o),mU.forEach(o),F_=d(t),kr=s(t,"P",{});var Pb=i(kr);s6=a(Pb,"There is an additional environment variable "),Au=s(Pb,"CODE",{});var fU=i(Au);i6=a(fU,"CUDA_DEVICE_ORDER"),fU.forEach(o),l6=a(Pb," that controls how the physical devices are ordered. The two choices are:"),Pb.forEach(o),R_=d(t),rl=s(t,"OL",{});var gU=i(rl);ns=s(gU,"LI",{});var Sb=i(ns);d6=a(Sb,"ordered by PCIe bus IDs (matches "),Du=s(Sb,"CODE",{});var _U=i(Du);c6=a(_U,"nvidia-smi"),_U.forEach(o),p6=a(Sb,"\u2019s order) - this is the default."),Sb.forEach(o),gU.forEach(o),W_=d(t),u(ss.$$.fragment,t),G_=d(t),is=s(t,"OL",{start:!0});var vU=i(is);qu=s(vU,"LI",{});var bU=i(qu);m6=a(bU,"ordered by GPU compute capabilities"),bU.forEach(o),vU.forEach(o),j_=d(t),u(ls.$$.fragment,t),M_=d(t),St=s(t,"P",{});var Hd=i(St);h6=a(Hd,"Most of the time you don\u2019t need to care about this environment variable, but it\u2019s very helpful if you have a lopsided setup where you have an old and a new GPUs physically inserted in such a way so that the slow older card appears to be first. One way to fix that is to swap the cards. But if you can\u2019t swap the cards (e.g., if the cooling of the devices gets impacted) then setting "),Pu=s(Hd,"CODE",{});var yU=i(Pu);u6=a(yU,"CUDA_DEVICE_ORDER=FASTEST_FIRST"),yU.forEach(o),f6=a(Hd," will always put the newer faster card first. It\u2019ll be somewhat confusing though since "),Su=s(Hd,"CODE",{});var wU=i(Su);g6=a(wU,"nvidia-smi"),wU.forEach(o),_6=a(Hd," will still report them in the PCIe order."),Hd.forEach(o),V_=d(t),al=s(t,"P",{});var EU=i(al);v6=a(EU,"The other solution to swapping the order is to use:"),EU.forEach(o),H_=d(t),u(ds.$$.fragment,t),B_=d(t),nl=s(t,"P",{});var TU=i(nl);b6=a(TU,"In this example we are working with just 2 GPUs, but of course the same would apply to as many GPUs as your computer has."),TU.forEach(o),Y_=d(t),xr=s(t,"P",{});var Cb=i(xr);y6=a(Cb,"Also if you do set this environment variable it\u2019s the best to set it in your "),Cu=s(Cb,"CODE",{});var $U=i(Cu);w6=a($U,"~/.bashrc"),$U.forEach(o),E6=a(Cb," file or some other startup config file and forget about it."),Cb.forEach(o),Z_=d(t),Ao=s(t,"H2",{class:!0});var Ob=i(Ao);Ar=s(Ob,"A",{id:!0,class:!0,href:!0});var kU=i(Ar);Ou=s(kU,"SPAN",{});var xU=i(Ou);u(cs.$$.fragment,xU),xU.forEach(o),kU.forEach(o),T6=d(Ob),Iu=s(Ob,"SPAN",{});var AU=i(Iu);$6=a(AU,"Trainer Integrations"),AU.forEach(o),Ob.forEach(o),J_=d(t),Dr=s(t,"P",{});var Ib=i(Dr);k6=a(Ib,"The "),sl=s(Ib,"A",{href:!0});var DU=i(sl);x6=a(DU,"Trainer"),DU.forEach(o),A6=a(Ib,` has been extended to support libraries that may dramatically improve your training
time and fit much bigger models.`),Ib.forEach(o),X_=d(t),Ne=s(t,"P",{});var Qr=i(Ne);D6=a(Qr,"Currently it supports third party solutions, "),ps=s(Qr,"A",{href:!0,rel:!0});var qU=i(ps);q6=a(qU,"DeepSpeed"),qU.forEach(o),P6=a(Qr," and "),ms=s(Qr,"A",{href:!0,rel:!0});var PU=i(ms);S6=a(PU,"FairScale"),PU.forEach(o),C6=a(Qr,", which implement parts of the paper "),hs=s(Qr,"A",{href:!0,rel:!0});var SU=i(hs);O6=a(SU,`ZeRO: Memory Optimizations
Toward Training Trillion Parameter Models, by Samyam Rajbhandari, Jeff Rasley, Olatunji Ruwase, Yuxiong He`),SU.forEach(o),I6=a(Qr,"."),Qr.forEach(o),K_=d(t),il=s(t,"P",{});var CU=i(il);U6=a(CU,"This provided support is new and experimental as of this writing."),CU.forEach(o),Q_=d(t),ll=s(t,"A",{id:!0}),i(ll).forEach(o),ev=d(t),Do=s(t,"H3",{class:!0});var Ub=i(Do);qr=s(Ub,"A",{id:!0,class:!0,href:!0});var OU=i(qr);Uu=s(OU,"SPAN",{});var IU=i(Uu);u(us.$$.fragment,IU),IU.forEach(o),OU.forEach(o),z6=d(Ub),zu=s(Ub,"SPAN",{});var UU=i(zu);N6=a(UU,"CUDA Extension Installation Notes"),UU.forEach(o),Ub.forEach(o),tv=d(t),dl=s(t,"P",{});var zU=i(dl);L6=a(zU,"As of this writing, both FairScale and Deepspeed require compilation of CUDA C++ code, before they can be used."),zU.forEach(o),ov=d(t),Ct=s(t,"P",{});var Bd=i(Ct);F6=a(Bd,"While all installation issues should be dealt with through the corresponding GitHub Issues of "),fs=s(Bd,"A",{href:!0,rel:!0});var NU=i(fs);R6=a(NU,"FairScale"),NU.forEach(o),W6=a(Bd," and "),gs=s(Bd,"A",{href:!0,rel:!0});var LU=i(gs);G6=a(LU,"Deepspeed"),LU.forEach(o),j6=a(Bd,`, there are a few common issues that one may encounter while building
any PyTorch extension that needs to build CUDA extensions.`),Bd.forEach(o),rv=d(t),cl=s(t,"P",{});var FU=i(cl);M6=a(FU,"Therefore, if you encounter a CUDA-related build issue while doing one of the following or both:"),FU.forEach(o),av=d(t),u(_s.$$.fragment,t),nv=d(t),pl=s(t,"P",{});var RU=i(pl);V6=a(RU,"please, read the following notes first."),RU.forEach(o),sv=d(t),Ot=s(t,"P",{});var Yd=i(Ot);H6=a(Yd,"In these notes we give examples for what to do when "),Nu=s(Yd,"CODE",{});var WU=i(Nu);B6=a(WU,"pytorch"),WU.forEach(o),Y6=a(Yd," has been built with CUDA "),Lu=s(Yd,"CODE",{});var GU=i(Lu);Z6=a(GU,"10.2"),GU.forEach(o),J6=a(Yd,`. If your situation is
different remember to adjust the version number to the one you are after.`),Yd.forEach(o),iv=d(t),qo=s(t,"H4",{class:!0});var zb=i(qo);Pr=s(zb,"A",{id:!0,class:!0,href:!0});var jU=i(Pr);Fu=s(jU,"SPAN",{});var MU=i(Fu);u(vs.$$.fragment,MU),MU.forEach(o),jU.forEach(o),X6=d(zb),Ru=s(zb,"SPAN",{});var VU=i(Ru);K6=a(VU,"Possible problem #1"),VU.forEach(o),zb.forEach(o),lv=d(t),ml=s(t,"P",{});var HU=i(ml);Q6=a(HU,`While, Pytorch comes with its own CUDA toolkit, to build these two projects you must have an identical version of CUDA
installed system-wide.`),HU.forEach(o),dv=d(t),Le=s(t,"P",{});var ea=i(Le);eA=a(ea,"For example, if you installed "),Wu=s(ea,"CODE",{});var BU=i(Wu);tA=a(BU,"pytorch"),BU.forEach(o),oA=a(ea," with "),Gu=s(ea,"CODE",{});var YU=i(Gu);rA=a(YU,"cudatoolkit==10.2"),YU.forEach(o),aA=a(ea,` in the Python environment, you also need to have
CUDA `),ju=s(ea,"CODE",{});var ZU=i(ju);nA=a(ZU,"10.2"),ZU.forEach(o),sA=a(ea," installed system-wide."),ea.forEach(o),cv=d(t),It=s(t,"P",{});var Zd=i(It);iA=a(Zd,"The exact location may vary from system to system, but "),Mu=s(Zd,"CODE",{});var JU=i(Mu);lA=a(JU,"/usr/local/cuda-10.2"),JU.forEach(o),dA=a(Zd,` is the most common location on many
Unix systems. When CUDA is correctly set up and added to the `),Vu=s(Zd,"CODE",{});var XU=i(Vu);cA=a(XU,"PATH"),XU.forEach(o),pA=a(Zd,` environment variable, one can find the
installation location by doing:`),Zd.forEach(o),pv=d(t),u(bs.$$.fragment,t),mv=d(t),Sr=s(t,"P",{});var Nb=i(Sr);mA=a(Nb,`If you don\u2019t have CUDA installed system-wide, install it first. You will find the instructions by using your favorite
search engine. For example, if you\u2019re on Ubuntu you may want to search for: `),ys=s(Nb,"A",{href:!0,rel:!0});var KU=i(ys);hA=a(KU,"ubuntu cuda 10.2 install"),KU.forEach(o),uA=a(Nb,"."),Nb.forEach(o),hv=d(t),Po=s(t,"H4",{class:!0});var Lb=i(Po);Cr=s(Lb,"A",{id:!0,class:!0,href:!0});var QU=i(Cr);Hu=s(QU,"SPAN",{});var ez=i(Hu);u(ws.$$.fragment,ez),ez.forEach(o),QU.forEach(o),fA=d(Lb),Bu=s(Lb,"SPAN",{});var tz=i(Bu);gA=a(tz,"Possible problem #2"),tz.forEach(o),Lb.forEach(o),uv=d(t),hl=s(t,"P",{});var oz=i(hl);_A=a(oz,`Another possible common problem is that you may have more than one CUDA toolkit installed system-wide. For example you
may have:`),oz.forEach(o),fv=d(t),u(Es.$$.fragment,t),gv=d(t),Ut=s(t,"P",{});var Jd=i(Ut);vA=a(Jd,"Now, in this situation you need to make sure that your "),Yu=s(Jd,"CODE",{});var rz=i(Yu);bA=a(rz,"PATH"),rz.forEach(o),yA=a(Jd," and "),Zu=s(Jd,"CODE",{});var az=i(Zu);wA=a(az,"LD_LIBRARY_PATH"),az.forEach(o),EA=a(Jd,` environment variables contain
the correct paths to the desired CUDA version. Typically, package installers will set these to contain whatever the
last version was installed. If you encounter the problem, where the package build fails because it can\u2019t find the right
CUDA version despite you having it installed system-wide, it means that you need to adjust the 2 aforementioned
environment variables.`),Jd.forEach(o),_v=d(t),ul=s(t,"P",{});var nz=i(ul);TA=a(nz,"First, you may look at their contents:"),nz.forEach(o),vv=d(t),u(Ts.$$.fragment,t),bv=d(t),fl=s(t,"P",{});var sz=i(fl);$A=a(sz,"so you get an idea of what is inside."),sz.forEach(o),yv=d(t),Or=s(t,"P",{});var Fb=i(Or);kA=a(Fb,"It\u2019s possible that "),Ju=s(Fb,"CODE",{});var iz=i(Ju);xA=a(iz,"LD_LIBRARY_PATH"),iz.forEach(o),AA=a(Fb," is empty."),Fb.forEach(o),wv=d(t),tt=s(t,"P",{});var Xs=i(tt);Xu=s(Xs,"CODE",{});var lz=i(Xu);DA=a(lz,"PATH"),lz.forEach(o),qA=a(Xs," lists the locations of where executables can be found and "),Ku=s(Xs,"CODE",{});var dz=i(Ku);PA=a(dz,"LD_LIBRARY_PATH"),dz.forEach(o),SA=a(Xs,` is for where shared libraries
are to looked for. In both cases, earlier entries have priority over the later ones. `),Qu=s(Xs,"CODE",{});var cz=i(Qu);CA=a(cz,":"),cz.forEach(o),OA=a(Xs,` is used to separate multiple
entries.`),Xs.forEach(o),Ev=d(t),gl=s(t,"P",{});var pz=i(gl);IA=a(pz,`Now, to tell the build program where to find the specific CUDA toolkit, insert the desired paths to be listed first by
doing:`),pz.forEach(o),Tv=d(t),u($s.$$.fragment,t),$v=d(t),_l=s(t,"P",{});var mz=i(_l);UA=a(mz,"Note that we aren\u2019t overwriting the existing values, but prepending instead."),mz.forEach(o),kv=d(t),Fe=s(t,"P",{});var ta=i(Fe);zA=a(ta,`Of course, adjust the version number, the full path if need be. Check that the directories you assign actually do
exist. `),ef=s(ta,"CODE",{});var hz=i(ef);NA=a(hz,"lib64"),hz.forEach(o),LA=a(ta," sub-directory is where the various CUDA "),tf=s(ta,"CODE",{});var uz=i(tf);FA=a(uz,".so"),uz.forEach(o),RA=a(ta," objects, like "),of=s(ta,"CODE",{});var fz=i(of);WA=a(fz,"libcudart.so"),fz.forEach(o),GA=a(ta,` reside, it\u2019s unlikely
that your system will have it named differently, but if it is adjust it to reflect your reality.`),ta.forEach(o),xv=d(t),So=s(t,"H4",{class:!0});var Rb=i(So);Ir=s(Rb,"A",{id:!0,class:!0,href:!0});var gz=i(Ir);rf=s(gz,"SPAN",{});var _z=i(rf);u(ks.$$.fragment,_z),_z.forEach(o),gz.forEach(o),jA=d(Rb),af=s(Rb,"SPAN",{});var vz=i(af);MA=a(vz,"Possible problem #3"),vz.forEach(o),Rb.forEach(o),Av=d(t),zt=s(t,"P",{});var Xd=i(zt);VA=a(Xd,"Some older CUDA versions may refuse to build with newer compilers. For example, you my have "),nf=s(Xd,"CODE",{});var bz=i(nf);HA=a(bz,"gcc-9"),bz.forEach(o),BA=a(Xd,` but it wants
`),sf=s(Xd,"CODE",{});var yz=i(sf);YA=a(yz,"gcc-7"),yz.forEach(o),ZA=a(Xd,"."),Xd.forEach(o),Dv=d(t),vl=s(t,"P",{});var wz=i(vl);JA=a(wz,"There are various ways to go about it."),wz.forEach(o),qv=d(t),bl=s(t,"P",{});var Ez=i(bl);XA=a(Ez,"If you can install the latest CUDA toolkit it typically should support the newer compiler."),Ez.forEach(o),Pv=d(t),Ur=s(t,"P",{});var Wb=i(Ur);KA=a(Wb,`Alternatively, you could install the lower version of the compiler in addition to the one you already have, or you may
already have it but it\u2019s not the default one, so the build system can\u2019t see it. If you have `),lf=s(Wb,"CODE",{});var Tz=i(lf);QA=a(Tz,"gcc-7"),Tz.forEach(o),e9=a(Wb,` installed but the
build system complains it can\u2019t find it, the following might do the trick:`),Wb.forEach(o),Sv=d(t),u(xs.$$.fragment,t),Cv=d(t),j=s(t,"P",{});var ue=i(j);t9=a(ue,"Here, we are making a symlink to "),df=s(ue,"CODE",{});var $z=i(df);o9=a($z,"gcc-7"),$z.forEach(o),r9=a(ue," from "),cf=s(ue,"CODE",{});var kz=i(cf);a9=a(kz,"/usr/local/cuda-10.2/bin/gcc"),kz.forEach(o),n9=a(ue,` and since
`),pf=s(ue,"CODE",{});var xz=i(pf);s9=a(xz,"/usr/local/cuda-10.2/bin/"),xz.forEach(o),i9=a(ue," should be in the "),mf=s(ue,"CODE",{});var Az=i(mf);l9=a(Az,"PATH"),Az.forEach(o),d9=a(ue,` environment variable (see the previous problem\u2019s solution), it
should find `),hf=s(ue,"CODE",{});var Dz=i(hf);c9=a(Dz,"gcc-7"),Dz.forEach(o),p9=a(ue," (and "),uf=s(ue,"CODE",{});var qz=i(uf);m9=a(qz,"g++7"),qz.forEach(o),h9=a(ue,") and then the build will succeed."),ue.forEach(o),Ov=d(t),yl=s(t,"P",{});var Pz=i(yl);u9=a(Pz,"As always make sure to edit the paths in the example to match your situation."),Pz.forEach(o),Iv=d(t),Co=s(t,"H3",{class:!0});var Gb=i(Co);zr=s(Gb,"A",{id:!0,class:!0,href:!0});var Sz=i(zr);ff=s(Sz,"SPAN",{});var Cz=i(ff);u(As.$$.fragment,Cz),Cz.forEach(o),Sz.forEach(o),f9=d(Gb),gf=s(Gb,"SPAN",{});var Oz=i(gf);g9=a(Oz,"FairScale"),Oz.forEach(o),Gb.forEach(o),Uv=d(t),Re=s(t,"P",{});var oa=i(Re);_9=a(oa,"By integrating "),Ds=s(oa,"A",{href:!0,rel:!0});var Iz=i(Ds);v9=a(Iz,"FairScale"),Iz.forEach(o),b9=a(oa," the "),wl=s(oa,"A",{href:!0});var Uz=i(wl);y9=a(Uz,"Trainer"),Uz.forEach(o),w9=a(oa,`
provides support for the following features from `),qs=s(oa,"A",{href:!0,rel:!0});var zz=i(qs);E9=a(zz,"the ZeRO paper"),zz.forEach(o),T9=a(oa,":"),oa.forEach(o),zv=d(t),We=s(t,"OL",{});var ra=i(We);_f=s(ra,"LI",{});var Nz=i(_f);$9=a(Nz,"Optimizer State Sharding"),Nz.forEach(o),k9=d(ra),vf=s(ra,"LI",{});var Lz=i(vf);x9=a(Lz,"Gradient Sharding"),Lz.forEach(o),A9=d(ra),bf=s(ra,"LI",{});var Fz=i(bf);D9=a(Fz,"Model Parameters Sharding (new and very experimental)"),Fz.forEach(o),q9=d(ra),yf=s(ra,"LI",{});var Rz=i(yf);P9=a(Rz,"CPU offload (new and very experimental)"),Rz.forEach(o),ra.forEach(o),Nv=d(t),El=s(t,"P",{});var Wz=i(El);S9=a(Wz,"You will need at least two GPUs to use this feature."),Wz.forEach(o),Lv=d(t),Ps=s(t,"P",{});var Nq=i(Ps);wf=s(Nq,"STRONG",{});var Gz=i(wf);C9=a(Gz,"Installation"),Gz.forEach(o),O9=a(Nq,":"),Nq.forEach(o),Fv=d(t),Tl=s(t,"P",{});var jz=i(Tl);I9=a(jz,"Install the library via pypi:"),jz.forEach(o),Rv=d(t),u(Ss.$$.fragment,t),Wv=d(t),Nt=s(t,"P",{});var Kd=i(Nt);U9=a(Kd,"or via "),Ef=s(Kd,"CODE",{});var Mz=i(Ef);z9=a(Mz,"transformers"),Mz.forEach(o),N9=a(Kd,"\u2019 "),Tf=s(Kd,"CODE",{});var Vz=i(Tf);L9=a(Vz,"extras"),Vz.forEach(o),F9=a(Kd,":"),Kd.forEach(o),Gv=d(t),u(Cs.$$.fragment,t),jv=d(t),Lt=s(t,"P",{});var Qd=i(Lt);R9=a(Qd,"(available starting from "),$f=s(Qd,"CODE",{});var Hz=i($f);W9=a(Hz,"transformers==4.6.0"),Hz.forEach(o),G9=a(Qd,") or find more details on "),Os=s(Qd,"A",{href:!0,rel:!0});var Bz=i(Os);j9=a(Bz,"the FairScale\u2019s GitHub page"),Bz.forEach(o),M9=a(Qd,"."),Qd.forEach(o),Mv=d(t),Nr=s(t,"P",{});var jb=i(Nr);V9=a(jb,"If you\u2019re still struggling with the build, first make sure to read "),$l=s(jb,"A",{href:!0});var Yz=i($l);H9=a(Yz,"CUDA Extension Installation Notes"),Yz.forEach(o),B9=a(jb,"."),jb.forEach(o),Vv=d(t),kl=s(t,"P",{});var Zz=i(kl);Y9=a(Zz,"If it\u2019s still not resolved the build issue, here are a few more ideas."),Zz.forEach(o),Hv=d(t),Is=s(t,"P",{});var Lq=i(Is);kf=s(Lq,"CODE",{});var Jz=i(kf);Z9=a(Jz,"fairscale"),Jz.forEach(o),J9=a(Lq,` seems to have an issue with the recently introduced by pip build isolation feature. If you have a problem
with it, you may want to try one of:`),Lq.forEach(o),Bv=d(t),u(Us.$$.fragment,t),Yv=d(t),xl=s(t,"P",{});var Xz=i(xl);X9=a(Xz,"or:"),Xz.forEach(o),Zv=d(t),u(zs.$$.fragment,t),Jv=d(t),Ns=s(t,"P",{});var Fq=i(Ns);xf=s(Fq,"CODE",{});var Kz=i(xf);K9=a(Kz,"fairscale"),Kz.forEach(o),Q9=a(Fq," also has issues with building against pytorch-nightly, so if you use it you may have to try one of:"),Fq.forEach(o),Xv=d(t),u(Ls.$$.fragment,t),Kv=d(t),Al=s(t,"P",{});var Qz=i(Al);e8=a(Qz,"or:"),Qz.forEach(o),Qv=d(t),u(Fs.$$.fragment,t),e1=d(t),Dl=s(t,"P",{});var eN=i(Dl);t8=a(eN,"Of course, adjust the urls to match the cuda version you use."),eN.forEach(o),t1=d(t),Lr=s(t,"P",{});var Mb=i(Lr);o8=a(Mb,`If after trying everything suggested you still encounter build issues, please, proceed with the GitHub Issue of
`),Rs=s(Mb,"A",{href:!0,rel:!0});var tN=i(Rs);r8=a(tN,"FairScale"),tN.forEach(o),a8=a(Mb,"."),Mb.forEach(o),o1=d(t),Ws=s(t,"P",{});var Rq=i(Ws);Af=s(Rq,"STRONG",{});var oN=i(Af);n8=a(oN,"Usage"),oN.forEach(o),s8=a(Rq,":"),Rq.forEach(o),r1=d(t),Ft=s(t,"P",{});var ec=i(Ft);i8=a(ec,"To use the first version of Sharded data-parallelism, add "),Df=s(ec,"CODE",{});var rN=i(Df);l8=a(rN,"--sharded_ddp simple"),rN.forEach(o),d8=a(ec,` to the command line arguments, and
make sure you have added the distributed launcher `),qf=s(ec,"CODE",{});var aN=i(qf);c8=a(aN,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),aN.forEach(o),p8=a(ec," if you haven\u2019t been using it already."),ec.forEach(o),a1=d(t),Fr=s(t,"P",{});var Vb=i(Fr);m8=a(Vb,"For example here is how you could use it for "),Pf=s(Vb,"CODE",{});var nN=i(Pf);h8=a(nN,"run_translation.py"),nN.forEach(o),u8=a(Vb," with 2 GPUs:"),Vb.forEach(o),n1=d(t),u(Gs.$$.fragment,t),s1=d(t),ql=s(t,"P",{});var sN=i(ql);f8=a(sN,"Notes:"),sN.forEach(o),i1=d(t),Ge=s(t,"UL",{});var aa=i(Ge);Sf=s(aa,"LI",{});var iN=i(Sf);g8=a(iN,"This feature requires distributed training (so multiple GPUs)."),iN.forEach(o),_8=d(aa),Cf=s(aa,"LI",{});var lN=i(Cf);v8=a(lN,"It is not implemented for TPUs."),lN.forEach(o),b8=d(aa),js=s(aa,"LI",{});var Hb=i(js);y8=a(Hb,"It works with "),Of=s(Hb,"CODE",{});var dN=i(Of);w8=a(dN,"--fp16"),dN.forEach(o),E8=a(Hb," too, to make things even faster."),Hb.forEach(o),T8=d(aa),Ms=s(aa,"LI",{});var Bb=i(Ms);$8=a(Bb,"One of the main benefits of enabling "),If=s(Bb,"CODE",{});var cN=i(If);k8=a(cN,"--sharded_ddp simple"),cN.forEach(o),x8=a(Bb,` is that it uses a lot less GPU memory, so you should be
able to use significantly larger batch sizes using the same hardware (e.g. 3x and even bigger) which should lead to
significantly shorter training time.`),Bb.forEach(o),aa.forEach(o),l1=d(t),Vs=s(t,"OL",{start:!0});var pN=i(Vs);ot=s(pN,"LI",{});var na=i(ot);A8=a(na,"To use the second version of Sharded data-parallelism, add "),Uf=s(na,"CODE",{});var mN=i(Uf);D8=a(mN,"--sharded_ddp zero_dp_2"),mN.forEach(o),q8=a(na," or "),zf=s(na,"CODE",{});var hN=i(zf);P8=a(hN,"--sharded_ddp zero_dp_3"),hN.forEach(o),S8=a(na," to the command line arguments, and make sure you have added the distributed launcher "),Nf=s(na,"CODE",{});var uN=i(Nf);C8=a(uN,"-m torch.distributed.launch --nproc_per_node=NUMBER_OF_GPUS_YOU_HAVE"),uN.forEach(o),O8=a(na," if you haven\u2019t been using it already."),na.forEach(o),pN.forEach(o),d1=d(t),Rr=s(t,"P",{});var Yb=i(Rr);I8=a(Yb,"For example here is how you could use it for "),Lf=s(Yb,"CODE",{});var fN=i(Lf);U8=a(fN,"run_translation.py"),fN.forEach(o),z8=a(Yb," with 2 GPUs:"),Yb.forEach(o),c1=d(t),u(Hs.$$.fragment,t),p1=d(t),Oo=s(t,"P",{});var qg=i(Oo);Ff=s(qg,"CODE",{});var gN=i(Ff);N8=a(gN,"zero_dp_2"),gN.forEach(o),L8=a(qg," is an optimized version of the simple wrapper, while "),Rf=s(qg,"CODE",{});var _N=i(Rf);F8=a(_N,"zero_dp_3"),_N.forEach(o),R8=a(qg,` fully shards model weights,
gradients and optimizer states.`),qg.forEach(o),m1=d(t),Rt=s(t,"P",{});var tc=i(Rt);W8=a(tc,"Both are compatible with adding "),Wf=s(tc,"CODE",{});var vN=i(Wf);G8=a(vN,"cpu_offload"),vN.forEach(o),j8=a(tc," to enable ZeRO-offload (activate it like this: "),Gf=s(tc,"CODE",{});var bN=i(Gf);M8=a(bN,'--sharded_ddp "zero_dp_2 cpu_offload"'),bN.forEach(o),V8=a(tc,")."),tc.forEach(o),h1=d(t),Pl=s(t,"P",{});var yN=i(Pl);H8=a(yN,"Notes:"),yN.forEach(o),u1=d(t),he=s(t,"UL",{});var Zt=i(he);jf=s(Zt,"LI",{});var wN=i(jf);B8=a(wN,"This feature requires distributed training (so multiple GPUs)."),wN.forEach(o),Y8=d(Zt),Mf=s(Zt,"LI",{});var EN=i(Mf);Z8=a(EN,"It is not implemented for TPUs."),EN.forEach(o),J8=d(Zt),Bs=s(Zt,"LI",{});var Zb=i(Bs);X8=a(Zb,"It works with "),Vf=s(Zb,"CODE",{});var TN=i(Vf);K8=a(TN,"--fp16"),TN.forEach(o),Q8=a(Zb," too, to make things even faster."),Zb.forEach(o),eD=d(Zt),Io=s(Zt,"LI",{});var oc=i(Io);tD=a(oc,"The "),Hf=s(oc,"CODE",{});var $N=i(Hf);oD=a($N,"cpu_offload"),$N.forEach(o),rD=a(oc," additional option requires "),Bf=s(oc,"CODE",{});var kN=i(Bf);aD=a(kN,"--fp16"),kN.forEach(o),nD=a(oc,"."),oc.forEach(o),sD=d(Zt),Yf=s(Zt,"LI",{});var xN=i(Yf);iD=a(xN,`This is an area of active development, so make sure you have a source install of fairscale to use this feature as
some bugs you encounter may have been fixed there already.`),xN.forEach(o),Zt.forEach(o),f1=d(t),Sl=s(t,"P",{});var AN=i(Sl);lD=a(AN,"Known caveats:"),AN.forEach(o),g1=d(t),Wr=s(t,"UL",{});var Jb=i(Wr);Uo=s(Jb,"LI",{});var rc=i(Uo);dD=a(rc,"This feature is incompatible with "),Zf=s(rc,"CODE",{});var DN=i(Zf);cD=a(DN,"--predict_with_generate"),DN.forEach(o),pD=a(rc," in the "),Jf=s(rc,"EM",{});var qN=i(Jf);mD=a(qN,"run_translation.py"),qN.forEach(o),hD=a(rc," script."),rc.forEach(o),uD=d(Jb),ke=s(Jb,"LI",{});var Jt=i(ke);fD=a(Jt,"Using "),Xf=s(Jt,"CODE",{});var PN=i(Xf);gD=a(PN,"--sharded_ddp zero_dp_3"),PN.forEach(o),_D=a(Jt,` requires wrapping each layer of the model in the special container
`),Kf=s(Jt,"CODE",{});var SN=i(Kf);vD=a(SN,"FullyShardedDataParallelism"),SN.forEach(o),bD=a(Jt," of fairscale. It should be used with the option "),Qf=s(Jt,"CODE",{});var CN=i(Qf);yD=a(CN,"auto_wrap"),CN.forEach(o),wD=a(Jt,` if you are not
doing this yourself: `),eg=s(Jt,"CODE",{});var ON=i(eg);ED=a(ON,'--sharded_ddp "zero_dp_3 auto_wrap"'),ON.forEach(o),TD=a(Jt,"."),Jt.forEach(o),Jb.forEach(o),_1=d(t),Cl=s(t,"P",{});var IN=i(Cl);$D=a(IN,"Sections that were moved:"),IN.forEach(o),v1=d(t),y=s(t,"P",{});var E=i(y);kD=a(E,"[ "),Ol=s(E,"A",{href:!0});var UN=i(Ol);xD=a(UN,"DeepSpeed"),UN.forEach(o),tg=s(E,"A",{id:!0}),i(tg).forEach(o),AD=a(E,`
| `),Il=s(E,"A",{href:!0});var zN=i(Il);DD=a(zN,"Installation"),zN.forEach(o),og=s(E,"A",{id:!0}),i(og).forEach(o),qD=a(E,`
| `),Ul=s(E,"A",{href:!0});var NN=i(Ul);PD=a(NN,"Deployment with multiple GPUs"),NN.forEach(o),rg=s(E,"A",{id:!0}),i(rg).forEach(o),SD=a(E,`
| `),zl=s(E,"A",{href:!0});var LN=i(zl);CD=a(LN,"Deployment with one GPU"),LN.forEach(o),ag=s(E,"A",{id:!0}),i(ag).forEach(o),OD=a(E,`
| `),Nl=s(E,"A",{href:!0});var FN=i(Nl);ID=a(FN,"Deployment in Notebooks"),FN.forEach(o),ng=s(E,"A",{id:!0}),i(ng).forEach(o),UD=a(E,`
| `),Ll=s(E,"A",{href:!0});var RN=i(Ll);zD=a(RN,"Configuration"),RN.forEach(o),sg=s(E,"A",{id:!0}),i(sg).forEach(o),ND=a(E,`
| `),Fl=s(E,"A",{href:!0});var WN=i(Fl);LD=a(WN,"Passing Configuration"),WN.forEach(o),ig=s(E,"A",{id:!0}),i(ig).forEach(o),FD=a(E,`
| `),Rl=s(E,"A",{href:!0});var GN=i(Rl);RD=a(GN,"Shared Configuration"),GN.forEach(o),lg=s(E,"A",{id:!0}),i(lg).forEach(o),WD=a(E,`
| `),Wl=s(E,"A",{href:!0});var jN=i(Wl);GD=a(jN,"ZeRO"),jN.forEach(o),dg=s(E,"A",{id:!0}),i(dg).forEach(o),jD=a(E,`
| `),Gl=s(E,"A",{href:!0});var MN=i(Gl);MD=a(MN,"ZeRO-2 Config"),MN.forEach(o),cg=s(E,"A",{id:!0}),i(cg).forEach(o),VD=a(E,`
| `),jl=s(E,"A",{href:!0});var VN=i(jl);HD=a(VN,"ZeRO-3 Config"),VN.forEach(o),pg=s(E,"A",{id:!0}),i(pg).forEach(o),BD=a(E,`
| `),Ml=s(E,"A",{href:!0});var HN=i(Ml);YD=a(HN,"NVMe Support"),HN.forEach(o),mg=s(E,"A",{id:!0}),i(mg).forEach(o),ZD=a(E,`
| `),Vl=s(E,"A",{href:!0});var BN=i(Vl);JD=a(BN,"ZeRO-2 vs ZeRO-3 Performance"),BN.forEach(o),hg=s(E,"A",{id:!0}),i(hg).forEach(o),XD=a(E,`
| `),Hl=s(E,"A",{href:!0});var YN=i(Hl);KD=a(YN,"ZeRO-2 Example"),YN.forEach(o),ug=s(E,"A",{id:!0}),i(ug).forEach(o),QD=a(E,`
| `),Bl=s(E,"A",{href:!0});var ZN=i(Bl);eq=a(ZN,"ZeRO-3 Example"),ZN.forEach(o),fg=s(E,"A",{id:!0}),i(fg).forEach(o),tq=a(E,`
| `),Yl=s(E,"A",{href:!0});var JN=i(Yl);oq=a(JN,"Optimizer"),JN.forEach(o),gg=s(E,"A",{id:!0}),i(gg).forEach(o),rq=a(E,`
| `),Zl=s(E,"A",{href:!0});var XN=i(Zl);aq=a(XN,"Scheduler"),XN.forEach(o),_g=s(E,"A",{id:!0}),i(_g).forEach(o),nq=a(E,`
| `),Jl=s(E,"A",{href:!0});var KN=i(Jl);sq=a(KN,"fp32 Precision"),KN.forEach(o),vg=s(E,"A",{id:!0}),i(vg).forEach(o),iq=a(E,`
| `),Xl=s(E,"A",{href:!0});var QN=i(Xl);lq=a(QN,"Automatic Mixed Precision"),QN.forEach(o),bg=s(E,"A",{id:!0}),i(bg).forEach(o),dq=a(E,`
| `),Kl=s(E,"A",{href:!0});var eL=i(Kl);cq=a(eL,"Batch Size"),eL.forEach(o),yg=s(E,"A",{id:!0}),i(yg).forEach(o),pq=a(E,`
| `),Ql=s(E,"A",{href:!0});var tL=i(Ql);mq=a(tL,"Gradient Accumulation"),tL.forEach(o),wg=s(E,"A",{id:!0}),i(wg).forEach(o),hq=a(E,`
| `),ed=s(E,"A",{href:!0});var oL=i(ed);uq=a(oL,"Gradient Clipping"),oL.forEach(o),Eg=s(E,"A",{id:!0}),i(Eg).forEach(o),fq=a(E,`
| `),td=s(E,"A",{href:!0});var rL=i(td);gq=a(rL,"Getting The Model Weights Out"),rL.forEach(o),Tg=s(E,"A",{id:!0}),i(Tg).forEach(o),_q=a(E,`
]`),E.forEach(o),this.h()},h(){m(T,"name","hf:doc:metadata"),m(T,"content",JSON.stringify(hL)),m(S,"id","trainer"),m(S,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(S,"href","#trainer"),m(x,"class","relative group"),m(le,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Y,"href","../examples"),m(oe,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(ve,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(be,"href","https://github.com/NVIDIA/apex"),m(be,"rel","nofollow"),m(ye,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(hi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(ui,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(fi,"href","callback"),m(Go,"id","transformers.Trainer"),m(Go,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Go,"href","#transformers.Trainer"),m(Kt,"class","relative group"),m(gi,"href","/docs/transformers/pr_15750/en/main_classes/model#transformers.PreTrainedModel"),m(Mo,"class","docstring"),m(Vo,"class","docstring"),m(lt,"class","docstring"),m(dt,"class","docstring"),m(ct,"class","docstring"),m(Ho,"class","docstring"),m(Pe,"class","docstring"),m(pt,"class","docstring"),m(vi,"href","/docs/transformers/pr_15750/en/main_classes/model#transformers.PreTrainedModel"),m(Bo,"class","docstring"),m(mt,"class","docstring"),m(Yo,"class","docstring"),m(ht,"class","docstring"),m(Se,"class","docstring"),m(ut,"class","docstring"),m(Jo,"class","docstring"),m(Xo,"class","docstring"),m(Ko,"class","docstring"),m(ft,"class","docstring"),m(yi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Ha,"href","https://github.com/pytorch/pytorch/issues/16266"),m(Ha,"rel","nofollow"),m(wi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Ei,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(k,"class","docstring"),m(Qo,"class","docstring"),m(_t,"class","docstring"),m(vt,"class","docstring"),m(X,"class","docstring"),m(bt,"class","docstring"),m(yt,"class","docstring"),m(tr,"class","docstring"),m(or,"class","docstring"),m(Ce,"class","docstring"),m(wt,"class","docstring"),m(Et,"class","docstring"),m(rr,"class","docstring"),m(Tt,"class","docstring"),m(b,"class","docstring"),m(ar,"id","transformers.Seq2SeqTrainer"),m(ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(ar,"href","#transformers.Seq2SeqTrainer"),m(co,"class","relative group"),m(Oe,"class","docstring"),m(K,"class","docstring"),m(po,"class","docstring"),m(sr,"id","transformers.TrainingArguments"),m(sr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(sr,"href","#transformers.TrainingArguments"),m(go,"class","relative group"),m($i,"href","/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.HfArgumentParser"),m(kn,"href","https://docs.python.org/3/library/argparse#module-argparse"),m(kn,"rel","nofollow"),m(ce,"class","docstring"),m(ir,"class","docstring"),m($t,"class","docstring"),m(lr,"class","docstring"),m(dr,"class","docstring"),m(cr,"class","docstring"),m(N,"class","docstring"),m(pr,"id","transformers.Seq2SeqTrainingArguments"),m(pr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(pr,"href","#transformers.Seq2SeqTrainingArguments"),m(wo,"class","relative group"),m(ki,"href","/docs/transformers/pr_15750/en/internal/trainer_utils#transformers.HfArgumentParser"),m(Nn,"href","https://docs.python.org/3/library/argparse#module-argparse"),m(Nn,"rel","nofollow"),m(ae,"class","docstring"),m(mr,"id","checkpoints"),m(mr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(mr,"href","#checkpoints"),m(To,"class","relative group"),m(xi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Ai,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(Di,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer.train"),m(Si,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(_r,"id","logging"),m(_r,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(_r,"href","#logging"),m($o,"class","relative group"),m(Oi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Ii,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(Ni,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.TrainingArguments"),m(Li,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Fi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(yr,"id","randomness"),m(yr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(yr,"href","#randomness"),m(ko,"class","relative group"),m(Vi,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(Vn,"href","https://pytorch.org/docs/stable/notes/randomness"),m(Vn,"rel","nofollow"),m(wr,"id","specific-gpus-selection"),m(wr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(wr,"href","#specific-gpus-selection"),m(xo,"class","relative group"),m(Bn,"href","https://pytorch.org/docs/stable/generated/torch.nn.parallel.DistributedDataParallel.html"),m(Bn,"rel","nofollow"),m(Zn,"href","https://github.com/huggingface/accelerate"),m(Zn,"rel","nofollow"),m(Jn,"href","https://github.com/microsoft/DeepSpeed"),m(Jn,"rel","nofollow"),m(Bi,"href","Deepspeed"),m(ts,"href","https://pytorch.org/docs/stable/generated/torch.nn.DataParallel.html"),m(ts,"rel","nofollow"),m(is,"start","2"),m(Ar,"id","trainer-integrations"),m(Ar,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ar,"href","#trainer-integrations"),m(Ao,"class","relative group"),m(sl,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(ps,"href","https://github.com/microsoft/DeepSpeed"),m(ps,"rel","nofollow"),m(ms,"href","https://github.com/facebookresearch/fairscale/"),m(ms,"rel","nofollow"),m(hs,"href","https://arxiv.org/abs/1910.02054"),m(hs,"rel","nofollow"),m(ll,"id","zero-install-notes"),m(qr,"id","cuda-extension-installation-notes"),m(qr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(qr,"href","#cuda-extension-installation-notes"),m(Do,"class","relative group"),m(fs,"href","https://github.com/facebookresearch/fairscale/issues"),m(fs,"rel","nofollow"),m(gs,"href","https://github.com/microsoft/DeepSpeed/issues"),m(gs,"rel","nofollow"),m(Pr,"id","possible-problem-1"),m(Pr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Pr,"href","#possible-problem-1"),m(qo,"class","relative group"),m(ys,"href","https://www.google.com/search?q=ubuntu+cuda+10.2+install"),m(ys,"rel","nofollow"),m(Cr,"id","possible-problem-2"),m(Cr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Cr,"href","#possible-problem-2"),m(Po,"class","relative group"),m(Ir,"id","possible-problem-3"),m(Ir,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(Ir,"href","#possible-problem-3"),m(So,"class","relative group"),m(zr,"id","fairscale"),m(zr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(zr,"href","#fairscale"),m(Co,"class","relative group"),m(Ds,"href","https://github.com/facebookresearch/fairscale/"),m(Ds,"rel","nofollow"),m(wl,"href","/docs/transformers/pr_15750/en/main_classes/trainer#transformers.Trainer"),m(qs,"href","https://arxiv.org/abs/1910.02054"),m(qs,"rel","nofollow"),m(Os,"href","https://github.com/facebookresearch/fairscale/#installation"),m(Os,"rel","nofollow"),m($l,"href","#zero-install-notes"),m(Rs,"href","https://github.com/facebookresearch/fairscale/issues"),m(Rs,"rel","nofollow"),m(Vs,"start","3"),m(Ol,"href","./deepspeed#deepspeed-trainer-integration"),m(tg,"id","deepspeed"),m(Il,"href","./deepspeed#deepspeed-installation"),m(og,"id","installation"),m(Ul,"href","./deepspeed#deepspeed-multi-gpu"),m(rg,"id","deployment-with-multiple-gpus"),m(zl,"href","./deepspeed#deepspeed-one-gpu"),m(ag,"id","deployment-with-one-gpu"),m(Nl,"href","./deepspeed#deepspeed-notebook"),m(ng,"id","deployment-in-notebooks"),m(Ll,"href","./deepspeed#deepspeed-config"),m(sg,"id","configuration"),m(Fl,"href","./deepspeed#deepspeed-config-passing"),m(ig,"id","passing-configuration"),m(Rl,"href","./deepspeed#deepspeed-config-shared"),m(lg,"id","shared-configuration"),m(Wl,"href","./deepspeed#deepspeed-zero"),m(dg,"id","zero"),m(Gl,"href","./deepspeed#deepspeed-zero2-config"),m(cg,"id","zero-2-config"),m(jl,"href","./deepspeed#deepspeed-zero3-config"),m(pg,"id","zero-3-config"),m(Ml,"href","./deepspeed#deepspeed-nvme"),m(mg,"id","nvme-support"),m(Vl,"href","./deepspeed#deepspeed-zero2-zero3-performance"),m(hg,"id","zero-2-vs-zero-3-performance"),m(Hl,"href","./deepspeed#deepspeed-zero2-example"),m(ug,"id","zero-2-example"),m(Bl,"href","./deepspeed#deepspeed-zero3-example"),m(fg,"id","zero-3-example"),m(Yl,"href","./deepspeed#deepspeed-optimizer"),m(gg,"id","optimizer"),m(Zl,"href","./deepspeed#deepspeed-scheduler"),m(_g,"id","scheduler"),m(Jl,"href","./deepspeed#deepspeed-fp32"),m(vg,"id","fp32-precision"),m(Xl,"href","./deepspeed#deepspeed-amp"),m(bg,"id","automatic-mixed-precision"),m(Kl,"href","./deepspeed#deepspeed-bs"),m(yg,"id","batch-size"),m(Ql,"href","./deepspeed#deepspeed-grad-acc"),m(wg,"id","gradient-accumulation"),m(ed,"href","./deepspeed#deepspeed-grad-clip"),m(Eg,"id","gradient-clipping"),m(td,"href","./deepspeed#deepspeed-weight-extraction"),m(Tg,"id","getting-the-model-weights-out")},m(t,c){e(document.head,T),p(t,L,c),p(t,x,c),e(x,S),e(S,fe),f(R,fe,null),e(x,W),e(x,V),e(V,ge),p(t,ee,c),p(t,G,c),e(G,ie),e(G,le),e(le,te),e(G,de),e(G,Y),e(Y,Ze),e(G,_e),p(t,z,c),p(t,O,c),e(O,rt),e(O,oe),e(oe,at),e(O,nt),e(O,ve),e(ve,sa),e(O,ia),p(t,Je,c),p(t,Ae,c),e(Ae,la),e(Ae,be),e(be,da),e(Ae,ca),p(t,Z,c),p(t,H,c),e(H,Ks),e(H,ye),e(ye,Lo),e(H,Qs),p(t,Xt,c),p(t,D,c),e(D,B),e(B,Fo),e(Fo,ei),e(B,ti),e(D,oi),e(D,ri),e(ri,ac),e(ac,Kb),e(ri,Qb),e(D,ey),e(D,ai),e(ai,nc),e(nc,ty),e(ai,oy),e(D,ry),e(D,ni),e(ni,sc),e(sc,ay),e(ni,ny),e(D,sy),e(D,st),e(st,ic),e(ic,iy),e(st,ly),e(st,lc),e(lc,dy),e(st,cy),e(st,dc),e(dc,py),e(st,my),e(D,hy),e(D,si),e(si,cc),e(cc,uy),e(si,fy),e(D,gy),e(D,ii),e(ii,pc),e(pc,_y),e(ii,vy),e(D,by),e(D,li),e(li,mc),e(mc,yy),e(li,wy),e(D,Ey),e(D,di),e(di,hc),e(hc,Ty),e(di,$y),e(D,ky),e(D,ci),e(ci,uc),e(uc,xy),e(ci,Ay),e(D,Dy),e(D,pi),e(pi,fc),e(fc,qy),e(pi,Py),e(D,Sy),e(D,mi),e(mi,gc),e(gc,Cy),e(mi,Oy),p(t,Pg,c),f(Ro,t,c),p(t,Sg,c),p(t,Wo,c),e(Wo,Iy),e(Wo,hi),e(hi,Uy),e(Wo,zy),p(t,Cg,c),f(pa,t,c),p(t,Og,c),p(t,it,c),e(it,Ny),e(it,ui),e(ui,Ly),e(it,Fy),e(it,fi),e(fi,Ry),e(it,Wy),p(t,Ig,c),p(t,Kt,c),e(Kt,Go),e(Go,_c),f(ma,_c,null),e(Kt,Gy),e(Kt,vc),e(vc,jy),p(t,Ug,c),p(t,b,c),f(ha,b,null),e(b,My),e(b,bc),e(bc,Vy),e(b,Hy),e(b,yc),e(yc,By),e(b,Yy),e(b,we),e(we,jo),e(jo,wc),e(wc,Zy),e(jo,Jy),e(jo,gi),e(gi,Xy),e(jo,Ky),e(we,Qy),e(we,J),e(J,Ec),e(Ec,e0),e(J,t0),e(J,Tc),e(Tc,o0),e(J,r0),e(J,$c),e($c,a0),e(J,n0),e(J,kc),e(kc,s0),e(J,i0),e(J,xc),e(xc,l0),e(J,d0),e(J,Ac),e(Ac,c0),e(J,p0),e(we,m0),e(we,_i),e(_i,Dc),e(Dc,h0),e(_i,u0),e(we,f0),e(we,De),e(De,qc),e(qc,g0),e(De,_0),e(De,Pc),e(Pc,v0),e(De,b0),e(De,Sc),e(Sc,y0),e(De,w0),e(De,Cc),e(Cc,E0),e(De,T0),e(we,$0),e(we,qe),e(qe,Oc),e(Oc,k0),e(qe,x0),e(qe,Ic),e(Ic,A0),e(qe,D0),e(qe,Uc),e(Uc,q0),e(qe,P0),e(qe,zc),e(zc,S0),e(qe,C0),e(b,O0),e(b,Mo),f(ua,Mo,null),e(Mo,I0),e(Mo,fa),e(fa,U0),e(fa,Nc),e(Nc,z0),e(fa,N0),e(b,L0),e(b,Vo),f(ga,Vo,null),e(Vo,F0),e(Vo,_a),e(_a,R0),e(_a,Lc),e(Lc,W0),e(_a,G0),e(b,j0),e(b,lt),f(va,lt,null),e(lt,M0),e(lt,Fc),e(Fc,V0),e(lt,H0),e(lt,Rc),e(Rc,B0),e(b,Y0),e(b,dt),f(ba,dt,null),e(dt,Z0),e(dt,Wc),e(Wc,J0),e(dt,X0),e(dt,ya),e(ya,K0),e(ya,Gc),e(Gc,Q0),e(ya,e2),e(b,t2),e(b,ct),f(wa,ct,null),e(ct,o2),e(ct,jc),e(jc,r2),e(ct,a2),e(ct,Xe),e(Xe,n2),e(Xe,Mc),e(Mc,s2),e(Xe,i2),e(Xe,Vc),e(Vc,l2),e(Xe,d2),e(Xe,Hc),e(Hc,c2),e(Xe,p2),e(b,m2),e(b,Ho),f(Ea,Ho,null),e(Ho,h2),e(Ho,Bc),e(Bc,u2),e(b,f2),e(b,Pe),f(Ta,Pe,null),e(Pe,g2),e(Pe,Yc),e(Yc,_2),e(Pe,v2),e(Pe,$a),e($a,b2),e($a,Zc),e(Zc,y2),e($a,w2),e(Pe,E2),e(Pe,Jc),e(Jc,T2),e(b,$2),e(b,pt),f(ka,pt,null),e(pt,k2),e(pt,Qt),e(Qt,x2),e(Qt,Xc),e(Xc,A2),e(Qt,D2),e(Qt,Kc),e(Kc,q2),e(Qt,P2),e(pt,S2),e(pt,Qc),e(Qc,C2),e(b,O2),e(b,Bo),f(xa,Bo,null),e(Bo,I2),e(Bo,Aa),e(Aa,U2),e(Aa,vi),e(vi,z2),e(Aa,N2),e(b,L2),e(b,mt),f(Da,mt,null),e(mt,F2),e(mt,qa),e(qa,R2),e(qa,ep),e(ep,W2),e(qa,G2),e(mt,j2),e(mt,tp),e(tp,M2),e(b,V2),e(b,Yo),f(Pa,Yo,null),e(Yo,H2),e(Yo,op),e(op,B2),e(b,Y2),e(b,ht),f(Sa,ht,null),e(ht,Z2),e(ht,Ca),e(Ca,J2),e(Ca,rp),e(rp,X2),e(Ca,K2),e(ht,Q2),e(ht,ap),e(ap,ew),e(b,tw),e(b,Se),f(Oa,Se,null),e(Se,ow),e(Se,Ia),e(Ia,rw),e(Ia,np),e(np,aw),e(Ia,nw),e(Se,sw),e(Se,eo),e(eo,iw),e(eo,sp),e(sp,lw),e(eo,dw),e(eo,ip),e(ip,cw),e(eo,pw),e(Se,mw),e(Se,lp),e(lp,hw),e(b,uw),e(b,ut),f(Ua,ut,null),e(ut,fw),e(ut,Ee),e(Ee,gw),e(Ee,dp),e(dp,_w),e(Ee,vw),e(Ee,cp),e(cp,bw),e(Ee,yw),e(Ee,pp),e(pp,ww),e(Ee,Ew),e(Ee,mp),e(mp,Tw),e(Ee,$w),e(ut,kw),f(Zo,ut,null),e(b,xw),e(b,Jo),f(za,Jo,null),e(Jo,Aw),e(Jo,Na),e(Na,Dw),e(Na,hp),e(hp,qw),e(Na,Pw),e(b,Sw),e(b,Xo),f(La,Xo,null),e(Xo,Cw),e(Xo,up),e(up,Ow),e(b,Iw),e(b,Ko),f(Fa,Ko,null),e(Ko,Uw),e(Ko,Ra),e(Ra,zw),e(Ra,fp),e(fp,Nw),e(Ra,Lw),e(b,Fw),e(b,ft),f(Wa,ft,null),e(ft,Rw),e(ft,Ga),e(Ga,Ww),e(Ga,gp),e(gp,Gw),e(Ga,jw),e(ft,Mw),e(ft,_p),e(_p,Vw),e(b,Hw),e(b,k),f(ja,k,null),e(k,Bw),e(k,vp),e(vp,Yw),e(k,Zw),e(k,bp),e(bp,Jw),e(k,Xw),e(k,yp),e(yp,Kw),e(k,Qw),e(k,to),e(to,eE),e(to,wp),e(wp,tE),e(to,oE),e(to,Ep),e(Ep,rE),e(to,aE),e(k,nE),e(k,Tp),e(Tp,sE),e(k,iE),f(Ma,k,null),e(k,lE),e(k,$p),e($p,kp),e(kp,dE),e(k,cE),e(k,Ke),e(Ke,Te),e(Te,pE),e(Te,xp),e(xp,mE),e(Te,hE),e(Te,Ap),e(Ap,uE),e(Te,fE),e(Te,Dp),e(Dp,gE),e(Te,_E),e(Te,qp),e(qp,vE),e(Te,bE),e(Ke,yE),e(Ke,oo),e(oo,wE),e(oo,Pp),e(Pp,EE),e(oo,TE),e(oo,Sp),e(Sp,$E),e(oo,kE),e(Ke,xE),e(Ke,bi),e(bi,Cp),e(Cp,AE),e(bi,DE),e(Ke,qE),e(Ke,gt),e(gt,Op),e(Op,PE),e(gt,SE),e(gt,Ip),e(Ip,CE),e(gt,OE),e(gt,Up),e(Up,IE),e(gt,UE),e(k,zE),e(k,zp),e(zp,NE),e(k,LE),e(k,Np),e(Np,FE),e(k,RE),e(k,Va),e(Va,WE),e(Va,Lp),e(Lp,GE),e(Va,jE),e(k,ME),e(k,Qe),e(Qe,VE),e(Qe,Fp),e(Fp,HE),e(Qe,BE),e(Qe,Rp),e(Rp,YE),e(Qe,ZE),e(Qe,Wp),e(Wp,JE),e(Qe,XE),e(k,KE),e(k,re),e(re,QE),e(re,yi),e(yi,eT),e(re,tT),e(re,Gp),e(Gp,oT),e(re,rT),e(re,jp),e(jp,aT),e(re,nT),e(re,Mp),e(Mp,sT),e(re,iT),e(re,Vp),e(Vp,lT),e(re,dT),e(k,cT),e(k,I),e(I,pT),e(I,Hp),e(Hp,mT),e(I,hT),e(I,Bp),e(Bp,uT),e(I,fT),e(I,Yp),e(Yp,gT),e(I,_T),e(I,Zp),e(Zp,vT),e(I,bT),e(I,Ha),e(Ha,yT),e(I,wT),e(I,Jp),e(Jp,ET),e(I,TT),e(I,Xp),e(Xp,$T),e(I,kT),e(I,Kp),e(Kp,xT),e(I,AT),e(I,Qp),e(Qp,DT),e(I,qT),e(I,em),e(em,PT),e(I,ST),e(k,CT),e(k,$e),e($e,OT),e($e,wi),e(wi,IT),e($e,UT),e($e,tm),e(tm,zT),e($e,NT),e($e,Ei),e(Ei,LT),e($e,FT),e($e,om),e(om,RT),e($e,WT),e(k,GT),e(k,rm),e(rm,jT),e(b,MT),e(b,Qo),f(Ba,Qo,null),e(Qo,VT),e(Qo,am),e(am,HT),e(b,BT),e(b,_t),f(Ya,_t,null),e(_t,YT),e(_t,Za),e(Za,ZT),e(Za,nm),e(nm,JT),e(Za,XT),e(_t,KT),e(_t,Ti),e(Ti,QT),e(Ti,sm),e(sm,e5),e(b,t5),e(b,vt),f(Ja,vt,null),e(vt,o5),e(vt,Xa),e(Xa,r5),e(Xa,im),e(im,a5),e(Xa,n5),e(vt,s5),e(vt,Ka),e(Ka,i5),e(Ka,lm),e(lm,l5),e(Ka,d5),e(b,c5),e(b,X),f(Qa,X,null),e(X,p5),e(X,dm),e(dm,m5),e(X,h5),e(X,en),e(en,u5),e(en,cm),e(cm,f5),e(en,g5),e(X,_5),f(er,X,null),e(X,v5),e(X,tn),e(tn,b5),e(tn,pm),e(pm,y5),e(tn,w5),e(X,E5),e(X,ro),e(ro,ao),e(ao,T5),e(ao,mm),e(mm,$5),e(ao,k5),e(ao,hm),e(hm,x5),e(ao,A5),e(ro,D5),e(ro,no),e(no,q5),e(no,um),e(um,P5),e(no,S5),e(no,fm),e(fm,C5),e(no,O5),e(ro,I5),e(ro,so),e(so,U5),e(so,gm),e(gm,z5),e(so,N5),e(so,_m),e(_m,L5),e(so,F5),e(b,R5),e(b,bt),f(on,bt,null),e(bt,W5),e(bt,io),e(io,G5),e(io,vm),e(vm,j5),e(io,M5),e(io,bm),e(bm,V5),e(io,H5),e(bt,B5),e(bt,ym),e(ym,Y5),e(b,Z5),e(b,yt),f(rn,yt,null),e(yt,J5),e(yt,lo),e(lo,X5),e(lo,wm),e(wm,K5),e(lo,Q5),e(lo,Em),e(Em,e4),e(lo,t4),e(yt,o4),e(yt,Tm),e(Tm,r4),e(b,a4),e(b,tr),f(an,tr,null),e(tr,n4),e(tr,et),e(et,s4),e(et,$m),e($m,i4),e(et,l4),e(et,km),e(km,d4),e(et,c4),e(et,xm),e(xm,p4),e(et,m4),e(b,h4),e(b,or),f(nn,or,null),e(or,u4),e(or,sn),e(sn,f4),e(sn,Am),e(Am,g4),e(sn,_4),e(b,v4),e(b,Ce),f(ln,Ce,null),e(Ce,b4),e(Ce,dn),e(dn,y4),e(dn,Dm),e(Dm,w4),e(dn,E4),e(Ce,T4),e(Ce,qm),e(qm,$4),e(Ce,k4),e(Ce,cn),e(cn,x4),e(cn,Pm),e(Pm,A4),e(cn,D4),e(b,q4),e(b,wt),f(pn,wt,null),e(wt,P4),e(wt,mn),e(mn,S4),e(mn,Sm),e(Sm,C4),e(mn,O4),e(wt,I4),e(wt,Cm),e(Cm,U4),e(b,z4),e(b,Et),f(hn,Et,null),e(Et,N4),e(Et,Om),e(Om,L4),e(Et,F4),e(Et,Im),e(Im,R4),e(b,W4),e(b,rr),f(un,rr,null),e(rr,G4),e(rr,Um),e(Um,j4),e(b,M4),e(b,Tt),f(fn,Tt,null),e(Tt,V4),e(Tt,zm),e(zm,H4),e(Tt,B4),e(Tt,Nm),e(Nm,Y4),p(t,zg,c),p(t,co,c),e(co,ar),e(ar,Lm),f(gn,Lm,null),e(co,Z4),e(co,Fm),e(Fm,J4),p(t,Ng,c),p(t,po,c),e(po,Oe),f(_n,Oe,null),e(Oe,X4),e(Oe,Rm),e(Rm,K4),e(Oe,Q4),e(Oe,vn),e(vn,e$),e(vn,Wm),e(Wm,t$),e(vn,o$),e(Oe,r$),e(Oe,Gm),e(Gm,a$),e(po,n$),e(po,K),f(bn,K,null),e(K,s$),e(K,jm),e(jm,i$),e(K,l$),e(K,yn),e(yn,d$),e(yn,Mm),e(Mm,c$),e(yn,p$),e(K,m$),f(nr,K,null),e(K,h$),e(K,wn),e(wn,u$),e(wn,Vm),e(Vm,f$),e(wn,g$),e(K,_$),e(K,mo),e(mo,ho),e(ho,v$),e(ho,Hm),e(Hm,b$),e(ho,y$),e(ho,Bm),e(Bm,w$),e(ho,E$),e(mo,T$),e(mo,uo),e(uo,$$),e(uo,Ym),e(Ym,k$),e(uo,x$),e(uo,Zm),e(Zm,A$),e(uo,D$),e(mo,q$),e(mo,fo),e(fo,P$),e(fo,Jm),e(Jm,S$),e(fo,C$),e(fo,Xm),e(Xm,O$),e(fo,I$),p(t,Lg,c),p(t,go,c),e(go,sr),e(sr,Km),f(En,Km,null),e(go,U$),e(go,Qm),e(Qm,z$),p(t,Fg,c),p(t,N,c),f(Tn,N,null),e(N,N$),e(N,$n),e($n,L$),e($n,eh),e(eh,F$),e($n,R$),e(N,W$),e(N,_o),e(_o,G$),e(_o,$i),e($i,j$),e(_o,M$),e(_o,kn),e(kn,V$),e(_o,H$),e(N,B$),e(N,ce),f(xn,ce,null),e(ce,Y$),e(ce,th),e(th,Z$),e(ce,J$),e(ce,vo),e(vo,X$),e(vo,oh),e(oh,K$),e(vo,Q$),e(vo,rh),e(rh,e3),e(vo,t3),e(ce,o3),e(ce,bo),e(bo,r3),e(bo,ah),e(ah,a3),e(bo,n3),e(bo,nh),e(nh,s3),e(bo,i3),e(ce,l3),e(ce,An),e(An,d3),e(An,sh),e(sh,c3),e(An,p3),e(N,m3),e(N,ir),f(Dn,ir,null),e(ir,h3),e(ir,ih),e(ih,u3),e(N,f3),e(N,$t),f(qn,$t,null),e($t,g3),e($t,lh),e(lh,_3),e($t,v3),e($t,yo),e(yo,b3),e(yo,dh),e(dh,y3),e(yo,w3),e(yo,ch),e(ch,E3),e(yo,T3),e(N,$3),e(N,lr),f(Pn,lr,null),e(lr,k3),e(lr,Sn),e(Sn,x3),e(Sn,ph),e(ph,A3),e(Sn,D3),e(N,q3),e(N,dr),f(Cn,dr,null),e(dr,P3),e(dr,mh),e(mh,S3),e(N,C3),e(N,cr),f(On,cr,null),e(cr,O3),e(cr,hh),e(hh,I3),p(t,Rg,c),p(t,wo,c),e(wo,pr),e(pr,uh),f(In,uh,null),e(wo,U3),e(wo,fh),e(fh,z3),p(t,Wg,c),p(t,ae,c),f(Un,ae,null),e(ae,N3),e(ae,zn),e(zn,L3),e(zn,gh),e(gh,F3),e(zn,R3),e(ae,W3),e(ae,Eo),e(Eo,G3),e(Eo,ki),e(ki,j3),e(Eo,M3),e(Eo,Nn),e(Nn,V3),e(Eo,H3),e(ae,B3),e(ae,ne),e(ne,Y3),e(ne,_h),e(_h,Z3),e(ne,J3),e(ne,vh),e(vh,X3),e(ne,K3),e(ne,bh),e(bh,Q3),e(ne,ek),e(ne,yh),e(yh,tk),e(ne,ok),e(ne,wh),e(wh,rk),e(ne,ak),e(ae,nk),e(ae,q),e(q,sk),e(q,Eh),e(Eh,ik),e(q,lk),e(q,Th),e(Th,dk),e(q,ck),e(q,$h),e($h,pk),e(q,mk),e(q,kh),e(kh,hk),e(q,uk),e(q,xh),e(xh,fk),e(q,gk),e(q,Ah),e(Ah,_k),e(q,vk),e(q,Dh),e(Dh,bk),e(q,yk),e(q,qh),e(qh,wk),e(q,Ek),e(q,Ph),e(Ph,Tk),e(q,$k),e(q,Sh),e(Sh,kk),e(q,xk),e(q,Ch),e(Ch,Ak),e(q,Dk),e(q,Oh),e(Oh,qk),e(q,Pk),e(q,Ih),e(Ih,Sk),e(q,Ck),p(t,Gg,c),p(t,To,c),e(To,mr),e(mr,Uh),f(Ln,Uh,null),e(To,Ok),e(To,zh),e(zh,Ik),p(t,jg,c),p(t,pe,c),e(pe,Uk),e(pe,xi),e(xi,zk),e(pe,Nk),e(pe,Nh),e(Nh,Lk),e(pe,Fk),e(pe,Ai),e(Ai,Rk),e(pe,Wk),e(pe,Lh),e(Lh,Gk),e(pe,jk),p(t,Mg,c),p(t,hr,c),e(hr,Mk),e(hr,Di),e(Di,Vk),e(hr,Hk),p(t,Vg,c),p(t,ur,c),e(ur,qi),e(qi,Fh),e(Fh,Bk),e(qi,Yk),e(ur,Zk),e(ur,Pi),e(Pi,Rh),e(Rh,Jk),e(Pi,Xk),p(t,Hg,c),p(t,Ie,c),e(Ie,Kk),e(Ie,Wh),e(Wh,Qk),e(Ie,e7),e(Ie,Gh),e(Gh,t7),e(Ie,o7),e(Ie,Si),e(Si,r7),e(Ie,a7),p(t,Bg,c),p(t,fr,c),e(fr,gr),e(gr,jh),e(jh,n7),e(gr,s7),e(gr,Mh),e(Mh,i7),e(gr,l7),e(fr,d7),e(fr,Ci),e(Ci,Vh),e(Vh,c7),e(Ci,p7),p(t,Yg,c),p(t,$o,c),e($o,_r),e(_r,Hh),f(Fn,Hh,null),e($o,m7),e($o,Bh),e(Bh,h7),p(t,Zg,c),p(t,Ue,c),e(Ue,u7),e(Ue,Oi),e(Oi,f7),e(Ue,g7),e(Ue,Yh),e(Yh,_7),e(Ue,v7),e(Ue,Zh),e(Zh,b7),e(Ue,y7),p(t,Jg,c),p(t,kt,c),e(kt,w7),e(kt,Jh),e(Jh,E7),e(kt,T7),e(kt,Ii),e(Ii,$7),e(kt,k7),p(t,Xg,c),p(t,vr,c),e(vr,Ui),e(Ui,Xh),e(Xh,x7),e(Ui,A7),e(vr,D7),e(vr,zi),e(zi,Kh),e(Kh,q7),e(zi,P7),p(t,Kg,c),p(t,ze,c),e(ze,S7),e(ze,Ni),e(Ni,C7),e(ze,O7),e(ze,Qh),e(Qh,I7),e(ze,U7),e(ze,eu),e(eu,z7),e(ze,N7),p(t,Qg,c),p(t,Q,c),e(Q,L7),e(Q,Li),e(Li,F7),e(Q,R7),e(Q,tu),e(tu,W7),e(Q,G7),e(Q,ou),e(ou,j7),e(Q,M7),e(Q,ru),e(ru,V7),e(Q,H7),e(Q,Fi),e(Fi,B7),e(Q,Y7),p(t,e_,c),p(t,Ri,c),e(Ri,Z7),p(t,t_,c),f(Rn,t,c),p(t,o_,c),p(t,Wi,c),e(Wi,J7),p(t,r_,c),f(Wn,t,c),p(t,a_,c),p(t,Gi,c),e(Gi,X7),p(t,n_,c),f(Gn,t,c),p(t,s_,c),p(t,ji,c),e(ji,K7),p(t,i_,c),p(t,Mi,c),e(Mi,Q7),p(t,l_,c),f(jn,t,c),p(t,d_,c),p(t,br,c),e(br,ex),e(br,au),e(au,tx),e(br,ox),p(t,c_,c),p(t,ko,c),e(ko,yr),e(yr,nu),f(Mn,nu,null),e(ko,rx),e(ko,su),e(su,ax),p(t,p_,c),p(t,me,c),e(me,nx),e(me,Vi),e(Vi,sx),e(me,ix),e(me,iu),e(iu,lx),e(me,dx),e(me,lu),e(lu,cx),e(me,px),e(me,du),e(du,mx),e(me,hx),p(t,m_,c),p(t,xt,c),e(xt,ux),e(xt,Vn),e(Vn,fx),e(xt,gx),e(xt,cu),e(cu,_x),e(xt,vx),p(t,h_,c),p(t,xo,c),e(xo,wr),e(wr,pu),f(Hn,pu,null),e(xo,bx),e(xo,mu),e(mu,yx),p(t,u_,c),p(t,Hi,c),e(Hi,wx),p(t,f_,c),p(t,Er,c),e(Er,Ex),e(Er,Bn),e(Bn,hu),e(hu,Tx),e(Er,$x),p(t,g_,c),f(Yn,t,c),p(t,__,c),p(t,At,c),e(At,kx),e(At,Zn),e(Zn,uu),e(uu,xx),e(At,Ax),e(At,Jn),e(Jn,fu),e(fu,Dx),e(At,qx),p(t,v_,c),f(Xn,t,c),p(t,b_,c),f(Kn,t,c),p(t,y_,c),p(t,Tr,c),e(Tr,Px),e(Tr,Bi),e(Bi,Sx),e(Tr,Cx),p(t,w_,c),p(t,Yi,c),e(Yi,Ox),p(t,E_,c),p(t,Zi,c),e(Zi,Ix),p(t,T_,c),p(t,Ji,c),e(Ji,gu),e(gu,_u),e(_u,Ux),p(t,$_,c),p(t,$r,c),e($r,zx),e($r,vu),e(vu,Nx),e($r,Lx),p(t,k_,c),p(t,Xi,c),e(Xi,Fx),p(t,x_,c),f(Qn,t,c),p(t,A_,c),p(t,Dt,c),e(Dt,Rx),e(Dt,bu),e(bu,Wx),e(Dt,Gx),e(Dt,yu),e(yu,jx),e(Dt,Mx),p(t,D_,c),p(t,Ki,c),e(Ki,Vx),p(t,q_,c),f(es,t,c),p(t,P_,c),p(t,qt,c),e(qt,Hx),e(qt,wu),e(wu,Bx),e(qt,Yx),e(qt,Eu),e(Eu,Zx),e(qt,Jx),p(t,S_,c),p(t,Pt,c),e(Pt,Xx),e(Pt,Tu),e(Tu,Kx),e(Pt,Qx),e(Pt,ts),e(ts,$u),e($u,e6),e(Pt,t6),p(t,C_,c),f(os,t,c),p(t,O_,c),p(t,Qi,c),e(Qi,o6),p(t,I_,c),f(rs,t,c),p(t,U_,c),p(t,el,c),e(el,r6),p(t,z_,c),f(as,t,c),p(t,N_,c),p(t,tl,c),e(tl,a6),p(t,L_,c),p(t,ol,c),e(ol,ku),e(ku,xu),e(xu,n6),p(t,F_,c),p(t,kr,c),e(kr,s6),e(kr,Au),e(Au,i6),e(kr,l6),p(t,R_,c),p(t,rl,c),e(rl,ns),e(ns,d6),e(ns,Du),e(Du,c6),e(ns,p6),p(t,W_,c),f(ss,t,c),p(t,G_,c),p(t,is,c),e(is,qu),e(qu,m6),p(t,j_,c),f(ls,t,c),p(t,M_,c),p(t,St,c),e(St,h6),e(St,Pu),e(Pu,u6),e(St,f6),e(St,Su),e(Su,g6),e(St,_6),p(t,V_,c),p(t,al,c),e(al,v6),p(t,H_,c),f(ds,t,c),p(t,B_,c),p(t,nl,c),e(nl,b6),p(t,Y_,c),p(t,xr,c),e(xr,y6),e(xr,Cu),e(Cu,w6),e(xr,E6),p(t,Z_,c),p(t,Ao,c),e(Ao,Ar),e(Ar,Ou),f(cs,Ou,null),e(Ao,T6),e(Ao,Iu),e(Iu,$6),p(t,J_,c),p(t,Dr,c),e(Dr,k6),e(Dr,sl),e(sl,x6),e(Dr,A6),p(t,X_,c),p(t,Ne,c),e(Ne,D6),e(Ne,ps),e(ps,q6),e(Ne,P6),e(Ne,ms),e(ms,S6),e(Ne,C6),e(Ne,hs),e(hs,O6),e(Ne,I6),p(t,K_,c),p(t,il,c),e(il,U6),p(t,Q_,c),p(t,ll,c),p(t,ev,c),p(t,Do,c),e(Do,qr),e(qr,Uu),f(us,Uu,null),e(Do,z6),e(Do,zu),e(zu,N6),p(t,tv,c),p(t,dl,c),e(dl,L6),p(t,ov,c),p(t,Ct,c),e(Ct,F6),e(Ct,fs),e(fs,R6),e(Ct,W6),e(Ct,gs),e(gs,G6),e(Ct,j6),p(t,rv,c),p(t,cl,c),e(cl,M6),p(t,av,c),f(_s,t,c),p(t,nv,c),p(t,pl,c),e(pl,V6),p(t,sv,c),p(t,Ot,c),e(Ot,H6),e(Ot,Nu),e(Nu,B6),e(Ot,Y6),e(Ot,Lu),e(Lu,Z6),e(Ot,J6),p(t,iv,c),p(t,qo,c),e(qo,Pr),e(Pr,Fu),f(vs,Fu,null),e(qo,X6),e(qo,Ru),e(Ru,K6),p(t,lv,c),p(t,ml,c),e(ml,Q6),p(t,dv,c),p(t,Le,c),e(Le,eA),e(Le,Wu),e(Wu,tA),e(Le,oA),e(Le,Gu),e(Gu,rA),e(Le,aA),e(Le,ju),e(ju,nA),e(Le,sA),p(t,cv,c),p(t,It,c),e(It,iA),e(It,Mu),e(Mu,lA),e(It,dA),e(It,Vu),e(Vu,cA),e(It,pA),p(t,pv,c),f(bs,t,c),p(t,mv,c),p(t,Sr,c),e(Sr,mA),e(Sr,ys),e(ys,hA),e(Sr,uA),p(t,hv,c),p(t,Po,c),e(Po,Cr),e(Cr,Hu),f(ws,Hu,null),e(Po,fA),e(Po,Bu),e(Bu,gA),p(t,uv,c),p(t,hl,c),e(hl,_A),p(t,fv,c),f(Es,t,c),p(t,gv,c),p(t,Ut,c),e(Ut,vA),e(Ut,Yu),e(Yu,bA),e(Ut,yA),e(Ut,Zu),e(Zu,wA),e(Ut,EA),p(t,_v,c),p(t,ul,c),e(ul,TA),p(t,vv,c),f(Ts,t,c),p(t,bv,c),p(t,fl,c),e(fl,$A),p(t,yv,c),p(t,Or,c),e(Or,kA),e(Or,Ju),e(Ju,xA),e(Or,AA),p(t,wv,c),p(t,tt,c),e(tt,Xu),e(Xu,DA),e(tt,qA),e(tt,Ku),e(Ku,PA),e(tt,SA),e(tt,Qu),e(Qu,CA),e(tt,OA),p(t,Ev,c),p(t,gl,c),e(gl,IA),p(t,Tv,c),f($s,t,c),p(t,$v,c),p(t,_l,c),e(_l,UA),p(t,kv,c),p(t,Fe,c),e(Fe,zA),e(Fe,ef),e(ef,NA),e(Fe,LA),e(Fe,tf),e(tf,FA),e(Fe,RA),e(Fe,of),e(of,WA),e(Fe,GA),p(t,xv,c),p(t,So,c),e(So,Ir),e(Ir,rf),f(ks,rf,null),e(So,jA),e(So,af),e(af,MA),p(t,Av,c),p(t,zt,c),e(zt,VA),e(zt,nf),e(nf,HA),e(zt,BA),e(zt,sf),e(sf,YA),e(zt,ZA),p(t,Dv,c),p(t,vl,c),e(vl,JA),p(t,qv,c),p(t,bl,c),e(bl,XA),p(t,Pv,c),p(t,Ur,c),e(Ur,KA),e(Ur,lf),e(lf,QA),e(Ur,e9),p(t,Sv,c),f(xs,t,c),p(t,Cv,c),p(t,j,c),e(j,t9),e(j,df),e(df,o9),e(j,r9),e(j,cf),e(cf,a9),e(j,n9),e(j,pf),e(pf,s9),e(j,i9),e(j,mf),e(mf,l9),e(j,d9),e(j,hf),e(hf,c9),e(j,p9),e(j,uf),e(uf,m9),e(j,h9),p(t,Ov,c),p(t,yl,c),e(yl,u9),p(t,Iv,c),p(t,Co,c),e(Co,zr),e(zr,ff),f(As,ff,null),e(Co,f9),e(Co,gf),e(gf,g9),p(t,Uv,c),p(t,Re,c),e(Re,_9),e(Re,Ds),e(Ds,v9),e(Re,b9),e(Re,wl),e(wl,y9),e(Re,w9),e(Re,qs),e(qs,E9),e(Re,T9),p(t,zv,c),p(t,We,c),e(We,_f),e(_f,$9),e(We,k9),e(We,vf),e(vf,x9),e(We,A9),e(We,bf),e(bf,D9),e(We,q9),e(We,yf),e(yf,P9),p(t,Nv,c),p(t,El,c),e(El,S9),p(t,Lv,c),p(t,Ps,c),e(Ps,wf),e(wf,C9),e(Ps,O9),p(t,Fv,c),p(t,Tl,c),e(Tl,I9),p(t,Rv,c),f(Ss,t,c),p(t,Wv,c),p(t,Nt,c),e(Nt,U9),e(Nt,Ef),e(Ef,z9),e(Nt,N9),e(Nt,Tf),e(Tf,L9),e(Nt,F9),p(t,Gv,c),f(Cs,t,c),p(t,jv,c),p(t,Lt,c),e(Lt,R9),e(Lt,$f),e($f,W9),e(Lt,G9),e(Lt,Os),e(Os,j9),e(Lt,M9),p(t,Mv,c),p(t,Nr,c),e(Nr,V9),e(Nr,$l),e($l,H9),e(Nr,B9),p(t,Vv,c),p(t,kl,c),e(kl,Y9),p(t,Hv,c),p(t,Is,c),e(Is,kf),e(kf,Z9),e(Is,J9),p(t,Bv,c),f(Us,t,c),p(t,Yv,c),p(t,xl,c),e(xl,X9),p(t,Zv,c),f(zs,t,c),p(t,Jv,c),p(t,Ns,c),e(Ns,xf),e(xf,K9),e(Ns,Q9),p(t,Xv,c),f(Ls,t,c),p(t,Kv,c),p(t,Al,c),e(Al,e8),p(t,Qv,c),f(Fs,t,c),p(t,e1,c),p(t,Dl,c),e(Dl,t8),p(t,t1,c),p(t,Lr,c),e(Lr,o8),e(Lr,Rs),e(Rs,r8),e(Lr,a8),p(t,o1,c),p(t,Ws,c),e(Ws,Af),e(Af,n8),e(Ws,s8),p(t,r1,c),p(t,Ft,c),e(Ft,i8),e(Ft,Df),e(Df,l8),e(Ft,d8),e(Ft,qf),e(qf,c8),e(Ft,p8),p(t,a1,c),p(t,Fr,c),e(Fr,m8),e(Fr,Pf),e(Pf,h8),e(Fr,u8),p(t,n1,c),f(Gs,t,c),p(t,s1,c),p(t,ql,c),e(ql,f8),p(t,i1,c),p(t,Ge,c),e(Ge,Sf),e(Sf,g8),e(Ge,_8),e(Ge,Cf),e(Cf,v8),e(Ge,b8),e(Ge,js),e(js,y8),e(js,Of),e(Of,w8),e(js,E8),e(Ge,T8),e(Ge,Ms),e(Ms,$8),e(Ms,If),e(If,k8),e(Ms,x8),p(t,l1,c),p(t,Vs,c),e(Vs,ot),e(ot,A8),e(ot,Uf),e(Uf,D8),e(ot,q8),e(ot,zf),e(zf,P8),e(ot,S8),e(ot,Nf),e(Nf,C8),e(ot,O8),p(t,d1,c),p(t,Rr,c),e(Rr,I8),e(Rr,Lf),e(Lf,U8),e(Rr,z8),p(t,c1,c),f(Hs,t,c),p(t,p1,c),p(t,Oo,c),e(Oo,Ff),e(Ff,N8),e(Oo,L8),e(Oo,Rf),e(Rf,F8),e(Oo,R8),p(t,m1,c),p(t,Rt,c),e(Rt,W8),e(Rt,Wf),e(Wf,G8),e(Rt,j8),e(Rt,Gf),e(Gf,M8),e(Rt,V8),p(t,h1,c),p(t,Pl,c),e(Pl,H8),p(t,u1,c),p(t,he,c),e(he,jf),e(jf,B8),e(he,Y8),e(he,Mf),e(Mf,Z8),e(he,J8),e(he,Bs),e(Bs,X8),e(Bs,Vf),e(Vf,K8),e(Bs,Q8),e(he,eD),e(he,Io),e(Io,tD),e(Io,Hf),e(Hf,oD),e(Io,rD),e(Io,Bf),e(Bf,aD),e(Io,nD),e(he,sD),e(he,Yf),e(Yf,iD),p(t,f1,c),p(t,Sl,c),e(Sl,lD),p(t,g1,c),p(t,Wr,c),e(Wr,Uo),e(Uo,dD),e(Uo,Zf),e(Zf,cD),e(Uo,pD),e(Uo,Jf),e(Jf,mD),e(Uo,hD),e(Wr,uD),e(Wr,ke),e(ke,fD),e(ke,Xf),e(Xf,gD),e(ke,_D),e(ke,Kf),e(Kf,vD),e(ke,bD),e(ke,Qf),e(Qf,yD),e(ke,wD),e(ke,eg),e(eg,ED),e(ke,TD),p(t,_1,c),p(t,Cl,c),e(Cl,$D),p(t,v1,c),p(t,y,c),e(y,kD),e(y,Ol),e(Ol,xD),e(y,tg),e(y,AD),e(y,Il),e(Il,DD),e(y,og),e(y,qD),e(y,Ul),e(Ul,PD),e(y,rg),e(y,SD),e(y,zl),e(zl,CD),e(y,ag),e(y,OD),e(y,Nl),e(Nl,ID),e(y,ng),e(y,UD),e(y,Ll),e(Ll,zD),e(y,sg),e(y,ND),e(y,Fl),e(Fl,LD),e(y,ig),e(y,FD),e(y,Rl),e(Rl,RD),e(y,lg),e(y,WD),e(y,Wl),e(Wl,GD),e(y,dg),e(y,jD),e(y,Gl),e(Gl,MD),e(y,cg),e(y,VD),e(y,jl),e(jl,HD),e(y,pg),e(y,BD),e(y,Ml),e(Ml,YD),e(y,mg),e(y,ZD),e(y,Vl),e(Vl,JD),e(y,hg),e(y,XD),e(y,Hl),e(Hl,KD),e(y,ug),e(y,QD),e(y,Bl),e(Bl,eq),e(y,fg),e(y,tq),e(y,Yl),e(Yl,oq),e(y,gg),e(y,rq),e(y,Zl),e(Zl,aq),e(y,_g),e(y,nq),e(y,Jl),e(Jl,sq),e(y,vg),e(y,iq),e(y,Xl),e(Xl,lq),e(y,bg),e(y,dq),e(y,Kl),e(Kl,cq),e(y,yg),e(y,pq),e(y,Ql),e(Ql,mq),e(y,wg),e(y,hq),e(y,ed),e(ed,uq),e(y,Eg),e(y,fq),e(y,td),e(td,gq),e(y,Tg),e(y,_q),b1=!0},p(t,[c]){const Ys={};c&2&&(Ys.$$scope={dirty:c,ctx:t}),Ro.$set(Ys);const $g={};c&2&&($g.$$scope={dirty:c,ctx:t}),Zo.$set($g);const kg={};c&2&&(kg.$$scope={dirty:c,ctx:t}),er.$set(kg);const xg={};c&2&&(xg.$$scope={dirty:c,ctx:t}),nr.$set(xg)},i(t){b1||(g(R.$$.fragment,t),g(Ro.$$.fragment,t),g(pa.$$.fragment,t),g(ma.$$.fragment,t),g(ha.$$.fragment,t),g(ua.$$.fragment,t),g(ga.$$.fragment,t),g(va.$$.fragment,t),g(ba.$$.fragment,t),g(wa.$$.fragment,t),g(Ea.$$.fragment,t),g(Ta.$$.fragment,t),g(ka.$$.fragment,t),g(xa.$$.fragment,t),g(Da.$$.fragment,t),g(Pa.$$.fragment,t),g(Sa.$$.fragment,t),g(Oa.$$.fragment,t),g(Ua.$$.fragment,t),g(Zo.$$.fragment,t),g(za.$$.fragment,t),g(La.$$.fragment,t),g(Fa.$$.fragment,t),g(Wa.$$.fragment,t),g(ja.$$.fragment,t),g(Ma.$$.fragment,t),g(Ba.$$.fragment,t),g(Ya.$$.fragment,t),g(Ja.$$.fragment,t),g(Qa.$$.fragment,t),g(er.$$.fragment,t),g(on.$$.fragment,t),g(rn.$$.fragment,t),g(an.$$.fragment,t),g(nn.$$.fragment,t),g(ln.$$.fragment,t),g(pn.$$.fragment,t),g(hn.$$.fragment,t),g(un.$$.fragment,t),g(fn.$$.fragment,t),g(gn.$$.fragment,t),g(_n.$$.fragment,t),g(bn.$$.fragment,t),g(nr.$$.fragment,t),g(En.$$.fragment,t),g(Tn.$$.fragment,t),g(xn.$$.fragment,t),g(Dn.$$.fragment,t),g(qn.$$.fragment,t),g(Pn.$$.fragment,t),g(Cn.$$.fragment,t),g(On.$$.fragment,t),g(In.$$.fragment,t),g(Un.$$.fragment,t),g(Ln.$$.fragment,t),g(Fn.$$.fragment,t),g(Rn.$$.fragment,t),g(Wn.$$.fragment,t),g(Gn.$$.fragment,t),g(jn.$$.fragment,t),g(Mn.$$.fragment,t),g(Hn.$$.fragment,t),g(Yn.$$.fragment,t),g(Xn.$$.fragment,t),g(Kn.$$.fragment,t),g(Qn.$$.fragment,t),g(es.$$.fragment,t),g(os.$$.fragment,t),g(rs.$$.fragment,t),g(as.$$.fragment,t),g(ss.$$.fragment,t),g(ls.$$.fragment,t),g(ds.$$.fragment,t),g(cs.$$.fragment,t),g(us.$$.fragment,t),g(_s.$$.fragment,t),g(vs.$$.fragment,t),g(bs.$$.fragment,t),g(ws.$$.fragment,t),g(Es.$$.fragment,t),g(Ts.$$.fragment,t),g($s.$$.fragment,t),g(ks.$$.fragment,t),g(xs.$$.fragment,t),g(As.$$.fragment,t),g(Ss.$$.fragment,t),g(Cs.$$.fragment,t),g(Us.$$.fragment,t),g(zs.$$.fragment,t),g(Ls.$$.fragment,t),g(Fs.$$.fragment,t),g(Gs.$$.fragment,t),g(Hs.$$.fragment,t),b1=!0)},o(t){_(R.$$.fragment,t),_(Ro.$$.fragment,t),_(pa.$$.fragment,t),_(ma.$$.fragment,t),_(ha.$$.fragment,t),_(ua.$$.fragment,t),_(ga.$$.fragment,t),_(va.$$.fragment,t),_(ba.$$.fragment,t),_(wa.$$.fragment,t),_(Ea.$$.fragment,t),_(Ta.$$.fragment,t),_(ka.$$.fragment,t),_(xa.$$.fragment,t),_(Da.$$.fragment,t),_(Pa.$$.fragment,t),_(Sa.$$.fragment,t),_(Oa.$$.fragment,t),_(Ua.$$.fragment,t),_(Zo.$$.fragment,t),_(za.$$.fragment,t),_(La.$$.fragment,t),_(Fa.$$.fragment,t),_(Wa.$$.fragment,t),_(ja.$$.fragment,t),_(Ma.$$.fragment,t),_(Ba.$$.fragment,t),_(Ya.$$.fragment,t),_(Ja.$$.fragment,t),_(Qa.$$.fragment,t),_(er.$$.fragment,t),_(on.$$.fragment,t),_(rn.$$.fragment,t),_(an.$$.fragment,t),_(nn.$$.fragment,t),_(ln.$$.fragment,t),_(pn.$$.fragment,t),_(hn.$$.fragment,t),_(un.$$.fragment,t),_(fn.$$.fragment,t),_(gn.$$.fragment,t),_(_n.$$.fragment,t),_(bn.$$.fragment,t),_(nr.$$.fragment,t),_(En.$$.fragment,t),_(Tn.$$.fragment,t),_(xn.$$.fragment,t),_(Dn.$$.fragment,t),_(qn.$$.fragment,t),_(Pn.$$.fragment,t),_(Cn.$$.fragment,t),_(On.$$.fragment,t),_(In.$$.fragment,t),_(Un.$$.fragment,t),_(Ln.$$.fragment,t),_(Fn.$$.fragment,t),_(Rn.$$.fragment,t),_(Wn.$$.fragment,t),_(Gn.$$.fragment,t),_(jn.$$.fragment,t),_(Mn.$$.fragment,t),_(Hn.$$.fragment,t),_(Yn.$$.fragment,t),_(Xn.$$.fragment,t),_(Kn.$$.fragment,t),_(Qn.$$.fragment,t),_(es.$$.fragment,t),_(os.$$.fragment,t),_(rs.$$.fragment,t),_(as.$$.fragment,t),_(ss.$$.fragment,t),_(ls.$$.fragment,t),_(ds.$$.fragment,t),_(cs.$$.fragment,t),_(us.$$.fragment,t),_(_s.$$.fragment,t),_(vs.$$.fragment,t),_(bs.$$.fragment,t),_(ws.$$.fragment,t),_(Es.$$.fragment,t),_(Ts.$$.fragment,t),_($s.$$.fragment,t),_(ks.$$.fragment,t),_(xs.$$.fragment,t),_(As.$$.fragment,t),_(Ss.$$.fragment,t),_(Cs.$$.fragment,t),_(Us.$$.fragment,t),_(zs.$$.fragment,t),_(Ls.$$.fragment,t),_(Fs.$$.fragment,t),_(Gs.$$.fragment,t),_(Hs.$$.fragment,t),b1=!1},d(t){o(T),t&&o(L),t&&o(x),v(R),t&&o(ee),t&&o(G),t&&o(z),t&&o(O),t&&o(Je),t&&o(Ae),t&&o(Z),t&&o(H),t&&o(Xt),t&&o(D),t&&o(Pg),v(Ro,t),t&&o(Sg),t&&o(Wo),t&&o(Cg),v(pa,t),t&&o(Og),t&&o(it),t&&o(Ig),t&&o(Kt),v(ma),t&&o(Ug),t&&o(b),v(ha),v(ua),v(ga),v(va),v(ba),v(wa),v(Ea),v(Ta),v(ka),v(xa),v(Da),v(Pa),v(Sa),v(Oa),v(Ua),v(Zo),v(za),v(La),v(Fa),v(Wa),v(ja),v(Ma),v(Ba),v(Ya),v(Ja),v(Qa),v(er),v(on),v(rn),v(an),v(nn),v(ln),v(pn),v(hn),v(un),v(fn),t&&o(zg),t&&o(co),v(gn),t&&o(Ng),t&&o(po),v(_n),v(bn),v(nr),t&&o(Lg),t&&o(go),v(En),t&&o(Fg),t&&o(N),v(Tn),v(xn),v(Dn),v(qn),v(Pn),v(Cn),v(On),t&&o(Rg),t&&o(wo),v(In),t&&o(Wg),t&&o(ae),v(Un),t&&o(Gg),t&&o(To),v(Ln),t&&o(jg),t&&o(pe),t&&o(Mg),t&&o(hr),t&&o(Vg),t&&o(ur),t&&o(Hg),t&&o(Ie),t&&o(Bg),t&&o(fr),t&&o(Yg),t&&o($o),v(Fn),t&&o(Zg),t&&o(Ue),t&&o(Jg),t&&o(kt),t&&o(Xg),t&&o(vr),t&&o(Kg),t&&o(ze),t&&o(Qg),t&&o(Q),t&&o(e_),t&&o(Ri),t&&o(t_),v(Rn,t),t&&o(o_),t&&o(Wi),t&&o(r_),v(Wn,t),t&&o(a_),t&&o(Gi),t&&o(n_),v(Gn,t),t&&o(s_),t&&o(ji),t&&o(i_),t&&o(Mi),t&&o(l_),v(jn,t),t&&o(d_),t&&o(br),t&&o(c_),t&&o(ko),v(Mn),t&&o(p_),t&&o(me),t&&o(m_),t&&o(xt),t&&o(h_),t&&o(xo),v(Hn),t&&o(u_),t&&o(Hi),t&&o(f_),t&&o(Er),t&&o(g_),v(Yn,t),t&&o(__),t&&o(At),t&&o(v_),v(Xn,t),t&&o(b_),v(Kn,t),t&&o(y_),t&&o(Tr),t&&o(w_),t&&o(Yi),t&&o(E_),t&&o(Zi),t&&o(T_),t&&o(Ji),t&&o($_),t&&o($r),t&&o(k_),t&&o(Xi),t&&o(x_),v(Qn,t),t&&o(A_),t&&o(Dt),t&&o(D_),t&&o(Ki),t&&o(q_),v(es,t),t&&o(P_),t&&o(qt),t&&o(S_),t&&o(Pt),t&&o(C_),v(os,t),t&&o(O_),t&&o(Qi),t&&o(I_),v(rs,t),t&&o(U_),t&&o(el),t&&o(z_),v(as,t),t&&o(N_),t&&o(tl),t&&o(L_),t&&o(ol),t&&o(F_),t&&o(kr),t&&o(R_),t&&o(rl),t&&o(W_),v(ss,t),t&&o(G_),t&&o(is),t&&o(j_),v(ls,t),t&&o(M_),t&&o(St),t&&o(V_),t&&o(al),t&&o(H_),v(ds,t),t&&o(B_),t&&o(nl),t&&o(Y_),t&&o(xr),t&&o(Z_),t&&o(Ao),v(cs),t&&o(J_),t&&o(Dr),t&&o(X_),t&&o(Ne),t&&o(K_),t&&o(il),t&&o(Q_),t&&o(ll),t&&o(ev),t&&o(Do),v(us),t&&o(tv),t&&o(dl),t&&o(ov),t&&o(Ct),t&&o(rv),t&&o(cl),t&&o(av),v(_s,t),t&&o(nv),t&&o(pl),t&&o(sv),t&&o(Ot),t&&o(iv),t&&o(qo),v(vs),t&&o(lv),t&&o(ml),t&&o(dv),t&&o(Le),t&&o(cv),t&&o(It),t&&o(pv),v(bs,t),t&&o(mv),t&&o(Sr),t&&o(hv),t&&o(Po),v(ws),t&&o(uv),t&&o(hl),t&&o(fv),v(Es,t),t&&o(gv),t&&o(Ut),t&&o(_v),t&&o(ul),t&&o(vv),v(Ts,t),t&&o(bv),t&&o(fl),t&&o(yv),t&&o(Or),t&&o(wv),t&&o(tt),t&&o(Ev),t&&o(gl),t&&o(Tv),v($s,t),t&&o($v),t&&o(_l),t&&o(kv),t&&o(Fe),t&&o(xv),t&&o(So),v(ks),t&&o(Av),t&&o(zt),t&&o(Dv),t&&o(vl),t&&o(qv),t&&o(bl),t&&o(Pv),t&&o(Ur),t&&o(Sv),v(xs,t),t&&o(Cv),t&&o(j),t&&o(Ov),t&&o(yl),t&&o(Iv),t&&o(Co),v(As),t&&o(Uv),t&&o(Re),t&&o(zv),t&&o(We),t&&o(Nv),t&&o(El),t&&o(Lv),t&&o(Ps),t&&o(Fv),t&&o(Tl),t&&o(Rv),v(Ss,t),t&&o(Wv),t&&o(Nt),t&&o(Gv),v(Cs,t),t&&o(jv),t&&o(Lt),t&&o(Mv),t&&o(Nr),t&&o(Vv),t&&o(kl),t&&o(Hv),t&&o(Is),t&&o(Bv),v(Us,t),t&&o(Yv),t&&o(xl),t&&o(Zv),v(zs,t),t&&o(Jv),t&&o(Ns),t&&o(Xv),v(Ls,t),t&&o(Kv),t&&o(Al),t&&o(Qv),v(Fs,t),t&&o(e1),t&&o(Dl),t&&o(t1),t&&o(Lr),t&&o(o1),t&&o(Ws),t&&o(r1),t&&o(Ft),t&&o(a1),t&&o(Fr),t&&o(n1),v(Gs,t),t&&o(s1),t&&o(ql),t&&o(i1),t&&o(Ge),t&&o(l1),t&&o(Vs),t&&o(d1),t&&o(Rr),t&&o(c1),v(Hs,t),t&&o(p1),t&&o(Oo),t&&o(m1),t&&o(Rt),t&&o(h1),t&&o(Pl),t&&o(u1),t&&o(he),t&&o(f1),t&&o(Sl),t&&o(g1),t&&o(Wr),t&&o(_1),t&&o(Cl),t&&o(v1),t&&o(y)}}}const hL={local:"trainer",sections:[{local:"transformers.Trainer",title:"Trainer"},{local:"transformers.Seq2SeqTrainer",title:"Seq2SeqTrainer"},{local:"transformers.TrainingArguments",title:"TrainingArguments"},{local:"transformers.Seq2SeqTrainingArguments",title:"Seq2SeqTrainingArguments"},{local:"checkpoints",title:"Checkpoints"},{local:"logging",title:"Logging"},{local:"randomness",title:"Randomness"},{local:"specific-gpus-selection",title:"Specific GPUs Selection"},{local:"trainer-integrations",sections:[{local:"cuda-extension-installation-notes",sections:[{local:"possible-problem-1",title:"Possible problem #1"},{local:"possible-problem-2",title:"Possible problem #2"},{local:"possible-problem-3",title:"Possible problem #3"}],title:"CUDA Extension Installation Notes"},{local:"fairscale",title:"FairScale"}],title:"Trainer Integrations"}],title:"Trainer"};function uL(Ye,T,L){let{fw:x}=T;return Ye.$$set=S=>{"fw"in S&&L(0,x=S.fw)},[x]}class wL extends aL{constructor(T){super();nL(this,T,uL,mL,sL,{fw:0})}}export{wL as default,hL as metadata};
