import{S as KEt,i as ZEt,s as e5t,e as a,k as l,w as f,t as o,M as o5t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as r5t}from"../../chunks/vendor-6b77c823.js";import{T as uPr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function t5t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,AE,Nf,xe,co,Di,On,yE,Vn,Xn,LE,Gi,zn,xE,Oi,jf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),AE=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),On=o("NewModel"),yE=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),LE=o(`, make sure its
`),Gi=a("code"),zn=o("config_class"),xE=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var b7=s(ce);Ce=r(b7,"NewModelConfig"),b7.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Vi=s(he);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var v7=s(qi);qf=r(v7,"model_type"),v7.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var F7=s(Ni);ji=r(F7,'"new-model"'),F7.forEach(t),AE=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);On=r(Ga,"NewModel"),Ga.forEach(t),yE=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var T7=s(Vn);Xn=r(T7,"PreTrainedModel"),T7.forEach(t),LE=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);zn=r(Df,"config_class"),Df.forEach(t),xE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var M7=s(Oi);jf=r(M7,"NewModelConfig"),M7.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,qi),e(qi,qf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,AE),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,Di),e(Di,On),e(xe,yE),e(xe,Vn),e(Vn,Xn),e(xe,LE),e(xe,Gi),e(Gi,zn),e(xe,xE),e(xe,Oi),e(Oi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function a5t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function n5t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function s5t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,AE,Nf,xe,co,Di,On,yE,Vn,Xn,LE,Gi,zn,xE,Oi,jf,Da,fo,ue,b7,Vi,v7,F7,zo,Ga,T7,Df,M7,IIe,ERe,Xi,Gf,nY,kE,qIe,sY,NIe,CRe,Qn,jIe,lY,DIe,GIe,iY,OIe,VIe,wRe,SE,ARe,E7,XIe,yRe,Of,LRe,zi,Vf,dY,RE,zIe,cY,QIe,xRe,Qo,BE,WIe,PE,HIe,C7,UIe,JIe,YIe,$E,KIe,fY,ZIe,eqe,oqe,mo,IE,rqe,mY,tqe,aqe,Qi,nqe,gY,sqe,lqe,hY,iqe,dqe,cqe,v,Xf,pY,fqe,mqe,w7,gqe,hqe,pqe,zf,_Y,_qe,uqe,A7,bqe,vqe,Fqe,Qf,uY,Tqe,Mqe,y7,Eqe,Cqe,wqe,Wf,bY,Aqe,yqe,L7,Lqe,xqe,kqe,Hf,vY,Sqe,Rqe,x7,Bqe,Pqe,$qe,Uf,FY,Iqe,qqe,k7,Nqe,jqe,Dqe,Jf,TY,Gqe,Oqe,S7,Vqe,Xqe,zqe,Yf,MY,Qqe,Wqe,R7,Hqe,Uqe,Jqe,Kf,EY,Yqe,Kqe,B7,Zqe,eNe,oNe,Zf,CY,rNe,tNe,P7,aNe,nNe,sNe,em,wY,lNe,iNe,$7,dNe,cNe,fNe,om,AY,mNe,gNe,I7,hNe,pNe,_Ne,rm,yY,uNe,bNe,q7,vNe,FNe,TNe,tm,LY,MNe,ENe,N7,CNe,wNe,ANe,am,xY,yNe,LNe,j7,xNe,kNe,SNe,nm,kY,RNe,BNe,D7,PNe,$Ne,INe,sm,SY,qNe,NNe,G7,jNe,DNe,GNe,lm,RY,ONe,VNe,O7,XNe,zNe,QNe,im,BY,WNe,HNe,V7,UNe,JNe,YNe,dm,PY,KNe,ZNe,X7,eje,oje,rje,cm,$Y,tje,aje,z7,nje,sje,lje,fm,IY,ije,dje,Q7,cje,fje,mje,mm,qY,gje,hje,W7,pje,_je,uje,gm,NY,bje,vje,H7,Fje,Tje,Mje,hm,jY,Eje,Cje,U7,wje,Aje,yje,pm,DY,Lje,xje,J7,kje,Sje,Rje,_m,GY,Bje,Pje,Y7,$je,Ije,qje,um,OY,Nje,jje,K7,Dje,Gje,Oje,bm,VY,Vje,Xje,Z7,zje,Qje,Wje,vm,XY,Hje,Uje,ex,Jje,Yje,Kje,Fm,zY,Zje,eDe,ox,oDe,rDe,tDe,Tm,QY,aDe,nDe,rx,sDe,lDe,iDe,Mm,WY,dDe,cDe,tx,fDe,mDe,gDe,Em,HY,hDe,pDe,ax,_De,uDe,bDe,Cm,UY,vDe,FDe,nx,TDe,MDe,EDe,wm,JY,CDe,wDe,sx,ADe,yDe,LDe,Am,YY,xDe,kDe,lx,SDe,RDe,BDe,ym,KY,PDe,$De,ix,IDe,qDe,NDe,Lm,ZY,jDe,DDe,dx,GDe,ODe,VDe,xm,eK,XDe,zDe,cx,QDe,WDe,HDe,km,oK,UDe,JDe,fx,YDe,KDe,ZDe,Sm,rK,eGe,oGe,mx,rGe,tGe,aGe,Rm,tK,nGe,sGe,gx,lGe,iGe,dGe,Bm,aK,cGe,fGe,hx,mGe,gGe,hGe,Pm,nK,pGe,_Ge,px,uGe,bGe,vGe,$m,sK,FGe,TGe,_x,MGe,EGe,CGe,Im,lK,wGe,AGe,ux,yGe,LGe,xGe,qm,iK,kGe,SGe,bx,RGe,BGe,PGe,Nm,dK,$Ge,IGe,vx,qGe,NGe,jGe,jm,cK,DGe,GGe,Fx,OGe,VGe,XGe,Dm,fK,zGe,QGe,Tx,WGe,HGe,UGe,Gm,mK,JGe,YGe,Mx,KGe,ZGe,eOe,Om,gK,oOe,rOe,Ex,tOe,aOe,nOe,Vm,hK,sOe,lOe,Cx,iOe,dOe,cOe,Xm,pK,fOe,mOe,wx,gOe,hOe,pOe,zm,_K,_Oe,uOe,Ax,bOe,vOe,FOe,Qm,uK,TOe,MOe,yx,EOe,COe,wOe,Wm,bK,AOe,yOe,Lx,LOe,xOe,kOe,Hm,vK,SOe,ROe,xx,BOe,POe,$Oe,Um,FK,IOe,qOe,kx,NOe,jOe,DOe,Jm,TK,GOe,OOe,Sx,VOe,XOe,zOe,Ym,MK,QOe,WOe,Rx,HOe,UOe,JOe,Km,EK,YOe,KOe,Bx,ZOe,eVe,oVe,Zm,CK,rVe,tVe,Px,aVe,nVe,sVe,eg,wK,lVe,iVe,$x,dVe,cVe,fVe,og,AK,mVe,gVe,Ix,hVe,pVe,_Ve,rg,yK,uVe,bVe,qx,vVe,FVe,TVe,tg,LK,MVe,EVe,Nx,CVe,wVe,AVe,ag,xK,yVe,LVe,jx,xVe,kVe,SVe,ng,kK,RVe,BVe,Dx,PVe,$Ve,IVe,sg,SK,qVe,NVe,Gx,jVe,DVe,GVe,lg,RK,OVe,VVe,Ox,XVe,zVe,QVe,ig,BK,WVe,HVe,Vx,UVe,JVe,YVe,dg,PK,KVe,ZVe,Xx,eXe,oXe,rXe,cg,$K,tXe,aXe,zx,nXe,sXe,lXe,fg,IK,iXe,dXe,Qx,cXe,fXe,mXe,mg,qK,gXe,hXe,Wx,pXe,_Xe,uXe,gg,NK,bXe,vXe,Hx,FXe,TXe,MXe,hg,jK,EXe,CXe,Ux,wXe,AXe,yXe,pg,DK,LXe,xXe,Jx,kXe,SXe,RXe,_g,GK,BXe,PXe,Yx,$Xe,IXe,qXe,ug,OK,NXe,jXe,Kx,DXe,GXe,OXe,bg,VK,VXe,XXe,Zx,zXe,QXe,WXe,vg,XK,HXe,UXe,ek,JXe,YXe,KXe,Fg,zK,ZXe,eze,ok,oze,rze,tze,Tg,QK,aze,nze,rk,sze,lze,ize,Mg,WK,dze,cze,tk,fze,mze,gze,Eg,HK,hze,pze,ak,_ze,uze,bze,Cg,UK,vze,Fze,nk,Tze,Mze,Eze,wg,JK,Cze,wze,sk,Aze,yze,Lze,Ag,YK,xze,kze,lk,Sze,Rze,Bze,yg,KK,Pze,$ze,ik,Ize,qze,Nze,Lg,ZK,jze,Dze,dk,Gze,Oze,Vze,xg,eZ,Xze,zze,ck,Qze,Wze,Hze,kg,oZ,Uze,Jze,fk,Yze,Kze,Zze,Sg,rZ,eQe,oQe,mk,rQe,tQe,aQe,Rg,tZ,nQe,sQe,gk,lQe,iQe,dQe,Bg,aZ,cQe,fQe,hk,mQe,gQe,hQe,Pg,nZ,pQe,_Qe,pk,uQe,bQe,vQe,$g,sZ,FQe,TQe,_k,MQe,EQe,CQe,Ig,lZ,wQe,AQe,uk,yQe,LQe,xQe,qg,iZ,kQe,SQe,bk,RQe,BQe,PQe,dZ,$Qe,IQe,qE,qQe,Ng,NE,NQe,cZ,jQe,kRe,Wi,jg,fZ,jE,DQe,mZ,GQe,SRe,Wo,DE,OQe,GE,VQe,vk,XQe,zQe,QQe,OE,WQe,gZ,HQe,UQe,JQe,go,VE,YQe,hZ,KQe,ZQe,Oa,eWe,pZ,oWe,rWe,_Z,tWe,aWe,uZ,nWe,sWe,lWe,E,Wn,bZ,iWe,dWe,Fk,cWe,fWe,Tk,mWe,gWe,hWe,Hn,vZ,pWe,_We,Mk,uWe,bWe,Ek,vWe,FWe,TWe,Un,FZ,MWe,EWe,Ck,CWe,wWe,wk,AWe,yWe,LWe,Dg,TZ,xWe,kWe,Ak,SWe,RWe,BWe,Jn,MZ,PWe,$We,yk,IWe,qWe,Lk,NWe,jWe,DWe,Gg,EZ,GWe,OWe,xk,VWe,XWe,zWe,Og,CZ,QWe,WWe,kk,HWe,UWe,JWe,Vg,wZ,YWe,KWe,Sk,ZWe,eHe,oHe,Yn,AZ,rHe,tHe,Rk,aHe,nHe,Bk,sHe,lHe,iHe,Kn,yZ,dHe,cHe,Pk,fHe,mHe,$k,gHe,hHe,pHe,Zn,LZ,_He,uHe,Ik,bHe,vHe,qk,FHe,THe,MHe,Xg,xZ,EHe,CHe,Nk,wHe,AHe,yHe,zg,kZ,LHe,xHe,jk,kHe,SHe,RHe,es,SZ,BHe,PHe,Dk,$He,IHe,Gk,qHe,NHe,jHe,Qg,RZ,DHe,GHe,Ok,OHe,VHe,XHe,os,BZ,zHe,QHe,Vk,WHe,HHe,Xk,UHe,JHe,YHe,rs,PZ,KHe,ZHe,zk,eUe,oUe,Qk,rUe,tUe,aUe,ts,$Z,nUe,sUe,Wk,lUe,iUe,IZ,dUe,cUe,fUe,Wg,qZ,mUe,gUe,Hk,hUe,pUe,_Ue,as,NZ,uUe,bUe,Uk,vUe,FUe,Jk,TUe,MUe,EUe,Hg,jZ,CUe,wUe,Yk,AUe,yUe,LUe,ns,DZ,xUe,kUe,Kk,SUe,RUe,Zk,BUe,PUe,$Ue,ss,GZ,IUe,qUe,eS,NUe,jUe,oS,DUe,GUe,OUe,ls,OZ,VUe,XUe,rS,zUe,QUe,tS,WUe,HUe,UUe,Ug,VZ,JUe,YUe,aS,KUe,ZUe,eJe,is,XZ,oJe,rJe,nS,tJe,aJe,sS,nJe,sJe,lJe,Jg,zZ,iJe,dJe,lS,cJe,fJe,mJe,ds,QZ,gJe,hJe,iS,pJe,_Je,dS,uJe,bJe,vJe,cs,WZ,FJe,TJe,cS,MJe,EJe,fS,CJe,wJe,AJe,fs,HZ,yJe,LJe,mS,xJe,kJe,gS,SJe,RJe,BJe,ms,UZ,PJe,$Je,hS,IJe,qJe,pS,NJe,jJe,DJe,Yg,JZ,GJe,OJe,_S,VJe,XJe,zJe,gs,YZ,QJe,WJe,uS,HJe,UJe,bS,JJe,YJe,KJe,hs,KZ,ZJe,eYe,vS,oYe,rYe,FS,tYe,aYe,nYe,ps,ZZ,sYe,lYe,TS,iYe,dYe,MS,cYe,fYe,mYe,_s,eee,gYe,hYe,ES,pYe,_Ye,CS,uYe,bYe,vYe,us,oee,FYe,TYe,wS,MYe,EYe,AS,CYe,wYe,AYe,bs,ree,yYe,LYe,yS,xYe,kYe,LS,SYe,RYe,BYe,Kg,tee,PYe,$Ye,xS,IYe,qYe,NYe,vs,aee,jYe,DYe,kS,GYe,OYe,SS,VYe,XYe,zYe,Zg,nee,QYe,WYe,RS,HYe,UYe,JYe,eh,see,YYe,KYe,BS,ZYe,eKe,oKe,Fs,lee,rKe,tKe,PS,aKe,nKe,$S,sKe,lKe,iKe,Ts,iee,dKe,cKe,IS,fKe,mKe,qS,gKe,hKe,pKe,oh,dee,_Ke,uKe,NS,bKe,vKe,FKe,Ms,cee,TKe,MKe,jS,EKe,CKe,DS,wKe,AKe,yKe,Es,fee,LKe,xKe,GS,kKe,SKe,OS,RKe,BKe,PKe,Cs,mee,$Ke,IKe,VS,qKe,NKe,XS,jKe,DKe,GKe,ws,gee,OKe,VKe,zS,XKe,zKe,QS,QKe,WKe,HKe,As,hee,UKe,JKe,WS,YKe,KKe,HS,ZKe,eZe,oZe,rh,pee,rZe,tZe,US,aZe,nZe,sZe,th,_ee,lZe,iZe,JS,dZe,cZe,fZe,ah,uee,mZe,gZe,YS,hZe,pZe,_Ze,nh,bee,uZe,bZe,KS,vZe,FZe,TZe,ys,vee,MZe,EZe,ZS,CZe,wZe,eR,AZe,yZe,LZe,sh,Fee,xZe,kZe,oR,SZe,RZe,BZe,Ls,Tee,PZe,$Ze,rR,IZe,qZe,tR,NZe,jZe,DZe,xs,Mee,GZe,OZe,aR,VZe,XZe,nR,zZe,QZe,WZe,ks,Eee,HZe,UZe,sR,JZe,YZe,lR,KZe,ZZe,eeo,Ss,Cee,oeo,reo,iR,teo,aeo,dR,neo,seo,leo,Rs,wee,ieo,deo,cR,ceo,feo,fR,meo,geo,heo,Bs,Aee,peo,_eo,mR,ueo,beo,gR,veo,Feo,Teo,lh,yee,Meo,Eeo,hR,Ceo,weo,Aeo,ih,Lee,yeo,Leo,pR,xeo,keo,Seo,Ps,xee,Reo,Beo,_R,Peo,$eo,uR,Ieo,qeo,Neo,$s,kee,jeo,Deo,bR,Geo,Oeo,vR,Veo,Xeo,zeo,Is,See,Qeo,Weo,FR,Heo,Ueo,TR,Jeo,Yeo,Keo,dh,Ree,Zeo,eoo,MR,ooo,roo,too,ch,Bee,aoo,noo,ER,soo,loo,ioo,fh,Pee,doo,coo,CR,foo,moo,goo,mh,$ee,hoo,poo,wR,_oo,uoo,boo,gh,Iee,voo,Foo,AR,Too,Moo,Eoo,qs,qee,Coo,woo,yR,Aoo,yoo,LR,Loo,xoo,koo,hh,Nee,Soo,Roo,xR,Boo,Poo,$oo,ph,jee,Ioo,qoo,kR,Noo,joo,Doo,Ns,Dee,Goo,Ooo,SR,Voo,Xoo,RR,zoo,Qoo,Woo,js,Gee,Hoo,Uoo,BR,Joo,Yoo,PR,Koo,Zoo,ero,Oee,oro,rro,XE,tro,_h,zE,aro,Vee,nro,RRe,Hi,uh,Xee,QE,sro,zee,lro,BRe,Ho,WE,iro,HE,dro,$R,cro,fro,mro,UE,gro,Qee,hro,pro,_ro,$e,JE,uro,Wee,bro,vro,Va,Fro,Hee,Tro,Mro,Uee,Ero,Cro,Jee,wro,Aro,yro,ee,bh,Yee,Lro,xro,IR,kro,Sro,Rro,vh,Kee,Bro,Pro,qR,$ro,Iro,qro,Fh,Zee,Nro,jro,NR,Dro,Gro,Oro,Th,eoe,Vro,Xro,jR,zro,Qro,Wro,Mh,ooe,Hro,Uro,DR,Jro,Yro,Kro,Eh,roe,Zro,eto,GR,oto,rto,tto,Ch,toe,ato,nto,OR,sto,lto,ito,wh,aoe,dto,cto,VR,fto,mto,gto,Ah,noe,hto,pto,XR,_to,uto,bto,yh,soe,vto,Fto,zR,Tto,Mto,Eto,Lh,loe,Cto,wto,QR,Ato,yto,Lto,xh,ioe,xto,kto,WR,Sto,Rto,Bto,kh,doe,Pto,$to,HR,Ito,qto,Nto,Sh,coe,jto,Dto,UR,Gto,Oto,Vto,Rh,foe,Xto,zto,JR,Qto,Wto,Hto,Bh,moe,Uto,Jto,YR,Yto,Kto,Zto,Ph,goe,eao,oao,KR,rao,tao,aao,$h,hoe,nao,sao,ZR,lao,iao,dao,Ih,poe,cao,fao,eB,mao,gao,hao,qh,pao,_oe,_ao,uao,YE,bao,Nh,KE,vao,uoe,Fao,PRe,Ui,jh,boe,ZE,Tao,voe,Mao,$Re,Uo,e5,Eao,o5,Cao,oB,wao,Aao,yao,r5,Lao,Foe,xao,kao,Sao,Ie,t5,Rao,Toe,Bao,Pao,Ji,$ao,Moe,Iao,qao,Eoe,Nao,jao,Dao,ke,Dh,Coe,Gao,Oao,rB,Vao,Xao,zao,Gh,woe,Qao,Wao,tB,Hao,Uao,Jao,Oh,Aoe,Yao,Kao,aB,Zao,eno,ono,Vh,yoe,rno,tno,nB,ano,nno,sno,Xh,Loe,lno,ino,sB,dno,cno,fno,zh,xoe,mno,gno,lB,hno,pno,_no,Qh,koe,uno,bno,iB,vno,Fno,Tno,Wh,Soe,Mno,Eno,dB,Cno,wno,Ano,Hh,yno,Roe,Lno,xno,a5,kno,Uh,n5,Sno,Boe,Rno,IRe,Yi,Jh,Poe,s5,Bno,$oe,Pno,qRe,Jo,l5,$no,Ki,Ino,cB,qno,Nno,fB,jno,Dno,Gno,i5,Ono,Ioe,Vno,Xno,zno,Xr,d5,Qno,qoe,Wno,Hno,Zi,Uno,Noe,Jno,Yno,mB,Kno,Zno,eso,joe,oso,rso,c5,tso,qe,f5,aso,Doe,nso,sso,Xa,lso,Goe,iso,dso,Ooe,cso,fso,Voe,mso,gso,hso,T,Yh,Xoe,pso,_so,gB,uso,bso,vso,Kh,zoe,Fso,Tso,hB,Mso,Eso,Cso,Zh,Qoe,wso,Aso,pB,yso,Lso,xso,ep,Woe,kso,Sso,_B,Rso,Bso,Pso,op,Hoe,$so,Iso,uB,qso,Nso,jso,rp,Uoe,Dso,Gso,bB,Oso,Vso,Xso,tp,Joe,zso,Qso,vB,Wso,Hso,Uso,ap,Yoe,Jso,Yso,FB,Kso,Zso,elo,np,Koe,olo,rlo,TB,tlo,alo,nlo,sp,Zoe,slo,llo,MB,ilo,dlo,clo,lp,ere,flo,mlo,EB,glo,hlo,plo,ip,ore,_lo,ulo,CB,blo,vlo,Flo,dp,rre,Tlo,Mlo,wB,Elo,Clo,wlo,cp,tre,Alo,ylo,AB,Llo,xlo,klo,fp,are,Slo,Rlo,yB,Blo,Plo,$lo,mp,nre,Ilo,qlo,LB,Nlo,jlo,Dlo,gp,sre,Glo,Olo,xB,Vlo,Xlo,zlo,hp,lre,Qlo,Wlo,kB,Hlo,Ulo,Jlo,pp,ire,Ylo,Klo,SB,Zlo,eio,oio,_p,dre,rio,tio,RB,aio,nio,sio,up,cre,lio,iio,BB,dio,cio,fio,bp,fre,mio,gio,PB,hio,pio,_io,vp,mre,uio,bio,$B,vio,Fio,Tio,Fp,gre,Mio,Eio,IB,Cio,wio,Aio,Tp,hre,yio,Lio,qB,xio,kio,Sio,Mp,pre,Rio,Bio,NB,Pio,$io,Iio,Ep,_re,qio,Nio,jB,jio,Dio,Gio,Cp,ure,Oio,Vio,DB,Xio,zio,Qio,wp,bre,Wio,Hio,GB,Uio,Jio,Yio,Ap,vre,Kio,Zio,OB,edo,odo,rdo,Ds,Fre,tdo,ado,VB,ndo,sdo,XB,ldo,ido,ddo,yp,Tre,cdo,fdo,zB,mdo,gdo,hdo,Lp,Mre,pdo,_do,QB,udo,bdo,vdo,xp,Ere,Fdo,Tdo,WB,Mdo,Edo,Cdo,kp,Cre,wdo,Ado,HB,ydo,Ldo,xdo,Sp,wre,kdo,Sdo,UB,Rdo,Bdo,Pdo,Rp,Are,$do,Ido,JB,qdo,Ndo,jdo,Bp,yre,Ddo,Gdo,YB,Odo,Vdo,Xdo,Pp,Lre,zdo,Qdo,KB,Wdo,Hdo,Udo,$p,xre,Jdo,Ydo,ZB,Kdo,Zdo,eco,Ip,kre,oco,rco,eP,tco,aco,nco,qp,Sre,sco,lco,oP,ico,dco,cco,Np,Rre,fco,mco,rP,gco,hco,pco,jp,Bre,_co,uco,tP,bco,vco,Fco,Dp,Pre,Tco,Mco,aP,Eco,Cco,wco,Gp,$re,Aco,yco,nP,Lco,xco,kco,Op,Ire,Sco,Rco,sP,Bco,Pco,$co,Vp,qre,Ico,qco,lP,Nco,jco,Dco,Xp,Nre,Gco,Oco,iP,Vco,Xco,zco,zp,jre,Qco,Wco,dP,Hco,Uco,Jco,Qp,Dre,Yco,Kco,cP,Zco,efo,ofo,Wp,Gre,rfo,tfo,fP,afo,nfo,sfo,Hp,Ore,lfo,ifo,mP,dfo,cfo,ffo,Up,Vre,mfo,gfo,gP,hfo,pfo,_fo,Jp,Xre,ufo,bfo,hP,vfo,Ffo,Tfo,Yp,zre,Mfo,Efo,pP,Cfo,wfo,Afo,Kp,Qre,yfo,Lfo,_P,xfo,kfo,Sfo,Zp,Wre,Rfo,Bfo,uP,Pfo,$fo,Ifo,e_,Hre,qfo,Nfo,bP,jfo,Dfo,Gfo,o_,Ure,Ofo,Vfo,vP,Xfo,zfo,Qfo,r_,Jre,Wfo,Hfo,FP,Ufo,Jfo,Yfo,t_,Yre,Kfo,Zfo,TP,emo,omo,rmo,a_,Kre,tmo,amo,MP,nmo,smo,lmo,n_,Zre,imo,dmo,EP,cmo,fmo,mmo,s_,ete,gmo,hmo,CP,pmo,_mo,umo,l_,ote,bmo,vmo,wP,Fmo,Tmo,Mmo,i_,rte,Emo,Cmo,AP,wmo,Amo,ymo,d_,tte,Lmo,xmo,yP,kmo,Smo,Rmo,c_,ate,Bmo,Pmo,LP,$mo,Imo,qmo,f_,nte,Nmo,jmo,xP,Dmo,Gmo,Omo,m_,ste,Vmo,Xmo,kP,zmo,Qmo,Wmo,g_,lte,Hmo,Umo,SP,Jmo,Ymo,Kmo,h_,ite,Zmo,ego,RP,ogo,rgo,tgo,p_,dte,ago,ngo,BP,sgo,lgo,igo,__,cte,dgo,cgo,PP,fgo,mgo,ggo,u_,fte,hgo,pgo,$P,_go,ugo,bgo,b_,mte,vgo,Fgo,IP,Tgo,Mgo,Ego,v_,gte,Cgo,wgo,qP,Ago,ygo,Lgo,F_,hte,xgo,kgo,NP,Sgo,Rgo,Bgo,T_,pte,Pgo,$go,jP,Igo,qgo,Ngo,M_,_te,jgo,Dgo,DP,Ggo,Ogo,Vgo,E_,ute,Xgo,zgo,GP,Qgo,Wgo,Hgo,C_,bte,Ugo,Jgo,OP,Ygo,Kgo,Zgo,w_,vte,eho,oho,VP,rho,tho,aho,A_,Fte,nho,sho,XP,lho,iho,dho,y_,Tte,cho,fho,zP,mho,gho,hho,L_,Mte,pho,_ho,QP,uho,bho,vho,x_,Ete,Fho,Tho,WP,Mho,Eho,Cho,k_,Cte,who,Aho,HP,yho,Lho,xho,S_,wte,kho,Sho,UP,Rho,Bho,Pho,R_,Ate,$ho,Iho,JP,qho,Nho,jho,B_,yte,Dho,Gho,YP,Oho,Vho,Xho,P_,Lte,zho,Qho,KP,Who,Hho,Uho,$_,xte,Jho,Yho,ZP,Kho,Zho,epo,I_,opo,kte,rpo,tpo,Ste,apo,npo,Rte,spo,lpo,m5,NRe,ed,q_,Bte,g5,ipo,Pte,dpo,jRe,Yo,h5,cpo,od,fpo,e$,mpo,gpo,o$,hpo,ppo,_po,p5,upo,$te,bpo,vpo,Fpo,zr,_5,Tpo,Ite,Mpo,Epo,rd,Cpo,qte,wpo,Apo,r$,ypo,Lpo,xpo,Nte,kpo,Spo,u5,Rpo,Ne,b5,Bpo,jte,Ppo,$po,za,Ipo,Dte,qpo,Npo,Gte,jpo,Dpo,Ote,Gpo,Opo,Vpo,R,N_,Vte,Xpo,zpo,t$,Qpo,Wpo,Hpo,j_,Xte,Upo,Jpo,a$,Ypo,Kpo,Zpo,D_,zte,e_o,o_o,n$,r_o,t_o,a_o,G_,Qte,n_o,s_o,s$,l_o,i_o,d_o,O_,Wte,c_o,f_o,l$,m_o,g_o,h_o,V_,Hte,p_o,__o,i$,u_o,b_o,v_o,X_,Ute,F_o,T_o,d$,M_o,E_o,C_o,z_,Jte,w_o,A_o,c$,y_o,L_o,x_o,Q_,Yte,k_o,S_o,f$,R_o,B_o,P_o,W_,Kte,$_o,I_o,m$,q_o,N_o,j_o,H_,Zte,D_o,G_o,g$,O_o,V_o,X_o,U_,eae,z_o,Q_o,h$,W_o,H_o,U_o,J_,oae,J_o,Y_o,p$,K_o,Z_o,euo,Y_,rae,ouo,ruo,_$,tuo,auo,nuo,K_,tae,suo,luo,u$,iuo,duo,cuo,Z_,aae,fuo,muo,b$,guo,huo,puo,eu,nae,_uo,uuo,v$,buo,vuo,Fuo,ou,sae,Tuo,Muo,F$,Euo,Cuo,wuo,ru,lae,Auo,yuo,T$,Luo,xuo,kuo,tu,iae,Suo,Ruo,M$,Buo,Puo,$uo,au,dae,Iuo,quo,E$,Nuo,juo,Duo,nu,cae,Guo,Ouo,C$,Vuo,Xuo,zuo,su,fae,Quo,Wuo,w$,Huo,Uuo,Juo,lu,mae,Yuo,Kuo,A$,Zuo,e1o,o1o,iu,gae,r1o,t1o,y$,a1o,n1o,s1o,du,hae,l1o,i1o,L$,d1o,c1o,f1o,cu,pae,m1o,g1o,x$,h1o,p1o,_1o,fu,_ae,u1o,b1o,k$,v1o,F1o,T1o,mu,uae,M1o,E1o,S$,C1o,w1o,A1o,gu,bae,y1o,L1o,R$,x1o,k1o,S1o,hu,vae,R1o,B1o,B$,P1o,$1o,I1o,pu,Fae,q1o,N1o,P$,j1o,D1o,G1o,_u,Tae,O1o,V1o,$$,X1o,z1o,Q1o,uu,Mae,W1o,H1o,I$,U1o,J1o,Y1o,bu,Eae,K1o,Z1o,q$,ebo,obo,rbo,vu,Cae,tbo,abo,N$,nbo,sbo,lbo,Fu,wae,ibo,dbo,j$,cbo,fbo,mbo,Tu,Aae,gbo,hbo,D$,pbo,_bo,ubo,Mu,bbo,yae,vbo,Fbo,Lae,Tbo,Mbo,xae,Ebo,Cbo,v5,DRe,td,Eu,kae,F5,wbo,Sae,Abo,GRe,Ko,T5,ybo,ad,Lbo,G$,xbo,kbo,O$,Sbo,Rbo,Bbo,M5,Pbo,Rae,$bo,Ibo,qbo,Qr,E5,Nbo,Bae,jbo,Dbo,nd,Gbo,Pae,Obo,Vbo,V$,Xbo,zbo,Qbo,$ae,Wbo,Hbo,C5,Ubo,je,w5,Jbo,Iae,Ybo,Kbo,Qa,Zbo,qae,e2o,o2o,Nae,r2o,t2o,jae,a2o,n2o,s2o,$,Cu,Dae,l2o,i2o,X$,d2o,c2o,f2o,wu,Gae,m2o,g2o,z$,h2o,p2o,_2o,Au,Oae,u2o,b2o,Q$,v2o,F2o,T2o,yu,Vae,M2o,E2o,W$,C2o,w2o,A2o,Lu,Xae,y2o,L2o,H$,x2o,k2o,S2o,xu,zae,R2o,B2o,U$,P2o,$2o,I2o,ku,Qae,q2o,N2o,J$,j2o,D2o,G2o,Su,Wae,O2o,V2o,Y$,X2o,z2o,Q2o,Ru,Hae,W2o,H2o,K$,U2o,J2o,Y2o,Bu,Uae,K2o,Z2o,Z$,e3o,o3o,r3o,Pu,Jae,t3o,a3o,eI,n3o,s3o,l3o,$u,Yae,i3o,d3o,oI,c3o,f3o,m3o,Iu,Kae,g3o,h3o,rI,p3o,_3o,u3o,qu,Zae,b3o,v3o,tI,F3o,T3o,M3o,Nu,ene,E3o,C3o,aI,w3o,A3o,y3o,ju,one,L3o,x3o,nI,k3o,S3o,R3o,Du,rne,B3o,P3o,sI,$3o,I3o,q3o,Gu,tne,N3o,j3o,lI,D3o,G3o,O3o,Ou,ane,V3o,X3o,iI,z3o,Q3o,W3o,Vu,nne,H3o,U3o,dI,J3o,Y3o,K3o,Xu,sne,Z3o,e6o,cI,o6o,r6o,t6o,zu,lne,a6o,n6o,fI,s6o,l6o,i6o,Qu,ine,d6o,c6o,mI,f6o,m6o,g6o,Wu,dne,h6o,p6o,gI,_6o,u6o,b6o,Hu,cne,v6o,F6o,hI,T6o,M6o,E6o,Uu,fne,C6o,w6o,pI,A6o,y6o,L6o,Ju,mne,x6o,k6o,_I,S6o,R6o,B6o,Yu,gne,P6o,$6o,uI,I6o,q6o,N6o,Ku,hne,j6o,D6o,bI,G6o,O6o,V6o,Zu,pne,X6o,z6o,vI,Q6o,W6o,H6o,e1,_ne,U6o,J6o,FI,Y6o,K6o,Z6o,o1,une,evo,ovo,TI,rvo,tvo,avo,r1,bne,nvo,svo,MI,lvo,ivo,dvo,t1,vne,cvo,fvo,EI,mvo,gvo,hvo,a1,Fne,pvo,_vo,CI,uvo,bvo,vvo,n1,Fvo,Tne,Tvo,Mvo,Mne,Evo,Cvo,Ene,wvo,Avo,A5,ORe,sd,s1,Cne,y5,yvo,wne,Lvo,VRe,Zo,L5,xvo,ld,kvo,wI,Svo,Rvo,AI,Bvo,Pvo,$vo,x5,Ivo,Ane,qvo,Nvo,jvo,Wr,k5,Dvo,yne,Gvo,Ovo,id,Vvo,Lne,Xvo,zvo,yI,Qvo,Wvo,Hvo,xne,Uvo,Jvo,S5,Yvo,De,R5,Kvo,kne,Zvo,eFo,Wa,oFo,Sne,rFo,tFo,Rne,aFo,nFo,Bne,sFo,lFo,iFo,I,l1,Pne,dFo,cFo,LI,fFo,mFo,gFo,i1,$ne,hFo,pFo,xI,_Fo,uFo,bFo,d1,Ine,vFo,FFo,kI,TFo,MFo,EFo,c1,qne,CFo,wFo,SI,AFo,yFo,LFo,f1,Nne,xFo,kFo,RI,SFo,RFo,BFo,m1,jne,PFo,$Fo,BI,IFo,qFo,NFo,g1,Dne,jFo,DFo,PI,GFo,OFo,VFo,h1,Gne,XFo,zFo,$I,QFo,WFo,HFo,p1,One,UFo,JFo,II,YFo,KFo,ZFo,_1,Vne,eTo,oTo,qI,rTo,tTo,aTo,u1,Xne,nTo,sTo,NI,lTo,iTo,dTo,b1,zne,cTo,fTo,jI,mTo,gTo,hTo,v1,Qne,pTo,_To,DI,uTo,bTo,vTo,F1,Wne,FTo,TTo,GI,MTo,ETo,CTo,T1,Hne,wTo,ATo,OI,yTo,LTo,xTo,M1,Une,kTo,STo,VI,RTo,BTo,PTo,E1,Jne,$To,ITo,XI,qTo,NTo,jTo,C1,Yne,DTo,GTo,zI,OTo,VTo,XTo,w1,Kne,zTo,QTo,QI,WTo,HTo,UTo,A1,Zne,JTo,YTo,WI,KTo,ZTo,e8o,y1,ese,o8o,r8o,HI,t8o,a8o,n8o,L1,ose,s8o,l8o,UI,i8o,d8o,c8o,x1,rse,f8o,m8o,JI,g8o,h8o,p8o,k1,tse,_8o,u8o,YI,b8o,v8o,F8o,S1,ase,T8o,M8o,KI,E8o,C8o,w8o,R1,nse,A8o,y8o,ZI,L8o,x8o,k8o,B1,sse,S8o,R8o,eq,B8o,P8o,$8o,P1,lse,I8o,q8o,oq,N8o,j8o,D8o,$1,ise,G8o,O8o,rq,V8o,X8o,z8o,I1,dse,Q8o,W8o,cse,H8o,U8o,J8o,q1,fse,Y8o,K8o,tq,Z8o,e9o,o9o,N1,mse,r9o,t9o,aq,a9o,n9o,s9o,j1,gse,l9o,i9o,nq,d9o,c9o,f9o,D1,hse,m9o,g9o,sq,h9o,p9o,_9o,G1,u9o,pse,b9o,v9o,_se,F9o,T9o,use,M9o,E9o,B5,XRe,dd,O1,bse,P5,C9o,vse,w9o,zRe,er,$5,A9o,cd,y9o,lq,L9o,x9o,iq,k9o,S9o,R9o,I5,B9o,Fse,P9o,$9o,I9o,Hr,q5,q9o,Tse,N9o,j9o,fd,D9o,Mse,G9o,O9o,dq,V9o,X9o,z9o,Ese,Q9o,W9o,N5,H9o,Ge,j5,U9o,Cse,J9o,Y9o,Ha,K9o,wse,Z9o,eMo,Ase,oMo,rMo,yse,tMo,aMo,nMo,ne,V1,Lse,sMo,lMo,cq,iMo,dMo,cMo,X1,xse,fMo,mMo,fq,gMo,hMo,pMo,z1,kse,_Mo,uMo,mq,bMo,vMo,FMo,Q1,Sse,TMo,MMo,gq,EMo,CMo,wMo,W1,Rse,AMo,yMo,hq,LMo,xMo,kMo,H1,Bse,SMo,RMo,pq,BMo,PMo,$Mo,U1,Pse,IMo,qMo,_q,NMo,jMo,DMo,J1,$se,GMo,OMo,uq,VMo,XMo,zMo,Y1,Ise,QMo,WMo,bq,HMo,UMo,JMo,K1,qse,YMo,KMo,vq,ZMo,e4o,o4o,Z1,Nse,r4o,t4o,Fq,a4o,n4o,s4o,eb,jse,l4o,i4o,Tq,d4o,c4o,f4o,ob,Dse,m4o,g4o,Mq,h4o,p4o,_4o,rb,Gse,u4o,b4o,Eq,v4o,F4o,T4o,tb,Ose,M4o,E4o,Cq,C4o,w4o,A4o,ab,Vse,y4o,L4o,wq,x4o,k4o,S4o,nb,Xse,R4o,B4o,Aq,P4o,$4o,I4o,sb,q4o,zse,N4o,j4o,Qse,D4o,G4o,Wse,O4o,V4o,D5,QRe,md,lb,Hse,G5,X4o,Use,z4o,WRe,or,O5,Q4o,gd,W4o,yq,H4o,U4o,Lq,J4o,Y4o,K4o,V5,Z4o,Jse,eEo,oEo,rEo,Ur,X5,tEo,Yse,aEo,nEo,hd,sEo,Kse,lEo,iEo,xq,dEo,cEo,fEo,Zse,mEo,gEo,z5,hEo,Oe,Q5,pEo,ele,_Eo,uEo,Ua,bEo,ole,vEo,FEo,rle,TEo,MEo,tle,EEo,CEo,wEo,y,ib,ale,AEo,yEo,kq,LEo,xEo,kEo,db,nle,SEo,REo,Sq,BEo,PEo,$Eo,cb,sle,IEo,qEo,Rq,NEo,jEo,DEo,fb,lle,GEo,OEo,Bq,VEo,XEo,zEo,mb,ile,QEo,WEo,Pq,HEo,UEo,JEo,gb,dle,YEo,KEo,$q,ZEo,e5o,o5o,hb,cle,r5o,t5o,Iq,a5o,n5o,s5o,pb,fle,l5o,i5o,qq,d5o,c5o,f5o,_b,mle,m5o,g5o,Nq,h5o,p5o,_5o,ub,gle,u5o,b5o,jq,v5o,F5o,T5o,bb,hle,M5o,E5o,Dq,C5o,w5o,A5o,vb,ple,y5o,L5o,Gq,x5o,k5o,S5o,Fb,_le,R5o,B5o,Oq,P5o,$5o,I5o,Tb,ule,q5o,N5o,Vq,j5o,D5o,G5o,Mb,ble,O5o,V5o,Xq,X5o,z5o,Q5o,Eb,vle,W5o,H5o,zq,U5o,J5o,Y5o,Cb,Fle,K5o,Z5o,Qq,eCo,oCo,rCo,wb,Tle,tCo,aCo,Wq,nCo,sCo,lCo,Ab,Mle,iCo,dCo,Hq,cCo,fCo,mCo,yb,Ele,gCo,hCo,Uq,pCo,_Co,uCo,Lb,Cle,bCo,vCo,Jq,FCo,TCo,MCo,xb,wle,ECo,CCo,Yq,wCo,ACo,yCo,kb,Ale,LCo,xCo,Kq,kCo,SCo,RCo,Sb,yle,BCo,PCo,Zq,$Co,ICo,qCo,Rb,Lle,NCo,jCo,eN,DCo,GCo,OCo,Bb,xle,VCo,XCo,oN,zCo,QCo,WCo,Pb,kle,HCo,UCo,rN,JCo,YCo,KCo,$b,Sle,ZCo,ewo,tN,owo,rwo,two,Ib,Rle,awo,nwo,aN,swo,lwo,iwo,qb,Ble,dwo,cwo,nN,fwo,mwo,gwo,Nb,Ple,hwo,pwo,sN,_wo,uwo,bwo,jb,$le,vwo,Fwo,lN,Two,Mwo,Ewo,Db,Ile,Cwo,wwo,iN,Awo,ywo,Lwo,Gb,qle,xwo,kwo,dN,Swo,Rwo,Bwo,Ob,Nle,Pwo,$wo,cN,Iwo,qwo,Nwo,Vb,jle,jwo,Dwo,fN,Gwo,Owo,Vwo,Xb,Dle,Xwo,zwo,mN,Qwo,Wwo,Hwo,zb,Gle,Uwo,Jwo,gN,Ywo,Kwo,Zwo,Qb,Ole,eAo,oAo,hN,rAo,tAo,aAo,Wb,Vle,nAo,sAo,pN,lAo,iAo,dAo,Hb,Xle,cAo,fAo,_N,mAo,gAo,hAo,Ub,zle,pAo,_Ao,uN,uAo,bAo,vAo,Jb,Qle,FAo,TAo,bN,MAo,EAo,CAo,Yb,Wle,wAo,AAo,vN,yAo,LAo,xAo,Kb,Hle,kAo,SAo,FN,RAo,BAo,PAo,Zb,Ule,$Ao,IAo,TN,qAo,NAo,jAo,e2,Jle,DAo,GAo,MN,OAo,VAo,XAo,o2,zAo,Yle,QAo,WAo,Kle,HAo,UAo,Zle,JAo,YAo,W5,HRe,pd,r2,eie,H5,KAo,oie,ZAo,URe,rr,U5,e0o,_d,o0o,EN,r0o,t0o,CN,a0o,n0o,s0o,J5,l0o,rie,i0o,d0o,c0o,Jr,Y5,f0o,tie,m0o,g0o,ud,h0o,aie,p0o,_0o,wN,u0o,b0o,v0o,nie,F0o,T0o,K5,M0o,Ve,Z5,E0o,sie,C0o,w0o,Ja,A0o,lie,y0o,L0o,iie,x0o,k0o,die,S0o,R0o,B0o,G,t2,cie,P0o,$0o,AN,I0o,q0o,N0o,a2,fie,j0o,D0o,yN,G0o,O0o,V0o,n2,mie,X0o,z0o,LN,Q0o,W0o,H0o,s2,gie,U0o,J0o,xN,Y0o,K0o,Z0o,l2,hie,eyo,oyo,kN,ryo,tyo,ayo,i2,pie,nyo,syo,SN,lyo,iyo,dyo,d2,_ie,cyo,fyo,RN,myo,gyo,hyo,c2,uie,pyo,_yo,BN,uyo,byo,vyo,f2,bie,Fyo,Tyo,PN,Myo,Eyo,Cyo,m2,vie,wyo,Ayo,$N,yyo,Lyo,xyo,g2,Fie,kyo,Syo,IN,Ryo,Byo,Pyo,h2,Tie,$yo,Iyo,qN,qyo,Nyo,jyo,p2,Mie,Dyo,Gyo,NN,Oyo,Vyo,Xyo,_2,Eie,zyo,Qyo,jN,Wyo,Hyo,Uyo,u2,Cie,Jyo,Yyo,DN,Kyo,Zyo,eLo,b2,wie,oLo,rLo,GN,tLo,aLo,nLo,v2,Aie,sLo,lLo,ON,iLo,dLo,cLo,F2,yie,fLo,mLo,VN,gLo,hLo,pLo,T2,Lie,_Lo,uLo,XN,bLo,vLo,FLo,M2,xie,TLo,MLo,zN,ELo,CLo,wLo,E2,kie,ALo,yLo,QN,LLo,xLo,kLo,C2,Sie,SLo,RLo,WN,BLo,PLo,$Lo,w2,Rie,ILo,qLo,HN,NLo,jLo,DLo,A2,Bie,GLo,OLo,UN,VLo,XLo,zLo,y2,Pie,QLo,WLo,JN,HLo,ULo,JLo,L2,$ie,YLo,KLo,YN,ZLo,e7o,o7o,x2,Iie,r7o,t7o,KN,a7o,n7o,s7o,k2,qie,l7o,i7o,ZN,d7o,c7o,f7o,S2,m7o,Nie,g7o,h7o,jie,p7o,_7o,Die,u7o,b7o,eC,JRe,bd,R2,Gie,oC,v7o,Oie,F7o,YRe,tr,rC,T7o,vd,M7o,ej,E7o,C7o,oj,w7o,A7o,y7o,tC,L7o,Vie,x7o,k7o,S7o,Yr,aC,R7o,Xie,B7o,P7o,Fd,$7o,zie,I7o,q7o,rj,N7o,j7o,D7o,Qie,G7o,O7o,nC,V7o,Xe,sC,X7o,Wie,z7o,Q7o,Ya,W7o,Hie,H7o,U7o,Uie,J7o,Y7o,Jie,K7o,Z7o,exo,da,B2,Yie,oxo,rxo,tj,txo,axo,nxo,P2,Kie,sxo,lxo,aj,ixo,dxo,cxo,$2,Zie,fxo,mxo,nj,gxo,hxo,pxo,I2,ede,_xo,uxo,sj,bxo,vxo,Fxo,q2,ode,Txo,Mxo,lj,Exo,Cxo,wxo,N2,Axo,rde,yxo,Lxo,tde,xxo,kxo,ade,Sxo,Rxo,lC,KRe,Td,j2,nde,iC,Bxo,sde,Pxo,ZRe,ar,dC,$xo,Md,Ixo,ij,qxo,Nxo,dj,jxo,Dxo,Gxo,cC,Oxo,lde,Vxo,Xxo,zxo,Kr,fC,Qxo,ide,Wxo,Hxo,Ed,Uxo,dde,Jxo,Yxo,cj,Kxo,Zxo,eko,cde,oko,rko,mC,tko,ze,gC,ako,fde,nko,sko,Ka,lko,mde,iko,dko,gde,cko,fko,hde,mko,gko,hko,N,D2,pde,pko,_ko,fj,uko,bko,vko,G2,_de,Fko,Tko,mj,Mko,Eko,Cko,O2,ude,wko,Ako,gj,yko,Lko,xko,V2,bde,kko,Sko,hj,Rko,Bko,Pko,X2,vde,$ko,Iko,pj,qko,Nko,jko,z2,Fde,Dko,Gko,_j,Oko,Vko,Xko,Q2,Tde,zko,Qko,uj,Wko,Hko,Uko,W2,Mde,Jko,Yko,bj,Kko,Zko,eSo,H2,Ede,oSo,rSo,vj,tSo,aSo,nSo,U2,Cde,sSo,lSo,Fj,iSo,dSo,cSo,J2,wde,fSo,mSo,Tj,gSo,hSo,pSo,Y2,Ade,_So,uSo,Mj,bSo,vSo,FSo,K2,yde,TSo,MSo,Ej,ESo,CSo,wSo,Z2,Lde,ASo,ySo,Cj,LSo,xSo,kSo,e3,xde,SSo,RSo,wj,BSo,PSo,$So,o3,kde,ISo,qSo,Aj,NSo,jSo,DSo,r3,Sde,GSo,OSo,yj,VSo,XSo,zSo,t3,Rde,QSo,WSo,Lj,HSo,USo,JSo,a3,Bde,YSo,KSo,xj,ZSo,eRo,oRo,n3,Pde,rRo,tRo,kj,aRo,nRo,sRo,s3,$de,lRo,iRo,Sj,dRo,cRo,fRo,l3,Ide,mRo,gRo,Rj,hRo,pRo,_Ro,i3,qde,uRo,bRo,Bj,vRo,FRo,TRo,d3,Nde,MRo,ERo,Pj,CRo,wRo,ARo,c3,jde,yRo,LRo,$j,xRo,kRo,SRo,f3,Dde,RRo,BRo,Ij,PRo,$Ro,IRo,m3,Gde,qRo,NRo,qj,jRo,DRo,GRo,g3,Ode,ORo,VRo,Nj,XRo,zRo,QRo,h3,Vde,WRo,HRo,jj,URo,JRo,YRo,p3,Xde,KRo,ZRo,Dj,eBo,oBo,rBo,_3,zde,tBo,aBo,Gj,nBo,sBo,lBo,u3,Qde,iBo,dBo,Oj,cBo,fBo,mBo,b3,Wde,gBo,hBo,Vj,pBo,_Bo,uBo,v3,bBo,Hde,vBo,FBo,Ude,TBo,MBo,Jde,EBo,CBo,hC,eBe,Cd,F3,Yde,pC,wBo,Kde,ABo,oBe,nr,_C,yBo,wd,LBo,Xj,xBo,kBo,zj,SBo,RBo,BBo,uC,PBo,Zde,$Bo,IBo,qBo,Zr,bC,NBo,ece,jBo,DBo,Ad,GBo,oce,OBo,VBo,Qj,XBo,zBo,QBo,rce,WBo,HBo,vC,UBo,Qe,FC,JBo,tce,YBo,KBo,Za,ZBo,ace,ePo,oPo,nce,rPo,tPo,sce,aPo,nPo,sPo,S,T3,lce,lPo,iPo,Wj,dPo,cPo,fPo,M3,ice,mPo,gPo,Hj,hPo,pPo,_Po,E3,dce,uPo,bPo,Uj,vPo,FPo,TPo,C3,cce,MPo,EPo,Jj,CPo,wPo,APo,w3,fce,yPo,LPo,Yj,xPo,kPo,SPo,A3,mce,RPo,BPo,Kj,PPo,$Po,IPo,y3,gce,qPo,NPo,Zj,jPo,DPo,GPo,L3,hce,OPo,VPo,eD,XPo,zPo,QPo,x3,pce,WPo,HPo,oD,UPo,JPo,YPo,k3,_ce,KPo,ZPo,rD,e$o,o$o,r$o,S3,uce,t$o,a$o,tD,n$o,s$o,l$o,R3,bce,i$o,d$o,aD,c$o,f$o,m$o,B3,vce,g$o,h$o,nD,p$o,_$o,u$o,P3,Fce,b$o,v$o,sD,F$o,T$o,M$o,$3,Tce,E$o,C$o,lD,w$o,A$o,y$o,I3,Mce,L$o,x$o,iD,k$o,S$o,R$o,q3,Ece,B$o,P$o,dD,$$o,I$o,q$o,N3,Cce,N$o,j$o,cD,D$o,G$o,O$o,j3,wce,V$o,X$o,fD,z$o,Q$o,W$o,D3,Ace,H$o,U$o,mD,J$o,Y$o,K$o,G3,yce,Z$o,eIo,gD,oIo,rIo,tIo,O3,Lce,aIo,nIo,hD,sIo,lIo,iIo,V3,xce,dIo,cIo,pD,fIo,mIo,gIo,X3,kce,hIo,pIo,_D,_Io,uIo,bIo,z3,Sce,vIo,FIo,uD,TIo,MIo,EIo,Q3,Rce,CIo,wIo,bD,AIo,yIo,LIo,W3,Bce,xIo,kIo,vD,SIo,RIo,BIo,H3,Pce,PIo,$Io,FD,IIo,qIo,NIo,U3,$ce,jIo,DIo,TD,GIo,OIo,VIo,J3,Ice,XIo,zIo,MD,QIo,WIo,HIo,Y3,qce,UIo,JIo,ED,YIo,KIo,ZIo,K3,Nce,eqo,oqo,CD,rqo,tqo,aqo,Z3,jce,nqo,sqo,wD,lqo,iqo,dqo,e6,Dce,cqo,fqo,AD,mqo,gqo,hqo,o6,Gce,pqo,_qo,yD,uqo,bqo,vqo,r6,Oce,Fqo,Tqo,LD,Mqo,Eqo,Cqo,t6,Vce,wqo,Aqo,xD,yqo,Lqo,xqo,a6,Xce,kqo,Sqo,kD,Rqo,Bqo,Pqo,n6,zce,$qo,Iqo,SD,qqo,Nqo,jqo,s6,Dqo,Qce,Gqo,Oqo,Wce,Vqo,Xqo,Hce,zqo,Qqo,TC,rBe,yd,l6,Uce,MC,Wqo,Jce,Hqo,tBe,sr,EC,Uqo,Ld,Jqo,RD,Yqo,Kqo,BD,Zqo,eNo,oNo,CC,rNo,Yce,tNo,aNo,nNo,et,wC,sNo,Kce,lNo,iNo,xd,dNo,Zce,cNo,fNo,PD,mNo,gNo,hNo,efe,pNo,_No,AC,uNo,We,yC,bNo,ofe,vNo,FNo,en,TNo,rfe,MNo,ENo,tfe,CNo,wNo,afe,ANo,yNo,LNo,nfe,i6,sfe,xNo,kNo,$D,SNo,RNo,BNo,d6,PNo,lfe,$No,INo,ife,qNo,NNo,dfe,jNo,DNo,LC,aBe,kd,c6,cfe,xC,GNo,ffe,ONo,nBe,lr,kC,VNo,Sd,XNo,ID,zNo,QNo,qD,WNo,HNo,UNo,SC,JNo,mfe,YNo,KNo,ZNo,ot,RC,ejo,gfe,ojo,rjo,Rd,tjo,hfe,ajo,njo,ND,sjo,ljo,ijo,pfe,djo,cjo,BC,fjo,He,PC,mjo,_fe,gjo,hjo,on,pjo,ufe,_jo,ujo,bfe,bjo,vjo,vfe,Fjo,Tjo,Mjo,de,f6,Ffe,Ejo,Cjo,jD,wjo,Ajo,yjo,m6,Tfe,Ljo,xjo,DD,kjo,Sjo,Rjo,g6,Mfe,Bjo,Pjo,GD,$jo,Ijo,qjo,Gs,Efe,Njo,jjo,OD,Djo,Gjo,VD,Ojo,Vjo,Xjo,h6,Cfe,zjo,Qjo,XD,Wjo,Hjo,Ujo,ma,wfe,Jjo,Yjo,zD,Kjo,Zjo,QD,eDo,oDo,WD,rDo,tDo,aDo,p6,Afe,nDo,sDo,HD,lDo,iDo,dDo,_6,yfe,cDo,fDo,UD,mDo,gDo,hDo,u6,Lfe,pDo,_Do,JD,uDo,bDo,vDo,b6,xfe,FDo,TDo,YD,MDo,EDo,CDo,v6,kfe,wDo,ADo,KD,yDo,LDo,xDo,F6,Sfe,kDo,SDo,ZD,RDo,BDo,PDo,T6,Rfe,$Do,IDo,eG,qDo,NDo,jDo,M6,DDo,Bfe,GDo,ODo,Pfe,VDo,XDo,$fe,zDo,QDo,$C,sBe,Bd,E6,Ife,IC,WDo,qfe,HDo,lBe,ir,qC,UDo,Pd,JDo,oG,YDo,KDo,rG,ZDo,eGo,oGo,NC,rGo,Nfe,tGo,aGo,nGo,rt,jC,sGo,jfe,lGo,iGo,$d,dGo,Dfe,cGo,fGo,tG,mGo,gGo,hGo,Gfe,pGo,_Go,DC,uGo,Ue,GC,bGo,Ofe,vGo,FGo,rn,TGo,Vfe,MGo,EGo,Xfe,CGo,wGo,zfe,AGo,yGo,LGo,Qfe,C6,Wfe,xGo,kGo,aG,SGo,RGo,BGo,w6,PGo,Hfe,$Go,IGo,Ufe,qGo,NGo,Jfe,jGo,DGo,OC,iBe,Id,A6,Yfe,VC,GGo,Kfe,OGo,dBe,dr,XC,VGo,qd,XGo,nG,zGo,QGo,sG,WGo,HGo,UGo,zC,JGo,Zfe,YGo,KGo,ZGo,tt,QC,eOo,eme,oOo,rOo,Nd,tOo,ome,aOo,nOo,lG,sOo,lOo,iOo,rme,dOo,cOo,WC,fOo,Je,HC,mOo,tme,gOo,hOo,tn,pOo,ame,_Oo,uOo,nme,bOo,vOo,sme,FOo,TOo,MOo,Se,y6,lme,EOo,COo,iG,wOo,AOo,yOo,L6,ime,LOo,xOo,dG,kOo,SOo,ROo,x6,dme,BOo,POo,cG,$Oo,IOo,qOo,k6,cme,NOo,jOo,fG,DOo,GOo,OOo,S6,fme,VOo,XOo,mG,zOo,QOo,WOo,R6,mme,HOo,UOo,gG,JOo,YOo,KOo,B6,gme,ZOo,eVo,hG,oVo,rVo,tVo,P6,hme,aVo,nVo,pG,sVo,lVo,iVo,$6,dVo,pme,cVo,fVo,_me,mVo,gVo,ume,hVo,pVo,UC,cBe,jd,I6,bme,JC,_Vo,vme,uVo,fBe,cr,YC,bVo,Dd,vVo,_G,FVo,TVo,uG,MVo,EVo,CVo,KC,wVo,Fme,AVo,yVo,LVo,at,ZC,xVo,Tme,kVo,SVo,Gd,RVo,Mme,BVo,PVo,bG,$Vo,IVo,qVo,Eme,NVo,jVo,ew,DVo,Ye,ow,GVo,Cme,OVo,VVo,an,XVo,wme,zVo,QVo,Ame,WVo,HVo,yme,UVo,JVo,YVo,nn,q6,Lme,KVo,ZVo,vG,eXo,oXo,rXo,N6,xme,tXo,aXo,FG,nXo,sXo,lXo,j6,kme,iXo,dXo,TG,cXo,fXo,mXo,D6,Sme,gXo,hXo,MG,pXo,_Xo,uXo,G6,bXo,Rme,vXo,FXo,Bme,TXo,MXo,Pme,EXo,CXo,rw,mBe,Od,O6,$me,tw,wXo,Ime,AXo,gBe,fr,aw,yXo,Vd,LXo,EG,xXo,kXo,CG,SXo,RXo,BXo,nw,PXo,qme,$Xo,IXo,qXo,nt,sw,NXo,Nme,jXo,DXo,Xd,GXo,jme,OXo,VXo,wG,XXo,zXo,QXo,Dme,WXo,HXo,lw,UXo,Ke,iw,JXo,Gme,YXo,KXo,sn,ZXo,Ome,ezo,ozo,Vme,rzo,tzo,Xme,azo,nzo,szo,Re,V6,zme,lzo,izo,AG,dzo,czo,fzo,X6,Qme,mzo,gzo,yG,hzo,pzo,_zo,z6,Wme,uzo,bzo,LG,vzo,Fzo,Tzo,Q6,Hme,Mzo,Ezo,xG,Czo,wzo,Azo,W6,Ume,yzo,Lzo,kG,xzo,kzo,Szo,H6,Jme,Rzo,Bzo,SG,Pzo,$zo,Izo,U6,Yme,qzo,Nzo,RG,jzo,Dzo,Gzo,J6,Kme,Ozo,Vzo,BG,Xzo,zzo,Qzo,Y6,Wzo,Zme,Hzo,Uzo,ege,Jzo,Yzo,oge,Kzo,Zzo,dw,hBe,zd,K6,rge,cw,eQo,tge,oQo,pBe,mr,fw,rQo,Qd,tQo,PG,aQo,nQo,$G,sQo,lQo,iQo,mw,dQo,age,cQo,fQo,mQo,st,gw,gQo,nge,hQo,pQo,Wd,_Qo,sge,uQo,bQo,IG,vQo,FQo,TQo,lge,MQo,EQo,hw,CQo,Ze,pw,wQo,ige,AQo,yQo,ln,LQo,dge,xQo,kQo,cge,SQo,RQo,fge,BQo,PQo,$Qo,_w,Z6,mge,IQo,qQo,qG,NQo,jQo,DQo,ev,gge,GQo,OQo,NG,VQo,XQo,zQo,ov,QQo,hge,WQo,HQo,pge,UQo,JQo,_ge,YQo,KQo,uw,_Be,Hd,rv,uge,bw,ZQo,bge,eWo,uBe,gr,vw,oWo,Ud,rWo,jG,tWo,aWo,DG,nWo,sWo,lWo,Fw,iWo,vge,dWo,cWo,fWo,lt,Tw,mWo,Fge,gWo,hWo,Jd,pWo,Tge,_Wo,uWo,GG,bWo,vWo,FWo,Mge,TWo,MWo,Mw,EWo,eo,Ew,CWo,Ege,wWo,AWo,dn,yWo,Cge,LWo,xWo,wge,kWo,SWo,Age,RWo,BWo,PWo,cn,tv,yge,$Wo,IWo,OG,qWo,NWo,jWo,av,Lge,DWo,GWo,VG,OWo,VWo,XWo,nv,xge,zWo,QWo,XG,WWo,HWo,UWo,sv,kge,JWo,YWo,zG,KWo,ZWo,eHo,lv,oHo,Sge,rHo,tHo,Rge,aHo,nHo,Bge,sHo,lHo,Cw,bBe,Yd,iv,Pge,ww,iHo,$ge,dHo,vBe,hr,Aw,cHo,Kd,fHo,QG,mHo,gHo,WG,hHo,pHo,_Ho,yw,uHo,Ige,bHo,vHo,FHo,it,Lw,THo,qge,MHo,EHo,Zd,CHo,Nge,wHo,AHo,HG,yHo,LHo,xHo,jge,kHo,SHo,xw,RHo,oo,kw,BHo,Dge,PHo,$Ho,fn,IHo,Gge,qHo,NHo,Oge,jHo,DHo,Vge,GHo,OHo,VHo,ec,dv,Xge,XHo,zHo,UG,QHo,WHo,HHo,cv,zge,UHo,JHo,JG,YHo,KHo,ZHo,fv,Qge,eUo,oUo,YG,rUo,tUo,aUo,mv,nUo,Wge,sUo,lUo,Hge,iUo,dUo,Uge,cUo,fUo,Sw,FBe,oc,gv,Jge,Rw,mUo,Yge,gUo,TBe,pr,Bw,hUo,rc,pUo,KG,_Uo,uUo,ZG,bUo,vUo,FUo,Pw,TUo,Kge,MUo,EUo,CUo,dt,$w,wUo,Zge,AUo,yUo,tc,LUo,ehe,xUo,kUo,eO,SUo,RUo,BUo,ohe,PUo,$Uo,Iw,IUo,ro,qw,qUo,rhe,NUo,jUo,mn,DUo,the,GUo,OUo,ahe,VUo,XUo,nhe,zUo,QUo,WUo,she,hv,lhe,HUo,UUo,oO,JUo,YUo,KUo,pv,ZUo,ihe,eJo,oJo,dhe,rJo,tJo,che,aJo,nJo,Nw,MBe,ac,_v,fhe,jw,sJo,mhe,lJo,EBe,_r,Dw,iJo,nc,dJo,rO,cJo,fJo,tO,mJo,gJo,hJo,Gw,pJo,ghe,_Jo,uJo,bJo,ct,Ow,vJo,hhe,FJo,TJo,sc,MJo,phe,EJo,CJo,aO,wJo,AJo,yJo,_he,LJo,xJo,Vw,kJo,to,Xw,SJo,uhe,RJo,BJo,gn,PJo,bhe,$Jo,IJo,vhe,qJo,NJo,Fhe,jJo,DJo,GJo,The,uv,Mhe,OJo,VJo,nO,XJo,zJo,QJo,bv,WJo,Ehe,HJo,UJo,Che,JJo,YJo,whe,KJo,ZJo,zw,CBe,lc,vv,Ahe,Qw,eYo,yhe,oYo,wBe,ur,Ww,rYo,ic,tYo,sO,aYo,nYo,lO,sYo,lYo,iYo,Hw,dYo,Lhe,cYo,fYo,mYo,ft,Uw,gYo,xhe,hYo,pYo,dc,_Yo,khe,uYo,bYo,iO,vYo,FYo,TYo,She,MYo,EYo,Jw,CYo,ao,Yw,wYo,Rhe,AYo,yYo,hn,LYo,Bhe,xYo,kYo,Phe,SYo,RYo,$he,BYo,PYo,$Yo,pn,Fv,Ihe,IYo,qYo,dO,NYo,jYo,DYo,Tv,qhe,GYo,OYo,cO,VYo,XYo,zYo,Mv,Nhe,QYo,WYo,fO,HYo,UYo,JYo,Ev,jhe,YYo,KYo,mO,ZYo,eKo,oKo,Cv,rKo,Dhe,tKo,aKo,Ghe,nKo,sKo,Ohe,lKo,iKo,Kw,ABe,cc,wv,Vhe,Zw,dKo,Xhe,cKo,yBe,br,eA,fKo,fc,mKo,gO,gKo,hKo,hO,pKo,_Ko,uKo,oA,bKo,zhe,vKo,FKo,TKo,mt,rA,MKo,Qhe,EKo,CKo,mc,wKo,Whe,AKo,yKo,pO,LKo,xKo,kKo,Hhe,SKo,RKo,tA,BKo,no,aA,PKo,Uhe,$Ko,IKo,_n,qKo,Jhe,NKo,jKo,Yhe,DKo,GKo,Khe,OKo,VKo,XKo,Zhe,Av,epe,zKo,QKo,_O,WKo,HKo,UKo,yv,JKo,ope,YKo,KKo,rpe,ZKo,eZo,tpe,oZo,rZo,nA,LBe,gc,Lv,ape,sA,tZo,npe,aZo,xBe,vr,lA,nZo,hc,sZo,uO,lZo,iZo,bO,dZo,cZo,fZo,iA,mZo,spe,gZo,hZo,pZo,gt,dA,_Zo,lpe,uZo,bZo,pc,vZo,ipe,FZo,TZo,vO,MZo,EZo,CZo,dpe,wZo,AZo,cA,yZo,ho,fA,LZo,cpe,xZo,kZo,un,SZo,fpe,RZo,BZo,mpe,PZo,$Zo,gpe,IZo,qZo,NZo,x,xv,hpe,jZo,DZo,FO,GZo,OZo,VZo,kv,ppe,XZo,zZo,TO,QZo,WZo,HZo,Sv,_pe,UZo,JZo,MO,YZo,KZo,ZZo,Rv,upe,eer,oer,EO,rer,ter,aer,Bv,bpe,ner,ser,CO,ler,ier,der,Pv,vpe,cer,fer,wO,mer,ger,her,$v,Fpe,per,_er,AO,uer,ber,ver,Iv,Tpe,Fer,Ter,yO,Mer,Eer,Cer,qv,Mpe,wer,Aer,LO,yer,Ler,xer,Nv,Epe,ker,Ser,xO,Rer,Ber,Per,jv,Cpe,$er,Ier,kO,qer,Ner,jer,Dv,wpe,Der,Ger,SO,Oer,Ver,Xer,Gv,Ape,zer,Qer,RO,Wer,Her,Uer,Ov,ype,Jer,Yer,BO,Ker,Zer,eor,Vv,Lpe,oor,ror,PO,tor,aor,nor,Xv,xpe,sor,lor,$O,ior,dor,cor,Os,kpe,mor,gor,IO,hor,por,qO,_or,uor,bor,zv,Spe,vor,For,NO,Tor,Mor,Eor,Qv,Rpe,Cor,wor,jO,Aor,yor,Lor,Wv,Bpe,xor,kor,DO,Sor,Ror,Bor,Hv,Ppe,Por,$or,GO,Ior,qor,Nor,Uv,$pe,jor,Dor,OO,Gor,Oor,Vor,Jv,Ipe,Xor,zor,VO,Qor,Wor,Hor,Yv,qpe,Uor,Jor,XO,Yor,Kor,Zor,Kv,Npe,err,orr,zO,rrr,trr,arr,Zv,jpe,nrr,srr,QO,lrr,irr,drr,eF,Dpe,crr,frr,WO,mrr,grr,hrr,oF,Gpe,prr,_rr,HO,urr,brr,vrr,rF,Ope,Frr,Trr,UO,Mrr,Err,Crr,tF,Vpe,wrr,Arr,JO,yrr,Lrr,xrr,aF,Xpe,krr,Srr,YO,Rrr,Brr,Prr,nF,zpe,$rr,Irr,KO,qrr,Nrr,jrr,sF,Qpe,Drr,Grr,ZO,Orr,Vrr,Xrr,lF,Wpe,zrr,Qrr,eV,Wrr,Hrr,Urr,iF,Hpe,Jrr,Yrr,oV,Krr,Zrr,etr,dF,Upe,otr,rtr,rV,ttr,atr,ntr,cF,Jpe,str,ltr,tV,itr,dtr,ctr,fF,Ype,ftr,mtr,aV,gtr,htr,ptr,mF,Kpe,_tr,utr,nV,btr,vtr,Ftr,gF,Zpe,Ttr,Mtr,sV,Etr,Ctr,wtr,hF,e_e,Atr,ytr,lV,Ltr,xtr,ktr,pF,o_e,Str,Rtr,iV,Btr,Ptr,$tr,_F,r_e,Itr,qtr,dV,Ntr,jtr,Dtr,uF,t_e,Gtr,Otr,cV,Vtr,Xtr,ztr,a_e,Qtr,Wtr,mA,kBe,_c,bF,n_e,gA,Htr,s_e,Utr,SBe,Fr,hA,Jtr,uc,Ytr,fV,Ktr,Ztr,mV,ear,oar,rar,pA,tar,l_e,aar,nar,sar,ht,_A,lar,i_e,iar,dar,bc,car,d_e,far,mar,gV,gar,har,par,c_e,_ar,uar,uA,bar,po,bA,Far,f_e,Tar,Mar,bn,Ear,m_e,Car,war,g_e,Aar,yar,h_e,Lar,xar,kar,H,vF,p_e,Sar,Rar,hV,Bar,Par,$ar,FF,__e,Iar,qar,pV,Nar,jar,Dar,TF,u_e,Gar,Oar,_V,Var,Xar,zar,MF,b_e,Qar,War,uV,Har,Uar,Jar,EF,v_e,Yar,Kar,bV,Zar,enr,onr,CF,F_e,rnr,tnr,vV,anr,nnr,snr,wF,T_e,lnr,inr,FV,dnr,cnr,fnr,AF,M_e,mnr,gnr,TV,hnr,pnr,_nr,yF,E_e,unr,bnr,MV,vnr,Fnr,Tnr,LF,C_e,Mnr,Enr,EV,Cnr,wnr,Anr,xF,w_e,ynr,Lnr,CV,xnr,knr,Snr,kF,A_e,Rnr,Bnr,wV,Pnr,$nr,Inr,SF,y_e,qnr,Nnr,AV,jnr,Dnr,Gnr,RF,L_e,Onr,Vnr,yV,Xnr,znr,Qnr,BF,x_e,Wnr,Hnr,LV,Unr,Jnr,Ynr,PF,k_e,Knr,Znr,xV,esr,osr,rsr,$F,S_e,tsr,asr,kV,nsr,ssr,lsr,IF,R_e,isr,dsr,SV,csr,fsr,msr,qF,B_e,gsr,hsr,RV,psr,_sr,usr,NF,P_e,bsr,vsr,BV,Fsr,Tsr,Msr,jF,$_e,Esr,Csr,PV,wsr,Asr,ysr,DF,I_e,Lsr,xsr,$V,ksr,Ssr,Rsr,GF,q_e,Bsr,Psr,IV,$sr,Isr,qsr,N_e,Nsr,jsr,vA,RBe,vc,OF,j_e,FA,Dsr,D_e,Gsr,BBe,Tr,TA,Osr,Fc,Vsr,qV,Xsr,zsr,NV,Qsr,Wsr,Hsr,MA,Usr,G_e,Jsr,Ysr,Ksr,pt,EA,Zsr,O_e,elr,olr,Tc,rlr,V_e,tlr,alr,jV,nlr,slr,llr,X_e,ilr,dlr,CA,clr,_o,wA,flr,z_e,mlr,glr,vn,hlr,Q_e,plr,_lr,W_e,ulr,blr,H_e,vlr,Flr,Tlr,fe,VF,U_e,Mlr,Elr,DV,Clr,wlr,Alr,XF,J_e,ylr,Llr,GV,xlr,klr,Slr,zF,Y_e,Rlr,Blr,OV,Plr,$lr,Ilr,QF,K_e,qlr,Nlr,VV,jlr,Dlr,Glr,WF,Z_e,Olr,Vlr,XV,Xlr,zlr,Qlr,HF,eue,Wlr,Hlr,zV,Ulr,Jlr,Ylr,UF,oue,Klr,Zlr,QV,eir,oir,rir,JF,rue,tir,air,WV,nir,sir,lir,YF,tue,iir,dir,HV,cir,fir,mir,KF,aue,gir,hir,UV,pir,_ir,uir,ZF,nue,bir,vir,JV,Fir,Tir,Mir,eT,sue,Eir,Cir,YV,wir,Air,yir,lue,Lir,xir,AA,PBe,Mc,oT,iue,yA,kir,due,Sir,$Be,Mr,LA,Rir,Ec,Bir,KV,Pir,$ir,ZV,Iir,qir,Nir,xA,jir,cue,Dir,Gir,Oir,_t,kA,Vir,fue,Xir,zir,Cc,Qir,mue,Wir,Hir,eX,Uir,Jir,Yir,gue,Kir,Zir,SA,edr,uo,RA,odr,hue,rdr,tdr,Fn,adr,pue,ndr,sdr,_ue,ldr,idr,uue,ddr,cdr,fdr,BA,rT,bue,mdr,gdr,oX,hdr,pdr,_dr,tT,vue,udr,bdr,rX,vdr,Fdr,Tdr,Fue,Mdr,Edr,PA,IBe,wc,aT,Tue,$A,Cdr,Mue,wdr,qBe,Er,IA,Adr,Ac,ydr,tX,Ldr,xdr,aX,kdr,Sdr,Rdr,qA,Bdr,Eue,Pdr,$dr,Idr,ut,NA,qdr,Cue,Ndr,jdr,yc,Ddr,wue,Gdr,Odr,nX,Vdr,Xdr,zdr,Aue,Qdr,Wdr,jA,Hdr,bo,DA,Udr,yue,Jdr,Ydr,Tn,Kdr,Lue,Zdr,ecr,xue,ocr,rcr,kue,tcr,acr,ncr,J,nT,Sue,scr,lcr,sX,icr,dcr,ccr,sT,Rue,fcr,mcr,lX,gcr,hcr,pcr,lT,Bue,_cr,ucr,iX,bcr,vcr,Fcr,iT,Pue,Tcr,Mcr,dX,Ecr,Ccr,wcr,dT,$ue,Acr,ycr,cX,Lcr,xcr,kcr,cT,Iue,Scr,Rcr,fX,Bcr,Pcr,$cr,fT,que,Icr,qcr,mX,Ncr,jcr,Dcr,mT,Nue,Gcr,Ocr,gX,Vcr,Xcr,zcr,gT,jue,Qcr,Wcr,hX,Hcr,Ucr,Jcr,hT,Due,Ycr,Kcr,pX,Zcr,efr,ofr,pT,Gue,rfr,tfr,_X,afr,nfr,sfr,_T,Oue,lfr,ifr,uX,dfr,cfr,ffr,uT,Vue,mfr,gfr,bX,hfr,pfr,_fr,bT,Xue,ufr,bfr,vX,vfr,Ffr,Tfr,vT,zue,Mfr,Efr,FX,Cfr,wfr,Afr,FT,Que,yfr,Lfr,TX,xfr,kfr,Sfr,TT,Wue,Rfr,Bfr,MX,Pfr,$fr,Ifr,MT,Hue,qfr,Nfr,EX,jfr,Dfr,Gfr,ET,Uue,Ofr,Vfr,CX,Xfr,zfr,Qfr,CT,Jue,Wfr,Hfr,wX,Ufr,Jfr,Yfr,Yue,Kfr,Zfr,GA,NBe,Lc,wT,Kue,OA,emr,Zue,omr,jBe,Cr,VA,rmr,xc,tmr,AX,amr,nmr,yX,smr,lmr,imr,XA,dmr,e1e,cmr,fmr,mmr,bt,zA,gmr,o1e,hmr,pmr,kc,_mr,r1e,umr,bmr,LX,vmr,Fmr,Tmr,t1e,Mmr,Emr,QA,Cmr,vo,WA,wmr,a1e,Amr,ymr,Mn,Lmr,n1e,xmr,kmr,s1e,Smr,Rmr,l1e,Bmr,Pmr,$mr,be,AT,i1e,Imr,qmr,xX,Nmr,jmr,Dmr,yT,d1e,Gmr,Omr,kX,Vmr,Xmr,zmr,LT,c1e,Qmr,Wmr,SX,Hmr,Umr,Jmr,xT,f1e,Ymr,Kmr,RX,Zmr,egr,ogr,kT,m1e,rgr,tgr,BX,agr,ngr,sgr,ST,g1e,lgr,igr,PX,dgr,cgr,fgr,RT,h1e,mgr,ggr,$X,hgr,pgr,_gr,BT,p1e,ugr,bgr,IX,vgr,Fgr,Tgr,PT,_1e,Mgr,Egr,qX,Cgr,wgr,Agr,$T,u1e,ygr,Lgr,NX,xgr,kgr,Sgr,b1e,Rgr,Bgr,HA,DBe,Sc,IT,v1e,UA,Pgr,F1e,$gr,GBe,wr,JA,Igr,Rc,qgr,jX,Ngr,jgr,DX,Dgr,Ggr,Ogr,YA,Vgr,T1e,Xgr,zgr,Qgr,vt,KA,Wgr,M1e,Hgr,Ugr,Bc,Jgr,E1e,Ygr,Kgr,GX,Zgr,ehr,ohr,C1e,rhr,thr,ZA,ahr,Fo,e0,nhr,w1e,shr,lhr,En,ihr,A1e,dhr,chr,y1e,fhr,mhr,L1e,ghr,hhr,phr,V,qT,x1e,_hr,uhr,OX,bhr,vhr,Fhr,NT,k1e,Thr,Mhr,VX,Ehr,Chr,whr,jT,S1e,Ahr,yhr,XX,Lhr,xhr,khr,DT,R1e,Shr,Rhr,zX,Bhr,Phr,$hr,GT,B1e,Ihr,qhr,QX,Nhr,jhr,Dhr,OT,P1e,Ghr,Ohr,WX,Vhr,Xhr,zhr,VT,$1e,Qhr,Whr,HX,Hhr,Uhr,Jhr,XT,I1e,Yhr,Khr,UX,Zhr,epr,opr,zT,q1e,rpr,tpr,JX,apr,npr,spr,QT,N1e,lpr,ipr,YX,dpr,cpr,fpr,WT,j1e,mpr,gpr,KX,hpr,ppr,_pr,HT,D1e,upr,bpr,ZX,vpr,Fpr,Tpr,UT,G1e,Mpr,Epr,ez,Cpr,wpr,Apr,JT,O1e,ypr,Lpr,oz,xpr,kpr,Spr,YT,V1e,Rpr,Bpr,rz,Ppr,$pr,Ipr,KT,X1e,qpr,Npr,tz,jpr,Dpr,Gpr,ZT,z1e,Opr,Vpr,az,Xpr,zpr,Qpr,e8,Q1e,Wpr,Hpr,nz,Upr,Jpr,Ypr,o8,W1e,Kpr,Zpr,sz,e_r,o_r,r_r,r8,H1e,t_r,a_r,lz,n_r,s_r,l_r,t8,U1e,i_r,d_r,iz,c_r,f_r,m_r,a8,J1e,g_r,h_r,dz,p_r,__r,u_r,n8,Y1e,b_r,v_r,cz,F_r,T_r,M_r,s8,K1e,E_r,C_r,fz,w_r,A_r,y_r,l8,Z1e,L_r,x_r,mz,k_r,S_r,R_r,i8,ebe,B_r,P_r,gz,$_r,I_r,q_r,obe,N_r,j_r,o0,OBe,Pc,d8,rbe,r0,D_r,tbe,G_r,VBe,Ar,t0,O_r,$c,V_r,hz,X_r,z_r,pz,Q_r,W_r,H_r,a0,U_r,abe,J_r,Y_r,K_r,Ft,n0,Z_r,nbe,eur,our,Ic,rur,sbe,tur,aur,_z,nur,sur,lur,lbe,iur,dur,s0,cur,To,l0,fur,ibe,mur,gur,Cn,hur,dbe,pur,_ur,cbe,uur,bur,fbe,vur,Fur,Tur,se,c8,mbe,Mur,Eur,uz,Cur,wur,Aur,f8,gbe,yur,Lur,bz,xur,kur,Sur,m8,hbe,Rur,Bur,vz,Pur,$ur,Iur,g8,pbe,qur,Nur,Fz,jur,Dur,Gur,h8,_be,Our,Vur,Tz,Xur,zur,Qur,p8,ube,Wur,Hur,Mz,Uur,Jur,Yur,_8,bbe,Kur,Zur,Ez,e1r,o1r,r1r,u8,vbe,t1r,a1r,Cz,n1r,s1r,l1r,b8,Fbe,i1r,d1r,wz,c1r,f1r,m1r,v8,Tbe,g1r,h1r,Az,p1r,_1r,u1r,F8,Mbe,b1r,v1r,yz,F1r,T1r,M1r,T8,Ebe,E1r,C1r,Lz,w1r,A1r,y1r,M8,Cbe,L1r,x1r,xz,k1r,S1r,R1r,E8,wbe,B1r,P1r,kz,$1r,I1r,q1r,C8,Abe,N1r,j1r,Sz,D1r,G1r,O1r,w8,ybe,V1r,X1r,Rz,z1r,Q1r,W1r,A8,Lbe,H1r,U1r,Bz,J1r,Y1r,K1r,xbe,Z1r,ebr,i0,XBe,qc,y8,kbe,d0,obr,Sbe,rbr,zBe,yr,c0,tbr,Nc,abr,Pz,nbr,sbr,$z,lbr,ibr,dbr,f0,cbr,Rbe,fbr,mbr,gbr,Tt,m0,hbr,Bbe,pbr,_br,jc,ubr,Pbe,bbr,vbr,Iz,Fbr,Tbr,Mbr,$be,Ebr,Cbr,g0,wbr,Mo,h0,Abr,Ibe,ybr,Lbr,wn,xbr,qbe,kbr,Sbr,Nbe,Rbr,Bbr,jbe,Pbr,$br,Ibr,Dbe,L8,Gbe,qbr,Nbr,qz,jbr,Dbr,Gbr,Obe,Obr,Vbr,p0,QBe,Dc,x8,Vbe,_0,Xbr,Xbe,zbr,WBe,Lr,u0,Qbr,Gc,Wbr,Nz,Hbr,Ubr,jz,Jbr,Ybr,Kbr,b0,Zbr,zbe,e2r,o2r,r2r,Mt,v0,t2r,Qbe,a2r,n2r,Oc,s2r,Wbe,l2r,i2r,Dz,d2r,c2r,f2r,Hbe,m2r,g2r,F0,h2r,Eo,T0,p2r,Ube,_2r,u2r,An,b2r,Jbe,v2r,F2r,Ybe,T2r,M2r,Kbe,E2r,C2r,w2r,Y,k8,Zbe,A2r,y2r,Gz,L2r,x2r,k2r,S8,e2e,S2r,R2r,Oz,B2r,P2r,$2r,R8,o2e,I2r,q2r,Vz,N2r,j2r,D2r,B8,r2e,G2r,O2r,Xz,V2r,X2r,z2r,P8,t2e,Q2r,W2r,zz,H2r,U2r,J2r,$8,a2e,Y2r,K2r,Qz,Z2r,e3r,o3r,I8,n2e,r3r,t3r,Wz,a3r,n3r,s3r,q8,s2e,l3r,i3r,Hz,d3r,c3r,f3r,N8,l2e,m3r,g3r,Uz,h3r,p3r,_3r,j8,i2e,u3r,b3r,Jz,v3r,F3r,T3r,D8,d2e,M3r,E3r,Yz,C3r,w3r,A3r,G8,c2e,y3r,L3r,Kz,x3r,k3r,S3r,O8,f2e,R3r,B3r,Zz,P3r,$3r,I3r,V8,m2e,q3r,N3r,eQ,j3r,D3r,G3r,X8,g2e,O3r,V3r,oQ,X3r,z3r,Q3r,z8,h2e,W3r,H3r,rQ,U3r,J3r,Y3r,Q8,p2e,K3r,Z3r,tQ,e6r,o6r,r6r,W8,_2e,t6r,a6r,aQ,n6r,s6r,l6r,H8,u2e,i6r,d6r,nQ,c6r,f6r,m6r,U8,b2e,g6r,h6r,sQ,p6r,_6r,u6r,v2e,b6r,v6r,M0,HBe,Vc,J8,F2e,E0,F6r,T2e,T6r,UBe,xr,C0,M6r,Xc,E6r,lQ,C6r,w6r,iQ,A6r,y6r,L6r,w0,x6r,M2e,k6r,S6r,R6r,Et,A0,B6r,E2e,P6r,$6r,zc,I6r,C2e,q6r,N6r,dQ,j6r,D6r,G6r,w2e,O6r,V6r,y0,X6r,Co,L0,z6r,A2e,Q6r,W6r,yn,H6r,y2e,U6r,J6r,L2e,Y6r,K6r,x2e,Z6r,evr,ovr,K,Y8,k2e,rvr,tvr,cQ,avr,nvr,svr,K8,S2e,lvr,ivr,fQ,dvr,cvr,fvr,Z8,R2e,mvr,gvr,mQ,hvr,pvr,_vr,e9,B2e,uvr,bvr,gQ,vvr,Fvr,Tvr,o9,P2e,Mvr,Evr,hQ,Cvr,wvr,Avr,r9,$2e,yvr,Lvr,pQ,xvr,kvr,Svr,t9,I2e,Rvr,Bvr,_Q,Pvr,$vr,Ivr,a9,q2e,qvr,Nvr,uQ,jvr,Dvr,Gvr,n9,N2e,Ovr,Vvr,bQ,Xvr,zvr,Qvr,s9,j2e,Wvr,Hvr,vQ,Uvr,Jvr,Yvr,l9,D2e,Kvr,Zvr,FQ,eFr,oFr,rFr,i9,G2e,tFr,aFr,TQ,nFr,sFr,lFr,d9,O2e,iFr,dFr,MQ,cFr,fFr,mFr,c9,V2e,gFr,hFr,EQ,pFr,_Fr,uFr,f9,X2e,bFr,vFr,CQ,FFr,TFr,MFr,m9,z2e,EFr,CFr,wQ,wFr,AFr,yFr,g9,Q2e,LFr,xFr,AQ,kFr,SFr,RFr,h9,W2e,BFr,PFr,yQ,$Fr,IFr,qFr,p9,H2e,NFr,jFr,LQ,DFr,GFr,OFr,_9,U2e,VFr,XFr,xQ,zFr,QFr,WFr,J2e,HFr,UFr,x0,JBe,Qc,u9,Y2e,k0,JFr,K2e,YFr,YBe,kr,S0,KFr,Wc,ZFr,kQ,eTr,oTr,SQ,rTr,tTr,aTr,R0,nTr,Z2e,sTr,lTr,iTr,Ct,B0,dTr,e3e,cTr,fTr,Hc,mTr,o3e,gTr,hTr,RQ,pTr,_Tr,uTr,r3e,bTr,vTr,P0,FTr,wo,$0,TTr,t3e,MTr,ETr,Ln,CTr,a3e,wTr,ATr,n3e,yTr,LTr,s3e,xTr,kTr,STr,l3e,b9,i3e,RTr,BTr,BQ,PTr,$Tr,ITr,d3e,qTr,NTr,I0,KBe,Uc,v9,c3e,q0,jTr,f3e,DTr,ZBe,Sr,N0,GTr,Jc,OTr,PQ,VTr,XTr,$Q,zTr,QTr,WTr,j0,HTr,m3e,UTr,JTr,YTr,wt,D0,KTr,g3e,ZTr,e8r,Yc,o8r,h3e,r8r,t8r,IQ,a8r,n8r,s8r,p3e,l8r,i8r,G0,d8r,Ao,O0,c8r,_3e,f8r,m8r,xn,g8r,u3e,h8r,p8r,b3e,_8r,u8r,v3e,b8r,v8r,F8r,F3e,F9,T3e,T8r,M8r,qQ,E8r,C8r,w8r,M3e,A8r,y8r,V0,ePe,Kc,T9,E3e,X0,L8r,C3e,x8r,oPe,Rr,z0,k8r,Zc,S8r,NQ,R8r,B8r,jQ,P8r,$8r,I8r,Q0,q8r,w3e,N8r,j8r,D8r,At,W0,G8r,A3e,O8r,V8r,ef,X8r,y3e,z8r,Q8r,DQ,W8r,H8r,U8r,L3e,J8r,Y8r,H0,K8r,yo,U0,Z8r,x3e,e9r,o9r,kn,r9r,k3e,t9r,a9r,S3e,n9r,s9r,R3e,l9r,i9r,d9r,z,M9,B3e,c9r,f9r,GQ,m9r,g9r,h9r,E9,P3e,p9r,_9r,OQ,u9r,b9r,v9r,C9,$3e,F9r,T9r,VQ,M9r,E9r,C9r,w9,I3e,w9r,A9r,XQ,y9r,L9r,x9r,A9,q3e,k9r,S9r,zQ,R9r,B9r,P9r,y9,N3e,$9r,I9r,QQ,q9r,N9r,j9r,L9,j3e,D9r,G9r,WQ,O9r,V9r,X9r,x9,D3e,z9r,Q9r,HQ,W9r,H9r,U9r,k9,G3e,J9r,Y9r,UQ,K9r,Z9r,eMr,S9,O3e,oMr,rMr,JQ,tMr,aMr,nMr,R9,V3e,sMr,lMr,YQ,iMr,dMr,cMr,B9,X3e,fMr,mMr,KQ,gMr,hMr,pMr,P9,z3e,_Mr,uMr,ZQ,bMr,vMr,FMr,$9,Q3e,TMr,MMr,eW,EMr,CMr,wMr,I9,W3e,AMr,yMr,oW,LMr,xMr,kMr,q9,H3e,SMr,RMr,rW,BMr,PMr,$Mr,N9,U3e,IMr,qMr,tW,NMr,jMr,DMr,j9,J3e,GMr,OMr,aW,VMr,XMr,zMr,D9,Y3e,QMr,WMr,nW,HMr,UMr,JMr,G9,K3e,YMr,KMr,sW,ZMr,e4r,o4r,O9,Z3e,r4r,t4r,lW,a4r,n4r,s4r,V9,e6e,l4r,i4r,iW,d4r,c4r,f4r,X9,o6e,m4r,g4r,dW,h4r,p4r,_4r,z9,r6e,u4r,b4r,cW,v4r,F4r,T4r,Q9,t6e,M4r,E4r,fW,C4r,w4r,A4r,a6e,y4r,L4r,J0,rPe,of,W9,n6e,Y0,x4r,s6e,k4r,tPe,Br,K0,S4r,rf,R4r,mW,B4r,P4r,gW,$4r,I4r,q4r,Z0,N4r,l6e,j4r,D4r,G4r,yt,ey,O4r,i6e,V4r,X4r,tf,z4r,d6e,Q4r,W4r,hW,H4r,U4r,J4r,c6e,Y4r,K4r,oy,Z4r,Lo,ry,eEr,f6e,oEr,rEr,Sn,tEr,m6e,aEr,nEr,g6e,sEr,lEr,h6e,iEr,dEr,cEr,ca,H9,p6e,fEr,mEr,pW,gEr,hEr,pEr,U9,_6e,_Er,uEr,_W,bEr,vEr,FEr,J9,u6e,TEr,MEr,uW,EEr,CEr,wEr,Y9,b6e,AEr,yEr,bW,LEr,xEr,kEr,K9,v6e,SEr,REr,vW,BEr,PEr,$Er,F6e,IEr,qEr,ty,aPe,af,Z9,T6e,ay,NEr,M6e,jEr,nPe,Pr,ny,DEr,nf,GEr,FW,OEr,VEr,TW,XEr,zEr,QEr,sy,WEr,E6e,HEr,UEr,JEr,Lt,ly,YEr,C6e,KEr,ZEr,sf,e5r,w6e,o5r,r5r,MW,t5r,a5r,n5r,A6e,s5r,l5r,iy,i5r,xo,dy,d5r,y6e,c5r,f5r,Rn,m5r,L6e,g5r,h5r,x6e,p5r,_5r,k6e,u5r,b5r,v5r,me,eM,S6e,F5r,T5r,EW,M5r,E5r,C5r,oM,R6e,w5r,A5r,CW,y5r,L5r,x5r,rM,B6e,k5r,S5r,wW,R5r,B5r,P5r,tM,P6e,$5r,I5r,AW,q5r,N5r,j5r,aM,$6e,D5r,G5r,yW,O5r,V5r,X5r,nM,I6e,z5r,Q5r,LW,W5r,H5r,U5r,sM,q6e,J5r,Y5r,xW,K5r,Z5r,eCr,lM,N6e,oCr,rCr,kW,tCr,aCr,nCr,iM,j6e,sCr,lCr,SW,iCr,dCr,cCr,dM,D6e,fCr,mCr,RW,gCr,hCr,pCr,cM,G6e,_Cr,uCr,BW,bCr,vCr,FCr,fM,O6e,TCr,MCr,PW,ECr,CCr,wCr,V6e,ACr,yCr,cy,sPe,lf,mM,X6e,fy,LCr,z6e,xCr,lPe,$r,my,kCr,df,SCr,$W,RCr,BCr,IW,PCr,$Cr,ICr,gy,qCr,Q6e,NCr,jCr,DCr,xt,hy,GCr,W6e,OCr,VCr,cf,XCr,H6e,zCr,QCr,qW,WCr,HCr,UCr,U6e,JCr,YCr,py,KCr,ko,_y,ZCr,J6e,ewr,owr,Bn,rwr,Y6e,twr,awr,K6e,nwr,swr,Z6e,lwr,iwr,dwr,ve,gM,eve,cwr,fwr,NW,mwr,gwr,hwr,hM,ove,pwr,_wr,jW,uwr,bwr,vwr,pM,rve,Fwr,Twr,DW,Mwr,Ewr,Cwr,_M,tve,wwr,Awr,GW,ywr,Lwr,xwr,uM,ave,kwr,Swr,OW,Rwr,Bwr,Pwr,bM,nve,$wr,Iwr,VW,qwr,Nwr,jwr,vM,sve,Dwr,Gwr,XW,Owr,Vwr,Xwr,FM,lve,zwr,Qwr,zW,Wwr,Hwr,Uwr,TM,ive,Jwr,Ywr,QW,Kwr,Zwr,eAr,MM,dve,oAr,rAr,WW,tAr,aAr,nAr,cve,sAr,lAr,uy,iPe,ff,EM,fve,by,iAr,mve,dAr,dPe,Ir,vy,cAr,mf,fAr,HW,mAr,gAr,UW,hAr,pAr,_Ar,Fy,uAr,gve,bAr,vAr,FAr,kt,Ty,TAr,hve,MAr,EAr,gf,CAr,pve,wAr,AAr,JW,yAr,LAr,xAr,_ve,kAr,SAr,My,RAr,So,Ey,BAr,uve,PAr,$Ar,Pn,IAr,bve,qAr,NAr,vve,jAr,DAr,Fve,GAr,OAr,VAr,Ee,CM,Tve,XAr,zAr,YW,QAr,WAr,HAr,wM,Mve,UAr,JAr,KW,YAr,KAr,ZAr,AM,Eve,e0r,o0r,ZW,r0r,t0r,a0r,yM,Cve,n0r,s0r,eH,l0r,i0r,d0r,LM,wve,c0r,f0r,oH,m0r,g0r,h0r,xM,Ave,p0r,_0r,rH,u0r,b0r,v0r,kM,yve,F0r,T0r,tH,M0r,E0r,C0r,SM,Lve,w0r,A0r,aH,y0r,L0r,x0r,RM,xve,k0r,S0r,nH,R0r,B0r,P0r,kve,$0r,I0r,Cy,cPe,hf,BM,Sve,wy,q0r,Rve,N0r,fPe,qr,Ay,j0r,pf,D0r,sH,G0r,O0r,lH,V0r,X0r,z0r,yy,Q0r,Bve,W0r,H0r,U0r,St,Ly,J0r,Pve,Y0r,K0r,_f,Z0r,$ve,eyr,oyr,iH,ryr,tyr,ayr,Ive,nyr,syr,xy,lyr,Ro,ky,iyr,qve,dyr,cyr,$n,fyr,Nve,myr,gyr,jve,hyr,pyr,Dve,_yr,uyr,byr,Fe,PM,Gve,vyr,Fyr,dH,Tyr,Myr,Eyr,$M,Ove,Cyr,wyr,cH,Ayr,yyr,Lyr,IM,Vve,xyr,kyr,fH,Syr,Ryr,Byr,qM,Xve,Pyr,$yr,mH,Iyr,qyr,Nyr,NM,zve,jyr,Dyr,gH,Gyr,Oyr,Vyr,jM,Qve,Xyr,zyr,hH,Qyr,Wyr,Hyr,DM,Wve,Uyr,Jyr,pH,Yyr,Kyr,Zyr,GM,Hve,eLr,oLr,_H,rLr,tLr,aLr,OM,Uve,nLr,sLr,uH,lLr,iLr,dLr,VM,Jve,cLr,fLr,bH,mLr,gLr,hLr,Yve,pLr,_Lr,Sy,mPe,uf,XM,Kve,Ry,uLr,Zve,bLr,gPe,Nr,By,vLr,bf,FLr,vH,TLr,MLr,FH,ELr,CLr,wLr,Py,ALr,eFe,yLr,LLr,xLr,Rt,$y,kLr,oFe,SLr,RLr,vf,BLr,rFe,PLr,$Lr,TH,ILr,qLr,NLr,tFe,jLr,DLr,Iy,GLr,Bo,qy,OLr,aFe,VLr,XLr,In,zLr,nFe,QLr,WLr,sFe,HLr,ULr,lFe,JLr,YLr,KLr,Te,zM,iFe,ZLr,e7r,MH,o7r,r7r,t7r,QM,dFe,a7r,n7r,EH,s7r,l7r,i7r,WM,cFe,d7r,c7r,CH,f7r,m7r,g7r,HM,fFe,h7r,p7r,wH,_7r,u7r,b7r,UM,mFe,v7r,F7r,AH,T7r,M7r,E7r,JM,gFe,C7r,w7r,yH,A7r,y7r,L7r,YM,hFe,x7r,k7r,LH,S7r,R7r,B7r,KM,pFe,P7r,$7r,xH,I7r,q7r,N7r,ZM,_Fe,j7r,D7r,kH,G7r,O7r,V7r,e4,uFe,X7r,z7r,SH,Q7r,W7r,H7r,bFe,U7r,J7r,Ny,hPe,Ff,o4,vFe,jy,Y7r,FFe,K7r,pPe,jr,Dy,Z7r,Tf,exr,RH,oxr,rxr,BH,txr,axr,nxr,Gy,sxr,TFe,lxr,ixr,dxr,Bt,Oy,cxr,MFe,fxr,mxr,Mf,gxr,EFe,hxr,pxr,PH,_xr,uxr,bxr,CFe,vxr,Fxr,Vy,Txr,Po,Xy,Mxr,wFe,Exr,Cxr,qn,wxr,AFe,Axr,yxr,yFe,Lxr,xxr,LFe,kxr,Sxr,Rxr,Be,r4,xFe,Bxr,Pxr,$H,$xr,Ixr,qxr,t4,kFe,Nxr,jxr,IH,Dxr,Gxr,Oxr,a4,SFe,Vxr,Xxr,qH,zxr,Qxr,Wxr,n4,RFe,Hxr,Uxr,NH,Jxr,Yxr,Kxr,s4,BFe,Zxr,ekr,jH,okr,rkr,tkr,l4,PFe,akr,nkr,DH,skr,lkr,ikr,i4,$Fe,dkr,ckr,GH,fkr,mkr,gkr,d4,IFe,hkr,pkr,OH,_kr,ukr,bkr,qFe,vkr,Fkr,zy,_Pe,Ef,c4,NFe,Qy,Tkr,jFe,Mkr,uPe,Dr,Wy,Ekr,Cf,Ckr,VH,wkr,Akr,XH,ykr,Lkr,xkr,Hy,kkr,DFe,Skr,Rkr,Bkr,Pt,Uy,Pkr,GFe,$kr,Ikr,wf,qkr,OFe,Nkr,jkr,zH,Dkr,Gkr,Okr,VFe,Vkr,Xkr,Jy,zkr,$o,Yy,Qkr,XFe,Wkr,Hkr,Nn,Ukr,zFe,Jkr,Ykr,QFe,Kkr,Zkr,WFe,eSr,oSr,rSr,Pe,f4,HFe,tSr,aSr,QH,nSr,sSr,lSr,m4,UFe,iSr,dSr,WH,cSr,fSr,mSr,g4,JFe,gSr,hSr,HH,pSr,_Sr,uSr,h4,YFe,bSr,vSr,UH,FSr,TSr,MSr,p4,KFe,ESr,CSr,JH,wSr,ASr,ySr,_4,ZFe,LSr,xSr,YH,kSr,SSr,RSr,u4,eTe,BSr,PSr,KH,$Sr,ISr,qSr,b4,oTe,NSr,jSr,ZH,DSr,GSr,OSr,rTe,VSr,XSr,Ky,bPe,Af,v4,tTe,Zy,zSr,aTe,QSr,vPe,Gr,eL,WSr,yf,HSr,eU,USr,JSr,oU,YSr,KSr,ZSr,oL,eRr,nTe,oRr,rRr,tRr,$t,rL,aRr,sTe,nRr,sRr,Lf,lRr,lTe,iRr,dRr,rU,cRr,fRr,mRr,iTe,gRr,hRr,tL,pRr,Io,aL,_Rr,dTe,uRr,bRr,jn,vRr,cTe,FRr,TRr,fTe,MRr,ERr,mTe,CRr,wRr,ARr,gTe,F4,hTe,yRr,LRr,tU,xRr,kRr,SRr,pTe,RRr,BRr,nL,FPe,xf,T4,_Te,sL,PRr,uTe,$Rr,TPe,Or,lL,IRr,kf,qRr,aU,NRr,jRr,nU,DRr,GRr,ORr,iL,VRr,bTe,XRr,zRr,QRr,It,dL,WRr,vTe,HRr,URr,Sf,JRr,FTe,YRr,KRr,sU,ZRr,eBr,oBr,TTe,rBr,tBr,cL,aBr,qo,fL,nBr,MTe,sBr,lBr,Dn,iBr,ETe,dBr,cBr,CTe,fBr,mBr,wTe,gBr,hBr,pBr,mL,M4,ATe,_Br,uBr,lU,bBr,vBr,FBr,E4,yTe,TBr,MBr,iU,EBr,CBr,wBr,LTe,ABr,yBr,gL,MPe,Rf,C4,xTe,hL,LBr,kTe,xBr,EPe,Vr,pL,kBr,Bf,SBr,dU,RBr,BBr,cU,PBr,$Br,IBr,_L,qBr,STe,NBr,jBr,DBr,qt,uL,GBr,RTe,OBr,VBr,Pf,XBr,BTe,zBr,QBr,fU,WBr,HBr,UBr,PTe,JBr,YBr,bL,KBr,No,vL,ZBr,$Te,ePr,oPr,Gn,rPr,ITe,tPr,aPr,qTe,nPr,sPr,NTe,lPr,iPr,dPr,jTe,w4,DTe,cPr,fPr,mU,mPr,gPr,hPr,GTe,pPr,_Pr,FL,CPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),kE=new X({}),SE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new uPr({props:{warning:!0,$$slots:{default:[t5t]},$$scope:{ctx:If}}}),RE=new X({}),BE=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/configuration_auto.py#L560"}}),IE=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/configuration_auto.py#L583"}}),qE=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),NE=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/configuration_auto.py#L705"}}),jE=new X({}),DE=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/tokenization_auto.py#L352"}}),VE=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16839/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/tokenization_auto.py#L366"}}),XE=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),zE=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/tokenization_auto.py#L562"}}),QE=new X({}),WE=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),JE=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16839/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),qh=new uPr({props:{$$slots:{default:[a5t]},$$scope:{ctx:If}}}),YE=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),KE=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),ZE=new X({}),e5=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/processing_auto.py#L70"}}),t5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/processing_auto.py#L84"}}),Hh=new uPr({props:{$$slots:{default:[n5t]},$$scope:{ctx:If}}}),a5=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),n5=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/processing_auto.py#L237"}}),s5=new X({}),l5=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L711"}}),d5=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),c5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),f5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g5=new X({}),h5=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L718"}}),_5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),u5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),b5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F5=new X({}),T5=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L733"}}),E5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),C5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),w5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),A5=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y5=new X({}),L5=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L740"}}),k5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),R5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P5=new X({}),$5=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L747"}}),q5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),N5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),j5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G5=new X({}),O5=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L756"}}),X5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Q5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H5=new X({}),U5=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L790"}}),Y5=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),K5=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Z5=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oC=new X({}),rC=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L797"}}),aC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),sC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iC=new X({}),dC=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L783"}}),fC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),mC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),gC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),hC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pC=new X({}),_C=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L765"}}),bC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),vC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),FC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),TC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MC=new X({}),EC=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L772"}}),wC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),AC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),yC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),LC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xC=new X({}),kC=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L806"}}),RC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),BC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),PC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),$C=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IC=new X({}),qC=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L845"}}),jC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),DC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),GC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),OC=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VC=new X({}),XC=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L852"}}),QC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),HC=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JC=new X({}),YC=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L875"}}),ZC=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),ow=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),rw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tw=new X({}),aw=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L859"}}),sw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),iw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cw=new X({}),fw=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L866"}}),gw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),pw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),vw=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L884"}}),Tw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Ew=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L891"}}),Lw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L838"}}),$w=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),qw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L813"}}),Ow=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Xw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L820"}}),Uw=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Yw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),eA=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_auto.py#L829"}}),rA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),aA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sA=new X({}),lA=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),dA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),cA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),fA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gA=new X({}),hA=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),_A=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),uA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),bA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FA=new X({}),TA=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),EA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),wA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),AA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yA=new X({}),LA=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),kA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),SA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),RA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),PA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$A=new X({}),IA=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),NA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),DA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),GA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OA=new X({}),VA=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),zA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),QA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),WA=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),HA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UA=new X({}),JA=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),KA=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),ZA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),e0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),o0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r0=new X({}),t0=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),n0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),l0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d0=new X({}),c0=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),m0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),h0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),p0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_0=new X({}),u0=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),v0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),F0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),T0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),M0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E0=new X({}),C0=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),A0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),L0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k0=new X({}),S0=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),B0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),P0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),$0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q0=new X({}),N0=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),D0=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),O0=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),V0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X0=new X({}),z0=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),W0=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),H0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),U0=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y0=new X({}),K0=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),ey=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),ry=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),ty=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),ly=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),dy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),cy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),hy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),py=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),_y=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),Ty=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),My=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Ey=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Cy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wy=new X({}),Ay=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Ly=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),ky=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Sy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),By=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),$y=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Iy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),qy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Ny=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jy=new X({}),Dy=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),Oy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Vy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),Xy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qy=new X({}),Wy=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),Uy=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),Jy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),Yy=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),Ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),eL=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),rL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),dL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),fL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),gL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hL=new X({}),pL=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),uL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L389"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),vL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16839/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16839/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16839/src/transformers/models/auto/auto_factory.py#L417"}}),FL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),qf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),AE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),On=a("a"),yE=o("AutoConfig"),Vn=o(", "),Xn=a("a"),LE=o("AutoModel"),Gi=o(`, and
`),zn=a("a"),xE=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),b7=o("will create a model that is an instance of "),Vi=a("a"),v7=o("BertModel"),F7=o("."),zo=l(),Ga=a("p"),T7=o("There is one class of "),Df=a("code"),M7=o("AutoModel"),IIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),ERe=l(),Xi=a("h2"),Gf=a("a"),nY=a("span"),f(kE.$$.fragment),qIe=l(),sY=a("span"),NIe=o("Extending the Auto Classes"),CRe=l(),Qn=a("p"),jIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=a("code"),DIe=o("NewModel"),GIe=o(", make sure you have a "),iY=a("code"),OIe=o("NewModelConfig"),VIe=o(` then you can add those to the auto
classes like this:`),wRe=l(),f(SE.$$.fragment),ARe=l(),E7=a("p"),XIe=o("You will then be able to use the auto classes like you would usually do!"),yRe=l(),f(Of.$$.fragment),LRe=l(),zi=a("h2"),Vf=a("a"),dY=a("span"),f(RE.$$.fragment),zIe=l(),cY=a("span"),QIe=o("AutoConfig"),xRe=l(),Qo=a("div"),f(BE.$$.fragment),WIe=l(),PE=a("p"),HIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C7=a("a"),UIe=o("from_pretrained()"),JIe=o(" class method."),YIe=l(),$E=a("p"),KIe=o("This class cannot be instantiated directly using "),fY=a("code"),ZIe=o("__init__()"),eqe=o(" (throws an error)."),oqe=l(),mo=a("div"),f(IE.$$.fragment),rqe=l(),mY=a("p"),tqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),aqe=l(),Qi=a("p"),nqe=o("The configuration class to instantiate is selected based on the "),gY=a("code"),sqe=o("model_type"),lqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=a("code"),iqe=o("pretrained_model_name_or_path"),dqe=o(":"),cqe=l(),v=a("ul"),Xf=a("li"),pY=a("strong"),fqe=o("albert"),mqe=o(" \u2014 "),w7=a("a"),gqe=o("AlbertConfig"),hqe=o(" (ALBERT model)"),pqe=l(),zf=a("li"),_Y=a("strong"),_qe=o("bart"),uqe=o(" \u2014 "),A7=a("a"),bqe=o("BartConfig"),vqe=o(" (BART model)"),Fqe=l(),Qf=a("li"),uY=a("strong"),Tqe=o("beit"),Mqe=o(" \u2014 "),y7=a("a"),Eqe=o("BeitConfig"),Cqe=o(" (BEiT model)"),wqe=l(),Wf=a("li"),bY=a("strong"),Aqe=o("bert"),yqe=o(" \u2014 "),L7=a("a"),Lqe=o("BertConfig"),xqe=o(" (BERT model)"),kqe=l(),Hf=a("li"),vY=a("strong"),Sqe=o("bert-generation"),Rqe=o(" \u2014 "),x7=a("a"),Bqe=o("BertGenerationConfig"),Pqe=o(" (Bert Generation model)"),$qe=l(),Uf=a("li"),FY=a("strong"),Iqe=o("big_bird"),qqe=o(" \u2014 "),k7=a("a"),Nqe=o("BigBirdConfig"),jqe=o(" (BigBird model)"),Dqe=l(),Jf=a("li"),TY=a("strong"),Gqe=o("bigbird_pegasus"),Oqe=o(" \u2014 "),S7=a("a"),Vqe=o("BigBirdPegasusConfig"),Xqe=o(" (BigBirdPegasus model)"),zqe=l(),Yf=a("li"),MY=a("strong"),Qqe=o("blenderbot"),Wqe=o(" \u2014 "),R7=a("a"),Hqe=o("BlenderbotConfig"),Uqe=o(" (Blenderbot model)"),Jqe=l(),Kf=a("li"),EY=a("strong"),Yqe=o("blenderbot-small"),Kqe=o(" \u2014 "),B7=a("a"),Zqe=o("BlenderbotSmallConfig"),eNe=o(" (BlenderbotSmall model)"),oNe=l(),Zf=a("li"),CY=a("strong"),rNe=o("camembert"),tNe=o(" \u2014 "),P7=a("a"),aNe=o("CamembertConfig"),nNe=o(" (CamemBERT model)"),sNe=l(),em=a("li"),wY=a("strong"),lNe=o("canine"),iNe=o(" \u2014 "),$7=a("a"),dNe=o("CanineConfig"),cNe=o(" (Canine model)"),fNe=l(),om=a("li"),AY=a("strong"),mNe=o("clip"),gNe=o(" \u2014 "),I7=a("a"),hNe=o("CLIPConfig"),pNe=o(" (CLIP model)"),_Ne=l(),rm=a("li"),yY=a("strong"),uNe=o("convbert"),bNe=o(" \u2014 "),q7=a("a"),vNe=o("ConvBertConfig"),FNe=o(" (ConvBERT model)"),TNe=l(),tm=a("li"),LY=a("strong"),MNe=o("convnext"),ENe=o(" \u2014 "),N7=a("a"),CNe=o("ConvNextConfig"),wNe=o(" (ConvNext model)"),ANe=l(),am=a("li"),xY=a("strong"),yNe=o("ctrl"),LNe=o(" \u2014 "),j7=a("a"),xNe=o("CTRLConfig"),kNe=o(" (CTRL model)"),SNe=l(),nm=a("li"),kY=a("strong"),RNe=o("data2vec-audio"),BNe=o(" \u2014 "),D7=a("a"),PNe=o("Data2VecAudioConfig"),$Ne=o(" (Data2VecAudio model)"),INe=l(),sm=a("li"),SY=a("strong"),qNe=o("data2vec-text"),NNe=o(" \u2014 "),G7=a("a"),jNe=o("Data2VecTextConfig"),DNe=o(" (Data2VecText model)"),GNe=l(),lm=a("li"),RY=a("strong"),ONe=o("data2vec-vision"),VNe=o(" \u2014 "),O7=a("a"),XNe=o("Data2VecVisionConfig"),zNe=o(" (Data2VecVision model)"),QNe=l(),im=a("li"),BY=a("strong"),WNe=o("deberta"),HNe=o(" \u2014 "),V7=a("a"),UNe=o("DebertaConfig"),JNe=o(" (DeBERTa model)"),YNe=l(),dm=a("li"),PY=a("strong"),KNe=o("deberta-v2"),ZNe=o(" \u2014 "),X7=a("a"),eje=o("DebertaV2Config"),oje=o(" (DeBERTa-v2 model)"),rje=l(),cm=a("li"),$Y=a("strong"),tje=o("decision_transformer"),aje=o(" \u2014 "),z7=a("a"),nje=o("DecisionTransformerConfig"),sje=o(" (Decision Transformer model)"),lje=l(),fm=a("li"),IY=a("strong"),ije=o("deit"),dje=o(" \u2014 "),Q7=a("a"),cje=o("DeiTConfig"),fje=o(" (DeiT model)"),mje=l(),mm=a("li"),qY=a("strong"),gje=o("detr"),hje=o(" \u2014 "),W7=a("a"),pje=o("DetrConfig"),_je=o(" (DETR model)"),uje=l(),gm=a("li"),NY=a("strong"),bje=o("distilbert"),vje=o(" \u2014 "),H7=a("a"),Fje=o("DistilBertConfig"),Tje=o(" (DistilBERT model)"),Mje=l(),hm=a("li"),jY=a("strong"),Eje=o("dpr"),Cje=o(" \u2014 "),U7=a("a"),wje=o("DPRConfig"),Aje=o(" (DPR model)"),yje=l(),pm=a("li"),DY=a("strong"),Lje=o("dpt"),xje=o(" \u2014 "),J7=a("a"),kje=o("DPTConfig"),Sje=o(" (DPT model)"),Rje=l(),_m=a("li"),GY=a("strong"),Bje=o("electra"),Pje=o(" \u2014 "),Y7=a("a"),$je=o("ElectraConfig"),Ije=o(" (ELECTRA model)"),qje=l(),um=a("li"),OY=a("strong"),Nje=o("encoder-decoder"),jje=o(" \u2014 "),K7=a("a"),Dje=o("EncoderDecoderConfig"),Gje=o(" (Encoder decoder model)"),Oje=l(),bm=a("li"),VY=a("strong"),Vje=o("flaubert"),Xje=o(" \u2014 "),Z7=a("a"),zje=o("FlaubertConfig"),Qje=o(" (FlauBERT model)"),Wje=l(),vm=a("li"),XY=a("strong"),Hje=o("fnet"),Uje=o(" \u2014 "),ex=a("a"),Jje=o("FNetConfig"),Yje=o(" (FNet model)"),Kje=l(),Fm=a("li"),zY=a("strong"),Zje=o("fsmt"),eDe=o(" \u2014 "),ox=a("a"),oDe=o("FSMTConfig"),rDe=o(" (FairSeq Machine-Translation model)"),tDe=l(),Tm=a("li"),QY=a("strong"),aDe=o("funnel"),nDe=o(" \u2014 "),rx=a("a"),sDe=o("FunnelConfig"),lDe=o(" (Funnel Transformer model)"),iDe=l(),Mm=a("li"),WY=a("strong"),dDe=o("glpn"),cDe=o(" \u2014 "),tx=a("a"),fDe=o("GLPNConfig"),mDe=o(" (GLPN model)"),gDe=l(),Em=a("li"),HY=a("strong"),hDe=o("gpt2"),pDe=o(" \u2014 "),ax=a("a"),_De=o("GPT2Config"),uDe=o(" (OpenAI GPT-2 model)"),bDe=l(),Cm=a("li"),UY=a("strong"),vDe=o("gpt_neo"),FDe=o(" \u2014 "),nx=a("a"),TDe=o("GPTNeoConfig"),MDe=o(" (GPT Neo model)"),EDe=l(),wm=a("li"),JY=a("strong"),CDe=o("gptj"),wDe=o(" \u2014 "),sx=a("a"),ADe=o("GPTJConfig"),yDe=o(" (GPT-J model)"),LDe=l(),Am=a("li"),YY=a("strong"),xDe=o("hubert"),kDe=o(" \u2014 "),lx=a("a"),SDe=o("HubertConfig"),RDe=o(" (Hubert model)"),BDe=l(),ym=a("li"),KY=a("strong"),PDe=o("ibert"),$De=o(" \u2014 "),ix=a("a"),IDe=o("IBertConfig"),qDe=o(" (I-BERT model)"),NDe=l(),Lm=a("li"),ZY=a("strong"),jDe=o("imagegpt"),DDe=o(" \u2014 "),dx=a("a"),GDe=o("ImageGPTConfig"),ODe=o(" (ImageGPT model)"),VDe=l(),xm=a("li"),eK=a("strong"),XDe=o("layoutlm"),zDe=o(" \u2014 "),cx=a("a"),QDe=o("LayoutLMConfig"),WDe=o(" (LayoutLM model)"),HDe=l(),km=a("li"),oK=a("strong"),UDe=o("layoutlmv2"),JDe=o(" \u2014 "),fx=a("a"),YDe=o("LayoutLMv2Config"),KDe=o(" (LayoutLMv2 model)"),ZDe=l(),Sm=a("li"),rK=a("strong"),eGe=o("led"),oGe=o(" \u2014 "),mx=a("a"),rGe=o("LEDConfig"),tGe=o(" (LED model)"),aGe=l(),Rm=a("li"),tK=a("strong"),nGe=o("longformer"),sGe=o(" \u2014 "),gx=a("a"),lGe=o("LongformerConfig"),iGe=o(" (Longformer model)"),dGe=l(),Bm=a("li"),aK=a("strong"),cGe=o("luke"),fGe=o(" \u2014 "),hx=a("a"),mGe=o("LukeConfig"),gGe=o(" (LUKE model)"),hGe=l(),Pm=a("li"),nK=a("strong"),pGe=o("lxmert"),_Ge=o(" \u2014 "),px=a("a"),uGe=o("LxmertConfig"),bGe=o(" (LXMERT model)"),vGe=l(),$m=a("li"),sK=a("strong"),FGe=o("m2m_100"),TGe=o(" \u2014 "),_x=a("a"),MGe=o("M2M100Config"),EGe=o(" (M2M100 model)"),CGe=l(),Im=a("li"),lK=a("strong"),wGe=o("marian"),AGe=o(" \u2014 "),ux=a("a"),yGe=o("MarianConfig"),LGe=o(" (Marian model)"),xGe=l(),qm=a("li"),iK=a("strong"),kGe=o("maskformer"),SGe=o(" \u2014 "),bx=a("a"),RGe=o("MaskFormerConfig"),BGe=o(" (MaskFormer model)"),PGe=l(),Nm=a("li"),dK=a("strong"),$Ge=o("mbart"),IGe=o(" \u2014 "),vx=a("a"),qGe=o("MBartConfig"),NGe=o(" (mBART model)"),jGe=l(),jm=a("li"),cK=a("strong"),DGe=o("megatron-bert"),GGe=o(" \u2014 "),Fx=a("a"),OGe=o("MegatronBertConfig"),VGe=o(" (MegatronBert model)"),XGe=l(),Dm=a("li"),fK=a("strong"),zGe=o("mobilebert"),QGe=o(" \u2014 "),Tx=a("a"),WGe=o("MobileBertConfig"),HGe=o(" (MobileBERT model)"),UGe=l(),Gm=a("li"),mK=a("strong"),JGe=o("mpnet"),YGe=o(" \u2014 "),Mx=a("a"),KGe=o("MPNetConfig"),ZGe=o(" (MPNet model)"),eOe=l(),Om=a("li"),gK=a("strong"),oOe=o("mt5"),rOe=o(" \u2014 "),Ex=a("a"),tOe=o("MT5Config"),aOe=o(" (mT5 model)"),nOe=l(),Vm=a("li"),hK=a("strong"),sOe=o("nystromformer"),lOe=o(" \u2014 "),Cx=a("a"),iOe=o("NystromformerConfig"),dOe=o(" (Nystromformer model)"),cOe=l(),Xm=a("li"),pK=a("strong"),fOe=o("openai-gpt"),mOe=o(" \u2014 "),wx=a("a"),gOe=o("OpenAIGPTConfig"),hOe=o(" (OpenAI GPT model)"),pOe=l(),zm=a("li"),_K=a("strong"),_Oe=o("pegasus"),uOe=o(" \u2014 "),Ax=a("a"),bOe=o("PegasusConfig"),vOe=o(" (Pegasus model)"),FOe=l(),Qm=a("li"),uK=a("strong"),TOe=o("perceiver"),MOe=o(" \u2014 "),yx=a("a"),EOe=o("PerceiverConfig"),COe=o(" (Perceiver model)"),wOe=l(),Wm=a("li"),bK=a("strong"),AOe=o("plbart"),yOe=o(" \u2014 "),Lx=a("a"),LOe=o("PLBartConfig"),xOe=o(" (PLBart model)"),kOe=l(),Hm=a("li"),vK=a("strong"),SOe=o("poolformer"),ROe=o(" \u2014 "),xx=a("a"),BOe=o("PoolFormerConfig"),POe=o(" (PoolFormer model)"),$Oe=l(),Um=a("li"),FK=a("strong"),IOe=o("prophetnet"),qOe=o(" \u2014 "),kx=a("a"),NOe=o("ProphetNetConfig"),jOe=o(" (ProphetNet model)"),DOe=l(),Jm=a("li"),TK=a("strong"),GOe=o("qdqbert"),OOe=o(" \u2014 "),Sx=a("a"),VOe=o("QDQBertConfig"),XOe=o(" (QDQBert model)"),zOe=l(),Ym=a("li"),MK=a("strong"),QOe=o("rag"),WOe=o(" \u2014 "),Rx=a("a"),HOe=o("RagConfig"),UOe=o(" (RAG model)"),JOe=l(),Km=a("li"),EK=a("strong"),YOe=o("realm"),KOe=o(" \u2014 "),Bx=a("a"),ZOe=o("RealmConfig"),eVe=o(" (Realm model)"),oVe=l(),Zm=a("li"),CK=a("strong"),rVe=o("reformer"),tVe=o(" \u2014 "),Px=a("a"),aVe=o("ReformerConfig"),nVe=o(" (Reformer model)"),sVe=l(),eg=a("li"),wK=a("strong"),lVe=o("regnet"),iVe=o(" \u2014 "),$x=a("a"),dVe=o("RegNetConfig"),cVe=o(" (RegNet model)"),fVe=l(),og=a("li"),AK=a("strong"),mVe=o("rembert"),gVe=o(" \u2014 "),Ix=a("a"),hVe=o("RemBertConfig"),pVe=o(" (RemBERT model)"),_Ve=l(),rg=a("li"),yK=a("strong"),uVe=o("resnet"),bVe=o(" \u2014 "),qx=a("a"),vVe=o("ResNetConfig"),FVe=o(" (ResNet model)"),TVe=l(),tg=a("li"),LK=a("strong"),MVe=o("retribert"),EVe=o(" \u2014 "),Nx=a("a"),CVe=o("RetriBertConfig"),wVe=o(" (RetriBERT model)"),AVe=l(),ag=a("li"),xK=a("strong"),yVe=o("roberta"),LVe=o(" \u2014 "),jx=a("a"),xVe=o("RobertaConfig"),kVe=o(" (RoBERTa model)"),SVe=l(),ng=a("li"),kK=a("strong"),RVe=o("roformer"),BVe=o(" \u2014 "),Dx=a("a"),PVe=o("RoFormerConfig"),$Ve=o(" (RoFormer model)"),IVe=l(),sg=a("li"),SK=a("strong"),qVe=o("segformer"),NVe=o(" \u2014 "),Gx=a("a"),jVe=o("SegformerConfig"),DVe=o(" (SegFormer model)"),GVe=l(),lg=a("li"),RK=a("strong"),OVe=o("sew"),VVe=o(" \u2014 "),Ox=a("a"),XVe=o("SEWConfig"),zVe=o(" (SEW model)"),QVe=l(),ig=a("li"),BK=a("strong"),WVe=o("sew-d"),HVe=o(" \u2014 "),Vx=a("a"),UVe=o("SEWDConfig"),JVe=o(" (SEW-D model)"),YVe=l(),dg=a("li"),PK=a("strong"),KVe=o("speech-encoder-decoder"),ZVe=o(" \u2014 "),Xx=a("a"),eXe=o("SpeechEncoderDecoderConfig"),oXe=o(" (Speech Encoder decoder model)"),rXe=l(),cg=a("li"),$K=a("strong"),tXe=o("speech_to_text"),aXe=o(" \u2014 "),zx=a("a"),nXe=o("Speech2TextConfig"),sXe=o(" (Speech2Text model)"),lXe=l(),fg=a("li"),IK=a("strong"),iXe=o("speech_to_text_2"),dXe=o(" \u2014 "),Qx=a("a"),cXe=o("Speech2Text2Config"),fXe=o(" (Speech2Text2 model)"),mXe=l(),mg=a("li"),qK=a("strong"),gXe=o("splinter"),hXe=o(" \u2014 "),Wx=a("a"),pXe=o("SplinterConfig"),_Xe=o(" (Splinter model)"),uXe=l(),gg=a("li"),NK=a("strong"),bXe=o("squeezebert"),vXe=o(" \u2014 "),Hx=a("a"),FXe=o("SqueezeBertConfig"),TXe=o(" (SqueezeBERT model)"),MXe=l(),hg=a("li"),jK=a("strong"),EXe=o("swin"),CXe=o(" \u2014 "),Ux=a("a"),wXe=o("SwinConfig"),AXe=o(" (Swin model)"),yXe=l(),pg=a("li"),DK=a("strong"),LXe=o("t5"),xXe=o(" \u2014 "),Jx=a("a"),kXe=o("T5Config"),SXe=o(" (T5 model)"),RXe=l(),_g=a("li"),GK=a("strong"),BXe=o("tapas"),PXe=o(" \u2014 "),Yx=a("a"),$Xe=o("TapasConfig"),IXe=o(" (TAPAS model)"),qXe=l(),ug=a("li"),OK=a("strong"),NXe=o("tapex"),jXe=o(" \u2014 "),Kx=a("a"),DXe=o("BartConfig"),GXe=o(" (TAPEX model)"),OXe=l(),bg=a("li"),VK=a("strong"),VXe=o("transfo-xl"),XXe=o(" \u2014 "),Zx=a("a"),zXe=o("TransfoXLConfig"),QXe=o(" (Transformer-XL model)"),WXe=l(),vg=a("li"),XK=a("strong"),HXe=o("trocr"),UXe=o(" \u2014 "),ek=a("a"),JXe=o("TrOCRConfig"),YXe=o(" (TrOCR model)"),KXe=l(),Fg=a("li"),zK=a("strong"),ZXe=o("unispeech"),eze=o(" \u2014 "),ok=a("a"),oze=o("UniSpeechConfig"),rze=o(" (UniSpeech model)"),tze=l(),Tg=a("li"),QK=a("strong"),aze=o("unispeech-sat"),nze=o(" \u2014 "),rk=a("a"),sze=o("UniSpeechSatConfig"),lze=o(" (UniSpeechSat model)"),ize=l(),Mg=a("li"),WK=a("strong"),dze=o("van"),cze=o(" \u2014 "),tk=a("a"),fze=o("VanConfig"),mze=o(" (VAN model)"),gze=l(),Eg=a("li"),HK=a("strong"),hze=o("vilt"),pze=o(" \u2014 "),ak=a("a"),_ze=o("ViltConfig"),uze=o(" (ViLT model)"),bze=l(),Cg=a("li"),UK=a("strong"),vze=o("vision-encoder-decoder"),Fze=o(" \u2014 "),nk=a("a"),Tze=o("VisionEncoderDecoderConfig"),Mze=o(" (Vision Encoder decoder model)"),Eze=l(),wg=a("li"),JK=a("strong"),Cze=o("vision-text-dual-encoder"),wze=o(" \u2014 "),sk=a("a"),Aze=o("VisionTextDualEncoderConfig"),yze=o(" (VisionTextDualEncoder model)"),Lze=l(),Ag=a("li"),YK=a("strong"),xze=o("visual_bert"),kze=o(" \u2014 "),lk=a("a"),Sze=o("VisualBertConfig"),Rze=o(" (VisualBert model)"),Bze=l(),yg=a("li"),KK=a("strong"),Pze=o("vit"),$ze=o(" \u2014 "),ik=a("a"),Ize=o("ViTConfig"),qze=o(" (ViT model)"),Nze=l(),Lg=a("li"),ZK=a("strong"),jze=o("vit_mae"),Dze=o(" \u2014 "),dk=a("a"),Gze=o("ViTMAEConfig"),Oze=o(" (ViTMAE model)"),Vze=l(),xg=a("li"),eZ=a("strong"),Xze=o("wav2vec2"),zze=o(" \u2014 "),ck=a("a"),Qze=o("Wav2Vec2Config"),Wze=o(" (Wav2Vec2 model)"),Hze=l(),kg=a("li"),oZ=a("strong"),Uze=o("wavlm"),Jze=o(" \u2014 "),fk=a("a"),Yze=o("WavLMConfig"),Kze=o(" (WavLM model)"),Zze=l(),Sg=a("li"),rZ=a("strong"),eQe=o("xglm"),oQe=o(" \u2014 "),mk=a("a"),rQe=o("XGLMConfig"),tQe=o(" (XGLM model)"),aQe=l(),Rg=a("li"),tZ=a("strong"),nQe=o("xlm"),sQe=o(" \u2014 "),gk=a("a"),lQe=o("XLMConfig"),iQe=o(" (XLM model)"),dQe=l(),Bg=a("li"),aZ=a("strong"),cQe=o("xlm-prophetnet"),fQe=o(" \u2014 "),hk=a("a"),mQe=o("XLMProphetNetConfig"),gQe=o(" (XLMProphetNet model)"),hQe=l(),Pg=a("li"),nZ=a("strong"),pQe=o("xlm-roberta"),_Qe=o(" \u2014 "),pk=a("a"),uQe=o("XLMRobertaConfig"),bQe=o(" (XLM-RoBERTa model)"),vQe=l(),$g=a("li"),sZ=a("strong"),FQe=o("xlm-roberta-xl"),TQe=o(" \u2014 "),_k=a("a"),MQe=o("XLMRobertaXLConfig"),EQe=o(" (XLM-RoBERTa-XL model)"),CQe=l(),Ig=a("li"),lZ=a("strong"),wQe=o("xlnet"),AQe=o(" \u2014 "),uk=a("a"),yQe=o("XLNetConfig"),LQe=o(" (XLNet model)"),xQe=l(),qg=a("li"),iZ=a("strong"),kQe=o("yoso"),SQe=o(" \u2014 "),bk=a("a"),RQe=o("YosoConfig"),BQe=o(" (YOSO model)"),PQe=l(),dZ=a("p"),$Qe=o("Examples:"),IQe=l(),f(qE.$$.fragment),qQe=l(),Ng=a("div"),f(NE.$$.fragment),NQe=l(),cZ=a("p"),jQe=o("Register a new configuration for this class."),kRe=l(),Wi=a("h2"),jg=a("a"),fZ=a("span"),f(jE.$$.fragment),DQe=l(),mZ=a("span"),GQe=o("AutoTokenizer"),SRe=l(),Wo=a("div"),f(DE.$$.fragment),OQe=l(),GE=a("p"),VQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vk=a("a"),XQe=o("AutoTokenizer.from_pretrained()"),zQe=o(" class method."),QQe=l(),OE=a("p"),WQe=o("This class cannot be instantiated directly using "),gZ=a("code"),HQe=o("__init__()"),UQe=o(" (throws an error)."),JQe=l(),go=a("div"),f(VE.$$.fragment),YQe=l(),hZ=a("p"),KQe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),ZQe=l(),Oa=a("p"),eWe=o("The tokenizer class to instantiate is selected based on the "),pZ=a("code"),oWe=o("model_type"),rWe=o(` property of the config object (either
passed as an argument or loaded from `),_Z=a("code"),tWe=o("pretrained_model_name_or_path"),aWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uZ=a("code"),nWe=o("pretrained_model_name_or_path"),sWe=o(":"),lWe=l(),E=a("ul"),Wn=a("li"),bZ=a("strong"),iWe=o("albert"),dWe=o(" \u2014 "),Fk=a("a"),cWe=o("AlbertTokenizer"),fWe=o(" or "),Tk=a("a"),mWe=o("AlbertTokenizerFast"),gWe=o(" (ALBERT model)"),hWe=l(),Hn=a("li"),vZ=a("strong"),pWe=o("bart"),_We=o(" \u2014 "),Mk=a("a"),uWe=o("BartTokenizer"),bWe=o(" or "),Ek=a("a"),vWe=o("BartTokenizerFast"),FWe=o(" (BART model)"),TWe=l(),Un=a("li"),FZ=a("strong"),MWe=o("barthez"),EWe=o(" \u2014 "),Ck=a("a"),CWe=o("BarthezTokenizer"),wWe=o(" or "),wk=a("a"),AWe=o("BarthezTokenizerFast"),yWe=o(" (BARThez model)"),LWe=l(),Dg=a("li"),TZ=a("strong"),xWe=o("bartpho"),kWe=o(" \u2014 "),Ak=a("a"),SWe=o("BartphoTokenizer"),RWe=o(" (BARTpho model)"),BWe=l(),Jn=a("li"),MZ=a("strong"),PWe=o("bert"),$We=o(" \u2014 "),yk=a("a"),IWe=o("BertTokenizer"),qWe=o(" or "),Lk=a("a"),NWe=o("BertTokenizerFast"),jWe=o(" (BERT model)"),DWe=l(),Gg=a("li"),EZ=a("strong"),GWe=o("bert-generation"),OWe=o(" \u2014 "),xk=a("a"),VWe=o("BertGenerationTokenizer"),XWe=o(" (Bert Generation model)"),zWe=l(),Og=a("li"),CZ=a("strong"),QWe=o("bert-japanese"),WWe=o(" \u2014 "),kk=a("a"),HWe=o("BertJapaneseTokenizer"),UWe=o(" (BertJapanese model)"),JWe=l(),Vg=a("li"),wZ=a("strong"),YWe=o("bertweet"),KWe=o(" \u2014 "),Sk=a("a"),ZWe=o("BertweetTokenizer"),eHe=o(" (Bertweet model)"),oHe=l(),Yn=a("li"),AZ=a("strong"),rHe=o("big_bird"),tHe=o(" \u2014 "),Rk=a("a"),aHe=o("BigBirdTokenizer"),nHe=o(" or "),Bk=a("a"),sHe=o("BigBirdTokenizerFast"),lHe=o(" (BigBird model)"),iHe=l(),Kn=a("li"),yZ=a("strong"),dHe=o("bigbird_pegasus"),cHe=o(" \u2014 "),Pk=a("a"),fHe=o("PegasusTokenizer"),mHe=o(" or "),$k=a("a"),gHe=o("PegasusTokenizerFast"),hHe=o(" (BigBirdPegasus model)"),pHe=l(),Zn=a("li"),LZ=a("strong"),_He=o("blenderbot"),uHe=o(" \u2014 "),Ik=a("a"),bHe=o("BlenderbotTokenizer"),vHe=o(" or "),qk=a("a"),FHe=o("BlenderbotTokenizerFast"),THe=o(" (Blenderbot model)"),MHe=l(),Xg=a("li"),xZ=a("strong"),EHe=o("blenderbot-small"),CHe=o(" \u2014 "),Nk=a("a"),wHe=o("BlenderbotSmallTokenizer"),AHe=o(" (BlenderbotSmall model)"),yHe=l(),zg=a("li"),kZ=a("strong"),LHe=o("byt5"),xHe=o(" \u2014 "),jk=a("a"),kHe=o("ByT5Tokenizer"),SHe=o(" (ByT5 model)"),RHe=l(),es=a("li"),SZ=a("strong"),BHe=o("camembert"),PHe=o(" \u2014 "),Dk=a("a"),$He=o("CamembertTokenizer"),IHe=o(" or "),Gk=a("a"),qHe=o("CamembertTokenizerFast"),NHe=o(" (CamemBERT model)"),jHe=l(),Qg=a("li"),RZ=a("strong"),DHe=o("canine"),GHe=o(" \u2014 "),Ok=a("a"),OHe=o("CanineTokenizer"),VHe=o(" (Canine model)"),XHe=l(),os=a("li"),BZ=a("strong"),zHe=o("clip"),QHe=o(" \u2014 "),Vk=a("a"),WHe=o("CLIPTokenizer"),HHe=o(" or "),Xk=a("a"),UHe=o("CLIPTokenizerFast"),JHe=o(" (CLIP model)"),YHe=l(),rs=a("li"),PZ=a("strong"),KHe=o("convbert"),ZHe=o(" \u2014 "),zk=a("a"),eUe=o("ConvBertTokenizer"),oUe=o(" or "),Qk=a("a"),rUe=o("ConvBertTokenizerFast"),tUe=o(" (ConvBERT model)"),aUe=l(),ts=a("li"),$Z=a("strong"),nUe=o("cpm"),sUe=o(" \u2014 "),Wk=a("a"),lUe=o("CpmTokenizer"),iUe=o(" or "),IZ=a("code"),dUe=o("CpmTokenizerFast"),cUe=o(" (CPM model)"),fUe=l(),Wg=a("li"),qZ=a("strong"),mUe=o("ctrl"),gUe=o(" \u2014 "),Hk=a("a"),hUe=o("CTRLTokenizer"),pUe=o(" (CTRL model)"),_Ue=l(),as=a("li"),NZ=a("strong"),uUe=o("deberta"),bUe=o(" \u2014 "),Uk=a("a"),vUe=o("DebertaTokenizer"),FUe=o(" or "),Jk=a("a"),TUe=o("DebertaTokenizerFast"),MUe=o(" (DeBERTa model)"),EUe=l(),Hg=a("li"),jZ=a("strong"),CUe=o("deberta-v2"),wUe=o(" \u2014 "),Yk=a("a"),AUe=o("DebertaV2Tokenizer"),yUe=o(" (DeBERTa-v2 model)"),LUe=l(),ns=a("li"),DZ=a("strong"),xUe=o("distilbert"),kUe=o(" \u2014 "),Kk=a("a"),SUe=o("DistilBertTokenizer"),RUe=o(" or "),Zk=a("a"),BUe=o("DistilBertTokenizerFast"),PUe=o(" (DistilBERT model)"),$Ue=l(),ss=a("li"),GZ=a("strong"),IUe=o("dpr"),qUe=o(" \u2014 "),eS=a("a"),NUe=o("DPRQuestionEncoderTokenizer"),jUe=o(" or "),oS=a("a"),DUe=o("DPRQuestionEncoderTokenizerFast"),GUe=o(" (DPR model)"),OUe=l(),ls=a("li"),OZ=a("strong"),VUe=o("electra"),XUe=o(" \u2014 "),rS=a("a"),zUe=o("ElectraTokenizer"),QUe=o(" or "),tS=a("a"),WUe=o("ElectraTokenizerFast"),HUe=o(" (ELECTRA model)"),UUe=l(),Ug=a("li"),VZ=a("strong"),JUe=o("flaubert"),YUe=o(" \u2014 "),aS=a("a"),KUe=o("FlaubertTokenizer"),ZUe=o(" (FlauBERT model)"),eJe=l(),is=a("li"),XZ=a("strong"),oJe=o("fnet"),rJe=o(" \u2014 "),nS=a("a"),tJe=o("FNetTokenizer"),aJe=o(" or "),sS=a("a"),nJe=o("FNetTokenizerFast"),sJe=o(" (FNet model)"),lJe=l(),Jg=a("li"),zZ=a("strong"),iJe=o("fsmt"),dJe=o(" \u2014 "),lS=a("a"),cJe=o("FSMTTokenizer"),fJe=o(" (FairSeq Machine-Translation model)"),mJe=l(),ds=a("li"),QZ=a("strong"),gJe=o("funnel"),hJe=o(" \u2014 "),iS=a("a"),pJe=o("FunnelTokenizer"),_Je=o(" or "),dS=a("a"),uJe=o("FunnelTokenizerFast"),bJe=o(" (Funnel Transformer model)"),vJe=l(),cs=a("li"),WZ=a("strong"),FJe=o("gpt2"),TJe=o(" \u2014 "),cS=a("a"),MJe=o("GPT2Tokenizer"),EJe=o(" or "),fS=a("a"),CJe=o("GPT2TokenizerFast"),wJe=o(" (OpenAI GPT-2 model)"),AJe=l(),fs=a("li"),HZ=a("strong"),yJe=o("gpt_neo"),LJe=o(" \u2014 "),mS=a("a"),xJe=o("GPT2Tokenizer"),kJe=o(" or "),gS=a("a"),SJe=o("GPT2TokenizerFast"),RJe=o(" (GPT Neo model)"),BJe=l(),ms=a("li"),UZ=a("strong"),PJe=o("herbert"),$Je=o(" \u2014 "),hS=a("a"),IJe=o("HerbertTokenizer"),qJe=o(" or "),pS=a("a"),NJe=o("HerbertTokenizerFast"),jJe=o(" (HerBERT model)"),DJe=l(),Yg=a("li"),JZ=a("strong"),GJe=o("hubert"),OJe=o(" \u2014 "),_S=a("a"),VJe=o("Wav2Vec2CTCTokenizer"),XJe=o(" (Hubert model)"),zJe=l(),gs=a("li"),YZ=a("strong"),QJe=o("ibert"),WJe=o(" \u2014 "),uS=a("a"),HJe=o("RobertaTokenizer"),UJe=o(" or "),bS=a("a"),JJe=o("RobertaTokenizerFast"),YJe=o(" (I-BERT model)"),KJe=l(),hs=a("li"),KZ=a("strong"),ZJe=o("layoutlm"),eYe=o(" \u2014 "),vS=a("a"),oYe=o("LayoutLMTokenizer"),rYe=o(" or "),FS=a("a"),tYe=o("LayoutLMTokenizerFast"),aYe=o(" (LayoutLM model)"),nYe=l(),ps=a("li"),ZZ=a("strong"),sYe=o("layoutlmv2"),lYe=o(" \u2014 "),TS=a("a"),iYe=o("LayoutLMv2Tokenizer"),dYe=o(" or "),MS=a("a"),cYe=o("LayoutLMv2TokenizerFast"),fYe=o(" (LayoutLMv2 model)"),mYe=l(),_s=a("li"),eee=a("strong"),gYe=o("layoutxlm"),hYe=o(" \u2014 "),ES=a("a"),pYe=o("LayoutXLMTokenizer"),_Ye=o(" or "),CS=a("a"),uYe=o("LayoutXLMTokenizerFast"),bYe=o(" (LayoutXLM model)"),vYe=l(),us=a("li"),oee=a("strong"),FYe=o("led"),TYe=o(" \u2014 "),wS=a("a"),MYe=o("LEDTokenizer"),EYe=o(" or "),AS=a("a"),CYe=o("LEDTokenizerFast"),wYe=o(" (LED model)"),AYe=l(),bs=a("li"),ree=a("strong"),yYe=o("longformer"),LYe=o(" \u2014 "),yS=a("a"),xYe=o("LongformerTokenizer"),kYe=o(" or "),LS=a("a"),SYe=o("LongformerTokenizerFast"),RYe=o(" (Longformer model)"),BYe=l(),Kg=a("li"),tee=a("strong"),PYe=o("luke"),$Ye=o(" \u2014 "),xS=a("a"),IYe=o("LukeTokenizer"),qYe=o(" (LUKE model)"),NYe=l(),vs=a("li"),aee=a("strong"),jYe=o("lxmert"),DYe=o(" \u2014 "),kS=a("a"),GYe=o("LxmertTokenizer"),OYe=o(" or "),SS=a("a"),VYe=o("LxmertTokenizerFast"),XYe=o(" (LXMERT model)"),zYe=l(),Zg=a("li"),nee=a("strong"),QYe=o("m2m_100"),WYe=o(" \u2014 "),RS=a("a"),HYe=o("M2M100Tokenizer"),UYe=o(" (M2M100 model)"),JYe=l(),eh=a("li"),see=a("strong"),YYe=o("marian"),KYe=o(" \u2014 "),BS=a("a"),ZYe=o("MarianTokenizer"),eKe=o(" (Marian model)"),oKe=l(),Fs=a("li"),lee=a("strong"),rKe=o("mbart"),tKe=o(" \u2014 "),PS=a("a"),aKe=o("MBartTokenizer"),nKe=o(" or "),$S=a("a"),sKe=o("MBartTokenizerFast"),lKe=o(" (mBART model)"),iKe=l(),Ts=a("li"),iee=a("strong"),dKe=o("mbart50"),cKe=o(" \u2014 "),IS=a("a"),fKe=o("MBart50Tokenizer"),mKe=o(" or "),qS=a("a"),gKe=o("MBart50TokenizerFast"),hKe=o(" (mBART-50 model)"),pKe=l(),oh=a("li"),dee=a("strong"),_Ke=o("mluke"),uKe=o(" \u2014 "),NS=a("a"),bKe=o("MLukeTokenizer"),vKe=o(" (mLUKE model)"),FKe=l(),Ms=a("li"),cee=a("strong"),TKe=o("mobilebert"),MKe=o(" \u2014 "),jS=a("a"),EKe=o("MobileBertTokenizer"),CKe=o(" or "),DS=a("a"),wKe=o("MobileBertTokenizerFast"),AKe=o(" (MobileBERT model)"),yKe=l(),Es=a("li"),fee=a("strong"),LKe=o("mpnet"),xKe=o(" \u2014 "),GS=a("a"),kKe=o("MPNetTokenizer"),SKe=o(" or "),OS=a("a"),RKe=o("MPNetTokenizerFast"),BKe=o(" (MPNet model)"),PKe=l(),Cs=a("li"),mee=a("strong"),$Ke=o("mt5"),IKe=o(" \u2014 "),VS=a("a"),qKe=o("MT5Tokenizer"),NKe=o(" or "),XS=a("a"),jKe=o("MT5TokenizerFast"),DKe=o(" (mT5 model)"),GKe=l(),ws=a("li"),gee=a("strong"),OKe=o("openai-gpt"),VKe=o(" \u2014 "),zS=a("a"),XKe=o("OpenAIGPTTokenizer"),zKe=o(" or "),QS=a("a"),QKe=o("OpenAIGPTTokenizerFast"),WKe=o(" (OpenAI GPT model)"),HKe=l(),As=a("li"),hee=a("strong"),UKe=o("pegasus"),JKe=o(" \u2014 "),WS=a("a"),YKe=o("PegasusTokenizer"),KKe=o(" or "),HS=a("a"),ZKe=o("PegasusTokenizerFast"),eZe=o(" (Pegasus model)"),oZe=l(),rh=a("li"),pee=a("strong"),rZe=o("perceiver"),tZe=o(" \u2014 "),US=a("a"),aZe=o("PerceiverTokenizer"),nZe=o(" (Perceiver model)"),sZe=l(),th=a("li"),_ee=a("strong"),lZe=o("phobert"),iZe=o(" \u2014 "),JS=a("a"),dZe=o("PhobertTokenizer"),cZe=o(" (PhoBERT model)"),fZe=l(),ah=a("li"),uee=a("strong"),mZe=o("plbart"),gZe=o(" \u2014 "),YS=a("a"),hZe=o("PLBartTokenizer"),pZe=o(" (PLBart model)"),_Ze=l(),nh=a("li"),bee=a("strong"),uZe=o("prophetnet"),bZe=o(" \u2014 "),KS=a("a"),vZe=o("ProphetNetTokenizer"),FZe=o(" (ProphetNet model)"),TZe=l(),ys=a("li"),vee=a("strong"),MZe=o("qdqbert"),EZe=o(" \u2014 "),ZS=a("a"),CZe=o("BertTokenizer"),wZe=o(" or "),eR=a("a"),AZe=o("BertTokenizerFast"),yZe=o(" (QDQBert model)"),LZe=l(),sh=a("li"),Fee=a("strong"),xZe=o("rag"),kZe=o(" \u2014 "),oR=a("a"),SZe=o("RagTokenizer"),RZe=o(" (RAG model)"),BZe=l(),Ls=a("li"),Tee=a("strong"),PZe=o("realm"),$Ze=o(" \u2014 "),rR=a("a"),IZe=o("RealmTokenizer"),qZe=o(" or "),tR=a("a"),NZe=o("RealmTokenizerFast"),jZe=o(" (Realm model)"),DZe=l(),xs=a("li"),Mee=a("strong"),GZe=o("reformer"),OZe=o(" \u2014 "),aR=a("a"),VZe=o("ReformerTokenizer"),XZe=o(" or "),nR=a("a"),zZe=o("ReformerTokenizerFast"),QZe=o(" (Reformer model)"),WZe=l(),ks=a("li"),Eee=a("strong"),HZe=o("rembert"),UZe=o(" \u2014 "),sR=a("a"),JZe=o("RemBertTokenizer"),YZe=o(" or "),lR=a("a"),KZe=o("RemBertTokenizerFast"),ZZe=o(" (RemBERT model)"),eeo=l(),Ss=a("li"),Cee=a("strong"),oeo=o("retribert"),reo=o(" \u2014 "),iR=a("a"),teo=o("RetriBertTokenizer"),aeo=o(" or "),dR=a("a"),neo=o("RetriBertTokenizerFast"),seo=o(" (RetriBERT model)"),leo=l(),Rs=a("li"),wee=a("strong"),ieo=o("roberta"),deo=o(" \u2014 "),cR=a("a"),ceo=o("RobertaTokenizer"),feo=o(" or "),fR=a("a"),meo=o("RobertaTokenizerFast"),geo=o(" (RoBERTa model)"),heo=l(),Bs=a("li"),Aee=a("strong"),peo=o("roformer"),_eo=o(" \u2014 "),mR=a("a"),ueo=o("RoFormerTokenizer"),beo=o(" or "),gR=a("a"),veo=o("RoFormerTokenizerFast"),Feo=o(" (RoFormer model)"),Teo=l(),lh=a("li"),yee=a("strong"),Meo=o("speech_to_text"),Eeo=o(" \u2014 "),hR=a("a"),Ceo=o("Speech2TextTokenizer"),weo=o(" (Speech2Text model)"),Aeo=l(),ih=a("li"),Lee=a("strong"),yeo=o("speech_to_text_2"),Leo=o(" \u2014 "),pR=a("a"),xeo=o("Speech2Text2Tokenizer"),keo=o(" (Speech2Text2 model)"),Seo=l(),Ps=a("li"),xee=a("strong"),Reo=o("splinter"),Beo=o(" \u2014 "),_R=a("a"),Peo=o("SplinterTokenizer"),$eo=o(" or "),uR=a("a"),Ieo=o("SplinterTokenizerFast"),qeo=o(" (Splinter model)"),Neo=l(),$s=a("li"),kee=a("strong"),jeo=o("squeezebert"),Deo=o(" \u2014 "),bR=a("a"),Geo=o("SqueezeBertTokenizer"),Oeo=o(" or "),vR=a("a"),Veo=o("SqueezeBertTokenizerFast"),Xeo=o(" (SqueezeBERT model)"),zeo=l(),Is=a("li"),See=a("strong"),Qeo=o("t5"),Weo=o(" \u2014 "),FR=a("a"),Heo=o("T5Tokenizer"),Ueo=o(" or "),TR=a("a"),Jeo=o("T5TokenizerFast"),Yeo=o(" (T5 model)"),Keo=l(),dh=a("li"),Ree=a("strong"),Zeo=o("tapas"),eoo=o(" \u2014 "),MR=a("a"),ooo=o("TapasTokenizer"),roo=o(" (TAPAS model)"),too=l(),ch=a("li"),Bee=a("strong"),aoo=o("tapex"),noo=o(" \u2014 "),ER=a("a"),soo=o("TapexTokenizer"),loo=o(" (TAPEX model)"),ioo=l(),fh=a("li"),Pee=a("strong"),doo=o("transfo-xl"),coo=o(" \u2014 "),CR=a("a"),foo=o("TransfoXLTokenizer"),moo=o(" (Transformer-XL model)"),goo=l(),mh=a("li"),$ee=a("strong"),hoo=o("wav2vec2"),poo=o(" \u2014 "),wR=a("a"),_oo=o("Wav2Vec2CTCTokenizer"),uoo=o(" (Wav2Vec2 model)"),boo=l(),gh=a("li"),Iee=a("strong"),voo=o("wav2vec2_phoneme"),Foo=o(" \u2014 "),AR=a("a"),Too=o("Wav2Vec2PhonemeCTCTokenizer"),Moo=o(" (Wav2Vec2Phoneme model)"),Eoo=l(),qs=a("li"),qee=a("strong"),Coo=o("xglm"),woo=o(" \u2014 "),yR=a("a"),Aoo=o("XGLMTokenizer"),yoo=o(" or "),LR=a("a"),Loo=o("XGLMTokenizerFast"),xoo=o(" (XGLM model)"),koo=l(),hh=a("li"),Nee=a("strong"),Soo=o("xlm"),Roo=o(" \u2014 "),xR=a("a"),Boo=o("XLMTokenizer"),Poo=o(" (XLM model)"),$oo=l(),ph=a("li"),jee=a("strong"),Ioo=o("xlm-prophetnet"),qoo=o(" \u2014 "),kR=a("a"),Noo=o("XLMProphetNetTokenizer"),joo=o(" (XLMProphetNet model)"),Doo=l(),Ns=a("li"),Dee=a("strong"),Goo=o("xlm-roberta"),Ooo=o(" \u2014 "),SR=a("a"),Voo=o("XLMRobertaTokenizer"),Xoo=o(" or "),RR=a("a"),zoo=o("XLMRobertaTokenizerFast"),Qoo=o(" (XLM-RoBERTa model)"),Woo=l(),js=a("li"),Gee=a("strong"),Hoo=o("xlnet"),Uoo=o(" \u2014 "),BR=a("a"),Joo=o("XLNetTokenizer"),Yoo=o(" or "),PR=a("a"),Koo=o("XLNetTokenizerFast"),Zoo=o(" (XLNet model)"),ero=l(),Oee=a("p"),oro=o("Examples:"),rro=l(),f(XE.$$.fragment),tro=l(),_h=a("div"),f(zE.$$.fragment),aro=l(),Vee=a("p"),nro=o("Register a new tokenizer in this mapping."),RRe=l(),Hi=a("h2"),uh=a("a"),Xee=a("span"),f(QE.$$.fragment),sro=l(),zee=a("span"),lro=o("AutoFeatureExtractor"),BRe=l(),Ho=a("div"),f(WE.$$.fragment),iro=l(),HE=a("p"),dro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$R=a("a"),cro=o("AutoFeatureExtractor.from_pretrained()"),fro=o(" class method."),mro=l(),UE=a("p"),gro=o("This class cannot be instantiated directly using "),Qee=a("code"),hro=o("__init__()"),pro=o(" (throws an error)."),_ro=l(),$e=a("div"),f(JE.$$.fragment),uro=l(),Wee=a("p"),bro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vro=l(),Va=a("p"),Fro=o("The feature extractor class to instantiate is selected based on the "),Hee=a("code"),Tro=o("model_type"),Mro=o(` property of the config object
(either passed as an argument or loaded from `),Uee=a("code"),Ero=o("pretrained_model_name_or_path"),Cro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jee=a("code"),wro=o("pretrained_model_name_or_path"),Aro=o(":"),yro=l(),ee=a("ul"),bh=a("li"),Yee=a("strong"),Lro=o("beit"),xro=o(" \u2014 "),IR=a("a"),kro=o("BeitFeatureExtractor"),Sro=o(" (BEiT model)"),Rro=l(),vh=a("li"),Kee=a("strong"),Bro=o("clip"),Pro=o(" \u2014 "),qR=a("a"),$ro=o("CLIPFeatureExtractor"),Iro=o(" (CLIP model)"),qro=l(),Fh=a("li"),Zee=a("strong"),Nro=o("convnext"),jro=o(" \u2014 "),NR=a("a"),Dro=o("ConvNextFeatureExtractor"),Gro=o(" (ConvNext model)"),Oro=l(),Th=a("li"),eoe=a("strong"),Vro=o("deit"),Xro=o(" \u2014 "),jR=a("a"),zro=o("DeiTFeatureExtractor"),Qro=o(" (DeiT model)"),Wro=l(),Mh=a("li"),ooe=a("strong"),Hro=o("detr"),Uro=o(" \u2014 "),DR=a("a"),Jro=o("DetrFeatureExtractor"),Yro=o(" (DETR model)"),Kro=l(),Eh=a("li"),roe=a("strong"),Zro=o("hubert"),eto=o(" \u2014 "),GR=a("a"),oto=o("Wav2Vec2FeatureExtractor"),rto=o(" (Hubert model)"),tto=l(),Ch=a("li"),toe=a("strong"),ato=o("layoutlmv2"),nto=o(" \u2014 "),OR=a("a"),sto=o("LayoutLMv2FeatureExtractor"),lto=o(" (LayoutLMv2 model)"),ito=l(),wh=a("li"),aoe=a("strong"),dto=o("maskformer"),cto=o(" \u2014 "),VR=a("a"),fto=o("MaskFormerFeatureExtractor"),mto=o(" (MaskFormer model)"),gto=l(),Ah=a("li"),noe=a("strong"),hto=o("perceiver"),pto=o(" \u2014 "),XR=a("a"),_to=o("PerceiverFeatureExtractor"),uto=o(" (Perceiver model)"),bto=l(),yh=a("li"),soe=a("strong"),vto=o("poolformer"),Fto=o(" \u2014 "),zR=a("a"),Tto=o("PoolFormerFeatureExtractor"),Mto=o(" (PoolFormer model)"),Eto=l(),Lh=a("li"),loe=a("strong"),Cto=o("regnet"),wto=o(" \u2014 "),QR=a("a"),Ato=o("ConvNextFeatureExtractor"),yto=o(" (RegNet model)"),Lto=l(),xh=a("li"),ioe=a("strong"),xto=o("resnet"),kto=o(" \u2014 "),WR=a("a"),Sto=o("ConvNextFeatureExtractor"),Rto=o(" (ResNet model)"),Bto=l(),kh=a("li"),doe=a("strong"),Pto=o("segformer"),$to=o(" \u2014 "),HR=a("a"),Ito=o("SegformerFeatureExtractor"),qto=o(" (SegFormer model)"),Nto=l(),Sh=a("li"),coe=a("strong"),jto=o("speech_to_text"),Dto=o(" \u2014 "),UR=a("a"),Gto=o("Speech2TextFeatureExtractor"),Oto=o(" (Speech2Text model)"),Vto=l(),Rh=a("li"),foe=a("strong"),Xto=o("swin"),zto=o(" \u2014 "),JR=a("a"),Qto=o("ViTFeatureExtractor"),Wto=o(" (Swin model)"),Hto=l(),Bh=a("li"),moe=a("strong"),Uto=o("van"),Jto=o(" \u2014 "),YR=a("a"),Yto=o("ConvNextFeatureExtractor"),Kto=o(" (VAN model)"),Zto=l(),Ph=a("li"),goe=a("strong"),eao=o("vit"),oao=o(" \u2014 "),KR=a("a"),rao=o("ViTFeatureExtractor"),tao=o(" (ViT model)"),aao=l(),$h=a("li"),hoe=a("strong"),nao=o("vit_mae"),sao=o(" \u2014 "),ZR=a("a"),lao=o("ViTFeatureExtractor"),iao=o(" (ViTMAE model)"),dao=l(),Ih=a("li"),poe=a("strong"),cao=o("wav2vec2"),fao=o(" \u2014 "),eB=a("a"),mao=o("Wav2Vec2FeatureExtractor"),gao=o(" (Wav2Vec2 model)"),hao=l(),f(qh.$$.fragment),pao=l(),_oe=a("p"),_ao=o("Examples:"),uao=l(),f(YE.$$.fragment),bao=l(),Nh=a("div"),f(KE.$$.fragment),vao=l(),uoe=a("p"),Fao=o("Register a new feature extractor for this class."),PRe=l(),Ui=a("h2"),jh=a("a"),boe=a("span"),f(ZE.$$.fragment),Tao=l(),voe=a("span"),Mao=o("AutoProcessor"),$Re=l(),Uo=a("div"),f(e5.$$.fragment),Eao=l(),o5=a("p"),Cao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oB=a("a"),wao=o("AutoProcessor.from_pretrained()"),Aao=o(" class method."),yao=l(),r5=a("p"),Lao=o("This class cannot be instantiated directly using "),Foe=a("code"),xao=o("__init__()"),kao=o(" (throws an error)."),Sao=l(),Ie=a("div"),f(t5.$$.fragment),Rao=l(),Toe=a("p"),Bao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Pao=l(),Ji=a("p"),$ao=o("The processor class to instantiate is selected based on the "),Moe=a("code"),Iao=o("model_type"),qao=o(` property of the config object (either
passed as an argument or loaded from `),Eoe=a("code"),Nao=o("pretrained_model_name_or_path"),jao=o(" if possible):"),Dao=l(),ke=a("ul"),Dh=a("li"),Coe=a("strong"),Gao=o("clip"),Oao=o(" \u2014 "),rB=a("a"),Vao=o("CLIPProcessor"),Xao=o(" (CLIP model)"),zao=l(),Gh=a("li"),woe=a("strong"),Qao=o("layoutlmv2"),Wao=o(" \u2014 "),tB=a("a"),Hao=o("LayoutLMv2Processor"),Uao=o(" (LayoutLMv2 model)"),Jao=l(),Oh=a("li"),Aoe=a("strong"),Yao=o("layoutxlm"),Kao=o(" \u2014 "),aB=a("a"),Zao=o("LayoutXLMProcessor"),eno=o(" (LayoutXLM model)"),ono=l(),Vh=a("li"),yoe=a("strong"),rno=o("speech_to_text"),tno=o(" \u2014 "),nB=a("a"),ano=o("Speech2TextProcessor"),nno=o(" (Speech2Text model)"),sno=l(),Xh=a("li"),Loe=a("strong"),lno=o("speech_to_text_2"),ino=o(" \u2014 "),sB=a("a"),dno=o("Speech2Text2Processor"),cno=o(" (Speech2Text2 model)"),fno=l(),zh=a("li"),xoe=a("strong"),mno=o("trocr"),gno=o(" \u2014 "),lB=a("a"),hno=o("TrOCRProcessor"),pno=o(" (TrOCR model)"),_no=l(),Qh=a("li"),koe=a("strong"),uno=o("vision-text-dual-encoder"),bno=o(" \u2014 "),iB=a("a"),vno=o("VisionTextDualEncoderProcessor"),Fno=o(" (VisionTextDualEncoder model)"),Tno=l(),Wh=a("li"),Soe=a("strong"),Mno=o("wav2vec2"),Eno=o(" \u2014 "),dB=a("a"),Cno=o("Wav2Vec2Processor"),wno=o(" (Wav2Vec2 model)"),Ano=l(),f(Hh.$$.fragment),yno=l(),Roe=a("p"),Lno=o("Examples:"),xno=l(),f(a5.$$.fragment),kno=l(),Uh=a("div"),f(n5.$$.fragment),Sno=l(),Boe=a("p"),Rno=o("Register a new processor for this class."),IRe=l(),Yi=a("h2"),Jh=a("a"),Poe=a("span"),f(s5.$$.fragment),Bno=l(),$oe=a("span"),Pno=o("AutoModel"),qRe=l(),Jo=a("div"),f(l5.$$.fragment),$no=l(),Ki=a("p"),Ino=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cB=a("a"),qno=o("from_pretrained()"),Nno=o(" class method or the "),fB=a("a"),jno=o("from_config()"),Dno=o(` class
method.`),Gno=l(),i5=a("p"),Ono=o("This class cannot be instantiated directly using "),Ioe=a("code"),Vno=o("__init__()"),Xno=o(" (throws an error)."),zno=l(),Xr=a("div"),f(d5.$$.fragment),Qno=l(),qoe=a("p"),Wno=o("Instantiates one of the base model classes of the library from a configuration."),Hno=l(),Zi=a("p"),Uno=o(`Note:
Loading a model from its configuration file does `),Noe=a("strong"),Jno=o("not"),Yno=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mB=a("a"),Kno=o("from_pretrained()"),Zno=o(" to load the model weights."),eso=l(),joe=a("p"),oso=o("Examples:"),rso=l(),f(c5.$$.fragment),tso=l(),qe=a("div"),f(f5.$$.fragment),aso=l(),Doe=a("p"),nso=o("Instantiate one of the base model classes of the library from a pretrained model."),sso=l(),Xa=a("p"),lso=o("The model class to instantiate is selected based on the "),Goe=a("code"),iso=o("model_type"),dso=o(` property of the config object (either
passed as an argument or loaded from `),Ooe=a("code"),cso=o("pretrained_model_name_or_path"),fso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Voe=a("code"),mso=o("pretrained_model_name_or_path"),gso=o(":"),hso=l(),T=a("ul"),Yh=a("li"),Xoe=a("strong"),pso=o("albert"),_so=o(" \u2014 "),gB=a("a"),uso=o("AlbertModel"),bso=o(" (ALBERT model)"),vso=l(),Kh=a("li"),zoe=a("strong"),Fso=o("bart"),Tso=o(" \u2014 "),hB=a("a"),Mso=o("BartModel"),Eso=o(" (BART model)"),Cso=l(),Zh=a("li"),Qoe=a("strong"),wso=o("beit"),Aso=o(" \u2014 "),pB=a("a"),yso=o("BeitModel"),Lso=o(" (BEiT model)"),xso=l(),ep=a("li"),Woe=a("strong"),kso=o("bert"),Sso=o(" \u2014 "),_B=a("a"),Rso=o("BertModel"),Bso=o(" (BERT model)"),Pso=l(),op=a("li"),Hoe=a("strong"),$so=o("bert-generation"),Iso=o(" \u2014 "),uB=a("a"),qso=o("BertGenerationEncoder"),Nso=o(" (Bert Generation model)"),jso=l(),rp=a("li"),Uoe=a("strong"),Dso=o("big_bird"),Gso=o(" \u2014 "),bB=a("a"),Oso=o("BigBirdModel"),Vso=o(" (BigBird model)"),Xso=l(),tp=a("li"),Joe=a("strong"),zso=o("bigbird_pegasus"),Qso=o(" \u2014 "),vB=a("a"),Wso=o("BigBirdPegasusModel"),Hso=o(" (BigBirdPegasus model)"),Uso=l(),ap=a("li"),Yoe=a("strong"),Jso=o("blenderbot"),Yso=o(" \u2014 "),FB=a("a"),Kso=o("BlenderbotModel"),Zso=o(" (Blenderbot model)"),elo=l(),np=a("li"),Koe=a("strong"),olo=o("blenderbot-small"),rlo=o(" \u2014 "),TB=a("a"),tlo=o("BlenderbotSmallModel"),alo=o(" (BlenderbotSmall model)"),nlo=l(),sp=a("li"),Zoe=a("strong"),slo=o("camembert"),llo=o(" \u2014 "),MB=a("a"),ilo=o("CamembertModel"),dlo=o(" (CamemBERT model)"),clo=l(),lp=a("li"),ere=a("strong"),flo=o("canine"),mlo=o(" \u2014 "),EB=a("a"),glo=o("CanineModel"),hlo=o(" (Canine model)"),plo=l(),ip=a("li"),ore=a("strong"),_lo=o("clip"),ulo=o(" \u2014 "),CB=a("a"),blo=o("CLIPModel"),vlo=o(" (CLIP model)"),Flo=l(),dp=a("li"),rre=a("strong"),Tlo=o("convbert"),Mlo=o(" \u2014 "),wB=a("a"),Elo=o("ConvBertModel"),Clo=o(" (ConvBERT model)"),wlo=l(),cp=a("li"),tre=a("strong"),Alo=o("convnext"),ylo=o(" \u2014 "),AB=a("a"),Llo=o("ConvNextModel"),xlo=o(" (ConvNext model)"),klo=l(),fp=a("li"),are=a("strong"),Slo=o("ctrl"),Rlo=o(" \u2014 "),yB=a("a"),Blo=o("CTRLModel"),Plo=o(" (CTRL model)"),$lo=l(),mp=a("li"),nre=a("strong"),Ilo=o("data2vec-audio"),qlo=o(" \u2014 "),LB=a("a"),Nlo=o("Data2VecAudioModel"),jlo=o(" (Data2VecAudio model)"),Dlo=l(),gp=a("li"),sre=a("strong"),Glo=o("data2vec-text"),Olo=o(" \u2014 "),xB=a("a"),Vlo=o("Data2VecTextModel"),Xlo=o(" (Data2VecText model)"),zlo=l(),hp=a("li"),lre=a("strong"),Qlo=o("data2vec-vision"),Wlo=o(" \u2014 "),kB=a("a"),Hlo=o("Data2VecVisionModel"),Ulo=o(" (Data2VecVision model)"),Jlo=l(),pp=a("li"),ire=a("strong"),Ylo=o("deberta"),Klo=o(" \u2014 "),SB=a("a"),Zlo=o("DebertaModel"),eio=o(" (DeBERTa model)"),oio=l(),_p=a("li"),dre=a("strong"),rio=o("deberta-v2"),tio=o(" \u2014 "),RB=a("a"),aio=o("DebertaV2Model"),nio=o(" (DeBERTa-v2 model)"),sio=l(),up=a("li"),cre=a("strong"),lio=o("decision_transformer"),iio=o(" \u2014 "),BB=a("a"),dio=o("DecisionTransformerModel"),cio=o(" (Decision Transformer model)"),fio=l(),bp=a("li"),fre=a("strong"),mio=o("deit"),gio=o(" \u2014 "),PB=a("a"),hio=o("DeiTModel"),pio=o(" (DeiT model)"),_io=l(),vp=a("li"),mre=a("strong"),uio=o("detr"),bio=o(" \u2014 "),$B=a("a"),vio=o("DetrModel"),Fio=o(" (DETR model)"),Tio=l(),Fp=a("li"),gre=a("strong"),Mio=o("distilbert"),Eio=o(" \u2014 "),IB=a("a"),Cio=o("DistilBertModel"),wio=o(" (DistilBERT model)"),Aio=l(),Tp=a("li"),hre=a("strong"),yio=o("dpr"),Lio=o(" \u2014 "),qB=a("a"),xio=o("DPRQuestionEncoder"),kio=o(" (DPR model)"),Sio=l(),Mp=a("li"),pre=a("strong"),Rio=o("dpt"),Bio=o(" \u2014 "),NB=a("a"),Pio=o("DPTModel"),$io=o(" (DPT model)"),Iio=l(),Ep=a("li"),_re=a("strong"),qio=o("electra"),Nio=o(" \u2014 "),jB=a("a"),jio=o("ElectraModel"),Dio=o(" (ELECTRA model)"),Gio=l(),Cp=a("li"),ure=a("strong"),Oio=o("flaubert"),Vio=o(" \u2014 "),DB=a("a"),Xio=o("FlaubertModel"),zio=o(" (FlauBERT model)"),Qio=l(),wp=a("li"),bre=a("strong"),Wio=o("fnet"),Hio=o(" \u2014 "),GB=a("a"),Uio=o("FNetModel"),Jio=o(" (FNet model)"),Yio=l(),Ap=a("li"),vre=a("strong"),Kio=o("fsmt"),Zio=o(" \u2014 "),OB=a("a"),edo=o("FSMTModel"),odo=o(" (FairSeq Machine-Translation model)"),rdo=l(),Ds=a("li"),Fre=a("strong"),tdo=o("funnel"),ado=o(" \u2014 "),VB=a("a"),ndo=o("FunnelModel"),sdo=o(" or "),XB=a("a"),ldo=o("FunnelBaseModel"),ido=o(" (Funnel Transformer model)"),ddo=l(),yp=a("li"),Tre=a("strong"),cdo=o("glpn"),fdo=o(" \u2014 "),zB=a("a"),mdo=o("GLPNModel"),gdo=o(" (GLPN model)"),hdo=l(),Lp=a("li"),Mre=a("strong"),pdo=o("gpt2"),_do=o(" \u2014 "),QB=a("a"),udo=o("GPT2Model"),bdo=o(" (OpenAI GPT-2 model)"),vdo=l(),xp=a("li"),Ere=a("strong"),Fdo=o("gpt_neo"),Tdo=o(" \u2014 "),WB=a("a"),Mdo=o("GPTNeoModel"),Edo=o(" (GPT Neo model)"),Cdo=l(),kp=a("li"),Cre=a("strong"),wdo=o("gptj"),Ado=o(" \u2014 "),HB=a("a"),ydo=o("GPTJModel"),Ldo=o(" (GPT-J model)"),xdo=l(),Sp=a("li"),wre=a("strong"),kdo=o("hubert"),Sdo=o(" \u2014 "),UB=a("a"),Rdo=o("HubertModel"),Bdo=o(" (Hubert model)"),Pdo=l(),Rp=a("li"),Are=a("strong"),$do=o("ibert"),Ido=o(" \u2014 "),JB=a("a"),qdo=o("IBertModel"),Ndo=o(" (I-BERT model)"),jdo=l(),Bp=a("li"),yre=a("strong"),Ddo=o("imagegpt"),Gdo=o(" \u2014 "),YB=a("a"),Odo=o("ImageGPTModel"),Vdo=o(" (ImageGPT model)"),Xdo=l(),Pp=a("li"),Lre=a("strong"),zdo=o("layoutlm"),Qdo=o(" \u2014 "),KB=a("a"),Wdo=o("LayoutLMModel"),Hdo=o(" (LayoutLM model)"),Udo=l(),$p=a("li"),xre=a("strong"),Jdo=o("layoutlmv2"),Ydo=o(" \u2014 "),ZB=a("a"),Kdo=o("LayoutLMv2Model"),Zdo=o(" (LayoutLMv2 model)"),eco=l(),Ip=a("li"),kre=a("strong"),oco=o("led"),rco=o(" \u2014 "),eP=a("a"),tco=o("LEDModel"),aco=o(" (LED model)"),nco=l(),qp=a("li"),Sre=a("strong"),sco=o("longformer"),lco=o(" \u2014 "),oP=a("a"),ico=o("LongformerModel"),dco=o(" (Longformer model)"),cco=l(),Np=a("li"),Rre=a("strong"),fco=o("luke"),mco=o(" \u2014 "),rP=a("a"),gco=o("LukeModel"),hco=o(" (LUKE model)"),pco=l(),jp=a("li"),Bre=a("strong"),_co=o("lxmert"),uco=o(" \u2014 "),tP=a("a"),bco=o("LxmertModel"),vco=o(" (LXMERT model)"),Fco=l(),Dp=a("li"),Pre=a("strong"),Tco=o("m2m_100"),Mco=o(" \u2014 "),aP=a("a"),Eco=o("M2M100Model"),Cco=o(" (M2M100 model)"),wco=l(),Gp=a("li"),$re=a("strong"),Aco=o("marian"),yco=o(" \u2014 "),nP=a("a"),Lco=o("MarianModel"),xco=o(" (Marian model)"),kco=l(),Op=a("li"),Ire=a("strong"),Sco=o("maskformer"),Rco=o(" \u2014 "),sP=a("a"),Bco=o("MaskFormerModel"),Pco=o(" (MaskFormer model)"),$co=l(),Vp=a("li"),qre=a("strong"),Ico=o("mbart"),qco=o(" \u2014 "),lP=a("a"),Nco=o("MBartModel"),jco=o(" (mBART model)"),Dco=l(),Xp=a("li"),Nre=a("strong"),Gco=o("megatron-bert"),Oco=o(" \u2014 "),iP=a("a"),Vco=o("MegatronBertModel"),Xco=o(" (MegatronBert model)"),zco=l(),zp=a("li"),jre=a("strong"),Qco=o("mobilebert"),Wco=o(" \u2014 "),dP=a("a"),Hco=o("MobileBertModel"),Uco=o(" (MobileBERT model)"),Jco=l(),Qp=a("li"),Dre=a("strong"),Yco=o("mpnet"),Kco=o(" \u2014 "),cP=a("a"),Zco=o("MPNetModel"),efo=o(" (MPNet model)"),ofo=l(),Wp=a("li"),Gre=a("strong"),rfo=o("mt5"),tfo=o(" \u2014 "),fP=a("a"),afo=o("MT5Model"),nfo=o(" (mT5 model)"),sfo=l(),Hp=a("li"),Ore=a("strong"),lfo=o("nystromformer"),ifo=o(" \u2014 "),mP=a("a"),dfo=o("NystromformerModel"),cfo=o(" (Nystromformer model)"),ffo=l(),Up=a("li"),Vre=a("strong"),mfo=o("openai-gpt"),gfo=o(" \u2014 "),gP=a("a"),hfo=o("OpenAIGPTModel"),pfo=o(" (OpenAI GPT model)"),_fo=l(),Jp=a("li"),Xre=a("strong"),ufo=o("pegasus"),bfo=o(" \u2014 "),hP=a("a"),vfo=o("PegasusModel"),Ffo=o(" (Pegasus model)"),Tfo=l(),Yp=a("li"),zre=a("strong"),Mfo=o("perceiver"),Efo=o(" \u2014 "),pP=a("a"),Cfo=o("PerceiverModel"),wfo=o(" (Perceiver model)"),Afo=l(),Kp=a("li"),Qre=a("strong"),yfo=o("plbart"),Lfo=o(" \u2014 "),_P=a("a"),xfo=o("PLBartModel"),kfo=o(" (PLBart model)"),Sfo=l(),Zp=a("li"),Wre=a("strong"),Rfo=o("poolformer"),Bfo=o(" \u2014 "),uP=a("a"),Pfo=o("PoolFormerModel"),$fo=o(" (PoolFormer model)"),Ifo=l(),e_=a("li"),Hre=a("strong"),qfo=o("prophetnet"),Nfo=o(" \u2014 "),bP=a("a"),jfo=o("ProphetNetModel"),Dfo=o(" (ProphetNet model)"),Gfo=l(),o_=a("li"),Ure=a("strong"),Ofo=o("qdqbert"),Vfo=o(" \u2014 "),vP=a("a"),Xfo=o("QDQBertModel"),zfo=o(" (QDQBert model)"),Qfo=l(),r_=a("li"),Jre=a("strong"),Wfo=o("reformer"),Hfo=o(" \u2014 "),FP=a("a"),Ufo=o("ReformerModel"),Jfo=o(" (Reformer model)"),Yfo=l(),t_=a("li"),Yre=a("strong"),Kfo=o("regnet"),Zfo=o(" \u2014 "),TP=a("a"),emo=o("RegNetModel"),omo=o(" (RegNet model)"),rmo=l(),a_=a("li"),Kre=a("strong"),tmo=o("rembert"),amo=o(" \u2014 "),MP=a("a"),nmo=o("RemBertModel"),smo=o(" (RemBERT model)"),lmo=l(),n_=a("li"),Zre=a("strong"),imo=o("resnet"),dmo=o(" \u2014 "),EP=a("a"),cmo=o("ResNetModel"),fmo=o(" (ResNet model)"),mmo=l(),s_=a("li"),ete=a("strong"),gmo=o("retribert"),hmo=o(" \u2014 "),CP=a("a"),pmo=o("RetriBertModel"),_mo=o(" (RetriBERT model)"),umo=l(),l_=a("li"),ote=a("strong"),bmo=o("roberta"),vmo=o(" \u2014 "),wP=a("a"),Fmo=o("RobertaModel"),Tmo=o(" (RoBERTa model)"),Mmo=l(),i_=a("li"),rte=a("strong"),Emo=o("roformer"),Cmo=o(" \u2014 "),AP=a("a"),wmo=o("RoFormerModel"),Amo=o(" (RoFormer model)"),ymo=l(),d_=a("li"),tte=a("strong"),Lmo=o("segformer"),xmo=o(" \u2014 "),yP=a("a"),kmo=o("SegformerModel"),Smo=o(" (SegFormer model)"),Rmo=l(),c_=a("li"),ate=a("strong"),Bmo=o("sew"),Pmo=o(" \u2014 "),LP=a("a"),$mo=o("SEWModel"),Imo=o(" (SEW model)"),qmo=l(),f_=a("li"),nte=a("strong"),Nmo=o("sew-d"),jmo=o(" \u2014 "),xP=a("a"),Dmo=o("SEWDModel"),Gmo=o(" (SEW-D model)"),Omo=l(),m_=a("li"),ste=a("strong"),Vmo=o("speech_to_text"),Xmo=o(" \u2014 "),kP=a("a"),zmo=o("Speech2TextModel"),Qmo=o(" (Speech2Text model)"),Wmo=l(),g_=a("li"),lte=a("strong"),Hmo=o("splinter"),Umo=o(" \u2014 "),SP=a("a"),Jmo=o("SplinterModel"),Ymo=o(" (Splinter model)"),Kmo=l(),h_=a("li"),ite=a("strong"),Zmo=o("squeezebert"),ego=o(" \u2014 "),RP=a("a"),ogo=o("SqueezeBertModel"),rgo=o(" (SqueezeBERT model)"),tgo=l(),p_=a("li"),dte=a("strong"),ago=o("swin"),ngo=o(" \u2014 "),BP=a("a"),sgo=o("SwinModel"),lgo=o(" (Swin model)"),igo=l(),__=a("li"),cte=a("strong"),dgo=o("t5"),cgo=o(" \u2014 "),PP=a("a"),fgo=o("T5Model"),mgo=o(" (T5 model)"),ggo=l(),u_=a("li"),fte=a("strong"),hgo=o("tapas"),pgo=o(" \u2014 "),$P=a("a"),_go=o("TapasModel"),ugo=o(" (TAPAS model)"),bgo=l(),b_=a("li"),mte=a("strong"),vgo=o("transfo-xl"),Fgo=o(" \u2014 "),IP=a("a"),Tgo=o("TransfoXLModel"),Mgo=o(" (Transformer-XL model)"),Ego=l(),v_=a("li"),gte=a("strong"),Cgo=o("unispeech"),wgo=o(" \u2014 "),qP=a("a"),Ago=o("UniSpeechModel"),ygo=o(" (UniSpeech model)"),Lgo=l(),F_=a("li"),hte=a("strong"),xgo=o("unispeech-sat"),kgo=o(" \u2014 "),NP=a("a"),Sgo=o("UniSpeechSatModel"),Rgo=o(" (UniSpeechSat model)"),Bgo=l(),T_=a("li"),pte=a("strong"),Pgo=o("van"),$go=o(" \u2014 "),jP=a("a"),Igo=o("VanModel"),qgo=o(" (VAN model)"),Ngo=l(),M_=a("li"),_te=a("strong"),jgo=o("vilt"),Dgo=o(" \u2014 "),DP=a("a"),Ggo=o("ViltModel"),Ogo=o(" (ViLT model)"),Vgo=l(),E_=a("li"),ute=a("strong"),Xgo=o("vision-text-dual-encoder"),zgo=o(" \u2014 "),GP=a("a"),Qgo=o("VisionTextDualEncoderModel"),Wgo=o(" (VisionTextDualEncoder model)"),Hgo=l(),C_=a("li"),bte=a("strong"),Ugo=o("visual_bert"),Jgo=o(" \u2014 "),OP=a("a"),Ygo=o("VisualBertModel"),Kgo=o(" (VisualBert model)"),Zgo=l(),w_=a("li"),vte=a("strong"),eho=o("vit"),oho=o(" \u2014 "),VP=a("a"),rho=o("ViTModel"),tho=o(" (ViT model)"),aho=l(),A_=a("li"),Fte=a("strong"),nho=o("vit_mae"),sho=o(" \u2014 "),XP=a("a"),lho=o("ViTMAEModel"),iho=o(" (ViTMAE model)"),dho=l(),y_=a("li"),Tte=a("strong"),cho=o("wav2vec2"),fho=o(" \u2014 "),zP=a("a"),mho=o("Wav2Vec2Model"),gho=o(" (Wav2Vec2 model)"),hho=l(),L_=a("li"),Mte=a("strong"),pho=o("wavlm"),_ho=o(" \u2014 "),QP=a("a"),uho=o("WavLMModel"),bho=o(" (WavLM model)"),vho=l(),x_=a("li"),Ete=a("strong"),Fho=o("xglm"),Tho=o(" \u2014 "),WP=a("a"),Mho=o("XGLMModel"),Eho=o(" (XGLM model)"),Cho=l(),k_=a("li"),Cte=a("strong"),who=o("xlm"),Aho=o(" \u2014 "),HP=a("a"),yho=o("XLMModel"),Lho=o(" (XLM model)"),xho=l(),S_=a("li"),wte=a("strong"),kho=o("xlm-prophetnet"),Sho=o(" \u2014 "),UP=a("a"),Rho=o("XLMProphetNetModel"),Bho=o(" (XLMProphetNet model)"),Pho=l(),R_=a("li"),Ate=a("strong"),$ho=o("xlm-roberta"),Iho=o(" \u2014 "),JP=a("a"),qho=o("XLMRobertaModel"),Nho=o(" (XLM-RoBERTa model)"),jho=l(),B_=a("li"),yte=a("strong"),Dho=o("xlm-roberta-xl"),Gho=o(" \u2014 "),YP=a("a"),Oho=o("XLMRobertaXLModel"),Vho=o(" (XLM-RoBERTa-XL model)"),Xho=l(),P_=a("li"),Lte=a("strong"),zho=o("xlnet"),Qho=o(" \u2014 "),KP=a("a"),Who=o("XLNetModel"),Hho=o(" (XLNet model)"),Uho=l(),$_=a("li"),xte=a("strong"),Jho=o("yoso"),Yho=o(" \u2014 "),ZP=a("a"),Kho=o("YosoModel"),Zho=o(" (YOSO model)"),epo=l(),I_=a("p"),opo=o("The model is set in evaluation mode by default using "),kte=a("code"),rpo=o("model.eval()"),tpo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ste=a("code"),apo=o("model.train()"),npo=l(),Rte=a("p"),spo=o("Examples:"),lpo=l(),f(m5.$$.fragment),NRe=l(),ed=a("h2"),q_=a("a"),Bte=a("span"),f(g5.$$.fragment),ipo=l(),Pte=a("span"),dpo=o("AutoModelForPreTraining"),jRe=l(),Yo=a("div"),f(h5.$$.fragment),cpo=l(),od=a("p"),fpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),e$=a("a"),mpo=o("from_pretrained()"),gpo=o(" class method or the "),o$=a("a"),hpo=o("from_config()"),ppo=o(` class
method.`),_po=l(),p5=a("p"),upo=o("This class cannot be instantiated directly using "),$te=a("code"),bpo=o("__init__()"),vpo=o(" (throws an error)."),Fpo=l(),zr=a("div"),f(_5.$$.fragment),Tpo=l(),Ite=a("p"),Mpo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Epo=l(),rd=a("p"),Cpo=o(`Note:
Loading a model from its configuration file does `),qte=a("strong"),wpo=o("not"),Apo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),r$=a("a"),ypo=o("from_pretrained()"),Lpo=o(" to load the model weights."),xpo=l(),Nte=a("p"),kpo=o("Examples:"),Spo=l(),f(u5.$$.fragment),Rpo=l(),Ne=a("div"),f(b5.$$.fragment),Bpo=l(),jte=a("p"),Ppo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$po=l(),za=a("p"),Ipo=o("The model class to instantiate is selected based on the "),Dte=a("code"),qpo=o("model_type"),Npo=o(` property of the config object (either
passed as an argument or loaded from `),Gte=a("code"),jpo=o("pretrained_model_name_or_path"),Dpo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=a("code"),Gpo=o("pretrained_model_name_or_path"),Opo=o(":"),Vpo=l(),R=a("ul"),N_=a("li"),Vte=a("strong"),Xpo=o("albert"),zpo=o(" \u2014 "),t$=a("a"),Qpo=o("AlbertForPreTraining"),Wpo=o(" (ALBERT model)"),Hpo=l(),j_=a("li"),Xte=a("strong"),Upo=o("bart"),Jpo=o(" \u2014 "),a$=a("a"),Ypo=o("BartForConditionalGeneration"),Kpo=o(" (BART model)"),Zpo=l(),D_=a("li"),zte=a("strong"),e_o=o("bert"),o_o=o(" \u2014 "),n$=a("a"),r_o=o("BertForPreTraining"),t_o=o(" (BERT model)"),a_o=l(),G_=a("li"),Qte=a("strong"),n_o=o("big_bird"),s_o=o(" \u2014 "),s$=a("a"),l_o=o("BigBirdForPreTraining"),i_o=o(" (BigBird model)"),d_o=l(),O_=a("li"),Wte=a("strong"),c_o=o("camembert"),f_o=o(" \u2014 "),l$=a("a"),m_o=o("CamembertForMaskedLM"),g_o=o(" (CamemBERT model)"),h_o=l(),V_=a("li"),Hte=a("strong"),p_o=o("ctrl"),__o=o(" \u2014 "),i$=a("a"),u_o=o("CTRLLMHeadModel"),b_o=o(" (CTRL model)"),v_o=l(),X_=a("li"),Ute=a("strong"),F_o=o("deberta"),T_o=o(" \u2014 "),d$=a("a"),M_o=o("DebertaForMaskedLM"),E_o=o(" (DeBERTa model)"),C_o=l(),z_=a("li"),Jte=a("strong"),w_o=o("deberta-v2"),A_o=o(" \u2014 "),c$=a("a"),y_o=o("DebertaV2ForMaskedLM"),L_o=o(" (DeBERTa-v2 model)"),x_o=l(),Q_=a("li"),Yte=a("strong"),k_o=o("distilbert"),S_o=o(" \u2014 "),f$=a("a"),R_o=o("DistilBertForMaskedLM"),B_o=o(" (DistilBERT model)"),P_o=l(),W_=a("li"),Kte=a("strong"),$_o=o("electra"),I_o=o(" \u2014 "),m$=a("a"),q_o=o("ElectraForPreTraining"),N_o=o(" (ELECTRA model)"),j_o=l(),H_=a("li"),Zte=a("strong"),D_o=o("flaubert"),G_o=o(" \u2014 "),g$=a("a"),O_o=o("FlaubertWithLMHeadModel"),V_o=o(" (FlauBERT model)"),X_o=l(),U_=a("li"),eae=a("strong"),z_o=o("fnet"),Q_o=o(" \u2014 "),h$=a("a"),W_o=o("FNetForPreTraining"),H_o=o(" (FNet model)"),U_o=l(),J_=a("li"),oae=a("strong"),J_o=o("fsmt"),Y_o=o(" \u2014 "),p$=a("a"),K_o=o("FSMTForConditionalGeneration"),Z_o=o(" (FairSeq Machine-Translation model)"),euo=l(),Y_=a("li"),rae=a("strong"),ouo=o("funnel"),ruo=o(" \u2014 "),_$=a("a"),tuo=o("FunnelForPreTraining"),auo=o(" (Funnel Transformer model)"),nuo=l(),K_=a("li"),tae=a("strong"),suo=o("gpt2"),luo=o(" \u2014 "),u$=a("a"),iuo=o("GPT2LMHeadModel"),duo=o(" (OpenAI GPT-2 model)"),cuo=l(),Z_=a("li"),aae=a("strong"),fuo=o("ibert"),muo=o(" \u2014 "),b$=a("a"),guo=o("IBertForMaskedLM"),huo=o(" (I-BERT model)"),puo=l(),eu=a("li"),nae=a("strong"),_uo=o("layoutlm"),uuo=o(" \u2014 "),v$=a("a"),buo=o("LayoutLMForMaskedLM"),vuo=o(" (LayoutLM model)"),Fuo=l(),ou=a("li"),sae=a("strong"),Tuo=o("longformer"),Muo=o(" \u2014 "),F$=a("a"),Euo=o("LongformerForMaskedLM"),Cuo=o(" (Longformer model)"),wuo=l(),ru=a("li"),lae=a("strong"),Auo=o("lxmert"),yuo=o(" \u2014 "),T$=a("a"),Luo=o("LxmertForPreTraining"),xuo=o(" (LXMERT model)"),kuo=l(),tu=a("li"),iae=a("strong"),Suo=o("megatron-bert"),Ruo=o(" \u2014 "),M$=a("a"),Buo=o("MegatronBertForPreTraining"),Puo=o(" (MegatronBert model)"),$uo=l(),au=a("li"),dae=a("strong"),Iuo=o("mobilebert"),quo=o(" \u2014 "),E$=a("a"),Nuo=o("MobileBertForPreTraining"),juo=o(" (MobileBERT model)"),Duo=l(),nu=a("li"),cae=a("strong"),Guo=o("mpnet"),Ouo=o(" \u2014 "),C$=a("a"),Vuo=o("MPNetForMaskedLM"),Xuo=o(" (MPNet model)"),zuo=l(),su=a("li"),fae=a("strong"),Quo=o("openai-gpt"),Wuo=o(" \u2014 "),w$=a("a"),Huo=o("OpenAIGPTLMHeadModel"),Uuo=o(" (OpenAI GPT model)"),Juo=l(),lu=a("li"),mae=a("strong"),Yuo=o("retribert"),Kuo=o(" \u2014 "),A$=a("a"),Zuo=o("RetriBertModel"),e1o=o(" (RetriBERT model)"),o1o=l(),iu=a("li"),gae=a("strong"),r1o=o("roberta"),t1o=o(" \u2014 "),y$=a("a"),a1o=o("RobertaForMaskedLM"),n1o=o(" (RoBERTa model)"),s1o=l(),du=a("li"),hae=a("strong"),l1o=o("squeezebert"),i1o=o(" \u2014 "),L$=a("a"),d1o=o("SqueezeBertForMaskedLM"),c1o=o(" (SqueezeBERT model)"),f1o=l(),cu=a("li"),pae=a("strong"),m1o=o("t5"),g1o=o(" \u2014 "),x$=a("a"),h1o=o("T5ForConditionalGeneration"),p1o=o(" (T5 model)"),_1o=l(),fu=a("li"),_ae=a("strong"),u1o=o("tapas"),b1o=o(" \u2014 "),k$=a("a"),v1o=o("TapasForMaskedLM"),F1o=o(" (TAPAS model)"),T1o=l(),mu=a("li"),uae=a("strong"),M1o=o("transfo-xl"),E1o=o(" \u2014 "),S$=a("a"),C1o=o("TransfoXLLMHeadModel"),w1o=o(" (Transformer-XL model)"),A1o=l(),gu=a("li"),bae=a("strong"),y1o=o("unispeech"),L1o=o(" \u2014 "),R$=a("a"),x1o=o("UniSpeechForPreTraining"),k1o=o(" (UniSpeech model)"),S1o=l(),hu=a("li"),vae=a("strong"),R1o=o("unispeech-sat"),B1o=o(" \u2014 "),B$=a("a"),P1o=o("UniSpeechSatForPreTraining"),$1o=o(" (UniSpeechSat model)"),I1o=l(),pu=a("li"),Fae=a("strong"),q1o=o("visual_bert"),N1o=o(" \u2014 "),P$=a("a"),j1o=o("VisualBertForPreTraining"),D1o=o(" (VisualBert model)"),G1o=l(),_u=a("li"),Tae=a("strong"),O1o=o("vit_mae"),V1o=o(" \u2014 "),$$=a("a"),X1o=o("ViTMAEForPreTraining"),z1o=o(" (ViTMAE model)"),Q1o=l(),uu=a("li"),Mae=a("strong"),W1o=o("wav2vec2"),H1o=o(" \u2014 "),I$=a("a"),U1o=o("Wav2Vec2ForPreTraining"),J1o=o(" (Wav2Vec2 model)"),Y1o=l(),bu=a("li"),Eae=a("strong"),K1o=o("xlm"),Z1o=o(" \u2014 "),q$=a("a"),ebo=o("XLMWithLMHeadModel"),obo=o(" (XLM model)"),rbo=l(),vu=a("li"),Cae=a("strong"),tbo=o("xlm-roberta"),abo=o(" \u2014 "),N$=a("a"),nbo=o("XLMRobertaForMaskedLM"),sbo=o(" (XLM-RoBERTa model)"),lbo=l(),Fu=a("li"),wae=a("strong"),ibo=o("xlm-roberta-xl"),dbo=o(" \u2014 "),j$=a("a"),cbo=o("XLMRobertaXLForMaskedLM"),fbo=o(" (XLM-RoBERTa-XL model)"),mbo=l(),Tu=a("li"),Aae=a("strong"),gbo=o("xlnet"),hbo=o(" \u2014 "),D$=a("a"),pbo=o("XLNetLMHeadModel"),_bo=o(" (XLNet model)"),ubo=l(),Mu=a("p"),bbo=o("The model is set in evaluation mode by default using "),yae=a("code"),vbo=o("model.eval()"),Fbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=a("code"),Tbo=o("model.train()"),Mbo=l(),xae=a("p"),Ebo=o("Examples:"),Cbo=l(),f(v5.$$.fragment),DRe=l(),td=a("h2"),Eu=a("a"),kae=a("span"),f(F5.$$.fragment),wbo=l(),Sae=a("span"),Abo=o("AutoModelForCausalLM"),GRe=l(),Ko=a("div"),f(T5.$$.fragment),ybo=l(),ad=a("p"),Lbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G$=a("a"),xbo=o("from_pretrained()"),kbo=o(" class method or the "),O$=a("a"),Sbo=o("from_config()"),Rbo=o(` class
method.`),Bbo=l(),M5=a("p"),Pbo=o("This class cannot be instantiated directly using "),Rae=a("code"),$bo=o("__init__()"),Ibo=o(" (throws an error)."),qbo=l(),Qr=a("div"),f(E5.$$.fragment),Nbo=l(),Bae=a("p"),jbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Dbo=l(),nd=a("p"),Gbo=o(`Note:
Loading a model from its configuration file does `),Pae=a("strong"),Obo=o("not"),Vbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),V$=a("a"),Xbo=o("from_pretrained()"),zbo=o(" to load the model weights."),Qbo=l(),$ae=a("p"),Wbo=o("Examples:"),Hbo=l(),f(C5.$$.fragment),Ubo=l(),je=a("div"),f(w5.$$.fragment),Jbo=l(),Iae=a("p"),Ybo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kbo=l(),Qa=a("p"),Zbo=o("The model class to instantiate is selected based on the "),qae=a("code"),e2o=o("model_type"),o2o=o(` property of the config object (either
passed as an argument or loaded from `),Nae=a("code"),r2o=o("pretrained_model_name_or_path"),t2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jae=a("code"),a2o=o("pretrained_model_name_or_path"),n2o=o(":"),s2o=l(),$=a("ul"),Cu=a("li"),Dae=a("strong"),l2o=o("bart"),i2o=o(" \u2014 "),X$=a("a"),d2o=o("BartForCausalLM"),c2o=o(" (BART model)"),f2o=l(),wu=a("li"),Gae=a("strong"),m2o=o("bert"),g2o=o(" \u2014 "),z$=a("a"),h2o=o("BertLMHeadModel"),p2o=o(" (BERT model)"),_2o=l(),Au=a("li"),Oae=a("strong"),u2o=o("bert-generation"),b2o=o(" \u2014 "),Q$=a("a"),v2o=o("BertGenerationDecoder"),F2o=o(" (Bert Generation model)"),T2o=l(),yu=a("li"),Vae=a("strong"),M2o=o("big_bird"),E2o=o(" \u2014 "),W$=a("a"),C2o=o("BigBirdForCausalLM"),w2o=o(" (BigBird model)"),A2o=l(),Lu=a("li"),Xae=a("strong"),y2o=o("bigbird_pegasus"),L2o=o(" \u2014 "),H$=a("a"),x2o=o("BigBirdPegasusForCausalLM"),k2o=o(" (BigBirdPegasus model)"),S2o=l(),xu=a("li"),zae=a("strong"),R2o=o("blenderbot"),B2o=o(" \u2014 "),U$=a("a"),P2o=o("BlenderbotForCausalLM"),$2o=o(" (Blenderbot model)"),I2o=l(),ku=a("li"),Qae=a("strong"),q2o=o("blenderbot-small"),N2o=o(" \u2014 "),J$=a("a"),j2o=o("BlenderbotSmallForCausalLM"),D2o=o(" (BlenderbotSmall model)"),G2o=l(),Su=a("li"),Wae=a("strong"),O2o=o("camembert"),V2o=o(" \u2014 "),Y$=a("a"),X2o=o("CamembertForCausalLM"),z2o=o(" (CamemBERT model)"),Q2o=l(),Ru=a("li"),Hae=a("strong"),W2o=o("ctrl"),H2o=o(" \u2014 "),K$=a("a"),U2o=o("CTRLLMHeadModel"),J2o=o(" (CTRL model)"),Y2o=l(),Bu=a("li"),Uae=a("strong"),K2o=o("data2vec-text"),Z2o=o(" \u2014 "),Z$=a("a"),e3o=o("Data2VecTextForCausalLM"),o3o=o(" (Data2VecText model)"),r3o=l(),Pu=a("li"),Jae=a("strong"),t3o=o("electra"),a3o=o(" \u2014 "),eI=a("a"),n3o=o("ElectraForCausalLM"),s3o=o(" (ELECTRA model)"),l3o=l(),$u=a("li"),Yae=a("strong"),i3o=o("gpt2"),d3o=o(" \u2014 "),oI=a("a"),c3o=o("GPT2LMHeadModel"),f3o=o(" (OpenAI GPT-2 model)"),m3o=l(),Iu=a("li"),Kae=a("strong"),g3o=o("gpt_neo"),h3o=o(" \u2014 "),rI=a("a"),p3o=o("GPTNeoForCausalLM"),_3o=o(" (GPT Neo model)"),u3o=l(),qu=a("li"),Zae=a("strong"),b3o=o("gptj"),v3o=o(" \u2014 "),tI=a("a"),F3o=o("GPTJForCausalLM"),T3o=o(" (GPT-J model)"),M3o=l(),Nu=a("li"),ene=a("strong"),E3o=o("marian"),C3o=o(" \u2014 "),aI=a("a"),w3o=o("MarianForCausalLM"),A3o=o(" (Marian model)"),y3o=l(),ju=a("li"),one=a("strong"),L3o=o("mbart"),x3o=o(" \u2014 "),nI=a("a"),k3o=o("MBartForCausalLM"),S3o=o(" (mBART model)"),R3o=l(),Du=a("li"),rne=a("strong"),B3o=o("megatron-bert"),P3o=o(" \u2014 "),sI=a("a"),$3o=o("MegatronBertForCausalLM"),I3o=o(" (MegatronBert model)"),q3o=l(),Gu=a("li"),tne=a("strong"),N3o=o("openai-gpt"),j3o=o(" \u2014 "),lI=a("a"),D3o=o("OpenAIGPTLMHeadModel"),G3o=o(" (OpenAI GPT model)"),O3o=l(),Ou=a("li"),ane=a("strong"),V3o=o("pegasus"),X3o=o(" \u2014 "),iI=a("a"),z3o=o("PegasusForCausalLM"),Q3o=o(" (Pegasus model)"),W3o=l(),Vu=a("li"),nne=a("strong"),H3o=o("plbart"),U3o=o(" \u2014 "),dI=a("a"),J3o=o("PLBartForCausalLM"),Y3o=o(" (PLBart model)"),K3o=l(),Xu=a("li"),sne=a("strong"),Z3o=o("prophetnet"),e6o=o(" \u2014 "),cI=a("a"),o6o=o("ProphetNetForCausalLM"),r6o=o(" (ProphetNet model)"),t6o=l(),zu=a("li"),lne=a("strong"),a6o=o("qdqbert"),n6o=o(" \u2014 "),fI=a("a"),s6o=o("QDQBertLMHeadModel"),l6o=o(" (QDQBert model)"),i6o=l(),Qu=a("li"),ine=a("strong"),d6o=o("reformer"),c6o=o(" \u2014 "),mI=a("a"),f6o=o("ReformerModelWithLMHead"),m6o=o(" (Reformer model)"),g6o=l(),Wu=a("li"),dne=a("strong"),h6o=o("rembert"),p6o=o(" \u2014 "),gI=a("a"),_6o=o("RemBertForCausalLM"),u6o=o(" (RemBERT model)"),b6o=l(),Hu=a("li"),cne=a("strong"),v6o=o("roberta"),F6o=o(" \u2014 "),hI=a("a"),T6o=o("RobertaForCausalLM"),M6o=o(" (RoBERTa model)"),E6o=l(),Uu=a("li"),fne=a("strong"),C6o=o("roformer"),w6o=o(" \u2014 "),pI=a("a"),A6o=o("RoFormerForCausalLM"),y6o=o(" (RoFormer model)"),L6o=l(),Ju=a("li"),mne=a("strong"),x6o=o("speech_to_text_2"),k6o=o(" \u2014 "),_I=a("a"),S6o=o("Speech2Text2ForCausalLM"),R6o=o(" (Speech2Text2 model)"),B6o=l(),Yu=a("li"),gne=a("strong"),P6o=o("transfo-xl"),$6o=o(" \u2014 "),uI=a("a"),I6o=o("TransfoXLLMHeadModel"),q6o=o(" (Transformer-XL model)"),N6o=l(),Ku=a("li"),hne=a("strong"),j6o=o("trocr"),D6o=o(" \u2014 "),bI=a("a"),G6o=o("TrOCRForCausalLM"),O6o=o(" (TrOCR model)"),V6o=l(),Zu=a("li"),pne=a("strong"),X6o=o("xglm"),z6o=o(" \u2014 "),vI=a("a"),Q6o=o("XGLMForCausalLM"),W6o=o(" (XGLM model)"),H6o=l(),e1=a("li"),_ne=a("strong"),U6o=o("xlm"),J6o=o(" \u2014 "),FI=a("a"),Y6o=o("XLMWithLMHeadModel"),K6o=o(" (XLM model)"),Z6o=l(),o1=a("li"),une=a("strong"),evo=o("xlm-prophetnet"),ovo=o(" \u2014 "),TI=a("a"),rvo=o("XLMProphetNetForCausalLM"),tvo=o(" (XLMProphetNet model)"),avo=l(),r1=a("li"),bne=a("strong"),nvo=o("xlm-roberta"),svo=o(" \u2014 "),MI=a("a"),lvo=o("XLMRobertaForCausalLM"),ivo=o(" (XLM-RoBERTa model)"),dvo=l(),t1=a("li"),vne=a("strong"),cvo=o("xlm-roberta-xl"),fvo=o(" \u2014 "),EI=a("a"),mvo=o("XLMRobertaXLForCausalLM"),gvo=o(" (XLM-RoBERTa-XL model)"),hvo=l(),a1=a("li"),Fne=a("strong"),pvo=o("xlnet"),_vo=o(" \u2014 "),CI=a("a"),uvo=o("XLNetLMHeadModel"),bvo=o(" (XLNet model)"),vvo=l(),n1=a("p"),Fvo=o("The model is set in evaluation mode by default using "),Tne=a("code"),Tvo=o("model.eval()"),Mvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=a("code"),Evo=o("model.train()"),Cvo=l(),Ene=a("p"),wvo=o("Examples:"),Avo=l(),f(A5.$$.fragment),ORe=l(),sd=a("h2"),s1=a("a"),Cne=a("span"),f(y5.$$.fragment),yvo=l(),wne=a("span"),Lvo=o("AutoModelForMaskedLM"),VRe=l(),Zo=a("div"),f(L5.$$.fragment),xvo=l(),ld=a("p"),kvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wI=a("a"),Svo=o("from_pretrained()"),Rvo=o(" class method or the "),AI=a("a"),Bvo=o("from_config()"),Pvo=o(` class
method.`),$vo=l(),x5=a("p"),Ivo=o("This class cannot be instantiated directly using "),Ane=a("code"),qvo=o("__init__()"),Nvo=o(" (throws an error)."),jvo=l(),Wr=a("div"),f(k5.$$.fragment),Dvo=l(),yne=a("p"),Gvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ovo=l(),id=a("p"),Vvo=o(`Note:
Loading a model from its configuration file does `),Lne=a("strong"),Xvo=o("not"),zvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=a("a"),Qvo=o("from_pretrained()"),Wvo=o(" to load the model weights."),Hvo=l(),xne=a("p"),Uvo=o("Examples:"),Jvo=l(),f(S5.$$.fragment),Yvo=l(),De=a("div"),f(R5.$$.fragment),Kvo=l(),kne=a("p"),Zvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),eFo=l(),Wa=a("p"),oFo=o("The model class to instantiate is selected based on the "),Sne=a("code"),rFo=o("model_type"),tFo=o(` property of the config object (either
passed as an argument or loaded from `),Rne=a("code"),aFo=o("pretrained_model_name_or_path"),nFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=a("code"),sFo=o("pretrained_model_name_or_path"),lFo=o(":"),iFo=l(),I=a("ul"),l1=a("li"),Pne=a("strong"),dFo=o("albert"),cFo=o(" \u2014 "),LI=a("a"),fFo=o("AlbertForMaskedLM"),mFo=o(" (ALBERT model)"),gFo=l(),i1=a("li"),$ne=a("strong"),hFo=o("bart"),pFo=o(" \u2014 "),xI=a("a"),_Fo=o("BartForConditionalGeneration"),uFo=o(" (BART model)"),bFo=l(),d1=a("li"),Ine=a("strong"),vFo=o("bert"),FFo=o(" \u2014 "),kI=a("a"),TFo=o("BertForMaskedLM"),MFo=o(" (BERT model)"),EFo=l(),c1=a("li"),qne=a("strong"),CFo=o("big_bird"),wFo=o(" \u2014 "),SI=a("a"),AFo=o("BigBirdForMaskedLM"),yFo=o(" (BigBird model)"),LFo=l(),f1=a("li"),Nne=a("strong"),xFo=o("camembert"),kFo=o(" \u2014 "),RI=a("a"),SFo=o("CamembertForMaskedLM"),RFo=o(" (CamemBERT model)"),BFo=l(),m1=a("li"),jne=a("strong"),PFo=o("convbert"),$Fo=o(" \u2014 "),BI=a("a"),IFo=o("ConvBertForMaskedLM"),qFo=o(" (ConvBERT model)"),NFo=l(),g1=a("li"),Dne=a("strong"),jFo=o("deberta"),DFo=o(" \u2014 "),PI=a("a"),GFo=o("DebertaForMaskedLM"),OFo=o(" (DeBERTa model)"),VFo=l(),h1=a("li"),Gne=a("strong"),XFo=o("deberta-v2"),zFo=o(" \u2014 "),$I=a("a"),QFo=o("DebertaV2ForMaskedLM"),WFo=o(" (DeBERTa-v2 model)"),HFo=l(),p1=a("li"),One=a("strong"),UFo=o("distilbert"),JFo=o(" \u2014 "),II=a("a"),YFo=o("DistilBertForMaskedLM"),KFo=o(" (DistilBERT model)"),ZFo=l(),_1=a("li"),Vne=a("strong"),eTo=o("electra"),oTo=o(" \u2014 "),qI=a("a"),rTo=o("ElectraForMaskedLM"),tTo=o(" (ELECTRA model)"),aTo=l(),u1=a("li"),Xne=a("strong"),nTo=o("flaubert"),sTo=o(" \u2014 "),NI=a("a"),lTo=o("FlaubertWithLMHeadModel"),iTo=o(" (FlauBERT model)"),dTo=l(),b1=a("li"),zne=a("strong"),cTo=o("fnet"),fTo=o(" \u2014 "),jI=a("a"),mTo=o("FNetForMaskedLM"),gTo=o(" (FNet model)"),hTo=l(),v1=a("li"),Qne=a("strong"),pTo=o("funnel"),_To=o(" \u2014 "),DI=a("a"),uTo=o("FunnelForMaskedLM"),bTo=o(" (Funnel Transformer model)"),vTo=l(),F1=a("li"),Wne=a("strong"),FTo=o("ibert"),TTo=o(" \u2014 "),GI=a("a"),MTo=o("IBertForMaskedLM"),ETo=o(" (I-BERT model)"),CTo=l(),T1=a("li"),Hne=a("strong"),wTo=o("layoutlm"),ATo=o(" \u2014 "),OI=a("a"),yTo=o("LayoutLMForMaskedLM"),LTo=o(" (LayoutLM model)"),xTo=l(),M1=a("li"),Une=a("strong"),kTo=o("longformer"),STo=o(" \u2014 "),VI=a("a"),RTo=o("LongformerForMaskedLM"),BTo=o(" (Longformer model)"),PTo=l(),E1=a("li"),Jne=a("strong"),$To=o("mbart"),ITo=o(" \u2014 "),XI=a("a"),qTo=o("MBartForConditionalGeneration"),NTo=o(" (mBART model)"),jTo=l(),C1=a("li"),Yne=a("strong"),DTo=o("megatron-bert"),GTo=o(" \u2014 "),zI=a("a"),OTo=o("MegatronBertForMaskedLM"),VTo=o(" (MegatronBert model)"),XTo=l(),w1=a("li"),Kne=a("strong"),zTo=o("mobilebert"),QTo=o(" \u2014 "),QI=a("a"),WTo=o("MobileBertForMaskedLM"),HTo=o(" (MobileBERT model)"),UTo=l(),A1=a("li"),Zne=a("strong"),JTo=o("mpnet"),YTo=o(" \u2014 "),WI=a("a"),KTo=o("MPNetForMaskedLM"),ZTo=o(" (MPNet model)"),e8o=l(),y1=a("li"),ese=a("strong"),o8o=o("nystromformer"),r8o=o(" \u2014 "),HI=a("a"),t8o=o("NystromformerForMaskedLM"),a8o=o(" (Nystromformer model)"),n8o=l(),L1=a("li"),ose=a("strong"),s8o=o("perceiver"),l8o=o(" \u2014 "),UI=a("a"),i8o=o("PerceiverForMaskedLM"),d8o=o(" (Perceiver model)"),c8o=l(),x1=a("li"),rse=a("strong"),f8o=o("qdqbert"),m8o=o(" \u2014 "),JI=a("a"),g8o=o("QDQBertForMaskedLM"),h8o=o(" (QDQBert model)"),p8o=l(),k1=a("li"),tse=a("strong"),_8o=o("reformer"),u8o=o(" \u2014 "),YI=a("a"),b8o=o("ReformerForMaskedLM"),v8o=o(" (Reformer model)"),F8o=l(),S1=a("li"),ase=a("strong"),T8o=o("rembert"),M8o=o(" \u2014 "),KI=a("a"),E8o=o("RemBertForMaskedLM"),C8o=o(" (RemBERT model)"),w8o=l(),R1=a("li"),nse=a("strong"),A8o=o("roberta"),y8o=o(" \u2014 "),ZI=a("a"),L8o=o("RobertaForMaskedLM"),x8o=o(" (RoBERTa model)"),k8o=l(),B1=a("li"),sse=a("strong"),S8o=o("roformer"),R8o=o(" \u2014 "),eq=a("a"),B8o=o("RoFormerForMaskedLM"),P8o=o(" (RoFormer model)"),$8o=l(),P1=a("li"),lse=a("strong"),I8o=o("squeezebert"),q8o=o(" \u2014 "),oq=a("a"),N8o=o("SqueezeBertForMaskedLM"),j8o=o(" (SqueezeBERT model)"),D8o=l(),$1=a("li"),ise=a("strong"),G8o=o("tapas"),O8o=o(" \u2014 "),rq=a("a"),V8o=o("TapasForMaskedLM"),X8o=o(" (TAPAS model)"),z8o=l(),I1=a("li"),dse=a("strong"),Q8o=o("wav2vec2"),W8o=o(" \u2014 "),cse=a("code"),H8o=o("Wav2Vec2ForMaskedLM"),U8o=o(" (Wav2Vec2 model)"),J8o=l(),q1=a("li"),fse=a("strong"),Y8o=o("xlm"),K8o=o(" \u2014 "),tq=a("a"),Z8o=o("XLMWithLMHeadModel"),e9o=o(" (XLM model)"),o9o=l(),N1=a("li"),mse=a("strong"),r9o=o("xlm-roberta"),t9o=o(" \u2014 "),aq=a("a"),a9o=o("XLMRobertaForMaskedLM"),n9o=o(" (XLM-RoBERTa model)"),s9o=l(),j1=a("li"),gse=a("strong"),l9o=o("xlm-roberta-xl"),i9o=o(" \u2014 "),nq=a("a"),d9o=o("XLMRobertaXLForMaskedLM"),c9o=o(" (XLM-RoBERTa-XL model)"),f9o=l(),D1=a("li"),hse=a("strong"),m9o=o("yoso"),g9o=o(" \u2014 "),sq=a("a"),h9o=o("YosoForMaskedLM"),p9o=o(" (YOSO model)"),_9o=l(),G1=a("p"),u9o=o("The model is set in evaluation mode by default using "),pse=a("code"),b9o=o("model.eval()"),v9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=a("code"),F9o=o("model.train()"),T9o=l(),use=a("p"),M9o=o("Examples:"),E9o=l(),f(B5.$$.fragment),XRe=l(),dd=a("h2"),O1=a("a"),bse=a("span"),f(P5.$$.fragment),C9o=l(),vse=a("span"),w9o=o("AutoModelForSeq2SeqLM"),zRe=l(),er=a("div"),f($5.$$.fragment),A9o=l(),cd=a("p"),y9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lq=a("a"),L9o=o("from_pretrained()"),x9o=o(" class method or the "),iq=a("a"),k9o=o("from_config()"),S9o=o(` class
method.`),R9o=l(),I5=a("p"),B9o=o("This class cannot be instantiated directly using "),Fse=a("code"),P9o=o("__init__()"),$9o=o(" (throws an error)."),I9o=l(),Hr=a("div"),f(q5.$$.fragment),q9o=l(),Tse=a("p"),N9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),j9o=l(),fd=a("p"),D9o=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),G9o=o("not"),O9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dq=a("a"),V9o=o("from_pretrained()"),X9o=o(" to load the model weights."),z9o=l(),Ese=a("p"),Q9o=o("Examples:"),W9o=l(),f(N5.$$.fragment),H9o=l(),Ge=a("div"),f(j5.$$.fragment),U9o=l(),Cse=a("p"),J9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Y9o=l(),Ha=a("p"),K9o=o("The model class to instantiate is selected based on the "),wse=a("code"),Z9o=o("model_type"),eMo=o(` property of the config object (either
passed as an argument or loaded from `),Ase=a("code"),oMo=o("pretrained_model_name_or_path"),rMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=a("code"),tMo=o("pretrained_model_name_or_path"),aMo=o(":"),nMo=l(),ne=a("ul"),V1=a("li"),Lse=a("strong"),sMo=o("bart"),lMo=o(" \u2014 "),cq=a("a"),iMo=o("BartForConditionalGeneration"),dMo=o(" (BART model)"),cMo=l(),X1=a("li"),xse=a("strong"),fMo=o("bigbird_pegasus"),mMo=o(" \u2014 "),fq=a("a"),gMo=o("BigBirdPegasusForConditionalGeneration"),hMo=o(" (BigBirdPegasus model)"),pMo=l(),z1=a("li"),kse=a("strong"),_Mo=o("blenderbot"),uMo=o(" \u2014 "),mq=a("a"),bMo=o("BlenderbotForConditionalGeneration"),vMo=o(" (Blenderbot model)"),FMo=l(),Q1=a("li"),Sse=a("strong"),TMo=o("blenderbot-small"),MMo=o(" \u2014 "),gq=a("a"),EMo=o("BlenderbotSmallForConditionalGeneration"),CMo=o(" (BlenderbotSmall model)"),wMo=l(),W1=a("li"),Rse=a("strong"),AMo=o("encoder-decoder"),yMo=o(" \u2014 "),hq=a("a"),LMo=o("EncoderDecoderModel"),xMo=o(" (Encoder decoder model)"),kMo=l(),H1=a("li"),Bse=a("strong"),SMo=o("fsmt"),RMo=o(" \u2014 "),pq=a("a"),BMo=o("FSMTForConditionalGeneration"),PMo=o(" (FairSeq Machine-Translation model)"),$Mo=l(),U1=a("li"),Pse=a("strong"),IMo=o("led"),qMo=o(" \u2014 "),_q=a("a"),NMo=o("LEDForConditionalGeneration"),jMo=o(" (LED model)"),DMo=l(),J1=a("li"),$se=a("strong"),GMo=o("m2m_100"),OMo=o(" \u2014 "),uq=a("a"),VMo=o("M2M100ForConditionalGeneration"),XMo=o(" (M2M100 model)"),zMo=l(),Y1=a("li"),Ise=a("strong"),QMo=o("marian"),WMo=o(" \u2014 "),bq=a("a"),HMo=o("MarianMTModel"),UMo=o(" (Marian model)"),JMo=l(),K1=a("li"),qse=a("strong"),YMo=o("mbart"),KMo=o(" \u2014 "),vq=a("a"),ZMo=o("MBartForConditionalGeneration"),e4o=o(" (mBART model)"),o4o=l(),Z1=a("li"),Nse=a("strong"),r4o=o("mt5"),t4o=o(" \u2014 "),Fq=a("a"),a4o=o("MT5ForConditionalGeneration"),n4o=o(" (mT5 model)"),s4o=l(),eb=a("li"),jse=a("strong"),l4o=o("pegasus"),i4o=o(" \u2014 "),Tq=a("a"),d4o=o("PegasusForConditionalGeneration"),c4o=o(" (Pegasus model)"),f4o=l(),ob=a("li"),Dse=a("strong"),m4o=o("plbart"),g4o=o(" \u2014 "),Mq=a("a"),h4o=o("PLBartForConditionalGeneration"),p4o=o(" (PLBart model)"),_4o=l(),rb=a("li"),Gse=a("strong"),u4o=o("prophetnet"),b4o=o(" \u2014 "),Eq=a("a"),v4o=o("ProphetNetForConditionalGeneration"),F4o=o(" (ProphetNet model)"),T4o=l(),tb=a("li"),Ose=a("strong"),M4o=o("t5"),E4o=o(" \u2014 "),Cq=a("a"),C4o=o("T5ForConditionalGeneration"),w4o=o(" (T5 model)"),A4o=l(),ab=a("li"),Vse=a("strong"),y4o=o("tapex"),L4o=o(" \u2014 "),wq=a("a"),x4o=o("BartForConditionalGeneration"),k4o=o(" (TAPEX model)"),S4o=l(),nb=a("li"),Xse=a("strong"),R4o=o("xlm-prophetnet"),B4o=o(" \u2014 "),Aq=a("a"),P4o=o("XLMProphetNetForConditionalGeneration"),$4o=o(" (XLMProphetNet model)"),I4o=l(),sb=a("p"),q4o=o("The model is set in evaluation mode by default using "),zse=a("code"),N4o=o("model.eval()"),j4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=a("code"),D4o=o("model.train()"),G4o=l(),Wse=a("p"),O4o=o("Examples:"),V4o=l(),f(D5.$$.fragment),QRe=l(),md=a("h2"),lb=a("a"),Hse=a("span"),f(G5.$$.fragment),X4o=l(),Use=a("span"),z4o=o("AutoModelForSequenceClassification"),WRe=l(),or=a("div"),f(O5.$$.fragment),Q4o=l(),gd=a("p"),W4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yq=a("a"),H4o=o("from_pretrained()"),U4o=o(" class method or the "),Lq=a("a"),J4o=o("from_config()"),Y4o=o(` class
method.`),K4o=l(),V5=a("p"),Z4o=o("This class cannot be instantiated directly using "),Jse=a("code"),eEo=o("__init__()"),oEo=o(" (throws an error)."),rEo=l(),Ur=a("div"),f(X5.$$.fragment),tEo=l(),Yse=a("p"),aEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),nEo=l(),hd=a("p"),sEo=o(`Note:
Loading a model from its configuration file does `),Kse=a("strong"),lEo=o("not"),iEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=a("a"),dEo=o("from_pretrained()"),cEo=o(" to load the model weights."),fEo=l(),Zse=a("p"),mEo=o("Examples:"),gEo=l(),f(z5.$$.fragment),hEo=l(),Oe=a("div"),f(Q5.$$.fragment),pEo=l(),ele=a("p"),_Eo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uEo=l(),Ua=a("p"),bEo=o("The model class to instantiate is selected based on the "),ole=a("code"),vEo=o("model_type"),FEo=o(` property of the config object (either
passed as an argument or loaded from `),rle=a("code"),TEo=o("pretrained_model_name_or_path"),MEo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=a("code"),EEo=o("pretrained_model_name_or_path"),CEo=o(":"),wEo=l(),y=a("ul"),ib=a("li"),ale=a("strong"),AEo=o("albert"),yEo=o(" \u2014 "),kq=a("a"),LEo=o("AlbertForSequenceClassification"),xEo=o(" (ALBERT model)"),kEo=l(),db=a("li"),nle=a("strong"),SEo=o("bart"),REo=o(" \u2014 "),Sq=a("a"),BEo=o("BartForSequenceClassification"),PEo=o(" (BART model)"),$Eo=l(),cb=a("li"),sle=a("strong"),IEo=o("bert"),qEo=o(" \u2014 "),Rq=a("a"),NEo=o("BertForSequenceClassification"),jEo=o(" (BERT model)"),DEo=l(),fb=a("li"),lle=a("strong"),GEo=o("big_bird"),OEo=o(" \u2014 "),Bq=a("a"),VEo=o("BigBirdForSequenceClassification"),XEo=o(" (BigBird model)"),zEo=l(),mb=a("li"),ile=a("strong"),QEo=o("bigbird_pegasus"),WEo=o(" \u2014 "),Pq=a("a"),HEo=o("BigBirdPegasusForSequenceClassification"),UEo=o(" (BigBirdPegasus model)"),JEo=l(),gb=a("li"),dle=a("strong"),YEo=o("camembert"),KEo=o(" \u2014 "),$q=a("a"),ZEo=o("CamembertForSequenceClassification"),e5o=o(" (CamemBERT model)"),o5o=l(),hb=a("li"),cle=a("strong"),r5o=o("canine"),t5o=o(" \u2014 "),Iq=a("a"),a5o=o("CanineForSequenceClassification"),n5o=o(" (Canine model)"),s5o=l(),pb=a("li"),fle=a("strong"),l5o=o("convbert"),i5o=o(" \u2014 "),qq=a("a"),d5o=o("ConvBertForSequenceClassification"),c5o=o(" (ConvBERT model)"),f5o=l(),_b=a("li"),mle=a("strong"),m5o=o("ctrl"),g5o=o(" \u2014 "),Nq=a("a"),h5o=o("CTRLForSequenceClassification"),p5o=o(" (CTRL model)"),_5o=l(),ub=a("li"),gle=a("strong"),u5o=o("data2vec-text"),b5o=o(" \u2014 "),jq=a("a"),v5o=o("Data2VecTextForSequenceClassification"),F5o=o(" (Data2VecText model)"),T5o=l(),bb=a("li"),hle=a("strong"),M5o=o("deberta"),E5o=o(" \u2014 "),Dq=a("a"),C5o=o("DebertaForSequenceClassification"),w5o=o(" (DeBERTa model)"),A5o=l(),vb=a("li"),ple=a("strong"),y5o=o("deberta-v2"),L5o=o(" \u2014 "),Gq=a("a"),x5o=o("DebertaV2ForSequenceClassification"),k5o=o(" (DeBERTa-v2 model)"),S5o=l(),Fb=a("li"),_le=a("strong"),R5o=o("distilbert"),B5o=o(" \u2014 "),Oq=a("a"),P5o=o("DistilBertForSequenceClassification"),$5o=o(" (DistilBERT model)"),I5o=l(),Tb=a("li"),ule=a("strong"),q5o=o("electra"),N5o=o(" \u2014 "),Vq=a("a"),j5o=o("ElectraForSequenceClassification"),D5o=o(" (ELECTRA model)"),G5o=l(),Mb=a("li"),ble=a("strong"),O5o=o("flaubert"),V5o=o(" \u2014 "),Xq=a("a"),X5o=o("FlaubertForSequenceClassification"),z5o=o(" (FlauBERT model)"),Q5o=l(),Eb=a("li"),vle=a("strong"),W5o=o("fnet"),H5o=o(" \u2014 "),zq=a("a"),U5o=o("FNetForSequenceClassification"),J5o=o(" (FNet model)"),Y5o=l(),Cb=a("li"),Fle=a("strong"),K5o=o("funnel"),Z5o=o(" \u2014 "),Qq=a("a"),eCo=o("FunnelForSequenceClassification"),oCo=o(" (Funnel Transformer model)"),rCo=l(),wb=a("li"),Tle=a("strong"),tCo=o("gpt2"),aCo=o(" \u2014 "),Wq=a("a"),nCo=o("GPT2ForSequenceClassification"),sCo=o(" (OpenAI GPT-2 model)"),lCo=l(),Ab=a("li"),Mle=a("strong"),iCo=o("gpt_neo"),dCo=o(" \u2014 "),Hq=a("a"),cCo=o("GPTNeoForSequenceClassification"),fCo=o(" (GPT Neo model)"),mCo=l(),yb=a("li"),Ele=a("strong"),gCo=o("gptj"),hCo=o(" \u2014 "),Uq=a("a"),pCo=o("GPTJForSequenceClassification"),_Co=o(" (GPT-J model)"),uCo=l(),Lb=a("li"),Cle=a("strong"),bCo=o("ibert"),vCo=o(" \u2014 "),Jq=a("a"),FCo=o("IBertForSequenceClassification"),TCo=o(" (I-BERT model)"),MCo=l(),xb=a("li"),wle=a("strong"),ECo=o("layoutlm"),CCo=o(" \u2014 "),Yq=a("a"),wCo=o("LayoutLMForSequenceClassification"),ACo=o(" (LayoutLM model)"),yCo=l(),kb=a("li"),Ale=a("strong"),LCo=o("layoutlmv2"),xCo=o(" \u2014 "),Kq=a("a"),kCo=o("LayoutLMv2ForSequenceClassification"),SCo=o(" (LayoutLMv2 model)"),RCo=l(),Sb=a("li"),yle=a("strong"),BCo=o("led"),PCo=o(" \u2014 "),Zq=a("a"),$Co=o("LEDForSequenceClassification"),ICo=o(" (LED model)"),qCo=l(),Rb=a("li"),Lle=a("strong"),NCo=o("longformer"),jCo=o(" \u2014 "),eN=a("a"),DCo=o("LongformerForSequenceClassification"),GCo=o(" (Longformer model)"),OCo=l(),Bb=a("li"),xle=a("strong"),VCo=o("mbart"),XCo=o(" \u2014 "),oN=a("a"),zCo=o("MBartForSequenceClassification"),QCo=o(" (mBART model)"),WCo=l(),Pb=a("li"),kle=a("strong"),HCo=o("megatron-bert"),UCo=o(" \u2014 "),rN=a("a"),JCo=o("MegatronBertForSequenceClassification"),YCo=o(" (MegatronBert model)"),KCo=l(),$b=a("li"),Sle=a("strong"),ZCo=o("mobilebert"),ewo=o(" \u2014 "),tN=a("a"),owo=o("MobileBertForSequenceClassification"),rwo=o(" (MobileBERT model)"),two=l(),Ib=a("li"),Rle=a("strong"),awo=o("mpnet"),nwo=o(" \u2014 "),aN=a("a"),swo=o("MPNetForSequenceClassification"),lwo=o(" (MPNet model)"),iwo=l(),qb=a("li"),Ble=a("strong"),dwo=o("nystromformer"),cwo=o(" \u2014 "),nN=a("a"),fwo=o("NystromformerForSequenceClassification"),mwo=o(" (Nystromformer model)"),gwo=l(),Nb=a("li"),Ple=a("strong"),hwo=o("openai-gpt"),pwo=o(" \u2014 "),sN=a("a"),_wo=o("OpenAIGPTForSequenceClassification"),uwo=o(" (OpenAI GPT model)"),bwo=l(),jb=a("li"),$le=a("strong"),vwo=o("perceiver"),Fwo=o(" \u2014 "),lN=a("a"),Two=o("PerceiverForSequenceClassification"),Mwo=o(" (Perceiver model)"),Ewo=l(),Db=a("li"),Ile=a("strong"),Cwo=o("plbart"),wwo=o(" \u2014 "),iN=a("a"),Awo=o("PLBartForSequenceClassification"),ywo=o(" (PLBart model)"),Lwo=l(),Gb=a("li"),qle=a("strong"),xwo=o("qdqbert"),kwo=o(" \u2014 "),dN=a("a"),Swo=o("QDQBertForSequenceClassification"),Rwo=o(" (QDQBert model)"),Bwo=l(),Ob=a("li"),Nle=a("strong"),Pwo=o("reformer"),$wo=o(" \u2014 "),cN=a("a"),Iwo=o("ReformerForSequenceClassification"),qwo=o(" (Reformer model)"),Nwo=l(),Vb=a("li"),jle=a("strong"),jwo=o("rembert"),Dwo=o(" \u2014 "),fN=a("a"),Gwo=o("RemBertForSequenceClassification"),Owo=o(" (RemBERT model)"),Vwo=l(),Xb=a("li"),Dle=a("strong"),Xwo=o("roberta"),zwo=o(" \u2014 "),mN=a("a"),Qwo=o("RobertaForSequenceClassification"),Wwo=o(" (RoBERTa model)"),Hwo=l(),zb=a("li"),Gle=a("strong"),Uwo=o("roformer"),Jwo=o(" \u2014 "),gN=a("a"),Ywo=o("RoFormerForSequenceClassification"),Kwo=o(" (RoFormer model)"),Zwo=l(),Qb=a("li"),Ole=a("strong"),eAo=o("squeezebert"),oAo=o(" \u2014 "),hN=a("a"),rAo=o("SqueezeBertForSequenceClassification"),tAo=o(" (SqueezeBERT model)"),aAo=l(),Wb=a("li"),Vle=a("strong"),nAo=o("tapas"),sAo=o(" \u2014 "),pN=a("a"),lAo=o("TapasForSequenceClassification"),iAo=o(" (TAPAS model)"),dAo=l(),Hb=a("li"),Xle=a("strong"),cAo=o("tapex"),fAo=o(" \u2014 "),_N=a("a"),mAo=o("BartForSequenceClassification"),gAo=o(" (TAPEX model)"),hAo=l(),Ub=a("li"),zle=a("strong"),pAo=o("transfo-xl"),_Ao=o(" \u2014 "),uN=a("a"),uAo=o("TransfoXLForSequenceClassification"),bAo=o(" (Transformer-XL model)"),vAo=l(),Jb=a("li"),Qle=a("strong"),FAo=o("xlm"),TAo=o(" \u2014 "),bN=a("a"),MAo=o("XLMForSequenceClassification"),EAo=o(" (XLM model)"),CAo=l(),Yb=a("li"),Wle=a("strong"),wAo=o("xlm-roberta"),AAo=o(" \u2014 "),vN=a("a"),yAo=o("XLMRobertaForSequenceClassification"),LAo=o(" (XLM-RoBERTa model)"),xAo=l(),Kb=a("li"),Hle=a("strong"),kAo=o("xlm-roberta-xl"),SAo=o(" \u2014 "),FN=a("a"),RAo=o("XLMRobertaXLForSequenceClassification"),BAo=o(" (XLM-RoBERTa-XL model)"),PAo=l(),Zb=a("li"),Ule=a("strong"),$Ao=o("xlnet"),IAo=o(" \u2014 "),TN=a("a"),qAo=o("XLNetForSequenceClassification"),NAo=o(" (XLNet model)"),jAo=l(),e2=a("li"),Jle=a("strong"),DAo=o("yoso"),GAo=o(" \u2014 "),MN=a("a"),OAo=o("YosoForSequenceClassification"),VAo=o(" (YOSO model)"),XAo=l(),o2=a("p"),zAo=o("The model is set in evaluation mode by default using "),Yle=a("code"),QAo=o("model.eval()"),WAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=a("code"),HAo=o("model.train()"),UAo=l(),Zle=a("p"),JAo=o("Examples:"),YAo=l(),f(W5.$$.fragment),HRe=l(),pd=a("h2"),r2=a("a"),eie=a("span"),f(H5.$$.fragment),KAo=l(),oie=a("span"),ZAo=o("AutoModelForMultipleChoice"),URe=l(),rr=a("div"),f(U5.$$.fragment),e0o=l(),_d=a("p"),o0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EN=a("a"),r0o=o("from_pretrained()"),t0o=o(" class method or the "),CN=a("a"),a0o=o("from_config()"),n0o=o(` class
method.`),s0o=l(),J5=a("p"),l0o=o("This class cannot be instantiated directly using "),rie=a("code"),i0o=o("__init__()"),d0o=o(" (throws an error)."),c0o=l(),Jr=a("div"),f(Y5.$$.fragment),f0o=l(),tie=a("p"),m0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),g0o=l(),ud=a("p"),h0o=o(`Note:
Loading a model from its configuration file does `),aie=a("strong"),p0o=o("not"),_0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wN=a("a"),u0o=o("from_pretrained()"),b0o=o(" to load the model weights."),v0o=l(),nie=a("p"),F0o=o("Examples:"),T0o=l(),f(K5.$$.fragment),M0o=l(),Ve=a("div"),f(Z5.$$.fragment),E0o=l(),sie=a("p"),C0o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),w0o=l(),Ja=a("p"),A0o=o("The model class to instantiate is selected based on the "),lie=a("code"),y0o=o("model_type"),L0o=o(` property of the config object (either
passed as an argument or loaded from `),iie=a("code"),x0o=o("pretrained_model_name_or_path"),k0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),die=a("code"),S0o=o("pretrained_model_name_or_path"),R0o=o(":"),B0o=l(),G=a("ul"),t2=a("li"),cie=a("strong"),P0o=o("albert"),$0o=o(" \u2014 "),AN=a("a"),I0o=o("AlbertForMultipleChoice"),q0o=o(" (ALBERT model)"),N0o=l(),a2=a("li"),fie=a("strong"),j0o=o("bert"),D0o=o(" \u2014 "),yN=a("a"),G0o=o("BertForMultipleChoice"),O0o=o(" (BERT model)"),V0o=l(),n2=a("li"),mie=a("strong"),X0o=o("big_bird"),z0o=o(" \u2014 "),LN=a("a"),Q0o=o("BigBirdForMultipleChoice"),W0o=o(" (BigBird model)"),H0o=l(),s2=a("li"),gie=a("strong"),U0o=o("camembert"),J0o=o(" \u2014 "),xN=a("a"),Y0o=o("CamembertForMultipleChoice"),K0o=o(" (CamemBERT model)"),Z0o=l(),l2=a("li"),hie=a("strong"),eyo=o("canine"),oyo=o(" \u2014 "),kN=a("a"),ryo=o("CanineForMultipleChoice"),tyo=o(" (Canine model)"),ayo=l(),i2=a("li"),pie=a("strong"),nyo=o("convbert"),syo=o(" \u2014 "),SN=a("a"),lyo=o("ConvBertForMultipleChoice"),iyo=o(" (ConvBERT model)"),dyo=l(),d2=a("li"),_ie=a("strong"),cyo=o("data2vec-text"),fyo=o(" \u2014 "),RN=a("a"),myo=o("Data2VecTextForMultipleChoice"),gyo=o(" (Data2VecText model)"),hyo=l(),c2=a("li"),uie=a("strong"),pyo=o("distilbert"),_yo=o(" \u2014 "),BN=a("a"),uyo=o("DistilBertForMultipleChoice"),byo=o(" (DistilBERT model)"),vyo=l(),f2=a("li"),bie=a("strong"),Fyo=o("electra"),Tyo=o(" \u2014 "),PN=a("a"),Myo=o("ElectraForMultipleChoice"),Eyo=o(" (ELECTRA model)"),Cyo=l(),m2=a("li"),vie=a("strong"),wyo=o("flaubert"),Ayo=o(" \u2014 "),$N=a("a"),yyo=o("FlaubertForMultipleChoice"),Lyo=o(" (FlauBERT model)"),xyo=l(),g2=a("li"),Fie=a("strong"),kyo=o("fnet"),Syo=o(" \u2014 "),IN=a("a"),Ryo=o("FNetForMultipleChoice"),Byo=o(" (FNet model)"),Pyo=l(),h2=a("li"),Tie=a("strong"),$yo=o("funnel"),Iyo=o(" \u2014 "),qN=a("a"),qyo=o("FunnelForMultipleChoice"),Nyo=o(" (Funnel Transformer model)"),jyo=l(),p2=a("li"),Mie=a("strong"),Dyo=o("ibert"),Gyo=o(" \u2014 "),NN=a("a"),Oyo=o("IBertForMultipleChoice"),Vyo=o(" (I-BERT model)"),Xyo=l(),_2=a("li"),Eie=a("strong"),zyo=o("longformer"),Qyo=o(" \u2014 "),jN=a("a"),Wyo=o("LongformerForMultipleChoice"),Hyo=o(" (Longformer model)"),Uyo=l(),u2=a("li"),Cie=a("strong"),Jyo=o("megatron-bert"),Yyo=o(" \u2014 "),DN=a("a"),Kyo=o("MegatronBertForMultipleChoice"),Zyo=o(" (MegatronBert model)"),eLo=l(),b2=a("li"),wie=a("strong"),oLo=o("mobilebert"),rLo=o(" \u2014 "),GN=a("a"),tLo=o("MobileBertForMultipleChoice"),aLo=o(" (MobileBERT model)"),nLo=l(),v2=a("li"),Aie=a("strong"),sLo=o("mpnet"),lLo=o(" \u2014 "),ON=a("a"),iLo=o("MPNetForMultipleChoice"),dLo=o(" (MPNet model)"),cLo=l(),F2=a("li"),yie=a("strong"),fLo=o("nystromformer"),mLo=o(" \u2014 "),VN=a("a"),gLo=o("NystromformerForMultipleChoice"),hLo=o(" (Nystromformer model)"),pLo=l(),T2=a("li"),Lie=a("strong"),_Lo=o("qdqbert"),uLo=o(" \u2014 "),XN=a("a"),bLo=o("QDQBertForMultipleChoice"),vLo=o(" (QDQBert model)"),FLo=l(),M2=a("li"),xie=a("strong"),TLo=o("rembert"),MLo=o(" \u2014 "),zN=a("a"),ELo=o("RemBertForMultipleChoice"),CLo=o(" (RemBERT model)"),wLo=l(),E2=a("li"),kie=a("strong"),ALo=o("roberta"),yLo=o(" \u2014 "),QN=a("a"),LLo=o("RobertaForMultipleChoice"),xLo=o(" (RoBERTa model)"),kLo=l(),C2=a("li"),Sie=a("strong"),SLo=o("roformer"),RLo=o(" \u2014 "),WN=a("a"),BLo=o("RoFormerForMultipleChoice"),PLo=o(" (RoFormer model)"),$Lo=l(),w2=a("li"),Rie=a("strong"),ILo=o("squeezebert"),qLo=o(" \u2014 "),HN=a("a"),NLo=o("SqueezeBertForMultipleChoice"),jLo=o(" (SqueezeBERT model)"),DLo=l(),A2=a("li"),Bie=a("strong"),GLo=o("xlm"),OLo=o(" \u2014 "),UN=a("a"),VLo=o("XLMForMultipleChoice"),XLo=o(" (XLM model)"),zLo=l(),y2=a("li"),Pie=a("strong"),QLo=o("xlm-roberta"),WLo=o(" \u2014 "),JN=a("a"),HLo=o("XLMRobertaForMultipleChoice"),ULo=o(" (XLM-RoBERTa model)"),JLo=l(),L2=a("li"),$ie=a("strong"),YLo=o("xlm-roberta-xl"),KLo=o(" \u2014 "),YN=a("a"),ZLo=o("XLMRobertaXLForMultipleChoice"),e7o=o(" (XLM-RoBERTa-XL model)"),o7o=l(),x2=a("li"),Iie=a("strong"),r7o=o("xlnet"),t7o=o(" \u2014 "),KN=a("a"),a7o=o("XLNetForMultipleChoice"),n7o=o(" (XLNet model)"),s7o=l(),k2=a("li"),qie=a("strong"),l7o=o("yoso"),i7o=o(" \u2014 "),ZN=a("a"),d7o=o("YosoForMultipleChoice"),c7o=o(" (YOSO model)"),f7o=l(),S2=a("p"),m7o=o("The model is set in evaluation mode by default using "),Nie=a("code"),g7o=o("model.eval()"),h7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=a("code"),p7o=o("model.train()"),_7o=l(),Die=a("p"),u7o=o("Examples:"),b7o=l(),f(eC.$$.fragment),JRe=l(),bd=a("h2"),R2=a("a"),Gie=a("span"),f(oC.$$.fragment),v7o=l(),Oie=a("span"),F7o=o("AutoModelForNextSentencePrediction"),YRe=l(),tr=a("div"),f(rC.$$.fragment),T7o=l(),vd=a("p"),M7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ej=a("a"),E7o=o("from_pretrained()"),C7o=o(" class method or the "),oj=a("a"),w7o=o("from_config()"),A7o=o(` class
method.`),y7o=l(),tC=a("p"),L7o=o("This class cannot be instantiated directly using "),Vie=a("code"),x7o=o("__init__()"),k7o=o(" (throws an error)."),S7o=l(),Yr=a("div"),f(aC.$$.fragment),R7o=l(),Xie=a("p"),B7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),P7o=l(),Fd=a("p"),$7o=o(`Note:
Loading a model from its configuration file does `),zie=a("strong"),I7o=o("not"),q7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=a("a"),N7o=o("from_pretrained()"),j7o=o(" to load the model weights."),D7o=l(),Qie=a("p"),G7o=o("Examples:"),O7o=l(),f(nC.$$.fragment),V7o=l(),Xe=a("div"),f(sC.$$.fragment),X7o=l(),Wie=a("p"),z7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q7o=l(),Ya=a("p"),W7o=o("The model class to instantiate is selected based on the "),Hie=a("code"),H7o=o("model_type"),U7o=o(` property of the config object (either
passed as an argument or loaded from `),Uie=a("code"),J7o=o("pretrained_model_name_or_path"),Y7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=a("code"),K7o=o("pretrained_model_name_or_path"),Z7o=o(":"),exo=l(),da=a("ul"),B2=a("li"),Yie=a("strong"),oxo=o("bert"),rxo=o(" \u2014 "),tj=a("a"),txo=o("BertForNextSentencePrediction"),axo=o(" (BERT model)"),nxo=l(),P2=a("li"),Kie=a("strong"),sxo=o("fnet"),lxo=o(" \u2014 "),aj=a("a"),ixo=o("FNetForNextSentencePrediction"),dxo=o(" (FNet model)"),cxo=l(),$2=a("li"),Zie=a("strong"),fxo=o("megatron-bert"),mxo=o(" \u2014 "),nj=a("a"),gxo=o("MegatronBertForNextSentencePrediction"),hxo=o(" (MegatronBert model)"),pxo=l(),I2=a("li"),ede=a("strong"),_xo=o("mobilebert"),uxo=o(" \u2014 "),sj=a("a"),bxo=o("MobileBertForNextSentencePrediction"),vxo=o(" (MobileBERT model)"),Fxo=l(),q2=a("li"),ode=a("strong"),Txo=o("qdqbert"),Mxo=o(" \u2014 "),lj=a("a"),Exo=o("QDQBertForNextSentencePrediction"),Cxo=o(" (QDQBert model)"),wxo=l(),N2=a("p"),Axo=o("The model is set in evaluation mode by default using "),rde=a("code"),yxo=o("model.eval()"),Lxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=a("code"),xxo=o("model.train()"),kxo=l(),ade=a("p"),Sxo=o("Examples:"),Rxo=l(),f(lC.$$.fragment),KRe=l(),Td=a("h2"),j2=a("a"),nde=a("span"),f(iC.$$.fragment),Bxo=l(),sde=a("span"),Pxo=o("AutoModelForTokenClassification"),ZRe=l(),ar=a("div"),f(dC.$$.fragment),$xo=l(),Md=a("p"),Ixo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ij=a("a"),qxo=o("from_pretrained()"),Nxo=o(" class method or the "),dj=a("a"),jxo=o("from_config()"),Dxo=o(` class
method.`),Gxo=l(),cC=a("p"),Oxo=o("This class cannot be instantiated directly using "),lde=a("code"),Vxo=o("__init__()"),Xxo=o(" (throws an error)."),zxo=l(),Kr=a("div"),f(fC.$$.fragment),Qxo=l(),ide=a("p"),Wxo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Hxo=l(),Ed=a("p"),Uxo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),Jxo=o("not"),Yxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=a("a"),Kxo=o("from_pretrained()"),Zxo=o(" to load the model weights."),eko=l(),cde=a("p"),oko=o("Examples:"),rko=l(),f(mC.$$.fragment),tko=l(),ze=a("div"),f(gC.$$.fragment),ako=l(),fde=a("p"),nko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sko=l(),Ka=a("p"),lko=o("The model class to instantiate is selected based on the "),mde=a("code"),iko=o("model_type"),dko=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),cko=o("pretrained_model_name_or_path"),fko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(":"),hko=l(),N=a("ul"),D2=a("li"),pde=a("strong"),pko=o("albert"),_ko=o(" \u2014 "),fj=a("a"),uko=o("AlbertForTokenClassification"),bko=o(" (ALBERT model)"),vko=l(),G2=a("li"),_de=a("strong"),Fko=o("bert"),Tko=o(" \u2014 "),mj=a("a"),Mko=o("BertForTokenClassification"),Eko=o(" (BERT model)"),Cko=l(),O2=a("li"),ude=a("strong"),wko=o("big_bird"),Ako=o(" \u2014 "),gj=a("a"),yko=o("BigBirdForTokenClassification"),Lko=o(" (BigBird model)"),xko=l(),V2=a("li"),bde=a("strong"),kko=o("camembert"),Sko=o(" \u2014 "),hj=a("a"),Rko=o("CamembertForTokenClassification"),Bko=o(" (CamemBERT model)"),Pko=l(),X2=a("li"),vde=a("strong"),$ko=o("canine"),Iko=o(" \u2014 "),pj=a("a"),qko=o("CanineForTokenClassification"),Nko=o(" (Canine model)"),jko=l(),z2=a("li"),Fde=a("strong"),Dko=o("convbert"),Gko=o(" \u2014 "),_j=a("a"),Oko=o("ConvBertForTokenClassification"),Vko=o(" (ConvBERT model)"),Xko=l(),Q2=a("li"),Tde=a("strong"),zko=o("data2vec-text"),Qko=o(" \u2014 "),uj=a("a"),Wko=o("Data2VecTextForTokenClassification"),Hko=o(" (Data2VecText model)"),Uko=l(),W2=a("li"),Mde=a("strong"),Jko=o("deberta"),Yko=o(" \u2014 "),bj=a("a"),Kko=o("DebertaForTokenClassification"),Zko=o(" (DeBERTa model)"),eSo=l(),H2=a("li"),Ede=a("strong"),oSo=o("deberta-v2"),rSo=o(" \u2014 "),vj=a("a"),tSo=o("DebertaV2ForTokenClassification"),aSo=o(" (DeBERTa-v2 model)"),nSo=l(),U2=a("li"),Cde=a("strong"),sSo=o("distilbert"),lSo=o(" \u2014 "),Fj=a("a"),iSo=o("DistilBertForTokenClassification"),dSo=o(" (DistilBERT model)"),cSo=l(),J2=a("li"),wde=a("strong"),fSo=o("electra"),mSo=o(" \u2014 "),Tj=a("a"),gSo=o("ElectraForTokenClassification"),hSo=o(" (ELECTRA model)"),pSo=l(),Y2=a("li"),Ade=a("strong"),_So=o("flaubert"),uSo=o(" \u2014 "),Mj=a("a"),bSo=o("FlaubertForTokenClassification"),vSo=o(" (FlauBERT model)"),FSo=l(),K2=a("li"),yde=a("strong"),TSo=o("fnet"),MSo=o(" \u2014 "),Ej=a("a"),ESo=o("FNetForTokenClassification"),CSo=o(" (FNet model)"),wSo=l(),Z2=a("li"),Lde=a("strong"),ASo=o("funnel"),ySo=o(" \u2014 "),Cj=a("a"),LSo=o("FunnelForTokenClassification"),xSo=o(" (Funnel Transformer model)"),kSo=l(),e3=a("li"),xde=a("strong"),SSo=o("gpt2"),RSo=o(" \u2014 "),wj=a("a"),BSo=o("GPT2ForTokenClassification"),PSo=o(" (OpenAI GPT-2 model)"),$So=l(),o3=a("li"),kde=a("strong"),ISo=o("ibert"),qSo=o(" \u2014 "),Aj=a("a"),NSo=o("IBertForTokenClassification"),jSo=o(" (I-BERT model)"),DSo=l(),r3=a("li"),Sde=a("strong"),GSo=o("layoutlm"),OSo=o(" \u2014 "),yj=a("a"),VSo=o("LayoutLMForTokenClassification"),XSo=o(" (LayoutLM model)"),zSo=l(),t3=a("li"),Rde=a("strong"),QSo=o("layoutlmv2"),WSo=o(" \u2014 "),Lj=a("a"),HSo=o("LayoutLMv2ForTokenClassification"),USo=o(" (LayoutLMv2 model)"),JSo=l(),a3=a("li"),Bde=a("strong"),YSo=o("longformer"),KSo=o(" \u2014 "),xj=a("a"),ZSo=o("LongformerForTokenClassification"),eRo=o(" (Longformer model)"),oRo=l(),n3=a("li"),Pde=a("strong"),rRo=o("megatron-bert"),tRo=o(" \u2014 "),kj=a("a"),aRo=o("MegatronBertForTokenClassification"),nRo=o(" (MegatronBert model)"),sRo=l(),s3=a("li"),$de=a("strong"),lRo=o("mobilebert"),iRo=o(" \u2014 "),Sj=a("a"),dRo=o("MobileBertForTokenClassification"),cRo=o(" (MobileBERT model)"),fRo=l(),l3=a("li"),Ide=a("strong"),mRo=o("mpnet"),gRo=o(" \u2014 "),Rj=a("a"),hRo=o("MPNetForTokenClassification"),pRo=o(" (MPNet model)"),_Ro=l(),i3=a("li"),qde=a("strong"),uRo=o("nystromformer"),bRo=o(" \u2014 "),Bj=a("a"),vRo=o("NystromformerForTokenClassification"),FRo=o(" (Nystromformer model)"),TRo=l(),d3=a("li"),Nde=a("strong"),MRo=o("qdqbert"),ERo=o(" \u2014 "),Pj=a("a"),CRo=o("QDQBertForTokenClassification"),wRo=o(" (QDQBert model)"),ARo=l(),c3=a("li"),jde=a("strong"),yRo=o("rembert"),LRo=o(" \u2014 "),$j=a("a"),xRo=o("RemBertForTokenClassification"),kRo=o(" (RemBERT model)"),SRo=l(),f3=a("li"),Dde=a("strong"),RRo=o("roberta"),BRo=o(" \u2014 "),Ij=a("a"),PRo=o("RobertaForTokenClassification"),$Ro=o(" (RoBERTa model)"),IRo=l(),m3=a("li"),Gde=a("strong"),qRo=o("roformer"),NRo=o(" \u2014 "),qj=a("a"),jRo=o("RoFormerForTokenClassification"),DRo=o(" (RoFormer model)"),GRo=l(),g3=a("li"),Ode=a("strong"),ORo=o("squeezebert"),VRo=o(" \u2014 "),Nj=a("a"),XRo=o("SqueezeBertForTokenClassification"),zRo=o(" (SqueezeBERT model)"),QRo=l(),h3=a("li"),Vde=a("strong"),WRo=o("xlm"),HRo=o(" \u2014 "),jj=a("a"),URo=o("XLMForTokenClassification"),JRo=o(" (XLM model)"),YRo=l(),p3=a("li"),Xde=a("strong"),KRo=o("xlm-roberta"),ZRo=o(" \u2014 "),Dj=a("a"),eBo=o("XLMRobertaForTokenClassification"),oBo=o(" (XLM-RoBERTa model)"),rBo=l(),_3=a("li"),zde=a("strong"),tBo=o("xlm-roberta-xl"),aBo=o(" \u2014 "),Gj=a("a"),nBo=o("XLMRobertaXLForTokenClassification"),sBo=o(" (XLM-RoBERTa-XL model)"),lBo=l(),u3=a("li"),Qde=a("strong"),iBo=o("xlnet"),dBo=o(" \u2014 "),Oj=a("a"),cBo=o("XLNetForTokenClassification"),fBo=o(" (XLNet model)"),mBo=l(),b3=a("li"),Wde=a("strong"),gBo=o("yoso"),hBo=o(" \u2014 "),Vj=a("a"),pBo=o("YosoForTokenClassification"),_Bo=o(" (YOSO model)"),uBo=l(),v3=a("p"),bBo=o("The model is set in evaluation mode by default using "),Hde=a("code"),vBo=o("model.eval()"),FBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=a("code"),TBo=o("model.train()"),MBo=l(),Jde=a("p"),EBo=o("Examples:"),CBo=l(),f(hC.$$.fragment),eBe=l(),Cd=a("h2"),F3=a("a"),Yde=a("span"),f(pC.$$.fragment),wBo=l(),Kde=a("span"),ABo=o("AutoModelForQuestionAnswering"),oBe=l(),nr=a("div"),f(_C.$$.fragment),yBo=l(),wd=a("p"),LBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xj=a("a"),xBo=o("from_pretrained()"),kBo=o(" class method or the "),zj=a("a"),SBo=o("from_config()"),RBo=o(` class
method.`),BBo=l(),uC=a("p"),PBo=o("This class cannot be instantiated directly using "),Zde=a("code"),$Bo=o("__init__()"),IBo=o(" (throws an error)."),qBo=l(),Zr=a("div"),f(bC.$$.fragment),NBo=l(),ece=a("p"),jBo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DBo=l(),Ad=a("p"),GBo=o(`Note:
Loading a model from its configuration file does `),oce=a("strong"),OBo=o("not"),VBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=a("a"),XBo=o("from_pretrained()"),zBo=o(" to load the model weights."),QBo=l(),rce=a("p"),WBo=o("Examples:"),HBo=l(),f(vC.$$.fragment),UBo=l(),Qe=a("div"),f(FC.$$.fragment),JBo=l(),tce=a("p"),YBo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),KBo=l(),Za=a("p"),ZBo=o("The model class to instantiate is selected based on the "),ace=a("code"),ePo=o("model_type"),oPo=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),rPo=o("pretrained_model_name_or_path"),tPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),aPo=o("pretrained_model_name_or_path"),nPo=o(":"),sPo=l(),S=a("ul"),T3=a("li"),lce=a("strong"),lPo=o("albert"),iPo=o(" \u2014 "),Wj=a("a"),dPo=o("AlbertForQuestionAnswering"),cPo=o(" (ALBERT model)"),fPo=l(),M3=a("li"),ice=a("strong"),mPo=o("bart"),gPo=o(" \u2014 "),Hj=a("a"),hPo=o("BartForQuestionAnswering"),pPo=o(" (BART model)"),_Po=l(),E3=a("li"),dce=a("strong"),uPo=o("bert"),bPo=o(" \u2014 "),Uj=a("a"),vPo=o("BertForQuestionAnswering"),FPo=o(" (BERT model)"),TPo=l(),C3=a("li"),cce=a("strong"),MPo=o("big_bird"),EPo=o(" \u2014 "),Jj=a("a"),CPo=o("BigBirdForQuestionAnswering"),wPo=o(" (BigBird model)"),APo=l(),w3=a("li"),fce=a("strong"),yPo=o("bigbird_pegasus"),LPo=o(" \u2014 "),Yj=a("a"),xPo=o("BigBirdPegasusForQuestionAnswering"),kPo=o(" (BigBirdPegasus model)"),SPo=l(),A3=a("li"),mce=a("strong"),RPo=o("camembert"),BPo=o(" \u2014 "),Kj=a("a"),PPo=o("CamembertForQuestionAnswering"),$Po=o(" (CamemBERT model)"),IPo=l(),y3=a("li"),gce=a("strong"),qPo=o("canine"),NPo=o(" \u2014 "),Zj=a("a"),jPo=o("CanineForQuestionAnswering"),DPo=o(" (Canine model)"),GPo=l(),L3=a("li"),hce=a("strong"),OPo=o("convbert"),VPo=o(" \u2014 "),eD=a("a"),XPo=o("ConvBertForQuestionAnswering"),zPo=o(" (ConvBERT model)"),QPo=l(),x3=a("li"),pce=a("strong"),WPo=o("data2vec-text"),HPo=o(" \u2014 "),oD=a("a"),UPo=o("Data2VecTextForQuestionAnswering"),JPo=o(" (Data2VecText model)"),YPo=l(),k3=a("li"),_ce=a("strong"),KPo=o("deberta"),ZPo=o(" \u2014 "),rD=a("a"),e$o=o("DebertaForQuestionAnswering"),o$o=o(" (DeBERTa model)"),r$o=l(),S3=a("li"),uce=a("strong"),t$o=o("deberta-v2"),a$o=o(" \u2014 "),tD=a("a"),n$o=o("DebertaV2ForQuestionAnswering"),s$o=o(" (DeBERTa-v2 model)"),l$o=l(),R3=a("li"),bce=a("strong"),i$o=o("distilbert"),d$o=o(" \u2014 "),aD=a("a"),c$o=o("DistilBertForQuestionAnswering"),f$o=o(" (DistilBERT model)"),m$o=l(),B3=a("li"),vce=a("strong"),g$o=o("electra"),h$o=o(" \u2014 "),nD=a("a"),p$o=o("ElectraForQuestionAnswering"),_$o=o(" (ELECTRA model)"),u$o=l(),P3=a("li"),Fce=a("strong"),b$o=o("flaubert"),v$o=o(" \u2014 "),sD=a("a"),F$o=o("FlaubertForQuestionAnsweringSimple"),T$o=o(" (FlauBERT model)"),M$o=l(),$3=a("li"),Tce=a("strong"),E$o=o("fnet"),C$o=o(" \u2014 "),lD=a("a"),w$o=o("FNetForQuestionAnswering"),A$o=o(" (FNet model)"),y$o=l(),I3=a("li"),Mce=a("strong"),L$o=o("funnel"),x$o=o(" \u2014 "),iD=a("a"),k$o=o("FunnelForQuestionAnswering"),S$o=o(" (Funnel Transformer model)"),R$o=l(),q3=a("li"),Ece=a("strong"),B$o=o("gptj"),P$o=o(" \u2014 "),dD=a("a"),$$o=o("GPTJForQuestionAnswering"),I$o=o(" (GPT-J model)"),q$o=l(),N3=a("li"),Cce=a("strong"),N$o=o("ibert"),j$o=o(" \u2014 "),cD=a("a"),D$o=o("IBertForQuestionAnswering"),G$o=o(" (I-BERT model)"),O$o=l(),j3=a("li"),wce=a("strong"),V$o=o("layoutlmv2"),X$o=o(" \u2014 "),fD=a("a"),z$o=o("LayoutLMv2ForQuestionAnswering"),Q$o=o(" (LayoutLMv2 model)"),W$o=l(),D3=a("li"),Ace=a("strong"),H$o=o("led"),U$o=o(" \u2014 "),mD=a("a"),J$o=o("LEDForQuestionAnswering"),Y$o=o(" (LED model)"),K$o=l(),G3=a("li"),yce=a("strong"),Z$o=o("longformer"),eIo=o(" \u2014 "),gD=a("a"),oIo=o("LongformerForQuestionAnswering"),rIo=o(" (Longformer model)"),tIo=l(),O3=a("li"),Lce=a("strong"),aIo=o("lxmert"),nIo=o(" \u2014 "),hD=a("a"),sIo=o("LxmertForQuestionAnswering"),lIo=o(" (LXMERT model)"),iIo=l(),V3=a("li"),xce=a("strong"),dIo=o("mbart"),cIo=o(" \u2014 "),pD=a("a"),fIo=o("MBartForQuestionAnswering"),mIo=o(" (mBART model)"),gIo=l(),X3=a("li"),kce=a("strong"),hIo=o("megatron-bert"),pIo=o(" \u2014 "),_D=a("a"),_Io=o("MegatronBertForQuestionAnswering"),uIo=o(" (MegatronBert model)"),bIo=l(),z3=a("li"),Sce=a("strong"),vIo=o("mobilebert"),FIo=o(" \u2014 "),uD=a("a"),TIo=o("MobileBertForQuestionAnswering"),MIo=o(" (MobileBERT model)"),EIo=l(),Q3=a("li"),Rce=a("strong"),CIo=o("mpnet"),wIo=o(" \u2014 "),bD=a("a"),AIo=o("MPNetForQuestionAnswering"),yIo=o(" (MPNet model)"),LIo=l(),W3=a("li"),Bce=a("strong"),xIo=o("nystromformer"),kIo=o(" \u2014 "),vD=a("a"),SIo=o("NystromformerForQuestionAnswering"),RIo=o(" (Nystromformer model)"),BIo=l(),H3=a("li"),Pce=a("strong"),PIo=o("qdqbert"),$Io=o(" \u2014 "),FD=a("a"),IIo=o("QDQBertForQuestionAnswering"),qIo=o(" (QDQBert model)"),NIo=l(),U3=a("li"),$ce=a("strong"),jIo=o("reformer"),DIo=o(" \u2014 "),TD=a("a"),GIo=o("ReformerForQuestionAnswering"),OIo=o(" (Reformer model)"),VIo=l(),J3=a("li"),Ice=a("strong"),XIo=o("rembert"),zIo=o(" \u2014 "),MD=a("a"),QIo=o("RemBertForQuestionAnswering"),WIo=o(" (RemBERT model)"),HIo=l(),Y3=a("li"),qce=a("strong"),UIo=o("roberta"),JIo=o(" \u2014 "),ED=a("a"),YIo=o("RobertaForQuestionAnswering"),KIo=o(" (RoBERTa model)"),ZIo=l(),K3=a("li"),Nce=a("strong"),eqo=o("roformer"),oqo=o(" \u2014 "),CD=a("a"),rqo=o("RoFormerForQuestionAnswering"),tqo=o(" (RoFormer model)"),aqo=l(),Z3=a("li"),jce=a("strong"),nqo=o("splinter"),sqo=o(" \u2014 "),wD=a("a"),lqo=o("SplinterForQuestionAnswering"),iqo=o(" (Splinter model)"),dqo=l(),e6=a("li"),Dce=a("strong"),cqo=o("squeezebert"),fqo=o(" \u2014 "),AD=a("a"),mqo=o("SqueezeBertForQuestionAnswering"),gqo=o(" (SqueezeBERT model)"),hqo=l(),o6=a("li"),Gce=a("strong"),pqo=o("xlm"),_qo=o(" \u2014 "),yD=a("a"),uqo=o("XLMForQuestionAnsweringSimple"),bqo=o(" (XLM model)"),vqo=l(),r6=a("li"),Oce=a("strong"),Fqo=o("xlm-roberta"),Tqo=o(" \u2014 "),LD=a("a"),Mqo=o("XLMRobertaForQuestionAnswering"),Eqo=o(" (XLM-RoBERTa model)"),Cqo=l(),t6=a("li"),Vce=a("strong"),wqo=o("xlm-roberta-xl"),Aqo=o(" \u2014 "),xD=a("a"),yqo=o("XLMRobertaXLForQuestionAnswering"),Lqo=o(" (XLM-RoBERTa-XL model)"),xqo=l(),a6=a("li"),Xce=a("strong"),kqo=o("xlnet"),Sqo=o(" \u2014 "),kD=a("a"),Rqo=o("XLNetForQuestionAnsweringSimple"),Bqo=o(" (XLNet model)"),Pqo=l(),n6=a("li"),zce=a("strong"),$qo=o("yoso"),Iqo=o(" \u2014 "),SD=a("a"),qqo=o("YosoForQuestionAnswering"),Nqo=o(" (YOSO model)"),jqo=l(),s6=a("p"),Dqo=o("The model is set in evaluation mode by default using "),Qce=a("code"),Gqo=o("model.eval()"),Oqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=a("code"),Vqo=o("model.train()"),Xqo=l(),Hce=a("p"),zqo=o("Examples:"),Qqo=l(),f(TC.$$.fragment),rBe=l(),yd=a("h2"),l6=a("a"),Uce=a("span"),f(MC.$$.fragment),Wqo=l(),Jce=a("span"),Hqo=o("AutoModelForTableQuestionAnswering"),tBe=l(),sr=a("div"),f(EC.$$.fragment),Uqo=l(),Ld=a("p"),Jqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RD=a("a"),Yqo=o("from_pretrained()"),Kqo=o(" class method or the "),BD=a("a"),Zqo=o("from_config()"),eNo=o(` class
method.`),oNo=l(),CC=a("p"),rNo=o("This class cannot be instantiated directly using "),Yce=a("code"),tNo=o("__init__()"),aNo=o(" (throws an error)."),nNo=l(),et=a("div"),f(wC.$$.fragment),sNo=l(),Kce=a("p"),lNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),iNo=l(),xd=a("p"),dNo=o(`Note:
Loading a model from its configuration file does `),Zce=a("strong"),cNo=o("not"),fNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),mNo=o("from_pretrained()"),gNo=o(" to load the model weights."),hNo=l(),efe=a("p"),pNo=o("Examples:"),_No=l(),f(AC.$$.fragment),uNo=l(),We=a("div"),f(yC.$$.fragment),bNo=l(),ofe=a("p"),vNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),FNo=l(),en=a("p"),TNo=o("The model class to instantiate is selected based on the "),rfe=a("code"),MNo=o("model_type"),ENo=o(` property of the config object (either
passed as an argument or loaded from `),tfe=a("code"),CNo=o("pretrained_model_name_or_path"),wNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=a("code"),ANo=o("pretrained_model_name_or_path"),yNo=o(":"),LNo=l(),nfe=a("ul"),i6=a("li"),sfe=a("strong"),xNo=o("tapas"),kNo=o(" \u2014 "),$D=a("a"),SNo=o("TapasForQuestionAnswering"),RNo=o(" (TAPAS model)"),BNo=l(),d6=a("p"),PNo=o("The model is set in evaluation mode by default using "),lfe=a("code"),$No=o("model.eval()"),INo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),qNo=o("model.train()"),NNo=l(),dfe=a("p"),jNo=o("Examples:"),DNo=l(),f(LC.$$.fragment),aBe=l(),kd=a("h2"),c6=a("a"),cfe=a("span"),f(xC.$$.fragment),GNo=l(),ffe=a("span"),ONo=o("AutoModelForImageClassification"),nBe=l(),lr=a("div"),f(kC.$$.fragment),VNo=l(),Sd=a("p"),XNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ID=a("a"),zNo=o("from_pretrained()"),QNo=o(" class method or the "),qD=a("a"),WNo=o("from_config()"),HNo=o(` class
method.`),UNo=l(),SC=a("p"),JNo=o("This class cannot be instantiated directly using "),mfe=a("code"),YNo=o("__init__()"),KNo=o(" (throws an error)."),ZNo=l(),ot=a("div"),f(RC.$$.fragment),ejo=l(),gfe=a("p"),ojo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rjo=l(),Rd=a("p"),tjo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),ajo=o("not"),njo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),sjo=o("from_pretrained()"),ljo=o(" to load the model weights."),ijo=l(),pfe=a("p"),djo=o("Examples:"),cjo=l(),f(BC.$$.fragment),fjo=l(),He=a("div"),f(PC.$$.fragment),mjo=l(),_fe=a("p"),gjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hjo=l(),on=a("p"),pjo=o("The model class to instantiate is selected based on the "),ufe=a("code"),_jo=o("model_type"),ujo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),Fjo=o("pretrained_model_name_or_path"),Tjo=o(":"),Mjo=l(),de=a("ul"),f6=a("li"),Ffe=a("strong"),Ejo=o("beit"),Cjo=o(" \u2014 "),jD=a("a"),wjo=o("BeitForImageClassification"),Ajo=o(" (BEiT model)"),yjo=l(),m6=a("li"),Tfe=a("strong"),Ljo=o("convnext"),xjo=o(" \u2014 "),DD=a("a"),kjo=o("ConvNextForImageClassification"),Sjo=o(" (ConvNext model)"),Rjo=l(),g6=a("li"),Mfe=a("strong"),Bjo=o("data2vec-vision"),Pjo=o(" \u2014 "),GD=a("a"),$jo=o("Data2VecVisionForImageClassification"),Ijo=o(" (Data2VecVision model)"),qjo=l(),Gs=a("li"),Efe=a("strong"),Njo=o("deit"),jjo=o(" \u2014 "),OD=a("a"),Djo=o("DeiTForImageClassification"),Gjo=o(" or "),VD=a("a"),Ojo=o("DeiTForImageClassificationWithTeacher"),Vjo=o(" (DeiT model)"),Xjo=l(),h6=a("li"),Cfe=a("strong"),zjo=o("imagegpt"),Qjo=o(" \u2014 "),XD=a("a"),Wjo=o("ImageGPTForImageClassification"),Hjo=o(" (ImageGPT model)"),Ujo=l(),ma=a("li"),wfe=a("strong"),Jjo=o("perceiver"),Yjo=o(" \u2014 "),zD=a("a"),Kjo=o("PerceiverForImageClassificationLearned"),Zjo=o(" or "),QD=a("a"),eDo=o("PerceiverForImageClassificationFourier"),oDo=o(" or "),WD=a("a"),rDo=o("PerceiverForImageClassificationConvProcessing"),tDo=o(" (Perceiver model)"),aDo=l(),p6=a("li"),Afe=a("strong"),nDo=o("poolformer"),sDo=o(" \u2014 "),HD=a("a"),lDo=o("PoolFormerForImageClassification"),iDo=o(" (PoolFormer model)"),dDo=l(),_6=a("li"),yfe=a("strong"),cDo=o("regnet"),fDo=o(" \u2014 "),UD=a("a"),mDo=o("RegNetForImageClassification"),gDo=o(" (RegNet model)"),hDo=l(),u6=a("li"),Lfe=a("strong"),pDo=o("resnet"),_Do=o(" \u2014 "),JD=a("a"),uDo=o("ResNetForImageClassification"),bDo=o(" (ResNet model)"),vDo=l(),b6=a("li"),xfe=a("strong"),FDo=o("segformer"),TDo=o(" \u2014 "),YD=a("a"),MDo=o("SegformerForImageClassification"),EDo=o(" (SegFormer model)"),CDo=l(),v6=a("li"),kfe=a("strong"),wDo=o("swin"),ADo=o(" \u2014 "),KD=a("a"),yDo=o("SwinForImageClassification"),LDo=o(" (Swin model)"),xDo=l(),F6=a("li"),Sfe=a("strong"),kDo=o("van"),SDo=o(" \u2014 "),ZD=a("a"),RDo=o("VanForImageClassification"),BDo=o(" (VAN model)"),PDo=l(),T6=a("li"),Rfe=a("strong"),$Do=o("vit"),IDo=o(" \u2014 "),eG=a("a"),qDo=o("ViTForImageClassification"),NDo=o(" (ViT model)"),jDo=l(),M6=a("p"),DDo=o("The model is set in evaluation mode by default using "),Bfe=a("code"),GDo=o("model.eval()"),ODo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=a("code"),VDo=o("model.train()"),XDo=l(),$fe=a("p"),zDo=o("Examples:"),QDo=l(),f($C.$$.fragment),sBe=l(),Bd=a("h2"),E6=a("a"),Ife=a("span"),f(IC.$$.fragment),WDo=l(),qfe=a("span"),HDo=o("AutoModelForVision2Seq"),lBe=l(),ir=a("div"),f(qC.$$.fragment),UDo=l(),Pd=a("p"),JDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=a("a"),YDo=o("from_pretrained()"),KDo=o(" class method or the "),rG=a("a"),ZDo=o("from_config()"),eGo=o(` class
method.`),oGo=l(),NC=a("p"),rGo=o("This class cannot be instantiated directly using "),Nfe=a("code"),tGo=o("__init__()"),aGo=o(" (throws an error)."),nGo=l(),rt=a("div"),f(jC.$$.fragment),sGo=l(),jfe=a("p"),lGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iGo=l(),$d=a("p"),dGo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),cGo=o("not"),fGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=a("a"),mGo=o("from_pretrained()"),gGo=o(" to load the model weights."),hGo=l(),Gfe=a("p"),pGo=o("Examples:"),_Go=l(),f(DC.$$.fragment),uGo=l(),Ue=a("div"),f(GC.$$.fragment),bGo=l(),Ofe=a("p"),vGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FGo=l(),rn=a("p"),TGo=o("The model class to instantiate is selected based on the "),Vfe=a("code"),MGo=o("model_type"),EGo=o(` property of the config object (either
passed as an argument or loaded from `),Xfe=a("code"),CGo=o("pretrained_model_name_or_path"),wGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),AGo=o("pretrained_model_name_or_path"),yGo=o(":"),LGo=l(),Qfe=a("ul"),C6=a("li"),Wfe=a("strong"),xGo=o("vision-encoder-decoder"),kGo=o(" \u2014 "),aG=a("a"),SGo=o("VisionEncoderDecoderModel"),RGo=o(" (Vision Encoder decoder model)"),BGo=l(),w6=a("p"),PGo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),$Go=o("model.eval()"),IGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),qGo=o("model.train()"),NGo=l(),Jfe=a("p"),jGo=o("Examples:"),DGo=l(),f(OC.$$.fragment),iBe=l(),Id=a("h2"),A6=a("a"),Yfe=a("span"),f(VC.$$.fragment),GGo=l(),Kfe=a("span"),OGo=o("AutoModelForAudioClassification"),dBe=l(),dr=a("div"),f(XC.$$.fragment),VGo=l(),qd=a("p"),XGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=a("a"),zGo=o("from_pretrained()"),QGo=o(" class method or the "),sG=a("a"),WGo=o("from_config()"),HGo=o(` class
method.`),UGo=l(),zC=a("p"),JGo=o("This class cannot be instantiated directly using "),Zfe=a("code"),YGo=o("__init__()"),KGo=o(" (throws an error)."),ZGo=l(),tt=a("div"),f(QC.$$.fragment),eOo=l(),eme=a("p"),oOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),rOo=l(),Nd=a("p"),tOo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),aOo=o("not"),nOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),sOo=o("from_pretrained()"),lOo=o(" to load the model weights."),iOo=l(),rme=a("p"),dOo=o("Examples:"),cOo=l(),f(WC.$$.fragment),fOo=l(),Je=a("div"),f(HC.$$.fragment),mOo=l(),tme=a("p"),gOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),hOo=l(),tn=a("p"),pOo=o("The model class to instantiate is selected based on the "),ame=a("code"),_Oo=o("model_type"),uOo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),bOo=o("pretrained_model_name_or_path"),vOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),FOo=o("pretrained_model_name_or_path"),TOo=o(":"),MOo=l(),Se=a("ul"),y6=a("li"),lme=a("strong"),EOo=o("data2vec-audio"),COo=o(" \u2014 "),iG=a("a"),wOo=o("Data2VecAudioForSequenceClassification"),AOo=o(" (Data2VecAudio model)"),yOo=l(),L6=a("li"),ime=a("strong"),LOo=o("hubert"),xOo=o(" \u2014 "),dG=a("a"),kOo=o("HubertForSequenceClassification"),SOo=o(" (Hubert model)"),ROo=l(),x6=a("li"),dme=a("strong"),BOo=o("sew"),POo=o(" \u2014 "),cG=a("a"),$Oo=o("SEWForSequenceClassification"),IOo=o(" (SEW model)"),qOo=l(),k6=a("li"),cme=a("strong"),NOo=o("sew-d"),jOo=o(" \u2014 "),fG=a("a"),DOo=o("SEWDForSequenceClassification"),GOo=o(" (SEW-D model)"),OOo=l(),S6=a("li"),fme=a("strong"),VOo=o("unispeech"),XOo=o(" \u2014 "),mG=a("a"),zOo=o("UniSpeechForSequenceClassification"),QOo=o(" (UniSpeech model)"),WOo=l(),R6=a("li"),mme=a("strong"),HOo=o("unispeech-sat"),UOo=o(" \u2014 "),gG=a("a"),JOo=o("UniSpeechSatForSequenceClassification"),YOo=o(" (UniSpeechSat model)"),KOo=l(),B6=a("li"),gme=a("strong"),ZOo=o("wav2vec2"),eVo=o(" \u2014 "),hG=a("a"),oVo=o("Wav2Vec2ForSequenceClassification"),rVo=o(" (Wav2Vec2 model)"),tVo=l(),P6=a("li"),hme=a("strong"),aVo=o("wavlm"),nVo=o(" \u2014 "),pG=a("a"),sVo=o("WavLMForSequenceClassification"),lVo=o(" (WavLM model)"),iVo=l(),$6=a("p"),dVo=o("The model is set in evaluation mode by default using "),pme=a("code"),cVo=o("model.eval()"),fVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),mVo=o("model.train()"),gVo=l(),ume=a("p"),hVo=o("Examples:"),pVo=l(),f(UC.$$.fragment),cBe=l(),jd=a("h2"),I6=a("a"),bme=a("span"),f(JC.$$.fragment),_Vo=l(),vme=a("span"),uVo=o("AutoModelForAudioFrameClassification"),fBe=l(),cr=a("div"),f(YC.$$.fragment),bVo=l(),Dd=a("p"),vVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=a("a"),FVo=o("from_pretrained()"),TVo=o(" class method or the "),uG=a("a"),MVo=o("from_config()"),EVo=o(` class
method.`),CVo=l(),KC=a("p"),wVo=o("This class cannot be instantiated directly using "),Fme=a("code"),AVo=o("__init__()"),yVo=o(" (throws an error)."),LVo=l(),at=a("div"),f(ZC.$$.fragment),xVo=l(),Tme=a("p"),kVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),SVo=l(),Gd=a("p"),RVo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),BVo=o("not"),PVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=a("a"),$Vo=o("from_pretrained()"),IVo=o(" to load the model weights."),qVo=l(),Eme=a("p"),NVo=o("Examples:"),jVo=l(),f(ew.$$.fragment),DVo=l(),Ye=a("div"),f(ow.$$.fragment),GVo=l(),Cme=a("p"),OVo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),VVo=l(),an=a("p"),XVo=o("The model class to instantiate is selected based on the "),wme=a("code"),zVo=o("model_type"),QVo=o(` property of the config object (either
passed as an argument or loaded from `),Ame=a("code"),WVo=o("pretrained_model_name_or_path"),HVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=a("code"),UVo=o("pretrained_model_name_or_path"),JVo=o(":"),YVo=l(),nn=a("ul"),q6=a("li"),Lme=a("strong"),KVo=o("data2vec-audio"),ZVo=o(" \u2014 "),vG=a("a"),eXo=o("Data2VecAudioForAudioFrameClassification"),oXo=o(" (Data2VecAudio model)"),rXo=l(),N6=a("li"),xme=a("strong"),tXo=o("unispeech-sat"),aXo=o(" \u2014 "),FG=a("a"),nXo=o("UniSpeechSatForAudioFrameClassification"),sXo=o(" (UniSpeechSat model)"),lXo=l(),j6=a("li"),kme=a("strong"),iXo=o("wav2vec2"),dXo=o(" \u2014 "),TG=a("a"),cXo=o("Wav2Vec2ForAudioFrameClassification"),fXo=o(" (Wav2Vec2 model)"),mXo=l(),D6=a("li"),Sme=a("strong"),gXo=o("wavlm"),hXo=o(" \u2014 "),MG=a("a"),pXo=o("WavLMForAudioFrameClassification"),_Xo=o(" (WavLM model)"),uXo=l(),G6=a("p"),bXo=o("The model is set in evaluation mode by default using "),Rme=a("code"),vXo=o("model.eval()"),FXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=a("code"),TXo=o("model.train()"),MXo=l(),Pme=a("p"),EXo=o("Examples:"),CXo=l(),f(rw.$$.fragment),mBe=l(),Od=a("h2"),O6=a("a"),$me=a("span"),f(tw.$$.fragment),wXo=l(),Ime=a("span"),AXo=o("AutoModelForCTC"),gBe=l(),fr=a("div"),f(aw.$$.fragment),yXo=l(),Vd=a("p"),LXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=a("a"),xXo=o("from_pretrained()"),kXo=o(" class method or the "),CG=a("a"),SXo=o("from_config()"),RXo=o(` class
method.`),BXo=l(),nw=a("p"),PXo=o("This class cannot be instantiated directly using "),qme=a("code"),$Xo=o("__init__()"),IXo=o(" (throws an error)."),qXo=l(),nt=a("div"),f(sw.$$.fragment),NXo=l(),Nme=a("p"),jXo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),DXo=l(),Xd=a("p"),GXo=o(`Note:
Loading a model from its configuration file does `),jme=a("strong"),OXo=o("not"),VXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),XXo=o("from_pretrained()"),zXo=o(" to load the model weights."),QXo=l(),Dme=a("p"),WXo=o("Examples:"),HXo=l(),f(lw.$$.fragment),UXo=l(),Ke=a("div"),f(iw.$$.fragment),JXo=l(),Gme=a("p"),YXo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),KXo=l(),sn=a("p"),ZXo=o("The model class to instantiate is selected based on the "),Ome=a("code"),ezo=o("model_type"),ozo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),rzo=o("pretrained_model_name_or_path"),tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=a("code"),azo=o("pretrained_model_name_or_path"),nzo=o(":"),szo=l(),Re=a("ul"),V6=a("li"),zme=a("strong"),lzo=o("data2vec-audio"),izo=o(" \u2014 "),AG=a("a"),dzo=o("Data2VecAudioForCTC"),czo=o(" (Data2VecAudio model)"),fzo=l(),X6=a("li"),Qme=a("strong"),mzo=o("hubert"),gzo=o(" \u2014 "),yG=a("a"),hzo=o("HubertForCTC"),pzo=o(" (Hubert model)"),_zo=l(),z6=a("li"),Wme=a("strong"),uzo=o("sew"),bzo=o(" \u2014 "),LG=a("a"),vzo=o("SEWForCTC"),Fzo=o(" (SEW model)"),Tzo=l(),Q6=a("li"),Hme=a("strong"),Mzo=o("sew-d"),Ezo=o(" \u2014 "),xG=a("a"),Czo=o("SEWDForCTC"),wzo=o(" (SEW-D model)"),Azo=l(),W6=a("li"),Ume=a("strong"),yzo=o("unispeech"),Lzo=o(" \u2014 "),kG=a("a"),xzo=o("UniSpeechForCTC"),kzo=o(" (UniSpeech model)"),Szo=l(),H6=a("li"),Jme=a("strong"),Rzo=o("unispeech-sat"),Bzo=o(" \u2014 "),SG=a("a"),Pzo=o("UniSpeechSatForCTC"),$zo=o(" (UniSpeechSat model)"),Izo=l(),U6=a("li"),Yme=a("strong"),qzo=o("wav2vec2"),Nzo=o(" \u2014 "),RG=a("a"),jzo=o("Wav2Vec2ForCTC"),Dzo=o(" (Wav2Vec2 model)"),Gzo=l(),J6=a("li"),Kme=a("strong"),Ozo=o("wavlm"),Vzo=o(" \u2014 "),BG=a("a"),Xzo=o("WavLMForCTC"),zzo=o(" (WavLM model)"),Qzo=l(),Y6=a("p"),Wzo=o("The model is set in evaluation mode by default using "),Zme=a("code"),Hzo=o("model.eval()"),Uzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=a("code"),Jzo=o("model.train()"),Yzo=l(),oge=a("p"),Kzo=o("Examples:"),Zzo=l(),f(dw.$$.fragment),hBe=l(),zd=a("h2"),K6=a("a"),rge=a("span"),f(cw.$$.fragment),eQo=l(),tge=a("span"),oQo=o("AutoModelForSpeechSeq2Seq"),pBe=l(),mr=a("div"),f(fw.$$.fragment),rQo=l(),Qd=a("p"),tQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=a("a"),aQo=o("from_pretrained()"),nQo=o(" class method or the "),$G=a("a"),sQo=o("from_config()"),lQo=o(` class
method.`),iQo=l(),mw=a("p"),dQo=o("This class cannot be instantiated directly using "),age=a("code"),cQo=o("__init__()"),fQo=o(" (throws an error)."),mQo=l(),st=a("div"),f(gw.$$.fragment),gQo=l(),nge=a("p"),hQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),pQo=l(),Wd=a("p"),_Qo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),uQo=o("not"),bQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),vQo=o("from_pretrained()"),FQo=o(" to load the model weights."),TQo=l(),lge=a("p"),MQo=o("Examples:"),EQo=l(),f(hw.$$.fragment),CQo=l(),Ze=a("div"),f(pw.$$.fragment),wQo=l(),ige=a("p"),AQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yQo=l(),ln=a("p"),LQo=o("The model class to instantiate is selected based on the "),dge=a("code"),xQo=o("model_type"),kQo=o(` property of the config object (either
passed as an argument or loaded from `),cge=a("code"),SQo=o("pretrained_model_name_or_path"),RQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=a("code"),BQo=o("pretrained_model_name_or_path"),PQo=o(":"),$Qo=l(),_w=a("ul"),Z6=a("li"),mge=a("strong"),IQo=o("speech-encoder-decoder"),qQo=o(" \u2014 "),qG=a("a"),NQo=o("SpeechEncoderDecoderModel"),jQo=o(" (Speech Encoder decoder model)"),DQo=l(),ev=a("li"),gge=a("strong"),GQo=o("speech_to_text"),OQo=o(" \u2014 "),NG=a("a"),VQo=o("Speech2TextForConditionalGeneration"),XQo=o(" (Speech2Text model)"),zQo=l(),ov=a("p"),QQo=o("The model is set in evaluation mode by default using "),hge=a("code"),WQo=o("model.eval()"),HQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),UQo=o("model.train()"),JQo=l(),_ge=a("p"),YQo=o("Examples:"),KQo=l(),f(uw.$$.fragment),_Be=l(),Hd=a("h2"),rv=a("a"),uge=a("span"),f(bw.$$.fragment),ZQo=l(),bge=a("span"),eWo=o("AutoModelForAudioXVector"),uBe=l(),gr=a("div"),f(vw.$$.fragment),oWo=l(),Ud=a("p"),rWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jG=a("a"),tWo=o("from_pretrained()"),aWo=o(" class method or the "),DG=a("a"),nWo=o("from_config()"),sWo=o(` class
method.`),lWo=l(),Fw=a("p"),iWo=o("This class cannot be instantiated directly using "),vge=a("code"),dWo=o("__init__()"),cWo=o(" (throws an error)."),fWo=l(),lt=a("div"),f(Tw.$$.fragment),mWo=l(),Fge=a("p"),gWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),hWo=l(),Jd=a("p"),pWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),_Wo=o("not"),uWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=a("a"),bWo=o("from_pretrained()"),vWo=o(" to load the model weights."),FWo=l(),Mge=a("p"),TWo=o("Examples:"),MWo=l(),f(Mw.$$.fragment),EWo=l(),eo=a("div"),f(Ew.$$.fragment),CWo=l(),Ege=a("p"),wWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),AWo=l(),dn=a("p"),yWo=o("The model class to instantiate is selected based on the "),Cge=a("code"),LWo=o("model_type"),xWo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),kWo=o("pretrained_model_name_or_path"),SWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),RWo=o("pretrained_model_name_or_path"),BWo=o(":"),PWo=l(),cn=a("ul"),tv=a("li"),yge=a("strong"),$Wo=o("data2vec-audio"),IWo=o(" \u2014 "),OG=a("a"),qWo=o("Data2VecAudioForXVector"),NWo=o(" (Data2VecAudio model)"),jWo=l(),av=a("li"),Lge=a("strong"),DWo=o("unispeech-sat"),GWo=o(" \u2014 "),VG=a("a"),OWo=o("UniSpeechSatForXVector"),VWo=o(" (UniSpeechSat model)"),XWo=l(),nv=a("li"),xge=a("strong"),zWo=o("wav2vec2"),QWo=o(" \u2014 "),XG=a("a"),WWo=o("Wav2Vec2ForXVector"),HWo=o(" (Wav2Vec2 model)"),UWo=l(),sv=a("li"),kge=a("strong"),JWo=o("wavlm"),YWo=o(" \u2014 "),zG=a("a"),KWo=o("WavLMForXVector"),ZWo=o(" (WavLM model)"),eHo=l(),lv=a("p"),oHo=o("The model is set in evaluation mode by default using "),Sge=a("code"),rHo=o("model.eval()"),tHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),aHo=o("model.train()"),nHo=l(),Bge=a("p"),sHo=o("Examples:"),lHo=l(),f(Cw.$$.fragment),bBe=l(),Yd=a("h2"),iv=a("a"),Pge=a("span"),f(ww.$$.fragment),iHo=l(),$ge=a("span"),dHo=o("AutoModelForMaskedImageModeling"),vBe=l(),hr=a("div"),f(Aw.$$.fragment),cHo=l(),Kd=a("p"),fHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=a("a"),mHo=o("from_pretrained()"),gHo=o(" class method or the "),WG=a("a"),hHo=o("from_config()"),pHo=o(` class
method.`),_Ho=l(),yw=a("p"),uHo=o("This class cannot be instantiated directly using "),Ige=a("code"),bHo=o("__init__()"),vHo=o(" (throws an error)."),FHo=l(),it=a("div"),f(Lw.$$.fragment),THo=l(),qge=a("p"),MHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),EHo=l(),Zd=a("p"),CHo=o(`Note:
Loading a model from its configuration file does `),Nge=a("strong"),wHo=o("not"),AHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=a("a"),yHo=o("from_pretrained()"),LHo=o(" to load the model weights."),xHo=l(),jge=a("p"),kHo=o("Examples:"),SHo=l(),f(xw.$$.fragment),RHo=l(),oo=a("div"),f(kw.$$.fragment),BHo=l(),Dge=a("p"),PHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),$Ho=l(),fn=a("p"),IHo=o("The model class to instantiate is selected based on the "),Gge=a("code"),qHo=o("model_type"),NHo=o(` property of the config object (either
passed as an argument or loaded from `),Oge=a("code"),jHo=o("pretrained_model_name_or_path"),DHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=a("code"),GHo=o("pretrained_model_name_or_path"),OHo=o(":"),VHo=l(),ec=a("ul"),dv=a("li"),Xge=a("strong"),XHo=o("deit"),zHo=o(" \u2014 "),UG=a("a"),QHo=o("DeiTForMaskedImageModeling"),WHo=o(" (DeiT model)"),HHo=l(),cv=a("li"),zge=a("strong"),UHo=o("swin"),JHo=o(" \u2014 "),JG=a("a"),YHo=o("SwinForMaskedImageModeling"),KHo=o(" (Swin model)"),ZHo=l(),fv=a("li"),Qge=a("strong"),eUo=o("vit"),oUo=o(" \u2014 "),YG=a("a"),rUo=o("ViTForMaskedImageModeling"),tUo=o(" (ViT model)"),aUo=l(),mv=a("p"),nUo=o("The model is set in evaluation mode by default using "),Wge=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=a("code"),iUo=o("model.train()"),dUo=l(),Uge=a("p"),cUo=o("Examples:"),fUo=l(),f(Sw.$$.fragment),FBe=l(),oc=a("h2"),gv=a("a"),Jge=a("span"),f(Rw.$$.fragment),mUo=l(),Yge=a("span"),gUo=o("AutoModelForObjectDetection"),TBe=l(),pr=a("div"),f(Bw.$$.fragment),hUo=l(),rc=a("p"),pUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=a("a"),_Uo=o("from_pretrained()"),uUo=o(" class method or the "),ZG=a("a"),bUo=o("from_config()"),vUo=o(` class
method.`),FUo=l(),Pw=a("p"),TUo=o("This class cannot be instantiated directly using "),Kge=a("code"),MUo=o("__init__()"),EUo=o(" (throws an error)."),CUo=l(),dt=a("div"),f($w.$$.fragment),wUo=l(),Zge=a("p"),AUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),yUo=l(),tc=a("p"),LUo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),xUo=o("not"),kUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=a("a"),SUo=o("from_pretrained()"),RUo=o(" to load the model weights."),BUo=l(),ohe=a("p"),PUo=o("Examples:"),$Uo=l(),f(Iw.$$.fragment),IUo=l(),ro=a("div"),f(qw.$$.fragment),qUo=l(),rhe=a("p"),NUo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),jUo=l(),mn=a("p"),DUo=o("The model class to instantiate is selected based on the "),the=a("code"),GUo=o("model_type"),OUo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),VUo=o("pretrained_model_name_or_path"),XUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),zUo=o("pretrained_model_name_or_path"),QUo=o(":"),WUo=l(),she=a("ul"),hv=a("li"),lhe=a("strong"),HUo=o("detr"),UUo=o(" \u2014 "),oO=a("a"),JUo=o("DetrForObjectDetection"),YUo=o(" (DETR model)"),KUo=l(),pv=a("p"),ZUo=o("The model is set in evaluation mode by default using "),ihe=a("code"),eJo=o("model.eval()"),oJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),rJo=o("model.train()"),tJo=l(),che=a("p"),aJo=o("Examples:"),nJo=l(),f(Nw.$$.fragment),MBe=l(),ac=a("h2"),_v=a("a"),fhe=a("span"),f(jw.$$.fragment),sJo=l(),mhe=a("span"),lJo=o("AutoModelForImageSegmentation"),EBe=l(),_r=a("div"),f(Dw.$$.fragment),iJo=l(),nc=a("p"),dJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=a("a"),cJo=o("from_pretrained()"),fJo=o(" class method or the "),tO=a("a"),mJo=o("from_config()"),gJo=o(` class
method.`),hJo=l(),Gw=a("p"),pJo=o("This class cannot be instantiated directly using "),ghe=a("code"),_Jo=o("__init__()"),uJo=o(" (throws an error)."),bJo=l(),ct=a("div"),f(Ow.$$.fragment),vJo=l(),hhe=a("p"),FJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),TJo=l(),sc=a("p"),MJo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),EJo=o("not"),CJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),wJo=o("from_pretrained()"),AJo=o(" to load the model weights."),yJo=l(),_he=a("p"),LJo=o("Examples:"),xJo=l(),f(Vw.$$.fragment),kJo=l(),to=a("div"),f(Xw.$$.fragment),SJo=l(),uhe=a("p"),RJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),BJo=l(),gn=a("p"),PJo=o("The model class to instantiate is selected based on the "),bhe=a("code"),$Jo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),qJo=o("pretrained_model_name_or_path"),NJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),jJo=o("pretrained_model_name_or_path"),DJo=o(":"),GJo=l(),The=a("ul"),uv=a("li"),Mhe=a("strong"),OJo=o("detr"),VJo=o(" \u2014 "),nO=a("a"),XJo=o("DetrForSegmentation"),zJo=o(" (DETR model)"),QJo=l(),bv=a("p"),WJo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),HJo=o("model.eval()"),UJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),JJo=o("model.train()"),YJo=l(),whe=a("p"),KJo=o("Examples:"),ZJo=l(),f(zw.$$.fragment),CBe=l(),lc=a("h2"),vv=a("a"),Ahe=a("span"),f(Qw.$$.fragment),eYo=l(),yhe=a("span"),oYo=o("AutoModelForSemanticSegmentation"),wBe=l(),ur=a("div"),f(Ww.$$.fragment),rYo=l(),ic=a("p"),tYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=a("a"),aYo=o("from_pretrained()"),nYo=o(" class method or the "),lO=a("a"),sYo=o("from_config()"),lYo=o(` class
method.`),iYo=l(),Hw=a("p"),dYo=o("This class cannot be instantiated directly using "),Lhe=a("code"),cYo=o("__init__()"),fYo=o(" (throws an error)."),mYo=l(),ft=a("div"),f(Uw.$$.fragment),gYo=l(),xhe=a("p"),hYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),pYo=l(),dc=a("p"),_Yo=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),uYo=o("not"),bYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),vYo=o("from_pretrained()"),FYo=o(" to load the model weights."),TYo=l(),She=a("p"),MYo=o("Examples:"),EYo=l(),f(Jw.$$.fragment),CYo=l(),ao=a("div"),f(Yw.$$.fragment),wYo=l(),Rhe=a("p"),AYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),yYo=l(),hn=a("p"),LYo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),xYo=o("model_type"),kYo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),SYo=o("pretrained_model_name_or_path"),RYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),BYo=o("pretrained_model_name_or_path"),PYo=o(":"),$Yo=l(),pn=a("ul"),Fv=a("li"),Ihe=a("strong"),IYo=o("beit"),qYo=o(" \u2014 "),dO=a("a"),NYo=o("BeitForSemanticSegmentation"),jYo=o(" (BEiT model)"),DYo=l(),Tv=a("li"),qhe=a("strong"),GYo=o("data2vec-vision"),OYo=o(" \u2014 "),cO=a("a"),VYo=o("Data2VecVisionForSemanticSegmentation"),XYo=o(" (Data2VecVision model)"),zYo=l(),Mv=a("li"),Nhe=a("strong"),QYo=o("dpt"),WYo=o(" \u2014 "),fO=a("a"),HYo=o("DPTForSemanticSegmentation"),UYo=o(" (DPT model)"),JYo=l(),Ev=a("li"),jhe=a("strong"),YYo=o("segformer"),KYo=o(" \u2014 "),mO=a("a"),ZYo=o("SegformerForSemanticSegmentation"),eKo=o(" (SegFormer model)"),oKo=l(),Cv=a("p"),rKo=o("The model is set in evaluation mode by default using "),Dhe=a("code"),tKo=o("model.eval()"),aKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=a("code"),nKo=o("model.train()"),sKo=l(),Ohe=a("p"),lKo=o("Examples:"),iKo=l(),f(Kw.$$.fragment),ABe=l(),cc=a("h2"),wv=a("a"),Vhe=a("span"),f(Zw.$$.fragment),dKo=l(),Xhe=a("span"),cKo=o("AutoModelForInstanceSegmentation"),yBe=l(),br=a("div"),f(eA.$$.fragment),fKo=l(),fc=a("p"),mKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gO=a("a"),gKo=o("from_pretrained()"),hKo=o(" class method or the "),hO=a("a"),pKo=o("from_config()"),_Ko=o(` class
method.`),uKo=l(),oA=a("p"),bKo=o("This class cannot be instantiated directly using "),zhe=a("code"),vKo=o("__init__()"),FKo=o(" (throws an error)."),TKo=l(),mt=a("div"),f(rA.$$.fragment),MKo=l(),Qhe=a("p"),EKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),CKo=l(),mc=a("p"),wKo=o(`Note:
Loading a model from its configuration file does `),Whe=a("strong"),AKo=o("not"),yKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),LKo=o("from_pretrained()"),xKo=o(" to load the model weights."),kKo=l(),Hhe=a("p"),SKo=o("Examples:"),RKo=l(),f(tA.$$.fragment),BKo=l(),no=a("div"),f(aA.$$.fragment),PKo=l(),Uhe=a("p"),$Ko=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),IKo=l(),_n=a("p"),qKo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),NKo=o("model_type"),jKo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),DKo=o("pretrained_model_name_or_path"),GKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),OKo=o("pretrained_model_name_or_path"),VKo=o(":"),XKo=l(),Zhe=a("ul"),Av=a("li"),epe=a("strong"),zKo=o("maskformer"),QKo=o(" \u2014 "),_O=a("a"),WKo=o("MaskFormerForInstanceSegmentation"),HKo=o(" (MaskFormer model)"),UKo=l(),yv=a("p"),JKo=o("The model is set in evaluation mode by default using "),ope=a("code"),YKo=o("model.eval()"),KKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),ZKo=o("model.train()"),eZo=l(),tpe=a("p"),oZo=o("Examples:"),rZo=l(),f(nA.$$.fragment),LBe=l(),gc=a("h2"),Lv=a("a"),ape=a("span"),f(sA.$$.fragment),tZo=l(),npe=a("span"),aZo=o("TFAutoModel"),xBe=l(),vr=a("div"),f(lA.$$.fragment),nZo=l(),hc=a("p"),sZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uO=a("a"),lZo=o("from_pretrained()"),iZo=o(" class method or the "),bO=a("a"),dZo=o("from_config()"),cZo=o(` class
method.`),fZo=l(),iA=a("p"),mZo=o("This class cannot be instantiated directly using "),spe=a("code"),gZo=o("__init__()"),hZo=o(" (throws an error)."),pZo=l(),gt=a("div"),f(dA.$$.fragment),_Zo=l(),lpe=a("p"),uZo=o("Instantiates one of the base model classes of the library from a configuration."),bZo=l(),pc=a("p"),vZo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),FZo=o("not"),TZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),MZo=o("from_pretrained()"),EZo=o(" to load the model weights."),CZo=l(),dpe=a("p"),wZo=o("Examples:"),AZo=l(),f(cA.$$.fragment),yZo=l(),ho=a("div"),f(fA.$$.fragment),LZo=l(),cpe=a("p"),xZo=o("Instantiate one of the base model classes of the library from a pretrained model."),kZo=l(),un=a("p"),SZo=o("The model class to instantiate is selected based on the "),fpe=a("code"),RZo=o("model_type"),BZo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),PZo=o("pretrained_model_name_or_path"),$Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),IZo=o("pretrained_model_name_or_path"),qZo=o(":"),NZo=l(),x=a("ul"),xv=a("li"),hpe=a("strong"),jZo=o("albert"),DZo=o(" \u2014 "),FO=a("a"),GZo=o("TFAlbertModel"),OZo=o(" (ALBERT model)"),VZo=l(),kv=a("li"),ppe=a("strong"),XZo=o("bart"),zZo=o(" \u2014 "),TO=a("a"),QZo=o("TFBartModel"),WZo=o(" (BART model)"),HZo=l(),Sv=a("li"),_pe=a("strong"),UZo=o("bert"),JZo=o(" \u2014 "),MO=a("a"),YZo=o("TFBertModel"),KZo=o(" (BERT model)"),ZZo=l(),Rv=a("li"),upe=a("strong"),eer=o("blenderbot"),oer=o(" \u2014 "),EO=a("a"),rer=o("TFBlenderbotModel"),ter=o(" (Blenderbot model)"),aer=l(),Bv=a("li"),bpe=a("strong"),ner=o("blenderbot-small"),ser=o(" \u2014 "),CO=a("a"),ler=o("TFBlenderbotSmallModel"),ier=o(" (BlenderbotSmall model)"),der=l(),Pv=a("li"),vpe=a("strong"),cer=o("camembert"),fer=o(" \u2014 "),wO=a("a"),mer=o("TFCamembertModel"),ger=o(" (CamemBERT model)"),her=l(),$v=a("li"),Fpe=a("strong"),per=o("clip"),_er=o(" \u2014 "),AO=a("a"),uer=o("TFCLIPModel"),ber=o(" (CLIP model)"),ver=l(),Iv=a("li"),Tpe=a("strong"),Fer=o("convbert"),Ter=o(" \u2014 "),yO=a("a"),Mer=o("TFConvBertModel"),Eer=o(" (ConvBERT model)"),Cer=l(),qv=a("li"),Mpe=a("strong"),wer=o("convnext"),Aer=o(" \u2014 "),LO=a("a"),yer=o("TFConvNextModel"),Ler=o(" (ConvNext model)"),xer=l(),Nv=a("li"),Epe=a("strong"),ker=o("ctrl"),Ser=o(" \u2014 "),xO=a("a"),Rer=o("TFCTRLModel"),Ber=o(" (CTRL model)"),Per=l(),jv=a("li"),Cpe=a("strong"),$er=o("deberta"),Ier=o(" \u2014 "),kO=a("a"),qer=o("TFDebertaModel"),Ner=o(" (DeBERTa model)"),jer=l(),Dv=a("li"),wpe=a("strong"),Der=o("deberta-v2"),Ger=o(" \u2014 "),SO=a("a"),Oer=o("TFDebertaV2Model"),Ver=o(" (DeBERTa-v2 model)"),Xer=l(),Gv=a("li"),Ape=a("strong"),zer=o("distilbert"),Qer=o(" \u2014 "),RO=a("a"),Wer=o("TFDistilBertModel"),Her=o(" (DistilBERT model)"),Uer=l(),Ov=a("li"),ype=a("strong"),Jer=o("dpr"),Yer=o(" \u2014 "),BO=a("a"),Ker=o("TFDPRQuestionEncoder"),Zer=o(" (DPR model)"),eor=l(),Vv=a("li"),Lpe=a("strong"),oor=o("electra"),ror=o(" \u2014 "),PO=a("a"),tor=o("TFElectraModel"),aor=o(" (ELECTRA model)"),nor=l(),Xv=a("li"),xpe=a("strong"),sor=o("flaubert"),lor=o(" \u2014 "),$O=a("a"),ior=o("TFFlaubertModel"),dor=o(" (FlauBERT model)"),cor=l(),Os=a("li"),kpe=a("strong"),mor=o("funnel"),gor=o(" \u2014 "),IO=a("a"),hor=o("TFFunnelModel"),por=o(" or "),qO=a("a"),_or=o("TFFunnelBaseModel"),uor=o(" (Funnel Transformer model)"),bor=l(),zv=a("li"),Spe=a("strong"),vor=o("gpt2"),For=o(" \u2014 "),NO=a("a"),Tor=o("TFGPT2Model"),Mor=o(" (OpenAI GPT-2 model)"),Eor=l(),Qv=a("li"),Rpe=a("strong"),Cor=o("gptj"),wor=o(" \u2014 "),jO=a("a"),Aor=o("TFGPTJModel"),yor=o(" (GPT-J model)"),Lor=l(),Wv=a("li"),Bpe=a("strong"),xor=o("hubert"),kor=o(" \u2014 "),DO=a("a"),Sor=o("TFHubertModel"),Ror=o(" (Hubert model)"),Bor=l(),Hv=a("li"),Ppe=a("strong"),Por=o("layoutlm"),$or=o(" \u2014 "),GO=a("a"),Ior=o("TFLayoutLMModel"),qor=o(" (LayoutLM model)"),Nor=l(),Uv=a("li"),$pe=a("strong"),jor=o("led"),Dor=o(" \u2014 "),OO=a("a"),Gor=o("TFLEDModel"),Oor=o(" (LED model)"),Vor=l(),Jv=a("li"),Ipe=a("strong"),Xor=o("longformer"),zor=o(" \u2014 "),VO=a("a"),Qor=o("TFLongformerModel"),Wor=o(" (Longformer model)"),Hor=l(),Yv=a("li"),qpe=a("strong"),Uor=o("lxmert"),Jor=o(" \u2014 "),XO=a("a"),Yor=o("TFLxmertModel"),Kor=o(" (LXMERT model)"),Zor=l(),Kv=a("li"),Npe=a("strong"),err=o("marian"),orr=o(" \u2014 "),zO=a("a"),rrr=o("TFMarianModel"),trr=o(" (Marian model)"),arr=l(),Zv=a("li"),jpe=a("strong"),nrr=o("mbart"),srr=o(" \u2014 "),QO=a("a"),lrr=o("TFMBartModel"),irr=o(" (mBART model)"),drr=l(),eF=a("li"),Dpe=a("strong"),crr=o("mobilebert"),frr=o(" \u2014 "),WO=a("a"),mrr=o("TFMobileBertModel"),grr=o(" (MobileBERT model)"),hrr=l(),oF=a("li"),Gpe=a("strong"),prr=o("mpnet"),_rr=o(" \u2014 "),HO=a("a"),urr=o("TFMPNetModel"),brr=o(" (MPNet model)"),vrr=l(),rF=a("li"),Ope=a("strong"),Frr=o("mt5"),Trr=o(" \u2014 "),UO=a("a"),Mrr=o("TFMT5Model"),Err=o(" (mT5 model)"),Crr=l(),tF=a("li"),Vpe=a("strong"),wrr=o("openai-gpt"),Arr=o(" \u2014 "),JO=a("a"),yrr=o("TFOpenAIGPTModel"),Lrr=o(" (OpenAI GPT model)"),xrr=l(),aF=a("li"),Xpe=a("strong"),krr=o("pegasus"),Srr=o(" \u2014 "),YO=a("a"),Rrr=o("TFPegasusModel"),Brr=o(" (Pegasus model)"),Prr=l(),nF=a("li"),zpe=a("strong"),$rr=o("rembert"),Irr=o(" \u2014 "),KO=a("a"),qrr=o("TFRemBertModel"),Nrr=o(" (RemBERT model)"),jrr=l(),sF=a("li"),Qpe=a("strong"),Drr=o("roberta"),Grr=o(" \u2014 "),ZO=a("a"),Orr=o("TFRobertaModel"),Vrr=o(" (RoBERTa model)"),Xrr=l(),lF=a("li"),Wpe=a("strong"),zrr=o("roformer"),Qrr=o(" \u2014 "),eV=a("a"),Wrr=o("TFRoFormerModel"),Hrr=o(" (RoFormer model)"),Urr=l(),iF=a("li"),Hpe=a("strong"),Jrr=o("speech_to_text"),Yrr=o(" \u2014 "),oV=a("a"),Krr=o("TFSpeech2TextModel"),Zrr=o(" (Speech2Text model)"),etr=l(),dF=a("li"),Upe=a("strong"),otr=o("t5"),rtr=o(" \u2014 "),rV=a("a"),ttr=o("TFT5Model"),atr=o(" (T5 model)"),ntr=l(),cF=a("li"),Jpe=a("strong"),str=o("tapas"),ltr=o(" \u2014 "),tV=a("a"),itr=o("TFTapasModel"),dtr=o(" (TAPAS model)"),ctr=l(),fF=a("li"),Ype=a("strong"),ftr=o("transfo-xl"),mtr=o(" \u2014 "),aV=a("a"),gtr=o("TFTransfoXLModel"),htr=o(" (Transformer-XL model)"),ptr=l(),mF=a("li"),Kpe=a("strong"),_tr=o("vit"),utr=o(" \u2014 "),nV=a("a"),btr=o("TFViTModel"),vtr=o(" (ViT model)"),Ftr=l(),gF=a("li"),Zpe=a("strong"),Ttr=o("vit_mae"),Mtr=o(" \u2014 "),sV=a("a"),Etr=o("TFViTMAEModel"),Ctr=o(" (ViTMAE model)"),wtr=l(),hF=a("li"),e_e=a("strong"),Atr=o("wav2vec2"),ytr=o(" \u2014 "),lV=a("a"),Ltr=o("TFWav2Vec2Model"),xtr=o(" (Wav2Vec2 model)"),ktr=l(),pF=a("li"),o_e=a("strong"),Str=o("xlm"),Rtr=o(" \u2014 "),iV=a("a"),Btr=o("TFXLMModel"),Ptr=o(" (XLM model)"),$tr=l(),_F=a("li"),r_e=a("strong"),Itr=o("xlm-roberta"),qtr=o(" \u2014 "),dV=a("a"),Ntr=o("TFXLMRobertaModel"),jtr=o(" (XLM-RoBERTa model)"),Dtr=l(),uF=a("li"),t_e=a("strong"),Gtr=o("xlnet"),Otr=o(" \u2014 "),cV=a("a"),Vtr=o("TFXLNetModel"),Xtr=o(" (XLNet model)"),ztr=l(),a_e=a("p"),Qtr=o("Examples:"),Wtr=l(),f(mA.$$.fragment),kBe=l(),_c=a("h2"),bF=a("a"),n_e=a("span"),f(gA.$$.fragment),Htr=l(),s_e=a("span"),Utr=o("TFAutoModelForPreTraining"),SBe=l(),Fr=a("div"),f(hA.$$.fragment),Jtr=l(),uc=a("p"),Ytr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fV=a("a"),Ktr=o("from_pretrained()"),Ztr=o(" class method or the "),mV=a("a"),ear=o("from_config()"),oar=o(` class
method.`),rar=l(),pA=a("p"),tar=o("This class cannot be instantiated directly using "),l_e=a("code"),aar=o("__init__()"),nar=o(" (throws an error)."),sar=l(),ht=a("div"),f(_A.$$.fragment),lar=l(),i_e=a("p"),iar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),dar=l(),bc=a("p"),car=o(`Note:
Loading a model from its configuration file does `),d_e=a("strong"),far=o("not"),mar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),gar=o("from_pretrained()"),har=o(" to load the model weights."),par=l(),c_e=a("p"),_ar=o("Examples:"),uar=l(),f(uA.$$.fragment),bar=l(),po=a("div"),f(bA.$$.fragment),Far=l(),f_e=a("p"),Tar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Mar=l(),bn=a("p"),Ear=o("The model class to instantiate is selected based on the "),m_e=a("code"),Car=o("model_type"),war=o(` property of the config object (either
passed as an argument or loaded from `),g_e=a("code"),Aar=o("pretrained_model_name_or_path"),yar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(":"),kar=l(),H=a("ul"),vF=a("li"),p_e=a("strong"),Sar=o("albert"),Rar=o(" \u2014 "),hV=a("a"),Bar=o("TFAlbertForPreTraining"),Par=o(" (ALBERT model)"),$ar=l(),FF=a("li"),__e=a("strong"),Iar=o("bart"),qar=o(" \u2014 "),pV=a("a"),Nar=o("TFBartForConditionalGeneration"),jar=o(" (BART model)"),Dar=l(),TF=a("li"),u_e=a("strong"),Gar=o("bert"),Oar=o(" \u2014 "),_V=a("a"),Var=o("TFBertForPreTraining"),Xar=o(" (BERT model)"),zar=l(),MF=a("li"),b_e=a("strong"),Qar=o("camembert"),War=o(" \u2014 "),uV=a("a"),Har=o("TFCamembertForMaskedLM"),Uar=o(" (CamemBERT model)"),Jar=l(),EF=a("li"),v_e=a("strong"),Yar=o("ctrl"),Kar=o(" \u2014 "),bV=a("a"),Zar=o("TFCTRLLMHeadModel"),enr=o(" (CTRL model)"),onr=l(),CF=a("li"),F_e=a("strong"),rnr=o("distilbert"),tnr=o(" \u2014 "),vV=a("a"),anr=o("TFDistilBertForMaskedLM"),nnr=o(" (DistilBERT model)"),snr=l(),wF=a("li"),T_e=a("strong"),lnr=o("electra"),inr=o(" \u2014 "),FV=a("a"),dnr=o("TFElectraForPreTraining"),cnr=o(" (ELECTRA model)"),fnr=l(),AF=a("li"),M_e=a("strong"),mnr=o("flaubert"),gnr=o(" \u2014 "),TV=a("a"),hnr=o("TFFlaubertWithLMHeadModel"),pnr=o(" (FlauBERT model)"),_nr=l(),yF=a("li"),E_e=a("strong"),unr=o("funnel"),bnr=o(" \u2014 "),MV=a("a"),vnr=o("TFFunnelForPreTraining"),Fnr=o(" (Funnel Transformer model)"),Tnr=l(),LF=a("li"),C_e=a("strong"),Mnr=o("gpt2"),Enr=o(" \u2014 "),EV=a("a"),Cnr=o("TFGPT2LMHeadModel"),wnr=o(" (OpenAI GPT-2 model)"),Anr=l(),xF=a("li"),w_e=a("strong"),ynr=o("layoutlm"),Lnr=o(" \u2014 "),CV=a("a"),xnr=o("TFLayoutLMForMaskedLM"),knr=o(" (LayoutLM model)"),Snr=l(),kF=a("li"),A_e=a("strong"),Rnr=o("lxmert"),Bnr=o(" \u2014 "),wV=a("a"),Pnr=o("TFLxmertForPreTraining"),$nr=o(" (LXMERT model)"),Inr=l(),SF=a("li"),y_e=a("strong"),qnr=o("mobilebert"),Nnr=o(" \u2014 "),AV=a("a"),jnr=o("TFMobileBertForPreTraining"),Dnr=o(" (MobileBERT model)"),Gnr=l(),RF=a("li"),L_e=a("strong"),Onr=o("mpnet"),Vnr=o(" \u2014 "),yV=a("a"),Xnr=o("TFMPNetForMaskedLM"),znr=o(" (MPNet model)"),Qnr=l(),BF=a("li"),x_e=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),LV=a("a"),Unr=o("TFOpenAIGPTLMHeadModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),PF=a("li"),k_e=a("strong"),Knr=o("roberta"),Znr=o(" \u2014 "),xV=a("a"),esr=o("TFRobertaForMaskedLM"),osr=o(" (RoBERTa model)"),rsr=l(),$F=a("li"),S_e=a("strong"),tsr=o("t5"),asr=o(" \u2014 "),kV=a("a"),nsr=o("TFT5ForConditionalGeneration"),ssr=o(" (T5 model)"),lsr=l(),IF=a("li"),R_e=a("strong"),isr=o("tapas"),dsr=o(" \u2014 "),SV=a("a"),csr=o("TFTapasForMaskedLM"),fsr=o(" (TAPAS model)"),msr=l(),qF=a("li"),B_e=a("strong"),gsr=o("transfo-xl"),hsr=o(" \u2014 "),RV=a("a"),psr=o("TFTransfoXLLMHeadModel"),_sr=o(" (Transformer-XL model)"),usr=l(),NF=a("li"),P_e=a("strong"),bsr=o("vit_mae"),vsr=o(" \u2014 "),BV=a("a"),Fsr=o("TFViTMAEForPreTraining"),Tsr=o(" (ViTMAE model)"),Msr=l(),jF=a("li"),$_e=a("strong"),Esr=o("xlm"),Csr=o(" \u2014 "),PV=a("a"),wsr=o("TFXLMWithLMHeadModel"),Asr=o(" (XLM model)"),ysr=l(),DF=a("li"),I_e=a("strong"),Lsr=o("xlm-roberta"),xsr=o(" \u2014 "),$V=a("a"),ksr=o("TFXLMRobertaForMaskedLM"),Ssr=o(" (XLM-RoBERTa model)"),Rsr=l(),GF=a("li"),q_e=a("strong"),Bsr=o("xlnet"),Psr=o(" \u2014 "),IV=a("a"),$sr=o("TFXLNetLMHeadModel"),Isr=o(" (XLNet model)"),qsr=l(),N_e=a("p"),Nsr=o("Examples:"),jsr=l(),f(vA.$$.fragment),RBe=l(),vc=a("h2"),OF=a("a"),j_e=a("span"),f(FA.$$.fragment),Dsr=l(),D_e=a("span"),Gsr=o("TFAutoModelForCausalLM"),BBe=l(),Tr=a("div"),f(TA.$$.fragment),Osr=l(),Fc=a("p"),Vsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=a("a"),Xsr=o("from_pretrained()"),zsr=o(" class method or the "),NV=a("a"),Qsr=o("from_config()"),Wsr=o(` class
method.`),Hsr=l(),MA=a("p"),Usr=o("This class cannot be instantiated directly using "),G_e=a("code"),Jsr=o("__init__()"),Ysr=o(" (throws an error)."),Ksr=l(),pt=a("div"),f(EA.$$.fragment),Zsr=l(),O_e=a("p"),elr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),olr=l(),Tc=a("p"),rlr=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),tlr=o("not"),alr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),nlr=o("from_pretrained()"),slr=o(" to load the model weights."),llr=l(),X_e=a("p"),ilr=o("Examples:"),dlr=l(),f(CA.$$.fragment),clr=l(),_o=a("div"),f(wA.$$.fragment),flr=l(),z_e=a("p"),mlr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),glr=l(),vn=a("p"),hlr=o("The model class to instantiate is selected based on the "),Q_e=a("code"),plr=o("model_type"),_lr=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),ulr=o("pretrained_model_name_or_path"),blr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=a("code"),vlr=o("pretrained_model_name_or_path"),Flr=o(":"),Tlr=l(),fe=a("ul"),VF=a("li"),U_e=a("strong"),Mlr=o("bert"),Elr=o(" \u2014 "),DV=a("a"),Clr=o("TFBertLMHeadModel"),wlr=o(" (BERT model)"),Alr=l(),XF=a("li"),J_e=a("strong"),ylr=o("camembert"),Llr=o(" \u2014 "),GV=a("a"),xlr=o("TFCamembertForCausalLM"),klr=o(" (CamemBERT model)"),Slr=l(),zF=a("li"),Y_e=a("strong"),Rlr=o("ctrl"),Blr=o(" \u2014 "),OV=a("a"),Plr=o("TFCTRLLMHeadModel"),$lr=o(" (CTRL model)"),Ilr=l(),QF=a("li"),K_e=a("strong"),qlr=o("gpt2"),Nlr=o(" \u2014 "),VV=a("a"),jlr=o("TFGPT2LMHeadModel"),Dlr=o(" (OpenAI GPT-2 model)"),Glr=l(),WF=a("li"),Z_e=a("strong"),Olr=o("gptj"),Vlr=o(" \u2014 "),XV=a("a"),Xlr=o("TFGPTJForCausalLM"),zlr=o(" (GPT-J model)"),Qlr=l(),HF=a("li"),eue=a("strong"),Wlr=o("openai-gpt"),Hlr=o(" \u2014 "),zV=a("a"),Ulr=o("TFOpenAIGPTLMHeadModel"),Jlr=o(" (OpenAI GPT model)"),Ylr=l(),UF=a("li"),oue=a("strong"),Klr=o("rembert"),Zlr=o(" \u2014 "),QV=a("a"),eir=o("TFRemBertForCausalLM"),oir=o(" (RemBERT model)"),rir=l(),JF=a("li"),rue=a("strong"),tir=o("roberta"),air=o(" \u2014 "),WV=a("a"),nir=o("TFRobertaForCausalLM"),sir=o(" (RoBERTa model)"),lir=l(),YF=a("li"),tue=a("strong"),iir=o("roformer"),dir=o(" \u2014 "),HV=a("a"),cir=o("TFRoFormerForCausalLM"),fir=o(" (RoFormer model)"),mir=l(),KF=a("li"),aue=a("strong"),gir=o("transfo-xl"),hir=o(" \u2014 "),UV=a("a"),pir=o("TFTransfoXLLMHeadModel"),_ir=o(" (Transformer-XL model)"),uir=l(),ZF=a("li"),nue=a("strong"),bir=o("xlm"),vir=o(" \u2014 "),JV=a("a"),Fir=o("TFXLMWithLMHeadModel"),Tir=o(" (XLM model)"),Mir=l(),eT=a("li"),sue=a("strong"),Eir=o("xlnet"),Cir=o(" \u2014 "),YV=a("a"),wir=o("TFXLNetLMHeadModel"),Air=o(" (XLNet model)"),yir=l(),lue=a("p"),Lir=o("Examples:"),xir=l(),f(AA.$$.fragment),PBe=l(),Mc=a("h2"),oT=a("a"),iue=a("span"),f(yA.$$.fragment),kir=l(),due=a("span"),Sir=o("TFAutoModelForImageClassification"),$Be=l(),Mr=a("div"),f(LA.$$.fragment),Rir=l(),Ec=a("p"),Bir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KV=a("a"),Pir=o("from_pretrained()"),$ir=o(" class method or the "),ZV=a("a"),Iir=o("from_config()"),qir=o(` class
method.`),Nir=l(),xA=a("p"),jir=o("This class cannot be instantiated directly using "),cue=a("code"),Dir=o("__init__()"),Gir=o(" (throws an error)."),Oir=l(),_t=a("div"),f(kA.$$.fragment),Vir=l(),fue=a("p"),Xir=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zir=l(),Cc=a("p"),Qir=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),Wir=o("not"),Hir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),Uir=o("from_pretrained()"),Jir=o(" to load the model weights."),Yir=l(),gue=a("p"),Kir=o("Examples:"),Zir=l(),f(SA.$$.fragment),edr=l(),uo=a("div"),f(RA.$$.fragment),odr=l(),hue=a("p"),rdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),tdr=l(),Fn=a("p"),adr=o("The model class to instantiate is selected based on the "),pue=a("code"),ndr=o("model_type"),sdr=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),ldr=o("pretrained_model_name_or_path"),idr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ddr=o("pretrained_model_name_or_path"),cdr=o(":"),fdr=l(),BA=a("ul"),rT=a("li"),bue=a("strong"),mdr=o("convnext"),gdr=o(" \u2014 "),oX=a("a"),hdr=o("TFConvNextForImageClassification"),pdr=o(" (ConvNext model)"),_dr=l(),tT=a("li"),vue=a("strong"),udr=o("vit"),bdr=o(" \u2014 "),rX=a("a"),vdr=o("TFViTForImageClassification"),Fdr=o(" (ViT model)"),Tdr=l(),Fue=a("p"),Mdr=o("Examples:"),Edr=l(),f(PA.$$.fragment),IBe=l(),wc=a("h2"),aT=a("a"),Tue=a("span"),f($A.$$.fragment),Cdr=l(),Mue=a("span"),wdr=o("TFAutoModelForMaskedLM"),qBe=l(),Er=a("div"),f(IA.$$.fragment),Adr=l(),Ac=a("p"),ydr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tX=a("a"),Ldr=o("from_pretrained()"),xdr=o(" class method or the "),aX=a("a"),kdr=o("from_config()"),Sdr=o(` class
method.`),Rdr=l(),qA=a("p"),Bdr=o("This class cannot be instantiated directly using "),Eue=a("code"),Pdr=o("__init__()"),$dr=o(" (throws an error)."),Idr=l(),ut=a("div"),f(NA.$$.fragment),qdr=l(),Cue=a("p"),Ndr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),jdr=l(),yc=a("p"),Ddr=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),Gdr=o("not"),Odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=a("a"),Vdr=o("from_pretrained()"),Xdr=o(" to load the model weights."),zdr=l(),Aue=a("p"),Qdr=o("Examples:"),Wdr=l(),f(jA.$$.fragment),Hdr=l(),bo=a("div"),f(DA.$$.fragment),Udr=l(),yue=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ydr=l(),Tn=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Lue=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),xue=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),J=a("ul"),nT=a("li"),Sue=a("strong"),scr=o("albert"),lcr=o(" \u2014 "),sX=a("a"),icr=o("TFAlbertForMaskedLM"),dcr=o(" (ALBERT model)"),ccr=l(),sT=a("li"),Rue=a("strong"),fcr=o("bert"),mcr=o(" \u2014 "),lX=a("a"),gcr=o("TFBertForMaskedLM"),hcr=o(" (BERT model)"),pcr=l(),lT=a("li"),Bue=a("strong"),_cr=o("camembert"),ucr=o(" \u2014 "),iX=a("a"),bcr=o("TFCamembertForMaskedLM"),vcr=o(" (CamemBERT model)"),Fcr=l(),iT=a("li"),Pue=a("strong"),Tcr=o("convbert"),Mcr=o(" \u2014 "),dX=a("a"),Ecr=o("TFConvBertForMaskedLM"),Ccr=o(" (ConvBERT model)"),wcr=l(),dT=a("li"),$ue=a("strong"),Acr=o("deberta"),ycr=o(" \u2014 "),cX=a("a"),Lcr=o("TFDebertaForMaskedLM"),xcr=o(" (DeBERTa model)"),kcr=l(),cT=a("li"),Iue=a("strong"),Scr=o("deberta-v2"),Rcr=o(" \u2014 "),fX=a("a"),Bcr=o("TFDebertaV2ForMaskedLM"),Pcr=o(" (DeBERTa-v2 model)"),$cr=l(),fT=a("li"),que=a("strong"),Icr=o("distilbert"),qcr=o(" \u2014 "),mX=a("a"),Ncr=o("TFDistilBertForMaskedLM"),jcr=o(" (DistilBERT model)"),Dcr=l(),mT=a("li"),Nue=a("strong"),Gcr=o("electra"),Ocr=o(" \u2014 "),gX=a("a"),Vcr=o("TFElectraForMaskedLM"),Xcr=o(" (ELECTRA model)"),zcr=l(),gT=a("li"),jue=a("strong"),Qcr=o("flaubert"),Wcr=o(" \u2014 "),hX=a("a"),Hcr=o("TFFlaubertWithLMHeadModel"),Ucr=o(" (FlauBERT model)"),Jcr=l(),hT=a("li"),Due=a("strong"),Ycr=o("funnel"),Kcr=o(" \u2014 "),pX=a("a"),Zcr=o("TFFunnelForMaskedLM"),efr=o(" (Funnel Transformer model)"),ofr=l(),pT=a("li"),Gue=a("strong"),rfr=o("layoutlm"),tfr=o(" \u2014 "),_X=a("a"),afr=o("TFLayoutLMForMaskedLM"),nfr=o(" (LayoutLM model)"),sfr=l(),_T=a("li"),Oue=a("strong"),lfr=o("longformer"),ifr=o(" \u2014 "),uX=a("a"),dfr=o("TFLongformerForMaskedLM"),cfr=o(" (Longformer model)"),ffr=l(),uT=a("li"),Vue=a("strong"),mfr=o("mobilebert"),gfr=o(" \u2014 "),bX=a("a"),hfr=o("TFMobileBertForMaskedLM"),pfr=o(" (MobileBERT model)"),_fr=l(),bT=a("li"),Xue=a("strong"),ufr=o("mpnet"),bfr=o(" \u2014 "),vX=a("a"),vfr=o("TFMPNetForMaskedLM"),Ffr=o(" (MPNet model)"),Tfr=l(),vT=a("li"),zue=a("strong"),Mfr=o("rembert"),Efr=o(" \u2014 "),FX=a("a"),Cfr=o("TFRemBertForMaskedLM"),wfr=o(" (RemBERT model)"),Afr=l(),FT=a("li"),Que=a("strong"),yfr=o("roberta"),Lfr=o(" \u2014 "),TX=a("a"),xfr=o("TFRobertaForMaskedLM"),kfr=o(" (RoBERTa model)"),Sfr=l(),TT=a("li"),Wue=a("strong"),Rfr=o("roformer"),Bfr=o(" \u2014 "),MX=a("a"),Pfr=o("TFRoFormerForMaskedLM"),$fr=o(" (RoFormer model)"),Ifr=l(),MT=a("li"),Hue=a("strong"),qfr=o("tapas"),Nfr=o(" \u2014 "),EX=a("a"),jfr=o("TFTapasForMaskedLM"),Dfr=o(" (TAPAS model)"),Gfr=l(),ET=a("li"),Uue=a("strong"),Ofr=o("xlm"),Vfr=o(" \u2014 "),CX=a("a"),Xfr=o("TFXLMWithLMHeadModel"),zfr=o(" (XLM model)"),Qfr=l(),CT=a("li"),Jue=a("strong"),Wfr=o("xlm-roberta"),Hfr=o(" \u2014 "),wX=a("a"),Ufr=o("TFXLMRobertaForMaskedLM"),Jfr=o(" (XLM-RoBERTa model)"),Yfr=l(),Yue=a("p"),Kfr=o("Examples:"),Zfr=l(),f(GA.$$.fragment),NBe=l(),Lc=a("h2"),wT=a("a"),Kue=a("span"),f(OA.$$.fragment),emr=l(),Zue=a("span"),omr=o("TFAutoModelForSeq2SeqLM"),jBe=l(),Cr=a("div"),f(VA.$$.fragment),rmr=l(),xc=a("p"),tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AX=a("a"),amr=o("from_pretrained()"),nmr=o(" class method or the "),yX=a("a"),smr=o("from_config()"),lmr=o(` class
method.`),imr=l(),XA=a("p"),dmr=o("This class cannot be instantiated directly using "),e1e=a("code"),cmr=o("__init__()"),fmr=o(" (throws an error)."),mmr=l(),bt=a("div"),f(zA.$$.fragment),gmr=l(),o1e=a("p"),hmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pmr=l(),kc=a("p"),_mr=o(`Note:
Loading a model from its configuration file does `),r1e=a("strong"),umr=o("not"),bmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),vmr=o("from_pretrained()"),Fmr=o(" to load the model weights."),Tmr=l(),t1e=a("p"),Mmr=o("Examples:"),Emr=l(),f(QA.$$.fragment),Cmr=l(),vo=a("div"),f(WA.$$.fragment),wmr=l(),a1e=a("p"),Amr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ymr=l(),Mn=a("p"),Lmr=o("The model class to instantiate is selected based on the "),n1e=a("code"),xmr=o("model_type"),kmr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),Smr=o("pretrained_model_name_or_path"),Rmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),Bmr=o("pretrained_model_name_or_path"),Pmr=o(":"),$mr=l(),be=a("ul"),AT=a("li"),i1e=a("strong"),Imr=o("bart"),qmr=o(" \u2014 "),xX=a("a"),Nmr=o("TFBartForConditionalGeneration"),jmr=o(" (BART model)"),Dmr=l(),yT=a("li"),d1e=a("strong"),Gmr=o("blenderbot"),Omr=o(" \u2014 "),kX=a("a"),Vmr=o("TFBlenderbotForConditionalGeneration"),Xmr=o(" (Blenderbot model)"),zmr=l(),LT=a("li"),c1e=a("strong"),Qmr=o("blenderbot-small"),Wmr=o(" \u2014 "),SX=a("a"),Hmr=o("TFBlenderbotSmallForConditionalGeneration"),Umr=o(" (BlenderbotSmall model)"),Jmr=l(),xT=a("li"),f1e=a("strong"),Ymr=o("encoder-decoder"),Kmr=o(" \u2014 "),RX=a("a"),Zmr=o("TFEncoderDecoderModel"),egr=o(" (Encoder decoder model)"),ogr=l(),kT=a("li"),m1e=a("strong"),rgr=o("led"),tgr=o(" \u2014 "),BX=a("a"),agr=o("TFLEDForConditionalGeneration"),ngr=o(" (LED model)"),sgr=l(),ST=a("li"),g1e=a("strong"),lgr=o("marian"),igr=o(" \u2014 "),PX=a("a"),dgr=o("TFMarianMTModel"),cgr=o(" (Marian model)"),fgr=l(),RT=a("li"),h1e=a("strong"),mgr=o("mbart"),ggr=o(" \u2014 "),$X=a("a"),hgr=o("TFMBartForConditionalGeneration"),pgr=o(" (mBART model)"),_gr=l(),BT=a("li"),p1e=a("strong"),ugr=o("mt5"),bgr=o(" \u2014 "),IX=a("a"),vgr=o("TFMT5ForConditionalGeneration"),Fgr=o(" (mT5 model)"),Tgr=l(),PT=a("li"),_1e=a("strong"),Mgr=o("pegasus"),Egr=o(" \u2014 "),qX=a("a"),Cgr=o("TFPegasusForConditionalGeneration"),wgr=o(" (Pegasus model)"),Agr=l(),$T=a("li"),u1e=a("strong"),ygr=o("t5"),Lgr=o(" \u2014 "),NX=a("a"),xgr=o("TFT5ForConditionalGeneration"),kgr=o(" (T5 model)"),Sgr=l(),b1e=a("p"),Rgr=o("Examples:"),Bgr=l(),f(HA.$$.fragment),DBe=l(),Sc=a("h2"),IT=a("a"),v1e=a("span"),f(UA.$$.fragment),Pgr=l(),F1e=a("span"),$gr=o("TFAutoModelForSequenceClassification"),GBe=l(),wr=a("div"),f(JA.$$.fragment),Igr=l(),Rc=a("p"),qgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jX=a("a"),Ngr=o("from_pretrained()"),jgr=o(" class method or the "),DX=a("a"),Dgr=o("from_config()"),Ggr=o(` class
method.`),Ogr=l(),YA=a("p"),Vgr=o("This class cannot be instantiated directly using "),T1e=a("code"),Xgr=o("__init__()"),zgr=o(" (throws an error)."),Qgr=l(),vt=a("div"),f(KA.$$.fragment),Wgr=l(),M1e=a("p"),Hgr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ugr=l(),Bc=a("p"),Jgr=o(`Note:
Loading a model from its configuration file does `),E1e=a("strong"),Ygr=o("not"),Kgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),Zgr=o("from_pretrained()"),ehr=o(" to load the model weights."),ohr=l(),C1e=a("p"),rhr=o("Examples:"),thr=l(),f(ZA.$$.fragment),ahr=l(),Fo=a("div"),f(e0.$$.fragment),nhr=l(),w1e=a("p"),shr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lhr=l(),En=a("p"),ihr=o("The model class to instantiate is selected based on the "),A1e=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),phr=l(),V=a("ul"),qT=a("li"),x1e=a("strong"),_hr=o("albert"),uhr=o(" \u2014 "),OX=a("a"),bhr=o("TFAlbertForSequenceClassification"),vhr=o(" (ALBERT model)"),Fhr=l(),NT=a("li"),k1e=a("strong"),Thr=o("bert"),Mhr=o(" \u2014 "),VX=a("a"),Ehr=o("TFBertForSequenceClassification"),Chr=o(" (BERT model)"),whr=l(),jT=a("li"),S1e=a("strong"),Ahr=o("camembert"),yhr=o(" \u2014 "),XX=a("a"),Lhr=o("TFCamembertForSequenceClassification"),xhr=o(" (CamemBERT model)"),khr=l(),DT=a("li"),R1e=a("strong"),Shr=o("convbert"),Rhr=o(" \u2014 "),zX=a("a"),Bhr=o("TFConvBertForSequenceClassification"),Phr=o(" (ConvBERT model)"),$hr=l(),GT=a("li"),B1e=a("strong"),Ihr=o("ctrl"),qhr=o(" \u2014 "),QX=a("a"),Nhr=o("TFCTRLForSequenceClassification"),jhr=o(" (CTRL model)"),Dhr=l(),OT=a("li"),P1e=a("strong"),Ghr=o("deberta"),Ohr=o(" \u2014 "),WX=a("a"),Vhr=o("TFDebertaForSequenceClassification"),Xhr=o(" (DeBERTa model)"),zhr=l(),VT=a("li"),$1e=a("strong"),Qhr=o("deberta-v2"),Whr=o(" \u2014 "),HX=a("a"),Hhr=o("TFDebertaV2ForSequenceClassification"),Uhr=o(" (DeBERTa-v2 model)"),Jhr=l(),XT=a("li"),I1e=a("strong"),Yhr=o("distilbert"),Khr=o(" \u2014 "),UX=a("a"),Zhr=o("TFDistilBertForSequenceClassification"),epr=o(" (DistilBERT model)"),opr=l(),zT=a("li"),q1e=a("strong"),rpr=o("electra"),tpr=o(" \u2014 "),JX=a("a"),apr=o("TFElectraForSequenceClassification"),npr=o(" (ELECTRA model)"),spr=l(),QT=a("li"),N1e=a("strong"),lpr=o("flaubert"),ipr=o(" \u2014 "),YX=a("a"),dpr=o("TFFlaubertForSequenceClassification"),cpr=o(" (FlauBERT model)"),fpr=l(),WT=a("li"),j1e=a("strong"),mpr=o("funnel"),gpr=o(" \u2014 "),KX=a("a"),hpr=o("TFFunnelForSequenceClassification"),ppr=o(" (Funnel Transformer model)"),_pr=l(),HT=a("li"),D1e=a("strong"),upr=o("gpt2"),bpr=o(" \u2014 "),ZX=a("a"),vpr=o("TFGPT2ForSequenceClassification"),Fpr=o(" (OpenAI GPT-2 model)"),Tpr=l(),UT=a("li"),G1e=a("strong"),Mpr=o("gptj"),Epr=o(" \u2014 "),ez=a("a"),Cpr=o("TFGPTJForSequenceClassification"),wpr=o(" (GPT-J model)"),Apr=l(),JT=a("li"),O1e=a("strong"),ypr=o("layoutlm"),Lpr=o(" \u2014 "),oz=a("a"),xpr=o("TFLayoutLMForSequenceClassification"),kpr=o(" (LayoutLM model)"),Spr=l(),YT=a("li"),V1e=a("strong"),Rpr=o("longformer"),Bpr=o(" \u2014 "),rz=a("a"),Ppr=o("TFLongformerForSequenceClassification"),$pr=o(" (Longformer model)"),Ipr=l(),KT=a("li"),X1e=a("strong"),qpr=o("mobilebert"),Npr=o(" \u2014 "),tz=a("a"),jpr=o("TFMobileBertForSequenceClassification"),Dpr=o(" (MobileBERT model)"),Gpr=l(),ZT=a("li"),z1e=a("strong"),Opr=o("mpnet"),Vpr=o(" \u2014 "),az=a("a"),Xpr=o("TFMPNetForSequenceClassification"),zpr=o(" (MPNet model)"),Qpr=l(),e8=a("li"),Q1e=a("strong"),Wpr=o("openai-gpt"),Hpr=o(" \u2014 "),nz=a("a"),Upr=o("TFOpenAIGPTForSequenceClassification"),Jpr=o(" (OpenAI GPT model)"),Ypr=l(),o8=a("li"),W1e=a("strong"),Kpr=o("rembert"),Zpr=o(" \u2014 "),sz=a("a"),e_r=o("TFRemBertForSequenceClassification"),o_r=o(" (RemBERT model)"),r_r=l(),r8=a("li"),H1e=a("strong"),t_r=o("roberta"),a_r=o(" \u2014 "),lz=a("a"),n_r=o("TFRobertaForSequenceClassification"),s_r=o(" (RoBERTa model)"),l_r=l(),t8=a("li"),U1e=a("strong"),i_r=o("roformer"),d_r=o(" \u2014 "),iz=a("a"),c_r=o("TFRoFormerForSequenceClassification"),f_r=o(" (RoFormer model)"),m_r=l(),a8=a("li"),J1e=a("strong"),g_r=o("tapas"),h_r=o(" \u2014 "),dz=a("a"),p_r=o("TFTapasForSequenceClassification"),__r=o(" (TAPAS model)"),u_r=l(),n8=a("li"),Y1e=a("strong"),b_r=o("transfo-xl"),v_r=o(" \u2014 "),cz=a("a"),F_r=o("TFTransfoXLForSequenceClassification"),T_r=o(" (Transformer-XL model)"),M_r=l(),s8=a("li"),K1e=a("strong"),E_r=o("xlm"),C_r=o(" \u2014 "),fz=a("a"),w_r=o("TFXLMForSequenceClassification"),A_r=o(" (XLM model)"),y_r=l(),l8=a("li"),Z1e=a("strong"),L_r=o("xlm-roberta"),x_r=o(" \u2014 "),mz=a("a"),k_r=o("TFXLMRobertaForSequenceClassification"),S_r=o(" (XLM-RoBERTa model)"),R_r=l(),i8=a("li"),ebe=a("strong"),B_r=o("xlnet"),P_r=o(" \u2014 "),gz=a("a"),$_r=o("TFXLNetForSequenceClassification"),I_r=o(" (XLNet model)"),q_r=l(),obe=a("p"),N_r=o("Examples:"),j_r=l(),f(o0.$$.fragment),OBe=l(),Pc=a("h2"),d8=a("a"),rbe=a("span"),f(r0.$$.fragment),D_r=l(),tbe=a("span"),G_r=o("TFAutoModelForMultipleChoice"),VBe=l(),Ar=a("div"),f(t0.$$.fragment),O_r=l(),$c=a("p"),V_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=a("a"),X_r=o("from_pretrained()"),z_r=o(" class method or the "),pz=a("a"),Q_r=o("from_config()"),W_r=o(` class
method.`),H_r=l(),a0=a("p"),U_r=o("This class cannot be instantiated directly using "),abe=a("code"),J_r=o("__init__()"),Y_r=o(" (throws an error)."),K_r=l(),Ft=a("div"),f(n0.$$.fragment),Z_r=l(),nbe=a("p"),eur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),our=l(),Ic=a("p"),rur=o(`Note:
Loading a model from its configuration file does `),sbe=a("strong"),tur=o("not"),aur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),nur=o("from_pretrained()"),sur=o(" to load the model weights."),lur=l(),lbe=a("p"),iur=o("Examples:"),dur=l(),f(s0.$$.fragment),cur=l(),To=a("div"),f(l0.$$.fragment),fur=l(),ibe=a("p"),mur=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gur=l(),Cn=a("p"),hur=o("The model class to instantiate is selected based on the "),dbe=a("code"),pur=o("model_type"),_ur=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),uur=o("pretrained_model_name_or_path"),bur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),vur=o("pretrained_model_name_or_path"),Fur=o(":"),Tur=l(),se=a("ul"),c8=a("li"),mbe=a("strong"),Mur=o("albert"),Eur=o(" \u2014 "),uz=a("a"),Cur=o("TFAlbertForMultipleChoice"),wur=o(" (ALBERT model)"),Aur=l(),f8=a("li"),gbe=a("strong"),yur=o("bert"),Lur=o(" \u2014 "),bz=a("a"),xur=o("TFBertForMultipleChoice"),kur=o(" (BERT model)"),Sur=l(),m8=a("li"),hbe=a("strong"),Rur=o("camembert"),Bur=o(" \u2014 "),vz=a("a"),Pur=o("TFCamembertForMultipleChoice"),$ur=o(" (CamemBERT model)"),Iur=l(),g8=a("li"),pbe=a("strong"),qur=o("convbert"),Nur=o(" \u2014 "),Fz=a("a"),jur=o("TFConvBertForMultipleChoice"),Dur=o(" (ConvBERT model)"),Gur=l(),h8=a("li"),_be=a("strong"),Our=o("distilbert"),Vur=o(" \u2014 "),Tz=a("a"),Xur=o("TFDistilBertForMultipleChoice"),zur=o(" (DistilBERT model)"),Qur=l(),p8=a("li"),ube=a("strong"),Wur=o("electra"),Hur=o(" \u2014 "),Mz=a("a"),Uur=o("TFElectraForMultipleChoice"),Jur=o(" (ELECTRA model)"),Yur=l(),_8=a("li"),bbe=a("strong"),Kur=o("flaubert"),Zur=o(" \u2014 "),Ez=a("a"),e1r=o("TFFlaubertForMultipleChoice"),o1r=o(" (FlauBERT model)"),r1r=l(),u8=a("li"),vbe=a("strong"),t1r=o("funnel"),a1r=o(" \u2014 "),Cz=a("a"),n1r=o("TFFunnelForMultipleChoice"),s1r=o(" (Funnel Transformer model)"),l1r=l(),b8=a("li"),Fbe=a("strong"),i1r=o("longformer"),d1r=o(" \u2014 "),wz=a("a"),c1r=o("TFLongformerForMultipleChoice"),f1r=o(" (Longformer model)"),m1r=l(),v8=a("li"),Tbe=a("strong"),g1r=o("mobilebert"),h1r=o(" \u2014 "),Az=a("a"),p1r=o("TFMobileBertForMultipleChoice"),_1r=o(" (MobileBERT model)"),u1r=l(),F8=a("li"),Mbe=a("strong"),b1r=o("mpnet"),v1r=o(" \u2014 "),yz=a("a"),F1r=o("TFMPNetForMultipleChoice"),T1r=o(" (MPNet model)"),M1r=l(),T8=a("li"),Ebe=a("strong"),E1r=o("rembert"),C1r=o(" \u2014 "),Lz=a("a"),w1r=o("TFRemBertForMultipleChoice"),A1r=o(" (RemBERT model)"),y1r=l(),M8=a("li"),Cbe=a("strong"),L1r=o("roberta"),x1r=o(" \u2014 "),xz=a("a"),k1r=o("TFRobertaForMultipleChoice"),S1r=o(" (RoBERTa model)"),R1r=l(),E8=a("li"),wbe=a("strong"),B1r=o("roformer"),P1r=o(" \u2014 "),kz=a("a"),$1r=o("TFRoFormerForMultipleChoice"),I1r=o(" (RoFormer model)"),q1r=l(),C8=a("li"),Abe=a("strong"),N1r=o("xlm"),j1r=o(" \u2014 "),Sz=a("a"),D1r=o("TFXLMForMultipleChoice"),G1r=o(" (XLM model)"),O1r=l(),w8=a("li"),ybe=a("strong"),V1r=o("xlm-roberta"),X1r=o(" \u2014 "),Rz=a("a"),z1r=o("TFXLMRobertaForMultipleChoice"),Q1r=o(" (XLM-RoBERTa model)"),W1r=l(),A8=a("li"),Lbe=a("strong"),H1r=o("xlnet"),U1r=o(" \u2014 "),Bz=a("a"),J1r=o("TFXLNetForMultipleChoice"),Y1r=o(" (XLNet model)"),K1r=l(),xbe=a("p"),Z1r=o("Examples:"),ebr=l(),f(i0.$$.fragment),XBe=l(),qc=a("h2"),y8=a("a"),kbe=a("span"),f(d0.$$.fragment),obr=l(),Sbe=a("span"),rbr=o("TFAutoModelForTableQuestionAnswering"),zBe=l(),yr=a("div"),f(c0.$$.fragment),tbr=l(),Nc=a("p"),abr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Pz=a("a"),nbr=o("from_pretrained()"),sbr=o(" class method or the "),$z=a("a"),lbr=o("from_config()"),ibr=o(` class
method.`),dbr=l(),f0=a("p"),cbr=o("This class cannot be instantiated directly using "),Rbe=a("code"),fbr=o("__init__()"),mbr=o(" (throws an error)."),gbr=l(),Tt=a("div"),f(m0.$$.fragment),hbr=l(),Bbe=a("p"),pbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_br=l(),jc=a("p"),ubr=o(`Note:
Loading a model from its configuration file does `),Pbe=a("strong"),bbr=o("not"),vbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),Fbr=o("from_pretrained()"),Tbr=o(" to load the model weights."),Mbr=l(),$be=a("p"),Ebr=o("Examples:"),Cbr=l(),f(g0.$$.fragment),wbr=l(),Mo=a("div"),f(h0.$$.fragment),Abr=l(),Ibe=a("p"),ybr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lbr=l(),wn=a("p"),xbr=o("The model class to instantiate is selected based on the "),qbe=a("code"),kbr=o("model_type"),Sbr=o(` property of the config object (either
passed as an argument or loaded from `),Nbe=a("code"),Rbr=o("pretrained_model_name_or_path"),Bbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),Pbr=o("pretrained_model_name_or_path"),$br=o(":"),Ibr=l(),Dbe=a("ul"),L8=a("li"),Gbe=a("strong"),qbr=o("tapas"),Nbr=o(" \u2014 "),qz=a("a"),jbr=o("TFTapasForQuestionAnswering"),Dbr=o(" (TAPAS model)"),Gbr=l(),Obe=a("p"),Obr=o("Examples:"),Vbr=l(),f(p0.$$.fragment),QBe=l(),Dc=a("h2"),x8=a("a"),Vbe=a("span"),f(_0.$$.fragment),Xbr=l(),Xbe=a("span"),zbr=o("TFAutoModelForTokenClassification"),WBe=l(),Lr=a("div"),f(u0.$$.fragment),Qbr=l(),Gc=a("p"),Wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Nz=a("a"),Hbr=o("from_pretrained()"),Ubr=o(" class method or the "),jz=a("a"),Jbr=o("from_config()"),Ybr=o(` class
method.`),Kbr=l(),b0=a("p"),Zbr=o("This class cannot be instantiated directly using "),zbe=a("code"),e2r=o("__init__()"),o2r=o(" (throws an error)."),r2r=l(),Mt=a("div"),f(v0.$$.fragment),t2r=l(),Qbe=a("p"),a2r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),n2r=l(),Oc=a("p"),s2r=o(`Note:
Loading a model from its configuration file does `),Wbe=a("strong"),l2r=o("not"),i2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),d2r=o("from_pretrained()"),c2r=o(" to load the model weights."),f2r=l(),Hbe=a("p"),m2r=o("Examples:"),g2r=l(),f(F0.$$.fragment),h2r=l(),Eo=a("div"),f(T0.$$.fragment),p2r=l(),Ube=a("p"),_2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),u2r=l(),An=a("p"),b2r=o("The model class to instantiate is selected based on the "),Jbe=a("code"),v2r=o("model_type"),F2r=o(` property of the config object (either
passed as an argument or loaded from `),Ybe=a("code"),T2r=o("pretrained_model_name_or_path"),M2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=a("code"),E2r=o("pretrained_model_name_or_path"),C2r=o(":"),w2r=l(),Y=a("ul"),k8=a("li"),Zbe=a("strong"),A2r=o("albert"),y2r=o(" \u2014 "),Gz=a("a"),L2r=o("TFAlbertForTokenClassification"),x2r=o(" (ALBERT model)"),k2r=l(),S8=a("li"),e2e=a("strong"),S2r=o("bert"),R2r=o(" \u2014 "),Oz=a("a"),B2r=o("TFBertForTokenClassification"),P2r=o(" (BERT model)"),$2r=l(),R8=a("li"),o2e=a("strong"),I2r=o("camembert"),q2r=o(" \u2014 "),Vz=a("a"),N2r=o("TFCamembertForTokenClassification"),j2r=o(" (CamemBERT model)"),D2r=l(),B8=a("li"),r2e=a("strong"),G2r=o("convbert"),O2r=o(" \u2014 "),Xz=a("a"),V2r=o("TFConvBertForTokenClassification"),X2r=o(" (ConvBERT model)"),z2r=l(),P8=a("li"),t2e=a("strong"),Q2r=o("deberta"),W2r=o(" \u2014 "),zz=a("a"),H2r=o("TFDebertaForTokenClassification"),U2r=o(" (DeBERTa model)"),J2r=l(),$8=a("li"),a2e=a("strong"),Y2r=o("deberta-v2"),K2r=o(" \u2014 "),Qz=a("a"),Z2r=o("TFDebertaV2ForTokenClassification"),e3r=o(" (DeBERTa-v2 model)"),o3r=l(),I8=a("li"),n2e=a("strong"),r3r=o("distilbert"),t3r=o(" \u2014 "),Wz=a("a"),a3r=o("TFDistilBertForTokenClassification"),n3r=o(" (DistilBERT model)"),s3r=l(),q8=a("li"),s2e=a("strong"),l3r=o("electra"),i3r=o(" \u2014 "),Hz=a("a"),d3r=o("TFElectraForTokenClassification"),c3r=o(" (ELECTRA model)"),f3r=l(),N8=a("li"),l2e=a("strong"),m3r=o("flaubert"),g3r=o(" \u2014 "),Uz=a("a"),h3r=o("TFFlaubertForTokenClassification"),p3r=o(" (FlauBERT model)"),_3r=l(),j8=a("li"),i2e=a("strong"),u3r=o("funnel"),b3r=o(" \u2014 "),Jz=a("a"),v3r=o("TFFunnelForTokenClassification"),F3r=o(" (Funnel Transformer model)"),T3r=l(),D8=a("li"),d2e=a("strong"),M3r=o("layoutlm"),E3r=o(" \u2014 "),Yz=a("a"),C3r=o("TFLayoutLMForTokenClassification"),w3r=o(" (LayoutLM model)"),A3r=l(),G8=a("li"),c2e=a("strong"),y3r=o("longformer"),L3r=o(" \u2014 "),Kz=a("a"),x3r=o("TFLongformerForTokenClassification"),k3r=o(" (Longformer model)"),S3r=l(),O8=a("li"),f2e=a("strong"),R3r=o("mobilebert"),B3r=o(" \u2014 "),Zz=a("a"),P3r=o("TFMobileBertForTokenClassification"),$3r=o(" (MobileBERT model)"),I3r=l(),V8=a("li"),m2e=a("strong"),q3r=o("mpnet"),N3r=o(" \u2014 "),eQ=a("a"),j3r=o("TFMPNetForTokenClassification"),D3r=o(" (MPNet model)"),G3r=l(),X8=a("li"),g2e=a("strong"),O3r=o("rembert"),V3r=o(" \u2014 "),oQ=a("a"),X3r=o("TFRemBertForTokenClassification"),z3r=o(" (RemBERT model)"),Q3r=l(),z8=a("li"),h2e=a("strong"),W3r=o("roberta"),H3r=o(" \u2014 "),rQ=a("a"),U3r=o("TFRobertaForTokenClassification"),J3r=o(" (RoBERTa model)"),Y3r=l(),Q8=a("li"),p2e=a("strong"),K3r=o("roformer"),Z3r=o(" \u2014 "),tQ=a("a"),e6r=o("TFRoFormerForTokenClassification"),o6r=o(" (RoFormer model)"),r6r=l(),W8=a("li"),_2e=a("strong"),t6r=o("xlm"),a6r=o(" \u2014 "),aQ=a("a"),n6r=o("TFXLMForTokenClassification"),s6r=o(" (XLM model)"),l6r=l(),H8=a("li"),u2e=a("strong"),i6r=o("xlm-roberta"),d6r=o(" \u2014 "),nQ=a("a"),c6r=o("TFXLMRobertaForTokenClassification"),f6r=o(" (XLM-RoBERTa model)"),m6r=l(),U8=a("li"),b2e=a("strong"),g6r=o("xlnet"),h6r=o(" \u2014 "),sQ=a("a"),p6r=o("TFXLNetForTokenClassification"),_6r=o(" (XLNet model)"),u6r=l(),v2e=a("p"),b6r=o("Examples:"),v6r=l(),f(M0.$$.fragment),HBe=l(),Vc=a("h2"),J8=a("a"),F2e=a("span"),f(E0.$$.fragment),F6r=l(),T2e=a("span"),T6r=o("TFAutoModelForQuestionAnswering"),UBe=l(),xr=a("div"),f(C0.$$.fragment),M6r=l(),Xc=a("p"),E6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lQ=a("a"),C6r=o("from_pretrained()"),w6r=o(" class method or the "),iQ=a("a"),A6r=o("from_config()"),y6r=o(` class
method.`),L6r=l(),w0=a("p"),x6r=o("This class cannot be instantiated directly using "),M2e=a("code"),k6r=o("__init__()"),S6r=o(" (throws an error)."),R6r=l(),Et=a("div"),f(A0.$$.fragment),B6r=l(),E2e=a("p"),P6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),$6r=l(),zc=a("p"),I6r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),q6r=o("not"),N6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=a("a"),j6r=o("from_pretrained()"),D6r=o(" to load the model weights."),G6r=l(),w2e=a("p"),O6r=o("Examples:"),V6r=l(),f(y0.$$.fragment),X6r=l(),Co=a("div"),f(L0.$$.fragment),z6r=l(),A2e=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W6r=l(),yn=a("p"),H6r=o("The model class to instantiate is selected based on the "),y2e=a("code"),U6r=o("model_type"),J6r=o(` property of the config object (either
passed as an argument or loaded from `),L2e=a("code"),Y6r=o("pretrained_model_name_or_path"),K6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=a("code"),Z6r=o("pretrained_model_name_or_path"),evr=o(":"),ovr=l(),K=a("ul"),Y8=a("li"),k2e=a("strong"),rvr=o("albert"),tvr=o(" \u2014 "),cQ=a("a"),avr=o("TFAlbertForQuestionAnswering"),nvr=o(" (ALBERT model)"),svr=l(),K8=a("li"),S2e=a("strong"),lvr=o("bert"),ivr=o(" \u2014 "),fQ=a("a"),dvr=o("TFBertForQuestionAnswering"),cvr=o(" (BERT model)"),fvr=l(),Z8=a("li"),R2e=a("strong"),mvr=o("camembert"),gvr=o(" \u2014 "),mQ=a("a"),hvr=o("TFCamembertForQuestionAnswering"),pvr=o(" (CamemBERT model)"),_vr=l(),e9=a("li"),B2e=a("strong"),uvr=o("convbert"),bvr=o(" \u2014 "),gQ=a("a"),vvr=o("TFConvBertForQuestionAnswering"),Fvr=o(" (ConvBERT model)"),Tvr=l(),o9=a("li"),P2e=a("strong"),Mvr=o("deberta"),Evr=o(" \u2014 "),hQ=a("a"),Cvr=o("TFDebertaForQuestionAnswering"),wvr=o(" (DeBERTa model)"),Avr=l(),r9=a("li"),$2e=a("strong"),yvr=o("deberta-v2"),Lvr=o(" \u2014 "),pQ=a("a"),xvr=o("TFDebertaV2ForQuestionAnswering"),kvr=o(" (DeBERTa-v2 model)"),Svr=l(),t9=a("li"),I2e=a("strong"),Rvr=o("distilbert"),Bvr=o(" \u2014 "),_Q=a("a"),Pvr=o("TFDistilBertForQuestionAnswering"),$vr=o(" (DistilBERT model)"),Ivr=l(),a9=a("li"),q2e=a("strong"),qvr=o("electra"),Nvr=o(" \u2014 "),uQ=a("a"),jvr=o("TFElectraForQuestionAnswering"),Dvr=o(" (ELECTRA model)"),Gvr=l(),n9=a("li"),N2e=a("strong"),Ovr=o("flaubert"),Vvr=o(" \u2014 "),bQ=a("a"),Xvr=o("TFFlaubertForQuestionAnsweringSimple"),zvr=o(" (FlauBERT model)"),Qvr=l(),s9=a("li"),j2e=a("strong"),Wvr=o("funnel"),Hvr=o(" \u2014 "),vQ=a("a"),Uvr=o("TFFunnelForQuestionAnswering"),Jvr=o(" (Funnel Transformer model)"),Yvr=l(),l9=a("li"),D2e=a("strong"),Kvr=o("gptj"),Zvr=o(" \u2014 "),FQ=a("a"),eFr=o("TFGPTJForQuestionAnswering"),oFr=o(" (GPT-J model)"),rFr=l(),i9=a("li"),G2e=a("strong"),tFr=o("longformer"),aFr=o(" \u2014 "),TQ=a("a"),nFr=o("TFLongformerForQuestionAnswering"),sFr=o(" (Longformer model)"),lFr=l(),d9=a("li"),O2e=a("strong"),iFr=o("mobilebert"),dFr=o(" \u2014 "),MQ=a("a"),cFr=o("TFMobileBertForQuestionAnswering"),fFr=o(" (MobileBERT model)"),mFr=l(),c9=a("li"),V2e=a("strong"),gFr=o("mpnet"),hFr=o(" \u2014 "),EQ=a("a"),pFr=o("TFMPNetForQuestionAnswering"),_Fr=o(" (MPNet model)"),uFr=l(),f9=a("li"),X2e=a("strong"),bFr=o("rembert"),vFr=o(" \u2014 "),CQ=a("a"),FFr=o("TFRemBertForQuestionAnswering"),TFr=o(" (RemBERT model)"),MFr=l(),m9=a("li"),z2e=a("strong"),EFr=o("roberta"),CFr=o(" \u2014 "),wQ=a("a"),wFr=o("TFRobertaForQuestionAnswering"),AFr=o(" (RoBERTa model)"),yFr=l(),g9=a("li"),Q2e=a("strong"),LFr=o("roformer"),xFr=o(" \u2014 "),AQ=a("a"),kFr=o("TFRoFormerForQuestionAnswering"),SFr=o(" (RoFormer model)"),RFr=l(),h9=a("li"),W2e=a("strong"),BFr=o("xlm"),PFr=o(" \u2014 "),yQ=a("a"),$Fr=o("TFXLMForQuestionAnsweringSimple"),IFr=o(" (XLM model)"),qFr=l(),p9=a("li"),H2e=a("strong"),NFr=o("xlm-roberta"),jFr=o(" \u2014 "),LQ=a("a"),DFr=o("TFXLMRobertaForQuestionAnswering"),GFr=o(" (XLM-RoBERTa model)"),OFr=l(),_9=a("li"),U2e=a("strong"),VFr=o("xlnet"),XFr=o(" \u2014 "),xQ=a("a"),zFr=o("TFXLNetForQuestionAnsweringSimple"),QFr=o(" (XLNet model)"),WFr=l(),J2e=a("p"),HFr=o("Examples:"),UFr=l(),f(x0.$$.fragment),JBe=l(),Qc=a("h2"),u9=a("a"),Y2e=a("span"),f(k0.$$.fragment),JFr=l(),K2e=a("span"),YFr=o("TFAutoModelForVision2Seq"),YBe=l(),kr=a("div"),f(S0.$$.fragment),KFr=l(),Wc=a("p"),ZFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kQ=a("a"),eTr=o("from_pretrained()"),oTr=o(" class method or the "),SQ=a("a"),rTr=o("from_config()"),tTr=o(` class
method.`),aTr=l(),R0=a("p"),nTr=o("This class cannot be instantiated directly using "),Z2e=a("code"),sTr=o("__init__()"),lTr=o(" (throws an error)."),iTr=l(),Ct=a("div"),f(B0.$$.fragment),dTr=l(),e3e=a("p"),cTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fTr=l(),Hc=a("p"),mTr=o(`Note:
Loading a model from its configuration file does `),o3e=a("strong"),gTr=o("not"),hTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),pTr=o("from_pretrained()"),_Tr=o(" to load the model weights."),uTr=l(),r3e=a("p"),bTr=o("Examples:"),vTr=l(),f(P0.$$.fragment),FTr=l(),wo=a("div"),f($0.$$.fragment),TTr=l(),t3e=a("p"),MTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ETr=l(),Ln=a("p"),CTr=o("The model class to instantiate is selected based on the "),a3e=a("code"),wTr=o("model_type"),ATr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),yTr=o("pretrained_model_name_or_path"),LTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),xTr=o("pretrained_model_name_or_path"),kTr=o(":"),STr=l(),l3e=a("ul"),b9=a("li"),i3e=a("strong"),RTr=o("vision-encoder-decoder"),BTr=o(" \u2014 "),BQ=a("a"),PTr=o("TFVisionEncoderDecoderModel"),$Tr=o(" (Vision Encoder decoder model)"),ITr=l(),d3e=a("p"),qTr=o("Examples:"),NTr=l(),f(I0.$$.fragment),KBe=l(),Uc=a("h2"),v9=a("a"),c3e=a("span"),f(q0.$$.fragment),jTr=l(),f3e=a("span"),DTr=o("TFAutoModelForSpeechSeq2Seq"),ZBe=l(),Sr=a("div"),f(N0.$$.fragment),GTr=l(),Jc=a("p"),OTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PQ=a("a"),VTr=o("from_pretrained()"),XTr=o(" class method or the "),$Q=a("a"),zTr=o("from_config()"),QTr=o(` class
method.`),WTr=l(),j0=a("p"),HTr=o("This class cannot be instantiated directly using "),m3e=a("code"),UTr=o("__init__()"),JTr=o(" (throws an error)."),YTr=l(),wt=a("div"),f(D0.$$.fragment),KTr=l(),g3e=a("p"),ZTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),e8r=l(),Yc=a("p"),o8r=o(`Note:
Loading a model from its configuration file does `),h3e=a("strong"),r8r=o("not"),t8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),a8r=o("from_pretrained()"),n8r=o(" to load the model weights."),s8r=l(),p3e=a("p"),l8r=o("Examples:"),i8r=l(),f(G0.$$.fragment),d8r=l(),Ao=a("div"),f(O0.$$.fragment),c8r=l(),_3e=a("p"),f8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),m8r=l(),xn=a("p"),g8r=o("The model class to instantiate is selected based on the "),u3e=a("code"),h8r=o("model_type"),p8r=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),_8r=o("pretrained_model_name_or_path"),u8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),b8r=o("pretrained_model_name_or_path"),v8r=o(":"),F8r=l(),F3e=a("ul"),F9=a("li"),T3e=a("strong"),T8r=o("speech_to_text"),M8r=o(" \u2014 "),qQ=a("a"),E8r=o("TFSpeech2TextForConditionalGeneration"),C8r=o(" (Speech2Text model)"),w8r=l(),M3e=a("p"),A8r=o("Examples:"),y8r=l(),f(V0.$$.fragment),ePe=l(),Kc=a("h2"),T9=a("a"),E3e=a("span"),f(X0.$$.fragment),L8r=l(),C3e=a("span"),x8r=o("FlaxAutoModel"),oPe=l(),Rr=a("div"),f(z0.$$.fragment),k8r=l(),Zc=a("p"),S8r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NQ=a("a"),R8r=o("from_pretrained()"),B8r=o(" class method or the "),jQ=a("a"),P8r=o("from_config()"),$8r=o(` class
method.`),I8r=l(),Q0=a("p"),q8r=o("This class cannot be instantiated directly using "),w3e=a("code"),N8r=o("__init__()"),j8r=o(" (throws an error)."),D8r=l(),At=a("div"),f(W0.$$.fragment),G8r=l(),A3e=a("p"),O8r=o("Instantiates one of the base model classes of the library from a configuration."),V8r=l(),ef=a("p"),X8r=o(`Note:
Loading a model from its configuration file does `),y3e=a("strong"),z8r=o("not"),Q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),W8r=o("from_pretrained()"),H8r=o(" to load the model weights."),U8r=l(),L3e=a("p"),J8r=o("Examples:"),Y8r=l(),f(H0.$$.fragment),K8r=l(),yo=a("div"),f(U0.$$.fragment),Z8r=l(),x3e=a("p"),e9r=o("Instantiate one of the base model classes of the library from a pretrained model."),o9r=l(),kn=a("p"),r9r=o("The model class to instantiate is selected based on the "),k3e=a("code"),t9r=o("model_type"),a9r=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),n9r=o("pretrained_model_name_or_path"),s9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),l9r=o("pretrained_model_name_or_path"),i9r=o(":"),d9r=l(),z=a("ul"),M9=a("li"),B3e=a("strong"),c9r=o("albert"),f9r=o(" \u2014 "),GQ=a("a"),m9r=o("FlaxAlbertModel"),g9r=o(" (ALBERT model)"),h9r=l(),E9=a("li"),P3e=a("strong"),p9r=o("bart"),_9r=o(" \u2014 "),OQ=a("a"),u9r=o("FlaxBartModel"),b9r=o(" (BART model)"),v9r=l(),C9=a("li"),$3e=a("strong"),F9r=o("beit"),T9r=o(" \u2014 "),VQ=a("a"),M9r=o("FlaxBeitModel"),E9r=o(" (BEiT model)"),C9r=l(),w9=a("li"),I3e=a("strong"),w9r=o("bert"),A9r=o(" \u2014 "),XQ=a("a"),y9r=o("FlaxBertModel"),L9r=o(" (BERT model)"),x9r=l(),A9=a("li"),q3e=a("strong"),k9r=o("big_bird"),S9r=o(" \u2014 "),zQ=a("a"),R9r=o("FlaxBigBirdModel"),B9r=o(" (BigBird model)"),P9r=l(),y9=a("li"),N3e=a("strong"),$9r=o("blenderbot"),I9r=o(" \u2014 "),QQ=a("a"),q9r=o("FlaxBlenderbotModel"),N9r=o(" (Blenderbot model)"),j9r=l(),L9=a("li"),j3e=a("strong"),D9r=o("blenderbot-small"),G9r=o(" \u2014 "),WQ=a("a"),O9r=o("FlaxBlenderbotSmallModel"),V9r=o(" (BlenderbotSmall model)"),X9r=l(),x9=a("li"),D3e=a("strong"),z9r=o("clip"),Q9r=o(" \u2014 "),HQ=a("a"),W9r=o("FlaxCLIPModel"),H9r=o(" (CLIP model)"),U9r=l(),k9=a("li"),G3e=a("strong"),J9r=o("distilbert"),Y9r=o(" \u2014 "),UQ=a("a"),K9r=o("FlaxDistilBertModel"),Z9r=o(" (DistilBERT model)"),eMr=l(),S9=a("li"),O3e=a("strong"),oMr=o("electra"),rMr=o(" \u2014 "),JQ=a("a"),tMr=o("FlaxElectraModel"),aMr=o(" (ELECTRA model)"),nMr=l(),R9=a("li"),V3e=a("strong"),sMr=o("gpt2"),lMr=o(" \u2014 "),YQ=a("a"),iMr=o("FlaxGPT2Model"),dMr=o(" (OpenAI GPT-2 model)"),cMr=l(),B9=a("li"),X3e=a("strong"),fMr=o("gpt_neo"),mMr=o(" \u2014 "),KQ=a("a"),gMr=o("FlaxGPTNeoModel"),hMr=o(" (GPT Neo model)"),pMr=l(),P9=a("li"),z3e=a("strong"),_Mr=o("gptj"),uMr=o(" \u2014 "),ZQ=a("a"),bMr=o("FlaxGPTJModel"),vMr=o(" (GPT-J model)"),FMr=l(),$9=a("li"),Q3e=a("strong"),TMr=o("marian"),MMr=o(" \u2014 "),eW=a("a"),EMr=o("FlaxMarianModel"),CMr=o(" (Marian model)"),wMr=l(),I9=a("li"),W3e=a("strong"),AMr=o("mbart"),yMr=o(" \u2014 "),oW=a("a"),LMr=o("FlaxMBartModel"),xMr=o(" (mBART model)"),kMr=l(),q9=a("li"),H3e=a("strong"),SMr=o("mt5"),RMr=o(" \u2014 "),rW=a("a"),BMr=o("FlaxMT5Model"),PMr=o(" (mT5 model)"),$Mr=l(),N9=a("li"),U3e=a("strong"),IMr=o("pegasus"),qMr=o(" \u2014 "),tW=a("a"),NMr=o("FlaxPegasusModel"),jMr=o(" (Pegasus model)"),DMr=l(),j9=a("li"),J3e=a("strong"),GMr=o("roberta"),OMr=o(" \u2014 "),aW=a("a"),VMr=o("FlaxRobertaModel"),XMr=o(" (RoBERTa model)"),zMr=l(),D9=a("li"),Y3e=a("strong"),QMr=o("roformer"),WMr=o(" \u2014 "),nW=a("a"),HMr=o("FlaxRoFormerModel"),UMr=o(" (RoFormer model)"),JMr=l(),G9=a("li"),K3e=a("strong"),YMr=o("t5"),KMr=o(" \u2014 "),sW=a("a"),ZMr=o("FlaxT5Model"),e4r=o(" (T5 model)"),o4r=l(),O9=a("li"),Z3e=a("strong"),r4r=o("vision-text-dual-encoder"),t4r=o(" \u2014 "),lW=a("a"),a4r=o("FlaxVisionTextDualEncoderModel"),n4r=o(" (VisionTextDualEncoder model)"),s4r=l(),V9=a("li"),e6e=a("strong"),l4r=o("vit"),i4r=o(" \u2014 "),iW=a("a"),d4r=o("FlaxViTModel"),c4r=o(" (ViT model)"),f4r=l(),X9=a("li"),o6e=a("strong"),m4r=o("wav2vec2"),g4r=o(" \u2014 "),dW=a("a"),h4r=o("FlaxWav2Vec2Model"),p4r=o(" (Wav2Vec2 model)"),_4r=l(),z9=a("li"),r6e=a("strong"),u4r=o("xglm"),b4r=o(" \u2014 "),cW=a("a"),v4r=o("FlaxXGLMModel"),F4r=o(" (XGLM model)"),T4r=l(),Q9=a("li"),t6e=a("strong"),M4r=o("xlm-roberta"),E4r=o(" \u2014 "),fW=a("a"),C4r=o("FlaxXLMRobertaModel"),w4r=o(" (XLM-RoBERTa model)"),A4r=l(),a6e=a("p"),y4r=o("Examples:"),L4r=l(),f(J0.$$.fragment),rPe=l(),of=a("h2"),W9=a("a"),n6e=a("span"),f(Y0.$$.fragment),x4r=l(),s6e=a("span"),k4r=o("FlaxAutoModelForCausalLM"),tPe=l(),Br=a("div"),f(K0.$$.fragment),S4r=l(),rf=a("p"),R4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mW=a("a"),B4r=o("from_pretrained()"),P4r=o(" class method or the "),gW=a("a"),$4r=o("from_config()"),I4r=o(` class
method.`),q4r=l(),Z0=a("p"),N4r=o("This class cannot be instantiated directly using "),l6e=a("code"),j4r=o("__init__()"),D4r=o(" (throws an error)."),G4r=l(),yt=a("div"),f(ey.$$.fragment),O4r=l(),i6e=a("p"),V4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),X4r=l(),tf=a("p"),z4r=o(`Note:
Loading a model from its configuration file does `),d6e=a("strong"),Q4r=o("not"),W4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),H4r=o("from_pretrained()"),U4r=o(" to load the model weights."),J4r=l(),c6e=a("p"),Y4r=o("Examples:"),K4r=l(),f(oy.$$.fragment),Z4r=l(),Lo=a("div"),f(ry.$$.fragment),eEr=l(),f6e=a("p"),oEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rEr=l(),Sn=a("p"),tEr=o("The model class to instantiate is selected based on the "),m6e=a("code"),aEr=o("model_type"),nEr=o(` property of the config object (either
passed as an argument or loaded from `),g6e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=a("code"),iEr=o("pretrained_model_name_or_path"),dEr=o(":"),cEr=l(),ca=a("ul"),H9=a("li"),p6e=a("strong"),fEr=o("bart"),mEr=o(" \u2014 "),pW=a("a"),gEr=o("FlaxBartForCausalLM"),hEr=o(" (BART model)"),pEr=l(),U9=a("li"),_6e=a("strong"),_Er=o("gpt2"),uEr=o(" \u2014 "),_W=a("a"),bEr=o("FlaxGPT2LMHeadModel"),vEr=o(" (OpenAI GPT-2 model)"),FEr=l(),J9=a("li"),u6e=a("strong"),TEr=o("gpt_neo"),MEr=o(" \u2014 "),uW=a("a"),EEr=o("FlaxGPTNeoForCausalLM"),CEr=o(" (GPT Neo model)"),wEr=l(),Y9=a("li"),b6e=a("strong"),AEr=o("gptj"),yEr=o(" \u2014 "),bW=a("a"),LEr=o("FlaxGPTJForCausalLM"),xEr=o(" (GPT-J model)"),kEr=l(),K9=a("li"),v6e=a("strong"),SEr=o("xglm"),REr=o(" \u2014 "),vW=a("a"),BEr=o("FlaxXGLMForCausalLM"),PEr=o(" (XGLM model)"),$Er=l(),F6e=a("p"),IEr=o("Examples:"),qEr=l(),f(ty.$$.fragment),aPe=l(),af=a("h2"),Z9=a("a"),T6e=a("span"),f(ay.$$.fragment),NEr=l(),M6e=a("span"),jEr=o("FlaxAutoModelForPreTraining"),nPe=l(),Pr=a("div"),f(ny.$$.fragment),DEr=l(),nf=a("p"),GEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=a("a"),OEr=o("from_pretrained()"),VEr=o(" class method or the "),TW=a("a"),XEr=o("from_config()"),zEr=o(` class
method.`),QEr=l(),sy=a("p"),WEr=o("This class cannot be instantiated directly using "),E6e=a("code"),HEr=o("__init__()"),UEr=o(" (throws an error)."),JEr=l(),Lt=a("div"),f(ly.$$.fragment),YEr=l(),C6e=a("p"),KEr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ZEr=l(),sf=a("p"),e5r=o(`Note:
Loading a model from its configuration file does `),w6e=a("strong"),o5r=o("not"),r5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=a("a"),t5r=o("from_pretrained()"),a5r=o(" to load the model weights."),n5r=l(),A6e=a("p"),s5r=o("Examples:"),l5r=l(),f(iy.$$.fragment),i5r=l(),xo=a("div"),f(dy.$$.fragment),d5r=l(),y6e=a("p"),c5r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f5r=l(),Rn=a("p"),m5r=o("The model class to instantiate is selected based on the "),L6e=a("code"),g5r=o("model_type"),h5r=o(` property of the config object (either
passed as an argument or loaded from `),x6e=a("code"),p5r=o("pretrained_model_name_or_path"),_5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=a("code"),u5r=o("pretrained_model_name_or_path"),b5r=o(":"),v5r=l(),me=a("ul"),eM=a("li"),S6e=a("strong"),F5r=o("albert"),T5r=o(" \u2014 "),EW=a("a"),M5r=o("FlaxAlbertForPreTraining"),E5r=o(" (ALBERT model)"),C5r=l(),oM=a("li"),R6e=a("strong"),w5r=o("bart"),A5r=o(" \u2014 "),CW=a("a"),y5r=o("FlaxBartForConditionalGeneration"),L5r=o(" (BART model)"),x5r=l(),rM=a("li"),B6e=a("strong"),k5r=o("bert"),S5r=o(" \u2014 "),wW=a("a"),R5r=o("FlaxBertForPreTraining"),B5r=o(" (BERT model)"),P5r=l(),tM=a("li"),P6e=a("strong"),$5r=o("big_bird"),I5r=o(" \u2014 "),AW=a("a"),q5r=o("FlaxBigBirdForPreTraining"),N5r=o(" (BigBird model)"),j5r=l(),aM=a("li"),$6e=a("strong"),D5r=o("electra"),G5r=o(" \u2014 "),yW=a("a"),O5r=o("FlaxElectraForPreTraining"),V5r=o(" (ELECTRA model)"),X5r=l(),nM=a("li"),I6e=a("strong"),z5r=o("mbart"),Q5r=o(" \u2014 "),LW=a("a"),W5r=o("FlaxMBartForConditionalGeneration"),H5r=o(" (mBART model)"),U5r=l(),sM=a("li"),q6e=a("strong"),J5r=o("mt5"),Y5r=o(" \u2014 "),xW=a("a"),K5r=o("FlaxMT5ForConditionalGeneration"),Z5r=o(" (mT5 model)"),eCr=l(),lM=a("li"),N6e=a("strong"),oCr=o("roberta"),rCr=o(" \u2014 "),kW=a("a"),tCr=o("FlaxRobertaForMaskedLM"),aCr=o(" (RoBERTa model)"),nCr=l(),iM=a("li"),j6e=a("strong"),sCr=o("roformer"),lCr=o(" \u2014 "),SW=a("a"),iCr=o("FlaxRoFormerForMaskedLM"),dCr=o(" (RoFormer model)"),cCr=l(),dM=a("li"),D6e=a("strong"),fCr=o("t5"),mCr=o(" \u2014 "),RW=a("a"),gCr=o("FlaxT5ForConditionalGeneration"),hCr=o(" (T5 model)"),pCr=l(),cM=a("li"),G6e=a("strong"),_Cr=o("wav2vec2"),uCr=o(" \u2014 "),BW=a("a"),bCr=o("FlaxWav2Vec2ForPreTraining"),vCr=o(" (Wav2Vec2 model)"),FCr=l(),fM=a("li"),O6e=a("strong"),TCr=o("xlm-roberta"),MCr=o(" \u2014 "),PW=a("a"),ECr=o("FlaxXLMRobertaForMaskedLM"),CCr=o(" (XLM-RoBERTa model)"),wCr=l(),V6e=a("p"),ACr=o("Examples:"),yCr=l(),f(cy.$$.fragment),sPe=l(),lf=a("h2"),mM=a("a"),X6e=a("span"),f(fy.$$.fragment),LCr=l(),z6e=a("span"),xCr=o("FlaxAutoModelForMaskedLM"),lPe=l(),$r=a("div"),f(my.$$.fragment),kCr=l(),df=a("p"),SCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$W=a("a"),RCr=o("from_pretrained()"),BCr=o(" class method or the "),IW=a("a"),PCr=o("from_config()"),$Cr=o(` class
method.`),ICr=l(),gy=a("p"),qCr=o("This class cannot be instantiated directly using "),Q6e=a("code"),NCr=o("__init__()"),jCr=o(" (throws an error)."),DCr=l(),xt=a("div"),f(hy.$$.fragment),GCr=l(),W6e=a("p"),OCr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),VCr=l(),cf=a("p"),XCr=o(`Note:
Loading a model from its configuration file does `),H6e=a("strong"),zCr=o("not"),QCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=a("a"),WCr=o("from_pretrained()"),HCr=o(" to load the model weights."),UCr=l(),U6e=a("p"),JCr=o("Examples:"),YCr=l(),f(py.$$.fragment),KCr=l(),ko=a("div"),f(_y.$$.fragment),ZCr=l(),J6e=a("p"),ewr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),owr=l(),Bn=a("p"),rwr=o("The model class to instantiate is selected based on the "),Y6e=a("code"),twr=o("model_type"),awr=o(` property of the config object (either
passed as an argument or loaded from `),K6e=a("code"),nwr=o("pretrained_model_name_or_path"),swr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=a("code"),lwr=o("pretrained_model_name_or_path"),iwr=o(":"),dwr=l(),ve=a("ul"),gM=a("li"),eve=a("strong"),cwr=o("albert"),fwr=o(" \u2014 "),NW=a("a"),mwr=o("FlaxAlbertForMaskedLM"),gwr=o(" (ALBERT model)"),hwr=l(),hM=a("li"),ove=a("strong"),pwr=o("bart"),_wr=o(" \u2014 "),jW=a("a"),uwr=o("FlaxBartForConditionalGeneration"),bwr=o(" (BART model)"),vwr=l(),pM=a("li"),rve=a("strong"),Fwr=o("bert"),Twr=o(" \u2014 "),DW=a("a"),Mwr=o("FlaxBertForMaskedLM"),Ewr=o(" (BERT model)"),Cwr=l(),_M=a("li"),tve=a("strong"),wwr=o("big_bird"),Awr=o(" \u2014 "),GW=a("a"),ywr=o("FlaxBigBirdForMaskedLM"),Lwr=o(" (BigBird model)"),xwr=l(),uM=a("li"),ave=a("strong"),kwr=o("distilbert"),Swr=o(" \u2014 "),OW=a("a"),Rwr=o("FlaxDistilBertForMaskedLM"),Bwr=o(" (DistilBERT model)"),Pwr=l(),bM=a("li"),nve=a("strong"),$wr=o("electra"),Iwr=o(" \u2014 "),VW=a("a"),qwr=o("FlaxElectraForMaskedLM"),Nwr=o(" (ELECTRA model)"),jwr=l(),vM=a("li"),sve=a("strong"),Dwr=o("mbart"),Gwr=o(" \u2014 "),XW=a("a"),Owr=o("FlaxMBartForConditionalGeneration"),Vwr=o(" (mBART model)"),Xwr=l(),FM=a("li"),lve=a("strong"),zwr=o("roberta"),Qwr=o(" \u2014 "),zW=a("a"),Wwr=o("FlaxRobertaForMaskedLM"),Hwr=o(" (RoBERTa model)"),Uwr=l(),TM=a("li"),ive=a("strong"),Jwr=o("roformer"),Ywr=o(" \u2014 "),QW=a("a"),Kwr=o("FlaxRoFormerForMaskedLM"),Zwr=o(" (RoFormer model)"),eAr=l(),MM=a("li"),dve=a("strong"),oAr=o("xlm-roberta"),rAr=o(" \u2014 "),WW=a("a"),tAr=o("FlaxXLMRobertaForMaskedLM"),aAr=o(" (XLM-RoBERTa model)"),nAr=l(),cve=a("p"),sAr=o("Examples:"),lAr=l(),f(uy.$$.fragment),iPe=l(),ff=a("h2"),EM=a("a"),fve=a("span"),f(by.$$.fragment),iAr=l(),mve=a("span"),dAr=o("FlaxAutoModelForSeq2SeqLM"),dPe=l(),Ir=a("div"),f(vy.$$.fragment),cAr=l(),mf=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HW=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),UW=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),Fy=a("p"),uAr=o("This class cannot be instantiated directly using "),gve=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),kt=a("div"),f(Ty.$$.fragment),TAr=l(),hve=a("p"),MAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EAr=l(),gf=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),pve=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=a("a"),yAr=o("from_pretrained()"),LAr=o(" to load the model weights."),xAr=l(),_ve=a("p"),kAr=o("Examples:"),SAr=l(),f(My.$$.fragment),RAr=l(),So=a("div"),f(Ey.$$.fragment),BAr=l(),uve=a("p"),PAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Ar=l(),Pn=a("p"),IAr=o("The model class to instantiate is selected based on the "),bve=a("code"),qAr=o("model_type"),NAr=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),GAr=o("pretrained_model_name_or_path"),OAr=o(":"),VAr=l(),Ee=a("ul"),CM=a("li"),Tve=a("strong"),XAr=o("bart"),zAr=o(" \u2014 "),YW=a("a"),QAr=o("FlaxBartForConditionalGeneration"),WAr=o(" (BART model)"),HAr=l(),wM=a("li"),Mve=a("strong"),UAr=o("blenderbot"),JAr=o(" \u2014 "),KW=a("a"),YAr=o("FlaxBlenderbotForConditionalGeneration"),KAr=o(" (Blenderbot model)"),ZAr=l(),AM=a("li"),Eve=a("strong"),e0r=o("blenderbot-small"),o0r=o(" \u2014 "),ZW=a("a"),r0r=o("FlaxBlenderbotSmallForConditionalGeneration"),t0r=o(" (BlenderbotSmall model)"),a0r=l(),yM=a("li"),Cve=a("strong"),n0r=o("encoder-decoder"),s0r=o(" \u2014 "),eH=a("a"),l0r=o("FlaxEncoderDecoderModel"),i0r=o(" (Encoder decoder model)"),d0r=l(),LM=a("li"),wve=a("strong"),c0r=o("marian"),f0r=o(" \u2014 "),oH=a("a"),m0r=o("FlaxMarianMTModel"),g0r=o(" (Marian model)"),h0r=l(),xM=a("li"),Ave=a("strong"),p0r=o("mbart"),_0r=o(" \u2014 "),rH=a("a"),u0r=o("FlaxMBartForConditionalGeneration"),b0r=o(" (mBART model)"),v0r=l(),kM=a("li"),yve=a("strong"),F0r=o("mt5"),T0r=o(" \u2014 "),tH=a("a"),M0r=o("FlaxMT5ForConditionalGeneration"),E0r=o(" (mT5 model)"),C0r=l(),SM=a("li"),Lve=a("strong"),w0r=o("pegasus"),A0r=o(" \u2014 "),aH=a("a"),y0r=o("FlaxPegasusForConditionalGeneration"),L0r=o(" (Pegasus model)"),x0r=l(),RM=a("li"),xve=a("strong"),k0r=o("t5"),S0r=o(" \u2014 "),nH=a("a"),R0r=o("FlaxT5ForConditionalGeneration"),B0r=o(" (T5 model)"),P0r=l(),kve=a("p"),$0r=o("Examples:"),I0r=l(),f(Cy.$$.fragment),cPe=l(),hf=a("h2"),BM=a("a"),Sve=a("span"),f(wy.$$.fragment),q0r=l(),Rve=a("span"),N0r=o("FlaxAutoModelForSequenceClassification"),fPe=l(),qr=a("div"),f(Ay.$$.fragment),j0r=l(),pf=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sH=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),lH=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),yy=a("p"),Q0r=o("This class cannot be instantiated directly using "),Bve=a("code"),W0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),St=a("div"),f(Ly.$$.fragment),J0r=l(),Pve=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K0r=l(),_f=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),$ve=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),Ive=a("p"),nyr=o("Examples:"),syr=l(),f(xy.$$.fragment),lyr=l(),Ro=a("div"),f(ky.$$.fragment),iyr=l(),qve=a("p"),dyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cyr=l(),$n=a("p"),fyr=o("The model class to instantiate is selected based on the "),Nve=a("code"),myr=o("model_type"),gyr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),_yr=o("pretrained_model_name_or_path"),uyr=o(":"),byr=l(),Fe=a("ul"),PM=a("li"),Gve=a("strong"),vyr=o("albert"),Fyr=o(" \u2014 "),dH=a("a"),Tyr=o("FlaxAlbertForSequenceClassification"),Myr=o(" (ALBERT model)"),Eyr=l(),$M=a("li"),Ove=a("strong"),Cyr=o("bart"),wyr=o(" \u2014 "),cH=a("a"),Ayr=o("FlaxBartForSequenceClassification"),yyr=o(" (BART model)"),Lyr=l(),IM=a("li"),Vve=a("strong"),xyr=o("bert"),kyr=o(" \u2014 "),fH=a("a"),Syr=o("FlaxBertForSequenceClassification"),Ryr=o(" (BERT model)"),Byr=l(),qM=a("li"),Xve=a("strong"),Pyr=o("big_bird"),$yr=o(" \u2014 "),mH=a("a"),Iyr=o("FlaxBigBirdForSequenceClassification"),qyr=o(" (BigBird model)"),Nyr=l(),NM=a("li"),zve=a("strong"),jyr=o("distilbert"),Dyr=o(" \u2014 "),gH=a("a"),Gyr=o("FlaxDistilBertForSequenceClassification"),Oyr=o(" (DistilBERT model)"),Vyr=l(),jM=a("li"),Qve=a("strong"),Xyr=o("electra"),zyr=o(" \u2014 "),hH=a("a"),Qyr=o("FlaxElectraForSequenceClassification"),Wyr=o(" (ELECTRA model)"),Hyr=l(),DM=a("li"),Wve=a("strong"),Uyr=o("mbart"),Jyr=o(" \u2014 "),pH=a("a"),Yyr=o("FlaxMBartForSequenceClassification"),Kyr=o(" (mBART model)"),Zyr=l(),GM=a("li"),Hve=a("strong"),eLr=o("roberta"),oLr=o(" \u2014 "),_H=a("a"),rLr=o("FlaxRobertaForSequenceClassification"),tLr=o(" (RoBERTa model)"),aLr=l(),OM=a("li"),Uve=a("strong"),nLr=o("roformer"),sLr=o(" \u2014 "),uH=a("a"),lLr=o("FlaxRoFormerForSequenceClassification"),iLr=o(" (RoFormer model)"),dLr=l(),VM=a("li"),Jve=a("strong"),cLr=o("xlm-roberta"),fLr=o(" \u2014 "),bH=a("a"),mLr=o("FlaxXLMRobertaForSequenceClassification"),gLr=o(" (XLM-RoBERTa model)"),hLr=l(),Yve=a("p"),pLr=o("Examples:"),_Lr=l(),f(Sy.$$.fragment),mPe=l(),uf=a("h2"),XM=a("a"),Kve=a("span"),f(Ry.$$.fragment),uLr=l(),Zve=a("span"),bLr=o("FlaxAutoModelForQuestionAnswering"),gPe=l(),Nr=a("div"),f(By.$$.fragment),vLr=l(),bf=a("p"),FLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=a("a"),TLr=o("from_pretrained()"),MLr=o(" class method or the "),FH=a("a"),ELr=o("from_config()"),CLr=o(` class
method.`),wLr=l(),Py=a("p"),ALr=o("This class cannot be instantiated directly using "),eFe=a("code"),yLr=o("__init__()"),LLr=o(" (throws an error)."),xLr=l(),Rt=a("div"),f($y.$$.fragment),kLr=l(),oFe=a("p"),SLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RLr=l(),vf=a("p"),BLr=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),PLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=a("a"),ILr=o("from_pretrained()"),qLr=o(" to load the model weights."),NLr=l(),tFe=a("p"),jLr=o("Examples:"),DLr=l(),f(Iy.$$.fragment),GLr=l(),Bo=a("div"),f(qy.$$.fragment),OLr=l(),aFe=a("p"),VLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XLr=l(),In=a("p"),zLr=o("The model class to instantiate is selected based on the "),nFe=a("code"),QLr=o("model_type"),WLr=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),HLr=o("pretrained_model_name_or_path"),ULr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),JLr=o("pretrained_model_name_or_path"),YLr=o(":"),KLr=l(),Te=a("ul"),zM=a("li"),iFe=a("strong"),ZLr=o("albert"),e7r=o(" \u2014 "),MH=a("a"),o7r=o("FlaxAlbertForQuestionAnswering"),r7r=o(" (ALBERT model)"),t7r=l(),QM=a("li"),dFe=a("strong"),a7r=o("bart"),n7r=o(" \u2014 "),EH=a("a"),s7r=o("FlaxBartForQuestionAnswering"),l7r=o(" (BART model)"),i7r=l(),WM=a("li"),cFe=a("strong"),d7r=o("bert"),c7r=o(" \u2014 "),CH=a("a"),f7r=o("FlaxBertForQuestionAnswering"),m7r=o(" (BERT model)"),g7r=l(),HM=a("li"),fFe=a("strong"),h7r=o("big_bird"),p7r=o(" \u2014 "),wH=a("a"),_7r=o("FlaxBigBirdForQuestionAnswering"),u7r=o(" (BigBird model)"),b7r=l(),UM=a("li"),mFe=a("strong"),v7r=o("distilbert"),F7r=o(" \u2014 "),AH=a("a"),T7r=o("FlaxDistilBertForQuestionAnswering"),M7r=o(" (DistilBERT model)"),E7r=l(),JM=a("li"),gFe=a("strong"),C7r=o("electra"),w7r=o(" \u2014 "),yH=a("a"),A7r=o("FlaxElectraForQuestionAnswering"),y7r=o(" (ELECTRA model)"),L7r=l(),YM=a("li"),hFe=a("strong"),x7r=o("mbart"),k7r=o(" \u2014 "),LH=a("a"),S7r=o("FlaxMBartForQuestionAnswering"),R7r=o(" (mBART model)"),B7r=l(),KM=a("li"),pFe=a("strong"),P7r=o("roberta"),$7r=o(" \u2014 "),xH=a("a"),I7r=o("FlaxRobertaForQuestionAnswering"),q7r=o(" (RoBERTa model)"),N7r=l(),ZM=a("li"),_Fe=a("strong"),j7r=o("roformer"),D7r=o(" \u2014 "),kH=a("a"),G7r=o("FlaxRoFormerForQuestionAnswering"),O7r=o(" (RoFormer model)"),V7r=l(),e4=a("li"),uFe=a("strong"),X7r=o("xlm-roberta"),z7r=o(" \u2014 "),SH=a("a"),Q7r=o("FlaxXLMRobertaForQuestionAnswering"),W7r=o(" (XLM-RoBERTa model)"),H7r=l(),bFe=a("p"),U7r=o("Examples:"),J7r=l(),f(Ny.$$.fragment),hPe=l(),Ff=a("h2"),o4=a("a"),vFe=a("span"),f(jy.$$.fragment),Y7r=l(),FFe=a("span"),K7r=o("FlaxAutoModelForTokenClassification"),pPe=l(),jr=a("div"),f(Dy.$$.fragment),Z7r=l(),Tf=a("p"),exr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RH=a("a"),oxr=o("from_pretrained()"),rxr=o(" class method or the "),BH=a("a"),txr=o("from_config()"),axr=o(` class
method.`),nxr=l(),Gy=a("p"),sxr=o("This class cannot be instantiated directly using "),TFe=a("code"),lxr=o("__init__()"),ixr=o(" (throws an error)."),dxr=l(),Bt=a("div"),f(Oy.$$.fragment),cxr=l(),MFe=a("p"),fxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mxr=l(),Mf=a("p"),gxr=o(`Note:
Loading a model from its configuration file does `),EFe=a("strong"),hxr=o("not"),pxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=a("a"),_xr=o("from_pretrained()"),uxr=o(" to load the model weights."),bxr=l(),CFe=a("p"),vxr=o("Examples:"),Fxr=l(),f(Vy.$$.fragment),Txr=l(),Po=a("div"),f(Xy.$$.fragment),Mxr=l(),wFe=a("p"),Exr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cxr=l(),qn=a("p"),wxr=o("The model class to instantiate is selected based on the "),AFe=a("code"),Axr=o("model_type"),yxr=o(` property of the config object (either
passed as an argument or loaded from `),yFe=a("code"),Lxr=o("pretrained_model_name_or_path"),xxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=a("code"),kxr=o("pretrained_model_name_or_path"),Sxr=o(":"),Rxr=l(),Be=a("ul"),r4=a("li"),xFe=a("strong"),Bxr=o("albert"),Pxr=o(" \u2014 "),$H=a("a"),$xr=o("FlaxAlbertForTokenClassification"),Ixr=o(" (ALBERT model)"),qxr=l(),t4=a("li"),kFe=a("strong"),Nxr=o("bert"),jxr=o(" \u2014 "),IH=a("a"),Dxr=o("FlaxBertForTokenClassification"),Gxr=o(" (BERT model)"),Oxr=l(),a4=a("li"),SFe=a("strong"),Vxr=o("big_bird"),Xxr=o(" \u2014 "),qH=a("a"),zxr=o("FlaxBigBirdForTokenClassification"),Qxr=o(" (BigBird model)"),Wxr=l(),n4=a("li"),RFe=a("strong"),Hxr=o("distilbert"),Uxr=o(" \u2014 "),NH=a("a"),Jxr=o("FlaxDistilBertForTokenClassification"),Yxr=o(" (DistilBERT model)"),Kxr=l(),s4=a("li"),BFe=a("strong"),Zxr=o("electra"),ekr=o(" \u2014 "),jH=a("a"),okr=o("FlaxElectraForTokenClassification"),rkr=o(" (ELECTRA model)"),tkr=l(),l4=a("li"),PFe=a("strong"),akr=o("roberta"),nkr=o(" \u2014 "),DH=a("a"),skr=o("FlaxRobertaForTokenClassification"),lkr=o(" (RoBERTa model)"),ikr=l(),i4=a("li"),$Fe=a("strong"),dkr=o("roformer"),ckr=o(" \u2014 "),GH=a("a"),fkr=o("FlaxRoFormerForTokenClassification"),mkr=o(" (RoFormer model)"),gkr=l(),d4=a("li"),IFe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),OH=a("a"),_kr=o("FlaxXLMRobertaForTokenClassification"),ukr=o(" (XLM-RoBERTa model)"),bkr=l(),qFe=a("p"),vkr=o("Examples:"),Fkr=l(),f(zy.$$.fragment),_Pe=l(),Ef=a("h2"),c4=a("a"),NFe=a("span"),f(Qy.$$.fragment),Tkr=l(),jFe=a("span"),Mkr=o("FlaxAutoModelForMultipleChoice"),uPe=l(),Dr=a("div"),f(Wy.$$.fragment),Ekr=l(),Cf=a("p"),Ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VH=a("a"),wkr=o("from_pretrained()"),Akr=o(" class method or the "),XH=a("a"),ykr=o("from_config()"),Lkr=o(` class
method.`),xkr=l(),Hy=a("p"),kkr=o("This class cannot be instantiated directly using "),DFe=a("code"),Skr=o("__init__()"),Rkr=o(" (throws an error)."),Bkr=l(),Pt=a("div"),f(Uy.$$.fragment),Pkr=l(),GFe=a("p"),$kr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Ikr=l(),wf=a("p"),qkr=o(`Note:
Loading a model from its configuration file does `),OFe=a("strong"),Nkr=o("not"),jkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),Dkr=o("from_pretrained()"),Gkr=o(" to load the model weights."),Okr=l(),VFe=a("p"),Vkr=o("Examples:"),Xkr=l(),f(Jy.$$.fragment),zkr=l(),$o=a("div"),f(Yy.$$.fragment),Qkr=l(),XFe=a("p"),Wkr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hkr=l(),Nn=a("p"),Ukr=o("The model class to instantiate is selected based on the "),zFe=a("code"),Jkr=o("model_type"),Ykr=o(` property of the config object (either
passed as an argument or loaded from `),QFe=a("code"),Kkr=o("pretrained_model_name_or_path"),Zkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=a("code"),eSr=o("pretrained_model_name_or_path"),oSr=o(":"),rSr=l(),Pe=a("ul"),f4=a("li"),HFe=a("strong"),tSr=o("albert"),aSr=o(" \u2014 "),QH=a("a"),nSr=o("FlaxAlbertForMultipleChoice"),sSr=o(" (ALBERT model)"),lSr=l(),m4=a("li"),UFe=a("strong"),iSr=o("bert"),dSr=o(" \u2014 "),WH=a("a"),cSr=o("FlaxBertForMultipleChoice"),fSr=o(" (BERT model)"),mSr=l(),g4=a("li"),JFe=a("strong"),gSr=o("big_bird"),hSr=o(" \u2014 "),HH=a("a"),pSr=o("FlaxBigBirdForMultipleChoice"),_Sr=o(" (BigBird model)"),uSr=l(),h4=a("li"),YFe=a("strong"),bSr=o("distilbert"),vSr=o(" \u2014 "),UH=a("a"),FSr=o("FlaxDistilBertForMultipleChoice"),TSr=o(" (DistilBERT model)"),MSr=l(),p4=a("li"),KFe=a("strong"),ESr=o("electra"),CSr=o(" \u2014 "),JH=a("a"),wSr=o("FlaxElectraForMultipleChoice"),ASr=o(" (ELECTRA model)"),ySr=l(),_4=a("li"),ZFe=a("strong"),LSr=o("roberta"),xSr=o(" \u2014 "),YH=a("a"),kSr=o("FlaxRobertaForMultipleChoice"),SSr=o(" (RoBERTa model)"),RSr=l(),u4=a("li"),eTe=a("strong"),BSr=o("roformer"),PSr=o(" \u2014 "),KH=a("a"),$Sr=o("FlaxRoFormerForMultipleChoice"),ISr=o(" (RoFormer model)"),qSr=l(),b4=a("li"),oTe=a("strong"),NSr=o("xlm-roberta"),jSr=o(" \u2014 "),ZH=a("a"),DSr=o("FlaxXLMRobertaForMultipleChoice"),GSr=o(" (XLM-RoBERTa model)"),OSr=l(),rTe=a("p"),VSr=o("Examples:"),XSr=l(),f(Ky.$$.fragment),bPe=l(),Af=a("h2"),v4=a("a"),tTe=a("span"),f(Zy.$$.fragment),zSr=l(),aTe=a("span"),QSr=o("FlaxAutoModelForNextSentencePrediction"),vPe=l(),Gr=a("div"),f(eL.$$.fragment),WSr=l(),yf=a("p"),HSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=a("a"),USr=o("from_pretrained()"),JSr=o(" class method or the "),oU=a("a"),YSr=o("from_config()"),KSr=o(` class
method.`),ZSr=l(),oL=a("p"),eRr=o("This class cannot be instantiated directly using "),nTe=a("code"),oRr=o("__init__()"),rRr=o(" (throws an error)."),tRr=l(),$t=a("div"),f(rL.$$.fragment),aRr=l(),sTe=a("p"),nRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),sRr=l(),Lf=a("p"),lRr=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),iRr=o("not"),dRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),cRr=o("from_pretrained()"),fRr=o(" to load the model weights."),mRr=l(),iTe=a("p"),gRr=o("Examples:"),hRr=l(),f(tL.$$.fragment),pRr=l(),Io=a("div"),f(aL.$$.fragment),_Rr=l(),dTe=a("p"),uRr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bRr=l(),jn=a("p"),vRr=o("The model class to instantiate is selected based on the "),cTe=a("code"),FRr=o("model_type"),TRr=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),MRr=o("pretrained_model_name_or_path"),ERr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),CRr=o("pretrained_model_name_or_path"),wRr=o(":"),ARr=l(),gTe=a("ul"),F4=a("li"),hTe=a("strong"),yRr=o("bert"),LRr=o(" \u2014 "),tU=a("a"),xRr=o("FlaxBertForNextSentencePrediction"),kRr=o(" (BERT model)"),SRr=l(),pTe=a("p"),RRr=o("Examples:"),BRr=l(),f(nL.$$.fragment),FPe=l(),xf=a("h2"),T4=a("a"),_Te=a("span"),f(sL.$$.fragment),PRr=l(),uTe=a("span"),$Rr=o("FlaxAutoModelForImageClassification"),TPe=l(),Or=a("div"),f(lL.$$.fragment),IRr=l(),kf=a("p"),qRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aU=a("a"),NRr=o("from_pretrained()"),jRr=o(" class method or the "),nU=a("a"),DRr=o("from_config()"),GRr=o(` class
method.`),ORr=l(),iL=a("p"),VRr=o("This class cannot be instantiated directly using "),bTe=a("code"),XRr=o("__init__()"),zRr=o(" (throws an error)."),QRr=l(),It=a("div"),f(dL.$$.fragment),WRr=l(),vTe=a("p"),HRr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),URr=l(),Sf=a("p"),JRr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),YRr=o("not"),KRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),ZRr=o("from_pretrained()"),eBr=o(" to load the model weights."),oBr=l(),TTe=a("p"),rBr=o("Examples:"),tBr=l(),f(cL.$$.fragment),aBr=l(),qo=a("div"),f(fL.$$.fragment),nBr=l(),MTe=a("p"),sBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),lBr=l(),Dn=a("p"),iBr=o("The model class to instantiate is selected based on the "),ETe=a("code"),dBr=o("model_type"),cBr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),fBr=o("pretrained_model_name_or_path"),mBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(":"),pBr=l(),mL=a("ul"),M4=a("li"),ATe=a("strong"),_Br=o("beit"),uBr=o(" \u2014 "),lU=a("a"),bBr=o("FlaxBeitForImageClassification"),vBr=o(" (BEiT model)"),FBr=l(),E4=a("li"),yTe=a("strong"),TBr=o("vit"),MBr=o(" \u2014 "),iU=a("a"),EBr=o("FlaxViTForImageClassification"),CBr=o(" (ViT model)"),wBr=l(),LTe=a("p"),ABr=o("Examples:"),yBr=l(),f(gL.$$.fragment),MPe=l(),Rf=a("h2"),C4=a("a"),xTe=a("span"),f(hL.$$.fragment),LBr=l(),kTe=a("span"),xBr=o("FlaxAutoModelForVision2Seq"),EPe=l(),Vr=a("div"),f(pL.$$.fragment),kBr=l(),Bf=a("p"),SBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dU=a("a"),RBr=o("from_pretrained()"),BBr=o(" class method or the "),cU=a("a"),PBr=o("from_config()"),$Br=o(` class
method.`),IBr=l(),_L=a("p"),qBr=o("This class cannot be instantiated directly using "),STe=a("code"),NBr=o("__init__()"),jBr=o(" (throws an error)."),DBr=l(),qt=a("div"),f(uL.$$.fragment),GBr=l(),RTe=a("p"),OBr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VBr=l(),Pf=a("p"),XBr=o(`Note:
Loading a model from its configuration file does `),BTe=a("strong"),zBr=o("not"),QBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=a("a"),WBr=o("from_pretrained()"),HBr=o(" to load the model weights."),UBr=l(),PTe=a("p"),JBr=o("Examples:"),YBr=l(),f(bL.$$.fragment),KBr=l(),No=a("div"),f(vL.$$.fragment),ZBr=l(),$Te=a("p"),ePr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),oPr=l(),Gn=a("p"),rPr=o("The model class to instantiate is selected based on the "),ITe=a("code"),tPr=o("model_type"),aPr=o(` property of the config object (either
passed as an argument or loaded from `),qTe=a("code"),nPr=o("pretrained_model_name_or_path"),sPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),lPr=o("pretrained_model_name_or_path"),iPr=o(":"),dPr=l(),jTe=a("ul"),w4=a("li"),DTe=a("strong"),cPr=o("vision-encoder-decoder"),fPr=o(" \u2014 "),mU=a("a"),mPr=o("FlaxVisionEncoderDecoderModel"),gPr=o(" (Vision Encoder decoder model)"),hPr=l(),GTe=a("p"),pPr=o("Examples:"),_Pr=l(),f(FL.$$.fragment),this.h()},l(c){const u=o5t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var TL=s(ce);Ce=n(TL,"A",{id:!0,class:!0,href:!0});var OTe=s(Ce);lo=n(OTe,"SPAN",{});var VTe=s(lo);m(he.$$.fragment,VTe),VTe.forEach(t),OTe.forEach(t),Me=i(TL),Xo=n(TL,"SPAN",{});var bPr=s(Xo);qi=r(bPr,"Auto Classes"),bPr.forEach(t),TL.forEach(t),qf=i(c),fa=n(c,"P",{});var wPe=s(fa);Ni=r(wPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(wPe,"CODE",{});var vPr=s(ji);AE=r(vPr,"from_pretrained()"),vPr.forEach(t),Nf=r(wPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),wPe.forEach(t),xe=i(c),co=n(c,"P",{});var A4=s(co);Di=r(A4,"Instantiating one of "),On=n(A4,"A",{href:!0});var FPr=s(On);yE=r(FPr,"AutoConfig"),FPr.forEach(t),Vn=r(A4,", "),Xn=n(A4,"A",{href:!0});var TPr=s(Xn);LE=r(TPr,"AutoModel"),TPr.forEach(t),Gi=r(A4,`, and
`),zn=n(A4,"A",{href:!0});var MPr=s(zn);xE=r(MPr,"AutoTokenizer"),MPr.forEach(t),Oi=r(A4," will directly create a class of the relevant architecture. For instance"),A4.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var APe=s(ue);b7=r(APe,"will create a model that is an instance of "),Vi=n(APe,"A",{href:!0});var EPr=s(Vi);v7=r(EPr,"BertModel"),EPr.forEach(t),F7=r(APe,"."),APe.forEach(t),zo=i(c),Ga=n(c,"P",{});var yPe=s(Ga);T7=r(yPe,"There is one class of "),Df=n(yPe,"CODE",{});var CPr=s(Df);M7=r(CPr,"AutoModel"),CPr.forEach(t),IIe=r(yPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yPe.forEach(t),ERe=i(c),Xi=n(c,"H2",{class:!0});var LPe=s(Xi);Gf=n(LPe,"A",{id:!0,class:!0,href:!0});var wPr=s(Gf);nY=n(wPr,"SPAN",{});var APr=s(nY);m(kE.$$.fragment,APr),APr.forEach(t),wPr.forEach(t),qIe=i(LPe),sY=n(LPe,"SPAN",{});var yPr=s(sY);NIe=r(yPr,"Extending the Auto Classes"),yPr.forEach(t),LPe.forEach(t),CRe=i(c),Qn=n(c,"P",{});var gU=s(Qn);jIe=r(gU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),lY=n(gU,"CODE",{});var LPr=s(lY);DIe=r(LPr,"NewModel"),LPr.forEach(t),GIe=r(gU,", make sure you have a "),iY=n(gU,"CODE",{});var xPr=s(iY);OIe=r(xPr,"NewModelConfig"),xPr.forEach(t),VIe=r(gU,` then you can add those to the auto
classes like this:`),gU.forEach(t),wRe=i(c),m(SE.$$.fragment,c),ARe=i(c),E7=n(c,"P",{});var kPr=s(E7);XIe=r(kPr,"You will then be able to use the auto classes like you would usually do!"),kPr.forEach(t),yRe=i(c),m(Of.$$.fragment,c),LRe=i(c),zi=n(c,"H2",{class:!0});var xPe=s(zi);Vf=n(xPe,"A",{id:!0,class:!0,href:!0});var SPr=s(Vf);dY=n(SPr,"SPAN",{});var RPr=s(dY);m(RE.$$.fragment,RPr),RPr.forEach(t),SPr.forEach(t),zIe=i(xPe),cY=n(xPe,"SPAN",{});var BPr=s(cY);QIe=r(BPr,"AutoConfig"),BPr.forEach(t),xPe.forEach(t),xRe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(BE.$$.fragment,Vs),WIe=i(Vs),PE=n(Vs,"P",{});var kPe=s(PE);HIe=r(kPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),C7=n(kPe,"A",{href:!0});var PPr=s(C7);UIe=r(PPr,"from_pretrained()"),PPr.forEach(t),JIe=r(kPe," class method."),kPe.forEach(t),YIe=i(Vs),$E=n(Vs,"P",{});var SPe=s($E);KIe=r(SPe,"This class cannot be instantiated directly using "),fY=n(SPe,"CODE",{});var $Pr=s(fY);ZIe=r($Pr,"__init__()"),$Pr.forEach(t),eqe=r(SPe," (throws an error)."),SPe.forEach(t),oqe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(IE.$$.fragment,ga),rqe=i(ga),mY=n(ga,"P",{});var IPr=s(mY);tqe=r(IPr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),IPr.forEach(t),aqe=i(ga),Qi=n(ga,"P",{});var hU=s(Qi);nqe=r(hU,"The configuration class to instantiate is selected based on the "),gY=n(hU,"CODE",{});var qPr=s(gY);sqe=r(qPr,"model_type"),qPr.forEach(t),lqe=r(hU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),hY=n(hU,"CODE",{});var NPr=s(hY);iqe=r(NPr,"pretrained_model_name_or_path"),NPr.forEach(t),dqe=r(hU,":"),hU.forEach(t),cqe=i(ga),v=n(ga,"UL",{});var F=s(v);Xf=n(F,"LI",{});var XTe=s(Xf);pY=n(XTe,"STRONG",{});var jPr=s(pY);fqe=r(jPr,"albert"),jPr.forEach(t),mqe=r(XTe," \u2014 "),w7=n(XTe,"A",{href:!0});var DPr=s(w7);gqe=r(DPr,"AlbertConfig"),DPr.forEach(t),hqe=r(XTe," (ALBERT model)"),XTe.forEach(t),pqe=i(F),zf=n(F,"LI",{});var zTe=s(zf);_Y=n(zTe,"STRONG",{});var GPr=s(_Y);_qe=r(GPr,"bart"),GPr.forEach(t),uqe=r(zTe," \u2014 "),A7=n(zTe,"A",{href:!0});var OPr=s(A7);bqe=r(OPr,"BartConfig"),OPr.forEach(t),vqe=r(zTe," (BART model)"),zTe.forEach(t),Fqe=i(F),Qf=n(F,"LI",{});var QTe=s(Qf);uY=n(QTe,"STRONG",{});var VPr=s(uY);Tqe=r(VPr,"beit"),VPr.forEach(t),Mqe=r(QTe," \u2014 "),y7=n(QTe,"A",{href:!0});var XPr=s(y7);Eqe=r(XPr,"BeitConfig"),XPr.forEach(t),Cqe=r(QTe," (BEiT model)"),QTe.forEach(t),wqe=i(F),Wf=n(F,"LI",{});var WTe=s(Wf);bY=n(WTe,"STRONG",{});var zPr=s(bY);Aqe=r(zPr,"bert"),zPr.forEach(t),yqe=r(WTe," \u2014 "),L7=n(WTe,"A",{href:!0});var QPr=s(L7);Lqe=r(QPr,"BertConfig"),QPr.forEach(t),xqe=r(WTe," (BERT model)"),WTe.forEach(t),kqe=i(F),Hf=n(F,"LI",{});var HTe=s(Hf);vY=n(HTe,"STRONG",{});var WPr=s(vY);Sqe=r(WPr,"bert-generation"),WPr.forEach(t),Rqe=r(HTe," \u2014 "),x7=n(HTe,"A",{href:!0});var HPr=s(x7);Bqe=r(HPr,"BertGenerationConfig"),HPr.forEach(t),Pqe=r(HTe," (Bert Generation model)"),HTe.forEach(t),$qe=i(F),Uf=n(F,"LI",{});var UTe=s(Uf);FY=n(UTe,"STRONG",{});var UPr=s(FY);Iqe=r(UPr,"big_bird"),UPr.forEach(t),qqe=r(UTe," \u2014 "),k7=n(UTe,"A",{href:!0});var JPr=s(k7);Nqe=r(JPr,"BigBirdConfig"),JPr.forEach(t),jqe=r(UTe," (BigBird model)"),UTe.forEach(t),Dqe=i(F),Jf=n(F,"LI",{});var JTe=s(Jf);TY=n(JTe,"STRONG",{});var YPr=s(TY);Gqe=r(YPr,"bigbird_pegasus"),YPr.forEach(t),Oqe=r(JTe," \u2014 "),S7=n(JTe,"A",{href:!0});var KPr=s(S7);Vqe=r(KPr,"BigBirdPegasusConfig"),KPr.forEach(t),Xqe=r(JTe," (BigBirdPegasus model)"),JTe.forEach(t),zqe=i(F),Yf=n(F,"LI",{});var YTe=s(Yf);MY=n(YTe,"STRONG",{});var ZPr=s(MY);Qqe=r(ZPr,"blenderbot"),ZPr.forEach(t),Wqe=r(YTe," \u2014 "),R7=n(YTe,"A",{href:!0});var e$r=s(R7);Hqe=r(e$r,"BlenderbotConfig"),e$r.forEach(t),Uqe=r(YTe," (Blenderbot model)"),YTe.forEach(t),Jqe=i(F),Kf=n(F,"LI",{});var KTe=s(Kf);EY=n(KTe,"STRONG",{});var o$r=s(EY);Yqe=r(o$r,"blenderbot-small"),o$r.forEach(t),Kqe=r(KTe," \u2014 "),B7=n(KTe,"A",{href:!0});var r$r=s(B7);Zqe=r(r$r,"BlenderbotSmallConfig"),r$r.forEach(t),eNe=r(KTe," (BlenderbotSmall model)"),KTe.forEach(t),oNe=i(F),Zf=n(F,"LI",{});var ZTe=s(Zf);CY=n(ZTe,"STRONG",{});var t$r=s(CY);rNe=r(t$r,"camembert"),t$r.forEach(t),tNe=r(ZTe," \u2014 "),P7=n(ZTe,"A",{href:!0});var a$r=s(P7);aNe=r(a$r,"CamembertConfig"),a$r.forEach(t),nNe=r(ZTe," (CamemBERT model)"),ZTe.forEach(t),sNe=i(F),em=n(F,"LI",{});var e8e=s(em);wY=n(e8e,"STRONG",{});var n$r=s(wY);lNe=r(n$r,"canine"),n$r.forEach(t),iNe=r(e8e," \u2014 "),$7=n(e8e,"A",{href:!0});var s$r=s($7);dNe=r(s$r,"CanineConfig"),s$r.forEach(t),cNe=r(e8e," (Canine model)"),e8e.forEach(t),fNe=i(F),om=n(F,"LI",{});var o8e=s(om);AY=n(o8e,"STRONG",{});var l$r=s(AY);mNe=r(l$r,"clip"),l$r.forEach(t),gNe=r(o8e," \u2014 "),I7=n(o8e,"A",{href:!0});var i$r=s(I7);hNe=r(i$r,"CLIPConfig"),i$r.forEach(t),pNe=r(o8e," (CLIP model)"),o8e.forEach(t),_Ne=i(F),rm=n(F,"LI",{});var r8e=s(rm);yY=n(r8e,"STRONG",{});var d$r=s(yY);uNe=r(d$r,"convbert"),d$r.forEach(t),bNe=r(r8e," \u2014 "),q7=n(r8e,"A",{href:!0});var c$r=s(q7);vNe=r(c$r,"ConvBertConfig"),c$r.forEach(t),FNe=r(r8e," (ConvBERT model)"),r8e.forEach(t),TNe=i(F),tm=n(F,"LI",{});var t8e=s(tm);LY=n(t8e,"STRONG",{});var f$r=s(LY);MNe=r(f$r,"convnext"),f$r.forEach(t),ENe=r(t8e," \u2014 "),N7=n(t8e,"A",{href:!0});var m$r=s(N7);CNe=r(m$r,"ConvNextConfig"),m$r.forEach(t),wNe=r(t8e," (ConvNext model)"),t8e.forEach(t),ANe=i(F),am=n(F,"LI",{});var a8e=s(am);xY=n(a8e,"STRONG",{});var g$r=s(xY);yNe=r(g$r,"ctrl"),g$r.forEach(t),LNe=r(a8e," \u2014 "),j7=n(a8e,"A",{href:!0});var h$r=s(j7);xNe=r(h$r,"CTRLConfig"),h$r.forEach(t),kNe=r(a8e," (CTRL model)"),a8e.forEach(t),SNe=i(F),nm=n(F,"LI",{});var n8e=s(nm);kY=n(n8e,"STRONG",{});var p$r=s(kY);RNe=r(p$r,"data2vec-audio"),p$r.forEach(t),BNe=r(n8e," \u2014 "),D7=n(n8e,"A",{href:!0});var _$r=s(D7);PNe=r(_$r,"Data2VecAudioConfig"),_$r.forEach(t),$Ne=r(n8e," (Data2VecAudio model)"),n8e.forEach(t),INe=i(F),sm=n(F,"LI",{});var s8e=s(sm);SY=n(s8e,"STRONG",{});var u$r=s(SY);qNe=r(u$r,"data2vec-text"),u$r.forEach(t),NNe=r(s8e," \u2014 "),G7=n(s8e,"A",{href:!0});var b$r=s(G7);jNe=r(b$r,"Data2VecTextConfig"),b$r.forEach(t),DNe=r(s8e," (Data2VecText model)"),s8e.forEach(t),GNe=i(F),lm=n(F,"LI",{});var l8e=s(lm);RY=n(l8e,"STRONG",{});var v$r=s(RY);ONe=r(v$r,"data2vec-vision"),v$r.forEach(t),VNe=r(l8e," \u2014 "),O7=n(l8e,"A",{href:!0});var F$r=s(O7);XNe=r(F$r,"Data2VecVisionConfig"),F$r.forEach(t),zNe=r(l8e," (Data2VecVision model)"),l8e.forEach(t),QNe=i(F),im=n(F,"LI",{});var i8e=s(im);BY=n(i8e,"STRONG",{});var T$r=s(BY);WNe=r(T$r,"deberta"),T$r.forEach(t),HNe=r(i8e," \u2014 "),V7=n(i8e,"A",{href:!0});var M$r=s(V7);UNe=r(M$r,"DebertaConfig"),M$r.forEach(t),JNe=r(i8e," (DeBERTa model)"),i8e.forEach(t),YNe=i(F),dm=n(F,"LI",{});var d8e=s(dm);PY=n(d8e,"STRONG",{});var E$r=s(PY);KNe=r(E$r,"deberta-v2"),E$r.forEach(t),ZNe=r(d8e," \u2014 "),X7=n(d8e,"A",{href:!0});var C$r=s(X7);eje=r(C$r,"DebertaV2Config"),C$r.forEach(t),oje=r(d8e," (DeBERTa-v2 model)"),d8e.forEach(t),rje=i(F),cm=n(F,"LI",{});var c8e=s(cm);$Y=n(c8e,"STRONG",{});var w$r=s($Y);tje=r(w$r,"decision_transformer"),w$r.forEach(t),aje=r(c8e," \u2014 "),z7=n(c8e,"A",{href:!0});var A$r=s(z7);nje=r(A$r,"DecisionTransformerConfig"),A$r.forEach(t),sje=r(c8e," (Decision Transformer model)"),c8e.forEach(t),lje=i(F),fm=n(F,"LI",{});var f8e=s(fm);IY=n(f8e,"STRONG",{});var y$r=s(IY);ije=r(y$r,"deit"),y$r.forEach(t),dje=r(f8e," \u2014 "),Q7=n(f8e,"A",{href:!0});var L$r=s(Q7);cje=r(L$r,"DeiTConfig"),L$r.forEach(t),fje=r(f8e," (DeiT model)"),f8e.forEach(t),mje=i(F),mm=n(F,"LI",{});var m8e=s(mm);qY=n(m8e,"STRONG",{});var x$r=s(qY);gje=r(x$r,"detr"),x$r.forEach(t),hje=r(m8e," \u2014 "),W7=n(m8e,"A",{href:!0});var k$r=s(W7);pje=r(k$r,"DetrConfig"),k$r.forEach(t),_je=r(m8e," (DETR model)"),m8e.forEach(t),uje=i(F),gm=n(F,"LI",{});var g8e=s(gm);NY=n(g8e,"STRONG",{});var S$r=s(NY);bje=r(S$r,"distilbert"),S$r.forEach(t),vje=r(g8e," \u2014 "),H7=n(g8e,"A",{href:!0});var R$r=s(H7);Fje=r(R$r,"DistilBertConfig"),R$r.forEach(t),Tje=r(g8e," (DistilBERT model)"),g8e.forEach(t),Mje=i(F),hm=n(F,"LI",{});var h8e=s(hm);jY=n(h8e,"STRONG",{});var B$r=s(jY);Eje=r(B$r,"dpr"),B$r.forEach(t),Cje=r(h8e," \u2014 "),U7=n(h8e,"A",{href:!0});var P$r=s(U7);wje=r(P$r,"DPRConfig"),P$r.forEach(t),Aje=r(h8e," (DPR model)"),h8e.forEach(t),yje=i(F),pm=n(F,"LI",{});var p8e=s(pm);DY=n(p8e,"STRONG",{});var $$r=s(DY);Lje=r($$r,"dpt"),$$r.forEach(t),xje=r(p8e," \u2014 "),J7=n(p8e,"A",{href:!0});var I$r=s(J7);kje=r(I$r,"DPTConfig"),I$r.forEach(t),Sje=r(p8e," (DPT model)"),p8e.forEach(t),Rje=i(F),_m=n(F,"LI",{});var _8e=s(_m);GY=n(_8e,"STRONG",{});var q$r=s(GY);Bje=r(q$r,"electra"),q$r.forEach(t),Pje=r(_8e," \u2014 "),Y7=n(_8e,"A",{href:!0});var N$r=s(Y7);$je=r(N$r,"ElectraConfig"),N$r.forEach(t),Ije=r(_8e," (ELECTRA model)"),_8e.forEach(t),qje=i(F),um=n(F,"LI",{});var u8e=s(um);OY=n(u8e,"STRONG",{});var j$r=s(OY);Nje=r(j$r,"encoder-decoder"),j$r.forEach(t),jje=r(u8e," \u2014 "),K7=n(u8e,"A",{href:!0});var D$r=s(K7);Dje=r(D$r,"EncoderDecoderConfig"),D$r.forEach(t),Gje=r(u8e," (Encoder decoder model)"),u8e.forEach(t),Oje=i(F),bm=n(F,"LI",{});var b8e=s(bm);VY=n(b8e,"STRONG",{});var G$r=s(VY);Vje=r(G$r,"flaubert"),G$r.forEach(t),Xje=r(b8e," \u2014 "),Z7=n(b8e,"A",{href:!0});var O$r=s(Z7);zje=r(O$r,"FlaubertConfig"),O$r.forEach(t),Qje=r(b8e," (FlauBERT model)"),b8e.forEach(t),Wje=i(F),vm=n(F,"LI",{});var v8e=s(vm);XY=n(v8e,"STRONG",{});var V$r=s(XY);Hje=r(V$r,"fnet"),V$r.forEach(t),Uje=r(v8e," \u2014 "),ex=n(v8e,"A",{href:!0});var X$r=s(ex);Jje=r(X$r,"FNetConfig"),X$r.forEach(t),Yje=r(v8e," (FNet model)"),v8e.forEach(t),Kje=i(F),Fm=n(F,"LI",{});var F8e=s(Fm);zY=n(F8e,"STRONG",{});var z$r=s(zY);Zje=r(z$r,"fsmt"),z$r.forEach(t),eDe=r(F8e," \u2014 "),ox=n(F8e,"A",{href:!0});var Q$r=s(ox);oDe=r(Q$r,"FSMTConfig"),Q$r.forEach(t),rDe=r(F8e," (FairSeq Machine-Translation model)"),F8e.forEach(t),tDe=i(F),Tm=n(F,"LI",{});var T8e=s(Tm);QY=n(T8e,"STRONG",{});var W$r=s(QY);aDe=r(W$r,"funnel"),W$r.forEach(t),nDe=r(T8e," \u2014 "),rx=n(T8e,"A",{href:!0});var H$r=s(rx);sDe=r(H$r,"FunnelConfig"),H$r.forEach(t),lDe=r(T8e," (Funnel Transformer model)"),T8e.forEach(t),iDe=i(F),Mm=n(F,"LI",{});var M8e=s(Mm);WY=n(M8e,"STRONG",{});var U$r=s(WY);dDe=r(U$r,"glpn"),U$r.forEach(t),cDe=r(M8e," \u2014 "),tx=n(M8e,"A",{href:!0});var J$r=s(tx);fDe=r(J$r,"GLPNConfig"),J$r.forEach(t),mDe=r(M8e," (GLPN model)"),M8e.forEach(t),gDe=i(F),Em=n(F,"LI",{});var E8e=s(Em);HY=n(E8e,"STRONG",{});var Y$r=s(HY);hDe=r(Y$r,"gpt2"),Y$r.forEach(t),pDe=r(E8e," \u2014 "),ax=n(E8e,"A",{href:!0});var K$r=s(ax);_De=r(K$r,"GPT2Config"),K$r.forEach(t),uDe=r(E8e," (OpenAI GPT-2 model)"),E8e.forEach(t),bDe=i(F),Cm=n(F,"LI",{});var C8e=s(Cm);UY=n(C8e,"STRONG",{});var Z$r=s(UY);vDe=r(Z$r,"gpt_neo"),Z$r.forEach(t),FDe=r(C8e," \u2014 "),nx=n(C8e,"A",{href:!0});var eIr=s(nx);TDe=r(eIr,"GPTNeoConfig"),eIr.forEach(t),MDe=r(C8e," (GPT Neo model)"),C8e.forEach(t),EDe=i(F),wm=n(F,"LI",{});var w8e=s(wm);JY=n(w8e,"STRONG",{});var oIr=s(JY);CDe=r(oIr,"gptj"),oIr.forEach(t),wDe=r(w8e," \u2014 "),sx=n(w8e,"A",{href:!0});var rIr=s(sx);ADe=r(rIr,"GPTJConfig"),rIr.forEach(t),yDe=r(w8e," (GPT-J model)"),w8e.forEach(t),LDe=i(F),Am=n(F,"LI",{});var A8e=s(Am);YY=n(A8e,"STRONG",{});var tIr=s(YY);xDe=r(tIr,"hubert"),tIr.forEach(t),kDe=r(A8e," \u2014 "),lx=n(A8e,"A",{href:!0});var aIr=s(lx);SDe=r(aIr,"HubertConfig"),aIr.forEach(t),RDe=r(A8e," (Hubert model)"),A8e.forEach(t),BDe=i(F),ym=n(F,"LI",{});var y8e=s(ym);KY=n(y8e,"STRONG",{});var nIr=s(KY);PDe=r(nIr,"ibert"),nIr.forEach(t),$De=r(y8e," \u2014 "),ix=n(y8e,"A",{href:!0});var sIr=s(ix);IDe=r(sIr,"IBertConfig"),sIr.forEach(t),qDe=r(y8e," (I-BERT model)"),y8e.forEach(t),NDe=i(F),Lm=n(F,"LI",{});var L8e=s(Lm);ZY=n(L8e,"STRONG",{});var lIr=s(ZY);jDe=r(lIr,"imagegpt"),lIr.forEach(t),DDe=r(L8e," \u2014 "),dx=n(L8e,"A",{href:!0});var iIr=s(dx);GDe=r(iIr,"ImageGPTConfig"),iIr.forEach(t),ODe=r(L8e," (ImageGPT model)"),L8e.forEach(t),VDe=i(F),xm=n(F,"LI",{});var x8e=s(xm);eK=n(x8e,"STRONG",{});var dIr=s(eK);XDe=r(dIr,"layoutlm"),dIr.forEach(t),zDe=r(x8e," \u2014 "),cx=n(x8e,"A",{href:!0});var cIr=s(cx);QDe=r(cIr,"LayoutLMConfig"),cIr.forEach(t),WDe=r(x8e," (LayoutLM model)"),x8e.forEach(t),HDe=i(F),km=n(F,"LI",{});var k8e=s(km);oK=n(k8e,"STRONG",{});var fIr=s(oK);UDe=r(fIr,"layoutlmv2"),fIr.forEach(t),JDe=r(k8e," \u2014 "),fx=n(k8e,"A",{href:!0});var mIr=s(fx);YDe=r(mIr,"LayoutLMv2Config"),mIr.forEach(t),KDe=r(k8e," (LayoutLMv2 model)"),k8e.forEach(t),ZDe=i(F),Sm=n(F,"LI",{});var S8e=s(Sm);rK=n(S8e,"STRONG",{});var gIr=s(rK);eGe=r(gIr,"led"),gIr.forEach(t),oGe=r(S8e," \u2014 "),mx=n(S8e,"A",{href:!0});var hIr=s(mx);rGe=r(hIr,"LEDConfig"),hIr.forEach(t),tGe=r(S8e," (LED model)"),S8e.forEach(t),aGe=i(F),Rm=n(F,"LI",{});var R8e=s(Rm);tK=n(R8e,"STRONG",{});var pIr=s(tK);nGe=r(pIr,"longformer"),pIr.forEach(t),sGe=r(R8e," \u2014 "),gx=n(R8e,"A",{href:!0});var _Ir=s(gx);lGe=r(_Ir,"LongformerConfig"),_Ir.forEach(t),iGe=r(R8e," (Longformer model)"),R8e.forEach(t),dGe=i(F),Bm=n(F,"LI",{});var B8e=s(Bm);aK=n(B8e,"STRONG",{});var uIr=s(aK);cGe=r(uIr,"luke"),uIr.forEach(t),fGe=r(B8e," \u2014 "),hx=n(B8e,"A",{href:!0});var bIr=s(hx);mGe=r(bIr,"LukeConfig"),bIr.forEach(t),gGe=r(B8e," (LUKE model)"),B8e.forEach(t),hGe=i(F),Pm=n(F,"LI",{});var P8e=s(Pm);nK=n(P8e,"STRONG",{});var vIr=s(nK);pGe=r(vIr,"lxmert"),vIr.forEach(t),_Ge=r(P8e," \u2014 "),px=n(P8e,"A",{href:!0});var FIr=s(px);uGe=r(FIr,"LxmertConfig"),FIr.forEach(t),bGe=r(P8e," (LXMERT model)"),P8e.forEach(t),vGe=i(F),$m=n(F,"LI",{});var $8e=s($m);sK=n($8e,"STRONG",{});var TIr=s(sK);FGe=r(TIr,"m2m_100"),TIr.forEach(t),TGe=r($8e," \u2014 "),_x=n($8e,"A",{href:!0});var MIr=s(_x);MGe=r(MIr,"M2M100Config"),MIr.forEach(t),EGe=r($8e," (M2M100 model)"),$8e.forEach(t),CGe=i(F),Im=n(F,"LI",{});var I8e=s(Im);lK=n(I8e,"STRONG",{});var EIr=s(lK);wGe=r(EIr,"marian"),EIr.forEach(t),AGe=r(I8e," \u2014 "),ux=n(I8e,"A",{href:!0});var CIr=s(ux);yGe=r(CIr,"MarianConfig"),CIr.forEach(t),LGe=r(I8e," (Marian model)"),I8e.forEach(t),xGe=i(F),qm=n(F,"LI",{});var q8e=s(qm);iK=n(q8e,"STRONG",{});var wIr=s(iK);kGe=r(wIr,"maskformer"),wIr.forEach(t),SGe=r(q8e," \u2014 "),bx=n(q8e,"A",{href:!0});var AIr=s(bx);RGe=r(AIr,"MaskFormerConfig"),AIr.forEach(t),BGe=r(q8e," (MaskFormer model)"),q8e.forEach(t),PGe=i(F),Nm=n(F,"LI",{});var N8e=s(Nm);dK=n(N8e,"STRONG",{});var yIr=s(dK);$Ge=r(yIr,"mbart"),yIr.forEach(t),IGe=r(N8e," \u2014 "),vx=n(N8e,"A",{href:!0});var LIr=s(vx);qGe=r(LIr,"MBartConfig"),LIr.forEach(t),NGe=r(N8e," (mBART model)"),N8e.forEach(t),jGe=i(F),jm=n(F,"LI",{});var j8e=s(jm);cK=n(j8e,"STRONG",{});var xIr=s(cK);DGe=r(xIr,"megatron-bert"),xIr.forEach(t),GGe=r(j8e," \u2014 "),Fx=n(j8e,"A",{href:!0});var kIr=s(Fx);OGe=r(kIr,"MegatronBertConfig"),kIr.forEach(t),VGe=r(j8e," (MegatronBert model)"),j8e.forEach(t),XGe=i(F),Dm=n(F,"LI",{});var D8e=s(Dm);fK=n(D8e,"STRONG",{});var SIr=s(fK);zGe=r(SIr,"mobilebert"),SIr.forEach(t),QGe=r(D8e," \u2014 "),Tx=n(D8e,"A",{href:!0});var RIr=s(Tx);WGe=r(RIr,"MobileBertConfig"),RIr.forEach(t),HGe=r(D8e," (MobileBERT model)"),D8e.forEach(t),UGe=i(F),Gm=n(F,"LI",{});var G8e=s(Gm);mK=n(G8e,"STRONG",{});var BIr=s(mK);JGe=r(BIr,"mpnet"),BIr.forEach(t),YGe=r(G8e," \u2014 "),Mx=n(G8e,"A",{href:!0});var PIr=s(Mx);KGe=r(PIr,"MPNetConfig"),PIr.forEach(t),ZGe=r(G8e," (MPNet model)"),G8e.forEach(t),eOe=i(F),Om=n(F,"LI",{});var O8e=s(Om);gK=n(O8e,"STRONG",{});var $Ir=s(gK);oOe=r($Ir,"mt5"),$Ir.forEach(t),rOe=r(O8e," \u2014 "),Ex=n(O8e,"A",{href:!0});var IIr=s(Ex);tOe=r(IIr,"MT5Config"),IIr.forEach(t),aOe=r(O8e," (mT5 model)"),O8e.forEach(t),nOe=i(F),Vm=n(F,"LI",{});var V8e=s(Vm);hK=n(V8e,"STRONG",{});var qIr=s(hK);sOe=r(qIr,"nystromformer"),qIr.forEach(t),lOe=r(V8e," \u2014 "),Cx=n(V8e,"A",{href:!0});var NIr=s(Cx);iOe=r(NIr,"NystromformerConfig"),NIr.forEach(t),dOe=r(V8e," (Nystromformer model)"),V8e.forEach(t),cOe=i(F),Xm=n(F,"LI",{});var X8e=s(Xm);pK=n(X8e,"STRONG",{});var jIr=s(pK);fOe=r(jIr,"openai-gpt"),jIr.forEach(t),mOe=r(X8e," \u2014 "),wx=n(X8e,"A",{href:!0});var DIr=s(wx);gOe=r(DIr,"OpenAIGPTConfig"),DIr.forEach(t),hOe=r(X8e," (OpenAI GPT model)"),X8e.forEach(t),pOe=i(F),zm=n(F,"LI",{});var z8e=s(zm);_K=n(z8e,"STRONG",{});var GIr=s(_K);_Oe=r(GIr,"pegasus"),GIr.forEach(t),uOe=r(z8e," \u2014 "),Ax=n(z8e,"A",{href:!0});var OIr=s(Ax);bOe=r(OIr,"PegasusConfig"),OIr.forEach(t),vOe=r(z8e," (Pegasus model)"),z8e.forEach(t),FOe=i(F),Qm=n(F,"LI",{});var Q8e=s(Qm);uK=n(Q8e,"STRONG",{});var VIr=s(uK);TOe=r(VIr,"perceiver"),VIr.forEach(t),MOe=r(Q8e," \u2014 "),yx=n(Q8e,"A",{href:!0});var XIr=s(yx);EOe=r(XIr,"PerceiverConfig"),XIr.forEach(t),COe=r(Q8e," (Perceiver model)"),Q8e.forEach(t),wOe=i(F),Wm=n(F,"LI",{});var W8e=s(Wm);bK=n(W8e,"STRONG",{});var zIr=s(bK);AOe=r(zIr,"plbart"),zIr.forEach(t),yOe=r(W8e," \u2014 "),Lx=n(W8e,"A",{href:!0});var QIr=s(Lx);LOe=r(QIr,"PLBartConfig"),QIr.forEach(t),xOe=r(W8e," (PLBart model)"),W8e.forEach(t),kOe=i(F),Hm=n(F,"LI",{});var H8e=s(Hm);vK=n(H8e,"STRONG",{});var WIr=s(vK);SOe=r(WIr,"poolformer"),WIr.forEach(t),ROe=r(H8e," \u2014 "),xx=n(H8e,"A",{href:!0});var HIr=s(xx);BOe=r(HIr,"PoolFormerConfig"),HIr.forEach(t),POe=r(H8e," (PoolFormer model)"),H8e.forEach(t),$Oe=i(F),Um=n(F,"LI",{});var U8e=s(Um);FK=n(U8e,"STRONG",{});var UIr=s(FK);IOe=r(UIr,"prophetnet"),UIr.forEach(t),qOe=r(U8e," \u2014 "),kx=n(U8e,"A",{href:!0});var JIr=s(kx);NOe=r(JIr,"ProphetNetConfig"),JIr.forEach(t),jOe=r(U8e," (ProphetNet model)"),U8e.forEach(t),DOe=i(F),Jm=n(F,"LI",{});var J8e=s(Jm);TK=n(J8e,"STRONG",{});var YIr=s(TK);GOe=r(YIr,"qdqbert"),YIr.forEach(t),OOe=r(J8e," \u2014 "),Sx=n(J8e,"A",{href:!0});var KIr=s(Sx);VOe=r(KIr,"QDQBertConfig"),KIr.forEach(t),XOe=r(J8e," (QDQBert model)"),J8e.forEach(t),zOe=i(F),Ym=n(F,"LI",{});var Y8e=s(Ym);MK=n(Y8e,"STRONG",{});var ZIr=s(MK);QOe=r(ZIr,"rag"),ZIr.forEach(t),WOe=r(Y8e," \u2014 "),Rx=n(Y8e,"A",{href:!0});var eqr=s(Rx);HOe=r(eqr,"RagConfig"),eqr.forEach(t),UOe=r(Y8e," (RAG model)"),Y8e.forEach(t),JOe=i(F),Km=n(F,"LI",{});var K8e=s(Km);EK=n(K8e,"STRONG",{});var oqr=s(EK);YOe=r(oqr,"realm"),oqr.forEach(t),KOe=r(K8e," \u2014 "),Bx=n(K8e,"A",{href:!0});var rqr=s(Bx);ZOe=r(rqr,"RealmConfig"),rqr.forEach(t),eVe=r(K8e," (Realm model)"),K8e.forEach(t),oVe=i(F),Zm=n(F,"LI",{});var Z8e=s(Zm);CK=n(Z8e,"STRONG",{});var tqr=s(CK);rVe=r(tqr,"reformer"),tqr.forEach(t),tVe=r(Z8e," \u2014 "),Px=n(Z8e,"A",{href:!0});var aqr=s(Px);aVe=r(aqr,"ReformerConfig"),aqr.forEach(t),nVe=r(Z8e," (Reformer model)"),Z8e.forEach(t),sVe=i(F),eg=n(F,"LI",{});var e9e=s(eg);wK=n(e9e,"STRONG",{});var nqr=s(wK);lVe=r(nqr,"regnet"),nqr.forEach(t),iVe=r(e9e," \u2014 "),$x=n(e9e,"A",{href:!0});var sqr=s($x);dVe=r(sqr,"RegNetConfig"),sqr.forEach(t),cVe=r(e9e," (RegNet model)"),e9e.forEach(t),fVe=i(F),og=n(F,"LI",{});var o9e=s(og);AK=n(o9e,"STRONG",{});var lqr=s(AK);mVe=r(lqr,"rembert"),lqr.forEach(t),gVe=r(o9e," \u2014 "),Ix=n(o9e,"A",{href:!0});var iqr=s(Ix);hVe=r(iqr,"RemBertConfig"),iqr.forEach(t),pVe=r(o9e," (RemBERT model)"),o9e.forEach(t),_Ve=i(F),rg=n(F,"LI",{});var r9e=s(rg);yK=n(r9e,"STRONG",{});var dqr=s(yK);uVe=r(dqr,"resnet"),dqr.forEach(t),bVe=r(r9e," \u2014 "),qx=n(r9e,"A",{href:!0});var cqr=s(qx);vVe=r(cqr,"ResNetConfig"),cqr.forEach(t),FVe=r(r9e," (ResNet model)"),r9e.forEach(t),TVe=i(F),tg=n(F,"LI",{});var t9e=s(tg);LK=n(t9e,"STRONG",{});var fqr=s(LK);MVe=r(fqr,"retribert"),fqr.forEach(t),EVe=r(t9e," \u2014 "),Nx=n(t9e,"A",{href:!0});var mqr=s(Nx);CVe=r(mqr,"RetriBertConfig"),mqr.forEach(t),wVe=r(t9e," (RetriBERT model)"),t9e.forEach(t),AVe=i(F),ag=n(F,"LI",{});var a9e=s(ag);xK=n(a9e,"STRONG",{});var gqr=s(xK);yVe=r(gqr,"roberta"),gqr.forEach(t),LVe=r(a9e," \u2014 "),jx=n(a9e,"A",{href:!0});var hqr=s(jx);xVe=r(hqr,"RobertaConfig"),hqr.forEach(t),kVe=r(a9e," (RoBERTa model)"),a9e.forEach(t),SVe=i(F),ng=n(F,"LI",{});var n9e=s(ng);kK=n(n9e,"STRONG",{});var pqr=s(kK);RVe=r(pqr,"roformer"),pqr.forEach(t),BVe=r(n9e," \u2014 "),Dx=n(n9e,"A",{href:!0});var _qr=s(Dx);PVe=r(_qr,"RoFormerConfig"),_qr.forEach(t),$Ve=r(n9e," (RoFormer model)"),n9e.forEach(t),IVe=i(F),sg=n(F,"LI",{});var s9e=s(sg);SK=n(s9e,"STRONG",{});var uqr=s(SK);qVe=r(uqr,"segformer"),uqr.forEach(t),NVe=r(s9e," \u2014 "),Gx=n(s9e,"A",{href:!0});var bqr=s(Gx);jVe=r(bqr,"SegformerConfig"),bqr.forEach(t),DVe=r(s9e," (SegFormer model)"),s9e.forEach(t),GVe=i(F),lg=n(F,"LI",{});var l9e=s(lg);RK=n(l9e,"STRONG",{});var vqr=s(RK);OVe=r(vqr,"sew"),vqr.forEach(t),VVe=r(l9e," \u2014 "),Ox=n(l9e,"A",{href:!0});var Fqr=s(Ox);XVe=r(Fqr,"SEWConfig"),Fqr.forEach(t),zVe=r(l9e," (SEW model)"),l9e.forEach(t),QVe=i(F),ig=n(F,"LI",{});var i9e=s(ig);BK=n(i9e,"STRONG",{});var Tqr=s(BK);WVe=r(Tqr,"sew-d"),Tqr.forEach(t),HVe=r(i9e," \u2014 "),Vx=n(i9e,"A",{href:!0});var Mqr=s(Vx);UVe=r(Mqr,"SEWDConfig"),Mqr.forEach(t),JVe=r(i9e," (SEW-D model)"),i9e.forEach(t),YVe=i(F),dg=n(F,"LI",{});var d9e=s(dg);PK=n(d9e,"STRONG",{});var Eqr=s(PK);KVe=r(Eqr,"speech-encoder-decoder"),Eqr.forEach(t),ZVe=r(d9e," \u2014 "),Xx=n(d9e,"A",{href:!0});var Cqr=s(Xx);eXe=r(Cqr,"SpeechEncoderDecoderConfig"),Cqr.forEach(t),oXe=r(d9e," (Speech Encoder decoder model)"),d9e.forEach(t),rXe=i(F),cg=n(F,"LI",{});var c9e=s(cg);$K=n(c9e,"STRONG",{});var wqr=s($K);tXe=r(wqr,"speech_to_text"),wqr.forEach(t),aXe=r(c9e," \u2014 "),zx=n(c9e,"A",{href:!0});var Aqr=s(zx);nXe=r(Aqr,"Speech2TextConfig"),Aqr.forEach(t),sXe=r(c9e," (Speech2Text model)"),c9e.forEach(t),lXe=i(F),fg=n(F,"LI",{});var f9e=s(fg);IK=n(f9e,"STRONG",{});var yqr=s(IK);iXe=r(yqr,"speech_to_text_2"),yqr.forEach(t),dXe=r(f9e," \u2014 "),Qx=n(f9e,"A",{href:!0});var Lqr=s(Qx);cXe=r(Lqr,"Speech2Text2Config"),Lqr.forEach(t),fXe=r(f9e," (Speech2Text2 model)"),f9e.forEach(t),mXe=i(F),mg=n(F,"LI",{});var m9e=s(mg);qK=n(m9e,"STRONG",{});var xqr=s(qK);gXe=r(xqr,"splinter"),xqr.forEach(t),hXe=r(m9e," \u2014 "),Wx=n(m9e,"A",{href:!0});var kqr=s(Wx);pXe=r(kqr,"SplinterConfig"),kqr.forEach(t),_Xe=r(m9e," (Splinter model)"),m9e.forEach(t),uXe=i(F),gg=n(F,"LI",{});var g9e=s(gg);NK=n(g9e,"STRONG",{});var Sqr=s(NK);bXe=r(Sqr,"squeezebert"),Sqr.forEach(t),vXe=r(g9e," \u2014 "),Hx=n(g9e,"A",{href:!0});var Rqr=s(Hx);FXe=r(Rqr,"SqueezeBertConfig"),Rqr.forEach(t),TXe=r(g9e," (SqueezeBERT model)"),g9e.forEach(t),MXe=i(F),hg=n(F,"LI",{});var h9e=s(hg);jK=n(h9e,"STRONG",{});var Bqr=s(jK);EXe=r(Bqr,"swin"),Bqr.forEach(t),CXe=r(h9e," \u2014 "),Ux=n(h9e,"A",{href:!0});var Pqr=s(Ux);wXe=r(Pqr,"SwinConfig"),Pqr.forEach(t),AXe=r(h9e," (Swin model)"),h9e.forEach(t),yXe=i(F),pg=n(F,"LI",{});var p9e=s(pg);DK=n(p9e,"STRONG",{});var $qr=s(DK);LXe=r($qr,"t5"),$qr.forEach(t),xXe=r(p9e," \u2014 "),Jx=n(p9e,"A",{href:!0});var Iqr=s(Jx);kXe=r(Iqr,"T5Config"),Iqr.forEach(t),SXe=r(p9e," (T5 model)"),p9e.forEach(t),RXe=i(F),_g=n(F,"LI",{});var _9e=s(_g);GK=n(_9e,"STRONG",{});var qqr=s(GK);BXe=r(qqr,"tapas"),qqr.forEach(t),PXe=r(_9e," \u2014 "),Yx=n(_9e,"A",{href:!0});var Nqr=s(Yx);$Xe=r(Nqr,"TapasConfig"),Nqr.forEach(t),IXe=r(_9e," (TAPAS model)"),_9e.forEach(t),qXe=i(F),ug=n(F,"LI",{});var u9e=s(ug);OK=n(u9e,"STRONG",{});var jqr=s(OK);NXe=r(jqr,"tapex"),jqr.forEach(t),jXe=r(u9e," \u2014 "),Kx=n(u9e,"A",{href:!0});var Dqr=s(Kx);DXe=r(Dqr,"BartConfig"),Dqr.forEach(t),GXe=r(u9e," (TAPEX model)"),u9e.forEach(t),OXe=i(F),bg=n(F,"LI",{});var b9e=s(bg);VK=n(b9e,"STRONG",{});var Gqr=s(VK);VXe=r(Gqr,"transfo-xl"),Gqr.forEach(t),XXe=r(b9e," \u2014 "),Zx=n(b9e,"A",{href:!0});var Oqr=s(Zx);zXe=r(Oqr,"TransfoXLConfig"),Oqr.forEach(t),QXe=r(b9e," (Transformer-XL model)"),b9e.forEach(t),WXe=i(F),vg=n(F,"LI",{});var v9e=s(vg);XK=n(v9e,"STRONG",{});var Vqr=s(XK);HXe=r(Vqr,"trocr"),Vqr.forEach(t),UXe=r(v9e," \u2014 "),ek=n(v9e,"A",{href:!0});var Xqr=s(ek);JXe=r(Xqr,"TrOCRConfig"),Xqr.forEach(t),YXe=r(v9e," (TrOCR model)"),v9e.forEach(t),KXe=i(F),Fg=n(F,"LI",{});var F9e=s(Fg);zK=n(F9e,"STRONG",{});var zqr=s(zK);ZXe=r(zqr,"unispeech"),zqr.forEach(t),eze=r(F9e," \u2014 "),ok=n(F9e,"A",{href:!0});var Qqr=s(ok);oze=r(Qqr,"UniSpeechConfig"),Qqr.forEach(t),rze=r(F9e," (UniSpeech model)"),F9e.forEach(t),tze=i(F),Tg=n(F,"LI",{});var T9e=s(Tg);QK=n(T9e,"STRONG",{});var Wqr=s(QK);aze=r(Wqr,"unispeech-sat"),Wqr.forEach(t),nze=r(T9e," \u2014 "),rk=n(T9e,"A",{href:!0});var Hqr=s(rk);sze=r(Hqr,"UniSpeechSatConfig"),Hqr.forEach(t),lze=r(T9e," (UniSpeechSat model)"),T9e.forEach(t),ize=i(F),Mg=n(F,"LI",{});var M9e=s(Mg);WK=n(M9e,"STRONG",{});var Uqr=s(WK);dze=r(Uqr,"van"),Uqr.forEach(t),cze=r(M9e," \u2014 "),tk=n(M9e,"A",{href:!0});var Jqr=s(tk);fze=r(Jqr,"VanConfig"),Jqr.forEach(t),mze=r(M9e," (VAN model)"),M9e.forEach(t),gze=i(F),Eg=n(F,"LI",{});var E9e=s(Eg);HK=n(E9e,"STRONG",{});var Yqr=s(HK);hze=r(Yqr,"vilt"),Yqr.forEach(t),pze=r(E9e," \u2014 "),ak=n(E9e,"A",{href:!0});var Kqr=s(ak);_ze=r(Kqr,"ViltConfig"),Kqr.forEach(t),uze=r(E9e," (ViLT model)"),E9e.forEach(t),bze=i(F),Cg=n(F,"LI",{});var C9e=s(Cg);UK=n(C9e,"STRONG",{});var Zqr=s(UK);vze=r(Zqr,"vision-encoder-decoder"),Zqr.forEach(t),Fze=r(C9e," \u2014 "),nk=n(C9e,"A",{href:!0});var eNr=s(nk);Tze=r(eNr,"VisionEncoderDecoderConfig"),eNr.forEach(t),Mze=r(C9e," (Vision Encoder decoder model)"),C9e.forEach(t),Eze=i(F),wg=n(F,"LI",{});var w9e=s(wg);JK=n(w9e,"STRONG",{});var oNr=s(JK);Cze=r(oNr,"vision-text-dual-encoder"),oNr.forEach(t),wze=r(w9e," \u2014 "),sk=n(w9e,"A",{href:!0});var rNr=s(sk);Aze=r(rNr,"VisionTextDualEncoderConfig"),rNr.forEach(t),yze=r(w9e," (VisionTextDualEncoder model)"),w9e.forEach(t),Lze=i(F),Ag=n(F,"LI",{});var A9e=s(Ag);YK=n(A9e,"STRONG",{});var tNr=s(YK);xze=r(tNr,"visual_bert"),tNr.forEach(t),kze=r(A9e," \u2014 "),lk=n(A9e,"A",{href:!0});var aNr=s(lk);Sze=r(aNr,"VisualBertConfig"),aNr.forEach(t),Rze=r(A9e," (VisualBert model)"),A9e.forEach(t),Bze=i(F),yg=n(F,"LI",{});var y9e=s(yg);KK=n(y9e,"STRONG",{});var nNr=s(KK);Pze=r(nNr,"vit"),nNr.forEach(t),$ze=r(y9e," \u2014 "),ik=n(y9e,"A",{href:!0});var sNr=s(ik);Ize=r(sNr,"ViTConfig"),sNr.forEach(t),qze=r(y9e," (ViT model)"),y9e.forEach(t),Nze=i(F),Lg=n(F,"LI",{});var L9e=s(Lg);ZK=n(L9e,"STRONG",{});var lNr=s(ZK);jze=r(lNr,"vit_mae"),lNr.forEach(t),Dze=r(L9e," \u2014 "),dk=n(L9e,"A",{href:!0});var iNr=s(dk);Gze=r(iNr,"ViTMAEConfig"),iNr.forEach(t),Oze=r(L9e," (ViTMAE model)"),L9e.forEach(t),Vze=i(F),xg=n(F,"LI",{});var x9e=s(xg);eZ=n(x9e,"STRONG",{});var dNr=s(eZ);Xze=r(dNr,"wav2vec2"),dNr.forEach(t),zze=r(x9e," \u2014 "),ck=n(x9e,"A",{href:!0});var cNr=s(ck);Qze=r(cNr,"Wav2Vec2Config"),cNr.forEach(t),Wze=r(x9e," (Wav2Vec2 model)"),x9e.forEach(t),Hze=i(F),kg=n(F,"LI",{});var k9e=s(kg);oZ=n(k9e,"STRONG",{});var fNr=s(oZ);Uze=r(fNr,"wavlm"),fNr.forEach(t),Jze=r(k9e," \u2014 "),fk=n(k9e,"A",{href:!0});var mNr=s(fk);Yze=r(mNr,"WavLMConfig"),mNr.forEach(t),Kze=r(k9e," (WavLM model)"),k9e.forEach(t),Zze=i(F),Sg=n(F,"LI",{});var S9e=s(Sg);rZ=n(S9e,"STRONG",{});var gNr=s(rZ);eQe=r(gNr,"xglm"),gNr.forEach(t),oQe=r(S9e," \u2014 "),mk=n(S9e,"A",{href:!0});var hNr=s(mk);rQe=r(hNr,"XGLMConfig"),hNr.forEach(t),tQe=r(S9e," (XGLM model)"),S9e.forEach(t),aQe=i(F),Rg=n(F,"LI",{});var R9e=s(Rg);tZ=n(R9e,"STRONG",{});var pNr=s(tZ);nQe=r(pNr,"xlm"),pNr.forEach(t),sQe=r(R9e," \u2014 "),gk=n(R9e,"A",{href:!0});var _Nr=s(gk);lQe=r(_Nr,"XLMConfig"),_Nr.forEach(t),iQe=r(R9e," (XLM model)"),R9e.forEach(t),dQe=i(F),Bg=n(F,"LI",{});var B9e=s(Bg);aZ=n(B9e,"STRONG",{});var uNr=s(aZ);cQe=r(uNr,"xlm-prophetnet"),uNr.forEach(t),fQe=r(B9e," \u2014 "),hk=n(B9e,"A",{href:!0});var bNr=s(hk);mQe=r(bNr,"XLMProphetNetConfig"),bNr.forEach(t),gQe=r(B9e," (XLMProphetNet model)"),B9e.forEach(t),hQe=i(F),Pg=n(F,"LI",{});var P9e=s(Pg);nZ=n(P9e,"STRONG",{});var vNr=s(nZ);pQe=r(vNr,"xlm-roberta"),vNr.forEach(t),_Qe=r(P9e," \u2014 "),pk=n(P9e,"A",{href:!0});var FNr=s(pk);uQe=r(FNr,"XLMRobertaConfig"),FNr.forEach(t),bQe=r(P9e," (XLM-RoBERTa model)"),P9e.forEach(t),vQe=i(F),$g=n(F,"LI",{});var $9e=s($g);sZ=n($9e,"STRONG",{});var TNr=s(sZ);FQe=r(TNr,"xlm-roberta-xl"),TNr.forEach(t),TQe=r($9e," \u2014 "),_k=n($9e,"A",{href:!0});var MNr=s(_k);MQe=r(MNr,"XLMRobertaXLConfig"),MNr.forEach(t),EQe=r($9e," (XLM-RoBERTa-XL model)"),$9e.forEach(t),CQe=i(F),Ig=n(F,"LI",{});var I9e=s(Ig);lZ=n(I9e,"STRONG",{});var ENr=s(lZ);wQe=r(ENr,"xlnet"),ENr.forEach(t),AQe=r(I9e," \u2014 "),uk=n(I9e,"A",{href:!0});var CNr=s(uk);yQe=r(CNr,"XLNetConfig"),CNr.forEach(t),LQe=r(I9e," (XLNet model)"),I9e.forEach(t),xQe=i(F),qg=n(F,"LI",{});var q9e=s(qg);iZ=n(q9e,"STRONG",{});var wNr=s(iZ);kQe=r(wNr,"yoso"),wNr.forEach(t),SQe=r(q9e," \u2014 "),bk=n(q9e,"A",{href:!0});var ANr=s(bk);RQe=r(ANr,"YosoConfig"),ANr.forEach(t),BQe=r(q9e," (YOSO model)"),q9e.forEach(t),F.forEach(t),PQe=i(ga),dZ=n(ga,"P",{});var yNr=s(dZ);$Qe=r(yNr,"Examples:"),yNr.forEach(t),IQe=i(ga),m(qE.$$.fragment,ga),ga.forEach(t),qQe=i(Vs),Ng=n(Vs,"DIV",{class:!0});var RPe=s(Ng);m(NE.$$.fragment,RPe),NQe=i(RPe),cZ=n(RPe,"P",{});var LNr=s(cZ);jQe=r(LNr,"Register a new configuration for this class."),LNr.forEach(t),RPe.forEach(t),Vs.forEach(t),kRe=i(c),Wi=n(c,"H2",{class:!0});var BPe=s(Wi);jg=n(BPe,"A",{id:!0,class:!0,href:!0});var xNr=s(jg);fZ=n(xNr,"SPAN",{});var kNr=s(fZ);m(jE.$$.fragment,kNr),kNr.forEach(t),xNr.forEach(t),DQe=i(BPe),mZ=n(BPe,"SPAN",{});var SNr=s(mZ);GQe=r(SNr,"AutoTokenizer"),SNr.forEach(t),BPe.forEach(t),SRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(DE.$$.fragment,Xs),OQe=i(Xs),GE=n(Xs,"P",{});var PPe=s(GE);VQe=r(PPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),vk=n(PPe,"A",{href:!0});var RNr=s(vk);XQe=r(RNr,"AutoTokenizer.from_pretrained()"),RNr.forEach(t),zQe=r(PPe," class method."),PPe.forEach(t),QQe=i(Xs),OE=n(Xs,"P",{});var $Pe=s(OE);WQe=r($Pe,"This class cannot be instantiated directly using "),gZ=n($Pe,"CODE",{});var BNr=s(gZ);HQe=r(BNr,"__init__()"),BNr.forEach(t),UQe=r($Pe," (throws an error)."),$Pe.forEach(t),JQe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(VE.$$.fragment,ha),YQe=i(ha),hZ=n(ha,"P",{});var PNr=s(hZ);KQe=r(PNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),PNr.forEach(t),ZQe=i(ha),Oa=n(ha,"P",{});var y4=s(Oa);eWe=r(y4,"The tokenizer class to instantiate is selected based on the "),pZ=n(y4,"CODE",{});var $Nr=s(pZ);oWe=r($Nr,"model_type"),$Nr.forEach(t),rWe=r(y4,` property of the config object (either
passed as an argument or loaded from `),_Z=n(y4,"CODE",{});var INr=s(_Z);tWe=r(INr,"pretrained_model_name_or_path"),INr.forEach(t),aWe=r(y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uZ=n(y4,"CODE",{});var qNr=s(uZ);nWe=r(qNr,"pretrained_model_name_or_path"),qNr.forEach(t),sWe=r(y4,":"),y4.forEach(t),lWe=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var ML=s(Wn);bZ=n(ML,"STRONG",{});var NNr=s(bZ);iWe=r(NNr,"albert"),NNr.forEach(t),dWe=r(ML," \u2014 "),Fk=n(ML,"A",{href:!0});var jNr=s(Fk);cWe=r(jNr,"AlbertTokenizer"),jNr.forEach(t),fWe=r(ML," or "),Tk=n(ML,"A",{href:!0});var DNr=s(Tk);mWe=r(DNr,"AlbertTokenizerFast"),DNr.forEach(t),gWe=r(ML," (ALBERT model)"),ML.forEach(t),hWe=i(w),Hn=n(w,"LI",{});var EL=s(Hn);vZ=n(EL,"STRONG",{});var GNr=s(vZ);pWe=r(GNr,"bart"),GNr.forEach(t),_We=r(EL," \u2014 "),Mk=n(EL,"A",{href:!0});var ONr=s(Mk);uWe=r(ONr,"BartTokenizer"),ONr.forEach(t),bWe=r(EL," or "),Ek=n(EL,"A",{href:!0});var VNr=s(Ek);vWe=r(VNr,"BartTokenizerFast"),VNr.forEach(t),FWe=r(EL," (BART model)"),EL.forEach(t),TWe=i(w),Un=n(w,"LI",{});var CL=s(Un);FZ=n(CL,"STRONG",{});var XNr=s(FZ);MWe=r(XNr,"barthez"),XNr.forEach(t),EWe=r(CL," \u2014 "),Ck=n(CL,"A",{href:!0});var zNr=s(Ck);CWe=r(zNr,"BarthezTokenizer"),zNr.forEach(t),wWe=r(CL," or "),wk=n(CL,"A",{href:!0});var QNr=s(wk);AWe=r(QNr,"BarthezTokenizerFast"),QNr.forEach(t),yWe=r(CL," (BARThez model)"),CL.forEach(t),LWe=i(w),Dg=n(w,"LI",{});var N9e=s(Dg);TZ=n(N9e,"STRONG",{});var WNr=s(TZ);xWe=r(WNr,"bartpho"),WNr.forEach(t),kWe=r(N9e," \u2014 "),Ak=n(N9e,"A",{href:!0});var HNr=s(Ak);SWe=r(HNr,"BartphoTokenizer"),HNr.forEach(t),RWe=r(N9e," (BARTpho model)"),N9e.forEach(t),BWe=i(w),Jn=n(w,"LI",{});var wL=s(Jn);MZ=n(wL,"STRONG",{});var UNr=s(MZ);PWe=r(UNr,"bert"),UNr.forEach(t),$We=r(wL," \u2014 "),yk=n(wL,"A",{href:!0});var JNr=s(yk);IWe=r(JNr,"BertTokenizer"),JNr.forEach(t),qWe=r(wL," or "),Lk=n(wL,"A",{href:!0});var YNr=s(Lk);NWe=r(YNr,"BertTokenizerFast"),YNr.forEach(t),jWe=r(wL," (BERT model)"),wL.forEach(t),DWe=i(w),Gg=n(w,"LI",{});var j9e=s(Gg);EZ=n(j9e,"STRONG",{});var KNr=s(EZ);GWe=r(KNr,"bert-generation"),KNr.forEach(t),OWe=r(j9e," \u2014 "),xk=n(j9e,"A",{href:!0});var ZNr=s(xk);VWe=r(ZNr,"BertGenerationTokenizer"),ZNr.forEach(t),XWe=r(j9e," (Bert Generation model)"),j9e.forEach(t),zWe=i(w),Og=n(w,"LI",{});var D9e=s(Og);CZ=n(D9e,"STRONG",{});var ejr=s(CZ);QWe=r(ejr,"bert-japanese"),ejr.forEach(t),WWe=r(D9e," \u2014 "),kk=n(D9e,"A",{href:!0});var ojr=s(kk);HWe=r(ojr,"BertJapaneseTokenizer"),ojr.forEach(t),UWe=r(D9e," (BertJapanese model)"),D9e.forEach(t),JWe=i(w),Vg=n(w,"LI",{});var G9e=s(Vg);wZ=n(G9e,"STRONG",{});var rjr=s(wZ);YWe=r(rjr,"bertweet"),rjr.forEach(t),KWe=r(G9e," \u2014 "),Sk=n(G9e,"A",{href:!0});var tjr=s(Sk);ZWe=r(tjr,"BertweetTokenizer"),tjr.forEach(t),eHe=r(G9e," (Bertweet model)"),G9e.forEach(t),oHe=i(w),Yn=n(w,"LI",{});var AL=s(Yn);AZ=n(AL,"STRONG",{});var ajr=s(AZ);rHe=r(ajr,"big_bird"),ajr.forEach(t),tHe=r(AL," \u2014 "),Rk=n(AL,"A",{href:!0});var njr=s(Rk);aHe=r(njr,"BigBirdTokenizer"),njr.forEach(t),nHe=r(AL," or "),Bk=n(AL,"A",{href:!0});var sjr=s(Bk);sHe=r(sjr,"BigBirdTokenizerFast"),sjr.forEach(t),lHe=r(AL," (BigBird model)"),AL.forEach(t),iHe=i(w),Kn=n(w,"LI",{});var yL=s(Kn);yZ=n(yL,"STRONG",{});var ljr=s(yZ);dHe=r(ljr,"bigbird_pegasus"),ljr.forEach(t),cHe=r(yL," \u2014 "),Pk=n(yL,"A",{href:!0});var ijr=s(Pk);fHe=r(ijr,"PegasusTokenizer"),ijr.forEach(t),mHe=r(yL," or "),$k=n(yL,"A",{href:!0});var djr=s($k);gHe=r(djr,"PegasusTokenizerFast"),djr.forEach(t),hHe=r(yL," (BigBirdPegasus model)"),yL.forEach(t),pHe=i(w),Zn=n(w,"LI",{});var LL=s(Zn);LZ=n(LL,"STRONG",{});var cjr=s(LZ);_He=r(cjr,"blenderbot"),cjr.forEach(t),uHe=r(LL," \u2014 "),Ik=n(LL,"A",{href:!0});var fjr=s(Ik);bHe=r(fjr,"BlenderbotTokenizer"),fjr.forEach(t),vHe=r(LL," or "),qk=n(LL,"A",{href:!0});var mjr=s(qk);FHe=r(mjr,"BlenderbotTokenizerFast"),mjr.forEach(t),THe=r(LL," (Blenderbot model)"),LL.forEach(t),MHe=i(w),Xg=n(w,"LI",{});var O9e=s(Xg);xZ=n(O9e,"STRONG",{});var gjr=s(xZ);EHe=r(gjr,"blenderbot-small"),gjr.forEach(t),CHe=r(O9e," \u2014 "),Nk=n(O9e,"A",{href:!0});var hjr=s(Nk);wHe=r(hjr,"BlenderbotSmallTokenizer"),hjr.forEach(t),AHe=r(O9e," (BlenderbotSmall model)"),O9e.forEach(t),yHe=i(w),zg=n(w,"LI",{});var V9e=s(zg);kZ=n(V9e,"STRONG",{});var pjr=s(kZ);LHe=r(pjr,"byt5"),pjr.forEach(t),xHe=r(V9e," \u2014 "),jk=n(V9e,"A",{href:!0});var _jr=s(jk);kHe=r(_jr,"ByT5Tokenizer"),_jr.forEach(t),SHe=r(V9e," (ByT5 model)"),V9e.forEach(t),RHe=i(w),es=n(w,"LI",{});var xL=s(es);SZ=n(xL,"STRONG",{});var ujr=s(SZ);BHe=r(ujr,"camembert"),ujr.forEach(t),PHe=r(xL," \u2014 "),Dk=n(xL,"A",{href:!0});var bjr=s(Dk);$He=r(bjr,"CamembertTokenizer"),bjr.forEach(t),IHe=r(xL," or "),Gk=n(xL,"A",{href:!0});var vjr=s(Gk);qHe=r(vjr,"CamembertTokenizerFast"),vjr.forEach(t),NHe=r(xL," (CamemBERT model)"),xL.forEach(t),jHe=i(w),Qg=n(w,"LI",{});var X9e=s(Qg);RZ=n(X9e,"STRONG",{});var Fjr=s(RZ);DHe=r(Fjr,"canine"),Fjr.forEach(t),GHe=r(X9e," \u2014 "),Ok=n(X9e,"A",{href:!0});var Tjr=s(Ok);OHe=r(Tjr,"CanineTokenizer"),Tjr.forEach(t),VHe=r(X9e," (Canine model)"),X9e.forEach(t),XHe=i(w),os=n(w,"LI",{});var kL=s(os);BZ=n(kL,"STRONG",{});var Mjr=s(BZ);zHe=r(Mjr,"clip"),Mjr.forEach(t),QHe=r(kL," \u2014 "),Vk=n(kL,"A",{href:!0});var Ejr=s(Vk);WHe=r(Ejr,"CLIPTokenizer"),Ejr.forEach(t),HHe=r(kL," or "),Xk=n(kL,"A",{href:!0});var Cjr=s(Xk);UHe=r(Cjr,"CLIPTokenizerFast"),Cjr.forEach(t),JHe=r(kL," (CLIP model)"),kL.forEach(t),YHe=i(w),rs=n(w,"LI",{});var SL=s(rs);PZ=n(SL,"STRONG",{});var wjr=s(PZ);KHe=r(wjr,"convbert"),wjr.forEach(t),ZHe=r(SL," \u2014 "),zk=n(SL,"A",{href:!0});var Ajr=s(zk);eUe=r(Ajr,"ConvBertTokenizer"),Ajr.forEach(t),oUe=r(SL," or "),Qk=n(SL,"A",{href:!0});var yjr=s(Qk);rUe=r(yjr,"ConvBertTokenizerFast"),yjr.forEach(t),tUe=r(SL," (ConvBERT model)"),SL.forEach(t),aUe=i(w),ts=n(w,"LI",{});var RL=s(ts);$Z=n(RL,"STRONG",{});var Ljr=s($Z);nUe=r(Ljr,"cpm"),Ljr.forEach(t),sUe=r(RL," \u2014 "),Wk=n(RL,"A",{href:!0});var xjr=s(Wk);lUe=r(xjr,"CpmTokenizer"),xjr.forEach(t),iUe=r(RL," or "),IZ=n(RL,"CODE",{});var kjr=s(IZ);dUe=r(kjr,"CpmTokenizerFast"),kjr.forEach(t),cUe=r(RL," (CPM model)"),RL.forEach(t),fUe=i(w),Wg=n(w,"LI",{});var z9e=s(Wg);qZ=n(z9e,"STRONG",{});var Sjr=s(qZ);mUe=r(Sjr,"ctrl"),Sjr.forEach(t),gUe=r(z9e," \u2014 "),Hk=n(z9e,"A",{href:!0});var Rjr=s(Hk);hUe=r(Rjr,"CTRLTokenizer"),Rjr.forEach(t),pUe=r(z9e," (CTRL model)"),z9e.forEach(t),_Ue=i(w),as=n(w,"LI",{});var BL=s(as);NZ=n(BL,"STRONG",{});var Bjr=s(NZ);uUe=r(Bjr,"deberta"),Bjr.forEach(t),bUe=r(BL," \u2014 "),Uk=n(BL,"A",{href:!0});var Pjr=s(Uk);vUe=r(Pjr,"DebertaTokenizer"),Pjr.forEach(t),FUe=r(BL," or "),Jk=n(BL,"A",{href:!0});var $jr=s(Jk);TUe=r($jr,"DebertaTokenizerFast"),$jr.forEach(t),MUe=r(BL," (DeBERTa model)"),BL.forEach(t),EUe=i(w),Hg=n(w,"LI",{});var Q9e=s(Hg);jZ=n(Q9e,"STRONG",{});var Ijr=s(jZ);CUe=r(Ijr,"deberta-v2"),Ijr.forEach(t),wUe=r(Q9e," \u2014 "),Yk=n(Q9e,"A",{href:!0});var qjr=s(Yk);AUe=r(qjr,"DebertaV2Tokenizer"),qjr.forEach(t),yUe=r(Q9e," (DeBERTa-v2 model)"),Q9e.forEach(t),LUe=i(w),ns=n(w,"LI",{});var PL=s(ns);DZ=n(PL,"STRONG",{});var Njr=s(DZ);xUe=r(Njr,"distilbert"),Njr.forEach(t),kUe=r(PL," \u2014 "),Kk=n(PL,"A",{href:!0});var jjr=s(Kk);SUe=r(jjr,"DistilBertTokenizer"),jjr.forEach(t),RUe=r(PL," or "),Zk=n(PL,"A",{href:!0});var Djr=s(Zk);BUe=r(Djr,"DistilBertTokenizerFast"),Djr.forEach(t),PUe=r(PL," (DistilBERT model)"),PL.forEach(t),$Ue=i(w),ss=n(w,"LI",{});var $L=s(ss);GZ=n($L,"STRONG",{});var Gjr=s(GZ);IUe=r(Gjr,"dpr"),Gjr.forEach(t),qUe=r($L," \u2014 "),eS=n($L,"A",{href:!0});var Ojr=s(eS);NUe=r(Ojr,"DPRQuestionEncoderTokenizer"),Ojr.forEach(t),jUe=r($L," or "),oS=n($L,"A",{href:!0});var Vjr=s(oS);DUe=r(Vjr,"DPRQuestionEncoderTokenizerFast"),Vjr.forEach(t),GUe=r($L," (DPR model)"),$L.forEach(t),OUe=i(w),ls=n(w,"LI",{});var IL=s(ls);OZ=n(IL,"STRONG",{});var Xjr=s(OZ);VUe=r(Xjr,"electra"),Xjr.forEach(t),XUe=r(IL," \u2014 "),rS=n(IL,"A",{href:!0});var zjr=s(rS);zUe=r(zjr,"ElectraTokenizer"),zjr.forEach(t),QUe=r(IL," or "),tS=n(IL,"A",{href:!0});var Qjr=s(tS);WUe=r(Qjr,"ElectraTokenizerFast"),Qjr.forEach(t),HUe=r(IL," (ELECTRA model)"),IL.forEach(t),UUe=i(w),Ug=n(w,"LI",{});var W9e=s(Ug);VZ=n(W9e,"STRONG",{});var Wjr=s(VZ);JUe=r(Wjr,"flaubert"),Wjr.forEach(t),YUe=r(W9e," \u2014 "),aS=n(W9e,"A",{href:!0});var Hjr=s(aS);KUe=r(Hjr,"FlaubertTokenizer"),Hjr.forEach(t),ZUe=r(W9e," (FlauBERT model)"),W9e.forEach(t),eJe=i(w),is=n(w,"LI",{});var qL=s(is);XZ=n(qL,"STRONG",{});var Ujr=s(XZ);oJe=r(Ujr,"fnet"),Ujr.forEach(t),rJe=r(qL," \u2014 "),nS=n(qL,"A",{href:!0});var Jjr=s(nS);tJe=r(Jjr,"FNetTokenizer"),Jjr.forEach(t),aJe=r(qL," or "),sS=n(qL,"A",{href:!0});var Yjr=s(sS);nJe=r(Yjr,"FNetTokenizerFast"),Yjr.forEach(t),sJe=r(qL," (FNet model)"),qL.forEach(t),lJe=i(w),Jg=n(w,"LI",{});var H9e=s(Jg);zZ=n(H9e,"STRONG",{});var Kjr=s(zZ);iJe=r(Kjr,"fsmt"),Kjr.forEach(t),dJe=r(H9e," \u2014 "),lS=n(H9e,"A",{href:!0});var Zjr=s(lS);cJe=r(Zjr,"FSMTTokenizer"),Zjr.forEach(t),fJe=r(H9e," (FairSeq Machine-Translation model)"),H9e.forEach(t),mJe=i(w),ds=n(w,"LI",{});var NL=s(ds);QZ=n(NL,"STRONG",{});var eDr=s(QZ);gJe=r(eDr,"funnel"),eDr.forEach(t),hJe=r(NL," \u2014 "),iS=n(NL,"A",{href:!0});var oDr=s(iS);pJe=r(oDr,"FunnelTokenizer"),oDr.forEach(t),_Je=r(NL," or "),dS=n(NL,"A",{href:!0});var rDr=s(dS);uJe=r(rDr,"FunnelTokenizerFast"),rDr.forEach(t),bJe=r(NL," (Funnel Transformer model)"),NL.forEach(t),vJe=i(w),cs=n(w,"LI",{});var jL=s(cs);WZ=n(jL,"STRONG",{});var tDr=s(WZ);FJe=r(tDr,"gpt2"),tDr.forEach(t),TJe=r(jL," \u2014 "),cS=n(jL,"A",{href:!0});var aDr=s(cS);MJe=r(aDr,"GPT2Tokenizer"),aDr.forEach(t),EJe=r(jL," or "),fS=n(jL,"A",{href:!0});var nDr=s(fS);CJe=r(nDr,"GPT2TokenizerFast"),nDr.forEach(t),wJe=r(jL," (OpenAI GPT-2 model)"),jL.forEach(t),AJe=i(w),fs=n(w,"LI",{});var DL=s(fs);HZ=n(DL,"STRONG",{});var sDr=s(HZ);yJe=r(sDr,"gpt_neo"),sDr.forEach(t),LJe=r(DL," \u2014 "),mS=n(DL,"A",{href:!0});var lDr=s(mS);xJe=r(lDr,"GPT2Tokenizer"),lDr.forEach(t),kJe=r(DL," or "),gS=n(DL,"A",{href:!0});var iDr=s(gS);SJe=r(iDr,"GPT2TokenizerFast"),iDr.forEach(t),RJe=r(DL," (GPT Neo model)"),DL.forEach(t),BJe=i(w),ms=n(w,"LI",{});var GL=s(ms);UZ=n(GL,"STRONG",{});var dDr=s(UZ);PJe=r(dDr,"herbert"),dDr.forEach(t),$Je=r(GL," \u2014 "),hS=n(GL,"A",{href:!0});var cDr=s(hS);IJe=r(cDr,"HerbertTokenizer"),cDr.forEach(t),qJe=r(GL," or "),pS=n(GL,"A",{href:!0});var fDr=s(pS);NJe=r(fDr,"HerbertTokenizerFast"),fDr.forEach(t),jJe=r(GL," (HerBERT model)"),GL.forEach(t),DJe=i(w),Yg=n(w,"LI",{});var U9e=s(Yg);JZ=n(U9e,"STRONG",{});var mDr=s(JZ);GJe=r(mDr,"hubert"),mDr.forEach(t),OJe=r(U9e," \u2014 "),_S=n(U9e,"A",{href:!0});var gDr=s(_S);VJe=r(gDr,"Wav2Vec2CTCTokenizer"),gDr.forEach(t),XJe=r(U9e," (Hubert model)"),U9e.forEach(t),zJe=i(w),gs=n(w,"LI",{});var OL=s(gs);YZ=n(OL,"STRONG",{});var hDr=s(YZ);QJe=r(hDr,"ibert"),hDr.forEach(t),WJe=r(OL," \u2014 "),uS=n(OL,"A",{href:!0});var pDr=s(uS);HJe=r(pDr,"RobertaTokenizer"),pDr.forEach(t),UJe=r(OL," or "),bS=n(OL,"A",{href:!0});var _Dr=s(bS);JJe=r(_Dr,"RobertaTokenizerFast"),_Dr.forEach(t),YJe=r(OL," (I-BERT model)"),OL.forEach(t),KJe=i(w),hs=n(w,"LI",{});var VL=s(hs);KZ=n(VL,"STRONG",{});var uDr=s(KZ);ZJe=r(uDr,"layoutlm"),uDr.forEach(t),eYe=r(VL," \u2014 "),vS=n(VL,"A",{href:!0});var bDr=s(vS);oYe=r(bDr,"LayoutLMTokenizer"),bDr.forEach(t),rYe=r(VL," or "),FS=n(VL,"A",{href:!0});var vDr=s(FS);tYe=r(vDr,"LayoutLMTokenizerFast"),vDr.forEach(t),aYe=r(VL," (LayoutLM model)"),VL.forEach(t),nYe=i(w),ps=n(w,"LI",{});var XL=s(ps);ZZ=n(XL,"STRONG",{});var FDr=s(ZZ);sYe=r(FDr,"layoutlmv2"),FDr.forEach(t),lYe=r(XL," \u2014 "),TS=n(XL,"A",{href:!0});var TDr=s(TS);iYe=r(TDr,"LayoutLMv2Tokenizer"),TDr.forEach(t),dYe=r(XL," or "),MS=n(XL,"A",{href:!0});var MDr=s(MS);cYe=r(MDr,"LayoutLMv2TokenizerFast"),MDr.forEach(t),fYe=r(XL," (LayoutLMv2 model)"),XL.forEach(t),mYe=i(w),_s=n(w,"LI",{});var zL=s(_s);eee=n(zL,"STRONG",{});var EDr=s(eee);gYe=r(EDr,"layoutxlm"),EDr.forEach(t),hYe=r(zL," \u2014 "),ES=n(zL,"A",{href:!0});var CDr=s(ES);pYe=r(CDr,"LayoutXLMTokenizer"),CDr.forEach(t),_Ye=r(zL," or "),CS=n(zL,"A",{href:!0});var wDr=s(CS);uYe=r(wDr,"LayoutXLMTokenizerFast"),wDr.forEach(t),bYe=r(zL," (LayoutXLM model)"),zL.forEach(t),vYe=i(w),us=n(w,"LI",{});var QL=s(us);oee=n(QL,"STRONG",{});var ADr=s(oee);FYe=r(ADr,"led"),ADr.forEach(t),TYe=r(QL," \u2014 "),wS=n(QL,"A",{href:!0});var yDr=s(wS);MYe=r(yDr,"LEDTokenizer"),yDr.forEach(t),EYe=r(QL," or "),AS=n(QL,"A",{href:!0});var LDr=s(AS);CYe=r(LDr,"LEDTokenizerFast"),LDr.forEach(t),wYe=r(QL," (LED model)"),QL.forEach(t),AYe=i(w),bs=n(w,"LI",{});var WL=s(bs);ree=n(WL,"STRONG",{});var xDr=s(ree);yYe=r(xDr,"longformer"),xDr.forEach(t),LYe=r(WL," \u2014 "),yS=n(WL,"A",{href:!0});var kDr=s(yS);xYe=r(kDr,"LongformerTokenizer"),kDr.forEach(t),kYe=r(WL," or "),LS=n(WL,"A",{href:!0});var SDr=s(LS);SYe=r(SDr,"LongformerTokenizerFast"),SDr.forEach(t),RYe=r(WL," (Longformer model)"),WL.forEach(t),BYe=i(w),Kg=n(w,"LI",{});var J9e=s(Kg);tee=n(J9e,"STRONG",{});var RDr=s(tee);PYe=r(RDr,"luke"),RDr.forEach(t),$Ye=r(J9e," \u2014 "),xS=n(J9e,"A",{href:!0});var BDr=s(xS);IYe=r(BDr,"LukeTokenizer"),BDr.forEach(t),qYe=r(J9e," (LUKE model)"),J9e.forEach(t),NYe=i(w),vs=n(w,"LI",{});var HL=s(vs);aee=n(HL,"STRONG",{});var PDr=s(aee);jYe=r(PDr,"lxmert"),PDr.forEach(t),DYe=r(HL," \u2014 "),kS=n(HL,"A",{href:!0});var $Dr=s(kS);GYe=r($Dr,"LxmertTokenizer"),$Dr.forEach(t),OYe=r(HL," or "),SS=n(HL,"A",{href:!0});var IDr=s(SS);VYe=r(IDr,"LxmertTokenizerFast"),IDr.forEach(t),XYe=r(HL," (LXMERT model)"),HL.forEach(t),zYe=i(w),Zg=n(w,"LI",{});var Y9e=s(Zg);nee=n(Y9e,"STRONG",{});var qDr=s(nee);QYe=r(qDr,"m2m_100"),qDr.forEach(t),WYe=r(Y9e," \u2014 "),RS=n(Y9e,"A",{href:!0});var NDr=s(RS);HYe=r(NDr,"M2M100Tokenizer"),NDr.forEach(t),UYe=r(Y9e," (M2M100 model)"),Y9e.forEach(t),JYe=i(w),eh=n(w,"LI",{});var K9e=s(eh);see=n(K9e,"STRONG",{});var jDr=s(see);YYe=r(jDr,"marian"),jDr.forEach(t),KYe=r(K9e," \u2014 "),BS=n(K9e,"A",{href:!0});var DDr=s(BS);ZYe=r(DDr,"MarianTokenizer"),DDr.forEach(t),eKe=r(K9e," (Marian model)"),K9e.forEach(t),oKe=i(w),Fs=n(w,"LI",{});var UL=s(Fs);lee=n(UL,"STRONG",{});var GDr=s(lee);rKe=r(GDr,"mbart"),GDr.forEach(t),tKe=r(UL," \u2014 "),PS=n(UL,"A",{href:!0});var ODr=s(PS);aKe=r(ODr,"MBartTokenizer"),ODr.forEach(t),nKe=r(UL," or "),$S=n(UL,"A",{href:!0});var VDr=s($S);sKe=r(VDr,"MBartTokenizerFast"),VDr.forEach(t),lKe=r(UL," (mBART model)"),UL.forEach(t),iKe=i(w),Ts=n(w,"LI",{});var JL=s(Ts);iee=n(JL,"STRONG",{});var XDr=s(iee);dKe=r(XDr,"mbart50"),XDr.forEach(t),cKe=r(JL," \u2014 "),IS=n(JL,"A",{href:!0});var zDr=s(IS);fKe=r(zDr,"MBart50Tokenizer"),zDr.forEach(t),mKe=r(JL," or "),qS=n(JL,"A",{href:!0});var QDr=s(qS);gKe=r(QDr,"MBart50TokenizerFast"),QDr.forEach(t),hKe=r(JL," (mBART-50 model)"),JL.forEach(t),pKe=i(w),oh=n(w,"LI",{});var Z9e=s(oh);dee=n(Z9e,"STRONG",{});var WDr=s(dee);_Ke=r(WDr,"mluke"),WDr.forEach(t),uKe=r(Z9e," \u2014 "),NS=n(Z9e,"A",{href:!0});var HDr=s(NS);bKe=r(HDr,"MLukeTokenizer"),HDr.forEach(t),vKe=r(Z9e," (mLUKE model)"),Z9e.forEach(t),FKe=i(w),Ms=n(w,"LI",{});var YL=s(Ms);cee=n(YL,"STRONG",{});var UDr=s(cee);TKe=r(UDr,"mobilebert"),UDr.forEach(t),MKe=r(YL," \u2014 "),jS=n(YL,"A",{href:!0});var JDr=s(jS);EKe=r(JDr,"MobileBertTokenizer"),JDr.forEach(t),CKe=r(YL," or "),DS=n(YL,"A",{href:!0});var YDr=s(DS);wKe=r(YDr,"MobileBertTokenizerFast"),YDr.forEach(t),AKe=r(YL," (MobileBERT model)"),YL.forEach(t),yKe=i(w),Es=n(w,"LI",{});var KL=s(Es);fee=n(KL,"STRONG",{});var KDr=s(fee);LKe=r(KDr,"mpnet"),KDr.forEach(t),xKe=r(KL," \u2014 "),GS=n(KL,"A",{href:!0});var ZDr=s(GS);kKe=r(ZDr,"MPNetTokenizer"),ZDr.forEach(t),SKe=r(KL," or "),OS=n(KL,"A",{href:!0});var eGr=s(OS);RKe=r(eGr,"MPNetTokenizerFast"),eGr.forEach(t),BKe=r(KL," (MPNet model)"),KL.forEach(t),PKe=i(w),Cs=n(w,"LI",{});var ZL=s(Cs);mee=n(ZL,"STRONG",{});var oGr=s(mee);$Ke=r(oGr,"mt5"),oGr.forEach(t),IKe=r(ZL," \u2014 "),VS=n(ZL,"A",{href:!0});var rGr=s(VS);qKe=r(rGr,"MT5Tokenizer"),rGr.forEach(t),NKe=r(ZL," or "),XS=n(ZL,"A",{href:!0});var tGr=s(XS);jKe=r(tGr,"MT5TokenizerFast"),tGr.forEach(t),DKe=r(ZL," (mT5 model)"),ZL.forEach(t),GKe=i(w),ws=n(w,"LI",{});var e7=s(ws);gee=n(e7,"STRONG",{});var aGr=s(gee);OKe=r(aGr,"openai-gpt"),aGr.forEach(t),VKe=r(e7," \u2014 "),zS=n(e7,"A",{href:!0});var nGr=s(zS);XKe=r(nGr,"OpenAIGPTTokenizer"),nGr.forEach(t),zKe=r(e7," or "),QS=n(e7,"A",{href:!0});var sGr=s(QS);QKe=r(sGr,"OpenAIGPTTokenizerFast"),sGr.forEach(t),WKe=r(e7," (OpenAI GPT model)"),e7.forEach(t),HKe=i(w),As=n(w,"LI",{});var o7=s(As);hee=n(o7,"STRONG",{});var lGr=s(hee);UKe=r(lGr,"pegasus"),lGr.forEach(t),JKe=r(o7," \u2014 "),WS=n(o7,"A",{href:!0});var iGr=s(WS);YKe=r(iGr,"PegasusTokenizer"),iGr.forEach(t),KKe=r(o7," or "),HS=n(o7,"A",{href:!0});var dGr=s(HS);ZKe=r(dGr,"PegasusTokenizerFast"),dGr.forEach(t),eZe=r(o7," (Pegasus model)"),o7.forEach(t),oZe=i(w),rh=n(w,"LI",{});var eMe=s(rh);pee=n(eMe,"STRONG",{});var cGr=s(pee);rZe=r(cGr,"perceiver"),cGr.forEach(t),tZe=r(eMe," \u2014 "),US=n(eMe,"A",{href:!0});var fGr=s(US);aZe=r(fGr,"PerceiverTokenizer"),fGr.forEach(t),nZe=r(eMe," (Perceiver model)"),eMe.forEach(t),sZe=i(w),th=n(w,"LI",{});var oMe=s(th);_ee=n(oMe,"STRONG",{});var mGr=s(_ee);lZe=r(mGr,"phobert"),mGr.forEach(t),iZe=r(oMe," \u2014 "),JS=n(oMe,"A",{href:!0});var gGr=s(JS);dZe=r(gGr,"PhobertTokenizer"),gGr.forEach(t),cZe=r(oMe," (PhoBERT model)"),oMe.forEach(t),fZe=i(w),ah=n(w,"LI",{});var rMe=s(ah);uee=n(rMe,"STRONG",{});var hGr=s(uee);mZe=r(hGr,"plbart"),hGr.forEach(t),gZe=r(rMe," \u2014 "),YS=n(rMe,"A",{href:!0});var pGr=s(YS);hZe=r(pGr,"PLBartTokenizer"),pGr.forEach(t),pZe=r(rMe," (PLBart model)"),rMe.forEach(t),_Ze=i(w),nh=n(w,"LI",{});var tMe=s(nh);bee=n(tMe,"STRONG",{});var _Gr=s(bee);uZe=r(_Gr,"prophetnet"),_Gr.forEach(t),bZe=r(tMe," \u2014 "),KS=n(tMe,"A",{href:!0});var uGr=s(KS);vZe=r(uGr,"ProphetNetTokenizer"),uGr.forEach(t),FZe=r(tMe," (ProphetNet model)"),tMe.forEach(t),TZe=i(w),ys=n(w,"LI",{});var r7=s(ys);vee=n(r7,"STRONG",{});var bGr=s(vee);MZe=r(bGr,"qdqbert"),bGr.forEach(t),EZe=r(r7," \u2014 "),ZS=n(r7,"A",{href:!0});var vGr=s(ZS);CZe=r(vGr,"BertTokenizer"),vGr.forEach(t),wZe=r(r7," or "),eR=n(r7,"A",{href:!0});var FGr=s(eR);AZe=r(FGr,"BertTokenizerFast"),FGr.forEach(t),yZe=r(r7," (QDQBert model)"),r7.forEach(t),LZe=i(w),sh=n(w,"LI",{});var aMe=s(sh);Fee=n(aMe,"STRONG",{});var TGr=s(Fee);xZe=r(TGr,"rag"),TGr.forEach(t),kZe=r(aMe," \u2014 "),oR=n(aMe,"A",{href:!0});var MGr=s(oR);SZe=r(MGr,"RagTokenizer"),MGr.forEach(t),RZe=r(aMe," (RAG model)"),aMe.forEach(t),BZe=i(w),Ls=n(w,"LI",{});var t7=s(Ls);Tee=n(t7,"STRONG",{});var EGr=s(Tee);PZe=r(EGr,"realm"),EGr.forEach(t),$Ze=r(t7," \u2014 "),rR=n(t7,"A",{href:!0});var CGr=s(rR);IZe=r(CGr,"RealmTokenizer"),CGr.forEach(t),qZe=r(t7," or "),tR=n(t7,"A",{href:!0});var wGr=s(tR);NZe=r(wGr,"RealmTokenizerFast"),wGr.forEach(t),jZe=r(t7," (Realm model)"),t7.forEach(t),DZe=i(w),xs=n(w,"LI",{});var a7=s(xs);Mee=n(a7,"STRONG",{});var AGr=s(Mee);GZe=r(AGr,"reformer"),AGr.forEach(t),OZe=r(a7," \u2014 "),aR=n(a7,"A",{href:!0});var yGr=s(aR);VZe=r(yGr,"ReformerTokenizer"),yGr.forEach(t),XZe=r(a7," or "),nR=n(a7,"A",{href:!0});var LGr=s(nR);zZe=r(LGr,"ReformerTokenizerFast"),LGr.forEach(t),QZe=r(a7," (Reformer model)"),a7.forEach(t),WZe=i(w),ks=n(w,"LI",{});var n7=s(ks);Eee=n(n7,"STRONG",{});var xGr=s(Eee);HZe=r(xGr,"rembert"),xGr.forEach(t),UZe=r(n7," \u2014 "),sR=n(n7,"A",{href:!0});var kGr=s(sR);JZe=r(kGr,"RemBertTokenizer"),kGr.forEach(t),YZe=r(n7," or "),lR=n(n7,"A",{href:!0});var SGr=s(lR);KZe=r(SGr,"RemBertTokenizerFast"),SGr.forEach(t),ZZe=r(n7," (RemBERT model)"),n7.forEach(t),eeo=i(w),Ss=n(w,"LI",{});var s7=s(Ss);Cee=n(s7,"STRONG",{});var RGr=s(Cee);oeo=r(RGr,"retribert"),RGr.forEach(t),reo=r(s7," \u2014 "),iR=n(s7,"A",{href:!0});var BGr=s(iR);teo=r(BGr,"RetriBertTokenizer"),BGr.forEach(t),aeo=r(s7," or "),dR=n(s7,"A",{href:!0});var PGr=s(dR);neo=r(PGr,"RetriBertTokenizerFast"),PGr.forEach(t),seo=r(s7," (RetriBERT model)"),s7.forEach(t),leo=i(w),Rs=n(w,"LI",{});var l7=s(Rs);wee=n(l7,"STRONG",{});var $Gr=s(wee);ieo=r($Gr,"roberta"),$Gr.forEach(t),deo=r(l7," \u2014 "),cR=n(l7,"A",{href:!0});var IGr=s(cR);ceo=r(IGr,"RobertaTokenizer"),IGr.forEach(t),feo=r(l7," or "),fR=n(l7,"A",{href:!0});var qGr=s(fR);meo=r(qGr,"RobertaTokenizerFast"),qGr.forEach(t),geo=r(l7," (RoBERTa model)"),l7.forEach(t),heo=i(w),Bs=n(w,"LI",{});var i7=s(Bs);Aee=n(i7,"STRONG",{});var NGr=s(Aee);peo=r(NGr,"roformer"),NGr.forEach(t),_eo=r(i7," \u2014 "),mR=n(i7,"A",{href:!0});var jGr=s(mR);ueo=r(jGr,"RoFormerTokenizer"),jGr.forEach(t),beo=r(i7," or "),gR=n(i7,"A",{href:!0});var DGr=s(gR);veo=r(DGr,"RoFormerTokenizerFast"),DGr.forEach(t),Feo=r(i7," (RoFormer model)"),i7.forEach(t),Teo=i(w),lh=n(w,"LI",{});var nMe=s(lh);yee=n(nMe,"STRONG",{});var GGr=s(yee);Meo=r(GGr,"speech_to_text"),GGr.forEach(t),Eeo=r(nMe," \u2014 "),hR=n(nMe,"A",{href:!0});var OGr=s(hR);Ceo=r(OGr,"Speech2TextTokenizer"),OGr.forEach(t),weo=r(nMe," (Speech2Text model)"),nMe.forEach(t),Aeo=i(w),ih=n(w,"LI",{});var sMe=s(ih);Lee=n(sMe,"STRONG",{});var VGr=s(Lee);yeo=r(VGr,"speech_to_text_2"),VGr.forEach(t),Leo=r(sMe," \u2014 "),pR=n(sMe,"A",{href:!0});var XGr=s(pR);xeo=r(XGr,"Speech2Text2Tokenizer"),XGr.forEach(t),keo=r(sMe," (Speech2Text2 model)"),sMe.forEach(t),Seo=i(w),Ps=n(w,"LI",{});var d7=s(Ps);xee=n(d7,"STRONG",{});var zGr=s(xee);Reo=r(zGr,"splinter"),zGr.forEach(t),Beo=r(d7," \u2014 "),_R=n(d7,"A",{href:!0});var QGr=s(_R);Peo=r(QGr,"SplinterTokenizer"),QGr.forEach(t),$eo=r(d7," or "),uR=n(d7,"A",{href:!0});var WGr=s(uR);Ieo=r(WGr,"SplinterTokenizerFast"),WGr.forEach(t),qeo=r(d7," (Splinter model)"),d7.forEach(t),Neo=i(w),$s=n(w,"LI",{});var c7=s($s);kee=n(c7,"STRONG",{});var HGr=s(kee);jeo=r(HGr,"squeezebert"),HGr.forEach(t),Deo=r(c7," \u2014 "),bR=n(c7,"A",{href:!0});var UGr=s(bR);Geo=r(UGr,"SqueezeBertTokenizer"),UGr.forEach(t),Oeo=r(c7," or "),vR=n(c7,"A",{href:!0});var JGr=s(vR);Veo=r(JGr,"SqueezeBertTokenizerFast"),JGr.forEach(t),Xeo=r(c7," (SqueezeBERT model)"),c7.forEach(t),zeo=i(w),Is=n(w,"LI",{});var f7=s(Is);See=n(f7,"STRONG",{});var YGr=s(See);Qeo=r(YGr,"t5"),YGr.forEach(t),Weo=r(f7," \u2014 "),FR=n(f7,"A",{href:!0});var KGr=s(FR);Heo=r(KGr,"T5Tokenizer"),KGr.forEach(t),Ueo=r(f7," or "),TR=n(f7,"A",{href:!0});var ZGr=s(TR);Jeo=r(ZGr,"T5TokenizerFast"),ZGr.forEach(t),Yeo=r(f7," (T5 model)"),f7.forEach(t),Keo=i(w),dh=n(w,"LI",{});var lMe=s(dh);Ree=n(lMe,"STRONG",{});var eOr=s(Ree);Zeo=r(eOr,"tapas"),eOr.forEach(t),eoo=r(lMe," \u2014 "),MR=n(lMe,"A",{href:!0});var oOr=s(MR);ooo=r(oOr,"TapasTokenizer"),oOr.forEach(t),roo=r(lMe," (TAPAS model)"),lMe.forEach(t),too=i(w),ch=n(w,"LI",{});var iMe=s(ch);Bee=n(iMe,"STRONG",{});var rOr=s(Bee);aoo=r(rOr,"tapex"),rOr.forEach(t),noo=r(iMe," \u2014 "),ER=n(iMe,"A",{href:!0});var tOr=s(ER);soo=r(tOr,"TapexTokenizer"),tOr.forEach(t),loo=r(iMe," (TAPEX model)"),iMe.forEach(t),ioo=i(w),fh=n(w,"LI",{});var dMe=s(fh);Pee=n(dMe,"STRONG",{});var aOr=s(Pee);doo=r(aOr,"transfo-xl"),aOr.forEach(t),coo=r(dMe," \u2014 "),CR=n(dMe,"A",{href:!0});var nOr=s(CR);foo=r(nOr,"TransfoXLTokenizer"),nOr.forEach(t),moo=r(dMe," (Transformer-XL model)"),dMe.forEach(t),goo=i(w),mh=n(w,"LI",{});var cMe=s(mh);$ee=n(cMe,"STRONG",{});var sOr=s($ee);hoo=r(sOr,"wav2vec2"),sOr.forEach(t),poo=r(cMe," \u2014 "),wR=n(cMe,"A",{href:!0});var lOr=s(wR);_oo=r(lOr,"Wav2Vec2CTCTokenizer"),lOr.forEach(t),uoo=r(cMe," (Wav2Vec2 model)"),cMe.forEach(t),boo=i(w),gh=n(w,"LI",{});var fMe=s(gh);Iee=n(fMe,"STRONG",{});var iOr=s(Iee);voo=r(iOr,"wav2vec2_phoneme"),iOr.forEach(t),Foo=r(fMe," \u2014 "),AR=n(fMe,"A",{href:!0});var dOr=s(AR);Too=r(dOr,"Wav2Vec2PhonemeCTCTokenizer"),dOr.forEach(t),Moo=r(fMe," (Wav2Vec2Phoneme model)"),fMe.forEach(t),Eoo=i(w),qs=n(w,"LI",{});var m7=s(qs);qee=n(m7,"STRONG",{});var cOr=s(qee);Coo=r(cOr,"xglm"),cOr.forEach(t),woo=r(m7," \u2014 "),yR=n(m7,"A",{href:!0});var fOr=s(yR);Aoo=r(fOr,"XGLMTokenizer"),fOr.forEach(t),yoo=r(m7," or "),LR=n(m7,"A",{href:!0});var mOr=s(LR);Loo=r(mOr,"XGLMTokenizerFast"),mOr.forEach(t),xoo=r(m7," (XGLM model)"),m7.forEach(t),koo=i(w),hh=n(w,"LI",{});var mMe=s(hh);Nee=n(mMe,"STRONG",{});var gOr=s(Nee);Soo=r(gOr,"xlm"),gOr.forEach(t),Roo=r(mMe," \u2014 "),xR=n(mMe,"A",{href:!0});var hOr=s(xR);Boo=r(hOr,"XLMTokenizer"),hOr.forEach(t),Poo=r(mMe," (XLM model)"),mMe.forEach(t),$oo=i(w),ph=n(w,"LI",{});var gMe=s(ph);jee=n(gMe,"STRONG",{});var pOr=s(jee);Ioo=r(pOr,"xlm-prophetnet"),pOr.forEach(t),qoo=r(gMe," \u2014 "),kR=n(gMe,"A",{href:!0});var _Or=s(kR);Noo=r(_Or,"XLMProphetNetTokenizer"),_Or.forEach(t),joo=r(gMe," (XLMProphetNet model)"),gMe.forEach(t),Doo=i(w),Ns=n(w,"LI",{});var g7=s(Ns);Dee=n(g7,"STRONG",{});var uOr=s(Dee);Goo=r(uOr,"xlm-roberta"),uOr.forEach(t),Ooo=r(g7," \u2014 "),SR=n(g7,"A",{href:!0});var bOr=s(SR);Voo=r(bOr,"XLMRobertaTokenizer"),bOr.forEach(t),Xoo=r(g7," or "),RR=n(g7,"A",{href:!0});var vOr=s(RR);zoo=r(vOr,"XLMRobertaTokenizerFast"),vOr.forEach(t),Qoo=r(g7," (XLM-RoBERTa model)"),g7.forEach(t),Woo=i(w),js=n(w,"LI",{});var h7=s(js);Gee=n(h7,"STRONG",{});var FOr=s(Gee);Hoo=r(FOr,"xlnet"),FOr.forEach(t),Uoo=r(h7," \u2014 "),BR=n(h7,"A",{href:!0});var TOr=s(BR);Joo=r(TOr,"XLNetTokenizer"),TOr.forEach(t),Yoo=r(h7," or "),PR=n(h7,"A",{href:!0});var MOr=s(PR);Koo=r(MOr,"XLNetTokenizerFast"),MOr.forEach(t),Zoo=r(h7," (XLNet model)"),h7.forEach(t),w.forEach(t),ero=i(ha),Oee=n(ha,"P",{});var EOr=s(Oee);oro=r(EOr,"Examples:"),EOr.forEach(t),rro=i(ha),m(XE.$$.fragment,ha),ha.forEach(t),tro=i(Xs),_h=n(Xs,"DIV",{class:!0});var IPe=s(_h);m(zE.$$.fragment,IPe),aro=i(IPe),Vee=n(IPe,"P",{});var COr=s(Vee);nro=r(COr,"Register a new tokenizer in this mapping."),COr.forEach(t),IPe.forEach(t),Xs.forEach(t),RRe=i(c),Hi=n(c,"H2",{class:!0});var qPe=s(Hi);uh=n(qPe,"A",{id:!0,class:!0,href:!0});var wOr=s(uh);Xee=n(wOr,"SPAN",{});var AOr=s(Xee);m(QE.$$.fragment,AOr),AOr.forEach(t),wOr.forEach(t),sro=i(qPe),zee=n(qPe,"SPAN",{});var yOr=s(zee);lro=r(yOr,"AutoFeatureExtractor"),yOr.forEach(t),qPe.forEach(t),BRe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(WE.$$.fragment,zs),iro=i(zs),HE=n(zs,"P",{});var NPe=s(HE);dro=r(NPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$R=n(NPe,"A",{href:!0});var LOr=s($R);cro=r(LOr,"AutoFeatureExtractor.from_pretrained()"),LOr.forEach(t),fro=r(NPe," class method."),NPe.forEach(t),mro=i(zs),UE=n(zs,"P",{});var jPe=s(UE);gro=r(jPe,"This class cannot be instantiated directly using "),Qee=n(jPe,"CODE",{});var xOr=s(Qee);hro=r(xOr,"__init__()"),xOr.forEach(t),pro=r(jPe," (throws an error)."),jPe.forEach(t),_ro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(JE.$$.fragment,Nt),uro=i(Nt),Wee=n(Nt,"P",{});var kOr=s(Wee);bro=r(kOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kOr.forEach(t),vro=i(Nt),Va=n(Nt,"P",{});var L4=s(Va);Fro=r(L4,"The feature extractor class to instantiate is selected based on the "),Hee=n(L4,"CODE",{});var SOr=s(Hee);Tro=r(SOr,"model_type"),SOr.forEach(t),Mro=r(L4,` property of the config object
(either passed as an argument or loaded from `),Uee=n(L4,"CODE",{});var ROr=s(Uee);Ero=r(ROr,"pretrained_model_name_or_path"),ROr.forEach(t),Cro=r(L4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Jee=n(L4,"CODE",{});var BOr=s(Jee);wro=r(BOr,"pretrained_model_name_or_path"),BOr.forEach(t),Aro=r(L4,":"),L4.forEach(t),yro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);bh=n(ae,"LI",{});var hMe=s(bh);Yee=n(hMe,"STRONG",{});var POr=s(Yee);Lro=r(POr,"beit"),POr.forEach(t),xro=r(hMe," \u2014 "),IR=n(hMe,"A",{href:!0});var $Or=s(IR);kro=r($Or,"BeitFeatureExtractor"),$Or.forEach(t),Sro=r(hMe," (BEiT model)"),hMe.forEach(t),Rro=i(ae),vh=n(ae,"LI",{});var pMe=s(vh);Kee=n(pMe,"STRONG",{});var IOr=s(Kee);Bro=r(IOr,"clip"),IOr.forEach(t),Pro=r(pMe," \u2014 "),qR=n(pMe,"A",{href:!0});var qOr=s(qR);$ro=r(qOr,"CLIPFeatureExtractor"),qOr.forEach(t),Iro=r(pMe," (CLIP model)"),pMe.forEach(t),qro=i(ae),Fh=n(ae,"LI",{});var _Me=s(Fh);Zee=n(_Me,"STRONG",{});var NOr=s(Zee);Nro=r(NOr,"convnext"),NOr.forEach(t),jro=r(_Me," \u2014 "),NR=n(_Me,"A",{href:!0});var jOr=s(NR);Dro=r(jOr,"ConvNextFeatureExtractor"),jOr.forEach(t),Gro=r(_Me," (ConvNext model)"),_Me.forEach(t),Oro=i(ae),Th=n(ae,"LI",{});var uMe=s(Th);eoe=n(uMe,"STRONG",{});var DOr=s(eoe);Vro=r(DOr,"deit"),DOr.forEach(t),Xro=r(uMe," \u2014 "),jR=n(uMe,"A",{href:!0});var GOr=s(jR);zro=r(GOr,"DeiTFeatureExtractor"),GOr.forEach(t),Qro=r(uMe," (DeiT model)"),uMe.forEach(t),Wro=i(ae),Mh=n(ae,"LI",{});var bMe=s(Mh);ooe=n(bMe,"STRONG",{});var OOr=s(ooe);Hro=r(OOr,"detr"),OOr.forEach(t),Uro=r(bMe," \u2014 "),DR=n(bMe,"A",{href:!0});var VOr=s(DR);Jro=r(VOr,"DetrFeatureExtractor"),VOr.forEach(t),Yro=r(bMe," (DETR model)"),bMe.forEach(t),Kro=i(ae),Eh=n(ae,"LI",{});var vMe=s(Eh);roe=n(vMe,"STRONG",{});var XOr=s(roe);Zro=r(XOr,"hubert"),XOr.forEach(t),eto=r(vMe," \u2014 "),GR=n(vMe,"A",{href:!0});var zOr=s(GR);oto=r(zOr,"Wav2Vec2FeatureExtractor"),zOr.forEach(t),rto=r(vMe," (Hubert model)"),vMe.forEach(t),tto=i(ae),Ch=n(ae,"LI",{});var FMe=s(Ch);toe=n(FMe,"STRONG",{});var QOr=s(toe);ato=r(QOr,"layoutlmv2"),QOr.forEach(t),nto=r(FMe," \u2014 "),OR=n(FMe,"A",{href:!0});var WOr=s(OR);sto=r(WOr,"LayoutLMv2FeatureExtractor"),WOr.forEach(t),lto=r(FMe," (LayoutLMv2 model)"),FMe.forEach(t),ito=i(ae),wh=n(ae,"LI",{});var TMe=s(wh);aoe=n(TMe,"STRONG",{});var HOr=s(aoe);dto=r(HOr,"maskformer"),HOr.forEach(t),cto=r(TMe," \u2014 "),VR=n(TMe,"A",{href:!0});var UOr=s(VR);fto=r(UOr,"MaskFormerFeatureExtractor"),UOr.forEach(t),mto=r(TMe," (MaskFormer model)"),TMe.forEach(t),gto=i(ae),Ah=n(ae,"LI",{});var MMe=s(Ah);noe=n(MMe,"STRONG",{});var JOr=s(noe);hto=r(JOr,"perceiver"),JOr.forEach(t),pto=r(MMe," \u2014 "),XR=n(MMe,"A",{href:!0});var YOr=s(XR);_to=r(YOr,"PerceiverFeatureExtractor"),YOr.forEach(t),uto=r(MMe," (Perceiver model)"),MMe.forEach(t),bto=i(ae),yh=n(ae,"LI",{});var EMe=s(yh);soe=n(EMe,"STRONG",{});var KOr=s(soe);vto=r(KOr,"poolformer"),KOr.forEach(t),Fto=r(EMe," \u2014 "),zR=n(EMe,"A",{href:!0});var ZOr=s(zR);Tto=r(ZOr,"PoolFormerFeatureExtractor"),ZOr.forEach(t),Mto=r(EMe," (PoolFormer model)"),EMe.forEach(t),Eto=i(ae),Lh=n(ae,"LI",{});var CMe=s(Lh);loe=n(CMe,"STRONG",{});var eVr=s(loe);Cto=r(eVr,"regnet"),eVr.forEach(t),wto=r(CMe," \u2014 "),QR=n(CMe,"A",{href:!0});var oVr=s(QR);Ato=r(oVr,"ConvNextFeatureExtractor"),oVr.forEach(t),yto=r(CMe," (RegNet model)"),CMe.forEach(t),Lto=i(ae),xh=n(ae,"LI",{});var wMe=s(xh);ioe=n(wMe,"STRONG",{});var rVr=s(ioe);xto=r(rVr,"resnet"),rVr.forEach(t),kto=r(wMe," \u2014 "),WR=n(wMe,"A",{href:!0});var tVr=s(WR);Sto=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Rto=r(wMe," (ResNet model)"),wMe.forEach(t),Bto=i(ae),kh=n(ae,"LI",{});var AMe=s(kh);doe=n(AMe,"STRONG",{});var aVr=s(doe);Pto=r(aVr,"segformer"),aVr.forEach(t),$to=r(AMe," \u2014 "),HR=n(AMe,"A",{href:!0});var nVr=s(HR);Ito=r(nVr,"SegformerFeatureExtractor"),nVr.forEach(t),qto=r(AMe," (SegFormer model)"),AMe.forEach(t),Nto=i(ae),Sh=n(ae,"LI",{});var yMe=s(Sh);coe=n(yMe,"STRONG",{});var sVr=s(coe);jto=r(sVr,"speech_to_text"),sVr.forEach(t),Dto=r(yMe," \u2014 "),UR=n(yMe,"A",{href:!0});var lVr=s(UR);Gto=r(lVr,"Speech2TextFeatureExtractor"),lVr.forEach(t),Oto=r(yMe," (Speech2Text model)"),yMe.forEach(t),Vto=i(ae),Rh=n(ae,"LI",{});var LMe=s(Rh);foe=n(LMe,"STRONG",{});var iVr=s(foe);Xto=r(iVr,"swin"),iVr.forEach(t),zto=r(LMe," \u2014 "),JR=n(LMe,"A",{href:!0});var dVr=s(JR);Qto=r(dVr,"ViTFeatureExtractor"),dVr.forEach(t),Wto=r(LMe," (Swin model)"),LMe.forEach(t),Hto=i(ae),Bh=n(ae,"LI",{});var xMe=s(Bh);moe=n(xMe,"STRONG",{});var cVr=s(moe);Uto=r(cVr,"van"),cVr.forEach(t),Jto=r(xMe," \u2014 "),YR=n(xMe,"A",{href:!0});var fVr=s(YR);Yto=r(fVr,"ConvNextFeatureExtractor"),fVr.forEach(t),Kto=r(xMe," (VAN model)"),xMe.forEach(t),Zto=i(ae),Ph=n(ae,"LI",{});var kMe=s(Ph);goe=n(kMe,"STRONG",{});var mVr=s(goe);eao=r(mVr,"vit"),mVr.forEach(t),oao=r(kMe," \u2014 "),KR=n(kMe,"A",{href:!0});var gVr=s(KR);rao=r(gVr,"ViTFeatureExtractor"),gVr.forEach(t),tao=r(kMe," (ViT model)"),kMe.forEach(t),aao=i(ae),$h=n(ae,"LI",{});var SMe=s($h);hoe=n(SMe,"STRONG",{});var hVr=s(hoe);nao=r(hVr,"vit_mae"),hVr.forEach(t),sao=r(SMe," \u2014 "),ZR=n(SMe,"A",{href:!0});var pVr=s(ZR);lao=r(pVr,"ViTFeatureExtractor"),pVr.forEach(t),iao=r(SMe," (ViTMAE model)"),SMe.forEach(t),dao=i(ae),Ih=n(ae,"LI",{});var RMe=s(Ih);poe=n(RMe,"STRONG",{});var _Vr=s(poe);cao=r(_Vr,"wav2vec2"),_Vr.forEach(t),fao=r(RMe," \u2014 "),eB=n(RMe,"A",{href:!0});var uVr=s(eB);mao=r(uVr,"Wav2Vec2FeatureExtractor"),uVr.forEach(t),gao=r(RMe," (Wav2Vec2 model)"),RMe.forEach(t),ae.forEach(t),hao=i(Nt),m(qh.$$.fragment,Nt),pao=i(Nt),_oe=n(Nt,"P",{});var bVr=s(_oe);_ao=r(bVr,"Examples:"),bVr.forEach(t),uao=i(Nt),m(YE.$$.fragment,Nt),Nt.forEach(t),bao=i(zs),Nh=n(zs,"DIV",{class:!0});var DPe=s(Nh);m(KE.$$.fragment,DPe),vao=i(DPe),uoe=n(DPe,"P",{});var vVr=s(uoe);Fao=r(vVr,"Register a new feature extractor for this class."),vVr.forEach(t),DPe.forEach(t),zs.forEach(t),PRe=i(c),Ui=n(c,"H2",{class:!0});var GPe=s(Ui);jh=n(GPe,"A",{id:!0,class:!0,href:!0});var FVr=s(jh);boe=n(FVr,"SPAN",{});var TVr=s(boe);m(ZE.$$.fragment,TVr),TVr.forEach(t),FVr.forEach(t),Tao=i(GPe),voe=n(GPe,"SPAN",{});var MVr=s(voe);Mao=r(MVr,"AutoProcessor"),MVr.forEach(t),GPe.forEach(t),$Re=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(e5.$$.fragment,Qs),Eao=i(Qs),o5=n(Qs,"P",{});var OPe=s(o5);Cao=r(OPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),oB=n(OPe,"A",{href:!0});var EVr=s(oB);wao=r(EVr,"AutoProcessor.from_pretrained()"),EVr.forEach(t),Aao=r(OPe," class method."),OPe.forEach(t),yao=i(Qs),r5=n(Qs,"P",{});var VPe=s(r5);Lao=r(VPe,"This class cannot be instantiated directly using "),Foe=n(VPe,"CODE",{});var CVr=s(Foe);xao=r(CVr,"__init__()"),CVr.forEach(t),kao=r(VPe," (throws an error)."),VPe.forEach(t),Sao=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(t5.$$.fragment,jt),Rao=i(jt),Toe=n(jt,"P",{});var wVr=s(Toe);Bao=r(wVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),wVr.forEach(t),Pao=i(jt),Ji=n(jt,"P",{});var pU=s(Ji);$ao=r(pU,"The processor class to instantiate is selected based on the "),Moe=n(pU,"CODE",{});var AVr=s(Moe);Iao=r(AVr,"model_type"),AVr.forEach(t),qao=r(pU,` property of the config object (either
passed as an argument or loaded from `),Eoe=n(pU,"CODE",{});var yVr=s(Eoe);Nao=r(yVr,"pretrained_model_name_or_path"),yVr.forEach(t),jao=r(pU," if possible):"),pU.forEach(t),Dao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Dh=n(jo,"LI",{});var BMe=s(Dh);Coe=n(BMe,"STRONG",{});var LVr=s(Coe);Gao=r(LVr,"clip"),LVr.forEach(t),Oao=r(BMe," \u2014 "),rB=n(BMe,"A",{href:!0});var xVr=s(rB);Vao=r(xVr,"CLIPProcessor"),xVr.forEach(t),Xao=r(BMe," (CLIP model)"),BMe.forEach(t),zao=i(jo),Gh=n(jo,"LI",{});var PMe=s(Gh);woe=n(PMe,"STRONG",{});var kVr=s(woe);Qao=r(kVr,"layoutlmv2"),kVr.forEach(t),Wao=r(PMe," \u2014 "),tB=n(PMe,"A",{href:!0});var SVr=s(tB);Hao=r(SVr,"LayoutLMv2Processor"),SVr.forEach(t),Uao=r(PMe," (LayoutLMv2 model)"),PMe.forEach(t),Jao=i(jo),Oh=n(jo,"LI",{});var $Me=s(Oh);Aoe=n($Me,"STRONG",{});var RVr=s(Aoe);Yao=r(RVr,"layoutxlm"),RVr.forEach(t),Kao=r($Me," \u2014 "),aB=n($Me,"A",{href:!0});var BVr=s(aB);Zao=r(BVr,"LayoutXLMProcessor"),BVr.forEach(t),eno=r($Me," (LayoutXLM model)"),$Me.forEach(t),ono=i(jo),Vh=n(jo,"LI",{});var IMe=s(Vh);yoe=n(IMe,"STRONG",{});var PVr=s(yoe);rno=r(PVr,"speech_to_text"),PVr.forEach(t),tno=r(IMe," \u2014 "),nB=n(IMe,"A",{href:!0});var $Vr=s(nB);ano=r($Vr,"Speech2TextProcessor"),$Vr.forEach(t),nno=r(IMe," (Speech2Text model)"),IMe.forEach(t),sno=i(jo),Xh=n(jo,"LI",{});var qMe=s(Xh);Loe=n(qMe,"STRONG",{});var IVr=s(Loe);lno=r(IVr,"speech_to_text_2"),IVr.forEach(t),ino=r(qMe," \u2014 "),sB=n(qMe,"A",{href:!0});var qVr=s(sB);dno=r(qVr,"Speech2Text2Processor"),qVr.forEach(t),cno=r(qMe," (Speech2Text2 model)"),qMe.forEach(t),fno=i(jo),zh=n(jo,"LI",{});var NMe=s(zh);xoe=n(NMe,"STRONG",{});var NVr=s(xoe);mno=r(NVr,"trocr"),NVr.forEach(t),gno=r(NMe," \u2014 "),lB=n(NMe,"A",{href:!0});var jVr=s(lB);hno=r(jVr,"TrOCRProcessor"),jVr.forEach(t),pno=r(NMe," (TrOCR model)"),NMe.forEach(t),_no=i(jo),Qh=n(jo,"LI",{});var jMe=s(Qh);koe=n(jMe,"STRONG",{});var DVr=s(koe);uno=r(DVr,"vision-text-dual-encoder"),DVr.forEach(t),bno=r(jMe," \u2014 "),iB=n(jMe,"A",{href:!0});var GVr=s(iB);vno=r(GVr,"VisionTextDualEncoderProcessor"),GVr.forEach(t),Fno=r(jMe," (VisionTextDualEncoder model)"),jMe.forEach(t),Tno=i(jo),Wh=n(jo,"LI",{});var DMe=s(Wh);Soe=n(DMe,"STRONG",{});var OVr=s(Soe);Mno=r(OVr,"wav2vec2"),OVr.forEach(t),Eno=r(DMe," \u2014 "),dB=n(DMe,"A",{href:!0});var VVr=s(dB);Cno=r(VVr,"Wav2Vec2Processor"),VVr.forEach(t),wno=r(DMe," (Wav2Vec2 model)"),DMe.forEach(t),jo.forEach(t),Ano=i(jt),m(Hh.$$.fragment,jt),yno=i(jt),Roe=n(jt,"P",{});var XVr=s(Roe);Lno=r(XVr,"Examples:"),XVr.forEach(t),xno=i(jt),m(a5.$$.fragment,jt),jt.forEach(t),kno=i(Qs),Uh=n(Qs,"DIV",{class:!0});var XPe=s(Uh);m(n5.$$.fragment,XPe),Sno=i(XPe),Boe=n(XPe,"P",{});var zVr=s(Boe);Rno=r(zVr,"Register a new processor for this class."),zVr.forEach(t),XPe.forEach(t),Qs.forEach(t),IRe=i(c),Yi=n(c,"H2",{class:!0});var zPe=s(Yi);Jh=n(zPe,"A",{id:!0,class:!0,href:!0});var QVr=s(Jh);Poe=n(QVr,"SPAN",{});var WVr=s(Poe);m(s5.$$.fragment,WVr),WVr.forEach(t),QVr.forEach(t),Bno=i(zPe),$oe=n(zPe,"SPAN",{});var HVr=s($oe);Pno=r(HVr,"AutoModel"),HVr.forEach(t),zPe.forEach(t),qRe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(l5.$$.fragment,Ws),$no=i(Ws),Ki=n(Ws,"P",{});var _U=s(Ki);Ino=r(_U,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cB=n(_U,"A",{href:!0});var UVr=s(cB);qno=r(UVr,"from_pretrained()"),UVr.forEach(t),Nno=r(_U," class method or the "),fB=n(_U,"A",{href:!0});var JVr=s(fB);jno=r(JVr,"from_config()"),JVr.forEach(t),Dno=r(_U,` class
method.`),_U.forEach(t),Gno=i(Ws),i5=n(Ws,"P",{});var QPe=s(i5);Ono=r(QPe,"This class cannot be instantiated directly using "),Ioe=n(QPe,"CODE",{});var YVr=s(Ioe);Vno=r(YVr,"__init__()"),YVr.forEach(t),Xno=r(QPe," (throws an error)."),QPe.forEach(t),zno=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(d5.$$.fragment,Hs),Qno=i(Hs),qoe=n(Hs,"P",{});var KVr=s(qoe);Wno=r(KVr,"Instantiates one of the base model classes of the library from a configuration."),KVr.forEach(t),Hno=i(Hs),Zi=n(Hs,"P",{});var uU=s(Zi);Uno=r(uU,`Note:
Loading a model from its configuration file does `),Noe=n(uU,"STRONG",{});var ZVr=s(Noe);Jno=r(ZVr,"not"),ZVr.forEach(t),Yno=r(uU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mB=n(uU,"A",{href:!0});var eXr=s(mB);Kno=r(eXr,"from_pretrained()"),eXr.forEach(t),Zno=r(uU," to load the model weights."),uU.forEach(t),eso=i(Hs),joe=n(Hs,"P",{});var oXr=s(joe);oso=r(oXr,"Examples:"),oXr.forEach(t),rso=i(Hs),m(c5.$$.fragment,Hs),Hs.forEach(t),tso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(f5.$$.fragment,Dt),aso=i(Dt),Doe=n(Dt,"P",{});var rXr=s(Doe);nso=r(rXr,"Instantiate one of the base model classes of the library from a pretrained model."),rXr.forEach(t),sso=i(Dt),Xa=n(Dt,"P",{});var x4=s(Xa);lso=r(x4,"The model class to instantiate is selected based on the "),Goe=n(x4,"CODE",{});var tXr=s(Goe);iso=r(tXr,"model_type"),tXr.forEach(t),dso=r(x4,` property of the config object (either
passed as an argument or loaded from `),Ooe=n(x4,"CODE",{});var aXr=s(Ooe);cso=r(aXr,"pretrained_model_name_or_path"),aXr.forEach(t),fso=r(x4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Voe=n(x4,"CODE",{});var nXr=s(Voe);mso=r(nXr,"pretrained_model_name_or_path"),nXr.forEach(t),gso=r(x4,":"),x4.forEach(t),hso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Yh=n(M,"LI",{});var GMe=s(Yh);Xoe=n(GMe,"STRONG",{});var sXr=s(Xoe);pso=r(sXr,"albert"),sXr.forEach(t),_so=r(GMe," \u2014 "),gB=n(GMe,"A",{href:!0});var lXr=s(gB);uso=r(lXr,"AlbertModel"),lXr.forEach(t),bso=r(GMe," (ALBERT model)"),GMe.forEach(t),vso=i(M),Kh=n(M,"LI",{});var OMe=s(Kh);zoe=n(OMe,"STRONG",{});var iXr=s(zoe);Fso=r(iXr,"bart"),iXr.forEach(t),Tso=r(OMe," \u2014 "),hB=n(OMe,"A",{href:!0});var dXr=s(hB);Mso=r(dXr,"BartModel"),dXr.forEach(t),Eso=r(OMe," (BART model)"),OMe.forEach(t),Cso=i(M),Zh=n(M,"LI",{});var VMe=s(Zh);Qoe=n(VMe,"STRONG",{});var cXr=s(Qoe);wso=r(cXr,"beit"),cXr.forEach(t),Aso=r(VMe," \u2014 "),pB=n(VMe,"A",{href:!0});var fXr=s(pB);yso=r(fXr,"BeitModel"),fXr.forEach(t),Lso=r(VMe," (BEiT model)"),VMe.forEach(t),xso=i(M),ep=n(M,"LI",{});var XMe=s(ep);Woe=n(XMe,"STRONG",{});var mXr=s(Woe);kso=r(mXr,"bert"),mXr.forEach(t),Sso=r(XMe," \u2014 "),_B=n(XMe,"A",{href:!0});var gXr=s(_B);Rso=r(gXr,"BertModel"),gXr.forEach(t),Bso=r(XMe," (BERT model)"),XMe.forEach(t),Pso=i(M),op=n(M,"LI",{});var zMe=s(op);Hoe=n(zMe,"STRONG",{});var hXr=s(Hoe);$so=r(hXr,"bert-generation"),hXr.forEach(t),Iso=r(zMe," \u2014 "),uB=n(zMe,"A",{href:!0});var pXr=s(uB);qso=r(pXr,"BertGenerationEncoder"),pXr.forEach(t),Nso=r(zMe," (Bert Generation model)"),zMe.forEach(t),jso=i(M),rp=n(M,"LI",{});var QMe=s(rp);Uoe=n(QMe,"STRONG",{});var _Xr=s(Uoe);Dso=r(_Xr,"big_bird"),_Xr.forEach(t),Gso=r(QMe," \u2014 "),bB=n(QMe,"A",{href:!0});var uXr=s(bB);Oso=r(uXr,"BigBirdModel"),uXr.forEach(t),Vso=r(QMe," (BigBird model)"),QMe.forEach(t),Xso=i(M),tp=n(M,"LI",{});var WMe=s(tp);Joe=n(WMe,"STRONG",{});var bXr=s(Joe);zso=r(bXr,"bigbird_pegasus"),bXr.forEach(t),Qso=r(WMe," \u2014 "),vB=n(WMe,"A",{href:!0});var vXr=s(vB);Wso=r(vXr,"BigBirdPegasusModel"),vXr.forEach(t),Hso=r(WMe," (BigBirdPegasus model)"),WMe.forEach(t),Uso=i(M),ap=n(M,"LI",{});var HMe=s(ap);Yoe=n(HMe,"STRONG",{});var FXr=s(Yoe);Jso=r(FXr,"blenderbot"),FXr.forEach(t),Yso=r(HMe," \u2014 "),FB=n(HMe,"A",{href:!0});var TXr=s(FB);Kso=r(TXr,"BlenderbotModel"),TXr.forEach(t),Zso=r(HMe," (Blenderbot model)"),HMe.forEach(t),elo=i(M),np=n(M,"LI",{});var UMe=s(np);Koe=n(UMe,"STRONG",{});var MXr=s(Koe);olo=r(MXr,"blenderbot-small"),MXr.forEach(t),rlo=r(UMe," \u2014 "),TB=n(UMe,"A",{href:!0});var EXr=s(TB);tlo=r(EXr,"BlenderbotSmallModel"),EXr.forEach(t),alo=r(UMe," (BlenderbotSmall model)"),UMe.forEach(t),nlo=i(M),sp=n(M,"LI",{});var JMe=s(sp);Zoe=n(JMe,"STRONG",{});var CXr=s(Zoe);slo=r(CXr,"camembert"),CXr.forEach(t),llo=r(JMe," \u2014 "),MB=n(JMe,"A",{href:!0});var wXr=s(MB);ilo=r(wXr,"CamembertModel"),wXr.forEach(t),dlo=r(JMe," (CamemBERT model)"),JMe.forEach(t),clo=i(M),lp=n(M,"LI",{});var YMe=s(lp);ere=n(YMe,"STRONG",{});var AXr=s(ere);flo=r(AXr,"canine"),AXr.forEach(t),mlo=r(YMe," \u2014 "),EB=n(YMe,"A",{href:!0});var yXr=s(EB);glo=r(yXr,"CanineModel"),yXr.forEach(t),hlo=r(YMe," (Canine model)"),YMe.forEach(t),plo=i(M),ip=n(M,"LI",{});var KMe=s(ip);ore=n(KMe,"STRONG",{});var LXr=s(ore);_lo=r(LXr,"clip"),LXr.forEach(t),ulo=r(KMe," \u2014 "),CB=n(KMe,"A",{href:!0});var xXr=s(CB);blo=r(xXr,"CLIPModel"),xXr.forEach(t),vlo=r(KMe," (CLIP model)"),KMe.forEach(t),Flo=i(M),dp=n(M,"LI",{});var ZMe=s(dp);rre=n(ZMe,"STRONG",{});var kXr=s(rre);Tlo=r(kXr,"convbert"),kXr.forEach(t),Mlo=r(ZMe," \u2014 "),wB=n(ZMe,"A",{href:!0});var SXr=s(wB);Elo=r(SXr,"ConvBertModel"),SXr.forEach(t),Clo=r(ZMe," (ConvBERT model)"),ZMe.forEach(t),wlo=i(M),cp=n(M,"LI",{});var e4e=s(cp);tre=n(e4e,"STRONG",{});var RXr=s(tre);Alo=r(RXr,"convnext"),RXr.forEach(t),ylo=r(e4e," \u2014 "),AB=n(e4e,"A",{href:!0});var BXr=s(AB);Llo=r(BXr,"ConvNextModel"),BXr.forEach(t),xlo=r(e4e," (ConvNext model)"),e4e.forEach(t),klo=i(M),fp=n(M,"LI",{});var o4e=s(fp);are=n(o4e,"STRONG",{});var PXr=s(are);Slo=r(PXr,"ctrl"),PXr.forEach(t),Rlo=r(o4e," \u2014 "),yB=n(o4e,"A",{href:!0});var $Xr=s(yB);Blo=r($Xr,"CTRLModel"),$Xr.forEach(t),Plo=r(o4e," (CTRL model)"),o4e.forEach(t),$lo=i(M),mp=n(M,"LI",{});var r4e=s(mp);nre=n(r4e,"STRONG",{});var IXr=s(nre);Ilo=r(IXr,"data2vec-audio"),IXr.forEach(t),qlo=r(r4e," \u2014 "),LB=n(r4e,"A",{href:!0});var qXr=s(LB);Nlo=r(qXr,"Data2VecAudioModel"),qXr.forEach(t),jlo=r(r4e," (Data2VecAudio model)"),r4e.forEach(t),Dlo=i(M),gp=n(M,"LI",{});var t4e=s(gp);sre=n(t4e,"STRONG",{});var NXr=s(sre);Glo=r(NXr,"data2vec-text"),NXr.forEach(t),Olo=r(t4e," \u2014 "),xB=n(t4e,"A",{href:!0});var jXr=s(xB);Vlo=r(jXr,"Data2VecTextModel"),jXr.forEach(t),Xlo=r(t4e," (Data2VecText model)"),t4e.forEach(t),zlo=i(M),hp=n(M,"LI",{});var a4e=s(hp);lre=n(a4e,"STRONG",{});var DXr=s(lre);Qlo=r(DXr,"data2vec-vision"),DXr.forEach(t),Wlo=r(a4e," \u2014 "),kB=n(a4e,"A",{href:!0});var GXr=s(kB);Hlo=r(GXr,"Data2VecVisionModel"),GXr.forEach(t),Ulo=r(a4e," (Data2VecVision model)"),a4e.forEach(t),Jlo=i(M),pp=n(M,"LI",{});var n4e=s(pp);ire=n(n4e,"STRONG",{});var OXr=s(ire);Ylo=r(OXr,"deberta"),OXr.forEach(t),Klo=r(n4e," \u2014 "),SB=n(n4e,"A",{href:!0});var VXr=s(SB);Zlo=r(VXr,"DebertaModel"),VXr.forEach(t),eio=r(n4e," (DeBERTa model)"),n4e.forEach(t),oio=i(M),_p=n(M,"LI",{});var s4e=s(_p);dre=n(s4e,"STRONG",{});var XXr=s(dre);rio=r(XXr,"deberta-v2"),XXr.forEach(t),tio=r(s4e," \u2014 "),RB=n(s4e,"A",{href:!0});var zXr=s(RB);aio=r(zXr,"DebertaV2Model"),zXr.forEach(t),nio=r(s4e," (DeBERTa-v2 model)"),s4e.forEach(t),sio=i(M),up=n(M,"LI",{});var l4e=s(up);cre=n(l4e,"STRONG",{});var QXr=s(cre);lio=r(QXr,"decision_transformer"),QXr.forEach(t),iio=r(l4e," \u2014 "),BB=n(l4e,"A",{href:!0});var WXr=s(BB);dio=r(WXr,"DecisionTransformerModel"),WXr.forEach(t),cio=r(l4e," (Decision Transformer model)"),l4e.forEach(t),fio=i(M),bp=n(M,"LI",{});var i4e=s(bp);fre=n(i4e,"STRONG",{});var HXr=s(fre);mio=r(HXr,"deit"),HXr.forEach(t),gio=r(i4e," \u2014 "),PB=n(i4e,"A",{href:!0});var UXr=s(PB);hio=r(UXr,"DeiTModel"),UXr.forEach(t),pio=r(i4e," (DeiT model)"),i4e.forEach(t),_io=i(M),vp=n(M,"LI",{});var d4e=s(vp);mre=n(d4e,"STRONG",{});var JXr=s(mre);uio=r(JXr,"detr"),JXr.forEach(t),bio=r(d4e," \u2014 "),$B=n(d4e,"A",{href:!0});var YXr=s($B);vio=r(YXr,"DetrModel"),YXr.forEach(t),Fio=r(d4e," (DETR model)"),d4e.forEach(t),Tio=i(M),Fp=n(M,"LI",{});var c4e=s(Fp);gre=n(c4e,"STRONG",{});var KXr=s(gre);Mio=r(KXr,"distilbert"),KXr.forEach(t),Eio=r(c4e," \u2014 "),IB=n(c4e,"A",{href:!0});var ZXr=s(IB);Cio=r(ZXr,"DistilBertModel"),ZXr.forEach(t),wio=r(c4e," (DistilBERT model)"),c4e.forEach(t),Aio=i(M),Tp=n(M,"LI",{});var f4e=s(Tp);hre=n(f4e,"STRONG",{});var ezr=s(hre);yio=r(ezr,"dpr"),ezr.forEach(t),Lio=r(f4e," \u2014 "),qB=n(f4e,"A",{href:!0});var ozr=s(qB);xio=r(ozr,"DPRQuestionEncoder"),ozr.forEach(t),kio=r(f4e," (DPR model)"),f4e.forEach(t),Sio=i(M),Mp=n(M,"LI",{});var m4e=s(Mp);pre=n(m4e,"STRONG",{});var rzr=s(pre);Rio=r(rzr,"dpt"),rzr.forEach(t),Bio=r(m4e," \u2014 "),NB=n(m4e,"A",{href:!0});var tzr=s(NB);Pio=r(tzr,"DPTModel"),tzr.forEach(t),$io=r(m4e," (DPT model)"),m4e.forEach(t),Iio=i(M),Ep=n(M,"LI",{});var g4e=s(Ep);_re=n(g4e,"STRONG",{});var azr=s(_re);qio=r(azr,"electra"),azr.forEach(t),Nio=r(g4e," \u2014 "),jB=n(g4e,"A",{href:!0});var nzr=s(jB);jio=r(nzr,"ElectraModel"),nzr.forEach(t),Dio=r(g4e," (ELECTRA model)"),g4e.forEach(t),Gio=i(M),Cp=n(M,"LI",{});var h4e=s(Cp);ure=n(h4e,"STRONG",{});var szr=s(ure);Oio=r(szr,"flaubert"),szr.forEach(t),Vio=r(h4e," \u2014 "),DB=n(h4e,"A",{href:!0});var lzr=s(DB);Xio=r(lzr,"FlaubertModel"),lzr.forEach(t),zio=r(h4e," (FlauBERT model)"),h4e.forEach(t),Qio=i(M),wp=n(M,"LI",{});var p4e=s(wp);bre=n(p4e,"STRONG",{});var izr=s(bre);Wio=r(izr,"fnet"),izr.forEach(t),Hio=r(p4e," \u2014 "),GB=n(p4e,"A",{href:!0});var dzr=s(GB);Uio=r(dzr,"FNetModel"),dzr.forEach(t),Jio=r(p4e," (FNet model)"),p4e.forEach(t),Yio=i(M),Ap=n(M,"LI",{});var _4e=s(Ap);vre=n(_4e,"STRONG",{});var czr=s(vre);Kio=r(czr,"fsmt"),czr.forEach(t),Zio=r(_4e," \u2014 "),OB=n(_4e,"A",{href:!0});var fzr=s(OB);edo=r(fzr,"FSMTModel"),fzr.forEach(t),odo=r(_4e," (FairSeq Machine-Translation model)"),_4e.forEach(t),rdo=i(M),Ds=n(M,"LI",{});var p7=s(Ds);Fre=n(p7,"STRONG",{});var mzr=s(Fre);tdo=r(mzr,"funnel"),mzr.forEach(t),ado=r(p7," \u2014 "),VB=n(p7,"A",{href:!0});var gzr=s(VB);ndo=r(gzr,"FunnelModel"),gzr.forEach(t),sdo=r(p7," or "),XB=n(p7,"A",{href:!0});var hzr=s(XB);ldo=r(hzr,"FunnelBaseModel"),hzr.forEach(t),ido=r(p7," (Funnel Transformer model)"),p7.forEach(t),ddo=i(M),yp=n(M,"LI",{});var u4e=s(yp);Tre=n(u4e,"STRONG",{});var pzr=s(Tre);cdo=r(pzr,"glpn"),pzr.forEach(t),fdo=r(u4e," \u2014 "),zB=n(u4e,"A",{href:!0});var _zr=s(zB);mdo=r(_zr,"GLPNModel"),_zr.forEach(t),gdo=r(u4e," (GLPN model)"),u4e.forEach(t),hdo=i(M),Lp=n(M,"LI",{});var b4e=s(Lp);Mre=n(b4e,"STRONG",{});var uzr=s(Mre);pdo=r(uzr,"gpt2"),uzr.forEach(t),_do=r(b4e," \u2014 "),QB=n(b4e,"A",{href:!0});var bzr=s(QB);udo=r(bzr,"GPT2Model"),bzr.forEach(t),bdo=r(b4e," (OpenAI GPT-2 model)"),b4e.forEach(t),vdo=i(M),xp=n(M,"LI",{});var v4e=s(xp);Ere=n(v4e,"STRONG",{});var vzr=s(Ere);Fdo=r(vzr,"gpt_neo"),vzr.forEach(t),Tdo=r(v4e," \u2014 "),WB=n(v4e,"A",{href:!0});var Fzr=s(WB);Mdo=r(Fzr,"GPTNeoModel"),Fzr.forEach(t),Edo=r(v4e," (GPT Neo model)"),v4e.forEach(t),Cdo=i(M),kp=n(M,"LI",{});var F4e=s(kp);Cre=n(F4e,"STRONG",{});var Tzr=s(Cre);wdo=r(Tzr,"gptj"),Tzr.forEach(t),Ado=r(F4e," \u2014 "),HB=n(F4e,"A",{href:!0});var Mzr=s(HB);ydo=r(Mzr,"GPTJModel"),Mzr.forEach(t),Ldo=r(F4e," (GPT-J model)"),F4e.forEach(t),xdo=i(M),Sp=n(M,"LI",{});var T4e=s(Sp);wre=n(T4e,"STRONG",{});var Ezr=s(wre);kdo=r(Ezr,"hubert"),Ezr.forEach(t),Sdo=r(T4e," \u2014 "),UB=n(T4e,"A",{href:!0});var Czr=s(UB);Rdo=r(Czr,"HubertModel"),Czr.forEach(t),Bdo=r(T4e," (Hubert model)"),T4e.forEach(t),Pdo=i(M),Rp=n(M,"LI",{});var M4e=s(Rp);Are=n(M4e,"STRONG",{});var wzr=s(Are);$do=r(wzr,"ibert"),wzr.forEach(t),Ido=r(M4e," \u2014 "),JB=n(M4e,"A",{href:!0});var Azr=s(JB);qdo=r(Azr,"IBertModel"),Azr.forEach(t),Ndo=r(M4e," (I-BERT model)"),M4e.forEach(t),jdo=i(M),Bp=n(M,"LI",{});var E4e=s(Bp);yre=n(E4e,"STRONG",{});var yzr=s(yre);Ddo=r(yzr,"imagegpt"),yzr.forEach(t),Gdo=r(E4e," \u2014 "),YB=n(E4e,"A",{href:!0});var Lzr=s(YB);Odo=r(Lzr,"ImageGPTModel"),Lzr.forEach(t),Vdo=r(E4e," (ImageGPT model)"),E4e.forEach(t),Xdo=i(M),Pp=n(M,"LI",{});var C4e=s(Pp);Lre=n(C4e,"STRONG",{});var xzr=s(Lre);zdo=r(xzr,"layoutlm"),xzr.forEach(t),Qdo=r(C4e," \u2014 "),KB=n(C4e,"A",{href:!0});var kzr=s(KB);Wdo=r(kzr,"LayoutLMModel"),kzr.forEach(t),Hdo=r(C4e," (LayoutLM model)"),C4e.forEach(t),Udo=i(M),$p=n(M,"LI",{});var w4e=s($p);xre=n(w4e,"STRONG",{});var Szr=s(xre);Jdo=r(Szr,"layoutlmv2"),Szr.forEach(t),Ydo=r(w4e," \u2014 "),ZB=n(w4e,"A",{href:!0});var Rzr=s(ZB);Kdo=r(Rzr,"LayoutLMv2Model"),Rzr.forEach(t),Zdo=r(w4e," (LayoutLMv2 model)"),w4e.forEach(t),eco=i(M),Ip=n(M,"LI",{});var A4e=s(Ip);kre=n(A4e,"STRONG",{});var Bzr=s(kre);oco=r(Bzr,"led"),Bzr.forEach(t),rco=r(A4e," \u2014 "),eP=n(A4e,"A",{href:!0});var Pzr=s(eP);tco=r(Pzr,"LEDModel"),Pzr.forEach(t),aco=r(A4e," (LED model)"),A4e.forEach(t),nco=i(M),qp=n(M,"LI",{});var y4e=s(qp);Sre=n(y4e,"STRONG",{});var $zr=s(Sre);sco=r($zr,"longformer"),$zr.forEach(t),lco=r(y4e," \u2014 "),oP=n(y4e,"A",{href:!0});var Izr=s(oP);ico=r(Izr,"LongformerModel"),Izr.forEach(t),dco=r(y4e," (Longformer model)"),y4e.forEach(t),cco=i(M),Np=n(M,"LI",{});var L4e=s(Np);Rre=n(L4e,"STRONG",{});var qzr=s(Rre);fco=r(qzr,"luke"),qzr.forEach(t),mco=r(L4e," \u2014 "),rP=n(L4e,"A",{href:!0});var Nzr=s(rP);gco=r(Nzr,"LukeModel"),Nzr.forEach(t),hco=r(L4e," (LUKE model)"),L4e.forEach(t),pco=i(M),jp=n(M,"LI",{});var x4e=s(jp);Bre=n(x4e,"STRONG",{});var jzr=s(Bre);_co=r(jzr,"lxmert"),jzr.forEach(t),uco=r(x4e," \u2014 "),tP=n(x4e,"A",{href:!0});var Dzr=s(tP);bco=r(Dzr,"LxmertModel"),Dzr.forEach(t),vco=r(x4e," (LXMERT model)"),x4e.forEach(t),Fco=i(M),Dp=n(M,"LI",{});var k4e=s(Dp);Pre=n(k4e,"STRONG",{});var Gzr=s(Pre);Tco=r(Gzr,"m2m_100"),Gzr.forEach(t),Mco=r(k4e," \u2014 "),aP=n(k4e,"A",{href:!0});var Ozr=s(aP);Eco=r(Ozr,"M2M100Model"),Ozr.forEach(t),Cco=r(k4e," (M2M100 model)"),k4e.forEach(t),wco=i(M),Gp=n(M,"LI",{});var S4e=s(Gp);$re=n(S4e,"STRONG",{});var Vzr=s($re);Aco=r(Vzr,"marian"),Vzr.forEach(t),yco=r(S4e," \u2014 "),nP=n(S4e,"A",{href:!0});var Xzr=s(nP);Lco=r(Xzr,"MarianModel"),Xzr.forEach(t),xco=r(S4e," (Marian model)"),S4e.forEach(t),kco=i(M),Op=n(M,"LI",{});var R4e=s(Op);Ire=n(R4e,"STRONG",{});var zzr=s(Ire);Sco=r(zzr,"maskformer"),zzr.forEach(t),Rco=r(R4e," \u2014 "),sP=n(R4e,"A",{href:!0});var Qzr=s(sP);Bco=r(Qzr,"MaskFormerModel"),Qzr.forEach(t),Pco=r(R4e," (MaskFormer model)"),R4e.forEach(t),$co=i(M),Vp=n(M,"LI",{});var B4e=s(Vp);qre=n(B4e,"STRONG",{});var Wzr=s(qre);Ico=r(Wzr,"mbart"),Wzr.forEach(t),qco=r(B4e," \u2014 "),lP=n(B4e,"A",{href:!0});var Hzr=s(lP);Nco=r(Hzr,"MBartModel"),Hzr.forEach(t),jco=r(B4e," (mBART model)"),B4e.forEach(t),Dco=i(M),Xp=n(M,"LI",{});var P4e=s(Xp);Nre=n(P4e,"STRONG",{});var Uzr=s(Nre);Gco=r(Uzr,"megatron-bert"),Uzr.forEach(t),Oco=r(P4e," \u2014 "),iP=n(P4e,"A",{href:!0});var Jzr=s(iP);Vco=r(Jzr,"MegatronBertModel"),Jzr.forEach(t),Xco=r(P4e," (MegatronBert model)"),P4e.forEach(t),zco=i(M),zp=n(M,"LI",{});var $4e=s(zp);jre=n($4e,"STRONG",{});var Yzr=s(jre);Qco=r(Yzr,"mobilebert"),Yzr.forEach(t),Wco=r($4e," \u2014 "),dP=n($4e,"A",{href:!0});var Kzr=s(dP);Hco=r(Kzr,"MobileBertModel"),Kzr.forEach(t),Uco=r($4e," (MobileBERT model)"),$4e.forEach(t),Jco=i(M),Qp=n(M,"LI",{});var I4e=s(Qp);Dre=n(I4e,"STRONG",{});var Zzr=s(Dre);Yco=r(Zzr,"mpnet"),Zzr.forEach(t),Kco=r(I4e," \u2014 "),cP=n(I4e,"A",{href:!0});var eQr=s(cP);Zco=r(eQr,"MPNetModel"),eQr.forEach(t),efo=r(I4e," (MPNet model)"),I4e.forEach(t),ofo=i(M),Wp=n(M,"LI",{});var q4e=s(Wp);Gre=n(q4e,"STRONG",{});var oQr=s(Gre);rfo=r(oQr,"mt5"),oQr.forEach(t),tfo=r(q4e," \u2014 "),fP=n(q4e,"A",{href:!0});var rQr=s(fP);afo=r(rQr,"MT5Model"),rQr.forEach(t),nfo=r(q4e," (mT5 model)"),q4e.forEach(t),sfo=i(M),Hp=n(M,"LI",{});var N4e=s(Hp);Ore=n(N4e,"STRONG",{});var tQr=s(Ore);lfo=r(tQr,"nystromformer"),tQr.forEach(t),ifo=r(N4e," \u2014 "),mP=n(N4e,"A",{href:!0});var aQr=s(mP);dfo=r(aQr,"NystromformerModel"),aQr.forEach(t),cfo=r(N4e," (Nystromformer model)"),N4e.forEach(t),ffo=i(M),Up=n(M,"LI",{});var j4e=s(Up);Vre=n(j4e,"STRONG",{});var nQr=s(Vre);mfo=r(nQr,"openai-gpt"),nQr.forEach(t),gfo=r(j4e," \u2014 "),gP=n(j4e,"A",{href:!0});var sQr=s(gP);hfo=r(sQr,"OpenAIGPTModel"),sQr.forEach(t),pfo=r(j4e," (OpenAI GPT model)"),j4e.forEach(t),_fo=i(M),Jp=n(M,"LI",{});var D4e=s(Jp);Xre=n(D4e,"STRONG",{});var lQr=s(Xre);ufo=r(lQr,"pegasus"),lQr.forEach(t),bfo=r(D4e," \u2014 "),hP=n(D4e,"A",{href:!0});var iQr=s(hP);vfo=r(iQr,"PegasusModel"),iQr.forEach(t),Ffo=r(D4e," (Pegasus model)"),D4e.forEach(t),Tfo=i(M),Yp=n(M,"LI",{});var G4e=s(Yp);zre=n(G4e,"STRONG",{});var dQr=s(zre);Mfo=r(dQr,"perceiver"),dQr.forEach(t),Efo=r(G4e," \u2014 "),pP=n(G4e,"A",{href:!0});var cQr=s(pP);Cfo=r(cQr,"PerceiverModel"),cQr.forEach(t),wfo=r(G4e," (Perceiver model)"),G4e.forEach(t),Afo=i(M),Kp=n(M,"LI",{});var O4e=s(Kp);Qre=n(O4e,"STRONG",{});var fQr=s(Qre);yfo=r(fQr,"plbart"),fQr.forEach(t),Lfo=r(O4e," \u2014 "),_P=n(O4e,"A",{href:!0});var mQr=s(_P);xfo=r(mQr,"PLBartModel"),mQr.forEach(t),kfo=r(O4e," (PLBart model)"),O4e.forEach(t),Sfo=i(M),Zp=n(M,"LI",{});var V4e=s(Zp);Wre=n(V4e,"STRONG",{});var gQr=s(Wre);Rfo=r(gQr,"poolformer"),gQr.forEach(t),Bfo=r(V4e," \u2014 "),uP=n(V4e,"A",{href:!0});var hQr=s(uP);Pfo=r(hQr,"PoolFormerModel"),hQr.forEach(t),$fo=r(V4e," (PoolFormer model)"),V4e.forEach(t),Ifo=i(M),e_=n(M,"LI",{});var X4e=s(e_);Hre=n(X4e,"STRONG",{});var pQr=s(Hre);qfo=r(pQr,"prophetnet"),pQr.forEach(t),Nfo=r(X4e," \u2014 "),bP=n(X4e,"A",{href:!0});var _Qr=s(bP);jfo=r(_Qr,"ProphetNetModel"),_Qr.forEach(t),Dfo=r(X4e," (ProphetNet model)"),X4e.forEach(t),Gfo=i(M),o_=n(M,"LI",{});var z4e=s(o_);Ure=n(z4e,"STRONG",{});var uQr=s(Ure);Ofo=r(uQr,"qdqbert"),uQr.forEach(t),Vfo=r(z4e," \u2014 "),vP=n(z4e,"A",{href:!0});var bQr=s(vP);Xfo=r(bQr,"QDQBertModel"),bQr.forEach(t),zfo=r(z4e," (QDQBert model)"),z4e.forEach(t),Qfo=i(M),r_=n(M,"LI",{});var Q4e=s(r_);Jre=n(Q4e,"STRONG",{});var vQr=s(Jre);Wfo=r(vQr,"reformer"),vQr.forEach(t),Hfo=r(Q4e," \u2014 "),FP=n(Q4e,"A",{href:!0});var FQr=s(FP);Ufo=r(FQr,"ReformerModel"),FQr.forEach(t),Jfo=r(Q4e," (Reformer model)"),Q4e.forEach(t),Yfo=i(M),t_=n(M,"LI",{});var W4e=s(t_);Yre=n(W4e,"STRONG",{});var TQr=s(Yre);Kfo=r(TQr,"regnet"),TQr.forEach(t),Zfo=r(W4e," \u2014 "),TP=n(W4e,"A",{href:!0});var MQr=s(TP);emo=r(MQr,"RegNetModel"),MQr.forEach(t),omo=r(W4e," (RegNet model)"),W4e.forEach(t),rmo=i(M),a_=n(M,"LI",{});var H4e=s(a_);Kre=n(H4e,"STRONG",{});var EQr=s(Kre);tmo=r(EQr,"rembert"),EQr.forEach(t),amo=r(H4e," \u2014 "),MP=n(H4e,"A",{href:!0});var CQr=s(MP);nmo=r(CQr,"RemBertModel"),CQr.forEach(t),smo=r(H4e," (RemBERT model)"),H4e.forEach(t),lmo=i(M),n_=n(M,"LI",{});var U4e=s(n_);Zre=n(U4e,"STRONG",{});var wQr=s(Zre);imo=r(wQr,"resnet"),wQr.forEach(t),dmo=r(U4e," \u2014 "),EP=n(U4e,"A",{href:!0});var AQr=s(EP);cmo=r(AQr,"ResNetModel"),AQr.forEach(t),fmo=r(U4e," (ResNet model)"),U4e.forEach(t),mmo=i(M),s_=n(M,"LI",{});var J4e=s(s_);ete=n(J4e,"STRONG",{});var yQr=s(ete);gmo=r(yQr,"retribert"),yQr.forEach(t),hmo=r(J4e," \u2014 "),CP=n(J4e,"A",{href:!0});var LQr=s(CP);pmo=r(LQr,"RetriBertModel"),LQr.forEach(t),_mo=r(J4e," (RetriBERT model)"),J4e.forEach(t),umo=i(M),l_=n(M,"LI",{});var Y4e=s(l_);ote=n(Y4e,"STRONG",{});var xQr=s(ote);bmo=r(xQr,"roberta"),xQr.forEach(t),vmo=r(Y4e," \u2014 "),wP=n(Y4e,"A",{href:!0});var kQr=s(wP);Fmo=r(kQr,"RobertaModel"),kQr.forEach(t),Tmo=r(Y4e," (RoBERTa model)"),Y4e.forEach(t),Mmo=i(M),i_=n(M,"LI",{});var K4e=s(i_);rte=n(K4e,"STRONG",{});var SQr=s(rte);Emo=r(SQr,"roformer"),SQr.forEach(t),Cmo=r(K4e," \u2014 "),AP=n(K4e,"A",{href:!0});var RQr=s(AP);wmo=r(RQr,"RoFormerModel"),RQr.forEach(t),Amo=r(K4e," (RoFormer model)"),K4e.forEach(t),ymo=i(M),d_=n(M,"LI",{});var Z4e=s(d_);tte=n(Z4e,"STRONG",{});var BQr=s(tte);Lmo=r(BQr,"segformer"),BQr.forEach(t),xmo=r(Z4e," \u2014 "),yP=n(Z4e,"A",{href:!0});var PQr=s(yP);kmo=r(PQr,"SegformerModel"),PQr.forEach(t),Smo=r(Z4e," (SegFormer model)"),Z4e.forEach(t),Rmo=i(M),c_=n(M,"LI",{});var eEe=s(c_);ate=n(eEe,"STRONG",{});var $Qr=s(ate);Bmo=r($Qr,"sew"),$Qr.forEach(t),Pmo=r(eEe," \u2014 "),LP=n(eEe,"A",{href:!0});var IQr=s(LP);$mo=r(IQr,"SEWModel"),IQr.forEach(t),Imo=r(eEe," (SEW model)"),eEe.forEach(t),qmo=i(M),f_=n(M,"LI",{});var oEe=s(f_);nte=n(oEe,"STRONG",{});var qQr=s(nte);Nmo=r(qQr,"sew-d"),qQr.forEach(t),jmo=r(oEe," \u2014 "),xP=n(oEe,"A",{href:!0});var NQr=s(xP);Dmo=r(NQr,"SEWDModel"),NQr.forEach(t),Gmo=r(oEe," (SEW-D model)"),oEe.forEach(t),Omo=i(M),m_=n(M,"LI",{});var rEe=s(m_);ste=n(rEe,"STRONG",{});var jQr=s(ste);Vmo=r(jQr,"speech_to_text"),jQr.forEach(t),Xmo=r(rEe," \u2014 "),kP=n(rEe,"A",{href:!0});var DQr=s(kP);zmo=r(DQr,"Speech2TextModel"),DQr.forEach(t),Qmo=r(rEe," (Speech2Text model)"),rEe.forEach(t),Wmo=i(M),g_=n(M,"LI",{});var tEe=s(g_);lte=n(tEe,"STRONG",{});var GQr=s(lte);Hmo=r(GQr,"splinter"),GQr.forEach(t),Umo=r(tEe," \u2014 "),SP=n(tEe,"A",{href:!0});var OQr=s(SP);Jmo=r(OQr,"SplinterModel"),OQr.forEach(t),Ymo=r(tEe," (Splinter model)"),tEe.forEach(t),Kmo=i(M),h_=n(M,"LI",{});var aEe=s(h_);ite=n(aEe,"STRONG",{});var VQr=s(ite);Zmo=r(VQr,"squeezebert"),VQr.forEach(t),ego=r(aEe," \u2014 "),RP=n(aEe,"A",{href:!0});var XQr=s(RP);ogo=r(XQr,"SqueezeBertModel"),XQr.forEach(t),rgo=r(aEe," (SqueezeBERT model)"),aEe.forEach(t),tgo=i(M),p_=n(M,"LI",{});var nEe=s(p_);dte=n(nEe,"STRONG",{});var zQr=s(dte);ago=r(zQr,"swin"),zQr.forEach(t),ngo=r(nEe," \u2014 "),BP=n(nEe,"A",{href:!0});var QQr=s(BP);sgo=r(QQr,"SwinModel"),QQr.forEach(t),lgo=r(nEe," (Swin model)"),nEe.forEach(t),igo=i(M),__=n(M,"LI",{});var sEe=s(__);cte=n(sEe,"STRONG",{});var WQr=s(cte);dgo=r(WQr,"t5"),WQr.forEach(t),cgo=r(sEe," \u2014 "),PP=n(sEe,"A",{href:!0});var HQr=s(PP);fgo=r(HQr,"T5Model"),HQr.forEach(t),mgo=r(sEe," (T5 model)"),sEe.forEach(t),ggo=i(M),u_=n(M,"LI",{});var lEe=s(u_);fte=n(lEe,"STRONG",{});var UQr=s(fte);hgo=r(UQr,"tapas"),UQr.forEach(t),pgo=r(lEe," \u2014 "),$P=n(lEe,"A",{href:!0});var JQr=s($P);_go=r(JQr,"TapasModel"),JQr.forEach(t),ugo=r(lEe," (TAPAS model)"),lEe.forEach(t),bgo=i(M),b_=n(M,"LI",{});var iEe=s(b_);mte=n(iEe,"STRONG",{});var YQr=s(mte);vgo=r(YQr,"transfo-xl"),YQr.forEach(t),Fgo=r(iEe," \u2014 "),IP=n(iEe,"A",{href:!0});var KQr=s(IP);Tgo=r(KQr,"TransfoXLModel"),KQr.forEach(t),Mgo=r(iEe," (Transformer-XL model)"),iEe.forEach(t),Ego=i(M),v_=n(M,"LI",{});var dEe=s(v_);gte=n(dEe,"STRONG",{});var ZQr=s(gte);Cgo=r(ZQr,"unispeech"),ZQr.forEach(t),wgo=r(dEe," \u2014 "),qP=n(dEe,"A",{href:!0});var eWr=s(qP);Ago=r(eWr,"UniSpeechModel"),eWr.forEach(t),ygo=r(dEe," (UniSpeech model)"),dEe.forEach(t),Lgo=i(M),F_=n(M,"LI",{});var cEe=s(F_);hte=n(cEe,"STRONG",{});var oWr=s(hte);xgo=r(oWr,"unispeech-sat"),oWr.forEach(t),kgo=r(cEe," \u2014 "),NP=n(cEe,"A",{href:!0});var rWr=s(NP);Sgo=r(rWr,"UniSpeechSatModel"),rWr.forEach(t),Rgo=r(cEe," (UniSpeechSat model)"),cEe.forEach(t),Bgo=i(M),T_=n(M,"LI",{});var fEe=s(T_);pte=n(fEe,"STRONG",{});var tWr=s(pte);Pgo=r(tWr,"van"),tWr.forEach(t),$go=r(fEe," \u2014 "),jP=n(fEe,"A",{href:!0});var aWr=s(jP);Igo=r(aWr,"VanModel"),aWr.forEach(t),qgo=r(fEe," (VAN model)"),fEe.forEach(t),Ngo=i(M),M_=n(M,"LI",{});var mEe=s(M_);_te=n(mEe,"STRONG",{});var nWr=s(_te);jgo=r(nWr,"vilt"),nWr.forEach(t),Dgo=r(mEe," \u2014 "),DP=n(mEe,"A",{href:!0});var sWr=s(DP);Ggo=r(sWr,"ViltModel"),sWr.forEach(t),Ogo=r(mEe," (ViLT model)"),mEe.forEach(t),Vgo=i(M),E_=n(M,"LI",{});var gEe=s(E_);ute=n(gEe,"STRONG",{});var lWr=s(ute);Xgo=r(lWr,"vision-text-dual-encoder"),lWr.forEach(t),zgo=r(gEe," \u2014 "),GP=n(gEe,"A",{href:!0});var iWr=s(GP);Qgo=r(iWr,"VisionTextDualEncoderModel"),iWr.forEach(t),Wgo=r(gEe," (VisionTextDualEncoder model)"),gEe.forEach(t),Hgo=i(M),C_=n(M,"LI",{});var hEe=s(C_);bte=n(hEe,"STRONG",{});var dWr=s(bte);Ugo=r(dWr,"visual_bert"),dWr.forEach(t),Jgo=r(hEe," \u2014 "),OP=n(hEe,"A",{href:!0});var cWr=s(OP);Ygo=r(cWr,"VisualBertModel"),cWr.forEach(t),Kgo=r(hEe," (VisualBert model)"),hEe.forEach(t),Zgo=i(M),w_=n(M,"LI",{});var pEe=s(w_);vte=n(pEe,"STRONG",{});var fWr=s(vte);eho=r(fWr,"vit"),fWr.forEach(t),oho=r(pEe," \u2014 "),VP=n(pEe,"A",{href:!0});var mWr=s(VP);rho=r(mWr,"ViTModel"),mWr.forEach(t),tho=r(pEe," (ViT model)"),pEe.forEach(t),aho=i(M),A_=n(M,"LI",{});var _Ee=s(A_);Fte=n(_Ee,"STRONG",{});var gWr=s(Fte);nho=r(gWr,"vit_mae"),gWr.forEach(t),sho=r(_Ee," \u2014 "),XP=n(_Ee,"A",{href:!0});var hWr=s(XP);lho=r(hWr,"ViTMAEModel"),hWr.forEach(t),iho=r(_Ee," (ViTMAE model)"),_Ee.forEach(t),dho=i(M),y_=n(M,"LI",{});var uEe=s(y_);Tte=n(uEe,"STRONG",{});var pWr=s(Tte);cho=r(pWr,"wav2vec2"),pWr.forEach(t),fho=r(uEe," \u2014 "),zP=n(uEe,"A",{href:!0});var _Wr=s(zP);mho=r(_Wr,"Wav2Vec2Model"),_Wr.forEach(t),gho=r(uEe," (Wav2Vec2 model)"),uEe.forEach(t),hho=i(M),L_=n(M,"LI",{});var bEe=s(L_);Mte=n(bEe,"STRONG",{});var uWr=s(Mte);pho=r(uWr,"wavlm"),uWr.forEach(t),_ho=r(bEe," \u2014 "),QP=n(bEe,"A",{href:!0});var bWr=s(QP);uho=r(bWr,"WavLMModel"),bWr.forEach(t),bho=r(bEe," (WavLM model)"),bEe.forEach(t),vho=i(M),x_=n(M,"LI",{});var vEe=s(x_);Ete=n(vEe,"STRONG",{});var vWr=s(Ete);Fho=r(vWr,"xglm"),vWr.forEach(t),Tho=r(vEe," \u2014 "),WP=n(vEe,"A",{href:!0});var FWr=s(WP);Mho=r(FWr,"XGLMModel"),FWr.forEach(t),Eho=r(vEe," (XGLM model)"),vEe.forEach(t),Cho=i(M),k_=n(M,"LI",{});var FEe=s(k_);Cte=n(FEe,"STRONG",{});var TWr=s(Cte);who=r(TWr,"xlm"),TWr.forEach(t),Aho=r(FEe," \u2014 "),HP=n(FEe,"A",{href:!0});var MWr=s(HP);yho=r(MWr,"XLMModel"),MWr.forEach(t),Lho=r(FEe," (XLM model)"),FEe.forEach(t),xho=i(M),S_=n(M,"LI",{});var TEe=s(S_);wte=n(TEe,"STRONG",{});var EWr=s(wte);kho=r(EWr,"xlm-prophetnet"),EWr.forEach(t),Sho=r(TEe," \u2014 "),UP=n(TEe,"A",{href:!0});var CWr=s(UP);Rho=r(CWr,"XLMProphetNetModel"),CWr.forEach(t),Bho=r(TEe," (XLMProphetNet model)"),TEe.forEach(t),Pho=i(M),R_=n(M,"LI",{});var MEe=s(R_);Ate=n(MEe,"STRONG",{});var wWr=s(Ate);$ho=r(wWr,"xlm-roberta"),wWr.forEach(t),Iho=r(MEe," \u2014 "),JP=n(MEe,"A",{href:!0});var AWr=s(JP);qho=r(AWr,"XLMRobertaModel"),AWr.forEach(t),Nho=r(MEe," (XLM-RoBERTa model)"),MEe.forEach(t),jho=i(M),B_=n(M,"LI",{});var EEe=s(B_);yte=n(EEe,"STRONG",{});var yWr=s(yte);Dho=r(yWr,"xlm-roberta-xl"),yWr.forEach(t),Gho=r(EEe," \u2014 "),YP=n(EEe,"A",{href:!0});var LWr=s(YP);Oho=r(LWr,"XLMRobertaXLModel"),LWr.forEach(t),Vho=r(EEe," (XLM-RoBERTa-XL model)"),EEe.forEach(t),Xho=i(M),P_=n(M,"LI",{});var CEe=s(P_);Lte=n(CEe,"STRONG",{});var xWr=s(Lte);zho=r(xWr,"xlnet"),xWr.forEach(t),Qho=r(CEe," \u2014 "),KP=n(CEe,"A",{href:!0});var kWr=s(KP);Who=r(kWr,"XLNetModel"),kWr.forEach(t),Hho=r(CEe," (XLNet model)"),CEe.forEach(t),Uho=i(M),$_=n(M,"LI",{});var wEe=s($_);xte=n(wEe,"STRONG",{});var SWr=s(xte);Jho=r(SWr,"yoso"),SWr.forEach(t),Yho=r(wEe," \u2014 "),ZP=n(wEe,"A",{href:!0});var RWr=s(ZP);Kho=r(RWr,"YosoModel"),RWr.forEach(t),Zho=r(wEe," (YOSO model)"),wEe.forEach(t),M.forEach(t),epo=i(Dt),I_=n(Dt,"P",{});var AEe=s(I_);opo=r(AEe,"The model is set in evaluation mode by default using "),kte=n(AEe,"CODE",{});var BWr=s(kte);rpo=r(BWr,"model.eval()"),BWr.forEach(t),tpo=r(AEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ste=n(AEe,"CODE",{});var PWr=s(Ste);apo=r(PWr,"model.train()"),PWr.forEach(t),AEe.forEach(t),npo=i(Dt),Rte=n(Dt,"P",{});var $Wr=s(Rte);spo=r($Wr,"Examples:"),$Wr.forEach(t),lpo=i(Dt),m(m5.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),NRe=i(c),ed=n(c,"H2",{class:!0});var WPe=s(ed);q_=n(WPe,"A",{id:!0,class:!0,href:!0});var IWr=s(q_);Bte=n(IWr,"SPAN",{});var qWr=s(Bte);m(g5.$$.fragment,qWr),qWr.forEach(t),IWr.forEach(t),ipo=i(WPe),Pte=n(WPe,"SPAN",{});var NWr=s(Pte);dpo=r(NWr,"AutoModelForPreTraining"),NWr.forEach(t),WPe.forEach(t),jRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(h5.$$.fragment,Us),cpo=i(Us),od=n(Us,"P",{});var bU=s(od);fpo=r(bU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),e$=n(bU,"A",{href:!0});var jWr=s(e$);mpo=r(jWr,"from_pretrained()"),jWr.forEach(t),gpo=r(bU," class method or the "),o$=n(bU,"A",{href:!0});var DWr=s(o$);hpo=r(DWr,"from_config()"),DWr.forEach(t),ppo=r(bU,` class
method.`),bU.forEach(t),_po=i(Us),p5=n(Us,"P",{});var HPe=s(p5);upo=r(HPe,"This class cannot be instantiated directly using "),$te=n(HPe,"CODE",{});var GWr=s($te);bpo=r(GWr,"__init__()"),GWr.forEach(t),vpo=r(HPe," (throws an error)."),HPe.forEach(t),Fpo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(_5.$$.fragment,Js),Tpo=i(Js),Ite=n(Js,"P",{});var OWr=s(Ite);Mpo=r(OWr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OWr.forEach(t),Epo=i(Js),rd=n(Js,"P",{});var vU=s(rd);Cpo=r(vU,`Note:
Loading a model from its configuration file does `),qte=n(vU,"STRONG",{});var VWr=s(qte);wpo=r(VWr,"not"),VWr.forEach(t),Apo=r(vU,` load the model weights. It only affects the
model\u2019s configuration. Use `),r$=n(vU,"A",{href:!0});var XWr=s(r$);ypo=r(XWr,"from_pretrained()"),XWr.forEach(t),Lpo=r(vU," to load the model weights."),vU.forEach(t),xpo=i(Js),Nte=n(Js,"P",{});var zWr=s(Nte);kpo=r(zWr,"Examples:"),zWr.forEach(t),Spo=i(Js),m(u5.$$.fragment,Js),Js.forEach(t),Rpo=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(b5.$$.fragment,Gt),Bpo=i(Gt),jte=n(Gt,"P",{});var QWr=s(jte);Ppo=r(QWr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),QWr.forEach(t),$po=i(Gt),za=n(Gt,"P",{});var k4=s(za);Ipo=r(k4,"The model class to instantiate is selected based on the "),Dte=n(k4,"CODE",{});var WWr=s(Dte);qpo=r(WWr,"model_type"),WWr.forEach(t),Npo=r(k4,` property of the config object (either
passed as an argument or loaded from `),Gte=n(k4,"CODE",{});var HWr=s(Gte);jpo=r(HWr,"pretrained_model_name_or_path"),HWr.forEach(t),Dpo=r(k4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ote=n(k4,"CODE",{});var UWr=s(Ote);Gpo=r(UWr,"pretrained_model_name_or_path"),UWr.forEach(t),Opo=r(k4,":"),k4.forEach(t),Vpo=i(Gt),R=n(Gt,"UL",{});var P=s(R);N_=n(P,"LI",{});var yEe=s(N_);Vte=n(yEe,"STRONG",{});var JWr=s(Vte);Xpo=r(JWr,"albert"),JWr.forEach(t),zpo=r(yEe," \u2014 "),t$=n(yEe,"A",{href:!0});var YWr=s(t$);Qpo=r(YWr,"AlbertForPreTraining"),YWr.forEach(t),Wpo=r(yEe," (ALBERT model)"),yEe.forEach(t),Hpo=i(P),j_=n(P,"LI",{});var LEe=s(j_);Xte=n(LEe,"STRONG",{});var KWr=s(Xte);Upo=r(KWr,"bart"),KWr.forEach(t),Jpo=r(LEe," \u2014 "),a$=n(LEe,"A",{href:!0});var ZWr=s(a$);Ypo=r(ZWr,"BartForConditionalGeneration"),ZWr.forEach(t),Kpo=r(LEe," (BART model)"),LEe.forEach(t),Zpo=i(P),D_=n(P,"LI",{});var xEe=s(D_);zte=n(xEe,"STRONG",{});var eHr=s(zte);e_o=r(eHr,"bert"),eHr.forEach(t),o_o=r(xEe," \u2014 "),n$=n(xEe,"A",{href:!0});var oHr=s(n$);r_o=r(oHr,"BertForPreTraining"),oHr.forEach(t),t_o=r(xEe," (BERT model)"),xEe.forEach(t),a_o=i(P),G_=n(P,"LI",{});var kEe=s(G_);Qte=n(kEe,"STRONG",{});var rHr=s(Qte);n_o=r(rHr,"big_bird"),rHr.forEach(t),s_o=r(kEe," \u2014 "),s$=n(kEe,"A",{href:!0});var tHr=s(s$);l_o=r(tHr,"BigBirdForPreTraining"),tHr.forEach(t),i_o=r(kEe," (BigBird model)"),kEe.forEach(t),d_o=i(P),O_=n(P,"LI",{});var SEe=s(O_);Wte=n(SEe,"STRONG",{});var aHr=s(Wte);c_o=r(aHr,"camembert"),aHr.forEach(t),f_o=r(SEe," \u2014 "),l$=n(SEe,"A",{href:!0});var nHr=s(l$);m_o=r(nHr,"CamembertForMaskedLM"),nHr.forEach(t),g_o=r(SEe," (CamemBERT model)"),SEe.forEach(t),h_o=i(P),V_=n(P,"LI",{});var REe=s(V_);Hte=n(REe,"STRONG",{});var sHr=s(Hte);p_o=r(sHr,"ctrl"),sHr.forEach(t),__o=r(REe," \u2014 "),i$=n(REe,"A",{href:!0});var lHr=s(i$);u_o=r(lHr,"CTRLLMHeadModel"),lHr.forEach(t),b_o=r(REe," (CTRL model)"),REe.forEach(t),v_o=i(P),X_=n(P,"LI",{});var BEe=s(X_);Ute=n(BEe,"STRONG",{});var iHr=s(Ute);F_o=r(iHr,"deberta"),iHr.forEach(t),T_o=r(BEe," \u2014 "),d$=n(BEe,"A",{href:!0});var dHr=s(d$);M_o=r(dHr,"DebertaForMaskedLM"),dHr.forEach(t),E_o=r(BEe," (DeBERTa model)"),BEe.forEach(t),C_o=i(P),z_=n(P,"LI",{});var PEe=s(z_);Jte=n(PEe,"STRONG",{});var cHr=s(Jte);w_o=r(cHr,"deberta-v2"),cHr.forEach(t),A_o=r(PEe," \u2014 "),c$=n(PEe,"A",{href:!0});var fHr=s(c$);y_o=r(fHr,"DebertaV2ForMaskedLM"),fHr.forEach(t),L_o=r(PEe," (DeBERTa-v2 model)"),PEe.forEach(t),x_o=i(P),Q_=n(P,"LI",{});var $Ee=s(Q_);Yte=n($Ee,"STRONG",{});var mHr=s(Yte);k_o=r(mHr,"distilbert"),mHr.forEach(t),S_o=r($Ee," \u2014 "),f$=n($Ee,"A",{href:!0});var gHr=s(f$);R_o=r(gHr,"DistilBertForMaskedLM"),gHr.forEach(t),B_o=r($Ee," (DistilBERT model)"),$Ee.forEach(t),P_o=i(P),W_=n(P,"LI",{});var IEe=s(W_);Kte=n(IEe,"STRONG",{});var hHr=s(Kte);$_o=r(hHr,"electra"),hHr.forEach(t),I_o=r(IEe," \u2014 "),m$=n(IEe,"A",{href:!0});var pHr=s(m$);q_o=r(pHr,"ElectraForPreTraining"),pHr.forEach(t),N_o=r(IEe," (ELECTRA model)"),IEe.forEach(t),j_o=i(P),H_=n(P,"LI",{});var qEe=s(H_);Zte=n(qEe,"STRONG",{});var _Hr=s(Zte);D_o=r(_Hr,"flaubert"),_Hr.forEach(t),G_o=r(qEe," \u2014 "),g$=n(qEe,"A",{href:!0});var uHr=s(g$);O_o=r(uHr,"FlaubertWithLMHeadModel"),uHr.forEach(t),V_o=r(qEe," (FlauBERT model)"),qEe.forEach(t),X_o=i(P),U_=n(P,"LI",{});var NEe=s(U_);eae=n(NEe,"STRONG",{});var bHr=s(eae);z_o=r(bHr,"fnet"),bHr.forEach(t),Q_o=r(NEe," \u2014 "),h$=n(NEe,"A",{href:!0});var vHr=s(h$);W_o=r(vHr,"FNetForPreTraining"),vHr.forEach(t),H_o=r(NEe," (FNet model)"),NEe.forEach(t),U_o=i(P),J_=n(P,"LI",{});var jEe=s(J_);oae=n(jEe,"STRONG",{});var FHr=s(oae);J_o=r(FHr,"fsmt"),FHr.forEach(t),Y_o=r(jEe," \u2014 "),p$=n(jEe,"A",{href:!0});var THr=s(p$);K_o=r(THr,"FSMTForConditionalGeneration"),THr.forEach(t),Z_o=r(jEe," (FairSeq Machine-Translation model)"),jEe.forEach(t),euo=i(P),Y_=n(P,"LI",{});var DEe=s(Y_);rae=n(DEe,"STRONG",{});var MHr=s(rae);ouo=r(MHr,"funnel"),MHr.forEach(t),ruo=r(DEe," \u2014 "),_$=n(DEe,"A",{href:!0});var EHr=s(_$);tuo=r(EHr,"FunnelForPreTraining"),EHr.forEach(t),auo=r(DEe," (Funnel Transformer model)"),DEe.forEach(t),nuo=i(P),K_=n(P,"LI",{});var GEe=s(K_);tae=n(GEe,"STRONG",{});var CHr=s(tae);suo=r(CHr,"gpt2"),CHr.forEach(t),luo=r(GEe," \u2014 "),u$=n(GEe,"A",{href:!0});var wHr=s(u$);iuo=r(wHr,"GPT2LMHeadModel"),wHr.forEach(t),duo=r(GEe," (OpenAI GPT-2 model)"),GEe.forEach(t),cuo=i(P),Z_=n(P,"LI",{});var OEe=s(Z_);aae=n(OEe,"STRONG",{});var AHr=s(aae);fuo=r(AHr,"ibert"),AHr.forEach(t),muo=r(OEe," \u2014 "),b$=n(OEe,"A",{href:!0});var yHr=s(b$);guo=r(yHr,"IBertForMaskedLM"),yHr.forEach(t),huo=r(OEe," (I-BERT model)"),OEe.forEach(t),puo=i(P),eu=n(P,"LI",{});var VEe=s(eu);nae=n(VEe,"STRONG",{});var LHr=s(nae);_uo=r(LHr,"layoutlm"),LHr.forEach(t),uuo=r(VEe," \u2014 "),v$=n(VEe,"A",{href:!0});var xHr=s(v$);buo=r(xHr,"LayoutLMForMaskedLM"),xHr.forEach(t),vuo=r(VEe," (LayoutLM model)"),VEe.forEach(t),Fuo=i(P),ou=n(P,"LI",{});var XEe=s(ou);sae=n(XEe,"STRONG",{});var kHr=s(sae);Tuo=r(kHr,"longformer"),kHr.forEach(t),Muo=r(XEe," \u2014 "),F$=n(XEe,"A",{href:!0});var SHr=s(F$);Euo=r(SHr,"LongformerForMaskedLM"),SHr.forEach(t),Cuo=r(XEe," (Longformer model)"),XEe.forEach(t),wuo=i(P),ru=n(P,"LI",{});var zEe=s(ru);lae=n(zEe,"STRONG",{});var RHr=s(lae);Auo=r(RHr,"lxmert"),RHr.forEach(t),yuo=r(zEe," \u2014 "),T$=n(zEe,"A",{href:!0});var BHr=s(T$);Luo=r(BHr,"LxmertForPreTraining"),BHr.forEach(t),xuo=r(zEe," (LXMERT model)"),zEe.forEach(t),kuo=i(P),tu=n(P,"LI",{});var QEe=s(tu);iae=n(QEe,"STRONG",{});var PHr=s(iae);Suo=r(PHr,"megatron-bert"),PHr.forEach(t),Ruo=r(QEe," \u2014 "),M$=n(QEe,"A",{href:!0});var $Hr=s(M$);Buo=r($Hr,"MegatronBertForPreTraining"),$Hr.forEach(t),Puo=r(QEe," (MegatronBert model)"),QEe.forEach(t),$uo=i(P),au=n(P,"LI",{});var WEe=s(au);dae=n(WEe,"STRONG",{});var IHr=s(dae);Iuo=r(IHr,"mobilebert"),IHr.forEach(t),quo=r(WEe," \u2014 "),E$=n(WEe,"A",{href:!0});var qHr=s(E$);Nuo=r(qHr,"MobileBertForPreTraining"),qHr.forEach(t),juo=r(WEe," (MobileBERT model)"),WEe.forEach(t),Duo=i(P),nu=n(P,"LI",{});var HEe=s(nu);cae=n(HEe,"STRONG",{});var NHr=s(cae);Guo=r(NHr,"mpnet"),NHr.forEach(t),Ouo=r(HEe," \u2014 "),C$=n(HEe,"A",{href:!0});var jHr=s(C$);Vuo=r(jHr,"MPNetForMaskedLM"),jHr.forEach(t),Xuo=r(HEe," (MPNet model)"),HEe.forEach(t),zuo=i(P),su=n(P,"LI",{});var UEe=s(su);fae=n(UEe,"STRONG",{});var DHr=s(fae);Quo=r(DHr,"openai-gpt"),DHr.forEach(t),Wuo=r(UEe," \u2014 "),w$=n(UEe,"A",{href:!0});var GHr=s(w$);Huo=r(GHr,"OpenAIGPTLMHeadModel"),GHr.forEach(t),Uuo=r(UEe," (OpenAI GPT model)"),UEe.forEach(t),Juo=i(P),lu=n(P,"LI",{});var JEe=s(lu);mae=n(JEe,"STRONG",{});var OHr=s(mae);Yuo=r(OHr,"retribert"),OHr.forEach(t),Kuo=r(JEe," \u2014 "),A$=n(JEe,"A",{href:!0});var VHr=s(A$);Zuo=r(VHr,"RetriBertModel"),VHr.forEach(t),e1o=r(JEe," (RetriBERT model)"),JEe.forEach(t),o1o=i(P),iu=n(P,"LI",{});var YEe=s(iu);gae=n(YEe,"STRONG",{});var XHr=s(gae);r1o=r(XHr,"roberta"),XHr.forEach(t),t1o=r(YEe," \u2014 "),y$=n(YEe,"A",{href:!0});var zHr=s(y$);a1o=r(zHr,"RobertaForMaskedLM"),zHr.forEach(t),n1o=r(YEe," (RoBERTa model)"),YEe.forEach(t),s1o=i(P),du=n(P,"LI",{});var KEe=s(du);hae=n(KEe,"STRONG",{});var QHr=s(hae);l1o=r(QHr,"squeezebert"),QHr.forEach(t),i1o=r(KEe," \u2014 "),L$=n(KEe,"A",{href:!0});var WHr=s(L$);d1o=r(WHr,"SqueezeBertForMaskedLM"),WHr.forEach(t),c1o=r(KEe," (SqueezeBERT model)"),KEe.forEach(t),f1o=i(P),cu=n(P,"LI",{});var ZEe=s(cu);pae=n(ZEe,"STRONG",{});var HHr=s(pae);m1o=r(HHr,"t5"),HHr.forEach(t),g1o=r(ZEe," \u2014 "),x$=n(ZEe,"A",{href:!0});var UHr=s(x$);h1o=r(UHr,"T5ForConditionalGeneration"),UHr.forEach(t),p1o=r(ZEe," (T5 model)"),ZEe.forEach(t),_1o=i(P),fu=n(P,"LI",{});var e5e=s(fu);_ae=n(e5e,"STRONG",{});var JHr=s(_ae);u1o=r(JHr,"tapas"),JHr.forEach(t),b1o=r(e5e," \u2014 "),k$=n(e5e,"A",{href:!0});var YHr=s(k$);v1o=r(YHr,"TapasForMaskedLM"),YHr.forEach(t),F1o=r(e5e," (TAPAS model)"),e5e.forEach(t),T1o=i(P),mu=n(P,"LI",{});var o5e=s(mu);uae=n(o5e,"STRONG",{});var KHr=s(uae);M1o=r(KHr,"transfo-xl"),KHr.forEach(t),E1o=r(o5e," \u2014 "),S$=n(o5e,"A",{href:!0});var ZHr=s(S$);C1o=r(ZHr,"TransfoXLLMHeadModel"),ZHr.forEach(t),w1o=r(o5e," (Transformer-XL model)"),o5e.forEach(t),A1o=i(P),gu=n(P,"LI",{});var r5e=s(gu);bae=n(r5e,"STRONG",{});var eUr=s(bae);y1o=r(eUr,"unispeech"),eUr.forEach(t),L1o=r(r5e," \u2014 "),R$=n(r5e,"A",{href:!0});var oUr=s(R$);x1o=r(oUr,"UniSpeechForPreTraining"),oUr.forEach(t),k1o=r(r5e," (UniSpeech model)"),r5e.forEach(t),S1o=i(P),hu=n(P,"LI",{});var t5e=s(hu);vae=n(t5e,"STRONG",{});var rUr=s(vae);R1o=r(rUr,"unispeech-sat"),rUr.forEach(t),B1o=r(t5e," \u2014 "),B$=n(t5e,"A",{href:!0});var tUr=s(B$);P1o=r(tUr,"UniSpeechSatForPreTraining"),tUr.forEach(t),$1o=r(t5e," (UniSpeechSat model)"),t5e.forEach(t),I1o=i(P),pu=n(P,"LI",{});var a5e=s(pu);Fae=n(a5e,"STRONG",{});var aUr=s(Fae);q1o=r(aUr,"visual_bert"),aUr.forEach(t),N1o=r(a5e," \u2014 "),P$=n(a5e,"A",{href:!0});var nUr=s(P$);j1o=r(nUr,"VisualBertForPreTraining"),nUr.forEach(t),D1o=r(a5e," (VisualBert model)"),a5e.forEach(t),G1o=i(P),_u=n(P,"LI",{});var n5e=s(_u);Tae=n(n5e,"STRONG",{});var sUr=s(Tae);O1o=r(sUr,"vit_mae"),sUr.forEach(t),V1o=r(n5e," \u2014 "),$$=n(n5e,"A",{href:!0});var lUr=s($$);X1o=r(lUr,"ViTMAEForPreTraining"),lUr.forEach(t),z1o=r(n5e," (ViTMAE model)"),n5e.forEach(t),Q1o=i(P),uu=n(P,"LI",{});var s5e=s(uu);Mae=n(s5e,"STRONG",{});var iUr=s(Mae);W1o=r(iUr,"wav2vec2"),iUr.forEach(t),H1o=r(s5e," \u2014 "),I$=n(s5e,"A",{href:!0});var dUr=s(I$);U1o=r(dUr,"Wav2Vec2ForPreTraining"),dUr.forEach(t),J1o=r(s5e," (Wav2Vec2 model)"),s5e.forEach(t),Y1o=i(P),bu=n(P,"LI",{});var l5e=s(bu);Eae=n(l5e,"STRONG",{});var cUr=s(Eae);K1o=r(cUr,"xlm"),cUr.forEach(t),Z1o=r(l5e," \u2014 "),q$=n(l5e,"A",{href:!0});var fUr=s(q$);ebo=r(fUr,"XLMWithLMHeadModel"),fUr.forEach(t),obo=r(l5e," (XLM model)"),l5e.forEach(t),rbo=i(P),vu=n(P,"LI",{});var i5e=s(vu);Cae=n(i5e,"STRONG",{});var mUr=s(Cae);tbo=r(mUr,"xlm-roberta"),mUr.forEach(t),abo=r(i5e," \u2014 "),N$=n(i5e,"A",{href:!0});var gUr=s(N$);nbo=r(gUr,"XLMRobertaForMaskedLM"),gUr.forEach(t),sbo=r(i5e," (XLM-RoBERTa model)"),i5e.forEach(t),lbo=i(P),Fu=n(P,"LI",{});var d5e=s(Fu);wae=n(d5e,"STRONG",{});var hUr=s(wae);ibo=r(hUr,"xlm-roberta-xl"),hUr.forEach(t),dbo=r(d5e," \u2014 "),j$=n(d5e,"A",{href:!0});var pUr=s(j$);cbo=r(pUr,"XLMRobertaXLForMaskedLM"),pUr.forEach(t),fbo=r(d5e," (XLM-RoBERTa-XL model)"),d5e.forEach(t),mbo=i(P),Tu=n(P,"LI",{});var c5e=s(Tu);Aae=n(c5e,"STRONG",{});var _Ur=s(Aae);gbo=r(_Ur,"xlnet"),_Ur.forEach(t),hbo=r(c5e," \u2014 "),D$=n(c5e,"A",{href:!0});var uUr=s(D$);pbo=r(uUr,"XLNetLMHeadModel"),uUr.forEach(t),_bo=r(c5e," (XLNet model)"),c5e.forEach(t),P.forEach(t),ubo=i(Gt),Mu=n(Gt,"P",{});var f5e=s(Mu);bbo=r(f5e,"The model is set in evaluation mode by default using "),yae=n(f5e,"CODE",{});var bUr=s(yae);vbo=r(bUr,"model.eval()"),bUr.forEach(t),Fbo=r(f5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lae=n(f5e,"CODE",{});var vUr=s(Lae);Tbo=r(vUr,"model.train()"),vUr.forEach(t),f5e.forEach(t),Mbo=i(Gt),xae=n(Gt,"P",{});var FUr=s(xae);Ebo=r(FUr,"Examples:"),FUr.forEach(t),Cbo=i(Gt),m(v5.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),DRe=i(c),td=n(c,"H2",{class:!0});var UPe=s(td);Eu=n(UPe,"A",{id:!0,class:!0,href:!0});var TUr=s(Eu);kae=n(TUr,"SPAN",{});var MUr=s(kae);m(F5.$$.fragment,MUr),MUr.forEach(t),TUr.forEach(t),wbo=i(UPe),Sae=n(UPe,"SPAN",{});var EUr=s(Sae);Abo=r(EUr,"AutoModelForCausalLM"),EUr.forEach(t),UPe.forEach(t),GRe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(T5.$$.fragment,Ys),ybo=i(Ys),ad=n(Ys,"P",{});var FU=s(ad);Lbo=r(FU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),G$=n(FU,"A",{href:!0});var CUr=s(G$);xbo=r(CUr,"from_pretrained()"),CUr.forEach(t),kbo=r(FU," class method or the "),O$=n(FU,"A",{href:!0});var wUr=s(O$);Sbo=r(wUr,"from_config()"),wUr.forEach(t),Rbo=r(FU,` class
method.`),FU.forEach(t),Bbo=i(Ys),M5=n(Ys,"P",{});var JPe=s(M5);Pbo=r(JPe,"This class cannot be instantiated directly using "),Rae=n(JPe,"CODE",{});var AUr=s(Rae);$bo=r(AUr,"__init__()"),AUr.forEach(t),Ibo=r(JPe," (throws an error)."),JPe.forEach(t),qbo=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(E5.$$.fragment,Ks),Nbo=i(Ks),Bae=n(Ks,"P",{});var yUr=s(Bae);jbo=r(yUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yUr.forEach(t),Dbo=i(Ks),nd=n(Ks,"P",{});var TU=s(nd);Gbo=r(TU,`Note:
Loading a model from its configuration file does `),Pae=n(TU,"STRONG",{});var LUr=s(Pae);Obo=r(LUr,"not"),LUr.forEach(t),Vbo=r(TU,` load the model weights. It only affects the
model\u2019s configuration. Use `),V$=n(TU,"A",{href:!0});var xUr=s(V$);Xbo=r(xUr,"from_pretrained()"),xUr.forEach(t),zbo=r(TU," to load the model weights."),TU.forEach(t),Qbo=i(Ks),$ae=n(Ks,"P",{});var kUr=s($ae);Wbo=r(kUr,"Examples:"),kUr.forEach(t),Hbo=i(Ks),m(C5.$$.fragment,Ks),Ks.forEach(t),Ubo=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(w5.$$.fragment,Ot),Jbo=i(Ot),Iae=n(Ot,"P",{});var SUr=s(Iae);Ybo=r(SUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),SUr.forEach(t),Kbo=i(Ot),Qa=n(Ot,"P",{});var S4=s(Qa);Zbo=r(S4,"The model class to instantiate is selected based on the "),qae=n(S4,"CODE",{});var RUr=s(qae);e2o=r(RUr,"model_type"),RUr.forEach(t),o2o=r(S4,` property of the config object (either
passed as an argument or loaded from `),Nae=n(S4,"CODE",{});var BUr=s(Nae);r2o=r(BUr,"pretrained_model_name_or_path"),BUr.forEach(t),t2o=r(S4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jae=n(S4,"CODE",{});var PUr=s(jae);a2o=r(PUr,"pretrained_model_name_or_path"),PUr.forEach(t),n2o=r(S4,":"),S4.forEach(t),s2o=i(Ot),$=n(Ot,"UL",{});var q=s($);Cu=n(q,"LI",{});var m5e=s(Cu);Dae=n(m5e,"STRONG",{});var $Ur=s(Dae);l2o=r($Ur,"bart"),$Ur.forEach(t),i2o=r(m5e," \u2014 "),X$=n(m5e,"A",{href:!0});var IUr=s(X$);d2o=r(IUr,"BartForCausalLM"),IUr.forEach(t),c2o=r(m5e," (BART model)"),m5e.forEach(t),f2o=i(q),wu=n(q,"LI",{});var g5e=s(wu);Gae=n(g5e,"STRONG",{});var qUr=s(Gae);m2o=r(qUr,"bert"),qUr.forEach(t),g2o=r(g5e," \u2014 "),z$=n(g5e,"A",{href:!0});var NUr=s(z$);h2o=r(NUr,"BertLMHeadModel"),NUr.forEach(t),p2o=r(g5e," (BERT model)"),g5e.forEach(t),_2o=i(q),Au=n(q,"LI",{});var h5e=s(Au);Oae=n(h5e,"STRONG",{});var jUr=s(Oae);u2o=r(jUr,"bert-generation"),jUr.forEach(t),b2o=r(h5e," \u2014 "),Q$=n(h5e,"A",{href:!0});var DUr=s(Q$);v2o=r(DUr,"BertGenerationDecoder"),DUr.forEach(t),F2o=r(h5e," (Bert Generation model)"),h5e.forEach(t),T2o=i(q),yu=n(q,"LI",{});var p5e=s(yu);Vae=n(p5e,"STRONG",{});var GUr=s(Vae);M2o=r(GUr,"big_bird"),GUr.forEach(t),E2o=r(p5e," \u2014 "),W$=n(p5e,"A",{href:!0});var OUr=s(W$);C2o=r(OUr,"BigBirdForCausalLM"),OUr.forEach(t),w2o=r(p5e," (BigBird model)"),p5e.forEach(t),A2o=i(q),Lu=n(q,"LI",{});var _5e=s(Lu);Xae=n(_5e,"STRONG",{});var VUr=s(Xae);y2o=r(VUr,"bigbird_pegasus"),VUr.forEach(t),L2o=r(_5e," \u2014 "),H$=n(_5e,"A",{href:!0});var XUr=s(H$);x2o=r(XUr,"BigBirdPegasusForCausalLM"),XUr.forEach(t),k2o=r(_5e," (BigBirdPegasus model)"),_5e.forEach(t),S2o=i(q),xu=n(q,"LI",{});var u5e=s(xu);zae=n(u5e,"STRONG",{});var zUr=s(zae);R2o=r(zUr,"blenderbot"),zUr.forEach(t),B2o=r(u5e," \u2014 "),U$=n(u5e,"A",{href:!0});var QUr=s(U$);P2o=r(QUr,"BlenderbotForCausalLM"),QUr.forEach(t),$2o=r(u5e," (Blenderbot model)"),u5e.forEach(t),I2o=i(q),ku=n(q,"LI",{});var b5e=s(ku);Qae=n(b5e,"STRONG",{});var WUr=s(Qae);q2o=r(WUr,"blenderbot-small"),WUr.forEach(t),N2o=r(b5e," \u2014 "),J$=n(b5e,"A",{href:!0});var HUr=s(J$);j2o=r(HUr,"BlenderbotSmallForCausalLM"),HUr.forEach(t),D2o=r(b5e," (BlenderbotSmall model)"),b5e.forEach(t),G2o=i(q),Su=n(q,"LI",{});var v5e=s(Su);Wae=n(v5e,"STRONG",{});var UUr=s(Wae);O2o=r(UUr,"camembert"),UUr.forEach(t),V2o=r(v5e," \u2014 "),Y$=n(v5e,"A",{href:!0});var JUr=s(Y$);X2o=r(JUr,"CamembertForCausalLM"),JUr.forEach(t),z2o=r(v5e," (CamemBERT model)"),v5e.forEach(t),Q2o=i(q),Ru=n(q,"LI",{});var F5e=s(Ru);Hae=n(F5e,"STRONG",{});var YUr=s(Hae);W2o=r(YUr,"ctrl"),YUr.forEach(t),H2o=r(F5e," \u2014 "),K$=n(F5e,"A",{href:!0});var KUr=s(K$);U2o=r(KUr,"CTRLLMHeadModel"),KUr.forEach(t),J2o=r(F5e," (CTRL model)"),F5e.forEach(t),Y2o=i(q),Bu=n(q,"LI",{});var T5e=s(Bu);Uae=n(T5e,"STRONG",{});var ZUr=s(Uae);K2o=r(ZUr,"data2vec-text"),ZUr.forEach(t),Z2o=r(T5e," \u2014 "),Z$=n(T5e,"A",{href:!0});var eJr=s(Z$);e3o=r(eJr,"Data2VecTextForCausalLM"),eJr.forEach(t),o3o=r(T5e," (Data2VecText model)"),T5e.forEach(t),r3o=i(q),Pu=n(q,"LI",{});var M5e=s(Pu);Jae=n(M5e,"STRONG",{});var oJr=s(Jae);t3o=r(oJr,"electra"),oJr.forEach(t),a3o=r(M5e," \u2014 "),eI=n(M5e,"A",{href:!0});var rJr=s(eI);n3o=r(rJr,"ElectraForCausalLM"),rJr.forEach(t),s3o=r(M5e," (ELECTRA model)"),M5e.forEach(t),l3o=i(q),$u=n(q,"LI",{});var E5e=s($u);Yae=n(E5e,"STRONG",{});var tJr=s(Yae);i3o=r(tJr,"gpt2"),tJr.forEach(t),d3o=r(E5e," \u2014 "),oI=n(E5e,"A",{href:!0});var aJr=s(oI);c3o=r(aJr,"GPT2LMHeadModel"),aJr.forEach(t),f3o=r(E5e," (OpenAI GPT-2 model)"),E5e.forEach(t),m3o=i(q),Iu=n(q,"LI",{});var C5e=s(Iu);Kae=n(C5e,"STRONG",{});var nJr=s(Kae);g3o=r(nJr,"gpt_neo"),nJr.forEach(t),h3o=r(C5e," \u2014 "),rI=n(C5e,"A",{href:!0});var sJr=s(rI);p3o=r(sJr,"GPTNeoForCausalLM"),sJr.forEach(t),_3o=r(C5e," (GPT Neo model)"),C5e.forEach(t),u3o=i(q),qu=n(q,"LI",{});var w5e=s(qu);Zae=n(w5e,"STRONG",{});var lJr=s(Zae);b3o=r(lJr,"gptj"),lJr.forEach(t),v3o=r(w5e," \u2014 "),tI=n(w5e,"A",{href:!0});var iJr=s(tI);F3o=r(iJr,"GPTJForCausalLM"),iJr.forEach(t),T3o=r(w5e," (GPT-J model)"),w5e.forEach(t),M3o=i(q),Nu=n(q,"LI",{});var A5e=s(Nu);ene=n(A5e,"STRONG",{});var dJr=s(ene);E3o=r(dJr,"marian"),dJr.forEach(t),C3o=r(A5e," \u2014 "),aI=n(A5e,"A",{href:!0});var cJr=s(aI);w3o=r(cJr,"MarianForCausalLM"),cJr.forEach(t),A3o=r(A5e," (Marian model)"),A5e.forEach(t),y3o=i(q),ju=n(q,"LI",{});var y5e=s(ju);one=n(y5e,"STRONG",{});var fJr=s(one);L3o=r(fJr,"mbart"),fJr.forEach(t),x3o=r(y5e," \u2014 "),nI=n(y5e,"A",{href:!0});var mJr=s(nI);k3o=r(mJr,"MBartForCausalLM"),mJr.forEach(t),S3o=r(y5e," (mBART model)"),y5e.forEach(t),R3o=i(q),Du=n(q,"LI",{});var L5e=s(Du);rne=n(L5e,"STRONG",{});var gJr=s(rne);B3o=r(gJr,"megatron-bert"),gJr.forEach(t),P3o=r(L5e," \u2014 "),sI=n(L5e,"A",{href:!0});var hJr=s(sI);$3o=r(hJr,"MegatronBertForCausalLM"),hJr.forEach(t),I3o=r(L5e," (MegatronBert model)"),L5e.forEach(t),q3o=i(q),Gu=n(q,"LI",{});var x5e=s(Gu);tne=n(x5e,"STRONG",{});var pJr=s(tne);N3o=r(pJr,"openai-gpt"),pJr.forEach(t),j3o=r(x5e," \u2014 "),lI=n(x5e,"A",{href:!0});var _Jr=s(lI);D3o=r(_Jr,"OpenAIGPTLMHeadModel"),_Jr.forEach(t),G3o=r(x5e," (OpenAI GPT model)"),x5e.forEach(t),O3o=i(q),Ou=n(q,"LI",{});var k5e=s(Ou);ane=n(k5e,"STRONG",{});var uJr=s(ane);V3o=r(uJr,"pegasus"),uJr.forEach(t),X3o=r(k5e," \u2014 "),iI=n(k5e,"A",{href:!0});var bJr=s(iI);z3o=r(bJr,"PegasusForCausalLM"),bJr.forEach(t),Q3o=r(k5e," (Pegasus model)"),k5e.forEach(t),W3o=i(q),Vu=n(q,"LI",{});var S5e=s(Vu);nne=n(S5e,"STRONG",{});var vJr=s(nne);H3o=r(vJr,"plbart"),vJr.forEach(t),U3o=r(S5e," \u2014 "),dI=n(S5e,"A",{href:!0});var FJr=s(dI);J3o=r(FJr,"PLBartForCausalLM"),FJr.forEach(t),Y3o=r(S5e," (PLBart model)"),S5e.forEach(t),K3o=i(q),Xu=n(q,"LI",{});var R5e=s(Xu);sne=n(R5e,"STRONG",{});var TJr=s(sne);Z3o=r(TJr,"prophetnet"),TJr.forEach(t),e6o=r(R5e," \u2014 "),cI=n(R5e,"A",{href:!0});var MJr=s(cI);o6o=r(MJr,"ProphetNetForCausalLM"),MJr.forEach(t),r6o=r(R5e," (ProphetNet model)"),R5e.forEach(t),t6o=i(q),zu=n(q,"LI",{});var B5e=s(zu);lne=n(B5e,"STRONG",{});var EJr=s(lne);a6o=r(EJr,"qdqbert"),EJr.forEach(t),n6o=r(B5e," \u2014 "),fI=n(B5e,"A",{href:!0});var CJr=s(fI);s6o=r(CJr,"QDQBertLMHeadModel"),CJr.forEach(t),l6o=r(B5e," (QDQBert model)"),B5e.forEach(t),i6o=i(q),Qu=n(q,"LI",{});var P5e=s(Qu);ine=n(P5e,"STRONG",{});var wJr=s(ine);d6o=r(wJr,"reformer"),wJr.forEach(t),c6o=r(P5e," \u2014 "),mI=n(P5e,"A",{href:!0});var AJr=s(mI);f6o=r(AJr,"ReformerModelWithLMHead"),AJr.forEach(t),m6o=r(P5e," (Reformer model)"),P5e.forEach(t),g6o=i(q),Wu=n(q,"LI",{});var $5e=s(Wu);dne=n($5e,"STRONG",{});var yJr=s(dne);h6o=r(yJr,"rembert"),yJr.forEach(t),p6o=r($5e," \u2014 "),gI=n($5e,"A",{href:!0});var LJr=s(gI);_6o=r(LJr,"RemBertForCausalLM"),LJr.forEach(t),u6o=r($5e," (RemBERT model)"),$5e.forEach(t),b6o=i(q),Hu=n(q,"LI",{});var I5e=s(Hu);cne=n(I5e,"STRONG",{});var xJr=s(cne);v6o=r(xJr,"roberta"),xJr.forEach(t),F6o=r(I5e," \u2014 "),hI=n(I5e,"A",{href:!0});var kJr=s(hI);T6o=r(kJr,"RobertaForCausalLM"),kJr.forEach(t),M6o=r(I5e," (RoBERTa model)"),I5e.forEach(t),E6o=i(q),Uu=n(q,"LI",{});var q5e=s(Uu);fne=n(q5e,"STRONG",{});var SJr=s(fne);C6o=r(SJr,"roformer"),SJr.forEach(t),w6o=r(q5e," \u2014 "),pI=n(q5e,"A",{href:!0});var RJr=s(pI);A6o=r(RJr,"RoFormerForCausalLM"),RJr.forEach(t),y6o=r(q5e," (RoFormer model)"),q5e.forEach(t),L6o=i(q),Ju=n(q,"LI",{});var N5e=s(Ju);mne=n(N5e,"STRONG",{});var BJr=s(mne);x6o=r(BJr,"speech_to_text_2"),BJr.forEach(t),k6o=r(N5e," \u2014 "),_I=n(N5e,"A",{href:!0});var PJr=s(_I);S6o=r(PJr,"Speech2Text2ForCausalLM"),PJr.forEach(t),R6o=r(N5e," (Speech2Text2 model)"),N5e.forEach(t),B6o=i(q),Yu=n(q,"LI",{});var j5e=s(Yu);gne=n(j5e,"STRONG",{});var $Jr=s(gne);P6o=r($Jr,"transfo-xl"),$Jr.forEach(t),$6o=r(j5e," \u2014 "),uI=n(j5e,"A",{href:!0});var IJr=s(uI);I6o=r(IJr,"TransfoXLLMHeadModel"),IJr.forEach(t),q6o=r(j5e," (Transformer-XL model)"),j5e.forEach(t),N6o=i(q),Ku=n(q,"LI",{});var D5e=s(Ku);hne=n(D5e,"STRONG",{});var qJr=s(hne);j6o=r(qJr,"trocr"),qJr.forEach(t),D6o=r(D5e," \u2014 "),bI=n(D5e,"A",{href:!0});var NJr=s(bI);G6o=r(NJr,"TrOCRForCausalLM"),NJr.forEach(t),O6o=r(D5e," (TrOCR model)"),D5e.forEach(t),V6o=i(q),Zu=n(q,"LI",{});var G5e=s(Zu);pne=n(G5e,"STRONG",{});var jJr=s(pne);X6o=r(jJr,"xglm"),jJr.forEach(t),z6o=r(G5e," \u2014 "),vI=n(G5e,"A",{href:!0});var DJr=s(vI);Q6o=r(DJr,"XGLMForCausalLM"),DJr.forEach(t),W6o=r(G5e," (XGLM model)"),G5e.forEach(t),H6o=i(q),e1=n(q,"LI",{});var O5e=s(e1);_ne=n(O5e,"STRONG",{});var GJr=s(_ne);U6o=r(GJr,"xlm"),GJr.forEach(t),J6o=r(O5e," \u2014 "),FI=n(O5e,"A",{href:!0});var OJr=s(FI);Y6o=r(OJr,"XLMWithLMHeadModel"),OJr.forEach(t),K6o=r(O5e," (XLM model)"),O5e.forEach(t),Z6o=i(q),o1=n(q,"LI",{});var V5e=s(o1);une=n(V5e,"STRONG",{});var VJr=s(une);evo=r(VJr,"xlm-prophetnet"),VJr.forEach(t),ovo=r(V5e," \u2014 "),TI=n(V5e,"A",{href:!0});var XJr=s(TI);rvo=r(XJr,"XLMProphetNetForCausalLM"),XJr.forEach(t),tvo=r(V5e," (XLMProphetNet model)"),V5e.forEach(t),avo=i(q),r1=n(q,"LI",{});var X5e=s(r1);bne=n(X5e,"STRONG",{});var zJr=s(bne);nvo=r(zJr,"xlm-roberta"),zJr.forEach(t),svo=r(X5e," \u2014 "),MI=n(X5e,"A",{href:!0});var QJr=s(MI);lvo=r(QJr,"XLMRobertaForCausalLM"),QJr.forEach(t),ivo=r(X5e," (XLM-RoBERTa model)"),X5e.forEach(t),dvo=i(q),t1=n(q,"LI",{});var z5e=s(t1);vne=n(z5e,"STRONG",{});var WJr=s(vne);cvo=r(WJr,"xlm-roberta-xl"),WJr.forEach(t),fvo=r(z5e," \u2014 "),EI=n(z5e,"A",{href:!0});var HJr=s(EI);mvo=r(HJr,"XLMRobertaXLForCausalLM"),HJr.forEach(t),gvo=r(z5e," (XLM-RoBERTa-XL model)"),z5e.forEach(t),hvo=i(q),a1=n(q,"LI",{});var Q5e=s(a1);Fne=n(Q5e,"STRONG",{});var UJr=s(Fne);pvo=r(UJr,"xlnet"),UJr.forEach(t),_vo=r(Q5e," \u2014 "),CI=n(Q5e,"A",{href:!0});var JJr=s(CI);uvo=r(JJr,"XLNetLMHeadModel"),JJr.forEach(t),bvo=r(Q5e," (XLNet model)"),Q5e.forEach(t),q.forEach(t),vvo=i(Ot),n1=n(Ot,"P",{});var W5e=s(n1);Fvo=r(W5e,"The model is set in evaluation mode by default using "),Tne=n(W5e,"CODE",{});var YJr=s(Tne);Tvo=r(YJr,"model.eval()"),YJr.forEach(t),Mvo=r(W5e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mne=n(W5e,"CODE",{});var KJr=s(Mne);Evo=r(KJr,"model.train()"),KJr.forEach(t),W5e.forEach(t),Cvo=i(Ot),Ene=n(Ot,"P",{});var ZJr=s(Ene);wvo=r(ZJr,"Examples:"),ZJr.forEach(t),Avo=i(Ot),m(A5.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),ORe=i(c),sd=n(c,"H2",{class:!0});var YPe=s(sd);s1=n(YPe,"A",{id:!0,class:!0,href:!0});var eYr=s(s1);Cne=n(eYr,"SPAN",{});var oYr=s(Cne);m(y5.$$.fragment,oYr),oYr.forEach(t),eYr.forEach(t),yvo=i(YPe),wne=n(YPe,"SPAN",{});var rYr=s(wne);Lvo=r(rYr,"AutoModelForMaskedLM"),rYr.forEach(t),YPe.forEach(t),VRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(L5.$$.fragment,Zs),xvo=i(Zs),ld=n(Zs,"P",{});var MU=s(ld);kvo=r(MU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wI=n(MU,"A",{href:!0});var tYr=s(wI);Svo=r(tYr,"from_pretrained()"),tYr.forEach(t),Rvo=r(MU," class method or the "),AI=n(MU,"A",{href:!0});var aYr=s(AI);Bvo=r(aYr,"from_config()"),aYr.forEach(t),Pvo=r(MU,` class
method.`),MU.forEach(t),$vo=i(Zs),x5=n(Zs,"P",{});var KPe=s(x5);Ivo=r(KPe,"This class cannot be instantiated directly using "),Ane=n(KPe,"CODE",{});var nYr=s(Ane);qvo=r(nYr,"__init__()"),nYr.forEach(t),Nvo=r(KPe," (throws an error)."),KPe.forEach(t),jvo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(k5.$$.fragment,el),Dvo=i(el),yne=n(el,"P",{});var sYr=s(yne);Gvo=r(sYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sYr.forEach(t),Ovo=i(el),id=n(el,"P",{});var EU=s(id);Vvo=r(EU,`Note:
Loading a model from its configuration file does `),Lne=n(EU,"STRONG",{});var lYr=s(Lne);Xvo=r(lYr,"not"),lYr.forEach(t),zvo=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),yI=n(EU,"A",{href:!0});var iYr=s(yI);Qvo=r(iYr,"from_pretrained()"),iYr.forEach(t),Wvo=r(EU," to load the model weights."),EU.forEach(t),Hvo=i(el),xne=n(el,"P",{});var dYr=s(xne);Uvo=r(dYr,"Examples:"),dYr.forEach(t),Jvo=i(el),m(S5.$$.fragment,el),el.forEach(t),Yvo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(R5.$$.fragment,Vt),Kvo=i(Vt),kne=n(Vt,"P",{});var cYr=s(kne);Zvo=r(cYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cYr.forEach(t),eFo=i(Vt),Wa=n(Vt,"P",{});var R4=s(Wa);oFo=r(R4,"The model class to instantiate is selected based on the "),Sne=n(R4,"CODE",{});var fYr=s(Sne);rFo=r(fYr,"model_type"),fYr.forEach(t),tFo=r(R4,` property of the config object (either
passed as an argument or loaded from `),Rne=n(R4,"CODE",{});var mYr=s(Rne);aFo=r(mYr,"pretrained_model_name_or_path"),mYr.forEach(t),nFo=r(R4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bne=n(R4,"CODE",{});var gYr=s(Bne);sFo=r(gYr,"pretrained_model_name_or_path"),gYr.forEach(t),lFo=r(R4,":"),R4.forEach(t),iFo=i(Vt),I=n(Vt,"UL",{});var j=s(I);l1=n(j,"LI",{});var H5e=s(l1);Pne=n(H5e,"STRONG",{});var hYr=s(Pne);dFo=r(hYr,"albert"),hYr.forEach(t),cFo=r(H5e," \u2014 "),LI=n(H5e,"A",{href:!0});var pYr=s(LI);fFo=r(pYr,"AlbertForMaskedLM"),pYr.forEach(t),mFo=r(H5e," (ALBERT model)"),H5e.forEach(t),gFo=i(j),i1=n(j,"LI",{});var U5e=s(i1);$ne=n(U5e,"STRONG",{});var _Yr=s($ne);hFo=r(_Yr,"bart"),_Yr.forEach(t),pFo=r(U5e," \u2014 "),xI=n(U5e,"A",{href:!0});var uYr=s(xI);_Fo=r(uYr,"BartForConditionalGeneration"),uYr.forEach(t),uFo=r(U5e," (BART model)"),U5e.forEach(t),bFo=i(j),d1=n(j,"LI",{});var J5e=s(d1);Ine=n(J5e,"STRONG",{});var bYr=s(Ine);vFo=r(bYr,"bert"),bYr.forEach(t),FFo=r(J5e," \u2014 "),kI=n(J5e,"A",{href:!0});var vYr=s(kI);TFo=r(vYr,"BertForMaskedLM"),vYr.forEach(t),MFo=r(J5e," (BERT model)"),J5e.forEach(t),EFo=i(j),c1=n(j,"LI",{});var Y5e=s(c1);qne=n(Y5e,"STRONG",{});var FYr=s(qne);CFo=r(FYr,"big_bird"),FYr.forEach(t),wFo=r(Y5e," \u2014 "),SI=n(Y5e,"A",{href:!0});var TYr=s(SI);AFo=r(TYr,"BigBirdForMaskedLM"),TYr.forEach(t),yFo=r(Y5e," (BigBird model)"),Y5e.forEach(t),LFo=i(j),f1=n(j,"LI",{});var K5e=s(f1);Nne=n(K5e,"STRONG",{});var MYr=s(Nne);xFo=r(MYr,"camembert"),MYr.forEach(t),kFo=r(K5e," \u2014 "),RI=n(K5e,"A",{href:!0});var EYr=s(RI);SFo=r(EYr,"CamembertForMaskedLM"),EYr.forEach(t),RFo=r(K5e," (CamemBERT model)"),K5e.forEach(t),BFo=i(j),m1=n(j,"LI",{});var Z5e=s(m1);jne=n(Z5e,"STRONG",{});var CYr=s(jne);PFo=r(CYr,"convbert"),CYr.forEach(t),$Fo=r(Z5e," \u2014 "),BI=n(Z5e,"A",{href:!0});var wYr=s(BI);IFo=r(wYr,"ConvBertForMaskedLM"),wYr.forEach(t),qFo=r(Z5e," (ConvBERT model)"),Z5e.forEach(t),NFo=i(j),g1=n(j,"LI",{});var eCe=s(g1);Dne=n(eCe,"STRONG",{});var AYr=s(Dne);jFo=r(AYr,"deberta"),AYr.forEach(t),DFo=r(eCe," \u2014 "),PI=n(eCe,"A",{href:!0});var yYr=s(PI);GFo=r(yYr,"DebertaForMaskedLM"),yYr.forEach(t),OFo=r(eCe," (DeBERTa model)"),eCe.forEach(t),VFo=i(j),h1=n(j,"LI",{});var oCe=s(h1);Gne=n(oCe,"STRONG",{});var LYr=s(Gne);XFo=r(LYr,"deberta-v2"),LYr.forEach(t),zFo=r(oCe," \u2014 "),$I=n(oCe,"A",{href:!0});var xYr=s($I);QFo=r(xYr,"DebertaV2ForMaskedLM"),xYr.forEach(t),WFo=r(oCe," (DeBERTa-v2 model)"),oCe.forEach(t),HFo=i(j),p1=n(j,"LI",{});var rCe=s(p1);One=n(rCe,"STRONG",{});var kYr=s(One);UFo=r(kYr,"distilbert"),kYr.forEach(t),JFo=r(rCe," \u2014 "),II=n(rCe,"A",{href:!0});var SYr=s(II);YFo=r(SYr,"DistilBertForMaskedLM"),SYr.forEach(t),KFo=r(rCe," (DistilBERT model)"),rCe.forEach(t),ZFo=i(j),_1=n(j,"LI",{});var tCe=s(_1);Vne=n(tCe,"STRONG",{});var RYr=s(Vne);eTo=r(RYr,"electra"),RYr.forEach(t),oTo=r(tCe," \u2014 "),qI=n(tCe,"A",{href:!0});var BYr=s(qI);rTo=r(BYr,"ElectraForMaskedLM"),BYr.forEach(t),tTo=r(tCe," (ELECTRA model)"),tCe.forEach(t),aTo=i(j),u1=n(j,"LI",{});var aCe=s(u1);Xne=n(aCe,"STRONG",{});var PYr=s(Xne);nTo=r(PYr,"flaubert"),PYr.forEach(t),sTo=r(aCe," \u2014 "),NI=n(aCe,"A",{href:!0});var $Yr=s(NI);lTo=r($Yr,"FlaubertWithLMHeadModel"),$Yr.forEach(t),iTo=r(aCe," (FlauBERT model)"),aCe.forEach(t),dTo=i(j),b1=n(j,"LI",{});var nCe=s(b1);zne=n(nCe,"STRONG",{});var IYr=s(zne);cTo=r(IYr,"fnet"),IYr.forEach(t),fTo=r(nCe," \u2014 "),jI=n(nCe,"A",{href:!0});var qYr=s(jI);mTo=r(qYr,"FNetForMaskedLM"),qYr.forEach(t),gTo=r(nCe," (FNet model)"),nCe.forEach(t),hTo=i(j),v1=n(j,"LI",{});var sCe=s(v1);Qne=n(sCe,"STRONG",{});var NYr=s(Qne);pTo=r(NYr,"funnel"),NYr.forEach(t),_To=r(sCe," \u2014 "),DI=n(sCe,"A",{href:!0});var jYr=s(DI);uTo=r(jYr,"FunnelForMaskedLM"),jYr.forEach(t),bTo=r(sCe," (Funnel Transformer model)"),sCe.forEach(t),vTo=i(j),F1=n(j,"LI",{});var lCe=s(F1);Wne=n(lCe,"STRONG",{});var DYr=s(Wne);FTo=r(DYr,"ibert"),DYr.forEach(t),TTo=r(lCe," \u2014 "),GI=n(lCe,"A",{href:!0});var GYr=s(GI);MTo=r(GYr,"IBertForMaskedLM"),GYr.forEach(t),ETo=r(lCe," (I-BERT model)"),lCe.forEach(t),CTo=i(j),T1=n(j,"LI",{});var iCe=s(T1);Hne=n(iCe,"STRONG",{});var OYr=s(Hne);wTo=r(OYr,"layoutlm"),OYr.forEach(t),ATo=r(iCe," \u2014 "),OI=n(iCe,"A",{href:!0});var VYr=s(OI);yTo=r(VYr,"LayoutLMForMaskedLM"),VYr.forEach(t),LTo=r(iCe," (LayoutLM model)"),iCe.forEach(t),xTo=i(j),M1=n(j,"LI",{});var dCe=s(M1);Une=n(dCe,"STRONG",{});var XYr=s(Une);kTo=r(XYr,"longformer"),XYr.forEach(t),STo=r(dCe," \u2014 "),VI=n(dCe,"A",{href:!0});var zYr=s(VI);RTo=r(zYr,"LongformerForMaskedLM"),zYr.forEach(t),BTo=r(dCe," (Longformer model)"),dCe.forEach(t),PTo=i(j),E1=n(j,"LI",{});var cCe=s(E1);Jne=n(cCe,"STRONG",{});var QYr=s(Jne);$To=r(QYr,"mbart"),QYr.forEach(t),ITo=r(cCe," \u2014 "),XI=n(cCe,"A",{href:!0});var WYr=s(XI);qTo=r(WYr,"MBartForConditionalGeneration"),WYr.forEach(t),NTo=r(cCe," (mBART model)"),cCe.forEach(t),jTo=i(j),C1=n(j,"LI",{});var fCe=s(C1);Yne=n(fCe,"STRONG",{});var HYr=s(Yne);DTo=r(HYr,"megatron-bert"),HYr.forEach(t),GTo=r(fCe," \u2014 "),zI=n(fCe,"A",{href:!0});var UYr=s(zI);OTo=r(UYr,"MegatronBertForMaskedLM"),UYr.forEach(t),VTo=r(fCe," (MegatronBert model)"),fCe.forEach(t),XTo=i(j),w1=n(j,"LI",{});var mCe=s(w1);Kne=n(mCe,"STRONG",{});var JYr=s(Kne);zTo=r(JYr,"mobilebert"),JYr.forEach(t),QTo=r(mCe," \u2014 "),QI=n(mCe,"A",{href:!0});var YYr=s(QI);WTo=r(YYr,"MobileBertForMaskedLM"),YYr.forEach(t),HTo=r(mCe," (MobileBERT model)"),mCe.forEach(t),UTo=i(j),A1=n(j,"LI",{});var gCe=s(A1);Zne=n(gCe,"STRONG",{});var KYr=s(Zne);JTo=r(KYr,"mpnet"),KYr.forEach(t),YTo=r(gCe," \u2014 "),WI=n(gCe,"A",{href:!0});var ZYr=s(WI);KTo=r(ZYr,"MPNetForMaskedLM"),ZYr.forEach(t),ZTo=r(gCe," (MPNet model)"),gCe.forEach(t),e8o=i(j),y1=n(j,"LI",{});var hCe=s(y1);ese=n(hCe,"STRONG",{});var eKr=s(ese);o8o=r(eKr,"nystromformer"),eKr.forEach(t),r8o=r(hCe," \u2014 "),HI=n(hCe,"A",{href:!0});var oKr=s(HI);t8o=r(oKr,"NystromformerForMaskedLM"),oKr.forEach(t),a8o=r(hCe," (Nystromformer model)"),hCe.forEach(t),n8o=i(j),L1=n(j,"LI",{});var pCe=s(L1);ose=n(pCe,"STRONG",{});var rKr=s(ose);s8o=r(rKr,"perceiver"),rKr.forEach(t),l8o=r(pCe," \u2014 "),UI=n(pCe,"A",{href:!0});var tKr=s(UI);i8o=r(tKr,"PerceiverForMaskedLM"),tKr.forEach(t),d8o=r(pCe," (Perceiver model)"),pCe.forEach(t),c8o=i(j),x1=n(j,"LI",{});var _Ce=s(x1);rse=n(_Ce,"STRONG",{});var aKr=s(rse);f8o=r(aKr,"qdqbert"),aKr.forEach(t),m8o=r(_Ce," \u2014 "),JI=n(_Ce,"A",{href:!0});var nKr=s(JI);g8o=r(nKr,"QDQBertForMaskedLM"),nKr.forEach(t),h8o=r(_Ce," (QDQBert model)"),_Ce.forEach(t),p8o=i(j),k1=n(j,"LI",{});var uCe=s(k1);tse=n(uCe,"STRONG",{});var sKr=s(tse);_8o=r(sKr,"reformer"),sKr.forEach(t),u8o=r(uCe," \u2014 "),YI=n(uCe,"A",{href:!0});var lKr=s(YI);b8o=r(lKr,"ReformerForMaskedLM"),lKr.forEach(t),v8o=r(uCe," (Reformer model)"),uCe.forEach(t),F8o=i(j),S1=n(j,"LI",{});var bCe=s(S1);ase=n(bCe,"STRONG",{});var iKr=s(ase);T8o=r(iKr,"rembert"),iKr.forEach(t),M8o=r(bCe," \u2014 "),KI=n(bCe,"A",{href:!0});var dKr=s(KI);E8o=r(dKr,"RemBertForMaskedLM"),dKr.forEach(t),C8o=r(bCe," (RemBERT model)"),bCe.forEach(t),w8o=i(j),R1=n(j,"LI",{});var vCe=s(R1);nse=n(vCe,"STRONG",{});var cKr=s(nse);A8o=r(cKr,"roberta"),cKr.forEach(t),y8o=r(vCe," \u2014 "),ZI=n(vCe,"A",{href:!0});var fKr=s(ZI);L8o=r(fKr,"RobertaForMaskedLM"),fKr.forEach(t),x8o=r(vCe," (RoBERTa model)"),vCe.forEach(t),k8o=i(j),B1=n(j,"LI",{});var FCe=s(B1);sse=n(FCe,"STRONG",{});var mKr=s(sse);S8o=r(mKr,"roformer"),mKr.forEach(t),R8o=r(FCe," \u2014 "),eq=n(FCe,"A",{href:!0});var gKr=s(eq);B8o=r(gKr,"RoFormerForMaskedLM"),gKr.forEach(t),P8o=r(FCe," (RoFormer model)"),FCe.forEach(t),$8o=i(j),P1=n(j,"LI",{});var TCe=s(P1);lse=n(TCe,"STRONG",{});var hKr=s(lse);I8o=r(hKr,"squeezebert"),hKr.forEach(t),q8o=r(TCe," \u2014 "),oq=n(TCe,"A",{href:!0});var pKr=s(oq);N8o=r(pKr,"SqueezeBertForMaskedLM"),pKr.forEach(t),j8o=r(TCe," (SqueezeBERT model)"),TCe.forEach(t),D8o=i(j),$1=n(j,"LI",{});var MCe=s($1);ise=n(MCe,"STRONG",{});var _Kr=s(ise);G8o=r(_Kr,"tapas"),_Kr.forEach(t),O8o=r(MCe," \u2014 "),rq=n(MCe,"A",{href:!0});var uKr=s(rq);V8o=r(uKr,"TapasForMaskedLM"),uKr.forEach(t),X8o=r(MCe," (TAPAS model)"),MCe.forEach(t),z8o=i(j),I1=n(j,"LI",{});var ECe=s(I1);dse=n(ECe,"STRONG",{});var bKr=s(dse);Q8o=r(bKr,"wav2vec2"),bKr.forEach(t),W8o=r(ECe," \u2014 "),cse=n(ECe,"CODE",{});var vKr=s(cse);H8o=r(vKr,"Wav2Vec2ForMaskedLM"),vKr.forEach(t),U8o=r(ECe," (Wav2Vec2 model)"),ECe.forEach(t),J8o=i(j),q1=n(j,"LI",{});var CCe=s(q1);fse=n(CCe,"STRONG",{});var FKr=s(fse);Y8o=r(FKr,"xlm"),FKr.forEach(t),K8o=r(CCe," \u2014 "),tq=n(CCe,"A",{href:!0});var TKr=s(tq);Z8o=r(TKr,"XLMWithLMHeadModel"),TKr.forEach(t),e9o=r(CCe," (XLM model)"),CCe.forEach(t),o9o=i(j),N1=n(j,"LI",{});var wCe=s(N1);mse=n(wCe,"STRONG",{});var MKr=s(mse);r9o=r(MKr,"xlm-roberta"),MKr.forEach(t),t9o=r(wCe," \u2014 "),aq=n(wCe,"A",{href:!0});var EKr=s(aq);a9o=r(EKr,"XLMRobertaForMaskedLM"),EKr.forEach(t),n9o=r(wCe," (XLM-RoBERTa model)"),wCe.forEach(t),s9o=i(j),j1=n(j,"LI",{});var ACe=s(j1);gse=n(ACe,"STRONG",{});var CKr=s(gse);l9o=r(CKr,"xlm-roberta-xl"),CKr.forEach(t),i9o=r(ACe," \u2014 "),nq=n(ACe,"A",{href:!0});var wKr=s(nq);d9o=r(wKr,"XLMRobertaXLForMaskedLM"),wKr.forEach(t),c9o=r(ACe," (XLM-RoBERTa-XL model)"),ACe.forEach(t),f9o=i(j),D1=n(j,"LI",{});var yCe=s(D1);hse=n(yCe,"STRONG",{});var AKr=s(hse);m9o=r(AKr,"yoso"),AKr.forEach(t),g9o=r(yCe," \u2014 "),sq=n(yCe,"A",{href:!0});var yKr=s(sq);h9o=r(yKr,"YosoForMaskedLM"),yKr.forEach(t),p9o=r(yCe," (YOSO model)"),yCe.forEach(t),j.forEach(t),_9o=i(Vt),G1=n(Vt,"P",{});var LCe=s(G1);u9o=r(LCe,"The model is set in evaluation mode by default using "),pse=n(LCe,"CODE",{});var LKr=s(pse);b9o=r(LKr,"model.eval()"),LKr.forEach(t),v9o=r(LCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_se=n(LCe,"CODE",{});var xKr=s(_se);F9o=r(xKr,"model.train()"),xKr.forEach(t),LCe.forEach(t),T9o=i(Vt),use=n(Vt,"P",{});var kKr=s(use);M9o=r(kKr,"Examples:"),kKr.forEach(t),E9o=i(Vt),m(B5.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),XRe=i(c),dd=n(c,"H2",{class:!0});var ZPe=s(dd);O1=n(ZPe,"A",{id:!0,class:!0,href:!0});var SKr=s(O1);bse=n(SKr,"SPAN",{});var RKr=s(bse);m(P5.$$.fragment,RKr),RKr.forEach(t),SKr.forEach(t),C9o=i(ZPe),vse=n(ZPe,"SPAN",{});var BKr=s(vse);w9o=r(BKr,"AutoModelForSeq2SeqLM"),BKr.forEach(t),ZPe.forEach(t),zRe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m($5.$$.fragment,ol),A9o=i(ol),cd=n(ol,"P",{});var CU=s(cd);y9o=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),lq=n(CU,"A",{href:!0});var PKr=s(lq);L9o=r(PKr,"from_pretrained()"),PKr.forEach(t),x9o=r(CU," class method or the "),iq=n(CU,"A",{href:!0});var $Kr=s(iq);k9o=r($Kr,"from_config()"),$Kr.forEach(t),S9o=r(CU,` class
method.`),CU.forEach(t),R9o=i(ol),I5=n(ol,"P",{});var e$e=s(I5);B9o=r(e$e,"This class cannot be instantiated directly using "),Fse=n(e$e,"CODE",{});var IKr=s(Fse);P9o=r(IKr,"__init__()"),IKr.forEach(t),$9o=r(e$e," (throws an error)."),e$e.forEach(t),I9o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(q5.$$.fragment,rl),q9o=i(rl),Tse=n(rl,"P",{});var qKr=s(Tse);N9o=r(qKr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qKr.forEach(t),j9o=i(rl),fd=n(rl,"P",{});var wU=s(fd);D9o=r(wU,`Note:
Loading a model from its configuration file does `),Mse=n(wU,"STRONG",{});var NKr=s(Mse);G9o=r(NKr,"not"),NKr.forEach(t),O9o=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),dq=n(wU,"A",{href:!0});var jKr=s(dq);V9o=r(jKr,"from_pretrained()"),jKr.forEach(t),X9o=r(wU," to load the model weights."),wU.forEach(t),z9o=i(rl),Ese=n(rl,"P",{});var DKr=s(Ese);Q9o=r(DKr,"Examples:"),DKr.forEach(t),W9o=i(rl),m(N5.$$.fragment,rl),rl.forEach(t),H9o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(j5.$$.fragment,Xt),U9o=i(Xt),Cse=n(Xt,"P",{});var GKr=s(Cse);J9o=r(GKr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),GKr.forEach(t),Y9o=i(Xt),Ha=n(Xt,"P",{});var B4=s(Ha);K9o=r(B4,"The model class to instantiate is selected based on the "),wse=n(B4,"CODE",{});var OKr=s(wse);Z9o=r(OKr,"model_type"),OKr.forEach(t),eMo=r(B4,` property of the config object (either
passed as an argument or loaded from `),Ase=n(B4,"CODE",{});var VKr=s(Ase);oMo=r(VKr,"pretrained_model_name_or_path"),VKr.forEach(t),rMo=r(B4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yse=n(B4,"CODE",{});var XKr=s(yse);tMo=r(XKr,"pretrained_model_name_or_path"),XKr.forEach(t),aMo=r(B4,":"),B4.forEach(t),nMo=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);V1=n(le,"LI",{});var xCe=s(V1);Lse=n(xCe,"STRONG",{});var zKr=s(Lse);sMo=r(zKr,"bart"),zKr.forEach(t),lMo=r(xCe," \u2014 "),cq=n(xCe,"A",{href:!0});var QKr=s(cq);iMo=r(QKr,"BartForConditionalGeneration"),QKr.forEach(t),dMo=r(xCe," (BART model)"),xCe.forEach(t),cMo=i(le),X1=n(le,"LI",{});var kCe=s(X1);xse=n(kCe,"STRONG",{});var WKr=s(xse);fMo=r(WKr,"bigbird_pegasus"),WKr.forEach(t),mMo=r(kCe," \u2014 "),fq=n(kCe,"A",{href:!0});var HKr=s(fq);gMo=r(HKr,"BigBirdPegasusForConditionalGeneration"),HKr.forEach(t),hMo=r(kCe," (BigBirdPegasus model)"),kCe.forEach(t),pMo=i(le),z1=n(le,"LI",{});var SCe=s(z1);kse=n(SCe,"STRONG",{});var UKr=s(kse);_Mo=r(UKr,"blenderbot"),UKr.forEach(t),uMo=r(SCe," \u2014 "),mq=n(SCe,"A",{href:!0});var JKr=s(mq);bMo=r(JKr,"BlenderbotForConditionalGeneration"),JKr.forEach(t),vMo=r(SCe," (Blenderbot model)"),SCe.forEach(t),FMo=i(le),Q1=n(le,"LI",{});var RCe=s(Q1);Sse=n(RCe,"STRONG",{});var YKr=s(Sse);TMo=r(YKr,"blenderbot-small"),YKr.forEach(t),MMo=r(RCe," \u2014 "),gq=n(RCe,"A",{href:!0});var KKr=s(gq);EMo=r(KKr,"BlenderbotSmallForConditionalGeneration"),KKr.forEach(t),CMo=r(RCe," (BlenderbotSmall model)"),RCe.forEach(t),wMo=i(le),W1=n(le,"LI",{});var BCe=s(W1);Rse=n(BCe,"STRONG",{});var ZKr=s(Rse);AMo=r(ZKr,"encoder-decoder"),ZKr.forEach(t),yMo=r(BCe," \u2014 "),hq=n(BCe,"A",{href:!0});var eZr=s(hq);LMo=r(eZr,"EncoderDecoderModel"),eZr.forEach(t),xMo=r(BCe," (Encoder decoder model)"),BCe.forEach(t),kMo=i(le),H1=n(le,"LI",{});var PCe=s(H1);Bse=n(PCe,"STRONG",{});var oZr=s(Bse);SMo=r(oZr,"fsmt"),oZr.forEach(t),RMo=r(PCe," \u2014 "),pq=n(PCe,"A",{href:!0});var rZr=s(pq);BMo=r(rZr,"FSMTForConditionalGeneration"),rZr.forEach(t),PMo=r(PCe," (FairSeq Machine-Translation model)"),PCe.forEach(t),$Mo=i(le),U1=n(le,"LI",{});var $Ce=s(U1);Pse=n($Ce,"STRONG",{});var tZr=s(Pse);IMo=r(tZr,"led"),tZr.forEach(t),qMo=r($Ce," \u2014 "),_q=n($Ce,"A",{href:!0});var aZr=s(_q);NMo=r(aZr,"LEDForConditionalGeneration"),aZr.forEach(t),jMo=r($Ce," (LED model)"),$Ce.forEach(t),DMo=i(le),J1=n(le,"LI",{});var ICe=s(J1);$se=n(ICe,"STRONG",{});var nZr=s($se);GMo=r(nZr,"m2m_100"),nZr.forEach(t),OMo=r(ICe," \u2014 "),uq=n(ICe,"A",{href:!0});var sZr=s(uq);VMo=r(sZr,"M2M100ForConditionalGeneration"),sZr.forEach(t),XMo=r(ICe," (M2M100 model)"),ICe.forEach(t),zMo=i(le),Y1=n(le,"LI",{});var qCe=s(Y1);Ise=n(qCe,"STRONG",{});var lZr=s(Ise);QMo=r(lZr,"marian"),lZr.forEach(t),WMo=r(qCe," \u2014 "),bq=n(qCe,"A",{href:!0});var iZr=s(bq);HMo=r(iZr,"MarianMTModel"),iZr.forEach(t),UMo=r(qCe," (Marian model)"),qCe.forEach(t),JMo=i(le),K1=n(le,"LI",{});var NCe=s(K1);qse=n(NCe,"STRONG",{});var dZr=s(qse);YMo=r(dZr,"mbart"),dZr.forEach(t),KMo=r(NCe," \u2014 "),vq=n(NCe,"A",{href:!0});var cZr=s(vq);ZMo=r(cZr,"MBartForConditionalGeneration"),cZr.forEach(t),e4o=r(NCe," (mBART model)"),NCe.forEach(t),o4o=i(le),Z1=n(le,"LI",{});var jCe=s(Z1);Nse=n(jCe,"STRONG",{});var fZr=s(Nse);r4o=r(fZr,"mt5"),fZr.forEach(t),t4o=r(jCe," \u2014 "),Fq=n(jCe,"A",{href:!0});var mZr=s(Fq);a4o=r(mZr,"MT5ForConditionalGeneration"),mZr.forEach(t),n4o=r(jCe," (mT5 model)"),jCe.forEach(t),s4o=i(le),eb=n(le,"LI",{});var DCe=s(eb);jse=n(DCe,"STRONG",{});var gZr=s(jse);l4o=r(gZr,"pegasus"),gZr.forEach(t),i4o=r(DCe," \u2014 "),Tq=n(DCe,"A",{href:!0});var hZr=s(Tq);d4o=r(hZr,"PegasusForConditionalGeneration"),hZr.forEach(t),c4o=r(DCe," (Pegasus model)"),DCe.forEach(t),f4o=i(le),ob=n(le,"LI",{});var GCe=s(ob);Dse=n(GCe,"STRONG",{});var pZr=s(Dse);m4o=r(pZr,"plbart"),pZr.forEach(t),g4o=r(GCe," \u2014 "),Mq=n(GCe,"A",{href:!0});var _Zr=s(Mq);h4o=r(_Zr,"PLBartForConditionalGeneration"),_Zr.forEach(t),p4o=r(GCe," (PLBart model)"),GCe.forEach(t),_4o=i(le),rb=n(le,"LI",{});var OCe=s(rb);Gse=n(OCe,"STRONG",{});var uZr=s(Gse);u4o=r(uZr,"prophetnet"),uZr.forEach(t),b4o=r(OCe," \u2014 "),Eq=n(OCe,"A",{href:!0});var bZr=s(Eq);v4o=r(bZr,"ProphetNetForConditionalGeneration"),bZr.forEach(t),F4o=r(OCe," (ProphetNet model)"),OCe.forEach(t),T4o=i(le),tb=n(le,"LI",{});var VCe=s(tb);Ose=n(VCe,"STRONG",{});var vZr=s(Ose);M4o=r(vZr,"t5"),vZr.forEach(t),E4o=r(VCe," \u2014 "),Cq=n(VCe,"A",{href:!0});var FZr=s(Cq);C4o=r(FZr,"T5ForConditionalGeneration"),FZr.forEach(t),w4o=r(VCe," (T5 model)"),VCe.forEach(t),A4o=i(le),ab=n(le,"LI",{});var XCe=s(ab);Vse=n(XCe,"STRONG",{});var TZr=s(Vse);y4o=r(TZr,"tapex"),TZr.forEach(t),L4o=r(XCe," \u2014 "),wq=n(XCe,"A",{href:!0});var MZr=s(wq);x4o=r(MZr,"BartForConditionalGeneration"),MZr.forEach(t),k4o=r(XCe," (TAPEX model)"),XCe.forEach(t),S4o=i(le),nb=n(le,"LI",{});var zCe=s(nb);Xse=n(zCe,"STRONG",{});var EZr=s(Xse);R4o=r(EZr,"xlm-prophetnet"),EZr.forEach(t),B4o=r(zCe," \u2014 "),Aq=n(zCe,"A",{href:!0});var CZr=s(Aq);P4o=r(CZr,"XLMProphetNetForConditionalGeneration"),CZr.forEach(t),$4o=r(zCe," (XLMProphetNet model)"),zCe.forEach(t),le.forEach(t),I4o=i(Xt),sb=n(Xt,"P",{});var QCe=s(sb);q4o=r(QCe,"The model is set in evaluation mode by default using "),zse=n(QCe,"CODE",{});var wZr=s(zse);N4o=r(wZr,"model.eval()"),wZr.forEach(t),j4o=r(QCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qse=n(QCe,"CODE",{});var AZr=s(Qse);D4o=r(AZr,"model.train()"),AZr.forEach(t),QCe.forEach(t),G4o=i(Xt),Wse=n(Xt,"P",{});var yZr=s(Wse);O4o=r(yZr,"Examples:"),yZr.forEach(t),V4o=i(Xt),m(D5.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),QRe=i(c),md=n(c,"H2",{class:!0});var o$e=s(md);lb=n(o$e,"A",{id:!0,class:!0,href:!0});var LZr=s(lb);Hse=n(LZr,"SPAN",{});var xZr=s(Hse);m(G5.$$.fragment,xZr),xZr.forEach(t),LZr.forEach(t),X4o=i(o$e),Use=n(o$e,"SPAN",{});var kZr=s(Use);z4o=r(kZr,"AutoModelForSequenceClassification"),kZr.forEach(t),o$e.forEach(t),WRe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(O5.$$.fragment,tl),Q4o=i(tl),gd=n(tl,"P",{});var AU=s(gd);W4o=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yq=n(AU,"A",{href:!0});var SZr=s(yq);H4o=r(SZr,"from_pretrained()"),SZr.forEach(t),U4o=r(AU," class method or the "),Lq=n(AU,"A",{href:!0});var RZr=s(Lq);J4o=r(RZr,"from_config()"),RZr.forEach(t),Y4o=r(AU,` class
method.`),AU.forEach(t),K4o=i(tl),V5=n(tl,"P",{});var r$e=s(V5);Z4o=r(r$e,"This class cannot be instantiated directly using "),Jse=n(r$e,"CODE",{});var BZr=s(Jse);eEo=r(BZr,"__init__()"),BZr.forEach(t),oEo=r(r$e," (throws an error)."),r$e.forEach(t),rEo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(X5.$$.fragment,al),tEo=i(al),Yse=n(al,"P",{});var PZr=s(Yse);aEo=r(PZr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PZr.forEach(t),nEo=i(al),hd=n(al,"P",{});var yU=s(hd);sEo=r(yU,`Note:
Loading a model from its configuration file does `),Kse=n(yU,"STRONG",{});var $Zr=s(Kse);lEo=r($Zr,"not"),$Zr.forEach(t),iEo=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xq=n(yU,"A",{href:!0});var IZr=s(xq);dEo=r(IZr,"from_pretrained()"),IZr.forEach(t),cEo=r(yU," to load the model weights."),yU.forEach(t),fEo=i(al),Zse=n(al,"P",{});var qZr=s(Zse);mEo=r(qZr,"Examples:"),qZr.forEach(t),gEo=i(al),m(z5.$$.fragment,al),al.forEach(t),hEo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(Q5.$$.fragment,zt),pEo=i(zt),ele=n(zt,"P",{});var NZr=s(ele);_Eo=r(NZr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),NZr.forEach(t),uEo=i(zt),Ua=n(zt,"P",{});var P4=s(Ua);bEo=r(P4,"The model class to instantiate is selected based on the "),ole=n(P4,"CODE",{});var jZr=s(ole);vEo=r(jZr,"model_type"),jZr.forEach(t),FEo=r(P4,` property of the config object (either
passed as an argument or loaded from `),rle=n(P4,"CODE",{});var DZr=s(rle);TEo=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),MEo=r(P4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tle=n(P4,"CODE",{});var GZr=s(tle);EEo=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),CEo=r(P4,":"),P4.forEach(t),wEo=i(zt),y=n(zt,"UL",{});var L=s(y);ib=n(L,"LI",{});var WCe=s(ib);ale=n(WCe,"STRONG",{});var OZr=s(ale);AEo=r(OZr,"albert"),OZr.forEach(t),yEo=r(WCe," \u2014 "),kq=n(WCe,"A",{href:!0});var VZr=s(kq);LEo=r(VZr,"AlbertForSequenceClassification"),VZr.forEach(t),xEo=r(WCe," (ALBERT model)"),WCe.forEach(t),kEo=i(L),db=n(L,"LI",{});var HCe=s(db);nle=n(HCe,"STRONG",{});var XZr=s(nle);SEo=r(XZr,"bart"),XZr.forEach(t),REo=r(HCe," \u2014 "),Sq=n(HCe,"A",{href:!0});var zZr=s(Sq);BEo=r(zZr,"BartForSequenceClassification"),zZr.forEach(t),PEo=r(HCe," (BART model)"),HCe.forEach(t),$Eo=i(L),cb=n(L,"LI",{});var UCe=s(cb);sle=n(UCe,"STRONG",{});var QZr=s(sle);IEo=r(QZr,"bert"),QZr.forEach(t),qEo=r(UCe," \u2014 "),Rq=n(UCe,"A",{href:!0});var WZr=s(Rq);NEo=r(WZr,"BertForSequenceClassification"),WZr.forEach(t),jEo=r(UCe," (BERT model)"),UCe.forEach(t),DEo=i(L),fb=n(L,"LI",{});var JCe=s(fb);lle=n(JCe,"STRONG",{});var HZr=s(lle);GEo=r(HZr,"big_bird"),HZr.forEach(t),OEo=r(JCe," \u2014 "),Bq=n(JCe,"A",{href:!0});var UZr=s(Bq);VEo=r(UZr,"BigBirdForSequenceClassification"),UZr.forEach(t),XEo=r(JCe," (BigBird model)"),JCe.forEach(t),zEo=i(L),mb=n(L,"LI",{});var YCe=s(mb);ile=n(YCe,"STRONG",{});var JZr=s(ile);QEo=r(JZr,"bigbird_pegasus"),JZr.forEach(t),WEo=r(YCe," \u2014 "),Pq=n(YCe,"A",{href:!0});var YZr=s(Pq);HEo=r(YZr,"BigBirdPegasusForSequenceClassification"),YZr.forEach(t),UEo=r(YCe," (BigBirdPegasus model)"),YCe.forEach(t),JEo=i(L),gb=n(L,"LI",{});var KCe=s(gb);dle=n(KCe,"STRONG",{});var KZr=s(dle);YEo=r(KZr,"camembert"),KZr.forEach(t),KEo=r(KCe," \u2014 "),$q=n(KCe,"A",{href:!0});var ZZr=s($q);ZEo=r(ZZr,"CamembertForSequenceClassification"),ZZr.forEach(t),e5o=r(KCe," (CamemBERT model)"),KCe.forEach(t),o5o=i(L),hb=n(L,"LI",{});var ZCe=s(hb);cle=n(ZCe,"STRONG",{});var eet=s(cle);r5o=r(eet,"canine"),eet.forEach(t),t5o=r(ZCe," \u2014 "),Iq=n(ZCe,"A",{href:!0});var oet=s(Iq);a5o=r(oet,"CanineForSequenceClassification"),oet.forEach(t),n5o=r(ZCe," (Canine model)"),ZCe.forEach(t),s5o=i(L),pb=n(L,"LI",{});var ewe=s(pb);fle=n(ewe,"STRONG",{});var ret=s(fle);l5o=r(ret,"convbert"),ret.forEach(t),i5o=r(ewe," \u2014 "),qq=n(ewe,"A",{href:!0});var tet=s(qq);d5o=r(tet,"ConvBertForSequenceClassification"),tet.forEach(t),c5o=r(ewe," (ConvBERT model)"),ewe.forEach(t),f5o=i(L),_b=n(L,"LI",{});var owe=s(_b);mle=n(owe,"STRONG",{});var aet=s(mle);m5o=r(aet,"ctrl"),aet.forEach(t),g5o=r(owe," \u2014 "),Nq=n(owe,"A",{href:!0});var net=s(Nq);h5o=r(net,"CTRLForSequenceClassification"),net.forEach(t),p5o=r(owe," (CTRL model)"),owe.forEach(t),_5o=i(L),ub=n(L,"LI",{});var rwe=s(ub);gle=n(rwe,"STRONG",{});var set=s(gle);u5o=r(set,"data2vec-text"),set.forEach(t),b5o=r(rwe," \u2014 "),jq=n(rwe,"A",{href:!0});var iet=s(jq);v5o=r(iet,"Data2VecTextForSequenceClassification"),iet.forEach(t),F5o=r(rwe," (Data2VecText model)"),rwe.forEach(t),T5o=i(L),bb=n(L,"LI",{});var twe=s(bb);hle=n(twe,"STRONG",{});var det=s(hle);M5o=r(det,"deberta"),det.forEach(t),E5o=r(twe," \u2014 "),Dq=n(twe,"A",{href:!0});var cet=s(Dq);C5o=r(cet,"DebertaForSequenceClassification"),cet.forEach(t),w5o=r(twe," (DeBERTa model)"),twe.forEach(t),A5o=i(L),vb=n(L,"LI",{});var awe=s(vb);ple=n(awe,"STRONG",{});var fet=s(ple);y5o=r(fet,"deberta-v2"),fet.forEach(t),L5o=r(awe," \u2014 "),Gq=n(awe,"A",{href:!0});var met=s(Gq);x5o=r(met,"DebertaV2ForSequenceClassification"),met.forEach(t),k5o=r(awe," (DeBERTa-v2 model)"),awe.forEach(t),S5o=i(L),Fb=n(L,"LI",{});var nwe=s(Fb);_le=n(nwe,"STRONG",{});var get=s(_le);R5o=r(get,"distilbert"),get.forEach(t),B5o=r(nwe," \u2014 "),Oq=n(nwe,"A",{href:!0});var het=s(Oq);P5o=r(het,"DistilBertForSequenceClassification"),het.forEach(t),$5o=r(nwe," (DistilBERT model)"),nwe.forEach(t),I5o=i(L),Tb=n(L,"LI",{});var swe=s(Tb);ule=n(swe,"STRONG",{});var pet=s(ule);q5o=r(pet,"electra"),pet.forEach(t),N5o=r(swe," \u2014 "),Vq=n(swe,"A",{href:!0});var _et=s(Vq);j5o=r(_et,"ElectraForSequenceClassification"),_et.forEach(t),D5o=r(swe," (ELECTRA model)"),swe.forEach(t),G5o=i(L),Mb=n(L,"LI",{});var lwe=s(Mb);ble=n(lwe,"STRONG",{});var uet=s(ble);O5o=r(uet,"flaubert"),uet.forEach(t),V5o=r(lwe," \u2014 "),Xq=n(lwe,"A",{href:!0});var bet=s(Xq);X5o=r(bet,"FlaubertForSequenceClassification"),bet.forEach(t),z5o=r(lwe," (FlauBERT model)"),lwe.forEach(t),Q5o=i(L),Eb=n(L,"LI",{});var iwe=s(Eb);vle=n(iwe,"STRONG",{});var vet=s(vle);W5o=r(vet,"fnet"),vet.forEach(t),H5o=r(iwe," \u2014 "),zq=n(iwe,"A",{href:!0});var Fet=s(zq);U5o=r(Fet,"FNetForSequenceClassification"),Fet.forEach(t),J5o=r(iwe," (FNet model)"),iwe.forEach(t),Y5o=i(L),Cb=n(L,"LI",{});var dwe=s(Cb);Fle=n(dwe,"STRONG",{});var Tet=s(Fle);K5o=r(Tet,"funnel"),Tet.forEach(t),Z5o=r(dwe," \u2014 "),Qq=n(dwe,"A",{href:!0});var Met=s(Qq);eCo=r(Met,"FunnelForSequenceClassification"),Met.forEach(t),oCo=r(dwe," (Funnel Transformer model)"),dwe.forEach(t),rCo=i(L),wb=n(L,"LI",{});var cwe=s(wb);Tle=n(cwe,"STRONG",{});var Eet=s(Tle);tCo=r(Eet,"gpt2"),Eet.forEach(t),aCo=r(cwe," \u2014 "),Wq=n(cwe,"A",{href:!0});var Cet=s(Wq);nCo=r(Cet,"GPT2ForSequenceClassification"),Cet.forEach(t),sCo=r(cwe," (OpenAI GPT-2 model)"),cwe.forEach(t),lCo=i(L),Ab=n(L,"LI",{});var fwe=s(Ab);Mle=n(fwe,"STRONG",{});var wet=s(Mle);iCo=r(wet,"gpt_neo"),wet.forEach(t),dCo=r(fwe," \u2014 "),Hq=n(fwe,"A",{href:!0});var Aet=s(Hq);cCo=r(Aet,"GPTNeoForSequenceClassification"),Aet.forEach(t),fCo=r(fwe," (GPT Neo model)"),fwe.forEach(t),mCo=i(L),yb=n(L,"LI",{});var mwe=s(yb);Ele=n(mwe,"STRONG",{});var yet=s(Ele);gCo=r(yet,"gptj"),yet.forEach(t),hCo=r(mwe," \u2014 "),Uq=n(mwe,"A",{href:!0});var Let=s(Uq);pCo=r(Let,"GPTJForSequenceClassification"),Let.forEach(t),_Co=r(mwe," (GPT-J model)"),mwe.forEach(t),uCo=i(L),Lb=n(L,"LI",{});var gwe=s(Lb);Cle=n(gwe,"STRONG",{});var xet=s(Cle);bCo=r(xet,"ibert"),xet.forEach(t),vCo=r(gwe," \u2014 "),Jq=n(gwe,"A",{href:!0});var ket=s(Jq);FCo=r(ket,"IBertForSequenceClassification"),ket.forEach(t),TCo=r(gwe," (I-BERT model)"),gwe.forEach(t),MCo=i(L),xb=n(L,"LI",{});var hwe=s(xb);wle=n(hwe,"STRONG",{});var Set=s(wle);ECo=r(Set,"layoutlm"),Set.forEach(t),CCo=r(hwe," \u2014 "),Yq=n(hwe,"A",{href:!0});var Ret=s(Yq);wCo=r(Ret,"LayoutLMForSequenceClassification"),Ret.forEach(t),ACo=r(hwe," (LayoutLM model)"),hwe.forEach(t),yCo=i(L),kb=n(L,"LI",{});var pwe=s(kb);Ale=n(pwe,"STRONG",{});var Bet=s(Ale);LCo=r(Bet,"layoutlmv2"),Bet.forEach(t),xCo=r(pwe," \u2014 "),Kq=n(pwe,"A",{href:!0});var Pet=s(Kq);kCo=r(Pet,"LayoutLMv2ForSequenceClassification"),Pet.forEach(t),SCo=r(pwe," (LayoutLMv2 model)"),pwe.forEach(t),RCo=i(L),Sb=n(L,"LI",{});var _we=s(Sb);yle=n(_we,"STRONG",{});var $et=s(yle);BCo=r($et,"led"),$et.forEach(t),PCo=r(_we," \u2014 "),Zq=n(_we,"A",{href:!0});var Iet=s(Zq);$Co=r(Iet,"LEDForSequenceClassification"),Iet.forEach(t),ICo=r(_we," (LED model)"),_we.forEach(t),qCo=i(L),Rb=n(L,"LI",{});var uwe=s(Rb);Lle=n(uwe,"STRONG",{});var qet=s(Lle);NCo=r(qet,"longformer"),qet.forEach(t),jCo=r(uwe," \u2014 "),eN=n(uwe,"A",{href:!0});var Net=s(eN);DCo=r(Net,"LongformerForSequenceClassification"),Net.forEach(t),GCo=r(uwe," (Longformer model)"),uwe.forEach(t),OCo=i(L),Bb=n(L,"LI",{});var bwe=s(Bb);xle=n(bwe,"STRONG",{});var jet=s(xle);VCo=r(jet,"mbart"),jet.forEach(t),XCo=r(bwe," \u2014 "),oN=n(bwe,"A",{href:!0});var Det=s(oN);zCo=r(Det,"MBartForSequenceClassification"),Det.forEach(t),QCo=r(bwe," (mBART model)"),bwe.forEach(t),WCo=i(L),Pb=n(L,"LI",{});var vwe=s(Pb);kle=n(vwe,"STRONG",{});var Get=s(kle);HCo=r(Get,"megatron-bert"),Get.forEach(t),UCo=r(vwe," \u2014 "),rN=n(vwe,"A",{href:!0});var Oet=s(rN);JCo=r(Oet,"MegatronBertForSequenceClassification"),Oet.forEach(t),YCo=r(vwe," (MegatronBert model)"),vwe.forEach(t),KCo=i(L),$b=n(L,"LI",{});var Fwe=s($b);Sle=n(Fwe,"STRONG",{});var Vet=s(Sle);ZCo=r(Vet,"mobilebert"),Vet.forEach(t),ewo=r(Fwe," \u2014 "),tN=n(Fwe,"A",{href:!0});var Xet=s(tN);owo=r(Xet,"MobileBertForSequenceClassification"),Xet.forEach(t),rwo=r(Fwe," (MobileBERT model)"),Fwe.forEach(t),two=i(L),Ib=n(L,"LI",{});var Twe=s(Ib);Rle=n(Twe,"STRONG",{});var zet=s(Rle);awo=r(zet,"mpnet"),zet.forEach(t),nwo=r(Twe," \u2014 "),aN=n(Twe,"A",{href:!0});var Qet=s(aN);swo=r(Qet,"MPNetForSequenceClassification"),Qet.forEach(t),lwo=r(Twe," (MPNet model)"),Twe.forEach(t),iwo=i(L),qb=n(L,"LI",{});var Mwe=s(qb);Ble=n(Mwe,"STRONG",{});var Wet=s(Ble);dwo=r(Wet,"nystromformer"),Wet.forEach(t),cwo=r(Mwe," \u2014 "),nN=n(Mwe,"A",{href:!0});var Het=s(nN);fwo=r(Het,"NystromformerForSequenceClassification"),Het.forEach(t),mwo=r(Mwe," (Nystromformer model)"),Mwe.forEach(t),gwo=i(L),Nb=n(L,"LI",{});var Ewe=s(Nb);Ple=n(Ewe,"STRONG",{});var Uet=s(Ple);hwo=r(Uet,"openai-gpt"),Uet.forEach(t),pwo=r(Ewe," \u2014 "),sN=n(Ewe,"A",{href:!0});var Jet=s(sN);_wo=r(Jet,"OpenAIGPTForSequenceClassification"),Jet.forEach(t),uwo=r(Ewe," (OpenAI GPT model)"),Ewe.forEach(t),bwo=i(L),jb=n(L,"LI",{});var Cwe=s(jb);$le=n(Cwe,"STRONG",{});var Yet=s($le);vwo=r(Yet,"perceiver"),Yet.forEach(t),Fwo=r(Cwe," \u2014 "),lN=n(Cwe,"A",{href:!0});var Ket=s(lN);Two=r(Ket,"PerceiverForSequenceClassification"),Ket.forEach(t),Mwo=r(Cwe," (Perceiver model)"),Cwe.forEach(t),Ewo=i(L),Db=n(L,"LI",{});var wwe=s(Db);Ile=n(wwe,"STRONG",{});var Zet=s(Ile);Cwo=r(Zet,"plbart"),Zet.forEach(t),wwo=r(wwe," \u2014 "),iN=n(wwe,"A",{href:!0});var eot=s(iN);Awo=r(eot,"PLBartForSequenceClassification"),eot.forEach(t),ywo=r(wwe," (PLBart model)"),wwe.forEach(t),Lwo=i(L),Gb=n(L,"LI",{});var Awe=s(Gb);qle=n(Awe,"STRONG",{});var oot=s(qle);xwo=r(oot,"qdqbert"),oot.forEach(t),kwo=r(Awe," \u2014 "),dN=n(Awe,"A",{href:!0});var rot=s(dN);Swo=r(rot,"QDQBertForSequenceClassification"),rot.forEach(t),Rwo=r(Awe," (QDQBert model)"),Awe.forEach(t),Bwo=i(L),Ob=n(L,"LI",{});var ywe=s(Ob);Nle=n(ywe,"STRONG",{});var tot=s(Nle);Pwo=r(tot,"reformer"),tot.forEach(t),$wo=r(ywe," \u2014 "),cN=n(ywe,"A",{href:!0});var aot=s(cN);Iwo=r(aot,"ReformerForSequenceClassification"),aot.forEach(t),qwo=r(ywe," (Reformer model)"),ywe.forEach(t),Nwo=i(L),Vb=n(L,"LI",{});var Lwe=s(Vb);jle=n(Lwe,"STRONG",{});var not=s(jle);jwo=r(not,"rembert"),not.forEach(t),Dwo=r(Lwe," \u2014 "),fN=n(Lwe,"A",{href:!0});var sot=s(fN);Gwo=r(sot,"RemBertForSequenceClassification"),sot.forEach(t),Owo=r(Lwe," (RemBERT model)"),Lwe.forEach(t),Vwo=i(L),Xb=n(L,"LI",{});var xwe=s(Xb);Dle=n(xwe,"STRONG",{});var lot=s(Dle);Xwo=r(lot,"roberta"),lot.forEach(t),zwo=r(xwe," \u2014 "),mN=n(xwe,"A",{href:!0});var iot=s(mN);Qwo=r(iot,"RobertaForSequenceClassification"),iot.forEach(t),Wwo=r(xwe," (RoBERTa model)"),xwe.forEach(t),Hwo=i(L),zb=n(L,"LI",{});var kwe=s(zb);Gle=n(kwe,"STRONG",{});var dot=s(Gle);Uwo=r(dot,"roformer"),dot.forEach(t),Jwo=r(kwe," \u2014 "),gN=n(kwe,"A",{href:!0});var cot=s(gN);Ywo=r(cot,"RoFormerForSequenceClassification"),cot.forEach(t),Kwo=r(kwe," (RoFormer model)"),kwe.forEach(t),Zwo=i(L),Qb=n(L,"LI",{});var Swe=s(Qb);Ole=n(Swe,"STRONG",{});var fot=s(Ole);eAo=r(fot,"squeezebert"),fot.forEach(t),oAo=r(Swe," \u2014 "),hN=n(Swe,"A",{href:!0});var mot=s(hN);rAo=r(mot,"SqueezeBertForSequenceClassification"),mot.forEach(t),tAo=r(Swe," (SqueezeBERT model)"),Swe.forEach(t),aAo=i(L),Wb=n(L,"LI",{});var Rwe=s(Wb);Vle=n(Rwe,"STRONG",{});var got=s(Vle);nAo=r(got,"tapas"),got.forEach(t),sAo=r(Rwe," \u2014 "),pN=n(Rwe,"A",{href:!0});var hot=s(pN);lAo=r(hot,"TapasForSequenceClassification"),hot.forEach(t),iAo=r(Rwe," (TAPAS model)"),Rwe.forEach(t),dAo=i(L),Hb=n(L,"LI",{});var Bwe=s(Hb);Xle=n(Bwe,"STRONG",{});var pot=s(Xle);cAo=r(pot,"tapex"),pot.forEach(t),fAo=r(Bwe," \u2014 "),_N=n(Bwe,"A",{href:!0});var _ot=s(_N);mAo=r(_ot,"BartForSequenceClassification"),_ot.forEach(t),gAo=r(Bwe," (TAPEX model)"),Bwe.forEach(t),hAo=i(L),Ub=n(L,"LI",{});var Pwe=s(Ub);zle=n(Pwe,"STRONG",{});var uot=s(zle);pAo=r(uot,"transfo-xl"),uot.forEach(t),_Ao=r(Pwe," \u2014 "),uN=n(Pwe,"A",{href:!0});var bot=s(uN);uAo=r(bot,"TransfoXLForSequenceClassification"),bot.forEach(t),bAo=r(Pwe," (Transformer-XL model)"),Pwe.forEach(t),vAo=i(L),Jb=n(L,"LI",{});var $we=s(Jb);Qle=n($we,"STRONG",{});var vot=s(Qle);FAo=r(vot,"xlm"),vot.forEach(t),TAo=r($we," \u2014 "),bN=n($we,"A",{href:!0});var Fot=s(bN);MAo=r(Fot,"XLMForSequenceClassification"),Fot.forEach(t),EAo=r($we," (XLM model)"),$we.forEach(t),CAo=i(L),Yb=n(L,"LI",{});var Iwe=s(Yb);Wle=n(Iwe,"STRONG",{});var Tot=s(Wle);wAo=r(Tot,"xlm-roberta"),Tot.forEach(t),AAo=r(Iwe," \u2014 "),vN=n(Iwe,"A",{href:!0});var Mot=s(vN);yAo=r(Mot,"XLMRobertaForSequenceClassification"),Mot.forEach(t),LAo=r(Iwe," (XLM-RoBERTa model)"),Iwe.forEach(t),xAo=i(L),Kb=n(L,"LI",{});var qwe=s(Kb);Hle=n(qwe,"STRONG",{});var Eot=s(Hle);kAo=r(Eot,"xlm-roberta-xl"),Eot.forEach(t),SAo=r(qwe," \u2014 "),FN=n(qwe,"A",{href:!0});var Cot=s(FN);RAo=r(Cot,"XLMRobertaXLForSequenceClassification"),Cot.forEach(t),BAo=r(qwe," (XLM-RoBERTa-XL model)"),qwe.forEach(t),PAo=i(L),Zb=n(L,"LI",{});var Nwe=s(Zb);Ule=n(Nwe,"STRONG",{});var wot=s(Ule);$Ao=r(wot,"xlnet"),wot.forEach(t),IAo=r(Nwe," \u2014 "),TN=n(Nwe,"A",{href:!0});var Aot=s(TN);qAo=r(Aot,"XLNetForSequenceClassification"),Aot.forEach(t),NAo=r(Nwe," (XLNet model)"),Nwe.forEach(t),jAo=i(L),e2=n(L,"LI",{});var jwe=s(e2);Jle=n(jwe,"STRONG",{});var yot=s(Jle);DAo=r(yot,"yoso"),yot.forEach(t),GAo=r(jwe," \u2014 "),MN=n(jwe,"A",{href:!0});var Lot=s(MN);OAo=r(Lot,"YosoForSequenceClassification"),Lot.forEach(t),VAo=r(jwe," (YOSO model)"),jwe.forEach(t),L.forEach(t),XAo=i(zt),o2=n(zt,"P",{});var Dwe=s(o2);zAo=r(Dwe,"The model is set in evaluation mode by default using "),Yle=n(Dwe,"CODE",{});var xot=s(Yle);QAo=r(xot,"model.eval()"),xot.forEach(t),WAo=r(Dwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kle=n(Dwe,"CODE",{});var kot=s(Kle);HAo=r(kot,"model.train()"),kot.forEach(t),Dwe.forEach(t),UAo=i(zt),Zle=n(zt,"P",{});var Sot=s(Zle);JAo=r(Sot,"Examples:"),Sot.forEach(t),YAo=i(zt),m(W5.$$.fragment,zt),zt.forEach(t),tl.forEach(t),HRe=i(c),pd=n(c,"H2",{class:!0});var t$e=s(pd);r2=n(t$e,"A",{id:!0,class:!0,href:!0});var Rot=s(r2);eie=n(Rot,"SPAN",{});var Bot=s(eie);m(H5.$$.fragment,Bot),Bot.forEach(t),Rot.forEach(t),KAo=i(t$e),oie=n(t$e,"SPAN",{});var Pot=s(oie);ZAo=r(Pot,"AutoModelForMultipleChoice"),Pot.forEach(t),t$e.forEach(t),URe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(U5.$$.fragment,nl),e0o=i(nl),_d=n(nl,"P",{});var LU=s(_d);o0o=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EN=n(LU,"A",{href:!0});var $ot=s(EN);r0o=r($ot,"from_pretrained()"),$ot.forEach(t),t0o=r(LU," class method or the "),CN=n(LU,"A",{href:!0});var Iot=s(CN);a0o=r(Iot,"from_config()"),Iot.forEach(t),n0o=r(LU,` class
method.`),LU.forEach(t),s0o=i(nl),J5=n(nl,"P",{});var a$e=s(J5);l0o=r(a$e,"This class cannot be instantiated directly using "),rie=n(a$e,"CODE",{});var qot=s(rie);i0o=r(qot,"__init__()"),qot.forEach(t),d0o=r(a$e," (throws an error)."),a$e.forEach(t),c0o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(Y5.$$.fragment,sl),f0o=i(sl),tie=n(sl,"P",{});var Not=s(tie);m0o=r(Not,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Not.forEach(t),g0o=i(sl),ud=n(sl,"P",{});var xU=s(ud);h0o=r(xU,`Note:
Loading a model from its configuration file does `),aie=n(xU,"STRONG",{});var jot=s(aie);p0o=r(jot,"not"),jot.forEach(t),_0o=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wN=n(xU,"A",{href:!0});var Dot=s(wN);u0o=r(Dot,"from_pretrained()"),Dot.forEach(t),b0o=r(xU," to load the model weights."),xU.forEach(t),v0o=i(sl),nie=n(sl,"P",{});var Got=s(nie);F0o=r(Got,"Examples:"),Got.forEach(t),T0o=i(sl),m(K5.$$.fragment,sl),sl.forEach(t),M0o=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(Z5.$$.fragment,Qt),E0o=i(Qt),sie=n(Qt,"P",{});var Oot=s(sie);C0o=r(Oot,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Oot.forEach(t),w0o=i(Qt),Ja=n(Qt,"P",{});var $4=s(Ja);A0o=r($4,"The model class to instantiate is selected based on the "),lie=n($4,"CODE",{});var Vot=s(lie);y0o=r(Vot,"model_type"),Vot.forEach(t),L0o=r($4,` property of the config object (either
passed as an argument or loaded from `),iie=n($4,"CODE",{});var Xot=s(iie);x0o=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),k0o=r($4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),die=n($4,"CODE",{});var zot=s(die);S0o=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),R0o=r($4,":"),$4.forEach(t),B0o=i(Qt),G=n(Qt,"UL",{});var O=s(G);t2=n(O,"LI",{});var Gwe=s(t2);cie=n(Gwe,"STRONG",{});var Qot=s(cie);P0o=r(Qot,"albert"),Qot.forEach(t),$0o=r(Gwe," \u2014 "),AN=n(Gwe,"A",{href:!0});var Wot=s(AN);I0o=r(Wot,"AlbertForMultipleChoice"),Wot.forEach(t),q0o=r(Gwe," (ALBERT model)"),Gwe.forEach(t),N0o=i(O),a2=n(O,"LI",{});var Owe=s(a2);fie=n(Owe,"STRONG",{});var Hot=s(fie);j0o=r(Hot,"bert"),Hot.forEach(t),D0o=r(Owe," \u2014 "),yN=n(Owe,"A",{href:!0});var Uot=s(yN);G0o=r(Uot,"BertForMultipleChoice"),Uot.forEach(t),O0o=r(Owe," (BERT model)"),Owe.forEach(t),V0o=i(O),n2=n(O,"LI",{});var Vwe=s(n2);mie=n(Vwe,"STRONG",{});var Jot=s(mie);X0o=r(Jot,"big_bird"),Jot.forEach(t),z0o=r(Vwe," \u2014 "),LN=n(Vwe,"A",{href:!0});var Yot=s(LN);Q0o=r(Yot,"BigBirdForMultipleChoice"),Yot.forEach(t),W0o=r(Vwe," (BigBird model)"),Vwe.forEach(t),H0o=i(O),s2=n(O,"LI",{});var Xwe=s(s2);gie=n(Xwe,"STRONG",{});var Kot=s(gie);U0o=r(Kot,"camembert"),Kot.forEach(t),J0o=r(Xwe," \u2014 "),xN=n(Xwe,"A",{href:!0});var Zot=s(xN);Y0o=r(Zot,"CamembertForMultipleChoice"),Zot.forEach(t),K0o=r(Xwe," (CamemBERT model)"),Xwe.forEach(t),Z0o=i(O),l2=n(O,"LI",{});var zwe=s(l2);hie=n(zwe,"STRONG",{});var ert=s(hie);eyo=r(ert,"canine"),ert.forEach(t),oyo=r(zwe," \u2014 "),kN=n(zwe,"A",{href:!0});var ort=s(kN);ryo=r(ort,"CanineForMultipleChoice"),ort.forEach(t),tyo=r(zwe," (Canine model)"),zwe.forEach(t),ayo=i(O),i2=n(O,"LI",{});var Qwe=s(i2);pie=n(Qwe,"STRONG",{});var rrt=s(pie);nyo=r(rrt,"convbert"),rrt.forEach(t),syo=r(Qwe," \u2014 "),SN=n(Qwe,"A",{href:!0});var trt=s(SN);lyo=r(trt,"ConvBertForMultipleChoice"),trt.forEach(t),iyo=r(Qwe," (ConvBERT model)"),Qwe.forEach(t),dyo=i(O),d2=n(O,"LI",{});var Wwe=s(d2);_ie=n(Wwe,"STRONG",{});var art=s(_ie);cyo=r(art,"data2vec-text"),art.forEach(t),fyo=r(Wwe," \u2014 "),RN=n(Wwe,"A",{href:!0});var nrt=s(RN);myo=r(nrt,"Data2VecTextForMultipleChoice"),nrt.forEach(t),gyo=r(Wwe," (Data2VecText model)"),Wwe.forEach(t),hyo=i(O),c2=n(O,"LI",{});var Hwe=s(c2);uie=n(Hwe,"STRONG",{});var srt=s(uie);pyo=r(srt,"distilbert"),srt.forEach(t),_yo=r(Hwe," \u2014 "),BN=n(Hwe,"A",{href:!0});var lrt=s(BN);uyo=r(lrt,"DistilBertForMultipleChoice"),lrt.forEach(t),byo=r(Hwe," (DistilBERT model)"),Hwe.forEach(t),vyo=i(O),f2=n(O,"LI",{});var Uwe=s(f2);bie=n(Uwe,"STRONG",{});var irt=s(bie);Fyo=r(irt,"electra"),irt.forEach(t),Tyo=r(Uwe," \u2014 "),PN=n(Uwe,"A",{href:!0});var drt=s(PN);Myo=r(drt,"ElectraForMultipleChoice"),drt.forEach(t),Eyo=r(Uwe," (ELECTRA model)"),Uwe.forEach(t),Cyo=i(O),m2=n(O,"LI",{});var Jwe=s(m2);vie=n(Jwe,"STRONG",{});var crt=s(vie);wyo=r(crt,"flaubert"),crt.forEach(t),Ayo=r(Jwe," \u2014 "),$N=n(Jwe,"A",{href:!0});var frt=s($N);yyo=r(frt,"FlaubertForMultipleChoice"),frt.forEach(t),Lyo=r(Jwe," (FlauBERT model)"),Jwe.forEach(t),xyo=i(O),g2=n(O,"LI",{});var Ywe=s(g2);Fie=n(Ywe,"STRONG",{});var mrt=s(Fie);kyo=r(mrt,"fnet"),mrt.forEach(t),Syo=r(Ywe," \u2014 "),IN=n(Ywe,"A",{href:!0});var grt=s(IN);Ryo=r(grt,"FNetForMultipleChoice"),grt.forEach(t),Byo=r(Ywe," (FNet model)"),Ywe.forEach(t),Pyo=i(O),h2=n(O,"LI",{});var Kwe=s(h2);Tie=n(Kwe,"STRONG",{});var hrt=s(Tie);$yo=r(hrt,"funnel"),hrt.forEach(t),Iyo=r(Kwe," \u2014 "),qN=n(Kwe,"A",{href:!0});var prt=s(qN);qyo=r(prt,"FunnelForMultipleChoice"),prt.forEach(t),Nyo=r(Kwe," (Funnel Transformer model)"),Kwe.forEach(t),jyo=i(O),p2=n(O,"LI",{});var Zwe=s(p2);Mie=n(Zwe,"STRONG",{});var _rt=s(Mie);Dyo=r(_rt,"ibert"),_rt.forEach(t),Gyo=r(Zwe," \u2014 "),NN=n(Zwe,"A",{href:!0});var urt=s(NN);Oyo=r(urt,"IBertForMultipleChoice"),urt.forEach(t),Vyo=r(Zwe," (I-BERT model)"),Zwe.forEach(t),Xyo=i(O),_2=n(O,"LI",{});var eAe=s(_2);Eie=n(eAe,"STRONG",{});var brt=s(Eie);zyo=r(brt,"longformer"),brt.forEach(t),Qyo=r(eAe," \u2014 "),jN=n(eAe,"A",{href:!0});var vrt=s(jN);Wyo=r(vrt,"LongformerForMultipleChoice"),vrt.forEach(t),Hyo=r(eAe," (Longformer model)"),eAe.forEach(t),Uyo=i(O),u2=n(O,"LI",{});var oAe=s(u2);Cie=n(oAe,"STRONG",{});var Frt=s(Cie);Jyo=r(Frt,"megatron-bert"),Frt.forEach(t),Yyo=r(oAe," \u2014 "),DN=n(oAe,"A",{href:!0});var Trt=s(DN);Kyo=r(Trt,"MegatronBertForMultipleChoice"),Trt.forEach(t),Zyo=r(oAe," (MegatronBert model)"),oAe.forEach(t),eLo=i(O),b2=n(O,"LI",{});var rAe=s(b2);wie=n(rAe,"STRONG",{});var Mrt=s(wie);oLo=r(Mrt,"mobilebert"),Mrt.forEach(t),rLo=r(rAe," \u2014 "),GN=n(rAe,"A",{href:!0});var Ert=s(GN);tLo=r(Ert,"MobileBertForMultipleChoice"),Ert.forEach(t),aLo=r(rAe," (MobileBERT model)"),rAe.forEach(t),nLo=i(O),v2=n(O,"LI",{});var tAe=s(v2);Aie=n(tAe,"STRONG",{});var Crt=s(Aie);sLo=r(Crt,"mpnet"),Crt.forEach(t),lLo=r(tAe," \u2014 "),ON=n(tAe,"A",{href:!0});var wrt=s(ON);iLo=r(wrt,"MPNetForMultipleChoice"),wrt.forEach(t),dLo=r(tAe," (MPNet model)"),tAe.forEach(t),cLo=i(O),F2=n(O,"LI",{});var aAe=s(F2);yie=n(aAe,"STRONG",{});var Art=s(yie);fLo=r(Art,"nystromformer"),Art.forEach(t),mLo=r(aAe," \u2014 "),VN=n(aAe,"A",{href:!0});var yrt=s(VN);gLo=r(yrt,"NystromformerForMultipleChoice"),yrt.forEach(t),hLo=r(aAe," (Nystromformer model)"),aAe.forEach(t),pLo=i(O),T2=n(O,"LI",{});var nAe=s(T2);Lie=n(nAe,"STRONG",{});var Lrt=s(Lie);_Lo=r(Lrt,"qdqbert"),Lrt.forEach(t),uLo=r(nAe," \u2014 "),XN=n(nAe,"A",{href:!0});var xrt=s(XN);bLo=r(xrt,"QDQBertForMultipleChoice"),xrt.forEach(t),vLo=r(nAe," (QDQBert model)"),nAe.forEach(t),FLo=i(O),M2=n(O,"LI",{});var sAe=s(M2);xie=n(sAe,"STRONG",{});var krt=s(xie);TLo=r(krt,"rembert"),krt.forEach(t),MLo=r(sAe," \u2014 "),zN=n(sAe,"A",{href:!0});var Srt=s(zN);ELo=r(Srt,"RemBertForMultipleChoice"),Srt.forEach(t),CLo=r(sAe," (RemBERT model)"),sAe.forEach(t),wLo=i(O),E2=n(O,"LI",{});var lAe=s(E2);kie=n(lAe,"STRONG",{});var Rrt=s(kie);ALo=r(Rrt,"roberta"),Rrt.forEach(t),yLo=r(lAe," \u2014 "),QN=n(lAe,"A",{href:!0});var Brt=s(QN);LLo=r(Brt,"RobertaForMultipleChoice"),Brt.forEach(t),xLo=r(lAe," (RoBERTa model)"),lAe.forEach(t),kLo=i(O),C2=n(O,"LI",{});var iAe=s(C2);Sie=n(iAe,"STRONG",{});var Prt=s(Sie);SLo=r(Prt,"roformer"),Prt.forEach(t),RLo=r(iAe," \u2014 "),WN=n(iAe,"A",{href:!0});var $rt=s(WN);BLo=r($rt,"RoFormerForMultipleChoice"),$rt.forEach(t),PLo=r(iAe," (RoFormer model)"),iAe.forEach(t),$Lo=i(O),w2=n(O,"LI",{});var dAe=s(w2);Rie=n(dAe,"STRONG",{});var Irt=s(Rie);ILo=r(Irt,"squeezebert"),Irt.forEach(t),qLo=r(dAe," \u2014 "),HN=n(dAe,"A",{href:!0});var qrt=s(HN);NLo=r(qrt,"SqueezeBertForMultipleChoice"),qrt.forEach(t),jLo=r(dAe," (SqueezeBERT model)"),dAe.forEach(t),DLo=i(O),A2=n(O,"LI",{});var cAe=s(A2);Bie=n(cAe,"STRONG",{});var Nrt=s(Bie);GLo=r(Nrt,"xlm"),Nrt.forEach(t),OLo=r(cAe," \u2014 "),UN=n(cAe,"A",{href:!0});var jrt=s(UN);VLo=r(jrt,"XLMForMultipleChoice"),jrt.forEach(t),XLo=r(cAe," (XLM model)"),cAe.forEach(t),zLo=i(O),y2=n(O,"LI",{});var fAe=s(y2);Pie=n(fAe,"STRONG",{});var Drt=s(Pie);QLo=r(Drt,"xlm-roberta"),Drt.forEach(t),WLo=r(fAe," \u2014 "),JN=n(fAe,"A",{href:!0});var Grt=s(JN);HLo=r(Grt,"XLMRobertaForMultipleChoice"),Grt.forEach(t),ULo=r(fAe," (XLM-RoBERTa model)"),fAe.forEach(t),JLo=i(O),L2=n(O,"LI",{});var mAe=s(L2);$ie=n(mAe,"STRONG",{});var Ort=s($ie);YLo=r(Ort,"xlm-roberta-xl"),Ort.forEach(t),KLo=r(mAe," \u2014 "),YN=n(mAe,"A",{href:!0});var Vrt=s(YN);ZLo=r(Vrt,"XLMRobertaXLForMultipleChoice"),Vrt.forEach(t),e7o=r(mAe," (XLM-RoBERTa-XL model)"),mAe.forEach(t),o7o=i(O),x2=n(O,"LI",{});var gAe=s(x2);Iie=n(gAe,"STRONG",{});var Xrt=s(Iie);r7o=r(Xrt,"xlnet"),Xrt.forEach(t),t7o=r(gAe," \u2014 "),KN=n(gAe,"A",{href:!0});var zrt=s(KN);a7o=r(zrt,"XLNetForMultipleChoice"),zrt.forEach(t),n7o=r(gAe," (XLNet model)"),gAe.forEach(t),s7o=i(O),k2=n(O,"LI",{});var hAe=s(k2);qie=n(hAe,"STRONG",{});var Qrt=s(qie);l7o=r(Qrt,"yoso"),Qrt.forEach(t),i7o=r(hAe," \u2014 "),ZN=n(hAe,"A",{href:!0});var Wrt=s(ZN);d7o=r(Wrt,"YosoForMultipleChoice"),Wrt.forEach(t),c7o=r(hAe," (YOSO model)"),hAe.forEach(t),O.forEach(t),f7o=i(Qt),S2=n(Qt,"P",{});var pAe=s(S2);m7o=r(pAe,"The model is set in evaluation mode by default using "),Nie=n(pAe,"CODE",{});var Hrt=s(Nie);g7o=r(Hrt,"model.eval()"),Hrt.forEach(t),h7o=r(pAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jie=n(pAe,"CODE",{});var Urt=s(jie);p7o=r(Urt,"model.train()"),Urt.forEach(t),pAe.forEach(t),_7o=i(Qt),Die=n(Qt,"P",{});var Jrt=s(Die);u7o=r(Jrt,"Examples:"),Jrt.forEach(t),b7o=i(Qt),m(eC.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),JRe=i(c),bd=n(c,"H2",{class:!0});var n$e=s(bd);R2=n(n$e,"A",{id:!0,class:!0,href:!0});var Yrt=s(R2);Gie=n(Yrt,"SPAN",{});var Krt=s(Gie);m(oC.$$.fragment,Krt),Krt.forEach(t),Yrt.forEach(t),v7o=i(n$e),Oie=n(n$e,"SPAN",{});var Zrt=s(Oie);F7o=r(Zrt,"AutoModelForNextSentencePrediction"),Zrt.forEach(t),n$e.forEach(t),YRe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(rC.$$.fragment,ll),T7o=i(ll),vd=n(ll,"P",{});var kU=s(vd);M7o=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ej=n(kU,"A",{href:!0});var ett=s(ej);E7o=r(ett,"from_pretrained()"),ett.forEach(t),C7o=r(kU," class method or the "),oj=n(kU,"A",{href:!0});var ott=s(oj);w7o=r(ott,"from_config()"),ott.forEach(t),A7o=r(kU,` class
method.`),kU.forEach(t),y7o=i(ll),tC=n(ll,"P",{});var s$e=s(tC);L7o=r(s$e,"This class cannot be instantiated directly using "),Vie=n(s$e,"CODE",{});var rtt=s(Vie);x7o=r(rtt,"__init__()"),rtt.forEach(t),k7o=r(s$e," (throws an error)."),s$e.forEach(t),S7o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(aC.$$.fragment,il),R7o=i(il),Xie=n(il,"P",{});var ttt=s(Xie);B7o=r(ttt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ttt.forEach(t),P7o=i(il),Fd=n(il,"P",{});var SU=s(Fd);$7o=r(SU,`Note:
Loading a model from its configuration file does `),zie=n(SU,"STRONG",{});var att=s(zie);I7o=r(att,"not"),att.forEach(t),q7o=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rj=n(SU,"A",{href:!0});var ntt=s(rj);N7o=r(ntt,"from_pretrained()"),ntt.forEach(t),j7o=r(SU," to load the model weights."),SU.forEach(t),D7o=i(il),Qie=n(il,"P",{});var stt=s(Qie);G7o=r(stt,"Examples:"),stt.forEach(t),O7o=i(il),m(nC.$$.fragment,il),il.forEach(t),V7o=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(sC.$$.fragment,Wt),X7o=i(Wt),Wie=n(Wt,"P",{});var ltt=s(Wie);z7o=r(ltt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ltt.forEach(t),Q7o=i(Wt),Ya=n(Wt,"P",{});var I4=s(Ya);W7o=r(I4,"The model class to instantiate is selected based on the "),Hie=n(I4,"CODE",{});var itt=s(Hie);H7o=r(itt,"model_type"),itt.forEach(t),U7o=r(I4,` property of the config object (either
passed as an argument or loaded from `),Uie=n(I4,"CODE",{});var dtt=s(Uie);J7o=r(dtt,"pretrained_model_name_or_path"),dtt.forEach(t),Y7o=r(I4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jie=n(I4,"CODE",{});var ctt=s(Jie);K7o=r(ctt,"pretrained_model_name_or_path"),ctt.forEach(t),Z7o=r(I4,":"),I4.forEach(t),exo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);B2=n(dl,"LI",{});var _Ae=s(B2);Yie=n(_Ae,"STRONG",{});var ftt=s(Yie);oxo=r(ftt,"bert"),ftt.forEach(t),rxo=r(_Ae," \u2014 "),tj=n(_Ae,"A",{href:!0});var mtt=s(tj);txo=r(mtt,"BertForNextSentencePrediction"),mtt.forEach(t),axo=r(_Ae," (BERT model)"),_Ae.forEach(t),nxo=i(dl),P2=n(dl,"LI",{});var uAe=s(P2);Kie=n(uAe,"STRONG",{});var gtt=s(Kie);sxo=r(gtt,"fnet"),gtt.forEach(t),lxo=r(uAe," \u2014 "),aj=n(uAe,"A",{href:!0});var htt=s(aj);ixo=r(htt,"FNetForNextSentencePrediction"),htt.forEach(t),dxo=r(uAe," (FNet model)"),uAe.forEach(t),cxo=i(dl),$2=n(dl,"LI",{});var bAe=s($2);Zie=n(bAe,"STRONG",{});var ptt=s(Zie);fxo=r(ptt,"megatron-bert"),ptt.forEach(t),mxo=r(bAe," \u2014 "),nj=n(bAe,"A",{href:!0});var _tt=s(nj);gxo=r(_tt,"MegatronBertForNextSentencePrediction"),_tt.forEach(t),hxo=r(bAe," (MegatronBert model)"),bAe.forEach(t),pxo=i(dl),I2=n(dl,"LI",{});var vAe=s(I2);ede=n(vAe,"STRONG",{});var utt=s(ede);_xo=r(utt,"mobilebert"),utt.forEach(t),uxo=r(vAe," \u2014 "),sj=n(vAe,"A",{href:!0});var btt=s(sj);bxo=r(btt,"MobileBertForNextSentencePrediction"),btt.forEach(t),vxo=r(vAe," (MobileBERT model)"),vAe.forEach(t),Fxo=i(dl),q2=n(dl,"LI",{});var FAe=s(q2);ode=n(FAe,"STRONG",{});var vtt=s(ode);Txo=r(vtt,"qdqbert"),vtt.forEach(t),Mxo=r(FAe," \u2014 "),lj=n(FAe,"A",{href:!0});var Ftt=s(lj);Exo=r(Ftt,"QDQBertForNextSentencePrediction"),Ftt.forEach(t),Cxo=r(FAe," (QDQBert model)"),FAe.forEach(t),dl.forEach(t),wxo=i(Wt),N2=n(Wt,"P",{});var TAe=s(N2);Axo=r(TAe,"The model is set in evaluation mode by default using "),rde=n(TAe,"CODE",{});var Ttt=s(rde);yxo=r(Ttt,"model.eval()"),Ttt.forEach(t),Lxo=r(TAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tde=n(TAe,"CODE",{});var Mtt=s(tde);xxo=r(Mtt,"model.train()"),Mtt.forEach(t),TAe.forEach(t),kxo=i(Wt),ade=n(Wt,"P",{});var Ett=s(ade);Sxo=r(Ett,"Examples:"),Ett.forEach(t),Rxo=i(Wt),m(lC.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),KRe=i(c),Td=n(c,"H2",{class:!0});var l$e=s(Td);j2=n(l$e,"A",{id:!0,class:!0,href:!0});var Ctt=s(j2);nde=n(Ctt,"SPAN",{});var wtt=s(nde);m(iC.$$.fragment,wtt),wtt.forEach(t),Ctt.forEach(t),Bxo=i(l$e),sde=n(l$e,"SPAN",{});var Att=s(sde);Pxo=r(Att,"AutoModelForTokenClassification"),Att.forEach(t),l$e.forEach(t),ZRe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(dC.$$.fragment,cl),$xo=i(cl),Md=n(cl,"P",{});var RU=s(Md);Ixo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ij=n(RU,"A",{href:!0});var ytt=s(ij);qxo=r(ytt,"from_pretrained()"),ytt.forEach(t),Nxo=r(RU," class method or the "),dj=n(RU,"A",{href:!0});var Ltt=s(dj);jxo=r(Ltt,"from_config()"),Ltt.forEach(t),Dxo=r(RU,` class
method.`),RU.forEach(t),Gxo=i(cl),cC=n(cl,"P",{});var i$e=s(cC);Oxo=r(i$e,"This class cannot be instantiated directly using "),lde=n(i$e,"CODE",{});var xtt=s(lde);Vxo=r(xtt,"__init__()"),xtt.forEach(t),Xxo=r(i$e," (throws an error)."),i$e.forEach(t),zxo=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(fC.$$.fragment,fl),Qxo=i(fl),ide=n(fl,"P",{});var ktt=s(ide);Wxo=r(ktt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ktt.forEach(t),Hxo=i(fl),Ed=n(fl,"P",{});var BU=s(Ed);Uxo=r(BU,`Note:
Loading a model from its configuration file does `),dde=n(BU,"STRONG",{});var Stt=s(dde);Jxo=r(Stt,"not"),Stt.forEach(t),Yxo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),cj=n(BU,"A",{href:!0});var Rtt=s(cj);Kxo=r(Rtt,"from_pretrained()"),Rtt.forEach(t),Zxo=r(BU," to load the model weights."),BU.forEach(t),eko=i(fl),cde=n(fl,"P",{});var Btt=s(cde);oko=r(Btt,"Examples:"),Btt.forEach(t),rko=i(fl),m(mC.$$.fragment,fl),fl.forEach(t),tko=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(gC.$$.fragment,Ht),ako=i(Ht),fde=n(Ht,"P",{});var Ptt=s(fde);nko=r(Ptt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ptt.forEach(t),sko=i(Ht),Ka=n(Ht,"P",{});var q4=s(Ka);lko=r(q4,"The model class to instantiate is selected based on the "),mde=n(q4,"CODE",{});var $tt=s(mde);iko=r($tt,"model_type"),$tt.forEach(t),dko=r(q4,` property of the config object (either
passed as an argument or loaded from `),gde=n(q4,"CODE",{});var Itt=s(gde);cko=r(Itt,"pretrained_model_name_or_path"),Itt.forEach(t),fko=r(q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(q4,"CODE",{});var qtt=s(hde);mko=r(qtt,"pretrained_model_name_or_path"),qtt.forEach(t),gko=r(q4,":"),q4.forEach(t),hko=i(Ht),N=n(Ht,"UL",{});var D=s(N);D2=n(D,"LI",{});var MAe=s(D2);pde=n(MAe,"STRONG",{});var Ntt=s(pde);pko=r(Ntt,"albert"),Ntt.forEach(t),_ko=r(MAe," \u2014 "),fj=n(MAe,"A",{href:!0});var jtt=s(fj);uko=r(jtt,"AlbertForTokenClassification"),jtt.forEach(t),bko=r(MAe," (ALBERT model)"),MAe.forEach(t),vko=i(D),G2=n(D,"LI",{});var EAe=s(G2);_de=n(EAe,"STRONG",{});var Dtt=s(_de);Fko=r(Dtt,"bert"),Dtt.forEach(t),Tko=r(EAe," \u2014 "),mj=n(EAe,"A",{href:!0});var Gtt=s(mj);Mko=r(Gtt,"BertForTokenClassification"),Gtt.forEach(t),Eko=r(EAe," (BERT model)"),EAe.forEach(t),Cko=i(D),O2=n(D,"LI",{});var CAe=s(O2);ude=n(CAe,"STRONG",{});var Ott=s(ude);wko=r(Ott,"big_bird"),Ott.forEach(t),Ako=r(CAe," \u2014 "),gj=n(CAe,"A",{href:!0});var Vtt=s(gj);yko=r(Vtt,"BigBirdForTokenClassification"),Vtt.forEach(t),Lko=r(CAe," (BigBird model)"),CAe.forEach(t),xko=i(D),V2=n(D,"LI",{});var wAe=s(V2);bde=n(wAe,"STRONG",{});var Xtt=s(bde);kko=r(Xtt,"camembert"),Xtt.forEach(t),Sko=r(wAe," \u2014 "),hj=n(wAe,"A",{href:!0});var ztt=s(hj);Rko=r(ztt,"CamembertForTokenClassification"),ztt.forEach(t),Bko=r(wAe," (CamemBERT model)"),wAe.forEach(t),Pko=i(D),X2=n(D,"LI",{});var AAe=s(X2);vde=n(AAe,"STRONG",{});var Qtt=s(vde);$ko=r(Qtt,"canine"),Qtt.forEach(t),Iko=r(AAe," \u2014 "),pj=n(AAe,"A",{href:!0});var Wtt=s(pj);qko=r(Wtt,"CanineForTokenClassification"),Wtt.forEach(t),Nko=r(AAe," (Canine model)"),AAe.forEach(t),jko=i(D),z2=n(D,"LI",{});var yAe=s(z2);Fde=n(yAe,"STRONG",{});var Htt=s(Fde);Dko=r(Htt,"convbert"),Htt.forEach(t),Gko=r(yAe," \u2014 "),_j=n(yAe,"A",{href:!0});var Utt=s(_j);Oko=r(Utt,"ConvBertForTokenClassification"),Utt.forEach(t),Vko=r(yAe," (ConvBERT model)"),yAe.forEach(t),Xko=i(D),Q2=n(D,"LI",{});var LAe=s(Q2);Tde=n(LAe,"STRONG",{});var Jtt=s(Tde);zko=r(Jtt,"data2vec-text"),Jtt.forEach(t),Qko=r(LAe," \u2014 "),uj=n(LAe,"A",{href:!0});var Ytt=s(uj);Wko=r(Ytt,"Data2VecTextForTokenClassification"),Ytt.forEach(t),Hko=r(LAe," (Data2VecText model)"),LAe.forEach(t),Uko=i(D),W2=n(D,"LI",{});var xAe=s(W2);Mde=n(xAe,"STRONG",{});var Ktt=s(Mde);Jko=r(Ktt,"deberta"),Ktt.forEach(t),Yko=r(xAe," \u2014 "),bj=n(xAe,"A",{href:!0});var Ztt=s(bj);Kko=r(Ztt,"DebertaForTokenClassification"),Ztt.forEach(t),Zko=r(xAe," (DeBERTa model)"),xAe.forEach(t),eSo=i(D),H2=n(D,"LI",{});var kAe=s(H2);Ede=n(kAe,"STRONG",{});var eat=s(Ede);oSo=r(eat,"deberta-v2"),eat.forEach(t),rSo=r(kAe," \u2014 "),vj=n(kAe,"A",{href:!0});var oat=s(vj);tSo=r(oat,"DebertaV2ForTokenClassification"),oat.forEach(t),aSo=r(kAe," (DeBERTa-v2 model)"),kAe.forEach(t),nSo=i(D),U2=n(D,"LI",{});var SAe=s(U2);Cde=n(SAe,"STRONG",{});var rat=s(Cde);sSo=r(rat,"distilbert"),rat.forEach(t),lSo=r(SAe," \u2014 "),Fj=n(SAe,"A",{href:!0});var tat=s(Fj);iSo=r(tat,"DistilBertForTokenClassification"),tat.forEach(t),dSo=r(SAe," (DistilBERT model)"),SAe.forEach(t),cSo=i(D),J2=n(D,"LI",{});var RAe=s(J2);wde=n(RAe,"STRONG",{});var aat=s(wde);fSo=r(aat,"electra"),aat.forEach(t),mSo=r(RAe," \u2014 "),Tj=n(RAe,"A",{href:!0});var nat=s(Tj);gSo=r(nat,"ElectraForTokenClassification"),nat.forEach(t),hSo=r(RAe," (ELECTRA model)"),RAe.forEach(t),pSo=i(D),Y2=n(D,"LI",{});var BAe=s(Y2);Ade=n(BAe,"STRONG",{});var sat=s(Ade);_So=r(sat,"flaubert"),sat.forEach(t),uSo=r(BAe," \u2014 "),Mj=n(BAe,"A",{href:!0});var lat=s(Mj);bSo=r(lat,"FlaubertForTokenClassification"),lat.forEach(t),vSo=r(BAe," (FlauBERT model)"),BAe.forEach(t),FSo=i(D),K2=n(D,"LI",{});var PAe=s(K2);yde=n(PAe,"STRONG",{});var iat=s(yde);TSo=r(iat,"fnet"),iat.forEach(t),MSo=r(PAe," \u2014 "),Ej=n(PAe,"A",{href:!0});var dat=s(Ej);ESo=r(dat,"FNetForTokenClassification"),dat.forEach(t),CSo=r(PAe," (FNet model)"),PAe.forEach(t),wSo=i(D),Z2=n(D,"LI",{});var $Ae=s(Z2);Lde=n($Ae,"STRONG",{});var cat=s(Lde);ASo=r(cat,"funnel"),cat.forEach(t),ySo=r($Ae," \u2014 "),Cj=n($Ae,"A",{href:!0});var fat=s(Cj);LSo=r(fat,"FunnelForTokenClassification"),fat.forEach(t),xSo=r($Ae," (Funnel Transformer model)"),$Ae.forEach(t),kSo=i(D),e3=n(D,"LI",{});var IAe=s(e3);xde=n(IAe,"STRONG",{});var mat=s(xde);SSo=r(mat,"gpt2"),mat.forEach(t),RSo=r(IAe," \u2014 "),wj=n(IAe,"A",{href:!0});var gat=s(wj);BSo=r(gat,"GPT2ForTokenClassification"),gat.forEach(t),PSo=r(IAe," (OpenAI GPT-2 model)"),IAe.forEach(t),$So=i(D),o3=n(D,"LI",{});var qAe=s(o3);kde=n(qAe,"STRONG",{});var hat=s(kde);ISo=r(hat,"ibert"),hat.forEach(t),qSo=r(qAe," \u2014 "),Aj=n(qAe,"A",{href:!0});var pat=s(Aj);NSo=r(pat,"IBertForTokenClassification"),pat.forEach(t),jSo=r(qAe," (I-BERT model)"),qAe.forEach(t),DSo=i(D),r3=n(D,"LI",{});var NAe=s(r3);Sde=n(NAe,"STRONG",{});var _at=s(Sde);GSo=r(_at,"layoutlm"),_at.forEach(t),OSo=r(NAe," \u2014 "),yj=n(NAe,"A",{href:!0});var uat=s(yj);VSo=r(uat,"LayoutLMForTokenClassification"),uat.forEach(t),XSo=r(NAe," (LayoutLM model)"),NAe.forEach(t),zSo=i(D),t3=n(D,"LI",{});var jAe=s(t3);Rde=n(jAe,"STRONG",{});var bat=s(Rde);QSo=r(bat,"layoutlmv2"),bat.forEach(t),WSo=r(jAe," \u2014 "),Lj=n(jAe,"A",{href:!0});var vat=s(Lj);HSo=r(vat,"LayoutLMv2ForTokenClassification"),vat.forEach(t),USo=r(jAe," (LayoutLMv2 model)"),jAe.forEach(t),JSo=i(D),a3=n(D,"LI",{});var DAe=s(a3);Bde=n(DAe,"STRONG",{});var Fat=s(Bde);YSo=r(Fat,"longformer"),Fat.forEach(t),KSo=r(DAe," \u2014 "),xj=n(DAe,"A",{href:!0});var Tat=s(xj);ZSo=r(Tat,"LongformerForTokenClassification"),Tat.forEach(t),eRo=r(DAe," (Longformer model)"),DAe.forEach(t),oRo=i(D),n3=n(D,"LI",{});var GAe=s(n3);Pde=n(GAe,"STRONG",{});var Mat=s(Pde);rRo=r(Mat,"megatron-bert"),Mat.forEach(t),tRo=r(GAe," \u2014 "),kj=n(GAe,"A",{href:!0});var Eat=s(kj);aRo=r(Eat,"MegatronBertForTokenClassification"),Eat.forEach(t),nRo=r(GAe," (MegatronBert model)"),GAe.forEach(t),sRo=i(D),s3=n(D,"LI",{});var OAe=s(s3);$de=n(OAe,"STRONG",{});var Cat=s($de);lRo=r(Cat,"mobilebert"),Cat.forEach(t),iRo=r(OAe," \u2014 "),Sj=n(OAe,"A",{href:!0});var wat=s(Sj);dRo=r(wat,"MobileBertForTokenClassification"),wat.forEach(t),cRo=r(OAe," (MobileBERT model)"),OAe.forEach(t),fRo=i(D),l3=n(D,"LI",{});var VAe=s(l3);Ide=n(VAe,"STRONG",{});var Aat=s(Ide);mRo=r(Aat,"mpnet"),Aat.forEach(t),gRo=r(VAe," \u2014 "),Rj=n(VAe,"A",{href:!0});var yat=s(Rj);hRo=r(yat,"MPNetForTokenClassification"),yat.forEach(t),pRo=r(VAe," (MPNet model)"),VAe.forEach(t),_Ro=i(D),i3=n(D,"LI",{});var XAe=s(i3);qde=n(XAe,"STRONG",{});var Lat=s(qde);uRo=r(Lat,"nystromformer"),Lat.forEach(t),bRo=r(XAe," \u2014 "),Bj=n(XAe,"A",{href:!0});var xat=s(Bj);vRo=r(xat,"NystromformerForTokenClassification"),xat.forEach(t),FRo=r(XAe," (Nystromformer model)"),XAe.forEach(t),TRo=i(D),d3=n(D,"LI",{});var zAe=s(d3);Nde=n(zAe,"STRONG",{});var kat=s(Nde);MRo=r(kat,"qdqbert"),kat.forEach(t),ERo=r(zAe," \u2014 "),Pj=n(zAe,"A",{href:!0});var Sat=s(Pj);CRo=r(Sat,"QDQBertForTokenClassification"),Sat.forEach(t),wRo=r(zAe," (QDQBert model)"),zAe.forEach(t),ARo=i(D),c3=n(D,"LI",{});var QAe=s(c3);jde=n(QAe,"STRONG",{});var Rat=s(jde);yRo=r(Rat,"rembert"),Rat.forEach(t),LRo=r(QAe," \u2014 "),$j=n(QAe,"A",{href:!0});var Bat=s($j);xRo=r(Bat,"RemBertForTokenClassification"),Bat.forEach(t),kRo=r(QAe," (RemBERT model)"),QAe.forEach(t),SRo=i(D),f3=n(D,"LI",{});var WAe=s(f3);Dde=n(WAe,"STRONG",{});var Pat=s(Dde);RRo=r(Pat,"roberta"),Pat.forEach(t),BRo=r(WAe," \u2014 "),Ij=n(WAe,"A",{href:!0});var $at=s(Ij);PRo=r($at,"RobertaForTokenClassification"),$at.forEach(t),$Ro=r(WAe," (RoBERTa model)"),WAe.forEach(t),IRo=i(D),m3=n(D,"LI",{});var HAe=s(m3);Gde=n(HAe,"STRONG",{});var Iat=s(Gde);qRo=r(Iat,"roformer"),Iat.forEach(t),NRo=r(HAe," \u2014 "),qj=n(HAe,"A",{href:!0});var qat=s(qj);jRo=r(qat,"RoFormerForTokenClassification"),qat.forEach(t),DRo=r(HAe," (RoFormer model)"),HAe.forEach(t),GRo=i(D),g3=n(D,"LI",{});var UAe=s(g3);Ode=n(UAe,"STRONG",{});var Nat=s(Ode);ORo=r(Nat,"squeezebert"),Nat.forEach(t),VRo=r(UAe," \u2014 "),Nj=n(UAe,"A",{href:!0});var jat=s(Nj);XRo=r(jat,"SqueezeBertForTokenClassification"),jat.forEach(t),zRo=r(UAe," (SqueezeBERT model)"),UAe.forEach(t),QRo=i(D),h3=n(D,"LI",{});var JAe=s(h3);Vde=n(JAe,"STRONG",{});var Dat=s(Vde);WRo=r(Dat,"xlm"),Dat.forEach(t),HRo=r(JAe," \u2014 "),jj=n(JAe,"A",{href:!0});var Gat=s(jj);URo=r(Gat,"XLMForTokenClassification"),Gat.forEach(t),JRo=r(JAe," (XLM model)"),JAe.forEach(t),YRo=i(D),p3=n(D,"LI",{});var YAe=s(p3);Xde=n(YAe,"STRONG",{});var Oat=s(Xde);KRo=r(Oat,"xlm-roberta"),Oat.forEach(t),ZRo=r(YAe," \u2014 "),Dj=n(YAe,"A",{href:!0});var Vat=s(Dj);eBo=r(Vat,"XLMRobertaForTokenClassification"),Vat.forEach(t),oBo=r(YAe," (XLM-RoBERTa model)"),YAe.forEach(t),rBo=i(D),_3=n(D,"LI",{});var KAe=s(_3);zde=n(KAe,"STRONG",{});var Xat=s(zde);tBo=r(Xat,"xlm-roberta-xl"),Xat.forEach(t),aBo=r(KAe," \u2014 "),Gj=n(KAe,"A",{href:!0});var zat=s(Gj);nBo=r(zat,"XLMRobertaXLForTokenClassification"),zat.forEach(t),sBo=r(KAe," (XLM-RoBERTa-XL model)"),KAe.forEach(t),lBo=i(D),u3=n(D,"LI",{});var ZAe=s(u3);Qde=n(ZAe,"STRONG",{});var Qat=s(Qde);iBo=r(Qat,"xlnet"),Qat.forEach(t),dBo=r(ZAe," \u2014 "),Oj=n(ZAe,"A",{href:!0});var Wat=s(Oj);cBo=r(Wat,"XLNetForTokenClassification"),Wat.forEach(t),fBo=r(ZAe," (XLNet model)"),ZAe.forEach(t),mBo=i(D),b3=n(D,"LI",{});var e0e=s(b3);Wde=n(e0e,"STRONG",{});var Hat=s(Wde);gBo=r(Hat,"yoso"),Hat.forEach(t),hBo=r(e0e," \u2014 "),Vj=n(e0e,"A",{href:!0});var Uat=s(Vj);pBo=r(Uat,"YosoForTokenClassification"),Uat.forEach(t),_Bo=r(e0e," (YOSO model)"),e0e.forEach(t),D.forEach(t),uBo=i(Ht),v3=n(Ht,"P",{});var o0e=s(v3);bBo=r(o0e,"The model is set in evaluation mode by default using "),Hde=n(o0e,"CODE",{});var Jat=s(Hde);vBo=r(Jat,"model.eval()"),Jat.forEach(t),FBo=r(o0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ude=n(o0e,"CODE",{});var Yat=s(Ude);TBo=r(Yat,"model.train()"),Yat.forEach(t),o0e.forEach(t),MBo=i(Ht),Jde=n(Ht,"P",{});var Kat=s(Jde);EBo=r(Kat,"Examples:"),Kat.forEach(t),CBo=i(Ht),m(hC.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),eBe=i(c),Cd=n(c,"H2",{class:!0});var d$e=s(Cd);F3=n(d$e,"A",{id:!0,class:!0,href:!0});var Zat=s(F3);Yde=n(Zat,"SPAN",{});var ent=s(Yde);m(pC.$$.fragment,ent),ent.forEach(t),Zat.forEach(t),wBo=i(d$e),Kde=n(d$e,"SPAN",{});var ont=s(Kde);ABo=r(ont,"AutoModelForQuestionAnswering"),ont.forEach(t),d$e.forEach(t),oBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(_C.$$.fragment,ml),yBo=i(ml),wd=n(ml,"P",{});var PU=s(wd);LBo=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Xj=n(PU,"A",{href:!0});var rnt=s(Xj);xBo=r(rnt,"from_pretrained()"),rnt.forEach(t),kBo=r(PU," class method or the "),zj=n(PU,"A",{href:!0});var tnt=s(zj);SBo=r(tnt,"from_config()"),tnt.forEach(t),RBo=r(PU,` class
method.`),PU.forEach(t),BBo=i(ml),uC=n(ml,"P",{});var c$e=s(uC);PBo=r(c$e,"This class cannot be instantiated directly using "),Zde=n(c$e,"CODE",{});var ant=s(Zde);$Bo=r(ant,"__init__()"),ant.forEach(t),IBo=r(c$e," (throws an error)."),c$e.forEach(t),qBo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(bC.$$.fragment,gl),NBo=i(gl),ece=n(gl,"P",{});var nnt=s(ece);jBo=r(nnt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),nnt.forEach(t),DBo=i(gl),Ad=n(gl,"P",{});var $U=s(Ad);GBo=r($U,`Note:
Loading a model from its configuration file does `),oce=n($U,"STRONG",{});var snt=s(oce);OBo=r(snt,"not"),snt.forEach(t),VBo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qj=n($U,"A",{href:!0});var lnt=s(Qj);XBo=r(lnt,"from_pretrained()"),lnt.forEach(t),zBo=r($U," to load the model weights."),$U.forEach(t),QBo=i(gl),rce=n(gl,"P",{});var int=s(rce);WBo=r(int,"Examples:"),int.forEach(t),HBo=i(gl),m(vC.$$.fragment,gl),gl.forEach(t),UBo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(FC.$$.fragment,Ut),JBo=i(Ut),tce=n(Ut,"P",{});var dnt=s(tce);YBo=r(dnt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),dnt.forEach(t),KBo=i(Ut),Za=n(Ut,"P",{});var N4=s(Za);ZBo=r(N4,"The model class to instantiate is selected based on the "),ace=n(N4,"CODE",{});var cnt=s(ace);ePo=r(cnt,"model_type"),cnt.forEach(t),oPo=r(N4,` property of the config object (either
passed as an argument or loaded from `),nce=n(N4,"CODE",{});var fnt=s(nce);rPo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),tPo=r(N4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(N4,"CODE",{});var mnt=s(sce);aPo=r(mnt,"pretrained_model_name_or_path"),mnt.forEach(t),nPo=r(N4,":"),N4.forEach(t),sPo=i(Ut),S=n(Ut,"UL",{});var B=s(S);T3=n(B,"LI",{});var r0e=s(T3);lce=n(r0e,"STRONG",{});var gnt=s(lce);lPo=r(gnt,"albert"),gnt.forEach(t),iPo=r(r0e," \u2014 "),Wj=n(r0e,"A",{href:!0});var hnt=s(Wj);dPo=r(hnt,"AlbertForQuestionAnswering"),hnt.forEach(t),cPo=r(r0e," (ALBERT model)"),r0e.forEach(t),fPo=i(B),M3=n(B,"LI",{});var t0e=s(M3);ice=n(t0e,"STRONG",{});var pnt=s(ice);mPo=r(pnt,"bart"),pnt.forEach(t),gPo=r(t0e," \u2014 "),Hj=n(t0e,"A",{href:!0});var _nt=s(Hj);hPo=r(_nt,"BartForQuestionAnswering"),_nt.forEach(t),pPo=r(t0e," (BART model)"),t0e.forEach(t),_Po=i(B),E3=n(B,"LI",{});var a0e=s(E3);dce=n(a0e,"STRONG",{});var unt=s(dce);uPo=r(unt,"bert"),unt.forEach(t),bPo=r(a0e," \u2014 "),Uj=n(a0e,"A",{href:!0});var bnt=s(Uj);vPo=r(bnt,"BertForQuestionAnswering"),bnt.forEach(t),FPo=r(a0e," (BERT model)"),a0e.forEach(t),TPo=i(B),C3=n(B,"LI",{});var n0e=s(C3);cce=n(n0e,"STRONG",{});var vnt=s(cce);MPo=r(vnt,"big_bird"),vnt.forEach(t),EPo=r(n0e," \u2014 "),Jj=n(n0e,"A",{href:!0});var Fnt=s(Jj);CPo=r(Fnt,"BigBirdForQuestionAnswering"),Fnt.forEach(t),wPo=r(n0e," (BigBird model)"),n0e.forEach(t),APo=i(B),w3=n(B,"LI",{});var s0e=s(w3);fce=n(s0e,"STRONG",{});var Tnt=s(fce);yPo=r(Tnt,"bigbird_pegasus"),Tnt.forEach(t),LPo=r(s0e," \u2014 "),Yj=n(s0e,"A",{href:!0});var Mnt=s(Yj);xPo=r(Mnt,"BigBirdPegasusForQuestionAnswering"),Mnt.forEach(t),kPo=r(s0e," (BigBirdPegasus model)"),s0e.forEach(t),SPo=i(B),A3=n(B,"LI",{});var l0e=s(A3);mce=n(l0e,"STRONG",{});var Ent=s(mce);RPo=r(Ent,"camembert"),Ent.forEach(t),BPo=r(l0e," \u2014 "),Kj=n(l0e,"A",{href:!0});var Cnt=s(Kj);PPo=r(Cnt,"CamembertForQuestionAnswering"),Cnt.forEach(t),$Po=r(l0e," (CamemBERT model)"),l0e.forEach(t),IPo=i(B),y3=n(B,"LI",{});var i0e=s(y3);gce=n(i0e,"STRONG",{});var wnt=s(gce);qPo=r(wnt,"canine"),wnt.forEach(t),NPo=r(i0e," \u2014 "),Zj=n(i0e,"A",{href:!0});var Ant=s(Zj);jPo=r(Ant,"CanineForQuestionAnswering"),Ant.forEach(t),DPo=r(i0e," (Canine model)"),i0e.forEach(t),GPo=i(B),L3=n(B,"LI",{});var d0e=s(L3);hce=n(d0e,"STRONG",{});var ynt=s(hce);OPo=r(ynt,"convbert"),ynt.forEach(t),VPo=r(d0e," \u2014 "),eD=n(d0e,"A",{href:!0});var Lnt=s(eD);XPo=r(Lnt,"ConvBertForQuestionAnswering"),Lnt.forEach(t),zPo=r(d0e," (ConvBERT model)"),d0e.forEach(t),QPo=i(B),x3=n(B,"LI",{});var c0e=s(x3);pce=n(c0e,"STRONG",{});var xnt=s(pce);WPo=r(xnt,"data2vec-text"),xnt.forEach(t),HPo=r(c0e," \u2014 "),oD=n(c0e,"A",{href:!0});var knt=s(oD);UPo=r(knt,"Data2VecTextForQuestionAnswering"),knt.forEach(t),JPo=r(c0e," (Data2VecText model)"),c0e.forEach(t),YPo=i(B),k3=n(B,"LI",{});var f0e=s(k3);_ce=n(f0e,"STRONG",{});var Snt=s(_ce);KPo=r(Snt,"deberta"),Snt.forEach(t),ZPo=r(f0e," \u2014 "),rD=n(f0e,"A",{href:!0});var Rnt=s(rD);e$o=r(Rnt,"DebertaForQuestionAnswering"),Rnt.forEach(t),o$o=r(f0e," (DeBERTa model)"),f0e.forEach(t),r$o=i(B),S3=n(B,"LI",{});var m0e=s(S3);uce=n(m0e,"STRONG",{});var Bnt=s(uce);t$o=r(Bnt,"deberta-v2"),Bnt.forEach(t),a$o=r(m0e," \u2014 "),tD=n(m0e,"A",{href:!0});var Pnt=s(tD);n$o=r(Pnt,"DebertaV2ForQuestionAnswering"),Pnt.forEach(t),s$o=r(m0e," (DeBERTa-v2 model)"),m0e.forEach(t),l$o=i(B),R3=n(B,"LI",{});var g0e=s(R3);bce=n(g0e,"STRONG",{});var $nt=s(bce);i$o=r($nt,"distilbert"),$nt.forEach(t),d$o=r(g0e," \u2014 "),aD=n(g0e,"A",{href:!0});var Int=s(aD);c$o=r(Int,"DistilBertForQuestionAnswering"),Int.forEach(t),f$o=r(g0e," (DistilBERT model)"),g0e.forEach(t),m$o=i(B),B3=n(B,"LI",{});var h0e=s(B3);vce=n(h0e,"STRONG",{});var qnt=s(vce);g$o=r(qnt,"electra"),qnt.forEach(t),h$o=r(h0e," \u2014 "),nD=n(h0e,"A",{href:!0});var Nnt=s(nD);p$o=r(Nnt,"ElectraForQuestionAnswering"),Nnt.forEach(t),_$o=r(h0e," (ELECTRA model)"),h0e.forEach(t),u$o=i(B),P3=n(B,"LI",{});var p0e=s(P3);Fce=n(p0e,"STRONG",{});var jnt=s(Fce);b$o=r(jnt,"flaubert"),jnt.forEach(t),v$o=r(p0e," \u2014 "),sD=n(p0e,"A",{href:!0});var Dnt=s(sD);F$o=r(Dnt,"FlaubertForQuestionAnsweringSimple"),Dnt.forEach(t),T$o=r(p0e," (FlauBERT model)"),p0e.forEach(t),M$o=i(B),$3=n(B,"LI",{});var _0e=s($3);Tce=n(_0e,"STRONG",{});var Gnt=s(Tce);E$o=r(Gnt,"fnet"),Gnt.forEach(t),C$o=r(_0e," \u2014 "),lD=n(_0e,"A",{href:!0});var Ont=s(lD);w$o=r(Ont,"FNetForQuestionAnswering"),Ont.forEach(t),A$o=r(_0e," (FNet model)"),_0e.forEach(t),y$o=i(B),I3=n(B,"LI",{});var u0e=s(I3);Mce=n(u0e,"STRONG",{});var Vnt=s(Mce);L$o=r(Vnt,"funnel"),Vnt.forEach(t),x$o=r(u0e," \u2014 "),iD=n(u0e,"A",{href:!0});var Xnt=s(iD);k$o=r(Xnt,"FunnelForQuestionAnswering"),Xnt.forEach(t),S$o=r(u0e," (Funnel Transformer model)"),u0e.forEach(t),R$o=i(B),q3=n(B,"LI",{});var b0e=s(q3);Ece=n(b0e,"STRONG",{});var znt=s(Ece);B$o=r(znt,"gptj"),znt.forEach(t),P$o=r(b0e," \u2014 "),dD=n(b0e,"A",{href:!0});var Qnt=s(dD);$$o=r(Qnt,"GPTJForQuestionAnswering"),Qnt.forEach(t),I$o=r(b0e," (GPT-J model)"),b0e.forEach(t),q$o=i(B),N3=n(B,"LI",{});var v0e=s(N3);Cce=n(v0e,"STRONG",{});var Wnt=s(Cce);N$o=r(Wnt,"ibert"),Wnt.forEach(t),j$o=r(v0e," \u2014 "),cD=n(v0e,"A",{href:!0});var Hnt=s(cD);D$o=r(Hnt,"IBertForQuestionAnswering"),Hnt.forEach(t),G$o=r(v0e," (I-BERT model)"),v0e.forEach(t),O$o=i(B),j3=n(B,"LI",{});var F0e=s(j3);wce=n(F0e,"STRONG",{});var Unt=s(wce);V$o=r(Unt,"layoutlmv2"),Unt.forEach(t),X$o=r(F0e," \u2014 "),fD=n(F0e,"A",{href:!0});var Jnt=s(fD);z$o=r(Jnt,"LayoutLMv2ForQuestionAnswering"),Jnt.forEach(t),Q$o=r(F0e," (LayoutLMv2 model)"),F0e.forEach(t),W$o=i(B),D3=n(B,"LI",{});var T0e=s(D3);Ace=n(T0e,"STRONG",{});var Ynt=s(Ace);H$o=r(Ynt,"led"),Ynt.forEach(t),U$o=r(T0e," \u2014 "),mD=n(T0e,"A",{href:!0});var Knt=s(mD);J$o=r(Knt,"LEDForQuestionAnswering"),Knt.forEach(t),Y$o=r(T0e," (LED model)"),T0e.forEach(t),K$o=i(B),G3=n(B,"LI",{});var M0e=s(G3);yce=n(M0e,"STRONG",{});var Znt=s(yce);Z$o=r(Znt,"longformer"),Znt.forEach(t),eIo=r(M0e," \u2014 "),gD=n(M0e,"A",{href:!0});var est=s(gD);oIo=r(est,"LongformerForQuestionAnswering"),est.forEach(t),rIo=r(M0e," (Longformer model)"),M0e.forEach(t),tIo=i(B),O3=n(B,"LI",{});var E0e=s(O3);Lce=n(E0e,"STRONG",{});var ost=s(Lce);aIo=r(ost,"lxmert"),ost.forEach(t),nIo=r(E0e," \u2014 "),hD=n(E0e,"A",{href:!0});var rst=s(hD);sIo=r(rst,"LxmertForQuestionAnswering"),rst.forEach(t),lIo=r(E0e," (LXMERT model)"),E0e.forEach(t),iIo=i(B),V3=n(B,"LI",{});var C0e=s(V3);xce=n(C0e,"STRONG",{});var tst=s(xce);dIo=r(tst,"mbart"),tst.forEach(t),cIo=r(C0e," \u2014 "),pD=n(C0e,"A",{href:!0});var ast=s(pD);fIo=r(ast,"MBartForQuestionAnswering"),ast.forEach(t),mIo=r(C0e," (mBART model)"),C0e.forEach(t),gIo=i(B),X3=n(B,"LI",{});var w0e=s(X3);kce=n(w0e,"STRONG",{});var nst=s(kce);hIo=r(nst,"megatron-bert"),nst.forEach(t),pIo=r(w0e," \u2014 "),_D=n(w0e,"A",{href:!0});var sst=s(_D);_Io=r(sst,"MegatronBertForQuestionAnswering"),sst.forEach(t),uIo=r(w0e," (MegatronBert model)"),w0e.forEach(t),bIo=i(B),z3=n(B,"LI",{});var A0e=s(z3);Sce=n(A0e,"STRONG",{});var lst=s(Sce);vIo=r(lst,"mobilebert"),lst.forEach(t),FIo=r(A0e," \u2014 "),uD=n(A0e,"A",{href:!0});var ist=s(uD);TIo=r(ist,"MobileBertForQuestionAnswering"),ist.forEach(t),MIo=r(A0e," (MobileBERT model)"),A0e.forEach(t),EIo=i(B),Q3=n(B,"LI",{});var y0e=s(Q3);Rce=n(y0e,"STRONG",{});var dst=s(Rce);CIo=r(dst,"mpnet"),dst.forEach(t),wIo=r(y0e," \u2014 "),bD=n(y0e,"A",{href:!0});var cst=s(bD);AIo=r(cst,"MPNetForQuestionAnswering"),cst.forEach(t),yIo=r(y0e," (MPNet model)"),y0e.forEach(t),LIo=i(B),W3=n(B,"LI",{});var L0e=s(W3);Bce=n(L0e,"STRONG",{});var fst=s(Bce);xIo=r(fst,"nystromformer"),fst.forEach(t),kIo=r(L0e," \u2014 "),vD=n(L0e,"A",{href:!0});var mst=s(vD);SIo=r(mst,"NystromformerForQuestionAnswering"),mst.forEach(t),RIo=r(L0e," (Nystromformer model)"),L0e.forEach(t),BIo=i(B),H3=n(B,"LI",{});var x0e=s(H3);Pce=n(x0e,"STRONG",{});var gst=s(Pce);PIo=r(gst,"qdqbert"),gst.forEach(t),$Io=r(x0e," \u2014 "),FD=n(x0e,"A",{href:!0});var hst=s(FD);IIo=r(hst,"QDQBertForQuestionAnswering"),hst.forEach(t),qIo=r(x0e," (QDQBert model)"),x0e.forEach(t),NIo=i(B),U3=n(B,"LI",{});var k0e=s(U3);$ce=n(k0e,"STRONG",{});var pst=s($ce);jIo=r(pst,"reformer"),pst.forEach(t),DIo=r(k0e," \u2014 "),TD=n(k0e,"A",{href:!0});var _st=s(TD);GIo=r(_st,"ReformerForQuestionAnswering"),_st.forEach(t),OIo=r(k0e," (Reformer model)"),k0e.forEach(t),VIo=i(B),J3=n(B,"LI",{});var S0e=s(J3);Ice=n(S0e,"STRONG",{});var ust=s(Ice);XIo=r(ust,"rembert"),ust.forEach(t),zIo=r(S0e," \u2014 "),MD=n(S0e,"A",{href:!0});var bst=s(MD);QIo=r(bst,"RemBertForQuestionAnswering"),bst.forEach(t),WIo=r(S0e," (RemBERT model)"),S0e.forEach(t),HIo=i(B),Y3=n(B,"LI",{});var R0e=s(Y3);qce=n(R0e,"STRONG",{});var vst=s(qce);UIo=r(vst,"roberta"),vst.forEach(t),JIo=r(R0e," \u2014 "),ED=n(R0e,"A",{href:!0});var Fst=s(ED);YIo=r(Fst,"RobertaForQuestionAnswering"),Fst.forEach(t),KIo=r(R0e," (RoBERTa model)"),R0e.forEach(t),ZIo=i(B),K3=n(B,"LI",{});var B0e=s(K3);Nce=n(B0e,"STRONG",{});var Tst=s(Nce);eqo=r(Tst,"roformer"),Tst.forEach(t),oqo=r(B0e," \u2014 "),CD=n(B0e,"A",{href:!0});var Mst=s(CD);rqo=r(Mst,"RoFormerForQuestionAnswering"),Mst.forEach(t),tqo=r(B0e," (RoFormer model)"),B0e.forEach(t),aqo=i(B),Z3=n(B,"LI",{});var P0e=s(Z3);jce=n(P0e,"STRONG",{});var Est=s(jce);nqo=r(Est,"splinter"),Est.forEach(t),sqo=r(P0e," \u2014 "),wD=n(P0e,"A",{href:!0});var Cst=s(wD);lqo=r(Cst,"SplinterForQuestionAnswering"),Cst.forEach(t),iqo=r(P0e," (Splinter model)"),P0e.forEach(t),dqo=i(B),e6=n(B,"LI",{});var $0e=s(e6);Dce=n($0e,"STRONG",{});var wst=s(Dce);cqo=r(wst,"squeezebert"),wst.forEach(t),fqo=r($0e," \u2014 "),AD=n($0e,"A",{href:!0});var Ast=s(AD);mqo=r(Ast,"SqueezeBertForQuestionAnswering"),Ast.forEach(t),gqo=r($0e," (SqueezeBERT model)"),$0e.forEach(t),hqo=i(B),o6=n(B,"LI",{});var I0e=s(o6);Gce=n(I0e,"STRONG",{});var yst=s(Gce);pqo=r(yst,"xlm"),yst.forEach(t),_qo=r(I0e," \u2014 "),yD=n(I0e,"A",{href:!0});var Lst=s(yD);uqo=r(Lst,"XLMForQuestionAnsweringSimple"),Lst.forEach(t),bqo=r(I0e," (XLM model)"),I0e.forEach(t),vqo=i(B),r6=n(B,"LI",{});var q0e=s(r6);Oce=n(q0e,"STRONG",{});var xst=s(Oce);Fqo=r(xst,"xlm-roberta"),xst.forEach(t),Tqo=r(q0e," \u2014 "),LD=n(q0e,"A",{href:!0});var kst=s(LD);Mqo=r(kst,"XLMRobertaForQuestionAnswering"),kst.forEach(t),Eqo=r(q0e," (XLM-RoBERTa model)"),q0e.forEach(t),Cqo=i(B),t6=n(B,"LI",{});var N0e=s(t6);Vce=n(N0e,"STRONG",{});var Sst=s(Vce);wqo=r(Sst,"xlm-roberta-xl"),Sst.forEach(t),Aqo=r(N0e," \u2014 "),xD=n(N0e,"A",{href:!0});var Rst=s(xD);yqo=r(Rst,"XLMRobertaXLForQuestionAnswering"),Rst.forEach(t),Lqo=r(N0e," (XLM-RoBERTa-XL model)"),N0e.forEach(t),xqo=i(B),a6=n(B,"LI",{});var j0e=s(a6);Xce=n(j0e,"STRONG",{});var Bst=s(Xce);kqo=r(Bst,"xlnet"),Bst.forEach(t),Sqo=r(j0e," \u2014 "),kD=n(j0e,"A",{href:!0});var Pst=s(kD);Rqo=r(Pst,"XLNetForQuestionAnsweringSimple"),Pst.forEach(t),Bqo=r(j0e," (XLNet model)"),j0e.forEach(t),Pqo=i(B),n6=n(B,"LI",{});var D0e=s(n6);zce=n(D0e,"STRONG",{});var $st=s(zce);$qo=r($st,"yoso"),$st.forEach(t),Iqo=r(D0e," \u2014 "),SD=n(D0e,"A",{href:!0});var Ist=s(SD);qqo=r(Ist,"YosoForQuestionAnswering"),Ist.forEach(t),Nqo=r(D0e," (YOSO model)"),D0e.forEach(t),B.forEach(t),jqo=i(Ut),s6=n(Ut,"P",{});var G0e=s(s6);Dqo=r(G0e,"The model is set in evaluation mode by default using "),Qce=n(G0e,"CODE",{});var qst=s(Qce);Gqo=r(qst,"model.eval()"),qst.forEach(t),Oqo=r(G0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wce=n(G0e,"CODE",{});var Nst=s(Wce);Vqo=r(Nst,"model.train()"),Nst.forEach(t),G0e.forEach(t),Xqo=i(Ut),Hce=n(Ut,"P",{});var jst=s(Hce);zqo=r(jst,"Examples:"),jst.forEach(t),Qqo=i(Ut),m(TC.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),rBe=i(c),yd=n(c,"H2",{class:!0});var f$e=s(yd);l6=n(f$e,"A",{id:!0,class:!0,href:!0});var Dst=s(l6);Uce=n(Dst,"SPAN",{});var Gst=s(Uce);m(MC.$$.fragment,Gst),Gst.forEach(t),Dst.forEach(t),Wqo=i(f$e),Jce=n(f$e,"SPAN",{});var Ost=s(Jce);Hqo=r(Ost,"AutoModelForTableQuestionAnswering"),Ost.forEach(t),f$e.forEach(t),tBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(EC.$$.fragment,hl),Uqo=i(hl),Ld=n(hl,"P",{});var IU=s(Ld);Jqo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),RD=n(IU,"A",{href:!0});var Vst=s(RD);Yqo=r(Vst,"from_pretrained()"),Vst.forEach(t),Kqo=r(IU," class method or the "),BD=n(IU,"A",{href:!0});var Xst=s(BD);Zqo=r(Xst,"from_config()"),Xst.forEach(t),eNo=r(IU,` class
method.`),IU.forEach(t),oNo=i(hl),CC=n(hl,"P",{});var m$e=s(CC);rNo=r(m$e,"This class cannot be instantiated directly using "),Yce=n(m$e,"CODE",{});var zst=s(Yce);tNo=r(zst,"__init__()"),zst.forEach(t),aNo=r(m$e," (throws an error)."),m$e.forEach(t),nNo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(wC.$$.fragment,pl),sNo=i(pl),Kce=n(pl,"P",{});var Qst=s(Kce);lNo=r(Qst,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qst.forEach(t),iNo=i(pl),xd=n(pl,"P",{});var qU=s(xd);dNo=r(qU,`Note:
Loading a model from its configuration file does `),Zce=n(qU,"STRONG",{});var Wst=s(Zce);cNo=r(Wst,"not"),Wst.forEach(t),fNo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(qU,"A",{href:!0});var Hst=s(PD);mNo=r(Hst,"from_pretrained()"),Hst.forEach(t),gNo=r(qU," to load the model weights."),qU.forEach(t),hNo=i(pl),efe=n(pl,"P",{});var Ust=s(efe);pNo=r(Ust,"Examples:"),Ust.forEach(t),_No=i(pl),m(AC.$$.fragment,pl),pl.forEach(t),uNo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(yC.$$.fragment,Jt),bNo=i(Jt),ofe=n(Jt,"P",{});var Jst=s(ofe);vNo=r(Jst,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Jst.forEach(t),FNo=i(Jt),en=n(Jt,"P",{});var j4=s(en);TNo=r(j4,"The model class to instantiate is selected based on the "),rfe=n(j4,"CODE",{});var Yst=s(rfe);MNo=r(Yst,"model_type"),Yst.forEach(t),ENo=r(j4,` property of the config object (either
passed as an argument or loaded from `),tfe=n(j4,"CODE",{});var Kst=s(tfe);CNo=r(Kst,"pretrained_model_name_or_path"),Kst.forEach(t),wNo=r(j4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),afe=n(j4,"CODE",{});var Zst=s(afe);ANo=r(Zst,"pretrained_model_name_or_path"),Zst.forEach(t),yNo=r(j4,":"),j4.forEach(t),LNo=i(Jt),nfe=n(Jt,"UL",{});var elt=s(nfe);i6=n(elt,"LI",{});var O0e=s(i6);sfe=n(O0e,"STRONG",{});var olt=s(sfe);xNo=r(olt,"tapas"),olt.forEach(t),kNo=r(O0e," \u2014 "),$D=n(O0e,"A",{href:!0});var rlt=s($D);SNo=r(rlt,"TapasForQuestionAnswering"),rlt.forEach(t),RNo=r(O0e," (TAPAS model)"),O0e.forEach(t),elt.forEach(t),BNo=i(Jt),d6=n(Jt,"P",{});var V0e=s(d6);PNo=r(V0e,"The model is set in evaluation mode by default using "),lfe=n(V0e,"CODE",{});var tlt=s(lfe);$No=r(tlt,"model.eval()"),tlt.forEach(t),INo=r(V0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(V0e,"CODE",{});var alt=s(ife);qNo=r(alt,"model.train()"),alt.forEach(t),V0e.forEach(t),NNo=i(Jt),dfe=n(Jt,"P",{});var nlt=s(dfe);jNo=r(nlt,"Examples:"),nlt.forEach(t),DNo=i(Jt),m(LC.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),aBe=i(c),kd=n(c,"H2",{class:!0});var g$e=s(kd);c6=n(g$e,"A",{id:!0,class:!0,href:!0});var slt=s(c6);cfe=n(slt,"SPAN",{});var llt=s(cfe);m(xC.$$.fragment,llt),llt.forEach(t),slt.forEach(t),GNo=i(g$e),ffe=n(g$e,"SPAN",{});var ilt=s(ffe);ONo=r(ilt,"AutoModelForImageClassification"),ilt.forEach(t),g$e.forEach(t),nBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(kC.$$.fragment,_l),VNo=i(_l),Sd=n(_l,"P",{});var NU=s(Sd);XNo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ID=n(NU,"A",{href:!0});var dlt=s(ID);zNo=r(dlt,"from_pretrained()"),dlt.forEach(t),QNo=r(NU," class method or the "),qD=n(NU,"A",{href:!0});var clt=s(qD);WNo=r(clt,"from_config()"),clt.forEach(t),HNo=r(NU,` class
method.`),NU.forEach(t),UNo=i(_l),SC=n(_l,"P",{});var h$e=s(SC);JNo=r(h$e,"This class cannot be instantiated directly using "),mfe=n(h$e,"CODE",{});var flt=s(mfe);YNo=r(flt,"__init__()"),flt.forEach(t),KNo=r(h$e," (throws an error)."),h$e.forEach(t),ZNo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(RC.$$.fragment,ul),ejo=i(ul),gfe=n(ul,"P",{});var mlt=s(gfe);ojo=r(mlt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mlt.forEach(t),rjo=i(ul),Rd=n(ul,"P",{});var jU=s(Rd);tjo=r(jU,`Note:
Loading a model from its configuration file does `),hfe=n(jU,"STRONG",{});var glt=s(hfe);ajo=r(glt,"not"),glt.forEach(t),njo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(jU,"A",{href:!0});var hlt=s(ND);sjo=r(hlt,"from_pretrained()"),hlt.forEach(t),ljo=r(jU," to load the model weights."),jU.forEach(t),ijo=i(ul),pfe=n(ul,"P",{});var plt=s(pfe);djo=r(plt,"Examples:"),plt.forEach(t),cjo=i(ul),m(BC.$$.fragment,ul),ul.forEach(t),fjo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(PC.$$.fragment,Yt),mjo=i(Yt),_fe=n(Yt,"P",{});var _lt=s(_fe);gjo=r(_lt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_lt.forEach(t),hjo=i(Yt),on=n(Yt,"P",{});var D4=s(on);pjo=r(D4,"The model class to instantiate is selected based on the "),ufe=n(D4,"CODE",{});var ult=s(ufe);_jo=r(ult,"model_type"),ult.forEach(t),ujo=r(D4,` property of the config object (either
passed as an argument or loaded from `),bfe=n(D4,"CODE",{});var blt=s(bfe);bjo=r(blt,"pretrained_model_name_or_path"),blt.forEach(t),vjo=r(D4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(D4,"CODE",{});var vlt=s(vfe);Fjo=r(vlt,"pretrained_model_name_or_path"),vlt.forEach(t),Tjo=r(D4,":"),D4.forEach(t),Mjo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);f6=n(ge,"LI",{});var X0e=s(f6);Ffe=n(X0e,"STRONG",{});var Flt=s(Ffe);Ejo=r(Flt,"beit"),Flt.forEach(t),Cjo=r(X0e," \u2014 "),jD=n(X0e,"A",{href:!0});var Tlt=s(jD);wjo=r(Tlt,"BeitForImageClassification"),Tlt.forEach(t),Ajo=r(X0e," (BEiT model)"),X0e.forEach(t),yjo=i(ge),m6=n(ge,"LI",{});var z0e=s(m6);Tfe=n(z0e,"STRONG",{});var Mlt=s(Tfe);Ljo=r(Mlt,"convnext"),Mlt.forEach(t),xjo=r(z0e," \u2014 "),DD=n(z0e,"A",{href:!0});var Elt=s(DD);kjo=r(Elt,"ConvNextForImageClassification"),Elt.forEach(t),Sjo=r(z0e," (ConvNext model)"),z0e.forEach(t),Rjo=i(ge),g6=n(ge,"LI",{});var Q0e=s(g6);Mfe=n(Q0e,"STRONG",{});var Clt=s(Mfe);Bjo=r(Clt,"data2vec-vision"),Clt.forEach(t),Pjo=r(Q0e," \u2014 "),GD=n(Q0e,"A",{href:!0});var wlt=s(GD);$jo=r(wlt,"Data2VecVisionForImageClassification"),wlt.forEach(t),Ijo=r(Q0e," (Data2VecVision model)"),Q0e.forEach(t),qjo=i(ge),Gs=n(ge,"LI",{});var _7=s(Gs);Efe=n(_7,"STRONG",{});var Alt=s(Efe);Njo=r(Alt,"deit"),Alt.forEach(t),jjo=r(_7," \u2014 "),OD=n(_7,"A",{href:!0});var ylt=s(OD);Djo=r(ylt,"DeiTForImageClassification"),ylt.forEach(t),Gjo=r(_7," or "),VD=n(_7,"A",{href:!0});var Llt=s(VD);Ojo=r(Llt,"DeiTForImageClassificationWithTeacher"),Llt.forEach(t),Vjo=r(_7," (DeiT model)"),_7.forEach(t),Xjo=i(ge),h6=n(ge,"LI",{});var W0e=s(h6);Cfe=n(W0e,"STRONG",{});var xlt=s(Cfe);zjo=r(xlt,"imagegpt"),xlt.forEach(t),Qjo=r(W0e," \u2014 "),XD=n(W0e,"A",{href:!0});var klt=s(XD);Wjo=r(klt,"ImageGPTForImageClassification"),klt.forEach(t),Hjo=r(W0e," (ImageGPT model)"),W0e.forEach(t),Ujo=i(ge),ma=n(ge,"LI",{});var $f=s(ma);wfe=n($f,"STRONG",{});var Slt=s(wfe);Jjo=r(Slt,"perceiver"),Slt.forEach(t),Yjo=r($f," \u2014 "),zD=n($f,"A",{href:!0});var Rlt=s(zD);Kjo=r(Rlt,"PerceiverForImageClassificationLearned"),Rlt.forEach(t),Zjo=r($f," or "),QD=n($f,"A",{href:!0});var Blt=s(QD);eDo=r(Blt,"PerceiverForImageClassificationFourier"),Blt.forEach(t),oDo=r($f," or "),WD=n($f,"A",{href:!0});var Plt=s(WD);rDo=r(Plt,"PerceiverForImageClassificationConvProcessing"),Plt.forEach(t),tDo=r($f," (Perceiver model)"),$f.forEach(t),aDo=i(ge),p6=n(ge,"LI",{});var H0e=s(p6);Afe=n(H0e,"STRONG",{});var $lt=s(Afe);nDo=r($lt,"poolformer"),$lt.forEach(t),sDo=r(H0e," \u2014 "),HD=n(H0e,"A",{href:!0});var Ilt=s(HD);lDo=r(Ilt,"PoolFormerForImageClassification"),Ilt.forEach(t),iDo=r(H0e," (PoolFormer model)"),H0e.forEach(t),dDo=i(ge),_6=n(ge,"LI",{});var U0e=s(_6);yfe=n(U0e,"STRONG",{});var qlt=s(yfe);cDo=r(qlt,"regnet"),qlt.forEach(t),fDo=r(U0e," \u2014 "),UD=n(U0e,"A",{href:!0});var Nlt=s(UD);mDo=r(Nlt,"RegNetForImageClassification"),Nlt.forEach(t),gDo=r(U0e," (RegNet model)"),U0e.forEach(t),hDo=i(ge),u6=n(ge,"LI",{});var J0e=s(u6);Lfe=n(J0e,"STRONG",{});var jlt=s(Lfe);pDo=r(jlt,"resnet"),jlt.forEach(t),_Do=r(J0e," \u2014 "),JD=n(J0e,"A",{href:!0});var Dlt=s(JD);uDo=r(Dlt,"ResNetForImageClassification"),Dlt.forEach(t),bDo=r(J0e," (ResNet model)"),J0e.forEach(t),vDo=i(ge),b6=n(ge,"LI",{});var Y0e=s(b6);xfe=n(Y0e,"STRONG",{});var Glt=s(xfe);FDo=r(Glt,"segformer"),Glt.forEach(t),TDo=r(Y0e," \u2014 "),YD=n(Y0e,"A",{href:!0});var Olt=s(YD);MDo=r(Olt,"SegformerForImageClassification"),Olt.forEach(t),EDo=r(Y0e," (SegFormer model)"),Y0e.forEach(t),CDo=i(ge),v6=n(ge,"LI",{});var K0e=s(v6);kfe=n(K0e,"STRONG",{});var Vlt=s(kfe);wDo=r(Vlt,"swin"),Vlt.forEach(t),ADo=r(K0e," \u2014 "),KD=n(K0e,"A",{href:!0});var Xlt=s(KD);yDo=r(Xlt,"SwinForImageClassification"),Xlt.forEach(t),LDo=r(K0e," (Swin model)"),K0e.forEach(t),xDo=i(ge),F6=n(ge,"LI",{});var Z0e=s(F6);Sfe=n(Z0e,"STRONG",{});var zlt=s(Sfe);kDo=r(zlt,"van"),zlt.forEach(t),SDo=r(Z0e," \u2014 "),ZD=n(Z0e,"A",{href:!0});var Qlt=s(ZD);RDo=r(Qlt,"VanForImageClassification"),Qlt.forEach(t),BDo=r(Z0e," (VAN model)"),Z0e.forEach(t),PDo=i(ge),T6=n(ge,"LI",{});var eye=s(T6);Rfe=n(eye,"STRONG",{});var Wlt=s(Rfe);$Do=r(Wlt,"vit"),Wlt.forEach(t),IDo=r(eye," \u2014 "),eG=n(eye,"A",{href:!0});var Hlt=s(eG);qDo=r(Hlt,"ViTForImageClassification"),Hlt.forEach(t),NDo=r(eye," (ViT model)"),eye.forEach(t),ge.forEach(t),jDo=i(Yt),M6=n(Yt,"P",{});var oye=s(M6);DDo=r(oye,"The model is set in evaluation mode by default using "),Bfe=n(oye,"CODE",{});var Ult=s(Bfe);GDo=r(Ult,"model.eval()"),Ult.forEach(t),ODo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pfe=n(oye,"CODE",{});var Jlt=s(Pfe);VDo=r(Jlt,"model.train()"),Jlt.forEach(t),oye.forEach(t),XDo=i(Yt),$fe=n(Yt,"P",{});var Ylt=s($fe);zDo=r(Ylt,"Examples:"),Ylt.forEach(t),QDo=i(Yt),m($C.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),sBe=i(c),Bd=n(c,"H2",{class:!0});var p$e=s(Bd);E6=n(p$e,"A",{id:!0,class:!0,href:!0});var Klt=s(E6);Ife=n(Klt,"SPAN",{});var Zlt=s(Ife);m(IC.$$.fragment,Zlt),Zlt.forEach(t),Klt.forEach(t),WDo=i(p$e),qfe=n(p$e,"SPAN",{});var eit=s(qfe);HDo=r(eit,"AutoModelForVision2Seq"),eit.forEach(t),p$e.forEach(t),lBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(qC.$$.fragment,bl),UDo=i(bl),Pd=n(bl,"P",{});var DU=s(Pd);JDo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),oG=n(DU,"A",{href:!0});var oit=s(oG);YDo=r(oit,"from_pretrained()"),oit.forEach(t),KDo=r(DU," class method or the "),rG=n(DU,"A",{href:!0});var rit=s(rG);ZDo=r(rit,"from_config()"),rit.forEach(t),eGo=r(DU,` class
method.`),DU.forEach(t),oGo=i(bl),NC=n(bl,"P",{});var _$e=s(NC);rGo=r(_$e,"This class cannot be instantiated directly using "),Nfe=n(_$e,"CODE",{});var tit=s(Nfe);tGo=r(tit,"__init__()"),tit.forEach(t),aGo=r(_$e," (throws an error)."),_$e.forEach(t),nGo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(jC.$$.fragment,vl),sGo=i(vl),jfe=n(vl,"P",{});var ait=s(jfe);lGo=r(ait,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ait.forEach(t),iGo=i(vl),$d=n(vl,"P",{});var GU=s($d);dGo=r(GU,`Note:
Loading a model from its configuration file does `),Dfe=n(GU,"STRONG",{});var nit=s(Dfe);cGo=r(nit,"not"),nit.forEach(t),fGo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),tG=n(GU,"A",{href:!0});var sit=s(tG);mGo=r(sit,"from_pretrained()"),sit.forEach(t),gGo=r(GU," to load the model weights."),GU.forEach(t),hGo=i(vl),Gfe=n(vl,"P",{});var lit=s(Gfe);pGo=r(lit,"Examples:"),lit.forEach(t),_Go=i(vl),m(DC.$$.fragment,vl),vl.forEach(t),uGo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(GC.$$.fragment,Kt),bGo=i(Kt),Ofe=n(Kt,"P",{});var iit=s(Ofe);vGo=r(iit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),iit.forEach(t),FGo=i(Kt),rn=n(Kt,"P",{});var G4=s(rn);TGo=r(G4,"The model class to instantiate is selected based on the "),Vfe=n(G4,"CODE",{});var dit=s(Vfe);MGo=r(dit,"model_type"),dit.forEach(t),EGo=r(G4,` property of the config object (either
passed as an argument or loaded from `),Xfe=n(G4,"CODE",{});var cit=s(Xfe);CGo=r(cit,"pretrained_model_name_or_path"),cit.forEach(t),wGo=r(G4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(G4,"CODE",{});var fit=s(zfe);AGo=r(fit,"pretrained_model_name_or_path"),fit.forEach(t),yGo=r(G4,":"),G4.forEach(t),LGo=i(Kt),Qfe=n(Kt,"UL",{});var mit=s(Qfe);C6=n(mit,"LI",{});var rye=s(C6);Wfe=n(rye,"STRONG",{});var git=s(Wfe);xGo=r(git,"vision-encoder-decoder"),git.forEach(t),kGo=r(rye," \u2014 "),aG=n(rye,"A",{href:!0});var hit=s(aG);SGo=r(hit,"VisionEncoderDecoderModel"),hit.forEach(t),RGo=r(rye," (Vision Encoder decoder model)"),rye.forEach(t),mit.forEach(t),BGo=i(Kt),w6=n(Kt,"P",{});var tye=s(w6);PGo=r(tye,"The model is set in evaluation mode by default using "),Hfe=n(tye,"CODE",{});var pit=s(Hfe);$Go=r(pit,"model.eval()"),pit.forEach(t),IGo=r(tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(tye,"CODE",{});var _it=s(Ufe);qGo=r(_it,"model.train()"),_it.forEach(t),tye.forEach(t),NGo=i(Kt),Jfe=n(Kt,"P",{});var uit=s(Jfe);jGo=r(uit,"Examples:"),uit.forEach(t),DGo=i(Kt),m(OC.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),iBe=i(c),Id=n(c,"H2",{class:!0});var u$e=s(Id);A6=n(u$e,"A",{id:!0,class:!0,href:!0});var bit=s(A6);Yfe=n(bit,"SPAN",{});var vit=s(Yfe);m(VC.$$.fragment,vit),vit.forEach(t),bit.forEach(t),GGo=i(u$e),Kfe=n(u$e,"SPAN",{});var Fit=s(Kfe);OGo=r(Fit,"AutoModelForAudioClassification"),Fit.forEach(t),u$e.forEach(t),dBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(XC.$$.fragment,Fl),VGo=i(Fl),qd=n(Fl,"P",{});var OU=s(qd);XGo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),nG=n(OU,"A",{href:!0});var Tit=s(nG);zGo=r(Tit,"from_pretrained()"),Tit.forEach(t),QGo=r(OU," class method or the "),sG=n(OU,"A",{href:!0});var Mit=s(sG);WGo=r(Mit,"from_config()"),Mit.forEach(t),HGo=r(OU,` class
method.`),OU.forEach(t),UGo=i(Fl),zC=n(Fl,"P",{});var b$e=s(zC);JGo=r(b$e,"This class cannot be instantiated directly using "),Zfe=n(b$e,"CODE",{});var Eit=s(Zfe);YGo=r(Eit,"__init__()"),Eit.forEach(t),KGo=r(b$e," (throws an error)."),b$e.forEach(t),ZGo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Tl=s(tt);m(QC.$$.fragment,Tl),eOo=i(Tl),eme=n(Tl,"P",{});var Cit=s(eme);oOo=r(Cit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Cit.forEach(t),rOo=i(Tl),Nd=n(Tl,"P",{});var VU=s(Nd);tOo=r(VU,`Note:
Loading a model from its configuration file does `),ome=n(VU,"STRONG",{});var wit=s(ome);aOo=r(wit,"not"),wit.forEach(t),nOo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(VU,"A",{href:!0});var Ait=s(lG);sOo=r(Ait,"from_pretrained()"),Ait.forEach(t),lOo=r(VU," to load the model weights."),VU.forEach(t),iOo=i(Tl),rme=n(Tl,"P",{});var yit=s(rme);dOo=r(yit,"Examples:"),yit.forEach(t),cOo=i(Tl),m(WC.$$.fragment,Tl),Tl.forEach(t),fOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(HC.$$.fragment,Zt),mOo=i(Zt),tme=n(Zt,"P",{});var Lit=s(tme);gOo=r(Lit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Lit.forEach(t),hOo=i(Zt),tn=n(Zt,"P",{});var O4=s(tn);pOo=r(O4,"The model class to instantiate is selected based on the "),ame=n(O4,"CODE",{});var xit=s(ame);_Oo=r(xit,"model_type"),xit.forEach(t),uOo=r(O4,` property of the config object (either
passed as an argument or loaded from `),nme=n(O4,"CODE",{});var kit=s(nme);bOo=r(kit,"pretrained_model_name_or_path"),kit.forEach(t),vOo=r(O4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(O4,"CODE",{});var Sit=s(sme);FOo=r(Sit,"pretrained_model_name_or_path"),Sit.forEach(t),TOo=r(O4,":"),O4.forEach(t),MOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);y6=n(Do,"LI",{});var aye=s(y6);lme=n(aye,"STRONG",{});var Rit=s(lme);EOo=r(Rit,"data2vec-audio"),Rit.forEach(t),COo=r(aye," \u2014 "),iG=n(aye,"A",{href:!0});var Bit=s(iG);wOo=r(Bit,"Data2VecAudioForSequenceClassification"),Bit.forEach(t),AOo=r(aye," (Data2VecAudio model)"),aye.forEach(t),yOo=i(Do),L6=n(Do,"LI",{});var nye=s(L6);ime=n(nye,"STRONG",{});var Pit=s(ime);LOo=r(Pit,"hubert"),Pit.forEach(t),xOo=r(nye," \u2014 "),dG=n(nye,"A",{href:!0});var $it=s(dG);kOo=r($it,"HubertForSequenceClassification"),$it.forEach(t),SOo=r(nye," (Hubert model)"),nye.forEach(t),ROo=i(Do),x6=n(Do,"LI",{});var sye=s(x6);dme=n(sye,"STRONG",{});var Iit=s(dme);BOo=r(Iit,"sew"),Iit.forEach(t),POo=r(sye," \u2014 "),cG=n(sye,"A",{href:!0});var qit=s(cG);$Oo=r(qit,"SEWForSequenceClassification"),qit.forEach(t),IOo=r(sye," (SEW model)"),sye.forEach(t),qOo=i(Do),k6=n(Do,"LI",{});var lye=s(k6);cme=n(lye,"STRONG",{});var Nit=s(cme);NOo=r(Nit,"sew-d"),Nit.forEach(t),jOo=r(lye," \u2014 "),fG=n(lye,"A",{href:!0});var jit=s(fG);DOo=r(jit,"SEWDForSequenceClassification"),jit.forEach(t),GOo=r(lye," (SEW-D model)"),lye.forEach(t),OOo=i(Do),S6=n(Do,"LI",{});var iye=s(S6);fme=n(iye,"STRONG",{});var Dit=s(fme);VOo=r(Dit,"unispeech"),Dit.forEach(t),XOo=r(iye," \u2014 "),mG=n(iye,"A",{href:!0});var Git=s(mG);zOo=r(Git,"UniSpeechForSequenceClassification"),Git.forEach(t),QOo=r(iye," (UniSpeech model)"),iye.forEach(t),WOo=i(Do),R6=n(Do,"LI",{});var dye=s(R6);mme=n(dye,"STRONG",{});var Oit=s(mme);HOo=r(Oit,"unispeech-sat"),Oit.forEach(t),UOo=r(dye," \u2014 "),gG=n(dye,"A",{href:!0});var Vit=s(gG);JOo=r(Vit,"UniSpeechSatForSequenceClassification"),Vit.forEach(t),YOo=r(dye," (UniSpeechSat model)"),dye.forEach(t),KOo=i(Do),B6=n(Do,"LI",{});var cye=s(B6);gme=n(cye,"STRONG",{});var Xit=s(gme);ZOo=r(Xit,"wav2vec2"),Xit.forEach(t),eVo=r(cye," \u2014 "),hG=n(cye,"A",{href:!0});var zit=s(hG);oVo=r(zit,"Wav2Vec2ForSequenceClassification"),zit.forEach(t),rVo=r(cye," (Wav2Vec2 model)"),cye.forEach(t),tVo=i(Do),P6=n(Do,"LI",{});var fye=s(P6);hme=n(fye,"STRONG",{});var Qit=s(hme);aVo=r(Qit,"wavlm"),Qit.forEach(t),nVo=r(fye," \u2014 "),pG=n(fye,"A",{href:!0});var Wit=s(pG);sVo=r(Wit,"WavLMForSequenceClassification"),Wit.forEach(t),lVo=r(fye," (WavLM model)"),fye.forEach(t),Do.forEach(t),iVo=i(Zt),$6=n(Zt,"P",{});var mye=s($6);dVo=r(mye,"The model is set in evaluation mode by default using "),pme=n(mye,"CODE",{});var Hit=s(pme);cVo=r(Hit,"model.eval()"),Hit.forEach(t),fVo=r(mye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(mye,"CODE",{});var Uit=s(_me);mVo=r(Uit,"model.train()"),Uit.forEach(t),mye.forEach(t),gVo=i(Zt),ume=n(Zt,"P",{});var Jit=s(ume);hVo=r(Jit,"Examples:"),Jit.forEach(t),pVo=i(Zt),m(UC.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),cBe=i(c),jd=n(c,"H2",{class:!0});var v$e=s(jd);I6=n(v$e,"A",{id:!0,class:!0,href:!0});var Yit=s(I6);bme=n(Yit,"SPAN",{});var Kit=s(bme);m(JC.$$.fragment,Kit),Kit.forEach(t),Yit.forEach(t),_Vo=i(v$e),vme=n(v$e,"SPAN",{});var Zit=s(vme);uVo=r(Zit,"AutoModelForAudioFrameClassification"),Zit.forEach(t),v$e.forEach(t),fBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(YC.$$.fragment,Ml),bVo=i(Ml),Dd=n(Ml,"P",{});var XU=s(Dd);vVo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),_G=n(XU,"A",{href:!0});var edt=s(_G);FVo=r(edt,"from_pretrained()"),edt.forEach(t),TVo=r(XU," class method or the "),uG=n(XU,"A",{href:!0});var odt=s(uG);MVo=r(odt,"from_config()"),odt.forEach(t),EVo=r(XU,` class
method.`),XU.forEach(t),CVo=i(Ml),KC=n(Ml,"P",{});var F$e=s(KC);wVo=r(F$e,"This class cannot be instantiated directly using "),Fme=n(F$e,"CODE",{});var rdt=s(Fme);AVo=r(rdt,"__init__()"),rdt.forEach(t),yVo=r(F$e," (throws an error)."),F$e.forEach(t),LVo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(ZC.$$.fragment,El),xVo=i(El),Tme=n(El,"P",{});var tdt=s(Tme);kVo=r(tdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tdt.forEach(t),SVo=i(El),Gd=n(El,"P",{});var zU=s(Gd);RVo=r(zU,`Note:
Loading a model from its configuration file does `),Mme=n(zU,"STRONG",{});var adt=s(Mme);BVo=r(adt,"not"),adt.forEach(t),PVo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),bG=n(zU,"A",{href:!0});var ndt=s(bG);$Vo=r(ndt,"from_pretrained()"),ndt.forEach(t),IVo=r(zU," to load the model weights."),zU.forEach(t),qVo=i(El),Eme=n(El,"P",{});var sdt=s(Eme);NVo=r(sdt,"Examples:"),sdt.forEach(t),jVo=i(El),m(ew.$$.fragment,El),El.forEach(t),DVo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(ow.$$.fragment,ea),GVo=i(ea),Cme=n(ea,"P",{});var ldt=s(Cme);OVo=r(ldt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ldt.forEach(t),VVo=i(ea),an=n(ea,"P",{});var V4=s(an);XVo=r(V4,"The model class to instantiate is selected based on the "),wme=n(V4,"CODE",{});var idt=s(wme);zVo=r(idt,"model_type"),idt.forEach(t),QVo=r(V4,` property of the config object (either
passed as an argument or loaded from `),Ame=n(V4,"CODE",{});var ddt=s(Ame);WVo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),HVo=r(V4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yme=n(V4,"CODE",{});var cdt=s(yme);UVo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),JVo=r(V4,":"),V4.forEach(t),YVo=i(ea),nn=n(ea,"UL",{});var X4=s(nn);q6=n(X4,"LI",{});var gye=s(q6);Lme=n(gye,"STRONG",{});var fdt=s(Lme);KVo=r(fdt,"data2vec-audio"),fdt.forEach(t),ZVo=r(gye," \u2014 "),vG=n(gye,"A",{href:!0});var mdt=s(vG);eXo=r(mdt,"Data2VecAudioForAudioFrameClassification"),mdt.forEach(t),oXo=r(gye," (Data2VecAudio model)"),gye.forEach(t),rXo=i(X4),N6=n(X4,"LI",{});var hye=s(N6);xme=n(hye,"STRONG",{});var gdt=s(xme);tXo=r(gdt,"unispeech-sat"),gdt.forEach(t),aXo=r(hye," \u2014 "),FG=n(hye,"A",{href:!0});var hdt=s(FG);nXo=r(hdt,"UniSpeechSatForAudioFrameClassification"),hdt.forEach(t),sXo=r(hye," (UniSpeechSat model)"),hye.forEach(t),lXo=i(X4),j6=n(X4,"LI",{});var pye=s(j6);kme=n(pye,"STRONG",{});var pdt=s(kme);iXo=r(pdt,"wav2vec2"),pdt.forEach(t),dXo=r(pye," \u2014 "),TG=n(pye,"A",{href:!0});var _dt=s(TG);cXo=r(_dt,"Wav2Vec2ForAudioFrameClassification"),_dt.forEach(t),fXo=r(pye," (Wav2Vec2 model)"),pye.forEach(t),mXo=i(X4),D6=n(X4,"LI",{});var _ye=s(D6);Sme=n(_ye,"STRONG",{});var udt=s(Sme);gXo=r(udt,"wavlm"),udt.forEach(t),hXo=r(_ye," \u2014 "),MG=n(_ye,"A",{href:!0});var bdt=s(MG);pXo=r(bdt,"WavLMForAudioFrameClassification"),bdt.forEach(t),_Xo=r(_ye," (WavLM model)"),_ye.forEach(t),X4.forEach(t),uXo=i(ea),G6=n(ea,"P",{});var uye=s(G6);bXo=r(uye,"The model is set in evaluation mode by default using "),Rme=n(uye,"CODE",{});var vdt=s(Rme);vXo=r(vdt,"model.eval()"),vdt.forEach(t),FXo=r(uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bme=n(uye,"CODE",{});var Fdt=s(Bme);TXo=r(Fdt,"model.train()"),Fdt.forEach(t),uye.forEach(t),MXo=i(ea),Pme=n(ea,"P",{});var Tdt=s(Pme);EXo=r(Tdt,"Examples:"),Tdt.forEach(t),CXo=i(ea),m(rw.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),mBe=i(c),Od=n(c,"H2",{class:!0});var T$e=s(Od);O6=n(T$e,"A",{id:!0,class:!0,href:!0});var Mdt=s(O6);$me=n(Mdt,"SPAN",{});var Edt=s($me);m(tw.$$.fragment,Edt),Edt.forEach(t),Mdt.forEach(t),wXo=i(T$e),Ime=n(T$e,"SPAN",{});var Cdt=s(Ime);AXo=r(Cdt,"AutoModelForCTC"),Cdt.forEach(t),T$e.forEach(t),gBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(aw.$$.fragment,Cl),yXo=i(Cl),Vd=n(Cl,"P",{});var QU=s(Vd);LXo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),EG=n(QU,"A",{href:!0});var wdt=s(EG);xXo=r(wdt,"from_pretrained()"),wdt.forEach(t),kXo=r(QU," class method or the "),CG=n(QU,"A",{href:!0});var Adt=s(CG);SXo=r(Adt,"from_config()"),Adt.forEach(t),RXo=r(QU,` class
method.`),QU.forEach(t),BXo=i(Cl),nw=n(Cl,"P",{});var M$e=s(nw);PXo=r(M$e,"This class cannot be instantiated directly using "),qme=n(M$e,"CODE",{});var ydt=s(qme);$Xo=r(ydt,"__init__()"),ydt.forEach(t),IXo=r(M$e," (throws an error)."),M$e.forEach(t),qXo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(sw.$$.fragment,wl),NXo=i(wl),Nme=n(wl,"P",{});var Ldt=s(Nme);jXo=r(Ldt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Ldt.forEach(t),DXo=i(wl),Xd=n(wl,"P",{});var WU=s(Xd);GXo=r(WU,`Note:
Loading a model from its configuration file does `),jme=n(WU,"STRONG",{});var xdt=s(jme);OXo=r(xdt,"not"),xdt.forEach(t),VXo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(WU,"A",{href:!0});var kdt=s(wG);XXo=r(kdt,"from_pretrained()"),kdt.forEach(t),zXo=r(WU," to load the model weights."),WU.forEach(t),QXo=i(wl),Dme=n(wl,"P",{});var Sdt=s(Dme);WXo=r(Sdt,"Examples:"),Sdt.forEach(t),HXo=i(wl),m(lw.$$.fragment,wl),wl.forEach(t),UXo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(iw.$$.fragment,oa),JXo=i(oa),Gme=n(oa,"P",{});var Rdt=s(Gme);YXo=r(Rdt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Rdt.forEach(t),KXo=i(oa),sn=n(oa,"P",{});var z4=s(sn);ZXo=r(z4,"The model class to instantiate is selected based on the "),Ome=n(z4,"CODE",{});var Bdt=s(Ome);ezo=r(Bdt,"model_type"),Bdt.forEach(t),ozo=r(z4,` property of the config object (either
passed as an argument or loaded from `),Vme=n(z4,"CODE",{});var Pdt=s(Vme);rzo=r(Pdt,"pretrained_model_name_or_path"),Pdt.forEach(t),tzo=r(z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xme=n(z4,"CODE",{});var $dt=s(Xme);azo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),nzo=r(z4,":"),z4.forEach(t),szo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);V6=n(Go,"LI",{});var bye=s(V6);zme=n(bye,"STRONG",{});var Idt=s(zme);lzo=r(Idt,"data2vec-audio"),Idt.forEach(t),izo=r(bye," \u2014 "),AG=n(bye,"A",{href:!0});var qdt=s(AG);dzo=r(qdt,"Data2VecAudioForCTC"),qdt.forEach(t),czo=r(bye," (Data2VecAudio model)"),bye.forEach(t),fzo=i(Go),X6=n(Go,"LI",{});var vye=s(X6);Qme=n(vye,"STRONG",{});var Ndt=s(Qme);mzo=r(Ndt,"hubert"),Ndt.forEach(t),gzo=r(vye," \u2014 "),yG=n(vye,"A",{href:!0});var jdt=s(yG);hzo=r(jdt,"HubertForCTC"),jdt.forEach(t),pzo=r(vye," (Hubert model)"),vye.forEach(t),_zo=i(Go),z6=n(Go,"LI",{});var Fye=s(z6);Wme=n(Fye,"STRONG",{});var Ddt=s(Wme);uzo=r(Ddt,"sew"),Ddt.forEach(t),bzo=r(Fye," \u2014 "),LG=n(Fye,"A",{href:!0});var Gdt=s(LG);vzo=r(Gdt,"SEWForCTC"),Gdt.forEach(t),Fzo=r(Fye," (SEW model)"),Fye.forEach(t),Tzo=i(Go),Q6=n(Go,"LI",{});var Tye=s(Q6);Hme=n(Tye,"STRONG",{});var Odt=s(Hme);Mzo=r(Odt,"sew-d"),Odt.forEach(t),Ezo=r(Tye," \u2014 "),xG=n(Tye,"A",{href:!0});var Vdt=s(xG);Czo=r(Vdt,"SEWDForCTC"),Vdt.forEach(t),wzo=r(Tye," (SEW-D model)"),Tye.forEach(t),Azo=i(Go),W6=n(Go,"LI",{});var Mye=s(W6);Ume=n(Mye,"STRONG",{});var Xdt=s(Ume);yzo=r(Xdt,"unispeech"),Xdt.forEach(t),Lzo=r(Mye," \u2014 "),kG=n(Mye,"A",{href:!0});var zdt=s(kG);xzo=r(zdt,"UniSpeechForCTC"),zdt.forEach(t),kzo=r(Mye," (UniSpeech model)"),Mye.forEach(t),Szo=i(Go),H6=n(Go,"LI",{});var Eye=s(H6);Jme=n(Eye,"STRONG",{});var Qdt=s(Jme);Rzo=r(Qdt,"unispeech-sat"),Qdt.forEach(t),Bzo=r(Eye," \u2014 "),SG=n(Eye,"A",{href:!0});var Wdt=s(SG);Pzo=r(Wdt,"UniSpeechSatForCTC"),Wdt.forEach(t),$zo=r(Eye," (UniSpeechSat model)"),Eye.forEach(t),Izo=i(Go),U6=n(Go,"LI",{});var Cye=s(U6);Yme=n(Cye,"STRONG",{});var Hdt=s(Yme);qzo=r(Hdt,"wav2vec2"),Hdt.forEach(t),Nzo=r(Cye," \u2014 "),RG=n(Cye,"A",{href:!0});var Udt=s(RG);jzo=r(Udt,"Wav2Vec2ForCTC"),Udt.forEach(t),Dzo=r(Cye," (Wav2Vec2 model)"),Cye.forEach(t),Gzo=i(Go),J6=n(Go,"LI",{});var wye=s(J6);Kme=n(wye,"STRONG",{});var Jdt=s(Kme);Ozo=r(Jdt,"wavlm"),Jdt.forEach(t),Vzo=r(wye," \u2014 "),BG=n(wye,"A",{href:!0});var Ydt=s(BG);Xzo=r(Ydt,"WavLMForCTC"),Ydt.forEach(t),zzo=r(wye," (WavLM model)"),wye.forEach(t),Go.forEach(t),Qzo=i(oa),Y6=n(oa,"P",{});var Aye=s(Y6);Wzo=r(Aye,"The model is set in evaluation mode by default using "),Zme=n(Aye,"CODE",{});var Kdt=s(Zme);Hzo=r(Kdt,"model.eval()"),Kdt.forEach(t),Uzo=r(Aye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ege=n(Aye,"CODE",{});var Zdt=s(ege);Jzo=r(Zdt,"model.train()"),Zdt.forEach(t),Aye.forEach(t),Yzo=i(oa),oge=n(oa,"P",{});var ect=s(oge);Kzo=r(ect,"Examples:"),ect.forEach(t),Zzo=i(oa),m(dw.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),hBe=i(c),zd=n(c,"H2",{class:!0});var E$e=s(zd);K6=n(E$e,"A",{id:!0,class:!0,href:!0});var oct=s(K6);rge=n(oct,"SPAN",{});var rct=s(rge);m(cw.$$.fragment,rct),rct.forEach(t),oct.forEach(t),eQo=i(E$e),tge=n(E$e,"SPAN",{});var tct=s(tge);oQo=r(tct,"AutoModelForSpeechSeq2Seq"),tct.forEach(t),E$e.forEach(t),pBe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(fw.$$.fragment,Al),rQo=i(Al),Qd=n(Al,"P",{});var HU=s(Qd);tQo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PG=n(HU,"A",{href:!0});var act=s(PG);aQo=r(act,"from_pretrained()"),act.forEach(t),nQo=r(HU," class method or the "),$G=n(HU,"A",{href:!0});var nct=s($G);sQo=r(nct,"from_config()"),nct.forEach(t),lQo=r(HU,` class
method.`),HU.forEach(t),iQo=i(Al),mw=n(Al,"P",{});var C$e=s(mw);dQo=r(C$e,"This class cannot be instantiated directly using "),age=n(C$e,"CODE",{});var sct=s(age);cQo=r(sct,"__init__()"),sct.forEach(t),fQo=r(C$e," (throws an error)."),C$e.forEach(t),mQo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(gw.$$.fragment,yl),gQo=i(yl),nge=n(yl,"P",{});var lct=s(nge);hQo=r(lct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),lct.forEach(t),pQo=i(yl),Wd=n(yl,"P",{});var UU=s(Wd);_Qo=r(UU,`Note:
Loading a model from its configuration file does `),sge=n(UU,"STRONG",{});var ict=s(sge);uQo=r(ict,"not"),ict.forEach(t),bQo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(UU,"A",{href:!0});var dct=s(IG);vQo=r(dct,"from_pretrained()"),dct.forEach(t),FQo=r(UU," to load the model weights."),UU.forEach(t),TQo=i(yl),lge=n(yl,"P",{});var cct=s(lge);MQo=r(cct,"Examples:"),cct.forEach(t),EQo=i(yl),m(hw.$$.fragment,yl),yl.forEach(t),CQo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(pw.$$.fragment,ra),wQo=i(ra),ige=n(ra,"P",{});var fct=s(ige);AQo=r(fct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),fct.forEach(t),yQo=i(ra),ln=n(ra,"P",{});var Q4=s(ln);LQo=r(Q4,"The model class to instantiate is selected based on the "),dge=n(Q4,"CODE",{});var mct=s(dge);xQo=r(mct,"model_type"),mct.forEach(t),kQo=r(Q4,` property of the config object (either
passed as an argument or loaded from `),cge=n(Q4,"CODE",{});var gct=s(cge);SQo=r(gct,"pretrained_model_name_or_path"),gct.forEach(t),RQo=r(Q4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fge=n(Q4,"CODE",{});var hct=s(fge);BQo=r(hct,"pretrained_model_name_or_path"),hct.forEach(t),PQo=r(Q4,":"),Q4.forEach(t),$Qo=i(ra),_w=n(ra,"UL",{});var w$e=s(_w);Z6=n(w$e,"LI",{});var yye=s(Z6);mge=n(yye,"STRONG",{});var pct=s(mge);IQo=r(pct,"speech-encoder-decoder"),pct.forEach(t),qQo=r(yye," \u2014 "),qG=n(yye,"A",{href:!0});var _ct=s(qG);NQo=r(_ct,"SpeechEncoderDecoderModel"),_ct.forEach(t),jQo=r(yye," (Speech Encoder decoder model)"),yye.forEach(t),DQo=i(w$e),ev=n(w$e,"LI",{});var Lye=s(ev);gge=n(Lye,"STRONG",{});var uct=s(gge);GQo=r(uct,"speech_to_text"),uct.forEach(t),OQo=r(Lye," \u2014 "),NG=n(Lye,"A",{href:!0});var bct=s(NG);VQo=r(bct,"Speech2TextForConditionalGeneration"),bct.forEach(t),XQo=r(Lye," (Speech2Text model)"),Lye.forEach(t),w$e.forEach(t),zQo=i(ra),ov=n(ra,"P",{});var xye=s(ov);QQo=r(xye,"The model is set in evaluation mode by default using "),hge=n(xye,"CODE",{});var vct=s(hge);WQo=r(vct,"model.eval()"),vct.forEach(t),HQo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(xye,"CODE",{});var Fct=s(pge);UQo=r(Fct,"model.train()"),Fct.forEach(t),xye.forEach(t),JQo=i(ra),_ge=n(ra,"P",{});var Tct=s(_ge);YQo=r(Tct,"Examples:"),Tct.forEach(t),KQo=i(ra),m(uw.$$.fragment,ra),ra.forEach(t),Al.forEach(t),_Be=i(c),Hd=n(c,"H2",{class:!0});var A$e=s(Hd);rv=n(A$e,"A",{id:!0,class:!0,href:!0});var Mct=s(rv);uge=n(Mct,"SPAN",{});var Ect=s(uge);m(bw.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),ZQo=i(A$e),bge=n(A$e,"SPAN",{});var Cct=s(bge);eWo=r(Cct,"AutoModelForAudioXVector"),Cct.forEach(t),A$e.forEach(t),uBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(vw.$$.fragment,Ll),oWo=i(Ll),Ud=n(Ll,"P",{});var JU=s(Ud);rWo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jG=n(JU,"A",{href:!0});var wct=s(jG);tWo=r(wct,"from_pretrained()"),wct.forEach(t),aWo=r(JU," class method or the "),DG=n(JU,"A",{href:!0});var Act=s(DG);nWo=r(Act,"from_config()"),Act.forEach(t),sWo=r(JU,` class
method.`),JU.forEach(t),lWo=i(Ll),Fw=n(Ll,"P",{});var y$e=s(Fw);iWo=r(y$e,"This class cannot be instantiated directly using "),vge=n(y$e,"CODE",{});var yct=s(vge);dWo=r(yct,"__init__()"),yct.forEach(t),cWo=r(y$e," (throws an error)."),y$e.forEach(t),fWo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(Tw.$$.fragment,xl),mWo=i(xl),Fge=n(xl,"P",{});var Lct=s(Fge);gWo=r(Lct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Lct.forEach(t),hWo=i(xl),Jd=n(xl,"P",{});var YU=s(Jd);pWo=r(YU,`Note:
Loading a model from its configuration file does `),Tge=n(YU,"STRONG",{});var xct=s(Tge);_Wo=r(xct,"not"),xct.forEach(t),uWo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),GG=n(YU,"A",{href:!0});var kct=s(GG);bWo=r(kct,"from_pretrained()"),kct.forEach(t),vWo=r(YU," to load the model weights."),YU.forEach(t),FWo=i(xl),Mge=n(xl,"P",{});var Sct=s(Mge);TWo=r(Sct,"Examples:"),Sct.forEach(t),MWo=i(xl),m(Mw.$$.fragment,xl),xl.forEach(t),EWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(Ew.$$.fragment,ta),CWo=i(ta),Ege=n(ta,"P",{});var Rct=s(Ege);wWo=r(Rct,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rct.forEach(t),AWo=i(ta),dn=n(ta,"P",{});var W4=s(dn);yWo=r(W4,"The model class to instantiate is selected based on the "),Cge=n(W4,"CODE",{});var Bct=s(Cge);LWo=r(Bct,"model_type"),Bct.forEach(t),xWo=r(W4,` property of the config object (either
passed as an argument or loaded from `),wge=n(W4,"CODE",{});var Pct=s(wge);kWo=r(Pct,"pretrained_model_name_or_path"),Pct.forEach(t),SWo=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(W4,"CODE",{});var $ct=s(Age);RWo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),BWo=r(W4,":"),W4.forEach(t),PWo=i(ta),cn=n(ta,"UL",{});var H4=s(cn);tv=n(H4,"LI",{});var kye=s(tv);yge=n(kye,"STRONG",{});var Ict=s(yge);$Wo=r(Ict,"data2vec-audio"),Ict.forEach(t),IWo=r(kye," \u2014 "),OG=n(kye,"A",{href:!0});var qct=s(OG);qWo=r(qct,"Data2VecAudioForXVector"),qct.forEach(t),NWo=r(kye," (Data2VecAudio model)"),kye.forEach(t),jWo=i(H4),av=n(H4,"LI",{});var Sye=s(av);Lge=n(Sye,"STRONG",{});var Nct=s(Lge);DWo=r(Nct,"unispeech-sat"),Nct.forEach(t),GWo=r(Sye," \u2014 "),VG=n(Sye,"A",{href:!0});var jct=s(VG);OWo=r(jct,"UniSpeechSatForXVector"),jct.forEach(t),VWo=r(Sye," (UniSpeechSat model)"),Sye.forEach(t),XWo=i(H4),nv=n(H4,"LI",{});var Rye=s(nv);xge=n(Rye,"STRONG",{});var Dct=s(xge);zWo=r(Dct,"wav2vec2"),Dct.forEach(t),QWo=r(Rye," \u2014 "),XG=n(Rye,"A",{href:!0});var Gct=s(XG);WWo=r(Gct,"Wav2Vec2ForXVector"),Gct.forEach(t),HWo=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),UWo=i(H4),sv=n(H4,"LI",{});var Bye=s(sv);kge=n(Bye,"STRONG",{});var Oct=s(kge);JWo=r(Oct,"wavlm"),Oct.forEach(t),YWo=r(Bye," \u2014 "),zG=n(Bye,"A",{href:!0});var Vct=s(zG);KWo=r(Vct,"WavLMForXVector"),Vct.forEach(t),ZWo=r(Bye," (WavLM model)"),Bye.forEach(t),H4.forEach(t),eHo=i(ta),lv=n(ta,"P",{});var Pye=s(lv);oHo=r(Pye,"The model is set in evaluation mode by default using "),Sge=n(Pye,"CODE",{});var Xct=s(Sge);rHo=r(Xct,"model.eval()"),Xct.forEach(t),tHo=r(Pye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(Pye,"CODE",{});var zct=s(Rge);aHo=r(zct,"model.train()"),zct.forEach(t),Pye.forEach(t),nHo=i(ta),Bge=n(ta,"P",{});var Qct=s(Bge);sHo=r(Qct,"Examples:"),Qct.forEach(t),lHo=i(ta),m(Cw.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),bBe=i(c),Yd=n(c,"H2",{class:!0});var L$e=s(Yd);iv=n(L$e,"A",{id:!0,class:!0,href:!0});var Wct=s(iv);Pge=n(Wct,"SPAN",{});var Hct=s(Pge);m(ww.$$.fragment,Hct),Hct.forEach(t),Wct.forEach(t),iHo=i(L$e),$ge=n(L$e,"SPAN",{});var Uct=s($ge);dHo=r(Uct,"AutoModelForMaskedImageModeling"),Uct.forEach(t),L$e.forEach(t),vBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(Aw.$$.fragment,kl),cHo=i(kl),Kd=n(kl,"P",{});var KU=s(Kd);fHo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QG=n(KU,"A",{href:!0});var Jct=s(QG);mHo=r(Jct,"from_pretrained()"),Jct.forEach(t),gHo=r(KU," class method or the "),WG=n(KU,"A",{href:!0});var Yct=s(WG);hHo=r(Yct,"from_config()"),Yct.forEach(t),pHo=r(KU,` class
method.`),KU.forEach(t),_Ho=i(kl),yw=n(kl,"P",{});var x$e=s(yw);uHo=r(x$e,"This class cannot be instantiated directly using "),Ige=n(x$e,"CODE",{});var Kct=s(Ige);bHo=r(Kct,"__init__()"),Kct.forEach(t),vHo=r(x$e," (throws an error)."),x$e.forEach(t),FHo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(Lw.$$.fragment,Sl),THo=i(Sl),qge=n(Sl,"P",{});var Zct=s(qge);MHo=r(Zct,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zct.forEach(t),EHo=i(Sl),Zd=n(Sl,"P",{});var ZU=s(Zd);CHo=r(ZU,`Note:
Loading a model from its configuration file does `),Nge=n(ZU,"STRONG",{});var eft=s(Nge);wHo=r(eft,"not"),eft.forEach(t),AHo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HG=n(ZU,"A",{href:!0});var oft=s(HG);yHo=r(oft,"from_pretrained()"),oft.forEach(t),LHo=r(ZU," to load the model weights."),ZU.forEach(t),xHo=i(Sl),jge=n(Sl,"P",{});var rft=s(jge);kHo=r(rft,"Examples:"),rft.forEach(t),SHo=i(Sl),m(xw.$$.fragment,Sl),Sl.forEach(t),RHo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(kw.$$.fragment,aa),BHo=i(aa),Dge=n(aa,"P",{});var tft=s(Dge);PHo=r(tft,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),tft.forEach(t),$Ho=i(aa),fn=n(aa,"P",{});var U4=s(fn);IHo=r(U4,"The model class to instantiate is selected based on the "),Gge=n(U4,"CODE",{});var aft=s(Gge);qHo=r(aft,"model_type"),aft.forEach(t),NHo=r(U4,` property of the config object (either
passed as an argument or loaded from `),Oge=n(U4,"CODE",{});var nft=s(Oge);jHo=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),DHo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vge=n(U4,"CODE",{});var sft=s(Vge);GHo=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),OHo=r(U4,":"),U4.forEach(t),VHo=i(aa),ec=n(aa,"UL",{});var eJ=s(ec);dv=n(eJ,"LI",{});var $ye=s(dv);Xge=n($ye,"STRONG",{});var lft=s(Xge);XHo=r(lft,"deit"),lft.forEach(t),zHo=r($ye," \u2014 "),UG=n($ye,"A",{href:!0});var ift=s(UG);QHo=r(ift,"DeiTForMaskedImageModeling"),ift.forEach(t),WHo=r($ye," (DeiT model)"),$ye.forEach(t),HHo=i(eJ),cv=n(eJ,"LI",{});var Iye=s(cv);zge=n(Iye,"STRONG",{});var dft=s(zge);UHo=r(dft,"swin"),dft.forEach(t),JHo=r(Iye," \u2014 "),JG=n(Iye,"A",{href:!0});var cft=s(JG);YHo=r(cft,"SwinForMaskedImageModeling"),cft.forEach(t),KHo=r(Iye," (Swin model)"),Iye.forEach(t),ZHo=i(eJ),fv=n(eJ,"LI",{});var qye=s(fv);Qge=n(qye,"STRONG",{});var fft=s(Qge);eUo=r(fft,"vit"),fft.forEach(t),oUo=r(qye," \u2014 "),YG=n(qye,"A",{href:!0});var mft=s(YG);rUo=r(mft,"ViTForMaskedImageModeling"),mft.forEach(t),tUo=r(qye," (ViT model)"),qye.forEach(t),eJ.forEach(t),aUo=i(aa),mv=n(aa,"P",{});var Nye=s(mv);nUo=r(Nye,"The model is set in evaluation mode by default using "),Wge=n(Nye,"CODE",{});var gft=s(Wge);sUo=r(gft,"model.eval()"),gft.forEach(t),lUo=r(Nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hge=n(Nye,"CODE",{});var hft=s(Hge);iUo=r(hft,"model.train()"),hft.forEach(t),Nye.forEach(t),dUo=i(aa),Uge=n(aa,"P",{});var pft=s(Uge);cUo=r(pft,"Examples:"),pft.forEach(t),fUo=i(aa),m(Sw.$$.fragment,aa),aa.forEach(t),kl.forEach(t),FBe=i(c),oc=n(c,"H2",{class:!0});var k$e=s(oc);gv=n(k$e,"A",{id:!0,class:!0,href:!0});var _ft=s(gv);Jge=n(_ft,"SPAN",{});var uft=s(Jge);m(Rw.$$.fragment,uft),uft.forEach(t),_ft.forEach(t),mUo=i(k$e),Yge=n(k$e,"SPAN",{});var bft=s(Yge);gUo=r(bft,"AutoModelForObjectDetection"),bft.forEach(t),k$e.forEach(t),TBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(Bw.$$.fragment,Rl),hUo=i(Rl),rc=n(Rl,"P",{});var oJ=s(rc);pUo=r(oJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),KG=n(oJ,"A",{href:!0});var vft=s(KG);_Uo=r(vft,"from_pretrained()"),vft.forEach(t),uUo=r(oJ," class method or the "),ZG=n(oJ,"A",{href:!0});var Fft=s(ZG);bUo=r(Fft,"from_config()"),Fft.forEach(t),vUo=r(oJ,` class
method.`),oJ.forEach(t),FUo=i(Rl),Pw=n(Rl,"P",{});var S$e=s(Pw);TUo=r(S$e,"This class cannot be instantiated directly using "),Kge=n(S$e,"CODE",{});var Tft=s(Kge);MUo=r(Tft,"__init__()"),Tft.forEach(t),EUo=r(S$e," (throws an error)."),S$e.forEach(t),CUo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m($w.$$.fragment,Bl),wUo=i(Bl),Zge=n(Bl,"P",{});var Mft=s(Zge);AUo=r(Mft,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mft.forEach(t),yUo=i(Bl),tc=n(Bl,"P",{});var rJ=s(tc);LUo=r(rJ,`Note:
Loading a model from its configuration file does `),ehe=n(rJ,"STRONG",{});var Eft=s(ehe);xUo=r(Eft,"not"),Eft.forEach(t),kUo=r(rJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eO=n(rJ,"A",{href:!0});var Cft=s(eO);SUo=r(Cft,"from_pretrained()"),Cft.forEach(t),RUo=r(rJ," to load the model weights."),rJ.forEach(t),BUo=i(Bl),ohe=n(Bl,"P",{});var wft=s(ohe);PUo=r(wft,"Examples:"),wft.forEach(t),$Uo=i(Bl),m(Iw.$$.fragment,Bl),Bl.forEach(t),IUo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(qw.$$.fragment,na),qUo=i(na),rhe=n(na,"P",{});var Aft=s(rhe);NUo=r(Aft,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Aft.forEach(t),jUo=i(na),mn=n(na,"P",{});var J4=s(mn);DUo=r(J4,"The model class to instantiate is selected based on the "),the=n(J4,"CODE",{});var yft=s(the);GUo=r(yft,"model_type"),yft.forEach(t),OUo=r(J4,` property of the config object (either
passed as an argument or loaded from `),ahe=n(J4,"CODE",{});var Lft=s(ahe);VUo=r(Lft,"pretrained_model_name_or_path"),Lft.forEach(t),XUo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(J4,"CODE",{});var xft=s(nhe);zUo=r(xft,"pretrained_model_name_or_path"),xft.forEach(t),QUo=r(J4,":"),J4.forEach(t),WUo=i(na),she=n(na,"UL",{});var kft=s(she);hv=n(kft,"LI",{});var jye=s(hv);lhe=n(jye,"STRONG",{});var Sft=s(lhe);HUo=r(Sft,"detr"),Sft.forEach(t),UUo=r(jye," \u2014 "),oO=n(jye,"A",{href:!0});var Rft=s(oO);JUo=r(Rft,"DetrForObjectDetection"),Rft.forEach(t),YUo=r(jye," (DETR model)"),jye.forEach(t),kft.forEach(t),KUo=i(na),pv=n(na,"P",{});var Dye=s(pv);ZUo=r(Dye,"The model is set in evaluation mode by default using "),ihe=n(Dye,"CODE",{});var Bft=s(ihe);eJo=r(Bft,"model.eval()"),Bft.forEach(t),oJo=r(Dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(Dye,"CODE",{});var Pft=s(dhe);rJo=r(Pft,"model.train()"),Pft.forEach(t),Dye.forEach(t),tJo=i(na),che=n(na,"P",{});var $ft=s(che);aJo=r($ft,"Examples:"),$ft.forEach(t),nJo=i(na),m(Nw.$$.fragment,na),na.forEach(t),Rl.forEach(t),MBe=i(c),ac=n(c,"H2",{class:!0});var R$e=s(ac);_v=n(R$e,"A",{id:!0,class:!0,href:!0});var Ift=s(_v);fhe=n(Ift,"SPAN",{});var qft=s(fhe);m(jw.$$.fragment,qft),qft.forEach(t),Ift.forEach(t),sJo=i(R$e),mhe=n(R$e,"SPAN",{});var Nft=s(mhe);lJo=r(Nft,"AutoModelForImageSegmentation"),Nft.forEach(t),R$e.forEach(t),EBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(Dw.$$.fragment,Pl),iJo=i(Pl),nc=n(Pl,"P",{});var tJ=s(nc);dJo=r(tJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),rO=n(tJ,"A",{href:!0});var jft=s(rO);cJo=r(jft,"from_pretrained()"),jft.forEach(t),fJo=r(tJ," class method or the "),tO=n(tJ,"A",{href:!0});var Dft=s(tO);mJo=r(Dft,"from_config()"),Dft.forEach(t),gJo=r(tJ,` class
method.`),tJ.forEach(t),hJo=i(Pl),Gw=n(Pl,"P",{});var B$e=s(Gw);pJo=r(B$e,"This class cannot be instantiated directly using "),ghe=n(B$e,"CODE",{});var Gft=s(ghe);_Jo=r(Gft,"__init__()"),Gft.forEach(t),uJo=r(B$e," (throws an error)."),B$e.forEach(t),bJo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(Ow.$$.fragment,$l),vJo=i($l),hhe=n($l,"P",{});var Oft=s(hhe);FJo=r(Oft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Oft.forEach(t),TJo=i($l),sc=n($l,"P",{});var aJ=s(sc);MJo=r(aJ,`Note:
Loading a model from its configuration file does `),phe=n(aJ,"STRONG",{});var Vft=s(phe);EJo=r(Vft,"not"),Vft.forEach(t),CJo=r(aJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(aJ,"A",{href:!0});var Xft=s(aO);wJo=r(Xft,"from_pretrained()"),Xft.forEach(t),AJo=r(aJ," to load the model weights."),aJ.forEach(t),yJo=i($l),_he=n($l,"P",{});var zft=s(_he);LJo=r(zft,"Examples:"),zft.forEach(t),xJo=i($l),m(Vw.$$.fragment,$l),$l.forEach(t),kJo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(Xw.$$.fragment,sa),SJo=i(sa),uhe=n(sa,"P",{});var Qft=s(uhe);RJo=r(Qft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qft.forEach(t),BJo=i(sa),gn=n(sa,"P",{});var Y4=s(gn);PJo=r(Y4,"The model class to instantiate is selected based on the "),bhe=n(Y4,"CODE",{});var Wft=s(bhe);$Jo=r(Wft,"model_type"),Wft.forEach(t),IJo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),vhe=n(Y4,"CODE",{});var Hft=s(vhe);qJo=r(Hft,"pretrained_model_name_or_path"),Hft.forEach(t),NJo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(Y4,"CODE",{});var Uft=s(Fhe);jJo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),DJo=r(Y4,":"),Y4.forEach(t),GJo=i(sa),The=n(sa,"UL",{});var Jft=s(The);uv=n(Jft,"LI",{});var Gye=s(uv);Mhe=n(Gye,"STRONG",{});var Yft=s(Mhe);OJo=r(Yft,"detr"),Yft.forEach(t),VJo=r(Gye," \u2014 "),nO=n(Gye,"A",{href:!0});var Kft=s(nO);XJo=r(Kft,"DetrForSegmentation"),Kft.forEach(t),zJo=r(Gye," (DETR model)"),Gye.forEach(t),Jft.forEach(t),QJo=i(sa),bv=n(sa,"P",{});var Oye=s(bv);WJo=r(Oye,"The model is set in evaluation mode by default using "),Ehe=n(Oye,"CODE",{});var Zft=s(Ehe);HJo=r(Zft,"model.eval()"),Zft.forEach(t),UJo=r(Oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(Oye,"CODE",{});var emt=s(Che);JJo=r(emt,"model.train()"),emt.forEach(t),Oye.forEach(t),YJo=i(sa),whe=n(sa,"P",{});var omt=s(whe);KJo=r(omt,"Examples:"),omt.forEach(t),ZJo=i(sa),m(zw.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),CBe=i(c),lc=n(c,"H2",{class:!0});var P$e=s(lc);vv=n(P$e,"A",{id:!0,class:!0,href:!0});var rmt=s(vv);Ahe=n(rmt,"SPAN",{});var tmt=s(Ahe);m(Qw.$$.fragment,tmt),tmt.forEach(t),rmt.forEach(t),eYo=i(P$e),yhe=n(P$e,"SPAN",{});var amt=s(yhe);oYo=r(amt,"AutoModelForSemanticSegmentation"),amt.forEach(t),P$e.forEach(t),wBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(Ww.$$.fragment,Il),rYo=i(Il),ic=n(Il,"P",{});var nJ=s(ic);tYo=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),sO=n(nJ,"A",{href:!0});var nmt=s(sO);aYo=r(nmt,"from_pretrained()"),nmt.forEach(t),nYo=r(nJ," class method or the "),lO=n(nJ,"A",{href:!0});var smt=s(lO);sYo=r(smt,"from_config()"),smt.forEach(t),lYo=r(nJ,` class
method.`),nJ.forEach(t),iYo=i(Il),Hw=n(Il,"P",{});var $$e=s(Hw);dYo=r($$e,"This class cannot be instantiated directly using "),Lhe=n($$e,"CODE",{});var lmt=s(Lhe);cYo=r(lmt,"__init__()"),lmt.forEach(t),fYo=r($$e," (throws an error)."),$$e.forEach(t),mYo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(Uw.$$.fragment,ql),gYo=i(ql),xhe=n(ql,"P",{});var imt=s(xhe);hYo=r(imt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),imt.forEach(t),pYo=i(ql),dc=n(ql,"P",{});var sJ=s(dc);_Yo=r(sJ,`Note:
Loading a model from its configuration file does `),khe=n(sJ,"STRONG",{});var dmt=s(khe);uYo=r(dmt,"not"),dmt.forEach(t),bYo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(sJ,"A",{href:!0});var cmt=s(iO);vYo=r(cmt,"from_pretrained()"),cmt.forEach(t),FYo=r(sJ," to load the model weights."),sJ.forEach(t),TYo=i(ql),She=n(ql,"P",{});var fmt=s(She);MYo=r(fmt,"Examples:"),fmt.forEach(t),EYo=i(ql),m(Jw.$$.fragment,ql),ql.forEach(t),CYo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(Yw.$$.fragment,la),wYo=i(la),Rhe=n(la,"P",{});var mmt=s(Rhe);AYo=r(mmt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),mmt.forEach(t),yYo=i(la),hn=n(la,"P",{});var K4=s(hn);LYo=r(K4,"The model class to instantiate is selected based on the "),Bhe=n(K4,"CODE",{});var gmt=s(Bhe);xYo=r(gmt,"model_type"),gmt.forEach(t),kYo=r(K4,` property of the config object (either
passed as an argument or loaded from `),Phe=n(K4,"CODE",{});var hmt=s(Phe);SYo=r(hmt,"pretrained_model_name_or_path"),hmt.forEach(t),RYo=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(K4,"CODE",{});var pmt=s($he);BYo=r(pmt,"pretrained_model_name_or_path"),pmt.forEach(t),PYo=r(K4,":"),K4.forEach(t),$Yo=i(la),pn=n(la,"UL",{});var Z4=s(pn);Fv=n(Z4,"LI",{});var Vye=s(Fv);Ihe=n(Vye,"STRONG",{});var _mt=s(Ihe);IYo=r(_mt,"beit"),_mt.forEach(t),qYo=r(Vye," \u2014 "),dO=n(Vye,"A",{href:!0});var umt=s(dO);NYo=r(umt,"BeitForSemanticSegmentation"),umt.forEach(t),jYo=r(Vye," (BEiT model)"),Vye.forEach(t),DYo=i(Z4),Tv=n(Z4,"LI",{});var Xye=s(Tv);qhe=n(Xye,"STRONG",{});var bmt=s(qhe);GYo=r(bmt,"data2vec-vision"),bmt.forEach(t),OYo=r(Xye," \u2014 "),cO=n(Xye,"A",{href:!0});var vmt=s(cO);VYo=r(vmt,"Data2VecVisionForSemanticSegmentation"),vmt.forEach(t),XYo=r(Xye," (Data2VecVision model)"),Xye.forEach(t),zYo=i(Z4),Mv=n(Z4,"LI",{});var zye=s(Mv);Nhe=n(zye,"STRONG",{});var Fmt=s(Nhe);QYo=r(Fmt,"dpt"),Fmt.forEach(t),WYo=r(zye," \u2014 "),fO=n(zye,"A",{href:!0});var Tmt=s(fO);HYo=r(Tmt,"DPTForSemanticSegmentation"),Tmt.forEach(t),UYo=r(zye," (DPT model)"),zye.forEach(t),JYo=i(Z4),Ev=n(Z4,"LI",{});var Qye=s(Ev);jhe=n(Qye,"STRONG",{});var Mmt=s(jhe);YYo=r(Mmt,"segformer"),Mmt.forEach(t),KYo=r(Qye," \u2014 "),mO=n(Qye,"A",{href:!0});var Emt=s(mO);ZYo=r(Emt,"SegformerForSemanticSegmentation"),Emt.forEach(t),eKo=r(Qye," (SegFormer model)"),Qye.forEach(t),Z4.forEach(t),oKo=i(la),Cv=n(la,"P",{});var Wye=s(Cv);rKo=r(Wye,"The model is set in evaluation mode by default using "),Dhe=n(Wye,"CODE",{});var Cmt=s(Dhe);tKo=r(Cmt,"model.eval()"),Cmt.forEach(t),aKo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ghe=n(Wye,"CODE",{});var wmt=s(Ghe);nKo=r(wmt,"model.train()"),wmt.forEach(t),Wye.forEach(t),sKo=i(la),Ohe=n(la,"P",{});var Amt=s(Ohe);lKo=r(Amt,"Examples:"),Amt.forEach(t),iKo=i(la),m(Kw.$$.fragment,la),la.forEach(t),Il.forEach(t),ABe=i(c),cc=n(c,"H2",{class:!0});var I$e=s(cc);wv=n(I$e,"A",{id:!0,class:!0,href:!0});var ymt=s(wv);Vhe=n(ymt,"SPAN",{});var Lmt=s(Vhe);m(Zw.$$.fragment,Lmt),Lmt.forEach(t),ymt.forEach(t),dKo=i(I$e),Xhe=n(I$e,"SPAN",{});var xmt=s(Xhe);cKo=r(xmt,"AutoModelForInstanceSegmentation"),xmt.forEach(t),I$e.forEach(t),yBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(eA.$$.fragment,Nl),fKo=i(Nl),fc=n(Nl,"P",{});var lJ=s(fc);mKo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),gO=n(lJ,"A",{href:!0});var kmt=s(gO);gKo=r(kmt,"from_pretrained()"),kmt.forEach(t),hKo=r(lJ," class method or the "),hO=n(lJ,"A",{href:!0});var Smt=s(hO);pKo=r(Smt,"from_config()"),Smt.forEach(t),_Ko=r(lJ,` class
method.`),lJ.forEach(t),uKo=i(Nl),oA=n(Nl,"P",{});var q$e=s(oA);bKo=r(q$e,"This class cannot be instantiated directly using "),zhe=n(q$e,"CODE",{});var Rmt=s(zhe);vKo=r(Rmt,"__init__()"),Rmt.forEach(t),FKo=r(q$e," (throws an error)."),q$e.forEach(t),TKo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(rA.$$.fragment,jl),MKo=i(jl),Qhe=n(jl,"P",{});var Bmt=s(Qhe);EKo=r(Bmt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Bmt.forEach(t),CKo=i(jl),mc=n(jl,"P",{});var iJ=s(mc);wKo=r(iJ,`Note:
Loading a model from its configuration file does `),Whe=n(iJ,"STRONG",{});var Pmt=s(Whe);AKo=r(Pmt,"not"),Pmt.forEach(t),yKo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(iJ,"A",{href:!0});var $mt=s(pO);LKo=r($mt,"from_pretrained()"),$mt.forEach(t),xKo=r(iJ," to load the model weights."),iJ.forEach(t),kKo=i(jl),Hhe=n(jl,"P",{});var Imt=s(Hhe);SKo=r(Imt,"Examples:"),Imt.forEach(t),RKo=i(jl),m(tA.$$.fragment,jl),jl.forEach(t),BKo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(aA.$$.fragment,ia),PKo=i(ia),Uhe=n(ia,"P",{});var qmt=s(Uhe);$Ko=r(qmt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),qmt.forEach(t),IKo=i(ia),_n=n(ia,"P",{});var eE=s(_n);qKo=r(eE,"The model class to instantiate is selected based on the "),Jhe=n(eE,"CODE",{});var Nmt=s(Jhe);NKo=r(Nmt,"model_type"),Nmt.forEach(t),jKo=r(eE,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(eE,"CODE",{});var jmt=s(Yhe);DKo=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),GKo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(eE,"CODE",{});var Dmt=s(Khe);OKo=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),VKo=r(eE,":"),eE.forEach(t),XKo=i(ia),Zhe=n(ia,"UL",{});var Gmt=s(Zhe);Av=n(Gmt,"LI",{});var Hye=s(Av);epe=n(Hye,"STRONG",{});var Omt=s(epe);zKo=r(Omt,"maskformer"),Omt.forEach(t),QKo=r(Hye," \u2014 "),_O=n(Hye,"A",{href:!0});var Vmt=s(_O);WKo=r(Vmt,"MaskFormerForInstanceSegmentation"),Vmt.forEach(t),HKo=r(Hye," (MaskFormer model)"),Hye.forEach(t),Gmt.forEach(t),UKo=i(ia),yv=n(ia,"P",{});var Uye=s(yv);JKo=r(Uye,"The model is set in evaluation mode by default using "),ope=n(Uye,"CODE",{});var Xmt=s(ope);YKo=r(Xmt,"model.eval()"),Xmt.forEach(t),KKo=r(Uye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(Uye,"CODE",{});var zmt=s(rpe);ZKo=r(zmt,"model.train()"),zmt.forEach(t),Uye.forEach(t),eZo=i(ia),tpe=n(ia,"P",{});var Qmt=s(tpe);oZo=r(Qmt,"Examples:"),Qmt.forEach(t),rZo=i(ia),m(nA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),LBe=i(c),gc=n(c,"H2",{class:!0});var N$e=s(gc);Lv=n(N$e,"A",{id:!0,class:!0,href:!0});var Wmt=s(Lv);ape=n(Wmt,"SPAN",{});var Hmt=s(ape);m(sA.$$.fragment,Hmt),Hmt.forEach(t),Wmt.forEach(t),tZo=i(N$e),npe=n(N$e,"SPAN",{});var Umt=s(npe);aZo=r(Umt,"TFAutoModel"),Umt.forEach(t),N$e.forEach(t),xBe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(lA.$$.fragment,Dl),nZo=i(Dl),hc=n(Dl,"P",{});var dJ=s(hc);sZo=r(dJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uO=n(dJ,"A",{href:!0});var Jmt=s(uO);lZo=r(Jmt,"from_pretrained()"),Jmt.forEach(t),iZo=r(dJ," class method or the "),bO=n(dJ,"A",{href:!0});var Ymt=s(bO);dZo=r(Ymt,"from_config()"),Ymt.forEach(t),cZo=r(dJ,` class
method.`),dJ.forEach(t),fZo=i(Dl),iA=n(Dl,"P",{});var j$e=s(iA);mZo=r(j$e,"This class cannot be instantiated directly using "),spe=n(j$e,"CODE",{});var Kmt=s(spe);gZo=r(Kmt,"__init__()"),Kmt.forEach(t),hZo=r(j$e," (throws an error)."),j$e.forEach(t),pZo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(dA.$$.fragment,Gl),_Zo=i(Gl),lpe=n(Gl,"P",{});var Zmt=s(lpe);uZo=r(Zmt,"Instantiates one of the base model classes of the library from a configuration."),Zmt.forEach(t),bZo=i(Gl),pc=n(Gl,"P",{});var cJ=s(pc);vZo=r(cJ,`Note:
Loading a model from its configuration file does `),ipe=n(cJ,"STRONG",{});var egt=s(ipe);FZo=r(egt,"not"),egt.forEach(t),TZo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(cJ,"A",{href:!0});var ogt=s(vO);MZo=r(ogt,"from_pretrained()"),ogt.forEach(t),EZo=r(cJ," to load the model weights."),cJ.forEach(t),CZo=i(Gl),dpe=n(Gl,"P",{});var rgt=s(dpe);wZo=r(rgt,"Examples:"),rgt.forEach(t),AZo=i(Gl),m(cA.$$.fragment,Gl),Gl.forEach(t),yZo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(fA.$$.fragment,pa),LZo=i(pa),cpe=n(pa,"P",{});var tgt=s(cpe);xZo=r(tgt,"Instantiate one of the base model classes of the library from a pretrained model."),tgt.forEach(t),kZo=i(pa),un=n(pa,"P",{});var oE=s(un);SZo=r(oE,"The model class to instantiate is selected based on the "),fpe=n(oE,"CODE",{});var agt=s(fpe);RZo=r(agt,"model_type"),agt.forEach(t),BZo=r(oE,` property of the config object (either
passed as an argument or loaded from `),mpe=n(oE,"CODE",{});var ngt=s(mpe);PZo=r(ngt,"pretrained_model_name_or_path"),ngt.forEach(t),$Zo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(oE,"CODE",{});var sgt=s(gpe);IZo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),qZo=r(oE,":"),oE.forEach(t),NZo=i(pa),x=n(pa,"UL",{});var k=s(x);xv=n(k,"LI",{});var Jye=s(xv);hpe=n(Jye,"STRONG",{});var lgt=s(hpe);jZo=r(lgt,"albert"),lgt.forEach(t),DZo=r(Jye," \u2014 "),FO=n(Jye,"A",{href:!0});var igt=s(FO);GZo=r(igt,"TFAlbertModel"),igt.forEach(t),OZo=r(Jye," (ALBERT model)"),Jye.forEach(t),VZo=i(k),kv=n(k,"LI",{});var Yye=s(kv);ppe=n(Yye,"STRONG",{});var dgt=s(ppe);XZo=r(dgt,"bart"),dgt.forEach(t),zZo=r(Yye," \u2014 "),TO=n(Yye,"A",{href:!0});var cgt=s(TO);QZo=r(cgt,"TFBartModel"),cgt.forEach(t),WZo=r(Yye," (BART model)"),Yye.forEach(t),HZo=i(k),Sv=n(k,"LI",{});var Kye=s(Sv);_pe=n(Kye,"STRONG",{});var fgt=s(_pe);UZo=r(fgt,"bert"),fgt.forEach(t),JZo=r(Kye," \u2014 "),MO=n(Kye,"A",{href:!0});var mgt=s(MO);YZo=r(mgt,"TFBertModel"),mgt.forEach(t),KZo=r(Kye," (BERT model)"),Kye.forEach(t),ZZo=i(k),Rv=n(k,"LI",{});var Zye=s(Rv);upe=n(Zye,"STRONG",{});var ggt=s(upe);eer=r(ggt,"blenderbot"),ggt.forEach(t),oer=r(Zye," \u2014 "),EO=n(Zye,"A",{href:!0});var hgt=s(EO);rer=r(hgt,"TFBlenderbotModel"),hgt.forEach(t),ter=r(Zye," (Blenderbot model)"),Zye.forEach(t),aer=i(k),Bv=n(k,"LI",{});var eLe=s(Bv);bpe=n(eLe,"STRONG",{});var pgt=s(bpe);ner=r(pgt,"blenderbot-small"),pgt.forEach(t),ser=r(eLe," \u2014 "),CO=n(eLe,"A",{href:!0});var _gt=s(CO);ler=r(_gt,"TFBlenderbotSmallModel"),_gt.forEach(t),ier=r(eLe," (BlenderbotSmall model)"),eLe.forEach(t),der=i(k),Pv=n(k,"LI",{});var oLe=s(Pv);vpe=n(oLe,"STRONG",{});var ugt=s(vpe);cer=r(ugt,"camembert"),ugt.forEach(t),fer=r(oLe," \u2014 "),wO=n(oLe,"A",{href:!0});var bgt=s(wO);mer=r(bgt,"TFCamembertModel"),bgt.forEach(t),ger=r(oLe," (CamemBERT model)"),oLe.forEach(t),her=i(k),$v=n(k,"LI",{});var rLe=s($v);Fpe=n(rLe,"STRONG",{});var vgt=s(Fpe);per=r(vgt,"clip"),vgt.forEach(t),_er=r(rLe," \u2014 "),AO=n(rLe,"A",{href:!0});var Fgt=s(AO);uer=r(Fgt,"TFCLIPModel"),Fgt.forEach(t),ber=r(rLe," (CLIP model)"),rLe.forEach(t),ver=i(k),Iv=n(k,"LI",{});var tLe=s(Iv);Tpe=n(tLe,"STRONG",{});var Tgt=s(Tpe);Fer=r(Tgt,"convbert"),Tgt.forEach(t),Ter=r(tLe," \u2014 "),yO=n(tLe,"A",{href:!0});var Mgt=s(yO);Mer=r(Mgt,"TFConvBertModel"),Mgt.forEach(t),Eer=r(tLe," (ConvBERT model)"),tLe.forEach(t),Cer=i(k),qv=n(k,"LI",{});var aLe=s(qv);Mpe=n(aLe,"STRONG",{});var Egt=s(Mpe);wer=r(Egt,"convnext"),Egt.forEach(t),Aer=r(aLe," \u2014 "),LO=n(aLe,"A",{href:!0});var Cgt=s(LO);yer=r(Cgt,"TFConvNextModel"),Cgt.forEach(t),Ler=r(aLe," (ConvNext model)"),aLe.forEach(t),xer=i(k),Nv=n(k,"LI",{});var nLe=s(Nv);Epe=n(nLe,"STRONG",{});var wgt=s(Epe);ker=r(wgt,"ctrl"),wgt.forEach(t),Ser=r(nLe," \u2014 "),xO=n(nLe,"A",{href:!0});var Agt=s(xO);Rer=r(Agt,"TFCTRLModel"),Agt.forEach(t),Ber=r(nLe," (CTRL model)"),nLe.forEach(t),Per=i(k),jv=n(k,"LI",{});var sLe=s(jv);Cpe=n(sLe,"STRONG",{});var ygt=s(Cpe);$er=r(ygt,"deberta"),ygt.forEach(t),Ier=r(sLe," \u2014 "),kO=n(sLe,"A",{href:!0});var Lgt=s(kO);qer=r(Lgt,"TFDebertaModel"),Lgt.forEach(t),Ner=r(sLe," (DeBERTa model)"),sLe.forEach(t),jer=i(k),Dv=n(k,"LI",{});var lLe=s(Dv);wpe=n(lLe,"STRONG",{});var xgt=s(wpe);Der=r(xgt,"deberta-v2"),xgt.forEach(t),Ger=r(lLe," \u2014 "),SO=n(lLe,"A",{href:!0});var kgt=s(SO);Oer=r(kgt,"TFDebertaV2Model"),kgt.forEach(t),Ver=r(lLe," (DeBERTa-v2 model)"),lLe.forEach(t),Xer=i(k),Gv=n(k,"LI",{});var iLe=s(Gv);Ape=n(iLe,"STRONG",{});var Sgt=s(Ape);zer=r(Sgt,"distilbert"),Sgt.forEach(t),Qer=r(iLe," \u2014 "),RO=n(iLe,"A",{href:!0});var Rgt=s(RO);Wer=r(Rgt,"TFDistilBertModel"),Rgt.forEach(t),Her=r(iLe," (DistilBERT model)"),iLe.forEach(t),Uer=i(k),Ov=n(k,"LI",{});var dLe=s(Ov);ype=n(dLe,"STRONG",{});var Bgt=s(ype);Jer=r(Bgt,"dpr"),Bgt.forEach(t),Yer=r(dLe," \u2014 "),BO=n(dLe,"A",{href:!0});var Pgt=s(BO);Ker=r(Pgt,"TFDPRQuestionEncoder"),Pgt.forEach(t),Zer=r(dLe," (DPR model)"),dLe.forEach(t),eor=i(k),Vv=n(k,"LI",{});var cLe=s(Vv);Lpe=n(cLe,"STRONG",{});var $gt=s(Lpe);oor=r($gt,"electra"),$gt.forEach(t),ror=r(cLe," \u2014 "),PO=n(cLe,"A",{href:!0});var Igt=s(PO);tor=r(Igt,"TFElectraModel"),Igt.forEach(t),aor=r(cLe," (ELECTRA model)"),cLe.forEach(t),nor=i(k),Xv=n(k,"LI",{});var fLe=s(Xv);xpe=n(fLe,"STRONG",{});var qgt=s(xpe);sor=r(qgt,"flaubert"),qgt.forEach(t),lor=r(fLe," \u2014 "),$O=n(fLe,"A",{href:!0});var Ngt=s($O);ior=r(Ngt,"TFFlaubertModel"),Ngt.forEach(t),dor=r(fLe," (FlauBERT model)"),fLe.forEach(t),cor=i(k),Os=n(k,"LI",{});var u7=s(Os);kpe=n(u7,"STRONG",{});var jgt=s(kpe);mor=r(jgt,"funnel"),jgt.forEach(t),gor=r(u7," \u2014 "),IO=n(u7,"A",{href:!0});var Dgt=s(IO);hor=r(Dgt,"TFFunnelModel"),Dgt.forEach(t),por=r(u7," or "),qO=n(u7,"A",{href:!0});var Ggt=s(qO);_or=r(Ggt,"TFFunnelBaseModel"),Ggt.forEach(t),uor=r(u7," (Funnel Transformer model)"),u7.forEach(t),bor=i(k),zv=n(k,"LI",{});var mLe=s(zv);Spe=n(mLe,"STRONG",{});var Ogt=s(Spe);vor=r(Ogt,"gpt2"),Ogt.forEach(t),For=r(mLe," \u2014 "),NO=n(mLe,"A",{href:!0});var Vgt=s(NO);Tor=r(Vgt,"TFGPT2Model"),Vgt.forEach(t),Mor=r(mLe," (OpenAI GPT-2 model)"),mLe.forEach(t),Eor=i(k),Qv=n(k,"LI",{});var gLe=s(Qv);Rpe=n(gLe,"STRONG",{});var Xgt=s(Rpe);Cor=r(Xgt,"gptj"),Xgt.forEach(t),wor=r(gLe," \u2014 "),jO=n(gLe,"A",{href:!0});var zgt=s(jO);Aor=r(zgt,"TFGPTJModel"),zgt.forEach(t),yor=r(gLe," (GPT-J model)"),gLe.forEach(t),Lor=i(k),Wv=n(k,"LI",{});var hLe=s(Wv);Bpe=n(hLe,"STRONG",{});var Qgt=s(Bpe);xor=r(Qgt,"hubert"),Qgt.forEach(t),kor=r(hLe," \u2014 "),DO=n(hLe,"A",{href:!0});var Wgt=s(DO);Sor=r(Wgt,"TFHubertModel"),Wgt.forEach(t),Ror=r(hLe," (Hubert model)"),hLe.forEach(t),Bor=i(k),Hv=n(k,"LI",{});var pLe=s(Hv);Ppe=n(pLe,"STRONG",{});var Hgt=s(Ppe);Por=r(Hgt,"layoutlm"),Hgt.forEach(t),$or=r(pLe," \u2014 "),GO=n(pLe,"A",{href:!0});var Ugt=s(GO);Ior=r(Ugt,"TFLayoutLMModel"),Ugt.forEach(t),qor=r(pLe," (LayoutLM model)"),pLe.forEach(t),Nor=i(k),Uv=n(k,"LI",{});var _Le=s(Uv);$pe=n(_Le,"STRONG",{});var Jgt=s($pe);jor=r(Jgt,"led"),Jgt.forEach(t),Dor=r(_Le," \u2014 "),OO=n(_Le,"A",{href:!0});var Ygt=s(OO);Gor=r(Ygt,"TFLEDModel"),Ygt.forEach(t),Oor=r(_Le," (LED model)"),_Le.forEach(t),Vor=i(k),Jv=n(k,"LI",{});var uLe=s(Jv);Ipe=n(uLe,"STRONG",{});var Kgt=s(Ipe);Xor=r(Kgt,"longformer"),Kgt.forEach(t),zor=r(uLe," \u2014 "),VO=n(uLe,"A",{href:!0});var Zgt=s(VO);Qor=r(Zgt,"TFLongformerModel"),Zgt.forEach(t),Wor=r(uLe," (Longformer model)"),uLe.forEach(t),Hor=i(k),Yv=n(k,"LI",{});var bLe=s(Yv);qpe=n(bLe,"STRONG",{});var eht=s(qpe);Uor=r(eht,"lxmert"),eht.forEach(t),Jor=r(bLe," \u2014 "),XO=n(bLe,"A",{href:!0});var oht=s(XO);Yor=r(oht,"TFLxmertModel"),oht.forEach(t),Kor=r(bLe," (LXMERT model)"),bLe.forEach(t),Zor=i(k),Kv=n(k,"LI",{});var vLe=s(Kv);Npe=n(vLe,"STRONG",{});var rht=s(Npe);err=r(rht,"marian"),rht.forEach(t),orr=r(vLe," \u2014 "),zO=n(vLe,"A",{href:!0});var tht=s(zO);rrr=r(tht,"TFMarianModel"),tht.forEach(t),trr=r(vLe," (Marian model)"),vLe.forEach(t),arr=i(k),Zv=n(k,"LI",{});var FLe=s(Zv);jpe=n(FLe,"STRONG",{});var aht=s(jpe);nrr=r(aht,"mbart"),aht.forEach(t),srr=r(FLe," \u2014 "),QO=n(FLe,"A",{href:!0});var nht=s(QO);lrr=r(nht,"TFMBartModel"),nht.forEach(t),irr=r(FLe," (mBART model)"),FLe.forEach(t),drr=i(k),eF=n(k,"LI",{});var TLe=s(eF);Dpe=n(TLe,"STRONG",{});var sht=s(Dpe);crr=r(sht,"mobilebert"),sht.forEach(t),frr=r(TLe," \u2014 "),WO=n(TLe,"A",{href:!0});var lht=s(WO);mrr=r(lht,"TFMobileBertModel"),lht.forEach(t),grr=r(TLe," (MobileBERT model)"),TLe.forEach(t),hrr=i(k),oF=n(k,"LI",{});var MLe=s(oF);Gpe=n(MLe,"STRONG",{});var iht=s(Gpe);prr=r(iht,"mpnet"),iht.forEach(t),_rr=r(MLe," \u2014 "),HO=n(MLe,"A",{href:!0});var dht=s(HO);urr=r(dht,"TFMPNetModel"),dht.forEach(t),brr=r(MLe," (MPNet model)"),MLe.forEach(t),vrr=i(k),rF=n(k,"LI",{});var ELe=s(rF);Ope=n(ELe,"STRONG",{});var cht=s(Ope);Frr=r(cht,"mt5"),cht.forEach(t),Trr=r(ELe," \u2014 "),UO=n(ELe,"A",{href:!0});var fht=s(UO);Mrr=r(fht,"TFMT5Model"),fht.forEach(t),Err=r(ELe," (mT5 model)"),ELe.forEach(t),Crr=i(k),tF=n(k,"LI",{});var CLe=s(tF);Vpe=n(CLe,"STRONG",{});var mht=s(Vpe);wrr=r(mht,"openai-gpt"),mht.forEach(t),Arr=r(CLe," \u2014 "),JO=n(CLe,"A",{href:!0});var ght=s(JO);yrr=r(ght,"TFOpenAIGPTModel"),ght.forEach(t),Lrr=r(CLe," (OpenAI GPT model)"),CLe.forEach(t),xrr=i(k),aF=n(k,"LI",{});var wLe=s(aF);Xpe=n(wLe,"STRONG",{});var hht=s(Xpe);krr=r(hht,"pegasus"),hht.forEach(t),Srr=r(wLe," \u2014 "),YO=n(wLe,"A",{href:!0});var pht=s(YO);Rrr=r(pht,"TFPegasusModel"),pht.forEach(t),Brr=r(wLe," (Pegasus model)"),wLe.forEach(t),Prr=i(k),nF=n(k,"LI",{});var ALe=s(nF);zpe=n(ALe,"STRONG",{});var _ht=s(zpe);$rr=r(_ht,"rembert"),_ht.forEach(t),Irr=r(ALe," \u2014 "),KO=n(ALe,"A",{href:!0});var uht=s(KO);qrr=r(uht,"TFRemBertModel"),uht.forEach(t),Nrr=r(ALe," (RemBERT model)"),ALe.forEach(t),jrr=i(k),sF=n(k,"LI",{});var yLe=s(sF);Qpe=n(yLe,"STRONG",{});var bht=s(Qpe);Drr=r(bht,"roberta"),bht.forEach(t),Grr=r(yLe," \u2014 "),ZO=n(yLe,"A",{href:!0});var vht=s(ZO);Orr=r(vht,"TFRobertaModel"),vht.forEach(t),Vrr=r(yLe," (RoBERTa model)"),yLe.forEach(t),Xrr=i(k),lF=n(k,"LI",{});var LLe=s(lF);Wpe=n(LLe,"STRONG",{});var Fht=s(Wpe);zrr=r(Fht,"roformer"),Fht.forEach(t),Qrr=r(LLe," \u2014 "),eV=n(LLe,"A",{href:!0});var Tht=s(eV);Wrr=r(Tht,"TFRoFormerModel"),Tht.forEach(t),Hrr=r(LLe," (RoFormer model)"),LLe.forEach(t),Urr=i(k),iF=n(k,"LI",{});var xLe=s(iF);Hpe=n(xLe,"STRONG",{});var Mht=s(Hpe);Jrr=r(Mht,"speech_to_text"),Mht.forEach(t),Yrr=r(xLe," \u2014 "),oV=n(xLe,"A",{href:!0});var Eht=s(oV);Krr=r(Eht,"TFSpeech2TextModel"),Eht.forEach(t),Zrr=r(xLe," (Speech2Text model)"),xLe.forEach(t),etr=i(k),dF=n(k,"LI",{});var kLe=s(dF);Upe=n(kLe,"STRONG",{});var Cht=s(Upe);otr=r(Cht,"t5"),Cht.forEach(t),rtr=r(kLe," \u2014 "),rV=n(kLe,"A",{href:!0});var wht=s(rV);ttr=r(wht,"TFT5Model"),wht.forEach(t),atr=r(kLe," (T5 model)"),kLe.forEach(t),ntr=i(k),cF=n(k,"LI",{});var SLe=s(cF);Jpe=n(SLe,"STRONG",{});var Aht=s(Jpe);str=r(Aht,"tapas"),Aht.forEach(t),ltr=r(SLe," \u2014 "),tV=n(SLe,"A",{href:!0});var yht=s(tV);itr=r(yht,"TFTapasModel"),yht.forEach(t),dtr=r(SLe," (TAPAS model)"),SLe.forEach(t),ctr=i(k),fF=n(k,"LI",{});var RLe=s(fF);Ype=n(RLe,"STRONG",{});var Lht=s(Ype);ftr=r(Lht,"transfo-xl"),Lht.forEach(t),mtr=r(RLe," \u2014 "),aV=n(RLe,"A",{href:!0});var xht=s(aV);gtr=r(xht,"TFTransfoXLModel"),xht.forEach(t),htr=r(RLe," (Transformer-XL model)"),RLe.forEach(t),ptr=i(k),mF=n(k,"LI",{});var BLe=s(mF);Kpe=n(BLe,"STRONG",{});var kht=s(Kpe);_tr=r(kht,"vit"),kht.forEach(t),utr=r(BLe," \u2014 "),nV=n(BLe,"A",{href:!0});var Sht=s(nV);btr=r(Sht,"TFViTModel"),Sht.forEach(t),vtr=r(BLe," (ViT model)"),BLe.forEach(t),Ftr=i(k),gF=n(k,"LI",{});var PLe=s(gF);Zpe=n(PLe,"STRONG",{});var Rht=s(Zpe);Ttr=r(Rht,"vit_mae"),Rht.forEach(t),Mtr=r(PLe," \u2014 "),sV=n(PLe,"A",{href:!0});var Bht=s(sV);Etr=r(Bht,"TFViTMAEModel"),Bht.forEach(t),Ctr=r(PLe," (ViTMAE model)"),PLe.forEach(t),wtr=i(k),hF=n(k,"LI",{});var $Le=s(hF);e_e=n($Le,"STRONG",{});var Pht=s(e_e);Atr=r(Pht,"wav2vec2"),Pht.forEach(t),ytr=r($Le," \u2014 "),lV=n($Le,"A",{href:!0});var $ht=s(lV);Ltr=r($ht,"TFWav2Vec2Model"),$ht.forEach(t),xtr=r($Le," (Wav2Vec2 model)"),$Le.forEach(t),ktr=i(k),pF=n(k,"LI",{});var ILe=s(pF);o_e=n(ILe,"STRONG",{});var Iht=s(o_e);Str=r(Iht,"xlm"),Iht.forEach(t),Rtr=r(ILe," \u2014 "),iV=n(ILe,"A",{href:!0});var qht=s(iV);Btr=r(qht,"TFXLMModel"),qht.forEach(t),Ptr=r(ILe," (XLM model)"),ILe.forEach(t),$tr=i(k),_F=n(k,"LI",{});var qLe=s(_F);r_e=n(qLe,"STRONG",{});var Nht=s(r_e);Itr=r(Nht,"xlm-roberta"),Nht.forEach(t),qtr=r(qLe," \u2014 "),dV=n(qLe,"A",{href:!0});var jht=s(dV);Ntr=r(jht,"TFXLMRobertaModel"),jht.forEach(t),jtr=r(qLe," (XLM-RoBERTa model)"),qLe.forEach(t),Dtr=i(k),uF=n(k,"LI",{});var NLe=s(uF);t_e=n(NLe,"STRONG",{});var Dht=s(t_e);Gtr=r(Dht,"xlnet"),Dht.forEach(t),Otr=r(NLe," \u2014 "),cV=n(NLe,"A",{href:!0});var Ght=s(cV);Vtr=r(Ght,"TFXLNetModel"),Ght.forEach(t),Xtr=r(NLe," (XLNet model)"),NLe.forEach(t),k.forEach(t),ztr=i(pa),a_e=n(pa,"P",{});var Oht=s(a_e);Qtr=r(Oht,"Examples:"),Oht.forEach(t),Wtr=i(pa),m(mA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),kBe=i(c),_c=n(c,"H2",{class:!0});var D$e=s(_c);bF=n(D$e,"A",{id:!0,class:!0,href:!0});var Vht=s(bF);n_e=n(Vht,"SPAN",{});var Xht=s(n_e);m(gA.$$.fragment,Xht),Xht.forEach(t),Vht.forEach(t),Htr=i(D$e),s_e=n(D$e,"SPAN",{});var zht=s(s_e);Utr=r(zht,"TFAutoModelForPreTraining"),zht.forEach(t),D$e.forEach(t),SBe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(hA.$$.fragment,Ol),Jtr=i(Ol),uc=n(Ol,"P",{});var fJ=s(uc);Ytr=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),fV=n(fJ,"A",{href:!0});var Qht=s(fV);Ktr=r(Qht,"from_pretrained()"),Qht.forEach(t),Ztr=r(fJ," class method or the "),mV=n(fJ,"A",{href:!0});var Wht=s(mV);ear=r(Wht,"from_config()"),Wht.forEach(t),oar=r(fJ,` class
method.`),fJ.forEach(t),rar=i(Ol),pA=n(Ol,"P",{});var G$e=s(pA);tar=r(G$e,"This class cannot be instantiated directly using "),l_e=n(G$e,"CODE",{});var Hht=s(l_e);aar=r(Hht,"__init__()"),Hht.forEach(t),nar=r(G$e," (throws an error)."),G$e.forEach(t),sar=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(_A.$$.fragment,Vl),lar=i(Vl),i_e=n(Vl,"P",{});var Uht=s(i_e);iar=r(Uht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uht.forEach(t),dar=i(Vl),bc=n(Vl,"P",{});var mJ=s(bc);car=r(mJ,`Note:
Loading a model from its configuration file does `),d_e=n(mJ,"STRONG",{});var Jht=s(d_e);far=r(Jht,"not"),Jht.forEach(t),mar=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(mJ,"A",{href:!0});var Yht=s(gV);gar=r(Yht,"from_pretrained()"),Yht.forEach(t),har=r(mJ," to load the model weights."),mJ.forEach(t),par=i(Vl),c_e=n(Vl,"P",{});var Kht=s(c_e);_ar=r(Kht,"Examples:"),Kht.forEach(t),uar=i(Vl),m(uA.$$.fragment,Vl),Vl.forEach(t),bar=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(bA.$$.fragment,_a),Far=i(_a),f_e=n(_a,"P",{});var Zht=s(f_e);Tar=r(Zht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Zht.forEach(t),Mar=i(_a),bn=n(_a,"P",{});var rE=s(bn);Ear=r(rE,"The model class to instantiate is selected based on the "),m_e=n(rE,"CODE",{});var ept=s(m_e);Car=r(ept,"model_type"),ept.forEach(t),war=r(rE,` property of the config object (either
passed as an argument or loaded from `),g_e=n(rE,"CODE",{});var opt=s(g_e);Aar=r(opt,"pretrained_model_name_or_path"),opt.forEach(t),yar=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h_e=n(rE,"CODE",{});var rpt=s(h_e);Lar=r(rpt,"pretrained_model_name_or_path"),rpt.forEach(t),xar=r(rE,":"),rE.forEach(t),kar=i(_a),H=n(_a,"UL",{});var U=s(H);vF=n(U,"LI",{});var jLe=s(vF);p_e=n(jLe,"STRONG",{});var tpt=s(p_e);Sar=r(tpt,"albert"),tpt.forEach(t),Rar=r(jLe," \u2014 "),hV=n(jLe,"A",{href:!0});var apt=s(hV);Bar=r(apt,"TFAlbertForPreTraining"),apt.forEach(t),Par=r(jLe," (ALBERT model)"),jLe.forEach(t),$ar=i(U),FF=n(U,"LI",{});var DLe=s(FF);__e=n(DLe,"STRONG",{});var npt=s(__e);Iar=r(npt,"bart"),npt.forEach(t),qar=r(DLe," \u2014 "),pV=n(DLe,"A",{href:!0});var spt=s(pV);Nar=r(spt,"TFBartForConditionalGeneration"),spt.forEach(t),jar=r(DLe," (BART model)"),DLe.forEach(t),Dar=i(U),TF=n(U,"LI",{});var GLe=s(TF);u_e=n(GLe,"STRONG",{});var lpt=s(u_e);Gar=r(lpt,"bert"),lpt.forEach(t),Oar=r(GLe," \u2014 "),_V=n(GLe,"A",{href:!0});var ipt=s(_V);Var=r(ipt,"TFBertForPreTraining"),ipt.forEach(t),Xar=r(GLe," (BERT model)"),GLe.forEach(t),zar=i(U),MF=n(U,"LI",{});var OLe=s(MF);b_e=n(OLe,"STRONG",{});var dpt=s(b_e);Qar=r(dpt,"camembert"),dpt.forEach(t),War=r(OLe," \u2014 "),uV=n(OLe,"A",{href:!0});var cpt=s(uV);Har=r(cpt,"TFCamembertForMaskedLM"),cpt.forEach(t),Uar=r(OLe," (CamemBERT model)"),OLe.forEach(t),Jar=i(U),EF=n(U,"LI",{});var VLe=s(EF);v_e=n(VLe,"STRONG",{});var fpt=s(v_e);Yar=r(fpt,"ctrl"),fpt.forEach(t),Kar=r(VLe," \u2014 "),bV=n(VLe,"A",{href:!0});var mpt=s(bV);Zar=r(mpt,"TFCTRLLMHeadModel"),mpt.forEach(t),enr=r(VLe," (CTRL model)"),VLe.forEach(t),onr=i(U),CF=n(U,"LI",{});var XLe=s(CF);F_e=n(XLe,"STRONG",{});var gpt=s(F_e);rnr=r(gpt,"distilbert"),gpt.forEach(t),tnr=r(XLe," \u2014 "),vV=n(XLe,"A",{href:!0});var hpt=s(vV);anr=r(hpt,"TFDistilBertForMaskedLM"),hpt.forEach(t),nnr=r(XLe," (DistilBERT model)"),XLe.forEach(t),snr=i(U),wF=n(U,"LI",{});var zLe=s(wF);T_e=n(zLe,"STRONG",{});var ppt=s(T_e);lnr=r(ppt,"electra"),ppt.forEach(t),inr=r(zLe," \u2014 "),FV=n(zLe,"A",{href:!0});var _pt=s(FV);dnr=r(_pt,"TFElectraForPreTraining"),_pt.forEach(t),cnr=r(zLe," (ELECTRA model)"),zLe.forEach(t),fnr=i(U),AF=n(U,"LI",{});var QLe=s(AF);M_e=n(QLe,"STRONG",{});var upt=s(M_e);mnr=r(upt,"flaubert"),upt.forEach(t),gnr=r(QLe," \u2014 "),TV=n(QLe,"A",{href:!0});var bpt=s(TV);hnr=r(bpt,"TFFlaubertWithLMHeadModel"),bpt.forEach(t),pnr=r(QLe," (FlauBERT model)"),QLe.forEach(t),_nr=i(U),yF=n(U,"LI",{});var WLe=s(yF);E_e=n(WLe,"STRONG",{});var vpt=s(E_e);unr=r(vpt,"funnel"),vpt.forEach(t),bnr=r(WLe," \u2014 "),MV=n(WLe,"A",{href:!0});var Fpt=s(MV);vnr=r(Fpt,"TFFunnelForPreTraining"),Fpt.forEach(t),Fnr=r(WLe," (Funnel Transformer model)"),WLe.forEach(t),Tnr=i(U),LF=n(U,"LI",{});var HLe=s(LF);C_e=n(HLe,"STRONG",{});var Tpt=s(C_e);Mnr=r(Tpt,"gpt2"),Tpt.forEach(t),Enr=r(HLe," \u2014 "),EV=n(HLe,"A",{href:!0});var Mpt=s(EV);Cnr=r(Mpt,"TFGPT2LMHeadModel"),Mpt.forEach(t),wnr=r(HLe," (OpenAI GPT-2 model)"),HLe.forEach(t),Anr=i(U),xF=n(U,"LI",{});var ULe=s(xF);w_e=n(ULe,"STRONG",{});var Ept=s(w_e);ynr=r(Ept,"layoutlm"),Ept.forEach(t),Lnr=r(ULe," \u2014 "),CV=n(ULe,"A",{href:!0});var Cpt=s(CV);xnr=r(Cpt,"TFLayoutLMForMaskedLM"),Cpt.forEach(t),knr=r(ULe," (LayoutLM model)"),ULe.forEach(t),Snr=i(U),kF=n(U,"LI",{});var JLe=s(kF);A_e=n(JLe,"STRONG",{});var wpt=s(A_e);Rnr=r(wpt,"lxmert"),wpt.forEach(t),Bnr=r(JLe," \u2014 "),wV=n(JLe,"A",{href:!0});var Apt=s(wV);Pnr=r(Apt,"TFLxmertForPreTraining"),Apt.forEach(t),$nr=r(JLe," (LXMERT model)"),JLe.forEach(t),Inr=i(U),SF=n(U,"LI",{});var YLe=s(SF);y_e=n(YLe,"STRONG",{});var ypt=s(y_e);qnr=r(ypt,"mobilebert"),ypt.forEach(t),Nnr=r(YLe," \u2014 "),AV=n(YLe,"A",{href:!0});var Lpt=s(AV);jnr=r(Lpt,"TFMobileBertForPreTraining"),Lpt.forEach(t),Dnr=r(YLe," (MobileBERT model)"),YLe.forEach(t),Gnr=i(U),RF=n(U,"LI",{});var KLe=s(RF);L_e=n(KLe,"STRONG",{});var xpt=s(L_e);Onr=r(xpt,"mpnet"),xpt.forEach(t),Vnr=r(KLe," \u2014 "),yV=n(KLe,"A",{href:!0});var kpt=s(yV);Xnr=r(kpt,"TFMPNetForMaskedLM"),kpt.forEach(t),znr=r(KLe," (MPNet model)"),KLe.forEach(t),Qnr=i(U),BF=n(U,"LI",{});var ZLe=s(BF);x_e=n(ZLe,"STRONG",{});var Spt=s(x_e);Wnr=r(Spt,"openai-gpt"),Spt.forEach(t),Hnr=r(ZLe," \u2014 "),LV=n(ZLe,"A",{href:!0});var Rpt=s(LV);Unr=r(Rpt,"TFOpenAIGPTLMHeadModel"),Rpt.forEach(t),Jnr=r(ZLe," (OpenAI GPT model)"),ZLe.forEach(t),Ynr=i(U),PF=n(U,"LI",{});var e7e=s(PF);k_e=n(e7e,"STRONG",{});var Bpt=s(k_e);Knr=r(Bpt,"roberta"),Bpt.forEach(t),Znr=r(e7e," \u2014 "),xV=n(e7e,"A",{href:!0});var Ppt=s(xV);esr=r(Ppt,"TFRobertaForMaskedLM"),Ppt.forEach(t),osr=r(e7e," (RoBERTa model)"),e7e.forEach(t),rsr=i(U),$F=n(U,"LI",{});var o7e=s($F);S_e=n(o7e,"STRONG",{});var $pt=s(S_e);tsr=r($pt,"t5"),$pt.forEach(t),asr=r(o7e," \u2014 "),kV=n(o7e,"A",{href:!0});var Ipt=s(kV);nsr=r(Ipt,"TFT5ForConditionalGeneration"),Ipt.forEach(t),ssr=r(o7e," (T5 model)"),o7e.forEach(t),lsr=i(U),IF=n(U,"LI",{});var r7e=s(IF);R_e=n(r7e,"STRONG",{});var qpt=s(R_e);isr=r(qpt,"tapas"),qpt.forEach(t),dsr=r(r7e," \u2014 "),SV=n(r7e,"A",{href:!0});var Npt=s(SV);csr=r(Npt,"TFTapasForMaskedLM"),Npt.forEach(t),fsr=r(r7e," (TAPAS model)"),r7e.forEach(t),msr=i(U),qF=n(U,"LI",{});var t7e=s(qF);B_e=n(t7e,"STRONG",{});var jpt=s(B_e);gsr=r(jpt,"transfo-xl"),jpt.forEach(t),hsr=r(t7e," \u2014 "),RV=n(t7e,"A",{href:!0});var Dpt=s(RV);psr=r(Dpt,"TFTransfoXLLMHeadModel"),Dpt.forEach(t),_sr=r(t7e," (Transformer-XL model)"),t7e.forEach(t),usr=i(U),NF=n(U,"LI",{});var a7e=s(NF);P_e=n(a7e,"STRONG",{});var Gpt=s(P_e);bsr=r(Gpt,"vit_mae"),Gpt.forEach(t),vsr=r(a7e," \u2014 "),BV=n(a7e,"A",{href:!0});var Opt=s(BV);Fsr=r(Opt,"TFViTMAEForPreTraining"),Opt.forEach(t),Tsr=r(a7e," (ViTMAE model)"),a7e.forEach(t),Msr=i(U),jF=n(U,"LI",{});var n7e=s(jF);$_e=n(n7e,"STRONG",{});var Vpt=s($_e);Esr=r(Vpt,"xlm"),Vpt.forEach(t),Csr=r(n7e," \u2014 "),PV=n(n7e,"A",{href:!0});var Xpt=s(PV);wsr=r(Xpt,"TFXLMWithLMHeadModel"),Xpt.forEach(t),Asr=r(n7e," (XLM model)"),n7e.forEach(t),ysr=i(U),DF=n(U,"LI",{});var s7e=s(DF);I_e=n(s7e,"STRONG",{});var zpt=s(I_e);Lsr=r(zpt,"xlm-roberta"),zpt.forEach(t),xsr=r(s7e," \u2014 "),$V=n(s7e,"A",{href:!0});var Qpt=s($V);ksr=r(Qpt,"TFXLMRobertaForMaskedLM"),Qpt.forEach(t),Ssr=r(s7e," (XLM-RoBERTa model)"),s7e.forEach(t),Rsr=i(U),GF=n(U,"LI",{});var l7e=s(GF);q_e=n(l7e,"STRONG",{});var Wpt=s(q_e);Bsr=r(Wpt,"xlnet"),Wpt.forEach(t),Psr=r(l7e," \u2014 "),IV=n(l7e,"A",{href:!0});var Hpt=s(IV);$sr=r(Hpt,"TFXLNetLMHeadModel"),Hpt.forEach(t),Isr=r(l7e," (XLNet model)"),l7e.forEach(t),U.forEach(t),qsr=i(_a),N_e=n(_a,"P",{});var Upt=s(N_e);Nsr=r(Upt,"Examples:"),Upt.forEach(t),jsr=i(_a),m(vA.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),RBe=i(c),vc=n(c,"H2",{class:!0});var O$e=s(vc);OF=n(O$e,"A",{id:!0,class:!0,href:!0});var Jpt=s(OF);j_e=n(Jpt,"SPAN",{});var Ypt=s(j_e);m(FA.$$.fragment,Ypt),Ypt.forEach(t),Jpt.forEach(t),Dsr=i(O$e),D_e=n(O$e,"SPAN",{});var Kpt=s(D_e);Gsr=r(Kpt,"TFAutoModelForCausalLM"),Kpt.forEach(t),O$e.forEach(t),BBe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(TA.$$.fragment,Xl),Osr=i(Xl),Fc=n(Xl,"P",{});var gJ=s(Fc);Vsr=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qV=n(gJ,"A",{href:!0});var Zpt=s(qV);Xsr=r(Zpt,"from_pretrained()"),Zpt.forEach(t),zsr=r(gJ," class method or the "),NV=n(gJ,"A",{href:!0});var e_t=s(NV);Qsr=r(e_t,"from_config()"),e_t.forEach(t),Wsr=r(gJ,` class
method.`),gJ.forEach(t),Hsr=i(Xl),MA=n(Xl,"P",{});var V$e=s(MA);Usr=r(V$e,"This class cannot be instantiated directly using "),G_e=n(V$e,"CODE",{});var o_t=s(G_e);Jsr=r(o_t,"__init__()"),o_t.forEach(t),Ysr=r(V$e," (throws an error)."),V$e.forEach(t),Ksr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(EA.$$.fragment,zl),Zsr=i(zl),O_e=n(zl,"P",{});var r_t=s(O_e);elr=r(r_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r_t.forEach(t),olr=i(zl),Tc=n(zl,"P",{});var hJ=s(Tc);rlr=r(hJ,`Note:
Loading a model from its configuration file does `),V_e=n(hJ,"STRONG",{});var t_t=s(V_e);tlr=r(t_t,"not"),t_t.forEach(t),alr=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(hJ,"A",{href:!0});var a_t=s(jV);nlr=r(a_t,"from_pretrained()"),a_t.forEach(t),slr=r(hJ," to load the model weights."),hJ.forEach(t),llr=i(zl),X_e=n(zl,"P",{});var n_t=s(X_e);ilr=r(n_t,"Examples:"),n_t.forEach(t),dlr=i(zl),m(CA.$$.fragment,zl),zl.forEach(t),clr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(wA.$$.fragment,ua),flr=i(ua),z_e=n(ua,"P",{});var s_t=s(z_e);mlr=r(s_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s_t.forEach(t),glr=i(ua),vn=n(ua,"P",{});var tE=s(vn);hlr=r(tE,"The model class to instantiate is selected based on the "),Q_e=n(tE,"CODE",{});var l_t=s(Q_e);plr=r(l_t,"model_type"),l_t.forEach(t),_lr=r(tE,` property of the config object (either
passed as an argument or loaded from `),W_e=n(tE,"CODE",{});var i_t=s(W_e);ulr=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),blr=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H_e=n(tE,"CODE",{});var d_t=s(H_e);vlr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),Flr=r(tE,":"),tE.forEach(t),Tlr=i(ua),fe=n(ua,"UL",{});var pe=s(fe);VF=n(pe,"LI",{});var i7e=s(VF);U_e=n(i7e,"STRONG",{});var c_t=s(U_e);Mlr=r(c_t,"bert"),c_t.forEach(t),Elr=r(i7e," \u2014 "),DV=n(i7e,"A",{href:!0});var f_t=s(DV);Clr=r(f_t,"TFBertLMHeadModel"),f_t.forEach(t),wlr=r(i7e," (BERT model)"),i7e.forEach(t),Alr=i(pe),XF=n(pe,"LI",{});var d7e=s(XF);J_e=n(d7e,"STRONG",{});var m_t=s(J_e);ylr=r(m_t,"camembert"),m_t.forEach(t),Llr=r(d7e," \u2014 "),GV=n(d7e,"A",{href:!0});var g_t=s(GV);xlr=r(g_t,"TFCamembertForCausalLM"),g_t.forEach(t),klr=r(d7e," (CamemBERT model)"),d7e.forEach(t),Slr=i(pe),zF=n(pe,"LI",{});var c7e=s(zF);Y_e=n(c7e,"STRONG",{});var h_t=s(Y_e);Rlr=r(h_t,"ctrl"),h_t.forEach(t),Blr=r(c7e," \u2014 "),OV=n(c7e,"A",{href:!0});var p_t=s(OV);Plr=r(p_t,"TFCTRLLMHeadModel"),p_t.forEach(t),$lr=r(c7e," (CTRL model)"),c7e.forEach(t),Ilr=i(pe),QF=n(pe,"LI",{});var f7e=s(QF);K_e=n(f7e,"STRONG",{});var __t=s(K_e);qlr=r(__t,"gpt2"),__t.forEach(t),Nlr=r(f7e," \u2014 "),VV=n(f7e,"A",{href:!0});var u_t=s(VV);jlr=r(u_t,"TFGPT2LMHeadModel"),u_t.forEach(t),Dlr=r(f7e," (OpenAI GPT-2 model)"),f7e.forEach(t),Glr=i(pe),WF=n(pe,"LI",{});var m7e=s(WF);Z_e=n(m7e,"STRONG",{});var b_t=s(Z_e);Olr=r(b_t,"gptj"),b_t.forEach(t),Vlr=r(m7e," \u2014 "),XV=n(m7e,"A",{href:!0});var v_t=s(XV);Xlr=r(v_t,"TFGPTJForCausalLM"),v_t.forEach(t),zlr=r(m7e," (GPT-J model)"),m7e.forEach(t),Qlr=i(pe),HF=n(pe,"LI",{});var g7e=s(HF);eue=n(g7e,"STRONG",{});var F_t=s(eue);Wlr=r(F_t,"openai-gpt"),F_t.forEach(t),Hlr=r(g7e," \u2014 "),zV=n(g7e,"A",{href:!0});var T_t=s(zV);Ulr=r(T_t,"TFOpenAIGPTLMHeadModel"),T_t.forEach(t),Jlr=r(g7e," (OpenAI GPT model)"),g7e.forEach(t),Ylr=i(pe),UF=n(pe,"LI",{});var h7e=s(UF);oue=n(h7e,"STRONG",{});var M_t=s(oue);Klr=r(M_t,"rembert"),M_t.forEach(t),Zlr=r(h7e," \u2014 "),QV=n(h7e,"A",{href:!0});var E_t=s(QV);eir=r(E_t,"TFRemBertForCausalLM"),E_t.forEach(t),oir=r(h7e," (RemBERT model)"),h7e.forEach(t),rir=i(pe),JF=n(pe,"LI",{});var p7e=s(JF);rue=n(p7e,"STRONG",{});var C_t=s(rue);tir=r(C_t,"roberta"),C_t.forEach(t),air=r(p7e," \u2014 "),WV=n(p7e,"A",{href:!0});var w_t=s(WV);nir=r(w_t,"TFRobertaForCausalLM"),w_t.forEach(t),sir=r(p7e," (RoBERTa model)"),p7e.forEach(t),lir=i(pe),YF=n(pe,"LI",{});var _7e=s(YF);tue=n(_7e,"STRONG",{});var A_t=s(tue);iir=r(A_t,"roformer"),A_t.forEach(t),dir=r(_7e," \u2014 "),HV=n(_7e,"A",{href:!0});var y_t=s(HV);cir=r(y_t,"TFRoFormerForCausalLM"),y_t.forEach(t),fir=r(_7e," (RoFormer model)"),_7e.forEach(t),mir=i(pe),KF=n(pe,"LI",{});var u7e=s(KF);aue=n(u7e,"STRONG",{});var L_t=s(aue);gir=r(L_t,"transfo-xl"),L_t.forEach(t),hir=r(u7e," \u2014 "),UV=n(u7e,"A",{href:!0});var x_t=s(UV);pir=r(x_t,"TFTransfoXLLMHeadModel"),x_t.forEach(t),_ir=r(u7e," (Transformer-XL model)"),u7e.forEach(t),uir=i(pe),ZF=n(pe,"LI",{});var b7e=s(ZF);nue=n(b7e,"STRONG",{});var k_t=s(nue);bir=r(k_t,"xlm"),k_t.forEach(t),vir=r(b7e," \u2014 "),JV=n(b7e,"A",{href:!0});var S_t=s(JV);Fir=r(S_t,"TFXLMWithLMHeadModel"),S_t.forEach(t),Tir=r(b7e," (XLM model)"),b7e.forEach(t),Mir=i(pe),eT=n(pe,"LI",{});var v7e=s(eT);sue=n(v7e,"STRONG",{});var R_t=s(sue);Eir=r(R_t,"xlnet"),R_t.forEach(t),Cir=r(v7e," \u2014 "),YV=n(v7e,"A",{href:!0});var B_t=s(YV);wir=r(B_t,"TFXLNetLMHeadModel"),B_t.forEach(t),Air=r(v7e," (XLNet model)"),v7e.forEach(t),pe.forEach(t),yir=i(ua),lue=n(ua,"P",{});var P_t=s(lue);Lir=r(P_t,"Examples:"),P_t.forEach(t),xir=i(ua),m(AA.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),PBe=i(c),Mc=n(c,"H2",{class:!0});var X$e=s(Mc);oT=n(X$e,"A",{id:!0,class:!0,href:!0});var $_t=s(oT);iue=n($_t,"SPAN",{});var I_t=s(iue);m(yA.$$.fragment,I_t),I_t.forEach(t),$_t.forEach(t),kir=i(X$e),due=n(X$e,"SPAN",{});var q_t=s(due);Sir=r(q_t,"TFAutoModelForImageClassification"),q_t.forEach(t),X$e.forEach(t),$Be=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(LA.$$.fragment,Ql),Rir=i(Ql),Ec=n(Ql,"P",{});var pJ=s(Ec);Bir=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),KV=n(pJ,"A",{href:!0});var N_t=s(KV);Pir=r(N_t,"from_pretrained()"),N_t.forEach(t),$ir=r(pJ," class method or the "),ZV=n(pJ,"A",{href:!0});var j_t=s(ZV);Iir=r(j_t,"from_config()"),j_t.forEach(t),qir=r(pJ,` class
method.`),pJ.forEach(t),Nir=i(Ql),xA=n(Ql,"P",{});var z$e=s(xA);jir=r(z$e,"This class cannot be instantiated directly using "),cue=n(z$e,"CODE",{});var D_t=s(cue);Dir=r(D_t,"__init__()"),D_t.forEach(t),Gir=r(z$e," (throws an error)."),z$e.forEach(t),Oir=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(kA.$$.fragment,Wl),Vir=i(Wl),fue=n(Wl,"P",{});var G_t=s(fue);Xir=r(G_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G_t.forEach(t),zir=i(Wl),Cc=n(Wl,"P",{});var _J=s(Cc);Qir=r(_J,`Note:
Loading a model from its configuration file does `),mue=n(_J,"STRONG",{});var O_t=s(mue);Wir=r(O_t,"not"),O_t.forEach(t),Hir=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(_J,"A",{href:!0});var V_t=s(eX);Uir=r(V_t,"from_pretrained()"),V_t.forEach(t),Jir=r(_J," to load the model weights."),_J.forEach(t),Yir=i(Wl),gue=n(Wl,"P",{});var X_t=s(gue);Kir=r(X_t,"Examples:"),X_t.forEach(t),Zir=i(Wl),m(SA.$$.fragment,Wl),Wl.forEach(t),edr=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(RA.$$.fragment,ba),odr=i(ba),hue=n(ba,"P",{});var z_t=s(hue);rdr=r(z_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),z_t.forEach(t),tdr=i(ba),Fn=n(ba,"P",{});var aE=s(Fn);adr=r(aE,"The model class to instantiate is selected based on the "),pue=n(aE,"CODE",{});var Q_t=s(pue);ndr=r(Q_t,"model_type"),Q_t.forEach(t),sdr=r(aE,` property of the config object (either
passed as an argument or loaded from `),_ue=n(aE,"CODE",{});var W_t=s(_ue);ldr=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),idr=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(aE,"CODE",{});var H_t=s(uue);ddr=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),cdr=r(aE,":"),aE.forEach(t),fdr=i(ba),BA=n(ba,"UL",{});var Q$e=s(BA);rT=n(Q$e,"LI",{});var F7e=s(rT);bue=n(F7e,"STRONG",{});var U_t=s(bue);mdr=r(U_t,"convnext"),U_t.forEach(t),gdr=r(F7e," \u2014 "),oX=n(F7e,"A",{href:!0});var J_t=s(oX);hdr=r(J_t,"TFConvNextForImageClassification"),J_t.forEach(t),pdr=r(F7e," (ConvNext model)"),F7e.forEach(t),_dr=i(Q$e),tT=n(Q$e,"LI",{});var T7e=s(tT);vue=n(T7e,"STRONG",{});var Y_t=s(vue);udr=r(Y_t,"vit"),Y_t.forEach(t),bdr=r(T7e," \u2014 "),rX=n(T7e,"A",{href:!0});var K_t=s(rX);vdr=r(K_t,"TFViTForImageClassification"),K_t.forEach(t),Fdr=r(T7e," (ViT model)"),T7e.forEach(t),Q$e.forEach(t),Tdr=i(ba),Fue=n(ba,"P",{});var Z_t=s(Fue);Mdr=r(Z_t,"Examples:"),Z_t.forEach(t),Edr=i(ba),m(PA.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),IBe=i(c),wc=n(c,"H2",{class:!0});var W$e=s(wc);aT=n(W$e,"A",{id:!0,class:!0,href:!0});var eut=s(aT);Tue=n(eut,"SPAN",{});var out=s(Tue);m($A.$$.fragment,out),out.forEach(t),eut.forEach(t),Cdr=i(W$e),Mue=n(W$e,"SPAN",{});var rut=s(Mue);wdr=r(rut,"TFAutoModelForMaskedLM"),rut.forEach(t),W$e.forEach(t),qBe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(IA.$$.fragment,Hl),Adr=i(Hl),Ac=n(Hl,"P",{});var uJ=s(Ac);ydr=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tX=n(uJ,"A",{href:!0});var tut=s(tX);Ldr=r(tut,"from_pretrained()"),tut.forEach(t),xdr=r(uJ," class method or the "),aX=n(uJ,"A",{href:!0});var aut=s(aX);kdr=r(aut,"from_config()"),aut.forEach(t),Sdr=r(uJ,` class
method.`),uJ.forEach(t),Rdr=i(Hl),qA=n(Hl,"P",{});var H$e=s(qA);Bdr=r(H$e,"This class cannot be instantiated directly using "),Eue=n(H$e,"CODE",{});var nut=s(Eue);Pdr=r(nut,"__init__()"),nut.forEach(t),$dr=r(H$e," (throws an error)."),H$e.forEach(t),Idr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(NA.$$.fragment,Ul),qdr=i(Ul),Cue=n(Ul,"P",{});var sut=s(Cue);Ndr=r(sut,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sut.forEach(t),jdr=i(Ul),yc=n(Ul,"P",{});var bJ=s(yc);Ddr=r(bJ,`Note:
Loading a model from its configuration file does `),wue=n(bJ,"STRONG",{});var lut=s(wue);Gdr=r(lut,"not"),lut.forEach(t),Odr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nX=n(bJ,"A",{href:!0});var iut=s(nX);Vdr=r(iut,"from_pretrained()"),iut.forEach(t),Xdr=r(bJ," to load the model weights."),bJ.forEach(t),zdr=i(Ul),Aue=n(Ul,"P",{});var dut=s(Aue);Qdr=r(dut,"Examples:"),dut.forEach(t),Wdr=i(Ul),m(jA.$$.fragment,Ul),Ul.forEach(t),Hdr=i(Hl),bo=n(Hl,"DIV",{class:!0});var va=s(bo);m(DA.$$.fragment,va),Udr=i(va),yue=n(va,"P",{});var cut=s(yue);Jdr=r(cut,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cut.forEach(t),Ydr=i(va),Tn=n(va,"P",{});var nE=s(Tn);Kdr=r(nE,"The model class to instantiate is selected based on the "),Lue=n(nE,"CODE",{});var fut=s(Lue);Zdr=r(fut,"model_type"),fut.forEach(t),ecr=r(nE,` property of the config object (either
passed as an argument or loaded from `),xue=n(nE,"CODE",{});var mut=s(xue);ocr=r(mut,"pretrained_model_name_or_path"),mut.forEach(t),rcr=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kue=n(nE,"CODE",{});var gut=s(kue);tcr=r(gut,"pretrained_model_name_or_path"),gut.forEach(t),acr=r(nE,":"),nE.forEach(t),ncr=i(va),J=n(va,"UL",{});var oe=s(J);nT=n(oe,"LI",{});var M7e=s(nT);Sue=n(M7e,"STRONG",{});var hut=s(Sue);scr=r(hut,"albert"),hut.forEach(t),lcr=r(M7e," \u2014 "),sX=n(M7e,"A",{href:!0});var put=s(sX);icr=r(put,"TFAlbertForMaskedLM"),put.forEach(t),dcr=r(M7e," (ALBERT model)"),M7e.forEach(t),ccr=i(oe),sT=n(oe,"LI",{});var E7e=s(sT);Rue=n(E7e,"STRONG",{});var _ut=s(Rue);fcr=r(_ut,"bert"),_ut.forEach(t),mcr=r(E7e," \u2014 "),lX=n(E7e,"A",{href:!0});var uut=s(lX);gcr=r(uut,"TFBertForMaskedLM"),uut.forEach(t),hcr=r(E7e," (BERT model)"),E7e.forEach(t),pcr=i(oe),lT=n(oe,"LI",{});var C7e=s(lT);Bue=n(C7e,"STRONG",{});var but=s(Bue);_cr=r(but,"camembert"),but.forEach(t),ucr=r(C7e," \u2014 "),iX=n(C7e,"A",{href:!0});var vut=s(iX);bcr=r(vut,"TFCamembertForMaskedLM"),vut.forEach(t),vcr=r(C7e," (CamemBERT model)"),C7e.forEach(t),Fcr=i(oe),iT=n(oe,"LI",{});var w7e=s(iT);Pue=n(w7e,"STRONG",{});var Fut=s(Pue);Tcr=r(Fut,"convbert"),Fut.forEach(t),Mcr=r(w7e," \u2014 "),dX=n(w7e,"A",{href:!0});var Tut=s(dX);Ecr=r(Tut,"TFConvBertForMaskedLM"),Tut.forEach(t),Ccr=r(w7e," (ConvBERT model)"),w7e.forEach(t),wcr=i(oe),dT=n(oe,"LI",{});var A7e=s(dT);$ue=n(A7e,"STRONG",{});var Mut=s($ue);Acr=r(Mut,"deberta"),Mut.forEach(t),ycr=r(A7e," \u2014 "),cX=n(A7e,"A",{href:!0});var Eut=s(cX);Lcr=r(Eut,"TFDebertaForMaskedLM"),Eut.forEach(t),xcr=r(A7e," (DeBERTa model)"),A7e.forEach(t),kcr=i(oe),cT=n(oe,"LI",{});var y7e=s(cT);Iue=n(y7e,"STRONG",{});var Cut=s(Iue);Scr=r(Cut,"deberta-v2"),Cut.forEach(t),Rcr=r(y7e," \u2014 "),fX=n(y7e,"A",{href:!0});var wut=s(fX);Bcr=r(wut,"TFDebertaV2ForMaskedLM"),wut.forEach(t),Pcr=r(y7e," (DeBERTa-v2 model)"),y7e.forEach(t),$cr=i(oe),fT=n(oe,"LI",{});var L7e=s(fT);que=n(L7e,"STRONG",{});var Aut=s(que);Icr=r(Aut,"distilbert"),Aut.forEach(t),qcr=r(L7e," \u2014 "),mX=n(L7e,"A",{href:!0});var yut=s(mX);Ncr=r(yut,"TFDistilBertForMaskedLM"),yut.forEach(t),jcr=r(L7e," (DistilBERT model)"),L7e.forEach(t),Dcr=i(oe),mT=n(oe,"LI",{});var x7e=s(mT);Nue=n(x7e,"STRONG",{});var Lut=s(Nue);Gcr=r(Lut,"electra"),Lut.forEach(t),Ocr=r(x7e," \u2014 "),gX=n(x7e,"A",{href:!0});var xut=s(gX);Vcr=r(xut,"TFElectraForMaskedLM"),xut.forEach(t),Xcr=r(x7e," (ELECTRA model)"),x7e.forEach(t),zcr=i(oe),gT=n(oe,"LI",{});var k7e=s(gT);jue=n(k7e,"STRONG",{});var kut=s(jue);Qcr=r(kut,"flaubert"),kut.forEach(t),Wcr=r(k7e," \u2014 "),hX=n(k7e,"A",{href:!0});var Sut=s(hX);Hcr=r(Sut,"TFFlaubertWithLMHeadModel"),Sut.forEach(t),Ucr=r(k7e," (FlauBERT model)"),k7e.forEach(t),Jcr=i(oe),hT=n(oe,"LI",{});var S7e=s(hT);Due=n(S7e,"STRONG",{});var Rut=s(Due);Ycr=r(Rut,"funnel"),Rut.forEach(t),Kcr=r(S7e," \u2014 "),pX=n(S7e,"A",{href:!0});var But=s(pX);Zcr=r(But,"TFFunnelForMaskedLM"),But.forEach(t),efr=r(S7e," (Funnel Transformer model)"),S7e.forEach(t),ofr=i(oe),pT=n(oe,"LI",{});var R7e=s(pT);Gue=n(R7e,"STRONG",{});var Put=s(Gue);rfr=r(Put,"layoutlm"),Put.forEach(t),tfr=r(R7e," \u2014 "),_X=n(R7e,"A",{href:!0});var $ut=s(_X);afr=r($ut,"TFLayoutLMForMaskedLM"),$ut.forEach(t),nfr=r(R7e," (LayoutLM model)"),R7e.forEach(t),sfr=i(oe),_T=n(oe,"LI",{});var B7e=s(_T);Oue=n(B7e,"STRONG",{});var Iut=s(Oue);lfr=r(Iut,"longformer"),Iut.forEach(t),ifr=r(B7e," \u2014 "),uX=n(B7e,"A",{href:!0});var qut=s(uX);dfr=r(qut,"TFLongformerForMaskedLM"),qut.forEach(t),cfr=r(B7e," (Longformer model)"),B7e.forEach(t),ffr=i(oe),uT=n(oe,"LI",{});var P7e=s(uT);Vue=n(P7e,"STRONG",{});var Nut=s(Vue);mfr=r(Nut,"mobilebert"),Nut.forEach(t),gfr=r(P7e," \u2014 "),bX=n(P7e,"A",{href:!0});var jut=s(bX);hfr=r(jut,"TFMobileBertForMaskedLM"),jut.forEach(t),pfr=r(P7e," (MobileBERT model)"),P7e.forEach(t),_fr=i(oe),bT=n(oe,"LI",{});var $7e=s(bT);Xue=n($7e,"STRONG",{});var Dut=s(Xue);ufr=r(Dut,"mpnet"),Dut.forEach(t),bfr=r($7e," \u2014 "),vX=n($7e,"A",{href:!0});var Gut=s(vX);vfr=r(Gut,"TFMPNetForMaskedLM"),Gut.forEach(t),Ffr=r($7e," (MPNet model)"),$7e.forEach(t),Tfr=i(oe),vT=n(oe,"LI",{});var I7e=s(vT);zue=n(I7e,"STRONG",{});var Out=s(zue);Mfr=r(Out,"rembert"),Out.forEach(t),Efr=r(I7e," \u2014 "),FX=n(I7e,"A",{href:!0});var Vut=s(FX);Cfr=r(Vut,"TFRemBertForMaskedLM"),Vut.forEach(t),wfr=r(I7e," (RemBERT model)"),I7e.forEach(t),Afr=i(oe),FT=n(oe,"LI",{});var q7e=s(FT);Que=n(q7e,"STRONG",{});var Xut=s(Que);yfr=r(Xut,"roberta"),Xut.forEach(t),Lfr=r(q7e," \u2014 "),TX=n(q7e,"A",{href:!0});var zut=s(TX);xfr=r(zut,"TFRobertaForMaskedLM"),zut.forEach(t),kfr=r(q7e," (RoBERTa model)"),q7e.forEach(t),Sfr=i(oe),TT=n(oe,"LI",{});var N7e=s(TT);Wue=n(N7e,"STRONG",{});var Qut=s(Wue);Rfr=r(Qut,"roformer"),Qut.forEach(t),Bfr=r(N7e," \u2014 "),MX=n(N7e,"A",{href:!0});var Wut=s(MX);Pfr=r(Wut,"TFRoFormerForMaskedLM"),Wut.forEach(t),$fr=r(N7e," (RoFormer model)"),N7e.forEach(t),Ifr=i(oe),MT=n(oe,"LI",{});var j7e=s(MT);Hue=n(j7e,"STRONG",{});var Hut=s(Hue);qfr=r(Hut,"tapas"),Hut.forEach(t),Nfr=r(j7e," \u2014 "),EX=n(j7e,"A",{href:!0});var Uut=s(EX);jfr=r(Uut,"TFTapasForMaskedLM"),Uut.forEach(t),Dfr=r(j7e," (TAPAS model)"),j7e.forEach(t),Gfr=i(oe),ET=n(oe,"LI",{});var D7e=s(ET);Uue=n(D7e,"STRONG",{});var Jut=s(Uue);Ofr=r(Jut,"xlm"),Jut.forEach(t),Vfr=r(D7e," \u2014 "),CX=n(D7e,"A",{href:!0});var Yut=s(CX);Xfr=r(Yut,"TFXLMWithLMHeadModel"),Yut.forEach(t),zfr=r(D7e," (XLM model)"),D7e.forEach(t),Qfr=i(oe),CT=n(oe,"LI",{});var G7e=s(CT);Jue=n(G7e,"STRONG",{});var Kut=s(Jue);Wfr=r(Kut,"xlm-roberta"),Kut.forEach(t),Hfr=r(G7e," \u2014 "),wX=n(G7e,"A",{href:!0});var Zut=s(wX);Ufr=r(Zut,"TFXLMRobertaForMaskedLM"),Zut.forEach(t),Jfr=r(G7e," (XLM-RoBERTa model)"),G7e.forEach(t),oe.forEach(t),Yfr=i(va),Yue=n(va,"P",{});var e1t=s(Yue);Kfr=r(e1t,"Examples:"),e1t.forEach(t),Zfr=i(va),m(GA.$$.fragment,va),va.forEach(t),Hl.forEach(t),NBe=i(c),Lc=n(c,"H2",{class:!0});var U$e=s(Lc);wT=n(U$e,"A",{id:!0,class:!0,href:!0});var o1t=s(wT);Kue=n(o1t,"SPAN",{});var r1t=s(Kue);m(OA.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),emr=i(U$e),Zue=n(U$e,"SPAN",{});var t1t=s(Zue);omr=r(t1t,"TFAutoModelForSeq2SeqLM"),t1t.forEach(t),U$e.forEach(t),jBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(VA.$$.fragment,Jl),rmr=i(Jl),xc=n(Jl,"P",{});var vJ=s(xc);tmr=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AX=n(vJ,"A",{href:!0});var a1t=s(AX);amr=r(a1t,"from_pretrained()"),a1t.forEach(t),nmr=r(vJ," class method or the "),yX=n(vJ,"A",{href:!0});var n1t=s(yX);smr=r(n1t,"from_config()"),n1t.forEach(t),lmr=r(vJ,` class
method.`),vJ.forEach(t),imr=i(Jl),XA=n(Jl,"P",{});var J$e=s(XA);dmr=r(J$e,"This class cannot be instantiated directly using "),e1e=n(J$e,"CODE",{});var s1t=s(e1e);cmr=r(s1t,"__init__()"),s1t.forEach(t),fmr=r(J$e," (throws an error)."),J$e.forEach(t),mmr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(zA.$$.fragment,Yl),gmr=i(Yl),o1e=n(Yl,"P",{});var l1t=s(o1e);hmr=r(l1t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),l1t.forEach(t),pmr=i(Yl),kc=n(Yl,"P",{});var FJ=s(kc);_mr=r(FJ,`Note:
Loading a model from its configuration file does `),r1e=n(FJ,"STRONG",{});var i1t=s(r1e);umr=r(i1t,"not"),i1t.forEach(t),bmr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(FJ,"A",{href:!0});var d1t=s(LX);vmr=r(d1t,"from_pretrained()"),d1t.forEach(t),Fmr=r(FJ," to load the model weights."),FJ.forEach(t),Tmr=i(Yl),t1e=n(Yl,"P",{});var c1t=s(t1e);Mmr=r(c1t,"Examples:"),c1t.forEach(t),Emr=i(Yl),m(QA.$$.fragment,Yl),Yl.forEach(t),Cmr=i(Jl),vo=n(Jl,"DIV",{class:!0});var Fa=s(vo);m(WA.$$.fragment,Fa),wmr=i(Fa),a1e=n(Fa,"P",{});var f1t=s(a1e);Amr=r(f1t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),f1t.forEach(t),ymr=i(Fa),Mn=n(Fa,"P",{});var sE=s(Mn);Lmr=r(sE,"The model class to instantiate is selected based on the "),n1e=n(sE,"CODE",{});var m1t=s(n1e);xmr=r(m1t,"model_type"),m1t.forEach(t),kmr=r(sE,` property of the config object (either
passed as an argument or loaded from `),s1e=n(sE,"CODE",{});var g1t=s(s1e);Smr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Rmr=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(sE,"CODE",{});var h1t=s(l1e);Bmr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Pmr=r(sE,":"),sE.forEach(t),$mr=i(Fa),be=n(Fa,"UL",{});var we=s(be);AT=n(we,"LI",{});var O7e=s(AT);i1e=n(O7e,"STRONG",{});var p1t=s(i1e);Imr=r(p1t,"bart"),p1t.forEach(t),qmr=r(O7e," \u2014 "),xX=n(O7e,"A",{href:!0});var _1t=s(xX);Nmr=r(_1t,"TFBartForConditionalGeneration"),_1t.forEach(t),jmr=r(O7e," (BART model)"),O7e.forEach(t),Dmr=i(we),yT=n(we,"LI",{});var V7e=s(yT);d1e=n(V7e,"STRONG",{});var u1t=s(d1e);Gmr=r(u1t,"blenderbot"),u1t.forEach(t),Omr=r(V7e," \u2014 "),kX=n(V7e,"A",{href:!0});var b1t=s(kX);Vmr=r(b1t,"TFBlenderbotForConditionalGeneration"),b1t.forEach(t),Xmr=r(V7e," (Blenderbot model)"),V7e.forEach(t),zmr=i(we),LT=n(we,"LI",{});var X7e=s(LT);c1e=n(X7e,"STRONG",{});var v1t=s(c1e);Qmr=r(v1t,"blenderbot-small"),v1t.forEach(t),Wmr=r(X7e," \u2014 "),SX=n(X7e,"A",{href:!0});var F1t=s(SX);Hmr=r(F1t,"TFBlenderbotSmallForConditionalGeneration"),F1t.forEach(t),Umr=r(X7e," (BlenderbotSmall model)"),X7e.forEach(t),Jmr=i(we),xT=n(we,"LI",{});var z7e=s(xT);f1e=n(z7e,"STRONG",{});var T1t=s(f1e);Ymr=r(T1t,"encoder-decoder"),T1t.forEach(t),Kmr=r(z7e," \u2014 "),RX=n(z7e,"A",{href:!0});var M1t=s(RX);Zmr=r(M1t,"TFEncoderDecoderModel"),M1t.forEach(t),egr=r(z7e," (Encoder decoder model)"),z7e.forEach(t),ogr=i(we),kT=n(we,"LI",{});var Q7e=s(kT);m1e=n(Q7e,"STRONG",{});var E1t=s(m1e);rgr=r(E1t,"led"),E1t.forEach(t),tgr=r(Q7e," \u2014 "),BX=n(Q7e,"A",{href:!0});var C1t=s(BX);agr=r(C1t,"TFLEDForConditionalGeneration"),C1t.forEach(t),ngr=r(Q7e," (LED model)"),Q7e.forEach(t),sgr=i(we),ST=n(we,"LI",{});var W7e=s(ST);g1e=n(W7e,"STRONG",{});var w1t=s(g1e);lgr=r(w1t,"marian"),w1t.forEach(t),igr=r(W7e," \u2014 "),PX=n(W7e,"A",{href:!0});var A1t=s(PX);dgr=r(A1t,"TFMarianMTModel"),A1t.forEach(t),cgr=r(W7e," (Marian model)"),W7e.forEach(t),fgr=i(we),RT=n(we,"LI",{});var H7e=s(RT);h1e=n(H7e,"STRONG",{});var y1t=s(h1e);mgr=r(y1t,"mbart"),y1t.forEach(t),ggr=r(H7e," \u2014 "),$X=n(H7e,"A",{href:!0});var L1t=s($X);hgr=r(L1t,"TFMBartForConditionalGeneration"),L1t.forEach(t),pgr=r(H7e," (mBART model)"),H7e.forEach(t),_gr=i(we),BT=n(we,"LI",{});var U7e=s(BT);p1e=n(U7e,"STRONG",{});var x1t=s(p1e);ugr=r(x1t,"mt5"),x1t.forEach(t),bgr=r(U7e," \u2014 "),IX=n(U7e,"A",{href:!0});var k1t=s(IX);vgr=r(k1t,"TFMT5ForConditionalGeneration"),k1t.forEach(t),Fgr=r(U7e," (mT5 model)"),U7e.forEach(t),Tgr=i(we),PT=n(we,"LI",{});var J7e=s(PT);_1e=n(J7e,"STRONG",{});var S1t=s(_1e);Mgr=r(S1t,"pegasus"),S1t.forEach(t),Egr=r(J7e," \u2014 "),qX=n(J7e,"A",{href:!0});var R1t=s(qX);Cgr=r(R1t,"TFPegasusForConditionalGeneration"),R1t.forEach(t),wgr=r(J7e," (Pegasus model)"),J7e.forEach(t),Agr=i(we),$T=n(we,"LI",{});var Y7e=s($T);u1e=n(Y7e,"STRONG",{});var B1t=s(u1e);ygr=r(B1t,"t5"),B1t.forEach(t),Lgr=r(Y7e," \u2014 "),NX=n(Y7e,"A",{href:!0});var P1t=s(NX);xgr=r(P1t,"TFT5ForConditionalGeneration"),P1t.forEach(t),kgr=r(Y7e," (T5 model)"),Y7e.forEach(t),we.forEach(t),Sgr=i(Fa),b1e=n(Fa,"P",{});var $1t=s(b1e);Rgr=r($1t,"Examples:"),$1t.forEach(t),Bgr=i(Fa),m(HA.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),DBe=i(c),Sc=n(c,"H2",{class:!0});var Y$e=s(Sc);IT=n(Y$e,"A",{id:!0,class:!0,href:!0});var I1t=s(IT);v1e=n(I1t,"SPAN",{});var q1t=s(v1e);m(UA.$$.fragment,q1t),q1t.forEach(t),I1t.forEach(t),Pgr=i(Y$e),F1e=n(Y$e,"SPAN",{});var N1t=s(F1e);$gr=r(N1t,"TFAutoModelForSequenceClassification"),N1t.forEach(t),Y$e.forEach(t),GBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(JA.$$.fragment,Kl),Igr=i(Kl),Rc=n(Kl,"P",{});var TJ=s(Rc);qgr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jX=n(TJ,"A",{href:!0});var j1t=s(jX);Ngr=r(j1t,"from_pretrained()"),j1t.forEach(t),jgr=r(TJ," class method or the "),DX=n(TJ,"A",{href:!0});var D1t=s(DX);Dgr=r(D1t,"from_config()"),D1t.forEach(t),Ggr=r(TJ,` class
method.`),TJ.forEach(t),Ogr=i(Kl),YA=n(Kl,"P",{});var K$e=s(YA);Vgr=r(K$e,"This class cannot be instantiated directly using "),T1e=n(K$e,"CODE",{});var G1t=s(T1e);Xgr=r(G1t,"__init__()"),G1t.forEach(t),zgr=r(K$e," (throws an error)."),K$e.forEach(t),Qgr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(KA.$$.fragment,Zl),Wgr=i(Zl),M1e=n(Zl,"P",{});var O1t=s(M1e);Hgr=r(O1t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O1t.forEach(t),Ugr=i(Zl),Bc=n(Zl,"P",{});var MJ=s(Bc);Jgr=r(MJ,`Note:
Loading a model from its configuration file does `),E1e=n(MJ,"STRONG",{});var V1t=s(E1e);Ygr=r(V1t,"not"),V1t.forEach(t),Kgr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(MJ,"A",{href:!0});var X1t=s(GX);Zgr=r(X1t,"from_pretrained()"),X1t.forEach(t),ehr=r(MJ," to load the model weights."),MJ.forEach(t),ohr=i(Zl),C1e=n(Zl,"P",{});var z1t=s(C1e);rhr=r(z1t,"Examples:"),z1t.forEach(t),thr=i(Zl),m(ZA.$$.fragment,Zl),Zl.forEach(t),ahr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var Ta=s(Fo);m(e0.$$.fragment,Ta),nhr=i(Ta),w1e=n(Ta,"P",{});var Q1t=s(w1e);shr=r(Q1t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Q1t.forEach(t),lhr=i(Ta),En=n(Ta,"P",{});var lE=s(En);ihr=r(lE,"The model class to instantiate is selected based on the "),A1e=n(lE,"CODE",{});var W1t=s(A1e);dhr=r(W1t,"model_type"),W1t.forEach(t),chr=r(lE,` property of the config object (either
passed as an argument or loaded from `),y1e=n(lE,"CODE",{});var H1t=s(y1e);fhr=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),mhr=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L1e=n(lE,"CODE",{});var U1t=s(L1e);ghr=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),hhr=r(lE,":"),lE.forEach(t),phr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);qT=n(Q,"LI",{});var K7e=s(qT);x1e=n(K7e,"STRONG",{});var J1t=s(x1e);_hr=r(J1t,"albert"),J1t.forEach(t),uhr=r(K7e," \u2014 "),OX=n(K7e,"A",{href:!0});var Y1t=s(OX);bhr=r(Y1t,"TFAlbertForSequenceClassification"),Y1t.forEach(t),vhr=r(K7e," (ALBERT model)"),K7e.forEach(t),Fhr=i(Q),NT=n(Q,"LI",{});var Z7e=s(NT);k1e=n(Z7e,"STRONG",{});var K1t=s(k1e);Thr=r(K1t,"bert"),K1t.forEach(t),Mhr=r(Z7e," \u2014 "),VX=n(Z7e,"A",{href:!0});var Z1t=s(VX);Ehr=r(Z1t,"TFBertForSequenceClassification"),Z1t.forEach(t),Chr=r(Z7e," (BERT model)"),Z7e.forEach(t),whr=i(Q),jT=n(Q,"LI",{});var exe=s(jT);S1e=n(exe,"STRONG",{});var ebt=s(S1e);Ahr=r(ebt,"camembert"),ebt.forEach(t),yhr=r(exe," \u2014 "),XX=n(exe,"A",{href:!0});var obt=s(XX);Lhr=r(obt,"TFCamembertForSequenceClassification"),obt.forEach(t),xhr=r(exe," (CamemBERT model)"),exe.forEach(t),khr=i(Q),DT=n(Q,"LI",{});var oxe=s(DT);R1e=n(oxe,"STRONG",{});var rbt=s(R1e);Shr=r(rbt,"convbert"),rbt.forEach(t),Rhr=r(oxe," \u2014 "),zX=n(oxe,"A",{href:!0});var tbt=s(zX);Bhr=r(tbt,"TFConvBertForSequenceClassification"),tbt.forEach(t),Phr=r(oxe," (ConvBERT model)"),oxe.forEach(t),$hr=i(Q),GT=n(Q,"LI",{});var rxe=s(GT);B1e=n(rxe,"STRONG",{});var abt=s(B1e);Ihr=r(abt,"ctrl"),abt.forEach(t),qhr=r(rxe," \u2014 "),QX=n(rxe,"A",{href:!0});var nbt=s(QX);Nhr=r(nbt,"TFCTRLForSequenceClassification"),nbt.forEach(t),jhr=r(rxe," (CTRL model)"),rxe.forEach(t),Dhr=i(Q),OT=n(Q,"LI",{});var txe=s(OT);P1e=n(txe,"STRONG",{});var sbt=s(P1e);Ghr=r(sbt,"deberta"),sbt.forEach(t),Ohr=r(txe," \u2014 "),WX=n(txe,"A",{href:!0});var lbt=s(WX);Vhr=r(lbt,"TFDebertaForSequenceClassification"),lbt.forEach(t),Xhr=r(txe," (DeBERTa model)"),txe.forEach(t),zhr=i(Q),VT=n(Q,"LI",{});var axe=s(VT);$1e=n(axe,"STRONG",{});var ibt=s($1e);Qhr=r(ibt,"deberta-v2"),ibt.forEach(t),Whr=r(axe," \u2014 "),HX=n(axe,"A",{href:!0});var dbt=s(HX);Hhr=r(dbt,"TFDebertaV2ForSequenceClassification"),dbt.forEach(t),Uhr=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),Jhr=i(Q),XT=n(Q,"LI",{});var nxe=s(XT);I1e=n(nxe,"STRONG",{});var cbt=s(I1e);Yhr=r(cbt,"distilbert"),cbt.forEach(t),Khr=r(nxe," \u2014 "),UX=n(nxe,"A",{href:!0});var fbt=s(UX);Zhr=r(fbt,"TFDistilBertForSequenceClassification"),fbt.forEach(t),epr=r(nxe," (DistilBERT model)"),nxe.forEach(t),opr=i(Q),zT=n(Q,"LI",{});var sxe=s(zT);q1e=n(sxe,"STRONG",{});var mbt=s(q1e);rpr=r(mbt,"electra"),mbt.forEach(t),tpr=r(sxe," \u2014 "),JX=n(sxe,"A",{href:!0});var gbt=s(JX);apr=r(gbt,"TFElectraForSequenceClassification"),gbt.forEach(t),npr=r(sxe," (ELECTRA model)"),sxe.forEach(t),spr=i(Q),QT=n(Q,"LI",{});var lxe=s(QT);N1e=n(lxe,"STRONG",{});var hbt=s(N1e);lpr=r(hbt,"flaubert"),hbt.forEach(t),ipr=r(lxe," \u2014 "),YX=n(lxe,"A",{href:!0});var pbt=s(YX);dpr=r(pbt,"TFFlaubertForSequenceClassification"),pbt.forEach(t),cpr=r(lxe," (FlauBERT model)"),lxe.forEach(t),fpr=i(Q),WT=n(Q,"LI",{});var ixe=s(WT);j1e=n(ixe,"STRONG",{});var _bt=s(j1e);mpr=r(_bt,"funnel"),_bt.forEach(t),gpr=r(ixe," \u2014 "),KX=n(ixe,"A",{href:!0});var ubt=s(KX);hpr=r(ubt,"TFFunnelForSequenceClassification"),ubt.forEach(t),ppr=r(ixe," (Funnel Transformer model)"),ixe.forEach(t),_pr=i(Q),HT=n(Q,"LI",{});var dxe=s(HT);D1e=n(dxe,"STRONG",{});var bbt=s(D1e);upr=r(bbt,"gpt2"),bbt.forEach(t),bpr=r(dxe," \u2014 "),ZX=n(dxe,"A",{href:!0});var vbt=s(ZX);vpr=r(vbt,"TFGPT2ForSequenceClassification"),vbt.forEach(t),Fpr=r(dxe," (OpenAI GPT-2 model)"),dxe.forEach(t),Tpr=i(Q),UT=n(Q,"LI",{});var cxe=s(UT);G1e=n(cxe,"STRONG",{});var Fbt=s(G1e);Mpr=r(Fbt,"gptj"),Fbt.forEach(t),Epr=r(cxe," \u2014 "),ez=n(cxe,"A",{href:!0});var Tbt=s(ez);Cpr=r(Tbt,"TFGPTJForSequenceClassification"),Tbt.forEach(t),wpr=r(cxe," (GPT-J model)"),cxe.forEach(t),Apr=i(Q),JT=n(Q,"LI",{});var fxe=s(JT);O1e=n(fxe,"STRONG",{});var Mbt=s(O1e);ypr=r(Mbt,"layoutlm"),Mbt.forEach(t),Lpr=r(fxe," \u2014 "),oz=n(fxe,"A",{href:!0});var Ebt=s(oz);xpr=r(Ebt,"TFLayoutLMForSequenceClassification"),Ebt.forEach(t),kpr=r(fxe," (LayoutLM model)"),fxe.forEach(t),Spr=i(Q),YT=n(Q,"LI",{});var mxe=s(YT);V1e=n(mxe,"STRONG",{});var Cbt=s(V1e);Rpr=r(Cbt,"longformer"),Cbt.forEach(t),Bpr=r(mxe," \u2014 "),rz=n(mxe,"A",{href:!0});var wbt=s(rz);Ppr=r(wbt,"TFLongformerForSequenceClassification"),wbt.forEach(t),$pr=r(mxe," (Longformer model)"),mxe.forEach(t),Ipr=i(Q),KT=n(Q,"LI",{});var gxe=s(KT);X1e=n(gxe,"STRONG",{});var Abt=s(X1e);qpr=r(Abt,"mobilebert"),Abt.forEach(t),Npr=r(gxe," \u2014 "),tz=n(gxe,"A",{href:!0});var ybt=s(tz);jpr=r(ybt,"TFMobileBertForSequenceClassification"),ybt.forEach(t),Dpr=r(gxe," (MobileBERT model)"),gxe.forEach(t),Gpr=i(Q),ZT=n(Q,"LI",{});var hxe=s(ZT);z1e=n(hxe,"STRONG",{});var Lbt=s(z1e);Opr=r(Lbt,"mpnet"),Lbt.forEach(t),Vpr=r(hxe," \u2014 "),az=n(hxe,"A",{href:!0});var xbt=s(az);Xpr=r(xbt,"TFMPNetForSequenceClassification"),xbt.forEach(t),zpr=r(hxe," (MPNet model)"),hxe.forEach(t),Qpr=i(Q),e8=n(Q,"LI",{});var pxe=s(e8);Q1e=n(pxe,"STRONG",{});var kbt=s(Q1e);Wpr=r(kbt,"openai-gpt"),kbt.forEach(t),Hpr=r(pxe," \u2014 "),nz=n(pxe,"A",{href:!0});var Sbt=s(nz);Upr=r(Sbt,"TFOpenAIGPTForSequenceClassification"),Sbt.forEach(t),Jpr=r(pxe," (OpenAI GPT model)"),pxe.forEach(t),Ypr=i(Q),o8=n(Q,"LI",{});var _xe=s(o8);W1e=n(_xe,"STRONG",{});var Rbt=s(W1e);Kpr=r(Rbt,"rembert"),Rbt.forEach(t),Zpr=r(_xe," \u2014 "),sz=n(_xe,"A",{href:!0});var Bbt=s(sz);e_r=r(Bbt,"TFRemBertForSequenceClassification"),Bbt.forEach(t),o_r=r(_xe," (RemBERT model)"),_xe.forEach(t),r_r=i(Q),r8=n(Q,"LI",{});var uxe=s(r8);H1e=n(uxe,"STRONG",{});var Pbt=s(H1e);t_r=r(Pbt,"roberta"),Pbt.forEach(t),a_r=r(uxe," \u2014 "),lz=n(uxe,"A",{href:!0});var $bt=s(lz);n_r=r($bt,"TFRobertaForSequenceClassification"),$bt.forEach(t),s_r=r(uxe," (RoBERTa model)"),uxe.forEach(t),l_r=i(Q),t8=n(Q,"LI",{});var bxe=s(t8);U1e=n(bxe,"STRONG",{});var Ibt=s(U1e);i_r=r(Ibt,"roformer"),Ibt.forEach(t),d_r=r(bxe," \u2014 "),iz=n(bxe,"A",{href:!0});var qbt=s(iz);c_r=r(qbt,"TFRoFormerForSequenceClassification"),qbt.forEach(t),f_r=r(bxe," (RoFormer model)"),bxe.forEach(t),m_r=i(Q),a8=n(Q,"LI",{});var vxe=s(a8);J1e=n(vxe,"STRONG",{});var Nbt=s(J1e);g_r=r(Nbt,"tapas"),Nbt.forEach(t),h_r=r(vxe," \u2014 "),dz=n(vxe,"A",{href:!0});var jbt=s(dz);p_r=r(jbt,"TFTapasForSequenceClassification"),jbt.forEach(t),__r=r(vxe," (TAPAS model)"),vxe.forEach(t),u_r=i(Q),n8=n(Q,"LI",{});var Fxe=s(n8);Y1e=n(Fxe,"STRONG",{});var Dbt=s(Y1e);b_r=r(Dbt,"transfo-xl"),Dbt.forEach(t),v_r=r(Fxe," \u2014 "),cz=n(Fxe,"A",{href:!0});var Gbt=s(cz);F_r=r(Gbt,"TFTransfoXLForSequenceClassification"),Gbt.forEach(t),T_r=r(Fxe," (Transformer-XL model)"),Fxe.forEach(t),M_r=i(Q),s8=n(Q,"LI",{});var Txe=s(s8);K1e=n(Txe,"STRONG",{});var Obt=s(K1e);E_r=r(Obt,"xlm"),Obt.forEach(t),C_r=r(Txe," \u2014 "),fz=n(Txe,"A",{href:!0});var Vbt=s(fz);w_r=r(Vbt,"TFXLMForSequenceClassification"),Vbt.forEach(t),A_r=r(Txe," (XLM model)"),Txe.forEach(t),y_r=i(Q),l8=n(Q,"LI",{});var Mxe=s(l8);Z1e=n(Mxe,"STRONG",{});var Xbt=s(Z1e);L_r=r(Xbt,"xlm-roberta"),Xbt.forEach(t),x_r=r(Mxe," \u2014 "),mz=n(Mxe,"A",{href:!0});var zbt=s(mz);k_r=r(zbt,"TFXLMRobertaForSequenceClassification"),zbt.forEach(t),S_r=r(Mxe," (XLM-RoBERTa model)"),Mxe.forEach(t),R_r=i(Q),i8=n(Q,"LI",{});var Exe=s(i8);ebe=n(Exe,"STRONG",{});var Qbt=s(ebe);B_r=r(Qbt,"xlnet"),Qbt.forEach(t),P_r=r(Exe," \u2014 "),gz=n(Exe,"A",{href:!0});var Wbt=s(gz);$_r=r(Wbt,"TFXLNetForSequenceClassification"),Wbt.forEach(t),I_r=r(Exe," (XLNet model)"),Exe.forEach(t),Q.forEach(t),q_r=i(Ta),obe=n(Ta,"P",{});var Hbt=s(obe);N_r=r(Hbt,"Examples:"),Hbt.forEach(t),j_r=i(Ta),m(o0.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),OBe=i(c),Pc=n(c,"H2",{class:!0});var Z$e=s(Pc);d8=n(Z$e,"A",{id:!0,class:!0,href:!0});var Ubt=s(d8);rbe=n(Ubt,"SPAN",{});var Jbt=s(rbe);m(r0.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),D_r=i(Z$e),tbe=n(Z$e,"SPAN",{});var Ybt=s(tbe);G_r=r(Ybt,"TFAutoModelForMultipleChoice"),Ybt.forEach(t),Z$e.forEach(t),VBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(t0.$$.fragment,ei),O_r=i(ei),$c=n(ei,"P",{});var EJ=s($c);V_r=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hz=n(EJ,"A",{href:!0});var Kbt=s(hz);X_r=r(Kbt,"from_pretrained()"),Kbt.forEach(t),z_r=r(EJ," class method or the "),pz=n(EJ,"A",{href:!0});var Zbt=s(pz);Q_r=r(Zbt,"from_config()"),Zbt.forEach(t),W_r=r(EJ,` class
method.`),EJ.forEach(t),H_r=i(ei),a0=n(ei,"P",{});var eIe=s(a0);U_r=r(eIe,"This class cannot be instantiated directly using "),abe=n(eIe,"CODE",{});var e2t=s(abe);J_r=r(e2t,"__init__()"),e2t.forEach(t),Y_r=r(eIe," (throws an error)."),eIe.forEach(t),K_r=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);m(n0.$$.fragment,oi),Z_r=i(oi),nbe=n(oi,"P",{});var o2t=s(nbe);eur=r(o2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o2t.forEach(t),our=i(oi),Ic=n(oi,"P",{});var CJ=s(Ic);rur=r(CJ,`Note:
Loading a model from its configuration file does `),sbe=n(CJ,"STRONG",{});var r2t=s(sbe);tur=r(r2t,"not"),r2t.forEach(t),aur=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(CJ,"A",{href:!0});var t2t=s(_z);nur=r(t2t,"from_pretrained()"),t2t.forEach(t),sur=r(CJ," to load the model weights."),CJ.forEach(t),lur=i(oi),lbe=n(oi,"P",{});var a2t=s(lbe);iur=r(a2t,"Examples:"),a2t.forEach(t),dur=i(oi),m(s0.$$.fragment,oi),oi.forEach(t),cur=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(l0.$$.fragment,Ma),fur=i(Ma),ibe=n(Ma,"P",{});var n2t=s(ibe);mur=r(n2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),n2t.forEach(t),gur=i(Ma),Cn=n(Ma,"P",{});var iE=s(Cn);hur=r(iE,"The model class to instantiate is selected based on the "),dbe=n(iE,"CODE",{});var s2t=s(dbe);pur=r(s2t,"model_type"),s2t.forEach(t),_ur=r(iE,` property of the config object (either
passed as an argument or loaded from `),cbe=n(iE,"CODE",{});var l2t=s(cbe);uur=r(l2t,"pretrained_model_name_or_path"),l2t.forEach(t),bur=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(iE,"CODE",{});var i2t=s(fbe);vur=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),Fur=r(iE,":"),iE.forEach(t),Tur=i(Ma),se=n(Ma,"UL",{});var ie=s(se);c8=n(ie,"LI",{});var Cxe=s(c8);mbe=n(Cxe,"STRONG",{});var d2t=s(mbe);Mur=r(d2t,"albert"),d2t.forEach(t),Eur=r(Cxe," \u2014 "),uz=n(Cxe,"A",{href:!0});var c2t=s(uz);Cur=r(c2t,"TFAlbertForMultipleChoice"),c2t.forEach(t),wur=r(Cxe," (ALBERT model)"),Cxe.forEach(t),Aur=i(ie),f8=n(ie,"LI",{});var wxe=s(f8);gbe=n(wxe,"STRONG",{});var f2t=s(gbe);yur=r(f2t,"bert"),f2t.forEach(t),Lur=r(wxe," \u2014 "),bz=n(wxe,"A",{href:!0});var m2t=s(bz);xur=r(m2t,"TFBertForMultipleChoice"),m2t.forEach(t),kur=r(wxe," (BERT model)"),wxe.forEach(t),Sur=i(ie),m8=n(ie,"LI",{});var Axe=s(m8);hbe=n(Axe,"STRONG",{});var g2t=s(hbe);Rur=r(g2t,"camembert"),g2t.forEach(t),Bur=r(Axe," \u2014 "),vz=n(Axe,"A",{href:!0});var h2t=s(vz);Pur=r(h2t,"TFCamembertForMultipleChoice"),h2t.forEach(t),$ur=r(Axe," (CamemBERT model)"),Axe.forEach(t),Iur=i(ie),g8=n(ie,"LI",{});var yxe=s(g8);pbe=n(yxe,"STRONG",{});var p2t=s(pbe);qur=r(p2t,"convbert"),p2t.forEach(t),Nur=r(yxe," \u2014 "),Fz=n(yxe,"A",{href:!0});var _2t=s(Fz);jur=r(_2t,"TFConvBertForMultipleChoice"),_2t.forEach(t),Dur=r(yxe," (ConvBERT model)"),yxe.forEach(t),Gur=i(ie),h8=n(ie,"LI",{});var Lxe=s(h8);_be=n(Lxe,"STRONG",{});var u2t=s(_be);Our=r(u2t,"distilbert"),u2t.forEach(t),Vur=r(Lxe," \u2014 "),Tz=n(Lxe,"A",{href:!0});var b2t=s(Tz);Xur=r(b2t,"TFDistilBertForMultipleChoice"),b2t.forEach(t),zur=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),Qur=i(ie),p8=n(ie,"LI",{});var xxe=s(p8);ube=n(xxe,"STRONG",{});var v2t=s(ube);Wur=r(v2t,"electra"),v2t.forEach(t),Hur=r(xxe," \u2014 "),Mz=n(xxe,"A",{href:!0});var F2t=s(Mz);Uur=r(F2t,"TFElectraForMultipleChoice"),F2t.forEach(t),Jur=r(xxe," (ELECTRA model)"),xxe.forEach(t),Yur=i(ie),_8=n(ie,"LI",{});var kxe=s(_8);bbe=n(kxe,"STRONG",{});var T2t=s(bbe);Kur=r(T2t,"flaubert"),T2t.forEach(t),Zur=r(kxe," \u2014 "),Ez=n(kxe,"A",{href:!0});var M2t=s(Ez);e1r=r(M2t,"TFFlaubertForMultipleChoice"),M2t.forEach(t),o1r=r(kxe," (FlauBERT model)"),kxe.forEach(t),r1r=i(ie),u8=n(ie,"LI",{});var Sxe=s(u8);vbe=n(Sxe,"STRONG",{});var E2t=s(vbe);t1r=r(E2t,"funnel"),E2t.forEach(t),a1r=r(Sxe," \u2014 "),Cz=n(Sxe,"A",{href:!0});var C2t=s(Cz);n1r=r(C2t,"TFFunnelForMultipleChoice"),C2t.forEach(t),s1r=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),l1r=i(ie),b8=n(ie,"LI",{});var Rxe=s(b8);Fbe=n(Rxe,"STRONG",{});var w2t=s(Fbe);i1r=r(w2t,"longformer"),w2t.forEach(t),d1r=r(Rxe," \u2014 "),wz=n(Rxe,"A",{href:!0});var A2t=s(wz);c1r=r(A2t,"TFLongformerForMultipleChoice"),A2t.forEach(t),f1r=r(Rxe," (Longformer model)"),Rxe.forEach(t),m1r=i(ie),v8=n(ie,"LI",{});var Bxe=s(v8);Tbe=n(Bxe,"STRONG",{});var y2t=s(Tbe);g1r=r(y2t,"mobilebert"),y2t.forEach(t),h1r=r(Bxe," \u2014 "),Az=n(Bxe,"A",{href:!0});var L2t=s(Az);p1r=r(L2t,"TFMobileBertForMultipleChoice"),L2t.forEach(t),_1r=r(Bxe," (MobileBERT model)"),Bxe.forEach(t),u1r=i(ie),F8=n(ie,"LI",{});var Pxe=s(F8);Mbe=n(Pxe,"STRONG",{});var x2t=s(Mbe);b1r=r(x2t,"mpnet"),x2t.forEach(t),v1r=r(Pxe," \u2014 "),yz=n(Pxe,"A",{href:!0});var k2t=s(yz);F1r=r(k2t,"TFMPNetForMultipleChoice"),k2t.forEach(t),T1r=r(Pxe," (MPNet model)"),Pxe.forEach(t),M1r=i(ie),T8=n(ie,"LI",{});var $xe=s(T8);Ebe=n($xe,"STRONG",{});var S2t=s(Ebe);E1r=r(S2t,"rembert"),S2t.forEach(t),C1r=r($xe," \u2014 "),Lz=n($xe,"A",{href:!0});var R2t=s(Lz);w1r=r(R2t,"TFRemBertForMultipleChoice"),R2t.forEach(t),A1r=r($xe," (RemBERT model)"),$xe.forEach(t),y1r=i(ie),M8=n(ie,"LI",{});var Ixe=s(M8);Cbe=n(Ixe,"STRONG",{});var B2t=s(Cbe);L1r=r(B2t,"roberta"),B2t.forEach(t),x1r=r(Ixe," \u2014 "),xz=n(Ixe,"A",{href:!0});var P2t=s(xz);k1r=r(P2t,"TFRobertaForMultipleChoice"),P2t.forEach(t),S1r=r(Ixe," (RoBERTa model)"),Ixe.forEach(t),R1r=i(ie),E8=n(ie,"LI",{});var qxe=s(E8);wbe=n(qxe,"STRONG",{});var $2t=s(wbe);B1r=r($2t,"roformer"),$2t.forEach(t),P1r=r(qxe," \u2014 "),kz=n(qxe,"A",{href:!0});var I2t=s(kz);$1r=r(I2t,"TFRoFormerForMultipleChoice"),I2t.forEach(t),I1r=r(qxe," (RoFormer model)"),qxe.forEach(t),q1r=i(ie),C8=n(ie,"LI",{});var Nxe=s(C8);Abe=n(Nxe,"STRONG",{});var q2t=s(Abe);N1r=r(q2t,"xlm"),q2t.forEach(t),j1r=r(Nxe," \u2014 "),Sz=n(Nxe,"A",{href:!0});var N2t=s(Sz);D1r=r(N2t,"TFXLMForMultipleChoice"),N2t.forEach(t),G1r=r(Nxe," (XLM model)"),Nxe.forEach(t),O1r=i(ie),w8=n(ie,"LI",{});var jxe=s(w8);ybe=n(jxe,"STRONG",{});var j2t=s(ybe);V1r=r(j2t,"xlm-roberta"),j2t.forEach(t),X1r=r(jxe," \u2014 "),Rz=n(jxe,"A",{href:!0});var D2t=s(Rz);z1r=r(D2t,"TFXLMRobertaForMultipleChoice"),D2t.forEach(t),Q1r=r(jxe," (XLM-RoBERTa model)"),jxe.forEach(t),W1r=i(ie),A8=n(ie,"LI",{});var Dxe=s(A8);Lbe=n(Dxe,"STRONG",{});var G2t=s(Lbe);H1r=r(G2t,"xlnet"),G2t.forEach(t),U1r=r(Dxe," \u2014 "),Bz=n(Dxe,"A",{href:!0});var O2t=s(Bz);J1r=r(O2t,"TFXLNetForMultipleChoice"),O2t.forEach(t),Y1r=r(Dxe," (XLNet model)"),Dxe.forEach(t),ie.forEach(t),K1r=i(Ma),xbe=n(Ma,"P",{});var V2t=s(xbe);Z1r=r(V2t,"Examples:"),V2t.forEach(t),ebr=i(Ma),m(i0.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),XBe=i(c),qc=n(c,"H2",{class:!0});var oIe=s(qc);y8=n(oIe,"A",{id:!0,class:!0,href:!0});var X2t=s(y8);kbe=n(X2t,"SPAN",{});var z2t=s(kbe);m(d0.$$.fragment,z2t),z2t.forEach(t),X2t.forEach(t),obr=i(oIe),Sbe=n(oIe,"SPAN",{});var Q2t=s(Sbe);rbr=r(Q2t,"TFAutoModelForTableQuestionAnswering"),Q2t.forEach(t),oIe.forEach(t),zBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(c0.$$.fragment,ri),tbr=i(ri),Nc=n(ri,"P",{});var wJ=s(Nc);abr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Pz=n(wJ,"A",{href:!0});var W2t=s(Pz);nbr=r(W2t,"from_pretrained()"),W2t.forEach(t),sbr=r(wJ," class method or the "),$z=n(wJ,"A",{href:!0});var H2t=s($z);lbr=r(H2t,"from_config()"),H2t.forEach(t),ibr=r(wJ,` class
method.`),wJ.forEach(t),dbr=i(ri),f0=n(ri,"P",{});var rIe=s(f0);cbr=r(rIe,"This class cannot be instantiated directly using "),Rbe=n(rIe,"CODE",{});var U2t=s(Rbe);fbr=r(U2t,"__init__()"),U2t.forEach(t),mbr=r(rIe," (throws an error)."),rIe.forEach(t),gbr=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(m0.$$.fragment,ti),hbr=i(ti),Bbe=n(ti,"P",{});var J2t=s(Bbe);pbr=r(J2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J2t.forEach(t),_br=i(ti),jc=n(ti,"P",{});var AJ=s(jc);ubr=r(AJ,`Note:
Loading a model from its configuration file does `),Pbe=n(AJ,"STRONG",{});var Y2t=s(Pbe);bbr=r(Y2t,"not"),Y2t.forEach(t),vbr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(AJ,"A",{href:!0});var K2t=s(Iz);Fbr=r(K2t,"from_pretrained()"),K2t.forEach(t),Tbr=r(AJ," to load the model weights."),AJ.forEach(t),Mbr=i(ti),$be=n(ti,"P",{});var Z2t=s($be);Ebr=r(Z2t,"Examples:"),Z2t.forEach(t),Cbr=i(ti),m(g0.$$.fragment,ti),ti.forEach(t),wbr=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(h0.$$.fragment,Ea),Abr=i(Ea),Ibe=n(Ea,"P",{});var e3t=s(Ibe);ybr=r(e3t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),e3t.forEach(t),Lbr=i(Ea),wn=n(Ea,"P",{});var dE=s(wn);xbr=r(dE,"The model class to instantiate is selected based on the "),qbe=n(dE,"CODE",{});var o3t=s(qbe);kbr=r(o3t,"model_type"),o3t.forEach(t),Sbr=r(dE,` property of the config object (either
passed as an argument or loaded from `),Nbe=n(dE,"CODE",{});var r3t=s(Nbe);Rbr=r(r3t,"pretrained_model_name_or_path"),r3t.forEach(t),Bbr=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(dE,"CODE",{});var t3t=s(jbe);Pbr=r(t3t,"pretrained_model_name_or_path"),t3t.forEach(t),$br=r(dE,":"),dE.forEach(t),Ibr=i(Ea),Dbe=n(Ea,"UL",{});var a3t=s(Dbe);L8=n(a3t,"LI",{});var Gxe=s(L8);Gbe=n(Gxe,"STRONG",{});var n3t=s(Gbe);qbr=r(n3t,"tapas"),n3t.forEach(t),Nbr=r(Gxe," \u2014 "),qz=n(Gxe,"A",{href:!0});var s3t=s(qz);jbr=r(s3t,"TFTapasForQuestionAnswering"),s3t.forEach(t),Dbr=r(Gxe," (TAPAS model)"),Gxe.forEach(t),a3t.forEach(t),Gbr=i(Ea),Obe=n(Ea,"P",{});var l3t=s(Obe);Obr=r(l3t,"Examples:"),l3t.forEach(t),Vbr=i(Ea),m(p0.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),QBe=i(c),Dc=n(c,"H2",{class:!0});var tIe=s(Dc);x8=n(tIe,"A",{id:!0,class:!0,href:!0});var i3t=s(x8);Vbe=n(i3t,"SPAN",{});var d3t=s(Vbe);m(_0.$$.fragment,d3t),d3t.forEach(t),i3t.forEach(t),Xbr=i(tIe),Xbe=n(tIe,"SPAN",{});var c3t=s(Xbe);zbr=r(c3t,"TFAutoModelForTokenClassification"),c3t.forEach(t),tIe.forEach(t),WBe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(u0.$$.fragment,ai),Qbr=i(ai),Gc=n(ai,"P",{});var yJ=s(Gc);Wbr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Nz=n(yJ,"A",{href:!0});var f3t=s(Nz);Hbr=r(f3t,"from_pretrained()"),f3t.forEach(t),Ubr=r(yJ," class method or the "),jz=n(yJ,"A",{href:!0});var m3t=s(jz);Jbr=r(m3t,"from_config()"),m3t.forEach(t),Ybr=r(yJ,` class
method.`),yJ.forEach(t),Kbr=i(ai),b0=n(ai,"P",{});var aIe=s(b0);Zbr=r(aIe,"This class cannot be instantiated directly using "),zbe=n(aIe,"CODE",{});var g3t=s(zbe);e2r=r(g3t,"__init__()"),g3t.forEach(t),o2r=r(aIe," (throws an error)."),aIe.forEach(t),r2r=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(v0.$$.fragment,ni),t2r=i(ni),Qbe=n(ni,"P",{});var h3t=s(Qbe);a2r=r(h3t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),h3t.forEach(t),n2r=i(ni),Oc=n(ni,"P",{});var LJ=s(Oc);s2r=r(LJ,`Note:
Loading a model from its configuration file does `),Wbe=n(LJ,"STRONG",{});var p3t=s(Wbe);l2r=r(p3t,"not"),p3t.forEach(t),i2r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(LJ,"A",{href:!0});var _3t=s(Dz);d2r=r(_3t,"from_pretrained()"),_3t.forEach(t),c2r=r(LJ," to load the model weights."),LJ.forEach(t),f2r=i(ni),Hbe=n(ni,"P",{});var u3t=s(Hbe);m2r=r(u3t,"Examples:"),u3t.forEach(t),g2r=i(ni),m(F0.$$.fragment,ni),ni.forEach(t),h2r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(T0.$$.fragment,Ca),p2r=i(Ca),Ube=n(Ca,"P",{});var b3t=s(Ube);_2r=r(b3t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b3t.forEach(t),u2r=i(Ca),An=n(Ca,"P",{});var cE=s(An);b2r=r(cE,"The model class to instantiate is selected based on the "),Jbe=n(cE,"CODE",{});var v3t=s(Jbe);v2r=r(v3t,"model_type"),v3t.forEach(t),F2r=r(cE,` property of the config object (either
passed as an argument or loaded from `),Ybe=n(cE,"CODE",{});var F3t=s(Ybe);T2r=r(F3t,"pretrained_model_name_or_path"),F3t.forEach(t),M2r=r(cE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kbe=n(cE,"CODE",{});var T3t=s(Kbe);E2r=r(T3t,"pretrained_model_name_or_path"),T3t.forEach(t),C2r=r(cE,":"),cE.forEach(t),w2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);k8=n(re,"LI",{});var Oxe=s(k8);Zbe=n(Oxe,"STRONG",{});var M3t=s(Zbe);A2r=r(M3t,"albert"),M3t.forEach(t),y2r=r(Oxe," \u2014 "),Gz=n(Oxe,"A",{href:!0});var E3t=s(Gz);L2r=r(E3t,"TFAlbertForTokenClassification"),E3t.forEach(t),x2r=r(Oxe," (ALBERT model)"),Oxe.forEach(t),k2r=i(re),S8=n(re,"LI",{});var Vxe=s(S8);e2e=n(Vxe,"STRONG",{});var C3t=s(e2e);S2r=r(C3t,"bert"),C3t.forEach(t),R2r=r(Vxe," \u2014 "),Oz=n(Vxe,"A",{href:!0});var w3t=s(Oz);B2r=r(w3t,"TFBertForTokenClassification"),w3t.forEach(t),P2r=r(Vxe," (BERT model)"),Vxe.forEach(t),$2r=i(re),R8=n(re,"LI",{});var Xxe=s(R8);o2e=n(Xxe,"STRONG",{});var A3t=s(o2e);I2r=r(A3t,"camembert"),A3t.forEach(t),q2r=r(Xxe," \u2014 "),Vz=n(Xxe,"A",{href:!0});var y3t=s(Vz);N2r=r(y3t,"TFCamembertForTokenClassification"),y3t.forEach(t),j2r=r(Xxe," (CamemBERT model)"),Xxe.forEach(t),D2r=i(re),B8=n(re,"LI",{});var zxe=s(B8);r2e=n(zxe,"STRONG",{});var L3t=s(r2e);G2r=r(L3t,"convbert"),L3t.forEach(t),O2r=r(zxe," \u2014 "),Xz=n(zxe,"A",{href:!0});var x3t=s(Xz);V2r=r(x3t,"TFConvBertForTokenClassification"),x3t.forEach(t),X2r=r(zxe," (ConvBERT model)"),zxe.forEach(t),z2r=i(re),P8=n(re,"LI",{});var Qxe=s(P8);t2e=n(Qxe,"STRONG",{});var k3t=s(t2e);Q2r=r(k3t,"deberta"),k3t.forEach(t),W2r=r(Qxe," \u2014 "),zz=n(Qxe,"A",{href:!0});var S3t=s(zz);H2r=r(S3t,"TFDebertaForTokenClassification"),S3t.forEach(t),U2r=r(Qxe," (DeBERTa model)"),Qxe.forEach(t),J2r=i(re),$8=n(re,"LI",{});var Wxe=s($8);a2e=n(Wxe,"STRONG",{});var R3t=s(a2e);Y2r=r(R3t,"deberta-v2"),R3t.forEach(t),K2r=r(Wxe," \u2014 "),Qz=n(Wxe,"A",{href:!0});var B3t=s(Qz);Z2r=r(B3t,"TFDebertaV2ForTokenClassification"),B3t.forEach(t),e3r=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),o3r=i(re),I8=n(re,"LI",{});var Hxe=s(I8);n2e=n(Hxe,"STRONG",{});var P3t=s(n2e);r3r=r(P3t,"distilbert"),P3t.forEach(t),t3r=r(Hxe," \u2014 "),Wz=n(Hxe,"A",{href:!0});var $3t=s(Wz);a3r=r($3t,"TFDistilBertForTokenClassification"),$3t.forEach(t),n3r=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),s3r=i(re),q8=n(re,"LI",{});var Uxe=s(q8);s2e=n(Uxe,"STRONG",{});var I3t=s(s2e);l3r=r(I3t,"electra"),I3t.forEach(t),i3r=r(Uxe," \u2014 "),Hz=n(Uxe,"A",{href:!0});var q3t=s(Hz);d3r=r(q3t,"TFElectraForTokenClassification"),q3t.forEach(t),c3r=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),f3r=i(re),N8=n(re,"LI",{});var Jxe=s(N8);l2e=n(Jxe,"STRONG",{});var N3t=s(l2e);m3r=r(N3t,"flaubert"),N3t.forEach(t),g3r=r(Jxe," \u2014 "),Uz=n(Jxe,"A",{href:!0});var j3t=s(Uz);h3r=r(j3t,"TFFlaubertForTokenClassification"),j3t.forEach(t),p3r=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),_3r=i(re),j8=n(re,"LI",{});var Yxe=s(j8);i2e=n(Yxe,"STRONG",{});var D3t=s(i2e);u3r=r(D3t,"funnel"),D3t.forEach(t),b3r=r(Yxe," \u2014 "),Jz=n(Yxe,"A",{href:!0});var G3t=s(Jz);v3r=r(G3t,"TFFunnelForTokenClassification"),G3t.forEach(t),F3r=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),T3r=i(re),D8=n(re,"LI",{});var Kxe=s(D8);d2e=n(Kxe,"STRONG",{});var O3t=s(d2e);M3r=r(O3t,"layoutlm"),O3t.forEach(t),E3r=r(Kxe," \u2014 "),Yz=n(Kxe,"A",{href:!0});var V3t=s(Yz);C3r=r(V3t,"TFLayoutLMForTokenClassification"),V3t.forEach(t),w3r=r(Kxe," (LayoutLM model)"),Kxe.forEach(t),A3r=i(re),G8=n(re,"LI",{});var Zxe=s(G8);c2e=n(Zxe,"STRONG",{});var X3t=s(c2e);y3r=r(X3t,"longformer"),X3t.forEach(t),L3r=r(Zxe," \u2014 "),Kz=n(Zxe,"A",{href:!0});var z3t=s(Kz);x3r=r(z3t,"TFLongformerForTokenClassification"),z3t.forEach(t),k3r=r(Zxe," (Longformer model)"),Zxe.forEach(t),S3r=i(re),O8=n(re,"LI",{});var eke=s(O8);f2e=n(eke,"STRONG",{});var Q3t=s(f2e);R3r=r(Q3t,"mobilebert"),Q3t.forEach(t),B3r=r(eke," \u2014 "),Zz=n(eke,"A",{href:!0});var W3t=s(Zz);P3r=r(W3t,"TFMobileBertForTokenClassification"),W3t.forEach(t),$3r=r(eke," (MobileBERT model)"),eke.forEach(t),I3r=i(re),V8=n(re,"LI",{});var oke=s(V8);m2e=n(oke,"STRONG",{});var H3t=s(m2e);q3r=r(H3t,"mpnet"),H3t.forEach(t),N3r=r(oke," \u2014 "),eQ=n(oke,"A",{href:!0});var U3t=s(eQ);j3r=r(U3t,"TFMPNetForTokenClassification"),U3t.forEach(t),D3r=r(oke," (MPNet model)"),oke.forEach(t),G3r=i(re),X8=n(re,"LI",{});var rke=s(X8);g2e=n(rke,"STRONG",{});var J3t=s(g2e);O3r=r(J3t,"rembert"),J3t.forEach(t),V3r=r(rke," \u2014 "),oQ=n(rke,"A",{href:!0});var Y3t=s(oQ);X3r=r(Y3t,"TFRemBertForTokenClassification"),Y3t.forEach(t),z3r=r(rke," (RemBERT model)"),rke.forEach(t),Q3r=i(re),z8=n(re,"LI",{});var tke=s(z8);h2e=n(tke,"STRONG",{});var K3t=s(h2e);W3r=r(K3t,"roberta"),K3t.forEach(t),H3r=r(tke," \u2014 "),rQ=n(tke,"A",{href:!0});var Z3t=s(rQ);U3r=r(Z3t,"TFRobertaForTokenClassification"),Z3t.forEach(t),J3r=r(tke," (RoBERTa model)"),tke.forEach(t),Y3r=i(re),Q8=n(re,"LI",{});var ake=s(Q8);p2e=n(ake,"STRONG",{});var e6t=s(p2e);K3r=r(e6t,"roformer"),e6t.forEach(t),Z3r=r(ake," \u2014 "),tQ=n(ake,"A",{href:!0});var o6t=s(tQ);e6r=r(o6t,"TFRoFormerForTokenClassification"),o6t.forEach(t),o6r=r(ake," (RoFormer model)"),ake.forEach(t),r6r=i(re),W8=n(re,"LI",{});var nke=s(W8);_2e=n(nke,"STRONG",{});var r6t=s(_2e);t6r=r(r6t,"xlm"),r6t.forEach(t),a6r=r(nke," \u2014 "),aQ=n(nke,"A",{href:!0});var t6t=s(aQ);n6r=r(t6t,"TFXLMForTokenClassification"),t6t.forEach(t),s6r=r(nke," (XLM model)"),nke.forEach(t),l6r=i(re),H8=n(re,"LI",{});var ske=s(H8);u2e=n(ske,"STRONG",{});var a6t=s(u2e);i6r=r(a6t,"xlm-roberta"),a6t.forEach(t),d6r=r(ske," \u2014 "),nQ=n(ske,"A",{href:!0});var n6t=s(nQ);c6r=r(n6t,"TFXLMRobertaForTokenClassification"),n6t.forEach(t),f6r=r(ske," (XLM-RoBERTa model)"),ske.forEach(t),m6r=i(re),U8=n(re,"LI",{});var lke=s(U8);b2e=n(lke,"STRONG",{});var s6t=s(b2e);g6r=r(s6t,"xlnet"),s6t.forEach(t),h6r=r(lke," \u2014 "),sQ=n(lke,"A",{href:!0});var l6t=s(sQ);p6r=r(l6t,"TFXLNetForTokenClassification"),l6t.forEach(t),_6r=r(lke," (XLNet model)"),lke.forEach(t),re.forEach(t),u6r=i(Ca),v2e=n(Ca,"P",{});var i6t=s(v2e);b6r=r(i6t,"Examples:"),i6t.forEach(t),v6r=i(Ca),m(M0.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),HBe=i(c),Vc=n(c,"H2",{class:!0});var nIe=s(Vc);J8=n(nIe,"A",{id:!0,class:!0,href:!0});var d6t=s(J8);F2e=n(d6t,"SPAN",{});var c6t=s(F2e);m(E0.$$.fragment,c6t),c6t.forEach(t),d6t.forEach(t),F6r=i(nIe),T2e=n(nIe,"SPAN",{});var f6t=s(T2e);T6r=r(f6t,"TFAutoModelForQuestionAnswering"),f6t.forEach(t),nIe.forEach(t),UBe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(C0.$$.fragment,si),M6r=i(si),Xc=n(si,"P",{});var xJ=s(Xc);E6r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),lQ=n(xJ,"A",{href:!0});var m6t=s(lQ);C6r=r(m6t,"from_pretrained()"),m6t.forEach(t),w6r=r(xJ," class method or the "),iQ=n(xJ,"A",{href:!0});var g6t=s(iQ);A6r=r(g6t,"from_config()"),g6t.forEach(t),y6r=r(xJ,` class
method.`),xJ.forEach(t),L6r=i(si),w0=n(si,"P",{});var sIe=s(w0);x6r=r(sIe,"This class cannot be instantiated directly using "),M2e=n(sIe,"CODE",{});var h6t=s(M2e);k6r=r(h6t,"__init__()"),h6t.forEach(t),S6r=r(sIe," (throws an error)."),sIe.forEach(t),R6r=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(A0.$$.fragment,li),B6r=i(li),E2e=n(li,"P",{});var p6t=s(E2e);P6r=r(p6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),p6t.forEach(t),$6r=i(li),zc=n(li,"P",{});var kJ=s(zc);I6r=r(kJ,`Note:
Loading a model from its configuration file does `),C2e=n(kJ,"STRONG",{});var _6t=s(C2e);q6r=r(_6t,"not"),_6t.forEach(t),N6r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dQ=n(kJ,"A",{href:!0});var u6t=s(dQ);j6r=r(u6t,"from_pretrained()"),u6t.forEach(t),D6r=r(kJ," to load the model weights."),kJ.forEach(t),G6r=i(li),w2e=n(li,"P",{});var b6t=s(w2e);O6r=r(b6t,"Examples:"),b6t.forEach(t),V6r=i(li),m(y0.$$.fragment,li),li.forEach(t),X6r=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(L0.$$.fragment,wa),z6r=i(wa),A2e=n(wa,"P",{});var v6t=s(A2e);Q6r=r(v6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),v6t.forEach(t),W6r=i(wa),yn=n(wa,"P",{});var fE=s(yn);H6r=r(fE,"The model class to instantiate is selected based on the "),y2e=n(fE,"CODE",{});var F6t=s(y2e);U6r=r(F6t,"model_type"),F6t.forEach(t),J6r=r(fE,` property of the config object (either
passed as an argument or loaded from `),L2e=n(fE,"CODE",{});var T6t=s(L2e);Y6r=r(T6t,"pretrained_model_name_or_path"),T6t.forEach(t),K6r=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x2e=n(fE,"CODE",{});var M6t=s(x2e);Z6r=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),evr=r(fE,":"),fE.forEach(t),ovr=i(wa),K=n(wa,"UL",{});var te=s(K);Y8=n(te,"LI",{});var ike=s(Y8);k2e=n(ike,"STRONG",{});var E6t=s(k2e);rvr=r(E6t,"albert"),E6t.forEach(t),tvr=r(ike," \u2014 "),cQ=n(ike,"A",{href:!0});var C6t=s(cQ);avr=r(C6t,"TFAlbertForQuestionAnswering"),C6t.forEach(t),nvr=r(ike," (ALBERT model)"),ike.forEach(t),svr=i(te),K8=n(te,"LI",{});var dke=s(K8);S2e=n(dke,"STRONG",{});var w6t=s(S2e);lvr=r(w6t,"bert"),w6t.forEach(t),ivr=r(dke," \u2014 "),fQ=n(dke,"A",{href:!0});var A6t=s(fQ);dvr=r(A6t,"TFBertForQuestionAnswering"),A6t.forEach(t),cvr=r(dke," (BERT model)"),dke.forEach(t),fvr=i(te),Z8=n(te,"LI",{});var cke=s(Z8);R2e=n(cke,"STRONG",{});var y6t=s(R2e);mvr=r(y6t,"camembert"),y6t.forEach(t),gvr=r(cke," \u2014 "),mQ=n(cke,"A",{href:!0});var L6t=s(mQ);hvr=r(L6t,"TFCamembertForQuestionAnswering"),L6t.forEach(t),pvr=r(cke," (CamemBERT model)"),cke.forEach(t),_vr=i(te),e9=n(te,"LI",{});var fke=s(e9);B2e=n(fke,"STRONG",{});var x6t=s(B2e);uvr=r(x6t,"convbert"),x6t.forEach(t),bvr=r(fke," \u2014 "),gQ=n(fke,"A",{href:!0});var k6t=s(gQ);vvr=r(k6t,"TFConvBertForQuestionAnswering"),k6t.forEach(t),Fvr=r(fke," (ConvBERT model)"),fke.forEach(t),Tvr=i(te),o9=n(te,"LI",{});var mke=s(o9);P2e=n(mke,"STRONG",{});var S6t=s(P2e);Mvr=r(S6t,"deberta"),S6t.forEach(t),Evr=r(mke," \u2014 "),hQ=n(mke,"A",{href:!0});var R6t=s(hQ);Cvr=r(R6t,"TFDebertaForQuestionAnswering"),R6t.forEach(t),wvr=r(mke," (DeBERTa model)"),mke.forEach(t),Avr=i(te),r9=n(te,"LI",{});var gke=s(r9);$2e=n(gke,"STRONG",{});var B6t=s($2e);yvr=r(B6t,"deberta-v2"),B6t.forEach(t),Lvr=r(gke," \u2014 "),pQ=n(gke,"A",{href:!0});var P6t=s(pQ);xvr=r(P6t,"TFDebertaV2ForQuestionAnswering"),P6t.forEach(t),kvr=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),Svr=i(te),t9=n(te,"LI",{});var hke=s(t9);I2e=n(hke,"STRONG",{});var $6t=s(I2e);Rvr=r($6t,"distilbert"),$6t.forEach(t),Bvr=r(hke," \u2014 "),_Q=n(hke,"A",{href:!0});var I6t=s(_Q);Pvr=r(I6t,"TFDistilBertForQuestionAnswering"),I6t.forEach(t),$vr=r(hke," (DistilBERT model)"),hke.forEach(t),Ivr=i(te),a9=n(te,"LI",{});var pke=s(a9);q2e=n(pke,"STRONG",{});var q6t=s(q2e);qvr=r(q6t,"electra"),q6t.forEach(t),Nvr=r(pke," \u2014 "),uQ=n(pke,"A",{href:!0});var N6t=s(uQ);jvr=r(N6t,"TFElectraForQuestionAnswering"),N6t.forEach(t),Dvr=r(pke," (ELECTRA model)"),pke.forEach(t),Gvr=i(te),n9=n(te,"LI",{});var _ke=s(n9);N2e=n(_ke,"STRONG",{});var j6t=s(N2e);Ovr=r(j6t,"flaubert"),j6t.forEach(t),Vvr=r(_ke," \u2014 "),bQ=n(_ke,"A",{href:!0});var D6t=s(bQ);Xvr=r(D6t,"TFFlaubertForQuestionAnsweringSimple"),D6t.forEach(t),zvr=r(_ke," (FlauBERT model)"),_ke.forEach(t),Qvr=i(te),s9=n(te,"LI",{});var uke=s(s9);j2e=n(uke,"STRONG",{});var G6t=s(j2e);Wvr=r(G6t,"funnel"),G6t.forEach(t),Hvr=r(uke," \u2014 "),vQ=n(uke,"A",{href:!0});var O6t=s(vQ);Uvr=r(O6t,"TFFunnelForQuestionAnswering"),O6t.forEach(t),Jvr=r(uke," (Funnel Transformer model)"),uke.forEach(t),Yvr=i(te),l9=n(te,"LI",{});var bke=s(l9);D2e=n(bke,"STRONG",{});var V6t=s(D2e);Kvr=r(V6t,"gptj"),V6t.forEach(t),Zvr=r(bke," \u2014 "),FQ=n(bke,"A",{href:!0});var X6t=s(FQ);eFr=r(X6t,"TFGPTJForQuestionAnswering"),X6t.forEach(t),oFr=r(bke," (GPT-J model)"),bke.forEach(t),rFr=i(te),i9=n(te,"LI",{});var vke=s(i9);G2e=n(vke,"STRONG",{});var z6t=s(G2e);tFr=r(z6t,"longformer"),z6t.forEach(t),aFr=r(vke," \u2014 "),TQ=n(vke,"A",{href:!0});var Q6t=s(TQ);nFr=r(Q6t,"TFLongformerForQuestionAnswering"),Q6t.forEach(t),sFr=r(vke," (Longformer model)"),vke.forEach(t),lFr=i(te),d9=n(te,"LI",{});var Fke=s(d9);O2e=n(Fke,"STRONG",{});var W6t=s(O2e);iFr=r(W6t,"mobilebert"),W6t.forEach(t),dFr=r(Fke," \u2014 "),MQ=n(Fke,"A",{href:!0});var H6t=s(MQ);cFr=r(H6t,"TFMobileBertForQuestionAnswering"),H6t.forEach(t),fFr=r(Fke," (MobileBERT model)"),Fke.forEach(t),mFr=i(te),c9=n(te,"LI",{});var Tke=s(c9);V2e=n(Tke,"STRONG",{});var U6t=s(V2e);gFr=r(U6t,"mpnet"),U6t.forEach(t),hFr=r(Tke," \u2014 "),EQ=n(Tke,"A",{href:!0});var J6t=s(EQ);pFr=r(J6t,"TFMPNetForQuestionAnswering"),J6t.forEach(t),_Fr=r(Tke," (MPNet model)"),Tke.forEach(t),uFr=i(te),f9=n(te,"LI",{});var Mke=s(f9);X2e=n(Mke,"STRONG",{});var Y6t=s(X2e);bFr=r(Y6t,"rembert"),Y6t.forEach(t),vFr=r(Mke," \u2014 "),CQ=n(Mke,"A",{href:!0});var K6t=s(CQ);FFr=r(K6t,"TFRemBertForQuestionAnswering"),K6t.forEach(t),TFr=r(Mke," (RemBERT model)"),Mke.forEach(t),MFr=i(te),m9=n(te,"LI",{});var Eke=s(m9);z2e=n(Eke,"STRONG",{});var Z6t=s(z2e);EFr=r(Z6t,"roberta"),Z6t.forEach(t),CFr=r(Eke," \u2014 "),wQ=n(Eke,"A",{href:!0});var evt=s(wQ);wFr=r(evt,"TFRobertaForQuestionAnswering"),evt.forEach(t),AFr=r(Eke," (RoBERTa model)"),Eke.forEach(t),yFr=i(te),g9=n(te,"LI",{});var Cke=s(g9);Q2e=n(Cke,"STRONG",{});var ovt=s(Q2e);LFr=r(ovt,"roformer"),ovt.forEach(t),xFr=r(Cke," \u2014 "),AQ=n(Cke,"A",{href:!0});var rvt=s(AQ);kFr=r(rvt,"TFRoFormerForQuestionAnswering"),rvt.forEach(t),SFr=r(Cke," (RoFormer model)"),Cke.forEach(t),RFr=i(te),h9=n(te,"LI",{});var wke=s(h9);W2e=n(wke,"STRONG",{});var tvt=s(W2e);BFr=r(tvt,"xlm"),tvt.forEach(t),PFr=r(wke," \u2014 "),yQ=n(wke,"A",{href:!0});var avt=s(yQ);$Fr=r(avt,"TFXLMForQuestionAnsweringSimple"),avt.forEach(t),IFr=r(wke," (XLM model)"),wke.forEach(t),qFr=i(te),p9=n(te,"LI",{});var Ake=s(p9);H2e=n(Ake,"STRONG",{});var nvt=s(H2e);NFr=r(nvt,"xlm-roberta"),nvt.forEach(t),jFr=r(Ake," \u2014 "),LQ=n(Ake,"A",{href:!0});var svt=s(LQ);DFr=r(svt,"TFXLMRobertaForQuestionAnswering"),svt.forEach(t),GFr=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),OFr=i(te),_9=n(te,"LI",{});var yke=s(_9);U2e=n(yke,"STRONG",{});var lvt=s(U2e);VFr=r(lvt,"xlnet"),lvt.forEach(t),XFr=r(yke," \u2014 "),xQ=n(yke,"A",{href:!0});var ivt=s(xQ);zFr=r(ivt,"TFXLNetForQuestionAnsweringSimple"),ivt.forEach(t),QFr=r(yke," (XLNet model)"),yke.forEach(t),te.forEach(t),WFr=i(wa),J2e=n(wa,"P",{});var dvt=s(J2e);HFr=r(dvt,"Examples:"),dvt.forEach(t),UFr=i(wa),m(x0.$$.fragment,wa),wa.forEach(t),si.forEach(t),JBe=i(c),Qc=n(c,"H2",{class:!0});var lIe=s(Qc);u9=n(lIe,"A",{id:!0,class:!0,href:!0});var cvt=s(u9);Y2e=n(cvt,"SPAN",{});var fvt=s(Y2e);m(k0.$$.fragment,fvt),fvt.forEach(t),cvt.forEach(t),JFr=i(lIe),K2e=n(lIe,"SPAN",{});var mvt=s(K2e);YFr=r(mvt,"TFAutoModelForVision2Seq"),mvt.forEach(t),lIe.forEach(t),YBe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(S0.$$.fragment,ii),KFr=i(ii),Wc=n(ii,"P",{});var SJ=s(Wc);ZFr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kQ=n(SJ,"A",{href:!0});var gvt=s(kQ);eTr=r(gvt,"from_pretrained()"),gvt.forEach(t),oTr=r(SJ," class method or the "),SQ=n(SJ,"A",{href:!0});var hvt=s(SQ);rTr=r(hvt,"from_config()"),hvt.forEach(t),tTr=r(SJ,` class
method.`),SJ.forEach(t),aTr=i(ii),R0=n(ii,"P",{});var iIe=s(R0);nTr=r(iIe,"This class cannot be instantiated directly using "),Z2e=n(iIe,"CODE",{});var pvt=s(Z2e);sTr=r(pvt,"__init__()"),pvt.forEach(t),lTr=r(iIe," (throws an error)."),iIe.forEach(t),iTr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(B0.$$.fragment,di),dTr=i(di),e3e=n(di,"P",{});var _vt=s(e3e);cTr=r(_vt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_vt.forEach(t),fTr=i(di),Hc=n(di,"P",{});var RJ=s(Hc);mTr=r(RJ,`Note:
Loading a model from its configuration file does `),o3e=n(RJ,"STRONG",{});var uvt=s(o3e);gTr=r(uvt,"not"),uvt.forEach(t),hTr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(RJ,"A",{href:!0});var bvt=s(RQ);pTr=r(bvt,"from_pretrained()"),bvt.forEach(t),_Tr=r(RJ," to load the model weights."),RJ.forEach(t),uTr=i(di),r3e=n(di,"P",{});var vvt=s(r3e);bTr=r(vvt,"Examples:"),vvt.forEach(t),vTr=i(di),m(P0.$$.fragment,di),di.forEach(t),FTr=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m($0.$$.fragment,Aa),TTr=i(Aa),t3e=n(Aa,"P",{});var Fvt=s(t3e);MTr=r(Fvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Fvt.forEach(t),ETr=i(Aa),Ln=n(Aa,"P",{});var mE=s(Ln);CTr=r(mE,"The model class to instantiate is selected based on the "),a3e=n(mE,"CODE",{});var Tvt=s(a3e);wTr=r(Tvt,"model_type"),Tvt.forEach(t),ATr=r(mE,` property of the config object (either
passed as an argument or loaded from `),n3e=n(mE,"CODE",{});var Mvt=s(n3e);yTr=r(Mvt,"pretrained_model_name_or_path"),Mvt.forEach(t),LTr=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(mE,"CODE",{});var Evt=s(s3e);xTr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),kTr=r(mE,":"),mE.forEach(t),STr=i(Aa),l3e=n(Aa,"UL",{});var Cvt=s(l3e);b9=n(Cvt,"LI",{});var Lke=s(b9);i3e=n(Lke,"STRONG",{});var wvt=s(i3e);RTr=r(wvt,"vision-encoder-decoder"),wvt.forEach(t),BTr=r(Lke," \u2014 "),BQ=n(Lke,"A",{href:!0});var Avt=s(BQ);PTr=r(Avt,"TFVisionEncoderDecoderModel"),Avt.forEach(t),$Tr=r(Lke," (Vision Encoder decoder model)"),Lke.forEach(t),Cvt.forEach(t),ITr=i(Aa),d3e=n(Aa,"P",{});var yvt=s(d3e);qTr=r(yvt,"Examples:"),yvt.forEach(t),NTr=i(Aa),m(I0.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),KBe=i(c),Uc=n(c,"H2",{class:!0});var dIe=s(Uc);v9=n(dIe,"A",{id:!0,class:!0,href:!0});var Lvt=s(v9);c3e=n(Lvt,"SPAN",{});var xvt=s(c3e);m(q0.$$.fragment,xvt),xvt.forEach(t),Lvt.forEach(t),jTr=i(dIe),f3e=n(dIe,"SPAN",{});var kvt=s(f3e);DTr=r(kvt,"TFAutoModelForSpeechSeq2Seq"),kvt.forEach(t),dIe.forEach(t),ZBe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(N0.$$.fragment,ci),GTr=i(ci),Jc=n(ci,"P",{});var BJ=s(Jc);OTr=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PQ=n(BJ,"A",{href:!0});var Svt=s(PQ);VTr=r(Svt,"from_pretrained()"),Svt.forEach(t),XTr=r(BJ," class method or the "),$Q=n(BJ,"A",{href:!0});var Rvt=s($Q);zTr=r(Rvt,"from_config()"),Rvt.forEach(t),QTr=r(BJ,` class
method.`),BJ.forEach(t),WTr=i(ci),j0=n(ci,"P",{});var cIe=s(j0);HTr=r(cIe,"This class cannot be instantiated directly using "),m3e=n(cIe,"CODE",{});var Bvt=s(m3e);UTr=r(Bvt,"__init__()"),Bvt.forEach(t),JTr=r(cIe," (throws an error)."),cIe.forEach(t),YTr=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(D0.$$.fragment,fi),KTr=i(fi),g3e=n(fi,"P",{});var Pvt=s(g3e);ZTr=r(Pvt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Pvt.forEach(t),e8r=i(fi),Yc=n(fi,"P",{});var PJ=s(Yc);o8r=r(PJ,`Note:
Loading a model from its configuration file does `),h3e=n(PJ,"STRONG",{});var $vt=s(h3e);r8r=r($vt,"not"),$vt.forEach(t),t8r=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(PJ,"A",{href:!0});var Ivt=s(IQ);a8r=r(Ivt,"from_pretrained()"),Ivt.forEach(t),n8r=r(PJ," to load the model weights."),PJ.forEach(t),s8r=i(fi),p3e=n(fi,"P",{});var qvt=s(p3e);l8r=r(qvt,"Examples:"),qvt.forEach(t),i8r=i(fi),m(G0.$$.fragment,fi),fi.forEach(t),d8r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(O0.$$.fragment,ya),c8r=i(ya),_3e=n(ya,"P",{});var Nvt=s(_3e);f8r=r(Nvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Nvt.forEach(t),m8r=i(ya),xn=n(ya,"P",{});var gE=s(xn);g8r=r(gE,"The model class to instantiate is selected based on the "),u3e=n(gE,"CODE",{});var jvt=s(u3e);h8r=r(jvt,"model_type"),jvt.forEach(t),p8r=r(gE,` property of the config object (either
passed as an argument or loaded from `),b3e=n(gE,"CODE",{});var Dvt=s(b3e);_8r=r(Dvt,"pretrained_model_name_or_path"),Dvt.forEach(t),u8r=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(gE,"CODE",{});var Gvt=s(v3e);b8r=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),v8r=r(gE,":"),gE.forEach(t),F8r=i(ya),F3e=n(ya,"UL",{});var Ovt=s(F3e);F9=n(Ovt,"LI",{});var xke=s(F9);T3e=n(xke,"STRONG",{});var Vvt=s(T3e);T8r=r(Vvt,"speech_to_text"),Vvt.forEach(t),M8r=r(xke," \u2014 "),qQ=n(xke,"A",{href:!0});var Xvt=s(qQ);E8r=r(Xvt,"TFSpeech2TextForConditionalGeneration"),Xvt.forEach(t),C8r=r(xke," (Speech2Text model)"),xke.forEach(t),Ovt.forEach(t),w8r=i(ya),M3e=n(ya,"P",{});var zvt=s(M3e);A8r=r(zvt,"Examples:"),zvt.forEach(t),y8r=i(ya),m(V0.$$.fragment,ya),ya.forEach(t),ci.forEach(t),ePe=i(c),Kc=n(c,"H2",{class:!0});var fIe=s(Kc);T9=n(fIe,"A",{id:!0,class:!0,href:!0});var Qvt=s(T9);E3e=n(Qvt,"SPAN",{});var Wvt=s(E3e);m(X0.$$.fragment,Wvt),Wvt.forEach(t),Qvt.forEach(t),L8r=i(fIe),C3e=n(fIe,"SPAN",{});var Hvt=s(C3e);x8r=r(Hvt,"FlaxAutoModel"),Hvt.forEach(t),fIe.forEach(t),oPe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(z0.$$.fragment,mi),k8r=i(mi),Zc=n(mi,"P",{});var $J=s(Zc);S8r=r($J,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),NQ=n($J,"A",{href:!0});var Uvt=s(NQ);R8r=r(Uvt,"from_pretrained()"),Uvt.forEach(t),B8r=r($J," class method or the "),jQ=n($J,"A",{href:!0});var Jvt=s(jQ);P8r=r(Jvt,"from_config()"),Jvt.forEach(t),$8r=r($J,` class
method.`),$J.forEach(t),I8r=i(mi),Q0=n(mi,"P",{});var mIe=s(Q0);q8r=r(mIe,"This class cannot be instantiated directly using "),w3e=n(mIe,"CODE",{});var Yvt=s(w3e);N8r=r(Yvt,"__init__()"),Yvt.forEach(t),j8r=r(mIe," (throws an error)."),mIe.forEach(t),D8r=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(W0.$$.fragment,gi),G8r=i(gi),A3e=n(gi,"P",{});var Kvt=s(A3e);O8r=r(Kvt,"Instantiates one of the base model classes of the library from a configuration."),Kvt.forEach(t),V8r=i(gi),ef=n(gi,"P",{});var IJ=s(ef);X8r=r(IJ,`Note:
Loading a model from its configuration file does `),y3e=n(IJ,"STRONG",{});var Zvt=s(y3e);z8r=r(Zvt,"not"),Zvt.forEach(t),Q8r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(IJ,"A",{href:!0});var eFt=s(DQ);W8r=r(eFt,"from_pretrained()"),eFt.forEach(t),H8r=r(IJ," to load the model weights."),IJ.forEach(t),U8r=i(gi),L3e=n(gi,"P",{});var oFt=s(L3e);J8r=r(oFt,"Examples:"),oFt.forEach(t),Y8r=i(gi),m(H0.$$.fragment,gi),gi.forEach(t),K8r=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(U0.$$.fragment,La),Z8r=i(La),x3e=n(La,"P",{});var rFt=s(x3e);e9r=r(rFt,"Instantiate one of the base model classes of the library from a pretrained model."),rFt.forEach(t),o9r=i(La),kn=n(La,"P",{});var hE=s(kn);r9r=r(hE,"The model class to instantiate is selected based on the "),k3e=n(hE,"CODE",{});var tFt=s(k3e);t9r=r(tFt,"model_type"),tFt.forEach(t),a9r=r(hE,` property of the config object (either
passed as an argument or loaded from `),S3e=n(hE,"CODE",{});var aFt=s(S3e);n9r=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),s9r=r(hE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(hE,"CODE",{});var nFt=s(R3e);l9r=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),i9r=r(hE,":"),hE.forEach(t),d9r=i(La),z=n(La,"UL",{});var W=s(z);M9=n(W,"LI",{});var kke=s(M9);B3e=n(kke,"STRONG",{});var sFt=s(B3e);c9r=r(sFt,"albert"),sFt.forEach(t),f9r=r(kke," \u2014 "),GQ=n(kke,"A",{href:!0});var lFt=s(GQ);m9r=r(lFt,"FlaxAlbertModel"),lFt.forEach(t),g9r=r(kke," (ALBERT model)"),kke.forEach(t),h9r=i(W),E9=n(W,"LI",{});var Ske=s(E9);P3e=n(Ske,"STRONG",{});var iFt=s(P3e);p9r=r(iFt,"bart"),iFt.forEach(t),_9r=r(Ske," \u2014 "),OQ=n(Ske,"A",{href:!0});var dFt=s(OQ);u9r=r(dFt,"FlaxBartModel"),dFt.forEach(t),b9r=r(Ske," (BART model)"),Ske.forEach(t),v9r=i(W),C9=n(W,"LI",{});var Rke=s(C9);$3e=n(Rke,"STRONG",{});var cFt=s($3e);F9r=r(cFt,"beit"),cFt.forEach(t),T9r=r(Rke," \u2014 "),VQ=n(Rke,"A",{href:!0});var fFt=s(VQ);M9r=r(fFt,"FlaxBeitModel"),fFt.forEach(t),E9r=r(Rke," (BEiT model)"),Rke.forEach(t),C9r=i(W),w9=n(W,"LI",{});var Bke=s(w9);I3e=n(Bke,"STRONG",{});var mFt=s(I3e);w9r=r(mFt,"bert"),mFt.forEach(t),A9r=r(Bke," \u2014 "),XQ=n(Bke,"A",{href:!0});var gFt=s(XQ);y9r=r(gFt,"FlaxBertModel"),gFt.forEach(t),L9r=r(Bke," (BERT model)"),Bke.forEach(t),x9r=i(W),A9=n(W,"LI",{});var Pke=s(A9);q3e=n(Pke,"STRONG",{});var hFt=s(q3e);k9r=r(hFt,"big_bird"),hFt.forEach(t),S9r=r(Pke," \u2014 "),zQ=n(Pke,"A",{href:!0});var pFt=s(zQ);R9r=r(pFt,"FlaxBigBirdModel"),pFt.forEach(t),B9r=r(Pke," (BigBird model)"),Pke.forEach(t),P9r=i(W),y9=n(W,"LI",{});var $ke=s(y9);N3e=n($ke,"STRONG",{});var _Ft=s(N3e);$9r=r(_Ft,"blenderbot"),_Ft.forEach(t),I9r=r($ke," \u2014 "),QQ=n($ke,"A",{href:!0});var uFt=s(QQ);q9r=r(uFt,"FlaxBlenderbotModel"),uFt.forEach(t),N9r=r($ke," (Blenderbot model)"),$ke.forEach(t),j9r=i(W),L9=n(W,"LI",{});var Ike=s(L9);j3e=n(Ike,"STRONG",{});var bFt=s(j3e);D9r=r(bFt,"blenderbot-small"),bFt.forEach(t),G9r=r(Ike," \u2014 "),WQ=n(Ike,"A",{href:!0});var vFt=s(WQ);O9r=r(vFt,"FlaxBlenderbotSmallModel"),vFt.forEach(t),V9r=r(Ike," (BlenderbotSmall model)"),Ike.forEach(t),X9r=i(W),x9=n(W,"LI",{});var qke=s(x9);D3e=n(qke,"STRONG",{});var FFt=s(D3e);z9r=r(FFt,"clip"),FFt.forEach(t),Q9r=r(qke," \u2014 "),HQ=n(qke,"A",{href:!0});var TFt=s(HQ);W9r=r(TFt,"FlaxCLIPModel"),TFt.forEach(t),H9r=r(qke," (CLIP model)"),qke.forEach(t),U9r=i(W),k9=n(W,"LI",{});var Nke=s(k9);G3e=n(Nke,"STRONG",{});var MFt=s(G3e);J9r=r(MFt,"distilbert"),MFt.forEach(t),Y9r=r(Nke," \u2014 "),UQ=n(Nke,"A",{href:!0});var EFt=s(UQ);K9r=r(EFt,"FlaxDistilBertModel"),EFt.forEach(t),Z9r=r(Nke," (DistilBERT model)"),Nke.forEach(t),eMr=i(W),S9=n(W,"LI",{});var jke=s(S9);O3e=n(jke,"STRONG",{});var CFt=s(O3e);oMr=r(CFt,"electra"),CFt.forEach(t),rMr=r(jke," \u2014 "),JQ=n(jke,"A",{href:!0});var wFt=s(JQ);tMr=r(wFt,"FlaxElectraModel"),wFt.forEach(t),aMr=r(jke," (ELECTRA model)"),jke.forEach(t),nMr=i(W),R9=n(W,"LI",{});var Dke=s(R9);V3e=n(Dke,"STRONG",{});var AFt=s(V3e);sMr=r(AFt,"gpt2"),AFt.forEach(t),lMr=r(Dke," \u2014 "),YQ=n(Dke,"A",{href:!0});var yFt=s(YQ);iMr=r(yFt,"FlaxGPT2Model"),yFt.forEach(t),dMr=r(Dke," (OpenAI GPT-2 model)"),Dke.forEach(t),cMr=i(W),B9=n(W,"LI",{});var Gke=s(B9);X3e=n(Gke,"STRONG",{});var LFt=s(X3e);fMr=r(LFt,"gpt_neo"),LFt.forEach(t),mMr=r(Gke," \u2014 "),KQ=n(Gke,"A",{href:!0});var xFt=s(KQ);gMr=r(xFt,"FlaxGPTNeoModel"),xFt.forEach(t),hMr=r(Gke," (GPT Neo model)"),Gke.forEach(t),pMr=i(W),P9=n(W,"LI",{});var Oke=s(P9);z3e=n(Oke,"STRONG",{});var kFt=s(z3e);_Mr=r(kFt,"gptj"),kFt.forEach(t),uMr=r(Oke," \u2014 "),ZQ=n(Oke,"A",{href:!0});var SFt=s(ZQ);bMr=r(SFt,"FlaxGPTJModel"),SFt.forEach(t),vMr=r(Oke," (GPT-J model)"),Oke.forEach(t),FMr=i(W),$9=n(W,"LI",{});var Vke=s($9);Q3e=n(Vke,"STRONG",{});var RFt=s(Q3e);TMr=r(RFt,"marian"),RFt.forEach(t),MMr=r(Vke," \u2014 "),eW=n(Vke,"A",{href:!0});var BFt=s(eW);EMr=r(BFt,"FlaxMarianModel"),BFt.forEach(t),CMr=r(Vke," (Marian model)"),Vke.forEach(t),wMr=i(W),I9=n(W,"LI",{});var Xke=s(I9);W3e=n(Xke,"STRONG",{});var PFt=s(W3e);AMr=r(PFt,"mbart"),PFt.forEach(t),yMr=r(Xke," \u2014 "),oW=n(Xke,"A",{href:!0});var $Ft=s(oW);LMr=r($Ft,"FlaxMBartModel"),$Ft.forEach(t),xMr=r(Xke," (mBART model)"),Xke.forEach(t),kMr=i(W),q9=n(W,"LI",{});var zke=s(q9);H3e=n(zke,"STRONG",{});var IFt=s(H3e);SMr=r(IFt,"mt5"),IFt.forEach(t),RMr=r(zke," \u2014 "),rW=n(zke,"A",{href:!0});var qFt=s(rW);BMr=r(qFt,"FlaxMT5Model"),qFt.forEach(t),PMr=r(zke," (mT5 model)"),zke.forEach(t),$Mr=i(W),N9=n(W,"LI",{});var Qke=s(N9);U3e=n(Qke,"STRONG",{});var NFt=s(U3e);IMr=r(NFt,"pegasus"),NFt.forEach(t),qMr=r(Qke," \u2014 "),tW=n(Qke,"A",{href:!0});var jFt=s(tW);NMr=r(jFt,"FlaxPegasusModel"),jFt.forEach(t),jMr=r(Qke," (Pegasus model)"),Qke.forEach(t),DMr=i(W),j9=n(W,"LI",{});var Wke=s(j9);J3e=n(Wke,"STRONG",{});var DFt=s(J3e);GMr=r(DFt,"roberta"),DFt.forEach(t),OMr=r(Wke," \u2014 "),aW=n(Wke,"A",{href:!0});var GFt=s(aW);VMr=r(GFt,"FlaxRobertaModel"),GFt.forEach(t),XMr=r(Wke," (RoBERTa model)"),Wke.forEach(t),zMr=i(W),D9=n(W,"LI",{});var Hke=s(D9);Y3e=n(Hke,"STRONG",{});var OFt=s(Y3e);QMr=r(OFt,"roformer"),OFt.forEach(t),WMr=r(Hke," \u2014 "),nW=n(Hke,"A",{href:!0});var VFt=s(nW);HMr=r(VFt,"FlaxRoFormerModel"),VFt.forEach(t),UMr=r(Hke," (RoFormer model)"),Hke.forEach(t),JMr=i(W),G9=n(W,"LI",{});var Uke=s(G9);K3e=n(Uke,"STRONG",{});var XFt=s(K3e);YMr=r(XFt,"t5"),XFt.forEach(t),KMr=r(Uke," \u2014 "),sW=n(Uke,"A",{href:!0});var zFt=s(sW);ZMr=r(zFt,"FlaxT5Model"),zFt.forEach(t),e4r=r(Uke," (T5 model)"),Uke.forEach(t),o4r=i(W),O9=n(W,"LI",{});var Jke=s(O9);Z3e=n(Jke,"STRONG",{});var QFt=s(Z3e);r4r=r(QFt,"vision-text-dual-encoder"),QFt.forEach(t),t4r=r(Jke," \u2014 "),lW=n(Jke,"A",{href:!0});var WFt=s(lW);a4r=r(WFt,"FlaxVisionTextDualEncoderModel"),WFt.forEach(t),n4r=r(Jke," (VisionTextDualEncoder model)"),Jke.forEach(t),s4r=i(W),V9=n(W,"LI",{});var Yke=s(V9);e6e=n(Yke,"STRONG",{});var HFt=s(e6e);l4r=r(HFt,"vit"),HFt.forEach(t),i4r=r(Yke," \u2014 "),iW=n(Yke,"A",{href:!0});var UFt=s(iW);d4r=r(UFt,"FlaxViTModel"),UFt.forEach(t),c4r=r(Yke," (ViT model)"),Yke.forEach(t),f4r=i(W),X9=n(W,"LI",{});var Kke=s(X9);o6e=n(Kke,"STRONG",{});var JFt=s(o6e);m4r=r(JFt,"wav2vec2"),JFt.forEach(t),g4r=r(Kke," \u2014 "),dW=n(Kke,"A",{href:!0});var YFt=s(dW);h4r=r(YFt,"FlaxWav2Vec2Model"),YFt.forEach(t),p4r=r(Kke," (Wav2Vec2 model)"),Kke.forEach(t),_4r=i(W),z9=n(W,"LI",{});var Zke=s(z9);r6e=n(Zke,"STRONG",{});var KFt=s(r6e);u4r=r(KFt,"xglm"),KFt.forEach(t),b4r=r(Zke," \u2014 "),cW=n(Zke,"A",{href:!0});var ZFt=s(cW);v4r=r(ZFt,"FlaxXGLMModel"),ZFt.forEach(t),F4r=r(Zke," (XGLM model)"),Zke.forEach(t),T4r=i(W),Q9=n(W,"LI",{});var eSe=s(Q9);t6e=n(eSe,"STRONG",{});var eTt=s(t6e);M4r=r(eTt,"xlm-roberta"),eTt.forEach(t),E4r=r(eSe," \u2014 "),fW=n(eSe,"A",{href:!0});var oTt=s(fW);C4r=r(oTt,"FlaxXLMRobertaModel"),oTt.forEach(t),w4r=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),W.forEach(t),A4r=i(La),a6e=n(La,"P",{});var rTt=s(a6e);y4r=r(rTt,"Examples:"),rTt.forEach(t),L4r=i(La),m(J0.$$.fragment,La),La.forEach(t),mi.forEach(t),rPe=i(c),of=n(c,"H2",{class:!0});var gIe=s(of);W9=n(gIe,"A",{id:!0,class:!0,href:!0});var tTt=s(W9);n6e=n(tTt,"SPAN",{});var aTt=s(n6e);m(Y0.$$.fragment,aTt),aTt.forEach(t),tTt.forEach(t),x4r=i(gIe),s6e=n(gIe,"SPAN",{});var nTt=s(s6e);k4r=r(nTt,"FlaxAutoModelForCausalLM"),nTt.forEach(t),gIe.forEach(t),tPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(K0.$$.fragment,hi),S4r=i(hi),rf=n(hi,"P",{});var qJ=s(rf);R4r=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),mW=n(qJ,"A",{href:!0});var sTt=s(mW);B4r=r(sTt,"from_pretrained()"),sTt.forEach(t),P4r=r(qJ," class method or the "),gW=n(qJ,"A",{href:!0});var lTt=s(gW);$4r=r(lTt,"from_config()"),lTt.forEach(t),I4r=r(qJ,` class
method.`),qJ.forEach(t),q4r=i(hi),Z0=n(hi,"P",{});var hIe=s(Z0);N4r=r(hIe,"This class cannot be instantiated directly using "),l6e=n(hIe,"CODE",{});var iTt=s(l6e);j4r=r(iTt,"__init__()"),iTt.forEach(t),D4r=r(hIe," (throws an error)."),hIe.forEach(t),G4r=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(ey.$$.fragment,pi),O4r=i(pi),i6e=n(pi,"P",{});var dTt=s(i6e);V4r=r(dTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dTt.forEach(t),X4r=i(pi),tf=n(pi,"P",{});var NJ=s(tf);z4r=r(NJ,`Note:
Loading a model from its configuration file does `),d6e=n(NJ,"STRONG",{});var cTt=s(d6e);Q4r=r(cTt,"not"),cTt.forEach(t),W4r=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(NJ,"A",{href:!0});var fTt=s(hW);H4r=r(fTt,"from_pretrained()"),fTt.forEach(t),U4r=r(NJ," to load the model weights."),NJ.forEach(t),J4r=i(pi),c6e=n(pi,"P",{});var mTt=s(c6e);Y4r=r(mTt,"Examples:"),mTt.forEach(t),K4r=i(pi),m(oy.$$.fragment,pi),pi.forEach(t),Z4r=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(ry.$$.fragment,xa),eEr=i(xa),f6e=n(xa,"P",{});var gTt=s(f6e);oEr=r(gTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gTt.forEach(t),rEr=i(xa),Sn=n(xa,"P",{});var pE=s(Sn);tEr=r(pE,"The model class to instantiate is selected based on the "),m6e=n(pE,"CODE",{});var hTt=s(m6e);aEr=r(hTt,"model_type"),hTt.forEach(t),nEr=r(pE,` property of the config object (either
passed as an argument or loaded from `),g6e=n(pE,"CODE",{});var pTt=s(g6e);sEr=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),lEr=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h6e=n(pE,"CODE",{});var _Tt=s(h6e);iEr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),dEr=r(pE,":"),pE.forEach(t),cEr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);H9=n(_i,"LI",{});var oSe=s(H9);p6e=n(oSe,"STRONG",{});var uTt=s(p6e);fEr=r(uTt,"bart"),uTt.forEach(t),mEr=r(oSe," \u2014 "),pW=n(oSe,"A",{href:!0});var bTt=s(pW);gEr=r(bTt,"FlaxBartForCausalLM"),bTt.forEach(t),hEr=r(oSe," (BART model)"),oSe.forEach(t),pEr=i(_i),U9=n(_i,"LI",{});var rSe=s(U9);_6e=n(rSe,"STRONG",{});var vTt=s(_6e);_Er=r(vTt,"gpt2"),vTt.forEach(t),uEr=r(rSe," \u2014 "),_W=n(rSe,"A",{href:!0});var FTt=s(_W);bEr=r(FTt,"FlaxGPT2LMHeadModel"),FTt.forEach(t),vEr=r(rSe," (OpenAI GPT-2 model)"),rSe.forEach(t),FEr=i(_i),J9=n(_i,"LI",{});var tSe=s(J9);u6e=n(tSe,"STRONG",{});var TTt=s(u6e);TEr=r(TTt,"gpt_neo"),TTt.forEach(t),MEr=r(tSe," \u2014 "),uW=n(tSe,"A",{href:!0});var MTt=s(uW);EEr=r(MTt,"FlaxGPTNeoForCausalLM"),MTt.forEach(t),CEr=r(tSe," (GPT Neo model)"),tSe.forEach(t),wEr=i(_i),Y9=n(_i,"LI",{});var aSe=s(Y9);b6e=n(aSe,"STRONG",{});var ETt=s(b6e);AEr=r(ETt,"gptj"),ETt.forEach(t),yEr=r(aSe," \u2014 "),bW=n(aSe,"A",{href:!0});var CTt=s(bW);LEr=r(CTt,"FlaxGPTJForCausalLM"),CTt.forEach(t),xEr=r(aSe," (GPT-J model)"),aSe.forEach(t),kEr=i(_i),K9=n(_i,"LI",{});var nSe=s(K9);v6e=n(nSe,"STRONG",{});var wTt=s(v6e);SEr=r(wTt,"xglm"),wTt.forEach(t),REr=r(nSe," \u2014 "),vW=n(nSe,"A",{href:!0});var ATt=s(vW);BEr=r(ATt,"FlaxXGLMForCausalLM"),ATt.forEach(t),PEr=r(nSe," (XGLM model)"),nSe.forEach(t),_i.forEach(t),$Er=i(xa),F6e=n(xa,"P",{});var yTt=s(F6e);IEr=r(yTt,"Examples:"),yTt.forEach(t),qEr=i(xa),m(ty.$$.fragment,xa),xa.forEach(t),hi.forEach(t),aPe=i(c),af=n(c,"H2",{class:!0});var pIe=s(af);Z9=n(pIe,"A",{id:!0,class:!0,href:!0});var LTt=s(Z9);T6e=n(LTt,"SPAN",{});var xTt=s(T6e);m(ay.$$.fragment,xTt),xTt.forEach(t),LTt.forEach(t),NEr=i(pIe),M6e=n(pIe,"SPAN",{});var kTt=s(M6e);jEr=r(kTt,"FlaxAutoModelForPreTraining"),kTt.forEach(t),pIe.forEach(t),nPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(ny.$$.fragment,ui),DEr=i(ui),nf=n(ui,"P",{});var jJ=s(nf);GEr=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),FW=n(jJ,"A",{href:!0});var STt=s(FW);OEr=r(STt,"from_pretrained()"),STt.forEach(t),VEr=r(jJ," class method or the "),TW=n(jJ,"A",{href:!0});var RTt=s(TW);XEr=r(RTt,"from_config()"),RTt.forEach(t),zEr=r(jJ,` class
method.`),jJ.forEach(t),QEr=i(ui),sy=n(ui,"P",{});var _Ie=s(sy);WEr=r(_Ie,"This class cannot be instantiated directly using "),E6e=n(_Ie,"CODE",{});var BTt=s(E6e);HEr=r(BTt,"__init__()"),BTt.forEach(t),UEr=r(_Ie," (throws an error)."),_Ie.forEach(t),JEr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(ly.$$.fragment,bi),YEr=i(bi),C6e=n(bi,"P",{});var PTt=s(C6e);KEr=r(PTt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),PTt.forEach(t),ZEr=i(bi),sf=n(bi,"P",{});var DJ=s(sf);e5r=r(DJ,`Note:
Loading a model from its configuration file does `),w6e=n(DJ,"STRONG",{});var $Tt=s(w6e);o5r=r($Tt,"not"),$Tt.forEach(t),r5r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MW=n(DJ,"A",{href:!0});var ITt=s(MW);t5r=r(ITt,"from_pretrained()"),ITt.forEach(t),a5r=r(DJ," to load the model weights."),DJ.forEach(t),n5r=i(bi),A6e=n(bi,"P",{});var qTt=s(A6e);s5r=r(qTt,"Examples:"),qTt.forEach(t),l5r=i(bi),m(iy.$$.fragment,bi),bi.forEach(t),i5r=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(dy.$$.fragment,ka),d5r=i(ka),y6e=n(ka,"P",{});var NTt=s(y6e);c5r=r(NTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),NTt.forEach(t),f5r=i(ka),Rn=n(ka,"P",{});var _E=s(Rn);m5r=r(_E,"The model class to instantiate is selected based on the "),L6e=n(_E,"CODE",{});var jTt=s(L6e);g5r=r(jTt,"model_type"),jTt.forEach(t),h5r=r(_E,` property of the config object (either
passed as an argument or loaded from `),x6e=n(_E,"CODE",{});var DTt=s(x6e);p5r=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),_5r=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k6e=n(_E,"CODE",{});var GTt=s(k6e);u5r=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),b5r=r(_E,":"),_E.forEach(t),v5r=i(ka),me=n(ka,"UL",{});var _e=s(me);eM=n(_e,"LI",{});var sSe=s(eM);S6e=n(sSe,"STRONG",{});var OTt=s(S6e);F5r=r(OTt,"albert"),OTt.forEach(t),T5r=r(sSe," \u2014 "),EW=n(sSe,"A",{href:!0});var VTt=s(EW);M5r=r(VTt,"FlaxAlbertForPreTraining"),VTt.forEach(t),E5r=r(sSe," (ALBERT model)"),sSe.forEach(t),C5r=i(_e),oM=n(_e,"LI",{});var lSe=s(oM);R6e=n(lSe,"STRONG",{});var XTt=s(R6e);w5r=r(XTt,"bart"),XTt.forEach(t),A5r=r(lSe," \u2014 "),CW=n(lSe,"A",{href:!0});var zTt=s(CW);y5r=r(zTt,"FlaxBartForConditionalGeneration"),zTt.forEach(t),L5r=r(lSe," (BART model)"),lSe.forEach(t),x5r=i(_e),rM=n(_e,"LI",{});var iSe=s(rM);B6e=n(iSe,"STRONG",{});var QTt=s(B6e);k5r=r(QTt,"bert"),QTt.forEach(t),S5r=r(iSe," \u2014 "),wW=n(iSe,"A",{href:!0});var WTt=s(wW);R5r=r(WTt,"FlaxBertForPreTraining"),WTt.forEach(t),B5r=r(iSe," (BERT model)"),iSe.forEach(t),P5r=i(_e),tM=n(_e,"LI",{});var dSe=s(tM);P6e=n(dSe,"STRONG",{});var HTt=s(P6e);$5r=r(HTt,"big_bird"),HTt.forEach(t),I5r=r(dSe," \u2014 "),AW=n(dSe,"A",{href:!0});var UTt=s(AW);q5r=r(UTt,"FlaxBigBirdForPreTraining"),UTt.forEach(t),N5r=r(dSe," (BigBird model)"),dSe.forEach(t),j5r=i(_e),aM=n(_e,"LI",{});var cSe=s(aM);$6e=n(cSe,"STRONG",{});var JTt=s($6e);D5r=r(JTt,"electra"),JTt.forEach(t),G5r=r(cSe," \u2014 "),yW=n(cSe,"A",{href:!0});var YTt=s(yW);O5r=r(YTt,"FlaxElectraForPreTraining"),YTt.forEach(t),V5r=r(cSe," (ELECTRA model)"),cSe.forEach(t),X5r=i(_e),nM=n(_e,"LI",{});var fSe=s(nM);I6e=n(fSe,"STRONG",{});var KTt=s(I6e);z5r=r(KTt,"mbart"),KTt.forEach(t),Q5r=r(fSe," \u2014 "),LW=n(fSe,"A",{href:!0});var ZTt=s(LW);W5r=r(ZTt,"FlaxMBartForConditionalGeneration"),ZTt.forEach(t),H5r=r(fSe," (mBART model)"),fSe.forEach(t),U5r=i(_e),sM=n(_e,"LI",{});var mSe=s(sM);q6e=n(mSe,"STRONG",{});var e8t=s(q6e);J5r=r(e8t,"mt5"),e8t.forEach(t),Y5r=r(mSe," \u2014 "),xW=n(mSe,"A",{href:!0});var o8t=s(xW);K5r=r(o8t,"FlaxMT5ForConditionalGeneration"),o8t.forEach(t),Z5r=r(mSe," (mT5 model)"),mSe.forEach(t),eCr=i(_e),lM=n(_e,"LI",{});var gSe=s(lM);N6e=n(gSe,"STRONG",{});var r8t=s(N6e);oCr=r(r8t,"roberta"),r8t.forEach(t),rCr=r(gSe," \u2014 "),kW=n(gSe,"A",{href:!0});var t8t=s(kW);tCr=r(t8t,"FlaxRobertaForMaskedLM"),t8t.forEach(t),aCr=r(gSe," (RoBERTa model)"),gSe.forEach(t),nCr=i(_e),iM=n(_e,"LI",{});var hSe=s(iM);j6e=n(hSe,"STRONG",{});var a8t=s(j6e);sCr=r(a8t,"roformer"),a8t.forEach(t),lCr=r(hSe," \u2014 "),SW=n(hSe,"A",{href:!0});var n8t=s(SW);iCr=r(n8t,"FlaxRoFormerForMaskedLM"),n8t.forEach(t),dCr=r(hSe," (RoFormer model)"),hSe.forEach(t),cCr=i(_e),dM=n(_e,"LI",{});var pSe=s(dM);D6e=n(pSe,"STRONG",{});var s8t=s(D6e);fCr=r(s8t,"t5"),s8t.forEach(t),mCr=r(pSe," \u2014 "),RW=n(pSe,"A",{href:!0});var l8t=s(RW);gCr=r(l8t,"FlaxT5ForConditionalGeneration"),l8t.forEach(t),hCr=r(pSe," (T5 model)"),pSe.forEach(t),pCr=i(_e),cM=n(_e,"LI",{});var _Se=s(cM);G6e=n(_Se,"STRONG",{});var i8t=s(G6e);_Cr=r(i8t,"wav2vec2"),i8t.forEach(t),uCr=r(_Se," \u2014 "),BW=n(_Se,"A",{href:!0});var d8t=s(BW);bCr=r(d8t,"FlaxWav2Vec2ForPreTraining"),d8t.forEach(t),vCr=r(_Se," (Wav2Vec2 model)"),_Se.forEach(t),FCr=i(_e),fM=n(_e,"LI",{});var uSe=s(fM);O6e=n(uSe,"STRONG",{});var c8t=s(O6e);TCr=r(c8t,"xlm-roberta"),c8t.forEach(t),MCr=r(uSe," \u2014 "),PW=n(uSe,"A",{href:!0});var f8t=s(PW);ECr=r(f8t,"FlaxXLMRobertaForMaskedLM"),f8t.forEach(t),CCr=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),_e.forEach(t),wCr=i(ka),V6e=n(ka,"P",{});var m8t=s(V6e);ACr=r(m8t,"Examples:"),m8t.forEach(t),yCr=i(ka),m(cy.$$.fragment,ka),ka.forEach(t),ui.forEach(t),sPe=i(c),lf=n(c,"H2",{class:!0});var uIe=s(lf);mM=n(uIe,"A",{id:!0,class:!0,href:!0});var g8t=s(mM);X6e=n(g8t,"SPAN",{});var h8t=s(X6e);m(fy.$$.fragment,h8t),h8t.forEach(t),g8t.forEach(t),LCr=i(uIe),z6e=n(uIe,"SPAN",{});var p8t=s(z6e);xCr=r(p8t,"FlaxAutoModelForMaskedLM"),p8t.forEach(t),uIe.forEach(t),lPe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(my.$$.fragment,vi),kCr=i(vi),df=n(vi,"P",{});var GJ=s(df);SCr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),$W=n(GJ,"A",{href:!0});var _8t=s($W);RCr=r(_8t,"from_pretrained()"),_8t.forEach(t),BCr=r(GJ," class method or the "),IW=n(GJ,"A",{href:!0});var u8t=s(IW);PCr=r(u8t,"from_config()"),u8t.forEach(t),$Cr=r(GJ,` class
method.`),GJ.forEach(t),ICr=i(vi),gy=n(vi,"P",{});var bIe=s(gy);qCr=r(bIe,"This class cannot be instantiated directly using "),Q6e=n(bIe,"CODE",{});var b8t=s(Q6e);NCr=r(b8t,"__init__()"),b8t.forEach(t),jCr=r(bIe," (throws an error)."),bIe.forEach(t),DCr=i(vi),xt=n(vi,"DIV",{class:!0});var Fi=s(xt);m(hy.$$.fragment,Fi),GCr=i(Fi),W6e=n(Fi,"P",{});var v8t=s(W6e);OCr=r(v8t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),v8t.forEach(t),VCr=i(Fi),cf=n(Fi,"P",{});var OJ=s(cf);XCr=r(OJ,`Note:
Loading a model from its configuration file does `),H6e=n(OJ,"STRONG",{});var F8t=s(H6e);zCr=r(F8t,"not"),F8t.forEach(t),QCr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qW=n(OJ,"A",{href:!0});var T8t=s(qW);WCr=r(T8t,"from_pretrained()"),T8t.forEach(t),HCr=r(OJ," to load the model weights."),OJ.forEach(t),UCr=i(Fi),U6e=n(Fi,"P",{});var M8t=s(U6e);JCr=r(M8t,"Examples:"),M8t.forEach(t),YCr=i(Fi),m(py.$$.fragment,Fi),Fi.forEach(t),KCr=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);m(_y.$$.fragment,Sa),ZCr=i(Sa),J6e=n(Sa,"P",{});var E8t=s(J6e);ewr=r(E8t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),E8t.forEach(t),owr=i(Sa),Bn=n(Sa,"P",{});var uE=s(Bn);rwr=r(uE,"The model class to instantiate is selected based on the "),Y6e=n(uE,"CODE",{});var C8t=s(Y6e);twr=r(C8t,"model_type"),C8t.forEach(t),awr=r(uE,` property of the config object (either
passed as an argument or loaded from `),K6e=n(uE,"CODE",{});var w8t=s(K6e);nwr=r(w8t,"pretrained_model_name_or_path"),w8t.forEach(t),swr=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z6e=n(uE,"CODE",{});var A8t=s(Z6e);lwr=r(A8t,"pretrained_model_name_or_path"),A8t.forEach(t),iwr=r(uE,":"),uE.forEach(t),dwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);gM=n(Ae,"LI",{});var bSe=s(gM);eve=n(bSe,"STRONG",{});var y8t=s(eve);cwr=r(y8t,"albert"),y8t.forEach(t),fwr=r(bSe," \u2014 "),NW=n(bSe,"A",{href:!0});var L8t=s(NW);mwr=r(L8t,"FlaxAlbertForMaskedLM"),L8t.forEach(t),gwr=r(bSe," (ALBERT model)"),bSe.forEach(t),hwr=i(Ae),hM=n(Ae,"LI",{});var vSe=s(hM);ove=n(vSe,"STRONG",{});var x8t=s(ove);pwr=r(x8t,"bart"),x8t.forEach(t),_wr=r(vSe," \u2014 "),jW=n(vSe,"A",{href:!0});var k8t=s(jW);uwr=r(k8t,"FlaxBartForConditionalGeneration"),k8t.forEach(t),bwr=r(vSe," (BART model)"),vSe.forEach(t),vwr=i(Ae),pM=n(Ae,"LI",{});var FSe=s(pM);rve=n(FSe,"STRONG",{});var S8t=s(rve);Fwr=r(S8t,"bert"),S8t.forEach(t),Twr=r(FSe," \u2014 "),DW=n(FSe,"A",{href:!0});var R8t=s(DW);Mwr=r(R8t,"FlaxBertForMaskedLM"),R8t.forEach(t),Ewr=r(FSe," (BERT model)"),FSe.forEach(t),Cwr=i(Ae),_M=n(Ae,"LI",{});var TSe=s(_M);tve=n(TSe,"STRONG",{});var B8t=s(tve);wwr=r(B8t,"big_bird"),B8t.forEach(t),Awr=r(TSe," \u2014 "),GW=n(TSe,"A",{href:!0});var P8t=s(GW);ywr=r(P8t,"FlaxBigBirdForMaskedLM"),P8t.forEach(t),Lwr=r(TSe," (BigBird model)"),TSe.forEach(t),xwr=i(Ae),uM=n(Ae,"LI",{});var MSe=s(uM);ave=n(MSe,"STRONG",{});var $8t=s(ave);kwr=r($8t,"distilbert"),$8t.forEach(t),Swr=r(MSe," \u2014 "),OW=n(MSe,"A",{href:!0});var I8t=s(OW);Rwr=r(I8t,"FlaxDistilBertForMaskedLM"),I8t.forEach(t),Bwr=r(MSe," (DistilBERT model)"),MSe.forEach(t),Pwr=i(Ae),bM=n(Ae,"LI",{});var ESe=s(bM);nve=n(ESe,"STRONG",{});var q8t=s(nve);$wr=r(q8t,"electra"),q8t.forEach(t),Iwr=r(ESe," \u2014 "),VW=n(ESe,"A",{href:!0});var N8t=s(VW);qwr=r(N8t,"FlaxElectraForMaskedLM"),N8t.forEach(t),Nwr=r(ESe," (ELECTRA model)"),ESe.forEach(t),jwr=i(Ae),vM=n(Ae,"LI",{});var CSe=s(vM);sve=n(CSe,"STRONG",{});var j8t=s(sve);Dwr=r(j8t,"mbart"),j8t.forEach(t),Gwr=r(CSe," \u2014 "),XW=n(CSe,"A",{href:!0});var D8t=s(XW);Owr=r(D8t,"FlaxMBartForConditionalGeneration"),D8t.forEach(t),Vwr=r(CSe," (mBART model)"),CSe.forEach(t),Xwr=i(Ae),FM=n(Ae,"LI",{});var wSe=s(FM);lve=n(wSe,"STRONG",{});var G8t=s(lve);zwr=r(G8t,"roberta"),G8t.forEach(t),Qwr=r(wSe," \u2014 "),zW=n(wSe,"A",{href:!0});var O8t=s(zW);Wwr=r(O8t,"FlaxRobertaForMaskedLM"),O8t.forEach(t),Hwr=r(wSe," (RoBERTa model)"),wSe.forEach(t),Uwr=i(Ae),TM=n(Ae,"LI",{});var ASe=s(TM);ive=n(ASe,"STRONG",{});var V8t=s(ive);Jwr=r(V8t,"roformer"),V8t.forEach(t),Ywr=r(ASe," \u2014 "),QW=n(ASe,"A",{href:!0});var X8t=s(QW);Kwr=r(X8t,"FlaxRoFormerForMaskedLM"),X8t.forEach(t),Zwr=r(ASe," (RoFormer model)"),ASe.forEach(t),eAr=i(Ae),MM=n(Ae,"LI",{});var ySe=s(MM);dve=n(ySe,"STRONG",{});var z8t=s(dve);oAr=r(z8t,"xlm-roberta"),z8t.forEach(t),rAr=r(ySe," \u2014 "),WW=n(ySe,"A",{href:!0});var Q8t=s(WW);tAr=r(Q8t,"FlaxXLMRobertaForMaskedLM"),Q8t.forEach(t),aAr=r(ySe," (XLM-RoBERTa model)"),ySe.forEach(t),Ae.forEach(t),nAr=i(Sa),cve=n(Sa,"P",{});var W8t=s(cve);sAr=r(W8t,"Examples:"),W8t.forEach(t),lAr=i(Sa),m(uy.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),iPe=i(c),ff=n(c,"H2",{class:!0});var vIe=s(ff);EM=n(vIe,"A",{id:!0,class:!0,href:!0});var H8t=s(EM);fve=n(H8t,"SPAN",{});var U8t=s(fve);m(by.$$.fragment,U8t),U8t.forEach(t),H8t.forEach(t),iAr=i(vIe),mve=n(vIe,"SPAN",{});var J8t=s(mve);dAr=r(J8t,"FlaxAutoModelForSeq2SeqLM"),J8t.forEach(t),vIe.forEach(t),dPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(vy.$$.fragment,Ti),cAr=i(Ti),mf=n(Ti,"P",{});var VJ=s(mf);fAr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HW=n(VJ,"A",{href:!0});var Y8t=s(HW);mAr=r(Y8t,"from_pretrained()"),Y8t.forEach(t),gAr=r(VJ," class method or the "),UW=n(VJ,"A",{href:!0});var K8t=s(UW);hAr=r(K8t,"from_config()"),K8t.forEach(t),pAr=r(VJ,` class
method.`),VJ.forEach(t),_Ar=i(Ti),Fy=n(Ti,"P",{});var FIe=s(Fy);uAr=r(FIe,"This class cannot be instantiated directly using "),gve=n(FIe,"CODE",{});var Z8t=s(gve);bAr=r(Z8t,"__init__()"),Z8t.forEach(t),vAr=r(FIe," (throws an error)."),FIe.forEach(t),FAr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(Ty.$$.fragment,Mi),TAr=i(Mi),hve=n(Mi,"P",{});var e9t=s(hve);MAr=r(e9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),e9t.forEach(t),EAr=i(Mi),gf=n(Mi,"P",{});var XJ=s(gf);CAr=r(XJ,`Note:
Loading a model from its configuration file does `),pve=n(XJ,"STRONG",{});var o9t=s(pve);wAr=r(o9t,"not"),o9t.forEach(t),AAr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JW=n(XJ,"A",{href:!0});var r9t=s(JW);yAr=r(r9t,"from_pretrained()"),r9t.forEach(t),LAr=r(XJ," to load the model weights."),XJ.forEach(t),xAr=i(Mi),_ve=n(Mi,"P",{});var t9t=s(_ve);kAr=r(t9t,"Examples:"),t9t.forEach(t),SAr=i(Mi),m(My.$$.fragment,Mi),Mi.forEach(t),RAr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(Ey.$$.fragment,Ra),BAr=i(Ra),uve=n(Ra,"P",{});var a9t=s(uve);PAr=r(a9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),a9t.forEach(t),$Ar=i(Ra),Pn=n(Ra,"P",{});var bE=s(Pn);IAr=r(bE,"The model class to instantiate is selected based on the "),bve=n(bE,"CODE",{});var n9t=s(bve);qAr=r(n9t,"model_type"),n9t.forEach(t),NAr=r(bE,` property of the config object (either
passed as an argument or loaded from `),vve=n(bE,"CODE",{});var s9t=s(vve);jAr=r(s9t,"pretrained_model_name_or_path"),s9t.forEach(t),DAr=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(bE,"CODE",{});var l9t=s(Fve);GAr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),OAr=r(bE,":"),bE.forEach(t),VAr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);CM=n(so,"LI",{});var LSe=s(CM);Tve=n(LSe,"STRONG",{});var i9t=s(Tve);XAr=r(i9t,"bart"),i9t.forEach(t),zAr=r(LSe," \u2014 "),YW=n(LSe,"A",{href:!0});var d9t=s(YW);QAr=r(d9t,"FlaxBartForConditionalGeneration"),d9t.forEach(t),WAr=r(LSe," (BART model)"),LSe.forEach(t),HAr=i(so),wM=n(so,"LI",{});var xSe=s(wM);Mve=n(xSe,"STRONG",{});var c9t=s(Mve);UAr=r(c9t,"blenderbot"),c9t.forEach(t),JAr=r(xSe," \u2014 "),KW=n(xSe,"A",{href:!0});var f9t=s(KW);YAr=r(f9t,"FlaxBlenderbotForConditionalGeneration"),f9t.forEach(t),KAr=r(xSe," (Blenderbot model)"),xSe.forEach(t),ZAr=i(so),AM=n(so,"LI",{});var kSe=s(AM);Eve=n(kSe,"STRONG",{});var m9t=s(Eve);e0r=r(m9t,"blenderbot-small"),m9t.forEach(t),o0r=r(kSe," \u2014 "),ZW=n(kSe,"A",{href:!0});var g9t=s(ZW);r0r=r(g9t,"FlaxBlenderbotSmallForConditionalGeneration"),g9t.forEach(t),t0r=r(kSe," (BlenderbotSmall model)"),kSe.forEach(t),a0r=i(so),yM=n(so,"LI",{});var SSe=s(yM);Cve=n(SSe,"STRONG",{});var h9t=s(Cve);n0r=r(h9t,"encoder-decoder"),h9t.forEach(t),s0r=r(SSe," \u2014 "),eH=n(SSe,"A",{href:!0});var p9t=s(eH);l0r=r(p9t,"FlaxEncoderDecoderModel"),p9t.forEach(t),i0r=r(SSe," (Encoder decoder model)"),SSe.forEach(t),d0r=i(so),LM=n(so,"LI",{});var RSe=s(LM);wve=n(RSe,"STRONG",{});var _9t=s(wve);c0r=r(_9t,"marian"),_9t.forEach(t),f0r=r(RSe," \u2014 "),oH=n(RSe,"A",{href:!0});var u9t=s(oH);m0r=r(u9t,"FlaxMarianMTModel"),u9t.forEach(t),g0r=r(RSe," (Marian model)"),RSe.forEach(t),h0r=i(so),xM=n(so,"LI",{});var BSe=s(xM);Ave=n(BSe,"STRONG",{});var b9t=s(Ave);p0r=r(b9t,"mbart"),b9t.forEach(t),_0r=r(BSe," \u2014 "),rH=n(BSe,"A",{href:!0});var v9t=s(rH);u0r=r(v9t,"FlaxMBartForConditionalGeneration"),v9t.forEach(t),b0r=r(BSe," (mBART model)"),BSe.forEach(t),v0r=i(so),kM=n(so,"LI",{});var PSe=s(kM);yve=n(PSe,"STRONG",{});var F9t=s(yve);F0r=r(F9t,"mt5"),F9t.forEach(t),T0r=r(PSe," \u2014 "),tH=n(PSe,"A",{href:!0});var T9t=s(tH);M0r=r(T9t,"FlaxMT5ForConditionalGeneration"),T9t.forEach(t),E0r=r(PSe," (mT5 model)"),PSe.forEach(t),C0r=i(so),SM=n(so,"LI",{});var $Se=s(SM);Lve=n($Se,"STRONG",{});var M9t=s(Lve);w0r=r(M9t,"pegasus"),M9t.forEach(t),A0r=r($Se," \u2014 "),aH=n($Se,"A",{href:!0});var E9t=s(aH);y0r=r(E9t,"FlaxPegasusForConditionalGeneration"),E9t.forEach(t),L0r=r($Se," (Pegasus model)"),$Se.forEach(t),x0r=i(so),RM=n(so,"LI",{});var ISe=s(RM);xve=n(ISe,"STRONG",{});var C9t=s(xve);k0r=r(C9t,"t5"),C9t.forEach(t),S0r=r(ISe," \u2014 "),nH=n(ISe,"A",{href:!0});var w9t=s(nH);R0r=r(w9t,"FlaxT5ForConditionalGeneration"),w9t.forEach(t),B0r=r(ISe," (T5 model)"),ISe.forEach(t),so.forEach(t),P0r=i(Ra),kve=n(Ra,"P",{});var A9t=s(kve);$0r=r(A9t,"Examples:"),A9t.forEach(t),I0r=i(Ra),m(Cy.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),cPe=i(c),hf=n(c,"H2",{class:!0});var TIe=s(hf);BM=n(TIe,"A",{id:!0,class:!0,href:!0});var y9t=s(BM);Sve=n(y9t,"SPAN",{});var L9t=s(Sve);m(wy.$$.fragment,L9t),L9t.forEach(t),y9t.forEach(t),q0r=i(TIe),Rve=n(TIe,"SPAN",{});var x9t=s(Rve);N0r=r(x9t,"FlaxAutoModelForSequenceClassification"),x9t.forEach(t),TIe.forEach(t),fPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(Ay.$$.fragment,Ei),j0r=i(Ei),pf=n(Ei,"P",{});var zJ=s(pf);D0r=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sH=n(zJ,"A",{href:!0});var k9t=s(sH);G0r=r(k9t,"from_pretrained()"),k9t.forEach(t),O0r=r(zJ," class method or the "),lH=n(zJ,"A",{href:!0});var S9t=s(lH);V0r=r(S9t,"from_config()"),S9t.forEach(t),X0r=r(zJ,` class
method.`),zJ.forEach(t),z0r=i(Ei),yy=n(Ei,"P",{});var MIe=s(yy);Q0r=r(MIe,"This class cannot be instantiated directly using "),Bve=n(MIe,"CODE",{});var R9t=s(Bve);W0r=r(R9t,"__init__()"),R9t.forEach(t),H0r=r(MIe," (throws an error)."),MIe.forEach(t),U0r=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(Ly.$$.fragment,Ci),J0r=i(Ci),Pve=n(Ci,"P",{});var B9t=s(Pve);Y0r=r(B9t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B9t.forEach(t),K0r=i(Ci),_f=n(Ci,"P",{});var QJ=s(_f);Z0r=r(QJ,`Note:
Loading a model from its configuration file does `),$ve=n(QJ,"STRONG",{});var P9t=s($ve);eyr=r(P9t,"not"),P9t.forEach(t),oyr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iH=n(QJ,"A",{href:!0});var $9t=s(iH);ryr=r($9t,"from_pretrained()"),$9t.forEach(t),tyr=r(QJ," to load the model weights."),QJ.forEach(t),ayr=i(Ci),Ive=n(Ci,"P",{});var I9t=s(Ive);nyr=r(I9t,"Examples:"),I9t.forEach(t),syr=i(Ci),m(xy.$$.fragment,Ci),Ci.forEach(t),lyr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m(ky.$$.fragment,Ba),iyr=i(Ba),qve=n(Ba,"P",{});var q9t=s(qve);dyr=r(q9t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q9t.forEach(t),cyr=i(Ba),$n=n(Ba,"P",{});var vE=s($n);fyr=r(vE,"The model class to instantiate is selected based on the "),Nve=n(vE,"CODE",{});var N9t=s(Nve);myr=r(N9t,"model_type"),N9t.forEach(t),gyr=r(vE,` property of the config object (either
passed as an argument or loaded from `),jve=n(vE,"CODE",{});var j9t=s(jve);hyr=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),pyr=r(vE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(vE,"CODE",{});var D9t=s(Dve);_yr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),uyr=r(vE,":"),vE.forEach(t),byr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);PM=n(ye,"LI",{});var qSe=s(PM);Gve=n(qSe,"STRONG",{});var G9t=s(Gve);vyr=r(G9t,"albert"),G9t.forEach(t),Fyr=r(qSe," \u2014 "),dH=n(qSe,"A",{href:!0});var O9t=s(dH);Tyr=r(O9t,"FlaxAlbertForSequenceClassification"),O9t.forEach(t),Myr=r(qSe," (ALBERT model)"),qSe.forEach(t),Eyr=i(ye),$M=n(ye,"LI",{});var NSe=s($M);Ove=n(NSe,"STRONG",{});var V9t=s(Ove);Cyr=r(V9t,"bart"),V9t.forEach(t),wyr=r(NSe," \u2014 "),cH=n(NSe,"A",{href:!0});var X9t=s(cH);Ayr=r(X9t,"FlaxBartForSequenceClassification"),X9t.forEach(t),yyr=r(NSe," (BART model)"),NSe.forEach(t),Lyr=i(ye),IM=n(ye,"LI",{});var jSe=s(IM);Vve=n(jSe,"STRONG",{});var z9t=s(Vve);xyr=r(z9t,"bert"),z9t.forEach(t),kyr=r(jSe," \u2014 "),fH=n(jSe,"A",{href:!0});var Q9t=s(fH);Syr=r(Q9t,"FlaxBertForSequenceClassification"),Q9t.forEach(t),Ryr=r(jSe," (BERT model)"),jSe.forEach(t),Byr=i(ye),qM=n(ye,"LI",{});var DSe=s(qM);Xve=n(DSe,"STRONG",{});var W9t=s(Xve);Pyr=r(W9t,"big_bird"),W9t.forEach(t),$yr=r(DSe," \u2014 "),mH=n(DSe,"A",{href:!0});var H9t=s(mH);Iyr=r(H9t,"FlaxBigBirdForSequenceClassification"),H9t.forEach(t),qyr=r(DSe," (BigBird model)"),DSe.forEach(t),Nyr=i(ye),NM=n(ye,"LI",{});var GSe=s(NM);zve=n(GSe,"STRONG",{});var U9t=s(zve);jyr=r(U9t,"distilbert"),U9t.forEach(t),Dyr=r(GSe," \u2014 "),gH=n(GSe,"A",{href:!0});var J9t=s(gH);Gyr=r(J9t,"FlaxDistilBertForSequenceClassification"),J9t.forEach(t),Oyr=r(GSe," (DistilBERT model)"),GSe.forEach(t),Vyr=i(ye),jM=n(ye,"LI",{});var OSe=s(jM);Qve=n(OSe,"STRONG",{});var Y9t=s(Qve);Xyr=r(Y9t,"electra"),Y9t.forEach(t),zyr=r(OSe," \u2014 "),hH=n(OSe,"A",{href:!0});var K9t=s(hH);Qyr=r(K9t,"FlaxElectraForSequenceClassification"),K9t.forEach(t),Wyr=r(OSe," (ELECTRA model)"),OSe.forEach(t),Hyr=i(ye),DM=n(ye,"LI",{});var VSe=s(DM);Wve=n(VSe,"STRONG",{});var Z9t=s(Wve);Uyr=r(Z9t,"mbart"),Z9t.forEach(t),Jyr=r(VSe," \u2014 "),pH=n(VSe,"A",{href:!0});var eMt=s(pH);Yyr=r(eMt,"FlaxMBartForSequenceClassification"),eMt.forEach(t),Kyr=r(VSe," (mBART model)"),VSe.forEach(t),Zyr=i(ye),GM=n(ye,"LI",{});var XSe=s(GM);Hve=n(XSe,"STRONG",{});var oMt=s(Hve);eLr=r(oMt,"roberta"),oMt.forEach(t),oLr=r(XSe," \u2014 "),_H=n(XSe,"A",{href:!0});var rMt=s(_H);rLr=r(rMt,"FlaxRobertaForSequenceClassification"),rMt.forEach(t),tLr=r(XSe," (RoBERTa model)"),XSe.forEach(t),aLr=i(ye),OM=n(ye,"LI",{});var zSe=s(OM);Uve=n(zSe,"STRONG",{});var tMt=s(Uve);nLr=r(tMt,"roformer"),tMt.forEach(t),sLr=r(zSe," \u2014 "),uH=n(zSe,"A",{href:!0});var aMt=s(uH);lLr=r(aMt,"FlaxRoFormerForSequenceClassification"),aMt.forEach(t),iLr=r(zSe," (RoFormer model)"),zSe.forEach(t),dLr=i(ye),VM=n(ye,"LI",{});var QSe=s(VM);Jve=n(QSe,"STRONG",{});var nMt=s(Jve);cLr=r(nMt,"xlm-roberta"),nMt.forEach(t),fLr=r(QSe," \u2014 "),bH=n(QSe,"A",{href:!0});var sMt=s(bH);mLr=r(sMt,"FlaxXLMRobertaForSequenceClassification"),sMt.forEach(t),gLr=r(QSe," (XLM-RoBERTa model)"),QSe.forEach(t),ye.forEach(t),hLr=i(Ba),Yve=n(Ba,"P",{});var lMt=s(Yve);pLr=r(lMt,"Examples:"),lMt.forEach(t),_Lr=i(Ba),m(Sy.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),mPe=i(c),uf=n(c,"H2",{class:!0});var EIe=s(uf);XM=n(EIe,"A",{id:!0,class:!0,href:!0});var iMt=s(XM);Kve=n(iMt,"SPAN",{});var dMt=s(Kve);m(Ry.$$.fragment,dMt),dMt.forEach(t),iMt.forEach(t),uLr=i(EIe),Zve=n(EIe,"SPAN",{});var cMt=s(Zve);bLr=r(cMt,"FlaxAutoModelForQuestionAnswering"),cMt.forEach(t),EIe.forEach(t),gPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(By.$$.fragment,wi),vLr=i(wi),bf=n(wi,"P",{});var WJ=s(bf);FLr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),vH=n(WJ,"A",{href:!0});var fMt=s(vH);TLr=r(fMt,"from_pretrained()"),fMt.forEach(t),MLr=r(WJ," class method or the "),FH=n(WJ,"A",{href:!0});var mMt=s(FH);ELr=r(mMt,"from_config()"),mMt.forEach(t),CLr=r(WJ,` class
method.`),WJ.forEach(t),wLr=i(wi),Py=n(wi,"P",{});var CIe=s(Py);ALr=r(CIe,"This class cannot be instantiated directly using "),eFe=n(CIe,"CODE",{});var gMt=s(eFe);yLr=r(gMt,"__init__()"),gMt.forEach(t),LLr=r(CIe," (throws an error)."),CIe.forEach(t),xLr=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m($y.$$.fragment,Ai),kLr=i(Ai),oFe=n(Ai,"P",{});var hMt=s(oFe);SLr=r(hMt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hMt.forEach(t),RLr=i(Ai),vf=n(Ai,"P",{});var HJ=s(vf);BLr=r(HJ,`Note:
Loading a model from its configuration file does `),rFe=n(HJ,"STRONG",{});var pMt=s(rFe);PLr=r(pMt,"not"),pMt.forEach(t),$Lr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TH=n(HJ,"A",{href:!0});var _Mt=s(TH);ILr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),qLr=r(HJ," to load the model weights."),HJ.forEach(t),NLr=i(Ai),tFe=n(Ai,"P",{});var uMt=s(tFe);jLr=r(uMt,"Examples:"),uMt.forEach(t),DLr=i(Ai),m(Iy.$$.fragment,Ai),Ai.forEach(t),GLr=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(qy.$$.fragment,Pa),OLr=i(Pa),aFe=n(Pa,"P",{});var bMt=s(aFe);VLr=r(bMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),bMt.forEach(t),XLr=i(Pa),In=n(Pa,"P",{});var FE=s(In);zLr=r(FE,"The model class to instantiate is selected based on the "),nFe=n(FE,"CODE",{});var vMt=s(nFe);QLr=r(vMt,"model_type"),vMt.forEach(t),WLr=r(FE,` property of the config object (either
passed as an argument or loaded from `),sFe=n(FE,"CODE",{});var FMt=s(sFe);HLr=r(FMt,"pretrained_model_name_or_path"),FMt.forEach(t),ULr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(FE,"CODE",{});var TMt=s(lFe);JLr=r(TMt,"pretrained_model_name_or_path"),TMt.forEach(t),YLr=r(FE,":"),FE.forEach(t),KLr=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);zM=n(Le,"LI",{});var WSe=s(zM);iFe=n(WSe,"STRONG",{});var MMt=s(iFe);ZLr=r(MMt,"albert"),MMt.forEach(t),e7r=r(WSe," \u2014 "),MH=n(WSe,"A",{href:!0});var EMt=s(MH);o7r=r(EMt,"FlaxAlbertForQuestionAnswering"),EMt.forEach(t),r7r=r(WSe," (ALBERT model)"),WSe.forEach(t),t7r=i(Le),QM=n(Le,"LI",{});var HSe=s(QM);dFe=n(HSe,"STRONG",{});var CMt=s(dFe);a7r=r(CMt,"bart"),CMt.forEach(t),n7r=r(HSe," \u2014 "),EH=n(HSe,"A",{href:!0});var wMt=s(EH);s7r=r(wMt,"FlaxBartForQuestionAnswering"),wMt.forEach(t),l7r=r(HSe," (BART model)"),HSe.forEach(t),i7r=i(Le),WM=n(Le,"LI",{});var USe=s(WM);cFe=n(USe,"STRONG",{});var AMt=s(cFe);d7r=r(AMt,"bert"),AMt.forEach(t),c7r=r(USe," \u2014 "),CH=n(USe,"A",{href:!0});var yMt=s(CH);f7r=r(yMt,"FlaxBertForQuestionAnswering"),yMt.forEach(t),m7r=r(USe," (BERT model)"),USe.forEach(t),g7r=i(Le),HM=n(Le,"LI",{});var JSe=s(HM);fFe=n(JSe,"STRONG",{});var LMt=s(fFe);h7r=r(LMt,"big_bird"),LMt.forEach(t),p7r=r(JSe," \u2014 "),wH=n(JSe,"A",{href:!0});var xMt=s(wH);_7r=r(xMt,"FlaxBigBirdForQuestionAnswering"),xMt.forEach(t),u7r=r(JSe," (BigBird model)"),JSe.forEach(t),b7r=i(Le),UM=n(Le,"LI",{});var YSe=s(UM);mFe=n(YSe,"STRONG",{});var kMt=s(mFe);v7r=r(kMt,"distilbert"),kMt.forEach(t),F7r=r(YSe," \u2014 "),AH=n(YSe,"A",{href:!0});var SMt=s(AH);T7r=r(SMt,"FlaxDistilBertForQuestionAnswering"),SMt.forEach(t),M7r=r(YSe," (DistilBERT model)"),YSe.forEach(t),E7r=i(Le),JM=n(Le,"LI",{});var KSe=s(JM);gFe=n(KSe,"STRONG",{});var RMt=s(gFe);C7r=r(RMt,"electra"),RMt.forEach(t),w7r=r(KSe," \u2014 "),yH=n(KSe,"A",{href:!0});var BMt=s(yH);A7r=r(BMt,"FlaxElectraForQuestionAnswering"),BMt.forEach(t),y7r=r(KSe," (ELECTRA model)"),KSe.forEach(t),L7r=i(Le),YM=n(Le,"LI",{});var ZSe=s(YM);hFe=n(ZSe,"STRONG",{});var PMt=s(hFe);x7r=r(PMt,"mbart"),PMt.forEach(t),k7r=r(ZSe," \u2014 "),LH=n(ZSe,"A",{href:!0});var $Mt=s(LH);S7r=r($Mt,"FlaxMBartForQuestionAnswering"),$Mt.forEach(t),R7r=r(ZSe," (mBART model)"),ZSe.forEach(t),B7r=i(Le),KM=n(Le,"LI",{});var eRe=s(KM);pFe=n(eRe,"STRONG",{});var IMt=s(pFe);P7r=r(IMt,"roberta"),IMt.forEach(t),$7r=r(eRe," \u2014 "),xH=n(eRe,"A",{href:!0});var qMt=s(xH);I7r=r(qMt,"FlaxRobertaForQuestionAnswering"),qMt.forEach(t),q7r=r(eRe," (RoBERTa model)"),eRe.forEach(t),N7r=i(Le),ZM=n(Le,"LI",{});var oRe=s(ZM);_Fe=n(oRe,"STRONG",{});var NMt=s(_Fe);j7r=r(NMt,"roformer"),NMt.forEach(t),D7r=r(oRe," \u2014 "),kH=n(oRe,"A",{href:!0});var jMt=s(kH);G7r=r(jMt,"FlaxRoFormerForQuestionAnswering"),jMt.forEach(t),O7r=r(oRe," (RoFormer model)"),oRe.forEach(t),V7r=i(Le),e4=n(Le,"LI",{});var rRe=s(e4);uFe=n(rRe,"STRONG",{});var DMt=s(uFe);X7r=r(DMt,"xlm-roberta"),DMt.forEach(t),z7r=r(rRe," \u2014 "),SH=n(rRe,"A",{href:!0});var GMt=s(SH);Q7r=r(GMt,"FlaxXLMRobertaForQuestionAnswering"),GMt.forEach(t),W7r=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),Le.forEach(t),H7r=i(Pa),bFe=n(Pa,"P",{});var OMt=s(bFe);U7r=r(OMt,"Examples:"),OMt.forEach(t),J7r=i(Pa),m(Ny.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),hPe=i(c),Ff=n(c,"H2",{class:!0});var wIe=s(Ff);o4=n(wIe,"A",{id:!0,class:!0,href:!0});var VMt=s(o4);vFe=n(VMt,"SPAN",{});var XMt=s(vFe);m(jy.$$.fragment,XMt),XMt.forEach(t),VMt.forEach(t),Y7r=i(wIe),FFe=n(wIe,"SPAN",{});var zMt=s(FFe);K7r=r(zMt,"FlaxAutoModelForTokenClassification"),zMt.forEach(t),wIe.forEach(t),pPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(Dy.$$.fragment,yi),Z7r=i(yi),Tf=n(yi,"P",{});var UJ=s(Tf);exr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),RH=n(UJ,"A",{href:!0});var QMt=s(RH);oxr=r(QMt,"from_pretrained()"),QMt.forEach(t),rxr=r(UJ," class method or the "),BH=n(UJ,"A",{href:!0});var WMt=s(BH);txr=r(WMt,"from_config()"),WMt.forEach(t),axr=r(UJ,` class
method.`),UJ.forEach(t),nxr=i(yi),Gy=n(yi,"P",{});var AIe=s(Gy);sxr=r(AIe,"This class cannot be instantiated directly using "),TFe=n(AIe,"CODE",{});var HMt=s(TFe);lxr=r(HMt,"__init__()"),HMt.forEach(t),ixr=r(AIe," (throws an error)."),AIe.forEach(t),dxr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(Oy.$$.fragment,Li),cxr=i(Li),MFe=n(Li,"P",{});var UMt=s(MFe);fxr=r(UMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UMt.forEach(t),mxr=i(Li),Mf=n(Li,"P",{});var JJ=s(Mf);gxr=r(JJ,`Note:
Loading a model from its configuration file does `),EFe=n(JJ,"STRONG",{});var JMt=s(EFe);hxr=r(JMt,"not"),JMt.forEach(t),pxr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PH=n(JJ,"A",{href:!0});var YMt=s(PH);_xr=r(YMt,"from_pretrained()"),YMt.forEach(t),uxr=r(JJ," to load the model weights."),JJ.forEach(t),bxr=i(Li),CFe=n(Li,"P",{});var KMt=s(CFe);vxr=r(KMt,"Examples:"),KMt.forEach(t),Fxr=i(Li),m(Vy.$$.fragment,Li),Li.forEach(t),Txr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(Xy.$$.fragment,$a),Mxr=i($a),wFe=n($a,"P",{});var ZMt=s(wFe);Exr=r(ZMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ZMt.forEach(t),Cxr=i($a),qn=n($a,"P",{});var TE=s(qn);wxr=r(TE,"The model class to instantiate is selected based on the "),AFe=n(TE,"CODE",{});var e4t=s(AFe);Axr=r(e4t,"model_type"),e4t.forEach(t),yxr=r(TE,` property of the config object (either
passed as an argument or loaded from `),yFe=n(TE,"CODE",{});var o4t=s(yFe);Lxr=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),xxr=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LFe=n(TE,"CODE",{});var r4t=s(LFe);kxr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),Sxr=r(TE,":"),TE.forEach(t),Rxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);r4=n(Oo,"LI",{});var tRe=s(r4);xFe=n(tRe,"STRONG",{});var t4t=s(xFe);Bxr=r(t4t,"albert"),t4t.forEach(t),Pxr=r(tRe," \u2014 "),$H=n(tRe,"A",{href:!0});var a4t=s($H);$xr=r(a4t,"FlaxAlbertForTokenClassification"),a4t.forEach(t),Ixr=r(tRe," (ALBERT model)"),tRe.forEach(t),qxr=i(Oo),t4=n(Oo,"LI",{});var aRe=s(t4);kFe=n(aRe,"STRONG",{});var n4t=s(kFe);Nxr=r(n4t,"bert"),n4t.forEach(t),jxr=r(aRe," \u2014 "),IH=n(aRe,"A",{href:!0});var s4t=s(IH);Dxr=r(s4t,"FlaxBertForTokenClassification"),s4t.forEach(t),Gxr=r(aRe," (BERT model)"),aRe.forEach(t),Oxr=i(Oo),a4=n(Oo,"LI",{});var nRe=s(a4);SFe=n(nRe,"STRONG",{});var l4t=s(SFe);Vxr=r(l4t,"big_bird"),l4t.forEach(t),Xxr=r(nRe," \u2014 "),qH=n(nRe,"A",{href:!0});var i4t=s(qH);zxr=r(i4t,"FlaxBigBirdForTokenClassification"),i4t.forEach(t),Qxr=r(nRe," (BigBird model)"),nRe.forEach(t),Wxr=i(Oo),n4=n(Oo,"LI",{});var sRe=s(n4);RFe=n(sRe,"STRONG",{});var d4t=s(RFe);Hxr=r(d4t,"distilbert"),d4t.forEach(t),Uxr=r(sRe," \u2014 "),NH=n(sRe,"A",{href:!0});var c4t=s(NH);Jxr=r(c4t,"FlaxDistilBertForTokenClassification"),c4t.forEach(t),Yxr=r(sRe," (DistilBERT model)"),sRe.forEach(t),Kxr=i(Oo),s4=n(Oo,"LI",{});var lRe=s(s4);BFe=n(lRe,"STRONG",{});var f4t=s(BFe);Zxr=r(f4t,"electra"),f4t.forEach(t),ekr=r(lRe," \u2014 "),jH=n(lRe,"A",{href:!0});var m4t=s(jH);okr=r(m4t,"FlaxElectraForTokenClassification"),m4t.forEach(t),rkr=r(lRe," (ELECTRA model)"),lRe.forEach(t),tkr=i(Oo),l4=n(Oo,"LI",{});var iRe=s(l4);PFe=n(iRe,"STRONG",{});var g4t=s(PFe);akr=r(g4t,"roberta"),g4t.forEach(t),nkr=r(iRe," \u2014 "),DH=n(iRe,"A",{href:!0});var h4t=s(DH);skr=r(h4t,"FlaxRobertaForTokenClassification"),h4t.forEach(t),lkr=r(iRe," (RoBERTa model)"),iRe.forEach(t),ikr=i(Oo),i4=n(Oo,"LI",{});var dRe=s(i4);$Fe=n(dRe,"STRONG",{});var p4t=s($Fe);dkr=r(p4t,"roformer"),p4t.forEach(t),ckr=r(dRe," \u2014 "),GH=n(dRe,"A",{href:!0});var _4t=s(GH);fkr=r(_4t,"FlaxRoFormerForTokenClassification"),_4t.forEach(t),mkr=r(dRe," (RoFormer model)"),dRe.forEach(t),gkr=i(Oo),d4=n(Oo,"LI",{});var cRe=s(d4);IFe=n(cRe,"STRONG",{});var u4t=s(IFe);hkr=r(u4t,"xlm-roberta"),u4t.forEach(t),pkr=r(cRe," \u2014 "),OH=n(cRe,"A",{href:!0});var b4t=s(OH);_kr=r(b4t,"FlaxXLMRobertaForTokenClassification"),b4t.forEach(t),ukr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Oo.forEach(t),bkr=i($a),qFe=n($a,"P",{});var v4t=s(qFe);vkr=r(v4t,"Examples:"),v4t.forEach(t),Fkr=i($a),m(zy.$$.fragment,$a),$a.forEach(t),yi.forEach(t),_Pe=i(c),Ef=n(c,"H2",{class:!0});var yIe=s(Ef);c4=n(yIe,"A",{id:!0,class:!0,href:!0});var F4t=s(c4);NFe=n(F4t,"SPAN",{});var T4t=s(NFe);m(Qy.$$.fragment,T4t),T4t.forEach(t),F4t.forEach(t),Tkr=i(yIe),jFe=n(yIe,"SPAN",{});var M4t=s(jFe);Mkr=r(M4t,"FlaxAutoModelForMultipleChoice"),M4t.forEach(t),yIe.forEach(t),uPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(Wy.$$.fragment,xi),Ekr=i(xi),Cf=n(xi,"P",{});var YJ=s(Cf);Ckr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),VH=n(YJ,"A",{href:!0});var E4t=s(VH);wkr=r(E4t,"from_pretrained()"),E4t.forEach(t),Akr=r(YJ," class method or the "),XH=n(YJ,"A",{href:!0});var C4t=s(XH);ykr=r(C4t,"from_config()"),C4t.forEach(t),Lkr=r(YJ,` class
method.`),YJ.forEach(t),xkr=i(xi),Hy=n(xi,"P",{});var LIe=s(Hy);kkr=r(LIe,"This class cannot be instantiated directly using "),DFe=n(LIe,"CODE",{});var w4t=s(DFe);Skr=r(w4t,"__init__()"),w4t.forEach(t),Rkr=r(LIe," (throws an error)."),LIe.forEach(t),Bkr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(Uy.$$.fragment,ki),Pkr=i(ki),GFe=n(ki,"P",{});var A4t=s(GFe);$kr=r(A4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),A4t.forEach(t),Ikr=i(ki),wf=n(ki,"P",{});var KJ=s(wf);qkr=r(KJ,`Note:
Loading a model from its configuration file does `),OFe=n(KJ,"STRONG",{});var y4t=s(OFe);Nkr=r(y4t,"not"),y4t.forEach(t),jkr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(KJ,"A",{href:!0});var L4t=s(zH);Dkr=r(L4t,"from_pretrained()"),L4t.forEach(t),Gkr=r(KJ," to load the model weights."),KJ.forEach(t),Okr=i(ki),VFe=n(ki,"P",{});var x4t=s(VFe);Vkr=r(x4t,"Examples:"),x4t.forEach(t),Xkr=i(ki),m(Jy.$$.fragment,ki),ki.forEach(t),zkr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(Yy.$$.fragment,Ia),Qkr=i(Ia),XFe=n(Ia,"P",{});var k4t=s(XFe);Wkr=r(k4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),k4t.forEach(t),Hkr=i(Ia),Nn=n(Ia,"P",{});var ME=s(Nn);Ukr=r(ME,"The model class to instantiate is selected based on the "),zFe=n(ME,"CODE",{});var S4t=s(zFe);Jkr=r(S4t,"model_type"),S4t.forEach(t),Ykr=r(ME,` property of the config object (either
passed as an argument or loaded from `),QFe=n(ME,"CODE",{});var R4t=s(QFe);Kkr=r(R4t,"pretrained_model_name_or_path"),R4t.forEach(t),Zkr=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WFe=n(ME,"CODE",{});var B4t=s(WFe);eSr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),oSr=r(ME,":"),ME.forEach(t),rSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);f4=n(Vo,"LI",{});var fRe=s(f4);HFe=n(fRe,"STRONG",{});var P4t=s(HFe);tSr=r(P4t,"albert"),P4t.forEach(t),aSr=r(fRe," \u2014 "),QH=n(fRe,"A",{href:!0});var $4t=s(QH);nSr=r($4t,"FlaxAlbertForMultipleChoice"),$4t.forEach(t),sSr=r(fRe," (ALBERT model)"),fRe.forEach(t),lSr=i(Vo),m4=n(Vo,"LI",{});var mRe=s(m4);UFe=n(mRe,"STRONG",{});var I4t=s(UFe);iSr=r(I4t,"bert"),I4t.forEach(t),dSr=r(mRe," \u2014 "),WH=n(mRe,"A",{href:!0});var q4t=s(WH);cSr=r(q4t,"FlaxBertForMultipleChoice"),q4t.forEach(t),fSr=r(mRe," (BERT model)"),mRe.forEach(t),mSr=i(Vo),g4=n(Vo,"LI",{});var gRe=s(g4);JFe=n(gRe,"STRONG",{});var N4t=s(JFe);gSr=r(N4t,"big_bird"),N4t.forEach(t),hSr=r(gRe," \u2014 "),HH=n(gRe,"A",{href:!0});var j4t=s(HH);pSr=r(j4t,"FlaxBigBirdForMultipleChoice"),j4t.forEach(t),_Sr=r(gRe," (BigBird model)"),gRe.forEach(t),uSr=i(Vo),h4=n(Vo,"LI",{});var hRe=s(h4);YFe=n(hRe,"STRONG",{});var D4t=s(YFe);bSr=r(D4t,"distilbert"),D4t.forEach(t),vSr=r(hRe," \u2014 "),UH=n(hRe,"A",{href:!0});var G4t=s(UH);FSr=r(G4t,"FlaxDistilBertForMultipleChoice"),G4t.forEach(t),TSr=r(hRe," (DistilBERT model)"),hRe.forEach(t),MSr=i(Vo),p4=n(Vo,"LI",{});var pRe=s(p4);KFe=n(pRe,"STRONG",{});var O4t=s(KFe);ESr=r(O4t,"electra"),O4t.forEach(t),CSr=r(pRe," \u2014 "),JH=n(pRe,"A",{href:!0});var V4t=s(JH);wSr=r(V4t,"FlaxElectraForMultipleChoice"),V4t.forEach(t),ASr=r(pRe," (ELECTRA model)"),pRe.forEach(t),ySr=i(Vo),_4=n(Vo,"LI",{});var _Re=s(_4);ZFe=n(_Re,"STRONG",{});var X4t=s(ZFe);LSr=r(X4t,"roberta"),X4t.forEach(t),xSr=r(_Re," \u2014 "),YH=n(_Re,"A",{href:!0});var z4t=s(YH);kSr=r(z4t,"FlaxRobertaForMultipleChoice"),z4t.forEach(t),SSr=r(_Re," (RoBERTa model)"),_Re.forEach(t),RSr=i(Vo),u4=n(Vo,"LI",{});var uRe=s(u4);eTe=n(uRe,"STRONG",{});var Q4t=s(eTe);BSr=r(Q4t,"roformer"),Q4t.forEach(t),PSr=r(uRe," \u2014 "),KH=n(uRe,"A",{href:!0});var W4t=s(KH);$Sr=r(W4t,"FlaxRoFormerForMultipleChoice"),W4t.forEach(t),ISr=r(uRe," (RoFormer model)"),uRe.forEach(t),qSr=i(Vo),b4=n(Vo,"LI",{});var bRe=s(b4);oTe=n(bRe,"STRONG",{});var H4t=s(oTe);NSr=r(H4t,"xlm-roberta"),H4t.forEach(t),jSr=r(bRe," \u2014 "),ZH=n(bRe,"A",{href:!0});var U4t=s(ZH);DSr=r(U4t,"FlaxXLMRobertaForMultipleChoice"),U4t.forEach(t),GSr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Vo.forEach(t),OSr=i(Ia),rTe=n(Ia,"P",{});var J4t=s(rTe);VSr=r(J4t,"Examples:"),J4t.forEach(t),XSr=i(Ia),m(Ky.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),bPe=i(c),Af=n(c,"H2",{class:!0});var xIe=s(Af);v4=n(xIe,"A",{id:!0,class:!0,href:!0});var Y4t=s(v4);tTe=n(Y4t,"SPAN",{});var K4t=s(tTe);m(Zy.$$.fragment,K4t),K4t.forEach(t),Y4t.forEach(t),zSr=i(xIe),aTe=n(xIe,"SPAN",{});var Z4t=s(aTe);QSr=r(Z4t,"FlaxAutoModelForNextSentencePrediction"),Z4t.forEach(t),xIe.forEach(t),vPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(eL.$$.fragment,Si),WSr=i(Si),yf=n(Si,"P",{});var ZJ=s(yf);HSr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eU=n(ZJ,"A",{href:!0});var eEt=s(eU);USr=r(eEt,"from_pretrained()"),eEt.forEach(t),JSr=r(ZJ," class method or the "),oU=n(ZJ,"A",{href:!0});var oEt=s(oU);YSr=r(oEt,"from_config()"),oEt.forEach(t),KSr=r(ZJ,` class
method.`),ZJ.forEach(t),ZSr=i(Si),oL=n(Si,"P",{});var kIe=s(oL);eRr=r(kIe,"This class cannot be instantiated directly using "),nTe=n(kIe,"CODE",{});var rEt=s(nTe);oRr=r(rEt,"__init__()"),rEt.forEach(t),rRr=r(kIe," (throws an error)."),kIe.forEach(t),tRr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(rL.$$.fragment,Ri),aRr=i(Ri),sTe=n(Ri,"P",{});var tEt=s(sTe);nRr=r(tEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tEt.forEach(t),sRr=i(Ri),Lf=n(Ri,"P",{});var eY=s(Lf);lRr=r(eY,`Note:
Loading a model from its configuration file does `),lTe=n(eY,"STRONG",{});var aEt=s(lTe);iRr=r(aEt,"not"),aEt.forEach(t),dRr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(eY,"A",{href:!0});var nEt=s(rU);cRr=r(nEt,"from_pretrained()"),nEt.forEach(t),fRr=r(eY," to load the model weights."),eY.forEach(t),mRr=i(Ri),iTe=n(Ri,"P",{});var sEt=s(iTe);gRr=r(sEt,"Examples:"),sEt.forEach(t),hRr=i(Ri),m(tL.$$.fragment,Ri),Ri.forEach(t),pRr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(aL.$$.fragment,qa),_Rr=i(qa),dTe=n(qa,"P",{});var lEt=s(dTe);uRr=r(lEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),lEt.forEach(t),bRr=i(qa),jn=n(qa,"P",{});var EE=s(jn);vRr=r(EE,"The model class to instantiate is selected based on the "),cTe=n(EE,"CODE",{});var iEt=s(cTe);FRr=r(iEt,"model_type"),iEt.forEach(t),TRr=r(EE,` property of the config object (either
passed as an argument or loaded from `),fTe=n(EE,"CODE",{});var dEt=s(fTe);MRr=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),ERr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(EE,"CODE",{});var cEt=s(mTe);CRr=r(cEt,"pretrained_model_name_or_path"),cEt.forEach(t),wRr=r(EE,":"),EE.forEach(t),ARr=i(qa),gTe=n(qa,"UL",{});var fEt=s(gTe);F4=n(fEt,"LI",{});var vRe=s(F4);hTe=n(vRe,"STRONG",{});var mEt=s(hTe);yRr=r(mEt,"bert"),mEt.forEach(t),LRr=r(vRe," \u2014 "),tU=n(vRe,"A",{href:!0});var gEt=s(tU);xRr=r(gEt,"FlaxBertForNextSentencePrediction"),gEt.forEach(t),kRr=r(vRe," (BERT model)"),vRe.forEach(t),fEt.forEach(t),SRr=i(qa),pTe=n(qa,"P",{});var hEt=s(pTe);RRr=r(hEt,"Examples:"),hEt.forEach(t),BRr=i(qa),m(nL.$$.fragment,qa),qa.forEach(t),Si.forEach(t),FPe=i(c),xf=n(c,"H2",{class:!0});var SIe=s(xf);T4=n(SIe,"A",{id:!0,class:!0,href:!0});var pEt=s(T4);_Te=n(pEt,"SPAN",{});var _Et=s(_Te);m(sL.$$.fragment,_Et),_Et.forEach(t),pEt.forEach(t),PRr=i(SIe),uTe=n(SIe,"SPAN",{});var uEt=s(uTe);$Rr=r(uEt,"FlaxAutoModelForImageClassification"),uEt.forEach(t),SIe.forEach(t),TPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(lL.$$.fragment,Bi),IRr=i(Bi),kf=n(Bi,"P",{});var oY=s(kf);qRr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),aU=n(oY,"A",{href:!0});var bEt=s(aU);NRr=r(bEt,"from_pretrained()"),bEt.forEach(t),jRr=r(oY," class method or the "),nU=n(oY,"A",{href:!0});var vEt=s(nU);DRr=r(vEt,"from_config()"),vEt.forEach(t),GRr=r(oY,` class
method.`),oY.forEach(t),ORr=i(Bi),iL=n(Bi,"P",{});var RIe=s(iL);VRr=r(RIe,"This class cannot be instantiated directly using "),bTe=n(RIe,"CODE",{});var FEt=s(bTe);XRr=r(FEt,"__init__()"),FEt.forEach(t),zRr=r(RIe," (throws an error)."),RIe.forEach(t),QRr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(dL.$$.fragment,Pi),WRr=i(Pi),vTe=n(Pi,"P",{});var TEt=s(vTe);HRr=r(TEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TEt.forEach(t),URr=i(Pi),Sf=n(Pi,"P",{});var rY=s(Sf);JRr=r(rY,`Note:
Loading a model from its configuration file does `),FTe=n(rY,"STRONG",{});var MEt=s(FTe);YRr=r(MEt,"not"),MEt.forEach(t),KRr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(rY,"A",{href:!0});var EEt=s(sU);ZRr=r(EEt,"from_pretrained()"),EEt.forEach(t),eBr=r(rY," to load the model weights."),rY.forEach(t),oBr=i(Pi),TTe=n(Pi,"P",{});var CEt=s(TTe);rBr=r(CEt,"Examples:"),CEt.forEach(t),tBr=i(Pi),m(cL.$$.fragment,Pi),Pi.forEach(t),aBr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(fL.$$.fragment,Na),nBr=i(Na),MTe=n(Na,"P",{});var wEt=s(MTe);sBr=r(wEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wEt.forEach(t),lBr=i(Na),Dn=n(Na,"P",{});var CE=s(Dn);iBr=r(CE,"The model class to instantiate is selected based on the "),ETe=n(CE,"CODE",{});var AEt=s(ETe);dBr=r(AEt,"model_type"),AEt.forEach(t),cBr=r(CE,` property of the config object (either
passed as an argument or loaded from `),CTe=n(CE,"CODE",{});var yEt=s(CTe);fBr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),mBr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(CE,"CODE",{});var LEt=s(wTe);gBr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),hBr=r(CE,":"),CE.forEach(t),pBr=i(Na),mL=n(Na,"UL",{});var BIe=s(mL);M4=n(BIe,"LI",{});var FRe=s(M4);ATe=n(FRe,"STRONG",{});var xEt=s(ATe);_Br=r(xEt,"beit"),xEt.forEach(t),uBr=r(FRe," \u2014 "),lU=n(FRe,"A",{href:!0});var kEt=s(lU);bBr=r(kEt,"FlaxBeitForImageClassification"),kEt.forEach(t),vBr=r(FRe," (BEiT model)"),FRe.forEach(t),FBr=i(BIe),E4=n(BIe,"LI",{});var TRe=s(E4);yTe=n(TRe,"STRONG",{});var SEt=s(yTe);TBr=r(SEt,"vit"),SEt.forEach(t),MBr=r(TRe," \u2014 "),iU=n(TRe,"A",{href:!0});var REt=s(iU);EBr=r(REt,"FlaxViTForImageClassification"),REt.forEach(t),CBr=r(TRe," (ViT model)"),TRe.forEach(t),BIe.forEach(t),wBr=i(Na),LTe=n(Na,"P",{});var BEt=s(LTe);ABr=r(BEt,"Examples:"),BEt.forEach(t),yBr=i(Na),m(gL.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),MPe=i(c),Rf=n(c,"H2",{class:!0});var PIe=s(Rf);C4=n(PIe,"A",{id:!0,class:!0,href:!0});var PEt=s(C4);xTe=n(PEt,"SPAN",{});var $Et=s(xTe);m(hL.$$.fragment,$Et),$Et.forEach(t),PEt.forEach(t),LBr=i(PIe),kTe=n(PIe,"SPAN",{});var IEt=s(kTe);xBr=r(IEt,"FlaxAutoModelForVision2Seq"),IEt.forEach(t),PIe.forEach(t),EPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(pL.$$.fragment,$i),kBr=i($i),Bf=n($i,"P",{});var tY=s(Bf);SBr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dU=n(tY,"A",{href:!0});var qEt=s(dU);RBr=r(qEt,"from_pretrained()"),qEt.forEach(t),BBr=r(tY," class method or the "),cU=n(tY,"A",{href:!0});var NEt=s(cU);PBr=r(NEt,"from_config()"),NEt.forEach(t),$Br=r(tY,` class
method.`),tY.forEach(t),IBr=i($i),_L=n($i,"P",{});var $Ie=s(_L);qBr=r($Ie,"This class cannot be instantiated directly using "),STe=n($Ie,"CODE",{});var jEt=s(STe);NBr=r(jEt,"__init__()"),jEt.forEach(t),jBr=r($Ie," (throws an error)."),$Ie.forEach(t),DBr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(uL.$$.fragment,Ii),GBr=i(Ii),RTe=n(Ii,"P",{});var DEt=s(RTe);OBr=r(DEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),DEt.forEach(t),VBr=i(Ii),Pf=n(Ii,"P",{});var aY=s(Pf);XBr=r(aY,`Note:
Loading a model from its configuration file does `),BTe=n(aY,"STRONG",{});var GEt=s(BTe);zBr=r(GEt,"not"),GEt.forEach(t),QBr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fU=n(aY,"A",{href:!0});var OEt=s(fU);WBr=r(OEt,"from_pretrained()"),OEt.forEach(t),HBr=r(aY," to load the model weights."),aY.forEach(t),UBr=i(Ii),PTe=n(Ii,"P",{});var VEt=s(PTe);JBr=r(VEt,"Examples:"),VEt.forEach(t),YBr=i(Ii),m(bL.$$.fragment,Ii),Ii.forEach(t),KBr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(vL.$$.fragment,ja),ZBr=i(ja),$Te=n(ja,"P",{});var XEt=s($Te);ePr=r(XEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),XEt.forEach(t),oPr=i(ja),Gn=n(ja,"P",{});var wE=s(Gn);rPr=r(wE,"The model class to instantiate is selected based on the "),ITe=n(wE,"CODE",{});var zEt=s(ITe);tPr=r(zEt,"model_type"),zEt.forEach(t),aPr=r(wE,` property of the config object (either
passed as an argument or loaded from `),qTe=n(wE,"CODE",{});var QEt=s(qTe);nPr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),sPr=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(wE,"CODE",{});var WEt=s(NTe);lPr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),iPr=r(wE,":"),wE.forEach(t),dPr=i(ja),jTe=n(ja,"UL",{});var HEt=s(jTe);w4=n(HEt,"LI",{});var MRe=s(w4);DTe=n(MRe,"STRONG",{});var UEt=s(DTe);cPr=r(UEt,"vision-encoder-decoder"),UEt.forEach(t),fPr=r(MRe," \u2014 "),mU=n(MRe,"A",{href:!0});var JEt=s(mU);mPr=r(JEt,"FlaxVisionEncoderDecoderModel"),JEt.forEach(t),gPr=r(MRe," (Vision Encoder decoder model)"),MRe.forEach(t),HEt.forEach(t),hPr=i(ja),GTe=n(ja,"P",{});var YEt=s(GTe);pPr=r(YEt,"Examples:"),YEt.forEach(t),_Pr=i(ja),m(FL.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(l5t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(C7,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(w7,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertConfig"),d(A7,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig"),d(y7,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitConfig"),d(L7,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertConfig"),d(x7,"href","/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(k7,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdConfig"),d(S7,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(R7,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(B7,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(P7,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertConfig"),d($7,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineConfig"),d(I7,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPConfig"),d(q7,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertConfig"),d(N7,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextConfig"),d(j7,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLConfig"),d(D7,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(G7,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(O7,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(V7,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaConfig"),d(X7,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(z7,"href","/docs/transformers/pr_16839/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Q7,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTConfig"),d(W7,"href","/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrConfig"),d(H7,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertConfig"),d(U7,"href","/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRConfig"),d(J7,"href","/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTConfig"),d(Y7,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraConfig"),d(K7,"href","/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(Z7,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertConfig"),d(ex,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetConfig"),d(ox,"href","/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTConfig"),d(rx,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelConfig"),d(tx,"href","/docs/transformers/pr_16839/en/model_doc/glpn#transformers.GLPNConfig"),d(ax,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Config"),d(nx,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(sx,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJConfig"),d(lx,"href","/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertConfig"),d(ix,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertConfig"),d(dx,"href","/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(cx,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(fx,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(mx,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDConfig"),d(gx,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerConfig"),d(hx,"href","/docs/transformers/pr_16839/en/model_doc/luke#transformers.LukeConfig"),d(px,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertConfig"),d(_x,"href","/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Config"),d(ux,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianConfig"),d(bx,"href","/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(vx,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartConfig"),d(Fx,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Tx,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Mx,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetConfig"),d(Ex,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Config"),d(Cx,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(wx,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Ax,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusConfig"),d(yx,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Lx,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartConfig"),d(xx,"href","/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(kx,"href","/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Sx,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Rx,"href","/docs/transformers/pr_16839/en/model_doc/rag#transformers.RagConfig"),d(Bx,"href","/docs/transformers/pr_16839/en/model_doc/realm#transformers.RealmConfig"),d(Px,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerConfig"),d($x,"href","/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetConfig"),d(Ix,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertConfig"),d(qx,"href","/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetConfig"),d(Nx,"href","/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertConfig"),d(jx,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaConfig"),d(Dx,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerConfig"),d(Gx,"href","/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerConfig"),d(Ox,"href","/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWConfig"),d(Vx,"href","/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDConfig"),d(Xx,"href","/docs/transformers/pr_16839/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(zx,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Qx,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Wx,"href","/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterConfig"),d(Hx,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ux,"href","/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinConfig"),d(Jx,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Config"),d(Yx,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasConfig"),d(Kx,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartConfig"),d(Zx,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(ek,"href","/docs/transformers/pr_16839/en/model_doc/trocr#transformers.TrOCRConfig"),d(ok,"href","/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(rk,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(tk,"href","/docs/transformers/pr_16839/en/model_doc/van#transformers.VanConfig"),d(ak,"href","/docs/transformers/pr_16839/en/model_doc/vilt#transformers.ViltConfig"),d(nk,"href","/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(sk,"href","/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(lk,"href","/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ik,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTConfig"),d(dk,"href","/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(ck,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(fk,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMConfig"),d(mk,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMConfig"),d(gk,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMConfig"),d(hk,"href","/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(pk,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(_k,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(uk,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetConfig"),d(bk,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(vk,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Fk,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertTokenizer"),d(Tk,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Mk,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartTokenizer"),d(Ek,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16839/en/model_doc/barthez#transformers.BarthezTokenizer"),d(wk,"href","/docs/transformers/pr_16839/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Ak,"href","/docs/transformers/pr_16839/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(yk,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertTokenizer"),d(Lk,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertTokenizerFast"),d(xk,"href","/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(kk,"href","/docs/transformers/pr_16839/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Sk,"href","/docs/transformers/pr_16839/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Rk,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(Bk,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusTokenizer"),d($k,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ik,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(qk,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(jk,"href","/docs/transformers/pr_16839/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Dk,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Gk,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Ok,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineTokenizer"),d(Vk,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPTokenizer"),d(Xk,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(zk,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Qk,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Wk,"href","/docs/transformers/pr_16839/en/model_doc/cpm#transformers.CpmTokenizer"),d(Hk,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Uk,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Jk,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(Kk,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Zk,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(eS,"href","/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(oS,"href","/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(rS,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraTokenizer"),d(tS,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(aS,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(nS,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetTokenizer"),d(sS,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(lS,"href","/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(iS,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelTokenizer"),d(dS,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(cS,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(fS,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(mS,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gS,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hS,"href","/docs/transformers/pr_16839/en/model_doc/herbert#transformers.HerbertTokenizer"),d(pS,"href","/docs/transformers/pr_16839/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(_S,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(uS,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaTokenizer"),d(bS,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vS,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(FS,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(TS,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(MS,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(ES,"href","/docs/transformers/pr_16839/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(CS,"href","/docs/transformers/pr_16839/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(wS,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDTokenizer"),d(AS,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDTokenizerFast"),d(yS,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerTokenizer"),d(LS,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(xS,"href","/docs/transformers/pr_16839/en/model_doc/luke#transformers.LukeTokenizer"),d(kS,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(SS,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(RS,"href","/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(BS,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianTokenizer"),d(PS,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartTokenizer"),d($S,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(IS,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(qS,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(NS,"href","/docs/transformers/pr_16839/en/model_doc/mluke#transformers.MLukeTokenizer"),d(jS,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(DS,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(GS,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(OS,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(VS,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.T5Tokenizer"),d(XS,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.T5TokenizerFast"),d(zS,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(QS,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(WS,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(HS,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(US,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(JS,"href","/docs/transformers/pr_16839/en/model_doc/phobert#transformers.PhobertTokenizer"),d(YS,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartTokenizer"),d(KS,"href","/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(ZS,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertTokenizer"),d(eR,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertTokenizerFast"),d(oR,"href","/docs/transformers/pr_16839/en/model_doc/rag#transformers.RagTokenizer"),d(rR,"href","/docs/transformers/pr_16839/en/model_doc/realm#transformers.RealmTokenizer"),d(tR,"href","/docs/transformers/pr_16839/en/model_doc/realm#transformers.RealmTokenizerFast"),d(aR,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerTokenizer"),d(nR,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(sR,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertTokenizer"),d(lR,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(iR,"href","/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(dR,"href","/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(cR,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaTokenizer"),d(fR,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(mR,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(gR,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(hR,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(pR,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(_R,"href","/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterTokenizer"),d(uR,"href","/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(bR,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(vR,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(FR,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.T5Tokenizer"),d(TR,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.T5TokenizerFast"),d(MR,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasTokenizer"),d(ER,"href","/docs/transformers/pr_16839/en/model_doc/tapex#transformers.TapexTokenizer"),d(CR,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(wR,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(AR,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(yR,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMTokenizer"),d(LR,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(xR,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMTokenizer"),d(kR,"href","/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(SR,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(RR,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(BR,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(PR,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uh,"id","transformers.AutoFeatureExtractor"),d(uh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d($R,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(IR,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(DR,"href","/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(GR,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(OR,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(VR,"href","/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(XR,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(zR,"href","/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(QR,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(WR,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(HR,"href","/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(UR,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(JR,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(YR,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(KR,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(eB,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoProcessor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(oB,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(rB,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPProcessor"),d(tB,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(aB,"href","/docs/transformers/pr_16839/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(nB,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(sB,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(lB,"href","/docs/transformers/pr_16839/en/model_doc/trocr#transformers.TrOCRProcessor"),d(iB,"href","/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(dB,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoModel"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(cB,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fB,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mB,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gB,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertModel"),d(hB,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartModel"),d(pB,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitModel"),d(_B,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertModel"),d(uB,"href","/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(bB,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdModel"),d(vB,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(FB,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(TB,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(MB,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertModel"),d(EB,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineModel"),d(CB,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.CLIPModel"),d(wB,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertModel"),d(AB,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextModel"),d(yB,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLModel"),d(LB,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(xB,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(kB,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(SB,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaModel"),d(RB,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(BB,"href","/docs/transformers/pr_16839/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(PB,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTModel"),d($B,"href","/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrModel"),d(IB,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertModel"),d(qB,"href","/docs/transformers/pr_16839/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(NB,"href","/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTModel"),d(jB,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraModel"),d(DB,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertModel"),d(GB,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetModel"),d(OB,"href","/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTModel"),d(VB,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelModel"),d(XB,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelBaseModel"),d(zB,"href","/docs/transformers/pr_16839/en/model_doc/glpn#transformers.GLPNModel"),d(QB,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2Model"),d(WB,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(HB,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJModel"),d(UB,"href","/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertModel"),d(JB,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertModel"),d(YB,"href","/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(KB,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(ZB,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(eP,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDModel"),d(oP,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerModel"),d(rP,"href","/docs/transformers/pr_16839/en/model_doc/luke#transformers.LukeModel"),d(tP,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertModel"),d(aP,"href","/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100Model"),d(nP,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianModel"),d(sP,"href","/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerModel"),d(lP,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartModel"),d(iP,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(dP,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertModel"),d(cP,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetModel"),d(fP,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5Model"),d(mP,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerModel"),d(gP,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(hP,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusModel"),d(pP,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverModel"),d(_P,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartModel"),d(uP,"href","/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerModel"),d(bP,"href","/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(vP,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertModel"),d(FP,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerModel"),d(TP,"href","/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetModel"),d(MP,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertModel"),d(EP,"href","/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetModel"),d(CP,"href","/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertModel"),d(wP,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaModel"),d(AP,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerModel"),d(yP,"href","/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerModel"),d(LP,"href","/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWModel"),d(xP,"href","/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDModel"),d(kP,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(SP,"href","/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterModel"),d(RP,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(BP,"href","/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinModel"),d(PP,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5Model"),d($P,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasModel"),d(IP,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(qP,"href","/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechModel"),d(NP,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(jP,"href","/docs/transformers/pr_16839/en/model_doc/van#transformers.VanModel"),d(DP,"href","/docs/transformers/pr_16839/en/model_doc/vilt#transformers.ViltModel"),d(GP,"href","/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(OP,"href","/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertModel"),d(VP,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTModel"),d(XP,"href","/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(zP,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(QP,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMModel"),d(WP,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMModel"),d(HP,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMModel"),d(UP,"href","/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(JP,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(YP,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(KP,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetModel"),d(ZP,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q_,"id","transformers.AutoModelForPreTraining"),d(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(e$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(o$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(r$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t$,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForPreTraining"),d(a$,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(n$,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForPreTraining"),d(s$,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(l$,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(i$,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(d$,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(c$,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(f$,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(m$,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForPreTraining"),d(g$,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(h$,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForPreTraining"),d(p$,"href","/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(_$,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(u$,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(b$,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(v$,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(F$,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(T$,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(M$,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(E$,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(C$,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(w$,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(A$,"href","/docs/transformers/pr_16839/en/model_doc/retribert#transformers.RetriBertModel"),d(y$,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(L$,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(x$,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(k$,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(S$,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(R$,"href","/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(B$,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(P$,"href","/docs/transformers/pr_16839/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d($$,"href","/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(I$,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(q$,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(N$,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(j$,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(D$,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eu,"id","transformers.AutoModelForCausalLM"),d(Eu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Eu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(G$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(O$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(V$,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X$,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForCausalLM"),d(z$,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertLMHeadModel"),d(Q$,"href","/docs/transformers/pr_16839/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(W$,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(H$,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(U$,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(J$,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(Y$,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(K$,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(Z$,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(eI,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForCausalLM"),d(oI,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(rI,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(tI,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(aI,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianForCausalLM"),d(nI,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForCausalLM"),d(sI,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(lI,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(iI,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(dI,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(cI,"href","/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(fI,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(mI,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(gI,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(hI,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(pI,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(_I,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(uI,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(bI,"href","/docs/transformers/pr_16839/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(vI,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(FI,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(TI,"href","/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(MI,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(EI,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(CI,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s1,"id","transformers.AutoModelForMaskedLM"),d(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s1,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(wI,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AI,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yI,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LI,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(xI,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(RI,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(BI,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(PI,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d($I,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(II,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(qI,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(NI,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(jI,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(DI,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(GI,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(OI,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(VI,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(XI,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(zI,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(QI,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(HI,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(UI,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(JI,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(YI,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(KI,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(ZI,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(eq,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(oq,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(tq,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(aq,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(nq,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(sq,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O1,"id","transformers.AutoModelForSeq2SeqLM"),d(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(lq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cq,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(fq,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(mq,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(gq,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(hq,"href","/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(pq,"href","/docs/transformers/pr_16839/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(_q,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(uq,"href","/docs/transformers/pr_16839/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(bq,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.MarianMTModel"),d(vq,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Fq,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_16839/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(wq,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_16839/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lb,"id","transformers.AutoModelForSequenceClassification"),d(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lb,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(yq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xq,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kq,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d($q,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16839/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r2,"id","transformers.AutoModelForMultipleChoice"),d(r2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r2,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(EN,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CN,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wN,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AN,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($N,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(R2,"id","transformers.AutoModelForNextSentencePrediction"),d(R2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R2,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(ej,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tj,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(nj,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(sj,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(lj,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j2,"id","transformers.AutoModelForTokenClassification"),d(j2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j2,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(ij,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fj,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(mj,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForTokenClassification"),d(gj,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(hj,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForTokenClassification"),d(_j,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(bj,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(vj,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(wj,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(xj,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(kj,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d($j,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(qj,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(jj,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Dj,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Gj,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Oj,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Vj,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(F3,"id","transformers.AutoModelForQuestionAnswering"),d(F3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(F3,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(Xj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qj,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wj,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16839/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16839/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(lD,"href","/docs/transformers/pr_16839/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16839/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16839/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16839/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_16839/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16839/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16839/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_16839/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_16839/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(LD,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(SD,"href","/docs/transformers/pr_16839/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l6,"id","transformers.AutoModelForTableQuestionAnswering"),d(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l6,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(RD,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BD,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PD,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($D,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c6,"id","transformers.AutoModelForImageClassification"),d(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c6,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(ID,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qD,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ND,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jD,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitForImageClassification"),d(DD,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(GD,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(OD,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForImageClassification"),d(VD,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(XD,"href","/docs/transformers/pr_16839/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(zD,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(QD,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(WD,"href","/docs/transformers/pr_16839/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(HD,"href","/docs/transformers/pr_16839/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(UD,"href","/docs/transformers/pr_16839/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(JD,"href","/docs/transformers/pr_16839/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(YD,"href","/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(KD,"href","/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinForImageClassification"),d(ZD,"href","/docs/transformers/pr_16839/en/model_doc/van#transformers.VanForImageClassification"),d(eG,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E6,"id","transformers.AutoModelForVision2Seq"),d(E6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E6,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(oG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(tG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aG,"href","/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(A6,"id","transformers.AutoModelForAudioClassification"),d(A6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(A6,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(nG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iG,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(dG,"href","/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(cG,"href","/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(fG,"href","/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(mG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(gG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(hG,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(pG,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(I6,"id","transformers.AutoModelForAudioFrameClassification"),d(I6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(I6,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(_G,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vG,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(FG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(TG,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(MG,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(O6,"id","transformers.AutoModelForCTC"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(EG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AG,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(yG,"href","/docs/transformers/pr_16839/en/model_doc/hubert#transformers.HubertForCTC"),d(LG,"href","/docs/transformers/pr_16839/en/model_doc/sew#transformers.SEWForCTC"),d(xG,"href","/docs/transformers/pr_16839/en/model_doc/sew-d#transformers.SEWDForCTC"),d(kG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(SG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(RG,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(BG,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K6,"id","transformers.AutoModelForSpeechSeq2Seq"),d(K6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K6,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(PG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qG,"href","/docs/transformers/pr_16839/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(NG,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rv,"id","transformers.AutoModelForAudioXVector"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(jG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OG,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(VG,"href","/docs/transformers/pr_16839/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(XG,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(zG,"href","/docs/transformers/pr_16839/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iv,"id","transformers.AutoModelForMaskedImageModeling"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(QG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UG,"href","/docs/transformers/pr_16839/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(JG,"href","/docs/transformers/pr_16839/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(YG,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gv,"id","transformers.AutoModelForObjectDetection"),d(gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gv,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(KG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZG,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oO,"href","/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_v,"id","transformers.AutoModelForImageSegmentation"),d(_v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_v,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(rO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/pr_16839/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vv,"id","transformers.AutoModelForSemanticSegmentation"),d(vv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vv,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(sO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(cO,"href","/docs/transformers/pr_16839/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(fO,"href","/docs/transformers/pr_16839/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(mO,"href","/docs/transformers/pr_16839/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wv,"id","transformers.AutoModelForInstanceSegmentation"),d(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wv,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(gO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_O,"href","/docs/transformers/pr_16839/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lv,"id","transformers.TFAutoModel"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(uO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FO,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertModel"),d(TO,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartModel"),d(MO,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertModel"),d(EO,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(CO,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(wO,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertModel"),d(AO,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.TFCLIPModel"),d(yO,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertModel"),d(LO,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.TFConvNextModel"),d(xO,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLModel"),d(kO,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaModel"),d(SO,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(RO,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(BO,"href","/docs/transformers/pr_16839/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(PO,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraModel"),d($O,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(IO,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelModel"),d(qO,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(NO,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jO,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJModel"),d(DO,"href","/docs/transformers/pr_16839/en/model_doc/hubert#transformers.TFHubertModel"),d(GO,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(OO,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.TFLEDModel"),d(VO,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerModel"),d(XO,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.TFLxmertModel"),d(zO,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.TFMarianModel"),d(QO,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.TFMBartModel"),d(WO,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(HO,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetModel"),d(UO,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.TFMT5Model"),d(JO,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(YO,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.TFPegasusModel"),d(KO,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertModel"),d(ZO,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaModel"),d(eV,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerModel"),d(oV,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(rV,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5Model"),d(tV,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasModel"),d(aV,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(nV,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.TFViTModel"),d(sV,"href","/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(lV,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(iV,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMModel"),d(dV,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(cV,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bF,"id","transformers.TFAutoModelForPreTraining"),d(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bF,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(fV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hV,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(pV,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(_V,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForPreTraining"),d(uV,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(bV,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(vV,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(FV,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(TV,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(MV,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(EV,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CV,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(wV,"href","/docs/transformers/pr_16839/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(AV,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(yV,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(LV,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(xV,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(kV,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(SV,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(RV,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(BV,"href","/docs/transformers/pr_16839/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(PV,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($V,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(IV,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OF,"id","transformers.TFAutoModelForCausalLM"),d(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OF,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(qV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DV,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(GV,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(OV,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(VV,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(XV,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(zV,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(QV,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(WV,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(HV,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(UV,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(JV,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(YV,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oT,"id","transformers.TFAutoModelForImageClassification"),d(oT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oT,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(KV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZV,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oX,"href","/docs/transformers/pr_16839/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(rX,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aT,"id","transformers.TFAutoModelForMaskedLM"),d(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aT,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(tX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sX,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(lX,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(iX,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(dX,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(cX,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(fX,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(mX,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(gX,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(hX,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(pX,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(_X,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(uX,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(bX,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(vX,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(FX,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(TX,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(MX,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(EX,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(CX,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(wX,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(AX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xX,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(kX,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(SX,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(RX,"href","/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(BX,"href","/docs/transformers/pr_16839/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(PX,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.TFMarianMTModel"),d($X,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(IX,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(qX,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(NX,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IT,"id","transformers.TFAutoModelForSequenceClassification"),d(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(IT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(jX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GX,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OX,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16839/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(HX,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(UX,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(JX,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(YX,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(KX,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(ez,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(oz,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(rz,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(az,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16839/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16839/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(mz,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(gz,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d8,"id","transformers.TFAutoModelForMultipleChoice"),d(d8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d8,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(hz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_z,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uz,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(bz,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(vz,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Fz,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Tz,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Mz,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Ez,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Cz,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(wz,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Az,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(yz,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y8,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(y8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Pz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($z,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Iz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qz,"href","/docs/transformers/pr_16839/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x8,"id","transformers.TFAutoModelForTokenClassification"),d(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x8,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Nz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Dz,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gz,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Oz,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Vz,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Xz,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(zz,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Qz,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Wz,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Hz,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Uz,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(Jz,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Yz,"href","/docs/transformers/pr_16839/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Kz,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Zz,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(oQ,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(rQ,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(tQ,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(aQ,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(nQ,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(sQ,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(J8,"id","transformers.TFAutoModelForQuestionAnswering"),d(J8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J8,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(lQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cQ,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(fQ,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(mQ,"href","/docs/transformers/pr_16839/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(gQ,"href","/docs/transformers/pr_16839/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(hQ,"href","/docs/transformers/pr_16839/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(pQ,"href","/docs/transformers/pr_16839/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(_Q,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(uQ,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(bQ,"href","/docs/transformers/pr_16839/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(vQ,"href","/docs/transformers/pr_16839/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(FQ,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_16839/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_16839/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_16839/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_16839/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_16839/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(LQ,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(xQ,"href","/docs/transformers/pr_16839/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u9,"id","transformers.TFAutoModelForVision2Seq"),d(u9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u9,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(kQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BQ,"href","/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v9,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v9,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(PQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Q,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qQ,"href","/docs/transformers/pr_16839/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T9,"id","transformers.FlaxAutoModel"),d(T9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T9,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(NQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertModel"),d(OQ,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartModel"),d(VQ,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.FlaxBeitModel"),d(XQ,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertModel"),d(zQ,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(QQ,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(WQ,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(HQ,"href","/docs/transformers/pr_16839/en/model_doc/clip#transformers.FlaxCLIPModel"),d(UQ,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(JQ,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraModel"),d(YQ,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(KQ,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(ZQ,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(eW,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.FlaxMarianModel"),d(oW,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartModel"),d(rW,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5Model"),d(tW,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(aW,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(nW,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(sW,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5Model"),d(lW,"href","/docs/transformers/pr_16839/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(iW,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.FlaxViTModel"),d(dW,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(cW,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(fW,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W9,"id","transformers.FlaxAutoModelForCausalLM"),d(W9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W9,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(mW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pW,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(_W,"href","/docs/transformers/pr_16839/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(uW,"href","/docs/transformers/pr_16839/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(bW,"href","/docs/transformers/pr_16839/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(vW,"href","/docs/transformers/pr_16839/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z9,"id","transformers.FlaxAutoModelForPreTraining"),d(Z9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z9,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(FW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EW,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(CW,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(AW,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(yW,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(LW,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(xW,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(kW,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SW,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(RW,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16839/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(PW,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mM,"id","transformers.FlaxAutoModelForMaskedLM"),d(mM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d($W,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(IW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(qW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NW,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jW,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(GW,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(OW,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(VW,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(XW,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(zW,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(QW,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WW,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(EM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(HW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JW,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YW,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(KW,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(ZW,"href","/docs/transformers/pr_16839/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(eH,"href","/docs/transformers/pr_16839/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(oH,"href","/docs/transformers/pr_16839/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(rH,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(tH,"href","/docs/transformers/pr_16839/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(aH,"href","/docs/transformers/pr_16839/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(nH,"href","/docs/transformers/pr_16839/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(BM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(sH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dH,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(cH,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(fH,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(mH,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(gH,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(hH,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(pH,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(_H,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(uH,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(bH,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XM,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(vH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MH,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(EH,"href","/docs/transformers/pr_16839/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(CH,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(wH,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(AH,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(yH,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(LH,"href","/docs/transformers/pr_16839/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(xH,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(kH,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(SH,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o4,"id","transformers.FlaxAutoModelForTokenClassification"),d(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(RH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($H,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(IH,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(qH,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(NH,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(jH,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(DH,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(GH,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(OH,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(VH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QH,"href","/docs/transformers/pr_16839/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(WH,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(HH,"href","/docs/transformers/pr_16839/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(UH,"href","/docs/transformers/pr_16839/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(JH,"href","/docs/transformers/pr_16839/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(YH,"href","/docs/transformers/pr_16839/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(KH,"href","/docs/transformers/pr_16839/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(ZH,"href","/docs/transformers/pr_16839/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(eU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tU,"href","/docs/transformers/pr_16839/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.FlaxAutoModelForImageClassification"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(aU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lU,"href","/docs/transformers/pr_16839/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(iU,"href","/docs/transformers/pr_16839/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C4,"id","transformers.FlaxAutoModelForVision2Seq"),d(C4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(dU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fU,"href","/docs/transformers/pr_16839/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/pr_16839/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,qi),b(c,qf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,AE),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,On),e(On,yE),e(co,Vn),e(co,Xn),e(Xn,LE),e(co,Gi),e(co,zn),e(zn,xE),e(co,Oi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,b7),e(ue,Vi),e(Vi,v7),e(ue,F7),b(c,zo,u),b(c,Ga,u),e(Ga,T7),e(Ga,Df),e(Df,M7),e(Ga,IIe),b(c,ERe,u),b(c,Xi,u),e(Xi,Gf),e(Gf,nY),g(kE,nY,null),e(Xi,qIe),e(Xi,sY),e(sY,NIe),b(c,CRe,u),b(c,Qn,u),e(Qn,jIe),e(Qn,lY),e(lY,DIe),e(Qn,GIe),e(Qn,iY),e(iY,OIe),e(Qn,VIe),b(c,wRe,u),g(SE,c,u),b(c,ARe,u),b(c,E7,u),e(E7,XIe),b(c,yRe,u),g(Of,c,u),b(c,LRe,u),b(c,zi,u),e(zi,Vf),e(Vf,dY),g(RE,dY,null),e(zi,zIe),e(zi,cY),e(cY,QIe),b(c,xRe,u),b(c,Qo,u),g(BE,Qo,null),e(Qo,WIe),e(Qo,PE),e(PE,HIe),e(PE,C7),e(C7,UIe),e(PE,JIe),e(Qo,YIe),e(Qo,$E),e($E,KIe),e($E,fY),e(fY,ZIe),e($E,eqe),e(Qo,oqe),e(Qo,mo),g(IE,mo,null),e(mo,rqe),e(mo,mY),e(mY,tqe),e(mo,aqe),e(mo,Qi),e(Qi,nqe),e(Qi,gY),e(gY,sqe),e(Qi,lqe),e(Qi,hY),e(hY,iqe),e(Qi,dqe),e(mo,cqe),e(mo,v),e(v,Xf),e(Xf,pY),e(pY,fqe),e(Xf,mqe),e(Xf,w7),e(w7,gqe),e(Xf,hqe),e(v,pqe),e(v,zf),e(zf,_Y),e(_Y,_qe),e(zf,uqe),e(zf,A7),e(A7,bqe),e(zf,vqe),e(v,Fqe),e(v,Qf),e(Qf,uY),e(uY,Tqe),e(Qf,Mqe),e(Qf,y7),e(y7,Eqe),e(Qf,Cqe),e(v,wqe),e(v,Wf),e(Wf,bY),e(bY,Aqe),e(Wf,yqe),e(Wf,L7),e(L7,Lqe),e(Wf,xqe),e(v,kqe),e(v,Hf),e(Hf,vY),e(vY,Sqe),e(Hf,Rqe),e(Hf,x7),e(x7,Bqe),e(Hf,Pqe),e(v,$qe),e(v,Uf),e(Uf,FY),e(FY,Iqe),e(Uf,qqe),e(Uf,k7),e(k7,Nqe),e(Uf,jqe),e(v,Dqe),e(v,Jf),e(Jf,TY),e(TY,Gqe),e(Jf,Oqe),e(Jf,S7),e(S7,Vqe),e(Jf,Xqe),e(v,zqe),e(v,Yf),e(Yf,MY),e(MY,Qqe),e(Yf,Wqe),e(Yf,R7),e(R7,Hqe),e(Yf,Uqe),e(v,Jqe),e(v,Kf),e(Kf,EY),e(EY,Yqe),e(Kf,Kqe),e(Kf,B7),e(B7,Zqe),e(Kf,eNe),e(v,oNe),e(v,Zf),e(Zf,CY),e(CY,rNe),e(Zf,tNe),e(Zf,P7),e(P7,aNe),e(Zf,nNe),e(v,sNe),e(v,em),e(em,wY),e(wY,lNe),e(em,iNe),e(em,$7),e($7,dNe),e(em,cNe),e(v,fNe),e(v,om),e(om,AY),e(AY,mNe),e(om,gNe),e(om,I7),e(I7,hNe),e(om,pNe),e(v,_Ne),e(v,rm),e(rm,yY),e(yY,uNe),e(rm,bNe),e(rm,q7),e(q7,vNe),e(rm,FNe),e(v,TNe),e(v,tm),e(tm,LY),e(LY,MNe),e(tm,ENe),e(tm,N7),e(N7,CNe),e(tm,wNe),e(v,ANe),e(v,am),e(am,xY),e(xY,yNe),e(am,LNe),e(am,j7),e(j7,xNe),e(am,kNe),e(v,SNe),e(v,nm),e(nm,kY),e(kY,RNe),e(nm,BNe),e(nm,D7),e(D7,PNe),e(nm,$Ne),e(v,INe),e(v,sm),e(sm,SY),e(SY,qNe),e(sm,NNe),e(sm,G7),e(G7,jNe),e(sm,DNe),e(v,GNe),e(v,lm),e(lm,RY),e(RY,ONe),e(lm,VNe),e(lm,O7),e(O7,XNe),e(lm,zNe),e(v,QNe),e(v,im),e(im,BY),e(BY,WNe),e(im,HNe),e(im,V7),e(V7,UNe),e(im,JNe),e(v,YNe),e(v,dm),e(dm,PY),e(PY,KNe),e(dm,ZNe),e(dm,X7),e(X7,eje),e(dm,oje),e(v,rje),e(v,cm),e(cm,$Y),e($Y,tje),e(cm,aje),e(cm,z7),e(z7,nje),e(cm,sje),e(v,lje),e(v,fm),e(fm,IY),e(IY,ije),e(fm,dje),e(fm,Q7),e(Q7,cje),e(fm,fje),e(v,mje),e(v,mm),e(mm,qY),e(qY,gje),e(mm,hje),e(mm,W7),e(W7,pje),e(mm,_je),e(v,uje),e(v,gm),e(gm,NY),e(NY,bje),e(gm,vje),e(gm,H7),e(H7,Fje),e(gm,Tje),e(v,Mje),e(v,hm),e(hm,jY),e(jY,Eje),e(hm,Cje),e(hm,U7),e(U7,wje),e(hm,Aje),e(v,yje),e(v,pm),e(pm,DY),e(DY,Lje),e(pm,xje),e(pm,J7),e(J7,kje),e(pm,Sje),e(v,Rje),e(v,_m),e(_m,GY),e(GY,Bje),e(_m,Pje),e(_m,Y7),e(Y7,$je),e(_m,Ije),e(v,qje),e(v,um),e(um,OY),e(OY,Nje),e(um,jje),e(um,K7),e(K7,Dje),e(um,Gje),e(v,Oje),e(v,bm),e(bm,VY),e(VY,Vje),e(bm,Xje),e(bm,Z7),e(Z7,zje),e(bm,Qje),e(v,Wje),e(v,vm),e(vm,XY),e(XY,Hje),e(vm,Uje),e(vm,ex),e(ex,Jje),e(vm,Yje),e(v,Kje),e(v,Fm),e(Fm,zY),e(zY,Zje),e(Fm,eDe),e(Fm,ox),e(ox,oDe),e(Fm,rDe),e(v,tDe),e(v,Tm),e(Tm,QY),e(QY,aDe),e(Tm,nDe),e(Tm,rx),e(rx,sDe),e(Tm,lDe),e(v,iDe),e(v,Mm),e(Mm,WY),e(WY,dDe),e(Mm,cDe),e(Mm,tx),e(tx,fDe),e(Mm,mDe),e(v,gDe),e(v,Em),e(Em,HY),e(HY,hDe),e(Em,pDe),e(Em,ax),e(ax,_De),e(Em,uDe),e(v,bDe),e(v,Cm),e(Cm,UY),e(UY,vDe),e(Cm,FDe),e(Cm,nx),e(nx,TDe),e(Cm,MDe),e(v,EDe),e(v,wm),e(wm,JY),e(JY,CDe),e(wm,wDe),e(wm,sx),e(sx,ADe),e(wm,yDe),e(v,LDe),e(v,Am),e(Am,YY),e(YY,xDe),e(Am,kDe),e(Am,lx),e(lx,SDe),e(Am,RDe),e(v,BDe),e(v,ym),e(ym,KY),e(KY,PDe),e(ym,$De),e(ym,ix),e(ix,IDe),e(ym,qDe),e(v,NDe),e(v,Lm),e(Lm,ZY),e(ZY,jDe),e(Lm,DDe),e(Lm,dx),e(dx,GDe),e(Lm,ODe),e(v,VDe),e(v,xm),e(xm,eK),e(eK,XDe),e(xm,zDe),e(xm,cx),e(cx,QDe),e(xm,WDe),e(v,HDe),e(v,km),e(km,oK),e(oK,UDe),e(km,JDe),e(km,fx),e(fx,YDe),e(km,KDe),e(v,ZDe),e(v,Sm),e(Sm,rK),e(rK,eGe),e(Sm,oGe),e(Sm,mx),e(mx,rGe),e(Sm,tGe),e(v,aGe),e(v,Rm),e(Rm,tK),e(tK,nGe),e(Rm,sGe),e(Rm,gx),e(gx,lGe),e(Rm,iGe),e(v,dGe),e(v,Bm),e(Bm,aK),e(aK,cGe),e(Bm,fGe),e(Bm,hx),e(hx,mGe),e(Bm,gGe),e(v,hGe),e(v,Pm),e(Pm,nK),e(nK,pGe),e(Pm,_Ge),e(Pm,px),e(px,uGe),e(Pm,bGe),e(v,vGe),e(v,$m),e($m,sK),e(sK,FGe),e($m,TGe),e($m,_x),e(_x,MGe),e($m,EGe),e(v,CGe),e(v,Im),e(Im,lK),e(lK,wGe),e(Im,AGe),e(Im,ux),e(ux,yGe),e(Im,LGe),e(v,xGe),e(v,qm),e(qm,iK),e(iK,kGe),e(qm,SGe),e(qm,bx),e(bx,RGe),e(qm,BGe),e(v,PGe),e(v,Nm),e(Nm,dK),e(dK,$Ge),e(Nm,IGe),e(Nm,vx),e(vx,qGe),e(Nm,NGe),e(v,jGe),e(v,jm),e(jm,cK),e(cK,DGe),e(jm,GGe),e(jm,Fx),e(Fx,OGe),e(jm,VGe),e(v,XGe),e(v,Dm),e(Dm,fK),e(fK,zGe),e(Dm,QGe),e(Dm,Tx),e(Tx,WGe),e(Dm,HGe),e(v,UGe),e(v,Gm),e(Gm,mK),e(mK,JGe),e(Gm,YGe),e(Gm,Mx),e(Mx,KGe),e(Gm,ZGe),e(v,eOe),e(v,Om),e(Om,gK),e(gK,oOe),e(Om,rOe),e(Om,Ex),e(Ex,tOe),e(Om,aOe),e(v,nOe),e(v,Vm),e(Vm,hK),e(hK,sOe),e(Vm,lOe),e(Vm,Cx),e(Cx,iOe),e(Vm,dOe),e(v,cOe),e(v,Xm),e(Xm,pK),e(pK,fOe),e(Xm,mOe),e(Xm,wx),e(wx,gOe),e(Xm,hOe),e(v,pOe),e(v,zm),e(zm,_K),e(_K,_Oe),e(zm,uOe),e(zm,Ax),e(Ax,bOe),e(zm,vOe),e(v,FOe),e(v,Qm),e(Qm,uK),e(uK,TOe),e(Qm,MOe),e(Qm,yx),e(yx,EOe),e(Qm,COe),e(v,wOe),e(v,Wm),e(Wm,bK),e(bK,AOe),e(Wm,yOe),e(Wm,Lx),e(Lx,LOe),e(Wm,xOe),e(v,kOe),e(v,Hm),e(Hm,vK),e(vK,SOe),e(Hm,ROe),e(Hm,xx),e(xx,BOe),e(Hm,POe),e(v,$Oe),e(v,Um),e(Um,FK),e(FK,IOe),e(Um,qOe),e(Um,kx),e(kx,NOe),e(Um,jOe),e(v,DOe),e(v,Jm),e(Jm,TK),e(TK,GOe),e(Jm,OOe),e(Jm,Sx),e(Sx,VOe),e(Jm,XOe),e(v,zOe),e(v,Ym),e(Ym,MK),e(MK,QOe),e(Ym,WOe),e(Ym,Rx),e(Rx,HOe),e(Ym,UOe),e(v,JOe),e(v,Km),e(Km,EK),e(EK,YOe),e(Km,KOe),e(Km,Bx),e(Bx,ZOe),e(Km,eVe),e(v,oVe),e(v,Zm),e(Zm,CK),e(CK,rVe),e(Zm,tVe),e(Zm,Px),e(Px,aVe),e(Zm,nVe),e(v,sVe),e(v,eg),e(eg,wK),e(wK,lVe),e(eg,iVe),e(eg,$x),e($x,dVe),e(eg,cVe),e(v,fVe),e(v,og),e(og,AK),e(AK,mVe),e(og,gVe),e(og,Ix),e(Ix,hVe),e(og,pVe),e(v,_Ve),e(v,rg),e(rg,yK),e(yK,uVe),e(rg,bVe),e(rg,qx),e(qx,vVe),e(rg,FVe),e(v,TVe),e(v,tg),e(tg,LK),e(LK,MVe),e(tg,EVe),e(tg,Nx),e(Nx,CVe),e(tg,wVe),e(v,AVe),e(v,ag),e(ag,xK),e(xK,yVe),e(ag,LVe),e(ag,jx),e(jx,xVe),e(ag,kVe),e(v,SVe),e(v,ng),e(ng,kK),e(kK,RVe),e(ng,BVe),e(ng,Dx),e(Dx,PVe),e(ng,$Ve),e(v,IVe),e(v,sg),e(sg,SK),e(SK,qVe),e(sg,NVe),e(sg,Gx),e(Gx,jVe),e(sg,DVe),e(v,GVe),e(v,lg),e(lg,RK),e(RK,OVe),e(lg,VVe),e(lg,Ox),e(Ox,XVe),e(lg,zVe),e(v,QVe),e(v,ig),e(ig,BK),e(BK,WVe),e(ig,HVe),e(ig,Vx),e(Vx,UVe),e(ig,JVe),e(v,YVe),e(v,dg),e(dg,PK),e(PK,KVe),e(dg,ZVe),e(dg,Xx),e(Xx,eXe),e(dg,oXe),e(v,rXe),e(v,cg),e(cg,$K),e($K,tXe),e(cg,aXe),e(cg,zx),e(zx,nXe),e(cg,sXe),e(v,lXe),e(v,fg),e(fg,IK),e(IK,iXe),e(fg,dXe),e(fg,Qx),e(Qx,cXe),e(fg,fXe),e(v,mXe),e(v,mg),e(mg,qK),e(qK,gXe),e(mg,hXe),e(mg,Wx),e(Wx,pXe),e(mg,_Xe),e(v,uXe),e(v,gg),e(gg,NK),e(NK,bXe),e(gg,vXe),e(gg,Hx),e(Hx,FXe),e(gg,TXe),e(v,MXe),e(v,hg),e(hg,jK),e(jK,EXe),e(hg,CXe),e(hg,Ux),e(Ux,wXe),e(hg,AXe),e(v,yXe),e(v,pg),e(pg,DK),e(DK,LXe),e(pg,xXe),e(pg,Jx),e(Jx,kXe),e(pg,SXe),e(v,RXe),e(v,_g),e(_g,GK),e(GK,BXe),e(_g,PXe),e(_g,Yx),e(Yx,$Xe),e(_g,IXe),e(v,qXe),e(v,ug),e(ug,OK),e(OK,NXe),e(ug,jXe),e(ug,Kx),e(Kx,DXe),e(ug,GXe),e(v,OXe),e(v,bg),e(bg,VK),e(VK,VXe),e(bg,XXe),e(bg,Zx),e(Zx,zXe),e(bg,QXe),e(v,WXe),e(v,vg),e(vg,XK),e(XK,HXe),e(vg,UXe),e(vg,ek),e(ek,JXe),e(vg,YXe),e(v,KXe),e(v,Fg),e(Fg,zK),e(zK,ZXe),e(Fg,eze),e(Fg,ok),e(ok,oze),e(Fg,rze),e(v,tze),e(v,Tg),e(Tg,QK),e(QK,aze),e(Tg,nze),e(Tg,rk),e(rk,sze),e(Tg,lze),e(v,ize),e(v,Mg),e(Mg,WK),e(WK,dze),e(Mg,cze),e(Mg,tk),e(tk,fze),e(Mg,mze),e(v,gze),e(v,Eg),e(Eg,HK),e(HK,hze),e(Eg,pze),e(Eg,ak),e(ak,_ze),e(Eg,uze),e(v,bze),e(v,Cg),e(Cg,UK),e(UK,vze),e(Cg,Fze),e(Cg,nk),e(nk,Tze),e(Cg,Mze),e(v,Eze),e(v,wg),e(wg,JK),e(JK,Cze),e(wg,wze),e(wg,sk),e(sk,Aze),e(wg,yze),e(v,Lze),e(v,Ag),e(Ag,YK),e(YK,xze),e(Ag,kze),e(Ag,lk),e(lk,Sze),e(Ag,Rze),e(v,Bze),e(v,yg),e(yg,KK),e(KK,Pze),e(yg,$ze),e(yg,ik),e(ik,Ize),e(yg,qze),e(v,Nze),e(v,Lg),e(Lg,ZK),e(ZK,jze),e(Lg,Dze),e(Lg,dk),e(dk,Gze),e(Lg,Oze),e(v,Vze),e(v,xg),e(xg,eZ),e(eZ,Xze),e(xg,zze),e(xg,ck),e(ck,Qze),e(xg,Wze),e(v,Hze),e(v,kg),e(kg,oZ),e(oZ,Uze),e(kg,Jze),e(kg,fk),e(fk,Yze),e(kg,Kze),e(v,Zze),e(v,Sg),e(Sg,rZ),e(rZ,eQe),e(Sg,oQe),e(Sg,mk),e(mk,rQe),e(Sg,tQe),e(v,aQe),e(v,Rg),e(Rg,tZ),e(tZ,nQe),e(Rg,sQe),e(Rg,gk),e(gk,lQe),e(Rg,iQe),e(v,dQe),e(v,Bg),e(Bg,aZ),e(aZ,cQe),e(Bg,fQe),e(Bg,hk),e(hk,mQe),e(Bg,gQe),e(v,hQe),e(v,Pg),e(Pg,nZ),e(nZ,pQe),e(Pg,_Qe),e(Pg,pk),e(pk,uQe),e(Pg,bQe),e(v,vQe),e(v,$g),e($g,sZ),e(sZ,FQe),e($g,TQe),e($g,_k),e(_k,MQe),e($g,EQe),e(v,CQe),e(v,Ig),e(Ig,lZ),e(lZ,wQe),e(Ig,AQe),e(Ig,uk),e(uk,yQe),e(Ig,LQe),e(v,xQe),e(v,qg),e(qg,iZ),e(iZ,kQe),e(qg,SQe),e(qg,bk),e(bk,RQe),e(qg,BQe),e(mo,PQe),e(mo,dZ),e(dZ,$Qe),e(mo,IQe),g(qE,mo,null),e(Qo,qQe),e(Qo,Ng),g(NE,Ng,null),e(Ng,NQe),e(Ng,cZ),e(cZ,jQe),b(c,kRe,u),b(c,Wi,u),e(Wi,jg),e(jg,fZ),g(jE,fZ,null),e(Wi,DQe),e(Wi,mZ),e(mZ,GQe),b(c,SRe,u),b(c,Wo,u),g(DE,Wo,null),e(Wo,OQe),e(Wo,GE),e(GE,VQe),e(GE,vk),e(vk,XQe),e(GE,zQe),e(Wo,QQe),e(Wo,OE),e(OE,WQe),e(OE,gZ),e(gZ,HQe),e(OE,UQe),e(Wo,JQe),e(Wo,go),g(VE,go,null),e(go,YQe),e(go,hZ),e(hZ,KQe),e(go,ZQe),e(go,Oa),e(Oa,eWe),e(Oa,pZ),e(pZ,oWe),e(Oa,rWe),e(Oa,_Z),e(_Z,tWe),e(Oa,aWe),e(Oa,uZ),e(uZ,nWe),e(Oa,sWe),e(go,lWe),e(go,E),e(E,Wn),e(Wn,bZ),e(bZ,iWe),e(Wn,dWe),e(Wn,Fk),e(Fk,cWe),e(Wn,fWe),e(Wn,Tk),e(Tk,mWe),e(Wn,gWe),e(E,hWe),e(E,Hn),e(Hn,vZ),e(vZ,pWe),e(Hn,_We),e(Hn,Mk),e(Mk,uWe),e(Hn,bWe),e(Hn,Ek),e(Ek,vWe),e(Hn,FWe),e(E,TWe),e(E,Un),e(Un,FZ),e(FZ,MWe),e(Un,EWe),e(Un,Ck),e(Ck,CWe),e(Un,wWe),e(Un,wk),e(wk,AWe),e(Un,yWe),e(E,LWe),e(E,Dg),e(Dg,TZ),e(TZ,xWe),e(Dg,kWe),e(Dg,Ak),e(Ak,SWe),e(Dg,RWe),e(E,BWe),e(E,Jn),e(Jn,MZ),e(MZ,PWe),e(Jn,$We),e(Jn,yk),e(yk,IWe),e(Jn,qWe),e(Jn,Lk),e(Lk,NWe),e(Jn,jWe),e(E,DWe),e(E,Gg),e(Gg,EZ),e(EZ,GWe),e(Gg,OWe),e(Gg,xk),e(xk,VWe),e(Gg,XWe),e(E,zWe),e(E,Og),e(Og,CZ),e(CZ,QWe),e(Og,WWe),e(Og,kk),e(kk,HWe),e(Og,UWe),e(E,JWe),e(E,Vg),e(Vg,wZ),e(wZ,YWe),e(Vg,KWe),e(Vg,Sk),e(Sk,ZWe),e(Vg,eHe),e(E,oHe),e(E,Yn),e(Yn,AZ),e(AZ,rHe),e(Yn,tHe),e(Yn,Rk),e(Rk,aHe),e(Yn,nHe),e(Yn,Bk),e(Bk,sHe),e(Yn,lHe),e(E,iHe),e(E,Kn),e(Kn,yZ),e(yZ,dHe),e(Kn,cHe),e(Kn,Pk),e(Pk,fHe),e(Kn,mHe),e(Kn,$k),e($k,gHe),e(Kn,hHe),e(E,pHe),e(E,Zn),e(Zn,LZ),e(LZ,_He),e(Zn,uHe),e(Zn,Ik),e(Ik,bHe),e(Zn,vHe),e(Zn,qk),e(qk,FHe),e(Zn,THe),e(E,MHe),e(E,Xg),e(Xg,xZ),e(xZ,EHe),e(Xg,CHe),e(Xg,Nk),e(Nk,wHe),e(Xg,AHe),e(E,yHe),e(E,zg),e(zg,kZ),e(kZ,LHe),e(zg,xHe),e(zg,jk),e(jk,kHe),e(zg,SHe),e(E,RHe),e(E,es),e(es,SZ),e(SZ,BHe),e(es,PHe),e(es,Dk),e(Dk,$He),e(es,IHe),e(es,Gk),e(Gk,qHe),e(es,NHe),e(E,jHe),e(E,Qg),e(Qg,RZ),e(RZ,DHe),e(Qg,GHe),e(Qg,Ok),e(Ok,OHe),e(Qg,VHe),e(E,XHe),e(E,os),e(os,BZ),e(BZ,zHe),e(os,QHe),e(os,Vk),e(Vk,WHe),e(os,HHe),e(os,Xk),e(Xk,UHe),e(os,JHe),e(E,YHe),e(E,rs),e(rs,PZ),e(PZ,KHe),e(rs,ZHe),e(rs,zk),e(zk,eUe),e(rs,oUe),e(rs,Qk),e(Qk,rUe),e(rs,tUe),e(E,aUe),e(E,ts),e(ts,$Z),e($Z,nUe),e(ts,sUe),e(ts,Wk),e(Wk,lUe),e(ts,iUe),e(ts,IZ),e(IZ,dUe),e(ts,cUe),e(E,fUe),e(E,Wg),e(Wg,qZ),e(qZ,mUe),e(Wg,gUe),e(Wg,Hk),e(Hk,hUe),e(Wg,pUe),e(E,_Ue),e(E,as),e(as,NZ),e(NZ,uUe),e(as,bUe),e(as,Uk),e(Uk,vUe),e(as,FUe),e(as,Jk),e(Jk,TUe),e(as,MUe),e(E,EUe),e(E,Hg),e(Hg,jZ),e(jZ,CUe),e(Hg,wUe),e(Hg,Yk),e(Yk,AUe),e(Hg,yUe),e(E,LUe),e(E,ns),e(ns,DZ),e(DZ,xUe),e(ns,kUe),e(ns,Kk),e(Kk,SUe),e(ns,RUe),e(ns,Zk),e(Zk,BUe),e(ns,PUe),e(E,$Ue),e(E,ss),e(ss,GZ),e(GZ,IUe),e(ss,qUe),e(ss,eS),e(eS,NUe),e(ss,jUe),e(ss,oS),e(oS,DUe),e(ss,GUe),e(E,OUe),e(E,ls),e(ls,OZ),e(OZ,VUe),e(ls,XUe),e(ls,rS),e(rS,zUe),e(ls,QUe),e(ls,tS),e(tS,WUe),e(ls,HUe),e(E,UUe),e(E,Ug),e(Ug,VZ),e(VZ,JUe),e(Ug,YUe),e(Ug,aS),e(aS,KUe),e(Ug,ZUe),e(E,eJe),e(E,is),e(is,XZ),e(XZ,oJe),e(is,rJe),e(is,nS),e(nS,tJe),e(is,aJe),e(is,sS),e(sS,nJe),e(is,sJe),e(E,lJe),e(E,Jg),e(Jg,zZ),e(zZ,iJe),e(Jg,dJe),e(Jg,lS),e(lS,cJe),e(Jg,fJe),e(E,mJe),e(E,ds),e(ds,QZ),e(QZ,gJe),e(ds,hJe),e(ds,iS),e(iS,pJe),e(ds,_Je),e(ds,dS),e(dS,uJe),e(ds,bJe),e(E,vJe),e(E,cs),e(cs,WZ),e(WZ,FJe),e(cs,TJe),e(cs,cS),e(cS,MJe),e(cs,EJe),e(cs,fS),e(fS,CJe),e(cs,wJe),e(E,AJe),e(E,fs),e(fs,HZ),e(HZ,yJe),e(fs,LJe),e(fs,mS),e(mS,xJe),e(fs,kJe),e(fs,gS),e(gS,SJe),e(fs,RJe),e(E,BJe),e(E,ms),e(ms,UZ),e(UZ,PJe),e(ms,$Je),e(ms,hS),e(hS,IJe),e(ms,qJe),e(ms,pS),e(pS,NJe),e(ms,jJe),e(E,DJe),e(E,Yg),e(Yg,JZ),e(JZ,GJe),e(Yg,OJe),e(Yg,_S),e(_S,VJe),e(Yg,XJe),e(E,zJe),e(E,gs),e(gs,YZ),e(YZ,QJe),e(gs,WJe),e(gs,uS),e(uS,HJe),e(gs,UJe),e(gs,bS),e(bS,JJe),e(gs,YJe),e(E,KJe),e(E,hs),e(hs,KZ),e(KZ,ZJe),e(hs,eYe),e(hs,vS),e(vS,oYe),e(hs,rYe),e(hs,FS),e(FS,tYe),e(hs,aYe),e(E,nYe),e(E,ps),e(ps,ZZ),e(ZZ,sYe),e(ps,lYe),e(ps,TS),e(TS,iYe),e(ps,dYe),e(ps,MS),e(MS,cYe),e(ps,fYe),e(E,mYe),e(E,_s),e(_s,eee),e(eee,gYe),e(_s,hYe),e(_s,ES),e(ES,pYe),e(_s,_Ye),e(_s,CS),e(CS,uYe),e(_s,bYe),e(E,vYe),e(E,us),e(us,oee),e(oee,FYe),e(us,TYe),e(us,wS),e(wS,MYe),e(us,EYe),e(us,AS),e(AS,CYe),e(us,wYe),e(E,AYe),e(E,bs),e(bs,ree),e(ree,yYe),e(bs,LYe),e(bs,yS),e(yS,xYe),e(bs,kYe),e(bs,LS),e(LS,SYe),e(bs,RYe),e(E,BYe),e(E,Kg),e(Kg,tee),e(tee,PYe),e(Kg,$Ye),e(Kg,xS),e(xS,IYe),e(Kg,qYe),e(E,NYe),e(E,vs),e(vs,aee),e(aee,jYe),e(vs,DYe),e(vs,kS),e(kS,GYe),e(vs,OYe),e(vs,SS),e(SS,VYe),e(vs,XYe),e(E,zYe),e(E,Zg),e(Zg,nee),e(nee,QYe),e(Zg,WYe),e(Zg,RS),e(RS,HYe),e(Zg,UYe),e(E,JYe),e(E,eh),e(eh,see),e(see,YYe),e(eh,KYe),e(eh,BS),e(BS,ZYe),e(eh,eKe),e(E,oKe),e(E,Fs),e(Fs,lee),e(lee,rKe),e(Fs,tKe),e(Fs,PS),e(PS,aKe),e(Fs,nKe),e(Fs,$S),e($S,sKe),e(Fs,lKe),e(E,iKe),e(E,Ts),e(Ts,iee),e(iee,dKe),e(Ts,cKe),e(Ts,IS),e(IS,fKe),e(Ts,mKe),e(Ts,qS),e(qS,gKe),e(Ts,hKe),e(E,pKe),e(E,oh),e(oh,dee),e(dee,_Ke),e(oh,uKe),e(oh,NS),e(NS,bKe),e(oh,vKe),e(E,FKe),e(E,Ms),e(Ms,cee),e(cee,TKe),e(Ms,MKe),e(Ms,jS),e(jS,EKe),e(Ms,CKe),e(Ms,DS),e(DS,wKe),e(Ms,AKe),e(E,yKe),e(E,Es),e(Es,fee),e(fee,LKe),e(Es,xKe),e(Es,GS),e(GS,kKe),e(Es,SKe),e(Es,OS),e(OS,RKe),e(Es,BKe),e(E,PKe),e(E,Cs),e(Cs,mee),e(mee,$Ke),e(Cs,IKe),e(Cs,VS),e(VS,qKe),e(Cs,NKe),e(Cs,XS),e(XS,jKe),e(Cs,DKe),e(E,GKe),e(E,ws),e(ws,gee),e(gee,OKe),e(ws,VKe),e(ws,zS),e(zS,XKe),e(ws,zKe),e(ws,QS),e(QS,QKe),e(ws,WKe),e(E,HKe),e(E,As),e(As,hee),e(hee,UKe),e(As,JKe),e(As,WS),e(WS,YKe),e(As,KKe),e(As,HS),e(HS,ZKe),e(As,eZe),e(E,oZe),e(E,rh),e(rh,pee),e(pee,rZe),e(rh,tZe),e(rh,US),e(US,aZe),e(rh,nZe),e(E,sZe),e(E,th),e(th,_ee),e(_ee,lZe),e(th,iZe),e(th,JS),e(JS,dZe),e(th,cZe),e(E,fZe),e(E,ah),e(ah,uee),e(uee,mZe),e(ah,gZe),e(ah,YS),e(YS,hZe),e(ah,pZe),e(E,_Ze),e(E,nh),e(nh,bee),e(bee,uZe),e(nh,bZe),e(nh,KS),e(KS,vZe),e(nh,FZe),e(E,TZe),e(E,ys),e(ys,vee),e(vee,MZe),e(ys,EZe),e(ys,ZS),e(ZS,CZe),e(ys,wZe),e(ys,eR),e(eR,AZe),e(ys,yZe),e(E,LZe),e(E,sh),e(sh,Fee),e(Fee,xZe),e(sh,kZe),e(sh,oR),e(oR,SZe),e(sh,RZe),e(E,BZe),e(E,Ls),e(Ls,Tee),e(Tee,PZe),e(Ls,$Ze),e(Ls,rR),e(rR,IZe),e(Ls,qZe),e(Ls,tR),e(tR,NZe),e(Ls,jZe),e(E,DZe),e(E,xs),e(xs,Mee),e(Mee,GZe),e(xs,OZe),e(xs,aR),e(aR,VZe),e(xs,XZe),e(xs,nR),e(nR,zZe),e(xs,QZe),e(E,WZe),e(E,ks),e(ks,Eee),e(Eee,HZe),e(ks,UZe),e(ks,sR),e(sR,JZe),e(ks,YZe),e(ks,lR),e(lR,KZe),e(ks,ZZe),e(E,eeo),e(E,Ss),e(Ss,Cee),e(Cee,oeo),e(Ss,reo),e(Ss,iR),e(iR,teo),e(Ss,aeo),e(Ss,dR),e(dR,neo),e(Ss,seo),e(E,leo),e(E,Rs),e(Rs,wee),e(wee,ieo),e(Rs,deo),e(Rs,cR),e(cR,ceo),e(Rs,feo),e(Rs,fR),e(fR,meo),e(Rs,geo),e(E,heo),e(E,Bs),e(Bs,Aee),e(Aee,peo),e(Bs,_eo),e(Bs,mR),e(mR,ueo),e(Bs,beo),e(Bs,gR),e(gR,veo),e(Bs,Feo),e(E,Teo),e(E,lh),e(lh,yee),e(yee,Meo),e(lh,Eeo),e(lh,hR),e(hR,Ceo),e(lh,weo),e(E,Aeo),e(E,ih),e(ih,Lee),e(Lee,yeo),e(ih,Leo),e(ih,pR),e(pR,xeo),e(ih,keo),e(E,Seo),e(E,Ps),e(Ps,xee),e(xee,Reo),e(Ps,Beo),e(Ps,_R),e(_R,Peo),e(Ps,$eo),e(Ps,uR),e(uR,Ieo),e(Ps,qeo),e(E,Neo),e(E,$s),e($s,kee),e(kee,jeo),e($s,Deo),e($s,bR),e(bR,Geo),e($s,Oeo),e($s,vR),e(vR,Veo),e($s,Xeo),e(E,zeo),e(E,Is),e(Is,See),e(See,Qeo),e(Is,Weo),e(Is,FR),e(FR,Heo),e(Is,Ueo),e(Is,TR),e(TR,Jeo),e(Is,Yeo),e(E,Keo),e(E,dh),e(dh,Ree),e(Ree,Zeo),e(dh,eoo),e(dh,MR),e(MR,ooo),e(dh,roo),e(E,too),e(E,ch),e(ch,Bee),e(Bee,aoo),e(ch,noo),e(ch,ER),e(ER,soo),e(ch,loo),e(E,ioo),e(E,fh),e(fh,Pee),e(Pee,doo),e(fh,coo),e(fh,CR),e(CR,foo),e(fh,moo),e(E,goo),e(E,mh),e(mh,$ee),e($ee,hoo),e(mh,poo),e(mh,wR),e(wR,_oo),e(mh,uoo),e(E,boo),e(E,gh),e(gh,Iee),e(Iee,voo),e(gh,Foo),e(gh,AR),e(AR,Too),e(gh,Moo),e(E,Eoo),e(E,qs),e(qs,qee),e(qee,Coo),e(qs,woo),e(qs,yR),e(yR,Aoo),e(qs,yoo),e(qs,LR),e(LR,Loo),e(qs,xoo),e(E,koo),e(E,hh),e(hh,Nee),e(Nee,Soo),e(hh,Roo),e(hh,xR),e(xR,Boo),e(hh,Poo),e(E,$oo),e(E,ph),e(ph,jee),e(jee,Ioo),e(ph,qoo),e(ph,kR),e(kR,Noo),e(ph,joo),e(E,Doo),e(E,Ns),e(Ns,Dee),e(Dee,Goo),e(Ns,Ooo),e(Ns,SR),e(SR,Voo),e(Ns,Xoo),e(Ns,RR),e(RR,zoo),e(Ns,Qoo),e(E,Woo),e(E,js),e(js,Gee),e(Gee,Hoo),e(js,Uoo),e(js,BR),e(BR,Joo),e(js,Yoo),e(js,PR),e(PR,Koo),e(js,Zoo),e(go,ero),e(go,Oee),e(Oee,oro),e(go,rro),g(XE,go,null),e(Wo,tro),e(Wo,_h),g(zE,_h,null),e(_h,aro),e(_h,Vee),e(Vee,nro),b(c,RRe,u),b(c,Hi,u),e(Hi,uh),e(uh,Xee),g(QE,Xee,null),e(Hi,sro),e(Hi,zee),e(zee,lro),b(c,BRe,u),b(c,Ho,u),g(WE,Ho,null),e(Ho,iro),e(Ho,HE),e(HE,dro),e(HE,$R),e($R,cro),e(HE,fro),e(Ho,mro),e(Ho,UE),e(UE,gro),e(UE,Qee),e(Qee,hro),e(UE,pro),e(Ho,_ro),e(Ho,$e),g(JE,$e,null),e($e,uro),e($e,Wee),e(Wee,bro),e($e,vro),e($e,Va),e(Va,Fro),e(Va,Hee),e(Hee,Tro),e(Va,Mro),e(Va,Uee),e(Uee,Ero),e(Va,Cro),e(Va,Jee),e(Jee,wro),e(Va,Aro),e($e,yro),e($e,ee),e(ee,bh),e(bh,Yee),e(Yee,Lro),e(bh,xro),e(bh,IR),e(IR,kro),e(bh,Sro),e(ee,Rro),e(ee,vh),e(vh,Kee),e(Kee,Bro),e(vh,Pro),e(vh,qR),e(qR,$ro),e(vh,Iro),e(ee,qro),e(ee,Fh),e(Fh,Zee),e(Zee,Nro),e(Fh,jro),e(Fh,NR),e(NR,Dro),e(Fh,Gro),e(ee,Oro),e(ee,Th),e(Th,eoe),e(eoe,Vro),e(Th,Xro),e(Th,jR),e(jR,zro),e(Th,Qro),e(ee,Wro),e(ee,Mh),e(Mh,ooe),e(ooe,Hro),e(Mh,Uro),e(Mh,DR),e(DR,Jro),e(Mh,Yro),e(ee,Kro),e(ee,Eh),e(Eh,roe),e(roe,Zro),e(Eh,eto),e(Eh,GR),e(GR,oto),e(Eh,rto),e(ee,tto),e(ee,Ch),e(Ch,toe),e(toe,ato),e(Ch,nto),e(Ch,OR),e(OR,sto),e(Ch,lto),e(ee,ito),e(ee,wh),e(wh,aoe),e(aoe,dto),e(wh,cto),e(wh,VR),e(VR,fto),e(wh,mto),e(ee,gto),e(ee,Ah),e(Ah,noe),e(noe,hto),e(Ah,pto),e(Ah,XR),e(XR,_to),e(Ah,uto),e(ee,bto),e(ee,yh),e(yh,soe),e(soe,vto),e(yh,Fto),e(yh,zR),e(zR,Tto),e(yh,Mto),e(ee,Eto),e(ee,Lh),e(Lh,loe),e(loe,Cto),e(Lh,wto),e(Lh,QR),e(QR,Ato),e(Lh,yto),e(ee,Lto),e(ee,xh),e(xh,ioe),e(ioe,xto),e(xh,kto),e(xh,WR),e(WR,Sto),e(xh,Rto),e(ee,Bto),e(ee,kh),e(kh,doe),e(doe,Pto),e(kh,$to),e(kh,HR),e(HR,Ito),e(kh,qto),e(ee,Nto),e(ee,Sh),e(Sh,coe),e(coe,jto),e(Sh,Dto),e(Sh,UR),e(UR,Gto),e(Sh,Oto),e(ee,Vto),e(ee,Rh),e(Rh,foe),e(foe,Xto),e(Rh,zto),e(Rh,JR),e(JR,Qto),e(Rh,Wto),e(ee,Hto),e(ee,Bh),e(Bh,moe),e(moe,Uto),e(Bh,Jto),e(Bh,YR),e(YR,Yto),e(Bh,Kto),e(ee,Zto),e(ee,Ph),e(Ph,goe),e(goe,eao),e(Ph,oao),e(Ph,KR),e(KR,rao),e(Ph,tao),e(ee,aao),e(ee,$h),e($h,hoe),e(hoe,nao),e($h,sao),e($h,ZR),e(ZR,lao),e($h,iao),e(ee,dao),e(ee,Ih),e(Ih,poe),e(poe,cao),e(Ih,fao),e(Ih,eB),e(eB,mao),e(Ih,gao),e($e,hao),g(qh,$e,null),e($e,pao),e($e,_oe),e(_oe,_ao),e($e,uao),g(YE,$e,null),e(Ho,bao),e(Ho,Nh),g(KE,Nh,null),e(Nh,vao),e(Nh,uoe),e(uoe,Fao),b(c,PRe,u),b(c,Ui,u),e(Ui,jh),e(jh,boe),g(ZE,boe,null),e(Ui,Tao),e(Ui,voe),e(voe,Mao),b(c,$Re,u),b(c,Uo,u),g(e5,Uo,null),e(Uo,Eao),e(Uo,o5),e(o5,Cao),e(o5,oB),e(oB,wao),e(o5,Aao),e(Uo,yao),e(Uo,r5),e(r5,Lao),e(r5,Foe),e(Foe,xao),e(r5,kao),e(Uo,Sao),e(Uo,Ie),g(t5,Ie,null),e(Ie,Rao),e(Ie,Toe),e(Toe,Bao),e(Ie,Pao),e(Ie,Ji),e(Ji,$ao),e(Ji,Moe),e(Moe,Iao),e(Ji,qao),e(Ji,Eoe),e(Eoe,Nao),e(Ji,jao),e(Ie,Dao),e(Ie,ke),e(ke,Dh),e(Dh,Coe),e(Coe,Gao),e(Dh,Oao),e(Dh,rB),e(rB,Vao),e(Dh,Xao),e(ke,zao),e(ke,Gh),e(Gh,woe),e(woe,Qao),e(Gh,Wao),e(Gh,tB),e(tB,Hao),e(Gh,Uao),e(ke,Jao),e(ke,Oh),e(Oh,Aoe),e(Aoe,Yao),e(Oh,Kao),e(Oh,aB),e(aB,Zao),e(Oh,eno),e(ke,ono),e(ke,Vh),e(Vh,yoe),e(yoe,rno),e(Vh,tno),e(Vh,nB),e(nB,ano),e(Vh,nno),e(ke,sno),e(ke,Xh),e(Xh,Loe),e(Loe,lno),e(Xh,ino),e(Xh,sB),e(sB,dno),e(Xh,cno),e(ke,fno),e(ke,zh),e(zh,xoe),e(xoe,mno),e(zh,gno),e(zh,lB),e(lB,hno),e(zh,pno),e(ke,_no),e(ke,Qh),e(Qh,koe),e(koe,uno),e(Qh,bno),e(Qh,iB),e(iB,vno),e(Qh,Fno),e(ke,Tno),e(ke,Wh),e(Wh,Soe),e(Soe,Mno),e(Wh,Eno),e(Wh,dB),e(dB,Cno),e(Wh,wno),e(Ie,Ano),g(Hh,Ie,null),e(Ie,yno),e(Ie,Roe),e(Roe,Lno),e(Ie,xno),g(a5,Ie,null),e(Uo,kno),e(Uo,Uh),g(n5,Uh,null),e(Uh,Sno),e(Uh,Boe),e(Boe,Rno),b(c,IRe,u),b(c,Yi,u),e(Yi,Jh),e(Jh,Poe),g(s5,Poe,null),e(Yi,Bno),e(Yi,$oe),e($oe,Pno),b(c,qRe,u),b(c,Jo,u),g(l5,Jo,null),e(Jo,$no),e(Jo,Ki),e(Ki,Ino),e(Ki,cB),e(cB,qno),e(Ki,Nno),e(Ki,fB),e(fB,jno),e(Ki,Dno),e(Jo,Gno),e(Jo,i5),e(i5,Ono),e(i5,Ioe),e(Ioe,Vno),e(i5,Xno),e(Jo,zno),e(Jo,Xr),g(d5,Xr,null),e(Xr,Qno),e(Xr,qoe),e(qoe,Wno),e(Xr,Hno),e(Xr,Zi),e(Zi,Uno),e(Zi,Noe),e(Noe,Jno),e(Zi,Yno),e(Zi,mB),e(mB,Kno),e(Zi,Zno),e(Xr,eso),e(Xr,joe),e(joe,oso),e(Xr,rso),g(c5,Xr,null),e(Jo,tso),e(Jo,qe),g(f5,qe,null),e(qe,aso),e(qe,Doe),e(Doe,nso),e(qe,sso),e(qe,Xa),e(Xa,lso),e(Xa,Goe),e(Goe,iso),e(Xa,dso),e(Xa,Ooe),e(Ooe,cso),e(Xa,fso),e(Xa,Voe),e(Voe,mso),e(Xa,gso),e(qe,hso),e(qe,T),e(T,Yh),e(Yh,Xoe),e(Xoe,pso),e(Yh,_so),e(Yh,gB),e(gB,uso),e(Yh,bso),e(T,vso),e(T,Kh),e(Kh,zoe),e(zoe,Fso),e(Kh,Tso),e(Kh,hB),e(hB,Mso),e(Kh,Eso),e(T,Cso),e(T,Zh),e(Zh,Qoe),e(Qoe,wso),e(Zh,Aso),e(Zh,pB),e(pB,yso),e(Zh,Lso),e(T,xso),e(T,ep),e(ep,Woe),e(Woe,kso),e(ep,Sso),e(ep,_B),e(_B,Rso),e(ep,Bso),e(T,Pso),e(T,op),e(op,Hoe),e(Hoe,$so),e(op,Iso),e(op,uB),e(uB,qso),e(op,Nso),e(T,jso),e(T,rp),e(rp,Uoe),e(Uoe,Dso),e(rp,Gso),e(rp,bB),e(bB,Oso),e(rp,Vso),e(T,Xso),e(T,tp),e(tp,Joe),e(Joe,zso),e(tp,Qso),e(tp,vB),e(vB,Wso),e(tp,Hso),e(T,Uso),e(T,ap),e(ap,Yoe),e(Yoe,Jso),e(ap,Yso),e(ap,FB),e(FB,Kso),e(ap,Zso),e(T,elo),e(T,np),e(np,Koe),e(Koe,olo),e(np,rlo),e(np,TB),e(TB,tlo),e(np,alo),e(T,nlo),e(T,sp),e(sp,Zoe),e(Zoe,slo),e(sp,llo),e(sp,MB),e(MB,ilo),e(sp,dlo),e(T,clo),e(T,lp),e(lp,ere),e(ere,flo),e(lp,mlo),e(lp,EB),e(EB,glo),e(lp,hlo),e(T,plo),e(T,ip),e(ip,ore),e(ore,_lo),e(ip,ulo),e(ip,CB),e(CB,blo),e(ip,vlo),e(T,Flo),e(T,dp),e(dp,rre),e(rre,Tlo),e(dp,Mlo),e(dp,wB),e(wB,Elo),e(dp,Clo),e(T,wlo),e(T,cp),e(cp,tre),e(tre,Alo),e(cp,ylo),e(cp,AB),e(AB,Llo),e(cp,xlo),e(T,klo),e(T,fp),e(fp,are),e(are,Slo),e(fp,Rlo),e(fp,yB),e(yB,Blo),e(fp,Plo),e(T,$lo),e(T,mp),e(mp,nre),e(nre,Ilo),e(mp,qlo),e(mp,LB),e(LB,Nlo),e(mp,jlo),e(T,Dlo),e(T,gp),e(gp,sre),e(sre,Glo),e(gp,Olo),e(gp,xB),e(xB,Vlo),e(gp,Xlo),e(T,zlo),e(T,hp),e(hp,lre),e(lre,Qlo),e(hp,Wlo),e(hp,kB),e(kB,Hlo),e(hp,Ulo),e(T,Jlo),e(T,pp),e(pp,ire),e(ire,Ylo),e(pp,Klo),e(pp,SB),e(SB,Zlo),e(pp,eio),e(T,oio),e(T,_p),e(_p,dre),e(dre,rio),e(_p,tio),e(_p,RB),e(RB,aio),e(_p,nio),e(T,sio),e(T,up),e(up,cre),e(cre,lio),e(up,iio),e(up,BB),e(BB,dio),e(up,cio),e(T,fio),e(T,bp),e(bp,fre),e(fre,mio),e(bp,gio),e(bp,PB),e(PB,hio),e(bp,pio),e(T,_io),e(T,vp),e(vp,mre),e(mre,uio),e(vp,bio),e(vp,$B),e($B,vio),e(vp,Fio),e(T,Tio),e(T,Fp),e(Fp,gre),e(gre,Mio),e(Fp,Eio),e(Fp,IB),e(IB,Cio),e(Fp,wio),e(T,Aio),e(T,Tp),e(Tp,hre),e(hre,yio),e(Tp,Lio),e(Tp,qB),e(qB,xio),e(Tp,kio),e(T,Sio),e(T,Mp),e(Mp,pre),e(pre,Rio),e(Mp,Bio),e(Mp,NB),e(NB,Pio),e(Mp,$io),e(T,Iio),e(T,Ep),e(Ep,_re),e(_re,qio),e(Ep,Nio),e(Ep,jB),e(jB,jio),e(Ep,Dio),e(T,Gio),e(T,Cp),e(Cp,ure),e(ure,Oio),e(Cp,Vio),e(Cp,DB),e(DB,Xio),e(Cp,zio),e(T,Qio),e(T,wp),e(wp,bre),e(bre,Wio),e(wp,Hio),e(wp,GB),e(GB,Uio),e(wp,Jio),e(T,Yio),e(T,Ap),e(Ap,vre),e(vre,Kio),e(Ap,Zio),e(Ap,OB),e(OB,edo),e(Ap,odo),e(T,rdo),e(T,Ds),e(Ds,Fre),e(Fre,tdo),e(Ds,ado),e(Ds,VB),e(VB,ndo),e(Ds,sdo),e(Ds,XB),e(XB,ldo),e(Ds,ido),e(T,ddo),e(T,yp),e(yp,Tre),e(Tre,cdo),e(yp,fdo),e(yp,zB),e(zB,mdo),e(yp,gdo),e(T,hdo),e(T,Lp),e(Lp,Mre),e(Mre,pdo),e(Lp,_do),e(Lp,QB),e(QB,udo),e(Lp,bdo),e(T,vdo),e(T,xp),e(xp,Ere),e(Ere,Fdo),e(xp,Tdo),e(xp,WB),e(WB,Mdo),e(xp,Edo),e(T,Cdo),e(T,kp),e(kp,Cre),e(Cre,wdo),e(kp,Ado),e(kp,HB),e(HB,ydo),e(kp,Ldo),e(T,xdo),e(T,Sp),e(Sp,wre),e(wre,kdo),e(Sp,Sdo),e(Sp,UB),e(UB,Rdo),e(Sp,Bdo),e(T,Pdo),e(T,Rp),e(Rp,Are),e(Are,$do),e(Rp,Ido),e(Rp,JB),e(JB,qdo),e(Rp,Ndo),e(T,jdo),e(T,Bp),e(Bp,yre),e(yre,Ddo),e(Bp,Gdo),e(Bp,YB),e(YB,Odo),e(Bp,Vdo),e(T,Xdo),e(T,Pp),e(Pp,Lre),e(Lre,zdo),e(Pp,Qdo),e(Pp,KB),e(KB,Wdo),e(Pp,Hdo),e(T,Udo),e(T,$p),e($p,xre),e(xre,Jdo),e($p,Ydo),e($p,ZB),e(ZB,Kdo),e($p,Zdo),e(T,eco),e(T,Ip),e(Ip,kre),e(kre,oco),e(Ip,rco),e(Ip,eP),e(eP,tco),e(Ip,aco),e(T,nco),e(T,qp),e(qp,Sre),e(Sre,sco),e(qp,lco),e(qp,oP),e(oP,ico),e(qp,dco),e(T,cco),e(T,Np),e(Np,Rre),e(Rre,fco),e(Np,mco),e(Np,rP),e(rP,gco),e(Np,hco),e(T,pco),e(T,jp),e(jp,Bre),e(Bre,_co),e(jp,uco),e(jp,tP),e(tP,bco),e(jp,vco),e(T,Fco),e(T,Dp),e(Dp,Pre),e(Pre,Tco),e(Dp,Mco),e(Dp,aP),e(aP,Eco),e(Dp,Cco),e(T,wco),e(T,Gp),e(Gp,$re),e($re,Aco),e(Gp,yco),e(Gp,nP),e(nP,Lco),e(Gp,xco),e(T,kco),e(T,Op),e(Op,Ire),e(Ire,Sco),e(Op,Rco),e(Op,sP),e(sP,Bco),e(Op,Pco),e(T,$co),e(T,Vp),e(Vp,qre),e(qre,Ico),e(Vp,qco),e(Vp,lP),e(lP,Nco),e(Vp,jco),e(T,Dco),e(T,Xp),e(Xp,Nre),e(Nre,Gco),e(Xp,Oco),e(Xp,iP),e(iP,Vco),e(Xp,Xco),e(T,zco),e(T,zp),e(zp,jre),e(jre,Qco),e(zp,Wco),e(zp,dP),e(dP,Hco),e(zp,Uco),e(T,Jco),e(T,Qp),e(Qp,Dre),e(Dre,Yco),e(Qp,Kco),e(Qp,cP),e(cP,Zco),e(Qp,efo),e(T,ofo),e(T,Wp),e(Wp,Gre),e(Gre,rfo),e(Wp,tfo),e(Wp,fP),e(fP,afo),e(Wp,nfo),e(T,sfo),e(T,Hp),e(Hp,Ore),e(Ore,lfo),e(Hp,ifo),e(Hp,mP),e(mP,dfo),e(Hp,cfo),e(T,ffo),e(T,Up),e(Up,Vre),e(Vre,mfo),e(Up,gfo),e(Up,gP),e(gP,hfo),e(Up,pfo),e(T,_fo),e(T,Jp),e(Jp,Xre),e(Xre,ufo),e(Jp,bfo),e(Jp,hP),e(hP,vfo),e(Jp,Ffo),e(T,Tfo),e(T,Yp),e(Yp,zre),e(zre,Mfo),e(Yp,Efo),e(Yp,pP),e(pP,Cfo),e(Yp,wfo),e(T,Afo),e(T,Kp),e(Kp,Qre),e(Qre,yfo),e(Kp,Lfo),e(Kp,_P),e(_P,xfo),e(Kp,kfo),e(T,Sfo),e(T,Zp),e(Zp,Wre),e(Wre,Rfo),e(Zp,Bfo),e(Zp,uP),e(uP,Pfo),e(Zp,$fo),e(T,Ifo),e(T,e_),e(e_,Hre),e(Hre,qfo),e(e_,Nfo),e(e_,bP),e(bP,jfo),e(e_,Dfo),e(T,Gfo),e(T,o_),e(o_,Ure),e(Ure,Ofo),e(o_,Vfo),e(o_,vP),e(vP,Xfo),e(o_,zfo),e(T,Qfo),e(T,r_),e(r_,Jre),e(Jre,Wfo),e(r_,Hfo),e(r_,FP),e(FP,Ufo),e(r_,Jfo),e(T,Yfo),e(T,t_),e(t_,Yre),e(Yre,Kfo),e(t_,Zfo),e(t_,TP),e(TP,emo),e(t_,omo),e(T,rmo),e(T,a_),e(a_,Kre),e(Kre,tmo),e(a_,amo),e(a_,MP),e(MP,nmo),e(a_,smo),e(T,lmo),e(T,n_),e(n_,Zre),e(Zre,imo),e(n_,dmo),e(n_,EP),e(EP,cmo),e(n_,fmo),e(T,mmo),e(T,s_),e(s_,ete),e(ete,gmo),e(s_,hmo),e(s_,CP),e(CP,pmo),e(s_,_mo),e(T,umo),e(T,l_),e(l_,ote),e(ote,bmo),e(l_,vmo),e(l_,wP),e(wP,Fmo),e(l_,Tmo),e(T,Mmo),e(T,i_),e(i_,rte),e(rte,Emo),e(i_,Cmo),e(i_,AP),e(AP,wmo),e(i_,Amo),e(T,ymo),e(T,d_),e(d_,tte),e(tte,Lmo),e(d_,xmo),e(d_,yP),e(yP,kmo),e(d_,Smo),e(T,Rmo),e(T,c_),e(c_,ate),e(ate,Bmo),e(c_,Pmo),e(c_,LP),e(LP,$mo),e(c_,Imo),e(T,qmo),e(T,f_),e(f_,nte),e(nte,Nmo),e(f_,jmo),e(f_,xP),e(xP,Dmo),e(f_,Gmo),e(T,Omo),e(T,m_),e(m_,ste),e(ste,Vmo),e(m_,Xmo),e(m_,kP),e(kP,zmo),e(m_,Qmo),e(T,Wmo),e(T,g_),e(g_,lte),e(lte,Hmo),e(g_,Umo),e(g_,SP),e(SP,Jmo),e(g_,Ymo),e(T,Kmo),e(T,h_),e(h_,ite),e(ite,Zmo),e(h_,ego),e(h_,RP),e(RP,ogo),e(h_,rgo),e(T,tgo),e(T,p_),e(p_,dte),e(dte,ago),e(p_,ngo),e(p_,BP),e(BP,sgo),e(p_,lgo),e(T,igo),e(T,__),e(__,cte),e(cte,dgo),e(__,cgo),e(__,PP),e(PP,fgo),e(__,mgo),e(T,ggo),e(T,u_),e(u_,fte),e(fte,hgo),e(u_,pgo),e(u_,$P),e($P,_go),e(u_,ugo),e(T,bgo),e(T,b_),e(b_,mte),e(mte,vgo),e(b_,Fgo),e(b_,IP),e(IP,Tgo),e(b_,Mgo),e(T,Ego),e(T,v_),e(v_,gte),e(gte,Cgo),e(v_,wgo),e(v_,qP),e(qP,Ago),e(v_,ygo),e(T,Lgo),e(T,F_),e(F_,hte),e(hte,xgo),e(F_,kgo),e(F_,NP),e(NP,Sgo),e(F_,Rgo),e(T,Bgo),e(T,T_),e(T_,pte),e(pte,Pgo),e(T_,$go),e(T_,jP),e(jP,Igo),e(T_,qgo),e(T,Ngo),e(T,M_),e(M_,_te),e(_te,jgo),e(M_,Dgo),e(M_,DP),e(DP,Ggo),e(M_,Ogo),e(T,Vgo),e(T,E_),e(E_,ute),e(ute,Xgo),e(E_,zgo),e(E_,GP),e(GP,Qgo),e(E_,Wgo),e(T,Hgo),e(T,C_),e(C_,bte),e(bte,Ugo),e(C_,Jgo),e(C_,OP),e(OP,Ygo),e(C_,Kgo),e(T,Zgo),e(T,w_),e(w_,vte),e(vte,eho),e(w_,oho),e(w_,VP),e(VP,rho),e(w_,tho),e(T,aho),e(T,A_),e(A_,Fte),e(Fte,nho),e(A_,sho),e(A_,XP),e(XP,lho),e(A_,iho),e(T,dho),e(T,y_),e(y_,Tte),e(Tte,cho),e(y_,fho),e(y_,zP),e(zP,mho),e(y_,gho),e(T,hho),e(T,L_),e(L_,Mte),e(Mte,pho),e(L_,_ho),e(L_,QP),e(QP,uho),e(L_,bho),e(T,vho),e(T,x_),e(x_,Ete),e(Ete,Fho),e(x_,Tho),e(x_,WP),e(WP,Mho),e(x_,Eho),e(T,Cho),e(T,k_),e(k_,Cte),e(Cte,who),e(k_,Aho),e(k_,HP),e(HP,yho),e(k_,Lho),e(T,xho),e(T,S_),e(S_,wte),e(wte,kho),e(S_,Sho),e(S_,UP),e(UP,Rho),e(S_,Bho),e(T,Pho),e(T,R_),e(R_,Ate),e(Ate,$ho),e(R_,Iho),e(R_,JP),e(JP,qho),e(R_,Nho),e(T,jho),e(T,B_),e(B_,yte),e(yte,Dho),e(B_,Gho),e(B_,YP),e(YP,Oho),e(B_,Vho),e(T,Xho),e(T,P_),e(P_,Lte),e(Lte,zho),e(P_,Qho),e(P_,KP),e(KP,Who),e(P_,Hho),e(T,Uho),e(T,$_),e($_,xte),e(xte,Jho),e($_,Yho),e($_,ZP),e(ZP,Kho),e($_,Zho),e(qe,epo),e(qe,I_),e(I_,opo),e(I_,kte),e(kte,rpo),e(I_,tpo),e(I_,Ste),e(Ste,apo),e(qe,npo),e(qe,Rte),e(Rte,spo),e(qe,lpo),g(m5,qe,null),b(c,NRe,u),b(c,ed,u),e(ed,q_),e(q_,Bte),g(g5,Bte,null),e(ed,ipo),e(ed,Pte),e(Pte,dpo),b(c,jRe,u),b(c,Yo,u),g(h5,Yo,null),e(Yo,cpo),e(Yo,od),e(od,fpo),e(od,e$),e(e$,mpo),e(od,gpo),e(od,o$),e(o$,hpo),e(od,ppo),e(Yo,_po),e(Yo,p5),e(p5,upo),e(p5,$te),e($te,bpo),e(p5,vpo),e(Yo,Fpo),e(Yo,zr),g(_5,zr,null),e(zr,Tpo),e(zr,Ite),e(Ite,Mpo),e(zr,Epo),e(zr,rd),e(rd,Cpo),e(rd,qte),e(qte,wpo),e(rd,Apo),e(rd,r$),e(r$,ypo),e(rd,Lpo),e(zr,xpo),e(zr,Nte),e(Nte,kpo),e(zr,Spo),g(u5,zr,null),e(Yo,Rpo),e(Yo,Ne),g(b5,Ne,null),e(Ne,Bpo),e(Ne,jte),e(jte,Ppo),e(Ne,$po),e(Ne,za),e(za,Ipo),e(za,Dte),e(Dte,qpo),e(za,Npo),e(za,Gte),e(Gte,jpo),e(za,Dpo),e(za,Ote),e(Ote,Gpo),e(za,Opo),e(Ne,Vpo),e(Ne,R),e(R,N_),e(N_,Vte),e(Vte,Xpo),e(N_,zpo),e(N_,t$),e(t$,Qpo),e(N_,Wpo),e(R,Hpo),e(R,j_),e(j_,Xte),e(Xte,Upo),e(j_,Jpo),e(j_,a$),e(a$,Ypo),e(j_,Kpo),e(R,Zpo),e(R,D_),e(D_,zte),e(zte,e_o),e(D_,o_o),e(D_,n$),e(n$,r_o),e(D_,t_o),e(R,a_o),e(R,G_),e(G_,Qte),e(Qte,n_o),e(G_,s_o),e(G_,s$),e(s$,l_o),e(G_,i_o),e(R,d_o),e(R,O_),e(O_,Wte),e(Wte,c_o),e(O_,f_o),e(O_,l$),e(l$,m_o),e(O_,g_o),e(R,h_o),e(R,V_),e(V_,Hte),e(Hte,p_o),e(V_,__o),e(V_,i$),e(i$,u_o),e(V_,b_o),e(R,v_o),e(R,X_),e(X_,Ute),e(Ute,F_o),e(X_,T_o),e(X_,d$),e(d$,M_o),e(X_,E_o),e(R,C_o),e(R,z_),e(z_,Jte),e(Jte,w_o),e(z_,A_o),e(z_,c$),e(c$,y_o),e(z_,L_o),e(R,x_o),e(R,Q_),e(Q_,Yte),e(Yte,k_o),e(Q_,S_o),e(Q_,f$),e(f$,R_o),e(Q_,B_o),e(R,P_o),e(R,W_),e(W_,Kte),e(Kte,$_o),e(W_,I_o),e(W_,m$),e(m$,q_o),e(W_,N_o),e(R,j_o),e(R,H_),e(H_,Zte),e(Zte,D_o),e(H_,G_o),e(H_,g$),e(g$,O_o),e(H_,V_o),e(R,X_o),e(R,U_),e(U_,eae),e(eae,z_o),e(U_,Q_o),e(U_,h$),e(h$,W_o),e(U_,H_o),e(R,U_o),e(R,J_),e(J_,oae),e(oae,J_o),e(J_,Y_o),e(J_,p$),e(p$,K_o),e(J_,Z_o),e(R,euo),e(R,Y_),e(Y_,rae),e(rae,ouo),e(Y_,ruo),e(Y_,_$),e(_$,tuo),e(Y_,auo),e(R,nuo),e(R,K_),e(K_,tae),e(tae,suo),e(K_,luo),e(K_,u$),e(u$,iuo),e(K_,duo),e(R,cuo),e(R,Z_),e(Z_,aae),e(aae,fuo),e(Z_,muo),e(Z_,b$),e(b$,guo),e(Z_,huo),e(R,puo),e(R,eu),e(eu,nae),e(nae,_uo),e(eu,uuo),e(eu,v$),e(v$,buo),e(eu,vuo),e(R,Fuo),e(R,ou),e(ou,sae),e(sae,Tuo),e(ou,Muo),e(ou,F$),e(F$,Euo),e(ou,Cuo),e(R,wuo),e(R,ru),e(ru,lae),e(lae,Auo),e(ru,yuo),e(ru,T$),e(T$,Luo),e(ru,xuo),e(R,kuo),e(R,tu),e(tu,iae),e(iae,Suo),e(tu,Ruo),e(tu,M$),e(M$,Buo),e(tu,Puo),e(R,$uo),e(R,au),e(au,dae),e(dae,Iuo),e(au,quo),e(au,E$),e(E$,Nuo),e(au,juo),e(R,Duo),e(R,nu),e(nu,cae),e(cae,Guo),e(nu,Ouo),e(nu,C$),e(C$,Vuo),e(nu,Xuo),e(R,zuo),e(R,su),e(su,fae),e(fae,Quo),e(su,Wuo),e(su,w$),e(w$,Huo),e(su,Uuo),e(R,Juo),e(R,lu),e(lu,mae),e(mae,Yuo),e(lu,Kuo),e(lu,A$),e(A$,Zuo),e(lu,e1o),e(R,o1o),e(R,iu),e(iu,gae),e(gae,r1o),e(iu,t1o),e(iu,y$),e(y$,a1o),e(iu,n1o),e(R,s1o),e(R,du),e(du,hae),e(hae,l1o),e(du,i1o),e(du,L$),e(L$,d1o),e(du,c1o),e(R,f1o),e(R,cu),e(cu,pae),e(pae,m1o),e(cu,g1o),e(cu,x$),e(x$,h1o),e(cu,p1o),e(R,_1o),e(R,fu),e(fu,_ae),e(_ae,u1o),e(fu,b1o),e(fu,k$),e(k$,v1o),e(fu,F1o),e(R,T1o),e(R,mu),e(mu,uae),e(uae,M1o),e(mu,E1o),e(mu,S$),e(S$,C1o),e(mu,w1o),e(R,A1o),e(R,gu),e(gu,bae),e(bae,y1o),e(gu,L1o),e(gu,R$),e(R$,x1o),e(gu,k1o),e(R,S1o),e(R,hu),e(hu,vae),e(vae,R1o),e(hu,B1o),e(hu,B$),e(B$,P1o),e(hu,$1o),e(R,I1o),e(R,pu),e(pu,Fae),e(Fae,q1o),e(pu,N1o),e(pu,P$),e(P$,j1o),e(pu,D1o),e(R,G1o),e(R,_u),e(_u,Tae),e(Tae,O1o),e(_u,V1o),e(_u,$$),e($$,X1o),e(_u,z1o),e(R,Q1o),e(R,uu),e(uu,Mae),e(Mae,W1o),e(uu,H1o),e(uu,I$),e(I$,U1o),e(uu,J1o),e(R,Y1o),e(R,bu),e(bu,Eae),e(Eae,K1o),e(bu,Z1o),e(bu,q$),e(q$,ebo),e(bu,obo),e(R,rbo),e(R,vu),e(vu,Cae),e(Cae,tbo),e(vu,abo),e(vu,N$),e(N$,nbo),e(vu,sbo),e(R,lbo),e(R,Fu),e(Fu,wae),e(wae,ibo),e(Fu,dbo),e(Fu,j$),e(j$,cbo),e(Fu,fbo),e(R,mbo),e(R,Tu),e(Tu,Aae),e(Aae,gbo),e(Tu,hbo),e(Tu,D$),e(D$,pbo),e(Tu,_bo),e(Ne,ubo),e(Ne,Mu),e(Mu,bbo),e(Mu,yae),e(yae,vbo),e(Mu,Fbo),e(Mu,Lae),e(Lae,Tbo),e(Ne,Mbo),e(Ne,xae),e(xae,Ebo),e(Ne,Cbo),g(v5,Ne,null),b(c,DRe,u),b(c,td,u),e(td,Eu),e(Eu,kae),g(F5,kae,null),e(td,wbo),e(td,Sae),e(Sae,Abo),b(c,GRe,u),b(c,Ko,u),g(T5,Ko,null),e(Ko,ybo),e(Ko,ad),e(ad,Lbo),e(ad,G$),e(G$,xbo),e(ad,kbo),e(ad,O$),e(O$,Sbo),e(ad,Rbo),e(Ko,Bbo),e(Ko,M5),e(M5,Pbo),e(M5,Rae),e(Rae,$bo),e(M5,Ibo),e(Ko,qbo),e(Ko,Qr),g(E5,Qr,null),e(Qr,Nbo),e(Qr,Bae),e(Bae,jbo),e(Qr,Dbo),e(Qr,nd),e(nd,Gbo),e(nd,Pae),e(Pae,Obo),e(nd,Vbo),e(nd,V$),e(V$,Xbo),e(nd,zbo),e(Qr,Qbo),e(Qr,$ae),e($ae,Wbo),e(Qr,Hbo),g(C5,Qr,null),e(Ko,Ubo),e(Ko,je),g(w5,je,null),e(je,Jbo),e(je,Iae),e(Iae,Ybo),e(je,Kbo),e(je,Qa),e(Qa,Zbo),e(Qa,qae),e(qae,e2o),e(Qa,o2o),e(Qa,Nae),e(Nae,r2o),e(Qa,t2o),e(Qa,jae),e(jae,a2o),e(Qa,n2o),e(je,s2o),e(je,$),e($,Cu),e(Cu,Dae),e(Dae,l2o),e(Cu,i2o),e(Cu,X$),e(X$,d2o),e(Cu,c2o),e($,f2o),e($,wu),e(wu,Gae),e(Gae,m2o),e(wu,g2o),e(wu,z$),e(z$,h2o),e(wu,p2o),e($,_2o),e($,Au),e(Au,Oae),e(Oae,u2o),e(Au,b2o),e(Au,Q$),e(Q$,v2o),e(Au,F2o),e($,T2o),e($,yu),e(yu,Vae),e(Vae,M2o),e(yu,E2o),e(yu,W$),e(W$,C2o),e(yu,w2o),e($,A2o),e($,Lu),e(Lu,Xae),e(Xae,y2o),e(Lu,L2o),e(Lu,H$),e(H$,x2o),e(Lu,k2o),e($,S2o),e($,xu),e(xu,zae),e(zae,R2o),e(xu,B2o),e(xu,U$),e(U$,P2o),e(xu,$2o),e($,I2o),e($,ku),e(ku,Qae),e(Qae,q2o),e(ku,N2o),e(ku,J$),e(J$,j2o),e(ku,D2o),e($,G2o),e($,Su),e(Su,Wae),e(Wae,O2o),e(Su,V2o),e(Su,Y$),e(Y$,X2o),e(Su,z2o),e($,Q2o),e($,Ru),e(Ru,Hae),e(Hae,W2o),e(Ru,H2o),e(Ru,K$),e(K$,U2o),e(Ru,J2o),e($,Y2o),e($,Bu),e(Bu,Uae),e(Uae,K2o),e(Bu,Z2o),e(Bu,Z$),e(Z$,e3o),e(Bu,o3o),e($,r3o),e($,Pu),e(Pu,Jae),e(Jae,t3o),e(Pu,a3o),e(Pu,eI),e(eI,n3o),e(Pu,s3o),e($,l3o),e($,$u),e($u,Yae),e(Yae,i3o),e($u,d3o),e($u,oI),e(oI,c3o),e($u,f3o),e($,m3o),e($,Iu),e(Iu,Kae),e(Kae,g3o),e(Iu,h3o),e(Iu,rI),e(rI,p3o),e(Iu,_3o),e($,u3o),e($,qu),e(qu,Zae),e(Zae,b3o),e(qu,v3o),e(qu,tI),e(tI,F3o),e(qu,T3o),e($,M3o),e($,Nu),e(Nu,ene),e(ene,E3o),e(Nu,C3o),e(Nu,aI),e(aI,w3o),e(Nu,A3o),e($,y3o),e($,ju),e(ju,one),e(one,L3o),e(ju,x3o),e(ju,nI),e(nI,k3o),e(ju,S3o),e($,R3o),e($,Du),e(Du,rne),e(rne,B3o),e(Du,P3o),e(Du,sI),e(sI,$3o),e(Du,I3o),e($,q3o),e($,Gu),e(Gu,tne),e(tne,N3o),e(Gu,j3o),e(Gu,lI),e(lI,D3o),e(Gu,G3o),e($,O3o),e($,Ou),e(Ou,ane),e(ane,V3o),e(Ou,X3o),e(Ou,iI),e(iI,z3o),e(Ou,Q3o),e($,W3o),e($,Vu),e(Vu,nne),e(nne,H3o),e(Vu,U3o),e(Vu,dI),e(dI,J3o),e(Vu,Y3o),e($,K3o),e($,Xu),e(Xu,sne),e(sne,Z3o),e(Xu,e6o),e(Xu,cI),e(cI,o6o),e(Xu,r6o),e($,t6o),e($,zu),e(zu,lne),e(lne,a6o),e(zu,n6o),e(zu,fI),e(fI,s6o),e(zu,l6o),e($,i6o),e($,Qu),e(Qu,ine),e(ine,d6o),e(Qu,c6o),e(Qu,mI),e(mI,f6o),e(Qu,m6o),e($,g6o),e($,Wu),e(Wu,dne),e(dne,h6o),e(Wu,p6o),e(Wu,gI),e(gI,_6o),e(Wu,u6o),e($,b6o),e($,Hu),e(Hu,cne),e(cne,v6o),e(Hu,F6o),e(Hu,hI),e(hI,T6o),e(Hu,M6o),e($,E6o),e($,Uu),e(Uu,fne),e(fne,C6o),e(Uu,w6o),e(Uu,pI),e(pI,A6o),e(Uu,y6o),e($,L6o),e($,Ju),e(Ju,mne),e(mne,x6o),e(Ju,k6o),e(Ju,_I),e(_I,S6o),e(Ju,R6o),e($,B6o),e($,Yu),e(Yu,gne),e(gne,P6o),e(Yu,$6o),e(Yu,uI),e(uI,I6o),e(Yu,q6o),e($,N6o),e($,Ku),e(Ku,hne),e(hne,j6o),e(Ku,D6o),e(Ku,bI),e(bI,G6o),e(Ku,O6o),e($,V6o),e($,Zu),e(Zu,pne),e(pne,X6o),e(Zu,z6o),e(Zu,vI),e(vI,Q6o),e(Zu,W6o),e($,H6o),e($,e1),e(e1,_ne),e(_ne,U6o),e(e1,J6o),e(e1,FI),e(FI,Y6o),e(e1,K6o),e($,Z6o),e($,o1),e(o1,une),e(une,evo),e(o1,ovo),e(o1,TI),e(TI,rvo),e(o1,tvo),e($,avo),e($,r1),e(r1,bne),e(bne,nvo),e(r1,svo),e(r1,MI),e(MI,lvo),e(r1,ivo),e($,dvo),e($,t1),e(t1,vne),e(vne,cvo),e(t1,fvo),e(t1,EI),e(EI,mvo),e(t1,gvo),e($,hvo),e($,a1),e(a1,Fne),e(Fne,pvo),e(a1,_vo),e(a1,CI),e(CI,uvo),e(a1,bvo),e(je,vvo),e(je,n1),e(n1,Fvo),e(n1,Tne),e(Tne,Tvo),e(n1,Mvo),e(n1,Mne),e(Mne,Evo),e(je,Cvo),e(je,Ene),e(Ene,wvo),e(je,Avo),g(A5,je,null),b(c,ORe,u),b(c,sd,u),e(sd,s1),e(s1,Cne),g(y5,Cne,null),e(sd,yvo),e(sd,wne),e(wne,Lvo),b(c,VRe,u),b(c,Zo,u),g(L5,Zo,null),e(Zo,xvo),e(Zo,ld),e(ld,kvo),e(ld,wI),e(wI,Svo),e(ld,Rvo),e(ld,AI),e(AI,Bvo),e(ld,Pvo),e(Zo,$vo),e(Zo,x5),e(x5,Ivo),e(x5,Ane),e(Ane,qvo),e(x5,Nvo),e(Zo,jvo),e(Zo,Wr),g(k5,Wr,null),e(Wr,Dvo),e(Wr,yne),e(yne,Gvo),e(Wr,Ovo),e(Wr,id),e(id,Vvo),e(id,Lne),e(Lne,Xvo),e(id,zvo),e(id,yI),e(yI,Qvo),e(id,Wvo),e(Wr,Hvo),e(Wr,xne),e(xne,Uvo),e(Wr,Jvo),g(S5,Wr,null),e(Zo,Yvo),e(Zo,De),g(R5,De,null),e(De,Kvo),e(De,kne),e(kne,Zvo),e(De,eFo),e(De,Wa),e(Wa,oFo),e(Wa,Sne),e(Sne,rFo),e(Wa,tFo),e(Wa,Rne),e(Rne,aFo),e(Wa,nFo),e(Wa,Bne),e(Bne,sFo),e(Wa,lFo),e(De,iFo),e(De,I),e(I,l1),e(l1,Pne),e(Pne,dFo),e(l1,cFo),e(l1,LI),e(LI,fFo),e(l1,mFo),e(I,gFo),e(I,i1),e(i1,$ne),e($ne,hFo),e(i1,pFo),e(i1,xI),e(xI,_Fo),e(i1,uFo),e(I,bFo),e(I,d1),e(d1,Ine),e(Ine,vFo),e(d1,FFo),e(d1,kI),e(kI,TFo),e(d1,MFo),e(I,EFo),e(I,c1),e(c1,qne),e(qne,CFo),e(c1,wFo),e(c1,SI),e(SI,AFo),e(c1,yFo),e(I,LFo),e(I,f1),e(f1,Nne),e(Nne,xFo),e(f1,kFo),e(f1,RI),e(RI,SFo),e(f1,RFo),e(I,BFo),e(I,m1),e(m1,jne),e(jne,PFo),e(m1,$Fo),e(m1,BI),e(BI,IFo),e(m1,qFo),e(I,NFo),e(I,g1),e(g1,Dne),e(Dne,jFo),e(g1,DFo),e(g1,PI),e(PI,GFo),e(g1,OFo),e(I,VFo),e(I,h1),e(h1,Gne),e(Gne,XFo),e(h1,zFo),e(h1,$I),e($I,QFo),e(h1,WFo),e(I,HFo),e(I,p1),e(p1,One),e(One,UFo),e(p1,JFo),e(p1,II),e(II,YFo),e(p1,KFo),e(I,ZFo),e(I,_1),e(_1,Vne),e(Vne,eTo),e(_1,oTo),e(_1,qI),e(qI,rTo),e(_1,tTo),e(I,aTo),e(I,u1),e(u1,Xne),e(Xne,nTo),e(u1,sTo),e(u1,NI),e(NI,lTo),e(u1,iTo),e(I,dTo),e(I,b1),e(b1,zne),e(zne,cTo),e(b1,fTo),e(b1,jI),e(jI,mTo),e(b1,gTo),e(I,hTo),e(I,v1),e(v1,Qne),e(Qne,pTo),e(v1,_To),e(v1,DI),e(DI,uTo),e(v1,bTo),e(I,vTo),e(I,F1),e(F1,Wne),e(Wne,FTo),e(F1,TTo),e(F1,GI),e(GI,MTo),e(F1,ETo),e(I,CTo),e(I,T1),e(T1,Hne),e(Hne,wTo),e(T1,ATo),e(T1,OI),e(OI,yTo),e(T1,LTo),e(I,xTo),e(I,M1),e(M1,Une),e(Une,kTo),e(M1,STo),e(M1,VI),e(VI,RTo),e(M1,BTo),e(I,PTo),e(I,E1),e(E1,Jne),e(Jne,$To),e(E1,ITo),e(E1,XI),e(XI,qTo),e(E1,NTo),e(I,jTo),e(I,C1),e(C1,Yne),e(Yne,DTo),e(C1,GTo),e(C1,zI),e(zI,OTo),e(C1,VTo),e(I,XTo),e(I,w1),e(w1,Kne),e(Kne,zTo),e(w1,QTo),e(w1,QI),e(QI,WTo),e(w1,HTo),e(I,UTo),e(I,A1),e(A1,Zne),e(Zne,JTo),e(A1,YTo),e(A1,WI),e(WI,KTo),e(A1,ZTo),e(I,e8o),e(I,y1),e(y1,ese),e(ese,o8o),e(y1,r8o),e(y1,HI),e(HI,t8o),e(y1,a8o),e(I,n8o),e(I,L1),e(L1,ose),e(ose,s8o),e(L1,l8o),e(L1,UI),e(UI,i8o),e(L1,d8o),e(I,c8o),e(I,x1),e(x1,rse),e(rse,f8o),e(x1,m8o),e(x1,JI),e(JI,g8o),e(x1,h8o),e(I,p8o),e(I,k1),e(k1,tse),e(tse,_8o),e(k1,u8o),e(k1,YI),e(YI,b8o),e(k1,v8o),e(I,F8o),e(I,S1),e(S1,ase),e(ase,T8o),e(S1,M8o),e(S1,KI),e(KI,E8o),e(S1,C8o),e(I,w8o),e(I,R1),e(R1,nse),e(nse,A8o),e(R1,y8o),e(R1,ZI),e(ZI,L8o),e(R1,x8o),e(I,k8o),e(I,B1),e(B1,sse),e(sse,S8o),e(B1,R8o),e(B1,eq),e(eq,B8o),e(B1,P8o),e(I,$8o),e(I,P1),e(P1,lse),e(lse,I8o),e(P1,q8o),e(P1,oq),e(oq,N8o),e(P1,j8o),e(I,D8o),e(I,$1),e($1,ise),e(ise,G8o),e($1,O8o),e($1,rq),e(rq,V8o),e($1,X8o),e(I,z8o),e(I,I1),e(I1,dse),e(dse,Q8o),e(I1,W8o),e(I1,cse),e(cse,H8o),e(I1,U8o),e(I,J8o),e(I,q1),e(q1,fse),e(fse,Y8o),e(q1,K8o),e(q1,tq),e(tq,Z8o),e(q1,e9o),e(I,o9o),e(I,N1),e(N1,mse),e(mse,r9o),e(N1,t9o),e(N1,aq),e(aq,a9o),e(N1,n9o),e(I,s9o),e(I,j1),e(j1,gse),e(gse,l9o),e(j1,i9o),e(j1,nq),e(nq,d9o),e(j1,c9o),e(I,f9o),e(I,D1),e(D1,hse),e(hse,m9o),e(D1,g9o),e(D1,sq),e(sq,h9o),e(D1,p9o),e(De,_9o),e(De,G1),e(G1,u9o),e(G1,pse),e(pse,b9o),e(G1,v9o),e(G1,_se),e(_se,F9o),e(De,T9o),e(De,use),e(use,M9o),e(De,E9o),g(B5,De,null),b(c,XRe,u),b(c,dd,u),e(dd,O1),e(O1,bse),g(P5,bse,null),e(dd,C9o),e(dd,vse),e(vse,w9o),b(c,zRe,u),b(c,er,u),g($5,er,null),e(er,A9o),e(er,cd),e(cd,y9o),e(cd,lq),e(lq,L9o),e(cd,x9o),e(cd,iq),e(iq,k9o),e(cd,S9o),e(er,R9o),e(er,I5),e(I5,B9o),e(I5,Fse),e(Fse,P9o),e(I5,$9o),e(er,I9o),e(er,Hr),g(q5,Hr,null),e(Hr,q9o),e(Hr,Tse),e(Tse,N9o),e(Hr,j9o),e(Hr,fd),e(fd,D9o),e(fd,Mse),e(Mse,G9o),e(fd,O9o),e(fd,dq),e(dq,V9o),e(fd,X9o),e(Hr,z9o),e(Hr,Ese),e(Ese,Q9o),e(Hr,W9o),g(N5,Hr,null),e(er,H9o),e(er,Ge),g(j5,Ge,null),e(Ge,U9o),e(Ge,Cse),e(Cse,J9o),e(Ge,Y9o),e(Ge,Ha),e(Ha,K9o),e(Ha,wse),e(wse,Z9o),e(Ha,eMo),e(Ha,Ase),e(Ase,oMo),e(Ha,rMo),e(Ha,yse),e(yse,tMo),e(Ha,aMo),e(Ge,nMo),e(Ge,ne),e(ne,V1),e(V1,Lse),e(Lse,sMo),e(V1,lMo),e(V1,cq),e(cq,iMo),e(V1,dMo),e(ne,cMo),e(ne,X1),e(X1,xse),e(xse,fMo),e(X1,mMo),e(X1,fq),e(fq,gMo),e(X1,hMo),e(ne,pMo),e(ne,z1),e(z1,kse),e(kse,_Mo),e(z1,uMo),e(z1,mq),e(mq,bMo),e(z1,vMo),e(ne,FMo),e(ne,Q1),e(Q1,Sse),e(Sse,TMo),e(Q1,MMo),e(Q1,gq),e(gq,EMo),e(Q1,CMo),e(ne,wMo),e(ne,W1),e(W1,Rse),e(Rse,AMo),e(W1,yMo),e(W1,hq),e(hq,LMo),e(W1,xMo),e(ne,kMo),e(ne,H1),e(H1,Bse),e(Bse,SMo),e(H1,RMo),e(H1,pq),e(pq,BMo),e(H1,PMo),e(ne,$Mo),e(ne,U1),e(U1,Pse),e(Pse,IMo),e(U1,qMo),e(U1,_q),e(_q,NMo),e(U1,jMo),e(ne,DMo),e(ne,J1),e(J1,$se),e($se,GMo),e(J1,OMo),e(J1,uq),e(uq,VMo),e(J1,XMo),e(ne,zMo),e(ne,Y1),e(Y1,Ise),e(Ise,QMo),e(Y1,WMo),e(Y1,bq),e(bq,HMo),e(Y1,UMo),e(ne,JMo),e(ne,K1),e(K1,qse),e(qse,YMo),e(K1,KMo),e(K1,vq),e(vq,ZMo),e(K1,e4o),e(ne,o4o),e(ne,Z1),e(Z1,Nse),e(Nse,r4o),e(Z1,t4o),e(Z1,Fq),e(Fq,a4o),e(Z1,n4o),e(ne,s4o),e(ne,eb),e(eb,jse),e(jse,l4o),e(eb,i4o),e(eb,Tq),e(Tq,d4o),e(eb,c4o),e(ne,f4o),e(ne,ob),e(ob,Dse),e(Dse,m4o),e(ob,g4o),e(ob,Mq),e(Mq,h4o),e(ob,p4o),e(ne,_4o),e(ne,rb),e(rb,Gse),e(Gse,u4o),e(rb,b4o),e(rb,Eq),e(Eq,v4o),e(rb,F4o),e(ne,T4o),e(ne,tb),e(tb,Ose),e(Ose,M4o),e(tb,E4o),e(tb,Cq),e(Cq,C4o),e(tb,w4o),e(ne,A4o),e(ne,ab),e(ab,Vse),e(Vse,y4o),e(ab,L4o),e(ab,wq),e(wq,x4o),e(ab,k4o),e(ne,S4o),e(ne,nb),e(nb,Xse),e(Xse,R4o),e(nb,B4o),e(nb,Aq),e(Aq,P4o),e(nb,$4o),e(Ge,I4o),e(Ge,sb),e(sb,q4o),e(sb,zse),e(zse,N4o),e(sb,j4o),e(sb,Qse),e(Qse,D4o),e(Ge,G4o),e(Ge,Wse),e(Wse,O4o),e(Ge,V4o),g(D5,Ge,null),b(c,QRe,u),b(c,md,u),e(md,lb),e(lb,Hse),g(G5,Hse,null),e(md,X4o),e(md,Use),e(Use,z4o),b(c,WRe,u),b(c,or,u),g(O5,or,null),e(or,Q4o),e(or,gd),e(gd,W4o),e(gd,yq),e(yq,H4o),e(gd,U4o),e(gd,Lq),e(Lq,J4o),e(gd,Y4o),e(or,K4o),e(or,V5),e(V5,Z4o),e(V5,Jse),e(Jse,eEo),e(V5,oEo),e(or,rEo),e(or,Ur),g(X5,Ur,null),e(Ur,tEo),e(Ur,Yse),e(Yse,aEo),e(Ur,nEo),e(Ur,hd),e(hd,sEo),e(hd,Kse),e(Kse,lEo),e(hd,iEo),e(hd,xq),e(xq,dEo),e(hd,cEo),e(Ur,fEo),e(Ur,Zse),e(Zse,mEo),e(Ur,gEo),g(z5,Ur,null),e(or,hEo),e(or,Oe),g(Q5,Oe,null),e(Oe,pEo),e(Oe,ele),e(ele,_Eo),e(Oe,uEo),e(Oe,Ua),e(Ua,bEo),e(Ua,ole),e(ole,vEo),e(Ua,FEo),e(Ua,rle),e(rle,TEo),e(Ua,MEo),e(Ua,tle),e(tle,EEo),e(Ua,CEo),e(Oe,wEo),e(Oe,y),e(y,ib),e(ib,ale),e(ale,AEo),e(ib,yEo),e(ib,kq),e(kq,LEo),e(ib,xEo),e(y,kEo),e(y,db),e(db,nle),e(nle,SEo),e(db,REo),e(db,Sq),e(Sq,BEo),e(db,PEo),e(y,$Eo),e(y,cb),e(cb,sle),e(sle,IEo),e(cb,qEo),e(cb,Rq),e(Rq,NEo),e(cb,jEo),e(y,DEo),e(y,fb),e(fb,lle),e(lle,GEo),e(fb,OEo),e(fb,Bq),e(Bq,VEo),e(fb,XEo),e(y,zEo),e(y,mb),e(mb,ile),e(ile,QEo),e(mb,WEo),e(mb,Pq),e(Pq,HEo),e(mb,UEo),e(y,JEo),e(y,gb),e(gb,dle),e(dle,YEo),e(gb,KEo),e(gb,$q),e($q,ZEo),e(gb,e5o),e(y,o5o),e(y,hb),e(hb,cle),e(cle,r5o),e(hb,t5o),e(hb,Iq),e(Iq,a5o),e(hb,n5o),e(y,s5o),e(y,pb),e(pb,fle),e(fle,l5o),e(pb,i5o),e(pb,qq),e(qq,d5o),e(pb,c5o),e(y,f5o),e(y,_b),e(_b,mle),e(mle,m5o),e(_b,g5o),e(_b,Nq),e(Nq,h5o),e(_b,p5o),e(y,_5o),e(y,ub),e(ub,gle),e(gle,u5o),e(ub,b5o),e(ub,jq),e(jq,v5o),e(ub,F5o),e(y,T5o),e(y,bb),e(bb,hle),e(hle,M5o),e(bb,E5o),e(bb,Dq),e(Dq,C5o),e(bb,w5o),e(y,A5o),e(y,vb),e(vb,ple),e(ple,y5o),e(vb,L5o),e(vb,Gq),e(Gq,x5o),e(vb,k5o),e(y,S5o),e(y,Fb),e(Fb,_le),e(_le,R5o),e(Fb,B5o),e(Fb,Oq),e(Oq,P5o),e(Fb,$5o),e(y,I5o),e(y,Tb),e(Tb,ule),e(ule,q5o),e(Tb,N5o),e(Tb,Vq),e(Vq,j5o),e(Tb,D5o),e(y,G5o),e(y,Mb),e(Mb,ble),e(ble,O5o),e(Mb,V5o),e(Mb,Xq),e(Xq,X5o),e(Mb,z5o),e(y,Q5o),e(y,Eb),e(Eb,vle),e(vle,W5o),e(Eb,H5o),e(Eb,zq),e(zq,U5o),e(Eb,J5o),e(y,Y5o),e(y,Cb),e(Cb,Fle),e(Fle,K5o),e(Cb,Z5o),e(Cb,Qq),e(Qq,eCo),e(Cb,oCo),e(y,rCo),e(y,wb),e(wb,Tle),e(Tle,tCo),e(wb,aCo),e(wb,Wq),e(Wq,nCo),e(wb,sCo),e(y,lCo),e(y,Ab),e(Ab,Mle),e(Mle,iCo),e(Ab,dCo),e(Ab,Hq),e(Hq,cCo),e(Ab,fCo),e(y,mCo),e(y,yb),e(yb,Ele),e(Ele,gCo),e(yb,hCo),e(yb,Uq),e(Uq,pCo),e(yb,_Co),e(y,uCo),e(y,Lb),e(Lb,Cle),e(Cle,bCo),e(Lb,vCo),e(Lb,Jq),e(Jq,FCo),e(Lb,TCo),e(y,MCo),e(y,xb),e(xb,wle),e(wle,ECo),e(xb,CCo),e(xb,Yq),e(Yq,wCo),e(xb,ACo),e(y,yCo),e(y,kb),e(kb,Ale),e(Ale,LCo),e(kb,xCo),e(kb,Kq),e(Kq,kCo),e(kb,SCo),e(y,RCo),e(y,Sb),e(Sb,yle),e(yle,BCo),e(Sb,PCo),e(Sb,Zq),e(Zq,$Co),e(Sb,ICo),e(y,qCo),e(y,Rb),e(Rb,Lle),e(Lle,NCo),e(Rb,jCo),e(Rb,eN),e(eN,DCo),e(Rb,GCo),e(y,OCo),e(y,Bb),e(Bb,xle),e(xle,VCo),e(Bb,XCo),e(Bb,oN),e(oN,zCo),e(Bb,QCo),e(y,WCo),e(y,Pb),e(Pb,kle),e(kle,HCo),e(Pb,UCo),e(Pb,rN),e(rN,JCo),e(Pb,YCo),e(y,KCo),e(y,$b),e($b,Sle),e(Sle,ZCo),e($b,ewo),e($b,tN),e(tN,owo),e($b,rwo),e(y,two),e(y,Ib),e(Ib,Rle),e(Rle,awo),e(Ib,nwo),e(Ib,aN),e(aN,swo),e(Ib,lwo),e(y,iwo),e(y,qb),e(qb,Ble),e(Ble,dwo),e(qb,cwo),e(qb,nN),e(nN,fwo),e(qb,mwo),e(y,gwo),e(y,Nb),e(Nb,Ple),e(Ple,hwo),e(Nb,pwo),e(Nb,sN),e(sN,_wo),e(Nb,uwo),e(y,bwo),e(y,jb),e(jb,$le),e($le,vwo),e(jb,Fwo),e(jb,lN),e(lN,Two),e(jb,Mwo),e(y,Ewo),e(y,Db),e(Db,Ile),e(Ile,Cwo),e(Db,wwo),e(Db,iN),e(iN,Awo),e(Db,ywo),e(y,Lwo),e(y,Gb),e(Gb,qle),e(qle,xwo),e(Gb,kwo),e(Gb,dN),e(dN,Swo),e(Gb,Rwo),e(y,Bwo),e(y,Ob),e(Ob,Nle),e(Nle,Pwo),e(Ob,$wo),e(Ob,cN),e(cN,Iwo),e(Ob,qwo),e(y,Nwo),e(y,Vb),e(Vb,jle),e(jle,jwo),e(Vb,Dwo),e(Vb,fN),e(fN,Gwo),e(Vb,Owo),e(y,Vwo),e(y,Xb),e(Xb,Dle),e(Dle,Xwo),e(Xb,zwo),e(Xb,mN),e(mN,Qwo),e(Xb,Wwo),e(y,Hwo),e(y,zb),e(zb,Gle),e(Gle,Uwo),e(zb,Jwo),e(zb,gN),e(gN,Ywo),e(zb,Kwo),e(y,Zwo),e(y,Qb),e(Qb,Ole),e(Ole,eAo),e(Qb,oAo),e(Qb,hN),e(hN,rAo),e(Qb,tAo),e(y,aAo),e(y,Wb),e(Wb,Vle),e(Vle,nAo),e(Wb,sAo),e(Wb,pN),e(pN,lAo),e(Wb,iAo),e(y,dAo),e(y,Hb),e(Hb,Xle),e(Xle,cAo),e(Hb,fAo),e(Hb,_N),e(_N,mAo),e(Hb,gAo),e(y,hAo),e(y,Ub),e(Ub,zle),e(zle,pAo),e(Ub,_Ao),e(Ub,uN),e(uN,uAo),e(Ub,bAo),e(y,vAo),e(y,Jb),e(Jb,Qle),e(Qle,FAo),e(Jb,TAo),e(Jb,bN),e(bN,MAo),e(Jb,EAo),e(y,CAo),e(y,Yb),e(Yb,Wle),e(Wle,wAo),e(Yb,AAo),e(Yb,vN),e(vN,yAo),e(Yb,LAo),e(y,xAo),e(y,Kb),e(Kb,Hle),e(Hle,kAo),e(Kb,SAo),e(Kb,FN),e(FN,RAo),e(Kb,BAo),e(y,PAo),e(y,Zb),e(Zb,Ule),e(Ule,$Ao),e(Zb,IAo),e(Zb,TN),e(TN,qAo),e(Zb,NAo),e(y,jAo),e(y,e2),e(e2,Jle),e(Jle,DAo),e(e2,GAo),e(e2,MN),e(MN,OAo),e(e2,VAo),e(Oe,XAo),e(Oe,o2),e(o2,zAo),e(o2,Yle),e(Yle,QAo),e(o2,WAo),e(o2,Kle),e(Kle,HAo),e(Oe,UAo),e(Oe,Zle),e(Zle,JAo),e(Oe,YAo),g(W5,Oe,null),b(c,HRe,u),b(c,pd,u),e(pd,r2),e(r2,eie),g(H5,eie,null),e(pd,KAo),e(pd,oie),e(oie,ZAo),b(c,URe,u),b(c,rr,u),g(U5,rr,null),e(rr,e0o),e(rr,_d),e(_d,o0o),e(_d,EN),e(EN,r0o),e(_d,t0o),e(_d,CN),e(CN,a0o),e(_d,n0o),e(rr,s0o),e(rr,J5),e(J5,l0o),e(J5,rie),e(rie,i0o),e(J5,d0o),e(rr,c0o),e(rr,Jr),g(Y5,Jr,null),e(Jr,f0o),e(Jr,tie),e(tie,m0o),e(Jr,g0o),e(Jr,ud),e(ud,h0o),e(ud,aie),e(aie,p0o),e(ud,_0o),e(ud,wN),e(wN,u0o),e(ud,b0o),e(Jr,v0o),e(Jr,nie),e(nie,F0o),e(Jr,T0o),g(K5,Jr,null),e(rr,M0o),e(rr,Ve),g(Z5,Ve,null),e(Ve,E0o),e(Ve,sie),e(sie,C0o),e(Ve,w0o),e(Ve,Ja),e(Ja,A0o),e(Ja,lie),e(lie,y0o),e(Ja,L0o),e(Ja,iie),e(iie,x0o),e(Ja,k0o),e(Ja,die),e(die,S0o),e(Ja,R0o),e(Ve,B0o),e(Ve,G),e(G,t2),e(t2,cie),e(cie,P0o),e(t2,$0o),e(t2,AN),e(AN,I0o),e(t2,q0o),e(G,N0o),e(G,a2),e(a2,fie),e(fie,j0o),e(a2,D0o),e(a2,yN),e(yN,G0o),e(a2,O0o),e(G,V0o),e(G,n2),e(n2,mie),e(mie,X0o),e(n2,z0o),e(n2,LN),e(LN,Q0o),e(n2,W0o),e(G,H0o),e(G,s2),e(s2,gie),e(gie,U0o),e(s2,J0o),e(s2,xN),e(xN,Y0o),e(s2,K0o),e(G,Z0o),e(G,l2),e(l2,hie),e(hie,eyo),e(l2,oyo),e(l2,kN),e(kN,ryo),e(l2,tyo),e(G,ayo),e(G,i2),e(i2,pie),e(pie,nyo),e(i2,syo),e(i2,SN),e(SN,lyo),e(i2,iyo),e(G,dyo),e(G,d2),e(d2,_ie),e(_ie,cyo),e(d2,fyo),e(d2,RN),e(RN,myo),e(d2,gyo),e(G,hyo),e(G,c2),e(c2,uie),e(uie,pyo),e(c2,_yo),e(c2,BN),e(BN,uyo),e(c2,byo),e(G,vyo),e(G,f2),e(f2,bie),e(bie,Fyo),e(f2,Tyo),e(f2,PN),e(PN,Myo),e(f2,Eyo),e(G,Cyo),e(G,m2),e(m2,vie),e(vie,wyo),e(m2,Ayo),e(m2,$N),e($N,yyo),e(m2,Lyo),e(G,xyo),e(G,g2),e(g2,Fie),e(Fie,kyo),e(g2,Syo),e(g2,IN),e(IN,Ryo),e(g2,Byo),e(G,Pyo),e(G,h2),e(h2,Tie),e(Tie,$yo),e(h2,Iyo),e(h2,qN),e(qN,qyo),e(h2,Nyo),e(G,jyo),e(G,p2),e(p2,Mie),e(Mie,Dyo),e(p2,Gyo),e(p2,NN),e(NN,Oyo),e(p2,Vyo),e(G,Xyo),e(G,_2),e(_2,Eie),e(Eie,zyo),e(_2,Qyo),e(_2,jN),e(jN,Wyo),e(_2,Hyo),e(G,Uyo),e(G,u2),e(u2,Cie),e(Cie,Jyo),e(u2,Yyo),e(u2,DN),e(DN,Kyo),e(u2,Zyo),e(G,eLo),e(G,b2),e(b2,wie),e(wie,oLo),e(b2,rLo),e(b2,GN),e(GN,tLo),e(b2,aLo),e(G,nLo),e(G,v2),e(v2,Aie),e(Aie,sLo),e(v2,lLo),e(v2,ON),e(ON,iLo),e(v2,dLo),e(G,cLo),e(G,F2),e(F2,yie),e(yie,fLo),e(F2,mLo),e(F2,VN),e(VN,gLo),e(F2,hLo),e(G,pLo),e(G,T2),e(T2,Lie),e(Lie,_Lo),e(T2,uLo),e(T2,XN),e(XN,bLo),e(T2,vLo),e(G,FLo),e(G,M2),e(M2,xie),e(xie,TLo),e(M2,MLo),e(M2,zN),e(zN,ELo),e(M2,CLo),e(G,wLo),e(G,E2),e(E2,kie),e(kie,ALo),e(E2,yLo),e(E2,QN),e(QN,LLo),e(E2,xLo),e(G,kLo),e(G,C2),e(C2,Sie),e(Sie,SLo),e(C2,RLo),e(C2,WN),e(WN,BLo),e(C2,PLo),e(G,$Lo),e(G,w2),e(w2,Rie),e(Rie,ILo),e(w2,qLo),e(w2,HN),e(HN,NLo),e(w2,jLo),e(G,DLo),e(G,A2),e(A2,Bie),e(Bie,GLo),e(A2,OLo),e(A2,UN),e(UN,VLo),e(A2,XLo),e(G,zLo),e(G,y2),e(y2,Pie),e(Pie,QLo),e(y2,WLo),e(y2,JN),e(JN,HLo),e(y2,ULo),e(G,JLo),e(G,L2),e(L2,$ie),e($ie,YLo),e(L2,KLo),e(L2,YN),e(YN,ZLo),e(L2,e7o),e(G,o7o),e(G,x2),e(x2,Iie),e(Iie,r7o),e(x2,t7o),e(x2,KN),e(KN,a7o),e(x2,n7o),e(G,s7o),e(G,k2),e(k2,qie),e(qie,l7o),e(k2,i7o),e(k2,ZN),e(ZN,d7o),e(k2,c7o),e(Ve,f7o),e(Ve,S2),e(S2,m7o),e(S2,Nie),e(Nie,g7o),e(S2,h7o),e(S2,jie),e(jie,p7o),e(Ve,_7o),e(Ve,Die),e(Die,u7o),e(Ve,b7o),g(eC,Ve,null),b(c,JRe,u),b(c,bd,u),e(bd,R2),e(R2,Gie),g(oC,Gie,null),e(bd,v7o),e(bd,Oie),e(Oie,F7o),b(c,YRe,u),b(c,tr,u),g(rC,tr,null),e(tr,T7o),e(tr,vd),e(vd,M7o),e(vd,ej),e(ej,E7o),e(vd,C7o),e(vd,oj),e(oj,w7o),e(vd,A7o),e(tr,y7o),e(tr,tC),e(tC,L7o),e(tC,Vie),e(Vie,x7o),e(tC,k7o),e(tr,S7o),e(tr,Yr),g(aC,Yr,null),e(Yr,R7o),e(Yr,Xie),e(Xie,B7o),e(Yr,P7o),e(Yr,Fd),e(Fd,$7o),e(Fd,zie),e(zie,I7o),e(Fd,q7o),e(Fd,rj),e(rj,N7o),e(Fd,j7o),e(Yr,D7o),e(Yr,Qie),e(Qie,G7o),e(Yr,O7o),g(nC,Yr,null),e(tr,V7o),e(tr,Xe),g(sC,Xe,null),e(Xe,X7o),e(Xe,Wie),e(Wie,z7o),e(Xe,Q7o),e(Xe,Ya),e(Ya,W7o),e(Ya,Hie),e(Hie,H7o),e(Ya,U7o),e(Ya,Uie),e(Uie,J7o),e(Ya,Y7o),e(Ya,Jie),e(Jie,K7o),e(Ya,Z7o),e(Xe,exo),e(Xe,da),e(da,B2),e(B2,Yie),e(Yie,oxo),e(B2,rxo),e(B2,tj),e(tj,txo),e(B2,axo),e(da,nxo),e(da,P2),e(P2,Kie),e(Kie,sxo),e(P2,lxo),e(P2,aj),e(aj,ixo),e(P2,dxo),e(da,cxo),e(da,$2),e($2,Zie),e(Zie,fxo),e($2,mxo),e($2,nj),e(nj,gxo),e($2,hxo),e(da,pxo),e(da,I2),e(I2,ede),e(ede,_xo),e(I2,uxo),e(I2,sj),e(sj,bxo),e(I2,vxo),e(da,Fxo),e(da,q2),e(q2,ode),e(ode,Txo),e(q2,Mxo),e(q2,lj),e(lj,Exo),e(q2,Cxo),e(Xe,wxo),e(Xe,N2),e(N2,Axo),e(N2,rde),e(rde,yxo),e(N2,Lxo),e(N2,tde),e(tde,xxo),e(Xe,kxo),e(Xe,ade),e(ade,Sxo),e(Xe,Rxo),g(lC,Xe,null),b(c,KRe,u),b(c,Td,u),e(Td,j2),e(j2,nde),g(iC,nde,null),e(Td,Bxo),e(Td,sde),e(sde,Pxo),b(c,ZRe,u),b(c,ar,u),g(dC,ar,null),e(ar,$xo),e(ar,Md),e(Md,Ixo),e(Md,ij),e(ij,qxo),e(Md,Nxo),e(Md,dj),e(dj,jxo),e(Md,Dxo),e(ar,Gxo),e(ar,cC),e(cC,Oxo),e(cC,lde),e(lde,Vxo),e(cC,Xxo),e(ar,zxo),e(ar,Kr),g(fC,Kr,null),e(Kr,Qxo),e(Kr,ide),e(ide,Wxo),e(Kr,Hxo),e(Kr,Ed),e(Ed,Uxo),e(Ed,dde),e(dde,Jxo),e(Ed,Yxo),e(Ed,cj),e(cj,Kxo),e(Ed,Zxo),e(Kr,eko),e(Kr,cde),e(cde,oko),e(Kr,rko),g(mC,Kr,null),e(ar,tko),e(ar,ze),g(gC,ze,null),e(ze,ako),e(ze,fde),e(fde,nko),e(ze,sko),e(ze,Ka),e(Ka,lko),e(Ka,mde),e(mde,iko),e(Ka,dko),e(Ka,gde),e(gde,cko),e(Ka,fko),e(Ka,hde),e(hde,mko),e(Ka,gko),e(ze,hko),e(ze,N),e(N,D2),e(D2,pde),e(pde,pko),e(D2,_ko),e(D2,fj),e(fj,uko),e(D2,bko),e(N,vko),e(N,G2),e(G2,_de),e(_de,Fko),e(G2,Tko),e(G2,mj),e(mj,Mko),e(G2,Eko),e(N,Cko),e(N,O2),e(O2,ude),e(ude,wko),e(O2,Ako),e(O2,gj),e(gj,yko),e(O2,Lko),e(N,xko),e(N,V2),e(V2,bde),e(bde,kko),e(V2,Sko),e(V2,hj),e(hj,Rko),e(V2,Bko),e(N,Pko),e(N,X2),e(X2,vde),e(vde,$ko),e(X2,Iko),e(X2,pj),e(pj,qko),e(X2,Nko),e(N,jko),e(N,z2),e(z2,Fde),e(Fde,Dko),e(z2,Gko),e(z2,_j),e(_j,Oko),e(z2,Vko),e(N,Xko),e(N,Q2),e(Q2,Tde),e(Tde,zko),e(Q2,Qko),e(Q2,uj),e(uj,Wko),e(Q2,Hko),e(N,Uko),e(N,W2),e(W2,Mde),e(Mde,Jko),e(W2,Yko),e(W2,bj),e(bj,Kko),e(W2,Zko),e(N,eSo),e(N,H2),e(H2,Ede),e(Ede,oSo),e(H2,rSo),e(H2,vj),e(vj,tSo),e(H2,aSo),e(N,nSo),e(N,U2),e(U2,Cde),e(Cde,sSo),e(U2,lSo),e(U2,Fj),e(Fj,iSo),e(U2,dSo),e(N,cSo),e(N,J2),e(J2,wde),e(wde,fSo),e(J2,mSo),e(J2,Tj),e(Tj,gSo),e(J2,hSo),e(N,pSo),e(N,Y2),e(Y2,Ade),e(Ade,_So),e(Y2,uSo),e(Y2,Mj),e(Mj,bSo),e(Y2,vSo),e(N,FSo),e(N,K2),e(K2,yde),e(yde,TSo),e(K2,MSo),e(K2,Ej),e(Ej,ESo),e(K2,CSo),e(N,wSo),e(N,Z2),e(Z2,Lde),e(Lde,ASo),e(Z2,ySo),e(Z2,Cj),e(Cj,LSo),e(Z2,xSo),e(N,kSo),e(N,e3),e(e3,xde),e(xde,SSo),e(e3,RSo),e(e3,wj),e(wj,BSo),e(e3,PSo),e(N,$So),e(N,o3),e(o3,kde),e(kde,ISo),e(o3,qSo),e(o3,Aj),e(Aj,NSo),e(o3,jSo),e(N,DSo),e(N,r3),e(r3,Sde),e(Sde,GSo),e(r3,OSo),e(r3,yj),e(yj,VSo),e(r3,XSo),e(N,zSo),e(N,t3),e(t3,Rde),e(Rde,QSo),e(t3,WSo),e(t3,Lj),e(Lj,HSo),e(t3,USo),e(N,JSo),e(N,a3),e(a3,Bde),e(Bde,YSo),e(a3,KSo),e(a3,xj),e(xj,ZSo),e(a3,eRo),e(N,oRo),e(N,n3),e(n3,Pde),e(Pde,rRo),e(n3,tRo),e(n3,kj),e(kj,aRo),e(n3,nRo),e(N,sRo),e(N,s3),e(s3,$de),e($de,lRo),e(s3,iRo),e(s3,Sj),e(Sj,dRo),e(s3,cRo),e(N,fRo),e(N,l3),e(l3,Ide),e(Ide,mRo),e(l3,gRo),e(l3,Rj),e(Rj,hRo),e(l3,pRo),e(N,_Ro),e(N,i3),e(i3,qde),e(qde,uRo),e(i3,bRo),e(i3,Bj),e(Bj,vRo),e(i3,FRo),e(N,TRo),e(N,d3),e(d3,Nde),e(Nde,MRo),e(d3,ERo),e(d3,Pj),e(Pj,CRo),e(d3,wRo),e(N,ARo),e(N,c3),e(c3,jde),e(jde,yRo),e(c3,LRo),e(c3,$j),e($j,xRo),e(c3,kRo),e(N,SRo),e(N,f3),e(f3,Dde),e(Dde,RRo),e(f3,BRo),e(f3,Ij),e(Ij,PRo),e(f3,$Ro),e(N,IRo),e(N,m3),e(m3,Gde),e(Gde,qRo),e(m3,NRo),e(m3,qj),e(qj,jRo),e(m3,DRo),e(N,GRo),e(N,g3),e(g3,Ode),e(Ode,ORo),e(g3,VRo),e(g3,Nj),e(Nj,XRo),e(g3,zRo),e(N,QRo),e(N,h3),e(h3,Vde),e(Vde,WRo),e(h3,HRo),e(h3,jj),e(jj,URo),e(h3,JRo),e(N,YRo),e(N,p3),e(p3,Xde),e(Xde,KRo),e(p3,ZRo),e(p3,Dj),e(Dj,eBo),e(p3,oBo),e(N,rBo),e(N,_3),e(_3,zde),e(zde,tBo),e(_3,aBo),e(_3,Gj),e(Gj,nBo),e(_3,sBo),e(N,lBo),e(N,u3),e(u3,Qde),e(Qde,iBo),e(u3,dBo),e(u3,Oj),e(Oj,cBo),e(u3,fBo),e(N,mBo),e(N,b3),e(b3,Wde),e(Wde,gBo),e(b3,hBo),e(b3,Vj),e(Vj,pBo),e(b3,_Bo),e(ze,uBo),e(ze,v3),e(v3,bBo),e(v3,Hde),e(Hde,vBo),e(v3,FBo),e(v3,Ude),e(Ude,TBo),e(ze,MBo),e(ze,Jde),e(Jde,EBo),e(ze,CBo),g(hC,ze,null),b(c,eBe,u),b(c,Cd,u),e(Cd,F3),e(F3,Yde),g(pC,Yde,null),e(Cd,wBo),e(Cd,Kde),e(Kde,ABo),b(c,oBe,u),b(c,nr,u),g(_C,nr,null),e(nr,yBo),e(nr,wd),e(wd,LBo),e(wd,Xj),e(Xj,xBo),e(wd,kBo),e(wd,zj),e(zj,SBo),e(wd,RBo),e(nr,BBo),e(nr,uC),e(uC,PBo),e(uC,Zde),e(Zde,$Bo),e(uC,IBo),e(nr,qBo),e(nr,Zr),g(bC,Zr,null),e(Zr,NBo),e(Zr,ece),e(ece,jBo),e(Zr,DBo),e(Zr,Ad),e(Ad,GBo),e(Ad,oce),e(oce,OBo),e(Ad,VBo),e(Ad,Qj),e(Qj,XBo),e(Ad,zBo),e(Zr,QBo),e(Zr,rce),e(rce,WBo),e(Zr,HBo),g(vC,Zr,null),e(nr,UBo),e(nr,Qe),g(FC,Qe,null),e(Qe,JBo),e(Qe,tce),e(tce,YBo),e(Qe,KBo),e(Qe,Za),e(Za,ZBo),e(Za,ace),e(ace,ePo),e(Za,oPo),e(Za,nce),e(nce,rPo),e(Za,tPo),e(Za,sce),e(sce,aPo),e(Za,nPo),e(Qe,sPo),e(Qe,S),e(S,T3),e(T3,lce),e(lce,lPo),e(T3,iPo),e(T3,Wj),e(Wj,dPo),e(T3,cPo),e(S,fPo),e(S,M3),e(M3,ice),e(ice,mPo),e(M3,gPo),e(M3,Hj),e(Hj,hPo),e(M3,pPo),e(S,_Po),e(S,E3),e(E3,dce),e(dce,uPo),e(E3,bPo),e(E3,Uj),e(Uj,vPo),e(E3,FPo),e(S,TPo),e(S,C3),e(C3,cce),e(cce,MPo),e(C3,EPo),e(C3,Jj),e(Jj,CPo),e(C3,wPo),e(S,APo),e(S,w3),e(w3,fce),e(fce,yPo),e(w3,LPo),e(w3,Yj),e(Yj,xPo),e(w3,kPo),e(S,SPo),e(S,A3),e(A3,mce),e(mce,RPo),e(A3,BPo),e(A3,Kj),e(Kj,PPo),e(A3,$Po),e(S,IPo),e(S,y3),e(y3,gce),e(gce,qPo),e(y3,NPo),e(y3,Zj),e(Zj,jPo),e(y3,DPo),e(S,GPo),e(S,L3),e(L3,hce),e(hce,OPo),e(L3,VPo),e(L3,eD),e(eD,XPo),e(L3,zPo),e(S,QPo),e(S,x3),e(x3,pce),e(pce,WPo),e(x3,HPo),e(x3,oD),e(oD,UPo),e(x3,JPo),e(S,YPo),e(S,k3),e(k3,_ce),e(_ce,KPo),e(k3,ZPo),e(k3,rD),e(rD,e$o),e(k3,o$o),e(S,r$o),e(S,S3),e(S3,uce),e(uce,t$o),e(S3,a$o),e(S3,tD),e(tD,n$o),e(S3,s$o),e(S,l$o),e(S,R3),e(R3,bce),e(bce,i$o),e(R3,d$o),e(R3,aD),e(aD,c$o),e(R3,f$o),e(S,m$o),e(S,B3),e(B3,vce),e(vce,g$o),e(B3,h$o),e(B3,nD),e(nD,p$o),e(B3,_$o),e(S,u$o),e(S,P3),e(P3,Fce),e(Fce,b$o),e(P3,v$o),e(P3,sD),e(sD,F$o),e(P3,T$o),e(S,M$o),e(S,$3),e($3,Tce),e(Tce,E$o),e($3,C$o),e($3,lD),e(lD,w$o),e($3,A$o),e(S,y$o),e(S,I3),e(I3,Mce),e(Mce,L$o),e(I3,x$o),e(I3,iD),e(iD,k$o),e(I3,S$o),e(S,R$o),e(S,q3),e(q3,Ece),e(Ece,B$o),e(q3,P$o),e(q3,dD),e(dD,$$o),e(q3,I$o),e(S,q$o),e(S,N3),e(N3,Cce),e(Cce,N$o),e(N3,j$o),e(N3,cD),e(cD,D$o),e(N3,G$o),e(S,O$o),e(S,j3),e(j3,wce),e(wce,V$o),e(j3,X$o),e(j3,fD),e(fD,z$o),e(j3,Q$o),e(S,W$o),e(S,D3),e(D3,Ace),e(Ace,H$o),e(D3,U$o),e(D3,mD),e(mD,J$o),e(D3,Y$o),e(S,K$o),e(S,G3),e(G3,yce),e(yce,Z$o),e(G3,eIo),e(G3,gD),e(gD,oIo),e(G3,rIo),e(S,tIo),e(S,O3),e(O3,Lce),e(Lce,aIo),e(O3,nIo),e(O3,hD),e(hD,sIo),e(O3,lIo),e(S,iIo),e(S,V3),e(V3,xce),e(xce,dIo),e(V3,cIo),e(V3,pD),e(pD,fIo),e(V3,mIo),e(S,gIo),e(S,X3),e(X3,kce),e(kce,hIo),e(X3,pIo),e(X3,_D),e(_D,_Io),e(X3,uIo),e(S,bIo),e(S,z3),e(z3,Sce),e(Sce,vIo),e(z3,FIo),e(z3,uD),e(uD,TIo),e(z3,MIo),e(S,EIo),e(S,Q3),e(Q3,Rce),e(Rce,CIo),e(Q3,wIo),e(Q3,bD),e(bD,AIo),e(Q3,yIo),e(S,LIo),e(S,W3),e(W3,Bce),e(Bce,xIo),e(W3,kIo),e(W3,vD),e(vD,SIo),e(W3,RIo),e(S,BIo),e(S,H3),e(H3,Pce),e(Pce,PIo),e(H3,$Io),e(H3,FD),e(FD,IIo),e(H3,qIo),e(S,NIo),e(S,U3),e(U3,$ce),e($ce,jIo),e(U3,DIo),e(U3,TD),e(TD,GIo),e(U3,OIo),e(S,VIo),e(S,J3),e(J3,Ice),e(Ice,XIo),e(J3,zIo),e(J3,MD),e(MD,QIo),e(J3,WIo),e(S,HIo),e(S,Y3),e(Y3,qce),e(qce,UIo),e(Y3,JIo),e(Y3,ED),e(ED,YIo),e(Y3,KIo),e(S,ZIo),e(S,K3),e(K3,Nce),e(Nce,eqo),e(K3,oqo),e(K3,CD),e(CD,rqo),e(K3,tqo),e(S,aqo),e(S,Z3),e(Z3,jce),e(jce,nqo),e(Z3,sqo),e(Z3,wD),e(wD,lqo),e(Z3,iqo),e(S,dqo),e(S,e6),e(e6,Dce),e(Dce,cqo),e(e6,fqo),e(e6,AD),e(AD,mqo),e(e6,gqo),e(S,hqo),e(S,o6),e(o6,Gce),e(Gce,pqo),e(o6,_qo),e(o6,yD),e(yD,uqo),e(o6,bqo),e(S,vqo),e(S,r6),e(r6,Oce),e(Oce,Fqo),e(r6,Tqo),e(r6,LD),e(LD,Mqo),e(r6,Eqo),e(S,Cqo),e(S,t6),e(t6,Vce),e(Vce,wqo),e(t6,Aqo),e(t6,xD),e(xD,yqo),e(t6,Lqo),e(S,xqo),e(S,a6),e(a6,Xce),e(Xce,kqo),e(a6,Sqo),e(a6,kD),e(kD,Rqo),e(a6,Bqo),e(S,Pqo),e(S,n6),e(n6,zce),e(zce,$qo),e(n6,Iqo),e(n6,SD),e(SD,qqo),e(n6,Nqo),e(Qe,jqo),e(Qe,s6),e(s6,Dqo),e(s6,Qce),e(Qce,Gqo),e(s6,Oqo),e(s6,Wce),e(Wce,Vqo),e(Qe,Xqo),e(Qe,Hce),e(Hce,zqo),e(Qe,Qqo),g(TC,Qe,null),b(c,rBe,u),b(c,yd,u),e(yd,l6),e(l6,Uce),g(MC,Uce,null),e(yd,Wqo),e(yd,Jce),e(Jce,Hqo),b(c,tBe,u),b(c,sr,u),g(EC,sr,null),e(sr,Uqo),e(sr,Ld),e(Ld,Jqo),e(Ld,RD),e(RD,Yqo),e(Ld,Kqo),e(Ld,BD),e(BD,Zqo),e(Ld,eNo),e(sr,oNo),e(sr,CC),e(CC,rNo),e(CC,Yce),e(Yce,tNo),e(CC,aNo),e(sr,nNo),e(sr,et),g(wC,et,null),e(et,sNo),e(et,Kce),e(Kce,lNo),e(et,iNo),e(et,xd),e(xd,dNo),e(xd,Zce),e(Zce,cNo),e(xd,fNo),e(xd,PD),e(PD,mNo),e(xd,gNo),e(et,hNo),e(et,efe),e(efe,pNo),e(et,_No),g(AC,et,null),e(sr,uNo),e(sr,We),g(yC,We,null),e(We,bNo),e(We,ofe),e(ofe,vNo),e(We,FNo),e(We,en),e(en,TNo),e(en,rfe),e(rfe,MNo),e(en,ENo),e(en,tfe),e(tfe,CNo),e(en,wNo),e(en,afe),e(afe,ANo),e(en,yNo),e(We,LNo),e(We,nfe),e(nfe,i6),e(i6,sfe),e(sfe,xNo),e(i6,kNo),e(i6,$D),e($D,SNo),e(i6,RNo),e(We,BNo),e(We,d6),e(d6,PNo),e(d6,lfe),e(lfe,$No),e(d6,INo),e(d6,ife),e(ife,qNo),e(We,NNo),e(We,dfe),e(dfe,jNo),e(We,DNo),g(LC,We,null),b(c,aBe,u),b(c,kd,u),e(kd,c6),e(c6,cfe),g(xC,cfe,null),e(kd,GNo),e(kd,ffe),e(ffe,ONo),b(c,nBe,u),b(c,lr,u),g(kC,lr,null),e(lr,VNo),e(lr,Sd),e(Sd,XNo),e(Sd,ID),e(ID,zNo),e(Sd,QNo),e(Sd,qD),e(qD,WNo),e(Sd,HNo),e(lr,UNo),e(lr,SC),e(SC,JNo),e(SC,mfe),e(mfe,YNo),e(SC,KNo),e(lr,ZNo),e(lr,ot),g(RC,ot,null),e(ot,ejo),e(ot,gfe),e(gfe,ojo),e(ot,rjo),e(ot,Rd),e(Rd,tjo),e(Rd,hfe),e(hfe,ajo),e(Rd,njo),e(Rd,ND),e(ND,sjo),e(Rd,ljo),e(ot,ijo),e(ot,pfe),e(pfe,djo),e(ot,cjo),g(BC,ot,null),e(lr,fjo),e(lr,He),g(PC,He,null),e(He,mjo),e(He,_fe),e(_fe,gjo),e(He,hjo),e(He,on),e(on,pjo),e(on,ufe),e(ufe,_jo),e(on,ujo),e(on,bfe),e(bfe,bjo),e(on,vjo),e(on,vfe),e(vfe,Fjo),e(on,Tjo),e(He,Mjo),e(He,de),e(de,f6),e(f6,Ffe),e(Ffe,Ejo),e(f6,Cjo),e(f6,jD),e(jD,wjo),e(f6,Ajo),e(de,yjo),e(de,m6),e(m6,Tfe),e(Tfe,Ljo),e(m6,xjo),e(m6,DD),e(DD,kjo),e(m6,Sjo),e(de,Rjo),e(de,g6),e(g6,Mfe),e(Mfe,Bjo),e(g6,Pjo),e(g6,GD),e(GD,$jo),e(g6,Ijo),e(de,qjo),e(de,Gs),e(Gs,Efe),e(Efe,Njo),e(Gs,jjo),e(Gs,OD),e(OD,Djo),e(Gs,Gjo),e(Gs,VD),e(VD,Ojo),e(Gs,Vjo),e(de,Xjo),e(de,h6),e(h6,Cfe),e(Cfe,zjo),e(h6,Qjo),e(h6,XD),e(XD,Wjo),e(h6,Hjo),e(de,Ujo),e(de,ma),e(ma,wfe),e(wfe,Jjo),e(ma,Yjo),e(ma,zD),e(zD,Kjo),e(ma,Zjo),e(ma,QD),e(QD,eDo),e(ma,oDo),e(ma,WD),e(WD,rDo),e(ma,tDo),e(de,aDo),e(de,p6),e(p6,Afe),e(Afe,nDo),e(p6,sDo),e(p6,HD),e(HD,lDo),e(p6,iDo),e(de,dDo),e(de,_6),e(_6,yfe),e(yfe,cDo),e(_6,fDo),e(_6,UD),e(UD,mDo),e(_6,gDo),e(de,hDo),e(de,u6),e(u6,Lfe),e(Lfe,pDo),e(u6,_Do),e(u6,JD),e(JD,uDo),e(u6,bDo),e(de,vDo),e(de,b6),e(b6,xfe),e(xfe,FDo),e(b6,TDo),e(b6,YD),e(YD,MDo),e(b6,EDo),e(de,CDo),e(de,v6),e(v6,kfe),e(kfe,wDo),e(v6,ADo),e(v6,KD),e(KD,yDo),e(v6,LDo),e(de,xDo),e(de,F6),e(F6,Sfe),e(Sfe,kDo),e(F6,SDo),e(F6,ZD),e(ZD,RDo),e(F6,BDo),e(de,PDo),e(de,T6),e(T6,Rfe),e(Rfe,$Do),e(T6,IDo),e(T6,eG),e(eG,qDo),e(T6,NDo),e(He,jDo),e(He,M6),e(M6,DDo),e(M6,Bfe),e(Bfe,GDo),e(M6,ODo),e(M6,Pfe),e(Pfe,VDo),e(He,XDo),e(He,$fe),e($fe,zDo),e(He,QDo),g($C,He,null),b(c,sBe,u),b(c,Bd,u),e(Bd,E6),e(E6,Ife),g(IC,Ife,null),e(Bd,WDo),e(Bd,qfe),e(qfe,HDo),b(c,lBe,u),b(c,ir,u),g(qC,ir,null),e(ir,UDo),e(ir,Pd),e(Pd,JDo),e(Pd,oG),e(oG,YDo),e(Pd,KDo),e(Pd,rG),e(rG,ZDo),e(Pd,eGo),e(ir,oGo),e(ir,NC),e(NC,rGo),e(NC,Nfe),e(Nfe,tGo),e(NC,aGo),e(ir,nGo),e(ir,rt),g(jC,rt,null),e(rt,sGo),e(rt,jfe),e(jfe,lGo),e(rt,iGo),e(rt,$d),e($d,dGo),e($d,Dfe),e(Dfe,cGo),e($d,fGo),e($d,tG),e(tG,mGo),e($d,gGo),e(rt,hGo),e(rt,Gfe),e(Gfe,pGo),e(rt,_Go),g(DC,rt,null),e(ir,uGo),e(ir,Ue),g(GC,Ue,null),e(Ue,bGo),e(Ue,Ofe),e(Ofe,vGo),e(Ue,FGo),e(Ue,rn),e(rn,TGo),e(rn,Vfe),e(Vfe,MGo),e(rn,EGo),e(rn,Xfe),e(Xfe,CGo),e(rn,wGo),e(rn,zfe),e(zfe,AGo),e(rn,yGo),e(Ue,LGo),e(Ue,Qfe),e(Qfe,C6),e(C6,Wfe),e(Wfe,xGo),e(C6,kGo),e(C6,aG),e(aG,SGo),e(C6,RGo),e(Ue,BGo),e(Ue,w6),e(w6,PGo),e(w6,Hfe),e(Hfe,$Go),e(w6,IGo),e(w6,Ufe),e(Ufe,qGo),e(Ue,NGo),e(Ue,Jfe),e(Jfe,jGo),e(Ue,DGo),g(OC,Ue,null),b(c,iBe,u),b(c,Id,u),e(Id,A6),e(A6,Yfe),g(VC,Yfe,null),e(Id,GGo),e(Id,Kfe),e(Kfe,OGo),b(c,dBe,u),b(c,dr,u),g(XC,dr,null),e(dr,VGo),e(dr,qd),e(qd,XGo),e(qd,nG),e(nG,zGo),e(qd,QGo),e(qd,sG),e(sG,WGo),e(qd,HGo),e(dr,UGo),e(dr,zC),e(zC,JGo),e(zC,Zfe),e(Zfe,YGo),e(zC,KGo),e(dr,ZGo),e(dr,tt),g(QC,tt,null),e(tt,eOo),e(tt,eme),e(eme,oOo),e(tt,rOo),e(tt,Nd),e(Nd,tOo),e(Nd,ome),e(ome,aOo),e(Nd,nOo),e(Nd,lG),e(lG,sOo),e(Nd,lOo),e(tt,iOo),e(tt,rme),e(rme,dOo),e(tt,cOo),g(WC,tt,null),e(dr,fOo),e(dr,Je),g(HC,Je,null),e(Je,mOo),e(Je,tme),e(tme,gOo),e(Je,hOo),e(Je,tn),e(tn,pOo),e(tn,ame),e(ame,_Oo),e(tn,uOo),e(tn,nme),e(nme,bOo),e(tn,vOo),e(tn,sme),e(sme,FOo),e(tn,TOo),e(Je,MOo),e(Je,Se),e(Se,y6),e(y6,lme),e(lme,EOo),e(y6,COo),e(y6,iG),e(iG,wOo),e(y6,AOo),e(Se,yOo),e(Se,L6),e(L6,ime),e(ime,LOo),e(L6,xOo),e(L6,dG),e(dG,kOo),e(L6,SOo),e(Se,ROo),e(Se,x6),e(x6,dme),e(dme,BOo),e(x6,POo),e(x6,cG),e(cG,$Oo),e(x6,IOo),e(Se,qOo),e(Se,k6),e(k6,cme),e(cme,NOo),e(k6,jOo),e(k6,fG),e(fG,DOo),e(k6,GOo),e(Se,OOo),e(Se,S6),e(S6,fme),e(fme,VOo),e(S6,XOo),e(S6,mG),e(mG,zOo),e(S6,QOo),e(Se,WOo),e(Se,R6),e(R6,mme),e(mme,HOo),e(R6,UOo),e(R6,gG),e(gG,JOo),e(R6,YOo),e(Se,KOo),e(Se,B6),e(B6,gme),e(gme,ZOo),e(B6,eVo),e(B6,hG),e(hG,oVo),e(B6,rVo),e(Se,tVo),e(Se,P6),e(P6,hme),e(hme,aVo),e(P6,nVo),e(P6,pG),e(pG,sVo),e(P6,lVo),e(Je,iVo),e(Je,$6),e($6,dVo),e($6,pme),e(pme,cVo),e($6,fVo),e($6,_me),e(_me,mVo),e(Je,gVo),e(Je,ume),e(ume,hVo),e(Je,pVo),g(UC,Je,null),b(c,cBe,u),b(c,jd,u),e(jd,I6),e(I6,bme),g(JC,bme,null),e(jd,_Vo),e(jd,vme),e(vme,uVo),b(c,fBe,u),b(c,cr,u),g(YC,cr,null),e(cr,bVo),e(cr,Dd),e(Dd,vVo),e(Dd,_G),e(_G,FVo),e(Dd,TVo),e(Dd,uG),e(uG,MVo),e(Dd,EVo),e(cr,CVo),e(cr,KC),e(KC,wVo),e(KC,Fme),e(Fme,AVo),e(KC,yVo),e(cr,LVo),e(cr,at),g(ZC,at,null),e(at,xVo),e(at,Tme),e(Tme,kVo),e(at,SVo),e(at,Gd),e(Gd,RVo),e(Gd,Mme),e(Mme,BVo),e(Gd,PVo),e(Gd,bG),e(bG,$Vo),e(Gd,IVo),e(at,qVo),e(at,Eme),e(Eme,NVo),e(at,jVo),g(ew,at,null),e(cr,DVo),e(cr,Ye),g(ow,Ye,null),e(Ye,GVo),e(Ye,Cme),e(Cme,OVo),e(Ye,VVo),e(Ye,an),e(an,XVo),e(an,wme),e(wme,zVo),e(an,QVo),e(an,Ame),e(Ame,WVo),e(an,HVo),e(an,yme),e(yme,UVo),e(an,JVo),e(Ye,YVo),e(Ye,nn),e(nn,q6),e(q6,Lme),e(Lme,KVo),e(q6,ZVo),e(q6,vG),e(vG,eXo),e(q6,oXo),e(nn,rXo),e(nn,N6),e(N6,xme),e(xme,tXo),e(N6,aXo),e(N6,FG),e(FG,nXo),e(N6,sXo),e(nn,lXo),e(nn,j6),e(j6,kme),e(kme,iXo),e(j6,dXo),e(j6,TG),e(TG,cXo),e(j6,fXo),e(nn,mXo),e(nn,D6),e(D6,Sme),e(Sme,gXo),e(D6,hXo),e(D6,MG),e(MG,pXo),e(D6,_Xo),e(Ye,uXo),e(Ye,G6),e(G6,bXo),e(G6,Rme),e(Rme,vXo),e(G6,FXo),e(G6,Bme),e(Bme,TXo),e(Ye,MXo),e(Ye,Pme),e(Pme,EXo),e(Ye,CXo),g(rw,Ye,null),b(c,mBe,u),b(c,Od,u),e(Od,O6),e(O6,$me),g(tw,$me,null),e(Od,wXo),e(Od,Ime),e(Ime,AXo),b(c,gBe,u),b(c,fr,u),g(aw,fr,null),e(fr,yXo),e(fr,Vd),e(Vd,LXo),e(Vd,EG),e(EG,xXo),e(Vd,kXo),e(Vd,CG),e(CG,SXo),e(Vd,RXo),e(fr,BXo),e(fr,nw),e(nw,PXo),e(nw,qme),e(qme,$Xo),e(nw,IXo),e(fr,qXo),e(fr,nt),g(sw,nt,null),e(nt,NXo),e(nt,Nme),e(Nme,jXo),e(nt,DXo),e(nt,Xd),e(Xd,GXo),e(Xd,jme),e(jme,OXo),e(Xd,VXo),e(Xd,wG),e(wG,XXo),e(Xd,zXo),e(nt,QXo),e(nt,Dme),e(Dme,WXo),e(nt,HXo),g(lw,nt,null),e(fr,UXo),e(fr,Ke),g(iw,Ke,null),e(Ke,JXo),e(Ke,Gme),e(Gme,YXo),e(Ke,KXo),e(Ke,sn),e(sn,ZXo),e(sn,Ome),e(Ome,ezo),e(sn,ozo),e(sn,Vme),e(Vme,rzo),e(sn,tzo),e(sn,Xme),e(Xme,azo),e(sn,nzo),e(Ke,szo),e(Ke,Re),e(Re,V6),e(V6,zme),e(zme,lzo),e(V6,izo),e(V6,AG),e(AG,dzo),e(V6,czo),e(Re,fzo),e(Re,X6),e(X6,Qme),e(Qme,mzo),e(X6,gzo),e(X6,yG),e(yG,hzo),e(X6,pzo),e(Re,_zo),e(Re,z6),e(z6,Wme),e(Wme,uzo),e(z6,bzo),e(z6,LG),e(LG,vzo),e(z6,Fzo),e(Re,Tzo),e(Re,Q6),e(Q6,Hme),e(Hme,Mzo),e(Q6,Ezo),e(Q6,xG),e(xG,Czo),e(Q6,wzo),e(Re,Azo),e(Re,W6),e(W6,Ume),e(Ume,yzo),e(W6,Lzo),e(W6,kG),e(kG,xzo),e(W6,kzo),e(Re,Szo),e(Re,H6),e(H6,Jme),e(Jme,Rzo),e(H6,Bzo),e(H6,SG),e(SG,Pzo),e(H6,$zo),e(Re,Izo),e(Re,U6),e(U6,Yme),e(Yme,qzo),e(U6,Nzo),e(U6,RG),e(RG,jzo),e(U6,Dzo),e(Re,Gzo),e(Re,J6),e(J6,Kme),e(Kme,Ozo),e(J6,Vzo),e(J6,BG),e(BG,Xzo),e(J6,zzo),e(Ke,Qzo),e(Ke,Y6),e(Y6,Wzo),e(Y6,Zme),e(Zme,Hzo),e(Y6,Uzo),e(Y6,ege),e(ege,Jzo),e(Ke,Yzo),e(Ke,oge),e(oge,Kzo),e(Ke,Zzo),g(dw,Ke,null),b(c,hBe,u),b(c,zd,u),e(zd,K6),e(K6,rge),g(cw,rge,null),e(zd,eQo),e(zd,tge),e(tge,oQo),b(c,pBe,u),b(c,mr,u),g(fw,mr,null),e(mr,rQo),e(mr,Qd),e(Qd,tQo),e(Qd,PG),e(PG,aQo),e(Qd,nQo),e(Qd,$G),e($G,sQo),e(Qd,lQo),e(mr,iQo),e(mr,mw),e(mw,dQo),e(mw,age),e(age,cQo),e(mw,fQo),e(mr,mQo),e(mr,st),g(gw,st,null),e(st,gQo),e(st,nge),e(nge,hQo),e(st,pQo),e(st,Wd),e(Wd,_Qo),e(Wd,sge),e(sge,uQo),e(Wd,bQo),e(Wd,IG),e(IG,vQo),e(Wd,FQo),e(st,TQo),e(st,lge),e(lge,MQo),e(st,EQo),g(hw,st,null),e(mr,CQo),e(mr,Ze),g(pw,Ze,null),e(Ze,wQo),e(Ze,ige),e(ige,AQo),e(Ze,yQo),e(Ze,ln),e(ln,LQo),e(ln,dge),e(dge,xQo),e(ln,kQo),e(ln,cge),e(cge,SQo),e(ln,RQo),e(ln,fge),e(fge,BQo),e(ln,PQo),e(Ze,$Qo),e(Ze,_w),e(_w,Z6),e(Z6,mge),e(mge,IQo),e(Z6,qQo),e(Z6,qG),e(qG,NQo),e(Z6,jQo),e(_w,DQo),e(_w,ev),e(ev,gge),e(gge,GQo),e(ev,OQo),e(ev,NG),e(NG,VQo),e(ev,XQo),e(Ze,zQo),e(Ze,ov),e(ov,QQo),e(ov,hge),e(hge,WQo),e(ov,HQo),e(ov,pge),e(pge,UQo),e(Ze,JQo),e(Ze,_ge),e(_ge,YQo),e(Ze,KQo),g(uw,Ze,null),b(c,_Be,u),b(c,Hd,u),e(Hd,rv),e(rv,uge),g(bw,uge,null),e(Hd,ZQo),e(Hd,bge),e(bge,eWo),b(c,uBe,u),b(c,gr,u),g(vw,gr,null),e(gr,oWo),e(gr,Ud),e(Ud,rWo),e(Ud,jG),e(jG,tWo),e(Ud,aWo),e(Ud,DG),e(DG,nWo),e(Ud,sWo),e(gr,lWo),e(gr,Fw),e(Fw,iWo),e(Fw,vge),e(vge,dWo),e(Fw,cWo),e(gr,fWo),e(gr,lt),g(Tw,lt,null),e(lt,mWo),e(lt,Fge),e(Fge,gWo),e(lt,hWo),e(lt,Jd),e(Jd,pWo),e(Jd,Tge),e(Tge,_Wo),e(Jd,uWo),e(Jd,GG),e(GG,bWo),e(Jd,vWo),e(lt,FWo),e(lt,Mge),e(Mge,TWo),e(lt,MWo),g(Mw,lt,null),e(gr,EWo),e(gr,eo),g(Ew,eo,null),e(eo,CWo),e(eo,Ege),e(Ege,wWo),e(eo,AWo),e(eo,dn),e(dn,yWo),e(dn,Cge),e(Cge,LWo),e(dn,xWo),e(dn,wge),e(wge,kWo),e(dn,SWo),e(dn,Age),e(Age,RWo),e(dn,BWo),e(eo,PWo),e(eo,cn),e(cn,tv),e(tv,yge),e(yge,$Wo),e(tv,IWo),e(tv,OG),e(OG,qWo),e(tv,NWo),e(cn,jWo),e(cn,av),e(av,Lge),e(Lge,DWo),e(av,GWo),e(av,VG),e(VG,OWo),e(av,VWo),e(cn,XWo),e(cn,nv),e(nv,xge),e(xge,zWo),e(nv,QWo),e(nv,XG),e(XG,WWo),e(nv,HWo),e(cn,UWo),e(cn,sv),e(sv,kge),e(kge,JWo),e(sv,YWo),e(sv,zG),e(zG,KWo),e(sv,ZWo),e(eo,eHo),e(eo,lv),e(lv,oHo),e(lv,Sge),e(Sge,rHo),e(lv,tHo),e(lv,Rge),e(Rge,aHo),e(eo,nHo),e(eo,Bge),e(Bge,sHo),e(eo,lHo),g(Cw,eo,null),b(c,bBe,u),b(c,Yd,u),e(Yd,iv),e(iv,Pge),g(ww,Pge,null),e(Yd,iHo),e(Yd,$ge),e($ge,dHo),b(c,vBe,u),b(c,hr,u),g(Aw,hr,null),e(hr,cHo),e(hr,Kd),e(Kd,fHo),e(Kd,QG),e(QG,mHo),e(Kd,gHo),e(Kd,WG),e(WG,hHo),e(Kd,pHo),e(hr,_Ho),e(hr,yw),e(yw,uHo),e(yw,Ige),e(Ige,bHo),e(yw,vHo),e(hr,FHo),e(hr,it),g(Lw,it,null),e(it,THo),e(it,qge),e(qge,MHo),e(it,EHo),e(it,Zd),e(Zd,CHo),e(Zd,Nge),e(Nge,wHo),e(Zd,AHo),e(Zd,HG),e(HG,yHo),e(Zd,LHo),e(it,xHo),e(it,jge),e(jge,kHo),e(it,SHo),g(xw,it,null),e(hr,RHo),e(hr,oo),g(kw,oo,null),e(oo,BHo),e(oo,Dge),e(Dge,PHo),e(oo,$Ho),e(oo,fn),e(fn,IHo),e(fn,Gge),e(Gge,qHo),e(fn,NHo),e(fn,Oge),e(Oge,jHo),e(fn,DHo),e(fn,Vge),e(Vge,GHo),e(fn,OHo),e(oo,VHo),e(oo,ec),e(ec,dv),e(dv,Xge),e(Xge,XHo),e(dv,zHo),e(dv,UG),e(UG,QHo),e(dv,WHo),e(ec,HHo),e(ec,cv),e(cv,zge),e(zge,UHo),e(cv,JHo),e(cv,JG),e(JG,YHo),e(cv,KHo),e(ec,ZHo),e(ec,fv),e(fv,Qge),e(Qge,eUo),e(fv,oUo),e(fv,YG),e(YG,rUo),e(fv,tUo),e(oo,aUo),e(oo,mv),e(mv,nUo),e(mv,Wge),e(Wge,sUo),e(mv,lUo),e(mv,Hge),e(Hge,iUo),e(oo,dUo),e(oo,Uge),e(Uge,cUo),e(oo,fUo),g(Sw,oo,null),b(c,FBe,u),b(c,oc,u),e(oc,gv),e(gv,Jge),g(Rw,Jge,null),e(oc,mUo),e(oc,Yge),e(Yge,gUo),b(c,TBe,u),b(c,pr,u),g(Bw,pr,null),e(pr,hUo),e(pr,rc),e(rc,pUo),e(rc,KG),e(KG,_Uo),e(rc,uUo),e(rc,ZG),e(ZG,bUo),e(rc,vUo),e(pr,FUo),e(pr,Pw),e(Pw,TUo),e(Pw,Kge),e(Kge,MUo),e(Pw,EUo),e(pr,CUo),e(pr,dt),g($w,dt,null),e(dt,wUo),e(dt,Zge),e(Zge,AUo),e(dt,yUo),e(dt,tc),e(tc,LUo),e(tc,ehe),e(ehe,xUo),e(tc,kUo),e(tc,eO),e(eO,SUo),e(tc,RUo),e(dt,BUo),e(dt,ohe),e(ohe,PUo),e(dt,$Uo),g(Iw,dt,null),e(pr,IUo),e(pr,ro),g(qw,ro,null),e(ro,qUo),e(ro,rhe),e(rhe,NUo),e(ro,jUo),e(ro,mn),e(mn,DUo),e(mn,the),e(the,GUo),e(mn,OUo),e(mn,ahe),e(ahe,VUo),e(mn,XUo),e(mn,nhe),e(nhe,zUo),e(mn,QUo),e(ro,WUo),e(ro,she),e(she,hv),e(hv,lhe),e(lhe,HUo),e(hv,UUo),e(hv,oO),e(oO,JUo),e(hv,YUo),e(ro,KUo),e(ro,pv),e(pv,ZUo),e(pv,ihe),e(ihe,eJo),e(pv,oJo),e(pv,dhe),e(dhe,rJo),e(ro,tJo),e(ro,che),e(che,aJo),e(ro,nJo),g(Nw,ro,null),b(c,MBe,u),b(c,ac,u),e(ac,_v),e(_v,fhe),g(jw,fhe,null),e(ac,sJo),e(ac,mhe),e(mhe,lJo),b(c,EBe,u),b(c,_r,u),g(Dw,_r,null),e(_r,iJo),e(_r,nc),e(nc,dJo),e(nc,rO),e(rO,cJo),e(nc,fJo),e(nc,tO),e(tO,mJo),e(nc,gJo),e(_r,hJo),e(_r,Gw),e(Gw,pJo),e(Gw,ghe),e(ghe,_Jo),e(Gw,uJo),e(_r,bJo),e(_r,ct),g(Ow,ct,null),e(ct,vJo),e(ct,hhe),e(hhe,FJo),e(ct,TJo),e(ct,sc),e(sc,MJo),e(sc,phe),e(phe,EJo),e(sc,CJo),e(sc,aO),e(aO,wJo),e(sc,AJo),e(ct,yJo),e(ct,_he),e(_he,LJo),e(ct,xJo),g(Vw,ct,null),e(_r,kJo),e(_r,to),g(Xw,to,null),e(to,SJo),e(to,uhe),e(uhe,RJo),e(to,BJo),e(to,gn),e(gn,PJo),e(gn,bhe),e(bhe,$Jo),e(gn,IJo),e(gn,vhe),e(vhe,qJo),e(gn,NJo),e(gn,Fhe),e(Fhe,jJo),e(gn,DJo),e(to,GJo),e(to,The),e(The,uv),e(uv,Mhe),e(Mhe,OJo),e(uv,VJo),e(uv,nO),e(nO,XJo),e(uv,zJo),e(to,QJo),e(to,bv),e(bv,WJo),e(bv,Ehe),e(Ehe,HJo),e(bv,UJo),e(bv,Che),e(Che,JJo),e(to,YJo),e(to,whe),e(whe,KJo),e(to,ZJo),g(zw,to,null),b(c,CBe,u),b(c,lc,u),e(lc,vv),e(vv,Ahe),g(Qw,Ahe,null),e(lc,eYo),e(lc,yhe),e(yhe,oYo),b(c,wBe,u),b(c,ur,u),g(Ww,ur,null),e(ur,rYo),e(ur,ic),e(ic,tYo),e(ic,sO),e(sO,aYo),e(ic,nYo),e(ic,lO),e(lO,sYo),e(ic,lYo),e(ur,iYo),e(ur,Hw),e(Hw,dYo),e(Hw,Lhe),e(Lhe,cYo),e(Hw,fYo),e(ur,mYo),e(ur,ft),g(Uw,ft,null),e(ft,gYo),e(ft,xhe),e(xhe,hYo),e(ft,pYo),e(ft,dc),e(dc,_Yo),e(dc,khe),e(khe,uYo),e(dc,bYo),e(dc,iO),e(iO,vYo),e(dc,FYo),e(ft,TYo),e(ft,She),e(She,MYo),e(ft,EYo),g(Jw,ft,null),e(ur,CYo),e(ur,ao),g(Yw,ao,null),e(ao,wYo),e(ao,Rhe),e(Rhe,AYo),e(ao,yYo),e(ao,hn),e(hn,LYo),e(hn,Bhe),e(Bhe,xYo),e(hn,kYo),e(hn,Phe),e(Phe,SYo),e(hn,RYo),e(hn,$he),e($he,BYo),e(hn,PYo),e(ao,$Yo),e(ao,pn),e(pn,Fv),e(Fv,Ihe),e(Ihe,IYo),e(Fv,qYo),e(Fv,dO),e(dO,NYo),e(Fv,jYo),e(pn,DYo),e(pn,Tv),e(Tv,qhe),e(qhe,GYo),e(Tv,OYo),e(Tv,cO),e(cO,VYo),e(Tv,XYo),e(pn,zYo),e(pn,Mv),e(Mv,Nhe),e(Nhe,QYo),e(Mv,WYo),e(Mv,fO),e(fO,HYo),e(Mv,UYo),e(pn,JYo),e(pn,Ev),e(Ev,jhe),e(jhe,YYo),e(Ev,KYo),e(Ev,mO),e(mO,ZYo),e(Ev,eKo),e(ao,oKo),e(ao,Cv),e(Cv,rKo),e(Cv,Dhe),e(Dhe,tKo),e(Cv,aKo),e(Cv,Ghe),e(Ghe,nKo),e(ao,sKo),e(ao,Ohe),e(Ohe,lKo),e(ao,iKo),g(Kw,ao,null),b(c,ABe,u),b(c,cc,u),e(cc,wv),e(wv,Vhe),g(Zw,Vhe,null),e(cc,dKo),e(cc,Xhe),e(Xhe,cKo),b(c,yBe,u),b(c,br,u),g(eA,br,null),e(br,fKo),e(br,fc),e(fc,mKo),e(fc,gO),e(gO,gKo),e(fc,hKo),e(fc,hO),e(hO,pKo),e(fc,_Ko),e(br,uKo),e(br,oA),e(oA,bKo),e(oA,zhe),e(zhe,vKo),e(oA,FKo),e(br,TKo),e(br,mt),g(rA,mt,null),e(mt,MKo),e(mt,Qhe),e(Qhe,EKo),e(mt,CKo),e(mt,mc),e(mc,wKo),e(mc,Whe),e(Whe,AKo),e(mc,yKo),e(mc,pO),e(pO,LKo),e(mc,xKo),e(mt,kKo),e(mt,Hhe),e(Hhe,SKo),e(mt,RKo),g(tA,mt,null),e(br,BKo),e(br,no),g(aA,no,null),e(no,PKo),e(no,Uhe),e(Uhe,$Ko),e(no,IKo),e(no,_n),e(_n,qKo),e(_n,Jhe),e(Jhe,NKo),e(_n,jKo),e(_n,Yhe),e(Yhe,DKo),e(_n,GKo),e(_n,Khe),e(Khe,OKo),e(_n,VKo),e(no,XKo),e(no,Zhe),e(Zhe,Av),e(Av,epe),e(epe,zKo),e(Av,QKo),e(Av,_O),e(_O,WKo),e(Av,HKo),e(no,UKo),e(no,yv),e(yv,JKo),e(yv,ope),e(ope,YKo),e(yv,KKo),e(yv,rpe),e(rpe,ZKo),e(no,eZo),e(no,tpe),e(tpe,oZo),e(no,rZo),g(nA,no,null),b(c,LBe,u),b(c,gc,u),e(gc,Lv),e(Lv,ape),g(sA,ape,null),e(gc,tZo),e(gc,npe),e(npe,aZo),b(c,xBe,u),b(c,vr,u),g(lA,vr,null),e(vr,nZo),e(vr,hc),e(hc,sZo),e(hc,uO),e(uO,lZo),e(hc,iZo),e(hc,bO),e(bO,dZo),e(hc,cZo),e(vr,fZo),e(vr,iA),e(iA,mZo),e(iA,spe),e(spe,gZo),e(iA,hZo),e(vr,pZo),e(vr,gt),g(dA,gt,null),e(gt,_Zo),e(gt,lpe),e(lpe,uZo),e(gt,bZo),e(gt,pc),e(pc,vZo),e(pc,ipe),e(ipe,FZo),e(pc,TZo),e(pc,vO),e(vO,MZo),e(pc,EZo),e(gt,CZo),e(gt,dpe),e(dpe,wZo),e(gt,AZo),g(cA,gt,null),e(vr,yZo),e(vr,ho),g(fA,ho,null),e(ho,LZo),e(ho,cpe),e(cpe,xZo),e(ho,kZo),e(ho,un),e(un,SZo),e(un,fpe),e(fpe,RZo),e(un,BZo),e(un,mpe),e(mpe,PZo),e(un,$Zo),e(un,gpe),e(gpe,IZo),e(un,qZo),e(ho,NZo),e(ho,x),e(x,xv),e(xv,hpe),e(hpe,jZo),e(xv,DZo),e(xv,FO),e(FO,GZo),e(xv,OZo),e(x,VZo),e(x,kv),e(kv,ppe),e(ppe,XZo),e(kv,zZo),e(kv,TO),e(TO,QZo),e(kv,WZo),e(x,HZo),e(x,Sv),e(Sv,_pe),e(_pe,UZo),e(Sv,JZo),e(Sv,MO),e(MO,YZo),e(Sv,KZo),e(x,ZZo),e(x,Rv),e(Rv,upe),e(upe,eer),e(Rv,oer),e(Rv,EO),e(EO,rer),e(Rv,ter),e(x,aer),e(x,Bv),e(Bv,bpe),e(bpe,ner),e(Bv,ser),e(Bv,CO),e(CO,ler),e(Bv,ier),e(x,der),e(x,Pv),e(Pv,vpe),e(vpe,cer),e(Pv,fer),e(Pv,wO),e(wO,mer),e(Pv,ger),e(x,her),e(x,$v),e($v,Fpe),e(Fpe,per),e($v,_er),e($v,AO),e(AO,uer),e($v,ber),e(x,ver),e(x,Iv),e(Iv,Tpe),e(Tpe,Fer),e(Iv,Ter),e(Iv,yO),e(yO,Mer),e(Iv,Eer),e(x,Cer),e(x,qv),e(qv,Mpe),e(Mpe,wer),e(qv,Aer),e(qv,LO),e(LO,yer),e(qv,Ler),e(x,xer),e(x,Nv),e(Nv,Epe),e(Epe,ker),e(Nv,Ser),e(Nv,xO),e(xO,Rer),e(Nv,Ber),e(x,Per),e(x,jv),e(jv,Cpe),e(Cpe,$er),e(jv,Ier),e(jv,kO),e(kO,qer),e(jv,Ner),e(x,jer),e(x,Dv),e(Dv,wpe),e(wpe,Der),e(Dv,Ger),e(Dv,SO),e(SO,Oer),e(Dv,Ver),e(x,Xer),e(x,Gv),e(Gv,Ape),e(Ape,zer),e(Gv,Qer),e(Gv,RO),e(RO,Wer),e(Gv,Her),e(x,Uer),e(x,Ov),e(Ov,ype),e(ype,Jer),e(Ov,Yer),e(Ov,BO),e(BO,Ker),e(Ov,Zer),e(x,eor),e(x,Vv),e(Vv,Lpe),e(Lpe,oor),e(Vv,ror),e(Vv,PO),e(PO,tor),e(Vv,aor),e(x,nor),e(x,Xv),e(Xv,xpe),e(xpe,sor),e(Xv,lor),e(Xv,$O),e($O,ior),e(Xv,dor),e(x,cor),e(x,Os),e(Os,kpe),e(kpe,mor),e(Os,gor),e(Os,IO),e(IO,hor),e(Os,por),e(Os,qO),e(qO,_or),e(Os,uor),e(x,bor),e(x,zv),e(zv,Spe),e(Spe,vor),e(zv,For),e(zv,NO),e(NO,Tor),e(zv,Mor),e(x,Eor),e(x,Qv),e(Qv,Rpe),e(Rpe,Cor),e(Qv,wor),e(Qv,jO),e(jO,Aor),e(Qv,yor),e(x,Lor),e(x,Wv),e(Wv,Bpe),e(Bpe,xor),e(Wv,kor),e(Wv,DO),e(DO,Sor),e(Wv,Ror),e(x,Bor),e(x,Hv),e(Hv,Ppe),e(Ppe,Por),e(Hv,$or),e(Hv,GO),e(GO,Ior),e(Hv,qor),e(x,Nor),e(x,Uv),e(Uv,$pe),e($pe,jor),e(Uv,Dor),e(Uv,OO),e(OO,Gor),e(Uv,Oor),e(x,Vor),e(x,Jv),e(Jv,Ipe),e(Ipe,Xor),e(Jv,zor),e(Jv,VO),e(VO,Qor),e(Jv,Wor),e(x,Hor),e(x,Yv),e(Yv,qpe),e(qpe,Uor),e(Yv,Jor),e(Yv,XO),e(XO,Yor),e(Yv,Kor),e(x,Zor),e(x,Kv),e(Kv,Npe),e(Npe,err),e(Kv,orr),e(Kv,zO),e(zO,rrr),e(Kv,trr),e(x,arr),e(x,Zv),e(Zv,jpe),e(jpe,nrr),e(Zv,srr),e(Zv,QO),e(QO,lrr),e(Zv,irr),e(x,drr),e(x,eF),e(eF,Dpe),e(Dpe,crr),e(eF,frr),e(eF,WO),e(WO,mrr),e(eF,grr),e(x,hrr),e(x,oF),e(oF,Gpe),e(Gpe,prr),e(oF,_rr),e(oF,HO),e(HO,urr),e(oF,brr),e(x,vrr),e(x,rF),e(rF,Ope),e(Ope,Frr),e(rF,Trr),e(rF,UO),e(UO,Mrr),e(rF,Err),e(x,Crr),e(x,tF),e(tF,Vpe),e(Vpe,wrr),e(tF,Arr),e(tF,JO),e(JO,yrr),e(tF,Lrr),e(x,xrr),e(x,aF),e(aF,Xpe),e(Xpe,krr),e(aF,Srr),e(aF,YO),e(YO,Rrr),e(aF,Brr),e(x,Prr),e(x,nF),e(nF,zpe),e(zpe,$rr),e(nF,Irr),e(nF,KO),e(KO,qrr),e(nF,Nrr),e(x,jrr),e(x,sF),e(sF,Qpe),e(Qpe,Drr),e(sF,Grr),e(sF,ZO),e(ZO,Orr),e(sF,Vrr),e(x,Xrr),e(x,lF),e(lF,Wpe),e(Wpe,zrr),e(lF,Qrr),e(lF,eV),e(eV,Wrr),e(lF,Hrr),e(x,Urr),e(x,iF),e(iF,Hpe),e(Hpe,Jrr),e(iF,Yrr),e(iF,oV),e(oV,Krr),e(iF,Zrr),e(x,etr),e(x,dF),e(dF,Upe),e(Upe,otr),e(dF,rtr),e(dF,rV),e(rV,ttr),e(dF,atr),e(x,ntr),e(x,cF),e(cF,Jpe),e(Jpe,str),e(cF,ltr),e(cF,tV),e(tV,itr),e(cF,dtr),e(x,ctr),e(x,fF),e(fF,Ype),e(Ype,ftr),e(fF,mtr),e(fF,aV),e(aV,gtr),e(fF,htr),e(x,ptr),e(x,mF),e(mF,Kpe),e(Kpe,_tr),e(mF,utr),e(mF,nV),e(nV,btr),e(mF,vtr),e(x,Ftr),e(x,gF),e(gF,Zpe),e(Zpe,Ttr),e(gF,Mtr),e(gF,sV),e(sV,Etr),e(gF,Ctr),e(x,wtr),e(x,hF),e(hF,e_e),e(e_e,Atr),e(hF,ytr),e(hF,lV),e(lV,Ltr),e(hF,xtr),e(x,ktr),e(x,pF),e(pF,o_e),e(o_e,Str),e(pF,Rtr),e(pF,iV),e(iV,Btr),e(pF,Ptr),e(x,$tr),e(x,_F),e(_F,r_e),e(r_e,Itr),e(_F,qtr),e(_F,dV),e(dV,Ntr),e(_F,jtr),e(x,Dtr),e(x,uF),e(uF,t_e),e(t_e,Gtr),e(uF,Otr),e(uF,cV),e(cV,Vtr),e(uF,Xtr),e(ho,ztr),e(ho,a_e),e(a_e,Qtr),e(ho,Wtr),g(mA,ho,null),b(c,kBe,u),b(c,_c,u),e(_c,bF),e(bF,n_e),g(gA,n_e,null),e(_c,Htr),e(_c,s_e),e(s_e,Utr),b(c,SBe,u),b(c,Fr,u),g(hA,Fr,null),e(Fr,Jtr),e(Fr,uc),e(uc,Ytr),e(uc,fV),e(fV,Ktr),e(uc,Ztr),e(uc,mV),e(mV,ear),e(uc,oar),e(Fr,rar),e(Fr,pA),e(pA,tar),e(pA,l_e),e(l_e,aar),e(pA,nar),e(Fr,sar),e(Fr,ht),g(_A,ht,null),e(ht,lar),e(ht,i_e),e(i_e,iar),e(ht,dar),e(ht,bc),e(bc,car),e(bc,d_e),e(d_e,far),e(bc,mar),e(bc,gV),e(gV,gar),e(bc,har),e(ht,par),e(ht,c_e),e(c_e,_ar),e(ht,uar),g(uA,ht,null),e(Fr,bar),e(Fr,po),g(bA,po,null),e(po,Far),e(po,f_e),e(f_e,Tar),e(po,Mar),e(po,bn),e(bn,Ear),e(bn,m_e),e(m_e,Car),e(bn,war),e(bn,g_e),e(g_e,Aar),e(bn,yar),e(bn,h_e),e(h_e,Lar),e(bn,xar),e(po,kar),e(po,H),e(H,vF),e(vF,p_e),e(p_e,Sar),e(vF,Rar),e(vF,hV),e(hV,Bar),e(vF,Par),e(H,$ar),e(H,FF),e(FF,__e),e(__e,Iar),e(FF,qar),e(FF,pV),e(pV,Nar),e(FF,jar),e(H,Dar),e(H,TF),e(TF,u_e),e(u_e,Gar),e(TF,Oar),e(TF,_V),e(_V,Var),e(TF,Xar),e(H,zar),e(H,MF),e(MF,b_e),e(b_e,Qar),e(MF,War),e(MF,uV),e(uV,Har),e(MF,Uar),e(H,Jar),e(H,EF),e(EF,v_e),e(v_e,Yar),e(EF,Kar),e(EF,bV),e(bV,Zar),e(EF,enr),e(H,onr),e(H,CF),e(CF,F_e),e(F_e,rnr),e(CF,tnr),e(CF,vV),e(vV,anr),e(CF,nnr),e(H,snr),e(H,wF),e(wF,T_e),e(T_e,lnr),e(wF,inr),e(wF,FV),e(FV,dnr),e(wF,cnr),e(H,fnr),e(H,AF),e(AF,M_e),e(M_e,mnr),e(AF,gnr),e(AF,TV),e(TV,hnr),e(AF,pnr),e(H,_nr),e(H,yF),e(yF,E_e),e(E_e,unr),e(yF,bnr),e(yF,MV),e(MV,vnr),e(yF,Fnr),e(H,Tnr),e(H,LF),e(LF,C_e),e(C_e,Mnr),e(LF,Enr),e(LF,EV),e(EV,Cnr),e(LF,wnr),e(H,Anr),e(H,xF),e(xF,w_e),e(w_e,ynr),e(xF,Lnr),e(xF,CV),e(CV,xnr),e(xF,knr),e(H,Snr),e(H,kF),e(kF,A_e),e(A_e,Rnr),e(kF,Bnr),e(kF,wV),e(wV,Pnr),e(kF,$nr),e(H,Inr),e(H,SF),e(SF,y_e),e(y_e,qnr),e(SF,Nnr),e(SF,AV),e(AV,jnr),e(SF,Dnr),e(H,Gnr),e(H,RF),e(RF,L_e),e(L_e,Onr),e(RF,Vnr),e(RF,yV),e(yV,Xnr),e(RF,znr),e(H,Qnr),e(H,BF),e(BF,x_e),e(x_e,Wnr),e(BF,Hnr),e(BF,LV),e(LV,Unr),e(BF,Jnr),e(H,Ynr),e(H,PF),e(PF,k_e),e(k_e,Knr),e(PF,Znr),e(PF,xV),e(xV,esr),e(PF,osr),e(H,rsr),e(H,$F),e($F,S_e),e(S_e,tsr),e($F,asr),e($F,kV),e(kV,nsr),e($F,ssr),e(H,lsr),e(H,IF),e(IF,R_e),e(R_e,isr),e(IF,dsr),e(IF,SV),e(SV,csr),e(IF,fsr),e(H,msr),e(H,qF),e(qF,B_e),e(B_e,gsr),e(qF,hsr),e(qF,RV),e(RV,psr),e(qF,_sr),e(H,usr),e(H,NF),e(NF,P_e),e(P_e,bsr),e(NF,vsr),e(NF,BV),e(BV,Fsr),e(NF,Tsr),e(H,Msr),e(H,jF),e(jF,$_e),e($_e,Esr),e(jF,Csr),e(jF,PV),e(PV,wsr),e(jF,Asr),e(H,ysr),e(H,DF),e(DF,I_e),e(I_e,Lsr),e(DF,xsr),e(DF,$V),e($V,ksr),e(DF,Ssr),e(H,Rsr),e(H,GF),e(GF,q_e),e(q_e,Bsr),e(GF,Psr),e(GF,IV),e(IV,$sr),e(GF,Isr),e(po,qsr),e(po,N_e),e(N_e,Nsr),e(po,jsr),g(vA,po,null),b(c,RBe,u),b(c,vc,u),e(vc,OF),e(OF,j_e),g(FA,j_e,null),e(vc,Dsr),e(vc,D_e),e(D_e,Gsr),b(c,BBe,u),b(c,Tr,u),g(TA,Tr,null),e(Tr,Osr),e(Tr,Fc),e(Fc,Vsr),e(Fc,qV),e(qV,Xsr),e(Fc,zsr),e(Fc,NV),e(NV,Qsr),e(Fc,Wsr),e(Tr,Hsr),e(Tr,MA),e(MA,Usr),e(MA,G_e),e(G_e,Jsr),e(MA,Ysr),e(Tr,Ksr),e(Tr,pt),g(EA,pt,null),e(pt,Zsr),e(pt,O_e),e(O_e,elr),e(pt,olr),e(pt,Tc),e(Tc,rlr),e(Tc,V_e),e(V_e,tlr),e(Tc,alr),e(Tc,jV),e(jV,nlr),e(Tc,slr),e(pt,llr),e(pt,X_e),e(X_e,ilr),e(pt,dlr),g(CA,pt,null),e(Tr,clr),e(Tr,_o),g(wA,_o,null),e(_o,flr),e(_o,z_e),e(z_e,mlr),e(_o,glr),e(_o,vn),e(vn,hlr),e(vn,Q_e),e(Q_e,plr),e(vn,_lr),e(vn,W_e),e(W_e,ulr),e(vn,blr),e(vn,H_e),e(H_e,vlr),e(vn,Flr),e(_o,Tlr),e(_o,fe),e(fe,VF),e(VF,U_e),e(U_e,Mlr),e(VF,Elr),e(VF,DV),e(DV,Clr),e(VF,wlr),e(fe,Alr),e(fe,XF),e(XF,J_e),e(J_e,ylr),e(XF,Llr),e(XF,GV),e(GV,xlr),e(XF,klr),e(fe,Slr),e(fe,zF),e(zF,Y_e),e(Y_e,Rlr),e(zF,Blr),e(zF,OV),e(OV,Plr),e(zF,$lr),e(fe,Ilr),e(fe,QF),e(QF,K_e),e(K_e,qlr),e(QF,Nlr),e(QF,VV),e(VV,jlr),e(QF,Dlr),e(fe,Glr),e(fe,WF),e(WF,Z_e),e(Z_e,Olr),e(WF,Vlr),e(WF,XV),e(XV,Xlr),e(WF,zlr),e(fe,Qlr),e(fe,HF),e(HF,eue),e(eue,Wlr),e(HF,Hlr),e(HF,zV),e(zV,Ulr),e(HF,Jlr),e(fe,Ylr),e(fe,UF),e(UF,oue),e(oue,Klr),e(UF,Zlr),e(UF,QV),e(QV,eir),e(UF,oir),e(fe,rir),e(fe,JF),e(JF,rue),e(rue,tir),e(JF,air),e(JF,WV),e(WV,nir),e(JF,sir),e(fe,lir),e(fe,YF),e(YF,tue),e(tue,iir),e(YF,dir),e(YF,HV),e(HV,cir),e(YF,fir),e(fe,mir),e(fe,KF),e(KF,aue),e(aue,gir),e(KF,hir),e(KF,UV),e(UV,pir),e(KF,_ir),e(fe,uir),e(fe,ZF),e(ZF,nue),e(nue,bir),e(ZF,vir),e(ZF,JV),e(JV,Fir),e(ZF,Tir),e(fe,Mir),e(fe,eT),e(eT,sue),e(sue,Eir),e(eT,Cir),e(eT,YV),e(YV,wir),e(eT,Air),e(_o,yir),e(_o,lue),e(lue,Lir),e(_o,xir),g(AA,_o,null),b(c,PBe,u),b(c,Mc,u),e(Mc,oT),e(oT,iue),g(yA,iue,null),e(Mc,kir),e(Mc,due),e(due,Sir),b(c,$Be,u),b(c,Mr,u),g(LA,Mr,null),e(Mr,Rir),e(Mr,Ec),e(Ec,Bir),e(Ec,KV),e(KV,Pir),e(Ec,$ir),e(Ec,ZV),e(ZV,Iir),e(Ec,qir),e(Mr,Nir),e(Mr,xA),e(xA,jir),e(xA,cue),e(cue,Dir),e(xA,Gir),e(Mr,Oir),e(Mr,_t),g(kA,_t,null),e(_t,Vir),e(_t,fue),e(fue,Xir),e(_t,zir),e(_t,Cc),e(Cc,Qir),e(Cc,mue),e(mue,Wir),e(Cc,Hir),e(Cc,eX),e(eX,Uir),e(Cc,Jir),e(_t,Yir),e(_t,gue),e(gue,Kir),e(_t,Zir),g(SA,_t,null),e(Mr,edr),e(Mr,uo),g(RA,uo,null),e(uo,odr),e(uo,hue),e(hue,rdr),e(uo,tdr),e(uo,Fn),e(Fn,adr),e(Fn,pue),e(pue,ndr),e(Fn,sdr),e(Fn,_ue),e(_ue,ldr),e(Fn,idr),e(Fn,uue),e(uue,ddr),e(Fn,cdr),e(uo,fdr),e(uo,BA),e(BA,rT),e(rT,bue),e(bue,mdr),e(rT,gdr),e(rT,oX),e(oX,hdr),e(rT,pdr),e(BA,_dr),e(BA,tT),e(tT,vue),e(vue,udr),e(tT,bdr),e(tT,rX),e(rX,vdr),e(tT,Fdr),e(uo,Tdr),e(uo,Fue),e(Fue,Mdr),e(uo,Edr),g(PA,uo,null),b(c,IBe,u),b(c,wc,u),e(wc,aT),e(aT,Tue),g($A,Tue,null),e(wc,Cdr),e(wc,Mue),e(Mue,wdr),b(c,qBe,u),b(c,Er,u),g(IA,Er,null),e(Er,Adr),e(Er,Ac),e(Ac,ydr),e(Ac,tX),e(tX,Ldr),e(Ac,xdr),e(Ac,aX),e(aX,kdr),e(Ac,Sdr),e(Er,Rdr),e(Er,qA),e(qA,Bdr),e(qA,Eue),e(Eue,Pdr),e(qA,$dr),e(Er,Idr),e(Er,ut),g(NA,ut,null),e(ut,qdr),e(ut,Cue),e(Cue,Ndr),e(ut,jdr),e(ut,yc),e(yc,Ddr),e(yc,wue),e(wue,Gdr),e(yc,Odr),e(yc,nX),e(nX,Vdr),e(yc,Xdr),e(ut,zdr),e(ut,Aue),e(Aue,Qdr),e(ut,Wdr),g(jA,ut,null),e(Er,Hdr),e(Er,bo),g(DA,bo,null),e(bo,Udr),e(bo,yue),e(yue,Jdr),e(bo,Ydr),e(bo,Tn),e(Tn,Kdr),e(Tn,Lue),e(Lue,Zdr),e(Tn,ecr),e(Tn,xue),e(xue,ocr),e(Tn,rcr),e(Tn,kue),e(kue,tcr),e(Tn,acr),e(bo,ncr),e(bo,J),e(J,nT),e(nT,Sue),e(Sue,scr),e(nT,lcr),e(nT,sX),e(sX,icr),e(nT,dcr),e(J,ccr),e(J,sT),e(sT,Rue),e(Rue,fcr),e(sT,mcr),e(sT,lX),e(lX,gcr),e(sT,hcr),e(J,pcr),e(J,lT),e(lT,Bue),e(Bue,_cr),e(lT,ucr),e(lT,iX),e(iX,bcr),e(lT,vcr),e(J,Fcr),e(J,iT),e(iT,Pue),e(Pue,Tcr),e(iT,Mcr),e(iT,dX),e(dX,Ecr),e(iT,Ccr),e(J,wcr),e(J,dT),e(dT,$ue),e($ue,Acr),e(dT,ycr),e(dT,cX),e(cX,Lcr),e(dT,xcr),e(J,kcr),e(J,cT),e(cT,Iue),e(Iue,Scr),e(cT,Rcr),e(cT,fX),e(fX,Bcr),e(cT,Pcr),e(J,$cr),e(J,fT),e(fT,que),e(que,Icr),e(fT,qcr),e(fT,mX),e(mX,Ncr),e(fT,jcr),e(J,Dcr),e(J,mT),e(mT,Nue),e(Nue,Gcr),e(mT,Ocr),e(mT,gX),e(gX,Vcr),e(mT,Xcr),e(J,zcr),e(J,gT),e(gT,jue),e(jue,Qcr),e(gT,Wcr),e(gT,hX),e(hX,Hcr),e(gT,Ucr),e(J,Jcr),e(J,hT),e(hT,Due),e(Due,Ycr),e(hT,Kcr),e(hT,pX),e(pX,Zcr),e(hT,efr),e(J,ofr),e(J,pT),e(pT,Gue),e(Gue,rfr),e(pT,tfr),e(pT,_X),e(_X,afr),e(pT,nfr),e(J,sfr),e(J,_T),e(_T,Oue),e(Oue,lfr),e(_T,ifr),e(_T,uX),e(uX,dfr),e(_T,cfr),e(J,ffr),e(J,uT),e(uT,Vue),e(Vue,mfr),e(uT,gfr),e(uT,bX),e(bX,hfr),e(uT,pfr),e(J,_fr),e(J,bT),e(bT,Xue),e(Xue,ufr),e(bT,bfr),e(bT,vX),e(vX,vfr),e(bT,Ffr),e(J,Tfr),e(J,vT),e(vT,zue),e(zue,Mfr),e(vT,Efr),e(vT,FX),e(FX,Cfr),e(vT,wfr),e(J,Afr),e(J,FT),e(FT,Que),e(Que,yfr),e(FT,Lfr),e(FT,TX),e(TX,xfr),e(FT,kfr),e(J,Sfr),e(J,TT),e(TT,Wue),e(Wue,Rfr),e(TT,Bfr),e(TT,MX),e(MX,Pfr),e(TT,$fr),e(J,Ifr),e(J,MT),e(MT,Hue),e(Hue,qfr),e(MT,Nfr),e(MT,EX),e(EX,jfr),e(MT,Dfr),e(J,Gfr),e(J,ET),e(ET,Uue),e(Uue,Ofr),e(ET,Vfr),e(ET,CX),e(CX,Xfr),e(ET,zfr),e(J,Qfr),e(J,CT),e(CT,Jue),e(Jue,Wfr),e(CT,Hfr),e(CT,wX),e(wX,Ufr),e(CT,Jfr),e(bo,Yfr),e(bo,Yue),e(Yue,Kfr),e(bo,Zfr),g(GA,bo,null),b(c,NBe,u),b(c,Lc,u),e(Lc,wT),e(wT,Kue),g(OA,Kue,null),e(Lc,emr),e(Lc,Zue),e(Zue,omr),b(c,jBe,u),b(c,Cr,u),g(VA,Cr,null),e(Cr,rmr),e(Cr,xc),e(xc,tmr),e(xc,AX),e(AX,amr),e(xc,nmr),e(xc,yX),e(yX,smr),e(xc,lmr),e(Cr,imr),e(Cr,XA),e(XA,dmr),e(XA,e1e),e(e1e,cmr),e(XA,fmr),e(Cr,mmr),e(Cr,bt),g(zA,bt,null),e(bt,gmr),e(bt,o1e),e(o1e,hmr),e(bt,pmr),e(bt,kc),e(kc,_mr),e(kc,r1e),e(r1e,umr),e(kc,bmr),e(kc,LX),e(LX,vmr),e(kc,Fmr),e(bt,Tmr),e(bt,t1e),e(t1e,Mmr),e(bt,Emr),g(QA,bt,null),e(Cr,Cmr),e(Cr,vo),g(WA,vo,null),e(vo,wmr),e(vo,a1e),e(a1e,Amr),e(vo,ymr),e(vo,Mn),e(Mn,Lmr),e(Mn,n1e),e(n1e,xmr),e(Mn,kmr),e(Mn,s1e),e(s1e,Smr),e(Mn,Rmr),e(Mn,l1e),e(l1e,Bmr),e(Mn,Pmr),e(vo,$mr),e(vo,be),e(be,AT),e(AT,i1e),e(i1e,Imr),e(AT,qmr),e(AT,xX),e(xX,Nmr),e(AT,jmr),e(be,Dmr),e(be,yT),e(yT,d1e),e(d1e,Gmr),e(yT,Omr),e(yT,kX),e(kX,Vmr),e(yT,Xmr),e(be,zmr),e(be,LT),e(LT,c1e),e(c1e,Qmr),e(LT,Wmr),e(LT,SX),e(SX,Hmr),e(LT,Umr),e(be,Jmr),e(be,xT),e(xT,f1e),e(f1e,Ymr),e(xT,Kmr),e(xT,RX),e(RX,Zmr),e(xT,egr),e(be,ogr),e(be,kT),e(kT,m1e),e(m1e,rgr),e(kT,tgr),e(kT,BX),e(BX,agr),e(kT,ngr),e(be,sgr),e(be,ST),e(ST,g1e),e(g1e,lgr),e(ST,igr),e(ST,PX),e(PX,dgr),e(ST,cgr),e(be,fgr),e(be,RT),e(RT,h1e),e(h1e,mgr),e(RT,ggr),e(RT,$X),e($X,hgr),e(RT,pgr),e(be,_gr),e(be,BT),e(BT,p1e),e(p1e,ugr),e(BT,bgr),e(BT,IX),e(IX,vgr),e(BT,Fgr),e(be,Tgr),e(be,PT),e(PT,_1e),e(_1e,Mgr),e(PT,Egr),e(PT,qX),e(qX,Cgr),e(PT,wgr),e(be,Agr),e(be,$T),e($T,u1e),e(u1e,ygr),e($T,Lgr),e($T,NX),e(NX,xgr),e($T,kgr),e(vo,Sgr),e(vo,b1e),e(b1e,Rgr),e(vo,Bgr),g(HA,vo,null),b(c,DBe,u),b(c,Sc,u),e(Sc,IT),e(IT,v1e),g(UA,v1e,null),e(Sc,Pgr),e(Sc,F1e),e(F1e,$gr),b(c,GBe,u),b(c,wr,u),g(JA,wr,null),e(wr,Igr),e(wr,Rc),e(Rc,qgr),e(Rc,jX),e(jX,Ngr),e(Rc,jgr),e(Rc,DX),e(DX,Dgr),e(Rc,Ggr),e(wr,Ogr),e(wr,YA),e(YA,Vgr),e(YA,T1e),e(T1e,Xgr),e(YA,zgr),e(wr,Qgr),e(wr,vt),g(KA,vt,null),e(vt,Wgr),e(vt,M1e),e(M1e,Hgr),e(vt,Ugr),e(vt,Bc),e(Bc,Jgr),e(Bc,E1e),e(E1e,Ygr),e(Bc,Kgr),e(Bc,GX),e(GX,Zgr),e(Bc,ehr),e(vt,ohr),e(vt,C1e),e(C1e,rhr),e(vt,thr),g(ZA,vt,null),e(wr,ahr),e(wr,Fo),g(e0,Fo,null),e(Fo,nhr),e(Fo,w1e),e(w1e,shr),e(Fo,lhr),e(Fo,En),e(En,ihr),e(En,A1e),e(A1e,dhr),e(En,chr),e(En,y1e),e(y1e,fhr),e(En,mhr),e(En,L1e),e(L1e,ghr),e(En,hhr),e(Fo,phr),e(Fo,V),e(V,qT),e(qT,x1e),e(x1e,_hr),e(qT,uhr),e(qT,OX),e(OX,bhr),e(qT,vhr),e(V,Fhr),e(V,NT),e(NT,k1e),e(k1e,Thr),e(NT,Mhr),e(NT,VX),e(VX,Ehr),e(NT,Chr),e(V,whr),e(V,jT),e(jT,S1e),e(S1e,Ahr),e(jT,yhr),e(jT,XX),e(XX,Lhr),e(jT,xhr),e(V,khr),e(V,DT),e(DT,R1e),e(R1e,Shr),e(DT,Rhr),e(DT,zX),e(zX,Bhr),e(DT,Phr),e(V,$hr),e(V,GT),e(GT,B1e),e(B1e,Ihr),e(GT,qhr),e(GT,QX),e(QX,Nhr),e(GT,jhr),e(V,Dhr),e(V,OT),e(OT,P1e),e(P1e,Ghr),e(OT,Ohr),e(OT,WX),e(WX,Vhr),e(OT,Xhr),e(V,zhr),e(V,VT),e(VT,$1e),e($1e,Qhr),e(VT,Whr),e(VT,HX),e(HX,Hhr),e(VT,Uhr),e(V,Jhr),e(V,XT),e(XT,I1e),e(I1e,Yhr),e(XT,Khr),e(XT,UX),e(UX,Zhr),e(XT,epr),e(V,opr),e(V,zT),e(zT,q1e),e(q1e,rpr),e(zT,tpr),e(zT,JX),e(JX,apr),e(zT,npr),e(V,spr),e(V,QT),e(QT,N1e),e(N1e,lpr),e(QT,ipr),e(QT,YX),e(YX,dpr),e(QT,cpr),e(V,fpr),e(V,WT),e(WT,j1e),e(j1e,mpr),e(WT,gpr),e(WT,KX),e(KX,hpr),e(WT,ppr),e(V,_pr),e(V,HT),e(HT,D1e),e(D1e,upr),e(HT,bpr),e(HT,ZX),e(ZX,vpr),e(HT,Fpr),e(V,Tpr),e(V,UT),e(UT,G1e),e(G1e,Mpr),e(UT,Epr),e(UT,ez),e(ez,Cpr),e(UT,wpr),e(V,Apr),e(V,JT),e(JT,O1e),e(O1e,ypr),e(JT,Lpr),e(JT,oz),e(oz,xpr),e(JT,kpr),e(V,Spr),e(V,YT),e(YT,V1e),e(V1e,Rpr),e(YT,Bpr),e(YT,rz),e(rz,Ppr),e(YT,$pr),e(V,Ipr),e(V,KT),e(KT,X1e),e(X1e,qpr),e(KT,Npr),e(KT,tz),e(tz,jpr),e(KT,Dpr),e(V,Gpr),e(V,ZT),e(ZT,z1e),e(z1e,Opr),e(ZT,Vpr),e(ZT,az),e(az,Xpr),e(ZT,zpr),e(V,Qpr),e(V,e8),e(e8,Q1e),e(Q1e,Wpr),e(e8,Hpr),e(e8,nz),e(nz,Upr),e(e8,Jpr),e(V,Ypr),e(V,o8),e(o8,W1e),e(W1e,Kpr),e(o8,Zpr),e(o8,sz),e(sz,e_r),e(o8,o_r),e(V,r_r),e(V,r8),e(r8,H1e),e(H1e,t_r),e(r8,a_r),e(r8,lz),e(lz,n_r),e(r8,s_r),e(V,l_r),e(V,t8),e(t8,U1e),e(U1e,i_r),e(t8,d_r),e(t8,iz),e(iz,c_r),e(t8,f_r),e(V,m_r),e(V,a8),e(a8,J1e),e(J1e,g_r),e(a8,h_r),e(a8,dz),e(dz,p_r),e(a8,__r),e(V,u_r),e(V,n8),e(n8,Y1e),e(Y1e,b_r),e(n8,v_r),e(n8,cz),e(cz,F_r),e(n8,T_r),e(V,M_r),e(V,s8),e(s8,K1e),e(K1e,E_r),e(s8,C_r),e(s8,fz),e(fz,w_r),e(s8,A_r),e(V,y_r),e(V,l8),e(l8,Z1e),e(Z1e,L_r),e(l8,x_r),e(l8,mz),e(mz,k_r),e(l8,S_r),e(V,R_r),e(V,i8),e(i8,ebe),e(ebe,B_r),e(i8,P_r),e(i8,gz),e(gz,$_r),e(i8,I_r),e(Fo,q_r),e(Fo,obe),e(obe,N_r),e(Fo,j_r),g(o0,Fo,null),b(c,OBe,u),b(c,Pc,u),e(Pc,d8),e(d8,rbe),g(r0,rbe,null),e(Pc,D_r),e(Pc,tbe),e(tbe,G_r),b(c,VBe,u),b(c,Ar,u),g(t0,Ar,null),e(Ar,O_r),e(Ar,$c),e($c,V_r),e($c,hz),e(hz,X_r),e($c,z_r),e($c,pz),e(pz,Q_r),e($c,W_r),e(Ar,H_r),e(Ar,a0),e(a0,U_r),e(a0,abe),e(abe,J_r),e(a0,Y_r),e(Ar,K_r),e(Ar,Ft),g(n0,Ft,null),e(Ft,Z_r),e(Ft,nbe),e(nbe,eur),e(Ft,our),e(Ft,Ic),e(Ic,rur),e(Ic,sbe),e(sbe,tur),e(Ic,aur),e(Ic,_z),e(_z,nur),e(Ic,sur),e(Ft,lur),e(Ft,lbe),e(lbe,iur),e(Ft,dur),g(s0,Ft,null),e(Ar,cur),e(Ar,To),g(l0,To,null),e(To,fur),e(To,ibe),e(ibe,mur),e(To,gur),e(To,Cn),e(Cn,hur),e(Cn,dbe),e(dbe,pur),e(Cn,_ur),e(Cn,cbe),e(cbe,uur),e(Cn,bur),e(Cn,fbe),e(fbe,vur),e(Cn,Fur),e(To,Tur),e(To,se),e(se,c8),e(c8,mbe),e(mbe,Mur),e(c8,Eur),e(c8,uz),e(uz,Cur),e(c8,wur),e(se,Aur),e(se,f8),e(f8,gbe),e(gbe,yur),e(f8,Lur),e(f8,bz),e(bz,xur),e(f8,kur),e(se,Sur),e(se,m8),e(m8,hbe),e(hbe,Rur),e(m8,Bur),e(m8,vz),e(vz,Pur),e(m8,$ur),e(se,Iur),e(se,g8),e(g8,pbe),e(pbe,qur),e(g8,Nur),e(g8,Fz),e(Fz,jur),e(g8,Dur),e(se,Gur),e(se,h8),e(h8,_be),e(_be,Our),e(h8,Vur),e(h8,Tz),e(Tz,Xur),e(h8,zur),e(se,Qur),e(se,p8),e(p8,ube),e(ube,Wur),e(p8,Hur),e(p8,Mz),e(Mz,Uur),e(p8,Jur),e(se,Yur),e(se,_8),e(_8,bbe),e(bbe,Kur),e(_8,Zur),e(_8,Ez),e(Ez,e1r),e(_8,o1r),e(se,r1r),e(se,u8),e(u8,vbe),e(vbe,t1r),e(u8,a1r),e(u8,Cz),e(Cz,n1r),e(u8,s1r),e(se,l1r),e(se,b8),e(b8,Fbe),e(Fbe,i1r),e(b8,d1r),e(b8,wz),e(wz,c1r),e(b8,f1r),e(se,m1r),e(se,v8),e(v8,Tbe),e(Tbe,g1r),e(v8,h1r),e(v8,Az),e(Az,p1r),e(v8,_1r),e(se,u1r),e(se,F8),e(F8,Mbe),e(Mbe,b1r),e(F8,v1r),e(F8,yz),e(yz,F1r),e(F8,T1r),e(se,M1r),e(se,T8),e(T8,Ebe),e(Ebe,E1r),e(T8,C1r),e(T8,Lz),e(Lz,w1r),e(T8,A1r),e(se,y1r),e(se,M8),e(M8,Cbe),e(Cbe,L1r),e(M8,x1r),e(M8,xz),e(xz,k1r),e(M8,S1r),e(se,R1r),e(se,E8),e(E8,wbe),e(wbe,B1r),e(E8,P1r),e(E8,kz),e(kz,$1r),e(E8,I1r),e(se,q1r),e(se,C8),e(C8,Abe),e(Abe,N1r),e(C8,j1r),e(C8,Sz),e(Sz,D1r),e(C8,G1r),e(se,O1r),e(se,w8),e(w8,ybe),e(ybe,V1r),e(w8,X1r),e(w8,Rz),e(Rz,z1r),e(w8,Q1r),e(se,W1r),e(se,A8),e(A8,Lbe),e(Lbe,H1r),e(A8,U1r),e(A8,Bz),e(Bz,J1r),e(A8,Y1r),e(To,K1r),e(To,xbe),e(xbe,Z1r),e(To,ebr),g(i0,To,null),b(c,XBe,u),b(c,qc,u),e(qc,y8),e(y8,kbe),g(d0,kbe,null),e(qc,obr),e(qc,Sbe),e(Sbe,rbr),b(c,zBe,u),b(c,yr,u),g(c0,yr,null),e(yr,tbr),e(yr,Nc),e(Nc,abr),e(Nc,Pz),e(Pz,nbr),e(Nc,sbr),e(Nc,$z),e($z,lbr),e(Nc,ibr),e(yr,dbr),e(yr,f0),e(f0,cbr),e(f0,Rbe),e(Rbe,fbr),e(f0,mbr),e(yr,gbr),e(yr,Tt),g(m0,Tt,null),e(Tt,hbr),e(Tt,Bbe),e(Bbe,pbr),e(Tt,_br),e(Tt,jc),e(jc,ubr),e(jc,Pbe),e(Pbe,bbr),e(jc,vbr),e(jc,Iz),e(Iz,Fbr),e(jc,Tbr),e(Tt,Mbr),e(Tt,$be),e($be,Ebr),e(Tt,Cbr),g(g0,Tt,null),e(yr,wbr),e(yr,Mo),g(h0,Mo,null),e(Mo,Abr),e(Mo,Ibe),e(Ibe,ybr),e(Mo,Lbr),e(Mo,wn),e(wn,xbr),e(wn,qbe),e(qbe,kbr),e(wn,Sbr),e(wn,Nbe),e(Nbe,Rbr),e(wn,Bbr),e(wn,jbe),e(jbe,Pbr),e(wn,$br),e(Mo,Ibr),e(Mo,Dbe),e(Dbe,L8),e(L8,Gbe),e(Gbe,qbr),e(L8,Nbr),e(L8,qz),e(qz,jbr),e(L8,Dbr),e(Mo,Gbr),e(Mo,Obe),e(Obe,Obr),e(Mo,Vbr),g(p0,Mo,null),b(c,QBe,u),b(c,Dc,u),e(Dc,x8),e(x8,Vbe),g(_0,Vbe,null),e(Dc,Xbr),e(Dc,Xbe),e(Xbe,zbr),b(c,WBe,u),b(c,Lr,u),g(u0,Lr,null),e(Lr,Qbr),e(Lr,Gc),e(Gc,Wbr),e(Gc,Nz),e(Nz,Hbr),e(Gc,Ubr),e(Gc,jz),e(jz,Jbr),e(Gc,Ybr),e(Lr,Kbr),e(Lr,b0),e(b0,Zbr),e(b0,zbe),e(zbe,e2r),e(b0,o2r),e(Lr,r2r),e(Lr,Mt),g(v0,Mt,null),e(Mt,t2r),e(Mt,Qbe),e(Qbe,a2r),e(Mt,n2r),e(Mt,Oc),e(Oc,s2r),e(Oc,Wbe),e(Wbe,l2r),e(Oc,i2r),e(Oc,Dz),e(Dz,d2r),e(Oc,c2r),e(Mt,f2r),e(Mt,Hbe),e(Hbe,m2r),e(Mt,g2r),g(F0,Mt,null),e(Lr,h2r),e(Lr,Eo),g(T0,Eo,null),e(Eo,p2r),e(Eo,Ube),e(Ube,_2r),e(Eo,u2r),e(Eo,An),e(An,b2r),e(An,Jbe),e(Jbe,v2r),e(An,F2r),e(An,Ybe),e(Ybe,T2r),e(An,M2r),e(An,Kbe),e(Kbe,E2r),e(An,C2r),e(Eo,w2r),e(Eo,Y),e(Y,k8),e(k8,Zbe),e(Zbe,A2r),e(k8,y2r),e(k8,Gz),e(Gz,L2r),e(k8,x2r),e(Y,k2r),e(Y,S8),e(S8,e2e),e(e2e,S2r),e(S8,R2r),e(S8,Oz),e(Oz,B2r),e(S8,P2r),e(Y,$2r),e(Y,R8),e(R8,o2e),e(o2e,I2r),e(R8,q2r),e(R8,Vz),e(Vz,N2r),e(R8,j2r),e(Y,D2r),e(Y,B8),e(B8,r2e),e(r2e,G2r),e(B8,O2r),e(B8,Xz),e(Xz,V2r),e(B8,X2r),e(Y,z2r),e(Y,P8),e(P8,t2e),e(t2e,Q2r),e(P8,W2r),e(P8,zz),e(zz,H2r),e(P8,U2r),e(Y,J2r),e(Y,$8),e($8,a2e),e(a2e,Y2r),e($8,K2r),e($8,Qz),e(Qz,Z2r),e($8,e3r),e(Y,o3r),e(Y,I8),e(I8,n2e),e(n2e,r3r),e(I8,t3r),e(I8,Wz),e(Wz,a3r),e(I8,n3r),e(Y,s3r),e(Y,q8),e(q8,s2e),e(s2e,l3r),e(q8,i3r),e(q8,Hz),e(Hz,d3r),e(q8,c3r),e(Y,f3r),e(Y,N8),e(N8,l2e),e(l2e,m3r),e(N8,g3r),e(N8,Uz),e(Uz,h3r),e(N8,p3r),e(Y,_3r),e(Y,j8),e(j8,i2e),e(i2e,u3r),e(j8,b3r),e(j8,Jz),e(Jz,v3r),e(j8,F3r),e(Y,T3r),e(Y,D8),e(D8,d2e),e(d2e,M3r),e(D8,E3r),e(D8,Yz),e(Yz,C3r),e(D8,w3r),e(Y,A3r),e(Y,G8),e(G8,c2e),e(c2e,y3r),e(G8,L3r),e(G8,Kz),e(Kz,x3r),e(G8,k3r),e(Y,S3r),e(Y,O8),e(O8,f2e),e(f2e,R3r),e(O8,B3r),e(O8,Zz),e(Zz,P3r),e(O8,$3r),e(Y,I3r),e(Y,V8),e(V8,m2e),e(m2e,q3r),e(V8,N3r),e(V8,eQ),e(eQ,j3r),e(V8,D3r),e(Y,G3r),e(Y,X8),e(X8,g2e),e(g2e,O3r),e(X8,V3r),e(X8,oQ),e(oQ,X3r),e(X8,z3r),e(Y,Q3r),e(Y,z8),e(z8,h2e),e(h2e,W3r),e(z8,H3r),e(z8,rQ),e(rQ,U3r),e(z8,J3r),e(Y,Y3r),e(Y,Q8),e(Q8,p2e),e(p2e,K3r),e(Q8,Z3r),e(Q8,tQ),e(tQ,e6r),e(Q8,o6r),e(Y,r6r),e(Y,W8),e(W8,_2e),e(_2e,t6r),e(W8,a6r),e(W8,aQ),e(aQ,n6r),e(W8,s6r),e(Y,l6r),e(Y,H8),e(H8,u2e),e(u2e,i6r),e(H8,d6r),e(H8,nQ),e(nQ,c6r),e(H8,f6r),e(Y,m6r),e(Y,U8),e(U8,b2e),e(b2e,g6r),e(U8,h6r),e(U8,sQ),e(sQ,p6r),e(U8,_6r),e(Eo,u6r),e(Eo,v2e),e(v2e,b6r),e(Eo,v6r),g(M0,Eo,null),b(c,HBe,u),b(c,Vc,u),e(Vc,J8),e(J8,F2e),g(E0,F2e,null),e(Vc,F6r),e(Vc,T2e),e(T2e,T6r),b(c,UBe,u),b(c,xr,u),g(C0,xr,null),e(xr,M6r),e(xr,Xc),e(Xc,E6r),e(Xc,lQ),e(lQ,C6r),e(Xc,w6r),e(Xc,iQ),e(iQ,A6r),e(Xc,y6r),e(xr,L6r),e(xr,w0),e(w0,x6r),e(w0,M2e),e(M2e,k6r),e(w0,S6r),e(xr,R6r),e(xr,Et),g(A0,Et,null),e(Et,B6r),e(Et,E2e),e(E2e,P6r),e(Et,$6r),e(Et,zc),e(zc,I6r),e(zc,C2e),e(C2e,q6r),e(zc,N6r),e(zc,dQ),e(dQ,j6r),e(zc,D6r),e(Et,G6r),e(Et,w2e),e(w2e,O6r),e(Et,V6r),g(y0,Et,null),e(xr,X6r),e(xr,Co),g(L0,Co,null),e(Co,z6r),e(Co,A2e),e(A2e,Q6r),e(Co,W6r),e(Co,yn),e(yn,H6r),e(yn,y2e),e(y2e,U6r),e(yn,J6r),e(yn,L2e),e(L2e,Y6r),e(yn,K6r),e(yn,x2e),e(x2e,Z6r),e(yn,evr),e(Co,ovr),e(Co,K),e(K,Y8),e(Y8,k2e),e(k2e,rvr),e(Y8,tvr),e(Y8,cQ),e(cQ,avr),e(Y8,nvr),e(K,svr),e(K,K8),e(K8,S2e),e(S2e,lvr),e(K8,ivr),e(K8,fQ),e(fQ,dvr),e(K8,cvr),e(K,fvr),e(K,Z8),e(Z8,R2e),e(R2e,mvr),e(Z8,gvr),e(Z8,mQ),e(mQ,hvr),e(Z8,pvr),e(K,_vr),e(K,e9),e(e9,B2e),e(B2e,uvr),e(e9,bvr),e(e9,gQ),e(gQ,vvr),e(e9,Fvr),e(K,Tvr),e(K,o9),e(o9,P2e),e(P2e,Mvr),e(o9,Evr),e(o9,hQ),e(hQ,Cvr),e(o9,wvr),e(K,Avr),e(K,r9),e(r9,$2e),e($2e,yvr),e(r9,Lvr),e(r9,pQ),e(pQ,xvr),e(r9,kvr),e(K,Svr),e(K,t9),e(t9,I2e),e(I2e,Rvr),e(t9,Bvr),e(t9,_Q),e(_Q,Pvr),e(t9,$vr),e(K,Ivr),e(K,a9),e(a9,q2e),e(q2e,qvr),e(a9,Nvr),e(a9,uQ),e(uQ,jvr),e(a9,Dvr),e(K,Gvr),e(K,n9),e(n9,N2e),e(N2e,Ovr),e(n9,Vvr),e(n9,bQ),e(bQ,Xvr),e(n9,zvr),e(K,Qvr),e(K,s9),e(s9,j2e),e(j2e,Wvr),e(s9,Hvr),e(s9,vQ),e(vQ,Uvr),e(s9,Jvr),e(K,Yvr),e(K,l9),e(l9,D2e),e(D2e,Kvr),e(l9,Zvr),e(l9,FQ),e(FQ,eFr),e(l9,oFr),e(K,rFr),e(K,i9),e(i9,G2e),e(G2e,tFr),e(i9,aFr),e(i9,TQ),e(TQ,nFr),e(i9,sFr),e(K,lFr),e(K,d9),e(d9,O2e),e(O2e,iFr),e(d9,dFr),e(d9,MQ),e(MQ,cFr),e(d9,fFr),e(K,mFr),e(K,c9),e(c9,V2e),e(V2e,gFr),e(c9,hFr),e(c9,EQ),e(EQ,pFr),e(c9,_Fr),e(K,uFr),e(K,f9),e(f9,X2e),e(X2e,bFr),e(f9,vFr),e(f9,CQ),e(CQ,FFr),e(f9,TFr),e(K,MFr),e(K,m9),e(m9,z2e),e(z2e,EFr),e(m9,CFr),e(m9,wQ),e(wQ,wFr),e(m9,AFr),e(K,yFr),e(K,g9),e(g9,Q2e),e(Q2e,LFr),e(g9,xFr),e(g9,AQ),e(AQ,kFr),e(g9,SFr),e(K,RFr),e(K,h9),e(h9,W2e),e(W2e,BFr),e(h9,PFr),e(h9,yQ),e(yQ,$Fr),e(h9,IFr),e(K,qFr),e(K,p9),e(p9,H2e),e(H2e,NFr),e(p9,jFr),e(p9,LQ),e(LQ,DFr),e(p9,GFr),e(K,OFr),e(K,_9),e(_9,U2e),e(U2e,VFr),e(_9,XFr),e(_9,xQ),e(xQ,zFr),e(_9,QFr),e(Co,WFr),e(Co,J2e),e(J2e,HFr),e(Co,UFr),g(x0,Co,null),b(c,JBe,u),b(c,Qc,u),e(Qc,u9),e(u9,Y2e),g(k0,Y2e,null),e(Qc,JFr),e(Qc,K2e),e(K2e,YFr),b(c,YBe,u),b(c,kr,u),g(S0,kr,null),e(kr,KFr),e(kr,Wc),e(Wc,ZFr),e(Wc,kQ),e(kQ,eTr),e(Wc,oTr),e(Wc,SQ),e(SQ,rTr),e(Wc,tTr),e(kr,aTr),e(kr,R0),e(R0,nTr),e(R0,Z2e),e(Z2e,sTr),e(R0,lTr),e(kr,iTr),e(kr,Ct),g(B0,Ct,null),e(Ct,dTr),e(Ct,e3e),e(e3e,cTr),e(Ct,fTr),e(Ct,Hc),e(Hc,mTr),e(Hc,o3e),e(o3e,gTr),e(Hc,hTr),e(Hc,RQ),e(RQ,pTr),e(Hc,_Tr),e(Ct,uTr),e(Ct,r3e),e(r3e,bTr),e(Ct,vTr),g(P0,Ct,null),e(kr,FTr),e(kr,wo),g($0,wo,null),e(wo,TTr),e(wo,t3e),e(t3e,MTr),e(wo,ETr),e(wo,Ln),e(Ln,CTr),e(Ln,a3e),e(a3e,wTr),e(Ln,ATr),e(Ln,n3e),e(n3e,yTr),e(Ln,LTr),e(Ln,s3e),e(s3e,xTr),e(Ln,kTr),e(wo,STr),e(wo,l3e),e(l3e,b9),e(b9,i3e),e(i3e,RTr),e(b9,BTr),e(b9,BQ),e(BQ,PTr),e(b9,$Tr),e(wo,ITr),e(wo,d3e),e(d3e,qTr),e(wo,NTr),g(I0,wo,null),b(c,KBe,u),b(c,Uc,u),e(Uc,v9),e(v9,c3e),g(q0,c3e,null),e(Uc,jTr),e(Uc,f3e),e(f3e,DTr),b(c,ZBe,u),b(c,Sr,u),g(N0,Sr,null),e(Sr,GTr),e(Sr,Jc),e(Jc,OTr),e(Jc,PQ),e(PQ,VTr),e(Jc,XTr),e(Jc,$Q),e($Q,zTr),e(Jc,QTr),e(Sr,WTr),e(Sr,j0),e(j0,HTr),e(j0,m3e),e(m3e,UTr),e(j0,JTr),e(Sr,YTr),e(Sr,wt),g(D0,wt,null),e(wt,KTr),e(wt,g3e),e(g3e,ZTr),e(wt,e8r),e(wt,Yc),e(Yc,o8r),e(Yc,h3e),e(h3e,r8r),e(Yc,t8r),e(Yc,IQ),e(IQ,a8r),e(Yc,n8r),e(wt,s8r),e(wt,p3e),e(p3e,l8r),e(wt,i8r),g(G0,wt,null),e(Sr,d8r),e(Sr,Ao),g(O0,Ao,null),e(Ao,c8r),e(Ao,_3e),e(_3e,f8r),e(Ao,m8r),e(Ao,xn),e(xn,g8r),e(xn,u3e),e(u3e,h8r),e(xn,p8r),e(xn,b3e),e(b3e,_8r),e(xn,u8r),e(xn,v3e),e(v3e,b8r),e(xn,v8r),e(Ao,F8r),e(Ao,F3e),e(F3e,F9),e(F9,T3e),e(T3e,T8r),e(F9,M8r),e(F9,qQ),e(qQ,E8r),e(F9,C8r),e(Ao,w8r),e(Ao,M3e),e(M3e,A8r),e(Ao,y8r),g(V0,Ao,null),b(c,ePe,u),b(c,Kc,u),e(Kc,T9),e(T9,E3e),g(X0,E3e,null),e(Kc,L8r),e(Kc,C3e),e(C3e,x8r),b(c,oPe,u),b(c,Rr,u),g(z0,Rr,null),e(Rr,k8r),e(Rr,Zc),e(Zc,S8r),e(Zc,NQ),e(NQ,R8r),e(Zc,B8r),e(Zc,jQ),e(jQ,P8r),e(Zc,$8r),e(Rr,I8r),e(Rr,Q0),e(Q0,q8r),e(Q0,w3e),e(w3e,N8r),e(Q0,j8r),e(Rr,D8r),e(Rr,At),g(W0,At,null),e(At,G8r),e(At,A3e),e(A3e,O8r),e(At,V8r),e(At,ef),e(ef,X8r),e(ef,y3e),e(y3e,z8r),e(ef,Q8r),e(ef,DQ),e(DQ,W8r),e(ef,H8r),e(At,U8r),e(At,L3e),e(L3e,J8r),e(At,Y8r),g(H0,At,null),e(Rr,K8r),e(Rr,yo),g(U0,yo,null),e(yo,Z8r),e(yo,x3e),e(x3e,e9r),e(yo,o9r),e(yo,kn),e(kn,r9r),e(kn,k3e),e(k3e,t9r),e(kn,a9r),e(kn,S3e),e(S3e,n9r),e(kn,s9r),e(kn,R3e),e(R3e,l9r),e(kn,i9r),e(yo,d9r),e(yo,z),e(z,M9),e(M9,B3e),e(B3e,c9r),e(M9,f9r),e(M9,GQ),e(GQ,m9r),e(M9,g9r),e(z,h9r),e(z,E9),e(E9,P3e),e(P3e,p9r),e(E9,_9r),e(E9,OQ),e(OQ,u9r),e(E9,b9r),e(z,v9r),e(z,C9),e(C9,$3e),e($3e,F9r),e(C9,T9r),e(C9,VQ),e(VQ,M9r),e(C9,E9r),e(z,C9r),e(z,w9),e(w9,I3e),e(I3e,w9r),e(w9,A9r),e(w9,XQ),e(XQ,y9r),e(w9,L9r),e(z,x9r),e(z,A9),e(A9,q3e),e(q3e,k9r),e(A9,S9r),e(A9,zQ),e(zQ,R9r),e(A9,B9r),e(z,P9r),e(z,y9),e(y9,N3e),e(N3e,$9r),e(y9,I9r),e(y9,QQ),e(QQ,q9r),e(y9,N9r),e(z,j9r),e(z,L9),e(L9,j3e),e(j3e,D9r),e(L9,G9r),e(L9,WQ),e(WQ,O9r),e(L9,V9r),e(z,X9r),e(z,x9),e(x9,D3e),e(D3e,z9r),e(x9,Q9r),e(x9,HQ),e(HQ,W9r),e(x9,H9r),e(z,U9r),e(z,k9),e(k9,G3e),e(G3e,J9r),e(k9,Y9r),e(k9,UQ),e(UQ,K9r),e(k9,Z9r),e(z,eMr),e(z,S9),e(S9,O3e),e(O3e,oMr),e(S9,rMr),e(S9,JQ),e(JQ,tMr),e(S9,aMr),e(z,nMr),e(z,R9),e(R9,V3e),e(V3e,sMr),e(R9,lMr),e(R9,YQ),e(YQ,iMr),e(R9,dMr),e(z,cMr),e(z,B9),e(B9,X3e),e(X3e,fMr),e(B9,mMr),e(B9,KQ),e(KQ,gMr),e(B9,hMr),e(z,pMr),e(z,P9),e(P9,z3e),e(z3e,_Mr),e(P9,uMr),e(P9,ZQ),e(ZQ,bMr),e(P9,vMr),e(z,FMr),e(z,$9),e($9,Q3e),e(Q3e,TMr),e($9,MMr),e($9,eW),e(eW,EMr),e($9,CMr),e(z,wMr),e(z,I9),e(I9,W3e),e(W3e,AMr),e(I9,yMr),e(I9,oW),e(oW,LMr),e(I9,xMr),e(z,kMr),e(z,q9),e(q9,H3e),e(H3e,SMr),e(q9,RMr),e(q9,rW),e(rW,BMr),e(q9,PMr),e(z,$Mr),e(z,N9),e(N9,U3e),e(U3e,IMr),e(N9,qMr),e(N9,tW),e(tW,NMr),e(N9,jMr),e(z,DMr),e(z,j9),e(j9,J3e),e(J3e,GMr),e(j9,OMr),e(j9,aW),e(aW,VMr),e(j9,XMr),e(z,zMr),e(z,D9),e(D9,Y3e),e(Y3e,QMr),e(D9,WMr),e(D9,nW),e(nW,HMr),e(D9,UMr),e(z,JMr),e(z,G9),e(G9,K3e),e(K3e,YMr),e(G9,KMr),e(G9,sW),e(sW,ZMr),e(G9,e4r),e(z,o4r),e(z,O9),e(O9,Z3e),e(Z3e,r4r),e(O9,t4r),e(O9,lW),e(lW,a4r),e(O9,n4r),e(z,s4r),e(z,V9),e(V9,e6e),e(e6e,l4r),e(V9,i4r),e(V9,iW),e(iW,d4r),e(V9,c4r),e(z,f4r),e(z,X9),e(X9,o6e),e(o6e,m4r),e(X9,g4r),e(X9,dW),e(dW,h4r),e(X9,p4r),e(z,_4r),e(z,z9),e(z9,r6e),e(r6e,u4r),e(z9,b4r),e(z9,cW),e(cW,v4r),e(z9,F4r),e(z,T4r),e(z,Q9),e(Q9,t6e),e(t6e,M4r),e(Q9,E4r),e(Q9,fW),e(fW,C4r),e(Q9,w4r),e(yo,A4r),e(yo,a6e),e(a6e,y4r),e(yo,L4r),g(J0,yo,null),b(c,rPe,u),b(c,of,u),e(of,W9),e(W9,n6e),g(Y0,n6e,null),e(of,x4r),e(of,s6e),e(s6e,k4r),b(c,tPe,u),b(c,Br,u),g(K0,Br,null),e(Br,S4r),e(Br,rf),e(rf,R4r),e(rf,mW),e(mW,B4r),e(rf,P4r),e(rf,gW),e(gW,$4r),e(rf,I4r),e(Br,q4r),e(Br,Z0),e(Z0,N4r),e(Z0,l6e),e(l6e,j4r),e(Z0,D4r),e(Br,G4r),e(Br,yt),g(ey,yt,null),e(yt,O4r),e(yt,i6e),e(i6e,V4r),e(yt,X4r),e(yt,tf),e(tf,z4r),e(tf,d6e),e(d6e,Q4r),e(tf,W4r),e(tf,hW),e(hW,H4r),e(tf,U4r),e(yt,J4r),e(yt,c6e),e(c6e,Y4r),e(yt,K4r),g(oy,yt,null),e(Br,Z4r),e(Br,Lo),g(ry,Lo,null),e(Lo,eEr),e(Lo,f6e),e(f6e,oEr),e(Lo,rEr),e(Lo,Sn),e(Sn,tEr),e(Sn,m6e),e(m6e,aEr),e(Sn,nEr),e(Sn,g6e),e(g6e,sEr),e(Sn,lEr),e(Sn,h6e),e(h6e,iEr),e(Sn,dEr),e(Lo,cEr),e(Lo,ca),e(ca,H9),e(H9,p6e),e(p6e,fEr),e(H9,mEr),e(H9,pW),e(pW,gEr),e(H9,hEr),e(ca,pEr),e(ca,U9),e(U9,_6e),e(_6e,_Er),e(U9,uEr),e(U9,_W),e(_W,bEr),e(U9,vEr),e(ca,FEr),e(ca,J9),e(J9,u6e),e(u6e,TEr),e(J9,MEr),e(J9,uW),e(uW,EEr),e(J9,CEr),e(ca,wEr),e(ca,Y9),e(Y9,b6e),e(b6e,AEr),e(Y9,yEr),e(Y9,bW),e(bW,LEr),e(Y9,xEr),e(ca,kEr),e(ca,K9),e(K9,v6e),e(v6e,SEr),e(K9,REr),e(K9,vW),e(vW,BEr),e(K9,PEr),e(Lo,$Er),e(Lo,F6e),e(F6e,IEr),e(Lo,qEr),g(ty,Lo,null),b(c,aPe,u),b(c,af,u),e(af,Z9),e(Z9,T6e),g(ay,T6e,null),e(af,NEr),e(af,M6e),e(M6e,jEr),b(c,nPe,u),b(c,Pr,u),g(ny,Pr,null),e(Pr,DEr),e(Pr,nf),e(nf,GEr),e(nf,FW),e(FW,OEr),e(nf,VEr),e(nf,TW),e(TW,XEr),e(nf,zEr),e(Pr,QEr),e(Pr,sy),e(sy,WEr),e(sy,E6e),e(E6e,HEr),e(sy,UEr),e(Pr,JEr),e(Pr,Lt),g(ly,Lt,null),e(Lt,YEr),e(Lt,C6e),e(C6e,KEr),e(Lt,ZEr),e(Lt,sf),e(sf,e5r),e(sf,w6e),e(w6e,o5r),e(sf,r5r),e(sf,MW),e(MW,t5r),e(sf,a5r),e(Lt,n5r),e(Lt,A6e),e(A6e,s5r),e(Lt,l5r),g(iy,Lt,null),e(Pr,i5r),e(Pr,xo),g(dy,xo,null),e(xo,d5r),e(xo,y6e),e(y6e,c5r),e(xo,f5r),e(xo,Rn),e(Rn,m5r),e(Rn,L6e),e(L6e,g5r),e(Rn,h5r),e(Rn,x6e),e(x6e,p5r),e(Rn,_5r),e(Rn,k6e),e(k6e,u5r),e(Rn,b5r),e(xo,v5r),e(xo,me),e(me,eM),e(eM,S6e),e(S6e,F5r),e(eM,T5r),e(eM,EW),e(EW,M5r),e(eM,E5r),e(me,C5r),e(me,oM),e(oM,R6e),e(R6e,w5r),e(oM,A5r),e(oM,CW),e(CW,y5r),e(oM,L5r),e(me,x5r),e(me,rM),e(rM,B6e),e(B6e,k5r),e(rM,S5r),e(rM,wW),e(wW,R5r),e(rM,B5r),e(me,P5r),e(me,tM),e(tM,P6e),e(P6e,$5r),e(tM,I5r),e(tM,AW),e(AW,q5r),e(tM,N5r),e(me,j5r),e(me,aM),e(aM,$6e),e($6e,D5r),e(aM,G5r),e(aM,yW),e(yW,O5r),e(aM,V5r),e(me,X5r),e(me,nM),e(nM,I6e),e(I6e,z5r),e(nM,Q5r),e(nM,LW),e(LW,W5r),e(nM,H5r),e(me,U5r),e(me,sM),e(sM,q6e),e(q6e,J5r),e(sM,Y5r),e(sM,xW),e(xW,K5r),e(sM,Z5r),e(me,eCr),e(me,lM),e(lM,N6e),e(N6e,oCr),e(lM,rCr),e(lM,kW),e(kW,tCr),e(lM,aCr),e(me,nCr),e(me,iM),e(iM,j6e),e(j6e,sCr),e(iM,lCr),e(iM,SW),e(SW,iCr),e(iM,dCr),e(me,cCr),e(me,dM),e(dM,D6e),e(D6e,fCr),e(dM,mCr),e(dM,RW),e(RW,gCr),e(dM,hCr),e(me,pCr),e(me,cM),e(cM,G6e),e(G6e,_Cr),e(cM,uCr),e(cM,BW),e(BW,bCr),e(cM,vCr),e(me,FCr),e(me,fM),e(fM,O6e),e(O6e,TCr),e(fM,MCr),e(fM,PW),e(PW,ECr),e(fM,CCr),e(xo,wCr),e(xo,V6e),e(V6e,ACr),e(xo,yCr),g(cy,xo,null),b(c,sPe,u),b(c,lf,u),e(lf,mM),e(mM,X6e),g(fy,X6e,null),e(lf,LCr),e(lf,z6e),e(z6e,xCr),b(c,lPe,u),b(c,$r,u),g(my,$r,null),e($r,kCr),e($r,df),e(df,SCr),e(df,$W),e($W,RCr),e(df,BCr),e(df,IW),e(IW,PCr),e(df,$Cr),e($r,ICr),e($r,gy),e(gy,qCr),e(gy,Q6e),e(Q6e,NCr),e(gy,jCr),e($r,DCr),e($r,xt),g(hy,xt,null),e(xt,GCr),e(xt,W6e),e(W6e,OCr),e(xt,VCr),e(xt,cf),e(cf,XCr),e(cf,H6e),e(H6e,zCr),e(cf,QCr),e(cf,qW),e(qW,WCr),e(cf,HCr),e(xt,UCr),e(xt,U6e),e(U6e,JCr),e(xt,YCr),g(py,xt,null),e($r,KCr),e($r,ko),g(_y,ko,null),e(ko,ZCr),e(ko,J6e),e(J6e,ewr),e(ko,owr),e(ko,Bn),e(Bn,rwr),e(Bn,Y6e),e(Y6e,twr),e(Bn,awr),e(Bn,K6e),e(K6e,nwr),e(Bn,swr),e(Bn,Z6e),e(Z6e,lwr),e(Bn,iwr),e(ko,dwr),e(ko,ve),e(ve,gM),e(gM,eve),e(eve,cwr),e(gM,fwr),e(gM,NW),e(NW,mwr),e(gM,gwr),e(ve,hwr),e(ve,hM),e(hM,ove),e(ove,pwr),e(hM,_wr),e(hM,jW),e(jW,uwr),e(hM,bwr),e(ve,vwr),e(ve,pM),e(pM,rve),e(rve,Fwr),e(pM,Twr),e(pM,DW),e(DW,Mwr),e(pM,Ewr),e(ve,Cwr),e(ve,_M),e(_M,tve),e(tve,wwr),e(_M,Awr),e(_M,GW),e(GW,ywr),e(_M,Lwr),e(ve,xwr),e(ve,uM),e(uM,ave),e(ave,kwr),e(uM,Swr),e(uM,OW),e(OW,Rwr),e(uM,Bwr),e(ve,Pwr),e(ve,bM),e(bM,nve),e(nve,$wr),e(bM,Iwr),e(bM,VW),e(VW,qwr),e(bM,Nwr),e(ve,jwr),e(ve,vM),e(vM,sve),e(sve,Dwr),e(vM,Gwr),e(vM,XW),e(XW,Owr),e(vM,Vwr),e(ve,Xwr),e(ve,FM),e(FM,lve),e(lve,zwr),e(FM,Qwr),e(FM,zW),e(zW,Wwr),e(FM,Hwr),e(ve,Uwr),e(ve,TM),e(TM,ive),e(ive,Jwr),e(TM,Ywr),e(TM,QW),e(QW,Kwr),e(TM,Zwr),e(ve,eAr),e(ve,MM),e(MM,dve),e(dve,oAr),e(MM,rAr),e(MM,WW),e(WW,tAr),e(MM,aAr),e(ko,nAr),e(ko,cve),e(cve,sAr),e(ko,lAr),g(uy,ko,null),b(c,iPe,u),b(c,ff,u),e(ff,EM),e(EM,fve),g(by,fve,null),e(ff,iAr),e(ff,mve),e(mve,dAr),b(c,dPe,u),b(c,Ir,u),g(vy,Ir,null),e(Ir,cAr),e(Ir,mf),e(mf,fAr),e(mf,HW),e(HW,mAr),e(mf,gAr),e(mf,UW),e(UW,hAr),e(mf,pAr),e(Ir,_Ar),e(Ir,Fy),e(Fy,uAr),e(Fy,gve),e(gve,bAr),e(Fy,vAr),e(Ir,FAr),e(Ir,kt),g(Ty,kt,null),e(kt,TAr),e(kt,hve),e(hve,MAr),e(kt,EAr),e(kt,gf),e(gf,CAr),e(gf,pve),e(pve,wAr),e(gf,AAr),e(gf,JW),e(JW,yAr),e(gf,LAr),e(kt,xAr),e(kt,_ve),e(_ve,kAr),e(kt,SAr),g(My,kt,null),e(Ir,RAr),e(Ir,So),g(Ey,So,null),e(So,BAr),e(So,uve),e(uve,PAr),e(So,$Ar),e(So,Pn),e(Pn,IAr),e(Pn,bve),e(bve,qAr),e(Pn,NAr),e(Pn,vve),e(vve,jAr),e(Pn,DAr),e(Pn,Fve),e(Fve,GAr),e(Pn,OAr),e(So,VAr),e(So,Ee),e(Ee,CM),e(CM,Tve),e(Tve,XAr),e(CM,zAr),e(CM,YW),e(YW,QAr),e(CM,WAr),e(Ee,HAr),e(Ee,wM),e(wM,Mve),e(Mve,UAr),e(wM,JAr),e(wM,KW),e(KW,YAr),e(wM,KAr),e(Ee,ZAr),e(Ee,AM),e(AM,Eve),e(Eve,e0r),e(AM,o0r),e(AM,ZW),e(ZW,r0r),e(AM,t0r),e(Ee,a0r),e(Ee,yM),e(yM,Cve),e(Cve,n0r),e(yM,s0r),e(yM,eH),e(eH,l0r),e(yM,i0r),e(Ee,d0r),e(Ee,LM),e(LM,wve),e(wve,c0r),e(LM,f0r),e(LM,oH),e(oH,m0r),e(LM,g0r),e(Ee,h0r),e(Ee,xM),e(xM,Ave),e(Ave,p0r),e(xM,_0r),e(xM,rH),e(rH,u0r),e(xM,b0r),e(Ee,v0r),e(Ee,kM),e(kM,yve),e(yve,F0r),e(kM,T0r),e(kM,tH),e(tH,M0r),e(kM,E0r),e(Ee,C0r),e(Ee,SM),e(SM,Lve),e(Lve,w0r),e(SM,A0r),e(SM,aH),e(aH,y0r),e(SM,L0r),e(Ee,x0r),e(Ee,RM),e(RM,xve),e(xve,k0r),e(RM,S0r),e(RM,nH),e(nH,R0r),e(RM,B0r),e(So,P0r),e(So,kve),e(kve,$0r),e(So,I0r),g(Cy,So,null),b(c,cPe,u),b(c,hf,u),e(hf,BM),e(BM,Sve),g(wy,Sve,null),e(hf,q0r),e(hf,Rve),e(Rve,N0r),b(c,fPe,u),b(c,qr,u),g(Ay,qr,null),e(qr,j0r),e(qr,pf),e(pf,D0r),e(pf,sH),e(sH,G0r),e(pf,O0r),e(pf,lH),e(lH,V0r),e(pf,X0r),e(qr,z0r),e(qr,yy),e(yy,Q0r),e(yy,Bve),e(Bve,W0r),e(yy,H0r),e(qr,U0r),e(qr,St),g(Ly,St,null),e(St,J0r),e(St,Pve),e(Pve,Y0r),e(St,K0r),e(St,_f),e(_f,Z0r),e(_f,$ve),e($ve,eyr),e(_f,oyr),e(_f,iH),e(iH,ryr),e(_f,tyr),e(St,ayr),e(St,Ive),e(Ive,nyr),e(St,syr),g(xy,St,null),e(qr,lyr),e(qr,Ro),g(ky,Ro,null),e(Ro,iyr),e(Ro,qve),e(qve,dyr),e(Ro,cyr),e(Ro,$n),e($n,fyr),e($n,Nve),e(Nve,myr),e($n,gyr),e($n,jve),e(jve,hyr),e($n,pyr),e($n,Dve),e(Dve,_yr),e($n,uyr),e(Ro,byr),e(Ro,Fe),e(Fe,PM),e(PM,Gve),e(Gve,vyr),e(PM,Fyr),e(PM,dH),e(dH,Tyr),e(PM,Myr),e(Fe,Eyr),e(Fe,$M),e($M,Ove),e(Ove,Cyr),e($M,wyr),e($M,cH),e(cH,Ayr),e($M,yyr),e(Fe,Lyr),e(Fe,IM),e(IM,Vve),e(Vve,xyr),e(IM,kyr),e(IM,fH),e(fH,Syr),e(IM,Ryr),e(Fe,Byr),e(Fe,qM),e(qM,Xve),e(Xve,Pyr),e(qM,$yr),e(qM,mH),e(mH,Iyr),e(qM,qyr),e(Fe,Nyr),e(Fe,NM),e(NM,zve),e(zve,jyr),e(NM,Dyr),e(NM,gH),e(gH,Gyr),e(NM,Oyr),e(Fe,Vyr),e(Fe,jM),e(jM,Qve),e(Qve,Xyr),e(jM,zyr),e(jM,hH),e(hH,Qyr),e(jM,Wyr),e(Fe,Hyr),e(Fe,DM),e(DM,Wve),e(Wve,Uyr),e(DM,Jyr),e(DM,pH),e(pH,Yyr),e(DM,Kyr),e(Fe,Zyr),e(Fe,GM),e(GM,Hve),e(Hve,eLr),e(GM,oLr),e(GM,_H),e(_H,rLr),e(GM,tLr),e(Fe,aLr),e(Fe,OM),e(OM,Uve),e(Uve,nLr),e(OM,sLr),e(OM,uH),e(uH,lLr),e(OM,iLr),e(Fe,dLr),e(Fe,VM),e(VM,Jve),e(Jve,cLr),e(VM,fLr),e(VM,bH),e(bH,mLr),e(VM,gLr),e(Ro,hLr),e(Ro,Yve),e(Yve,pLr),e(Ro,_Lr),g(Sy,Ro,null),b(c,mPe,u),b(c,uf,u),e(uf,XM),e(XM,Kve),g(Ry,Kve,null),e(uf,uLr),e(uf,Zve),e(Zve,bLr),b(c,gPe,u),b(c,Nr,u),g(By,Nr,null),e(Nr,vLr),e(Nr,bf),e(bf,FLr),e(bf,vH),e(vH,TLr),e(bf,MLr),e(bf,FH),e(FH,ELr),e(bf,CLr),e(Nr,wLr),e(Nr,Py),e(Py,ALr),e(Py,eFe),e(eFe,yLr),e(Py,LLr),e(Nr,xLr),e(Nr,Rt),g($y,Rt,null),e(Rt,kLr),e(Rt,oFe),e(oFe,SLr),e(Rt,RLr),e(Rt,vf),e(vf,BLr),e(vf,rFe),e(rFe,PLr),e(vf,$Lr),e(vf,TH),e(TH,ILr),e(vf,qLr),e(Rt,NLr),e(Rt,tFe),e(tFe,jLr),e(Rt,DLr),g(Iy,Rt,null),e(Nr,GLr),e(Nr,Bo),g(qy,Bo,null),e(Bo,OLr),e(Bo,aFe),e(aFe,VLr),e(Bo,XLr),e(Bo,In),e(In,zLr),e(In,nFe),e(nFe,QLr),e(In,WLr),e(In,sFe),e(sFe,HLr),e(In,ULr),e(In,lFe),e(lFe,JLr),e(In,YLr),e(Bo,KLr),e(Bo,Te),e(Te,zM),e(zM,iFe),e(iFe,ZLr),e(zM,e7r),e(zM,MH),e(MH,o7r),e(zM,r7r),e(Te,t7r),e(Te,QM),e(QM,dFe),e(dFe,a7r),e(QM,n7r),e(QM,EH),e(EH,s7r),e(QM,l7r),e(Te,i7r),e(Te,WM),e(WM,cFe),e(cFe,d7r),e(WM,c7r),e(WM,CH),e(CH,f7r),e(WM,m7r),e(Te,g7r),e(Te,HM),e(HM,fFe),e(fFe,h7r),e(HM,p7r),e(HM,wH),e(wH,_7r),e(HM,u7r),e(Te,b7r),e(Te,UM),e(UM,mFe),e(mFe,v7r),e(UM,F7r),e(UM,AH),e(AH,T7r),e(UM,M7r),e(Te,E7r),e(Te,JM),e(JM,gFe),e(gFe,C7r),e(JM,w7r),e(JM,yH),e(yH,A7r),e(JM,y7r),e(Te,L7r),e(Te,YM),e(YM,hFe),e(hFe,x7r),e(YM,k7r),e(YM,LH),e(LH,S7r),e(YM,R7r),e(Te,B7r),e(Te,KM),e(KM,pFe),e(pFe,P7r),e(KM,$7r),e(KM,xH),e(xH,I7r),e(KM,q7r),e(Te,N7r),e(Te,ZM),e(ZM,_Fe),e(_Fe,j7r),e(ZM,D7r),e(ZM,kH),e(kH,G7r),e(ZM,O7r),e(Te,V7r),e(Te,e4),e(e4,uFe),e(uFe,X7r),e(e4,z7r),e(e4,SH),e(SH,Q7r),e(e4,W7r),e(Bo,H7r),e(Bo,bFe),e(bFe,U7r),e(Bo,J7r),g(Ny,Bo,null),b(c,hPe,u),b(c,Ff,u),e(Ff,o4),e(o4,vFe),g(jy,vFe,null),e(Ff,Y7r),e(Ff,FFe),e(FFe,K7r),b(c,pPe,u),b(c,jr,u),g(Dy,jr,null),e(jr,Z7r),e(jr,Tf),e(Tf,exr),e(Tf,RH),e(RH,oxr),e(Tf,rxr),e(Tf,BH),e(BH,txr),e(Tf,axr),e(jr,nxr),e(jr,Gy),e(Gy,sxr),e(Gy,TFe),e(TFe,lxr),e(Gy,ixr),e(jr,dxr),e(jr,Bt),g(Oy,Bt,null),e(Bt,cxr),e(Bt,MFe),e(MFe,fxr),e(Bt,mxr),e(Bt,Mf),e(Mf,gxr),e(Mf,EFe),e(EFe,hxr),e(Mf,pxr),e(Mf,PH),e(PH,_xr),e(Mf,uxr),e(Bt,bxr),e(Bt,CFe),e(CFe,vxr),e(Bt,Fxr),g(Vy,Bt,null),e(jr,Txr),e(jr,Po),g(Xy,Po,null),e(Po,Mxr),e(Po,wFe),e(wFe,Exr),e(Po,Cxr),e(Po,qn),e(qn,wxr),e(qn,AFe),e(AFe,Axr),e(qn,yxr),e(qn,yFe),e(yFe,Lxr),e(qn,xxr),e(qn,LFe),e(LFe,kxr),e(qn,Sxr),e(Po,Rxr),e(Po,Be),e(Be,r4),e(r4,xFe),e(xFe,Bxr),e(r4,Pxr),e(r4,$H),e($H,$xr),e(r4,Ixr),e(Be,qxr),e(Be,t4),e(t4,kFe),e(kFe,Nxr),e(t4,jxr),e(t4,IH),e(IH,Dxr),e(t4,Gxr),e(Be,Oxr),e(Be,a4),e(a4,SFe),e(SFe,Vxr),e(a4,Xxr),e(a4,qH),e(qH,zxr),e(a4,Qxr),e(Be,Wxr),e(Be,n4),e(n4,RFe),e(RFe,Hxr),e(n4,Uxr),e(n4,NH),e(NH,Jxr),e(n4,Yxr),e(Be,Kxr),e(Be,s4),e(s4,BFe),e(BFe,Zxr),e(s4,ekr),e(s4,jH),e(jH,okr),e(s4,rkr),e(Be,tkr),e(Be,l4),e(l4,PFe),e(PFe,akr),e(l4,nkr),e(l4,DH),e(DH,skr),e(l4,lkr),e(Be,ikr),e(Be,i4),e(i4,$Fe),e($Fe,dkr),e(i4,ckr),e(i4,GH),e(GH,fkr),e(i4,mkr),e(Be,gkr),e(Be,d4),e(d4,IFe),e(IFe,hkr),e(d4,pkr),e(d4,OH),e(OH,_kr),e(d4,ukr),e(Po,bkr),e(Po,qFe),e(qFe,vkr),e(Po,Fkr),g(zy,Po,null),b(c,_Pe,u),b(c,Ef,u),e(Ef,c4),e(c4,NFe),g(Qy,NFe,null),e(Ef,Tkr),e(Ef,jFe),e(jFe,Mkr),b(c,uPe,u),b(c,Dr,u),g(Wy,Dr,null),e(Dr,Ekr),e(Dr,Cf),e(Cf,Ckr),e(Cf,VH),e(VH,wkr),e(Cf,Akr),e(Cf,XH),e(XH,ykr),e(Cf,Lkr),e(Dr,xkr),e(Dr,Hy),e(Hy,kkr),e(Hy,DFe),e(DFe,Skr),e(Hy,Rkr),e(Dr,Bkr),e(Dr,Pt),g(Uy,Pt,null),e(Pt,Pkr),e(Pt,GFe),e(GFe,$kr),e(Pt,Ikr),e(Pt,wf),e(wf,qkr),e(wf,OFe),e(OFe,Nkr),e(wf,jkr),e(wf,zH),e(zH,Dkr),e(wf,Gkr),e(Pt,Okr),e(Pt,VFe),e(VFe,Vkr),e(Pt,Xkr),g(Jy,Pt,null),e(Dr,zkr),e(Dr,$o),g(Yy,$o,null),e($o,Qkr),e($o,XFe),e(XFe,Wkr),e($o,Hkr),e($o,Nn),e(Nn,Ukr),e(Nn,zFe),e(zFe,Jkr),e(Nn,Ykr),e(Nn,QFe),e(QFe,Kkr),e(Nn,Zkr),e(Nn,WFe),e(WFe,eSr),e(Nn,oSr),e($o,rSr),e($o,Pe),e(Pe,f4),e(f4,HFe),e(HFe,tSr),e(f4,aSr),e(f4,QH),e(QH,nSr),e(f4,sSr),e(Pe,lSr),e(Pe,m4),e(m4,UFe),e(UFe,iSr),e(m4,dSr),e(m4,WH),e(WH,cSr),e(m4,fSr),e(Pe,mSr),e(Pe,g4),e(g4,JFe),e(JFe,gSr),e(g4,hSr),e(g4,HH),e(HH,pSr),e(g4,_Sr),e(Pe,uSr),e(Pe,h4),e(h4,YFe),e(YFe,bSr),e(h4,vSr),e(h4,UH),e(UH,FSr),e(h4,TSr),e(Pe,MSr),e(Pe,p4),e(p4,KFe),e(KFe,ESr),e(p4,CSr),e(p4,JH),e(JH,wSr),e(p4,ASr),e(Pe,ySr),e(Pe,_4),e(_4,ZFe),e(ZFe,LSr),e(_4,xSr),e(_4,YH),e(YH,kSr),e(_4,SSr),e(Pe,RSr),e(Pe,u4),e(u4,eTe),e(eTe,BSr),e(u4,PSr),e(u4,KH),e(KH,$Sr),e(u4,ISr),e(Pe,qSr),e(Pe,b4),e(b4,oTe),e(oTe,NSr),e(b4,jSr),e(b4,ZH),e(ZH,DSr),e(b4,GSr),e($o,OSr),e($o,rTe),e(rTe,VSr),e($o,XSr),g(Ky,$o,null),b(c,bPe,u),b(c,Af,u),e(Af,v4),e(v4,tTe),g(Zy,tTe,null),e(Af,zSr),e(Af,aTe),e(aTe,QSr),b(c,vPe,u),b(c,Gr,u),g(eL,Gr,null),e(Gr,WSr),e(Gr,yf),e(yf,HSr),e(yf,eU),e(eU,USr),e(yf,JSr),e(yf,oU),e(oU,YSr),e(yf,KSr),e(Gr,ZSr),e(Gr,oL),e(oL,eRr),e(oL,nTe),e(nTe,oRr),e(oL,rRr),e(Gr,tRr),e(Gr,$t),g(rL,$t,null),e($t,aRr),e($t,sTe),e(sTe,nRr),e($t,sRr),e($t,Lf),e(Lf,lRr),e(Lf,lTe),e(lTe,iRr),e(Lf,dRr),e(Lf,rU),e(rU,cRr),e(Lf,fRr),e($t,mRr),e($t,iTe),e(iTe,gRr),e($t,hRr),g(tL,$t,null),e(Gr,pRr),e(Gr,Io),g(aL,Io,null),e(Io,_Rr),e(Io,dTe),e(dTe,uRr),e(Io,bRr),e(Io,jn),e(jn,vRr),e(jn,cTe),e(cTe,FRr),e(jn,TRr),e(jn,fTe),e(fTe,MRr),e(jn,ERr),e(jn,mTe),e(mTe,CRr),e(jn,wRr),e(Io,ARr),e(Io,gTe),e(gTe,F4),e(F4,hTe),e(hTe,yRr),e(F4,LRr),e(F4,tU),e(tU,xRr),e(F4,kRr),e(Io,SRr),e(Io,pTe),e(pTe,RRr),e(Io,BRr),g(nL,Io,null),b(c,FPe,u),b(c,xf,u),e(xf,T4),e(T4,_Te),g(sL,_Te,null),e(xf,PRr),e(xf,uTe),e(uTe,$Rr),b(c,TPe,u),b(c,Or,u),g(lL,Or,null),e(Or,IRr),e(Or,kf),e(kf,qRr),e(kf,aU),e(aU,NRr),e(kf,jRr),e(kf,nU),e(nU,DRr),e(kf,GRr),e(Or,ORr),e(Or,iL),e(iL,VRr),e(iL,bTe),e(bTe,XRr),e(iL,zRr),e(Or,QRr),e(Or,It),g(dL,It,null),e(It,WRr),e(It,vTe),e(vTe,HRr),e(It,URr),e(It,Sf),e(Sf,JRr),e(Sf,FTe),e(FTe,YRr),e(Sf,KRr),e(Sf,sU),e(sU,ZRr),e(Sf,eBr),e(It,oBr),e(It,TTe),e(TTe,rBr),e(It,tBr),g(cL,It,null),e(Or,aBr),e(Or,qo),g(fL,qo,null),e(qo,nBr),e(qo,MTe),e(MTe,sBr),e(qo,lBr),e(qo,Dn),e(Dn,iBr),e(Dn,ETe),e(ETe,dBr),e(Dn,cBr),e(Dn,CTe),e(CTe,fBr),e(Dn,mBr),e(Dn,wTe),e(wTe,gBr),e(Dn,hBr),e(qo,pBr),e(qo,mL),e(mL,M4),e(M4,ATe),e(ATe,_Br),e(M4,uBr),e(M4,lU),e(lU,bBr),e(M4,vBr),e(mL,FBr),e(mL,E4),e(E4,yTe),e(yTe,TBr),e(E4,MBr),e(E4,iU),e(iU,EBr),e(E4,CBr),e(qo,wBr),e(qo,LTe),e(LTe,ABr),e(qo,yBr),g(gL,qo,null),b(c,MPe,u),b(c,Rf,u),e(Rf,C4),e(C4,xTe),g(hL,xTe,null),e(Rf,LBr),e(Rf,kTe),e(kTe,xBr),b(c,EPe,u),b(c,Vr,u),g(pL,Vr,null),e(Vr,kBr),e(Vr,Bf),e(Bf,SBr),e(Bf,dU),e(dU,RBr),e(Bf,BBr),e(Bf,cU),e(cU,PBr),e(Bf,$Br),e(Vr,IBr),e(Vr,_L),e(_L,qBr),e(_L,STe),e(STe,NBr),e(_L,jBr),e(Vr,DBr),e(Vr,qt),g(uL,qt,null),e(qt,GBr),e(qt,RTe),e(RTe,OBr),e(qt,VBr),e(qt,Pf),e(Pf,XBr),e(Pf,BTe),e(BTe,zBr),e(Pf,QBr),e(Pf,fU),e(fU,WBr),e(Pf,HBr),e(qt,UBr),e(qt,PTe),e(PTe,JBr),e(qt,YBr),g(bL,qt,null),e(Vr,KBr),e(Vr,No),g(vL,No,null),e(No,ZBr),e(No,$Te),e($Te,ePr),e(No,oPr),e(No,Gn),e(Gn,rPr),e(Gn,ITe),e(ITe,tPr),e(Gn,aPr),e(Gn,qTe),e(qTe,nPr),e(Gn,sPr),e(Gn,NTe),e(NTe,lPr),e(Gn,iPr),e(No,dPr),e(No,jTe),e(jTe,w4),e(w4,DTe),e(DTe,cPr),e(w4,fPr),e(w4,mU),e(mU,mPr),e(w4,gPr),e(No,hPr),e(No,GTe),e(GTe,pPr),e(No,_Pr),g(FL,No,null),CPe=!0},p(c,[u]){const TL={};u&2&&(TL.$$scope={dirty:u,ctx:c}),Of.$set(TL);const OTe={};u&2&&(OTe.$$scope={dirty:u,ctx:c}),qh.$set(OTe);const VTe={};u&2&&(VTe.$$scope={dirty:u,ctx:c}),Hh.$set(VTe)},i(c){CPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(kE.$$.fragment,c),h(SE.$$.fragment,c),h(Of.$$.fragment,c),h(RE.$$.fragment,c),h(BE.$$.fragment,c),h(IE.$$.fragment,c),h(qE.$$.fragment,c),h(NE.$$.fragment,c),h(jE.$$.fragment,c),h(DE.$$.fragment,c),h(VE.$$.fragment,c),h(XE.$$.fragment,c),h(zE.$$.fragment,c),h(QE.$$.fragment,c),h(WE.$$.fragment,c),h(JE.$$.fragment,c),h(qh.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(e5.$$.fragment,c),h(t5.$$.fragment,c),h(Hh.$$.fragment,c),h(a5.$$.fragment,c),h(n5.$$.fragment,c),h(s5.$$.fragment,c),h(l5.$$.fragment,c),h(d5.$$.fragment,c),h(c5.$$.fragment,c),h(f5.$$.fragment,c),h(m5.$$.fragment,c),h(g5.$$.fragment,c),h(h5.$$.fragment,c),h(_5.$$.fragment,c),h(u5.$$.fragment,c),h(b5.$$.fragment,c),h(v5.$$.fragment,c),h(F5.$$.fragment,c),h(T5.$$.fragment,c),h(E5.$$.fragment,c),h(C5.$$.fragment,c),h(w5.$$.fragment,c),h(A5.$$.fragment,c),h(y5.$$.fragment,c),h(L5.$$.fragment,c),h(k5.$$.fragment,c),h(S5.$$.fragment,c),h(R5.$$.fragment,c),h(B5.$$.fragment,c),h(P5.$$.fragment,c),h($5.$$.fragment,c),h(q5.$$.fragment,c),h(N5.$$.fragment,c),h(j5.$$.fragment,c),h(D5.$$.fragment,c),h(G5.$$.fragment,c),h(O5.$$.fragment,c),h(X5.$$.fragment,c),h(z5.$$.fragment,c),h(Q5.$$.fragment,c),h(W5.$$.fragment,c),h(H5.$$.fragment,c),h(U5.$$.fragment,c),h(Y5.$$.fragment,c),h(K5.$$.fragment,c),h(Z5.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(rC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(dC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(_C.$$.fragment,c),h(bC.$$.fragment,c),h(vC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(EC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(kC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(qC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),CPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p(kE.$$.fragment,c),p(SE.$$.fragment,c),p(Of.$$.fragment,c),p(RE.$$.fragment,c),p(BE.$$.fragment,c),p(IE.$$.fragment,c),p(qE.$$.fragment,c),p(NE.$$.fragment,c),p(jE.$$.fragment,c),p(DE.$$.fragment,c),p(VE.$$.fragment,c),p(XE.$$.fragment,c),p(zE.$$.fragment,c),p(QE.$$.fragment,c),p(WE.$$.fragment,c),p(JE.$$.fragment,c),p(qh.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(e5.$$.fragment,c),p(t5.$$.fragment,c),p(Hh.$$.fragment,c),p(a5.$$.fragment,c),p(n5.$$.fragment,c),p(s5.$$.fragment,c),p(l5.$$.fragment,c),p(d5.$$.fragment,c),p(c5.$$.fragment,c),p(f5.$$.fragment,c),p(m5.$$.fragment,c),p(g5.$$.fragment,c),p(h5.$$.fragment,c),p(_5.$$.fragment,c),p(u5.$$.fragment,c),p(b5.$$.fragment,c),p(v5.$$.fragment,c),p(F5.$$.fragment,c),p(T5.$$.fragment,c),p(E5.$$.fragment,c),p(C5.$$.fragment,c),p(w5.$$.fragment,c),p(A5.$$.fragment,c),p(y5.$$.fragment,c),p(L5.$$.fragment,c),p(k5.$$.fragment,c),p(S5.$$.fragment,c),p(R5.$$.fragment,c),p(B5.$$.fragment,c),p(P5.$$.fragment,c),p($5.$$.fragment,c),p(q5.$$.fragment,c),p(N5.$$.fragment,c),p(j5.$$.fragment,c),p(D5.$$.fragment,c),p(G5.$$.fragment,c),p(O5.$$.fragment,c),p(X5.$$.fragment,c),p(z5.$$.fragment,c),p(Q5.$$.fragment,c),p(W5.$$.fragment,c),p(H5.$$.fragment,c),p(U5.$$.fragment,c),p(Y5.$$.fragment,c),p(K5.$$.fragment,c),p(Z5.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(rC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(dC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(_C.$$.fragment,c),p(bC.$$.fragment,c),p(vC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(EC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(kC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(qC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(N0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(eL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),CPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(ERe),c&&t(Xi),_(kE),c&&t(CRe),c&&t(Qn),c&&t(wRe),_(SE,c),c&&t(ARe),c&&t(E7),c&&t(yRe),_(Of,c),c&&t(LRe),c&&t(zi),_(RE),c&&t(xRe),c&&t(Qo),_(BE),_(IE),_(qE),_(NE),c&&t(kRe),c&&t(Wi),_(jE),c&&t(SRe),c&&t(Wo),_(DE),_(VE),_(XE),_(zE),c&&t(RRe),c&&t(Hi),_(QE),c&&t(BRe),c&&t(Ho),_(WE),_(JE),_(qh),_(YE),_(KE),c&&t(PRe),c&&t(Ui),_(ZE),c&&t($Re),c&&t(Uo),_(e5),_(t5),_(Hh),_(a5),_(n5),c&&t(IRe),c&&t(Yi),_(s5),c&&t(qRe),c&&t(Jo),_(l5),_(d5),_(c5),_(f5),_(m5),c&&t(NRe),c&&t(ed),_(g5),c&&t(jRe),c&&t(Yo),_(h5),_(_5),_(u5),_(b5),_(v5),c&&t(DRe),c&&t(td),_(F5),c&&t(GRe),c&&t(Ko),_(T5),_(E5),_(C5),_(w5),_(A5),c&&t(ORe),c&&t(sd),_(y5),c&&t(VRe),c&&t(Zo),_(L5),_(k5),_(S5),_(R5),_(B5),c&&t(XRe),c&&t(dd),_(P5),c&&t(zRe),c&&t(er),_($5),_(q5),_(N5),_(j5),_(D5),c&&t(QRe),c&&t(md),_(G5),c&&t(WRe),c&&t(or),_(O5),_(X5),_(z5),_(Q5),_(W5),c&&t(HRe),c&&t(pd),_(H5),c&&t(URe),c&&t(rr),_(U5),_(Y5),_(K5),_(Z5),_(eC),c&&t(JRe),c&&t(bd),_(oC),c&&t(YRe),c&&t(tr),_(rC),_(aC),_(nC),_(sC),_(lC),c&&t(KRe),c&&t(Td),_(iC),c&&t(ZRe),c&&t(ar),_(dC),_(fC),_(mC),_(gC),_(hC),c&&t(eBe),c&&t(Cd),_(pC),c&&t(oBe),c&&t(nr),_(_C),_(bC),_(vC),_(FC),_(TC),c&&t(rBe),c&&t(yd),_(MC),c&&t(tBe),c&&t(sr),_(EC),_(wC),_(AC),_(yC),_(LC),c&&t(aBe),c&&t(kd),_(xC),c&&t(nBe),c&&t(lr),_(kC),_(RC),_(BC),_(PC),_($C),c&&t(sBe),c&&t(Bd),_(IC),c&&t(lBe),c&&t(ir),_(qC),_(jC),_(DC),_(GC),_(OC),c&&t(iBe),c&&t(Id),_(VC),c&&t(dBe),c&&t(dr),_(XC),_(QC),_(WC),_(HC),_(UC),c&&t(cBe),c&&t(jd),_(JC),c&&t(fBe),c&&t(cr),_(YC),_(ZC),_(ew),_(ow),_(rw),c&&t(mBe),c&&t(Od),_(tw),c&&t(gBe),c&&t(fr),_(aw),_(sw),_(lw),_(iw),_(dw),c&&t(hBe),c&&t(zd),_(cw),c&&t(pBe),c&&t(mr),_(fw),_(gw),_(hw),_(pw),_(uw),c&&t(_Be),c&&t(Hd),_(bw),c&&t(uBe),c&&t(gr),_(vw),_(Tw),_(Mw),_(Ew),_(Cw),c&&t(bBe),c&&t(Yd),_(ww),c&&t(vBe),c&&t(hr),_(Aw),_(Lw),_(xw),_(kw),_(Sw),c&&t(FBe),c&&t(oc),_(Rw),c&&t(TBe),c&&t(pr),_(Bw),_($w),_(Iw),_(qw),_(Nw),c&&t(MBe),c&&t(ac),_(jw),c&&t(EBe),c&&t(_r),_(Dw),_(Ow),_(Vw),_(Xw),_(zw),c&&t(CBe),c&&t(lc),_(Qw),c&&t(wBe),c&&t(ur),_(Ww),_(Uw),_(Jw),_(Yw),_(Kw),c&&t(ABe),c&&t(cc),_(Zw),c&&t(yBe),c&&t(br),_(eA),_(rA),_(tA),_(aA),_(nA),c&&t(LBe),c&&t(gc),_(sA),c&&t(xBe),c&&t(vr),_(lA),_(dA),_(cA),_(fA),_(mA),c&&t(kBe),c&&t(_c),_(gA),c&&t(SBe),c&&t(Fr),_(hA),_(_A),_(uA),_(bA),_(vA),c&&t(RBe),c&&t(vc),_(FA),c&&t(BBe),c&&t(Tr),_(TA),_(EA),_(CA),_(wA),_(AA),c&&t(PBe),c&&t(Mc),_(yA),c&&t($Be),c&&t(Mr),_(LA),_(kA),_(SA),_(RA),_(PA),c&&t(IBe),c&&t(wc),_($A),c&&t(qBe),c&&t(Er),_(IA),_(NA),_(jA),_(DA),_(GA),c&&t(NBe),c&&t(Lc),_(OA),c&&t(jBe),c&&t(Cr),_(VA),_(zA),_(QA),_(WA),_(HA),c&&t(DBe),c&&t(Sc),_(UA),c&&t(GBe),c&&t(wr),_(JA),_(KA),_(ZA),_(e0),_(o0),c&&t(OBe),c&&t(Pc),_(r0),c&&t(VBe),c&&t(Ar),_(t0),_(n0),_(s0),_(l0),_(i0),c&&t(XBe),c&&t(qc),_(d0),c&&t(zBe),c&&t(yr),_(c0),_(m0),_(g0),_(h0),_(p0),c&&t(QBe),c&&t(Dc),_(_0),c&&t(WBe),c&&t(Lr),_(u0),_(v0),_(F0),_(T0),_(M0),c&&t(HBe),c&&t(Vc),_(E0),c&&t(UBe),c&&t(xr),_(C0),_(A0),_(y0),_(L0),_(x0),c&&t(JBe),c&&t(Qc),_(k0),c&&t(YBe),c&&t(kr),_(S0),_(B0),_(P0),_($0),_(I0),c&&t(KBe),c&&t(Uc),_(q0),c&&t(ZBe),c&&t(Sr),_(N0),_(D0),_(G0),_(O0),_(V0),c&&t(ePe),c&&t(Kc),_(X0),c&&t(oPe),c&&t(Rr),_(z0),_(W0),_(H0),_(U0),_(J0),c&&t(rPe),c&&t(of),_(Y0),c&&t(tPe),c&&t(Br),_(K0),_(ey),_(oy),_(ry),_(ty),c&&t(aPe),c&&t(af),_(ay),c&&t(nPe),c&&t(Pr),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(sPe),c&&t(lf),_(fy),c&&t(lPe),c&&t($r),_(my),_(hy),_(py),_(_y),_(uy),c&&t(iPe),c&&t(ff),_(by),c&&t(dPe),c&&t(Ir),_(vy),_(Ty),_(My),_(Ey),_(Cy),c&&t(cPe),c&&t(hf),_(wy),c&&t(fPe),c&&t(qr),_(Ay),_(Ly),_(xy),_(ky),_(Sy),c&&t(mPe),c&&t(uf),_(Ry),c&&t(gPe),c&&t(Nr),_(By),_($y),_(Iy),_(qy),_(Ny),c&&t(hPe),c&&t(Ff),_(jy),c&&t(pPe),c&&t(jr),_(Dy),_(Oy),_(Vy),_(Xy),_(zy),c&&t(_Pe),c&&t(Ef),_(Qy),c&&t(uPe),c&&t(Dr),_(Wy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(bPe),c&&t(Af),_(Zy),c&&t(vPe),c&&t(Gr),_(eL),_(rL),_(tL),_(aL),_(nL),c&&t(FPe),c&&t(xf),_(sL),c&&t(TPe),c&&t(Or),_(lL),_(dL),_(cL),_(fL),_(gL),c&&t(MPe),c&&t(Rf),_(hL),c&&t(EPe),c&&t(Vr),_(pL),_(uL),_(bL),_(vL),_(FL)}}}const l5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function i5t(If){return r5t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class h5t extends KEt{constructor(Z){super();ZEt(this,Z,i5t,s5t,e5t,{})}}export{h5t as default,l5t as metadata};
