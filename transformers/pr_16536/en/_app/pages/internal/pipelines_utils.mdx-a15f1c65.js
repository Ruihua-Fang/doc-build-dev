import{S as Qa,i as Ra,s as Ba,e as a,k as p,w as h,t as s,M as Ma,c as o,d as r,m as l,a as n,x as u,h as i,b as m,F as e,g as d,y as g,L as za,q as v,o as _,B as $,v as Za}from"../../chunks/vendor-6b77c823.js";import{D as b}from"../../chunks/Docstring-abef54e3.js";import{I as Vt}from"../../chunks/IconCopyLink-7a11ce68.js";function Ga(sa){let F,ot,x,H,Le,Z,Ht,Oe,Nt,nt,ve,Wt,st,_e,Jt,it,S,N,Ce,G,qt,Ie,jt,pt,A,K,Ut,X,Qt,$e,Rt,Bt,lt,k,Y,Mt,Te,zt,mt,D,ee,Zt,Pe,Gt,Ve,Kt,Xt,te,Yt,He,er,tr,ct,L,W,Ne,re,rr,We,ar,dt,f,ae,or,Je,nr,sr,O,qe,ir,pr,je,lr,mr,Ue,cr,dr,J,Qe,fr,hr,Re,ur,gr,vr,q,oe,_r,C,$r,be,Pr,br,Be,wr,Dr,yr,j,ne,Er,se,Fr,we,xr,Sr,Ar,U,ie,kr,Me,Lr,ft,y,pe,Or,ze,Cr,Ir,Q,le,Tr,me,Vr,De,Hr,Nr,ht,E,ce,Wr,Ze,Jr,qr,R,de,jr,Ge,Ur,ut,w,fe,Qr,Ke,Rr,Br,Xe,Mr,zr,B,he,Zr,Ye,Gr,gt,I,M,et,ue,Kr,tt,Xr,vt,T,ge,Yr,V,ea,ye,ta,ra,rt,aa,oa,_t;return Z=new Vt({}),G=new Vt({}),K=new b({props:{name:"class transformers.pipelines.ArgumentHandler",anchor:"transformers.pipelines.ArgumentHandler",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L393"}}),Y=new b({props:{name:"class transformers.pipelines.ZeroShotClassificationArgumentHandler",anchor:"transformers.pipelines.ZeroShotClassificationArgumentHandler",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/zero_shot_classification.py#L13"}}),ee=new b({props:{name:"class transformers.pipelines.QuestionAnsweringArgumentHandler",anchor:"transformers.pipelines.QuestionAnsweringArgumentHandler",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/question_answering.py#L31"}}),re=new Vt({}),ae=new b({props:{name:"class transformers.PipelineDataFormat",anchor:"transformers.PipelineDataFormat",parameters:[{name:"output_path",val:": typing.Optional[str]"},{name:"input_path",val:": typing.Optional[str]"},{name:"column",val:": typing.Optional[str]"},{name:"overwrite",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L403",parametersDescription:[{anchor:"transformers.PipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.PipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.PipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.PipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}]}}),oe=new b({props:{name:"from_str",anchor:"transformers.PipelineDataFormat.from_str",parameters:[{name:"format",val:": str"},{name:"output_path",val:": typing.Optional[str]"},{name:"input_path",val:": typing.Optional[str]"},{name:"column",val:": typing.Optional[str]"},{name:"overwrite",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L480",parametersDescription:[{anchor:"transformers.PipelineDataFormat.from_str.output_path",description:`<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Where to save the outgoing data.`,name:"output_path"},{anchor:"transformers.PipelineDataFormat.from_str.input_path",description:`<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Where to look for the input data.`,name:"input_path"},{anchor:"transformers.PipelineDataFormat.from_str.column",description:`<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014;
The column to read.`,name:"column"},{anchor:"transformers.PipelineDataFormat.from_str.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}],returnDescription:`
<p>The proper data format.</p>
`,returnType:`
<p><a
  href="/docs/transformers/pr_16536/en/internal/pipelines_utils#transformers.PipelineDataFormat"
>PipelineDataFormat</a></p>
`}}),ne=new b({props:{name:"save",anchor:"transformers.PipelineDataFormat.save",parameters:[{name:"data",val:": typing.Union[dict, typing.List[dict]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L452",parametersDescription:[{anchor:"transformers.PipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code> or list of <code>dict</code>) &#x2014; The data to store.",name:"data"}]}}),ie=new b({props:{name:"save_binary",anchor:"transformers.PipelineDataFormat.save_binary",parameters:[{name:"data",val:": typing.Union[dict, typing.List[dict]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L462",parametersDescription:[{anchor:"transformers.PipelineDataFormat.save_binary.data",description:"<strong>data</strong> (<code>dict</code> or list of <code>dict</code>) &#x2014; The data to store.",name:"data"}],returnDescription:`
<p>Path where the data has been saved.</p>
`,returnType:`
<p><code>str</code></p>
`}}),pe=new b({props:{name:"class transformers.CsvPipelineDataFormat",anchor:"transformers.CsvPipelineDataFormat",parameters:[{name:"output_path",val:": typing.Optional[str]"},{name:"input_path",val:": typing.Optional[str]"},{name:"column",val:": typing.Optional[str]"},{name:"overwrite",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L516",parametersDescription:[{anchor:"transformers.CsvPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.CsvPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.CsvPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.CsvPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}]}}),le=new b({props:{name:"save",anchor:"transformers.CsvPipelineDataFormat.save",parameters:[{name:"data",val:": typing.List[dict]"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L546",parametersDescription:[{anchor:"transformers.CsvPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>List[dict]</code>) &#x2014; The data to store.",name:"data"}]}}),ce=new b({props:{name:"class transformers.JsonPipelineDataFormat",anchor:"transformers.JsonPipelineDataFormat",parameters:[{name:"output_path",val:": typing.Optional[str]"},{name:"input_path",val:": typing.Optional[str]"},{name:"column",val:": typing.Optional[str]"},{name:"overwrite",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L560",parametersDescription:[{anchor:"transformers.JsonPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.JsonPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.JsonPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.JsonPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}]}}),de=new b({props:{name:"save",anchor:"transformers.JsonPipelineDataFormat.save",parameters:[{name:"data",val:": dict"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L591",parametersDescription:[{anchor:"transformers.JsonPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code>) &#x2014; The data to store.",name:"data"}]}}),fe=new b({props:{name:"class transformers.PipedPipelineDataFormat",anchor:"transformers.PipedPipelineDataFormat",parameters:[{name:"output_path",val:": typing.Optional[str]"},{name:"input_path",val:": typing.Optional[str]"},{name:"column",val:": typing.Optional[str]"},{name:"overwrite",val:": bool = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L602",parametersDescription:[{anchor:"transformers.PipedPipelineDataFormat.output_path",description:"<strong>output_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to save the outgoing data.",name:"output_path"},{anchor:"transformers.PipedPipelineDataFormat.input_path",description:"<strong>input_path</strong> (<code>str</code>, <em>optional</em>) &#x2014; Where to look for the input data.",name:"input_path"},{anchor:"transformers.PipedPipelineDataFormat.column",description:"<strong>column</strong> (<code>str</code>, <em>optional</em>) &#x2014; The column to read.",name:"column"},{anchor:"transformers.PipedPipelineDataFormat.overwrite",description:`<strong>overwrite</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to overwrite the <code>output_path</code>.`,name:"overwrite"}]}}),he=new b({props:{name:"save",anchor:"transformers.PipedPipelineDataFormat.save",parameters:[{name:"data",val:": dict"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L632",parametersDescription:[{anchor:"transformers.PipedPipelineDataFormat.save.data",description:"<strong>data</strong> (<code>dict</code>) &#x2014; The data to store.",name:"data"}]}}),ue=new Vt({}),ge=new b({props:{name:"class transformers.pipelines.PipelineException",anchor:"transformers.pipelines.PipelineException",parameters:[{name:"task",val:": str"},{name:"model",val:": str"},{name:"reason",val:": str"}],source:"https://github.com/huggingface/transformers/blob/pr_16536/src/transformers/pipelines/base.py#L376",parametersDescription:[{anchor:"transformers.pipelines.PipelineException.task",description:"<strong>task</strong> (<code>str</code>) &#x2014; The task of the pipeline.",name:"task"},{anchor:"transformers.pipelines.PipelineException.model",description:"<strong>model</strong> (<code>str</code>) &#x2014; The model used by the pipeline.",name:"model"},{anchor:"transformers.pipelines.PipelineException.reason",description:"<strong>reason</strong> (<code>str</code>) &#x2014; The error message to display.",name:"reason"}]}}),{c(){F=a("meta"),ot=p(),x=a("h1"),H=a("a"),Le=a("span"),h(Z.$$.fragment),Ht=p(),Oe=a("span"),Nt=s("Utilities for pipelines"),nt=p(),ve=a("p"),Wt=s("This page lists all the utility functions the library provides for pipelines."),st=p(),_e=a("p"),Jt=s("Most of those are only useful if you are studying the code of the models in the library."),it=p(),S=a("h2"),N=a("a"),Ce=a("span"),h(G.$$.fragment),qt=p(),Ie=a("span"),jt=s("Argument handling"),pt=p(),A=a("div"),h(K.$$.fragment),Ut=p(),X=a("p"),Qt=s("Base interface for handling arguments for each "),$e=a("a"),Rt=s("Pipeline"),Bt=s("."),lt=p(),k=a("div"),h(Y.$$.fragment),Mt=p(),Te=a("p"),zt=s(`Handles arguments for zero-shot for text classification by turning each possible label into an NLI
premise/hypothesis pair.`),mt=p(),D=a("div"),h(ee.$$.fragment),Zt=p(),Pe=a("p"),Gt=s(`QuestionAnsweringPipeline requires the user to provide multiple arguments (i.e. question & context) to be mapped to
internal `),Ve=a("code"),Kt=s("SquadExample"),Xt=p(),te=a("p"),Yt=s("QuestionAnsweringArgumentHandler manages all the possible to create a "),He=a("code"),er=s("SquadExample"),tr=s(`from the command-line
supplied arguments.`),ct=p(),L=a("h2"),W=a("a"),Ne=a("span"),h(re.$$.fragment),rr=p(),We=a("span"),ar=s("Data format"),dt=p(),f=a("div"),h(ae.$$.fragment),or=p(),Je=a("p"),nr=s(`Base class for all the pipeline supported data format both for reading and writing. Supported data formats
currently includes:`),sr=p(),O=a("ul"),qe=a("li"),ir=s("JSON"),pr=p(),je=a("li"),lr=s("CSV"),mr=p(),Ue=a("li"),cr=s("stdin/stdout (pipe)"),dr=p(),J=a("p"),Qe=a("code"),fr=s("PipelineDataFormat"),hr=s(` also includes some utilities to work with multi-columns like mapping from datasets columns to
pipelines keyword arguments through the `),Re=a("code"),ur=s("dataset_kwarg_1=dataset_column_1"),gr=s(" format."),vr=p(),q=a("div"),h(oe.$$.fragment),_r=p(),C=a("p"),$r=s("Creates an instance of the right subclass of "),be=a("a"),Pr=s("PipelineDataFormat"),br=s(" depending on "),Be=a("code"),wr=s("format"),Dr=s("."),yr=p(),j=a("div"),h(ne.$$.fragment),Er=p(),se=a("p"),Fr=s("Save the provided data object with the representation for the current "),we=a("a"),xr=s("PipelineDataFormat"),Sr=s("."),Ar=p(),U=a("div"),h(ie.$$.fragment),kr=p(),Me=a("p"),Lr=s("Save the provided data object as a pickle-formatted binary data on the disk."),ft=p(),y=a("div"),h(pe.$$.fragment),Or=p(),ze=a("p"),Cr=s("Support for pipelines using CSV data format."),Ir=p(),Q=a("div"),h(le.$$.fragment),Tr=p(),me=a("p"),Vr=s("Save the provided data object with the representation for the current "),De=a("a"),Hr=s("PipelineDataFormat"),Nr=s("."),ht=p(),E=a("div"),h(ce.$$.fragment),Wr=p(),Ze=a("p"),Jr=s("Support for pipelines using JSON file format."),qr=p(),R=a("div"),h(de.$$.fragment),jr=p(),Ge=a("p"),Ur=s("Save the provided data object in a json file."),ut=p(),w=a("div"),h(fe.$$.fragment),Qr=p(),Ke=a("p"),Rr=s("Read data from piped input to the python process. For multi columns data, columns should separated by"),Br=p(),Xe=a("p"),Mr=s("If columns are provided, then the output will be a dictionary with {column_x: value_x}"),zr=p(),B=a("div"),h(he.$$.fragment),Zr=p(),Ye=a("p"),Gr=s("Print the data."),gt=p(),I=a("h2"),M=a("a"),et=a("span"),h(ue.$$.fragment),Kr=p(),tt=a("span"),Xr=s("Utilities"),vt=p(),T=a("div"),h(ge.$$.fragment),Yr=p(),V=a("p"),ea=s("Raised by a "),ye=a("a"),ta=s("Pipeline"),ra=s(" when handling "),rt=a("strong"),aa=s("call"),oa=s("."),this.h()},l(t){const c=Ma('[data-svelte="svelte-1phssyn"]',document.head);F=o(c,"META",{name:!0,content:!0}),c.forEach(r),ot=l(t),x=o(t,"H1",{class:!0});var $t=n(x);H=o($t,"A",{id:!0,class:!0,href:!0});var ia=n(H);Le=o(ia,"SPAN",{});var pa=n(Le);u(Z.$$.fragment,pa),pa.forEach(r),ia.forEach(r),Ht=l($t),Oe=o($t,"SPAN",{});var la=n(Oe);Nt=i(la,"Utilities for pipelines"),la.forEach(r),$t.forEach(r),nt=l(t),ve=o(t,"P",{});var ma=n(ve);Wt=i(ma,"This page lists all the utility functions the library provides for pipelines."),ma.forEach(r),st=l(t),_e=o(t,"P",{});var ca=n(_e);Jt=i(ca,"Most of those are only useful if you are studying the code of the models in the library."),ca.forEach(r),it=l(t),S=o(t,"H2",{class:!0});var Pt=n(S);N=o(Pt,"A",{id:!0,class:!0,href:!0});var da=n(N);Ce=o(da,"SPAN",{});var fa=n(Ce);u(G.$$.fragment,fa),fa.forEach(r),da.forEach(r),qt=l(Pt),Ie=o(Pt,"SPAN",{});var ha=n(Ie);jt=i(ha,"Argument handling"),ha.forEach(r),Pt.forEach(r),pt=l(t),A=o(t,"DIV",{class:!0});var bt=n(A);u(K.$$.fragment,bt),Ut=l(bt),X=o(bt,"P",{});var wt=n(X);Qt=i(wt,"Base interface for handling arguments for each "),$e=o(wt,"A",{href:!0});var ua=n($e);Rt=i(ua,"Pipeline"),ua.forEach(r),Bt=i(wt,"."),wt.forEach(r),bt.forEach(r),lt=l(t),k=o(t,"DIV",{class:!0});var Dt=n(k);u(Y.$$.fragment,Dt),Mt=l(Dt),Te=o(Dt,"P",{});var ga=n(Te);zt=i(ga,`Handles arguments for zero-shot for text classification by turning each possible label into an NLI
premise/hypothesis pair.`),ga.forEach(r),Dt.forEach(r),mt=l(t),D=o(t,"DIV",{class:!0});var Ee=n(D);u(ee.$$.fragment,Ee),Zt=l(Ee),Pe=o(Ee,"P",{});var na=n(Pe);Gt=i(na,`QuestionAnsweringPipeline requires the user to provide multiple arguments (i.e. question & context) to be mapped to
internal `),Ve=o(na,"CODE",{});var va=n(Ve);Kt=i(va,"SquadExample"),va.forEach(r),na.forEach(r),Xt=l(Ee),te=o(Ee,"P",{});var yt=n(te);Yt=i(yt,"QuestionAnsweringArgumentHandler manages all the possible to create a "),He=o(yt,"CODE",{});var _a=n(He);er=i(_a,"SquadExample"),_a.forEach(r),tr=i(yt,`from the command-line
supplied arguments.`),yt.forEach(r),Ee.forEach(r),ct=l(t),L=o(t,"H2",{class:!0});var Et=n(L);W=o(Et,"A",{id:!0,class:!0,href:!0});var $a=n(W);Ne=o($a,"SPAN",{});var Pa=n(Ne);u(re.$$.fragment,Pa),Pa.forEach(r),$a.forEach(r),rr=l(Et),We=o(Et,"SPAN",{});var ba=n(We);ar=i(ba,"Data format"),ba.forEach(r),Et.forEach(r),dt=l(t),f=o(t,"DIV",{class:!0});var P=n(f);u(ae.$$.fragment,P),or=l(P),Je=o(P,"P",{});var wa=n(Je);nr=i(wa,`Base class for all the pipeline supported data format both for reading and writing. Supported data formats
currently includes:`),wa.forEach(r),sr=l(P),O=o(P,"UL",{});var Fe=n(O);qe=o(Fe,"LI",{});var Da=n(qe);ir=i(Da,"JSON"),Da.forEach(r),pr=l(Fe),je=o(Fe,"LI",{});var ya=n(je);lr=i(ya,"CSV"),ya.forEach(r),mr=l(Fe),Ue=o(Fe,"LI",{});var Ea=n(Ue);cr=i(Ea,"stdin/stdout (pipe)"),Ea.forEach(r),Fe.forEach(r),dr=l(P),J=o(P,"P",{});var at=n(J);Qe=o(at,"CODE",{});var Fa=n(Qe);fr=i(Fa,"PipelineDataFormat"),Fa.forEach(r),hr=i(at,` also includes some utilities to work with multi-columns like mapping from datasets columns to
pipelines keyword arguments through the `),Re=o(at,"CODE",{});var xa=n(Re);ur=i(xa,"dataset_kwarg_1=dataset_column_1"),xa.forEach(r),gr=i(at," format."),at.forEach(r),vr=l(P),q=o(P,"DIV",{class:!0});var Ft=n(q);u(oe.$$.fragment,Ft),_r=l(Ft),C=o(Ft,"P",{});var xe=n(C);$r=i(xe,"Creates an instance of the right subclass of "),be=o(xe,"A",{href:!0});var Sa=n(be);Pr=i(Sa,"PipelineDataFormat"),Sa.forEach(r),br=i(xe," depending on "),Be=o(xe,"CODE",{});var Aa=n(Be);wr=i(Aa,"format"),Aa.forEach(r),Dr=i(xe,"."),xe.forEach(r),Ft.forEach(r),yr=l(P),j=o(P,"DIV",{class:!0});var xt=n(j);u(ne.$$.fragment,xt),Er=l(xt),se=o(xt,"P",{});var St=n(se);Fr=i(St,"Save the provided data object with the representation for the current "),we=o(St,"A",{href:!0});var ka=n(we);xr=i(ka,"PipelineDataFormat"),ka.forEach(r),Sr=i(St,"."),St.forEach(r),xt.forEach(r),Ar=l(P),U=o(P,"DIV",{class:!0});var At=n(U);u(ie.$$.fragment,At),kr=l(At),Me=o(At,"P",{});var La=n(Me);Lr=i(La,"Save the provided data object as a pickle-formatted binary data on the disk."),La.forEach(r),At.forEach(r),P.forEach(r),ft=l(t),y=o(t,"DIV",{class:!0});var Se=n(y);u(pe.$$.fragment,Se),Or=l(Se),ze=o(Se,"P",{});var Oa=n(ze);Cr=i(Oa,"Support for pipelines using CSV data format."),Oa.forEach(r),Ir=l(Se),Q=o(Se,"DIV",{class:!0});var kt=n(Q);u(le.$$.fragment,kt),Tr=l(kt),me=o(kt,"P",{});var Lt=n(me);Vr=i(Lt,"Save the provided data object with the representation for the current "),De=o(Lt,"A",{href:!0});var Ca=n(De);Hr=i(Ca,"PipelineDataFormat"),Ca.forEach(r),Nr=i(Lt,"."),Lt.forEach(r),kt.forEach(r),Se.forEach(r),ht=l(t),E=o(t,"DIV",{class:!0});var Ae=n(E);u(ce.$$.fragment,Ae),Wr=l(Ae),Ze=o(Ae,"P",{});var Ia=n(Ze);Jr=i(Ia,"Support for pipelines using JSON file format."),Ia.forEach(r),qr=l(Ae),R=o(Ae,"DIV",{class:!0});var Ot=n(R);u(de.$$.fragment,Ot),jr=l(Ot),Ge=o(Ot,"P",{});var Ta=n(Ge);Ur=i(Ta,"Save the provided data object in a json file."),Ta.forEach(r),Ot.forEach(r),Ae.forEach(r),ut=l(t),w=o(t,"DIV",{class:!0});var z=n(w);u(fe.$$.fragment,z),Qr=l(z),Ke=o(z,"P",{});var Va=n(Ke);Rr=i(Va,"Read data from piped input to the python process. For multi columns data, columns should separated by"),Va.forEach(r),Br=l(z),Xe=o(z,"P",{});var Ha=n(Xe);Mr=i(Ha,"If columns are provided, then the output will be a dictionary with {column_x: value_x}"),Ha.forEach(r),zr=l(z),B=o(z,"DIV",{class:!0});var Ct=n(B);u(he.$$.fragment,Ct),Zr=l(Ct),Ye=o(Ct,"P",{});var Na=n(Ye);Gr=i(Na,"Print the data."),Na.forEach(r),Ct.forEach(r),z.forEach(r),gt=l(t),I=o(t,"H2",{class:!0});var It=n(I);M=o(It,"A",{id:!0,class:!0,href:!0});var Wa=n(M);et=o(Wa,"SPAN",{});var Ja=n(et);u(ue.$$.fragment,Ja),Ja.forEach(r),Wa.forEach(r),Kr=l(It),tt=o(It,"SPAN",{});var qa=n(tt);Xr=i(qa,"Utilities"),qa.forEach(r),It.forEach(r),vt=l(t),T=o(t,"DIV",{class:!0});var Tt=n(T);u(ge.$$.fragment,Tt),Yr=l(Tt),V=o(Tt,"P",{});var ke=n(V);ea=i(ke,"Raised by a "),ye=o(ke,"A",{href:!0});var ja=n(ye);ta=i(ja,"Pipeline"),ja.forEach(r),ra=i(ke," when handling "),rt=o(ke,"STRONG",{});var Ua=n(rt);aa=i(Ua,"call"),Ua.forEach(r),oa=i(ke,"."),ke.forEach(r),Tt.forEach(r),this.h()},h(){m(F,"name","hf:doc:metadata"),m(F,"content",JSON.stringify(Ka)),m(H,"id","utilities-for-pipelines"),m(H,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(H,"href","#utilities-for-pipelines"),m(x,"class","relative group"),m(N,"id","transformers.pipelines.ArgumentHandler"),m(N,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(N,"href","#transformers.pipelines.ArgumentHandler"),m(S,"class","relative group"),m($e,"href","/docs/transformers/pr_16536/en/main_classes/pipelines#transformers.Pipeline"),m(A,"class","docstring"),m(k,"class","docstring"),m(D,"class","docstring"),m(W,"id","transformers.PipelineDataFormat"),m(W,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(W,"href","#transformers.PipelineDataFormat"),m(L,"class","relative group"),m(be,"href","/docs/transformers/pr_16536/en/internal/pipelines_utils#transformers.PipelineDataFormat"),m(q,"class","docstring"),m(we,"href","/docs/transformers/pr_16536/en/internal/pipelines_utils#transformers.PipelineDataFormat"),m(j,"class","docstring"),m(U,"class","docstring"),m(f,"class","docstring"),m(De,"href","/docs/transformers/pr_16536/en/internal/pipelines_utils#transformers.PipelineDataFormat"),m(Q,"class","docstring"),m(y,"class","docstring"),m(R,"class","docstring"),m(E,"class","docstring"),m(B,"class","docstring"),m(w,"class","docstring"),m(M,"id","transformers.pipelines.PipelineException"),m(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),m(M,"href","#transformers.pipelines.PipelineException"),m(I,"class","relative group"),m(ye,"href","/docs/transformers/pr_16536/en/main_classes/pipelines#transformers.Pipeline"),m(T,"class","docstring")},m(t,c){e(document.head,F),d(t,ot,c),d(t,x,c),e(x,H),e(H,Le),g(Z,Le,null),e(x,Ht),e(x,Oe),e(Oe,Nt),d(t,nt,c),d(t,ve,c),e(ve,Wt),d(t,st,c),d(t,_e,c),e(_e,Jt),d(t,it,c),d(t,S,c),e(S,N),e(N,Ce),g(G,Ce,null),e(S,qt),e(S,Ie),e(Ie,jt),d(t,pt,c),d(t,A,c),g(K,A,null),e(A,Ut),e(A,X),e(X,Qt),e(X,$e),e($e,Rt),e(X,Bt),d(t,lt,c),d(t,k,c),g(Y,k,null),e(k,Mt),e(k,Te),e(Te,zt),d(t,mt,c),d(t,D,c),g(ee,D,null),e(D,Zt),e(D,Pe),e(Pe,Gt),e(Pe,Ve),e(Ve,Kt),e(D,Xt),e(D,te),e(te,Yt),e(te,He),e(He,er),e(te,tr),d(t,ct,c),d(t,L,c),e(L,W),e(W,Ne),g(re,Ne,null),e(L,rr),e(L,We),e(We,ar),d(t,dt,c),d(t,f,c),g(ae,f,null),e(f,or),e(f,Je),e(Je,nr),e(f,sr),e(f,O),e(O,qe),e(qe,ir),e(O,pr),e(O,je),e(je,lr),e(O,mr),e(O,Ue),e(Ue,cr),e(f,dr),e(f,J),e(J,Qe),e(Qe,fr),e(J,hr),e(J,Re),e(Re,ur),e(J,gr),e(f,vr),e(f,q),g(oe,q,null),e(q,_r),e(q,C),e(C,$r),e(C,be),e(be,Pr),e(C,br),e(C,Be),e(Be,wr),e(C,Dr),e(f,yr),e(f,j),g(ne,j,null),e(j,Er),e(j,se),e(se,Fr),e(se,we),e(we,xr),e(se,Sr),e(f,Ar),e(f,U),g(ie,U,null),e(U,kr),e(U,Me),e(Me,Lr),d(t,ft,c),d(t,y,c),g(pe,y,null),e(y,Or),e(y,ze),e(ze,Cr),e(y,Ir),e(y,Q),g(le,Q,null),e(Q,Tr),e(Q,me),e(me,Vr),e(me,De),e(De,Hr),e(me,Nr),d(t,ht,c),d(t,E,c),g(ce,E,null),e(E,Wr),e(E,Ze),e(Ze,Jr),e(E,qr),e(E,R),g(de,R,null),e(R,jr),e(R,Ge),e(Ge,Ur),d(t,ut,c),d(t,w,c),g(fe,w,null),e(w,Qr),e(w,Ke),e(Ke,Rr),e(w,Br),e(w,Xe),e(Xe,Mr),e(w,zr),e(w,B),g(he,B,null),e(B,Zr),e(B,Ye),e(Ye,Gr),d(t,gt,c),d(t,I,c),e(I,M),e(M,et),g(ue,et,null),e(I,Kr),e(I,tt),e(tt,Xr),d(t,vt,c),d(t,T,c),g(ge,T,null),e(T,Yr),e(T,V),e(V,ea),e(V,ye),e(ye,ta),e(V,ra),e(V,rt),e(rt,aa),e(V,oa),_t=!0},p:za,i(t){_t||(v(Z.$$.fragment,t),v(G.$$.fragment,t),v(K.$$.fragment,t),v(Y.$$.fragment,t),v(ee.$$.fragment,t),v(re.$$.fragment,t),v(ae.$$.fragment,t),v(oe.$$.fragment,t),v(ne.$$.fragment,t),v(ie.$$.fragment,t),v(pe.$$.fragment,t),v(le.$$.fragment,t),v(ce.$$.fragment,t),v(de.$$.fragment,t),v(fe.$$.fragment,t),v(he.$$.fragment,t),v(ue.$$.fragment,t),v(ge.$$.fragment,t),_t=!0)},o(t){_(Z.$$.fragment,t),_(G.$$.fragment,t),_(K.$$.fragment,t),_(Y.$$.fragment,t),_(ee.$$.fragment,t),_(re.$$.fragment,t),_(ae.$$.fragment,t),_(oe.$$.fragment,t),_(ne.$$.fragment,t),_(ie.$$.fragment,t),_(pe.$$.fragment,t),_(le.$$.fragment,t),_(ce.$$.fragment,t),_(de.$$.fragment,t),_(fe.$$.fragment,t),_(he.$$.fragment,t),_(ue.$$.fragment,t),_(ge.$$.fragment,t),_t=!1},d(t){r(F),t&&r(ot),t&&r(x),$(Z),t&&r(nt),t&&r(ve),t&&r(st),t&&r(_e),t&&r(it),t&&r(S),$(G),t&&r(pt),t&&r(A),$(K),t&&r(lt),t&&r(k),$(Y),t&&r(mt),t&&r(D),$(ee),t&&r(ct),t&&r(L),$(re),t&&r(dt),t&&r(f),$(ae),$(oe),$(ne),$(ie),t&&r(ft),t&&r(y),$(pe),$(le),t&&r(ht),t&&r(E),$(ce),$(de),t&&r(ut),t&&r(w),$(fe),$(he),t&&r(gt),t&&r(I),$(ue),t&&r(vt),t&&r(T),$(ge)}}}const Ka={local:"utilities-for-pipelines",sections:[{local:"transformers.pipelines.ArgumentHandler",title:"Argument handling"},{local:"transformers.PipelineDataFormat",title:"Data format"},{local:"transformers.pipelines.PipelineException",title:"Utilities"}],title:"Utilities for pipelines"};function Xa(sa){return Za(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ro extends Qa{constructor(F){super();Ra(this,F,Xa,Ga,Ba,{})}}export{ro as default,Ka as metadata};
