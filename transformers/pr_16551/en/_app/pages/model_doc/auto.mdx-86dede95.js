import{S as eCt,i as oCt,s as rCt,e as a,k as l,w as f,t as o,M as tCt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as aCt}from"../../chunks/vendor-6b77c823.js";import{T as NRr}from"../../chunks/Tip-39098574.js";import{D as E}from"../../chunks/Docstring-abef54e3.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function nCt(qf){let Z,io,de,Ce,lo,me,Me,Xo,qi,Nf,fa,Ni,ji,p3,jf,xe,co,Di,Gn,_3,On,Vn,u3,Gi,Xn,b3,Oi,Df,Da;return{c(){Z=a("p"),io=o("If your "),de=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),me=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),Nf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),p3=o(")."),jf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),Gn=o("NewModel"),_3=o(" is a subclass of "),On=a("a"),Vn=o("PreTrainedModel"),u3=o(`, make sure its
`),Gi=a("code"),Xn=o("config_class"),b3=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Df=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var _e=s(Z);io=r(_e,"If your "),de=n(_e,"CODE",{});var i9=s(de);Ce=r(i9,"NewModelConfig"),i9.forEach(t),lo=r(_e," is a subclass of "),me=n(_e,"CODE",{});var Vi=s(me);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(_e,`, make sure its
`),qi=n(_e,"CODE",{});var d9=s(qi);Nf=r(d9,"model_type"),d9.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var c9=s(Ni);ji=r(c9,'"new-model"'),c9.forEach(t),p3=r(_e,")."),_e.forEach(t),jf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);Gn=r(Ga,"NewModel"),Ga.forEach(t),_3=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var f9=s(On);Vn=r(f9,"PreTrainedModel"),f9.forEach(t),u3=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Gf=s(Gi);Xn=r(Gf,"config_class"),Gf.forEach(t),b3=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var m9=s(Oi);Df=r(m9,"NewModelConfig"),m9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,Z,_e),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo),e(Z,me),e(me,Me),e(Z,Xo),e(Z,qi),e(qi,Nf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,p3),b(fo,jf,_e),b(fo,xe,_e),e(xe,co),e(xe,Di),e(Di,Gn),e(xe,_3),e(xe,On),e(On,Vn),e(xe,u3),e(xe,Gi),e(Gi,Xn),e(xe,b3),e(xe,Oi),e(Oi,Df),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(jf),fo&&t(xe)}}}function sCt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function lCt(qf){let Z,io,de,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),de=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(me){Z=n(me,"P",{});var Me=s(Z);io=r(Me,"Passing "),de=n(Me,"CODE",{});var Xo=s(de);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(me,Me){b(me,Z,Me),e(Z,io),e(Z,de),e(de,Ce),e(Z,lo)},d(me){me&&t(Z)}}}function iCt(qf){let Z,io,de,Ce,lo,me,Me,Xo,qi,Nf,fa,Ni,ji,p3,jf,xe,co,Di,Gn,_3,On,Vn,u3,Gi,Xn,b3,Oi,Df,Da,fo,_e,i9,Vi,d9,c9,zo,Ga,f9,Gf,m9,Y$e,NSe,Xi,Of,DJ,F3,K$e,GJ,Z$e,jSe,zn,eIe,OJ,oIe,rIe,VJ,tIe,aIe,DSe,v3,GSe,g9,nIe,OSe,Vf,VSe,zi,Xf,XJ,T3,sIe,zJ,lIe,XSe,Qo,M3,iIe,E3,dIe,h9,cIe,fIe,mIe,C3,gIe,QJ,hIe,pIe,_Ie,mo,w3,uIe,WJ,bIe,FIe,Qi,vIe,HJ,TIe,MIe,UJ,EIe,CIe,wIe,F,zf,JJ,AIe,yIe,p9,LIe,xIe,kIe,Qf,YJ,SIe,RIe,_9,BIe,PIe,$Ie,Wf,KJ,IIe,qIe,u9,NIe,jIe,DIe,Hf,ZJ,GIe,OIe,b9,VIe,XIe,zIe,Uf,eY,QIe,WIe,F9,HIe,UIe,JIe,Jf,oY,YIe,KIe,v9,ZIe,eqe,oqe,Yf,rY,rqe,tqe,T9,aqe,nqe,sqe,Kf,tY,lqe,iqe,M9,dqe,cqe,fqe,Zf,aY,mqe,gqe,E9,hqe,pqe,_qe,em,nY,uqe,bqe,C9,Fqe,vqe,Tqe,om,sY,Mqe,Eqe,w9,Cqe,wqe,Aqe,rm,lY,yqe,Lqe,A9,xqe,kqe,Sqe,tm,iY,Rqe,Bqe,y9,Pqe,$qe,Iqe,am,dY,qqe,Nqe,L9,jqe,Dqe,Gqe,nm,cY,Oqe,Vqe,x9,Xqe,zqe,Qqe,sm,fY,Wqe,Hqe,k9,Uqe,Jqe,Yqe,lm,mY,Kqe,Zqe,S9,eNe,oNe,rNe,im,gY,tNe,aNe,R9,nNe,sNe,lNe,dm,hY,iNe,dNe,B9,cNe,fNe,mNe,cm,pY,gNe,hNe,P9,pNe,_Ne,uNe,fm,_Y,bNe,FNe,$9,vNe,TNe,MNe,mm,uY,ENe,CNe,I9,wNe,ANe,yNe,gm,bY,LNe,xNe,q9,kNe,SNe,RNe,hm,FY,BNe,PNe,N9,$Ne,INe,qNe,pm,vY,NNe,jNe,j9,DNe,GNe,ONe,_m,TY,VNe,XNe,D9,zNe,QNe,WNe,um,MY,HNe,UNe,G9,JNe,YNe,KNe,bm,EY,ZNe,eje,O9,oje,rje,tje,Fm,CY,aje,nje,V9,sje,lje,ije,vm,wY,dje,cje,X9,fje,mje,gje,Tm,AY,hje,pje,z9,_je,uje,bje,Mm,yY,Fje,vje,Q9,Tje,Mje,Eje,Em,LY,Cje,wje,W9,Aje,yje,Lje,Cm,xY,xje,kje,H9,Sje,Rje,Bje,wm,kY,Pje,$je,U9,Ije,qje,Nje,Am,SY,jje,Dje,J9,Gje,Oje,Vje,ym,RY,Xje,zje,Y9,Qje,Wje,Hje,Lm,BY,Uje,Jje,K9,Yje,Kje,Zje,xm,PY,eDe,oDe,Z9,rDe,tDe,aDe,km,$Y,nDe,sDe,ex,lDe,iDe,dDe,Sm,IY,cDe,fDe,ox,mDe,gDe,hDe,Rm,qY,pDe,_De,rx,uDe,bDe,FDe,Bm,NY,vDe,TDe,tx,MDe,EDe,CDe,Pm,jY,wDe,ADe,ax,yDe,LDe,xDe,$m,DY,kDe,SDe,nx,RDe,BDe,PDe,Im,GY,$De,IDe,sx,qDe,NDe,jDe,qm,OY,DDe,GDe,lx,ODe,VDe,XDe,Nm,VY,zDe,QDe,ix,WDe,HDe,UDe,jm,XY,JDe,YDe,dx,KDe,ZDe,eGe,Dm,zY,oGe,rGe,cx,tGe,aGe,nGe,Gm,QY,sGe,lGe,fx,iGe,dGe,cGe,Om,WY,fGe,mGe,mx,gGe,hGe,pGe,Vm,HY,_Ge,uGe,gx,bGe,FGe,vGe,Xm,UY,TGe,MGe,hx,EGe,CGe,wGe,zm,JY,AGe,yGe,px,LGe,xGe,kGe,Qm,YY,SGe,RGe,_x,BGe,PGe,$Ge,Wm,KY,IGe,qGe,ux,NGe,jGe,DGe,Hm,ZY,GGe,OGe,bx,VGe,XGe,zGe,Um,eK,QGe,WGe,Fx,HGe,UGe,JGe,Jm,oK,YGe,KGe,vx,ZGe,eOe,oOe,Ym,rK,rOe,tOe,Tx,aOe,nOe,sOe,Km,tK,lOe,iOe,Mx,dOe,cOe,fOe,Zm,aK,mOe,gOe,Ex,hOe,pOe,_Oe,eg,nK,uOe,bOe,Cx,FOe,vOe,TOe,og,sK,MOe,EOe,wx,COe,wOe,AOe,rg,lK,yOe,LOe,Ax,xOe,kOe,SOe,tg,iK,ROe,BOe,yx,POe,$Oe,IOe,ag,dK,qOe,NOe,Lx,jOe,DOe,GOe,ng,cK,OOe,VOe,xx,XOe,zOe,QOe,sg,fK,WOe,HOe,kx,UOe,JOe,YOe,lg,mK,KOe,ZOe,Sx,eVe,oVe,rVe,ig,gK,tVe,aVe,Rx,nVe,sVe,lVe,dg,hK,iVe,dVe,Bx,cVe,fVe,mVe,cg,pK,gVe,hVe,Px,pVe,_Ve,uVe,fg,_K,bVe,FVe,$x,vVe,TVe,MVe,mg,uK,EVe,CVe,Ix,wVe,AVe,yVe,gg,bK,LVe,xVe,qx,kVe,SVe,RVe,hg,FK,BVe,PVe,Nx,$Ve,IVe,qVe,pg,vK,NVe,jVe,jx,DVe,GVe,OVe,_g,TK,VVe,XVe,Dx,zVe,QVe,WVe,ug,MK,HVe,UVe,Gx,JVe,YVe,KVe,bg,EK,ZVe,eXe,Ox,oXe,rXe,tXe,Fg,CK,aXe,nXe,Vx,sXe,lXe,iXe,vg,wK,dXe,cXe,Xx,fXe,mXe,gXe,Tg,AK,hXe,pXe,zx,_Xe,uXe,bXe,Mg,yK,FXe,vXe,Qx,TXe,MXe,EXe,Eg,LK,CXe,wXe,Wx,AXe,yXe,LXe,Cg,xK,xXe,kXe,Hx,SXe,RXe,BXe,wg,kK,PXe,$Xe,Ux,IXe,qXe,NXe,Ag,SK,jXe,DXe,Jx,GXe,OXe,VXe,yg,RK,XXe,zXe,Yx,QXe,WXe,HXe,Lg,BK,UXe,JXe,Kx,YXe,KXe,ZXe,xg,PK,eze,oze,Zx,rze,tze,aze,kg,$K,nze,sze,ek,lze,ize,dze,Sg,IK,cze,fze,ok,mze,gze,hze,Rg,qK,pze,_ze,rk,uze,bze,Fze,Bg,NK,vze,Tze,tk,Mze,Eze,Cze,Pg,jK,wze,Aze,ak,yze,Lze,xze,$g,DK,kze,Sze,nk,Rze,Bze,Pze,GK,$ze,Ize,A3,qze,Ig,y3,Nze,OK,jze,zSe,Wi,qg,VK,L3,Dze,XK,Gze,QSe,Wo,x3,Oze,k3,Vze,sk,Xze,zze,Qze,S3,Wze,zK,Hze,Uze,Jze,go,R3,Yze,QK,Kze,Zze,Oa,eQe,WK,oQe,rQe,HK,tQe,aQe,UK,nQe,sQe,lQe,C,Qn,JK,iQe,dQe,lk,cQe,fQe,ik,mQe,gQe,hQe,Wn,YK,pQe,_Qe,dk,uQe,bQe,ck,FQe,vQe,TQe,Hn,KK,MQe,EQe,fk,CQe,wQe,mk,AQe,yQe,LQe,Ng,ZK,xQe,kQe,gk,SQe,RQe,BQe,Un,eZ,PQe,$Qe,hk,IQe,qQe,pk,NQe,jQe,DQe,jg,oZ,GQe,OQe,_k,VQe,XQe,zQe,Dg,rZ,QQe,WQe,uk,HQe,UQe,JQe,Gg,tZ,YQe,KQe,bk,ZQe,eWe,oWe,Jn,aZ,rWe,tWe,Fk,aWe,nWe,vk,sWe,lWe,iWe,Yn,nZ,dWe,cWe,Tk,fWe,mWe,Mk,gWe,hWe,pWe,Kn,sZ,_We,uWe,Ek,bWe,FWe,Ck,vWe,TWe,MWe,Og,lZ,EWe,CWe,wk,wWe,AWe,yWe,Vg,iZ,LWe,xWe,Ak,kWe,SWe,RWe,Zn,dZ,BWe,PWe,yk,$We,IWe,Lk,qWe,NWe,jWe,Xg,cZ,DWe,GWe,xk,OWe,VWe,XWe,es,fZ,zWe,QWe,kk,WWe,HWe,Sk,UWe,JWe,YWe,os,mZ,KWe,ZWe,Rk,eHe,oHe,Bk,rHe,tHe,aHe,rs,gZ,nHe,sHe,Pk,lHe,iHe,hZ,dHe,cHe,fHe,zg,pZ,mHe,gHe,$k,hHe,pHe,_He,ts,_Z,uHe,bHe,Ik,FHe,vHe,qk,THe,MHe,EHe,Qg,uZ,CHe,wHe,Nk,AHe,yHe,LHe,as,bZ,xHe,kHe,jk,SHe,RHe,Dk,BHe,PHe,$He,ns,FZ,IHe,qHe,Gk,NHe,jHe,Ok,DHe,GHe,OHe,ss,vZ,VHe,XHe,Vk,zHe,QHe,Xk,WHe,HHe,UHe,Wg,TZ,JHe,YHe,zk,KHe,ZHe,eUe,ls,MZ,oUe,rUe,Qk,tUe,aUe,Wk,nUe,sUe,lUe,Hg,EZ,iUe,dUe,Hk,cUe,fUe,mUe,is,CZ,gUe,hUe,Uk,pUe,_Ue,Jk,uUe,bUe,FUe,ds,wZ,vUe,TUe,Yk,MUe,EUe,Kk,CUe,wUe,AUe,cs,AZ,yUe,LUe,Zk,xUe,kUe,eS,SUe,RUe,BUe,fs,yZ,PUe,$Ue,oS,IUe,qUe,rS,NUe,jUe,DUe,Ug,LZ,GUe,OUe,tS,VUe,XUe,zUe,ms,xZ,QUe,WUe,aS,HUe,UUe,nS,JUe,YUe,KUe,gs,kZ,ZUe,eJe,sS,oJe,rJe,lS,tJe,aJe,nJe,hs,SZ,sJe,lJe,iS,iJe,dJe,dS,cJe,fJe,mJe,ps,RZ,gJe,hJe,cS,pJe,_Je,fS,uJe,bJe,FJe,_s,BZ,vJe,TJe,mS,MJe,EJe,gS,CJe,wJe,AJe,us,PZ,yJe,LJe,hS,xJe,kJe,pS,SJe,RJe,BJe,Jg,$Z,PJe,$Je,_S,IJe,qJe,NJe,bs,IZ,jJe,DJe,uS,GJe,OJe,bS,VJe,XJe,zJe,Yg,qZ,QJe,WJe,FS,HJe,UJe,JJe,Kg,NZ,YJe,KJe,vS,ZJe,eYe,oYe,Fs,jZ,rYe,tYe,TS,aYe,nYe,MS,sYe,lYe,iYe,vs,DZ,dYe,cYe,ES,fYe,mYe,CS,gYe,hYe,pYe,Zg,GZ,_Ye,uYe,wS,bYe,FYe,vYe,Ts,OZ,TYe,MYe,AS,EYe,CYe,yS,wYe,AYe,yYe,Ms,VZ,LYe,xYe,LS,kYe,SYe,xS,RYe,BYe,PYe,Es,XZ,$Ye,IYe,kS,qYe,NYe,SS,jYe,DYe,GYe,Cs,zZ,OYe,VYe,RS,XYe,zYe,BS,QYe,WYe,HYe,ws,QZ,UYe,JYe,PS,YYe,KYe,$S,ZYe,eKe,oKe,eh,WZ,rKe,tKe,IS,aKe,nKe,sKe,oh,HZ,lKe,iKe,qS,dKe,cKe,fKe,As,UZ,mKe,gKe,NS,hKe,pKe,JZ,_Ke,uKe,bKe,rh,YZ,FKe,vKe,jS,TKe,MKe,EKe,ys,KZ,CKe,wKe,DS,AKe,yKe,GS,LKe,xKe,kKe,th,ZZ,SKe,RKe,OS,BKe,PKe,$Ke,Ls,eee,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,xs,oee,VKe,XKe,zS,zKe,QKe,QS,WKe,HKe,UKe,ks,ree,JKe,YKe,WS,KKe,ZKe,HS,eZe,oZe,rZe,Ss,tee,tZe,aZe,US,nZe,sZe,JS,lZe,iZe,dZe,Rs,aee,cZe,fZe,YS,mZe,gZe,KS,hZe,pZe,_Ze,Bs,nee,uZe,bZe,ZS,FZe,vZe,eR,TZe,MZe,EZe,ah,see,CZe,wZe,oR,AZe,yZe,LZe,nh,lee,xZe,kZe,rR,SZe,RZe,BZe,Ps,iee,PZe,$Ze,tR,IZe,qZe,aR,NZe,jZe,DZe,$s,dee,GZe,OZe,nR,VZe,XZe,sR,zZe,QZe,WZe,Is,cee,HZe,UZe,lR,JZe,YZe,iR,KZe,ZZe,eeo,sh,fee,oeo,reo,dR,teo,aeo,neo,lh,mee,seo,leo,cR,ieo,deo,ceo,ih,gee,feo,meo,fR,geo,heo,peo,dh,hee,_eo,ueo,mR,beo,Feo,veo,qs,pee,Teo,Meo,gR,Eeo,Ceo,hR,weo,Aeo,yeo,ch,_ee,Leo,xeo,pR,keo,Seo,Reo,fh,uee,Beo,Peo,_R,$eo,Ieo,qeo,Ns,bee,Neo,jeo,uR,Deo,Geo,bR,Oeo,Veo,Xeo,js,Fee,zeo,Qeo,FR,Weo,Heo,vR,Ueo,Jeo,Yeo,vee,Keo,Zeo,B3,eoo,mh,P3,ooo,Tee,roo,WSe,Hi,gh,Mee,$3,too,Eee,aoo,HSe,Ho,I3,noo,q3,soo,TR,loo,ioo,doo,N3,coo,Cee,foo,moo,goo,$e,j3,hoo,wee,poo,_oo,Va,uoo,Aee,boo,Foo,yee,voo,Too,Lee,Moo,Eoo,Coo,te,hh,xee,woo,Aoo,MR,yoo,Loo,xoo,ph,kee,koo,Soo,ER,Roo,Boo,Poo,_h,See,$oo,Ioo,CR,qoo,Noo,joo,uh,Ree,Doo,Goo,wR,Ooo,Voo,Xoo,bh,Bee,zoo,Qoo,AR,Woo,Hoo,Uoo,Fh,Pee,Joo,Yoo,yR,Koo,Zoo,ero,vh,$ee,oro,rro,LR,tro,aro,nro,Th,Iee,sro,lro,xR,iro,dro,cro,Mh,qee,fro,mro,kR,gro,hro,pro,Eh,Nee,_ro,uro,SR,bro,Fro,vro,Ch,jee,Tro,Mro,RR,Ero,Cro,wro,wh,Dee,Aro,yro,BR,Lro,xro,kro,Ah,Gee,Sro,Rro,PR,Bro,Pro,$ro,yh,Oee,Iro,qro,$R,Nro,jro,Dro,Lh,Vee,Gro,Oro,IR,Vro,Xro,zro,xh,Xee,Qro,Wro,qR,Hro,Uro,Jro,kh,zee,Yro,Kro,NR,Zro,eto,oto,Sh,Qee,rto,tto,jR,ato,nto,sto,Rh,lto,Wee,ito,dto,D3,cto,Bh,G3,fto,Hee,mto,USe,Ui,Ph,Uee,O3,gto,Jee,hto,JSe,Uo,V3,pto,X3,_to,DR,uto,bto,Fto,z3,vto,Yee,Tto,Mto,Eto,Ie,Q3,Cto,Kee,wto,Ato,Ji,yto,Zee,Lto,xto,eoe,kto,Sto,Rto,ke,$h,ooe,Bto,Pto,GR,$to,Ito,qto,Ih,roe,Nto,jto,OR,Dto,Gto,Oto,qh,toe,Vto,Xto,VR,zto,Qto,Wto,Nh,aoe,Hto,Uto,XR,Jto,Yto,Kto,jh,noe,Zto,eao,zR,oao,rao,tao,Dh,soe,aao,nao,QR,sao,lao,iao,Gh,loe,dao,cao,WR,fao,mao,gao,Oh,ioe,hao,pao,HR,_ao,uao,bao,Vh,Fao,doe,vao,Tao,W3,Mao,Xh,H3,Eao,coe,Cao,YSe,Yi,zh,foe,U3,wao,moe,Aao,KSe,Jo,J3,yao,Ki,Lao,UR,xao,kao,JR,Sao,Rao,Bao,Y3,Pao,goe,$ao,Iao,qao,Xr,K3,Nao,hoe,jao,Dao,Zi,Gao,poe,Oao,Vao,YR,Xao,zao,Qao,_oe,Wao,Hao,Z3,Uao,qe,ew,Jao,uoe,Yao,Kao,Xa,Zao,boe,eno,ono,Foe,rno,tno,voe,ano,nno,sno,T,Qh,Toe,lno,ino,KR,dno,cno,fno,Wh,Moe,mno,gno,ZR,hno,pno,_no,Hh,Eoe,uno,bno,eB,Fno,vno,Tno,Uh,Coe,Mno,Eno,oB,Cno,wno,Ano,Jh,woe,yno,Lno,rB,xno,kno,Sno,Yh,Aoe,Rno,Bno,tB,Pno,$no,Ino,Kh,yoe,qno,Nno,aB,jno,Dno,Gno,Zh,Loe,Ono,Vno,nB,Xno,zno,Qno,ep,xoe,Wno,Hno,sB,Uno,Jno,Yno,op,koe,Kno,Zno,lB,eso,oso,rso,rp,Soe,tso,aso,iB,nso,sso,lso,tp,Roe,iso,dso,dB,cso,fso,mso,ap,Boe,gso,hso,cB,pso,_so,uso,np,Poe,bso,Fso,fB,vso,Tso,Mso,sp,$oe,Eso,Cso,mB,wso,Aso,yso,lp,Ioe,Lso,xso,gB,kso,Sso,Rso,ip,qoe,Bso,Pso,hB,$so,Iso,qso,dp,Noe,Nso,jso,pB,Dso,Gso,Oso,cp,joe,Vso,Xso,_B,zso,Qso,Wso,fp,Doe,Hso,Uso,uB,Jso,Yso,Kso,mp,Goe,Zso,elo,bB,olo,rlo,tlo,gp,Ooe,alo,nlo,FB,slo,llo,ilo,hp,Voe,dlo,clo,vB,flo,mlo,glo,pp,Xoe,hlo,plo,TB,_lo,ulo,blo,_p,zoe,Flo,vlo,MB,Tlo,Mlo,Elo,up,Qoe,Clo,wlo,EB,Alo,ylo,Llo,bp,Woe,xlo,klo,CB,Slo,Rlo,Blo,Fp,Hoe,Plo,$lo,wB,Ilo,qlo,Nlo,vp,Uoe,jlo,Dlo,AB,Glo,Olo,Vlo,Ds,Joe,Xlo,zlo,yB,Qlo,Wlo,LB,Hlo,Ulo,Jlo,Tp,Yoe,Ylo,Klo,xB,Zlo,eio,oio,Mp,Koe,rio,tio,kB,aio,nio,sio,Ep,Zoe,lio,iio,SB,dio,cio,fio,Cp,ere,mio,gio,RB,hio,pio,_io,wp,ore,uio,bio,BB,Fio,vio,Tio,Ap,rre,Mio,Eio,PB,Cio,wio,Aio,yp,tre,yio,Lio,$B,xio,kio,Sio,Lp,are,Rio,Bio,IB,Pio,$io,Iio,xp,nre,qio,Nio,qB,jio,Dio,Gio,kp,sre,Oio,Vio,NB,Xio,zio,Qio,Sp,lre,Wio,Hio,jB,Uio,Jio,Yio,Rp,ire,Kio,Zio,DB,edo,odo,rdo,Bp,dre,tdo,ado,GB,ndo,sdo,ldo,Pp,cre,ido,ddo,OB,cdo,fdo,mdo,$p,fre,gdo,hdo,VB,pdo,_do,udo,Ip,mre,bdo,Fdo,XB,vdo,Tdo,Mdo,qp,gre,Edo,Cdo,zB,wdo,Ado,ydo,Np,hre,Ldo,xdo,QB,kdo,Sdo,Rdo,jp,pre,Bdo,Pdo,WB,$do,Ido,qdo,Dp,_re,Ndo,jdo,HB,Ddo,Gdo,Odo,Gp,ure,Vdo,Xdo,UB,zdo,Qdo,Wdo,Op,bre,Hdo,Udo,JB,Jdo,Ydo,Kdo,Vp,Fre,Zdo,eco,YB,oco,rco,tco,Xp,vre,aco,nco,KB,sco,lco,ico,zp,Tre,dco,cco,ZB,fco,mco,gco,Qp,Mre,hco,pco,eP,_co,uco,bco,Wp,Ere,Fco,vco,oP,Tco,Mco,Eco,Hp,Cre,Cco,wco,rP,Aco,yco,Lco,Up,wre,xco,kco,tP,Sco,Rco,Bco,Jp,Are,Pco,$co,aP,Ico,qco,Nco,Yp,yre,jco,Dco,nP,Gco,Oco,Vco,Kp,Lre,Xco,zco,sP,Qco,Wco,Hco,Zp,xre,Uco,Jco,lP,Yco,Kco,Zco,e_,kre,efo,ofo,iP,rfo,tfo,afo,o_,Sre,nfo,sfo,dP,lfo,ifo,dfo,r_,Rre,cfo,ffo,cP,mfo,gfo,hfo,t_,Bre,pfo,_fo,fP,ufo,bfo,Ffo,a_,Pre,vfo,Tfo,mP,Mfo,Efo,Cfo,n_,$re,wfo,Afo,gP,yfo,Lfo,xfo,s_,Ire,kfo,Sfo,hP,Rfo,Bfo,Pfo,l_,qre,$fo,Ifo,pP,qfo,Nfo,jfo,i_,Nre,Dfo,Gfo,_P,Ofo,Vfo,Xfo,d_,jre,zfo,Qfo,uP,Wfo,Hfo,Ufo,c_,Dre,Jfo,Yfo,bP,Kfo,Zfo,emo,f_,Gre,omo,rmo,FP,tmo,amo,nmo,m_,Ore,smo,lmo,vP,imo,dmo,cmo,g_,Vre,fmo,mmo,TP,gmo,hmo,pmo,h_,Xre,_mo,umo,MP,bmo,Fmo,vmo,p_,zre,Tmo,Mmo,EP,Emo,Cmo,wmo,__,Qre,Amo,ymo,CP,Lmo,xmo,kmo,u_,Wre,Smo,Rmo,wP,Bmo,Pmo,$mo,b_,Hre,Imo,qmo,AP,Nmo,jmo,Dmo,F_,Ure,Gmo,Omo,yP,Vmo,Xmo,zmo,v_,Jre,Qmo,Wmo,LP,Hmo,Umo,Jmo,T_,Yre,Ymo,Kmo,xP,Zmo,ego,ogo,M_,Kre,rgo,tgo,kP,ago,ngo,sgo,E_,Zre,lgo,igo,SP,dgo,cgo,fgo,C_,ete,mgo,ggo,RP,hgo,pgo,_go,w_,ote,ugo,bgo,BP,Fgo,vgo,Tgo,A_,rte,Mgo,Ego,PP,Cgo,wgo,Ago,y_,tte,ygo,Lgo,$P,xgo,kgo,Sgo,L_,ate,Rgo,Bgo,IP,Pgo,$go,Igo,x_,qgo,nte,Ngo,jgo,ste,Dgo,Ggo,lte,Ogo,Vgo,ow,ZSe,ed,k_,ite,rw,Xgo,dte,zgo,eRe,Yo,tw,Qgo,od,Wgo,qP,Hgo,Ugo,NP,Jgo,Ygo,Kgo,aw,Zgo,cte,eho,oho,rho,zr,nw,tho,fte,aho,nho,rd,sho,mte,lho,iho,jP,dho,cho,fho,gte,mho,gho,sw,hho,Ne,lw,pho,hte,_ho,uho,za,bho,pte,Fho,vho,_te,Tho,Mho,ute,Eho,Cho,who,S,S_,bte,Aho,yho,DP,Lho,xho,kho,R_,Fte,Sho,Rho,GP,Bho,Pho,$ho,B_,vte,Iho,qho,OP,Nho,jho,Dho,P_,Tte,Gho,Oho,VP,Vho,Xho,zho,$_,Mte,Qho,Who,XP,Hho,Uho,Jho,I_,Ete,Yho,Kho,zP,Zho,epo,opo,q_,Cte,rpo,tpo,QP,apo,npo,spo,N_,wte,lpo,ipo,WP,dpo,cpo,fpo,j_,Ate,mpo,gpo,HP,hpo,ppo,_po,D_,yte,upo,bpo,UP,Fpo,vpo,Tpo,G_,Lte,Mpo,Epo,JP,Cpo,wpo,Apo,O_,xte,ypo,Lpo,YP,xpo,kpo,Spo,V_,kte,Rpo,Bpo,KP,Ppo,$po,Ipo,X_,Ste,qpo,Npo,ZP,jpo,Dpo,Gpo,z_,Rte,Opo,Vpo,e$,Xpo,zpo,Qpo,Q_,Bte,Wpo,Hpo,o$,Upo,Jpo,Ypo,W_,Pte,Kpo,Zpo,r$,e_o,o_o,r_o,H_,$te,t_o,a_o,t$,n_o,s_o,l_o,U_,Ite,i_o,d_o,a$,c_o,f_o,m_o,J_,qte,g_o,h_o,n$,p_o,__o,u_o,Y_,Nte,b_o,F_o,s$,v_o,T_o,M_o,K_,jte,E_o,C_o,l$,w_o,A_o,y_o,Z_,Dte,L_o,x_o,i$,k_o,S_o,R_o,eu,Gte,B_o,P_o,d$,$_o,I_o,q_o,ou,Ote,N_o,j_o,c$,D_o,G_o,O_o,ru,Vte,V_o,X_o,f$,z_o,Q_o,W_o,tu,Xte,H_o,U_o,m$,J_o,Y_o,K_o,au,zte,Z_o,euo,g$,ouo,ruo,tuo,nu,Qte,auo,nuo,h$,suo,luo,iuo,su,Wte,duo,cuo,p$,fuo,muo,guo,lu,Hte,huo,puo,_$,_uo,uuo,buo,iu,Ute,Fuo,vuo,u$,Tuo,Muo,Euo,du,Jte,Cuo,wuo,b$,Auo,yuo,Luo,cu,Yte,xuo,kuo,F$,Suo,Ruo,Buo,fu,Kte,Puo,$uo,v$,Iuo,quo,Nuo,mu,Zte,juo,Duo,T$,Guo,Ouo,Vuo,gu,eae,Xuo,zuo,M$,Quo,Wuo,Huo,hu,oae,Uuo,Juo,E$,Yuo,Kuo,Zuo,pu,rae,e1o,o1o,C$,r1o,t1o,a1o,_u,n1o,tae,s1o,l1o,aae,i1o,d1o,nae,c1o,f1o,iw,oRe,td,uu,sae,dw,m1o,lae,g1o,rRe,Ko,cw,h1o,ad,p1o,w$,_1o,u1o,A$,b1o,F1o,v1o,fw,T1o,iae,M1o,E1o,C1o,Qr,mw,w1o,dae,A1o,y1o,nd,L1o,cae,x1o,k1o,y$,S1o,R1o,B1o,fae,P1o,$1o,gw,I1o,je,hw,q1o,mae,N1o,j1o,Qa,D1o,gae,G1o,O1o,hae,V1o,X1o,pae,z1o,Q1o,W1o,$,bu,_ae,H1o,U1o,L$,J1o,Y1o,K1o,Fu,uae,Z1o,e5o,x$,o5o,r5o,t5o,vu,bae,a5o,n5o,k$,s5o,l5o,i5o,Tu,Fae,d5o,c5o,S$,f5o,m5o,g5o,Mu,vae,h5o,p5o,R$,_5o,u5o,b5o,Eu,Tae,F5o,v5o,B$,T5o,M5o,E5o,Cu,Mae,C5o,w5o,P$,A5o,y5o,L5o,wu,Eae,x5o,k5o,$$,S5o,R5o,B5o,Au,Cae,P5o,$5o,I$,I5o,q5o,N5o,yu,wae,j5o,D5o,q$,G5o,O5o,V5o,Lu,Aae,X5o,z5o,N$,Q5o,W5o,H5o,xu,yae,U5o,J5o,j$,Y5o,K5o,Z5o,ku,Lae,ebo,obo,D$,rbo,tbo,abo,Su,xae,nbo,sbo,G$,lbo,ibo,dbo,Ru,kae,cbo,fbo,O$,mbo,gbo,hbo,Bu,Sae,pbo,_bo,V$,ubo,bbo,Fbo,Pu,Rae,vbo,Tbo,X$,Mbo,Ebo,Cbo,$u,Bae,wbo,Abo,z$,ybo,Lbo,xbo,Iu,Pae,kbo,Sbo,Q$,Rbo,Bbo,Pbo,qu,$ae,$bo,Ibo,W$,qbo,Nbo,jbo,Nu,Iae,Dbo,Gbo,H$,Obo,Vbo,Xbo,ju,qae,zbo,Qbo,U$,Wbo,Hbo,Ubo,Du,Nae,Jbo,Ybo,J$,Kbo,Zbo,e2o,Gu,jae,o2o,r2o,Y$,t2o,a2o,n2o,Ou,Dae,s2o,l2o,K$,i2o,d2o,c2o,Vu,Gae,f2o,m2o,Z$,g2o,h2o,p2o,Xu,Oae,_2o,u2o,eI,b2o,F2o,v2o,zu,Vae,T2o,M2o,oI,E2o,C2o,w2o,Qu,Xae,A2o,y2o,rI,L2o,x2o,k2o,Wu,zae,S2o,R2o,tI,B2o,P2o,$2o,Hu,Qae,I2o,q2o,aI,N2o,j2o,D2o,Uu,Wae,G2o,O2o,nI,V2o,X2o,z2o,Ju,Hae,Q2o,W2o,sI,H2o,U2o,J2o,Yu,Uae,Y2o,K2o,lI,Z2o,eFo,oFo,Ku,Jae,rFo,tFo,iI,aFo,nFo,sFo,Zu,lFo,Yae,iFo,dFo,Kae,cFo,fFo,Zae,mFo,gFo,pw,tRe,sd,e1,ene,_w,hFo,one,pFo,aRe,Zo,uw,_Fo,ld,uFo,dI,bFo,FFo,cI,vFo,TFo,MFo,bw,EFo,rne,CFo,wFo,AFo,Wr,Fw,yFo,tne,LFo,xFo,id,kFo,ane,SFo,RFo,fI,BFo,PFo,$Fo,nne,IFo,qFo,vw,NFo,De,Tw,jFo,sne,DFo,GFo,Wa,OFo,lne,VFo,XFo,ine,zFo,QFo,dne,WFo,HFo,UFo,I,o1,cne,JFo,YFo,mI,KFo,ZFo,evo,r1,fne,ovo,rvo,gI,tvo,avo,nvo,t1,mne,svo,lvo,hI,ivo,dvo,cvo,a1,gne,fvo,mvo,pI,gvo,hvo,pvo,n1,hne,_vo,uvo,_I,bvo,Fvo,vvo,s1,pne,Tvo,Mvo,uI,Evo,Cvo,wvo,l1,_ne,Avo,yvo,bI,Lvo,xvo,kvo,i1,une,Svo,Rvo,FI,Bvo,Pvo,$vo,d1,bne,Ivo,qvo,vI,Nvo,jvo,Dvo,c1,Fne,Gvo,Ovo,TI,Vvo,Xvo,zvo,f1,vne,Qvo,Wvo,MI,Hvo,Uvo,Jvo,m1,Tne,Yvo,Kvo,EI,Zvo,e6o,o6o,g1,Mne,r6o,t6o,CI,a6o,n6o,s6o,h1,Ene,l6o,i6o,wI,d6o,c6o,f6o,p1,Cne,m6o,g6o,AI,h6o,p6o,_6o,_1,wne,u6o,b6o,yI,F6o,v6o,T6o,u1,Ane,M6o,E6o,LI,C6o,w6o,A6o,b1,yne,y6o,L6o,xI,x6o,k6o,S6o,F1,Lne,R6o,B6o,kI,P6o,$6o,I6o,v1,xne,q6o,N6o,SI,j6o,D6o,G6o,T1,kne,O6o,V6o,RI,X6o,z6o,Q6o,M1,Sne,W6o,H6o,BI,U6o,J6o,Y6o,E1,Rne,K6o,Z6o,PI,eTo,oTo,rTo,C1,Bne,tTo,aTo,$I,nTo,sTo,lTo,w1,Pne,iTo,dTo,II,cTo,fTo,mTo,A1,$ne,gTo,hTo,qI,pTo,_To,uTo,y1,Ine,bTo,FTo,NI,vTo,TTo,MTo,L1,qne,ETo,CTo,jI,wTo,ATo,yTo,x1,Nne,LTo,xTo,DI,kTo,STo,RTo,k1,jne,BTo,PTo,GI,$To,ITo,qTo,S1,Dne,NTo,jTo,Gne,DTo,GTo,OTo,R1,One,VTo,XTo,OI,zTo,QTo,WTo,B1,Vne,HTo,UTo,VI,JTo,YTo,KTo,P1,Xne,ZTo,eMo,XI,oMo,rMo,tMo,$1,zne,aMo,nMo,zI,sMo,lMo,iMo,I1,dMo,Qne,cMo,fMo,Wne,mMo,gMo,Hne,hMo,pMo,Mw,nRe,dd,q1,Une,Ew,_Mo,Jne,uMo,sRe,er,Cw,bMo,cd,FMo,QI,vMo,TMo,WI,MMo,EMo,CMo,ww,wMo,Yne,AMo,yMo,LMo,Hr,Aw,xMo,Kne,kMo,SMo,fd,RMo,Zne,BMo,PMo,HI,$Mo,IMo,qMo,ese,NMo,jMo,yw,DMo,Ge,Lw,GMo,ose,OMo,VMo,Ha,XMo,rse,zMo,QMo,tse,WMo,HMo,ase,UMo,JMo,YMo,se,N1,nse,KMo,ZMo,UI,e4o,o4o,r4o,j1,sse,t4o,a4o,JI,n4o,s4o,l4o,D1,lse,i4o,d4o,YI,c4o,f4o,m4o,G1,ise,g4o,h4o,KI,p4o,_4o,u4o,O1,dse,b4o,F4o,ZI,v4o,T4o,M4o,V1,cse,E4o,C4o,eq,w4o,A4o,y4o,X1,fse,L4o,x4o,oq,k4o,S4o,R4o,z1,mse,B4o,P4o,rq,$4o,I4o,q4o,Q1,gse,N4o,j4o,tq,D4o,G4o,O4o,W1,hse,V4o,X4o,aq,z4o,Q4o,W4o,H1,pse,H4o,U4o,nq,J4o,Y4o,K4o,U1,_se,Z4o,eEo,sq,oEo,rEo,tEo,J1,use,aEo,nEo,lq,sEo,lEo,iEo,Y1,bse,dEo,cEo,iq,fEo,mEo,gEo,K1,Fse,hEo,pEo,dq,_Eo,uEo,bEo,Z1,vse,FEo,vEo,cq,TEo,MEo,EEo,e5,CEo,Tse,wEo,AEo,Mse,yEo,LEo,Ese,xEo,kEo,xw,lRe,md,o5,Cse,kw,SEo,wse,REo,iRe,or,Sw,BEo,gd,PEo,fq,$Eo,IEo,mq,qEo,NEo,jEo,Rw,DEo,Ase,GEo,OEo,VEo,Ur,Bw,XEo,yse,zEo,QEo,hd,WEo,Lse,HEo,UEo,gq,JEo,YEo,KEo,xse,ZEo,eCo,Pw,oCo,Oe,$w,rCo,kse,tCo,aCo,Ua,nCo,Sse,sCo,lCo,Rse,iCo,dCo,Bse,cCo,fCo,mCo,y,r5,Pse,gCo,hCo,hq,pCo,_Co,uCo,t5,$se,bCo,FCo,pq,vCo,TCo,MCo,a5,Ise,ECo,CCo,_q,wCo,ACo,yCo,n5,qse,LCo,xCo,uq,kCo,SCo,RCo,s5,Nse,BCo,PCo,bq,$Co,ICo,qCo,l5,jse,NCo,jCo,Fq,DCo,GCo,OCo,i5,Dse,VCo,XCo,vq,zCo,QCo,WCo,d5,Gse,HCo,UCo,Tq,JCo,YCo,KCo,c5,Ose,ZCo,e3o,Mq,o3o,r3o,t3o,f5,Vse,a3o,n3o,Eq,s3o,l3o,i3o,m5,Xse,d3o,c3o,Cq,f3o,m3o,g3o,g5,zse,h3o,p3o,wq,_3o,u3o,b3o,h5,Qse,F3o,v3o,Aq,T3o,M3o,E3o,p5,Wse,C3o,w3o,yq,A3o,y3o,L3o,_5,Hse,x3o,k3o,Lq,S3o,R3o,B3o,u5,Use,P3o,$3o,xq,I3o,q3o,N3o,b5,Jse,j3o,D3o,kq,G3o,O3o,V3o,F5,Yse,X3o,z3o,Sq,Q3o,W3o,H3o,v5,Kse,U3o,J3o,Rq,Y3o,K3o,Z3o,T5,Zse,ewo,owo,Bq,rwo,two,awo,M5,ele,nwo,swo,Pq,lwo,iwo,dwo,E5,ole,cwo,fwo,$q,mwo,gwo,hwo,C5,rle,pwo,_wo,Iq,uwo,bwo,Fwo,w5,tle,vwo,Two,qq,Mwo,Ewo,Cwo,A5,ale,wwo,Awo,Nq,ywo,Lwo,xwo,y5,nle,kwo,Swo,jq,Rwo,Bwo,Pwo,L5,sle,$wo,Iwo,Dq,qwo,Nwo,jwo,x5,lle,Dwo,Gwo,Gq,Owo,Vwo,Xwo,k5,ile,zwo,Qwo,Oq,Wwo,Hwo,Uwo,S5,dle,Jwo,Ywo,Vq,Kwo,Zwo,eAo,R5,cle,oAo,rAo,Xq,tAo,aAo,nAo,B5,fle,sAo,lAo,zq,iAo,dAo,cAo,P5,mle,fAo,mAo,Qq,gAo,hAo,pAo,$5,gle,_Ao,uAo,Wq,bAo,FAo,vAo,I5,hle,TAo,MAo,Hq,EAo,CAo,wAo,q5,ple,AAo,yAo,Uq,LAo,xAo,kAo,N5,_le,SAo,RAo,Jq,BAo,PAo,$Ao,j5,ule,IAo,qAo,Yq,NAo,jAo,DAo,D5,ble,GAo,OAo,Kq,VAo,XAo,zAo,G5,Fle,QAo,WAo,Zq,HAo,UAo,JAo,O5,vle,YAo,KAo,eN,ZAo,e0o,o0o,V5,Tle,r0o,t0o,oN,a0o,n0o,s0o,X5,Mle,l0o,i0o,rN,d0o,c0o,f0o,z5,Ele,m0o,g0o,tN,h0o,p0o,_0o,Q5,Cle,u0o,b0o,aN,F0o,v0o,T0o,W5,wle,M0o,E0o,nN,C0o,w0o,A0o,H5,y0o,Ale,L0o,x0o,yle,k0o,S0o,Lle,R0o,B0o,Iw,dRe,pd,U5,xle,qw,P0o,kle,$0o,cRe,rr,Nw,I0o,_d,q0o,sN,N0o,j0o,lN,D0o,G0o,O0o,jw,V0o,Sle,X0o,z0o,Q0o,Jr,Dw,W0o,Rle,H0o,U0o,ud,J0o,Ble,Y0o,K0o,iN,Z0o,eyo,oyo,Ple,ryo,tyo,Gw,ayo,Ve,Ow,nyo,$le,syo,lyo,Ja,iyo,Ile,dyo,cyo,qle,fyo,myo,Nle,gyo,hyo,pyo,G,J5,jle,_yo,uyo,dN,byo,Fyo,vyo,Y5,Dle,Tyo,Myo,cN,Eyo,Cyo,wyo,K5,Gle,Ayo,yyo,fN,Lyo,xyo,kyo,Z5,Ole,Syo,Ryo,mN,Byo,Pyo,$yo,eb,Vle,Iyo,qyo,gN,Nyo,jyo,Dyo,ob,Xle,Gyo,Oyo,hN,Vyo,Xyo,zyo,rb,zle,Qyo,Wyo,pN,Hyo,Uyo,Jyo,tb,Qle,Yyo,Kyo,_N,Zyo,eLo,oLo,ab,Wle,rLo,tLo,uN,aLo,nLo,sLo,nb,Hle,lLo,iLo,bN,dLo,cLo,fLo,sb,Ule,mLo,gLo,FN,hLo,pLo,_Lo,lb,Jle,uLo,bLo,vN,FLo,vLo,TLo,ib,Yle,MLo,ELo,TN,CLo,wLo,ALo,db,Kle,yLo,LLo,MN,xLo,kLo,SLo,cb,Zle,RLo,BLo,EN,PLo,$Lo,ILo,fb,eie,qLo,NLo,CN,jLo,DLo,GLo,mb,oie,OLo,VLo,wN,XLo,zLo,QLo,gb,rie,WLo,HLo,AN,ULo,JLo,YLo,hb,tie,KLo,ZLo,yN,e8o,o8o,r8o,pb,aie,t8o,a8o,LN,n8o,s8o,l8o,_b,nie,i8o,d8o,xN,c8o,f8o,m8o,ub,sie,g8o,h8o,kN,p8o,_8o,u8o,bb,lie,b8o,F8o,SN,v8o,T8o,M8o,Fb,iie,E8o,C8o,RN,w8o,A8o,y8o,vb,die,L8o,x8o,BN,k8o,S8o,R8o,Tb,cie,B8o,P8o,PN,$8o,I8o,q8o,Mb,fie,N8o,j8o,$N,D8o,G8o,O8o,Eb,mie,V8o,X8o,IN,z8o,Q8o,W8o,Cb,H8o,gie,U8o,J8o,hie,Y8o,K8o,pie,Z8o,e7o,Vw,fRe,bd,wb,_ie,Xw,o7o,uie,r7o,mRe,tr,zw,t7o,Fd,a7o,qN,n7o,s7o,NN,l7o,i7o,d7o,Qw,c7o,bie,f7o,m7o,g7o,Yr,Ww,h7o,Fie,p7o,_7o,vd,u7o,vie,b7o,F7o,jN,v7o,T7o,M7o,Tie,E7o,C7o,Hw,w7o,Xe,Uw,A7o,Mie,y7o,L7o,Ya,x7o,Eie,k7o,S7o,Cie,R7o,B7o,wie,P7o,$7o,I7o,da,Ab,Aie,q7o,N7o,DN,j7o,D7o,G7o,yb,yie,O7o,V7o,GN,X7o,z7o,Q7o,Lb,Lie,W7o,H7o,ON,U7o,J7o,Y7o,xb,xie,K7o,Z7o,VN,e9o,o9o,r9o,kb,kie,t9o,a9o,XN,n9o,s9o,l9o,Sb,i9o,Sie,d9o,c9o,Rie,f9o,m9o,Bie,g9o,h9o,Jw,gRe,Td,Rb,Pie,Yw,p9o,$ie,_9o,hRe,ar,Kw,u9o,Md,b9o,zN,F9o,v9o,QN,T9o,M9o,E9o,Zw,C9o,Iie,w9o,A9o,y9o,Kr,eA,L9o,qie,x9o,k9o,Ed,S9o,Nie,R9o,B9o,WN,P9o,$9o,I9o,jie,q9o,N9o,oA,j9o,ze,rA,D9o,Die,G9o,O9o,Ka,V9o,Gie,X9o,z9o,Oie,Q9o,W9o,Vie,H9o,U9o,J9o,j,Bb,Xie,Y9o,K9o,HN,Z9o,exo,oxo,Pb,zie,rxo,txo,UN,axo,nxo,sxo,$b,Qie,lxo,ixo,JN,dxo,cxo,fxo,Ib,Wie,mxo,gxo,YN,hxo,pxo,_xo,qb,Hie,uxo,bxo,KN,Fxo,vxo,Txo,Nb,Uie,Mxo,Exo,ZN,Cxo,wxo,Axo,jb,Jie,yxo,Lxo,ej,xxo,kxo,Sxo,Db,Yie,Rxo,Bxo,oj,Pxo,$xo,Ixo,Gb,Kie,qxo,Nxo,rj,jxo,Dxo,Gxo,Ob,Zie,Oxo,Vxo,tj,Xxo,zxo,Qxo,Vb,ede,Wxo,Hxo,aj,Uxo,Jxo,Yxo,Xb,ode,Kxo,Zxo,nj,eko,oko,rko,zb,rde,tko,ako,sj,nko,sko,lko,Qb,tde,iko,dko,lj,cko,fko,mko,Wb,ade,gko,hko,ij,pko,_ko,uko,Hb,nde,bko,Fko,dj,vko,Tko,Mko,Ub,sde,Eko,Cko,cj,wko,Ako,yko,Jb,lde,Lko,xko,fj,kko,Sko,Rko,Yb,ide,Bko,Pko,mj,$ko,Iko,qko,Kb,dde,Nko,jko,gj,Dko,Gko,Oko,Zb,cde,Vko,Xko,hj,zko,Qko,Wko,e2,fde,Hko,Uko,pj,Jko,Yko,Kko,o2,mde,Zko,eSo,_j,oSo,rSo,tSo,r2,gde,aSo,nSo,uj,sSo,lSo,iSo,t2,hde,dSo,cSo,bj,fSo,mSo,gSo,a2,pde,hSo,pSo,Fj,_So,uSo,bSo,n2,_de,FSo,vSo,vj,TSo,MSo,ESo,s2,ude,CSo,wSo,Tj,ASo,ySo,LSo,l2,bde,xSo,kSo,Mj,SSo,RSo,BSo,i2,Fde,PSo,$So,Ej,ISo,qSo,NSo,d2,vde,jSo,DSo,Cj,GSo,OSo,VSo,c2,Tde,XSo,zSo,wj,QSo,WSo,HSo,f2,Mde,USo,JSo,Aj,YSo,KSo,ZSo,m2,eRo,Ede,oRo,rRo,Cde,tRo,aRo,wde,nRo,sRo,tA,pRe,Cd,g2,Ade,aA,lRo,yde,iRo,_Re,nr,nA,dRo,wd,cRo,yj,fRo,mRo,Lj,gRo,hRo,pRo,sA,_Ro,Lde,uRo,bRo,FRo,Zr,lA,vRo,xde,TRo,MRo,Ad,ERo,kde,CRo,wRo,xj,ARo,yRo,LRo,Sde,xRo,kRo,iA,SRo,Qe,dA,RRo,Rde,BRo,PRo,Za,$Ro,Bde,IRo,qRo,Pde,NRo,jRo,$de,DRo,GRo,ORo,R,h2,Ide,VRo,XRo,kj,zRo,QRo,WRo,p2,qde,HRo,URo,Sj,JRo,YRo,KRo,_2,Nde,ZRo,eBo,Rj,oBo,rBo,tBo,u2,jde,aBo,nBo,Bj,sBo,lBo,iBo,b2,Dde,dBo,cBo,Pj,fBo,mBo,gBo,F2,Gde,hBo,pBo,$j,_Bo,uBo,bBo,v2,Ode,FBo,vBo,Ij,TBo,MBo,EBo,T2,Vde,CBo,wBo,qj,ABo,yBo,LBo,M2,Xde,xBo,kBo,Nj,SBo,RBo,BBo,E2,zde,PBo,$Bo,jj,IBo,qBo,NBo,C2,Qde,jBo,DBo,Dj,GBo,OBo,VBo,w2,Wde,XBo,zBo,Gj,QBo,WBo,HBo,A2,Hde,UBo,JBo,Oj,YBo,KBo,ZBo,y2,Ude,ePo,oPo,Vj,rPo,tPo,aPo,L2,Jde,nPo,sPo,Xj,lPo,iPo,dPo,x2,Yde,cPo,fPo,zj,mPo,gPo,hPo,k2,Kde,pPo,_Po,Qj,uPo,bPo,FPo,S2,Zde,vPo,TPo,Wj,MPo,EPo,CPo,R2,ece,wPo,APo,Hj,yPo,LPo,xPo,B2,oce,kPo,SPo,Uj,RPo,BPo,PPo,P2,rce,$Po,IPo,Jj,qPo,NPo,jPo,$2,tce,DPo,GPo,Yj,OPo,VPo,XPo,I2,ace,zPo,QPo,Kj,WPo,HPo,UPo,q2,nce,JPo,YPo,Zj,KPo,ZPo,e$o,N2,sce,o$o,r$o,eD,t$o,a$o,n$o,j2,lce,s$o,l$o,oD,i$o,d$o,c$o,D2,ice,f$o,m$o,rD,g$o,h$o,p$o,G2,dce,_$o,u$o,tD,b$o,F$o,v$o,O2,cce,T$o,M$o,aD,E$o,C$o,w$o,V2,fce,A$o,y$o,nD,L$o,x$o,k$o,X2,mce,S$o,R$o,sD,B$o,P$o,$$o,z2,gce,I$o,q$o,lD,N$o,j$o,D$o,Q2,hce,G$o,O$o,iD,V$o,X$o,z$o,W2,pce,Q$o,W$o,dD,H$o,U$o,J$o,H2,_ce,Y$o,K$o,cD,Z$o,eIo,oIo,U2,uce,rIo,tIo,fD,aIo,nIo,sIo,J2,bce,lIo,iIo,mD,dIo,cIo,fIo,Y2,Fce,mIo,gIo,gD,hIo,pIo,_Io,K2,vce,uIo,bIo,hD,FIo,vIo,TIo,Z2,MIo,Tce,EIo,CIo,Mce,wIo,AIo,Ece,yIo,LIo,cA,uRe,yd,eF,Cce,fA,xIo,wce,kIo,bRe,sr,mA,SIo,Ld,RIo,pD,BIo,PIo,_D,$Io,IIo,qIo,gA,NIo,Ace,jIo,DIo,GIo,et,hA,OIo,yce,VIo,XIo,xd,zIo,Lce,QIo,WIo,uD,HIo,UIo,JIo,xce,YIo,KIo,pA,ZIo,We,_A,eqo,kce,oqo,rqo,en,tqo,Sce,aqo,nqo,Rce,sqo,lqo,Bce,iqo,dqo,cqo,Pce,oF,$ce,fqo,mqo,bD,gqo,hqo,pqo,rF,_qo,Ice,uqo,bqo,qce,Fqo,vqo,Nce,Tqo,Mqo,uA,FRe,kd,tF,jce,bA,Eqo,Dce,Cqo,vRe,lr,FA,wqo,Sd,Aqo,FD,yqo,Lqo,vD,xqo,kqo,Sqo,vA,Rqo,Gce,Bqo,Pqo,$qo,ot,TA,Iqo,Oce,qqo,Nqo,Rd,jqo,Vce,Dqo,Gqo,TD,Oqo,Vqo,Xqo,Xce,zqo,Qqo,MA,Wqo,He,EA,Hqo,zce,Uqo,Jqo,on,Yqo,Qce,Kqo,Zqo,Wce,eNo,oNo,Hce,rNo,tNo,aNo,ge,aF,Uce,nNo,sNo,MD,lNo,iNo,dNo,nF,Jce,cNo,fNo,ED,mNo,gNo,hNo,Gs,Yce,pNo,_No,CD,uNo,bNo,wD,FNo,vNo,TNo,sF,Kce,MNo,ENo,AD,CNo,wNo,ANo,ma,Zce,yNo,LNo,yD,xNo,kNo,LD,SNo,RNo,xD,BNo,PNo,$No,lF,efe,INo,qNo,kD,NNo,jNo,DNo,iF,ofe,GNo,ONo,SD,VNo,XNo,zNo,dF,rfe,QNo,WNo,RD,HNo,UNo,JNo,cF,tfe,YNo,KNo,BD,ZNo,ejo,ojo,fF,afe,rjo,tjo,PD,ajo,njo,sjo,mF,nfe,ljo,ijo,$D,djo,cjo,fjo,gF,mjo,sfe,gjo,hjo,lfe,pjo,_jo,ife,ujo,bjo,CA,TRe,Bd,hF,dfe,wA,Fjo,cfe,vjo,MRe,ir,AA,Tjo,Pd,Mjo,ID,Ejo,Cjo,qD,wjo,Ajo,yjo,yA,Ljo,ffe,xjo,kjo,Sjo,rt,LA,Rjo,mfe,Bjo,Pjo,$d,$jo,gfe,Ijo,qjo,ND,Njo,jjo,Djo,hfe,Gjo,Ojo,xA,Vjo,Ue,kA,Xjo,pfe,zjo,Qjo,rn,Wjo,_fe,Hjo,Ujo,ufe,Jjo,Yjo,bfe,Kjo,Zjo,eDo,Ffe,pF,vfe,oDo,rDo,jD,tDo,aDo,nDo,_F,sDo,Tfe,lDo,iDo,Mfe,dDo,cDo,Efe,fDo,mDo,SA,ERe,Id,uF,Cfe,RA,gDo,wfe,hDo,CRe,dr,BA,pDo,qd,_Do,DD,uDo,bDo,GD,FDo,vDo,TDo,PA,MDo,Afe,EDo,CDo,wDo,tt,$A,ADo,yfe,yDo,LDo,Nd,xDo,Lfe,kDo,SDo,OD,RDo,BDo,PDo,xfe,$Do,IDo,IA,qDo,Je,qA,NDo,kfe,jDo,DDo,tn,GDo,Sfe,ODo,VDo,Rfe,XDo,zDo,Bfe,QDo,WDo,HDo,Se,bF,Pfe,UDo,JDo,VD,YDo,KDo,ZDo,FF,$fe,eGo,oGo,XD,rGo,tGo,aGo,vF,Ife,nGo,sGo,zD,lGo,iGo,dGo,TF,qfe,cGo,fGo,QD,mGo,gGo,hGo,MF,Nfe,pGo,_Go,WD,uGo,bGo,FGo,EF,jfe,vGo,TGo,HD,MGo,EGo,CGo,CF,Dfe,wGo,AGo,UD,yGo,LGo,xGo,wF,Gfe,kGo,SGo,JD,RGo,BGo,PGo,AF,$Go,Ofe,IGo,qGo,Vfe,NGo,jGo,Xfe,DGo,GGo,NA,wRe,jd,yF,zfe,jA,OGo,Qfe,VGo,ARe,cr,DA,XGo,Dd,zGo,YD,QGo,WGo,KD,HGo,UGo,JGo,GA,YGo,Wfe,KGo,ZGo,eOo,at,OA,oOo,Hfe,rOo,tOo,Gd,aOo,Ufe,nOo,sOo,ZD,lOo,iOo,dOo,Jfe,cOo,fOo,VA,mOo,Ye,XA,gOo,Yfe,hOo,pOo,an,_Oo,Kfe,uOo,bOo,Zfe,FOo,vOo,eme,TOo,MOo,EOo,nn,LF,ome,COo,wOo,eG,AOo,yOo,LOo,xF,rme,xOo,kOo,oG,SOo,ROo,BOo,kF,tme,POo,$Oo,rG,IOo,qOo,NOo,SF,ame,jOo,DOo,tG,GOo,OOo,VOo,RF,XOo,nme,zOo,QOo,sme,WOo,HOo,lme,UOo,JOo,zA,yRe,Od,BF,ime,QA,YOo,dme,KOo,LRe,fr,WA,ZOo,Vd,eVo,aG,oVo,rVo,nG,tVo,aVo,nVo,HA,sVo,cme,lVo,iVo,dVo,nt,UA,cVo,fme,fVo,mVo,Xd,gVo,mme,hVo,pVo,sG,_Vo,uVo,bVo,gme,FVo,vVo,JA,TVo,Ke,YA,MVo,hme,EVo,CVo,sn,wVo,pme,AVo,yVo,_me,LVo,xVo,ume,kVo,SVo,RVo,Re,PF,bme,BVo,PVo,lG,$Vo,IVo,qVo,$F,Fme,NVo,jVo,iG,DVo,GVo,OVo,IF,vme,VVo,XVo,dG,zVo,QVo,WVo,qF,Tme,HVo,UVo,cG,JVo,YVo,KVo,NF,Mme,ZVo,eXo,fG,oXo,rXo,tXo,jF,Eme,aXo,nXo,mG,sXo,lXo,iXo,DF,Cme,dXo,cXo,gG,fXo,mXo,gXo,GF,wme,hXo,pXo,hG,_Xo,uXo,bXo,OF,FXo,Ame,vXo,TXo,yme,MXo,EXo,Lme,CXo,wXo,KA,xRe,zd,VF,xme,ZA,AXo,kme,yXo,kRe,mr,e0,LXo,Qd,xXo,pG,kXo,SXo,_G,RXo,BXo,PXo,o0,$Xo,Sme,IXo,qXo,NXo,st,r0,jXo,Rme,DXo,GXo,Wd,OXo,Bme,VXo,XXo,uG,zXo,QXo,WXo,Pme,HXo,UXo,t0,JXo,Ze,a0,YXo,$me,KXo,ZXo,ln,ezo,Ime,ozo,rzo,qme,tzo,azo,Nme,nzo,szo,lzo,n0,XF,jme,izo,dzo,bG,czo,fzo,mzo,zF,Dme,gzo,hzo,FG,pzo,_zo,uzo,QF,bzo,Gme,Fzo,vzo,Ome,Tzo,Mzo,Vme,Ezo,Czo,s0,SRe,Hd,WF,Xme,l0,wzo,zme,Azo,RRe,gr,i0,yzo,Ud,Lzo,vG,xzo,kzo,TG,Szo,Rzo,Bzo,d0,Pzo,Qme,$zo,Izo,qzo,lt,c0,Nzo,Wme,jzo,Dzo,Jd,Gzo,Hme,Ozo,Vzo,MG,Xzo,zzo,Qzo,Ume,Wzo,Hzo,f0,Uzo,eo,m0,Jzo,Jme,Yzo,Kzo,dn,Zzo,Yme,eQo,oQo,Kme,rQo,tQo,Zme,aQo,nQo,sQo,cn,HF,ege,lQo,iQo,EG,dQo,cQo,fQo,UF,oge,mQo,gQo,CG,hQo,pQo,_Qo,JF,rge,uQo,bQo,wG,FQo,vQo,TQo,YF,tge,MQo,EQo,AG,CQo,wQo,AQo,KF,yQo,age,LQo,xQo,nge,kQo,SQo,sge,RQo,BQo,g0,BRe,Yd,ZF,lge,h0,PQo,ige,$Qo,PRe,hr,p0,IQo,Kd,qQo,yG,NQo,jQo,LG,DQo,GQo,OQo,_0,VQo,dge,XQo,zQo,QQo,it,u0,WQo,cge,HQo,UQo,Zd,JQo,fge,YQo,KQo,xG,ZQo,eWo,oWo,mge,rWo,tWo,b0,aWo,oo,F0,nWo,gge,sWo,lWo,fn,iWo,hge,dWo,cWo,pge,fWo,mWo,_ge,gWo,hWo,pWo,ec,ev,uge,_Wo,uWo,kG,bWo,FWo,vWo,ov,bge,TWo,MWo,SG,EWo,CWo,wWo,rv,Fge,AWo,yWo,RG,LWo,xWo,kWo,tv,SWo,vge,RWo,BWo,Tge,PWo,$Wo,Mge,IWo,qWo,v0,$Re,oc,av,Ege,T0,NWo,Cge,jWo,IRe,pr,M0,DWo,rc,GWo,BG,OWo,VWo,PG,XWo,zWo,QWo,E0,WWo,wge,HWo,UWo,JWo,dt,C0,YWo,Age,KWo,ZWo,tc,eHo,yge,oHo,rHo,$G,tHo,aHo,nHo,Lge,sHo,lHo,w0,iHo,ro,A0,dHo,xge,cHo,fHo,mn,mHo,kge,gHo,hHo,Sge,pHo,_Ho,Rge,uHo,bHo,FHo,Bge,nv,Pge,vHo,THo,IG,MHo,EHo,CHo,sv,wHo,$ge,AHo,yHo,Ige,LHo,xHo,qge,kHo,SHo,y0,qRe,ac,lv,Nge,L0,RHo,jge,BHo,NRe,_r,x0,PHo,nc,$Ho,qG,IHo,qHo,NG,NHo,jHo,DHo,k0,GHo,Dge,OHo,VHo,XHo,ct,S0,zHo,Gge,QHo,WHo,sc,HHo,Oge,UHo,JHo,jG,YHo,KHo,ZHo,Vge,eUo,oUo,R0,rUo,to,B0,tUo,Xge,aUo,nUo,gn,sUo,zge,lUo,iUo,Qge,dUo,cUo,Wge,fUo,mUo,gUo,Hge,iv,Uge,hUo,pUo,DG,_Uo,uUo,bUo,dv,FUo,Jge,vUo,TUo,Yge,MUo,EUo,Kge,CUo,wUo,P0,jRe,lc,cv,Zge,$0,AUo,ehe,yUo,DRe,ur,I0,LUo,ic,xUo,GG,kUo,SUo,OG,RUo,BUo,PUo,q0,$Uo,ohe,IUo,qUo,NUo,ft,N0,jUo,rhe,DUo,GUo,dc,OUo,the,VUo,XUo,VG,zUo,QUo,WUo,ahe,HUo,UUo,j0,JUo,ao,D0,YUo,nhe,KUo,ZUo,hn,eJo,she,oJo,rJo,lhe,tJo,aJo,ihe,nJo,sJo,lJo,cc,fv,dhe,iJo,dJo,XG,cJo,fJo,mJo,mv,che,gJo,hJo,zG,pJo,_Jo,uJo,gv,fhe,bJo,FJo,QG,vJo,TJo,MJo,hv,EJo,mhe,CJo,wJo,ghe,AJo,yJo,hhe,LJo,xJo,G0,GRe,fc,pv,phe,O0,kJo,_he,SJo,ORe,br,V0,RJo,mc,BJo,WG,PJo,$Jo,HG,IJo,qJo,NJo,X0,jJo,uhe,DJo,GJo,OJo,mt,z0,VJo,bhe,XJo,zJo,gc,QJo,Fhe,WJo,HJo,UG,UJo,JJo,YJo,vhe,KJo,ZJo,Q0,eYo,no,W0,oYo,The,rYo,tYo,pn,aYo,Mhe,nYo,sYo,Ehe,lYo,iYo,Che,dYo,cYo,fYo,whe,_v,Ahe,mYo,gYo,JG,hYo,pYo,_Yo,uv,uYo,yhe,bYo,FYo,Lhe,vYo,TYo,xhe,MYo,EYo,H0,VRe,hc,bv,khe,U0,CYo,She,wYo,XRe,Fr,J0,AYo,pc,yYo,YG,LYo,xYo,KG,kYo,SYo,RYo,Y0,BYo,Rhe,PYo,$Yo,IYo,gt,K0,qYo,Bhe,NYo,jYo,_c,DYo,Phe,GYo,OYo,ZG,VYo,XYo,zYo,$he,QYo,WYo,Z0,HYo,ho,ey,UYo,Ihe,JYo,YYo,_n,KYo,qhe,ZYo,eKo,Nhe,oKo,rKo,jhe,tKo,aKo,nKo,x,Fv,Dhe,sKo,lKo,eO,iKo,dKo,cKo,vv,Ghe,fKo,mKo,oO,gKo,hKo,pKo,Tv,Ohe,_Ko,uKo,rO,bKo,FKo,vKo,Mv,Vhe,TKo,MKo,tO,EKo,CKo,wKo,Ev,Xhe,AKo,yKo,aO,LKo,xKo,kKo,Cv,zhe,SKo,RKo,nO,BKo,PKo,$Ko,wv,Qhe,IKo,qKo,sO,NKo,jKo,DKo,Av,Whe,GKo,OKo,lO,VKo,XKo,zKo,yv,Hhe,QKo,WKo,iO,HKo,UKo,JKo,Lv,Uhe,YKo,KKo,dO,ZKo,eZo,oZo,xv,Jhe,rZo,tZo,cO,aZo,nZo,sZo,kv,Yhe,lZo,iZo,fO,dZo,cZo,fZo,Sv,Khe,mZo,gZo,mO,hZo,pZo,_Zo,Rv,Zhe,uZo,bZo,gO,FZo,vZo,TZo,Bv,epe,MZo,EZo,hO,CZo,wZo,AZo,Pv,ope,yZo,LZo,pO,xZo,kZo,SZo,Os,rpe,RZo,BZo,_O,PZo,$Zo,uO,IZo,qZo,NZo,$v,tpe,jZo,DZo,bO,GZo,OZo,VZo,Iv,ape,XZo,zZo,FO,QZo,WZo,HZo,qv,npe,UZo,JZo,vO,YZo,KZo,ZZo,Nv,spe,eer,oer,TO,rer,ter,aer,jv,lpe,ner,ser,MO,ler,ier,der,Dv,ipe,cer,fer,EO,mer,ger,her,Gv,dpe,per,_er,CO,uer,ber,Fer,Ov,cpe,ver,Ter,wO,Mer,Eer,Cer,Vv,fpe,wer,Aer,AO,yer,Ler,xer,Xv,mpe,ker,Ser,yO,Rer,Ber,Per,zv,gpe,$er,Ier,LO,qer,Ner,jer,Qv,hpe,Der,Ger,xO,Oer,Ver,Xer,Wv,ppe,zer,Qer,kO,Wer,Her,Uer,Hv,_pe,Jer,Yer,SO,Ker,Zer,eor,Uv,upe,oor,ror,RO,tor,aor,nor,Jv,bpe,sor,lor,BO,ior,dor,cor,Yv,Fpe,mor,gor,PO,hor,por,_or,Kv,vpe,uor,bor,$O,For,vor,Tor,Zv,Tpe,Mor,Eor,IO,Cor,wor,Aor,e6,Mpe,yor,Lor,qO,xor,kor,Sor,o6,Epe,Ror,Bor,NO,Por,$or,Ior,r6,Cpe,qor,Nor,jO,jor,Dor,Gor,t6,wpe,Oor,Vor,DO,Xor,zor,Qor,a6,Ape,Wor,Hor,GO,Uor,Jor,Yor,n6,ype,Kor,Zor,OO,err,orr,rrr,s6,Lpe,trr,arr,VO,nrr,srr,lrr,l6,xpe,irr,drr,XO,crr,frr,mrr,kpe,grr,hrr,oy,zRe,uc,i6,Spe,ry,prr,Rpe,_rr,QRe,vr,ty,urr,bc,brr,zO,Frr,vrr,QO,Trr,Mrr,Err,ay,Crr,Bpe,wrr,Arr,yrr,ht,ny,Lrr,Ppe,xrr,krr,Fc,Srr,$pe,Rrr,Brr,WO,Prr,$rr,Irr,Ipe,qrr,Nrr,sy,jrr,po,ly,Drr,qpe,Grr,Orr,un,Vrr,Npe,Xrr,zrr,jpe,Qrr,Wrr,Dpe,Hrr,Urr,Jrr,H,d6,Gpe,Yrr,Krr,HO,Zrr,etr,otr,c6,Ope,rtr,ttr,UO,atr,ntr,str,f6,Vpe,ltr,itr,JO,dtr,ctr,ftr,m6,Xpe,mtr,gtr,YO,htr,ptr,_tr,g6,zpe,utr,btr,KO,Ftr,vtr,Ttr,h6,Qpe,Mtr,Etr,ZO,Ctr,wtr,Atr,p6,Wpe,ytr,Ltr,eV,xtr,ktr,Str,_6,Hpe,Rtr,Btr,oV,Ptr,$tr,Itr,u6,Upe,qtr,Ntr,rV,jtr,Dtr,Gtr,b6,Jpe,Otr,Vtr,tV,Xtr,ztr,Qtr,F6,Ype,Wtr,Htr,aV,Utr,Jtr,Ytr,v6,Kpe,Ktr,Ztr,nV,ear,oar,rar,T6,Zpe,tar,aar,sV,nar,sar,lar,M6,e_e,iar,dar,lV,car,far,mar,E6,o_e,gar,har,iV,par,_ar,uar,C6,r_e,bar,Far,dV,Tar,Mar,Ear,w6,t_e,Car,war,cV,Aar,yar,Lar,A6,a_e,xar,kar,fV,Sar,Rar,Bar,y6,n_e,Par,$ar,mV,Iar,qar,Nar,L6,s_e,jar,Dar,gV,Gar,Oar,Var,x6,l_e,Xar,zar,hV,Qar,War,Har,k6,i_e,Uar,Jar,pV,Yar,Kar,Zar,S6,d_e,enr,onr,_V,rnr,tnr,anr,c_e,nnr,snr,iy,WRe,vc,R6,f_e,dy,lnr,m_e,inr,HRe,Tr,cy,dnr,Tc,cnr,uV,fnr,mnr,bV,gnr,hnr,pnr,fy,_nr,g_e,unr,bnr,Fnr,pt,my,vnr,h_e,Tnr,Mnr,Mc,Enr,p_e,Cnr,wnr,FV,Anr,ynr,Lnr,__e,xnr,knr,gy,Snr,_o,hy,Rnr,u_e,Bnr,Pnr,bn,$nr,b_e,Inr,qnr,F_e,Nnr,jnr,v_e,Dnr,Gnr,Onr,ce,B6,T_e,Vnr,Xnr,vV,znr,Qnr,Wnr,P6,M_e,Hnr,Unr,TV,Jnr,Ynr,Knr,$6,E_e,Znr,esr,MV,osr,rsr,tsr,I6,C_e,asr,nsr,EV,ssr,lsr,isr,q6,w_e,dsr,csr,CV,fsr,msr,gsr,N6,A_e,hsr,psr,wV,_sr,usr,bsr,j6,y_e,Fsr,vsr,AV,Tsr,Msr,Esr,D6,L_e,Csr,wsr,yV,Asr,ysr,Lsr,G6,x_e,xsr,ksr,LV,Ssr,Rsr,Bsr,O6,k_e,Psr,$sr,xV,Isr,qsr,Nsr,V6,S_e,jsr,Dsr,kV,Gsr,Osr,Vsr,X6,R_e,Xsr,zsr,SV,Qsr,Wsr,Hsr,B_e,Usr,Jsr,py,URe,Ec,z6,P_e,_y,Ysr,$_e,Ksr,JRe,Mr,uy,Zsr,Cc,elr,RV,olr,rlr,BV,tlr,alr,nlr,by,slr,I_e,llr,ilr,dlr,_t,Fy,clr,q_e,flr,mlr,wc,glr,N_e,hlr,plr,PV,_lr,ulr,blr,j_e,Flr,vlr,vy,Tlr,uo,Ty,Mlr,D_e,Elr,Clr,Fn,wlr,G_e,Alr,ylr,O_e,Llr,xlr,V_e,klr,Slr,Rlr,My,Q6,X_e,Blr,Plr,$V,$lr,Ilr,qlr,W6,z_e,Nlr,jlr,IV,Dlr,Glr,Olr,Q_e,Vlr,Xlr,Ey,YRe,Ac,H6,W_e,Cy,zlr,H_e,Qlr,KRe,Er,wy,Wlr,yc,Hlr,qV,Ulr,Jlr,NV,Ylr,Klr,Zlr,Ay,eir,U_e,oir,rir,tir,ut,yy,air,J_e,nir,sir,Lc,lir,Y_e,iir,dir,jV,cir,fir,mir,K_e,gir,hir,Ly,pir,bo,xy,_ir,Z_e,uir,bir,vn,Fir,eue,vir,Tir,oue,Mir,Eir,rue,Cir,wir,Air,J,U6,tue,yir,Lir,DV,xir,kir,Sir,J6,aue,Rir,Bir,GV,Pir,$ir,Iir,Y6,nue,qir,Nir,OV,jir,Dir,Gir,K6,sue,Oir,Vir,VV,Xir,zir,Qir,Z6,lue,Wir,Hir,XV,Uir,Jir,Yir,eT,iue,Kir,Zir,zV,edr,odr,rdr,oT,due,tdr,adr,QV,ndr,sdr,ldr,rT,cue,idr,ddr,WV,cdr,fdr,mdr,tT,fue,gdr,hdr,HV,pdr,_dr,udr,aT,mue,bdr,Fdr,UV,vdr,Tdr,Mdr,nT,gue,Edr,Cdr,JV,wdr,Adr,ydr,sT,hue,Ldr,xdr,YV,kdr,Sdr,Rdr,lT,pue,Bdr,Pdr,KV,$dr,Idr,qdr,iT,_ue,Ndr,jdr,ZV,Ddr,Gdr,Odr,dT,uue,Vdr,Xdr,eX,zdr,Qdr,Wdr,cT,bue,Hdr,Udr,oX,Jdr,Ydr,Kdr,fT,Fue,Zdr,ecr,rX,ocr,rcr,tcr,mT,vue,acr,ncr,tX,scr,lcr,icr,gT,Tue,dcr,ccr,aX,fcr,mcr,gcr,hT,Mue,hcr,pcr,nX,_cr,ucr,bcr,Eue,Fcr,vcr,ky,ZRe,xc,pT,Cue,Sy,Tcr,wue,Mcr,eBe,Cr,Ry,Ecr,kc,Ccr,sX,wcr,Acr,lX,ycr,Lcr,xcr,By,kcr,Aue,Scr,Rcr,Bcr,bt,Py,Pcr,yue,$cr,Icr,Sc,qcr,Lue,Ncr,jcr,iX,Dcr,Gcr,Ocr,xue,Vcr,Xcr,$y,zcr,Fo,Iy,Qcr,kue,Wcr,Hcr,Tn,Ucr,Sue,Jcr,Ycr,Rue,Kcr,Zcr,Bue,efr,ofr,rfr,ue,_T,Pue,tfr,afr,dX,nfr,sfr,lfr,uT,$ue,ifr,dfr,cX,cfr,ffr,mfr,bT,Iue,gfr,hfr,fX,pfr,_fr,ufr,FT,que,bfr,Ffr,mX,vfr,Tfr,Mfr,vT,Nue,Efr,Cfr,gX,wfr,Afr,yfr,TT,jue,Lfr,xfr,hX,kfr,Sfr,Rfr,MT,Due,Bfr,Pfr,pX,$fr,Ifr,qfr,ET,Gue,Nfr,jfr,_X,Dfr,Gfr,Ofr,CT,Oue,Vfr,Xfr,uX,zfr,Qfr,Wfr,wT,Vue,Hfr,Ufr,bX,Jfr,Yfr,Kfr,Xue,Zfr,emr,qy,oBe,Rc,AT,zue,Ny,omr,Que,rmr,rBe,wr,jy,tmr,Bc,amr,FX,nmr,smr,vX,lmr,imr,dmr,Dy,cmr,Wue,fmr,mmr,gmr,Ft,Gy,hmr,Hue,pmr,_mr,Pc,umr,Uue,bmr,Fmr,TX,vmr,Tmr,Mmr,Jue,Emr,Cmr,Oy,wmr,vo,Vy,Amr,Yue,ymr,Lmr,Mn,xmr,Kue,kmr,Smr,Zue,Rmr,Bmr,e1e,Pmr,$mr,Imr,V,yT,o1e,qmr,Nmr,MX,jmr,Dmr,Gmr,LT,r1e,Omr,Vmr,EX,Xmr,zmr,Qmr,xT,t1e,Wmr,Hmr,CX,Umr,Jmr,Ymr,kT,a1e,Kmr,Zmr,wX,egr,ogr,rgr,ST,n1e,tgr,agr,AX,ngr,sgr,lgr,RT,s1e,igr,dgr,yX,cgr,fgr,mgr,BT,l1e,ggr,hgr,LX,pgr,_gr,ugr,PT,i1e,bgr,Fgr,xX,vgr,Tgr,Mgr,$T,d1e,Egr,Cgr,kX,wgr,Agr,ygr,IT,c1e,Lgr,xgr,SX,kgr,Sgr,Rgr,qT,f1e,Bgr,Pgr,RX,$gr,Igr,qgr,NT,m1e,Ngr,jgr,BX,Dgr,Ggr,Ogr,jT,g1e,Vgr,Xgr,PX,zgr,Qgr,Wgr,DT,h1e,Hgr,Ugr,$X,Jgr,Ygr,Kgr,GT,p1e,Zgr,ehr,IX,ohr,rhr,thr,OT,_1e,ahr,nhr,qX,shr,lhr,ihr,VT,u1e,dhr,chr,NX,fhr,mhr,ghr,XT,b1e,hhr,phr,jX,_hr,uhr,bhr,zT,F1e,Fhr,vhr,DX,Thr,Mhr,Ehr,QT,v1e,Chr,whr,GX,Ahr,yhr,Lhr,WT,T1e,xhr,khr,OX,Shr,Rhr,Bhr,HT,M1e,Phr,$hr,VX,Ihr,qhr,Nhr,UT,E1e,jhr,Dhr,XX,Ghr,Ohr,Vhr,JT,C1e,Xhr,zhr,zX,Qhr,Whr,Hhr,YT,w1e,Uhr,Jhr,QX,Yhr,Khr,Zhr,KT,A1e,epr,opr,WX,rpr,tpr,apr,y1e,npr,spr,Xy,tBe,$c,ZT,L1e,zy,lpr,x1e,ipr,aBe,Ar,Qy,dpr,Ic,cpr,HX,fpr,mpr,UX,gpr,hpr,ppr,Wy,_pr,k1e,upr,bpr,Fpr,vt,Hy,vpr,S1e,Tpr,Mpr,qc,Epr,R1e,Cpr,wpr,JX,Apr,ypr,Lpr,B1e,xpr,kpr,Uy,Spr,To,Jy,Rpr,P1e,Bpr,Ppr,En,$pr,$1e,Ipr,qpr,I1e,Npr,jpr,q1e,Dpr,Gpr,Opr,ae,eM,N1e,Vpr,Xpr,YX,zpr,Qpr,Wpr,oM,j1e,Hpr,Upr,KX,Jpr,Ypr,Kpr,rM,D1e,Zpr,e_r,ZX,o_r,r_r,t_r,tM,G1e,a_r,n_r,ez,s_r,l_r,i_r,aM,O1e,d_r,c_r,oz,f_r,m_r,g_r,nM,V1e,h_r,p_r,rz,__r,u_r,b_r,sM,X1e,F_r,v_r,tz,T_r,M_r,E_r,lM,z1e,C_r,w_r,az,A_r,y_r,L_r,iM,Q1e,x_r,k_r,nz,S_r,R_r,B_r,dM,W1e,P_r,$_r,sz,I_r,q_r,N_r,cM,H1e,j_r,D_r,lz,G_r,O_r,V_r,fM,U1e,X_r,z_r,iz,Q_r,W_r,H_r,mM,J1e,U_r,J_r,dz,Y_r,K_r,Z_r,gM,Y1e,eur,our,cz,rur,tur,aur,hM,K1e,nur,sur,fz,lur,iur,dur,pM,Z1e,cur,fur,mz,mur,gur,hur,_M,e5e,pur,_ur,gz,uur,bur,Fur,o5e,vur,Tur,Yy,nBe,Nc,uM,r5e,Ky,Mur,t5e,Eur,sBe,yr,Zy,Cur,jc,wur,hz,Aur,yur,pz,Lur,xur,kur,eL,Sur,a5e,Rur,Bur,Pur,Tt,oL,$ur,n5e,Iur,qur,Dc,Nur,s5e,jur,Dur,_z,Gur,Our,Vur,l5e,Xur,zur,rL,Qur,Mo,tL,Wur,i5e,Hur,Uur,Cn,Jur,d5e,Yur,Kur,c5e,Zur,e1r,f5e,o1r,r1r,t1r,m5e,bM,g5e,a1r,n1r,uz,s1r,l1r,i1r,h5e,d1r,c1r,aL,lBe,Gc,FM,p5e,nL,f1r,_5e,m1r,iBe,Lr,sL,g1r,Oc,h1r,bz,p1r,_1r,Fz,u1r,b1r,F1r,lL,v1r,u5e,T1r,M1r,E1r,Mt,iL,C1r,b5e,w1r,A1r,Vc,y1r,F5e,L1r,x1r,vz,k1r,S1r,R1r,v5e,B1r,P1r,dL,$1r,Eo,cL,I1r,T5e,q1r,N1r,wn,j1r,M5e,D1r,G1r,E5e,O1r,V1r,C5e,X1r,z1r,Q1r,Y,vM,w5e,W1r,H1r,Tz,U1r,J1r,Y1r,TM,A5e,K1r,Z1r,Mz,e5r,o5r,r5r,MM,y5e,t5r,a5r,Ez,n5r,s5r,l5r,EM,L5e,i5r,d5r,Cz,c5r,f5r,m5r,CM,x5e,g5r,h5r,wz,p5r,_5r,u5r,wM,k5e,b5r,F5r,Az,v5r,T5r,M5r,AM,S5e,E5r,C5r,yz,w5r,A5r,y5r,yM,R5e,L5r,x5r,Lz,k5r,S5r,R5r,LM,B5e,B5r,P5r,xz,$5r,I5r,q5r,xM,P5e,N5r,j5r,kz,D5r,G5r,O5r,kM,$5e,V5r,X5r,Sz,z5r,Q5r,W5r,SM,I5e,H5r,U5r,Rz,J5r,Y5r,K5r,RM,q5e,Z5r,ebr,Bz,obr,rbr,tbr,BM,N5e,abr,nbr,Pz,sbr,lbr,ibr,PM,j5e,dbr,cbr,$z,fbr,mbr,gbr,$M,D5e,hbr,pbr,Iz,_br,ubr,bbr,IM,G5e,Fbr,vbr,qz,Tbr,Mbr,Ebr,qM,O5e,Cbr,wbr,Nz,Abr,ybr,Lbr,NM,V5e,xbr,kbr,jz,Sbr,Rbr,Bbr,jM,X5e,Pbr,$br,Dz,Ibr,qbr,Nbr,z5e,jbr,Dbr,fL,dBe,Xc,DM,Q5e,mL,Gbr,W5e,Obr,cBe,xr,gL,Vbr,zc,Xbr,Gz,zbr,Qbr,Oz,Wbr,Hbr,Ubr,hL,Jbr,H5e,Ybr,Kbr,Zbr,Et,pL,e2r,U5e,o2r,r2r,Qc,t2r,J5e,a2r,n2r,Vz,s2r,l2r,i2r,Y5e,d2r,c2r,_L,f2r,Co,uL,m2r,K5e,g2r,h2r,An,p2r,Z5e,_2r,u2r,ebe,b2r,F2r,obe,v2r,T2r,M2r,K,GM,rbe,E2r,C2r,Xz,w2r,A2r,y2r,OM,tbe,L2r,x2r,zz,k2r,S2r,R2r,VM,abe,B2r,P2r,Qz,$2r,I2r,q2r,XM,nbe,N2r,j2r,Wz,D2r,G2r,O2r,zM,sbe,V2r,X2r,Hz,z2r,Q2r,W2r,QM,lbe,H2r,U2r,Uz,J2r,Y2r,K2r,WM,ibe,Z2r,eFr,Jz,oFr,rFr,tFr,HM,dbe,aFr,nFr,Yz,sFr,lFr,iFr,UM,cbe,dFr,cFr,Kz,fFr,mFr,gFr,JM,fbe,hFr,pFr,Zz,_Fr,uFr,bFr,YM,mbe,FFr,vFr,eQ,TFr,MFr,EFr,KM,gbe,CFr,wFr,oQ,AFr,yFr,LFr,ZM,hbe,xFr,kFr,rQ,SFr,RFr,BFr,e4,pbe,PFr,$Fr,tQ,IFr,qFr,NFr,o4,_be,jFr,DFr,aQ,GFr,OFr,VFr,r4,ube,XFr,zFr,nQ,QFr,WFr,HFr,t4,bbe,UFr,JFr,sQ,YFr,KFr,ZFr,a4,Fbe,evr,ovr,lQ,rvr,tvr,avr,n4,vbe,nvr,svr,iQ,lvr,ivr,dvr,s4,Tbe,cvr,fvr,dQ,mvr,gvr,hvr,Mbe,pvr,_vr,bL,fBe,Wc,l4,Ebe,FL,uvr,Cbe,bvr,mBe,kr,vL,Fvr,Hc,vvr,cQ,Tvr,Mvr,fQ,Evr,Cvr,wvr,TL,Avr,wbe,yvr,Lvr,xvr,Ct,ML,kvr,Abe,Svr,Rvr,Uc,Bvr,ybe,Pvr,$vr,mQ,Ivr,qvr,Nvr,Lbe,jvr,Dvr,EL,Gvr,wo,CL,Ovr,xbe,Vvr,Xvr,yn,zvr,kbe,Qvr,Wvr,Sbe,Hvr,Uvr,Rbe,Jvr,Yvr,Kvr,Bbe,i4,Pbe,Zvr,e6r,gQ,o6r,r6r,t6r,$be,a6r,n6r,wL,gBe,Jc,d4,Ibe,AL,s6r,qbe,l6r,hBe,Sr,yL,i6r,Yc,d6r,hQ,c6r,f6r,pQ,m6r,g6r,h6r,LL,p6r,Nbe,_6r,u6r,b6r,wt,xL,F6r,jbe,v6r,T6r,Kc,M6r,Dbe,E6r,C6r,_Q,w6r,A6r,y6r,Gbe,L6r,x6r,kL,k6r,Ao,SL,S6r,Obe,R6r,B6r,Ln,P6r,Vbe,$6r,I6r,Xbe,q6r,N6r,zbe,j6r,D6r,G6r,Qbe,c4,Wbe,O6r,V6r,uQ,X6r,z6r,Q6r,Hbe,W6r,H6r,RL,pBe,Zc,f4,Ube,BL,U6r,Jbe,J6r,_Be,Rr,PL,Y6r,ef,K6r,bQ,Z6r,eTr,FQ,oTr,rTr,tTr,$L,aTr,Ybe,nTr,sTr,lTr,At,IL,iTr,Kbe,dTr,cTr,of,fTr,Zbe,mTr,gTr,vQ,hTr,pTr,_Tr,e2e,uTr,bTr,qL,FTr,yo,NL,vTr,o2e,TTr,MTr,xn,ETr,r2e,CTr,wTr,t2e,ATr,yTr,a2e,LTr,xTr,kTr,z,m4,n2e,STr,RTr,TQ,BTr,PTr,$Tr,g4,s2e,ITr,qTr,MQ,NTr,jTr,DTr,h4,l2e,GTr,OTr,EQ,VTr,XTr,zTr,p4,i2e,QTr,WTr,CQ,HTr,UTr,JTr,_4,d2e,YTr,KTr,wQ,ZTr,eMr,oMr,u4,c2e,rMr,tMr,AQ,aMr,nMr,sMr,b4,f2e,lMr,iMr,yQ,dMr,cMr,fMr,F4,m2e,mMr,gMr,LQ,hMr,pMr,_Mr,v4,g2e,uMr,bMr,xQ,FMr,vMr,TMr,T4,h2e,MMr,EMr,kQ,CMr,wMr,AMr,M4,p2e,yMr,LMr,SQ,xMr,kMr,SMr,E4,_2e,RMr,BMr,RQ,PMr,$Mr,IMr,C4,u2e,qMr,NMr,BQ,jMr,DMr,GMr,w4,b2e,OMr,VMr,PQ,XMr,zMr,QMr,A4,F2e,WMr,HMr,$Q,UMr,JMr,YMr,y4,v2e,KMr,ZMr,IQ,e4r,o4r,r4r,L4,T2e,t4r,a4r,qQ,n4r,s4r,l4r,x4,M2e,i4r,d4r,NQ,c4r,f4r,m4r,k4,E2e,g4r,h4r,jQ,p4r,_4r,u4r,S4,C2e,b4r,F4r,DQ,v4r,T4r,M4r,R4,w2e,E4r,C4r,GQ,w4r,A4r,y4r,B4,A2e,L4r,x4r,OQ,k4r,S4r,R4r,P4,y2e,B4r,P4r,VQ,$4r,I4r,q4r,$4,L2e,N4r,j4r,XQ,D4r,G4r,O4r,I4,x2e,V4r,X4r,zQ,z4r,Q4r,W4r,k2e,H4r,U4r,jL,uBe,rf,q4,S2e,DL,J4r,R2e,Y4r,bBe,Br,GL,K4r,tf,Z4r,QQ,eEr,oEr,WQ,rEr,tEr,aEr,OL,nEr,B2e,sEr,lEr,iEr,yt,VL,dEr,P2e,cEr,fEr,af,mEr,$2e,gEr,hEr,HQ,pEr,_Er,uEr,I2e,bEr,FEr,XL,vEr,Lo,zL,TEr,q2e,MEr,EEr,kn,CEr,N2e,wEr,AEr,j2e,yEr,LEr,D2e,xEr,kEr,SEr,ca,N4,G2e,REr,BEr,UQ,PEr,$Er,IEr,j4,O2e,qEr,NEr,JQ,jEr,DEr,GEr,D4,V2e,OEr,VEr,YQ,XEr,zEr,QEr,G4,X2e,WEr,HEr,KQ,UEr,JEr,YEr,O4,z2e,KEr,ZEr,ZQ,eCr,oCr,rCr,Q2e,tCr,aCr,QL,FBe,nf,V4,W2e,WL,nCr,H2e,sCr,vBe,Pr,HL,lCr,sf,iCr,eW,dCr,cCr,oW,fCr,mCr,gCr,UL,hCr,U2e,pCr,_Cr,uCr,Lt,JL,bCr,J2e,FCr,vCr,lf,TCr,Y2e,MCr,ECr,rW,CCr,wCr,ACr,K2e,yCr,LCr,YL,xCr,xo,KL,kCr,Z2e,SCr,RCr,Sn,BCr,eFe,PCr,$Cr,oFe,ICr,qCr,rFe,NCr,jCr,DCr,fe,X4,tFe,GCr,OCr,tW,VCr,XCr,zCr,z4,aFe,QCr,WCr,aW,HCr,UCr,JCr,Q4,nFe,YCr,KCr,nW,ZCr,e3r,o3r,W4,sFe,r3r,t3r,sW,a3r,n3r,s3r,H4,lFe,l3r,i3r,lW,d3r,c3r,f3r,U4,iFe,m3r,g3r,iW,h3r,p3r,_3r,J4,dFe,u3r,b3r,dW,F3r,v3r,T3r,Y4,cFe,M3r,E3r,cW,C3r,w3r,A3r,K4,fFe,y3r,L3r,fW,x3r,k3r,S3r,Z4,mFe,R3r,B3r,mW,P3r,$3r,I3r,eE,gFe,q3r,N3r,gW,j3r,D3r,G3r,oE,hFe,O3r,V3r,hW,X3r,z3r,Q3r,pFe,W3r,H3r,ZL,TBe,df,rE,_Fe,e8,U3r,uFe,J3r,MBe,$r,o8,Y3r,cf,K3r,pW,Z3r,ewr,_W,owr,rwr,twr,r8,awr,bFe,nwr,swr,lwr,xt,t8,iwr,FFe,dwr,cwr,ff,fwr,vFe,mwr,gwr,uW,hwr,pwr,_wr,TFe,uwr,bwr,a8,Fwr,ko,n8,vwr,MFe,Twr,Mwr,Rn,Ewr,EFe,Cwr,wwr,CFe,Awr,ywr,wFe,Lwr,xwr,kwr,be,tE,AFe,Swr,Rwr,bW,Bwr,Pwr,$wr,aE,yFe,Iwr,qwr,FW,Nwr,jwr,Dwr,nE,LFe,Gwr,Owr,vW,Vwr,Xwr,zwr,sE,xFe,Qwr,Wwr,TW,Hwr,Uwr,Jwr,lE,kFe,Ywr,Kwr,MW,Zwr,eAr,oAr,iE,SFe,rAr,tAr,EW,aAr,nAr,sAr,dE,RFe,lAr,iAr,CW,dAr,cAr,fAr,cE,BFe,mAr,gAr,wW,hAr,pAr,_Ar,fE,PFe,uAr,bAr,AW,FAr,vAr,TAr,mE,$Fe,MAr,EAr,yW,CAr,wAr,AAr,IFe,yAr,LAr,s8,EBe,mf,gE,qFe,l8,xAr,NFe,kAr,CBe,Ir,i8,SAr,gf,RAr,LW,BAr,PAr,xW,$Ar,IAr,qAr,d8,NAr,jFe,jAr,DAr,GAr,kt,c8,OAr,DFe,VAr,XAr,hf,zAr,GFe,QAr,WAr,kW,HAr,UAr,JAr,OFe,YAr,KAr,f8,ZAr,So,m8,e0r,VFe,o0r,r0r,Bn,t0r,XFe,a0r,n0r,zFe,s0r,l0r,QFe,i0r,d0r,c0r,Ee,hE,WFe,f0r,m0r,SW,g0r,h0r,p0r,pE,HFe,_0r,u0r,RW,b0r,F0r,v0r,_E,UFe,T0r,M0r,BW,E0r,C0r,w0r,uE,JFe,A0r,y0r,PW,L0r,x0r,k0r,bE,YFe,S0r,R0r,$W,B0r,P0r,$0r,FE,KFe,I0r,q0r,IW,N0r,j0r,D0r,vE,ZFe,G0r,O0r,qW,V0r,X0r,z0r,TE,eve,Q0r,W0r,NW,H0r,U0r,J0r,ME,ove,Y0r,K0r,jW,Z0r,eyr,oyr,rve,ryr,tyr,g8,wBe,pf,EE,tve,h8,ayr,ave,nyr,ABe,qr,p8,syr,_f,lyr,DW,iyr,dyr,GW,cyr,fyr,myr,_8,gyr,nve,hyr,pyr,_yr,St,u8,uyr,sve,byr,Fyr,uf,vyr,lve,Tyr,Myr,OW,Eyr,Cyr,wyr,ive,Ayr,yyr,b8,Lyr,Ro,F8,xyr,dve,kyr,Syr,Pn,Ryr,cve,Byr,Pyr,fve,$yr,Iyr,mve,qyr,Nyr,jyr,Fe,CE,gve,Dyr,Gyr,VW,Oyr,Vyr,Xyr,wE,hve,zyr,Qyr,XW,Wyr,Hyr,Uyr,AE,pve,Jyr,Yyr,zW,Kyr,Zyr,eLr,yE,_ve,oLr,rLr,QW,tLr,aLr,nLr,LE,uve,sLr,lLr,WW,iLr,dLr,cLr,xE,bve,fLr,mLr,HW,gLr,hLr,pLr,kE,Fve,_Lr,uLr,UW,bLr,FLr,vLr,SE,vve,TLr,MLr,JW,ELr,CLr,wLr,RE,Tve,ALr,yLr,YW,LLr,xLr,kLr,BE,Mve,SLr,RLr,KW,BLr,PLr,$Lr,Eve,ILr,qLr,v8,yBe,bf,PE,Cve,T8,NLr,wve,jLr,LBe,Nr,M8,DLr,Ff,GLr,ZW,OLr,VLr,eH,XLr,zLr,QLr,E8,WLr,Ave,HLr,ULr,JLr,Rt,C8,YLr,yve,KLr,ZLr,vf,e8r,Lve,o8r,r8r,oH,t8r,a8r,n8r,xve,s8r,l8r,w8,i8r,Bo,A8,d8r,kve,c8r,f8r,$n,m8r,Sve,g8r,h8r,Rve,p8r,_8r,Bve,u8r,b8r,F8r,ve,$E,Pve,v8r,T8r,rH,M8r,E8r,C8r,IE,$ve,w8r,A8r,tH,y8r,L8r,x8r,qE,Ive,k8r,S8r,aH,R8r,B8r,P8r,NE,qve,$8r,I8r,nH,q8r,N8r,j8r,jE,Nve,D8r,G8r,sH,O8r,V8r,X8r,DE,jve,z8r,Q8r,lH,W8r,H8r,U8r,GE,Dve,J8r,Y8r,iH,K8r,Z8r,e7r,OE,Gve,o7r,r7r,dH,t7r,a7r,n7r,VE,Ove,s7r,l7r,cH,i7r,d7r,c7r,XE,Vve,f7r,m7r,fH,g7r,h7r,p7r,Xve,_7r,u7r,y8,xBe,Tf,zE,zve,L8,b7r,Qve,F7r,kBe,jr,x8,v7r,Mf,T7r,mH,M7r,E7r,gH,C7r,w7r,A7r,k8,y7r,Wve,L7r,x7r,k7r,Bt,S8,S7r,Hve,R7r,B7r,Ef,P7r,Uve,$7r,I7r,hH,q7r,N7r,j7r,Jve,D7r,G7r,R8,O7r,Po,B8,V7r,Yve,X7r,z7r,In,Q7r,Kve,W7r,H7r,Zve,U7r,J7r,e6e,Y7r,K7r,Z7r,Be,QE,o6e,e9r,o9r,pH,r9r,t9r,a9r,WE,r6e,n9r,s9r,_H,l9r,i9r,d9r,HE,t6e,c9r,f9r,uH,m9r,g9r,h9r,UE,a6e,p9r,_9r,bH,u9r,b9r,F9r,JE,n6e,v9r,T9r,FH,M9r,E9r,C9r,YE,s6e,w9r,A9r,vH,y9r,L9r,x9r,KE,l6e,k9r,S9r,TH,R9r,B9r,P9r,ZE,i6e,$9r,I9r,MH,q9r,N9r,j9r,d6e,D9r,G9r,P8,SBe,Cf,eC,c6e,$8,O9r,f6e,V9r,RBe,Dr,I8,X9r,wf,z9r,EH,Q9r,W9r,CH,H9r,U9r,J9r,q8,Y9r,m6e,K9r,Z9r,exr,Pt,N8,oxr,g6e,rxr,txr,Af,axr,h6e,nxr,sxr,wH,lxr,ixr,dxr,p6e,cxr,fxr,j8,mxr,$o,D8,gxr,_6e,hxr,pxr,qn,_xr,u6e,uxr,bxr,b6e,Fxr,vxr,F6e,Txr,Mxr,Exr,Pe,oC,v6e,Cxr,wxr,AH,Axr,yxr,Lxr,rC,T6e,xxr,kxr,yH,Sxr,Rxr,Bxr,tC,M6e,Pxr,$xr,LH,Ixr,qxr,Nxr,aC,E6e,jxr,Dxr,xH,Gxr,Oxr,Vxr,nC,C6e,Xxr,zxr,kH,Qxr,Wxr,Hxr,sC,w6e,Uxr,Jxr,SH,Yxr,Kxr,Zxr,lC,A6e,ekr,okr,RH,rkr,tkr,akr,iC,y6e,nkr,skr,BH,lkr,ikr,dkr,L6e,ckr,fkr,G8,BBe,yf,dC,x6e,O8,mkr,k6e,gkr,PBe,Gr,V8,hkr,Lf,pkr,PH,_kr,ukr,$H,bkr,Fkr,vkr,X8,Tkr,S6e,Mkr,Ekr,Ckr,$t,z8,wkr,R6e,Akr,ykr,xf,Lkr,B6e,xkr,kkr,IH,Skr,Rkr,Bkr,P6e,Pkr,$kr,Q8,Ikr,Io,W8,qkr,$6e,Nkr,jkr,Nn,Dkr,I6e,Gkr,Okr,q6e,Vkr,Xkr,N6e,zkr,Qkr,Wkr,j6e,cC,D6e,Hkr,Ukr,qH,Jkr,Ykr,Kkr,G6e,Zkr,eSr,H8,$Be,kf,fC,O6e,U8,oSr,V6e,rSr,IBe,Or,J8,tSr,Sf,aSr,NH,nSr,sSr,jH,lSr,iSr,dSr,Y8,cSr,X6e,fSr,mSr,gSr,It,K8,hSr,z6e,pSr,_Sr,Rf,uSr,Q6e,bSr,FSr,DH,vSr,TSr,MSr,W6e,ESr,CSr,Z8,wSr,qo,e7,ASr,H6e,ySr,LSr,jn,xSr,U6e,kSr,SSr,J6e,RSr,BSr,Y6e,PSr,$Sr,ISr,o7,mC,K6e,qSr,NSr,GH,jSr,DSr,GSr,gC,Z6e,OSr,VSr,OH,XSr,zSr,QSr,eTe,WSr,HSr,r7,qBe,Bf,hC,oTe,t7,USr,rTe,JSr,NBe,Vr,a7,YSr,Pf,KSr,VH,ZSr,eRr,XH,oRr,rRr,tRr,n7,aRr,tTe,nRr,sRr,lRr,qt,s7,iRr,aTe,dRr,cRr,$f,fRr,nTe,mRr,gRr,zH,hRr,pRr,_Rr,sTe,uRr,bRr,l7,FRr,No,i7,vRr,lTe,TRr,MRr,Dn,ERr,iTe,CRr,wRr,dTe,ARr,yRr,cTe,LRr,xRr,kRr,fTe,pC,mTe,SRr,RRr,QH,BRr,PRr,$Rr,gTe,IRr,qRr,d7,jBe;return me=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),F3=new X({}),v3=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Vf=new NRr({props:{warning:!0,$$slots:{default:[nCt]},$$scope:{ctx:qf}}}),T3=new X({}),M3=new E({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/configuration_auto.py#L541"}}),w3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/configuration_auto.py#L564",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),A3=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),y3=new E({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/configuration_auto.py#L686",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),L3=new X({}),x3=new E({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/tokenization_auto.py#L357"}}),R3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/tokenization_auto.py#L371",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16551/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),B3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),P3=new E({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/tokenization_auto.py#L567",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),$3=new X({}),I3=new E({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/feature_extraction_auto.py#L171"}}),j3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/feature_extraction_auto.py#L185",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16551/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Rh=new NRr({props:{$$slots:{default:[sCt]},$$scope:{ctx:qf}}}),D3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),G3=new E({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/feature_extraction_auto.py#L312",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),O3=new X({}),V3=new E({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/processing_auto.py#L70"}}),Q3=new E({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/processing_auto.py#L84",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Vh=new NRr({props:{$$slots:{default:[lCt]},$$scope:{ctx:qf}}}),W3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),H3=new E({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/processing_auto.py#L237",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),U3=new X({}),J3=new E({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L707"}}),K3=new E({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Z3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),ew=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new E({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L714"}}),nw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new E({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L729"}}),mw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),hw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new E({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L736"}}),Fw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),Tw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),Cw=new E({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L743"}}),Aw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Lw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Sw=new E({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L752"}}),Bw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),$w=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qw=new X({}),Nw=new E({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L786"}}),Dw=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),Ow=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xw=new X({}),zw=new E({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L793"}}),Ww=new E({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Hw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Uw=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yw=new X({}),Kw=new E({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L779"}}),eA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),oA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),rA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),tA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aA=new X({}),nA=new E({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L761"}}),lA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),dA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fA=new X({}),mA=new E({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L768"}}),hA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),_A=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bA=new X({}),FA=new E({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L802"}}),TA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),MA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),EA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),wA=new X({}),AA=new E({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L841"}}),LA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),kA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),SA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),RA=new X({}),BA=new E({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L848"}}),$A=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),qA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new E({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L871"}}),OA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),XA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),QA=new X({}),WA=new E({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L855"}}),UA=new E({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),YA=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),KA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ZA=new X({}),e0=new E({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L862"}}),r0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),a0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l0=new X({}),i0=new E({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L880"}}),c0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),f0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),m0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h0=new X({}),p0=new E({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L887"}}),u0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),b0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),F0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),M0=new E({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L834"}}),C0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),w0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),A0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L0=new X({}),x0=new E({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L809"}}),S0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),R0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),B0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$0=new X({}),I0=new E({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L816"}}),N0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),j0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),D0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O0=new X({}),V0=new E({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_auto.py#L825"}}),z0=new E({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),Q0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),W0=new E({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U0=new X({}),J0=new E({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),K0=new E({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),ey=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ry=new X({}),ty=new E({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),ny=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),ly=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dy=new X({}),cy=new E({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),my=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),hy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_y=new X({}),uy=new E({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Fy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Ty=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),wy=new E({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),yy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),xy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Ry=new E({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Py=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),$y=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Iy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new E({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),Gy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Oy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),Vy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Xy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Qy=new E({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Hy=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),Uy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),Jy=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new E({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),oL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),rL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),tL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),aL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new E({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),iL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),dL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),cL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),fL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new E({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),pL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),_L=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),uL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),bL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),vL=new E({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),ML=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),EL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),CL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),wL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),yL=new E({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),xL=new E({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),kL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),SL=new E({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),RL=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),PL=new E({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),IL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),NL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DL=new X({}),GL=new E({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),VL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),XL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),zL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),QL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WL=new X({}),HL=new E({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),JL=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),YL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),KL=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ZL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),e8=new X({}),o8=new E({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),t8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),a8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),n8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),l8=new X({}),i8=new E({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),c8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),f8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),m8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),h8=new X({}),p8=new E({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),u8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),b8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),F8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T8=new X({}),M8=new E({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),C8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),w8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),A8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),L8=new X({}),x8=new E({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),S8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),R8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),B8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),P8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$8=new X({}),I8=new E({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),N8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),j8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),D8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),G8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),O8=new X({}),V8=new E({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),z8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),Q8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),W8=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),H8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),U8=new X({}),J8=new E({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),K8=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),Z8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),e7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new E({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),s7=new E({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L389",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),i7=new E({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16551/src/transformers/models/auto/auto_factory.py#L417",parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16551/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16551/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),de=a("h1"),Ce=a("a"),lo=a("span"),f(me.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),Nf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),p3=o("from_pretrained()"),jf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),Gn=a("a"),_3=o("AutoConfig"),On=o(", "),Vn=a("a"),u3=o("AutoModel"),Gi=o(`, and
`),Xn=a("a"),b3=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Df=l(),f(Da.$$.fragment),fo=l(),_e=a("p"),i9=o("will create a model that is an instance of "),Vi=a("a"),d9=o("BertModel"),c9=o("."),zo=l(),Ga=a("p"),f9=o("There is one class of "),Gf=a("code"),m9=o("AutoModel"),Y$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),NSe=l(),Xi=a("h2"),Of=a("a"),DJ=a("span"),f(F3.$$.fragment),K$e=l(),GJ=a("span"),Z$e=o("Extending the Auto Classes"),jSe=l(),zn=a("p"),eIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OJ=a("code"),oIe=o("NewModel"),rIe=o(", make sure you have a "),VJ=a("code"),tIe=o("NewModelConfig"),aIe=o(` then you can add those to the auto
classes like this:`),DSe=l(),f(v3.$$.fragment),GSe=l(),g9=a("p"),nIe=o("You will then be able to use the auto classes like you would usually do!"),OSe=l(),f(Vf.$$.fragment),VSe=l(),zi=a("h2"),Xf=a("a"),XJ=a("span"),f(T3.$$.fragment),sIe=l(),zJ=a("span"),lIe=o("AutoConfig"),XSe=l(),Qo=a("div"),f(M3.$$.fragment),iIe=l(),E3=a("p"),dIe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h9=a("a"),cIe=o("from_pretrained()"),fIe=o(" class method."),mIe=l(),C3=a("p"),gIe=o("This class cannot be instantiated directly using "),QJ=a("code"),hIe=o("__init__()"),pIe=o(" (throws an error)."),_Ie=l(),mo=a("div"),f(w3.$$.fragment),uIe=l(),WJ=a("p"),bIe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),FIe=l(),Qi=a("p"),vIe=o("The configuration class to instantiate is selected based on the "),HJ=a("code"),TIe=o("model_type"),MIe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UJ=a("code"),EIe=o("pretrained_model_name_or_path"),CIe=o(":"),wIe=l(),F=a("ul"),zf=a("li"),JJ=a("strong"),AIe=o("albert"),yIe=o(" \u2014 "),p9=a("a"),LIe=o("AlbertConfig"),xIe=o(" (ALBERT model)"),kIe=l(),Qf=a("li"),YJ=a("strong"),SIe=o("bart"),RIe=o(" \u2014 "),_9=a("a"),BIe=o("BartConfig"),PIe=o(" (BART model)"),$Ie=l(),Wf=a("li"),KJ=a("strong"),IIe=o("beit"),qIe=o(" \u2014 "),u9=a("a"),NIe=o("BeitConfig"),jIe=o(" (BEiT model)"),DIe=l(),Hf=a("li"),ZJ=a("strong"),GIe=o("bert"),OIe=o(" \u2014 "),b9=a("a"),VIe=o("BertConfig"),XIe=o(" (BERT model)"),zIe=l(),Uf=a("li"),eY=a("strong"),QIe=o("bert-generation"),WIe=o(" \u2014 "),F9=a("a"),HIe=o("BertGenerationConfig"),UIe=o(" (Bert Generation model)"),JIe=l(),Jf=a("li"),oY=a("strong"),YIe=o("big_bird"),KIe=o(" \u2014 "),v9=a("a"),ZIe=o("BigBirdConfig"),eqe=o(" (BigBird model)"),oqe=l(),Yf=a("li"),rY=a("strong"),rqe=o("bigbird_pegasus"),tqe=o(" \u2014 "),T9=a("a"),aqe=o("BigBirdPegasusConfig"),nqe=o(" (BigBirdPegasus model)"),sqe=l(),Kf=a("li"),tY=a("strong"),lqe=o("blenderbot"),iqe=o(" \u2014 "),M9=a("a"),dqe=o("BlenderbotConfig"),cqe=o(" (Blenderbot model)"),fqe=l(),Zf=a("li"),aY=a("strong"),mqe=o("blenderbot-small"),gqe=o(" \u2014 "),E9=a("a"),hqe=o("BlenderbotSmallConfig"),pqe=o(" (BlenderbotSmall model)"),_qe=l(),em=a("li"),nY=a("strong"),uqe=o("camembert"),bqe=o(" \u2014 "),C9=a("a"),Fqe=o("CamembertConfig"),vqe=o(" (CamemBERT model)"),Tqe=l(),om=a("li"),sY=a("strong"),Mqe=o("canine"),Eqe=o(" \u2014 "),w9=a("a"),Cqe=o("CanineConfig"),wqe=o(" (Canine model)"),Aqe=l(),rm=a("li"),lY=a("strong"),yqe=o("clip"),Lqe=o(" \u2014 "),A9=a("a"),xqe=o("CLIPConfig"),kqe=o(" (CLIP model)"),Sqe=l(),tm=a("li"),iY=a("strong"),Rqe=o("convbert"),Bqe=o(" \u2014 "),y9=a("a"),Pqe=o("ConvBertConfig"),$qe=o(" (ConvBERT model)"),Iqe=l(),am=a("li"),dY=a("strong"),qqe=o("convnext"),Nqe=o(" \u2014 "),L9=a("a"),jqe=o("ConvNextConfig"),Dqe=o(" (ConvNext model)"),Gqe=l(),nm=a("li"),cY=a("strong"),Oqe=o("ctrl"),Vqe=o(" \u2014 "),x9=a("a"),Xqe=o("CTRLConfig"),zqe=o(" (CTRL model)"),Qqe=l(),sm=a("li"),fY=a("strong"),Wqe=o("data2vec-audio"),Hqe=o(" \u2014 "),k9=a("a"),Uqe=o("Data2VecAudioConfig"),Jqe=o(" (Data2VecAudio model)"),Yqe=l(),lm=a("li"),mY=a("strong"),Kqe=o("data2vec-text"),Zqe=o(" \u2014 "),S9=a("a"),eNe=o("Data2VecTextConfig"),oNe=o(" (Data2VecText model)"),rNe=l(),im=a("li"),gY=a("strong"),tNe=o("deberta"),aNe=o(" \u2014 "),R9=a("a"),nNe=o("DebertaConfig"),sNe=o(" (DeBERTa model)"),lNe=l(),dm=a("li"),hY=a("strong"),iNe=o("deberta-v2"),dNe=o(" \u2014 "),B9=a("a"),cNe=o("DebertaV2Config"),fNe=o(" (DeBERTa-v2 model)"),mNe=l(),cm=a("li"),pY=a("strong"),gNe=o("decision_transformer"),hNe=o(" \u2014 "),P9=a("a"),pNe=o("DecisionTransformerConfig"),_Ne=o(" (Decision Transformer model)"),uNe=l(),fm=a("li"),_Y=a("strong"),bNe=o("deit"),FNe=o(" \u2014 "),$9=a("a"),vNe=o("DeiTConfig"),TNe=o(" (DeiT model)"),MNe=l(),mm=a("li"),uY=a("strong"),ENe=o("detr"),CNe=o(" \u2014 "),I9=a("a"),wNe=o("DetrConfig"),ANe=o(" (DETR model)"),yNe=l(),gm=a("li"),bY=a("strong"),LNe=o("distilbert"),xNe=o(" \u2014 "),q9=a("a"),kNe=o("DistilBertConfig"),SNe=o(" (DistilBERT model)"),RNe=l(),hm=a("li"),FY=a("strong"),BNe=o("dpr"),PNe=o(" \u2014 "),N9=a("a"),$Ne=o("DPRConfig"),INe=o(" (DPR model)"),qNe=l(),pm=a("li"),vY=a("strong"),NNe=o("dpt"),jNe=o(" \u2014 "),j9=a("a"),DNe=o("DPTConfig"),GNe=o(" (DPT model)"),ONe=l(),_m=a("li"),TY=a("strong"),VNe=o("electra"),XNe=o(" \u2014 "),D9=a("a"),zNe=o("ElectraConfig"),QNe=o(" (ELECTRA model)"),WNe=l(),um=a("li"),MY=a("strong"),HNe=o("encoder-decoder"),UNe=o(" \u2014 "),G9=a("a"),JNe=o("EncoderDecoderConfig"),YNe=o(" (Encoder decoder model)"),KNe=l(),bm=a("li"),EY=a("strong"),ZNe=o("flaubert"),eje=o(" \u2014 "),O9=a("a"),oje=o("FlaubertConfig"),rje=o(" (FlauBERT model)"),tje=l(),Fm=a("li"),CY=a("strong"),aje=o("fnet"),nje=o(" \u2014 "),V9=a("a"),sje=o("FNetConfig"),lje=o(" (FNet model)"),ije=l(),vm=a("li"),wY=a("strong"),dje=o("fsmt"),cje=o(" \u2014 "),X9=a("a"),fje=o("FSMTConfig"),mje=o(" (FairSeq Machine-Translation model)"),gje=l(),Tm=a("li"),AY=a("strong"),hje=o("funnel"),pje=o(" \u2014 "),z9=a("a"),_je=o("FunnelConfig"),uje=o(" (Funnel Transformer model)"),bje=l(),Mm=a("li"),yY=a("strong"),Fje=o("glpn"),vje=o(" \u2014 "),Q9=a("a"),Tje=o("GLPNConfig"),Mje=o(" (GLPN model)"),Eje=l(),Em=a("li"),LY=a("strong"),Cje=o("gpt2"),wje=o(" \u2014 "),W9=a("a"),Aje=o("GPT2Config"),yje=o(" (OpenAI GPT-2 model)"),Lje=l(),Cm=a("li"),xY=a("strong"),xje=o("gpt_neo"),kje=o(" \u2014 "),H9=a("a"),Sje=o("GPTNeoConfig"),Rje=o(" (GPT Neo model)"),Bje=l(),wm=a("li"),kY=a("strong"),Pje=o("gptj"),$je=o(" \u2014 "),U9=a("a"),Ije=o("GPTJConfig"),qje=o(" (GPT-J model)"),Nje=l(),Am=a("li"),SY=a("strong"),jje=o("hubert"),Dje=o(" \u2014 "),J9=a("a"),Gje=o("HubertConfig"),Oje=o(" (Hubert model)"),Vje=l(),ym=a("li"),RY=a("strong"),Xje=o("ibert"),zje=o(" \u2014 "),Y9=a("a"),Qje=o("IBertConfig"),Wje=o(" (I-BERT model)"),Hje=l(),Lm=a("li"),BY=a("strong"),Uje=o("imagegpt"),Jje=o(" \u2014 "),K9=a("a"),Yje=o("ImageGPTConfig"),Kje=o(" (ImageGPT model)"),Zje=l(),xm=a("li"),PY=a("strong"),eDe=o("layoutlm"),oDe=o(" \u2014 "),Z9=a("a"),rDe=o("LayoutLMConfig"),tDe=o(" (LayoutLM model)"),aDe=l(),km=a("li"),$Y=a("strong"),nDe=o("layoutlmv2"),sDe=o(" \u2014 "),ex=a("a"),lDe=o("LayoutLMv2Config"),iDe=o(" (LayoutLMv2 model)"),dDe=l(),Sm=a("li"),IY=a("strong"),cDe=o("led"),fDe=o(" \u2014 "),ox=a("a"),mDe=o("LEDConfig"),gDe=o(" (LED model)"),hDe=l(),Rm=a("li"),qY=a("strong"),pDe=o("longformer"),_De=o(" \u2014 "),rx=a("a"),uDe=o("LongformerConfig"),bDe=o(" (Longformer model)"),FDe=l(),Bm=a("li"),NY=a("strong"),vDe=o("luke"),TDe=o(" \u2014 "),tx=a("a"),MDe=o("LukeConfig"),EDe=o(" (LUKE model)"),CDe=l(),Pm=a("li"),jY=a("strong"),wDe=o("lxmert"),ADe=o(" \u2014 "),ax=a("a"),yDe=o("LxmertConfig"),LDe=o(" (LXMERT model)"),xDe=l(),$m=a("li"),DY=a("strong"),kDe=o("m2m_100"),SDe=o(" \u2014 "),nx=a("a"),RDe=o("M2M100Config"),BDe=o(" (M2M100 model)"),PDe=l(),Im=a("li"),GY=a("strong"),$De=o("marian"),IDe=o(" \u2014 "),sx=a("a"),qDe=o("MarianConfig"),NDe=o(" (Marian model)"),jDe=l(),qm=a("li"),OY=a("strong"),DDe=o("maskformer"),GDe=o(" \u2014 "),lx=a("a"),ODe=o("MaskFormerConfig"),VDe=o(" (MaskFormer model)"),XDe=l(),Nm=a("li"),VY=a("strong"),zDe=o("mbart"),QDe=o(" \u2014 "),ix=a("a"),WDe=o("MBartConfig"),HDe=o(" (mBART model)"),UDe=l(),jm=a("li"),XY=a("strong"),JDe=o("megatron-bert"),YDe=o(" \u2014 "),dx=a("a"),KDe=o("MegatronBertConfig"),ZDe=o(" (MegatronBert model)"),eGe=l(),Dm=a("li"),zY=a("strong"),oGe=o("mobilebert"),rGe=o(" \u2014 "),cx=a("a"),tGe=o("MobileBertConfig"),aGe=o(" (MobileBERT model)"),nGe=l(),Gm=a("li"),QY=a("strong"),sGe=o("mpnet"),lGe=o(" \u2014 "),fx=a("a"),iGe=o("MPNetConfig"),dGe=o(" (MPNet model)"),cGe=l(),Om=a("li"),WY=a("strong"),fGe=o("mt5"),mGe=o(" \u2014 "),mx=a("a"),gGe=o("MT5Config"),hGe=o(" (mT5 model)"),pGe=l(),Vm=a("li"),HY=a("strong"),_Ge=o("nystromformer"),uGe=o(" \u2014 "),gx=a("a"),bGe=o("NystromformerConfig"),FGe=o(" (Nystromformer model)"),vGe=l(),Xm=a("li"),UY=a("strong"),TGe=o("openai-gpt"),MGe=o(" \u2014 "),hx=a("a"),EGe=o("OpenAIGPTConfig"),CGe=o(" (OpenAI GPT model)"),wGe=l(),zm=a("li"),JY=a("strong"),AGe=o("pegasus"),yGe=o(" \u2014 "),px=a("a"),LGe=o("PegasusConfig"),xGe=o(" (Pegasus model)"),kGe=l(),Qm=a("li"),YY=a("strong"),SGe=o("perceiver"),RGe=o(" \u2014 "),_x=a("a"),BGe=o("PerceiverConfig"),PGe=o(" (Perceiver model)"),$Ge=l(),Wm=a("li"),KY=a("strong"),IGe=o("plbart"),qGe=o(" \u2014 "),ux=a("a"),NGe=o("PLBartConfig"),jGe=o(" (PLBart model)"),DGe=l(),Hm=a("li"),ZY=a("strong"),GGe=o("poolformer"),OGe=o(" \u2014 "),bx=a("a"),VGe=o("PoolFormerConfig"),XGe=o(" (PoolFormer model)"),zGe=l(),Um=a("li"),eK=a("strong"),QGe=o("prophetnet"),WGe=o(" \u2014 "),Fx=a("a"),HGe=o("ProphetNetConfig"),UGe=o(" (ProphetNet model)"),JGe=l(),Jm=a("li"),oK=a("strong"),YGe=o("qdqbert"),KGe=o(" \u2014 "),vx=a("a"),ZGe=o("QDQBertConfig"),eOe=o(" (QDQBert model)"),oOe=l(),Ym=a("li"),rK=a("strong"),rOe=o("rag"),tOe=o(" \u2014 "),Tx=a("a"),aOe=o("RagConfig"),nOe=o(" (RAG model)"),sOe=l(),Km=a("li"),tK=a("strong"),lOe=o("realm"),iOe=o(" \u2014 "),Mx=a("a"),dOe=o("RealmConfig"),cOe=o(" (Realm model)"),fOe=l(),Zm=a("li"),aK=a("strong"),mOe=o("reformer"),gOe=o(" \u2014 "),Ex=a("a"),hOe=o("ReformerConfig"),pOe=o(" (Reformer model)"),_Oe=l(),eg=a("li"),nK=a("strong"),uOe=o("rembert"),bOe=o(" \u2014 "),Cx=a("a"),FOe=o("RemBertConfig"),vOe=o(" (RemBERT model)"),TOe=l(),og=a("li"),sK=a("strong"),MOe=o("resnet"),EOe=o(" \u2014 "),wx=a("a"),COe=o("ResNetConfig"),wOe=o(" (ResNet model)"),AOe=l(),rg=a("li"),lK=a("strong"),yOe=o("retribert"),LOe=o(" \u2014 "),Ax=a("a"),xOe=o("RetriBertConfig"),kOe=o(" (RetriBERT model)"),SOe=l(),tg=a("li"),iK=a("strong"),ROe=o("roberta"),BOe=o(" \u2014 "),yx=a("a"),POe=o("RobertaConfig"),$Oe=o(" (RoBERTa model)"),IOe=l(),ag=a("li"),dK=a("strong"),qOe=o("roformer"),NOe=o(" \u2014 "),Lx=a("a"),jOe=o("RoFormerConfig"),DOe=o(" (RoFormer model)"),GOe=l(),ng=a("li"),cK=a("strong"),OOe=o("segformer"),VOe=o(" \u2014 "),xx=a("a"),XOe=o("SegformerConfig"),zOe=o(" (SegFormer model)"),QOe=l(),sg=a("li"),fK=a("strong"),WOe=o("sew"),HOe=o(" \u2014 "),kx=a("a"),UOe=o("SEWConfig"),JOe=o(" (SEW model)"),YOe=l(),lg=a("li"),mK=a("strong"),KOe=o("sew-d"),ZOe=o(" \u2014 "),Sx=a("a"),eVe=o("SEWDConfig"),oVe=o(" (SEW-D model)"),rVe=l(),ig=a("li"),gK=a("strong"),tVe=o("speech-encoder-decoder"),aVe=o(" \u2014 "),Rx=a("a"),nVe=o("SpeechEncoderDecoderConfig"),sVe=o(" (Speech Encoder decoder model)"),lVe=l(),dg=a("li"),hK=a("strong"),iVe=o("speech_to_text"),dVe=o(" \u2014 "),Bx=a("a"),cVe=o("Speech2TextConfig"),fVe=o(" (Speech2Text model)"),mVe=l(),cg=a("li"),pK=a("strong"),gVe=o("speech_to_text_2"),hVe=o(" \u2014 "),Px=a("a"),pVe=o("Speech2Text2Config"),_Ve=o(" (Speech2Text2 model)"),uVe=l(),fg=a("li"),_K=a("strong"),bVe=o("splinter"),FVe=o(" \u2014 "),$x=a("a"),vVe=o("SplinterConfig"),TVe=o(" (Splinter model)"),MVe=l(),mg=a("li"),uK=a("strong"),EVe=o("squeezebert"),CVe=o(" \u2014 "),Ix=a("a"),wVe=o("SqueezeBertConfig"),AVe=o(" (SqueezeBERT model)"),yVe=l(),gg=a("li"),bK=a("strong"),LVe=o("swin"),xVe=o(" \u2014 "),qx=a("a"),kVe=o("SwinConfig"),SVe=o(" (Swin model)"),RVe=l(),hg=a("li"),FK=a("strong"),BVe=o("t5"),PVe=o(" \u2014 "),Nx=a("a"),$Ve=o("T5Config"),IVe=o(" (T5 model)"),qVe=l(),pg=a("li"),vK=a("strong"),NVe=o("tapas"),jVe=o(" \u2014 "),jx=a("a"),DVe=o("TapasConfig"),GVe=o(" (TAPAS model)"),OVe=l(),_g=a("li"),TK=a("strong"),VVe=o("transfo-xl"),XVe=o(" \u2014 "),Dx=a("a"),zVe=o("TransfoXLConfig"),QVe=o(" (Transformer-XL model)"),WVe=l(),ug=a("li"),MK=a("strong"),HVe=o("trocr"),UVe=o(" \u2014 "),Gx=a("a"),JVe=o("TrOCRConfig"),YVe=o(" (TrOCR model)"),KVe=l(),bg=a("li"),EK=a("strong"),ZVe=o("unispeech"),eXe=o(" \u2014 "),Ox=a("a"),oXe=o("UniSpeechConfig"),rXe=o(" (UniSpeech model)"),tXe=l(),Fg=a("li"),CK=a("strong"),aXe=o("unispeech-sat"),nXe=o(" \u2014 "),Vx=a("a"),sXe=o("UniSpeechSatConfig"),lXe=o(" (UniSpeechSat model)"),iXe=l(),vg=a("li"),wK=a("strong"),dXe=o("van"),cXe=o(" \u2014 "),Xx=a("a"),fXe=o("VanConfig"),mXe=o(" (VAN model)"),gXe=l(),Tg=a("li"),AK=a("strong"),hXe=o("vilt"),pXe=o(" \u2014 "),zx=a("a"),_Xe=o("ViltConfig"),uXe=o(" (ViLT model)"),bXe=l(),Mg=a("li"),yK=a("strong"),FXe=o("vision-encoder-decoder"),vXe=o(" \u2014 "),Qx=a("a"),TXe=o("VisionEncoderDecoderConfig"),MXe=o(" (Vision Encoder decoder model)"),EXe=l(),Eg=a("li"),LK=a("strong"),CXe=o("vision-text-dual-encoder"),wXe=o(" \u2014 "),Wx=a("a"),AXe=o("VisionTextDualEncoderConfig"),yXe=o(" (VisionTextDualEncoder model)"),LXe=l(),Cg=a("li"),xK=a("strong"),xXe=o("visual_bert"),kXe=o(" \u2014 "),Hx=a("a"),SXe=o("VisualBertConfig"),RXe=o(" (VisualBert model)"),BXe=l(),wg=a("li"),kK=a("strong"),PXe=o("vit"),$Xe=o(" \u2014 "),Ux=a("a"),IXe=o("ViTConfig"),qXe=o(" (ViT model)"),NXe=l(),Ag=a("li"),SK=a("strong"),jXe=o("vit_mae"),DXe=o(" \u2014 "),Jx=a("a"),GXe=o("ViTMAEConfig"),OXe=o(" (ViTMAE model)"),VXe=l(),yg=a("li"),RK=a("strong"),XXe=o("wav2vec2"),zXe=o(" \u2014 "),Yx=a("a"),QXe=o("Wav2Vec2Config"),WXe=o(" (Wav2Vec2 model)"),HXe=l(),Lg=a("li"),BK=a("strong"),UXe=o("wavlm"),JXe=o(" \u2014 "),Kx=a("a"),YXe=o("WavLMConfig"),KXe=o(" (WavLM model)"),ZXe=l(),xg=a("li"),PK=a("strong"),eze=o("xglm"),oze=o(" \u2014 "),Zx=a("a"),rze=o("XGLMConfig"),tze=o(" (XGLM model)"),aze=l(),kg=a("li"),$K=a("strong"),nze=o("xlm"),sze=o(" \u2014 "),ek=a("a"),lze=o("XLMConfig"),ize=o(" (XLM model)"),dze=l(),Sg=a("li"),IK=a("strong"),cze=o("xlm-prophetnet"),fze=o(" \u2014 "),ok=a("a"),mze=o("XLMProphetNetConfig"),gze=o(" (XLMProphetNet model)"),hze=l(),Rg=a("li"),qK=a("strong"),pze=o("xlm-roberta"),_ze=o(" \u2014 "),rk=a("a"),uze=o("XLMRobertaConfig"),bze=o(" (XLM-RoBERTa model)"),Fze=l(),Bg=a("li"),NK=a("strong"),vze=o("xlm-roberta-xl"),Tze=o(" \u2014 "),tk=a("a"),Mze=o("XLMRobertaXLConfig"),Eze=o(" (XLM-RoBERTa-XL model)"),Cze=l(),Pg=a("li"),jK=a("strong"),wze=o("xlnet"),Aze=o(" \u2014 "),ak=a("a"),yze=o("XLNetConfig"),Lze=o(" (XLNet model)"),xze=l(),$g=a("li"),DK=a("strong"),kze=o("yoso"),Sze=o(" \u2014 "),nk=a("a"),Rze=o("YosoConfig"),Bze=o(" (YOSO model)"),Pze=l(),GK=a("p"),$ze=o("Examples:"),Ize=l(),f(A3.$$.fragment),qze=l(),Ig=a("div"),f(y3.$$.fragment),Nze=l(),OK=a("p"),jze=o("Register a new configuration for this class."),zSe=l(),Wi=a("h2"),qg=a("a"),VK=a("span"),f(L3.$$.fragment),Dze=l(),XK=a("span"),Gze=o("AutoTokenizer"),QSe=l(),Wo=a("div"),f(x3.$$.fragment),Oze=l(),k3=a("p"),Vze=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sk=a("a"),Xze=o("AutoTokenizer.from_pretrained()"),zze=o(" class method."),Qze=l(),S3=a("p"),Wze=o("This class cannot be instantiated directly using "),zK=a("code"),Hze=o("__init__()"),Uze=o(" (throws an error)."),Jze=l(),go=a("div"),f(R3.$$.fragment),Yze=l(),QK=a("p"),Kze=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Zze=l(),Oa=a("p"),eQe=o("The tokenizer class to instantiate is selected based on the "),WK=a("code"),oQe=o("model_type"),rQe=o(` property of the config object (either
passed as an argument or loaded from `),HK=a("code"),tQe=o("pretrained_model_name_or_path"),aQe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UK=a("code"),nQe=o("pretrained_model_name_or_path"),sQe=o(":"),lQe=l(),C=a("ul"),Qn=a("li"),JK=a("strong"),iQe=o("albert"),dQe=o(" \u2014 "),lk=a("a"),cQe=o("AlbertTokenizer"),fQe=o(" or "),ik=a("a"),mQe=o("AlbertTokenizerFast"),gQe=o(" (ALBERT model)"),hQe=l(),Wn=a("li"),YK=a("strong"),pQe=o("bart"),_Qe=o(" \u2014 "),dk=a("a"),uQe=o("BartTokenizer"),bQe=o(" or "),ck=a("a"),FQe=o("BartTokenizerFast"),vQe=o(" (BART model)"),TQe=l(),Hn=a("li"),KK=a("strong"),MQe=o("barthez"),EQe=o(" \u2014 "),fk=a("a"),CQe=o("BarthezTokenizer"),wQe=o(" or "),mk=a("a"),AQe=o("BarthezTokenizerFast"),yQe=o(" (BARThez model)"),LQe=l(),Ng=a("li"),ZK=a("strong"),xQe=o("bartpho"),kQe=o(" \u2014 "),gk=a("a"),SQe=o("BartphoTokenizer"),RQe=o(" (BARTpho model)"),BQe=l(),Un=a("li"),eZ=a("strong"),PQe=o("bert"),$Qe=o(" \u2014 "),hk=a("a"),IQe=o("BertTokenizer"),qQe=o(" or "),pk=a("a"),NQe=o("BertTokenizerFast"),jQe=o(" (BERT model)"),DQe=l(),jg=a("li"),oZ=a("strong"),GQe=o("bert-generation"),OQe=o(" \u2014 "),_k=a("a"),VQe=o("BertGenerationTokenizer"),XQe=o(" (Bert Generation model)"),zQe=l(),Dg=a("li"),rZ=a("strong"),QQe=o("bert-japanese"),WQe=o(" \u2014 "),uk=a("a"),HQe=o("BertJapaneseTokenizer"),UQe=o(" (BertJapanese model)"),JQe=l(),Gg=a("li"),tZ=a("strong"),YQe=o("bertweet"),KQe=o(" \u2014 "),bk=a("a"),ZQe=o("BertweetTokenizer"),eWe=o(" (Bertweet model)"),oWe=l(),Jn=a("li"),aZ=a("strong"),rWe=o("big_bird"),tWe=o(" \u2014 "),Fk=a("a"),aWe=o("BigBirdTokenizer"),nWe=o(" or "),vk=a("a"),sWe=o("BigBirdTokenizerFast"),lWe=o(" (BigBird model)"),iWe=l(),Yn=a("li"),nZ=a("strong"),dWe=o("bigbird_pegasus"),cWe=o(" \u2014 "),Tk=a("a"),fWe=o("PegasusTokenizer"),mWe=o(" or "),Mk=a("a"),gWe=o("PegasusTokenizerFast"),hWe=o(" (BigBirdPegasus model)"),pWe=l(),Kn=a("li"),sZ=a("strong"),_We=o("blenderbot"),uWe=o(" \u2014 "),Ek=a("a"),bWe=o("BlenderbotTokenizer"),FWe=o(" or "),Ck=a("a"),vWe=o("BlenderbotTokenizerFast"),TWe=o(" (Blenderbot model)"),MWe=l(),Og=a("li"),lZ=a("strong"),EWe=o("blenderbot-small"),CWe=o(" \u2014 "),wk=a("a"),wWe=o("BlenderbotSmallTokenizer"),AWe=o(" (BlenderbotSmall model)"),yWe=l(),Vg=a("li"),iZ=a("strong"),LWe=o("byt5"),xWe=o(" \u2014 "),Ak=a("a"),kWe=o("ByT5Tokenizer"),SWe=o(" (ByT5 model)"),RWe=l(),Zn=a("li"),dZ=a("strong"),BWe=o("camembert"),PWe=o(" \u2014 "),yk=a("a"),$We=o("CamembertTokenizer"),IWe=o(" or "),Lk=a("a"),qWe=o("CamembertTokenizerFast"),NWe=o(" (CamemBERT model)"),jWe=l(),Xg=a("li"),cZ=a("strong"),DWe=o("canine"),GWe=o(" \u2014 "),xk=a("a"),OWe=o("CanineTokenizer"),VWe=o(" (Canine model)"),XWe=l(),es=a("li"),fZ=a("strong"),zWe=o("clip"),QWe=o(" \u2014 "),kk=a("a"),WWe=o("CLIPTokenizer"),HWe=o(" or "),Sk=a("a"),UWe=o("CLIPTokenizerFast"),JWe=o(" (CLIP model)"),YWe=l(),os=a("li"),mZ=a("strong"),KWe=o("convbert"),ZWe=o(" \u2014 "),Rk=a("a"),eHe=o("ConvBertTokenizer"),oHe=o(" or "),Bk=a("a"),rHe=o("ConvBertTokenizerFast"),tHe=o(" (ConvBERT model)"),aHe=l(),rs=a("li"),gZ=a("strong"),nHe=o("cpm"),sHe=o(" \u2014 "),Pk=a("a"),lHe=o("CpmTokenizer"),iHe=o(" or "),hZ=a("code"),dHe=o("CpmTokenizerFast"),cHe=o(" (CPM model)"),fHe=l(),zg=a("li"),pZ=a("strong"),mHe=o("ctrl"),gHe=o(" \u2014 "),$k=a("a"),hHe=o("CTRLTokenizer"),pHe=o(" (CTRL model)"),_He=l(),ts=a("li"),_Z=a("strong"),uHe=o("deberta"),bHe=o(" \u2014 "),Ik=a("a"),FHe=o("DebertaTokenizer"),vHe=o(" or "),qk=a("a"),THe=o("DebertaTokenizerFast"),MHe=o(" (DeBERTa model)"),EHe=l(),Qg=a("li"),uZ=a("strong"),CHe=o("deberta-v2"),wHe=o(" \u2014 "),Nk=a("a"),AHe=o("DebertaV2Tokenizer"),yHe=o(" (DeBERTa-v2 model)"),LHe=l(),as=a("li"),bZ=a("strong"),xHe=o("distilbert"),kHe=o(" \u2014 "),jk=a("a"),SHe=o("DistilBertTokenizer"),RHe=o(" or "),Dk=a("a"),BHe=o("DistilBertTokenizerFast"),PHe=o(" (DistilBERT model)"),$He=l(),ns=a("li"),FZ=a("strong"),IHe=o("dpr"),qHe=o(" \u2014 "),Gk=a("a"),NHe=o("DPRQuestionEncoderTokenizer"),jHe=o(" or "),Ok=a("a"),DHe=o("DPRQuestionEncoderTokenizerFast"),GHe=o(" (DPR model)"),OHe=l(),ss=a("li"),vZ=a("strong"),VHe=o("electra"),XHe=o(" \u2014 "),Vk=a("a"),zHe=o("ElectraTokenizer"),QHe=o(" or "),Xk=a("a"),WHe=o("ElectraTokenizerFast"),HHe=o(" (ELECTRA model)"),UHe=l(),Wg=a("li"),TZ=a("strong"),JHe=o("flaubert"),YHe=o(" \u2014 "),zk=a("a"),KHe=o("FlaubertTokenizer"),ZHe=o(" (FlauBERT model)"),eUe=l(),ls=a("li"),MZ=a("strong"),oUe=o("fnet"),rUe=o(" \u2014 "),Qk=a("a"),tUe=o("FNetTokenizer"),aUe=o(" or "),Wk=a("a"),nUe=o("FNetTokenizerFast"),sUe=o(" (FNet model)"),lUe=l(),Hg=a("li"),EZ=a("strong"),iUe=o("fsmt"),dUe=o(" \u2014 "),Hk=a("a"),cUe=o("FSMTTokenizer"),fUe=o(" (FairSeq Machine-Translation model)"),mUe=l(),is=a("li"),CZ=a("strong"),gUe=o("funnel"),hUe=o(" \u2014 "),Uk=a("a"),pUe=o("FunnelTokenizer"),_Ue=o(" or "),Jk=a("a"),uUe=o("FunnelTokenizerFast"),bUe=o(" (Funnel Transformer model)"),FUe=l(),ds=a("li"),wZ=a("strong"),vUe=o("gpt2"),TUe=o(" \u2014 "),Yk=a("a"),MUe=o("GPT2Tokenizer"),EUe=o(" or "),Kk=a("a"),CUe=o("GPT2TokenizerFast"),wUe=o(" (OpenAI GPT-2 model)"),AUe=l(),cs=a("li"),AZ=a("strong"),yUe=o("gpt_neo"),LUe=o(" \u2014 "),Zk=a("a"),xUe=o("GPT2Tokenizer"),kUe=o(" or "),eS=a("a"),SUe=o("GPT2TokenizerFast"),RUe=o(" (GPT Neo model)"),BUe=l(),fs=a("li"),yZ=a("strong"),PUe=o("herbert"),$Ue=o(" \u2014 "),oS=a("a"),IUe=o("HerbertTokenizer"),qUe=o(" or "),rS=a("a"),NUe=o("HerbertTokenizerFast"),jUe=o(" (HerBERT model)"),DUe=l(),Ug=a("li"),LZ=a("strong"),GUe=o("hubert"),OUe=o(" \u2014 "),tS=a("a"),VUe=o("Wav2Vec2CTCTokenizer"),XUe=o(" (Hubert model)"),zUe=l(),ms=a("li"),xZ=a("strong"),QUe=o("ibert"),WUe=o(" \u2014 "),aS=a("a"),HUe=o("RobertaTokenizer"),UUe=o(" or "),nS=a("a"),JUe=o("RobertaTokenizerFast"),YUe=o(" (I-BERT model)"),KUe=l(),gs=a("li"),kZ=a("strong"),ZUe=o("layoutlm"),eJe=o(" \u2014 "),sS=a("a"),oJe=o("LayoutLMTokenizer"),rJe=o(" or "),lS=a("a"),tJe=o("LayoutLMTokenizerFast"),aJe=o(" (LayoutLM model)"),nJe=l(),hs=a("li"),SZ=a("strong"),sJe=o("layoutlmv2"),lJe=o(" \u2014 "),iS=a("a"),iJe=o("LayoutLMv2Tokenizer"),dJe=o(" or "),dS=a("a"),cJe=o("LayoutLMv2TokenizerFast"),fJe=o(" (LayoutLMv2 model)"),mJe=l(),ps=a("li"),RZ=a("strong"),gJe=o("layoutxlm"),hJe=o(" \u2014 "),cS=a("a"),pJe=o("LayoutXLMTokenizer"),_Je=o(" or "),fS=a("a"),uJe=o("LayoutXLMTokenizerFast"),bJe=o(" (LayoutXLM model)"),FJe=l(),_s=a("li"),BZ=a("strong"),vJe=o("led"),TJe=o(" \u2014 "),mS=a("a"),MJe=o("LEDTokenizer"),EJe=o(" or "),gS=a("a"),CJe=o("LEDTokenizerFast"),wJe=o(" (LED model)"),AJe=l(),us=a("li"),PZ=a("strong"),yJe=o("longformer"),LJe=o(" \u2014 "),hS=a("a"),xJe=o("LongformerTokenizer"),kJe=o(" or "),pS=a("a"),SJe=o("LongformerTokenizerFast"),RJe=o(" (Longformer model)"),BJe=l(),Jg=a("li"),$Z=a("strong"),PJe=o("luke"),$Je=o(" \u2014 "),_S=a("a"),IJe=o("LukeTokenizer"),qJe=o(" (LUKE model)"),NJe=l(),bs=a("li"),IZ=a("strong"),jJe=o("lxmert"),DJe=o(" \u2014 "),uS=a("a"),GJe=o("LxmertTokenizer"),OJe=o(" or "),bS=a("a"),VJe=o("LxmertTokenizerFast"),XJe=o(" (LXMERT model)"),zJe=l(),Yg=a("li"),qZ=a("strong"),QJe=o("m2m_100"),WJe=o(" \u2014 "),FS=a("a"),HJe=o("M2M100Tokenizer"),UJe=o(" (M2M100 model)"),JJe=l(),Kg=a("li"),NZ=a("strong"),YJe=o("marian"),KJe=o(" \u2014 "),vS=a("a"),ZJe=o("MarianTokenizer"),eYe=o(" (Marian model)"),oYe=l(),Fs=a("li"),jZ=a("strong"),rYe=o("mbart"),tYe=o(" \u2014 "),TS=a("a"),aYe=o("MBartTokenizer"),nYe=o(" or "),MS=a("a"),sYe=o("MBartTokenizerFast"),lYe=o(" (mBART model)"),iYe=l(),vs=a("li"),DZ=a("strong"),dYe=o("mbart50"),cYe=o(" \u2014 "),ES=a("a"),fYe=o("MBart50Tokenizer"),mYe=o(" or "),CS=a("a"),gYe=o("MBart50TokenizerFast"),hYe=o(" (mBART-50 model)"),pYe=l(),Zg=a("li"),GZ=a("strong"),_Ye=o("mluke"),uYe=o(" \u2014 "),wS=a("a"),bYe=o("MLukeTokenizer"),FYe=o(" (mLUKE model)"),vYe=l(),Ts=a("li"),OZ=a("strong"),TYe=o("mobilebert"),MYe=o(" \u2014 "),AS=a("a"),EYe=o("MobileBertTokenizer"),CYe=o(" or "),yS=a("a"),wYe=o("MobileBertTokenizerFast"),AYe=o(" (MobileBERT model)"),yYe=l(),Ms=a("li"),VZ=a("strong"),LYe=o("mpnet"),xYe=o(" \u2014 "),LS=a("a"),kYe=o("MPNetTokenizer"),SYe=o(" or "),xS=a("a"),RYe=o("MPNetTokenizerFast"),BYe=o(" (MPNet model)"),PYe=l(),Es=a("li"),XZ=a("strong"),$Ye=o("mt5"),IYe=o(" \u2014 "),kS=a("a"),qYe=o("MT5Tokenizer"),NYe=o(" or "),SS=a("a"),jYe=o("MT5TokenizerFast"),DYe=o(" (mT5 model)"),GYe=l(),Cs=a("li"),zZ=a("strong"),OYe=o("openai-gpt"),VYe=o(" \u2014 "),RS=a("a"),XYe=o("OpenAIGPTTokenizer"),zYe=o(" or "),BS=a("a"),QYe=o("OpenAIGPTTokenizerFast"),WYe=o(" (OpenAI GPT model)"),HYe=l(),ws=a("li"),QZ=a("strong"),UYe=o("pegasus"),JYe=o(" \u2014 "),PS=a("a"),YYe=o("PegasusTokenizer"),KYe=o(" or "),$S=a("a"),ZYe=o("PegasusTokenizerFast"),eKe=o(" (Pegasus model)"),oKe=l(),eh=a("li"),WZ=a("strong"),rKe=o("perceiver"),tKe=o(" \u2014 "),IS=a("a"),aKe=o("PerceiverTokenizer"),nKe=o(" (Perceiver model)"),sKe=l(),oh=a("li"),HZ=a("strong"),lKe=o("phobert"),iKe=o(" \u2014 "),qS=a("a"),dKe=o("PhobertTokenizer"),cKe=o(" (PhoBERT model)"),fKe=l(),As=a("li"),UZ=a("strong"),mKe=o("plbart"),gKe=o(" \u2014 "),NS=a("a"),hKe=o("PLBartTokenizer"),pKe=o(" or "),JZ=a("code"),_Ke=o("PLBartTokenizerFast"),uKe=o("(PLBart model)"),bKe=l(),rh=a("li"),YZ=a("strong"),FKe=o("prophetnet"),vKe=o(" \u2014 "),jS=a("a"),TKe=o("ProphetNetTokenizer"),MKe=o(" (ProphetNet model)"),EKe=l(),ys=a("li"),KZ=a("strong"),CKe=o("qdqbert"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("BertTokenizer"),yKe=o(" or "),GS=a("a"),LKe=o("BertTokenizerFast"),xKe=o(" (QDQBert model)"),kKe=l(),th=a("li"),ZZ=a("strong"),SKe=o("rag"),RKe=o(" \u2014 "),OS=a("a"),BKe=o("RagTokenizer"),PKe=o(" (RAG model)"),$Ke=l(),Ls=a("li"),eee=a("strong"),IKe=o("realm"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("RealmTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("RealmTokenizerFast"),GKe=o(" (Realm model)"),OKe=l(),xs=a("li"),oee=a("strong"),VKe=o("reformer"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("ReformerTokenizer"),QKe=o(" or "),QS=a("a"),WKe=o("ReformerTokenizerFast"),HKe=o(" (Reformer model)"),UKe=l(),ks=a("li"),ree=a("strong"),JKe=o("rembert"),YKe=o(" \u2014 "),WS=a("a"),KKe=o("RemBertTokenizer"),ZKe=o(" or "),HS=a("a"),eZe=o("RemBertTokenizerFast"),oZe=o(" (RemBERT model)"),rZe=l(),Ss=a("li"),tee=a("strong"),tZe=o("retribert"),aZe=o(" \u2014 "),US=a("a"),nZe=o("RetriBertTokenizer"),sZe=o(" or "),JS=a("a"),lZe=o("RetriBertTokenizerFast"),iZe=o(" (RetriBERT model)"),dZe=l(),Rs=a("li"),aee=a("strong"),cZe=o("roberta"),fZe=o(" \u2014 "),YS=a("a"),mZe=o("RobertaTokenizer"),gZe=o(" or "),KS=a("a"),hZe=o("RobertaTokenizerFast"),pZe=o(" (RoBERTa model)"),_Ze=l(),Bs=a("li"),nee=a("strong"),uZe=o("roformer"),bZe=o(" \u2014 "),ZS=a("a"),FZe=o("RoFormerTokenizer"),vZe=o(" or "),eR=a("a"),TZe=o("RoFormerTokenizerFast"),MZe=o(" (RoFormer model)"),EZe=l(),ah=a("li"),see=a("strong"),CZe=o("speech_to_text"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("Speech2TextTokenizer"),yZe=o(" (Speech2Text model)"),LZe=l(),nh=a("li"),lee=a("strong"),xZe=o("speech_to_text_2"),kZe=o(" \u2014 "),rR=a("a"),SZe=o("Speech2Text2Tokenizer"),RZe=o(" (Speech2Text2 model)"),BZe=l(),Ps=a("li"),iee=a("strong"),PZe=o("splinter"),$Ze=o(" \u2014 "),tR=a("a"),IZe=o("SplinterTokenizer"),qZe=o(" or "),aR=a("a"),NZe=o("SplinterTokenizerFast"),jZe=o(" (Splinter model)"),DZe=l(),$s=a("li"),dee=a("strong"),GZe=o("squeezebert"),OZe=o(" \u2014 "),nR=a("a"),VZe=o("SqueezeBertTokenizer"),XZe=o(" or "),sR=a("a"),zZe=o("SqueezeBertTokenizerFast"),QZe=o(" (SqueezeBERT model)"),WZe=l(),Is=a("li"),cee=a("strong"),HZe=o("t5"),UZe=o(" \u2014 "),lR=a("a"),JZe=o("T5Tokenizer"),YZe=o(" or "),iR=a("a"),KZe=o("T5TokenizerFast"),ZZe=o(" (T5 model)"),eeo=l(),sh=a("li"),fee=a("strong"),oeo=o("tapas"),reo=o(" \u2014 "),dR=a("a"),teo=o("TapasTokenizer"),aeo=o(" (TAPAS model)"),neo=l(),lh=a("li"),mee=a("strong"),seo=o("transfo-xl"),leo=o(" \u2014 "),cR=a("a"),ieo=o("TransfoXLTokenizer"),deo=o(" (Transformer-XL model)"),ceo=l(),ih=a("li"),gee=a("strong"),feo=o("wav2vec2"),meo=o(" \u2014 "),fR=a("a"),geo=o("Wav2Vec2CTCTokenizer"),heo=o(" (Wav2Vec2 model)"),peo=l(),dh=a("li"),hee=a("strong"),_eo=o("wav2vec2_phoneme"),ueo=o(" \u2014 "),mR=a("a"),beo=o("Wav2Vec2PhonemeCTCTokenizer"),Feo=o(" (Wav2Vec2Phoneme model)"),veo=l(),qs=a("li"),pee=a("strong"),Teo=o("xglm"),Meo=o(" \u2014 "),gR=a("a"),Eeo=o("XGLMTokenizer"),Ceo=o(" or "),hR=a("a"),weo=o("XGLMTokenizerFast"),Aeo=o(" (XGLM model)"),yeo=l(),ch=a("li"),_ee=a("strong"),Leo=o("xlm"),xeo=o(" \u2014 "),pR=a("a"),keo=o("XLMTokenizer"),Seo=o(" (XLM model)"),Reo=l(),fh=a("li"),uee=a("strong"),Beo=o("xlm-prophetnet"),Peo=o(" \u2014 "),_R=a("a"),$eo=o("XLMProphetNetTokenizer"),Ieo=o(" (XLMProphetNet model)"),qeo=l(),Ns=a("li"),bee=a("strong"),Neo=o("xlm-roberta"),jeo=o(" \u2014 "),uR=a("a"),Deo=o("XLMRobertaTokenizer"),Geo=o(" or "),bR=a("a"),Oeo=o("XLMRobertaTokenizerFast"),Veo=o(" (XLM-RoBERTa model)"),Xeo=l(),js=a("li"),Fee=a("strong"),zeo=o("xlnet"),Qeo=o(" \u2014 "),FR=a("a"),Weo=o("XLNetTokenizer"),Heo=o(" or "),vR=a("a"),Ueo=o("XLNetTokenizerFast"),Jeo=o(" (XLNet model)"),Yeo=l(),vee=a("p"),Keo=o("Examples:"),Zeo=l(),f(B3.$$.fragment),eoo=l(),mh=a("div"),f(P3.$$.fragment),ooo=l(),Tee=a("p"),roo=o("Register a new tokenizer in this mapping."),WSe=l(),Hi=a("h2"),gh=a("a"),Mee=a("span"),f($3.$$.fragment),too=l(),Eee=a("span"),aoo=o("AutoFeatureExtractor"),HSe=l(),Ho=a("div"),f(I3.$$.fragment),noo=l(),q3=a("p"),soo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TR=a("a"),loo=o("AutoFeatureExtractor.from_pretrained()"),ioo=o(" class method."),doo=l(),N3=a("p"),coo=o("This class cannot be instantiated directly using "),Cee=a("code"),foo=o("__init__()"),moo=o(" (throws an error)."),goo=l(),$e=a("div"),f(j3.$$.fragment),hoo=l(),wee=a("p"),poo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_oo=l(),Va=a("p"),uoo=o("The feature extractor class to instantiate is selected based on the "),Aee=a("code"),boo=o("model_type"),Foo=o(` property of the config object
(either passed as an argument or loaded from `),yee=a("code"),voo=o("pretrained_model_name_or_path"),Too=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Lee=a("code"),Moo=o("pretrained_model_name_or_path"),Eoo=o(":"),Coo=l(),te=a("ul"),hh=a("li"),xee=a("strong"),woo=o("beit"),Aoo=o(" \u2014 "),MR=a("a"),yoo=o("BeitFeatureExtractor"),Loo=o(" (BEiT model)"),xoo=l(),ph=a("li"),kee=a("strong"),koo=o("clip"),Soo=o(" \u2014 "),ER=a("a"),Roo=o("CLIPFeatureExtractor"),Boo=o(" (CLIP model)"),Poo=l(),_h=a("li"),See=a("strong"),$oo=o("convnext"),Ioo=o(" \u2014 "),CR=a("a"),qoo=o("ConvNextFeatureExtractor"),Noo=o(" (ConvNext model)"),joo=l(),uh=a("li"),Ree=a("strong"),Doo=o("deit"),Goo=o(" \u2014 "),wR=a("a"),Ooo=o("DeiTFeatureExtractor"),Voo=o(" (DeiT model)"),Xoo=l(),bh=a("li"),Bee=a("strong"),zoo=o("detr"),Qoo=o(" \u2014 "),AR=a("a"),Woo=o("DetrFeatureExtractor"),Hoo=o(" (DETR model)"),Uoo=l(),Fh=a("li"),Pee=a("strong"),Joo=o("hubert"),Yoo=o(" \u2014 "),yR=a("a"),Koo=o("Wav2Vec2FeatureExtractor"),Zoo=o(" (Hubert model)"),ero=l(),vh=a("li"),$ee=a("strong"),oro=o("layoutlmv2"),rro=o(" \u2014 "),LR=a("a"),tro=o("LayoutLMv2FeatureExtractor"),aro=o(" (LayoutLMv2 model)"),nro=l(),Th=a("li"),Iee=a("strong"),sro=o("maskformer"),lro=o(" \u2014 "),xR=a("a"),iro=o("MaskFormerFeatureExtractor"),dro=o(" (MaskFormer model)"),cro=l(),Mh=a("li"),qee=a("strong"),fro=o("perceiver"),mro=o(" \u2014 "),kR=a("a"),gro=o("PerceiverFeatureExtractor"),hro=o(" (Perceiver model)"),pro=l(),Eh=a("li"),Nee=a("strong"),_ro=o("poolformer"),uro=o(" \u2014 "),SR=a("a"),bro=o("PoolFormerFeatureExtractor"),Fro=o(" (PoolFormer model)"),vro=l(),Ch=a("li"),jee=a("strong"),Tro=o("resnet"),Mro=o(" \u2014 "),RR=a("a"),Ero=o("ConvNextFeatureExtractor"),Cro=o(" (ResNet model)"),wro=l(),wh=a("li"),Dee=a("strong"),Aro=o("segformer"),yro=o(" \u2014 "),BR=a("a"),Lro=o("SegformerFeatureExtractor"),xro=o(" (SegFormer model)"),kro=l(),Ah=a("li"),Gee=a("strong"),Sro=o("speech_to_text"),Rro=o(" \u2014 "),PR=a("a"),Bro=o("Speech2TextFeatureExtractor"),Pro=o(" (Speech2Text model)"),$ro=l(),yh=a("li"),Oee=a("strong"),Iro=o("swin"),qro=o(" \u2014 "),$R=a("a"),Nro=o("ViTFeatureExtractor"),jro=o(" (Swin model)"),Dro=l(),Lh=a("li"),Vee=a("strong"),Gro=o("van"),Oro=o(" \u2014 "),IR=a("a"),Vro=o("ConvNextFeatureExtractor"),Xro=o(" (VAN model)"),zro=l(),xh=a("li"),Xee=a("strong"),Qro=o("vit"),Wro=o(" \u2014 "),qR=a("a"),Hro=o("ViTFeatureExtractor"),Uro=o(" (ViT model)"),Jro=l(),kh=a("li"),zee=a("strong"),Yro=o("vit_mae"),Kro=o(" \u2014 "),NR=a("a"),Zro=o("ViTFeatureExtractor"),eto=o(" (ViTMAE model)"),oto=l(),Sh=a("li"),Qee=a("strong"),rto=o("wav2vec2"),tto=o(" \u2014 "),jR=a("a"),ato=o("Wav2Vec2FeatureExtractor"),nto=o(" (Wav2Vec2 model)"),sto=l(),f(Rh.$$.fragment),lto=l(),Wee=a("p"),ito=o("Examples:"),dto=l(),f(D3.$$.fragment),cto=l(),Bh=a("div"),f(G3.$$.fragment),fto=l(),Hee=a("p"),mto=o("Register a new feature extractor for this class."),USe=l(),Ui=a("h2"),Ph=a("a"),Uee=a("span"),f(O3.$$.fragment),gto=l(),Jee=a("span"),hto=o("AutoProcessor"),JSe=l(),Uo=a("div"),f(V3.$$.fragment),pto=l(),X3=a("p"),_to=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=a("a"),uto=o("AutoProcessor.from_pretrained()"),bto=o(" class method."),Fto=l(),z3=a("p"),vto=o("This class cannot be instantiated directly using "),Yee=a("code"),Tto=o("__init__()"),Mto=o(" (throws an error)."),Eto=l(),Ie=a("div"),f(Q3.$$.fragment),Cto=l(),Kee=a("p"),wto=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ato=l(),Ji=a("p"),yto=o("The processor class to instantiate is selected based on the "),Zee=a("code"),Lto=o("model_type"),xto=o(` property of the config object (either
passed as an argument or loaded from `),eoe=a("code"),kto=o("pretrained_model_name_or_path"),Sto=o(" if possible):"),Rto=l(),ke=a("ul"),$h=a("li"),ooe=a("strong"),Bto=o("clip"),Pto=o(" \u2014 "),GR=a("a"),$to=o("CLIPProcessor"),Ito=o(" (CLIP model)"),qto=l(),Ih=a("li"),roe=a("strong"),Nto=o("layoutlmv2"),jto=o(" \u2014 "),OR=a("a"),Dto=o("LayoutLMv2Processor"),Gto=o(" (LayoutLMv2 model)"),Oto=l(),qh=a("li"),toe=a("strong"),Vto=o("layoutxlm"),Xto=o(" \u2014 "),VR=a("a"),zto=o("LayoutXLMProcessor"),Qto=o(" (LayoutXLM model)"),Wto=l(),Nh=a("li"),aoe=a("strong"),Hto=o("speech_to_text"),Uto=o(" \u2014 "),XR=a("a"),Jto=o("Speech2TextProcessor"),Yto=o(" (Speech2Text model)"),Kto=l(),jh=a("li"),noe=a("strong"),Zto=o("speech_to_text_2"),eao=o(" \u2014 "),zR=a("a"),oao=o("Speech2Text2Processor"),rao=o(" (Speech2Text2 model)"),tao=l(),Dh=a("li"),soe=a("strong"),aao=o("trocr"),nao=o(" \u2014 "),QR=a("a"),sao=o("TrOCRProcessor"),lao=o(" (TrOCR model)"),iao=l(),Gh=a("li"),loe=a("strong"),dao=o("vision-text-dual-encoder"),cao=o(" \u2014 "),WR=a("a"),fao=o("VisionTextDualEncoderProcessor"),mao=o(" (VisionTextDualEncoder model)"),gao=l(),Oh=a("li"),ioe=a("strong"),hao=o("wav2vec2"),pao=o(" \u2014 "),HR=a("a"),_ao=o("Wav2Vec2Processor"),uao=o(" (Wav2Vec2 model)"),bao=l(),f(Vh.$$.fragment),Fao=l(),doe=a("p"),vao=o("Examples:"),Tao=l(),f(W3.$$.fragment),Mao=l(),Xh=a("div"),f(H3.$$.fragment),Eao=l(),coe=a("p"),Cao=o("Register a new processor for this class."),YSe=l(),Yi=a("h2"),zh=a("a"),foe=a("span"),f(U3.$$.fragment),wao=l(),moe=a("span"),Aao=o("AutoModel"),KSe=l(),Jo=a("div"),f(J3.$$.fragment),yao=l(),Ki=a("p"),Lao=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UR=a("a"),xao=o("from_pretrained()"),kao=o(" class method or the "),JR=a("a"),Sao=o("from_config()"),Rao=o(` class
method.`),Bao=l(),Y3=a("p"),Pao=o("This class cannot be instantiated directly using "),goe=a("code"),$ao=o("__init__()"),Iao=o(" (throws an error)."),qao=l(),Xr=a("div"),f(K3.$$.fragment),Nao=l(),hoe=a("p"),jao=o("Instantiates one of the base model classes of the library from a configuration."),Dao=l(),Zi=a("p"),Gao=o(`Note:
Loading a model from its configuration file does `),poe=a("strong"),Oao=o("not"),Vao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YR=a("a"),Xao=o("from_pretrained()"),zao=o(" to load the model weights."),Qao=l(),_oe=a("p"),Wao=o("Examples:"),Hao=l(),f(Z3.$$.fragment),Uao=l(),qe=a("div"),f(ew.$$.fragment),Jao=l(),uoe=a("p"),Yao=o("Instantiate one of the base model classes of the library from a pretrained model."),Kao=l(),Xa=a("p"),Zao=o("The model class to instantiate is selected based on the "),boe=a("code"),eno=o("model_type"),ono=o(` property of the config object (either
passed as an argument or loaded from `),Foe=a("code"),rno=o("pretrained_model_name_or_path"),tno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=a("code"),ano=o("pretrained_model_name_or_path"),nno=o(":"),sno=l(),T=a("ul"),Qh=a("li"),Toe=a("strong"),lno=o("albert"),ino=o(" \u2014 "),KR=a("a"),dno=o("AlbertModel"),cno=o(" (ALBERT model)"),fno=l(),Wh=a("li"),Moe=a("strong"),mno=o("bart"),gno=o(" \u2014 "),ZR=a("a"),hno=o("BartModel"),pno=o(" (BART model)"),_no=l(),Hh=a("li"),Eoe=a("strong"),uno=o("beit"),bno=o(" \u2014 "),eB=a("a"),Fno=o("BeitModel"),vno=o(" (BEiT model)"),Tno=l(),Uh=a("li"),Coe=a("strong"),Mno=o("bert"),Eno=o(" \u2014 "),oB=a("a"),Cno=o("BertModel"),wno=o(" (BERT model)"),Ano=l(),Jh=a("li"),woe=a("strong"),yno=o("bert-generation"),Lno=o(" \u2014 "),rB=a("a"),xno=o("BertGenerationEncoder"),kno=o(" (Bert Generation model)"),Sno=l(),Yh=a("li"),Aoe=a("strong"),Rno=o("big_bird"),Bno=o(" \u2014 "),tB=a("a"),Pno=o("BigBirdModel"),$no=o(" (BigBird model)"),Ino=l(),Kh=a("li"),yoe=a("strong"),qno=o("bigbird_pegasus"),Nno=o(" \u2014 "),aB=a("a"),jno=o("BigBirdPegasusModel"),Dno=o(" (BigBirdPegasus model)"),Gno=l(),Zh=a("li"),Loe=a("strong"),Ono=o("blenderbot"),Vno=o(" \u2014 "),nB=a("a"),Xno=o("BlenderbotModel"),zno=o(" (Blenderbot model)"),Qno=l(),ep=a("li"),xoe=a("strong"),Wno=o("blenderbot-small"),Hno=o(" \u2014 "),sB=a("a"),Uno=o("BlenderbotSmallModel"),Jno=o(" (BlenderbotSmall model)"),Yno=l(),op=a("li"),koe=a("strong"),Kno=o("camembert"),Zno=o(" \u2014 "),lB=a("a"),eso=o("CamembertModel"),oso=o(" (CamemBERT model)"),rso=l(),rp=a("li"),Soe=a("strong"),tso=o("canine"),aso=o(" \u2014 "),iB=a("a"),nso=o("CanineModel"),sso=o(" (Canine model)"),lso=l(),tp=a("li"),Roe=a("strong"),iso=o("clip"),dso=o(" \u2014 "),dB=a("a"),cso=o("CLIPModel"),fso=o(" (CLIP model)"),mso=l(),ap=a("li"),Boe=a("strong"),gso=o("convbert"),hso=o(" \u2014 "),cB=a("a"),pso=o("ConvBertModel"),_so=o(" (ConvBERT model)"),uso=l(),np=a("li"),Poe=a("strong"),bso=o("convnext"),Fso=o(" \u2014 "),fB=a("a"),vso=o("ConvNextModel"),Tso=o(" (ConvNext model)"),Mso=l(),sp=a("li"),$oe=a("strong"),Eso=o("ctrl"),Cso=o(" \u2014 "),mB=a("a"),wso=o("CTRLModel"),Aso=o(" (CTRL model)"),yso=l(),lp=a("li"),Ioe=a("strong"),Lso=o("data2vec-audio"),xso=o(" \u2014 "),gB=a("a"),kso=o("Data2VecAudioModel"),Sso=o(" (Data2VecAudio model)"),Rso=l(),ip=a("li"),qoe=a("strong"),Bso=o("data2vec-text"),Pso=o(" \u2014 "),hB=a("a"),$so=o("Data2VecTextModel"),Iso=o(" (Data2VecText model)"),qso=l(),dp=a("li"),Noe=a("strong"),Nso=o("deberta"),jso=o(" \u2014 "),pB=a("a"),Dso=o("DebertaModel"),Gso=o(" (DeBERTa model)"),Oso=l(),cp=a("li"),joe=a("strong"),Vso=o("deberta-v2"),Xso=o(" \u2014 "),_B=a("a"),zso=o("DebertaV2Model"),Qso=o(" (DeBERTa-v2 model)"),Wso=l(),fp=a("li"),Doe=a("strong"),Hso=o("decision_transformer"),Uso=o(" \u2014 "),uB=a("a"),Jso=o("DecisionTransformerModel"),Yso=o(" (Decision Transformer model)"),Kso=l(),mp=a("li"),Goe=a("strong"),Zso=o("deit"),elo=o(" \u2014 "),bB=a("a"),olo=o("DeiTModel"),rlo=o(" (DeiT model)"),tlo=l(),gp=a("li"),Ooe=a("strong"),alo=o("detr"),nlo=o(" \u2014 "),FB=a("a"),slo=o("DetrModel"),llo=o(" (DETR model)"),ilo=l(),hp=a("li"),Voe=a("strong"),dlo=o("distilbert"),clo=o(" \u2014 "),vB=a("a"),flo=o("DistilBertModel"),mlo=o(" (DistilBERT model)"),glo=l(),pp=a("li"),Xoe=a("strong"),hlo=o("dpr"),plo=o(" \u2014 "),TB=a("a"),_lo=o("DPRQuestionEncoder"),ulo=o(" (DPR model)"),blo=l(),_p=a("li"),zoe=a("strong"),Flo=o("dpt"),vlo=o(" \u2014 "),MB=a("a"),Tlo=o("DPTModel"),Mlo=o(" (DPT model)"),Elo=l(),up=a("li"),Qoe=a("strong"),Clo=o("electra"),wlo=o(" \u2014 "),EB=a("a"),Alo=o("ElectraModel"),ylo=o(" (ELECTRA model)"),Llo=l(),bp=a("li"),Woe=a("strong"),xlo=o("flaubert"),klo=o(" \u2014 "),CB=a("a"),Slo=o("FlaubertModel"),Rlo=o(" (FlauBERT model)"),Blo=l(),Fp=a("li"),Hoe=a("strong"),Plo=o("fnet"),$lo=o(" \u2014 "),wB=a("a"),Ilo=o("FNetModel"),qlo=o(" (FNet model)"),Nlo=l(),vp=a("li"),Uoe=a("strong"),jlo=o("fsmt"),Dlo=o(" \u2014 "),AB=a("a"),Glo=o("FSMTModel"),Olo=o(" (FairSeq Machine-Translation model)"),Vlo=l(),Ds=a("li"),Joe=a("strong"),Xlo=o("funnel"),zlo=o(" \u2014 "),yB=a("a"),Qlo=o("FunnelModel"),Wlo=o(" or "),LB=a("a"),Hlo=o("FunnelBaseModel"),Ulo=o(" (Funnel Transformer model)"),Jlo=l(),Tp=a("li"),Yoe=a("strong"),Ylo=o("glpn"),Klo=o(" \u2014 "),xB=a("a"),Zlo=o("GLPNModel"),eio=o(" (GLPN model)"),oio=l(),Mp=a("li"),Koe=a("strong"),rio=o("gpt2"),tio=o(" \u2014 "),kB=a("a"),aio=o("GPT2Model"),nio=o(" (OpenAI GPT-2 model)"),sio=l(),Ep=a("li"),Zoe=a("strong"),lio=o("gpt_neo"),iio=o(" \u2014 "),SB=a("a"),dio=o("GPTNeoModel"),cio=o(" (GPT Neo model)"),fio=l(),Cp=a("li"),ere=a("strong"),mio=o("gptj"),gio=o(" \u2014 "),RB=a("a"),hio=o("GPTJModel"),pio=o(" (GPT-J model)"),_io=l(),wp=a("li"),ore=a("strong"),uio=o("hubert"),bio=o(" \u2014 "),BB=a("a"),Fio=o("HubertModel"),vio=o(" (Hubert model)"),Tio=l(),Ap=a("li"),rre=a("strong"),Mio=o("ibert"),Eio=o(" \u2014 "),PB=a("a"),Cio=o("IBertModel"),wio=o(" (I-BERT model)"),Aio=l(),yp=a("li"),tre=a("strong"),yio=o("imagegpt"),Lio=o(" \u2014 "),$B=a("a"),xio=o("ImageGPTModel"),kio=o(" (ImageGPT model)"),Sio=l(),Lp=a("li"),are=a("strong"),Rio=o("layoutlm"),Bio=o(" \u2014 "),IB=a("a"),Pio=o("LayoutLMModel"),$io=o(" (LayoutLM model)"),Iio=l(),xp=a("li"),nre=a("strong"),qio=o("layoutlmv2"),Nio=o(" \u2014 "),qB=a("a"),jio=o("LayoutLMv2Model"),Dio=o(" (LayoutLMv2 model)"),Gio=l(),kp=a("li"),sre=a("strong"),Oio=o("led"),Vio=o(" \u2014 "),NB=a("a"),Xio=o("LEDModel"),zio=o(" (LED model)"),Qio=l(),Sp=a("li"),lre=a("strong"),Wio=o("longformer"),Hio=o(" \u2014 "),jB=a("a"),Uio=o("LongformerModel"),Jio=o(" (Longformer model)"),Yio=l(),Rp=a("li"),ire=a("strong"),Kio=o("luke"),Zio=o(" \u2014 "),DB=a("a"),edo=o("LukeModel"),odo=o(" (LUKE model)"),rdo=l(),Bp=a("li"),dre=a("strong"),tdo=o("lxmert"),ado=o(" \u2014 "),GB=a("a"),ndo=o("LxmertModel"),sdo=o(" (LXMERT model)"),ldo=l(),Pp=a("li"),cre=a("strong"),ido=o("m2m_100"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("M2M100Model"),fdo=o(" (M2M100 model)"),mdo=l(),$p=a("li"),fre=a("strong"),gdo=o("marian"),hdo=o(" \u2014 "),VB=a("a"),pdo=o("MarianModel"),_do=o(" (Marian model)"),udo=l(),Ip=a("li"),mre=a("strong"),bdo=o("maskformer"),Fdo=o(" \u2014 "),XB=a("a"),vdo=o("MaskFormerModel"),Tdo=o(" (MaskFormer model)"),Mdo=l(),qp=a("li"),gre=a("strong"),Edo=o("mbart"),Cdo=o(" \u2014 "),zB=a("a"),wdo=o("MBartModel"),Ado=o(" (mBART model)"),ydo=l(),Np=a("li"),hre=a("strong"),Ldo=o("megatron-bert"),xdo=o(" \u2014 "),QB=a("a"),kdo=o("MegatronBertModel"),Sdo=o(" (MegatronBert model)"),Rdo=l(),jp=a("li"),pre=a("strong"),Bdo=o("mobilebert"),Pdo=o(" \u2014 "),WB=a("a"),$do=o("MobileBertModel"),Ido=o(" (MobileBERT model)"),qdo=l(),Dp=a("li"),_re=a("strong"),Ndo=o("mpnet"),jdo=o(" \u2014 "),HB=a("a"),Ddo=o("MPNetModel"),Gdo=o(" (MPNet model)"),Odo=l(),Gp=a("li"),ure=a("strong"),Vdo=o("mt5"),Xdo=o(" \u2014 "),UB=a("a"),zdo=o("MT5Model"),Qdo=o(" (mT5 model)"),Wdo=l(),Op=a("li"),bre=a("strong"),Hdo=o("nystromformer"),Udo=o(" \u2014 "),JB=a("a"),Jdo=o("NystromformerModel"),Ydo=o(" (Nystromformer model)"),Kdo=l(),Vp=a("li"),Fre=a("strong"),Zdo=o("openai-gpt"),eco=o(" \u2014 "),YB=a("a"),oco=o("OpenAIGPTModel"),rco=o(" (OpenAI GPT model)"),tco=l(),Xp=a("li"),vre=a("strong"),aco=o("pegasus"),nco=o(" \u2014 "),KB=a("a"),sco=o("PegasusModel"),lco=o(" (Pegasus model)"),ico=l(),zp=a("li"),Tre=a("strong"),dco=o("perceiver"),cco=o(" \u2014 "),ZB=a("a"),fco=o("PerceiverModel"),mco=o(" (Perceiver model)"),gco=l(),Qp=a("li"),Mre=a("strong"),hco=o("plbart"),pco=o(" \u2014 "),eP=a("a"),_co=o("PLBartModel"),uco=o(" (PLBart model)"),bco=l(),Wp=a("li"),Ere=a("strong"),Fco=o("poolformer"),vco=o(" \u2014 "),oP=a("a"),Tco=o("PoolFormerModel"),Mco=o(" (PoolFormer model)"),Eco=l(),Hp=a("li"),Cre=a("strong"),Cco=o("prophetnet"),wco=o(" \u2014 "),rP=a("a"),Aco=o("ProphetNetModel"),yco=o(" (ProphetNet model)"),Lco=l(),Up=a("li"),wre=a("strong"),xco=o("qdqbert"),kco=o(" \u2014 "),tP=a("a"),Sco=o("QDQBertModel"),Rco=o(" (QDQBert model)"),Bco=l(),Jp=a("li"),Are=a("strong"),Pco=o("reformer"),$co=o(" \u2014 "),aP=a("a"),Ico=o("ReformerModel"),qco=o(" (Reformer model)"),Nco=l(),Yp=a("li"),yre=a("strong"),jco=o("rembert"),Dco=o(" \u2014 "),nP=a("a"),Gco=o("RemBertModel"),Oco=o(" (RemBERT model)"),Vco=l(),Kp=a("li"),Lre=a("strong"),Xco=o("resnet"),zco=o(" \u2014 "),sP=a("a"),Qco=o("ResNetModel"),Wco=o(" (ResNet model)"),Hco=l(),Zp=a("li"),xre=a("strong"),Uco=o("retribert"),Jco=o(" \u2014 "),lP=a("a"),Yco=o("RetriBertModel"),Kco=o(" (RetriBERT model)"),Zco=l(),e_=a("li"),kre=a("strong"),efo=o("roberta"),ofo=o(" \u2014 "),iP=a("a"),rfo=o("RobertaModel"),tfo=o(" (RoBERTa model)"),afo=l(),o_=a("li"),Sre=a("strong"),nfo=o("roformer"),sfo=o(" \u2014 "),dP=a("a"),lfo=o("RoFormerModel"),ifo=o(" (RoFormer model)"),dfo=l(),r_=a("li"),Rre=a("strong"),cfo=o("segformer"),ffo=o(" \u2014 "),cP=a("a"),mfo=o("SegformerModel"),gfo=o(" (SegFormer model)"),hfo=l(),t_=a("li"),Bre=a("strong"),pfo=o("sew"),_fo=o(" \u2014 "),fP=a("a"),ufo=o("SEWModel"),bfo=o(" (SEW model)"),Ffo=l(),a_=a("li"),Pre=a("strong"),vfo=o("sew-d"),Tfo=o(" \u2014 "),mP=a("a"),Mfo=o("SEWDModel"),Efo=o(" (SEW-D model)"),Cfo=l(),n_=a("li"),$re=a("strong"),wfo=o("speech_to_text"),Afo=o(" \u2014 "),gP=a("a"),yfo=o("Speech2TextModel"),Lfo=o(" (Speech2Text model)"),xfo=l(),s_=a("li"),Ire=a("strong"),kfo=o("splinter"),Sfo=o(" \u2014 "),hP=a("a"),Rfo=o("SplinterModel"),Bfo=o(" (Splinter model)"),Pfo=l(),l_=a("li"),qre=a("strong"),$fo=o("squeezebert"),Ifo=o(" \u2014 "),pP=a("a"),qfo=o("SqueezeBertModel"),Nfo=o(" (SqueezeBERT model)"),jfo=l(),i_=a("li"),Nre=a("strong"),Dfo=o("swin"),Gfo=o(" \u2014 "),_P=a("a"),Ofo=o("SwinModel"),Vfo=o(" (Swin model)"),Xfo=l(),d_=a("li"),jre=a("strong"),zfo=o("t5"),Qfo=o(" \u2014 "),uP=a("a"),Wfo=o("T5Model"),Hfo=o(" (T5 model)"),Ufo=l(),c_=a("li"),Dre=a("strong"),Jfo=o("tapas"),Yfo=o(" \u2014 "),bP=a("a"),Kfo=o("TapasModel"),Zfo=o(" (TAPAS model)"),emo=l(),f_=a("li"),Gre=a("strong"),omo=o("transfo-xl"),rmo=o(" \u2014 "),FP=a("a"),tmo=o("TransfoXLModel"),amo=o(" (Transformer-XL model)"),nmo=l(),m_=a("li"),Ore=a("strong"),smo=o("unispeech"),lmo=o(" \u2014 "),vP=a("a"),imo=o("UniSpeechModel"),dmo=o(" (UniSpeech model)"),cmo=l(),g_=a("li"),Vre=a("strong"),fmo=o("unispeech-sat"),mmo=o(" \u2014 "),TP=a("a"),gmo=o("UniSpeechSatModel"),hmo=o(" (UniSpeechSat model)"),pmo=l(),h_=a("li"),Xre=a("strong"),_mo=o("van"),umo=o(" \u2014 "),MP=a("a"),bmo=o("VanModel"),Fmo=o(" (VAN model)"),vmo=l(),p_=a("li"),zre=a("strong"),Tmo=o("vilt"),Mmo=o(" \u2014 "),EP=a("a"),Emo=o("ViltModel"),Cmo=o(" (ViLT model)"),wmo=l(),__=a("li"),Qre=a("strong"),Amo=o("vision-text-dual-encoder"),ymo=o(" \u2014 "),CP=a("a"),Lmo=o("VisionTextDualEncoderModel"),xmo=o(" (VisionTextDualEncoder model)"),kmo=l(),u_=a("li"),Wre=a("strong"),Smo=o("visual_bert"),Rmo=o(" \u2014 "),wP=a("a"),Bmo=o("VisualBertModel"),Pmo=o(" (VisualBert model)"),$mo=l(),b_=a("li"),Hre=a("strong"),Imo=o("vit"),qmo=o(" \u2014 "),AP=a("a"),Nmo=o("ViTModel"),jmo=o(" (ViT model)"),Dmo=l(),F_=a("li"),Ure=a("strong"),Gmo=o("vit_mae"),Omo=o(" \u2014 "),yP=a("a"),Vmo=o("ViTMAEModel"),Xmo=o(" (ViTMAE model)"),zmo=l(),v_=a("li"),Jre=a("strong"),Qmo=o("wav2vec2"),Wmo=o(" \u2014 "),LP=a("a"),Hmo=o("Wav2Vec2Model"),Umo=o(" (Wav2Vec2 model)"),Jmo=l(),T_=a("li"),Yre=a("strong"),Ymo=o("wavlm"),Kmo=o(" \u2014 "),xP=a("a"),Zmo=o("WavLMModel"),ego=o(" (WavLM model)"),ogo=l(),M_=a("li"),Kre=a("strong"),rgo=o("xglm"),tgo=o(" \u2014 "),kP=a("a"),ago=o("XGLMModel"),ngo=o(" (XGLM model)"),sgo=l(),E_=a("li"),Zre=a("strong"),lgo=o("xlm"),igo=o(" \u2014 "),SP=a("a"),dgo=o("XLMModel"),cgo=o(" (XLM model)"),fgo=l(),C_=a("li"),ete=a("strong"),mgo=o("xlm-prophetnet"),ggo=o(" \u2014 "),RP=a("a"),hgo=o("XLMProphetNetModel"),pgo=o(" (XLMProphetNet model)"),_go=l(),w_=a("li"),ote=a("strong"),ugo=o("xlm-roberta"),bgo=o(" \u2014 "),BP=a("a"),Fgo=o("XLMRobertaModel"),vgo=o(" (XLM-RoBERTa model)"),Tgo=l(),A_=a("li"),rte=a("strong"),Mgo=o("xlm-roberta-xl"),Ego=o(" \u2014 "),PP=a("a"),Cgo=o("XLMRobertaXLModel"),wgo=o(" (XLM-RoBERTa-XL model)"),Ago=l(),y_=a("li"),tte=a("strong"),ygo=o("xlnet"),Lgo=o(" \u2014 "),$P=a("a"),xgo=o("XLNetModel"),kgo=o(" (XLNet model)"),Sgo=l(),L_=a("li"),ate=a("strong"),Rgo=o("yoso"),Bgo=o(" \u2014 "),IP=a("a"),Pgo=o("YosoModel"),$go=o(" (YOSO model)"),Igo=l(),x_=a("p"),qgo=o("The model is set in evaluation mode by default using "),nte=a("code"),Ngo=o("model.eval()"),jgo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ste=a("code"),Dgo=o("model.train()"),Ggo=l(),lte=a("p"),Ogo=o("Examples:"),Vgo=l(),f(ow.$$.fragment),ZSe=l(),ed=a("h2"),k_=a("a"),ite=a("span"),f(rw.$$.fragment),Xgo=l(),dte=a("span"),zgo=o("AutoModelForPreTraining"),eRe=l(),Yo=a("div"),f(tw.$$.fragment),Qgo=l(),od=a("p"),Wgo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qP=a("a"),Hgo=o("from_pretrained()"),Ugo=o(" class method or the "),NP=a("a"),Jgo=o("from_config()"),Ygo=o(` class
method.`),Kgo=l(),aw=a("p"),Zgo=o("This class cannot be instantiated directly using "),cte=a("code"),eho=o("__init__()"),oho=o(" (throws an error)."),rho=l(),zr=a("div"),f(nw.$$.fragment),tho=l(),fte=a("p"),aho=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nho=l(),rd=a("p"),sho=o(`Note:
Loading a model from its configuration file does `),mte=a("strong"),lho=o("not"),iho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=a("a"),dho=o("from_pretrained()"),cho=o(" to load the model weights."),fho=l(),gte=a("p"),mho=o("Examples:"),gho=l(),f(sw.$$.fragment),hho=l(),Ne=a("div"),f(lw.$$.fragment),pho=l(),hte=a("p"),_ho=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),uho=l(),za=a("p"),bho=o("The model class to instantiate is selected based on the "),pte=a("code"),Fho=o("model_type"),vho=o(` property of the config object (either
passed as an argument or loaded from `),_te=a("code"),Tho=o("pretrained_model_name_or_path"),Mho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=a("code"),Eho=o("pretrained_model_name_or_path"),Cho=o(":"),who=l(),S=a("ul"),S_=a("li"),bte=a("strong"),Aho=o("albert"),yho=o(" \u2014 "),DP=a("a"),Lho=o("AlbertForPreTraining"),xho=o(" (ALBERT model)"),kho=l(),R_=a("li"),Fte=a("strong"),Sho=o("bart"),Rho=o(" \u2014 "),GP=a("a"),Bho=o("BartForConditionalGeneration"),Pho=o(" (BART model)"),$ho=l(),B_=a("li"),vte=a("strong"),Iho=o("bert"),qho=o(" \u2014 "),OP=a("a"),Nho=o("BertForPreTraining"),jho=o(" (BERT model)"),Dho=l(),P_=a("li"),Tte=a("strong"),Gho=o("big_bird"),Oho=o(" \u2014 "),VP=a("a"),Vho=o("BigBirdForPreTraining"),Xho=o(" (BigBird model)"),zho=l(),$_=a("li"),Mte=a("strong"),Qho=o("camembert"),Who=o(" \u2014 "),XP=a("a"),Hho=o("CamembertForMaskedLM"),Uho=o(" (CamemBERT model)"),Jho=l(),I_=a("li"),Ete=a("strong"),Yho=o("ctrl"),Kho=o(" \u2014 "),zP=a("a"),Zho=o("CTRLLMHeadModel"),epo=o(" (CTRL model)"),opo=l(),q_=a("li"),Cte=a("strong"),rpo=o("data2vec-text"),tpo=o(" \u2014 "),QP=a("a"),apo=o("Data2VecTextForMaskedLM"),npo=o(" (Data2VecText model)"),spo=l(),N_=a("li"),wte=a("strong"),lpo=o("deberta"),ipo=o(" \u2014 "),WP=a("a"),dpo=o("DebertaForMaskedLM"),cpo=o(" (DeBERTa model)"),fpo=l(),j_=a("li"),Ate=a("strong"),mpo=o("deberta-v2"),gpo=o(" \u2014 "),HP=a("a"),hpo=o("DebertaV2ForMaskedLM"),ppo=o(" (DeBERTa-v2 model)"),_po=l(),D_=a("li"),yte=a("strong"),upo=o("distilbert"),bpo=o(" \u2014 "),UP=a("a"),Fpo=o("DistilBertForMaskedLM"),vpo=o(" (DistilBERT model)"),Tpo=l(),G_=a("li"),Lte=a("strong"),Mpo=o("electra"),Epo=o(" \u2014 "),JP=a("a"),Cpo=o("ElectraForPreTraining"),wpo=o(" (ELECTRA model)"),Apo=l(),O_=a("li"),xte=a("strong"),ypo=o("flaubert"),Lpo=o(" \u2014 "),YP=a("a"),xpo=o("FlaubertWithLMHeadModel"),kpo=o(" (FlauBERT model)"),Spo=l(),V_=a("li"),kte=a("strong"),Rpo=o("fnet"),Bpo=o(" \u2014 "),KP=a("a"),Ppo=o("FNetForPreTraining"),$po=o(" (FNet model)"),Ipo=l(),X_=a("li"),Ste=a("strong"),qpo=o("fsmt"),Npo=o(" \u2014 "),ZP=a("a"),jpo=o("FSMTForConditionalGeneration"),Dpo=o(" (FairSeq Machine-Translation model)"),Gpo=l(),z_=a("li"),Rte=a("strong"),Opo=o("funnel"),Vpo=o(" \u2014 "),e$=a("a"),Xpo=o("FunnelForPreTraining"),zpo=o(" (Funnel Transformer model)"),Qpo=l(),Q_=a("li"),Bte=a("strong"),Wpo=o("gpt2"),Hpo=o(" \u2014 "),o$=a("a"),Upo=o("GPT2LMHeadModel"),Jpo=o(" (OpenAI GPT-2 model)"),Ypo=l(),W_=a("li"),Pte=a("strong"),Kpo=o("ibert"),Zpo=o(" \u2014 "),r$=a("a"),e_o=o("IBertForMaskedLM"),o_o=o(" (I-BERT model)"),r_o=l(),H_=a("li"),$te=a("strong"),t_o=o("layoutlm"),a_o=o(" \u2014 "),t$=a("a"),n_o=o("LayoutLMForMaskedLM"),s_o=o(" (LayoutLM model)"),l_o=l(),U_=a("li"),Ite=a("strong"),i_o=o("longformer"),d_o=o(" \u2014 "),a$=a("a"),c_o=o("LongformerForMaskedLM"),f_o=o(" (Longformer model)"),m_o=l(),J_=a("li"),qte=a("strong"),g_o=o("lxmert"),h_o=o(" \u2014 "),n$=a("a"),p_o=o("LxmertForPreTraining"),__o=o(" (LXMERT model)"),u_o=l(),Y_=a("li"),Nte=a("strong"),b_o=o("megatron-bert"),F_o=o(" \u2014 "),s$=a("a"),v_o=o("MegatronBertForPreTraining"),T_o=o(" (MegatronBert model)"),M_o=l(),K_=a("li"),jte=a("strong"),E_o=o("mobilebert"),C_o=o(" \u2014 "),l$=a("a"),w_o=o("MobileBertForPreTraining"),A_o=o(" (MobileBERT model)"),y_o=l(),Z_=a("li"),Dte=a("strong"),L_o=o("mpnet"),x_o=o(" \u2014 "),i$=a("a"),k_o=o("MPNetForMaskedLM"),S_o=o(" (MPNet model)"),R_o=l(),eu=a("li"),Gte=a("strong"),B_o=o("openai-gpt"),P_o=o(" \u2014 "),d$=a("a"),$_o=o("OpenAIGPTLMHeadModel"),I_o=o(" (OpenAI GPT model)"),q_o=l(),ou=a("li"),Ote=a("strong"),N_o=o("retribert"),j_o=o(" \u2014 "),c$=a("a"),D_o=o("RetriBertModel"),G_o=o(" (RetriBERT model)"),O_o=l(),ru=a("li"),Vte=a("strong"),V_o=o("roberta"),X_o=o(" \u2014 "),f$=a("a"),z_o=o("RobertaForMaskedLM"),Q_o=o(" (RoBERTa model)"),W_o=l(),tu=a("li"),Xte=a("strong"),H_o=o("squeezebert"),U_o=o(" \u2014 "),m$=a("a"),J_o=o("SqueezeBertForMaskedLM"),Y_o=o(" (SqueezeBERT model)"),K_o=l(),au=a("li"),zte=a("strong"),Z_o=o("t5"),euo=o(" \u2014 "),g$=a("a"),ouo=o("T5ForConditionalGeneration"),ruo=o(" (T5 model)"),tuo=l(),nu=a("li"),Qte=a("strong"),auo=o("tapas"),nuo=o(" \u2014 "),h$=a("a"),suo=o("TapasForMaskedLM"),luo=o(" (TAPAS model)"),iuo=l(),su=a("li"),Wte=a("strong"),duo=o("transfo-xl"),cuo=o(" \u2014 "),p$=a("a"),fuo=o("TransfoXLLMHeadModel"),muo=o(" (Transformer-XL model)"),guo=l(),lu=a("li"),Hte=a("strong"),huo=o("unispeech"),puo=o(" \u2014 "),_$=a("a"),_uo=o("UniSpeechForPreTraining"),uuo=o(" (UniSpeech model)"),buo=l(),iu=a("li"),Ute=a("strong"),Fuo=o("unispeech-sat"),vuo=o(" \u2014 "),u$=a("a"),Tuo=o("UniSpeechSatForPreTraining"),Muo=o(" (UniSpeechSat model)"),Euo=l(),du=a("li"),Jte=a("strong"),Cuo=o("visual_bert"),wuo=o(" \u2014 "),b$=a("a"),Auo=o("VisualBertForPreTraining"),yuo=o(" (VisualBert model)"),Luo=l(),cu=a("li"),Yte=a("strong"),xuo=o("vit_mae"),kuo=o(" \u2014 "),F$=a("a"),Suo=o("ViTMAEForPreTraining"),Ruo=o(" (ViTMAE model)"),Buo=l(),fu=a("li"),Kte=a("strong"),Puo=o("wav2vec2"),$uo=o(" \u2014 "),v$=a("a"),Iuo=o("Wav2Vec2ForPreTraining"),quo=o(" (Wav2Vec2 model)"),Nuo=l(),mu=a("li"),Zte=a("strong"),juo=o("xlm"),Duo=o(" \u2014 "),T$=a("a"),Guo=o("XLMWithLMHeadModel"),Ouo=o(" (XLM model)"),Vuo=l(),gu=a("li"),eae=a("strong"),Xuo=o("xlm-roberta"),zuo=o(" \u2014 "),M$=a("a"),Quo=o("XLMRobertaForMaskedLM"),Wuo=o(" (XLM-RoBERTa model)"),Huo=l(),hu=a("li"),oae=a("strong"),Uuo=o("xlm-roberta-xl"),Juo=o(" \u2014 "),E$=a("a"),Yuo=o("XLMRobertaXLForMaskedLM"),Kuo=o(" (XLM-RoBERTa-XL model)"),Zuo=l(),pu=a("li"),rae=a("strong"),e1o=o("xlnet"),o1o=o(" \u2014 "),C$=a("a"),r1o=o("XLNetLMHeadModel"),t1o=o(" (XLNet model)"),a1o=l(),_u=a("p"),n1o=o("The model is set in evaluation mode by default using "),tae=a("code"),s1o=o("model.eval()"),l1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=a("code"),i1o=o("model.train()"),d1o=l(),nae=a("p"),c1o=o("Examples:"),f1o=l(),f(iw.$$.fragment),oRe=l(),td=a("h2"),uu=a("a"),sae=a("span"),f(dw.$$.fragment),m1o=l(),lae=a("span"),g1o=o("AutoModelForCausalLM"),rRe=l(),Ko=a("div"),f(cw.$$.fragment),h1o=l(),ad=a("p"),p1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),w$=a("a"),_1o=o("from_pretrained()"),u1o=o(" class method or the "),A$=a("a"),b1o=o("from_config()"),F1o=o(` class
method.`),v1o=l(),fw=a("p"),T1o=o("This class cannot be instantiated directly using "),iae=a("code"),M1o=o("__init__()"),E1o=o(" (throws an error)."),C1o=l(),Qr=a("div"),f(mw.$$.fragment),w1o=l(),dae=a("p"),A1o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),y1o=l(),nd=a("p"),L1o=o(`Note:
Loading a model from its configuration file does `),cae=a("strong"),x1o=o("not"),k1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),y$=a("a"),S1o=o("from_pretrained()"),R1o=o(" to load the model weights."),B1o=l(),fae=a("p"),P1o=o("Examples:"),$1o=l(),f(gw.$$.fragment),I1o=l(),je=a("div"),f(hw.$$.fragment),q1o=l(),mae=a("p"),N1o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),j1o=l(),Qa=a("p"),D1o=o("The model class to instantiate is selected based on the "),gae=a("code"),G1o=o("model_type"),O1o=o(` property of the config object (either
passed as an argument or loaded from `),hae=a("code"),V1o=o("pretrained_model_name_or_path"),X1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=a("code"),z1o=o("pretrained_model_name_or_path"),Q1o=o(":"),W1o=l(),$=a("ul"),bu=a("li"),_ae=a("strong"),H1o=o("bart"),U1o=o(" \u2014 "),L$=a("a"),J1o=o("BartForCausalLM"),Y1o=o(" (BART model)"),K1o=l(),Fu=a("li"),uae=a("strong"),Z1o=o("bert"),e5o=o(" \u2014 "),x$=a("a"),o5o=o("BertLMHeadModel"),r5o=o(" (BERT model)"),t5o=l(),vu=a("li"),bae=a("strong"),a5o=o("bert-generation"),n5o=o(" \u2014 "),k$=a("a"),s5o=o("BertGenerationDecoder"),l5o=o(" (Bert Generation model)"),i5o=l(),Tu=a("li"),Fae=a("strong"),d5o=o("big_bird"),c5o=o(" \u2014 "),S$=a("a"),f5o=o("BigBirdForCausalLM"),m5o=o(" (BigBird model)"),g5o=l(),Mu=a("li"),vae=a("strong"),h5o=o("bigbird_pegasus"),p5o=o(" \u2014 "),R$=a("a"),_5o=o("BigBirdPegasusForCausalLM"),u5o=o(" (BigBirdPegasus model)"),b5o=l(),Eu=a("li"),Tae=a("strong"),F5o=o("blenderbot"),v5o=o(" \u2014 "),B$=a("a"),T5o=o("BlenderbotForCausalLM"),M5o=o(" (Blenderbot model)"),E5o=l(),Cu=a("li"),Mae=a("strong"),C5o=o("blenderbot-small"),w5o=o(" \u2014 "),P$=a("a"),A5o=o("BlenderbotSmallForCausalLM"),y5o=o(" (BlenderbotSmall model)"),L5o=l(),wu=a("li"),Eae=a("strong"),x5o=o("camembert"),k5o=o(" \u2014 "),$$=a("a"),S5o=o("CamembertForCausalLM"),R5o=o(" (CamemBERT model)"),B5o=l(),Au=a("li"),Cae=a("strong"),P5o=o("ctrl"),$5o=o(" \u2014 "),I$=a("a"),I5o=o("CTRLLMHeadModel"),q5o=o(" (CTRL model)"),N5o=l(),yu=a("li"),wae=a("strong"),j5o=o("data2vec-text"),D5o=o(" \u2014 "),q$=a("a"),G5o=o("Data2VecTextForCausalLM"),O5o=o(" (Data2VecText model)"),V5o=l(),Lu=a("li"),Aae=a("strong"),X5o=o("electra"),z5o=o(" \u2014 "),N$=a("a"),Q5o=o("ElectraForCausalLM"),W5o=o(" (ELECTRA model)"),H5o=l(),xu=a("li"),yae=a("strong"),U5o=o("gpt2"),J5o=o(" \u2014 "),j$=a("a"),Y5o=o("GPT2LMHeadModel"),K5o=o(" (OpenAI GPT-2 model)"),Z5o=l(),ku=a("li"),Lae=a("strong"),ebo=o("gpt_neo"),obo=o(" \u2014 "),D$=a("a"),rbo=o("GPTNeoForCausalLM"),tbo=o(" (GPT Neo model)"),abo=l(),Su=a("li"),xae=a("strong"),nbo=o("gptj"),sbo=o(" \u2014 "),G$=a("a"),lbo=o("GPTJForCausalLM"),ibo=o(" (GPT-J model)"),dbo=l(),Ru=a("li"),kae=a("strong"),cbo=o("marian"),fbo=o(" \u2014 "),O$=a("a"),mbo=o("MarianForCausalLM"),gbo=o(" (Marian model)"),hbo=l(),Bu=a("li"),Sae=a("strong"),pbo=o("mbart"),_bo=o(" \u2014 "),V$=a("a"),ubo=o("MBartForCausalLM"),bbo=o(" (mBART model)"),Fbo=l(),Pu=a("li"),Rae=a("strong"),vbo=o("megatron-bert"),Tbo=o(" \u2014 "),X$=a("a"),Mbo=o("MegatronBertForCausalLM"),Ebo=o(" (MegatronBert model)"),Cbo=l(),$u=a("li"),Bae=a("strong"),wbo=o("openai-gpt"),Abo=o(" \u2014 "),z$=a("a"),ybo=o("OpenAIGPTLMHeadModel"),Lbo=o(" (OpenAI GPT model)"),xbo=l(),Iu=a("li"),Pae=a("strong"),kbo=o("pegasus"),Sbo=o(" \u2014 "),Q$=a("a"),Rbo=o("PegasusForCausalLM"),Bbo=o(" (Pegasus model)"),Pbo=l(),qu=a("li"),$ae=a("strong"),$bo=o("plbart"),Ibo=o(" \u2014 "),W$=a("a"),qbo=o("PLBartForCausalLM"),Nbo=o(" (PLBart model)"),jbo=l(),Nu=a("li"),Iae=a("strong"),Dbo=o("prophetnet"),Gbo=o(" \u2014 "),H$=a("a"),Obo=o("ProphetNetForCausalLM"),Vbo=o(" (ProphetNet model)"),Xbo=l(),ju=a("li"),qae=a("strong"),zbo=o("qdqbert"),Qbo=o(" \u2014 "),U$=a("a"),Wbo=o("QDQBertLMHeadModel"),Hbo=o(" (QDQBert model)"),Ubo=l(),Du=a("li"),Nae=a("strong"),Jbo=o("reformer"),Ybo=o(" \u2014 "),J$=a("a"),Kbo=o("ReformerModelWithLMHead"),Zbo=o(" (Reformer model)"),e2o=l(),Gu=a("li"),jae=a("strong"),o2o=o("rembert"),r2o=o(" \u2014 "),Y$=a("a"),t2o=o("RemBertForCausalLM"),a2o=o(" (RemBERT model)"),n2o=l(),Ou=a("li"),Dae=a("strong"),s2o=o("roberta"),l2o=o(" \u2014 "),K$=a("a"),i2o=o("RobertaForCausalLM"),d2o=o(" (RoBERTa model)"),c2o=l(),Vu=a("li"),Gae=a("strong"),f2o=o("roformer"),m2o=o(" \u2014 "),Z$=a("a"),g2o=o("RoFormerForCausalLM"),h2o=o(" (RoFormer model)"),p2o=l(),Xu=a("li"),Oae=a("strong"),_2o=o("speech_to_text_2"),u2o=o(" \u2014 "),eI=a("a"),b2o=o("Speech2Text2ForCausalLM"),F2o=o(" (Speech2Text2 model)"),v2o=l(),zu=a("li"),Vae=a("strong"),T2o=o("transfo-xl"),M2o=o(" \u2014 "),oI=a("a"),E2o=o("TransfoXLLMHeadModel"),C2o=o(" (Transformer-XL model)"),w2o=l(),Qu=a("li"),Xae=a("strong"),A2o=o("trocr"),y2o=o(" \u2014 "),rI=a("a"),L2o=o("TrOCRForCausalLM"),x2o=o(" (TrOCR model)"),k2o=l(),Wu=a("li"),zae=a("strong"),S2o=o("xglm"),R2o=o(" \u2014 "),tI=a("a"),B2o=o("XGLMForCausalLM"),P2o=o(" (XGLM model)"),$2o=l(),Hu=a("li"),Qae=a("strong"),I2o=o("xlm"),q2o=o(" \u2014 "),aI=a("a"),N2o=o("XLMWithLMHeadModel"),j2o=o(" (XLM model)"),D2o=l(),Uu=a("li"),Wae=a("strong"),G2o=o("xlm-prophetnet"),O2o=o(" \u2014 "),nI=a("a"),V2o=o("XLMProphetNetForCausalLM"),X2o=o(" (XLMProphetNet model)"),z2o=l(),Ju=a("li"),Hae=a("strong"),Q2o=o("xlm-roberta"),W2o=o(" \u2014 "),sI=a("a"),H2o=o("XLMRobertaForCausalLM"),U2o=o(" (XLM-RoBERTa model)"),J2o=l(),Yu=a("li"),Uae=a("strong"),Y2o=o("xlm-roberta-xl"),K2o=o(" \u2014 "),lI=a("a"),Z2o=o("XLMRobertaXLForCausalLM"),eFo=o(" (XLM-RoBERTa-XL model)"),oFo=l(),Ku=a("li"),Jae=a("strong"),rFo=o("xlnet"),tFo=o(" \u2014 "),iI=a("a"),aFo=o("XLNetLMHeadModel"),nFo=o(" (XLNet model)"),sFo=l(),Zu=a("p"),lFo=o("The model is set in evaluation mode by default using "),Yae=a("code"),iFo=o("model.eval()"),dFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=a("code"),cFo=o("model.train()"),fFo=l(),Zae=a("p"),mFo=o("Examples:"),gFo=l(),f(pw.$$.fragment),tRe=l(),sd=a("h2"),e1=a("a"),ene=a("span"),f(_w.$$.fragment),hFo=l(),one=a("span"),pFo=o("AutoModelForMaskedLM"),aRe=l(),Zo=a("div"),f(uw.$$.fragment),_Fo=l(),ld=a("p"),uFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dI=a("a"),bFo=o("from_pretrained()"),FFo=o(" class method or the "),cI=a("a"),vFo=o("from_config()"),TFo=o(` class
method.`),MFo=l(),bw=a("p"),EFo=o("This class cannot be instantiated directly using "),rne=a("code"),CFo=o("__init__()"),wFo=o(" (throws an error)."),AFo=l(),Wr=a("div"),f(Fw.$$.fragment),yFo=l(),tne=a("p"),LFo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),xFo=l(),id=a("p"),kFo=o(`Note:
Loading a model from its configuration file does `),ane=a("strong"),SFo=o("not"),RFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=a("a"),BFo=o("from_pretrained()"),PFo=o(" to load the model weights."),$Fo=l(),nne=a("p"),IFo=o("Examples:"),qFo=l(),f(vw.$$.fragment),NFo=l(),De=a("div"),f(Tw.$$.fragment),jFo=l(),sne=a("p"),DFo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),GFo=l(),Wa=a("p"),OFo=o("The model class to instantiate is selected based on the "),lne=a("code"),VFo=o("model_type"),XFo=o(` property of the config object (either
passed as an argument or loaded from `),ine=a("code"),zFo=o("pretrained_model_name_or_path"),QFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=a("code"),WFo=o("pretrained_model_name_or_path"),HFo=o(":"),UFo=l(),I=a("ul"),o1=a("li"),cne=a("strong"),JFo=o("albert"),YFo=o(" \u2014 "),mI=a("a"),KFo=o("AlbertForMaskedLM"),ZFo=o(" (ALBERT model)"),evo=l(),r1=a("li"),fne=a("strong"),ovo=o("bart"),rvo=o(" \u2014 "),gI=a("a"),tvo=o("BartForConditionalGeneration"),avo=o(" (BART model)"),nvo=l(),t1=a("li"),mne=a("strong"),svo=o("bert"),lvo=o(" \u2014 "),hI=a("a"),ivo=o("BertForMaskedLM"),dvo=o(" (BERT model)"),cvo=l(),a1=a("li"),gne=a("strong"),fvo=o("big_bird"),mvo=o(" \u2014 "),pI=a("a"),gvo=o("BigBirdForMaskedLM"),hvo=o(" (BigBird model)"),pvo=l(),n1=a("li"),hne=a("strong"),_vo=o("camembert"),uvo=o(" \u2014 "),_I=a("a"),bvo=o("CamembertForMaskedLM"),Fvo=o(" (CamemBERT model)"),vvo=l(),s1=a("li"),pne=a("strong"),Tvo=o("convbert"),Mvo=o(" \u2014 "),uI=a("a"),Evo=o("ConvBertForMaskedLM"),Cvo=o(" (ConvBERT model)"),wvo=l(),l1=a("li"),_ne=a("strong"),Avo=o("data2vec-text"),yvo=o(" \u2014 "),bI=a("a"),Lvo=o("Data2VecTextForMaskedLM"),xvo=o(" (Data2VecText model)"),kvo=l(),i1=a("li"),une=a("strong"),Svo=o("deberta"),Rvo=o(" \u2014 "),FI=a("a"),Bvo=o("DebertaForMaskedLM"),Pvo=o(" (DeBERTa model)"),$vo=l(),d1=a("li"),bne=a("strong"),Ivo=o("deberta-v2"),qvo=o(" \u2014 "),vI=a("a"),Nvo=o("DebertaV2ForMaskedLM"),jvo=o(" (DeBERTa-v2 model)"),Dvo=l(),c1=a("li"),Fne=a("strong"),Gvo=o("distilbert"),Ovo=o(" \u2014 "),TI=a("a"),Vvo=o("DistilBertForMaskedLM"),Xvo=o(" (DistilBERT model)"),zvo=l(),f1=a("li"),vne=a("strong"),Qvo=o("electra"),Wvo=o(" \u2014 "),MI=a("a"),Hvo=o("ElectraForMaskedLM"),Uvo=o(" (ELECTRA model)"),Jvo=l(),m1=a("li"),Tne=a("strong"),Yvo=o("flaubert"),Kvo=o(" \u2014 "),EI=a("a"),Zvo=o("FlaubertWithLMHeadModel"),e6o=o(" (FlauBERT model)"),o6o=l(),g1=a("li"),Mne=a("strong"),r6o=o("fnet"),t6o=o(" \u2014 "),CI=a("a"),a6o=o("FNetForMaskedLM"),n6o=o(" (FNet model)"),s6o=l(),h1=a("li"),Ene=a("strong"),l6o=o("funnel"),i6o=o(" \u2014 "),wI=a("a"),d6o=o("FunnelForMaskedLM"),c6o=o(" (Funnel Transformer model)"),f6o=l(),p1=a("li"),Cne=a("strong"),m6o=o("ibert"),g6o=o(" \u2014 "),AI=a("a"),h6o=o("IBertForMaskedLM"),p6o=o(" (I-BERT model)"),_6o=l(),_1=a("li"),wne=a("strong"),u6o=o("layoutlm"),b6o=o(" \u2014 "),yI=a("a"),F6o=o("LayoutLMForMaskedLM"),v6o=o(" (LayoutLM model)"),T6o=l(),u1=a("li"),Ane=a("strong"),M6o=o("longformer"),E6o=o(" \u2014 "),LI=a("a"),C6o=o("LongformerForMaskedLM"),w6o=o(" (Longformer model)"),A6o=l(),b1=a("li"),yne=a("strong"),y6o=o("mbart"),L6o=o(" \u2014 "),xI=a("a"),x6o=o("MBartForConditionalGeneration"),k6o=o(" (mBART model)"),S6o=l(),F1=a("li"),Lne=a("strong"),R6o=o("megatron-bert"),B6o=o(" \u2014 "),kI=a("a"),P6o=o("MegatronBertForMaskedLM"),$6o=o(" (MegatronBert model)"),I6o=l(),v1=a("li"),xne=a("strong"),q6o=o("mobilebert"),N6o=o(" \u2014 "),SI=a("a"),j6o=o("MobileBertForMaskedLM"),D6o=o(" (MobileBERT model)"),G6o=l(),T1=a("li"),kne=a("strong"),O6o=o("mpnet"),V6o=o(" \u2014 "),RI=a("a"),X6o=o("MPNetForMaskedLM"),z6o=o(" (MPNet model)"),Q6o=l(),M1=a("li"),Sne=a("strong"),W6o=o("nystromformer"),H6o=o(" \u2014 "),BI=a("a"),U6o=o("NystromformerForMaskedLM"),J6o=o(" (Nystromformer model)"),Y6o=l(),E1=a("li"),Rne=a("strong"),K6o=o("perceiver"),Z6o=o(" \u2014 "),PI=a("a"),eTo=o("PerceiverForMaskedLM"),oTo=o(" (Perceiver model)"),rTo=l(),C1=a("li"),Bne=a("strong"),tTo=o("qdqbert"),aTo=o(" \u2014 "),$I=a("a"),nTo=o("QDQBertForMaskedLM"),sTo=o(" (QDQBert model)"),lTo=l(),w1=a("li"),Pne=a("strong"),iTo=o("reformer"),dTo=o(" \u2014 "),II=a("a"),cTo=o("ReformerForMaskedLM"),fTo=o(" (Reformer model)"),mTo=l(),A1=a("li"),$ne=a("strong"),gTo=o("rembert"),hTo=o(" \u2014 "),qI=a("a"),pTo=o("RemBertForMaskedLM"),_To=o(" (RemBERT model)"),uTo=l(),y1=a("li"),Ine=a("strong"),bTo=o("roberta"),FTo=o(" \u2014 "),NI=a("a"),vTo=o("RobertaForMaskedLM"),TTo=o(" (RoBERTa model)"),MTo=l(),L1=a("li"),qne=a("strong"),ETo=o("roformer"),CTo=o(" \u2014 "),jI=a("a"),wTo=o("RoFormerForMaskedLM"),ATo=o(" (RoFormer model)"),yTo=l(),x1=a("li"),Nne=a("strong"),LTo=o("squeezebert"),xTo=o(" \u2014 "),DI=a("a"),kTo=o("SqueezeBertForMaskedLM"),STo=o(" (SqueezeBERT model)"),RTo=l(),k1=a("li"),jne=a("strong"),BTo=o("tapas"),PTo=o(" \u2014 "),GI=a("a"),$To=o("TapasForMaskedLM"),ITo=o(" (TAPAS model)"),qTo=l(),S1=a("li"),Dne=a("strong"),NTo=o("wav2vec2"),jTo=o(" \u2014 "),Gne=a("code"),DTo=o("Wav2Vec2ForMaskedLM"),GTo=o("(Wav2Vec2 model)"),OTo=l(),R1=a("li"),One=a("strong"),VTo=o("xlm"),XTo=o(" \u2014 "),OI=a("a"),zTo=o("XLMWithLMHeadModel"),QTo=o(" (XLM model)"),WTo=l(),B1=a("li"),Vne=a("strong"),HTo=o("xlm-roberta"),UTo=o(" \u2014 "),VI=a("a"),JTo=o("XLMRobertaForMaskedLM"),YTo=o(" (XLM-RoBERTa model)"),KTo=l(),P1=a("li"),Xne=a("strong"),ZTo=o("xlm-roberta-xl"),eMo=o(" \u2014 "),XI=a("a"),oMo=o("XLMRobertaXLForMaskedLM"),rMo=o(" (XLM-RoBERTa-XL model)"),tMo=l(),$1=a("li"),zne=a("strong"),aMo=o("yoso"),nMo=o(" \u2014 "),zI=a("a"),sMo=o("YosoForMaskedLM"),lMo=o(" (YOSO model)"),iMo=l(),I1=a("p"),dMo=o("The model is set in evaluation mode by default using "),Qne=a("code"),cMo=o("model.eval()"),fMo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=a("code"),mMo=o("model.train()"),gMo=l(),Hne=a("p"),hMo=o("Examples:"),pMo=l(),f(Mw.$$.fragment),nRe=l(),dd=a("h2"),q1=a("a"),Une=a("span"),f(Ew.$$.fragment),_Mo=l(),Jne=a("span"),uMo=o("AutoModelForSeq2SeqLM"),sRe=l(),er=a("div"),f(Cw.$$.fragment),bMo=l(),cd=a("p"),FMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QI=a("a"),vMo=o("from_pretrained()"),TMo=o(" class method or the "),WI=a("a"),MMo=o("from_config()"),EMo=o(` class
method.`),CMo=l(),ww=a("p"),wMo=o("This class cannot be instantiated directly using "),Yne=a("code"),AMo=o("__init__()"),yMo=o(" (throws an error)."),LMo=l(),Hr=a("div"),f(Aw.$$.fragment),xMo=l(),Kne=a("p"),kMo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SMo=l(),fd=a("p"),RMo=o(`Note:
Loading a model from its configuration file does `),Zne=a("strong"),BMo=o("not"),PMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=a("a"),$Mo=o("from_pretrained()"),IMo=o(" to load the model weights."),qMo=l(),ese=a("p"),NMo=o("Examples:"),jMo=l(),f(yw.$$.fragment),DMo=l(),Ge=a("div"),f(Lw.$$.fragment),GMo=l(),ose=a("p"),OMo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),VMo=l(),Ha=a("p"),XMo=o("The model class to instantiate is selected based on the "),rse=a("code"),zMo=o("model_type"),QMo=o(` property of the config object (either
passed as an argument or loaded from `),tse=a("code"),WMo=o("pretrained_model_name_or_path"),HMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=a("code"),UMo=o("pretrained_model_name_or_path"),JMo=o(":"),YMo=l(),se=a("ul"),N1=a("li"),nse=a("strong"),KMo=o("bart"),ZMo=o(" \u2014 "),UI=a("a"),e4o=o("BartForConditionalGeneration"),o4o=o(" (BART model)"),r4o=l(),j1=a("li"),sse=a("strong"),t4o=o("bigbird_pegasus"),a4o=o(" \u2014 "),JI=a("a"),n4o=o("BigBirdPegasusForConditionalGeneration"),s4o=o(" (BigBirdPegasus model)"),l4o=l(),D1=a("li"),lse=a("strong"),i4o=o("blenderbot"),d4o=o(" \u2014 "),YI=a("a"),c4o=o("BlenderbotForConditionalGeneration"),f4o=o(" (Blenderbot model)"),m4o=l(),G1=a("li"),ise=a("strong"),g4o=o("blenderbot-small"),h4o=o(" \u2014 "),KI=a("a"),p4o=o("BlenderbotSmallForConditionalGeneration"),_4o=o(" (BlenderbotSmall model)"),u4o=l(),O1=a("li"),dse=a("strong"),b4o=o("encoder-decoder"),F4o=o(" \u2014 "),ZI=a("a"),v4o=o("EncoderDecoderModel"),T4o=o(" (Encoder decoder model)"),M4o=l(),V1=a("li"),cse=a("strong"),E4o=o("fsmt"),C4o=o(" \u2014 "),eq=a("a"),w4o=o("FSMTForConditionalGeneration"),A4o=o(" (FairSeq Machine-Translation model)"),y4o=l(),X1=a("li"),fse=a("strong"),L4o=o("led"),x4o=o(" \u2014 "),oq=a("a"),k4o=o("LEDForConditionalGeneration"),S4o=o(" (LED model)"),R4o=l(),z1=a("li"),mse=a("strong"),B4o=o("m2m_100"),P4o=o(" \u2014 "),rq=a("a"),$4o=o("M2M100ForConditionalGeneration"),I4o=o(" (M2M100 model)"),q4o=l(),Q1=a("li"),gse=a("strong"),N4o=o("marian"),j4o=o(" \u2014 "),tq=a("a"),D4o=o("MarianMTModel"),G4o=o(" (Marian model)"),O4o=l(),W1=a("li"),hse=a("strong"),V4o=o("mbart"),X4o=o(" \u2014 "),aq=a("a"),z4o=o("MBartForConditionalGeneration"),Q4o=o(" (mBART model)"),W4o=l(),H1=a("li"),pse=a("strong"),H4o=o("mt5"),U4o=o(" \u2014 "),nq=a("a"),J4o=o("MT5ForConditionalGeneration"),Y4o=o(" (mT5 model)"),K4o=l(),U1=a("li"),_se=a("strong"),Z4o=o("pegasus"),eEo=o(" \u2014 "),sq=a("a"),oEo=o("PegasusForConditionalGeneration"),rEo=o(" (Pegasus model)"),tEo=l(),J1=a("li"),use=a("strong"),aEo=o("plbart"),nEo=o(" \u2014 "),lq=a("a"),sEo=o("PLBartForConditionalGeneration"),lEo=o(" (PLBart model)"),iEo=l(),Y1=a("li"),bse=a("strong"),dEo=o("prophetnet"),cEo=o(" \u2014 "),iq=a("a"),fEo=o("ProphetNetForConditionalGeneration"),mEo=o(" (ProphetNet model)"),gEo=l(),K1=a("li"),Fse=a("strong"),hEo=o("t5"),pEo=o(" \u2014 "),dq=a("a"),_Eo=o("T5ForConditionalGeneration"),uEo=o(" (T5 model)"),bEo=l(),Z1=a("li"),vse=a("strong"),FEo=o("xlm-prophetnet"),vEo=o(" \u2014 "),cq=a("a"),TEo=o("XLMProphetNetForConditionalGeneration"),MEo=o(" (XLMProphetNet model)"),EEo=l(),e5=a("p"),CEo=o("The model is set in evaluation mode by default using "),Tse=a("code"),wEo=o("model.eval()"),AEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=a("code"),yEo=o("model.train()"),LEo=l(),Ese=a("p"),xEo=o("Examples:"),kEo=l(),f(xw.$$.fragment),lRe=l(),md=a("h2"),o5=a("a"),Cse=a("span"),f(kw.$$.fragment),SEo=l(),wse=a("span"),REo=o("AutoModelForSequenceClassification"),iRe=l(),or=a("div"),f(Sw.$$.fragment),BEo=l(),gd=a("p"),PEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fq=a("a"),$Eo=o("from_pretrained()"),IEo=o(" class method or the "),mq=a("a"),qEo=o("from_config()"),NEo=o(` class
method.`),jEo=l(),Rw=a("p"),DEo=o("This class cannot be instantiated directly using "),Ase=a("code"),GEo=o("__init__()"),OEo=o(" (throws an error)."),VEo=l(),Ur=a("div"),f(Bw.$$.fragment),XEo=l(),yse=a("p"),zEo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),QEo=l(),hd=a("p"),WEo=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),HEo=o("not"),UEo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=a("a"),JEo=o("from_pretrained()"),YEo=o(" to load the model weights."),KEo=l(),xse=a("p"),ZEo=o("Examples:"),eCo=l(),f(Pw.$$.fragment),oCo=l(),Oe=a("div"),f($w.$$.fragment),rCo=l(),kse=a("p"),tCo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),aCo=l(),Ua=a("p"),nCo=o("The model class to instantiate is selected based on the "),Sse=a("code"),sCo=o("model_type"),lCo=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),iCo=o("pretrained_model_name_or_path"),dCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),cCo=o("pretrained_model_name_or_path"),fCo=o(":"),mCo=l(),y=a("ul"),r5=a("li"),Pse=a("strong"),gCo=o("albert"),hCo=o(" \u2014 "),hq=a("a"),pCo=o("AlbertForSequenceClassification"),_Co=o(" (ALBERT model)"),uCo=l(),t5=a("li"),$se=a("strong"),bCo=o("bart"),FCo=o(" \u2014 "),pq=a("a"),vCo=o("BartForSequenceClassification"),TCo=o(" (BART model)"),MCo=l(),a5=a("li"),Ise=a("strong"),ECo=o("bert"),CCo=o(" \u2014 "),_q=a("a"),wCo=o("BertForSequenceClassification"),ACo=o(" (BERT model)"),yCo=l(),n5=a("li"),qse=a("strong"),LCo=o("big_bird"),xCo=o(" \u2014 "),uq=a("a"),kCo=o("BigBirdForSequenceClassification"),SCo=o(" (BigBird model)"),RCo=l(),s5=a("li"),Nse=a("strong"),BCo=o("bigbird_pegasus"),PCo=o(" \u2014 "),bq=a("a"),$Co=o("BigBirdPegasusForSequenceClassification"),ICo=o(" (BigBirdPegasus model)"),qCo=l(),l5=a("li"),jse=a("strong"),NCo=o("camembert"),jCo=o(" \u2014 "),Fq=a("a"),DCo=o("CamembertForSequenceClassification"),GCo=o(" (CamemBERT model)"),OCo=l(),i5=a("li"),Dse=a("strong"),VCo=o("canine"),XCo=o(" \u2014 "),vq=a("a"),zCo=o("CanineForSequenceClassification"),QCo=o(" (Canine model)"),WCo=l(),d5=a("li"),Gse=a("strong"),HCo=o("convbert"),UCo=o(" \u2014 "),Tq=a("a"),JCo=o("ConvBertForSequenceClassification"),YCo=o(" (ConvBERT model)"),KCo=l(),c5=a("li"),Ose=a("strong"),ZCo=o("ctrl"),e3o=o(" \u2014 "),Mq=a("a"),o3o=o("CTRLForSequenceClassification"),r3o=o(" (CTRL model)"),t3o=l(),f5=a("li"),Vse=a("strong"),a3o=o("data2vec-text"),n3o=o(" \u2014 "),Eq=a("a"),s3o=o("Data2VecTextForSequenceClassification"),l3o=o(" (Data2VecText model)"),i3o=l(),m5=a("li"),Xse=a("strong"),d3o=o("deberta"),c3o=o(" \u2014 "),Cq=a("a"),f3o=o("DebertaForSequenceClassification"),m3o=o(" (DeBERTa model)"),g3o=l(),g5=a("li"),zse=a("strong"),h3o=o("deberta-v2"),p3o=o(" \u2014 "),wq=a("a"),_3o=o("DebertaV2ForSequenceClassification"),u3o=o(" (DeBERTa-v2 model)"),b3o=l(),h5=a("li"),Qse=a("strong"),F3o=o("distilbert"),v3o=o(" \u2014 "),Aq=a("a"),T3o=o("DistilBertForSequenceClassification"),M3o=o(" (DistilBERT model)"),E3o=l(),p5=a("li"),Wse=a("strong"),C3o=o("electra"),w3o=o(" \u2014 "),yq=a("a"),A3o=o("ElectraForSequenceClassification"),y3o=o(" (ELECTRA model)"),L3o=l(),_5=a("li"),Hse=a("strong"),x3o=o("flaubert"),k3o=o(" \u2014 "),Lq=a("a"),S3o=o("FlaubertForSequenceClassification"),R3o=o(" (FlauBERT model)"),B3o=l(),u5=a("li"),Use=a("strong"),P3o=o("fnet"),$3o=o(" \u2014 "),xq=a("a"),I3o=o("FNetForSequenceClassification"),q3o=o(" (FNet model)"),N3o=l(),b5=a("li"),Jse=a("strong"),j3o=o("funnel"),D3o=o(" \u2014 "),kq=a("a"),G3o=o("FunnelForSequenceClassification"),O3o=o(" (Funnel Transformer model)"),V3o=l(),F5=a("li"),Yse=a("strong"),X3o=o("gpt2"),z3o=o(" \u2014 "),Sq=a("a"),Q3o=o("GPT2ForSequenceClassification"),W3o=o(" (OpenAI GPT-2 model)"),H3o=l(),v5=a("li"),Kse=a("strong"),U3o=o("gpt_neo"),J3o=o(" \u2014 "),Rq=a("a"),Y3o=o("GPTNeoForSequenceClassification"),K3o=o(" (GPT Neo model)"),Z3o=l(),T5=a("li"),Zse=a("strong"),ewo=o("gptj"),owo=o(" \u2014 "),Bq=a("a"),rwo=o("GPTJForSequenceClassification"),two=o(" (GPT-J model)"),awo=l(),M5=a("li"),ele=a("strong"),nwo=o("ibert"),swo=o(" \u2014 "),Pq=a("a"),lwo=o("IBertForSequenceClassification"),iwo=o(" (I-BERT model)"),dwo=l(),E5=a("li"),ole=a("strong"),cwo=o("layoutlm"),fwo=o(" \u2014 "),$q=a("a"),mwo=o("LayoutLMForSequenceClassification"),gwo=o(" (LayoutLM model)"),hwo=l(),C5=a("li"),rle=a("strong"),pwo=o("layoutlmv2"),_wo=o(" \u2014 "),Iq=a("a"),uwo=o("LayoutLMv2ForSequenceClassification"),bwo=o(" (LayoutLMv2 model)"),Fwo=l(),w5=a("li"),tle=a("strong"),vwo=o("led"),Two=o(" \u2014 "),qq=a("a"),Mwo=o("LEDForSequenceClassification"),Ewo=o(" (LED model)"),Cwo=l(),A5=a("li"),ale=a("strong"),wwo=o("longformer"),Awo=o(" \u2014 "),Nq=a("a"),ywo=o("LongformerForSequenceClassification"),Lwo=o(" (Longformer model)"),xwo=l(),y5=a("li"),nle=a("strong"),kwo=o("mbart"),Swo=o(" \u2014 "),jq=a("a"),Rwo=o("MBartForSequenceClassification"),Bwo=o(" (mBART model)"),Pwo=l(),L5=a("li"),sle=a("strong"),$wo=o("megatron-bert"),Iwo=o(" \u2014 "),Dq=a("a"),qwo=o("MegatronBertForSequenceClassification"),Nwo=o(" (MegatronBert model)"),jwo=l(),x5=a("li"),lle=a("strong"),Dwo=o("mobilebert"),Gwo=o(" \u2014 "),Gq=a("a"),Owo=o("MobileBertForSequenceClassification"),Vwo=o(" (MobileBERT model)"),Xwo=l(),k5=a("li"),ile=a("strong"),zwo=o("mpnet"),Qwo=o(" \u2014 "),Oq=a("a"),Wwo=o("MPNetForSequenceClassification"),Hwo=o(" (MPNet model)"),Uwo=l(),S5=a("li"),dle=a("strong"),Jwo=o("nystromformer"),Ywo=o(" \u2014 "),Vq=a("a"),Kwo=o("NystromformerForSequenceClassification"),Zwo=o(" (Nystromformer model)"),eAo=l(),R5=a("li"),cle=a("strong"),oAo=o("openai-gpt"),rAo=o(" \u2014 "),Xq=a("a"),tAo=o("OpenAIGPTForSequenceClassification"),aAo=o(" (OpenAI GPT model)"),nAo=l(),B5=a("li"),fle=a("strong"),sAo=o("perceiver"),lAo=o(" \u2014 "),zq=a("a"),iAo=o("PerceiverForSequenceClassification"),dAo=o(" (Perceiver model)"),cAo=l(),P5=a("li"),mle=a("strong"),fAo=o("plbart"),mAo=o(" \u2014 "),Qq=a("a"),gAo=o("PLBartForSequenceClassification"),hAo=o(" (PLBart model)"),pAo=l(),$5=a("li"),gle=a("strong"),_Ao=o("qdqbert"),uAo=o(" \u2014 "),Wq=a("a"),bAo=o("QDQBertForSequenceClassification"),FAo=o(" (QDQBert model)"),vAo=l(),I5=a("li"),hle=a("strong"),TAo=o("reformer"),MAo=o(" \u2014 "),Hq=a("a"),EAo=o("ReformerForSequenceClassification"),CAo=o(" (Reformer model)"),wAo=l(),q5=a("li"),ple=a("strong"),AAo=o("rembert"),yAo=o(" \u2014 "),Uq=a("a"),LAo=o("RemBertForSequenceClassification"),xAo=o(" (RemBERT model)"),kAo=l(),N5=a("li"),_le=a("strong"),SAo=o("roberta"),RAo=o(" \u2014 "),Jq=a("a"),BAo=o("RobertaForSequenceClassification"),PAo=o(" (RoBERTa model)"),$Ao=l(),j5=a("li"),ule=a("strong"),IAo=o("roformer"),qAo=o(" \u2014 "),Yq=a("a"),NAo=o("RoFormerForSequenceClassification"),jAo=o(" (RoFormer model)"),DAo=l(),D5=a("li"),ble=a("strong"),GAo=o("squeezebert"),OAo=o(" \u2014 "),Kq=a("a"),VAo=o("SqueezeBertForSequenceClassification"),XAo=o(" (SqueezeBERT model)"),zAo=l(),G5=a("li"),Fle=a("strong"),QAo=o("tapas"),WAo=o(" \u2014 "),Zq=a("a"),HAo=o("TapasForSequenceClassification"),UAo=o(" (TAPAS model)"),JAo=l(),O5=a("li"),vle=a("strong"),YAo=o("transfo-xl"),KAo=o(" \u2014 "),eN=a("a"),ZAo=o("TransfoXLForSequenceClassification"),e0o=o(" (Transformer-XL model)"),o0o=l(),V5=a("li"),Tle=a("strong"),r0o=o("xlm"),t0o=o(" \u2014 "),oN=a("a"),a0o=o("XLMForSequenceClassification"),n0o=o(" (XLM model)"),s0o=l(),X5=a("li"),Mle=a("strong"),l0o=o("xlm-roberta"),i0o=o(" \u2014 "),rN=a("a"),d0o=o("XLMRobertaForSequenceClassification"),c0o=o(" (XLM-RoBERTa model)"),f0o=l(),z5=a("li"),Ele=a("strong"),m0o=o("xlm-roberta-xl"),g0o=o(" \u2014 "),tN=a("a"),h0o=o("XLMRobertaXLForSequenceClassification"),p0o=o(" (XLM-RoBERTa-XL model)"),_0o=l(),Q5=a("li"),Cle=a("strong"),u0o=o("xlnet"),b0o=o(" \u2014 "),aN=a("a"),F0o=o("XLNetForSequenceClassification"),v0o=o(" (XLNet model)"),T0o=l(),W5=a("li"),wle=a("strong"),M0o=o("yoso"),E0o=o(" \u2014 "),nN=a("a"),C0o=o("YosoForSequenceClassification"),w0o=o(" (YOSO model)"),A0o=l(),H5=a("p"),y0o=o("The model is set in evaluation mode by default using "),Ale=a("code"),L0o=o("model.eval()"),x0o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=a("code"),k0o=o("model.train()"),S0o=l(),Lle=a("p"),R0o=o("Examples:"),B0o=l(),f(Iw.$$.fragment),dRe=l(),pd=a("h2"),U5=a("a"),xle=a("span"),f(qw.$$.fragment),P0o=l(),kle=a("span"),$0o=o("AutoModelForMultipleChoice"),cRe=l(),rr=a("div"),f(Nw.$$.fragment),I0o=l(),_d=a("p"),q0o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sN=a("a"),N0o=o("from_pretrained()"),j0o=o(" class method or the "),lN=a("a"),D0o=o("from_config()"),G0o=o(` class
method.`),O0o=l(),jw=a("p"),V0o=o("This class cannot be instantiated directly using "),Sle=a("code"),X0o=o("__init__()"),z0o=o(" (throws an error)."),Q0o=l(),Jr=a("div"),f(Dw.$$.fragment),W0o=l(),Rle=a("p"),H0o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U0o=l(),ud=a("p"),J0o=o(`Note:
Loading a model from its configuration file does `),Ble=a("strong"),Y0o=o("not"),K0o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=a("a"),Z0o=o("from_pretrained()"),eyo=o(" to load the model weights."),oyo=l(),Ple=a("p"),ryo=o("Examples:"),tyo=l(),f(Gw.$$.fragment),ayo=l(),Ve=a("div"),f(Ow.$$.fragment),nyo=l(),$le=a("p"),syo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),lyo=l(),Ja=a("p"),iyo=o("The model class to instantiate is selected based on the "),Ile=a("code"),dyo=o("model_type"),cyo=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),fyo=o("pretrained_model_name_or_path"),myo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nle=a("code"),gyo=o("pretrained_model_name_or_path"),hyo=o(":"),pyo=l(),G=a("ul"),J5=a("li"),jle=a("strong"),_yo=o("albert"),uyo=o(" \u2014 "),dN=a("a"),byo=o("AlbertForMultipleChoice"),Fyo=o(" (ALBERT model)"),vyo=l(),Y5=a("li"),Dle=a("strong"),Tyo=o("bert"),Myo=o(" \u2014 "),cN=a("a"),Eyo=o("BertForMultipleChoice"),Cyo=o(" (BERT model)"),wyo=l(),K5=a("li"),Gle=a("strong"),Ayo=o("big_bird"),yyo=o(" \u2014 "),fN=a("a"),Lyo=o("BigBirdForMultipleChoice"),xyo=o(" (BigBird model)"),kyo=l(),Z5=a("li"),Ole=a("strong"),Syo=o("camembert"),Ryo=o(" \u2014 "),mN=a("a"),Byo=o("CamembertForMultipleChoice"),Pyo=o(" (CamemBERT model)"),$yo=l(),eb=a("li"),Vle=a("strong"),Iyo=o("canine"),qyo=o(" \u2014 "),gN=a("a"),Nyo=o("CanineForMultipleChoice"),jyo=o(" (Canine model)"),Dyo=l(),ob=a("li"),Xle=a("strong"),Gyo=o("convbert"),Oyo=o(" \u2014 "),hN=a("a"),Vyo=o("ConvBertForMultipleChoice"),Xyo=o(" (ConvBERT model)"),zyo=l(),rb=a("li"),zle=a("strong"),Qyo=o("data2vec-text"),Wyo=o(" \u2014 "),pN=a("a"),Hyo=o("Data2VecTextForMultipleChoice"),Uyo=o(" (Data2VecText model)"),Jyo=l(),tb=a("li"),Qle=a("strong"),Yyo=o("distilbert"),Kyo=o(" \u2014 "),_N=a("a"),Zyo=o("DistilBertForMultipleChoice"),eLo=o(" (DistilBERT model)"),oLo=l(),ab=a("li"),Wle=a("strong"),rLo=o("electra"),tLo=o(" \u2014 "),uN=a("a"),aLo=o("ElectraForMultipleChoice"),nLo=o(" (ELECTRA model)"),sLo=l(),nb=a("li"),Hle=a("strong"),lLo=o("flaubert"),iLo=o(" \u2014 "),bN=a("a"),dLo=o("FlaubertForMultipleChoice"),cLo=o(" (FlauBERT model)"),fLo=l(),sb=a("li"),Ule=a("strong"),mLo=o("fnet"),gLo=o(" \u2014 "),FN=a("a"),hLo=o("FNetForMultipleChoice"),pLo=o(" (FNet model)"),_Lo=l(),lb=a("li"),Jle=a("strong"),uLo=o("funnel"),bLo=o(" \u2014 "),vN=a("a"),FLo=o("FunnelForMultipleChoice"),vLo=o(" (Funnel Transformer model)"),TLo=l(),ib=a("li"),Yle=a("strong"),MLo=o("ibert"),ELo=o(" \u2014 "),TN=a("a"),CLo=o("IBertForMultipleChoice"),wLo=o(" (I-BERT model)"),ALo=l(),db=a("li"),Kle=a("strong"),yLo=o("longformer"),LLo=o(" \u2014 "),MN=a("a"),xLo=o("LongformerForMultipleChoice"),kLo=o(" (Longformer model)"),SLo=l(),cb=a("li"),Zle=a("strong"),RLo=o("megatron-bert"),BLo=o(" \u2014 "),EN=a("a"),PLo=o("MegatronBertForMultipleChoice"),$Lo=o(" (MegatronBert model)"),ILo=l(),fb=a("li"),eie=a("strong"),qLo=o("mobilebert"),NLo=o(" \u2014 "),CN=a("a"),jLo=o("MobileBertForMultipleChoice"),DLo=o(" (MobileBERT model)"),GLo=l(),mb=a("li"),oie=a("strong"),OLo=o("mpnet"),VLo=o(" \u2014 "),wN=a("a"),XLo=o("MPNetForMultipleChoice"),zLo=o(" (MPNet model)"),QLo=l(),gb=a("li"),rie=a("strong"),WLo=o("nystromformer"),HLo=o(" \u2014 "),AN=a("a"),ULo=o("NystromformerForMultipleChoice"),JLo=o(" (Nystromformer model)"),YLo=l(),hb=a("li"),tie=a("strong"),KLo=o("qdqbert"),ZLo=o(" \u2014 "),yN=a("a"),e8o=o("QDQBertForMultipleChoice"),o8o=o(" (QDQBert model)"),r8o=l(),pb=a("li"),aie=a("strong"),t8o=o("rembert"),a8o=o(" \u2014 "),LN=a("a"),n8o=o("RemBertForMultipleChoice"),s8o=o(" (RemBERT model)"),l8o=l(),_b=a("li"),nie=a("strong"),i8o=o("roberta"),d8o=o(" \u2014 "),xN=a("a"),c8o=o("RobertaForMultipleChoice"),f8o=o(" (RoBERTa model)"),m8o=l(),ub=a("li"),sie=a("strong"),g8o=o("roformer"),h8o=o(" \u2014 "),kN=a("a"),p8o=o("RoFormerForMultipleChoice"),_8o=o(" (RoFormer model)"),u8o=l(),bb=a("li"),lie=a("strong"),b8o=o("squeezebert"),F8o=o(" \u2014 "),SN=a("a"),v8o=o("SqueezeBertForMultipleChoice"),T8o=o(" (SqueezeBERT model)"),M8o=l(),Fb=a("li"),iie=a("strong"),E8o=o("xlm"),C8o=o(" \u2014 "),RN=a("a"),w8o=o("XLMForMultipleChoice"),A8o=o(" (XLM model)"),y8o=l(),vb=a("li"),die=a("strong"),L8o=o("xlm-roberta"),x8o=o(" \u2014 "),BN=a("a"),k8o=o("XLMRobertaForMultipleChoice"),S8o=o(" (XLM-RoBERTa model)"),R8o=l(),Tb=a("li"),cie=a("strong"),B8o=o("xlm-roberta-xl"),P8o=o(" \u2014 "),PN=a("a"),$8o=o("XLMRobertaXLForMultipleChoice"),I8o=o(" (XLM-RoBERTa-XL model)"),q8o=l(),Mb=a("li"),fie=a("strong"),N8o=o("xlnet"),j8o=o(" \u2014 "),$N=a("a"),D8o=o("XLNetForMultipleChoice"),G8o=o(" (XLNet model)"),O8o=l(),Eb=a("li"),mie=a("strong"),V8o=o("yoso"),X8o=o(" \u2014 "),IN=a("a"),z8o=o("YosoForMultipleChoice"),Q8o=o(" (YOSO model)"),W8o=l(),Cb=a("p"),H8o=o("The model is set in evaluation mode by default using "),gie=a("code"),U8o=o("model.eval()"),J8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),Y8o=o("model.train()"),K8o=l(),pie=a("p"),Z8o=o("Examples:"),e7o=l(),f(Vw.$$.fragment),fRe=l(),bd=a("h2"),wb=a("a"),_ie=a("span"),f(Xw.$$.fragment),o7o=l(),uie=a("span"),r7o=o("AutoModelForNextSentencePrediction"),mRe=l(),tr=a("div"),f(zw.$$.fragment),t7o=l(),Fd=a("p"),a7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qN=a("a"),n7o=o("from_pretrained()"),s7o=o(" class method or the "),NN=a("a"),l7o=o("from_config()"),i7o=o(` class
method.`),d7o=l(),Qw=a("p"),c7o=o("This class cannot be instantiated directly using "),bie=a("code"),f7o=o("__init__()"),m7o=o(" (throws an error)."),g7o=l(),Yr=a("div"),f(Ww.$$.fragment),h7o=l(),Fie=a("p"),p7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),_7o=l(),vd=a("p"),u7o=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),b7o=o("not"),F7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),v7o=o("from_pretrained()"),T7o=o(" to load the model weights."),M7o=l(),Tie=a("p"),E7o=o("Examples:"),C7o=l(),f(Hw.$$.fragment),w7o=l(),Xe=a("div"),f(Uw.$$.fragment),A7o=l(),Mie=a("p"),y7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),L7o=l(),Ya=a("p"),x7o=o("The model class to instantiate is selected based on the "),Eie=a("code"),k7o=o("model_type"),S7o=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),R7o=o("pretrained_model_name_or_path"),B7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),P7o=o("pretrained_model_name_or_path"),$7o=o(":"),I7o=l(),da=a("ul"),Ab=a("li"),Aie=a("strong"),q7o=o("bert"),N7o=o(" \u2014 "),DN=a("a"),j7o=o("BertForNextSentencePrediction"),D7o=o(" (BERT model)"),G7o=l(),yb=a("li"),yie=a("strong"),O7o=o("fnet"),V7o=o(" \u2014 "),GN=a("a"),X7o=o("FNetForNextSentencePrediction"),z7o=o(" (FNet model)"),Q7o=l(),Lb=a("li"),Lie=a("strong"),W7o=o("megatron-bert"),H7o=o(" \u2014 "),ON=a("a"),U7o=o("MegatronBertForNextSentencePrediction"),J7o=o(" (MegatronBert model)"),Y7o=l(),xb=a("li"),xie=a("strong"),K7o=o("mobilebert"),Z7o=o(" \u2014 "),VN=a("a"),e9o=o("MobileBertForNextSentencePrediction"),o9o=o(" (MobileBERT model)"),r9o=l(),kb=a("li"),kie=a("strong"),t9o=o("qdqbert"),a9o=o(" \u2014 "),XN=a("a"),n9o=o("QDQBertForNextSentencePrediction"),s9o=o(" (QDQBert model)"),l9o=l(),Sb=a("p"),i9o=o("The model is set in evaluation mode by default using "),Sie=a("code"),d9o=o("model.eval()"),c9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),f9o=o("model.train()"),m9o=l(),Bie=a("p"),g9o=o("Examples:"),h9o=l(),f(Jw.$$.fragment),gRe=l(),Td=a("h2"),Rb=a("a"),Pie=a("span"),f(Yw.$$.fragment),p9o=l(),$ie=a("span"),_9o=o("AutoModelForTokenClassification"),hRe=l(),ar=a("div"),f(Kw.$$.fragment),u9o=l(),Md=a("p"),b9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zN=a("a"),F9o=o("from_pretrained()"),v9o=o(" class method or the "),QN=a("a"),T9o=o("from_config()"),M9o=o(` class
method.`),E9o=l(),Zw=a("p"),C9o=o("This class cannot be instantiated directly using "),Iie=a("code"),w9o=o("__init__()"),A9o=o(" (throws an error)."),y9o=l(),Kr=a("div"),f(eA.$$.fragment),L9o=l(),qie=a("p"),x9o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k9o=l(),Ed=a("p"),S9o=o(`Note:
Loading a model from its configuration file does `),Nie=a("strong"),R9o=o("not"),B9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=a("a"),P9o=o("from_pretrained()"),$9o=o(" to load the model weights."),I9o=l(),jie=a("p"),q9o=o("Examples:"),N9o=l(),f(oA.$$.fragment),j9o=l(),ze=a("div"),f(rA.$$.fragment),D9o=l(),Die=a("p"),G9o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),O9o=l(),Ka=a("p"),V9o=o("The model class to instantiate is selected based on the "),Gie=a("code"),X9o=o("model_type"),z9o=o(` property of the config object (either
passed as an argument or loaded from `),Oie=a("code"),Q9o=o("pretrained_model_name_or_path"),W9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(":"),J9o=l(),j=a("ul"),Bb=a("li"),Xie=a("strong"),Y9o=o("albert"),K9o=o(" \u2014 "),HN=a("a"),Z9o=o("AlbertForTokenClassification"),exo=o(" (ALBERT model)"),oxo=l(),Pb=a("li"),zie=a("strong"),rxo=o("bert"),txo=o(" \u2014 "),UN=a("a"),axo=o("BertForTokenClassification"),nxo=o(" (BERT model)"),sxo=l(),$b=a("li"),Qie=a("strong"),lxo=o("big_bird"),ixo=o(" \u2014 "),JN=a("a"),dxo=o("BigBirdForTokenClassification"),cxo=o(" (BigBird model)"),fxo=l(),Ib=a("li"),Wie=a("strong"),mxo=o("camembert"),gxo=o(" \u2014 "),YN=a("a"),hxo=o("CamembertForTokenClassification"),pxo=o(" (CamemBERT model)"),_xo=l(),qb=a("li"),Hie=a("strong"),uxo=o("canine"),bxo=o(" \u2014 "),KN=a("a"),Fxo=o("CanineForTokenClassification"),vxo=o(" (Canine model)"),Txo=l(),Nb=a("li"),Uie=a("strong"),Mxo=o("convbert"),Exo=o(" \u2014 "),ZN=a("a"),Cxo=o("ConvBertForTokenClassification"),wxo=o(" (ConvBERT model)"),Axo=l(),jb=a("li"),Jie=a("strong"),yxo=o("data2vec-text"),Lxo=o(" \u2014 "),ej=a("a"),xxo=o("Data2VecTextForTokenClassification"),kxo=o(" (Data2VecText model)"),Sxo=l(),Db=a("li"),Yie=a("strong"),Rxo=o("deberta"),Bxo=o(" \u2014 "),oj=a("a"),Pxo=o("DebertaForTokenClassification"),$xo=o(" (DeBERTa model)"),Ixo=l(),Gb=a("li"),Kie=a("strong"),qxo=o("deberta-v2"),Nxo=o(" \u2014 "),rj=a("a"),jxo=o("DebertaV2ForTokenClassification"),Dxo=o(" (DeBERTa-v2 model)"),Gxo=l(),Ob=a("li"),Zie=a("strong"),Oxo=o("distilbert"),Vxo=o(" \u2014 "),tj=a("a"),Xxo=o("DistilBertForTokenClassification"),zxo=o(" (DistilBERT model)"),Qxo=l(),Vb=a("li"),ede=a("strong"),Wxo=o("electra"),Hxo=o(" \u2014 "),aj=a("a"),Uxo=o("ElectraForTokenClassification"),Jxo=o(" (ELECTRA model)"),Yxo=l(),Xb=a("li"),ode=a("strong"),Kxo=o("flaubert"),Zxo=o(" \u2014 "),nj=a("a"),eko=o("FlaubertForTokenClassification"),oko=o(" (FlauBERT model)"),rko=l(),zb=a("li"),rde=a("strong"),tko=o("fnet"),ako=o(" \u2014 "),sj=a("a"),nko=o("FNetForTokenClassification"),sko=o(" (FNet model)"),lko=l(),Qb=a("li"),tde=a("strong"),iko=o("funnel"),dko=o(" \u2014 "),lj=a("a"),cko=o("FunnelForTokenClassification"),fko=o(" (Funnel Transformer model)"),mko=l(),Wb=a("li"),ade=a("strong"),gko=o("gpt2"),hko=o(" \u2014 "),ij=a("a"),pko=o("GPT2ForTokenClassification"),_ko=o(" (OpenAI GPT-2 model)"),uko=l(),Hb=a("li"),nde=a("strong"),bko=o("ibert"),Fko=o(" \u2014 "),dj=a("a"),vko=o("IBertForTokenClassification"),Tko=o(" (I-BERT model)"),Mko=l(),Ub=a("li"),sde=a("strong"),Eko=o("layoutlm"),Cko=o(" \u2014 "),cj=a("a"),wko=o("LayoutLMForTokenClassification"),Ako=o(" (LayoutLM model)"),yko=l(),Jb=a("li"),lde=a("strong"),Lko=o("layoutlmv2"),xko=o(" \u2014 "),fj=a("a"),kko=o("LayoutLMv2ForTokenClassification"),Sko=o(" (LayoutLMv2 model)"),Rko=l(),Yb=a("li"),ide=a("strong"),Bko=o("longformer"),Pko=o(" \u2014 "),mj=a("a"),$ko=o("LongformerForTokenClassification"),Iko=o(" (Longformer model)"),qko=l(),Kb=a("li"),dde=a("strong"),Nko=o("megatron-bert"),jko=o(" \u2014 "),gj=a("a"),Dko=o("MegatronBertForTokenClassification"),Gko=o(" (MegatronBert model)"),Oko=l(),Zb=a("li"),cde=a("strong"),Vko=o("mobilebert"),Xko=o(" \u2014 "),hj=a("a"),zko=o("MobileBertForTokenClassification"),Qko=o(" (MobileBERT model)"),Wko=l(),e2=a("li"),fde=a("strong"),Hko=o("mpnet"),Uko=o(" \u2014 "),pj=a("a"),Jko=o("MPNetForTokenClassification"),Yko=o(" (MPNet model)"),Kko=l(),o2=a("li"),mde=a("strong"),Zko=o("nystromformer"),eSo=o(" \u2014 "),_j=a("a"),oSo=o("NystromformerForTokenClassification"),rSo=o(" (Nystromformer model)"),tSo=l(),r2=a("li"),gde=a("strong"),aSo=o("qdqbert"),nSo=o(" \u2014 "),uj=a("a"),sSo=o("QDQBertForTokenClassification"),lSo=o(" (QDQBert model)"),iSo=l(),t2=a("li"),hde=a("strong"),dSo=o("rembert"),cSo=o(" \u2014 "),bj=a("a"),fSo=o("RemBertForTokenClassification"),mSo=o(" (RemBERT model)"),gSo=l(),a2=a("li"),pde=a("strong"),hSo=o("roberta"),pSo=o(" \u2014 "),Fj=a("a"),_So=o("RobertaForTokenClassification"),uSo=o(" (RoBERTa model)"),bSo=l(),n2=a("li"),_de=a("strong"),FSo=o("roformer"),vSo=o(" \u2014 "),vj=a("a"),TSo=o("RoFormerForTokenClassification"),MSo=o(" (RoFormer model)"),ESo=l(),s2=a("li"),ude=a("strong"),CSo=o("squeezebert"),wSo=o(" \u2014 "),Tj=a("a"),ASo=o("SqueezeBertForTokenClassification"),ySo=o(" (SqueezeBERT model)"),LSo=l(),l2=a("li"),bde=a("strong"),xSo=o("xlm"),kSo=o(" \u2014 "),Mj=a("a"),SSo=o("XLMForTokenClassification"),RSo=o(" (XLM model)"),BSo=l(),i2=a("li"),Fde=a("strong"),PSo=o("xlm-roberta"),$So=o(" \u2014 "),Ej=a("a"),ISo=o("XLMRobertaForTokenClassification"),qSo=o(" (XLM-RoBERTa model)"),NSo=l(),d2=a("li"),vde=a("strong"),jSo=o("xlm-roberta-xl"),DSo=o(" \u2014 "),Cj=a("a"),GSo=o("XLMRobertaXLForTokenClassification"),OSo=o(" (XLM-RoBERTa-XL model)"),VSo=l(),c2=a("li"),Tde=a("strong"),XSo=o("xlnet"),zSo=o(" \u2014 "),wj=a("a"),QSo=o("XLNetForTokenClassification"),WSo=o(" (XLNet model)"),HSo=l(),f2=a("li"),Mde=a("strong"),USo=o("yoso"),JSo=o(" \u2014 "),Aj=a("a"),YSo=o("YosoForTokenClassification"),KSo=o(" (YOSO model)"),ZSo=l(),m2=a("p"),eRo=o("The model is set in evaluation mode by default using "),Ede=a("code"),oRo=o("model.eval()"),rRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=a("code"),tRo=o("model.train()"),aRo=l(),wde=a("p"),nRo=o("Examples:"),sRo=l(),f(tA.$$.fragment),pRe=l(),Cd=a("h2"),g2=a("a"),Ade=a("span"),f(aA.$$.fragment),lRo=l(),yde=a("span"),iRo=o("AutoModelForQuestionAnswering"),_Re=l(),nr=a("div"),f(nA.$$.fragment),dRo=l(),wd=a("p"),cRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yj=a("a"),fRo=o("from_pretrained()"),mRo=o(" class method or the "),Lj=a("a"),gRo=o("from_config()"),hRo=o(` class
method.`),pRo=l(),sA=a("p"),_Ro=o("This class cannot be instantiated directly using "),Lde=a("code"),uRo=o("__init__()"),bRo=o(" (throws an error)."),FRo=l(),Zr=a("div"),f(lA.$$.fragment),vRo=l(),xde=a("p"),TRo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),MRo=l(),Ad=a("p"),ERo=o(`Note:
Loading a model from its configuration file does `),kde=a("strong"),CRo=o("not"),wRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=a("a"),ARo=o("from_pretrained()"),yRo=o(" to load the model weights."),LRo=l(),Sde=a("p"),xRo=o("Examples:"),kRo=l(),f(iA.$$.fragment),SRo=l(),Qe=a("div"),f(dA.$$.fragment),RRo=l(),Rde=a("p"),BRo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),PRo=l(),Za=a("p"),$Ro=o("The model class to instantiate is selected based on the "),Bde=a("code"),IRo=o("model_type"),qRo=o(` property of the config object (either
passed as an argument or loaded from `),Pde=a("code"),NRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(":"),ORo=l(),R=a("ul"),h2=a("li"),Ide=a("strong"),VRo=o("albert"),XRo=o(" \u2014 "),kj=a("a"),zRo=o("AlbertForQuestionAnswering"),QRo=o(" (ALBERT model)"),WRo=l(),p2=a("li"),qde=a("strong"),HRo=o("bart"),URo=o(" \u2014 "),Sj=a("a"),JRo=o("BartForQuestionAnswering"),YRo=o(" (BART model)"),KRo=l(),_2=a("li"),Nde=a("strong"),ZRo=o("bert"),eBo=o(" \u2014 "),Rj=a("a"),oBo=o("BertForQuestionAnswering"),rBo=o(" (BERT model)"),tBo=l(),u2=a("li"),jde=a("strong"),aBo=o("big_bird"),nBo=o(" \u2014 "),Bj=a("a"),sBo=o("BigBirdForQuestionAnswering"),lBo=o(" (BigBird model)"),iBo=l(),b2=a("li"),Dde=a("strong"),dBo=o("bigbird_pegasus"),cBo=o(" \u2014 "),Pj=a("a"),fBo=o("BigBirdPegasusForQuestionAnswering"),mBo=o(" (BigBirdPegasus model)"),gBo=l(),F2=a("li"),Gde=a("strong"),hBo=o("camembert"),pBo=o(" \u2014 "),$j=a("a"),_Bo=o("CamembertForQuestionAnswering"),uBo=o(" (CamemBERT model)"),bBo=l(),v2=a("li"),Ode=a("strong"),FBo=o("canine"),vBo=o(" \u2014 "),Ij=a("a"),TBo=o("CanineForQuestionAnswering"),MBo=o(" (Canine model)"),EBo=l(),T2=a("li"),Vde=a("strong"),CBo=o("convbert"),wBo=o(" \u2014 "),qj=a("a"),ABo=o("ConvBertForQuestionAnswering"),yBo=o(" (ConvBERT model)"),LBo=l(),M2=a("li"),Xde=a("strong"),xBo=o("data2vec-text"),kBo=o(" \u2014 "),Nj=a("a"),SBo=o("Data2VecTextForQuestionAnswering"),RBo=o(" (Data2VecText model)"),BBo=l(),E2=a("li"),zde=a("strong"),PBo=o("deberta"),$Bo=o(" \u2014 "),jj=a("a"),IBo=o("DebertaForQuestionAnswering"),qBo=o(" (DeBERTa model)"),NBo=l(),C2=a("li"),Qde=a("strong"),jBo=o("deberta-v2"),DBo=o(" \u2014 "),Dj=a("a"),GBo=o("DebertaV2ForQuestionAnswering"),OBo=o(" (DeBERTa-v2 model)"),VBo=l(),w2=a("li"),Wde=a("strong"),XBo=o("distilbert"),zBo=o(" \u2014 "),Gj=a("a"),QBo=o("DistilBertForQuestionAnswering"),WBo=o(" (DistilBERT model)"),HBo=l(),A2=a("li"),Hde=a("strong"),UBo=o("electra"),JBo=o(" \u2014 "),Oj=a("a"),YBo=o("ElectraForQuestionAnswering"),KBo=o(" (ELECTRA model)"),ZBo=l(),y2=a("li"),Ude=a("strong"),ePo=o("flaubert"),oPo=o(" \u2014 "),Vj=a("a"),rPo=o("FlaubertForQuestionAnsweringSimple"),tPo=o(" (FlauBERT model)"),aPo=l(),L2=a("li"),Jde=a("strong"),nPo=o("fnet"),sPo=o(" \u2014 "),Xj=a("a"),lPo=o("FNetForQuestionAnswering"),iPo=o(" (FNet model)"),dPo=l(),x2=a("li"),Yde=a("strong"),cPo=o("funnel"),fPo=o(" \u2014 "),zj=a("a"),mPo=o("FunnelForQuestionAnswering"),gPo=o(" (Funnel Transformer model)"),hPo=l(),k2=a("li"),Kde=a("strong"),pPo=o("gptj"),_Po=o(" \u2014 "),Qj=a("a"),uPo=o("GPTJForQuestionAnswering"),bPo=o(" (GPT-J model)"),FPo=l(),S2=a("li"),Zde=a("strong"),vPo=o("ibert"),TPo=o(" \u2014 "),Wj=a("a"),MPo=o("IBertForQuestionAnswering"),EPo=o(" (I-BERT model)"),CPo=l(),R2=a("li"),ece=a("strong"),wPo=o("layoutlmv2"),APo=o(" \u2014 "),Hj=a("a"),yPo=o("LayoutLMv2ForQuestionAnswering"),LPo=o(" (LayoutLMv2 model)"),xPo=l(),B2=a("li"),oce=a("strong"),kPo=o("led"),SPo=o(" \u2014 "),Uj=a("a"),RPo=o("LEDForQuestionAnswering"),BPo=o(" (LED model)"),PPo=l(),P2=a("li"),rce=a("strong"),$Po=o("longformer"),IPo=o(" \u2014 "),Jj=a("a"),qPo=o("LongformerForQuestionAnswering"),NPo=o(" (Longformer model)"),jPo=l(),$2=a("li"),tce=a("strong"),DPo=o("lxmert"),GPo=o(" \u2014 "),Yj=a("a"),OPo=o("LxmertForQuestionAnswering"),VPo=o(" (LXMERT model)"),XPo=l(),I2=a("li"),ace=a("strong"),zPo=o("mbart"),QPo=o(" \u2014 "),Kj=a("a"),WPo=o("MBartForQuestionAnswering"),HPo=o(" (mBART model)"),UPo=l(),q2=a("li"),nce=a("strong"),JPo=o("megatron-bert"),YPo=o(" \u2014 "),Zj=a("a"),KPo=o("MegatronBertForQuestionAnswering"),ZPo=o(" (MegatronBert model)"),e$o=l(),N2=a("li"),sce=a("strong"),o$o=o("mobilebert"),r$o=o(" \u2014 "),eD=a("a"),t$o=o("MobileBertForQuestionAnswering"),a$o=o(" (MobileBERT model)"),n$o=l(),j2=a("li"),lce=a("strong"),s$o=o("mpnet"),l$o=o(" \u2014 "),oD=a("a"),i$o=o("MPNetForQuestionAnswering"),d$o=o(" (MPNet model)"),c$o=l(),D2=a("li"),ice=a("strong"),f$o=o("nystromformer"),m$o=o(" \u2014 "),rD=a("a"),g$o=o("NystromformerForQuestionAnswering"),h$o=o(" (Nystromformer model)"),p$o=l(),G2=a("li"),dce=a("strong"),_$o=o("qdqbert"),u$o=o(" \u2014 "),tD=a("a"),b$o=o("QDQBertForQuestionAnswering"),F$o=o(" (QDQBert model)"),v$o=l(),O2=a("li"),cce=a("strong"),T$o=o("reformer"),M$o=o(" \u2014 "),aD=a("a"),E$o=o("ReformerForQuestionAnswering"),C$o=o(" (Reformer model)"),w$o=l(),V2=a("li"),fce=a("strong"),A$o=o("rembert"),y$o=o(" \u2014 "),nD=a("a"),L$o=o("RemBertForQuestionAnswering"),x$o=o(" (RemBERT model)"),k$o=l(),X2=a("li"),mce=a("strong"),S$o=o("roberta"),R$o=o(" \u2014 "),sD=a("a"),B$o=o("RobertaForQuestionAnswering"),P$o=o(" (RoBERTa model)"),$$o=l(),z2=a("li"),gce=a("strong"),I$o=o("roformer"),q$o=o(" \u2014 "),lD=a("a"),N$o=o("RoFormerForQuestionAnswering"),j$o=o(" (RoFormer model)"),D$o=l(),Q2=a("li"),hce=a("strong"),G$o=o("splinter"),O$o=o(" \u2014 "),iD=a("a"),V$o=o("SplinterForQuestionAnswering"),X$o=o(" (Splinter model)"),z$o=l(),W2=a("li"),pce=a("strong"),Q$o=o("squeezebert"),W$o=o(" \u2014 "),dD=a("a"),H$o=o("SqueezeBertForQuestionAnswering"),U$o=o(" (SqueezeBERT model)"),J$o=l(),H2=a("li"),_ce=a("strong"),Y$o=o("xlm"),K$o=o(" \u2014 "),cD=a("a"),Z$o=o("XLMForQuestionAnsweringSimple"),eIo=o(" (XLM model)"),oIo=l(),U2=a("li"),uce=a("strong"),rIo=o("xlm-roberta"),tIo=o(" \u2014 "),fD=a("a"),aIo=o("XLMRobertaForQuestionAnswering"),nIo=o(" (XLM-RoBERTa model)"),sIo=l(),J2=a("li"),bce=a("strong"),lIo=o("xlm-roberta-xl"),iIo=o(" \u2014 "),mD=a("a"),dIo=o("XLMRobertaXLForQuestionAnswering"),cIo=o(" (XLM-RoBERTa-XL model)"),fIo=l(),Y2=a("li"),Fce=a("strong"),mIo=o("xlnet"),gIo=o(" \u2014 "),gD=a("a"),hIo=o("XLNetForQuestionAnsweringSimple"),pIo=o(" (XLNet model)"),_Io=l(),K2=a("li"),vce=a("strong"),uIo=o("yoso"),bIo=o(" \u2014 "),hD=a("a"),FIo=o("YosoForQuestionAnswering"),vIo=o(" (YOSO model)"),TIo=l(),Z2=a("p"),MIo=o("The model is set in evaluation mode by default using "),Tce=a("code"),EIo=o("model.eval()"),CIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=a("code"),wIo=o("model.train()"),AIo=l(),Ece=a("p"),yIo=o("Examples:"),LIo=l(),f(cA.$$.fragment),uRe=l(),yd=a("h2"),eF=a("a"),Cce=a("span"),f(fA.$$.fragment),xIo=l(),wce=a("span"),kIo=o("AutoModelForTableQuestionAnswering"),bRe=l(),sr=a("div"),f(mA.$$.fragment),SIo=l(),Ld=a("p"),RIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pD=a("a"),BIo=o("from_pretrained()"),PIo=o(" class method or the "),_D=a("a"),$Io=o("from_config()"),IIo=o(` class
method.`),qIo=l(),gA=a("p"),NIo=o("This class cannot be instantiated directly using "),Ace=a("code"),jIo=o("__init__()"),DIo=o(" (throws an error)."),GIo=l(),et=a("div"),f(hA.$$.fragment),OIo=l(),yce=a("p"),VIo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),XIo=l(),xd=a("p"),zIo=o(`Note:
Loading a model from its configuration file does `),Lce=a("strong"),QIo=o("not"),WIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=a("a"),HIo=o("from_pretrained()"),UIo=o(" to load the model weights."),JIo=l(),xce=a("p"),YIo=o("Examples:"),KIo=l(),f(pA.$$.fragment),ZIo=l(),We=a("div"),f(_A.$$.fragment),eqo=l(),kce=a("p"),oqo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),rqo=l(),en=a("p"),tqo=o("The model class to instantiate is selected based on the "),Sce=a("code"),aqo=o("model_type"),nqo=o(` property of the config object (either
passed as an argument or loaded from `),Rce=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(":"),cqo=l(),Pce=a("ul"),oF=a("li"),$ce=a("strong"),fqo=o("tapas"),mqo=o(" \u2014 "),bD=a("a"),gqo=o("TapasForQuestionAnswering"),hqo=o(" (TAPAS model)"),pqo=l(),rF=a("p"),_qo=o("The model is set in evaluation mode by default using "),Ice=a("code"),uqo=o("model.eval()"),bqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=a("code"),Fqo=o("model.train()"),vqo=l(),Nce=a("p"),Tqo=o("Examples:"),Mqo=l(),f(uA.$$.fragment),FRe=l(),kd=a("h2"),tF=a("a"),jce=a("span"),f(bA.$$.fragment),Eqo=l(),Dce=a("span"),Cqo=o("AutoModelForImageClassification"),vRe=l(),lr=a("div"),f(FA.$$.fragment),wqo=l(),Sd=a("p"),Aqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FD=a("a"),yqo=o("from_pretrained()"),Lqo=o(" class method or the "),vD=a("a"),xqo=o("from_config()"),kqo=o(` class
method.`),Sqo=l(),vA=a("p"),Rqo=o("This class cannot be instantiated directly using "),Gce=a("code"),Bqo=o("__init__()"),Pqo=o(" (throws an error)."),$qo=l(),ot=a("div"),f(TA.$$.fragment),Iqo=l(),Oce=a("p"),qqo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Nqo=l(),Rd=a("p"),jqo=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),Dqo=o("not"),Gqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=a("a"),Oqo=o("from_pretrained()"),Vqo=o(" to load the model weights."),Xqo=l(),Xce=a("p"),zqo=o("Examples:"),Qqo=l(),f(MA.$$.fragment),Wqo=l(),He=a("div"),f(EA.$$.fragment),Hqo=l(),zce=a("p"),Uqo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jqo=l(),on=a("p"),Yqo=o("The model class to instantiate is selected based on the "),Qce=a("code"),Kqo=o("model_type"),Zqo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),eNo=o("pretrained_model_name_or_path"),oNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=a("code"),rNo=o("pretrained_model_name_or_path"),tNo=o(":"),aNo=l(),ge=a("ul"),aF=a("li"),Uce=a("strong"),nNo=o("beit"),sNo=o(" \u2014 "),MD=a("a"),lNo=o("BeitForImageClassification"),iNo=o(" (BEiT model)"),dNo=l(),nF=a("li"),Jce=a("strong"),cNo=o("convnext"),fNo=o(" \u2014 "),ED=a("a"),mNo=o("ConvNextForImageClassification"),gNo=o(" (ConvNext model)"),hNo=l(),Gs=a("li"),Yce=a("strong"),pNo=o("deit"),_No=o(" \u2014 "),CD=a("a"),uNo=o("DeiTForImageClassification"),bNo=o(" or "),wD=a("a"),FNo=o("DeiTForImageClassificationWithTeacher"),vNo=o(" (DeiT model)"),TNo=l(),sF=a("li"),Kce=a("strong"),MNo=o("imagegpt"),ENo=o(" \u2014 "),AD=a("a"),CNo=o("ImageGPTForImageClassification"),wNo=o(" (ImageGPT model)"),ANo=l(),ma=a("li"),Zce=a("strong"),yNo=o("perceiver"),LNo=o(" \u2014 "),yD=a("a"),xNo=o("PerceiverForImageClassificationLearned"),kNo=o(" or "),LD=a("a"),SNo=o("PerceiverForImageClassificationFourier"),RNo=o(" or "),xD=a("a"),BNo=o("PerceiverForImageClassificationConvProcessing"),PNo=o(" (Perceiver model)"),$No=l(),lF=a("li"),efe=a("strong"),INo=o("poolformer"),qNo=o(" \u2014 "),kD=a("a"),NNo=o("PoolFormerForImageClassification"),jNo=o(" (PoolFormer model)"),DNo=l(),iF=a("li"),ofe=a("strong"),GNo=o("resnet"),ONo=o(" \u2014 "),SD=a("a"),VNo=o("ResNetForImageClassification"),XNo=o(" (ResNet model)"),zNo=l(),dF=a("li"),rfe=a("strong"),QNo=o("segformer"),WNo=o(" \u2014 "),RD=a("a"),HNo=o("SegformerForImageClassification"),UNo=o(" (SegFormer model)"),JNo=l(),cF=a("li"),tfe=a("strong"),YNo=o("swin"),KNo=o(" \u2014 "),BD=a("a"),ZNo=o("SwinForImageClassification"),ejo=o(" (Swin model)"),ojo=l(),fF=a("li"),afe=a("strong"),rjo=o("van"),tjo=o(" \u2014 "),PD=a("a"),ajo=o("VanForImageClassification"),njo=o(" (VAN model)"),sjo=l(),mF=a("li"),nfe=a("strong"),ljo=o("vit"),ijo=o(" \u2014 "),$D=a("a"),djo=o("ViTForImageClassification"),cjo=o(" (ViT model)"),fjo=l(),gF=a("p"),mjo=o("The model is set in evaluation mode by default using "),sfe=a("code"),gjo=o("model.eval()"),hjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),pjo=o("model.train()"),_jo=l(),ife=a("p"),ujo=o("Examples:"),bjo=l(),f(CA.$$.fragment),TRe=l(),Bd=a("h2"),hF=a("a"),dfe=a("span"),f(wA.$$.fragment),Fjo=l(),cfe=a("span"),vjo=o("AutoModelForVision2Seq"),MRe=l(),ir=a("div"),f(AA.$$.fragment),Tjo=l(),Pd=a("p"),Mjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ID=a("a"),Ejo=o("from_pretrained()"),Cjo=o(" class method or the "),qD=a("a"),wjo=o("from_config()"),Ajo=o(` class
method.`),yjo=l(),yA=a("p"),Ljo=o("This class cannot be instantiated directly using "),ffe=a("code"),xjo=o("__init__()"),kjo=o(" (throws an error)."),Sjo=l(),rt=a("div"),f(LA.$$.fragment),Rjo=l(),mfe=a("p"),Bjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Pjo=l(),$d=a("p"),$jo=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),Ijo=o("not"),qjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),Njo=o("from_pretrained()"),jjo=o(" to load the model weights."),Djo=l(),hfe=a("p"),Gjo=o("Examples:"),Ojo=l(),f(xA.$$.fragment),Vjo=l(),Ue=a("div"),f(kA.$$.fragment),Xjo=l(),pfe=a("p"),zjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qjo=l(),rn=a("p"),Wjo=o("The model class to instantiate is selected based on the "),_fe=a("code"),Hjo=o("model_type"),Ujo=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),Jjo=o("pretrained_model_name_or_path"),Yjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=a("code"),Kjo=o("pretrained_model_name_or_path"),Zjo=o(":"),eDo=l(),Ffe=a("ul"),pF=a("li"),vfe=a("strong"),oDo=o("vision-encoder-decoder"),rDo=o(" \u2014 "),jD=a("a"),tDo=o("VisionEncoderDecoderModel"),aDo=o(" (Vision Encoder decoder model)"),nDo=l(),_F=a("p"),sDo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),lDo=o("model.eval()"),iDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),dDo=o("model.train()"),cDo=l(),Efe=a("p"),fDo=o("Examples:"),mDo=l(),f(SA.$$.fragment),ERe=l(),Id=a("h2"),uF=a("a"),Cfe=a("span"),f(RA.$$.fragment),gDo=l(),wfe=a("span"),hDo=o("AutoModelForAudioClassification"),CRe=l(),dr=a("div"),f(BA.$$.fragment),pDo=l(),qd=a("p"),_Do=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DD=a("a"),uDo=o("from_pretrained()"),bDo=o(" class method or the "),GD=a("a"),FDo=o("from_config()"),vDo=o(` class
method.`),TDo=l(),PA=a("p"),MDo=o("This class cannot be instantiated directly using "),Afe=a("code"),EDo=o("__init__()"),CDo=o(" (throws an error)."),wDo=l(),tt=a("div"),f($A.$$.fragment),ADo=l(),yfe=a("p"),yDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),LDo=l(),Nd=a("p"),xDo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),kDo=o("not"),SDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),RDo=o("from_pretrained()"),BDo=o(" to load the model weights."),PDo=l(),xfe=a("p"),$Do=o("Examples:"),IDo=l(),f(IA.$$.fragment),qDo=l(),Je=a("div"),f(qA.$$.fragment),NDo=l(),kfe=a("p"),jDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),DDo=l(),tn=a("p"),GDo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),ODo=o("model_type"),VDo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),XDo=o("pretrained_model_name_or_path"),zDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),QDo=o("pretrained_model_name_or_path"),WDo=o(":"),HDo=l(),Se=a("ul"),bF=a("li"),Pfe=a("strong"),UDo=o("data2vec-audio"),JDo=o(" \u2014 "),VD=a("a"),YDo=o("Data2VecAudioForSequenceClassification"),KDo=o(" (Data2VecAudio model)"),ZDo=l(),FF=a("li"),$fe=a("strong"),eGo=o("hubert"),oGo=o(" \u2014 "),XD=a("a"),rGo=o("HubertForSequenceClassification"),tGo=o(" (Hubert model)"),aGo=l(),vF=a("li"),Ife=a("strong"),nGo=o("sew"),sGo=o(" \u2014 "),zD=a("a"),lGo=o("SEWForSequenceClassification"),iGo=o(" (SEW model)"),dGo=l(),TF=a("li"),qfe=a("strong"),cGo=o("sew-d"),fGo=o(" \u2014 "),QD=a("a"),mGo=o("SEWDForSequenceClassification"),gGo=o(" (SEW-D model)"),hGo=l(),MF=a("li"),Nfe=a("strong"),pGo=o("unispeech"),_Go=o(" \u2014 "),WD=a("a"),uGo=o("UniSpeechForSequenceClassification"),bGo=o(" (UniSpeech model)"),FGo=l(),EF=a("li"),jfe=a("strong"),vGo=o("unispeech-sat"),TGo=o(" \u2014 "),HD=a("a"),MGo=o("UniSpeechSatForSequenceClassification"),EGo=o(" (UniSpeechSat model)"),CGo=l(),CF=a("li"),Dfe=a("strong"),wGo=o("wav2vec2"),AGo=o(" \u2014 "),UD=a("a"),yGo=o("Wav2Vec2ForSequenceClassification"),LGo=o(" (Wav2Vec2 model)"),xGo=l(),wF=a("li"),Gfe=a("strong"),kGo=o("wavlm"),SGo=o(" \u2014 "),JD=a("a"),RGo=o("WavLMForSequenceClassification"),BGo=o(" (WavLM model)"),PGo=l(),AF=a("p"),$Go=o("The model is set in evaluation mode by default using "),Ofe=a("code"),IGo=o("model.eval()"),qGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=a("code"),NGo=o("model.train()"),jGo=l(),Xfe=a("p"),DGo=o("Examples:"),GGo=l(),f(NA.$$.fragment),wRe=l(),jd=a("h2"),yF=a("a"),zfe=a("span"),f(jA.$$.fragment),OGo=l(),Qfe=a("span"),VGo=o("AutoModelForAudioFrameClassification"),ARe=l(),cr=a("div"),f(DA.$$.fragment),XGo=l(),Dd=a("p"),zGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YD=a("a"),QGo=o("from_pretrained()"),WGo=o(" class method or the "),KD=a("a"),HGo=o("from_config()"),UGo=o(` class
method.`),JGo=l(),GA=a("p"),YGo=o("This class cannot be instantiated directly using "),Wfe=a("code"),KGo=o("__init__()"),ZGo=o(" (throws an error)."),eOo=l(),at=a("div"),f(OA.$$.fragment),oOo=l(),Hfe=a("p"),rOo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tOo=l(),Gd=a("p"),aOo=o(`Note:
Loading a model from its configuration file does `),Ufe=a("strong"),nOo=o("not"),sOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),lOo=o("from_pretrained()"),iOo=o(" to load the model weights."),dOo=l(),Jfe=a("p"),cOo=o("Examples:"),fOo=l(),f(VA.$$.fragment),mOo=l(),Ye=a("div"),f(XA.$$.fragment),gOo=l(),Yfe=a("p"),hOo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),pOo=l(),an=a("p"),_Oo=o("The model class to instantiate is selected based on the "),Kfe=a("code"),uOo=o("model_type"),bOo=o(` property of the config object (either
passed as an argument or loaded from `),Zfe=a("code"),FOo=o("pretrained_model_name_or_path"),vOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=a("code"),TOo=o("pretrained_model_name_or_path"),MOo=o(":"),EOo=l(),nn=a("ul"),LF=a("li"),ome=a("strong"),COo=o("data2vec-audio"),wOo=o(" \u2014 "),eG=a("a"),AOo=o("Data2VecAudioForAudioFrameClassification"),yOo=o(" (Data2VecAudio model)"),LOo=l(),xF=a("li"),rme=a("strong"),xOo=o("unispeech-sat"),kOo=o(" \u2014 "),oG=a("a"),SOo=o("UniSpeechSatForAudioFrameClassification"),ROo=o(" (UniSpeechSat model)"),BOo=l(),kF=a("li"),tme=a("strong"),POo=o("wav2vec2"),$Oo=o(" \u2014 "),rG=a("a"),IOo=o("Wav2Vec2ForAudioFrameClassification"),qOo=o(" (Wav2Vec2 model)"),NOo=l(),SF=a("li"),ame=a("strong"),jOo=o("wavlm"),DOo=o(" \u2014 "),tG=a("a"),GOo=o("WavLMForAudioFrameClassification"),OOo=o(" (WavLM model)"),VOo=l(),RF=a("p"),XOo=o("The model is set in evaluation mode by default using "),nme=a("code"),zOo=o("model.eval()"),QOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=a("code"),WOo=o("model.train()"),HOo=l(),lme=a("p"),UOo=o("Examples:"),JOo=l(),f(zA.$$.fragment),yRe=l(),Od=a("h2"),BF=a("a"),ime=a("span"),f(QA.$$.fragment),YOo=l(),dme=a("span"),KOo=o("AutoModelForCTC"),LRe=l(),fr=a("div"),f(WA.$$.fragment),ZOo=l(),Vd=a("p"),eVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aG=a("a"),oVo=o("from_pretrained()"),rVo=o(" class method or the "),nG=a("a"),tVo=o("from_config()"),aVo=o(` class
method.`),nVo=l(),HA=a("p"),sVo=o("This class cannot be instantiated directly using "),cme=a("code"),lVo=o("__init__()"),iVo=o(" (throws an error)."),dVo=l(),nt=a("div"),f(UA.$$.fragment),cVo=l(),fme=a("p"),fVo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),mVo=l(),Xd=a("p"),gVo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),hVo=o("not"),pVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=a("a"),_Vo=o("from_pretrained()"),uVo=o(" to load the model weights."),bVo=l(),gme=a("p"),FVo=o("Examples:"),vVo=l(),f(JA.$$.fragment),TVo=l(),Ke=a("div"),f(YA.$$.fragment),MVo=l(),hme=a("p"),EVo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),CVo=l(),sn=a("p"),wVo=o("The model class to instantiate is selected based on the "),pme=a("code"),AVo=o("model_type"),yVo=o(` property of the config object (either
passed as an argument or loaded from `),_me=a("code"),LVo=o("pretrained_model_name_or_path"),xVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(":"),RVo=l(),Re=a("ul"),PF=a("li"),bme=a("strong"),BVo=o("data2vec-audio"),PVo=o(" \u2014 "),lG=a("a"),$Vo=o("Data2VecAudioForCTC"),IVo=o(" (Data2VecAudio model)"),qVo=l(),$F=a("li"),Fme=a("strong"),NVo=o("hubert"),jVo=o(" \u2014 "),iG=a("a"),DVo=o("HubertForCTC"),GVo=o(" (Hubert model)"),OVo=l(),IF=a("li"),vme=a("strong"),VVo=o("sew"),XVo=o(" \u2014 "),dG=a("a"),zVo=o("SEWForCTC"),QVo=o(" (SEW model)"),WVo=l(),qF=a("li"),Tme=a("strong"),HVo=o("sew-d"),UVo=o(" \u2014 "),cG=a("a"),JVo=o("SEWDForCTC"),YVo=o(" (SEW-D model)"),KVo=l(),NF=a("li"),Mme=a("strong"),ZVo=o("unispeech"),eXo=o(" \u2014 "),fG=a("a"),oXo=o("UniSpeechForCTC"),rXo=o(" (UniSpeech model)"),tXo=l(),jF=a("li"),Eme=a("strong"),aXo=o("unispeech-sat"),nXo=o(" \u2014 "),mG=a("a"),sXo=o("UniSpeechSatForCTC"),lXo=o(" (UniSpeechSat model)"),iXo=l(),DF=a("li"),Cme=a("strong"),dXo=o("wav2vec2"),cXo=o(" \u2014 "),gG=a("a"),fXo=o("Wav2Vec2ForCTC"),mXo=o(" (Wav2Vec2 model)"),gXo=l(),GF=a("li"),wme=a("strong"),hXo=o("wavlm"),pXo=o(" \u2014 "),hG=a("a"),_Xo=o("WavLMForCTC"),uXo=o(" (WavLM model)"),bXo=l(),OF=a("p"),FXo=o("The model is set in evaluation mode by default using "),Ame=a("code"),vXo=o("model.eval()"),TXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=a("code"),MXo=o("model.train()"),EXo=l(),Lme=a("p"),CXo=o("Examples:"),wXo=l(),f(KA.$$.fragment),xRe=l(),zd=a("h2"),VF=a("a"),xme=a("span"),f(ZA.$$.fragment),AXo=l(),kme=a("span"),yXo=o("AutoModelForSpeechSeq2Seq"),kRe=l(),mr=a("div"),f(e0.$$.fragment),LXo=l(),Qd=a("p"),xXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pG=a("a"),kXo=o("from_pretrained()"),SXo=o(" class method or the "),_G=a("a"),RXo=o("from_config()"),BXo=o(` class
method.`),PXo=l(),o0=a("p"),$Xo=o("This class cannot be instantiated directly using "),Sme=a("code"),IXo=o("__init__()"),qXo=o(" (throws an error)."),NXo=l(),st=a("div"),f(r0.$$.fragment),jXo=l(),Rme=a("p"),DXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),GXo=l(),Wd=a("p"),OXo=o(`Note:
Loading a model from its configuration file does `),Bme=a("strong"),VXo=o("not"),XXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),zXo=o("from_pretrained()"),QXo=o(" to load the model weights."),WXo=l(),Pme=a("p"),HXo=o("Examples:"),UXo=l(),f(t0.$$.fragment),JXo=l(),Ze=a("div"),f(a0.$$.fragment),YXo=l(),$me=a("p"),KXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ZXo=l(),ln=a("p"),ezo=o("The model class to instantiate is selected based on the "),Ime=a("code"),ozo=o("model_type"),rzo=o(` property of the config object (either
passed as an argument or loaded from `),qme=a("code"),tzo=o("pretrained_model_name_or_path"),azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=a("code"),nzo=o("pretrained_model_name_or_path"),szo=o(":"),lzo=l(),n0=a("ul"),XF=a("li"),jme=a("strong"),izo=o("speech-encoder-decoder"),dzo=o(" \u2014 "),bG=a("a"),czo=o("SpeechEncoderDecoderModel"),fzo=o(" (Speech Encoder decoder model)"),mzo=l(),zF=a("li"),Dme=a("strong"),gzo=o("speech_to_text"),hzo=o(" \u2014 "),FG=a("a"),pzo=o("Speech2TextForConditionalGeneration"),_zo=o(" (Speech2Text model)"),uzo=l(),QF=a("p"),bzo=o("The model is set in evaluation mode by default using "),Gme=a("code"),Fzo=o("model.eval()"),vzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=a("code"),Tzo=o("model.train()"),Mzo=l(),Vme=a("p"),Ezo=o("Examples:"),Czo=l(),f(s0.$$.fragment),SRe=l(),Hd=a("h2"),WF=a("a"),Xme=a("span"),f(l0.$$.fragment),wzo=l(),zme=a("span"),Azo=o("AutoModelForAudioXVector"),RRe=l(),gr=a("div"),f(i0.$$.fragment),yzo=l(),Ud=a("p"),Lzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vG=a("a"),xzo=o("from_pretrained()"),kzo=o(" class method or the "),TG=a("a"),Szo=o("from_config()"),Rzo=o(` class
method.`),Bzo=l(),d0=a("p"),Pzo=o("This class cannot be instantiated directly using "),Qme=a("code"),$zo=o("__init__()"),Izo=o(" (throws an error)."),qzo=l(),lt=a("div"),f(c0.$$.fragment),Nzo=l(),Wme=a("p"),jzo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Dzo=l(),Jd=a("p"),Gzo=o(`Note:
Loading a model from its configuration file does `),Hme=a("strong"),Ozo=o("not"),Vzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),Xzo=o("from_pretrained()"),zzo=o(" to load the model weights."),Qzo=l(),Ume=a("p"),Wzo=o("Examples:"),Hzo=l(),f(f0.$$.fragment),Uzo=l(),eo=a("div"),f(m0.$$.fragment),Jzo=l(),Jme=a("p"),Yzo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Kzo=l(),dn=a("p"),Zzo=o("The model class to instantiate is selected based on the "),Yme=a("code"),eQo=o("model_type"),oQo=o(` property of the config object (either
passed as an argument or loaded from `),Kme=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(":"),sQo=l(),cn=a("ul"),HF=a("li"),ege=a("strong"),lQo=o("data2vec-audio"),iQo=o(" \u2014 "),EG=a("a"),dQo=o("Data2VecAudioForXVector"),cQo=o(" (Data2VecAudio model)"),fQo=l(),UF=a("li"),oge=a("strong"),mQo=o("unispeech-sat"),gQo=o(" \u2014 "),CG=a("a"),hQo=o("UniSpeechSatForXVector"),pQo=o(" (UniSpeechSat model)"),_Qo=l(),JF=a("li"),rge=a("strong"),uQo=o("wav2vec2"),bQo=o(" \u2014 "),wG=a("a"),FQo=o("Wav2Vec2ForXVector"),vQo=o(" (Wav2Vec2 model)"),TQo=l(),YF=a("li"),tge=a("strong"),MQo=o("wavlm"),EQo=o(" \u2014 "),AG=a("a"),CQo=o("WavLMForXVector"),wQo=o(" (WavLM model)"),AQo=l(),KF=a("p"),yQo=o("The model is set in evaluation mode by default using "),age=a("code"),LQo=o("model.eval()"),xQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),kQo=o("model.train()"),SQo=l(),sge=a("p"),RQo=o("Examples:"),BQo=l(),f(g0.$$.fragment),BRe=l(),Yd=a("h2"),ZF=a("a"),lge=a("span"),f(h0.$$.fragment),PQo=l(),ige=a("span"),$Qo=o("AutoModelForMaskedImageModeling"),PRe=l(),hr=a("div"),f(p0.$$.fragment),IQo=l(),Kd=a("p"),qQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yG=a("a"),NQo=o("from_pretrained()"),jQo=o(" class method or the "),LG=a("a"),DQo=o("from_config()"),GQo=o(` class
method.`),OQo=l(),_0=a("p"),VQo=o("This class cannot be instantiated directly using "),dge=a("code"),XQo=o("__init__()"),zQo=o(" (throws an error)."),QQo=l(),it=a("div"),f(u0.$$.fragment),WQo=l(),cge=a("p"),HQo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),UQo=l(),Zd=a("p"),JQo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),YQo=o("not"),KQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),ZQo=o("from_pretrained()"),eWo=o(" to load the model weights."),oWo=l(),mge=a("p"),rWo=o("Examples:"),tWo=l(),f(b0.$$.fragment),aWo=l(),oo=a("div"),f(F0.$$.fragment),nWo=l(),gge=a("p"),sWo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lWo=l(),fn=a("p"),iWo=o("The model class to instantiate is selected based on the "),hge=a("code"),dWo=o("model_type"),cWo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),fWo=o("pretrained_model_name_or_path"),mWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=a("code"),gWo=o("pretrained_model_name_or_path"),hWo=o(":"),pWo=l(),ec=a("ul"),ev=a("li"),uge=a("strong"),_Wo=o("deit"),uWo=o(" \u2014 "),kG=a("a"),bWo=o("DeiTForMaskedImageModeling"),FWo=o(" (DeiT model)"),vWo=l(),ov=a("li"),bge=a("strong"),TWo=o("swin"),MWo=o(" \u2014 "),SG=a("a"),EWo=o("SwinForMaskedImageModeling"),CWo=o(" (Swin model)"),wWo=l(),rv=a("li"),Fge=a("strong"),AWo=o("vit"),yWo=o(" \u2014 "),RG=a("a"),LWo=o("ViTForMaskedImageModeling"),xWo=o(" (ViT model)"),kWo=l(),tv=a("p"),SWo=o("The model is set in evaluation mode by default using "),vge=a("code"),RWo=o("model.eval()"),BWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),PWo=o("model.train()"),$Wo=l(),Mge=a("p"),IWo=o("Examples:"),qWo=l(),f(v0.$$.fragment),$Re=l(),oc=a("h2"),av=a("a"),Ege=a("span"),f(T0.$$.fragment),NWo=l(),Cge=a("span"),jWo=o("AutoModelForObjectDetection"),IRe=l(),pr=a("div"),f(M0.$$.fragment),DWo=l(),rc=a("p"),GWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BG=a("a"),OWo=o("from_pretrained()"),VWo=o(" class method or the "),PG=a("a"),XWo=o("from_config()"),zWo=o(` class
method.`),QWo=l(),E0=a("p"),WWo=o("This class cannot be instantiated directly using "),wge=a("code"),HWo=o("__init__()"),UWo=o(" (throws an error)."),JWo=l(),dt=a("div"),f(C0.$$.fragment),YWo=l(),Age=a("p"),KWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ZWo=l(),tc=a("p"),eHo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),oHo=o("not"),rHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),tHo=o("from_pretrained()"),aHo=o(" to load the model weights."),nHo=l(),Lge=a("p"),sHo=o("Examples:"),lHo=l(),f(w0.$$.fragment),iHo=l(),ro=a("div"),f(A0.$$.fragment),dHo=l(),xge=a("p"),cHo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),fHo=l(),mn=a("p"),mHo=o("The model class to instantiate is selected based on the "),kge=a("code"),gHo=o("model_type"),hHo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),pHo=o("pretrained_model_name_or_path"),_Ho=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),uHo=o("pretrained_model_name_or_path"),bHo=o(":"),FHo=l(),Bge=a("ul"),nv=a("li"),Pge=a("strong"),vHo=o("detr"),THo=o(" \u2014 "),IG=a("a"),MHo=o("DetrForObjectDetection"),EHo=o(" (DETR model)"),CHo=l(),sv=a("p"),wHo=o("The model is set in evaluation mode by default using "),$ge=a("code"),AHo=o("model.eval()"),yHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=a("code"),LHo=o("model.train()"),xHo=l(),qge=a("p"),kHo=o("Examples:"),SHo=l(),f(y0.$$.fragment),qRe=l(),ac=a("h2"),lv=a("a"),Nge=a("span"),f(L0.$$.fragment),RHo=l(),jge=a("span"),BHo=o("AutoModelForImageSegmentation"),NRe=l(),_r=a("div"),f(x0.$$.fragment),PHo=l(),nc=a("p"),$Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qG=a("a"),IHo=o("from_pretrained()"),qHo=o(" class method or the "),NG=a("a"),NHo=o("from_config()"),jHo=o(` class
method.`),DHo=l(),k0=a("p"),GHo=o("This class cannot be instantiated directly using "),Dge=a("code"),OHo=o("__init__()"),VHo=o(" (throws an error)."),XHo=l(),ct=a("div"),f(S0.$$.fragment),zHo=l(),Gge=a("p"),QHo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),WHo=l(),sc=a("p"),HHo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),UHo=o("not"),JHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=a("a"),YHo=o("from_pretrained()"),KHo=o(" to load the model weights."),ZHo=l(),Vge=a("p"),eUo=o("Examples:"),oUo=l(),f(R0.$$.fragment),rUo=l(),to=a("div"),f(B0.$$.fragment),tUo=l(),Xge=a("p"),aUo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),nUo=l(),gn=a("p"),sUo=o("The model class to instantiate is selected based on the "),zge=a("code"),lUo=o("model_type"),iUo=o(` property of the config object (either
passed as an argument or loaded from `),Qge=a("code"),dUo=o("pretrained_model_name_or_path"),cUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=a("code"),fUo=o("pretrained_model_name_or_path"),mUo=o(":"),gUo=l(),Hge=a("ul"),iv=a("li"),Uge=a("strong"),hUo=o("detr"),pUo=o(" \u2014 "),DG=a("a"),_Uo=o("DetrForSegmentation"),uUo=o(" (DETR model)"),bUo=l(),dv=a("p"),FUo=o("The model is set in evaluation mode by default using "),Jge=a("code"),vUo=o("model.eval()"),TUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=a("code"),MUo=o("model.train()"),EUo=l(),Kge=a("p"),CUo=o("Examples:"),wUo=l(),f(P0.$$.fragment),jRe=l(),lc=a("h2"),cv=a("a"),Zge=a("span"),f($0.$$.fragment),AUo=l(),ehe=a("span"),yUo=o("AutoModelForSemanticSegmentation"),DRe=l(),ur=a("div"),f(I0.$$.fragment),LUo=l(),ic=a("p"),xUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GG=a("a"),kUo=o("from_pretrained()"),SUo=o(" class method or the "),OG=a("a"),RUo=o("from_config()"),BUo=o(` class
method.`),PUo=l(),q0=a("p"),$Uo=o("This class cannot be instantiated directly using "),ohe=a("code"),IUo=o("__init__()"),qUo=o(" (throws an error)."),NUo=l(),ft=a("div"),f(N0.$$.fragment),jUo=l(),rhe=a("p"),DUo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),GUo=l(),dc=a("p"),OUo=o(`Note:
Loading a model from its configuration file does `),the=a("strong"),VUo=o("not"),XUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=a("a"),zUo=o("from_pretrained()"),QUo=o(" to load the model weights."),WUo=l(),ahe=a("p"),HUo=o("Examples:"),UUo=l(),f(j0.$$.fragment),JUo=l(),ao=a("div"),f(D0.$$.fragment),YUo=l(),nhe=a("p"),KUo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ZUo=l(),hn=a("p"),eJo=o("The model class to instantiate is selected based on the "),she=a("code"),oJo=o("model_type"),rJo=o(` property of the config object (either
passed as an argument or loaded from `),lhe=a("code"),tJo=o("pretrained_model_name_or_path"),aJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=a("code"),nJo=o("pretrained_model_name_or_path"),sJo=o(":"),lJo=l(),cc=a("ul"),fv=a("li"),dhe=a("strong"),iJo=o("beit"),dJo=o(" \u2014 "),XG=a("a"),cJo=o("BeitForSemanticSegmentation"),fJo=o(" (BEiT model)"),mJo=l(),mv=a("li"),che=a("strong"),gJo=o("dpt"),hJo=o(" \u2014 "),zG=a("a"),pJo=o("DPTForSemanticSegmentation"),_Jo=o(" (DPT model)"),uJo=l(),gv=a("li"),fhe=a("strong"),bJo=o("segformer"),FJo=o(" \u2014 "),QG=a("a"),vJo=o("SegformerForSemanticSegmentation"),TJo=o(" (SegFormer model)"),MJo=l(),hv=a("p"),EJo=o("The model is set in evaluation mode by default using "),mhe=a("code"),CJo=o("model.eval()"),wJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=a("code"),AJo=o("model.train()"),yJo=l(),hhe=a("p"),LJo=o("Examples:"),xJo=l(),f(G0.$$.fragment),GRe=l(),fc=a("h2"),pv=a("a"),phe=a("span"),f(O0.$$.fragment),kJo=l(),_he=a("span"),SJo=o("AutoModelForInstanceSegmentation"),ORe=l(),br=a("div"),f(V0.$$.fragment),RJo=l(),mc=a("p"),BJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WG=a("a"),PJo=o("from_pretrained()"),$Jo=o(" class method or the "),HG=a("a"),IJo=o("from_config()"),qJo=o(` class
method.`),NJo=l(),X0=a("p"),jJo=o("This class cannot be instantiated directly using "),uhe=a("code"),DJo=o("__init__()"),GJo=o(" (throws an error)."),OJo=l(),mt=a("div"),f(z0.$$.fragment),VJo=l(),bhe=a("p"),XJo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),zJo=l(),gc=a("p"),QJo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),WJo=o("not"),HJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=a("a"),UJo=o("from_pretrained()"),JJo=o(" to load the model weights."),YJo=l(),vhe=a("p"),KJo=o("Examples:"),ZJo=l(),f(Q0.$$.fragment),eYo=l(),no=a("div"),f(W0.$$.fragment),oYo=l(),The=a("p"),rYo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tYo=l(),pn=a("p"),aYo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),nYo=o("model_type"),sYo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),lYo=o("pretrained_model_name_or_path"),iYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),dYo=o("pretrained_model_name_or_path"),cYo=o(":"),fYo=l(),whe=a("ul"),_v=a("li"),Ahe=a("strong"),mYo=o("maskformer"),gYo=o(" \u2014 "),JG=a("a"),hYo=o("MaskFormerForInstanceSegmentation"),pYo=o(" (MaskFormer model)"),_Yo=l(),uv=a("p"),uYo=o("The model is set in evaluation mode by default using "),yhe=a("code"),bYo=o("model.eval()"),FYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),vYo=o("model.train()"),TYo=l(),xhe=a("p"),MYo=o("Examples:"),EYo=l(),f(H0.$$.fragment),VRe=l(),hc=a("h2"),bv=a("a"),khe=a("span"),f(U0.$$.fragment),CYo=l(),She=a("span"),wYo=o("TFAutoModel"),XRe=l(),Fr=a("div"),f(J0.$$.fragment),AYo=l(),pc=a("p"),yYo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YG=a("a"),LYo=o("from_pretrained()"),xYo=o(" class method or the "),KG=a("a"),kYo=o("from_config()"),SYo=o(` class
method.`),RYo=l(),Y0=a("p"),BYo=o("This class cannot be instantiated directly using "),Rhe=a("code"),PYo=o("__init__()"),$Yo=o(" (throws an error)."),IYo=l(),gt=a("div"),f(K0.$$.fragment),qYo=l(),Bhe=a("p"),NYo=o("Instantiates one of the base model classes of the library from a configuration."),jYo=l(),_c=a("p"),DYo=o(`Note:
Loading a model from its configuration file does `),Phe=a("strong"),GYo=o("not"),OYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),VYo=o("from_pretrained()"),XYo=o(" to load the model weights."),zYo=l(),$he=a("p"),QYo=o("Examples:"),WYo=l(),f(Z0.$$.fragment),HYo=l(),ho=a("div"),f(ey.$$.fragment),UYo=l(),Ihe=a("p"),JYo=o("Instantiate one of the base model classes of the library from a pretrained model."),YYo=l(),_n=a("p"),KYo=o("The model class to instantiate is selected based on the "),qhe=a("code"),ZYo=o("model_type"),eKo=o(` property of the config object (either
passed as an argument or loaded from `),Nhe=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(":"),nKo=l(),x=a("ul"),Fv=a("li"),Dhe=a("strong"),sKo=o("albert"),lKo=o(" \u2014 "),eO=a("a"),iKo=o("TFAlbertModel"),dKo=o(" (ALBERT model)"),cKo=l(),vv=a("li"),Ghe=a("strong"),fKo=o("bart"),mKo=o(" \u2014 "),oO=a("a"),gKo=o("TFBartModel"),hKo=o(" (BART model)"),pKo=l(),Tv=a("li"),Ohe=a("strong"),_Ko=o("bert"),uKo=o(" \u2014 "),rO=a("a"),bKo=o("TFBertModel"),FKo=o(" (BERT model)"),vKo=l(),Mv=a("li"),Vhe=a("strong"),TKo=o("blenderbot"),MKo=o(" \u2014 "),tO=a("a"),EKo=o("TFBlenderbotModel"),CKo=o(" (Blenderbot model)"),wKo=l(),Ev=a("li"),Xhe=a("strong"),AKo=o("blenderbot-small"),yKo=o(" \u2014 "),aO=a("a"),LKo=o("TFBlenderbotSmallModel"),xKo=o(" (BlenderbotSmall model)"),kKo=l(),Cv=a("li"),zhe=a("strong"),SKo=o("camembert"),RKo=o(" \u2014 "),nO=a("a"),BKo=o("TFCamembertModel"),PKo=o(" (CamemBERT model)"),$Ko=l(),wv=a("li"),Qhe=a("strong"),IKo=o("clip"),qKo=o(" \u2014 "),sO=a("a"),NKo=o("TFCLIPModel"),jKo=o(" (CLIP model)"),DKo=l(),Av=a("li"),Whe=a("strong"),GKo=o("convbert"),OKo=o(" \u2014 "),lO=a("a"),VKo=o("TFConvBertModel"),XKo=o(" (ConvBERT model)"),zKo=l(),yv=a("li"),Hhe=a("strong"),QKo=o("convnext"),WKo=o(" \u2014 "),iO=a("a"),HKo=o("TFConvNextModel"),UKo=o(" (ConvNext model)"),JKo=l(),Lv=a("li"),Uhe=a("strong"),YKo=o("ctrl"),KKo=o(" \u2014 "),dO=a("a"),ZKo=o("TFCTRLModel"),eZo=o(" (CTRL model)"),oZo=l(),xv=a("li"),Jhe=a("strong"),rZo=o("deberta"),tZo=o(" \u2014 "),cO=a("a"),aZo=o("TFDebertaModel"),nZo=o(" (DeBERTa model)"),sZo=l(),kv=a("li"),Yhe=a("strong"),lZo=o("deberta-v2"),iZo=o(" \u2014 "),fO=a("a"),dZo=o("TFDebertaV2Model"),cZo=o(" (DeBERTa-v2 model)"),fZo=l(),Sv=a("li"),Khe=a("strong"),mZo=o("distilbert"),gZo=o(" \u2014 "),mO=a("a"),hZo=o("TFDistilBertModel"),pZo=o(" (DistilBERT model)"),_Zo=l(),Rv=a("li"),Zhe=a("strong"),uZo=o("dpr"),bZo=o(" \u2014 "),gO=a("a"),FZo=o("TFDPRQuestionEncoder"),vZo=o(" (DPR model)"),TZo=l(),Bv=a("li"),epe=a("strong"),MZo=o("electra"),EZo=o(" \u2014 "),hO=a("a"),CZo=o("TFElectraModel"),wZo=o(" (ELECTRA model)"),AZo=l(),Pv=a("li"),ope=a("strong"),yZo=o("flaubert"),LZo=o(" \u2014 "),pO=a("a"),xZo=o("TFFlaubertModel"),kZo=o(" (FlauBERT model)"),SZo=l(),Os=a("li"),rpe=a("strong"),RZo=o("funnel"),BZo=o(" \u2014 "),_O=a("a"),PZo=o("TFFunnelModel"),$Zo=o(" or "),uO=a("a"),IZo=o("TFFunnelBaseModel"),qZo=o(" (Funnel Transformer model)"),NZo=l(),$v=a("li"),tpe=a("strong"),jZo=o("gpt2"),DZo=o(" \u2014 "),bO=a("a"),GZo=o("TFGPT2Model"),OZo=o(" (OpenAI GPT-2 model)"),VZo=l(),Iv=a("li"),ape=a("strong"),XZo=o("gptj"),zZo=o(" \u2014 "),FO=a("a"),QZo=o("TFGPTJModel"),WZo=o(" (GPT-J model)"),HZo=l(),qv=a("li"),npe=a("strong"),UZo=o("hubert"),JZo=o(" \u2014 "),vO=a("a"),YZo=o("TFHubertModel"),KZo=o(" (Hubert model)"),ZZo=l(),Nv=a("li"),spe=a("strong"),eer=o("layoutlm"),oer=o(" \u2014 "),TO=a("a"),rer=o("TFLayoutLMModel"),ter=o(" (LayoutLM model)"),aer=l(),jv=a("li"),lpe=a("strong"),ner=o("led"),ser=o(" \u2014 "),MO=a("a"),ler=o("TFLEDModel"),ier=o(" (LED model)"),der=l(),Dv=a("li"),ipe=a("strong"),cer=o("longformer"),fer=o(" \u2014 "),EO=a("a"),mer=o("TFLongformerModel"),ger=o(" (Longformer model)"),her=l(),Gv=a("li"),dpe=a("strong"),per=o("lxmert"),_er=o(" \u2014 "),CO=a("a"),uer=o("TFLxmertModel"),ber=o(" (LXMERT model)"),Fer=l(),Ov=a("li"),cpe=a("strong"),ver=o("marian"),Ter=o(" \u2014 "),wO=a("a"),Mer=o("TFMarianModel"),Eer=o(" (Marian model)"),Cer=l(),Vv=a("li"),fpe=a("strong"),wer=o("mbart"),Aer=o(" \u2014 "),AO=a("a"),yer=o("TFMBartModel"),Ler=o(" (mBART model)"),xer=l(),Xv=a("li"),mpe=a("strong"),ker=o("mobilebert"),Ser=o(" \u2014 "),yO=a("a"),Rer=o("TFMobileBertModel"),Ber=o(" (MobileBERT model)"),Per=l(),zv=a("li"),gpe=a("strong"),$er=o("mpnet"),Ier=o(" \u2014 "),LO=a("a"),qer=o("TFMPNetModel"),Ner=o(" (MPNet model)"),jer=l(),Qv=a("li"),hpe=a("strong"),Der=o("mt5"),Ger=o(" \u2014 "),xO=a("a"),Oer=o("TFMT5Model"),Ver=o(" (mT5 model)"),Xer=l(),Wv=a("li"),ppe=a("strong"),zer=o("openai-gpt"),Qer=o(" \u2014 "),kO=a("a"),Wer=o("TFOpenAIGPTModel"),Her=o(" (OpenAI GPT model)"),Uer=l(),Hv=a("li"),_pe=a("strong"),Jer=o("pegasus"),Yer=o(" \u2014 "),SO=a("a"),Ker=o("TFPegasusModel"),Zer=o(" (Pegasus model)"),eor=l(),Uv=a("li"),upe=a("strong"),oor=o("rembert"),ror=o(" \u2014 "),RO=a("a"),tor=o("TFRemBertModel"),aor=o(" (RemBERT model)"),nor=l(),Jv=a("li"),bpe=a("strong"),sor=o("roberta"),lor=o(" \u2014 "),BO=a("a"),ior=o("TFRobertaModel"),dor=o(" (RoBERTa model)"),cor=l(),Yv=a("li"),Fpe=a("strong"),mor=o("roformer"),gor=o(" \u2014 "),PO=a("a"),hor=o("TFRoFormerModel"),por=o(" (RoFormer model)"),_or=l(),Kv=a("li"),vpe=a("strong"),uor=o("speech_to_text"),bor=o(" \u2014 "),$O=a("a"),For=o("TFSpeech2TextModel"),vor=o(" (Speech2Text model)"),Tor=l(),Zv=a("li"),Tpe=a("strong"),Mor=o("t5"),Eor=o(" \u2014 "),IO=a("a"),Cor=o("TFT5Model"),wor=o(" (T5 model)"),Aor=l(),e6=a("li"),Mpe=a("strong"),yor=o("tapas"),Lor=o(" \u2014 "),qO=a("a"),xor=o("TFTapasModel"),kor=o(" (TAPAS model)"),Sor=l(),o6=a("li"),Epe=a("strong"),Ror=o("transfo-xl"),Bor=o(" \u2014 "),NO=a("a"),Por=o("TFTransfoXLModel"),$or=o(" (Transformer-XL model)"),Ior=l(),r6=a("li"),Cpe=a("strong"),qor=o("vit"),Nor=o(" \u2014 "),jO=a("a"),jor=o("TFViTModel"),Dor=o(" (ViT model)"),Gor=l(),t6=a("li"),wpe=a("strong"),Oor=o("vit_mae"),Vor=o(" \u2014 "),DO=a("a"),Xor=o("TFViTMAEModel"),zor=o(" (ViTMAE model)"),Qor=l(),a6=a("li"),Ape=a("strong"),Wor=o("wav2vec2"),Hor=o(" \u2014 "),GO=a("a"),Uor=o("TFWav2Vec2Model"),Jor=o(" (Wav2Vec2 model)"),Yor=l(),n6=a("li"),ype=a("strong"),Kor=o("xlm"),Zor=o(" \u2014 "),OO=a("a"),err=o("TFXLMModel"),orr=o(" (XLM model)"),rrr=l(),s6=a("li"),Lpe=a("strong"),trr=o("xlm-roberta"),arr=o(" \u2014 "),VO=a("a"),nrr=o("TFXLMRobertaModel"),srr=o(" (XLM-RoBERTa model)"),lrr=l(),l6=a("li"),xpe=a("strong"),irr=o("xlnet"),drr=o(" \u2014 "),XO=a("a"),crr=o("TFXLNetModel"),frr=o(" (XLNet model)"),mrr=l(),kpe=a("p"),grr=o("Examples:"),hrr=l(),f(oy.$$.fragment),zRe=l(),uc=a("h2"),i6=a("a"),Spe=a("span"),f(ry.$$.fragment),prr=l(),Rpe=a("span"),_rr=o("TFAutoModelForPreTraining"),QRe=l(),vr=a("div"),f(ty.$$.fragment),urr=l(),bc=a("p"),brr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=a("a"),Frr=o("from_pretrained()"),vrr=o(" class method or the "),QO=a("a"),Trr=o("from_config()"),Mrr=o(` class
method.`),Err=l(),ay=a("p"),Crr=o("This class cannot be instantiated directly using "),Bpe=a("code"),wrr=o("__init__()"),Arr=o(" (throws an error)."),yrr=l(),ht=a("div"),f(ny.$$.fragment),Lrr=l(),Ppe=a("p"),xrr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),krr=l(),Fc=a("p"),Srr=o(`Note:
Loading a model from its configuration file does `),$pe=a("strong"),Rrr=o("not"),Brr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),Prr=o("from_pretrained()"),$rr=o(" to load the model weights."),Irr=l(),Ipe=a("p"),qrr=o("Examples:"),Nrr=l(),f(sy.$$.fragment),jrr=l(),po=a("div"),f(ly.$$.fragment),Drr=l(),qpe=a("p"),Grr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Orr=l(),un=a("p"),Vrr=o("The model class to instantiate is selected based on the "),Npe=a("code"),Xrr=o("model_type"),zrr=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),Qrr=o("pretrained_model_name_or_path"),Wrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),Hrr=o("pretrained_model_name_or_path"),Urr=o(":"),Jrr=l(),H=a("ul"),d6=a("li"),Gpe=a("strong"),Yrr=o("albert"),Krr=o(" \u2014 "),HO=a("a"),Zrr=o("TFAlbertForPreTraining"),etr=o(" (ALBERT model)"),otr=l(),c6=a("li"),Ope=a("strong"),rtr=o("bart"),ttr=o(" \u2014 "),UO=a("a"),atr=o("TFBartForConditionalGeneration"),ntr=o(" (BART model)"),str=l(),f6=a("li"),Vpe=a("strong"),ltr=o("bert"),itr=o(" \u2014 "),JO=a("a"),dtr=o("TFBertForPreTraining"),ctr=o(" (BERT model)"),ftr=l(),m6=a("li"),Xpe=a("strong"),mtr=o("camembert"),gtr=o(" \u2014 "),YO=a("a"),htr=o("TFCamembertForMaskedLM"),ptr=o(" (CamemBERT model)"),_tr=l(),g6=a("li"),zpe=a("strong"),utr=o("ctrl"),btr=o(" \u2014 "),KO=a("a"),Ftr=o("TFCTRLLMHeadModel"),vtr=o(" (CTRL model)"),Ttr=l(),h6=a("li"),Qpe=a("strong"),Mtr=o("distilbert"),Etr=o(" \u2014 "),ZO=a("a"),Ctr=o("TFDistilBertForMaskedLM"),wtr=o(" (DistilBERT model)"),Atr=l(),p6=a("li"),Wpe=a("strong"),ytr=o("electra"),Ltr=o(" \u2014 "),eV=a("a"),xtr=o("TFElectraForPreTraining"),ktr=o(" (ELECTRA model)"),Str=l(),_6=a("li"),Hpe=a("strong"),Rtr=o("flaubert"),Btr=o(" \u2014 "),oV=a("a"),Ptr=o("TFFlaubertWithLMHeadModel"),$tr=o(" (FlauBERT model)"),Itr=l(),u6=a("li"),Upe=a("strong"),qtr=o("funnel"),Ntr=o(" \u2014 "),rV=a("a"),jtr=o("TFFunnelForPreTraining"),Dtr=o(" (Funnel Transformer model)"),Gtr=l(),b6=a("li"),Jpe=a("strong"),Otr=o("gpt2"),Vtr=o(" \u2014 "),tV=a("a"),Xtr=o("TFGPT2LMHeadModel"),ztr=o(" (OpenAI GPT-2 model)"),Qtr=l(),F6=a("li"),Ype=a("strong"),Wtr=o("layoutlm"),Htr=o(" \u2014 "),aV=a("a"),Utr=o("TFLayoutLMForMaskedLM"),Jtr=o(" (LayoutLM model)"),Ytr=l(),v6=a("li"),Kpe=a("strong"),Ktr=o("lxmert"),Ztr=o(" \u2014 "),nV=a("a"),ear=o("TFLxmertForPreTraining"),oar=o(" (LXMERT model)"),rar=l(),T6=a("li"),Zpe=a("strong"),tar=o("mobilebert"),aar=o(" \u2014 "),sV=a("a"),nar=o("TFMobileBertForPreTraining"),sar=o(" (MobileBERT model)"),lar=l(),M6=a("li"),e_e=a("strong"),iar=o("mpnet"),dar=o(" \u2014 "),lV=a("a"),car=o("TFMPNetForMaskedLM"),far=o(" (MPNet model)"),mar=l(),E6=a("li"),o_e=a("strong"),gar=o("openai-gpt"),har=o(" \u2014 "),iV=a("a"),par=o("TFOpenAIGPTLMHeadModel"),_ar=o(" (OpenAI GPT model)"),uar=l(),C6=a("li"),r_e=a("strong"),bar=o("roberta"),Far=o(" \u2014 "),dV=a("a"),Tar=o("TFRobertaForMaskedLM"),Mar=o(" (RoBERTa model)"),Ear=l(),w6=a("li"),t_e=a("strong"),Car=o("t5"),war=o(" \u2014 "),cV=a("a"),Aar=o("TFT5ForConditionalGeneration"),yar=o(" (T5 model)"),Lar=l(),A6=a("li"),a_e=a("strong"),xar=o("tapas"),kar=o(" \u2014 "),fV=a("a"),Sar=o("TFTapasForMaskedLM"),Rar=o(" (TAPAS model)"),Bar=l(),y6=a("li"),n_e=a("strong"),Par=o("transfo-xl"),$ar=o(" \u2014 "),mV=a("a"),Iar=o("TFTransfoXLLMHeadModel"),qar=o(" (Transformer-XL model)"),Nar=l(),L6=a("li"),s_e=a("strong"),jar=o("vit_mae"),Dar=o(" \u2014 "),gV=a("a"),Gar=o("TFViTMAEForPreTraining"),Oar=o(" (ViTMAE model)"),Var=l(),x6=a("li"),l_e=a("strong"),Xar=o("xlm"),zar=o(" \u2014 "),hV=a("a"),Qar=o("TFXLMWithLMHeadModel"),War=o(" (XLM model)"),Har=l(),k6=a("li"),i_e=a("strong"),Uar=o("xlm-roberta"),Jar=o(" \u2014 "),pV=a("a"),Yar=o("TFXLMRobertaForMaskedLM"),Kar=o(" (XLM-RoBERTa model)"),Zar=l(),S6=a("li"),d_e=a("strong"),enr=o("xlnet"),onr=o(" \u2014 "),_V=a("a"),rnr=o("TFXLNetLMHeadModel"),tnr=o(" (XLNet model)"),anr=l(),c_e=a("p"),nnr=o("Examples:"),snr=l(),f(iy.$$.fragment),WRe=l(),vc=a("h2"),R6=a("a"),f_e=a("span"),f(dy.$$.fragment),lnr=l(),m_e=a("span"),inr=o("TFAutoModelForCausalLM"),HRe=l(),Tr=a("div"),f(cy.$$.fragment),dnr=l(),Tc=a("p"),cnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uV=a("a"),fnr=o("from_pretrained()"),mnr=o(" class method or the "),bV=a("a"),gnr=o("from_config()"),hnr=o(` class
method.`),pnr=l(),fy=a("p"),_nr=o("This class cannot be instantiated directly using "),g_e=a("code"),unr=o("__init__()"),bnr=o(" (throws an error)."),Fnr=l(),pt=a("div"),f(my.$$.fragment),vnr=l(),h_e=a("p"),Tnr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Mnr=l(),Mc=a("p"),Enr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),Cnr=o("not"),wnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),Anr=o("from_pretrained()"),ynr=o(" to load the model weights."),Lnr=l(),__e=a("p"),xnr=o("Examples:"),knr=l(),f(gy.$$.fragment),Snr=l(),_o=a("div"),f(hy.$$.fragment),Rnr=l(),u_e=a("p"),Bnr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Pnr=l(),bn=a("p"),$nr=o("The model class to instantiate is selected based on the "),b_e=a("code"),Inr=o("model_type"),qnr=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),Nnr=o("pretrained_model_name_or_path"),jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=a("code"),Dnr=o("pretrained_model_name_or_path"),Gnr=o(":"),Onr=l(),ce=a("ul"),B6=a("li"),T_e=a("strong"),Vnr=o("bert"),Xnr=o(" \u2014 "),vV=a("a"),znr=o("TFBertLMHeadModel"),Qnr=o(" (BERT model)"),Wnr=l(),P6=a("li"),M_e=a("strong"),Hnr=o("camembert"),Unr=o(" \u2014 "),TV=a("a"),Jnr=o("TFCamembertForCausalLM"),Ynr=o(" (CamemBERT model)"),Knr=l(),$6=a("li"),E_e=a("strong"),Znr=o("ctrl"),esr=o(" \u2014 "),MV=a("a"),osr=o("TFCTRLLMHeadModel"),rsr=o(" (CTRL model)"),tsr=l(),I6=a("li"),C_e=a("strong"),asr=o("gpt2"),nsr=o(" \u2014 "),EV=a("a"),ssr=o("TFGPT2LMHeadModel"),lsr=o(" (OpenAI GPT-2 model)"),isr=l(),q6=a("li"),w_e=a("strong"),dsr=o("gptj"),csr=o(" \u2014 "),CV=a("a"),fsr=o("TFGPTJForCausalLM"),msr=o(" (GPT-J model)"),gsr=l(),N6=a("li"),A_e=a("strong"),hsr=o("openai-gpt"),psr=o(" \u2014 "),wV=a("a"),_sr=o("TFOpenAIGPTLMHeadModel"),usr=o(" (OpenAI GPT model)"),bsr=l(),j6=a("li"),y_e=a("strong"),Fsr=o("rembert"),vsr=o(" \u2014 "),AV=a("a"),Tsr=o("TFRemBertForCausalLM"),Msr=o(" (RemBERT model)"),Esr=l(),D6=a("li"),L_e=a("strong"),Csr=o("roberta"),wsr=o(" \u2014 "),yV=a("a"),Asr=o("TFRobertaForCausalLM"),ysr=o(" (RoBERTa model)"),Lsr=l(),G6=a("li"),x_e=a("strong"),xsr=o("roformer"),ksr=o(" \u2014 "),LV=a("a"),Ssr=o("TFRoFormerForCausalLM"),Rsr=o(" (RoFormer model)"),Bsr=l(),O6=a("li"),k_e=a("strong"),Psr=o("transfo-xl"),$sr=o(" \u2014 "),xV=a("a"),Isr=o("TFTransfoXLLMHeadModel"),qsr=o(" (Transformer-XL model)"),Nsr=l(),V6=a("li"),S_e=a("strong"),jsr=o("xlm"),Dsr=o(" \u2014 "),kV=a("a"),Gsr=o("TFXLMWithLMHeadModel"),Osr=o(" (XLM model)"),Vsr=l(),X6=a("li"),R_e=a("strong"),Xsr=o("xlnet"),zsr=o(" \u2014 "),SV=a("a"),Qsr=o("TFXLNetLMHeadModel"),Wsr=o(" (XLNet model)"),Hsr=l(),B_e=a("p"),Usr=o("Examples:"),Jsr=l(),f(py.$$.fragment),URe=l(),Ec=a("h2"),z6=a("a"),P_e=a("span"),f(_y.$$.fragment),Ysr=l(),$_e=a("span"),Ksr=o("TFAutoModelForImageClassification"),JRe=l(),Mr=a("div"),f(uy.$$.fragment),Zsr=l(),Cc=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),olr=o("from_pretrained()"),rlr=o(" class method or the "),BV=a("a"),tlr=o("from_config()"),alr=o(` class
method.`),nlr=l(),by=a("p"),slr=o("This class cannot be instantiated directly using "),I_e=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),_t=a("div"),f(Fy.$$.fragment),clr=l(),q_e=a("p"),flr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),mlr=l(),wc=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),N_e=a("strong"),hlr=o("not"),plr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=a("a"),_lr=o("from_pretrained()"),ulr=o(" to load the model weights."),blr=l(),j_e=a("p"),Flr=o("Examples:"),vlr=l(),f(vy.$$.fragment),Tlr=l(),uo=a("div"),f(Ty.$$.fragment),Mlr=l(),D_e=a("p"),Elr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Clr=l(),Fn=a("p"),wlr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Alr=o("model_type"),ylr=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),Llr=o("pretrained_model_name_or_path"),xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),klr=o("pretrained_model_name_or_path"),Slr=o(":"),Rlr=l(),My=a("ul"),Q6=a("li"),X_e=a("strong"),Blr=o("convnext"),Plr=o(" \u2014 "),$V=a("a"),$lr=o("TFConvNextForImageClassification"),Ilr=o(" (ConvNext model)"),qlr=l(),W6=a("li"),z_e=a("strong"),Nlr=o("vit"),jlr=o(" \u2014 "),IV=a("a"),Dlr=o("TFViTForImageClassification"),Glr=o(" (ViT model)"),Olr=l(),Q_e=a("p"),Vlr=o("Examples:"),Xlr=l(),f(Ey.$$.fragment),YRe=l(),Ac=a("h2"),H6=a("a"),W_e=a("span"),f(Cy.$$.fragment),zlr=l(),H_e=a("span"),Qlr=o("TFAutoModelForMaskedLM"),KRe=l(),Er=a("div"),f(wy.$$.fragment),Wlr=l(),yc=a("p"),Hlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qV=a("a"),Ulr=o("from_pretrained()"),Jlr=o(" class method or the "),NV=a("a"),Ylr=o("from_config()"),Klr=o(` class
method.`),Zlr=l(),Ay=a("p"),eir=o("This class cannot be instantiated directly using "),U_e=a("code"),oir=o("__init__()"),rir=o(" (throws an error)."),tir=l(),ut=a("div"),f(yy.$$.fragment),air=l(),J_e=a("p"),nir=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sir=l(),Lc=a("p"),lir=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),iir=o("not"),dir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=a("a"),cir=o("from_pretrained()"),fir=o(" to load the model weights."),mir=l(),K_e=a("p"),gir=o("Examples:"),hir=l(),f(Ly.$$.fragment),pir=l(),bo=a("div"),f(xy.$$.fragment),_ir=l(),Z_e=a("p"),uir=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),bir=l(),vn=a("p"),Fir=o("The model class to instantiate is selected based on the "),eue=a("code"),vir=o("model_type"),Tir=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),Mir=o("pretrained_model_name_or_path"),Eir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),Cir=o("pretrained_model_name_or_path"),wir=o(":"),Air=l(),J=a("ul"),U6=a("li"),tue=a("strong"),yir=o("albert"),Lir=o(" \u2014 "),DV=a("a"),xir=o("TFAlbertForMaskedLM"),kir=o(" (ALBERT model)"),Sir=l(),J6=a("li"),aue=a("strong"),Rir=o("bert"),Bir=o(" \u2014 "),GV=a("a"),Pir=o("TFBertForMaskedLM"),$ir=o(" (BERT model)"),Iir=l(),Y6=a("li"),nue=a("strong"),qir=o("camembert"),Nir=o(" \u2014 "),OV=a("a"),jir=o("TFCamembertForMaskedLM"),Dir=o(" (CamemBERT model)"),Gir=l(),K6=a("li"),sue=a("strong"),Oir=o("convbert"),Vir=o(" \u2014 "),VV=a("a"),Xir=o("TFConvBertForMaskedLM"),zir=o(" (ConvBERT model)"),Qir=l(),Z6=a("li"),lue=a("strong"),Wir=o("deberta"),Hir=o(" \u2014 "),XV=a("a"),Uir=o("TFDebertaForMaskedLM"),Jir=o(" (DeBERTa model)"),Yir=l(),eT=a("li"),iue=a("strong"),Kir=o("deberta-v2"),Zir=o(" \u2014 "),zV=a("a"),edr=o("TFDebertaV2ForMaskedLM"),odr=o(" (DeBERTa-v2 model)"),rdr=l(),oT=a("li"),due=a("strong"),tdr=o("distilbert"),adr=o(" \u2014 "),QV=a("a"),ndr=o("TFDistilBertForMaskedLM"),sdr=o(" (DistilBERT model)"),ldr=l(),rT=a("li"),cue=a("strong"),idr=o("electra"),ddr=o(" \u2014 "),WV=a("a"),cdr=o("TFElectraForMaskedLM"),fdr=o(" (ELECTRA model)"),mdr=l(),tT=a("li"),fue=a("strong"),gdr=o("flaubert"),hdr=o(" \u2014 "),HV=a("a"),pdr=o("TFFlaubertWithLMHeadModel"),_dr=o(" (FlauBERT model)"),udr=l(),aT=a("li"),mue=a("strong"),bdr=o("funnel"),Fdr=o(" \u2014 "),UV=a("a"),vdr=o("TFFunnelForMaskedLM"),Tdr=o(" (Funnel Transformer model)"),Mdr=l(),nT=a("li"),gue=a("strong"),Edr=o("layoutlm"),Cdr=o(" \u2014 "),JV=a("a"),wdr=o("TFLayoutLMForMaskedLM"),Adr=o(" (LayoutLM model)"),ydr=l(),sT=a("li"),hue=a("strong"),Ldr=o("longformer"),xdr=o(" \u2014 "),YV=a("a"),kdr=o("TFLongformerForMaskedLM"),Sdr=o(" (Longformer model)"),Rdr=l(),lT=a("li"),pue=a("strong"),Bdr=o("mobilebert"),Pdr=o(" \u2014 "),KV=a("a"),$dr=o("TFMobileBertForMaskedLM"),Idr=o(" (MobileBERT model)"),qdr=l(),iT=a("li"),_ue=a("strong"),Ndr=o("mpnet"),jdr=o(" \u2014 "),ZV=a("a"),Ddr=o("TFMPNetForMaskedLM"),Gdr=o(" (MPNet model)"),Odr=l(),dT=a("li"),uue=a("strong"),Vdr=o("rembert"),Xdr=o(" \u2014 "),eX=a("a"),zdr=o("TFRemBertForMaskedLM"),Qdr=o(" (RemBERT model)"),Wdr=l(),cT=a("li"),bue=a("strong"),Hdr=o("roberta"),Udr=o(" \u2014 "),oX=a("a"),Jdr=o("TFRobertaForMaskedLM"),Ydr=o(" (RoBERTa model)"),Kdr=l(),fT=a("li"),Fue=a("strong"),Zdr=o("roformer"),ecr=o(" \u2014 "),rX=a("a"),ocr=o("TFRoFormerForMaskedLM"),rcr=o(" (RoFormer model)"),tcr=l(),mT=a("li"),vue=a("strong"),acr=o("tapas"),ncr=o(" \u2014 "),tX=a("a"),scr=o("TFTapasForMaskedLM"),lcr=o(" (TAPAS model)"),icr=l(),gT=a("li"),Tue=a("strong"),dcr=o("xlm"),ccr=o(" \u2014 "),aX=a("a"),fcr=o("TFXLMWithLMHeadModel"),mcr=o(" (XLM model)"),gcr=l(),hT=a("li"),Mue=a("strong"),hcr=o("xlm-roberta"),pcr=o(" \u2014 "),nX=a("a"),_cr=o("TFXLMRobertaForMaskedLM"),ucr=o(" (XLM-RoBERTa model)"),bcr=l(),Eue=a("p"),Fcr=o("Examples:"),vcr=l(),f(ky.$$.fragment),ZRe=l(),xc=a("h2"),pT=a("a"),Cue=a("span"),f(Sy.$$.fragment),Tcr=l(),wue=a("span"),Mcr=o("TFAutoModelForSeq2SeqLM"),eBe=l(),Cr=a("div"),f(Ry.$$.fragment),Ecr=l(),kc=a("p"),Ccr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sX=a("a"),wcr=o("from_pretrained()"),Acr=o(" class method or the "),lX=a("a"),ycr=o("from_config()"),Lcr=o(` class
method.`),xcr=l(),By=a("p"),kcr=o("This class cannot be instantiated directly using "),Aue=a("code"),Scr=o("__init__()"),Rcr=o(" (throws an error)."),Bcr=l(),bt=a("div"),f(Py.$$.fragment),Pcr=l(),yue=a("p"),$cr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Icr=l(),Sc=a("p"),qcr=o(`Note:
Loading a model from its configuration file does `),Lue=a("strong"),Ncr=o("not"),jcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),Dcr=o("from_pretrained()"),Gcr=o(" to load the model weights."),Ocr=l(),xue=a("p"),Vcr=o("Examples:"),Xcr=l(),f($y.$$.fragment),zcr=l(),Fo=a("div"),f(Iy.$$.fragment),Qcr=l(),kue=a("p"),Wcr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hcr=l(),Tn=a("p"),Ucr=o("The model class to instantiate is selected based on the "),Sue=a("code"),Jcr=o("model_type"),Ycr=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),Kcr=o("pretrained_model_name_or_path"),Zcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=a("code"),efr=o("pretrained_model_name_or_path"),ofr=o(":"),rfr=l(),ue=a("ul"),_T=a("li"),Pue=a("strong"),tfr=o("bart"),afr=o(" \u2014 "),dX=a("a"),nfr=o("TFBartForConditionalGeneration"),sfr=o(" (BART model)"),lfr=l(),uT=a("li"),$ue=a("strong"),ifr=o("blenderbot"),dfr=o(" \u2014 "),cX=a("a"),cfr=o("TFBlenderbotForConditionalGeneration"),ffr=o(" (Blenderbot model)"),mfr=l(),bT=a("li"),Iue=a("strong"),gfr=o("blenderbot-small"),hfr=o(" \u2014 "),fX=a("a"),pfr=o("TFBlenderbotSmallForConditionalGeneration"),_fr=o(" (BlenderbotSmall model)"),ufr=l(),FT=a("li"),que=a("strong"),bfr=o("encoder-decoder"),Ffr=o(" \u2014 "),mX=a("a"),vfr=o("TFEncoderDecoderModel"),Tfr=o(" (Encoder decoder model)"),Mfr=l(),vT=a("li"),Nue=a("strong"),Efr=o("led"),Cfr=o(" \u2014 "),gX=a("a"),wfr=o("TFLEDForConditionalGeneration"),Afr=o(" (LED model)"),yfr=l(),TT=a("li"),jue=a("strong"),Lfr=o("marian"),xfr=o(" \u2014 "),hX=a("a"),kfr=o("TFMarianMTModel"),Sfr=o(" (Marian model)"),Rfr=l(),MT=a("li"),Due=a("strong"),Bfr=o("mbart"),Pfr=o(" \u2014 "),pX=a("a"),$fr=o("TFMBartForConditionalGeneration"),Ifr=o(" (mBART model)"),qfr=l(),ET=a("li"),Gue=a("strong"),Nfr=o("mt5"),jfr=o(" \u2014 "),_X=a("a"),Dfr=o("TFMT5ForConditionalGeneration"),Gfr=o(" (mT5 model)"),Ofr=l(),CT=a("li"),Oue=a("strong"),Vfr=o("pegasus"),Xfr=o(" \u2014 "),uX=a("a"),zfr=o("TFPegasusForConditionalGeneration"),Qfr=o(" (Pegasus model)"),Wfr=l(),wT=a("li"),Vue=a("strong"),Hfr=o("t5"),Ufr=o(" \u2014 "),bX=a("a"),Jfr=o("TFT5ForConditionalGeneration"),Yfr=o(" (T5 model)"),Kfr=l(),Xue=a("p"),Zfr=o("Examples:"),emr=l(),f(qy.$$.fragment),oBe=l(),Rc=a("h2"),AT=a("a"),zue=a("span"),f(Ny.$$.fragment),omr=l(),Que=a("span"),rmr=o("TFAutoModelForSequenceClassification"),rBe=l(),wr=a("div"),f(jy.$$.fragment),tmr=l(),Bc=a("p"),amr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FX=a("a"),nmr=o("from_pretrained()"),smr=o(" class method or the "),vX=a("a"),lmr=o("from_config()"),imr=o(` class
method.`),dmr=l(),Dy=a("p"),cmr=o("This class cannot be instantiated directly using "),Wue=a("code"),fmr=o("__init__()"),mmr=o(" (throws an error)."),gmr=l(),Ft=a("div"),f(Gy.$$.fragment),hmr=l(),Hue=a("p"),pmr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_mr=l(),Pc=a("p"),umr=o(`Note:
Loading a model from its configuration file does `),Uue=a("strong"),bmr=o("not"),Fmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=a("a"),vmr=o("from_pretrained()"),Tmr=o(" to load the model weights."),Mmr=l(),Jue=a("p"),Emr=o("Examples:"),Cmr=l(),f(Oy.$$.fragment),wmr=l(),vo=a("div"),f(Vy.$$.fragment),Amr=l(),Yue=a("p"),ymr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lmr=l(),Mn=a("p"),xmr=o("The model class to instantiate is selected based on the "),Kue=a("code"),kmr=o("model_type"),Smr=o(` property of the config object (either
passed as an argument or loaded from `),Zue=a("code"),Rmr=o("pretrained_model_name_or_path"),Bmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=a("code"),Pmr=o("pretrained_model_name_or_path"),$mr=o(":"),Imr=l(),V=a("ul"),yT=a("li"),o1e=a("strong"),qmr=o("albert"),Nmr=o(" \u2014 "),MX=a("a"),jmr=o("TFAlbertForSequenceClassification"),Dmr=o(" (ALBERT model)"),Gmr=l(),LT=a("li"),r1e=a("strong"),Omr=o("bert"),Vmr=o(" \u2014 "),EX=a("a"),Xmr=o("TFBertForSequenceClassification"),zmr=o(" (BERT model)"),Qmr=l(),xT=a("li"),t1e=a("strong"),Wmr=o("camembert"),Hmr=o(" \u2014 "),CX=a("a"),Umr=o("TFCamembertForSequenceClassification"),Jmr=o(" (CamemBERT model)"),Ymr=l(),kT=a("li"),a1e=a("strong"),Kmr=o("convbert"),Zmr=o(" \u2014 "),wX=a("a"),egr=o("TFConvBertForSequenceClassification"),ogr=o(" (ConvBERT model)"),rgr=l(),ST=a("li"),n1e=a("strong"),tgr=o("ctrl"),agr=o(" \u2014 "),AX=a("a"),ngr=o("TFCTRLForSequenceClassification"),sgr=o(" (CTRL model)"),lgr=l(),RT=a("li"),s1e=a("strong"),igr=o("deberta"),dgr=o(" \u2014 "),yX=a("a"),cgr=o("TFDebertaForSequenceClassification"),fgr=o(" (DeBERTa model)"),mgr=l(),BT=a("li"),l1e=a("strong"),ggr=o("deberta-v2"),hgr=o(" \u2014 "),LX=a("a"),pgr=o("TFDebertaV2ForSequenceClassification"),_gr=o(" (DeBERTa-v2 model)"),ugr=l(),PT=a("li"),i1e=a("strong"),bgr=o("distilbert"),Fgr=o(" \u2014 "),xX=a("a"),vgr=o("TFDistilBertForSequenceClassification"),Tgr=o(" (DistilBERT model)"),Mgr=l(),$T=a("li"),d1e=a("strong"),Egr=o("electra"),Cgr=o(" \u2014 "),kX=a("a"),wgr=o("TFElectraForSequenceClassification"),Agr=o(" (ELECTRA model)"),ygr=l(),IT=a("li"),c1e=a("strong"),Lgr=o("flaubert"),xgr=o(" \u2014 "),SX=a("a"),kgr=o("TFFlaubertForSequenceClassification"),Sgr=o(" (FlauBERT model)"),Rgr=l(),qT=a("li"),f1e=a("strong"),Bgr=o("funnel"),Pgr=o(" \u2014 "),RX=a("a"),$gr=o("TFFunnelForSequenceClassification"),Igr=o(" (Funnel Transformer model)"),qgr=l(),NT=a("li"),m1e=a("strong"),Ngr=o("gpt2"),jgr=o(" \u2014 "),BX=a("a"),Dgr=o("TFGPT2ForSequenceClassification"),Ggr=o(" (OpenAI GPT-2 model)"),Ogr=l(),jT=a("li"),g1e=a("strong"),Vgr=o("gptj"),Xgr=o(" \u2014 "),PX=a("a"),zgr=o("TFGPTJForSequenceClassification"),Qgr=o(" (GPT-J model)"),Wgr=l(),DT=a("li"),h1e=a("strong"),Hgr=o("layoutlm"),Ugr=o(" \u2014 "),$X=a("a"),Jgr=o("TFLayoutLMForSequenceClassification"),Ygr=o(" (LayoutLM model)"),Kgr=l(),GT=a("li"),p1e=a("strong"),Zgr=o("longformer"),ehr=o(" \u2014 "),IX=a("a"),ohr=o("TFLongformerForSequenceClassification"),rhr=o(" (Longformer model)"),thr=l(),OT=a("li"),_1e=a("strong"),ahr=o("mobilebert"),nhr=o(" \u2014 "),qX=a("a"),shr=o("TFMobileBertForSequenceClassification"),lhr=o(" (MobileBERT model)"),ihr=l(),VT=a("li"),u1e=a("strong"),dhr=o("mpnet"),chr=o(" \u2014 "),NX=a("a"),fhr=o("TFMPNetForSequenceClassification"),mhr=o(" (MPNet model)"),ghr=l(),XT=a("li"),b1e=a("strong"),hhr=o("openai-gpt"),phr=o(" \u2014 "),jX=a("a"),_hr=o("TFOpenAIGPTForSequenceClassification"),uhr=o(" (OpenAI GPT model)"),bhr=l(),zT=a("li"),F1e=a("strong"),Fhr=o("rembert"),vhr=o(" \u2014 "),DX=a("a"),Thr=o("TFRemBertForSequenceClassification"),Mhr=o(" (RemBERT model)"),Ehr=l(),QT=a("li"),v1e=a("strong"),Chr=o("roberta"),whr=o(" \u2014 "),GX=a("a"),Ahr=o("TFRobertaForSequenceClassification"),yhr=o(" (RoBERTa model)"),Lhr=l(),WT=a("li"),T1e=a("strong"),xhr=o("roformer"),khr=o(" \u2014 "),OX=a("a"),Shr=o("TFRoFormerForSequenceClassification"),Rhr=o(" (RoFormer model)"),Bhr=l(),HT=a("li"),M1e=a("strong"),Phr=o("tapas"),$hr=o(" \u2014 "),VX=a("a"),Ihr=o("TFTapasForSequenceClassification"),qhr=o(" (TAPAS model)"),Nhr=l(),UT=a("li"),E1e=a("strong"),jhr=o("transfo-xl"),Dhr=o(" \u2014 "),XX=a("a"),Ghr=o("TFTransfoXLForSequenceClassification"),Ohr=o(" (Transformer-XL model)"),Vhr=l(),JT=a("li"),C1e=a("strong"),Xhr=o("xlm"),zhr=o(" \u2014 "),zX=a("a"),Qhr=o("TFXLMForSequenceClassification"),Whr=o(" (XLM model)"),Hhr=l(),YT=a("li"),w1e=a("strong"),Uhr=o("xlm-roberta"),Jhr=o(" \u2014 "),QX=a("a"),Yhr=o("TFXLMRobertaForSequenceClassification"),Khr=o(" (XLM-RoBERTa model)"),Zhr=l(),KT=a("li"),A1e=a("strong"),epr=o("xlnet"),opr=o(" \u2014 "),WX=a("a"),rpr=o("TFXLNetForSequenceClassification"),tpr=o(" (XLNet model)"),apr=l(),y1e=a("p"),npr=o("Examples:"),spr=l(),f(Xy.$$.fragment),tBe=l(),$c=a("h2"),ZT=a("a"),L1e=a("span"),f(zy.$$.fragment),lpr=l(),x1e=a("span"),ipr=o("TFAutoModelForMultipleChoice"),aBe=l(),Ar=a("div"),f(Qy.$$.fragment),dpr=l(),Ic=a("p"),cpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HX=a("a"),fpr=o("from_pretrained()"),mpr=o(" class method or the "),UX=a("a"),gpr=o("from_config()"),hpr=o(` class
method.`),ppr=l(),Wy=a("p"),_pr=o("This class cannot be instantiated directly using "),k1e=a("code"),upr=o("__init__()"),bpr=o(" (throws an error)."),Fpr=l(),vt=a("div"),f(Hy.$$.fragment),vpr=l(),S1e=a("p"),Tpr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mpr=l(),qc=a("p"),Epr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Cpr=o("not"),wpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=a("a"),Apr=o("from_pretrained()"),ypr=o(" to load the model weights."),Lpr=l(),B1e=a("p"),xpr=o("Examples:"),kpr=l(),f(Uy.$$.fragment),Spr=l(),To=a("div"),f(Jy.$$.fragment),Rpr=l(),P1e=a("p"),Bpr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Ppr=l(),En=a("p"),$pr=o("The model class to instantiate is selected based on the "),$1e=a("code"),Ipr=o("model_type"),qpr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),Npr=o("pretrained_model_name_or_path"),jpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),Dpr=o("pretrained_model_name_or_path"),Gpr=o(":"),Opr=l(),ae=a("ul"),eM=a("li"),N1e=a("strong"),Vpr=o("albert"),Xpr=o(" \u2014 "),YX=a("a"),zpr=o("TFAlbertForMultipleChoice"),Qpr=o(" (ALBERT model)"),Wpr=l(),oM=a("li"),j1e=a("strong"),Hpr=o("bert"),Upr=o(" \u2014 "),KX=a("a"),Jpr=o("TFBertForMultipleChoice"),Ypr=o(" (BERT model)"),Kpr=l(),rM=a("li"),D1e=a("strong"),Zpr=o("camembert"),e_r=o(" \u2014 "),ZX=a("a"),o_r=o("TFCamembertForMultipleChoice"),r_r=o(" (CamemBERT model)"),t_r=l(),tM=a("li"),G1e=a("strong"),a_r=o("convbert"),n_r=o(" \u2014 "),ez=a("a"),s_r=o("TFConvBertForMultipleChoice"),l_r=o(" (ConvBERT model)"),i_r=l(),aM=a("li"),O1e=a("strong"),d_r=o("distilbert"),c_r=o(" \u2014 "),oz=a("a"),f_r=o("TFDistilBertForMultipleChoice"),m_r=o(" (DistilBERT model)"),g_r=l(),nM=a("li"),V1e=a("strong"),h_r=o("electra"),p_r=o(" \u2014 "),rz=a("a"),__r=o("TFElectraForMultipleChoice"),u_r=o(" (ELECTRA model)"),b_r=l(),sM=a("li"),X1e=a("strong"),F_r=o("flaubert"),v_r=o(" \u2014 "),tz=a("a"),T_r=o("TFFlaubertForMultipleChoice"),M_r=o(" (FlauBERT model)"),E_r=l(),lM=a("li"),z1e=a("strong"),C_r=o("funnel"),w_r=o(" \u2014 "),az=a("a"),A_r=o("TFFunnelForMultipleChoice"),y_r=o(" (Funnel Transformer model)"),L_r=l(),iM=a("li"),Q1e=a("strong"),x_r=o("longformer"),k_r=o(" \u2014 "),nz=a("a"),S_r=o("TFLongformerForMultipleChoice"),R_r=o(" (Longformer model)"),B_r=l(),dM=a("li"),W1e=a("strong"),P_r=o("mobilebert"),$_r=o(" \u2014 "),sz=a("a"),I_r=o("TFMobileBertForMultipleChoice"),q_r=o(" (MobileBERT model)"),N_r=l(),cM=a("li"),H1e=a("strong"),j_r=o("mpnet"),D_r=o(" \u2014 "),lz=a("a"),G_r=o("TFMPNetForMultipleChoice"),O_r=o(" (MPNet model)"),V_r=l(),fM=a("li"),U1e=a("strong"),X_r=o("rembert"),z_r=o(" \u2014 "),iz=a("a"),Q_r=o("TFRemBertForMultipleChoice"),W_r=o(" (RemBERT model)"),H_r=l(),mM=a("li"),J1e=a("strong"),U_r=o("roberta"),J_r=o(" \u2014 "),dz=a("a"),Y_r=o("TFRobertaForMultipleChoice"),K_r=o(" (RoBERTa model)"),Z_r=l(),gM=a("li"),Y1e=a("strong"),eur=o("roformer"),our=o(" \u2014 "),cz=a("a"),rur=o("TFRoFormerForMultipleChoice"),tur=o(" (RoFormer model)"),aur=l(),hM=a("li"),K1e=a("strong"),nur=o("xlm"),sur=o(" \u2014 "),fz=a("a"),lur=o("TFXLMForMultipleChoice"),iur=o(" (XLM model)"),dur=l(),pM=a("li"),Z1e=a("strong"),cur=o("xlm-roberta"),fur=o(" \u2014 "),mz=a("a"),mur=o("TFXLMRobertaForMultipleChoice"),gur=o(" (XLM-RoBERTa model)"),hur=l(),_M=a("li"),e5e=a("strong"),pur=o("xlnet"),_ur=o(" \u2014 "),gz=a("a"),uur=o("TFXLNetForMultipleChoice"),bur=o(" (XLNet model)"),Fur=l(),o5e=a("p"),vur=o("Examples:"),Tur=l(),f(Yy.$$.fragment),nBe=l(),Nc=a("h2"),uM=a("a"),r5e=a("span"),f(Ky.$$.fragment),Mur=l(),t5e=a("span"),Eur=o("TFAutoModelForTableQuestionAnswering"),sBe=l(),yr=a("div"),f(Zy.$$.fragment),Cur=l(),jc=a("p"),wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hz=a("a"),Aur=o("from_pretrained()"),yur=o(" class method or the "),pz=a("a"),Lur=o("from_config()"),xur=o(` class
method.`),kur=l(),eL=a("p"),Sur=o("This class cannot be instantiated directly using "),a5e=a("code"),Rur=o("__init__()"),Bur=o(" (throws an error)."),Pur=l(),Tt=a("div"),f(oL.$$.fragment),$ur=l(),n5e=a("p"),Iur=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qur=l(),Dc=a("p"),Nur=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),jur=o("not"),Dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Gur=o("from_pretrained()"),Our=o(" to load the model weights."),Vur=l(),l5e=a("p"),Xur=o("Examples:"),zur=l(),f(rL.$$.fragment),Qur=l(),Mo=a("div"),f(tL.$$.fragment),Wur=l(),i5e=a("p"),Hur=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Uur=l(),Cn=a("p"),Jur=o("The model class to instantiate is selected based on the "),d5e=a("code"),Yur=o("model_type"),Kur=o(` property of the config object (either
passed as an argument or loaded from `),c5e=a("code"),Zur=o("pretrained_model_name_or_path"),e1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(":"),t1r=l(),m5e=a("ul"),bM=a("li"),g5e=a("strong"),a1r=o("tapas"),n1r=o(" \u2014 "),uz=a("a"),s1r=o("TFTapasForQuestionAnswering"),l1r=o(" (TAPAS model)"),i1r=l(),h5e=a("p"),d1r=o("Examples:"),c1r=l(),f(aL.$$.fragment),lBe=l(),Gc=a("h2"),FM=a("a"),p5e=a("span"),f(nL.$$.fragment),f1r=l(),_5e=a("span"),m1r=o("TFAutoModelForTokenClassification"),iBe=l(),Lr=a("div"),f(sL.$$.fragment),g1r=l(),Oc=a("p"),h1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=a("a"),p1r=o("from_pretrained()"),_1r=o(" class method or the "),Fz=a("a"),u1r=o("from_config()"),b1r=o(` class
method.`),F1r=l(),lL=a("p"),v1r=o("This class cannot be instantiated directly using "),u5e=a("code"),T1r=o("__init__()"),M1r=o(" (throws an error)."),E1r=l(),Mt=a("div"),f(iL.$$.fragment),C1r=l(),b5e=a("p"),w1r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A1r=l(),Vc=a("p"),y1r=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),L1r=o("not"),x1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=a("a"),k1r=o("from_pretrained()"),S1r=o(" to load the model weights."),R1r=l(),v5e=a("p"),B1r=o("Examples:"),P1r=l(),f(dL.$$.fragment),$1r=l(),Eo=a("div"),f(cL.$$.fragment),I1r=l(),T5e=a("p"),q1r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),N1r=l(),wn=a("p"),j1r=o("The model class to instantiate is selected based on the "),M5e=a("code"),D1r=o("model_type"),G1r=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),O1r=o("pretrained_model_name_or_path"),V1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),X1r=o("pretrained_model_name_or_path"),z1r=o(":"),Q1r=l(),Y=a("ul"),vM=a("li"),w5e=a("strong"),W1r=o("albert"),H1r=o(" \u2014 "),Tz=a("a"),U1r=o("TFAlbertForTokenClassification"),J1r=o(" (ALBERT model)"),Y1r=l(),TM=a("li"),A5e=a("strong"),K1r=o("bert"),Z1r=o(" \u2014 "),Mz=a("a"),e5r=o("TFBertForTokenClassification"),o5r=o(" (BERT model)"),r5r=l(),MM=a("li"),y5e=a("strong"),t5r=o("camembert"),a5r=o(" \u2014 "),Ez=a("a"),n5r=o("TFCamembertForTokenClassification"),s5r=o(" (CamemBERT model)"),l5r=l(),EM=a("li"),L5e=a("strong"),i5r=o("convbert"),d5r=o(" \u2014 "),Cz=a("a"),c5r=o("TFConvBertForTokenClassification"),f5r=o(" (ConvBERT model)"),m5r=l(),CM=a("li"),x5e=a("strong"),g5r=o("deberta"),h5r=o(" \u2014 "),wz=a("a"),p5r=o("TFDebertaForTokenClassification"),_5r=o(" (DeBERTa model)"),u5r=l(),wM=a("li"),k5e=a("strong"),b5r=o("deberta-v2"),F5r=o(" \u2014 "),Az=a("a"),v5r=o("TFDebertaV2ForTokenClassification"),T5r=o(" (DeBERTa-v2 model)"),M5r=l(),AM=a("li"),S5e=a("strong"),E5r=o("distilbert"),C5r=o(" \u2014 "),yz=a("a"),w5r=o("TFDistilBertForTokenClassification"),A5r=o(" (DistilBERT model)"),y5r=l(),yM=a("li"),R5e=a("strong"),L5r=o("electra"),x5r=o(" \u2014 "),Lz=a("a"),k5r=o("TFElectraForTokenClassification"),S5r=o(" (ELECTRA model)"),R5r=l(),LM=a("li"),B5e=a("strong"),B5r=o("flaubert"),P5r=o(" \u2014 "),xz=a("a"),$5r=o("TFFlaubertForTokenClassification"),I5r=o(" (FlauBERT model)"),q5r=l(),xM=a("li"),P5e=a("strong"),N5r=o("funnel"),j5r=o(" \u2014 "),kz=a("a"),D5r=o("TFFunnelForTokenClassification"),G5r=o(" (Funnel Transformer model)"),O5r=l(),kM=a("li"),$5e=a("strong"),V5r=o("layoutlm"),X5r=o(" \u2014 "),Sz=a("a"),z5r=o("TFLayoutLMForTokenClassification"),Q5r=o(" (LayoutLM model)"),W5r=l(),SM=a("li"),I5e=a("strong"),H5r=o("longformer"),U5r=o(" \u2014 "),Rz=a("a"),J5r=o("TFLongformerForTokenClassification"),Y5r=o(" (Longformer model)"),K5r=l(),RM=a("li"),q5e=a("strong"),Z5r=o("mobilebert"),ebr=o(" \u2014 "),Bz=a("a"),obr=o("TFMobileBertForTokenClassification"),rbr=o(" (MobileBERT model)"),tbr=l(),BM=a("li"),N5e=a("strong"),abr=o("mpnet"),nbr=o(" \u2014 "),Pz=a("a"),sbr=o("TFMPNetForTokenClassification"),lbr=o(" (MPNet model)"),ibr=l(),PM=a("li"),j5e=a("strong"),dbr=o("rembert"),cbr=o(" \u2014 "),$z=a("a"),fbr=o("TFRemBertForTokenClassification"),mbr=o(" (RemBERT model)"),gbr=l(),$M=a("li"),D5e=a("strong"),hbr=o("roberta"),pbr=o(" \u2014 "),Iz=a("a"),_br=o("TFRobertaForTokenClassification"),ubr=o(" (RoBERTa model)"),bbr=l(),IM=a("li"),G5e=a("strong"),Fbr=o("roformer"),vbr=o(" \u2014 "),qz=a("a"),Tbr=o("TFRoFormerForTokenClassification"),Mbr=o(" (RoFormer model)"),Ebr=l(),qM=a("li"),O5e=a("strong"),Cbr=o("xlm"),wbr=o(" \u2014 "),Nz=a("a"),Abr=o("TFXLMForTokenClassification"),ybr=o(" (XLM model)"),Lbr=l(),NM=a("li"),V5e=a("strong"),xbr=o("xlm-roberta"),kbr=o(" \u2014 "),jz=a("a"),Sbr=o("TFXLMRobertaForTokenClassification"),Rbr=o(" (XLM-RoBERTa model)"),Bbr=l(),jM=a("li"),X5e=a("strong"),Pbr=o("xlnet"),$br=o(" \u2014 "),Dz=a("a"),Ibr=o("TFXLNetForTokenClassification"),qbr=o(" (XLNet model)"),Nbr=l(),z5e=a("p"),jbr=o("Examples:"),Dbr=l(),f(fL.$$.fragment),dBe=l(),Xc=a("h2"),DM=a("a"),Q5e=a("span"),f(mL.$$.fragment),Gbr=l(),W5e=a("span"),Obr=o("TFAutoModelForQuestionAnswering"),cBe=l(),xr=a("div"),f(gL.$$.fragment),Vbr=l(),zc=a("p"),Xbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gz=a("a"),zbr=o("from_pretrained()"),Qbr=o(" class method or the "),Oz=a("a"),Wbr=o("from_config()"),Hbr=o(` class
method.`),Ubr=l(),hL=a("p"),Jbr=o("This class cannot be instantiated directly using "),H5e=a("code"),Ybr=o("__init__()"),Kbr=o(" (throws an error)."),Zbr=l(),Et=a("div"),f(pL.$$.fragment),e2r=l(),U5e=a("p"),o2r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r2r=l(),Qc=a("p"),t2r=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),a2r=o("not"),n2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),s2r=o("from_pretrained()"),l2r=o(" to load the model weights."),i2r=l(),Y5e=a("p"),d2r=o("Examples:"),c2r=l(),f(_L.$$.fragment),f2r=l(),Co=a("div"),f(uL.$$.fragment),m2r=l(),K5e=a("p"),g2r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h2r=l(),An=a("p"),p2r=o("The model class to instantiate is selected based on the "),Z5e=a("code"),_2r=o("model_type"),u2r=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),b2r=o("pretrained_model_name_or_path"),F2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),v2r=o("pretrained_model_name_or_path"),T2r=o(":"),M2r=l(),K=a("ul"),GM=a("li"),rbe=a("strong"),E2r=o("albert"),C2r=o(" \u2014 "),Xz=a("a"),w2r=o("TFAlbertForQuestionAnswering"),A2r=o(" (ALBERT model)"),y2r=l(),OM=a("li"),tbe=a("strong"),L2r=o("bert"),x2r=o(" \u2014 "),zz=a("a"),k2r=o("TFBertForQuestionAnswering"),S2r=o(" (BERT model)"),R2r=l(),VM=a("li"),abe=a("strong"),B2r=o("camembert"),P2r=o(" \u2014 "),Qz=a("a"),$2r=o("TFCamembertForQuestionAnswering"),I2r=o(" (CamemBERT model)"),q2r=l(),XM=a("li"),nbe=a("strong"),N2r=o("convbert"),j2r=o(" \u2014 "),Wz=a("a"),D2r=o("TFConvBertForQuestionAnswering"),G2r=o(" (ConvBERT model)"),O2r=l(),zM=a("li"),sbe=a("strong"),V2r=o("deberta"),X2r=o(" \u2014 "),Hz=a("a"),z2r=o("TFDebertaForQuestionAnswering"),Q2r=o(" (DeBERTa model)"),W2r=l(),QM=a("li"),lbe=a("strong"),H2r=o("deberta-v2"),U2r=o(" \u2014 "),Uz=a("a"),J2r=o("TFDebertaV2ForQuestionAnswering"),Y2r=o(" (DeBERTa-v2 model)"),K2r=l(),WM=a("li"),ibe=a("strong"),Z2r=o("distilbert"),eFr=o(" \u2014 "),Jz=a("a"),oFr=o("TFDistilBertForQuestionAnswering"),rFr=o(" (DistilBERT model)"),tFr=l(),HM=a("li"),dbe=a("strong"),aFr=o("electra"),nFr=o(" \u2014 "),Yz=a("a"),sFr=o("TFElectraForQuestionAnswering"),lFr=o(" (ELECTRA model)"),iFr=l(),UM=a("li"),cbe=a("strong"),dFr=o("flaubert"),cFr=o(" \u2014 "),Kz=a("a"),fFr=o("TFFlaubertForQuestionAnsweringSimple"),mFr=o(" (FlauBERT model)"),gFr=l(),JM=a("li"),fbe=a("strong"),hFr=o("funnel"),pFr=o(" \u2014 "),Zz=a("a"),_Fr=o("TFFunnelForQuestionAnswering"),uFr=o(" (Funnel Transformer model)"),bFr=l(),YM=a("li"),mbe=a("strong"),FFr=o("gptj"),vFr=o(" \u2014 "),eQ=a("a"),TFr=o("TFGPTJForQuestionAnswering"),MFr=o(" (GPT-J model)"),EFr=l(),KM=a("li"),gbe=a("strong"),CFr=o("longformer"),wFr=o(" \u2014 "),oQ=a("a"),AFr=o("TFLongformerForQuestionAnswering"),yFr=o(" (Longformer model)"),LFr=l(),ZM=a("li"),hbe=a("strong"),xFr=o("mobilebert"),kFr=o(" \u2014 "),rQ=a("a"),SFr=o("TFMobileBertForQuestionAnswering"),RFr=o(" (MobileBERT model)"),BFr=l(),e4=a("li"),pbe=a("strong"),PFr=o("mpnet"),$Fr=o(" \u2014 "),tQ=a("a"),IFr=o("TFMPNetForQuestionAnswering"),qFr=o(" (MPNet model)"),NFr=l(),o4=a("li"),_be=a("strong"),jFr=o("rembert"),DFr=o(" \u2014 "),aQ=a("a"),GFr=o("TFRemBertForQuestionAnswering"),OFr=o(" (RemBERT model)"),VFr=l(),r4=a("li"),ube=a("strong"),XFr=o("roberta"),zFr=o(" \u2014 "),nQ=a("a"),QFr=o("TFRobertaForQuestionAnswering"),WFr=o(" (RoBERTa model)"),HFr=l(),t4=a("li"),bbe=a("strong"),UFr=o("roformer"),JFr=o(" \u2014 "),sQ=a("a"),YFr=o("TFRoFormerForQuestionAnswering"),KFr=o(" (RoFormer model)"),ZFr=l(),a4=a("li"),Fbe=a("strong"),evr=o("xlm"),ovr=o(" \u2014 "),lQ=a("a"),rvr=o("TFXLMForQuestionAnsweringSimple"),tvr=o(" (XLM model)"),avr=l(),n4=a("li"),vbe=a("strong"),nvr=o("xlm-roberta"),svr=o(" \u2014 "),iQ=a("a"),lvr=o("TFXLMRobertaForQuestionAnswering"),ivr=o(" (XLM-RoBERTa model)"),dvr=l(),s4=a("li"),Tbe=a("strong"),cvr=o("xlnet"),fvr=o(" \u2014 "),dQ=a("a"),mvr=o("TFXLNetForQuestionAnsweringSimple"),gvr=o(" (XLNet model)"),hvr=l(),Mbe=a("p"),pvr=o("Examples:"),_vr=l(),f(bL.$$.fragment),fBe=l(),Wc=a("h2"),l4=a("a"),Ebe=a("span"),f(FL.$$.fragment),uvr=l(),Cbe=a("span"),bvr=o("TFAutoModelForVision2Seq"),mBe=l(),kr=a("div"),f(vL.$$.fragment),Fvr=l(),Hc=a("p"),vvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cQ=a("a"),Tvr=o("from_pretrained()"),Mvr=o(" class method or the "),fQ=a("a"),Evr=o("from_config()"),Cvr=o(` class
method.`),wvr=l(),TL=a("p"),Avr=o("This class cannot be instantiated directly using "),wbe=a("code"),yvr=o("__init__()"),Lvr=o(" (throws an error)."),xvr=l(),Ct=a("div"),f(ML.$$.fragment),kvr=l(),Abe=a("p"),Svr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Rvr=l(),Uc=a("p"),Bvr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),Pvr=o("not"),$vr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),Ivr=o("from_pretrained()"),qvr=o(" to load the model weights."),Nvr=l(),Lbe=a("p"),jvr=o("Examples:"),Dvr=l(),f(EL.$$.fragment),Gvr=l(),wo=a("div"),f(CL.$$.fragment),Ovr=l(),xbe=a("p"),Vvr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xvr=l(),yn=a("p"),zvr=o("The model class to instantiate is selected based on the "),kbe=a("code"),Qvr=o("model_type"),Wvr=o(` property of the config object (either
passed as an argument or loaded from `),Sbe=a("code"),Hvr=o("pretrained_model_name_or_path"),Uvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=a("code"),Jvr=o("pretrained_model_name_or_path"),Yvr=o(":"),Kvr=l(),Bbe=a("ul"),i4=a("li"),Pbe=a("strong"),Zvr=o("vision-encoder-decoder"),e6r=o(" \u2014 "),gQ=a("a"),o6r=o("TFVisionEncoderDecoderModel"),r6r=o(" (Vision Encoder decoder model)"),t6r=l(),$be=a("p"),a6r=o("Examples:"),n6r=l(),f(wL.$$.fragment),gBe=l(),Jc=a("h2"),d4=a("a"),Ibe=a("span"),f(AL.$$.fragment),s6r=l(),qbe=a("span"),l6r=o("TFAutoModelForSpeechSeq2Seq"),hBe=l(),Sr=a("div"),f(yL.$$.fragment),i6r=l(),Yc=a("p"),d6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hQ=a("a"),c6r=o("from_pretrained()"),f6r=o(" class method or the "),pQ=a("a"),m6r=o("from_config()"),g6r=o(` class
method.`),h6r=l(),LL=a("p"),p6r=o("This class cannot be instantiated directly using "),Nbe=a("code"),_6r=o("__init__()"),u6r=o(" (throws an error)."),b6r=l(),wt=a("div"),f(xL.$$.fragment),F6r=l(),jbe=a("p"),v6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),T6r=l(),Kc=a("p"),M6r=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),E6r=o("not"),C6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),w6r=o("from_pretrained()"),A6r=o(" to load the model weights."),y6r=l(),Gbe=a("p"),L6r=o("Examples:"),x6r=l(),f(kL.$$.fragment),k6r=l(),Ao=a("div"),f(SL.$$.fragment),S6r=l(),Obe=a("p"),R6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),B6r=l(),Ln=a("p"),P6r=o("The model class to instantiate is selected based on the "),Vbe=a("code"),$6r=o("model_type"),I6r=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),q6r=o("pretrained_model_name_or_path"),N6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),j6r=o("pretrained_model_name_or_path"),D6r=o(":"),G6r=l(),Qbe=a("ul"),c4=a("li"),Wbe=a("strong"),O6r=o("speech_to_text"),V6r=o(" \u2014 "),uQ=a("a"),X6r=o("TFSpeech2TextForConditionalGeneration"),z6r=o(" (Speech2Text model)"),Q6r=l(),Hbe=a("p"),W6r=o("Examples:"),H6r=l(),f(RL.$$.fragment),pBe=l(),Zc=a("h2"),f4=a("a"),Ube=a("span"),f(BL.$$.fragment),U6r=l(),Jbe=a("span"),J6r=o("FlaxAutoModel"),_Be=l(),Rr=a("div"),f(PL.$$.fragment),Y6r=l(),ef=a("p"),K6r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bQ=a("a"),Z6r=o("from_pretrained()"),eTr=o(" class method or the "),FQ=a("a"),oTr=o("from_config()"),rTr=o(` class
method.`),tTr=l(),$L=a("p"),aTr=o("This class cannot be instantiated directly using "),Ybe=a("code"),nTr=o("__init__()"),sTr=o(" (throws an error)."),lTr=l(),At=a("div"),f(IL.$$.fragment),iTr=l(),Kbe=a("p"),dTr=o("Instantiates one of the base model classes of the library from a configuration."),cTr=l(),of=a("p"),fTr=o(`Note:
Loading a model from its configuration file does `),Zbe=a("strong"),mTr=o("not"),gTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),hTr=o("from_pretrained()"),pTr=o(" to load the model weights."),_Tr=l(),e2e=a("p"),uTr=o("Examples:"),bTr=l(),f(qL.$$.fragment),FTr=l(),yo=a("div"),f(NL.$$.fragment),vTr=l(),o2e=a("p"),TTr=o("Instantiate one of the base model classes of the library from a pretrained model."),MTr=l(),xn=a("p"),ETr=o("The model class to instantiate is selected based on the "),r2e=a("code"),CTr=o("model_type"),wTr=o(` property of the config object (either
passed as an argument or loaded from `),t2e=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=a("code"),LTr=o("pretrained_model_name_or_path"),xTr=o(":"),kTr=l(),z=a("ul"),m4=a("li"),n2e=a("strong"),STr=o("albert"),RTr=o(" \u2014 "),TQ=a("a"),BTr=o("FlaxAlbertModel"),PTr=o(" (ALBERT model)"),$Tr=l(),g4=a("li"),s2e=a("strong"),ITr=o("bart"),qTr=o(" \u2014 "),MQ=a("a"),NTr=o("FlaxBartModel"),jTr=o(" (BART model)"),DTr=l(),h4=a("li"),l2e=a("strong"),GTr=o("beit"),OTr=o(" \u2014 "),EQ=a("a"),VTr=o("FlaxBeitModel"),XTr=o(" (BEiT model)"),zTr=l(),p4=a("li"),i2e=a("strong"),QTr=o("bert"),WTr=o(" \u2014 "),CQ=a("a"),HTr=o("FlaxBertModel"),UTr=o(" (BERT model)"),JTr=l(),_4=a("li"),d2e=a("strong"),YTr=o("big_bird"),KTr=o(" \u2014 "),wQ=a("a"),ZTr=o("FlaxBigBirdModel"),eMr=o(" (BigBird model)"),oMr=l(),u4=a("li"),c2e=a("strong"),rMr=o("blenderbot"),tMr=o(" \u2014 "),AQ=a("a"),aMr=o("FlaxBlenderbotModel"),nMr=o(" (Blenderbot model)"),sMr=l(),b4=a("li"),f2e=a("strong"),lMr=o("blenderbot-small"),iMr=o(" \u2014 "),yQ=a("a"),dMr=o("FlaxBlenderbotSmallModel"),cMr=o(" (BlenderbotSmall model)"),fMr=l(),F4=a("li"),m2e=a("strong"),mMr=o("clip"),gMr=o(" \u2014 "),LQ=a("a"),hMr=o("FlaxCLIPModel"),pMr=o(" (CLIP model)"),_Mr=l(),v4=a("li"),g2e=a("strong"),uMr=o("distilbert"),bMr=o(" \u2014 "),xQ=a("a"),FMr=o("FlaxDistilBertModel"),vMr=o(" (DistilBERT model)"),TMr=l(),T4=a("li"),h2e=a("strong"),MMr=o("electra"),EMr=o(" \u2014 "),kQ=a("a"),CMr=o("FlaxElectraModel"),wMr=o(" (ELECTRA model)"),AMr=l(),M4=a("li"),p2e=a("strong"),yMr=o("gpt2"),LMr=o(" \u2014 "),SQ=a("a"),xMr=o("FlaxGPT2Model"),kMr=o(" (OpenAI GPT-2 model)"),SMr=l(),E4=a("li"),_2e=a("strong"),RMr=o("gpt_neo"),BMr=o(" \u2014 "),RQ=a("a"),PMr=o("FlaxGPTNeoModel"),$Mr=o(" (GPT Neo model)"),IMr=l(),C4=a("li"),u2e=a("strong"),qMr=o("gptj"),NMr=o(" \u2014 "),BQ=a("a"),jMr=o("FlaxGPTJModel"),DMr=o(" (GPT-J model)"),GMr=l(),w4=a("li"),b2e=a("strong"),OMr=o("marian"),VMr=o(" \u2014 "),PQ=a("a"),XMr=o("FlaxMarianModel"),zMr=o(" (Marian model)"),QMr=l(),A4=a("li"),F2e=a("strong"),WMr=o("mbart"),HMr=o(" \u2014 "),$Q=a("a"),UMr=o("FlaxMBartModel"),JMr=o(" (mBART model)"),YMr=l(),y4=a("li"),v2e=a("strong"),KMr=o("mt5"),ZMr=o(" \u2014 "),IQ=a("a"),e4r=o("FlaxMT5Model"),o4r=o(" (mT5 model)"),r4r=l(),L4=a("li"),T2e=a("strong"),t4r=o("pegasus"),a4r=o(" \u2014 "),qQ=a("a"),n4r=o("FlaxPegasusModel"),s4r=o(" (Pegasus model)"),l4r=l(),x4=a("li"),M2e=a("strong"),i4r=o("roberta"),d4r=o(" \u2014 "),NQ=a("a"),c4r=o("FlaxRobertaModel"),f4r=o(" (RoBERTa model)"),m4r=l(),k4=a("li"),E2e=a("strong"),g4r=o("roformer"),h4r=o(" \u2014 "),jQ=a("a"),p4r=o("FlaxRoFormerModel"),_4r=o(" (RoFormer model)"),u4r=l(),S4=a("li"),C2e=a("strong"),b4r=o("t5"),F4r=o(" \u2014 "),DQ=a("a"),v4r=o("FlaxT5Model"),T4r=o(" (T5 model)"),M4r=l(),R4=a("li"),w2e=a("strong"),E4r=o("vision-text-dual-encoder"),C4r=o(" \u2014 "),GQ=a("a"),w4r=o("FlaxVisionTextDualEncoderModel"),A4r=o(" (VisionTextDualEncoder model)"),y4r=l(),B4=a("li"),A2e=a("strong"),L4r=o("vit"),x4r=o(" \u2014 "),OQ=a("a"),k4r=o("FlaxViTModel"),S4r=o(" (ViT model)"),R4r=l(),P4=a("li"),y2e=a("strong"),B4r=o("wav2vec2"),P4r=o(" \u2014 "),VQ=a("a"),$4r=o("FlaxWav2Vec2Model"),I4r=o(" (Wav2Vec2 model)"),q4r=l(),$4=a("li"),L2e=a("strong"),N4r=o("xglm"),j4r=o(" \u2014 "),XQ=a("a"),D4r=o("FlaxXGLMModel"),G4r=o(" (XGLM model)"),O4r=l(),I4=a("li"),x2e=a("strong"),V4r=o("xlm-roberta"),X4r=o(" \u2014 "),zQ=a("a"),z4r=o("FlaxXLMRobertaModel"),Q4r=o(" (XLM-RoBERTa model)"),W4r=l(),k2e=a("p"),H4r=o("Examples:"),U4r=l(),f(jL.$$.fragment),uBe=l(),rf=a("h2"),q4=a("a"),S2e=a("span"),f(DL.$$.fragment),J4r=l(),R2e=a("span"),Y4r=o("FlaxAutoModelForCausalLM"),bBe=l(),Br=a("div"),f(GL.$$.fragment),K4r=l(),tf=a("p"),Z4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QQ=a("a"),eEr=o("from_pretrained()"),oEr=o(" class method or the "),WQ=a("a"),rEr=o("from_config()"),tEr=o(` class
method.`),aEr=l(),OL=a("p"),nEr=o("This class cannot be instantiated directly using "),B2e=a("code"),sEr=o("__init__()"),lEr=o(" (throws an error)."),iEr=l(),yt=a("div"),f(VL.$$.fragment),dEr=l(),P2e=a("p"),cEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fEr=l(),af=a("p"),mEr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),gEr=o("not"),hEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=a("a"),pEr=o("from_pretrained()"),_Er=o(" to load the model weights."),uEr=l(),I2e=a("p"),bEr=o("Examples:"),FEr=l(),f(XL.$$.fragment),vEr=l(),Lo=a("div"),f(zL.$$.fragment),TEr=l(),q2e=a("p"),MEr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EEr=l(),kn=a("p"),CEr=o("The model class to instantiate is selected based on the "),N2e=a("code"),wEr=o("model_type"),AEr=o(` property of the config object (either
passed as an argument or loaded from `),j2e=a("code"),yEr=o("pretrained_model_name_or_path"),LEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=a("code"),xEr=o("pretrained_model_name_or_path"),kEr=o(":"),SEr=l(),ca=a("ul"),N4=a("li"),G2e=a("strong"),REr=o("bart"),BEr=o(" \u2014 "),UQ=a("a"),PEr=o("FlaxBartForCausalLM"),$Er=o(" (BART model)"),IEr=l(),j4=a("li"),O2e=a("strong"),qEr=o("gpt2"),NEr=o(" \u2014 "),JQ=a("a"),jEr=o("FlaxGPT2LMHeadModel"),DEr=o(" (OpenAI GPT-2 model)"),GEr=l(),D4=a("li"),V2e=a("strong"),OEr=o("gpt_neo"),VEr=o(" \u2014 "),YQ=a("a"),XEr=o("FlaxGPTNeoForCausalLM"),zEr=o(" (GPT Neo model)"),QEr=l(),G4=a("li"),X2e=a("strong"),WEr=o("gptj"),HEr=o(" \u2014 "),KQ=a("a"),UEr=o("FlaxGPTJForCausalLM"),JEr=o(" (GPT-J model)"),YEr=l(),O4=a("li"),z2e=a("strong"),KEr=o("xglm"),ZEr=o(" \u2014 "),ZQ=a("a"),eCr=o("FlaxXGLMForCausalLM"),oCr=o(" (XGLM model)"),rCr=l(),Q2e=a("p"),tCr=o("Examples:"),aCr=l(),f(QL.$$.fragment),FBe=l(),nf=a("h2"),V4=a("a"),W2e=a("span"),f(WL.$$.fragment),nCr=l(),H2e=a("span"),sCr=o("FlaxAutoModelForPreTraining"),vBe=l(),Pr=a("div"),f(HL.$$.fragment),lCr=l(),sf=a("p"),iCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eW=a("a"),dCr=o("from_pretrained()"),cCr=o(" class method or the "),oW=a("a"),fCr=o("from_config()"),mCr=o(` class
method.`),gCr=l(),UL=a("p"),hCr=o("This class cannot be instantiated directly using "),U2e=a("code"),pCr=o("__init__()"),_Cr=o(" (throws an error)."),uCr=l(),Lt=a("div"),f(JL.$$.fragment),bCr=l(),J2e=a("p"),FCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vCr=l(),lf=a("p"),TCr=o(`Note:
Loading a model from its configuration file does `),Y2e=a("strong"),MCr=o("not"),ECr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=a("a"),CCr=o("from_pretrained()"),wCr=o(" to load the model weights."),ACr=l(),K2e=a("p"),yCr=o("Examples:"),LCr=l(),f(YL.$$.fragment),xCr=l(),xo=a("div"),f(KL.$$.fragment),kCr=l(),Z2e=a("p"),SCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RCr=l(),Sn=a("p"),BCr=o("The model class to instantiate is selected based on the "),eFe=a("code"),PCr=o("model_type"),$Cr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),ICr=o("pretrained_model_name_or_path"),qCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),NCr=o("pretrained_model_name_or_path"),jCr=o(":"),DCr=l(),fe=a("ul"),X4=a("li"),tFe=a("strong"),GCr=o("albert"),OCr=o(" \u2014 "),tW=a("a"),VCr=o("FlaxAlbertForPreTraining"),XCr=o(" (ALBERT model)"),zCr=l(),z4=a("li"),aFe=a("strong"),QCr=o("bart"),WCr=o(" \u2014 "),aW=a("a"),HCr=o("FlaxBartForConditionalGeneration"),UCr=o(" (BART model)"),JCr=l(),Q4=a("li"),nFe=a("strong"),YCr=o("bert"),KCr=o(" \u2014 "),nW=a("a"),ZCr=o("FlaxBertForPreTraining"),e3r=o(" (BERT model)"),o3r=l(),W4=a("li"),sFe=a("strong"),r3r=o("big_bird"),t3r=o(" \u2014 "),sW=a("a"),a3r=o("FlaxBigBirdForPreTraining"),n3r=o(" (BigBird model)"),s3r=l(),H4=a("li"),lFe=a("strong"),l3r=o("electra"),i3r=o(" \u2014 "),lW=a("a"),d3r=o("FlaxElectraForPreTraining"),c3r=o(" (ELECTRA model)"),f3r=l(),U4=a("li"),iFe=a("strong"),m3r=o("mbart"),g3r=o(" \u2014 "),iW=a("a"),h3r=o("FlaxMBartForConditionalGeneration"),p3r=o(" (mBART model)"),_3r=l(),J4=a("li"),dFe=a("strong"),u3r=o("mt5"),b3r=o(" \u2014 "),dW=a("a"),F3r=o("FlaxMT5ForConditionalGeneration"),v3r=o(" (mT5 model)"),T3r=l(),Y4=a("li"),cFe=a("strong"),M3r=o("roberta"),E3r=o(" \u2014 "),cW=a("a"),C3r=o("FlaxRobertaForMaskedLM"),w3r=o(" (RoBERTa model)"),A3r=l(),K4=a("li"),fFe=a("strong"),y3r=o("roformer"),L3r=o(" \u2014 "),fW=a("a"),x3r=o("FlaxRoFormerForMaskedLM"),k3r=o(" (RoFormer model)"),S3r=l(),Z4=a("li"),mFe=a("strong"),R3r=o("t5"),B3r=o(" \u2014 "),mW=a("a"),P3r=o("FlaxT5ForConditionalGeneration"),$3r=o(" (T5 model)"),I3r=l(),eE=a("li"),gFe=a("strong"),q3r=o("wav2vec2"),N3r=o(" \u2014 "),gW=a("a"),j3r=o("FlaxWav2Vec2ForPreTraining"),D3r=o(" (Wav2Vec2 model)"),G3r=l(),oE=a("li"),hFe=a("strong"),O3r=o("xlm-roberta"),V3r=o(" \u2014 "),hW=a("a"),X3r=o("FlaxXLMRobertaForMaskedLM"),z3r=o(" (XLM-RoBERTa model)"),Q3r=l(),pFe=a("p"),W3r=o("Examples:"),H3r=l(),f(ZL.$$.fragment),TBe=l(),df=a("h2"),rE=a("a"),_Fe=a("span"),f(e8.$$.fragment),U3r=l(),uFe=a("span"),J3r=o("FlaxAutoModelForMaskedLM"),MBe=l(),$r=a("div"),f(o8.$$.fragment),Y3r=l(),cf=a("p"),K3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pW=a("a"),Z3r=o("from_pretrained()"),ewr=o(" class method or the "),_W=a("a"),owr=o("from_config()"),rwr=o(` class
method.`),twr=l(),r8=a("p"),awr=o("This class cannot be instantiated directly using "),bFe=a("code"),nwr=o("__init__()"),swr=o(" (throws an error)."),lwr=l(),xt=a("div"),f(t8.$$.fragment),iwr=l(),FFe=a("p"),dwr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),cwr=l(),ff=a("p"),fwr=o(`Note:
Loading a model from its configuration file does `),vFe=a("strong"),mwr=o("not"),gwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),hwr=o("from_pretrained()"),pwr=o(" to load the model weights."),_wr=l(),TFe=a("p"),uwr=o("Examples:"),bwr=l(),f(a8.$$.fragment),Fwr=l(),ko=a("div"),f(n8.$$.fragment),vwr=l(),MFe=a("p"),Twr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mwr=l(),Rn=a("p"),Ewr=o("The model class to instantiate is selected based on the "),EFe=a("code"),Cwr=o("model_type"),wwr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),Awr=o("pretrained_model_name_or_path"),ywr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),Lwr=o("pretrained_model_name_or_path"),xwr=o(":"),kwr=l(),be=a("ul"),tE=a("li"),AFe=a("strong"),Swr=o("albert"),Rwr=o(" \u2014 "),bW=a("a"),Bwr=o("FlaxAlbertForMaskedLM"),Pwr=o(" (ALBERT model)"),$wr=l(),aE=a("li"),yFe=a("strong"),Iwr=o("bart"),qwr=o(" \u2014 "),FW=a("a"),Nwr=o("FlaxBartForConditionalGeneration"),jwr=o(" (BART model)"),Dwr=l(),nE=a("li"),LFe=a("strong"),Gwr=o("bert"),Owr=o(" \u2014 "),vW=a("a"),Vwr=o("FlaxBertForMaskedLM"),Xwr=o(" (BERT model)"),zwr=l(),sE=a("li"),xFe=a("strong"),Qwr=o("big_bird"),Wwr=o(" \u2014 "),TW=a("a"),Hwr=o("FlaxBigBirdForMaskedLM"),Uwr=o(" (BigBird model)"),Jwr=l(),lE=a("li"),kFe=a("strong"),Ywr=o("distilbert"),Kwr=o(" \u2014 "),MW=a("a"),Zwr=o("FlaxDistilBertForMaskedLM"),eAr=o(" (DistilBERT model)"),oAr=l(),iE=a("li"),SFe=a("strong"),rAr=o("electra"),tAr=o(" \u2014 "),EW=a("a"),aAr=o("FlaxElectraForMaskedLM"),nAr=o(" (ELECTRA model)"),sAr=l(),dE=a("li"),RFe=a("strong"),lAr=o("mbart"),iAr=o(" \u2014 "),CW=a("a"),dAr=o("FlaxMBartForConditionalGeneration"),cAr=o(" (mBART model)"),fAr=l(),cE=a("li"),BFe=a("strong"),mAr=o("roberta"),gAr=o(" \u2014 "),wW=a("a"),hAr=o("FlaxRobertaForMaskedLM"),pAr=o(" (RoBERTa model)"),_Ar=l(),fE=a("li"),PFe=a("strong"),uAr=o("roformer"),bAr=o(" \u2014 "),AW=a("a"),FAr=o("FlaxRoFormerForMaskedLM"),vAr=o(" (RoFormer model)"),TAr=l(),mE=a("li"),$Fe=a("strong"),MAr=o("xlm-roberta"),EAr=o(" \u2014 "),yW=a("a"),CAr=o("FlaxXLMRobertaForMaskedLM"),wAr=o(" (XLM-RoBERTa model)"),AAr=l(),IFe=a("p"),yAr=o("Examples:"),LAr=l(),f(s8.$$.fragment),EBe=l(),mf=a("h2"),gE=a("a"),qFe=a("span"),f(l8.$$.fragment),xAr=l(),NFe=a("span"),kAr=o("FlaxAutoModelForSeq2SeqLM"),CBe=l(),Ir=a("div"),f(i8.$$.fragment),SAr=l(),gf=a("p"),RAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LW=a("a"),BAr=o("from_pretrained()"),PAr=o(" class method or the "),xW=a("a"),$Ar=o("from_config()"),IAr=o(` class
method.`),qAr=l(),d8=a("p"),NAr=o("This class cannot be instantiated directly using "),jFe=a("code"),jAr=o("__init__()"),DAr=o(" (throws an error)."),GAr=l(),kt=a("div"),f(c8.$$.fragment),OAr=l(),DFe=a("p"),VAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),XAr=l(),hf=a("p"),zAr=o(`Note:
Loading a model from its configuration file does `),GFe=a("strong"),QAr=o("not"),WAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=a("a"),HAr=o("from_pretrained()"),UAr=o(" to load the model weights."),JAr=l(),OFe=a("p"),YAr=o("Examples:"),KAr=l(),f(f8.$$.fragment),ZAr=l(),So=a("div"),f(m8.$$.fragment),e0r=l(),VFe=a("p"),o0r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),r0r=l(),Bn=a("p"),t0r=o("The model class to instantiate is selected based on the "),XFe=a("code"),a0r=o("model_type"),n0r=o(` property of the config object (either
passed as an argument or loaded from `),zFe=a("code"),s0r=o("pretrained_model_name_or_path"),l0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=a("code"),i0r=o("pretrained_model_name_or_path"),d0r=o(":"),c0r=l(),Ee=a("ul"),hE=a("li"),WFe=a("strong"),f0r=o("bart"),m0r=o(" \u2014 "),SW=a("a"),g0r=o("FlaxBartForConditionalGeneration"),h0r=o(" (BART model)"),p0r=l(),pE=a("li"),HFe=a("strong"),_0r=o("blenderbot"),u0r=o(" \u2014 "),RW=a("a"),b0r=o("FlaxBlenderbotForConditionalGeneration"),F0r=o(" (Blenderbot model)"),v0r=l(),_E=a("li"),UFe=a("strong"),T0r=o("blenderbot-small"),M0r=o(" \u2014 "),BW=a("a"),E0r=o("FlaxBlenderbotSmallForConditionalGeneration"),C0r=o(" (BlenderbotSmall model)"),w0r=l(),uE=a("li"),JFe=a("strong"),A0r=o("encoder-decoder"),y0r=o(" \u2014 "),PW=a("a"),L0r=o("FlaxEncoderDecoderModel"),x0r=o(" (Encoder decoder model)"),k0r=l(),bE=a("li"),YFe=a("strong"),S0r=o("marian"),R0r=o(" \u2014 "),$W=a("a"),B0r=o("FlaxMarianMTModel"),P0r=o(" (Marian model)"),$0r=l(),FE=a("li"),KFe=a("strong"),I0r=o("mbart"),q0r=o(" \u2014 "),IW=a("a"),N0r=o("FlaxMBartForConditionalGeneration"),j0r=o(" (mBART model)"),D0r=l(),vE=a("li"),ZFe=a("strong"),G0r=o("mt5"),O0r=o(" \u2014 "),qW=a("a"),V0r=o("FlaxMT5ForConditionalGeneration"),X0r=o(" (mT5 model)"),z0r=l(),TE=a("li"),eve=a("strong"),Q0r=o("pegasus"),W0r=o(" \u2014 "),NW=a("a"),H0r=o("FlaxPegasusForConditionalGeneration"),U0r=o(" (Pegasus model)"),J0r=l(),ME=a("li"),ove=a("strong"),Y0r=o("t5"),K0r=o(" \u2014 "),jW=a("a"),Z0r=o("FlaxT5ForConditionalGeneration"),eyr=o(" (T5 model)"),oyr=l(),rve=a("p"),ryr=o("Examples:"),tyr=l(),f(g8.$$.fragment),wBe=l(),pf=a("h2"),EE=a("a"),tve=a("span"),f(h8.$$.fragment),ayr=l(),ave=a("span"),nyr=o("FlaxAutoModelForSequenceClassification"),ABe=l(),qr=a("div"),f(p8.$$.fragment),syr=l(),_f=a("p"),lyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DW=a("a"),iyr=o("from_pretrained()"),dyr=o(" class method or the "),GW=a("a"),cyr=o("from_config()"),fyr=o(` class
method.`),myr=l(),_8=a("p"),gyr=o("This class cannot be instantiated directly using "),nve=a("code"),hyr=o("__init__()"),pyr=o(" (throws an error)."),_yr=l(),St=a("div"),f(u8.$$.fragment),uyr=l(),sve=a("p"),byr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Fyr=l(),uf=a("p"),vyr=o(`Note:
Loading a model from its configuration file does `),lve=a("strong"),Tyr=o("not"),Myr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),Eyr=o("from_pretrained()"),Cyr=o(" to load the model weights."),wyr=l(),ive=a("p"),Ayr=o("Examples:"),yyr=l(),f(b8.$$.fragment),Lyr=l(),Ro=a("div"),f(F8.$$.fragment),xyr=l(),dve=a("p"),kyr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Syr=l(),Pn=a("p"),Ryr=o("The model class to instantiate is selected based on the "),cve=a("code"),Byr=o("model_type"),Pyr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),$yr=o("pretrained_model_name_or_path"),Iyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),qyr=o("pretrained_model_name_or_path"),Nyr=o(":"),jyr=l(),Fe=a("ul"),CE=a("li"),gve=a("strong"),Dyr=o("albert"),Gyr=o(" \u2014 "),VW=a("a"),Oyr=o("FlaxAlbertForSequenceClassification"),Vyr=o(" (ALBERT model)"),Xyr=l(),wE=a("li"),hve=a("strong"),zyr=o("bart"),Qyr=o(" \u2014 "),XW=a("a"),Wyr=o("FlaxBartForSequenceClassification"),Hyr=o(" (BART model)"),Uyr=l(),AE=a("li"),pve=a("strong"),Jyr=o("bert"),Yyr=o(" \u2014 "),zW=a("a"),Kyr=o("FlaxBertForSequenceClassification"),Zyr=o(" (BERT model)"),eLr=l(),yE=a("li"),_ve=a("strong"),oLr=o("big_bird"),rLr=o(" \u2014 "),QW=a("a"),tLr=o("FlaxBigBirdForSequenceClassification"),aLr=o(" (BigBird model)"),nLr=l(),LE=a("li"),uve=a("strong"),sLr=o("distilbert"),lLr=o(" \u2014 "),WW=a("a"),iLr=o("FlaxDistilBertForSequenceClassification"),dLr=o(" (DistilBERT model)"),cLr=l(),xE=a("li"),bve=a("strong"),fLr=o("electra"),mLr=o(" \u2014 "),HW=a("a"),gLr=o("FlaxElectraForSequenceClassification"),hLr=o(" (ELECTRA model)"),pLr=l(),kE=a("li"),Fve=a("strong"),_Lr=o("mbart"),uLr=o(" \u2014 "),UW=a("a"),bLr=o("FlaxMBartForSequenceClassification"),FLr=o(" (mBART model)"),vLr=l(),SE=a("li"),vve=a("strong"),TLr=o("roberta"),MLr=o(" \u2014 "),JW=a("a"),ELr=o("FlaxRobertaForSequenceClassification"),CLr=o(" (RoBERTa model)"),wLr=l(),RE=a("li"),Tve=a("strong"),ALr=o("roformer"),yLr=o(" \u2014 "),YW=a("a"),LLr=o("FlaxRoFormerForSequenceClassification"),xLr=o(" (RoFormer model)"),kLr=l(),BE=a("li"),Mve=a("strong"),SLr=o("xlm-roberta"),RLr=o(" \u2014 "),KW=a("a"),BLr=o("FlaxXLMRobertaForSequenceClassification"),PLr=o(" (XLM-RoBERTa model)"),$Lr=l(),Eve=a("p"),ILr=o("Examples:"),qLr=l(),f(v8.$$.fragment),yBe=l(),bf=a("h2"),PE=a("a"),Cve=a("span"),f(T8.$$.fragment),NLr=l(),wve=a("span"),jLr=o("FlaxAutoModelForQuestionAnswering"),LBe=l(),Nr=a("div"),f(M8.$$.fragment),DLr=l(),Ff=a("p"),GLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZW=a("a"),OLr=o("from_pretrained()"),VLr=o(" class method or the "),eH=a("a"),XLr=o("from_config()"),zLr=o(` class
method.`),QLr=l(),E8=a("p"),WLr=o("This class cannot be instantiated directly using "),Ave=a("code"),HLr=o("__init__()"),ULr=o(" (throws an error)."),JLr=l(),Rt=a("div"),f(C8.$$.fragment),YLr=l(),yve=a("p"),KLr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ZLr=l(),vf=a("p"),e8r=o(`Note:
Loading a model from its configuration file does `),Lve=a("strong"),o8r=o("not"),r8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),t8r=o("from_pretrained()"),a8r=o(" to load the model weights."),n8r=l(),xve=a("p"),s8r=o("Examples:"),l8r=l(),f(w8.$$.fragment),i8r=l(),Bo=a("div"),f(A8.$$.fragment),d8r=l(),kve=a("p"),c8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),f8r=l(),$n=a("p"),m8r=o("The model class to instantiate is selected based on the "),Sve=a("code"),g8r=o("model_type"),h8r=o(` property of the config object (either
passed as an argument or loaded from `),Rve=a("code"),p8r=o("pretrained_model_name_or_path"),_8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),u8r=o("pretrained_model_name_or_path"),b8r=o(":"),F8r=l(),ve=a("ul"),$E=a("li"),Pve=a("strong"),v8r=o("albert"),T8r=o(" \u2014 "),rH=a("a"),M8r=o("FlaxAlbertForQuestionAnswering"),E8r=o(" (ALBERT model)"),C8r=l(),IE=a("li"),$ve=a("strong"),w8r=o("bart"),A8r=o(" \u2014 "),tH=a("a"),y8r=o("FlaxBartForQuestionAnswering"),L8r=o(" (BART model)"),x8r=l(),qE=a("li"),Ive=a("strong"),k8r=o("bert"),S8r=o(" \u2014 "),aH=a("a"),R8r=o("FlaxBertForQuestionAnswering"),B8r=o(" (BERT model)"),P8r=l(),NE=a("li"),qve=a("strong"),$8r=o("big_bird"),I8r=o(" \u2014 "),nH=a("a"),q8r=o("FlaxBigBirdForQuestionAnswering"),N8r=o(" (BigBird model)"),j8r=l(),jE=a("li"),Nve=a("strong"),D8r=o("distilbert"),G8r=o(" \u2014 "),sH=a("a"),O8r=o("FlaxDistilBertForQuestionAnswering"),V8r=o(" (DistilBERT model)"),X8r=l(),DE=a("li"),jve=a("strong"),z8r=o("electra"),Q8r=o(" \u2014 "),lH=a("a"),W8r=o("FlaxElectraForQuestionAnswering"),H8r=o(" (ELECTRA model)"),U8r=l(),GE=a("li"),Dve=a("strong"),J8r=o("mbart"),Y8r=o(" \u2014 "),iH=a("a"),K8r=o("FlaxMBartForQuestionAnswering"),Z8r=o(" (mBART model)"),e7r=l(),OE=a("li"),Gve=a("strong"),o7r=o("roberta"),r7r=o(" \u2014 "),dH=a("a"),t7r=o("FlaxRobertaForQuestionAnswering"),a7r=o(" (RoBERTa model)"),n7r=l(),VE=a("li"),Ove=a("strong"),s7r=o("roformer"),l7r=o(" \u2014 "),cH=a("a"),i7r=o("FlaxRoFormerForQuestionAnswering"),d7r=o(" (RoFormer model)"),c7r=l(),XE=a("li"),Vve=a("strong"),f7r=o("xlm-roberta"),m7r=o(" \u2014 "),fH=a("a"),g7r=o("FlaxXLMRobertaForQuestionAnswering"),h7r=o(" (XLM-RoBERTa model)"),p7r=l(),Xve=a("p"),_7r=o("Examples:"),u7r=l(),f(y8.$$.fragment),xBe=l(),Tf=a("h2"),zE=a("a"),zve=a("span"),f(L8.$$.fragment),b7r=l(),Qve=a("span"),F7r=o("FlaxAutoModelForTokenClassification"),kBe=l(),jr=a("div"),f(x8.$$.fragment),v7r=l(),Mf=a("p"),T7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mH=a("a"),M7r=o("from_pretrained()"),E7r=o(" class method or the "),gH=a("a"),C7r=o("from_config()"),w7r=o(` class
method.`),A7r=l(),k8=a("p"),y7r=o("This class cannot be instantiated directly using "),Wve=a("code"),L7r=o("__init__()"),x7r=o(" (throws an error)."),k7r=l(),Bt=a("div"),f(S8.$$.fragment),S7r=l(),Hve=a("p"),R7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B7r=l(),Ef=a("p"),P7r=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),$7r=o("not"),I7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=a("a"),q7r=o("from_pretrained()"),N7r=o(" to load the model weights."),j7r=l(),Jve=a("p"),D7r=o("Examples:"),G7r=l(),f(R8.$$.fragment),O7r=l(),Po=a("div"),f(B8.$$.fragment),V7r=l(),Yve=a("p"),X7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),z7r=l(),In=a("p"),Q7r=o("The model class to instantiate is selected based on the "),Kve=a("code"),W7r=o("model_type"),H7r=o(` property of the config object (either
passed as an argument or loaded from `),Zve=a("code"),U7r=o("pretrained_model_name_or_path"),J7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=a("code"),Y7r=o("pretrained_model_name_or_path"),K7r=o(":"),Z7r=l(),Be=a("ul"),QE=a("li"),o6e=a("strong"),e9r=o("albert"),o9r=o(" \u2014 "),pH=a("a"),r9r=o("FlaxAlbertForTokenClassification"),t9r=o(" (ALBERT model)"),a9r=l(),WE=a("li"),r6e=a("strong"),n9r=o("bert"),s9r=o(" \u2014 "),_H=a("a"),l9r=o("FlaxBertForTokenClassification"),i9r=o(" (BERT model)"),d9r=l(),HE=a("li"),t6e=a("strong"),c9r=o("big_bird"),f9r=o(" \u2014 "),uH=a("a"),m9r=o("FlaxBigBirdForTokenClassification"),g9r=o(" (BigBird model)"),h9r=l(),UE=a("li"),a6e=a("strong"),p9r=o("distilbert"),_9r=o(" \u2014 "),bH=a("a"),u9r=o("FlaxDistilBertForTokenClassification"),b9r=o(" (DistilBERT model)"),F9r=l(),JE=a("li"),n6e=a("strong"),v9r=o("electra"),T9r=o(" \u2014 "),FH=a("a"),M9r=o("FlaxElectraForTokenClassification"),E9r=o(" (ELECTRA model)"),C9r=l(),YE=a("li"),s6e=a("strong"),w9r=o("roberta"),A9r=o(" \u2014 "),vH=a("a"),y9r=o("FlaxRobertaForTokenClassification"),L9r=o(" (RoBERTa model)"),x9r=l(),KE=a("li"),l6e=a("strong"),k9r=o("roformer"),S9r=o(" \u2014 "),TH=a("a"),R9r=o("FlaxRoFormerForTokenClassification"),B9r=o(" (RoFormer model)"),P9r=l(),ZE=a("li"),i6e=a("strong"),$9r=o("xlm-roberta"),I9r=o(" \u2014 "),MH=a("a"),q9r=o("FlaxXLMRobertaForTokenClassification"),N9r=o(" (XLM-RoBERTa model)"),j9r=l(),d6e=a("p"),D9r=o("Examples:"),G9r=l(),f(P8.$$.fragment),SBe=l(),Cf=a("h2"),eC=a("a"),c6e=a("span"),f($8.$$.fragment),O9r=l(),f6e=a("span"),V9r=o("FlaxAutoModelForMultipleChoice"),RBe=l(),Dr=a("div"),f(I8.$$.fragment),X9r=l(),wf=a("p"),z9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EH=a("a"),Q9r=o("from_pretrained()"),W9r=o(" class method or the "),CH=a("a"),H9r=o("from_config()"),U9r=o(` class
method.`),J9r=l(),q8=a("p"),Y9r=o("This class cannot be instantiated directly using "),m6e=a("code"),K9r=o("__init__()"),Z9r=o(" (throws an error)."),exr=l(),Pt=a("div"),f(N8.$$.fragment),oxr=l(),g6e=a("p"),rxr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),txr=l(),Af=a("p"),axr=o(`Note:
Loading a model from its configuration file does `),h6e=a("strong"),nxr=o("not"),sxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),lxr=o("from_pretrained()"),ixr=o(" to load the model weights."),dxr=l(),p6e=a("p"),cxr=o("Examples:"),fxr=l(),f(j8.$$.fragment),mxr=l(),$o=a("div"),f(D8.$$.fragment),gxr=l(),_6e=a("p"),hxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pxr=l(),qn=a("p"),_xr=o("The model class to instantiate is selected based on the "),u6e=a("code"),uxr=o("model_type"),bxr=o(` property of the config object (either
passed as an argument or loaded from `),b6e=a("code"),Fxr=o("pretrained_model_name_or_path"),vxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),Txr=o("pretrained_model_name_or_path"),Mxr=o(":"),Exr=l(),Pe=a("ul"),oC=a("li"),v6e=a("strong"),Cxr=o("albert"),wxr=o(" \u2014 "),AH=a("a"),Axr=o("FlaxAlbertForMultipleChoice"),yxr=o(" (ALBERT model)"),Lxr=l(),rC=a("li"),T6e=a("strong"),xxr=o("bert"),kxr=o(" \u2014 "),yH=a("a"),Sxr=o("FlaxBertForMultipleChoice"),Rxr=o(" (BERT model)"),Bxr=l(),tC=a("li"),M6e=a("strong"),Pxr=o("big_bird"),$xr=o(" \u2014 "),LH=a("a"),Ixr=o("FlaxBigBirdForMultipleChoice"),qxr=o(" (BigBird model)"),Nxr=l(),aC=a("li"),E6e=a("strong"),jxr=o("distilbert"),Dxr=o(" \u2014 "),xH=a("a"),Gxr=o("FlaxDistilBertForMultipleChoice"),Oxr=o(" (DistilBERT model)"),Vxr=l(),nC=a("li"),C6e=a("strong"),Xxr=o("electra"),zxr=o(" \u2014 "),kH=a("a"),Qxr=o("FlaxElectraForMultipleChoice"),Wxr=o(" (ELECTRA model)"),Hxr=l(),sC=a("li"),w6e=a("strong"),Uxr=o("roberta"),Jxr=o(" \u2014 "),SH=a("a"),Yxr=o("FlaxRobertaForMultipleChoice"),Kxr=o(" (RoBERTa model)"),Zxr=l(),lC=a("li"),A6e=a("strong"),ekr=o("roformer"),okr=o(" \u2014 "),RH=a("a"),rkr=o("FlaxRoFormerForMultipleChoice"),tkr=o(" (RoFormer model)"),akr=l(),iC=a("li"),y6e=a("strong"),nkr=o("xlm-roberta"),skr=o(" \u2014 "),BH=a("a"),lkr=o("FlaxXLMRobertaForMultipleChoice"),ikr=o(" (XLM-RoBERTa model)"),dkr=l(),L6e=a("p"),ckr=o("Examples:"),fkr=l(),f(G8.$$.fragment),BBe=l(),yf=a("h2"),dC=a("a"),x6e=a("span"),f(O8.$$.fragment),mkr=l(),k6e=a("span"),gkr=o("FlaxAutoModelForNextSentencePrediction"),PBe=l(),Gr=a("div"),f(V8.$$.fragment),hkr=l(),Lf=a("p"),pkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PH=a("a"),_kr=o("from_pretrained()"),ukr=o(" class method or the "),$H=a("a"),bkr=o("from_config()"),Fkr=o(` class
method.`),vkr=l(),X8=a("p"),Tkr=o("This class cannot be instantiated directly using "),S6e=a("code"),Mkr=o("__init__()"),Ekr=o(" (throws an error)."),Ckr=l(),$t=a("div"),f(z8.$$.fragment),wkr=l(),R6e=a("p"),Akr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ykr=l(),xf=a("p"),Lkr=o(`Note:
Loading a model from its configuration file does `),B6e=a("strong"),xkr=o("not"),kkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),Skr=o("from_pretrained()"),Rkr=o(" to load the model weights."),Bkr=l(),P6e=a("p"),Pkr=o("Examples:"),$kr=l(),f(Q8.$$.fragment),Ikr=l(),Io=a("div"),f(W8.$$.fragment),qkr=l(),$6e=a("p"),Nkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jkr=l(),Nn=a("p"),Dkr=o("The model class to instantiate is selected based on the "),I6e=a("code"),Gkr=o("model_type"),Okr=o(` property of the config object (either
passed as an argument or loaded from `),q6e=a("code"),Vkr=o("pretrained_model_name_or_path"),Xkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=a("code"),zkr=o("pretrained_model_name_or_path"),Qkr=o(":"),Wkr=l(),j6e=a("ul"),cC=a("li"),D6e=a("strong"),Hkr=o("bert"),Ukr=o(" \u2014 "),qH=a("a"),Jkr=o("FlaxBertForNextSentencePrediction"),Ykr=o(" (BERT model)"),Kkr=l(),G6e=a("p"),Zkr=o("Examples:"),eSr=l(),f(H8.$$.fragment),$Be=l(),kf=a("h2"),fC=a("a"),O6e=a("span"),f(U8.$$.fragment),oSr=l(),V6e=a("span"),rSr=o("FlaxAutoModelForImageClassification"),IBe=l(),Or=a("div"),f(J8.$$.fragment),tSr=l(),Sf=a("p"),aSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NH=a("a"),nSr=o("from_pretrained()"),sSr=o(" class method or the "),jH=a("a"),lSr=o("from_config()"),iSr=o(` class
method.`),dSr=l(),Y8=a("p"),cSr=o("This class cannot be instantiated directly using "),X6e=a("code"),fSr=o("__init__()"),mSr=o(" (throws an error)."),gSr=l(),It=a("div"),f(K8.$$.fragment),hSr=l(),z6e=a("p"),pSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Sr=l(),Rf=a("p"),uSr=o(`Note:
Loading a model from its configuration file does `),Q6e=a("strong"),bSr=o("not"),FSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=a("a"),vSr=o("from_pretrained()"),TSr=o(" to load the model weights."),MSr=l(),W6e=a("p"),ESr=o("Examples:"),CSr=l(),f(Z8.$$.fragment),wSr=l(),qo=a("div"),f(e7.$$.fragment),ASr=l(),H6e=a("p"),ySr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LSr=l(),jn=a("p"),xSr=o("The model class to instantiate is selected based on the "),U6e=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),J6e=a("code"),RSr=o("pretrained_model_name_or_path"),BSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=a("code"),PSr=o("pretrained_model_name_or_path"),$Sr=o(":"),ISr=l(),o7=a("ul"),mC=a("li"),K6e=a("strong"),qSr=o("beit"),NSr=o(" \u2014 "),GH=a("a"),jSr=o("FlaxBeitForImageClassification"),DSr=o(" (BEiT model)"),GSr=l(),gC=a("li"),Z6e=a("strong"),OSr=o("vit"),VSr=o(" \u2014 "),OH=a("a"),XSr=o("FlaxViTForImageClassification"),zSr=o(" (ViT model)"),QSr=l(),eTe=a("p"),WSr=o("Examples:"),HSr=l(),f(r7.$$.fragment),qBe=l(),Bf=a("h2"),hC=a("a"),oTe=a("span"),f(t7.$$.fragment),USr=l(),rTe=a("span"),JSr=o("FlaxAutoModelForVision2Seq"),NBe=l(),Vr=a("div"),f(a7.$$.fragment),YSr=l(),Pf=a("p"),KSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VH=a("a"),ZSr=o("from_pretrained()"),eRr=o(" class method or the "),XH=a("a"),oRr=o("from_config()"),rRr=o(` class
method.`),tRr=l(),n7=a("p"),aRr=o("This class cannot be instantiated directly using "),tTe=a("code"),nRr=o("__init__()"),sRr=o(" (throws an error)."),lRr=l(),qt=a("div"),f(s7.$$.fragment),iRr=l(),aTe=a("p"),dRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cRr=l(),$f=a("p"),fRr=o(`Note:
Loading a model from its configuration file does `),nTe=a("strong"),mRr=o("not"),gRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),hRr=o("from_pretrained()"),pRr=o(" to load the model weights."),_Rr=l(),sTe=a("p"),uRr=o("Examples:"),bRr=l(),f(l7.$$.fragment),FRr=l(),No=a("div"),f(i7.$$.fragment),vRr=l(),lTe=a("p"),TRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MRr=l(),Dn=a("p"),ERr=o("The model class to instantiate is selected based on the "),iTe=a("code"),CRr=o("model_type"),wRr=o(` property of the config object (either
passed as an argument or loaded from `),dTe=a("code"),ARr=o("pretrained_model_name_or_path"),yRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=a("code"),LRr=o("pretrained_model_name_or_path"),xRr=o(":"),kRr=l(),fTe=a("ul"),pC=a("li"),mTe=a("strong"),SRr=o("vision-encoder-decoder"),RRr=o(" \u2014 "),QH=a("a"),BRr=o("FlaxVisionEncoderDecoderModel"),PRr=o(" (Vision Encoder decoder model)"),$Rr=l(),gTe=a("p"),IRr=o("Examples:"),qRr=l(),f(d7.$$.fragment),this.h()},l(c){const u=tCt('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),de=n(c,"H1",{class:!0});var c7=s(de);Ce=n(c7,"A",{id:!0,class:!0,href:!0});var hTe=s(Ce);lo=n(hTe,"SPAN",{});var pTe=s(lo);m(me.$$.fragment,pTe),pTe.forEach(t),hTe.forEach(t),Me=i(c7),Xo=n(c7,"SPAN",{});var jRr=s(Xo);qi=r(jRr,"Auto Classes"),jRr.forEach(t),c7.forEach(t),Nf=i(c),fa=n(c,"P",{});var DBe=s(fa);Ni=r(DBe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(DBe,"CODE",{});var DRr=s(ji);p3=r(DRr,"from_pretrained()"),DRr.forEach(t),jf=r(DBe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),DBe.forEach(t),xe=i(c),co=n(c,"P",{});var _C=s(co);Di=r(_C,"Instantiating one of "),Gn=n(_C,"A",{href:!0});var GRr=s(Gn);_3=r(GRr,"AutoConfig"),GRr.forEach(t),On=r(_C,", "),Vn=n(_C,"A",{href:!0});var ORr=s(Vn);u3=r(ORr,"AutoModel"),ORr.forEach(t),Gi=r(_C,`, and
`),Xn=n(_C,"A",{href:!0});var VRr=s(Xn);b3=r(VRr,"AutoTokenizer"),VRr.forEach(t),Oi=r(_C," will directly create a class of the relevant architecture. For instance"),_C.forEach(t),Df=i(c),m(Da.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var GBe=s(_e);i9=r(GBe,"will create a model that is an instance of "),Vi=n(GBe,"A",{href:!0});var XRr=s(Vi);d9=r(XRr,"BertModel"),XRr.forEach(t),c9=r(GBe,"."),GBe.forEach(t),zo=i(c),Ga=n(c,"P",{});var OBe=s(Ga);f9=r(OBe,"There is one class of "),Gf=n(OBe,"CODE",{});var zRr=s(Gf);m9=r(zRr,"AutoModel"),zRr.forEach(t),Y$e=r(OBe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),OBe.forEach(t),NSe=i(c),Xi=n(c,"H2",{class:!0});var VBe=s(Xi);Of=n(VBe,"A",{id:!0,class:!0,href:!0});var QRr=s(Of);DJ=n(QRr,"SPAN",{});var WRr=s(DJ);m(F3.$$.fragment,WRr),WRr.forEach(t),QRr.forEach(t),K$e=i(VBe),GJ=n(VBe,"SPAN",{});var HRr=s(GJ);Z$e=r(HRr,"Extending the Auto Classes"),HRr.forEach(t),VBe.forEach(t),jSe=i(c),zn=n(c,"P",{});var WH=s(zn);eIe=r(WH,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),OJ=n(WH,"CODE",{});var URr=s(OJ);oIe=r(URr,"NewModel"),URr.forEach(t),rIe=r(WH,", make sure you have a "),VJ=n(WH,"CODE",{});var JRr=s(VJ);tIe=r(JRr,"NewModelConfig"),JRr.forEach(t),aIe=r(WH,` then you can add those to the auto
classes like this:`),WH.forEach(t),DSe=i(c),m(v3.$$.fragment,c),GSe=i(c),g9=n(c,"P",{});var YRr=s(g9);nIe=r(YRr,"You will then be able to use the auto classes like you would usually do!"),YRr.forEach(t),OSe=i(c),m(Vf.$$.fragment,c),VSe=i(c),zi=n(c,"H2",{class:!0});var XBe=s(zi);Xf=n(XBe,"A",{id:!0,class:!0,href:!0});var KRr=s(Xf);XJ=n(KRr,"SPAN",{});var ZRr=s(XJ);m(T3.$$.fragment,ZRr),ZRr.forEach(t),KRr.forEach(t),sIe=i(XBe),zJ=n(XBe,"SPAN",{});var eBr=s(zJ);lIe=r(eBr,"AutoConfig"),eBr.forEach(t),XBe.forEach(t),XSe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(M3.$$.fragment,Vs),iIe=i(Vs),E3=n(Vs,"P",{});var zBe=s(E3);dIe=r(zBe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),h9=n(zBe,"A",{href:!0});var oBr=s(h9);cIe=r(oBr,"from_pretrained()"),oBr.forEach(t),fIe=r(zBe," class method."),zBe.forEach(t),mIe=i(Vs),C3=n(Vs,"P",{});var QBe=s(C3);gIe=r(QBe,"This class cannot be instantiated directly using "),QJ=n(QBe,"CODE",{});var rBr=s(QJ);hIe=r(rBr,"__init__()"),rBr.forEach(t),pIe=r(QBe," (throws an error)."),QBe.forEach(t),_Ie=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(w3.$$.fragment,ga),uIe=i(ga),WJ=n(ga,"P",{});var tBr=s(WJ);bIe=r(tBr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),tBr.forEach(t),FIe=i(ga),Qi=n(ga,"P",{});var HH=s(Qi);vIe=r(HH,"The configuration class to instantiate is selected based on the "),HJ=n(HH,"CODE",{});var aBr=s(HJ);TIe=r(aBr,"model_type"),aBr.forEach(t),MIe=r(HH,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),UJ=n(HH,"CODE",{});var nBr=s(UJ);EIe=r(nBr,"pretrained_model_name_or_path"),nBr.forEach(t),CIe=r(HH,":"),HH.forEach(t),wIe=i(ga),F=n(ga,"UL",{});var v=s(F);zf=n(v,"LI",{});var _Te=s(zf);JJ=n(_Te,"STRONG",{});var sBr=s(JJ);AIe=r(sBr,"albert"),sBr.forEach(t),yIe=r(_Te," \u2014 "),p9=n(_Te,"A",{href:!0});var lBr=s(p9);LIe=r(lBr,"AlbertConfig"),lBr.forEach(t),xIe=r(_Te," (ALBERT model)"),_Te.forEach(t),kIe=i(v),Qf=n(v,"LI",{});var uTe=s(Qf);YJ=n(uTe,"STRONG",{});var iBr=s(YJ);SIe=r(iBr,"bart"),iBr.forEach(t),RIe=r(uTe," \u2014 "),_9=n(uTe,"A",{href:!0});var dBr=s(_9);BIe=r(dBr,"BartConfig"),dBr.forEach(t),PIe=r(uTe," (BART model)"),uTe.forEach(t),$Ie=i(v),Wf=n(v,"LI",{});var bTe=s(Wf);KJ=n(bTe,"STRONG",{});var cBr=s(KJ);IIe=r(cBr,"beit"),cBr.forEach(t),qIe=r(bTe," \u2014 "),u9=n(bTe,"A",{href:!0});var fBr=s(u9);NIe=r(fBr,"BeitConfig"),fBr.forEach(t),jIe=r(bTe," (BEiT model)"),bTe.forEach(t),DIe=i(v),Hf=n(v,"LI",{});var FTe=s(Hf);ZJ=n(FTe,"STRONG",{});var mBr=s(ZJ);GIe=r(mBr,"bert"),mBr.forEach(t),OIe=r(FTe," \u2014 "),b9=n(FTe,"A",{href:!0});var gBr=s(b9);VIe=r(gBr,"BertConfig"),gBr.forEach(t),XIe=r(FTe," (BERT model)"),FTe.forEach(t),zIe=i(v),Uf=n(v,"LI",{});var vTe=s(Uf);eY=n(vTe,"STRONG",{});var hBr=s(eY);QIe=r(hBr,"bert-generation"),hBr.forEach(t),WIe=r(vTe," \u2014 "),F9=n(vTe,"A",{href:!0});var pBr=s(F9);HIe=r(pBr,"BertGenerationConfig"),pBr.forEach(t),UIe=r(vTe," (Bert Generation model)"),vTe.forEach(t),JIe=i(v),Jf=n(v,"LI",{});var TTe=s(Jf);oY=n(TTe,"STRONG",{});var _Br=s(oY);YIe=r(_Br,"big_bird"),_Br.forEach(t),KIe=r(TTe," \u2014 "),v9=n(TTe,"A",{href:!0});var uBr=s(v9);ZIe=r(uBr,"BigBirdConfig"),uBr.forEach(t),eqe=r(TTe," (BigBird model)"),TTe.forEach(t),oqe=i(v),Yf=n(v,"LI",{});var MTe=s(Yf);rY=n(MTe,"STRONG",{});var bBr=s(rY);rqe=r(bBr,"bigbird_pegasus"),bBr.forEach(t),tqe=r(MTe," \u2014 "),T9=n(MTe,"A",{href:!0});var FBr=s(T9);aqe=r(FBr,"BigBirdPegasusConfig"),FBr.forEach(t),nqe=r(MTe," (BigBirdPegasus model)"),MTe.forEach(t),sqe=i(v),Kf=n(v,"LI",{});var ETe=s(Kf);tY=n(ETe,"STRONG",{});var vBr=s(tY);lqe=r(vBr,"blenderbot"),vBr.forEach(t),iqe=r(ETe," \u2014 "),M9=n(ETe,"A",{href:!0});var TBr=s(M9);dqe=r(TBr,"BlenderbotConfig"),TBr.forEach(t),cqe=r(ETe," (Blenderbot model)"),ETe.forEach(t),fqe=i(v),Zf=n(v,"LI",{});var CTe=s(Zf);aY=n(CTe,"STRONG",{});var MBr=s(aY);mqe=r(MBr,"blenderbot-small"),MBr.forEach(t),gqe=r(CTe," \u2014 "),E9=n(CTe,"A",{href:!0});var EBr=s(E9);hqe=r(EBr,"BlenderbotSmallConfig"),EBr.forEach(t),pqe=r(CTe," (BlenderbotSmall model)"),CTe.forEach(t),_qe=i(v),em=n(v,"LI",{});var wTe=s(em);nY=n(wTe,"STRONG",{});var CBr=s(nY);uqe=r(CBr,"camembert"),CBr.forEach(t),bqe=r(wTe," \u2014 "),C9=n(wTe,"A",{href:!0});var wBr=s(C9);Fqe=r(wBr,"CamembertConfig"),wBr.forEach(t),vqe=r(wTe," (CamemBERT model)"),wTe.forEach(t),Tqe=i(v),om=n(v,"LI",{});var ATe=s(om);sY=n(ATe,"STRONG",{});var ABr=s(sY);Mqe=r(ABr,"canine"),ABr.forEach(t),Eqe=r(ATe," \u2014 "),w9=n(ATe,"A",{href:!0});var yBr=s(w9);Cqe=r(yBr,"CanineConfig"),yBr.forEach(t),wqe=r(ATe," (Canine model)"),ATe.forEach(t),Aqe=i(v),rm=n(v,"LI",{});var yTe=s(rm);lY=n(yTe,"STRONG",{});var LBr=s(lY);yqe=r(LBr,"clip"),LBr.forEach(t),Lqe=r(yTe," \u2014 "),A9=n(yTe,"A",{href:!0});var xBr=s(A9);xqe=r(xBr,"CLIPConfig"),xBr.forEach(t),kqe=r(yTe," (CLIP model)"),yTe.forEach(t),Sqe=i(v),tm=n(v,"LI",{});var LTe=s(tm);iY=n(LTe,"STRONG",{});var kBr=s(iY);Rqe=r(kBr,"convbert"),kBr.forEach(t),Bqe=r(LTe," \u2014 "),y9=n(LTe,"A",{href:!0});var SBr=s(y9);Pqe=r(SBr,"ConvBertConfig"),SBr.forEach(t),$qe=r(LTe," (ConvBERT model)"),LTe.forEach(t),Iqe=i(v),am=n(v,"LI",{});var xTe=s(am);dY=n(xTe,"STRONG",{});var RBr=s(dY);qqe=r(RBr,"convnext"),RBr.forEach(t),Nqe=r(xTe," \u2014 "),L9=n(xTe,"A",{href:!0});var BBr=s(L9);jqe=r(BBr,"ConvNextConfig"),BBr.forEach(t),Dqe=r(xTe," (ConvNext model)"),xTe.forEach(t),Gqe=i(v),nm=n(v,"LI",{});var kTe=s(nm);cY=n(kTe,"STRONG",{});var PBr=s(cY);Oqe=r(PBr,"ctrl"),PBr.forEach(t),Vqe=r(kTe," \u2014 "),x9=n(kTe,"A",{href:!0});var $Br=s(x9);Xqe=r($Br,"CTRLConfig"),$Br.forEach(t),zqe=r(kTe," (CTRL model)"),kTe.forEach(t),Qqe=i(v),sm=n(v,"LI",{});var STe=s(sm);fY=n(STe,"STRONG",{});var IBr=s(fY);Wqe=r(IBr,"data2vec-audio"),IBr.forEach(t),Hqe=r(STe," \u2014 "),k9=n(STe,"A",{href:!0});var qBr=s(k9);Uqe=r(qBr,"Data2VecAudioConfig"),qBr.forEach(t),Jqe=r(STe," (Data2VecAudio model)"),STe.forEach(t),Yqe=i(v),lm=n(v,"LI",{});var RTe=s(lm);mY=n(RTe,"STRONG",{});var NBr=s(mY);Kqe=r(NBr,"data2vec-text"),NBr.forEach(t),Zqe=r(RTe," \u2014 "),S9=n(RTe,"A",{href:!0});var jBr=s(S9);eNe=r(jBr,"Data2VecTextConfig"),jBr.forEach(t),oNe=r(RTe," (Data2VecText model)"),RTe.forEach(t),rNe=i(v),im=n(v,"LI",{});var BTe=s(im);gY=n(BTe,"STRONG",{});var DBr=s(gY);tNe=r(DBr,"deberta"),DBr.forEach(t),aNe=r(BTe," \u2014 "),R9=n(BTe,"A",{href:!0});var GBr=s(R9);nNe=r(GBr,"DebertaConfig"),GBr.forEach(t),sNe=r(BTe," (DeBERTa model)"),BTe.forEach(t),lNe=i(v),dm=n(v,"LI",{});var PTe=s(dm);hY=n(PTe,"STRONG",{});var OBr=s(hY);iNe=r(OBr,"deberta-v2"),OBr.forEach(t),dNe=r(PTe," \u2014 "),B9=n(PTe,"A",{href:!0});var VBr=s(B9);cNe=r(VBr,"DebertaV2Config"),VBr.forEach(t),fNe=r(PTe," (DeBERTa-v2 model)"),PTe.forEach(t),mNe=i(v),cm=n(v,"LI",{});var $Te=s(cm);pY=n($Te,"STRONG",{});var XBr=s(pY);gNe=r(XBr,"decision_transformer"),XBr.forEach(t),hNe=r($Te," \u2014 "),P9=n($Te,"A",{href:!0});var zBr=s(P9);pNe=r(zBr,"DecisionTransformerConfig"),zBr.forEach(t),_Ne=r($Te," (Decision Transformer model)"),$Te.forEach(t),uNe=i(v),fm=n(v,"LI",{});var ITe=s(fm);_Y=n(ITe,"STRONG",{});var QBr=s(_Y);bNe=r(QBr,"deit"),QBr.forEach(t),FNe=r(ITe," \u2014 "),$9=n(ITe,"A",{href:!0});var WBr=s($9);vNe=r(WBr,"DeiTConfig"),WBr.forEach(t),TNe=r(ITe," (DeiT model)"),ITe.forEach(t),MNe=i(v),mm=n(v,"LI",{});var qTe=s(mm);uY=n(qTe,"STRONG",{});var HBr=s(uY);ENe=r(HBr,"detr"),HBr.forEach(t),CNe=r(qTe," \u2014 "),I9=n(qTe,"A",{href:!0});var UBr=s(I9);wNe=r(UBr,"DetrConfig"),UBr.forEach(t),ANe=r(qTe," (DETR model)"),qTe.forEach(t),yNe=i(v),gm=n(v,"LI",{});var NTe=s(gm);bY=n(NTe,"STRONG",{});var JBr=s(bY);LNe=r(JBr,"distilbert"),JBr.forEach(t),xNe=r(NTe," \u2014 "),q9=n(NTe,"A",{href:!0});var YBr=s(q9);kNe=r(YBr,"DistilBertConfig"),YBr.forEach(t),SNe=r(NTe," (DistilBERT model)"),NTe.forEach(t),RNe=i(v),hm=n(v,"LI",{});var jTe=s(hm);FY=n(jTe,"STRONG",{});var KBr=s(FY);BNe=r(KBr,"dpr"),KBr.forEach(t),PNe=r(jTe," \u2014 "),N9=n(jTe,"A",{href:!0});var ZBr=s(N9);$Ne=r(ZBr,"DPRConfig"),ZBr.forEach(t),INe=r(jTe," (DPR model)"),jTe.forEach(t),qNe=i(v),pm=n(v,"LI",{});var DTe=s(pm);vY=n(DTe,"STRONG",{});var ePr=s(vY);NNe=r(ePr,"dpt"),ePr.forEach(t),jNe=r(DTe," \u2014 "),j9=n(DTe,"A",{href:!0});var oPr=s(j9);DNe=r(oPr,"DPTConfig"),oPr.forEach(t),GNe=r(DTe," (DPT model)"),DTe.forEach(t),ONe=i(v),_m=n(v,"LI",{});var GTe=s(_m);TY=n(GTe,"STRONG",{});var rPr=s(TY);VNe=r(rPr,"electra"),rPr.forEach(t),XNe=r(GTe," \u2014 "),D9=n(GTe,"A",{href:!0});var tPr=s(D9);zNe=r(tPr,"ElectraConfig"),tPr.forEach(t),QNe=r(GTe," (ELECTRA model)"),GTe.forEach(t),WNe=i(v),um=n(v,"LI",{});var OTe=s(um);MY=n(OTe,"STRONG",{});var aPr=s(MY);HNe=r(aPr,"encoder-decoder"),aPr.forEach(t),UNe=r(OTe," \u2014 "),G9=n(OTe,"A",{href:!0});var nPr=s(G9);JNe=r(nPr,"EncoderDecoderConfig"),nPr.forEach(t),YNe=r(OTe," (Encoder decoder model)"),OTe.forEach(t),KNe=i(v),bm=n(v,"LI",{});var VTe=s(bm);EY=n(VTe,"STRONG",{});var sPr=s(EY);ZNe=r(sPr,"flaubert"),sPr.forEach(t),eje=r(VTe," \u2014 "),O9=n(VTe,"A",{href:!0});var lPr=s(O9);oje=r(lPr,"FlaubertConfig"),lPr.forEach(t),rje=r(VTe," (FlauBERT model)"),VTe.forEach(t),tje=i(v),Fm=n(v,"LI",{});var XTe=s(Fm);CY=n(XTe,"STRONG",{});var iPr=s(CY);aje=r(iPr,"fnet"),iPr.forEach(t),nje=r(XTe," \u2014 "),V9=n(XTe,"A",{href:!0});var dPr=s(V9);sje=r(dPr,"FNetConfig"),dPr.forEach(t),lje=r(XTe," (FNet model)"),XTe.forEach(t),ije=i(v),vm=n(v,"LI",{});var zTe=s(vm);wY=n(zTe,"STRONG",{});var cPr=s(wY);dje=r(cPr,"fsmt"),cPr.forEach(t),cje=r(zTe," \u2014 "),X9=n(zTe,"A",{href:!0});var fPr=s(X9);fje=r(fPr,"FSMTConfig"),fPr.forEach(t),mje=r(zTe," (FairSeq Machine-Translation model)"),zTe.forEach(t),gje=i(v),Tm=n(v,"LI",{});var QTe=s(Tm);AY=n(QTe,"STRONG",{});var mPr=s(AY);hje=r(mPr,"funnel"),mPr.forEach(t),pje=r(QTe," \u2014 "),z9=n(QTe,"A",{href:!0});var gPr=s(z9);_je=r(gPr,"FunnelConfig"),gPr.forEach(t),uje=r(QTe," (Funnel Transformer model)"),QTe.forEach(t),bje=i(v),Mm=n(v,"LI",{});var WTe=s(Mm);yY=n(WTe,"STRONG",{});var hPr=s(yY);Fje=r(hPr,"glpn"),hPr.forEach(t),vje=r(WTe," \u2014 "),Q9=n(WTe,"A",{href:!0});var pPr=s(Q9);Tje=r(pPr,"GLPNConfig"),pPr.forEach(t),Mje=r(WTe," (GLPN model)"),WTe.forEach(t),Eje=i(v),Em=n(v,"LI",{});var HTe=s(Em);LY=n(HTe,"STRONG",{});var _Pr=s(LY);Cje=r(_Pr,"gpt2"),_Pr.forEach(t),wje=r(HTe," \u2014 "),W9=n(HTe,"A",{href:!0});var uPr=s(W9);Aje=r(uPr,"GPT2Config"),uPr.forEach(t),yje=r(HTe," (OpenAI GPT-2 model)"),HTe.forEach(t),Lje=i(v),Cm=n(v,"LI",{});var UTe=s(Cm);xY=n(UTe,"STRONG",{});var bPr=s(xY);xje=r(bPr,"gpt_neo"),bPr.forEach(t),kje=r(UTe," \u2014 "),H9=n(UTe,"A",{href:!0});var FPr=s(H9);Sje=r(FPr,"GPTNeoConfig"),FPr.forEach(t),Rje=r(UTe," (GPT Neo model)"),UTe.forEach(t),Bje=i(v),wm=n(v,"LI",{});var JTe=s(wm);kY=n(JTe,"STRONG",{});var vPr=s(kY);Pje=r(vPr,"gptj"),vPr.forEach(t),$je=r(JTe," \u2014 "),U9=n(JTe,"A",{href:!0});var TPr=s(U9);Ije=r(TPr,"GPTJConfig"),TPr.forEach(t),qje=r(JTe," (GPT-J model)"),JTe.forEach(t),Nje=i(v),Am=n(v,"LI",{});var YTe=s(Am);SY=n(YTe,"STRONG",{});var MPr=s(SY);jje=r(MPr,"hubert"),MPr.forEach(t),Dje=r(YTe," \u2014 "),J9=n(YTe,"A",{href:!0});var EPr=s(J9);Gje=r(EPr,"HubertConfig"),EPr.forEach(t),Oje=r(YTe," (Hubert model)"),YTe.forEach(t),Vje=i(v),ym=n(v,"LI",{});var KTe=s(ym);RY=n(KTe,"STRONG",{});var CPr=s(RY);Xje=r(CPr,"ibert"),CPr.forEach(t),zje=r(KTe," \u2014 "),Y9=n(KTe,"A",{href:!0});var wPr=s(Y9);Qje=r(wPr,"IBertConfig"),wPr.forEach(t),Wje=r(KTe," (I-BERT model)"),KTe.forEach(t),Hje=i(v),Lm=n(v,"LI",{});var ZTe=s(Lm);BY=n(ZTe,"STRONG",{});var APr=s(BY);Uje=r(APr,"imagegpt"),APr.forEach(t),Jje=r(ZTe," \u2014 "),K9=n(ZTe,"A",{href:!0});var yPr=s(K9);Yje=r(yPr,"ImageGPTConfig"),yPr.forEach(t),Kje=r(ZTe," (ImageGPT model)"),ZTe.forEach(t),Zje=i(v),xm=n(v,"LI",{});var eMe=s(xm);PY=n(eMe,"STRONG",{});var LPr=s(PY);eDe=r(LPr,"layoutlm"),LPr.forEach(t),oDe=r(eMe," \u2014 "),Z9=n(eMe,"A",{href:!0});var xPr=s(Z9);rDe=r(xPr,"LayoutLMConfig"),xPr.forEach(t),tDe=r(eMe," (LayoutLM model)"),eMe.forEach(t),aDe=i(v),km=n(v,"LI",{});var oMe=s(km);$Y=n(oMe,"STRONG",{});var kPr=s($Y);nDe=r(kPr,"layoutlmv2"),kPr.forEach(t),sDe=r(oMe," \u2014 "),ex=n(oMe,"A",{href:!0});var SPr=s(ex);lDe=r(SPr,"LayoutLMv2Config"),SPr.forEach(t),iDe=r(oMe," (LayoutLMv2 model)"),oMe.forEach(t),dDe=i(v),Sm=n(v,"LI",{});var rMe=s(Sm);IY=n(rMe,"STRONG",{});var RPr=s(IY);cDe=r(RPr,"led"),RPr.forEach(t),fDe=r(rMe," \u2014 "),ox=n(rMe,"A",{href:!0});var BPr=s(ox);mDe=r(BPr,"LEDConfig"),BPr.forEach(t),gDe=r(rMe," (LED model)"),rMe.forEach(t),hDe=i(v),Rm=n(v,"LI",{});var tMe=s(Rm);qY=n(tMe,"STRONG",{});var PPr=s(qY);pDe=r(PPr,"longformer"),PPr.forEach(t),_De=r(tMe," \u2014 "),rx=n(tMe,"A",{href:!0});var $Pr=s(rx);uDe=r($Pr,"LongformerConfig"),$Pr.forEach(t),bDe=r(tMe," (Longformer model)"),tMe.forEach(t),FDe=i(v),Bm=n(v,"LI",{});var aMe=s(Bm);NY=n(aMe,"STRONG",{});var IPr=s(NY);vDe=r(IPr,"luke"),IPr.forEach(t),TDe=r(aMe," \u2014 "),tx=n(aMe,"A",{href:!0});var qPr=s(tx);MDe=r(qPr,"LukeConfig"),qPr.forEach(t),EDe=r(aMe," (LUKE model)"),aMe.forEach(t),CDe=i(v),Pm=n(v,"LI",{});var nMe=s(Pm);jY=n(nMe,"STRONG",{});var NPr=s(jY);wDe=r(NPr,"lxmert"),NPr.forEach(t),ADe=r(nMe," \u2014 "),ax=n(nMe,"A",{href:!0});var jPr=s(ax);yDe=r(jPr,"LxmertConfig"),jPr.forEach(t),LDe=r(nMe," (LXMERT model)"),nMe.forEach(t),xDe=i(v),$m=n(v,"LI",{});var sMe=s($m);DY=n(sMe,"STRONG",{});var DPr=s(DY);kDe=r(DPr,"m2m_100"),DPr.forEach(t),SDe=r(sMe," \u2014 "),nx=n(sMe,"A",{href:!0});var GPr=s(nx);RDe=r(GPr,"M2M100Config"),GPr.forEach(t),BDe=r(sMe," (M2M100 model)"),sMe.forEach(t),PDe=i(v),Im=n(v,"LI",{});var lMe=s(Im);GY=n(lMe,"STRONG",{});var OPr=s(GY);$De=r(OPr,"marian"),OPr.forEach(t),IDe=r(lMe," \u2014 "),sx=n(lMe,"A",{href:!0});var VPr=s(sx);qDe=r(VPr,"MarianConfig"),VPr.forEach(t),NDe=r(lMe," (Marian model)"),lMe.forEach(t),jDe=i(v),qm=n(v,"LI",{});var iMe=s(qm);OY=n(iMe,"STRONG",{});var XPr=s(OY);DDe=r(XPr,"maskformer"),XPr.forEach(t),GDe=r(iMe," \u2014 "),lx=n(iMe,"A",{href:!0});var zPr=s(lx);ODe=r(zPr,"MaskFormerConfig"),zPr.forEach(t),VDe=r(iMe," (MaskFormer model)"),iMe.forEach(t),XDe=i(v),Nm=n(v,"LI",{});var dMe=s(Nm);VY=n(dMe,"STRONG",{});var QPr=s(VY);zDe=r(QPr,"mbart"),QPr.forEach(t),QDe=r(dMe," \u2014 "),ix=n(dMe,"A",{href:!0});var WPr=s(ix);WDe=r(WPr,"MBartConfig"),WPr.forEach(t),HDe=r(dMe," (mBART model)"),dMe.forEach(t),UDe=i(v),jm=n(v,"LI",{});var cMe=s(jm);XY=n(cMe,"STRONG",{});var HPr=s(XY);JDe=r(HPr,"megatron-bert"),HPr.forEach(t),YDe=r(cMe," \u2014 "),dx=n(cMe,"A",{href:!0});var UPr=s(dx);KDe=r(UPr,"MegatronBertConfig"),UPr.forEach(t),ZDe=r(cMe," (MegatronBert model)"),cMe.forEach(t),eGe=i(v),Dm=n(v,"LI",{});var fMe=s(Dm);zY=n(fMe,"STRONG",{});var JPr=s(zY);oGe=r(JPr,"mobilebert"),JPr.forEach(t),rGe=r(fMe," \u2014 "),cx=n(fMe,"A",{href:!0});var YPr=s(cx);tGe=r(YPr,"MobileBertConfig"),YPr.forEach(t),aGe=r(fMe," (MobileBERT model)"),fMe.forEach(t),nGe=i(v),Gm=n(v,"LI",{});var mMe=s(Gm);QY=n(mMe,"STRONG",{});var KPr=s(QY);sGe=r(KPr,"mpnet"),KPr.forEach(t),lGe=r(mMe," \u2014 "),fx=n(mMe,"A",{href:!0});var ZPr=s(fx);iGe=r(ZPr,"MPNetConfig"),ZPr.forEach(t),dGe=r(mMe," (MPNet model)"),mMe.forEach(t),cGe=i(v),Om=n(v,"LI",{});var gMe=s(Om);WY=n(gMe,"STRONG",{});var e$r=s(WY);fGe=r(e$r,"mt5"),e$r.forEach(t),mGe=r(gMe," \u2014 "),mx=n(gMe,"A",{href:!0});var o$r=s(mx);gGe=r(o$r,"MT5Config"),o$r.forEach(t),hGe=r(gMe," (mT5 model)"),gMe.forEach(t),pGe=i(v),Vm=n(v,"LI",{});var hMe=s(Vm);HY=n(hMe,"STRONG",{});var r$r=s(HY);_Ge=r(r$r,"nystromformer"),r$r.forEach(t),uGe=r(hMe," \u2014 "),gx=n(hMe,"A",{href:!0});var t$r=s(gx);bGe=r(t$r,"NystromformerConfig"),t$r.forEach(t),FGe=r(hMe," (Nystromformer model)"),hMe.forEach(t),vGe=i(v),Xm=n(v,"LI",{});var pMe=s(Xm);UY=n(pMe,"STRONG",{});var a$r=s(UY);TGe=r(a$r,"openai-gpt"),a$r.forEach(t),MGe=r(pMe," \u2014 "),hx=n(pMe,"A",{href:!0});var n$r=s(hx);EGe=r(n$r,"OpenAIGPTConfig"),n$r.forEach(t),CGe=r(pMe," (OpenAI GPT model)"),pMe.forEach(t),wGe=i(v),zm=n(v,"LI",{});var _Me=s(zm);JY=n(_Me,"STRONG",{});var s$r=s(JY);AGe=r(s$r,"pegasus"),s$r.forEach(t),yGe=r(_Me," \u2014 "),px=n(_Me,"A",{href:!0});var l$r=s(px);LGe=r(l$r,"PegasusConfig"),l$r.forEach(t),xGe=r(_Me," (Pegasus model)"),_Me.forEach(t),kGe=i(v),Qm=n(v,"LI",{});var uMe=s(Qm);YY=n(uMe,"STRONG",{});var i$r=s(YY);SGe=r(i$r,"perceiver"),i$r.forEach(t),RGe=r(uMe," \u2014 "),_x=n(uMe,"A",{href:!0});var d$r=s(_x);BGe=r(d$r,"PerceiverConfig"),d$r.forEach(t),PGe=r(uMe," (Perceiver model)"),uMe.forEach(t),$Ge=i(v),Wm=n(v,"LI",{});var bMe=s(Wm);KY=n(bMe,"STRONG",{});var c$r=s(KY);IGe=r(c$r,"plbart"),c$r.forEach(t),qGe=r(bMe," \u2014 "),ux=n(bMe,"A",{href:!0});var f$r=s(ux);NGe=r(f$r,"PLBartConfig"),f$r.forEach(t),jGe=r(bMe," (PLBart model)"),bMe.forEach(t),DGe=i(v),Hm=n(v,"LI",{});var FMe=s(Hm);ZY=n(FMe,"STRONG",{});var m$r=s(ZY);GGe=r(m$r,"poolformer"),m$r.forEach(t),OGe=r(FMe," \u2014 "),bx=n(FMe,"A",{href:!0});var g$r=s(bx);VGe=r(g$r,"PoolFormerConfig"),g$r.forEach(t),XGe=r(FMe," (PoolFormer model)"),FMe.forEach(t),zGe=i(v),Um=n(v,"LI",{});var vMe=s(Um);eK=n(vMe,"STRONG",{});var h$r=s(eK);QGe=r(h$r,"prophetnet"),h$r.forEach(t),WGe=r(vMe," \u2014 "),Fx=n(vMe,"A",{href:!0});var p$r=s(Fx);HGe=r(p$r,"ProphetNetConfig"),p$r.forEach(t),UGe=r(vMe," (ProphetNet model)"),vMe.forEach(t),JGe=i(v),Jm=n(v,"LI",{});var TMe=s(Jm);oK=n(TMe,"STRONG",{});var _$r=s(oK);YGe=r(_$r,"qdqbert"),_$r.forEach(t),KGe=r(TMe," \u2014 "),vx=n(TMe,"A",{href:!0});var u$r=s(vx);ZGe=r(u$r,"QDQBertConfig"),u$r.forEach(t),eOe=r(TMe," (QDQBert model)"),TMe.forEach(t),oOe=i(v),Ym=n(v,"LI",{});var MMe=s(Ym);rK=n(MMe,"STRONG",{});var b$r=s(rK);rOe=r(b$r,"rag"),b$r.forEach(t),tOe=r(MMe," \u2014 "),Tx=n(MMe,"A",{href:!0});var F$r=s(Tx);aOe=r(F$r,"RagConfig"),F$r.forEach(t),nOe=r(MMe," (RAG model)"),MMe.forEach(t),sOe=i(v),Km=n(v,"LI",{});var EMe=s(Km);tK=n(EMe,"STRONG",{});var v$r=s(tK);lOe=r(v$r,"realm"),v$r.forEach(t),iOe=r(EMe," \u2014 "),Mx=n(EMe,"A",{href:!0});var T$r=s(Mx);dOe=r(T$r,"RealmConfig"),T$r.forEach(t),cOe=r(EMe," (Realm model)"),EMe.forEach(t),fOe=i(v),Zm=n(v,"LI",{});var CMe=s(Zm);aK=n(CMe,"STRONG",{});var M$r=s(aK);mOe=r(M$r,"reformer"),M$r.forEach(t),gOe=r(CMe," \u2014 "),Ex=n(CMe,"A",{href:!0});var E$r=s(Ex);hOe=r(E$r,"ReformerConfig"),E$r.forEach(t),pOe=r(CMe," (Reformer model)"),CMe.forEach(t),_Oe=i(v),eg=n(v,"LI",{});var wMe=s(eg);nK=n(wMe,"STRONG",{});var C$r=s(nK);uOe=r(C$r,"rembert"),C$r.forEach(t),bOe=r(wMe," \u2014 "),Cx=n(wMe,"A",{href:!0});var w$r=s(Cx);FOe=r(w$r,"RemBertConfig"),w$r.forEach(t),vOe=r(wMe," (RemBERT model)"),wMe.forEach(t),TOe=i(v),og=n(v,"LI",{});var AMe=s(og);sK=n(AMe,"STRONG",{});var A$r=s(sK);MOe=r(A$r,"resnet"),A$r.forEach(t),EOe=r(AMe," \u2014 "),wx=n(AMe,"A",{href:!0});var y$r=s(wx);COe=r(y$r,"ResNetConfig"),y$r.forEach(t),wOe=r(AMe," (ResNet model)"),AMe.forEach(t),AOe=i(v),rg=n(v,"LI",{});var yMe=s(rg);lK=n(yMe,"STRONG",{});var L$r=s(lK);yOe=r(L$r,"retribert"),L$r.forEach(t),LOe=r(yMe," \u2014 "),Ax=n(yMe,"A",{href:!0});var x$r=s(Ax);xOe=r(x$r,"RetriBertConfig"),x$r.forEach(t),kOe=r(yMe," (RetriBERT model)"),yMe.forEach(t),SOe=i(v),tg=n(v,"LI",{});var LMe=s(tg);iK=n(LMe,"STRONG",{});var k$r=s(iK);ROe=r(k$r,"roberta"),k$r.forEach(t),BOe=r(LMe," \u2014 "),yx=n(LMe,"A",{href:!0});var S$r=s(yx);POe=r(S$r,"RobertaConfig"),S$r.forEach(t),$Oe=r(LMe," (RoBERTa model)"),LMe.forEach(t),IOe=i(v),ag=n(v,"LI",{});var xMe=s(ag);dK=n(xMe,"STRONG",{});var R$r=s(dK);qOe=r(R$r,"roformer"),R$r.forEach(t),NOe=r(xMe," \u2014 "),Lx=n(xMe,"A",{href:!0});var B$r=s(Lx);jOe=r(B$r,"RoFormerConfig"),B$r.forEach(t),DOe=r(xMe," (RoFormer model)"),xMe.forEach(t),GOe=i(v),ng=n(v,"LI",{});var kMe=s(ng);cK=n(kMe,"STRONG",{});var P$r=s(cK);OOe=r(P$r,"segformer"),P$r.forEach(t),VOe=r(kMe," \u2014 "),xx=n(kMe,"A",{href:!0});var $$r=s(xx);XOe=r($$r,"SegformerConfig"),$$r.forEach(t),zOe=r(kMe," (SegFormer model)"),kMe.forEach(t),QOe=i(v),sg=n(v,"LI",{});var SMe=s(sg);fK=n(SMe,"STRONG",{});var I$r=s(fK);WOe=r(I$r,"sew"),I$r.forEach(t),HOe=r(SMe," \u2014 "),kx=n(SMe,"A",{href:!0});var q$r=s(kx);UOe=r(q$r,"SEWConfig"),q$r.forEach(t),JOe=r(SMe," (SEW model)"),SMe.forEach(t),YOe=i(v),lg=n(v,"LI",{});var RMe=s(lg);mK=n(RMe,"STRONG",{});var N$r=s(mK);KOe=r(N$r,"sew-d"),N$r.forEach(t),ZOe=r(RMe," \u2014 "),Sx=n(RMe,"A",{href:!0});var j$r=s(Sx);eVe=r(j$r,"SEWDConfig"),j$r.forEach(t),oVe=r(RMe," (SEW-D model)"),RMe.forEach(t),rVe=i(v),ig=n(v,"LI",{});var BMe=s(ig);gK=n(BMe,"STRONG",{});var D$r=s(gK);tVe=r(D$r,"speech-encoder-decoder"),D$r.forEach(t),aVe=r(BMe," \u2014 "),Rx=n(BMe,"A",{href:!0});var G$r=s(Rx);nVe=r(G$r,"SpeechEncoderDecoderConfig"),G$r.forEach(t),sVe=r(BMe," (Speech Encoder decoder model)"),BMe.forEach(t),lVe=i(v),dg=n(v,"LI",{});var PMe=s(dg);hK=n(PMe,"STRONG",{});var O$r=s(hK);iVe=r(O$r,"speech_to_text"),O$r.forEach(t),dVe=r(PMe," \u2014 "),Bx=n(PMe,"A",{href:!0});var V$r=s(Bx);cVe=r(V$r,"Speech2TextConfig"),V$r.forEach(t),fVe=r(PMe," (Speech2Text model)"),PMe.forEach(t),mVe=i(v),cg=n(v,"LI",{});var $Me=s(cg);pK=n($Me,"STRONG",{});var X$r=s(pK);gVe=r(X$r,"speech_to_text_2"),X$r.forEach(t),hVe=r($Me," \u2014 "),Px=n($Me,"A",{href:!0});var z$r=s(Px);pVe=r(z$r,"Speech2Text2Config"),z$r.forEach(t),_Ve=r($Me," (Speech2Text2 model)"),$Me.forEach(t),uVe=i(v),fg=n(v,"LI",{});var IMe=s(fg);_K=n(IMe,"STRONG",{});var Q$r=s(_K);bVe=r(Q$r,"splinter"),Q$r.forEach(t),FVe=r(IMe," \u2014 "),$x=n(IMe,"A",{href:!0});var W$r=s($x);vVe=r(W$r,"SplinterConfig"),W$r.forEach(t),TVe=r(IMe," (Splinter model)"),IMe.forEach(t),MVe=i(v),mg=n(v,"LI",{});var qMe=s(mg);uK=n(qMe,"STRONG",{});var H$r=s(uK);EVe=r(H$r,"squeezebert"),H$r.forEach(t),CVe=r(qMe," \u2014 "),Ix=n(qMe,"A",{href:!0});var U$r=s(Ix);wVe=r(U$r,"SqueezeBertConfig"),U$r.forEach(t),AVe=r(qMe," (SqueezeBERT model)"),qMe.forEach(t),yVe=i(v),gg=n(v,"LI",{});var NMe=s(gg);bK=n(NMe,"STRONG",{});var J$r=s(bK);LVe=r(J$r,"swin"),J$r.forEach(t),xVe=r(NMe," \u2014 "),qx=n(NMe,"A",{href:!0});var Y$r=s(qx);kVe=r(Y$r,"SwinConfig"),Y$r.forEach(t),SVe=r(NMe," (Swin model)"),NMe.forEach(t),RVe=i(v),hg=n(v,"LI",{});var jMe=s(hg);FK=n(jMe,"STRONG",{});var K$r=s(FK);BVe=r(K$r,"t5"),K$r.forEach(t),PVe=r(jMe," \u2014 "),Nx=n(jMe,"A",{href:!0});var Z$r=s(Nx);$Ve=r(Z$r,"T5Config"),Z$r.forEach(t),IVe=r(jMe," (T5 model)"),jMe.forEach(t),qVe=i(v),pg=n(v,"LI",{});var DMe=s(pg);vK=n(DMe,"STRONG",{});var eIr=s(vK);NVe=r(eIr,"tapas"),eIr.forEach(t),jVe=r(DMe," \u2014 "),jx=n(DMe,"A",{href:!0});var oIr=s(jx);DVe=r(oIr,"TapasConfig"),oIr.forEach(t),GVe=r(DMe," (TAPAS model)"),DMe.forEach(t),OVe=i(v),_g=n(v,"LI",{});var GMe=s(_g);TK=n(GMe,"STRONG",{});var rIr=s(TK);VVe=r(rIr,"transfo-xl"),rIr.forEach(t),XVe=r(GMe," \u2014 "),Dx=n(GMe,"A",{href:!0});var tIr=s(Dx);zVe=r(tIr,"TransfoXLConfig"),tIr.forEach(t),QVe=r(GMe," (Transformer-XL model)"),GMe.forEach(t),WVe=i(v),ug=n(v,"LI",{});var OMe=s(ug);MK=n(OMe,"STRONG",{});var aIr=s(MK);HVe=r(aIr,"trocr"),aIr.forEach(t),UVe=r(OMe," \u2014 "),Gx=n(OMe,"A",{href:!0});var nIr=s(Gx);JVe=r(nIr,"TrOCRConfig"),nIr.forEach(t),YVe=r(OMe," (TrOCR model)"),OMe.forEach(t),KVe=i(v),bg=n(v,"LI",{});var VMe=s(bg);EK=n(VMe,"STRONG",{});var sIr=s(EK);ZVe=r(sIr,"unispeech"),sIr.forEach(t),eXe=r(VMe," \u2014 "),Ox=n(VMe,"A",{href:!0});var lIr=s(Ox);oXe=r(lIr,"UniSpeechConfig"),lIr.forEach(t),rXe=r(VMe," (UniSpeech model)"),VMe.forEach(t),tXe=i(v),Fg=n(v,"LI",{});var XMe=s(Fg);CK=n(XMe,"STRONG",{});var iIr=s(CK);aXe=r(iIr,"unispeech-sat"),iIr.forEach(t),nXe=r(XMe," \u2014 "),Vx=n(XMe,"A",{href:!0});var dIr=s(Vx);sXe=r(dIr,"UniSpeechSatConfig"),dIr.forEach(t),lXe=r(XMe," (UniSpeechSat model)"),XMe.forEach(t),iXe=i(v),vg=n(v,"LI",{});var zMe=s(vg);wK=n(zMe,"STRONG",{});var cIr=s(wK);dXe=r(cIr,"van"),cIr.forEach(t),cXe=r(zMe," \u2014 "),Xx=n(zMe,"A",{href:!0});var fIr=s(Xx);fXe=r(fIr,"VanConfig"),fIr.forEach(t),mXe=r(zMe," (VAN model)"),zMe.forEach(t),gXe=i(v),Tg=n(v,"LI",{});var QMe=s(Tg);AK=n(QMe,"STRONG",{});var mIr=s(AK);hXe=r(mIr,"vilt"),mIr.forEach(t),pXe=r(QMe," \u2014 "),zx=n(QMe,"A",{href:!0});var gIr=s(zx);_Xe=r(gIr,"ViltConfig"),gIr.forEach(t),uXe=r(QMe," (ViLT model)"),QMe.forEach(t),bXe=i(v),Mg=n(v,"LI",{});var WMe=s(Mg);yK=n(WMe,"STRONG",{});var hIr=s(yK);FXe=r(hIr,"vision-encoder-decoder"),hIr.forEach(t),vXe=r(WMe," \u2014 "),Qx=n(WMe,"A",{href:!0});var pIr=s(Qx);TXe=r(pIr,"VisionEncoderDecoderConfig"),pIr.forEach(t),MXe=r(WMe," (Vision Encoder decoder model)"),WMe.forEach(t),EXe=i(v),Eg=n(v,"LI",{});var HMe=s(Eg);LK=n(HMe,"STRONG",{});var _Ir=s(LK);CXe=r(_Ir,"vision-text-dual-encoder"),_Ir.forEach(t),wXe=r(HMe," \u2014 "),Wx=n(HMe,"A",{href:!0});var uIr=s(Wx);AXe=r(uIr,"VisionTextDualEncoderConfig"),uIr.forEach(t),yXe=r(HMe," (VisionTextDualEncoder model)"),HMe.forEach(t),LXe=i(v),Cg=n(v,"LI",{});var UMe=s(Cg);xK=n(UMe,"STRONG",{});var bIr=s(xK);xXe=r(bIr,"visual_bert"),bIr.forEach(t),kXe=r(UMe," \u2014 "),Hx=n(UMe,"A",{href:!0});var FIr=s(Hx);SXe=r(FIr,"VisualBertConfig"),FIr.forEach(t),RXe=r(UMe," (VisualBert model)"),UMe.forEach(t),BXe=i(v),wg=n(v,"LI",{});var JMe=s(wg);kK=n(JMe,"STRONG",{});var vIr=s(kK);PXe=r(vIr,"vit"),vIr.forEach(t),$Xe=r(JMe," \u2014 "),Ux=n(JMe,"A",{href:!0});var TIr=s(Ux);IXe=r(TIr,"ViTConfig"),TIr.forEach(t),qXe=r(JMe," (ViT model)"),JMe.forEach(t),NXe=i(v),Ag=n(v,"LI",{});var YMe=s(Ag);SK=n(YMe,"STRONG",{});var MIr=s(SK);jXe=r(MIr,"vit_mae"),MIr.forEach(t),DXe=r(YMe," \u2014 "),Jx=n(YMe,"A",{href:!0});var EIr=s(Jx);GXe=r(EIr,"ViTMAEConfig"),EIr.forEach(t),OXe=r(YMe," (ViTMAE model)"),YMe.forEach(t),VXe=i(v),yg=n(v,"LI",{});var KMe=s(yg);RK=n(KMe,"STRONG",{});var CIr=s(RK);XXe=r(CIr,"wav2vec2"),CIr.forEach(t),zXe=r(KMe," \u2014 "),Yx=n(KMe,"A",{href:!0});var wIr=s(Yx);QXe=r(wIr,"Wav2Vec2Config"),wIr.forEach(t),WXe=r(KMe," (Wav2Vec2 model)"),KMe.forEach(t),HXe=i(v),Lg=n(v,"LI",{});var ZMe=s(Lg);BK=n(ZMe,"STRONG",{});var AIr=s(BK);UXe=r(AIr,"wavlm"),AIr.forEach(t),JXe=r(ZMe," \u2014 "),Kx=n(ZMe,"A",{href:!0});var yIr=s(Kx);YXe=r(yIr,"WavLMConfig"),yIr.forEach(t),KXe=r(ZMe," (WavLM model)"),ZMe.forEach(t),ZXe=i(v),xg=n(v,"LI",{});var e4e=s(xg);PK=n(e4e,"STRONG",{});var LIr=s(PK);eze=r(LIr,"xglm"),LIr.forEach(t),oze=r(e4e," \u2014 "),Zx=n(e4e,"A",{href:!0});var xIr=s(Zx);rze=r(xIr,"XGLMConfig"),xIr.forEach(t),tze=r(e4e," (XGLM model)"),e4e.forEach(t),aze=i(v),kg=n(v,"LI",{});var o4e=s(kg);$K=n(o4e,"STRONG",{});var kIr=s($K);nze=r(kIr,"xlm"),kIr.forEach(t),sze=r(o4e," \u2014 "),ek=n(o4e,"A",{href:!0});var SIr=s(ek);lze=r(SIr,"XLMConfig"),SIr.forEach(t),ize=r(o4e," (XLM model)"),o4e.forEach(t),dze=i(v),Sg=n(v,"LI",{});var r4e=s(Sg);IK=n(r4e,"STRONG",{});var RIr=s(IK);cze=r(RIr,"xlm-prophetnet"),RIr.forEach(t),fze=r(r4e," \u2014 "),ok=n(r4e,"A",{href:!0});var BIr=s(ok);mze=r(BIr,"XLMProphetNetConfig"),BIr.forEach(t),gze=r(r4e," (XLMProphetNet model)"),r4e.forEach(t),hze=i(v),Rg=n(v,"LI",{});var t4e=s(Rg);qK=n(t4e,"STRONG",{});var PIr=s(qK);pze=r(PIr,"xlm-roberta"),PIr.forEach(t),_ze=r(t4e," \u2014 "),rk=n(t4e,"A",{href:!0});var $Ir=s(rk);uze=r($Ir,"XLMRobertaConfig"),$Ir.forEach(t),bze=r(t4e," (XLM-RoBERTa model)"),t4e.forEach(t),Fze=i(v),Bg=n(v,"LI",{});var a4e=s(Bg);NK=n(a4e,"STRONG",{});var IIr=s(NK);vze=r(IIr,"xlm-roberta-xl"),IIr.forEach(t),Tze=r(a4e," \u2014 "),tk=n(a4e,"A",{href:!0});var qIr=s(tk);Mze=r(qIr,"XLMRobertaXLConfig"),qIr.forEach(t),Eze=r(a4e," (XLM-RoBERTa-XL model)"),a4e.forEach(t),Cze=i(v),Pg=n(v,"LI",{});var n4e=s(Pg);jK=n(n4e,"STRONG",{});var NIr=s(jK);wze=r(NIr,"xlnet"),NIr.forEach(t),Aze=r(n4e," \u2014 "),ak=n(n4e,"A",{href:!0});var jIr=s(ak);yze=r(jIr,"XLNetConfig"),jIr.forEach(t),Lze=r(n4e," (XLNet model)"),n4e.forEach(t),xze=i(v),$g=n(v,"LI",{});var s4e=s($g);DK=n(s4e,"STRONG",{});var DIr=s(DK);kze=r(DIr,"yoso"),DIr.forEach(t),Sze=r(s4e," \u2014 "),nk=n(s4e,"A",{href:!0});var GIr=s(nk);Rze=r(GIr,"YosoConfig"),GIr.forEach(t),Bze=r(s4e," (YOSO model)"),s4e.forEach(t),v.forEach(t),Pze=i(ga),GK=n(ga,"P",{});var OIr=s(GK);$ze=r(OIr,"Examples:"),OIr.forEach(t),Ize=i(ga),m(A3.$$.fragment,ga),ga.forEach(t),qze=i(Vs),Ig=n(Vs,"DIV",{class:!0});var WBe=s(Ig);m(y3.$$.fragment,WBe),Nze=i(WBe),OK=n(WBe,"P",{});var VIr=s(OK);jze=r(VIr,"Register a new configuration for this class."),VIr.forEach(t),WBe.forEach(t),Vs.forEach(t),zSe=i(c),Wi=n(c,"H2",{class:!0});var HBe=s(Wi);qg=n(HBe,"A",{id:!0,class:!0,href:!0});var XIr=s(qg);VK=n(XIr,"SPAN",{});var zIr=s(VK);m(L3.$$.fragment,zIr),zIr.forEach(t),XIr.forEach(t),Dze=i(HBe),XK=n(HBe,"SPAN",{});var QIr=s(XK);Gze=r(QIr,"AutoTokenizer"),QIr.forEach(t),HBe.forEach(t),QSe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(x3.$$.fragment,Xs),Oze=i(Xs),k3=n(Xs,"P",{});var UBe=s(k3);Vze=r(UBe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),sk=n(UBe,"A",{href:!0});var WIr=s(sk);Xze=r(WIr,"AutoTokenizer.from_pretrained()"),WIr.forEach(t),zze=r(UBe," class method."),UBe.forEach(t),Qze=i(Xs),S3=n(Xs,"P",{});var JBe=s(S3);Wze=r(JBe,"This class cannot be instantiated directly using "),zK=n(JBe,"CODE",{});var HIr=s(zK);Hze=r(HIr,"__init__()"),HIr.forEach(t),Uze=r(JBe," (throws an error)."),JBe.forEach(t),Jze=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(R3.$$.fragment,ha),Yze=i(ha),QK=n(ha,"P",{});var UIr=s(QK);Kze=r(UIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),UIr.forEach(t),Zze=i(ha),Oa=n(ha,"P",{});var uC=s(Oa);eQe=r(uC,"The tokenizer class to instantiate is selected based on the "),WK=n(uC,"CODE",{});var JIr=s(WK);oQe=r(JIr,"model_type"),JIr.forEach(t),rQe=r(uC,` property of the config object (either
passed as an argument or loaded from `),HK=n(uC,"CODE",{});var YIr=s(HK);tQe=r(YIr,"pretrained_model_name_or_path"),YIr.forEach(t),aQe=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UK=n(uC,"CODE",{});var KIr=s(UK);nQe=r(KIr,"pretrained_model_name_or_path"),KIr.forEach(t),sQe=r(uC,":"),uC.forEach(t),lQe=i(ha),C=n(ha,"UL",{});var w=s(C);Qn=n(w,"LI",{});var f7=s(Qn);JK=n(f7,"STRONG",{});var ZIr=s(JK);iQe=r(ZIr,"albert"),ZIr.forEach(t),dQe=r(f7," \u2014 "),lk=n(f7,"A",{href:!0});var eqr=s(lk);cQe=r(eqr,"AlbertTokenizer"),eqr.forEach(t),fQe=r(f7," or "),ik=n(f7,"A",{href:!0});var oqr=s(ik);mQe=r(oqr,"AlbertTokenizerFast"),oqr.forEach(t),gQe=r(f7," (ALBERT model)"),f7.forEach(t),hQe=i(w),Wn=n(w,"LI",{});var m7=s(Wn);YK=n(m7,"STRONG",{});var rqr=s(YK);pQe=r(rqr,"bart"),rqr.forEach(t),_Qe=r(m7," \u2014 "),dk=n(m7,"A",{href:!0});var tqr=s(dk);uQe=r(tqr,"BartTokenizer"),tqr.forEach(t),bQe=r(m7," or "),ck=n(m7,"A",{href:!0});var aqr=s(ck);FQe=r(aqr,"BartTokenizerFast"),aqr.forEach(t),vQe=r(m7," (BART model)"),m7.forEach(t),TQe=i(w),Hn=n(w,"LI",{});var g7=s(Hn);KK=n(g7,"STRONG",{});var nqr=s(KK);MQe=r(nqr,"barthez"),nqr.forEach(t),EQe=r(g7," \u2014 "),fk=n(g7,"A",{href:!0});var sqr=s(fk);CQe=r(sqr,"BarthezTokenizer"),sqr.forEach(t),wQe=r(g7," or "),mk=n(g7,"A",{href:!0});var lqr=s(mk);AQe=r(lqr,"BarthezTokenizerFast"),lqr.forEach(t),yQe=r(g7," (BARThez model)"),g7.forEach(t),LQe=i(w),Ng=n(w,"LI",{});var l4e=s(Ng);ZK=n(l4e,"STRONG",{});var iqr=s(ZK);xQe=r(iqr,"bartpho"),iqr.forEach(t),kQe=r(l4e," \u2014 "),gk=n(l4e,"A",{href:!0});var dqr=s(gk);SQe=r(dqr,"BartphoTokenizer"),dqr.forEach(t),RQe=r(l4e," (BARTpho model)"),l4e.forEach(t),BQe=i(w),Un=n(w,"LI",{});var h7=s(Un);eZ=n(h7,"STRONG",{});var cqr=s(eZ);PQe=r(cqr,"bert"),cqr.forEach(t),$Qe=r(h7," \u2014 "),hk=n(h7,"A",{href:!0});var fqr=s(hk);IQe=r(fqr,"BertTokenizer"),fqr.forEach(t),qQe=r(h7," or "),pk=n(h7,"A",{href:!0});var mqr=s(pk);NQe=r(mqr,"BertTokenizerFast"),mqr.forEach(t),jQe=r(h7," (BERT model)"),h7.forEach(t),DQe=i(w),jg=n(w,"LI",{});var i4e=s(jg);oZ=n(i4e,"STRONG",{});var gqr=s(oZ);GQe=r(gqr,"bert-generation"),gqr.forEach(t),OQe=r(i4e," \u2014 "),_k=n(i4e,"A",{href:!0});var hqr=s(_k);VQe=r(hqr,"BertGenerationTokenizer"),hqr.forEach(t),XQe=r(i4e," (Bert Generation model)"),i4e.forEach(t),zQe=i(w),Dg=n(w,"LI",{});var d4e=s(Dg);rZ=n(d4e,"STRONG",{});var pqr=s(rZ);QQe=r(pqr,"bert-japanese"),pqr.forEach(t),WQe=r(d4e," \u2014 "),uk=n(d4e,"A",{href:!0});var _qr=s(uk);HQe=r(_qr,"BertJapaneseTokenizer"),_qr.forEach(t),UQe=r(d4e," (BertJapanese model)"),d4e.forEach(t),JQe=i(w),Gg=n(w,"LI",{});var c4e=s(Gg);tZ=n(c4e,"STRONG",{});var uqr=s(tZ);YQe=r(uqr,"bertweet"),uqr.forEach(t),KQe=r(c4e," \u2014 "),bk=n(c4e,"A",{href:!0});var bqr=s(bk);ZQe=r(bqr,"BertweetTokenizer"),bqr.forEach(t),eWe=r(c4e," (Bertweet model)"),c4e.forEach(t),oWe=i(w),Jn=n(w,"LI",{});var p7=s(Jn);aZ=n(p7,"STRONG",{});var Fqr=s(aZ);rWe=r(Fqr,"big_bird"),Fqr.forEach(t),tWe=r(p7," \u2014 "),Fk=n(p7,"A",{href:!0});var vqr=s(Fk);aWe=r(vqr,"BigBirdTokenizer"),vqr.forEach(t),nWe=r(p7," or "),vk=n(p7,"A",{href:!0});var Tqr=s(vk);sWe=r(Tqr,"BigBirdTokenizerFast"),Tqr.forEach(t),lWe=r(p7," (BigBird model)"),p7.forEach(t),iWe=i(w),Yn=n(w,"LI",{});var _7=s(Yn);nZ=n(_7,"STRONG",{});var Mqr=s(nZ);dWe=r(Mqr,"bigbird_pegasus"),Mqr.forEach(t),cWe=r(_7," \u2014 "),Tk=n(_7,"A",{href:!0});var Eqr=s(Tk);fWe=r(Eqr,"PegasusTokenizer"),Eqr.forEach(t),mWe=r(_7," or "),Mk=n(_7,"A",{href:!0});var Cqr=s(Mk);gWe=r(Cqr,"PegasusTokenizerFast"),Cqr.forEach(t),hWe=r(_7," (BigBirdPegasus model)"),_7.forEach(t),pWe=i(w),Kn=n(w,"LI",{});var u7=s(Kn);sZ=n(u7,"STRONG",{});var wqr=s(sZ);_We=r(wqr,"blenderbot"),wqr.forEach(t),uWe=r(u7," \u2014 "),Ek=n(u7,"A",{href:!0});var Aqr=s(Ek);bWe=r(Aqr,"BlenderbotTokenizer"),Aqr.forEach(t),FWe=r(u7," or "),Ck=n(u7,"A",{href:!0});var yqr=s(Ck);vWe=r(yqr,"BlenderbotTokenizerFast"),yqr.forEach(t),TWe=r(u7," (Blenderbot model)"),u7.forEach(t),MWe=i(w),Og=n(w,"LI",{});var f4e=s(Og);lZ=n(f4e,"STRONG",{});var Lqr=s(lZ);EWe=r(Lqr,"blenderbot-small"),Lqr.forEach(t),CWe=r(f4e," \u2014 "),wk=n(f4e,"A",{href:!0});var xqr=s(wk);wWe=r(xqr,"BlenderbotSmallTokenizer"),xqr.forEach(t),AWe=r(f4e," (BlenderbotSmall model)"),f4e.forEach(t),yWe=i(w),Vg=n(w,"LI",{});var m4e=s(Vg);iZ=n(m4e,"STRONG",{});var kqr=s(iZ);LWe=r(kqr,"byt5"),kqr.forEach(t),xWe=r(m4e," \u2014 "),Ak=n(m4e,"A",{href:!0});var Sqr=s(Ak);kWe=r(Sqr,"ByT5Tokenizer"),Sqr.forEach(t),SWe=r(m4e," (ByT5 model)"),m4e.forEach(t),RWe=i(w),Zn=n(w,"LI",{});var b7=s(Zn);dZ=n(b7,"STRONG",{});var Rqr=s(dZ);BWe=r(Rqr,"camembert"),Rqr.forEach(t),PWe=r(b7," \u2014 "),yk=n(b7,"A",{href:!0});var Bqr=s(yk);$We=r(Bqr,"CamembertTokenizer"),Bqr.forEach(t),IWe=r(b7," or "),Lk=n(b7,"A",{href:!0});var Pqr=s(Lk);qWe=r(Pqr,"CamembertTokenizerFast"),Pqr.forEach(t),NWe=r(b7," (CamemBERT model)"),b7.forEach(t),jWe=i(w),Xg=n(w,"LI",{});var g4e=s(Xg);cZ=n(g4e,"STRONG",{});var $qr=s(cZ);DWe=r($qr,"canine"),$qr.forEach(t),GWe=r(g4e," \u2014 "),xk=n(g4e,"A",{href:!0});var Iqr=s(xk);OWe=r(Iqr,"CanineTokenizer"),Iqr.forEach(t),VWe=r(g4e," (Canine model)"),g4e.forEach(t),XWe=i(w),es=n(w,"LI",{});var F7=s(es);fZ=n(F7,"STRONG",{});var qqr=s(fZ);zWe=r(qqr,"clip"),qqr.forEach(t),QWe=r(F7," \u2014 "),kk=n(F7,"A",{href:!0});var Nqr=s(kk);WWe=r(Nqr,"CLIPTokenizer"),Nqr.forEach(t),HWe=r(F7," or "),Sk=n(F7,"A",{href:!0});var jqr=s(Sk);UWe=r(jqr,"CLIPTokenizerFast"),jqr.forEach(t),JWe=r(F7," (CLIP model)"),F7.forEach(t),YWe=i(w),os=n(w,"LI",{});var v7=s(os);mZ=n(v7,"STRONG",{});var Dqr=s(mZ);KWe=r(Dqr,"convbert"),Dqr.forEach(t),ZWe=r(v7," \u2014 "),Rk=n(v7,"A",{href:!0});var Gqr=s(Rk);eHe=r(Gqr,"ConvBertTokenizer"),Gqr.forEach(t),oHe=r(v7," or "),Bk=n(v7,"A",{href:!0});var Oqr=s(Bk);rHe=r(Oqr,"ConvBertTokenizerFast"),Oqr.forEach(t),tHe=r(v7," (ConvBERT model)"),v7.forEach(t),aHe=i(w),rs=n(w,"LI",{});var T7=s(rs);gZ=n(T7,"STRONG",{});var Vqr=s(gZ);nHe=r(Vqr,"cpm"),Vqr.forEach(t),sHe=r(T7," \u2014 "),Pk=n(T7,"A",{href:!0});var Xqr=s(Pk);lHe=r(Xqr,"CpmTokenizer"),Xqr.forEach(t),iHe=r(T7," or "),hZ=n(T7,"CODE",{});var zqr=s(hZ);dHe=r(zqr,"CpmTokenizerFast"),zqr.forEach(t),cHe=r(T7," (CPM model)"),T7.forEach(t),fHe=i(w),zg=n(w,"LI",{});var h4e=s(zg);pZ=n(h4e,"STRONG",{});var Qqr=s(pZ);mHe=r(Qqr,"ctrl"),Qqr.forEach(t),gHe=r(h4e," \u2014 "),$k=n(h4e,"A",{href:!0});var Wqr=s($k);hHe=r(Wqr,"CTRLTokenizer"),Wqr.forEach(t),pHe=r(h4e," (CTRL model)"),h4e.forEach(t),_He=i(w),ts=n(w,"LI",{});var M7=s(ts);_Z=n(M7,"STRONG",{});var Hqr=s(_Z);uHe=r(Hqr,"deberta"),Hqr.forEach(t),bHe=r(M7," \u2014 "),Ik=n(M7,"A",{href:!0});var Uqr=s(Ik);FHe=r(Uqr,"DebertaTokenizer"),Uqr.forEach(t),vHe=r(M7," or "),qk=n(M7,"A",{href:!0});var Jqr=s(qk);THe=r(Jqr,"DebertaTokenizerFast"),Jqr.forEach(t),MHe=r(M7," (DeBERTa model)"),M7.forEach(t),EHe=i(w),Qg=n(w,"LI",{});var p4e=s(Qg);uZ=n(p4e,"STRONG",{});var Yqr=s(uZ);CHe=r(Yqr,"deberta-v2"),Yqr.forEach(t),wHe=r(p4e," \u2014 "),Nk=n(p4e,"A",{href:!0});var Kqr=s(Nk);AHe=r(Kqr,"DebertaV2Tokenizer"),Kqr.forEach(t),yHe=r(p4e," (DeBERTa-v2 model)"),p4e.forEach(t),LHe=i(w),as=n(w,"LI",{});var E7=s(as);bZ=n(E7,"STRONG",{});var Zqr=s(bZ);xHe=r(Zqr,"distilbert"),Zqr.forEach(t),kHe=r(E7," \u2014 "),jk=n(E7,"A",{href:!0});var eNr=s(jk);SHe=r(eNr,"DistilBertTokenizer"),eNr.forEach(t),RHe=r(E7," or "),Dk=n(E7,"A",{href:!0});var oNr=s(Dk);BHe=r(oNr,"DistilBertTokenizerFast"),oNr.forEach(t),PHe=r(E7," (DistilBERT model)"),E7.forEach(t),$He=i(w),ns=n(w,"LI",{});var C7=s(ns);FZ=n(C7,"STRONG",{});var rNr=s(FZ);IHe=r(rNr,"dpr"),rNr.forEach(t),qHe=r(C7," \u2014 "),Gk=n(C7,"A",{href:!0});var tNr=s(Gk);NHe=r(tNr,"DPRQuestionEncoderTokenizer"),tNr.forEach(t),jHe=r(C7," or "),Ok=n(C7,"A",{href:!0});var aNr=s(Ok);DHe=r(aNr,"DPRQuestionEncoderTokenizerFast"),aNr.forEach(t),GHe=r(C7," (DPR model)"),C7.forEach(t),OHe=i(w),ss=n(w,"LI",{});var w7=s(ss);vZ=n(w7,"STRONG",{});var nNr=s(vZ);VHe=r(nNr,"electra"),nNr.forEach(t),XHe=r(w7," \u2014 "),Vk=n(w7,"A",{href:!0});var sNr=s(Vk);zHe=r(sNr,"ElectraTokenizer"),sNr.forEach(t),QHe=r(w7," or "),Xk=n(w7,"A",{href:!0});var lNr=s(Xk);WHe=r(lNr,"ElectraTokenizerFast"),lNr.forEach(t),HHe=r(w7," (ELECTRA model)"),w7.forEach(t),UHe=i(w),Wg=n(w,"LI",{});var _4e=s(Wg);TZ=n(_4e,"STRONG",{});var iNr=s(TZ);JHe=r(iNr,"flaubert"),iNr.forEach(t),YHe=r(_4e," \u2014 "),zk=n(_4e,"A",{href:!0});var dNr=s(zk);KHe=r(dNr,"FlaubertTokenizer"),dNr.forEach(t),ZHe=r(_4e," (FlauBERT model)"),_4e.forEach(t),eUe=i(w),ls=n(w,"LI",{});var A7=s(ls);MZ=n(A7,"STRONG",{});var cNr=s(MZ);oUe=r(cNr,"fnet"),cNr.forEach(t),rUe=r(A7," \u2014 "),Qk=n(A7,"A",{href:!0});var fNr=s(Qk);tUe=r(fNr,"FNetTokenizer"),fNr.forEach(t),aUe=r(A7," or "),Wk=n(A7,"A",{href:!0});var mNr=s(Wk);nUe=r(mNr,"FNetTokenizerFast"),mNr.forEach(t),sUe=r(A7," (FNet model)"),A7.forEach(t),lUe=i(w),Hg=n(w,"LI",{});var u4e=s(Hg);EZ=n(u4e,"STRONG",{});var gNr=s(EZ);iUe=r(gNr,"fsmt"),gNr.forEach(t),dUe=r(u4e," \u2014 "),Hk=n(u4e,"A",{href:!0});var hNr=s(Hk);cUe=r(hNr,"FSMTTokenizer"),hNr.forEach(t),fUe=r(u4e," (FairSeq Machine-Translation model)"),u4e.forEach(t),mUe=i(w),is=n(w,"LI",{});var y7=s(is);CZ=n(y7,"STRONG",{});var pNr=s(CZ);gUe=r(pNr,"funnel"),pNr.forEach(t),hUe=r(y7," \u2014 "),Uk=n(y7,"A",{href:!0});var _Nr=s(Uk);pUe=r(_Nr,"FunnelTokenizer"),_Nr.forEach(t),_Ue=r(y7," or "),Jk=n(y7,"A",{href:!0});var uNr=s(Jk);uUe=r(uNr,"FunnelTokenizerFast"),uNr.forEach(t),bUe=r(y7," (Funnel Transformer model)"),y7.forEach(t),FUe=i(w),ds=n(w,"LI",{});var L7=s(ds);wZ=n(L7,"STRONG",{});var bNr=s(wZ);vUe=r(bNr,"gpt2"),bNr.forEach(t),TUe=r(L7," \u2014 "),Yk=n(L7,"A",{href:!0});var FNr=s(Yk);MUe=r(FNr,"GPT2Tokenizer"),FNr.forEach(t),EUe=r(L7," or "),Kk=n(L7,"A",{href:!0});var vNr=s(Kk);CUe=r(vNr,"GPT2TokenizerFast"),vNr.forEach(t),wUe=r(L7," (OpenAI GPT-2 model)"),L7.forEach(t),AUe=i(w),cs=n(w,"LI",{});var x7=s(cs);AZ=n(x7,"STRONG",{});var TNr=s(AZ);yUe=r(TNr,"gpt_neo"),TNr.forEach(t),LUe=r(x7," \u2014 "),Zk=n(x7,"A",{href:!0});var MNr=s(Zk);xUe=r(MNr,"GPT2Tokenizer"),MNr.forEach(t),kUe=r(x7," or "),eS=n(x7,"A",{href:!0});var ENr=s(eS);SUe=r(ENr,"GPT2TokenizerFast"),ENr.forEach(t),RUe=r(x7," (GPT Neo model)"),x7.forEach(t),BUe=i(w),fs=n(w,"LI",{});var k7=s(fs);yZ=n(k7,"STRONG",{});var CNr=s(yZ);PUe=r(CNr,"herbert"),CNr.forEach(t),$Ue=r(k7," \u2014 "),oS=n(k7,"A",{href:!0});var wNr=s(oS);IUe=r(wNr,"HerbertTokenizer"),wNr.forEach(t),qUe=r(k7," or "),rS=n(k7,"A",{href:!0});var ANr=s(rS);NUe=r(ANr,"HerbertTokenizerFast"),ANr.forEach(t),jUe=r(k7," (HerBERT model)"),k7.forEach(t),DUe=i(w),Ug=n(w,"LI",{});var b4e=s(Ug);LZ=n(b4e,"STRONG",{});var yNr=s(LZ);GUe=r(yNr,"hubert"),yNr.forEach(t),OUe=r(b4e," \u2014 "),tS=n(b4e,"A",{href:!0});var LNr=s(tS);VUe=r(LNr,"Wav2Vec2CTCTokenizer"),LNr.forEach(t),XUe=r(b4e," (Hubert model)"),b4e.forEach(t),zUe=i(w),ms=n(w,"LI",{});var S7=s(ms);xZ=n(S7,"STRONG",{});var xNr=s(xZ);QUe=r(xNr,"ibert"),xNr.forEach(t),WUe=r(S7," \u2014 "),aS=n(S7,"A",{href:!0});var kNr=s(aS);HUe=r(kNr,"RobertaTokenizer"),kNr.forEach(t),UUe=r(S7," or "),nS=n(S7,"A",{href:!0});var SNr=s(nS);JUe=r(SNr,"RobertaTokenizerFast"),SNr.forEach(t),YUe=r(S7," (I-BERT model)"),S7.forEach(t),KUe=i(w),gs=n(w,"LI",{});var R7=s(gs);kZ=n(R7,"STRONG",{});var RNr=s(kZ);ZUe=r(RNr,"layoutlm"),RNr.forEach(t),eJe=r(R7," \u2014 "),sS=n(R7,"A",{href:!0});var BNr=s(sS);oJe=r(BNr,"LayoutLMTokenizer"),BNr.forEach(t),rJe=r(R7," or "),lS=n(R7,"A",{href:!0});var PNr=s(lS);tJe=r(PNr,"LayoutLMTokenizerFast"),PNr.forEach(t),aJe=r(R7," (LayoutLM model)"),R7.forEach(t),nJe=i(w),hs=n(w,"LI",{});var B7=s(hs);SZ=n(B7,"STRONG",{});var $Nr=s(SZ);sJe=r($Nr,"layoutlmv2"),$Nr.forEach(t),lJe=r(B7," \u2014 "),iS=n(B7,"A",{href:!0});var INr=s(iS);iJe=r(INr,"LayoutLMv2Tokenizer"),INr.forEach(t),dJe=r(B7," or "),dS=n(B7,"A",{href:!0});var qNr=s(dS);cJe=r(qNr,"LayoutLMv2TokenizerFast"),qNr.forEach(t),fJe=r(B7," (LayoutLMv2 model)"),B7.forEach(t),mJe=i(w),ps=n(w,"LI",{});var P7=s(ps);RZ=n(P7,"STRONG",{});var NNr=s(RZ);gJe=r(NNr,"layoutxlm"),NNr.forEach(t),hJe=r(P7," \u2014 "),cS=n(P7,"A",{href:!0});var jNr=s(cS);pJe=r(jNr,"LayoutXLMTokenizer"),jNr.forEach(t),_Je=r(P7," or "),fS=n(P7,"A",{href:!0});var DNr=s(fS);uJe=r(DNr,"LayoutXLMTokenizerFast"),DNr.forEach(t),bJe=r(P7," (LayoutXLM model)"),P7.forEach(t),FJe=i(w),_s=n(w,"LI",{});var $7=s(_s);BZ=n($7,"STRONG",{});var GNr=s(BZ);vJe=r(GNr,"led"),GNr.forEach(t),TJe=r($7," \u2014 "),mS=n($7,"A",{href:!0});var ONr=s(mS);MJe=r(ONr,"LEDTokenizer"),ONr.forEach(t),EJe=r($7," or "),gS=n($7,"A",{href:!0});var VNr=s(gS);CJe=r(VNr,"LEDTokenizerFast"),VNr.forEach(t),wJe=r($7," (LED model)"),$7.forEach(t),AJe=i(w),us=n(w,"LI",{});var I7=s(us);PZ=n(I7,"STRONG",{});var XNr=s(PZ);yJe=r(XNr,"longformer"),XNr.forEach(t),LJe=r(I7," \u2014 "),hS=n(I7,"A",{href:!0});var zNr=s(hS);xJe=r(zNr,"LongformerTokenizer"),zNr.forEach(t),kJe=r(I7," or "),pS=n(I7,"A",{href:!0});var QNr=s(pS);SJe=r(QNr,"LongformerTokenizerFast"),QNr.forEach(t),RJe=r(I7," (Longformer model)"),I7.forEach(t),BJe=i(w),Jg=n(w,"LI",{});var F4e=s(Jg);$Z=n(F4e,"STRONG",{});var WNr=s($Z);PJe=r(WNr,"luke"),WNr.forEach(t),$Je=r(F4e," \u2014 "),_S=n(F4e,"A",{href:!0});var HNr=s(_S);IJe=r(HNr,"LukeTokenizer"),HNr.forEach(t),qJe=r(F4e," (LUKE model)"),F4e.forEach(t),NJe=i(w),bs=n(w,"LI",{});var q7=s(bs);IZ=n(q7,"STRONG",{});var UNr=s(IZ);jJe=r(UNr,"lxmert"),UNr.forEach(t),DJe=r(q7," \u2014 "),uS=n(q7,"A",{href:!0});var JNr=s(uS);GJe=r(JNr,"LxmertTokenizer"),JNr.forEach(t),OJe=r(q7," or "),bS=n(q7,"A",{href:!0});var YNr=s(bS);VJe=r(YNr,"LxmertTokenizerFast"),YNr.forEach(t),XJe=r(q7," (LXMERT model)"),q7.forEach(t),zJe=i(w),Yg=n(w,"LI",{});var v4e=s(Yg);qZ=n(v4e,"STRONG",{});var KNr=s(qZ);QJe=r(KNr,"m2m_100"),KNr.forEach(t),WJe=r(v4e," \u2014 "),FS=n(v4e,"A",{href:!0});var ZNr=s(FS);HJe=r(ZNr,"M2M100Tokenizer"),ZNr.forEach(t),UJe=r(v4e," (M2M100 model)"),v4e.forEach(t),JJe=i(w),Kg=n(w,"LI",{});var T4e=s(Kg);NZ=n(T4e,"STRONG",{});var ejr=s(NZ);YJe=r(ejr,"marian"),ejr.forEach(t),KJe=r(T4e," \u2014 "),vS=n(T4e,"A",{href:!0});var ojr=s(vS);ZJe=r(ojr,"MarianTokenizer"),ojr.forEach(t),eYe=r(T4e," (Marian model)"),T4e.forEach(t),oYe=i(w),Fs=n(w,"LI",{});var N7=s(Fs);jZ=n(N7,"STRONG",{});var rjr=s(jZ);rYe=r(rjr,"mbart"),rjr.forEach(t),tYe=r(N7," \u2014 "),TS=n(N7,"A",{href:!0});var tjr=s(TS);aYe=r(tjr,"MBartTokenizer"),tjr.forEach(t),nYe=r(N7," or "),MS=n(N7,"A",{href:!0});var ajr=s(MS);sYe=r(ajr,"MBartTokenizerFast"),ajr.forEach(t),lYe=r(N7," (mBART model)"),N7.forEach(t),iYe=i(w),vs=n(w,"LI",{});var j7=s(vs);DZ=n(j7,"STRONG",{});var njr=s(DZ);dYe=r(njr,"mbart50"),njr.forEach(t),cYe=r(j7," \u2014 "),ES=n(j7,"A",{href:!0});var sjr=s(ES);fYe=r(sjr,"MBart50Tokenizer"),sjr.forEach(t),mYe=r(j7," or "),CS=n(j7,"A",{href:!0});var ljr=s(CS);gYe=r(ljr,"MBart50TokenizerFast"),ljr.forEach(t),hYe=r(j7," (mBART-50 model)"),j7.forEach(t),pYe=i(w),Zg=n(w,"LI",{});var M4e=s(Zg);GZ=n(M4e,"STRONG",{});var ijr=s(GZ);_Ye=r(ijr,"mluke"),ijr.forEach(t),uYe=r(M4e," \u2014 "),wS=n(M4e,"A",{href:!0});var djr=s(wS);bYe=r(djr,"MLukeTokenizer"),djr.forEach(t),FYe=r(M4e," (mLUKE model)"),M4e.forEach(t),vYe=i(w),Ts=n(w,"LI",{});var D7=s(Ts);OZ=n(D7,"STRONG",{});var cjr=s(OZ);TYe=r(cjr,"mobilebert"),cjr.forEach(t),MYe=r(D7," \u2014 "),AS=n(D7,"A",{href:!0});var fjr=s(AS);EYe=r(fjr,"MobileBertTokenizer"),fjr.forEach(t),CYe=r(D7," or "),yS=n(D7,"A",{href:!0});var mjr=s(yS);wYe=r(mjr,"MobileBertTokenizerFast"),mjr.forEach(t),AYe=r(D7," (MobileBERT model)"),D7.forEach(t),yYe=i(w),Ms=n(w,"LI",{});var G7=s(Ms);VZ=n(G7,"STRONG",{});var gjr=s(VZ);LYe=r(gjr,"mpnet"),gjr.forEach(t),xYe=r(G7," \u2014 "),LS=n(G7,"A",{href:!0});var hjr=s(LS);kYe=r(hjr,"MPNetTokenizer"),hjr.forEach(t),SYe=r(G7," or "),xS=n(G7,"A",{href:!0});var pjr=s(xS);RYe=r(pjr,"MPNetTokenizerFast"),pjr.forEach(t),BYe=r(G7," (MPNet model)"),G7.forEach(t),PYe=i(w),Es=n(w,"LI",{});var O7=s(Es);XZ=n(O7,"STRONG",{});var _jr=s(XZ);$Ye=r(_jr,"mt5"),_jr.forEach(t),IYe=r(O7," \u2014 "),kS=n(O7,"A",{href:!0});var ujr=s(kS);qYe=r(ujr,"MT5Tokenizer"),ujr.forEach(t),NYe=r(O7," or "),SS=n(O7,"A",{href:!0});var bjr=s(SS);jYe=r(bjr,"MT5TokenizerFast"),bjr.forEach(t),DYe=r(O7," (mT5 model)"),O7.forEach(t),GYe=i(w),Cs=n(w,"LI",{});var V7=s(Cs);zZ=n(V7,"STRONG",{});var Fjr=s(zZ);OYe=r(Fjr,"openai-gpt"),Fjr.forEach(t),VYe=r(V7," \u2014 "),RS=n(V7,"A",{href:!0});var vjr=s(RS);XYe=r(vjr,"OpenAIGPTTokenizer"),vjr.forEach(t),zYe=r(V7," or "),BS=n(V7,"A",{href:!0});var Tjr=s(BS);QYe=r(Tjr,"OpenAIGPTTokenizerFast"),Tjr.forEach(t),WYe=r(V7," (OpenAI GPT model)"),V7.forEach(t),HYe=i(w),ws=n(w,"LI",{});var X7=s(ws);QZ=n(X7,"STRONG",{});var Mjr=s(QZ);UYe=r(Mjr,"pegasus"),Mjr.forEach(t),JYe=r(X7," \u2014 "),PS=n(X7,"A",{href:!0});var Ejr=s(PS);YYe=r(Ejr,"PegasusTokenizer"),Ejr.forEach(t),KYe=r(X7," or "),$S=n(X7,"A",{href:!0});var Cjr=s($S);ZYe=r(Cjr,"PegasusTokenizerFast"),Cjr.forEach(t),eKe=r(X7," (Pegasus model)"),X7.forEach(t),oKe=i(w),eh=n(w,"LI",{});var E4e=s(eh);WZ=n(E4e,"STRONG",{});var wjr=s(WZ);rKe=r(wjr,"perceiver"),wjr.forEach(t),tKe=r(E4e," \u2014 "),IS=n(E4e,"A",{href:!0});var Ajr=s(IS);aKe=r(Ajr,"PerceiverTokenizer"),Ajr.forEach(t),nKe=r(E4e," (Perceiver model)"),E4e.forEach(t),sKe=i(w),oh=n(w,"LI",{});var C4e=s(oh);HZ=n(C4e,"STRONG",{});var yjr=s(HZ);lKe=r(yjr,"phobert"),yjr.forEach(t),iKe=r(C4e," \u2014 "),qS=n(C4e,"A",{href:!0});var Ljr=s(qS);dKe=r(Ljr,"PhobertTokenizer"),Ljr.forEach(t),cKe=r(C4e," (PhoBERT model)"),C4e.forEach(t),fKe=i(w),As=n(w,"LI",{});var z7=s(As);UZ=n(z7,"STRONG",{});var xjr=s(UZ);mKe=r(xjr,"plbart"),xjr.forEach(t),gKe=r(z7," \u2014 "),NS=n(z7,"A",{href:!0});var kjr=s(NS);hKe=r(kjr,"PLBartTokenizer"),kjr.forEach(t),pKe=r(z7," or "),JZ=n(z7,"CODE",{});var Sjr=s(JZ);_Ke=r(Sjr,"PLBartTokenizerFast"),Sjr.forEach(t),uKe=r(z7,"(PLBart model)"),z7.forEach(t),bKe=i(w),rh=n(w,"LI",{});var w4e=s(rh);YZ=n(w4e,"STRONG",{});var Rjr=s(YZ);FKe=r(Rjr,"prophetnet"),Rjr.forEach(t),vKe=r(w4e," \u2014 "),jS=n(w4e,"A",{href:!0});var Bjr=s(jS);TKe=r(Bjr,"ProphetNetTokenizer"),Bjr.forEach(t),MKe=r(w4e," (ProphetNet model)"),w4e.forEach(t),EKe=i(w),ys=n(w,"LI",{});var Q7=s(ys);KZ=n(Q7,"STRONG",{});var Pjr=s(KZ);CKe=r(Pjr,"qdqbert"),Pjr.forEach(t),wKe=r(Q7," \u2014 "),DS=n(Q7,"A",{href:!0});var $jr=s(DS);AKe=r($jr,"BertTokenizer"),$jr.forEach(t),yKe=r(Q7," or "),GS=n(Q7,"A",{href:!0});var Ijr=s(GS);LKe=r(Ijr,"BertTokenizerFast"),Ijr.forEach(t),xKe=r(Q7," (QDQBert model)"),Q7.forEach(t),kKe=i(w),th=n(w,"LI",{});var A4e=s(th);ZZ=n(A4e,"STRONG",{});var qjr=s(ZZ);SKe=r(qjr,"rag"),qjr.forEach(t),RKe=r(A4e," \u2014 "),OS=n(A4e,"A",{href:!0});var Njr=s(OS);BKe=r(Njr,"RagTokenizer"),Njr.forEach(t),PKe=r(A4e," (RAG model)"),A4e.forEach(t),$Ke=i(w),Ls=n(w,"LI",{});var W7=s(Ls);eee=n(W7,"STRONG",{});var jjr=s(eee);IKe=r(jjr,"realm"),jjr.forEach(t),qKe=r(W7," \u2014 "),VS=n(W7,"A",{href:!0});var Djr=s(VS);NKe=r(Djr,"RealmTokenizer"),Djr.forEach(t),jKe=r(W7," or "),XS=n(W7,"A",{href:!0});var Gjr=s(XS);DKe=r(Gjr,"RealmTokenizerFast"),Gjr.forEach(t),GKe=r(W7," (Realm model)"),W7.forEach(t),OKe=i(w),xs=n(w,"LI",{});var H7=s(xs);oee=n(H7,"STRONG",{});var Ojr=s(oee);VKe=r(Ojr,"reformer"),Ojr.forEach(t),XKe=r(H7," \u2014 "),zS=n(H7,"A",{href:!0});var Vjr=s(zS);zKe=r(Vjr,"ReformerTokenizer"),Vjr.forEach(t),QKe=r(H7," or "),QS=n(H7,"A",{href:!0});var Xjr=s(QS);WKe=r(Xjr,"ReformerTokenizerFast"),Xjr.forEach(t),HKe=r(H7," (Reformer model)"),H7.forEach(t),UKe=i(w),ks=n(w,"LI",{});var U7=s(ks);ree=n(U7,"STRONG",{});var zjr=s(ree);JKe=r(zjr,"rembert"),zjr.forEach(t),YKe=r(U7," \u2014 "),WS=n(U7,"A",{href:!0});var Qjr=s(WS);KKe=r(Qjr,"RemBertTokenizer"),Qjr.forEach(t),ZKe=r(U7," or "),HS=n(U7,"A",{href:!0});var Wjr=s(HS);eZe=r(Wjr,"RemBertTokenizerFast"),Wjr.forEach(t),oZe=r(U7," (RemBERT model)"),U7.forEach(t),rZe=i(w),Ss=n(w,"LI",{});var J7=s(Ss);tee=n(J7,"STRONG",{});var Hjr=s(tee);tZe=r(Hjr,"retribert"),Hjr.forEach(t),aZe=r(J7," \u2014 "),US=n(J7,"A",{href:!0});var Ujr=s(US);nZe=r(Ujr,"RetriBertTokenizer"),Ujr.forEach(t),sZe=r(J7," or "),JS=n(J7,"A",{href:!0});var Jjr=s(JS);lZe=r(Jjr,"RetriBertTokenizerFast"),Jjr.forEach(t),iZe=r(J7," (RetriBERT model)"),J7.forEach(t),dZe=i(w),Rs=n(w,"LI",{});var Y7=s(Rs);aee=n(Y7,"STRONG",{});var Yjr=s(aee);cZe=r(Yjr,"roberta"),Yjr.forEach(t),fZe=r(Y7," \u2014 "),YS=n(Y7,"A",{href:!0});var Kjr=s(YS);mZe=r(Kjr,"RobertaTokenizer"),Kjr.forEach(t),gZe=r(Y7," or "),KS=n(Y7,"A",{href:!0});var Zjr=s(KS);hZe=r(Zjr,"RobertaTokenizerFast"),Zjr.forEach(t),pZe=r(Y7," (RoBERTa model)"),Y7.forEach(t),_Ze=i(w),Bs=n(w,"LI",{});var K7=s(Bs);nee=n(K7,"STRONG",{});var eDr=s(nee);uZe=r(eDr,"roformer"),eDr.forEach(t),bZe=r(K7," \u2014 "),ZS=n(K7,"A",{href:!0});var oDr=s(ZS);FZe=r(oDr,"RoFormerTokenizer"),oDr.forEach(t),vZe=r(K7," or "),eR=n(K7,"A",{href:!0});var rDr=s(eR);TZe=r(rDr,"RoFormerTokenizerFast"),rDr.forEach(t),MZe=r(K7," (RoFormer model)"),K7.forEach(t),EZe=i(w),ah=n(w,"LI",{});var y4e=s(ah);see=n(y4e,"STRONG",{});var tDr=s(see);CZe=r(tDr,"speech_to_text"),tDr.forEach(t),wZe=r(y4e," \u2014 "),oR=n(y4e,"A",{href:!0});var aDr=s(oR);AZe=r(aDr,"Speech2TextTokenizer"),aDr.forEach(t),yZe=r(y4e," (Speech2Text model)"),y4e.forEach(t),LZe=i(w),nh=n(w,"LI",{});var L4e=s(nh);lee=n(L4e,"STRONG",{});var nDr=s(lee);xZe=r(nDr,"speech_to_text_2"),nDr.forEach(t),kZe=r(L4e," \u2014 "),rR=n(L4e,"A",{href:!0});var sDr=s(rR);SZe=r(sDr,"Speech2Text2Tokenizer"),sDr.forEach(t),RZe=r(L4e," (Speech2Text2 model)"),L4e.forEach(t),BZe=i(w),Ps=n(w,"LI",{});var Z7=s(Ps);iee=n(Z7,"STRONG",{});var lDr=s(iee);PZe=r(lDr,"splinter"),lDr.forEach(t),$Ze=r(Z7," \u2014 "),tR=n(Z7,"A",{href:!0});var iDr=s(tR);IZe=r(iDr,"SplinterTokenizer"),iDr.forEach(t),qZe=r(Z7," or "),aR=n(Z7,"A",{href:!0});var dDr=s(aR);NZe=r(dDr,"SplinterTokenizerFast"),dDr.forEach(t),jZe=r(Z7," (Splinter model)"),Z7.forEach(t),DZe=i(w),$s=n(w,"LI",{});var e9=s($s);dee=n(e9,"STRONG",{});var cDr=s(dee);GZe=r(cDr,"squeezebert"),cDr.forEach(t),OZe=r(e9," \u2014 "),nR=n(e9,"A",{href:!0});var fDr=s(nR);VZe=r(fDr,"SqueezeBertTokenizer"),fDr.forEach(t),XZe=r(e9," or "),sR=n(e9,"A",{href:!0});var mDr=s(sR);zZe=r(mDr,"SqueezeBertTokenizerFast"),mDr.forEach(t),QZe=r(e9," (SqueezeBERT model)"),e9.forEach(t),WZe=i(w),Is=n(w,"LI",{});var o9=s(Is);cee=n(o9,"STRONG",{});var gDr=s(cee);HZe=r(gDr,"t5"),gDr.forEach(t),UZe=r(o9," \u2014 "),lR=n(o9,"A",{href:!0});var hDr=s(lR);JZe=r(hDr,"T5Tokenizer"),hDr.forEach(t),YZe=r(o9," or "),iR=n(o9,"A",{href:!0});var pDr=s(iR);KZe=r(pDr,"T5TokenizerFast"),pDr.forEach(t),ZZe=r(o9," (T5 model)"),o9.forEach(t),eeo=i(w),sh=n(w,"LI",{});var x4e=s(sh);fee=n(x4e,"STRONG",{});var _Dr=s(fee);oeo=r(_Dr,"tapas"),_Dr.forEach(t),reo=r(x4e," \u2014 "),dR=n(x4e,"A",{href:!0});var uDr=s(dR);teo=r(uDr,"TapasTokenizer"),uDr.forEach(t),aeo=r(x4e," (TAPAS model)"),x4e.forEach(t),neo=i(w),lh=n(w,"LI",{});var k4e=s(lh);mee=n(k4e,"STRONG",{});var bDr=s(mee);seo=r(bDr,"transfo-xl"),bDr.forEach(t),leo=r(k4e," \u2014 "),cR=n(k4e,"A",{href:!0});var FDr=s(cR);ieo=r(FDr,"TransfoXLTokenizer"),FDr.forEach(t),deo=r(k4e," (Transformer-XL model)"),k4e.forEach(t),ceo=i(w),ih=n(w,"LI",{});var S4e=s(ih);gee=n(S4e,"STRONG",{});var vDr=s(gee);feo=r(vDr,"wav2vec2"),vDr.forEach(t),meo=r(S4e," \u2014 "),fR=n(S4e,"A",{href:!0});var TDr=s(fR);geo=r(TDr,"Wav2Vec2CTCTokenizer"),TDr.forEach(t),heo=r(S4e," (Wav2Vec2 model)"),S4e.forEach(t),peo=i(w),dh=n(w,"LI",{});var R4e=s(dh);hee=n(R4e,"STRONG",{});var MDr=s(hee);_eo=r(MDr,"wav2vec2_phoneme"),MDr.forEach(t),ueo=r(R4e," \u2014 "),mR=n(R4e,"A",{href:!0});var EDr=s(mR);beo=r(EDr,"Wav2Vec2PhonemeCTCTokenizer"),EDr.forEach(t),Feo=r(R4e," (Wav2Vec2Phoneme model)"),R4e.forEach(t),veo=i(w),qs=n(w,"LI",{});var r9=s(qs);pee=n(r9,"STRONG",{});var CDr=s(pee);Teo=r(CDr,"xglm"),CDr.forEach(t),Meo=r(r9," \u2014 "),gR=n(r9,"A",{href:!0});var wDr=s(gR);Eeo=r(wDr,"XGLMTokenizer"),wDr.forEach(t),Ceo=r(r9," or "),hR=n(r9,"A",{href:!0});var ADr=s(hR);weo=r(ADr,"XGLMTokenizerFast"),ADr.forEach(t),Aeo=r(r9," (XGLM model)"),r9.forEach(t),yeo=i(w),ch=n(w,"LI",{});var B4e=s(ch);_ee=n(B4e,"STRONG",{});var yDr=s(_ee);Leo=r(yDr,"xlm"),yDr.forEach(t),xeo=r(B4e," \u2014 "),pR=n(B4e,"A",{href:!0});var LDr=s(pR);keo=r(LDr,"XLMTokenizer"),LDr.forEach(t),Seo=r(B4e," (XLM model)"),B4e.forEach(t),Reo=i(w),fh=n(w,"LI",{});var P4e=s(fh);uee=n(P4e,"STRONG",{});var xDr=s(uee);Beo=r(xDr,"xlm-prophetnet"),xDr.forEach(t),Peo=r(P4e," \u2014 "),_R=n(P4e,"A",{href:!0});var kDr=s(_R);$eo=r(kDr,"XLMProphetNetTokenizer"),kDr.forEach(t),Ieo=r(P4e," (XLMProphetNet model)"),P4e.forEach(t),qeo=i(w),Ns=n(w,"LI",{});var t9=s(Ns);bee=n(t9,"STRONG",{});var SDr=s(bee);Neo=r(SDr,"xlm-roberta"),SDr.forEach(t),jeo=r(t9," \u2014 "),uR=n(t9,"A",{href:!0});var RDr=s(uR);Deo=r(RDr,"XLMRobertaTokenizer"),RDr.forEach(t),Geo=r(t9," or "),bR=n(t9,"A",{href:!0});var BDr=s(bR);Oeo=r(BDr,"XLMRobertaTokenizerFast"),BDr.forEach(t),Veo=r(t9," (XLM-RoBERTa model)"),t9.forEach(t),Xeo=i(w),js=n(w,"LI",{});var a9=s(js);Fee=n(a9,"STRONG",{});var PDr=s(Fee);zeo=r(PDr,"xlnet"),PDr.forEach(t),Qeo=r(a9," \u2014 "),FR=n(a9,"A",{href:!0});var $Dr=s(FR);Weo=r($Dr,"XLNetTokenizer"),$Dr.forEach(t),Heo=r(a9," or "),vR=n(a9,"A",{href:!0});var IDr=s(vR);Ueo=r(IDr,"XLNetTokenizerFast"),IDr.forEach(t),Jeo=r(a9," (XLNet model)"),a9.forEach(t),w.forEach(t),Yeo=i(ha),vee=n(ha,"P",{});var qDr=s(vee);Keo=r(qDr,"Examples:"),qDr.forEach(t),Zeo=i(ha),m(B3.$$.fragment,ha),ha.forEach(t),eoo=i(Xs),mh=n(Xs,"DIV",{class:!0});var YBe=s(mh);m(P3.$$.fragment,YBe),ooo=i(YBe),Tee=n(YBe,"P",{});var NDr=s(Tee);roo=r(NDr,"Register a new tokenizer in this mapping."),NDr.forEach(t),YBe.forEach(t),Xs.forEach(t),WSe=i(c),Hi=n(c,"H2",{class:!0});var KBe=s(Hi);gh=n(KBe,"A",{id:!0,class:!0,href:!0});var jDr=s(gh);Mee=n(jDr,"SPAN",{});var DDr=s(Mee);m($3.$$.fragment,DDr),DDr.forEach(t),jDr.forEach(t),too=i(KBe),Eee=n(KBe,"SPAN",{});var GDr=s(Eee);aoo=r(GDr,"AutoFeatureExtractor"),GDr.forEach(t),KBe.forEach(t),HSe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(I3.$$.fragment,zs),noo=i(zs),q3=n(zs,"P",{});var ZBe=s(q3);soo=r(ZBe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),TR=n(ZBe,"A",{href:!0});var ODr=s(TR);loo=r(ODr,"AutoFeatureExtractor.from_pretrained()"),ODr.forEach(t),ioo=r(ZBe," class method."),ZBe.forEach(t),doo=i(zs),N3=n(zs,"P",{});var ePe=s(N3);coo=r(ePe,"This class cannot be instantiated directly using "),Cee=n(ePe,"CODE",{});var VDr=s(Cee);foo=r(VDr,"__init__()"),VDr.forEach(t),moo=r(ePe," (throws an error)."),ePe.forEach(t),goo=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(j3.$$.fragment,Nt),hoo=i(Nt),wee=n(Nt,"P",{});var XDr=s(wee);poo=r(XDr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),XDr.forEach(t),_oo=i(Nt),Va=n(Nt,"P",{});var bC=s(Va);uoo=r(bC,"The feature extractor class to instantiate is selected based on the "),Aee=n(bC,"CODE",{});var zDr=s(Aee);boo=r(zDr,"model_type"),zDr.forEach(t),Foo=r(bC,` property of the config object
(either passed as an argument or loaded from `),yee=n(bC,"CODE",{});var QDr=s(yee);voo=r(QDr,"pretrained_model_name_or_path"),QDr.forEach(t),Too=r(bC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Lee=n(bC,"CODE",{});var WDr=s(Lee);Moo=r(WDr,"pretrained_model_name_or_path"),WDr.forEach(t),Eoo=r(bC,":"),bC.forEach(t),Coo=i(Nt),te=n(Nt,"UL",{});var ne=s(te);hh=n(ne,"LI",{});var $4e=s(hh);xee=n($4e,"STRONG",{});var HDr=s(xee);woo=r(HDr,"beit"),HDr.forEach(t),Aoo=r($4e," \u2014 "),MR=n($4e,"A",{href:!0});var UDr=s(MR);yoo=r(UDr,"BeitFeatureExtractor"),UDr.forEach(t),Loo=r($4e," (BEiT model)"),$4e.forEach(t),xoo=i(ne),ph=n(ne,"LI",{});var I4e=s(ph);kee=n(I4e,"STRONG",{});var JDr=s(kee);koo=r(JDr,"clip"),JDr.forEach(t),Soo=r(I4e," \u2014 "),ER=n(I4e,"A",{href:!0});var YDr=s(ER);Roo=r(YDr,"CLIPFeatureExtractor"),YDr.forEach(t),Boo=r(I4e," (CLIP model)"),I4e.forEach(t),Poo=i(ne),_h=n(ne,"LI",{});var q4e=s(_h);See=n(q4e,"STRONG",{});var KDr=s(See);$oo=r(KDr,"convnext"),KDr.forEach(t),Ioo=r(q4e," \u2014 "),CR=n(q4e,"A",{href:!0});var ZDr=s(CR);qoo=r(ZDr,"ConvNextFeatureExtractor"),ZDr.forEach(t),Noo=r(q4e," (ConvNext model)"),q4e.forEach(t),joo=i(ne),uh=n(ne,"LI",{});var N4e=s(uh);Ree=n(N4e,"STRONG",{});var eGr=s(Ree);Doo=r(eGr,"deit"),eGr.forEach(t),Goo=r(N4e," \u2014 "),wR=n(N4e,"A",{href:!0});var oGr=s(wR);Ooo=r(oGr,"DeiTFeatureExtractor"),oGr.forEach(t),Voo=r(N4e," (DeiT model)"),N4e.forEach(t),Xoo=i(ne),bh=n(ne,"LI",{});var j4e=s(bh);Bee=n(j4e,"STRONG",{});var rGr=s(Bee);zoo=r(rGr,"detr"),rGr.forEach(t),Qoo=r(j4e," \u2014 "),AR=n(j4e,"A",{href:!0});var tGr=s(AR);Woo=r(tGr,"DetrFeatureExtractor"),tGr.forEach(t),Hoo=r(j4e," (DETR model)"),j4e.forEach(t),Uoo=i(ne),Fh=n(ne,"LI",{});var D4e=s(Fh);Pee=n(D4e,"STRONG",{});var aGr=s(Pee);Joo=r(aGr,"hubert"),aGr.forEach(t),Yoo=r(D4e," \u2014 "),yR=n(D4e,"A",{href:!0});var nGr=s(yR);Koo=r(nGr,"Wav2Vec2FeatureExtractor"),nGr.forEach(t),Zoo=r(D4e," (Hubert model)"),D4e.forEach(t),ero=i(ne),vh=n(ne,"LI",{});var G4e=s(vh);$ee=n(G4e,"STRONG",{});var sGr=s($ee);oro=r(sGr,"layoutlmv2"),sGr.forEach(t),rro=r(G4e," \u2014 "),LR=n(G4e,"A",{href:!0});var lGr=s(LR);tro=r(lGr,"LayoutLMv2FeatureExtractor"),lGr.forEach(t),aro=r(G4e," (LayoutLMv2 model)"),G4e.forEach(t),nro=i(ne),Th=n(ne,"LI",{});var O4e=s(Th);Iee=n(O4e,"STRONG",{});var iGr=s(Iee);sro=r(iGr,"maskformer"),iGr.forEach(t),lro=r(O4e," \u2014 "),xR=n(O4e,"A",{href:!0});var dGr=s(xR);iro=r(dGr,"MaskFormerFeatureExtractor"),dGr.forEach(t),dro=r(O4e," (MaskFormer model)"),O4e.forEach(t),cro=i(ne),Mh=n(ne,"LI",{});var V4e=s(Mh);qee=n(V4e,"STRONG",{});var cGr=s(qee);fro=r(cGr,"perceiver"),cGr.forEach(t),mro=r(V4e," \u2014 "),kR=n(V4e,"A",{href:!0});var fGr=s(kR);gro=r(fGr,"PerceiverFeatureExtractor"),fGr.forEach(t),hro=r(V4e," (Perceiver model)"),V4e.forEach(t),pro=i(ne),Eh=n(ne,"LI",{});var X4e=s(Eh);Nee=n(X4e,"STRONG",{});var mGr=s(Nee);_ro=r(mGr,"poolformer"),mGr.forEach(t),uro=r(X4e," \u2014 "),SR=n(X4e,"A",{href:!0});var gGr=s(SR);bro=r(gGr,"PoolFormerFeatureExtractor"),gGr.forEach(t),Fro=r(X4e," (PoolFormer model)"),X4e.forEach(t),vro=i(ne),Ch=n(ne,"LI",{});var z4e=s(Ch);jee=n(z4e,"STRONG",{});var hGr=s(jee);Tro=r(hGr,"resnet"),hGr.forEach(t),Mro=r(z4e," \u2014 "),RR=n(z4e,"A",{href:!0});var pGr=s(RR);Ero=r(pGr,"ConvNextFeatureExtractor"),pGr.forEach(t),Cro=r(z4e," (ResNet model)"),z4e.forEach(t),wro=i(ne),wh=n(ne,"LI",{});var Q4e=s(wh);Dee=n(Q4e,"STRONG",{});var _Gr=s(Dee);Aro=r(_Gr,"segformer"),_Gr.forEach(t),yro=r(Q4e," \u2014 "),BR=n(Q4e,"A",{href:!0});var uGr=s(BR);Lro=r(uGr,"SegformerFeatureExtractor"),uGr.forEach(t),xro=r(Q4e," (SegFormer model)"),Q4e.forEach(t),kro=i(ne),Ah=n(ne,"LI",{});var W4e=s(Ah);Gee=n(W4e,"STRONG",{});var bGr=s(Gee);Sro=r(bGr,"speech_to_text"),bGr.forEach(t),Rro=r(W4e," \u2014 "),PR=n(W4e,"A",{href:!0});var FGr=s(PR);Bro=r(FGr,"Speech2TextFeatureExtractor"),FGr.forEach(t),Pro=r(W4e," (Speech2Text model)"),W4e.forEach(t),$ro=i(ne),yh=n(ne,"LI",{});var H4e=s(yh);Oee=n(H4e,"STRONG",{});var vGr=s(Oee);Iro=r(vGr,"swin"),vGr.forEach(t),qro=r(H4e," \u2014 "),$R=n(H4e,"A",{href:!0});var TGr=s($R);Nro=r(TGr,"ViTFeatureExtractor"),TGr.forEach(t),jro=r(H4e," (Swin model)"),H4e.forEach(t),Dro=i(ne),Lh=n(ne,"LI",{});var U4e=s(Lh);Vee=n(U4e,"STRONG",{});var MGr=s(Vee);Gro=r(MGr,"van"),MGr.forEach(t),Oro=r(U4e," \u2014 "),IR=n(U4e,"A",{href:!0});var EGr=s(IR);Vro=r(EGr,"ConvNextFeatureExtractor"),EGr.forEach(t),Xro=r(U4e," (VAN model)"),U4e.forEach(t),zro=i(ne),xh=n(ne,"LI",{});var J4e=s(xh);Xee=n(J4e,"STRONG",{});var CGr=s(Xee);Qro=r(CGr,"vit"),CGr.forEach(t),Wro=r(J4e," \u2014 "),qR=n(J4e,"A",{href:!0});var wGr=s(qR);Hro=r(wGr,"ViTFeatureExtractor"),wGr.forEach(t),Uro=r(J4e," (ViT model)"),J4e.forEach(t),Jro=i(ne),kh=n(ne,"LI",{});var Y4e=s(kh);zee=n(Y4e,"STRONG",{});var AGr=s(zee);Yro=r(AGr,"vit_mae"),AGr.forEach(t),Kro=r(Y4e," \u2014 "),NR=n(Y4e,"A",{href:!0});var yGr=s(NR);Zro=r(yGr,"ViTFeatureExtractor"),yGr.forEach(t),eto=r(Y4e," (ViTMAE model)"),Y4e.forEach(t),oto=i(ne),Sh=n(ne,"LI",{});var K4e=s(Sh);Qee=n(K4e,"STRONG",{});var LGr=s(Qee);rto=r(LGr,"wav2vec2"),LGr.forEach(t),tto=r(K4e," \u2014 "),jR=n(K4e,"A",{href:!0});var xGr=s(jR);ato=r(xGr,"Wav2Vec2FeatureExtractor"),xGr.forEach(t),nto=r(K4e," (Wav2Vec2 model)"),K4e.forEach(t),ne.forEach(t),sto=i(Nt),m(Rh.$$.fragment,Nt),lto=i(Nt),Wee=n(Nt,"P",{});var kGr=s(Wee);ito=r(kGr,"Examples:"),kGr.forEach(t),dto=i(Nt),m(D3.$$.fragment,Nt),Nt.forEach(t),cto=i(zs),Bh=n(zs,"DIV",{class:!0});var oPe=s(Bh);m(G3.$$.fragment,oPe),fto=i(oPe),Hee=n(oPe,"P",{});var SGr=s(Hee);mto=r(SGr,"Register a new feature extractor for this class."),SGr.forEach(t),oPe.forEach(t),zs.forEach(t),USe=i(c),Ui=n(c,"H2",{class:!0});var rPe=s(Ui);Ph=n(rPe,"A",{id:!0,class:!0,href:!0});var RGr=s(Ph);Uee=n(RGr,"SPAN",{});var BGr=s(Uee);m(O3.$$.fragment,BGr),BGr.forEach(t),RGr.forEach(t),gto=i(rPe),Jee=n(rPe,"SPAN",{});var PGr=s(Jee);hto=r(PGr,"AutoProcessor"),PGr.forEach(t),rPe.forEach(t),JSe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(V3.$$.fragment,Qs),pto=i(Qs),X3=n(Qs,"P",{});var tPe=s(X3);_to=r(tPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),DR=n(tPe,"A",{href:!0});var $Gr=s(DR);uto=r($Gr,"AutoProcessor.from_pretrained()"),$Gr.forEach(t),bto=r(tPe," class method."),tPe.forEach(t),Fto=i(Qs),z3=n(Qs,"P",{});var aPe=s(z3);vto=r(aPe,"This class cannot be instantiated directly using "),Yee=n(aPe,"CODE",{});var IGr=s(Yee);Tto=r(IGr,"__init__()"),IGr.forEach(t),Mto=r(aPe," (throws an error)."),aPe.forEach(t),Eto=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(Q3.$$.fragment,jt),Cto=i(jt),Kee=n(jt,"P",{});var qGr=s(Kee);wto=r(qGr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qGr.forEach(t),Ato=i(jt),Ji=n(jt,"P",{});var UH=s(Ji);yto=r(UH,"The processor class to instantiate is selected based on the "),Zee=n(UH,"CODE",{});var NGr=s(Zee);Lto=r(NGr,"model_type"),NGr.forEach(t),xto=r(UH,` property of the config object (either
passed as an argument or loaded from `),eoe=n(UH,"CODE",{});var jGr=s(eoe);kto=r(jGr,"pretrained_model_name_or_path"),jGr.forEach(t),Sto=r(UH," if possible):"),UH.forEach(t),Rto=i(jt),ke=n(jt,"UL",{});var jo=s(ke);$h=n(jo,"LI",{});var Z4e=s($h);ooe=n(Z4e,"STRONG",{});var DGr=s(ooe);Bto=r(DGr,"clip"),DGr.forEach(t),Pto=r(Z4e," \u2014 "),GR=n(Z4e,"A",{href:!0});var GGr=s(GR);$to=r(GGr,"CLIPProcessor"),GGr.forEach(t),Ito=r(Z4e," (CLIP model)"),Z4e.forEach(t),qto=i(jo),Ih=n(jo,"LI",{});var eEe=s(Ih);roe=n(eEe,"STRONG",{});var OGr=s(roe);Nto=r(OGr,"layoutlmv2"),OGr.forEach(t),jto=r(eEe," \u2014 "),OR=n(eEe,"A",{href:!0});var VGr=s(OR);Dto=r(VGr,"LayoutLMv2Processor"),VGr.forEach(t),Gto=r(eEe," (LayoutLMv2 model)"),eEe.forEach(t),Oto=i(jo),qh=n(jo,"LI",{});var oEe=s(qh);toe=n(oEe,"STRONG",{});var XGr=s(toe);Vto=r(XGr,"layoutxlm"),XGr.forEach(t),Xto=r(oEe," \u2014 "),VR=n(oEe,"A",{href:!0});var zGr=s(VR);zto=r(zGr,"LayoutXLMProcessor"),zGr.forEach(t),Qto=r(oEe," (LayoutXLM model)"),oEe.forEach(t),Wto=i(jo),Nh=n(jo,"LI",{});var rEe=s(Nh);aoe=n(rEe,"STRONG",{});var QGr=s(aoe);Hto=r(QGr,"speech_to_text"),QGr.forEach(t),Uto=r(rEe," \u2014 "),XR=n(rEe,"A",{href:!0});var WGr=s(XR);Jto=r(WGr,"Speech2TextProcessor"),WGr.forEach(t),Yto=r(rEe," (Speech2Text model)"),rEe.forEach(t),Kto=i(jo),jh=n(jo,"LI",{});var tEe=s(jh);noe=n(tEe,"STRONG",{});var HGr=s(noe);Zto=r(HGr,"speech_to_text_2"),HGr.forEach(t),eao=r(tEe," \u2014 "),zR=n(tEe,"A",{href:!0});var UGr=s(zR);oao=r(UGr,"Speech2Text2Processor"),UGr.forEach(t),rao=r(tEe," (Speech2Text2 model)"),tEe.forEach(t),tao=i(jo),Dh=n(jo,"LI",{});var aEe=s(Dh);soe=n(aEe,"STRONG",{});var JGr=s(soe);aao=r(JGr,"trocr"),JGr.forEach(t),nao=r(aEe," \u2014 "),QR=n(aEe,"A",{href:!0});var YGr=s(QR);sao=r(YGr,"TrOCRProcessor"),YGr.forEach(t),lao=r(aEe," (TrOCR model)"),aEe.forEach(t),iao=i(jo),Gh=n(jo,"LI",{});var nEe=s(Gh);loe=n(nEe,"STRONG",{});var KGr=s(loe);dao=r(KGr,"vision-text-dual-encoder"),KGr.forEach(t),cao=r(nEe," \u2014 "),WR=n(nEe,"A",{href:!0});var ZGr=s(WR);fao=r(ZGr,"VisionTextDualEncoderProcessor"),ZGr.forEach(t),mao=r(nEe," (VisionTextDualEncoder model)"),nEe.forEach(t),gao=i(jo),Oh=n(jo,"LI",{});var sEe=s(Oh);ioe=n(sEe,"STRONG",{});var eOr=s(ioe);hao=r(eOr,"wav2vec2"),eOr.forEach(t),pao=r(sEe," \u2014 "),HR=n(sEe,"A",{href:!0});var oOr=s(HR);_ao=r(oOr,"Wav2Vec2Processor"),oOr.forEach(t),uao=r(sEe," (Wav2Vec2 model)"),sEe.forEach(t),jo.forEach(t),bao=i(jt),m(Vh.$$.fragment,jt),Fao=i(jt),doe=n(jt,"P",{});var rOr=s(doe);vao=r(rOr,"Examples:"),rOr.forEach(t),Tao=i(jt),m(W3.$$.fragment,jt),jt.forEach(t),Mao=i(Qs),Xh=n(Qs,"DIV",{class:!0});var nPe=s(Xh);m(H3.$$.fragment,nPe),Eao=i(nPe),coe=n(nPe,"P",{});var tOr=s(coe);Cao=r(tOr,"Register a new processor for this class."),tOr.forEach(t),nPe.forEach(t),Qs.forEach(t),YSe=i(c),Yi=n(c,"H2",{class:!0});var sPe=s(Yi);zh=n(sPe,"A",{id:!0,class:!0,href:!0});var aOr=s(zh);foe=n(aOr,"SPAN",{});var nOr=s(foe);m(U3.$$.fragment,nOr),nOr.forEach(t),aOr.forEach(t),wao=i(sPe),moe=n(sPe,"SPAN",{});var sOr=s(moe);Aao=r(sOr,"AutoModel"),sOr.forEach(t),sPe.forEach(t),KSe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(J3.$$.fragment,Ws),yao=i(Ws),Ki=n(Ws,"P",{});var JH=s(Ki);Lao=r(JH,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UR=n(JH,"A",{href:!0});var lOr=s(UR);xao=r(lOr,"from_pretrained()"),lOr.forEach(t),kao=r(JH," class method or the "),JR=n(JH,"A",{href:!0});var iOr=s(JR);Sao=r(iOr,"from_config()"),iOr.forEach(t),Rao=r(JH,` class
method.`),JH.forEach(t),Bao=i(Ws),Y3=n(Ws,"P",{});var lPe=s(Y3);Pao=r(lPe,"This class cannot be instantiated directly using "),goe=n(lPe,"CODE",{});var dOr=s(goe);$ao=r(dOr,"__init__()"),dOr.forEach(t),Iao=r(lPe," (throws an error)."),lPe.forEach(t),qao=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(K3.$$.fragment,Hs),Nao=i(Hs),hoe=n(Hs,"P",{});var cOr=s(hoe);jao=r(cOr,"Instantiates one of the base model classes of the library from a configuration."),cOr.forEach(t),Dao=i(Hs),Zi=n(Hs,"P",{});var YH=s(Zi);Gao=r(YH,`Note:
Loading a model from its configuration file does `),poe=n(YH,"STRONG",{});var fOr=s(poe);Oao=r(fOr,"not"),fOr.forEach(t),Vao=r(YH,` load the model weights. It only affects the
model\u2019s configuration. Use `),YR=n(YH,"A",{href:!0});var mOr=s(YR);Xao=r(mOr,"from_pretrained()"),mOr.forEach(t),zao=r(YH," to load the model weights."),YH.forEach(t),Qao=i(Hs),_oe=n(Hs,"P",{});var gOr=s(_oe);Wao=r(gOr,"Examples:"),gOr.forEach(t),Hao=i(Hs),m(Z3.$$.fragment,Hs),Hs.forEach(t),Uao=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(ew.$$.fragment,Dt),Jao=i(Dt),uoe=n(Dt,"P",{});var hOr=s(uoe);Yao=r(hOr,"Instantiate one of the base model classes of the library from a pretrained model."),hOr.forEach(t),Kao=i(Dt),Xa=n(Dt,"P",{});var FC=s(Xa);Zao=r(FC,"The model class to instantiate is selected based on the "),boe=n(FC,"CODE",{});var pOr=s(boe);eno=r(pOr,"model_type"),pOr.forEach(t),ono=r(FC,` property of the config object (either
passed as an argument or loaded from `),Foe=n(FC,"CODE",{});var _Or=s(Foe);rno=r(_Or,"pretrained_model_name_or_path"),_Or.forEach(t),tno=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),voe=n(FC,"CODE",{});var uOr=s(voe);ano=r(uOr,"pretrained_model_name_or_path"),uOr.forEach(t),nno=r(FC,":"),FC.forEach(t),sno=i(Dt),T=n(Dt,"UL",{});var M=s(T);Qh=n(M,"LI",{});var lEe=s(Qh);Toe=n(lEe,"STRONG",{});var bOr=s(Toe);lno=r(bOr,"albert"),bOr.forEach(t),ino=r(lEe," \u2014 "),KR=n(lEe,"A",{href:!0});var FOr=s(KR);dno=r(FOr,"AlbertModel"),FOr.forEach(t),cno=r(lEe," (ALBERT model)"),lEe.forEach(t),fno=i(M),Wh=n(M,"LI",{});var iEe=s(Wh);Moe=n(iEe,"STRONG",{});var vOr=s(Moe);mno=r(vOr,"bart"),vOr.forEach(t),gno=r(iEe," \u2014 "),ZR=n(iEe,"A",{href:!0});var TOr=s(ZR);hno=r(TOr,"BartModel"),TOr.forEach(t),pno=r(iEe," (BART model)"),iEe.forEach(t),_no=i(M),Hh=n(M,"LI",{});var dEe=s(Hh);Eoe=n(dEe,"STRONG",{});var MOr=s(Eoe);uno=r(MOr,"beit"),MOr.forEach(t),bno=r(dEe," \u2014 "),eB=n(dEe,"A",{href:!0});var EOr=s(eB);Fno=r(EOr,"BeitModel"),EOr.forEach(t),vno=r(dEe," (BEiT model)"),dEe.forEach(t),Tno=i(M),Uh=n(M,"LI",{});var cEe=s(Uh);Coe=n(cEe,"STRONG",{});var COr=s(Coe);Mno=r(COr,"bert"),COr.forEach(t),Eno=r(cEe," \u2014 "),oB=n(cEe,"A",{href:!0});var wOr=s(oB);Cno=r(wOr,"BertModel"),wOr.forEach(t),wno=r(cEe," (BERT model)"),cEe.forEach(t),Ano=i(M),Jh=n(M,"LI",{});var fEe=s(Jh);woe=n(fEe,"STRONG",{});var AOr=s(woe);yno=r(AOr,"bert-generation"),AOr.forEach(t),Lno=r(fEe," \u2014 "),rB=n(fEe,"A",{href:!0});var yOr=s(rB);xno=r(yOr,"BertGenerationEncoder"),yOr.forEach(t),kno=r(fEe," (Bert Generation model)"),fEe.forEach(t),Sno=i(M),Yh=n(M,"LI",{});var mEe=s(Yh);Aoe=n(mEe,"STRONG",{});var LOr=s(Aoe);Rno=r(LOr,"big_bird"),LOr.forEach(t),Bno=r(mEe," \u2014 "),tB=n(mEe,"A",{href:!0});var xOr=s(tB);Pno=r(xOr,"BigBirdModel"),xOr.forEach(t),$no=r(mEe," (BigBird model)"),mEe.forEach(t),Ino=i(M),Kh=n(M,"LI",{});var gEe=s(Kh);yoe=n(gEe,"STRONG",{});var kOr=s(yoe);qno=r(kOr,"bigbird_pegasus"),kOr.forEach(t),Nno=r(gEe," \u2014 "),aB=n(gEe,"A",{href:!0});var SOr=s(aB);jno=r(SOr,"BigBirdPegasusModel"),SOr.forEach(t),Dno=r(gEe," (BigBirdPegasus model)"),gEe.forEach(t),Gno=i(M),Zh=n(M,"LI",{});var hEe=s(Zh);Loe=n(hEe,"STRONG",{});var ROr=s(Loe);Ono=r(ROr,"blenderbot"),ROr.forEach(t),Vno=r(hEe," \u2014 "),nB=n(hEe,"A",{href:!0});var BOr=s(nB);Xno=r(BOr,"BlenderbotModel"),BOr.forEach(t),zno=r(hEe," (Blenderbot model)"),hEe.forEach(t),Qno=i(M),ep=n(M,"LI",{});var pEe=s(ep);xoe=n(pEe,"STRONG",{});var POr=s(xoe);Wno=r(POr,"blenderbot-small"),POr.forEach(t),Hno=r(pEe," \u2014 "),sB=n(pEe,"A",{href:!0});var $Or=s(sB);Uno=r($Or,"BlenderbotSmallModel"),$Or.forEach(t),Jno=r(pEe," (BlenderbotSmall model)"),pEe.forEach(t),Yno=i(M),op=n(M,"LI",{});var _Ee=s(op);koe=n(_Ee,"STRONG",{});var IOr=s(koe);Kno=r(IOr,"camembert"),IOr.forEach(t),Zno=r(_Ee," \u2014 "),lB=n(_Ee,"A",{href:!0});var qOr=s(lB);eso=r(qOr,"CamembertModel"),qOr.forEach(t),oso=r(_Ee," (CamemBERT model)"),_Ee.forEach(t),rso=i(M),rp=n(M,"LI",{});var uEe=s(rp);Soe=n(uEe,"STRONG",{});var NOr=s(Soe);tso=r(NOr,"canine"),NOr.forEach(t),aso=r(uEe," \u2014 "),iB=n(uEe,"A",{href:!0});var jOr=s(iB);nso=r(jOr,"CanineModel"),jOr.forEach(t),sso=r(uEe," (Canine model)"),uEe.forEach(t),lso=i(M),tp=n(M,"LI",{});var bEe=s(tp);Roe=n(bEe,"STRONG",{});var DOr=s(Roe);iso=r(DOr,"clip"),DOr.forEach(t),dso=r(bEe," \u2014 "),dB=n(bEe,"A",{href:!0});var GOr=s(dB);cso=r(GOr,"CLIPModel"),GOr.forEach(t),fso=r(bEe," (CLIP model)"),bEe.forEach(t),mso=i(M),ap=n(M,"LI",{});var FEe=s(ap);Boe=n(FEe,"STRONG",{});var OOr=s(Boe);gso=r(OOr,"convbert"),OOr.forEach(t),hso=r(FEe," \u2014 "),cB=n(FEe,"A",{href:!0});var VOr=s(cB);pso=r(VOr,"ConvBertModel"),VOr.forEach(t),_so=r(FEe," (ConvBERT model)"),FEe.forEach(t),uso=i(M),np=n(M,"LI",{});var vEe=s(np);Poe=n(vEe,"STRONG",{});var XOr=s(Poe);bso=r(XOr,"convnext"),XOr.forEach(t),Fso=r(vEe," \u2014 "),fB=n(vEe,"A",{href:!0});var zOr=s(fB);vso=r(zOr,"ConvNextModel"),zOr.forEach(t),Tso=r(vEe," (ConvNext model)"),vEe.forEach(t),Mso=i(M),sp=n(M,"LI",{});var TEe=s(sp);$oe=n(TEe,"STRONG",{});var QOr=s($oe);Eso=r(QOr,"ctrl"),QOr.forEach(t),Cso=r(TEe," \u2014 "),mB=n(TEe,"A",{href:!0});var WOr=s(mB);wso=r(WOr,"CTRLModel"),WOr.forEach(t),Aso=r(TEe," (CTRL model)"),TEe.forEach(t),yso=i(M),lp=n(M,"LI",{});var MEe=s(lp);Ioe=n(MEe,"STRONG",{});var HOr=s(Ioe);Lso=r(HOr,"data2vec-audio"),HOr.forEach(t),xso=r(MEe," \u2014 "),gB=n(MEe,"A",{href:!0});var UOr=s(gB);kso=r(UOr,"Data2VecAudioModel"),UOr.forEach(t),Sso=r(MEe," (Data2VecAudio model)"),MEe.forEach(t),Rso=i(M),ip=n(M,"LI",{});var EEe=s(ip);qoe=n(EEe,"STRONG",{});var JOr=s(qoe);Bso=r(JOr,"data2vec-text"),JOr.forEach(t),Pso=r(EEe," \u2014 "),hB=n(EEe,"A",{href:!0});var YOr=s(hB);$so=r(YOr,"Data2VecTextModel"),YOr.forEach(t),Iso=r(EEe," (Data2VecText model)"),EEe.forEach(t),qso=i(M),dp=n(M,"LI",{});var CEe=s(dp);Noe=n(CEe,"STRONG",{});var KOr=s(Noe);Nso=r(KOr,"deberta"),KOr.forEach(t),jso=r(CEe," \u2014 "),pB=n(CEe,"A",{href:!0});var ZOr=s(pB);Dso=r(ZOr,"DebertaModel"),ZOr.forEach(t),Gso=r(CEe," (DeBERTa model)"),CEe.forEach(t),Oso=i(M),cp=n(M,"LI",{});var wEe=s(cp);joe=n(wEe,"STRONG",{});var eVr=s(joe);Vso=r(eVr,"deberta-v2"),eVr.forEach(t),Xso=r(wEe," \u2014 "),_B=n(wEe,"A",{href:!0});var oVr=s(_B);zso=r(oVr,"DebertaV2Model"),oVr.forEach(t),Qso=r(wEe," (DeBERTa-v2 model)"),wEe.forEach(t),Wso=i(M),fp=n(M,"LI",{});var AEe=s(fp);Doe=n(AEe,"STRONG",{});var rVr=s(Doe);Hso=r(rVr,"decision_transformer"),rVr.forEach(t),Uso=r(AEe," \u2014 "),uB=n(AEe,"A",{href:!0});var tVr=s(uB);Jso=r(tVr,"DecisionTransformerModel"),tVr.forEach(t),Yso=r(AEe," (Decision Transformer model)"),AEe.forEach(t),Kso=i(M),mp=n(M,"LI",{});var yEe=s(mp);Goe=n(yEe,"STRONG",{});var aVr=s(Goe);Zso=r(aVr,"deit"),aVr.forEach(t),elo=r(yEe," \u2014 "),bB=n(yEe,"A",{href:!0});var nVr=s(bB);olo=r(nVr,"DeiTModel"),nVr.forEach(t),rlo=r(yEe," (DeiT model)"),yEe.forEach(t),tlo=i(M),gp=n(M,"LI",{});var LEe=s(gp);Ooe=n(LEe,"STRONG",{});var sVr=s(Ooe);alo=r(sVr,"detr"),sVr.forEach(t),nlo=r(LEe," \u2014 "),FB=n(LEe,"A",{href:!0});var lVr=s(FB);slo=r(lVr,"DetrModel"),lVr.forEach(t),llo=r(LEe," (DETR model)"),LEe.forEach(t),ilo=i(M),hp=n(M,"LI",{});var xEe=s(hp);Voe=n(xEe,"STRONG",{});var iVr=s(Voe);dlo=r(iVr,"distilbert"),iVr.forEach(t),clo=r(xEe," \u2014 "),vB=n(xEe,"A",{href:!0});var dVr=s(vB);flo=r(dVr,"DistilBertModel"),dVr.forEach(t),mlo=r(xEe," (DistilBERT model)"),xEe.forEach(t),glo=i(M),pp=n(M,"LI",{});var kEe=s(pp);Xoe=n(kEe,"STRONG",{});var cVr=s(Xoe);hlo=r(cVr,"dpr"),cVr.forEach(t),plo=r(kEe," \u2014 "),TB=n(kEe,"A",{href:!0});var fVr=s(TB);_lo=r(fVr,"DPRQuestionEncoder"),fVr.forEach(t),ulo=r(kEe," (DPR model)"),kEe.forEach(t),blo=i(M),_p=n(M,"LI",{});var SEe=s(_p);zoe=n(SEe,"STRONG",{});var mVr=s(zoe);Flo=r(mVr,"dpt"),mVr.forEach(t),vlo=r(SEe," \u2014 "),MB=n(SEe,"A",{href:!0});var gVr=s(MB);Tlo=r(gVr,"DPTModel"),gVr.forEach(t),Mlo=r(SEe," (DPT model)"),SEe.forEach(t),Elo=i(M),up=n(M,"LI",{});var REe=s(up);Qoe=n(REe,"STRONG",{});var hVr=s(Qoe);Clo=r(hVr,"electra"),hVr.forEach(t),wlo=r(REe," \u2014 "),EB=n(REe,"A",{href:!0});var pVr=s(EB);Alo=r(pVr,"ElectraModel"),pVr.forEach(t),ylo=r(REe," (ELECTRA model)"),REe.forEach(t),Llo=i(M),bp=n(M,"LI",{});var BEe=s(bp);Woe=n(BEe,"STRONG",{});var _Vr=s(Woe);xlo=r(_Vr,"flaubert"),_Vr.forEach(t),klo=r(BEe," \u2014 "),CB=n(BEe,"A",{href:!0});var uVr=s(CB);Slo=r(uVr,"FlaubertModel"),uVr.forEach(t),Rlo=r(BEe," (FlauBERT model)"),BEe.forEach(t),Blo=i(M),Fp=n(M,"LI",{});var PEe=s(Fp);Hoe=n(PEe,"STRONG",{});var bVr=s(Hoe);Plo=r(bVr,"fnet"),bVr.forEach(t),$lo=r(PEe," \u2014 "),wB=n(PEe,"A",{href:!0});var FVr=s(wB);Ilo=r(FVr,"FNetModel"),FVr.forEach(t),qlo=r(PEe," (FNet model)"),PEe.forEach(t),Nlo=i(M),vp=n(M,"LI",{});var $Ee=s(vp);Uoe=n($Ee,"STRONG",{});var vVr=s(Uoe);jlo=r(vVr,"fsmt"),vVr.forEach(t),Dlo=r($Ee," \u2014 "),AB=n($Ee,"A",{href:!0});var TVr=s(AB);Glo=r(TVr,"FSMTModel"),TVr.forEach(t),Olo=r($Ee," (FairSeq Machine-Translation model)"),$Ee.forEach(t),Vlo=i(M),Ds=n(M,"LI",{});var n9=s(Ds);Joe=n(n9,"STRONG",{});var MVr=s(Joe);Xlo=r(MVr,"funnel"),MVr.forEach(t),zlo=r(n9," \u2014 "),yB=n(n9,"A",{href:!0});var EVr=s(yB);Qlo=r(EVr,"FunnelModel"),EVr.forEach(t),Wlo=r(n9," or "),LB=n(n9,"A",{href:!0});var CVr=s(LB);Hlo=r(CVr,"FunnelBaseModel"),CVr.forEach(t),Ulo=r(n9," (Funnel Transformer model)"),n9.forEach(t),Jlo=i(M),Tp=n(M,"LI",{});var IEe=s(Tp);Yoe=n(IEe,"STRONG",{});var wVr=s(Yoe);Ylo=r(wVr,"glpn"),wVr.forEach(t),Klo=r(IEe," \u2014 "),xB=n(IEe,"A",{href:!0});var AVr=s(xB);Zlo=r(AVr,"GLPNModel"),AVr.forEach(t),eio=r(IEe," (GLPN model)"),IEe.forEach(t),oio=i(M),Mp=n(M,"LI",{});var qEe=s(Mp);Koe=n(qEe,"STRONG",{});var yVr=s(Koe);rio=r(yVr,"gpt2"),yVr.forEach(t),tio=r(qEe," \u2014 "),kB=n(qEe,"A",{href:!0});var LVr=s(kB);aio=r(LVr,"GPT2Model"),LVr.forEach(t),nio=r(qEe," (OpenAI GPT-2 model)"),qEe.forEach(t),sio=i(M),Ep=n(M,"LI",{});var NEe=s(Ep);Zoe=n(NEe,"STRONG",{});var xVr=s(Zoe);lio=r(xVr,"gpt_neo"),xVr.forEach(t),iio=r(NEe," \u2014 "),SB=n(NEe,"A",{href:!0});var kVr=s(SB);dio=r(kVr,"GPTNeoModel"),kVr.forEach(t),cio=r(NEe," (GPT Neo model)"),NEe.forEach(t),fio=i(M),Cp=n(M,"LI",{});var jEe=s(Cp);ere=n(jEe,"STRONG",{});var SVr=s(ere);mio=r(SVr,"gptj"),SVr.forEach(t),gio=r(jEe," \u2014 "),RB=n(jEe,"A",{href:!0});var RVr=s(RB);hio=r(RVr,"GPTJModel"),RVr.forEach(t),pio=r(jEe," (GPT-J model)"),jEe.forEach(t),_io=i(M),wp=n(M,"LI",{});var DEe=s(wp);ore=n(DEe,"STRONG",{});var BVr=s(ore);uio=r(BVr,"hubert"),BVr.forEach(t),bio=r(DEe," \u2014 "),BB=n(DEe,"A",{href:!0});var PVr=s(BB);Fio=r(PVr,"HubertModel"),PVr.forEach(t),vio=r(DEe," (Hubert model)"),DEe.forEach(t),Tio=i(M),Ap=n(M,"LI",{});var GEe=s(Ap);rre=n(GEe,"STRONG",{});var $Vr=s(rre);Mio=r($Vr,"ibert"),$Vr.forEach(t),Eio=r(GEe," \u2014 "),PB=n(GEe,"A",{href:!0});var IVr=s(PB);Cio=r(IVr,"IBertModel"),IVr.forEach(t),wio=r(GEe," (I-BERT model)"),GEe.forEach(t),Aio=i(M),yp=n(M,"LI",{});var OEe=s(yp);tre=n(OEe,"STRONG",{});var qVr=s(tre);yio=r(qVr,"imagegpt"),qVr.forEach(t),Lio=r(OEe," \u2014 "),$B=n(OEe,"A",{href:!0});var NVr=s($B);xio=r(NVr,"ImageGPTModel"),NVr.forEach(t),kio=r(OEe," (ImageGPT model)"),OEe.forEach(t),Sio=i(M),Lp=n(M,"LI",{});var VEe=s(Lp);are=n(VEe,"STRONG",{});var jVr=s(are);Rio=r(jVr,"layoutlm"),jVr.forEach(t),Bio=r(VEe," \u2014 "),IB=n(VEe,"A",{href:!0});var DVr=s(IB);Pio=r(DVr,"LayoutLMModel"),DVr.forEach(t),$io=r(VEe," (LayoutLM model)"),VEe.forEach(t),Iio=i(M),xp=n(M,"LI",{});var XEe=s(xp);nre=n(XEe,"STRONG",{});var GVr=s(nre);qio=r(GVr,"layoutlmv2"),GVr.forEach(t),Nio=r(XEe," \u2014 "),qB=n(XEe,"A",{href:!0});var OVr=s(qB);jio=r(OVr,"LayoutLMv2Model"),OVr.forEach(t),Dio=r(XEe," (LayoutLMv2 model)"),XEe.forEach(t),Gio=i(M),kp=n(M,"LI",{});var zEe=s(kp);sre=n(zEe,"STRONG",{});var VVr=s(sre);Oio=r(VVr,"led"),VVr.forEach(t),Vio=r(zEe," \u2014 "),NB=n(zEe,"A",{href:!0});var XVr=s(NB);Xio=r(XVr,"LEDModel"),XVr.forEach(t),zio=r(zEe," (LED model)"),zEe.forEach(t),Qio=i(M),Sp=n(M,"LI",{});var QEe=s(Sp);lre=n(QEe,"STRONG",{});var zVr=s(lre);Wio=r(zVr,"longformer"),zVr.forEach(t),Hio=r(QEe," \u2014 "),jB=n(QEe,"A",{href:!0});var QVr=s(jB);Uio=r(QVr,"LongformerModel"),QVr.forEach(t),Jio=r(QEe," (Longformer model)"),QEe.forEach(t),Yio=i(M),Rp=n(M,"LI",{});var WEe=s(Rp);ire=n(WEe,"STRONG",{});var WVr=s(ire);Kio=r(WVr,"luke"),WVr.forEach(t),Zio=r(WEe," \u2014 "),DB=n(WEe,"A",{href:!0});var HVr=s(DB);edo=r(HVr,"LukeModel"),HVr.forEach(t),odo=r(WEe," (LUKE model)"),WEe.forEach(t),rdo=i(M),Bp=n(M,"LI",{});var HEe=s(Bp);dre=n(HEe,"STRONG",{});var UVr=s(dre);tdo=r(UVr,"lxmert"),UVr.forEach(t),ado=r(HEe," \u2014 "),GB=n(HEe,"A",{href:!0});var JVr=s(GB);ndo=r(JVr,"LxmertModel"),JVr.forEach(t),sdo=r(HEe," (LXMERT model)"),HEe.forEach(t),ldo=i(M),Pp=n(M,"LI",{});var UEe=s(Pp);cre=n(UEe,"STRONG",{});var YVr=s(cre);ido=r(YVr,"m2m_100"),YVr.forEach(t),ddo=r(UEe," \u2014 "),OB=n(UEe,"A",{href:!0});var KVr=s(OB);cdo=r(KVr,"M2M100Model"),KVr.forEach(t),fdo=r(UEe," (M2M100 model)"),UEe.forEach(t),mdo=i(M),$p=n(M,"LI",{});var JEe=s($p);fre=n(JEe,"STRONG",{});var ZVr=s(fre);gdo=r(ZVr,"marian"),ZVr.forEach(t),hdo=r(JEe," \u2014 "),VB=n(JEe,"A",{href:!0});var eXr=s(VB);pdo=r(eXr,"MarianModel"),eXr.forEach(t),_do=r(JEe," (Marian model)"),JEe.forEach(t),udo=i(M),Ip=n(M,"LI",{});var YEe=s(Ip);mre=n(YEe,"STRONG",{});var oXr=s(mre);bdo=r(oXr,"maskformer"),oXr.forEach(t),Fdo=r(YEe," \u2014 "),XB=n(YEe,"A",{href:!0});var rXr=s(XB);vdo=r(rXr,"MaskFormerModel"),rXr.forEach(t),Tdo=r(YEe," (MaskFormer model)"),YEe.forEach(t),Mdo=i(M),qp=n(M,"LI",{});var KEe=s(qp);gre=n(KEe,"STRONG",{});var tXr=s(gre);Edo=r(tXr,"mbart"),tXr.forEach(t),Cdo=r(KEe," \u2014 "),zB=n(KEe,"A",{href:!0});var aXr=s(zB);wdo=r(aXr,"MBartModel"),aXr.forEach(t),Ado=r(KEe," (mBART model)"),KEe.forEach(t),ydo=i(M),Np=n(M,"LI",{});var ZEe=s(Np);hre=n(ZEe,"STRONG",{});var nXr=s(hre);Ldo=r(nXr,"megatron-bert"),nXr.forEach(t),xdo=r(ZEe," \u2014 "),QB=n(ZEe,"A",{href:!0});var sXr=s(QB);kdo=r(sXr,"MegatronBertModel"),sXr.forEach(t),Sdo=r(ZEe," (MegatronBert model)"),ZEe.forEach(t),Rdo=i(M),jp=n(M,"LI",{});var eCe=s(jp);pre=n(eCe,"STRONG",{});var lXr=s(pre);Bdo=r(lXr,"mobilebert"),lXr.forEach(t),Pdo=r(eCe," \u2014 "),WB=n(eCe,"A",{href:!0});var iXr=s(WB);$do=r(iXr,"MobileBertModel"),iXr.forEach(t),Ido=r(eCe," (MobileBERT model)"),eCe.forEach(t),qdo=i(M),Dp=n(M,"LI",{});var oCe=s(Dp);_re=n(oCe,"STRONG",{});var dXr=s(_re);Ndo=r(dXr,"mpnet"),dXr.forEach(t),jdo=r(oCe," \u2014 "),HB=n(oCe,"A",{href:!0});var cXr=s(HB);Ddo=r(cXr,"MPNetModel"),cXr.forEach(t),Gdo=r(oCe," (MPNet model)"),oCe.forEach(t),Odo=i(M),Gp=n(M,"LI",{});var rCe=s(Gp);ure=n(rCe,"STRONG",{});var fXr=s(ure);Vdo=r(fXr,"mt5"),fXr.forEach(t),Xdo=r(rCe," \u2014 "),UB=n(rCe,"A",{href:!0});var mXr=s(UB);zdo=r(mXr,"MT5Model"),mXr.forEach(t),Qdo=r(rCe," (mT5 model)"),rCe.forEach(t),Wdo=i(M),Op=n(M,"LI",{});var tCe=s(Op);bre=n(tCe,"STRONG",{});var gXr=s(bre);Hdo=r(gXr,"nystromformer"),gXr.forEach(t),Udo=r(tCe," \u2014 "),JB=n(tCe,"A",{href:!0});var hXr=s(JB);Jdo=r(hXr,"NystromformerModel"),hXr.forEach(t),Ydo=r(tCe," (Nystromformer model)"),tCe.forEach(t),Kdo=i(M),Vp=n(M,"LI",{});var aCe=s(Vp);Fre=n(aCe,"STRONG",{});var pXr=s(Fre);Zdo=r(pXr,"openai-gpt"),pXr.forEach(t),eco=r(aCe," \u2014 "),YB=n(aCe,"A",{href:!0});var _Xr=s(YB);oco=r(_Xr,"OpenAIGPTModel"),_Xr.forEach(t),rco=r(aCe," (OpenAI GPT model)"),aCe.forEach(t),tco=i(M),Xp=n(M,"LI",{});var nCe=s(Xp);vre=n(nCe,"STRONG",{});var uXr=s(vre);aco=r(uXr,"pegasus"),uXr.forEach(t),nco=r(nCe," \u2014 "),KB=n(nCe,"A",{href:!0});var bXr=s(KB);sco=r(bXr,"PegasusModel"),bXr.forEach(t),lco=r(nCe," (Pegasus model)"),nCe.forEach(t),ico=i(M),zp=n(M,"LI",{});var sCe=s(zp);Tre=n(sCe,"STRONG",{});var FXr=s(Tre);dco=r(FXr,"perceiver"),FXr.forEach(t),cco=r(sCe," \u2014 "),ZB=n(sCe,"A",{href:!0});var vXr=s(ZB);fco=r(vXr,"PerceiverModel"),vXr.forEach(t),mco=r(sCe," (Perceiver model)"),sCe.forEach(t),gco=i(M),Qp=n(M,"LI",{});var lCe=s(Qp);Mre=n(lCe,"STRONG",{});var TXr=s(Mre);hco=r(TXr,"plbart"),TXr.forEach(t),pco=r(lCe," \u2014 "),eP=n(lCe,"A",{href:!0});var MXr=s(eP);_co=r(MXr,"PLBartModel"),MXr.forEach(t),uco=r(lCe," (PLBart model)"),lCe.forEach(t),bco=i(M),Wp=n(M,"LI",{});var iCe=s(Wp);Ere=n(iCe,"STRONG",{});var EXr=s(Ere);Fco=r(EXr,"poolformer"),EXr.forEach(t),vco=r(iCe," \u2014 "),oP=n(iCe,"A",{href:!0});var CXr=s(oP);Tco=r(CXr,"PoolFormerModel"),CXr.forEach(t),Mco=r(iCe," (PoolFormer model)"),iCe.forEach(t),Eco=i(M),Hp=n(M,"LI",{});var dCe=s(Hp);Cre=n(dCe,"STRONG",{});var wXr=s(Cre);Cco=r(wXr,"prophetnet"),wXr.forEach(t),wco=r(dCe," \u2014 "),rP=n(dCe,"A",{href:!0});var AXr=s(rP);Aco=r(AXr,"ProphetNetModel"),AXr.forEach(t),yco=r(dCe," (ProphetNet model)"),dCe.forEach(t),Lco=i(M),Up=n(M,"LI",{});var cCe=s(Up);wre=n(cCe,"STRONG",{});var yXr=s(wre);xco=r(yXr,"qdqbert"),yXr.forEach(t),kco=r(cCe," \u2014 "),tP=n(cCe,"A",{href:!0});var LXr=s(tP);Sco=r(LXr,"QDQBertModel"),LXr.forEach(t),Rco=r(cCe," (QDQBert model)"),cCe.forEach(t),Bco=i(M),Jp=n(M,"LI",{});var fCe=s(Jp);Are=n(fCe,"STRONG",{});var xXr=s(Are);Pco=r(xXr,"reformer"),xXr.forEach(t),$co=r(fCe," \u2014 "),aP=n(fCe,"A",{href:!0});var kXr=s(aP);Ico=r(kXr,"ReformerModel"),kXr.forEach(t),qco=r(fCe," (Reformer model)"),fCe.forEach(t),Nco=i(M),Yp=n(M,"LI",{});var mCe=s(Yp);yre=n(mCe,"STRONG",{});var SXr=s(yre);jco=r(SXr,"rembert"),SXr.forEach(t),Dco=r(mCe," \u2014 "),nP=n(mCe,"A",{href:!0});var RXr=s(nP);Gco=r(RXr,"RemBertModel"),RXr.forEach(t),Oco=r(mCe," (RemBERT model)"),mCe.forEach(t),Vco=i(M),Kp=n(M,"LI",{});var gCe=s(Kp);Lre=n(gCe,"STRONG",{});var BXr=s(Lre);Xco=r(BXr,"resnet"),BXr.forEach(t),zco=r(gCe," \u2014 "),sP=n(gCe,"A",{href:!0});var PXr=s(sP);Qco=r(PXr,"ResNetModel"),PXr.forEach(t),Wco=r(gCe," (ResNet model)"),gCe.forEach(t),Hco=i(M),Zp=n(M,"LI",{});var hCe=s(Zp);xre=n(hCe,"STRONG",{});var $Xr=s(xre);Uco=r($Xr,"retribert"),$Xr.forEach(t),Jco=r(hCe," \u2014 "),lP=n(hCe,"A",{href:!0});var IXr=s(lP);Yco=r(IXr,"RetriBertModel"),IXr.forEach(t),Kco=r(hCe," (RetriBERT model)"),hCe.forEach(t),Zco=i(M),e_=n(M,"LI",{});var pCe=s(e_);kre=n(pCe,"STRONG",{});var qXr=s(kre);efo=r(qXr,"roberta"),qXr.forEach(t),ofo=r(pCe," \u2014 "),iP=n(pCe,"A",{href:!0});var NXr=s(iP);rfo=r(NXr,"RobertaModel"),NXr.forEach(t),tfo=r(pCe," (RoBERTa model)"),pCe.forEach(t),afo=i(M),o_=n(M,"LI",{});var _Ce=s(o_);Sre=n(_Ce,"STRONG",{});var jXr=s(Sre);nfo=r(jXr,"roformer"),jXr.forEach(t),sfo=r(_Ce," \u2014 "),dP=n(_Ce,"A",{href:!0});var DXr=s(dP);lfo=r(DXr,"RoFormerModel"),DXr.forEach(t),ifo=r(_Ce," (RoFormer model)"),_Ce.forEach(t),dfo=i(M),r_=n(M,"LI",{});var uCe=s(r_);Rre=n(uCe,"STRONG",{});var GXr=s(Rre);cfo=r(GXr,"segformer"),GXr.forEach(t),ffo=r(uCe," \u2014 "),cP=n(uCe,"A",{href:!0});var OXr=s(cP);mfo=r(OXr,"SegformerModel"),OXr.forEach(t),gfo=r(uCe," (SegFormer model)"),uCe.forEach(t),hfo=i(M),t_=n(M,"LI",{});var bCe=s(t_);Bre=n(bCe,"STRONG",{});var VXr=s(Bre);pfo=r(VXr,"sew"),VXr.forEach(t),_fo=r(bCe," \u2014 "),fP=n(bCe,"A",{href:!0});var XXr=s(fP);ufo=r(XXr,"SEWModel"),XXr.forEach(t),bfo=r(bCe," (SEW model)"),bCe.forEach(t),Ffo=i(M),a_=n(M,"LI",{});var FCe=s(a_);Pre=n(FCe,"STRONG",{});var zXr=s(Pre);vfo=r(zXr,"sew-d"),zXr.forEach(t),Tfo=r(FCe," \u2014 "),mP=n(FCe,"A",{href:!0});var QXr=s(mP);Mfo=r(QXr,"SEWDModel"),QXr.forEach(t),Efo=r(FCe," (SEW-D model)"),FCe.forEach(t),Cfo=i(M),n_=n(M,"LI",{});var vCe=s(n_);$re=n(vCe,"STRONG",{});var WXr=s($re);wfo=r(WXr,"speech_to_text"),WXr.forEach(t),Afo=r(vCe," \u2014 "),gP=n(vCe,"A",{href:!0});var HXr=s(gP);yfo=r(HXr,"Speech2TextModel"),HXr.forEach(t),Lfo=r(vCe," (Speech2Text model)"),vCe.forEach(t),xfo=i(M),s_=n(M,"LI",{});var TCe=s(s_);Ire=n(TCe,"STRONG",{});var UXr=s(Ire);kfo=r(UXr,"splinter"),UXr.forEach(t),Sfo=r(TCe," \u2014 "),hP=n(TCe,"A",{href:!0});var JXr=s(hP);Rfo=r(JXr,"SplinterModel"),JXr.forEach(t),Bfo=r(TCe," (Splinter model)"),TCe.forEach(t),Pfo=i(M),l_=n(M,"LI",{});var MCe=s(l_);qre=n(MCe,"STRONG",{});var YXr=s(qre);$fo=r(YXr,"squeezebert"),YXr.forEach(t),Ifo=r(MCe," \u2014 "),pP=n(MCe,"A",{href:!0});var KXr=s(pP);qfo=r(KXr,"SqueezeBertModel"),KXr.forEach(t),Nfo=r(MCe," (SqueezeBERT model)"),MCe.forEach(t),jfo=i(M),i_=n(M,"LI",{});var ECe=s(i_);Nre=n(ECe,"STRONG",{});var ZXr=s(Nre);Dfo=r(ZXr,"swin"),ZXr.forEach(t),Gfo=r(ECe," \u2014 "),_P=n(ECe,"A",{href:!0});var ezr=s(_P);Ofo=r(ezr,"SwinModel"),ezr.forEach(t),Vfo=r(ECe," (Swin model)"),ECe.forEach(t),Xfo=i(M),d_=n(M,"LI",{});var CCe=s(d_);jre=n(CCe,"STRONG",{});var ozr=s(jre);zfo=r(ozr,"t5"),ozr.forEach(t),Qfo=r(CCe," \u2014 "),uP=n(CCe,"A",{href:!0});var rzr=s(uP);Wfo=r(rzr,"T5Model"),rzr.forEach(t),Hfo=r(CCe," (T5 model)"),CCe.forEach(t),Ufo=i(M),c_=n(M,"LI",{});var wCe=s(c_);Dre=n(wCe,"STRONG",{});var tzr=s(Dre);Jfo=r(tzr,"tapas"),tzr.forEach(t),Yfo=r(wCe," \u2014 "),bP=n(wCe,"A",{href:!0});var azr=s(bP);Kfo=r(azr,"TapasModel"),azr.forEach(t),Zfo=r(wCe," (TAPAS model)"),wCe.forEach(t),emo=i(M),f_=n(M,"LI",{});var ACe=s(f_);Gre=n(ACe,"STRONG",{});var nzr=s(Gre);omo=r(nzr,"transfo-xl"),nzr.forEach(t),rmo=r(ACe," \u2014 "),FP=n(ACe,"A",{href:!0});var szr=s(FP);tmo=r(szr,"TransfoXLModel"),szr.forEach(t),amo=r(ACe," (Transformer-XL model)"),ACe.forEach(t),nmo=i(M),m_=n(M,"LI",{});var yCe=s(m_);Ore=n(yCe,"STRONG",{});var lzr=s(Ore);smo=r(lzr,"unispeech"),lzr.forEach(t),lmo=r(yCe," \u2014 "),vP=n(yCe,"A",{href:!0});var izr=s(vP);imo=r(izr,"UniSpeechModel"),izr.forEach(t),dmo=r(yCe," (UniSpeech model)"),yCe.forEach(t),cmo=i(M),g_=n(M,"LI",{});var LCe=s(g_);Vre=n(LCe,"STRONG",{});var dzr=s(Vre);fmo=r(dzr,"unispeech-sat"),dzr.forEach(t),mmo=r(LCe," \u2014 "),TP=n(LCe,"A",{href:!0});var czr=s(TP);gmo=r(czr,"UniSpeechSatModel"),czr.forEach(t),hmo=r(LCe," (UniSpeechSat model)"),LCe.forEach(t),pmo=i(M),h_=n(M,"LI",{});var xCe=s(h_);Xre=n(xCe,"STRONG",{});var fzr=s(Xre);_mo=r(fzr,"van"),fzr.forEach(t),umo=r(xCe," \u2014 "),MP=n(xCe,"A",{href:!0});var mzr=s(MP);bmo=r(mzr,"VanModel"),mzr.forEach(t),Fmo=r(xCe," (VAN model)"),xCe.forEach(t),vmo=i(M),p_=n(M,"LI",{});var kCe=s(p_);zre=n(kCe,"STRONG",{});var gzr=s(zre);Tmo=r(gzr,"vilt"),gzr.forEach(t),Mmo=r(kCe," \u2014 "),EP=n(kCe,"A",{href:!0});var hzr=s(EP);Emo=r(hzr,"ViltModel"),hzr.forEach(t),Cmo=r(kCe," (ViLT model)"),kCe.forEach(t),wmo=i(M),__=n(M,"LI",{});var SCe=s(__);Qre=n(SCe,"STRONG",{});var pzr=s(Qre);Amo=r(pzr,"vision-text-dual-encoder"),pzr.forEach(t),ymo=r(SCe," \u2014 "),CP=n(SCe,"A",{href:!0});var _zr=s(CP);Lmo=r(_zr,"VisionTextDualEncoderModel"),_zr.forEach(t),xmo=r(SCe," (VisionTextDualEncoder model)"),SCe.forEach(t),kmo=i(M),u_=n(M,"LI",{});var RCe=s(u_);Wre=n(RCe,"STRONG",{});var uzr=s(Wre);Smo=r(uzr,"visual_bert"),uzr.forEach(t),Rmo=r(RCe," \u2014 "),wP=n(RCe,"A",{href:!0});var bzr=s(wP);Bmo=r(bzr,"VisualBertModel"),bzr.forEach(t),Pmo=r(RCe," (VisualBert model)"),RCe.forEach(t),$mo=i(M),b_=n(M,"LI",{});var BCe=s(b_);Hre=n(BCe,"STRONG",{});var Fzr=s(Hre);Imo=r(Fzr,"vit"),Fzr.forEach(t),qmo=r(BCe," \u2014 "),AP=n(BCe,"A",{href:!0});var vzr=s(AP);Nmo=r(vzr,"ViTModel"),vzr.forEach(t),jmo=r(BCe," (ViT model)"),BCe.forEach(t),Dmo=i(M),F_=n(M,"LI",{});var PCe=s(F_);Ure=n(PCe,"STRONG",{});var Tzr=s(Ure);Gmo=r(Tzr,"vit_mae"),Tzr.forEach(t),Omo=r(PCe," \u2014 "),yP=n(PCe,"A",{href:!0});var Mzr=s(yP);Vmo=r(Mzr,"ViTMAEModel"),Mzr.forEach(t),Xmo=r(PCe," (ViTMAE model)"),PCe.forEach(t),zmo=i(M),v_=n(M,"LI",{});var $Ce=s(v_);Jre=n($Ce,"STRONG",{});var Ezr=s(Jre);Qmo=r(Ezr,"wav2vec2"),Ezr.forEach(t),Wmo=r($Ce," \u2014 "),LP=n($Ce,"A",{href:!0});var Czr=s(LP);Hmo=r(Czr,"Wav2Vec2Model"),Czr.forEach(t),Umo=r($Ce," (Wav2Vec2 model)"),$Ce.forEach(t),Jmo=i(M),T_=n(M,"LI",{});var ICe=s(T_);Yre=n(ICe,"STRONG",{});var wzr=s(Yre);Ymo=r(wzr,"wavlm"),wzr.forEach(t),Kmo=r(ICe," \u2014 "),xP=n(ICe,"A",{href:!0});var Azr=s(xP);Zmo=r(Azr,"WavLMModel"),Azr.forEach(t),ego=r(ICe," (WavLM model)"),ICe.forEach(t),ogo=i(M),M_=n(M,"LI",{});var qCe=s(M_);Kre=n(qCe,"STRONG",{});var yzr=s(Kre);rgo=r(yzr,"xglm"),yzr.forEach(t),tgo=r(qCe," \u2014 "),kP=n(qCe,"A",{href:!0});var Lzr=s(kP);ago=r(Lzr,"XGLMModel"),Lzr.forEach(t),ngo=r(qCe," (XGLM model)"),qCe.forEach(t),sgo=i(M),E_=n(M,"LI",{});var NCe=s(E_);Zre=n(NCe,"STRONG",{});var xzr=s(Zre);lgo=r(xzr,"xlm"),xzr.forEach(t),igo=r(NCe," \u2014 "),SP=n(NCe,"A",{href:!0});var kzr=s(SP);dgo=r(kzr,"XLMModel"),kzr.forEach(t),cgo=r(NCe," (XLM model)"),NCe.forEach(t),fgo=i(M),C_=n(M,"LI",{});var jCe=s(C_);ete=n(jCe,"STRONG",{});var Szr=s(ete);mgo=r(Szr,"xlm-prophetnet"),Szr.forEach(t),ggo=r(jCe," \u2014 "),RP=n(jCe,"A",{href:!0});var Rzr=s(RP);hgo=r(Rzr,"XLMProphetNetModel"),Rzr.forEach(t),pgo=r(jCe," (XLMProphetNet model)"),jCe.forEach(t),_go=i(M),w_=n(M,"LI",{});var DCe=s(w_);ote=n(DCe,"STRONG",{});var Bzr=s(ote);ugo=r(Bzr,"xlm-roberta"),Bzr.forEach(t),bgo=r(DCe," \u2014 "),BP=n(DCe,"A",{href:!0});var Pzr=s(BP);Fgo=r(Pzr,"XLMRobertaModel"),Pzr.forEach(t),vgo=r(DCe," (XLM-RoBERTa model)"),DCe.forEach(t),Tgo=i(M),A_=n(M,"LI",{});var GCe=s(A_);rte=n(GCe,"STRONG",{});var $zr=s(rte);Mgo=r($zr,"xlm-roberta-xl"),$zr.forEach(t),Ego=r(GCe," \u2014 "),PP=n(GCe,"A",{href:!0});var Izr=s(PP);Cgo=r(Izr,"XLMRobertaXLModel"),Izr.forEach(t),wgo=r(GCe," (XLM-RoBERTa-XL model)"),GCe.forEach(t),Ago=i(M),y_=n(M,"LI",{});var OCe=s(y_);tte=n(OCe,"STRONG",{});var qzr=s(tte);ygo=r(qzr,"xlnet"),qzr.forEach(t),Lgo=r(OCe," \u2014 "),$P=n(OCe,"A",{href:!0});var Nzr=s($P);xgo=r(Nzr,"XLNetModel"),Nzr.forEach(t),kgo=r(OCe," (XLNet model)"),OCe.forEach(t),Sgo=i(M),L_=n(M,"LI",{});var VCe=s(L_);ate=n(VCe,"STRONG",{});var jzr=s(ate);Rgo=r(jzr,"yoso"),jzr.forEach(t),Bgo=r(VCe," \u2014 "),IP=n(VCe,"A",{href:!0});var Dzr=s(IP);Pgo=r(Dzr,"YosoModel"),Dzr.forEach(t),$go=r(VCe," (YOSO model)"),VCe.forEach(t),M.forEach(t),Igo=i(Dt),x_=n(Dt,"P",{});var XCe=s(x_);qgo=r(XCe,"The model is set in evaluation mode by default using "),nte=n(XCe,"CODE",{});var Gzr=s(nte);Ngo=r(Gzr,"model.eval()"),Gzr.forEach(t),jgo=r(XCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ste=n(XCe,"CODE",{});var Ozr=s(ste);Dgo=r(Ozr,"model.train()"),Ozr.forEach(t),XCe.forEach(t),Ggo=i(Dt),lte=n(Dt,"P",{});var Vzr=s(lte);Ogo=r(Vzr,"Examples:"),Vzr.forEach(t),Vgo=i(Dt),m(ow.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),ZSe=i(c),ed=n(c,"H2",{class:!0});var iPe=s(ed);k_=n(iPe,"A",{id:!0,class:!0,href:!0});var Xzr=s(k_);ite=n(Xzr,"SPAN",{});var zzr=s(ite);m(rw.$$.fragment,zzr),zzr.forEach(t),Xzr.forEach(t),Xgo=i(iPe),dte=n(iPe,"SPAN",{});var Qzr=s(dte);zgo=r(Qzr,"AutoModelForPreTraining"),Qzr.forEach(t),iPe.forEach(t),eRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(tw.$$.fragment,Us),Qgo=i(Us),od=n(Us,"P",{});var KH=s(od);Wgo=r(KH,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),qP=n(KH,"A",{href:!0});var Wzr=s(qP);Hgo=r(Wzr,"from_pretrained()"),Wzr.forEach(t),Ugo=r(KH," class method or the "),NP=n(KH,"A",{href:!0});var Hzr=s(NP);Jgo=r(Hzr,"from_config()"),Hzr.forEach(t),Ygo=r(KH,` class
method.`),KH.forEach(t),Kgo=i(Us),aw=n(Us,"P",{});var dPe=s(aw);Zgo=r(dPe,"This class cannot be instantiated directly using "),cte=n(dPe,"CODE",{});var Uzr=s(cte);eho=r(Uzr,"__init__()"),Uzr.forEach(t),oho=r(dPe," (throws an error)."),dPe.forEach(t),rho=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(nw.$$.fragment,Js),tho=i(Js),fte=n(Js,"P",{});var Jzr=s(fte);aho=r(Jzr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jzr.forEach(t),nho=i(Js),rd=n(Js,"P",{});var ZH=s(rd);sho=r(ZH,`Note:
Loading a model from its configuration file does `),mte=n(ZH,"STRONG",{});var Yzr=s(mte);lho=r(Yzr,"not"),Yzr.forEach(t),iho=r(ZH,` load the model weights. It only affects the
model\u2019s configuration. Use `),jP=n(ZH,"A",{href:!0});var Kzr=s(jP);dho=r(Kzr,"from_pretrained()"),Kzr.forEach(t),cho=r(ZH," to load the model weights."),ZH.forEach(t),fho=i(Js),gte=n(Js,"P",{});var Zzr=s(gte);mho=r(Zzr,"Examples:"),Zzr.forEach(t),gho=i(Js),m(sw.$$.fragment,Js),Js.forEach(t),hho=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(lw.$$.fragment,Gt),pho=i(Gt),hte=n(Gt,"P",{});var eQr=s(hte);_ho=r(eQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),eQr.forEach(t),uho=i(Gt),za=n(Gt,"P",{});var vC=s(za);bho=r(vC,"The model class to instantiate is selected based on the "),pte=n(vC,"CODE",{});var oQr=s(pte);Fho=r(oQr,"model_type"),oQr.forEach(t),vho=r(vC,` property of the config object (either
passed as an argument or loaded from `),_te=n(vC,"CODE",{});var rQr=s(_te);Tho=r(rQr,"pretrained_model_name_or_path"),rQr.forEach(t),Mho=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ute=n(vC,"CODE",{});var tQr=s(ute);Eho=r(tQr,"pretrained_model_name_or_path"),tQr.forEach(t),Cho=r(vC,":"),vC.forEach(t),who=i(Gt),S=n(Gt,"UL",{});var B=s(S);S_=n(B,"LI",{});var zCe=s(S_);bte=n(zCe,"STRONG",{});var aQr=s(bte);Aho=r(aQr,"albert"),aQr.forEach(t),yho=r(zCe," \u2014 "),DP=n(zCe,"A",{href:!0});var nQr=s(DP);Lho=r(nQr,"AlbertForPreTraining"),nQr.forEach(t),xho=r(zCe," (ALBERT model)"),zCe.forEach(t),kho=i(B),R_=n(B,"LI",{});var QCe=s(R_);Fte=n(QCe,"STRONG",{});var sQr=s(Fte);Sho=r(sQr,"bart"),sQr.forEach(t),Rho=r(QCe," \u2014 "),GP=n(QCe,"A",{href:!0});var lQr=s(GP);Bho=r(lQr,"BartForConditionalGeneration"),lQr.forEach(t),Pho=r(QCe," (BART model)"),QCe.forEach(t),$ho=i(B),B_=n(B,"LI",{});var WCe=s(B_);vte=n(WCe,"STRONG",{});var iQr=s(vte);Iho=r(iQr,"bert"),iQr.forEach(t),qho=r(WCe," \u2014 "),OP=n(WCe,"A",{href:!0});var dQr=s(OP);Nho=r(dQr,"BertForPreTraining"),dQr.forEach(t),jho=r(WCe," (BERT model)"),WCe.forEach(t),Dho=i(B),P_=n(B,"LI",{});var HCe=s(P_);Tte=n(HCe,"STRONG",{});var cQr=s(Tte);Gho=r(cQr,"big_bird"),cQr.forEach(t),Oho=r(HCe," \u2014 "),VP=n(HCe,"A",{href:!0});var fQr=s(VP);Vho=r(fQr,"BigBirdForPreTraining"),fQr.forEach(t),Xho=r(HCe," (BigBird model)"),HCe.forEach(t),zho=i(B),$_=n(B,"LI",{});var UCe=s($_);Mte=n(UCe,"STRONG",{});var mQr=s(Mte);Qho=r(mQr,"camembert"),mQr.forEach(t),Who=r(UCe," \u2014 "),XP=n(UCe,"A",{href:!0});var gQr=s(XP);Hho=r(gQr,"CamembertForMaskedLM"),gQr.forEach(t),Uho=r(UCe," (CamemBERT model)"),UCe.forEach(t),Jho=i(B),I_=n(B,"LI",{});var JCe=s(I_);Ete=n(JCe,"STRONG",{});var hQr=s(Ete);Yho=r(hQr,"ctrl"),hQr.forEach(t),Kho=r(JCe," \u2014 "),zP=n(JCe,"A",{href:!0});var pQr=s(zP);Zho=r(pQr,"CTRLLMHeadModel"),pQr.forEach(t),epo=r(JCe," (CTRL model)"),JCe.forEach(t),opo=i(B),q_=n(B,"LI",{});var YCe=s(q_);Cte=n(YCe,"STRONG",{});var _Qr=s(Cte);rpo=r(_Qr,"data2vec-text"),_Qr.forEach(t),tpo=r(YCe," \u2014 "),QP=n(YCe,"A",{href:!0});var uQr=s(QP);apo=r(uQr,"Data2VecTextForMaskedLM"),uQr.forEach(t),npo=r(YCe," (Data2VecText model)"),YCe.forEach(t),spo=i(B),N_=n(B,"LI",{});var KCe=s(N_);wte=n(KCe,"STRONG",{});var bQr=s(wte);lpo=r(bQr,"deberta"),bQr.forEach(t),ipo=r(KCe," \u2014 "),WP=n(KCe,"A",{href:!0});var FQr=s(WP);dpo=r(FQr,"DebertaForMaskedLM"),FQr.forEach(t),cpo=r(KCe," (DeBERTa model)"),KCe.forEach(t),fpo=i(B),j_=n(B,"LI",{});var ZCe=s(j_);Ate=n(ZCe,"STRONG",{});var vQr=s(Ate);mpo=r(vQr,"deberta-v2"),vQr.forEach(t),gpo=r(ZCe," \u2014 "),HP=n(ZCe,"A",{href:!0});var TQr=s(HP);hpo=r(TQr,"DebertaV2ForMaskedLM"),TQr.forEach(t),ppo=r(ZCe," (DeBERTa-v2 model)"),ZCe.forEach(t),_po=i(B),D_=n(B,"LI",{});var e3e=s(D_);yte=n(e3e,"STRONG",{});var MQr=s(yte);upo=r(MQr,"distilbert"),MQr.forEach(t),bpo=r(e3e," \u2014 "),UP=n(e3e,"A",{href:!0});var EQr=s(UP);Fpo=r(EQr,"DistilBertForMaskedLM"),EQr.forEach(t),vpo=r(e3e," (DistilBERT model)"),e3e.forEach(t),Tpo=i(B),G_=n(B,"LI",{});var o3e=s(G_);Lte=n(o3e,"STRONG",{});var CQr=s(Lte);Mpo=r(CQr,"electra"),CQr.forEach(t),Epo=r(o3e," \u2014 "),JP=n(o3e,"A",{href:!0});var wQr=s(JP);Cpo=r(wQr,"ElectraForPreTraining"),wQr.forEach(t),wpo=r(o3e," (ELECTRA model)"),o3e.forEach(t),Apo=i(B),O_=n(B,"LI",{});var r3e=s(O_);xte=n(r3e,"STRONG",{});var AQr=s(xte);ypo=r(AQr,"flaubert"),AQr.forEach(t),Lpo=r(r3e," \u2014 "),YP=n(r3e,"A",{href:!0});var yQr=s(YP);xpo=r(yQr,"FlaubertWithLMHeadModel"),yQr.forEach(t),kpo=r(r3e," (FlauBERT model)"),r3e.forEach(t),Spo=i(B),V_=n(B,"LI",{});var t3e=s(V_);kte=n(t3e,"STRONG",{});var LQr=s(kte);Rpo=r(LQr,"fnet"),LQr.forEach(t),Bpo=r(t3e," \u2014 "),KP=n(t3e,"A",{href:!0});var xQr=s(KP);Ppo=r(xQr,"FNetForPreTraining"),xQr.forEach(t),$po=r(t3e," (FNet model)"),t3e.forEach(t),Ipo=i(B),X_=n(B,"LI",{});var a3e=s(X_);Ste=n(a3e,"STRONG",{});var kQr=s(Ste);qpo=r(kQr,"fsmt"),kQr.forEach(t),Npo=r(a3e," \u2014 "),ZP=n(a3e,"A",{href:!0});var SQr=s(ZP);jpo=r(SQr,"FSMTForConditionalGeneration"),SQr.forEach(t),Dpo=r(a3e," (FairSeq Machine-Translation model)"),a3e.forEach(t),Gpo=i(B),z_=n(B,"LI",{});var n3e=s(z_);Rte=n(n3e,"STRONG",{});var RQr=s(Rte);Opo=r(RQr,"funnel"),RQr.forEach(t),Vpo=r(n3e," \u2014 "),e$=n(n3e,"A",{href:!0});var BQr=s(e$);Xpo=r(BQr,"FunnelForPreTraining"),BQr.forEach(t),zpo=r(n3e," (Funnel Transformer model)"),n3e.forEach(t),Qpo=i(B),Q_=n(B,"LI",{});var s3e=s(Q_);Bte=n(s3e,"STRONG",{});var PQr=s(Bte);Wpo=r(PQr,"gpt2"),PQr.forEach(t),Hpo=r(s3e," \u2014 "),o$=n(s3e,"A",{href:!0});var $Qr=s(o$);Upo=r($Qr,"GPT2LMHeadModel"),$Qr.forEach(t),Jpo=r(s3e," (OpenAI GPT-2 model)"),s3e.forEach(t),Ypo=i(B),W_=n(B,"LI",{});var l3e=s(W_);Pte=n(l3e,"STRONG",{});var IQr=s(Pte);Kpo=r(IQr,"ibert"),IQr.forEach(t),Zpo=r(l3e," \u2014 "),r$=n(l3e,"A",{href:!0});var qQr=s(r$);e_o=r(qQr,"IBertForMaskedLM"),qQr.forEach(t),o_o=r(l3e," (I-BERT model)"),l3e.forEach(t),r_o=i(B),H_=n(B,"LI",{});var i3e=s(H_);$te=n(i3e,"STRONG",{});var NQr=s($te);t_o=r(NQr,"layoutlm"),NQr.forEach(t),a_o=r(i3e," \u2014 "),t$=n(i3e,"A",{href:!0});var jQr=s(t$);n_o=r(jQr,"LayoutLMForMaskedLM"),jQr.forEach(t),s_o=r(i3e," (LayoutLM model)"),i3e.forEach(t),l_o=i(B),U_=n(B,"LI",{});var d3e=s(U_);Ite=n(d3e,"STRONG",{});var DQr=s(Ite);i_o=r(DQr,"longformer"),DQr.forEach(t),d_o=r(d3e," \u2014 "),a$=n(d3e,"A",{href:!0});var GQr=s(a$);c_o=r(GQr,"LongformerForMaskedLM"),GQr.forEach(t),f_o=r(d3e," (Longformer model)"),d3e.forEach(t),m_o=i(B),J_=n(B,"LI",{});var c3e=s(J_);qte=n(c3e,"STRONG",{});var OQr=s(qte);g_o=r(OQr,"lxmert"),OQr.forEach(t),h_o=r(c3e," \u2014 "),n$=n(c3e,"A",{href:!0});var VQr=s(n$);p_o=r(VQr,"LxmertForPreTraining"),VQr.forEach(t),__o=r(c3e," (LXMERT model)"),c3e.forEach(t),u_o=i(B),Y_=n(B,"LI",{});var f3e=s(Y_);Nte=n(f3e,"STRONG",{});var XQr=s(Nte);b_o=r(XQr,"megatron-bert"),XQr.forEach(t),F_o=r(f3e," \u2014 "),s$=n(f3e,"A",{href:!0});var zQr=s(s$);v_o=r(zQr,"MegatronBertForPreTraining"),zQr.forEach(t),T_o=r(f3e," (MegatronBert model)"),f3e.forEach(t),M_o=i(B),K_=n(B,"LI",{});var m3e=s(K_);jte=n(m3e,"STRONG",{});var QQr=s(jte);E_o=r(QQr,"mobilebert"),QQr.forEach(t),C_o=r(m3e," \u2014 "),l$=n(m3e,"A",{href:!0});var WQr=s(l$);w_o=r(WQr,"MobileBertForPreTraining"),WQr.forEach(t),A_o=r(m3e," (MobileBERT model)"),m3e.forEach(t),y_o=i(B),Z_=n(B,"LI",{});var g3e=s(Z_);Dte=n(g3e,"STRONG",{});var HQr=s(Dte);L_o=r(HQr,"mpnet"),HQr.forEach(t),x_o=r(g3e," \u2014 "),i$=n(g3e,"A",{href:!0});var UQr=s(i$);k_o=r(UQr,"MPNetForMaskedLM"),UQr.forEach(t),S_o=r(g3e," (MPNet model)"),g3e.forEach(t),R_o=i(B),eu=n(B,"LI",{});var h3e=s(eu);Gte=n(h3e,"STRONG",{});var JQr=s(Gte);B_o=r(JQr,"openai-gpt"),JQr.forEach(t),P_o=r(h3e," \u2014 "),d$=n(h3e,"A",{href:!0});var YQr=s(d$);$_o=r(YQr,"OpenAIGPTLMHeadModel"),YQr.forEach(t),I_o=r(h3e," (OpenAI GPT model)"),h3e.forEach(t),q_o=i(B),ou=n(B,"LI",{});var p3e=s(ou);Ote=n(p3e,"STRONG",{});var KQr=s(Ote);N_o=r(KQr,"retribert"),KQr.forEach(t),j_o=r(p3e," \u2014 "),c$=n(p3e,"A",{href:!0});var ZQr=s(c$);D_o=r(ZQr,"RetriBertModel"),ZQr.forEach(t),G_o=r(p3e," (RetriBERT model)"),p3e.forEach(t),O_o=i(B),ru=n(B,"LI",{});var _3e=s(ru);Vte=n(_3e,"STRONG",{});var eWr=s(Vte);V_o=r(eWr,"roberta"),eWr.forEach(t),X_o=r(_3e," \u2014 "),f$=n(_3e,"A",{href:!0});var oWr=s(f$);z_o=r(oWr,"RobertaForMaskedLM"),oWr.forEach(t),Q_o=r(_3e," (RoBERTa model)"),_3e.forEach(t),W_o=i(B),tu=n(B,"LI",{});var u3e=s(tu);Xte=n(u3e,"STRONG",{});var rWr=s(Xte);H_o=r(rWr,"squeezebert"),rWr.forEach(t),U_o=r(u3e," \u2014 "),m$=n(u3e,"A",{href:!0});var tWr=s(m$);J_o=r(tWr,"SqueezeBertForMaskedLM"),tWr.forEach(t),Y_o=r(u3e," (SqueezeBERT model)"),u3e.forEach(t),K_o=i(B),au=n(B,"LI",{});var b3e=s(au);zte=n(b3e,"STRONG",{});var aWr=s(zte);Z_o=r(aWr,"t5"),aWr.forEach(t),euo=r(b3e," \u2014 "),g$=n(b3e,"A",{href:!0});var nWr=s(g$);ouo=r(nWr,"T5ForConditionalGeneration"),nWr.forEach(t),ruo=r(b3e," (T5 model)"),b3e.forEach(t),tuo=i(B),nu=n(B,"LI",{});var F3e=s(nu);Qte=n(F3e,"STRONG",{});var sWr=s(Qte);auo=r(sWr,"tapas"),sWr.forEach(t),nuo=r(F3e," \u2014 "),h$=n(F3e,"A",{href:!0});var lWr=s(h$);suo=r(lWr,"TapasForMaskedLM"),lWr.forEach(t),luo=r(F3e," (TAPAS model)"),F3e.forEach(t),iuo=i(B),su=n(B,"LI",{});var v3e=s(su);Wte=n(v3e,"STRONG",{});var iWr=s(Wte);duo=r(iWr,"transfo-xl"),iWr.forEach(t),cuo=r(v3e," \u2014 "),p$=n(v3e,"A",{href:!0});var dWr=s(p$);fuo=r(dWr,"TransfoXLLMHeadModel"),dWr.forEach(t),muo=r(v3e," (Transformer-XL model)"),v3e.forEach(t),guo=i(B),lu=n(B,"LI",{});var T3e=s(lu);Hte=n(T3e,"STRONG",{});var cWr=s(Hte);huo=r(cWr,"unispeech"),cWr.forEach(t),puo=r(T3e," \u2014 "),_$=n(T3e,"A",{href:!0});var fWr=s(_$);_uo=r(fWr,"UniSpeechForPreTraining"),fWr.forEach(t),uuo=r(T3e," (UniSpeech model)"),T3e.forEach(t),buo=i(B),iu=n(B,"LI",{});var M3e=s(iu);Ute=n(M3e,"STRONG",{});var mWr=s(Ute);Fuo=r(mWr,"unispeech-sat"),mWr.forEach(t),vuo=r(M3e," \u2014 "),u$=n(M3e,"A",{href:!0});var gWr=s(u$);Tuo=r(gWr,"UniSpeechSatForPreTraining"),gWr.forEach(t),Muo=r(M3e," (UniSpeechSat model)"),M3e.forEach(t),Euo=i(B),du=n(B,"LI",{});var E3e=s(du);Jte=n(E3e,"STRONG",{});var hWr=s(Jte);Cuo=r(hWr,"visual_bert"),hWr.forEach(t),wuo=r(E3e," \u2014 "),b$=n(E3e,"A",{href:!0});var pWr=s(b$);Auo=r(pWr,"VisualBertForPreTraining"),pWr.forEach(t),yuo=r(E3e," (VisualBert model)"),E3e.forEach(t),Luo=i(B),cu=n(B,"LI",{});var C3e=s(cu);Yte=n(C3e,"STRONG",{});var _Wr=s(Yte);xuo=r(_Wr,"vit_mae"),_Wr.forEach(t),kuo=r(C3e," \u2014 "),F$=n(C3e,"A",{href:!0});var uWr=s(F$);Suo=r(uWr,"ViTMAEForPreTraining"),uWr.forEach(t),Ruo=r(C3e," (ViTMAE model)"),C3e.forEach(t),Buo=i(B),fu=n(B,"LI",{});var w3e=s(fu);Kte=n(w3e,"STRONG",{});var bWr=s(Kte);Puo=r(bWr,"wav2vec2"),bWr.forEach(t),$uo=r(w3e," \u2014 "),v$=n(w3e,"A",{href:!0});var FWr=s(v$);Iuo=r(FWr,"Wav2Vec2ForPreTraining"),FWr.forEach(t),quo=r(w3e," (Wav2Vec2 model)"),w3e.forEach(t),Nuo=i(B),mu=n(B,"LI",{});var A3e=s(mu);Zte=n(A3e,"STRONG",{});var vWr=s(Zte);juo=r(vWr,"xlm"),vWr.forEach(t),Duo=r(A3e," \u2014 "),T$=n(A3e,"A",{href:!0});var TWr=s(T$);Guo=r(TWr,"XLMWithLMHeadModel"),TWr.forEach(t),Ouo=r(A3e," (XLM model)"),A3e.forEach(t),Vuo=i(B),gu=n(B,"LI",{});var y3e=s(gu);eae=n(y3e,"STRONG",{});var MWr=s(eae);Xuo=r(MWr,"xlm-roberta"),MWr.forEach(t),zuo=r(y3e," \u2014 "),M$=n(y3e,"A",{href:!0});var EWr=s(M$);Quo=r(EWr,"XLMRobertaForMaskedLM"),EWr.forEach(t),Wuo=r(y3e," (XLM-RoBERTa model)"),y3e.forEach(t),Huo=i(B),hu=n(B,"LI",{});var L3e=s(hu);oae=n(L3e,"STRONG",{});var CWr=s(oae);Uuo=r(CWr,"xlm-roberta-xl"),CWr.forEach(t),Juo=r(L3e," \u2014 "),E$=n(L3e,"A",{href:!0});var wWr=s(E$);Yuo=r(wWr,"XLMRobertaXLForMaskedLM"),wWr.forEach(t),Kuo=r(L3e," (XLM-RoBERTa-XL model)"),L3e.forEach(t),Zuo=i(B),pu=n(B,"LI",{});var x3e=s(pu);rae=n(x3e,"STRONG",{});var AWr=s(rae);e1o=r(AWr,"xlnet"),AWr.forEach(t),o1o=r(x3e," \u2014 "),C$=n(x3e,"A",{href:!0});var yWr=s(C$);r1o=r(yWr,"XLNetLMHeadModel"),yWr.forEach(t),t1o=r(x3e," (XLNet model)"),x3e.forEach(t),B.forEach(t),a1o=i(Gt),_u=n(Gt,"P",{});var k3e=s(_u);n1o=r(k3e,"The model is set in evaluation mode by default using "),tae=n(k3e,"CODE",{});var LWr=s(tae);s1o=r(LWr,"model.eval()"),LWr.forEach(t),l1o=r(k3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aae=n(k3e,"CODE",{});var xWr=s(aae);i1o=r(xWr,"model.train()"),xWr.forEach(t),k3e.forEach(t),d1o=i(Gt),nae=n(Gt,"P",{});var kWr=s(nae);c1o=r(kWr,"Examples:"),kWr.forEach(t),f1o=i(Gt),m(iw.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),oRe=i(c),td=n(c,"H2",{class:!0});var cPe=s(td);uu=n(cPe,"A",{id:!0,class:!0,href:!0});var SWr=s(uu);sae=n(SWr,"SPAN",{});var RWr=s(sae);m(dw.$$.fragment,RWr),RWr.forEach(t),SWr.forEach(t),m1o=i(cPe),lae=n(cPe,"SPAN",{});var BWr=s(lae);g1o=r(BWr,"AutoModelForCausalLM"),BWr.forEach(t),cPe.forEach(t),rRe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(cw.$$.fragment,Ys),h1o=i(Ys),ad=n(Ys,"P",{});var eU=s(ad);p1o=r(eU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),w$=n(eU,"A",{href:!0});var PWr=s(w$);_1o=r(PWr,"from_pretrained()"),PWr.forEach(t),u1o=r(eU," class method or the "),A$=n(eU,"A",{href:!0});var $Wr=s(A$);b1o=r($Wr,"from_config()"),$Wr.forEach(t),F1o=r(eU,` class
method.`),eU.forEach(t),v1o=i(Ys),fw=n(Ys,"P",{});var fPe=s(fw);T1o=r(fPe,"This class cannot be instantiated directly using "),iae=n(fPe,"CODE",{});var IWr=s(iae);M1o=r(IWr,"__init__()"),IWr.forEach(t),E1o=r(fPe," (throws an error)."),fPe.forEach(t),C1o=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(mw.$$.fragment,Ks),w1o=i(Ks),dae=n(Ks,"P",{});var qWr=s(dae);A1o=r(qWr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qWr.forEach(t),y1o=i(Ks),nd=n(Ks,"P",{});var oU=s(nd);L1o=r(oU,`Note:
Loading a model from its configuration file does `),cae=n(oU,"STRONG",{});var NWr=s(cae);x1o=r(NWr,"not"),NWr.forEach(t),k1o=r(oU,` load the model weights. It only affects the
model\u2019s configuration. Use `),y$=n(oU,"A",{href:!0});var jWr=s(y$);S1o=r(jWr,"from_pretrained()"),jWr.forEach(t),R1o=r(oU," to load the model weights."),oU.forEach(t),B1o=i(Ks),fae=n(Ks,"P",{});var DWr=s(fae);P1o=r(DWr,"Examples:"),DWr.forEach(t),$1o=i(Ks),m(gw.$$.fragment,Ks),Ks.forEach(t),I1o=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(hw.$$.fragment,Ot),q1o=i(Ot),mae=n(Ot,"P",{});var GWr=s(mae);N1o=r(GWr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GWr.forEach(t),j1o=i(Ot),Qa=n(Ot,"P",{});var TC=s(Qa);D1o=r(TC,"The model class to instantiate is selected based on the "),gae=n(TC,"CODE",{});var OWr=s(gae);G1o=r(OWr,"model_type"),OWr.forEach(t),O1o=r(TC,` property of the config object (either
passed as an argument or loaded from `),hae=n(TC,"CODE",{});var VWr=s(hae);V1o=r(VWr,"pretrained_model_name_or_path"),VWr.forEach(t),X1o=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pae=n(TC,"CODE",{});var XWr=s(pae);z1o=r(XWr,"pretrained_model_name_or_path"),XWr.forEach(t),Q1o=r(TC,":"),TC.forEach(t),W1o=i(Ot),$=n(Ot,"UL",{});var q=s($);bu=n(q,"LI",{});var S3e=s(bu);_ae=n(S3e,"STRONG",{});var zWr=s(_ae);H1o=r(zWr,"bart"),zWr.forEach(t),U1o=r(S3e," \u2014 "),L$=n(S3e,"A",{href:!0});var QWr=s(L$);J1o=r(QWr,"BartForCausalLM"),QWr.forEach(t),Y1o=r(S3e," (BART model)"),S3e.forEach(t),K1o=i(q),Fu=n(q,"LI",{});var R3e=s(Fu);uae=n(R3e,"STRONG",{});var WWr=s(uae);Z1o=r(WWr,"bert"),WWr.forEach(t),e5o=r(R3e," \u2014 "),x$=n(R3e,"A",{href:!0});var HWr=s(x$);o5o=r(HWr,"BertLMHeadModel"),HWr.forEach(t),r5o=r(R3e," (BERT model)"),R3e.forEach(t),t5o=i(q),vu=n(q,"LI",{});var B3e=s(vu);bae=n(B3e,"STRONG",{});var UWr=s(bae);a5o=r(UWr,"bert-generation"),UWr.forEach(t),n5o=r(B3e," \u2014 "),k$=n(B3e,"A",{href:!0});var JWr=s(k$);s5o=r(JWr,"BertGenerationDecoder"),JWr.forEach(t),l5o=r(B3e," (Bert Generation model)"),B3e.forEach(t),i5o=i(q),Tu=n(q,"LI",{});var P3e=s(Tu);Fae=n(P3e,"STRONG",{});var YWr=s(Fae);d5o=r(YWr,"big_bird"),YWr.forEach(t),c5o=r(P3e," \u2014 "),S$=n(P3e,"A",{href:!0});var KWr=s(S$);f5o=r(KWr,"BigBirdForCausalLM"),KWr.forEach(t),m5o=r(P3e," (BigBird model)"),P3e.forEach(t),g5o=i(q),Mu=n(q,"LI",{});var $3e=s(Mu);vae=n($3e,"STRONG",{});var ZWr=s(vae);h5o=r(ZWr,"bigbird_pegasus"),ZWr.forEach(t),p5o=r($3e," \u2014 "),R$=n($3e,"A",{href:!0});var eHr=s(R$);_5o=r(eHr,"BigBirdPegasusForCausalLM"),eHr.forEach(t),u5o=r($3e," (BigBirdPegasus model)"),$3e.forEach(t),b5o=i(q),Eu=n(q,"LI",{});var I3e=s(Eu);Tae=n(I3e,"STRONG",{});var oHr=s(Tae);F5o=r(oHr,"blenderbot"),oHr.forEach(t),v5o=r(I3e," \u2014 "),B$=n(I3e,"A",{href:!0});var rHr=s(B$);T5o=r(rHr,"BlenderbotForCausalLM"),rHr.forEach(t),M5o=r(I3e," (Blenderbot model)"),I3e.forEach(t),E5o=i(q),Cu=n(q,"LI",{});var q3e=s(Cu);Mae=n(q3e,"STRONG",{});var tHr=s(Mae);C5o=r(tHr,"blenderbot-small"),tHr.forEach(t),w5o=r(q3e," \u2014 "),P$=n(q3e,"A",{href:!0});var aHr=s(P$);A5o=r(aHr,"BlenderbotSmallForCausalLM"),aHr.forEach(t),y5o=r(q3e," (BlenderbotSmall model)"),q3e.forEach(t),L5o=i(q),wu=n(q,"LI",{});var N3e=s(wu);Eae=n(N3e,"STRONG",{});var nHr=s(Eae);x5o=r(nHr,"camembert"),nHr.forEach(t),k5o=r(N3e," \u2014 "),$$=n(N3e,"A",{href:!0});var sHr=s($$);S5o=r(sHr,"CamembertForCausalLM"),sHr.forEach(t),R5o=r(N3e," (CamemBERT model)"),N3e.forEach(t),B5o=i(q),Au=n(q,"LI",{});var j3e=s(Au);Cae=n(j3e,"STRONG",{});var lHr=s(Cae);P5o=r(lHr,"ctrl"),lHr.forEach(t),$5o=r(j3e," \u2014 "),I$=n(j3e,"A",{href:!0});var iHr=s(I$);I5o=r(iHr,"CTRLLMHeadModel"),iHr.forEach(t),q5o=r(j3e," (CTRL model)"),j3e.forEach(t),N5o=i(q),yu=n(q,"LI",{});var D3e=s(yu);wae=n(D3e,"STRONG",{});var dHr=s(wae);j5o=r(dHr,"data2vec-text"),dHr.forEach(t),D5o=r(D3e," \u2014 "),q$=n(D3e,"A",{href:!0});var cHr=s(q$);G5o=r(cHr,"Data2VecTextForCausalLM"),cHr.forEach(t),O5o=r(D3e," (Data2VecText model)"),D3e.forEach(t),V5o=i(q),Lu=n(q,"LI",{});var G3e=s(Lu);Aae=n(G3e,"STRONG",{});var fHr=s(Aae);X5o=r(fHr,"electra"),fHr.forEach(t),z5o=r(G3e," \u2014 "),N$=n(G3e,"A",{href:!0});var mHr=s(N$);Q5o=r(mHr,"ElectraForCausalLM"),mHr.forEach(t),W5o=r(G3e," (ELECTRA model)"),G3e.forEach(t),H5o=i(q),xu=n(q,"LI",{});var O3e=s(xu);yae=n(O3e,"STRONG",{});var gHr=s(yae);U5o=r(gHr,"gpt2"),gHr.forEach(t),J5o=r(O3e," \u2014 "),j$=n(O3e,"A",{href:!0});var hHr=s(j$);Y5o=r(hHr,"GPT2LMHeadModel"),hHr.forEach(t),K5o=r(O3e," (OpenAI GPT-2 model)"),O3e.forEach(t),Z5o=i(q),ku=n(q,"LI",{});var V3e=s(ku);Lae=n(V3e,"STRONG",{});var pHr=s(Lae);ebo=r(pHr,"gpt_neo"),pHr.forEach(t),obo=r(V3e," \u2014 "),D$=n(V3e,"A",{href:!0});var _Hr=s(D$);rbo=r(_Hr,"GPTNeoForCausalLM"),_Hr.forEach(t),tbo=r(V3e," (GPT Neo model)"),V3e.forEach(t),abo=i(q),Su=n(q,"LI",{});var X3e=s(Su);xae=n(X3e,"STRONG",{});var uHr=s(xae);nbo=r(uHr,"gptj"),uHr.forEach(t),sbo=r(X3e," \u2014 "),G$=n(X3e,"A",{href:!0});var bHr=s(G$);lbo=r(bHr,"GPTJForCausalLM"),bHr.forEach(t),ibo=r(X3e," (GPT-J model)"),X3e.forEach(t),dbo=i(q),Ru=n(q,"LI",{});var z3e=s(Ru);kae=n(z3e,"STRONG",{});var FHr=s(kae);cbo=r(FHr,"marian"),FHr.forEach(t),fbo=r(z3e," \u2014 "),O$=n(z3e,"A",{href:!0});var vHr=s(O$);mbo=r(vHr,"MarianForCausalLM"),vHr.forEach(t),gbo=r(z3e," (Marian model)"),z3e.forEach(t),hbo=i(q),Bu=n(q,"LI",{});var Q3e=s(Bu);Sae=n(Q3e,"STRONG",{});var THr=s(Sae);pbo=r(THr,"mbart"),THr.forEach(t),_bo=r(Q3e," \u2014 "),V$=n(Q3e,"A",{href:!0});var MHr=s(V$);ubo=r(MHr,"MBartForCausalLM"),MHr.forEach(t),bbo=r(Q3e," (mBART model)"),Q3e.forEach(t),Fbo=i(q),Pu=n(q,"LI",{});var W3e=s(Pu);Rae=n(W3e,"STRONG",{});var EHr=s(Rae);vbo=r(EHr,"megatron-bert"),EHr.forEach(t),Tbo=r(W3e," \u2014 "),X$=n(W3e,"A",{href:!0});var CHr=s(X$);Mbo=r(CHr,"MegatronBertForCausalLM"),CHr.forEach(t),Ebo=r(W3e," (MegatronBert model)"),W3e.forEach(t),Cbo=i(q),$u=n(q,"LI",{});var H3e=s($u);Bae=n(H3e,"STRONG",{});var wHr=s(Bae);wbo=r(wHr,"openai-gpt"),wHr.forEach(t),Abo=r(H3e," \u2014 "),z$=n(H3e,"A",{href:!0});var AHr=s(z$);ybo=r(AHr,"OpenAIGPTLMHeadModel"),AHr.forEach(t),Lbo=r(H3e," (OpenAI GPT model)"),H3e.forEach(t),xbo=i(q),Iu=n(q,"LI",{});var U3e=s(Iu);Pae=n(U3e,"STRONG",{});var yHr=s(Pae);kbo=r(yHr,"pegasus"),yHr.forEach(t),Sbo=r(U3e," \u2014 "),Q$=n(U3e,"A",{href:!0});var LHr=s(Q$);Rbo=r(LHr,"PegasusForCausalLM"),LHr.forEach(t),Bbo=r(U3e," (Pegasus model)"),U3e.forEach(t),Pbo=i(q),qu=n(q,"LI",{});var J3e=s(qu);$ae=n(J3e,"STRONG",{});var xHr=s($ae);$bo=r(xHr,"plbart"),xHr.forEach(t),Ibo=r(J3e," \u2014 "),W$=n(J3e,"A",{href:!0});var kHr=s(W$);qbo=r(kHr,"PLBartForCausalLM"),kHr.forEach(t),Nbo=r(J3e," (PLBart model)"),J3e.forEach(t),jbo=i(q),Nu=n(q,"LI",{});var Y3e=s(Nu);Iae=n(Y3e,"STRONG",{});var SHr=s(Iae);Dbo=r(SHr,"prophetnet"),SHr.forEach(t),Gbo=r(Y3e," \u2014 "),H$=n(Y3e,"A",{href:!0});var RHr=s(H$);Obo=r(RHr,"ProphetNetForCausalLM"),RHr.forEach(t),Vbo=r(Y3e," (ProphetNet model)"),Y3e.forEach(t),Xbo=i(q),ju=n(q,"LI",{});var K3e=s(ju);qae=n(K3e,"STRONG",{});var BHr=s(qae);zbo=r(BHr,"qdqbert"),BHr.forEach(t),Qbo=r(K3e," \u2014 "),U$=n(K3e,"A",{href:!0});var PHr=s(U$);Wbo=r(PHr,"QDQBertLMHeadModel"),PHr.forEach(t),Hbo=r(K3e," (QDQBert model)"),K3e.forEach(t),Ubo=i(q),Du=n(q,"LI",{});var Z3e=s(Du);Nae=n(Z3e,"STRONG",{});var $Hr=s(Nae);Jbo=r($Hr,"reformer"),$Hr.forEach(t),Ybo=r(Z3e," \u2014 "),J$=n(Z3e,"A",{href:!0});var IHr=s(J$);Kbo=r(IHr,"ReformerModelWithLMHead"),IHr.forEach(t),Zbo=r(Z3e," (Reformer model)"),Z3e.forEach(t),e2o=i(q),Gu=n(q,"LI",{});var ewe=s(Gu);jae=n(ewe,"STRONG",{});var qHr=s(jae);o2o=r(qHr,"rembert"),qHr.forEach(t),r2o=r(ewe," \u2014 "),Y$=n(ewe,"A",{href:!0});var NHr=s(Y$);t2o=r(NHr,"RemBertForCausalLM"),NHr.forEach(t),a2o=r(ewe," (RemBERT model)"),ewe.forEach(t),n2o=i(q),Ou=n(q,"LI",{});var owe=s(Ou);Dae=n(owe,"STRONG",{});var jHr=s(Dae);s2o=r(jHr,"roberta"),jHr.forEach(t),l2o=r(owe," \u2014 "),K$=n(owe,"A",{href:!0});var DHr=s(K$);i2o=r(DHr,"RobertaForCausalLM"),DHr.forEach(t),d2o=r(owe," (RoBERTa model)"),owe.forEach(t),c2o=i(q),Vu=n(q,"LI",{});var rwe=s(Vu);Gae=n(rwe,"STRONG",{});var GHr=s(Gae);f2o=r(GHr,"roformer"),GHr.forEach(t),m2o=r(rwe," \u2014 "),Z$=n(rwe,"A",{href:!0});var OHr=s(Z$);g2o=r(OHr,"RoFormerForCausalLM"),OHr.forEach(t),h2o=r(rwe," (RoFormer model)"),rwe.forEach(t),p2o=i(q),Xu=n(q,"LI",{});var twe=s(Xu);Oae=n(twe,"STRONG",{});var VHr=s(Oae);_2o=r(VHr,"speech_to_text_2"),VHr.forEach(t),u2o=r(twe," \u2014 "),eI=n(twe,"A",{href:!0});var XHr=s(eI);b2o=r(XHr,"Speech2Text2ForCausalLM"),XHr.forEach(t),F2o=r(twe," (Speech2Text2 model)"),twe.forEach(t),v2o=i(q),zu=n(q,"LI",{});var awe=s(zu);Vae=n(awe,"STRONG",{});var zHr=s(Vae);T2o=r(zHr,"transfo-xl"),zHr.forEach(t),M2o=r(awe," \u2014 "),oI=n(awe,"A",{href:!0});var QHr=s(oI);E2o=r(QHr,"TransfoXLLMHeadModel"),QHr.forEach(t),C2o=r(awe," (Transformer-XL model)"),awe.forEach(t),w2o=i(q),Qu=n(q,"LI",{});var nwe=s(Qu);Xae=n(nwe,"STRONG",{});var WHr=s(Xae);A2o=r(WHr,"trocr"),WHr.forEach(t),y2o=r(nwe," \u2014 "),rI=n(nwe,"A",{href:!0});var HHr=s(rI);L2o=r(HHr,"TrOCRForCausalLM"),HHr.forEach(t),x2o=r(nwe," (TrOCR model)"),nwe.forEach(t),k2o=i(q),Wu=n(q,"LI",{});var swe=s(Wu);zae=n(swe,"STRONG",{});var UHr=s(zae);S2o=r(UHr,"xglm"),UHr.forEach(t),R2o=r(swe," \u2014 "),tI=n(swe,"A",{href:!0});var JHr=s(tI);B2o=r(JHr,"XGLMForCausalLM"),JHr.forEach(t),P2o=r(swe," (XGLM model)"),swe.forEach(t),$2o=i(q),Hu=n(q,"LI",{});var lwe=s(Hu);Qae=n(lwe,"STRONG",{});var YHr=s(Qae);I2o=r(YHr,"xlm"),YHr.forEach(t),q2o=r(lwe," \u2014 "),aI=n(lwe,"A",{href:!0});var KHr=s(aI);N2o=r(KHr,"XLMWithLMHeadModel"),KHr.forEach(t),j2o=r(lwe," (XLM model)"),lwe.forEach(t),D2o=i(q),Uu=n(q,"LI",{});var iwe=s(Uu);Wae=n(iwe,"STRONG",{});var ZHr=s(Wae);G2o=r(ZHr,"xlm-prophetnet"),ZHr.forEach(t),O2o=r(iwe," \u2014 "),nI=n(iwe,"A",{href:!0});var eUr=s(nI);V2o=r(eUr,"XLMProphetNetForCausalLM"),eUr.forEach(t),X2o=r(iwe," (XLMProphetNet model)"),iwe.forEach(t),z2o=i(q),Ju=n(q,"LI",{});var dwe=s(Ju);Hae=n(dwe,"STRONG",{});var oUr=s(Hae);Q2o=r(oUr,"xlm-roberta"),oUr.forEach(t),W2o=r(dwe," \u2014 "),sI=n(dwe,"A",{href:!0});var rUr=s(sI);H2o=r(rUr,"XLMRobertaForCausalLM"),rUr.forEach(t),U2o=r(dwe," (XLM-RoBERTa model)"),dwe.forEach(t),J2o=i(q),Yu=n(q,"LI",{});var cwe=s(Yu);Uae=n(cwe,"STRONG",{});var tUr=s(Uae);Y2o=r(tUr,"xlm-roberta-xl"),tUr.forEach(t),K2o=r(cwe," \u2014 "),lI=n(cwe,"A",{href:!0});var aUr=s(lI);Z2o=r(aUr,"XLMRobertaXLForCausalLM"),aUr.forEach(t),eFo=r(cwe," (XLM-RoBERTa-XL model)"),cwe.forEach(t),oFo=i(q),Ku=n(q,"LI",{});var fwe=s(Ku);Jae=n(fwe,"STRONG",{});var nUr=s(Jae);rFo=r(nUr,"xlnet"),nUr.forEach(t),tFo=r(fwe," \u2014 "),iI=n(fwe,"A",{href:!0});var sUr=s(iI);aFo=r(sUr,"XLNetLMHeadModel"),sUr.forEach(t),nFo=r(fwe," (XLNet model)"),fwe.forEach(t),q.forEach(t),sFo=i(Ot),Zu=n(Ot,"P",{});var mwe=s(Zu);lFo=r(mwe,"The model is set in evaluation mode by default using "),Yae=n(mwe,"CODE",{});var lUr=s(Yae);iFo=r(lUr,"model.eval()"),lUr.forEach(t),dFo=r(mwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kae=n(mwe,"CODE",{});var iUr=s(Kae);cFo=r(iUr,"model.train()"),iUr.forEach(t),mwe.forEach(t),fFo=i(Ot),Zae=n(Ot,"P",{});var dUr=s(Zae);mFo=r(dUr,"Examples:"),dUr.forEach(t),gFo=i(Ot),m(pw.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),tRe=i(c),sd=n(c,"H2",{class:!0});var mPe=s(sd);e1=n(mPe,"A",{id:!0,class:!0,href:!0});var cUr=s(e1);ene=n(cUr,"SPAN",{});var fUr=s(ene);m(_w.$$.fragment,fUr),fUr.forEach(t),cUr.forEach(t),hFo=i(mPe),one=n(mPe,"SPAN",{});var mUr=s(one);pFo=r(mUr,"AutoModelForMaskedLM"),mUr.forEach(t),mPe.forEach(t),aRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(uw.$$.fragment,Zs),_Fo=i(Zs),ld=n(Zs,"P",{});var rU=s(ld);uFo=r(rU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dI=n(rU,"A",{href:!0});var gUr=s(dI);bFo=r(gUr,"from_pretrained()"),gUr.forEach(t),FFo=r(rU," class method or the "),cI=n(rU,"A",{href:!0});var hUr=s(cI);vFo=r(hUr,"from_config()"),hUr.forEach(t),TFo=r(rU,` class
method.`),rU.forEach(t),MFo=i(Zs),bw=n(Zs,"P",{});var gPe=s(bw);EFo=r(gPe,"This class cannot be instantiated directly using "),rne=n(gPe,"CODE",{});var pUr=s(rne);CFo=r(pUr,"__init__()"),pUr.forEach(t),wFo=r(gPe," (throws an error)."),gPe.forEach(t),AFo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m(Fw.$$.fragment,el),yFo=i(el),tne=n(el,"P",{});var _Ur=s(tne);LFo=r(_Ur,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Ur.forEach(t),xFo=i(el),id=n(el,"P",{});var tU=s(id);kFo=r(tU,`Note:
Loading a model from its configuration file does `),ane=n(tU,"STRONG",{});var uUr=s(ane);SFo=r(uUr,"not"),uUr.forEach(t),RFo=r(tU,` load the model weights. It only affects the
model\u2019s configuration. Use `),fI=n(tU,"A",{href:!0});var bUr=s(fI);BFo=r(bUr,"from_pretrained()"),bUr.forEach(t),PFo=r(tU," to load the model weights."),tU.forEach(t),$Fo=i(el),nne=n(el,"P",{});var FUr=s(nne);IFo=r(FUr,"Examples:"),FUr.forEach(t),qFo=i(el),m(vw.$$.fragment,el),el.forEach(t),NFo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(Tw.$$.fragment,Vt),jFo=i(Vt),sne=n(Vt,"P",{});var vUr=s(sne);DFo=r(vUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vUr.forEach(t),GFo=i(Vt),Wa=n(Vt,"P",{});var MC=s(Wa);OFo=r(MC,"The model class to instantiate is selected based on the "),lne=n(MC,"CODE",{});var TUr=s(lne);VFo=r(TUr,"model_type"),TUr.forEach(t),XFo=r(MC,` property of the config object (either
passed as an argument or loaded from `),ine=n(MC,"CODE",{});var MUr=s(ine);zFo=r(MUr,"pretrained_model_name_or_path"),MUr.forEach(t),QFo=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dne=n(MC,"CODE",{});var EUr=s(dne);WFo=r(EUr,"pretrained_model_name_or_path"),EUr.forEach(t),HFo=r(MC,":"),MC.forEach(t),UFo=i(Vt),I=n(Vt,"UL",{});var N=s(I);o1=n(N,"LI",{});var gwe=s(o1);cne=n(gwe,"STRONG",{});var CUr=s(cne);JFo=r(CUr,"albert"),CUr.forEach(t),YFo=r(gwe," \u2014 "),mI=n(gwe,"A",{href:!0});var wUr=s(mI);KFo=r(wUr,"AlbertForMaskedLM"),wUr.forEach(t),ZFo=r(gwe," (ALBERT model)"),gwe.forEach(t),evo=i(N),r1=n(N,"LI",{});var hwe=s(r1);fne=n(hwe,"STRONG",{});var AUr=s(fne);ovo=r(AUr,"bart"),AUr.forEach(t),rvo=r(hwe," \u2014 "),gI=n(hwe,"A",{href:!0});var yUr=s(gI);tvo=r(yUr,"BartForConditionalGeneration"),yUr.forEach(t),avo=r(hwe," (BART model)"),hwe.forEach(t),nvo=i(N),t1=n(N,"LI",{});var pwe=s(t1);mne=n(pwe,"STRONG",{});var LUr=s(mne);svo=r(LUr,"bert"),LUr.forEach(t),lvo=r(pwe," \u2014 "),hI=n(pwe,"A",{href:!0});var xUr=s(hI);ivo=r(xUr,"BertForMaskedLM"),xUr.forEach(t),dvo=r(pwe," (BERT model)"),pwe.forEach(t),cvo=i(N),a1=n(N,"LI",{});var _we=s(a1);gne=n(_we,"STRONG",{});var kUr=s(gne);fvo=r(kUr,"big_bird"),kUr.forEach(t),mvo=r(_we," \u2014 "),pI=n(_we,"A",{href:!0});var SUr=s(pI);gvo=r(SUr,"BigBirdForMaskedLM"),SUr.forEach(t),hvo=r(_we," (BigBird model)"),_we.forEach(t),pvo=i(N),n1=n(N,"LI",{});var uwe=s(n1);hne=n(uwe,"STRONG",{});var RUr=s(hne);_vo=r(RUr,"camembert"),RUr.forEach(t),uvo=r(uwe," \u2014 "),_I=n(uwe,"A",{href:!0});var BUr=s(_I);bvo=r(BUr,"CamembertForMaskedLM"),BUr.forEach(t),Fvo=r(uwe," (CamemBERT model)"),uwe.forEach(t),vvo=i(N),s1=n(N,"LI",{});var bwe=s(s1);pne=n(bwe,"STRONG",{});var PUr=s(pne);Tvo=r(PUr,"convbert"),PUr.forEach(t),Mvo=r(bwe," \u2014 "),uI=n(bwe,"A",{href:!0});var $Ur=s(uI);Evo=r($Ur,"ConvBertForMaskedLM"),$Ur.forEach(t),Cvo=r(bwe," (ConvBERT model)"),bwe.forEach(t),wvo=i(N),l1=n(N,"LI",{});var Fwe=s(l1);_ne=n(Fwe,"STRONG",{});var IUr=s(_ne);Avo=r(IUr,"data2vec-text"),IUr.forEach(t),yvo=r(Fwe," \u2014 "),bI=n(Fwe,"A",{href:!0});var qUr=s(bI);Lvo=r(qUr,"Data2VecTextForMaskedLM"),qUr.forEach(t),xvo=r(Fwe," (Data2VecText model)"),Fwe.forEach(t),kvo=i(N),i1=n(N,"LI",{});var vwe=s(i1);une=n(vwe,"STRONG",{});var NUr=s(une);Svo=r(NUr,"deberta"),NUr.forEach(t),Rvo=r(vwe," \u2014 "),FI=n(vwe,"A",{href:!0});var jUr=s(FI);Bvo=r(jUr,"DebertaForMaskedLM"),jUr.forEach(t),Pvo=r(vwe," (DeBERTa model)"),vwe.forEach(t),$vo=i(N),d1=n(N,"LI",{});var Twe=s(d1);bne=n(Twe,"STRONG",{});var DUr=s(bne);Ivo=r(DUr,"deberta-v2"),DUr.forEach(t),qvo=r(Twe," \u2014 "),vI=n(Twe,"A",{href:!0});var GUr=s(vI);Nvo=r(GUr,"DebertaV2ForMaskedLM"),GUr.forEach(t),jvo=r(Twe," (DeBERTa-v2 model)"),Twe.forEach(t),Dvo=i(N),c1=n(N,"LI",{});var Mwe=s(c1);Fne=n(Mwe,"STRONG",{});var OUr=s(Fne);Gvo=r(OUr,"distilbert"),OUr.forEach(t),Ovo=r(Mwe," \u2014 "),TI=n(Mwe,"A",{href:!0});var VUr=s(TI);Vvo=r(VUr,"DistilBertForMaskedLM"),VUr.forEach(t),Xvo=r(Mwe," (DistilBERT model)"),Mwe.forEach(t),zvo=i(N),f1=n(N,"LI",{});var Ewe=s(f1);vne=n(Ewe,"STRONG",{});var XUr=s(vne);Qvo=r(XUr,"electra"),XUr.forEach(t),Wvo=r(Ewe," \u2014 "),MI=n(Ewe,"A",{href:!0});var zUr=s(MI);Hvo=r(zUr,"ElectraForMaskedLM"),zUr.forEach(t),Uvo=r(Ewe," (ELECTRA model)"),Ewe.forEach(t),Jvo=i(N),m1=n(N,"LI",{});var Cwe=s(m1);Tne=n(Cwe,"STRONG",{});var QUr=s(Tne);Yvo=r(QUr,"flaubert"),QUr.forEach(t),Kvo=r(Cwe," \u2014 "),EI=n(Cwe,"A",{href:!0});var WUr=s(EI);Zvo=r(WUr,"FlaubertWithLMHeadModel"),WUr.forEach(t),e6o=r(Cwe," (FlauBERT model)"),Cwe.forEach(t),o6o=i(N),g1=n(N,"LI",{});var wwe=s(g1);Mne=n(wwe,"STRONG",{});var HUr=s(Mne);r6o=r(HUr,"fnet"),HUr.forEach(t),t6o=r(wwe," \u2014 "),CI=n(wwe,"A",{href:!0});var UUr=s(CI);a6o=r(UUr,"FNetForMaskedLM"),UUr.forEach(t),n6o=r(wwe," (FNet model)"),wwe.forEach(t),s6o=i(N),h1=n(N,"LI",{});var Awe=s(h1);Ene=n(Awe,"STRONG",{});var JUr=s(Ene);l6o=r(JUr,"funnel"),JUr.forEach(t),i6o=r(Awe," \u2014 "),wI=n(Awe,"A",{href:!0});var YUr=s(wI);d6o=r(YUr,"FunnelForMaskedLM"),YUr.forEach(t),c6o=r(Awe," (Funnel Transformer model)"),Awe.forEach(t),f6o=i(N),p1=n(N,"LI",{});var ywe=s(p1);Cne=n(ywe,"STRONG",{});var KUr=s(Cne);m6o=r(KUr,"ibert"),KUr.forEach(t),g6o=r(ywe," \u2014 "),AI=n(ywe,"A",{href:!0});var ZUr=s(AI);h6o=r(ZUr,"IBertForMaskedLM"),ZUr.forEach(t),p6o=r(ywe," (I-BERT model)"),ywe.forEach(t),_6o=i(N),_1=n(N,"LI",{});var Lwe=s(_1);wne=n(Lwe,"STRONG",{});var eJr=s(wne);u6o=r(eJr,"layoutlm"),eJr.forEach(t),b6o=r(Lwe," \u2014 "),yI=n(Lwe,"A",{href:!0});var oJr=s(yI);F6o=r(oJr,"LayoutLMForMaskedLM"),oJr.forEach(t),v6o=r(Lwe," (LayoutLM model)"),Lwe.forEach(t),T6o=i(N),u1=n(N,"LI",{});var xwe=s(u1);Ane=n(xwe,"STRONG",{});var rJr=s(Ane);M6o=r(rJr,"longformer"),rJr.forEach(t),E6o=r(xwe," \u2014 "),LI=n(xwe,"A",{href:!0});var tJr=s(LI);C6o=r(tJr,"LongformerForMaskedLM"),tJr.forEach(t),w6o=r(xwe," (Longformer model)"),xwe.forEach(t),A6o=i(N),b1=n(N,"LI",{});var kwe=s(b1);yne=n(kwe,"STRONG",{});var aJr=s(yne);y6o=r(aJr,"mbart"),aJr.forEach(t),L6o=r(kwe," \u2014 "),xI=n(kwe,"A",{href:!0});var nJr=s(xI);x6o=r(nJr,"MBartForConditionalGeneration"),nJr.forEach(t),k6o=r(kwe," (mBART model)"),kwe.forEach(t),S6o=i(N),F1=n(N,"LI",{});var Swe=s(F1);Lne=n(Swe,"STRONG",{});var sJr=s(Lne);R6o=r(sJr,"megatron-bert"),sJr.forEach(t),B6o=r(Swe," \u2014 "),kI=n(Swe,"A",{href:!0});var lJr=s(kI);P6o=r(lJr,"MegatronBertForMaskedLM"),lJr.forEach(t),$6o=r(Swe," (MegatronBert model)"),Swe.forEach(t),I6o=i(N),v1=n(N,"LI",{});var Rwe=s(v1);xne=n(Rwe,"STRONG",{});var iJr=s(xne);q6o=r(iJr,"mobilebert"),iJr.forEach(t),N6o=r(Rwe," \u2014 "),SI=n(Rwe,"A",{href:!0});var dJr=s(SI);j6o=r(dJr,"MobileBertForMaskedLM"),dJr.forEach(t),D6o=r(Rwe," (MobileBERT model)"),Rwe.forEach(t),G6o=i(N),T1=n(N,"LI",{});var Bwe=s(T1);kne=n(Bwe,"STRONG",{});var cJr=s(kne);O6o=r(cJr,"mpnet"),cJr.forEach(t),V6o=r(Bwe," \u2014 "),RI=n(Bwe,"A",{href:!0});var fJr=s(RI);X6o=r(fJr,"MPNetForMaskedLM"),fJr.forEach(t),z6o=r(Bwe," (MPNet model)"),Bwe.forEach(t),Q6o=i(N),M1=n(N,"LI",{});var Pwe=s(M1);Sne=n(Pwe,"STRONG",{});var mJr=s(Sne);W6o=r(mJr,"nystromformer"),mJr.forEach(t),H6o=r(Pwe," \u2014 "),BI=n(Pwe,"A",{href:!0});var gJr=s(BI);U6o=r(gJr,"NystromformerForMaskedLM"),gJr.forEach(t),J6o=r(Pwe," (Nystromformer model)"),Pwe.forEach(t),Y6o=i(N),E1=n(N,"LI",{});var $we=s(E1);Rne=n($we,"STRONG",{});var hJr=s(Rne);K6o=r(hJr,"perceiver"),hJr.forEach(t),Z6o=r($we," \u2014 "),PI=n($we,"A",{href:!0});var pJr=s(PI);eTo=r(pJr,"PerceiverForMaskedLM"),pJr.forEach(t),oTo=r($we," (Perceiver model)"),$we.forEach(t),rTo=i(N),C1=n(N,"LI",{});var Iwe=s(C1);Bne=n(Iwe,"STRONG",{});var _Jr=s(Bne);tTo=r(_Jr,"qdqbert"),_Jr.forEach(t),aTo=r(Iwe," \u2014 "),$I=n(Iwe,"A",{href:!0});var uJr=s($I);nTo=r(uJr,"QDQBertForMaskedLM"),uJr.forEach(t),sTo=r(Iwe," (QDQBert model)"),Iwe.forEach(t),lTo=i(N),w1=n(N,"LI",{});var qwe=s(w1);Pne=n(qwe,"STRONG",{});var bJr=s(Pne);iTo=r(bJr,"reformer"),bJr.forEach(t),dTo=r(qwe," \u2014 "),II=n(qwe,"A",{href:!0});var FJr=s(II);cTo=r(FJr,"ReformerForMaskedLM"),FJr.forEach(t),fTo=r(qwe," (Reformer model)"),qwe.forEach(t),mTo=i(N),A1=n(N,"LI",{});var Nwe=s(A1);$ne=n(Nwe,"STRONG",{});var vJr=s($ne);gTo=r(vJr,"rembert"),vJr.forEach(t),hTo=r(Nwe," \u2014 "),qI=n(Nwe,"A",{href:!0});var TJr=s(qI);pTo=r(TJr,"RemBertForMaskedLM"),TJr.forEach(t),_To=r(Nwe," (RemBERT model)"),Nwe.forEach(t),uTo=i(N),y1=n(N,"LI",{});var jwe=s(y1);Ine=n(jwe,"STRONG",{});var MJr=s(Ine);bTo=r(MJr,"roberta"),MJr.forEach(t),FTo=r(jwe," \u2014 "),NI=n(jwe,"A",{href:!0});var EJr=s(NI);vTo=r(EJr,"RobertaForMaskedLM"),EJr.forEach(t),TTo=r(jwe," (RoBERTa model)"),jwe.forEach(t),MTo=i(N),L1=n(N,"LI",{});var Dwe=s(L1);qne=n(Dwe,"STRONG",{});var CJr=s(qne);ETo=r(CJr,"roformer"),CJr.forEach(t),CTo=r(Dwe," \u2014 "),jI=n(Dwe,"A",{href:!0});var wJr=s(jI);wTo=r(wJr,"RoFormerForMaskedLM"),wJr.forEach(t),ATo=r(Dwe," (RoFormer model)"),Dwe.forEach(t),yTo=i(N),x1=n(N,"LI",{});var Gwe=s(x1);Nne=n(Gwe,"STRONG",{});var AJr=s(Nne);LTo=r(AJr,"squeezebert"),AJr.forEach(t),xTo=r(Gwe," \u2014 "),DI=n(Gwe,"A",{href:!0});var yJr=s(DI);kTo=r(yJr,"SqueezeBertForMaskedLM"),yJr.forEach(t),STo=r(Gwe," (SqueezeBERT model)"),Gwe.forEach(t),RTo=i(N),k1=n(N,"LI",{});var Owe=s(k1);jne=n(Owe,"STRONG",{});var LJr=s(jne);BTo=r(LJr,"tapas"),LJr.forEach(t),PTo=r(Owe," \u2014 "),GI=n(Owe,"A",{href:!0});var xJr=s(GI);$To=r(xJr,"TapasForMaskedLM"),xJr.forEach(t),ITo=r(Owe," (TAPAS model)"),Owe.forEach(t),qTo=i(N),S1=n(N,"LI",{});var Vwe=s(S1);Dne=n(Vwe,"STRONG",{});var kJr=s(Dne);NTo=r(kJr,"wav2vec2"),kJr.forEach(t),jTo=r(Vwe," \u2014 "),Gne=n(Vwe,"CODE",{});var SJr=s(Gne);DTo=r(SJr,"Wav2Vec2ForMaskedLM"),SJr.forEach(t),GTo=r(Vwe,"(Wav2Vec2 model)"),Vwe.forEach(t),OTo=i(N),R1=n(N,"LI",{});var Xwe=s(R1);One=n(Xwe,"STRONG",{});var RJr=s(One);VTo=r(RJr,"xlm"),RJr.forEach(t),XTo=r(Xwe," \u2014 "),OI=n(Xwe,"A",{href:!0});var BJr=s(OI);zTo=r(BJr,"XLMWithLMHeadModel"),BJr.forEach(t),QTo=r(Xwe," (XLM model)"),Xwe.forEach(t),WTo=i(N),B1=n(N,"LI",{});var zwe=s(B1);Vne=n(zwe,"STRONG",{});var PJr=s(Vne);HTo=r(PJr,"xlm-roberta"),PJr.forEach(t),UTo=r(zwe," \u2014 "),VI=n(zwe,"A",{href:!0});var $Jr=s(VI);JTo=r($Jr,"XLMRobertaForMaskedLM"),$Jr.forEach(t),YTo=r(zwe," (XLM-RoBERTa model)"),zwe.forEach(t),KTo=i(N),P1=n(N,"LI",{});var Qwe=s(P1);Xne=n(Qwe,"STRONG",{});var IJr=s(Xne);ZTo=r(IJr,"xlm-roberta-xl"),IJr.forEach(t),eMo=r(Qwe," \u2014 "),XI=n(Qwe,"A",{href:!0});var qJr=s(XI);oMo=r(qJr,"XLMRobertaXLForMaskedLM"),qJr.forEach(t),rMo=r(Qwe," (XLM-RoBERTa-XL model)"),Qwe.forEach(t),tMo=i(N),$1=n(N,"LI",{});var Wwe=s($1);zne=n(Wwe,"STRONG",{});var NJr=s(zne);aMo=r(NJr,"yoso"),NJr.forEach(t),nMo=r(Wwe," \u2014 "),zI=n(Wwe,"A",{href:!0});var jJr=s(zI);sMo=r(jJr,"YosoForMaskedLM"),jJr.forEach(t),lMo=r(Wwe," (YOSO model)"),Wwe.forEach(t),N.forEach(t),iMo=i(Vt),I1=n(Vt,"P",{});var Hwe=s(I1);dMo=r(Hwe,"The model is set in evaluation mode by default using "),Qne=n(Hwe,"CODE",{});var DJr=s(Qne);cMo=r(DJr,"model.eval()"),DJr.forEach(t),fMo=r(Hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wne=n(Hwe,"CODE",{});var GJr=s(Wne);mMo=r(GJr,"model.train()"),GJr.forEach(t),Hwe.forEach(t),gMo=i(Vt),Hne=n(Vt,"P",{});var OJr=s(Hne);hMo=r(OJr,"Examples:"),OJr.forEach(t),pMo=i(Vt),m(Mw.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),nRe=i(c),dd=n(c,"H2",{class:!0});var hPe=s(dd);q1=n(hPe,"A",{id:!0,class:!0,href:!0});var VJr=s(q1);Une=n(VJr,"SPAN",{});var XJr=s(Une);m(Ew.$$.fragment,XJr),XJr.forEach(t),VJr.forEach(t),_Mo=i(hPe),Jne=n(hPe,"SPAN",{});var zJr=s(Jne);uMo=r(zJr,"AutoModelForSeq2SeqLM"),zJr.forEach(t),hPe.forEach(t),sRe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(Cw.$$.fragment,ol),bMo=i(ol),cd=n(ol,"P",{});var aU=s(cd);FMo=r(aU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QI=n(aU,"A",{href:!0});var QJr=s(QI);vMo=r(QJr,"from_pretrained()"),QJr.forEach(t),TMo=r(aU," class method or the "),WI=n(aU,"A",{href:!0});var WJr=s(WI);MMo=r(WJr,"from_config()"),WJr.forEach(t),EMo=r(aU,` class
method.`),aU.forEach(t),CMo=i(ol),ww=n(ol,"P",{});var pPe=s(ww);wMo=r(pPe,"This class cannot be instantiated directly using "),Yne=n(pPe,"CODE",{});var HJr=s(Yne);AMo=r(HJr,"__init__()"),HJr.forEach(t),yMo=r(pPe," (throws an error)."),pPe.forEach(t),LMo=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(Aw.$$.fragment,rl),xMo=i(rl),Kne=n(rl,"P",{});var UJr=s(Kne);kMo=r(UJr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),UJr.forEach(t),SMo=i(rl),fd=n(rl,"P",{});var nU=s(fd);RMo=r(nU,`Note:
Loading a model from its configuration file does `),Zne=n(nU,"STRONG",{});var JJr=s(Zne);BMo=r(JJr,"not"),JJr.forEach(t),PMo=r(nU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HI=n(nU,"A",{href:!0});var YJr=s(HI);$Mo=r(YJr,"from_pretrained()"),YJr.forEach(t),IMo=r(nU," to load the model weights."),nU.forEach(t),qMo=i(rl),ese=n(rl,"P",{});var KJr=s(ese);NMo=r(KJr,"Examples:"),KJr.forEach(t),jMo=i(rl),m(yw.$$.fragment,rl),rl.forEach(t),DMo=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(Lw.$$.fragment,Xt),GMo=i(Xt),ose=n(Xt,"P",{});var ZJr=s(ose);OMo=r(ZJr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ZJr.forEach(t),VMo=i(Xt),Ha=n(Xt,"P",{});var EC=s(Ha);XMo=r(EC,"The model class to instantiate is selected based on the "),rse=n(EC,"CODE",{});var eYr=s(rse);zMo=r(eYr,"model_type"),eYr.forEach(t),QMo=r(EC,` property of the config object (either
passed as an argument or loaded from `),tse=n(EC,"CODE",{});var oYr=s(tse);WMo=r(oYr,"pretrained_model_name_or_path"),oYr.forEach(t),HMo=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ase=n(EC,"CODE",{});var rYr=s(ase);UMo=r(rYr,"pretrained_model_name_or_path"),rYr.forEach(t),JMo=r(EC,":"),EC.forEach(t),YMo=i(Xt),se=n(Xt,"UL",{});var ie=s(se);N1=n(ie,"LI",{});var Uwe=s(N1);nse=n(Uwe,"STRONG",{});var tYr=s(nse);KMo=r(tYr,"bart"),tYr.forEach(t),ZMo=r(Uwe," \u2014 "),UI=n(Uwe,"A",{href:!0});var aYr=s(UI);e4o=r(aYr,"BartForConditionalGeneration"),aYr.forEach(t),o4o=r(Uwe," (BART model)"),Uwe.forEach(t),r4o=i(ie),j1=n(ie,"LI",{});var Jwe=s(j1);sse=n(Jwe,"STRONG",{});var nYr=s(sse);t4o=r(nYr,"bigbird_pegasus"),nYr.forEach(t),a4o=r(Jwe," \u2014 "),JI=n(Jwe,"A",{href:!0});var sYr=s(JI);n4o=r(sYr,"BigBirdPegasusForConditionalGeneration"),sYr.forEach(t),s4o=r(Jwe," (BigBirdPegasus model)"),Jwe.forEach(t),l4o=i(ie),D1=n(ie,"LI",{});var Ywe=s(D1);lse=n(Ywe,"STRONG",{});var lYr=s(lse);i4o=r(lYr,"blenderbot"),lYr.forEach(t),d4o=r(Ywe," \u2014 "),YI=n(Ywe,"A",{href:!0});var iYr=s(YI);c4o=r(iYr,"BlenderbotForConditionalGeneration"),iYr.forEach(t),f4o=r(Ywe," (Blenderbot model)"),Ywe.forEach(t),m4o=i(ie),G1=n(ie,"LI",{});var Kwe=s(G1);ise=n(Kwe,"STRONG",{});var dYr=s(ise);g4o=r(dYr,"blenderbot-small"),dYr.forEach(t),h4o=r(Kwe," \u2014 "),KI=n(Kwe,"A",{href:!0});var cYr=s(KI);p4o=r(cYr,"BlenderbotSmallForConditionalGeneration"),cYr.forEach(t),_4o=r(Kwe," (BlenderbotSmall model)"),Kwe.forEach(t),u4o=i(ie),O1=n(ie,"LI",{});var Zwe=s(O1);dse=n(Zwe,"STRONG",{});var fYr=s(dse);b4o=r(fYr,"encoder-decoder"),fYr.forEach(t),F4o=r(Zwe," \u2014 "),ZI=n(Zwe,"A",{href:!0});var mYr=s(ZI);v4o=r(mYr,"EncoderDecoderModel"),mYr.forEach(t),T4o=r(Zwe," (Encoder decoder model)"),Zwe.forEach(t),M4o=i(ie),V1=n(ie,"LI",{});var eAe=s(V1);cse=n(eAe,"STRONG",{});var gYr=s(cse);E4o=r(gYr,"fsmt"),gYr.forEach(t),C4o=r(eAe," \u2014 "),eq=n(eAe,"A",{href:!0});var hYr=s(eq);w4o=r(hYr,"FSMTForConditionalGeneration"),hYr.forEach(t),A4o=r(eAe," (FairSeq Machine-Translation model)"),eAe.forEach(t),y4o=i(ie),X1=n(ie,"LI",{});var oAe=s(X1);fse=n(oAe,"STRONG",{});var pYr=s(fse);L4o=r(pYr,"led"),pYr.forEach(t),x4o=r(oAe," \u2014 "),oq=n(oAe,"A",{href:!0});var _Yr=s(oq);k4o=r(_Yr,"LEDForConditionalGeneration"),_Yr.forEach(t),S4o=r(oAe," (LED model)"),oAe.forEach(t),R4o=i(ie),z1=n(ie,"LI",{});var rAe=s(z1);mse=n(rAe,"STRONG",{});var uYr=s(mse);B4o=r(uYr,"m2m_100"),uYr.forEach(t),P4o=r(rAe," \u2014 "),rq=n(rAe,"A",{href:!0});var bYr=s(rq);$4o=r(bYr,"M2M100ForConditionalGeneration"),bYr.forEach(t),I4o=r(rAe," (M2M100 model)"),rAe.forEach(t),q4o=i(ie),Q1=n(ie,"LI",{});var tAe=s(Q1);gse=n(tAe,"STRONG",{});var FYr=s(gse);N4o=r(FYr,"marian"),FYr.forEach(t),j4o=r(tAe," \u2014 "),tq=n(tAe,"A",{href:!0});var vYr=s(tq);D4o=r(vYr,"MarianMTModel"),vYr.forEach(t),G4o=r(tAe," (Marian model)"),tAe.forEach(t),O4o=i(ie),W1=n(ie,"LI",{});var aAe=s(W1);hse=n(aAe,"STRONG",{});var TYr=s(hse);V4o=r(TYr,"mbart"),TYr.forEach(t),X4o=r(aAe," \u2014 "),aq=n(aAe,"A",{href:!0});var MYr=s(aq);z4o=r(MYr,"MBartForConditionalGeneration"),MYr.forEach(t),Q4o=r(aAe," (mBART model)"),aAe.forEach(t),W4o=i(ie),H1=n(ie,"LI",{});var nAe=s(H1);pse=n(nAe,"STRONG",{});var EYr=s(pse);H4o=r(EYr,"mt5"),EYr.forEach(t),U4o=r(nAe," \u2014 "),nq=n(nAe,"A",{href:!0});var CYr=s(nq);J4o=r(CYr,"MT5ForConditionalGeneration"),CYr.forEach(t),Y4o=r(nAe," (mT5 model)"),nAe.forEach(t),K4o=i(ie),U1=n(ie,"LI",{});var sAe=s(U1);_se=n(sAe,"STRONG",{});var wYr=s(_se);Z4o=r(wYr,"pegasus"),wYr.forEach(t),eEo=r(sAe," \u2014 "),sq=n(sAe,"A",{href:!0});var AYr=s(sq);oEo=r(AYr,"PegasusForConditionalGeneration"),AYr.forEach(t),rEo=r(sAe," (Pegasus model)"),sAe.forEach(t),tEo=i(ie),J1=n(ie,"LI",{});var lAe=s(J1);use=n(lAe,"STRONG",{});var yYr=s(use);aEo=r(yYr,"plbart"),yYr.forEach(t),nEo=r(lAe," \u2014 "),lq=n(lAe,"A",{href:!0});var LYr=s(lq);sEo=r(LYr,"PLBartForConditionalGeneration"),LYr.forEach(t),lEo=r(lAe," (PLBart model)"),lAe.forEach(t),iEo=i(ie),Y1=n(ie,"LI",{});var iAe=s(Y1);bse=n(iAe,"STRONG",{});var xYr=s(bse);dEo=r(xYr,"prophetnet"),xYr.forEach(t),cEo=r(iAe," \u2014 "),iq=n(iAe,"A",{href:!0});var kYr=s(iq);fEo=r(kYr,"ProphetNetForConditionalGeneration"),kYr.forEach(t),mEo=r(iAe," (ProphetNet model)"),iAe.forEach(t),gEo=i(ie),K1=n(ie,"LI",{});var dAe=s(K1);Fse=n(dAe,"STRONG",{});var SYr=s(Fse);hEo=r(SYr,"t5"),SYr.forEach(t),pEo=r(dAe," \u2014 "),dq=n(dAe,"A",{href:!0});var RYr=s(dq);_Eo=r(RYr,"T5ForConditionalGeneration"),RYr.forEach(t),uEo=r(dAe," (T5 model)"),dAe.forEach(t),bEo=i(ie),Z1=n(ie,"LI",{});var cAe=s(Z1);vse=n(cAe,"STRONG",{});var BYr=s(vse);FEo=r(BYr,"xlm-prophetnet"),BYr.forEach(t),vEo=r(cAe," \u2014 "),cq=n(cAe,"A",{href:!0});var PYr=s(cq);TEo=r(PYr,"XLMProphetNetForConditionalGeneration"),PYr.forEach(t),MEo=r(cAe," (XLMProphetNet model)"),cAe.forEach(t),ie.forEach(t),EEo=i(Xt),e5=n(Xt,"P",{});var fAe=s(e5);CEo=r(fAe,"The model is set in evaluation mode by default using "),Tse=n(fAe,"CODE",{});var $Yr=s(Tse);wEo=r($Yr,"model.eval()"),$Yr.forEach(t),AEo=r(fAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=n(fAe,"CODE",{});var IYr=s(Mse);yEo=r(IYr,"model.train()"),IYr.forEach(t),fAe.forEach(t),LEo=i(Xt),Ese=n(Xt,"P",{});var qYr=s(Ese);xEo=r(qYr,"Examples:"),qYr.forEach(t),kEo=i(Xt),m(xw.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),lRe=i(c),md=n(c,"H2",{class:!0});var _Pe=s(md);o5=n(_Pe,"A",{id:!0,class:!0,href:!0});var NYr=s(o5);Cse=n(NYr,"SPAN",{});var jYr=s(Cse);m(kw.$$.fragment,jYr),jYr.forEach(t),NYr.forEach(t),SEo=i(_Pe),wse=n(_Pe,"SPAN",{});var DYr=s(wse);REo=r(DYr,"AutoModelForSequenceClassification"),DYr.forEach(t),_Pe.forEach(t),iRe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(Sw.$$.fragment,tl),BEo=i(tl),gd=n(tl,"P",{});var sU=s(gd);PEo=r(sU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fq=n(sU,"A",{href:!0});var GYr=s(fq);$Eo=r(GYr,"from_pretrained()"),GYr.forEach(t),IEo=r(sU," class method or the "),mq=n(sU,"A",{href:!0});var OYr=s(mq);qEo=r(OYr,"from_config()"),OYr.forEach(t),NEo=r(sU,` class
method.`),sU.forEach(t),jEo=i(tl),Rw=n(tl,"P",{});var uPe=s(Rw);DEo=r(uPe,"This class cannot be instantiated directly using "),Ase=n(uPe,"CODE",{});var VYr=s(Ase);GEo=r(VYr,"__init__()"),VYr.forEach(t),OEo=r(uPe," (throws an error)."),uPe.forEach(t),VEo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(Bw.$$.fragment,al),XEo=i(al),yse=n(al,"P",{});var XYr=s(yse);zEo=r(XYr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XYr.forEach(t),QEo=i(al),hd=n(al,"P",{});var lU=s(hd);WEo=r(lU,`Note:
Loading a model from its configuration file does `),Lse=n(lU,"STRONG",{});var zYr=s(Lse);HEo=r(zYr,"not"),zYr.forEach(t),UEo=r(lU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=n(lU,"A",{href:!0});var QYr=s(gq);JEo=r(QYr,"from_pretrained()"),QYr.forEach(t),YEo=r(lU," to load the model weights."),lU.forEach(t),KEo=i(al),xse=n(al,"P",{});var WYr=s(xse);ZEo=r(WYr,"Examples:"),WYr.forEach(t),eCo=i(al),m(Pw.$$.fragment,al),al.forEach(t),oCo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m($w.$$.fragment,zt),rCo=i(zt),kse=n(zt,"P",{});var HYr=s(kse);tCo=r(HYr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),HYr.forEach(t),aCo=i(zt),Ua=n(zt,"P",{});var CC=s(Ua);nCo=r(CC,"The model class to instantiate is selected based on the "),Sse=n(CC,"CODE",{});var UYr=s(Sse);sCo=r(UYr,"model_type"),UYr.forEach(t),lCo=r(CC,` property of the config object (either
passed as an argument or loaded from `),Rse=n(CC,"CODE",{});var JYr=s(Rse);iCo=r(JYr,"pretrained_model_name_or_path"),JYr.forEach(t),dCo=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n(CC,"CODE",{});var YYr=s(Bse);cCo=r(YYr,"pretrained_model_name_or_path"),YYr.forEach(t),fCo=r(CC,":"),CC.forEach(t),mCo=i(zt),y=n(zt,"UL",{});var L=s(y);r5=n(L,"LI",{});var mAe=s(r5);Pse=n(mAe,"STRONG",{});var KYr=s(Pse);gCo=r(KYr,"albert"),KYr.forEach(t),hCo=r(mAe," \u2014 "),hq=n(mAe,"A",{href:!0});var ZYr=s(hq);pCo=r(ZYr,"AlbertForSequenceClassification"),ZYr.forEach(t),_Co=r(mAe," (ALBERT model)"),mAe.forEach(t),uCo=i(L),t5=n(L,"LI",{});var gAe=s(t5);$se=n(gAe,"STRONG",{});var eKr=s($se);bCo=r(eKr,"bart"),eKr.forEach(t),FCo=r(gAe," \u2014 "),pq=n(gAe,"A",{href:!0});var oKr=s(pq);vCo=r(oKr,"BartForSequenceClassification"),oKr.forEach(t),TCo=r(gAe," (BART model)"),gAe.forEach(t),MCo=i(L),a5=n(L,"LI",{});var hAe=s(a5);Ise=n(hAe,"STRONG",{});var rKr=s(Ise);ECo=r(rKr,"bert"),rKr.forEach(t),CCo=r(hAe," \u2014 "),_q=n(hAe,"A",{href:!0});var tKr=s(_q);wCo=r(tKr,"BertForSequenceClassification"),tKr.forEach(t),ACo=r(hAe," (BERT model)"),hAe.forEach(t),yCo=i(L),n5=n(L,"LI",{});var pAe=s(n5);qse=n(pAe,"STRONG",{});var aKr=s(qse);LCo=r(aKr,"big_bird"),aKr.forEach(t),xCo=r(pAe," \u2014 "),uq=n(pAe,"A",{href:!0});var nKr=s(uq);kCo=r(nKr,"BigBirdForSequenceClassification"),nKr.forEach(t),SCo=r(pAe," (BigBird model)"),pAe.forEach(t),RCo=i(L),s5=n(L,"LI",{});var _Ae=s(s5);Nse=n(_Ae,"STRONG",{});var sKr=s(Nse);BCo=r(sKr,"bigbird_pegasus"),sKr.forEach(t),PCo=r(_Ae," \u2014 "),bq=n(_Ae,"A",{href:!0});var lKr=s(bq);$Co=r(lKr,"BigBirdPegasusForSequenceClassification"),lKr.forEach(t),ICo=r(_Ae," (BigBirdPegasus model)"),_Ae.forEach(t),qCo=i(L),l5=n(L,"LI",{});var uAe=s(l5);jse=n(uAe,"STRONG",{});var iKr=s(jse);NCo=r(iKr,"camembert"),iKr.forEach(t),jCo=r(uAe," \u2014 "),Fq=n(uAe,"A",{href:!0});var dKr=s(Fq);DCo=r(dKr,"CamembertForSequenceClassification"),dKr.forEach(t),GCo=r(uAe," (CamemBERT model)"),uAe.forEach(t),OCo=i(L),i5=n(L,"LI",{});var bAe=s(i5);Dse=n(bAe,"STRONG",{});var cKr=s(Dse);VCo=r(cKr,"canine"),cKr.forEach(t),XCo=r(bAe," \u2014 "),vq=n(bAe,"A",{href:!0});var fKr=s(vq);zCo=r(fKr,"CanineForSequenceClassification"),fKr.forEach(t),QCo=r(bAe," (Canine model)"),bAe.forEach(t),WCo=i(L),d5=n(L,"LI",{});var FAe=s(d5);Gse=n(FAe,"STRONG",{});var mKr=s(Gse);HCo=r(mKr,"convbert"),mKr.forEach(t),UCo=r(FAe," \u2014 "),Tq=n(FAe,"A",{href:!0});var gKr=s(Tq);JCo=r(gKr,"ConvBertForSequenceClassification"),gKr.forEach(t),YCo=r(FAe," (ConvBERT model)"),FAe.forEach(t),KCo=i(L),c5=n(L,"LI",{});var vAe=s(c5);Ose=n(vAe,"STRONG",{});var hKr=s(Ose);ZCo=r(hKr,"ctrl"),hKr.forEach(t),e3o=r(vAe," \u2014 "),Mq=n(vAe,"A",{href:!0});var pKr=s(Mq);o3o=r(pKr,"CTRLForSequenceClassification"),pKr.forEach(t),r3o=r(vAe," (CTRL model)"),vAe.forEach(t),t3o=i(L),f5=n(L,"LI",{});var TAe=s(f5);Vse=n(TAe,"STRONG",{});var _Kr=s(Vse);a3o=r(_Kr,"data2vec-text"),_Kr.forEach(t),n3o=r(TAe," \u2014 "),Eq=n(TAe,"A",{href:!0});var uKr=s(Eq);s3o=r(uKr,"Data2VecTextForSequenceClassification"),uKr.forEach(t),l3o=r(TAe," (Data2VecText model)"),TAe.forEach(t),i3o=i(L),m5=n(L,"LI",{});var MAe=s(m5);Xse=n(MAe,"STRONG",{});var bKr=s(Xse);d3o=r(bKr,"deberta"),bKr.forEach(t),c3o=r(MAe," \u2014 "),Cq=n(MAe,"A",{href:!0});var FKr=s(Cq);f3o=r(FKr,"DebertaForSequenceClassification"),FKr.forEach(t),m3o=r(MAe," (DeBERTa model)"),MAe.forEach(t),g3o=i(L),g5=n(L,"LI",{});var EAe=s(g5);zse=n(EAe,"STRONG",{});var vKr=s(zse);h3o=r(vKr,"deberta-v2"),vKr.forEach(t),p3o=r(EAe," \u2014 "),wq=n(EAe,"A",{href:!0});var TKr=s(wq);_3o=r(TKr,"DebertaV2ForSequenceClassification"),TKr.forEach(t),u3o=r(EAe," (DeBERTa-v2 model)"),EAe.forEach(t),b3o=i(L),h5=n(L,"LI",{});var CAe=s(h5);Qse=n(CAe,"STRONG",{});var MKr=s(Qse);F3o=r(MKr,"distilbert"),MKr.forEach(t),v3o=r(CAe," \u2014 "),Aq=n(CAe,"A",{href:!0});var EKr=s(Aq);T3o=r(EKr,"DistilBertForSequenceClassification"),EKr.forEach(t),M3o=r(CAe," (DistilBERT model)"),CAe.forEach(t),E3o=i(L),p5=n(L,"LI",{});var wAe=s(p5);Wse=n(wAe,"STRONG",{});var CKr=s(Wse);C3o=r(CKr,"electra"),CKr.forEach(t),w3o=r(wAe," \u2014 "),yq=n(wAe,"A",{href:!0});var wKr=s(yq);A3o=r(wKr,"ElectraForSequenceClassification"),wKr.forEach(t),y3o=r(wAe," (ELECTRA model)"),wAe.forEach(t),L3o=i(L),_5=n(L,"LI",{});var AAe=s(_5);Hse=n(AAe,"STRONG",{});var AKr=s(Hse);x3o=r(AKr,"flaubert"),AKr.forEach(t),k3o=r(AAe," \u2014 "),Lq=n(AAe,"A",{href:!0});var yKr=s(Lq);S3o=r(yKr,"FlaubertForSequenceClassification"),yKr.forEach(t),R3o=r(AAe," (FlauBERT model)"),AAe.forEach(t),B3o=i(L),u5=n(L,"LI",{});var yAe=s(u5);Use=n(yAe,"STRONG",{});var LKr=s(Use);P3o=r(LKr,"fnet"),LKr.forEach(t),$3o=r(yAe," \u2014 "),xq=n(yAe,"A",{href:!0});var xKr=s(xq);I3o=r(xKr,"FNetForSequenceClassification"),xKr.forEach(t),q3o=r(yAe," (FNet model)"),yAe.forEach(t),N3o=i(L),b5=n(L,"LI",{});var LAe=s(b5);Jse=n(LAe,"STRONG",{});var kKr=s(Jse);j3o=r(kKr,"funnel"),kKr.forEach(t),D3o=r(LAe," \u2014 "),kq=n(LAe,"A",{href:!0});var SKr=s(kq);G3o=r(SKr,"FunnelForSequenceClassification"),SKr.forEach(t),O3o=r(LAe," (Funnel Transformer model)"),LAe.forEach(t),V3o=i(L),F5=n(L,"LI",{});var xAe=s(F5);Yse=n(xAe,"STRONG",{});var RKr=s(Yse);X3o=r(RKr,"gpt2"),RKr.forEach(t),z3o=r(xAe," \u2014 "),Sq=n(xAe,"A",{href:!0});var BKr=s(Sq);Q3o=r(BKr,"GPT2ForSequenceClassification"),BKr.forEach(t),W3o=r(xAe," (OpenAI GPT-2 model)"),xAe.forEach(t),H3o=i(L),v5=n(L,"LI",{});var kAe=s(v5);Kse=n(kAe,"STRONG",{});var PKr=s(Kse);U3o=r(PKr,"gpt_neo"),PKr.forEach(t),J3o=r(kAe," \u2014 "),Rq=n(kAe,"A",{href:!0});var $Kr=s(Rq);Y3o=r($Kr,"GPTNeoForSequenceClassification"),$Kr.forEach(t),K3o=r(kAe," (GPT Neo model)"),kAe.forEach(t),Z3o=i(L),T5=n(L,"LI",{});var SAe=s(T5);Zse=n(SAe,"STRONG",{});var IKr=s(Zse);ewo=r(IKr,"gptj"),IKr.forEach(t),owo=r(SAe," \u2014 "),Bq=n(SAe,"A",{href:!0});var qKr=s(Bq);rwo=r(qKr,"GPTJForSequenceClassification"),qKr.forEach(t),two=r(SAe," (GPT-J model)"),SAe.forEach(t),awo=i(L),M5=n(L,"LI",{});var RAe=s(M5);ele=n(RAe,"STRONG",{});var NKr=s(ele);nwo=r(NKr,"ibert"),NKr.forEach(t),swo=r(RAe," \u2014 "),Pq=n(RAe,"A",{href:!0});var jKr=s(Pq);lwo=r(jKr,"IBertForSequenceClassification"),jKr.forEach(t),iwo=r(RAe," (I-BERT model)"),RAe.forEach(t),dwo=i(L),E5=n(L,"LI",{});var BAe=s(E5);ole=n(BAe,"STRONG",{});var DKr=s(ole);cwo=r(DKr,"layoutlm"),DKr.forEach(t),fwo=r(BAe," \u2014 "),$q=n(BAe,"A",{href:!0});var GKr=s($q);mwo=r(GKr,"LayoutLMForSequenceClassification"),GKr.forEach(t),gwo=r(BAe," (LayoutLM model)"),BAe.forEach(t),hwo=i(L),C5=n(L,"LI",{});var PAe=s(C5);rle=n(PAe,"STRONG",{});var OKr=s(rle);pwo=r(OKr,"layoutlmv2"),OKr.forEach(t),_wo=r(PAe," \u2014 "),Iq=n(PAe,"A",{href:!0});var VKr=s(Iq);uwo=r(VKr,"LayoutLMv2ForSequenceClassification"),VKr.forEach(t),bwo=r(PAe," (LayoutLMv2 model)"),PAe.forEach(t),Fwo=i(L),w5=n(L,"LI",{});var $Ae=s(w5);tle=n($Ae,"STRONG",{});var XKr=s(tle);vwo=r(XKr,"led"),XKr.forEach(t),Two=r($Ae," \u2014 "),qq=n($Ae,"A",{href:!0});var zKr=s(qq);Mwo=r(zKr,"LEDForSequenceClassification"),zKr.forEach(t),Ewo=r($Ae," (LED model)"),$Ae.forEach(t),Cwo=i(L),A5=n(L,"LI",{});var IAe=s(A5);ale=n(IAe,"STRONG",{});var QKr=s(ale);wwo=r(QKr,"longformer"),QKr.forEach(t),Awo=r(IAe," \u2014 "),Nq=n(IAe,"A",{href:!0});var WKr=s(Nq);ywo=r(WKr,"LongformerForSequenceClassification"),WKr.forEach(t),Lwo=r(IAe," (Longformer model)"),IAe.forEach(t),xwo=i(L),y5=n(L,"LI",{});var qAe=s(y5);nle=n(qAe,"STRONG",{});var HKr=s(nle);kwo=r(HKr,"mbart"),HKr.forEach(t),Swo=r(qAe," \u2014 "),jq=n(qAe,"A",{href:!0});var UKr=s(jq);Rwo=r(UKr,"MBartForSequenceClassification"),UKr.forEach(t),Bwo=r(qAe," (mBART model)"),qAe.forEach(t),Pwo=i(L),L5=n(L,"LI",{});var NAe=s(L5);sle=n(NAe,"STRONG",{});var JKr=s(sle);$wo=r(JKr,"megatron-bert"),JKr.forEach(t),Iwo=r(NAe," \u2014 "),Dq=n(NAe,"A",{href:!0});var YKr=s(Dq);qwo=r(YKr,"MegatronBertForSequenceClassification"),YKr.forEach(t),Nwo=r(NAe," (MegatronBert model)"),NAe.forEach(t),jwo=i(L),x5=n(L,"LI",{});var jAe=s(x5);lle=n(jAe,"STRONG",{});var KKr=s(lle);Dwo=r(KKr,"mobilebert"),KKr.forEach(t),Gwo=r(jAe," \u2014 "),Gq=n(jAe,"A",{href:!0});var ZKr=s(Gq);Owo=r(ZKr,"MobileBertForSequenceClassification"),ZKr.forEach(t),Vwo=r(jAe," (MobileBERT model)"),jAe.forEach(t),Xwo=i(L),k5=n(L,"LI",{});var DAe=s(k5);ile=n(DAe,"STRONG",{});var eZr=s(ile);zwo=r(eZr,"mpnet"),eZr.forEach(t),Qwo=r(DAe," \u2014 "),Oq=n(DAe,"A",{href:!0});var oZr=s(Oq);Wwo=r(oZr,"MPNetForSequenceClassification"),oZr.forEach(t),Hwo=r(DAe," (MPNet model)"),DAe.forEach(t),Uwo=i(L),S5=n(L,"LI",{});var GAe=s(S5);dle=n(GAe,"STRONG",{});var rZr=s(dle);Jwo=r(rZr,"nystromformer"),rZr.forEach(t),Ywo=r(GAe," \u2014 "),Vq=n(GAe,"A",{href:!0});var tZr=s(Vq);Kwo=r(tZr,"NystromformerForSequenceClassification"),tZr.forEach(t),Zwo=r(GAe," (Nystromformer model)"),GAe.forEach(t),eAo=i(L),R5=n(L,"LI",{});var OAe=s(R5);cle=n(OAe,"STRONG",{});var aZr=s(cle);oAo=r(aZr,"openai-gpt"),aZr.forEach(t),rAo=r(OAe," \u2014 "),Xq=n(OAe,"A",{href:!0});var nZr=s(Xq);tAo=r(nZr,"OpenAIGPTForSequenceClassification"),nZr.forEach(t),aAo=r(OAe," (OpenAI GPT model)"),OAe.forEach(t),nAo=i(L),B5=n(L,"LI",{});var VAe=s(B5);fle=n(VAe,"STRONG",{});var sZr=s(fle);sAo=r(sZr,"perceiver"),sZr.forEach(t),lAo=r(VAe," \u2014 "),zq=n(VAe,"A",{href:!0});var lZr=s(zq);iAo=r(lZr,"PerceiverForSequenceClassification"),lZr.forEach(t),dAo=r(VAe," (Perceiver model)"),VAe.forEach(t),cAo=i(L),P5=n(L,"LI",{});var XAe=s(P5);mle=n(XAe,"STRONG",{});var iZr=s(mle);fAo=r(iZr,"plbart"),iZr.forEach(t),mAo=r(XAe," \u2014 "),Qq=n(XAe,"A",{href:!0});var dZr=s(Qq);gAo=r(dZr,"PLBartForSequenceClassification"),dZr.forEach(t),hAo=r(XAe," (PLBart model)"),XAe.forEach(t),pAo=i(L),$5=n(L,"LI",{});var zAe=s($5);gle=n(zAe,"STRONG",{});var cZr=s(gle);_Ao=r(cZr,"qdqbert"),cZr.forEach(t),uAo=r(zAe," \u2014 "),Wq=n(zAe,"A",{href:!0});var fZr=s(Wq);bAo=r(fZr,"QDQBertForSequenceClassification"),fZr.forEach(t),FAo=r(zAe," (QDQBert model)"),zAe.forEach(t),vAo=i(L),I5=n(L,"LI",{});var QAe=s(I5);hle=n(QAe,"STRONG",{});var mZr=s(hle);TAo=r(mZr,"reformer"),mZr.forEach(t),MAo=r(QAe," \u2014 "),Hq=n(QAe,"A",{href:!0});var gZr=s(Hq);EAo=r(gZr,"ReformerForSequenceClassification"),gZr.forEach(t),CAo=r(QAe," (Reformer model)"),QAe.forEach(t),wAo=i(L),q5=n(L,"LI",{});var WAe=s(q5);ple=n(WAe,"STRONG",{});var hZr=s(ple);AAo=r(hZr,"rembert"),hZr.forEach(t),yAo=r(WAe," \u2014 "),Uq=n(WAe,"A",{href:!0});var pZr=s(Uq);LAo=r(pZr,"RemBertForSequenceClassification"),pZr.forEach(t),xAo=r(WAe," (RemBERT model)"),WAe.forEach(t),kAo=i(L),N5=n(L,"LI",{});var HAe=s(N5);_le=n(HAe,"STRONG",{});var _Zr=s(_le);SAo=r(_Zr,"roberta"),_Zr.forEach(t),RAo=r(HAe," \u2014 "),Jq=n(HAe,"A",{href:!0});var uZr=s(Jq);BAo=r(uZr,"RobertaForSequenceClassification"),uZr.forEach(t),PAo=r(HAe," (RoBERTa model)"),HAe.forEach(t),$Ao=i(L),j5=n(L,"LI",{});var UAe=s(j5);ule=n(UAe,"STRONG",{});var bZr=s(ule);IAo=r(bZr,"roformer"),bZr.forEach(t),qAo=r(UAe," \u2014 "),Yq=n(UAe,"A",{href:!0});var FZr=s(Yq);NAo=r(FZr,"RoFormerForSequenceClassification"),FZr.forEach(t),jAo=r(UAe," (RoFormer model)"),UAe.forEach(t),DAo=i(L),D5=n(L,"LI",{});var JAe=s(D5);ble=n(JAe,"STRONG",{});var vZr=s(ble);GAo=r(vZr,"squeezebert"),vZr.forEach(t),OAo=r(JAe," \u2014 "),Kq=n(JAe,"A",{href:!0});var TZr=s(Kq);VAo=r(TZr,"SqueezeBertForSequenceClassification"),TZr.forEach(t),XAo=r(JAe," (SqueezeBERT model)"),JAe.forEach(t),zAo=i(L),G5=n(L,"LI",{});var YAe=s(G5);Fle=n(YAe,"STRONG",{});var MZr=s(Fle);QAo=r(MZr,"tapas"),MZr.forEach(t),WAo=r(YAe," \u2014 "),Zq=n(YAe,"A",{href:!0});var EZr=s(Zq);HAo=r(EZr,"TapasForSequenceClassification"),EZr.forEach(t),UAo=r(YAe," (TAPAS model)"),YAe.forEach(t),JAo=i(L),O5=n(L,"LI",{});var KAe=s(O5);vle=n(KAe,"STRONG",{});var CZr=s(vle);YAo=r(CZr,"transfo-xl"),CZr.forEach(t),KAo=r(KAe," \u2014 "),eN=n(KAe,"A",{href:!0});var wZr=s(eN);ZAo=r(wZr,"TransfoXLForSequenceClassification"),wZr.forEach(t),e0o=r(KAe," (Transformer-XL model)"),KAe.forEach(t),o0o=i(L),V5=n(L,"LI",{});var ZAe=s(V5);Tle=n(ZAe,"STRONG",{});var AZr=s(Tle);r0o=r(AZr,"xlm"),AZr.forEach(t),t0o=r(ZAe," \u2014 "),oN=n(ZAe,"A",{href:!0});var yZr=s(oN);a0o=r(yZr,"XLMForSequenceClassification"),yZr.forEach(t),n0o=r(ZAe," (XLM model)"),ZAe.forEach(t),s0o=i(L),X5=n(L,"LI",{});var e0e=s(X5);Mle=n(e0e,"STRONG",{});var LZr=s(Mle);l0o=r(LZr,"xlm-roberta"),LZr.forEach(t),i0o=r(e0e," \u2014 "),rN=n(e0e,"A",{href:!0});var xZr=s(rN);d0o=r(xZr,"XLMRobertaForSequenceClassification"),xZr.forEach(t),c0o=r(e0e," (XLM-RoBERTa model)"),e0e.forEach(t),f0o=i(L),z5=n(L,"LI",{});var o0e=s(z5);Ele=n(o0e,"STRONG",{});var kZr=s(Ele);m0o=r(kZr,"xlm-roberta-xl"),kZr.forEach(t),g0o=r(o0e," \u2014 "),tN=n(o0e,"A",{href:!0});var SZr=s(tN);h0o=r(SZr,"XLMRobertaXLForSequenceClassification"),SZr.forEach(t),p0o=r(o0e," (XLM-RoBERTa-XL model)"),o0e.forEach(t),_0o=i(L),Q5=n(L,"LI",{});var r0e=s(Q5);Cle=n(r0e,"STRONG",{});var RZr=s(Cle);u0o=r(RZr,"xlnet"),RZr.forEach(t),b0o=r(r0e," \u2014 "),aN=n(r0e,"A",{href:!0});var BZr=s(aN);F0o=r(BZr,"XLNetForSequenceClassification"),BZr.forEach(t),v0o=r(r0e," (XLNet model)"),r0e.forEach(t),T0o=i(L),W5=n(L,"LI",{});var t0e=s(W5);wle=n(t0e,"STRONG",{});var PZr=s(wle);M0o=r(PZr,"yoso"),PZr.forEach(t),E0o=r(t0e," \u2014 "),nN=n(t0e,"A",{href:!0});var $Zr=s(nN);C0o=r($Zr,"YosoForSequenceClassification"),$Zr.forEach(t),w0o=r(t0e," (YOSO model)"),t0e.forEach(t),L.forEach(t),A0o=i(zt),H5=n(zt,"P",{});var a0e=s(H5);y0o=r(a0e,"The model is set in evaluation mode by default using "),Ale=n(a0e,"CODE",{});var IZr=s(Ale);L0o=r(IZr,"model.eval()"),IZr.forEach(t),x0o=r(a0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yle=n(a0e,"CODE",{});var qZr=s(yle);k0o=r(qZr,"model.train()"),qZr.forEach(t),a0e.forEach(t),S0o=i(zt),Lle=n(zt,"P",{});var NZr=s(Lle);R0o=r(NZr,"Examples:"),NZr.forEach(t),B0o=i(zt),m(Iw.$$.fragment,zt),zt.forEach(t),tl.forEach(t),dRe=i(c),pd=n(c,"H2",{class:!0});var bPe=s(pd);U5=n(bPe,"A",{id:!0,class:!0,href:!0});var jZr=s(U5);xle=n(jZr,"SPAN",{});var DZr=s(xle);m(qw.$$.fragment,DZr),DZr.forEach(t),jZr.forEach(t),P0o=i(bPe),kle=n(bPe,"SPAN",{});var GZr=s(kle);$0o=r(GZr,"AutoModelForMultipleChoice"),GZr.forEach(t),bPe.forEach(t),cRe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(Nw.$$.fragment,nl),I0o=i(nl),_d=n(nl,"P",{});var iU=s(_d);q0o=r(iU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),sN=n(iU,"A",{href:!0});var OZr=s(sN);N0o=r(OZr,"from_pretrained()"),OZr.forEach(t),j0o=r(iU," class method or the "),lN=n(iU,"A",{href:!0});var VZr=s(lN);D0o=r(VZr,"from_config()"),VZr.forEach(t),G0o=r(iU,` class
method.`),iU.forEach(t),O0o=i(nl),jw=n(nl,"P",{});var FPe=s(jw);V0o=r(FPe,"This class cannot be instantiated directly using "),Sle=n(FPe,"CODE",{});var XZr=s(Sle);X0o=r(XZr,"__init__()"),XZr.forEach(t),z0o=r(FPe," (throws an error)."),FPe.forEach(t),Q0o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(Dw.$$.fragment,sl),W0o=i(sl),Rle=n(sl,"P",{});var zZr=s(Rle);H0o=r(zZr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zZr.forEach(t),U0o=i(sl),ud=n(sl,"P",{});var dU=s(ud);J0o=r(dU,`Note:
Loading a model from its configuration file does `),Ble=n(dU,"STRONG",{});var QZr=s(Ble);Y0o=r(QZr,"not"),QZr.forEach(t),K0o=r(dU,` load the model weights. It only affects the
model\u2019s configuration. Use `),iN=n(dU,"A",{href:!0});var WZr=s(iN);Z0o=r(WZr,"from_pretrained()"),WZr.forEach(t),eyo=r(dU," to load the model weights."),dU.forEach(t),oyo=i(sl),Ple=n(sl,"P",{});var HZr=s(Ple);ryo=r(HZr,"Examples:"),HZr.forEach(t),tyo=i(sl),m(Gw.$$.fragment,sl),sl.forEach(t),ayo=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(Ow.$$.fragment,Qt),nyo=i(Qt),$le=n(Qt,"P",{});var UZr=s($le);syo=r(UZr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UZr.forEach(t),lyo=i(Qt),Ja=n(Qt,"P",{});var wC=s(Ja);iyo=r(wC,"The model class to instantiate is selected based on the "),Ile=n(wC,"CODE",{});var JZr=s(Ile);dyo=r(JZr,"model_type"),JZr.forEach(t),cyo=r(wC,` property of the config object (either
passed as an argument or loaded from `),qle=n(wC,"CODE",{});var YZr=s(qle);fyo=r(YZr,"pretrained_model_name_or_path"),YZr.forEach(t),myo=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nle=n(wC,"CODE",{});var KZr=s(Nle);gyo=r(KZr,"pretrained_model_name_or_path"),KZr.forEach(t),hyo=r(wC,":"),wC.forEach(t),pyo=i(Qt),G=n(Qt,"UL",{});var O=s(G);J5=n(O,"LI",{});var n0e=s(J5);jle=n(n0e,"STRONG",{});var ZZr=s(jle);_yo=r(ZZr,"albert"),ZZr.forEach(t),uyo=r(n0e," \u2014 "),dN=n(n0e,"A",{href:!0});var eet=s(dN);byo=r(eet,"AlbertForMultipleChoice"),eet.forEach(t),Fyo=r(n0e," (ALBERT model)"),n0e.forEach(t),vyo=i(O),Y5=n(O,"LI",{});var s0e=s(Y5);Dle=n(s0e,"STRONG",{});var oet=s(Dle);Tyo=r(oet,"bert"),oet.forEach(t),Myo=r(s0e," \u2014 "),cN=n(s0e,"A",{href:!0});var ret=s(cN);Eyo=r(ret,"BertForMultipleChoice"),ret.forEach(t),Cyo=r(s0e," (BERT model)"),s0e.forEach(t),wyo=i(O),K5=n(O,"LI",{});var l0e=s(K5);Gle=n(l0e,"STRONG",{});var tet=s(Gle);Ayo=r(tet,"big_bird"),tet.forEach(t),yyo=r(l0e," \u2014 "),fN=n(l0e,"A",{href:!0});var aet=s(fN);Lyo=r(aet,"BigBirdForMultipleChoice"),aet.forEach(t),xyo=r(l0e," (BigBird model)"),l0e.forEach(t),kyo=i(O),Z5=n(O,"LI",{});var i0e=s(Z5);Ole=n(i0e,"STRONG",{});var net=s(Ole);Syo=r(net,"camembert"),net.forEach(t),Ryo=r(i0e," \u2014 "),mN=n(i0e,"A",{href:!0});var set=s(mN);Byo=r(set,"CamembertForMultipleChoice"),set.forEach(t),Pyo=r(i0e," (CamemBERT model)"),i0e.forEach(t),$yo=i(O),eb=n(O,"LI",{});var d0e=s(eb);Vle=n(d0e,"STRONG",{});var iet=s(Vle);Iyo=r(iet,"canine"),iet.forEach(t),qyo=r(d0e," \u2014 "),gN=n(d0e,"A",{href:!0});var det=s(gN);Nyo=r(det,"CanineForMultipleChoice"),det.forEach(t),jyo=r(d0e," (Canine model)"),d0e.forEach(t),Dyo=i(O),ob=n(O,"LI",{});var c0e=s(ob);Xle=n(c0e,"STRONG",{});var cet=s(Xle);Gyo=r(cet,"convbert"),cet.forEach(t),Oyo=r(c0e," \u2014 "),hN=n(c0e,"A",{href:!0});var fet=s(hN);Vyo=r(fet,"ConvBertForMultipleChoice"),fet.forEach(t),Xyo=r(c0e," (ConvBERT model)"),c0e.forEach(t),zyo=i(O),rb=n(O,"LI",{});var f0e=s(rb);zle=n(f0e,"STRONG",{});var met=s(zle);Qyo=r(met,"data2vec-text"),met.forEach(t),Wyo=r(f0e," \u2014 "),pN=n(f0e,"A",{href:!0});var get=s(pN);Hyo=r(get,"Data2VecTextForMultipleChoice"),get.forEach(t),Uyo=r(f0e," (Data2VecText model)"),f0e.forEach(t),Jyo=i(O),tb=n(O,"LI",{});var m0e=s(tb);Qle=n(m0e,"STRONG",{});var het=s(Qle);Yyo=r(het,"distilbert"),het.forEach(t),Kyo=r(m0e," \u2014 "),_N=n(m0e,"A",{href:!0});var pet=s(_N);Zyo=r(pet,"DistilBertForMultipleChoice"),pet.forEach(t),eLo=r(m0e," (DistilBERT model)"),m0e.forEach(t),oLo=i(O),ab=n(O,"LI",{});var g0e=s(ab);Wle=n(g0e,"STRONG",{});var _et=s(Wle);rLo=r(_et,"electra"),_et.forEach(t),tLo=r(g0e," \u2014 "),uN=n(g0e,"A",{href:!0});var uet=s(uN);aLo=r(uet,"ElectraForMultipleChoice"),uet.forEach(t),nLo=r(g0e," (ELECTRA model)"),g0e.forEach(t),sLo=i(O),nb=n(O,"LI",{});var h0e=s(nb);Hle=n(h0e,"STRONG",{});var bet=s(Hle);lLo=r(bet,"flaubert"),bet.forEach(t),iLo=r(h0e," \u2014 "),bN=n(h0e,"A",{href:!0});var Fet=s(bN);dLo=r(Fet,"FlaubertForMultipleChoice"),Fet.forEach(t),cLo=r(h0e," (FlauBERT model)"),h0e.forEach(t),fLo=i(O),sb=n(O,"LI",{});var p0e=s(sb);Ule=n(p0e,"STRONG",{});var vet=s(Ule);mLo=r(vet,"fnet"),vet.forEach(t),gLo=r(p0e," \u2014 "),FN=n(p0e,"A",{href:!0});var Tet=s(FN);hLo=r(Tet,"FNetForMultipleChoice"),Tet.forEach(t),pLo=r(p0e," (FNet model)"),p0e.forEach(t),_Lo=i(O),lb=n(O,"LI",{});var _0e=s(lb);Jle=n(_0e,"STRONG",{});var Met=s(Jle);uLo=r(Met,"funnel"),Met.forEach(t),bLo=r(_0e," \u2014 "),vN=n(_0e,"A",{href:!0});var Eet=s(vN);FLo=r(Eet,"FunnelForMultipleChoice"),Eet.forEach(t),vLo=r(_0e," (Funnel Transformer model)"),_0e.forEach(t),TLo=i(O),ib=n(O,"LI",{});var u0e=s(ib);Yle=n(u0e,"STRONG",{});var Cet=s(Yle);MLo=r(Cet,"ibert"),Cet.forEach(t),ELo=r(u0e," \u2014 "),TN=n(u0e,"A",{href:!0});var wet=s(TN);CLo=r(wet,"IBertForMultipleChoice"),wet.forEach(t),wLo=r(u0e," (I-BERT model)"),u0e.forEach(t),ALo=i(O),db=n(O,"LI",{});var b0e=s(db);Kle=n(b0e,"STRONG",{});var Aet=s(Kle);yLo=r(Aet,"longformer"),Aet.forEach(t),LLo=r(b0e," \u2014 "),MN=n(b0e,"A",{href:!0});var yet=s(MN);xLo=r(yet,"LongformerForMultipleChoice"),yet.forEach(t),kLo=r(b0e," (Longformer model)"),b0e.forEach(t),SLo=i(O),cb=n(O,"LI",{});var F0e=s(cb);Zle=n(F0e,"STRONG",{});var Let=s(Zle);RLo=r(Let,"megatron-bert"),Let.forEach(t),BLo=r(F0e," \u2014 "),EN=n(F0e,"A",{href:!0});var xet=s(EN);PLo=r(xet,"MegatronBertForMultipleChoice"),xet.forEach(t),$Lo=r(F0e," (MegatronBert model)"),F0e.forEach(t),ILo=i(O),fb=n(O,"LI",{});var v0e=s(fb);eie=n(v0e,"STRONG",{});var ket=s(eie);qLo=r(ket,"mobilebert"),ket.forEach(t),NLo=r(v0e," \u2014 "),CN=n(v0e,"A",{href:!0});var Set=s(CN);jLo=r(Set,"MobileBertForMultipleChoice"),Set.forEach(t),DLo=r(v0e," (MobileBERT model)"),v0e.forEach(t),GLo=i(O),mb=n(O,"LI",{});var T0e=s(mb);oie=n(T0e,"STRONG",{});var Ret=s(oie);OLo=r(Ret,"mpnet"),Ret.forEach(t),VLo=r(T0e," \u2014 "),wN=n(T0e,"A",{href:!0});var Bet=s(wN);XLo=r(Bet,"MPNetForMultipleChoice"),Bet.forEach(t),zLo=r(T0e," (MPNet model)"),T0e.forEach(t),QLo=i(O),gb=n(O,"LI",{});var M0e=s(gb);rie=n(M0e,"STRONG",{});var Pet=s(rie);WLo=r(Pet,"nystromformer"),Pet.forEach(t),HLo=r(M0e," \u2014 "),AN=n(M0e,"A",{href:!0});var $et=s(AN);ULo=r($et,"NystromformerForMultipleChoice"),$et.forEach(t),JLo=r(M0e," (Nystromformer model)"),M0e.forEach(t),YLo=i(O),hb=n(O,"LI",{});var E0e=s(hb);tie=n(E0e,"STRONG",{});var Iet=s(tie);KLo=r(Iet,"qdqbert"),Iet.forEach(t),ZLo=r(E0e," \u2014 "),yN=n(E0e,"A",{href:!0});var qet=s(yN);e8o=r(qet,"QDQBertForMultipleChoice"),qet.forEach(t),o8o=r(E0e," (QDQBert model)"),E0e.forEach(t),r8o=i(O),pb=n(O,"LI",{});var C0e=s(pb);aie=n(C0e,"STRONG",{});var Net=s(aie);t8o=r(Net,"rembert"),Net.forEach(t),a8o=r(C0e," \u2014 "),LN=n(C0e,"A",{href:!0});var jet=s(LN);n8o=r(jet,"RemBertForMultipleChoice"),jet.forEach(t),s8o=r(C0e," (RemBERT model)"),C0e.forEach(t),l8o=i(O),_b=n(O,"LI",{});var w0e=s(_b);nie=n(w0e,"STRONG",{});var Det=s(nie);i8o=r(Det,"roberta"),Det.forEach(t),d8o=r(w0e," \u2014 "),xN=n(w0e,"A",{href:!0});var Get=s(xN);c8o=r(Get,"RobertaForMultipleChoice"),Get.forEach(t),f8o=r(w0e," (RoBERTa model)"),w0e.forEach(t),m8o=i(O),ub=n(O,"LI",{});var A0e=s(ub);sie=n(A0e,"STRONG",{});var Oet=s(sie);g8o=r(Oet,"roformer"),Oet.forEach(t),h8o=r(A0e," \u2014 "),kN=n(A0e,"A",{href:!0});var Vet=s(kN);p8o=r(Vet,"RoFormerForMultipleChoice"),Vet.forEach(t),_8o=r(A0e," (RoFormer model)"),A0e.forEach(t),u8o=i(O),bb=n(O,"LI",{});var y0e=s(bb);lie=n(y0e,"STRONG",{});var Xet=s(lie);b8o=r(Xet,"squeezebert"),Xet.forEach(t),F8o=r(y0e," \u2014 "),SN=n(y0e,"A",{href:!0});var zet=s(SN);v8o=r(zet,"SqueezeBertForMultipleChoice"),zet.forEach(t),T8o=r(y0e," (SqueezeBERT model)"),y0e.forEach(t),M8o=i(O),Fb=n(O,"LI",{});var L0e=s(Fb);iie=n(L0e,"STRONG",{});var Qet=s(iie);E8o=r(Qet,"xlm"),Qet.forEach(t),C8o=r(L0e," \u2014 "),RN=n(L0e,"A",{href:!0});var Wet=s(RN);w8o=r(Wet,"XLMForMultipleChoice"),Wet.forEach(t),A8o=r(L0e," (XLM model)"),L0e.forEach(t),y8o=i(O),vb=n(O,"LI",{});var x0e=s(vb);die=n(x0e,"STRONG",{});var Het=s(die);L8o=r(Het,"xlm-roberta"),Het.forEach(t),x8o=r(x0e," \u2014 "),BN=n(x0e,"A",{href:!0});var Uet=s(BN);k8o=r(Uet,"XLMRobertaForMultipleChoice"),Uet.forEach(t),S8o=r(x0e," (XLM-RoBERTa model)"),x0e.forEach(t),R8o=i(O),Tb=n(O,"LI",{});var k0e=s(Tb);cie=n(k0e,"STRONG",{});var Jet=s(cie);B8o=r(Jet,"xlm-roberta-xl"),Jet.forEach(t),P8o=r(k0e," \u2014 "),PN=n(k0e,"A",{href:!0});var Yet=s(PN);$8o=r(Yet,"XLMRobertaXLForMultipleChoice"),Yet.forEach(t),I8o=r(k0e," (XLM-RoBERTa-XL model)"),k0e.forEach(t),q8o=i(O),Mb=n(O,"LI",{});var S0e=s(Mb);fie=n(S0e,"STRONG",{});var Ket=s(fie);N8o=r(Ket,"xlnet"),Ket.forEach(t),j8o=r(S0e," \u2014 "),$N=n(S0e,"A",{href:!0});var Zet=s($N);D8o=r(Zet,"XLNetForMultipleChoice"),Zet.forEach(t),G8o=r(S0e," (XLNet model)"),S0e.forEach(t),O8o=i(O),Eb=n(O,"LI",{});var R0e=s(Eb);mie=n(R0e,"STRONG",{});var eot=s(mie);V8o=r(eot,"yoso"),eot.forEach(t),X8o=r(R0e," \u2014 "),IN=n(R0e,"A",{href:!0});var oot=s(IN);z8o=r(oot,"YosoForMultipleChoice"),oot.forEach(t),Q8o=r(R0e," (YOSO model)"),R0e.forEach(t),O.forEach(t),W8o=i(Qt),Cb=n(Qt,"P",{});var B0e=s(Cb);H8o=r(B0e,"The model is set in evaluation mode by default using "),gie=n(B0e,"CODE",{});var rot=s(gie);U8o=r(rot,"model.eval()"),rot.forEach(t),J8o=r(B0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(B0e,"CODE",{});var tot=s(hie);Y8o=r(tot,"model.train()"),tot.forEach(t),B0e.forEach(t),K8o=i(Qt),pie=n(Qt,"P",{});var aot=s(pie);Z8o=r(aot,"Examples:"),aot.forEach(t),e7o=i(Qt),m(Vw.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),fRe=i(c),bd=n(c,"H2",{class:!0});var vPe=s(bd);wb=n(vPe,"A",{id:!0,class:!0,href:!0});var not=s(wb);_ie=n(not,"SPAN",{});var sot=s(_ie);m(Xw.$$.fragment,sot),sot.forEach(t),not.forEach(t),o7o=i(vPe),uie=n(vPe,"SPAN",{});var lot=s(uie);r7o=r(lot,"AutoModelForNextSentencePrediction"),lot.forEach(t),vPe.forEach(t),mRe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(zw.$$.fragment,ll),t7o=i(ll),Fd=n(ll,"P",{});var cU=s(Fd);a7o=r(cU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qN=n(cU,"A",{href:!0});var iot=s(qN);n7o=r(iot,"from_pretrained()"),iot.forEach(t),s7o=r(cU," class method or the "),NN=n(cU,"A",{href:!0});var dot=s(NN);l7o=r(dot,"from_config()"),dot.forEach(t),i7o=r(cU,` class
method.`),cU.forEach(t),d7o=i(ll),Qw=n(ll,"P",{});var TPe=s(Qw);c7o=r(TPe,"This class cannot be instantiated directly using "),bie=n(TPe,"CODE",{});var cot=s(bie);f7o=r(cot,"__init__()"),cot.forEach(t),m7o=r(TPe," (throws an error)."),TPe.forEach(t),g7o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(Ww.$$.fragment,il),h7o=i(il),Fie=n(il,"P",{});var fot=s(Fie);p7o=r(fot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fot.forEach(t),_7o=i(il),vd=n(il,"P",{});var fU=s(vd);u7o=r(fU,`Note:
Loading a model from its configuration file does `),vie=n(fU,"STRONG",{});var mot=s(vie);b7o=r(mot,"not"),mot.forEach(t),F7o=r(fU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(fU,"A",{href:!0});var got=s(jN);v7o=r(got,"from_pretrained()"),got.forEach(t),T7o=r(fU," to load the model weights."),fU.forEach(t),M7o=i(il),Tie=n(il,"P",{});var hot=s(Tie);E7o=r(hot,"Examples:"),hot.forEach(t),C7o=i(il),m(Hw.$$.fragment,il),il.forEach(t),w7o=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(Uw.$$.fragment,Wt),A7o=i(Wt),Mie=n(Wt,"P",{});var pot=s(Mie);y7o=r(pot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),pot.forEach(t),L7o=i(Wt),Ya=n(Wt,"P",{});var AC=s(Ya);x7o=r(AC,"The model class to instantiate is selected based on the "),Eie=n(AC,"CODE",{});var _ot=s(Eie);k7o=r(_ot,"model_type"),_ot.forEach(t),S7o=r(AC,` property of the config object (either
passed as an argument or loaded from `),Cie=n(AC,"CODE",{});var uot=s(Cie);R7o=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),B7o=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=n(AC,"CODE",{});var bot=s(wie);P7o=r(bot,"pretrained_model_name_or_path"),bot.forEach(t),$7o=r(AC,":"),AC.forEach(t),I7o=i(Wt),da=n(Wt,"UL",{});var dl=s(da);Ab=n(dl,"LI",{});var P0e=s(Ab);Aie=n(P0e,"STRONG",{});var Fot=s(Aie);q7o=r(Fot,"bert"),Fot.forEach(t),N7o=r(P0e," \u2014 "),DN=n(P0e,"A",{href:!0});var vot=s(DN);j7o=r(vot,"BertForNextSentencePrediction"),vot.forEach(t),D7o=r(P0e," (BERT model)"),P0e.forEach(t),G7o=i(dl),yb=n(dl,"LI",{});var $0e=s(yb);yie=n($0e,"STRONG",{});var Tot=s(yie);O7o=r(Tot,"fnet"),Tot.forEach(t),V7o=r($0e," \u2014 "),GN=n($0e,"A",{href:!0});var Mot=s(GN);X7o=r(Mot,"FNetForNextSentencePrediction"),Mot.forEach(t),z7o=r($0e," (FNet model)"),$0e.forEach(t),Q7o=i(dl),Lb=n(dl,"LI",{});var I0e=s(Lb);Lie=n(I0e,"STRONG",{});var Eot=s(Lie);W7o=r(Eot,"megatron-bert"),Eot.forEach(t),H7o=r(I0e," \u2014 "),ON=n(I0e,"A",{href:!0});var Cot=s(ON);U7o=r(Cot,"MegatronBertForNextSentencePrediction"),Cot.forEach(t),J7o=r(I0e," (MegatronBert model)"),I0e.forEach(t),Y7o=i(dl),xb=n(dl,"LI",{});var q0e=s(xb);xie=n(q0e,"STRONG",{});var wot=s(xie);K7o=r(wot,"mobilebert"),wot.forEach(t),Z7o=r(q0e," \u2014 "),VN=n(q0e,"A",{href:!0});var Aot=s(VN);e9o=r(Aot,"MobileBertForNextSentencePrediction"),Aot.forEach(t),o9o=r(q0e," (MobileBERT model)"),q0e.forEach(t),r9o=i(dl),kb=n(dl,"LI",{});var N0e=s(kb);kie=n(N0e,"STRONG",{});var yot=s(kie);t9o=r(yot,"qdqbert"),yot.forEach(t),a9o=r(N0e," \u2014 "),XN=n(N0e,"A",{href:!0});var Lot=s(XN);n9o=r(Lot,"QDQBertForNextSentencePrediction"),Lot.forEach(t),s9o=r(N0e," (QDQBert model)"),N0e.forEach(t),dl.forEach(t),l9o=i(Wt),Sb=n(Wt,"P",{});var j0e=s(Sb);i9o=r(j0e,"The model is set in evaluation mode by default using "),Sie=n(j0e,"CODE",{});var xot=s(Sie);d9o=r(xot,"model.eval()"),xot.forEach(t),c9o=r(j0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=n(j0e,"CODE",{});var kot=s(Rie);f9o=r(kot,"model.train()"),kot.forEach(t),j0e.forEach(t),m9o=i(Wt),Bie=n(Wt,"P",{});var Sot=s(Bie);g9o=r(Sot,"Examples:"),Sot.forEach(t),h9o=i(Wt),m(Jw.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),gRe=i(c),Td=n(c,"H2",{class:!0});var MPe=s(Td);Rb=n(MPe,"A",{id:!0,class:!0,href:!0});var Rot=s(Rb);Pie=n(Rot,"SPAN",{});var Bot=s(Pie);m(Yw.$$.fragment,Bot),Bot.forEach(t),Rot.forEach(t),p9o=i(MPe),$ie=n(MPe,"SPAN",{});var Pot=s($ie);_9o=r(Pot,"AutoModelForTokenClassification"),Pot.forEach(t),MPe.forEach(t),hRe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(Kw.$$.fragment,cl),u9o=i(cl),Md=n(cl,"P",{});var mU=s(Md);b9o=r(mU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),zN=n(mU,"A",{href:!0});var $ot=s(zN);F9o=r($ot,"from_pretrained()"),$ot.forEach(t),v9o=r(mU," class method or the "),QN=n(mU,"A",{href:!0});var Iot=s(QN);T9o=r(Iot,"from_config()"),Iot.forEach(t),M9o=r(mU,` class
method.`),mU.forEach(t),E9o=i(cl),Zw=n(cl,"P",{});var EPe=s(Zw);C9o=r(EPe,"This class cannot be instantiated directly using "),Iie=n(EPe,"CODE",{});var qot=s(Iie);w9o=r(qot,"__init__()"),qot.forEach(t),A9o=r(EPe," (throws an error)."),EPe.forEach(t),y9o=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(eA.$$.fragment,fl),L9o=i(fl),qie=n(fl,"P",{});var Not=s(qie);x9o=r(Not,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Not.forEach(t),k9o=i(fl),Ed=n(fl,"P",{});var gU=s(Ed);S9o=r(gU,`Note:
Loading a model from its configuration file does `),Nie=n(gU,"STRONG",{});var jot=s(Nie);R9o=r(jot,"not"),jot.forEach(t),B9o=r(gU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WN=n(gU,"A",{href:!0});var Dot=s(WN);P9o=r(Dot,"from_pretrained()"),Dot.forEach(t),$9o=r(gU," to load the model weights."),gU.forEach(t),I9o=i(fl),jie=n(fl,"P",{});var Got=s(jie);q9o=r(Got,"Examples:"),Got.forEach(t),N9o=i(fl),m(oA.$$.fragment,fl),fl.forEach(t),j9o=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(rA.$$.fragment,Ht),D9o=i(Ht),Die=n(Ht,"P",{});var Oot=s(Die);G9o=r(Oot,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oot.forEach(t),O9o=i(Ht),Ka=n(Ht,"P",{});var yC=s(Ka);V9o=r(yC,"The model class to instantiate is selected based on the "),Gie=n(yC,"CODE",{});var Vot=s(Gie);X9o=r(Vot,"model_type"),Vot.forEach(t),z9o=r(yC,` property of the config object (either
passed as an argument or loaded from `),Oie=n(yC,"CODE",{});var Xot=s(Oie);Q9o=r(Xot,"pretrained_model_name_or_path"),Xot.forEach(t),W9o=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vie=n(yC,"CODE",{});var zot=s(Vie);H9o=r(zot,"pretrained_model_name_or_path"),zot.forEach(t),U9o=r(yC,":"),yC.forEach(t),J9o=i(Ht),j=n(Ht,"UL",{});var D=s(j);Bb=n(D,"LI",{});var D0e=s(Bb);Xie=n(D0e,"STRONG",{});var Qot=s(Xie);Y9o=r(Qot,"albert"),Qot.forEach(t),K9o=r(D0e," \u2014 "),HN=n(D0e,"A",{href:!0});var Wot=s(HN);Z9o=r(Wot,"AlbertForTokenClassification"),Wot.forEach(t),exo=r(D0e," (ALBERT model)"),D0e.forEach(t),oxo=i(D),Pb=n(D,"LI",{});var G0e=s(Pb);zie=n(G0e,"STRONG",{});var Hot=s(zie);rxo=r(Hot,"bert"),Hot.forEach(t),txo=r(G0e," \u2014 "),UN=n(G0e,"A",{href:!0});var Uot=s(UN);axo=r(Uot,"BertForTokenClassification"),Uot.forEach(t),nxo=r(G0e," (BERT model)"),G0e.forEach(t),sxo=i(D),$b=n(D,"LI",{});var O0e=s($b);Qie=n(O0e,"STRONG",{});var Jot=s(Qie);lxo=r(Jot,"big_bird"),Jot.forEach(t),ixo=r(O0e," \u2014 "),JN=n(O0e,"A",{href:!0});var Yot=s(JN);dxo=r(Yot,"BigBirdForTokenClassification"),Yot.forEach(t),cxo=r(O0e," (BigBird model)"),O0e.forEach(t),fxo=i(D),Ib=n(D,"LI",{});var V0e=s(Ib);Wie=n(V0e,"STRONG",{});var Kot=s(Wie);mxo=r(Kot,"camembert"),Kot.forEach(t),gxo=r(V0e," \u2014 "),YN=n(V0e,"A",{href:!0});var Zot=s(YN);hxo=r(Zot,"CamembertForTokenClassification"),Zot.forEach(t),pxo=r(V0e," (CamemBERT model)"),V0e.forEach(t),_xo=i(D),qb=n(D,"LI",{});var X0e=s(qb);Hie=n(X0e,"STRONG",{});var ert=s(Hie);uxo=r(ert,"canine"),ert.forEach(t),bxo=r(X0e," \u2014 "),KN=n(X0e,"A",{href:!0});var ort=s(KN);Fxo=r(ort,"CanineForTokenClassification"),ort.forEach(t),vxo=r(X0e," (Canine model)"),X0e.forEach(t),Txo=i(D),Nb=n(D,"LI",{});var z0e=s(Nb);Uie=n(z0e,"STRONG",{});var rrt=s(Uie);Mxo=r(rrt,"convbert"),rrt.forEach(t),Exo=r(z0e," \u2014 "),ZN=n(z0e,"A",{href:!0});var trt=s(ZN);Cxo=r(trt,"ConvBertForTokenClassification"),trt.forEach(t),wxo=r(z0e," (ConvBERT model)"),z0e.forEach(t),Axo=i(D),jb=n(D,"LI",{});var Q0e=s(jb);Jie=n(Q0e,"STRONG",{});var art=s(Jie);yxo=r(art,"data2vec-text"),art.forEach(t),Lxo=r(Q0e," \u2014 "),ej=n(Q0e,"A",{href:!0});var nrt=s(ej);xxo=r(nrt,"Data2VecTextForTokenClassification"),nrt.forEach(t),kxo=r(Q0e," (Data2VecText model)"),Q0e.forEach(t),Sxo=i(D),Db=n(D,"LI",{});var W0e=s(Db);Yie=n(W0e,"STRONG",{});var srt=s(Yie);Rxo=r(srt,"deberta"),srt.forEach(t),Bxo=r(W0e," \u2014 "),oj=n(W0e,"A",{href:!0});var lrt=s(oj);Pxo=r(lrt,"DebertaForTokenClassification"),lrt.forEach(t),$xo=r(W0e," (DeBERTa model)"),W0e.forEach(t),Ixo=i(D),Gb=n(D,"LI",{});var H0e=s(Gb);Kie=n(H0e,"STRONG",{});var irt=s(Kie);qxo=r(irt,"deberta-v2"),irt.forEach(t),Nxo=r(H0e," \u2014 "),rj=n(H0e,"A",{href:!0});var drt=s(rj);jxo=r(drt,"DebertaV2ForTokenClassification"),drt.forEach(t),Dxo=r(H0e," (DeBERTa-v2 model)"),H0e.forEach(t),Gxo=i(D),Ob=n(D,"LI",{});var U0e=s(Ob);Zie=n(U0e,"STRONG",{});var crt=s(Zie);Oxo=r(crt,"distilbert"),crt.forEach(t),Vxo=r(U0e," \u2014 "),tj=n(U0e,"A",{href:!0});var frt=s(tj);Xxo=r(frt,"DistilBertForTokenClassification"),frt.forEach(t),zxo=r(U0e," (DistilBERT model)"),U0e.forEach(t),Qxo=i(D),Vb=n(D,"LI",{});var J0e=s(Vb);ede=n(J0e,"STRONG",{});var mrt=s(ede);Wxo=r(mrt,"electra"),mrt.forEach(t),Hxo=r(J0e," \u2014 "),aj=n(J0e,"A",{href:!0});var grt=s(aj);Uxo=r(grt,"ElectraForTokenClassification"),grt.forEach(t),Jxo=r(J0e," (ELECTRA model)"),J0e.forEach(t),Yxo=i(D),Xb=n(D,"LI",{});var Y0e=s(Xb);ode=n(Y0e,"STRONG",{});var hrt=s(ode);Kxo=r(hrt,"flaubert"),hrt.forEach(t),Zxo=r(Y0e," \u2014 "),nj=n(Y0e,"A",{href:!0});var prt=s(nj);eko=r(prt,"FlaubertForTokenClassification"),prt.forEach(t),oko=r(Y0e," (FlauBERT model)"),Y0e.forEach(t),rko=i(D),zb=n(D,"LI",{});var K0e=s(zb);rde=n(K0e,"STRONG",{});var _rt=s(rde);tko=r(_rt,"fnet"),_rt.forEach(t),ako=r(K0e," \u2014 "),sj=n(K0e,"A",{href:!0});var urt=s(sj);nko=r(urt,"FNetForTokenClassification"),urt.forEach(t),sko=r(K0e," (FNet model)"),K0e.forEach(t),lko=i(D),Qb=n(D,"LI",{});var Z0e=s(Qb);tde=n(Z0e,"STRONG",{});var brt=s(tde);iko=r(brt,"funnel"),brt.forEach(t),dko=r(Z0e," \u2014 "),lj=n(Z0e,"A",{href:!0});var Frt=s(lj);cko=r(Frt,"FunnelForTokenClassification"),Frt.forEach(t),fko=r(Z0e," (Funnel Transformer model)"),Z0e.forEach(t),mko=i(D),Wb=n(D,"LI",{});var eye=s(Wb);ade=n(eye,"STRONG",{});var vrt=s(ade);gko=r(vrt,"gpt2"),vrt.forEach(t),hko=r(eye," \u2014 "),ij=n(eye,"A",{href:!0});var Trt=s(ij);pko=r(Trt,"GPT2ForTokenClassification"),Trt.forEach(t),_ko=r(eye," (OpenAI GPT-2 model)"),eye.forEach(t),uko=i(D),Hb=n(D,"LI",{});var oye=s(Hb);nde=n(oye,"STRONG",{});var Mrt=s(nde);bko=r(Mrt,"ibert"),Mrt.forEach(t),Fko=r(oye," \u2014 "),dj=n(oye,"A",{href:!0});var Ert=s(dj);vko=r(Ert,"IBertForTokenClassification"),Ert.forEach(t),Tko=r(oye," (I-BERT model)"),oye.forEach(t),Mko=i(D),Ub=n(D,"LI",{});var rye=s(Ub);sde=n(rye,"STRONG",{});var Crt=s(sde);Eko=r(Crt,"layoutlm"),Crt.forEach(t),Cko=r(rye," \u2014 "),cj=n(rye,"A",{href:!0});var wrt=s(cj);wko=r(wrt,"LayoutLMForTokenClassification"),wrt.forEach(t),Ako=r(rye," (LayoutLM model)"),rye.forEach(t),yko=i(D),Jb=n(D,"LI",{});var tye=s(Jb);lde=n(tye,"STRONG",{});var Art=s(lde);Lko=r(Art,"layoutlmv2"),Art.forEach(t),xko=r(tye," \u2014 "),fj=n(tye,"A",{href:!0});var yrt=s(fj);kko=r(yrt,"LayoutLMv2ForTokenClassification"),yrt.forEach(t),Sko=r(tye," (LayoutLMv2 model)"),tye.forEach(t),Rko=i(D),Yb=n(D,"LI",{});var aye=s(Yb);ide=n(aye,"STRONG",{});var Lrt=s(ide);Bko=r(Lrt,"longformer"),Lrt.forEach(t),Pko=r(aye," \u2014 "),mj=n(aye,"A",{href:!0});var xrt=s(mj);$ko=r(xrt,"LongformerForTokenClassification"),xrt.forEach(t),Iko=r(aye," (Longformer model)"),aye.forEach(t),qko=i(D),Kb=n(D,"LI",{});var nye=s(Kb);dde=n(nye,"STRONG",{});var krt=s(dde);Nko=r(krt,"megatron-bert"),krt.forEach(t),jko=r(nye," \u2014 "),gj=n(nye,"A",{href:!0});var Srt=s(gj);Dko=r(Srt,"MegatronBertForTokenClassification"),Srt.forEach(t),Gko=r(nye," (MegatronBert model)"),nye.forEach(t),Oko=i(D),Zb=n(D,"LI",{});var sye=s(Zb);cde=n(sye,"STRONG",{});var Rrt=s(cde);Vko=r(Rrt,"mobilebert"),Rrt.forEach(t),Xko=r(sye," \u2014 "),hj=n(sye,"A",{href:!0});var Brt=s(hj);zko=r(Brt,"MobileBertForTokenClassification"),Brt.forEach(t),Qko=r(sye," (MobileBERT model)"),sye.forEach(t),Wko=i(D),e2=n(D,"LI",{});var lye=s(e2);fde=n(lye,"STRONG",{});var Prt=s(fde);Hko=r(Prt,"mpnet"),Prt.forEach(t),Uko=r(lye," \u2014 "),pj=n(lye,"A",{href:!0});var $rt=s(pj);Jko=r($rt,"MPNetForTokenClassification"),$rt.forEach(t),Yko=r(lye," (MPNet model)"),lye.forEach(t),Kko=i(D),o2=n(D,"LI",{});var iye=s(o2);mde=n(iye,"STRONG",{});var Irt=s(mde);Zko=r(Irt,"nystromformer"),Irt.forEach(t),eSo=r(iye," \u2014 "),_j=n(iye,"A",{href:!0});var qrt=s(_j);oSo=r(qrt,"NystromformerForTokenClassification"),qrt.forEach(t),rSo=r(iye," (Nystromformer model)"),iye.forEach(t),tSo=i(D),r2=n(D,"LI",{});var dye=s(r2);gde=n(dye,"STRONG",{});var Nrt=s(gde);aSo=r(Nrt,"qdqbert"),Nrt.forEach(t),nSo=r(dye," \u2014 "),uj=n(dye,"A",{href:!0});var jrt=s(uj);sSo=r(jrt,"QDQBertForTokenClassification"),jrt.forEach(t),lSo=r(dye," (QDQBert model)"),dye.forEach(t),iSo=i(D),t2=n(D,"LI",{});var cye=s(t2);hde=n(cye,"STRONG",{});var Drt=s(hde);dSo=r(Drt,"rembert"),Drt.forEach(t),cSo=r(cye," \u2014 "),bj=n(cye,"A",{href:!0});var Grt=s(bj);fSo=r(Grt,"RemBertForTokenClassification"),Grt.forEach(t),mSo=r(cye," (RemBERT model)"),cye.forEach(t),gSo=i(D),a2=n(D,"LI",{});var fye=s(a2);pde=n(fye,"STRONG",{});var Ort=s(pde);hSo=r(Ort,"roberta"),Ort.forEach(t),pSo=r(fye," \u2014 "),Fj=n(fye,"A",{href:!0});var Vrt=s(Fj);_So=r(Vrt,"RobertaForTokenClassification"),Vrt.forEach(t),uSo=r(fye," (RoBERTa model)"),fye.forEach(t),bSo=i(D),n2=n(D,"LI",{});var mye=s(n2);_de=n(mye,"STRONG",{});var Xrt=s(_de);FSo=r(Xrt,"roformer"),Xrt.forEach(t),vSo=r(mye," \u2014 "),vj=n(mye,"A",{href:!0});var zrt=s(vj);TSo=r(zrt,"RoFormerForTokenClassification"),zrt.forEach(t),MSo=r(mye," (RoFormer model)"),mye.forEach(t),ESo=i(D),s2=n(D,"LI",{});var gye=s(s2);ude=n(gye,"STRONG",{});var Qrt=s(ude);CSo=r(Qrt,"squeezebert"),Qrt.forEach(t),wSo=r(gye," \u2014 "),Tj=n(gye,"A",{href:!0});var Wrt=s(Tj);ASo=r(Wrt,"SqueezeBertForTokenClassification"),Wrt.forEach(t),ySo=r(gye," (SqueezeBERT model)"),gye.forEach(t),LSo=i(D),l2=n(D,"LI",{});var hye=s(l2);bde=n(hye,"STRONG",{});var Hrt=s(bde);xSo=r(Hrt,"xlm"),Hrt.forEach(t),kSo=r(hye," \u2014 "),Mj=n(hye,"A",{href:!0});var Urt=s(Mj);SSo=r(Urt,"XLMForTokenClassification"),Urt.forEach(t),RSo=r(hye," (XLM model)"),hye.forEach(t),BSo=i(D),i2=n(D,"LI",{});var pye=s(i2);Fde=n(pye,"STRONG",{});var Jrt=s(Fde);PSo=r(Jrt,"xlm-roberta"),Jrt.forEach(t),$So=r(pye," \u2014 "),Ej=n(pye,"A",{href:!0});var Yrt=s(Ej);ISo=r(Yrt,"XLMRobertaForTokenClassification"),Yrt.forEach(t),qSo=r(pye," (XLM-RoBERTa model)"),pye.forEach(t),NSo=i(D),d2=n(D,"LI",{});var _ye=s(d2);vde=n(_ye,"STRONG",{});var Krt=s(vde);jSo=r(Krt,"xlm-roberta-xl"),Krt.forEach(t),DSo=r(_ye," \u2014 "),Cj=n(_ye,"A",{href:!0});var Zrt=s(Cj);GSo=r(Zrt,"XLMRobertaXLForTokenClassification"),Zrt.forEach(t),OSo=r(_ye," (XLM-RoBERTa-XL model)"),_ye.forEach(t),VSo=i(D),c2=n(D,"LI",{});var uye=s(c2);Tde=n(uye,"STRONG",{});var ett=s(Tde);XSo=r(ett,"xlnet"),ett.forEach(t),zSo=r(uye," \u2014 "),wj=n(uye,"A",{href:!0});var ott=s(wj);QSo=r(ott,"XLNetForTokenClassification"),ott.forEach(t),WSo=r(uye," (XLNet model)"),uye.forEach(t),HSo=i(D),f2=n(D,"LI",{});var bye=s(f2);Mde=n(bye,"STRONG",{});var rtt=s(Mde);USo=r(rtt,"yoso"),rtt.forEach(t),JSo=r(bye," \u2014 "),Aj=n(bye,"A",{href:!0});var ttt=s(Aj);YSo=r(ttt,"YosoForTokenClassification"),ttt.forEach(t),KSo=r(bye," (YOSO model)"),bye.forEach(t),D.forEach(t),ZSo=i(Ht),m2=n(Ht,"P",{});var Fye=s(m2);eRo=r(Fye,"The model is set in evaluation mode by default using "),Ede=n(Fye,"CODE",{});var att=s(Ede);oRo=r(att,"model.eval()"),att.forEach(t),rRo=r(Fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cde=n(Fye,"CODE",{});var ntt=s(Cde);tRo=r(ntt,"model.train()"),ntt.forEach(t),Fye.forEach(t),aRo=i(Ht),wde=n(Ht,"P",{});var stt=s(wde);nRo=r(stt,"Examples:"),stt.forEach(t),sRo=i(Ht),m(tA.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),pRe=i(c),Cd=n(c,"H2",{class:!0});var CPe=s(Cd);g2=n(CPe,"A",{id:!0,class:!0,href:!0});var ltt=s(g2);Ade=n(ltt,"SPAN",{});var itt=s(Ade);m(aA.$$.fragment,itt),itt.forEach(t),ltt.forEach(t),lRo=i(CPe),yde=n(CPe,"SPAN",{});var dtt=s(yde);iRo=r(dtt,"AutoModelForQuestionAnswering"),dtt.forEach(t),CPe.forEach(t),_Re=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(nA.$$.fragment,ml),dRo=i(ml),wd=n(ml,"P",{});var hU=s(wd);cRo=r(hU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yj=n(hU,"A",{href:!0});var ctt=s(yj);fRo=r(ctt,"from_pretrained()"),ctt.forEach(t),mRo=r(hU," class method or the "),Lj=n(hU,"A",{href:!0});var ftt=s(Lj);gRo=r(ftt,"from_config()"),ftt.forEach(t),hRo=r(hU,` class
method.`),hU.forEach(t),pRo=i(ml),sA=n(ml,"P",{});var wPe=s(sA);_Ro=r(wPe,"This class cannot be instantiated directly using "),Lde=n(wPe,"CODE",{});var mtt=s(Lde);uRo=r(mtt,"__init__()"),mtt.forEach(t),bRo=r(wPe," (throws an error)."),wPe.forEach(t),FRo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(lA.$$.fragment,gl),vRo=i(gl),xde=n(gl,"P",{});var gtt=s(xde);TRo=r(gtt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gtt.forEach(t),MRo=i(gl),Ad=n(gl,"P",{});var pU=s(Ad);ERo=r(pU,`Note:
Loading a model from its configuration file does `),kde=n(pU,"STRONG",{});var htt=s(kde);CRo=r(htt,"not"),htt.forEach(t),wRo=r(pU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xj=n(pU,"A",{href:!0});var ptt=s(xj);ARo=r(ptt,"from_pretrained()"),ptt.forEach(t),yRo=r(pU," to load the model weights."),pU.forEach(t),LRo=i(gl),Sde=n(gl,"P",{});var _tt=s(Sde);xRo=r(_tt,"Examples:"),_tt.forEach(t),kRo=i(gl),m(iA.$$.fragment,gl),gl.forEach(t),SRo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(dA.$$.fragment,Ut),RRo=i(Ut),Rde=n(Ut,"P",{});var utt=s(Rde);BRo=r(utt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),utt.forEach(t),PRo=i(Ut),Za=n(Ut,"P",{});var LC=s(Za);$Ro=r(LC,"The model class to instantiate is selected based on the "),Bde=n(LC,"CODE",{});var btt=s(Bde);IRo=r(btt,"model_type"),btt.forEach(t),qRo=r(LC,` property of the config object (either
passed as an argument or loaded from `),Pde=n(LC,"CODE",{});var Ftt=s(Pde);NRo=r(Ftt,"pretrained_model_name_or_path"),Ftt.forEach(t),jRo=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(LC,"CODE",{});var vtt=s($de);DRo=r(vtt,"pretrained_model_name_or_path"),vtt.forEach(t),GRo=r(LC,":"),LC.forEach(t),ORo=i(Ut),R=n(Ut,"UL",{});var P=s(R);h2=n(P,"LI",{});var vye=s(h2);Ide=n(vye,"STRONG",{});var Ttt=s(Ide);VRo=r(Ttt,"albert"),Ttt.forEach(t),XRo=r(vye," \u2014 "),kj=n(vye,"A",{href:!0});var Mtt=s(kj);zRo=r(Mtt,"AlbertForQuestionAnswering"),Mtt.forEach(t),QRo=r(vye," (ALBERT model)"),vye.forEach(t),WRo=i(P),p2=n(P,"LI",{});var Tye=s(p2);qde=n(Tye,"STRONG",{});var Ett=s(qde);HRo=r(Ett,"bart"),Ett.forEach(t),URo=r(Tye," \u2014 "),Sj=n(Tye,"A",{href:!0});var Ctt=s(Sj);JRo=r(Ctt,"BartForQuestionAnswering"),Ctt.forEach(t),YRo=r(Tye," (BART model)"),Tye.forEach(t),KRo=i(P),_2=n(P,"LI",{});var Mye=s(_2);Nde=n(Mye,"STRONG",{});var wtt=s(Nde);ZRo=r(wtt,"bert"),wtt.forEach(t),eBo=r(Mye," \u2014 "),Rj=n(Mye,"A",{href:!0});var Att=s(Rj);oBo=r(Att,"BertForQuestionAnswering"),Att.forEach(t),rBo=r(Mye," (BERT model)"),Mye.forEach(t),tBo=i(P),u2=n(P,"LI",{});var Eye=s(u2);jde=n(Eye,"STRONG",{});var ytt=s(jde);aBo=r(ytt,"big_bird"),ytt.forEach(t),nBo=r(Eye," \u2014 "),Bj=n(Eye,"A",{href:!0});var Ltt=s(Bj);sBo=r(Ltt,"BigBirdForQuestionAnswering"),Ltt.forEach(t),lBo=r(Eye," (BigBird model)"),Eye.forEach(t),iBo=i(P),b2=n(P,"LI",{});var Cye=s(b2);Dde=n(Cye,"STRONG",{});var xtt=s(Dde);dBo=r(xtt,"bigbird_pegasus"),xtt.forEach(t),cBo=r(Cye," \u2014 "),Pj=n(Cye,"A",{href:!0});var ktt=s(Pj);fBo=r(ktt,"BigBirdPegasusForQuestionAnswering"),ktt.forEach(t),mBo=r(Cye," (BigBirdPegasus model)"),Cye.forEach(t),gBo=i(P),F2=n(P,"LI",{});var wye=s(F2);Gde=n(wye,"STRONG",{});var Stt=s(Gde);hBo=r(Stt,"camembert"),Stt.forEach(t),pBo=r(wye," \u2014 "),$j=n(wye,"A",{href:!0});var Rtt=s($j);_Bo=r(Rtt,"CamembertForQuestionAnswering"),Rtt.forEach(t),uBo=r(wye," (CamemBERT model)"),wye.forEach(t),bBo=i(P),v2=n(P,"LI",{});var Aye=s(v2);Ode=n(Aye,"STRONG",{});var Btt=s(Ode);FBo=r(Btt,"canine"),Btt.forEach(t),vBo=r(Aye," \u2014 "),Ij=n(Aye,"A",{href:!0});var Ptt=s(Ij);TBo=r(Ptt,"CanineForQuestionAnswering"),Ptt.forEach(t),MBo=r(Aye," (Canine model)"),Aye.forEach(t),EBo=i(P),T2=n(P,"LI",{});var yye=s(T2);Vde=n(yye,"STRONG",{});var $tt=s(Vde);CBo=r($tt,"convbert"),$tt.forEach(t),wBo=r(yye," \u2014 "),qj=n(yye,"A",{href:!0});var Itt=s(qj);ABo=r(Itt,"ConvBertForQuestionAnswering"),Itt.forEach(t),yBo=r(yye," (ConvBERT model)"),yye.forEach(t),LBo=i(P),M2=n(P,"LI",{});var Lye=s(M2);Xde=n(Lye,"STRONG",{});var qtt=s(Xde);xBo=r(qtt,"data2vec-text"),qtt.forEach(t),kBo=r(Lye," \u2014 "),Nj=n(Lye,"A",{href:!0});var Ntt=s(Nj);SBo=r(Ntt,"Data2VecTextForQuestionAnswering"),Ntt.forEach(t),RBo=r(Lye," (Data2VecText model)"),Lye.forEach(t),BBo=i(P),E2=n(P,"LI",{});var xye=s(E2);zde=n(xye,"STRONG",{});var jtt=s(zde);PBo=r(jtt,"deberta"),jtt.forEach(t),$Bo=r(xye," \u2014 "),jj=n(xye,"A",{href:!0});var Dtt=s(jj);IBo=r(Dtt,"DebertaForQuestionAnswering"),Dtt.forEach(t),qBo=r(xye," (DeBERTa model)"),xye.forEach(t),NBo=i(P),C2=n(P,"LI",{});var kye=s(C2);Qde=n(kye,"STRONG",{});var Gtt=s(Qde);jBo=r(Gtt,"deberta-v2"),Gtt.forEach(t),DBo=r(kye," \u2014 "),Dj=n(kye,"A",{href:!0});var Ott=s(Dj);GBo=r(Ott,"DebertaV2ForQuestionAnswering"),Ott.forEach(t),OBo=r(kye," (DeBERTa-v2 model)"),kye.forEach(t),VBo=i(P),w2=n(P,"LI",{});var Sye=s(w2);Wde=n(Sye,"STRONG",{});var Vtt=s(Wde);XBo=r(Vtt,"distilbert"),Vtt.forEach(t),zBo=r(Sye," \u2014 "),Gj=n(Sye,"A",{href:!0});var Xtt=s(Gj);QBo=r(Xtt,"DistilBertForQuestionAnswering"),Xtt.forEach(t),WBo=r(Sye," (DistilBERT model)"),Sye.forEach(t),HBo=i(P),A2=n(P,"LI",{});var Rye=s(A2);Hde=n(Rye,"STRONG",{});var ztt=s(Hde);UBo=r(ztt,"electra"),ztt.forEach(t),JBo=r(Rye," \u2014 "),Oj=n(Rye,"A",{href:!0});var Qtt=s(Oj);YBo=r(Qtt,"ElectraForQuestionAnswering"),Qtt.forEach(t),KBo=r(Rye," (ELECTRA model)"),Rye.forEach(t),ZBo=i(P),y2=n(P,"LI",{});var Bye=s(y2);Ude=n(Bye,"STRONG",{});var Wtt=s(Ude);ePo=r(Wtt,"flaubert"),Wtt.forEach(t),oPo=r(Bye," \u2014 "),Vj=n(Bye,"A",{href:!0});var Htt=s(Vj);rPo=r(Htt,"FlaubertForQuestionAnsweringSimple"),Htt.forEach(t),tPo=r(Bye," (FlauBERT model)"),Bye.forEach(t),aPo=i(P),L2=n(P,"LI",{});var Pye=s(L2);Jde=n(Pye,"STRONG",{});var Utt=s(Jde);nPo=r(Utt,"fnet"),Utt.forEach(t),sPo=r(Pye," \u2014 "),Xj=n(Pye,"A",{href:!0});var Jtt=s(Xj);lPo=r(Jtt,"FNetForQuestionAnswering"),Jtt.forEach(t),iPo=r(Pye," (FNet model)"),Pye.forEach(t),dPo=i(P),x2=n(P,"LI",{});var $ye=s(x2);Yde=n($ye,"STRONG",{});var Ytt=s(Yde);cPo=r(Ytt,"funnel"),Ytt.forEach(t),fPo=r($ye," \u2014 "),zj=n($ye,"A",{href:!0});var Ktt=s(zj);mPo=r(Ktt,"FunnelForQuestionAnswering"),Ktt.forEach(t),gPo=r($ye," (Funnel Transformer model)"),$ye.forEach(t),hPo=i(P),k2=n(P,"LI",{});var Iye=s(k2);Kde=n(Iye,"STRONG",{});var Ztt=s(Kde);pPo=r(Ztt,"gptj"),Ztt.forEach(t),_Po=r(Iye," \u2014 "),Qj=n(Iye,"A",{href:!0});var eat=s(Qj);uPo=r(eat,"GPTJForQuestionAnswering"),eat.forEach(t),bPo=r(Iye," (GPT-J model)"),Iye.forEach(t),FPo=i(P),S2=n(P,"LI",{});var qye=s(S2);Zde=n(qye,"STRONG",{});var oat=s(Zde);vPo=r(oat,"ibert"),oat.forEach(t),TPo=r(qye," \u2014 "),Wj=n(qye,"A",{href:!0});var rat=s(Wj);MPo=r(rat,"IBertForQuestionAnswering"),rat.forEach(t),EPo=r(qye," (I-BERT model)"),qye.forEach(t),CPo=i(P),R2=n(P,"LI",{});var Nye=s(R2);ece=n(Nye,"STRONG",{});var tat=s(ece);wPo=r(tat,"layoutlmv2"),tat.forEach(t),APo=r(Nye," \u2014 "),Hj=n(Nye,"A",{href:!0});var aat=s(Hj);yPo=r(aat,"LayoutLMv2ForQuestionAnswering"),aat.forEach(t),LPo=r(Nye," (LayoutLMv2 model)"),Nye.forEach(t),xPo=i(P),B2=n(P,"LI",{});var jye=s(B2);oce=n(jye,"STRONG",{});var nat=s(oce);kPo=r(nat,"led"),nat.forEach(t),SPo=r(jye," \u2014 "),Uj=n(jye,"A",{href:!0});var sat=s(Uj);RPo=r(sat,"LEDForQuestionAnswering"),sat.forEach(t),BPo=r(jye," (LED model)"),jye.forEach(t),PPo=i(P),P2=n(P,"LI",{});var Dye=s(P2);rce=n(Dye,"STRONG",{});var lat=s(rce);$Po=r(lat,"longformer"),lat.forEach(t),IPo=r(Dye," \u2014 "),Jj=n(Dye,"A",{href:!0});var iat=s(Jj);qPo=r(iat,"LongformerForQuestionAnswering"),iat.forEach(t),NPo=r(Dye," (Longformer model)"),Dye.forEach(t),jPo=i(P),$2=n(P,"LI",{});var Gye=s($2);tce=n(Gye,"STRONG",{});var dat=s(tce);DPo=r(dat,"lxmert"),dat.forEach(t),GPo=r(Gye," \u2014 "),Yj=n(Gye,"A",{href:!0});var cat=s(Yj);OPo=r(cat,"LxmertForQuestionAnswering"),cat.forEach(t),VPo=r(Gye," (LXMERT model)"),Gye.forEach(t),XPo=i(P),I2=n(P,"LI",{});var Oye=s(I2);ace=n(Oye,"STRONG",{});var fat=s(ace);zPo=r(fat,"mbart"),fat.forEach(t),QPo=r(Oye," \u2014 "),Kj=n(Oye,"A",{href:!0});var mat=s(Kj);WPo=r(mat,"MBartForQuestionAnswering"),mat.forEach(t),HPo=r(Oye," (mBART model)"),Oye.forEach(t),UPo=i(P),q2=n(P,"LI",{});var Vye=s(q2);nce=n(Vye,"STRONG",{});var gat=s(nce);JPo=r(gat,"megatron-bert"),gat.forEach(t),YPo=r(Vye," \u2014 "),Zj=n(Vye,"A",{href:!0});var hat=s(Zj);KPo=r(hat,"MegatronBertForQuestionAnswering"),hat.forEach(t),ZPo=r(Vye," (MegatronBert model)"),Vye.forEach(t),e$o=i(P),N2=n(P,"LI",{});var Xye=s(N2);sce=n(Xye,"STRONG",{});var pat=s(sce);o$o=r(pat,"mobilebert"),pat.forEach(t),r$o=r(Xye," \u2014 "),eD=n(Xye,"A",{href:!0});var _at=s(eD);t$o=r(_at,"MobileBertForQuestionAnswering"),_at.forEach(t),a$o=r(Xye," (MobileBERT model)"),Xye.forEach(t),n$o=i(P),j2=n(P,"LI",{});var zye=s(j2);lce=n(zye,"STRONG",{});var uat=s(lce);s$o=r(uat,"mpnet"),uat.forEach(t),l$o=r(zye," \u2014 "),oD=n(zye,"A",{href:!0});var bat=s(oD);i$o=r(bat,"MPNetForQuestionAnswering"),bat.forEach(t),d$o=r(zye," (MPNet model)"),zye.forEach(t),c$o=i(P),D2=n(P,"LI",{});var Qye=s(D2);ice=n(Qye,"STRONG",{});var Fat=s(ice);f$o=r(Fat,"nystromformer"),Fat.forEach(t),m$o=r(Qye," \u2014 "),rD=n(Qye,"A",{href:!0});var vat=s(rD);g$o=r(vat,"NystromformerForQuestionAnswering"),vat.forEach(t),h$o=r(Qye," (Nystromformer model)"),Qye.forEach(t),p$o=i(P),G2=n(P,"LI",{});var Wye=s(G2);dce=n(Wye,"STRONG",{});var Tat=s(dce);_$o=r(Tat,"qdqbert"),Tat.forEach(t),u$o=r(Wye," \u2014 "),tD=n(Wye,"A",{href:!0});var Mat=s(tD);b$o=r(Mat,"QDQBertForQuestionAnswering"),Mat.forEach(t),F$o=r(Wye," (QDQBert model)"),Wye.forEach(t),v$o=i(P),O2=n(P,"LI",{});var Hye=s(O2);cce=n(Hye,"STRONG",{});var Eat=s(cce);T$o=r(Eat,"reformer"),Eat.forEach(t),M$o=r(Hye," \u2014 "),aD=n(Hye,"A",{href:!0});var Cat=s(aD);E$o=r(Cat,"ReformerForQuestionAnswering"),Cat.forEach(t),C$o=r(Hye," (Reformer model)"),Hye.forEach(t),w$o=i(P),V2=n(P,"LI",{});var Uye=s(V2);fce=n(Uye,"STRONG",{});var wat=s(fce);A$o=r(wat,"rembert"),wat.forEach(t),y$o=r(Uye," \u2014 "),nD=n(Uye,"A",{href:!0});var Aat=s(nD);L$o=r(Aat,"RemBertForQuestionAnswering"),Aat.forEach(t),x$o=r(Uye," (RemBERT model)"),Uye.forEach(t),k$o=i(P),X2=n(P,"LI",{});var Jye=s(X2);mce=n(Jye,"STRONG",{});var yat=s(mce);S$o=r(yat,"roberta"),yat.forEach(t),R$o=r(Jye," \u2014 "),sD=n(Jye,"A",{href:!0});var Lat=s(sD);B$o=r(Lat,"RobertaForQuestionAnswering"),Lat.forEach(t),P$o=r(Jye," (RoBERTa model)"),Jye.forEach(t),$$o=i(P),z2=n(P,"LI",{});var Yye=s(z2);gce=n(Yye,"STRONG",{});var xat=s(gce);I$o=r(xat,"roformer"),xat.forEach(t),q$o=r(Yye," \u2014 "),lD=n(Yye,"A",{href:!0});var kat=s(lD);N$o=r(kat,"RoFormerForQuestionAnswering"),kat.forEach(t),j$o=r(Yye," (RoFormer model)"),Yye.forEach(t),D$o=i(P),Q2=n(P,"LI",{});var Kye=s(Q2);hce=n(Kye,"STRONG",{});var Sat=s(hce);G$o=r(Sat,"splinter"),Sat.forEach(t),O$o=r(Kye," \u2014 "),iD=n(Kye,"A",{href:!0});var Rat=s(iD);V$o=r(Rat,"SplinterForQuestionAnswering"),Rat.forEach(t),X$o=r(Kye," (Splinter model)"),Kye.forEach(t),z$o=i(P),W2=n(P,"LI",{});var Zye=s(W2);pce=n(Zye,"STRONG",{});var Bat=s(pce);Q$o=r(Bat,"squeezebert"),Bat.forEach(t),W$o=r(Zye," \u2014 "),dD=n(Zye,"A",{href:!0});var Pat=s(dD);H$o=r(Pat,"SqueezeBertForQuestionAnswering"),Pat.forEach(t),U$o=r(Zye," (SqueezeBERT model)"),Zye.forEach(t),J$o=i(P),H2=n(P,"LI",{});var eLe=s(H2);_ce=n(eLe,"STRONG",{});var $at=s(_ce);Y$o=r($at,"xlm"),$at.forEach(t),K$o=r(eLe," \u2014 "),cD=n(eLe,"A",{href:!0});var Iat=s(cD);Z$o=r(Iat,"XLMForQuestionAnsweringSimple"),Iat.forEach(t),eIo=r(eLe," (XLM model)"),eLe.forEach(t),oIo=i(P),U2=n(P,"LI",{});var oLe=s(U2);uce=n(oLe,"STRONG",{});var qat=s(uce);rIo=r(qat,"xlm-roberta"),qat.forEach(t),tIo=r(oLe," \u2014 "),fD=n(oLe,"A",{href:!0});var Nat=s(fD);aIo=r(Nat,"XLMRobertaForQuestionAnswering"),Nat.forEach(t),nIo=r(oLe," (XLM-RoBERTa model)"),oLe.forEach(t),sIo=i(P),J2=n(P,"LI",{});var rLe=s(J2);bce=n(rLe,"STRONG",{});var jat=s(bce);lIo=r(jat,"xlm-roberta-xl"),jat.forEach(t),iIo=r(rLe," \u2014 "),mD=n(rLe,"A",{href:!0});var Dat=s(mD);dIo=r(Dat,"XLMRobertaXLForQuestionAnswering"),Dat.forEach(t),cIo=r(rLe," (XLM-RoBERTa-XL model)"),rLe.forEach(t),fIo=i(P),Y2=n(P,"LI",{});var tLe=s(Y2);Fce=n(tLe,"STRONG",{});var Gat=s(Fce);mIo=r(Gat,"xlnet"),Gat.forEach(t),gIo=r(tLe," \u2014 "),gD=n(tLe,"A",{href:!0});var Oat=s(gD);hIo=r(Oat,"XLNetForQuestionAnsweringSimple"),Oat.forEach(t),pIo=r(tLe," (XLNet model)"),tLe.forEach(t),_Io=i(P),K2=n(P,"LI",{});var aLe=s(K2);vce=n(aLe,"STRONG",{});var Vat=s(vce);uIo=r(Vat,"yoso"),Vat.forEach(t),bIo=r(aLe," \u2014 "),hD=n(aLe,"A",{href:!0});var Xat=s(hD);FIo=r(Xat,"YosoForQuestionAnswering"),Xat.forEach(t),vIo=r(aLe," (YOSO model)"),aLe.forEach(t),P.forEach(t),TIo=i(Ut),Z2=n(Ut,"P",{});var nLe=s(Z2);MIo=r(nLe,"The model is set in evaluation mode by default using "),Tce=n(nLe,"CODE",{});var zat=s(Tce);EIo=r(zat,"model.eval()"),zat.forEach(t),CIo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mce=n(nLe,"CODE",{});var Qat=s(Mce);wIo=r(Qat,"model.train()"),Qat.forEach(t),nLe.forEach(t),AIo=i(Ut),Ece=n(Ut,"P",{});var Wat=s(Ece);yIo=r(Wat,"Examples:"),Wat.forEach(t),LIo=i(Ut),m(cA.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),uRe=i(c),yd=n(c,"H2",{class:!0});var APe=s(yd);eF=n(APe,"A",{id:!0,class:!0,href:!0});var Hat=s(eF);Cce=n(Hat,"SPAN",{});var Uat=s(Cce);m(fA.$$.fragment,Uat),Uat.forEach(t),Hat.forEach(t),xIo=i(APe),wce=n(APe,"SPAN",{});var Jat=s(wce);kIo=r(Jat,"AutoModelForTableQuestionAnswering"),Jat.forEach(t),APe.forEach(t),bRe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(mA.$$.fragment,hl),SIo=i(hl),Ld=n(hl,"P",{});var _U=s(Ld);RIo=r(_U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),pD=n(_U,"A",{href:!0});var Yat=s(pD);BIo=r(Yat,"from_pretrained()"),Yat.forEach(t),PIo=r(_U," class method or the "),_D=n(_U,"A",{href:!0});var Kat=s(_D);$Io=r(Kat,"from_config()"),Kat.forEach(t),IIo=r(_U,` class
method.`),_U.forEach(t),qIo=i(hl),gA=n(hl,"P",{});var yPe=s(gA);NIo=r(yPe,"This class cannot be instantiated directly using "),Ace=n(yPe,"CODE",{});var Zat=s(Ace);jIo=r(Zat,"__init__()"),Zat.forEach(t),DIo=r(yPe," (throws an error)."),yPe.forEach(t),GIo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(hA.$$.fragment,pl),OIo=i(pl),yce=n(pl,"P",{});var ent=s(yce);VIo=r(ent,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ent.forEach(t),XIo=i(pl),xd=n(pl,"P",{});var uU=s(xd);zIo=r(uU,`Note:
Loading a model from its configuration file does `),Lce=n(uU,"STRONG",{});var ont=s(Lce);QIo=r(ont,"not"),ont.forEach(t),WIo=r(uU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uD=n(uU,"A",{href:!0});var rnt=s(uD);HIo=r(rnt,"from_pretrained()"),rnt.forEach(t),UIo=r(uU," to load the model weights."),uU.forEach(t),JIo=i(pl),xce=n(pl,"P",{});var tnt=s(xce);YIo=r(tnt,"Examples:"),tnt.forEach(t),KIo=i(pl),m(pA.$$.fragment,pl),pl.forEach(t),ZIo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(_A.$$.fragment,Jt),eqo=i(Jt),kce=n(Jt,"P",{});var ant=s(kce);oqo=r(ant,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ant.forEach(t),rqo=i(Jt),en=n(Jt,"P",{});var xC=s(en);tqo=r(xC,"The model class to instantiate is selected based on the "),Sce=n(xC,"CODE",{});var nnt=s(Sce);aqo=r(nnt,"model_type"),nnt.forEach(t),nqo=r(xC,` property of the config object (either
passed as an argument or loaded from `),Rce=n(xC,"CODE",{});var snt=s(Rce);sqo=r(snt,"pretrained_model_name_or_path"),snt.forEach(t),lqo=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bce=n(xC,"CODE",{});var lnt=s(Bce);iqo=r(lnt,"pretrained_model_name_or_path"),lnt.forEach(t),dqo=r(xC,":"),xC.forEach(t),cqo=i(Jt),Pce=n(Jt,"UL",{});var int=s(Pce);oF=n(int,"LI",{});var sLe=s(oF);$ce=n(sLe,"STRONG",{});var dnt=s($ce);fqo=r(dnt,"tapas"),dnt.forEach(t),mqo=r(sLe," \u2014 "),bD=n(sLe,"A",{href:!0});var cnt=s(bD);gqo=r(cnt,"TapasForQuestionAnswering"),cnt.forEach(t),hqo=r(sLe," (TAPAS model)"),sLe.forEach(t),int.forEach(t),pqo=i(Jt),rF=n(Jt,"P",{});var lLe=s(rF);_qo=r(lLe,"The model is set in evaluation mode by default using "),Ice=n(lLe,"CODE",{});var fnt=s(Ice);uqo=r(fnt,"model.eval()"),fnt.forEach(t),bqo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=n(lLe,"CODE",{});var mnt=s(qce);Fqo=r(mnt,"model.train()"),mnt.forEach(t),lLe.forEach(t),vqo=i(Jt),Nce=n(Jt,"P",{});var gnt=s(Nce);Tqo=r(gnt,"Examples:"),gnt.forEach(t),Mqo=i(Jt),m(uA.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),FRe=i(c),kd=n(c,"H2",{class:!0});var LPe=s(kd);tF=n(LPe,"A",{id:!0,class:!0,href:!0});var hnt=s(tF);jce=n(hnt,"SPAN",{});var pnt=s(jce);m(bA.$$.fragment,pnt),pnt.forEach(t),hnt.forEach(t),Eqo=i(LPe),Dce=n(LPe,"SPAN",{});var _nt=s(Dce);Cqo=r(_nt,"AutoModelForImageClassification"),_nt.forEach(t),LPe.forEach(t),vRe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m(FA.$$.fragment,_l),wqo=i(_l),Sd=n(_l,"P",{});var bU=s(Sd);Aqo=r(bU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FD=n(bU,"A",{href:!0});var unt=s(FD);yqo=r(unt,"from_pretrained()"),unt.forEach(t),Lqo=r(bU," class method or the "),vD=n(bU,"A",{href:!0});var bnt=s(vD);xqo=r(bnt,"from_config()"),bnt.forEach(t),kqo=r(bU,` class
method.`),bU.forEach(t),Sqo=i(_l),vA=n(_l,"P",{});var xPe=s(vA);Rqo=r(xPe,"This class cannot be instantiated directly using "),Gce=n(xPe,"CODE",{});var Fnt=s(Gce);Bqo=r(Fnt,"__init__()"),Fnt.forEach(t),Pqo=r(xPe," (throws an error)."),xPe.forEach(t),$qo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(TA.$$.fragment,ul),Iqo=i(ul),Oce=n(ul,"P",{});var vnt=s(Oce);qqo=r(vnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vnt.forEach(t),Nqo=i(ul),Rd=n(ul,"P",{});var FU=s(Rd);jqo=r(FU,`Note:
Loading a model from its configuration file does `),Vce=n(FU,"STRONG",{});var Tnt=s(Vce);Dqo=r(Tnt,"not"),Tnt.forEach(t),Gqo=r(FU,` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=n(FU,"A",{href:!0});var Mnt=s(TD);Oqo=r(Mnt,"from_pretrained()"),Mnt.forEach(t),Vqo=r(FU," to load the model weights."),FU.forEach(t),Xqo=i(ul),Xce=n(ul,"P",{});var Ent=s(Xce);zqo=r(Ent,"Examples:"),Ent.forEach(t),Qqo=i(ul),m(MA.$$.fragment,ul),ul.forEach(t),Wqo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(EA.$$.fragment,Yt),Hqo=i(Yt),zce=n(Yt,"P",{});var Cnt=s(zce);Uqo=r(Cnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Cnt.forEach(t),Jqo=i(Yt),on=n(Yt,"P",{});var kC=s(on);Yqo=r(kC,"The model class to instantiate is selected based on the "),Qce=n(kC,"CODE",{});var wnt=s(Qce);Kqo=r(wnt,"model_type"),wnt.forEach(t),Zqo=r(kC,` property of the config object (either
passed as an argument or loaded from `),Wce=n(kC,"CODE",{});var Ant=s(Wce);eNo=r(Ant,"pretrained_model_name_or_path"),Ant.forEach(t),oNo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hce=n(kC,"CODE",{});var ynt=s(Hce);rNo=r(ynt,"pretrained_model_name_or_path"),ynt.forEach(t),tNo=r(kC,":"),kC.forEach(t),aNo=i(Yt),ge=n(Yt,"UL",{});var Te=s(ge);aF=n(Te,"LI",{});var iLe=s(aF);Uce=n(iLe,"STRONG",{});var Lnt=s(Uce);nNo=r(Lnt,"beit"),Lnt.forEach(t),sNo=r(iLe," \u2014 "),MD=n(iLe,"A",{href:!0});var xnt=s(MD);lNo=r(xnt,"BeitForImageClassification"),xnt.forEach(t),iNo=r(iLe," (BEiT model)"),iLe.forEach(t),dNo=i(Te),nF=n(Te,"LI",{});var dLe=s(nF);Jce=n(dLe,"STRONG",{});var knt=s(Jce);cNo=r(knt,"convnext"),knt.forEach(t),fNo=r(dLe," \u2014 "),ED=n(dLe,"A",{href:!0});var Snt=s(ED);mNo=r(Snt,"ConvNextForImageClassification"),Snt.forEach(t),gNo=r(dLe," (ConvNext model)"),dLe.forEach(t),hNo=i(Te),Gs=n(Te,"LI",{});var s9=s(Gs);Yce=n(s9,"STRONG",{});var Rnt=s(Yce);pNo=r(Rnt,"deit"),Rnt.forEach(t),_No=r(s9," \u2014 "),CD=n(s9,"A",{href:!0});var Bnt=s(CD);uNo=r(Bnt,"DeiTForImageClassification"),Bnt.forEach(t),bNo=r(s9," or "),wD=n(s9,"A",{href:!0});var Pnt=s(wD);FNo=r(Pnt,"DeiTForImageClassificationWithTeacher"),Pnt.forEach(t),vNo=r(s9," (DeiT model)"),s9.forEach(t),TNo=i(Te),sF=n(Te,"LI",{});var cLe=s(sF);Kce=n(cLe,"STRONG",{});var $nt=s(Kce);MNo=r($nt,"imagegpt"),$nt.forEach(t),ENo=r(cLe," \u2014 "),AD=n(cLe,"A",{href:!0});var Int=s(AD);CNo=r(Int,"ImageGPTForImageClassification"),Int.forEach(t),wNo=r(cLe," (ImageGPT model)"),cLe.forEach(t),ANo=i(Te),ma=n(Te,"LI",{});var If=s(ma);Zce=n(If,"STRONG",{});var qnt=s(Zce);yNo=r(qnt,"perceiver"),qnt.forEach(t),LNo=r(If," \u2014 "),yD=n(If,"A",{href:!0});var Nnt=s(yD);xNo=r(Nnt,"PerceiverForImageClassificationLearned"),Nnt.forEach(t),kNo=r(If," or "),LD=n(If,"A",{href:!0});var jnt=s(LD);SNo=r(jnt,"PerceiverForImageClassificationFourier"),jnt.forEach(t),RNo=r(If," or "),xD=n(If,"A",{href:!0});var Dnt=s(xD);BNo=r(Dnt,"PerceiverForImageClassificationConvProcessing"),Dnt.forEach(t),PNo=r(If," (Perceiver model)"),If.forEach(t),$No=i(Te),lF=n(Te,"LI",{});var fLe=s(lF);efe=n(fLe,"STRONG",{});var Gnt=s(efe);INo=r(Gnt,"poolformer"),Gnt.forEach(t),qNo=r(fLe," \u2014 "),kD=n(fLe,"A",{href:!0});var Ont=s(kD);NNo=r(Ont,"PoolFormerForImageClassification"),Ont.forEach(t),jNo=r(fLe," (PoolFormer model)"),fLe.forEach(t),DNo=i(Te),iF=n(Te,"LI",{});var mLe=s(iF);ofe=n(mLe,"STRONG",{});var Vnt=s(ofe);GNo=r(Vnt,"resnet"),Vnt.forEach(t),ONo=r(mLe," \u2014 "),SD=n(mLe,"A",{href:!0});var Xnt=s(SD);VNo=r(Xnt,"ResNetForImageClassification"),Xnt.forEach(t),XNo=r(mLe," (ResNet model)"),mLe.forEach(t),zNo=i(Te),dF=n(Te,"LI",{});var gLe=s(dF);rfe=n(gLe,"STRONG",{});var znt=s(rfe);QNo=r(znt,"segformer"),znt.forEach(t),WNo=r(gLe," \u2014 "),RD=n(gLe,"A",{href:!0});var Qnt=s(RD);HNo=r(Qnt,"SegformerForImageClassification"),Qnt.forEach(t),UNo=r(gLe," (SegFormer model)"),gLe.forEach(t),JNo=i(Te),cF=n(Te,"LI",{});var hLe=s(cF);tfe=n(hLe,"STRONG",{});var Wnt=s(tfe);YNo=r(Wnt,"swin"),Wnt.forEach(t),KNo=r(hLe," \u2014 "),BD=n(hLe,"A",{href:!0});var Hnt=s(BD);ZNo=r(Hnt,"SwinForImageClassification"),Hnt.forEach(t),ejo=r(hLe," (Swin model)"),hLe.forEach(t),ojo=i(Te),fF=n(Te,"LI",{});var pLe=s(fF);afe=n(pLe,"STRONG",{});var Unt=s(afe);rjo=r(Unt,"van"),Unt.forEach(t),tjo=r(pLe," \u2014 "),PD=n(pLe,"A",{href:!0});var Jnt=s(PD);ajo=r(Jnt,"VanForImageClassification"),Jnt.forEach(t),njo=r(pLe," (VAN model)"),pLe.forEach(t),sjo=i(Te),mF=n(Te,"LI",{});var _Le=s(mF);nfe=n(_Le,"STRONG",{});var Ynt=s(nfe);ljo=r(Ynt,"vit"),Ynt.forEach(t),ijo=r(_Le," \u2014 "),$D=n(_Le,"A",{href:!0});var Knt=s($D);djo=r(Knt,"ViTForImageClassification"),Knt.forEach(t),cjo=r(_Le," (ViT model)"),_Le.forEach(t),Te.forEach(t),fjo=i(Yt),gF=n(Yt,"P",{});var uLe=s(gF);mjo=r(uLe,"The model is set in evaluation mode by default using "),sfe=n(uLe,"CODE",{});var Znt=s(sfe);gjo=r(Znt,"model.eval()"),Znt.forEach(t),hjo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(uLe,"CODE",{});var est=s(lfe);pjo=r(est,"model.train()"),est.forEach(t),uLe.forEach(t),_jo=i(Yt),ife=n(Yt,"P",{});var ost=s(ife);ujo=r(ost,"Examples:"),ost.forEach(t),bjo=i(Yt),m(CA.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),TRe=i(c),Bd=n(c,"H2",{class:!0});var kPe=s(Bd);hF=n(kPe,"A",{id:!0,class:!0,href:!0});var rst=s(hF);dfe=n(rst,"SPAN",{});var tst=s(dfe);m(wA.$$.fragment,tst),tst.forEach(t),rst.forEach(t),Fjo=i(kPe),cfe=n(kPe,"SPAN",{});var ast=s(cfe);vjo=r(ast,"AutoModelForVision2Seq"),ast.forEach(t),kPe.forEach(t),MRe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(AA.$$.fragment,bl),Tjo=i(bl),Pd=n(bl,"P",{});var vU=s(Pd);Mjo=r(vU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),ID=n(vU,"A",{href:!0});var nst=s(ID);Ejo=r(nst,"from_pretrained()"),nst.forEach(t),Cjo=r(vU," class method or the "),qD=n(vU,"A",{href:!0});var sst=s(qD);wjo=r(sst,"from_config()"),sst.forEach(t),Ajo=r(vU,` class
method.`),vU.forEach(t),yjo=i(bl),yA=n(bl,"P",{});var SPe=s(yA);Ljo=r(SPe,"This class cannot be instantiated directly using "),ffe=n(SPe,"CODE",{});var lst=s(ffe);xjo=r(lst,"__init__()"),lst.forEach(t),kjo=r(SPe," (throws an error)."),SPe.forEach(t),Sjo=i(bl),rt=n(bl,"DIV",{class:!0});var Fl=s(rt);m(LA.$$.fragment,Fl),Rjo=i(Fl),mfe=n(Fl,"P",{});var ist=s(mfe);Bjo=r(ist,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ist.forEach(t),Pjo=i(Fl),$d=n(Fl,"P",{});var TU=s($d);$jo=r(TU,`Note:
Loading a model from its configuration file does `),gfe=n(TU,"STRONG",{});var dst=s(gfe);Ijo=r(dst,"not"),dst.forEach(t),qjo=r(TU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(TU,"A",{href:!0});var cst=s(ND);Njo=r(cst,"from_pretrained()"),cst.forEach(t),jjo=r(TU," to load the model weights."),TU.forEach(t),Djo=i(Fl),hfe=n(Fl,"P",{});var fst=s(hfe);Gjo=r(fst,"Examples:"),fst.forEach(t),Ojo=i(Fl),m(xA.$$.fragment,Fl),Fl.forEach(t),Vjo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(kA.$$.fragment,Kt),Xjo=i(Kt),pfe=n(Kt,"P",{});var mst=s(pfe);zjo=r(mst,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mst.forEach(t),Qjo=i(Kt),rn=n(Kt,"P",{});var SC=s(rn);Wjo=r(SC,"The model class to instantiate is selected based on the "),_fe=n(SC,"CODE",{});var gst=s(_fe);Hjo=r(gst,"model_type"),gst.forEach(t),Ujo=r(SC,` property of the config object (either
passed as an argument or loaded from `),ufe=n(SC,"CODE",{});var hst=s(ufe);Jjo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),Yjo=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bfe=n(SC,"CODE",{});var pst=s(bfe);Kjo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),Zjo=r(SC,":"),SC.forEach(t),eDo=i(Kt),Ffe=n(Kt,"UL",{});var _st=s(Ffe);pF=n(_st,"LI",{});var bLe=s(pF);vfe=n(bLe,"STRONG",{});var ust=s(vfe);oDo=r(ust,"vision-encoder-decoder"),ust.forEach(t),rDo=r(bLe," \u2014 "),jD=n(bLe,"A",{href:!0});var bst=s(jD);tDo=r(bst,"VisionEncoderDecoderModel"),bst.forEach(t),aDo=r(bLe," (Vision Encoder decoder model)"),bLe.forEach(t),_st.forEach(t),nDo=i(Kt),_F=n(Kt,"P",{});var FLe=s(_F);sDo=r(FLe,"The model is set in evaluation mode by default using "),Tfe=n(FLe,"CODE",{});var Fst=s(Tfe);lDo=r(Fst,"model.eval()"),Fst.forEach(t),iDo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(FLe,"CODE",{});var vst=s(Mfe);dDo=r(vst,"model.train()"),vst.forEach(t),FLe.forEach(t),cDo=i(Kt),Efe=n(Kt,"P",{});var Tst=s(Efe);fDo=r(Tst,"Examples:"),Tst.forEach(t),mDo=i(Kt),m(SA.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),ERe=i(c),Id=n(c,"H2",{class:!0});var RPe=s(Id);uF=n(RPe,"A",{id:!0,class:!0,href:!0});var Mst=s(uF);Cfe=n(Mst,"SPAN",{});var Est=s(Cfe);m(RA.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),gDo=i(RPe),wfe=n(RPe,"SPAN",{});var Cst=s(wfe);hDo=r(Cst,"AutoModelForAudioClassification"),Cst.forEach(t),RPe.forEach(t),CRe=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(BA.$$.fragment,vl),pDo=i(vl),qd=n(vl,"P",{});var MU=s(qd);_Do=r(MU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),DD=n(MU,"A",{href:!0});var wst=s(DD);uDo=r(wst,"from_pretrained()"),wst.forEach(t),bDo=r(MU," class method or the "),GD=n(MU,"A",{href:!0});var Ast=s(GD);FDo=r(Ast,"from_config()"),Ast.forEach(t),vDo=r(MU,` class
method.`),MU.forEach(t),TDo=i(vl),PA=n(vl,"P",{});var BPe=s(PA);MDo=r(BPe,"This class cannot be instantiated directly using "),Afe=n(BPe,"CODE",{});var yst=s(Afe);EDo=r(yst,"__init__()"),yst.forEach(t),CDo=r(BPe," (throws an error)."),BPe.forEach(t),wDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m($A.$$.fragment,Tl),ADo=i(Tl),yfe=n(Tl,"P",{});var Lst=s(yfe);yDo=r(Lst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lst.forEach(t),LDo=i(Tl),Nd=n(Tl,"P",{});var EU=s(Nd);xDo=r(EU,`Note:
Loading a model from its configuration file does `),Lfe=n(EU,"STRONG",{});var xst=s(Lfe);kDo=r(xst,"not"),xst.forEach(t),SDo=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(EU,"A",{href:!0});var kst=s(OD);RDo=r(kst,"from_pretrained()"),kst.forEach(t),BDo=r(EU," to load the model weights."),EU.forEach(t),PDo=i(Tl),xfe=n(Tl,"P",{});var Sst=s(xfe);$Do=r(Sst,"Examples:"),Sst.forEach(t),IDo=i(Tl),m(IA.$$.fragment,Tl),Tl.forEach(t),qDo=i(vl),Je=n(vl,"DIV",{class:!0});var Zt=s(Je);m(qA.$$.fragment,Zt),NDo=i(Zt),kfe=n(Zt,"P",{});var Rst=s(kfe);jDo=r(Rst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Rst.forEach(t),DDo=i(Zt),tn=n(Zt,"P",{});var RC=s(tn);GDo=r(RC,"The model class to instantiate is selected based on the "),Sfe=n(RC,"CODE",{});var Bst=s(Sfe);ODo=r(Bst,"model_type"),Bst.forEach(t),VDo=r(RC,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(RC,"CODE",{});var Pst=s(Rfe);XDo=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),zDo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(RC,"CODE",{});var $st=s(Bfe);QDo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),WDo=r(RC,":"),RC.forEach(t),HDo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);bF=n(Do,"LI",{});var vLe=s(bF);Pfe=n(vLe,"STRONG",{});var Ist=s(Pfe);UDo=r(Ist,"data2vec-audio"),Ist.forEach(t),JDo=r(vLe," \u2014 "),VD=n(vLe,"A",{href:!0});var qst=s(VD);YDo=r(qst,"Data2VecAudioForSequenceClassification"),qst.forEach(t),KDo=r(vLe," (Data2VecAudio model)"),vLe.forEach(t),ZDo=i(Do),FF=n(Do,"LI",{});var TLe=s(FF);$fe=n(TLe,"STRONG",{});var Nst=s($fe);eGo=r(Nst,"hubert"),Nst.forEach(t),oGo=r(TLe," \u2014 "),XD=n(TLe,"A",{href:!0});var jst=s(XD);rGo=r(jst,"HubertForSequenceClassification"),jst.forEach(t),tGo=r(TLe," (Hubert model)"),TLe.forEach(t),aGo=i(Do),vF=n(Do,"LI",{});var MLe=s(vF);Ife=n(MLe,"STRONG",{});var Dst=s(Ife);nGo=r(Dst,"sew"),Dst.forEach(t),sGo=r(MLe," \u2014 "),zD=n(MLe,"A",{href:!0});var Gst=s(zD);lGo=r(Gst,"SEWForSequenceClassification"),Gst.forEach(t),iGo=r(MLe," (SEW model)"),MLe.forEach(t),dGo=i(Do),TF=n(Do,"LI",{});var ELe=s(TF);qfe=n(ELe,"STRONG",{});var Ost=s(qfe);cGo=r(Ost,"sew-d"),Ost.forEach(t),fGo=r(ELe," \u2014 "),QD=n(ELe,"A",{href:!0});var Vst=s(QD);mGo=r(Vst,"SEWDForSequenceClassification"),Vst.forEach(t),gGo=r(ELe," (SEW-D model)"),ELe.forEach(t),hGo=i(Do),MF=n(Do,"LI",{});var CLe=s(MF);Nfe=n(CLe,"STRONG",{});var Xst=s(Nfe);pGo=r(Xst,"unispeech"),Xst.forEach(t),_Go=r(CLe," \u2014 "),WD=n(CLe,"A",{href:!0});var zst=s(WD);uGo=r(zst,"UniSpeechForSequenceClassification"),zst.forEach(t),bGo=r(CLe," (UniSpeech model)"),CLe.forEach(t),FGo=i(Do),EF=n(Do,"LI",{});var wLe=s(EF);jfe=n(wLe,"STRONG",{});var Qst=s(jfe);vGo=r(Qst,"unispeech-sat"),Qst.forEach(t),TGo=r(wLe," \u2014 "),HD=n(wLe,"A",{href:!0});var Wst=s(HD);MGo=r(Wst,"UniSpeechSatForSequenceClassification"),Wst.forEach(t),EGo=r(wLe," (UniSpeechSat model)"),wLe.forEach(t),CGo=i(Do),CF=n(Do,"LI",{});var ALe=s(CF);Dfe=n(ALe,"STRONG",{});var Hst=s(Dfe);wGo=r(Hst,"wav2vec2"),Hst.forEach(t),AGo=r(ALe," \u2014 "),UD=n(ALe,"A",{href:!0});var Ust=s(UD);yGo=r(Ust,"Wav2Vec2ForSequenceClassification"),Ust.forEach(t),LGo=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),xGo=i(Do),wF=n(Do,"LI",{});var yLe=s(wF);Gfe=n(yLe,"STRONG",{});var Jst=s(Gfe);kGo=r(Jst,"wavlm"),Jst.forEach(t),SGo=r(yLe," \u2014 "),JD=n(yLe,"A",{href:!0});var Yst=s(JD);RGo=r(Yst,"WavLMForSequenceClassification"),Yst.forEach(t),BGo=r(yLe," (WavLM model)"),yLe.forEach(t),Do.forEach(t),PGo=i(Zt),AF=n(Zt,"P",{});var LLe=s(AF);$Go=r(LLe,"The model is set in evaluation mode by default using "),Ofe=n(LLe,"CODE",{});var Kst=s(Ofe);IGo=r(Kst,"model.eval()"),Kst.forEach(t),qGo=r(LLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vfe=n(LLe,"CODE",{});var Zst=s(Vfe);NGo=r(Zst,"model.train()"),Zst.forEach(t),LLe.forEach(t),jGo=i(Zt),Xfe=n(Zt,"P",{});var elt=s(Xfe);DGo=r(elt,"Examples:"),elt.forEach(t),GGo=i(Zt),m(NA.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),wRe=i(c),jd=n(c,"H2",{class:!0});var PPe=s(jd);yF=n(PPe,"A",{id:!0,class:!0,href:!0});var olt=s(yF);zfe=n(olt,"SPAN",{});var rlt=s(zfe);m(jA.$$.fragment,rlt),rlt.forEach(t),olt.forEach(t),OGo=i(PPe),Qfe=n(PPe,"SPAN",{});var tlt=s(Qfe);VGo=r(tlt,"AutoModelForAudioFrameClassification"),tlt.forEach(t),PPe.forEach(t),ARe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(DA.$$.fragment,Ml),XGo=i(Ml),Dd=n(Ml,"P",{});var CU=s(Dd);zGo=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YD=n(CU,"A",{href:!0});var alt=s(YD);QGo=r(alt,"from_pretrained()"),alt.forEach(t),WGo=r(CU," class method or the "),KD=n(CU,"A",{href:!0});var nlt=s(KD);HGo=r(nlt,"from_config()"),nlt.forEach(t),UGo=r(CU,` class
method.`),CU.forEach(t),JGo=i(Ml),GA=n(Ml,"P",{});var $Pe=s(GA);YGo=r($Pe,"This class cannot be instantiated directly using "),Wfe=n($Pe,"CODE",{});var slt=s(Wfe);KGo=r(slt,"__init__()"),slt.forEach(t),ZGo=r($Pe," (throws an error)."),$Pe.forEach(t),eOo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(OA.$$.fragment,El),oOo=i(El),Hfe=n(El,"P",{});var llt=s(Hfe);rOo=r(llt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),llt.forEach(t),tOo=i(El),Gd=n(El,"P",{});var wU=s(Gd);aOo=r(wU,`Note:
Loading a model from its configuration file does `),Ufe=n(wU,"STRONG",{});var ilt=s(Ufe);nOo=r(ilt,"not"),ilt.forEach(t),sOo=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(wU,"A",{href:!0});var dlt=s(ZD);lOo=r(dlt,"from_pretrained()"),dlt.forEach(t),iOo=r(wU," to load the model weights."),wU.forEach(t),dOo=i(El),Jfe=n(El,"P",{});var clt=s(Jfe);cOo=r(clt,"Examples:"),clt.forEach(t),fOo=i(El),m(VA.$$.fragment,El),El.forEach(t),mOo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(XA.$$.fragment,ea),gOo=i(ea),Yfe=n(ea,"P",{});var flt=s(Yfe);hOo=r(flt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),flt.forEach(t),pOo=i(ea),an=n(ea,"P",{});var BC=s(an);_Oo=r(BC,"The model class to instantiate is selected based on the "),Kfe=n(BC,"CODE",{});var mlt=s(Kfe);uOo=r(mlt,"model_type"),mlt.forEach(t),bOo=r(BC,` property of the config object (either
passed as an argument or loaded from `),Zfe=n(BC,"CODE",{});var glt=s(Zfe);FOo=r(glt,"pretrained_model_name_or_path"),glt.forEach(t),vOo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eme=n(BC,"CODE",{});var hlt=s(eme);TOo=r(hlt,"pretrained_model_name_or_path"),hlt.forEach(t),MOo=r(BC,":"),BC.forEach(t),EOo=i(ea),nn=n(ea,"UL",{});var PC=s(nn);LF=n(PC,"LI",{});var xLe=s(LF);ome=n(xLe,"STRONG",{});var plt=s(ome);COo=r(plt,"data2vec-audio"),plt.forEach(t),wOo=r(xLe," \u2014 "),eG=n(xLe,"A",{href:!0});var _lt=s(eG);AOo=r(_lt,"Data2VecAudioForAudioFrameClassification"),_lt.forEach(t),yOo=r(xLe," (Data2VecAudio model)"),xLe.forEach(t),LOo=i(PC),xF=n(PC,"LI",{});var kLe=s(xF);rme=n(kLe,"STRONG",{});var ult=s(rme);xOo=r(ult,"unispeech-sat"),ult.forEach(t),kOo=r(kLe," \u2014 "),oG=n(kLe,"A",{href:!0});var blt=s(oG);SOo=r(blt,"UniSpeechSatForAudioFrameClassification"),blt.forEach(t),ROo=r(kLe," (UniSpeechSat model)"),kLe.forEach(t),BOo=i(PC),kF=n(PC,"LI",{});var SLe=s(kF);tme=n(SLe,"STRONG",{});var Flt=s(tme);POo=r(Flt,"wav2vec2"),Flt.forEach(t),$Oo=r(SLe," \u2014 "),rG=n(SLe,"A",{href:!0});var vlt=s(rG);IOo=r(vlt,"Wav2Vec2ForAudioFrameClassification"),vlt.forEach(t),qOo=r(SLe," (Wav2Vec2 model)"),SLe.forEach(t),NOo=i(PC),SF=n(PC,"LI",{});var RLe=s(SF);ame=n(RLe,"STRONG",{});var Tlt=s(ame);jOo=r(Tlt,"wavlm"),Tlt.forEach(t),DOo=r(RLe," \u2014 "),tG=n(RLe,"A",{href:!0});var Mlt=s(tG);GOo=r(Mlt,"WavLMForAudioFrameClassification"),Mlt.forEach(t),OOo=r(RLe," (WavLM model)"),RLe.forEach(t),PC.forEach(t),VOo=i(ea),RF=n(ea,"P",{});var BLe=s(RF);XOo=r(BLe,"The model is set in evaluation mode by default using "),nme=n(BLe,"CODE",{});var Elt=s(nme);zOo=r(Elt,"model.eval()"),Elt.forEach(t),QOo=r(BLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sme=n(BLe,"CODE",{});var Clt=s(sme);WOo=r(Clt,"model.train()"),Clt.forEach(t),BLe.forEach(t),HOo=i(ea),lme=n(ea,"P",{});var wlt=s(lme);UOo=r(wlt,"Examples:"),wlt.forEach(t),JOo=i(ea),m(zA.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),yRe=i(c),Od=n(c,"H2",{class:!0});var IPe=s(Od);BF=n(IPe,"A",{id:!0,class:!0,href:!0});var Alt=s(BF);ime=n(Alt,"SPAN",{});var ylt=s(ime);m(QA.$$.fragment,ylt),ylt.forEach(t),Alt.forEach(t),YOo=i(IPe),dme=n(IPe,"SPAN",{});var Llt=s(dme);KOo=r(Llt,"AutoModelForCTC"),Llt.forEach(t),IPe.forEach(t),LRe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(WA.$$.fragment,Cl),ZOo=i(Cl),Vd=n(Cl,"P",{});var AU=s(Vd);eVo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),aG=n(AU,"A",{href:!0});var xlt=s(aG);oVo=r(xlt,"from_pretrained()"),xlt.forEach(t),rVo=r(AU," class method or the "),nG=n(AU,"A",{href:!0});var klt=s(nG);tVo=r(klt,"from_config()"),klt.forEach(t),aVo=r(AU,` class
method.`),AU.forEach(t),nVo=i(Cl),HA=n(Cl,"P",{});var qPe=s(HA);sVo=r(qPe,"This class cannot be instantiated directly using "),cme=n(qPe,"CODE",{});var Slt=s(cme);lVo=r(Slt,"__init__()"),Slt.forEach(t),iVo=r(qPe," (throws an error)."),qPe.forEach(t),dVo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(UA.$$.fragment,wl),cVo=i(wl),fme=n(wl,"P",{});var Rlt=s(fme);fVo=r(Rlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Rlt.forEach(t),mVo=i(wl),Xd=n(wl,"P",{});var yU=s(Xd);gVo=r(yU,`Note:
Loading a model from its configuration file does `),mme=n(yU,"STRONG",{});var Blt=s(mme);hVo=r(Blt,"not"),Blt.forEach(t),pVo=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),sG=n(yU,"A",{href:!0});var Plt=s(sG);_Vo=r(Plt,"from_pretrained()"),Plt.forEach(t),uVo=r(yU," to load the model weights."),yU.forEach(t),bVo=i(wl),gme=n(wl,"P",{});var $lt=s(gme);FVo=r($lt,"Examples:"),$lt.forEach(t),vVo=i(wl),m(JA.$$.fragment,wl),wl.forEach(t),TVo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(YA.$$.fragment,oa),MVo=i(oa),hme=n(oa,"P",{});var Ilt=s(hme);EVo=r(Ilt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Ilt.forEach(t),CVo=i(oa),sn=n(oa,"P",{});var $C=s(sn);wVo=r($C,"The model class to instantiate is selected based on the "),pme=n($C,"CODE",{});var qlt=s(pme);AVo=r(qlt,"model_type"),qlt.forEach(t),yVo=r($C,` property of the config object (either
passed as an argument or loaded from `),_me=n($C,"CODE",{});var Nlt=s(_me);LVo=r(Nlt,"pretrained_model_name_or_path"),Nlt.forEach(t),xVo=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ume=n($C,"CODE",{});var jlt=s(ume);kVo=r(jlt,"pretrained_model_name_or_path"),jlt.forEach(t),SVo=r($C,":"),$C.forEach(t),RVo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);PF=n(Go,"LI",{});var PLe=s(PF);bme=n(PLe,"STRONG",{});var Dlt=s(bme);BVo=r(Dlt,"data2vec-audio"),Dlt.forEach(t),PVo=r(PLe," \u2014 "),lG=n(PLe,"A",{href:!0});var Glt=s(lG);$Vo=r(Glt,"Data2VecAudioForCTC"),Glt.forEach(t),IVo=r(PLe," (Data2VecAudio model)"),PLe.forEach(t),qVo=i(Go),$F=n(Go,"LI",{});var $Le=s($F);Fme=n($Le,"STRONG",{});var Olt=s(Fme);NVo=r(Olt,"hubert"),Olt.forEach(t),jVo=r($Le," \u2014 "),iG=n($Le,"A",{href:!0});var Vlt=s(iG);DVo=r(Vlt,"HubertForCTC"),Vlt.forEach(t),GVo=r($Le," (Hubert model)"),$Le.forEach(t),OVo=i(Go),IF=n(Go,"LI",{});var ILe=s(IF);vme=n(ILe,"STRONG",{});var Xlt=s(vme);VVo=r(Xlt,"sew"),Xlt.forEach(t),XVo=r(ILe," \u2014 "),dG=n(ILe,"A",{href:!0});var zlt=s(dG);zVo=r(zlt,"SEWForCTC"),zlt.forEach(t),QVo=r(ILe," (SEW model)"),ILe.forEach(t),WVo=i(Go),qF=n(Go,"LI",{});var qLe=s(qF);Tme=n(qLe,"STRONG",{});var Qlt=s(Tme);HVo=r(Qlt,"sew-d"),Qlt.forEach(t),UVo=r(qLe," \u2014 "),cG=n(qLe,"A",{href:!0});var Wlt=s(cG);JVo=r(Wlt,"SEWDForCTC"),Wlt.forEach(t),YVo=r(qLe," (SEW-D model)"),qLe.forEach(t),KVo=i(Go),NF=n(Go,"LI",{});var NLe=s(NF);Mme=n(NLe,"STRONG",{});var Hlt=s(Mme);ZVo=r(Hlt,"unispeech"),Hlt.forEach(t),eXo=r(NLe," \u2014 "),fG=n(NLe,"A",{href:!0});var Ult=s(fG);oXo=r(Ult,"UniSpeechForCTC"),Ult.forEach(t),rXo=r(NLe," (UniSpeech model)"),NLe.forEach(t),tXo=i(Go),jF=n(Go,"LI",{});var jLe=s(jF);Eme=n(jLe,"STRONG",{});var Jlt=s(Eme);aXo=r(Jlt,"unispeech-sat"),Jlt.forEach(t),nXo=r(jLe," \u2014 "),mG=n(jLe,"A",{href:!0});var Ylt=s(mG);sXo=r(Ylt,"UniSpeechSatForCTC"),Ylt.forEach(t),lXo=r(jLe," (UniSpeechSat model)"),jLe.forEach(t),iXo=i(Go),DF=n(Go,"LI",{});var DLe=s(DF);Cme=n(DLe,"STRONG",{});var Klt=s(Cme);dXo=r(Klt,"wav2vec2"),Klt.forEach(t),cXo=r(DLe," \u2014 "),gG=n(DLe,"A",{href:!0});var Zlt=s(gG);fXo=r(Zlt,"Wav2Vec2ForCTC"),Zlt.forEach(t),mXo=r(DLe," (Wav2Vec2 model)"),DLe.forEach(t),gXo=i(Go),GF=n(Go,"LI",{});var GLe=s(GF);wme=n(GLe,"STRONG",{});var eit=s(wme);hXo=r(eit,"wavlm"),eit.forEach(t),pXo=r(GLe," \u2014 "),hG=n(GLe,"A",{href:!0});var oit=s(hG);_Xo=r(oit,"WavLMForCTC"),oit.forEach(t),uXo=r(GLe," (WavLM model)"),GLe.forEach(t),Go.forEach(t),bXo=i(oa),OF=n(oa,"P",{});var OLe=s(OF);FXo=r(OLe,"The model is set in evaluation mode by default using "),Ame=n(OLe,"CODE",{});var rit=s(Ame);vXo=r(rit,"model.eval()"),rit.forEach(t),TXo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yme=n(OLe,"CODE",{});var tit=s(yme);MXo=r(tit,"model.train()"),tit.forEach(t),OLe.forEach(t),EXo=i(oa),Lme=n(oa,"P",{});var ait=s(Lme);CXo=r(ait,"Examples:"),ait.forEach(t),wXo=i(oa),m(KA.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),xRe=i(c),zd=n(c,"H2",{class:!0});var NPe=s(zd);VF=n(NPe,"A",{id:!0,class:!0,href:!0});var nit=s(VF);xme=n(nit,"SPAN",{});var sit=s(xme);m(ZA.$$.fragment,sit),sit.forEach(t),nit.forEach(t),AXo=i(NPe),kme=n(NPe,"SPAN",{});var lit=s(kme);yXo=r(lit,"AutoModelForSpeechSeq2Seq"),lit.forEach(t),NPe.forEach(t),kRe=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(e0.$$.fragment,Al),LXo=i(Al),Qd=n(Al,"P",{});var LU=s(Qd);xXo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),pG=n(LU,"A",{href:!0});var iit=s(pG);kXo=r(iit,"from_pretrained()"),iit.forEach(t),SXo=r(LU," class method or the "),_G=n(LU,"A",{href:!0});var dit=s(_G);RXo=r(dit,"from_config()"),dit.forEach(t),BXo=r(LU,` class
method.`),LU.forEach(t),PXo=i(Al),o0=n(Al,"P",{});var jPe=s(o0);$Xo=r(jPe,"This class cannot be instantiated directly using "),Sme=n(jPe,"CODE",{});var cit=s(Sme);IXo=r(cit,"__init__()"),cit.forEach(t),qXo=r(jPe," (throws an error)."),jPe.forEach(t),NXo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(r0.$$.fragment,yl),jXo=i(yl),Rme=n(yl,"P",{});var fit=s(Rme);DXo=r(fit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fit.forEach(t),GXo=i(yl),Wd=n(yl,"P",{});var xU=s(Wd);OXo=r(xU,`Note:
Loading a model from its configuration file does `),Bme=n(xU,"STRONG",{});var mit=s(Bme);VXo=r(mit,"not"),mit.forEach(t),XXo=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(xU,"A",{href:!0});var git=s(uG);zXo=r(git,"from_pretrained()"),git.forEach(t),QXo=r(xU," to load the model weights."),xU.forEach(t),WXo=i(yl),Pme=n(yl,"P",{});var hit=s(Pme);HXo=r(hit,"Examples:"),hit.forEach(t),UXo=i(yl),m(t0.$$.fragment,yl),yl.forEach(t),JXo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(a0.$$.fragment,ra),YXo=i(ra),$me=n(ra,"P",{});var pit=s($me);KXo=r(pit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pit.forEach(t),ZXo=i(ra),ln=n(ra,"P",{});var IC=s(ln);ezo=r(IC,"The model class to instantiate is selected based on the "),Ime=n(IC,"CODE",{});var _it=s(Ime);ozo=r(_it,"model_type"),_it.forEach(t),rzo=r(IC,` property of the config object (either
passed as an argument or loaded from `),qme=n(IC,"CODE",{});var uit=s(qme);tzo=r(uit,"pretrained_model_name_or_path"),uit.forEach(t),azo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nme=n(IC,"CODE",{});var bit=s(Nme);nzo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),szo=r(IC,":"),IC.forEach(t),lzo=i(ra),n0=n(ra,"UL",{});var DPe=s(n0);XF=n(DPe,"LI",{});var VLe=s(XF);jme=n(VLe,"STRONG",{});var Fit=s(jme);izo=r(Fit,"speech-encoder-decoder"),Fit.forEach(t),dzo=r(VLe," \u2014 "),bG=n(VLe,"A",{href:!0});var vit=s(bG);czo=r(vit,"SpeechEncoderDecoderModel"),vit.forEach(t),fzo=r(VLe," (Speech Encoder decoder model)"),VLe.forEach(t),mzo=i(DPe),zF=n(DPe,"LI",{});var XLe=s(zF);Dme=n(XLe,"STRONG",{});var Tit=s(Dme);gzo=r(Tit,"speech_to_text"),Tit.forEach(t),hzo=r(XLe," \u2014 "),FG=n(XLe,"A",{href:!0});var Mit=s(FG);pzo=r(Mit,"Speech2TextForConditionalGeneration"),Mit.forEach(t),_zo=r(XLe," (Speech2Text model)"),XLe.forEach(t),DPe.forEach(t),uzo=i(ra),QF=n(ra,"P",{});var zLe=s(QF);bzo=r(zLe,"The model is set in evaluation mode by default using "),Gme=n(zLe,"CODE",{});var Eit=s(Gme);Fzo=r(Eit,"model.eval()"),Eit.forEach(t),vzo=r(zLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ome=n(zLe,"CODE",{});var Cit=s(Ome);Tzo=r(Cit,"model.train()"),Cit.forEach(t),zLe.forEach(t),Mzo=i(ra),Vme=n(ra,"P",{});var wit=s(Vme);Ezo=r(wit,"Examples:"),wit.forEach(t),Czo=i(ra),m(s0.$$.fragment,ra),ra.forEach(t),Al.forEach(t),SRe=i(c),Hd=n(c,"H2",{class:!0});var GPe=s(Hd);WF=n(GPe,"A",{id:!0,class:!0,href:!0});var Ait=s(WF);Xme=n(Ait,"SPAN",{});var yit=s(Xme);m(l0.$$.fragment,yit),yit.forEach(t),Ait.forEach(t),wzo=i(GPe),zme=n(GPe,"SPAN",{});var Lit=s(zme);Azo=r(Lit,"AutoModelForAudioXVector"),Lit.forEach(t),GPe.forEach(t),RRe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(i0.$$.fragment,Ll),yzo=i(Ll),Ud=n(Ll,"P",{});var kU=s(Ud);Lzo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),vG=n(kU,"A",{href:!0});var xit=s(vG);xzo=r(xit,"from_pretrained()"),xit.forEach(t),kzo=r(kU," class method or the "),TG=n(kU,"A",{href:!0});var kit=s(TG);Szo=r(kit,"from_config()"),kit.forEach(t),Rzo=r(kU,` class
method.`),kU.forEach(t),Bzo=i(Ll),d0=n(Ll,"P",{});var OPe=s(d0);Pzo=r(OPe,"This class cannot be instantiated directly using "),Qme=n(OPe,"CODE",{});var Sit=s(Qme);$zo=r(Sit,"__init__()"),Sit.forEach(t),Izo=r(OPe," (throws an error)."),OPe.forEach(t),qzo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(c0.$$.fragment,xl),Nzo=i(xl),Wme=n(xl,"P",{});var Rit=s(Wme);jzo=r(Rit,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Rit.forEach(t),Dzo=i(xl),Jd=n(xl,"P",{});var SU=s(Jd);Gzo=r(SU,`Note:
Loading a model from its configuration file does `),Hme=n(SU,"STRONG",{});var Bit=s(Hme);Ozo=r(Bit,"not"),Bit.forEach(t),Vzo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(SU,"A",{href:!0});var Pit=s(MG);Xzo=r(Pit,"from_pretrained()"),Pit.forEach(t),zzo=r(SU," to load the model weights."),SU.forEach(t),Qzo=i(xl),Ume=n(xl,"P",{});var $it=s(Ume);Wzo=r($it,"Examples:"),$it.forEach(t),Hzo=i(xl),m(f0.$$.fragment,xl),xl.forEach(t),Uzo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(m0.$$.fragment,ta),Jzo=i(ta),Jme=n(ta,"P",{});var Iit=s(Jme);Yzo=r(Iit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Iit.forEach(t),Kzo=i(ta),dn=n(ta,"P",{});var qC=s(dn);Zzo=r(qC,"The model class to instantiate is selected based on the "),Yme=n(qC,"CODE",{});var qit=s(Yme);eQo=r(qit,"model_type"),qit.forEach(t),oQo=r(qC,` property of the config object (either
passed as an argument or loaded from `),Kme=n(qC,"CODE",{});var Nit=s(Kme);rQo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),tQo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zme=n(qC,"CODE",{});var jit=s(Zme);aQo=r(jit,"pretrained_model_name_or_path"),jit.forEach(t),nQo=r(qC,":"),qC.forEach(t),sQo=i(ta),cn=n(ta,"UL",{});var NC=s(cn);HF=n(NC,"LI",{});var QLe=s(HF);ege=n(QLe,"STRONG",{});var Dit=s(ege);lQo=r(Dit,"data2vec-audio"),Dit.forEach(t),iQo=r(QLe," \u2014 "),EG=n(QLe,"A",{href:!0});var Git=s(EG);dQo=r(Git,"Data2VecAudioForXVector"),Git.forEach(t),cQo=r(QLe," (Data2VecAudio model)"),QLe.forEach(t),fQo=i(NC),UF=n(NC,"LI",{});var WLe=s(UF);oge=n(WLe,"STRONG",{});var Oit=s(oge);mQo=r(Oit,"unispeech-sat"),Oit.forEach(t),gQo=r(WLe," \u2014 "),CG=n(WLe,"A",{href:!0});var Vit=s(CG);hQo=r(Vit,"UniSpeechSatForXVector"),Vit.forEach(t),pQo=r(WLe," (UniSpeechSat model)"),WLe.forEach(t),_Qo=i(NC),JF=n(NC,"LI",{});var HLe=s(JF);rge=n(HLe,"STRONG",{});var Xit=s(rge);uQo=r(Xit,"wav2vec2"),Xit.forEach(t),bQo=r(HLe," \u2014 "),wG=n(HLe,"A",{href:!0});var zit=s(wG);FQo=r(zit,"Wav2Vec2ForXVector"),zit.forEach(t),vQo=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),TQo=i(NC),YF=n(NC,"LI",{});var ULe=s(YF);tge=n(ULe,"STRONG",{});var Qit=s(tge);MQo=r(Qit,"wavlm"),Qit.forEach(t),EQo=r(ULe," \u2014 "),AG=n(ULe,"A",{href:!0});var Wit=s(AG);CQo=r(Wit,"WavLMForXVector"),Wit.forEach(t),wQo=r(ULe," (WavLM model)"),ULe.forEach(t),NC.forEach(t),AQo=i(ta),KF=n(ta,"P",{});var JLe=s(KF);yQo=r(JLe,"The model is set in evaluation mode by default using "),age=n(JLe,"CODE",{});var Hit=s(age);LQo=r(Hit,"model.eval()"),Hit.forEach(t),xQo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(JLe,"CODE",{});var Uit=s(nge);kQo=r(Uit,"model.train()"),Uit.forEach(t),JLe.forEach(t),SQo=i(ta),sge=n(ta,"P",{});var Jit=s(sge);RQo=r(Jit,"Examples:"),Jit.forEach(t),BQo=i(ta),m(g0.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),BRe=i(c),Yd=n(c,"H2",{class:!0});var VPe=s(Yd);ZF=n(VPe,"A",{id:!0,class:!0,href:!0});var Yit=s(ZF);lge=n(Yit,"SPAN",{});var Kit=s(lge);m(h0.$$.fragment,Kit),Kit.forEach(t),Yit.forEach(t),PQo=i(VPe),ige=n(VPe,"SPAN",{});var Zit=s(ige);$Qo=r(Zit,"AutoModelForMaskedImageModeling"),Zit.forEach(t),VPe.forEach(t),PRe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(p0.$$.fragment,kl),IQo=i(kl),Kd=n(kl,"P",{});var RU=s(Kd);qQo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),yG=n(RU,"A",{href:!0});var edt=s(yG);NQo=r(edt,"from_pretrained()"),edt.forEach(t),jQo=r(RU," class method or the "),LG=n(RU,"A",{href:!0});var odt=s(LG);DQo=r(odt,"from_config()"),odt.forEach(t),GQo=r(RU,` class
method.`),RU.forEach(t),OQo=i(kl),_0=n(kl,"P",{});var XPe=s(_0);VQo=r(XPe,"This class cannot be instantiated directly using "),dge=n(XPe,"CODE",{});var rdt=s(dge);XQo=r(rdt,"__init__()"),rdt.forEach(t),zQo=r(XPe," (throws an error)."),XPe.forEach(t),QQo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(u0.$$.fragment,Sl),WQo=i(Sl),cge=n(Sl,"P",{});var tdt=s(cge);HQo=r(tdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),tdt.forEach(t),UQo=i(Sl),Zd=n(Sl,"P",{});var BU=s(Zd);JQo=r(BU,`Note:
Loading a model from its configuration file does `),fge=n(BU,"STRONG",{});var adt=s(fge);YQo=r(adt,"not"),adt.forEach(t),KQo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(BU,"A",{href:!0});var ndt=s(xG);ZQo=r(ndt,"from_pretrained()"),ndt.forEach(t),eWo=r(BU," to load the model weights."),BU.forEach(t),oWo=i(Sl),mge=n(Sl,"P",{});var sdt=s(mge);rWo=r(sdt,"Examples:"),sdt.forEach(t),tWo=i(Sl),m(b0.$$.fragment,Sl),Sl.forEach(t),aWo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m(F0.$$.fragment,aa),nWo=i(aa),gge=n(aa,"P",{});var ldt=s(gge);sWo=r(ldt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ldt.forEach(t),lWo=i(aa),fn=n(aa,"P",{});var jC=s(fn);iWo=r(jC,"The model class to instantiate is selected based on the "),hge=n(jC,"CODE",{});var idt=s(hge);dWo=r(idt,"model_type"),idt.forEach(t),cWo=r(jC,` property of the config object (either
passed as an argument or loaded from `),pge=n(jC,"CODE",{});var ddt=s(pge);fWo=r(ddt,"pretrained_model_name_or_path"),ddt.forEach(t),mWo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=n(jC,"CODE",{});var cdt=s(_ge);gWo=r(cdt,"pretrained_model_name_or_path"),cdt.forEach(t),hWo=r(jC,":"),jC.forEach(t),pWo=i(aa),ec=n(aa,"UL",{});var PU=s(ec);ev=n(PU,"LI",{});var YLe=s(ev);uge=n(YLe,"STRONG",{});var fdt=s(uge);_Wo=r(fdt,"deit"),fdt.forEach(t),uWo=r(YLe," \u2014 "),kG=n(YLe,"A",{href:!0});var mdt=s(kG);bWo=r(mdt,"DeiTForMaskedImageModeling"),mdt.forEach(t),FWo=r(YLe," (DeiT model)"),YLe.forEach(t),vWo=i(PU),ov=n(PU,"LI",{});var KLe=s(ov);bge=n(KLe,"STRONG",{});var gdt=s(bge);TWo=r(gdt,"swin"),gdt.forEach(t),MWo=r(KLe," \u2014 "),SG=n(KLe,"A",{href:!0});var hdt=s(SG);EWo=r(hdt,"SwinForMaskedImageModeling"),hdt.forEach(t),CWo=r(KLe," (Swin model)"),KLe.forEach(t),wWo=i(PU),rv=n(PU,"LI",{});var ZLe=s(rv);Fge=n(ZLe,"STRONG",{});var pdt=s(Fge);AWo=r(pdt,"vit"),pdt.forEach(t),yWo=r(ZLe," \u2014 "),RG=n(ZLe,"A",{href:!0});var _dt=s(RG);LWo=r(_dt,"ViTForMaskedImageModeling"),_dt.forEach(t),xWo=r(ZLe," (ViT model)"),ZLe.forEach(t),PU.forEach(t),kWo=i(aa),tv=n(aa,"P",{});var e8e=s(tv);SWo=r(e8e,"The model is set in evaluation mode by default using "),vge=n(e8e,"CODE",{});var udt=s(vge);RWo=r(udt,"model.eval()"),udt.forEach(t),BWo=r(e8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(e8e,"CODE",{});var bdt=s(Tge);PWo=r(bdt,"model.train()"),bdt.forEach(t),e8e.forEach(t),$Wo=i(aa),Mge=n(aa,"P",{});var Fdt=s(Mge);IWo=r(Fdt,"Examples:"),Fdt.forEach(t),qWo=i(aa),m(v0.$$.fragment,aa),aa.forEach(t),kl.forEach(t),$Re=i(c),oc=n(c,"H2",{class:!0});var zPe=s(oc);av=n(zPe,"A",{id:!0,class:!0,href:!0});var vdt=s(av);Ege=n(vdt,"SPAN",{});var Tdt=s(Ege);m(T0.$$.fragment,Tdt),Tdt.forEach(t),vdt.forEach(t),NWo=i(zPe),Cge=n(zPe,"SPAN",{});var Mdt=s(Cge);jWo=r(Mdt,"AutoModelForObjectDetection"),Mdt.forEach(t),zPe.forEach(t),IRe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(M0.$$.fragment,Rl),DWo=i(Rl),rc=n(Rl,"P",{});var $U=s(rc);GWo=r($U,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),BG=n($U,"A",{href:!0});var Edt=s(BG);OWo=r(Edt,"from_pretrained()"),Edt.forEach(t),VWo=r($U," class method or the "),PG=n($U,"A",{href:!0});var Cdt=s(PG);XWo=r(Cdt,"from_config()"),Cdt.forEach(t),zWo=r($U,` class
method.`),$U.forEach(t),QWo=i(Rl),E0=n(Rl,"P",{});var QPe=s(E0);WWo=r(QPe,"This class cannot be instantiated directly using "),wge=n(QPe,"CODE",{});var wdt=s(wge);HWo=r(wdt,"__init__()"),wdt.forEach(t),UWo=r(QPe," (throws an error)."),QPe.forEach(t),JWo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(C0.$$.fragment,Bl),YWo=i(Bl),Age=n(Bl,"P",{});var Adt=s(Age);KWo=r(Adt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Adt.forEach(t),ZWo=i(Bl),tc=n(Bl,"P",{});var IU=s(tc);eHo=r(IU,`Note:
Loading a model from its configuration file does `),yge=n(IU,"STRONG",{});var ydt=s(yge);oHo=r(ydt,"not"),ydt.forEach(t),rHo=r(IU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(IU,"A",{href:!0});var Ldt=s($G);tHo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),aHo=r(IU," to load the model weights."),IU.forEach(t),nHo=i(Bl),Lge=n(Bl,"P",{});var xdt=s(Lge);sHo=r(xdt,"Examples:"),xdt.forEach(t),lHo=i(Bl),m(w0.$$.fragment,Bl),Bl.forEach(t),iHo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(A0.$$.fragment,na),dHo=i(na),xge=n(na,"P",{});var kdt=s(xge);cHo=r(kdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kdt.forEach(t),fHo=i(na),mn=n(na,"P",{});var DC=s(mn);mHo=r(DC,"The model class to instantiate is selected based on the "),kge=n(DC,"CODE",{});var Sdt=s(kge);gHo=r(Sdt,"model_type"),Sdt.forEach(t),hHo=r(DC,` property of the config object (either
passed as an argument or loaded from `),Sge=n(DC,"CODE",{});var Rdt=s(Sge);pHo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),_Ho=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(DC,"CODE",{});var Bdt=s(Rge);uHo=r(Bdt,"pretrained_model_name_or_path"),Bdt.forEach(t),bHo=r(DC,":"),DC.forEach(t),FHo=i(na),Bge=n(na,"UL",{});var Pdt=s(Bge);nv=n(Pdt,"LI",{});var o8e=s(nv);Pge=n(o8e,"STRONG",{});var $dt=s(Pge);vHo=r($dt,"detr"),$dt.forEach(t),THo=r(o8e," \u2014 "),IG=n(o8e,"A",{href:!0});var Idt=s(IG);MHo=r(Idt,"DetrForObjectDetection"),Idt.forEach(t),EHo=r(o8e," (DETR model)"),o8e.forEach(t),Pdt.forEach(t),CHo=i(na),sv=n(na,"P",{});var r8e=s(sv);wHo=r(r8e,"The model is set in evaluation mode by default using "),$ge=n(r8e,"CODE",{});var qdt=s($ge);AHo=r(qdt,"model.eval()"),qdt.forEach(t),yHo=r(r8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ige=n(r8e,"CODE",{});var Ndt=s(Ige);LHo=r(Ndt,"model.train()"),Ndt.forEach(t),r8e.forEach(t),xHo=i(na),qge=n(na,"P",{});var jdt=s(qge);kHo=r(jdt,"Examples:"),jdt.forEach(t),SHo=i(na),m(y0.$$.fragment,na),na.forEach(t),Rl.forEach(t),qRe=i(c),ac=n(c,"H2",{class:!0});var WPe=s(ac);lv=n(WPe,"A",{id:!0,class:!0,href:!0});var Ddt=s(lv);Nge=n(Ddt,"SPAN",{});var Gdt=s(Nge);m(L0.$$.fragment,Gdt),Gdt.forEach(t),Ddt.forEach(t),RHo=i(WPe),jge=n(WPe,"SPAN",{});var Odt=s(jge);BHo=r(Odt,"AutoModelForImageSegmentation"),Odt.forEach(t),WPe.forEach(t),NRe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(x0.$$.fragment,Pl),PHo=i(Pl),nc=n(Pl,"P",{});var qU=s(nc);$Ho=r(qU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),qG=n(qU,"A",{href:!0});var Vdt=s(qG);IHo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),qHo=r(qU," class method or the "),NG=n(qU,"A",{href:!0});var Xdt=s(NG);NHo=r(Xdt,"from_config()"),Xdt.forEach(t),jHo=r(qU,` class
method.`),qU.forEach(t),DHo=i(Pl),k0=n(Pl,"P",{});var HPe=s(k0);GHo=r(HPe,"This class cannot be instantiated directly using "),Dge=n(HPe,"CODE",{});var zdt=s(Dge);OHo=r(zdt,"__init__()"),zdt.forEach(t),VHo=r(HPe," (throws an error)."),HPe.forEach(t),XHo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(S0.$$.fragment,$l),zHo=i($l),Gge=n($l,"P",{});var Qdt=s(Gge);QHo=r(Qdt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Qdt.forEach(t),WHo=i($l),sc=n($l,"P",{});var NU=s(sc);HHo=r(NU,`Note:
Loading a model from its configuration file does `),Oge=n(NU,"STRONG",{});var Wdt=s(Oge);UHo=r(Wdt,"not"),Wdt.forEach(t),JHo=r(NU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jG=n(NU,"A",{href:!0});var Hdt=s(jG);YHo=r(Hdt,"from_pretrained()"),Hdt.forEach(t),KHo=r(NU," to load the model weights."),NU.forEach(t),ZHo=i($l),Vge=n($l,"P",{});var Udt=s(Vge);eUo=r(Udt,"Examples:"),Udt.forEach(t),oUo=i($l),m(R0.$$.fragment,$l),$l.forEach(t),rUo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(B0.$$.fragment,sa),tUo=i(sa),Xge=n(sa,"P",{});var Jdt=s(Xge);aUo=r(Jdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Jdt.forEach(t),nUo=i(sa),gn=n(sa,"P",{});var GC=s(gn);sUo=r(GC,"The model class to instantiate is selected based on the "),zge=n(GC,"CODE",{});var Ydt=s(zge);lUo=r(Ydt,"model_type"),Ydt.forEach(t),iUo=r(GC,` property of the config object (either
passed as an argument or loaded from `),Qge=n(GC,"CODE",{});var Kdt=s(Qge);dUo=r(Kdt,"pretrained_model_name_or_path"),Kdt.forEach(t),cUo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wge=n(GC,"CODE",{});var Zdt=s(Wge);fUo=r(Zdt,"pretrained_model_name_or_path"),Zdt.forEach(t),mUo=r(GC,":"),GC.forEach(t),gUo=i(sa),Hge=n(sa,"UL",{});var ect=s(Hge);iv=n(ect,"LI",{});var t8e=s(iv);Uge=n(t8e,"STRONG",{});var oct=s(Uge);hUo=r(oct,"detr"),oct.forEach(t),pUo=r(t8e," \u2014 "),DG=n(t8e,"A",{href:!0});var rct=s(DG);_Uo=r(rct,"DetrForSegmentation"),rct.forEach(t),uUo=r(t8e," (DETR model)"),t8e.forEach(t),ect.forEach(t),bUo=i(sa),dv=n(sa,"P",{});var a8e=s(dv);FUo=r(a8e,"The model is set in evaluation mode by default using "),Jge=n(a8e,"CODE",{});var tct=s(Jge);vUo=r(tct,"model.eval()"),tct.forEach(t),TUo=r(a8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yge=n(a8e,"CODE",{});var act=s(Yge);MUo=r(act,"model.train()"),act.forEach(t),a8e.forEach(t),EUo=i(sa),Kge=n(sa,"P",{});var nct=s(Kge);CUo=r(nct,"Examples:"),nct.forEach(t),wUo=i(sa),m(P0.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),jRe=i(c),lc=n(c,"H2",{class:!0});var UPe=s(lc);cv=n(UPe,"A",{id:!0,class:!0,href:!0});var sct=s(cv);Zge=n(sct,"SPAN",{});var lct=s(Zge);m($0.$$.fragment,lct),lct.forEach(t),sct.forEach(t),AUo=i(UPe),ehe=n(UPe,"SPAN",{});var ict=s(ehe);yUo=r(ict,"AutoModelForSemanticSegmentation"),ict.forEach(t),UPe.forEach(t),DRe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(I0.$$.fragment,Il),LUo=i(Il),ic=n(Il,"P",{});var jU=s(ic);xUo=r(jU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),GG=n(jU,"A",{href:!0});var dct=s(GG);kUo=r(dct,"from_pretrained()"),dct.forEach(t),SUo=r(jU," class method or the "),OG=n(jU,"A",{href:!0});var cct=s(OG);RUo=r(cct,"from_config()"),cct.forEach(t),BUo=r(jU,` class
method.`),jU.forEach(t),PUo=i(Il),q0=n(Il,"P",{});var JPe=s(q0);$Uo=r(JPe,"This class cannot be instantiated directly using "),ohe=n(JPe,"CODE",{});var fct=s(ohe);IUo=r(fct,"__init__()"),fct.forEach(t),qUo=r(JPe," (throws an error)."),JPe.forEach(t),NUo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(N0.$$.fragment,ql),jUo=i(ql),rhe=n(ql,"P",{});var mct=s(rhe);DUo=r(mct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),mct.forEach(t),GUo=i(ql),dc=n(ql,"P",{});var DU=s(dc);OUo=r(DU,`Note:
Loading a model from its configuration file does `),the=n(DU,"STRONG",{});var gct=s(the);VUo=r(gct,"not"),gct.forEach(t),XUo=r(DU,` load the model weights. It only affects the
model\u2019s configuration. Use `),VG=n(DU,"A",{href:!0});var hct=s(VG);zUo=r(hct,"from_pretrained()"),hct.forEach(t),QUo=r(DU," to load the model weights."),DU.forEach(t),WUo=i(ql),ahe=n(ql,"P",{});var pct=s(ahe);HUo=r(pct,"Examples:"),pct.forEach(t),UUo=i(ql),m(j0.$$.fragment,ql),ql.forEach(t),JUo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(D0.$$.fragment,la),YUo=i(la),nhe=n(la,"P",{});var _ct=s(nhe);KUo=r(_ct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_ct.forEach(t),ZUo=i(la),hn=n(la,"P",{});var OC=s(hn);eJo=r(OC,"The model class to instantiate is selected based on the "),she=n(OC,"CODE",{});var uct=s(she);oJo=r(uct,"model_type"),uct.forEach(t),rJo=r(OC,` property of the config object (either
passed as an argument or loaded from `),lhe=n(OC,"CODE",{});var bct=s(lhe);tJo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),aJo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ihe=n(OC,"CODE",{});var Fct=s(ihe);nJo=r(Fct,"pretrained_model_name_or_path"),Fct.forEach(t),sJo=r(OC,":"),OC.forEach(t),lJo=i(la),cc=n(la,"UL",{});var GU=s(cc);fv=n(GU,"LI",{});var n8e=s(fv);dhe=n(n8e,"STRONG",{});var vct=s(dhe);iJo=r(vct,"beit"),vct.forEach(t),dJo=r(n8e," \u2014 "),XG=n(n8e,"A",{href:!0});var Tct=s(XG);cJo=r(Tct,"BeitForSemanticSegmentation"),Tct.forEach(t),fJo=r(n8e," (BEiT model)"),n8e.forEach(t),mJo=i(GU),mv=n(GU,"LI",{});var s8e=s(mv);che=n(s8e,"STRONG",{});var Mct=s(che);gJo=r(Mct,"dpt"),Mct.forEach(t),hJo=r(s8e," \u2014 "),zG=n(s8e,"A",{href:!0});var Ect=s(zG);pJo=r(Ect,"DPTForSemanticSegmentation"),Ect.forEach(t),_Jo=r(s8e," (DPT model)"),s8e.forEach(t),uJo=i(GU),gv=n(GU,"LI",{});var l8e=s(gv);fhe=n(l8e,"STRONG",{});var Cct=s(fhe);bJo=r(Cct,"segformer"),Cct.forEach(t),FJo=r(l8e," \u2014 "),QG=n(l8e,"A",{href:!0});var wct=s(QG);vJo=r(wct,"SegformerForSemanticSegmentation"),wct.forEach(t),TJo=r(l8e," (SegFormer model)"),l8e.forEach(t),GU.forEach(t),MJo=i(la),hv=n(la,"P",{});var i8e=s(hv);EJo=r(i8e,"The model is set in evaluation mode by default using "),mhe=n(i8e,"CODE",{});var Act=s(mhe);CJo=r(Act,"model.eval()"),Act.forEach(t),wJo=r(i8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ghe=n(i8e,"CODE",{});var yct=s(ghe);AJo=r(yct,"model.train()"),yct.forEach(t),i8e.forEach(t),yJo=i(la),hhe=n(la,"P",{});var Lct=s(hhe);LJo=r(Lct,"Examples:"),Lct.forEach(t),xJo=i(la),m(G0.$$.fragment,la),la.forEach(t),Il.forEach(t),GRe=i(c),fc=n(c,"H2",{class:!0});var YPe=s(fc);pv=n(YPe,"A",{id:!0,class:!0,href:!0});var xct=s(pv);phe=n(xct,"SPAN",{});var kct=s(phe);m(O0.$$.fragment,kct),kct.forEach(t),xct.forEach(t),kJo=i(YPe),_he=n(YPe,"SPAN",{});var Sct=s(_he);SJo=r(Sct,"AutoModelForInstanceSegmentation"),Sct.forEach(t),YPe.forEach(t),ORe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(V0.$$.fragment,Nl),RJo=i(Nl),mc=n(Nl,"P",{});var OU=s(mc);BJo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),WG=n(OU,"A",{href:!0});var Rct=s(WG);PJo=r(Rct,"from_pretrained()"),Rct.forEach(t),$Jo=r(OU," class method or the "),HG=n(OU,"A",{href:!0});var Bct=s(HG);IJo=r(Bct,"from_config()"),Bct.forEach(t),qJo=r(OU,` class
method.`),OU.forEach(t),NJo=i(Nl),X0=n(Nl,"P",{});var KPe=s(X0);jJo=r(KPe,"This class cannot be instantiated directly using "),uhe=n(KPe,"CODE",{});var Pct=s(uhe);DJo=r(Pct,"__init__()"),Pct.forEach(t),GJo=r(KPe," (throws an error)."),KPe.forEach(t),OJo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(z0.$$.fragment,jl),VJo=i(jl),bhe=n(jl,"P",{});var $ct=s(bhe);XJo=r($ct,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),$ct.forEach(t),zJo=i(jl),gc=n(jl,"P",{});var VU=s(gc);QJo=r(VU,`Note:
Loading a model from its configuration file does `),Fhe=n(VU,"STRONG",{});var Ict=s(Fhe);WJo=r(Ict,"not"),Ict.forEach(t),HJo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),UG=n(VU,"A",{href:!0});var qct=s(UG);UJo=r(qct,"from_pretrained()"),qct.forEach(t),JJo=r(VU," to load the model weights."),VU.forEach(t),YJo=i(jl),vhe=n(jl,"P",{});var Nct=s(vhe);KJo=r(Nct,"Examples:"),Nct.forEach(t),ZJo=i(jl),m(Q0.$$.fragment,jl),jl.forEach(t),eYo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(W0.$$.fragment,ia),oYo=i(ia),The=n(ia,"P",{});var jct=s(The);rYo=r(jct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jct.forEach(t),tYo=i(ia),pn=n(ia,"P",{});var VC=s(pn);aYo=r(VC,"The model class to instantiate is selected based on the "),Mhe=n(VC,"CODE",{});var Dct=s(Mhe);nYo=r(Dct,"model_type"),Dct.forEach(t),sYo=r(VC,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(VC,"CODE",{});var Gct=s(Ehe);lYo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),iYo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(VC,"CODE",{});var Oct=s(Che);dYo=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),cYo=r(VC,":"),VC.forEach(t),fYo=i(ia),whe=n(ia,"UL",{});var Vct=s(whe);_v=n(Vct,"LI",{});var d8e=s(_v);Ahe=n(d8e,"STRONG",{});var Xct=s(Ahe);mYo=r(Xct,"maskformer"),Xct.forEach(t),gYo=r(d8e," \u2014 "),JG=n(d8e,"A",{href:!0});var zct=s(JG);hYo=r(zct,"MaskFormerForInstanceSegmentation"),zct.forEach(t),pYo=r(d8e," (MaskFormer model)"),d8e.forEach(t),Vct.forEach(t),_Yo=i(ia),uv=n(ia,"P",{});var c8e=s(uv);uYo=r(c8e,"The model is set in evaluation mode by default using "),yhe=n(c8e,"CODE",{});var Qct=s(yhe);bYo=r(Qct,"model.eval()"),Qct.forEach(t),FYo=r(c8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(c8e,"CODE",{});var Wct=s(Lhe);vYo=r(Wct,"model.train()"),Wct.forEach(t),c8e.forEach(t),TYo=i(ia),xhe=n(ia,"P",{});var Hct=s(xhe);MYo=r(Hct,"Examples:"),Hct.forEach(t),EYo=i(ia),m(H0.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),VRe=i(c),hc=n(c,"H2",{class:!0});var ZPe=s(hc);bv=n(ZPe,"A",{id:!0,class:!0,href:!0});var Uct=s(bv);khe=n(Uct,"SPAN",{});var Jct=s(khe);m(U0.$$.fragment,Jct),Jct.forEach(t),Uct.forEach(t),CYo=i(ZPe),She=n(ZPe,"SPAN",{});var Yct=s(She);wYo=r(Yct,"TFAutoModel"),Yct.forEach(t),ZPe.forEach(t),XRe=i(c),Fr=n(c,"DIV",{class:!0});var Dl=s(Fr);m(J0.$$.fragment,Dl),AYo=i(Dl),pc=n(Dl,"P",{});var XU=s(pc);yYo=r(XU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),YG=n(XU,"A",{href:!0});var Kct=s(YG);LYo=r(Kct,"from_pretrained()"),Kct.forEach(t),xYo=r(XU," class method or the "),KG=n(XU,"A",{href:!0});var Zct=s(KG);kYo=r(Zct,"from_config()"),Zct.forEach(t),SYo=r(XU,` class
method.`),XU.forEach(t),RYo=i(Dl),Y0=n(Dl,"P",{});var e$e=s(Y0);BYo=r(e$e,"This class cannot be instantiated directly using "),Rhe=n(e$e,"CODE",{});var eft=s(Rhe);PYo=r(eft,"__init__()"),eft.forEach(t),$Yo=r(e$e," (throws an error)."),e$e.forEach(t),IYo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(K0.$$.fragment,Gl),qYo=i(Gl),Bhe=n(Gl,"P",{});var oft=s(Bhe);NYo=r(oft,"Instantiates one of the base model classes of the library from a configuration."),oft.forEach(t),jYo=i(Gl),_c=n(Gl,"P",{});var zU=s(_c);DYo=r(zU,`Note:
Loading a model from its configuration file does `),Phe=n(zU,"STRONG",{});var rft=s(Phe);GYo=r(rft,"not"),rft.forEach(t),OYo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(zU,"A",{href:!0});var tft=s(ZG);VYo=r(tft,"from_pretrained()"),tft.forEach(t),XYo=r(zU," to load the model weights."),zU.forEach(t),zYo=i(Gl),$he=n(Gl,"P",{});var aft=s($he);QYo=r(aft,"Examples:"),aft.forEach(t),WYo=i(Gl),m(Z0.$$.fragment,Gl),Gl.forEach(t),HYo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(ey.$$.fragment,pa),UYo=i(pa),Ihe=n(pa,"P",{});var nft=s(Ihe);JYo=r(nft,"Instantiate one of the base model classes of the library from a pretrained model."),nft.forEach(t),YYo=i(pa),_n=n(pa,"P",{});var XC=s(_n);KYo=r(XC,"The model class to instantiate is selected based on the "),qhe=n(XC,"CODE",{});var sft=s(qhe);ZYo=r(sft,"model_type"),sft.forEach(t),eKo=r(XC,` property of the config object (either
passed as an argument or loaded from `),Nhe=n(XC,"CODE",{});var lft=s(Nhe);oKo=r(lft,"pretrained_model_name_or_path"),lft.forEach(t),rKo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jhe=n(XC,"CODE",{});var ift=s(jhe);tKo=r(ift,"pretrained_model_name_or_path"),ift.forEach(t),aKo=r(XC,":"),XC.forEach(t),nKo=i(pa),x=n(pa,"UL",{});var k=s(x);Fv=n(k,"LI",{});var f8e=s(Fv);Dhe=n(f8e,"STRONG",{});var dft=s(Dhe);sKo=r(dft,"albert"),dft.forEach(t),lKo=r(f8e," \u2014 "),eO=n(f8e,"A",{href:!0});var cft=s(eO);iKo=r(cft,"TFAlbertModel"),cft.forEach(t),dKo=r(f8e," (ALBERT model)"),f8e.forEach(t),cKo=i(k),vv=n(k,"LI",{});var m8e=s(vv);Ghe=n(m8e,"STRONG",{});var fft=s(Ghe);fKo=r(fft,"bart"),fft.forEach(t),mKo=r(m8e," \u2014 "),oO=n(m8e,"A",{href:!0});var mft=s(oO);gKo=r(mft,"TFBartModel"),mft.forEach(t),hKo=r(m8e," (BART model)"),m8e.forEach(t),pKo=i(k),Tv=n(k,"LI",{});var g8e=s(Tv);Ohe=n(g8e,"STRONG",{});var gft=s(Ohe);_Ko=r(gft,"bert"),gft.forEach(t),uKo=r(g8e," \u2014 "),rO=n(g8e,"A",{href:!0});var hft=s(rO);bKo=r(hft,"TFBertModel"),hft.forEach(t),FKo=r(g8e," (BERT model)"),g8e.forEach(t),vKo=i(k),Mv=n(k,"LI",{});var h8e=s(Mv);Vhe=n(h8e,"STRONG",{});var pft=s(Vhe);TKo=r(pft,"blenderbot"),pft.forEach(t),MKo=r(h8e," \u2014 "),tO=n(h8e,"A",{href:!0});var _ft=s(tO);EKo=r(_ft,"TFBlenderbotModel"),_ft.forEach(t),CKo=r(h8e," (Blenderbot model)"),h8e.forEach(t),wKo=i(k),Ev=n(k,"LI",{});var p8e=s(Ev);Xhe=n(p8e,"STRONG",{});var uft=s(Xhe);AKo=r(uft,"blenderbot-small"),uft.forEach(t),yKo=r(p8e," \u2014 "),aO=n(p8e,"A",{href:!0});var bft=s(aO);LKo=r(bft,"TFBlenderbotSmallModel"),bft.forEach(t),xKo=r(p8e," (BlenderbotSmall model)"),p8e.forEach(t),kKo=i(k),Cv=n(k,"LI",{});var _8e=s(Cv);zhe=n(_8e,"STRONG",{});var Fft=s(zhe);SKo=r(Fft,"camembert"),Fft.forEach(t),RKo=r(_8e," \u2014 "),nO=n(_8e,"A",{href:!0});var vft=s(nO);BKo=r(vft,"TFCamembertModel"),vft.forEach(t),PKo=r(_8e," (CamemBERT model)"),_8e.forEach(t),$Ko=i(k),wv=n(k,"LI",{});var u8e=s(wv);Qhe=n(u8e,"STRONG",{});var Tft=s(Qhe);IKo=r(Tft,"clip"),Tft.forEach(t),qKo=r(u8e," \u2014 "),sO=n(u8e,"A",{href:!0});var Mft=s(sO);NKo=r(Mft,"TFCLIPModel"),Mft.forEach(t),jKo=r(u8e," (CLIP model)"),u8e.forEach(t),DKo=i(k),Av=n(k,"LI",{});var b8e=s(Av);Whe=n(b8e,"STRONG",{});var Eft=s(Whe);GKo=r(Eft,"convbert"),Eft.forEach(t),OKo=r(b8e," \u2014 "),lO=n(b8e,"A",{href:!0});var Cft=s(lO);VKo=r(Cft,"TFConvBertModel"),Cft.forEach(t),XKo=r(b8e," (ConvBERT model)"),b8e.forEach(t),zKo=i(k),yv=n(k,"LI",{});var F8e=s(yv);Hhe=n(F8e,"STRONG",{});var wft=s(Hhe);QKo=r(wft,"convnext"),wft.forEach(t),WKo=r(F8e," \u2014 "),iO=n(F8e,"A",{href:!0});var Aft=s(iO);HKo=r(Aft,"TFConvNextModel"),Aft.forEach(t),UKo=r(F8e," (ConvNext model)"),F8e.forEach(t),JKo=i(k),Lv=n(k,"LI",{});var v8e=s(Lv);Uhe=n(v8e,"STRONG",{});var yft=s(Uhe);YKo=r(yft,"ctrl"),yft.forEach(t),KKo=r(v8e," \u2014 "),dO=n(v8e,"A",{href:!0});var Lft=s(dO);ZKo=r(Lft,"TFCTRLModel"),Lft.forEach(t),eZo=r(v8e," (CTRL model)"),v8e.forEach(t),oZo=i(k),xv=n(k,"LI",{});var T8e=s(xv);Jhe=n(T8e,"STRONG",{});var xft=s(Jhe);rZo=r(xft,"deberta"),xft.forEach(t),tZo=r(T8e," \u2014 "),cO=n(T8e,"A",{href:!0});var kft=s(cO);aZo=r(kft,"TFDebertaModel"),kft.forEach(t),nZo=r(T8e," (DeBERTa model)"),T8e.forEach(t),sZo=i(k),kv=n(k,"LI",{});var M8e=s(kv);Yhe=n(M8e,"STRONG",{});var Sft=s(Yhe);lZo=r(Sft,"deberta-v2"),Sft.forEach(t),iZo=r(M8e," \u2014 "),fO=n(M8e,"A",{href:!0});var Rft=s(fO);dZo=r(Rft,"TFDebertaV2Model"),Rft.forEach(t),cZo=r(M8e," (DeBERTa-v2 model)"),M8e.forEach(t),fZo=i(k),Sv=n(k,"LI",{});var E8e=s(Sv);Khe=n(E8e,"STRONG",{});var Bft=s(Khe);mZo=r(Bft,"distilbert"),Bft.forEach(t),gZo=r(E8e," \u2014 "),mO=n(E8e,"A",{href:!0});var Pft=s(mO);hZo=r(Pft,"TFDistilBertModel"),Pft.forEach(t),pZo=r(E8e," (DistilBERT model)"),E8e.forEach(t),_Zo=i(k),Rv=n(k,"LI",{});var C8e=s(Rv);Zhe=n(C8e,"STRONG",{});var $ft=s(Zhe);uZo=r($ft,"dpr"),$ft.forEach(t),bZo=r(C8e," \u2014 "),gO=n(C8e,"A",{href:!0});var Ift=s(gO);FZo=r(Ift,"TFDPRQuestionEncoder"),Ift.forEach(t),vZo=r(C8e," (DPR model)"),C8e.forEach(t),TZo=i(k),Bv=n(k,"LI",{});var w8e=s(Bv);epe=n(w8e,"STRONG",{});var qft=s(epe);MZo=r(qft,"electra"),qft.forEach(t),EZo=r(w8e," \u2014 "),hO=n(w8e,"A",{href:!0});var Nft=s(hO);CZo=r(Nft,"TFElectraModel"),Nft.forEach(t),wZo=r(w8e," (ELECTRA model)"),w8e.forEach(t),AZo=i(k),Pv=n(k,"LI",{});var A8e=s(Pv);ope=n(A8e,"STRONG",{});var jft=s(ope);yZo=r(jft,"flaubert"),jft.forEach(t),LZo=r(A8e," \u2014 "),pO=n(A8e,"A",{href:!0});var Dft=s(pO);xZo=r(Dft,"TFFlaubertModel"),Dft.forEach(t),kZo=r(A8e," (FlauBERT model)"),A8e.forEach(t),SZo=i(k),Os=n(k,"LI",{});var l9=s(Os);rpe=n(l9,"STRONG",{});var Gft=s(rpe);RZo=r(Gft,"funnel"),Gft.forEach(t),BZo=r(l9," \u2014 "),_O=n(l9,"A",{href:!0});var Oft=s(_O);PZo=r(Oft,"TFFunnelModel"),Oft.forEach(t),$Zo=r(l9," or "),uO=n(l9,"A",{href:!0});var Vft=s(uO);IZo=r(Vft,"TFFunnelBaseModel"),Vft.forEach(t),qZo=r(l9," (Funnel Transformer model)"),l9.forEach(t),NZo=i(k),$v=n(k,"LI",{});var y8e=s($v);tpe=n(y8e,"STRONG",{});var Xft=s(tpe);jZo=r(Xft,"gpt2"),Xft.forEach(t),DZo=r(y8e," \u2014 "),bO=n(y8e,"A",{href:!0});var zft=s(bO);GZo=r(zft,"TFGPT2Model"),zft.forEach(t),OZo=r(y8e," (OpenAI GPT-2 model)"),y8e.forEach(t),VZo=i(k),Iv=n(k,"LI",{});var L8e=s(Iv);ape=n(L8e,"STRONG",{});var Qft=s(ape);XZo=r(Qft,"gptj"),Qft.forEach(t),zZo=r(L8e," \u2014 "),FO=n(L8e,"A",{href:!0});var Wft=s(FO);QZo=r(Wft,"TFGPTJModel"),Wft.forEach(t),WZo=r(L8e," (GPT-J model)"),L8e.forEach(t),HZo=i(k),qv=n(k,"LI",{});var x8e=s(qv);npe=n(x8e,"STRONG",{});var Hft=s(npe);UZo=r(Hft,"hubert"),Hft.forEach(t),JZo=r(x8e," \u2014 "),vO=n(x8e,"A",{href:!0});var Uft=s(vO);YZo=r(Uft,"TFHubertModel"),Uft.forEach(t),KZo=r(x8e," (Hubert model)"),x8e.forEach(t),ZZo=i(k),Nv=n(k,"LI",{});var k8e=s(Nv);spe=n(k8e,"STRONG",{});var Jft=s(spe);eer=r(Jft,"layoutlm"),Jft.forEach(t),oer=r(k8e," \u2014 "),TO=n(k8e,"A",{href:!0});var Yft=s(TO);rer=r(Yft,"TFLayoutLMModel"),Yft.forEach(t),ter=r(k8e," (LayoutLM model)"),k8e.forEach(t),aer=i(k),jv=n(k,"LI",{});var S8e=s(jv);lpe=n(S8e,"STRONG",{});var Kft=s(lpe);ner=r(Kft,"led"),Kft.forEach(t),ser=r(S8e," \u2014 "),MO=n(S8e,"A",{href:!0});var Zft=s(MO);ler=r(Zft,"TFLEDModel"),Zft.forEach(t),ier=r(S8e," (LED model)"),S8e.forEach(t),der=i(k),Dv=n(k,"LI",{});var R8e=s(Dv);ipe=n(R8e,"STRONG",{});var emt=s(ipe);cer=r(emt,"longformer"),emt.forEach(t),fer=r(R8e," \u2014 "),EO=n(R8e,"A",{href:!0});var omt=s(EO);mer=r(omt,"TFLongformerModel"),omt.forEach(t),ger=r(R8e," (Longformer model)"),R8e.forEach(t),her=i(k),Gv=n(k,"LI",{});var B8e=s(Gv);dpe=n(B8e,"STRONG",{});var rmt=s(dpe);per=r(rmt,"lxmert"),rmt.forEach(t),_er=r(B8e," \u2014 "),CO=n(B8e,"A",{href:!0});var tmt=s(CO);uer=r(tmt,"TFLxmertModel"),tmt.forEach(t),ber=r(B8e," (LXMERT model)"),B8e.forEach(t),Fer=i(k),Ov=n(k,"LI",{});var P8e=s(Ov);cpe=n(P8e,"STRONG",{});var amt=s(cpe);ver=r(amt,"marian"),amt.forEach(t),Ter=r(P8e," \u2014 "),wO=n(P8e,"A",{href:!0});var nmt=s(wO);Mer=r(nmt,"TFMarianModel"),nmt.forEach(t),Eer=r(P8e," (Marian model)"),P8e.forEach(t),Cer=i(k),Vv=n(k,"LI",{});var $8e=s(Vv);fpe=n($8e,"STRONG",{});var smt=s(fpe);wer=r(smt,"mbart"),smt.forEach(t),Aer=r($8e," \u2014 "),AO=n($8e,"A",{href:!0});var lmt=s(AO);yer=r(lmt,"TFMBartModel"),lmt.forEach(t),Ler=r($8e," (mBART model)"),$8e.forEach(t),xer=i(k),Xv=n(k,"LI",{});var I8e=s(Xv);mpe=n(I8e,"STRONG",{});var imt=s(mpe);ker=r(imt,"mobilebert"),imt.forEach(t),Ser=r(I8e," \u2014 "),yO=n(I8e,"A",{href:!0});var dmt=s(yO);Rer=r(dmt,"TFMobileBertModel"),dmt.forEach(t),Ber=r(I8e," (MobileBERT model)"),I8e.forEach(t),Per=i(k),zv=n(k,"LI",{});var q8e=s(zv);gpe=n(q8e,"STRONG",{});var cmt=s(gpe);$er=r(cmt,"mpnet"),cmt.forEach(t),Ier=r(q8e," \u2014 "),LO=n(q8e,"A",{href:!0});var fmt=s(LO);qer=r(fmt,"TFMPNetModel"),fmt.forEach(t),Ner=r(q8e," (MPNet model)"),q8e.forEach(t),jer=i(k),Qv=n(k,"LI",{});var N8e=s(Qv);hpe=n(N8e,"STRONG",{});var mmt=s(hpe);Der=r(mmt,"mt5"),mmt.forEach(t),Ger=r(N8e," \u2014 "),xO=n(N8e,"A",{href:!0});var gmt=s(xO);Oer=r(gmt,"TFMT5Model"),gmt.forEach(t),Ver=r(N8e," (mT5 model)"),N8e.forEach(t),Xer=i(k),Wv=n(k,"LI",{});var j8e=s(Wv);ppe=n(j8e,"STRONG",{});var hmt=s(ppe);zer=r(hmt,"openai-gpt"),hmt.forEach(t),Qer=r(j8e," \u2014 "),kO=n(j8e,"A",{href:!0});var pmt=s(kO);Wer=r(pmt,"TFOpenAIGPTModel"),pmt.forEach(t),Her=r(j8e," (OpenAI GPT model)"),j8e.forEach(t),Uer=i(k),Hv=n(k,"LI",{});var D8e=s(Hv);_pe=n(D8e,"STRONG",{});var _mt=s(_pe);Jer=r(_mt,"pegasus"),_mt.forEach(t),Yer=r(D8e," \u2014 "),SO=n(D8e,"A",{href:!0});var umt=s(SO);Ker=r(umt,"TFPegasusModel"),umt.forEach(t),Zer=r(D8e," (Pegasus model)"),D8e.forEach(t),eor=i(k),Uv=n(k,"LI",{});var G8e=s(Uv);upe=n(G8e,"STRONG",{});var bmt=s(upe);oor=r(bmt,"rembert"),bmt.forEach(t),ror=r(G8e," \u2014 "),RO=n(G8e,"A",{href:!0});var Fmt=s(RO);tor=r(Fmt,"TFRemBertModel"),Fmt.forEach(t),aor=r(G8e," (RemBERT model)"),G8e.forEach(t),nor=i(k),Jv=n(k,"LI",{});var O8e=s(Jv);bpe=n(O8e,"STRONG",{});var vmt=s(bpe);sor=r(vmt,"roberta"),vmt.forEach(t),lor=r(O8e," \u2014 "),BO=n(O8e,"A",{href:!0});var Tmt=s(BO);ior=r(Tmt,"TFRobertaModel"),Tmt.forEach(t),dor=r(O8e," (RoBERTa model)"),O8e.forEach(t),cor=i(k),Yv=n(k,"LI",{});var V8e=s(Yv);Fpe=n(V8e,"STRONG",{});var Mmt=s(Fpe);mor=r(Mmt,"roformer"),Mmt.forEach(t),gor=r(V8e," \u2014 "),PO=n(V8e,"A",{href:!0});var Emt=s(PO);hor=r(Emt,"TFRoFormerModel"),Emt.forEach(t),por=r(V8e," (RoFormer model)"),V8e.forEach(t),_or=i(k),Kv=n(k,"LI",{});var X8e=s(Kv);vpe=n(X8e,"STRONG",{});var Cmt=s(vpe);uor=r(Cmt,"speech_to_text"),Cmt.forEach(t),bor=r(X8e," \u2014 "),$O=n(X8e,"A",{href:!0});var wmt=s($O);For=r(wmt,"TFSpeech2TextModel"),wmt.forEach(t),vor=r(X8e," (Speech2Text model)"),X8e.forEach(t),Tor=i(k),Zv=n(k,"LI",{});var z8e=s(Zv);Tpe=n(z8e,"STRONG",{});var Amt=s(Tpe);Mor=r(Amt,"t5"),Amt.forEach(t),Eor=r(z8e," \u2014 "),IO=n(z8e,"A",{href:!0});var ymt=s(IO);Cor=r(ymt,"TFT5Model"),ymt.forEach(t),wor=r(z8e," (T5 model)"),z8e.forEach(t),Aor=i(k),e6=n(k,"LI",{});var Q8e=s(e6);Mpe=n(Q8e,"STRONG",{});var Lmt=s(Mpe);yor=r(Lmt,"tapas"),Lmt.forEach(t),Lor=r(Q8e," \u2014 "),qO=n(Q8e,"A",{href:!0});var xmt=s(qO);xor=r(xmt,"TFTapasModel"),xmt.forEach(t),kor=r(Q8e," (TAPAS model)"),Q8e.forEach(t),Sor=i(k),o6=n(k,"LI",{});var W8e=s(o6);Epe=n(W8e,"STRONG",{});var kmt=s(Epe);Ror=r(kmt,"transfo-xl"),kmt.forEach(t),Bor=r(W8e," \u2014 "),NO=n(W8e,"A",{href:!0});var Smt=s(NO);Por=r(Smt,"TFTransfoXLModel"),Smt.forEach(t),$or=r(W8e," (Transformer-XL model)"),W8e.forEach(t),Ior=i(k),r6=n(k,"LI",{});var H8e=s(r6);Cpe=n(H8e,"STRONG",{});var Rmt=s(Cpe);qor=r(Rmt,"vit"),Rmt.forEach(t),Nor=r(H8e," \u2014 "),jO=n(H8e,"A",{href:!0});var Bmt=s(jO);jor=r(Bmt,"TFViTModel"),Bmt.forEach(t),Dor=r(H8e," (ViT model)"),H8e.forEach(t),Gor=i(k),t6=n(k,"LI",{});var U8e=s(t6);wpe=n(U8e,"STRONG",{});var Pmt=s(wpe);Oor=r(Pmt,"vit_mae"),Pmt.forEach(t),Vor=r(U8e," \u2014 "),DO=n(U8e,"A",{href:!0});var $mt=s(DO);Xor=r($mt,"TFViTMAEModel"),$mt.forEach(t),zor=r(U8e," (ViTMAE model)"),U8e.forEach(t),Qor=i(k),a6=n(k,"LI",{});var J8e=s(a6);Ape=n(J8e,"STRONG",{});var Imt=s(Ape);Wor=r(Imt,"wav2vec2"),Imt.forEach(t),Hor=r(J8e," \u2014 "),GO=n(J8e,"A",{href:!0});var qmt=s(GO);Uor=r(qmt,"TFWav2Vec2Model"),qmt.forEach(t),Jor=r(J8e," (Wav2Vec2 model)"),J8e.forEach(t),Yor=i(k),n6=n(k,"LI",{});var Y8e=s(n6);ype=n(Y8e,"STRONG",{});var Nmt=s(ype);Kor=r(Nmt,"xlm"),Nmt.forEach(t),Zor=r(Y8e," \u2014 "),OO=n(Y8e,"A",{href:!0});var jmt=s(OO);err=r(jmt,"TFXLMModel"),jmt.forEach(t),orr=r(Y8e," (XLM model)"),Y8e.forEach(t),rrr=i(k),s6=n(k,"LI",{});var K8e=s(s6);Lpe=n(K8e,"STRONG",{});var Dmt=s(Lpe);trr=r(Dmt,"xlm-roberta"),Dmt.forEach(t),arr=r(K8e," \u2014 "),VO=n(K8e,"A",{href:!0});var Gmt=s(VO);nrr=r(Gmt,"TFXLMRobertaModel"),Gmt.forEach(t),srr=r(K8e," (XLM-RoBERTa model)"),K8e.forEach(t),lrr=i(k),l6=n(k,"LI",{});var Z8e=s(l6);xpe=n(Z8e,"STRONG",{});var Omt=s(xpe);irr=r(Omt,"xlnet"),Omt.forEach(t),drr=r(Z8e," \u2014 "),XO=n(Z8e,"A",{href:!0});var Vmt=s(XO);crr=r(Vmt,"TFXLNetModel"),Vmt.forEach(t),frr=r(Z8e," (XLNet model)"),Z8e.forEach(t),k.forEach(t),mrr=i(pa),kpe=n(pa,"P",{});var Xmt=s(kpe);grr=r(Xmt,"Examples:"),Xmt.forEach(t),hrr=i(pa),m(oy.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),zRe=i(c),uc=n(c,"H2",{class:!0});var o$e=s(uc);i6=n(o$e,"A",{id:!0,class:!0,href:!0});var zmt=s(i6);Spe=n(zmt,"SPAN",{});var Qmt=s(Spe);m(ry.$$.fragment,Qmt),Qmt.forEach(t),zmt.forEach(t),prr=i(o$e),Rpe=n(o$e,"SPAN",{});var Wmt=s(Rpe);_rr=r(Wmt,"TFAutoModelForPreTraining"),Wmt.forEach(t),o$e.forEach(t),QRe=i(c),vr=n(c,"DIV",{class:!0});var Ol=s(vr);m(ty.$$.fragment,Ol),urr=i(Ol),bc=n(Ol,"P",{});var QU=s(bc);brr=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zO=n(QU,"A",{href:!0});var Hmt=s(zO);Frr=r(Hmt,"from_pretrained()"),Hmt.forEach(t),vrr=r(QU," class method or the "),QO=n(QU,"A",{href:!0});var Umt=s(QO);Trr=r(Umt,"from_config()"),Umt.forEach(t),Mrr=r(QU,` class
method.`),QU.forEach(t),Err=i(Ol),ay=n(Ol,"P",{});var r$e=s(ay);Crr=r(r$e,"This class cannot be instantiated directly using "),Bpe=n(r$e,"CODE",{});var Jmt=s(Bpe);wrr=r(Jmt,"__init__()"),Jmt.forEach(t),Arr=r(r$e," (throws an error)."),r$e.forEach(t),yrr=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(ny.$$.fragment,Vl),Lrr=i(Vl),Ppe=n(Vl,"P",{});var Ymt=s(Ppe);xrr=r(Ymt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ymt.forEach(t),krr=i(Vl),Fc=n(Vl,"P",{});var WU=s(Fc);Srr=r(WU,`Note:
Loading a model from its configuration file does `),$pe=n(WU,"STRONG",{});var Kmt=s($pe);Rrr=r(Kmt,"not"),Kmt.forEach(t),Brr=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(WU,"A",{href:!0});var Zmt=s(WO);Prr=r(Zmt,"from_pretrained()"),Zmt.forEach(t),$rr=r(WU," to load the model weights."),WU.forEach(t),Irr=i(Vl),Ipe=n(Vl,"P",{});var egt=s(Ipe);qrr=r(egt,"Examples:"),egt.forEach(t),Nrr=i(Vl),m(sy.$$.fragment,Vl),Vl.forEach(t),jrr=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(ly.$$.fragment,_a),Drr=i(_a),qpe=n(_a,"P",{});var ogt=s(qpe);Grr=r(ogt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ogt.forEach(t),Orr=i(_a),un=n(_a,"P",{});var zC=s(un);Vrr=r(zC,"The model class to instantiate is selected based on the "),Npe=n(zC,"CODE",{});var rgt=s(Npe);Xrr=r(rgt,"model_type"),rgt.forEach(t),zrr=r(zC,` property of the config object (either
passed as an argument or loaded from `),jpe=n(zC,"CODE",{});var tgt=s(jpe);Qrr=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),Wrr=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(zC,"CODE",{});var agt=s(Dpe);Hrr=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),Urr=r(zC,":"),zC.forEach(t),Jrr=i(_a),H=n(_a,"UL",{});var U=s(H);d6=n(U,"LI",{});var e7e=s(d6);Gpe=n(e7e,"STRONG",{});var ngt=s(Gpe);Yrr=r(ngt,"albert"),ngt.forEach(t),Krr=r(e7e," \u2014 "),HO=n(e7e,"A",{href:!0});var sgt=s(HO);Zrr=r(sgt,"TFAlbertForPreTraining"),sgt.forEach(t),etr=r(e7e," (ALBERT model)"),e7e.forEach(t),otr=i(U),c6=n(U,"LI",{});var o7e=s(c6);Ope=n(o7e,"STRONG",{});var lgt=s(Ope);rtr=r(lgt,"bart"),lgt.forEach(t),ttr=r(o7e," \u2014 "),UO=n(o7e,"A",{href:!0});var igt=s(UO);atr=r(igt,"TFBartForConditionalGeneration"),igt.forEach(t),ntr=r(o7e," (BART model)"),o7e.forEach(t),str=i(U),f6=n(U,"LI",{});var r7e=s(f6);Vpe=n(r7e,"STRONG",{});var dgt=s(Vpe);ltr=r(dgt,"bert"),dgt.forEach(t),itr=r(r7e," \u2014 "),JO=n(r7e,"A",{href:!0});var cgt=s(JO);dtr=r(cgt,"TFBertForPreTraining"),cgt.forEach(t),ctr=r(r7e," (BERT model)"),r7e.forEach(t),ftr=i(U),m6=n(U,"LI",{});var t7e=s(m6);Xpe=n(t7e,"STRONG",{});var fgt=s(Xpe);mtr=r(fgt,"camembert"),fgt.forEach(t),gtr=r(t7e," \u2014 "),YO=n(t7e,"A",{href:!0});var mgt=s(YO);htr=r(mgt,"TFCamembertForMaskedLM"),mgt.forEach(t),ptr=r(t7e," (CamemBERT model)"),t7e.forEach(t),_tr=i(U),g6=n(U,"LI",{});var a7e=s(g6);zpe=n(a7e,"STRONG",{});var ggt=s(zpe);utr=r(ggt,"ctrl"),ggt.forEach(t),btr=r(a7e," \u2014 "),KO=n(a7e,"A",{href:!0});var hgt=s(KO);Ftr=r(hgt,"TFCTRLLMHeadModel"),hgt.forEach(t),vtr=r(a7e," (CTRL model)"),a7e.forEach(t),Ttr=i(U),h6=n(U,"LI",{});var n7e=s(h6);Qpe=n(n7e,"STRONG",{});var pgt=s(Qpe);Mtr=r(pgt,"distilbert"),pgt.forEach(t),Etr=r(n7e," \u2014 "),ZO=n(n7e,"A",{href:!0});var _gt=s(ZO);Ctr=r(_gt,"TFDistilBertForMaskedLM"),_gt.forEach(t),wtr=r(n7e," (DistilBERT model)"),n7e.forEach(t),Atr=i(U),p6=n(U,"LI",{});var s7e=s(p6);Wpe=n(s7e,"STRONG",{});var ugt=s(Wpe);ytr=r(ugt,"electra"),ugt.forEach(t),Ltr=r(s7e," \u2014 "),eV=n(s7e,"A",{href:!0});var bgt=s(eV);xtr=r(bgt,"TFElectraForPreTraining"),bgt.forEach(t),ktr=r(s7e," (ELECTRA model)"),s7e.forEach(t),Str=i(U),_6=n(U,"LI",{});var l7e=s(_6);Hpe=n(l7e,"STRONG",{});var Fgt=s(Hpe);Rtr=r(Fgt,"flaubert"),Fgt.forEach(t),Btr=r(l7e," \u2014 "),oV=n(l7e,"A",{href:!0});var vgt=s(oV);Ptr=r(vgt,"TFFlaubertWithLMHeadModel"),vgt.forEach(t),$tr=r(l7e," (FlauBERT model)"),l7e.forEach(t),Itr=i(U),u6=n(U,"LI",{});var i7e=s(u6);Upe=n(i7e,"STRONG",{});var Tgt=s(Upe);qtr=r(Tgt,"funnel"),Tgt.forEach(t),Ntr=r(i7e," \u2014 "),rV=n(i7e,"A",{href:!0});var Mgt=s(rV);jtr=r(Mgt,"TFFunnelForPreTraining"),Mgt.forEach(t),Dtr=r(i7e," (Funnel Transformer model)"),i7e.forEach(t),Gtr=i(U),b6=n(U,"LI",{});var d7e=s(b6);Jpe=n(d7e,"STRONG",{});var Egt=s(Jpe);Otr=r(Egt,"gpt2"),Egt.forEach(t),Vtr=r(d7e," \u2014 "),tV=n(d7e,"A",{href:!0});var Cgt=s(tV);Xtr=r(Cgt,"TFGPT2LMHeadModel"),Cgt.forEach(t),ztr=r(d7e," (OpenAI GPT-2 model)"),d7e.forEach(t),Qtr=i(U),F6=n(U,"LI",{});var c7e=s(F6);Ype=n(c7e,"STRONG",{});var wgt=s(Ype);Wtr=r(wgt,"layoutlm"),wgt.forEach(t),Htr=r(c7e," \u2014 "),aV=n(c7e,"A",{href:!0});var Agt=s(aV);Utr=r(Agt,"TFLayoutLMForMaskedLM"),Agt.forEach(t),Jtr=r(c7e," (LayoutLM model)"),c7e.forEach(t),Ytr=i(U),v6=n(U,"LI",{});var f7e=s(v6);Kpe=n(f7e,"STRONG",{});var ygt=s(Kpe);Ktr=r(ygt,"lxmert"),ygt.forEach(t),Ztr=r(f7e," \u2014 "),nV=n(f7e,"A",{href:!0});var Lgt=s(nV);ear=r(Lgt,"TFLxmertForPreTraining"),Lgt.forEach(t),oar=r(f7e," (LXMERT model)"),f7e.forEach(t),rar=i(U),T6=n(U,"LI",{});var m7e=s(T6);Zpe=n(m7e,"STRONG",{});var xgt=s(Zpe);tar=r(xgt,"mobilebert"),xgt.forEach(t),aar=r(m7e," \u2014 "),sV=n(m7e,"A",{href:!0});var kgt=s(sV);nar=r(kgt,"TFMobileBertForPreTraining"),kgt.forEach(t),sar=r(m7e," (MobileBERT model)"),m7e.forEach(t),lar=i(U),M6=n(U,"LI",{});var g7e=s(M6);e_e=n(g7e,"STRONG",{});var Sgt=s(e_e);iar=r(Sgt,"mpnet"),Sgt.forEach(t),dar=r(g7e," \u2014 "),lV=n(g7e,"A",{href:!0});var Rgt=s(lV);car=r(Rgt,"TFMPNetForMaskedLM"),Rgt.forEach(t),far=r(g7e," (MPNet model)"),g7e.forEach(t),mar=i(U),E6=n(U,"LI",{});var h7e=s(E6);o_e=n(h7e,"STRONG",{});var Bgt=s(o_e);gar=r(Bgt,"openai-gpt"),Bgt.forEach(t),har=r(h7e," \u2014 "),iV=n(h7e,"A",{href:!0});var Pgt=s(iV);par=r(Pgt,"TFOpenAIGPTLMHeadModel"),Pgt.forEach(t),_ar=r(h7e," (OpenAI GPT model)"),h7e.forEach(t),uar=i(U),C6=n(U,"LI",{});var p7e=s(C6);r_e=n(p7e,"STRONG",{});var $gt=s(r_e);bar=r($gt,"roberta"),$gt.forEach(t),Far=r(p7e," \u2014 "),dV=n(p7e,"A",{href:!0});var Igt=s(dV);Tar=r(Igt,"TFRobertaForMaskedLM"),Igt.forEach(t),Mar=r(p7e," (RoBERTa model)"),p7e.forEach(t),Ear=i(U),w6=n(U,"LI",{});var _7e=s(w6);t_e=n(_7e,"STRONG",{});var qgt=s(t_e);Car=r(qgt,"t5"),qgt.forEach(t),war=r(_7e," \u2014 "),cV=n(_7e,"A",{href:!0});var Ngt=s(cV);Aar=r(Ngt,"TFT5ForConditionalGeneration"),Ngt.forEach(t),yar=r(_7e," (T5 model)"),_7e.forEach(t),Lar=i(U),A6=n(U,"LI",{});var u7e=s(A6);a_e=n(u7e,"STRONG",{});var jgt=s(a_e);xar=r(jgt,"tapas"),jgt.forEach(t),kar=r(u7e," \u2014 "),fV=n(u7e,"A",{href:!0});var Dgt=s(fV);Sar=r(Dgt,"TFTapasForMaskedLM"),Dgt.forEach(t),Rar=r(u7e," (TAPAS model)"),u7e.forEach(t),Bar=i(U),y6=n(U,"LI",{});var b7e=s(y6);n_e=n(b7e,"STRONG",{});var Ggt=s(n_e);Par=r(Ggt,"transfo-xl"),Ggt.forEach(t),$ar=r(b7e," \u2014 "),mV=n(b7e,"A",{href:!0});var Ogt=s(mV);Iar=r(Ogt,"TFTransfoXLLMHeadModel"),Ogt.forEach(t),qar=r(b7e," (Transformer-XL model)"),b7e.forEach(t),Nar=i(U),L6=n(U,"LI",{});var F7e=s(L6);s_e=n(F7e,"STRONG",{});var Vgt=s(s_e);jar=r(Vgt,"vit_mae"),Vgt.forEach(t),Dar=r(F7e," \u2014 "),gV=n(F7e,"A",{href:!0});var Xgt=s(gV);Gar=r(Xgt,"TFViTMAEForPreTraining"),Xgt.forEach(t),Oar=r(F7e," (ViTMAE model)"),F7e.forEach(t),Var=i(U),x6=n(U,"LI",{});var v7e=s(x6);l_e=n(v7e,"STRONG",{});var zgt=s(l_e);Xar=r(zgt,"xlm"),zgt.forEach(t),zar=r(v7e," \u2014 "),hV=n(v7e,"A",{href:!0});var Qgt=s(hV);Qar=r(Qgt,"TFXLMWithLMHeadModel"),Qgt.forEach(t),War=r(v7e," (XLM model)"),v7e.forEach(t),Har=i(U),k6=n(U,"LI",{});var T7e=s(k6);i_e=n(T7e,"STRONG",{});var Wgt=s(i_e);Uar=r(Wgt,"xlm-roberta"),Wgt.forEach(t),Jar=r(T7e," \u2014 "),pV=n(T7e,"A",{href:!0});var Hgt=s(pV);Yar=r(Hgt,"TFXLMRobertaForMaskedLM"),Hgt.forEach(t),Kar=r(T7e," (XLM-RoBERTa model)"),T7e.forEach(t),Zar=i(U),S6=n(U,"LI",{});var M7e=s(S6);d_e=n(M7e,"STRONG",{});var Ugt=s(d_e);enr=r(Ugt,"xlnet"),Ugt.forEach(t),onr=r(M7e," \u2014 "),_V=n(M7e,"A",{href:!0});var Jgt=s(_V);rnr=r(Jgt,"TFXLNetLMHeadModel"),Jgt.forEach(t),tnr=r(M7e," (XLNet model)"),M7e.forEach(t),U.forEach(t),anr=i(_a),c_e=n(_a,"P",{});var Ygt=s(c_e);nnr=r(Ygt,"Examples:"),Ygt.forEach(t),snr=i(_a),m(iy.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),WRe=i(c),vc=n(c,"H2",{class:!0});var t$e=s(vc);R6=n(t$e,"A",{id:!0,class:!0,href:!0});var Kgt=s(R6);f_e=n(Kgt,"SPAN",{});var Zgt=s(f_e);m(dy.$$.fragment,Zgt),Zgt.forEach(t),Kgt.forEach(t),lnr=i(t$e),m_e=n(t$e,"SPAN",{});var eht=s(m_e);inr=r(eht,"TFAutoModelForCausalLM"),eht.forEach(t),t$e.forEach(t),HRe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(cy.$$.fragment,Xl),dnr=i(Xl),Tc=n(Xl,"P",{});var HU=s(Tc);cnr=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uV=n(HU,"A",{href:!0});var oht=s(uV);fnr=r(oht,"from_pretrained()"),oht.forEach(t),mnr=r(HU," class method or the "),bV=n(HU,"A",{href:!0});var rht=s(bV);gnr=r(rht,"from_config()"),rht.forEach(t),hnr=r(HU,` class
method.`),HU.forEach(t),pnr=i(Xl),fy=n(Xl,"P",{});var a$e=s(fy);_nr=r(a$e,"This class cannot be instantiated directly using "),g_e=n(a$e,"CODE",{});var tht=s(g_e);unr=r(tht,"__init__()"),tht.forEach(t),bnr=r(a$e," (throws an error)."),a$e.forEach(t),Fnr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(my.$$.fragment,zl),vnr=i(zl),h_e=n(zl,"P",{});var aht=s(h_e);Tnr=r(aht,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),aht.forEach(t),Mnr=i(zl),Mc=n(zl,"P",{});var UU=s(Mc);Enr=r(UU,`Note:
Loading a model from its configuration file does `),p_e=n(UU,"STRONG",{});var nht=s(p_e);Cnr=r(nht,"not"),nht.forEach(t),wnr=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(UU,"A",{href:!0});var sht=s(FV);Anr=r(sht,"from_pretrained()"),sht.forEach(t),ynr=r(UU," to load the model weights."),UU.forEach(t),Lnr=i(zl),__e=n(zl,"P",{});var lht=s(__e);xnr=r(lht,"Examples:"),lht.forEach(t),knr=i(zl),m(gy.$$.fragment,zl),zl.forEach(t),Snr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(hy.$$.fragment,ua),Rnr=i(ua),u_e=n(ua,"P",{});var iht=s(u_e);Bnr=r(iht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),iht.forEach(t),Pnr=i(ua),bn=n(ua,"P",{});var QC=s(bn);$nr=r(QC,"The model class to instantiate is selected based on the "),b_e=n(QC,"CODE",{});var dht=s(b_e);Inr=r(dht,"model_type"),dht.forEach(t),qnr=r(QC,` property of the config object (either
passed as an argument or loaded from `),F_e=n(QC,"CODE",{});var cht=s(F_e);Nnr=r(cht,"pretrained_model_name_or_path"),cht.forEach(t),jnr=r(QC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v_e=n(QC,"CODE",{});var fht=s(v_e);Dnr=r(fht,"pretrained_model_name_or_path"),fht.forEach(t),Gnr=r(QC,":"),QC.forEach(t),Onr=i(ua),ce=n(ua,"UL",{});var he=s(ce);B6=n(he,"LI",{});var E7e=s(B6);T_e=n(E7e,"STRONG",{});var mht=s(T_e);Vnr=r(mht,"bert"),mht.forEach(t),Xnr=r(E7e," \u2014 "),vV=n(E7e,"A",{href:!0});var ght=s(vV);znr=r(ght,"TFBertLMHeadModel"),ght.forEach(t),Qnr=r(E7e," (BERT model)"),E7e.forEach(t),Wnr=i(he),P6=n(he,"LI",{});var C7e=s(P6);M_e=n(C7e,"STRONG",{});var hht=s(M_e);Hnr=r(hht,"camembert"),hht.forEach(t),Unr=r(C7e," \u2014 "),TV=n(C7e,"A",{href:!0});var pht=s(TV);Jnr=r(pht,"TFCamembertForCausalLM"),pht.forEach(t),Ynr=r(C7e," (CamemBERT model)"),C7e.forEach(t),Knr=i(he),$6=n(he,"LI",{});var w7e=s($6);E_e=n(w7e,"STRONG",{});var _ht=s(E_e);Znr=r(_ht,"ctrl"),_ht.forEach(t),esr=r(w7e," \u2014 "),MV=n(w7e,"A",{href:!0});var uht=s(MV);osr=r(uht,"TFCTRLLMHeadModel"),uht.forEach(t),rsr=r(w7e," (CTRL model)"),w7e.forEach(t),tsr=i(he),I6=n(he,"LI",{});var A7e=s(I6);C_e=n(A7e,"STRONG",{});var bht=s(C_e);asr=r(bht,"gpt2"),bht.forEach(t),nsr=r(A7e," \u2014 "),EV=n(A7e,"A",{href:!0});var Fht=s(EV);ssr=r(Fht,"TFGPT2LMHeadModel"),Fht.forEach(t),lsr=r(A7e," (OpenAI GPT-2 model)"),A7e.forEach(t),isr=i(he),q6=n(he,"LI",{});var y7e=s(q6);w_e=n(y7e,"STRONG",{});var vht=s(w_e);dsr=r(vht,"gptj"),vht.forEach(t),csr=r(y7e," \u2014 "),CV=n(y7e,"A",{href:!0});var Tht=s(CV);fsr=r(Tht,"TFGPTJForCausalLM"),Tht.forEach(t),msr=r(y7e," (GPT-J model)"),y7e.forEach(t),gsr=i(he),N6=n(he,"LI",{});var L7e=s(N6);A_e=n(L7e,"STRONG",{});var Mht=s(A_e);hsr=r(Mht,"openai-gpt"),Mht.forEach(t),psr=r(L7e," \u2014 "),wV=n(L7e,"A",{href:!0});var Eht=s(wV);_sr=r(Eht,"TFOpenAIGPTLMHeadModel"),Eht.forEach(t),usr=r(L7e," (OpenAI GPT model)"),L7e.forEach(t),bsr=i(he),j6=n(he,"LI",{});var x7e=s(j6);y_e=n(x7e,"STRONG",{});var Cht=s(y_e);Fsr=r(Cht,"rembert"),Cht.forEach(t),vsr=r(x7e," \u2014 "),AV=n(x7e,"A",{href:!0});var wht=s(AV);Tsr=r(wht,"TFRemBertForCausalLM"),wht.forEach(t),Msr=r(x7e," (RemBERT model)"),x7e.forEach(t),Esr=i(he),D6=n(he,"LI",{});var k7e=s(D6);L_e=n(k7e,"STRONG",{});var Aht=s(L_e);Csr=r(Aht,"roberta"),Aht.forEach(t),wsr=r(k7e," \u2014 "),yV=n(k7e,"A",{href:!0});var yht=s(yV);Asr=r(yht,"TFRobertaForCausalLM"),yht.forEach(t),ysr=r(k7e," (RoBERTa model)"),k7e.forEach(t),Lsr=i(he),G6=n(he,"LI",{});var S7e=s(G6);x_e=n(S7e,"STRONG",{});var Lht=s(x_e);xsr=r(Lht,"roformer"),Lht.forEach(t),ksr=r(S7e," \u2014 "),LV=n(S7e,"A",{href:!0});var xht=s(LV);Ssr=r(xht,"TFRoFormerForCausalLM"),xht.forEach(t),Rsr=r(S7e," (RoFormer model)"),S7e.forEach(t),Bsr=i(he),O6=n(he,"LI",{});var R7e=s(O6);k_e=n(R7e,"STRONG",{});var kht=s(k_e);Psr=r(kht,"transfo-xl"),kht.forEach(t),$sr=r(R7e," \u2014 "),xV=n(R7e,"A",{href:!0});var Sht=s(xV);Isr=r(Sht,"TFTransfoXLLMHeadModel"),Sht.forEach(t),qsr=r(R7e," (Transformer-XL model)"),R7e.forEach(t),Nsr=i(he),V6=n(he,"LI",{});var B7e=s(V6);S_e=n(B7e,"STRONG",{});var Rht=s(S_e);jsr=r(Rht,"xlm"),Rht.forEach(t),Dsr=r(B7e," \u2014 "),kV=n(B7e,"A",{href:!0});var Bht=s(kV);Gsr=r(Bht,"TFXLMWithLMHeadModel"),Bht.forEach(t),Osr=r(B7e," (XLM model)"),B7e.forEach(t),Vsr=i(he),X6=n(he,"LI",{});var P7e=s(X6);R_e=n(P7e,"STRONG",{});var Pht=s(R_e);Xsr=r(Pht,"xlnet"),Pht.forEach(t),zsr=r(P7e," \u2014 "),SV=n(P7e,"A",{href:!0});var $ht=s(SV);Qsr=r($ht,"TFXLNetLMHeadModel"),$ht.forEach(t),Wsr=r(P7e," (XLNet model)"),P7e.forEach(t),he.forEach(t),Hsr=i(ua),B_e=n(ua,"P",{});var Iht=s(B_e);Usr=r(Iht,"Examples:"),Iht.forEach(t),Jsr=i(ua),m(py.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),URe=i(c),Ec=n(c,"H2",{class:!0});var n$e=s(Ec);z6=n(n$e,"A",{id:!0,class:!0,href:!0});var qht=s(z6);P_e=n(qht,"SPAN",{});var Nht=s(P_e);m(_y.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),Ysr=i(n$e),$_e=n(n$e,"SPAN",{});var jht=s($_e);Ksr=r(jht,"TFAutoModelForImageClassification"),jht.forEach(t),n$e.forEach(t),JRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(uy.$$.fragment,Ql),Zsr=i(Ql),Cc=n(Ql,"P",{});var JU=s(Cc);elr=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(JU,"A",{href:!0});var Dht=s(RV);olr=r(Dht,"from_pretrained()"),Dht.forEach(t),rlr=r(JU," class method or the "),BV=n(JU,"A",{href:!0});var Ght=s(BV);tlr=r(Ght,"from_config()"),Ght.forEach(t),alr=r(JU,` class
method.`),JU.forEach(t),nlr=i(Ql),by=n(Ql,"P",{});var s$e=s(by);slr=r(s$e,"This class cannot be instantiated directly using "),I_e=n(s$e,"CODE",{});var Oht=s(I_e);llr=r(Oht,"__init__()"),Oht.forEach(t),ilr=r(s$e," (throws an error)."),s$e.forEach(t),dlr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m(Fy.$$.fragment,Wl),clr=i(Wl),q_e=n(Wl,"P",{});var Vht=s(q_e);flr=r(Vht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vht.forEach(t),mlr=i(Wl),wc=n(Wl,"P",{});var YU=s(wc);glr=r(YU,`Note:
Loading a model from its configuration file does `),N_e=n(YU,"STRONG",{});var Xht=s(N_e);hlr=r(Xht,"not"),Xht.forEach(t),plr=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),PV=n(YU,"A",{href:!0});var zht=s(PV);_lr=r(zht,"from_pretrained()"),zht.forEach(t),ulr=r(YU," to load the model weights."),YU.forEach(t),blr=i(Wl),j_e=n(Wl,"P",{});var Qht=s(j_e);Flr=r(Qht,"Examples:"),Qht.forEach(t),vlr=i(Wl),m(vy.$$.fragment,Wl),Wl.forEach(t),Tlr=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(Ty.$$.fragment,ba),Mlr=i(ba),D_e=n(ba,"P",{});var Wht=s(D_e);Elr=r(Wht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wht.forEach(t),Clr=i(ba),Fn=n(ba,"P",{});var WC=s(Fn);wlr=r(WC,"The model class to instantiate is selected based on the "),G_e=n(WC,"CODE",{});var Hht=s(G_e);Alr=r(Hht,"model_type"),Hht.forEach(t),ylr=r(WC,` property of the config object (either
passed as an argument or loaded from `),O_e=n(WC,"CODE",{});var Uht=s(O_e);Llr=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),xlr=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(WC,"CODE",{});var Jht=s(V_e);klr=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),Slr=r(WC,":"),WC.forEach(t),Rlr=i(ba),My=n(ba,"UL",{});var l$e=s(My);Q6=n(l$e,"LI",{});var $7e=s(Q6);X_e=n($7e,"STRONG",{});var Yht=s(X_e);Blr=r(Yht,"convnext"),Yht.forEach(t),Plr=r($7e," \u2014 "),$V=n($7e,"A",{href:!0});var Kht=s($V);$lr=r(Kht,"TFConvNextForImageClassification"),Kht.forEach(t),Ilr=r($7e," (ConvNext model)"),$7e.forEach(t),qlr=i(l$e),W6=n(l$e,"LI",{});var I7e=s(W6);z_e=n(I7e,"STRONG",{});var Zht=s(z_e);Nlr=r(Zht,"vit"),Zht.forEach(t),jlr=r(I7e," \u2014 "),IV=n(I7e,"A",{href:!0});var ept=s(IV);Dlr=r(ept,"TFViTForImageClassification"),ept.forEach(t),Glr=r(I7e," (ViT model)"),I7e.forEach(t),l$e.forEach(t),Olr=i(ba),Q_e=n(ba,"P",{});var opt=s(Q_e);Vlr=r(opt,"Examples:"),opt.forEach(t),Xlr=i(ba),m(Ey.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),YRe=i(c),Ac=n(c,"H2",{class:!0});var i$e=s(Ac);H6=n(i$e,"A",{id:!0,class:!0,href:!0});var rpt=s(H6);W_e=n(rpt,"SPAN",{});var tpt=s(W_e);m(Cy.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),zlr=i(i$e),H_e=n(i$e,"SPAN",{});var apt=s(H_e);Qlr=r(apt,"TFAutoModelForMaskedLM"),apt.forEach(t),i$e.forEach(t),KRe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(wy.$$.fragment,Hl),Wlr=i(Hl),yc=n(Hl,"P",{});var KU=s(yc);Hlr=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qV=n(KU,"A",{href:!0});var npt=s(qV);Ulr=r(npt,"from_pretrained()"),npt.forEach(t),Jlr=r(KU," class method or the "),NV=n(KU,"A",{href:!0});var spt=s(NV);Ylr=r(spt,"from_config()"),spt.forEach(t),Klr=r(KU,` class
method.`),KU.forEach(t),Zlr=i(Hl),Ay=n(Hl,"P",{});var d$e=s(Ay);eir=r(d$e,"This class cannot be instantiated directly using "),U_e=n(d$e,"CODE",{});var lpt=s(U_e);oir=r(lpt,"__init__()"),lpt.forEach(t),rir=r(d$e," (throws an error)."),d$e.forEach(t),tir=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(yy.$$.fragment,Ul),air=i(Ul),J_e=n(Ul,"P",{});var ipt=s(J_e);nir=r(ipt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ipt.forEach(t),sir=i(Ul),Lc=n(Ul,"P",{});var ZU=s(Lc);lir=r(ZU,`Note:
Loading a model from its configuration file does `),Y_e=n(ZU,"STRONG",{});var dpt=s(Y_e);iir=r(dpt,"not"),dpt.forEach(t),dir=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jV=n(ZU,"A",{href:!0});var cpt=s(jV);cir=r(cpt,"from_pretrained()"),cpt.forEach(t),fir=r(ZU," to load the model weights."),ZU.forEach(t),mir=i(Ul),K_e=n(Ul,"P",{});var fpt=s(K_e);gir=r(fpt,"Examples:"),fpt.forEach(t),hir=i(Ul),m(Ly.$$.fragment,Ul),Ul.forEach(t),pir=i(Hl),bo=n(Hl,"DIV",{class:!0});var Fa=s(bo);m(xy.$$.fragment,Fa),_ir=i(Fa),Z_e=n(Fa,"P",{});var mpt=s(Z_e);uir=r(mpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mpt.forEach(t),bir=i(Fa),vn=n(Fa,"P",{});var HC=s(vn);Fir=r(HC,"The model class to instantiate is selected based on the "),eue=n(HC,"CODE",{});var gpt=s(eue);vir=r(gpt,"model_type"),gpt.forEach(t),Tir=r(HC,` property of the config object (either
passed as an argument or loaded from `),oue=n(HC,"CODE",{});var hpt=s(oue);Mir=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),Eir=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n(HC,"CODE",{});var ppt=s(rue);Cir=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),wir=r(HC,":"),HC.forEach(t),Air=i(Fa),J=n(Fa,"UL",{});var ee=s(J);U6=n(ee,"LI",{});var q7e=s(U6);tue=n(q7e,"STRONG",{});var _pt=s(tue);yir=r(_pt,"albert"),_pt.forEach(t),Lir=r(q7e," \u2014 "),DV=n(q7e,"A",{href:!0});var upt=s(DV);xir=r(upt,"TFAlbertForMaskedLM"),upt.forEach(t),kir=r(q7e," (ALBERT model)"),q7e.forEach(t),Sir=i(ee),J6=n(ee,"LI",{});var N7e=s(J6);aue=n(N7e,"STRONG",{});var bpt=s(aue);Rir=r(bpt,"bert"),bpt.forEach(t),Bir=r(N7e," \u2014 "),GV=n(N7e,"A",{href:!0});var Fpt=s(GV);Pir=r(Fpt,"TFBertForMaskedLM"),Fpt.forEach(t),$ir=r(N7e," (BERT model)"),N7e.forEach(t),Iir=i(ee),Y6=n(ee,"LI",{});var j7e=s(Y6);nue=n(j7e,"STRONG",{});var vpt=s(nue);qir=r(vpt,"camembert"),vpt.forEach(t),Nir=r(j7e," \u2014 "),OV=n(j7e,"A",{href:!0});var Tpt=s(OV);jir=r(Tpt,"TFCamembertForMaskedLM"),Tpt.forEach(t),Dir=r(j7e," (CamemBERT model)"),j7e.forEach(t),Gir=i(ee),K6=n(ee,"LI",{});var D7e=s(K6);sue=n(D7e,"STRONG",{});var Mpt=s(sue);Oir=r(Mpt,"convbert"),Mpt.forEach(t),Vir=r(D7e," \u2014 "),VV=n(D7e,"A",{href:!0});var Ept=s(VV);Xir=r(Ept,"TFConvBertForMaskedLM"),Ept.forEach(t),zir=r(D7e," (ConvBERT model)"),D7e.forEach(t),Qir=i(ee),Z6=n(ee,"LI",{});var G7e=s(Z6);lue=n(G7e,"STRONG",{});var Cpt=s(lue);Wir=r(Cpt,"deberta"),Cpt.forEach(t),Hir=r(G7e," \u2014 "),XV=n(G7e,"A",{href:!0});var wpt=s(XV);Uir=r(wpt,"TFDebertaForMaskedLM"),wpt.forEach(t),Jir=r(G7e," (DeBERTa model)"),G7e.forEach(t),Yir=i(ee),eT=n(ee,"LI",{});var O7e=s(eT);iue=n(O7e,"STRONG",{});var Apt=s(iue);Kir=r(Apt,"deberta-v2"),Apt.forEach(t),Zir=r(O7e," \u2014 "),zV=n(O7e,"A",{href:!0});var ypt=s(zV);edr=r(ypt,"TFDebertaV2ForMaskedLM"),ypt.forEach(t),odr=r(O7e," (DeBERTa-v2 model)"),O7e.forEach(t),rdr=i(ee),oT=n(ee,"LI",{});var V7e=s(oT);due=n(V7e,"STRONG",{});var Lpt=s(due);tdr=r(Lpt,"distilbert"),Lpt.forEach(t),adr=r(V7e," \u2014 "),QV=n(V7e,"A",{href:!0});var xpt=s(QV);ndr=r(xpt,"TFDistilBertForMaskedLM"),xpt.forEach(t),sdr=r(V7e," (DistilBERT model)"),V7e.forEach(t),ldr=i(ee),rT=n(ee,"LI",{});var X7e=s(rT);cue=n(X7e,"STRONG",{});var kpt=s(cue);idr=r(kpt,"electra"),kpt.forEach(t),ddr=r(X7e," \u2014 "),WV=n(X7e,"A",{href:!0});var Spt=s(WV);cdr=r(Spt,"TFElectraForMaskedLM"),Spt.forEach(t),fdr=r(X7e," (ELECTRA model)"),X7e.forEach(t),mdr=i(ee),tT=n(ee,"LI",{});var z7e=s(tT);fue=n(z7e,"STRONG",{});var Rpt=s(fue);gdr=r(Rpt,"flaubert"),Rpt.forEach(t),hdr=r(z7e," \u2014 "),HV=n(z7e,"A",{href:!0});var Bpt=s(HV);pdr=r(Bpt,"TFFlaubertWithLMHeadModel"),Bpt.forEach(t),_dr=r(z7e," (FlauBERT model)"),z7e.forEach(t),udr=i(ee),aT=n(ee,"LI",{});var Q7e=s(aT);mue=n(Q7e,"STRONG",{});var Ppt=s(mue);bdr=r(Ppt,"funnel"),Ppt.forEach(t),Fdr=r(Q7e," \u2014 "),UV=n(Q7e,"A",{href:!0});var $pt=s(UV);vdr=r($pt,"TFFunnelForMaskedLM"),$pt.forEach(t),Tdr=r(Q7e," (Funnel Transformer model)"),Q7e.forEach(t),Mdr=i(ee),nT=n(ee,"LI",{});var W7e=s(nT);gue=n(W7e,"STRONG",{});var Ipt=s(gue);Edr=r(Ipt,"layoutlm"),Ipt.forEach(t),Cdr=r(W7e," \u2014 "),JV=n(W7e,"A",{href:!0});var qpt=s(JV);wdr=r(qpt,"TFLayoutLMForMaskedLM"),qpt.forEach(t),Adr=r(W7e," (LayoutLM model)"),W7e.forEach(t),ydr=i(ee),sT=n(ee,"LI",{});var H7e=s(sT);hue=n(H7e,"STRONG",{});var Npt=s(hue);Ldr=r(Npt,"longformer"),Npt.forEach(t),xdr=r(H7e," \u2014 "),YV=n(H7e,"A",{href:!0});var jpt=s(YV);kdr=r(jpt,"TFLongformerForMaskedLM"),jpt.forEach(t),Sdr=r(H7e," (Longformer model)"),H7e.forEach(t),Rdr=i(ee),lT=n(ee,"LI",{});var U7e=s(lT);pue=n(U7e,"STRONG",{});var Dpt=s(pue);Bdr=r(Dpt,"mobilebert"),Dpt.forEach(t),Pdr=r(U7e," \u2014 "),KV=n(U7e,"A",{href:!0});var Gpt=s(KV);$dr=r(Gpt,"TFMobileBertForMaskedLM"),Gpt.forEach(t),Idr=r(U7e," (MobileBERT model)"),U7e.forEach(t),qdr=i(ee),iT=n(ee,"LI",{});var J7e=s(iT);_ue=n(J7e,"STRONG",{});var Opt=s(_ue);Ndr=r(Opt,"mpnet"),Opt.forEach(t),jdr=r(J7e," \u2014 "),ZV=n(J7e,"A",{href:!0});var Vpt=s(ZV);Ddr=r(Vpt,"TFMPNetForMaskedLM"),Vpt.forEach(t),Gdr=r(J7e," (MPNet model)"),J7e.forEach(t),Odr=i(ee),dT=n(ee,"LI",{});var Y7e=s(dT);uue=n(Y7e,"STRONG",{});var Xpt=s(uue);Vdr=r(Xpt,"rembert"),Xpt.forEach(t),Xdr=r(Y7e," \u2014 "),eX=n(Y7e,"A",{href:!0});var zpt=s(eX);zdr=r(zpt,"TFRemBertForMaskedLM"),zpt.forEach(t),Qdr=r(Y7e," (RemBERT model)"),Y7e.forEach(t),Wdr=i(ee),cT=n(ee,"LI",{});var K7e=s(cT);bue=n(K7e,"STRONG",{});var Qpt=s(bue);Hdr=r(Qpt,"roberta"),Qpt.forEach(t),Udr=r(K7e," \u2014 "),oX=n(K7e,"A",{href:!0});var Wpt=s(oX);Jdr=r(Wpt,"TFRobertaForMaskedLM"),Wpt.forEach(t),Ydr=r(K7e," (RoBERTa model)"),K7e.forEach(t),Kdr=i(ee),fT=n(ee,"LI",{});var Z7e=s(fT);Fue=n(Z7e,"STRONG",{});var Hpt=s(Fue);Zdr=r(Hpt,"roformer"),Hpt.forEach(t),ecr=r(Z7e," \u2014 "),rX=n(Z7e,"A",{href:!0});var Upt=s(rX);ocr=r(Upt,"TFRoFormerForMaskedLM"),Upt.forEach(t),rcr=r(Z7e," (RoFormer model)"),Z7e.forEach(t),tcr=i(ee),mT=n(ee,"LI",{});var e9e=s(mT);vue=n(e9e,"STRONG",{});var Jpt=s(vue);acr=r(Jpt,"tapas"),Jpt.forEach(t),ncr=r(e9e," \u2014 "),tX=n(e9e,"A",{href:!0});var Ypt=s(tX);scr=r(Ypt,"TFTapasForMaskedLM"),Ypt.forEach(t),lcr=r(e9e," (TAPAS model)"),e9e.forEach(t),icr=i(ee),gT=n(ee,"LI",{});var o9e=s(gT);Tue=n(o9e,"STRONG",{});var Kpt=s(Tue);dcr=r(Kpt,"xlm"),Kpt.forEach(t),ccr=r(o9e," \u2014 "),aX=n(o9e,"A",{href:!0});var Zpt=s(aX);fcr=r(Zpt,"TFXLMWithLMHeadModel"),Zpt.forEach(t),mcr=r(o9e," (XLM model)"),o9e.forEach(t),gcr=i(ee),hT=n(ee,"LI",{});var r9e=s(hT);Mue=n(r9e,"STRONG",{});var e_t=s(Mue);hcr=r(e_t,"xlm-roberta"),e_t.forEach(t),pcr=r(r9e," \u2014 "),nX=n(r9e,"A",{href:!0});var o_t=s(nX);_cr=r(o_t,"TFXLMRobertaForMaskedLM"),o_t.forEach(t),ucr=r(r9e," (XLM-RoBERTa model)"),r9e.forEach(t),ee.forEach(t),bcr=i(Fa),Eue=n(Fa,"P",{});var r_t=s(Eue);Fcr=r(r_t,"Examples:"),r_t.forEach(t),vcr=i(Fa),m(ky.$$.fragment,Fa),Fa.forEach(t),Hl.forEach(t),ZRe=i(c),xc=n(c,"H2",{class:!0});var c$e=s(xc);pT=n(c$e,"A",{id:!0,class:!0,href:!0});var t_t=s(pT);Cue=n(t_t,"SPAN",{});var a_t=s(Cue);m(Sy.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),Tcr=i(c$e),wue=n(c$e,"SPAN",{});var n_t=s(wue);Mcr=r(n_t,"TFAutoModelForSeq2SeqLM"),n_t.forEach(t),c$e.forEach(t),eBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(Ry.$$.fragment,Jl),Ecr=i(Jl),kc=n(Jl,"P",{});var eJ=s(kc);Ccr=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sX=n(eJ,"A",{href:!0});var s_t=s(sX);wcr=r(s_t,"from_pretrained()"),s_t.forEach(t),Acr=r(eJ," class method or the "),lX=n(eJ,"A",{href:!0});var l_t=s(lX);ycr=r(l_t,"from_config()"),l_t.forEach(t),Lcr=r(eJ,` class
method.`),eJ.forEach(t),xcr=i(Jl),By=n(Jl,"P",{});var f$e=s(By);kcr=r(f$e,"This class cannot be instantiated directly using "),Aue=n(f$e,"CODE",{});var i_t=s(Aue);Scr=r(i_t,"__init__()"),i_t.forEach(t),Rcr=r(f$e," (throws an error)."),f$e.forEach(t),Bcr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(Py.$$.fragment,Yl),Pcr=i(Yl),yue=n(Yl,"P",{});var d_t=s(yue);$cr=r(d_t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),d_t.forEach(t),Icr=i(Yl),Sc=n(Yl,"P",{});var oJ=s(Sc);qcr=r(oJ,`Note:
Loading a model from its configuration file does `),Lue=n(oJ,"STRONG",{});var c_t=s(Lue);Ncr=r(c_t,"not"),c_t.forEach(t),jcr=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(oJ,"A",{href:!0});var f_t=s(iX);Dcr=r(f_t,"from_pretrained()"),f_t.forEach(t),Gcr=r(oJ," to load the model weights."),oJ.forEach(t),Ocr=i(Yl),xue=n(Yl,"P",{});var m_t=s(xue);Vcr=r(m_t,"Examples:"),m_t.forEach(t),Xcr=i(Yl),m($y.$$.fragment,Yl),Yl.forEach(t),zcr=i(Jl),Fo=n(Jl,"DIV",{class:!0});var va=s(Fo);m(Iy.$$.fragment,va),Qcr=i(va),kue=n(va,"P",{});var g_t=s(kue);Wcr=r(g_t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),g_t.forEach(t),Hcr=i(va),Tn=n(va,"P",{});var UC=s(Tn);Ucr=r(UC,"The model class to instantiate is selected based on the "),Sue=n(UC,"CODE",{});var h_t=s(Sue);Jcr=r(h_t,"model_type"),h_t.forEach(t),Ycr=r(UC,` property of the config object (either
passed as an argument or loaded from `),Rue=n(UC,"CODE",{});var p_t=s(Rue);Kcr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),Zcr=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bue=n(UC,"CODE",{});var __t=s(Bue);efr=r(__t,"pretrained_model_name_or_path"),__t.forEach(t),ofr=r(UC,":"),UC.forEach(t),rfr=i(va),ue=n(va,"UL",{});var we=s(ue);_T=n(we,"LI",{});var t9e=s(_T);Pue=n(t9e,"STRONG",{});var u_t=s(Pue);tfr=r(u_t,"bart"),u_t.forEach(t),afr=r(t9e," \u2014 "),dX=n(t9e,"A",{href:!0});var b_t=s(dX);nfr=r(b_t,"TFBartForConditionalGeneration"),b_t.forEach(t),sfr=r(t9e," (BART model)"),t9e.forEach(t),lfr=i(we),uT=n(we,"LI",{});var a9e=s(uT);$ue=n(a9e,"STRONG",{});var F_t=s($ue);ifr=r(F_t,"blenderbot"),F_t.forEach(t),dfr=r(a9e," \u2014 "),cX=n(a9e,"A",{href:!0});var v_t=s(cX);cfr=r(v_t,"TFBlenderbotForConditionalGeneration"),v_t.forEach(t),ffr=r(a9e," (Blenderbot model)"),a9e.forEach(t),mfr=i(we),bT=n(we,"LI",{});var n9e=s(bT);Iue=n(n9e,"STRONG",{});var T_t=s(Iue);gfr=r(T_t,"blenderbot-small"),T_t.forEach(t),hfr=r(n9e," \u2014 "),fX=n(n9e,"A",{href:!0});var M_t=s(fX);pfr=r(M_t,"TFBlenderbotSmallForConditionalGeneration"),M_t.forEach(t),_fr=r(n9e," (BlenderbotSmall model)"),n9e.forEach(t),ufr=i(we),FT=n(we,"LI",{});var s9e=s(FT);que=n(s9e,"STRONG",{});var E_t=s(que);bfr=r(E_t,"encoder-decoder"),E_t.forEach(t),Ffr=r(s9e," \u2014 "),mX=n(s9e,"A",{href:!0});var C_t=s(mX);vfr=r(C_t,"TFEncoderDecoderModel"),C_t.forEach(t),Tfr=r(s9e," (Encoder decoder model)"),s9e.forEach(t),Mfr=i(we),vT=n(we,"LI",{});var l9e=s(vT);Nue=n(l9e,"STRONG",{});var w_t=s(Nue);Efr=r(w_t,"led"),w_t.forEach(t),Cfr=r(l9e," \u2014 "),gX=n(l9e,"A",{href:!0});var A_t=s(gX);wfr=r(A_t,"TFLEDForConditionalGeneration"),A_t.forEach(t),Afr=r(l9e," (LED model)"),l9e.forEach(t),yfr=i(we),TT=n(we,"LI",{});var i9e=s(TT);jue=n(i9e,"STRONG",{});var y_t=s(jue);Lfr=r(y_t,"marian"),y_t.forEach(t),xfr=r(i9e," \u2014 "),hX=n(i9e,"A",{href:!0});var L_t=s(hX);kfr=r(L_t,"TFMarianMTModel"),L_t.forEach(t),Sfr=r(i9e," (Marian model)"),i9e.forEach(t),Rfr=i(we),MT=n(we,"LI",{});var d9e=s(MT);Due=n(d9e,"STRONG",{});var x_t=s(Due);Bfr=r(x_t,"mbart"),x_t.forEach(t),Pfr=r(d9e," \u2014 "),pX=n(d9e,"A",{href:!0});var k_t=s(pX);$fr=r(k_t,"TFMBartForConditionalGeneration"),k_t.forEach(t),Ifr=r(d9e," (mBART model)"),d9e.forEach(t),qfr=i(we),ET=n(we,"LI",{});var c9e=s(ET);Gue=n(c9e,"STRONG",{});var S_t=s(Gue);Nfr=r(S_t,"mt5"),S_t.forEach(t),jfr=r(c9e," \u2014 "),_X=n(c9e,"A",{href:!0});var R_t=s(_X);Dfr=r(R_t,"TFMT5ForConditionalGeneration"),R_t.forEach(t),Gfr=r(c9e," (mT5 model)"),c9e.forEach(t),Ofr=i(we),CT=n(we,"LI",{});var f9e=s(CT);Oue=n(f9e,"STRONG",{});var B_t=s(Oue);Vfr=r(B_t,"pegasus"),B_t.forEach(t),Xfr=r(f9e," \u2014 "),uX=n(f9e,"A",{href:!0});var P_t=s(uX);zfr=r(P_t,"TFPegasusForConditionalGeneration"),P_t.forEach(t),Qfr=r(f9e," (Pegasus model)"),f9e.forEach(t),Wfr=i(we),wT=n(we,"LI",{});var m9e=s(wT);Vue=n(m9e,"STRONG",{});var $_t=s(Vue);Hfr=r($_t,"t5"),$_t.forEach(t),Ufr=r(m9e," \u2014 "),bX=n(m9e,"A",{href:!0});var I_t=s(bX);Jfr=r(I_t,"TFT5ForConditionalGeneration"),I_t.forEach(t),Yfr=r(m9e," (T5 model)"),m9e.forEach(t),we.forEach(t),Kfr=i(va),Xue=n(va,"P",{});var q_t=s(Xue);Zfr=r(q_t,"Examples:"),q_t.forEach(t),emr=i(va),m(qy.$$.fragment,va),va.forEach(t),Jl.forEach(t),oBe=i(c),Rc=n(c,"H2",{class:!0});var m$e=s(Rc);AT=n(m$e,"A",{id:!0,class:!0,href:!0});var N_t=s(AT);zue=n(N_t,"SPAN",{});var j_t=s(zue);m(Ny.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),omr=i(m$e),Que=n(m$e,"SPAN",{});var D_t=s(Que);rmr=r(D_t,"TFAutoModelForSequenceClassification"),D_t.forEach(t),m$e.forEach(t),rBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(jy.$$.fragment,Kl),tmr=i(Kl),Bc=n(Kl,"P",{});var rJ=s(Bc);amr=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),FX=n(rJ,"A",{href:!0});var G_t=s(FX);nmr=r(G_t,"from_pretrained()"),G_t.forEach(t),smr=r(rJ," class method or the "),vX=n(rJ,"A",{href:!0});var O_t=s(vX);lmr=r(O_t,"from_config()"),O_t.forEach(t),imr=r(rJ,` class
method.`),rJ.forEach(t),dmr=i(Kl),Dy=n(Kl,"P",{});var g$e=s(Dy);cmr=r(g$e,"This class cannot be instantiated directly using "),Wue=n(g$e,"CODE",{});var V_t=s(Wue);fmr=r(V_t,"__init__()"),V_t.forEach(t),mmr=r(g$e," (throws an error)."),g$e.forEach(t),gmr=i(Kl),Ft=n(Kl,"DIV",{class:!0});var Zl=s(Ft);m(Gy.$$.fragment,Zl),hmr=i(Zl),Hue=n(Zl,"P",{});var X_t=s(Hue);pmr=r(X_t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),X_t.forEach(t),_mr=i(Zl),Pc=n(Zl,"P",{});var tJ=s(Pc);umr=r(tJ,`Note:
Loading a model from its configuration file does `),Uue=n(tJ,"STRONG",{});var z_t=s(Uue);bmr=r(z_t,"not"),z_t.forEach(t),Fmr=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TX=n(tJ,"A",{href:!0});var Q_t=s(TX);vmr=r(Q_t,"from_pretrained()"),Q_t.forEach(t),Tmr=r(tJ," to load the model weights."),tJ.forEach(t),Mmr=i(Zl),Jue=n(Zl,"P",{});var W_t=s(Jue);Emr=r(W_t,"Examples:"),W_t.forEach(t),Cmr=i(Zl),m(Oy.$$.fragment,Zl),Zl.forEach(t),wmr=i(Kl),vo=n(Kl,"DIV",{class:!0});var Ta=s(vo);m(Vy.$$.fragment,Ta),Amr=i(Ta),Yue=n(Ta,"P",{});var H_t=s(Yue);ymr=r(H_t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),H_t.forEach(t),Lmr=i(Ta),Mn=n(Ta,"P",{});var JC=s(Mn);xmr=r(JC,"The model class to instantiate is selected based on the "),Kue=n(JC,"CODE",{});var U_t=s(Kue);kmr=r(U_t,"model_type"),U_t.forEach(t),Smr=r(JC,` property of the config object (either
passed as an argument or loaded from `),Zue=n(JC,"CODE",{});var J_t=s(Zue);Rmr=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Bmr=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e1e=n(JC,"CODE",{});var Y_t=s(e1e);Pmr=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),$mr=r(JC,":"),JC.forEach(t),Imr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);yT=n(Q,"LI",{});var g9e=s(yT);o1e=n(g9e,"STRONG",{});var K_t=s(o1e);qmr=r(K_t,"albert"),K_t.forEach(t),Nmr=r(g9e," \u2014 "),MX=n(g9e,"A",{href:!0});var Z_t=s(MX);jmr=r(Z_t,"TFAlbertForSequenceClassification"),Z_t.forEach(t),Dmr=r(g9e," (ALBERT model)"),g9e.forEach(t),Gmr=i(Q),LT=n(Q,"LI",{});var h9e=s(LT);r1e=n(h9e,"STRONG",{});var eut=s(r1e);Omr=r(eut,"bert"),eut.forEach(t),Vmr=r(h9e," \u2014 "),EX=n(h9e,"A",{href:!0});var out=s(EX);Xmr=r(out,"TFBertForSequenceClassification"),out.forEach(t),zmr=r(h9e," (BERT model)"),h9e.forEach(t),Qmr=i(Q),xT=n(Q,"LI",{});var p9e=s(xT);t1e=n(p9e,"STRONG",{});var rut=s(t1e);Wmr=r(rut,"camembert"),rut.forEach(t),Hmr=r(p9e," \u2014 "),CX=n(p9e,"A",{href:!0});var tut=s(CX);Umr=r(tut,"TFCamembertForSequenceClassification"),tut.forEach(t),Jmr=r(p9e," (CamemBERT model)"),p9e.forEach(t),Ymr=i(Q),kT=n(Q,"LI",{});var _9e=s(kT);a1e=n(_9e,"STRONG",{});var aut=s(a1e);Kmr=r(aut,"convbert"),aut.forEach(t),Zmr=r(_9e," \u2014 "),wX=n(_9e,"A",{href:!0});var nut=s(wX);egr=r(nut,"TFConvBertForSequenceClassification"),nut.forEach(t),ogr=r(_9e," (ConvBERT model)"),_9e.forEach(t),rgr=i(Q),ST=n(Q,"LI",{});var u9e=s(ST);n1e=n(u9e,"STRONG",{});var sut=s(n1e);tgr=r(sut,"ctrl"),sut.forEach(t),agr=r(u9e," \u2014 "),AX=n(u9e,"A",{href:!0});var lut=s(AX);ngr=r(lut,"TFCTRLForSequenceClassification"),lut.forEach(t),sgr=r(u9e," (CTRL model)"),u9e.forEach(t),lgr=i(Q),RT=n(Q,"LI",{});var b9e=s(RT);s1e=n(b9e,"STRONG",{});var iut=s(s1e);igr=r(iut,"deberta"),iut.forEach(t),dgr=r(b9e," \u2014 "),yX=n(b9e,"A",{href:!0});var dut=s(yX);cgr=r(dut,"TFDebertaForSequenceClassification"),dut.forEach(t),fgr=r(b9e," (DeBERTa model)"),b9e.forEach(t),mgr=i(Q),BT=n(Q,"LI",{});var F9e=s(BT);l1e=n(F9e,"STRONG",{});var cut=s(l1e);ggr=r(cut,"deberta-v2"),cut.forEach(t),hgr=r(F9e," \u2014 "),LX=n(F9e,"A",{href:!0});var fut=s(LX);pgr=r(fut,"TFDebertaV2ForSequenceClassification"),fut.forEach(t),_gr=r(F9e," (DeBERTa-v2 model)"),F9e.forEach(t),ugr=i(Q),PT=n(Q,"LI",{});var v9e=s(PT);i1e=n(v9e,"STRONG",{});var mut=s(i1e);bgr=r(mut,"distilbert"),mut.forEach(t),Fgr=r(v9e," \u2014 "),xX=n(v9e,"A",{href:!0});var gut=s(xX);vgr=r(gut,"TFDistilBertForSequenceClassification"),gut.forEach(t),Tgr=r(v9e," (DistilBERT model)"),v9e.forEach(t),Mgr=i(Q),$T=n(Q,"LI",{});var T9e=s($T);d1e=n(T9e,"STRONG",{});var hut=s(d1e);Egr=r(hut,"electra"),hut.forEach(t),Cgr=r(T9e," \u2014 "),kX=n(T9e,"A",{href:!0});var put=s(kX);wgr=r(put,"TFElectraForSequenceClassification"),put.forEach(t),Agr=r(T9e," (ELECTRA model)"),T9e.forEach(t),ygr=i(Q),IT=n(Q,"LI",{});var M9e=s(IT);c1e=n(M9e,"STRONG",{});var _ut=s(c1e);Lgr=r(_ut,"flaubert"),_ut.forEach(t),xgr=r(M9e," \u2014 "),SX=n(M9e,"A",{href:!0});var uut=s(SX);kgr=r(uut,"TFFlaubertForSequenceClassification"),uut.forEach(t),Sgr=r(M9e," (FlauBERT model)"),M9e.forEach(t),Rgr=i(Q),qT=n(Q,"LI",{});var E9e=s(qT);f1e=n(E9e,"STRONG",{});var but=s(f1e);Bgr=r(but,"funnel"),but.forEach(t),Pgr=r(E9e," \u2014 "),RX=n(E9e,"A",{href:!0});var Fut=s(RX);$gr=r(Fut,"TFFunnelForSequenceClassification"),Fut.forEach(t),Igr=r(E9e," (Funnel Transformer model)"),E9e.forEach(t),qgr=i(Q),NT=n(Q,"LI",{});var C9e=s(NT);m1e=n(C9e,"STRONG",{});var vut=s(m1e);Ngr=r(vut,"gpt2"),vut.forEach(t),jgr=r(C9e," \u2014 "),BX=n(C9e,"A",{href:!0});var Tut=s(BX);Dgr=r(Tut,"TFGPT2ForSequenceClassification"),Tut.forEach(t),Ggr=r(C9e," (OpenAI GPT-2 model)"),C9e.forEach(t),Ogr=i(Q),jT=n(Q,"LI",{});var w9e=s(jT);g1e=n(w9e,"STRONG",{});var Mut=s(g1e);Vgr=r(Mut,"gptj"),Mut.forEach(t),Xgr=r(w9e," \u2014 "),PX=n(w9e,"A",{href:!0});var Eut=s(PX);zgr=r(Eut,"TFGPTJForSequenceClassification"),Eut.forEach(t),Qgr=r(w9e," (GPT-J model)"),w9e.forEach(t),Wgr=i(Q),DT=n(Q,"LI",{});var A9e=s(DT);h1e=n(A9e,"STRONG",{});var Cut=s(h1e);Hgr=r(Cut,"layoutlm"),Cut.forEach(t),Ugr=r(A9e," \u2014 "),$X=n(A9e,"A",{href:!0});var wut=s($X);Jgr=r(wut,"TFLayoutLMForSequenceClassification"),wut.forEach(t),Ygr=r(A9e," (LayoutLM model)"),A9e.forEach(t),Kgr=i(Q),GT=n(Q,"LI",{});var y9e=s(GT);p1e=n(y9e,"STRONG",{});var Aut=s(p1e);Zgr=r(Aut,"longformer"),Aut.forEach(t),ehr=r(y9e," \u2014 "),IX=n(y9e,"A",{href:!0});var yut=s(IX);ohr=r(yut,"TFLongformerForSequenceClassification"),yut.forEach(t),rhr=r(y9e," (Longformer model)"),y9e.forEach(t),thr=i(Q),OT=n(Q,"LI",{});var L9e=s(OT);_1e=n(L9e,"STRONG",{});var Lut=s(_1e);ahr=r(Lut,"mobilebert"),Lut.forEach(t),nhr=r(L9e," \u2014 "),qX=n(L9e,"A",{href:!0});var xut=s(qX);shr=r(xut,"TFMobileBertForSequenceClassification"),xut.forEach(t),lhr=r(L9e," (MobileBERT model)"),L9e.forEach(t),ihr=i(Q),VT=n(Q,"LI",{});var x9e=s(VT);u1e=n(x9e,"STRONG",{});var kut=s(u1e);dhr=r(kut,"mpnet"),kut.forEach(t),chr=r(x9e," \u2014 "),NX=n(x9e,"A",{href:!0});var Sut=s(NX);fhr=r(Sut,"TFMPNetForSequenceClassification"),Sut.forEach(t),mhr=r(x9e," (MPNet model)"),x9e.forEach(t),ghr=i(Q),XT=n(Q,"LI",{});var k9e=s(XT);b1e=n(k9e,"STRONG",{});var Rut=s(b1e);hhr=r(Rut,"openai-gpt"),Rut.forEach(t),phr=r(k9e," \u2014 "),jX=n(k9e,"A",{href:!0});var But=s(jX);_hr=r(But,"TFOpenAIGPTForSequenceClassification"),But.forEach(t),uhr=r(k9e," (OpenAI GPT model)"),k9e.forEach(t),bhr=i(Q),zT=n(Q,"LI",{});var S9e=s(zT);F1e=n(S9e,"STRONG",{});var Put=s(F1e);Fhr=r(Put,"rembert"),Put.forEach(t),vhr=r(S9e," \u2014 "),DX=n(S9e,"A",{href:!0});var $ut=s(DX);Thr=r($ut,"TFRemBertForSequenceClassification"),$ut.forEach(t),Mhr=r(S9e," (RemBERT model)"),S9e.forEach(t),Ehr=i(Q),QT=n(Q,"LI",{});var R9e=s(QT);v1e=n(R9e,"STRONG",{});var Iut=s(v1e);Chr=r(Iut,"roberta"),Iut.forEach(t),whr=r(R9e," \u2014 "),GX=n(R9e,"A",{href:!0});var qut=s(GX);Ahr=r(qut,"TFRobertaForSequenceClassification"),qut.forEach(t),yhr=r(R9e," (RoBERTa model)"),R9e.forEach(t),Lhr=i(Q),WT=n(Q,"LI",{});var B9e=s(WT);T1e=n(B9e,"STRONG",{});var Nut=s(T1e);xhr=r(Nut,"roformer"),Nut.forEach(t),khr=r(B9e," \u2014 "),OX=n(B9e,"A",{href:!0});var jut=s(OX);Shr=r(jut,"TFRoFormerForSequenceClassification"),jut.forEach(t),Rhr=r(B9e," (RoFormer model)"),B9e.forEach(t),Bhr=i(Q),HT=n(Q,"LI",{});var P9e=s(HT);M1e=n(P9e,"STRONG",{});var Dut=s(M1e);Phr=r(Dut,"tapas"),Dut.forEach(t),$hr=r(P9e," \u2014 "),VX=n(P9e,"A",{href:!0});var Gut=s(VX);Ihr=r(Gut,"TFTapasForSequenceClassification"),Gut.forEach(t),qhr=r(P9e," (TAPAS model)"),P9e.forEach(t),Nhr=i(Q),UT=n(Q,"LI",{});var $9e=s(UT);E1e=n($9e,"STRONG",{});var Out=s(E1e);jhr=r(Out,"transfo-xl"),Out.forEach(t),Dhr=r($9e," \u2014 "),XX=n($9e,"A",{href:!0});var Vut=s(XX);Ghr=r(Vut,"TFTransfoXLForSequenceClassification"),Vut.forEach(t),Ohr=r($9e," (Transformer-XL model)"),$9e.forEach(t),Vhr=i(Q),JT=n(Q,"LI",{});var I9e=s(JT);C1e=n(I9e,"STRONG",{});var Xut=s(C1e);Xhr=r(Xut,"xlm"),Xut.forEach(t),zhr=r(I9e," \u2014 "),zX=n(I9e,"A",{href:!0});var zut=s(zX);Qhr=r(zut,"TFXLMForSequenceClassification"),zut.forEach(t),Whr=r(I9e," (XLM model)"),I9e.forEach(t),Hhr=i(Q),YT=n(Q,"LI",{});var q9e=s(YT);w1e=n(q9e,"STRONG",{});var Qut=s(w1e);Uhr=r(Qut,"xlm-roberta"),Qut.forEach(t),Jhr=r(q9e," \u2014 "),QX=n(q9e,"A",{href:!0});var Wut=s(QX);Yhr=r(Wut,"TFXLMRobertaForSequenceClassification"),Wut.forEach(t),Khr=r(q9e," (XLM-RoBERTa model)"),q9e.forEach(t),Zhr=i(Q),KT=n(Q,"LI",{});var N9e=s(KT);A1e=n(N9e,"STRONG",{});var Hut=s(A1e);epr=r(Hut,"xlnet"),Hut.forEach(t),opr=r(N9e," \u2014 "),WX=n(N9e,"A",{href:!0});var Uut=s(WX);rpr=r(Uut,"TFXLNetForSequenceClassification"),Uut.forEach(t),tpr=r(N9e," (XLNet model)"),N9e.forEach(t),Q.forEach(t),apr=i(Ta),y1e=n(Ta,"P",{});var Jut=s(y1e);npr=r(Jut,"Examples:"),Jut.forEach(t),spr=i(Ta),m(Xy.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),tBe=i(c),$c=n(c,"H2",{class:!0});var h$e=s($c);ZT=n(h$e,"A",{id:!0,class:!0,href:!0});var Yut=s(ZT);L1e=n(Yut,"SPAN",{});var Kut=s(L1e);m(zy.$$.fragment,Kut),Kut.forEach(t),Yut.forEach(t),lpr=i(h$e),x1e=n(h$e,"SPAN",{});var Zut=s(x1e);ipr=r(Zut,"TFAutoModelForMultipleChoice"),Zut.forEach(t),h$e.forEach(t),aBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(Qy.$$.fragment,ei),dpr=i(ei),Ic=n(ei,"P",{});var aJ=s(Ic);cpr=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HX=n(aJ,"A",{href:!0});var e1t=s(HX);fpr=r(e1t,"from_pretrained()"),e1t.forEach(t),mpr=r(aJ," class method or the "),UX=n(aJ,"A",{href:!0});var o1t=s(UX);gpr=r(o1t,"from_config()"),o1t.forEach(t),hpr=r(aJ,` class
method.`),aJ.forEach(t),ppr=i(ei),Wy=n(ei,"P",{});var p$e=s(Wy);_pr=r(p$e,"This class cannot be instantiated directly using "),k1e=n(p$e,"CODE",{});var r1t=s(k1e);upr=r(r1t,"__init__()"),r1t.forEach(t),bpr=r(p$e," (throws an error)."),p$e.forEach(t),Fpr=i(ei),vt=n(ei,"DIV",{class:!0});var oi=s(vt);m(Hy.$$.fragment,oi),vpr=i(oi),S1e=n(oi,"P",{});var t1t=s(S1e);Tpr=r(t1t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),t1t.forEach(t),Mpr=i(oi),qc=n(oi,"P",{});var nJ=s(qc);Epr=r(nJ,`Note:
Loading a model from its configuration file does `),R1e=n(nJ,"STRONG",{});var a1t=s(R1e);Cpr=r(a1t,"not"),a1t.forEach(t),wpr=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JX=n(nJ,"A",{href:!0});var n1t=s(JX);Apr=r(n1t,"from_pretrained()"),n1t.forEach(t),ypr=r(nJ," to load the model weights."),nJ.forEach(t),Lpr=i(oi),B1e=n(oi,"P",{});var s1t=s(B1e);xpr=r(s1t,"Examples:"),s1t.forEach(t),kpr=i(oi),m(Uy.$$.fragment,oi),oi.forEach(t),Spr=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(Jy.$$.fragment,Ma),Rpr=i(Ma),P1e=n(Ma,"P",{});var l1t=s(P1e);Bpr=r(l1t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),l1t.forEach(t),Ppr=i(Ma),En=n(Ma,"P",{});var YC=s(En);$pr=r(YC,"The model class to instantiate is selected based on the "),$1e=n(YC,"CODE",{});var i1t=s($1e);Ipr=r(i1t,"model_type"),i1t.forEach(t),qpr=r(YC,` property of the config object (either
passed as an argument or loaded from `),I1e=n(YC,"CODE",{});var d1t=s(I1e);Npr=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),jpr=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(YC,"CODE",{});var c1t=s(q1e);Dpr=r(c1t,"pretrained_model_name_or_path"),c1t.forEach(t),Gpr=r(YC,":"),YC.forEach(t),Opr=i(Ma),ae=n(Ma,"UL",{});var le=s(ae);eM=n(le,"LI",{});var j9e=s(eM);N1e=n(j9e,"STRONG",{});var f1t=s(N1e);Vpr=r(f1t,"albert"),f1t.forEach(t),Xpr=r(j9e," \u2014 "),YX=n(j9e,"A",{href:!0});var m1t=s(YX);zpr=r(m1t,"TFAlbertForMultipleChoice"),m1t.forEach(t),Qpr=r(j9e," (ALBERT model)"),j9e.forEach(t),Wpr=i(le),oM=n(le,"LI",{});var D9e=s(oM);j1e=n(D9e,"STRONG",{});var g1t=s(j1e);Hpr=r(g1t,"bert"),g1t.forEach(t),Upr=r(D9e," \u2014 "),KX=n(D9e,"A",{href:!0});var h1t=s(KX);Jpr=r(h1t,"TFBertForMultipleChoice"),h1t.forEach(t),Ypr=r(D9e," (BERT model)"),D9e.forEach(t),Kpr=i(le),rM=n(le,"LI",{});var G9e=s(rM);D1e=n(G9e,"STRONG",{});var p1t=s(D1e);Zpr=r(p1t,"camembert"),p1t.forEach(t),e_r=r(G9e," \u2014 "),ZX=n(G9e,"A",{href:!0});var _1t=s(ZX);o_r=r(_1t,"TFCamembertForMultipleChoice"),_1t.forEach(t),r_r=r(G9e," (CamemBERT model)"),G9e.forEach(t),t_r=i(le),tM=n(le,"LI",{});var O9e=s(tM);G1e=n(O9e,"STRONG",{});var u1t=s(G1e);a_r=r(u1t,"convbert"),u1t.forEach(t),n_r=r(O9e," \u2014 "),ez=n(O9e,"A",{href:!0});var b1t=s(ez);s_r=r(b1t,"TFConvBertForMultipleChoice"),b1t.forEach(t),l_r=r(O9e," (ConvBERT model)"),O9e.forEach(t),i_r=i(le),aM=n(le,"LI",{});var V9e=s(aM);O1e=n(V9e,"STRONG",{});var F1t=s(O1e);d_r=r(F1t,"distilbert"),F1t.forEach(t),c_r=r(V9e," \u2014 "),oz=n(V9e,"A",{href:!0});var v1t=s(oz);f_r=r(v1t,"TFDistilBertForMultipleChoice"),v1t.forEach(t),m_r=r(V9e," (DistilBERT model)"),V9e.forEach(t),g_r=i(le),nM=n(le,"LI",{});var X9e=s(nM);V1e=n(X9e,"STRONG",{});var T1t=s(V1e);h_r=r(T1t,"electra"),T1t.forEach(t),p_r=r(X9e," \u2014 "),rz=n(X9e,"A",{href:!0});var M1t=s(rz);__r=r(M1t,"TFElectraForMultipleChoice"),M1t.forEach(t),u_r=r(X9e," (ELECTRA model)"),X9e.forEach(t),b_r=i(le),sM=n(le,"LI",{});var z9e=s(sM);X1e=n(z9e,"STRONG",{});var E1t=s(X1e);F_r=r(E1t,"flaubert"),E1t.forEach(t),v_r=r(z9e," \u2014 "),tz=n(z9e,"A",{href:!0});var C1t=s(tz);T_r=r(C1t,"TFFlaubertForMultipleChoice"),C1t.forEach(t),M_r=r(z9e," (FlauBERT model)"),z9e.forEach(t),E_r=i(le),lM=n(le,"LI",{});var Q9e=s(lM);z1e=n(Q9e,"STRONG",{});var w1t=s(z1e);C_r=r(w1t,"funnel"),w1t.forEach(t),w_r=r(Q9e," \u2014 "),az=n(Q9e,"A",{href:!0});var A1t=s(az);A_r=r(A1t,"TFFunnelForMultipleChoice"),A1t.forEach(t),y_r=r(Q9e," (Funnel Transformer model)"),Q9e.forEach(t),L_r=i(le),iM=n(le,"LI",{});var W9e=s(iM);Q1e=n(W9e,"STRONG",{});var y1t=s(Q1e);x_r=r(y1t,"longformer"),y1t.forEach(t),k_r=r(W9e," \u2014 "),nz=n(W9e,"A",{href:!0});var L1t=s(nz);S_r=r(L1t,"TFLongformerForMultipleChoice"),L1t.forEach(t),R_r=r(W9e," (Longformer model)"),W9e.forEach(t),B_r=i(le),dM=n(le,"LI",{});var H9e=s(dM);W1e=n(H9e,"STRONG",{});var x1t=s(W1e);P_r=r(x1t,"mobilebert"),x1t.forEach(t),$_r=r(H9e," \u2014 "),sz=n(H9e,"A",{href:!0});var k1t=s(sz);I_r=r(k1t,"TFMobileBertForMultipleChoice"),k1t.forEach(t),q_r=r(H9e," (MobileBERT model)"),H9e.forEach(t),N_r=i(le),cM=n(le,"LI",{});var U9e=s(cM);H1e=n(U9e,"STRONG",{});var S1t=s(H1e);j_r=r(S1t,"mpnet"),S1t.forEach(t),D_r=r(U9e," \u2014 "),lz=n(U9e,"A",{href:!0});var R1t=s(lz);G_r=r(R1t,"TFMPNetForMultipleChoice"),R1t.forEach(t),O_r=r(U9e," (MPNet model)"),U9e.forEach(t),V_r=i(le),fM=n(le,"LI",{});var J9e=s(fM);U1e=n(J9e,"STRONG",{});var B1t=s(U1e);X_r=r(B1t,"rembert"),B1t.forEach(t),z_r=r(J9e," \u2014 "),iz=n(J9e,"A",{href:!0});var P1t=s(iz);Q_r=r(P1t,"TFRemBertForMultipleChoice"),P1t.forEach(t),W_r=r(J9e," (RemBERT model)"),J9e.forEach(t),H_r=i(le),mM=n(le,"LI",{});var Y9e=s(mM);J1e=n(Y9e,"STRONG",{});var $1t=s(J1e);U_r=r($1t,"roberta"),$1t.forEach(t),J_r=r(Y9e," \u2014 "),dz=n(Y9e,"A",{href:!0});var I1t=s(dz);Y_r=r(I1t,"TFRobertaForMultipleChoice"),I1t.forEach(t),K_r=r(Y9e," (RoBERTa model)"),Y9e.forEach(t),Z_r=i(le),gM=n(le,"LI",{});var K9e=s(gM);Y1e=n(K9e,"STRONG",{});var q1t=s(Y1e);eur=r(q1t,"roformer"),q1t.forEach(t),our=r(K9e," \u2014 "),cz=n(K9e,"A",{href:!0});var N1t=s(cz);rur=r(N1t,"TFRoFormerForMultipleChoice"),N1t.forEach(t),tur=r(K9e," (RoFormer model)"),K9e.forEach(t),aur=i(le),hM=n(le,"LI",{});var Z9e=s(hM);K1e=n(Z9e,"STRONG",{});var j1t=s(K1e);nur=r(j1t,"xlm"),j1t.forEach(t),sur=r(Z9e," \u2014 "),fz=n(Z9e,"A",{href:!0});var D1t=s(fz);lur=r(D1t,"TFXLMForMultipleChoice"),D1t.forEach(t),iur=r(Z9e," (XLM model)"),Z9e.forEach(t),dur=i(le),pM=n(le,"LI",{});var exe=s(pM);Z1e=n(exe,"STRONG",{});var G1t=s(Z1e);cur=r(G1t,"xlm-roberta"),G1t.forEach(t),fur=r(exe," \u2014 "),mz=n(exe,"A",{href:!0});var O1t=s(mz);mur=r(O1t,"TFXLMRobertaForMultipleChoice"),O1t.forEach(t),gur=r(exe," (XLM-RoBERTa model)"),exe.forEach(t),hur=i(le),_M=n(le,"LI",{});var oxe=s(_M);e5e=n(oxe,"STRONG",{});var V1t=s(e5e);pur=r(V1t,"xlnet"),V1t.forEach(t),_ur=r(oxe," \u2014 "),gz=n(oxe,"A",{href:!0});var X1t=s(gz);uur=r(X1t,"TFXLNetForMultipleChoice"),X1t.forEach(t),bur=r(oxe," (XLNet model)"),oxe.forEach(t),le.forEach(t),Fur=i(Ma),o5e=n(Ma,"P",{});var z1t=s(o5e);vur=r(z1t,"Examples:"),z1t.forEach(t),Tur=i(Ma),m(Yy.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),nBe=i(c),Nc=n(c,"H2",{class:!0});var _$e=s(Nc);uM=n(_$e,"A",{id:!0,class:!0,href:!0});var Q1t=s(uM);r5e=n(Q1t,"SPAN",{});var W1t=s(r5e);m(Ky.$$.fragment,W1t),W1t.forEach(t),Q1t.forEach(t),Mur=i(_$e),t5e=n(_$e,"SPAN",{});var H1t=s(t5e);Eur=r(H1t,"TFAutoModelForTableQuestionAnswering"),H1t.forEach(t),_$e.forEach(t),sBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(Zy.$$.fragment,ri),Cur=i(ri),jc=n(ri,"P",{});var sJ=s(jc);wur=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),hz=n(sJ,"A",{href:!0});var U1t=s(hz);Aur=r(U1t,"from_pretrained()"),U1t.forEach(t),yur=r(sJ," class method or the "),pz=n(sJ,"A",{href:!0});var J1t=s(pz);Lur=r(J1t,"from_config()"),J1t.forEach(t),xur=r(sJ,` class
method.`),sJ.forEach(t),kur=i(ri),eL=n(ri,"P",{});var u$e=s(eL);Sur=r(u$e,"This class cannot be instantiated directly using "),a5e=n(u$e,"CODE",{});var Y1t=s(a5e);Rur=r(Y1t,"__init__()"),Y1t.forEach(t),Bur=r(u$e," (throws an error)."),u$e.forEach(t),Pur=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(oL.$$.fragment,ti),$ur=i(ti),n5e=n(ti,"P",{});var K1t=s(n5e);Iur=r(K1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K1t.forEach(t),qur=i(ti),Dc=n(ti,"P",{});var lJ=s(Dc);Nur=r(lJ,`Note:
Loading a model from its configuration file does `),s5e=n(lJ,"STRONG",{});var Z1t=s(s5e);jur=r(Z1t,"not"),Z1t.forEach(t),Dur=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(lJ,"A",{href:!0});var e5t=s(_z);Gur=r(e5t,"from_pretrained()"),e5t.forEach(t),Our=r(lJ," to load the model weights."),lJ.forEach(t),Vur=i(ti),l5e=n(ti,"P",{});var o5t=s(l5e);Xur=r(o5t,"Examples:"),o5t.forEach(t),zur=i(ti),m(rL.$$.fragment,ti),ti.forEach(t),Qur=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(tL.$$.fragment,Ea),Wur=i(Ea),i5e=n(Ea,"P",{});var r5t=s(i5e);Hur=r(r5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),r5t.forEach(t),Uur=i(Ea),Cn=n(Ea,"P",{});var KC=s(Cn);Jur=r(KC,"The model class to instantiate is selected based on the "),d5e=n(KC,"CODE",{});var t5t=s(d5e);Yur=r(t5t,"model_type"),t5t.forEach(t),Kur=r(KC,` property of the config object (either
passed as an argument or loaded from `),c5e=n(KC,"CODE",{});var a5t=s(c5e);Zur=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),e1r=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f5e=n(KC,"CODE",{});var n5t=s(f5e);o1r=r(n5t,"pretrained_model_name_or_path"),n5t.forEach(t),r1r=r(KC,":"),KC.forEach(t),t1r=i(Ea),m5e=n(Ea,"UL",{});var s5t=s(m5e);bM=n(s5t,"LI",{});var rxe=s(bM);g5e=n(rxe,"STRONG",{});var l5t=s(g5e);a1r=r(l5t,"tapas"),l5t.forEach(t),n1r=r(rxe," \u2014 "),uz=n(rxe,"A",{href:!0});var i5t=s(uz);s1r=r(i5t,"TFTapasForQuestionAnswering"),i5t.forEach(t),l1r=r(rxe," (TAPAS model)"),rxe.forEach(t),s5t.forEach(t),i1r=i(Ea),h5e=n(Ea,"P",{});var d5t=s(h5e);d1r=r(d5t,"Examples:"),d5t.forEach(t),c1r=i(Ea),m(aL.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),lBe=i(c),Gc=n(c,"H2",{class:!0});var b$e=s(Gc);FM=n(b$e,"A",{id:!0,class:!0,href:!0});var c5t=s(FM);p5e=n(c5t,"SPAN",{});var f5t=s(p5e);m(nL.$$.fragment,f5t),f5t.forEach(t),c5t.forEach(t),f1r=i(b$e),_5e=n(b$e,"SPAN",{});var m5t=s(_5e);m1r=r(m5t,"TFAutoModelForTokenClassification"),m5t.forEach(t),b$e.forEach(t),iBe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(sL.$$.fragment,ai),g1r=i(ai),Oc=n(ai,"P",{});var iJ=s(Oc);h1r=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bz=n(iJ,"A",{href:!0});var g5t=s(bz);p1r=r(g5t,"from_pretrained()"),g5t.forEach(t),_1r=r(iJ," class method or the "),Fz=n(iJ,"A",{href:!0});var h5t=s(Fz);u1r=r(h5t,"from_config()"),h5t.forEach(t),b1r=r(iJ,` class
method.`),iJ.forEach(t),F1r=i(ai),lL=n(ai,"P",{});var F$e=s(lL);v1r=r(F$e,"This class cannot be instantiated directly using "),u5e=n(F$e,"CODE",{});var p5t=s(u5e);T1r=r(p5t,"__init__()"),p5t.forEach(t),M1r=r(F$e," (throws an error)."),F$e.forEach(t),E1r=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(iL.$$.fragment,ni),C1r=i(ni),b5e=n(ni,"P",{});var _5t=s(b5e);w1r=r(_5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_5t.forEach(t),A1r=i(ni),Vc=n(ni,"P",{});var dJ=s(Vc);y1r=r(dJ,`Note:
Loading a model from its configuration file does `),F5e=n(dJ,"STRONG",{});var u5t=s(F5e);L1r=r(u5t,"not"),u5t.forEach(t),x1r=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vz=n(dJ,"A",{href:!0});var b5t=s(vz);k1r=r(b5t,"from_pretrained()"),b5t.forEach(t),S1r=r(dJ," to load the model weights."),dJ.forEach(t),R1r=i(ni),v5e=n(ni,"P",{});var F5t=s(v5e);B1r=r(F5t,"Examples:"),F5t.forEach(t),P1r=i(ni),m(dL.$$.fragment,ni),ni.forEach(t),$1r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(cL.$$.fragment,Ca),I1r=i(Ca),T5e=n(Ca,"P",{});var v5t=s(T5e);q1r=r(v5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v5t.forEach(t),N1r=i(Ca),wn=n(Ca,"P",{});var ZC=s(wn);j1r=r(ZC,"The model class to instantiate is selected based on the "),M5e=n(ZC,"CODE",{});var T5t=s(M5e);D1r=r(T5t,"model_type"),T5t.forEach(t),G1r=r(ZC,` property of the config object (either
passed as an argument or loaded from `),E5e=n(ZC,"CODE",{});var M5t=s(E5e);O1r=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),V1r=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(ZC,"CODE",{});var E5t=s(C5e);X1r=r(E5t,"pretrained_model_name_or_path"),E5t.forEach(t),z1r=r(ZC,":"),ZC.forEach(t),Q1r=i(Ca),Y=n(Ca,"UL",{});var oe=s(Y);vM=n(oe,"LI",{});var txe=s(vM);w5e=n(txe,"STRONG",{});var C5t=s(w5e);W1r=r(C5t,"albert"),C5t.forEach(t),H1r=r(txe," \u2014 "),Tz=n(txe,"A",{href:!0});var w5t=s(Tz);U1r=r(w5t,"TFAlbertForTokenClassification"),w5t.forEach(t),J1r=r(txe," (ALBERT model)"),txe.forEach(t),Y1r=i(oe),TM=n(oe,"LI",{});var axe=s(TM);A5e=n(axe,"STRONG",{});var A5t=s(A5e);K1r=r(A5t,"bert"),A5t.forEach(t),Z1r=r(axe," \u2014 "),Mz=n(axe,"A",{href:!0});var y5t=s(Mz);e5r=r(y5t,"TFBertForTokenClassification"),y5t.forEach(t),o5r=r(axe," (BERT model)"),axe.forEach(t),r5r=i(oe),MM=n(oe,"LI",{});var nxe=s(MM);y5e=n(nxe,"STRONG",{});var L5t=s(y5e);t5r=r(L5t,"camembert"),L5t.forEach(t),a5r=r(nxe," \u2014 "),Ez=n(nxe,"A",{href:!0});var x5t=s(Ez);n5r=r(x5t,"TFCamembertForTokenClassification"),x5t.forEach(t),s5r=r(nxe," (CamemBERT model)"),nxe.forEach(t),l5r=i(oe),EM=n(oe,"LI",{});var sxe=s(EM);L5e=n(sxe,"STRONG",{});var k5t=s(L5e);i5r=r(k5t,"convbert"),k5t.forEach(t),d5r=r(sxe," \u2014 "),Cz=n(sxe,"A",{href:!0});var S5t=s(Cz);c5r=r(S5t,"TFConvBertForTokenClassification"),S5t.forEach(t),f5r=r(sxe," (ConvBERT model)"),sxe.forEach(t),m5r=i(oe),CM=n(oe,"LI",{});var lxe=s(CM);x5e=n(lxe,"STRONG",{});var R5t=s(x5e);g5r=r(R5t,"deberta"),R5t.forEach(t),h5r=r(lxe," \u2014 "),wz=n(lxe,"A",{href:!0});var B5t=s(wz);p5r=r(B5t,"TFDebertaForTokenClassification"),B5t.forEach(t),_5r=r(lxe," (DeBERTa model)"),lxe.forEach(t),u5r=i(oe),wM=n(oe,"LI",{});var ixe=s(wM);k5e=n(ixe,"STRONG",{});var P5t=s(k5e);b5r=r(P5t,"deberta-v2"),P5t.forEach(t),F5r=r(ixe," \u2014 "),Az=n(ixe,"A",{href:!0});var $5t=s(Az);v5r=r($5t,"TFDebertaV2ForTokenClassification"),$5t.forEach(t),T5r=r(ixe," (DeBERTa-v2 model)"),ixe.forEach(t),M5r=i(oe),AM=n(oe,"LI",{});var dxe=s(AM);S5e=n(dxe,"STRONG",{});var I5t=s(S5e);E5r=r(I5t,"distilbert"),I5t.forEach(t),C5r=r(dxe," \u2014 "),yz=n(dxe,"A",{href:!0});var q5t=s(yz);w5r=r(q5t,"TFDistilBertForTokenClassification"),q5t.forEach(t),A5r=r(dxe," (DistilBERT model)"),dxe.forEach(t),y5r=i(oe),yM=n(oe,"LI",{});var cxe=s(yM);R5e=n(cxe,"STRONG",{});var N5t=s(R5e);L5r=r(N5t,"electra"),N5t.forEach(t),x5r=r(cxe," \u2014 "),Lz=n(cxe,"A",{href:!0});var j5t=s(Lz);k5r=r(j5t,"TFElectraForTokenClassification"),j5t.forEach(t),S5r=r(cxe," (ELECTRA model)"),cxe.forEach(t),R5r=i(oe),LM=n(oe,"LI",{});var fxe=s(LM);B5e=n(fxe,"STRONG",{});var D5t=s(B5e);B5r=r(D5t,"flaubert"),D5t.forEach(t),P5r=r(fxe," \u2014 "),xz=n(fxe,"A",{href:!0});var G5t=s(xz);$5r=r(G5t,"TFFlaubertForTokenClassification"),G5t.forEach(t),I5r=r(fxe," (FlauBERT model)"),fxe.forEach(t),q5r=i(oe),xM=n(oe,"LI",{});var mxe=s(xM);P5e=n(mxe,"STRONG",{});var O5t=s(P5e);N5r=r(O5t,"funnel"),O5t.forEach(t),j5r=r(mxe," \u2014 "),kz=n(mxe,"A",{href:!0});var V5t=s(kz);D5r=r(V5t,"TFFunnelForTokenClassification"),V5t.forEach(t),G5r=r(mxe," (Funnel Transformer model)"),mxe.forEach(t),O5r=i(oe),kM=n(oe,"LI",{});var gxe=s(kM);$5e=n(gxe,"STRONG",{});var X5t=s($5e);V5r=r(X5t,"layoutlm"),X5t.forEach(t),X5r=r(gxe," \u2014 "),Sz=n(gxe,"A",{href:!0});var z5t=s(Sz);z5r=r(z5t,"TFLayoutLMForTokenClassification"),z5t.forEach(t),Q5r=r(gxe," (LayoutLM model)"),gxe.forEach(t),W5r=i(oe),SM=n(oe,"LI",{});var hxe=s(SM);I5e=n(hxe,"STRONG",{});var Q5t=s(I5e);H5r=r(Q5t,"longformer"),Q5t.forEach(t),U5r=r(hxe," \u2014 "),Rz=n(hxe,"A",{href:!0});var W5t=s(Rz);J5r=r(W5t,"TFLongformerForTokenClassification"),W5t.forEach(t),Y5r=r(hxe," (Longformer model)"),hxe.forEach(t),K5r=i(oe),RM=n(oe,"LI",{});var pxe=s(RM);q5e=n(pxe,"STRONG",{});var H5t=s(q5e);Z5r=r(H5t,"mobilebert"),H5t.forEach(t),ebr=r(pxe," \u2014 "),Bz=n(pxe,"A",{href:!0});var U5t=s(Bz);obr=r(U5t,"TFMobileBertForTokenClassification"),U5t.forEach(t),rbr=r(pxe," (MobileBERT model)"),pxe.forEach(t),tbr=i(oe),BM=n(oe,"LI",{});var _xe=s(BM);N5e=n(_xe,"STRONG",{});var J5t=s(N5e);abr=r(J5t,"mpnet"),J5t.forEach(t),nbr=r(_xe," \u2014 "),Pz=n(_xe,"A",{href:!0});var Y5t=s(Pz);sbr=r(Y5t,"TFMPNetForTokenClassification"),Y5t.forEach(t),lbr=r(_xe," (MPNet model)"),_xe.forEach(t),ibr=i(oe),PM=n(oe,"LI",{});var uxe=s(PM);j5e=n(uxe,"STRONG",{});var K5t=s(j5e);dbr=r(K5t,"rembert"),K5t.forEach(t),cbr=r(uxe," \u2014 "),$z=n(uxe,"A",{href:!0});var Z5t=s($z);fbr=r(Z5t,"TFRemBertForTokenClassification"),Z5t.forEach(t),mbr=r(uxe," (RemBERT model)"),uxe.forEach(t),gbr=i(oe),$M=n(oe,"LI",{});var bxe=s($M);D5e=n(bxe,"STRONG",{});var ebt=s(D5e);hbr=r(ebt,"roberta"),ebt.forEach(t),pbr=r(bxe," \u2014 "),Iz=n(bxe,"A",{href:!0});var obt=s(Iz);_br=r(obt,"TFRobertaForTokenClassification"),obt.forEach(t),ubr=r(bxe," (RoBERTa model)"),bxe.forEach(t),bbr=i(oe),IM=n(oe,"LI",{});var Fxe=s(IM);G5e=n(Fxe,"STRONG",{});var rbt=s(G5e);Fbr=r(rbt,"roformer"),rbt.forEach(t),vbr=r(Fxe," \u2014 "),qz=n(Fxe,"A",{href:!0});var tbt=s(qz);Tbr=r(tbt,"TFRoFormerForTokenClassification"),tbt.forEach(t),Mbr=r(Fxe," (RoFormer model)"),Fxe.forEach(t),Ebr=i(oe),qM=n(oe,"LI",{});var vxe=s(qM);O5e=n(vxe,"STRONG",{});var abt=s(O5e);Cbr=r(abt,"xlm"),abt.forEach(t),wbr=r(vxe," \u2014 "),Nz=n(vxe,"A",{href:!0});var nbt=s(Nz);Abr=r(nbt,"TFXLMForTokenClassification"),nbt.forEach(t),ybr=r(vxe," (XLM model)"),vxe.forEach(t),Lbr=i(oe),NM=n(oe,"LI",{});var Txe=s(NM);V5e=n(Txe,"STRONG",{});var sbt=s(V5e);xbr=r(sbt,"xlm-roberta"),sbt.forEach(t),kbr=r(Txe," \u2014 "),jz=n(Txe,"A",{href:!0});var lbt=s(jz);Sbr=r(lbt,"TFXLMRobertaForTokenClassification"),lbt.forEach(t),Rbr=r(Txe," (XLM-RoBERTa model)"),Txe.forEach(t),Bbr=i(oe),jM=n(oe,"LI",{});var Mxe=s(jM);X5e=n(Mxe,"STRONG",{});var ibt=s(X5e);Pbr=r(ibt,"xlnet"),ibt.forEach(t),$br=r(Mxe," \u2014 "),Dz=n(Mxe,"A",{href:!0});var dbt=s(Dz);Ibr=r(dbt,"TFXLNetForTokenClassification"),dbt.forEach(t),qbr=r(Mxe," (XLNet model)"),Mxe.forEach(t),oe.forEach(t),Nbr=i(Ca),z5e=n(Ca,"P",{});var cbt=s(z5e);jbr=r(cbt,"Examples:"),cbt.forEach(t),Dbr=i(Ca),m(fL.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),dBe=i(c),Xc=n(c,"H2",{class:!0});var v$e=s(Xc);DM=n(v$e,"A",{id:!0,class:!0,href:!0});var fbt=s(DM);Q5e=n(fbt,"SPAN",{});var mbt=s(Q5e);m(mL.$$.fragment,mbt),mbt.forEach(t),fbt.forEach(t),Gbr=i(v$e),W5e=n(v$e,"SPAN",{});var gbt=s(W5e);Obr=r(gbt,"TFAutoModelForQuestionAnswering"),gbt.forEach(t),v$e.forEach(t),cBe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(gL.$$.fragment,si),Vbr=i(si),zc=n(si,"P",{});var cJ=s(zc);Xbr=r(cJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Gz=n(cJ,"A",{href:!0});var hbt=s(Gz);zbr=r(hbt,"from_pretrained()"),hbt.forEach(t),Qbr=r(cJ," class method or the "),Oz=n(cJ,"A",{href:!0});var pbt=s(Oz);Wbr=r(pbt,"from_config()"),pbt.forEach(t),Hbr=r(cJ,` class
method.`),cJ.forEach(t),Ubr=i(si),hL=n(si,"P",{});var T$e=s(hL);Jbr=r(T$e,"This class cannot be instantiated directly using "),H5e=n(T$e,"CODE",{});var _bt=s(H5e);Ybr=r(_bt,"__init__()"),_bt.forEach(t),Kbr=r(T$e," (throws an error)."),T$e.forEach(t),Zbr=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(pL.$$.fragment,li),e2r=i(li),U5e=n(li,"P",{});var ubt=s(U5e);o2r=r(ubt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ubt.forEach(t),r2r=i(li),Qc=n(li,"P",{});var fJ=s(Qc);t2r=r(fJ,`Note:
Loading a model from its configuration file does `),J5e=n(fJ,"STRONG",{});var bbt=s(J5e);a2r=r(bbt,"not"),bbt.forEach(t),n2r=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(fJ,"A",{href:!0});var Fbt=s(Vz);s2r=r(Fbt,"from_pretrained()"),Fbt.forEach(t),l2r=r(fJ," to load the model weights."),fJ.forEach(t),i2r=i(li),Y5e=n(li,"P",{});var vbt=s(Y5e);d2r=r(vbt,"Examples:"),vbt.forEach(t),c2r=i(li),m(_L.$$.fragment,li),li.forEach(t),f2r=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(uL.$$.fragment,wa),m2r=i(wa),K5e=n(wa,"P",{});var Tbt=s(K5e);g2r=r(Tbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Tbt.forEach(t),h2r=i(wa),An=n(wa,"P",{});var e3=s(An);p2r=r(e3,"The model class to instantiate is selected based on the "),Z5e=n(e3,"CODE",{});var Mbt=s(Z5e);_2r=r(Mbt,"model_type"),Mbt.forEach(t),u2r=r(e3,` property of the config object (either
passed as an argument or loaded from `),ebe=n(e3,"CODE",{});var Ebt=s(ebe);b2r=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),F2r=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(e3,"CODE",{});var Cbt=s(obe);v2r=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),T2r=r(e3,":"),e3.forEach(t),M2r=i(wa),K=n(wa,"UL",{});var re=s(K);GM=n(re,"LI",{});var Exe=s(GM);rbe=n(Exe,"STRONG",{});var wbt=s(rbe);E2r=r(wbt,"albert"),wbt.forEach(t),C2r=r(Exe," \u2014 "),Xz=n(Exe,"A",{href:!0});var Abt=s(Xz);w2r=r(Abt,"TFAlbertForQuestionAnswering"),Abt.forEach(t),A2r=r(Exe," (ALBERT model)"),Exe.forEach(t),y2r=i(re),OM=n(re,"LI",{});var Cxe=s(OM);tbe=n(Cxe,"STRONG",{});var ybt=s(tbe);L2r=r(ybt,"bert"),ybt.forEach(t),x2r=r(Cxe," \u2014 "),zz=n(Cxe,"A",{href:!0});var Lbt=s(zz);k2r=r(Lbt,"TFBertForQuestionAnswering"),Lbt.forEach(t),S2r=r(Cxe," (BERT model)"),Cxe.forEach(t),R2r=i(re),VM=n(re,"LI",{});var wxe=s(VM);abe=n(wxe,"STRONG",{});var xbt=s(abe);B2r=r(xbt,"camembert"),xbt.forEach(t),P2r=r(wxe," \u2014 "),Qz=n(wxe,"A",{href:!0});var kbt=s(Qz);$2r=r(kbt,"TFCamembertForQuestionAnswering"),kbt.forEach(t),I2r=r(wxe," (CamemBERT model)"),wxe.forEach(t),q2r=i(re),XM=n(re,"LI",{});var Axe=s(XM);nbe=n(Axe,"STRONG",{});var Sbt=s(nbe);N2r=r(Sbt,"convbert"),Sbt.forEach(t),j2r=r(Axe," \u2014 "),Wz=n(Axe,"A",{href:!0});var Rbt=s(Wz);D2r=r(Rbt,"TFConvBertForQuestionAnswering"),Rbt.forEach(t),G2r=r(Axe," (ConvBERT model)"),Axe.forEach(t),O2r=i(re),zM=n(re,"LI",{});var yxe=s(zM);sbe=n(yxe,"STRONG",{});var Bbt=s(sbe);V2r=r(Bbt,"deberta"),Bbt.forEach(t),X2r=r(yxe," \u2014 "),Hz=n(yxe,"A",{href:!0});var Pbt=s(Hz);z2r=r(Pbt,"TFDebertaForQuestionAnswering"),Pbt.forEach(t),Q2r=r(yxe," (DeBERTa model)"),yxe.forEach(t),W2r=i(re),QM=n(re,"LI",{});var Lxe=s(QM);lbe=n(Lxe,"STRONG",{});var $bt=s(lbe);H2r=r($bt,"deberta-v2"),$bt.forEach(t),U2r=r(Lxe," \u2014 "),Uz=n(Lxe,"A",{href:!0});var Ibt=s(Uz);J2r=r(Ibt,"TFDebertaV2ForQuestionAnswering"),Ibt.forEach(t),Y2r=r(Lxe," (DeBERTa-v2 model)"),Lxe.forEach(t),K2r=i(re),WM=n(re,"LI",{});var xxe=s(WM);ibe=n(xxe,"STRONG",{});var qbt=s(ibe);Z2r=r(qbt,"distilbert"),qbt.forEach(t),eFr=r(xxe," \u2014 "),Jz=n(xxe,"A",{href:!0});var Nbt=s(Jz);oFr=r(Nbt,"TFDistilBertForQuestionAnswering"),Nbt.forEach(t),rFr=r(xxe," (DistilBERT model)"),xxe.forEach(t),tFr=i(re),HM=n(re,"LI",{});var kxe=s(HM);dbe=n(kxe,"STRONG",{});var jbt=s(dbe);aFr=r(jbt,"electra"),jbt.forEach(t),nFr=r(kxe," \u2014 "),Yz=n(kxe,"A",{href:!0});var Dbt=s(Yz);sFr=r(Dbt,"TFElectraForQuestionAnswering"),Dbt.forEach(t),lFr=r(kxe," (ELECTRA model)"),kxe.forEach(t),iFr=i(re),UM=n(re,"LI",{});var Sxe=s(UM);cbe=n(Sxe,"STRONG",{});var Gbt=s(cbe);dFr=r(Gbt,"flaubert"),Gbt.forEach(t),cFr=r(Sxe," \u2014 "),Kz=n(Sxe,"A",{href:!0});var Obt=s(Kz);fFr=r(Obt,"TFFlaubertForQuestionAnsweringSimple"),Obt.forEach(t),mFr=r(Sxe," (FlauBERT model)"),Sxe.forEach(t),gFr=i(re),JM=n(re,"LI",{});var Rxe=s(JM);fbe=n(Rxe,"STRONG",{});var Vbt=s(fbe);hFr=r(Vbt,"funnel"),Vbt.forEach(t),pFr=r(Rxe," \u2014 "),Zz=n(Rxe,"A",{href:!0});var Xbt=s(Zz);_Fr=r(Xbt,"TFFunnelForQuestionAnswering"),Xbt.forEach(t),uFr=r(Rxe," (Funnel Transformer model)"),Rxe.forEach(t),bFr=i(re),YM=n(re,"LI",{});var Bxe=s(YM);mbe=n(Bxe,"STRONG",{});var zbt=s(mbe);FFr=r(zbt,"gptj"),zbt.forEach(t),vFr=r(Bxe," \u2014 "),eQ=n(Bxe,"A",{href:!0});var Qbt=s(eQ);TFr=r(Qbt,"TFGPTJForQuestionAnswering"),Qbt.forEach(t),MFr=r(Bxe," (GPT-J model)"),Bxe.forEach(t),EFr=i(re),KM=n(re,"LI",{});var Pxe=s(KM);gbe=n(Pxe,"STRONG",{});var Wbt=s(gbe);CFr=r(Wbt,"longformer"),Wbt.forEach(t),wFr=r(Pxe," \u2014 "),oQ=n(Pxe,"A",{href:!0});var Hbt=s(oQ);AFr=r(Hbt,"TFLongformerForQuestionAnswering"),Hbt.forEach(t),yFr=r(Pxe," (Longformer model)"),Pxe.forEach(t),LFr=i(re),ZM=n(re,"LI",{});var $xe=s(ZM);hbe=n($xe,"STRONG",{});var Ubt=s(hbe);xFr=r(Ubt,"mobilebert"),Ubt.forEach(t),kFr=r($xe," \u2014 "),rQ=n($xe,"A",{href:!0});var Jbt=s(rQ);SFr=r(Jbt,"TFMobileBertForQuestionAnswering"),Jbt.forEach(t),RFr=r($xe," (MobileBERT model)"),$xe.forEach(t),BFr=i(re),e4=n(re,"LI",{});var Ixe=s(e4);pbe=n(Ixe,"STRONG",{});var Ybt=s(pbe);PFr=r(Ybt,"mpnet"),Ybt.forEach(t),$Fr=r(Ixe," \u2014 "),tQ=n(Ixe,"A",{href:!0});var Kbt=s(tQ);IFr=r(Kbt,"TFMPNetForQuestionAnswering"),Kbt.forEach(t),qFr=r(Ixe," (MPNet model)"),Ixe.forEach(t),NFr=i(re),o4=n(re,"LI",{});var qxe=s(o4);_be=n(qxe,"STRONG",{});var Zbt=s(_be);jFr=r(Zbt,"rembert"),Zbt.forEach(t),DFr=r(qxe," \u2014 "),aQ=n(qxe,"A",{href:!0});var e2t=s(aQ);GFr=r(e2t,"TFRemBertForQuestionAnswering"),e2t.forEach(t),OFr=r(qxe," (RemBERT model)"),qxe.forEach(t),VFr=i(re),r4=n(re,"LI",{});var Nxe=s(r4);ube=n(Nxe,"STRONG",{});var o2t=s(ube);XFr=r(o2t,"roberta"),o2t.forEach(t),zFr=r(Nxe," \u2014 "),nQ=n(Nxe,"A",{href:!0});var r2t=s(nQ);QFr=r(r2t,"TFRobertaForQuestionAnswering"),r2t.forEach(t),WFr=r(Nxe," (RoBERTa model)"),Nxe.forEach(t),HFr=i(re),t4=n(re,"LI",{});var jxe=s(t4);bbe=n(jxe,"STRONG",{});var t2t=s(bbe);UFr=r(t2t,"roformer"),t2t.forEach(t),JFr=r(jxe," \u2014 "),sQ=n(jxe,"A",{href:!0});var a2t=s(sQ);YFr=r(a2t,"TFRoFormerForQuestionAnswering"),a2t.forEach(t),KFr=r(jxe," (RoFormer model)"),jxe.forEach(t),ZFr=i(re),a4=n(re,"LI",{});var Dxe=s(a4);Fbe=n(Dxe,"STRONG",{});var n2t=s(Fbe);evr=r(n2t,"xlm"),n2t.forEach(t),ovr=r(Dxe," \u2014 "),lQ=n(Dxe,"A",{href:!0});var s2t=s(lQ);rvr=r(s2t,"TFXLMForQuestionAnsweringSimple"),s2t.forEach(t),tvr=r(Dxe," (XLM model)"),Dxe.forEach(t),avr=i(re),n4=n(re,"LI",{});var Gxe=s(n4);vbe=n(Gxe,"STRONG",{});var l2t=s(vbe);nvr=r(l2t,"xlm-roberta"),l2t.forEach(t),svr=r(Gxe," \u2014 "),iQ=n(Gxe,"A",{href:!0});var i2t=s(iQ);lvr=r(i2t,"TFXLMRobertaForQuestionAnswering"),i2t.forEach(t),ivr=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),dvr=i(re),s4=n(re,"LI",{});var Oxe=s(s4);Tbe=n(Oxe,"STRONG",{});var d2t=s(Tbe);cvr=r(d2t,"xlnet"),d2t.forEach(t),fvr=r(Oxe," \u2014 "),dQ=n(Oxe,"A",{href:!0});var c2t=s(dQ);mvr=r(c2t,"TFXLNetForQuestionAnsweringSimple"),c2t.forEach(t),gvr=r(Oxe," (XLNet model)"),Oxe.forEach(t),re.forEach(t),hvr=i(wa),Mbe=n(wa,"P",{});var f2t=s(Mbe);pvr=r(f2t,"Examples:"),f2t.forEach(t),_vr=i(wa),m(bL.$$.fragment,wa),wa.forEach(t),si.forEach(t),fBe=i(c),Wc=n(c,"H2",{class:!0});var M$e=s(Wc);l4=n(M$e,"A",{id:!0,class:!0,href:!0});var m2t=s(l4);Ebe=n(m2t,"SPAN",{});var g2t=s(Ebe);m(FL.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),uvr=i(M$e),Cbe=n(M$e,"SPAN",{});var h2t=s(Cbe);bvr=r(h2t,"TFAutoModelForVision2Seq"),h2t.forEach(t),M$e.forEach(t),mBe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(vL.$$.fragment,ii),Fvr=i(ii),Hc=n(ii,"P",{});var mJ=s(Hc);vvr=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),cQ=n(mJ,"A",{href:!0});var p2t=s(cQ);Tvr=r(p2t,"from_pretrained()"),p2t.forEach(t),Mvr=r(mJ," class method or the "),fQ=n(mJ,"A",{href:!0});var _2t=s(fQ);Evr=r(_2t,"from_config()"),_2t.forEach(t),Cvr=r(mJ,` class
method.`),mJ.forEach(t),wvr=i(ii),TL=n(ii,"P",{});var E$e=s(TL);Avr=r(E$e,"This class cannot be instantiated directly using "),wbe=n(E$e,"CODE",{});var u2t=s(wbe);yvr=r(u2t,"__init__()"),u2t.forEach(t),Lvr=r(E$e," (throws an error)."),E$e.forEach(t),xvr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(ML.$$.fragment,di),kvr=i(di),Abe=n(di,"P",{});var b2t=s(Abe);Svr=r(b2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b2t.forEach(t),Rvr=i(di),Uc=n(di,"P",{});var gJ=s(Uc);Bvr=r(gJ,`Note:
Loading a model from its configuration file does `),ybe=n(gJ,"STRONG",{});var F2t=s(ybe);Pvr=r(F2t,"not"),F2t.forEach(t),$vr=r(gJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(gJ,"A",{href:!0});var v2t=s(mQ);Ivr=r(v2t,"from_pretrained()"),v2t.forEach(t),qvr=r(gJ," to load the model weights."),gJ.forEach(t),Nvr=i(di),Lbe=n(di,"P",{});var T2t=s(Lbe);jvr=r(T2t,"Examples:"),T2t.forEach(t),Dvr=i(di),m(EL.$$.fragment,di),di.forEach(t),Gvr=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(CL.$$.fragment,Aa),Ovr=i(Aa),xbe=n(Aa,"P",{});var M2t=s(xbe);Vvr=r(M2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M2t.forEach(t),Xvr=i(Aa),yn=n(Aa,"P",{});var o3=s(yn);zvr=r(o3,"The model class to instantiate is selected based on the "),kbe=n(o3,"CODE",{});var E2t=s(kbe);Qvr=r(E2t,"model_type"),E2t.forEach(t),Wvr=r(o3,` property of the config object (either
passed as an argument or loaded from `),Sbe=n(o3,"CODE",{});var C2t=s(Sbe);Hvr=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),Uvr=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rbe=n(o3,"CODE",{});var w2t=s(Rbe);Jvr=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),Yvr=r(o3,":"),o3.forEach(t),Kvr=i(Aa),Bbe=n(Aa,"UL",{});var A2t=s(Bbe);i4=n(A2t,"LI",{});var Vxe=s(i4);Pbe=n(Vxe,"STRONG",{});var y2t=s(Pbe);Zvr=r(y2t,"vision-encoder-decoder"),y2t.forEach(t),e6r=r(Vxe," \u2014 "),gQ=n(Vxe,"A",{href:!0});var L2t=s(gQ);o6r=r(L2t,"TFVisionEncoderDecoderModel"),L2t.forEach(t),r6r=r(Vxe," (Vision Encoder decoder model)"),Vxe.forEach(t),A2t.forEach(t),t6r=i(Aa),$be=n(Aa,"P",{});var x2t=s($be);a6r=r(x2t,"Examples:"),x2t.forEach(t),n6r=i(Aa),m(wL.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),gBe=i(c),Jc=n(c,"H2",{class:!0});var C$e=s(Jc);d4=n(C$e,"A",{id:!0,class:!0,href:!0});var k2t=s(d4);Ibe=n(k2t,"SPAN",{});var S2t=s(Ibe);m(AL.$$.fragment,S2t),S2t.forEach(t),k2t.forEach(t),s6r=i(C$e),qbe=n(C$e,"SPAN",{});var R2t=s(qbe);l6r=r(R2t,"TFAutoModelForSpeechSeq2Seq"),R2t.forEach(t),C$e.forEach(t),hBe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(yL.$$.fragment,ci),i6r=i(ci),Yc=n(ci,"P",{});var hJ=s(Yc);d6r=r(hJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hQ=n(hJ,"A",{href:!0});var B2t=s(hQ);c6r=r(B2t,"from_pretrained()"),B2t.forEach(t),f6r=r(hJ," class method or the "),pQ=n(hJ,"A",{href:!0});var P2t=s(pQ);m6r=r(P2t,"from_config()"),P2t.forEach(t),g6r=r(hJ,` class
method.`),hJ.forEach(t),h6r=i(ci),LL=n(ci,"P",{});var w$e=s(LL);p6r=r(w$e,"This class cannot be instantiated directly using "),Nbe=n(w$e,"CODE",{});var $2t=s(Nbe);_6r=r($2t,"__init__()"),$2t.forEach(t),u6r=r(w$e," (throws an error)."),w$e.forEach(t),b6r=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(xL.$$.fragment,fi),F6r=i(fi),jbe=n(fi,"P",{});var I2t=s(jbe);v6r=r(I2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),I2t.forEach(t),T6r=i(fi),Kc=n(fi,"P",{});var pJ=s(Kc);M6r=r(pJ,`Note:
Loading a model from its configuration file does `),Dbe=n(pJ,"STRONG",{});var q2t=s(Dbe);E6r=r(q2t,"not"),q2t.forEach(t),C6r=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(pJ,"A",{href:!0});var N2t=s(_Q);w6r=r(N2t,"from_pretrained()"),N2t.forEach(t),A6r=r(pJ," to load the model weights."),pJ.forEach(t),y6r=i(fi),Gbe=n(fi,"P",{});var j2t=s(Gbe);L6r=r(j2t,"Examples:"),j2t.forEach(t),x6r=i(fi),m(kL.$$.fragment,fi),fi.forEach(t),k6r=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(SL.$$.fragment,ya),S6r=i(ya),Obe=n(ya,"P",{});var D2t=s(Obe);R6r=r(D2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D2t.forEach(t),B6r=i(ya),Ln=n(ya,"P",{});var r3=s(Ln);P6r=r(r3,"The model class to instantiate is selected based on the "),Vbe=n(r3,"CODE",{});var G2t=s(Vbe);$6r=r(G2t,"model_type"),G2t.forEach(t),I6r=r(r3,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(r3,"CODE",{});var O2t=s(Xbe);q6r=r(O2t,"pretrained_model_name_or_path"),O2t.forEach(t),N6r=r(r3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(r3,"CODE",{});var V2t=s(zbe);j6r=r(V2t,"pretrained_model_name_or_path"),V2t.forEach(t),D6r=r(r3,":"),r3.forEach(t),G6r=i(ya),Qbe=n(ya,"UL",{});var X2t=s(Qbe);c4=n(X2t,"LI",{});var Xxe=s(c4);Wbe=n(Xxe,"STRONG",{});var z2t=s(Wbe);O6r=r(z2t,"speech_to_text"),z2t.forEach(t),V6r=r(Xxe," \u2014 "),uQ=n(Xxe,"A",{href:!0});var Q2t=s(uQ);X6r=r(Q2t,"TFSpeech2TextForConditionalGeneration"),Q2t.forEach(t),z6r=r(Xxe," (Speech2Text model)"),Xxe.forEach(t),X2t.forEach(t),Q6r=i(ya),Hbe=n(ya,"P",{});var W2t=s(Hbe);W6r=r(W2t,"Examples:"),W2t.forEach(t),H6r=i(ya),m(RL.$$.fragment,ya),ya.forEach(t),ci.forEach(t),pBe=i(c),Zc=n(c,"H2",{class:!0});var A$e=s(Zc);f4=n(A$e,"A",{id:!0,class:!0,href:!0});var H2t=s(f4);Ube=n(H2t,"SPAN",{});var U2t=s(Ube);m(BL.$$.fragment,U2t),U2t.forEach(t),H2t.forEach(t),U6r=i(A$e),Jbe=n(A$e,"SPAN",{});var J2t=s(Jbe);J6r=r(J2t,"FlaxAutoModel"),J2t.forEach(t),A$e.forEach(t),_Be=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(PL.$$.fragment,mi),Y6r=i(mi),ef=n(mi,"P",{});var _J=s(ef);K6r=r(_J,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),bQ=n(_J,"A",{href:!0});var Y2t=s(bQ);Z6r=r(Y2t,"from_pretrained()"),Y2t.forEach(t),eTr=r(_J," class method or the "),FQ=n(_J,"A",{href:!0});var K2t=s(FQ);oTr=r(K2t,"from_config()"),K2t.forEach(t),rTr=r(_J,` class
method.`),_J.forEach(t),tTr=i(mi),$L=n(mi,"P",{});var y$e=s($L);aTr=r(y$e,"This class cannot be instantiated directly using "),Ybe=n(y$e,"CODE",{});var Z2t=s(Ybe);nTr=r(Z2t,"__init__()"),Z2t.forEach(t),sTr=r(y$e," (throws an error)."),y$e.forEach(t),lTr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(IL.$$.fragment,gi),iTr=i(gi),Kbe=n(gi,"P",{});var eFt=s(Kbe);dTr=r(eFt,"Instantiates one of the base model classes of the library from a configuration."),eFt.forEach(t),cTr=i(gi),of=n(gi,"P",{});var uJ=s(of);fTr=r(uJ,`Note:
Loading a model from its configuration file does `),Zbe=n(uJ,"STRONG",{});var oFt=s(Zbe);mTr=r(oFt,"not"),oFt.forEach(t),gTr=r(uJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(uJ,"A",{href:!0});var rFt=s(vQ);hTr=r(rFt,"from_pretrained()"),rFt.forEach(t),pTr=r(uJ," to load the model weights."),uJ.forEach(t),_Tr=i(gi),e2e=n(gi,"P",{});var tFt=s(e2e);uTr=r(tFt,"Examples:"),tFt.forEach(t),bTr=i(gi),m(qL.$$.fragment,gi),gi.forEach(t),FTr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(NL.$$.fragment,La),vTr=i(La),o2e=n(La,"P",{});var aFt=s(o2e);TTr=r(aFt,"Instantiate one of the base model classes of the library from a pretrained model."),aFt.forEach(t),MTr=i(La),xn=n(La,"P",{});var t3=s(xn);ETr=r(t3,"The model class to instantiate is selected based on the "),r2e=n(t3,"CODE",{});var nFt=s(r2e);CTr=r(nFt,"model_type"),nFt.forEach(t),wTr=r(t3,` property of the config object (either
passed as an argument or loaded from `),t2e=n(t3,"CODE",{});var sFt=s(t2e);ATr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),yTr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a2e=n(t3,"CODE",{});var lFt=s(a2e);LTr=r(lFt,"pretrained_model_name_or_path"),lFt.forEach(t),xTr=r(t3,":"),t3.forEach(t),kTr=i(La),z=n(La,"UL",{});var W=s(z);m4=n(W,"LI",{});var zxe=s(m4);n2e=n(zxe,"STRONG",{});var iFt=s(n2e);STr=r(iFt,"albert"),iFt.forEach(t),RTr=r(zxe," \u2014 "),TQ=n(zxe,"A",{href:!0});var dFt=s(TQ);BTr=r(dFt,"FlaxAlbertModel"),dFt.forEach(t),PTr=r(zxe," (ALBERT model)"),zxe.forEach(t),$Tr=i(W),g4=n(W,"LI",{});var Qxe=s(g4);s2e=n(Qxe,"STRONG",{});var cFt=s(s2e);ITr=r(cFt,"bart"),cFt.forEach(t),qTr=r(Qxe," \u2014 "),MQ=n(Qxe,"A",{href:!0});var fFt=s(MQ);NTr=r(fFt,"FlaxBartModel"),fFt.forEach(t),jTr=r(Qxe," (BART model)"),Qxe.forEach(t),DTr=i(W),h4=n(W,"LI",{});var Wxe=s(h4);l2e=n(Wxe,"STRONG",{});var mFt=s(l2e);GTr=r(mFt,"beit"),mFt.forEach(t),OTr=r(Wxe," \u2014 "),EQ=n(Wxe,"A",{href:!0});var gFt=s(EQ);VTr=r(gFt,"FlaxBeitModel"),gFt.forEach(t),XTr=r(Wxe," (BEiT model)"),Wxe.forEach(t),zTr=i(W),p4=n(W,"LI",{});var Hxe=s(p4);i2e=n(Hxe,"STRONG",{});var hFt=s(i2e);QTr=r(hFt,"bert"),hFt.forEach(t),WTr=r(Hxe," \u2014 "),CQ=n(Hxe,"A",{href:!0});var pFt=s(CQ);HTr=r(pFt,"FlaxBertModel"),pFt.forEach(t),UTr=r(Hxe," (BERT model)"),Hxe.forEach(t),JTr=i(W),_4=n(W,"LI",{});var Uxe=s(_4);d2e=n(Uxe,"STRONG",{});var _Ft=s(d2e);YTr=r(_Ft,"big_bird"),_Ft.forEach(t),KTr=r(Uxe," \u2014 "),wQ=n(Uxe,"A",{href:!0});var uFt=s(wQ);ZTr=r(uFt,"FlaxBigBirdModel"),uFt.forEach(t),eMr=r(Uxe," (BigBird model)"),Uxe.forEach(t),oMr=i(W),u4=n(W,"LI",{});var Jxe=s(u4);c2e=n(Jxe,"STRONG",{});var bFt=s(c2e);rMr=r(bFt,"blenderbot"),bFt.forEach(t),tMr=r(Jxe," \u2014 "),AQ=n(Jxe,"A",{href:!0});var FFt=s(AQ);aMr=r(FFt,"FlaxBlenderbotModel"),FFt.forEach(t),nMr=r(Jxe," (Blenderbot model)"),Jxe.forEach(t),sMr=i(W),b4=n(W,"LI",{});var Yxe=s(b4);f2e=n(Yxe,"STRONG",{});var vFt=s(f2e);lMr=r(vFt,"blenderbot-small"),vFt.forEach(t),iMr=r(Yxe," \u2014 "),yQ=n(Yxe,"A",{href:!0});var TFt=s(yQ);dMr=r(TFt,"FlaxBlenderbotSmallModel"),TFt.forEach(t),cMr=r(Yxe," (BlenderbotSmall model)"),Yxe.forEach(t),fMr=i(W),F4=n(W,"LI",{});var Kxe=s(F4);m2e=n(Kxe,"STRONG",{});var MFt=s(m2e);mMr=r(MFt,"clip"),MFt.forEach(t),gMr=r(Kxe," \u2014 "),LQ=n(Kxe,"A",{href:!0});var EFt=s(LQ);hMr=r(EFt,"FlaxCLIPModel"),EFt.forEach(t),pMr=r(Kxe," (CLIP model)"),Kxe.forEach(t),_Mr=i(W),v4=n(W,"LI",{});var Zxe=s(v4);g2e=n(Zxe,"STRONG",{});var CFt=s(g2e);uMr=r(CFt,"distilbert"),CFt.forEach(t),bMr=r(Zxe," \u2014 "),xQ=n(Zxe,"A",{href:!0});var wFt=s(xQ);FMr=r(wFt,"FlaxDistilBertModel"),wFt.forEach(t),vMr=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),TMr=i(W),T4=n(W,"LI",{});var eke=s(T4);h2e=n(eke,"STRONG",{});var AFt=s(h2e);MMr=r(AFt,"electra"),AFt.forEach(t),EMr=r(eke," \u2014 "),kQ=n(eke,"A",{href:!0});var yFt=s(kQ);CMr=r(yFt,"FlaxElectraModel"),yFt.forEach(t),wMr=r(eke," (ELECTRA model)"),eke.forEach(t),AMr=i(W),M4=n(W,"LI",{});var oke=s(M4);p2e=n(oke,"STRONG",{});var LFt=s(p2e);yMr=r(LFt,"gpt2"),LFt.forEach(t),LMr=r(oke," \u2014 "),SQ=n(oke,"A",{href:!0});var xFt=s(SQ);xMr=r(xFt,"FlaxGPT2Model"),xFt.forEach(t),kMr=r(oke," (OpenAI GPT-2 model)"),oke.forEach(t),SMr=i(W),E4=n(W,"LI",{});var rke=s(E4);_2e=n(rke,"STRONG",{});var kFt=s(_2e);RMr=r(kFt,"gpt_neo"),kFt.forEach(t),BMr=r(rke," \u2014 "),RQ=n(rke,"A",{href:!0});var SFt=s(RQ);PMr=r(SFt,"FlaxGPTNeoModel"),SFt.forEach(t),$Mr=r(rke," (GPT Neo model)"),rke.forEach(t),IMr=i(W),C4=n(W,"LI",{});var tke=s(C4);u2e=n(tke,"STRONG",{});var RFt=s(u2e);qMr=r(RFt,"gptj"),RFt.forEach(t),NMr=r(tke," \u2014 "),BQ=n(tke,"A",{href:!0});var BFt=s(BQ);jMr=r(BFt,"FlaxGPTJModel"),BFt.forEach(t),DMr=r(tke," (GPT-J model)"),tke.forEach(t),GMr=i(W),w4=n(W,"LI",{});var ake=s(w4);b2e=n(ake,"STRONG",{});var PFt=s(b2e);OMr=r(PFt,"marian"),PFt.forEach(t),VMr=r(ake," \u2014 "),PQ=n(ake,"A",{href:!0});var $Ft=s(PQ);XMr=r($Ft,"FlaxMarianModel"),$Ft.forEach(t),zMr=r(ake," (Marian model)"),ake.forEach(t),QMr=i(W),A4=n(W,"LI",{});var nke=s(A4);F2e=n(nke,"STRONG",{});var IFt=s(F2e);WMr=r(IFt,"mbart"),IFt.forEach(t),HMr=r(nke," \u2014 "),$Q=n(nke,"A",{href:!0});var qFt=s($Q);UMr=r(qFt,"FlaxMBartModel"),qFt.forEach(t),JMr=r(nke," (mBART model)"),nke.forEach(t),YMr=i(W),y4=n(W,"LI",{});var ske=s(y4);v2e=n(ske,"STRONG",{});var NFt=s(v2e);KMr=r(NFt,"mt5"),NFt.forEach(t),ZMr=r(ske," \u2014 "),IQ=n(ske,"A",{href:!0});var jFt=s(IQ);e4r=r(jFt,"FlaxMT5Model"),jFt.forEach(t),o4r=r(ske," (mT5 model)"),ske.forEach(t),r4r=i(W),L4=n(W,"LI",{});var lke=s(L4);T2e=n(lke,"STRONG",{});var DFt=s(T2e);t4r=r(DFt,"pegasus"),DFt.forEach(t),a4r=r(lke," \u2014 "),qQ=n(lke,"A",{href:!0});var GFt=s(qQ);n4r=r(GFt,"FlaxPegasusModel"),GFt.forEach(t),s4r=r(lke," (Pegasus model)"),lke.forEach(t),l4r=i(W),x4=n(W,"LI",{});var ike=s(x4);M2e=n(ike,"STRONG",{});var OFt=s(M2e);i4r=r(OFt,"roberta"),OFt.forEach(t),d4r=r(ike," \u2014 "),NQ=n(ike,"A",{href:!0});var VFt=s(NQ);c4r=r(VFt,"FlaxRobertaModel"),VFt.forEach(t),f4r=r(ike," (RoBERTa model)"),ike.forEach(t),m4r=i(W),k4=n(W,"LI",{});var dke=s(k4);E2e=n(dke,"STRONG",{});var XFt=s(E2e);g4r=r(XFt,"roformer"),XFt.forEach(t),h4r=r(dke," \u2014 "),jQ=n(dke,"A",{href:!0});var zFt=s(jQ);p4r=r(zFt,"FlaxRoFormerModel"),zFt.forEach(t),_4r=r(dke," (RoFormer model)"),dke.forEach(t),u4r=i(W),S4=n(W,"LI",{});var cke=s(S4);C2e=n(cke,"STRONG",{});var QFt=s(C2e);b4r=r(QFt,"t5"),QFt.forEach(t),F4r=r(cke," \u2014 "),DQ=n(cke,"A",{href:!0});var WFt=s(DQ);v4r=r(WFt,"FlaxT5Model"),WFt.forEach(t),T4r=r(cke," (T5 model)"),cke.forEach(t),M4r=i(W),R4=n(W,"LI",{});var fke=s(R4);w2e=n(fke,"STRONG",{});var HFt=s(w2e);E4r=r(HFt,"vision-text-dual-encoder"),HFt.forEach(t),C4r=r(fke," \u2014 "),GQ=n(fke,"A",{href:!0});var UFt=s(GQ);w4r=r(UFt,"FlaxVisionTextDualEncoderModel"),UFt.forEach(t),A4r=r(fke," (VisionTextDualEncoder model)"),fke.forEach(t),y4r=i(W),B4=n(W,"LI",{});var mke=s(B4);A2e=n(mke,"STRONG",{});var JFt=s(A2e);L4r=r(JFt,"vit"),JFt.forEach(t),x4r=r(mke," \u2014 "),OQ=n(mke,"A",{href:!0});var YFt=s(OQ);k4r=r(YFt,"FlaxViTModel"),YFt.forEach(t),S4r=r(mke," (ViT model)"),mke.forEach(t),R4r=i(W),P4=n(W,"LI",{});var gke=s(P4);y2e=n(gke,"STRONG",{});var KFt=s(y2e);B4r=r(KFt,"wav2vec2"),KFt.forEach(t),P4r=r(gke," \u2014 "),VQ=n(gke,"A",{href:!0});var ZFt=s(VQ);$4r=r(ZFt,"FlaxWav2Vec2Model"),ZFt.forEach(t),I4r=r(gke," (Wav2Vec2 model)"),gke.forEach(t),q4r=i(W),$4=n(W,"LI",{});var hke=s($4);L2e=n(hke,"STRONG",{});var evt=s(L2e);N4r=r(evt,"xglm"),evt.forEach(t),j4r=r(hke," \u2014 "),XQ=n(hke,"A",{href:!0});var ovt=s(XQ);D4r=r(ovt,"FlaxXGLMModel"),ovt.forEach(t),G4r=r(hke," (XGLM model)"),hke.forEach(t),O4r=i(W),I4=n(W,"LI",{});var pke=s(I4);x2e=n(pke,"STRONG",{});var rvt=s(x2e);V4r=r(rvt,"xlm-roberta"),rvt.forEach(t),X4r=r(pke," \u2014 "),zQ=n(pke,"A",{href:!0});var tvt=s(zQ);z4r=r(tvt,"FlaxXLMRobertaModel"),tvt.forEach(t),Q4r=r(pke," (XLM-RoBERTa model)"),pke.forEach(t),W.forEach(t),W4r=i(La),k2e=n(La,"P",{});var avt=s(k2e);H4r=r(avt,"Examples:"),avt.forEach(t),U4r=i(La),m(jL.$$.fragment,La),La.forEach(t),mi.forEach(t),uBe=i(c),rf=n(c,"H2",{class:!0});var L$e=s(rf);q4=n(L$e,"A",{id:!0,class:!0,href:!0});var nvt=s(q4);S2e=n(nvt,"SPAN",{});var svt=s(S2e);m(DL.$$.fragment,svt),svt.forEach(t),nvt.forEach(t),J4r=i(L$e),R2e=n(L$e,"SPAN",{});var lvt=s(R2e);Y4r=r(lvt,"FlaxAutoModelForCausalLM"),lvt.forEach(t),L$e.forEach(t),bBe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(GL.$$.fragment,hi),K4r=i(hi),tf=n(hi,"P",{});var bJ=s(tf);Z4r=r(bJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QQ=n(bJ,"A",{href:!0});var ivt=s(QQ);eEr=r(ivt,"from_pretrained()"),ivt.forEach(t),oEr=r(bJ," class method or the "),WQ=n(bJ,"A",{href:!0});var dvt=s(WQ);rEr=r(dvt,"from_config()"),dvt.forEach(t),tEr=r(bJ,` class
method.`),bJ.forEach(t),aEr=i(hi),OL=n(hi,"P",{});var x$e=s(OL);nEr=r(x$e,"This class cannot be instantiated directly using "),B2e=n(x$e,"CODE",{});var cvt=s(B2e);sEr=r(cvt,"__init__()"),cvt.forEach(t),lEr=r(x$e," (throws an error)."),x$e.forEach(t),iEr=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(VL.$$.fragment,pi),dEr=i(pi),P2e=n(pi,"P",{});var fvt=s(P2e);cEr=r(fvt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),fvt.forEach(t),fEr=i(pi),af=n(pi,"P",{});var FJ=s(af);mEr=r(FJ,`Note:
Loading a model from its configuration file does `),$2e=n(FJ,"STRONG",{});var mvt=s($2e);gEr=r(mvt,"not"),mvt.forEach(t),hEr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HQ=n(FJ,"A",{href:!0});var gvt=s(HQ);pEr=r(gvt,"from_pretrained()"),gvt.forEach(t),_Er=r(FJ," to load the model weights."),FJ.forEach(t),uEr=i(pi),I2e=n(pi,"P",{});var hvt=s(I2e);bEr=r(hvt,"Examples:"),hvt.forEach(t),FEr=i(pi),m(XL.$$.fragment,pi),pi.forEach(t),vEr=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(zL.$$.fragment,xa),TEr=i(xa),q2e=n(xa,"P",{});var pvt=s(q2e);MEr=r(pvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),pvt.forEach(t),EEr=i(xa),kn=n(xa,"P",{});var a3=s(kn);CEr=r(a3,"The model class to instantiate is selected based on the "),N2e=n(a3,"CODE",{});var _vt=s(N2e);wEr=r(_vt,"model_type"),_vt.forEach(t),AEr=r(a3,` property of the config object (either
passed as an argument or loaded from `),j2e=n(a3,"CODE",{});var uvt=s(j2e);yEr=r(uvt,"pretrained_model_name_or_path"),uvt.forEach(t),LEr=r(a3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D2e=n(a3,"CODE",{});var bvt=s(D2e);xEr=r(bvt,"pretrained_model_name_or_path"),bvt.forEach(t),kEr=r(a3,":"),a3.forEach(t),SEr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);N4=n(_i,"LI",{});var _ke=s(N4);G2e=n(_ke,"STRONG",{});var Fvt=s(G2e);REr=r(Fvt,"bart"),Fvt.forEach(t),BEr=r(_ke," \u2014 "),UQ=n(_ke,"A",{href:!0});var vvt=s(UQ);PEr=r(vvt,"FlaxBartForCausalLM"),vvt.forEach(t),$Er=r(_ke," (BART model)"),_ke.forEach(t),IEr=i(_i),j4=n(_i,"LI",{});var uke=s(j4);O2e=n(uke,"STRONG",{});var Tvt=s(O2e);qEr=r(Tvt,"gpt2"),Tvt.forEach(t),NEr=r(uke," \u2014 "),JQ=n(uke,"A",{href:!0});var Mvt=s(JQ);jEr=r(Mvt,"FlaxGPT2LMHeadModel"),Mvt.forEach(t),DEr=r(uke," (OpenAI GPT-2 model)"),uke.forEach(t),GEr=i(_i),D4=n(_i,"LI",{});var bke=s(D4);V2e=n(bke,"STRONG",{});var Evt=s(V2e);OEr=r(Evt,"gpt_neo"),Evt.forEach(t),VEr=r(bke," \u2014 "),YQ=n(bke,"A",{href:!0});var Cvt=s(YQ);XEr=r(Cvt,"FlaxGPTNeoForCausalLM"),Cvt.forEach(t),zEr=r(bke," (GPT Neo model)"),bke.forEach(t),QEr=i(_i),G4=n(_i,"LI",{});var Fke=s(G4);X2e=n(Fke,"STRONG",{});var wvt=s(X2e);WEr=r(wvt,"gptj"),wvt.forEach(t),HEr=r(Fke," \u2014 "),KQ=n(Fke,"A",{href:!0});var Avt=s(KQ);UEr=r(Avt,"FlaxGPTJForCausalLM"),Avt.forEach(t),JEr=r(Fke," (GPT-J model)"),Fke.forEach(t),YEr=i(_i),O4=n(_i,"LI",{});var vke=s(O4);z2e=n(vke,"STRONG",{});var yvt=s(z2e);KEr=r(yvt,"xglm"),yvt.forEach(t),ZEr=r(vke," \u2014 "),ZQ=n(vke,"A",{href:!0});var Lvt=s(ZQ);eCr=r(Lvt,"FlaxXGLMForCausalLM"),Lvt.forEach(t),oCr=r(vke," (XGLM model)"),vke.forEach(t),_i.forEach(t),rCr=i(xa),Q2e=n(xa,"P",{});var xvt=s(Q2e);tCr=r(xvt,"Examples:"),xvt.forEach(t),aCr=i(xa),m(QL.$$.fragment,xa),xa.forEach(t),hi.forEach(t),FBe=i(c),nf=n(c,"H2",{class:!0});var k$e=s(nf);V4=n(k$e,"A",{id:!0,class:!0,href:!0});var kvt=s(V4);W2e=n(kvt,"SPAN",{});var Svt=s(W2e);m(WL.$$.fragment,Svt),Svt.forEach(t),kvt.forEach(t),nCr=i(k$e),H2e=n(k$e,"SPAN",{});var Rvt=s(H2e);sCr=r(Rvt,"FlaxAutoModelForPreTraining"),Rvt.forEach(t),k$e.forEach(t),vBe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(HL.$$.fragment,ui),lCr=i(ui),sf=n(ui,"P",{});var vJ=s(sf);iCr=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eW=n(vJ,"A",{href:!0});var Bvt=s(eW);dCr=r(Bvt,"from_pretrained()"),Bvt.forEach(t),cCr=r(vJ," class method or the "),oW=n(vJ,"A",{href:!0});var Pvt=s(oW);fCr=r(Pvt,"from_config()"),Pvt.forEach(t),mCr=r(vJ,` class
method.`),vJ.forEach(t),gCr=i(ui),UL=n(ui,"P",{});var S$e=s(UL);hCr=r(S$e,"This class cannot be instantiated directly using "),U2e=n(S$e,"CODE",{});var $vt=s(U2e);pCr=r($vt,"__init__()"),$vt.forEach(t),_Cr=r(S$e," (throws an error)."),S$e.forEach(t),uCr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(JL.$$.fragment,bi),bCr=i(bi),J2e=n(bi,"P",{});var Ivt=s(J2e);FCr=r(Ivt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ivt.forEach(t),vCr=i(bi),lf=n(bi,"P",{});var TJ=s(lf);TCr=r(TJ,`Note:
Loading a model from its configuration file does `),Y2e=n(TJ,"STRONG",{});var qvt=s(Y2e);MCr=r(qvt,"not"),qvt.forEach(t),ECr=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rW=n(TJ,"A",{href:!0});var Nvt=s(rW);CCr=r(Nvt,"from_pretrained()"),Nvt.forEach(t),wCr=r(TJ," to load the model weights."),TJ.forEach(t),ACr=i(bi),K2e=n(bi,"P",{});var jvt=s(K2e);yCr=r(jvt,"Examples:"),jvt.forEach(t),LCr=i(bi),m(YL.$$.fragment,bi),bi.forEach(t),xCr=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(KL.$$.fragment,ka),kCr=i(ka),Z2e=n(ka,"P",{});var Dvt=s(Z2e);SCr=r(Dvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dvt.forEach(t),RCr=i(ka),Sn=n(ka,"P",{});var n3=s(Sn);BCr=r(n3,"The model class to instantiate is selected based on the "),eFe=n(n3,"CODE",{});var Gvt=s(eFe);PCr=r(Gvt,"model_type"),Gvt.forEach(t),$Cr=r(n3,` property of the config object (either
passed as an argument or loaded from `),oFe=n(n3,"CODE",{});var Ovt=s(oFe);ICr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),qCr=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(n3,"CODE",{});var Vvt=s(rFe);NCr=r(Vvt,"pretrained_model_name_or_path"),Vvt.forEach(t),jCr=r(n3,":"),n3.forEach(t),DCr=i(ka),fe=n(ka,"UL",{});var pe=s(fe);X4=n(pe,"LI",{});var Tke=s(X4);tFe=n(Tke,"STRONG",{});var Xvt=s(tFe);GCr=r(Xvt,"albert"),Xvt.forEach(t),OCr=r(Tke," \u2014 "),tW=n(Tke,"A",{href:!0});var zvt=s(tW);VCr=r(zvt,"FlaxAlbertForPreTraining"),zvt.forEach(t),XCr=r(Tke," (ALBERT model)"),Tke.forEach(t),zCr=i(pe),z4=n(pe,"LI",{});var Mke=s(z4);aFe=n(Mke,"STRONG",{});var Qvt=s(aFe);QCr=r(Qvt,"bart"),Qvt.forEach(t),WCr=r(Mke," \u2014 "),aW=n(Mke,"A",{href:!0});var Wvt=s(aW);HCr=r(Wvt,"FlaxBartForConditionalGeneration"),Wvt.forEach(t),UCr=r(Mke," (BART model)"),Mke.forEach(t),JCr=i(pe),Q4=n(pe,"LI",{});var Eke=s(Q4);nFe=n(Eke,"STRONG",{});var Hvt=s(nFe);YCr=r(Hvt,"bert"),Hvt.forEach(t),KCr=r(Eke," \u2014 "),nW=n(Eke,"A",{href:!0});var Uvt=s(nW);ZCr=r(Uvt,"FlaxBertForPreTraining"),Uvt.forEach(t),e3r=r(Eke," (BERT model)"),Eke.forEach(t),o3r=i(pe),W4=n(pe,"LI",{});var Cke=s(W4);sFe=n(Cke,"STRONG",{});var Jvt=s(sFe);r3r=r(Jvt,"big_bird"),Jvt.forEach(t),t3r=r(Cke," \u2014 "),sW=n(Cke,"A",{href:!0});var Yvt=s(sW);a3r=r(Yvt,"FlaxBigBirdForPreTraining"),Yvt.forEach(t),n3r=r(Cke," (BigBird model)"),Cke.forEach(t),s3r=i(pe),H4=n(pe,"LI",{});var wke=s(H4);lFe=n(wke,"STRONG",{});var Kvt=s(lFe);l3r=r(Kvt,"electra"),Kvt.forEach(t),i3r=r(wke," \u2014 "),lW=n(wke,"A",{href:!0});var Zvt=s(lW);d3r=r(Zvt,"FlaxElectraForPreTraining"),Zvt.forEach(t),c3r=r(wke," (ELECTRA model)"),wke.forEach(t),f3r=i(pe),U4=n(pe,"LI",{});var Ake=s(U4);iFe=n(Ake,"STRONG",{});var e6t=s(iFe);m3r=r(e6t,"mbart"),e6t.forEach(t),g3r=r(Ake," \u2014 "),iW=n(Ake,"A",{href:!0});var o6t=s(iW);h3r=r(o6t,"FlaxMBartForConditionalGeneration"),o6t.forEach(t),p3r=r(Ake," (mBART model)"),Ake.forEach(t),_3r=i(pe),J4=n(pe,"LI",{});var yke=s(J4);dFe=n(yke,"STRONG",{});var r6t=s(dFe);u3r=r(r6t,"mt5"),r6t.forEach(t),b3r=r(yke," \u2014 "),dW=n(yke,"A",{href:!0});var t6t=s(dW);F3r=r(t6t,"FlaxMT5ForConditionalGeneration"),t6t.forEach(t),v3r=r(yke," (mT5 model)"),yke.forEach(t),T3r=i(pe),Y4=n(pe,"LI",{});var Lke=s(Y4);cFe=n(Lke,"STRONG",{});var a6t=s(cFe);M3r=r(a6t,"roberta"),a6t.forEach(t),E3r=r(Lke," \u2014 "),cW=n(Lke,"A",{href:!0});var n6t=s(cW);C3r=r(n6t,"FlaxRobertaForMaskedLM"),n6t.forEach(t),w3r=r(Lke," (RoBERTa model)"),Lke.forEach(t),A3r=i(pe),K4=n(pe,"LI",{});var xke=s(K4);fFe=n(xke,"STRONG",{});var s6t=s(fFe);y3r=r(s6t,"roformer"),s6t.forEach(t),L3r=r(xke," \u2014 "),fW=n(xke,"A",{href:!0});var l6t=s(fW);x3r=r(l6t,"FlaxRoFormerForMaskedLM"),l6t.forEach(t),k3r=r(xke," (RoFormer model)"),xke.forEach(t),S3r=i(pe),Z4=n(pe,"LI",{});var kke=s(Z4);mFe=n(kke,"STRONG",{});var i6t=s(mFe);R3r=r(i6t,"t5"),i6t.forEach(t),B3r=r(kke," \u2014 "),mW=n(kke,"A",{href:!0});var d6t=s(mW);P3r=r(d6t,"FlaxT5ForConditionalGeneration"),d6t.forEach(t),$3r=r(kke," (T5 model)"),kke.forEach(t),I3r=i(pe),eE=n(pe,"LI",{});var Ske=s(eE);gFe=n(Ske,"STRONG",{});var c6t=s(gFe);q3r=r(c6t,"wav2vec2"),c6t.forEach(t),N3r=r(Ske," \u2014 "),gW=n(Ske,"A",{href:!0});var f6t=s(gW);j3r=r(f6t,"FlaxWav2Vec2ForPreTraining"),f6t.forEach(t),D3r=r(Ske," (Wav2Vec2 model)"),Ske.forEach(t),G3r=i(pe),oE=n(pe,"LI",{});var Rke=s(oE);hFe=n(Rke,"STRONG",{});var m6t=s(hFe);O3r=r(m6t,"xlm-roberta"),m6t.forEach(t),V3r=r(Rke," \u2014 "),hW=n(Rke,"A",{href:!0});var g6t=s(hW);X3r=r(g6t,"FlaxXLMRobertaForMaskedLM"),g6t.forEach(t),z3r=r(Rke," (XLM-RoBERTa model)"),Rke.forEach(t),pe.forEach(t),Q3r=i(ka),pFe=n(ka,"P",{});var h6t=s(pFe);W3r=r(h6t,"Examples:"),h6t.forEach(t),H3r=i(ka),m(ZL.$$.fragment,ka),ka.forEach(t),ui.forEach(t),TBe=i(c),df=n(c,"H2",{class:!0});var R$e=s(df);rE=n(R$e,"A",{id:!0,class:!0,href:!0});var p6t=s(rE);_Fe=n(p6t,"SPAN",{});var _6t=s(_Fe);m(e8.$$.fragment,_6t),_6t.forEach(t),p6t.forEach(t),U3r=i(R$e),uFe=n(R$e,"SPAN",{});var u6t=s(uFe);J3r=r(u6t,"FlaxAutoModelForMaskedLM"),u6t.forEach(t),R$e.forEach(t),MBe=i(c),$r=n(c,"DIV",{class:!0});var Fi=s($r);m(o8.$$.fragment,Fi),Y3r=i(Fi),cf=n(Fi,"P",{});var MJ=s(cf);K3r=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pW=n(MJ,"A",{href:!0});var b6t=s(pW);Z3r=r(b6t,"from_pretrained()"),b6t.forEach(t),ewr=r(MJ," class method or the "),_W=n(MJ,"A",{href:!0});var F6t=s(_W);owr=r(F6t,"from_config()"),F6t.forEach(t),rwr=r(MJ,` class
method.`),MJ.forEach(t),twr=i(Fi),r8=n(Fi,"P",{});var B$e=s(r8);awr=r(B$e,"This class cannot be instantiated directly using "),bFe=n(B$e,"CODE",{});var v6t=s(bFe);nwr=r(v6t,"__init__()"),v6t.forEach(t),swr=r(B$e," (throws an error)."),B$e.forEach(t),lwr=i(Fi),xt=n(Fi,"DIV",{class:!0});var vi=s(xt);m(t8.$$.fragment,vi),iwr=i(vi),FFe=n(vi,"P",{});var T6t=s(FFe);dwr=r(T6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),T6t.forEach(t),cwr=i(vi),ff=n(vi,"P",{});var EJ=s(ff);fwr=r(EJ,`Note:
Loading a model from its configuration file does `),vFe=n(EJ,"STRONG",{});var M6t=s(vFe);mwr=r(M6t,"not"),M6t.forEach(t),gwr=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(EJ,"A",{href:!0});var E6t=s(uW);hwr=r(E6t,"from_pretrained()"),E6t.forEach(t),pwr=r(EJ," to load the model weights."),EJ.forEach(t),_wr=i(vi),TFe=n(vi,"P",{});var C6t=s(TFe);uwr=r(C6t,"Examples:"),C6t.forEach(t),bwr=i(vi),m(a8.$$.fragment,vi),vi.forEach(t),Fwr=i(Fi),ko=n(Fi,"DIV",{class:!0});var Sa=s(ko);m(n8.$$.fragment,Sa),vwr=i(Sa),MFe=n(Sa,"P",{});var w6t=s(MFe);Twr=r(w6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),w6t.forEach(t),Mwr=i(Sa),Rn=n(Sa,"P",{});var s3=s(Rn);Ewr=r(s3,"The model class to instantiate is selected based on the "),EFe=n(s3,"CODE",{});var A6t=s(EFe);Cwr=r(A6t,"model_type"),A6t.forEach(t),wwr=r(s3,` property of the config object (either
passed as an argument or loaded from `),CFe=n(s3,"CODE",{});var y6t=s(CFe);Awr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),ywr=r(s3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(s3,"CODE",{});var L6t=s(wFe);Lwr=r(L6t,"pretrained_model_name_or_path"),L6t.forEach(t),xwr=r(s3,":"),s3.forEach(t),kwr=i(Sa),be=n(Sa,"UL",{});var Ae=s(be);tE=n(Ae,"LI",{});var Bke=s(tE);AFe=n(Bke,"STRONG",{});var x6t=s(AFe);Swr=r(x6t,"albert"),x6t.forEach(t),Rwr=r(Bke," \u2014 "),bW=n(Bke,"A",{href:!0});var k6t=s(bW);Bwr=r(k6t,"FlaxAlbertForMaskedLM"),k6t.forEach(t),Pwr=r(Bke," (ALBERT model)"),Bke.forEach(t),$wr=i(Ae),aE=n(Ae,"LI",{});var Pke=s(aE);yFe=n(Pke,"STRONG",{});var S6t=s(yFe);Iwr=r(S6t,"bart"),S6t.forEach(t),qwr=r(Pke," \u2014 "),FW=n(Pke,"A",{href:!0});var R6t=s(FW);Nwr=r(R6t,"FlaxBartForConditionalGeneration"),R6t.forEach(t),jwr=r(Pke," (BART model)"),Pke.forEach(t),Dwr=i(Ae),nE=n(Ae,"LI",{});var $ke=s(nE);LFe=n($ke,"STRONG",{});var B6t=s(LFe);Gwr=r(B6t,"bert"),B6t.forEach(t),Owr=r($ke," \u2014 "),vW=n($ke,"A",{href:!0});var P6t=s(vW);Vwr=r(P6t,"FlaxBertForMaskedLM"),P6t.forEach(t),Xwr=r($ke," (BERT model)"),$ke.forEach(t),zwr=i(Ae),sE=n(Ae,"LI",{});var Ike=s(sE);xFe=n(Ike,"STRONG",{});var $6t=s(xFe);Qwr=r($6t,"big_bird"),$6t.forEach(t),Wwr=r(Ike," \u2014 "),TW=n(Ike,"A",{href:!0});var I6t=s(TW);Hwr=r(I6t,"FlaxBigBirdForMaskedLM"),I6t.forEach(t),Uwr=r(Ike," (BigBird model)"),Ike.forEach(t),Jwr=i(Ae),lE=n(Ae,"LI",{});var qke=s(lE);kFe=n(qke,"STRONG",{});var q6t=s(kFe);Ywr=r(q6t,"distilbert"),q6t.forEach(t),Kwr=r(qke," \u2014 "),MW=n(qke,"A",{href:!0});var N6t=s(MW);Zwr=r(N6t,"FlaxDistilBertForMaskedLM"),N6t.forEach(t),eAr=r(qke," (DistilBERT model)"),qke.forEach(t),oAr=i(Ae),iE=n(Ae,"LI",{});var Nke=s(iE);SFe=n(Nke,"STRONG",{});var j6t=s(SFe);rAr=r(j6t,"electra"),j6t.forEach(t),tAr=r(Nke," \u2014 "),EW=n(Nke,"A",{href:!0});var D6t=s(EW);aAr=r(D6t,"FlaxElectraForMaskedLM"),D6t.forEach(t),nAr=r(Nke," (ELECTRA model)"),Nke.forEach(t),sAr=i(Ae),dE=n(Ae,"LI",{});var jke=s(dE);RFe=n(jke,"STRONG",{});var G6t=s(RFe);lAr=r(G6t,"mbart"),G6t.forEach(t),iAr=r(jke," \u2014 "),CW=n(jke,"A",{href:!0});var O6t=s(CW);dAr=r(O6t,"FlaxMBartForConditionalGeneration"),O6t.forEach(t),cAr=r(jke," (mBART model)"),jke.forEach(t),fAr=i(Ae),cE=n(Ae,"LI",{});var Dke=s(cE);BFe=n(Dke,"STRONG",{});var V6t=s(BFe);mAr=r(V6t,"roberta"),V6t.forEach(t),gAr=r(Dke," \u2014 "),wW=n(Dke,"A",{href:!0});var X6t=s(wW);hAr=r(X6t,"FlaxRobertaForMaskedLM"),X6t.forEach(t),pAr=r(Dke," (RoBERTa model)"),Dke.forEach(t),_Ar=i(Ae),fE=n(Ae,"LI",{});var Gke=s(fE);PFe=n(Gke,"STRONG",{});var z6t=s(PFe);uAr=r(z6t,"roformer"),z6t.forEach(t),bAr=r(Gke," \u2014 "),AW=n(Gke,"A",{href:!0});var Q6t=s(AW);FAr=r(Q6t,"FlaxRoFormerForMaskedLM"),Q6t.forEach(t),vAr=r(Gke," (RoFormer model)"),Gke.forEach(t),TAr=i(Ae),mE=n(Ae,"LI",{});var Oke=s(mE);$Fe=n(Oke,"STRONG",{});var W6t=s($Fe);MAr=r(W6t,"xlm-roberta"),W6t.forEach(t),EAr=r(Oke," \u2014 "),yW=n(Oke,"A",{href:!0});var H6t=s(yW);CAr=r(H6t,"FlaxXLMRobertaForMaskedLM"),H6t.forEach(t),wAr=r(Oke," (XLM-RoBERTa model)"),Oke.forEach(t),Ae.forEach(t),AAr=i(Sa),IFe=n(Sa,"P",{});var U6t=s(IFe);yAr=r(U6t,"Examples:"),U6t.forEach(t),LAr=i(Sa),m(s8.$$.fragment,Sa),Sa.forEach(t),Fi.forEach(t),EBe=i(c),mf=n(c,"H2",{class:!0});var P$e=s(mf);gE=n(P$e,"A",{id:!0,class:!0,href:!0});var J6t=s(gE);qFe=n(J6t,"SPAN",{});var Y6t=s(qFe);m(l8.$$.fragment,Y6t),Y6t.forEach(t),J6t.forEach(t),xAr=i(P$e),NFe=n(P$e,"SPAN",{});var K6t=s(NFe);kAr=r(K6t,"FlaxAutoModelForSeq2SeqLM"),K6t.forEach(t),P$e.forEach(t),CBe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(i8.$$.fragment,Ti),SAr=i(Ti),gf=n(Ti,"P",{});var CJ=s(gf);RAr=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),LW=n(CJ,"A",{href:!0});var Z6t=s(LW);BAr=r(Z6t,"from_pretrained()"),Z6t.forEach(t),PAr=r(CJ," class method or the "),xW=n(CJ,"A",{href:!0});var eTt=s(xW);$Ar=r(eTt,"from_config()"),eTt.forEach(t),IAr=r(CJ,` class
method.`),CJ.forEach(t),qAr=i(Ti),d8=n(Ti,"P",{});var $$e=s(d8);NAr=r($$e,"This class cannot be instantiated directly using "),jFe=n($$e,"CODE",{});var oTt=s(jFe);jAr=r(oTt,"__init__()"),oTt.forEach(t),DAr=r($$e," (throws an error)."),$$e.forEach(t),GAr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(c8.$$.fragment,Mi),OAr=i(Mi),DFe=n(Mi,"P",{});var rTt=s(DFe);VAr=r(rTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rTt.forEach(t),XAr=i(Mi),hf=n(Mi,"P",{});var wJ=s(hf);zAr=r(wJ,`Note:
Loading a model from its configuration file does `),GFe=n(wJ,"STRONG",{});var tTt=s(GFe);QAr=r(tTt,"not"),tTt.forEach(t),WAr=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kW=n(wJ,"A",{href:!0});var aTt=s(kW);HAr=r(aTt,"from_pretrained()"),aTt.forEach(t),UAr=r(wJ," to load the model weights."),wJ.forEach(t),JAr=i(Mi),OFe=n(Mi,"P",{});var nTt=s(OFe);YAr=r(nTt,"Examples:"),nTt.forEach(t),KAr=i(Mi),m(f8.$$.fragment,Mi),Mi.forEach(t),ZAr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(m8.$$.fragment,Ra),e0r=i(Ra),VFe=n(Ra,"P",{});var sTt=s(VFe);o0r=r(sTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),sTt.forEach(t),r0r=i(Ra),Bn=n(Ra,"P",{});var l3=s(Bn);t0r=r(l3,"The model class to instantiate is selected based on the "),XFe=n(l3,"CODE",{});var lTt=s(XFe);a0r=r(lTt,"model_type"),lTt.forEach(t),n0r=r(l3,` property of the config object (either
passed as an argument or loaded from `),zFe=n(l3,"CODE",{});var iTt=s(zFe);s0r=r(iTt,"pretrained_model_name_or_path"),iTt.forEach(t),l0r=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QFe=n(l3,"CODE",{});var dTt=s(QFe);i0r=r(dTt,"pretrained_model_name_or_path"),dTt.forEach(t),d0r=r(l3,":"),l3.forEach(t),c0r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);hE=n(so,"LI",{});var Vke=s(hE);WFe=n(Vke,"STRONG",{});var cTt=s(WFe);f0r=r(cTt,"bart"),cTt.forEach(t),m0r=r(Vke," \u2014 "),SW=n(Vke,"A",{href:!0});var fTt=s(SW);g0r=r(fTt,"FlaxBartForConditionalGeneration"),fTt.forEach(t),h0r=r(Vke," (BART model)"),Vke.forEach(t),p0r=i(so),pE=n(so,"LI",{});var Xke=s(pE);HFe=n(Xke,"STRONG",{});var mTt=s(HFe);_0r=r(mTt,"blenderbot"),mTt.forEach(t),u0r=r(Xke," \u2014 "),RW=n(Xke,"A",{href:!0});var gTt=s(RW);b0r=r(gTt,"FlaxBlenderbotForConditionalGeneration"),gTt.forEach(t),F0r=r(Xke," (Blenderbot model)"),Xke.forEach(t),v0r=i(so),_E=n(so,"LI",{});var zke=s(_E);UFe=n(zke,"STRONG",{});var hTt=s(UFe);T0r=r(hTt,"blenderbot-small"),hTt.forEach(t),M0r=r(zke," \u2014 "),BW=n(zke,"A",{href:!0});var pTt=s(BW);E0r=r(pTt,"FlaxBlenderbotSmallForConditionalGeneration"),pTt.forEach(t),C0r=r(zke," (BlenderbotSmall model)"),zke.forEach(t),w0r=i(so),uE=n(so,"LI",{});var Qke=s(uE);JFe=n(Qke,"STRONG",{});var _Tt=s(JFe);A0r=r(_Tt,"encoder-decoder"),_Tt.forEach(t),y0r=r(Qke," \u2014 "),PW=n(Qke,"A",{href:!0});var uTt=s(PW);L0r=r(uTt,"FlaxEncoderDecoderModel"),uTt.forEach(t),x0r=r(Qke," (Encoder decoder model)"),Qke.forEach(t),k0r=i(so),bE=n(so,"LI",{});var Wke=s(bE);YFe=n(Wke,"STRONG",{});var bTt=s(YFe);S0r=r(bTt,"marian"),bTt.forEach(t),R0r=r(Wke," \u2014 "),$W=n(Wke,"A",{href:!0});var FTt=s($W);B0r=r(FTt,"FlaxMarianMTModel"),FTt.forEach(t),P0r=r(Wke," (Marian model)"),Wke.forEach(t),$0r=i(so),FE=n(so,"LI",{});var Hke=s(FE);KFe=n(Hke,"STRONG",{});var vTt=s(KFe);I0r=r(vTt,"mbart"),vTt.forEach(t),q0r=r(Hke," \u2014 "),IW=n(Hke,"A",{href:!0});var TTt=s(IW);N0r=r(TTt,"FlaxMBartForConditionalGeneration"),TTt.forEach(t),j0r=r(Hke," (mBART model)"),Hke.forEach(t),D0r=i(so),vE=n(so,"LI",{});var Uke=s(vE);ZFe=n(Uke,"STRONG",{});var MTt=s(ZFe);G0r=r(MTt,"mt5"),MTt.forEach(t),O0r=r(Uke," \u2014 "),qW=n(Uke,"A",{href:!0});var ETt=s(qW);V0r=r(ETt,"FlaxMT5ForConditionalGeneration"),ETt.forEach(t),X0r=r(Uke," (mT5 model)"),Uke.forEach(t),z0r=i(so),TE=n(so,"LI",{});var Jke=s(TE);eve=n(Jke,"STRONG",{});var CTt=s(eve);Q0r=r(CTt,"pegasus"),CTt.forEach(t),W0r=r(Jke," \u2014 "),NW=n(Jke,"A",{href:!0});var wTt=s(NW);H0r=r(wTt,"FlaxPegasusForConditionalGeneration"),wTt.forEach(t),U0r=r(Jke," (Pegasus model)"),Jke.forEach(t),J0r=i(so),ME=n(so,"LI",{});var Yke=s(ME);ove=n(Yke,"STRONG",{});var ATt=s(ove);Y0r=r(ATt,"t5"),ATt.forEach(t),K0r=r(Yke," \u2014 "),jW=n(Yke,"A",{href:!0});var yTt=s(jW);Z0r=r(yTt,"FlaxT5ForConditionalGeneration"),yTt.forEach(t),eyr=r(Yke," (T5 model)"),Yke.forEach(t),so.forEach(t),oyr=i(Ra),rve=n(Ra,"P",{});var LTt=s(rve);ryr=r(LTt,"Examples:"),LTt.forEach(t),tyr=i(Ra),m(g8.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),wBe=i(c),pf=n(c,"H2",{class:!0});var I$e=s(pf);EE=n(I$e,"A",{id:!0,class:!0,href:!0});var xTt=s(EE);tve=n(xTt,"SPAN",{});var kTt=s(tve);m(h8.$$.fragment,kTt),kTt.forEach(t),xTt.forEach(t),ayr=i(I$e),ave=n(I$e,"SPAN",{});var STt=s(ave);nyr=r(STt,"FlaxAutoModelForSequenceClassification"),STt.forEach(t),I$e.forEach(t),ABe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(p8.$$.fragment,Ei),syr=i(Ei),_f=n(Ei,"P",{});var AJ=s(_f);lyr=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),DW=n(AJ,"A",{href:!0});var RTt=s(DW);iyr=r(RTt,"from_pretrained()"),RTt.forEach(t),dyr=r(AJ," class method or the "),GW=n(AJ,"A",{href:!0});var BTt=s(GW);cyr=r(BTt,"from_config()"),BTt.forEach(t),fyr=r(AJ,` class
method.`),AJ.forEach(t),myr=i(Ei),_8=n(Ei,"P",{});var q$e=s(_8);gyr=r(q$e,"This class cannot be instantiated directly using "),nve=n(q$e,"CODE",{});var PTt=s(nve);hyr=r(PTt,"__init__()"),PTt.forEach(t),pyr=r(q$e," (throws an error)."),q$e.forEach(t),_yr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(u8.$$.fragment,Ci),uyr=i(Ci),sve=n(Ci,"P",{});var $Tt=s(sve);byr=r($Tt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$Tt.forEach(t),Fyr=i(Ci),uf=n(Ci,"P",{});var yJ=s(uf);vyr=r(yJ,`Note:
Loading a model from its configuration file does `),lve=n(yJ,"STRONG",{});var ITt=s(lve);Tyr=r(ITt,"not"),ITt.forEach(t),Myr=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(yJ,"A",{href:!0});var qTt=s(OW);Eyr=r(qTt,"from_pretrained()"),qTt.forEach(t),Cyr=r(yJ," to load the model weights."),yJ.forEach(t),wyr=i(Ci),ive=n(Ci,"P",{});var NTt=s(ive);Ayr=r(NTt,"Examples:"),NTt.forEach(t),yyr=i(Ci),m(b8.$$.fragment,Ci),Ci.forEach(t),Lyr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m(F8.$$.fragment,Ba),xyr=i(Ba),dve=n(Ba,"P",{});var jTt=s(dve);kyr=r(jTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jTt.forEach(t),Syr=i(Ba),Pn=n(Ba,"P",{});var i3=s(Pn);Ryr=r(i3,"The model class to instantiate is selected based on the "),cve=n(i3,"CODE",{});var DTt=s(cve);Byr=r(DTt,"model_type"),DTt.forEach(t),Pyr=r(i3,` property of the config object (either
passed as an argument or loaded from `),fve=n(i3,"CODE",{});var GTt=s(fve);$yr=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),Iyr=r(i3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(i3,"CODE",{});var OTt=s(mve);qyr=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),Nyr=r(i3,":"),i3.forEach(t),jyr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);CE=n(ye,"LI",{});var Kke=s(CE);gve=n(Kke,"STRONG",{});var VTt=s(gve);Dyr=r(VTt,"albert"),VTt.forEach(t),Gyr=r(Kke," \u2014 "),VW=n(Kke,"A",{href:!0});var XTt=s(VW);Oyr=r(XTt,"FlaxAlbertForSequenceClassification"),XTt.forEach(t),Vyr=r(Kke," (ALBERT model)"),Kke.forEach(t),Xyr=i(ye),wE=n(ye,"LI",{});var Zke=s(wE);hve=n(Zke,"STRONG",{});var zTt=s(hve);zyr=r(zTt,"bart"),zTt.forEach(t),Qyr=r(Zke," \u2014 "),XW=n(Zke,"A",{href:!0});var QTt=s(XW);Wyr=r(QTt,"FlaxBartForSequenceClassification"),QTt.forEach(t),Hyr=r(Zke," (BART model)"),Zke.forEach(t),Uyr=i(ye),AE=n(ye,"LI",{});var eSe=s(AE);pve=n(eSe,"STRONG",{});var WTt=s(pve);Jyr=r(WTt,"bert"),WTt.forEach(t),Yyr=r(eSe," \u2014 "),zW=n(eSe,"A",{href:!0});var HTt=s(zW);Kyr=r(HTt,"FlaxBertForSequenceClassification"),HTt.forEach(t),Zyr=r(eSe," (BERT model)"),eSe.forEach(t),eLr=i(ye),yE=n(ye,"LI",{});var oSe=s(yE);_ve=n(oSe,"STRONG",{});var UTt=s(_ve);oLr=r(UTt,"big_bird"),UTt.forEach(t),rLr=r(oSe," \u2014 "),QW=n(oSe,"A",{href:!0});var JTt=s(QW);tLr=r(JTt,"FlaxBigBirdForSequenceClassification"),JTt.forEach(t),aLr=r(oSe," (BigBird model)"),oSe.forEach(t),nLr=i(ye),LE=n(ye,"LI",{});var rSe=s(LE);uve=n(rSe,"STRONG",{});var YTt=s(uve);sLr=r(YTt,"distilbert"),YTt.forEach(t),lLr=r(rSe," \u2014 "),WW=n(rSe,"A",{href:!0});var KTt=s(WW);iLr=r(KTt,"FlaxDistilBertForSequenceClassification"),KTt.forEach(t),dLr=r(rSe," (DistilBERT model)"),rSe.forEach(t),cLr=i(ye),xE=n(ye,"LI",{});var tSe=s(xE);bve=n(tSe,"STRONG",{});var ZTt=s(bve);fLr=r(ZTt,"electra"),ZTt.forEach(t),mLr=r(tSe," \u2014 "),HW=n(tSe,"A",{href:!0});var eMt=s(HW);gLr=r(eMt,"FlaxElectraForSequenceClassification"),eMt.forEach(t),hLr=r(tSe," (ELECTRA model)"),tSe.forEach(t),pLr=i(ye),kE=n(ye,"LI",{});var aSe=s(kE);Fve=n(aSe,"STRONG",{});var oMt=s(Fve);_Lr=r(oMt,"mbart"),oMt.forEach(t),uLr=r(aSe," \u2014 "),UW=n(aSe,"A",{href:!0});var rMt=s(UW);bLr=r(rMt,"FlaxMBartForSequenceClassification"),rMt.forEach(t),FLr=r(aSe," (mBART model)"),aSe.forEach(t),vLr=i(ye),SE=n(ye,"LI",{});var nSe=s(SE);vve=n(nSe,"STRONG",{});var tMt=s(vve);TLr=r(tMt,"roberta"),tMt.forEach(t),MLr=r(nSe," \u2014 "),JW=n(nSe,"A",{href:!0});var aMt=s(JW);ELr=r(aMt,"FlaxRobertaForSequenceClassification"),aMt.forEach(t),CLr=r(nSe," (RoBERTa model)"),nSe.forEach(t),wLr=i(ye),RE=n(ye,"LI",{});var sSe=s(RE);Tve=n(sSe,"STRONG",{});var nMt=s(Tve);ALr=r(nMt,"roformer"),nMt.forEach(t),yLr=r(sSe," \u2014 "),YW=n(sSe,"A",{href:!0});var sMt=s(YW);LLr=r(sMt,"FlaxRoFormerForSequenceClassification"),sMt.forEach(t),xLr=r(sSe," (RoFormer model)"),sSe.forEach(t),kLr=i(ye),BE=n(ye,"LI",{});var lSe=s(BE);Mve=n(lSe,"STRONG",{});var lMt=s(Mve);SLr=r(lMt,"xlm-roberta"),lMt.forEach(t),RLr=r(lSe," \u2014 "),KW=n(lSe,"A",{href:!0});var iMt=s(KW);BLr=r(iMt,"FlaxXLMRobertaForSequenceClassification"),iMt.forEach(t),PLr=r(lSe," (XLM-RoBERTa model)"),lSe.forEach(t),ye.forEach(t),$Lr=i(Ba),Eve=n(Ba,"P",{});var dMt=s(Eve);ILr=r(dMt,"Examples:"),dMt.forEach(t),qLr=i(Ba),m(v8.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),yBe=i(c),bf=n(c,"H2",{class:!0});var N$e=s(bf);PE=n(N$e,"A",{id:!0,class:!0,href:!0});var cMt=s(PE);Cve=n(cMt,"SPAN",{});var fMt=s(Cve);m(T8.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),NLr=i(N$e),wve=n(N$e,"SPAN",{});var mMt=s(wve);jLr=r(mMt,"FlaxAutoModelForQuestionAnswering"),mMt.forEach(t),N$e.forEach(t),LBe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(M8.$$.fragment,wi),DLr=i(wi),Ff=n(wi,"P",{});var LJ=s(Ff);GLr=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ZW=n(LJ,"A",{href:!0});var gMt=s(ZW);OLr=r(gMt,"from_pretrained()"),gMt.forEach(t),VLr=r(LJ," class method or the "),eH=n(LJ,"A",{href:!0});var hMt=s(eH);XLr=r(hMt,"from_config()"),hMt.forEach(t),zLr=r(LJ,` class
method.`),LJ.forEach(t),QLr=i(wi),E8=n(wi,"P",{});var j$e=s(E8);WLr=r(j$e,"This class cannot be instantiated directly using "),Ave=n(j$e,"CODE",{});var pMt=s(Ave);HLr=r(pMt,"__init__()"),pMt.forEach(t),ULr=r(j$e," (throws an error)."),j$e.forEach(t),JLr=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(C8.$$.fragment,Ai),YLr=i(Ai),yve=n(Ai,"P",{});var _Mt=s(yve);KLr=r(_Mt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_Mt.forEach(t),ZLr=i(Ai),vf=n(Ai,"P",{});var xJ=s(vf);e8r=r(xJ,`Note:
Loading a model from its configuration file does `),Lve=n(xJ,"STRONG",{});var uMt=s(Lve);o8r=r(uMt,"not"),uMt.forEach(t),r8r=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(xJ,"A",{href:!0});var bMt=s(oH);t8r=r(bMt,"from_pretrained()"),bMt.forEach(t),a8r=r(xJ," to load the model weights."),xJ.forEach(t),n8r=i(Ai),xve=n(Ai,"P",{});var FMt=s(xve);s8r=r(FMt,"Examples:"),FMt.forEach(t),l8r=i(Ai),m(w8.$$.fragment,Ai),Ai.forEach(t),i8r=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(A8.$$.fragment,Pa),d8r=i(Pa),kve=n(Pa,"P",{});var vMt=s(kve);c8r=r(vMt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vMt.forEach(t),f8r=i(Pa),$n=n(Pa,"P",{});var d3=s($n);m8r=r(d3,"The model class to instantiate is selected based on the "),Sve=n(d3,"CODE",{});var TMt=s(Sve);g8r=r(TMt,"model_type"),TMt.forEach(t),h8r=r(d3,` property of the config object (either
passed as an argument or loaded from `),Rve=n(d3,"CODE",{});var MMt=s(Rve);p8r=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),_8r=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(d3,"CODE",{});var EMt=s(Bve);u8r=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),b8r=r(d3,":"),d3.forEach(t),F8r=i(Pa),ve=n(Pa,"UL",{});var Le=s(ve);$E=n(Le,"LI",{});var iSe=s($E);Pve=n(iSe,"STRONG",{});var CMt=s(Pve);v8r=r(CMt,"albert"),CMt.forEach(t),T8r=r(iSe," \u2014 "),rH=n(iSe,"A",{href:!0});var wMt=s(rH);M8r=r(wMt,"FlaxAlbertForQuestionAnswering"),wMt.forEach(t),E8r=r(iSe," (ALBERT model)"),iSe.forEach(t),C8r=i(Le),IE=n(Le,"LI",{});var dSe=s(IE);$ve=n(dSe,"STRONG",{});var AMt=s($ve);w8r=r(AMt,"bart"),AMt.forEach(t),A8r=r(dSe," \u2014 "),tH=n(dSe,"A",{href:!0});var yMt=s(tH);y8r=r(yMt,"FlaxBartForQuestionAnswering"),yMt.forEach(t),L8r=r(dSe," (BART model)"),dSe.forEach(t),x8r=i(Le),qE=n(Le,"LI",{});var cSe=s(qE);Ive=n(cSe,"STRONG",{});var LMt=s(Ive);k8r=r(LMt,"bert"),LMt.forEach(t),S8r=r(cSe," \u2014 "),aH=n(cSe,"A",{href:!0});var xMt=s(aH);R8r=r(xMt,"FlaxBertForQuestionAnswering"),xMt.forEach(t),B8r=r(cSe," (BERT model)"),cSe.forEach(t),P8r=i(Le),NE=n(Le,"LI",{});var fSe=s(NE);qve=n(fSe,"STRONG",{});var kMt=s(qve);$8r=r(kMt,"big_bird"),kMt.forEach(t),I8r=r(fSe," \u2014 "),nH=n(fSe,"A",{href:!0});var SMt=s(nH);q8r=r(SMt,"FlaxBigBirdForQuestionAnswering"),SMt.forEach(t),N8r=r(fSe," (BigBird model)"),fSe.forEach(t),j8r=i(Le),jE=n(Le,"LI",{});var mSe=s(jE);Nve=n(mSe,"STRONG",{});var RMt=s(Nve);D8r=r(RMt,"distilbert"),RMt.forEach(t),G8r=r(mSe," \u2014 "),sH=n(mSe,"A",{href:!0});var BMt=s(sH);O8r=r(BMt,"FlaxDistilBertForQuestionAnswering"),BMt.forEach(t),V8r=r(mSe," (DistilBERT model)"),mSe.forEach(t),X8r=i(Le),DE=n(Le,"LI",{});var gSe=s(DE);jve=n(gSe,"STRONG",{});var PMt=s(jve);z8r=r(PMt,"electra"),PMt.forEach(t),Q8r=r(gSe," \u2014 "),lH=n(gSe,"A",{href:!0});var $Mt=s(lH);W8r=r($Mt,"FlaxElectraForQuestionAnswering"),$Mt.forEach(t),H8r=r(gSe," (ELECTRA model)"),gSe.forEach(t),U8r=i(Le),GE=n(Le,"LI",{});var hSe=s(GE);Dve=n(hSe,"STRONG",{});var IMt=s(Dve);J8r=r(IMt,"mbart"),IMt.forEach(t),Y8r=r(hSe," \u2014 "),iH=n(hSe,"A",{href:!0});var qMt=s(iH);K8r=r(qMt,"FlaxMBartForQuestionAnswering"),qMt.forEach(t),Z8r=r(hSe," (mBART model)"),hSe.forEach(t),e7r=i(Le),OE=n(Le,"LI",{});var pSe=s(OE);Gve=n(pSe,"STRONG",{});var NMt=s(Gve);o7r=r(NMt,"roberta"),NMt.forEach(t),r7r=r(pSe," \u2014 "),dH=n(pSe,"A",{href:!0});var jMt=s(dH);t7r=r(jMt,"FlaxRobertaForQuestionAnswering"),jMt.forEach(t),a7r=r(pSe," (RoBERTa model)"),pSe.forEach(t),n7r=i(Le),VE=n(Le,"LI",{});var _Se=s(VE);Ove=n(_Se,"STRONG",{});var DMt=s(Ove);s7r=r(DMt,"roformer"),DMt.forEach(t),l7r=r(_Se," \u2014 "),cH=n(_Se,"A",{href:!0});var GMt=s(cH);i7r=r(GMt,"FlaxRoFormerForQuestionAnswering"),GMt.forEach(t),d7r=r(_Se," (RoFormer model)"),_Se.forEach(t),c7r=i(Le),XE=n(Le,"LI",{});var uSe=s(XE);Vve=n(uSe,"STRONG",{});var OMt=s(Vve);f7r=r(OMt,"xlm-roberta"),OMt.forEach(t),m7r=r(uSe," \u2014 "),fH=n(uSe,"A",{href:!0});var VMt=s(fH);g7r=r(VMt,"FlaxXLMRobertaForQuestionAnswering"),VMt.forEach(t),h7r=r(uSe," (XLM-RoBERTa model)"),uSe.forEach(t),Le.forEach(t),p7r=i(Pa),Xve=n(Pa,"P",{});var XMt=s(Xve);_7r=r(XMt,"Examples:"),XMt.forEach(t),u7r=i(Pa),m(y8.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),xBe=i(c),Tf=n(c,"H2",{class:!0});var D$e=s(Tf);zE=n(D$e,"A",{id:!0,class:!0,href:!0});var zMt=s(zE);zve=n(zMt,"SPAN",{});var QMt=s(zve);m(L8.$$.fragment,QMt),QMt.forEach(t),zMt.forEach(t),b7r=i(D$e),Qve=n(D$e,"SPAN",{});var WMt=s(Qve);F7r=r(WMt,"FlaxAutoModelForTokenClassification"),WMt.forEach(t),D$e.forEach(t),kBe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(x8.$$.fragment,yi),v7r=i(yi),Mf=n(yi,"P",{});var kJ=s(Mf);T7r=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mH=n(kJ,"A",{href:!0});var HMt=s(mH);M7r=r(HMt,"from_pretrained()"),HMt.forEach(t),E7r=r(kJ," class method or the "),gH=n(kJ,"A",{href:!0});var UMt=s(gH);C7r=r(UMt,"from_config()"),UMt.forEach(t),w7r=r(kJ,` class
method.`),kJ.forEach(t),A7r=i(yi),k8=n(yi,"P",{});var G$e=s(k8);y7r=r(G$e,"This class cannot be instantiated directly using "),Wve=n(G$e,"CODE",{});var JMt=s(Wve);L7r=r(JMt,"__init__()"),JMt.forEach(t),x7r=r(G$e," (throws an error)."),G$e.forEach(t),k7r=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(S8.$$.fragment,Li),S7r=i(Li),Hve=n(Li,"P",{});var YMt=s(Hve);R7r=r(YMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),YMt.forEach(t),B7r=i(Li),Ef=n(Li,"P",{});var SJ=s(Ef);P7r=r(SJ,`Note:
Loading a model from its configuration file does `),Uve=n(SJ,"STRONG",{});var KMt=s(Uve);$7r=r(KMt,"not"),KMt.forEach(t),I7r=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hH=n(SJ,"A",{href:!0});var ZMt=s(hH);q7r=r(ZMt,"from_pretrained()"),ZMt.forEach(t),N7r=r(SJ," to load the model weights."),SJ.forEach(t),j7r=i(Li),Jve=n(Li,"P",{});var e4t=s(Jve);D7r=r(e4t,"Examples:"),e4t.forEach(t),G7r=i(Li),m(R8.$$.fragment,Li),Li.forEach(t),O7r=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(B8.$$.fragment,$a),V7r=i($a),Yve=n($a,"P",{});var o4t=s(Yve);X7r=r(o4t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),o4t.forEach(t),z7r=i($a),In=n($a,"P",{});var c3=s(In);Q7r=r(c3,"The model class to instantiate is selected based on the "),Kve=n(c3,"CODE",{});var r4t=s(Kve);W7r=r(r4t,"model_type"),r4t.forEach(t),H7r=r(c3,` property of the config object (either
passed as an argument or loaded from `),Zve=n(c3,"CODE",{});var t4t=s(Zve);U7r=r(t4t,"pretrained_model_name_or_path"),t4t.forEach(t),J7r=r(c3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e6e=n(c3,"CODE",{});var a4t=s(e6e);Y7r=r(a4t,"pretrained_model_name_or_path"),a4t.forEach(t),K7r=r(c3,":"),c3.forEach(t),Z7r=i($a),Be=n($a,"UL",{});var Oo=s(Be);QE=n(Oo,"LI",{});var bSe=s(QE);o6e=n(bSe,"STRONG",{});var n4t=s(o6e);e9r=r(n4t,"albert"),n4t.forEach(t),o9r=r(bSe," \u2014 "),pH=n(bSe,"A",{href:!0});var s4t=s(pH);r9r=r(s4t,"FlaxAlbertForTokenClassification"),s4t.forEach(t),t9r=r(bSe," (ALBERT model)"),bSe.forEach(t),a9r=i(Oo),WE=n(Oo,"LI",{});var FSe=s(WE);r6e=n(FSe,"STRONG",{});var l4t=s(r6e);n9r=r(l4t,"bert"),l4t.forEach(t),s9r=r(FSe," \u2014 "),_H=n(FSe,"A",{href:!0});var i4t=s(_H);l9r=r(i4t,"FlaxBertForTokenClassification"),i4t.forEach(t),i9r=r(FSe," (BERT model)"),FSe.forEach(t),d9r=i(Oo),HE=n(Oo,"LI",{});var vSe=s(HE);t6e=n(vSe,"STRONG",{});var d4t=s(t6e);c9r=r(d4t,"big_bird"),d4t.forEach(t),f9r=r(vSe," \u2014 "),uH=n(vSe,"A",{href:!0});var c4t=s(uH);m9r=r(c4t,"FlaxBigBirdForTokenClassification"),c4t.forEach(t),g9r=r(vSe," (BigBird model)"),vSe.forEach(t),h9r=i(Oo),UE=n(Oo,"LI",{});var TSe=s(UE);a6e=n(TSe,"STRONG",{});var f4t=s(a6e);p9r=r(f4t,"distilbert"),f4t.forEach(t),_9r=r(TSe," \u2014 "),bH=n(TSe,"A",{href:!0});var m4t=s(bH);u9r=r(m4t,"FlaxDistilBertForTokenClassification"),m4t.forEach(t),b9r=r(TSe," (DistilBERT model)"),TSe.forEach(t),F9r=i(Oo),JE=n(Oo,"LI",{});var MSe=s(JE);n6e=n(MSe,"STRONG",{});var g4t=s(n6e);v9r=r(g4t,"electra"),g4t.forEach(t),T9r=r(MSe," \u2014 "),FH=n(MSe,"A",{href:!0});var h4t=s(FH);M9r=r(h4t,"FlaxElectraForTokenClassification"),h4t.forEach(t),E9r=r(MSe," (ELECTRA model)"),MSe.forEach(t),C9r=i(Oo),YE=n(Oo,"LI",{});var ESe=s(YE);s6e=n(ESe,"STRONG",{});var p4t=s(s6e);w9r=r(p4t,"roberta"),p4t.forEach(t),A9r=r(ESe," \u2014 "),vH=n(ESe,"A",{href:!0});var _4t=s(vH);y9r=r(_4t,"FlaxRobertaForTokenClassification"),_4t.forEach(t),L9r=r(ESe," (RoBERTa model)"),ESe.forEach(t),x9r=i(Oo),KE=n(Oo,"LI",{});var CSe=s(KE);l6e=n(CSe,"STRONG",{});var u4t=s(l6e);k9r=r(u4t,"roformer"),u4t.forEach(t),S9r=r(CSe," \u2014 "),TH=n(CSe,"A",{href:!0});var b4t=s(TH);R9r=r(b4t,"FlaxRoFormerForTokenClassification"),b4t.forEach(t),B9r=r(CSe," (RoFormer model)"),CSe.forEach(t),P9r=i(Oo),ZE=n(Oo,"LI",{});var wSe=s(ZE);i6e=n(wSe,"STRONG",{});var F4t=s(i6e);$9r=r(F4t,"xlm-roberta"),F4t.forEach(t),I9r=r(wSe," \u2014 "),MH=n(wSe,"A",{href:!0});var v4t=s(MH);q9r=r(v4t,"FlaxXLMRobertaForTokenClassification"),v4t.forEach(t),N9r=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),Oo.forEach(t),j9r=i($a),d6e=n($a,"P",{});var T4t=s(d6e);D9r=r(T4t,"Examples:"),T4t.forEach(t),G9r=i($a),m(P8.$$.fragment,$a),$a.forEach(t),yi.forEach(t),SBe=i(c),Cf=n(c,"H2",{class:!0});var O$e=s(Cf);eC=n(O$e,"A",{id:!0,class:!0,href:!0});var M4t=s(eC);c6e=n(M4t,"SPAN",{});var E4t=s(c6e);m($8.$$.fragment,E4t),E4t.forEach(t),M4t.forEach(t),O9r=i(O$e),f6e=n(O$e,"SPAN",{});var C4t=s(f6e);V9r=r(C4t,"FlaxAutoModelForMultipleChoice"),C4t.forEach(t),O$e.forEach(t),RBe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(I8.$$.fragment,xi),X9r=i(xi),wf=n(xi,"P",{});var RJ=s(wf);z9r=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),EH=n(RJ,"A",{href:!0});var w4t=s(EH);Q9r=r(w4t,"from_pretrained()"),w4t.forEach(t),W9r=r(RJ," class method or the "),CH=n(RJ,"A",{href:!0});var A4t=s(CH);H9r=r(A4t,"from_config()"),A4t.forEach(t),U9r=r(RJ,` class
method.`),RJ.forEach(t),J9r=i(xi),q8=n(xi,"P",{});var V$e=s(q8);Y9r=r(V$e,"This class cannot be instantiated directly using "),m6e=n(V$e,"CODE",{});var y4t=s(m6e);K9r=r(y4t,"__init__()"),y4t.forEach(t),Z9r=r(V$e," (throws an error)."),V$e.forEach(t),exr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(N8.$$.fragment,ki),oxr=i(ki),g6e=n(ki,"P",{});var L4t=s(g6e);rxr=r(L4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),L4t.forEach(t),txr=i(ki),Af=n(ki,"P",{});var BJ=s(Af);axr=r(BJ,`Note:
Loading a model from its configuration file does `),h6e=n(BJ,"STRONG",{});var x4t=s(h6e);nxr=r(x4t,"not"),x4t.forEach(t),sxr=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(BJ,"A",{href:!0});var k4t=s(wH);lxr=r(k4t,"from_pretrained()"),k4t.forEach(t),ixr=r(BJ," to load the model weights."),BJ.forEach(t),dxr=i(ki),p6e=n(ki,"P",{});var S4t=s(p6e);cxr=r(S4t,"Examples:"),S4t.forEach(t),fxr=i(ki),m(j8.$$.fragment,ki),ki.forEach(t),mxr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(D8.$$.fragment,Ia),gxr=i(Ia),_6e=n(Ia,"P",{});var R4t=s(_6e);hxr=r(R4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),R4t.forEach(t),pxr=i(Ia),qn=n(Ia,"P",{});var f3=s(qn);_xr=r(f3,"The model class to instantiate is selected based on the "),u6e=n(f3,"CODE",{});var B4t=s(u6e);uxr=r(B4t,"model_type"),B4t.forEach(t),bxr=r(f3,` property of the config object (either
passed as an argument or loaded from `),b6e=n(f3,"CODE",{});var P4t=s(b6e);Fxr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),vxr=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(f3,"CODE",{});var $4t=s(F6e);Txr=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),Mxr=r(f3,":"),f3.forEach(t),Exr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);oC=n(Vo,"LI",{});var ASe=s(oC);v6e=n(ASe,"STRONG",{});var I4t=s(v6e);Cxr=r(I4t,"albert"),I4t.forEach(t),wxr=r(ASe," \u2014 "),AH=n(ASe,"A",{href:!0});var q4t=s(AH);Axr=r(q4t,"FlaxAlbertForMultipleChoice"),q4t.forEach(t),yxr=r(ASe," (ALBERT model)"),ASe.forEach(t),Lxr=i(Vo),rC=n(Vo,"LI",{});var ySe=s(rC);T6e=n(ySe,"STRONG",{});var N4t=s(T6e);xxr=r(N4t,"bert"),N4t.forEach(t),kxr=r(ySe," \u2014 "),yH=n(ySe,"A",{href:!0});var j4t=s(yH);Sxr=r(j4t,"FlaxBertForMultipleChoice"),j4t.forEach(t),Rxr=r(ySe," (BERT model)"),ySe.forEach(t),Bxr=i(Vo),tC=n(Vo,"LI",{});var LSe=s(tC);M6e=n(LSe,"STRONG",{});var D4t=s(M6e);Pxr=r(D4t,"big_bird"),D4t.forEach(t),$xr=r(LSe," \u2014 "),LH=n(LSe,"A",{href:!0});var G4t=s(LH);Ixr=r(G4t,"FlaxBigBirdForMultipleChoice"),G4t.forEach(t),qxr=r(LSe," (BigBird model)"),LSe.forEach(t),Nxr=i(Vo),aC=n(Vo,"LI",{});var xSe=s(aC);E6e=n(xSe,"STRONG",{});var O4t=s(E6e);jxr=r(O4t,"distilbert"),O4t.forEach(t),Dxr=r(xSe," \u2014 "),xH=n(xSe,"A",{href:!0});var V4t=s(xH);Gxr=r(V4t,"FlaxDistilBertForMultipleChoice"),V4t.forEach(t),Oxr=r(xSe," (DistilBERT model)"),xSe.forEach(t),Vxr=i(Vo),nC=n(Vo,"LI",{});var kSe=s(nC);C6e=n(kSe,"STRONG",{});var X4t=s(C6e);Xxr=r(X4t,"electra"),X4t.forEach(t),zxr=r(kSe," \u2014 "),kH=n(kSe,"A",{href:!0});var z4t=s(kH);Qxr=r(z4t,"FlaxElectraForMultipleChoice"),z4t.forEach(t),Wxr=r(kSe," (ELECTRA model)"),kSe.forEach(t),Hxr=i(Vo),sC=n(Vo,"LI",{});var SSe=s(sC);w6e=n(SSe,"STRONG",{});var Q4t=s(w6e);Uxr=r(Q4t,"roberta"),Q4t.forEach(t),Jxr=r(SSe," \u2014 "),SH=n(SSe,"A",{href:!0});var W4t=s(SH);Yxr=r(W4t,"FlaxRobertaForMultipleChoice"),W4t.forEach(t),Kxr=r(SSe," (RoBERTa model)"),SSe.forEach(t),Zxr=i(Vo),lC=n(Vo,"LI",{});var RSe=s(lC);A6e=n(RSe,"STRONG",{});var H4t=s(A6e);ekr=r(H4t,"roformer"),H4t.forEach(t),okr=r(RSe," \u2014 "),RH=n(RSe,"A",{href:!0});var U4t=s(RH);rkr=r(U4t,"FlaxRoFormerForMultipleChoice"),U4t.forEach(t),tkr=r(RSe," (RoFormer model)"),RSe.forEach(t),akr=i(Vo),iC=n(Vo,"LI",{});var BSe=s(iC);y6e=n(BSe,"STRONG",{});var J4t=s(y6e);nkr=r(J4t,"xlm-roberta"),J4t.forEach(t),skr=r(BSe," \u2014 "),BH=n(BSe,"A",{href:!0});var Y4t=s(BH);lkr=r(Y4t,"FlaxXLMRobertaForMultipleChoice"),Y4t.forEach(t),ikr=r(BSe," (XLM-RoBERTa model)"),BSe.forEach(t),Vo.forEach(t),dkr=i(Ia),L6e=n(Ia,"P",{});var K4t=s(L6e);ckr=r(K4t,"Examples:"),K4t.forEach(t),fkr=i(Ia),m(G8.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),BBe=i(c),yf=n(c,"H2",{class:!0});var X$e=s(yf);dC=n(X$e,"A",{id:!0,class:!0,href:!0});var Z4t=s(dC);x6e=n(Z4t,"SPAN",{});var eEt=s(x6e);m(O8.$$.fragment,eEt),eEt.forEach(t),Z4t.forEach(t),mkr=i(X$e),k6e=n(X$e,"SPAN",{});var oEt=s(k6e);gkr=r(oEt,"FlaxAutoModelForNextSentencePrediction"),oEt.forEach(t),X$e.forEach(t),PBe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(V8.$$.fragment,Si),hkr=i(Si),Lf=n(Si,"P",{});var PJ=s(Lf);pkr=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),PH=n(PJ,"A",{href:!0});var rEt=s(PH);_kr=r(rEt,"from_pretrained()"),rEt.forEach(t),ukr=r(PJ," class method or the "),$H=n(PJ,"A",{href:!0});var tEt=s($H);bkr=r(tEt,"from_config()"),tEt.forEach(t),Fkr=r(PJ,` class
method.`),PJ.forEach(t),vkr=i(Si),X8=n(Si,"P",{});var z$e=s(X8);Tkr=r(z$e,"This class cannot be instantiated directly using "),S6e=n(z$e,"CODE",{});var aEt=s(S6e);Mkr=r(aEt,"__init__()"),aEt.forEach(t),Ekr=r(z$e," (throws an error)."),z$e.forEach(t),Ckr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(z8.$$.fragment,Ri),wkr=i(Ri),R6e=n(Ri,"P",{});var nEt=s(R6e);Akr=r(nEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),nEt.forEach(t),ykr=i(Ri),xf=n(Ri,"P",{});var $J=s(xf);Lkr=r($J,`Note:
Loading a model from its configuration file does `),B6e=n($J,"STRONG",{});var sEt=s(B6e);xkr=r(sEt,"not"),sEt.forEach(t),kkr=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n($J,"A",{href:!0});var lEt=s(IH);Skr=r(lEt,"from_pretrained()"),lEt.forEach(t),Rkr=r($J," to load the model weights."),$J.forEach(t),Bkr=i(Ri),P6e=n(Ri,"P",{});var iEt=s(P6e);Pkr=r(iEt,"Examples:"),iEt.forEach(t),$kr=i(Ri),m(Q8.$$.fragment,Ri),Ri.forEach(t),Ikr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(W8.$$.fragment,qa),qkr=i(qa),$6e=n(qa,"P",{});var dEt=s($6e);Nkr=r(dEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dEt.forEach(t),jkr=i(qa),Nn=n(qa,"P",{});var m3=s(Nn);Dkr=r(m3,"The model class to instantiate is selected based on the "),I6e=n(m3,"CODE",{});var cEt=s(I6e);Gkr=r(cEt,"model_type"),cEt.forEach(t),Okr=r(m3,` property of the config object (either
passed as an argument or loaded from `),q6e=n(m3,"CODE",{});var fEt=s(q6e);Vkr=r(fEt,"pretrained_model_name_or_path"),fEt.forEach(t),Xkr=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N6e=n(m3,"CODE",{});var mEt=s(N6e);zkr=r(mEt,"pretrained_model_name_or_path"),mEt.forEach(t),Qkr=r(m3,":"),m3.forEach(t),Wkr=i(qa),j6e=n(qa,"UL",{});var gEt=s(j6e);cC=n(gEt,"LI",{});var PSe=s(cC);D6e=n(PSe,"STRONG",{});var hEt=s(D6e);Hkr=r(hEt,"bert"),hEt.forEach(t),Ukr=r(PSe," \u2014 "),qH=n(PSe,"A",{href:!0});var pEt=s(qH);Jkr=r(pEt,"FlaxBertForNextSentencePrediction"),pEt.forEach(t),Ykr=r(PSe," (BERT model)"),PSe.forEach(t),gEt.forEach(t),Kkr=i(qa),G6e=n(qa,"P",{});var _Et=s(G6e);Zkr=r(_Et,"Examples:"),_Et.forEach(t),eSr=i(qa),m(H8.$$.fragment,qa),qa.forEach(t),Si.forEach(t),$Be=i(c),kf=n(c,"H2",{class:!0});var Q$e=s(kf);fC=n(Q$e,"A",{id:!0,class:!0,href:!0});var uEt=s(fC);O6e=n(uEt,"SPAN",{});var bEt=s(O6e);m(U8.$$.fragment,bEt),bEt.forEach(t),uEt.forEach(t),oSr=i(Q$e),V6e=n(Q$e,"SPAN",{});var FEt=s(V6e);rSr=r(FEt,"FlaxAutoModelForImageClassification"),FEt.forEach(t),Q$e.forEach(t),IBe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(J8.$$.fragment,Bi),tSr=i(Bi),Sf=n(Bi,"P",{});var IJ=s(Sf);aSr=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NH=n(IJ,"A",{href:!0});var vEt=s(NH);nSr=r(vEt,"from_pretrained()"),vEt.forEach(t),sSr=r(IJ," class method or the "),jH=n(IJ,"A",{href:!0});var TEt=s(jH);lSr=r(TEt,"from_config()"),TEt.forEach(t),iSr=r(IJ,` class
method.`),IJ.forEach(t),dSr=i(Bi),Y8=n(Bi,"P",{});var W$e=s(Y8);cSr=r(W$e,"This class cannot be instantiated directly using "),X6e=n(W$e,"CODE",{});var MEt=s(X6e);fSr=r(MEt,"__init__()"),MEt.forEach(t),mSr=r(W$e," (throws an error)."),W$e.forEach(t),gSr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(K8.$$.fragment,Pi),hSr=i(Pi),z6e=n(Pi,"P",{});var EEt=s(z6e);pSr=r(EEt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),EEt.forEach(t),_Sr=i(Pi),Rf=n(Pi,"P",{});var qJ=s(Rf);uSr=r(qJ,`Note:
Loading a model from its configuration file does `),Q6e=n(qJ,"STRONG",{});var CEt=s(Q6e);bSr=r(CEt,"not"),CEt.forEach(t),FSr=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DH=n(qJ,"A",{href:!0});var wEt=s(DH);vSr=r(wEt,"from_pretrained()"),wEt.forEach(t),TSr=r(qJ," to load the model weights."),qJ.forEach(t),MSr=i(Pi),W6e=n(Pi,"P",{});var AEt=s(W6e);ESr=r(AEt,"Examples:"),AEt.forEach(t),CSr=i(Pi),m(Z8.$$.fragment,Pi),Pi.forEach(t),wSr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(e7.$$.fragment,Na),ASr=i(Na),H6e=n(Na,"P",{});var yEt=s(H6e);ySr=r(yEt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),yEt.forEach(t),LSr=i(Na),jn=n(Na,"P",{});var g3=s(jn);xSr=r(g3,"The model class to instantiate is selected based on the "),U6e=n(g3,"CODE",{});var LEt=s(U6e);kSr=r(LEt,"model_type"),LEt.forEach(t),SSr=r(g3,` property of the config object (either
passed as an argument or loaded from `),J6e=n(g3,"CODE",{});var xEt=s(J6e);RSr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),BSr=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y6e=n(g3,"CODE",{});var kEt=s(Y6e);PSr=r(kEt,"pretrained_model_name_or_path"),kEt.forEach(t),$Sr=r(g3,":"),g3.forEach(t),ISr=i(Na),o7=n(Na,"UL",{});var H$e=s(o7);mC=n(H$e,"LI",{});var $Se=s(mC);K6e=n($Se,"STRONG",{});var SEt=s(K6e);qSr=r(SEt,"beit"),SEt.forEach(t),NSr=r($Se," \u2014 "),GH=n($Se,"A",{href:!0});var REt=s(GH);jSr=r(REt,"FlaxBeitForImageClassification"),REt.forEach(t),DSr=r($Se," (BEiT model)"),$Se.forEach(t),GSr=i(H$e),gC=n(H$e,"LI",{});var ISe=s(gC);Z6e=n(ISe,"STRONG",{});var BEt=s(Z6e);OSr=r(BEt,"vit"),BEt.forEach(t),VSr=r(ISe," \u2014 "),OH=n(ISe,"A",{href:!0});var PEt=s(OH);XSr=r(PEt,"FlaxViTForImageClassification"),PEt.forEach(t),zSr=r(ISe," (ViT model)"),ISe.forEach(t),H$e.forEach(t),QSr=i(Na),eTe=n(Na,"P",{});var $Et=s(eTe);WSr=r($Et,"Examples:"),$Et.forEach(t),HSr=i(Na),m(r7.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),qBe=i(c),Bf=n(c,"H2",{class:!0});var U$e=s(Bf);hC=n(U$e,"A",{id:!0,class:!0,href:!0});var IEt=s(hC);oTe=n(IEt,"SPAN",{});var qEt=s(oTe);m(t7.$$.fragment,qEt),qEt.forEach(t),IEt.forEach(t),USr=i(U$e),rTe=n(U$e,"SPAN",{});var NEt=s(rTe);JSr=r(NEt,"FlaxAutoModelForVision2Seq"),NEt.forEach(t),U$e.forEach(t),NBe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(a7.$$.fragment,$i),YSr=i($i),Pf=n($i,"P",{});var NJ=s(Pf);KSr=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),VH=n(NJ,"A",{href:!0});var jEt=s(VH);ZSr=r(jEt,"from_pretrained()"),jEt.forEach(t),eRr=r(NJ," class method or the "),XH=n(NJ,"A",{href:!0});var DEt=s(XH);oRr=r(DEt,"from_config()"),DEt.forEach(t),rRr=r(NJ,` class
method.`),NJ.forEach(t),tRr=i($i),n7=n($i,"P",{});var J$e=s(n7);aRr=r(J$e,"This class cannot be instantiated directly using "),tTe=n(J$e,"CODE",{});var GEt=s(tTe);nRr=r(GEt,"__init__()"),GEt.forEach(t),sRr=r(J$e," (throws an error)."),J$e.forEach(t),lRr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(s7.$$.fragment,Ii),iRr=i(Ii),aTe=n(Ii,"P",{});var OEt=s(aTe);dRr=r(OEt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),OEt.forEach(t),cRr=i(Ii),$f=n(Ii,"P",{});var jJ=s($f);fRr=r(jJ,`Note:
Loading a model from its configuration file does `),nTe=n(jJ,"STRONG",{});var VEt=s(nTe);mRr=r(VEt,"not"),VEt.forEach(t),gRr=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(jJ,"A",{href:!0});var XEt=s(zH);hRr=r(XEt,"from_pretrained()"),XEt.forEach(t),pRr=r(jJ," to load the model weights."),jJ.forEach(t),_Rr=i(Ii),sTe=n(Ii,"P",{});var zEt=s(sTe);uRr=r(zEt,"Examples:"),zEt.forEach(t),bRr=i(Ii),m(l7.$$.fragment,Ii),Ii.forEach(t),FRr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(i7.$$.fragment,ja),vRr=i(ja),lTe=n(ja,"P",{});var QEt=s(lTe);TRr=r(QEt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QEt.forEach(t),MRr=i(ja),Dn=n(ja,"P",{});var h3=s(Dn);ERr=r(h3,"The model class to instantiate is selected based on the "),iTe=n(h3,"CODE",{});var WEt=s(iTe);CRr=r(WEt,"model_type"),WEt.forEach(t),wRr=r(h3,` property of the config object (either
passed as an argument or loaded from `),dTe=n(h3,"CODE",{});var HEt=s(dTe);ARr=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),yRr=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cTe=n(h3,"CODE",{});var UEt=s(cTe);LRr=r(UEt,"pretrained_model_name_or_path"),UEt.forEach(t),xRr=r(h3,":"),h3.forEach(t),kRr=i(ja),fTe=n(ja,"UL",{});var JEt=s(fTe);pC=n(JEt,"LI",{});var qSe=s(pC);mTe=n(qSe,"STRONG",{});var YEt=s(mTe);SRr=r(YEt,"vision-encoder-decoder"),YEt.forEach(t),RRr=r(qSe," \u2014 "),QH=n(qSe,"A",{href:!0});var KEt=s(QH);BRr=r(KEt,"FlaxVisionEncoderDecoderModel"),KEt.forEach(t),PRr=r(qSe," (Vision Encoder decoder model)"),qSe.forEach(t),JEt.forEach(t),$Rr=i(ja),gTe=n(ja,"P",{});var ZEt=s(gTe);IRr=r(ZEt,"Examples:"),ZEt.forEach(t),qRr=i(ja),m(d7.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(dCt)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoConfig"),d(Vn,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoModel"),d(Xn,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertModel"),d(Of,"id","extending-the-auto-classes"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Xf,"id","transformers.AutoConfig"),d(Xf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(h9,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(p9,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertConfig"),d(_9,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartConfig"),d(u9,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitConfig"),d(b9,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertConfig"),d(F9,"href","/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(v9,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdConfig"),d(T9,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(M9,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(E9,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(C9,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertConfig"),d(w9,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineConfig"),d(A9,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPConfig"),d(y9,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertConfig"),d(L9,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextConfig"),d(x9,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLConfig"),d(k9,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(S9,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(R9,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaConfig"),d(B9,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(P9,"href","/docs/transformers/pr_16551/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d($9,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTConfig"),d(I9,"href","/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrConfig"),d(q9,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertConfig"),d(N9,"href","/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRConfig"),d(j9,"href","/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTConfig"),d(D9,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraConfig"),d(G9,"href","/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(O9,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertConfig"),d(V9,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetConfig"),d(X9,"href","/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTConfig"),d(z9,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelConfig"),d(Q9,"href","/docs/transformers/pr_16551/en/model_doc/glpn#transformers.GLPNConfig"),d(W9,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Config"),d(H9,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(U9,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJConfig"),d(J9,"href","/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertConfig"),d(Y9,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertConfig"),d(K9,"href","/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Z9,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ex,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(ox,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDConfig"),d(rx,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerConfig"),d(tx,"href","/docs/transformers/pr_16551/en/model_doc/luke#transformers.LukeConfig"),d(ax,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertConfig"),d(nx,"href","/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Config"),d(sx,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianConfig"),d(lx,"href","/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(ix,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartConfig"),d(dx,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(cx,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(fx,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetConfig"),d(mx,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Config"),d(gx,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(hx,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(px,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusConfig"),d(_x,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverConfig"),d(ux,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartConfig"),d(bx,"href","/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Fx,"href","/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(vx,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Tx,"href","/docs/transformers/pr_16551/en/model_doc/rag#transformers.RagConfig"),d(Mx,"href","/docs/transformers/pr_16551/en/model_doc/realm#transformers.RealmConfig"),d(Ex,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerConfig"),d(Cx,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertConfig"),d(wx,"href","/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetConfig"),d(Ax,"href","/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertConfig"),d(yx,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaConfig"),d(Lx,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerConfig"),d(xx,"href","/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerConfig"),d(kx,"href","/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWConfig"),d(Sx,"href","/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDConfig"),d(Rx,"href","/docs/transformers/pr_16551/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Bx,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Px,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d($x,"href","/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterConfig"),d(Ix,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(qx,"href","/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinConfig"),d(Nx,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Config"),d(jx,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasConfig"),d(Dx,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Gx,"href","/docs/transformers/pr_16551/en/model_doc/trocr#transformers.TrOCRConfig"),d(Ox,"href","/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(Vx,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Xx,"href","/docs/transformers/pr_16551/en/model_doc/van#transformers.VanConfig"),d(zx,"href","/docs/transformers/pr_16551/en/model_doc/vilt#transformers.ViltConfig"),d(Qx,"href","/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Wx,"href","/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(Hx,"href","/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Ux,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTConfig"),d(Jx,"href","/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Yx,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(Kx,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMConfig"),d(Zx,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMConfig"),d(ek,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMConfig"),d(ok,"href","/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(rk,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(tk,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(ak,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetConfig"),d(nk,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Ig,"class","docstring"),d(Qo,"class","docstring"),d(qg,"id","transformers.AutoTokenizer"),d(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(sk,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(lk,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertTokenizer"),d(ik,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(dk,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartTokenizer"),d(ck,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartTokenizerFast"),d(fk,"href","/docs/transformers/pr_16551/en/model_doc/barthez#transformers.BarthezTokenizer"),d(mk,"href","/docs/transformers/pr_16551/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(gk,"href","/docs/transformers/pr_16551/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(hk,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertTokenizer"),d(pk,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertTokenizerFast"),d(_k,"href","/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(uk,"href","/docs/transformers/pr_16551/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(bk,"href","/docs/transformers/pr_16551/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Fk,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(vk,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Mk,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ek,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Ck,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(wk,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Ak,"href","/docs/transformers/pr_16551/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(yk,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Lk,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(xk,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineTokenizer"),d(kk,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPTokenizer"),d(Sk,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Rk,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Bk,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Pk,"href","/docs/transformers/pr_16551/en/model_doc/cpm#transformers.CpmTokenizer"),d($k,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Ik,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaTokenizer"),d(qk,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(jk,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(Dk,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Ok,"href","/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Vk,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraTokenizer"),d(Xk,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(zk,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Qk,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetTokenizer"),d(Wk,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Hk,"href","/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(Uk,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Jk,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Yk,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(Kk,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Zk,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(eS,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(oS,"href","/docs/transformers/pr_16551/en/model_doc/herbert#transformers.HerbertTokenizer"),d(rS,"href","/docs/transformers/pr_16551/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(tS,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(aS,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaTokenizer"),d(nS,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(sS,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(lS,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(iS,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(dS,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(cS,"href","/docs/transformers/pr_16551/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(fS,"href","/docs/transformers/pr_16551/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(mS,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDTokenizer"),d(gS,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDTokenizerFast"),d(hS,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerTokenizer"),d(pS,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(_S,"href","/docs/transformers/pr_16551/en/model_doc/luke#transformers.LukeTokenizer"),d(uS,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(bS,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(FS,"href","/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(vS,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianTokenizer"),d(TS,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartTokenizer"),d(MS,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(ES,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(CS,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(wS,"href","/docs/transformers/pr_16551/en/model_doc/mluke#transformers.MLukeTokenizer"),d(AS,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(yS,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(LS,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(xS,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(kS,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.T5Tokenizer"),d(SS,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.T5TokenizerFast"),d(RS,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(BS,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(PS,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusTokenizer"),d($S,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(IS,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(qS,"href","/docs/transformers/pr_16551/en/model_doc/phobert#transformers.PhobertTokenizer"),d(NS,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartTokenizer"),d(jS,"href","/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(DS,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertTokenizer"),d(GS,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertTokenizerFast"),d(OS,"href","/docs/transformers/pr_16551/en/model_doc/rag#transformers.RagTokenizer"),d(VS,"href","/docs/transformers/pr_16551/en/model_doc/realm#transformers.RealmTokenizer"),d(XS,"href","/docs/transformers/pr_16551/en/model_doc/realm#transformers.RealmTokenizerFast"),d(zS,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerTokenizer"),d(QS,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(WS,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertTokenizer"),d(HS,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(US,"href","/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(JS,"href","/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(YS,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaTokenizer"),d(KS,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(ZS,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(eR,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(oR,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(rR,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(tR,"href","/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterTokenizer"),d(aR,"href","/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(nR,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(sR,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(lR,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.T5Tokenizer"),d(iR,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.T5TokenizerFast"),d(dR,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasTokenizer"),d(cR,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(fR,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(mR,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(gR,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMTokenizer"),d(hR,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(pR,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMTokenizer"),d(_R,"href","/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(uR,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(bR,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(FR,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(vR,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(mh,"class","docstring"),d(Wo,"class","docstring"),d(gh,"id","transformers.AutoFeatureExtractor"),d(gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(TR,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(MR,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(wR,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(AR,"href","/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(LR,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(xR,"href","/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(kR,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(SR,"href","/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(RR,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(BR,"href","/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(PR,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d($R,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(IR,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(qR,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(NR,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(jR,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring"),d(Bh,"class","docstring"),d(Ho,"class","docstring"),d(Ph,"id","transformers.AutoProcessor"),d(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ph,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(DR,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(GR,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPProcessor"),d(OR,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(VR,"href","/docs/transformers/pr_16551/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(XR,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(zR,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(QR,"href","/docs/transformers/pr_16551/en/model_doc/trocr#transformers.TrOCRProcessor"),d(WR,"href","/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(HR,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring"),d(Xh,"class","docstring"),d(Uo,"class","docstring"),d(zh,"id","transformers.AutoModel"),d(zh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(UR,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JR,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YR,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring"),d(KR,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertModel"),d(ZR,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartModel"),d(eB,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitModel"),d(oB,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertModel"),d(rB,"href","/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(tB,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdModel"),d(aB,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(nB,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(sB,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(lB,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertModel"),d(iB,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineModel"),d(dB,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.CLIPModel"),d(cB,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertModel"),d(fB,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextModel"),d(mB,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLModel"),d(gB,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(hB,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(pB,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaModel"),d(_B,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(uB,"href","/docs/transformers/pr_16551/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(bB,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTModel"),d(FB,"href","/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrModel"),d(vB,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertModel"),d(TB,"href","/docs/transformers/pr_16551/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(MB,"href","/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTModel"),d(EB,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraModel"),d(CB,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertModel"),d(wB,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetModel"),d(AB,"href","/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTModel"),d(yB,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelModel"),d(LB,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelBaseModel"),d(xB,"href","/docs/transformers/pr_16551/en/model_doc/glpn#transformers.GLPNModel"),d(kB,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2Model"),d(SB,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(RB,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJModel"),d(BB,"href","/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertModel"),d(PB,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertModel"),d($B,"href","/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(IB,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(qB,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(NB,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDModel"),d(jB,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerModel"),d(DB,"href","/docs/transformers/pr_16551/en/model_doc/luke#transformers.LukeModel"),d(GB,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertModel"),d(OB,"href","/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100Model"),d(VB,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianModel"),d(XB,"href","/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerModel"),d(zB,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartModel"),d(QB,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(WB,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertModel"),d(HB,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetModel"),d(UB,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5Model"),d(JB,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerModel"),d(YB,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(KB,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusModel"),d(ZB,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverModel"),d(eP,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartModel"),d(oP,"href","/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerModel"),d(rP,"href","/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(tP,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertModel"),d(aP,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerModel"),d(nP,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertModel"),d(sP,"href","/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetModel"),d(lP,"href","/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertModel"),d(iP,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaModel"),d(dP,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerModel"),d(cP,"href","/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerModel"),d(fP,"href","/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWModel"),d(mP,"href","/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDModel"),d(gP,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(hP,"href","/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterModel"),d(pP,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(_P,"href","/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinModel"),d(uP,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5Model"),d(bP,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasModel"),d(FP,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(vP,"href","/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechModel"),d(TP,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(MP,"href","/docs/transformers/pr_16551/en/model_doc/van#transformers.VanModel"),d(EP,"href","/docs/transformers/pr_16551/en/model_doc/vilt#transformers.ViltModel"),d(CP,"href","/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(wP,"href","/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertModel"),d(AP,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTModel"),d(yP,"href","/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(LP,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(xP,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMModel"),d(kP,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMModel"),d(SP,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMModel"),d(RP,"href","/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(BP,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(PP,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d($P,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetModel"),d(IP,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring"),d(Jo,"class","docstring"),d(k_,"id","transformers.AutoModelForPreTraining"),d(k_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(qP,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NP,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jP,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring"),d(DP,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForPreTraining"),d(GP,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(OP,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForPreTraining"),d(VP,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(XP,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(zP,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(QP,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(WP,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(HP,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(UP,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(JP,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForPreTraining"),d(YP,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(KP,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForPreTraining"),d(ZP,"href","/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(e$,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(o$,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(r$,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(t$,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(a$,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(n$,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(s$,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(l$,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(i$,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(d$,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(c$,"href","/docs/transformers/pr_16551/en/model_doc/retribert#transformers.RetriBertModel"),d(f$,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(m$,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(g$,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(h$,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(p$,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(_$,"href","/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(u$,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(b$,"href","/docs/transformers/pr_16551/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(F$,"href","/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(v$,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(T$,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(M$,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(E$,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(C$,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring"),d(Yo,"class","docstring"),d(uu,"id","transformers.AutoModelForCausalLM"),d(uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(w$,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(A$,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(y$,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring"),d(L$,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForCausalLM"),d(x$,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertLMHeadModel"),d(k$,"href","/docs/transformers/pr_16551/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(S$,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(R$,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(B$,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(P$,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d($$,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(I$,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(q$,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(N$,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForCausalLM"),d(j$,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(D$,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(G$,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(O$,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianForCausalLM"),d(V$,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForCausalLM"),d(X$,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(z$,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(Q$,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(W$,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(H$,"href","/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(U$,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(J$,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(Y$,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(K$,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(Z$,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(eI,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(oI,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(rI,"href","/docs/transformers/pr_16551/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(tI,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(aI,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(nI,"href","/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(sI,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(lI,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(iI,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring"),d(Ko,"class","docstring"),d(e1,"id","transformers.AutoModelForMaskedLM"),d(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(e1,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(dI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring"),d(mI,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(gI,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(hI,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForMaskedLM"),d(pI,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(_I,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(uI,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(bI,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(FI,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(vI,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(TI,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(MI,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(EI,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(CI,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(wI,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(AI,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(yI,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(LI,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(xI,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(SI,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(RI,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(BI,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(PI,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d($I,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(II,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(qI,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(NI,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(jI,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(DI,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(GI,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(OI,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(VI,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(XI,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(zI,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring"),d(Zo,"class","docstring"),d(q1,"id","transformers.AutoModelForSeq2SeqLM"),d(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(QI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HI,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring"),d(UI,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(JI,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(YI,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(KI,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(ZI,"href","/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(eq,"href","/docs/transformers/pr_16551/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(rq,"href","/docs/transformers/pr_16551/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(tq,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.MarianMTModel"),d(aq,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(nq,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(sq,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(lq,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(iq,"href","/docs/transformers/pr_16551/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(dq,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(cq,"href","/docs/transformers/pr_16551/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring"),d(er,"class","docstring"),d(o5,"id","transformers.AutoModelForSequenceClassification"),d(o5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o5,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(fq,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mq,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gq,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring"),d(hq,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(pq,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForSequenceClassification"),d(_q,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForSequenceClassification"),d(uq,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(bq,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(Fq,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(vq,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Tq,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Mq,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Eq,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Cq,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(wq,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Aq,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(yq,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Lq,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(xq,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(kq,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Sq,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Rq,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Bq,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(Pq,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d($q,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(Iq,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(qq,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForSequenceClassification"),d(Nq,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(jq,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(Dq,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(zq,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_16551/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring"),d(or,"class","docstring"),d(U5,"id","transformers.AutoModelForMultipleChoice"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(sN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring"),d(dN,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(cN,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForMultipleChoice"),d(fN,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(mN,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(gN,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(hN,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(pN,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(_N,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(uN,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(bN,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(FN,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(vN,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(TN,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(MN,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(EN,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(CN,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(wN,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(yN,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d($N,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(wb,"id","transformers.AutoModelForNextSentencePrediction"),d(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(wb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(qN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring"),d(DN,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(GN,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(ON,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(VN,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(XN,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring"),d(tr,"class","docstring"),d(Rb,"id","transformers.AutoModelForTokenClassification"),d(Rb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(zN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WN,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring"),d(HN,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(UN,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForTokenClassification"),d(JN,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(YN,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(KN,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForTokenClassification"),d(ZN,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(ej,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(oj,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(rj,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(tj,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(aj,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(nj,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(sj,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(lj,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(ij,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(dj,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(cj,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(fj,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(mj,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(gj,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(hj,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(_j,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(uj,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(bj,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(vj,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(wj,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring"),d(ar,"class","docstring"),d(g2,"id","transformers.AutoModelForQuestionAnswering"),d(g2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g2,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(yj,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lj,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xj,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring"),d(kj,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Sj,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Rj,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Bj,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Pj,"href","/docs/transformers/pr_16551/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d($j,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Ij,"href","/docs/transformers/pr_16551/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Nj,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(jj,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Xj,"href","/docs/transformers/pr_16551/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16551/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16551/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(Kj,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16551/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16551/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16551/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16551/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16551/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16551/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(fD,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(hD,"href","/docs/transformers/pr_16551/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(eF,"id","transformers.AutoModelForTableQuestionAnswering"),d(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eF,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(pD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_D,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring"),d(bD,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring"),d(sr,"class","docstring"),d(tF,"id","transformers.AutoModelForImageClassification"),d(tF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tF,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(FD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring"),d(MD,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitForImageClassification"),d(ED,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(CD,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForImageClassification"),d(wD,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(AD,"href","/docs/transformers/pr_16551/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(yD,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(LD,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(xD,"href","/docs/transformers/pr_16551/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(kD,"href","/docs/transformers/pr_16551/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(SD,"href","/docs/transformers/pr_16551/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(RD,"href","/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(BD,"href","/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinForImageClassification"),d(PD,"href","/docs/transformers/pr_16551/en/model_doc/van#transformers.VanForImageClassification"),d($D,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring"),d(lr,"class","docstring"),d(hF,"id","transformers.AutoModelForVision2Seq"),d(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hF,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(ID,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ND,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring"),d(jD,"href","/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring"),d(ir,"class","docstring"),d(uF,"id","transformers.AutoModelForAudioClassification"),d(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uF,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(DD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring"),d(VD,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(QD,"href","/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(HD,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(UD,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(JD,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring"),d(dr,"class","docstring"),d(yF,"id","transformers.AutoModelForAudioFrameClassification"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(YD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZD,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring"),d(eG,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(oG,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(rG,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(tG,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring"),d(cr,"class","docstring"),d(BF,"id","transformers.AutoModelForCTC"),d(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BF,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(aG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring"),d(lG,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(iG,"href","/docs/transformers/pr_16551/en/model_doc/hubert#transformers.HubertForCTC"),d(dG,"href","/docs/transformers/pr_16551/en/model_doc/sew#transformers.SEWForCTC"),d(cG,"href","/docs/transformers/pr_16551/en/model_doc/sew-d#transformers.SEWDForCTC"),d(fG,"href","/docs/transformers/pr_16551/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(mG,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(gG,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(hG,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring"),d(fr,"class","docstring"),d(VF,"id","transformers.AutoModelForSpeechSeq2Seq"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(pG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_G,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring"),d(bG,"href","/docs/transformers/pr_16551/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(FG,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring"),d(mr,"class","docstring"),d(WF,"id","transformers.AutoModelForAudioXVector"),d(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(WF,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(vG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring"),d(EG,"href","/docs/transformers/pr_16551/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(CG,"href","/docs/transformers/pr_16551/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(wG,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(AG,"href","/docs/transformers/pr_16551/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring"),d(gr,"class","docstring"),d(ZF,"id","transformers.AutoModelForMaskedImageModeling"),d(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZF,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(yG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring"),d(kG,"href","/docs/transformers/pr_16551/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(SG,"href","/docs/transformers/pr_16551/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(RG,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring"),d(hr,"class","docstring"),d(av,"id","transformers.AutoModelForObjectDetection"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(BG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($G,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring"),d(IG,"href","/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring"),d(pr,"class","docstring"),d(lv,"id","transformers.AutoModelForImageSegmentation"),d(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lv,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(qG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring"),d(DG,"href","/docs/transformers/pr_16551/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring"),d(_r,"class","docstring"),d(cv,"id","transformers.AutoModelForSemanticSegmentation"),d(cv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cv,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(GG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring"),d(XG,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(zG,"href","/docs/transformers/pr_16551/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(QG,"href","/docs/transformers/pr_16551/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring"),d(ur,"class","docstring"),d(pv,"id","transformers.AutoModelForInstanceSegmentation"),d(pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pv,"href","#transformers.AutoModelForInstanceSegmentation"),d(fc,"class","relative group"),d(WG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring"),d(JG,"href","/docs/transformers/pr_16551/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring"),d(br,"class","docstring"),d(bv,"id","transformers.TFAutoModel"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.TFAutoModel"),d(hc,"class","relative group"),d(YG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(KG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ZG,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring"),d(eO,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertModel"),d(oO,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartModel"),d(rO,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertModel"),d(tO,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(aO,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(nO,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertModel"),d(sO,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.TFCLIPModel"),d(lO,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertModel"),d(iO,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.TFConvNextModel"),d(dO,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLModel"),d(cO,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaModel"),d(fO,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(mO,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(gO,"href","/docs/transformers/pr_16551/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(hO,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraModel"),d(pO,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(_O,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelModel"),d(uO,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(bO,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2Model"),d(FO,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJModel"),d(vO,"href","/docs/transformers/pr_16551/en/model_doc/hubert#transformers.TFHubertModel"),d(TO,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(MO,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.TFLEDModel"),d(EO,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerModel"),d(CO,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.TFLxmertModel"),d(wO,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.TFMarianModel"),d(AO,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.TFMBartModel"),d(yO,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(LO,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetModel"),d(xO,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.TFMT5Model"),d(kO,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(SO,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.TFPegasusModel"),d(RO,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertModel"),d(BO,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaModel"),d(PO,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerModel"),d($O,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(IO,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5Model"),d(qO,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasModel"),d(NO,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(jO,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.TFViTModel"),d(DO,"href","/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(GO,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(OO,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMModel"),d(VO,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(XO,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(Fr,"class","docstring"),d(i6,"id","transformers.TFAutoModelForPreTraining"),d(i6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i6,"href","#transformers.TFAutoModelForPreTraining"),d(uc,"class","relative group"),d(zO,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QO,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WO,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring"),d(HO,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(UO,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(JO,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForPreTraining"),d(YO,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(KO,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ZO,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(eV,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(oV,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(rV,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(tV,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(aV,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(nV,"href","/docs/transformers/pr_16551/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(sV,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(lV,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(iV,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(dV,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(cV,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(fV,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(mV,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(gV,"href","/docs/transformers/pr_16551/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(hV,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(pV,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(_V,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(vr,"class","docstring"),d(R6,"id","transformers.TFAutoModelForCausalLM"),d(R6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R6,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(uV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring"),d(vV,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(TV,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(MV,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(EV,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(CV,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(wV,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(AV,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(yV,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(LV,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(xV,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(kV,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(SV,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Tr,"class","docstring"),d(z6,"id","transformers.TFAutoModelForImageClassification"),d(z6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(z6,"href","#transformers.TFAutoModelForImageClassification"),d(Ec,"class","relative group"),d(RV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring"),d($V,"href","/docs/transformers/pr_16551/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(IV,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Mr,"class","docstring"),d(H6,"id","transformers.TFAutoModelForMaskedLM"),d(H6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H6,"href","#transformers.TFAutoModelForMaskedLM"),d(Ac,"class","relative group"),d(qV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jV,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring"),d(DV,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(GV,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(VV,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(XV,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(zV,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(QV,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(WV,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(HV,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(UV,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(JV,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(YV,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(KV,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(ZV,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(eX,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(oX,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(rX,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(tX,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(aX,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(nX,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Er,"class","docstring"),d(pT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(pT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(xc,"class","relative group"),d(sX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring"),d(dX,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cX,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fX,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mX,"href","/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gX,"href","/docs/transformers/pr_16551/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hX,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.TFMarianMTModel"),d(pX,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_X,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uX,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring"),d(Cr,"class","docstring"),d(AT,"id","transformers.TFAutoModelForSequenceClassification"),d(AT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AT,"href","#transformers.TFAutoModelForSequenceClassification"),d(Rc,"class","relative group"),d(FX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring"),d(MX,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(EX,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(CX,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(wX,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(AX,"href","/docs/transformers/pr_16551/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(yX,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(LX,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(xX,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(kX,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(SX,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(RX,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(BX,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(PX,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d($X,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(IX,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(qX,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(NX,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(jX,"href","/docs/transformers/pr_16551/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(DX,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(GX,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(OX,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(VX,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(XX,"href","/docs/transformers/pr_16551/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(zX,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(QX,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(WX,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(vo,"class","docstring"),d(wr,"class","docstring"),d(ZT,"id","transformers.TFAutoModelForMultipleChoice"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.TFAutoModelForMultipleChoice"),d($c,"class","relative group"),d(HX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JX,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring"),d(YX,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(KX,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(ZX,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(ez,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(oz,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(rz,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(tz,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(az,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(nz,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(sz,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(lz,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(iz,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(dz,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(cz,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(fz,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(mz,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(gz,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring"),d(Ar,"class","docstring"),d(uM,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(uM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uM,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(hz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_z,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring"),d(uz,"href","/docs/transformers/pr_16551/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring"),d(yr,"class","docstring"),d(FM,"id","transformers.TFAutoModelForTokenClassification"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForTokenClassification"),d(Gc,"class","relative group"),d(bz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Fz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring"),d(Tz,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Cz,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Az,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(yz,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(xz,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(kz,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(Sz,"href","/docs/transformers/pr_16551/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(Rz,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(Pz,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d($z,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(Iz,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(qz,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(Nz,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(jz,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(Dz,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring"),d(Lr,"class","docstring"),d(DM,"id","transformers.TFAutoModelForQuestionAnswering"),d(DM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(DM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Gz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vz,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring"),d(Xz,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(zz,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(Qz,"href","/docs/transformers/pr_16551/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(Wz,"href","/docs/transformers/pr_16551/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(Hz,"href","/docs/transformers/pr_16551/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(Uz,"href","/docs/transformers/pr_16551/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(Jz,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(Yz,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(Kz,"href","/docs/transformers/pr_16551/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(Zz,"href","/docs/transformers/pr_16551/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(eQ,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(oQ,"href","/docs/transformers/pr_16551/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(rQ,"href","/docs/transformers/pr_16551/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(tQ,"href","/docs/transformers/pr_16551/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(aQ,"href","/docs/transformers/pr_16551/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(nQ,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(sQ,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(lQ,"href","/docs/transformers/pr_16551/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(iQ,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(dQ,"href","/docs/transformers/pr_16551/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring"),d(xr,"class","docstring"),d(l4,"id","transformers.TFAutoModelForVision2Seq"),d(l4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l4,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(cQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring"),d(gQ,"href","/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(d4,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d4,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Jc,"class","relative group"),d(hQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_Q,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring"),d(uQ,"href","/docs/transformers/pr_16551/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring"),d(Sr,"class","docstring"),d(f4,"id","transformers.FlaxAutoModel"),d(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f4,"href","#transformers.FlaxAutoModel"),d(Zc,"class","relative group"),d(bQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring"),d(TQ,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertModel"),d(MQ,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartModel"),d(EQ,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.FlaxBeitModel"),d(CQ,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertModel"),d(wQ,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(AQ,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(yQ,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(LQ,"href","/docs/transformers/pr_16551/en/model_doc/clip#transformers.FlaxCLIPModel"),d(xQ,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(kQ,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraModel"),d(SQ,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(RQ,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(BQ,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(PQ,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.FlaxMarianModel"),d($Q,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartModel"),d(IQ,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5Model"),d(qQ,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(NQ,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(jQ,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(DQ,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5Model"),d(GQ,"href","/docs/transformers/pr_16551/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(OQ,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.FlaxViTModel"),d(VQ,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(XQ,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(zQ,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring"),d(Rr,"class","docstring"),d(q4,"id","transformers.FlaxAutoModelForCausalLM"),d(q4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q4,"href","#transformers.FlaxAutoModelForCausalLM"),d(rf,"class","relative group"),d(QQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HQ,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring"),d(UQ,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(JQ,"href","/docs/transformers/pr_16551/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(YQ,"href","/docs/transformers/pr_16551/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(KQ,"href","/docs/transformers/pr_16551/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(ZQ,"href","/docs/transformers/pr_16551/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Br,"class","docstring"),d(V4,"id","transformers.FlaxAutoModelForPreTraining"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.FlaxAutoModelForPreTraining"),d(nf,"class","relative group"),d(eW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring"),d(tW,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(aW,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(nW,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(sW,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(lW,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(iW,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(dW,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(cW,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(fW,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(mW,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(gW,"href","/docs/transformers/pr_16551/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(hW,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d(Pr,"class","docstring"),d(rE,"id","transformers.FlaxAutoModelForMaskedLM"),d(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rE,"href","#transformers.FlaxAutoModelForMaskedLM"),d(df,"class","relative group"),d(pW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring"),d(bW,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(FW,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(vW,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(TW,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(MW,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(EW,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(CW,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(wW,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(AW,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(yW,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring"),d($r,"class","docstring"),d(gE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(mf,"class","relative group"),d(LW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring"),d(SW,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(RW,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(BW,"href","/docs/transformers/pr_16551/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(PW,"href","/docs/transformers/pr_16551/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d($W,"href","/docs/transformers/pr_16551/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(IW,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(qW,"href","/docs/transformers/pr_16551/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(NW,"href","/docs/transformers/pr_16551/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_16551/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring"),d(Ir,"class","docstring"),d(EE,"id","transformers.FlaxAutoModelForSequenceClassification"),d(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EE,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(pf,"class","relative group"),d(DW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring"),d(VW,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(XW,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(zW,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(QW,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(WW,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(HW,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(UW,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(JW,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(YW,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(KW,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(qr,"class","docstring"),d(PE,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(PE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(bf,"class","relative group"),d(ZW,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring"),d(rH,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(tH,"href","/docs/transformers/pr_16551/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(aH,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(nH,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(sH,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(lH,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(iH,"href","/docs/transformers/pr_16551/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(dH,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(cH,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(fH,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring"),d(Nr,"class","docstring"),d(zE,"id","transformers.FlaxAutoModelForTokenClassification"),d(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(mH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring"),d(pH,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(_H,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(uH,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(bH,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(FH,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(vH,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(TH,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(MH,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(jr,"class","docstring"),d(eC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Cf,"class","relative group"),d(EH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring"),d(AH,"href","/docs/transformers/pr_16551/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(yH,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(LH,"href","/docs/transformers/pr_16551/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(xH,"href","/docs/transformers/pr_16551/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(kH,"href","/docs/transformers/pr_16551/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(SH,"href","/docs/transformers/pr_16551/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(RH,"href","/docs/transformers/pr_16551/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(BH,"href","/docs/transformers/pr_16551/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(Dr,"class","docstring"),d(dC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(dC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(yf,"class","relative group"),d(PH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($H,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring"),d(qH,"href","/docs/transformers/pr_16551/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(fC,"id","transformers.FlaxAutoModelForImageClassification"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.FlaxAutoModelForImageClassification"),d(kf,"class","relative group"),d(NH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring"),d(GH,"href","/docs/transformers/pr_16551/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(OH,"href","/docs/transformers/pr_16551/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring"),d(Or,"class","docstring"),d(hC,"id","transformers.FlaxAutoModelForVision2Seq"),d(hC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Bf,"class","relative group"),d(VH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zH,"href","/docs/transformers/pr_16551/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring"),d(QH,"href","/docs/transformers/pr_16551/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring"),d(Vr,"class","docstring")},m(c,u){e(document.head,Z),b(c,io,u),b(c,de,u),e(de,Ce),e(Ce,lo),g(me,lo,null),e(de,Me),e(de,Xo),e(Xo,qi),b(c,Nf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,p3),e(fa,jf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,Gn),e(Gn,_3),e(co,On),e(co,Vn),e(Vn,u3),e(co,Gi),e(co,Xn),e(Xn,b3),e(co,Oi),b(c,Df,u),g(Da,c,u),b(c,fo,u),b(c,_e,u),e(_e,i9),e(_e,Vi),e(Vi,d9),e(_e,c9),b(c,zo,u),b(c,Ga,u),e(Ga,f9),e(Ga,Gf),e(Gf,m9),e(Ga,Y$e),b(c,NSe,u),b(c,Xi,u),e(Xi,Of),e(Of,DJ),g(F3,DJ,null),e(Xi,K$e),e(Xi,GJ),e(GJ,Z$e),b(c,jSe,u),b(c,zn,u),e(zn,eIe),e(zn,OJ),e(OJ,oIe),e(zn,rIe),e(zn,VJ),e(VJ,tIe),e(zn,aIe),b(c,DSe,u),g(v3,c,u),b(c,GSe,u),b(c,g9,u),e(g9,nIe),b(c,OSe,u),g(Vf,c,u),b(c,VSe,u),b(c,zi,u),e(zi,Xf),e(Xf,XJ),g(T3,XJ,null),e(zi,sIe),e(zi,zJ),e(zJ,lIe),b(c,XSe,u),b(c,Qo,u),g(M3,Qo,null),e(Qo,iIe),e(Qo,E3),e(E3,dIe),e(E3,h9),e(h9,cIe),e(E3,fIe),e(Qo,mIe),e(Qo,C3),e(C3,gIe),e(C3,QJ),e(QJ,hIe),e(C3,pIe),e(Qo,_Ie),e(Qo,mo),g(w3,mo,null),e(mo,uIe),e(mo,WJ),e(WJ,bIe),e(mo,FIe),e(mo,Qi),e(Qi,vIe),e(Qi,HJ),e(HJ,TIe),e(Qi,MIe),e(Qi,UJ),e(UJ,EIe),e(Qi,CIe),e(mo,wIe),e(mo,F),e(F,zf),e(zf,JJ),e(JJ,AIe),e(zf,yIe),e(zf,p9),e(p9,LIe),e(zf,xIe),e(F,kIe),e(F,Qf),e(Qf,YJ),e(YJ,SIe),e(Qf,RIe),e(Qf,_9),e(_9,BIe),e(Qf,PIe),e(F,$Ie),e(F,Wf),e(Wf,KJ),e(KJ,IIe),e(Wf,qIe),e(Wf,u9),e(u9,NIe),e(Wf,jIe),e(F,DIe),e(F,Hf),e(Hf,ZJ),e(ZJ,GIe),e(Hf,OIe),e(Hf,b9),e(b9,VIe),e(Hf,XIe),e(F,zIe),e(F,Uf),e(Uf,eY),e(eY,QIe),e(Uf,WIe),e(Uf,F9),e(F9,HIe),e(Uf,UIe),e(F,JIe),e(F,Jf),e(Jf,oY),e(oY,YIe),e(Jf,KIe),e(Jf,v9),e(v9,ZIe),e(Jf,eqe),e(F,oqe),e(F,Yf),e(Yf,rY),e(rY,rqe),e(Yf,tqe),e(Yf,T9),e(T9,aqe),e(Yf,nqe),e(F,sqe),e(F,Kf),e(Kf,tY),e(tY,lqe),e(Kf,iqe),e(Kf,M9),e(M9,dqe),e(Kf,cqe),e(F,fqe),e(F,Zf),e(Zf,aY),e(aY,mqe),e(Zf,gqe),e(Zf,E9),e(E9,hqe),e(Zf,pqe),e(F,_qe),e(F,em),e(em,nY),e(nY,uqe),e(em,bqe),e(em,C9),e(C9,Fqe),e(em,vqe),e(F,Tqe),e(F,om),e(om,sY),e(sY,Mqe),e(om,Eqe),e(om,w9),e(w9,Cqe),e(om,wqe),e(F,Aqe),e(F,rm),e(rm,lY),e(lY,yqe),e(rm,Lqe),e(rm,A9),e(A9,xqe),e(rm,kqe),e(F,Sqe),e(F,tm),e(tm,iY),e(iY,Rqe),e(tm,Bqe),e(tm,y9),e(y9,Pqe),e(tm,$qe),e(F,Iqe),e(F,am),e(am,dY),e(dY,qqe),e(am,Nqe),e(am,L9),e(L9,jqe),e(am,Dqe),e(F,Gqe),e(F,nm),e(nm,cY),e(cY,Oqe),e(nm,Vqe),e(nm,x9),e(x9,Xqe),e(nm,zqe),e(F,Qqe),e(F,sm),e(sm,fY),e(fY,Wqe),e(sm,Hqe),e(sm,k9),e(k9,Uqe),e(sm,Jqe),e(F,Yqe),e(F,lm),e(lm,mY),e(mY,Kqe),e(lm,Zqe),e(lm,S9),e(S9,eNe),e(lm,oNe),e(F,rNe),e(F,im),e(im,gY),e(gY,tNe),e(im,aNe),e(im,R9),e(R9,nNe),e(im,sNe),e(F,lNe),e(F,dm),e(dm,hY),e(hY,iNe),e(dm,dNe),e(dm,B9),e(B9,cNe),e(dm,fNe),e(F,mNe),e(F,cm),e(cm,pY),e(pY,gNe),e(cm,hNe),e(cm,P9),e(P9,pNe),e(cm,_Ne),e(F,uNe),e(F,fm),e(fm,_Y),e(_Y,bNe),e(fm,FNe),e(fm,$9),e($9,vNe),e(fm,TNe),e(F,MNe),e(F,mm),e(mm,uY),e(uY,ENe),e(mm,CNe),e(mm,I9),e(I9,wNe),e(mm,ANe),e(F,yNe),e(F,gm),e(gm,bY),e(bY,LNe),e(gm,xNe),e(gm,q9),e(q9,kNe),e(gm,SNe),e(F,RNe),e(F,hm),e(hm,FY),e(FY,BNe),e(hm,PNe),e(hm,N9),e(N9,$Ne),e(hm,INe),e(F,qNe),e(F,pm),e(pm,vY),e(vY,NNe),e(pm,jNe),e(pm,j9),e(j9,DNe),e(pm,GNe),e(F,ONe),e(F,_m),e(_m,TY),e(TY,VNe),e(_m,XNe),e(_m,D9),e(D9,zNe),e(_m,QNe),e(F,WNe),e(F,um),e(um,MY),e(MY,HNe),e(um,UNe),e(um,G9),e(G9,JNe),e(um,YNe),e(F,KNe),e(F,bm),e(bm,EY),e(EY,ZNe),e(bm,eje),e(bm,O9),e(O9,oje),e(bm,rje),e(F,tje),e(F,Fm),e(Fm,CY),e(CY,aje),e(Fm,nje),e(Fm,V9),e(V9,sje),e(Fm,lje),e(F,ije),e(F,vm),e(vm,wY),e(wY,dje),e(vm,cje),e(vm,X9),e(X9,fje),e(vm,mje),e(F,gje),e(F,Tm),e(Tm,AY),e(AY,hje),e(Tm,pje),e(Tm,z9),e(z9,_je),e(Tm,uje),e(F,bje),e(F,Mm),e(Mm,yY),e(yY,Fje),e(Mm,vje),e(Mm,Q9),e(Q9,Tje),e(Mm,Mje),e(F,Eje),e(F,Em),e(Em,LY),e(LY,Cje),e(Em,wje),e(Em,W9),e(W9,Aje),e(Em,yje),e(F,Lje),e(F,Cm),e(Cm,xY),e(xY,xje),e(Cm,kje),e(Cm,H9),e(H9,Sje),e(Cm,Rje),e(F,Bje),e(F,wm),e(wm,kY),e(kY,Pje),e(wm,$je),e(wm,U9),e(U9,Ije),e(wm,qje),e(F,Nje),e(F,Am),e(Am,SY),e(SY,jje),e(Am,Dje),e(Am,J9),e(J9,Gje),e(Am,Oje),e(F,Vje),e(F,ym),e(ym,RY),e(RY,Xje),e(ym,zje),e(ym,Y9),e(Y9,Qje),e(ym,Wje),e(F,Hje),e(F,Lm),e(Lm,BY),e(BY,Uje),e(Lm,Jje),e(Lm,K9),e(K9,Yje),e(Lm,Kje),e(F,Zje),e(F,xm),e(xm,PY),e(PY,eDe),e(xm,oDe),e(xm,Z9),e(Z9,rDe),e(xm,tDe),e(F,aDe),e(F,km),e(km,$Y),e($Y,nDe),e(km,sDe),e(km,ex),e(ex,lDe),e(km,iDe),e(F,dDe),e(F,Sm),e(Sm,IY),e(IY,cDe),e(Sm,fDe),e(Sm,ox),e(ox,mDe),e(Sm,gDe),e(F,hDe),e(F,Rm),e(Rm,qY),e(qY,pDe),e(Rm,_De),e(Rm,rx),e(rx,uDe),e(Rm,bDe),e(F,FDe),e(F,Bm),e(Bm,NY),e(NY,vDe),e(Bm,TDe),e(Bm,tx),e(tx,MDe),e(Bm,EDe),e(F,CDe),e(F,Pm),e(Pm,jY),e(jY,wDe),e(Pm,ADe),e(Pm,ax),e(ax,yDe),e(Pm,LDe),e(F,xDe),e(F,$m),e($m,DY),e(DY,kDe),e($m,SDe),e($m,nx),e(nx,RDe),e($m,BDe),e(F,PDe),e(F,Im),e(Im,GY),e(GY,$De),e(Im,IDe),e(Im,sx),e(sx,qDe),e(Im,NDe),e(F,jDe),e(F,qm),e(qm,OY),e(OY,DDe),e(qm,GDe),e(qm,lx),e(lx,ODe),e(qm,VDe),e(F,XDe),e(F,Nm),e(Nm,VY),e(VY,zDe),e(Nm,QDe),e(Nm,ix),e(ix,WDe),e(Nm,HDe),e(F,UDe),e(F,jm),e(jm,XY),e(XY,JDe),e(jm,YDe),e(jm,dx),e(dx,KDe),e(jm,ZDe),e(F,eGe),e(F,Dm),e(Dm,zY),e(zY,oGe),e(Dm,rGe),e(Dm,cx),e(cx,tGe),e(Dm,aGe),e(F,nGe),e(F,Gm),e(Gm,QY),e(QY,sGe),e(Gm,lGe),e(Gm,fx),e(fx,iGe),e(Gm,dGe),e(F,cGe),e(F,Om),e(Om,WY),e(WY,fGe),e(Om,mGe),e(Om,mx),e(mx,gGe),e(Om,hGe),e(F,pGe),e(F,Vm),e(Vm,HY),e(HY,_Ge),e(Vm,uGe),e(Vm,gx),e(gx,bGe),e(Vm,FGe),e(F,vGe),e(F,Xm),e(Xm,UY),e(UY,TGe),e(Xm,MGe),e(Xm,hx),e(hx,EGe),e(Xm,CGe),e(F,wGe),e(F,zm),e(zm,JY),e(JY,AGe),e(zm,yGe),e(zm,px),e(px,LGe),e(zm,xGe),e(F,kGe),e(F,Qm),e(Qm,YY),e(YY,SGe),e(Qm,RGe),e(Qm,_x),e(_x,BGe),e(Qm,PGe),e(F,$Ge),e(F,Wm),e(Wm,KY),e(KY,IGe),e(Wm,qGe),e(Wm,ux),e(ux,NGe),e(Wm,jGe),e(F,DGe),e(F,Hm),e(Hm,ZY),e(ZY,GGe),e(Hm,OGe),e(Hm,bx),e(bx,VGe),e(Hm,XGe),e(F,zGe),e(F,Um),e(Um,eK),e(eK,QGe),e(Um,WGe),e(Um,Fx),e(Fx,HGe),e(Um,UGe),e(F,JGe),e(F,Jm),e(Jm,oK),e(oK,YGe),e(Jm,KGe),e(Jm,vx),e(vx,ZGe),e(Jm,eOe),e(F,oOe),e(F,Ym),e(Ym,rK),e(rK,rOe),e(Ym,tOe),e(Ym,Tx),e(Tx,aOe),e(Ym,nOe),e(F,sOe),e(F,Km),e(Km,tK),e(tK,lOe),e(Km,iOe),e(Km,Mx),e(Mx,dOe),e(Km,cOe),e(F,fOe),e(F,Zm),e(Zm,aK),e(aK,mOe),e(Zm,gOe),e(Zm,Ex),e(Ex,hOe),e(Zm,pOe),e(F,_Oe),e(F,eg),e(eg,nK),e(nK,uOe),e(eg,bOe),e(eg,Cx),e(Cx,FOe),e(eg,vOe),e(F,TOe),e(F,og),e(og,sK),e(sK,MOe),e(og,EOe),e(og,wx),e(wx,COe),e(og,wOe),e(F,AOe),e(F,rg),e(rg,lK),e(lK,yOe),e(rg,LOe),e(rg,Ax),e(Ax,xOe),e(rg,kOe),e(F,SOe),e(F,tg),e(tg,iK),e(iK,ROe),e(tg,BOe),e(tg,yx),e(yx,POe),e(tg,$Oe),e(F,IOe),e(F,ag),e(ag,dK),e(dK,qOe),e(ag,NOe),e(ag,Lx),e(Lx,jOe),e(ag,DOe),e(F,GOe),e(F,ng),e(ng,cK),e(cK,OOe),e(ng,VOe),e(ng,xx),e(xx,XOe),e(ng,zOe),e(F,QOe),e(F,sg),e(sg,fK),e(fK,WOe),e(sg,HOe),e(sg,kx),e(kx,UOe),e(sg,JOe),e(F,YOe),e(F,lg),e(lg,mK),e(mK,KOe),e(lg,ZOe),e(lg,Sx),e(Sx,eVe),e(lg,oVe),e(F,rVe),e(F,ig),e(ig,gK),e(gK,tVe),e(ig,aVe),e(ig,Rx),e(Rx,nVe),e(ig,sVe),e(F,lVe),e(F,dg),e(dg,hK),e(hK,iVe),e(dg,dVe),e(dg,Bx),e(Bx,cVe),e(dg,fVe),e(F,mVe),e(F,cg),e(cg,pK),e(pK,gVe),e(cg,hVe),e(cg,Px),e(Px,pVe),e(cg,_Ve),e(F,uVe),e(F,fg),e(fg,_K),e(_K,bVe),e(fg,FVe),e(fg,$x),e($x,vVe),e(fg,TVe),e(F,MVe),e(F,mg),e(mg,uK),e(uK,EVe),e(mg,CVe),e(mg,Ix),e(Ix,wVe),e(mg,AVe),e(F,yVe),e(F,gg),e(gg,bK),e(bK,LVe),e(gg,xVe),e(gg,qx),e(qx,kVe),e(gg,SVe),e(F,RVe),e(F,hg),e(hg,FK),e(FK,BVe),e(hg,PVe),e(hg,Nx),e(Nx,$Ve),e(hg,IVe),e(F,qVe),e(F,pg),e(pg,vK),e(vK,NVe),e(pg,jVe),e(pg,jx),e(jx,DVe),e(pg,GVe),e(F,OVe),e(F,_g),e(_g,TK),e(TK,VVe),e(_g,XVe),e(_g,Dx),e(Dx,zVe),e(_g,QVe),e(F,WVe),e(F,ug),e(ug,MK),e(MK,HVe),e(ug,UVe),e(ug,Gx),e(Gx,JVe),e(ug,YVe),e(F,KVe),e(F,bg),e(bg,EK),e(EK,ZVe),e(bg,eXe),e(bg,Ox),e(Ox,oXe),e(bg,rXe),e(F,tXe),e(F,Fg),e(Fg,CK),e(CK,aXe),e(Fg,nXe),e(Fg,Vx),e(Vx,sXe),e(Fg,lXe),e(F,iXe),e(F,vg),e(vg,wK),e(wK,dXe),e(vg,cXe),e(vg,Xx),e(Xx,fXe),e(vg,mXe),e(F,gXe),e(F,Tg),e(Tg,AK),e(AK,hXe),e(Tg,pXe),e(Tg,zx),e(zx,_Xe),e(Tg,uXe),e(F,bXe),e(F,Mg),e(Mg,yK),e(yK,FXe),e(Mg,vXe),e(Mg,Qx),e(Qx,TXe),e(Mg,MXe),e(F,EXe),e(F,Eg),e(Eg,LK),e(LK,CXe),e(Eg,wXe),e(Eg,Wx),e(Wx,AXe),e(Eg,yXe),e(F,LXe),e(F,Cg),e(Cg,xK),e(xK,xXe),e(Cg,kXe),e(Cg,Hx),e(Hx,SXe),e(Cg,RXe),e(F,BXe),e(F,wg),e(wg,kK),e(kK,PXe),e(wg,$Xe),e(wg,Ux),e(Ux,IXe),e(wg,qXe),e(F,NXe),e(F,Ag),e(Ag,SK),e(SK,jXe),e(Ag,DXe),e(Ag,Jx),e(Jx,GXe),e(Ag,OXe),e(F,VXe),e(F,yg),e(yg,RK),e(RK,XXe),e(yg,zXe),e(yg,Yx),e(Yx,QXe),e(yg,WXe),e(F,HXe),e(F,Lg),e(Lg,BK),e(BK,UXe),e(Lg,JXe),e(Lg,Kx),e(Kx,YXe),e(Lg,KXe),e(F,ZXe),e(F,xg),e(xg,PK),e(PK,eze),e(xg,oze),e(xg,Zx),e(Zx,rze),e(xg,tze),e(F,aze),e(F,kg),e(kg,$K),e($K,nze),e(kg,sze),e(kg,ek),e(ek,lze),e(kg,ize),e(F,dze),e(F,Sg),e(Sg,IK),e(IK,cze),e(Sg,fze),e(Sg,ok),e(ok,mze),e(Sg,gze),e(F,hze),e(F,Rg),e(Rg,qK),e(qK,pze),e(Rg,_ze),e(Rg,rk),e(rk,uze),e(Rg,bze),e(F,Fze),e(F,Bg),e(Bg,NK),e(NK,vze),e(Bg,Tze),e(Bg,tk),e(tk,Mze),e(Bg,Eze),e(F,Cze),e(F,Pg),e(Pg,jK),e(jK,wze),e(Pg,Aze),e(Pg,ak),e(ak,yze),e(Pg,Lze),e(F,xze),e(F,$g),e($g,DK),e(DK,kze),e($g,Sze),e($g,nk),e(nk,Rze),e($g,Bze),e(mo,Pze),e(mo,GK),e(GK,$ze),e(mo,Ize),g(A3,mo,null),e(Qo,qze),e(Qo,Ig),g(y3,Ig,null),e(Ig,Nze),e(Ig,OK),e(OK,jze),b(c,zSe,u),b(c,Wi,u),e(Wi,qg),e(qg,VK),g(L3,VK,null),e(Wi,Dze),e(Wi,XK),e(XK,Gze),b(c,QSe,u),b(c,Wo,u),g(x3,Wo,null),e(Wo,Oze),e(Wo,k3),e(k3,Vze),e(k3,sk),e(sk,Xze),e(k3,zze),e(Wo,Qze),e(Wo,S3),e(S3,Wze),e(S3,zK),e(zK,Hze),e(S3,Uze),e(Wo,Jze),e(Wo,go),g(R3,go,null),e(go,Yze),e(go,QK),e(QK,Kze),e(go,Zze),e(go,Oa),e(Oa,eQe),e(Oa,WK),e(WK,oQe),e(Oa,rQe),e(Oa,HK),e(HK,tQe),e(Oa,aQe),e(Oa,UK),e(UK,nQe),e(Oa,sQe),e(go,lQe),e(go,C),e(C,Qn),e(Qn,JK),e(JK,iQe),e(Qn,dQe),e(Qn,lk),e(lk,cQe),e(Qn,fQe),e(Qn,ik),e(ik,mQe),e(Qn,gQe),e(C,hQe),e(C,Wn),e(Wn,YK),e(YK,pQe),e(Wn,_Qe),e(Wn,dk),e(dk,uQe),e(Wn,bQe),e(Wn,ck),e(ck,FQe),e(Wn,vQe),e(C,TQe),e(C,Hn),e(Hn,KK),e(KK,MQe),e(Hn,EQe),e(Hn,fk),e(fk,CQe),e(Hn,wQe),e(Hn,mk),e(mk,AQe),e(Hn,yQe),e(C,LQe),e(C,Ng),e(Ng,ZK),e(ZK,xQe),e(Ng,kQe),e(Ng,gk),e(gk,SQe),e(Ng,RQe),e(C,BQe),e(C,Un),e(Un,eZ),e(eZ,PQe),e(Un,$Qe),e(Un,hk),e(hk,IQe),e(Un,qQe),e(Un,pk),e(pk,NQe),e(Un,jQe),e(C,DQe),e(C,jg),e(jg,oZ),e(oZ,GQe),e(jg,OQe),e(jg,_k),e(_k,VQe),e(jg,XQe),e(C,zQe),e(C,Dg),e(Dg,rZ),e(rZ,QQe),e(Dg,WQe),e(Dg,uk),e(uk,HQe),e(Dg,UQe),e(C,JQe),e(C,Gg),e(Gg,tZ),e(tZ,YQe),e(Gg,KQe),e(Gg,bk),e(bk,ZQe),e(Gg,eWe),e(C,oWe),e(C,Jn),e(Jn,aZ),e(aZ,rWe),e(Jn,tWe),e(Jn,Fk),e(Fk,aWe),e(Jn,nWe),e(Jn,vk),e(vk,sWe),e(Jn,lWe),e(C,iWe),e(C,Yn),e(Yn,nZ),e(nZ,dWe),e(Yn,cWe),e(Yn,Tk),e(Tk,fWe),e(Yn,mWe),e(Yn,Mk),e(Mk,gWe),e(Yn,hWe),e(C,pWe),e(C,Kn),e(Kn,sZ),e(sZ,_We),e(Kn,uWe),e(Kn,Ek),e(Ek,bWe),e(Kn,FWe),e(Kn,Ck),e(Ck,vWe),e(Kn,TWe),e(C,MWe),e(C,Og),e(Og,lZ),e(lZ,EWe),e(Og,CWe),e(Og,wk),e(wk,wWe),e(Og,AWe),e(C,yWe),e(C,Vg),e(Vg,iZ),e(iZ,LWe),e(Vg,xWe),e(Vg,Ak),e(Ak,kWe),e(Vg,SWe),e(C,RWe),e(C,Zn),e(Zn,dZ),e(dZ,BWe),e(Zn,PWe),e(Zn,yk),e(yk,$We),e(Zn,IWe),e(Zn,Lk),e(Lk,qWe),e(Zn,NWe),e(C,jWe),e(C,Xg),e(Xg,cZ),e(cZ,DWe),e(Xg,GWe),e(Xg,xk),e(xk,OWe),e(Xg,VWe),e(C,XWe),e(C,es),e(es,fZ),e(fZ,zWe),e(es,QWe),e(es,kk),e(kk,WWe),e(es,HWe),e(es,Sk),e(Sk,UWe),e(es,JWe),e(C,YWe),e(C,os),e(os,mZ),e(mZ,KWe),e(os,ZWe),e(os,Rk),e(Rk,eHe),e(os,oHe),e(os,Bk),e(Bk,rHe),e(os,tHe),e(C,aHe),e(C,rs),e(rs,gZ),e(gZ,nHe),e(rs,sHe),e(rs,Pk),e(Pk,lHe),e(rs,iHe),e(rs,hZ),e(hZ,dHe),e(rs,cHe),e(C,fHe),e(C,zg),e(zg,pZ),e(pZ,mHe),e(zg,gHe),e(zg,$k),e($k,hHe),e(zg,pHe),e(C,_He),e(C,ts),e(ts,_Z),e(_Z,uHe),e(ts,bHe),e(ts,Ik),e(Ik,FHe),e(ts,vHe),e(ts,qk),e(qk,THe),e(ts,MHe),e(C,EHe),e(C,Qg),e(Qg,uZ),e(uZ,CHe),e(Qg,wHe),e(Qg,Nk),e(Nk,AHe),e(Qg,yHe),e(C,LHe),e(C,as),e(as,bZ),e(bZ,xHe),e(as,kHe),e(as,jk),e(jk,SHe),e(as,RHe),e(as,Dk),e(Dk,BHe),e(as,PHe),e(C,$He),e(C,ns),e(ns,FZ),e(FZ,IHe),e(ns,qHe),e(ns,Gk),e(Gk,NHe),e(ns,jHe),e(ns,Ok),e(Ok,DHe),e(ns,GHe),e(C,OHe),e(C,ss),e(ss,vZ),e(vZ,VHe),e(ss,XHe),e(ss,Vk),e(Vk,zHe),e(ss,QHe),e(ss,Xk),e(Xk,WHe),e(ss,HHe),e(C,UHe),e(C,Wg),e(Wg,TZ),e(TZ,JHe),e(Wg,YHe),e(Wg,zk),e(zk,KHe),e(Wg,ZHe),e(C,eUe),e(C,ls),e(ls,MZ),e(MZ,oUe),e(ls,rUe),e(ls,Qk),e(Qk,tUe),e(ls,aUe),e(ls,Wk),e(Wk,nUe),e(ls,sUe),e(C,lUe),e(C,Hg),e(Hg,EZ),e(EZ,iUe),e(Hg,dUe),e(Hg,Hk),e(Hk,cUe),e(Hg,fUe),e(C,mUe),e(C,is),e(is,CZ),e(CZ,gUe),e(is,hUe),e(is,Uk),e(Uk,pUe),e(is,_Ue),e(is,Jk),e(Jk,uUe),e(is,bUe),e(C,FUe),e(C,ds),e(ds,wZ),e(wZ,vUe),e(ds,TUe),e(ds,Yk),e(Yk,MUe),e(ds,EUe),e(ds,Kk),e(Kk,CUe),e(ds,wUe),e(C,AUe),e(C,cs),e(cs,AZ),e(AZ,yUe),e(cs,LUe),e(cs,Zk),e(Zk,xUe),e(cs,kUe),e(cs,eS),e(eS,SUe),e(cs,RUe),e(C,BUe),e(C,fs),e(fs,yZ),e(yZ,PUe),e(fs,$Ue),e(fs,oS),e(oS,IUe),e(fs,qUe),e(fs,rS),e(rS,NUe),e(fs,jUe),e(C,DUe),e(C,Ug),e(Ug,LZ),e(LZ,GUe),e(Ug,OUe),e(Ug,tS),e(tS,VUe),e(Ug,XUe),e(C,zUe),e(C,ms),e(ms,xZ),e(xZ,QUe),e(ms,WUe),e(ms,aS),e(aS,HUe),e(ms,UUe),e(ms,nS),e(nS,JUe),e(ms,YUe),e(C,KUe),e(C,gs),e(gs,kZ),e(kZ,ZUe),e(gs,eJe),e(gs,sS),e(sS,oJe),e(gs,rJe),e(gs,lS),e(lS,tJe),e(gs,aJe),e(C,nJe),e(C,hs),e(hs,SZ),e(SZ,sJe),e(hs,lJe),e(hs,iS),e(iS,iJe),e(hs,dJe),e(hs,dS),e(dS,cJe),e(hs,fJe),e(C,mJe),e(C,ps),e(ps,RZ),e(RZ,gJe),e(ps,hJe),e(ps,cS),e(cS,pJe),e(ps,_Je),e(ps,fS),e(fS,uJe),e(ps,bJe),e(C,FJe),e(C,_s),e(_s,BZ),e(BZ,vJe),e(_s,TJe),e(_s,mS),e(mS,MJe),e(_s,EJe),e(_s,gS),e(gS,CJe),e(_s,wJe),e(C,AJe),e(C,us),e(us,PZ),e(PZ,yJe),e(us,LJe),e(us,hS),e(hS,xJe),e(us,kJe),e(us,pS),e(pS,SJe),e(us,RJe),e(C,BJe),e(C,Jg),e(Jg,$Z),e($Z,PJe),e(Jg,$Je),e(Jg,_S),e(_S,IJe),e(Jg,qJe),e(C,NJe),e(C,bs),e(bs,IZ),e(IZ,jJe),e(bs,DJe),e(bs,uS),e(uS,GJe),e(bs,OJe),e(bs,bS),e(bS,VJe),e(bs,XJe),e(C,zJe),e(C,Yg),e(Yg,qZ),e(qZ,QJe),e(Yg,WJe),e(Yg,FS),e(FS,HJe),e(Yg,UJe),e(C,JJe),e(C,Kg),e(Kg,NZ),e(NZ,YJe),e(Kg,KJe),e(Kg,vS),e(vS,ZJe),e(Kg,eYe),e(C,oYe),e(C,Fs),e(Fs,jZ),e(jZ,rYe),e(Fs,tYe),e(Fs,TS),e(TS,aYe),e(Fs,nYe),e(Fs,MS),e(MS,sYe),e(Fs,lYe),e(C,iYe),e(C,vs),e(vs,DZ),e(DZ,dYe),e(vs,cYe),e(vs,ES),e(ES,fYe),e(vs,mYe),e(vs,CS),e(CS,gYe),e(vs,hYe),e(C,pYe),e(C,Zg),e(Zg,GZ),e(GZ,_Ye),e(Zg,uYe),e(Zg,wS),e(wS,bYe),e(Zg,FYe),e(C,vYe),e(C,Ts),e(Ts,OZ),e(OZ,TYe),e(Ts,MYe),e(Ts,AS),e(AS,EYe),e(Ts,CYe),e(Ts,yS),e(yS,wYe),e(Ts,AYe),e(C,yYe),e(C,Ms),e(Ms,VZ),e(VZ,LYe),e(Ms,xYe),e(Ms,LS),e(LS,kYe),e(Ms,SYe),e(Ms,xS),e(xS,RYe),e(Ms,BYe),e(C,PYe),e(C,Es),e(Es,XZ),e(XZ,$Ye),e(Es,IYe),e(Es,kS),e(kS,qYe),e(Es,NYe),e(Es,SS),e(SS,jYe),e(Es,DYe),e(C,GYe),e(C,Cs),e(Cs,zZ),e(zZ,OYe),e(Cs,VYe),e(Cs,RS),e(RS,XYe),e(Cs,zYe),e(Cs,BS),e(BS,QYe),e(Cs,WYe),e(C,HYe),e(C,ws),e(ws,QZ),e(QZ,UYe),e(ws,JYe),e(ws,PS),e(PS,YYe),e(ws,KYe),e(ws,$S),e($S,ZYe),e(ws,eKe),e(C,oKe),e(C,eh),e(eh,WZ),e(WZ,rKe),e(eh,tKe),e(eh,IS),e(IS,aKe),e(eh,nKe),e(C,sKe),e(C,oh),e(oh,HZ),e(HZ,lKe),e(oh,iKe),e(oh,qS),e(qS,dKe),e(oh,cKe),e(C,fKe),e(C,As),e(As,UZ),e(UZ,mKe),e(As,gKe),e(As,NS),e(NS,hKe),e(As,pKe),e(As,JZ),e(JZ,_Ke),e(As,uKe),e(C,bKe),e(C,rh),e(rh,YZ),e(YZ,FKe),e(rh,vKe),e(rh,jS),e(jS,TKe),e(rh,MKe),e(C,EKe),e(C,ys),e(ys,KZ),e(KZ,CKe),e(ys,wKe),e(ys,DS),e(DS,AKe),e(ys,yKe),e(ys,GS),e(GS,LKe),e(ys,xKe),e(C,kKe),e(C,th),e(th,ZZ),e(ZZ,SKe),e(th,RKe),e(th,OS),e(OS,BKe),e(th,PKe),e(C,$Ke),e(C,Ls),e(Ls,eee),e(eee,IKe),e(Ls,qKe),e(Ls,VS),e(VS,NKe),e(Ls,jKe),e(Ls,XS),e(XS,DKe),e(Ls,GKe),e(C,OKe),e(C,xs),e(xs,oee),e(oee,VKe),e(xs,XKe),e(xs,zS),e(zS,zKe),e(xs,QKe),e(xs,QS),e(QS,WKe),e(xs,HKe),e(C,UKe),e(C,ks),e(ks,ree),e(ree,JKe),e(ks,YKe),e(ks,WS),e(WS,KKe),e(ks,ZKe),e(ks,HS),e(HS,eZe),e(ks,oZe),e(C,rZe),e(C,Ss),e(Ss,tee),e(tee,tZe),e(Ss,aZe),e(Ss,US),e(US,nZe),e(Ss,sZe),e(Ss,JS),e(JS,lZe),e(Ss,iZe),e(C,dZe),e(C,Rs),e(Rs,aee),e(aee,cZe),e(Rs,fZe),e(Rs,YS),e(YS,mZe),e(Rs,gZe),e(Rs,KS),e(KS,hZe),e(Rs,pZe),e(C,_Ze),e(C,Bs),e(Bs,nee),e(nee,uZe),e(Bs,bZe),e(Bs,ZS),e(ZS,FZe),e(Bs,vZe),e(Bs,eR),e(eR,TZe),e(Bs,MZe),e(C,EZe),e(C,ah),e(ah,see),e(see,CZe),e(ah,wZe),e(ah,oR),e(oR,AZe),e(ah,yZe),e(C,LZe),e(C,nh),e(nh,lee),e(lee,xZe),e(nh,kZe),e(nh,rR),e(rR,SZe),e(nh,RZe),e(C,BZe),e(C,Ps),e(Ps,iee),e(iee,PZe),e(Ps,$Ze),e(Ps,tR),e(tR,IZe),e(Ps,qZe),e(Ps,aR),e(aR,NZe),e(Ps,jZe),e(C,DZe),e(C,$s),e($s,dee),e(dee,GZe),e($s,OZe),e($s,nR),e(nR,VZe),e($s,XZe),e($s,sR),e(sR,zZe),e($s,QZe),e(C,WZe),e(C,Is),e(Is,cee),e(cee,HZe),e(Is,UZe),e(Is,lR),e(lR,JZe),e(Is,YZe),e(Is,iR),e(iR,KZe),e(Is,ZZe),e(C,eeo),e(C,sh),e(sh,fee),e(fee,oeo),e(sh,reo),e(sh,dR),e(dR,teo),e(sh,aeo),e(C,neo),e(C,lh),e(lh,mee),e(mee,seo),e(lh,leo),e(lh,cR),e(cR,ieo),e(lh,deo),e(C,ceo),e(C,ih),e(ih,gee),e(gee,feo),e(ih,meo),e(ih,fR),e(fR,geo),e(ih,heo),e(C,peo),e(C,dh),e(dh,hee),e(hee,_eo),e(dh,ueo),e(dh,mR),e(mR,beo),e(dh,Feo),e(C,veo),e(C,qs),e(qs,pee),e(pee,Teo),e(qs,Meo),e(qs,gR),e(gR,Eeo),e(qs,Ceo),e(qs,hR),e(hR,weo),e(qs,Aeo),e(C,yeo),e(C,ch),e(ch,_ee),e(_ee,Leo),e(ch,xeo),e(ch,pR),e(pR,keo),e(ch,Seo),e(C,Reo),e(C,fh),e(fh,uee),e(uee,Beo),e(fh,Peo),e(fh,_R),e(_R,$eo),e(fh,Ieo),e(C,qeo),e(C,Ns),e(Ns,bee),e(bee,Neo),e(Ns,jeo),e(Ns,uR),e(uR,Deo),e(Ns,Geo),e(Ns,bR),e(bR,Oeo),e(Ns,Veo),e(C,Xeo),e(C,js),e(js,Fee),e(Fee,zeo),e(js,Qeo),e(js,FR),e(FR,Weo),e(js,Heo),e(js,vR),e(vR,Ueo),e(js,Jeo),e(go,Yeo),e(go,vee),e(vee,Keo),e(go,Zeo),g(B3,go,null),e(Wo,eoo),e(Wo,mh),g(P3,mh,null),e(mh,ooo),e(mh,Tee),e(Tee,roo),b(c,WSe,u),b(c,Hi,u),e(Hi,gh),e(gh,Mee),g($3,Mee,null),e(Hi,too),e(Hi,Eee),e(Eee,aoo),b(c,HSe,u),b(c,Ho,u),g(I3,Ho,null),e(Ho,noo),e(Ho,q3),e(q3,soo),e(q3,TR),e(TR,loo),e(q3,ioo),e(Ho,doo),e(Ho,N3),e(N3,coo),e(N3,Cee),e(Cee,foo),e(N3,moo),e(Ho,goo),e(Ho,$e),g(j3,$e,null),e($e,hoo),e($e,wee),e(wee,poo),e($e,_oo),e($e,Va),e(Va,uoo),e(Va,Aee),e(Aee,boo),e(Va,Foo),e(Va,yee),e(yee,voo),e(Va,Too),e(Va,Lee),e(Lee,Moo),e(Va,Eoo),e($e,Coo),e($e,te),e(te,hh),e(hh,xee),e(xee,woo),e(hh,Aoo),e(hh,MR),e(MR,yoo),e(hh,Loo),e(te,xoo),e(te,ph),e(ph,kee),e(kee,koo),e(ph,Soo),e(ph,ER),e(ER,Roo),e(ph,Boo),e(te,Poo),e(te,_h),e(_h,See),e(See,$oo),e(_h,Ioo),e(_h,CR),e(CR,qoo),e(_h,Noo),e(te,joo),e(te,uh),e(uh,Ree),e(Ree,Doo),e(uh,Goo),e(uh,wR),e(wR,Ooo),e(uh,Voo),e(te,Xoo),e(te,bh),e(bh,Bee),e(Bee,zoo),e(bh,Qoo),e(bh,AR),e(AR,Woo),e(bh,Hoo),e(te,Uoo),e(te,Fh),e(Fh,Pee),e(Pee,Joo),e(Fh,Yoo),e(Fh,yR),e(yR,Koo),e(Fh,Zoo),e(te,ero),e(te,vh),e(vh,$ee),e($ee,oro),e(vh,rro),e(vh,LR),e(LR,tro),e(vh,aro),e(te,nro),e(te,Th),e(Th,Iee),e(Iee,sro),e(Th,lro),e(Th,xR),e(xR,iro),e(Th,dro),e(te,cro),e(te,Mh),e(Mh,qee),e(qee,fro),e(Mh,mro),e(Mh,kR),e(kR,gro),e(Mh,hro),e(te,pro),e(te,Eh),e(Eh,Nee),e(Nee,_ro),e(Eh,uro),e(Eh,SR),e(SR,bro),e(Eh,Fro),e(te,vro),e(te,Ch),e(Ch,jee),e(jee,Tro),e(Ch,Mro),e(Ch,RR),e(RR,Ero),e(Ch,Cro),e(te,wro),e(te,wh),e(wh,Dee),e(Dee,Aro),e(wh,yro),e(wh,BR),e(BR,Lro),e(wh,xro),e(te,kro),e(te,Ah),e(Ah,Gee),e(Gee,Sro),e(Ah,Rro),e(Ah,PR),e(PR,Bro),e(Ah,Pro),e(te,$ro),e(te,yh),e(yh,Oee),e(Oee,Iro),e(yh,qro),e(yh,$R),e($R,Nro),e(yh,jro),e(te,Dro),e(te,Lh),e(Lh,Vee),e(Vee,Gro),e(Lh,Oro),e(Lh,IR),e(IR,Vro),e(Lh,Xro),e(te,zro),e(te,xh),e(xh,Xee),e(Xee,Qro),e(xh,Wro),e(xh,qR),e(qR,Hro),e(xh,Uro),e(te,Jro),e(te,kh),e(kh,zee),e(zee,Yro),e(kh,Kro),e(kh,NR),e(NR,Zro),e(kh,eto),e(te,oto),e(te,Sh),e(Sh,Qee),e(Qee,rto),e(Sh,tto),e(Sh,jR),e(jR,ato),e(Sh,nto),e($e,sto),g(Rh,$e,null),e($e,lto),e($e,Wee),e(Wee,ito),e($e,dto),g(D3,$e,null),e(Ho,cto),e(Ho,Bh),g(G3,Bh,null),e(Bh,fto),e(Bh,Hee),e(Hee,mto),b(c,USe,u),b(c,Ui,u),e(Ui,Ph),e(Ph,Uee),g(O3,Uee,null),e(Ui,gto),e(Ui,Jee),e(Jee,hto),b(c,JSe,u),b(c,Uo,u),g(V3,Uo,null),e(Uo,pto),e(Uo,X3),e(X3,_to),e(X3,DR),e(DR,uto),e(X3,bto),e(Uo,Fto),e(Uo,z3),e(z3,vto),e(z3,Yee),e(Yee,Tto),e(z3,Mto),e(Uo,Eto),e(Uo,Ie),g(Q3,Ie,null),e(Ie,Cto),e(Ie,Kee),e(Kee,wto),e(Ie,Ato),e(Ie,Ji),e(Ji,yto),e(Ji,Zee),e(Zee,Lto),e(Ji,xto),e(Ji,eoe),e(eoe,kto),e(Ji,Sto),e(Ie,Rto),e(Ie,ke),e(ke,$h),e($h,ooe),e(ooe,Bto),e($h,Pto),e($h,GR),e(GR,$to),e($h,Ito),e(ke,qto),e(ke,Ih),e(Ih,roe),e(roe,Nto),e(Ih,jto),e(Ih,OR),e(OR,Dto),e(Ih,Gto),e(ke,Oto),e(ke,qh),e(qh,toe),e(toe,Vto),e(qh,Xto),e(qh,VR),e(VR,zto),e(qh,Qto),e(ke,Wto),e(ke,Nh),e(Nh,aoe),e(aoe,Hto),e(Nh,Uto),e(Nh,XR),e(XR,Jto),e(Nh,Yto),e(ke,Kto),e(ke,jh),e(jh,noe),e(noe,Zto),e(jh,eao),e(jh,zR),e(zR,oao),e(jh,rao),e(ke,tao),e(ke,Dh),e(Dh,soe),e(soe,aao),e(Dh,nao),e(Dh,QR),e(QR,sao),e(Dh,lao),e(ke,iao),e(ke,Gh),e(Gh,loe),e(loe,dao),e(Gh,cao),e(Gh,WR),e(WR,fao),e(Gh,mao),e(ke,gao),e(ke,Oh),e(Oh,ioe),e(ioe,hao),e(Oh,pao),e(Oh,HR),e(HR,_ao),e(Oh,uao),e(Ie,bao),g(Vh,Ie,null),e(Ie,Fao),e(Ie,doe),e(doe,vao),e(Ie,Tao),g(W3,Ie,null),e(Uo,Mao),e(Uo,Xh),g(H3,Xh,null),e(Xh,Eao),e(Xh,coe),e(coe,Cao),b(c,YSe,u),b(c,Yi,u),e(Yi,zh),e(zh,foe),g(U3,foe,null),e(Yi,wao),e(Yi,moe),e(moe,Aao),b(c,KSe,u),b(c,Jo,u),g(J3,Jo,null),e(Jo,yao),e(Jo,Ki),e(Ki,Lao),e(Ki,UR),e(UR,xao),e(Ki,kao),e(Ki,JR),e(JR,Sao),e(Ki,Rao),e(Jo,Bao),e(Jo,Y3),e(Y3,Pao),e(Y3,goe),e(goe,$ao),e(Y3,Iao),e(Jo,qao),e(Jo,Xr),g(K3,Xr,null),e(Xr,Nao),e(Xr,hoe),e(hoe,jao),e(Xr,Dao),e(Xr,Zi),e(Zi,Gao),e(Zi,poe),e(poe,Oao),e(Zi,Vao),e(Zi,YR),e(YR,Xao),e(Zi,zao),e(Xr,Qao),e(Xr,_oe),e(_oe,Wao),e(Xr,Hao),g(Z3,Xr,null),e(Jo,Uao),e(Jo,qe),g(ew,qe,null),e(qe,Jao),e(qe,uoe),e(uoe,Yao),e(qe,Kao),e(qe,Xa),e(Xa,Zao),e(Xa,boe),e(boe,eno),e(Xa,ono),e(Xa,Foe),e(Foe,rno),e(Xa,tno),e(Xa,voe),e(voe,ano),e(Xa,nno),e(qe,sno),e(qe,T),e(T,Qh),e(Qh,Toe),e(Toe,lno),e(Qh,ino),e(Qh,KR),e(KR,dno),e(Qh,cno),e(T,fno),e(T,Wh),e(Wh,Moe),e(Moe,mno),e(Wh,gno),e(Wh,ZR),e(ZR,hno),e(Wh,pno),e(T,_no),e(T,Hh),e(Hh,Eoe),e(Eoe,uno),e(Hh,bno),e(Hh,eB),e(eB,Fno),e(Hh,vno),e(T,Tno),e(T,Uh),e(Uh,Coe),e(Coe,Mno),e(Uh,Eno),e(Uh,oB),e(oB,Cno),e(Uh,wno),e(T,Ano),e(T,Jh),e(Jh,woe),e(woe,yno),e(Jh,Lno),e(Jh,rB),e(rB,xno),e(Jh,kno),e(T,Sno),e(T,Yh),e(Yh,Aoe),e(Aoe,Rno),e(Yh,Bno),e(Yh,tB),e(tB,Pno),e(Yh,$no),e(T,Ino),e(T,Kh),e(Kh,yoe),e(yoe,qno),e(Kh,Nno),e(Kh,aB),e(aB,jno),e(Kh,Dno),e(T,Gno),e(T,Zh),e(Zh,Loe),e(Loe,Ono),e(Zh,Vno),e(Zh,nB),e(nB,Xno),e(Zh,zno),e(T,Qno),e(T,ep),e(ep,xoe),e(xoe,Wno),e(ep,Hno),e(ep,sB),e(sB,Uno),e(ep,Jno),e(T,Yno),e(T,op),e(op,koe),e(koe,Kno),e(op,Zno),e(op,lB),e(lB,eso),e(op,oso),e(T,rso),e(T,rp),e(rp,Soe),e(Soe,tso),e(rp,aso),e(rp,iB),e(iB,nso),e(rp,sso),e(T,lso),e(T,tp),e(tp,Roe),e(Roe,iso),e(tp,dso),e(tp,dB),e(dB,cso),e(tp,fso),e(T,mso),e(T,ap),e(ap,Boe),e(Boe,gso),e(ap,hso),e(ap,cB),e(cB,pso),e(ap,_so),e(T,uso),e(T,np),e(np,Poe),e(Poe,bso),e(np,Fso),e(np,fB),e(fB,vso),e(np,Tso),e(T,Mso),e(T,sp),e(sp,$oe),e($oe,Eso),e(sp,Cso),e(sp,mB),e(mB,wso),e(sp,Aso),e(T,yso),e(T,lp),e(lp,Ioe),e(Ioe,Lso),e(lp,xso),e(lp,gB),e(gB,kso),e(lp,Sso),e(T,Rso),e(T,ip),e(ip,qoe),e(qoe,Bso),e(ip,Pso),e(ip,hB),e(hB,$so),e(ip,Iso),e(T,qso),e(T,dp),e(dp,Noe),e(Noe,Nso),e(dp,jso),e(dp,pB),e(pB,Dso),e(dp,Gso),e(T,Oso),e(T,cp),e(cp,joe),e(joe,Vso),e(cp,Xso),e(cp,_B),e(_B,zso),e(cp,Qso),e(T,Wso),e(T,fp),e(fp,Doe),e(Doe,Hso),e(fp,Uso),e(fp,uB),e(uB,Jso),e(fp,Yso),e(T,Kso),e(T,mp),e(mp,Goe),e(Goe,Zso),e(mp,elo),e(mp,bB),e(bB,olo),e(mp,rlo),e(T,tlo),e(T,gp),e(gp,Ooe),e(Ooe,alo),e(gp,nlo),e(gp,FB),e(FB,slo),e(gp,llo),e(T,ilo),e(T,hp),e(hp,Voe),e(Voe,dlo),e(hp,clo),e(hp,vB),e(vB,flo),e(hp,mlo),e(T,glo),e(T,pp),e(pp,Xoe),e(Xoe,hlo),e(pp,plo),e(pp,TB),e(TB,_lo),e(pp,ulo),e(T,blo),e(T,_p),e(_p,zoe),e(zoe,Flo),e(_p,vlo),e(_p,MB),e(MB,Tlo),e(_p,Mlo),e(T,Elo),e(T,up),e(up,Qoe),e(Qoe,Clo),e(up,wlo),e(up,EB),e(EB,Alo),e(up,ylo),e(T,Llo),e(T,bp),e(bp,Woe),e(Woe,xlo),e(bp,klo),e(bp,CB),e(CB,Slo),e(bp,Rlo),e(T,Blo),e(T,Fp),e(Fp,Hoe),e(Hoe,Plo),e(Fp,$lo),e(Fp,wB),e(wB,Ilo),e(Fp,qlo),e(T,Nlo),e(T,vp),e(vp,Uoe),e(Uoe,jlo),e(vp,Dlo),e(vp,AB),e(AB,Glo),e(vp,Olo),e(T,Vlo),e(T,Ds),e(Ds,Joe),e(Joe,Xlo),e(Ds,zlo),e(Ds,yB),e(yB,Qlo),e(Ds,Wlo),e(Ds,LB),e(LB,Hlo),e(Ds,Ulo),e(T,Jlo),e(T,Tp),e(Tp,Yoe),e(Yoe,Ylo),e(Tp,Klo),e(Tp,xB),e(xB,Zlo),e(Tp,eio),e(T,oio),e(T,Mp),e(Mp,Koe),e(Koe,rio),e(Mp,tio),e(Mp,kB),e(kB,aio),e(Mp,nio),e(T,sio),e(T,Ep),e(Ep,Zoe),e(Zoe,lio),e(Ep,iio),e(Ep,SB),e(SB,dio),e(Ep,cio),e(T,fio),e(T,Cp),e(Cp,ere),e(ere,mio),e(Cp,gio),e(Cp,RB),e(RB,hio),e(Cp,pio),e(T,_io),e(T,wp),e(wp,ore),e(ore,uio),e(wp,bio),e(wp,BB),e(BB,Fio),e(wp,vio),e(T,Tio),e(T,Ap),e(Ap,rre),e(rre,Mio),e(Ap,Eio),e(Ap,PB),e(PB,Cio),e(Ap,wio),e(T,Aio),e(T,yp),e(yp,tre),e(tre,yio),e(yp,Lio),e(yp,$B),e($B,xio),e(yp,kio),e(T,Sio),e(T,Lp),e(Lp,are),e(are,Rio),e(Lp,Bio),e(Lp,IB),e(IB,Pio),e(Lp,$io),e(T,Iio),e(T,xp),e(xp,nre),e(nre,qio),e(xp,Nio),e(xp,qB),e(qB,jio),e(xp,Dio),e(T,Gio),e(T,kp),e(kp,sre),e(sre,Oio),e(kp,Vio),e(kp,NB),e(NB,Xio),e(kp,zio),e(T,Qio),e(T,Sp),e(Sp,lre),e(lre,Wio),e(Sp,Hio),e(Sp,jB),e(jB,Uio),e(Sp,Jio),e(T,Yio),e(T,Rp),e(Rp,ire),e(ire,Kio),e(Rp,Zio),e(Rp,DB),e(DB,edo),e(Rp,odo),e(T,rdo),e(T,Bp),e(Bp,dre),e(dre,tdo),e(Bp,ado),e(Bp,GB),e(GB,ndo),e(Bp,sdo),e(T,ldo),e(T,Pp),e(Pp,cre),e(cre,ido),e(Pp,ddo),e(Pp,OB),e(OB,cdo),e(Pp,fdo),e(T,mdo),e(T,$p),e($p,fre),e(fre,gdo),e($p,hdo),e($p,VB),e(VB,pdo),e($p,_do),e(T,udo),e(T,Ip),e(Ip,mre),e(mre,bdo),e(Ip,Fdo),e(Ip,XB),e(XB,vdo),e(Ip,Tdo),e(T,Mdo),e(T,qp),e(qp,gre),e(gre,Edo),e(qp,Cdo),e(qp,zB),e(zB,wdo),e(qp,Ado),e(T,ydo),e(T,Np),e(Np,hre),e(hre,Ldo),e(Np,xdo),e(Np,QB),e(QB,kdo),e(Np,Sdo),e(T,Rdo),e(T,jp),e(jp,pre),e(pre,Bdo),e(jp,Pdo),e(jp,WB),e(WB,$do),e(jp,Ido),e(T,qdo),e(T,Dp),e(Dp,_re),e(_re,Ndo),e(Dp,jdo),e(Dp,HB),e(HB,Ddo),e(Dp,Gdo),e(T,Odo),e(T,Gp),e(Gp,ure),e(ure,Vdo),e(Gp,Xdo),e(Gp,UB),e(UB,zdo),e(Gp,Qdo),e(T,Wdo),e(T,Op),e(Op,bre),e(bre,Hdo),e(Op,Udo),e(Op,JB),e(JB,Jdo),e(Op,Ydo),e(T,Kdo),e(T,Vp),e(Vp,Fre),e(Fre,Zdo),e(Vp,eco),e(Vp,YB),e(YB,oco),e(Vp,rco),e(T,tco),e(T,Xp),e(Xp,vre),e(vre,aco),e(Xp,nco),e(Xp,KB),e(KB,sco),e(Xp,lco),e(T,ico),e(T,zp),e(zp,Tre),e(Tre,dco),e(zp,cco),e(zp,ZB),e(ZB,fco),e(zp,mco),e(T,gco),e(T,Qp),e(Qp,Mre),e(Mre,hco),e(Qp,pco),e(Qp,eP),e(eP,_co),e(Qp,uco),e(T,bco),e(T,Wp),e(Wp,Ere),e(Ere,Fco),e(Wp,vco),e(Wp,oP),e(oP,Tco),e(Wp,Mco),e(T,Eco),e(T,Hp),e(Hp,Cre),e(Cre,Cco),e(Hp,wco),e(Hp,rP),e(rP,Aco),e(Hp,yco),e(T,Lco),e(T,Up),e(Up,wre),e(wre,xco),e(Up,kco),e(Up,tP),e(tP,Sco),e(Up,Rco),e(T,Bco),e(T,Jp),e(Jp,Are),e(Are,Pco),e(Jp,$co),e(Jp,aP),e(aP,Ico),e(Jp,qco),e(T,Nco),e(T,Yp),e(Yp,yre),e(yre,jco),e(Yp,Dco),e(Yp,nP),e(nP,Gco),e(Yp,Oco),e(T,Vco),e(T,Kp),e(Kp,Lre),e(Lre,Xco),e(Kp,zco),e(Kp,sP),e(sP,Qco),e(Kp,Wco),e(T,Hco),e(T,Zp),e(Zp,xre),e(xre,Uco),e(Zp,Jco),e(Zp,lP),e(lP,Yco),e(Zp,Kco),e(T,Zco),e(T,e_),e(e_,kre),e(kre,efo),e(e_,ofo),e(e_,iP),e(iP,rfo),e(e_,tfo),e(T,afo),e(T,o_),e(o_,Sre),e(Sre,nfo),e(o_,sfo),e(o_,dP),e(dP,lfo),e(o_,ifo),e(T,dfo),e(T,r_),e(r_,Rre),e(Rre,cfo),e(r_,ffo),e(r_,cP),e(cP,mfo),e(r_,gfo),e(T,hfo),e(T,t_),e(t_,Bre),e(Bre,pfo),e(t_,_fo),e(t_,fP),e(fP,ufo),e(t_,bfo),e(T,Ffo),e(T,a_),e(a_,Pre),e(Pre,vfo),e(a_,Tfo),e(a_,mP),e(mP,Mfo),e(a_,Efo),e(T,Cfo),e(T,n_),e(n_,$re),e($re,wfo),e(n_,Afo),e(n_,gP),e(gP,yfo),e(n_,Lfo),e(T,xfo),e(T,s_),e(s_,Ire),e(Ire,kfo),e(s_,Sfo),e(s_,hP),e(hP,Rfo),e(s_,Bfo),e(T,Pfo),e(T,l_),e(l_,qre),e(qre,$fo),e(l_,Ifo),e(l_,pP),e(pP,qfo),e(l_,Nfo),e(T,jfo),e(T,i_),e(i_,Nre),e(Nre,Dfo),e(i_,Gfo),e(i_,_P),e(_P,Ofo),e(i_,Vfo),e(T,Xfo),e(T,d_),e(d_,jre),e(jre,zfo),e(d_,Qfo),e(d_,uP),e(uP,Wfo),e(d_,Hfo),e(T,Ufo),e(T,c_),e(c_,Dre),e(Dre,Jfo),e(c_,Yfo),e(c_,bP),e(bP,Kfo),e(c_,Zfo),e(T,emo),e(T,f_),e(f_,Gre),e(Gre,omo),e(f_,rmo),e(f_,FP),e(FP,tmo),e(f_,amo),e(T,nmo),e(T,m_),e(m_,Ore),e(Ore,smo),e(m_,lmo),e(m_,vP),e(vP,imo),e(m_,dmo),e(T,cmo),e(T,g_),e(g_,Vre),e(Vre,fmo),e(g_,mmo),e(g_,TP),e(TP,gmo),e(g_,hmo),e(T,pmo),e(T,h_),e(h_,Xre),e(Xre,_mo),e(h_,umo),e(h_,MP),e(MP,bmo),e(h_,Fmo),e(T,vmo),e(T,p_),e(p_,zre),e(zre,Tmo),e(p_,Mmo),e(p_,EP),e(EP,Emo),e(p_,Cmo),e(T,wmo),e(T,__),e(__,Qre),e(Qre,Amo),e(__,ymo),e(__,CP),e(CP,Lmo),e(__,xmo),e(T,kmo),e(T,u_),e(u_,Wre),e(Wre,Smo),e(u_,Rmo),e(u_,wP),e(wP,Bmo),e(u_,Pmo),e(T,$mo),e(T,b_),e(b_,Hre),e(Hre,Imo),e(b_,qmo),e(b_,AP),e(AP,Nmo),e(b_,jmo),e(T,Dmo),e(T,F_),e(F_,Ure),e(Ure,Gmo),e(F_,Omo),e(F_,yP),e(yP,Vmo),e(F_,Xmo),e(T,zmo),e(T,v_),e(v_,Jre),e(Jre,Qmo),e(v_,Wmo),e(v_,LP),e(LP,Hmo),e(v_,Umo),e(T,Jmo),e(T,T_),e(T_,Yre),e(Yre,Ymo),e(T_,Kmo),e(T_,xP),e(xP,Zmo),e(T_,ego),e(T,ogo),e(T,M_),e(M_,Kre),e(Kre,rgo),e(M_,tgo),e(M_,kP),e(kP,ago),e(M_,ngo),e(T,sgo),e(T,E_),e(E_,Zre),e(Zre,lgo),e(E_,igo),e(E_,SP),e(SP,dgo),e(E_,cgo),e(T,fgo),e(T,C_),e(C_,ete),e(ete,mgo),e(C_,ggo),e(C_,RP),e(RP,hgo),e(C_,pgo),e(T,_go),e(T,w_),e(w_,ote),e(ote,ugo),e(w_,bgo),e(w_,BP),e(BP,Fgo),e(w_,vgo),e(T,Tgo),e(T,A_),e(A_,rte),e(rte,Mgo),e(A_,Ego),e(A_,PP),e(PP,Cgo),e(A_,wgo),e(T,Ago),e(T,y_),e(y_,tte),e(tte,ygo),e(y_,Lgo),e(y_,$P),e($P,xgo),e(y_,kgo),e(T,Sgo),e(T,L_),e(L_,ate),e(ate,Rgo),e(L_,Bgo),e(L_,IP),e(IP,Pgo),e(L_,$go),e(qe,Igo),e(qe,x_),e(x_,qgo),e(x_,nte),e(nte,Ngo),e(x_,jgo),e(x_,ste),e(ste,Dgo),e(qe,Ggo),e(qe,lte),e(lte,Ogo),e(qe,Vgo),g(ow,qe,null),b(c,ZSe,u),b(c,ed,u),e(ed,k_),e(k_,ite),g(rw,ite,null),e(ed,Xgo),e(ed,dte),e(dte,zgo),b(c,eRe,u),b(c,Yo,u),g(tw,Yo,null),e(Yo,Qgo),e(Yo,od),e(od,Wgo),e(od,qP),e(qP,Hgo),e(od,Ugo),e(od,NP),e(NP,Jgo),e(od,Ygo),e(Yo,Kgo),e(Yo,aw),e(aw,Zgo),e(aw,cte),e(cte,eho),e(aw,oho),e(Yo,rho),e(Yo,zr),g(nw,zr,null),e(zr,tho),e(zr,fte),e(fte,aho),e(zr,nho),e(zr,rd),e(rd,sho),e(rd,mte),e(mte,lho),e(rd,iho),e(rd,jP),e(jP,dho),e(rd,cho),e(zr,fho),e(zr,gte),e(gte,mho),e(zr,gho),g(sw,zr,null),e(Yo,hho),e(Yo,Ne),g(lw,Ne,null),e(Ne,pho),e(Ne,hte),e(hte,_ho),e(Ne,uho),e(Ne,za),e(za,bho),e(za,pte),e(pte,Fho),e(za,vho),e(za,_te),e(_te,Tho),e(za,Mho),e(za,ute),e(ute,Eho),e(za,Cho),e(Ne,who),e(Ne,S),e(S,S_),e(S_,bte),e(bte,Aho),e(S_,yho),e(S_,DP),e(DP,Lho),e(S_,xho),e(S,kho),e(S,R_),e(R_,Fte),e(Fte,Sho),e(R_,Rho),e(R_,GP),e(GP,Bho),e(R_,Pho),e(S,$ho),e(S,B_),e(B_,vte),e(vte,Iho),e(B_,qho),e(B_,OP),e(OP,Nho),e(B_,jho),e(S,Dho),e(S,P_),e(P_,Tte),e(Tte,Gho),e(P_,Oho),e(P_,VP),e(VP,Vho),e(P_,Xho),e(S,zho),e(S,$_),e($_,Mte),e(Mte,Qho),e($_,Who),e($_,XP),e(XP,Hho),e($_,Uho),e(S,Jho),e(S,I_),e(I_,Ete),e(Ete,Yho),e(I_,Kho),e(I_,zP),e(zP,Zho),e(I_,epo),e(S,opo),e(S,q_),e(q_,Cte),e(Cte,rpo),e(q_,tpo),e(q_,QP),e(QP,apo),e(q_,npo),e(S,spo),e(S,N_),e(N_,wte),e(wte,lpo),e(N_,ipo),e(N_,WP),e(WP,dpo),e(N_,cpo),e(S,fpo),e(S,j_),e(j_,Ate),e(Ate,mpo),e(j_,gpo),e(j_,HP),e(HP,hpo),e(j_,ppo),e(S,_po),e(S,D_),e(D_,yte),e(yte,upo),e(D_,bpo),e(D_,UP),e(UP,Fpo),e(D_,vpo),e(S,Tpo),e(S,G_),e(G_,Lte),e(Lte,Mpo),e(G_,Epo),e(G_,JP),e(JP,Cpo),e(G_,wpo),e(S,Apo),e(S,O_),e(O_,xte),e(xte,ypo),e(O_,Lpo),e(O_,YP),e(YP,xpo),e(O_,kpo),e(S,Spo),e(S,V_),e(V_,kte),e(kte,Rpo),e(V_,Bpo),e(V_,KP),e(KP,Ppo),e(V_,$po),e(S,Ipo),e(S,X_),e(X_,Ste),e(Ste,qpo),e(X_,Npo),e(X_,ZP),e(ZP,jpo),e(X_,Dpo),e(S,Gpo),e(S,z_),e(z_,Rte),e(Rte,Opo),e(z_,Vpo),e(z_,e$),e(e$,Xpo),e(z_,zpo),e(S,Qpo),e(S,Q_),e(Q_,Bte),e(Bte,Wpo),e(Q_,Hpo),e(Q_,o$),e(o$,Upo),e(Q_,Jpo),e(S,Ypo),e(S,W_),e(W_,Pte),e(Pte,Kpo),e(W_,Zpo),e(W_,r$),e(r$,e_o),e(W_,o_o),e(S,r_o),e(S,H_),e(H_,$te),e($te,t_o),e(H_,a_o),e(H_,t$),e(t$,n_o),e(H_,s_o),e(S,l_o),e(S,U_),e(U_,Ite),e(Ite,i_o),e(U_,d_o),e(U_,a$),e(a$,c_o),e(U_,f_o),e(S,m_o),e(S,J_),e(J_,qte),e(qte,g_o),e(J_,h_o),e(J_,n$),e(n$,p_o),e(J_,__o),e(S,u_o),e(S,Y_),e(Y_,Nte),e(Nte,b_o),e(Y_,F_o),e(Y_,s$),e(s$,v_o),e(Y_,T_o),e(S,M_o),e(S,K_),e(K_,jte),e(jte,E_o),e(K_,C_o),e(K_,l$),e(l$,w_o),e(K_,A_o),e(S,y_o),e(S,Z_),e(Z_,Dte),e(Dte,L_o),e(Z_,x_o),e(Z_,i$),e(i$,k_o),e(Z_,S_o),e(S,R_o),e(S,eu),e(eu,Gte),e(Gte,B_o),e(eu,P_o),e(eu,d$),e(d$,$_o),e(eu,I_o),e(S,q_o),e(S,ou),e(ou,Ote),e(Ote,N_o),e(ou,j_o),e(ou,c$),e(c$,D_o),e(ou,G_o),e(S,O_o),e(S,ru),e(ru,Vte),e(Vte,V_o),e(ru,X_o),e(ru,f$),e(f$,z_o),e(ru,Q_o),e(S,W_o),e(S,tu),e(tu,Xte),e(Xte,H_o),e(tu,U_o),e(tu,m$),e(m$,J_o),e(tu,Y_o),e(S,K_o),e(S,au),e(au,zte),e(zte,Z_o),e(au,euo),e(au,g$),e(g$,ouo),e(au,ruo),e(S,tuo),e(S,nu),e(nu,Qte),e(Qte,auo),e(nu,nuo),e(nu,h$),e(h$,suo),e(nu,luo),e(S,iuo),e(S,su),e(su,Wte),e(Wte,duo),e(su,cuo),e(su,p$),e(p$,fuo),e(su,muo),e(S,guo),e(S,lu),e(lu,Hte),e(Hte,huo),e(lu,puo),e(lu,_$),e(_$,_uo),e(lu,uuo),e(S,buo),e(S,iu),e(iu,Ute),e(Ute,Fuo),e(iu,vuo),e(iu,u$),e(u$,Tuo),e(iu,Muo),e(S,Euo),e(S,du),e(du,Jte),e(Jte,Cuo),e(du,wuo),e(du,b$),e(b$,Auo),e(du,yuo),e(S,Luo),e(S,cu),e(cu,Yte),e(Yte,xuo),e(cu,kuo),e(cu,F$),e(F$,Suo),e(cu,Ruo),e(S,Buo),e(S,fu),e(fu,Kte),e(Kte,Puo),e(fu,$uo),e(fu,v$),e(v$,Iuo),e(fu,quo),e(S,Nuo),e(S,mu),e(mu,Zte),e(Zte,juo),e(mu,Duo),e(mu,T$),e(T$,Guo),e(mu,Ouo),e(S,Vuo),e(S,gu),e(gu,eae),e(eae,Xuo),e(gu,zuo),e(gu,M$),e(M$,Quo),e(gu,Wuo),e(S,Huo),e(S,hu),e(hu,oae),e(oae,Uuo),e(hu,Juo),e(hu,E$),e(E$,Yuo),e(hu,Kuo),e(S,Zuo),e(S,pu),e(pu,rae),e(rae,e1o),e(pu,o1o),e(pu,C$),e(C$,r1o),e(pu,t1o),e(Ne,a1o),e(Ne,_u),e(_u,n1o),e(_u,tae),e(tae,s1o),e(_u,l1o),e(_u,aae),e(aae,i1o),e(Ne,d1o),e(Ne,nae),e(nae,c1o),e(Ne,f1o),g(iw,Ne,null),b(c,oRe,u),b(c,td,u),e(td,uu),e(uu,sae),g(dw,sae,null),e(td,m1o),e(td,lae),e(lae,g1o),b(c,rRe,u),b(c,Ko,u),g(cw,Ko,null),e(Ko,h1o),e(Ko,ad),e(ad,p1o),e(ad,w$),e(w$,_1o),e(ad,u1o),e(ad,A$),e(A$,b1o),e(ad,F1o),e(Ko,v1o),e(Ko,fw),e(fw,T1o),e(fw,iae),e(iae,M1o),e(fw,E1o),e(Ko,C1o),e(Ko,Qr),g(mw,Qr,null),e(Qr,w1o),e(Qr,dae),e(dae,A1o),e(Qr,y1o),e(Qr,nd),e(nd,L1o),e(nd,cae),e(cae,x1o),e(nd,k1o),e(nd,y$),e(y$,S1o),e(nd,R1o),e(Qr,B1o),e(Qr,fae),e(fae,P1o),e(Qr,$1o),g(gw,Qr,null),e(Ko,I1o),e(Ko,je),g(hw,je,null),e(je,q1o),e(je,mae),e(mae,N1o),e(je,j1o),e(je,Qa),e(Qa,D1o),e(Qa,gae),e(gae,G1o),e(Qa,O1o),e(Qa,hae),e(hae,V1o),e(Qa,X1o),e(Qa,pae),e(pae,z1o),e(Qa,Q1o),e(je,W1o),e(je,$),e($,bu),e(bu,_ae),e(_ae,H1o),e(bu,U1o),e(bu,L$),e(L$,J1o),e(bu,Y1o),e($,K1o),e($,Fu),e(Fu,uae),e(uae,Z1o),e(Fu,e5o),e(Fu,x$),e(x$,o5o),e(Fu,r5o),e($,t5o),e($,vu),e(vu,bae),e(bae,a5o),e(vu,n5o),e(vu,k$),e(k$,s5o),e(vu,l5o),e($,i5o),e($,Tu),e(Tu,Fae),e(Fae,d5o),e(Tu,c5o),e(Tu,S$),e(S$,f5o),e(Tu,m5o),e($,g5o),e($,Mu),e(Mu,vae),e(vae,h5o),e(Mu,p5o),e(Mu,R$),e(R$,_5o),e(Mu,u5o),e($,b5o),e($,Eu),e(Eu,Tae),e(Tae,F5o),e(Eu,v5o),e(Eu,B$),e(B$,T5o),e(Eu,M5o),e($,E5o),e($,Cu),e(Cu,Mae),e(Mae,C5o),e(Cu,w5o),e(Cu,P$),e(P$,A5o),e(Cu,y5o),e($,L5o),e($,wu),e(wu,Eae),e(Eae,x5o),e(wu,k5o),e(wu,$$),e($$,S5o),e(wu,R5o),e($,B5o),e($,Au),e(Au,Cae),e(Cae,P5o),e(Au,$5o),e(Au,I$),e(I$,I5o),e(Au,q5o),e($,N5o),e($,yu),e(yu,wae),e(wae,j5o),e(yu,D5o),e(yu,q$),e(q$,G5o),e(yu,O5o),e($,V5o),e($,Lu),e(Lu,Aae),e(Aae,X5o),e(Lu,z5o),e(Lu,N$),e(N$,Q5o),e(Lu,W5o),e($,H5o),e($,xu),e(xu,yae),e(yae,U5o),e(xu,J5o),e(xu,j$),e(j$,Y5o),e(xu,K5o),e($,Z5o),e($,ku),e(ku,Lae),e(Lae,ebo),e(ku,obo),e(ku,D$),e(D$,rbo),e(ku,tbo),e($,abo),e($,Su),e(Su,xae),e(xae,nbo),e(Su,sbo),e(Su,G$),e(G$,lbo),e(Su,ibo),e($,dbo),e($,Ru),e(Ru,kae),e(kae,cbo),e(Ru,fbo),e(Ru,O$),e(O$,mbo),e(Ru,gbo),e($,hbo),e($,Bu),e(Bu,Sae),e(Sae,pbo),e(Bu,_bo),e(Bu,V$),e(V$,ubo),e(Bu,bbo),e($,Fbo),e($,Pu),e(Pu,Rae),e(Rae,vbo),e(Pu,Tbo),e(Pu,X$),e(X$,Mbo),e(Pu,Ebo),e($,Cbo),e($,$u),e($u,Bae),e(Bae,wbo),e($u,Abo),e($u,z$),e(z$,ybo),e($u,Lbo),e($,xbo),e($,Iu),e(Iu,Pae),e(Pae,kbo),e(Iu,Sbo),e(Iu,Q$),e(Q$,Rbo),e(Iu,Bbo),e($,Pbo),e($,qu),e(qu,$ae),e($ae,$bo),e(qu,Ibo),e(qu,W$),e(W$,qbo),e(qu,Nbo),e($,jbo),e($,Nu),e(Nu,Iae),e(Iae,Dbo),e(Nu,Gbo),e(Nu,H$),e(H$,Obo),e(Nu,Vbo),e($,Xbo),e($,ju),e(ju,qae),e(qae,zbo),e(ju,Qbo),e(ju,U$),e(U$,Wbo),e(ju,Hbo),e($,Ubo),e($,Du),e(Du,Nae),e(Nae,Jbo),e(Du,Ybo),e(Du,J$),e(J$,Kbo),e(Du,Zbo),e($,e2o),e($,Gu),e(Gu,jae),e(jae,o2o),e(Gu,r2o),e(Gu,Y$),e(Y$,t2o),e(Gu,a2o),e($,n2o),e($,Ou),e(Ou,Dae),e(Dae,s2o),e(Ou,l2o),e(Ou,K$),e(K$,i2o),e(Ou,d2o),e($,c2o),e($,Vu),e(Vu,Gae),e(Gae,f2o),e(Vu,m2o),e(Vu,Z$),e(Z$,g2o),e(Vu,h2o),e($,p2o),e($,Xu),e(Xu,Oae),e(Oae,_2o),e(Xu,u2o),e(Xu,eI),e(eI,b2o),e(Xu,F2o),e($,v2o),e($,zu),e(zu,Vae),e(Vae,T2o),e(zu,M2o),e(zu,oI),e(oI,E2o),e(zu,C2o),e($,w2o),e($,Qu),e(Qu,Xae),e(Xae,A2o),e(Qu,y2o),e(Qu,rI),e(rI,L2o),e(Qu,x2o),e($,k2o),e($,Wu),e(Wu,zae),e(zae,S2o),e(Wu,R2o),e(Wu,tI),e(tI,B2o),e(Wu,P2o),e($,$2o),e($,Hu),e(Hu,Qae),e(Qae,I2o),e(Hu,q2o),e(Hu,aI),e(aI,N2o),e(Hu,j2o),e($,D2o),e($,Uu),e(Uu,Wae),e(Wae,G2o),e(Uu,O2o),e(Uu,nI),e(nI,V2o),e(Uu,X2o),e($,z2o),e($,Ju),e(Ju,Hae),e(Hae,Q2o),e(Ju,W2o),e(Ju,sI),e(sI,H2o),e(Ju,U2o),e($,J2o),e($,Yu),e(Yu,Uae),e(Uae,Y2o),e(Yu,K2o),e(Yu,lI),e(lI,Z2o),e(Yu,eFo),e($,oFo),e($,Ku),e(Ku,Jae),e(Jae,rFo),e(Ku,tFo),e(Ku,iI),e(iI,aFo),e(Ku,nFo),e(je,sFo),e(je,Zu),e(Zu,lFo),e(Zu,Yae),e(Yae,iFo),e(Zu,dFo),e(Zu,Kae),e(Kae,cFo),e(je,fFo),e(je,Zae),e(Zae,mFo),e(je,gFo),g(pw,je,null),b(c,tRe,u),b(c,sd,u),e(sd,e1),e(e1,ene),g(_w,ene,null),e(sd,hFo),e(sd,one),e(one,pFo),b(c,aRe,u),b(c,Zo,u),g(uw,Zo,null),e(Zo,_Fo),e(Zo,ld),e(ld,uFo),e(ld,dI),e(dI,bFo),e(ld,FFo),e(ld,cI),e(cI,vFo),e(ld,TFo),e(Zo,MFo),e(Zo,bw),e(bw,EFo),e(bw,rne),e(rne,CFo),e(bw,wFo),e(Zo,AFo),e(Zo,Wr),g(Fw,Wr,null),e(Wr,yFo),e(Wr,tne),e(tne,LFo),e(Wr,xFo),e(Wr,id),e(id,kFo),e(id,ane),e(ane,SFo),e(id,RFo),e(id,fI),e(fI,BFo),e(id,PFo),e(Wr,$Fo),e(Wr,nne),e(nne,IFo),e(Wr,qFo),g(vw,Wr,null),e(Zo,NFo),e(Zo,De),g(Tw,De,null),e(De,jFo),e(De,sne),e(sne,DFo),e(De,GFo),e(De,Wa),e(Wa,OFo),e(Wa,lne),e(lne,VFo),e(Wa,XFo),e(Wa,ine),e(ine,zFo),e(Wa,QFo),e(Wa,dne),e(dne,WFo),e(Wa,HFo),e(De,UFo),e(De,I),e(I,o1),e(o1,cne),e(cne,JFo),e(o1,YFo),e(o1,mI),e(mI,KFo),e(o1,ZFo),e(I,evo),e(I,r1),e(r1,fne),e(fne,ovo),e(r1,rvo),e(r1,gI),e(gI,tvo),e(r1,avo),e(I,nvo),e(I,t1),e(t1,mne),e(mne,svo),e(t1,lvo),e(t1,hI),e(hI,ivo),e(t1,dvo),e(I,cvo),e(I,a1),e(a1,gne),e(gne,fvo),e(a1,mvo),e(a1,pI),e(pI,gvo),e(a1,hvo),e(I,pvo),e(I,n1),e(n1,hne),e(hne,_vo),e(n1,uvo),e(n1,_I),e(_I,bvo),e(n1,Fvo),e(I,vvo),e(I,s1),e(s1,pne),e(pne,Tvo),e(s1,Mvo),e(s1,uI),e(uI,Evo),e(s1,Cvo),e(I,wvo),e(I,l1),e(l1,_ne),e(_ne,Avo),e(l1,yvo),e(l1,bI),e(bI,Lvo),e(l1,xvo),e(I,kvo),e(I,i1),e(i1,une),e(une,Svo),e(i1,Rvo),e(i1,FI),e(FI,Bvo),e(i1,Pvo),e(I,$vo),e(I,d1),e(d1,bne),e(bne,Ivo),e(d1,qvo),e(d1,vI),e(vI,Nvo),e(d1,jvo),e(I,Dvo),e(I,c1),e(c1,Fne),e(Fne,Gvo),e(c1,Ovo),e(c1,TI),e(TI,Vvo),e(c1,Xvo),e(I,zvo),e(I,f1),e(f1,vne),e(vne,Qvo),e(f1,Wvo),e(f1,MI),e(MI,Hvo),e(f1,Uvo),e(I,Jvo),e(I,m1),e(m1,Tne),e(Tne,Yvo),e(m1,Kvo),e(m1,EI),e(EI,Zvo),e(m1,e6o),e(I,o6o),e(I,g1),e(g1,Mne),e(Mne,r6o),e(g1,t6o),e(g1,CI),e(CI,a6o),e(g1,n6o),e(I,s6o),e(I,h1),e(h1,Ene),e(Ene,l6o),e(h1,i6o),e(h1,wI),e(wI,d6o),e(h1,c6o),e(I,f6o),e(I,p1),e(p1,Cne),e(Cne,m6o),e(p1,g6o),e(p1,AI),e(AI,h6o),e(p1,p6o),e(I,_6o),e(I,_1),e(_1,wne),e(wne,u6o),e(_1,b6o),e(_1,yI),e(yI,F6o),e(_1,v6o),e(I,T6o),e(I,u1),e(u1,Ane),e(Ane,M6o),e(u1,E6o),e(u1,LI),e(LI,C6o),e(u1,w6o),e(I,A6o),e(I,b1),e(b1,yne),e(yne,y6o),e(b1,L6o),e(b1,xI),e(xI,x6o),e(b1,k6o),e(I,S6o),e(I,F1),e(F1,Lne),e(Lne,R6o),e(F1,B6o),e(F1,kI),e(kI,P6o),e(F1,$6o),e(I,I6o),e(I,v1),e(v1,xne),e(xne,q6o),e(v1,N6o),e(v1,SI),e(SI,j6o),e(v1,D6o),e(I,G6o),e(I,T1),e(T1,kne),e(kne,O6o),e(T1,V6o),e(T1,RI),e(RI,X6o),e(T1,z6o),e(I,Q6o),e(I,M1),e(M1,Sne),e(Sne,W6o),e(M1,H6o),e(M1,BI),e(BI,U6o),e(M1,J6o),e(I,Y6o),e(I,E1),e(E1,Rne),e(Rne,K6o),e(E1,Z6o),e(E1,PI),e(PI,eTo),e(E1,oTo),e(I,rTo),e(I,C1),e(C1,Bne),e(Bne,tTo),e(C1,aTo),e(C1,$I),e($I,nTo),e(C1,sTo),e(I,lTo),e(I,w1),e(w1,Pne),e(Pne,iTo),e(w1,dTo),e(w1,II),e(II,cTo),e(w1,fTo),e(I,mTo),e(I,A1),e(A1,$ne),e($ne,gTo),e(A1,hTo),e(A1,qI),e(qI,pTo),e(A1,_To),e(I,uTo),e(I,y1),e(y1,Ine),e(Ine,bTo),e(y1,FTo),e(y1,NI),e(NI,vTo),e(y1,TTo),e(I,MTo),e(I,L1),e(L1,qne),e(qne,ETo),e(L1,CTo),e(L1,jI),e(jI,wTo),e(L1,ATo),e(I,yTo),e(I,x1),e(x1,Nne),e(Nne,LTo),e(x1,xTo),e(x1,DI),e(DI,kTo),e(x1,STo),e(I,RTo),e(I,k1),e(k1,jne),e(jne,BTo),e(k1,PTo),e(k1,GI),e(GI,$To),e(k1,ITo),e(I,qTo),e(I,S1),e(S1,Dne),e(Dne,NTo),e(S1,jTo),e(S1,Gne),e(Gne,DTo),e(S1,GTo),e(I,OTo),e(I,R1),e(R1,One),e(One,VTo),e(R1,XTo),e(R1,OI),e(OI,zTo),e(R1,QTo),e(I,WTo),e(I,B1),e(B1,Vne),e(Vne,HTo),e(B1,UTo),e(B1,VI),e(VI,JTo),e(B1,YTo),e(I,KTo),e(I,P1),e(P1,Xne),e(Xne,ZTo),e(P1,eMo),e(P1,XI),e(XI,oMo),e(P1,rMo),e(I,tMo),e(I,$1),e($1,zne),e(zne,aMo),e($1,nMo),e($1,zI),e(zI,sMo),e($1,lMo),e(De,iMo),e(De,I1),e(I1,dMo),e(I1,Qne),e(Qne,cMo),e(I1,fMo),e(I1,Wne),e(Wne,mMo),e(De,gMo),e(De,Hne),e(Hne,hMo),e(De,pMo),g(Mw,De,null),b(c,nRe,u),b(c,dd,u),e(dd,q1),e(q1,Une),g(Ew,Une,null),e(dd,_Mo),e(dd,Jne),e(Jne,uMo),b(c,sRe,u),b(c,er,u),g(Cw,er,null),e(er,bMo),e(er,cd),e(cd,FMo),e(cd,QI),e(QI,vMo),e(cd,TMo),e(cd,WI),e(WI,MMo),e(cd,EMo),e(er,CMo),e(er,ww),e(ww,wMo),e(ww,Yne),e(Yne,AMo),e(ww,yMo),e(er,LMo),e(er,Hr),g(Aw,Hr,null),e(Hr,xMo),e(Hr,Kne),e(Kne,kMo),e(Hr,SMo),e(Hr,fd),e(fd,RMo),e(fd,Zne),e(Zne,BMo),e(fd,PMo),e(fd,HI),e(HI,$Mo),e(fd,IMo),e(Hr,qMo),e(Hr,ese),e(ese,NMo),e(Hr,jMo),g(yw,Hr,null),e(er,DMo),e(er,Ge),g(Lw,Ge,null),e(Ge,GMo),e(Ge,ose),e(ose,OMo),e(Ge,VMo),e(Ge,Ha),e(Ha,XMo),e(Ha,rse),e(rse,zMo),e(Ha,QMo),e(Ha,tse),e(tse,WMo),e(Ha,HMo),e(Ha,ase),e(ase,UMo),e(Ha,JMo),e(Ge,YMo),e(Ge,se),e(se,N1),e(N1,nse),e(nse,KMo),e(N1,ZMo),e(N1,UI),e(UI,e4o),e(N1,o4o),e(se,r4o),e(se,j1),e(j1,sse),e(sse,t4o),e(j1,a4o),e(j1,JI),e(JI,n4o),e(j1,s4o),e(se,l4o),e(se,D1),e(D1,lse),e(lse,i4o),e(D1,d4o),e(D1,YI),e(YI,c4o),e(D1,f4o),e(se,m4o),e(se,G1),e(G1,ise),e(ise,g4o),e(G1,h4o),e(G1,KI),e(KI,p4o),e(G1,_4o),e(se,u4o),e(se,O1),e(O1,dse),e(dse,b4o),e(O1,F4o),e(O1,ZI),e(ZI,v4o),e(O1,T4o),e(se,M4o),e(se,V1),e(V1,cse),e(cse,E4o),e(V1,C4o),e(V1,eq),e(eq,w4o),e(V1,A4o),e(se,y4o),e(se,X1),e(X1,fse),e(fse,L4o),e(X1,x4o),e(X1,oq),e(oq,k4o),e(X1,S4o),e(se,R4o),e(se,z1),e(z1,mse),e(mse,B4o),e(z1,P4o),e(z1,rq),e(rq,$4o),e(z1,I4o),e(se,q4o),e(se,Q1),e(Q1,gse),e(gse,N4o),e(Q1,j4o),e(Q1,tq),e(tq,D4o),e(Q1,G4o),e(se,O4o),e(se,W1),e(W1,hse),e(hse,V4o),e(W1,X4o),e(W1,aq),e(aq,z4o),e(W1,Q4o),e(se,W4o),e(se,H1),e(H1,pse),e(pse,H4o),e(H1,U4o),e(H1,nq),e(nq,J4o),e(H1,Y4o),e(se,K4o),e(se,U1),e(U1,_se),e(_se,Z4o),e(U1,eEo),e(U1,sq),e(sq,oEo),e(U1,rEo),e(se,tEo),e(se,J1),e(J1,use),e(use,aEo),e(J1,nEo),e(J1,lq),e(lq,sEo),e(J1,lEo),e(se,iEo),e(se,Y1),e(Y1,bse),e(bse,dEo),e(Y1,cEo),e(Y1,iq),e(iq,fEo),e(Y1,mEo),e(se,gEo),e(se,K1),e(K1,Fse),e(Fse,hEo),e(K1,pEo),e(K1,dq),e(dq,_Eo),e(K1,uEo),e(se,bEo),e(se,Z1),e(Z1,vse),e(vse,FEo),e(Z1,vEo),e(Z1,cq),e(cq,TEo),e(Z1,MEo),e(Ge,EEo),e(Ge,e5),e(e5,CEo),e(e5,Tse),e(Tse,wEo),e(e5,AEo),e(e5,Mse),e(Mse,yEo),e(Ge,LEo),e(Ge,Ese),e(Ese,xEo),e(Ge,kEo),g(xw,Ge,null),b(c,lRe,u),b(c,md,u),e(md,o5),e(o5,Cse),g(kw,Cse,null),e(md,SEo),e(md,wse),e(wse,REo),b(c,iRe,u),b(c,or,u),g(Sw,or,null),e(or,BEo),e(or,gd),e(gd,PEo),e(gd,fq),e(fq,$Eo),e(gd,IEo),e(gd,mq),e(mq,qEo),e(gd,NEo),e(or,jEo),e(or,Rw),e(Rw,DEo),e(Rw,Ase),e(Ase,GEo),e(Rw,OEo),e(or,VEo),e(or,Ur),g(Bw,Ur,null),e(Ur,XEo),e(Ur,yse),e(yse,zEo),e(Ur,QEo),e(Ur,hd),e(hd,WEo),e(hd,Lse),e(Lse,HEo),e(hd,UEo),e(hd,gq),e(gq,JEo),e(hd,YEo),e(Ur,KEo),e(Ur,xse),e(xse,ZEo),e(Ur,eCo),g(Pw,Ur,null),e(or,oCo),e(or,Oe),g($w,Oe,null),e(Oe,rCo),e(Oe,kse),e(kse,tCo),e(Oe,aCo),e(Oe,Ua),e(Ua,nCo),e(Ua,Sse),e(Sse,sCo),e(Ua,lCo),e(Ua,Rse),e(Rse,iCo),e(Ua,dCo),e(Ua,Bse),e(Bse,cCo),e(Ua,fCo),e(Oe,mCo),e(Oe,y),e(y,r5),e(r5,Pse),e(Pse,gCo),e(r5,hCo),e(r5,hq),e(hq,pCo),e(r5,_Co),e(y,uCo),e(y,t5),e(t5,$se),e($se,bCo),e(t5,FCo),e(t5,pq),e(pq,vCo),e(t5,TCo),e(y,MCo),e(y,a5),e(a5,Ise),e(Ise,ECo),e(a5,CCo),e(a5,_q),e(_q,wCo),e(a5,ACo),e(y,yCo),e(y,n5),e(n5,qse),e(qse,LCo),e(n5,xCo),e(n5,uq),e(uq,kCo),e(n5,SCo),e(y,RCo),e(y,s5),e(s5,Nse),e(Nse,BCo),e(s5,PCo),e(s5,bq),e(bq,$Co),e(s5,ICo),e(y,qCo),e(y,l5),e(l5,jse),e(jse,NCo),e(l5,jCo),e(l5,Fq),e(Fq,DCo),e(l5,GCo),e(y,OCo),e(y,i5),e(i5,Dse),e(Dse,VCo),e(i5,XCo),e(i5,vq),e(vq,zCo),e(i5,QCo),e(y,WCo),e(y,d5),e(d5,Gse),e(Gse,HCo),e(d5,UCo),e(d5,Tq),e(Tq,JCo),e(d5,YCo),e(y,KCo),e(y,c5),e(c5,Ose),e(Ose,ZCo),e(c5,e3o),e(c5,Mq),e(Mq,o3o),e(c5,r3o),e(y,t3o),e(y,f5),e(f5,Vse),e(Vse,a3o),e(f5,n3o),e(f5,Eq),e(Eq,s3o),e(f5,l3o),e(y,i3o),e(y,m5),e(m5,Xse),e(Xse,d3o),e(m5,c3o),e(m5,Cq),e(Cq,f3o),e(m5,m3o),e(y,g3o),e(y,g5),e(g5,zse),e(zse,h3o),e(g5,p3o),e(g5,wq),e(wq,_3o),e(g5,u3o),e(y,b3o),e(y,h5),e(h5,Qse),e(Qse,F3o),e(h5,v3o),e(h5,Aq),e(Aq,T3o),e(h5,M3o),e(y,E3o),e(y,p5),e(p5,Wse),e(Wse,C3o),e(p5,w3o),e(p5,yq),e(yq,A3o),e(p5,y3o),e(y,L3o),e(y,_5),e(_5,Hse),e(Hse,x3o),e(_5,k3o),e(_5,Lq),e(Lq,S3o),e(_5,R3o),e(y,B3o),e(y,u5),e(u5,Use),e(Use,P3o),e(u5,$3o),e(u5,xq),e(xq,I3o),e(u5,q3o),e(y,N3o),e(y,b5),e(b5,Jse),e(Jse,j3o),e(b5,D3o),e(b5,kq),e(kq,G3o),e(b5,O3o),e(y,V3o),e(y,F5),e(F5,Yse),e(Yse,X3o),e(F5,z3o),e(F5,Sq),e(Sq,Q3o),e(F5,W3o),e(y,H3o),e(y,v5),e(v5,Kse),e(Kse,U3o),e(v5,J3o),e(v5,Rq),e(Rq,Y3o),e(v5,K3o),e(y,Z3o),e(y,T5),e(T5,Zse),e(Zse,ewo),e(T5,owo),e(T5,Bq),e(Bq,rwo),e(T5,two),e(y,awo),e(y,M5),e(M5,ele),e(ele,nwo),e(M5,swo),e(M5,Pq),e(Pq,lwo),e(M5,iwo),e(y,dwo),e(y,E5),e(E5,ole),e(ole,cwo),e(E5,fwo),e(E5,$q),e($q,mwo),e(E5,gwo),e(y,hwo),e(y,C5),e(C5,rle),e(rle,pwo),e(C5,_wo),e(C5,Iq),e(Iq,uwo),e(C5,bwo),e(y,Fwo),e(y,w5),e(w5,tle),e(tle,vwo),e(w5,Two),e(w5,qq),e(qq,Mwo),e(w5,Ewo),e(y,Cwo),e(y,A5),e(A5,ale),e(ale,wwo),e(A5,Awo),e(A5,Nq),e(Nq,ywo),e(A5,Lwo),e(y,xwo),e(y,y5),e(y5,nle),e(nle,kwo),e(y5,Swo),e(y5,jq),e(jq,Rwo),e(y5,Bwo),e(y,Pwo),e(y,L5),e(L5,sle),e(sle,$wo),e(L5,Iwo),e(L5,Dq),e(Dq,qwo),e(L5,Nwo),e(y,jwo),e(y,x5),e(x5,lle),e(lle,Dwo),e(x5,Gwo),e(x5,Gq),e(Gq,Owo),e(x5,Vwo),e(y,Xwo),e(y,k5),e(k5,ile),e(ile,zwo),e(k5,Qwo),e(k5,Oq),e(Oq,Wwo),e(k5,Hwo),e(y,Uwo),e(y,S5),e(S5,dle),e(dle,Jwo),e(S5,Ywo),e(S5,Vq),e(Vq,Kwo),e(S5,Zwo),e(y,eAo),e(y,R5),e(R5,cle),e(cle,oAo),e(R5,rAo),e(R5,Xq),e(Xq,tAo),e(R5,aAo),e(y,nAo),e(y,B5),e(B5,fle),e(fle,sAo),e(B5,lAo),e(B5,zq),e(zq,iAo),e(B5,dAo),e(y,cAo),e(y,P5),e(P5,mle),e(mle,fAo),e(P5,mAo),e(P5,Qq),e(Qq,gAo),e(P5,hAo),e(y,pAo),e(y,$5),e($5,gle),e(gle,_Ao),e($5,uAo),e($5,Wq),e(Wq,bAo),e($5,FAo),e(y,vAo),e(y,I5),e(I5,hle),e(hle,TAo),e(I5,MAo),e(I5,Hq),e(Hq,EAo),e(I5,CAo),e(y,wAo),e(y,q5),e(q5,ple),e(ple,AAo),e(q5,yAo),e(q5,Uq),e(Uq,LAo),e(q5,xAo),e(y,kAo),e(y,N5),e(N5,_le),e(_le,SAo),e(N5,RAo),e(N5,Jq),e(Jq,BAo),e(N5,PAo),e(y,$Ao),e(y,j5),e(j5,ule),e(ule,IAo),e(j5,qAo),e(j5,Yq),e(Yq,NAo),e(j5,jAo),e(y,DAo),e(y,D5),e(D5,ble),e(ble,GAo),e(D5,OAo),e(D5,Kq),e(Kq,VAo),e(D5,XAo),e(y,zAo),e(y,G5),e(G5,Fle),e(Fle,QAo),e(G5,WAo),e(G5,Zq),e(Zq,HAo),e(G5,UAo),e(y,JAo),e(y,O5),e(O5,vle),e(vle,YAo),e(O5,KAo),e(O5,eN),e(eN,ZAo),e(O5,e0o),e(y,o0o),e(y,V5),e(V5,Tle),e(Tle,r0o),e(V5,t0o),e(V5,oN),e(oN,a0o),e(V5,n0o),e(y,s0o),e(y,X5),e(X5,Mle),e(Mle,l0o),e(X5,i0o),e(X5,rN),e(rN,d0o),e(X5,c0o),e(y,f0o),e(y,z5),e(z5,Ele),e(Ele,m0o),e(z5,g0o),e(z5,tN),e(tN,h0o),e(z5,p0o),e(y,_0o),e(y,Q5),e(Q5,Cle),e(Cle,u0o),e(Q5,b0o),e(Q5,aN),e(aN,F0o),e(Q5,v0o),e(y,T0o),e(y,W5),e(W5,wle),e(wle,M0o),e(W5,E0o),e(W5,nN),e(nN,C0o),e(W5,w0o),e(Oe,A0o),e(Oe,H5),e(H5,y0o),e(H5,Ale),e(Ale,L0o),e(H5,x0o),e(H5,yle),e(yle,k0o),e(Oe,S0o),e(Oe,Lle),e(Lle,R0o),e(Oe,B0o),g(Iw,Oe,null),b(c,dRe,u),b(c,pd,u),e(pd,U5),e(U5,xle),g(qw,xle,null),e(pd,P0o),e(pd,kle),e(kle,$0o),b(c,cRe,u),b(c,rr,u),g(Nw,rr,null),e(rr,I0o),e(rr,_d),e(_d,q0o),e(_d,sN),e(sN,N0o),e(_d,j0o),e(_d,lN),e(lN,D0o),e(_d,G0o),e(rr,O0o),e(rr,jw),e(jw,V0o),e(jw,Sle),e(Sle,X0o),e(jw,z0o),e(rr,Q0o),e(rr,Jr),g(Dw,Jr,null),e(Jr,W0o),e(Jr,Rle),e(Rle,H0o),e(Jr,U0o),e(Jr,ud),e(ud,J0o),e(ud,Ble),e(Ble,Y0o),e(ud,K0o),e(ud,iN),e(iN,Z0o),e(ud,eyo),e(Jr,oyo),e(Jr,Ple),e(Ple,ryo),e(Jr,tyo),g(Gw,Jr,null),e(rr,ayo),e(rr,Ve),g(Ow,Ve,null),e(Ve,nyo),e(Ve,$le),e($le,syo),e(Ve,lyo),e(Ve,Ja),e(Ja,iyo),e(Ja,Ile),e(Ile,dyo),e(Ja,cyo),e(Ja,qle),e(qle,fyo),e(Ja,myo),e(Ja,Nle),e(Nle,gyo),e(Ja,hyo),e(Ve,pyo),e(Ve,G),e(G,J5),e(J5,jle),e(jle,_yo),e(J5,uyo),e(J5,dN),e(dN,byo),e(J5,Fyo),e(G,vyo),e(G,Y5),e(Y5,Dle),e(Dle,Tyo),e(Y5,Myo),e(Y5,cN),e(cN,Eyo),e(Y5,Cyo),e(G,wyo),e(G,K5),e(K5,Gle),e(Gle,Ayo),e(K5,yyo),e(K5,fN),e(fN,Lyo),e(K5,xyo),e(G,kyo),e(G,Z5),e(Z5,Ole),e(Ole,Syo),e(Z5,Ryo),e(Z5,mN),e(mN,Byo),e(Z5,Pyo),e(G,$yo),e(G,eb),e(eb,Vle),e(Vle,Iyo),e(eb,qyo),e(eb,gN),e(gN,Nyo),e(eb,jyo),e(G,Dyo),e(G,ob),e(ob,Xle),e(Xle,Gyo),e(ob,Oyo),e(ob,hN),e(hN,Vyo),e(ob,Xyo),e(G,zyo),e(G,rb),e(rb,zle),e(zle,Qyo),e(rb,Wyo),e(rb,pN),e(pN,Hyo),e(rb,Uyo),e(G,Jyo),e(G,tb),e(tb,Qle),e(Qle,Yyo),e(tb,Kyo),e(tb,_N),e(_N,Zyo),e(tb,eLo),e(G,oLo),e(G,ab),e(ab,Wle),e(Wle,rLo),e(ab,tLo),e(ab,uN),e(uN,aLo),e(ab,nLo),e(G,sLo),e(G,nb),e(nb,Hle),e(Hle,lLo),e(nb,iLo),e(nb,bN),e(bN,dLo),e(nb,cLo),e(G,fLo),e(G,sb),e(sb,Ule),e(Ule,mLo),e(sb,gLo),e(sb,FN),e(FN,hLo),e(sb,pLo),e(G,_Lo),e(G,lb),e(lb,Jle),e(Jle,uLo),e(lb,bLo),e(lb,vN),e(vN,FLo),e(lb,vLo),e(G,TLo),e(G,ib),e(ib,Yle),e(Yle,MLo),e(ib,ELo),e(ib,TN),e(TN,CLo),e(ib,wLo),e(G,ALo),e(G,db),e(db,Kle),e(Kle,yLo),e(db,LLo),e(db,MN),e(MN,xLo),e(db,kLo),e(G,SLo),e(G,cb),e(cb,Zle),e(Zle,RLo),e(cb,BLo),e(cb,EN),e(EN,PLo),e(cb,$Lo),e(G,ILo),e(G,fb),e(fb,eie),e(eie,qLo),e(fb,NLo),e(fb,CN),e(CN,jLo),e(fb,DLo),e(G,GLo),e(G,mb),e(mb,oie),e(oie,OLo),e(mb,VLo),e(mb,wN),e(wN,XLo),e(mb,zLo),e(G,QLo),e(G,gb),e(gb,rie),e(rie,WLo),e(gb,HLo),e(gb,AN),e(AN,ULo),e(gb,JLo),e(G,YLo),e(G,hb),e(hb,tie),e(tie,KLo),e(hb,ZLo),e(hb,yN),e(yN,e8o),e(hb,o8o),e(G,r8o),e(G,pb),e(pb,aie),e(aie,t8o),e(pb,a8o),e(pb,LN),e(LN,n8o),e(pb,s8o),e(G,l8o),e(G,_b),e(_b,nie),e(nie,i8o),e(_b,d8o),e(_b,xN),e(xN,c8o),e(_b,f8o),e(G,m8o),e(G,ub),e(ub,sie),e(sie,g8o),e(ub,h8o),e(ub,kN),e(kN,p8o),e(ub,_8o),e(G,u8o),e(G,bb),e(bb,lie),e(lie,b8o),e(bb,F8o),e(bb,SN),e(SN,v8o),e(bb,T8o),e(G,M8o),e(G,Fb),e(Fb,iie),e(iie,E8o),e(Fb,C8o),e(Fb,RN),e(RN,w8o),e(Fb,A8o),e(G,y8o),e(G,vb),e(vb,die),e(die,L8o),e(vb,x8o),e(vb,BN),e(BN,k8o),e(vb,S8o),e(G,R8o),e(G,Tb),e(Tb,cie),e(cie,B8o),e(Tb,P8o),e(Tb,PN),e(PN,$8o),e(Tb,I8o),e(G,q8o),e(G,Mb),e(Mb,fie),e(fie,N8o),e(Mb,j8o),e(Mb,$N),e($N,D8o),e(Mb,G8o),e(G,O8o),e(G,Eb),e(Eb,mie),e(mie,V8o),e(Eb,X8o),e(Eb,IN),e(IN,z8o),e(Eb,Q8o),e(Ve,W8o),e(Ve,Cb),e(Cb,H8o),e(Cb,gie),e(gie,U8o),e(Cb,J8o),e(Cb,hie),e(hie,Y8o),e(Ve,K8o),e(Ve,pie),e(pie,Z8o),e(Ve,e7o),g(Vw,Ve,null),b(c,fRe,u),b(c,bd,u),e(bd,wb),e(wb,_ie),g(Xw,_ie,null),e(bd,o7o),e(bd,uie),e(uie,r7o),b(c,mRe,u),b(c,tr,u),g(zw,tr,null),e(tr,t7o),e(tr,Fd),e(Fd,a7o),e(Fd,qN),e(qN,n7o),e(Fd,s7o),e(Fd,NN),e(NN,l7o),e(Fd,i7o),e(tr,d7o),e(tr,Qw),e(Qw,c7o),e(Qw,bie),e(bie,f7o),e(Qw,m7o),e(tr,g7o),e(tr,Yr),g(Ww,Yr,null),e(Yr,h7o),e(Yr,Fie),e(Fie,p7o),e(Yr,_7o),e(Yr,vd),e(vd,u7o),e(vd,vie),e(vie,b7o),e(vd,F7o),e(vd,jN),e(jN,v7o),e(vd,T7o),e(Yr,M7o),e(Yr,Tie),e(Tie,E7o),e(Yr,C7o),g(Hw,Yr,null),e(tr,w7o),e(tr,Xe),g(Uw,Xe,null),e(Xe,A7o),e(Xe,Mie),e(Mie,y7o),e(Xe,L7o),e(Xe,Ya),e(Ya,x7o),e(Ya,Eie),e(Eie,k7o),e(Ya,S7o),e(Ya,Cie),e(Cie,R7o),e(Ya,B7o),e(Ya,wie),e(wie,P7o),e(Ya,$7o),e(Xe,I7o),e(Xe,da),e(da,Ab),e(Ab,Aie),e(Aie,q7o),e(Ab,N7o),e(Ab,DN),e(DN,j7o),e(Ab,D7o),e(da,G7o),e(da,yb),e(yb,yie),e(yie,O7o),e(yb,V7o),e(yb,GN),e(GN,X7o),e(yb,z7o),e(da,Q7o),e(da,Lb),e(Lb,Lie),e(Lie,W7o),e(Lb,H7o),e(Lb,ON),e(ON,U7o),e(Lb,J7o),e(da,Y7o),e(da,xb),e(xb,xie),e(xie,K7o),e(xb,Z7o),e(xb,VN),e(VN,e9o),e(xb,o9o),e(da,r9o),e(da,kb),e(kb,kie),e(kie,t9o),e(kb,a9o),e(kb,XN),e(XN,n9o),e(kb,s9o),e(Xe,l9o),e(Xe,Sb),e(Sb,i9o),e(Sb,Sie),e(Sie,d9o),e(Sb,c9o),e(Sb,Rie),e(Rie,f9o),e(Xe,m9o),e(Xe,Bie),e(Bie,g9o),e(Xe,h9o),g(Jw,Xe,null),b(c,gRe,u),b(c,Td,u),e(Td,Rb),e(Rb,Pie),g(Yw,Pie,null),e(Td,p9o),e(Td,$ie),e($ie,_9o),b(c,hRe,u),b(c,ar,u),g(Kw,ar,null),e(ar,u9o),e(ar,Md),e(Md,b9o),e(Md,zN),e(zN,F9o),e(Md,v9o),e(Md,QN),e(QN,T9o),e(Md,M9o),e(ar,E9o),e(ar,Zw),e(Zw,C9o),e(Zw,Iie),e(Iie,w9o),e(Zw,A9o),e(ar,y9o),e(ar,Kr),g(eA,Kr,null),e(Kr,L9o),e(Kr,qie),e(qie,x9o),e(Kr,k9o),e(Kr,Ed),e(Ed,S9o),e(Ed,Nie),e(Nie,R9o),e(Ed,B9o),e(Ed,WN),e(WN,P9o),e(Ed,$9o),e(Kr,I9o),e(Kr,jie),e(jie,q9o),e(Kr,N9o),g(oA,Kr,null),e(ar,j9o),e(ar,ze),g(rA,ze,null),e(ze,D9o),e(ze,Die),e(Die,G9o),e(ze,O9o),e(ze,Ka),e(Ka,V9o),e(Ka,Gie),e(Gie,X9o),e(Ka,z9o),e(Ka,Oie),e(Oie,Q9o),e(Ka,W9o),e(Ka,Vie),e(Vie,H9o),e(Ka,U9o),e(ze,J9o),e(ze,j),e(j,Bb),e(Bb,Xie),e(Xie,Y9o),e(Bb,K9o),e(Bb,HN),e(HN,Z9o),e(Bb,exo),e(j,oxo),e(j,Pb),e(Pb,zie),e(zie,rxo),e(Pb,txo),e(Pb,UN),e(UN,axo),e(Pb,nxo),e(j,sxo),e(j,$b),e($b,Qie),e(Qie,lxo),e($b,ixo),e($b,JN),e(JN,dxo),e($b,cxo),e(j,fxo),e(j,Ib),e(Ib,Wie),e(Wie,mxo),e(Ib,gxo),e(Ib,YN),e(YN,hxo),e(Ib,pxo),e(j,_xo),e(j,qb),e(qb,Hie),e(Hie,uxo),e(qb,bxo),e(qb,KN),e(KN,Fxo),e(qb,vxo),e(j,Txo),e(j,Nb),e(Nb,Uie),e(Uie,Mxo),e(Nb,Exo),e(Nb,ZN),e(ZN,Cxo),e(Nb,wxo),e(j,Axo),e(j,jb),e(jb,Jie),e(Jie,yxo),e(jb,Lxo),e(jb,ej),e(ej,xxo),e(jb,kxo),e(j,Sxo),e(j,Db),e(Db,Yie),e(Yie,Rxo),e(Db,Bxo),e(Db,oj),e(oj,Pxo),e(Db,$xo),e(j,Ixo),e(j,Gb),e(Gb,Kie),e(Kie,qxo),e(Gb,Nxo),e(Gb,rj),e(rj,jxo),e(Gb,Dxo),e(j,Gxo),e(j,Ob),e(Ob,Zie),e(Zie,Oxo),e(Ob,Vxo),e(Ob,tj),e(tj,Xxo),e(Ob,zxo),e(j,Qxo),e(j,Vb),e(Vb,ede),e(ede,Wxo),e(Vb,Hxo),e(Vb,aj),e(aj,Uxo),e(Vb,Jxo),e(j,Yxo),e(j,Xb),e(Xb,ode),e(ode,Kxo),e(Xb,Zxo),e(Xb,nj),e(nj,eko),e(Xb,oko),e(j,rko),e(j,zb),e(zb,rde),e(rde,tko),e(zb,ako),e(zb,sj),e(sj,nko),e(zb,sko),e(j,lko),e(j,Qb),e(Qb,tde),e(tde,iko),e(Qb,dko),e(Qb,lj),e(lj,cko),e(Qb,fko),e(j,mko),e(j,Wb),e(Wb,ade),e(ade,gko),e(Wb,hko),e(Wb,ij),e(ij,pko),e(Wb,_ko),e(j,uko),e(j,Hb),e(Hb,nde),e(nde,bko),e(Hb,Fko),e(Hb,dj),e(dj,vko),e(Hb,Tko),e(j,Mko),e(j,Ub),e(Ub,sde),e(sde,Eko),e(Ub,Cko),e(Ub,cj),e(cj,wko),e(Ub,Ako),e(j,yko),e(j,Jb),e(Jb,lde),e(lde,Lko),e(Jb,xko),e(Jb,fj),e(fj,kko),e(Jb,Sko),e(j,Rko),e(j,Yb),e(Yb,ide),e(ide,Bko),e(Yb,Pko),e(Yb,mj),e(mj,$ko),e(Yb,Iko),e(j,qko),e(j,Kb),e(Kb,dde),e(dde,Nko),e(Kb,jko),e(Kb,gj),e(gj,Dko),e(Kb,Gko),e(j,Oko),e(j,Zb),e(Zb,cde),e(cde,Vko),e(Zb,Xko),e(Zb,hj),e(hj,zko),e(Zb,Qko),e(j,Wko),e(j,e2),e(e2,fde),e(fde,Hko),e(e2,Uko),e(e2,pj),e(pj,Jko),e(e2,Yko),e(j,Kko),e(j,o2),e(o2,mde),e(mde,Zko),e(o2,eSo),e(o2,_j),e(_j,oSo),e(o2,rSo),e(j,tSo),e(j,r2),e(r2,gde),e(gde,aSo),e(r2,nSo),e(r2,uj),e(uj,sSo),e(r2,lSo),e(j,iSo),e(j,t2),e(t2,hde),e(hde,dSo),e(t2,cSo),e(t2,bj),e(bj,fSo),e(t2,mSo),e(j,gSo),e(j,a2),e(a2,pde),e(pde,hSo),e(a2,pSo),e(a2,Fj),e(Fj,_So),e(a2,uSo),e(j,bSo),e(j,n2),e(n2,_de),e(_de,FSo),e(n2,vSo),e(n2,vj),e(vj,TSo),e(n2,MSo),e(j,ESo),e(j,s2),e(s2,ude),e(ude,CSo),e(s2,wSo),e(s2,Tj),e(Tj,ASo),e(s2,ySo),e(j,LSo),e(j,l2),e(l2,bde),e(bde,xSo),e(l2,kSo),e(l2,Mj),e(Mj,SSo),e(l2,RSo),e(j,BSo),e(j,i2),e(i2,Fde),e(Fde,PSo),e(i2,$So),e(i2,Ej),e(Ej,ISo),e(i2,qSo),e(j,NSo),e(j,d2),e(d2,vde),e(vde,jSo),e(d2,DSo),e(d2,Cj),e(Cj,GSo),e(d2,OSo),e(j,VSo),e(j,c2),e(c2,Tde),e(Tde,XSo),e(c2,zSo),e(c2,wj),e(wj,QSo),e(c2,WSo),e(j,HSo),e(j,f2),e(f2,Mde),e(Mde,USo),e(f2,JSo),e(f2,Aj),e(Aj,YSo),e(f2,KSo),e(ze,ZSo),e(ze,m2),e(m2,eRo),e(m2,Ede),e(Ede,oRo),e(m2,rRo),e(m2,Cde),e(Cde,tRo),e(ze,aRo),e(ze,wde),e(wde,nRo),e(ze,sRo),g(tA,ze,null),b(c,pRe,u),b(c,Cd,u),e(Cd,g2),e(g2,Ade),g(aA,Ade,null),e(Cd,lRo),e(Cd,yde),e(yde,iRo),b(c,_Re,u),b(c,nr,u),g(nA,nr,null),e(nr,dRo),e(nr,wd),e(wd,cRo),e(wd,yj),e(yj,fRo),e(wd,mRo),e(wd,Lj),e(Lj,gRo),e(wd,hRo),e(nr,pRo),e(nr,sA),e(sA,_Ro),e(sA,Lde),e(Lde,uRo),e(sA,bRo),e(nr,FRo),e(nr,Zr),g(lA,Zr,null),e(Zr,vRo),e(Zr,xde),e(xde,TRo),e(Zr,MRo),e(Zr,Ad),e(Ad,ERo),e(Ad,kde),e(kde,CRo),e(Ad,wRo),e(Ad,xj),e(xj,ARo),e(Ad,yRo),e(Zr,LRo),e(Zr,Sde),e(Sde,xRo),e(Zr,kRo),g(iA,Zr,null),e(nr,SRo),e(nr,Qe),g(dA,Qe,null),e(Qe,RRo),e(Qe,Rde),e(Rde,BRo),e(Qe,PRo),e(Qe,Za),e(Za,$Ro),e(Za,Bde),e(Bde,IRo),e(Za,qRo),e(Za,Pde),e(Pde,NRo),e(Za,jRo),e(Za,$de),e($de,DRo),e(Za,GRo),e(Qe,ORo),e(Qe,R),e(R,h2),e(h2,Ide),e(Ide,VRo),e(h2,XRo),e(h2,kj),e(kj,zRo),e(h2,QRo),e(R,WRo),e(R,p2),e(p2,qde),e(qde,HRo),e(p2,URo),e(p2,Sj),e(Sj,JRo),e(p2,YRo),e(R,KRo),e(R,_2),e(_2,Nde),e(Nde,ZRo),e(_2,eBo),e(_2,Rj),e(Rj,oBo),e(_2,rBo),e(R,tBo),e(R,u2),e(u2,jde),e(jde,aBo),e(u2,nBo),e(u2,Bj),e(Bj,sBo),e(u2,lBo),e(R,iBo),e(R,b2),e(b2,Dde),e(Dde,dBo),e(b2,cBo),e(b2,Pj),e(Pj,fBo),e(b2,mBo),e(R,gBo),e(R,F2),e(F2,Gde),e(Gde,hBo),e(F2,pBo),e(F2,$j),e($j,_Bo),e(F2,uBo),e(R,bBo),e(R,v2),e(v2,Ode),e(Ode,FBo),e(v2,vBo),e(v2,Ij),e(Ij,TBo),e(v2,MBo),e(R,EBo),e(R,T2),e(T2,Vde),e(Vde,CBo),e(T2,wBo),e(T2,qj),e(qj,ABo),e(T2,yBo),e(R,LBo),e(R,M2),e(M2,Xde),e(Xde,xBo),e(M2,kBo),e(M2,Nj),e(Nj,SBo),e(M2,RBo),e(R,BBo),e(R,E2),e(E2,zde),e(zde,PBo),e(E2,$Bo),e(E2,jj),e(jj,IBo),e(E2,qBo),e(R,NBo),e(R,C2),e(C2,Qde),e(Qde,jBo),e(C2,DBo),e(C2,Dj),e(Dj,GBo),e(C2,OBo),e(R,VBo),e(R,w2),e(w2,Wde),e(Wde,XBo),e(w2,zBo),e(w2,Gj),e(Gj,QBo),e(w2,WBo),e(R,HBo),e(R,A2),e(A2,Hde),e(Hde,UBo),e(A2,JBo),e(A2,Oj),e(Oj,YBo),e(A2,KBo),e(R,ZBo),e(R,y2),e(y2,Ude),e(Ude,ePo),e(y2,oPo),e(y2,Vj),e(Vj,rPo),e(y2,tPo),e(R,aPo),e(R,L2),e(L2,Jde),e(Jde,nPo),e(L2,sPo),e(L2,Xj),e(Xj,lPo),e(L2,iPo),e(R,dPo),e(R,x2),e(x2,Yde),e(Yde,cPo),e(x2,fPo),e(x2,zj),e(zj,mPo),e(x2,gPo),e(R,hPo),e(R,k2),e(k2,Kde),e(Kde,pPo),e(k2,_Po),e(k2,Qj),e(Qj,uPo),e(k2,bPo),e(R,FPo),e(R,S2),e(S2,Zde),e(Zde,vPo),e(S2,TPo),e(S2,Wj),e(Wj,MPo),e(S2,EPo),e(R,CPo),e(R,R2),e(R2,ece),e(ece,wPo),e(R2,APo),e(R2,Hj),e(Hj,yPo),e(R2,LPo),e(R,xPo),e(R,B2),e(B2,oce),e(oce,kPo),e(B2,SPo),e(B2,Uj),e(Uj,RPo),e(B2,BPo),e(R,PPo),e(R,P2),e(P2,rce),e(rce,$Po),e(P2,IPo),e(P2,Jj),e(Jj,qPo),e(P2,NPo),e(R,jPo),e(R,$2),e($2,tce),e(tce,DPo),e($2,GPo),e($2,Yj),e(Yj,OPo),e($2,VPo),e(R,XPo),e(R,I2),e(I2,ace),e(ace,zPo),e(I2,QPo),e(I2,Kj),e(Kj,WPo),e(I2,HPo),e(R,UPo),e(R,q2),e(q2,nce),e(nce,JPo),e(q2,YPo),e(q2,Zj),e(Zj,KPo),e(q2,ZPo),e(R,e$o),e(R,N2),e(N2,sce),e(sce,o$o),e(N2,r$o),e(N2,eD),e(eD,t$o),e(N2,a$o),e(R,n$o),e(R,j2),e(j2,lce),e(lce,s$o),e(j2,l$o),e(j2,oD),e(oD,i$o),e(j2,d$o),e(R,c$o),e(R,D2),e(D2,ice),e(ice,f$o),e(D2,m$o),e(D2,rD),e(rD,g$o),e(D2,h$o),e(R,p$o),e(R,G2),e(G2,dce),e(dce,_$o),e(G2,u$o),e(G2,tD),e(tD,b$o),e(G2,F$o),e(R,v$o),e(R,O2),e(O2,cce),e(cce,T$o),e(O2,M$o),e(O2,aD),e(aD,E$o),e(O2,C$o),e(R,w$o),e(R,V2),e(V2,fce),e(fce,A$o),e(V2,y$o),e(V2,nD),e(nD,L$o),e(V2,x$o),e(R,k$o),e(R,X2),e(X2,mce),e(mce,S$o),e(X2,R$o),e(X2,sD),e(sD,B$o),e(X2,P$o),e(R,$$o),e(R,z2),e(z2,gce),e(gce,I$o),e(z2,q$o),e(z2,lD),e(lD,N$o),e(z2,j$o),e(R,D$o),e(R,Q2),e(Q2,hce),e(hce,G$o),e(Q2,O$o),e(Q2,iD),e(iD,V$o),e(Q2,X$o),e(R,z$o),e(R,W2),e(W2,pce),e(pce,Q$o),e(W2,W$o),e(W2,dD),e(dD,H$o),e(W2,U$o),e(R,J$o),e(R,H2),e(H2,_ce),e(_ce,Y$o),e(H2,K$o),e(H2,cD),e(cD,Z$o),e(H2,eIo),e(R,oIo),e(R,U2),e(U2,uce),e(uce,rIo),e(U2,tIo),e(U2,fD),e(fD,aIo),e(U2,nIo),e(R,sIo),e(R,J2),e(J2,bce),e(bce,lIo),e(J2,iIo),e(J2,mD),e(mD,dIo),e(J2,cIo),e(R,fIo),e(R,Y2),e(Y2,Fce),e(Fce,mIo),e(Y2,gIo),e(Y2,gD),e(gD,hIo),e(Y2,pIo),e(R,_Io),e(R,K2),e(K2,vce),e(vce,uIo),e(K2,bIo),e(K2,hD),e(hD,FIo),e(K2,vIo),e(Qe,TIo),e(Qe,Z2),e(Z2,MIo),e(Z2,Tce),e(Tce,EIo),e(Z2,CIo),e(Z2,Mce),e(Mce,wIo),e(Qe,AIo),e(Qe,Ece),e(Ece,yIo),e(Qe,LIo),g(cA,Qe,null),b(c,uRe,u),b(c,yd,u),e(yd,eF),e(eF,Cce),g(fA,Cce,null),e(yd,xIo),e(yd,wce),e(wce,kIo),b(c,bRe,u),b(c,sr,u),g(mA,sr,null),e(sr,SIo),e(sr,Ld),e(Ld,RIo),e(Ld,pD),e(pD,BIo),e(Ld,PIo),e(Ld,_D),e(_D,$Io),e(Ld,IIo),e(sr,qIo),e(sr,gA),e(gA,NIo),e(gA,Ace),e(Ace,jIo),e(gA,DIo),e(sr,GIo),e(sr,et),g(hA,et,null),e(et,OIo),e(et,yce),e(yce,VIo),e(et,XIo),e(et,xd),e(xd,zIo),e(xd,Lce),e(Lce,QIo),e(xd,WIo),e(xd,uD),e(uD,HIo),e(xd,UIo),e(et,JIo),e(et,xce),e(xce,YIo),e(et,KIo),g(pA,et,null),e(sr,ZIo),e(sr,We),g(_A,We,null),e(We,eqo),e(We,kce),e(kce,oqo),e(We,rqo),e(We,en),e(en,tqo),e(en,Sce),e(Sce,aqo),e(en,nqo),e(en,Rce),e(Rce,sqo),e(en,lqo),e(en,Bce),e(Bce,iqo),e(en,dqo),e(We,cqo),e(We,Pce),e(Pce,oF),e(oF,$ce),e($ce,fqo),e(oF,mqo),e(oF,bD),e(bD,gqo),e(oF,hqo),e(We,pqo),e(We,rF),e(rF,_qo),e(rF,Ice),e(Ice,uqo),e(rF,bqo),e(rF,qce),e(qce,Fqo),e(We,vqo),e(We,Nce),e(Nce,Tqo),e(We,Mqo),g(uA,We,null),b(c,FRe,u),b(c,kd,u),e(kd,tF),e(tF,jce),g(bA,jce,null),e(kd,Eqo),e(kd,Dce),e(Dce,Cqo),b(c,vRe,u),b(c,lr,u),g(FA,lr,null),e(lr,wqo),e(lr,Sd),e(Sd,Aqo),e(Sd,FD),e(FD,yqo),e(Sd,Lqo),e(Sd,vD),e(vD,xqo),e(Sd,kqo),e(lr,Sqo),e(lr,vA),e(vA,Rqo),e(vA,Gce),e(Gce,Bqo),e(vA,Pqo),e(lr,$qo),e(lr,ot),g(TA,ot,null),e(ot,Iqo),e(ot,Oce),e(Oce,qqo),e(ot,Nqo),e(ot,Rd),e(Rd,jqo),e(Rd,Vce),e(Vce,Dqo),e(Rd,Gqo),e(Rd,TD),e(TD,Oqo),e(Rd,Vqo),e(ot,Xqo),e(ot,Xce),e(Xce,zqo),e(ot,Qqo),g(MA,ot,null),e(lr,Wqo),e(lr,He),g(EA,He,null),e(He,Hqo),e(He,zce),e(zce,Uqo),e(He,Jqo),e(He,on),e(on,Yqo),e(on,Qce),e(Qce,Kqo),e(on,Zqo),e(on,Wce),e(Wce,eNo),e(on,oNo),e(on,Hce),e(Hce,rNo),e(on,tNo),e(He,aNo),e(He,ge),e(ge,aF),e(aF,Uce),e(Uce,nNo),e(aF,sNo),e(aF,MD),e(MD,lNo),e(aF,iNo),e(ge,dNo),e(ge,nF),e(nF,Jce),e(Jce,cNo),e(nF,fNo),e(nF,ED),e(ED,mNo),e(nF,gNo),e(ge,hNo),e(ge,Gs),e(Gs,Yce),e(Yce,pNo),e(Gs,_No),e(Gs,CD),e(CD,uNo),e(Gs,bNo),e(Gs,wD),e(wD,FNo),e(Gs,vNo),e(ge,TNo),e(ge,sF),e(sF,Kce),e(Kce,MNo),e(sF,ENo),e(sF,AD),e(AD,CNo),e(sF,wNo),e(ge,ANo),e(ge,ma),e(ma,Zce),e(Zce,yNo),e(ma,LNo),e(ma,yD),e(yD,xNo),e(ma,kNo),e(ma,LD),e(LD,SNo),e(ma,RNo),e(ma,xD),e(xD,BNo),e(ma,PNo),e(ge,$No),e(ge,lF),e(lF,efe),e(efe,INo),e(lF,qNo),e(lF,kD),e(kD,NNo),e(lF,jNo),e(ge,DNo),e(ge,iF),e(iF,ofe),e(ofe,GNo),e(iF,ONo),e(iF,SD),e(SD,VNo),e(iF,XNo),e(ge,zNo),e(ge,dF),e(dF,rfe),e(rfe,QNo),e(dF,WNo),e(dF,RD),e(RD,HNo),e(dF,UNo),e(ge,JNo),e(ge,cF),e(cF,tfe),e(tfe,YNo),e(cF,KNo),e(cF,BD),e(BD,ZNo),e(cF,ejo),e(ge,ojo),e(ge,fF),e(fF,afe),e(afe,rjo),e(fF,tjo),e(fF,PD),e(PD,ajo),e(fF,njo),e(ge,sjo),e(ge,mF),e(mF,nfe),e(nfe,ljo),e(mF,ijo),e(mF,$D),e($D,djo),e(mF,cjo),e(He,fjo),e(He,gF),e(gF,mjo),e(gF,sfe),e(sfe,gjo),e(gF,hjo),e(gF,lfe),e(lfe,pjo),e(He,_jo),e(He,ife),e(ife,ujo),e(He,bjo),g(CA,He,null),b(c,TRe,u),b(c,Bd,u),e(Bd,hF),e(hF,dfe),g(wA,dfe,null),e(Bd,Fjo),e(Bd,cfe),e(cfe,vjo),b(c,MRe,u),b(c,ir,u),g(AA,ir,null),e(ir,Tjo),e(ir,Pd),e(Pd,Mjo),e(Pd,ID),e(ID,Ejo),e(Pd,Cjo),e(Pd,qD),e(qD,wjo),e(Pd,Ajo),e(ir,yjo),e(ir,yA),e(yA,Ljo),e(yA,ffe),e(ffe,xjo),e(yA,kjo),e(ir,Sjo),e(ir,rt),g(LA,rt,null),e(rt,Rjo),e(rt,mfe),e(mfe,Bjo),e(rt,Pjo),e(rt,$d),e($d,$jo),e($d,gfe),e(gfe,Ijo),e($d,qjo),e($d,ND),e(ND,Njo),e($d,jjo),e(rt,Djo),e(rt,hfe),e(hfe,Gjo),e(rt,Ojo),g(xA,rt,null),e(ir,Vjo),e(ir,Ue),g(kA,Ue,null),e(Ue,Xjo),e(Ue,pfe),e(pfe,zjo),e(Ue,Qjo),e(Ue,rn),e(rn,Wjo),e(rn,_fe),e(_fe,Hjo),e(rn,Ujo),e(rn,ufe),e(ufe,Jjo),e(rn,Yjo),e(rn,bfe),e(bfe,Kjo),e(rn,Zjo),e(Ue,eDo),e(Ue,Ffe),e(Ffe,pF),e(pF,vfe),e(vfe,oDo),e(pF,rDo),e(pF,jD),e(jD,tDo),e(pF,aDo),e(Ue,nDo),e(Ue,_F),e(_F,sDo),e(_F,Tfe),e(Tfe,lDo),e(_F,iDo),e(_F,Mfe),e(Mfe,dDo),e(Ue,cDo),e(Ue,Efe),e(Efe,fDo),e(Ue,mDo),g(SA,Ue,null),b(c,ERe,u),b(c,Id,u),e(Id,uF),e(uF,Cfe),g(RA,Cfe,null),e(Id,gDo),e(Id,wfe),e(wfe,hDo),b(c,CRe,u),b(c,dr,u),g(BA,dr,null),e(dr,pDo),e(dr,qd),e(qd,_Do),e(qd,DD),e(DD,uDo),e(qd,bDo),e(qd,GD),e(GD,FDo),e(qd,vDo),e(dr,TDo),e(dr,PA),e(PA,MDo),e(PA,Afe),e(Afe,EDo),e(PA,CDo),e(dr,wDo),e(dr,tt),g($A,tt,null),e(tt,ADo),e(tt,yfe),e(yfe,yDo),e(tt,LDo),e(tt,Nd),e(Nd,xDo),e(Nd,Lfe),e(Lfe,kDo),e(Nd,SDo),e(Nd,OD),e(OD,RDo),e(Nd,BDo),e(tt,PDo),e(tt,xfe),e(xfe,$Do),e(tt,IDo),g(IA,tt,null),e(dr,qDo),e(dr,Je),g(qA,Je,null),e(Je,NDo),e(Je,kfe),e(kfe,jDo),e(Je,DDo),e(Je,tn),e(tn,GDo),e(tn,Sfe),e(Sfe,ODo),e(tn,VDo),e(tn,Rfe),e(Rfe,XDo),e(tn,zDo),e(tn,Bfe),e(Bfe,QDo),e(tn,WDo),e(Je,HDo),e(Je,Se),e(Se,bF),e(bF,Pfe),e(Pfe,UDo),e(bF,JDo),e(bF,VD),e(VD,YDo),e(bF,KDo),e(Se,ZDo),e(Se,FF),e(FF,$fe),e($fe,eGo),e(FF,oGo),e(FF,XD),e(XD,rGo),e(FF,tGo),e(Se,aGo),e(Se,vF),e(vF,Ife),e(Ife,nGo),e(vF,sGo),e(vF,zD),e(zD,lGo),e(vF,iGo),e(Se,dGo),e(Se,TF),e(TF,qfe),e(qfe,cGo),e(TF,fGo),e(TF,QD),e(QD,mGo),e(TF,gGo),e(Se,hGo),e(Se,MF),e(MF,Nfe),e(Nfe,pGo),e(MF,_Go),e(MF,WD),e(WD,uGo),e(MF,bGo),e(Se,FGo),e(Se,EF),e(EF,jfe),e(jfe,vGo),e(EF,TGo),e(EF,HD),e(HD,MGo),e(EF,EGo),e(Se,CGo),e(Se,CF),e(CF,Dfe),e(Dfe,wGo),e(CF,AGo),e(CF,UD),e(UD,yGo),e(CF,LGo),e(Se,xGo),e(Se,wF),e(wF,Gfe),e(Gfe,kGo),e(wF,SGo),e(wF,JD),e(JD,RGo),e(wF,BGo),e(Je,PGo),e(Je,AF),e(AF,$Go),e(AF,Ofe),e(Ofe,IGo),e(AF,qGo),e(AF,Vfe),e(Vfe,NGo),e(Je,jGo),e(Je,Xfe),e(Xfe,DGo),e(Je,GGo),g(NA,Je,null),b(c,wRe,u),b(c,jd,u),e(jd,yF),e(yF,zfe),g(jA,zfe,null),e(jd,OGo),e(jd,Qfe),e(Qfe,VGo),b(c,ARe,u),b(c,cr,u),g(DA,cr,null),e(cr,XGo),e(cr,Dd),e(Dd,zGo),e(Dd,YD),e(YD,QGo),e(Dd,WGo),e(Dd,KD),e(KD,HGo),e(Dd,UGo),e(cr,JGo),e(cr,GA),e(GA,YGo),e(GA,Wfe),e(Wfe,KGo),e(GA,ZGo),e(cr,eOo),e(cr,at),g(OA,at,null),e(at,oOo),e(at,Hfe),e(Hfe,rOo),e(at,tOo),e(at,Gd),e(Gd,aOo),e(Gd,Ufe),e(Ufe,nOo),e(Gd,sOo),e(Gd,ZD),e(ZD,lOo),e(Gd,iOo),e(at,dOo),e(at,Jfe),e(Jfe,cOo),e(at,fOo),g(VA,at,null),e(cr,mOo),e(cr,Ye),g(XA,Ye,null),e(Ye,gOo),e(Ye,Yfe),e(Yfe,hOo),e(Ye,pOo),e(Ye,an),e(an,_Oo),e(an,Kfe),e(Kfe,uOo),e(an,bOo),e(an,Zfe),e(Zfe,FOo),e(an,vOo),e(an,eme),e(eme,TOo),e(an,MOo),e(Ye,EOo),e(Ye,nn),e(nn,LF),e(LF,ome),e(ome,COo),e(LF,wOo),e(LF,eG),e(eG,AOo),e(LF,yOo),e(nn,LOo),e(nn,xF),e(xF,rme),e(rme,xOo),e(xF,kOo),e(xF,oG),e(oG,SOo),e(xF,ROo),e(nn,BOo),e(nn,kF),e(kF,tme),e(tme,POo),e(kF,$Oo),e(kF,rG),e(rG,IOo),e(kF,qOo),e(nn,NOo),e(nn,SF),e(SF,ame),e(ame,jOo),e(SF,DOo),e(SF,tG),e(tG,GOo),e(SF,OOo),e(Ye,VOo),e(Ye,RF),e(RF,XOo),e(RF,nme),e(nme,zOo),e(RF,QOo),e(RF,sme),e(sme,WOo),e(Ye,HOo),e(Ye,lme),e(lme,UOo),e(Ye,JOo),g(zA,Ye,null),b(c,yRe,u),b(c,Od,u),e(Od,BF),e(BF,ime),g(QA,ime,null),e(Od,YOo),e(Od,dme),e(dme,KOo),b(c,LRe,u),b(c,fr,u),g(WA,fr,null),e(fr,ZOo),e(fr,Vd),e(Vd,eVo),e(Vd,aG),e(aG,oVo),e(Vd,rVo),e(Vd,nG),e(nG,tVo),e(Vd,aVo),e(fr,nVo),e(fr,HA),e(HA,sVo),e(HA,cme),e(cme,lVo),e(HA,iVo),e(fr,dVo),e(fr,nt),g(UA,nt,null),e(nt,cVo),e(nt,fme),e(fme,fVo),e(nt,mVo),e(nt,Xd),e(Xd,gVo),e(Xd,mme),e(mme,hVo),e(Xd,pVo),e(Xd,sG),e(sG,_Vo),e(Xd,uVo),e(nt,bVo),e(nt,gme),e(gme,FVo),e(nt,vVo),g(JA,nt,null),e(fr,TVo),e(fr,Ke),g(YA,Ke,null),e(Ke,MVo),e(Ke,hme),e(hme,EVo),e(Ke,CVo),e(Ke,sn),e(sn,wVo),e(sn,pme),e(pme,AVo),e(sn,yVo),e(sn,_me),e(_me,LVo),e(sn,xVo),e(sn,ume),e(ume,kVo),e(sn,SVo),e(Ke,RVo),e(Ke,Re),e(Re,PF),e(PF,bme),e(bme,BVo),e(PF,PVo),e(PF,lG),e(lG,$Vo),e(PF,IVo),e(Re,qVo),e(Re,$F),e($F,Fme),e(Fme,NVo),e($F,jVo),e($F,iG),e(iG,DVo),e($F,GVo),e(Re,OVo),e(Re,IF),e(IF,vme),e(vme,VVo),e(IF,XVo),e(IF,dG),e(dG,zVo),e(IF,QVo),e(Re,WVo),e(Re,qF),e(qF,Tme),e(Tme,HVo),e(qF,UVo),e(qF,cG),e(cG,JVo),e(qF,YVo),e(Re,KVo),e(Re,NF),e(NF,Mme),e(Mme,ZVo),e(NF,eXo),e(NF,fG),e(fG,oXo),e(NF,rXo),e(Re,tXo),e(Re,jF),e(jF,Eme),e(Eme,aXo),e(jF,nXo),e(jF,mG),e(mG,sXo),e(jF,lXo),e(Re,iXo),e(Re,DF),e(DF,Cme),e(Cme,dXo),e(DF,cXo),e(DF,gG),e(gG,fXo),e(DF,mXo),e(Re,gXo),e(Re,GF),e(GF,wme),e(wme,hXo),e(GF,pXo),e(GF,hG),e(hG,_Xo),e(GF,uXo),e(Ke,bXo),e(Ke,OF),e(OF,FXo),e(OF,Ame),e(Ame,vXo),e(OF,TXo),e(OF,yme),e(yme,MXo),e(Ke,EXo),e(Ke,Lme),e(Lme,CXo),e(Ke,wXo),g(KA,Ke,null),b(c,xRe,u),b(c,zd,u),e(zd,VF),e(VF,xme),g(ZA,xme,null),e(zd,AXo),e(zd,kme),e(kme,yXo),b(c,kRe,u),b(c,mr,u),g(e0,mr,null),e(mr,LXo),e(mr,Qd),e(Qd,xXo),e(Qd,pG),e(pG,kXo),e(Qd,SXo),e(Qd,_G),e(_G,RXo),e(Qd,BXo),e(mr,PXo),e(mr,o0),e(o0,$Xo),e(o0,Sme),e(Sme,IXo),e(o0,qXo),e(mr,NXo),e(mr,st),g(r0,st,null),e(st,jXo),e(st,Rme),e(Rme,DXo),e(st,GXo),e(st,Wd),e(Wd,OXo),e(Wd,Bme),e(Bme,VXo),e(Wd,XXo),e(Wd,uG),e(uG,zXo),e(Wd,QXo),e(st,WXo),e(st,Pme),e(Pme,HXo),e(st,UXo),g(t0,st,null),e(mr,JXo),e(mr,Ze),g(a0,Ze,null),e(Ze,YXo),e(Ze,$me),e($me,KXo),e(Ze,ZXo),e(Ze,ln),e(ln,ezo),e(ln,Ime),e(Ime,ozo),e(ln,rzo),e(ln,qme),e(qme,tzo),e(ln,azo),e(ln,Nme),e(Nme,nzo),e(ln,szo),e(Ze,lzo),e(Ze,n0),e(n0,XF),e(XF,jme),e(jme,izo),e(XF,dzo),e(XF,bG),e(bG,czo),e(XF,fzo),e(n0,mzo),e(n0,zF),e(zF,Dme),e(Dme,gzo),e(zF,hzo),e(zF,FG),e(FG,pzo),e(zF,_zo),e(Ze,uzo),e(Ze,QF),e(QF,bzo),e(QF,Gme),e(Gme,Fzo),e(QF,vzo),e(QF,Ome),e(Ome,Tzo),e(Ze,Mzo),e(Ze,Vme),e(Vme,Ezo),e(Ze,Czo),g(s0,Ze,null),b(c,SRe,u),b(c,Hd,u),e(Hd,WF),e(WF,Xme),g(l0,Xme,null),e(Hd,wzo),e(Hd,zme),e(zme,Azo),b(c,RRe,u),b(c,gr,u),g(i0,gr,null),e(gr,yzo),e(gr,Ud),e(Ud,Lzo),e(Ud,vG),e(vG,xzo),e(Ud,kzo),e(Ud,TG),e(TG,Szo),e(Ud,Rzo),e(gr,Bzo),e(gr,d0),e(d0,Pzo),e(d0,Qme),e(Qme,$zo),e(d0,Izo),e(gr,qzo),e(gr,lt),g(c0,lt,null),e(lt,Nzo),e(lt,Wme),e(Wme,jzo),e(lt,Dzo),e(lt,Jd),e(Jd,Gzo),e(Jd,Hme),e(Hme,Ozo),e(Jd,Vzo),e(Jd,MG),e(MG,Xzo),e(Jd,zzo),e(lt,Qzo),e(lt,Ume),e(Ume,Wzo),e(lt,Hzo),g(f0,lt,null),e(gr,Uzo),e(gr,eo),g(m0,eo,null),e(eo,Jzo),e(eo,Jme),e(Jme,Yzo),e(eo,Kzo),e(eo,dn),e(dn,Zzo),e(dn,Yme),e(Yme,eQo),e(dn,oQo),e(dn,Kme),e(Kme,rQo),e(dn,tQo),e(dn,Zme),e(Zme,aQo),e(dn,nQo),e(eo,sQo),e(eo,cn),e(cn,HF),e(HF,ege),e(ege,lQo),e(HF,iQo),e(HF,EG),e(EG,dQo),e(HF,cQo),e(cn,fQo),e(cn,UF),e(UF,oge),e(oge,mQo),e(UF,gQo),e(UF,CG),e(CG,hQo),e(UF,pQo),e(cn,_Qo),e(cn,JF),e(JF,rge),e(rge,uQo),e(JF,bQo),e(JF,wG),e(wG,FQo),e(JF,vQo),e(cn,TQo),e(cn,YF),e(YF,tge),e(tge,MQo),e(YF,EQo),e(YF,AG),e(AG,CQo),e(YF,wQo),e(eo,AQo),e(eo,KF),e(KF,yQo),e(KF,age),e(age,LQo),e(KF,xQo),e(KF,nge),e(nge,kQo),e(eo,SQo),e(eo,sge),e(sge,RQo),e(eo,BQo),g(g0,eo,null),b(c,BRe,u),b(c,Yd,u),e(Yd,ZF),e(ZF,lge),g(h0,lge,null),e(Yd,PQo),e(Yd,ige),e(ige,$Qo),b(c,PRe,u),b(c,hr,u),g(p0,hr,null),e(hr,IQo),e(hr,Kd),e(Kd,qQo),e(Kd,yG),e(yG,NQo),e(Kd,jQo),e(Kd,LG),e(LG,DQo),e(Kd,GQo),e(hr,OQo),e(hr,_0),e(_0,VQo),e(_0,dge),e(dge,XQo),e(_0,zQo),e(hr,QQo),e(hr,it),g(u0,it,null),e(it,WQo),e(it,cge),e(cge,HQo),e(it,UQo),e(it,Zd),e(Zd,JQo),e(Zd,fge),e(fge,YQo),e(Zd,KQo),e(Zd,xG),e(xG,ZQo),e(Zd,eWo),e(it,oWo),e(it,mge),e(mge,rWo),e(it,tWo),g(b0,it,null),e(hr,aWo),e(hr,oo),g(F0,oo,null),e(oo,nWo),e(oo,gge),e(gge,sWo),e(oo,lWo),e(oo,fn),e(fn,iWo),e(fn,hge),e(hge,dWo),e(fn,cWo),e(fn,pge),e(pge,fWo),e(fn,mWo),e(fn,_ge),e(_ge,gWo),e(fn,hWo),e(oo,pWo),e(oo,ec),e(ec,ev),e(ev,uge),e(uge,_Wo),e(ev,uWo),e(ev,kG),e(kG,bWo),e(ev,FWo),e(ec,vWo),e(ec,ov),e(ov,bge),e(bge,TWo),e(ov,MWo),e(ov,SG),e(SG,EWo),e(ov,CWo),e(ec,wWo),e(ec,rv),e(rv,Fge),e(Fge,AWo),e(rv,yWo),e(rv,RG),e(RG,LWo),e(rv,xWo),e(oo,kWo),e(oo,tv),e(tv,SWo),e(tv,vge),e(vge,RWo),e(tv,BWo),e(tv,Tge),e(Tge,PWo),e(oo,$Wo),e(oo,Mge),e(Mge,IWo),e(oo,qWo),g(v0,oo,null),b(c,$Re,u),b(c,oc,u),e(oc,av),e(av,Ege),g(T0,Ege,null),e(oc,NWo),e(oc,Cge),e(Cge,jWo),b(c,IRe,u),b(c,pr,u),g(M0,pr,null),e(pr,DWo),e(pr,rc),e(rc,GWo),e(rc,BG),e(BG,OWo),e(rc,VWo),e(rc,PG),e(PG,XWo),e(rc,zWo),e(pr,QWo),e(pr,E0),e(E0,WWo),e(E0,wge),e(wge,HWo),e(E0,UWo),e(pr,JWo),e(pr,dt),g(C0,dt,null),e(dt,YWo),e(dt,Age),e(Age,KWo),e(dt,ZWo),e(dt,tc),e(tc,eHo),e(tc,yge),e(yge,oHo),e(tc,rHo),e(tc,$G),e($G,tHo),e(tc,aHo),e(dt,nHo),e(dt,Lge),e(Lge,sHo),e(dt,lHo),g(w0,dt,null),e(pr,iHo),e(pr,ro),g(A0,ro,null),e(ro,dHo),e(ro,xge),e(xge,cHo),e(ro,fHo),e(ro,mn),e(mn,mHo),e(mn,kge),e(kge,gHo),e(mn,hHo),e(mn,Sge),e(Sge,pHo),e(mn,_Ho),e(mn,Rge),e(Rge,uHo),e(mn,bHo),e(ro,FHo),e(ro,Bge),e(Bge,nv),e(nv,Pge),e(Pge,vHo),e(nv,THo),e(nv,IG),e(IG,MHo),e(nv,EHo),e(ro,CHo),e(ro,sv),e(sv,wHo),e(sv,$ge),e($ge,AHo),e(sv,yHo),e(sv,Ige),e(Ige,LHo),e(ro,xHo),e(ro,qge),e(qge,kHo),e(ro,SHo),g(y0,ro,null),b(c,qRe,u),b(c,ac,u),e(ac,lv),e(lv,Nge),g(L0,Nge,null),e(ac,RHo),e(ac,jge),e(jge,BHo),b(c,NRe,u),b(c,_r,u),g(x0,_r,null),e(_r,PHo),e(_r,nc),e(nc,$Ho),e(nc,qG),e(qG,IHo),e(nc,qHo),e(nc,NG),e(NG,NHo),e(nc,jHo),e(_r,DHo),e(_r,k0),e(k0,GHo),e(k0,Dge),e(Dge,OHo),e(k0,VHo),e(_r,XHo),e(_r,ct),g(S0,ct,null),e(ct,zHo),e(ct,Gge),e(Gge,QHo),e(ct,WHo),e(ct,sc),e(sc,HHo),e(sc,Oge),e(Oge,UHo),e(sc,JHo),e(sc,jG),e(jG,YHo),e(sc,KHo),e(ct,ZHo),e(ct,Vge),e(Vge,eUo),e(ct,oUo),g(R0,ct,null),e(_r,rUo),e(_r,to),g(B0,to,null),e(to,tUo),e(to,Xge),e(Xge,aUo),e(to,nUo),e(to,gn),e(gn,sUo),e(gn,zge),e(zge,lUo),e(gn,iUo),e(gn,Qge),e(Qge,dUo),e(gn,cUo),e(gn,Wge),e(Wge,fUo),e(gn,mUo),e(to,gUo),e(to,Hge),e(Hge,iv),e(iv,Uge),e(Uge,hUo),e(iv,pUo),e(iv,DG),e(DG,_Uo),e(iv,uUo),e(to,bUo),e(to,dv),e(dv,FUo),e(dv,Jge),e(Jge,vUo),e(dv,TUo),e(dv,Yge),e(Yge,MUo),e(to,EUo),e(to,Kge),e(Kge,CUo),e(to,wUo),g(P0,to,null),b(c,jRe,u),b(c,lc,u),e(lc,cv),e(cv,Zge),g($0,Zge,null),e(lc,AUo),e(lc,ehe),e(ehe,yUo),b(c,DRe,u),b(c,ur,u),g(I0,ur,null),e(ur,LUo),e(ur,ic),e(ic,xUo),e(ic,GG),e(GG,kUo),e(ic,SUo),e(ic,OG),e(OG,RUo),e(ic,BUo),e(ur,PUo),e(ur,q0),e(q0,$Uo),e(q0,ohe),e(ohe,IUo),e(q0,qUo),e(ur,NUo),e(ur,ft),g(N0,ft,null),e(ft,jUo),e(ft,rhe),e(rhe,DUo),e(ft,GUo),e(ft,dc),e(dc,OUo),e(dc,the),e(the,VUo),e(dc,XUo),e(dc,VG),e(VG,zUo),e(dc,QUo),e(ft,WUo),e(ft,ahe),e(ahe,HUo),e(ft,UUo),g(j0,ft,null),e(ur,JUo),e(ur,ao),g(D0,ao,null),e(ao,YUo),e(ao,nhe),e(nhe,KUo),e(ao,ZUo),e(ao,hn),e(hn,eJo),e(hn,she),e(she,oJo),e(hn,rJo),e(hn,lhe),e(lhe,tJo),e(hn,aJo),e(hn,ihe),e(ihe,nJo),e(hn,sJo),e(ao,lJo),e(ao,cc),e(cc,fv),e(fv,dhe),e(dhe,iJo),e(fv,dJo),e(fv,XG),e(XG,cJo),e(fv,fJo),e(cc,mJo),e(cc,mv),e(mv,che),e(che,gJo),e(mv,hJo),e(mv,zG),e(zG,pJo),e(mv,_Jo),e(cc,uJo),e(cc,gv),e(gv,fhe),e(fhe,bJo),e(gv,FJo),e(gv,QG),e(QG,vJo),e(gv,TJo),e(ao,MJo),e(ao,hv),e(hv,EJo),e(hv,mhe),e(mhe,CJo),e(hv,wJo),e(hv,ghe),e(ghe,AJo),e(ao,yJo),e(ao,hhe),e(hhe,LJo),e(ao,xJo),g(G0,ao,null),b(c,GRe,u),b(c,fc,u),e(fc,pv),e(pv,phe),g(O0,phe,null),e(fc,kJo),e(fc,_he),e(_he,SJo),b(c,ORe,u),b(c,br,u),g(V0,br,null),e(br,RJo),e(br,mc),e(mc,BJo),e(mc,WG),e(WG,PJo),e(mc,$Jo),e(mc,HG),e(HG,IJo),e(mc,qJo),e(br,NJo),e(br,X0),e(X0,jJo),e(X0,uhe),e(uhe,DJo),e(X0,GJo),e(br,OJo),e(br,mt),g(z0,mt,null),e(mt,VJo),e(mt,bhe),e(bhe,XJo),e(mt,zJo),e(mt,gc),e(gc,QJo),e(gc,Fhe),e(Fhe,WJo),e(gc,HJo),e(gc,UG),e(UG,UJo),e(gc,JJo),e(mt,YJo),e(mt,vhe),e(vhe,KJo),e(mt,ZJo),g(Q0,mt,null),e(br,eYo),e(br,no),g(W0,no,null),e(no,oYo),e(no,The),e(The,rYo),e(no,tYo),e(no,pn),e(pn,aYo),e(pn,Mhe),e(Mhe,nYo),e(pn,sYo),e(pn,Ehe),e(Ehe,lYo),e(pn,iYo),e(pn,Che),e(Che,dYo),e(pn,cYo),e(no,fYo),e(no,whe),e(whe,_v),e(_v,Ahe),e(Ahe,mYo),e(_v,gYo),e(_v,JG),e(JG,hYo),e(_v,pYo),e(no,_Yo),e(no,uv),e(uv,uYo),e(uv,yhe),e(yhe,bYo),e(uv,FYo),e(uv,Lhe),e(Lhe,vYo),e(no,TYo),e(no,xhe),e(xhe,MYo),e(no,EYo),g(H0,no,null),b(c,VRe,u),b(c,hc,u),e(hc,bv),e(bv,khe),g(U0,khe,null),e(hc,CYo),e(hc,She),e(She,wYo),b(c,XRe,u),b(c,Fr,u),g(J0,Fr,null),e(Fr,AYo),e(Fr,pc),e(pc,yYo),e(pc,YG),e(YG,LYo),e(pc,xYo),e(pc,KG),e(KG,kYo),e(pc,SYo),e(Fr,RYo),e(Fr,Y0),e(Y0,BYo),e(Y0,Rhe),e(Rhe,PYo),e(Y0,$Yo),e(Fr,IYo),e(Fr,gt),g(K0,gt,null),e(gt,qYo),e(gt,Bhe),e(Bhe,NYo),e(gt,jYo),e(gt,_c),e(_c,DYo),e(_c,Phe),e(Phe,GYo),e(_c,OYo),e(_c,ZG),e(ZG,VYo),e(_c,XYo),e(gt,zYo),e(gt,$he),e($he,QYo),e(gt,WYo),g(Z0,gt,null),e(Fr,HYo),e(Fr,ho),g(ey,ho,null),e(ho,UYo),e(ho,Ihe),e(Ihe,JYo),e(ho,YYo),e(ho,_n),e(_n,KYo),e(_n,qhe),e(qhe,ZYo),e(_n,eKo),e(_n,Nhe),e(Nhe,oKo),e(_n,rKo),e(_n,jhe),e(jhe,tKo),e(_n,aKo),e(ho,nKo),e(ho,x),e(x,Fv),e(Fv,Dhe),e(Dhe,sKo),e(Fv,lKo),e(Fv,eO),e(eO,iKo),e(Fv,dKo),e(x,cKo),e(x,vv),e(vv,Ghe),e(Ghe,fKo),e(vv,mKo),e(vv,oO),e(oO,gKo),e(vv,hKo),e(x,pKo),e(x,Tv),e(Tv,Ohe),e(Ohe,_Ko),e(Tv,uKo),e(Tv,rO),e(rO,bKo),e(Tv,FKo),e(x,vKo),e(x,Mv),e(Mv,Vhe),e(Vhe,TKo),e(Mv,MKo),e(Mv,tO),e(tO,EKo),e(Mv,CKo),e(x,wKo),e(x,Ev),e(Ev,Xhe),e(Xhe,AKo),e(Ev,yKo),e(Ev,aO),e(aO,LKo),e(Ev,xKo),e(x,kKo),e(x,Cv),e(Cv,zhe),e(zhe,SKo),e(Cv,RKo),e(Cv,nO),e(nO,BKo),e(Cv,PKo),e(x,$Ko),e(x,wv),e(wv,Qhe),e(Qhe,IKo),e(wv,qKo),e(wv,sO),e(sO,NKo),e(wv,jKo),e(x,DKo),e(x,Av),e(Av,Whe),e(Whe,GKo),e(Av,OKo),e(Av,lO),e(lO,VKo),e(Av,XKo),e(x,zKo),e(x,yv),e(yv,Hhe),e(Hhe,QKo),e(yv,WKo),e(yv,iO),e(iO,HKo),e(yv,UKo),e(x,JKo),e(x,Lv),e(Lv,Uhe),e(Uhe,YKo),e(Lv,KKo),e(Lv,dO),e(dO,ZKo),e(Lv,eZo),e(x,oZo),e(x,xv),e(xv,Jhe),e(Jhe,rZo),e(xv,tZo),e(xv,cO),e(cO,aZo),e(xv,nZo),e(x,sZo),e(x,kv),e(kv,Yhe),e(Yhe,lZo),e(kv,iZo),e(kv,fO),e(fO,dZo),e(kv,cZo),e(x,fZo),e(x,Sv),e(Sv,Khe),e(Khe,mZo),e(Sv,gZo),e(Sv,mO),e(mO,hZo),e(Sv,pZo),e(x,_Zo),e(x,Rv),e(Rv,Zhe),e(Zhe,uZo),e(Rv,bZo),e(Rv,gO),e(gO,FZo),e(Rv,vZo),e(x,TZo),e(x,Bv),e(Bv,epe),e(epe,MZo),e(Bv,EZo),e(Bv,hO),e(hO,CZo),e(Bv,wZo),e(x,AZo),e(x,Pv),e(Pv,ope),e(ope,yZo),e(Pv,LZo),e(Pv,pO),e(pO,xZo),e(Pv,kZo),e(x,SZo),e(x,Os),e(Os,rpe),e(rpe,RZo),e(Os,BZo),e(Os,_O),e(_O,PZo),e(Os,$Zo),e(Os,uO),e(uO,IZo),e(Os,qZo),e(x,NZo),e(x,$v),e($v,tpe),e(tpe,jZo),e($v,DZo),e($v,bO),e(bO,GZo),e($v,OZo),e(x,VZo),e(x,Iv),e(Iv,ape),e(ape,XZo),e(Iv,zZo),e(Iv,FO),e(FO,QZo),e(Iv,WZo),e(x,HZo),e(x,qv),e(qv,npe),e(npe,UZo),e(qv,JZo),e(qv,vO),e(vO,YZo),e(qv,KZo),e(x,ZZo),e(x,Nv),e(Nv,spe),e(spe,eer),e(Nv,oer),e(Nv,TO),e(TO,rer),e(Nv,ter),e(x,aer),e(x,jv),e(jv,lpe),e(lpe,ner),e(jv,ser),e(jv,MO),e(MO,ler),e(jv,ier),e(x,der),e(x,Dv),e(Dv,ipe),e(ipe,cer),e(Dv,fer),e(Dv,EO),e(EO,mer),e(Dv,ger),e(x,her),e(x,Gv),e(Gv,dpe),e(dpe,per),e(Gv,_er),e(Gv,CO),e(CO,uer),e(Gv,ber),e(x,Fer),e(x,Ov),e(Ov,cpe),e(cpe,ver),e(Ov,Ter),e(Ov,wO),e(wO,Mer),e(Ov,Eer),e(x,Cer),e(x,Vv),e(Vv,fpe),e(fpe,wer),e(Vv,Aer),e(Vv,AO),e(AO,yer),e(Vv,Ler),e(x,xer),e(x,Xv),e(Xv,mpe),e(mpe,ker),e(Xv,Ser),e(Xv,yO),e(yO,Rer),e(Xv,Ber),e(x,Per),e(x,zv),e(zv,gpe),e(gpe,$er),e(zv,Ier),e(zv,LO),e(LO,qer),e(zv,Ner),e(x,jer),e(x,Qv),e(Qv,hpe),e(hpe,Der),e(Qv,Ger),e(Qv,xO),e(xO,Oer),e(Qv,Ver),e(x,Xer),e(x,Wv),e(Wv,ppe),e(ppe,zer),e(Wv,Qer),e(Wv,kO),e(kO,Wer),e(Wv,Her),e(x,Uer),e(x,Hv),e(Hv,_pe),e(_pe,Jer),e(Hv,Yer),e(Hv,SO),e(SO,Ker),e(Hv,Zer),e(x,eor),e(x,Uv),e(Uv,upe),e(upe,oor),e(Uv,ror),e(Uv,RO),e(RO,tor),e(Uv,aor),e(x,nor),e(x,Jv),e(Jv,bpe),e(bpe,sor),e(Jv,lor),e(Jv,BO),e(BO,ior),e(Jv,dor),e(x,cor),e(x,Yv),e(Yv,Fpe),e(Fpe,mor),e(Yv,gor),e(Yv,PO),e(PO,hor),e(Yv,por),e(x,_or),e(x,Kv),e(Kv,vpe),e(vpe,uor),e(Kv,bor),e(Kv,$O),e($O,For),e(Kv,vor),e(x,Tor),e(x,Zv),e(Zv,Tpe),e(Tpe,Mor),e(Zv,Eor),e(Zv,IO),e(IO,Cor),e(Zv,wor),e(x,Aor),e(x,e6),e(e6,Mpe),e(Mpe,yor),e(e6,Lor),e(e6,qO),e(qO,xor),e(e6,kor),e(x,Sor),e(x,o6),e(o6,Epe),e(Epe,Ror),e(o6,Bor),e(o6,NO),e(NO,Por),e(o6,$or),e(x,Ior),e(x,r6),e(r6,Cpe),e(Cpe,qor),e(r6,Nor),e(r6,jO),e(jO,jor),e(r6,Dor),e(x,Gor),e(x,t6),e(t6,wpe),e(wpe,Oor),e(t6,Vor),e(t6,DO),e(DO,Xor),e(t6,zor),e(x,Qor),e(x,a6),e(a6,Ape),e(Ape,Wor),e(a6,Hor),e(a6,GO),e(GO,Uor),e(a6,Jor),e(x,Yor),e(x,n6),e(n6,ype),e(ype,Kor),e(n6,Zor),e(n6,OO),e(OO,err),e(n6,orr),e(x,rrr),e(x,s6),e(s6,Lpe),e(Lpe,trr),e(s6,arr),e(s6,VO),e(VO,nrr),e(s6,srr),e(x,lrr),e(x,l6),e(l6,xpe),e(xpe,irr),e(l6,drr),e(l6,XO),e(XO,crr),e(l6,frr),e(ho,mrr),e(ho,kpe),e(kpe,grr),e(ho,hrr),g(oy,ho,null),b(c,zRe,u),b(c,uc,u),e(uc,i6),e(i6,Spe),g(ry,Spe,null),e(uc,prr),e(uc,Rpe),e(Rpe,_rr),b(c,QRe,u),b(c,vr,u),g(ty,vr,null),e(vr,urr),e(vr,bc),e(bc,brr),e(bc,zO),e(zO,Frr),e(bc,vrr),e(bc,QO),e(QO,Trr),e(bc,Mrr),e(vr,Err),e(vr,ay),e(ay,Crr),e(ay,Bpe),e(Bpe,wrr),e(ay,Arr),e(vr,yrr),e(vr,ht),g(ny,ht,null),e(ht,Lrr),e(ht,Ppe),e(Ppe,xrr),e(ht,krr),e(ht,Fc),e(Fc,Srr),e(Fc,$pe),e($pe,Rrr),e(Fc,Brr),e(Fc,WO),e(WO,Prr),e(Fc,$rr),e(ht,Irr),e(ht,Ipe),e(Ipe,qrr),e(ht,Nrr),g(sy,ht,null),e(vr,jrr),e(vr,po),g(ly,po,null),e(po,Drr),e(po,qpe),e(qpe,Grr),e(po,Orr),e(po,un),e(un,Vrr),e(un,Npe),e(Npe,Xrr),e(un,zrr),e(un,jpe),e(jpe,Qrr),e(un,Wrr),e(un,Dpe),e(Dpe,Hrr),e(un,Urr),e(po,Jrr),e(po,H),e(H,d6),e(d6,Gpe),e(Gpe,Yrr),e(d6,Krr),e(d6,HO),e(HO,Zrr),e(d6,etr),e(H,otr),e(H,c6),e(c6,Ope),e(Ope,rtr),e(c6,ttr),e(c6,UO),e(UO,atr),e(c6,ntr),e(H,str),e(H,f6),e(f6,Vpe),e(Vpe,ltr),e(f6,itr),e(f6,JO),e(JO,dtr),e(f6,ctr),e(H,ftr),e(H,m6),e(m6,Xpe),e(Xpe,mtr),e(m6,gtr),e(m6,YO),e(YO,htr),e(m6,ptr),e(H,_tr),e(H,g6),e(g6,zpe),e(zpe,utr),e(g6,btr),e(g6,KO),e(KO,Ftr),e(g6,vtr),e(H,Ttr),e(H,h6),e(h6,Qpe),e(Qpe,Mtr),e(h6,Etr),e(h6,ZO),e(ZO,Ctr),e(h6,wtr),e(H,Atr),e(H,p6),e(p6,Wpe),e(Wpe,ytr),e(p6,Ltr),e(p6,eV),e(eV,xtr),e(p6,ktr),e(H,Str),e(H,_6),e(_6,Hpe),e(Hpe,Rtr),e(_6,Btr),e(_6,oV),e(oV,Ptr),e(_6,$tr),e(H,Itr),e(H,u6),e(u6,Upe),e(Upe,qtr),e(u6,Ntr),e(u6,rV),e(rV,jtr),e(u6,Dtr),e(H,Gtr),e(H,b6),e(b6,Jpe),e(Jpe,Otr),e(b6,Vtr),e(b6,tV),e(tV,Xtr),e(b6,ztr),e(H,Qtr),e(H,F6),e(F6,Ype),e(Ype,Wtr),e(F6,Htr),e(F6,aV),e(aV,Utr),e(F6,Jtr),e(H,Ytr),e(H,v6),e(v6,Kpe),e(Kpe,Ktr),e(v6,Ztr),e(v6,nV),e(nV,ear),e(v6,oar),e(H,rar),e(H,T6),e(T6,Zpe),e(Zpe,tar),e(T6,aar),e(T6,sV),e(sV,nar),e(T6,sar),e(H,lar),e(H,M6),e(M6,e_e),e(e_e,iar),e(M6,dar),e(M6,lV),e(lV,car),e(M6,far),e(H,mar),e(H,E6),e(E6,o_e),e(o_e,gar),e(E6,har),e(E6,iV),e(iV,par),e(E6,_ar),e(H,uar),e(H,C6),e(C6,r_e),e(r_e,bar),e(C6,Far),e(C6,dV),e(dV,Tar),e(C6,Mar),e(H,Ear),e(H,w6),e(w6,t_e),e(t_e,Car),e(w6,war),e(w6,cV),e(cV,Aar),e(w6,yar),e(H,Lar),e(H,A6),e(A6,a_e),e(a_e,xar),e(A6,kar),e(A6,fV),e(fV,Sar),e(A6,Rar),e(H,Bar),e(H,y6),e(y6,n_e),e(n_e,Par),e(y6,$ar),e(y6,mV),e(mV,Iar),e(y6,qar),e(H,Nar),e(H,L6),e(L6,s_e),e(s_e,jar),e(L6,Dar),e(L6,gV),e(gV,Gar),e(L6,Oar),e(H,Var),e(H,x6),e(x6,l_e),e(l_e,Xar),e(x6,zar),e(x6,hV),e(hV,Qar),e(x6,War),e(H,Har),e(H,k6),e(k6,i_e),e(i_e,Uar),e(k6,Jar),e(k6,pV),e(pV,Yar),e(k6,Kar),e(H,Zar),e(H,S6),e(S6,d_e),e(d_e,enr),e(S6,onr),e(S6,_V),e(_V,rnr),e(S6,tnr),e(po,anr),e(po,c_e),e(c_e,nnr),e(po,snr),g(iy,po,null),b(c,WRe,u),b(c,vc,u),e(vc,R6),e(R6,f_e),g(dy,f_e,null),e(vc,lnr),e(vc,m_e),e(m_e,inr),b(c,HRe,u),b(c,Tr,u),g(cy,Tr,null),e(Tr,dnr),e(Tr,Tc),e(Tc,cnr),e(Tc,uV),e(uV,fnr),e(Tc,mnr),e(Tc,bV),e(bV,gnr),e(Tc,hnr),e(Tr,pnr),e(Tr,fy),e(fy,_nr),e(fy,g_e),e(g_e,unr),e(fy,bnr),e(Tr,Fnr),e(Tr,pt),g(my,pt,null),e(pt,vnr),e(pt,h_e),e(h_e,Tnr),e(pt,Mnr),e(pt,Mc),e(Mc,Enr),e(Mc,p_e),e(p_e,Cnr),e(Mc,wnr),e(Mc,FV),e(FV,Anr),e(Mc,ynr),e(pt,Lnr),e(pt,__e),e(__e,xnr),e(pt,knr),g(gy,pt,null),e(Tr,Snr),e(Tr,_o),g(hy,_o,null),e(_o,Rnr),e(_o,u_e),e(u_e,Bnr),e(_o,Pnr),e(_o,bn),e(bn,$nr),e(bn,b_e),e(b_e,Inr),e(bn,qnr),e(bn,F_e),e(F_e,Nnr),e(bn,jnr),e(bn,v_e),e(v_e,Dnr),e(bn,Gnr),e(_o,Onr),e(_o,ce),e(ce,B6),e(B6,T_e),e(T_e,Vnr),e(B6,Xnr),e(B6,vV),e(vV,znr),e(B6,Qnr),e(ce,Wnr),e(ce,P6),e(P6,M_e),e(M_e,Hnr),e(P6,Unr),e(P6,TV),e(TV,Jnr),e(P6,Ynr),e(ce,Knr),e(ce,$6),e($6,E_e),e(E_e,Znr),e($6,esr),e($6,MV),e(MV,osr),e($6,rsr),e(ce,tsr),e(ce,I6),e(I6,C_e),e(C_e,asr),e(I6,nsr),e(I6,EV),e(EV,ssr),e(I6,lsr),e(ce,isr),e(ce,q6),e(q6,w_e),e(w_e,dsr),e(q6,csr),e(q6,CV),e(CV,fsr),e(q6,msr),e(ce,gsr),e(ce,N6),e(N6,A_e),e(A_e,hsr),e(N6,psr),e(N6,wV),e(wV,_sr),e(N6,usr),e(ce,bsr),e(ce,j6),e(j6,y_e),e(y_e,Fsr),e(j6,vsr),e(j6,AV),e(AV,Tsr),e(j6,Msr),e(ce,Esr),e(ce,D6),e(D6,L_e),e(L_e,Csr),e(D6,wsr),e(D6,yV),e(yV,Asr),e(D6,ysr),e(ce,Lsr),e(ce,G6),e(G6,x_e),e(x_e,xsr),e(G6,ksr),e(G6,LV),e(LV,Ssr),e(G6,Rsr),e(ce,Bsr),e(ce,O6),e(O6,k_e),e(k_e,Psr),e(O6,$sr),e(O6,xV),e(xV,Isr),e(O6,qsr),e(ce,Nsr),e(ce,V6),e(V6,S_e),e(S_e,jsr),e(V6,Dsr),e(V6,kV),e(kV,Gsr),e(V6,Osr),e(ce,Vsr),e(ce,X6),e(X6,R_e),e(R_e,Xsr),e(X6,zsr),e(X6,SV),e(SV,Qsr),e(X6,Wsr),e(_o,Hsr),e(_o,B_e),e(B_e,Usr),e(_o,Jsr),g(py,_o,null),b(c,URe,u),b(c,Ec,u),e(Ec,z6),e(z6,P_e),g(_y,P_e,null),e(Ec,Ysr),e(Ec,$_e),e($_e,Ksr),b(c,JRe,u),b(c,Mr,u),g(uy,Mr,null),e(Mr,Zsr),e(Mr,Cc),e(Cc,elr),e(Cc,RV),e(RV,olr),e(Cc,rlr),e(Cc,BV),e(BV,tlr),e(Cc,alr),e(Mr,nlr),e(Mr,by),e(by,slr),e(by,I_e),e(I_e,llr),e(by,ilr),e(Mr,dlr),e(Mr,_t),g(Fy,_t,null),e(_t,clr),e(_t,q_e),e(q_e,flr),e(_t,mlr),e(_t,wc),e(wc,glr),e(wc,N_e),e(N_e,hlr),e(wc,plr),e(wc,PV),e(PV,_lr),e(wc,ulr),e(_t,blr),e(_t,j_e),e(j_e,Flr),e(_t,vlr),g(vy,_t,null),e(Mr,Tlr),e(Mr,uo),g(Ty,uo,null),e(uo,Mlr),e(uo,D_e),e(D_e,Elr),e(uo,Clr),e(uo,Fn),e(Fn,wlr),e(Fn,G_e),e(G_e,Alr),e(Fn,ylr),e(Fn,O_e),e(O_e,Llr),e(Fn,xlr),e(Fn,V_e),e(V_e,klr),e(Fn,Slr),e(uo,Rlr),e(uo,My),e(My,Q6),e(Q6,X_e),e(X_e,Blr),e(Q6,Plr),e(Q6,$V),e($V,$lr),e(Q6,Ilr),e(My,qlr),e(My,W6),e(W6,z_e),e(z_e,Nlr),e(W6,jlr),e(W6,IV),e(IV,Dlr),e(W6,Glr),e(uo,Olr),e(uo,Q_e),e(Q_e,Vlr),e(uo,Xlr),g(Ey,uo,null),b(c,YRe,u),b(c,Ac,u),e(Ac,H6),e(H6,W_e),g(Cy,W_e,null),e(Ac,zlr),e(Ac,H_e),e(H_e,Qlr),b(c,KRe,u),b(c,Er,u),g(wy,Er,null),e(Er,Wlr),e(Er,yc),e(yc,Hlr),e(yc,qV),e(qV,Ulr),e(yc,Jlr),e(yc,NV),e(NV,Ylr),e(yc,Klr),e(Er,Zlr),e(Er,Ay),e(Ay,eir),e(Ay,U_e),e(U_e,oir),e(Ay,rir),e(Er,tir),e(Er,ut),g(yy,ut,null),e(ut,air),e(ut,J_e),e(J_e,nir),e(ut,sir),e(ut,Lc),e(Lc,lir),e(Lc,Y_e),e(Y_e,iir),e(Lc,dir),e(Lc,jV),e(jV,cir),e(Lc,fir),e(ut,mir),e(ut,K_e),e(K_e,gir),e(ut,hir),g(Ly,ut,null),e(Er,pir),e(Er,bo),g(xy,bo,null),e(bo,_ir),e(bo,Z_e),e(Z_e,uir),e(bo,bir),e(bo,vn),e(vn,Fir),e(vn,eue),e(eue,vir),e(vn,Tir),e(vn,oue),e(oue,Mir),e(vn,Eir),e(vn,rue),e(rue,Cir),e(vn,wir),e(bo,Air),e(bo,J),e(J,U6),e(U6,tue),e(tue,yir),e(U6,Lir),e(U6,DV),e(DV,xir),e(U6,kir),e(J,Sir),e(J,J6),e(J6,aue),e(aue,Rir),e(J6,Bir),e(J6,GV),e(GV,Pir),e(J6,$ir),e(J,Iir),e(J,Y6),e(Y6,nue),e(nue,qir),e(Y6,Nir),e(Y6,OV),e(OV,jir),e(Y6,Dir),e(J,Gir),e(J,K6),e(K6,sue),e(sue,Oir),e(K6,Vir),e(K6,VV),e(VV,Xir),e(K6,zir),e(J,Qir),e(J,Z6),e(Z6,lue),e(lue,Wir),e(Z6,Hir),e(Z6,XV),e(XV,Uir),e(Z6,Jir),e(J,Yir),e(J,eT),e(eT,iue),e(iue,Kir),e(eT,Zir),e(eT,zV),e(zV,edr),e(eT,odr),e(J,rdr),e(J,oT),e(oT,due),e(due,tdr),e(oT,adr),e(oT,QV),e(QV,ndr),e(oT,sdr),e(J,ldr),e(J,rT),e(rT,cue),e(cue,idr),e(rT,ddr),e(rT,WV),e(WV,cdr),e(rT,fdr),e(J,mdr),e(J,tT),e(tT,fue),e(fue,gdr),e(tT,hdr),e(tT,HV),e(HV,pdr),e(tT,_dr),e(J,udr),e(J,aT),e(aT,mue),e(mue,bdr),e(aT,Fdr),e(aT,UV),e(UV,vdr),e(aT,Tdr),e(J,Mdr),e(J,nT),e(nT,gue),e(gue,Edr),e(nT,Cdr),e(nT,JV),e(JV,wdr),e(nT,Adr),e(J,ydr),e(J,sT),e(sT,hue),e(hue,Ldr),e(sT,xdr),e(sT,YV),e(YV,kdr),e(sT,Sdr),e(J,Rdr),e(J,lT),e(lT,pue),e(pue,Bdr),e(lT,Pdr),e(lT,KV),e(KV,$dr),e(lT,Idr),e(J,qdr),e(J,iT),e(iT,_ue),e(_ue,Ndr),e(iT,jdr),e(iT,ZV),e(ZV,Ddr),e(iT,Gdr),e(J,Odr),e(J,dT),e(dT,uue),e(uue,Vdr),e(dT,Xdr),e(dT,eX),e(eX,zdr),e(dT,Qdr),e(J,Wdr),e(J,cT),e(cT,bue),e(bue,Hdr),e(cT,Udr),e(cT,oX),e(oX,Jdr),e(cT,Ydr),e(J,Kdr),e(J,fT),e(fT,Fue),e(Fue,Zdr),e(fT,ecr),e(fT,rX),e(rX,ocr),e(fT,rcr),e(J,tcr),e(J,mT),e(mT,vue),e(vue,acr),e(mT,ncr),e(mT,tX),e(tX,scr),e(mT,lcr),e(J,icr),e(J,gT),e(gT,Tue),e(Tue,dcr),e(gT,ccr),e(gT,aX),e(aX,fcr),e(gT,mcr),e(J,gcr),e(J,hT),e(hT,Mue),e(Mue,hcr),e(hT,pcr),e(hT,nX),e(nX,_cr),e(hT,ucr),e(bo,bcr),e(bo,Eue),e(Eue,Fcr),e(bo,vcr),g(ky,bo,null),b(c,ZRe,u),b(c,xc,u),e(xc,pT),e(pT,Cue),g(Sy,Cue,null),e(xc,Tcr),e(xc,wue),e(wue,Mcr),b(c,eBe,u),b(c,Cr,u),g(Ry,Cr,null),e(Cr,Ecr),e(Cr,kc),e(kc,Ccr),e(kc,sX),e(sX,wcr),e(kc,Acr),e(kc,lX),e(lX,ycr),e(kc,Lcr),e(Cr,xcr),e(Cr,By),e(By,kcr),e(By,Aue),e(Aue,Scr),e(By,Rcr),e(Cr,Bcr),e(Cr,bt),g(Py,bt,null),e(bt,Pcr),e(bt,yue),e(yue,$cr),e(bt,Icr),e(bt,Sc),e(Sc,qcr),e(Sc,Lue),e(Lue,Ncr),e(Sc,jcr),e(Sc,iX),e(iX,Dcr),e(Sc,Gcr),e(bt,Ocr),e(bt,xue),e(xue,Vcr),e(bt,Xcr),g($y,bt,null),e(Cr,zcr),e(Cr,Fo),g(Iy,Fo,null),e(Fo,Qcr),e(Fo,kue),e(kue,Wcr),e(Fo,Hcr),e(Fo,Tn),e(Tn,Ucr),e(Tn,Sue),e(Sue,Jcr),e(Tn,Ycr),e(Tn,Rue),e(Rue,Kcr),e(Tn,Zcr),e(Tn,Bue),e(Bue,efr),e(Tn,ofr),e(Fo,rfr),e(Fo,ue),e(ue,_T),e(_T,Pue),e(Pue,tfr),e(_T,afr),e(_T,dX),e(dX,nfr),e(_T,sfr),e(ue,lfr),e(ue,uT),e(uT,$ue),e($ue,ifr),e(uT,dfr),e(uT,cX),e(cX,cfr),e(uT,ffr),e(ue,mfr),e(ue,bT),e(bT,Iue),e(Iue,gfr),e(bT,hfr),e(bT,fX),e(fX,pfr),e(bT,_fr),e(ue,ufr),e(ue,FT),e(FT,que),e(que,bfr),e(FT,Ffr),e(FT,mX),e(mX,vfr),e(FT,Tfr),e(ue,Mfr),e(ue,vT),e(vT,Nue),e(Nue,Efr),e(vT,Cfr),e(vT,gX),e(gX,wfr),e(vT,Afr),e(ue,yfr),e(ue,TT),e(TT,jue),e(jue,Lfr),e(TT,xfr),e(TT,hX),e(hX,kfr),e(TT,Sfr),e(ue,Rfr),e(ue,MT),e(MT,Due),e(Due,Bfr),e(MT,Pfr),e(MT,pX),e(pX,$fr),e(MT,Ifr),e(ue,qfr),e(ue,ET),e(ET,Gue),e(Gue,Nfr),e(ET,jfr),e(ET,_X),e(_X,Dfr),e(ET,Gfr),e(ue,Ofr),e(ue,CT),e(CT,Oue),e(Oue,Vfr),e(CT,Xfr),e(CT,uX),e(uX,zfr),e(CT,Qfr),e(ue,Wfr),e(ue,wT),e(wT,Vue),e(Vue,Hfr),e(wT,Ufr),e(wT,bX),e(bX,Jfr),e(wT,Yfr),e(Fo,Kfr),e(Fo,Xue),e(Xue,Zfr),e(Fo,emr),g(qy,Fo,null),b(c,oBe,u),b(c,Rc,u),e(Rc,AT),e(AT,zue),g(Ny,zue,null),e(Rc,omr),e(Rc,Que),e(Que,rmr),b(c,rBe,u),b(c,wr,u),g(jy,wr,null),e(wr,tmr),e(wr,Bc),e(Bc,amr),e(Bc,FX),e(FX,nmr),e(Bc,smr),e(Bc,vX),e(vX,lmr),e(Bc,imr),e(wr,dmr),e(wr,Dy),e(Dy,cmr),e(Dy,Wue),e(Wue,fmr),e(Dy,mmr),e(wr,gmr),e(wr,Ft),g(Gy,Ft,null),e(Ft,hmr),e(Ft,Hue),e(Hue,pmr),e(Ft,_mr),e(Ft,Pc),e(Pc,umr),e(Pc,Uue),e(Uue,bmr),e(Pc,Fmr),e(Pc,TX),e(TX,vmr),e(Pc,Tmr),e(Ft,Mmr),e(Ft,Jue),e(Jue,Emr),e(Ft,Cmr),g(Oy,Ft,null),e(wr,wmr),e(wr,vo),g(Vy,vo,null),e(vo,Amr),e(vo,Yue),e(Yue,ymr),e(vo,Lmr),e(vo,Mn),e(Mn,xmr),e(Mn,Kue),e(Kue,kmr),e(Mn,Smr),e(Mn,Zue),e(Zue,Rmr),e(Mn,Bmr),e(Mn,e1e),e(e1e,Pmr),e(Mn,$mr),e(vo,Imr),e(vo,V),e(V,yT),e(yT,o1e),e(o1e,qmr),e(yT,Nmr),e(yT,MX),e(MX,jmr),e(yT,Dmr),e(V,Gmr),e(V,LT),e(LT,r1e),e(r1e,Omr),e(LT,Vmr),e(LT,EX),e(EX,Xmr),e(LT,zmr),e(V,Qmr),e(V,xT),e(xT,t1e),e(t1e,Wmr),e(xT,Hmr),e(xT,CX),e(CX,Umr),e(xT,Jmr),e(V,Ymr),e(V,kT),e(kT,a1e),e(a1e,Kmr),e(kT,Zmr),e(kT,wX),e(wX,egr),e(kT,ogr),e(V,rgr),e(V,ST),e(ST,n1e),e(n1e,tgr),e(ST,agr),e(ST,AX),e(AX,ngr),e(ST,sgr),e(V,lgr),e(V,RT),e(RT,s1e),e(s1e,igr),e(RT,dgr),e(RT,yX),e(yX,cgr),e(RT,fgr),e(V,mgr),e(V,BT),e(BT,l1e),e(l1e,ggr),e(BT,hgr),e(BT,LX),e(LX,pgr),e(BT,_gr),e(V,ugr),e(V,PT),e(PT,i1e),e(i1e,bgr),e(PT,Fgr),e(PT,xX),e(xX,vgr),e(PT,Tgr),e(V,Mgr),e(V,$T),e($T,d1e),e(d1e,Egr),e($T,Cgr),e($T,kX),e(kX,wgr),e($T,Agr),e(V,ygr),e(V,IT),e(IT,c1e),e(c1e,Lgr),e(IT,xgr),e(IT,SX),e(SX,kgr),e(IT,Sgr),e(V,Rgr),e(V,qT),e(qT,f1e),e(f1e,Bgr),e(qT,Pgr),e(qT,RX),e(RX,$gr),e(qT,Igr),e(V,qgr),e(V,NT),e(NT,m1e),e(m1e,Ngr),e(NT,jgr),e(NT,BX),e(BX,Dgr),e(NT,Ggr),e(V,Ogr),e(V,jT),e(jT,g1e),e(g1e,Vgr),e(jT,Xgr),e(jT,PX),e(PX,zgr),e(jT,Qgr),e(V,Wgr),e(V,DT),e(DT,h1e),e(h1e,Hgr),e(DT,Ugr),e(DT,$X),e($X,Jgr),e(DT,Ygr),e(V,Kgr),e(V,GT),e(GT,p1e),e(p1e,Zgr),e(GT,ehr),e(GT,IX),e(IX,ohr),e(GT,rhr),e(V,thr),e(V,OT),e(OT,_1e),e(_1e,ahr),e(OT,nhr),e(OT,qX),e(qX,shr),e(OT,lhr),e(V,ihr),e(V,VT),e(VT,u1e),e(u1e,dhr),e(VT,chr),e(VT,NX),e(NX,fhr),e(VT,mhr),e(V,ghr),e(V,XT),e(XT,b1e),e(b1e,hhr),e(XT,phr),e(XT,jX),e(jX,_hr),e(XT,uhr),e(V,bhr),e(V,zT),e(zT,F1e),e(F1e,Fhr),e(zT,vhr),e(zT,DX),e(DX,Thr),e(zT,Mhr),e(V,Ehr),e(V,QT),e(QT,v1e),e(v1e,Chr),e(QT,whr),e(QT,GX),e(GX,Ahr),e(QT,yhr),e(V,Lhr),e(V,WT),e(WT,T1e),e(T1e,xhr),e(WT,khr),e(WT,OX),e(OX,Shr),e(WT,Rhr),e(V,Bhr),e(V,HT),e(HT,M1e),e(M1e,Phr),e(HT,$hr),e(HT,VX),e(VX,Ihr),e(HT,qhr),e(V,Nhr),e(V,UT),e(UT,E1e),e(E1e,jhr),e(UT,Dhr),e(UT,XX),e(XX,Ghr),e(UT,Ohr),e(V,Vhr),e(V,JT),e(JT,C1e),e(C1e,Xhr),e(JT,zhr),e(JT,zX),e(zX,Qhr),e(JT,Whr),e(V,Hhr),e(V,YT),e(YT,w1e),e(w1e,Uhr),e(YT,Jhr),e(YT,QX),e(QX,Yhr),e(YT,Khr),e(V,Zhr),e(V,KT),e(KT,A1e),e(A1e,epr),e(KT,opr),e(KT,WX),e(WX,rpr),e(KT,tpr),e(vo,apr),e(vo,y1e),e(y1e,npr),e(vo,spr),g(Xy,vo,null),b(c,tBe,u),b(c,$c,u),e($c,ZT),e(ZT,L1e),g(zy,L1e,null),e($c,lpr),e($c,x1e),e(x1e,ipr),b(c,aBe,u),b(c,Ar,u),g(Qy,Ar,null),e(Ar,dpr),e(Ar,Ic),e(Ic,cpr),e(Ic,HX),e(HX,fpr),e(Ic,mpr),e(Ic,UX),e(UX,gpr),e(Ic,hpr),e(Ar,ppr),e(Ar,Wy),e(Wy,_pr),e(Wy,k1e),e(k1e,upr),e(Wy,bpr),e(Ar,Fpr),e(Ar,vt),g(Hy,vt,null),e(vt,vpr),e(vt,S1e),e(S1e,Tpr),e(vt,Mpr),e(vt,qc),e(qc,Epr),e(qc,R1e),e(R1e,Cpr),e(qc,wpr),e(qc,JX),e(JX,Apr),e(qc,ypr),e(vt,Lpr),e(vt,B1e),e(B1e,xpr),e(vt,kpr),g(Uy,vt,null),e(Ar,Spr),e(Ar,To),g(Jy,To,null),e(To,Rpr),e(To,P1e),e(P1e,Bpr),e(To,Ppr),e(To,En),e(En,$pr),e(En,$1e),e($1e,Ipr),e(En,qpr),e(En,I1e),e(I1e,Npr),e(En,jpr),e(En,q1e),e(q1e,Dpr),e(En,Gpr),e(To,Opr),e(To,ae),e(ae,eM),e(eM,N1e),e(N1e,Vpr),e(eM,Xpr),e(eM,YX),e(YX,zpr),e(eM,Qpr),e(ae,Wpr),e(ae,oM),e(oM,j1e),e(j1e,Hpr),e(oM,Upr),e(oM,KX),e(KX,Jpr),e(oM,Ypr),e(ae,Kpr),e(ae,rM),e(rM,D1e),e(D1e,Zpr),e(rM,e_r),e(rM,ZX),e(ZX,o_r),e(rM,r_r),e(ae,t_r),e(ae,tM),e(tM,G1e),e(G1e,a_r),e(tM,n_r),e(tM,ez),e(ez,s_r),e(tM,l_r),e(ae,i_r),e(ae,aM),e(aM,O1e),e(O1e,d_r),e(aM,c_r),e(aM,oz),e(oz,f_r),e(aM,m_r),e(ae,g_r),e(ae,nM),e(nM,V1e),e(V1e,h_r),e(nM,p_r),e(nM,rz),e(rz,__r),e(nM,u_r),e(ae,b_r),e(ae,sM),e(sM,X1e),e(X1e,F_r),e(sM,v_r),e(sM,tz),e(tz,T_r),e(sM,M_r),e(ae,E_r),e(ae,lM),e(lM,z1e),e(z1e,C_r),e(lM,w_r),e(lM,az),e(az,A_r),e(lM,y_r),e(ae,L_r),e(ae,iM),e(iM,Q1e),e(Q1e,x_r),e(iM,k_r),e(iM,nz),e(nz,S_r),e(iM,R_r),e(ae,B_r),e(ae,dM),e(dM,W1e),e(W1e,P_r),e(dM,$_r),e(dM,sz),e(sz,I_r),e(dM,q_r),e(ae,N_r),e(ae,cM),e(cM,H1e),e(H1e,j_r),e(cM,D_r),e(cM,lz),e(lz,G_r),e(cM,O_r),e(ae,V_r),e(ae,fM),e(fM,U1e),e(U1e,X_r),e(fM,z_r),e(fM,iz),e(iz,Q_r),e(fM,W_r),e(ae,H_r),e(ae,mM),e(mM,J1e),e(J1e,U_r),e(mM,J_r),e(mM,dz),e(dz,Y_r),e(mM,K_r),e(ae,Z_r),e(ae,gM),e(gM,Y1e),e(Y1e,eur),e(gM,our),e(gM,cz),e(cz,rur),e(gM,tur),e(ae,aur),e(ae,hM),e(hM,K1e),e(K1e,nur),e(hM,sur),e(hM,fz),e(fz,lur),e(hM,iur),e(ae,dur),e(ae,pM),e(pM,Z1e),e(Z1e,cur),e(pM,fur),e(pM,mz),e(mz,mur),e(pM,gur),e(ae,hur),e(ae,_M),e(_M,e5e),e(e5e,pur),e(_M,_ur),e(_M,gz),e(gz,uur),e(_M,bur),e(To,Fur),e(To,o5e),e(o5e,vur),e(To,Tur),g(Yy,To,null),b(c,nBe,u),b(c,Nc,u),e(Nc,uM),e(uM,r5e),g(Ky,r5e,null),e(Nc,Mur),e(Nc,t5e),e(t5e,Eur),b(c,sBe,u),b(c,yr,u),g(Zy,yr,null),e(yr,Cur),e(yr,jc),e(jc,wur),e(jc,hz),e(hz,Aur),e(jc,yur),e(jc,pz),e(pz,Lur),e(jc,xur),e(yr,kur),e(yr,eL),e(eL,Sur),e(eL,a5e),e(a5e,Rur),e(eL,Bur),e(yr,Pur),e(yr,Tt),g(oL,Tt,null),e(Tt,$ur),e(Tt,n5e),e(n5e,Iur),e(Tt,qur),e(Tt,Dc),e(Dc,Nur),e(Dc,s5e),e(s5e,jur),e(Dc,Dur),e(Dc,_z),e(_z,Gur),e(Dc,Our),e(Tt,Vur),e(Tt,l5e),e(l5e,Xur),e(Tt,zur),g(rL,Tt,null),e(yr,Qur),e(yr,Mo),g(tL,Mo,null),e(Mo,Wur),e(Mo,i5e),e(i5e,Hur),e(Mo,Uur),e(Mo,Cn),e(Cn,Jur),e(Cn,d5e),e(d5e,Yur),e(Cn,Kur),e(Cn,c5e),e(c5e,Zur),e(Cn,e1r),e(Cn,f5e),e(f5e,o1r),e(Cn,r1r),e(Mo,t1r),e(Mo,m5e),e(m5e,bM),e(bM,g5e),e(g5e,a1r),e(bM,n1r),e(bM,uz),e(uz,s1r),e(bM,l1r),e(Mo,i1r),e(Mo,h5e),e(h5e,d1r),e(Mo,c1r),g(aL,Mo,null),b(c,lBe,u),b(c,Gc,u),e(Gc,FM),e(FM,p5e),g(nL,p5e,null),e(Gc,f1r),e(Gc,_5e),e(_5e,m1r),b(c,iBe,u),b(c,Lr,u),g(sL,Lr,null),e(Lr,g1r),e(Lr,Oc),e(Oc,h1r),e(Oc,bz),e(bz,p1r),e(Oc,_1r),e(Oc,Fz),e(Fz,u1r),e(Oc,b1r),e(Lr,F1r),e(Lr,lL),e(lL,v1r),e(lL,u5e),e(u5e,T1r),e(lL,M1r),e(Lr,E1r),e(Lr,Mt),g(iL,Mt,null),e(Mt,C1r),e(Mt,b5e),e(b5e,w1r),e(Mt,A1r),e(Mt,Vc),e(Vc,y1r),e(Vc,F5e),e(F5e,L1r),e(Vc,x1r),e(Vc,vz),e(vz,k1r),e(Vc,S1r),e(Mt,R1r),e(Mt,v5e),e(v5e,B1r),e(Mt,P1r),g(dL,Mt,null),e(Lr,$1r),e(Lr,Eo),g(cL,Eo,null),e(Eo,I1r),e(Eo,T5e),e(T5e,q1r),e(Eo,N1r),e(Eo,wn),e(wn,j1r),e(wn,M5e),e(M5e,D1r),e(wn,G1r),e(wn,E5e),e(E5e,O1r),e(wn,V1r),e(wn,C5e),e(C5e,X1r),e(wn,z1r),e(Eo,Q1r),e(Eo,Y),e(Y,vM),e(vM,w5e),e(w5e,W1r),e(vM,H1r),e(vM,Tz),e(Tz,U1r),e(vM,J1r),e(Y,Y1r),e(Y,TM),e(TM,A5e),e(A5e,K1r),e(TM,Z1r),e(TM,Mz),e(Mz,e5r),e(TM,o5r),e(Y,r5r),e(Y,MM),e(MM,y5e),e(y5e,t5r),e(MM,a5r),e(MM,Ez),e(Ez,n5r),e(MM,s5r),e(Y,l5r),e(Y,EM),e(EM,L5e),e(L5e,i5r),e(EM,d5r),e(EM,Cz),e(Cz,c5r),e(EM,f5r),e(Y,m5r),e(Y,CM),e(CM,x5e),e(x5e,g5r),e(CM,h5r),e(CM,wz),e(wz,p5r),e(CM,_5r),e(Y,u5r),e(Y,wM),e(wM,k5e),e(k5e,b5r),e(wM,F5r),e(wM,Az),e(Az,v5r),e(wM,T5r),e(Y,M5r),e(Y,AM),e(AM,S5e),e(S5e,E5r),e(AM,C5r),e(AM,yz),e(yz,w5r),e(AM,A5r),e(Y,y5r),e(Y,yM),e(yM,R5e),e(R5e,L5r),e(yM,x5r),e(yM,Lz),e(Lz,k5r),e(yM,S5r),e(Y,R5r),e(Y,LM),e(LM,B5e),e(B5e,B5r),e(LM,P5r),e(LM,xz),e(xz,$5r),e(LM,I5r),e(Y,q5r),e(Y,xM),e(xM,P5e),e(P5e,N5r),e(xM,j5r),e(xM,kz),e(kz,D5r),e(xM,G5r),e(Y,O5r),e(Y,kM),e(kM,$5e),e($5e,V5r),e(kM,X5r),e(kM,Sz),e(Sz,z5r),e(kM,Q5r),e(Y,W5r),e(Y,SM),e(SM,I5e),e(I5e,H5r),e(SM,U5r),e(SM,Rz),e(Rz,J5r),e(SM,Y5r),e(Y,K5r),e(Y,RM),e(RM,q5e),e(q5e,Z5r),e(RM,ebr),e(RM,Bz),e(Bz,obr),e(RM,rbr),e(Y,tbr),e(Y,BM),e(BM,N5e),e(N5e,abr),e(BM,nbr),e(BM,Pz),e(Pz,sbr),e(BM,lbr),e(Y,ibr),e(Y,PM),e(PM,j5e),e(j5e,dbr),e(PM,cbr),e(PM,$z),e($z,fbr),e(PM,mbr),e(Y,gbr),e(Y,$M),e($M,D5e),e(D5e,hbr),e($M,pbr),e($M,Iz),e(Iz,_br),e($M,ubr),e(Y,bbr),e(Y,IM),e(IM,G5e),e(G5e,Fbr),e(IM,vbr),e(IM,qz),e(qz,Tbr),e(IM,Mbr),e(Y,Ebr),e(Y,qM),e(qM,O5e),e(O5e,Cbr),e(qM,wbr),e(qM,Nz),e(Nz,Abr),e(qM,ybr),e(Y,Lbr),e(Y,NM),e(NM,V5e),e(V5e,xbr),e(NM,kbr),e(NM,jz),e(jz,Sbr),e(NM,Rbr),e(Y,Bbr),e(Y,jM),e(jM,X5e),e(X5e,Pbr),e(jM,$br),e(jM,Dz),e(Dz,Ibr),e(jM,qbr),e(Eo,Nbr),e(Eo,z5e),e(z5e,jbr),e(Eo,Dbr),g(fL,Eo,null),b(c,dBe,u),b(c,Xc,u),e(Xc,DM),e(DM,Q5e),g(mL,Q5e,null),e(Xc,Gbr),e(Xc,W5e),e(W5e,Obr),b(c,cBe,u),b(c,xr,u),g(gL,xr,null),e(xr,Vbr),e(xr,zc),e(zc,Xbr),e(zc,Gz),e(Gz,zbr),e(zc,Qbr),e(zc,Oz),e(Oz,Wbr),e(zc,Hbr),e(xr,Ubr),e(xr,hL),e(hL,Jbr),e(hL,H5e),e(H5e,Ybr),e(hL,Kbr),e(xr,Zbr),e(xr,Et),g(pL,Et,null),e(Et,e2r),e(Et,U5e),e(U5e,o2r),e(Et,r2r),e(Et,Qc),e(Qc,t2r),e(Qc,J5e),e(J5e,a2r),e(Qc,n2r),e(Qc,Vz),e(Vz,s2r),e(Qc,l2r),e(Et,i2r),e(Et,Y5e),e(Y5e,d2r),e(Et,c2r),g(_L,Et,null),e(xr,f2r),e(xr,Co),g(uL,Co,null),e(Co,m2r),e(Co,K5e),e(K5e,g2r),e(Co,h2r),e(Co,An),e(An,p2r),e(An,Z5e),e(Z5e,_2r),e(An,u2r),e(An,ebe),e(ebe,b2r),e(An,F2r),e(An,obe),e(obe,v2r),e(An,T2r),e(Co,M2r),e(Co,K),e(K,GM),e(GM,rbe),e(rbe,E2r),e(GM,C2r),e(GM,Xz),e(Xz,w2r),e(GM,A2r),e(K,y2r),e(K,OM),e(OM,tbe),e(tbe,L2r),e(OM,x2r),e(OM,zz),e(zz,k2r),e(OM,S2r),e(K,R2r),e(K,VM),e(VM,abe),e(abe,B2r),e(VM,P2r),e(VM,Qz),e(Qz,$2r),e(VM,I2r),e(K,q2r),e(K,XM),e(XM,nbe),e(nbe,N2r),e(XM,j2r),e(XM,Wz),e(Wz,D2r),e(XM,G2r),e(K,O2r),e(K,zM),e(zM,sbe),e(sbe,V2r),e(zM,X2r),e(zM,Hz),e(Hz,z2r),e(zM,Q2r),e(K,W2r),e(K,QM),e(QM,lbe),e(lbe,H2r),e(QM,U2r),e(QM,Uz),e(Uz,J2r),e(QM,Y2r),e(K,K2r),e(K,WM),e(WM,ibe),e(ibe,Z2r),e(WM,eFr),e(WM,Jz),e(Jz,oFr),e(WM,rFr),e(K,tFr),e(K,HM),e(HM,dbe),e(dbe,aFr),e(HM,nFr),e(HM,Yz),e(Yz,sFr),e(HM,lFr),e(K,iFr),e(K,UM),e(UM,cbe),e(cbe,dFr),e(UM,cFr),e(UM,Kz),e(Kz,fFr),e(UM,mFr),e(K,gFr),e(K,JM),e(JM,fbe),e(fbe,hFr),e(JM,pFr),e(JM,Zz),e(Zz,_Fr),e(JM,uFr),e(K,bFr),e(K,YM),e(YM,mbe),e(mbe,FFr),e(YM,vFr),e(YM,eQ),e(eQ,TFr),e(YM,MFr),e(K,EFr),e(K,KM),e(KM,gbe),e(gbe,CFr),e(KM,wFr),e(KM,oQ),e(oQ,AFr),e(KM,yFr),e(K,LFr),e(K,ZM),e(ZM,hbe),e(hbe,xFr),e(ZM,kFr),e(ZM,rQ),e(rQ,SFr),e(ZM,RFr),e(K,BFr),e(K,e4),e(e4,pbe),e(pbe,PFr),e(e4,$Fr),e(e4,tQ),e(tQ,IFr),e(e4,qFr),e(K,NFr),e(K,o4),e(o4,_be),e(_be,jFr),e(o4,DFr),e(o4,aQ),e(aQ,GFr),e(o4,OFr),e(K,VFr),e(K,r4),e(r4,ube),e(ube,XFr),e(r4,zFr),e(r4,nQ),e(nQ,QFr),e(r4,WFr),e(K,HFr),e(K,t4),e(t4,bbe),e(bbe,UFr),e(t4,JFr),e(t4,sQ),e(sQ,YFr),e(t4,KFr),e(K,ZFr),e(K,a4),e(a4,Fbe),e(Fbe,evr),e(a4,ovr),e(a4,lQ),e(lQ,rvr),e(a4,tvr),e(K,avr),e(K,n4),e(n4,vbe),e(vbe,nvr),e(n4,svr),e(n4,iQ),e(iQ,lvr),e(n4,ivr),e(K,dvr),e(K,s4),e(s4,Tbe),e(Tbe,cvr),e(s4,fvr),e(s4,dQ),e(dQ,mvr),e(s4,gvr),e(Co,hvr),e(Co,Mbe),e(Mbe,pvr),e(Co,_vr),g(bL,Co,null),b(c,fBe,u),b(c,Wc,u),e(Wc,l4),e(l4,Ebe),g(FL,Ebe,null),e(Wc,uvr),e(Wc,Cbe),e(Cbe,bvr),b(c,mBe,u),b(c,kr,u),g(vL,kr,null),e(kr,Fvr),e(kr,Hc),e(Hc,vvr),e(Hc,cQ),e(cQ,Tvr),e(Hc,Mvr),e(Hc,fQ),e(fQ,Evr),e(Hc,Cvr),e(kr,wvr),e(kr,TL),e(TL,Avr),e(TL,wbe),e(wbe,yvr),e(TL,Lvr),e(kr,xvr),e(kr,Ct),g(ML,Ct,null),e(Ct,kvr),e(Ct,Abe),e(Abe,Svr),e(Ct,Rvr),e(Ct,Uc),e(Uc,Bvr),e(Uc,ybe),e(ybe,Pvr),e(Uc,$vr),e(Uc,mQ),e(mQ,Ivr),e(Uc,qvr),e(Ct,Nvr),e(Ct,Lbe),e(Lbe,jvr),e(Ct,Dvr),g(EL,Ct,null),e(kr,Gvr),e(kr,wo),g(CL,wo,null),e(wo,Ovr),e(wo,xbe),e(xbe,Vvr),e(wo,Xvr),e(wo,yn),e(yn,zvr),e(yn,kbe),e(kbe,Qvr),e(yn,Wvr),e(yn,Sbe),e(Sbe,Hvr),e(yn,Uvr),e(yn,Rbe),e(Rbe,Jvr),e(yn,Yvr),e(wo,Kvr),e(wo,Bbe),e(Bbe,i4),e(i4,Pbe),e(Pbe,Zvr),e(i4,e6r),e(i4,gQ),e(gQ,o6r),e(i4,r6r),e(wo,t6r),e(wo,$be),e($be,a6r),e(wo,n6r),g(wL,wo,null),b(c,gBe,u),b(c,Jc,u),e(Jc,d4),e(d4,Ibe),g(AL,Ibe,null),e(Jc,s6r),e(Jc,qbe),e(qbe,l6r),b(c,hBe,u),b(c,Sr,u),g(yL,Sr,null),e(Sr,i6r),e(Sr,Yc),e(Yc,d6r),e(Yc,hQ),e(hQ,c6r),e(Yc,f6r),e(Yc,pQ),e(pQ,m6r),e(Yc,g6r),e(Sr,h6r),e(Sr,LL),e(LL,p6r),e(LL,Nbe),e(Nbe,_6r),e(LL,u6r),e(Sr,b6r),e(Sr,wt),g(xL,wt,null),e(wt,F6r),e(wt,jbe),e(jbe,v6r),e(wt,T6r),e(wt,Kc),e(Kc,M6r),e(Kc,Dbe),e(Dbe,E6r),e(Kc,C6r),e(Kc,_Q),e(_Q,w6r),e(Kc,A6r),e(wt,y6r),e(wt,Gbe),e(Gbe,L6r),e(wt,x6r),g(kL,wt,null),e(Sr,k6r),e(Sr,Ao),g(SL,Ao,null),e(Ao,S6r),e(Ao,Obe),e(Obe,R6r),e(Ao,B6r),e(Ao,Ln),e(Ln,P6r),e(Ln,Vbe),e(Vbe,$6r),e(Ln,I6r),e(Ln,Xbe),e(Xbe,q6r),e(Ln,N6r),e(Ln,zbe),e(zbe,j6r),e(Ln,D6r),e(Ao,G6r),e(Ao,Qbe),e(Qbe,c4),e(c4,Wbe),e(Wbe,O6r),e(c4,V6r),e(c4,uQ),e(uQ,X6r),e(c4,z6r),e(Ao,Q6r),e(Ao,Hbe),e(Hbe,W6r),e(Ao,H6r),g(RL,Ao,null),b(c,pBe,u),b(c,Zc,u),e(Zc,f4),e(f4,Ube),g(BL,Ube,null),e(Zc,U6r),e(Zc,Jbe),e(Jbe,J6r),b(c,_Be,u),b(c,Rr,u),g(PL,Rr,null),e(Rr,Y6r),e(Rr,ef),e(ef,K6r),e(ef,bQ),e(bQ,Z6r),e(ef,eTr),e(ef,FQ),e(FQ,oTr),e(ef,rTr),e(Rr,tTr),e(Rr,$L),e($L,aTr),e($L,Ybe),e(Ybe,nTr),e($L,sTr),e(Rr,lTr),e(Rr,At),g(IL,At,null),e(At,iTr),e(At,Kbe),e(Kbe,dTr),e(At,cTr),e(At,of),e(of,fTr),e(of,Zbe),e(Zbe,mTr),e(of,gTr),e(of,vQ),e(vQ,hTr),e(of,pTr),e(At,_Tr),e(At,e2e),e(e2e,uTr),e(At,bTr),g(qL,At,null),e(Rr,FTr),e(Rr,yo),g(NL,yo,null),e(yo,vTr),e(yo,o2e),e(o2e,TTr),e(yo,MTr),e(yo,xn),e(xn,ETr),e(xn,r2e),e(r2e,CTr),e(xn,wTr),e(xn,t2e),e(t2e,ATr),e(xn,yTr),e(xn,a2e),e(a2e,LTr),e(xn,xTr),e(yo,kTr),e(yo,z),e(z,m4),e(m4,n2e),e(n2e,STr),e(m4,RTr),e(m4,TQ),e(TQ,BTr),e(m4,PTr),e(z,$Tr),e(z,g4),e(g4,s2e),e(s2e,ITr),e(g4,qTr),e(g4,MQ),e(MQ,NTr),e(g4,jTr),e(z,DTr),e(z,h4),e(h4,l2e),e(l2e,GTr),e(h4,OTr),e(h4,EQ),e(EQ,VTr),e(h4,XTr),e(z,zTr),e(z,p4),e(p4,i2e),e(i2e,QTr),e(p4,WTr),e(p4,CQ),e(CQ,HTr),e(p4,UTr),e(z,JTr),e(z,_4),e(_4,d2e),e(d2e,YTr),e(_4,KTr),e(_4,wQ),e(wQ,ZTr),e(_4,eMr),e(z,oMr),e(z,u4),e(u4,c2e),e(c2e,rMr),e(u4,tMr),e(u4,AQ),e(AQ,aMr),e(u4,nMr),e(z,sMr),e(z,b4),e(b4,f2e),e(f2e,lMr),e(b4,iMr),e(b4,yQ),e(yQ,dMr),e(b4,cMr),e(z,fMr),e(z,F4),e(F4,m2e),e(m2e,mMr),e(F4,gMr),e(F4,LQ),e(LQ,hMr),e(F4,pMr),e(z,_Mr),e(z,v4),e(v4,g2e),e(g2e,uMr),e(v4,bMr),e(v4,xQ),e(xQ,FMr),e(v4,vMr),e(z,TMr),e(z,T4),e(T4,h2e),e(h2e,MMr),e(T4,EMr),e(T4,kQ),e(kQ,CMr),e(T4,wMr),e(z,AMr),e(z,M4),e(M4,p2e),e(p2e,yMr),e(M4,LMr),e(M4,SQ),e(SQ,xMr),e(M4,kMr),e(z,SMr),e(z,E4),e(E4,_2e),e(_2e,RMr),e(E4,BMr),e(E4,RQ),e(RQ,PMr),e(E4,$Mr),e(z,IMr),e(z,C4),e(C4,u2e),e(u2e,qMr),e(C4,NMr),e(C4,BQ),e(BQ,jMr),e(C4,DMr),e(z,GMr),e(z,w4),e(w4,b2e),e(b2e,OMr),e(w4,VMr),e(w4,PQ),e(PQ,XMr),e(w4,zMr),e(z,QMr),e(z,A4),e(A4,F2e),e(F2e,WMr),e(A4,HMr),e(A4,$Q),e($Q,UMr),e(A4,JMr),e(z,YMr),e(z,y4),e(y4,v2e),e(v2e,KMr),e(y4,ZMr),e(y4,IQ),e(IQ,e4r),e(y4,o4r),e(z,r4r),e(z,L4),e(L4,T2e),e(T2e,t4r),e(L4,a4r),e(L4,qQ),e(qQ,n4r),e(L4,s4r),e(z,l4r),e(z,x4),e(x4,M2e),e(M2e,i4r),e(x4,d4r),e(x4,NQ),e(NQ,c4r),e(x4,f4r),e(z,m4r),e(z,k4),e(k4,E2e),e(E2e,g4r),e(k4,h4r),e(k4,jQ),e(jQ,p4r),e(k4,_4r),e(z,u4r),e(z,S4),e(S4,C2e),e(C2e,b4r),e(S4,F4r),e(S4,DQ),e(DQ,v4r),e(S4,T4r),e(z,M4r),e(z,R4),e(R4,w2e),e(w2e,E4r),e(R4,C4r),e(R4,GQ),e(GQ,w4r),e(R4,A4r),e(z,y4r),e(z,B4),e(B4,A2e),e(A2e,L4r),e(B4,x4r),e(B4,OQ),e(OQ,k4r),e(B4,S4r),e(z,R4r),e(z,P4),e(P4,y2e),e(y2e,B4r),e(P4,P4r),e(P4,VQ),e(VQ,$4r),e(P4,I4r),e(z,q4r),e(z,$4),e($4,L2e),e(L2e,N4r),e($4,j4r),e($4,XQ),e(XQ,D4r),e($4,G4r),e(z,O4r),e(z,I4),e(I4,x2e),e(x2e,V4r),e(I4,X4r),e(I4,zQ),e(zQ,z4r),e(I4,Q4r),e(yo,W4r),e(yo,k2e),e(k2e,H4r),e(yo,U4r),g(jL,yo,null),b(c,uBe,u),b(c,rf,u),e(rf,q4),e(q4,S2e),g(DL,S2e,null),e(rf,J4r),e(rf,R2e),e(R2e,Y4r),b(c,bBe,u),b(c,Br,u),g(GL,Br,null),e(Br,K4r),e(Br,tf),e(tf,Z4r),e(tf,QQ),e(QQ,eEr),e(tf,oEr),e(tf,WQ),e(WQ,rEr),e(tf,tEr),e(Br,aEr),e(Br,OL),e(OL,nEr),e(OL,B2e),e(B2e,sEr),e(OL,lEr),e(Br,iEr),e(Br,yt),g(VL,yt,null),e(yt,dEr),e(yt,P2e),e(P2e,cEr),e(yt,fEr),e(yt,af),e(af,mEr),e(af,$2e),e($2e,gEr),e(af,hEr),e(af,HQ),e(HQ,pEr),e(af,_Er),e(yt,uEr),e(yt,I2e),e(I2e,bEr),e(yt,FEr),g(XL,yt,null),e(Br,vEr),e(Br,Lo),g(zL,Lo,null),e(Lo,TEr),e(Lo,q2e),e(q2e,MEr),e(Lo,EEr),e(Lo,kn),e(kn,CEr),e(kn,N2e),e(N2e,wEr),e(kn,AEr),e(kn,j2e),e(j2e,yEr),e(kn,LEr),e(kn,D2e),e(D2e,xEr),e(kn,kEr),e(Lo,SEr),e(Lo,ca),e(ca,N4),e(N4,G2e),e(G2e,REr),e(N4,BEr),e(N4,UQ),e(UQ,PEr),e(N4,$Er),e(ca,IEr),e(ca,j4),e(j4,O2e),e(O2e,qEr),e(j4,NEr),e(j4,JQ),e(JQ,jEr),e(j4,DEr),e(ca,GEr),e(ca,D4),e(D4,V2e),e(V2e,OEr),e(D4,VEr),e(D4,YQ),e(YQ,XEr),e(D4,zEr),e(ca,QEr),e(ca,G4),e(G4,X2e),e(X2e,WEr),e(G4,HEr),e(G4,KQ),e(KQ,UEr),e(G4,JEr),e(ca,YEr),e(ca,O4),e(O4,z2e),e(z2e,KEr),e(O4,ZEr),e(O4,ZQ),e(ZQ,eCr),e(O4,oCr),e(Lo,rCr),e(Lo,Q2e),e(Q2e,tCr),e(Lo,aCr),g(QL,Lo,null),b(c,FBe,u),b(c,nf,u),e(nf,V4),e(V4,W2e),g(WL,W2e,null),e(nf,nCr),e(nf,H2e),e(H2e,sCr),b(c,vBe,u),b(c,Pr,u),g(HL,Pr,null),e(Pr,lCr),e(Pr,sf),e(sf,iCr),e(sf,eW),e(eW,dCr),e(sf,cCr),e(sf,oW),e(oW,fCr),e(sf,mCr),e(Pr,gCr),e(Pr,UL),e(UL,hCr),e(UL,U2e),e(U2e,pCr),e(UL,_Cr),e(Pr,uCr),e(Pr,Lt),g(JL,Lt,null),e(Lt,bCr),e(Lt,J2e),e(J2e,FCr),e(Lt,vCr),e(Lt,lf),e(lf,TCr),e(lf,Y2e),e(Y2e,MCr),e(lf,ECr),e(lf,rW),e(rW,CCr),e(lf,wCr),e(Lt,ACr),e(Lt,K2e),e(K2e,yCr),e(Lt,LCr),g(YL,Lt,null),e(Pr,xCr),e(Pr,xo),g(KL,xo,null),e(xo,kCr),e(xo,Z2e),e(Z2e,SCr),e(xo,RCr),e(xo,Sn),e(Sn,BCr),e(Sn,eFe),e(eFe,PCr),e(Sn,$Cr),e(Sn,oFe),e(oFe,ICr),e(Sn,qCr),e(Sn,rFe),e(rFe,NCr),e(Sn,jCr),e(xo,DCr),e(xo,fe),e(fe,X4),e(X4,tFe),e(tFe,GCr),e(X4,OCr),e(X4,tW),e(tW,VCr),e(X4,XCr),e(fe,zCr),e(fe,z4),e(z4,aFe),e(aFe,QCr),e(z4,WCr),e(z4,aW),e(aW,HCr),e(z4,UCr),e(fe,JCr),e(fe,Q4),e(Q4,nFe),e(nFe,YCr),e(Q4,KCr),e(Q4,nW),e(nW,ZCr),e(Q4,e3r),e(fe,o3r),e(fe,W4),e(W4,sFe),e(sFe,r3r),e(W4,t3r),e(W4,sW),e(sW,a3r),e(W4,n3r),e(fe,s3r),e(fe,H4),e(H4,lFe),e(lFe,l3r),e(H4,i3r),e(H4,lW),e(lW,d3r),e(H4,c3r),e(fe,f3r),e(fe,U4),e(U4,iFe),e(iFe,m3r),e(U4,g3r),e(U4,iW),e(iW,h3r),e(U4,p3r),e(fe,_3r),e(fe,J4),e(J4,dFe),e(dFe,u3r),e(J4,b3r),e(J4,dW),e(dW,F3r),e(J4,v3r),e(fe,T3r),e(fe,Y4),e(Y4,cFe),e(cFe,M3r),e(Y4,E3r),e(Y4,cW),e(cW,C3r),e(Y4,w3r),e(fe,A3r),e(fe,K4),e(K4,fFe),e(fFe,y3r),e(K4,L3r),e(K4,fW),e(fW,x3r),e(K4,k3r),e(fe,S3r),e(fe,Z4),e(Z4,mFe),e(mFe,R3r),e(Z4,B3r),e(Z4,mW),e(mW,P3r),e(Z4,$3r),e(fe,I3r),e(fe,eE),e(eE,gFe),e(gFe,q3r),e(eE,N3r),e(eE,gW),e(gW,j3r),e(eE,D3r),e(fe,G3r),e(fe,oE),e(oE,hFe),e(hFe,O3r),e(oE,V3r),e(oE,hW),e(hW,X3r),e(oE,z3r),e(xo,Q3r),e(xo,pFe),e(pFe,W3r),e(xo,H3r),g(ZL,xo,null),b(c,TBe,u),b(c,df,u),e(df,rE),e(rE,_Fe),g(e8,_Fe,null),e(df,U3r),e(df,uFe),e(uFe,J3r),b(c,MBe,u),b(c,$r,u),g(o8,$r,null),e($r,Y3r),e($r,cf),e(cf,K3r),e(cf,pW),e(pW,Z3r),e(cf,ewr),e(cf,_W),e(_W,owr),e(cf,rwr),e($r,twr),e($r,r8),e(r8,awr),e(r8,bFe),e(bFe,nwr),e(r8,swr),e($r,lwr),e($r,xt),g(t8,xt,null),e(xt,iwr),e(xt,FFe),e(FFe,dwr),e(xt,cwr),e(xt,ff),e(ff,fwr),e(ff,vFe),e(vFe,mwr),e(ff,gwr),e(ff,uW),e(uW,hwr),e(ff,pwr),e(xt,_wr),e(xt,TFe),e(TFe,uwr),e(xt,bwr),g(a8,xt,null),e($r,Fwr),e($r,ko),g(n8,ko,null),e(ko,vwr),e(ko,MFe),e(MFe,Twr),e(ko,Mwr),e(ko,Rn),e(Rn,Ewr),e(Rn,EFe),e(EFe,Cwr),e(Rn,wwr),e(Rn,CFe),e(CFe,Awr),e(Rn,ywr),e(Rn,wFe),e(wFe,Lwr),e(Rn,xwr),e(ko,kwr),e(ko,be),e(be,tE),e(tE,AFe),e(AFe,Swr),e(tE,Rwr),e(tE,bW),e(bW,Bwr),e(tE,Pwr),e(be,$wr),e(be,aE),e(aE,yFe),e(yFe,Iwr),e(aE,qwr),e(aE,FW),e(FW,Nwr),e(aE,jwr),e(be,Dwr),e(be,nE),e(nE,LFe),e(LFe,Gwr),e(nE,Owr),e(nE,vW),e(vW,Vwr),e(nE,Xwr),e(be,zwr),e(be,sE),e(sE,xFe),e(xFe,Qwr),e(sE,Wwr),e(sE,TW),e(TW,Hwr),e(sE,Uwr),e(be,Jwr),e(be,lE),e(lE,kFe),e(kFe,Ywr),e(lE,Kwr),e(lE,MW),e(MW,Zwr),e(lE,eAr),e(be,oAr),e(be,iE),e(iE,SFe),e(SFe,rAr),e(iE,tAr),e(iE,EW),e(EW,aAr),e(iE,nAr),e(be,sAr),e(be,dE),e(dE,RFe),e(RFe,lAr),e(dE,iAr),e(dE,CW),e(CW,dAr),e(dE,cAr),e(be,fAr),e(be,cE),e(cE,BFe),e(BFe,mAr),e(cE,gAr),e(cE,wW),e(wW,hAr),e(cE,pAr),e(be,_Ar),e(be,fE),e(fE,PFe),e(PFe,uAr),e(fE,bAr),e(fE,AW),e(AW,FAr),e(fE,vAr),e(be,TAr),e(be,mE),e(mE,$Fe),e($Fe,MAr),e(mE,EAr),e(mE,yW),e(yW,CAr),e(mE,wAr),e(ko,AAr),e(ko,IFe),e(IFe,yAr),e(ko,LAr),g(s8,ko,null),b(c,EBe,u),b(c,mf,u),e(mf,gE),e(gE,qFe),g(l8,qFe,null),e(mf,xAr),e(mf,NFe),e(NFe,kAr),b(c,CBe,u),b(c,Ir,u),g(i8,Ir,null),e(Ir,SAr),e(Ir,gf),e(gf,RAr),e(gf,LW),e(LW,BAr),e(gf,PAr),e(gf,xW),e(xW,$Ar),e(gf,IAr),e(Ir,qAr),e(Ir,d8),e(d8,NAr),e(d8,jFe),e(jFe,jAr),e(d8,DAr),e(Ir,GAr),e(Ir,kt),g(c8,kt,null),e(kt,OAr),e(kt,DFe),e(DFe,VAr),e(kt,XAr),e(kt,hf),e(hf,zAr),e(hf,GFe),e(GFe,QAr),e(hf,WAr),e(hf,kW),e(kW,HAr),e(hf,UAr),e(kt,JAr),e(kt,OFe),e(OFe,YAr),e(kt,KAr),g(f8,kt,null),e(Ir,ZAr),e(Ir,So),g(m8,So,null),e(So,e0r),e(So,VFe),e(VFe,o0r),e(So,r0r),e(So,Bn),e(Bn,t0r),e(Bn,XFe),e(XFe,a0r),e(Bn,n0r),e(Bn,zFe),e(zFe,s0r),e(Bn,l0r),e(Bn,QFe),e(QFe,i0r),e(Bn,d0r),e(So,c0r),e(So,Ee),e(Ee,hE),e(hE,WFe),e(WFe,f0r),e(hE,m0r),e(hE,SW),e(SW,g0r),e(hE,h0r),e(Ee,p0r),e(Ee,pE),e(pE,HFe),e(HFe,_0r),e(pE,u0r),e(pE,RW),e(RW,b0r),e(pE,F0r),e(Ee,v0r),e(Ee,_E),e(_E,UFe),e(UFe,T0r),e(_E,M0r),e(_E,BW),e(BW,E0r),e(_E,C0r),e(Ee,w0r),e(Ee,uE),e(uE,JFe),e(JFe,A0r),e(uE,y0r),e(uE,PW),e(PW,L0r),e(uE,x0r),e(Ee,k0r),e(Ee,bE),e(bE,YFe),e(YFe,S0r),e(bE,R0r),e(bE,$W),e($W,B0r),e(bE,P0r),e(Ee,$0r),e(Ee,FE),e(FE,KFe),e(KFe,I0r),e(FE,q0r),e(FE,IW),e(IW,N0r),e(FE,j0r),e(Ee,D0r),e(Ee,vE),e(vE,ZFe),e(ZFe,G0r),e(vE,O0r),e(vE,qW),e(qW,V0r),e(vE,X0r),e(Ee,z0r),e(Ee,TE),e(TE,eve),e(eve,Q0r),e(TE,W0r),e(TE,NW),e(NW,H0r),e(TE,U0r),e(Ee,J0r),e(Ee,ME),e(ME,ove),e(ove,Y0r),e(ME,K0r),e(ME,jW),e(jW,Z0r),e(ME,eyr),e(So,oyr),e(So,rve),e(rve,ryr),e(So,tyr),g(g8,So,null),b(c,wBe,u),b(c,pf,u),e(pf,EE),e(EE,tve),g(h8,tve,null),e(pf,ayr),e(pf,ave),e(ave,nyr),b(c,ABe,u),b(c,qr,u),g(p8,qr,null),e(qr,syr),e(qr,_f),e(_f,lyr),e(_f,DW),e(DW,iyr),e(_f,dyr),e(_f,GW),e(GW,cyr),e(_f,fyr),e(qr,myr),e(qr,_8),e(_8,gyr),e(_8,nve),e(nve,hyr),e(_8,pyr),e(qr,_yr),e(qr,St),g(u8,St,null),e(St,uyr),e(St,sve),e(sve,byr),e(St,Fyr),e(St,uf),e(uf,vyr),e(uf,lve),e(lve,Tyr),e(uf,Myr),e(uf,OW),e(OW,Eyr),e(uf,Cyr),e(St,wyr),e(St,ive),e(ive,Ayr),e(St,yyr),g(b8,St,null),e(qr,Lyr),e(qr,Ro),g(F8,Ro,null),e(Ro,xyr),e(Ro,dve),e(dve,kyr),e(Ro,Syr),e(Ro,Pn),e(Pn,Ryr),e(Pn,cve),e(cve,Byr),e(Pn,Pyr),e(Pn,fve),e(fve,$yr),e(Pn,Iyr),e(Pn,mve),e(mve,qyr),e(Pn,Nyr),e(Ro,jyr),e(Ro,Fe),e(Fe,CE),e(CE,gve),e(gve,Dyr),e(CE,Gyr),e(CE,VW),e(VW,Oyr),e(CE,Vyr),e(Fe,Xyr),e(Fe,wE),e(wE,hve),e(hve,zyr),e(wE,Qyr),e(wE,XW),e(XW,Wyr),e(wE,Hyr),e(Fe,Uyr),e(Fe,AE),e(AE,pve),e(pve,Jyr),e(AE,Yyr),e(AE,zW),e(zW,Kyr),e(AE,Zyr),e(Fe,eLr),e(Fe,yE),e(yE,_ve),e(_ve,oLr),e(yE,rLr),e(yE,QW),e(QW,tLr),e(yE,aLr),e(Fe,nLr),e(Fe,LE),e(LE,uve),e(uve,sLr),e(LE,lLr),e(LE,WW),e(WW,iLr),e(LE,dLr),e(Fe,cLr),e(Fe,xE),e(xE,bve),e(bve,fLr),e(xE,mLr),e(xE,HW),e(HW,gLr),e(xE,hLr),e(Fe,pLr),e(Fe,kE),e(kE,Fve),e(Fve,_Lr),e(kE,uLr),e(kE,UW),e(UW,bLr),e(kE,FLr),e(Fe,vLr),e(Fe,SE),e(SE,vve),e(vve,TLr),e(SE,MLr),e(SE,JW),e(JW,ELr),e(SE,CLr),e(Fe,wLr),e(Fe,RE),e(RE,Tve),e(Tve,ALr),e(RE,yLr),e(RE,YW),e(YW,LLr),e(RE,xLr),e(Fe,kLr),e(Fe,BE),e(BE,Mve),e(Mve,SLr),e(BE,RLr),e(BE,KW),e(KW,BLr),e(BE,PLr),e(Ro,$Lr),e(Ro,Eve),e(Eve,ILr),e(Ro,qLr),g(v8,Ro,null),b(c,yBe,u),b(c,bf,u),e(bf,PE),e(PE,Cve),g(T8,Cve,null),e(bf,NLr),e(bf,wve),e(wve,jLr),b(c,LBe,u),b(c,Nr,u),g(M8,Nr,null),e(Nr,DLr),e(Nr,Ff),e(Ff,GLr),e(Ff,ZW),e(ZW,OLr),e(Ff,VLr),e(Ff,eH),e(eH,XLr),e(Ff,zLr),e(Nr,QLr),e(Nr,E8),e(E8,WLr),e(E8,Ave),e(Ave,HLr),e(E8,ULr),e(Nr,JLr),e(Nr,Rt),g(C8,Rt,null),e(Rt,YLr),e(Rt,yve),e(yve,KLr),e(Rt,ZLr),e(Rt,vf),e(vf,e8r),e(vf,Lve),e(Lve,o8r),e(vf,r8r),e(vf,oH),e(oH,t8r),e(vf,a8r),e(Rt,n8r),e(Rt,xve),e(xve,s8r),e(Rt,l8r),g(w8,Rt,null),e(Nr,i8r),e(Nr,Bo),g(A8,Bo,null),e(Bo,d8r),e(Bo,kve),e(kve,c8r),e(Bo,f8r),e(Bo,$n),e($n,m8r),e($n,Sve),e(Sve,g8r),e($n,h8r),e($n,Rve),e(Rve,p8r),e($n,_8r),e($n,Bve),e(Bve,u8r),e($n,b8r),e(Bo,F8r),e(Bo,ve),e(ve,$E),e($E,Pve),e(Pve,v8r),e($E,T8r),e($E,rH),e(rH,M8r),e($E,E8r),e(ve,C8r),e(ve,IE),e(IE,$ve),e($ve,w8r),e(IE,A8r),e(IE,tH),e(tH,y8r),e(IE,L8r),e(ve,x8r),e(ve,qE),e(qE,Ive),e(Ive,k8r),e(qE,S8r),e(qE,aH),e(aH,R8r),e(qE,B8r),e(ve,P8r),e(ve,NE),e(NE,qve),e(qve,$8r),e(NE,I8r),e(NE,nH),e(nH,q8r),e(NE,N8r),e(ve,j8r),e(ve,jE),e(jE,Nve),e(Nve,D8r),e(jE,G8r),e(jE,sH),e(sH,O8r),e(jE,V8r),e(ve,X8r),e(ve,DE),e(DE,jve),e(jve,z8r),e(DE,Q8r),e(DE,lH),e(lH,W8r),e(DE,H8r),e(ve,U8r),e(ve,GE),e(GE,Dve),e(Dve,J8r),e(GE,Y8r),e(GE,iH),e(iH,K8r),e(GE,Z8r),e(ve,e7r),e(ve,OE),e(OE,Gve),e(Gve,o7r),e(OE,r7r),e(OE,dH),e(dH,t7r),e(OE,a7r),e(ve,n7r),e(ve,VE),e(VE,Ove),e(Ove,s7r),e(VE,l7r),e(VE,cH),e(cH,i7r),e(VE,d7r),e(ve,c7r),e(ve,XE),e(XE,Vve),e(Vve,f7r),e(XE,m7r),e(XE,fH),e(fH,g7r),e(XE,h7r),e(Bo,p7r),e(Bo,Xve),e(Xve,_7r),e(Bo,u7r),g(y8,Bo,null),b(c,xBe,u),b(c,Tf,u),e(Tf,zE),e(zE,zve),g(L8,zve,null),e(Tf,b7r),e(Tf,Qve),e(Qve,F7r),b(c,kBe,u),b(c,jr,u),g(x8,jr,null),e(jr,v7r),e(jr,Mf),e(Mf,T7r),e(Mf,mH),e(mH,M7r),e(Mf,E7r),e(Mf,gH),e(gH,C7r),e(Mf,w7r),e(jr,A7r),e(jr,k8),e(k8,y7r),e(k8,Wve),e(Wve,L7r),e(k8,x7r),e(jr,k7r),e(jr,Bt),g(S8,Bt,null),e(Bt,S7r),e(Bt,Hve),e(Hve,R7r),e(Bt,B7r),e(Bt,Ef),e(Ef,P7r),e(Ef,Uve),e(Uve,$7r),e(Ef,I7r),e(Ef,hH),e(hH,q7r),e(Ef,N7r),e(Bt,j7r),e(Bt,Jve),e(Jve,D7r),e(Bt,G7r),g(R8,Bt,null),e(jr,O7r),e(jr,Po),g(B8,Po,null),e(Po,V7r),e(Po,Yve),e(Yve,X7r),e(Po,z7r),e(Po,In),e(In,Q7r),e(In,Kve),e(Kve,W7r),e(In,H7r),e(In,Zve),e(Zve,U7r),e(In,J7r),e(In,e6e),e(e6e,Y7r),e(In,K7r),e(Po,Z7r),e(Po,Be),e(Be,QE),e(QE,o6e),e(o6e,e9r),e(QE,o9r),e(QE,pH),e(pH,r9r),e(QE,t9r),e(Be,a9r),e(Be,WE),e(WE,r6e),e(r6e,n9r),e(WE,s9r),e(WE,_H),e(_H,l9r),e(WE,i9r),e(Be,d9r),e(Be,HE),e(HE,t6e),e(t6e,c9r),e(HE,f9r),e(HE,uH),e(uH,m9r),e(HE,g9r),e(Be,h9r),e(Be,UE),e(UE,a6e),e(a6e,p9r),e(UE,_9r),e(UE,bH),e(bH,u9r),e(UE,b9r),e(Be,F9r),e(Be,JE),e(JE,n6e),e(n6e,v9r),e(JE,T9r),e(JE,FH),e(FH,M9r),e(JE,E9r),e(Be,C9r),e(Be,YE),e(YE,s6e),e(s6e,w9r),e(YE,A9r),e(YE,vH),e(vH,y9r),e(YE,L9r),e(Be,x9r),e(Be,KE),e(KE,l6e),e(l6e,k9r),e(KE,S9r),e(KE,TH),e(TH,R9r),e(KE,B9r),e(Be,P9r),e(Be,ZE),e(ZE,i6e),e(i6e,$9r),e(ZE,I9r),e(ZE,MH),e(MH,q9r),e(ZE,N9r),e(Po,j9r),e(Po,d6e),e(d6e,D9r),e(Po,G9r),g(P8,Po,null),b(c,SBe,u),b(c,Cf,u),e(Cf,eC),e(eC,c6e),g($8,c6e,null),e(Cf,O9r),e(Cf,f6e),e(f6e,V9r),b(c,RBe,u),b(c,Dr,u),g(I8,Dr,null),e(Dr,X9r),e(Dr,wf),e(wf,z9r),e(wf,EH),e(EH,Q9r),e(wf,W9r),e(wf,CH),e(CH,H9r),e(wf,U9r),e(Dr,J9r),e(Dr,q8),e(q8,Y9r),e(q8,m6e),e(m6e,K9r),e(q8,Z9r),e(Dr,exr),e(Dr,Pt),g(N8,Pt,null),e(Pt,oxr),e(Pt,g6e),e(g6e,rxr),e(Pt,txr),e(Pt,Af),e(Af,axr),e(Af,h6e),e(h6e,nxr),e(Af,sxr),e(Af,wH),e(wH,lxr),e(Af,ixr),e(Pt,dxr),e(Pt,p6e),e(p6e,cxr),e(Pt,fxr),g(j8,Pt,null),e(Dr,mxr),e(Dr,$o),g(D8,$o,null),e($o,gxr),e($o,_6e),e(_6e,hxr),e($o,pxr),e($o,qn),e(qn,_xr),e(qn,u6e),e(u6e,uxr),e(qn,bxr),e(qn,b6e),e(b6e,Fxr),e(qn,vxr),e(qn,F6e),e(F6e,Txr),e(qn,Mxr),e($o,Exr),e($o,Pe),e(Pe,oC),e(oC,v6e),e(v6e,Cxr),e(oC,wxr),e(oC,AH),e(AH,Axr),e(oC,yxr),e(Pe,Lxr),e(Pe,rC),e(rC,T6e),e(T6e,xxr),e(rC,kxr),e(rC,yH),e(yH,Sxr),e(rC,Rxr),e(Pe,Bxr),e(Pe,tC),e(tC,M6e),e(M6e,Pxr),e(tC,$xr),e(tC,LH),e(LH,Ixr),e(tC,qxr),e(Pe,Nxr),e(Pe,aC),e(aC,E6e),e(E6e,jxr),e(aC,Dxr),e(aC,xH),e(xH,Gxr),e(aC,Oxr),e(Pe,Vxr),e(Pe,nC),e(nC,C6e),e(C6e,Xxr),e(nC,zxr),e(nC,kH),e(kH,Qxr),e(nC,Wxr),e(Pe,Hxr),e(Pe,sC),e(sC,w6e),e(w6e,Uxr),e(sC,Jxr),e(sC,SH),e(SH,Yxr),e(sC,Kxr),e(Pe,Zxr),e(Pe,lC),e(lC,A6e),e(A6e,ekr),e(lC,okr),e(lC,RH),e(RH,rkr),e(lC,tkr),e(Pe,akr),e(Pe,iC),e(iC,y6e),e(y6e,nkr),e(iC,skr),e(iC,BH),e(BH,lkr),e(iC,ikr),e($o,dkr),e($o,L6e),e(L6e,ckr),e($o,fkr),g(G8,$o,null),b(c,BBe,u),b(c,yf,u),e(yf,dC),e(dC,x6e),g(O8,x6e,null),e(yf,mkr),e(yf,k6e),e(k6e,gkr),b(c,PBe,u),b(c,Gr,u),g(V8,Gr,null),e(Gr,hkr),e(Gr,Lf),e(Lf,pkr),e(Lf,PH),e(PH,_kr),e(Lf,ukr),e(Lf,$H),e($H,bkr),e(Lf,Fkr),e(Gr,vkr),e(Gr,X8),e(X8,Tkr),e(X8,S6e),e(S6e,Mkr),e(X8,Ekr),e(Gr,Ckr),e(Gr,$t),g(z8,$t,null),e($t,wkr),e($t,R6e),e(R6e,Akr),e($t,ykr),e($t,xf),e(xf,Lkr),e(xf,B6e),e(B6e,xkr),e(xf,kkr),e(xf,IH),e(IH,Skr),e(xf,Rkr),e($t,Bkr),e($t,P6e),e(P6e,Pkr),e($t,$kr),g(Q8,$t,null),e(Gr,Ikr),e(Gr,Io),g(W8,Io,null),e(Io,qkr),e(Io,$6e),e($6e,Nkr),e(Io,jkr),e(Io,Nn),e(Nn,Dkr),e(Nn,I6e),e(I6e,Gkr),e(Nn,Okr),e(Nn,q6e),e(q6e,Vkr),e(Nn,Xkr),e(Nn,N6e),e(N6e,zkr),e(Nn,Qkr),e(Io,Wkr),e(Io,j6e),e(j6e,cC),e(cC,D6e),e(D6e,Hkr),e(cC,Ukr),e(cC,qH),e(qH,Jkr),e(cC,Ykr),e(Io,Kkr),e(Io,G6e),e(G6e,Zkr),e(Io,eSr),g(H8,Io,null),b(c,$Be,u),b(c,kf,u),e(kf,fC),e(fC,O6e),g(U8,O6e,null),e(kf,oSr),e(kf,V6e),e(V6e,rSr),b(c,IBe,u),b(c,Or,u),g(J8,Or,null),e(Or,tSr),e(Or,Sf),e(Sf,aSr),e(Sf,NH),e(NH,nSr),e(Sf,sSr),e(Sf,jH),e(jH,lSr),e(Sf,iSr),e(Or,dSr),e(Or,Y8),e(Y8,cSr),e(Y8,X6e),e(X6e,fSr),e(Y8,mSr),e(Or,gSr),e(Or,It),g(K8,It,null),e(It,hSr),e(It,z6e),e(z6e,pSr),e(It,_Sr),e(It,Rf),e(Rf,uSr),e(Rf,Q6e),e(Q6e,bSr),e(Rf,FSr),e(Rf,DH),e(DH,vSr),e(Rf,TSr),e(It,MSr),e(It,W6e),e(W6e,ESr),e(It,CSr),g(Z8,It,null),e(Or,wSr),e(Or,qo),g(e7,qo,null),e(qo,ASr),e(qo,H6e),e(H6e,ySr),e(qo,LSr),e(qo,jn),e(jn,xSr),e(jn,U6e),e(U6e,kSr),e(jn,SSr),e(jn,J6e),e(J6e,RSr),e(jn,BSr),e(jn,Y6e),e(Y6e,PSr),e(jn,$Sr),e(qo,ISr),e(qo,o7),e(o7,mC),e(mC,K6e),e(K6e,qSr),e(mC,NSr),e(mC,GH),e(GH,jSr),e(mC,DSr),e(o7,GSr),e(o7,gC),e(gC,Z6e),e(Z6e,OSr),e(gC,VSr),e(gC,OH),e(OH,XSr),e(gC,zSr),e(qo,QSr),e(qo,eTe),e(eTe,WSr),e(qo,HSr),g(r7,qo,null),b(c,qBe,u),b(c,Bf,u),e(Bf,hC),e(hC,oTe),g(t7,oTe,null),e(Bf,USr),e(Bf,rTe),e(rTe,JSr),b(c,NBe,u),b(c,Vr,u),g(a7,Vr,null),e(Vr,YSr),e(Vr,Pf),e(Pf,KSr),e(Pf,VH),e(VH,ZSr),e(Pf,eRr),e(Pf,XH),e(XH,oRr),e(Pf,rRr),e(Vr,tRr),e(Vr,n7),e(n7,aRr),e(n7,tTe),e(tTe,nRr),e(n7,sRr),e(Vr,lRr),e(Vr,qt),g(s7,qt,null),e(qt,iRr),e(qt,aTe),e(aTe,dRr),e(qt,cRr),e(qt,$f),e($f,fRr),e($f,nTe),e(nTe,mRr),e($f,gRr),e($f,zH),e(zH,hRr),e($f,pRr),e(qt,_Rr),e(qt,sTe),e(sTe,uRr),e(qt,bRr),g(l7,qt,null),e(Vr,FRr),e(Vr,No),g(i7,No,null),e(No,vRr),e(No,lTe),e(lTe,TRr),e(No,MRr),e(No,Dn),e(Dn,ERr),e(Dn,iTe),e(iTe,CRr),e(Dn,wRr),e(Dn,dTe),e(dTe,ARr),e(Dn,yRr),e(Dn,cTe),e(cTe,LRr),e(Dn,xRr),e(No,kRr),e(No,fTe),e(fTe,pC),e(pC,mTe),e(mTe,SRr),e(pC,RRr),e(pC,QH),e(QH,BRr),e(pC,PRr),e(No,$Rr),e(No,gTe),e(gTe,IRr),e(No,qRr),g(d7,No,null),jBe=!0},p(c,[u]){const c7={};u&2&&(c7.$$scope={dirty:u,ctx:c}),Vf.$set(c7);const hTe={};u&2&&(hTe.$$scope={dirty:u,ctx:c}),Rh.$set(hTe);const pTe={};u&2&&(pTe.$$scope={dirty:u,ctx:c}),Vh.$set(pTe)},i(c){jBe||(h(me.$$.fragment,c),h(Da.$$.fragment,c),h(F3.$$.fragment,c),h(v3.$$.fragment,c),h(Vf.$$.fragment,c),h(T3.$$.fragment,c),h(M3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(L3.$$.fragment,c),h(x3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h($3.$$.fragment,c),h(I3.$$.fragment,c),h(j3.$$.fragment,c),h(Rh.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(O3.$$.fragment,c),h(V3.$$.fragment,c),h(Q3.$$.fragment,c),h(Vh.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(U3.$$.fragment,c),h(J3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(Fw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(e0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(F0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(Fy.$$.fragment,c),h(vy.$$.fragment,c),h(Ty.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(FL.$$.fragment,c),h(vL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h(IL.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(VL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(c8.$$.fragment,c),h(f8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(u8.$$.fragment,c),h(b8.$$.fragment,c),h(F8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(e7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),jBe=!0)},o(c){p(me.$$.fragment,c),p(Da.$$.fragment,c),p(F3.$$.fragment,c),p(v3.$$.fragment,c),p(Vf.$$.fragment,c),p(T3.$$.fragment,c),p(M3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(L3.$$.fragment,c),p(x3.$$.fragment,c),p(R3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p($3.$$.fragment,c),p(I3.$$.fragment,c),p(j3.$$.fragment,c),p(Rh.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(O3.$$.fragment,c),p(V3.$$.fragment,c),p(Q3.$$.fragment,c),p(Vh.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(U3.$$.fragment,c),p(J3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(Fw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(Dw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(FA.$$.fragment,c),p(TA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(e0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(F0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(Fy.$$.fragment,c),p(vy.$$.fragment,c),p(Ty.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(FL.$$.fragment,c),p(vL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(RL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p(IL.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),p(GL.$$.fragment,c),p(VL.$$.fragment,c),p(XL.$$.fragment,c),p(zL.$$.fragment,c),p(QL.$$.fragment,c),p(WL.$$.fragment,c),p(HL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(KL.$$.fragment,c),p(ZL.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(t8.$$.fragment,c),p(a8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(c8.$$.fragment,c),p(f8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(u8.$$.fragment,c),p(b8.$$.fragment,c),p(F8.$$.fragment,c),p(v8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(C8.$$.fragment,c),p(w8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(S8.$$.fragment,c),p(R8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(N8.$$.fragment,c),p(j8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(z8.$$.fragment,c),p(Q8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(K8.$$.fragment,c),p(Z8.$$.fragment,c),p(e7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),jBe=!1},d(c){t(Z),c&&t(io),c&&t(de),_(me),c&&t(Nf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(Df),_(Da,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(NSe),c&&t(Xi),_(F3),c&&t(jSe),c&&t(zn),c&&t(DSe),_(v3,c),c&&t(GSe),c&&t(g9),c&&t(OSe),_(Vf,c),c&&t(VSe),c&&t(zi),_(T3),c&&t(XSe),c&&t(Qo),_(M3),_(w3),_(A3),_(y3),c&&t(zSe),c&&t(Wi),_(L3),c&&t(QSe),c&&t(Wo),_(x3),_(R3),_(B3),_(P3),c&&t(WSe),c&&t(Hi),_($3),c&&t(HSe),c&&t(Ho),_(I3),_(j3),_(Rh),_(D3),_(G3),c&&t(USe),c&&t(Ui),_(O3),c&&t(JSe),c&&t(Uo),_(V3),_(Q3),_(Vh),_(W3),_(H3),c&&t(YSe),c&&t(Yi),_(U3),c&&t(KSe),c&&t(Jo),_(J3),_(K3),_(Z3),_(ew),_(ow),c&&t(ZSe),c&&t(ed),_(rw),c&&t(eRe),c&&t(Yo),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(oRe),c&&t(td),_(dw),c&&t(rRe),c&&t(Ko),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(tRe),c&&t(sd),_(_w),c&&t(aRe),c&&t(Zo),_(uw),_(Fw),_(vw),_(Tw),_(Mw),c&&t(nRe),c&&t(dd),_(Ew),c&&t(sRe),c&&t(er),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(lRe),c&&t(md),_(kw),c&&t(iRe),c&&t(or),_(Sw),_(Bw),_(Pw),_($w),_(Iw),c&&t(dRe),c&&t(pd),_(qw),c&&t(cRe),c&&t(rr),_(Nw),_(Dw),_(Gw),_(Ow),_(Vw),c&&t(fRe),c&&t(bd),_(Xw),c&&t(mRe),c&&t(tr),_(zw),_(Ww),_(Hw),_(Uw),_(Jw),c&&t(gRe),c&&t(Td),_(Yw),c&&t(hRe),c&&t(ar),_(Kw),_(eA),_(oA),_(rA),_(tA),c&&t(pRe),c&&t(Cd),_(aA),c&&t(_Re),c&&t(nr),_(nA),_(lA),_(iA),_(dA),_(cA),c&&t(uRe),c&&t(yd),_(fA),c&&t(bRe),c&&t(sr),_(mA),_(hA),_(pA),_(_A),_(uA),c&&t(FRe),c&&t(kd),_(bA),c&&t(vRe),c&&t(lr),_(FA),_(TA),_(MA),_(EA),_(CA),c&&t(TRe),c&&t(Bd),_(wA),c&&t(MRe),c&&t(ir),_(AA),_(LA),_(xA),_(kA),_(SA),c&&t(ERe),c&&t(Id),_(RA),c&&t(CRe),c&&t(dr),_(BA),_($A),_(IA),_(qA),_(NA),c&&t(wRe),c&&t(jd),_(jA),c&&t(ARe),c&&t(cr),_(DA),_(OA),_(VA),_(XA),_(zA),c&&t(yRe),c&&t(Od),_(QA),c&&t(LRe),c&&t(fr),_(WA),_(UA),_(JA),_(YA),_(KA),c&&t(xRe),c&&t(zd),_(ZA),c&&t(kRe),c&&t(mr),_(e0),_(r0),_(t0),_(a0),_(s0),c&&t(SRe),c&&t(Hd),_(l0),c&&t(RRe),c&&t(gr),_(i0),_(c0),_(f0),_(m0),_(g0),c&&t(BRe),c&&t(Yd),_(h0),c&&t(PRe),c&&t(hr),_(p0),_(u0),_(b0),_(F0),_(v0),c&&t($Re),c&&t(oc),_(T0),c&&t(IRe),c&&t(pr),_(M0),_(C0),_(w0),_(A0),_(y0),c&&t(qRe),c&&t(ac),_(L0),c&&t(NRe),c&&t(_r),_(x0),_(S0),_(R0),_(B0),_(P0),c&&t(jRe),c&&t(lc),_($0),c&&t(DRe),c&&t(ur),_(I0),_(N0),_(j0),_(D0),_(G0),c&&t(GRe),c&&t(fc),_(O0),c&&t(ORe),c&&t(br),_(V0),_(z0),_(Q0),_(W0),_(H0),c&&t(VRe),c&&t(hc),_(U0),c&&t(XRe),c&&t(Fr),_(J0),_(K0),_(Z0),_(ey),_(oy),c&&t(zRe),c&&t(uc),_(ry),c&&t(QRe),c&&t(vr),_(ty),_(ny),_(sy),_(ly),_(iy),c&&t(WRe),c&&t(vc),_(dy),c&&t(HRe),c&&t(Tr),_(cy),_(my),_(gy),_(hy),_(py),c&&t(URe),c&&t(Ec),_(_y),c&&t(JRe),c&&t(Mr),_(uy),_(Fy),_(vy),_(Ty),_(Ey),c&&t(YRe),c&&t(Ac),_(Cy),c&&t(KRe),c&&t(Er),_(wy),_(yy),_(Ly),_(xy),_(ky),c&&t(ZRe),c&&t(xc),_(Sy),c&&t(eBe),c&&t(Cr),_(Ry),_(Py),_($y),_(Iy),_(qy),c&&t(oBe),c&&t(Rc),_(Ny),c&&t(rBe),c&&t(wr),_(jy),_(Gy),_(Oy),_(Vy),_(Xy),c&&t(tBe),c&&t($c),_(zy),c&&t(aBe),c&&t(Ar),_(Qy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(nBe),c&&t(Nc),_(Ky),c&&t(sBe),c&&t(yr),_(Zy),_(oL),_(rL),_(tL),_(aL),c&&t(lBe),c&&t(Gc),_(nL),c&&t(iBe),c&&t(Lr),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(dBe),c&&t(Xc),_(mL),c&&t(cBe),c&&t(xr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(fBe),c&&t(Wc),_(FL),c&&t(mBe),c&&t(kr),_(vL),_(ML),_(EL),_(CL),_(wL),c&&t(gBe),c&&t(Jc),_(AL),c&&t(hBe),c&&t(Sr),_(yL),_(xL),_(kL),_(SL),_(RL),c&&t(pBe),c&&t(Zc),_(BL),c&&t(_Be),c&&t(Rr),_(PL),_(IL),_(qL),_(NL),_(jL),c&&t(uBe),c&&t(rf),_(DL),c&&t(bBe),c&&t(Br),_(GL),_(VL),_(XL),_(zL),_(QL),c&&t(FBe),c&&t(nf),_(WL),c&&t(vBe),c&&t(Pr),_(HL),_(JL),_(YL),_(KL),_(ZL),c&&t(TBe),c&&t(df),_(e8),c&&t(MBe),c&&t($r),_(o8),_(t8),_(a8),_(n8),_(s8),c&&t(EBe),c&&t(mf),_(l8),c&&t(CBe),c&&t(Ir),_(i8),_(c8),_(f8),_(m8),_(g8),c&&t(wBe),c&&t(pf),_(h8),c&&t(ABe),c&&t(qr),_(p8),_(u8),_(b8),_(F8),_(v8),c&&t(yBe),c&&t(bf),_(T8),c&&t(LBe),c&&t(Nr),_(M8),_(C8),_(w8),_(A8),_(y8),c&&t(xBe),c&&t(Tf),_(L8),c&&t(kBe),c&&t(jr),_(x8),_(S8),_(R8),_(B8),_(P8),c&&t(SBe),c&&t(Cf),_($8),c&&t(RBe),c&&t(Dr),_(I8),_(N8),_(j8),_(D8),_(G8),c&&t(BBe),c&&t(yf),_(O8),c&&t(PBe),c&&t(Gr),_(V8),_(z8),_(Q8),_(W8),_(H8),c&&t($Be),c&&t(kf),_(U8),c&&t(IBe),c&&t(Or),_(J8),_(K8),_(Z8),_(e7),_(r7),c&&t(qBe),c&&t(Bf),_(t7),c&&t(NBe),c&&t(Vr),_(a7),_(s7),_(l7),_(i7),_(d7)}}}const dCt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cCt(qf){return aCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class _Ct extends eCt{constructor(Z){super();oCt(this,Z,cCt,iCt,rCt,{})}}export{_Ct as default,dCt as metadata};
