import{S as Pp,i as Ap,s as Cp,e as s,k as m,w as h,t as o,M as Fp,c as l,d as a,m as f,a as p,x as d,h as r,b as c,N as Dp,F as t,g as i,y as u,q as g,o as _,B as v,v as Tp}from"../chunks/vendor-8138ceec.js";import{T as Op}from"../chunks/Tip-12722dfc.js";import{I as U}from"../chunks/IconCopyLink-2dd3a6ac.js";import{C as $}from"../chunks/CodeBlock-fc89709f.js";function Lp(Pt){let j,Y,w,y,F;return{c(){j=s("p"),Y=o("Feel free to use other data augmentation libraries like "),w=s("a"),y=o("Albumentations"),F=o(". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),this.h()},l(E){j=l(E,"P",{});var x=p(j);Y=r(x,"Feel free to use other data augmentation libraries like "),w=l(x,"A",{href:!0,rel:!0});var M=p(w);y=r(M,"Albumentations"),M.forEach(a),F=r(x,". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),x.forEach(a),this.h()},h(){c(w,"href","https://albumentations.ai/docs/"),c(w,"rel","nofollow")},m(E,x){i(E,j,x),t(j,Y),t(j,w),t(w,y),t(j,F)},d(E){E&&a(j)}}}function Np(Pt){let j,Y,w,y,F,E,x,M,ul,At,K,gl,na,_l,vl,Ct,q,Ta,$l,jl,Ee,wl,Oa,bl,El,yl,ye,ql,pa,kl,xl,Il,qe,Dl,ia,Pl,Al,Ft,T,Q,La,ke,Cl,Na,Fl,Tt,I,Tl,ma,Ol,Ll,fa,Nl,Bl,Ot,xe,Lt,O,V,Ba,Ie,zl,za,Sl,Nt,ca,Jl,Bt,W,De,Rl,Sa,Hl,Gl,Ul,Ja,Yl,zt,X,Ml,Pe,Kl,Ql,St,Ae,Jt,k,Vl,ha,Wl,Xl,Ra,Zl,eo,Ha,ao,to,Rt,Ce,Ht,da,ua,Zr,Gt,D,so,ga,lo,oo,_a,ro,no,Ut,Fe,Yt,P,po,Ga,io,mo,Ua,fo,co,Mt,Te,Kt,L,Z,Ya,Oe,ho,Ma,uo,Qt,ee,go,Ka,_o,vo,Vt,Le,Wt,A,$o,Qa,jo,wo,Va,bo,Eo,Xt,Ne,Zt,ae,yo,Wa,qo,ko,es,Be,as,N,Xa,xo,Io,Za,Do,Po,ts,B,te,et,ze,Ao,at,Co,ss,se,Fo,tt,To,Oo,ls,Se,os,le,Lo,st,No,Bo,rs,z,oe,lt,Je,zo,ot,So,ns,re,Jo,rt,Ro,Ho,ps,Re,is,S,nt,Go,Uo,pt,Yo,Mo,ms,He,fs,J,ne,it,Ge,Ko,mt,Qo,cs,pe,Vo,ft,Wo,Xo,hs,Ue,ds,R,ct,Zo,er,ht,ar,tr,us,Ye,gs,H,ie,dt,Me,sr,ut,lr,_s,Ke,va,or,rr,vs,me,nr,Qe,gt,pr,ir,$s,Ve,js,b,mr,$a,fr,cr,_t,hr,dr,vt,ur,gr,$t,_r,vr,ws,We,bs,fe,$r,ja,jr,wr,Es,Xe,wa,br,Er,ys,ce,ba,Ea,jt,yr,qr,kr,ya,qa,wt,xr,Ir,qs,he,Dr,ka,Pr,Ar,ks,G,de,bt,Ze,Cr,Et,Fr,xs,ue,Tr,ea,Or,Lr,Is,ge,Ds,_e,Nr,aa,yt,Br,zr,Ps,ta,As,ve,Sr,qt,Jr,Rr,Cs,sa,Fs,$e,Hr,xa,Gr,Ur,Ts,la,Os,je,Yr,kt,Mr,Kr,Ls,oa,Ns,Ia,Da,en,Bs;return E=new U({}),ke=new U({}),xe=new $({props:{code:"pip install datasets[vision]",highlighted:"pip install datasets[vision]"}}),Ie=new U({}),Ae=new $({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[:100]")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x7FC45AB5C590</span>&gt;,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>}`}}),Ce=new $({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[100:200]")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[100:200]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x16289FBE0</span>&gt;`}}),Fe=new $({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),Te=new $({props:{code:`dataset = load_dataset("food101", split="train[:100]").cast_column('image', Image(decode=False))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>).cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))'}}),Oe=new U({}),Le=new $({props:{code:`folder/train/dog/golden_retriever.png
folder/train/dog/german_shepherd.png
folder/train/dog/chihuahua.png

folder/train/cat/maine_coon.png
folder/train/cat/bengal.png
folder/train/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/train/</span>dog/golden_retriever.png
folder<span class="hljs-regexp">/train/</span>dog/german_shepherd.png
folder<span class="hljs-regexp">/train/</span>dog/chihuahua.png

folder<span class="hljs-regexp">/train/</span>cat/maine_coon.png
folder<span class="hljs-regexp">/train/</span>cat/bengal.png
folder<span class="hljs-regexp">/train/</span>cat/birman.png`}}),Ne=new $({props:{code:`from datasets import load_dataset
dataset = load_dataset("imagefolder", data_dir="/path/to/folder")
dataset["train"][0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]
&lt;PIL.PngImagePlugin.PngImageFile image mode=RGBA size=1200x215 at <span class="hljs-number">0x15E6D7160</span>&gt;]`}}),Be=new $({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),ze=new U({}),Se=new $({props:{code:`folder/train/metadata.jsonl
folder/train/0001.png
folder/train/0002.png
folder/train/0003.png`,highlighted:`folder<span class="hljs-regexp">/train/m</span>etadata.jsonl
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0001</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0002</span>.png
folder<span class="hljs-regexp">/train/</span><span class="hljs-number">0003</span>.png`}}),Je=new U({}),Re=new $({props:{code:`{"file_name": "0001.png", "text": "This is a golden retriever playing with a ball"}
{"file_name": "0002.png", "text": "A german shepherd"}
{"file_name": "0003.png", "text": "One chihuahua"}`,highlighted:`{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0001.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;This is a golden retriever playing with a ball&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0002.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;A german shepherd&quot;</span>}
{<span class="hljs-comment">&quot;file_name&quot;</span>: <span class="hljs-comment">&quot;0003.png&quot;</span>, <span class="hljs-comment">&quot;text&quot;</span>: <span class="hljs-comment">&quot;One chihuahua&quot;</span>}`}}),He=new $({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["text"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;text&quot;</span>]
This <span class="hljs-keyword">is</span> a golden retriever playing <span class="hljs-keyword">with</span> a ball`}}),Ge=new U({}),Ue=new $({props:{code:`{"file_name": "0001.png", "objects": {"bbox": [[302.0, 109.0, 73.0, 52.0]], "categories": [0]}}
{"file_name": "0002.png", "objects": {"bbox": [[810.0, 100.0, 57.0, 28.0]], "categories": [1]}}
{"file_name": "0003.png", "objects": {"bbox": [[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]], "categories": [2, 2]}}`,highlighted:`{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0001.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[302.0, 109.0, 73.0, 52.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0002.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[810.0, 100.0, 57.0, 28.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">1</span>]}}
{<span class="hljs-string">&quot;file_name&quot;</span>: <span class="hljs-string">&quot;0003.png&quot;</span>, <span class="hljs-string">&quot;objects&quot;</span>: {<span class="hljs-string">&quot;bbox&quot;</span>: <span class="hljs-string">[[160.0, 31.0, 248.0, 616.0], [741.0, 68.0, 202.0, 401.0]]</span>, <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">2</span>, <span class="hljs-number">2</span>]}}`}}),Ye=new $({props:{code:`dataset = load_dataset("imagefolder", data_dir="/path/to/folder", split="train")
dataset[0]["objects"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;objects&quot;</span>]
{<span class="hljs-string">&quot;bbox&quot;</span>: [[<span class="hljs-number">302.0</span>, <span class="hljs-number">109.0</span>, <span class="hljs-number">73.0</span>, <span class="hljs-number">52.0</span>]], <span class="hljs-string">&quot;categories&quot;</span>: [<span class="hljs-number">0</span>]}`}}),Me=new U({}),Ve=new $({props:{code:`def transforms(examples):
    examples["pixel_values"] = [image.convert("RGB").resize((100,100)) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [image.convert(<span class="hljs-string">&quot;RGB&quot;</span>).resize((<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),We=new $({props:{code:`dataset = dataset.map(transforms, remove_columns=["image"], batched=True)
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(transforms, remove_columns=[<span class="hljs-string">&quot;image&quot;</span>], batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>,
 <span class="hljs-string">&#x27;pixel_values&#x27;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGB size=100x100 at <span class="hljs-number">0x7F058237BB10</span>&gt;}`}}),Ze=new U({}),ge=new Op({props:{$$slots:{default:[Lp]},$$scope:{ctx:Pt}}}),ta=new $({props:{code:`from torchvision.transforms import Compose, ColorJitter, ToTensor

jitter = Compose(
    [
         ColorJitter(brightness=0.25, contrast=0.25, saturation=0.25, hue=0.7),
         ToTensor(),
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> Compose, ColorJitter, ToTensor

<span class="hljs-meta">&gt;&gt;&gt; </span>jitter = Compose(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>         ColorJitter(brightness=<span class="hljs-number">0.25</span>, contrast=<span class="hljs-number">0.25</span>, saturation=<span class="hljs-number">0.25</span>, hue=<span class="hljs-number">0.7</span>),
<span class="hljs-meta">... </span>         ToTensor(),
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),sa=new $({props:{code:`def transforms(examples):
    examples["pixel_values"] = [jitter(image.convert("RGB")) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [jitter(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),la=new $({props:{code:"dataset.set_transform(transforms)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)'}}),oa=new $({props:{code:`import numpy as np
import matplotlib.pyplot as plt

img = dataset[0]["pixel_values"]
plt.imshow(img.permute(1, 2, 0))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`}}),{c(){j=s("meta"),Y=m(),w=s("h1"),y=s("a"),F=s("span"),h(E.$$.fragment),x=m(),M=s("span"),ul=o("Process image data"),At=m(),K=s("p"),gl=o("\u{1F917} Datasets support loading and processing images with the "),na=s("a"),_l=o("Image"),vl=o(" feature. This guide will show you how to:"),Ct=m(),q=s("ul"),Ta=s("li"),$l=o("Load an image dataset."),jl=m(),Ee=s("li"),wl=o("Load a generic image dataset with "),Oa=s("code"),bl=o("ImageFolder"),El=o("."),yl=m(),ye=s("li"),ql=o("Use "),pa=s("a"),kl=o("Dataset.map()"),xl=o(" to quickly apply transforms to an entire dataset."),Il=m(),qe=s("li"),Dl=o("Add data augmentations to your images with "),ia=s("a"),Pl=o("Dataset.set_transform()"),Al=o("."),Ft=m(),T=s("h2"),Q=s("a"),La=s("span"),h(ke.$$.fragment),Cl=m(),Na=s("span"),Fl=o("Installation"),Tt=m(),I=s("p"),Tl=o("The "),ma=s("a"),Ol=o("Image"),Ll=o(" feature should be installed as an extra dependency in \u{1F917} Datasets. Install the "),fa=s("a"),Nl=o("Image"),Bl=o(" feature (and its dependencies) with pip:"),Ot=m(),h(xe.$$.fragment),Lt=m(),O=s("h2"),V=s("a"),Ba=s("span"),h(Ie.$$.fragment),zl=m(),za=s("span"),Sl=o("Image datasets"),Nt=m(),ca=s("p"),Jl=o("The images in an image dataset are typically either a:"),Bt=m(),W=s("ul"),De=s("li"),Rl=o("PIL "),Sa=s("code"),Hl=o("image"),Gl=o("."),Ul=m(),Ja=s("li"),Yl=o("Path to an image file you can load."),zt=m(),X=s("p"),Ml=o("For example, load the "),Pe=s("a"),Kl=o("Food-101"),Ql=o(" dataset and take a look:"),St=m(),h(Ae.$$.fragment),Jt=m(),k=s("p"),Vl=o("The "),ha=s("a"),Wl=o("Image"),Xl=o(" feature automatically decodes the data from the "),Ra=s("code"),Zl=o("image"),eo=o(" column to return an image object. Now try and call the "),Ha=s("code"),ao=o("image"),to=o(" column to see what the image is:"),Rt=m(),h(Ce.$$.fragment),Ht=m(),da=s("p"),ua=s("img"),Gt=m(),D=s("p"),so=o("To load an image from its path, use the "),ga=s("a"),lo=o("Dataset.cast_column()"),oo=o(" method. The "),_a=s("a"),ro=o("Image"),no=o(" feature will decode the data at the path to return an image object:"),Ut=m(),h(Fe.$$.fragment),Yt=m(),P=s("p"),po=o("You can also access the path and bytes of an image file by setting "),Ga=s("code"),io=o("decode=False"),mo=o(" when you load a dataset. In this case, you will need to cast the "),Ua=s("code"),fo=o("image"),co=o(" column:"),Mt=m(),h(Te.$$.fragment),Kt=m(),L=s("h2"),Z=s("a"),Ya=s("span"),h(Oe.$$.fragment),ho=m(),Ma=s("span"),uo=o("ImageFolder"),Qt=m(),ee=s("p"),go=o("You can also load your image dataset with a "),Ka=s("code"),_o=o("ImageFolder"),vo=o(" dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),Vt=m(),h(Le.$$.fragment),Wt=m(),A=s("p"),$o=o("Then load your dataset by specifying "),Qa=s("code"),jo=o("imagefolder"),wo=o(" and the directory of your dataset in "),Va=s("code"),bo=o("data_dir"),Eo=o(":"),Xt=m(),h(Ne.$$.fragment),Zt=m(),ae=s("p"),yo=o("Load remote datasets from their URLs with the "),Wa=s("code"),qo=o("data_files"),ko=o(" parameter:"),es=m(),h(Be.$$.fragment),as=m(),N=s("p"),Xa=s("code"),xo=o("ImageFolder"),Io=o(" will create a "),Za=s("code"),Do=o("label"),Po=o(" column, and the label name is based on the directory name."),ts=m(),B=s("h2"),te=s("a"),et=s("span"),h(ze.$$.fragment),Ao=m(),at=s("span"),Co=o("ImageFolder with metadata"),ss=m(),se=s("p"),Fo=o("If your image dataset comes with metadata, they will be also loaded. First, make sure your dataset has a "),tt=s("code"),To=o("metadata.jsonl"),Oo=o(":"),ls=m(),h(Se.$$.fragment),os=m(),le=s("p"),Lo=o("You can link the metadata in "),st=s("code"),No=o("metadata.jsonl"),Bo=o(" file to the images using the \u201Cfile_path\u201D field."),rs=m(),z=s("h3"),oe=s("a"),lt=s("span"),h(Je.$$.fragment),zo=m(),ot=s("span"),So=o("Image captioning"),ns=m(),re=s("p"),Jo=o("Here is an example of "),rt=s("code"),Ro=o("metadata.jsonl"),Ho=o(" for image captioning:"),ps=m(),h(Re.$$.fragment),is=m(),S=s("p"),nt=s("code"),Go=o("ImageFolder"),Uo=o(" will create a "),pt=s("code"),Yo=o("text"),Mo=o(" column for the image captions:"),ms=m(),h(He.$$.fragment),fs=m(),J=s("h3"),ne=s("a"),it=s("span"),h(Ge.$$.fragment),Ko=m(),mt=s("span"),Qo=o("Object detection"),cs=m(),pe=s("p"),Vo=o("Here is an example of "),ft=s("code"),Wo=o("metadata.jsonl"),Xo=o(" for object detection:"),hs=m(),h(Ue.$$.fragment),ds=m(),R=s("p"),ct=s("code"),Zo=o("ImageFolder"),er=o(" will create a "),ht=s("code"),ar=o("objects"),tr=o(" column with the bounding boxes and the categories:"),us=m(),h(Ye.$$.fragment),gs=m(),H=s("h2"),ie=s("a"),dt=s("span"),h(Me.$$.fragment),sr=m(),ut=s("span"),lr=o("Map"),_s=m(),Ke=s("p"),va=s("a"),or=o("Dataset.map()"),rr=o(" can apply transforms over an entire dataset and it also generates a cache file."),vs=m(),me=s("p"),nr=o("Create a simple "),Qe=s("a"),gt=s("code"),pr=o("Resize"),ir=o(" function:"),$s=m(),h(Ve.$$.fragment),js=m(),b=s("p"),mr=o("Now "),$a=s("a"),fr=o("Dataset.map()"),cr=o(" the function over the entire dataset and set "),_t=s("code"),hr=o("batched=True"),dr=o(". The transform returns "),vt=s("code"),ur=o("pixel_values"),gr=o(" as a cacheable "),$t=s("code"),_r=o("PIL.Image"),vr=o(" object:"),ws=m(),h(We.$$.fragment),bs=m(),fe=s("p"),$r=o("This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),ja=s("a"),jr=o("Dataset.map()"),wr=o(" for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),Es=m(),Xe=s("p"),wa=s("a"),br=o("Dataset.map()"),Er=o(" takes up some memory, but you can reduce its memory requirements with the following parameters:"),ys=m(),ce=s("ul"),ba=s("li"),Ea=s("a"),jt=s("code"),yr=o("batch_size"),qr=o(" determines the number of examples that are processed in one call to the transform function."),kr=m(),ya=s("li"),qa=s("a"),wt=s("code"),xr=o("writer_batch_size"),Ir=o(" determines the number of processed examples that are kept in memory before they are stored away."),qs=m(),he=s("p"),Dr=o("Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),ka=s("a"),Pr=o("Dataset.map()"),Ar=o("."),ks=m(),G=s("h2"),de=s("a"),bt=s("span"),h(Ze.$$.fragment),Cr=m(),Et=s("span"),Fr=o("Data augmentation"),xs=m(),ue=s("p"),Tr=o("Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),ea=s("a"),Or=o("torchvision"),Lr=o("."),Is=m(),h(ge.$$.fragment),Ds=m(),_e=s("p"),Nr=o("Add the "),aa=s("a"),yt=s("code"),Br=o("ColorJitter"),zr=o(" transform to change the color properties of the image randomly:"),Ps=m(),h(ta.$$.fragment),As=m(),ve=s("p"),Sr=o("Create a function to apply the "),qt=s("code"),Jr=o("ColorJitter"),Rr=o(" transform to an image:"),Cs=m(),h(sa.$$.fragment),Fs=m(),$e=s("p"),Hr=o("Then you can use the "),xa=s("a"),Gr=o("Dataset.set_transform()"),Ur=o(" function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),Ts=m(),h(la.$$.fragment),Os=m(),je=s("p"),Yr=o("Now visualize the results of the "),kt=s("code"),Mr=o("ColorJitter"),Kr=o(" transform:"),Ls=m(),h(oa.$$.fragment),Ns=m(),Ia=s("p"),Da=s("img"),this.h()},l(e){const n=Fp('[data-svelte="svelte-1phssyn"]',document.head);j=l(n,"META",{name:!0,content:!0}),n.forEach(a),Y=f(e),w=l(e,"H1",{class:!0});var ra=p(w);y=l(ra,"A",{id:!0,class:!0,href:!0});var an=p(y);F=l(an,"SPAN",{});var tn=p(F);d(E.$$.fragment,tn),tn.forEach(a),an.forEach(a),x=f(ra),M=l(ra,"SPAN",{});var sn=p(M);ul=r(sn,"Process image data"),sn.forEach(a),ra.forEach(a),At=f(e),K=l(e,"P",{});var zs=p(K);gl=r(zs,"\u{1F917} Datasets support loading and processing images with the "),na=l(zs,"A",{href:!0});var ln=p(na);_l=r(ln,"Image"),ln.forEach(a),vl=r(zs," feature. This guide will show you how to:"),zs.forEach(a),Ct=f(e),q=l(e,"UL",{});var we=p(q);Ta=l(we,"LI",{});var on=p(Ta);$l=r(on,"Load an image dataset."),on.forEach(a),jl=f(we),Ee=l(we,"LI",{});var Ss=p(Ee);wl=r(Ss,"Load a generic image dataset with "),Oa=l(Ss,"CODE",{});var rn=p(Oa);bl=r(rn,"ImageFolder"),rn.forEach(a),El=r(Ss,"."),Ss.forEach(a),yl=f(we),ye=l(we,"LI",{});var Js=p(ye);ql=r(Js,"Use "),pa=l(Js,"A",{href:!0});var nn=p(pa);kl=r(nn,"Dataset.map()"),nn.forEach(a),xl=r(Js," to quickly apply transforms to an entire dataset."),Js.forEach(a),Il=f(we),qe=l(we,"LI",{});var Rs=p(qe);Dl=r(Rs,"Add data augmentations to your images with "),ia=l(Rs,"A",{href:!0});var pn=p(ia);Pl=r(pn,"Dataset.set_transform()"),pn.forEach(a),Al=r(Rs,"."),Rs.forEach(a),we.forEach(a),Ft=f(e),T=l(e,"H2",{class:!0});var Hs=p(T);Q=l(Hs,"A",{id:!0,class:!0,href:!0});var mn=p(Q);La=l(mn,"SPAN",{});var fn=p(La);d(ke.$$.fragment,fn),fn.forEach(a),mn.forEach(a),Cl=f(Hs),Na=l(Hs,"SPAN",{});var cn=p(Na);Fl=r(cn,"Installation"),cn.forEach(a),Hs.forEach(a),Tt=f(e),I=l(e,"P",{});var Pa=p(I);Tl=r(Pa,"The "),ma=l(Pa,"A",{href:!0});var hn=p(ma);Ol=r(hn,"Image"),hn.forEach(a),Ll=r(Pa," feature should be installed as an extra dependency in \u{1F917} Datasets. Install the "),fa=l(Pa,"A",{href:!0});var dn=p(fa);Nl=r(dn,"Image"),dn.forEach(a),Bl=r(Pa," feature (and its dependencies) with pip:"),Pa.forEach(a),Ot=f(e),d(xe.$$.fragment,e),Lt=f(e),O=l(e,"H2",{class:!0});var Gs=p(O);V=l(Gs,"A",{id:!0,class:!0,href:!0});var un=p(V);Ba=l(un,"SPAN",{});var gn=p(Ba);d(Ie.$$.fragment,gn),gn.forEach(a),un.forEach(a),zl=f(Gs),za=l(Gs,"SPAN",{});var _n=p(za);Sl=r(_n,"Image datasets"),_n.forEach(a),Gs.forEach(a),Nt=f(e),ca=l(e,"P",{});var vn=p(ca);Jl=r(vn,"The images in an image dataset are typically either a:"),vn.forEach(a),Bt=f(e),W=l(e,"UL",{});var Us=p(W);De=l(Us,"LI",{});var Ys=p(De);Rl=r(Ys,"PIL "),Sa=l(Ys,"CODE",{});var $n=p(Sa);Hl=r($n,"image"),$n.forEach(a),Gl=r(Ys,"."),Ys.forEach(a),Ul=f(Us),Ja=l(Us,"LI",{});var jn=p(Ja);Yl=r(jn,"Path to an image file you can load."),jn.forEach(a),Us.forEach(a),zt=f(e),X=l(e,"P",{});var Ms=p(X);Ml=r(Ms,"For example, load the "),Pe=l(Ms,"A",{href:!0,rel:!0});var wn=p(Pe);Kl=r(wn,"Food-101"),wn.forEach(a),Ql=r(Ms," dataset and take a look:"),Ms.forEach(a),St=f(e),d(Ae.$$.fragment,e),Jt=f(e),k=l(e,"P",{});var be=p(k);Vl=r(be,"The "),ha=l(be,"A",{href:!0});var bn=p(ha);Wl=r(bn,"Image"),bn.forEach(a),Xl=r(be," feature automatically decodes the data from the "),Ra=l(be,"CODE",{});var En=p(Ra);Zl=r(En,"image"),En.forEach(a),eo=r(be," column to return an image object. Now try and call the "),Ha=l(be,"CODE",{});var yn=p(Ha);ao=r(yn,"image"),yn.forEach(a),to=r(be," column to see what the image is:"),be.forEach(a),Rt=f(e),d(Ce.$$.fragment,e),Ht=f(e),da=l(e,"P",{});var qn=p(da);ua=l(qn,"IMG",{src:!0,alt:!0}),qn.forEach(a),Gt=f(e),D=l(e,"P",{});var Aa=p(D);so=r(Aa,"To load an image from its path, use the "),ga=l(Aa,"A",{href:!0});var kn=p(ga);lo=r(kn,"Dataset.cast_column()"),kn.forEach(a),oo=r(Aa," method. The "),_a=l(Aa,"A",{href:!0});var xn=p(_a);ro=r(xn,"Image"),xn.forEach(a),no=r(Aa," feature will decode the data at the path to return an image object:"),Aa.forEach(a),Ut=f(e),d(Fe.$$.fragment,e),Yt=f(e),P=l(e,"P",{});var Ca=p(P);po=r(Ca,"You can also access the path and bytes of an image file by setting "),Ga=l(Ca,"CODE",{});var In=p(Ga);io=r(In,"decode=False"),In.forEach(a),mo=r(Ca," when you load a dataset. In this case, you will need to cast the "),Ua=l(Ca,"CODE",{});var Dn=p(Ua);fo=r(Dn,"image"),Dn.forEach(a),co=r(Ca," column:"),Ca.forEach(a),Mt=f(e),d(Te.$$.fragment,e),Kt=f(e),L=l(e,"H2",{class:!0});var Ks=p(L);Z=l(Ks,"A",{id:!0,class:!0,href:!0});var Pn=p(Z);Ya=l(Pn,"SPAN",{});var An=p(Ya);d(Oe.$$.fragment,An),An.forEach(a),Pn.forEach(a),ho=f(Ks),Ma=l(Ks,"SPAN",{});var Cn=p(Ma);uo=r(Cn,"ImageFolder"),Cn.forEach(a),Ks.forEach(a),Qt=f(e),ee=l(e,"P",{});var Qs=p(ee);go=r(Qs,"You can also load your image dataset with a "),Ka=l(Qs,"CODE",{});var Fn=p(Ka);_o=r(Fn,"ImageFolder"),Fn.forEach(a),vo=r(Qs," dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),Qs.forEach(a),Vt=f(e),d(Le.$$.fragment,e),Wt=f(e),A=l(e,"P",{});var Fa=p(A);$o=r(Fa,"Then load your dataset by specifying "),Qa=l(Fa,"CODE",{});var Tn=p(Qa);jo=r(Tn,"imagefolder"),Tn.forEach(a),wo=r(Fa," and the directory of your dataset in "),Va=l(Fa,"CODE",{});var On=p(Va);bo=r(On,"data_dir"),On.forEach(a),Eo=r(Fa,":"),Fa.forEach(a),Xt=f(e),d(Ne.$$.fragment,e),Zt=f(e),ae=l(e,"P",{});var Vs=p(ae);yo=r(Vs,"Load remote datasets from their URLs with the "),Wa=l(Vs,"CODE",{});var Ln=p(Wa);qo=r(Ln,"data_files"),Ln.forEach(a),ko=r(Vs," parameter:"),Vs.forEach(a),es=f(e),d(Be.$$.fragment,e),as=f(e),N=l(e,"P",{});var xt=p(N);Xa=l(xt,"CODE",{});var Nn=p(Xa);xo=r(Nn,"ImageFolder"),Nn.forEach(a),Io=r(xt," will create a "),Za=l(xt,"CODE",{});var Bn=p(Za);Do=r(Bn,"label"),Bn.forEach(a),Po=r(xt," column, and the label name is based on the directory name."),xt.forEach(a),ts=f(e),B=l(e,"H2",{class:!0});var Ws=p(B);te=l(Ws,"A",{id:!0,class:!0,href:!0});var zn=p(te);et=l(zn,"SPAN",{});var Sn=p(et);d(ze.$$.fragment,Sn),Sn.forEach(a),zn.forEach(a),Ao=f(Ws),at=l(Ws,"SPAN",{});var Jn=p(at);Co=r(Jn,"ImageFolder with metadata"),Jn.forEach(a),Ws.forEach(a),ss=f(e),se=l(e,"P",{});var Xs=p(se);Fo=r(Xs,"If your image dataset comes with metadata, they will be also loaded. First, make sure your dataset has a "),tt=l(Xs,"CODE",{});var Rn=p(tt);To=r(Rn,"metadata.jsonl"),Rn.forEach(a),Oo=r(Xs,":"),Xs.forEach(a),ls=f(e),d(Se.$$.fragment,e),os=f(e),le=l(e,"P",{});var Zs=p(le);Lo=r(Zs,"You can link the metadata in "),st=l(Zs,"CODE",{});var Hn=p(st);No=r(Hn,"metadata.jsonl"),Hn.forEach(a),Bo=r(Zs," file to the images using the \u201Cfile_path\u201D field."),Zs.forEach(a),rs=f(e),z=l(e,"H3",{class:!0});var el=p(z);oe=l(el,"A",{id:!0,class:!0,href:!0});var Gn=p(oe);lt=l(Gn,"SPAN",{});var Un=p(lt);d(Je.$$.fragment,Un),Un.forEach(a),Gn.forEach(a),zo=f(el),ot=l(el,"SPAN",{});var Yn=p(ot);So=r(Yn,"Image captioning"),Yn.forEach(a),el.forEach(a),ns=f(e),re=l(e,"P",{});var al=p(re);Jo=r(al,"Here is an example of "),rt=l(al,"CODE",{});var Mn=p(rt);Ro=r(Mn,"metadata.jsonl"),Mn.forEach(a),Ho=r(al," for image captioning:"),al.forEach(a),ps=f(e),d(Re.$$.fragment,e),is=f(e),S=l(e,"P",{});var It=p(S);nt=l(It,"CODE",{});var Kn=p(nt);Go=r(Kn,"ImageFolder"),Kn.forEach(a),Uo=r(It," will create a "),pt=l(It,"CODE",{});var Qn=p(pt);Yo=r(Qn,"text"),Qn.forEach(a),Mo=r(It," column for the image captions:"),It.forEach(a),ms=f(e),d(He.$$.fragment,e),fs=f(e),J=l(e,"H3",{class:!0});var tl=p(J);ne=l(tl,"A",{id:!0,class:!0,href:!0});var Vn=p(ne);it=l(Vn,"SPAN",{});var Wn=p(it);d(Ge.$$.fragment,Wn),Wn.forEach(a),Vn.forEach(a),Ko=f(tl),mt=l(tl,"SPAN",{});var Xn=p(mt);Qo=r(Xn,"Object detection"),Xn.forEach(a),tl.forEach(a),cs=f(e),pe=l(e,"P",{});var sl=p(pe);Vo=r(sl,"Here is an example of "),ft=l(sl,"CODE",{});var Zn=p(ft);Wo=r(Zn,"metadata.jsonl"),Zn.forEach(a),Xo=r(sl," for object detection:"),sl.forEach(a),hs=f(e),d(Ue.$$.fragment,e),ds=f(e),R=l(e,"P",{});var Dt=p(R);ct=l(Dt,"CODE",{});var ep=p(ct);Zo=r(ep,"ImageFolder"),ep.forEach(a),er=r(Dt," will create a "),ht=l(Dt,"CODE",{});var ap=p(ht);ar=r(ap,"objects"),ap.forEach(a),tr=r(Dt," column with the bounding boxes and the categories:"),Dt.forEach(a),us=f(e),d(Ye.$$.fragment,e),gs=f(e),H=l(e,"H2",{class:!0});var ll=p(H);ie=l(ll,"A",{id:!0,class:!0,href:!0});var tp=p(ie);dt=l(tp,"SPAN",{});var sp=p(dt);d(Me.$$.fragment,sp),sp.forEach(a),tp.forEach(a),sr=f(ll),ut=l(ll,"SPAN",{});var lp=p(ut);lr=r(lp,"Map"),lp.forEach(a),ll.forEach(a),_s=f(e),Ke=l(e,"P",{});var Qr=p(Ke);va=l(Qr,"A",{href:!0});var op=p(va);or=r(op,"Dataset.map()"),op.forEach(a),rr=r(Qr," can apply transforms over an entire dataset and it also generates a cache file."),Qr.forEach(a),vs=f(e),me=l(e,"P",{});var ol=p(me);nr=r(ol,"Create a simple "),Qe=l(ol,"A",{href:!0,rel:!0});var rp=p(Qe);gt=l(rp,"CODE",{});var np=p(gt);pr=r(np,"Resize"),np.forEach(a),rp.forEach(a),ir=r(ol," function:"),ol.forEach(a),$s=f(e),d(Ve.$$.fragment,e),js=f(e),b=l(e,"P",{});var C=p(b);mr=r(C,"Now "),$a=l(C,"A",{href:!0});var pp=p($a);fr=r(pp,"Dataset.map()"),pp.forEach(a),cr=r(C," the function over the entire dataset and set "),_t=l(C,"CODE",{});var ip=p(_t);hr=r(ip,"batched=True"),ip.forEach(a),dr=r(C,". The transform returns "),vt=l(C,"CODE",{});var mp=p(vt);ur=r(mp,"pixel_values"),mp.forEach(a),gr=r(C," as a cacheable "),$t=l(C,"CODE",{});var fp=p($t);_r=r(fp,"PIL.Image"),fp.forEach(a),vr=r(C," object:"),C.forEach(a),ws=f(e),d(We.$$.fragment,e),bs=f(e),fe=l(e,"P",{});var rl=p(fe);$r=r(rl,"This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),ja=l(rl,"A",{href:!0});var cp=p(ja);jr=r(cp,"Dataset.map()"),cp.forEach(a),wr=r(rl," for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),rl.forEach(a),Es=f(e),Xe=l(e,"P",{});var Vr=p(Xe);wa=l(Vr,"A",{href:!0});var hp=p(wa);br=r(hp,"Dataset.map()"),hp.forEach(a),Er=r(Vr," takes up some memory, but you can reduce its memory requirements with the following parameters:"),Vr.forEach(a),ys=f(e),ce=l(e,"UL",{});var nl=p(ce);ba=l(nl,"LI",{});var Wr=p(ba);Ea=l(Wr,"A",{href:!0});var dp=p(Ea);jt=l(dp,"CODE",{});var up=p(jt);yr=r(up,"batch_size"),up.forEach(a),dp.forEach(a),qr=r(Wr," determines the number of examples that are processed in one call to the transform function."),Wr.forEach(a),kr=f(nl),ya=l(nl,"LI",{});var Xr=p(ya);qa=l(Xr,"A",{href:!0});var gp=p(qa);wt=l(gp,"CODE",{});var _p=p(wt);xr=r(_p,"writer_batch_size"),_p.forEach(a),gp.forEach(a),Ir=r(Xr," determines the number of processed examples that are kept in memory before they are stored away."),Xr.forEach(a),nl.forEach(a),qs=f(e),he=l(e,"P",{});var pl=p(he);Dr=r(pl,"Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),ka=l(pl,"A",{href:!0});var vp=p(ka);Pr=r(vp,"Dataset.map()"),vp.forEach(a),Ar=r(pl,"."),pl.forEach(a),ks=f(e),G=l(e,"H2",{class:!0});var il=p(G);de=l(il,"A",{id:!0,class:!0,href:!0});var $p=p(de);bt=l($p,"SPAN",{});var jp=p(bt);d(Ze.$$.fragment,jp),jp.forEach(a),$p.forEach(a),Cr=f(il),Et=l(il,"SPAN",{});var wp=p(Et);Fr=r(wp,"Data augmentation"),wp.forEach(a),il.forEach(a),xs=f(e),ue=l(e,"P",{});var ml=p(ue);Tr=r(ml,"Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),ea=l(ml,"A",{href:!0,rel:!0});var bp=p(ea);Or=r(bp,"torchvision"),bp.forEach(a),Lr=r(ml,"."),ml.forEach(a),Is=f(e),d(ge.$$.fragment,e),Ds=f(e),_e=l(e,"P",{});var fl=p(_e);Nr=r(fl,"Add the "),aa=l(fl,"A",{href:!0,rel:!0});var Ep=p(aa);yt=l(Ep,"CODE",{});var yp=p(yt);Br=r(yp,"ColorJitter"),yp.forEach(a),Ep.forEach(a),zr=r(fl," transform to change the color properties of the image randomly:"),fl.forEach(a),Ps=f(e),d(ta.$$.fragment,e),As=f(e),ve=l(e,"P",{});var cl=p(ve);Sr=r(cl,"Create a function to apply the "),qt=l(cl,"CODE",{});var qp=p(qt);Jr=r(qp,"ColorJitter"),qp.forEach(a),Rr=r(cl," transform to an image:"),cl.forEach(a),Cs=f(e),d(sa.$$.fragment,e),Fs=f(e),$e=l(e,"P",{});var hl=p($e);Hr=r(hl,"Then you can use the "),xa=l(hl,"A",{href:!0});var kp=p(xa);Gr=r(kp,"Dataset.set_transform()"),kp.forEach(a),Ur=r(hl," function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),hl.forEach(a),Ts=f(e),d(la.$$.fragment,e),Os=f(e),je=l(e,"P",{});var dl=p(je);Yr=r(dl,"Now visualize the results of the "),kt=l(dl,"CODE",{});var xp=p(kt);Mr=r(xp,"ColorJitter"),xp.forEach(a),Kr=r(dl," transform:"),dl.forEach(a),Ls=f(e),d(oa.$$.fragment,e),Ns=f(e),Ia=l(e,"P",{});var Ip=p(Ia);Da=l(Ip,"IMG",{src:!0,alt:!0}),Ip.forEach(a),this.h()},h(){c(j,"name","hf:doc:metadata"),c(j,"content",JSON.stringify(Bp)),c(y,"id","process-image-data"),c(y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y,"href","#process-image-data"),c(w,"class","relative group"),c(na,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Image"),c(pa,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(ia,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(Q,"id","installation"),c(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q,"href","#installation"),c(T,"class","relative group"),c(ma,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Image"),c(fa,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Image"),c(V,"id","image-datasets"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#image-datasets"),c(O,"class","relative group"),c(Pe,"href","https://huggingface.co/datasets/food101"),c(Pe,"rel","nofollow"),c(ha,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Image"),Dp(ua.src,Zr="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_beignet.png")||c(ua,"src",Zr),c(ua,"alt","image_process_beignet"),c(ga,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.cast_column"),c(_a,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Image"),c(Z,"id","imagefolder"),c(Z,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z,"href","#imagefolder"),c(L,"class","relative group"),c(te,"id","imagefolder-with-metadata"),c(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(te,"href","#imagefolder-with-metadata"),c(B,"class","relative group"),c(oe,"id","image-captioning"),c(oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oe,"href","#image-captioning"),c(z,"class","relative group"),c(ne,"id","object-detection"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#object-detection"),c(J,"class","relative group"),c(ie,"id","map"),c(ie,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ie,"href","#map"),c(H,"class","relative group"),c(va,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(Qe,"href","https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html"),c(Qe,"rel","nofollow"),c($a,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(ja,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(wa,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(Ea,"href","./package_reference/main_classes#datasets.DatasetDict.map.batch_size"),c(qa,"href","./package_reference/main_classes#datasets.DatasetDict.map.writer_batch_size"),c(ka,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.map"),c(de,"id","data-augmentation"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#data-augmentation"),c(G,"class","relative group"),c(ea,"href","https://pytorch.org/vision/stable/transforms.html"),c(ea,"rel","nofollow"),c(aa,"href","https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.ColorJitter"),c(aa,"rel","nofollow"),c(xa,"href","/docs/datasets/pr_4311/en/package_reference/main_classes#datasets.Dataset.set_transform"),Dp(Da.src,en="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_jitter.png")||c(Da,"src",en),c(Da,"alt","image_process_jitter")},m(e,n){t(document.head,j),i(e,Y,n),i(e,w,n),t(w,y),t(y,F),u(E,F,null),t(w,x),t(w,M),t(M,ul),i(e,At,n),i(e,K,n),t(K,gl),t(K,na),t(na,_l),t(K,vl),i(e,Ct,n),i(e,q,n),t(q,Ta),t(Ta,$l),t(q,jl),t(q,Ee),t(Ee,wl),t(Ee,Oa),t(Oa,bl),t(Ee,El),t(q,yl),t(q,ye),t(ye,ql),t(ye,pa),t(pa,kl),t(ye,xl),t(q,Il),t(q,qe),t(qe,Dl),t(qe,ia),t(ia,Pl),t(qe,Al),i(e,Ft,n),i(e,T,n),t(T,Q),t(Q,La),u(ke,La,null),t(T,Cl),t(T,Na),t(Na,Fl),i(e,Tt,n),i(e,I,n),t(I,Tl),t(I,ma),t(ma,Ol),t(I,Ll),t(I,fa),t(fa,Nl),t(I,Bl),i(e,Ot,n),u(xe,e,n),i(e,Lt,n),i(e,O,n),t(O,V),t(V,Ba),u(Ie,Ba,null),t(O,zl),t(O,za),t(za,Sl),i(e,Nt,n),i(e,ca,n),t(ca,Jl),i(e,Bt,n),i(e,W,n),t(W,De),t(De,Rl),t(De,Sa),t(Sa,Hl),t(De,Gl),t(W,Ul),t(W,Ja),t(Ja,Yl),i(e,zt,n),i(e,X,n),t(X,Ml),t(X,Pe),t(Pe,Kl),t(X,Ql),i(e,St,n),u(Ae,e,n),i(e,Jt,n),i(e,k,n),t(k,Vl),t(k,ha),t(ha,Wl),t(k,Xl),t(k,Ra),t(Ra,Zl),t(k,eo),t(k,Ha),t(Ha,ao),t(k,to),i(e,Rt,n),u(Ce,e,n),i(e,Ht,n),i(e,da,n),t(da,ua),i(e,Gt,n),i(e,D,n),t(D,so),t(D,ga),t(ga,lo),t(D,oo),t(D,_a),t(_a,ro),t(D,no),i(e,Ut,n),u(Fe,e,n),i(e,Yt,n),i(e,P,n),t(P,po),t(P,Ga),t(Ga,io),t(P,mo),t(P,Ua),t(Ua,fo),t(P,co),i(e,Mt,n),u(Te,e,n),i(e,Kt,n),i(e,L,n),t(L,Z),t(Z,Ya),u(Oe,Ya,null),t(L,ho),t(L,Ma),t(Ma,uo),i(e,Qt,n),i(e,ee,n),t(ee,go),t(ee,Ka),t(Ka,_o),t(ee,vo),i(e,Vt,n),u(Le,e,n),i(e,Wt,n),i(e,A,n),t(A,$o),t(A,Qa),t(Qa,jo),t(A,wo),t(A,Va),t(Va,bo),t(A,Eo),i(e,Xt,n),u(Ne,e,n),i(e,Zt,n),i(e,ae,n),t(ae,yo),t(ae,Wa),t(Wa,qo),t(ae,ko),i(e,es,n),u(Be,e,n),i(e,as,n),i(e,N,n),t(N,Xa),t(Xa,xo),t(N,Io),t(N,Za),t(Za,Do),t(N,Po),i(e,ts,n),i(e,B,n),t(B,te),t(te,et),u(ze,et,null),t(B,Ao),t(B,at),t(at,Co),i(e,ss,n),i(e,se,n),t(se,Fo),t(se,tt),t(tt,To),t(se,Oo),i(e,ls,n),u(Se,e,n),i(e,os,n),i(e,le,n),t(le,Lo),t(le,st),t(st,No),t(le,Bo),i(e,rs,n),i(e,z,n),t(z,oe),t(oe,lt),u(Je,lt,null),t(z,zo),t(z,ot),t(ot,So),i(e,ns,n),i(e,re,n),t(re,Jo),t(re,rt),t(rt,Ro),t(re,Ho),i(e,ps,n),u(Re,e,n),i(e,is,n),i(e,S,n),t(S,nt),t(nt,Go),t(S,Uo),t(S,pt),t(pt,Yo),t(S,Mo),i(e,ms,n),u(He,e,n),i(e,fs,n),i(e,J,n),t(J,ne),t(ne,it),u(Ge,it,null),t(J,Ko),t(J,mt),t(mt,Qo),i(e,cs,n),i(e,pe,n),t(pe,Vo),t(pe,ft),t(ft,Wo),t(pe,Xo),i(e,hs,n),u(Ue,e,n),i(e,ds,n),i(e,R,n),t(R,ct),t(ct,Zo),t(R,er),t(R,ht),t(ht,ar),t(R,tr),i(e,us,n),u(Ye,e,n),i(e,gs,n),i(e,H,n),t(H,ie),t(ie,dt),u(Me,dt,null),t(H,sr),t(H,ut),t(ut,lr),i(e,_s,n),i(e,Ke,n),t(Ke,va),t(va,or),t(Ke,rr),i(e,vs,n),i(e,me,n),t(me,nr),t(me,Qe),t(Qe,gt),t(gt,pr),t(me,ir),i(e,$s,n),u(Ve,e,n),i(e,js,n),i(e,b,n),t(b,mr),t(b,$a),t($a,fr),t(b,cr),t(b,_t),t(_t,hr),t(b,dr),t(b,vt),t(vt,ur),t(b,gr),t(b,$t),t($t,_r),t(b,vr),i(e,ws,n),u(We,e,n),i(e,bs,n),i(e,fe,n),t(fe,$r),t(fe,ja),t(ja,jr),t(fe,wr),i(e,Es,n),i(e,Xe,n),t(Xe,wa),t(wa,br),t(Xe,Er),i(e,ys,n),i(e,ce,n),t(ce,ba),t(ba,Ea),t(Ea,jt),t(jt,yr),t(ba,qr),t(ce,kr),t(ce,ya),t(ya,qa),t(qa,wt),t(wt,xr),t(ya,Ir),i(e,qs,n),i(e,he,n),t(he,Dr),t(he,ka),t(ka,Pr),t(he,Ar),i(e,ks,n),i(e,G,n),t(G,de),t(de,bt),u(Ze,bt,null),t(G,Cr),t(G,Et),t(Et,Fr),i(e,xs,n),i(e,ue,n),t(ue,Tr),t(ue,ea),t(ea,Or),t(ue,Lr),i(e,Is,n),u(ge,e,n),i(e,Ds,n),i(e,_e,n),t(_e,Nr),t(_e,aa),t(aa,yt),t(yt,Br),t(_e,zr),i(e,Ps,n),u(ta,e,n),i(e,As,n),i(e,ve,n),t(ve,Sr),t(ve,qt),t(qt,Jr),t(ve,Rr),i(e,Cs,n),u(sa,e,n),i(e,Fs,n),i(e,$e,n),t($e,Hr),t($e,xa),t(xa,Gr),t($e,Ur),i(e,Ts,n),u(la,e,n),i(e,Os,n),i(e,je,n),t(je,Yr),t(je,kt),t(kt,Mr),t(je,Kr),i(e,Ls,n),u(oa,e,n),i(e,Ns,n),i(e,Ia,n),t(Ia,Da),Bs=!0},p(e,[n]){const ra={};n&2&&(ra.$$scope={dirty:n,ctx:e}),ge.$set(ra)},i(e){Bs||(g(E.$$.fragment,e),g(ke.$$.fragment,e),g(xe.$$.fragment,e),g(Ie.$$.fragment,e),g(Ae.$$.fragment,e),g(Ce.$$.fragment,e),g(Fe.$$.fragment,e),g(Te.$$.fragment,e),g(Oe.$$.fragment,e),g(Le.$$.fragment,e),g(Ne.$$.fragment,e),g(Be.$$.fragment,e),g(ze.$$.fragment,e),g(Se.$$.fragment,e),g(Je.$$.fragment,e),g(Re.$$.fragment,e),g(He.$$.fragment,e),g(Ge.$$.fragment,e),g(Ue.$$.fragment,e),g(Ye.$$.fragment,e),g(Me.$$.fragment,e),g(Ve.$$.fragment,e),g(We.$$.fragment,e),g(Ze.$$.fragment,e),g(ge.$$.fragment,e),g(ta.$$.fragment,e),g(sa.$$.fragment,e),g(la.$$.fragment,e),g(oa.$$.fragment,e),Bs=!0)},o(e){_(E.$$.fragment,e),_(ke.$$.fragment,e),_(xe.$$.fragment,e),_(Ie.$$.fragment,e),_(Ae.$$.fragment,e),_(Ce.$$.fragment,e),_(Fe.$$.fragment,e),_(Te.$$.fragment,e),_(Oe.$$.fragment,e),_(Le.$$.fragment,e),_(Ne.$$.fragment,e),_(Be.$$.fragment,e),_(ze.$$.fragment,e),_(Se.$$.fragment,e),_(Je.$$.fragment,e),_(Re.$$.fragment,e),_(He.$$.fragment,e),_(Ge.$$.fragment,e),_(Ue.$$.fragment,e),_(Ye.$$.fragment,e),_(Me.$$.fragment,e),_(Ve.$$.fragment,e),_(We.$$.fragment,e),_(Ze.$$.fragment,e),_(ge.$$.fragment,e),_(ta.$$.fragment,e),_(sa.$$.fragment,e),_(la.$$.fragment,e),_(oa.$$.fragment,e),Bs=!1},d(e){a(j),e&&a(Y),e&&a(w),v(E),e&&a(At),e&&a(K),e&&a(Ct),e&&a(q),e&&a(Ft),e&&a(T),v(ke),e&&a(Tt),e&&a(I),e&&a(Ot),v(xe,e),e&&a(Lt),e&&a(O),v(Ie),e&&a(Nt),e&&a(ca),e&&a(Bt),e&&a(W),e&&a(zt),e&&a(X),e&&a(St),v(Ae,e),e&&a(Jt),e&&a(k),e&&a(Rt),v(Ce,e),e&&a(Ht),e&&a(da),e&&a(Gt),e&&a(D),e&&a(Ut),v(Fe,e),e&&a(Yt),e&&a(P),e&&a(Mt),v(Te,e),e&&a(Kt),e&&a(L),v(Oe),e&&a(Qt),e&&a(ee),e&&a(Vt),v(Le,e),e&&a(Wt),e&&a(A),e&&a(Xt),v(Ne,e),e&&a(Zt),e&&a(ae),e&&a(es),v(Be,e),e&&a(as),e&&a(N),e&&a(ts),e&&a(B),v(ze),e&&a(ss),e&&a(se),e&&a(ls),v(Se,e),e&&a(os),e&&a(le),e&&a(rs),e&&a(z),v(Je),e&&a(ns),e&&a(re),e&&a(ps),v(Re,e),e&&a(is),e&&a(S),e&&a(ms),v(He,e),e&&a(fs),e&&a(J),v(Ge),e&&a(cs),e&&a(pe),e&&a(hs),v(Ue,e),e&&a(ds),e&&a(R),e&&a(us),v(Ye,e),e&&a(gs),e&&a(H),v(Me),e&&a(_s),e&&a(Ke),e&&a(vs),e&&a(me),e&&a($s),v(Ve,e),e&&a(js),e&&a(b),e&&a(ws),v(We,e),e&&a(bs),e&&a(fe),e&&a(Es),e&&a(Xe),e&&a(ys),e&&a(ce),e&&a(qs),e&&a(he),e&&a(ks),e&&a(G),v(Ze),e&&a(xs),e&&a(ue),e&&a(Is),v(ge,e),e&&a(Ds),e&&a(_e),e&&a(Ps),v(ta,e),e&&a(As),e&&a(ve),e&&a(Cs),v(sa,e),e&&a(Fs),e&&a($e),e&&a(Ts),v(la,e),e&&a(Os),e&&a(je),e&&a(Ls),v(oa,e),e&&a(Ns),e&&a(Ia)}}}const Bp={local:"process-image-data",sections:[{local:"installation",title:"Installation"},{local:"image-datasets",title:"Image datasets"},{local:"imagefolder",title:"ImageFolder"},{local:"imagefolder-with-metadata",sections:[{local:"image-captioning",title:"Image captioning"},{local:"object-detection",title:"Object detection"}],title:"ImageFolder with metadata"},{local:"map",title:"Map"},{local:"data-augmentation",title:"Data augmentation"}],title:"Process image data"};function zp(Pt){return Tp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Gp extends Pp{constructor(j){super();Ap(this,j,zp,Np,Cp,{})}}export{Gp as default,Bp as metadata};
