import{S as Zf,i as ep,s as tp,e as r,k as f,w as u,t as o,M as sp,c as a,d as t,m as p,a as n,x as d,h as g,b,F as s,g as l,y as h,q as v,o as m,B as c,v as rp}from"../../chunks/vendor-8138ceec.js";import{T as ap}from"../../chunks/Tip-12722dfc.js";import{D as j}from"../../chunks/Docstring-1fc0f9df.js";import{C as M}from"../../chunks/CodeBlock-fc89709f.js";import{I as H}from"../../chunks/IconCopyLink-2dd3a6ac.js";function np(Hr){let y,me,w,_,N,P,Xe,Y,J,ce,D,K,B,Ze,et,L,x,tt,Q,X,st,_e,R,W,$,rt,G,Z,at;return{c(){y=r("p"),me=o("HuggingFace datasets library has following logging levels:"),w=f(),_=r("ul"),N=r("li"),P=r("em"),Xe=o("datasets.logging.CRITICAL"),Y=o(", "),J=r("em"),ce=o("datasets.logging.FATAL"),D=f(),K=r("li"),B=r("em"),Ze=o("datasets.logging.ERROR"),et=f(),L=r("li"),x=r("em"),tt=o("datasets.logging.WARNING"),Q=o(", "),X=r("em"),st=o("datasets.logging.WARN"),_e=f(),R=r("li"),W=r("em"),$=o("datasets.logging.INFO"),rt=f(),G=r("li"),Z=r("em"),at=o("datasets.logging.DEBUG")},l(E){y=a(E,"P",{});var q=n(y);me=g(q,"HuggingFace datasets library has following logging levels:"),q.forEach(t),w=p(E),_=a(E,"UL",{});var I=n(_);N=a(I,"LI",{});var U=n(N);P=a(U,"EM",{});var kt=n(P);Xe=g(kt,"datasets.logging.CRITICAL"),kt.forEach(t),Y=g(U,", "),J=a(U,"EM",{});var jt=n(J);ce=g(jt,"datasets.logging.FATAL"),jt.forEach(t),U.forEach(t),D=p(I),K=a(I,"LI",{});var $e=n(K);B=a($e,"EM",{});var Bt=n(B);Ze=g(Bt,"datasets.logging.ERROR"),Bt.forEach(t),$e.forEach(t),et=p(I),L=a(I,"LI",{});var Ee=n(L);x=a(Ee,"EM",{});var ye=n(x);tt=g(ye,"datasets.logging.WARNING"),ye.forEach(t),Q=g(Ee,", "),X=a(Ee,"EM",{});var Gt=n(X);st=g(Gt,"datasets.logging.WARN"),Gt.forEach(t),Ee.forEach(t),_e=p(I),R=a(I,"LI",{});var Vt=n(R);W=a(Vt,"EM",{});var we=n(W);$=g(we,"datasets.logging.INFO"),we.forEach(t),Vt.forEach(t),rt=p(I),G=a(I,"LI",{});var Ht=n(G);Z=a(Ht,"EM",{});var Wt=n(Z);at=g(Wt,"datasets.logging.DEBUG"),Wt.forEach(t),Ht.forEach(t),I.forEach(t)},m(E,q){l(E,y,q),s(y,me),l(E,w,q),l(E,_,q),s(_,N),s(N,P),s(P,Xe),s(N,Y),s(N,J),s(J,ce),s(_,D),s(_,K),s(K,B),s(B,Ze),s(_,et),s(_,L),s(L,x),s(x,tt),s(L,Q),s(L,X),s(X,st),s(_,_e),s(_,R),s(R,W),s(W,$),s(_,rt),s(_,G),s(G,Z),s(Z,at)},d(E){E&&t(y),E&&t(w),E&&t(_)}}}function ip(Hr){let y,me,w,_,N,P,Xe,Y,J,ce,D,K,B,Ze,et,L,x,tt,Q,X,st,_e,R,W,$,rt,G,Z,at,E,q,I,U,kt,jt,$e,Bt,Ee,ye,Gt,Vt,we,Ht,Wt,Wr,nt,qr,qt,Hn,Ur,xe,Ut,zt,Wn,qn,Un,Mt,Yt,zn,Mn,zr,Ie,Yn,ks,Jn,Kn,Mr,A,Ae,js,Qn,Xn,Bs,Zn,ei,ti,Jt,Gs,si,ri,ai,Te,Vs,ni,ii,Hs,li,oi,gi,Kt,Ws,fi,pi,bi,Qt,qs,ui,di,Yr,k,hi,Us,vi,mi,Xt,ci,_i,Zt,$i,Ei,Jr,ee,Ne,zs,it,yi,Ms,wi,Kr,V,lt,xi,Ys,Ii,Ai,Pe,Qr,te,ot,Ti,Js,Ni,Xr,O,gt,Pi,Ks,Ri,Oi,Qs,Si,Fi,es,Ci,Xs,Di,Zr,S,ft,Li,Zs,ki,ji,er,Bi,Gi,ts,Vi,tr,Hi,ea,F,pt,Wi,sr,qi,Ui,rr,zi,Mi,ss,Yi,ar,Ji,ta,C,bt,Ki,nr,Qi,Xi,ir,Zi,el,rs,tl,lr,sl,sa,se,ut,rl,or,al,ra,re,dt,nl,gr,il,aa,ae,ht,ll,fr,ol,na,ne,vt,gl,pr,fl,ia,ie,mt,pl,br,bl,la,le,ct,ul,ur,dl,oa,oe,Re,dr,_t,hl,hr,vl,ga,ge,Oe,vr,$t,ml,mr,cl,fa,as,_l,pa,ns,$l,ba,is,El,ua,Se,yl,cr,wl,xl,da,ls,Il,ha,Et,va,fe,Fe,_r,yt,Al,$r,Tl,ma,os,Nl,ca,gs,Pl,_a,fs,Rl,$a,Ce,Ol,Er,Sl,Fl,Ea,ps,Cl,ya,wt,wa,pe,De,yr,xt,Dl,wr,Ll,xa,bs,kl,Ia,us,jl,Aa,ds,Bl,Ta,Le,Gl,xr,Vl,Hl,Na,hs,Wl,Pa,It,Ra,be,ke,Ir,At,ql,Ar,Ul,Oa,vs,zl,Sa,ms,Ml,Fa,cs,Yl,Ca,je,Jl,Tr,Kl,Ql,Da,_s,Xl,La,Tt,ka,ue,Be,Nr,Nt,Zl,Pr,eo,ja,$s,to,Ba,Es,so,Ga,ys,ro,Va,Ge,ao,Rr,no,io,Ha,ws,lo,Wa,Pt,qa,de,Ve,Or,Rt,oo,Sr,go,Ua,xs,fo,za,Is,po,Ma,As,bo,Ya,He,uo,Fr,ho,vo,Ja,Ts,mo,Ka,Ot,Qa,he,We,Cr,St,co,Dr,_o,Xa,Ns,$o,Za,Ps,Eo,en,Rs,yo,tn,qe,wo,Lr,xo,Io,sn,Os,Ao,rn,Ft,an,ve,Ue,kr,Ct,To,jr,No,nn,Ss,Po,ln,Fs,Ro,on,Cs,Oo,gn,ze,So,Br,Fo,Co,fn,Ds,Do,pn,Dt,bn;return P=new H({}),R=new M({props:{code:`import datasets
datasets.logging.set_verbosity_info()`,highlighted:`<span class="hljs-keyword">import</span> datasets
datasets.logging.set_verbosity_info()`}}),nt=new M({props:{code:"DATASETS_VERBOSITY=error ./myprogram.py",highlighted:"DATASETS_VERBOSITY=error ./myprogram.py"}}),it=new H({}),lt=new j({props:{name:"datasets.utils.logging.get_verbosity",anchor:"datasets.utils.logging.get_verbosity",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L87",returnDescription:`
<p>Logging level, e.g., <code>datasets.logging.DEBUG</code> and <code>datasets.logging.INFO</code>.</p>
`}}),Pe=new ap({props:{$$slots:{default:[np]},$$scope:{ctx:Hr}}}),ot=new j({props:{name:"datasets.utils.logging.set_verbosity",anchor:"datasets.utils.logging.set_verbosity",parameters:[{name:"verbosity",val:": int"}],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L106"}}),gt=new j({props:{name:"datasets.utils.logging.set_verbosity_info",anchor:"datasets.utils.logging.set_verbosity_info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L115"}}),ft=new j({props:{name:"datasets.utils.logging.set_verbosity_warning",anchor:"datasets.utils.logging.set_verbosity_warning",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L125"}}),pt=new j({props:{name:"datasets.utils.logging.set_verbosity_debug",anchor:"datasets.utils.logging.set_verbosity_debug",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L135"}}),bt=new j({props:{name:"datasets.utils.logging.set_verbosity_error",anchor:"datasets.utils.logging.set_verbosity_error",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L145"}}),ut=new j({props:{name:"datasets.utils.logging.disable_propagation",anchor:"datasets.utils.logging.disable_propagation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L155"}}),dt=new j({props:{name:"datasets.utils.logging.enable_propagation",anchor:"datasets.utils.logging.enable_propagation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L162"}}),ht=new j({props:{name:"datasets.utils.logging.get_logger",anchor:"datasets.utils.logging.get_logger",parameters:[{name:"name",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L78"}}),vt=new j({props:{name:"datasets.enable_progress_bar",anchor:"datasets.enable_progress_bar",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L227"}}),mt=new j({props:{name:"datasets.disable_progress_bar",anchor:"datasets.disable_progress_bar",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L233"}}),ct=new j({props:{name:"datasets.is_progress_bar_enabled",anchor:"datasets.is_progress_bar_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_4128/src/datasets/utils/logging.py#L221"}}),_t=new H({}),$t=new H({}),Et=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),yt=new H({}),wt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),xt=new H({}),It=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),At=new H({}),Tt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Nt=new H({}),Pt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Rt=new H({}),Ot=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),St=new H({}),Ft=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),Ct=new H({}),Dt=new M({props:{code:"int('0b100', base=0)",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0b100&#x27;</span>, base=<span class="hljs-number">0</span>)
<span class="hljs-number">4</span>`}}),{c(){y=r("meta"),me=f(),w=r("h1"),_=r("a"),N=r("span"),u(P.$$.fragment),Xe=f(),Y=r("span"),J=o("Logging methods"),ce=f(),D=r("p"),K=o("\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),B=r("code"),Ze=o("WARNING"),et=o("."),L=f(),x=r("p"),tt=o("To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=r("code"),X=o("INFO"),st=o(" level:"),_e=f(),u(R.$$.fragment),W=f(),$=r("p"),rt=o("You can also use the environment variable "),G=r("code"),Z=o("DATASETS_VERBOSITY"),at=o(" to override the default verbosity, and set it to one of the following: "),E=r("code"),q=o("debug"),I=o(", "),U=r("code"),kt=o("info"),jt=o(", "),$e=r("code"),Bt=o("warning"),Ee=o(", "),ye=r("code"),Gt=o("error"),Vt=o(", "),we=r("code"),Ht=o("critical"),Wt=o(":"),Wr=f(),u(nt.$$.fragment),qr=f(),qt=r("p"),Hn=o("All the methods of this logging module are documented below. The main ones are:"),Ur=f(),xe=r("ul"),Ut=r("li"),zt=r("a"),Wn=o("logging.get_verbosity()"),qn=o(" to get the current level of verbosity in the logger"),Un=f(),Mt=r("li"),Yt=r("a"),zn=o("logging.set_verbosity()"),Mn=o(" to set the verbosity to the level of your choice"),zr=f(),Ie=r("p"),Yn=o("In order from the least to the most verbose (with their corresponding "),ks=r("code"),Jn=o("int"),Kn=o(" values):"),Mr=f(),A=r("ol"),Ae=r("li"),js=r("code"),Qn=o("logging.CRITICAL"),Xn=o(" or "),Bs=r("code"),Zn=o("logging.FATAL"),ei=o(" (int value, 50): only report the most critical errors."),ti=f(),Jt=r("li"),Gs=r("code"),si=o("logging.ERROR"),ri=o(" (int value, 40): only report errors."),ai=f(),Te=r("li"),Vs=r("code"),ni=o("logging.WARNING"),ii=o(" or "),Hs=r("code"),li=o("logging.WARN"),oi=o(" (int value, 30): only reports error and warnings. This the default level used by the library."),gi=f(),Kt=r("li"),Ws=r("code"),fi=o("logging.INFO"),pi=o(" (int value, 20): reports error, warnings and basic information."),bi=f(),Qt=r("li"),qs=r("code"),ui=o("logging.DEBUG"),di=o(" (int value, 10): report all information."),Yr=f(),k=r("p"),hi=o("By default, "),Us=r("code"),vi=o("tqdm"),mi=o(" progress bars will be displayed during dataset download and preprocessing. "),Xt=r("a"),ci=o("logging.disable_progress_bar()"),_i=o(" and "),Zt=r("a"),$i=o("logging.enable_progress_bar()"),Ei=o(" can be used to suppress or unsuppress this behavior."),Jr=f(),ee=r("h2"),Ne=r("a"),zs=r("span"),u(it.$$.fragment),yi=f(),Ms=r("span"),wi=o("Functions"),Kr=f(),V=r("div"),u(lt.$$.fragment),xi=f(),Ys=r("p"),Ii=o("Return the current level for the HuggingFace datasets library\u2019s root logger."),Ai=f(),u(Pe.$$.fragment),Qr=f(),te=r("div"),u(ot.$$.fragment),Ti=f(),Js=r("p"),Ni=o("Set the level for the HuggingFace datasets library\u2019s root logger."),Xr=f(),O=r("div"),u(gt.$$.fragment),Pi=f(),Ks=r("p"),Ri=o("Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),Oi=f(),Qs=r("p"),Si=o("This will display most of the logging information and tqdm bars."),Fi=f(),es=r("p"),Ci=o("Shortcut to "),Xs=r("code"),Di=o("datasets.logging.set_verbosity(datasets.logging.INFO)"),Zr=f(),S=r("div"),u(ft.$$.fragment),Li=f(),Zs=r("p"),ki=o("Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),ji=f(),er=r("p"),Bi=o("This will display only the warning and errors logging information and tqdm bars."),Gi=f(),ts=r("p"),Vi=o("Shortcut to "),tr=r("code"),Hi=o("datasets.logging.set_verbosity(datasets.logging.WARNING)"),ea=f(),F=r("div"),u(pt.$$.fragment),Wi=f(),sr=r("p"),qi=o("Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),Ui=f(),rr=r("p"),zi=o("This will display all the logging information and tqdm bars."),Mi=f(),ss=r("p"),Yi=o("Shortcut to "),ar=r("code"),Ji=o("datasets.logging.set_verbosity(datasets.logging.DEBUG)"),ta=f(),C=r("div"),u(bt.$$.fragment),Ki=f(),nr=r("p"),Qi=o("Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),Xi=f(),ir=r("p"),Zi=o("This will display only the errors logging information and tqdm bars."),el=f(),rs=r("p"),tl=o("Shortcut to "),lr=r("code"),sl=o("datasets.logging.set_verbosity(datasets.logging.ERROR)"),sa=f(),se=r("div"),u(ut.$$.fragment),rl=f(),or=r("p"),al=o(`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),ra=f(),re=r("div"),u(dt.$$.fragment),nl=f(),gr=r("p"),il=o(`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),aa=f(),ae=r("div"),u(ht.$$.fragment),ll=f(),fr=r("p"),ol=o(`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),na=f(),ne=r("div"),u(vt.$$.fragment),gl=f(),pr=r("p"),fl=o("Enable tqdm progress bar."),ia=f(),ie=r("div"),u(mt.$$.fragment),pl=f(),br=r("p"),bl=o("Enable tqdm progress bar."),la=f(),le=r("div"),u(ct.$$.fragment),ul=f(),ur=r("p"),dl=o("Return a boolean indicating whether tqdm progress bars are enabled."),oa=f(),oe=r("h2"),Re=r("a"),dr=r("span"),u(_t.$$.fragment),hl=f(),hr=r("span"),vl=o("Levels"),ga=f(),ge=r("h3"),Oe=r("a"),vr=r("span"),u($t.$$.fragment),ml=f(),mr=r("span"),cl=o("datasets.logging.CRITICAL"),fa=f(),as=r("p"),_l=o("datasets.logging.CRITICAL = 50"),pa=f(),ns=r("p"),$l=o("int([x]) -> integer"),ba=f(),is=r("p"),El=o("int(x, base=10) -> integer"),ua=f(),Se=r("p"),yl=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),cr=r("strong"),wl=o("int"),xl=o(`().  For floating point
numbers, this truncates towards zero.`),da=f(),ls=r("p"),Il=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),ha=f(),u(Et.$$.fragment),va=f(),fe=r("h3"),Fe=r("a"),_r=r("span"),u(yt.$$.fragment),Al=f(),$r=r("span"),Tl=o("datasets.logging.DEBUG"),ma=f(),os=r("p"),Nl=o("datasets.logging.DEBUG = 10"),ca=f(),gs=r("p"),Pl=o("int([x]) -> integer"),_a=f(),fs=r("p"),Rl=o("int(x, base=10) -> integer"),$a=f(),Ce=r("p"),Ol=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Er=r("strong"),Sl=o("int"),Fl=o(`().  For floating point
numbers, this truncates towards zero.`),Ea=f(),ps=r("p"),Cl=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),ya=f(),u(wt.$$.fragment),wa=f(),pe=r("h3"),De=r("a"),yr=r("span"),u(xt.$$.fragment),Dl=f(),wr=r("span"),Ll=o("datasets.logging.ERROR"),xa=f(),bs=r("p"),kl=o("datasets.logging.ERROR = 40"),Ia=f(),us=r("p"),jl=o("int([x]) -> integer"),Aa=f(),ds=r("p"),Bl=o("int(x, base=10) -> integer"),Ta=f(),Le=r("p"),Gl=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xr=r("strong"),Vl=o("int"),Hl=o(`().  For floating point
numbers, this truncates towards zero.`),Na=f(),hs=r("p"),Wl=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Pa=f(),u(It.$$.fragment),Ra=f(),be=r("h3"),ke=r("a"),Ir=r("span"),u(At.$$.fragment),ql=f(),Ar=r("span"),Ul=o("datasets.logging.FATAL"),Oa=f(),vs=r("p"),zl=o("datasets.logging.FATAL = 50"),Sa=f(),ms=r("p"),Ml=o("int([x]) -> integer"),Fa=f(),cs=r("p"),Yl=o("int(x, base=10) -> integer"),Ca=f(),je=r("p"),Jl=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Tr=r("strong"),Kl=o("int"),Ql=o(`().  For floating point
numbers, this truncates towards zero.`),Da=f(),_s=r("p"),Xl=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),La=f(),u(Tt.$$.fragment),ka=f(),ue=r("h3"),Be=r("a"),Nr=r("span"),u(Nt.$$.fragment),Zl=f(),Pr=r("span"),eo=o("datasets.logging.INFO"),ja=f(),$s=r("p"),to=o("datasets.logging.INFO = 20"),Ba=f(),Es=r("p"),so=o("int([x]) -> integer"),Ga=f(),ys=r("p"),ro=o("int(x, base=10) -> integer"),Va=f(),Ge=r("p"),ao=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Rr=r("strong"),no=o("int"),io=o(`().  For floating point
numbers, this truncates towards zero.`),Ha=f(),ws=r("p"),lo=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Wa=f(),u(Pt.$$.fragment),qa=f(),de=r("h3"),Ve=r("a"),Or=r("span"),u(Rt.$$.fragment),oo=f(),Sr=r("span"),go=o("datasets.logging.NOTSET"),Ua=f(),xs=r("p"),fo=o("datasets.logging.NOTSET = 0"),za=f(),Is=r("p"),po=o("int([x]) -> integer"),Ma=f(),As=r("p"),bo=o("int(x, base=10) -> integer"),Ya=f(),He=r("p"),uo=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fr=r("strong"),ho=o("int"),vo=o(`().  For floating point
numbers, this truncates towards zero.`),Ja=f(),Ts=r("p"),mo=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Ka=f(),u(Ot.$$.fragment),Qa=f(),he=r("h3"),We=r("a"),Cr=r("span"),u(St.$$.fragment),co=f(),Dr=r("span"),_o=o("datasets.logging.WARN"),Xa=f(),Ns=r("p"),$o=o("datasets.logging.WARN = 30"),Za=f(),Ps=r("p"),Eo=o("int([x]) -> integer"),en=f(),Rs=r("p"),yo=o("int(x, base=10) -> integer"),tn=f(),qe=r("p"),wo=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Lr=r("strong"),xo=o("int"),Io=o(`().  For floating point
numbers, this truncates towards zero.`),sn=f(),Os=r("p"),Ao=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),rn=f(),u(Ft.$$.fragment),an=f(),ve=r("h3"),Ue=r("a"),kr=r("span"),u(Ct.$$.fragment),To=f(),jr=r("span"),No=o("datasets.logging.WARNING"),nn=f(),Ss=r("p"),Po=o("datasets.logging.WARNING = 30"),ln=f(),Fs=r("p"),Ro=o("int([x]) -> integer"),on=f(),Cs=r("p"),Oo=o("int(x, base=10) -> integer"),gn=f(),ze=r("p"),So=o(`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Br=r("strong"),Fo=o("int"),Co=o(`().  For floating point
numbers, this truncates towards zero.`),fn=f(),Ds=r("p"),Do=o(`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),pn=f(),u(Dt.$$.fragment),this.h()},l(e){const i=sp('[data-svelte="svelte-1phssyn"]',document.head);y=a(i,"META",{name:!0,content:!0}),i.forEach(t),me=p(e),w=a(e,"H1",{class:!0});var Lt=n(w);_=a(Lt,"A",{id:!0,class:!0,href:!0});var Uo=n(_);N=a(Uo,"SPAN",{});var zo=n(N);d(P.$$.fragment,zo),zo.forEach(t),Uo.forEach(t),Xe=p(Lt),Y=a(Lt,"SPAN",{});var Mo=n(Y);J=g(Mo,"Logging methods"),Mo.forEach(t),Lt.forEach(t),ce=p(e),D=a(e,"P",{});var un=n(D);K=g(un,"\u{1F917} Datasets strives to be transparent and explicit about how it works, but this can be quite verbose at times. We have included a series of logging methods which allow you to easily adjust the level of verbosity of the entire library. Currently the default verbosity of the library is set to "),B=a(un,"CODE",{});var Yo=n(B);Ze=g(Yo,"WARNING"),Yo.forEach(t),et=g(un,"."),un.forEach(t),L=p(e),x=a(e,"P",{});var dn=n(x);tt=g(dn,"To change the level of verbosity, use one of the direct setters. For instance, here is how to change the verbosity to the "),Q=a(dn,"CODE",{});var Jo=n(Q);X=g(Jo,"INFO"),Jo.forEach(t),st=g(dn," level:"),dn.forEach(t),_e=p(e),d(R.$$.fragment,e),W=p(e),$=a(e,"P",{});var T=n($);rt=g(T,"You can also use the environment variable "),G=a(T,"CODE",{});var Ko=n(G);Z=g(Ko,"DATASETS_VERBOSITY"),Ko.forEach(t),at=g(T," to override the default verbosity, and set it to one of the following: "),E=a(T,"CODE",{});var Qo=n(E);q=g(Qo,"debug"),Qo.forEach(t),I=g(T,", "),U=a(T,"CODE",{});var Xo=n(U);kt=g(Xo,"info"),Xo.forEach(t),jt=g(T,", "),$e=a(T,"CODE",{});var Zo=n($e);Bt=g(Zo,"warning"),Zo.forEach(t),Ee=g(T,", "),ye=a(T,"CODE",{});var eg=n(ye);Gt=g(eg,"error"),eg.forEach(t),Vt=g(T,", "),we=a(T,"CODE",{});var tg=n(we);Ht=g(tg,"critical"),tg.forEach(t),Wt=g(T,":"),T.forEach(t),Wr=p(e),d(nt.$$.fragment,e),qr=p(e),qt=a(e,"P",{});var sg=n(qt);Hn=g(sg,"All the methods of this logging module are documented below. The main ones are:"),sg.forEach(t),Ur=p(e),xe=a(e,"UL",{});var hn=n(xe);Ut=a(hn,"LI",{});var Lo=n(Ut);zt=a(Lo,"A",{href:!0});var rg=n(zt);Wn=g(rg,"logging.get_verbosity()"),rg.forEach(t),qn=g(Lo," to get the current level of verbosity in the logger"),Lo.forEach(t),Un=p(hn),Mt=a(hn,"LI",{});var ko=n(Mt);Yt=a(ko,"A",{href:!0});var ag=n(Yt);zn=g(ag,"logging.set_verbosity()"),ag.forEach(t),Mn=g(ko," to set the verbosity to the level of your choice"),ko.forEach(t),hn.forEach(t),zr=p(e),Ie=a(e,"P",{});var vn=n(Ie);Yn=g(vn,"In order from the least to the most verbose (with their corresponding "),ks=a(vn,"CODE",{});var ng=n(ks);Jn=g(ng,"int"),ng.forEach(t),Kn=g(vn," values):"),vn.forEach(t),Mr=p(e),A=a(e,"OL",{});var z=n(A);Ae=a(z,"LI",{});var Gr=n(Ae);js=a(Gr,"CODE",{});var ig=n(js);Qn=g(ig,"logging.CRITICAL"),ig.forEach(t),Xn=g(Gr," or "),Bs=a(Gr,"CODE",{});var lg=n(Bs);Zn=g(lg,"logging.FATAL"),lg.forEach(t),ei=g(Gr," (int value, 50): only report the most critical errors."),Gr.forEach(t),ti=p(z),Jt=a(z,"LI",{});var jo=n(Jt);Gs=a(jo,"CODE",{});var og=n(Gs);si=g(og,"logging.ERROR"),og.forEach(t),ri=g(jo," (int value, 40): only report errors."),jo.forEach(t),ai=p(z),Te=a(z,"LI",{});var Vr=n(Te);Vs=a(Vr,"CODE",{});var gg=n(Vs);ni=g(gg,"logging.WARNING"),gg.forEach(t),ii=g(Vr," or "),Hs=a(Vr,"CODE",{});var fg=n(Hs);li=g(fg,"logging.WARN"),fg.forEach(t),oi=g(Vr," (int value, 30): only reports error and warnings. This the default level used by the library."),Vr.forEach(t),gi=p(z),Kt=a(z,"LI",{});var Bo=n(Kt);Ws=a(Bo,"CODE",{});var pg=n(Ws);fi=g(pg,"logging.INFO"),pg.forEach(t),pi=g(Bo," (int value, 20): reports error, warnings and basic information."),Bo.forEach(t),bi=p(z),Qt=a(z,"LI",{});var Go=n(Qt);qs=a(Go,"CODE",{});var bg=n(qs);ui=g(bg,"logging.DEBUG"),bg.forEach(t),di=g(Go," (int value, 10): report all information."),Go.forEach(t),z.forEach(t),Yr=p(e),k=a(e,"P",{});var Me=n(k);hi=g(Me,"By default, "),Us=a(Me,"CODE",{});var ug=n(Us);vi=g(ug,"tqdm"),ug.forEach(t),mi=g(Me," progress bars will be displayed during dataset download and preprocessing. "),Xt=a(Me,"A",{href:!0});var dg=n(Xt);ci=g(dg,"logging.disable_progress_bar()"),dg.forEach(t),_i=g(Me," and "),Zt=a(Me,"A",{href:!0});var hg=n(Zt);$i=g(hg,"logging.enable_progress_bar()"),hg.forEach(t),Ei=g(Me," can be used to suppress or unsuppress this behavior."),Me.forEach(t),Jr=p(e),ee=a(e,"H2",{class:!0});var mn=n(ee);Ne=a(mn,"A",{id:!0,class:!0,href:!0});var vg=n(Ne);zs=a(vg,"SPAN",{});var mg=n(zs);d(it.$$.fragment,mg),mg.forEach(t),vg.forEach(t),yi=p(mn),Ms=a(mn,"SPAN",{});var cg=n(Ms);wi=g(cg,"Functions"),cg.forEach(t),mn.forEach(t),Kr=p(e),V=a(e,"DIV",{class:!0});var Ls=n(V);d(lt.$$.fragment,Ls),xi=p(Ls),Ys=a(Ls,"P",{});var _g=n(Ys);Ii=g(_g,"Return the current level for the HuggingFace datasets library\u2019s root logger."),_g.forEach(t),Ai=p(Ls),d(Pe.$$.fragment,Ls),Ls.forEach(t),Qr=p(e),te=a(e,"DIV",{class:!0});var cn=n(te);d(ot.$$.fragment,cn),Ti=p(cn),Js=a(cn,"P",{});var $g=n(Js);Ni=g($g,"Set the level for the HuggingFace datasets library\u2019s root logger."),$g.forEach(t),cn.forEach(t),Xr=p(e),O=a(e,"DIV",{class:!0});var Ye=n(O);d(gt.$$.fragment,Ye),Pi=p(Ye),Ks=a(Ye,"P",{});var Eg=n(Ks);Ri=g(Eg,"Set the level for the HuggingFace datasets library\u2019s root logger to INFO."),Eg.forEach(t),Oi=p(Ye),Qs=a(Ye,"P",{});var yg=n(Qs);Si=g(yg,"This will display most of the logging information and tqdm bars."),yg.forEach(t),Fi=p(Ye),es=a(Ye,"P",{});var Vo=n(es);Ci=g(Vo,"Shortcut to "),Xs=a(Vo,"CODE",{});var wg=n(Xs);Di=g(wg,"datasets.logging.set_verbosity(datasets.logging.INFO)"),wg.forEach(t),Vo.forEach(t),Ye.forEach(t),Zr=p(e),S=a(e,"DIV",{class:!0});var Je=n(S);d(ft.$$.fragment,Je),Li=p(Je),Zs=a(Je,"P",{});var xg=n(Zs);ki=g(xg,"Set the level for the HuggingFace datasets library\u2019s root logger to WARNING."),xg.forEach(t),ji=p(Je),er=a(Je,"P",{});var Ig=n(er);Bi=g(Ig,"This will display only the warning and errors logging information and tqdm bars."),Ig.forEach(t),Gi=p(Je),ts=a(Je,"P",{});var Ho=n(ts);Vi=g(Ho,"Shortcut to "),tr=a(Ho,"CODE",{});var Ag=n(tr);Hi=g(Ag,"datasets.logging.set_verbosity(datasets.logging.WARNING)"),Ag.forEach(t),Ho.forEach(t),Je.forEach(t),ea=p(e),F=a(e,"DIV",{class:!0});var Ke=n(F);d(pt.$$.fragment,Ke),Wi=p(Ke),sr=a(Ke,"P",{});var Tg=n(sr);qi=g(Tg,"Set the level for the HuggingFace datasets library\u2019s root logger to DEBUG."),Tg.forEach(t),Ui=p(Ke),rr=a(Ke,"P",{});var Ng=n(rr);zi=g(Ng,"This will display all the logging information and tqdm bars."),Ng.forEach(t),Mi=p(Ke),ss=a(Ke,"P",{});var Wo=n(ss);Yi=g(Wo,"Shortcut to "),ar=a(Wo,"CODE",{});var Pg=n(ar);Ji=g(Pg,"datasets.logging.set_verbosity(datasets.logging.DEBUG)"),Pg.forEach(t),Wo.forEach(t),Ke.forEach(t),ta=p(e),C=a(e,"DIV",{class:!0});var Qe=n(C);d(bt.$$.fragment,Qe),Ki=p(Qe),nr=a(Qe,"P",{});var Rg=n(nr);Qi=g(Rg,"Set the level for the HuggingFace datasets library\u2019s root logger to ERROR."),Rg.forEach(t),Xi=p(Qe),ir=a(Qe,"P",{});var Og=n(ir);Zi=g(Og,"This will display only the errors logging information and tqdm bars."),Og.forEach(t),el=p(Qe),rs=a(Qe,"P",{});var qo=n(rs);tl=g(qo,"Shortcut to "),lr=a(qo,"CODE",{});var Sg=n(lr);sl=g(Sg,"datasets.logging.set_verbosity(datasets.logging.ERROR)"),Sg.forEach(t),qo.forEach(t),Qe.forEach(t),sa=p(e),se=a(e,"DIV",{class:!0});var _n=n(se);d(ut.$$.fragment,_n),rl=p(_n),or=a(_n,"P",{});var Fg=n(or);al=g(Fg,`Disable propagation of the library log outputs.
Note that log propagation is disabled by default.`),Fg.forEach(t),_n.forEach(t),ra=p(e),re=a(e,"DIV",{class:!0});var $n=n(re);d(dt.$$.fragment,$n),nl=p($n),gr=a($n,"P",{});var Cg=n(gr);il=g(Cg,`Enable propagation of the library log outputs.
Please disable the HuggingFace datasets library\u2019s default handler to prevent double logging if the root logger has
been configured.`),Cg.forEach(t),$n.forEach(t),aa=p(e),ae=a(e,"DIV",{class:!0});var En=n(ae);d(ht.$$.fragment,En),ll=p(En),fr=a(En,"P",{});var Dg=n(fr);ol=g(Dg,`Return a logger with the specified name.
This function can be used in dataset and metrics scripts.`),Dg.forEach(t),En.forEach(t),na=p(e),ne=a(e,"DIV",{class:!0});var yn=n(ne);d(vt.$$.fragment,yn),gl=p(yn),pr=a(yn,"P",{});var Lg=n(pr);fl=g(Lg,"Enable tqdm progress bar."),Lg.forEach(t),yn.forEach(t),ia=p(e),ie=a(e,"DIV",{class:!0});var wn=n(ie);d(mt.$$.fragment,wn),pl=p(wn),br=a(wn,"P",{});var kg=n(br);bl=g(kg,"Enable tqdm progress bar."),kg.forEach(t),wn.forEach(t),la=p(e),le=a(e,"DIV",{class:!0});var xn=n(le);d(ct.$$.fragment,xn),ul=p(xn),ur=a(xn,"P",{});var jg=n(ur);dl=g(jg,"Return a boolean indicating whether tqdm progress bars are enabled."),jg.forEach(t),xn.forEach(t),oa=p(e),oe=a(e,"H2",{class:!0});var In=n(oe);Re=a(In,"A",{id:!0,class:!0,href:!0});var Bg=n(Re);dr=a(Bg,"SPAN",{});var Gg=n(dr);d(_t.$$.fragment,Gg),Gg.forEach(t),Bg.forEach(t),hl=p(In),hr=a(In,"SPAN",{});var Vg=n(hr);vl=g(Vg,"Levels"),Vg.forEach(t),In.forEach(t),ga=p(e),ge=a(e,"H3",{class:!0});var An=n(ge);Oe=a(An,"A",{id:!0,class:!0,href:!0});var Hg=n(Oe);vr=a(Hg,"SPAN",{});var Wg=n(vr);d($t.$$.fragment,Wg),Wg.forEach(t),Hg.forEach(t),ml=p(An),mr=a(An,"SPAN",{});var qg=n(mr);cl=g(qg,"datasets.logging.CRITICAL"),qg.forEach(t),An.forEach(t),fa=p(e),as=a(e,"P",{});var Ug=n(as);_l=g(Ug,"datasets.logging.CRITICAL = 50"),Ug.forEach(t),pa=p(e),ns=a(e,"P",{});var zg=n(ns);$l=g(zg,"int([x]) -> integer"),zg.forEach(t),ba=p(e),is=a(e,"P",{});var Mg=n(is);El=g(Mg,"int(x, base=10) -> integer"),Mg.forEach(t),ua=p(e),Se=a(e,"P",{});var Tn=n(Se);yl=g(Tn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),cr=a(Tn,"STRONG",{});var Yg=n(cr);wl=g(Yg,"int"),Yg.forEach(t),xl=g(Tn,`().  For floating point
numbers, this truncates towards zero.`),Tn.forEach(t),da=p(e),ls=a(e,"P",{});var Jg=n(ls);Il=g(Jg,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Jg.forEach(t),ha=p(e),d(Et.$$.fragment,e),va=p(e),fe=a(e,"H3",{class:!0});var Nn=n(fe);Fe=a(Nn,"A",{id:!0,class:!0,href:!0});var Kg=n(Fe);_r=a(Kg,"SPAN",{});var Qg=n(_r);d(yt.$$.fragment,Qg),Qg.forEach(t),Kg.forEach(t),Al=p(Nn),$r=a(Nn,"SPAN",{});var Xg=n($r);Tl=g(Xg,"datasets.logging.DEBUG"),Xg.forEach(t),Nn.forEach(t),ma=p(e),os=a(e,"P",{});var Zg=n(os);Nl=g(Zg,"datasets.logging.DEBUG = 10"),Zg.forEach(t),ca=p(e),gs=a(e,"P",{});var ef=n(gs);Pl=g(ef,"int([x]) -> integer"),ef.forEach(t),_a=p(e),fs=a(e,"P",{});var tf=n(fs);Rl=g(tf,"int(x, base=10) -> integer"),tf.forEach(t),$a=p(e),Ce=a(e,"P",{});var Pn=n(Ce);Ol=g(Pn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Er=a(Pn,"STRONG",{});var sf=n(Er);Sl=g(sf,"int"),sf.forEach(t),Fl=g(Pn,`().  For floating point
numbers, this truncates towards zero.`),Pn.forEach(t),Ea=p(e),ps=a(e,"P",{});var rf=n(ps);Cl=g(rf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),rf.forEach(t),ya=p(e),d(wt.$$.fragment,e),wa=p(e),pe=a(e,"H3",{class:!0});var Rn=n(pe);De=a(Rn,"A",{id:!0,class:!0,href:!0});var af=n(De);yr=a(af,"SPAN",{});var nf=n(yr);d(xt.$$.fragment,nf),nf.forEach(t),af.forEach(t),Dl=p(Rn),wr=a(Rn,"SPAN",{});var lf=n(wr);Ll=g(lf,"datasets.logging.ERROR"),lf.forEach(t),Rn.forEach(t),xa=p(e),bs=a(e,"P",{});var of=n(bs);kl=g(of,"datasets.logging.ERROR = 40"),of.forEach(t),Ia=p(e),us=a(e,"P",{});var gf=n(us);jl=g(gf,"int([x]) -> integer"),gf.forEach(t),Aa=p(e),ds=a(e,"P",{});var ff=n(ds);Bl=g(ff,"int(x, base=10) -> integer"),ff.forEach(t),Ta=p(e),Le=a(e,"P",{});var On=n(Le);Gl=g(On,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),xr=a(On,"STRONG",{});var pf=n(xr);Vl=g(pf,"int"),pf.forEach(t),Hl=g(On,`().  For floating point
numbers, this truncates towards zero.`),On.forEach(t),Na=p(e),hs=a(e,"P",{});var bf=n(hs);Wl=g(bf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),bf.forEach(t),Pa=p(e),d(It.$$.fragment,e),Ra=p(e),be=a(e,"H3",{class:!0});var Sn=n(be);ke=a(Sn,"A",{id:!0,class:!0,href:!0});var uf=n(ke);Ir=a(uf,"SPAN",{});var df=n(Ir);d(At.$$.fragment,df),df.forEach(t),uf.forEach(t),ql=p(Sn),Ar=a(Sn,"SPAN",{});var hf=n(Ar);Ul=g(hf,"datasets.logging.FATAL"),hf.forEach(t),Sn.forEach(t),Oa=p(e),vs=a(e,"P",{});var vf=n(vs);zl=g(vf,"datasets.logging.FATAL = 50"),vf.forEach(t),Sa=p(e),ms=a(e,"P",{});var mf=n(ms);Ml=g(mf,"int([x]) -> integer"),mf.forEach(t),Fa=p(e),cs=a(e,"P",{});var cf=n(cs);Yl=g(cf,"int(x, base=10) -> integer"),cf.forEach(t),Ca=p(e),je=a(e,"P",{});var Fn=n(je);Jl=g(Fn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Tr=a(Fn,"STRONG",{});var _f=n(Tr);Kl=g(_f,"int"),_f.forEach(t),Ql=g(Fn,`().  For floating point
numbers, this truncates towards zero.`),Fn.forEach(t),Da=p(e),_s=a(e,"P",{});var $f=n(_s);Xl=g($f,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),$f.forEach(t),La=p(e),d(Tt.$$.fragment,e),ka=p(e),ue=a(e,"H3",{class:!0});var Cn=n(ue);Be=a(Cn,"A",{id:!0,class:!0,href:!0});var Ef=n(Be);Nr=a(Ef,"SPAN",{});var yf=n(Nr);d(Nt.$$.fragment,yf),yf.forEach(t),Ef.forEach(t),Zl=p(Cn),Pr=a(Cn,"SPAN",{});var wf=n(Pr);eo=g(wf,"datasets.logging.INFO"),wf.forEach(t),Cn.forEach(t),ja=p(e),$s=a(e,"P",{});var xf=n($s);to=g(xf,"datasets.logging.INFO = 20"),xf.forEach(t),Ba=p(e),Es=a(e,"P",{});var If=n(Es);so=g(If,"int([x]) -> integer"),If.forEach(t),Ga=p(e),ys=a(e,"P",{});var Af=n(ys);ro=g(Af,"int(x, base=10) -> integer"),Af.forEach(t),Va=p(e),Ge=a(e,"P",{});var Dn=n(Ge);ao=g(Dn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Rr=a(Dn,"STRONG",{});var Tf=n(Rr);no=g(Tf,"int"),Tf.forEach(t),io=g(Dn,`().  For floating point
numbers, this truncates towards zero.`),Dn.forEach(t),Ha=p(e),ws=a(e,"P",{});var Nf=n(ws);lo=g(Nf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Nf.forEach(t),Wa=p(e),d(Pt.$$.fragment,e),qa=p(e),de=a(e,"H3",{class:!0});var Ln=n(de);Ve=a(Ln,"A",{id:!0,class:!0,href:!0});var Pf=n(Ve);Or=a(Pf,"SPAN",{});var Rf=n(Or);d(Rt.$$.fragment,Rf),Rf.forEach(t),Pf.forEach(t),oo=p(Ln),Sr=a(Ln,"SPAN",{});var Of=n(Sr);go=g(Of,"datasets.logging.NOTSET"),Of.forEach(t),Ln.forEach(t),Ua=p(e),xs=a(e,"P",{});var Sf=n(xs);fo=g(Sf,"datasets.logging.NOTSET = 0"),Sf.forEach(t),za=p(e),Is=a(e,"P",{});var Ff=n(Is);po=g(Ff,"int([x]) -> integer"),Ff.forEach(t),Ma=p(e),As=a(e,"P",{});var Cf=n(As);bo=g(Cf,"int(x, base=10) -> integer"),Cf.forEach(t),Ya=p(e),He=a(e,"P",{});var kn=n(He);uo=g(kn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Fr=a(kn,"STRONG",{});var Df=n(Fr);ho=g(Df,"int"),Df.forEach(t),vo=g(kn,`().  For floating point
numbers, this truncates towards zero.`),kn.forEach(t),Ja=p(e),Ts=a(e,"P",{});var Lf=n(Ts);mo=g(Lf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Lf.forEach(t),Ka=p(e),d(Ot.$$.fragment,e),Qa=p(e),he=a(e,"H3",{class:!0});var jn=n(he);We=a(jn,"A",{id:!0,class:!0,href:!0});var kf=n(We);Cr=a(kf,"SPAN",{});var jf=n(Cr);d(St.$$.fragment,jf),jf.forEach(t),kf.forEach(t),co=p(jn),Dr=a(jn,"SPAN",{});var Bf=n(Dr);_o=g(Bf,"datasets.logging.WARN"),Bf.forEach(t),jn.forEach(t),Xa=p(e),Ns=a(e,"P",{});var Gf=n(Ns);$o=g(Gf,"datasets.logging.WARN = 30"),Gf.forEach(t),Za=p(e),Ps=a(e,"P",{});var Vf=n(Ps);Eo=g(Vf,"int([x]) -> integer"),Vf.forEach(t),en=p(e),Rs=a(e,"P",{});var Hf=n(Rs);yo=g(Hf,"int(x, base=10) -> integer"),Hf.forEach(t),tn=p(e),qe=a(e,"P",{});var Bn=n(qe);wo=g(Bn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Lr=a(Bn,"STRONG",{});var Wf=n(Lr);xo=g(Wf,"int"),Wf.forEach(t),Io=g(Bn,`().  For floating point
numbers, this truncates towards zero.`),Bn.forEach(t),sn=p(e),Os=a(e,"P",{});var qf=n(Os);Ao=g(qf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),qf.forEach(t),rn=p(e),d(Ft.$$.fragment,e),an=p(e),ve=a(e,"H3",{class:!0});var Gn=n(ve);Ue=a(Gn,"A",{id:!0,class:!0,href:!0});var Uf=n(Ue);kr=a(Uf,"SPAN",{});var zf=n(kr);d(Ct.$$.fragment,zf),zf.forEach(t),Uf.forEach(t),To=p(Gn),jr=a(Gn,"SPAN",{});var Mf=n(jr);No=g(Mf,"datasets.logging.WARNING"),Mf.forEach(t),Gn.forEach(t),nn=p(e),Ss=a(e,"P",{});var Yf=n(Ss);Po=g(Yf,"datasets.logging.WARNING = 30"),Yf.forEach(t),ln=p(e),Fs=a(e,"P",{});var Jf=n(Fs);Ro=g(Jf,"int([x]) -> integer"),Jf.forEach(t),on=p(e),Cs=a(e,"P",{});var Kf=n(Cs);Oo=g(Kf,"int(x, base=10) -> integer"),Kf.forEach(t),gn=p(e),ze=a(e,"P",{});var Vn=n(ze);So=g(Vn,`Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.`),Br=a(Vn,"STRONG",{});var Qf=n(Br);Fo=g(Qf,"int"),Qf.forEach(t),Co=g(Vn,`().  For floating point
numbers, this truncates towards zero.`),Vn.forEach(t),fn=p(e),Ds=a(e,"P",{});var Xf=n(Ds);Do=g(Xf,`If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by \u2019+\u2019 or \u2019-\u2019 and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.`),Xf.forEach(t),pn=p(e),d(Dt.$$.fragment,e),this.h()},h(){b(y,"name","hf:doc:metadata"),b(y,"content",JSON.stringify(lp)),b(_,"id","logging-methods"),b(_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(_,"href","#logging-methods"),b(w,"class","relative group"),b(zt,"href","/docs/datasets/pr_4128/en/package_reference/logging_methods#datasets.utils.logging.get_verbosity"),b(Yt,"href","/docs/datasets/pr_4128/en/package_reference/logging_methods#datasets.utils.logging.set_verbosity"),b(Xt,"href","/docs/datasets/pr_4128/en/package_reference/logging_methods#datasets.disable_progress_bar"),b(Zt,"href","/docs/datasets/pr_4128/en/package_reference/logging_methods#datasets.enable_progress_bar"),b(Ne,"id","datasets.utils.logging.get_verbosity"),b(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Ne,"href","#datasets.utils.logging.get_verbosity"),b(ee,"class","relative group"),b(V,"class","docstring"),b(te,"class","docstring"),b(O,"class","docstring"),b(S,"class","docstring"),b(F,"class","docstring"),b(C,"class","docstring"),b(se,"class","docstring"),b(re,"class","docstring"),b(ae,"class","docstring"),b(ne,"class","docstring"),b(ie,"class","docstring"),b(le,"class","docstring"),b(Re,"id","levels"),b(Re,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Re,"href","#levels"),b(oe,"class","relative group"),b(Oe,"id","datasetsloggingcritical"),b(Oe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Oe,"href","#datasetsloggingcritical"),b(ge,"class","relative group"),b(Fe,"id","datasetsloggingdebug"),b(Fe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Fe,"href","#datasetsloggingdebug"),b(fe,"class","relative group"),b(De,"id","datasetsloggingerror"),b(De,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(De,"href","#datasetsloggingerror"),b(pe,"class","relative group"),b(ke,"id","datasetsloggingfatal"),b(ke,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(ke,"href","#datasetsloggingfatal"),b(be,"class","relative group"),b(Be,"id","datasetslogginginfo"),b(Be,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Be,"href","#datasetslogginginfo"),b(ue,"class","relative group"),b(Ve,"id","datasetsloggingnotset"),b(Ve,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Ve,"href","#datasetsloggingnotset"),b(de,"class","relative group"),b(We,"id","datasetsloggingwarn"),b(We,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(We,"href","#datasetsloggingwarn"),b(he,"class","relative group"),b(Ue,"id","datasetsloggingwarning"),b(Ue,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),b(Ue,"href","#datasetsloggingwarning"),b(ve,"class","relative group")},m(e,i){s(document.head,y),l(e,me,i),l(e,w,i),s(w,_),s(_,N),h(P,N,null),s(w,Xe),s(w,Y),s(Y,J),l(e,ce,i),l(e,D,i),s(D,K),s(D,B),s(B,Ze),s(D,et),l(e,L,i),l(e,x,i),s(x,tt),s(x,Q),s(Q,X),s(x,st),l(e,_e,i),h(R,e,i),l(e,W,i),l(e,$,i),s($,rt),s($,G),s(G,Z),s($,at),s($,E),s(E,q),s($,I),s($,U),s(U,kt),s($,jt),s($,$e),s($e,Bt),s($,Ee),s($,ye),s(ye,Gt),s($,Vt),s($,we),s(we,Ht),s($,Wt),l(e,Wr,i),h(nt,e,i),l(e,qr,i),l(e,qt,i),s(qt,Hn),l(e,Ur,i),l(e,xe,i),s(xe,Ut),s(Ut,zt),s(zt,Wn),s(Ut,qn),s(xe,Un),s(xe,Mt),s(Mt,Yt),s(Yt,zn),s(Mt,Mn),l(e,zr,i),l(e,Ie,i),s(Ie,Yn),s(Ie,ks),s(ks,Jn),s(Ie,Kn),l(e,Mr,i),l(e,A,i),s(A,Ae),s(Ae,js),s(js,Qn),s(Ae,Xn),s(Ae,Bs),s(Bs,Zn),s(Ae,ei),s(A,ti),s(A,Jt),s(Jt,Gs),s(Gs,si),s(Jt,ri),s(A,ai),s(A,Te),s(Te,Vs),s(Vs,ni),s(Te,ii),s(Te,Hs),s(Hs,li),s(Te,oi),s(A,gi),s(A,Kt),s(Kt,Ws),s(Ws,fi),s(Kt,pi),s(A,bi),s(A,Qt),s(Qt,qs),s(qs,ui),s(Qt,di),l(e,Yr,i),l(e,k,i),s(k,hi),s(k,Us),s(Us,vi),s(k,mi),s(k,Xt),s(Xt,ci),s(k,_i),s(k,Zt),s(Zt,$i),s(k,Ei),l(e,Jr,i),l(e,ee,i),s(ee,Ne),s(Ne,zs),h(it,zs,null),s(ee,yi),s(ee,Ms),s(Ms,wi),l(e,Kr,i),l(e,V,i),h(lt,V,null),s(V,xi),s(V,Ys),s(Ys,Ii),s(V,Ai),h(Pe,V,null),l(e,Qr,i),l(e,te,i),h(ot,te,null),s(te,Ti),s(te,Js),s(Js,Ni),l(e,Xr,i),l(e,O,i),h(gt,O,null),s(O,Pi),s(O,Ks),s(Ks,Ri),s(O,Oi),s(O,Qs),s(Qs,Si),s(O,Fi),s(O,es),s(es,Ci),s(es,Xs),s(Xs,Di),l(e,Zr,i),l(e,S,i),h(ft,S,null),s(S,Li),s(S,Zs),s(Zs,ki),s(S,ji),s(S,er),s(er,Bi),s(S,Gi),s(S,ts),s(ts,Vi),s(ts,tr),s(tr,Hi),l(e,ea,i),l(e,F,i),h(pt,F,null),s(F,Wi),s(F,sr),s(sr,qi),s(F,Ui),s(F,rr),s(rr,zi),s(F,Mi),s(F,ss),s(ss,Yi),s(ss,ar),s(ar,Ji),l(e,ta,i),l(e,C,i),h(bt,C,null),s(C,Ki),s(C,nr),s(nr,Qi),s(C,Xi),s(C,ir),s(ir,Zi),s(C,el),s(C,rs),s(rs,tl),s(rs,lr),s(lr,sl),l(e,sa,i),l(e,se,i),h(ut,se,null),s(se,rl),s(se,or),s(or,al),l(e,ra,i),l(e,re,i),h(dt,re,null),s(re,nl),s(re,gr),s(gr,il),l(e,aa,i),l(e,ae,i),h(ht,ae,null),s(ae,ll),s(ae,fr),s(fr,ol),l(e,na,i),l(e,ne,i),h(vt,ne,null),s(ne,gl),s(ne,pr),s(pr,fl),l(e,ia,i),l(e,ie,i),h(mt,ie,null),s(ie,pl),s(ie,br),s(br,bl),l(e,la,i),l(e,le,i),h(ct,le,null),s(le,ul),s(le,ur),s(ur,dl),l(e,oa,i),l(e,oe,i),s(oe,Re),s(Re,dr),h(_t,dr,null),s(oe,hl),s(oe,hr),s(hr,vl),l(e,ga,i),l(e,ge,i),s(ge,Oe),s(Oe,vr),h($t,vr,null),s(ge,ml),s(ge,mr),s(mr,cl),l(e,fa,i),l(e,as,i),s(as,_l),l(e,pa,i),l(e,ns,i),s(ns,$l),l(e,ba,i),l(e,is,i),s(is,El),l(e,ua,i),l(e,Se,i),s(Se,yl),s(Se,cr),s(cr,wl),s(Se,xl),l(e,da,i),l(e,ls,i),s(ls,Il),l(e,ha,i),h(Et,e,i),l(e,va,i),l(e,fe,i),s(fe,Fe),s(Fe,_r),h(yt,_r,null),s(fe,Al),s(fe,$r),s($r,Tl),l(e,ma,i),l(e,os,i),s(os,Nl),l(e,ca,i),l(e,gs,i),s(gs,Pl),l(e,_a,i),l(e,fs,i),s(fs,Rl),l(e,$a,i),l(e,Ce,i),s(Ce,Ol),s(Ce,Er),s(Er,Sl),s(Ce,Fl),l(e,Ea,i),l(e,ps,i),s(ps,Cl),l(e,ya,i),h(wt,e,i),l(e,wa,i),l(e,pe,i),s(pe,De),s(De,yr),h(xt,yr,null),s(pe,Dl),s(pe,wr),s(wr,Ll),l(e,xa,i),l(e,bs,i),s(bs,kl),l(e,Ia,i),l(e,us,i),s(us,jl),l(e,Aa,i),l(e,ds,i),s(ds,Bl),l(e,Ta,i),l(e,Le,i),s(Le,Gl),s(Le,xr),s(xr,Vl),s(Le,Hl),l(e,Na,i),l(e,hs,i),s(hs,Wl),l(e,Pa,i),h(It,e,i),l(e,Ra,i),l(e,be,i),s(be,ke),s(ke,Ir),h(At,Ir,null),s(be,ql),s(be,Ar),s(Ar,Ul),l(e,Oa,i),l(e,vs,i),s(vs,zl),l(e,Sa,i),l(e,ms,i),s(ms,Ml),l(e,Fa,i),l(e,cs,i),s(cs,Yl),l(e,Ca,i),l(e,je,i),s(je,Jl),s(je,Tr),s(Tr,Kl),s(je,Ql),l(e,Da,i),l(e,_s,i),s(_s,Xl),l(e,La,i),h(Tt,e,i),l(e,ka,i),l(e,ue,i),s(ue,Be),s(Be,Nr),h(Nt,Nr,null),s(ue,Zl),s(ue,Pr),s(Pr,eo),l(e,ja,i),l(e,$s,i),s($s,to),l(e,Ba,i),l(e,Es,i),s(Es,so),l(e,Ga,i),l(e,ys,i),s(ys,ro),l(e,Va,i),l(e,Ge,i),s(Ge,ao),s(Ge,Rr),s(Rr,no),s(Ge,io),l(e,Ha,i),l(e,ws,i),s(ws,lo),l(e,Wa,i),h(Pt,e,i),l(e,qa,i),l(e,de,i),s(de,Ve),s(Ve,Or),h(Rt,Or,null),s(de,oo),s(de,Sr),s(Sr,go),l(e,Ua,i),l(e,xs,i),s(xs,fo),l(e,za,i),l(e,Is,i),s(Is,po),l(e,Ma,i),l(e,As,i),s(As,bo),l(e,Ya,i),l(e,He,i),s(He,uo),s(He,Fr),s(Fr,ho),s(He,vo),l(e,Ja,i),l(e,Ts,i),s(Ts,mo),l(e,Ka,i),h(Ot,e,i),l(e,Qa,i),l(e,he,i),s(he,We),s(We,Cr),h(St,Cr,null),s(he,co),s(he,Dr),s(Dr,_o),l(e,Xa,i),l(e,Ns,i),s(Ns,$o),l(e,Za,i),l(e,Ps,i),s(Ps,Eo),l(e,en,i),l(e,Rs,i),s(Rs,yo),l(e,tn,i),l(e,qe,i),s(qe,wo),s(qe,Lr),s(Lr,xo),s(qe,Io),l(e,sn,i),l(e,Os,i),s(Os,Ao),l(e,rn,i),h(Ft,e,i),l(e,an,i),l(e,ve,i),s(ve,Ue),s(Ue,kr),h(Ct,kr,null),s(ve,To),s(ve,jr),s(jr,No),l(e,nn,i),l(e,Ss,i),s(Ss,Po),l(e,ln,i),l(e,Fs,i),s(Fs,Ro),l(e,on,i),l(e,Cs,i),s(Cs,Oo),l(e,gn,i),l(e,ze,i),s(ze,So),s(ze,Br),s(Br,Fo),s(ze,Co),l(e,fn,i),l(e,Ds,i),s(Ds,Do),l(e,pn,i),h(Dt,e,i),bn=!0},p(e,[i]){const Lt={};i&2&&(Lt.$$scope={dirty:i,ctx:e}),Pe.$set(Lt)},i(e){bn||(v(P.$$.fragment,e),v(R.$$.fragment,e),v(nt.$$.fragment,e),v(it.$$.fragment,e),v(lt.$$.fragment,e),v(Pe.$$.fragment,e),v(ot.$$.fragment,e),v(gt.$$.fragment,e),v(ft.$$.fragment,e),v(pt.$$.fragment,e),v(bt.$$.fragment,e),v(ut.$$.fragment,e),v(dt.$$.fragment,e),v(ht.$$.fragment,e),v(vt.$$.fragment,e),v(mt.$$.fragment,e),v(ct.$$.fragment,e),v(_t.$$.fragment,e),v($t.$$.fragment,e),v(Et.$$.fragment,e),v(yt.$$.fragment,e),v(wt.$$.fragment,e),v(xt.$$.fragment,e),v(It.$$.fragment,e),v(At.$$.fragment,e),v(Tt.$$.fragment,e),v(Nt.$$.fragment,e),v(Pt.$$.fragment,e),v(Rt.$$.fragment,e),v(Ot.$$.fragment,e),v(St.$$.fragment,e),v(Ft.$$.fragment,e),v(Ct.$$.fragment,e),v(Dt.$$.fragment,e),bn=!0)},o(e){m(P.$$.fragment,e),m(R.$$.fragment,e),m(nt.$$.fragment,e),m(it.$$.fragment,e),m(lt.$$.fragment,e),m(Pe.$$.fragment,e),m(ot.$$.fragment,e),m(gt.$$.fragment,e),m(ft.$$.fragment,e),m(pt.$$.fragment,e),m(bt.$$.fragment,e),m(ut.$$.fragment,e),m(dt.$$.fragment,e),m(ht.$$.fragment,e),m(vt.$$.fragment,e),m(mt.$$.fragment,e),m(ct.$$.fragment,e),m(_t.$$.fragment,e),m($t.$$.fragment,e),m(Et.$$.fragment,e),m(yt.$$.fragment,e),m(wt.$$.fragment,e),m(xt.$$.fragment,e),m(It.$$.fragment,e),m(At.$$.fragment,e),m(Tt.$$.fragment,e),m(Nt.$$.fragment,e),m(Pt.$$.fragment,e),m(Rt.$$.fragment,e),m(Ot.$$.fragment,e),m(St.$$.fragment,e),m(Ft.$$.fragment,e),m(Ct.$$.fragment,e),m(Dt.$$.fragment,e),bn=!1},d(e){t(y),e&&t(me),e&&t(w),c(P),e&&t(ce),e&&t(D),e&&t(L),e&&t(x),e&&t(_e),c(R,e),e&&t(W),e&&t($),e&&t(Wr),c(nt,e),e&&t(qr),e&&t(qt),e&&t(Ur),e&&t(xe),e&&t(zr),e&&t(Ie),e&&t(Mr),e&&t(A),e&&t(Yr),e&&t(k),e&&t(Jr),e&&t(ee),c(it),e&&t(Kr),e&&t(V),c(lt),c(Pe),e&&t(Qr),e&&t(te),c(ot),e&&t(Xr),e&&t(O),c(gt),e&&t(Zr),e&&t(S),c(ft),e&&t(ea),e&&t(F),c(pt),e&&t(ta),e&&t(C),c(bt),e&&t(sa),e&&t(se),c(ut),e&&t(ra),e&&t(re),c(dt),e&&t(aa),e&&t(ae),c(ht),e&&t(na),e&&t(ne),c(vt),e&&t(ia),e&&t(ie),c(mt),e&&t(la),e&&t(le),c(ct),e&&t(oa),e&&t(oe),c(_t),e&&t(ga),e&&t(ge),c($t),e&&t(fa),e&&t(as),e&&t(pa),e&&t(ns),e&&t(ba),e&&t(is),e&&t(ua),e&&t(Se),e&&t(da),e&&t(ls),e&&t(ha),c(Et,e),e&&t(va),e&&t(fe),c(yt),e&&t(ma),e&&t(os),e&&t(ca),e&&t(gs),e&&t(_a),e&&t(fs),e&&t($a),e&&t(Ce),e&&t(Ea),e&&t(ps),e&&t(ya),c(wt,e),e&&t(wa),e&&t(pe),c(xt),e&&t(xa),e&&t(bs),e&&t(Ia),e&&t(us),e&&t(Aa),e&&t(ds),e&&t(Ta),e&&t(Le),e&&t(Na),e&&t(hs),e&&t(Pa),c(It,e),e&&t(Ra),e&&t(be),c(At),e&&t(Oa),e&&t(vs),e&&t(Sa),e&&t(ms),e&&t(Fa),e&&t(cs),e&&t(Ca),e&&t(je),e&&t(Da),e&&t(_s),e&&t(La),c(Tt,e),e&&t(ka),e&&t(ue),c(Nt),e&&t(ja),e&&t($s),e&&t(Ba),e&&t(Es),e&&t(Ga),e&&t(ys),e&&t(Va),e&&t(Ge),e&&t(Ha),e&&t(ws),e&&t(Wa),c(Pt,e),e&&t(qa),e&&t(de),c(Rt),e&&t(Ua),e&&t(xs),e&&t(za),e&&t(Is),e&&t(Ma),e&&t(As),e&&t(Ya),e&&t(He),e&&t(Ja),e&&t(Ts),e&&t(Ka),c(Ot,e),e&&t(Qa),e&&t(he),c(St),e&&t(Xa),e&&t(Ns),e&&t(Za),e&&t(Ps),e&&t(en),e&&t(Rs),e&&t(tn),e&&t(qe),e&&t(sn),e&&t(Os),e&&t(rn),c(Ft,e),e&&t(an),e&&t(ve),c(Ct),e&&t(nn),e&&t(Ss),e&&t(ln),e&&t(Fs),e&&t(on),e&&t(Cs),e&&t(gn),e&&t(ze),e&&t(fn),e&&t(Ds),e&&t(pn),c(Dt,e)}}}const lp={local:"logging-methods",sections:[{local:"datasets.utils.logging.get_verbosity",title:"Functions"},{local:"levels",sections:[{local:"datasetsloggingcritical",title:"datasets.logging.CRITICAL"},{local:"datasetsloggingdebug",title:"datasets.logging.DEBUG"},{local:"datasetsloggingerror",title:"datasets.logging.ERROR"},{local:"datasetsloggingfatal",title:"datasets.logging.FATAL"},{local:"datasetslogginginfo",title:"datasets.logging.INFO"},{local:"datasetsloggingnotset",title:"datasets.logging.NOTSET"},{local:"datasetsloggingwarn",title:"datasets.logging.WARN"},{local:"datasetsloggingwarning",title:"datasets.logging.WARNING"}],title:"Levels"}],title:"Logging methods"};function op(Hr){return rp(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class dp extends Zf{constructor(y){super();ep(this,y,op,ip,tp,{})}}export{dp as default,lp as metadata};
