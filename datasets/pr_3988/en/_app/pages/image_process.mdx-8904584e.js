import{S as hr,i as ur,s as gr,e as o,k as m,w as g,t as s,M as _r,c as r,d as t,m as f,a as i,x as _,h as l,b as c,N as cr,F as a,g as p,y as v,q as $,o as w,B as y}from"../chunks/vendor-aa873a46.js";import{T as dr}from"../chunks/Tip-f7f252ab.js";import{I as Ua}from"../chunks/IconCopyLink-d0ca3106.js";import{C as I}from"../chunks/CodeBlock-1f14baf3.js";function vr(me){let d,j,h,E,x,u,b,q;return{c(){d=o("p"),j=s("If the image files come from a trusted source, pass "),h=o("code"),E=s("ignore_verifications=True"),x=s(" to "),u=o("a"),b=s("load_dataset()"),q=s(" to skip checksum verification and speed up loading."),this.h()},l(z){d=r(z,"P",{});var D=i(d);j=l(D,"If the image files come from a trusted source, pass "),h=r(D,"CODE",{});var A=i(h);E=l(A,"ignore_verifications=True"),A.forEach(t),x=l(D," to "),u=r(D,"A",{href:!0});var Ne=i(u);b=l(Ne,"load_dataset()"),Ne.forEach(t),q=l(D," to skip checksum verification and speed up loading."),D.forEach(t),this.h()},h(){c(u,"href","/docs/datasets/pr_3988/en/package_reference/loading_methods#datasets.load_dataset")},m(z,D){p(z,d,D),a(d,j),a(d,h),a(h,E),a(d,x),a(d,u),a(u,b),a(d,q)},d(z){z&&t(d)}}}function $r(me){let d,j,h,E,x;return{c(){d=o("p"),j=s("Feel free to use other data augmentation libraries like "),h=o("a"),E=s("Albumentations"),x=s(". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),this.h()},l(u){d=r(u,"P",{});var b=i(d);j=l(b,"Feel free to use other data augmentation libraries like "),h=r(b,"A",{href:!0,rel:!0});var q=i(h);E=l(q,"Albumentations"),q.forEach(t),x=l(b,". \u{1F917} Datasets can apply any custom function and transforms to an entire dataset!"),b.forEach(t),this.h()},h(){c(h,"href","https://albumentations.ai/docs/"),c(h,"rel","nofollow")},m(u,b){p(u,d,b),a(d,j),a(d,h),a(h,E),a(d,x)},d(u){u&&t(d)}}}function wr(me){let d,j,h,E,x,u,b,q,z,D,A,Ne,Je,ss,ls,Ga,C,ma,os,rs,fe,ns,fa,is,ps,ms,ce,fs,Se,cs,ds,hs,de,us,Re,gs,_s,Ya,B,U,ca,he,vs,da,$s,Ma,Ue,ws,Ha,G,ue,ys,ha,Es,js,bs,ua,ks,Ka,Y,xs,ge,Ds,Is,Qa,_e,Va,P,qs,Ge,Cs,Ps,ga,As,Ts,_a,Fs,Ls,Wa,ve,Xa,Ye,Me,oo,Za,T,Os,He,zs,Bs,Ke,Ns,Js,et,$e,at,F,Ss,va,Rs,Us,$a,Gs,Ys,tt,we,st,N,M,wa,ye,Ms,ya,Hs,lt,H,Ks,Ea,Qs,Vs,ot,Ee,rt,L,Ws,ja,Xs,Zs,ba,el,al,nt,je,it,K,tl,ka,sl,ll,pt,be,mt,J,xa,ol,rl,Da,nl,il,ft,Q,ct,S,V,Ia,ke,pl,qa,ml,dt,xe,Qe,fl,cl,ht,W,dl,De,Ca,hl,ul,ut,Ie,gt,k,gl,Ve,_l,vl,Pa,$l,wl,Aa,yl,El,Ta,jl,bl,_t,qe,vt,X,kl,We,xl,Dl,$t,Ce,Xe,Il,ql,wt,Z,Ze,ea,Fa,Cl,Pl,Al,aa,ta,La,Tl,Fl,yt,ee,Ll,sa,Ol,zl,Et,R,ae,Oa,Pe,Bl,za,Nl,jt,te,Jl,Ae,Sl,Rl,bt,se,kt,le,Ul,Te,Ba,Gl,Yl,xt,Fe,Dt,oe,Ml,Na,Hl,Kl,It,Le,qt,re,Ql,la,Vl,Wl,Ct,Oe,Pt,ne,Xl,Ja,Zl,eo,At,ze,Tt,oa,ra,ro,Ft;return u=new Ua({}),he=new Ua({}),_e=new I({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[:100]")
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;image&#x27;</span>: &lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=384x512 at <span class="hljs-number">0x7FC45AB5C590</span>&gt;,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>}`}}),ve=new I({props:{code:`from datasets import load_dataset, Image

dataset = load_dataset("food101", split="train[100:200]")
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[100:200]&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),$e=new I({props:{code:`from datasets import load_dataset, Image

dataset = Dataset.from_dict({"image": ["path/to/image_1", "path/to/image_2", ..., "path/to/image_n"]}).cast_column("image", Image())
dataset[0]["image"]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, Image

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = Dataset.from_dict({<span class="hljs-string">&quot;image&quot;</span>: [<span class="hljs-string">&quot;path/to/image_1&quot;</span>, <span class="hljs-string">&quot;path/to/image_2&quot;</span>, ..., <span class="hljs-string">&quot;path/to/image_n&quot;</span>]}).cast_column(<span class="hljs-string">&quot;image&quot;</span>, Image())
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;image&quot;</span>]`}}),we=new I({props:{code:`dataset = load_dataset("food101", split="train[:100]").cast_column('image', Image(decode=False))`,highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;food101&quot;</span>, split=<span class="hljs-string">&quot;train[:100]&quot;</span>).cast_column(<span class="hljs-string">&#x27;image&#x27;</span>, Image(decode=<span class="hljs-literal">False</span>))'}}),ye=new Ua({}),Ee=new I({props:{code:`folder/dog/golden_retriever.png
folder/dog/german_shepherd.png
folder/dog/chihuahua.png

folder/cat/maine_coon.png
folder/cat/bengal.png
folder/cat/birman.png`,highlighted:`folder<span class="hljs-regexp">/dog/g</span>olden_retriever.png
folder<span class="hljs-regexp">/dog/g</span>erman_shepherd.png
folder<span class="hljs-regexp">/dog/</span>chihuahua.png

folder<span class="hljs-regexp">/cat/m</span>aine_coon.png
folder<span class="hljs-regexp">/cat/</span>bengal.png
folder<span class="hljs-regexp">/cat/</span>birman.png`}}),je=new I({props:{code:`from datasets import load_dataset
dataset = load_dataset("imagefolder", data_dir="/path/to/folder")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_dir=<span class="hljs-string">&quot;/path/to/folder&quot;</span>)`}}),be=new I({props:{code:'dataset = load_dataset("imagefolder", data_files="https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip", split="train")',highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imagefolder&quot;</span>, data_files=<span class="hljs-string">&quot;https://download.microsoft.com/download/3/E/1/3E1C3F21-ECDB-4869-8368-6DEBA77B919F/kagglecatsanddogs_3367a.zip&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>)'}}),Q=new dr({props:{$$slots:{default:[vr]},$$scope:{ctx:me}}}),ke=new Ua({}),Ie=new I({props:{code:`def transforms(examples):
    examples["pixel_values"] = [image.convert("RGB").resize((100,100)) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [image.convert(<span class="hljs-string">&quot;RGB&quot;</span>).resize((<span class="hljs-number">100</span>,<span class="hljs-number">100</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),qe=new I({props:{code:`dataset = dataset.map(transforms, remove_columns=["image"], batched=True)
dataset[0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = dataset.<span class="hljs-built_in">map</span>(transforms, remove_columns=[<span class="hljs-string">&quot;image&quot;</span>], batched=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">6</span>,
 <span class="hljs-string">&#x27;pixel_values&#x27;</span>: &lt;PIL.PngImagePlugin.PngImageFile image mode=RGB size=100x100 at <span class="hljs-number">0x7F058237BB10</span>&gt;}`}}),Pe=new Ua({}),se=new dr({props:{$$slots:{default:[$r]},$$scope:{ctx:me}}}),Fe=new I({props:{code:`from torchvision.transforms import Compose, ColorJitter, ToTensor

jitter = Compose(
    [
         ColorJitter(brightness=0.25, contrast=0.25, saturation=0.25, hue=0.7),
         ToTensor(),
    ]
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> torchvision.transforms <span class="hljs-keyword">import</span> Compose, ColorJitter, ToTensor

<span class="hljs-meta">&gt;&gt;&gt; </span>jitter = Compose(
<span class="hljs-meta">... </span>    [
<span class="hljs-meta">... </span>         ColorJitter(brightness=<span class="hljs-number">0.25</span>, contrast=<span class="hljs-number">0.25</span>, saturation=<span class="hljs-number">0.25</span>, hue=<span class="hljs-number">0.7</span>),
<span class="hljs-meta">... </span>         ToTensor(),
<span class="hljs-meta">... </span>    ]
<span class="hljs-meta">... </span>)`}}),Le=new I({props:{code:`def transforms(examples):
    examples["pixel_values"] = [jitter(image.convert("RGB")) for image in examples["image"]]
    return examples`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">transforms</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    examples[<span class="hljs-string">&quot;pixel_values&quot;</span>] = [jitter(image.convert(<span class="hljs-string">&quot;RGB&quot;</span>)) <span class="hljs-keyword">for</span> image <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;image&quot;</span>]]
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> examples`}}),Oe=new I({props:{code:"dataset.set_transform(transforms)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.set_transform(transforms)'}}),ze=new I({props:{code:`import numpy as np
import matplotlib.pyplot as plt

img = dataset[0]["pixel_values"]
plt.imshow(img.permute(1, 2, 0))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt

<span class="hljs-meta">&gt;&gt;&gt; </span>img = dataset[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;pixel_values&quot;</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>plt.imshow(img.permute(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>))`}}),{c(){d=o("meta"),j=m(),h=o("h1"),E=o("a"),x=o("span"),g(u.$$.fragment),b=m(),q=o("span"),z=s("Process image data"),D=m(),A=o("p"),Ne=s("\u{1F917} Datasets support loading and processing images with the "),Je=o("a"),ss=s("Image"),ls=s(" feature. This guide will show you how to:"),Ga=m(),C=o("ul"),ma=o("li"),os=s("Load an image dataset."),rs=m(),fe=o("li"),ns=s("Load a generic image dataset with "),fa=o("code"),is=s("ImageFolder"),ps=s("."),ms=m(),ce=o("li"),fs=s("Use "),Se=o("a"),cs=s("Dataset.map()"),ds=s(" to quickly apply transforms to an entire dataset."),hs=m(),de=o("li"),us=s("Add data augmentations to your images with "),Re=o("a"),gs=s("Dataset.set_transform()"),_s=s("."),Ya=m(),B=o("h2"),U=o("a"),ca=o("span"),g(he.$$.fragment),vs=m(),da=o("span"),$s=s("Image datasets"),Ma=m(),Ue=o("p"),ws=s("The images in an image dataset are typically either a:"),Ha=m(),G=o("ul"),ue=o("li"),ys=s("PIL "),ha=o("code"),Es=s("image"),js=s("."),bs=m(),ua=o("li"),ks=s("Path to an image file you can load."),Ka=m(),Y=o("p"),xs=s("For example, load the "),ge=o("a"),Ds=s("Food-101"),Is=s(" dataset and take a look:"),Qa=m(),g(_e.$$.fragment),Va=m(),P=o("p"),qs=s("The "),Ge=o("a"),Cs=s("Image"),Ps=s(" feature automatically decodes the data from the "),ga=o("code"),As=s("image"),Ts=s(" column to return an image object. Now try and call the "),_a=o("code"),Fs=s("image"),Ls=s(" column to see what the image is:"),Wa=m(),g(ve.$$.fragment),Xa=m(),Ye=o("p"),Me=o("img"),Za=m(),T=o("p"),Os=s("To load an image from its path, use the "),He=o("a"),zs=s("Dataset.cast_column()"),Bs=s(" method. The "),Ke=o("a"),Ns=s("Image"),Js=s(" feature will decode the data at the path to return an image object:"),et=m(),g($e.$$.fragment),at=m(),F=o("p"),Ss=s("You can also access the path and bytes of an image file by setting "),va=o("code"),Rs=s("decode=False"),Us=s(" when you load a dataset. In this case, you will need to cast the "),$a=o("code"),Gs=s("image"),Ys=s(" column:"),tt=m(),g(we.$$.fragment),st=m(),N=o("h2"),M=o("a"),wa=o("span"),g(ye.$$.fragment),Ms=m(),ya=o("span"),Hs=s("ImageFolder"),lt=m(),H=o("p"),Ks=s("You can also load your image dataset with a "),Ea=o("code"),Qs=s("ImageFolder"),Vs=s(" dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),ot=m(),g(Ee.$$.fragment),rt=m(),L=o("p"),Ws=s("Then load your dataset by specifying "),ja=o("code"),Xs=s("imagefolder"),Zs=s(" and the directory of your dataset in "),ba=o("code"),el=s("data_dir"),al=s(":"),nt=m(),g(je.$$.fragment),it=m(),K=o("p"),tl=s("Load remote datasets from their URLs with the "),ka=o("code"),sl=s("data_files"),ll=s(" parameter:"),pt=m(),g(be.$$.fragment),mt=m(),J=o("p"),xa=o("code"),ol=s("ImageFolder"),rl=s(" will create a "),Da=o("code"),nl=s("label"),il=s(" column, and the label name is based on the directory name."),ft=m(),g(Q.$$.fragment),ct=m(),S=o("h2"),V=o("a"),Ia=o("span"),g(ke.$$.fragment),pl=m(),qa=o("span"),ml=s("Map"),dt=m(),xe=o("p"),Qe=o("a"),fl=s("Dataset.map()"),cl=s(" can apply transforms over an entire dataset and it also generates a cache file."),ht=m(),W=o("p"),dl=s("Create a simple "),De=o("a"),Ca=o("code"),hl=s("Resize"),ul=s(" function:"),ut=m(),g(Ie.$$.fragment),gt=m(),k=o("p"),gl=s("Now "),Ve=o("a"),_l=s("Dataset.map()"),vl=s(" the function over the entire dataset and set "),Pa=o("code"),$l=s("batched=True"),wl=s(". The transform returns "),Aa=o("code"),yl=s("pixel_values"),El=s(" as a cacheable "),Ta=o("code"),jl=s("PIL.Image"),bl=s(" object:"),_t=m(),g(qe.$$.fragment),vt=m(),X=o("p"),kl=s("This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),We=o("a"),xl=s("Dataset.map()"),Dl=s(" for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),$t=m(),Ce=o("p"),Xe=o("a"),Il=s("Dataset.map()"),ql=s(" takes up some memory, but you can reduce its memory requirements with the following parameters:"),wt=m(),Z=o("ul"),Ze=o("li"),ea=o("a"),Fa=o("code"),Cl=s("batch_size"),Pl=s(" determines the number of examples that are processed in one call to the transform function."),Al=m(),aa=o("li"),ta=o("a"),La=o("code"),Tl=s("writer_batch_size"),Fl=s(" determines the number of processed examples that are kept in memory before they are stored away."),yt=m(),ee=o("p"),Ll=s("Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),sa=o("a"),Ol=s("Dataset.map()"),zl=s("."),Et=m(),R=o("h2"),ae=o("a"),Oa=o("span"),g(Pe.$$.fragment),Bl=m(),za=o("span"),Nl=s("Data augmentation"),jt=m(),te=o("p"),Jl=s("Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),Ae=o("a"),Sl=s("torchvision"),Rl=s("."),bt=m(),g(se.$$.fragment),kt=m(),le=o("p"),Ul=s("Add the "),Te=o("a"),Ba=o("code"),Gl=s("ColorJitter"),Yl=s(" transform to change the color properties of the image randomly:"),xt=m(),g(Fe.$$.fragment),Dt=m(),oe=o("p"),Ml=s("Create a function to apply the "),Na=o("code"),Hl=s("ColorJitter"),Kl=s(" transform to an image:"),It=m(),g(Le.$$.fragment),qt=m(),re=o("p"),Ql=s("Then you can use the "),la=o("a"),Vl=s("Dataset.set_transform()"),Wl=s(" function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),Ct=m(),g(Oe.$$.fragment),Pt=m(),ne=o("p"),Xl=s("Now visualize the results of the "),Ja=o("code"),Zl=s("ColorJitter"),eo=s(" transform:"),At=m(),g(ze.$$.fragment),Tt=m(),oa=o("p"),ra=o("img"),this.h()},l(e){const n=_r('[data-svelte="svelte-1phssyn"]',document.head);d=r(n,"META",{name:!0,content:!0}),n.forEach(t),j=f(e),h=r(e,"H1",{class:!0});var Be=i(h);E=r(Be,"A",{id:!0,class:!0,href:!0});var Sa=i(E);x=r(Sa,"SPAN",{});var no=i(x);_(u.$$.fragment,no),no.forEach(t),Sa.forEach(t),b=f(Be),q=r(Be,"SPAN",{});var io=i(q);z=l(io,"Process image data"),io.forEach(t),Be.forEach(t),D=f(e),A=r(e,"P",{});var Lt=i(A);Ne=l(Lt,"\u{1F917} Datasets support loading and processing images with the "),Je=r(Lt,"A",{href:!0});var po=i(Je);ss=l(po,"Image"),po.forEach(t),ls=l(Lt," feature. This guide will show you how to:"),Lt.forEach(t),Ga=f(e),C=r(e,"UL",{});var ie=i(C);ma=r(ie,"LI",{});var mo=i(ma);os=l(mo,"Load an image dataset."),mo.forEach(t),rs=f(ie),fe=r(ie,"LI",{});var Ot=i(fe);ns=l(Ot,"Load a generic image dataset with "),fa=r(Ot,"CODE",{});var fo=i(fa);is=l(fo,"ImageFolder"),fo.forEach(t),ps=l(Ot,"."),Ot.forEach(t),ms=f(ie),ce=r(ie,"LI",{});var zt=i(ce);fs=l(zt,"Use "),Se=r(zt,"A",{href:!0});var co=i(Se);cs=l(co,"Dataset.map()"),co.forEach(t),ds=l(zt," to quickly apply transforms to an entire dataset."),zt.forEach(t),hs=f(ie),de=r(ie,"LI",{});var Bt=i(de);us=l(Bt,"Add data augmentations to your images with "),Re=r(Bt,"A",{href:!0});var ho=i(Re);gs=l(ho,"Dataset.set_transform()"),ho.forEach(t),_s=l(Bt,"."),Bt.forEach(t),ie.forEach(t),Ya=f(e),B=r(e,"H2",{class:!0});var Nt=i(B);U=r(Nt,"A",{id:!0,class:!0,href:!0});var uo=i(U);ca=r(uo,"SPAN",{});var go=i(ca);_(he.$$.fragment,go),go.forEach(t),uo.forEach(t),vs=f(Nt),da=r(Nt,"SPAN",{});var _o=i(da);$s=l(_o,"Image datasets"),_o.forEach(t),Nt.forEach(t),Ma=f(e),Ue=r(e,"P",{});var vo=i(Ue);ws=l(vo,"The images in an image dataset are typically either a:"),vo.forEach(t),Ha=f(e),G=r(e,"UL",{});var Jt=i(G);ue=r(Jt,"LI",{});var St=i(ue);ys=l(St,"PIL "),ha=r(St,"CODE",{});var $o=i(ha);Es=l($o,"image"),$o.forEach(t),js=l(St,"."),St.forEach(t),bs=f(Jt),ua=r(Jt,"LI",{});var wo=i(ua);ks=l(wo,"Path to an image file you can load."),wo.forEach(t),Jt.forEach(t),Ka=f(e),Y=r(e,"P",{});var Rt=i(Y);xs=l(Rt,"For example, load the "),ge=r(Rt,"A",{href:!0,rel:!0});var yo=i(ge);Ds=l(yo,"Food-101"),yo.forEach(t),Is=l(Rt," dataset and take a look:"),Rt.forEach(t),Qa=f(e),_(_e.$$.fragment,e),Va=f(e),P=r(e,"P",{});var pe=i(P);qs=l(pe,"The "),Ge=r(pe,"A",{href:!0});var Eo=i(Ge);Cs=l(Eo,"Image"),Eo.forEach(t),Ps=l(pe," feature automatically decodes the data from the "),ga=r(pe,"CODE",{});var jo=i(ga);As=l(jo,"image"),jo.forEach(t),Ts=l(pe," column to return an image object. Now try and call the "),_a=r(pe,"CODE",{});var bo=i(_a);Fs=l(bo,"image"),bo.forEach(t),Ls=l(pe," column to see what the image is:"),pe.forEach(t),Wa=f(e),_(ve.$$.fragment,e),Xa=f(e),Ye=r(e,"P",{});var ko=i(Ye);Me=r(ko,"IMG",{src:!0,alt:!0}),ko.forEach(t),Za=f(e),T=r(e,"P",{});var na=i(T);Os=l(na,"To load an image from its path, use the "),He=r(na,"A",{href:!0});var xo=i(He);zs=l(xo,"Dataset.cast_column()"),xo.forEach(t),Bs=l(na," method. The "),Ke=r(na,"A",{href:!0});var Do=i(Ke);Ns=l(Do,"Image"),Do.forEach(t),Js=l(na," feature will decode the data at the path to return an image object:"),na.forEach(t),et=f(e),_($e.$$.fragment,e),at=f(e),F=r(e,"P",{});var ia=i(F);Ss=l(ia,"You can also access the path and bytes of an image file by setting "),va=r(ia,"CODE",{});var Io=i(va);Rs=l(Io,"decode=False"),Io.forEach(t),Us=l(ia," when you load a dataset. In this case, you will need to cast the "),$a=r(ia,"CODE",{});var qo=i($a);Gs=l(qo,"image"),qo.forEach(t),Ys=l(ia," column:"),ia.forEach(t),tt=f(e),_(we.$$.fragment,e),st=f(e),N=r(e,"H2",{class:!0});var Ut=i(N);M=r(Ut,"A",{id:!0,class:!0,href:!0});var Co=i(M);wa=r(Co,"SPAN",{});var Po=i(wa);_(ye.$$.fragment,Po),Po.forEach(t),Co.forEach(t),Ms=f(Ut),ya=r(Ut,"SPAN",{});var Ao=i(ya);Hs=l(Ao,"ImageFolder"),Ao.forEach(t),Ut.forEach(t),lt=f(e),H=r(e,"P",{});var Gt=i(H);Ks=l(Gt,"You can also load your image dataset with a "),Ea=r(Gt,"CODE",{});var To=i(Ea);Qs=l(To,"ImageFolder"),To.forEach(t),Vs=l(Gt," dataset builder without writing a custom dataloader. Your image dataset structure should look like this:"),Gt.forEach(t),ot=f(e),_(Ee.$$.fragment,e),rt=f(e),L=r(e,"P",{});var pa=i(L);Ws=l(pa,"Then load your dataset by specifying "),ja=r(pa,"CODE",{});var Fo=i(ja);Xs=l(Fo,"imagefolder"),Fo.forEach(t),Zs=l(pa," and the directory of your dataset in "),ba=r(pa,"CODE",{});var Lo=i(ba);el=l(Lo,"data_dir"),Lo.forEach(t),al=l(pa,":"),pa.forEach(t),nt=f(e),_(je.$$.fragment,e),it=f(e),K=r(e,"P",{});var Yt=i(K);tl=l(Yt,"Load remote datasets from their URLs with the "),ka=r(Yt,"CODE",{});var Oo=i(ka);sl=l(Oo,"data_files"),Oo.forEach(t),ll=l(Yt," parameter:"),Yt.forEach(t),pt=f(e),_(be.$$.fragment,e),mt=f(e),J=r(e,"P",{});var Ra=i(J);xa=r(Ra,"CODE",{});var zo=i(xa);ol=l(zo,"ImageFolder"),zo.forEach(t),rl=l(Ra," will create a "),Da=r(Ra,"CODE",{});var Bo=i(Da);nl=l(Bo,"label"),Bo.forEach(t),il=l(Ra," column, and the label name is based on the directory name."),Ra.forEach(t),ft=f(e),_(Q.$$.fragment,e),ct=f(e),S=r(e,"H2",{class:!0});var Mt=i(S);V=r(Mt,"A",{id:!0,class:!0,href:!0});var No=i(V);Ia=r(No,"SPAN",{});var Jo=i(Ia);_(ke.$$.fragment,Jo),Jo.forEach(t),No.forEach(t),pl=f(Mt),qa=r(Mt,"SPAN",{});var So=i(qa);ml=l(So,"Map"),So.forEach(t),Mt.forEach(t),dt=f(e),xe=r(e,"P",{});var ao=i(xe);Qe=r(ao,"A",{href:!0});var Ro=i(Qe);fl=l(Ro,"Dataset.map()"),Ro.forEach(t),cl=l(ao," can apply transforms over an entire dataset and it also generates a cache file."),ao.forEach(t),ht=f(e),W=r(e,"P",{});var Ht=i(W);dl=l(Ht,"Create a simple "),De=r(Ht,"A",{href:!0,rel:!0});var Uo=i(De);Ca=r(Uo,"CODE",{});var Go=i(Ca);hl=l(Go,"Resize"),Go.forEach(t),Uo.forEach(t),ul=l(Ht," function:"),Ht.forEach(t),ut=f(e),_(Ie.$$.fragment,e),gt=f(e),k=r(e,"P",{});var O=i(k);gl=l(O,"Now "),Ve=r(O,"A",{href:!0});var Yo=i(Ve);_l=l(Yo,"Dataset.map()"),Yo.forEach(t),vl=l(O," the function over the entire dataset and set "),Pa=r(O,"CODE",{});var Mo=i(Pa);$l=l(Mo,"batched=True"),Mo.forEach(t),wl=l(O,". The transform returns "),Aa=r(O,"CODE",{});var Ho=i(Aa);yl=l(Ho,"pixel_values"),Ho.forEach(t),El=l(O," as a cacheable "),Ta=r(O,"CODE",{});var Ko=i(Ta);jl=l(Ko,"PIL.Image"),Ko.forEach(t),bl=l(O," object:"),O.forEach(t),_t=f(e),_(qe.$$.fragment,e),vt=f(e),X=r(e,"P",{});var Kt=i(X);kl=l(Kt,"This saves time because you don\u2019t have to execute the same transform twice. It is best to use "),We=r(Kt,"A",{href:!0});var Qo=i(We);xl=l(Qo,"Dataset.map()"),Qo.forEach(t),Dl=l(Kt," for operations you only run once per training - like resizing an image - instead of using it for operations executed for each epoch, like data augmentations."),Kt.forEach(t),$t=f(e),Ce=r(e,"P",{});var to=i(Ce);Xe=r(to,"A",{href:!0});var Vo=i(Xe);Il=l(Vo,"Dataset.map()"),Vo.forEach(t),ql=l(to," takes up some memory, but you can reduce its memory requirements with the following parameters:"),to.forEach(t),wt=f(e),Z=r(e,"UL",{});var Qt=i(Z);Ze=r(Qt,"LI",{});var so=i(Ze);ea=r(so,"A",{href:!0});var Wo=i(ea);Fa=r(Wo,"CODE",{});var Xo=i(Fa);Cl=l(Xo,"batch_size"),Xo.forEach(t),Wo.forEach(t),Pl=l(so," determines the number of examples that are processed in one call to the transform function."),so.forEach(t),Al=f(Qt),aa=r(Qt,"LI",{});var lo=i(aa);ta=r(lo,"A",{href:!0});var Zo=i(ta);La=r(Zo,"CODE",{});var er=i(La);Tl=l(er,"writer_batch_size"),er.forEach(t),Zo.forEach(t),Fl=l(lo," determines the number of processed examples that are kept in memory before they are stored away."),lo.forEach(t),Qt.forEach(t),yt=f(e),ee=r(e,"P",{});var Vt=i(ee);Ll=l(Vt,"Both parameter values default to 1000, which can be expensive if you are storing images. Lower the value to use less memory when calling "),sa=r(Vt,"A",{href:!0});var ar=i(sa);Ol=l(ar,"Dataset.map()"),ar.forEach(t),zl=l(Vt,"."),Vt.forEach(t),Et=f(e),R=r(e,"H2",{class:!0});var Wt=i(R);ae=r(Wt,"A",{id:!0,class:!0,href:!0});var tr=i(ae);Oa=r(tr,"SPAN",{});var sr=i(Oa);_(Pe.$$.fragment,sr),sr.forEach(t),tr.forEach(t),Bl=f(Wt),za=r(Wt,"SPAN",{});var lr=i(za);Nl=l(lr,"Data augmentation"),lr.forEach(t),Wt.forEach(t),jt=f(e),te=r(e,"P",{});var Xt=i(te);Jl=l(Xt,"Adding data augmentations to a dataset is common to prevent overfitting and achieve better performance. You can use any library or package you want to apply the augmentations. This guide will use the transforms from "),Ae=r(Xt,"A",{href:!0,rel:!0});var or=i(Ae);Sl=l(or,"torchvision"),or.forEach(t),Rl=l(Xt,"."),Xt.forEach(t),bt=f(e),_(se.$$.fragment,e),kt=f(e),le=r(e,"P",{});var Zt=i(le);Ul=l(Zt,"Add the "),Te=r(Zt,"A",{href:!0,rel:!0});var rr=i(Te);Ba=r(rr,"CODE",{});var nr=i(Ba);Gl=l(nr,"ColorJitter"),nr.forEach(t),rr.forEach(t),Yl=l(Zt," transform to change the color properties of the image randomly:"),Zt.forEach(t),xt=f(e),_(Fe.$$.fragment,e),Dt=f(e),oe=r(e,"P",{});var es=i(oe);Ml=l(es,"Create a function to apply the "),Na=r(es,"CODE",{});var ir=i(Na);Hl=l(ir,"ColorJitter"),ir.forEach(t),Kl=l(es," transform to an image:"),es.forEach(t),It=f(e),_(Le.$$.fragment,e),qt=f(e),re=r(e,"P",{});var as=i(re);Ql=l(as,"Then you can use the "),la=r(as,"A",{href:!0});var pr=i(la);Vl=l(pr,"Dataset.set_transform()"),pr.forEach(t),Wl=l(as," function to apply the transform on-the-fly to consume less disk space. Use this function if you only need to access the examples once:"),as.forEach(t),Ct=f(e),_(Oe.$$.fragment,e),Pt=f(e),ne=r(e,"P",{});var ts=i(ne);Xl=l(ts,"Now visualize the results of the "),Ja=r(ts,"CODE",{});var mr=i(Ja);Zl=l(mr,"ColorJitter"),mr.forEach(t),eo=l(ts," transform:"),ts.forEach(t),At=f(e),_(ze.$$.fragment,e),Tt=f(e),oa=r(e,"P",{});var fr=i(oa);ra=r(fr,"IMG",{src:!0,alt:!0}),fr.forEach(t),this.h()},h(){c(d,"name","hf:doc:metadata"),c(d,"content",JSON.stringify(yr)),c(E,"id","process-image-data"),c(E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E,"href","#process-image-data"),c(h,"class","relative group"),c(Je,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Image"),c(Se,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(Re,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(U,"id","image-datasets"),c(U,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U,"href","#image-datasets"),c(B,"class","relative group"),c(ge,"href","https://huggingface.co/datasets/food101"),c(ge,"rel","nofollow"),c(Ge,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Image"),cr(Me.src,oo="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_beignet.png")||c(Me,"src",oo),c(Me,"alt","image_process_beignet"),c(He,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.cast_column"),c(Ke,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Image"),c(M,"id","imagefolder"),c(M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M,"href","#imagefolder"),c(N,"class","relative group"),c(V,"id","map"),c(V,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V,"href","#map"),c(S,"class","relative group"),c(Qe,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(De,"href","https://pytorch.org/vision/stable/generated/torchvision.transforms.Resize.html"),c(De,"rel","nofollow"),c(Ve,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(We,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(Xe,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(ea,"href","./package_reference/main_classes#datasets.DatasetDict.map.batch_size"),c(ta,"href","./package_reference/main_classes#datasets.DatasetDict.map.writer_batch_size"),c(sa,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.map"),c(ae,"id","data-augmentation"),c(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ae,"href","#data-augmentation"),c(R,"class","relative group"),c(Ae,"href","https://pytorch.org/vision/stable/transforms.html"),c(Ae,"rel","nofollow"),c(Te,"href","https://pytorch.org/vision/stable/transforms.html#torchvision.transforms.ColorJitter"),c(Te,"rel","nofollow"),c(la,"href","/docs/datasets/pr_3988/en/package_reference/main_classes#datasets.Dataset.set_transform"),cr(ra.src,ro="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/image_process_jitter.png")||c(ra,"src",ro),c(ra,"alt","image_process_jitter")},m(e,n){a(document.head,d),p(e,j,n),p(e,h,n),a(h,E),a(E,x),v(u,x,null),a(h,b),a(h,q),a(q,z),p(e,D,n),p(e,A,n),a(A,Ne),a(A,Je),a(Je,ss),a(A,ls),p(e,Ga,n),p(e,C,n),a(C,ma),a(ma,os),a(C,rs),a(C,fe),a(fe,ns),a(fe,fa),a(fa,is),a(fe,ps),a(C,ms),a(C,ce),a(ce,fs),a(ce,Se),a(Se,cs),a(ce,ds),a(C,hs),a(C,de),a(de,us),a(de,Re),a(Re,gs),a(de,_s),p(e,Ya,n),p(e,B,n),a(B,U),a(U,ca),v(he,ca,null),a(B,vs),a(B,da),a(da,$s),p(e,Ma,n),p(e,Ue,n),a(Ue,ws),p(e,Ha,n),p(e,G,n),a(G,ue),a(ue,ys),a(ue,ha),a(ha,Es),a(ue,js),a(G,bs),a(G,ua),a(ua,ks),p(e,Ka,n),p(e,Y,n),a(Y,xs),a(Y,ge),a(ge,Ds),a(Y,Is),p(e,Qa,n),v(_e,e,n),p(e,Va,n),p(e,P,n),a(P,qs),a(P,Ge),a(Ge,Cs),a(P,Ps),a(P,ga),a(ga,As),a(P,Ts),a(P,_a),a(_a,Fs),a(P,Ls),p(e,Wa,n),v(ve,e,n),p(e,Xa,n),p(e,Ye,n),a(Ye,Me),p(e,Za,n),p(e,T,n),a(T,Os),a(T,He),a(He,zs),a(T,Bs),a(T,Ke),a(Ke,Ns),a(T,Js),p(e,et,n),v($e,e,n),p(e,at,n),p(e,F,n),a(F,Ss),a(F,va),a(va,Rs),a(F,Us),a(F,$a),a($a,Gs),a(F,Ys),p(e,tt,n),v(we,e,n),p(e,st,n),p(e,N,n),a(N,M),a(M,wa),v(ye,wa,null),a(N,Ms),a(N,ya),a(ya,Hs),p(e,lt,n),p(e,H,n),a(H,Ks),a(H,Ea),a(Ea,Qs),a(H,Vs),p(e,ot,n),v(Ee,e,n),p(e,rt,n),p(e,L,n),a(L,Ws),a(L,ja),a(ja,Xs),a(L,Zs),a(L,ba),a(ba,el),a(L,al),p(e,nt,n),v(je,e,n),p(e,it,n),p(e,K,n),a(K,tl),a(K,ka),a(ka,sl),a(K,ll),p(e,pt,n),v(be,e,n),p(e,mt,n),p(e,J,n),a(J,xa),a(xa,ol),a(J,rl),a(J,Da),a(Da,nl),a(J,il),p(e,ft,n),v(Q,e,n),p(e,ct,n),p(e,S,n),a(S,V),a(V,Ia),v(ke,Ia,null),a(S,pl),a(S,qa),a(qa,ml),p(e,dt,n),p(e,xe,n),a(xe,Qe),a(Qe,fl),a(xe,cl),p(e,ht,n),p(e,W,n),a(W,dl),a(W,De),a(De,Ca),a(Ca,hl),a(W,ul),p(e,ut,n),v(Ie,e,n),p(e,gt,n),p(e,k,n),a(k,gl),a(k,Ve),a(Ve,_l),a(k,vl),a(k,Pa),a(Pa,$l),a(k,wl),a(k,Aa),a(Aa,yl),a(k,El),a(k,Ta),a(Ta,jl),a(k,bl),p(e,_t,n),v(qe,e,n),p(e,vt,n),p(e,X,n),a(X,kl),a(X,We),a(We,xl),a(X,Dl),p(e,$t,n),p(e,Ce,n),a(Ce,Xe),a(Xe,Il),a(Ce,ql),p(e,wt,n),p(e,Z,n),a(Z,Ze),a(Ze,ea),a(ea,Fa),a(Fa,Cl),a(Ze,Pl),a(Z,Al),a(Z,aa),a(aa,ta),a(ta,La),a(La,Tl),a(aa,Fl),p(e,yt,n),p(e,ee,n),a(ee,Ll),a(ee,sa),a(sa,Ol),a(ee,zl),p(e,Et,n),p(e,R,n),a(R,ae),a(ae,Oa),v(Pe,Oa,null),a(R,Bl),a(R,za),a(za,Nl),p(e,jt,n),p(e,te,n),a(te,Jl),a(te,Ae),a(Ae,Sl),a(te,Rl),p(e,bt,n),v(se,e,n),p(e,kt,n),p(e,le,n),a(le,Ul),a(le,Te),a(Te,Ba),a(Ba,Gl),a(le,Yl),p(e,xt,n),v(Fe,e,n),p(e,Dt,n),p(e,oe,n),a(oe,Ml),a(oe,Na),a(Na,Hl),a(oe,Kl),p(e,It,n),v(Le,e,n),p(e,qt,n),p(e,re,n),a(re,Ql),a(re,la),a(la,Vl),a(re,Wl),p(e,Ct,n),v(Oe,e,n),p(e,Pt,n),p(e,ne,n),a(ne,Xl),a(ne,Ja),a(Ja,Zl),a(ne,eo),p(e,At,n),v(ze,e,n),p(e,Tt,n),p(e,oa,n),a(oa,ra),Ft=!0},p(e,[n]){const Be={};n&2&&(Be.$$scope={dirty:n,ctx:e}),Q.$set(Be);const Sa={};n&2&&(Sa.$$scope={dirty:n,ctx:e}),se.$set(Sa)},i(e){Ft||($(u.$$.fragment,e),$(he.$$.fragment,e),$(_e.$$.fragment,e),$(ve.$$.fragment,e),$($e.$$.fragment,e),$(we.$$.fragment,e),$(ye.$$.fragment,e),$(Ee.$$.fragment,e),$(je.$$.fragment,e),$(be.$$.fragment,e),$(Q.$$.fragment,e),$(ke.$$.fragment,e),$(Ie.$$.fragment,e),$(qe.$$.fragment,e),$(Pe.$$.fragment,e),$(se.$$.fragment,e),$(Fe.$$.fragment,e),$(Le.$$.fragment,e),$(Oe.$$.fragment,e),$(ze.$$.fragment,e),Ft=!0)},o(e){w(u.$$.fragment,e),w(he.$$.fragment,e),w(_e.$$.fragment,e),w(ve.$$.fragment,e),w($e.$$.fragment,e),w(we.$$.fragment,e),w(ye.$$.fragment,e),w(Ee.$$.fragment,e),w(je.$$.fragment,e),w(be.$$.fragment,e),w(Q.$$.fragment,e),w(ke.$$.fragment,e),w(Ie.$$.fragment,e),w(qe.$$.fragment,e),w(Pe.$$.fragment,e),w(se.$$.fragment,e),w(Fe.$$.fragment,e),w(Le.$$.fragment,e),w(Oe.$$.fragment,e),w(ze.$$.fragment,e),Ft=!1},d(e){t(d),e&&t(j),e&&t(h),y(u),e&&t(D),e&&t(A),e&&t(Ga),e&&t(C),e&&t(Ya),e&&t(B),y(he),e&&t(Ma),e&&t(Ue),e&&t(Ha),e&&t(G),e&&t(Ka),e&&t(Y),e&&t(Qa),y(_e,e),e&&t(Va),e&&t(P),e&&t(Wa),y(ve,e),e&&t(Xa),e&&t(Ye),e&&t(Za),e&&t(T),e&&t(et),y($e,e),e&&t(at),e&&t(F),e&&t(tt),y(we,e),e&&t(st),e&&t(N),y(ye),e&&t(lt),e&&t(H),e&&t(ot),y(Ee,e),e&&t(rt),e&&t(L),e&&t(nt),y(je,e),e&&t(it),e&&t(K),e&&t(pt),y(be,e),e&&t(mt),e&&t(J),e&&t(ft),y(Q,e),e&&t(ct),e&&t(S),y(ke),e&&t(dt),e&&t(xe),e&&t(ht),e&&t(W),e&&t(ut),y(Ie,e),e&&t(gt),e&&t(k),e&&t(_t),y(qe,e),e&&t(vt),e&&t(X),e&&t($t),e&&t(Ce),e&&t(wt),e&&t(Z),e&&t(yt),e&&t(ee),e&&t(Et),e&&t(R),y(Pe),e&&t(jt),e&&t(te),e&&t(bt),y(se,e),e&&t(kt),e&&t(le),e&&t(xt),y(Fe,e),e&&t(Dt),e&&t(oe),e&&t(It),y(Le,e),e&&t(qt),e&&t(re),e&&t(Ct),y(Oe,e),e&&t(Pt),e&&t(ne),e&&t(At),y(ze,e),e&&t(Tt),e&&t(oa)}}}const yr={local:"process-image-data",sections:[{local:"image-datasets",title:"Image datasets"},{local:"imagefolder",title:"ImageFolder"},{local:"map",title:"Map"},{local:"data-augmentation",title:"Data augmentation"}],title:"Process image data"};function Er(me,d,j){let{fw:h}=d;return me.$$set=E=>{"fw"in E&&j(0,h=E.fw)},[h]}class Dr extends hr{constructor(d){super();ur(this,d,Er,wr,gr,{fw:0})}}export{Dr as default,yr as metadata};
