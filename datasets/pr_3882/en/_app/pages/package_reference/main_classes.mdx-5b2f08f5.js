import{S as pX,i as mX,s as hX,e as a,k as l,w as p,t as r,M as fX,c as s,d as t,m as d,a as n,x as m,h as o,b as c,F as e,g as $,y as h,q as f,o as u,B as g}from"../../chunks/vendor-e67aec41.js";import{T as uX}from"../../chunks/Tip-76459d1c.js";import{D as _}from"../../chunks/Docstring-ebff01a5.js";import{C as Qe}from"../../chunks/CodeBlock-e2bcf023.js";import{I as R}from"../../chunks/IconCopyLink-ffd7f84e.js";function gX(bf){let O,gt,q,ne,ra,ue,Yr,oa,_t,rs,ge;return{c(){O=a("p"),gt=r("A "),q=a("a"),ne=r("datasets.Sequence"),ra=r(` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ue=a("code"),Yr=r("list"),oa=r(` instead of the
`),_t=a("a"),rs=r("datasets.Sequence"),ge=r("."),this.h()},l(de){O=s(de,"P",{});var J=n(O);gt=o(J,"A "),q=s(J,"A",{href:!0});var vt=n(q);ne=o(vt,"datasets.Sequence"),vt.forEach(t),ra=o(J,` with a internal dictionary feature will be automatically converted into a dictionary of
lists. This behavior is implemented to have a compatilbity layer with the TensorFlow Datasets library but may be
un-wanted in some cases. If you don\u2019t want this behavior, you can use a python `),ue=s(J,"CODE",{});var ip=n(ue);Yr=o(ip,"list"),ip.forEach(t),oa=o(J,` instead of the
`),_t=s(J,"A",{href:!0});var os=n(_t);rs=o(os,"datasets.Sequence"),os.forEach(t),ge=o(J,"."),J.forEach(t),this.h()},h(){c(q,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Sequence"),c(_t,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Sequence")},m(de,J){$(de,O,J),e(O,gt),e(O,q),e(q,ne),e(O,ra),e(O,ue),e(ue,Yr),e(O,oa),e(O,_t),e(_t,rs),e(O,ge)},d(de){de&&t(O)}}}function _X(bf){let O,gt,q,ne,ra,ue,Yr,oa,_t,rs,ge,de,J,vt,ip,os,u0,m2,B,Jr,g0,yf,_0,v0,lp,$f,b0,y0,$0,wf,w0,D0,ke,Xr,x0,Zr,E0,Df,k0,I0,N0,xf,T0,P0,Ef,A0,F0,bt,Qr,L0,ia,O0,kf,S0,C0,If,j0,q0,z0,Nf,V0,h2,la,is,Tf,eo,M0,Pf,U0,f2,ls,R0,dp,B0,H0,u2,v,to,G0,Af,K0,W0,yt,ao,Y0,Ff,J0,X0,Lf,Of,Z0,Q0,$t,so,ex,Sf,tx,ax,Cf,jf,sx,nx,ds,no,rx,qf,ox,ix,cs,ro,lx,zf,dx,cx,Ie,oo,px,et,mx,Vf,hx,fx,Mf,ux,gx,cp,_x,vx,bx,io,yx,Uf,$x,wx,Dx,lo,xx,Rf,Ex,kx,Ix,ps,co,Nx,tt,Tx,Bf,Px,Ax,Hf,Fx,Lx,pp,Ox,Sx,Cx,ms,po,jx,Gf,qx,zx,hs,mo,Vx,Kf,Mx,Ux,fs,ho,Rx,Wf,Bx,Hx,us,fo,Gx,uo,Kx,gs,Wx,Yf,Yx,Jx,Xx,Zx,_s,go,Qx,Jf,e8,t8,vs,_o,a8,Xf,s8,n8,wt,vo,r8,Zf,o8,i8,Qf,l8,d8,bs,bo,c8,eu,p8,m8,ys,yo,h8,tu,f8,u8,$s,$o,g8,au,_8,v8,Dt,wo,b8,su,y8,$8,da,w8,mp,D8,x8,nu,E8,k8,I8,ws,Do,N8,ru,T8,P8,Ds,xo,A8,Eo,F8,ou,L8,O8,S8,xs,ko,C8,iu,j8,q8,xt,Io,z8,lu,V8,M8,No,U8,hp,R8,B8,H8,Es,To,G8,ca,K8,du,W8,Y8,cu,J8,X8,Z8,Ne,Po,Q8,_e,e3,pu,t3,a3,mu,s3,n3,hu,r3,o3,fp,i3,l3,d3,ve,c3,fu,p3,m3,uu,h3,f3,gu,u3,g3,_u,_3,v3,b3,vu,y3,$3,ks,Ao,w3,Te,D3,bu,x3,E3,yu,k3,I3,up,N3,T3,gp,P3,A3,Et,Fo,F3,Lo,L3,$u,O3,S3,C3,_p,j3,wu,q3,z3,Pe,Oo,V3,at,M3,Du,U3,R3,xu,B3,H3,Eu,G3,K3,W3,So,Y3,vp,J3,X3,Z3,pa,Q3,bp,e4,t4,ku,a4,s4,n4,Ae,Co,r4,ma,o4,Iu,i4,l4,Nu,d4,c4,p4,ha,m4,yp,h4,f4,$p,u4,g4,_4,fa,v4,wp,b4,y4,Tu,$4,w4,D4,Is,jo,x4,Pu,E4,k4,kt,qo,I4,Au,N4,T4,Fu,P4,A4,Fe,zo,F4,Lu,L4,O4,Vo,S4,Ou,C4,j4,q4,ua,Su,z4,V4,Cu,M4,U4,re,R4,ju,B4,H4,qu,G4,K4,zu,W4,Y4,Vu,J4,X4,Mu,Z4,Q4,eE,Ns,Mo,tE,Uu,aE,sE,Ts,Uo,nE,Ru,rE,oE,It,Ro,iE,Bu,lE,dE,Hu,cE,pE,Nt,Bo,mE,Gu,hE,fE,Ku,uE,gE,Tt,Ho,_E,z,vE,Wu,bE,yE,Yu,$E,wE,Ju,DE,xE,Xu,EE,kE,Zu,IE,NE,Qu,TE,PE,eg,AE,FE,LE,Go,OE,tg,SE,CE,jE,ce,Ko,qE,ga,zE,ag,VE,ME,sg,UE,RE,BE,ng,HE,GE,Wo,KE,rg,WE,YE,JE,og,XE,ZE,Ps,Yo,QE,ig,ek,tk,pe,Jo,ak,lg,sk,nk,dg,rk,ok,Dp,cg,ik,lk,dk,pg,mg,hg,xp,ck,g2,pk,As,Xo,mk,_a,hk,Ep,fk,uk,fg,gk,_k,vk,Fs,Zo,bk,st,yk,ug,$k,wk,kp,Dk,xk,gg,Ek,kk,Ik,Ls,Qo,Nk,_g,Tk,Pk,Os,ei,Ak,vg,Fk,Lk,Ss,ti,Ok,ai,Sk,bg,Ck,jk,qk,Cs,si,zk,yg,Vk,Mk,js,ni,Uk,$g,Rk,Bk,qs,ri,Hk,wg,Gk,Kk,T,oi,Wk,va,Yk,Dg,Jk,Xk,xg,Zk,Qk,e7,Eg,Ip,t7,ii,a7,s7,kg,n7,r7,Np,Ig,o7,i7,l7,zs,Vs,Ng,li,d7,Tg,c7,p7,Pg,m7,h7,Ms,Us,Ag,di,f7,Fg,u7,g7,Lg,_7,v7,Og,b7,y7,Rs,Bs,Sg,ci,$7,Cg,w7,D7,jg,x7,E7,Hs,Gs,qg,pi,k7,zg,I7,N7,Tp,T7,_2,P7,Pt,mi,A7,nt,F7,Vg,L7,O7,Mg,S7,C7,Ug,j7,q7,z7,Rg,Pp,V7,hi,M7,U7,Ks,fi,R7,Bg,B7,H7,At,ui,G7,Hg,K7,W7,gi,Y7,Gg,J7,X7,Z7,X,_i,Q7,Kg,e5,t5,Wg,a5,s5,vi,n5,Yg,r5,o5,bi,Jg,i5,l5,v2,d5,Le,yi,c5,Xg,p5,m5,Zg,h5,f5,$i,u5,Ws,wi,g5,Qg,_5,v5,Ys,Di,b5,e_,y5,$5,Js,xi,w5,t_,D5,x5,Xs,Ei,E5,a_,k5,I5,Zs,ki,N5,s_,T5,P5,Qs,Ii,A5,n_,F5,L5,en,Ni,O5,r_,S5,C5,tn,Ti,j5,Ap,Fp,q5,z5,V5,an,Pi,M5,Lp,Op,U5,R5,B5,Sp,Ai,H5,Cp,Fi,G5,jp,Li,K5,qp,Oi,W5,zp,Si,Y5,Vp,Ci,J5,Mp,ji,X5,Up,qi,Z5,Rp,zi,Q5,Bp,Vi,eI,Hp,Mi,tI,Gp,Ui,aI,Kp,Ri,sI,sn,Bi,nI,o_,rI,oI,nn,Hi,iI,i_,lI,dI,rn,Gi,cI,l_,pI,mI,on,Ki,hI,d_,fI,uI,Ft,Wi,gI,ba,_I,Wp,vI,bI,Yp,yI,$I,wI,ya,DI,c_,xI,EI,p_,kI,II,NI,C,Yi,TI,Ji,PI,m_,AI,FI,LI,h_,OI,SI,Jp,f_,CI,jI,qI,ln,dn,u_,Xi,zI,g_,VI,MI,__,UI,RI,cn,pn,v_,Zi,BI,b_,HI,GI,Xp,KI,b2,y2,$a,Qi,WI,wa,YI,Zp,JI,XI,Qp,ZI,QI,$2,V,el,e6,y_,t6,a6,Da,s6,em,n6,r6,tm,o6,i6,l6,be,d6,$_,c6,p6,w_,m6,h6,D_,f6,u6,x_,g6,_6,v6,E_,b6,y6,k_,$6,w6,tl,w2,oe,al,D6,I_,x6,E6,N_,k6,I6,T_,N6,T6,ye,P_,P6,A6,A_,F6,L6,F_,O6,S6,sl,C6,am,j6,q6,z6,rt,V6,sm,M6,U6,L_,R6,B6,nm,H6,G6,D2,ie,nl,K6,O_,W6,Y6,S_,J6,X6,C_,Z6,Q6,$e,j_,e9,t9,q_,a9,s9,z_,n9,r9,rl,o9,rm,i9,l9,d9,ot,c9,om,p9,m9,V_,h9,f9,im,u9,g9,x2,xa,ol,_9,M_,v9,E2,Ea,il,b9,U_,y9,k2,ka,mn,R_,ll,$9,B_,w9,I2,hn,D9,H_,x9,E9,N2,w,dl,k9,G_,I9,N9,fn,cl,T9,K_,P9,A9,un,pl,F9,W_,L9,O9,gn,ml,S9,Y_,C9,j9,_n,hl,q9,fl,z9,vn,V9,J_,M9,U9,R9,B9,bn,ul,H9,X_,G9,K9,yn,gl,W9,Z_,Y9,J9,Lt,_l,X9,Q_,Z9,Q9,e1,eN,tN,$n,vl,aN,t1,sN,nN,wn,bl,rN,a1,oN,iN,Dn,yl,lN,s1,dN,cN,Ot,$l,pN,n1,mN,hN,r1,fN,uN,Oe,wl,gN,o1,_N,vN,i1,bN,yN,l1,$N,wN,Se,Dl,DN,xl,xN,d1,EN,kN,IN,we,NN,c1,TN,PN,p1,AN,FN,m1,LN,ON,h1,SN,CN,jN,f1,qN,zN,St,El,VN,kl,MN,u1,UN,RN,BN,lm,HN,g1,GN,KN,xn,Il,WN,Ia,YN,_1,JN,XN,v1,ZN,QN,eT,Ce,Nl,tT,it,aT,b1,sT,nT,y1,rT,oT,$1,iT,lT,dT,Tl,cT,dm,pT,mT,hT,Na,fT,cm,uT,gT,w1,_T,vT,bT,je,Pl,yT,Ta,$T,D1,wT,DT,x1,xT,ET,kT,Pa,IT,pm,NT,TT,mm,PT,AT,FT,Aa,LT,E1,OT,ST,k1,CT,jT,qT,En,Al,zT,I1,VT,MT,Ct,Fl,UT,N1,RT,BT,lt,HT,hm,GT,KT,T1,WT,YT,P1,JT,XT,ZT,kn,Ll,QT,A1,eP,tP,qe,Ol,aP,F1,sP,nP,L1,rP,oP,Fa,iP,fm,lP,dP,O1,cP,pP,mP,ze,Sl,hP,S1,fP,uP,La,gP,um,_P,vP,C1,bP,yP,$P,Cl,j1,wP,DP,q1,xP,EP,In,jl,kP,ql,IP,z1,NP,TP,PP,Z,zl,AP,Oa,FP,V1,LP,OP,M1,SP,CP,jP,U1,qP,zP,R1,VP,MP,gm,B1,UP,RP,BP,H1,G1,K1,_m,HP,T2,GP,Nn,Vl,KP,Sa,WP,vm,YP,JP,W1,XP,ZP,QP,Tn,Ml,eA,dt,tA,Y1,aA,sA,bm,nA,rA,J1,oA,iA,lA,Pn,Ul,dA,X1,cA,pA,An,Rl,mA,Z1,hA,fA,Fn,Bl,uA,Q1,gA,_A,Ln,Hl,vA,ev,bA,yA,jt,Gl,$A,Ca,wA,ym,DA,xA,$m,EA,kA,IA,ja,NA,tv,TA,PA,av,AA,FA,P2,wm,A2,qa,On,sv,Kl,LA,nv,OA,F2,Sn,SA,Dm,CA,jA,L2,x,Wl,qA,rv,zA,VA,Cn,Yl,MA,ov,UA,RA,jn,Jl,BA,iv,HA,GA,xm,Xl,KA,Ve,Zl,WA,lv,YA,JA,Ql,XA,dv,ZA,QA,eF,za,cv,tF,aF,pv,sF,nF,le,rF,mv,oF,iF,hv,lF,dF,fv,cF,pF,uv,mF,hF,gv,fF,uF,gF,qn,ed,_F,_v,vF,bF,me,td,yF,vv,$F,wF,bv,DF,xF,ad,EF,yv,kF,IF,NF,Va,TF,Em,PF,AF,km,FF,LF,OF,zn,sd,SF,nd,CF,$v,jF,qF,zF,Vn,rd,VF,od,MF,wv,UF,RF,BF,Mn,id,HF,Im,Nm,GF,KF,WF,Un,ld,YF,Tm,Pm,JF,XF,ZF,Am,dd,QF,Fm,cd,eL,Lm,pd,tL,Om,md,aL,Sm,hd,sL,Cm,fd,nL,jm,ud,rL,qm,gd,oL,zm,_d,iL,Vm,vd,lL,Mm,bd,dL,Um,yd,cL,Rm,$d,O2,Ma,Rn,Dv,wd,pL,xv,mL,S2,Bn,hL,Ev,fL,uL,C2,Dd,xd,j2,Ua,Hn,kv,Ed,gL,Iv,_L,q2,N,kd,vL,Nv,bL,yL,Id,$L,Tv,wL,DL,xL,Bm,Pv,EL,kL,IL,M,Av,qt,NL,Hm,TL,PL,Fv,AL,FL,Lv,LL,OL,Ov,Nd,SL,Gm,CL,jL,qL,Sv,Td,zL,Cv,VL,ML,UL,Pd,De,RL,jv,BL,HL,Km,GL,KL,qv,WL,YL,Wm,JL,XL,ZL,Gn,QL,zv,xe,eO,Ym,tO,aO,Jm,sO,nO,Xm,rO,oO,Zm,iO,lO,dO,Vv,Ad,cO,Qm,pO,mO,hO,Mv,ct,fO,eh,uO,gO,Uv,_O,vO,Rv,bO,yO,$O,Bv,Kn,th,wO,DO,ah,xO,EO,kO,Wn,Fd,IO,Hv,NO,TO,Yn,Ld,PO,Gv,AO,FO,Jn,Od,LO,Kv,OO,SO,Xn,Sd,CO,Wv,jO,qO,Zn,Cd,zO,Yv,VO,MO,Qn,jd,UO,Jv,RO,BO,zt,qd,HO,Xv,GO,KO,Zv,WO,YO,er,zd,JO,Qv,XO,ZO,Q,Vd,QO,eb,eS,tS,tb,aS,sS,pt,nS,sh,rS,oS,nh,iS,lS,rh,dS,cS,pS,ab,mS,hS,Md,fS,he,Ud,uS,sb,gS,_S,nb,vS,bS,rb,yS,$S,Rd,z2,Ra,Bd,wS,ob,DS,V2,H,Hd,xS,ib,ES,kS,Gd,IS,lb,NS,TS,PS,Ba,oh,db,AS,FS,LS,ih,cb,OS,SS,CS,lh,pb,jS,qS,zS,tr,Kd,VS,mb,MS,US,ar,Wd,RS,hb,BS,M2,mt,Yd,HS,fb,GS,KS,ub,WS,U2,G,Jd,YS,dh,gb,JS,XS,ZS,_b,QS,eC,Xd,tC,vb,aC,sC,nC,bb,rC,oC,Zd,R2,K,Qd,iC,ch,yb,lC,dC,cC,$b,pC,mC,wb,hC,fC,Db,uC,gC,ec,B2,tc,ac,H2,sc,nc,G2,rc,oc,K2,ic,lc,W2,F,dc,_C,xb,vC,bC,Eb,yC,$C,cc,kb,pc,wC,Ib,DC,xC,EC,mc,hc,kC,Nb,IC,NC,TC,fc,Tb,PC,AC,Pb,FC,LC,Ab,OC,SC,Fb,uc,gc,CC,Lb,jC,qC,zC,Ha,Ob,VC,MC,Sb,UC,RC,Cb,BC,HC,jb,GC,KC,Vt,_c,WC,qb,YC,JC,ht,zb,XC,ZC,Vb,QC,ej,Mb,tj,aj,Ub,sj,nj,sr,vc,rj,Rb,oj,ij,nr,bc,lj,Bb,dj,cj,rr,yc,pj,Hb,mj,Y2,L,$c,hj,Gb,fj,uj,Kb,gj,_j,wc,Wb,Dc,vj,Yb,bj,yj,$j,xc,Ec,wj,Jb,Dj,xj,Ej,kc,Xb,kj,Ij,Zb,Nj,Tj,Qb,Pj,Aj,Ic,Nc,Fj,ey,Lj,Oj,Sj,Tc,Cj,ty,jj,qj,zj,Mt,Pc,Vj,ay,Mj,Uj,Ee,sy,Rj,Bj,ny,Hj,Gj,ry,Kj,Wj,oy,Yj,Jj,iy,Xj,Zj,or,Ac,Qj,ly,eq,tq,ir,Fc,aq,dy,sq,nq,lr,Lc,rq,cy,oq,J2,Ga,dr,py,Oc,iq,my,lq,X2,W,Sc,dq,hy,cq,pq,ph,fy,mq,hq,fq,uy,uq,gq,cr,Cc,_q,jc,vq,gy,bq,yq,$q,pr,qc,wq,Ka,Dq,_y,xq,Eq,vy,kq,Iq,Z2,Wa,mr,by,zc,Nq,yy,Tq,Q2,Ut,Pq,$y,Aq,Fq,mh,Lq,Oq,e$,Y,Vc,Sq,wy,Cq,jq,hr,Mc,qq,Dy,zq,Vq,fr,Uc,Mq,xy,Uq,Rq,Rt,Rc,Bq,Ey,Hq,Gq,ky,Kq,Wq,ur,Bc,Yq,Iy,Jq,t$,Ya,gr,Ny,Hc,Xq,Ty,Zq,a$,k,Gc,Qq,Py,ez,tz,Ay,az,sz,ft,nz,Fy,rz,oz,Ly,iz,lz,Oy,dz,cz,pz,Sy,mz,hz,Cy,fz,uz,jy,gz,_z,Me,qy,vz,bz,Kc,yz,$z,zy,wz,Dz,Wc,xz,Ez,kz,Vy,Iz,Nz,My,Tz,Pz,Yc,Az,Ja,Fz,Uy,Lz,Oz,Ry,Sz,Cz,jz,Jc,qz,ut,zz,By,Vz,Mz,Hy,Uz,Rz,Gy,Bz,Hz,Gz,Xc,Kz,Xa,Wz,Ky,Yz,Jz,Wy,Xz,Zz,Qz,Zc,eV,Yy,tV,aV,Qc,sV,_r,vr,Jy,ep,nV,Xy,rV,oV,U,iV,Zy,lV,dV,Qy,cV,pV,e2,mV,hV,t2,fV,uV,a2,gV,_V,s2,vV,bV,n2,yV,$V,s$,Za,tp,wV,Qa,DV,r2,xV,EV,o2,kV,IV,n$,es,ap,NV,i2,TV,r$,ts,br,l2,sp,PV,d2,AV,o$,as,np,FV,c2,LV,i$;return ue=new R({}),vt=new R({}),Jr=new _({props:{name:"class datasets.DatasetInfo",anchor:"datasets.DatasetInfo",parameters:[{name:"description",val:": str = <factory>"},{name:"citation",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"post_processed",val:": typing.Optional[datasets.info.PostProcessedInfo] = None"},{name:"supervised_keys",val:": typing.Optional[datasets.info.SupervisedKeysData] = None"},{name:"task_templates",val:": typing.Optional[typing.List[datasets.tasks.base.TaskTemplate]] = None"},{name:"builder_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"version",val:": typing.Union[str, datasets.utils.version.Version, NoneType] = None"},{name:"splits",val:": typing.Optional[dict] = None"},{name:"download_checksums",val:": typing.Optional[dict] = None"},{name:"download_size",val:": typing.Optional[int] = None"},{name:"post_processing_size",val:": typing.Optional[int] = None"},{name:"dataset_size",val:": typing.Optional[int] = None"},{name:"size_in_bytes",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L87",parametersDescription:[{anchor:"datasets.DatasetInfo.description",description:"<strong>description</strong> (str) &#x2014; A description of the dataset.",name:"description"},{anchor:"datasets.DatasetInfo.citation",description:"<strong>citation</strong> (str) &#x2014; A BibTeX citation of the dataset.",name:"citation"},{anchor:"datasets.DatasetInfo.homepage",description:"<strong>homepage</strong> (str) &#x2014; A URL to the official homepage for the dataset.",name:"homepage"},{anchor:"datasets.DatasetInfo.license",description:"<strong>license</strong> (str) &#x2014; The dataset&#x2019;s license. It can be the name of the license or a paragraph containing the terms of the license.",name:"license"},{anchor:"datasets.DatasetInfo.features",description:"<strong>features</strong> (Features, optional) &#x2014; The features used to specify the dataset&#x2019;s column types.",name:"features"},{anchor:"datasets.DatasetInfo.post_processed",description:"<strong>post_processed</strong> (PostProcessedInfo, optional) &#x2014; Information regarding the resources of a possible post-processing of a dataset. For example, it can contain the information of an index.",name:"post_processed"},{anchor:"datasets.DatasetInfo.supervised_keys",description:"<strong>supervised_keys</strong> (SupervisedKeysData, optional) &#x2014; Specifies the input feature and the label for supervised learning if applicable for the dataset (legacy from TFDS).",name:"supervised_keys"},{anchor:"datasets.DatasetInfo.builder_name",description:'<strong>builder_name</strong> (str, optional) &#x2014; The name of the <a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.GeneratorBasedBuilder">GeneratorBasedBuilder</a> subclass used to create the dataset. Usually matched to the corresponding script name. It is also the snake_case version of the dataset builder class name.',name:"builder_name"},{anchor:"datasets.DatasetInfo.config_name",description:'<strong>config_name</strong> (str, optional) &#x2014; The name of the configuration derived from <a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a>',name:"config_name"},{anchor:"datasets.DatasetInfo.version",description:"<strong>version</strong> (str or Version, optional) &#x2014; The version of the dataset.",name:"version"},{anchor:"datasets.DatasetInfo.splits",description:"<strong>splits</strong> (dict, optional) &#x2014; The mapping between split name and metadata.",name:"splits"},{anchor:"datasets.DatasetInfo.download_checksums",description:"<strong>download_checksums</strong> (dict, optional) &#x2014; The mapping between the URL to download the dataset&#x2019;s checksums and corresponding metadata.",name:"download_checksums"},{anchor:"datasets.DatasetInfo.download_size",description:"<strong>download_size</strong> (int, optional) &#x2014; The size of the files to download to generate the dataset, in bytes.",name:"download_size"},{anchor:"datasets.DatasetInfo.post_processing_size",description:"<strong>post_processing_size</strong> (int, optional) &#x2014; Size of the dataset in bytes after post-processing, if any.",name:"post_processing_size"},{anchor:"datasets.DatasetInfo.dataset_size",description:"<strong>dataset_size</strong> (int, optional) &#x2014; The combined size in bytes of the Arrow tables for all splits.",name:"dataset_size"},{anchor:"datasets.DatasetInfo.size_in_bytes",description:"<strong>size_in_bytes</strong> (int, optional) &#x2014; The combined size in bytes of all files associated with the dataset (downloaded files + Arrow files).",name:"size_in_bytes"},{anchor:"datasets.DatasetInfo.task_templates",description:`<strong>task_templates</strong> (List[TaskTemplate], optional) &#x2014; The task templates to prepare the dataset for during training and evaluation. Each template casts the dataset&#x2019;s <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a> to standardized column names and types as detailed in :py:mod:<em>datasets.tasks</em>.
**config_kwargs &#x2014; Keyword arguments to be passed to the <a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.BuilderConfig">BuilderConfig</a> and used in the <a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.DatasetBuilder">DatasetBuilder</a>.`,name:"task_templates"}]}}),Xr=new _({props:{name:"from_directory",anchor:"datasets.DatasetInfo.from_directory",parameters:[{name:"dataset_info_dir",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L231",parametersDescription:[{anchor:"datasets.DatasetInfo.from_directory.dataset_info_dir",description:`<strong>dataset_info_dir</strong> (<code>str</code>) &#x2014; The directory containing the metadata file. This
should be the root directory of a specific dataset version.`,name:"dataset_info_dir"}]}}),Qr=new _({props:{name:"write_to_directory",anchor:"datasets.DatasetInfo.write_to_directory",parameters:[{name:"dataset_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L182"}}),eo=new R({}),to=new _({props:{name:"class datasets.Dataset",anchor:"datasets.Dataset",parameters:[{name:"arrow_table",val:": Table"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_table",val:": typing.Optional[datasets.table.Table] = None"},{name:"fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L625"}}),ao=new _({props:{name:"add_column",anchor:"datasets.Dataset.add_column",parameters:[{name:"name",val:": str"},{name:"column",val:": typing.Union[list, <built-in function array>]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3575",parametersDescription:[{anchor:"datasets.Dataset.add_column.name",description:"<strong>name</strong> (str) &#x2014; Column name.",name:"name"},{anchor:"datasets.Dataset.add_column.column",description:"<strong>column</strong> (list or np.array) &#x2014; Column data to be added.",name:"column"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),so=new _({props:{name:"add_item",anchor:"datasets.Dataset.add_item",parameters:[{name:"item",val:": dict"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3793",parametersDescription:[{anchor:"datasets.Dataset.add_item.item",description:"<strong>item</strong> (dict) &#x2014; Item data to be added.",name:"item"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),no=new _({props:{name:"from_file",anchor:"datasets.Dataset.from_file",parameters:[{name:"filename",val:": str"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_filename",val:": typing.Optional[str] = None"},{name:"in_memory",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L691",parametersDescription:[{anchor:"datasets.Dataset.from_file.filename",description:"<strong>filename</strong> (<code>str</code>) &#x2014; File name of the dataset.",name:"filename"},{anchor:"datasets.Dataset.from_file.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_file.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_file.indices_filename",description:"<strong>indices_filename</strong> (<code>str</code>, optional) &#x2014; File names of the indices.",name:"indices_filename"},{anchor:"datasets.Dataset.from_file.in_memory",description:"<strong>in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),ro=new _({props:{name:"from_buffer",anchor:"datasets.Dataset.from_buffer",parameters:[{name:"buffer",val:": Buffer"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"indices_buffer",val:": typing.Optional[pyarrow.lib.Buffer] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L726",parametersDescription:[{anchor:"datasets.Dataset.from_buffer.buffer",description:"<strong>buffer</strong> (<code>pyarrow.Buffer</code>) &#x2014; Arrow buffer.",name:"buffer"},{anchor:"datasets.Dataset.from_buffer.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_buffer.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_buffer.indices_buffer",description:"<strong>indices_buffer</strong> (<code>pyarrow.Buffer</code>, optional) &#x2014; Indices Arrow buffer.",name:"indices_buffer"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),oo=new _({props:{name:"from_pandas",anchor:"datasets.Dataset.from_pandas",parameters:[{name:"df",val:": DataFrame"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"preserve_index",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L754",parametersDescription:[{anchor:"datasets.Dataset.from_pandas.df",description:"<strong>df</strong> (<code>pandas.DataFrame</code>) &#x2014; Dataframe that contains the dataset.",name:"df"},{anchor:"datasets.Dataset.from_pandas.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_pandas.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_pandas.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.Dataset.from_pandas.preserve_index",description:`<strong>preserve_index</strong> (<code>bool</code>, optional) &#x2014; Whether to store the index as an additional column in the resulting Dataset.
The default of None will store the index as a column, except for RangeIndex which is stored as metadata only.
Use preserve_index=True to force it to be stored as a column.`,name:"preserve_index"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),co=new _({props:{name:"from_dict",anchor:"datasets.Dataset.from_dict",parameters:[{name:"mapping",val:": dict"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L800",parametersDescription:[{anchor:"datasets.Dataset.from_dict.mapping",description:"<strong>mapping</strong> (<code>Mapping</code>) &#x2014; Mapping of strings to Arrays or Python lists.",name:"mapping"},{anchor:"datasets.Dataset.from_dict.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_dict.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.Dataset.from_dict.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),po=new _({props:{name:"data",anchor:"datasets.Dataset.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1141"}}),mo=new _({props:{name:"cache_files",anchor:"datasets.Dataset.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1146"}}),ho=new _({props:{name:"num_columns",anchor:"datasets.Dataset.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1154"}}),fo=new _({props:{name:"num_rows",anchor:"datasets.Dataset.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1159"}}),go=new _({props:{name:"column_names",anchor:"datasets.Dataset.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1166"}}),_o=new _({props:{name:"shape",anchor:"datasets.Dataset.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1171"}}),vo=new _({props:{name:"unique",anchor:"datasets.Dataset.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1178",parametersDescription:[{anchor:"datasets.Dataset.unique.column",description:'<strong>column</strong> (<code>str</code>) &#x2014; Column name (list all the column names with <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>).',name:"column"}],returnDescription:`
<p>List of unique elements in the given column.</p>
`,returnType:`
<p><code>list</code></p>
`}}),bo=new _({props:{name:"flatten",anchor:"datasets.Dataset.flatten",parameters:[{name:"new_fingerprint",val:""},{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1257",returnDescription:`
<p>A copy of the dataset with flattened columns.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),yo=new _({props:{name:"cast",anchor:"datasets.Dataset.cast",parameters:[{name:"features",val:": Features"},{name:"batch_size",val:": typing.Optional[int] = 10000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 10000"},{name:"num_proc",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1278",parametersDescription:[{anchor:"datasets.Dataset.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"},{anchor:"datasets.Dataset.cast.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to cast.
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to cast.`,name:"batch_size"},{anchor:"datasets.Dataset.cast.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.cast.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.cast.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.cast.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.cast.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"}],returnDescription:`
<p>A copy of the dataset with casted features.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),$o=new _({props:{name:"cast_column",anchor:"datasets.Dataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"},{name:"new_fingerprint",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1337",parametersDescription:[{anchor:"datasets.Dataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.Dataset.cast_column.feature",description:"<strong>feature</strong> (<code>FeatureType</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),wo=new _({props:{name:"remove_columns",anchor:"datasets.Dataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1360",parametersDescription:[{anchor:"datasets.Dataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"},{anchor:"datasets.Dataset.remove_columns.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Do=new _({props:{name:"rename_column",anchor:"datasets.Dataset.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"},{name:"new_fingerprint",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1396",parametersDescription:[{anchor:"datasets.Dataset.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.Dataset.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"},{anchor:"datasets.Dataset.rename_column.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"}],returnDescription:`
<p>A copy of the dataset with a renamed column.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),xo=new _({props:{name:"class_encode_column",anchor:"datasets.Dataset.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1199",parametersDescription:[{anchor:"datasets.Dataset.class_encode_column.column",description:'<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast (list all the column names with <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)',name:"column"},{anchor:"datasets.Dataset.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),ko=new _({props:{name:"__len__",anchor:"datasets.Dataset.__len__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1498"}}),Io=new _({props:{name:"__iter__",anchor:"datasets.Dataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1514"}}),To=new _({props:{name:"formatted_as",anchor:"datasets.Dataset.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1534",parametersDescription:[{anchor:"datasets.Dataset.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in <code>[None, &apos;numpy&apos;, &apos;torch&apos;, &apos;tensorflow&apos;, &apos;pandas&apos;, &apos;arrow&apos;]</code>
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Po=new _({props:{name:"set_format",anchor:"datasets.Dataset.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1562",parametersDescription:[{anchor:"datasets.Dataset.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <strong>getitem</strong> returns all columns (default).`,name:"columns"},{anchor:"datasets.Dataset.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Ao=new _({props:{name:"set_transform",anchor:"datasets.Dataset.set_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1626",parametersDescription:[{anchor:"datasets.Dataset.set_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.set_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.set_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),Fo=new _({props:{name:"reset_format",anchor:"datasets.Dataset.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1619"}}),Oo=new _({props:{name:"with_format",anchor:"datasets.Dataset.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1647",parametersDescription:[{anchor:"datasets.Dataset.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <strong>getitem</strong> returns python objects (default)`,name:"type"},{anchor:"datasets.Dataset.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <strong>getitem</strong> returns all columns (default)`,name:"columns"},{anchor:"datasets.Dataset.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Co=new _({props:{name:"with_transform",anchor:"datasets.Dataset.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1674",parametersDescription:[{anchor:"datasets.Dataset.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <strong>getitem</strong>.`,name:"transform"},{anchor:"datasets.Dataset.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.Dataset.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),jo=new _({props:{name:"__getitem__",anchor:"datasets.Dataset.__getitem__",parameters:[{name:"key",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1774"}}),qo=new _({props:{name:"cleanup_cache_files",anchor:"datasets.Dataset.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1780",returnDescription:`
<p>Number of removed files.</p>
`,returnType:`
<p><code>int</code></p>
`}}),zo=new _({props:{name:"map",anchor:"datasets.Dataset.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = None"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1818",parametersDescription:[{anchor:"datasets.Dataset.map.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Function with one of the following signatures:</p>
<ul>
<li><em>function(example: Union[Dict, Any]) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(example: Union[Dict, Any], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=False<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
<li><em>function(batch: Union[Dict[List], List[Any]]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em> and <em>with_rank=False</em></li>
<li><em>function(batch: Union[Dict[List], List[Any]], </em>extra_args) -&gt; Union[Dict, Any]<em> if </em>batched=True<em> and </em>with_indices=True<em> and/or </em>with_rank=True* (one extra arg for each)</li>
</ul>
<p>If no function is provided, default to identity function: <code>lambda x: x</code>.`,name:"function"},{anchor:"datasets.Dataset.map.with_indices",description:`<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.`,name:"with_indices"},{anchor:"datasets.Dataset.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.Dataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.Dataset.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>.`,name:"batch_size"},{anchor:"datasets.Dataset.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.Dataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.Dataset.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em> if caching is enabled) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.map.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.map.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, default <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>.",name:"fn_kwargs"},{anchor:"datasets.Dataset.map.num_proc",description:"<strong>num_proc</strong> (<code>int</code>, optional, default <em>None</em>) &#x2014; Max number of processes when generating cache. Already cached shards are loaded sequentially",name:"num_proc"},{anchor:"datasets.Dataset.map.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If cache<em>file_name is specified, then this suffix
will be added at the end of the base name of each: defaults to &#x201D;</em>{rank:05d}<em>of</em>{num_proc:05d}&#x201C;. For example, if cache_file_name is &#x201C;processed.arrow&#x201D;, then for
rank=1 and num_proc=4, the resulting file would be &#x201C;processed_00001_of_00004.arrow&#x201D; for the default suffix.`,name:"suffix_template"},{anchor:"datasets.Dataset.map.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),Mo=new _({props:{name:"filter",anchor:"datasets.Dataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"suffix_template",val:": str = '_{rank:05d}_of_{num_proc:05d}'"},{name:"new_fingerprint",val:": typing.Optional[str] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2397",parametersDescription:[{anchor:"datasets.Dataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.Dataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.Dataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.Dataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.Dataset.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, default <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if
<code>batched = True</code>. If <code>batched = False</code>, one example per batch is passed to <code>function</code>.
If <code>batch_size &lt;= 0</code> or <code>batch_size == None</code>: provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.Dataset.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.filter.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>dict</code>, optional) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.Dataset.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.Dataset.filter.suffix_template",description:`<strong>suffix_template</strong> (<code>str</code>) &#x2014;
If <em>cache_file_name</em> is specified, then this suffix will be added at the end of the base name of each.
For example, if <em>cache_file_name</em> is <em>&#x201C;processed.arrow&#x201D;</em>, then for <code>rank = 1</code> and <code>num_proc = 4</code>,
the resulting file would be <em>&#x201C;processed_00001_of_00004.arrow&#x201D;</em> for the default suffix (default
<em><em>{rank:05d}_of</em>{num_proc:05d}</em>)`,name:"suffix_template"},{anchor:"datasets.Dataset.filter.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments.`,name:"new_fingerprint"},{anchor:"datasets.Dataset.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),Uo=new _({props:{name:"select",anchor:"datasets.Dataset.select",parameters:[{name:"indices",val:": typing.Iterable"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2559",parametersDescription:[{anchor:"datasets.Dataset.select.indices",description:"<strong>indices</strong> (sequence, iterable, ndarray or Series) &#x2014; List or 1D-array of integer indices for indexing.",name:"indices"},{anchor:"datasets.Dataset.select.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the indices mapping in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.select.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.select.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.select.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Ro=new _({props:{name:"sort",anchor:"datasets.Dataset.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2648",parametersDescription:[{anchor:"datasets.Dataset.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.Dataset.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.Dataset.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.Dataset.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.Dataset.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.sort.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
sorted indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.sort.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Bo=new _({props:{name:"shuffle",anchor:"datasets.Dataset.shuffle",parameters:[{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2730",parametersDescription:[{anchor:"datasets.Dataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the shuffled indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the shuffled indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shuffle.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
shuffled indices instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.shuffle.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; the new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),Ho=new _({props:{name:"train_test_split",anchor:"datasets.Dataset.train_test_split",parameters:[{name:"test_size",val:": typing.Union[float, int, NoneType] = None"},{name:"train_size",val:": typing.Union[float, int, NoneType] = None"},{name:"shuffle",val:": bool = True"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"train_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"test_indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"train_new_fingerprint",val:": typing.Optional[str] = None"},{name:"test_new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2808",parametersDescription:[{anchor:"datasets.Dataset.train_test_split.test_size",description:`<strong>test_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the test split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the test split.
If int, represents the absolute number of test samples.
If None, the value is set to the complement of the train size.
If train_size is also None, it will be set to 0.25.`,name:"test_size"},{anchor:"datasets.Dataset.train_test_split.train_size",description:`<strong>train_size</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Size of the train split
If float, should be between 0.0 and 1.0 and represent the proportion of the dataset to include in the train split.
If int, represents the absolute number of train samples.
If None, the value is automatically set to the complement of the test size.`,name:"train_size"},{anchor:"datasets.Dataset.train_test_split.shuffle",description:"<strong>shuffle</strong> (<code>bool</code>, optional, default <em>True</em>) &#x2014; Whether or not to shuffle the data before splitting.",name:"shuffle"},{anchor:"datasets.Dataset.train_test_split.seed",description:`<strong>seed</strong> (<code>int</code>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.`,name:"seed"},{anchor:"datasets.Dataset.train_test_split.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.Dataset.train_test_split.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the splits indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.train_test_split.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the splits indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.train_test_split.train_cache_file_name",description:`<strong>train_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
train split indices instead of the automatically generated cache file name.`,name:"train_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.test_cache_file_name",description:`<strong>test_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
test split indices instead of the automatically generated cache file name.`,name:"test_cache_file_name"},{anchor:"datasets.Dataset.train_test_split.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.train_test_split.train_new_fingerprint",description:`<strong>train_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the train set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"train_new_fingerprint"},{anchor:"datasets.Dataset.train_test_split.test_new_fingerprint",description:`<strong>test_new_fingerprint</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; the new fingerprint of the test set after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"test_new_fingerprint"}]}}),Ko=new _({props:{name:"shard",anchor:"datasets.Dataset.shard",parameters:[{name:"num_shards",val:": int"},{name:"index",val:": int"},{name:"contiguous",val:": bool = False"},{name:"keep_in_memory",val:": bool = False"},{name:"indices_cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3008",parametersDescription:[{anchor:"datasets.Dataset.shard.num_shards",description:"<strong>num_shards</strong> (<code>int</code>) &#x2014; How many shards to split the dataset into.",name:"num_shards"},{anchor:"datasets.Dataset.shard.index",description:`<strong>index</strong> (<code>int</code>) &#x2014; Which shard to select and return.
contiguous &#x2014; (<code>bool</code>, default <em>False</em>): Whether to select contiguous blocks of indices for shards.`,name:"index"},{anchor:"datasets.Dataset.shard.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.shard.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.Dataset.shard.indices_cache_file_name",description:`<strong>indices_cache_file_name</strong> (<code>str</code>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices of each shard instead of the automatically generated cache file name.`,name:"indices_cache_file_name"},{anchor:"datasets.Dataset.shard.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),Yo=new _({props:{name:"to_tf_dataset",anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset",parameters:[{name:"columns",val:": typing.Union[str, typing.List[str]]"},{name:"batch_size",val:": int"},{name:"shuffle",val:": bool"},{name:"collate_fn",val:": typing.Callable"},{name:"drop_remainder",val:": bool = None"},{name:"collate_fn_args",val:": typing.Dict[str, typing.Any] = None"},{name:"label_cols",val:": typing.Union[str, typing.List[str]] = None"},{name:"dummy_labels",val:": bool = False"},{name:"prefetch",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L315",parametersDescription:[{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.columns",description:`<strong>columns</strong> (<code>List[str]</code> or <code>str</code>) &#x2014; Dataset column(s) to load in the tf.data.Dataset. In general,
only columns that the model can use as input should be included here (numeric data only).`,name:"columns"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014; Size of batches to load from the dataset.
shuffle(<code>bool</code>) &#x2014; Shuffle the dataset order when loading. Recommended True for training, False for
validation/evaluation.`,name:"batch_size"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.drop_remainder(bool,",description:`<strong>drop_remainder(<code>bool</code>,</strong> default <code>None</code>) &#x2014; Drop the last incomplete batch when loading. If not provided,
defaults to the same setting as shuffle.
collate_fn(<code>Callable</code>) &#x2014; A function or callable object (such as a <em>DataCollator</em>) that will collate
lists of samples into a batch.`,name:"drop_remainder(bool,"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.collate_fn_args",description:`<strong>collate_fn_args</strong> (<code>Dict</code>, optional) &#x2014; An optional <em>dict</em> of keyword arguments to be passed to the
<em>collate_fn</em>.`,name:"collate_fn_args"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.label_cols",description:`<strong>label_cols</strong> (<code>List[str]</code> or <code>str</code>, default <code>None</code>) &#x2014; Dataset column(s) to load as
labels. Note that many models compute loss internally rather than letting Keras do it, in which case it is
not necessary to actually pass the labels here, as long as they&#x2019;re in the input <em>columns</em>.`,name:"label_cols"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.dummy_labels",description:`<strong>dummy_labels</strong> (<code>bool</code>, default <code>False</code>) &#x2014; If no <em>label_cols</em> are set, output an array of &#x201C;dummy&#x201D; labels
with each batch. This can avoid problems with <em>fit()</em> or <em>train_on_batch()</em> that expect labels to be
a Tensor or np.ndarray, but should (hopefully) not be necessary with our standard train_step().`,name:"dummy_labels"},{anchor:"datasets.arrow_dataset.TensorflowDatasetMixin.to_tf_dataset.prefetch",description:`<strong>prefetch</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to run the dataloader in a separate thread and maintain
a small buffer of batches for training. Improves performance by allowing data to be loaded in the
background while the model is training.`,name:"prefetch"}],returnDescription:`
<p><code>tf.data.Dataset</code></p>
`}}),Jo=new _({props:{name:"push_to_hub",anchor:"datasets.Dataset.push_to_hub",parameters:[{name:"repo_id",val:": str"},{name:"split",val:": typing.Optional[str] = None"},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": typing.Optional[str] = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3498",parametersDescription:[{anchor:"datasets.Dataset.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.Dataset.push_to_hub.split",description:`<strong>split</strong> (Optional, <code>str</code>) &#x2014;
The name of the split that will be given to that dataset. Defaults to <em>self.split</em>.`,name:"split"},{anchor:"datasets.Dataset.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>, defaults to <code>False</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.Dataset.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.Dataset.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset. This defaults to the default branch as specified
in your repository, which defaults to <em>&#x201C;main&#x201D;</em>.`,name:"branch"},{anchor:"datasets.Dataset.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes. Defaults to a shard size of 500MB.`,name:"shard_size"},{anchor:"datasets.Dataset.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),Xo=new _({props:{name:"save_to_disk",anchor:"datasets.Dataset.save_to_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L986",parametersDescription:[{anchor:"datasets.Dataset.save_to_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI (e.g. <em>s3://my-bucket/dataset/train</em>)
of the dataset directory where the dataset will be saved to.`,name:"dataset_path"},{anchor:"datasets.Dataset.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),Zo=new _({props:{name:"load_from_disk",anchor:"datasets.Dataset.load_from_disk",parameters:[{name:"dataset_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1080",parametersDescription:[{anchor:"datasets.Dataset.load_from_disk.dataset_path",description:`<strong>dataset_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>&#x201C;dataset/train&#x201D;</em>) or remote URI (e.g.
<em>&#x201C;s3//my-bucket/dataset/train&#x201D;</em>) of the dataset directory where the dataset will be loaded from.`,name:"dataset_path"},{anchor:"datasets.Dataset.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.Dataset.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnDescription:`
<p>the dataset requested.
a <code>datasets.DatasetDict</code> with each split.</p>
`,returnType:`
<ul>
<li>If <em>dataset_path</em> is a path of a dataset dict directory</li>
</ul>
`}}),Qo=new _({props:{name:"flatten_indices",anchor:"datasets.Dataset.flatten_indices",parameters:[{name:"keep_in_memory",val:": bool = False"},{name:"cache_file_name",val:": typing.Optional[str] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"new_fingerprint",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L2490",parametersDescription:[{anchor:"datasets.Dataset.flatten_indices.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.Dataset.flatten_indices.cache_file_name",description:`<strong>cache_file_name</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.`,name:"cache_file_name"},{anchor:"datasets.Dataset.flatten_indices.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.Dataset.flatten_indices.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, default <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.Dataset.flatten_indices.disable_nullable",description:"<strong>disable_nullable</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Allow null values in the table.",name:"disable_nullable"},{anchor:"datasets.Dataset.flatten_indices.new_fingerprint",description:`<strong>new_fingerprint</strong> (<code>str</code>, optional, default <em>None</em>) &#x2014; The new fingerprint of the dataset after transform.
If <em>None</em>, the new fingerprint is computed using a hash of the previous fingerprint, and the transform arguments`,name:"new_fingerprint"}]}}),ei=new _({props:{name:"to_csv",anchor:"datasets.Dataset.to_csv",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_csv_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3147",parametersDescription:[{anchor:"datasets.Dataset.to_csv.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_csv.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_csv.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.
to_csv_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <code>pandas.DataFrame.to_csv</code>`,name:"num_proc"}],returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),ti=new _({props:{name:"to_pandas",anchor:"datasets.Dataset.to_pandas",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3242",parametersDescription:[{anchor:"datasets.Dataset.to_pandas.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_pandas.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>pandas.DataFrame</em> or <em>Iterator[pandas.DataFrame]</em></p>
`}}),si=new _({props:{name:"to_dict",anchor:"datasets.Dataset.to_dict",parameters:[{name:"batch_size",val:": typing.Optional[int] = None"},{name:"batched",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3174",parametersDescription:[{anchor:"datasets.Dataset.to_dict.batched",description:`<strong>batched</strong> (<code>bool</code>) &#x2014; Set to <code>True</code> to return a generator that yields the dataset as batches
of <code>batch_size</code> rows. Defaults to <code>False</code> (returns the whole datasetas once)`,name:"batched"},{anchor:"datasets.Dataset.to_dict.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; The size (number of rows) of the batches if <code>batched</code> is <em>True</em>.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"}],returnDescription:`
<p><em>dict</em> or <em>Iterator[dict]</em></p>
`}}),ni=new _({props:{name:"to_json",anchor:"datasets.Dataset.to_json",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"**to_json_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3203",parametersDescription:[{anchor:"datasets.Dataset.to_json.path_or_buf",description:"<strong>path_or_buf</strong> (<code>PathLike</code> or <code>FileOrBuffer</code>) &#x2014; Either a path to a file or a BinaryIO.",name:"path_or_buf"},{anchor:"datasets.Dataset.to_json.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional) &#x2014; Size of the batch to load in memory and write at once.
Defaults to <code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code>.`,name:"batch_size"},{anchor:"datasets.Dataset.to_json.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing. <code>batch_size</code> in this case defaults to
<code>datasets.config.DEFAULT_MAX_BATCH_SIZE</code> but feel free to make it 5x or 10x of the default
value if you have sufficient compute power.`,name:"num_proc"},{anchor:"datasets.Dataset.to_json.lines",description:`<strong>lines</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether output JSON lines format.
Only possible if \`<code>orient=&quot;records&quot;</code>. It will throw ValueError with <code>orient</code> different from <code>&quot;records&quot;</code>, since the others are not list-like. - <strong>orient</strong> (<code>str</code>, default <code>&quot;records&quot;</code>) &#x2014; Format of the JSON:</p>
<ul>
<li><code>&quot;records&quot;</code>: list like <code>[{column -&gt; value}, &#x2026; , {column -&gt; value}]</code></li>
<li><code>&quot;split&quot;</code>: dict like <code>{&quot;index&quot; -&gt; [index], &quot;columns&quot; -&gt; [columns], &quot;data&quot; -&gt; [values]}</code></li>
<li><code>&quot;index&quot;</code>: dict like <code>{index -&gt; {column -&gt; value}&#x200C;}</code></li>
<li><code>&quot;columns&quot;</code>: dict like <code>{column -&gt; {index -&gt; value}&#x200C;}</code></li>
<li><code>&quot;values&quot;</code>: just the values array</li>
<li><code>&quot;table&quot;</code>: dict like <code>{&quot;schema&quot;: {schema}, &quot;data&quot;: {data}&#x200C;}</code>
**to_json_kwargs &#x2014; Parameters to pass to pandas&#x2019;s <a href="https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.to_json.html" rel="nofollow">pandas.DataFrame.to_json</a>.</li>
</ul>`,name:"lines"}],returnDescription:`
<p>The number of characters or bytes written.</p>
`,returnType:`
<p>int</p>
`}}),ri=new _({props:{name:"to_parquet",anchor:"datasets.Dataset.to_parquet",parameters:[{name:"path_or_buf",val:": typing.Union[str, bytes, os.PathLike, typing.BinaryIO]"},{name:"batch_size",val:": typing.Optional[int] = None"},{name:"**parquet_writer_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3273",returnDescription:`
<p>The number of characters or bytes written</p>
`,returnType:`
<p>int</p>
`}}),oi=new _({props:{name:"add_faiss_index",anchor:"datasets.Dataset.add_faiss_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3600",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the vectors to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_faiss_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>
By default it corresponds to <em>column</em>.`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index.dtype",description:`<strong>dtype</strong> (data-type) &#x2014; The dtype of the numpy arrays that are indexed.
Default is <code>np.float32</code>.`,name:"dtype"}]}}),li=new R({}),di=new R({}),ci=new R({}),pi=new R({}),mi=new _({props:{name:"add_faiss_index_from_external_arrays",anchor:"datasets.Dataset.add_faiss_index_from_external_arrays",parameters:[{name:"external_arrays",val:": array"},{name:"index_name",val:": str"},{name:"device",val:": typing.Optional[int] = None"},{name:"string_factory",val:": typing.Optional[str] = None"},{name:"metric_type",val:": typing.Optional[int] = None"},{name:"custom_index",val:": typing.Optional[ForwardRef('faiss.Index')] = None"},{name:"train_size",val:": typing.Optional[int] = None"},{name:"faiss_verbose",val:": bool = False"},{name:"dtype",val:" = <class 'numpy.float32'>"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3673",parametersDescription:[{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.external_arrays",description:`<strong>external_arrays</strong> (<code>np.array</code>) &#x2014;
If you want to use arrays from outside the lib for the index, you can set <code>external_arrays</code>.
It will use <code>external_arrays</code> to create the Faiss index instead of the arrays in the given <code>column</code>.`,name:"external_arrays"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index_name that is used to call <code>datasets.Dataset.get_nearest_examples()</code>or <code>datasets.Dataset.search()</code>`,name:"index_name"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.string_factory",description:`<strong>string_factory</strong> (Optional <code>str</code>) &#x2014;
This is passed to the index factory of Faiss to create the index.
Default index class is <code>IndexFlat</code>.`,name:"string_factory"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.metric_type",description:`<strong>metric_type</strong> (Optional <code>int</code>) &#x2014;
Type of metric. Ex: faiss.faiss.METRIC_INNER_PRODUCT or faiss.METRIC_L2.`,name:"metric_type"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.custom_index",description:`<strong>custom_index</strong> (Optional <code>faiss.Index</code>) &#x2014;
Custom Faiss index that you already have instantiated and configured for your needs.`,name:"custom_index"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.train_size",description:`<strong>train_size</strong> (Optional <code>int</code>) &#x2014;
If the index needs a training step, specifies how many vectors will be used to train the index.`,name:"train_size"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.faiss_verbose",description:`<strong>faiss_verbose</strong> (<code>bool</code>, defaults to False) &#x2014;
Enable the verbosity of the Faiss index.`,name:"faiss_verbose"},{anchor:"datasets.Dataset.add_faiss_index_from_external_arrays.dtype",description:"<strong>dtype</strong> (<code>numpy.dtype</code>) &#x2014; The dtype of the numpy arrays that are indexed. Default is np.float32.",name:"dtype"}]}}),fi=new _({props:{name:"save_faiss_index",anchor:"datasets.search.IndexableMixin.save_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L505",parametersDescription:[{anchor:"datasets.search.IndexableMixin.save_faiss_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.save_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"}]}}),ui=new _({props:{name:"load_faiss_index",anchor:"datasets.search.IndexableMixin.load_faiss_index",parameters:[{name:"index_name",val:": str"},{name:"file",val:": typing.Union[str, pathlib.PurePath]"},{name:"device",val:": typing.Union[int, typing.List[int], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L518",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_faiss_index.index_name",description:`<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index_name that is used to
call <em>.get_nearest</em> or <em>.search</em>.`,name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.file",description:"<strong>file</strong> (<code>str</code>) &#x2014; The path to the serialized faiss index on disk.",name:"file"},{anchor:"datasets.search.IndexableMixin.load_faiss_index.device",description:`<strong>device</strong> (Optional <code>Union[int, List[int]]</code>) &#x2014; If positive integer, this is the index of the GPU to use. If negative integer, use all GPUs.
If a list of positive integers is passed in, run only on those GPUs. By default it uses the CPU.`,name:"device"}]}}),_i=new _({props:{name:"add_elasticsearch_index",anchor:"datasets.Dataset.add_elasticsearch_index",parameters:[{name:"column",val:": str"},{name:"index_name",val:": typing.Optional[str] = None"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('elasticsearch.Elasticsearch')] = None"},{name:"es_index_name",val:": typing.Optional[str] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3725",parametersDescription:[{anchor:"datasets.Dataset.add_elasticsearch_index.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
The column of the documents to add to the index.`,name:"column"},{anchor:"datasets.Dataset.add_elasticsearch_index.index_name",description:`<strong>index_name</strong> (Optional <code>str</code>) &#x2014;
The index_name/identifier of the index.
This is the index name that is used to call <code>Dataset.get_nearest_examples()</code>or <code>Dataset.search()</code>
By default it corresponds to <code>column</code>.`,name:"index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.Dataset.add_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_name",description:`<strong>es_index_name</strong> (Optional <code>str</code>) &#x2014;
The elasticsearch index name used to create the index.`,name:"es_index_name"},{anchor:"datasets.Dataset.add_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),vi=new Qe({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),yi=new _({props:{name:"load_elasticsearch_index",anchor:"datasets.search.IndexableMixin.load_elasticsearch_index",parameters:[{name:"index_name",val:": str"},{name:"es_index_name",val:": str"},{name:"host",val:": typing.Optional[str] = None"},{name:"port",val:": typing.Optional[int] = None"},{name:"es_client",val:": typing.Optional[ForwardRef('Elasticsearch')] = None"},{name:"es_index_config",val:": typing.Optional[dict] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L596",parametersDescription:[{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index. This is the index name that is used to call <em>.get_nearest</em> or <em>.search</em>.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_name",description:"<strong>es_index_name</strong> (<code>str</code>) &#x2014; The name of elasticsearch index to load.",name:"es_index_name"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.host",description:`<strong>host</strong> (Optional <code>str</code>, defaults to localhost) &#x2014;
host of where ElasticSearch is running`,name:"host"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.port",description:`<strong>port</strong> (Optional <code>str</code>, defaults to 9200) &#x2014;
port of where ElasticSearch is running`,name:"port"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_client",description:`<strong>es_client</strong> (Optional <code>elasticsearch.Elasticsearch</code>) &#x2014;
The elasticsearch client used to create the index if host and port are None.`,name:"es_client"},{anchor:"datasets.search.IndexableMixin.load_elasticsearch_index.es_index_config",description:`<strong>es_index_config</strong> (Optional <code>dict</code>) &#x2014;
The configuration of the elasticsearch index.`,name:"es_index_config"}]}}),$i=new Qe({props:{code:`{
"settings": {
"number_of_shards": 1,
"analysis": {"analyzer": {"stop_standard": {"type": "standard", " stopwords": "_english_"}}},
},
"mappings": {
"properties": {
"text": {
"type": "text",
"analyzer": "standard",
"similarity": "BM25"
},
}
},
}`,highlighted:`{
<span class="hljs-string">&quot;settings&quot;</span>: {
<span class="hljs-string">&quot;number_of_shards&quot;</span>: <span class="hljs-number">1</span>,
<span class="hljs-string">&quot;analysis&quot;</span>: {<span class="hljs-string">&quot;analyzer&quot;</span>: {<span class="hljs-string">&quot;stop_standard&quot;</span>: {<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>, <span class="hljs-string">&quot; stopwords&quot;</span>: <span class="hljs-string">&quot;_english_&quot;</span>}}},
},
<span class="hljs-string">&quot;mappings&quot;</span>: {
<span class="hljs-string">&quot;properties&quot;</span>: {
<span class="hljs-string">&quot;text&quot;</span>: {
<span class="hljs-string">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>,
<span class="hljs-string">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;standard&quot;</span>,
<span class="hljs-string">&quot;similarity&quot;</span>: <span class="hljs-string">&quot;BM25&quot;</span>
},
}
},
}`}}),wi=new _({props:{name:"list_indexes",anchor:"datasets.search.IndexableMixin.list_indexes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L418"}}),Di=new _({props:{name:"get_index",anchor:"datasets.search.IndexableMixin.get_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L422",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; Index name.",name:"index_name"}],returnType:`
<p><code>BaseIndex</code></p>
`}}),xi=new _({props:{name:"drop_index",anchor:"datasets.search.IndexableMixin.drop_index",parameters:[{name:"index_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L640",parametersDescription:[{anchor:"datasets.search.IndexableMixin.drop_index.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"}]}}),Ei=new _({props:{name:"search",anchor:"datasets.search.IndexableMixin.search",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L648",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.search.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The indices of the retrieved examples.</p>
`,returnType:`
<p>indices (<code>List[List[int]]</code>)</p>
`}}),ki=new _({props:{name:"search_batch",anchor:"datasets.search.IndexableMixin.search_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L663",parametersDescription:[{anchor:"datasets.search.IndexableMixin.search_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.search_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.search_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The indices of the retrieved examples per query.</p>
`,returnType:`
<p>total_indices (<code>List[List[int]]</code>)</p>
`}}),Ii=new _({props:{name:"get_nearest_examples",anchor:"datasets.search.IndexableMixin.get_nearest_examples",parameters:[{name:"index_name",val:": str"},{name:"query",val:": typing.Union[str, <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L678",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.query",description:"<strong>query</strong> (<code>Union[str, np.ndarray]</code>) &#x2014; The query as a string if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"query"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples.
The retrieved examples.</p>
`,returnType:`
<p>examples (<code>dict</code>)</p>
`}}),Ni=new _({props:{name:"get_nearest_examples_batch",anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch",parameters:[{name:"index_name",val:": str"},{name:"queries",val:": typing.Union[typing.List[str], <built-in function array>]"},{name:"k",val:": int = 10"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/search.py#L696",parametersDescription:[{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.index_name",description:"<strong>index_name</strong> (<code>str</code>) &#x2014; The index_name/identifier of the index.",name:"index_name"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.queries",description:"<strong>queries</strong> (<code>Union[List[str], np.ndarray]</code>) &#x2014; The queries as a list of strings if <em>index_name</em> is a text index or as a numpy array if <em>index_name</em> is a vector index.",name:"queries"},{anchor:"datasets.search.IndexableMixin.get_nearest_examples_batch.k",description:"<strong>k</strong> (<code>int</code>) &#x2014; The number of examples to retrieve per query.",name:"k"}],returnDescription:`
<p>The retrieval scores of the retrieved examples per query.
The retrieved examples per query.</p>
`,returnType:`
<p>total_examples (<em>List[dict]</em>)</p>
`}}),Ti=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L154"}}),Pi=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L159"}}),Ai=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L164"}}),Fi=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L168"}}),Li=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L172"}}),Oi=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L176"}}),Si=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L180"}}),Ci=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L184"}}),ji=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L188"}}),qi=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L192"}}),zi=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L196"}}),Vi=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L200"}}),Mi=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L204"}}),Ui=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L208"}}),Ri=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L216"}}),Bi=new _({props:{name:"from_csv",anchor:"datasets.Dataset.from_csv",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L839",parametersDescription:[{anchor:"datasets.Dataset.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_csv.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_csv.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Hi=new _({props:{name:"from_json",anchor:"datasets.Dataset.from_json",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"field",val:": typing.Optional[str] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L868",parametersDescription:[{anchor:"datasets.Dataset.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON or JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_json.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_json.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_json.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_json.field",description:`<strong>field</strong> (<code>str</code>, optional) &#x2014; Field name of the JSON file where the dataset is contained in.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"field"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Gi=new _({props:{name:"from_parquet",anchor:"datasets.Dataset.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L905",parametersDescription:[{anchor:"datasets.Dataset.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the Parquet file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_parquet.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.Dataset.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Ki=new _({props:{name:"from_text",anchor:"datasets.Dataset.from_text",parameters:[{name:"path_or_paths",val:": typing.Union[str, bytes, os.PathLike, typing.List[typing.Union[str, bytes, os.PathLike]]]"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L944",parametersDescription:[{anchor:"datasets.Dataset.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.Dataset.from_text.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Split name to be assigned to the dataset.',name:"split"},{anchor:"datasets.Dataset.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.Dataset.from_text.cache_dir",description:"<strong>cache_dir</strong> (<code>str</code>, optional, default <code>&quot;~/.cache/huggingface/datasets&quot;</code>) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.Dataset.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>False</code>) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"
>Dataset</a></p>
`}}),Wi=new _({props:{name:"prepare_for_task",anchor:"datasets.Dataset.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L1700",parametersDescription:[{anchor:"datasets.Dataset.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.Dataset.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),Yi=new _({props:{name:"align_labels_with_mapping",anchor:"datasets.Dataset.align_labels_with_mapping",parameters:[{name:"label2id",val:": typing.Dict"},{name:"label_column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3833",parametersDescription:[{anchor:"datasets.Dataset.align_labels_with_mapping.label2id",description:`<strong>label2id</strong> (<code>dict</code>) &#x2014;
The label name to ID mapping to align the dataset with.`,name:"label2id"},{anchor:"datasets.Dataset.align_labels_with_mapping.label_column",description:`<strong>label_column</strong> (<code>str</code>) &#x2014;
The column name of labels to align on.`,name:"label_column"}]}}),Xi=new R({}),Zi=new R({}),Qi=new _({props:{name:"datasets.concatenate_datasets",anchor:"datasets.concatenate_datasets",parameters:[{name:"dsets",val:": typing.List[datasets.arrow_dataset.Dataset]"},{name:"info",val:": typing.Optional[typing.Any] = None"},{name:"split",val:": typing.Optional[typing.Any] = None"},{name:"axis",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L3886",parametersDescription:[{anchor:"datasets.concatenate_datasets.dsets",description:"<strong>dsets</strong> (<code>List[datasets.Dataset]</code>) &#x2014; List of Datasets to concatenate.",name:"dsets"},{anchor:"datasets.concatenate_datasets.info",description:'<strong>info</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo">DatasetInfo</a>, optional) &#x2014; Dataset information, like description, citation, etc.',name:"info"},{anchor:"datasets.concatenate_datasets.split",description:'<strong>split</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit">NamedSplit</a>, optional) &#x2014; Name of the dataset split.',name:"split"},{anchor:"datasets.concatenate_datasets.axis",description:`<strong>axis</strong> (<code>{0, 1}</code>, default <code>0</code>, meaning over rows) &#x2014;
Axis to concatenate over, where <code>0</code> means over rows (vertically) and <code>1</code> means over columns
(horizontally).</p>
<p><em>New in version 1.6.0</em>`,name:"axis"}]}}),el=new _({props:{name:"datasets.interleave_datasets",anchor:"datasets.interleave_datasets",parameters:[{name:"datasets",val:": typing.List[~DatasetType]"},{name:"probabilities",val:": typing.Optional[typing.List[float]] = None"},{name:"seed",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/combine.py#L20",parametersDescription:[{anchor:"datasets.interleave_datasets.datasets",description:"<strong>datasets</strong> (<code>List[Dataset]</code> or <code>List[IterableDataset]</code>) &#x2014; list of datasets to interleave",name:"datasets"},{anchor:"datasets.interleave_datasets.probabilities",description:`<strong>probabilities</strong> (<code>List[float]</code>, optional, default None) &#x2014; If specified, the new dataset is constructued by sampling
examples from one source at a time according to these probabilities.`,name:"probabilities"},{anchor:"datasets.interleave_datasets.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; The random seed used to choose a source for each example.
**kwargs &#x2014; For map-style datasets:
Keyword arguments to be passed to <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.select">Dataset.select()</a> when selecting the indices used to interleave the datasets.`,name:"seed"}],returnDescription:`
<p>Return type depends on the input <em>datasets</em>
parameter. <em>Dataset</em> if the input is a list of <em>Dataset</em>, <em>IterableDataset</em> if the input is a list of
<em>IterableDataset</em>.</p>
`}}),tl=new Qe({props:{code:`For regular datasets (map-style):

>>> from datasets import Dataset, interleave_datasets
>>> d1 = Dataset.from_dict({"a": [0, 1, 2]})
>>> d2 = Dataset.from_dict({"a": [10, 11, 12]})
>>> d3 = Dataset.from_dict({"a": [20, 21, 22]})
>>> dataset = interleave_datasets([d1, d2, d3])
>>> dataset["a"]
[0, 10, 20, 1, 11, 21, 2, 12, 22]
>>> dataset = interleave_datasets([d1, d2, d3], probabilities=[0.7, 0.2, 0.1], seed=42)
>>> dataset["a"]
[10, 0, 11, 1, 2, 20, 12]

For datasets in streaming mode (iterable):

>>> from datasets import load_dataset, interleave_datasets
>>> d1 = load_dataset("oscar", "unshuffled_deduplicated_en", split="train", streaming=True)
>>> d2 = load_dataset("oscar", "unshuffled_deduplicated_fr", split="train", streaming=True)
>>> dataset = interleave_datasets([d1, d2])
>>> iterator = iter(dataset)
>>> next(iterator)
{'text': 'Mtendere Village was inspired by the vision...
>>> next(iterator)
{'text': "M\xE9dia de d\xE9bat d'id\xE9es, de culture...`,highlighted:`For regular datasets (<span class="hljs-built_in">map</span>-style):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>d3 = Dataset.from_dict({<span class="hljs-string">&quot;a&quot;</span>: [<span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>]})
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3])
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>, <span class="hljs-number">11</span>, <span class="hljs-number">21</span>, <span class="hljs-number">2</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>]
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2, d3], probabilities=[<span class="hljs-number">0.7</span>, <span class="hljs-number">0.2</span>, <span class="hljs-number">0.1</span>], seed=<span class="hljs-number">42</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset[<span class="hljs-string">&quot;a&quot;</span>]
[<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">11</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>, <span class="hljs-number">12</span>]

For datasets <span class="hljs-keyword">in</span> streaming mode (iterable):

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset, interleave_datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>d1 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_en&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>d2 = load_dataset(<span class="hljs-string">&quot;oscar&quot;</span>, <span class="hljs-string">&quot;unshuffled_deduplicated_fr&quot;</span>, split=<span class="hljs-string">&quot;train&quot;</span>, streaming=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = interleave_datasets([d1, d2])
<span class="hljs-meta">&gt;&gt;&gt; </span>iterator = <span class="hljs-built_in">iter</span>(dataset)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">next</span>(iterator)
{<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&#x27;Mtendere Village was inspired by the vision...
&gt;&gt;&gt; next(iterator)
{&#x27;</span>text<span class="hljs-string">&#x27;: &quot;M\xE9dia de d\xE9bat d&#x27;</span><span class="hljs-built_in">id</span>\xE9es, de culture...`}}),al=new _({props:{name:"datasets.set_caching_enabled",anchor:"datasets.set_caching_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/fingerprint.py#L96"}}),nl=new _({props:{name:"datasets.is_caching_enabled",anchor:"datasets.is_caching_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/fingerprint.py#L117"}}),ol=new _({props:{name:"datasets.set_progress_bar_enabled",anchor:"datasets.set_progress_bar_enabled",parameters:[{name:"boolean",val:": bool"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/utils/tqdm_utils.py#L70"}}),il=new _({props:{name:"datasets.is_progress_bar_enabled",anchor:"datasets.is_progress_bar_enabled",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/utils/tqdm_utils.py#L76"}}),ll=new R({}),dl=new _({props:{name:"class datasets.DatasetDict",anchor:"datasets.DatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L30"}}),cl=new _({props:{name:"data",anchor:"datasets.DatasetDict.data",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L52"}}),pl=new _({props:{name:"cache_files",anchor:"datasets.DatasetDict.cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L58"}}),ml=new _({props:{name:"num_columns",anchor:"datasets.DatasetDict.num_columns",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L64"}}),hl=new _({props:{name:"num_rows",anchor:"datasets.DatasetDict.num_rows",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L70"}}),ul=new _({props:{name:"column_names",anchor:"datasets.DatasetDict.column_names",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L76"}}),gl=new _({props:{name:"shape",anchor:"datasets.DatasetDict.shape",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L82"}}),_l=new _({props:{name:"unique",anchor:"datasets.DatasetDict.unique",parameters:[{name:"column",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L96",parametersDescription:[{anchor:"datasets.DatasetDict.unique.column",description:`<strong>column</strong> (<code>str</code>) &#x2014;
column name (list all the column names with <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.column_names">datasets.Dataset.column_names()</a>)`,name:"column"}],returnDescription:`
<p>Dictionary of unique elements in the given column.</p>
`,returnType:`
<p>Dict[<code>str</code>, <code>list</code>]</p>
`}}),vl=new _({props:{name:"cleanup_cache_files",anchor:"datasets.DatasetDict.cleanup_cache_files",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L112",returnDescription:`
<p>Dict with the number of removed files for each split</p>
`}}),bl=new _({props:{name:"map",anchor:"datasets.DatasetDict.map",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:": bool = False"},{name:"with_rank",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"drop_last_batch",val:": bool = False"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"disable_nullable",val:": bool = False"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L358",parametersDescription:[{anchor:"datasets.DatasetDict.map.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><em>function(example: Dict) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=False</em></li>
<li><em>function(example: Dict, indices: int) -&gt; Union[Dict, Any]</em> if <em>batched=False</em> and <em>with_indices=True</em></li>
<li><em>function(batch: Dict[List]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=False</em></li>
<li><em>function(batch: Dict[List], indices: List[int]) -&gt; Union[Dict, Any]</em> if <em>batched=True</em> and <em>with_indices=True</em></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.map.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.map.with_rank",description:`<strong>with_rank</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide process rank to <em>function</em>. Note that in this case the
signature of <em>function</em> should be <em>def function(example[, idx], rank): &#x2026;</em>.`,name:"with_rank"},{anchor:"datasets.DatasetDict.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.map.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.map.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.map.drop_last_batch",description:`<strong>drop_last_batch</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Whether a last batch smaller than the batch_size should be
dropped instead of being processed by the function.`,name:"drop_last_batch"},{anchor:"datasets.DatasetDict.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"},{anchor:"datasets.DatasetDict.map.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.map.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.map.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.map.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.map.features",description:`<strong>features</strong> (<em>Optional[datasets.Features]</em>, defaults to <em>None</em>) &#x2014; Use a specific Features to store the cache file
instead of the automatically generated one.`,name:"features"},{anchor:"datasets.DatasetDict.map.disable_nullable",description:"<strong>disable_nullable</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Disallow null values in the table.",name:"disable_nullable"},{anchor:"datasets.DatasetDict.map.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.map.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.map.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while mapping examples.",name:"desc"}]}}),yl=new _({props:{name:"filter",anchor:"datasets.DatasetDict.filter",parameters:[{name:"function",val:""},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"},{name:"remove_columns",val:": typing.Optional[typing.List[str]] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"},{name:"fn_kwargs",val:": typing.Optional[dict] = None"},{name:"num_proc",val:": typing.Optional[int] = None"},{name:"desc",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L446",parametersDescription:[{anchor:"datasets.DatasetDict.filter.function",description:`<strong>function</strong> (<em>callable</em>) &#x2014; with one of the following signature:<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>`,name:"function"},{anchor:"datasets.DatasetDict.filter.with_indices",description:"<strong>with_indices</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.DatasetDict.filter.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, defaults to <em>None</em>) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.DatasetDict.filter.batched",description:"<strong>batched</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.DatasetDict.filter.batch_size",description:`<strong>batch_size</strong> (<code>int</code>, optional, defaults to <em>1000</em>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>
<em>batch_size &lt;= 0</em> or <em>batch_size == None</em>: Provide the full dataset as a single batch to <em>function</em>`,name:"batch_size"},{anchor:"datasets.DatasetDict.filter.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.filter.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.filter.cache_file_names",description:`<strong>cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
results of the computation instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"cache_file_names"},{anchor:"datasets.DatasetDict.filter.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"},{anchor:"datasets.DatasetDict.filter.fn_kwargs",description:"<strong>fn_kwargs</strong> (<code>Dict</code>, optional, defaults to <em>None</em>) &#x2014; Keyword arguments to be passed to <em>function</em>",name:"fn_kwargs"},{anchor:"datasets.DatasetDict.filter.num_proc",description:`<strong>num_proc</strong> (<code>int</code>, optional, defaults to <em>None</em>) &#x2014; Number of processes for multiprocessing. By default it doesn&#x2019;t
use multiprocessing.`,name:"num_proc"},{anchor:"datasets.DatasetDict.filter.desc",description:"<strong>desc</strong> (<code>str</code>, optional, defaults to <em>None</em>) &#x2014; Meaningful description to be displayed alongside with the progress bar while filtering examples.",name:"desc"}]}}),$l=new _({props:{name:"sort",anchor:"datasets.DatasetDict.sort",parameters:[{name:"column",val:": str"},{name:"reverse",val:": bool = False"},{name:"kind",val:": str = None"},{name:"null_placement",val:": str = 'last'"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L515",parametersDescription:[{anchor:"datasets.DatasetDict.sort.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; column name to sort by.",name:"column"},{anchor:"datasets.DatasetDict.sort.reverse",description:"<strong>reverse</strong> (<code>bool</code>, default <em>False</em>) &#x2014; If True, sort by descending order rather then ascending.",name:"reverse"},{anchor:"datasets.DatasetDict.sort.kind",description:`<strong>kind</strong> (<code>str</code>, optional) &#x2014; Pandas algorithm for sorting selected in {&#x2018;quicksort&#x2019;, &#x2018;mergesort&#x2019;, &#x2018;heapsort&#x2019;, &#x2018;stable&#x2019;},
The default is &#x2018;quicksort&#x2019;. Note that both &#x2018;stable&#x2019; and &#x2018;mergesort&#x2019; use timsort under the covers and, in general,
the actual implementation will vary with data type. The &#x2018;mergesort&#x2019; option is retained for backwards compatibility.`,name:"kind"},{anchor:"datasets.DatasetDict.sort.null_placement",description:`<strong>null_placement</strong> (<code>str</code>, default <em>last</em>) &#x2014;
Put <em>None</em> values at the beginning if &#x2018;first&#x2018;; &#x2018;last&#x2018; puts <em>None</em> values at the end.</p>
<p><em>New in version 1.14.2</em>`,name:"null_placement"},{anchor:"datasets.DatasetDict.sort.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Keep the sorted indices in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.sort.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<code>bool</code>, default <em>True</em>) &#x2014; If a cache file storing the sorted indices
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.sort.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Optional[Dict[str, str]]</em>, defaults to <em>None</em>) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mapping instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.sort.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
Higher value gives smaller cache files, lower value consume less temporary memory.`,name:"writer_batch_size"}]}}),wl=new _({props:{name:"shuffle",anchor:"datasets.DatasetDict.shuffle",parameters:[{name:"seeds",val:": typing.Union[int, typing.Dict[str, typing.Optional[int]], NoneType] = None"},{name:"seed",val:": typing.Optional[int] = None"},{name:"generators",val:": typing.Union[typing.Dict[str, numpy.random._generator.Generator], NoneType] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"load_from_cache_file",val:": bool = True"},{name:"indices_cache_file_names",val:": typing.Union[typing.Dict[str, typing.Optional[str]], NoneType] = None"},{name:"writer_batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L571",parametersDescription:[{anchor:"datasets.DatasetDict.shuffle.seeds",description:`<strong>seeds</strong> (<em>Dict[str, int]</em> or <em>int</em>, optional) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>.
If None, then fresh, unpredictable entropy will be pulled from the OS.
If an int or array_like[ints] is passed, then it will be passed to SeedSequence to derive the initial BitGenerator state.
You can provide one <code>seed</code> per dataset in the dataset dictionary.`,name:"seeds"},{anchor:"datasets.DatasetDict.shuffle.seed",description:"<strong>seed</strong> (Optional <em>int</em>) &#x2014; A seed to initialize the default BitGenerator if <code>generator=None</code>. Alias for seeds (the seed argument has priority over seeds if both arguments are provided).",name:"seed"},{anchor:"datasets.DatasetDict.shuffle.generators",description:`<strong>generators</strong> (Optional <em>Dict[str, np.random.Generator]</em>) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).
You have to provide one <code>generator</code> per dataset in the dataset dictionary.`,name:"generators"},{anchor:"datasets.DatasetDict.shuffle.keep_in_memory",description:"<strong>keep_in_memory</strong> (<em>bool</em>, defaults to <em>False</em>) &#x2014; Keep the dataset in memory instead of writing it to a cache file.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.shuffle.load_from_cache_file",description:`<strong>load_from_cache_file</strong> (<em>bool</em>, defaults to <em>True</em>) &#x2014; If a cache file storing the current computation from <em>function</em>
can be identified, use it instead of recomputing.`,name:"load_from_cache_file"},{anchor:"datasets.DatasetDict.shuffle.indices_cache_file_names",description:`<strong>indices_cache_file_names</strong> (<em>Dict[str, str]</em>, optional) &#x2014; Provide the name of a path for the cache file. It is used to store the
indices mappings instead of the automatically generated cache file name.
You have to provide one <code>cache_file_name</code> per dataset in the dataset dictionary.`,name:"indices_cache_file_names"},{anchor:"datasets.DatasetDict.shuffle.writer_batch_size",description:`<strong>writer_batch_size</strong> (<code>int</code>, default <em>1000</em>) &#x2014; Number of rows per write operation for the cache file writer.
This value is a good trade-off between memory usage during the processing, and processing speed.
Higher value makes the processing do fewer lookups, lower value consume less temporary memory while running <em>.map()</em>.`,name:"writer_batch_size"}]}}),Dl=new _({props:{name:"set_format",anchor:"datasets.DatasetDict.set_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L242",parametersDescription:[{anchor:"datasets.DatasetDict.set_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.set_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output.
None means <code>__getitem__</code> returns all columns (default).`,name:"columns"},{anchor:"datasets.DatasetDict.set_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),El=new _({props:{name:"reset_format",anchor:"datasets.DatasetDict.reset_format",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L269"}}),Il=new _({props:{name:"formatted_as",anchor:"datasets.DatasetDict.formatted_as",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L209",parametersDescription:[{anchor:"datasets.DatasetDict.formatted_as.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014; output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;]
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.formatted_as.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.formatted_as.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Nl=new _({props:{name:"with_format",anchor:"datasets.DatasetDict.with_format",parameters:[{name:"type",val:": typing.Optional[str] = None"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"},{name:"**format_kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L303",parametersDescription:[{anchor:"datasets.DatasetDict.with_format.type",description:`<strong>type</strong> (<code>str</code>, optional) &#x2014;
Either output type selected in [None, &#x2018;numpy&#x2019;, &#x2018;torch&#x2019;, &#x2018;tensorflow&#x2019;, &#x2018;pandas&#x2019;, &#x2018;arrow&#x2019;].
None means <code>__getitem__</code> returns python objects (default)`,name:"type"},{anchor:"datasets.DatasetDict.with_format.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
None means <code>__getitem__</code> returns all columns (default)`,name:"columns"},{anchor:"datasets.DatasetDict.with_format.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
format_kwargs &#x2014; keywords arguments passed to the convert function like <em>np.array</em>, <em>torch.tensor</em> or <em>tensorflow.ragged.constant</em>.`,name:"output_all_columns"}]}}),Pl=new _({props:{name:"with_transform",anchor:"datasets.DatasetDict.with_transform",parameters:[{name:"transform",val:": typing.Optional[typing.Callable]"},{name:"columns",val:": typing.Optional[typing.List] = None"},{name:"output_all_columns",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L331",parametersDescription:[{anchor:"datasets.DatasetDict.with_transform.transform",description:`<strong>transform</strong> (<code>Callable</code>, optional) &#x2014; user-defined formatting transform, replaces the format defined by <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format">datasets.Dataset.set_format()</a>
A formatting function is a callable that takes a batch (as a dict) as input and returns a batch.
This function is applied right before returning the objects in <code>__getitem__</code>.`,name:"transform"},{anchor:"datasets.DatasetDict.with_transform.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; columns to format in the output
If specified, then the input batch of the transform only contains those columns.`,name:"columns"},{anchor:"datasets.DatasetDict.with_transform.output_all_columns",description:`<strong>output_all_columns</strong> (<code>bool</code>, default to False) &#x2014; keep un-formatted columns as well in the output (as python objects)
If set to True, then the other un-formatted columns are kept with the output of the transform.`,name:"output_all_columns"}]}}),Al=new _({props:{name:"flatten",anchor:"datasets.DatasetDict.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L88"}}),Fl=new _({props:{name:"cast",anchor:"datasets.DatasetDict.cast",parameters:[{name:"features",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L127",parametersDescription:[{anchor:"datasets.DatasetDict.cast.features",description:`<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">datasets.Features</a>) &#x2014; New features to cast the dataset to.
The name and order of the fields in the features must match the current column names.
The type of the data must also be convertible from one type to the other.
For non-trivial conversion, e.g. string &lt;-&gt; ClassLabel you should use <code>map</code> to update the Dataset.`,name:"features"}]}}),Ll=new _({props:{name:"cast_column",anchor:"datasets.DatasetDict.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L144",parametersDescription:[{anchor:"datasets.DatasetDict.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.DatasetDict.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ol=new _({props:{name:"remove_columns",anchor:"datasets.DatasetDict.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L157",parametersDescription:[{anchor:"datasets.DatasetDict.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}]}}),Sl=new _({props:{name:"rename_column",anchor:"datasets.DatasetDict.rename_column",parameters:[{name:"original_column_name",val:": str"},{name:"new_column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L173",parametersDescription:[{anchor:"datasets.DatasetDict.rename_column.original_column_name",description:"<strong>original_column_name</strong> (<code>str</code>) &#x2014; Name of the column to rename.",name:"original_column_name"},{anchor:"datasets.DatasetDict.rename_column.new_column_name",description:"<strong>new_column_name</strong> (<code>str</code>) &#x2014; New name for the column.",name:"new_column_name"}]}}),jl=new _({props:{name:"class_encode_column",anchor:"datasets.DatasetDict.class_encode_column",parameters:[{name:"column",val:": str"},{name:"include_nulls",val:": bool = False"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L194",parametersDescription:[{anchor:"datasets.DatasetDict.class_encode_column.column",description:"<strong>column</strong> (<em>str</em>) &#x2014; The name of the column to cast",name:"column"},{anchor:"datasets.DatasetDict.class_encode_column.include_nulls",description:`<strong>include_nulls</strong> (<em>bool</em>, default <em>False</em>) &#x2014;
Whether to include null values in the class labels. If True, the null values will be encoded as the <em>&#x201C;None&#x201D;</em> class label.</p>
<p><em>New in version 1.14.2</em>`,name:"include_nulls"}]}}),zl=new _({props:{name:"push_to_hub",anchor:"datasets.DatasetDict.push_to_hub",parameters:[{name:"repo_id",val:""},{name:"private",val:": typing.Optional[bool] = False"},{name:"token",val:": typing.Optional[str] = None"},{name:"branch",val:": NoneType = None"},{name:"shard_size",val:": typing.Optional[int] = 524288000"},{name:"embed_external_files",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L832",parametersDescription:[{anchor:"datasets.DatasetDict.push_to_hub.repo_id",description:`<strong>repo_id</strong> (<code>str</code>) &#x2014;
The ID of the repository to push to in the following format: <em><user>/<dataset_name></dataset_name></user></em> or
<em><org>/<dataset_name></dataset_name></org></em>. Also accepts <em><dataset_name></dataset_name></em>, which will default to the namespace
of the logged-in user.`,name:"repo_id"},{anchor:"datasets.DatasetDict.push_to_hub.private",description:`<strong>private</strong> (Optional <code>bool</code>) &#x2014;
Whether the dataset repository should be set to private or not. Only affects repository creation:
a repository that already exists will not be affected by that parameter.`,name:"private"},{anchor:"datasets.DatasetDict.push_to_hub.token",description:`<strong>token</strong> (Optional <code>str</code>) &#x2014;
An optional authentication token for the Hugging Face Hub. If no token is passed, will default
to the token saved locally when logging in with <code>huggingface-cli login</code>. Will raise an error
if no token is passed and the user is not logged-in.`,name:"token"},{anchor:"datasets.DatasetDict.push_to_hub.branch",description:`<strong>branch</strong> (Optional <code>str</code>) &#x2014;
The git branch on which to push the dataset.`,name:"branch"},{anchor:"datasets.DatasetDict.push_to_hub.shard_size",description:`<strong>shard_size</strong> (Optional <code>int</code>) &#x2014;
The size of the dataset shards to be uploaded to the hub. The dataset will be pushed in files
of the size specified here, in bytes.`,name:"shard_size"},{anchor:"datasets.DatasetDict.push_to_hub.embed_external_files",description:`<strong>embed_external_files</strong> (<code>bool</code>, default <code>True</code>) &#x2014;
Whether to embed file bytes in the shards.
In particular, this will do the following before the push for the fields of type:</p>
<ul>
<li><a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Audio">Audio</a> and class:<em>Image</em>: remove local path information and embed file content in the Parquet files.</li>
</ul>`,name:"embed_external_files"}]}}),Vl=new _({props:{name:"save_to_disk",anchor:"datasets.DatasetDict.save_to_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L633",parametersDescription:[{anchor:"datasets.DatasetDict.save_to_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <em>dataset/train</em>) or remote URI
(e.g. <em>s3://my-bucket/dataset/train</em>) of the dataset dict directory where the dataset dict will be
saved to.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.save_to_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a>, <code>fsspec.spec.AbstractFileSystem</code>, optional, defaults <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"}]}}),Ml=new _({props:{name:"load_from_disk",anchor:"datasets.DatasetDict.load_from_disk",parameters:[{name:"dataset_dict_path",val:": str"},{name:"fs",val:" = None"},{name:"keep_in_memory",val:": typing.Optional[bool] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L659",parametersDescription:[{anchor:"datasets.DatasetDict.load_from_disk.dataset_dict_path",description:`<strong>dataset_dict_path</strong> (<code>str</code>) &#x2014; Path (e.g. <code>&quot;dataset/train&quot;</code>) or remote URI (e.g.
<code>&quot;s3//my-bucket/dataset/train&quot;</code>) of the dataset dict directory where the dataset dict will be loaded
from.`,name:"dataset_dict_path"},{anchor:"datasets.DatasetDict.load_from_disk.fs",description:`<strong>fs</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">S3FileSystem</a> or <code>fsspec.spec.AbstractFileSystem</code>, optional, default <code>None</code>) &#x2014;
Instance of the remote filesystem used to download the files from.`,name:"fs"},{anchor:"datasets.DatasetDict.load_from_disk.keep_in_memory",description:`<strong>keep_in_memory</strong> (<code>bool</code>, default <code>None</code>) &#x2014; Whether to copy the dataset in-memory. If <em>None</em>, the
dataset will not be copied in-memory unless explicitly enabled by setting
<em>datasets.config.IN_MEMORY_MAX_SIZE</em> to nonzero. See more details in the
<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#load_dataset_enhancing_performance">load_dataset_enhancing_performance</a> section.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Ul=new _({props:{name:"from_csv",anchor:"datasets.DatasetDict.from_csv",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L700",parametersDescription:[{anchor:"datasets.DatasetDict.from_csv.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_csv.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_csv.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_csv.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>pandas.read_csv</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Rl=new _({props:{name:"from_json",anchor:"datasets.DatasetDict.from_json",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L727",parametersDescription:[{anchor:"datasets.DatasetDict.from_json.path_or_paths",description:"<strong>path_or_paths</strong> (path-like or list of path-like) &#x2014; Path(s) of the JSON Lines file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_json.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_json.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_json.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>JsonConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Bl=new _({props:{name:"from_parquet",anchor:"datasets.DatasetDict.from_parquet",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"columns",val:": typing.Optional[typing.List[str]] = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L754",parametersDescription:[{anchor:"datasets.DatasetDict.from_parquet.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the CSV file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_parquet.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_parquet.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_parquet.keep_in_memory",description:"<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.",name:"keep_in_memory"},{anchor:"datasets.DatasetDict.from_parquet.columns",description:`<strong>columns</strong> (<code>List[str]</code>, optional) &#x2014; If not None, only these columns will be read from the file.
A column name may be a prefix of a nested field, e.g. &#x2018;a&#x2019; will select
&#x2018;a.b&#x2019;, &#x2018;a.c&#x2019;, and &#x2018;a.d.e&#x2019;.
**kwargs &#x2014; Keyword arguments to be passed to <code>ParquetConfig</code>.`,name:"columns"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Hl=new _({props:{name:"from_text",anchor:"datasets.DatasetDict.from_text",parameters:[{name:"path_or_paths",val:": typing.Dict[str, typing.Union[str, bytes, os.PathLike]]"},{name:"features",val:": typing.Optional[datasets.features.features.Features] = None"},{name:"cache_dir",val:": str = None"},{name:"keep_in_memory",val:": bool = False"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L790",parametersDescription:[{anchor:"datasets.DatasetDict.from_text.path_or_paths",description:"<strong>path_or_paths</strong> (dict of path-like) &#x2014; Path(s) of the text file(s).",name:"path_or_paths"},{anchor:"datasets.DatasetDict.from_text.features",description:'<strong>features</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>, optional) &#x2014; Dataset features.',name:"features"},{anchor:"datasets.DatasetDict.from_text.cache_dir",description:"<strong>cache_dir</strong> (str, optional, default=&#x201D;~/.cache/huggingface/datasets&#x201D;) &#x2014; Directory to cache data.",name:"cache_dir"},{anchor:"datasets.DatasetDict.from_text.keep_in_memory",description:`<strong>keep_in_memory</strong> (bool, default=False) &#x2014; Whether to copy the data in-memory.
**kwargs &#x2014; Keyword arguments to be passed to <code>TextConfig</code>.`,name:"keep_in_memory"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict"
>DatasetDict</a></p>
`}}),Gl=new _({props:{name:"prepare_for_task",anchor:"datasets.DatasetDict.prepare_for_task",parameters:[{name:"task",val:": typing.Union[str, datasets.tasks.base.TaskTemplate]"},{name:"id",val:": int = 0"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L817",parametersDescription:[{anchor:"datasets.DatasetDict.prepare_for_task.task",description:`<strong>task</strong> (<code>Union[str, TaskTemplate]</code>) &#x2014; The task to prepare the dataset for during training and evaluation. If <code>str</code>, supported tasks include:</p>
<ul>
<li><code>&quot;text-classification&quot;</code></li>
<li><code>&quot;question-answering&quot;</code></li>
</ul>
<p>If <code>TaskTemplate</code> must be one of the task templates in <a href="/docs/datasets/package_reference/task_templates"><code>datasets.tasks</code></a>.`,name:"task"},{anchor:"datasets.DatasetDict.prepare_for_task.id",description:"<strong>id</strong> (<code>int</code>, defaults to 0) &#x2014; The id required to unambiguously identify the task template when multiple task templates of the same type are supported.",name:"id"}]}}),Kl=new R({}),Wl=new _({props:{name:"class datasets.IterableDataset",anchor:"datasets.IterableDataset",parameters:[{name:"ex_iterable",val:": _BaseExamplesIterable"},{name:"info",val:": typing.Optional[datasets.info.DatasetInfo] = None"},{name:"split",val:": typing.Optional[datasets.splits.NamedSplit] = None"},{name:"format_type",val:": typing.Optional[str] = None"},{name:"shuffling",val:": typing.Optional[datasets.iterable_dataset.ShufflingConfig] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L451"}}),Yl=new _({props:{name:"remove_columns",anchor:"datasets.IterableDataset.remove_columns",parameters:[{name:"column_names",val:": typing.Union[str, typing.List[str]]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L720",parametersDescription:[{anchor:"datasets.IterableDataset.remove_columns.column_names",description:"<strong>column_names</strong> (<code>Union[str, List[str]]</code>) &#x2014; Name of the column(s) to remove.",name:"column_names"}],returnDescription:`
<p>A copy of the dataset object without the columns to remove.</p>
`,returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Jl=new _({props:{name:"cast_column",anchor:"datasets.IterableDataset.cast_column",parameters:[{name:"column",val:": str"},{name:"feature",val:": typing.Union[dict, list, tuple, datasets.features.features.Value, datasets.features.features.ClassLabel, datasets.features.translation.Translation, datasets.features.translation.TranslationVariableLanguages, datasets.features.features.Sequence, datasets.features.features.Array2D, datasets.features.features.Array3D, datasets.features.features.Array4D, datasets.features.features.Array5D, datasets.features.audio.Audio, datasets.features.image.Image]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L740",parametersDescription:[{anchor:"datasets.IterableDataset.cast_column.column",description:"<strong>column</strong> (<code>str</code>) &#x2014; Column name.",name:"column"},{anchor:"datasets.IterableDataset.cast_column.feature",description:"<strong>feature</strong> (<code>Feature</code>) &#x2014; Target feature.",name:"feature"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset"
>IterableDataset</a></p>
`}}),Xl=new _({props:{name:"__iter__",anchor:"datasets.IterableDataset.__iter__",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L495"}}),Zl=new _({props:{name:"map",anchor:"datasets.IterableDataset.map",parameters:[{name:"function",val:": typing.Callable"},{name:"with_indices",val:": bool = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": int = 1000"},{name:"remove_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L531",parametersDescription:[{anchor:"datasets.IterableDataset.map.function",description:`<strong>function</strong> (<code>Callable</code>, optional, default None) &#x2014; if not None, this function is applied
on-the-fly on the examples when you iterate on the dataset.`,name:"function"},{anchor:"datasets.IterableDataset.map.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx[, rank]): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.map.input_columns",description:`<strong>input_columns</strong> (<em>Optional[Union[str, List[str]]]</em>, default <em>None</em>) &#x2014; The columns to be passed into <em>function</em>
as positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.map.batched",description:"<strong>batched</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>.",name:"batched"},{anchor:"datasets.IterableDataset.map.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"},{anchor:"datasets.IterableDataset.map.remove_columns",description:`<strong>remove_columns</strong> (<em>Optional[List[str]]</em>, defaults to <em>None</em>) &#x2014; Remove a selection of columns while doing the mapping.
Columns will be removed before updating the examples with the output of <em>function</em>, i.e. if <em>function</em> is adding
columns with names in <em>remove_columns</em>, these columns will be kept.`,name:"remove_columns"}]}}),ed=new _({props:{name:"filter",anchor:"datasets.IterableDataset.filter",parameters:[{name:"function",val:": typing.Optional[typing.Callable] = None"},{name:"with_indices",val:" = False"},{name:"input_columns",val:": typing.Union[str, typing.List[str], NoneType] = None"},{name:"batched",val:": bool = False"},{name:"batch_size",val:": typing.Optional[int] = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L592",parametersDescription:[{anchor:"datasets.IterableDataset.filter.function",description:`<strong>function</strong> (<code>Callable</code>) &#x2014; Callable with one of the following signatures:</p>
<ul>
<li><code>function(example: Union[Dict, Any]) -&gt; bool</code> if <code>with_indices=False, batched=False</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; bool</code> if <code>with_indices=True, batched=False</code></li>
<li><code>function(example: Union[Dict, Any]) -&gt; List[bool]</code> if <code>with_indices=False, batched=True</code></li>
<li><code>function(example: Union[Dict, Any], indices: int) -&gt; List[bool]</code> if <code>with_indices=True, batched=True</code></li>
</ul>
<p>If no function is provided, defaults to an always True function: <code>lambda x: True</code>.`,name:"function"},{anchor:"datasets.IterableDataset.filter.with_indices",description:"<strong>with_indices</strong> (<code>bool</code>, default <em>False</em>) &#x2014; Provide example indices to <em>function</em>. Note that in this case the signature of <em>function</em> should be <em>def function(example, idx): &#x2026;</em>.",name:"with_indices"},{anchor:"datasets.IterableDataset.filter.input_columns",description:`<strong>input_columns</strong> (<code>str</code> or <em>List[str]</em>, optional) &#x2014; The columns to be passed into <em>function</em> as
positional arguments. If <em>None</em>, a dict mapping to all formatted columns is passed as one argument.`,name:"input_columns"},{anchor:"datasets.IterableDataset.filter.batched",description:"<strong>batched</strong> (<code>bool</code>, defaults to <em>False</em>) &#x2014; Provide batch of examples to <em>function</em>",name:"batched"},{anchor:"datasets.IterableDataset.filter.batch_size",description:"<strong>batch_size</strong> (<code>int</code>, optional, default <code>1000</code>) &#x2014; Number of examples per batch provided to <em>function</em> if <em>batched=True</em>.",name:"batch_size"}]}}),td=new _({props:{name:"shuffle",anchor:"datasets.IterableDataset.shuffle",parameters:[{name:"seed",val:" = None"},{name:"generator",val:": typing.Optional[numpy.random._generator.Generator] = None"},{name:"buffer_size",val:": int = 1000"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L644",parametersDescription:[{anchor:"datasets.IterableDataset.shuffle.seed",description:`<strong>seed</strong> (<code>int</code>, optional, default None) &#x2014; random seed that will be used to shuffle the dataset.
It is used to sample from the shuffle buffe and als oto shuffle the data shards.`,name:"seed"},{anchor:"datasets.IterableDataset.shuffle.generator",description:`<strong>generator</strong> (<code>numpy.random.Generator</code>, optional) &#x2014; Numpy random Generator to use to compute the permutation of the dataset rows.
If <code>generator=None</code> (default), uses np.random.default_rng (the default BitGenerator (PCG64) of NumPy).`,name:"generator"},{anchor:"datasets.IterableDataset.shuffle.buffer_size",description:"<strong>buffer_size</strong> (<code>int</code>, default 1000) &#x2014; size of the buffer.",name:"buffer_size"}]}}),sd=new _({props:{name:"skip",anchor:"datasets.IterableDataset.skip",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L688",parametersDescription:[{anchor:"datasets.IterableDataset.skip.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to skip.",name:"n"}]}}),rd=new _({props:{name:"take",anchor:"datasets.IterableDataset.take",parameters:[{name:"n",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/iterable_dataset.py#L704",parametersDescription:[{anchor:"datasets.IterableDataset.take.n",description:"<strong>n</strong> (<code>int</code>) &#x2014; number of elements to take.",name:"n"}]}}),id=new _({props:{name:"info",anchor:"datasets.arrow_dataset.DatasetInfoMixin.info",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L154"}}),ld=new _({props:{name:"split",anchor:"datasets.arrow_dataset.DatasetInfoMixin.split",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L159"}}),dd=new _({props:{name:"builder_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.builder_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L164"}}),cd=new _({props:{name:"citation",anchor:"datasets.arrow_dataset.DatasetInfoMixin.citation",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L168"}}),pd=new _({props:{name:"config_name",anchor:"datasets.arrow_dataset.DatasetInfoMixin.config_name",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L172"}}),md=new _({props:{name:"dataset_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.dataset_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L176"}}),hd=new _({props:{name:"description",anchor:"datasets.arrow_dataset.DatasetInfoMixin.description",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L180"}}),fd=new _({props:{name:"download_checksums",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_checksums",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L184"}}),ud=new _({props:{name:"download_size",anchor:"datasets.arrow_dataset.DatasetInfoMixin.download_size",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L188"}}),gd=new _({props:{name:"features",anchor:"datasets.arrow_dataset.DatasetInfoMixin.features",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L192"}}),_d=new _({props:{name:"homepage",anchor:"datasets.arrow_dataset.DatasetInfoMixin.homepage",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L196"}}),vd=new _({props:{name:"license",anchor:"datasets.arrow_dataset.DatasetInfoMixin.license",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L200"}}),bd=new _({props:{name:"size_in_bytes",anchor:"datasets.arrow_dataset.DatasetInfoMixin.size_in_bytes",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L204"}}),yd=new _({props:{name:"supervised_keys",anchor:"datasets.arrow_dataset.DatasetInfoMixin.supervised_keys",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L208"}}),$d=new _({props:{name:"version",anchor:"datasets.arrow_dataset.DatasetInfoMixin.version",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/arrow_dataset.py#L216"}}),wd=new R({}),xd=new _({props:{name:"class datasets.IterableDatasetDict",anchor:"datasets.IterableDatasetDict",parameters:"",source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/dataset_dict.py#L918"}}),Ed=new R({}),kd=new _({props:{name:"class datasets.Features",anchor:"datasets.Features",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1170"}}),Gn=new uX({props:{$$slots:{default:[gX]},$$scope:{ctx:bf}}}),Fd=new _({props:{name:"copy",anchor:"datasets.Features.copy",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1372",returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Ld=new _({props:{name:"decode_batch",anchor:"datasets.Features.decode_batch",parameters:[{name:"batch",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1354",parametersDescription:[{anchor:"datasets.Features.decode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Dataset batch data.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),Od=new _({props:{name:"decode_column",anchor:"datasets.Features.decode_column",parameters:[{name:"column",val:": list"},{name:"column_name",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1338",parametersDescription:[{anchor:"datasets.Features.decode_column.column",description:"<strong>column</strong> (<code>list[Any]</code>) &#x2014; Dataset column data.",name:"column"},{anchor:"datasets.Features.decode_column.column_name",description:"<strong>column_name</strong> (<code>str</code>) &#x2014; Dataset column name.",name:"column_name"}],returnDescription:`
<p><code>list[Any]</code></p>
`}}),Sd=new _({props:{name:"decode_example",anchor:"datasets.Features.decode_example",parameters:[{name:"example",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1319",parametersDescription:[{anchor:"datasets.Features.decode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Dataset row data.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),Cd=new _({props:{name:"encode_batch",anchor:"datasets.Features.encode_batch",parameters:[{name:"batch",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1301",parametersDescription:[{anchor:"datasets.Features.encode_batch.batch",description:"<strong>batch</strong> (<code>dict[str, list[Any]]</code>) &#x2014; Data in a Dataset batch.",name:"batch"}],returnDescription:`
<p><code>dict[str, list[Any]]</code></p>
`}}),jd=new _({props:{name:"encode_example",anchor:"datasets.Features.encode_example",parameters:[{name:"example",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1288",parametersDescription:[{anchor:"datasets.Features.encode_example.example",description:"<strong>example</strong> (<code>dict[str, Any]</code>) &#x2014; Data in a Dataset row.",name:"example"}],returnDescription:`
<p><code>dict[str, Any]</code></p>
`}}),qd=new _({props:{name:"flatten",anchor:"datasets.Features.flatten",parameters:[{name:"max_depth",val:" = 16"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1442",returnDescription:`
<p>the flattened features</p>
`,returnType:`
<p>Features</p>
`}}),zd=new _({props:{name:"from_arrow_schema",anchor:"datasets.Features.from_arrow_schema",parameters:[{name:"pa_schema",val:": Schema"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1237",parametersDescription:[{anchor:"datasets.Features.from_arrow_schema.pa_schema",description:"<strong>pa_schema</strong> (<code>pyarrow.Schema</code>) &#x2014; Arrow Schema.",name:"pa_schema"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Vd=new _({props:{name:"from_dict",anchor:"datasets.Features.from_dict",parameters:[{name:"dic",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1257",parametersDescription:[{anchor:"datasets.Features.from_dict.dic",description:"<strong>dic</strong> (<code>dict[str, Any]</code>) &#x2014; Python dictionary.",name:"dic"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Md=new Qe({props:{code:"Features.from_dict({'_type': {'dtype': 'string', 'id': None, '_type': 'Value'}})",highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>Features.from_dict({<span class="hljs-string">&#x27;_type&#x27;</span>: {<span class="hljs-string">&#x27;dtype&#x27;</span>: <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;_type&#x27;</span>: <span class="hljs-string">&#x27;Value&#x27;</span>}})
{<span class="hljs-string">&#x27;_type&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`}}),Ud=new _({props:{name:"reorder_fields_as",anchor:"datasets.Features.reorder_fields_as",parameters:[{name:"other",val:": Features"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L1381",parametersDescription:[{anchor:"datasets.Features.reorder_fields_as.other",description:'<strong>other</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features">Features</a>) &#x2014; The other Features to align with.',name:"other"}],returnType:`
<p><a
  href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"
>Features</a></p>
`}}),Rd=new Qe({props:{code:`from datasets import Features, Sequence, Value
# let's say we have to features with a different order of nested fields (for a and b for example)
f1 = Features({"root": Sequence({"a": Value("string"), "b": Value("string")})})
f2 = Features({"root": {"b": Sequence(Value("string")), "a": Sequence(Value("string"))}})
assert f1.type != f2.type
# re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match
f1.reorder_fields_as(f2)
assert f1.reorder_fields_as(f2).type == f2.type`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> Features, <span class="hljs-type">Sequence</span>, Value
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># let&#x27;s say we have to features with a different order of nested fields (for a and b for example)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1 = Features({<span class="hljs-string">&quot;root&quot;</span>: <span class="hljs-type">Sequence</span>({<span class="hljs-string">&quot;a&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>), <span class="hljs-string">&quot;b&quot;</span>: Value(<span class="hljs-string">&quot;string&quot;</span>)})})
<span class="hljs-meta">&gt;&gt;&gt; </span>f2 = Features({<span class="hljs-string">&quot;root&quot;</span>: {<span class="hljs-string">&quot;b&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>)), <span class="hljs-string">&quot;a&quot;</span>: <span class="hljs-type">Sequence</span>(Value(<span class="hljs-string">&quot;string&quot;</span>))}})
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.<span class="hljs-built_in">type</span> != f2.<span class="hljs-built_in">type</span>
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># re-ordering keeps the base structure (here Sequence is defined at the root level), but make the fields order match</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>f1.reorder_fields_as(f2)
{<span class="hljs-string">&#x27;root&#x27;</span>: <span class="hljs-type">Sequence</span>(feature={<span class="hljs-string">&#x27;b&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>), <span class="hljs-string">&#x27;a&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}, length=-<span class="hljs-number">1</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">assert</span> f1.reorder_fields_as(f2).<span class="hljs-built_in">type</span> == f2.<span class="hljs-built_in">type</span>`}}),Bd=new _({props:{name:"class datasets.Sequence",anchor:"datasets.Sequence",parameters:[{name:"feature",val:": typing.Any"},{name:"length",val:": int = -1"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L876"}}),Hd=new _({props:{name:"class datasets.ClassLabel",anchor:"datasets.ClassLabel",parameters:[{name:"num_classes",val:": int = None"},{name:"names",val:": typing.List[str] = None"},{name:"names_file",val:": dataclasses.InitVar[typing.Optional[str]] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L746",parametersDescription:[{anchor:"datasets.ClassLabel.num_classes",description:"<strong>num_classes</strong> (<code>int</code>, optional) &#x2014; Number of classes. All labels must be &lt; <em>num_classes</em>.",name:"num_classes"},{anchor:"datasets.ClassLabel.names",description:`<strong>names</strong> (<code>list</code> of <code>str</code>, optional) &#x2014; String names for the integer classes.
The order in which the names are provided is kept.`,name:"names"},{anchor:"datasets.ClassLabel.names_file",description:"<strong>names_file</strong> (<code>str</code>, optional) &#x2014; Path to a file with names for the integer classes, one per line.",name:"names_file"}]}}),Kd=new _({props:{name:"int2str",anchor:"datasets.ClassLabel.int2str",parameters:[{name:"values",val:": typing.Union[int, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L831"}}),Wd=new _({props:{name:"str2int",anchor:"datasets.ClassLabel.str2int",parameters:[{name:"values",val:": typing.Union[str, collections.abc.Iterable]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L802"}}),Yd=new _({props:{name:"class datasets.Value",anchor:"datasets.Value",parameters:[{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L367"}}),Jd=new _({props:{name:"class datasets.Translation",anchor:"datasets.Translation",parameters:[{name:"languages",val:": typing.List[str]"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/translation.py#L8"}}),Zd=new Qe({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': 'le chat',
'de': 'die katze'
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: <span class="hljs-string">&#x27;le chat&#x27;</span>,
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}`}}),Qd=new _({props:{name:"class datasets.TranslationVariableLanguages",anchor:"datasets.TranslationVariableLanguages",parameters:[{name:"languages",val:": typing.Optional[typing.List] = None"},{name:"num_languages",val:": typing.Optional[int] = None"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/translation.py#L45"}}),ec=new Qe({props:{code:`# At construction time:

datasets.features.Translation(languages=['en', 'fr', 'de'])

# During data generation:

yield {
'en': 'the cat',
'fr': ['le chat', 'la chatte,']
'de': 'die katze'
}

# Tensor returned :

{
'language': ['en', 'de', 'fr', 'fr'],
'translation': ['the cat', 'die katze', 'la chatte', 'le chat'],
}`,highlighted:`<span class="hljs-comment"># At construction time:</span>

datasets.features.Translation(languages=[<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>])

<span class="hljs-comment"># During data generation:</span>

<span class="hljs-keyword">yield</span> {
<span class="hljs-string">&#x27;en&#x27;</span>: <span class="hljs-string">&#x27;the cat&#x27;</span>,
<span class="hljs-string">&#x27;fr&#x27;</span>: [<span class="hljs-string">&#x27;le chat&#x27;</span>, <span class="hljs-string">&#x27;la chatte,&#x27;</span>]
<span class="hljs-string">&#x27;de&#x27;</span>: <span class="hljs-string">&#x27;die katze&#x27;</span>
}

<span class="hljs-comment"># Tensor returned :</span>

{
<span class="hljs-string">&#x27;language&#x27;</span>: [<span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;de&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>, <span class="hljs-string">&#x27;fr&#x27;</span>],
<span class="hljs-string">&#x27;translation&#x27;</span>: [<span class="hljs-string">&#x27;the cat&#x27;</span>, <span class="hljs-string">&#x27;die katze&#x27;</span>, <span class="hljs-string">&#x27;la chatte&#x27;</span>, <span class="hljs-string">&#x27;le chat&#x27;</span>],
}`}}),ac=new _({props:{name:"class datasets.Array2D",anchor:"datasets.Array2D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L443"}}),nc=new _({props:{name:"class datasets.Array3D",anchor:"datasets.Array3D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L452"}}),oc=new _({props:{name:"class datasets.Array4D",anchor:"datasets.Array4D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L461"}}),lc=new _({props:{name:"class datasets.Array5D",anchor:"datasets.Array5D",parameters:[{name:"shape",val:": tuple"},{name:"dtype",val:": str"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/features.py#L470"}}),dc=new _({props:{name:"class datasets.Audio",anchor:"datasets.Audio",parameters:[{name:"sampling_rate",val:": typing.Optional[int] = None"},{name:"mono",val:": bool = True"},{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/audio.py#L14",parametersDescription:[{anchor:"datasets.Audio.sampling_rate",description:"<strong>sampling_rate</strong> (<code>int</code>, optional) &#x2014; Target sampling rate. If <em>None</em>, the native sampling rate is used.",name:"sampling_rate"},{anchor:"datasets.Audio.mono",description:`<strong>mono</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to convert the audio signal to mono by averaging samples across
channels.`,name:"mono"},{anchor:"datasets.Audio.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the audio data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: audio_path, &#x201C;bytes&#x201D;: audio_bytes}.`,name:"decode"}]}}),_c=new _({props:{name:"cast_storage",anchor:"datasets.Audio.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/audio.py#L112",parametersDescription:[{anchor:"datasets.Audio.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),vc=new _({props:{name:"decode_example",anchor:"datasets.Audio.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/audio.py#L80",parametersDescription:[{anchor:"datasets.Audio.decode_example.value",description:`<strong>value</strong> (<code>dict</code>) &#x2014; a dictionary with keys:</p>
<ul>
<li>path: String with relative audio file path.</li>
<li>bytes: Bytes of the audio file.</li>
</ul>`,name:"value"}],returnDescription:`
<p>dict</p>
`}}),bc=new _({props:{name:"embed_storage",anchor:"datasets.Audio.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/audio.py#L145",parametersDescription:[{anchor:"datasets.Audio.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Audio.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Audio arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),yc=new _({props:{name:"encode_example",anchor:"datasets.Audio.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/audio.py#L54",parametersDescription:[{anchor:"datasets.Audio.encode_example.value",description:"<strong>value</strong> (<code>str</code> or <code>dict</code>) &#x2014; Data passed as input to Audio feature.",name:"value"}],returnType:`
<p><code>dict</code></p>
`}}),$c=new _({props:{name:"class datasets.Image",anchor:"datasets.Image",parameters:[{name:"decode",val:": bool = True"},{name:"id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/image.py#L23",parametersDescription:[{anchor:"datasets.Image.decode",description:`<strong>decode</strong> (<code>bool</code>, default <code>True</code>) &#x2014; Whether to decode the image data. If <em>False</em>,
returns the underlying dictionary in the format {&#x201C;path&#x201D;: image_path, &#x201C;bytes&#x201D;: image_bytes}.`,name:"decode"}]}}),Pc=new _({props:{name:"cast_storage",anchor:"datasets.Image.cast_storage",parameters:[{name:"storage",val:": typing.Union[pyarrow.lib.StringArray, pyarrow.lib.StructArray, pyarrow.lib.ListArray]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/image.py#L117",parametersDescription:[{anchor:"datasets.Image.cast_storage.storage",description:"<strong>storage</strong> (Union[pa.StringArray, pa.StructArray, pa.ListArray]) &#x2014; PyArrow array to cast.",name:"storage"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Ac=new _({props:{name:"decode_example",anchor:"datasets.Image.decode_example",parameters:[{name:"value",val:": dict"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/image.py#L81",parametersDescription:[{anchor:"datasets.Image.decode_example.value",description:`<strong>value</strong> (obj &#x2014;<em>str</em> or <code>dict</code>): a string with the absolute image file path, a dictionary with
keys:</p>
<ul>
<li>path: String with absolute or relative image file path.</li>
<li>bytes: The bytes of the image file.</li>
</ul>`,name:"value"}],returnDescription:`
<p><code>PIL.Image.Image</code></p>
`}}),Fc=new _({props:{name:"embed_storage",anchor:"datasets.Image.embed_storage",parameters:[{name:"storage",val:": StructArray"},{name:"drop_paths",val:": bool = True"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/image.py#L166",parametersDescription:[{anchor:"datasets.Image.embed_storage.storage",description:"<strong>storage</strong> (pa.StructArray) &#x2014; PyArrow array to embed.",name:"storage"},{anchor:"datasets.Image.embed_storage.drop_paths",description:"<strong>drop_paths</strong> (bool, default <code>True</code>) &#x2014; If True, the paths are set to None.",name:"drop_paths"}],returnDescription:`
<p>Array in the Image arrow storage type, that is
pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})</p>
`,returnType:`
<p>pa.StructArray</p>
`}}),Lc=new _({props:{name:"encode_example",anchor:"datasets.Image.encode_example",parameters:[{name:"value",val:": typing.Union[str, dict, numpy.ndarray, ForwardRef('PIL.Image.Image')]"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/features/image.py#L53",parametersDescription:[{anchor:"datasets.Image.encode_example.value",description:"<strong>value</strong> (<code>str</code>, <code>np.ndarray</code>, <code>PIL.Image.Image</code> or <code>dict</code>) &#x2014; Data passed as input to Image feature.",name:"value"}],returnDescription:`
<p><code>dict</code> with \u201Cpath\u201D and \u201Cbytes\u201D fields</p>
`}}),Oc=new R({}),Sc=new _({props:{name:"class datasets.MetricInfo",anchor:"datasets.MetricInfo",parameters:[{name:"description",val:": str"},{name:"citation",val:": str"},{name:"features",val:": Features"},{name:"inputs_description",val:": str = <factory>"},{name:"homepage",val:": str = <factory>"},{name:"license",val:": str = <factory>"},{name:"codebase_urls",val:": typing.List[str] = <factory>"},{name:"reference_urls",val:": typing.List[str] = <factory>"},{name:"streamable",val:": bool = False"},{name:"format",val:": typing.Optional[str] = None"},{name:"metric_name",val:": typing.Optional[str] = None"},{name:"config_name",val:": typing.Optional[str] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L296"}}),Cc=new _({props:{name:"from_directory",anchor:"datasets.MetricInfo.from_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L341"}}),qc=new _({props:{name:"write_to_directory",anchor:"datasets.MetricInfo.write_to_directory",parameters:[{name:"metric_info_dir",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/info.py#L331"}}),zc=new R({}),Vc=new _({props:{name:"class datasets.Metric",anchor:"datasets.Metric",parameters:[{name:"config_name",val:": typing.Optional[str] = None"},{name:"keep_in_memory",val:": bool = False"},{name:"cache_dir",val:": typing.Optional[str] = None"},{name:"num_process",val:": int = 1"},{name:"process_id",val:": int = 0"},{name:"seed",val:": typing.Optional[int] = None"},{name:"experiment_id",val:": typing.Optional[str] = None"},{name:"max_concurrent_cache_files",val:": int = 10000"},{name:"timeout",val:": typing.Union[int, float] = 100"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/metric.py#L138",parametersDescription:[{anchor:"datasets.Metric.config_name",description:`<strong>config_name</strong> (<code>str</code>) &#x2014; This is used to define a hash specific to a metrics computation script and prevents the metric&#x2019;s data
to be overridden when the metric loading script is modified.`,name:"config_name"},{anchor:"datasets.Metric.keep_in_memory",description:"<strong>keep_in_memory</strong> (<code>bool</code>) &#x2014; keep all predictions and references in memory. Not possible in distributed settings.",name:"keep_in_memory"},{anchor:"datasets.Metric.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code>) &#x2014; Path to a directory in which temporary prediction/references data will be stored.
The data directory should be located on a shared file-system in distributed setups.`,name:"cache_dir"},{anchor:"datasets.Metric.num_process",description:`<strong>num_process</strong> (<code>int</code>) &#x2014; specify the total number of nodes in a distributed settings.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"num_process"},{anchor:"datasets.Metric.process_id",description:`<strong>process_id</strong> (<code>int</code>) &#x2014; specify the id of the current process in a distributed setup (between 0 and num_process-1)
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"process_id"},{anchor:"datasets.Metric.seed",description:'<strong>seed</strong> (<code>int</code>, optional) &#x2014; If specified, this will temporarily set numpy&#x2019;s random seed when <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Metric.compute">datasets.Metric.compute()</a> is run.',name:"seed"},{anchor:"datasets.Metric.experiment_id",description:`<strong>experiment_id</strong> (<code>str</code>) &#x2014; A specific experiment id. This is used if several distributed evaluations share the same file system.
This is useful to compute metrics in distributed setups (in particular non-additive metrics like F1).`,name:"experiment_id"},{anchor:"datasets.Metric.max_concurrent_cache_files",description:"<strong>max_concurrent_cache_files</strong> (<code>int</code>) &#x2014; Max number of concurrent metrics cache files (default 10000).",name:"max_concurrent_cache_files"},{anchor:"datasets.Metric.timeout",description:"<strong>timeout</strong> (<code>Union[int, float]</code>) &#x2014; Timeout in second for distributed setting synchronization.",name:"timeout"}]}}),Mc=new _({props:{name:"add",anchor:"datasets.Metric.add",parameters:[{name:"prediction",val:" = None"},{name:"reference",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/metric.py#L490",parametersDescription:[{anchor:"datasets.Metric.add.prediction",description:"<strong>prediction</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"prediction"},{anchor:"datasets.Metric.add.reference",description:"<strong>reference</strong> (list/array/tensor, optional) &#x2014; References.",name:"reference"}]}}),Uc=new _({props:{name:"add_batch",anchor:"datasets.Metric.add_batch",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/metric.py#L451",parametersDescription:[{anchor:"datasets.Metric.add_batch.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.add_batch.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"}]}}),Rc=new _({props:{name:"compute",anchor:"datasets.Metric.compute",parameters:[{name:"predictions",val:" = None"},{name:"references",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/metric.py#L388",parametersDescription:[{anchor:"datasets.Metric.compute.predictions",description:"<strong>predictions</strong> (list/array/tensor, optional) &#x2014; Predictions.",name:"predictions"},{anchor:"datasets.Metric.compute.references",description:"<strong>references</strong> (list/array/tensor, optional) &#x2014; References.",name:"references"},{anchor:"datasets.Metric.compute.*kwargs",description:`*<strong>*kwargs</strong> (optional) &#x2014; Keyword arguments that will be forwarded to the metrics <code>_compute</code>
method (see details in the docstring).`,name:"*kwargs"}],returnDescription:`
<p>dict or None</p>
<ul>
<li>Dictionary with the metrics if this metric is run on the main process (<code>process_id == 0</code>).</li>
<li>None if the metric is not run on the main process (<code>process_id != 0</code>).</li>
</ul>
`}}),Bc=new _({props:{name:"download_and_prepare",anchor:"datasets.Metric.download_and_prepare",parameters:[{name:"download_config",val:": typing.Optional[datasets.utils.file_utils.DownloadConfig] = None"},{name:"dl_manager",val:": typing.Optional[datasets.utils.download_manager.DownloadManager] = None"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/metric.py#L565",parametersDescription:[{anchor:"datasets.Metric.download_and_prepare.download_config",description:'<strong>download_config</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.DownloadConfig">DownloadConfig</a>, optional) &#x2014; Specific download configuration parameters.',name:"download_config"},{anchor:"datasets.Metric.download_and_prepare.dl_manager",description:'<strong>dl_manager</strong> (<a href="/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.DownloadManager">DownloadManager</a>, optional) &#x2014; Specific download manager to use.',name:"dl_manager"}]}}),Hc=new R({}),Gc=new _({props:{name:"class datasets.filesystems.S3FileSystem",anchor:"datasets.filesystems.S3FileSystem",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/filesystems/s3filesystem.py#L6"}}),Yc=new Qe({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(anon=True)  # doctest: +SKIP
s3.ls('public-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(anon=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;public-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Jc=new Qe({props:{code:`import datasets
s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
s3.ls('my-private-datasets/imdb/train')  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> datasets
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = datasets.filesystems.S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>s3.ls(<span class="hljs-string">&#x27;my-private-datasets/imdb/train&#x27;</span>)  <span class="hljs-comment"># doctest: +SKIP</span>
[<span class="hljs-string">&#x27;dataset_info.json.json&#x27;</span>,<span class="hljs-string">&#x27;dataset.arrow&#x27;</span>,<span class="hljs-string">&#x27;state.json&#x27;</span>]`}}),Xc=new Qe({props:{code:`import botocore
from datasets.filesystems import S3Filesystem
s3_session = botocore.session.Session(profile_name='my_profile_name')
s3 = S3FileSystem(session=s3_session)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> botocore
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
<span class="hljs-meta">&gt;&gt;&gt; </span>s3_session = botocore.session.Session(profile_name=<span class="hljs-string">&#x27;my_profile_name&#x27;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(session=s3_session)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),Zc=new Qe({props:{code:`from datasets import load_from_disk
from datasets.filesystems import S3Filesystem
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset = load_from_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP
print(len(dataset))`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_from_disk
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_from_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(dataset))
<span class="hljs-number">25000</span>`}}),Qc=new Qe({props:{code:`from datasets import load_dataset
from datasets.filesystems import S3Filesystem
dataset = load_dataset("imdb")
s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  # doctest: +SKIP
dataset.save_to_disk('s3://my-private-datasets/imdb/train',fs=s3)  # doctest: +SKIP`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets.filesystems <span class="hljs-keyword">import</span> S3Filesystem
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;imdb&quot;</span>)
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>s3 = S3FileSystem(key=aws_access_key_id, secret=aws_secret_access_key)  <span class="hljs-comment"># doctest: +SKIP</span>
&gt;&gt;&gt;
<span class="hljs-meta">&gt;&gt;&gt; </span>dataset.save_to_disk(<span class="hljs-string">&#x27;s3://my-private-datasets/imdb/train&#x27;</span>,fs=s3)  <span class="hljs-comment"># doctest: +SKIP</span>`}}),ep=new R({}),tp=new _({props:{name:"datasets.filesystems.extract_path_from_uri",anchor:"datasets.filesystems.extract_path_from_uri",parameters:[{name:"dataset_path",val:": str"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/filesystems.py#L28",parametersDescription:[{anchor:"datasets.filesystems.extract_path_from_uri.dataset_path",description:"<strong>dataset_path</strong> (<code>str</code>) &#x2014; path (e.g. <code>dataset/train</code>) or remote uri (e.g. <code>s3://my-bucket/dataset/train</code>) of the dataset directory",name:"dataset_path"}]}}),ap=new _({props:{name:"datasets.filesystems.is_remote_filesystem",anchor:"datasets.filesystems.is_remote_filesystem",parameters:[{name:"fs",val:": AbstractFileSystem"}],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/filesystems.py#L40",parametersDescription:[{anchor:"datasets.filesystems.is_remote_filesystem.fs",description:'<strong>fs</strong> (<code>fsspec.spec.AbstractFileSystem</code>) &#x2014; An abstract super-class for pythonic file-systems, e.g. :code:<em>fsspec.filesystem(&#x2018;file&#x2019;)</em> or <a href="/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem">datasets.filesystems.S3FileSystem</a>',name:"fs"}]}}),sp=new R({}),np=new _({props:{name:"class datasets.fingerprint.Hasher",anchor:"datasets.fingerprint.Hasher",parameters:[],source:"https://github.com/huggingface/datasets/blob/pr_3882/src/datasets/fingerprint.py#L167"}}),{c(){O=a("meta"),gt=l(),q=a("h1"),ne=a("a"),ra=a("span"),p(ue.$$.fragment),Yr=l(),oa=a("span"),_t=r("Main classes"),rs=l(),ge=a("h2"),de=a("a"),J=a("span"),p(vt.$$.fragment),ip=l(),os=a("span"),u0=r("DatasetInfo"),m2=l(),B=a("div"),p(Jr.$$.fragment),g0=l(),yf=a("p"),_0=r("Information about a dataset."),v0=l(),lp=a("p"),$f=a("em"),b0=r("DatasetInfo"),y0=r(` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),$0=l(),wf=a("p"),w0=r("Note: Not all fields are known on construction and may be updated later."),D0=l(),ke=a("div"),p(Xr.$$.fragment),x0=l(),Zr=a("p"),E0=r("Create DatasetInfo from the JSON file in "),Df=a("code"),k0=r("dataset_info_dir"),I0=r("."),N0=l(),xf=a("p"),T0=r(`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),P0=l(),Ef=a("p"),A0=r("This will overwrite all previous metadata."),F0=l(),bt=a("div"),p(Qr.$$.fragment),L0=l(),ia=a("p"),O0=r("Write "),kf=a("code"),S0=r("DatasetInfo"),C0=r(" as JSON to "),If=a("code"),j0=r("dataset_info_dir"),q0=r("."),z0=l(),Nf=a("p"),V0=r("Also save the license separately in LICENCE."),h2=l(),la=a("h2"),is=a("a"),Tf=a("span"),p(eo.$$.fragment),M0=l(),Pf=a("span"),U0=r("Dataset"),f2=l(),ls=a("p"),R0=r("The base class "),dp=a("a"),B0=r("datasets.Dataset"),H0=r(" implements a Dataset backed by an Apache Arrow table."),u2=l(),v=a("div"),p(to.$$.fragment),G0=l(),Af=a("p"),K0=r("A Dataset backed by an Arrow table."),W0=l(),yt=a("div"),p(ao.$$.fragment),Y0=l(),Ff=a("p"),J0=r("Add column to Dataset."),X0=l(),Lf=a("p"),Of=a("em"),Z0=r("New in version 1.7."),Q0=l(),$t=a("div"),p(so.$$.fragment),ex=l(),Sf=a("p"),tx=r("Add item to Dataset."),ax=l(),Cf=a("p"),jf=a("em"),sx=r("New in version 1.7."),nx=l(),ds=a("div"),p(no.$$.fragment),rx=l(),qf=a("p"),ox=r("Instantiate a Dataset backed by an Arrow table at filename."),ix=l(),cs=a("div"),p(ro.$$.fragment),lx=l(),zf=a("p"),dx=r("Instantiate a Dataset backed by an Arrow buffer."),cx=l(),Ie=a("div"),p(oo.$$.fragment),px=l(),et=a("p"),mx=r("Convert "),Vf=a("code"),hx=r("pandas.DataFrame"),fx=r(" to a "),Mf=a("code"),ux=r("pyarrow.Table"),gx=r(" to create a "),cp=a("a"),_x=r("Dataset"),vx=r("."),bx=l(),io=a("p"),yx=r(`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Uf=a("em"),$x=r("object"),wx=r(", we need to guess the datatype by looking at the Python objects in this Series."),Dx=l(),lo=a("p"),xx=r("Be aware that Series of the "),Rf=a("em"),Ex=r("object"),kx=r(` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),Ix=l(),ps=a("div"),p(co.$$.fragment),Nx=l(),tt=a("p"),Tx=r("Convert "),Bf=a("code"),Px=r("dict"),Ax=r(" to a "),Hf=a("code"),Fx=r("pyarrow.Table"),Lx=r(" to create a "),pp=a("a"),Ox=r("Dataset"),Sx=r("."),Cx=l(),ms=a("div"),p(po.$$.fragment),jx=l(),Gf=a("p"),qx=r("The Apache Arrow table backing the dataset."),zx=l(),hs=a("div"),p(mo.$$.fragment),Vx=l(),Kf=a("p"),Mx=r("The cache files containing the Apache Arrow table backing the dataset."),Ux=l(),fs=a("div"),p(ho.$$.fragment),Rx=l(),Wf=a("p"),Bx=r("Number of columns in the dataset."),Hx=l(),us=a("div"),p(fo.$$.fragment),Gx=l(),uo=a("p"),Kx=r("Number of rows in the dataset (same as "),gs=a("a"),Wx=r("Dataset."),Yf=a("strong"),Yx=r("len"),Jx=r("()"),Xx=r(")."),Zx=l(),_s=a("div"),p(go.$$.fragment),Qx=l(),Jf=a("p"),e8=r("Names of the columns in the dataset."),t8=l(),vs=a("div"),p(_o.$$.fragment),a8=l(),Xf=a("p"),s8=r("Shape of the dataset (number of columns, number of rows)."),n8=l(),wt=a("div"),p(vo.$$.fragment),r8=l(),Zf=a("p"),o8=r("Return a list of the unique elements in a column."),i8=l(),Qf=a("p"),l8=r("This is implemented in the low-level backend and as such, very fast."),d8=l(),bs=a("div"),p(bo.$$.fragment),c8=l(),eu=a("p"),p8=r(`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),m8=l(),ys=a("div"),p(yo.$$.fragment),h8=l(),tu=a("p"),f8=r("Cast the dataset to a new set of features."),u8=l(),$s=a("div"),p($o.$$.fragment),g8=l(),au=a("p"),_8=r("Cast column to feature for decoding."),v8=l(),Dt=a("div"),p(wo.$$.fragment),b8=l(),su=a("p"),y8=r("Remove one or several column(s) in the dataset and the features associated to them."),$8=l(),da=a("p"),w8=r("You can also remove a column using "),mp=a("a"),D8=r("Dataset.map()"),x8=r(" with "),nu=a("em"),E8=r("remove_columns"),k8=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),I8=l(),ws=a("div"),p(Do.$$.fragment),N8=l(),ru=a("p"),T8=r(`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),P8=l(),Ds=a("div"),p(xo.$$.fragment),A8=l(),Eo=a("p"),F8=r("Casts the given column as :obj:"),ou=a("code"),L8=r("datasets.features.ClassLabel"),O8=r(" and updates the table."),S8=l(),xs=a("div"),p(ko.$$.fragment),C8=l(),iu=a("p"),j8=r("Number of rows in the dataset."),q8=l(),xt=a("div"),p(Io.$$.fragment),z8=l(),lu=a("p"),V8=r("Iterate through the examples."),M8=l(),No=a("p"),U8=r("If a formatting is set with "),hp=a("a"),R8=r("Dataset.set_format()"),B8=r(` rows will be returned with the
selected format.`),H8=l(),Es=a("div"),p(To.$$.fragment),G8=l(),ca=a("p"),K8=r("To be used in a "),du=a("code"),W8=r("with"),Y8=r(" statement. Set "),cu=a("code"),J8=r("__getitem__"),X8=r(" return format (type and columns)."),Z8=l(),Ne=a("div"),p(Po.$$.fragment),Q8=l(),_e=a("p"),e3=r("Set "),pu=a("strong"),t3=r("getitem"),a3=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),mu=a("code"),s3=r("type"),n3=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),hu=a("strong"),r3=r("getitem"),o3=r(`.
It\u2019s also possible to use custom transforms for formatting using `),fp=a("a"),i3=r("datasets.Dataset.set_transform()"),l3=r("."),d3=l(),ve=a("p"),c3=r("It is possible to call "),fu=a("code"),p3=r("map"),m3=r(" after calling "),uu=a("code"),h3=r("set_format"),f3=r(". Since "),gu=a("code"),u3=r("map"),g3=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),_u=a("code"),_3=r("map"),v3=r(" on a dataset to add a new column, then this column will be formatted:"),b3=l(),vu=a("p"),y3=r("new formatted columns = (all columns - previously unformatted columns)"),$3=l(),ks=a("div"),p(Ao.$$.fragment),w3=l(),Te=a("p"),D3=r("Set "),bu=a("strong"),x3=r("getitem"),E3=r(" return format using this transform. The transform is applied on-the-fly on batches when "),yu=a("strong"),k3=r("getitem"),I3=r(` is called.
As `),up=a("a"),N3=r("datasets.Dataset.set_format()"),T3=r(", this can be reset using "),gp=a("a"),P3=r("datasets.Dataset.reset_format()"),A3=l(),Et=a("div"),p(Fo.$$.fragment),F3=l(),Lo=a("p"),L3=r("Reset "),$u=a("strong"),O3=r("getitem"),S3=r(" return format to python objects and all columns."),C3=l(),_p=a("p"),j3=r("Same as "),wu=a("code"),q3=r("self.set_format()"),z3=l(),Pe=a("div"),p(Oo.$$.fragment),V3=l(),at=a("p"),M3=r("Set "),Du=a("strong"),U3=r("getitem"),R3=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),xu=a("code"),B3=r("type"),H3=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),Eu=a("strong"),G3=r("getitem"),K3=r("."),W3=l(),So=a("p"),Y3=r("It\u2019s also possible to use custom transforms for formatting using "),vp=a("a"),J3=r("datasets.Dataset.with_transform()"),X3=r("."),Z3=l(),pa=a("p"),Q3=r("Contrary to "),bp=a("a"),e4=r("datasets.Dataset.set_format()"),t4=r(", "),ku=a("code"),a4=r("with_format"),s4=r(" returns a new Dataset object."),n4=l(),Ae=a("div"),p(Co.$$.fragment),r4=l(),ma=a("p"),o4=r("Set "),Iu=a("strong"),i4=r("getitem"),l4=r(" return format using this transform. The transform is applied on-the-fly on batches when "),Nu=a("strong"),d4=r("getitem"),c4=r(" is called."),p4=l(),ha=a("p"),m4=r("As "),yp=a("a"),h4=r("datasets.Dataset.set_format()"),f4=r(", this can be reset using "),$p=a("a"),u4=r("datasets.Dataset.reset_format()"),g4=r("."),_4=l(),fa=a("p"),v4=r("Contrary to "),wp=a("a"),b4=r("datasets.Dataset.set_transform()"),y4=r(", "),Tu=a("code"),$4=r("with_transform"),w4=r(" returns a new Dataset object."),D4=l(),Is=a("div"),p(jo.$$.fragment),x4=l(),Pu=a("p"),E4=r("Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),k4=l(),kt=a("div"),p(qo.$$.fragment),I4=l(),Au=a("p"),N4=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),T4=l(),Fu=a("p"),P4=r("Be careful when running this command that no other process is currently using other cache files."),A4=l(),Fe=a("div"),p(zo.$$.fragment),F4=l(),Lu=a("p"),L4=r(`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),O4=l(),Vo=a("p"),S4=r("You can specify whether the function should be batched or not with the "),Ou=a("code"),C4=r("batched"),j4=r(" parameter:"),q4=l(),ua=a("ul"),Su=a("li"),z4=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),V4=l(),Cu=a("li"),M4=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),U4=l(),re=a("li"),R4=r("If batched is True and batch_size is "),ju=a("code"),B4=r("n"),H4=r(" > 1, then the function takes a batch of "),qu=a("code"),G4=r("n"),K4=r(" examples as input and can return a batch with "),zu=a("code"),W4=r("n"),Y4=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Vu=a("code"),J4=r("n"),X4=r(` examples.
A batch is a dictionary, e.g. a batch of `),Mu=a("code"),Z4=r("n"),Q4=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),eE=l(),Ns=a("div"),p(Mo.$$.fragment),tE=l(),Uu=a("p"),aE=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),sE=l(),Ts=a("div"),p(Uo.$$.fragment),nE=l(),Ru=a("p"),rE=r("Create a new dataset with rows selected following the list/array of indices."),oE=l(),It=a("div"),p(Ro.$$.fragment),iE=l(),Bu=a("p"),lE=r("Create a new dataset sorted according to a column."),dE=l(),Hu=a("p"),cE=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),pE=l(),Nt=a("div"),p(Bo.$$.fragment),mE=l(),Gu=a("p"),hE=r("Create a new Dataset where the rows are shuffled."),fE=l(),Ku=a("p"),uE=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),gE=l(),Tt=a("div"),p(Ho.$$.fragment),_E=l(),z=a("p"),vE=r("Return a dictionary ("),Wu=a("code"),bE=r("datasets.DatsetDict"),yE=r(") with two random train and test subsets ("),Yu=a("em"),$E=r("train"),wE=r(" and "),Ju=a("em"),DE=r("test"),xE=l(),Xu=a("code"),EE=r("Dataset"),kE=r(` splits).
Splits are created from the dataset according to `),Zu=a("em"),IE=r("test_size"),NE=r(", "),Qu=a("em"),TE=r("train_size"),PE=r(" and "),eg=a("em"),AE=r("shuffle"),FE=r("."),LE=l(),Go=a("p"),OE=r("This method is similar to scikit-learn "),tg=a("em"),SE=r("train_test_split"),CE=r(" with the omission of the stratified options."),jE=l(),ce=a("div"),p(Ko.$$.fragment),qE=l(),ga=a("p"),zE=r("Return the "),ag=a("em"),VE=r("index"),ME=r("-nth shard from dataset split into "),sg=a("em"),UE=r("num_shards"),RE=r(" pieces."),BE=l(),ng=a("p"),HE=r(`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),GE=l(),Wo=a("p"),KE=r(`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),rg=a("em"),WE=r("datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),YE=r(` will return
a dataset with the same order as the original.`),JE=l(),og=a("p"),XE=r(`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),ZE=l(),Ps=a("div"),p(Yo.$$.fragment),QE=l(),ig=a("p"),ek=r(`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),tk=l(),pe=a("div"),p(Jo.$$.fragment),ak=l(),lg=a("p"),sk=r(`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),nk=l(),dg=a("p"),rk=r("Example:"),ok=l(),Dp=a("p"),cg=a("code"),ik=r("python "),lk=r("py"),dk=l(),pg=a("blockquote"),mg=a("blockquote"),hg=a("blockquote"),xp=a("p"),ck=r(`dataset.push_to_hub(\u201D<organization>/<dataset_id>\u201D, split=\u201Cevaluation\u201D)
`),g2=a("code"),pk=l(),As=a("div"),p(Xo.$$.fragment),mk=l(),_a=a("p"),hk=r("Saves a dataset to a dataset directory, or in a filesystem using either "),Ep=a("a"),fk=r("S3FileSystem"),uk=r(` or
any implementation of `),fg=a("code"),gk=r("fsspec.spec.AbstractFileSystem"),_k=r("."),vk=l(),Fs=a("div"),p(Zo.$$.fragment),bk=l(),st=a("p"),yk=r("Loads a dataset that was previously saved using "),ug=a("code"),$k=r("save_to_disk"),wk=r(` from a dataset directory, or from a
filesystem using either `),kp=a("a"),Dk=r("S3FileSystem"),xk=r(` or any implementation of
`),gg=a("code"),Ek=r("fsspec.spec.AbstractFileSystem"),kk=r("."),Ik=l(),Ls=a("div"),p(Qo.$$.fragment),Nk=l(),_g=a("p"),Tk=r("Create and cache a new Dataset by flattening the indices mapping."),Pk=l(),Os=a("div"),p(ei.$$.fragment),Ak=l(),vg=a("p"),Fk=r("Exports the dataset to csv"),Lk=l(),Ss=a("div"),p(ti.$$.fragment),Ok=l(),ai=a("p"),Sk=r("Returns the dataset as a "),bg=a("code"),Ck=r("pandas.DataFrame"),jk=r(". Can also return a generator for large datasets."),qk=l(),Cs=a("div"),p(si.$$.fragment),zk=l(),yg=a("p"),Vk=r("Returns the dataset as a Python dict. Can also return a generator for large datasets."),Mk=l(),js=a("div"),p(ni.$$.fragment),Uk=l(),$g=a("p"),Rk=r("Export the dataset to JSON Lines or JSON."),Bk=l(),qs=a("div"),p(ri.$$.fragment),Hk=l(),wg=a("p"),Gk=r("Exports the dataset to parquet"),Kk=l(),T=a("div"),p(oi.$$.fragment),Wk=l(),va=a("p"),Yk=r(`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),Dg=a("code"),Jk=r("device"),Xk=r(" if you want to run it on GPU ("),xg=a("code"),Zk=r("device"),Qk=r(` must be the GPU index).
You can find more information about Faiss here:`),e7=l(),Eg=a("ul"),Ip=a("li"),t7=r("For "),ii=a("a"),a7=r("string factory"),s7=l(),kg=a("p"),n7=r("Example:"),r7=l(),Np=a("p"),Ig=a("code"),o7=r("python "),i7=r(`py
ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)
ds_with_embeddings = ds.map(lambda example: {\u2018embeddings\u2019: embed(example[\u2018line\u2019]}))
ds_with_embeddings.add_faiss_index(column=\u2018embeddings\u2019)`),l7=l(),zs=a("h1"),Vs=a("a"),Ng=a("span"),p(li.$$.fragment),d7=l(),Tg=a("span"),c7=r("query"),p7=l(),Pg=a("p"),m7=r("scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(\u2018embeddings\u2019, embed(\u2018my new query\u2019), k=10)"),h7=l(),Ms=a("h1"),Us=a("a"),Ag=a("span"),p(di.$$.fragment),f7=l(),Fg=a("span"),u7=r("save index"),g7=l(),Lg=a("p"),_7=r("ds_with_embeddings.save_faiss_index(\u2018embeddings\u2019, \u2018my_index.faiss\u2019)"),v7=l(),Og=a("p"),b7=r("ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)"),y7=l(),Rs=a("h1"),Bs=a("a"),Sg=a("span"),p(ci.$$.fragment),$7=l(),Cg=a("span"),w7=r("load index"),D7=l(),jg=a("p"),x7=r("ds.load_faiss_index(\u2018embeddings\u2019, \u2018my_index.faiss\u2019)"),E7=l(),Hs=a("h1"),Gs=a("a"),qg=a("span"),p(pi.$$.fragment),k7=l(),zg=a("span"),I7=r("query"),N7=l(),Tp=a("p"),T7=r(`scores, retrieved_examples = ds.get_nearest_examples(\u2018embeddings\u2019, embed(\u2018my new query\u2019), k=10)
`),_2=a("code"),P7=l(),Pt=a("div"),p(mi.$$.fragment),A7=l(),nt=a("p"),F7=r(`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),Vg=a("em"),L7=r("external_arrays"),O7=r(`.
You can specify `),Mg=a("em"),S7=r("device"),C7=r(" if you want to run it on GPU ("),Ug=a("em"),j7=r("device"),q7=r(` must be the GPU index).
You can find more information about Faiss here:`),z7=l(),Rg=a("ul"),Pp=a("li"),V7=r("For "),hi=a("a"),M7=r("string factory"),U7=l(),Ks=a("div"),p(fi.$$.fragment),R7=l(),Bg=a("p"),B7=r("Save a FaissIndex on disk."),H7=l(),At=a("div"),p(ui.$$.fragment),G7=l(),Hg=a("p"),K7=r("Load a FaissIndex from disk."),W7=l(),gi=a("p"),Y7=r(`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Gg=a("em"),J7=r(".get_index(index_name).faiss_index"),X7=r(" to make it fit your needs."),Z7=l(),X=a("div"),p(_i.$$.fragment),Q7=l(),Kg=a("p"),e5=r("Add a text index using ElasticSearch for fast retrieval. This is done in-place."),t5=l(),Wg=a("p"),a5=r("Default config is:"),s5=l(),p(vi.$$.fragment),n5=l(),Yg=a("p"),r5=r("Example:"),o5=l(),bi=a("p"),Jg=a("code"),i5=r("python "),l5=r(`py
es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)
ds.add_elasticsearch_index(column=\u2018line\u2019, es_client=es_client, es_index_name=\u201Cmy_es_index\u201D)
scores, retrieved_examples = ds.get_nearest_examples(\u2018line\u2019, \u2018my new query\u2019, k=10)
`),v2=a("code"),d5=l(),Le=a("div"),p(yi.$$.fragment),c5=l(),Xg=a("p"),p5=r("Load an existing text index using ElasticSearch for fast retrieval."),m5=l(),Zg=a("p"),h5=r("Default config is:"),f5=l(),p($i.$$.fragment),u5=l(),Ws=a("div"),p(wi.$$.fragment),g5=l(),Qg=a("p"),_5=r("List the colindex_nameumns/identifiers of all the attached indexes."),v5=l(),Ys=a("div"),p(Di.$$.fragment),b5=l(),e_=a("p"),y5=r("List the index_name/identifiers of all the attached indexes."),$5=l(),Js=a("div"),p(xi.$$.fragment),w5=l(),t_=a("p"),D5=r("Drop the index with the specified column."),x5=l(),Xs=a("div"),p(Ei.$$.fragment),E5=l(),a_=a("p"),k5=r("Find the nearest examples indices in the dataset to the query."),I5=l(),Zs=a("div"),p(ki.$$.fragment),N5=l(),s_=a("p"),T5=r("Find the nearest examples indices in the dataset to the query."),P5=l(),Qs=a("div"),p(Ii.$$.fragment),A5=l(),n_=a("p"),F5=r("Find the nearest examples in the dataset to the query."),L5=l(),en=a("div"),p(Ni.$$.fragment),O5=l(),r_=a("p"),S5=r("Find the nearest examples in the dataset to the query."),C5=l(),tn=a("div"),p(Ti.$$.fragment),j5=l(),Ap=a("p"),Fp=a("a"),q5=r("datasets.DatasetInfo"),z5=r(" object containing all the metadata in the dataset."),V5=l(),an=a("div"),p(Pi.$$.fragment),M5=l(),Lp=a("p"),Op=a("a"),U5=r("datasets.NamedSplit"),R5=r(" object corresponding to a named dataset split."),B5=l(),Sp=a("div"),p(Ai.$$.fragment),H5=l(),Cp=a("div"),p(Fi.$$.fragment),G5=l(),jp=a("div"),p(Li.$$.fragment),K5=l(),qp=a("div"),p(Oi.$$.fragment),W5=l(),zp=a("div"),p(Si.$$.fragment),Y5=l(),Vp=a("div"),p(Ci.$$.fragment),J5=l(),Mp=a("div"),p(ji.$$.fragment),X5=l(),Up=a("div"),p(qi.$$.fragment),Z5=l(),Rp=a("div"),p(zi.$$.fragment),Q5=l(),Bp=a("div"),p(Vi.$$.fragment),eI=l(),Hp=a("div"),p(Mi.$$.fragment),tI=l(),Gp=a("div"),p(Ui.$$.fragment),aI=l(),Kp=a("div"),p(Ri.$$.fragment),sI=l(),sn=a("div"),p(Bi.$$.fragment),nI=l(),o_=a("p"),rI=r("Create Dataset from CSV file(s)."),oI=l(),nn=a("div"),p(Hi.$$.fragment),iI=l(),i_=a("p"),lI=r("Create Dataset from JSON or JSON Lines file(s)."),dI=l(),rn=a("div"),p(Gi.$$.fragment),cI=l(),l_=a("p"),pI=r("Create Dataset from Parquet file(s)."),mI=l(),on=a("div"),p(Ki.$$.fragment),hI=l(),d_=a("p"),fI=r("Create Dataset from text file(s)."),uI=l(),Ft=a("div"),p(Wi.$$.fragment),gI=l(),ba=a("p"),_I=r("Prepare a dataset for the given task by casting the dataset\u2019s "),Wp=a("a"),vI=r("Features"),bI=r(" to standardized column names and types as detailed in "),Yp=a("a"),yI=r("datasets.tasks"),$I=r("."),wI=l(),ya=a("p"),DI=r("Casts "),c_=a("code"),xI=r("datasets.DatasetInfo.features"),EI=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),p_=a("code"),kI=r("datasets.DatasetInfo.task_templates"),II=r(" after casting."),NI=l(),C=a("div"),p(Yi.$$.fragment),TI=l(),Ji=a("p"),PI=r("Align the dataset\u2019s label ID and label name mapping to match an input "),m_=a("code"),AI=r("label2id"),FI=r(` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),LI=l(),h_=a("p"),OI=r("Example:"),SI=l(),Jp=a("p"),f_=a("code"),CI=r("python "),jI=r("py"),qI=l(),ln=a("h1"),dn=a("a"),u_=a("span"),p(Xi.$$.fragment),zI=l(),g_=a("span"),VI=r("dataset with mapping {\u2018entailment\u2019: 0, \u2018neutral\u2019: 1, \u2018contradiction\u2019: 2}"),MI=l(),__=a("p"),UI=r("ds = load_dataset(\u201Cglue\u201D, \u201Cmnli\u201D, split=\u201Ctrain\u201D)"),RI=l(),cn=a("h1"),pn=a("a"),v_=a("span"),p(Zi.$$.fragment),BI=l(),b_=a("span"),HI=r("mapping to align with"),GI=l(),Xp=a("p"),KI=r(`label2id = {\u2018CONTRADICTION\u2019: 0, \u2018NEUTRAL\u2019: 1, \u2018ENTAILMENT\u2019: 2}
ds_aligned = ds.align_labels_with_mapping(label2id, \u201Clabel\u201D)
`),b2=a("code"),y2=l(),$a=a("div"),p(Qi.$$.fragment),WI=l(),wa=a("p"),YI=r("Converts a list of "),Zp=a("a"),JI=r("Dataset"),XI=r(" with the same schema into a single "),Qp=a("a"),ZI=r("Dataset"),QI=r("."),$2=l(),V=a("div"),p(el.$$.fragment),e6=l(),y_=a("p"),t6=r(`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),a6=l(),Da=a("p"),s6=r("You can use this function on a list of "),em=a("a"),n6=r("Dataset"),r6=r(" objects, or on a list of "),tm=a("a"),o6=r("IterableDataset"),i6=r(" objects."),l6=l(),be=a("p"),d6=r("If "),$_=a("code"),c6=r("probabilities"),p6=r(" is "),w_=a("code"),m6=r("None"),h6=r(` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),D_=a("code"),f6=r("probabilities"),u6=r(" is not "),x_=a("code"),g6=r("None"),_6=r(", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),v6=l(),E_=a("p"),b6=r("The resulting dataset ends when one of the source datasets runs out of examples."),y6=l(),k_=a("p"),$6=r("Example:"),w6=l(),p(tl.$$.fragment),w2=l(),oe=a("div"),p(al.$$.fragment),D6=l(),I_=a("p"),x6=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),E6=l(),N_=a("p"),k6=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),I6=l(),T_=a("p"),N6=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),T6=l(),ye=a("ul"),P_=a("li"),P6=r("cache files are always recreated"),A6=l(),A_=a("li"),F6=r("cache files are written to a temporary directory that is deleted when session closes"),L6=l(),F_=a("li"),O6=r("cache files are named using a random hash instead of the dataset fingerprint"),S6=l(),sl=a("li"),C6=r("use "),am=a("a"),j6=r("datasets.Dataset.save_to_disk()"),q6=r(" to save a transformed dataset or it will be deleted when session closes"),z6=l(),rt=a("li"),V6=r("caching doesn\u2019t affect "),sm=a("a"),M6=r("datasets.load_dataset()"),U6=r(`. If you want to regenerate a dataset from scratch you should use
the `),L_=a("code"),R6=r("download_mode"),B6=r(" parameter in "),nm=a("a"),H6=r("datasets.load_dataset()"),G6=r("."),D2=l(),ie=a("div"),p(nl.$$.fragment),K6=l(),O_=a("p"),W6=r(`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),Y6=l(),S_=a("p"),J6=r(`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),X6=l(),C_=a("p"),Z6=r(`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),Q6=l(),$e=a("ul"),j_=a("li"),e9=r("cache files are always recreated"),t9=l(),q_=a("li"),a9=r("cache files are written to a temporary directory that is deleted when session closes"),s9=l(),z_=a("li"),n9=r("cache files are named using a random hash instead of the dataset fingerprint"),r9=l(),rl=a("li"),o9=r("use "),rm=a("a"),i9=r("datasets.Dataset.save_to_disk()"),l9=r(" to save a transformed dataset or it will be deleted when session closes"),d9=l(),ot=a("li"),c9=r("caching doesn\u2019t affect "),om=a("a"),p9=r("datasets.load_dataset()"),m9=r(`. If you want to regenerate a dataset from scratch you should use
the `),V_=a("code"),h9=r("download_mode"),f9=r(" parameter in "),im=a("a"),u9=r("datasets.load_dataset()"),g9=r("."),x2=l(),xa=a("div"),p(ol.$$.fragment),_9=l(),M_=a("p"),v9=r("Enable/disable tqdm progress bars."),E2=l(),Ea=a("div"),p(il.$$.fragment),b9=l(),U_=a("p"),y9=r("Return a boolean indicating whether tqdm progress bars are enabled."),k2=l(),ka=a("h2"),mn=a("a"),R_=a("span"),p(ll.$$.fragment),$9=l(),B_=a("span"),w9=r("DatasetDict"),I2=l(),hn=a("p"),D9=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),H_=a("code"),x9=r("datasets.Dataset"),E9=r(` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),N2=l(),w=a("div"),p(dl.$$.fragment),k9=l(),G_=a("p"),I9=r("A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),N9=l(),fn=a("div"),p(cl.$$.fragment),T9=l(),K_=a("p"),P9=r("The Apache Arrow tables backing each split."),A9=l(),un=a("div"),p(pl.$$.fragment),F9=l(),W_=a("p"),L9=r("The cache files containing the Apache Arrow table backing each split."),O9=l(),gn=a("div"),p(ml.$$.fragment),S9=l(),Y_=a("p"),C9=r("Number of columns in each split of the dataset."),j9=l(),_n=a("div"),p(hl.$$.fragment),q9=l(),fl=a("p"),z9=r("Number of rows in each split of the dataset (same as "),vn=a("a"),V9=r("datasets.Dataset."),J_=a("strong"),M9=r("len"),U9=r("()"),R9=r(")."),B9=l(),bn=a("div"),p(ul.$$.fragment),H9=l(),X_=a("p"),G9=r("Names of the columns in each split of the dataset."),K9=l(),yn=a("div"),p(gl.$$.fragment),W9=l(),Z_=a("p"),Y9=r("Shape of each split of the dataset (number of columns, number of rows)."),J9=l(),Lt=a("div"),p(_l.$$.fragment),X9=l(),Q_=a("p"),Z9=r("Return a list of the unique elements in a column for each split."),Q9=l(),e1=a("p"),eN=r("This is implemented in the low-level backend and as such, very fast."),tN=l(),$n=a("div"),p(vl.$$.fragment),aN=l(),t1=a("p"),sN=r(`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),nN=l(),wn=a("div"),p(bl.$$.fragment),rN=l(),a1=a("p"),oN=r(`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),iN=l(),Dn=a("div"),p(yl.$$.fragment),lN=l(),s1=a("p"),dN=r(`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),cN=l(),Ot=a("div"),p($l.$$.fragment),pN=l(),n1=a("p"),mN=r(`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),hN=l(),r1=a("p"),fN=r(`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),uN=l(),Oe=a("div"),p(wl.$$.fragment),gN=l(),o1=a("p"),_N=r("Create a new Dataset where the rows are shuffled."),vN=l(),i1=a("p"),bN=r("The transformation is applied to all the datasets of the dataset dictionary."),yN=l(),l1=a("p"),$N=r(`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),wN=l(),Se=a("div"),p(Dl.$$.fragment),DN=l(),xl=a("p"),xN=r("Set "),d1=a("code"),EN=r("__getitem__"),kN=r(` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),IN=l(),we=a("p"),NN=r("It is possible to call "),c1=a("code"),TN=r("map"),PN=r(" after calling "),p1=a("code"),AN=r("set_format"),FN=r(". Since "),m1=a("code"),LN=r("map"),ON=r(` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),h1=a("code"),SN=r("map"),CN=r(" on a dataset to add a new column, then this column will be formatted:"),jN=l(),f1=a("p"),qN=r("new formatted columns = (all columns - previously unformatted columns)"),zN=l(),St=a("div"),p(El.$$.fragment),VN=l(),kl=a("p"),MN=r("Reset "),u1=a("code"),UN=r("__getitem__"),RN=r(` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),BN=l(),lm=a("p"),HN=r("Same as "),g1=a("code"),GN=r("self.set_format()"),KN=l(),xn=a("div"),p(Il.$$.fragment),WN=l(),Ia=a("p"),YN=r("To be used in a "),_1=a("em"),JN=r("with"),XN=r(" statement. Set "),v1=a("code"),ZN=r("__getitem__"),QN=r(` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),eT=l(),Ce=a("div"),p(Nl.$$.fragment),tT=l(),it=a("p"),aT=r("Set "),b1=a("code"),sT=r("__getitem__"),nT=r(` return format (type and columns). The data formatting is applied on-the-fly.
The format `),y1=a("code"),rT=r("type"),oT=r(" (for example \u201Cnumpy\u201D) is used to format batches when using "),$1=a("code"),iT=r("__getitem__"),lT=r(`.
The format is set for every dataset in the dataset dictionary`),dT=l(),Tl=a("p"),cT=r("It\u2019s also possible to use custom transforms for formatting using "),dm=a("a"),pT=r("datasets.Dataset.with_transform()"),mT=r("."),hT=l(),Na=a("p"),fT=r("Contrary to "),cm=a("a"),uT=r("datasets.DatasetDict.set_format()"),gT=r(", "),w1=a("code"),_T=r("with_format"),vT=r(" returns a new DatasetDict object with new Dataset objects."),bT=l(),je=a("div"),p(Pl.$$.fragment),yT=l(),Ta=a("p"),$T=r("Set "),D1=a("code"),wT=r("__getitem__"),DT=r(" return format using this transform. The transform is applied on-the-fly on batches when "),x1=a("code"),xT=r("__getitem__"),ET=r(` is called.
The transform is set for every dataset in the dataset dictionary`),kT=l(),Pa=a("p"),IT=r("As "),pm=a("a"),NT=r("datasets.Dataset.set_format()"),TT=r(", this can be reset using "),mm=a("a"),PT=r("datasets.Dataset.reset_format()"),AT=r("."),FT=l(),Aa=a("p"),LT=r("Contrary to "),E1=a("code"),OT=r("datasets.DatasetDict.set_transform()"),ST=l(),k1=a("code"),CT=r("with_transform"),jT=r(" returns a new DatasetDict object with new Dataset objects."),qT=l(),En=a("div"),p(Al.$$.fragment),zT=l(),I1=a("p"),VT=r(`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),MT=l(),Ct=a("div"),p(Fl.$$.fragment),UT=l(),N1=a("p"),RT=r(`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),BT=l(),lt=a("p"),HT=r("You can also remove a column using "),hm=a("a"),GT=r("Dataset.map()"),KT=r(" with "),T1=a("em"),WT=r("feature"),YT=r(" but "),P1=a("code"),JT=r("cast_"),XT=r(`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),ZT=l(),kn=a("div"),p(Ll.$$.fragment),QT=l(),A1=a("p"),eP=r("Cast column to feature for decoding."),tP=l(),qe=a("div"),p(Ol.$$.fragment),aP=l(),F1=a("p"),sP=r(`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),nP=l(),L1=a("p"),rP=r("The transformation is applied to all the splits of the dataset dictionary."),oP=l(),Fa=a("p"),iP=r("You can also remove a column using "),fm=a("a"),lP=r("Dataset.map()"),dP=r(" with "),O1=a("em"),cP=r("remove_columns"),pP=r(` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),mP=l(),ze=a("div"),p(Sl.$$.fragment),hP=l(),S1=a("p"),fP=r(`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),uP=l(),La=a("p"),gP=r("You can also rename a column using "),um=a("a"),_P=r("Dataset.map()"),vP=r(" with "),C1=a("em"),bP=r("remove_columns"),yP=r(" but the present method:"),$P=l(),Cl=a("ul"),j1=a("li"),wP=r("takes care of moving the original features under the new column name."),DP=l(),q1=a("li"),xP=r("doesn\u2019t copy the data to a new dataset and is thus much faster."),EP=l(),In=a("div"),p(jl.$$.fragment),kP=l(),ql=a("p"),IP=r("Casts the given column as :obj:"),z1=a("code"),NP=r("datasets.features.ClassLabel"),TP=r(" and updates the tables."),PP=l(),Z=a("div"),p(zl.$$.fragment),AP=l(),Oa=a("p"),FP=r("Pushes the "),V1=a("code"),LP=r("DatasetDict"),OP=r(` to the hub.
The `),M1=a("code"),SP=r("DatasetDict"),CP=r(" is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),jP=l(),U1=a("p"),qP=r("Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),zP=l(),R1=a("p"),VP=r("Example:"),MP=l(),gm=a("p"),B1=a("code"),UP=r("python "),RP=r("py"),BP=l(),H1=a("blockquote"),G1=a("blockquote"),K1=a("blockquote"),_m=a("p"),HP=r(`dataset_dict.push_to_hub(\u201D<organization>/<dataset_id>\u201C)
`),T2=a("code"),GP=l(),Nn=a("div"),p(Vl.$$.fragment),KP=l(),Sa=a("p"),WP=r("Saves a dataset dict to a filesystem using either "),vm=a("a"),YP=r("S3FileSystem"),JP=r(` or
`),W1=a("code"),XP=r("fsspec.spec.AbstractFileSystem"),ZP=r("."),QP=l(),Tn=a("div"),p(Ml.$$.fragment),eA=l(),dt=a("p"),tA=r("Load a dataset that was previously saved using "),Y1=a("code"),aA=r("save_to_disk"),sA=r(` from a filesystem using either
`),bm=a("a"),nA=r("S3FileSystem"),rA=r(" or "),J1=a("code"),oA=r("fsspec.spec.AbstractFileSystem"),iA=r("."),lA=l(),Pn=a("div"),p(Ul.$$.fragment),dA=l(),X1=a("p"),cA=r("Create DatasetDict from CSV file(s)."),pA=l(),An=a("div"),p(Rl.$$.fragment),mA=l(),Z1=a("p"),hA=r("Create DatasetDict from JSON Lines file(s)."),fA=l(),Fn=a("div"),p(Bl.$$.fragment),uA=l(),Q1=a("p"),gA=r("Create DatasetDict from Parquet file(s)."),_A=l(),Ln=a("div"),p(Hl.$$.fragment),vA=l(),ev=a("p"),bA=r("Create DatasetDict from text file(s)."),yA=l(),jt=a("div"),p(Gl.$$.fragment),$A=l(),Ca=a("p"),wA=r("Prepare a dataset for the given task by casting the dataset\u2019s "),ym=a("a"),DA=r("Features"),xA=r(" to standardized column names and types as detailed in "),$m=a("a"),EA=r("datasets.tasks"),kA=r("."),IA=l(),ja=a("p"),NA=r("Casts "),tv=a("code"),TA=r("datasets.DatasetInfo.features"),PA=r(" according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),av=a("code"),AA=r("datasets.DatasetInfo.task_templates"),FA=r(" after casting."),P2=l(),wm=a("a"),A2=l(),qa=a("h2"),On=a("a"),sv=a("span"),p(Kl.$$.fragment),LA=l(),nv=a("span"),OA=r("IterableDataset"),F2=l(),Sn=a("p"),SA=r("The base class "),Dm=a("a"),CA=r("datasets.IterableDataset"),jA=r(" implements an iterable Dataset backed by python generators."),L2=l(),x=a("div"),p(Wl.$$.fragment),qA=l(),rv=a("p"),zA=r("A Dataset backed by an iterable."),VA=l(),Cn=a("div"),p(Yl.$$.fragment),MA=l(),ov=a("p"),UA=r(`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),RA=l(),jn=a("div"),p(Jl.$$.fragment),BA=l(),iv=a("p"),HA=r("Cast column to feature for decoding."),GA=l(),xm=a("div"),p(Xl.$$.fragment),KA=l(),Ve=a("div"),p(Zl.$$.fragment),WA=l(),lv=a("p"),YA=r(`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),JA=l(),Ql=a("p"),XA=r("You can specify whether the function should be batched or not with the "),dv=a("code"),ZA=r("batched"),QA=r(" parameter:"),eF=l(),za=a("ul"),cv=a("li"),tF=r(`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),aF=l(),pv=a("li"),sF=r(`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),nF=l(),le=a("li"),rF=r("If batched is True and batch_size is "),mv=a("code"),oF=r("n"),iF=r(" > 1, then the function takes a batch of "),hv=a("code"),lF=r("n"),dF=r(" examples as input and can return a batch with "),fv=a("code"),cF=r("n"),pF=r(` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),uv=a("code"),mF=r("n"),hF=r(` examples.
A batch is a dictionary, e.g. a batch of `),gv=a("code"),fF=r("n"),uF=r(" examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),gF=l(),qn=a("div"),p(ed.$$.fragment),_F=l(),_v=a("p"),vF=r(`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),bF=l(),me=a("div"),p(td.$$.fragment),yF=l(),vv=a("p"),$F=r("Randomly shuffles the elements of this dataset."),wF=l(),bv=a("p"),DF=r(`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),xF=l(),ad=a("p"),EF=r("For instance, if your dataset contains 10,000 elements but "),yv=a("code"),kF=r("buffer_size"),IF=r(` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),NF=l(),Va=a("p"),TF=r(`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Em=a("a"),PF=r("datasets.IterableDataset.skip()"),AF=r(" or "),km=a("a"),FF=r("datasets.IterableDataset.take()"),LF=r(`
then the order of the shards is kept unchanged.`),OF=l(),zn=a("div"),p(sd.$$.fragment),SF=l(),nd=a("p"),CF=r("Create a new IterableDataset that skips the first "),$v=a("code"),jF=r("n"),qF=r(" elements."),zF=l(),Vn=a("div"),p(rd.$$.fragment),VF=l(),od=a("p"),MF=r("Create a new IterableDataset with only the first "),wv=a("code"),UF=r("n"),RF=r(" elements."),BF=l(),Mn=a("div"),p(id.$$.fragment),HF=l(),Im=a("p"),Nm=a("a"),GF=r("datasets.DatasetInfo"),KF=r(" object containing all the metadata in the dataset."),WF=l(),Un=a("div"),p(ld.$$.fragment),YF=l(),Tm=a("p"),Pm=a("a"),JF=r("datasets.NamedSplit"),XF=r(" object corresponding to a named dataset split."),ZF=l(),Am=a("div"),p(dd.$$.fragment),QF=l(),Fm=a("div"),p(cd.$$.fragment),eL=l(),Lm=a("div"),p(pd.$$.fragment),tL=l(),Om=a("div"),p(md.$$.fragment),aL=l(),Sm=a("div"),p(hd.$$.fragment),sL=l(),Cm=a("div"),p(fd.$$.fragment),nL=l(),jm=a("div"),p(ud.$$.fragment),rL=l(),qm=a("div"),p(gd.$$.fragment),oL=l(),zm=a("div"),p(_d.$$.fragment),iL=l(),Vm=a("div"),p(vd.$$.fragment),lL=l(),Mm=a("div"),p(bd.$$.fragment),dL=l(),Um=a("div"),p(yd.$$.fragment),cL=l(),Rm=a("div"),p($d.$$.fragment),O2=l(),Ma=a("h2"),Rn=a("a"),Dv=a("span"),p(wd.$$.fragment),pL=l(),xv=a("span"),mL=r("IterableDatasetDict"),S2=l(),Bn=a("p"),hL=r("Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Ev=a("code"),fL=r("datasets.IterableDataset"),uL=r(" objects as values."),C2=l(),Dd=a("div"),p(xd.$$.fragment),j2=l(),Ua=a("h2"),Hn=a("a"),kv=a("span"),p(Ed.$$.fragment),gL=l(),Iv=a("span"),_L=r("Features"),q2=l(),N=a("div"),p(kd.$$.fragment),vL=l(),Nv=a("p"),bL=r("A special dictionary that defines the internal structure of a dataset."),yL=l(),Id=a("p"),$L=r("Instantiated with a dictionary of type "),Tv=a("code"),wL=r("dict[str, FieldType]"),DL=r(`, where keys are the desired column names,
and values are the type of that column.`),xL=l(),Bm=a("p"),Pv=a("code"),EL=r("FieldType"),kL=r(" can be one of the following:"),IL=l(),M=a("ul"),Av=a("li"),qt=a("p"),NL=r("a "),Hm=a("a"),TL=r("datasets.Value"),PL=r(" feature specifies a single typed value, e.g. "),Fv=a("code"),AL=r("int64"),FL=r(" or "),Lv=a("code"),LL=r("string"),OL=l(),Ov=a("li"),Nd=a("p"),SL=r("a "),Gm=a("a"),CL=r("datasets.ClassLabel"),jL=r(` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),qL=l(),Sv=a("li"),Td=a("p"),zL=r("a python "),Cv=a("code"),VL=r("dict"),ML=r(` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),UL=l(),Pd=a("li"),De=a("p"),RL=r("a python "),jv=a("code"),BL=r("list"),HL=r(" or a "),Km=a("a"),GL=r("datasets.Sequence"),KL=r(` specifies that the field contains a list of objects. The python
`),qv=a("code"),WL=r("list"),YL=r(" or "),Wm=a("a"),JL=r("datasets.Sequence"),XL=r(` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),ZL=l(),p(Gn.$$.fragment),QL=l(),zv=a("li"),xe=a("p"),eO=r("a "),Ym=a("a"),tO=r("Array2D"),aO=r(", "),Jm=a("a"),sO=r("Array3D"),nO=r(", "),Xm=a("a"),rO=r("Array4D"),oO=r(" or "),Zm=a("a"),iO=r("Array5D"),lO=r(" feature for multidimensional arrays"),dO=l(),Vv=a("li"),Ad=a("p"),cO=r("an "),Qm=a("a"),pO=r("Audio"),mO=r(` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),hO=l(),Mv=a("li"),ct=a("p"),fO=r("an "),eh=a("a"),uO=r("Image"),gO=r(" feature to store the absolute path to an image file, an "),Uv=a("code"),_O=r("np.ndarray"),vO=r(" object, a "),Rv=a("code"),bO=r("PIL.Image.Image"),yO=r(` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),$O=l(),Bv=a("li"),Kn=a("p"),th=a("a"),wO=r("datasets.Translation"),DO=r(" and "),ah=a("a"),xO=r("datasets.TranslationVariableLanguages"),EO=r(", the two features specific to Machine Translation"),kO=l(),Wn=a("div"),p(Fd.$$.fragment),IO=l(),Hv=a("p"),NO=r("Make a deep copy of Features."),TO=l(),Yn=a("div"),p(Ld.$$.fragment),PO=l(),Gv=a("p"),AO=r("Decode batch with custom feature decoding."),FO=l(),Jn=a("div"),p(Od.$$.fragment),LO=l(),Kv=a("p"),OO=r("Decode column with custom feature decoding."),SO=l(),Xn=a("div"),p(Sd.$$.fragment),CO=l(),Wv=a("p"),jO=r("Decode example with custom feature decoding."),qO=l(),Zn=a("div"),p(Cd.$$.fragment),zO=l(),Yv=a("p"),VO=r("Encode batch into a format for Arrow."),MO=l(),Qn=a("div"),p(jd.$$.fragment),UO=l(),Jv=a("p"),RO=r("Encode example into a format for Arrow."),BO=l(),zt=a("div"),p(qd.$$.fragment),HO=l(),Xv=a("p"),GO=r(`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),KO=l(),Zv=a("p"),WO=r(`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),YO=l(),er=a("div"),p(zd.$$.fragment),JO=l(),Qv=a("p"),XO=r(`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),ZO=l(),Q=a("div"),p(Vd.$$.fragment),QO=l(),eb=a("p"),eS=r("Construct Features from dict."),tS=l(),tb=a("p"),aS=r(`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),sS=l(),pt=a("p"),nS=r(`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),sh=a("a"),rS=r("DatasetInfo"),oS=r(` that was dumped to a JSON object. This acts as an analogue to
`),nh=a("a"),iS=r("Features.from_arrow_schema()"),lS=r(` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),rh=a("a"),dS=r("Value"),cS=r(" automatically performs."),pS=l(),ab=a("p"),mS=r("Example:"),hS=l(),p(Md.$$.fragment),fS=l(),he=a("div"),p(Ud.$$.fragment),uS=l(),sb=a("p"),gS=r("Reorder Features fields to match the field order of other Features."),_S=l(),nb=a("p"),vS=r(`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),bS=l(),rb=a("p"),yS=r("Example:"),$S=l(),p(Rd.$$.fragment),z2=l(),Ra=a("div"),p(Bd.$$.fragment),wS=l(),ob=a("p"),DS=r(`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),V2=l(),H=a("div"),p(Hd.$$.fragment),xS=l(),ib=a("p"),ES=r("Feature type for integer class labels."),kS=l(),Gd=a("p"),IS=r("There are 3 ways to define a "),lb=a("em"),NS=r("ClassLabel"),TS=r(", which correspond to the 3 arguments:"),PS=l(),Ba=a("ul"),oh=a("li"),db=a("em"),AS=r("num_classes"),FS=r(": Create 0 to (num_classes-1) labels."),LS=l(),ih=a("li"),cb=a("em"),OS=r("names"),SS=r(": List of label strings."),CS=l(),lh=a("li"),pb=a("em"),jS=r("names_file"),qS=r(": File containing the list of labels."),zS=l(),tr=a("div"),p(Kd.$$.fragment),VS=l(),mb=a("p"),MS=r("Conversion integer => class name string."),US=l(),ar=a("div"),p(Wd.$$.fragment),RS=l(),hb=a("p"),BS=r("Conversion class name string => integer."),M2=l(),mt=a("div"),p(Yd.$$.fragment),HS=l(),fb=a("p"),GS=r("The Value dtypes are as follows:"),KS=l(),ub=a("p"),WS=r(`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),U2=l(),G=a("div"),p(Jd.$$.fragment),YS=l(),dh=a("p"),gb=a("em"),JS=r("FeatureConnector"),XS=r(` for translations with fixed languages per example.
Here for compatiblity with tfds.`),ZS=l(),_b=a("p"),QS=r(`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),eC=l(),Xd=a("p"),tC=r("Output: A dictionary mapping string language codes to translations as "),vb=a("em"),aC=r("Text"),sC=r(`
features.`),nC=l(),bb=a("p"),rC=r("Example:"),oC=l(),p(Zd.$$.fragment),R2=l(),K=a("div"),p(Qd.$$.fragment),iC=l(),ch=a("p"),yb=a("em"),lC=r("FeatureConnector"),dC=r(` for translations with variable languages per example.
Here for compatiblity with tfds.`),cC=l(),$b=a("p"),pC=r(`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),mC=l(),wb=a("p"),hC=r(`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),fC=l(),Db=a("p"),uC=r("Example:"),gC=l(),p(ec.$$.fragment),B2=l(),tc=a("div"),p(ac.$$.fragment),H2=l(),sc=a("div"),p(nc.$$.fragment),G2=l(),rc=a("div"),p(oc.$$.fragment),K2=l(),ic=a("div"),p(lc.$$.fragment),W2=l(),F=a("div"),p(dc.$$.fragment),_C=l(),xb=a("p"),vC=r("Audio Feature to extract audio data from an audio file."),bC=l(),Eb=a("p"),yC=r("Input: The Audio feature accepts as input:"),$C=l(),cc=a("ul"),kb=a("li"),pc=a("p"),wC=r("A "),Ib=a("code"),DC=r("str"),xC=r(": Absolute path to the audio file (i.e. random access is allowed)."),EC=l(),mc=a("li"),hc=a("p"),kC=r("A "),Nb=a("code"),IC=r("dict"),NC=r(" with the keys:"),TC=l(),fc=a("ul"),Tb=a("li"),PC=r("path: String with relative path of the audio file to the archive file."),AC=l(),Pb=a("li"),FC=r("bytes: Bytes content of the audio file."),LC=l(),Ab=a("p"),OC=r("This is useful for archived files with sequential access."),SC=l(),Fb=a("ul"),uc=a("li"),gc=a("p"),CC=r("A "),Lb=a("code"),jC=r("dict"),qC=r(" with the keys:"),zC=l(),Ha=a("ul"),Ob=a("li"),VC=r("path: String with relative path of the audio file to the archive file."),MC=l(),Sb=a("li"),UC=r("array: Array containing the audio sample"),RC=l(),Cb=a("li"),BC=r("sampling_rate: Integer corresponding to the samping rate of the audio sample."),HC=l(),jb=a("p"),GC=r("This is useful for archived files with sequential access."),KC=l(),Vt=a("div"),p(_c.$$.fragment),WC=l(),qb=a("p"),YC=r(`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),JC=l(),ht=a("ul"),zb=a("li"),XC=r("pa.string() - it must contain the \u201Cpath\u201D data"),ZC=l(),Vb=a("li"),QC=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),ej=l(),Mb=a("li"),tj=r("pa.struct({\u201Cpath\u201D: pa.string()})"),aj=l(),Ub=a("li"),sj=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),nj=l(),sr=a("div"),p(vc.$$.fragment),rj=l(),Rb=a("p"),oj=r("Decode example audio file into audio data."),ij=l(),nr=a("div"),p(bc.$$.fragment),lj=l(),Bb=a("p"),dj=r("Embed audio files into the Arrow array."),cj=l(),rr=a("div"),p(yc.$$.fragment),pj=l(),Hb=a("p"),mj=r("Encode example into a format for Arrow."),Y2=l(),L=a("div"),p($c.$$.fragment),hj=l(),Gb=a("p"),fj=r("Image feature to read image data from an image file."),uj=l(),Kb=a("p"),gj=r("Input: The Image feature accepts as input:"),_j=l(),wc=a("ul"),Wb=a("li"),Dc=a("p"),vj=r("A "),Yb=a("code"),bj=r("str"),yj=r(": Absolute path to the image file (i.e. random access is allowed)."),$j=l(),xc=a("li"),Ec=a("p"),wj=r("A "),Jb=a("code"),Dj=r("dict"),xj=r(" with the keys:"),Ej=l(),kc=a("ul"),Xb=a("li"),kj=r("path: String with relative path of the image file to the archive file."),Ij=l(),Zb=a("li"),Nj=r("bytes: Bytes of the image file."),Tj=l(),Qb=a("p"),Pj=r("This is useful for archived files with sequential access."),Aj=l(),Ic=a("ul"),Nc=a("li"),Fj=r("An "),ey=a("code"),Lj=r("np.ndarray"),Oj=r(": NumPy array representing an image."),Sj=l(),Tc=a("li"),Cj=r("A "),ty=a("code"),jj=r("PIL.Image.Image"),qj=r(": PIL image object."),zj=l(),Mt=a("div"),p(Pc.$$.fragment),Vj=l(),ay=a("p"),Mj=r(`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),Uj=l(),Ee=a("ul"),sy=a("li"),Rj=r("pa.string() - it must contain the \u201Cpath\u201D data"),Bj=l(),ny=a("li"),Hj=r("pa.struct({\u201Cbytes\u201D: pa.binary()})"),Gj=l(),ry=a("li"),Kj=r("pa.struct({\u201Cpath\u201D: pa.string()})"),Wj=l(),oy=a("li"),Yj=r("pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),Jj=l(),iy=a("li"),Xj=r("pa.list(*) - it must contain the image array data"),Zj=l(),or=a("div"),p(Ac.$$.fragment),Qj=l(),ly=a("p"),eq=r("Decode example image file into image data."),tq=l(),ir=a("div"),p(Fc.$$.fragment),aq=l(),dy=a("p"),sq=r("Embed image files into the Arrow array."),nq=l(),lr=a("div"),p(Lc.$$.fragment),rq=l(),cy=a("p"),oq=r("Encode example into a format for Arrow."),J2=l(),Ga=a("h2"),dr=a("a"),py=a("span"),p(Oc.$$.fragment),iq=l(),my=a("span"),lq=r("MetricInfo"),X2=l(),W=a("div"),p(Sc.$$.fragment),dq=l(),hy=a("p"),cq=r("Information about a metric."),pq=l(),ph=a("p"),fy=a("code"),mq=r("MetricInfo"),hq=r(` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),fq=l(),uy=a("p"),uq=r("Note: Not all fields are known on construction and may be updated later."),gq=l(),cr=a("div"),p(Cc.$$.fragment),_q=l(),jc=a("p"),vq=r("Create MetricInfo from the JSON file in "),gy=a("code"),bq=r("metric_info_dir"),yq=r("."),$q=l(),pr=a("div"),p(qc.$$.fragment),wq=l(),Ka=a("p"),Dq=r("Write "),_y=a("code"),xq=r("MetricInfo"),Eq=r(" as JSON to "),vy=a("code"),kq=r("metric_info_dir"),Iq=r(`.
Also save the license separately in LICENCE.`),Z2=l(),Wa=a("h2"),mr=a("a"),by=a("span"),p(zc.$$.fragment),Nq=l(),yy=a("span"),Tq=r("Metric"),Q2=l(),Ut=a("p"),Pq=r("The base class "),$y=a("code"),Aq=r("Metric"),Fq=r(" implements a Metric backed by one or several "),mh=a("a"),Lq=r("datasets.Dataset"),Oq=r("."),e$=l(),Y=a("div"),p(Vc.$$.fragment),Sq=l(),wy=a("p"),Cq=r("A Metric is the base class and common API for all metrics."),jq=l(),hr=a("div"),p(Mc.$$.fragment),qq=l(),Dy=a("p"),zq=r("Add one prediction and reference for the metric\u2019s stack."),Vq=l(),fr=a("div"),p(Uc.$$.fragment),Mq=l(),xy=a("p"),Uq=r("Add a batch of predictions and references for the metric\u2019s stack."),Rq=l(),Rt=a("div"),p(Rc.$$.fragment),Bq=l(),Ey=a("p"),Hq=r("Compute the metrics."),Gq=l(),ky=a("p"),Kq=r("Usage of positional arguments is not allowed to prevent mistakes."),Wq=l(),ur=a("div"),p(Bc.$$.fragment),Yq=l(),Iy=a("p"),Jq=r("Downloads and prepares dataset for reading."),t$=l(),Ya=a("h2"),gr=a("a"),Ny=a("span"),p(Hc.$$.fragment),Xq=l(),Ty=a("span"),Zq=r("Filesystems"),a$=l(),k=a("div"),p(Gc.$$.fragment),Qq=l(),Py=a("p"),ez=r("Access S3 as if it were a file system."),tz=l(),Ay=a("p"),az=r(`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),sz=l(),ft=a("p"),nz=r("Provide credentials either explicitly ("),Fy=a("code"),rz=r("key="),oz=r(", "),Ly=a("code"),iz=r("secret="),lz=r(`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Oy=a("code"),dz=r("anon=True"),cz=r("."),pz=l(),Sy=a("p"),mz=r("The following parameters are passed on to fsspec:"),hz=l(),Cy=a("p"),fz=r(`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),uz=l(),jy=a("p"),gz=r("."),_z=l(),Me=a("p"),qy=a("code"),vz=r("datasets.filesystems.S3FileSystem"),bz=r(" is a subclass of s3fs.S3FileSystem]("),Kc=a("a"),yz=r("https://s3fs.readthedocs.io/en/latest/api.html"),$z=r(`), which is a known
implementation of `),zy=a("code"),wz=r("fsspec"),Dz=r(". Filesystem Spec "),Wc=a("a"),xz=r("FSSPEC"),Ez=r(` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),kz=l(),Vy=a("p"),Iz=r("Examples:"),Nz=l(),My=a("p"),Tz=r("Listing files from public s3 bucket."),Pz=l(),p(Yc.$$.fragment),Az=l(),Ja=a("p"),Fz=r("Listing files from private s3 bucket using "),Uy=a("code"),Lz=r("aws_access_key_id"),Oz=r(" and "),Ry=a("code"),Sz=r("aws_secret_access_key"),Cz=r("."),jz=l(),p(Jc.$$.fragment),qz=l(),ut=a("p"),zz=r("Using "),By=a("code"),Vz=r("S3Filesystem"),Mz=r(" with "),Hy=a("code"),Uz=r("botocore.session.Session"),Rz=r(" and custom "),Gy=a("code"),Bz=r("aws_profile"),Hz=r("."),Gz=l(),p(Xc.$$.fragment),Kz=l(),Xa=a("p"),Wz=r("Loading dataset from s3 using "),Ky=a("code"),Yz=r("S3Filesystem"),Jz=r(" and "),Wy=a("code"),Xz=r("load_from_disk()"),Zz=r("."),Qz=l(),p(Zc.$$.fragment),eV=l(),Yy=a("p"),tV=r("Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),aV=l(),p(Qc.$$.fragment),sV=l(),_r=a("h2"),vr=a("a"),Jy=a("span"),p(ep.$$.fragment),nV=l(),Xy=a("span"),rV=r("Parameters"),oV=l(),U=a("p"),iV=r(`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),Zy=a("code"),lV=r("use_ssl"),dV=r(" is also set in "),Qy=a("code"),cV=r("client_kwargs"),pV=r(`,
the value set in `),e2=a("code"),mV=r("client_kwargs"),hV=r(` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),t2=a("code"),fV=r("open()"),uV=r(`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),a2=a("code"),gV=r("S3File.open"),_V=r(`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),s2=a("code"),vV=r("open()"),bV=r(`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),n2=a("code"),yV=r("botocore.client.Config"),$V=r(`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),s$=l(),Za=a("div"),p(tp.$$.fragment),wV=l(),Qa=a("p"),DV=r("preprocesses "),r2=a("em"),xV=r("dataset_path"),EV=r(" and removes remote filesystem (e.g. removing "),o2=a("code"),kV=r("s3://"),IV=r(")"),n$=l(),es=a("div"),p(ap.$$.fragment),NV=l(),i2=a("p"),TV=r("Validates if filesystem has remote protocol."),r$=l(),ts=a("h2"),br=a("a"),l2=a("span"),p(sp.$$.fragment),PV=l(),d2=a("span"),AV=r("Fingerprint"),o$=l(),as=a("div"),p(np.$$.fragment),FV=l(),c2=a("p"),LV=r("Hasher that accepts python objects as inputs."),this.h()},l(i){const y=fX('[data-svelte="svelte-1phssyn"]',document.head);O=s(y,"META",{name:!0,content:!0}),y.forEach(t),gt=d(i),q=s(i,"H1",{class:!0});var rp=n(q);ne=s(rp,"A",{id:!0,class:!0,href:!0});var nM=n(ne);ra=s(nM,"SPAN",{});var rM=n(ra);m(ue.$$.fragment,rM),rM.forEach(t),nM.forEach(t),Yr=d(rp),oa=s(rp,"SPAN",{});var oM=n(oa);_t=o(oM,"Main classes"),oM.forEach(t),rp.forEach(t),rs=d(i),ge=s(i,"H2",{class:!0});var l$=n(ge);de=s(l$,"A",{id:!0,class:!0,href:!0});var iM=n(de);J=s(iM,"SPAN",{});var lM=n(J);m(vt.$$.fragment,lM),lM.forEach(t),iM.forEach(t),ip=d(l$),os=s(l$,"SPAN",{});var dM=n(os);u0=o(dM,"DatasetInfo"),dM.forEach(t),l$.forEach(t),m2=d(i),B=s(i,"DIV",{class:!0});var Ue=n(B);m(Jr.$$.fragment,Ue),g0=d(Ue),yf=s(Ue,"P",{});var cM=n(yf);_0=o(cM,"Information about a dataset."),cM.forEach(t),v0=d(Ue),lp=s(Ue,"P",{});var OV=n(lp);$f=s(OV,"EM",{});var pM=n($f);b0=o(pM,"DatasetInfo"),pM.forEach(t),y0=o(OV,` documents datasets, including its name, version, and features.
See the constructor arguments and properties for a full list.`),OV.forEach(t),$0=d(Ue),wf=s(Ue,"P",{});var mM=n(wf);w0=o(mM,"Note: Not all fields are known on construction and may be updated later."),mM.forEach(t),D0=d(Ue),ke=s(Ue,"DIV",{class:!0});var yr=n(ke);m(Xr.$$.fragment,yr),x0=d(yr),Zr=s(yr,"P",{});var d$=n(Zr);E0=o(d$,"Create DatasetInfo from the JSON file in "),Df=s(d$,"CODE",{});var hM=n(Df);k0=o(hM,"dataset_info_dir"),hM.forEach(t),I0=o(d$,"."),d$.forEach(t),N0=d(yr),xf=s(yr,"P",{});var fM=n(xf);T0=o(fM,`This function updates all the dynamically generated fields (num_examples,
hash, time of creation,\u2026) of the DatasetInfo.`),fM.forEach(t),P0=d(yr),Ef=s(yr,"P",{});var uM=n(Ef);A0=o(uM,"This will overwrite all previous metadata."),uM.forEach(t),yr.forEach(t),F0=d(Ue),bt=s(Ue,"DIV",{class:!0});var hh=n(bt);m(Qr.$$.fragment,hh),L0=d(hh),ia=s(hh,"P",{});var fh=n(ia);O0=o(fh,"Write "),kf=s(fh,"CODE",{});var gM=n(kf);S0=o(gM,"DatasetInfo"),gM.forEach(t),C0=o(fh," as JSON to "),If=s(fh,"CODE",{});var _M=n(If);j0=o(_M,"dataset_info_dir"),_M.forEach(t),q0=o(fh,"."),fh.forEach(t),z0=d(hh),Nf=s(hh,"P",{});var vM=n(Nf);V0=o(vM,"Also save the license separately in LICENCE."),vM.forEach(t),hh.forEach(t),Ue.forEach(t),h2=d(i),la=s(i,"H2",{class:!0});var c$=n(la);is=s(c$,"A",{id:!0,class:!0,href:!0});var bM=n(is);Tf=s(bM,"SPAN",{});var yM=n(Tf);m(eo.$$.fragment,yM),yM.forEach(t),bM.forEach(t),M0=d(c$),Pf=s(c$,"SPAN",{});var $M=n(Pf);U0=o($M,"Dataset"),$M.forEach(t),c$.forEach(t),f2=d(i),ls=s(i,"P",{});var p$=n(ls);R0=o(p$,"The base class "),dp=s(p$,"A",{href:!0});var wM=n(dp);B0=o(wM,"datasets.Dataset"),wM.forEach(t),H0=o(p$," implements a Dataset backed by an Apache Arrow table."),p$.forEach(t),u2=d(i),v=s(i,"DIV",{class:!0});var b=n(v);m(to.$$.fragment,b),G0=d(b),Af=s(b,"P",{});var DM=n(Af);K0=o(DM,"A Dataset backed by an Arrow table."),DM.forEach(t),W0=d(b),yt=s(b,"DIV",{class:!0});var uh=n(yt);m(ao.$$.fragment,uh),Y0=d(uh),Ff=s(uh,"P",{});var xM=n(Ff);J0=o(xM,"Add column to Dataset."),xM.forEach(t),X0=d(uh),Lf=s(uh,"P",{});var EM=n(Lf);Of=s(EM,"EM",{});var kM=n(Of);Z0=o(kM,"New in version 1.7."),kM.forEach(t),EM.forEach(t),uh.forEach(t),Q0=d(b),$t=s(b,"DIV",{class:!0});var gh=n($t);m(so.$$.fragment,gh),ex=d(gh),Sf=s(gh,"P",{});var IM=n(Sf);tx=o(IM,"Add item to Dataset."),IM.forEach(t),ax=d(gh),Cf=s(gh,"P",{});var NM=n(Cf);jf=s(NM,"EM",{});var TM=n(jf);sx=o(TM,"New in version 1.7."),TM.forEach(t),NM.forEach(t),gh.forEach(t),nx=d(b),ds=s(b,"DIV",{class:!0});var m$=n(ds);m(no.$$.fragment,m$),rx=d(m$),qf=s(m$,"P",{});var PM=n(qf);ox=o(PM,"Instantiate a Dataset backed by an Arrow table at filename."),PM.forEach(t),m$.forEach(t),ix=d(b),cs=s(b,"DIV",{class:!0});var h$=n(cs);m(ro.$$.fragment,h$),lx=d(h$),zf=s(h$,"P",{});var AM=n(zf);dx=o(AM,"Instantiate a Dataset backed by an Arrow buffer."),AM.forEach(t),h$.forEach(t),cx=d(b),Ie=s(b,"DIV",{class:!0});var $r=n(Ie);m(oo.$$.fragment,$r),px=d($r),et=s($r,"P",{});var wr=n(et);mx=o(wr,"Convert "),Vf=s(wr,"CODE",{});var FM=n(Vf);hx=o(FM,"pandas.DataFrame"),FM.forEach(t),fx=o(wr," to a "),Mf=s(wr,"CODE",{});var LM=n(Mf);ux=o(LM,"pyarrow.Table"),LM.forEach(t),gx=o(wr," to create a "),cp=s(wr,"A",{href:!0});var OM=n(cp);_x=o(OM,"Dataset"),OM.forEach(t),vx=o(wr,"."),wr.forEach(t),bx=d($r),io=s($r,"P",{});var f$=n(io);yx=o(f$,`The column types in the resulting Arrow Table are inferred from the dtypes of the pandas.Series in the
DataFrame. In the case of non-object Series, the NumPy dtype is translated to its Arrow equivalent. In the
case of `),Uf=s(f$,"EM",{});var SM=n(Uf);$x=o(SM,"object"),SM.forEach(t),wx=o(f$,", we need to guess the datatype by looking at the Python objects in this Series."),f$.forEach(t),Dx=d($r),lo=s($r,"P",{});var u$=n(lo);xx=o(u$,"Be aware that Series of the "),Rf=s(u$,"EM",{});var CM=n(Rf);Ex=o(CM,"object"),CM.forEach(t),kx=o(u$,` dtype don\u2019t carry enough information to always lead to a meaningful Arrow
type. In the case that we cannot infer a type, e.g. because the DataFrame is of length 0 or the Series only
contains None/nan objects, the type is set to null. This behavior can be avoided by constructing explicit
features and passing it to this function.`),u$.forEach(t),$r.forEach(t),Ix=d(b),ps=s(b,"DIV",{class:!0});var g$=n(ps);m(co.$$.fragment,g$),Nx=d(g$),tt=s(g$,"P",{});var Dr=n(tt);Tx=o(Dr,"Convert "),Bf=s(Dr,"CODE",{});var jM=n(Bf);Px=o(jM,"dict"),jM.forEach(t),Ax=o(Dr," to a "),Hf=s(Dr,"CODE",{});var qM=n(Hf);Fx=o(qM,"pyarrow.Table"),qM.forEach(t),Lx=o(Dr," to create a "),pp=s(Dr,"A",{href:!0});var zM=n(pp);Ox=o(zM,"Dataset"),zM.forEach(t),Sx=o(Dr,"."),Dr.forEach(t),g$.forEach(t),Cx=d(b),ms=s(b,"DIV",{class:!0});var _$=n(ms);m(po.$$.fragment,_$),jx=d(_$),Gf=s(_$,"P",{});var VM=n(Gf);qx=o(VM,"The Apache Arrow table backing the dataset."),VM.forEach(t),_$.forEach(t),zx=d(b),hs=s(b,"DIV",{class:!0});var v$=n(hs);m(mo.$$.fragment,v$),Vx=d(v$),Kf=s(v$,"P",{});var MM=n(Kf);Mx=o(MM,"The cache files containing the Apache Arrow table backing the dataset."),MM.forEach(t),v$.forEach(t),Ux=d(b),fs=s(b,"DIV",{class:!0});var b$=n(fs);m(ho.$$.fragment,b$),Rx=d(b$),Wf=s(b$,"P",{});var UM=n(Wf);Bx=o(UM,"Number of columns in the dataset."),UM.forEach(t),b$.forEach(t),Hx=d(b),us=s(b,"DIV",{class:!0});var y$=n(us);m(fo.$$.fragment,y$),Gx=d(y$),uo=s(y$,"P",{});var $$=n(uo);Kx=o($$,"Number of rows in the dataset (same as "),gs=s($$,"A",{href:!0});var w$=n(gs);Wx=o(w$,"Dataset."),Yf=s(w$,"STRONG",{});var RM=n(Yf);Yx=o(RM,"len"),RM.forEach(t),Jx=o(w$,"()"),w$.forEach(t),Xx=o($$,")."),$$.forEach(t),y$.forEach(t),Zx=d(b),_s=s(b,"DIV",{class:!0});var D$=n(_s);m(go.$$.fragment,D$),Qx=d(D$),Jf=s(D$,"P",{});var BM=n(Jf);e8=o(BM,"Names of the columns in the dataset."),BM.forEach(t),D$.forEach(t),t8=d(b),vs=s(b,"DIV",{class:!0});var x$=n(vs);m(_o.$$.fragment,x$),a8=d(x$),Xf=s(x$,"P",{});var HM=n(Xf);s8=o(HM,"Shape of the dataset (number of columns, number of rows)."),HM.forEach(t),x$.forEach(t),n8=d(b),wt=s(b,"DIV",{class:!0});var _h=n(wt);m(vo.$$.fragment,_h),r8=d(_h),Zf=s(_h,"P",{});var GM=n(Zf);o8=o(GM,"Return a list of the unique elements in a column."),GM.forEach(t),i8=d(_h),Qf=s(_h,"P",{});var KM=n(Qf);l8=o(KM,"This is implemented in the low-level backend and as such, very fast."),KM.forEach(t),_h.forEach(t),d8=d(b),bs=s(b,"DIV",{class:!0});var E$=n(bs);m(bo.$$.fragment,E$),c8=d(E$),eu=s(E$,"P",{});var WM=n(eu);p8=o(WM,`Flatten the table.
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),WM.forEach(t),E$.forEach(t),m8=d(b),ys=s(b,"DIV",{class:!0});var k$=n(ys);m(yo.$$.fragment,k$),h8=d(k$),tu=s(k$,"P",{});var YM=n(tu);f8=o(YM,"Cast the dataset to a new set of features."),YM.forEach(t),k$.forEach(t),u8=d(b),$s=s(b,"DIV",{class:!0});var I$=n($s);m($o.$$.fragment,I$),g8=d(I$),au=s(I$,"P",{});var JM=n(au);_8=o(JM,"Cast column to feature for decoding."),JM.forEach(t),I$.forEach(t),v8=d(b),Dt=s(b,"DIV",{class:!0});var vh=n(Dt);m(wo.$$.fragment,vh),b8=d(vh),su=s(vh,"P",{});var XM=n(su);y8=o(XM,"Remove one or several column(s) in the dataset and the features associated to them."),XM.forEach(t),$8=d(vh),da=s(vh,"P",{});var bh=n(da);w8=o(bh,"You can also remove a column using "),mp=s(bh,"A",{href:!0});var ZM=n(mp);D8=o(ZM,"Dataset.map()"),ZM.forEach(t),x8=o(bh," with "),nu=s(bh,"EM",{});var QM=n(nu);E8=o(QM,"remove_columns"),QM.forEach(t),k8=o(bh,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),bh.forEach(t),vh.forEach(t),I8=d(b),ws=s(b,"DIV",{class:!0});var N$=n(ws);m(Do.$$.fragment,N$),N8=d(N$),ru=s(N$,"P",{});var eU=n(ru);T8=o(eU,`Rename a column in the dataset, and move the features associated to the original column under the new column
name.`),eU.forEach(t),N$.forEach(t),P8=d(b),Ds=s(b,"DIV",{class:!0});var T$=n(Ds);m(xo.$$.fragment,T$),A8=d(T$),Eo=s(T$,"P",{});var P$=n(Eo);F8=o(P$,"Casts the given column as :obj:"),ou=s(P$,"CODE",{});var tU=n(ou);L8=o(tU,"datasets.features.ClassLabel"),tU.forEach(t),O8=o(P$," and updates the table."),P$.forEach(t),T$.forEach(t),S8=d(b),xs=s(b,"DIV",{class:!0});var A$=n(xs);m(ko.$$.fragment,A$),C8=d(A$),iu=s(A$,"P",{});var aU=n(iu);j8=o(aU,"Number of rows in the dataset."),aU.forEach(t),A$.forEach(t),q8=d(b),xt=s(b,"DIV",{class:!0});var yh=n(xt);m(Io.$$.fragment,yh),z8=d(yh),lu=s(yh,"P",{});var sU=n(lu);V8=o(sU,"Iterate through the examples."),sU.forEach(t),M8=d(yh),No=s(yh,"P",{});var F$=n(No);U8=o(F$,"If a formatting is set with "),hp=s(F$,"A",{href:!0});var nU=n(hp);R8=o(nU,"Dataset.set_format()"),nU.forEach(t),B8=o(F$,` rows will be returned with the
selected format.`),F$.forEach(t),yh.forEach(t),H8=d(b),Es=s(b,"DIV",{class:!0});var L$=n(Es);m(To.$$.fragment,L$),G8=d(L$),ca=s(L$,"P",{});var $h=n(ca);K8=o($h,"To be used in a "),du=s($h,"CODE",{});var rU=n(du);W8=o(rU,"with"),rU.forEach(t),Y8=o($h," statement. Set "),cu=s($h,"CODE",{});var oU=n(cu);J8=o(oU,"__getitem__"),oU.forEach(t),X8=o($h," return format (type and columns)."),$h.forEach(t),L$.forEach(t),Z8=d(b),Ne=s(b,"DIV",{class:!0});var xr=n(Ne);m(Po.$$.fragment,xr),Q8=d(xr),_e=s(xr,"P",{});var Bt=n(_e);e3=o(Bt,"Set "),pu=s(Bt,"STRONG",{});var iU=n(pu);t3=o(iU,"getitem"),iU.forEach(t),a3=o(Bt,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),mu=s(Bt,"CODE",{});var lU=n(mu);s3=o(lU,"type"),lU.forEach(t),n3=o(Bt," (for example \u201Cnumpy\u201D) is used to format batches when using "),hu=s(Bt,"STRONG",{});var dU=n(hu);r3=o(dU,"getitem"),dU.forEach(t),o3=o(Bt,`.
It\u2019s also possible to use custom transforms for formatting using `),fp=s(Bt,"A",{href:!0});var cU=n(fp);i3=o(cU,"datasets.Dataset.set_transform()"),cU.forEach(t),l3=o(Bt,"."),Bt.forEach(t),d3=d(xr),ve=s(xr,"P",{});var Ht=n(ve);c3=o(Ht,"It is possible to call "),fu=s(Ht,"CODE",{});var pU=n(fu);p3=o(pU,"map"),pU.forEach(t),m3=o(Ht," after calling "),uu=s(Ht,"CODE",{});var mU=n(uu);h3=o(mU,"set_format"),mU.forEach(t),f3=o(Ht,". Since "),gu=s(Ht,"CODE",{});var hU=n(gu);u3=o(hU,"map"),hU.forEach(t),g3=o(Ht,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),_u=s(Ht,"CODE",{});var fU=n(_u);_3=o(fU,"map"),fU.forEach(t),v3=o(Ht," on a dataset to add a new column, then this column will be formatted:"),Ht.forEach(t),b3=d(xr),vu=s(xr,"P",{});var uU=n(vu);y3=o(uU,"new formatted columns = (all columns - previously unformatted columns)"),uU.forEach(t),xr.forEach(t),$3=d(b),ks=s(b,"DIV",{class:!0});var O$=n(ks);m(Ao.$$.fragment,O$),w3=d(O$),Te=s(O$,"P",{});var ss=n(Te);D3=o(ss,"Set "),bu=s(ss,"STRONG",{});var gU=n(bu);x3=o(gU,"getitem"),gU.forEach(t),E3=o(ss," return format using this transform. The transform is applied on-the-fly on batches when "),yu=s(ss,"STRONG",{});var _U=n(yu);k3=o(_U,"getitem"),_U.forEach(t),I3=o(ss,` is called.
As `),up=s(ss,"A",{href:!0});var vU=n(up);N3=o(vU,"datasets.Dataset.set_format()"),vU.forEach(t),T3=o(ss,", this can be reset using "),gp=s(ss,"A",{href:!0});var bU=n(gp);P3=o(bU,"datasets.Dataset.reset_format()"),bU.forEach(t),ss.forEach(t),O$.forEach(t),A3=d(b),Et=s(b,"DIV",{class:!0});var wh=n(Et);m(Fo.$$.fragment,wh),F3=d(wh),Lo=s(wh,"P",{});var S$=n(Lo);L3=o(S$,"Reset "),$u=s(S$,"STRONG",{});var yU=n($u);O3=o(yU,"getitem"),yU.forEach(t),S3=o(S$," return format to python objects and all columns."),S$.forEach(t),C3=d(wh),_p=s(wh,"P",{});var SV=n(_p);j3=o(SV,"Same as "),wu=s(SV,"CODE",{});var $U=n(wu);q3=o($U,"self.set_format()"),$U.forEach(t),SV.forEach(t),wh.forEach(t),z3=d(b),Pe=s(b,"DIV",{class:!0});var Er=n(Pe);m(Oo.$$.fragment,Er),V3=d(Er),at=s(Er,"P",{});var kr=n(at);M3=o(kr,"Set "),Du=s(kr,"STRONG",{});var wU=n(Du);U3=o(wU,"getitem"),wU.forEach(t),R3=o(kr,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),xu=s(kr,"CODE",{});var DU=n(xu);B3=o(DU,"type"),DU.forEach(t),H3=o(kr," (for example \u201Cnumpy\u201D) is used to format batches when using "),Eu=s(kr,"STRONG",{});var xU=n(Eu);G3=o(xU,"getitem"),xU.forEach(t),K3=o(kr,"."),kr.forEach(t),W3=d(Er),So=s(Er,"P",{});var C$=n(So);Y3=o(C$,"It\u2019s also possible to use custom transforms for formatting using "),vp=s(C$,"A",{href:!0});var EU=n(vp);J3=o(EU,"datasets.Dataset.with_transform()"),EU.forEach(t),X3=o(C$,"."),C$.forEach(t),Z3=d(Er),pa=s(Er,"P",{});var Dh=n(pa);Q3=o(Dh,"Contrary to "),bp=s(Dh,"A",{href:!0});var kU=n(bp);e4=o(kU,"datasets.Dataset.set_format()"),kU.forEach(t),t4=o(Dh,", "),ku=s(Dh,"CODE",{});var IU=n(ku);a4=o(IU,"with_format"),IU.forEach(t),s4=o(Dh," returns a new Dataset object."),Dh.forEach(t),Er.forEach(t),n4=d(b),Ae=s(b,"DIV",{class:!0});var Ir=n(Ae);m(Co.$$.fragment,Ir),r4=d(Ir),ma=s(Ir,"P",{});var xh=n(ma);o4=o(xh,"Set "),Iu=s(xh,"STRONG",{});var NU=n(Iu);i4=o(NU,"getitem"),NU.forEach(t),l4=o(xh," return format using this transform. The transform is applied on-the-fly on batches when "),Nu=s(xh,"STRONG",{});var TU=n(Nu);d4=o(TU,"getitem"),TU.forEach(t),c4=o(xh," is called."),xh.forEach(t),p4=d(Ir),ha=s(Ir,"P",{});var Eh=n(ha);m4=o(Eh,"As "),yp=s(Eh,"A",{href:!0});var PU=n(yp);h4=o(PU,"datasets.Dataset.set_format()"),PU.forEach(t),f4=o(Eh,", this can be reset using "),$p=s(Eh,"A",{href:!0});var AU=n($p);u4=o(AU,"datasets.Dataset.reset_format()"),AU.forEach(t),g4=o(Eh,"."),Eh.forEach(t),_4=d(Ir),fa=s(Ir,"P",{});var kh=n(fa);v4=o(kh,"Contrary to "),wp=s(kh,"A",{href:!0});var FU=n(wp);b4=o(FU,"datasets.Dataset.set_transform()"),FU.forEach(t),y4=o(kh,", "),Tu=s(kh,"CODE",{});var LU=n(Tu);$4=o(LU,"with_transform"),LU.forEach(t),w4=o(kh," returns a new Dataset object."),kh.forEach(t),Ir.forEach(t),D4=d(b),Is=s(b,"DIV",{class:!0});var j$=n(Is);m(jo.$$.fragment,j$),x4=d(j$),Pu=s(j$,"P",{});var OU=n(Pu);E4=o(OU,"Can be used to index columns (by string names) or rows (by integer index or iterable of indices or bools)."),OU.forEach(t),j$.forEach(t),k4=d(b),kt=s(b,"DIV",{class:!0});var Ih=n(kt);m(qo.$$.fragment,Ih),I4=d(Ih),Au=s(Ih,"P",{});var SU=n(Au);N4=o(SU,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is
one.`),SU.forEach(t),T4=d(Ih),Fu=s(Ih,"P",{});var CU=n(Fu);P4=o(CU,"Be careful when running this command that no other process is currently using other cache files."),CU.forEach(t),Ih.forEach(t),A4=d(b),Fe=s(b,"DIV",{class:!0});var Nr=n(Fe);m(zo.$$.fragment,Nr),F4=d(Nr),Lu=s(Nr,"P",{});var jU=n(Lu);L4=o(jU,`Apply a function to all the examples in the table (individually or in batches) and update the table.
If your function returns a column that already exists, then it overwrites it.`),jU.forEach(t),O4=d(Nr),Vo=s(Nr,"P",{});var q$=n(Vo);S4=o(q$,"You can specify whether the function should be batched or not with the "),Ou=s(q$,"CODE",{});var qU=n(Ou);C4=o(qU,"batched"),qU.forEach(t),j4=o(q$," parameter:"),q$.forEach(t),q4=d(Nr),ua=s(Nr,"UL",{});var Nh=n(ua);Su=s(Nh,"LI",{});var zU=n(Su);z4=o(zU,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),zU.forEach(t),V4=d(Nh),Cu=s(Nh,"LI",{});var VU=n(Cu);M4=o(VU,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),VU.forEach(t),U4=d(Nh),re=s(Nh,"LI",{});var Re=n(re);R4=o(Re,"If batched is True and batch_size is "),ju=s(Re,"CODE",{});var MU=n(ju);B4=o(MU,"n"),MU.forEach(t),H4=o(Re," > 1, then the function takes a batch of "),qu=s(Re,"CODE",{});var UU=n(qu);G4=o(UU,"n"),UU.forEach(t),K4=o(Re," examples as input and can return a batch with "),zu=s(Re,"CODE",{});var RU=n(zu);W4=o(RU,"n"),RU.forEach(t),Y4=o(Re,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),Vu=s(Re,"CODE",{});var BU=n(Vu);J4=o(BU,"n"),BU.forEach(t),X4=o(Re,` examples.
A batch is a dictionary, e.g. a batch of `),Mu=s(Re,"CODE",{});var HU=n(Mu);Z4=o(HU,"n"),HU.forEach(t),Q4=o(Re," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Re.forEach(t),Nh.forEach(t),Nr.forEach(t),eE=d(b),Ns=s(b,"DIV",{class:!0});var z$=n(Ns);m(Mo.$$.fragment,z$),tE=d(z$),Uu=s(z$,"P",{});var GU=n(Uu);aE=o(GU,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.`),GU.forEach(t),z$.forEach(t),sE=d(b),Ts=s(b,"DIV",{class:!0});var V$=n(Ts);m(Uo.$$.fragment,V$),nE=d(V$),Ru=s(V$,"P",{});var KU=n(Ru);rE=o(KU,"Create a new dataset with rows selected following the list/array of indices."),KU.forEach(t),V$.forEach(t),oE=d(b),It=s(b,"DIV",{class:!0});var Th=n(It);m(Ro.$$.fragment,Th),iE=d(Th),Bu=s(Th,"P",{});var WU=n(Bu);lE=o(WU,"Create a new dataset sorted according to a column."),WU.forEach(t),dE=d(Th),Hu=s(Th,"P",{});var YU=n(Hu);cE=o(YU,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),YU.forEach(t),Th.forEach(t),pE=d(b),Nt=s(b,"DIV",{class:!0});var Ph=n(Nt);m(Bo.$$.fragment,Ph),mE=d(Ph),Gu=s(Ph,"P",{});var JU=n(Gu);hE=o(JU,"Create a new Dataset where the rows are shuffled."),JU.forEach(t),fE=d(Ph),Ku=s(Ph,"P",{});var XU=n(Ku);uE=o(XU,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),XU.forEach(t),Ph.forEach(t),gE=d(b),Tt=s(b,"DIV",{class:!0});var Ah=n(Tt);m(Ho.$$.fragment,Ah),_E=d(Ah),z=s(Ah,"P",{});var ee=n(z);vE=o(ee,"Return a dictionary ("),Wu=s(ee,"CODE",{});var ZU=n(Wu);bE=o(ZU,"datasets.DatsetDict"),ZU.forEach(t),yE=o(ee,") with two random train and test subsets ("),Yu=s(ee,"EM",{});var QU=n(Yu);$E=o(QU,"train"),QU.forEach(t),wE=o(ee," and "),Ju=s(ee,"EM",{});var eR=n(Ju);DE=o(eR,"test"),eR.forEach(t),xE=d(ee),Xu=s(ee,"CODE",{});var tR=n(Xu);EE=o(tR,"Dataset"),tR.forEach(t),kE=o(ee,` splits).
Splits are created from the dataset according to `),Zu=s(ee,"EM",{});var aR=n(Zu);IE=o(aR,"test_size"),aR.forEach(t),NE=o(ee,", "),Qu=s(ee,"EM",{});var sR=n(Qu);TE=o(sR,"train_size"),sR.forEach(t),PE=o(ee," and "),eg=s(ee,"EM",{});var nR=n(eg);AE=o(nR,"shuffle"),nR.forEach(t),FE=o(ee,"."),ee.forEach(t),LE=d(Ah),Go=s(Ah,"P",{});var M$=n(Go);OE=o(M$,"This method is similar to scikit-learn "),tg=s(M$,"EM",{});var rR=n(tg);SE=o(rR,"train_test_split"),rR.forEach(t),CE=o(M$," with the omission of the stratified options."),M$.forEach(t),Ah.forEach(t),jE=d(b),ce=s(b,"DIV",{class:!0});var Gt=n(ce);m(Ko.$$.fragment,Gt),qE=d(Gt),ga=s(Gt,"P",{});var Fh=n(ga);zE=o(Fh,"Return the "),ag=s(Fh,"EM",{});var oR=n(ag);VE=o(oR,"index"),oR.forEach(t),ME=o(Fh,"-nth shard from dataset split into "),sg=s(Fh,"EM",{});var iR=n(sg);UE=o(iR,"num_shards"),iR.forEach(t),RE=o(Fh," pieces."),Fh.forEach(t),BE=d(Gt),ng=s(Gt,"P",{});var lR=n(ng);HE=o(lR,`This shards deterministically. dset.shard(n, i) will contain all elements of dset whose
index mod n = i.`),lR.forEach(t),GE=d(Gt),Wo=s(Gt,"P",{});var U$=n(Wo);KE=o(U$,`dset.shard(n, i, contiguous=True) will instead split dset into contiguous chunks,
so it can be easily concatenated back together after processing. If n % i == l, then the
first l shards will have length (n // i) + 1, and the remaining shards will have length (n // i).
`),rg=s(U$,"EM",{});var dR=n(rg);WE=o(dR,"datasets.concatenate([dset.shard(n, i, contiguous=True) for i in range(n)])"),dR.forEach(t),YE=o(U$,` will return
a dataset with the same order as the original.`),U$.forEach(t),JE=d(Gt),og=s(Gt,"P",{});var cR=n(og);XE=o(cR,`Be sure to shard before using any randomizing operator (such as shuffle).
It is best if the shard operator is used early in the dataset pipeline.`),cR.forEach(t),Gt.forEach(t),ZE=d(b),Ps=s(b,"DIV",{class:!0});var R$=n(Ps);m(Yo.$$.fragment,R$),QE=d(R$),ig=s(R$,"P",{});var pR=n(ig);ek=o(pR,`Create a tf.data.Dataset from the underlying Dataset. This tf.data.Dataset will load and collate batches from
the Dataset, and is suitable for passing to methods like model.fit() or model.predict().`),pR.forEach(t),R$.forEach(t),tk=d(b),pe=s(b,"DIV",{class:!0});var Kt=n(pe);m(Jo.$$.fragment,Kt),ak=d(Kt),lg=s(Kt,"P",{});var mR=n(lg);sk=o(mR,`Pushes the dataset to the hub.
The dataset is pushed using HTTP requests and does not need to have neither git or git-lfs installed.`),mR.forEach(t),nk=d(Kt),dg=s(Kt,"P",{});var hR=n(dg);rk=o(hR,"Example:"),hR.forEach(t),ok=d(Kt),Dp=s(Kt,"P",{});var CV=n(Dp);cg=s(CV,"CODE",{});var fR=n(cg);ik=o(fR,"python "),fR.forEach(t),lk=o(CV,"py"),CV.forEach(t),dk=d(Kt),pg=s(Kt,"BLOCKQUOTE",{});var uR=n(pg);mg=s(uR,"BLOCKQUOTE",{});var gR=n(mg);hg=s(gR,"BLOCKQUOTE",{});var _R=n(hg);xp=s(_R,"P",{});var jV=n(xp);ck=o(jV,`dataset.push_to_hub(\u201D<organization>/<dataset_id>\u201D, split=\u201Cevaluation\u201D)
`),g2=s(jV,"CODE",{});var oX=n(g2);oX.forEach(t),jV.forEach(t),_R.forEach(t),gR.forEach(t),uR.forEach(t),Kt.forEach(t),pk=d(b),As=s(b,"DIV",{class:!0});var B$=n(As);m(Xo.$$.fragment,B$),mk=d(B$),_a=s(B$,"P",{});var Lh=n(_a);hk=o(Lh,"Saves a dataset to a dataset directory, or in a filesystem using either "),Ep=s(Lh,"A",{href:!0});var vR=n(Ep);fk=o(vR,"S3FileSystem"),vR.forEach(t),uk=o(Lh,` or
any implementation of `),fg=s(Lh,"CODE",{});var bR=n(fg);gk=o(bR,"fsspec.spec.AbstractFileSystem"),bR.forEach(t),_k=o(Lh,"."),Lh.forEach(t),B$.forEach(t),vk=d(b),Fs=s(b,"DIV",{class:!0});var H$=n(Fs);m(Zo.$$.fragment,H$),bk=d(H$),st=s(H$,"P",{});var Tr=n(st);yk=o(Tr,"Loads a dataset that was previously saved using "),ug=s(Tr,"CODE",{});var yR=n(ug);$k=o(yR,"save_to_disk"),yR.forEach(t),wk=o(Tr,` from a dataset directory, or from a
filesystem using either `),kp=s(Tr,"A",{href:!0});var $R=n(kp);Dk=o($R,"S3FileSystem"),$R.forEach(t),xk=o(Tr,` or any implementation of
`),gg=s(Tr,"CODE",{});var wR=n(gg);Ek=o(wR,"fsspec.spec.AbstractFileSystem"),wR.forEach(t),kk=o(Tr,"."),Tr.forEach(t),H$.forEach(t),Ik=d(b),Ls=s(b,"DIV",{class:!0});var G$=n(Ls);m(Qo.$$.fragment,G$),Nk=d(G$),_g=s(G$,"P",{});var DR=n(_g);Tk=o(DR,"Create and cache a new Dataset by flattening the indices mapping."),DR.forEach(t),G$.forEach(t),Pk=d(b),Os=s(b,"DIV",{class:!0});var K$=n(Os);m(ei.$$.fragment,K$),Ak=d(K$),vg=s(K$,"P",{});var xR=n(vg);Fk=o(xR,"Exports the dataset to csv"),xR.forEach(t),K$.forEach(t),Lk=d(b),Ss=s(b,"DIV",{class:!0});var W$=n(Ss);m(ti.$$.fragment,W$),Ok=d(W$),ai=s(W$,"P",{});var Y$=n(ai);Sk=o(Y$,"Returns the dataset as a "),bg=s(Y$,"CODE",{});var ER=n(bg);Ck=o(ER,"pandas.DataFrame"),ER.forEach(t),jk=o(Y$,". Can also return a generator for large datasets."),Y$.forEach(t),W$.forEach(t),qk=d(b),Cs=s(b,"DIV",{class:!0});var J$=n(Cs);m(si.$$.fragment,J$),zk=d(J$),yg=s(J$,"P",{});var kR=n(yg);Vk=o(kR,"Returns the dataset as a Python dict. Can also return a generator for large datasets."),kR.forEach(t),J$.forEach(t),Mk=d(b),js=s(b,"DIV",{class:!0});var X$=n(js);m(ni.$$.fragment,X$),Uk=d(X$),$g=s(X$,"P",{});var IR=n($g);Rk=o(IR,"Export the dataset to JSON Lines or JSON."),IR.forEach(t),X$.forEach(t),Bk=d(b),qs=s(b,"DIV",{class:!0});var Z$=n(qs);m(ri.$$.fragment,Z$),Hk=d(Z$),wg=s(Z$,"P",{});var NR=n(wg);Gk=o(NR,"Exports the dataset to parquet"),NR.forEach(t),Z$.forEach(t),Kk=d(b),T=s(b,"DIV",{class:!0});var A=n(T);m(oi.$$.fragment,A),Wk=d(A),va=s(A,"P",{});var Oh=n(va);Yk=o(Oh,`Add a dense index using Faiss for fast retrieval.
By default the index is done over the vectors of the specified column.
You can specify `),Dg=s(Oh,"CODE",{});var TR=n(Dg);Jk=o(TR,"device"),TR.forEach(t),Xk=o(Oh," if you want to run it on GPU ("),xg=s(Oh,"CODE",{});var PR=n(xg);Zk=o(PR,"device"),PR.forEach(t),Qk=o(Oh,` must be the GPU index).
You can find more information about Faiss here:`),Oh.forEach(t),e7=d(A),Eg=s(A,"UL",{});var AR=n(Eg);Ip=s(AR,"LI",{});var qV=n(Ip);t7=o(qV,"For "),ii=s(qV,"A",{href:!0,rel:!0});var FR=n(ii);a7=o(FR,"string factory"),FR.forEach(t),qV.forEach(t),AR.forEach(t),s7=d(A),kg=s(A,"P",{});var LR=n(kg);n7=o(LR,"Example:"),LR.forEach(t),r7=d(A),Np=s(A,"P",{});var zV=n(Np);Ig=s(zV,"CODE",{});var OR=n(Ig);o7=o(OR,"python "),OR.forEach(t),i7=o(zV,`py
ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)
ds_with_embeddings = ds.map(lambda example: {\u2018embeddings\u2019: embed(example[\u2018line\u2019]}))
ds_with_embeddings.add_faiss_index(column=\u2018embeddings\u2019)`),zV.forEach(t),l7=d(A),zs=s(A,"H1",{class:!0});var Q$=n(zs);Vs=s(Q$,"A",{id:!0,class:!0,href:!0});var SR=n(Vs);Ng=s(SR,"SPAN",{});var CR=n(Ng);m(li.$$.fragment,CR),CR.forEach(t),SR.forEach(t),d7=d(Q$),Tg=s(Q$,"SPAN",{});var jR=n(Tg);c7=o(jR,"query"),jR.forEach(t),Q$.forEach(t),p7=d(A),Pg=s(A,"P",{});var qR=n(Pg);m7=o(qR,"scores, retrieved_examples = ds_with_embeddings.get_nearest_examples(\u2018embeddings\u2019, embed(\u2018my new query\u2019), k=10)"),qR.forEach(t),h7=d(A),Ms=s(A,"H1",{class:!0});var ew=n(Ms);Us=s(ew,"A",{id:!0,class:!0,href:!0});var zR=n(Us);Ag=s(zR,"SPAN",{});var VR=n(Ag);m(di.$$.fragment,VR),VR.forEach(t),zR.forEach(t),f7=d(ew),Fg=s(ew,"SPAN",{});var MR=n(Fg);u7=o(MR,"save index"),MR.forEach(t),ew.forEach(t),g7=d(A),Lg=s(A,"P",{});var UR=n(Lg);_7=o(UR,"ds_with_embeddings.save_faiss_index(\u2018embeddings\u2019, \u2018my_index.faiss\u2019)"),UR.forEach(t),v7=d(A),Og=s(A,"P",{});var RR=n(Og);b7=o(RR,"ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)"),RR.forEach(t),y7=d(A),Rs=s(A,"H1",{class:!0});var tw=n(Rs);Bs=s(tw,"A",{id:!0,class:!0,href:!0});var BR=n(Bs);Sg=s(BR,"SPAN",{});var HR=n(Sg);m(ci.$$.fragment,HR),HR.forEach(t),BR.forEach(t),$7=d(tw),Cg=s(tw,"SPAN",{});var GR=n(Cg);w7=o(GR,"load index"),GR.forEach(t),tw.forEach(t),D7=d(A),jg=s(A,"P",{});var KR=n(jg);x7=o(KR,"ds.load_faiss_index(\u2018embeddings\u2019, \u2018my_index.faiss\u2019)"),KR.forEach(t),E7=d(A),Hs=s(A,"H1",{class:!0});var aw=n(Hs);Gs=s(aw,"A",{id:!0,class:!0,href:!0});var WR=n(Gs);qg=s(WR,"SPAN",{});var YR=n(qg);m(pi.$$.fragment,YR),YR.forEach(t),WR.forEach(t),k7=d(aw),zg=s(aw,"SPAN",{});var JR=n(zg);I7=o(JR,"query"),JR.forEach(t),aw.forEach(t),N7=d(A),Tp=s(A,"P",{});var VV=n(Tp);T7=o(VV,`scores, retrieved_examples = ds.get_nearest_examples(\u2018embeddings\u2019, embed(\u2018my new query\u2019), k=10)
`),_2=s(VV,"CODE",{});var iX=n(_2);iX.forEach(t),VV.forEach(t),A.forEach(t),P7=d(b),Pt=s(b,"DIV",{class:!0});var Sh=n(Pt);m(mi.$$.fragment,Sh),A7=d(Sh),nt=s(Sh,"P",{});var Pr=n(nt);F7=o(Pr,`Add a dense index using Faiss for fast retrieval.
The index is created using the vectors of `),Vg=s(Pr,"EM",{});var XR=n(Vg);L7=o(XR,"external_arrays"),XR.forEach(t),O7=o(Pr,`.
You can specify `),Mg=s(Pr,"EM",{});var ZR=n(Mg);S7=o(ZR,"device"),ZR.forEach(t),C7=o(Pr," if you want to run it on GPU ("),Ug=s(Pr,"EM",{});var QR=n(Ug);j7=o(QR,"device"),QR.forEach(t),q7=o(Pr,` must be the GPU index).
You can find more information about Faiss here:`),Pr.forEach(t),z7=d(Sh),Rg=s(Sh,"UL",{});var eB=n(Rg);Pp=s(eB,"LI",{});var MV=n(Pp);V7=o(MV,"For "),hi=s(MV,"A",{href:!0,rel:!0});var tB=n(hi);M7=o(tB,"string factory"),tB.forEach(t),MV.forEach(t),eB.forEach(t),Sh.forEach(t),U7=d(b),Ks=s(b,"DIV",{class:!0});var sw=n(Ks);m(fi.$$.fragment,sw),R7=d(sw),Bg=s(sw,"P",{});var aB=n(Bg);B7=o(aB,"Save a FaissIndex on disk."),aB.forEach(t),sw.forEach(t),H7=d(b),At=s(b,"DIV",{class:!0});var Ch=n(At);m(ui.$$.fragment,Ch),G7=d(Ch),Hg=s(Ch,"P",{});var sB=n(Hg);K7=o(sB,"Load a FaissIndex from disk."),sB.forEach(t),W7=d(Ch),gi=s(Ch,"P",{});var nw=n(gi);Y7=o(nw,`If you want to do additional configurations, you can have access to the faiss index object by doing
`),Gg=s(nw,"EM",{});var nB=n(Gg);J7=o(nB,".get_index(index_name).faiss_index"),nB.forEach(t),X7=o(nw," to make it fit your needs."),nw.forEach(t),Ch.forEach(t),Z7=d(b),X=s(b,"DIV",{class:!0});var Be=n(X);m(_i.$$.fragment,Be),Q7=d(Be),Kg=s(Be,"P",{});var rB=n(Kg);e5=o(rB,"Add a text index using ElasticSearch for fast retrieval. This is done in-place."),rB.forEach(t),t5=d(Be),Wg=s(Be,"P",{});var oB=n(Wg);a5=o(oB,"Default config is:"),oB.forEach(t),s5=d(Be),m(vi.$$.fragment,Be),n5=d(Be),Yg=s(Be,"P",{});var iB=n(Yg);r5=o(iB,"Example:"),iB.forEach(t),o5=d(Be),bi=s(Be,"P",{});var rw=n(bi);Jg=s(rw,"CODE",{});var lB=n(Jg);i5=o(lB,"python "),lB.forEach(t),l5=o(rw,`py
es_client = elasticsearch.Elasticsearch()
ds = datasets.load_dataset(\u2018crime_and_punish\u2019, split=\u2018train\u2019)
ds.add_elasticsearch_index(column=\u2018line\u2019, es_client=es_client, es_index_name=\u201Cmy_es_index\u201D)
scores, retrieved_examples = ds.get_nearest_examples(\u2018line\u2019, \u2018my new query\u2019, k=10)
`),v2=s(rw,"CODE",{});var lX=n(v2);lX.forEach(t),rw.forEach(t),Be.forEach(t),d5=d(b),Le=s(b,"DIV",{class:!0});var Ar=n(Le);m(yi.$$.fragment,Ar),c5=d(Ar),Xg=s(Ar,"P",{});var dB=n(Xg);p5=o(dB,"Load an existing text index using ElasticSearch for fast retrieval."),dB.forEach(t),m5=d(Ar),Zg=s(Ar,"P",{});var cB=n(Zg);h5=o(cB,"Default config is:"),cB.forEach(t),f5=d(Ar),m($i.$$.fragment,Ar),Ar.forEach(t),u5=d(b),Ws=s(b,"DIV",{class:!0});var ow=n(Ws);m(wi.$$.fragment,ow),g5=d(ow),Qg=s(ow,"P",{});var pB=n(Qg);_5=o(pB,"List the colindex_nameumns/identifiers of all the attached indexes."),pB.forEach(t),ow.forEach(t),v5=d(b),Ys=s(b,"DIV",{class:!0});var iw=n(Ys);m(Di.$$.fragment,iw),b5=d(iw),e_=s(iw,"P",{});var mB=n(e_);y5=o(mB,"List the index_name/identifiers of all the attached indexes."),mB.forEach(t),iw.forEach(t),$5=d(b),Js=s(b,"DIV",{class:!0});var lw=n(Js);m(xi.$$.fragment,lw),w5=d(lw),t_=s(lw,"P",{});var hB=n(t_);D5=o(hB,"Drop the index with the specified column."),hB.forEach(t),lw.forEach(t),x5=d(b),Xs=s(b,"DIV",{class:!0});var dw=n(Xs);m(Ei.$$.fragment,dw),E5=d(dw),a_=s(dw,"P",{});var fB=n(a_);k5=o(fB,"Find the nearest examples indices in the dataset to the query."),fB.forEach(t),dw.forEach(t),I5=d(b),Zs=s(b,"DIV",{class:!0});var cw=n(Zs);m(ki.$$.fragment,cw),N5=d(cw),s_=s(cw,"P",{});var uB=n(s_);T5=o(uB,"Find the nearest examples indices in the dataset to the query."),uB.forEach(t),cw.forEach(t),P5=d(b),Qs=s(b,"DIV",{class:!0});var pw=n(Qs);m(Ii.$$.fragment,pw),A5=d(pw),n_=s(pw,"P",{});var gB=n(n_);F5=o(gB,"Find the nearest examples in the dataset to the query."),gB.forEach(t),pw.forEach(t),L5=d(b),en=s(b,"DIV",{class:!0});var mw=n(en);m(Ni.$$.fragment,mw),O5=d(mw),r_=s(mw,"P",{});var _B=n(r_);S5=o(_B,"Find the nearest examples in the dataset to the query."),_B.forEach(t),mw.forEach(t),C5=d(b),tn=s(b,"DIV",{class:!0});var hw=n(tn);m(Ti.$$.fragment,hw),j5=d(hw),Ap=s(hw,"P",{});var UV=n(Ap);Fp=s(UV,"A",{href:!0});var vB=n(Fp);q5=o(vB,"datasets.DatasetInfo"),vB.forEach(t),z5=o(UV," object containing all the metadata in the dataset."),UV.forEach(t),hw.forEach(t),V5=d(b),an=s(b,"DIV",{class:!0});var fw=n(an);m(Pi.$$.fragment,fw),M5=d(fw),Lp=s(fw,"P",{});var RV=n(Lp);Op=s(RV,"A",{href:!0});var bB=n(Op);U5=o(bB,"datasets.NamedSplit"),bB.forEach(t),R5=o(RV," object corresponding to a named dataset split."),RV.forEach(t),fw.forEach(t),B5=d(b),Sp=s(b,"DIV",{class:!0});var yB=n(Sp);m(Ai.$$.fragment,yB),yB.forEach(t),H5=d(b),Cp=s(b,"DIV",{class:!0});var $B=n(Cp);m(Fi.$$.fragment,$B),$B.forEach(t),G5=d(b),jp=s(b,"DIV",{class:!0});var wB=n(jp);m(Li.$$.fragment,wB),wB.forEach(t),K5=d(b),qp=s(b,"DIV",{class:!0});var DB=n(qp);m(Oi.$$.fragment,DB),DB.forEach(t),W5=d(b),zp=s(b,"DIV",{class:!0});var xB=n(zp);m(Si.$$.fragment,xB),xB.forEach(t),Y5=d(b),Vp=s(b,"DIV",{class:!0});var EB=n(Vp);m(Ci.$$.fragment,EB),EB.forEach(t),J5=d(b),Mp=s(b,"DIV",{class:!0});var kB=n(Mp);m(ji.$$.fragment,kB),kB.forEach(t),X5=d(b),Up=s(b,"DIV",{class:!0});var IB=n(Up);m(qi.$$.fragment,IB),IB.forEach(t),Z5=d(b),Rp=s(b,"DIV",{class:!0});var NB=n(Rp);m(zi.$$.fragment,NB),NB.forEach(t),Q5=d(b),Bp=s(b,"DIV",{class:!0});var TB=n(Bp);m(Vi.$$.fragment,TB),TB.forEach(t),eI=d(b),Hp=s(b,"DIV",{class:!0});var PB=n(Hp);m(Mi.$$.fragment,PB),PB.forEach(t),tI=d(b),Gp=s(b,"DIV",{class:!0});var AB=n(Gp);m(Ui.$$.fragment,AB),AB.forEach(t),aI=d(b),Kp=s(b,"DIV",{class:!0});var FB=n(Kp);m(Ri.$$.fragment,FB),FB.forEach(t),sI=d(b),sn=s(b,"DIV",{class:!0});var uw=n(sn);m(Bi.$$.fragment,uw),nI=d(uw),o_=s(uw,"P",{});var LB=n(o_);rI=o(LB,"Create Dataset from CSV file(s)."),LB.forEach(t),uw.forEach(t),oI=d(b),nn=s(b,"DIV",{class:!0});var gw=n(nn);m(Hi.$$.fragment,gw),iI=d(gw),i_=s(gw,"P",{});var OB=n(i_);lI=o(OB,"Create Dataset from JSON or JSON Lines file(s)."),OB.forEach(t),gw.forEach(t),dI=d(b),rn=s(b,"DIV",{class:!0});var _w=n(rn);m(Gi.$$.fragment,_w),cI=d(_w),l_=s(_w,"P",{});var SB=n(l_);pI=o(SB,"Create Dataset from Parquet file(s)."),SB.forEach(t),_w.forEach(t),mI=d(b),on=s(b,"DIV",{class:!0});var vw=n(on);m(Ki.$$.fragment,vw),hI=d(vw),d_=s(vw,"P",{});var CB=n(d_);fI=o(CB,"Create Dataset from text file(s)."),CB.forEach(t),vw.forEach(t),uI=d(b),Ft=s(b,"DIV",{class:!0});var jh=n(Ft);m(Wi.$$.fragment,jh),gI=d(jh),ba=s(jh,"P",{});var qh=n(ba);_I=o(qh,"Prepare a dataset for the given task by casting the dataset\u2019s "),Wp=s(qh,"A",{href:!0});var jB=n(Wp);vI=o(jB,"Features"),jB.forEach(t),bI=o(qh," to standardized column names and types as detailed in "),Yp=s(qh,"A",{href:!0});var qB=n(Yp);yI=o(qB,"datasets.tasks"),qB.forEach(t),$I=o(qh,"."),qh.forEach(t),wI=d(jh),ya=s(jh,"P",{});var zh=n(ya);DI=o(zh,"Casts "),c_=s(zh,"CODE",{});var zB=n(c_);xI=o(zB,"datasets.DatasetInfo.features"),zB.forEach(t),EI=o(zh," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),p_=s(zh,"CODE",{});var VB=n(p_);kI=o(VB,"datasets.DatasetInfo.task_templates"),VB.forEach(t),II=o(zh," after casting."),zh.forEach(t),jh.forEach(t),NI=d(b),C=s(b,"DIV",{class:!0});var te=n(C);m(Yi.$$.fragment,te),TI=d(te),Ji=s(te,"P",{});var bw=n(Ji);PI=o(bw,"Align the dataset\u2019s label ID and label name mapping to match an input "),m_=s(bw,"CODE",{});var MB=n(m_);AI=o(MB,"label2id"),MB.forEach(t),FI=o(bw,` mapping.
This is useful when you want to ensure that a model\u2019s predicted labels are aligned with the dataset.
The alignment in done using the lowercase label names.`),bw.forEach(t),LI=d(te),h_=s(te,"P",{});var UB=n(h_);OI=o(UB,"Example:"),UB.forEach(t),SI=d(te),Jp=s(te,"P",{});var BV=n(Jp);f_=s(BV,"CODE",{});var RB=n(f_);CI=o(RB,"python "),RB.forEach(t),jI=o(BV,"py"),BV.forEach(t),qI=d(te),ln=s(te,"H1",{class:!0});var yw=n(ln);dn=s(yw,"A",{id:!0,class:!0,href:!0});var BB=n(dn);u_=s(BB,"SPAN",{});var HB=n(u_);m(Xi.$$.fragment,HB),HB.forEach(t),BB.forEach(t),zI=d(yw),g_=s(yw,"SPAN",{});var GB=n(g_);VI=o(GB,"dataset with mapping {\u2018entailment\u2019: 0, \u2018neutral\u2019: 1, \u2018contradiction\u2019: 2}"),GB.forEach(t),yw.forEach(t),MI=d(te),__=s(te,"P",{});var KB=n(__);UI=o(KB,"ds = load_dataset(\u201Cglue\u201D, \u201Cmnli\u201D, split=\u201Ctrain\u201D)"),KB.forEach(t),RI=d(te),cn=s(te,"H1",{class:!0});var $w=n(cn);pn=s($w,"A",{id:!0,class:!0,href:!0});var WB=n(pn);v_=s(WB,"SPAN",{});var YB=n(v_);m(Zi.$$.fragment,YB),YB.forEach(t),WB.forEach(t),BI=d($w),b_=s($w,"SPAN",{});var JB=n(b_);HI=o(JB,"mapping to align with"),JB.forEach(t),$w.forEach(t),GI=d(te),Xp=s(te,"P",{});var HV=n(Xp);KI=o(HV,`label2id = {\u2018CONTRADICTION\u2019: 0, \u2018NEUTRAL\u2019: 1, \u2018ENTAILMENT\u2019: 2}
ds_aligned = ds.align_labels_with_mapping(label2id, \u201Clabel\u201D)
`),b2=s(HV,"CODE",{});var dX=n(b2);dX.forEach(t),HV.forEach(t),te.forEach(t),b.forEach(t),y2=d(i),$a=s(i,"DIV",{class:!0});var ww=n($a);m(Qi.$$.fragment,ww),WI=d(ww),wa=s(ww,"P",{});var Vh=n(wa);YI=o(Vh,"Converts a list of "),Zp=s(Vh,"A",{href:!0});var XB=n(Zp);JI=o(XB,"Dataset"),XB.forEach(t),XI=o(Vh," with the same schema into a single "),Qp=s(Vh,"A",{href:!0});var ZB=n(Qp);ZI=o(ZB,"Dataset"),ZB.forEach(t),QI=o(Vh,"."),Vh.forEach(t),ww.forEach(t),$2=d(i),V=s(i,"DIV",{class:!0});var fe=n(V);m(el.$$.fragment,fe),e6=d(fe),y_=s(fe,"P",{});var QB=n(y_);t6=o(QB,`Interleave several datasets (sources) into a single dataset.
The new dataset is constructed by alternating between the sources to get the examples.`),QB.forEach(t),a6=d(fe),Da=s(fe,"P",{});var Mh=n(Da);s6=o(Mh,"You can use this function on a list of "),em=s(Mh,"A",{href:!0});var eH=n(em);n6=o(eH,"Dataset"),eH.forEach(t),r6=o(Mh," objects, or on a list of "),tm=s(Mh,"A",{href:!0});var tH=n(tm);o6=o(tH,"IterableDataset"),tH.forEach(t),i6=o(Mh," objects."),Mh.forEach(t),l6=d(fe),be=s(fe,"P",{});var Wt=n(be);d6=o(Wt,"If "),$_=s(Wt,"CODE",{});var aH=n($_);c6=o(aH,"probabilities"),aH.forEach(t),p6=o(Wt," is "),w_=s(Wt,"CODE",{});var sH=n(w_);m6=o(sH,"None"),sH.forEach(t),h6=o(Wt,` (default) the new dataset is constructed by cycling between each source to get the examples.
If `),D_=s(Wt,"CODE",{});var nH=n(D_);f6=o(nH,"probabilities"),nH.forEach(t),u6=o(Wt," is not "),x_=s(Wt,"CODE",{});var rH=n(x_);g6=o(rH,"None"),rH.forEach(t),_6=o(Wt,", the new dataset is constructed by getting examples from a random source at a time according to the provided probabilities."),Wt.forEach(t),v6=d(fe),E_=s(fe,"P",{});var oH=n(E_);b6=o(oH,"The resulting dataset ends when one of the source datasets runs out of examples."),oH.forEach(t),y6=d(fe),k_=s(fe,"P",{});var iH=n(k_);$6=o(iH,"Example:"),iH.forEach(t),w6=d(fe),m(tl.$$.fragment,fe),fe.forEach(t),w2=d(i),oe=s(i,"DIV",{class:!0});var Yt=n(oe);m(al.$$.fragment,Yt),D6=d(Yt),I_=s(Yt,"P",{});var lH=n(I_);x6=o(lH,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),lH.forEach(t),E6=d(Yt),N_=s(Yt,"P",{});var dH=n(N_);k6=o(dH,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),dH.forEach(t),I6=d(Yt),T_=s(Yt,"P",{});var cH=n(T_);N6=o(cH,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),cH.forEach(t),T6=d(Yt),ye=s(Yt,"UL",{});var Jt=n(ye);P_=s(Jt,"LI",{});var pH=n(P_);P6=o(pH,"cache files are always recreated"),pH.forEach(t),A6=d(Jt),A_=s(Jt,"LI",{});var mH=n(A_);F6=o(mH,"cache files are written to a temporary directory that is deleted when session closes"),mH.forEach(t),L6=d(Jt),F_=s(Jt,"LI",{});var hH=n(F_);O6=o(hH,"cache files are named using a random hash instead of the dataset fingerprint"),hH.forEach(t),S6=d(Jt),sl=s(Jt,"LI",{});var Dw=n(sl);C6=o(Dw,"use "),am=s(Dw,"A",{href:!0});var fH=n(am);j6=o(fH,"datasets.Dataset.save_to_disk()"),fH.forEach(t),q6=o(Dw," to save a transformed dataset or it will be deleted when session closes"),Dw.forEach(t),z6=d(Jt),rt=s(Jt,"LI",{});var Fr=n(rt);V6=o(Fr,"caching doesn\u2019t affect "),sm=s(Fr,"A",{href:!0});var uH=n(sm);M6=o(uH,"datasets.load_dataset()"),uH.forEach(t),U6=o(Fr,`. If you want to regenerate a dataset from scratch you should use
the `),L_=s(Fr,"CODE",{});var gH=n(L_);R6=o(gH,"download_mode"),gH.forEach(t),B6=o(Fr," parameter in "),nm=s(Fr,"A",{href:!0});var _H=n(nm);H6=o(_H,"datasets.load_dataset()"),_H.forEach(t),G6=o(Fr,"."),Fr.forEach(t),Jt.forEach(t),Yt.forEach(t),D2=d(i),ie=s(i,"DIV",{class:!0});var Xt=n(ie);m(nl.$$.fragment,Xt),K6=d(Xt),O_=s(Xt,"P",{});var vH=n(O_);W6=o(vH,`When applying transforms on a dataset, the data are stored in cache files.
The caching mechanism allows to reload an existing cache file if it\u2019s already been computed.`),vH.forEach(t),Y6=d(Xt),S_=s(Xt,"P",{});var bH=n(S_);J6=o(bH,`Reloading a dataset is possible since the cache files are named using the dataset fingerprint, which is updated
after each transform.`),bH.forEach(t),X6=d(Xt),C_=s(Xt,"P",{});var yH=n(C_);Z6=o(yH,`If disabled, the library will no longer reload cached datasets files when applying transforms to the datasets.
More precisely, if the caching is disabled:`),yH.forEach(t),Q6=d(Xt),$e=s(Xt,"UL",{});var Zt=n($e);j_=s(Zt,"LI",{});var $H=n(j_);e9=o($H,"cache files are always recreated"),$H.forEach(t),t9=d(Zt),q_=s(Zt,"LI",{});var wH=n(q_);a9=o(wH,"cache files are written to a temporary directory that is deleted when session closes"),wH.forEach(t),s9=d(Zt),z_=s(Zt,"LI",{});var DH=n(z_);n9=o(DH,"cache files are named using a random hash instead of the dataset fingerprint"),DH.forEach(t),r9=d(Zt),rl=s(Zt,"LI",{});var xw=n(rl);o9=o(xw,"use "),rm=s(xw,"A",{href:!0});var xH=n(rm);i9=o(xH,"datasets.Dataset.save_to_disk()"),xH.forEach(t),l9=o(xw," to save a transformed dataset or it will be deleted when session closes"),xw.forEach(t),d9=d(Zt),ot=s(Zt,"LI",{});var Lr=n(ot);c9=o(Lr,"caching doesn\u2019t affect "),om=s(Lr,"A",{href:!0});var EH=n(om);p9=o(EH,"datasets.load_dataset()"),EH.forEach(t),m9=o(Lr,`. If you want to regenerate a dataset from scratch you should use
the `),V_=s(Lr,"CODE",{});var kH=n(V_);h9=o(kH,"download_mode"),kH.forEach(t),f9=o(Lr," parameter in "),im=s(Lr,"A",{href:!0});var IH=n(im);u9=o(IH,"datasets.load_dataset()"),IH.forEach(t),g9=o(Lr,"."),Lr.forEach(t),Zt.forEach(t),Xt.forEach(t),x2=d(i),xa=s(i,"DIV",{class:!0});var Ew=n(xa);m(ol.$$.fragment,Ew),_9=d(Ew),M_=s(Ew,"P",{});var NH=n(M_);v9=o(NH,"Enable/disable tqdm progress bars."),NH.forEach(t),Ew.forEach(t),E2=d(i),Ea=s(i,"DIV",{class:!0});var kw=n(Ea);m(il.$$.fragment,kw),b9=d(kw),U_=s(kw,"P",{});var TH=n(U_);y9=o(TH,"Return a boolean indicating whether tqdm progress bars are enabled."),TH.forEach(t),kw.forEach(t),k2=d(i),ka=s(i,"H2",{class:!0});var Iw=n(ka);mn=s(Iw,"A",{id:!0,class:!0,href:!0});var PH=n(mn);R_=s(PH,"SPAN",{});var AH=n(R_);m(ll.$$.fragment,AH),AH.forEach(t),PH.forEach(t),$9=d(Iw),B_=s(Iw,"SPAN",{});var FH=n(B_);w9=o(FH,"DatasetDict"),FH.forEach(t),Iw.forEach(t),I2=d(i),hn=s(i,"P",{});var Nw=n(hn);D9=o(Nw,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),H_=s(Nw,"CODE",{});var LH=n(H_);x9=o(LH,"datasets.Dataset"),LH.forEach(t),E9=o(Nw,` objects as values.
It also has dataset transform methods like map or filter, to process all the splits at once.`),Nw.forEach(t),N2=d(i),w=s(i,"DIV",{class:!0});var D=n(w);m(dl.$$.fragment,D),k9=d(D),G_=s(D,"P",{});var OH=n(G_);I9=o(OH,"A dictionary (dict of str: datasets.Dataset) with dataset transforms methods (map, filter, etc.)"),OH.forEach(t),N9=d(D),fn=s(D,"DIV",{class:!0});var Tw=n(fn);m(cl.$$.fragment,Tw),T9=d(Tw),K_=s(Tw,"P",{});var SH=n(K_);P9=o(SH,"The Apache Arrow tables backing each split."),SH.forEach(t),Tw.forEach(t),A9=d(D),un=s(D,"DIV",{class:!0});var Pw=n(un);m(pl.$$.fragment,Pw),F9=d(Pw),W_=s(Pw,"P",{});var CH=n(W_);L9=o(CH,"The cache files containing the Apache Arrow table backing each split."),CH.forEach(t),Pw.forEach(t),O9=d(D),gn=s(D,"DIV",{class:!0});var Aw=n(gn);m(ml.$$.fragment,Aw),S9=d(Aw),Y_=s(Aw,"P",{});var jH=n(Y_);C9=o(jH,"Number of columns in each split of the dataset."),jH.forEach(t),Aw.forEach(t),j9=d(D),_n=s(D,"DIV",{class:!0});var Fw=n(_n);m(hl.$$.fragment,Fw),q9=d(Fw),fl=s(Fw,"P",{});var Lw=n(fl);z9=o(Lw,"Number of rows in each split of the dataset (same as "),vn=s(Lw,"A",{href:!0});var Ow=n(vn);V9=o(Ow,"datasets.Dataset."),J_=s(Ow,"STRONG",{});var qH=n(J_);M9=o(qH,"len"),qH.forEach(t),U9=o(Ow,"()"),Ow.forEach(t),R9=o(Lw,")."),Lw.forEach(t),Fw.forEach(t),B9=d(D),bn=s(D,"DIV",{class:!0});var Sw=n(bn);m(ul.$$.fragment,Sw),H9=d(Sw),X_=s(Sw,"P",{});var zH=n(X_);G9=o(zH,"Names of the columns in each split of the dataset."),zH.forEach(t),Sw.forEach(t),K9=d(D),yn=s(D,"DIV",{class:!0});var Cw=n(yn);m(gl.$$.fragment,Cw),W9=d(Cw),Z_=s(Cw,"P",{});var VH=n(Z_);Y9=o(VH,"Shape of each split of the dataset (number of columns, number of rows)."),VH.forEach(t),Cw.forEach(t),J9=d(D),Lt=s(D,"DIV",{class:!0});var Uh=n(Lt);m(_l.$$.fragment,Uh),X9=d(Uh),Q_=s(Uh,"P",{});var MH=n(Q_);Z9=o(MH,"Return a list of the unique elements in a column for each split."),MH.forEach(t),Q9=d(Uh),e1=s(Uh,"P",{});var UH=n(e1);eN=o(UH,"This is implemented in the low-level backend and as such, very fast."),UH.forEach(t),Uh.forEach(t),tN=d(D),$n=s(D,"DIV",{class:!0});var jw=n($n);m(vl.$$.fragment,jw),aN=d(jw),t1=s(jw,"P",{});var RH=n(t1);sN=o(RH,`Clean up all cache files in the dataset cache directory, excepted the currently used cache file if there is one.
Be carefull when running this command that no other process is currently using other cache files.`),RH.forEach(t),jw.forEach(t),nN=d(D),wn=s(D,"DIV",{class:!0});var qw=n(wn);m(bl.$$.fragment,qw),rN=d(qw),a1=s(qw,"P",{});var BH=n(a1);oN=o(BH,`Apply a function to all the elements in the table (individually or in batches)
and update the table (if function does updated examples).
The transformation is applied to all the datasets of the dataset dictionary.`),BH.forEach(t),qw.forEach(t),iN=d(D),Dn=s(D,"DIV",{class:!0});var zw=n(Dn);m(yl.$$.fragment,zw),lN=d(zw),s1=s(zw,"P",{});var HH=n(s1);dN=o(HH,`Apply a filter function to all the elements in the table in batches
and update the table so that the dataset only includes examples according to the filter function.
The transformation is applied to all the datasets of the dataset dictionary.`),HH.forEach(t),zw.forEach(t),cN=d(D),Ot=s(D,"DIV",{class:!0});var Rh=n(Ot);m($l.$$.fragment,Rh),pN=d(Rh),n1=s(Rh,"P",{});var GH=n(n1);mN=o(GH,`Create a new dataset sorted according to a column.
The transformation is applied to all the datasets of the dataset dictionary.`),GH.forEach(t),hN=d(Rh),r1=s(Rh,"P",{});var KH=n(r1);fN=o(KH,`Currently sorting according to a column name uses pandas sorting algorithm under the hood.
The column should thus be a pandas compatible type (in particular not a nested type).
This also means that the column used for sorting is fully loaded in memory (which should be fine in most cases).`),KH.forEach(t),Rh.forEach(t),uN=d(D),Oe=s(D,"DIV",{class:!0});var Or=n(Oe);m(wl.$$.fragment,Or),gN=d(Or),o1=s(Or,"P",{});var WH=n(o1);_N=o(WH,"Create a new Dataset where the rows are shuffled."),WH.forEach(t),vN=d(Or),i1=s(Or,"P",{});var YH=n(i1);bN=o(YH,"The transformation is applied to all the datasets of the dataset dictionary."),YH.forEach(t),yN=d(Or),l1=s(Or,"P",{});var JH=n(l1);$N=o(JH,`Currently shuffling uses numpy random generators.
You can either supply a NumPy BitGenerator to use, or a seed to initiate NumPy\u2019s default random generator (PCG64).`),JH.forEach(t),Or.forEach(t),wN=d(D),Se=s(D,"DIV",{class:!0});var Sr=n(Se);m(Dl.$$.fragment,Sr),DN=d(Sr),xl=s(Sr,"P",{});var Vw=n(xl);xN=o(Vw,"Set "),d1=s(Vw,"CODE",{});var XH=n(d1);EN=o(XH,"__getitem__"),XH.forEach(t),kN=o(Vw,` return format (type and columns)
The format is set for every dataset in the dataset dictionary`),Vw.forEach(t),IN=d(Sr),we=s(Sr,"P",{});var Qt=n(we);NN=o(Qt,"It is possible to call "),c1=s(Qt,"CODE",{});var ZH=n(c1);TN=o(ZH,"map"),ZH.forEach(t),PN=o(Qt," after calling "),p1=s(Qt,"CODE",{});var QH=n(p1);AN=o(QH,"set_format"),QH.forEach(t),FN=o(Qt,". Since "),m1=s(Qt,"CODE",{});var eG=n(m1);LN=o(eG,"map"),eG.forEach(t),ON=o(Qt,` may add new columns, then the list of formatted columns
gets updated. In this case, if you apply `),h1=s(Qt,"CODE",{});var tG=n(h1);SN=o(tG,"map"),tG.forEach(t),CN=o(Qt," on a dataset to add a new column, then this column will be formatted:"),Qt.forEach(t),jN=d(Sr),f1=s(Sr,"P",{});var aG=n(f1);qN=o(aG,"new formatted columns = (all columns - previously unformatted columns)"),aG.forEach(t),Sr.forEach(t),zN=d(D),St=s(D,"DIV",{class:!0});var Bh=n(St);m(El.$$.fragment,Bh),VN=d(Bh),kl=s(Bh,"P",{});var Mw=n(kl);MN=o(Mw,"Reset "),u1=s(Mw,"CODE",{});var sG=n(u1);UN=o(sG,"__getitem__"),sG.forEach(t),RN=o(Mw,` return format to python objects and all columns.
The transformation is applied to all the datasets of the dataset dictionary.`),Mw.forEach(t),BN=d(Bh),lm=s(Bh,"P",{});var GV=n(lm);HN=o(GV,"Same as "),g1=s(GV,"CODE",{});var nG=n(g1);GN=o(nG,"self.set_format()"),nG.forEach(t),GV.forEach(t),Bh.forEach(t),KN=d(D),xn=s(D,"DIV",{class:!0});var Uw=n(xn);m(Il.$$.fragment,Uw),WN=d(Uw),Ia=s(Uw,"P",{});var Hh=n(Ia);YN=o(Hh,"To be used in a "),_1=s(Hh,"EM",{});var rG=n(_1);JN=o(rG,"with"),rG.forEach(t),XN=o(Hh," statement. Set "),v1=s(Hh,"CODE",{});var oG=n(v1);ZN=o(oG,"__getitem__"),oG.forEach(t),QN=o(Hh,` return format (type and columns)
The transformation is applied to all the datasets of the dataset dictionary.`),Hh.forEach(t),Uw.forEach(t),eT=d(D),Ce=s(D,"DIV",{class:!0});var Cr=n(Ce);m(Nl.$$.fragment,Cr),tT=d(Cr),it=s(Cr,"P",{});var jr=n(it);aT=o(jr,"Set "),b1=s(jr,"CODE",{});var iG=n(b1);sT=o(iG,"__getitem__"),iG.forEach(t),nT=o(jr,` return format (type and columns). The data formatting is applied on-the-fly.
The format `),y1=s(jr,"CODE",{});var lG=n(y1);rT=o(lG,"type"),lG.forEach(t),oT=o(jr," (for example \u201Cnumpy\u201D) is used to format batches when using "),$1=s(jr,"CODE",{});var dG=n($1);iT=o(dG,"__getitem__"),dG.forEach(t),lT=o(jr,`.
The format is set for every dataset in the dataset dictionary`),jr.forEach(t),dT=d(Cr),Tl=s(Cr,"P",{});var Rw=n(Tl);cT=o(Rw,"It\u2019s also possible to use custom transforms for formatting using "),dm=s(Rw,"A",{href:!0});var cG=n(dm);pT=o(cG,"datasets.Dataset.with_transform()"),cG.forEach(t),mT=o(Rw,"."),Rw.forEach(t),hT=d(Cr),Na=s(Cr,"P",{});var Gh=n(Na);fT=o(Gh,"Contrary to "),cm=s(Gh,"A",{href:!0});var pG=n(cm);uT=o(pG,"datasets.DatasetDict.set_format()"),pG.forEach(t),gT=o(Gh,", "),w1=s(Gh,"CODE",{});var mG=n(w1);_T=o(mG,"with_format"),mG.forEach(t),vT=o(Gh," returns a new DatasetDict object with new Dataset objects."),Gh.forEach(t),Cr.forEach(t),bT=d(D),je=s(D,"DIV",{class:!0});var qr=n(je);m(Pl.$$.fragment,qr),yT=d(qr),Ta=s(qr,"P",{});var Kh=n(Ta);$T=o(Kh,"Set "),D1=s(Kh,"CODE",{});var hG=n(D1);wT=o(hG,"__getitem__"),hG.forEach(t),DT=o(Kh," return format using this transform. The transform is applied on-the-fly on batches when "),x1=s(Kh,"CODE",{});var fG=n(x1);xT=o(fG,"__getitem__"),fG.forEach(t),ET=o(Kh,` is called.
The transform is set for every dataset in the dataset dictionary`),Kh.forEach(t),kT=d(qr),Pa=s(qr,"P",{});var Wh=n(Pa);IT=o(Wh,"As "),pm=s(Wh,"A",{href:!0});var uG=n(pm);NT=o(uG,"datasets.Dataset.set_format()"),uG.forEach(t),TT=o(Wh,", this can be reset using "),mm=s(Wh,"A",{href:!0});var gG=n(mm);PT=o(gG,"datasets.Dataset.reset_format()"),gG.forEach(t),AT=o(Wh,"."),Wh.forEach(t),FT=d(qr),Aa=s(qr,"P",{});var Yh=n(Aa);LT=o(Yh,"Contrary to "),E1=s(Yh,"CODE",{});var _G=n(E1);OT=o(_G,"datasets.DatasetDict.set_transform()"),_G.forEach(t),ST=d(Yh),k1=s(Yh,"CODE",{});var vG=n(k1);CT=o(vG,"with_transform"),vG.forEach(t),jT=o(Yh," returns a new DatasetDict object with new Dataset objects."),Yh.forEach(t),qr.forEach(t),qT=d(D),En=s(D,"DIV",{class:!0});var Bw=n(En);m(Al.$$.fragment,Bw),zT=d(Bw),I1=s(Bw,"P",{});var bG=n(I1);VT=o(bG,`Flatten the Apache Arrow Table of each split (nested features are flatten).
Each column with a struct type is flattened into one column per struct field.
Other columns are left unchanged.`),bG.forEach(t),Bw.forEach(t),MT=d(D),Ct=s(D,"DIV",{class:!0});var Jh=n(Ct);m(Fl.$$.fragment,Jh),UT=d(Jh),N1=s(Jh,"P",{});var yG=n(N1);RT=o(yG,`Cast the dataset to a new set of features.
The transformation is applied to all the datasets of the dataset dictionary.`),yG.forEach(t),BT=d(Jh),lt=s(Jh,"P",{});var zr=n(lt);HT=o(zr,"You can also remove a column using "),hm=s(zr,"A",{href:!0});var $G=n(hm);GT=o($G,"Dataset.map()"),$G.forEach(t),KT=o(zr," with "),T1=s(zr,"EM",{});var wG=n(T1);WT=o(wG,"feature"),wG.forEach(t),YT=o(zr," but "),P1=s(zr,"CODE",{});var DG=n(P1);JT=o(DG,"cast_"),DG.forEach(t),XT=o(zr,`
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),zr.forEach(t),Jh.forEach(t),ZT=d(D),kn=s(D,"DIV",{class:!0});var Hw=n(kn);m(Ll.$$.fragment,Hw),QT=d(Hw),A1=s(Hw,"P",{});var xG=n(A1);eP=o(xG,"Cast column to feature for decoding."),xG.forEach(t),Hw.forEach(t),tP=d(D),qe=s(D,"DIV",{class:!0});var Vr=n(qe);m(Ol.$$.fragment,Vr),aP=d(Vr),F1=s(Vr,"P",{});var EG=n(F1);sP=o(EG,`Remove one or several column(s) from each split in the dataset
and the features associated to the column(s).`),EG.forEach(t),nP=d(Vr),L1=s(Vr,"P",{});var kG=n(L1);rP=o(kG,"The transformation is applied to all the splits of the dataset dictionary."),kG.forEach(t),oP=d(Vr),Fa=s(Vr,"P",{});var Xh=n(Fa);iP=o(Xh,"You can also remove a column using "),fm=s(Xh,"A",{href:!0});var IG=n(fm);lP=o(IG,"Dataset.map()"),IG.forEach(t),dP=o(Xh," with "),O1=s(Xh,"EM",{});var NG=n(O1);cP=o(NG,"remove_columns"),NG.forEach(t),pP=o(Xh,` but the present method
is in-place (doesn\u2019t copy the data to a new dataset) and is thus faster.`),Xh.forEach(t),Vr.forEach(t),mP=d(D),ze=s(D,"DIV",{class:!0});var Mr=n(ze);m(Sl.$$.fragment,Mr),hP=d(Mr),S1=s(Mr,"P",{});var TG=n(S1);fP=o(TG,`Rename a column in the dataset and move the features associated to the original column under the new column name.
The transformation is applied to all the datasets of the dataset dictionary.`),TG.forEach(t),uP=d(Mr),La=s(Mr,"P",{});var Zh=n(La);gP=o(Zh,"You can also rename a column using "),um=s(Zh,"A",{href:!0});var PG=n(um);_P=o(PG,"Dataset.map()"),PG.forEach(t),vP=o(Zh," with "),C1=s(Zh,"EM",{});var AG=n(C1);bP=o(AG,"remove_columns"),AG.forEach(t),yP=o(Zh," but the present method:"),Zh.forEach(t),$P=d(Mr),Cl=s(Mr,"UL",{});var Gw=n(Cl);j1=s(Gw,"LI",{});var FG=n(j1);wP=o(FG,"takes care of moving the original features under the new column name."),FG.forEach(t),DP=d(Gw),q1=s(Gw,"LI",{});var LG=n(q1);xP=o(LG,"doesn\u2019t copy the data to a new dataset and is thus much faster."),LG.forEach(t),Gw.forEach(t),Mr.forEach(t),EP=d(D),In=s(D,"DIV",{class:!0});var Kw=n(In);m(jl.$$.fragment,Kw),kP=d(Kw),ql=s(Kw,"P",{});var Ww=n(ql);IP=o(Ww,"Casts the given column as :obj:"),z1=s(Ww,"CODE",{});var OG=n(z1);NP=o(OG,"datasets.features.ClassLabel"),OG.forEach(t),TP=o(Ww," and updates the tables."),Ww.forEach(t),Kw.forEach(t),PP=d(D),Z=s(D,"DIV",{class:!0});var He=n(Z);m(zl.$$.fragment,He),AP=d(He),Oa=s(He,"P",{});var Qh=n(Oa);FP=o(Qh,"Pushes the "),V1=s(Qh,"CODE",{});var SG=n(V1);LP=o(SG,"DatasetDict"),SG.forEach(t),OP=o(Qh,` to the hub.
The `),M1=s(Qh,"CODE",{});var CG=n(M1);SP=o(CG,"DatasetDict"),CG.forEach(t),CP=o(Qh," is pushed using HTTP requests and does not need to have neither git or git-lfs installed."),Qh.forEach(t),jP=d(He),U1=s(He,"P",{});var jG=n(U1);qP=o(jG,"Each dataset split will be pushed independently. The pushed dataset will keep the original split names."),jG.forEach(t),zP=d(He),R1=s(He,"P",{});var qG=n(R1);VP=o(qG,"Example:"),qG.forEach(t),MP=d(He),gm=s(He,"P",{});var KV=n(gm);B1=s(KV,"CODE",{});var zG=n(B1);UP=o(zG,"python "),zG.forEach(t),RP=o(KV,"py"),KV.forEach(t),BP=d(He),H1=s(He,"BLOCKQUOTE",{});var VG=n(H1);G1=s(VG,"BLOCKQUOTE",{});var MG=n(G1);K1=s(MG,"BLOCKQUOTE",{});var UG=n(K1);_m=s(UG,"P",{});var WV=n(_m);HP=o(WV,`dataset_dict.push_to_hub(\u201D<organization>/<dataset_id>\u201C)
`),T2=s(WV,"CODE",{});var cX=n(T2);cX.forEach(t),WV.forEach(t),UG.forEach(t),MG.forEach(t),VG.forEach(t),He.forEach(t),GP=d(D),Nn=s(D,"DIV",{class:!0});var Yw=n(Nn);m(Vl.$$.fragment,Yw),KP=d(Yw),Sa=s(Yw,"P",{});var ef=n(Sa);WP=o(ef,"Saves a dataset dict to a filesystem using either "),vm=s(ef,"A",{href:!0});var RG=n(vm);YP=o(RG,"S3FileSystem"),RG.forEach(t),JP=o(ef,` or
`),W1=s(ef,"CODE",{});var BG=n(W1);XP=o(BG,"fsspec.spec.AbstractFileSystem"),BG.forEach(t),ZP=o(ef,"."),ef.forEach(t),Yw.forEach(t),QP=d(D),Tn=s(D,"DIV",{class:!0});var Jw=n(Tn);m(Ml.$$.fragment,Jw),eA=d(Jw),dt=s(Jw,"P",{});var Ur=n(dt);tA=o(Ur,"Load a dataset that was previously saved using "),Y1=s(Ur,"CODE",{});var HG=n(Y1);aA=o(HG,"save_to_disk"),HG.forEach(t),sA=o(Ur,` from a filesystem using either
`),bm=s(Ur,"A",{href:!0});var GG=n(bm);nA=o(GG,"S3FileSystem"),GG.forEach(t),rA=o(Ur," or "),J1=s(Ur,"CODE",{});var KG=n(J1);oA=o(KG,"fsspec.spec.AbstractFileSystem"),KG.forEach(t),iA=o(Ur,"."),Ur.forEach(t),Jw.forEach(t),lA=d(D),Pn=s(D,"DIV",{class:!0});var Xw=n(Pn);m(Ul.$$.fragment,Xw),dA=d(Xw),X1=s(Xw,"P",{});var WG=n(X1);cA=o(WG,"Create DatasetDict from CSV file(s)."),WG.forEach(t),Xw.forEach(t),pA=d(D),An=s(D,"DIV",{class:!0});var Zw=n(An);m(Rl.$$.fragment,Zw),mA=d(Zw),Z1=s(Zw,"P",{});var YG=n(Z1);hA=o(YG,"Create DatasetDict from JSON Lines file(s)."),YG.forEach(t),Zw.forEach(t),fA=d(D),Fn=s(D,"DIV",{class:!0});var Qw=n(Fn);m(Bl.$$.fragment,Qw),uA=d(Qw),Q1=s(Qw,"P",{});var JG=n(Q1);gA=o(JG,"Create DatasetDict from Parquet file(s)."),JG.forEach(t),Qw.forEach(t),_A=d(D),Ln=s(D,"DIV",{class:!0});var eD=n(Ln);m(Hl.$$.fragment,eD),vA=d(eD),ev=s(eD,"P",{});var XG=n(ev);bA=o(XG,"Create DatasetDict from text file(s)."),XG.forEach(t),eD.forEach(t),yA=d(D),jt=s(D,"DIV",{class:!0});var tf=n(jt);m(Gl.$$.fragment,tf),$A=d(tf),Ca=s(tf,"P",{});var af=n(Ca);wA=o(af,"Prepare a dataset for the given task by casting the dataset\u2019s "),ym=s(af,"A",{href:!0});var ZG=n(ym);DA=o(ZG,"Features"),ZG.forEach(t),xA=o(af," to standardized column names and types as detailed in "),$m=s(af,"A",{href:!0});var QG=n($m);EA=o(QG,"datasets.tasks"),QG.forEach(t),kA=o(af,"."),af.forEach(t),IA=d(tf),ja=s(tf,"P",{});var sf=n(ja);NA=o(sf,"Casts "),tv=s(sf,"CODE",{});var eK=n(tv);TA=o(eK,"datasets.DatasetInfo.features"),eK.forEach(t),PA=o(sf," according to a task-specific schema. Intended for single-use only, so all task templates are removed from "),av=s(sf,"CODE",{});var tK=n(av);AA=o(tK,"datasets.DatasetInfo.task_templates"),tK.forEach(t),FA=o(sf," after casting."),sf.forEach(t),tf.forEach(t),D.forEach(t),P2=d(i),wm=s(i,"A",{id:!0}),n(wm).forEach(t),A2=d(i),qa=s(i,"H2",{class:!0});var tD=n(qa);On=s(tD,"A",{id:!0,class:!0,href:!0});var aK=n(On);sv=s(aK,"SPAN",{});var sK=n(sv);m(Kl.$$.fragment,sK),sK.forEach(t),aK.forEach(t),LA=d(tD),nv=s(tD,"SPAN",{});var nK=n(nv);OA=o(nK,"IterableDataset"),nK.forEach(t),tD.forEach(t),F2=d(i),Sn=s(i,"P",{});var aD=n(Sn);SA=o(aD,"The base class "),Dm=s(aD,"A",{href:!0});var rK=n(Dm);CA=o(rK,"datasets.IterableDataset"),rK.forEach(t),jA=o(aD," implements an iterable Dataset backed by python generators."),aD.forEach(t),L2=d(i),x=s(i,"DIV",{class:!0});var E=n(x);m(Wl.$$.fragment,E),qA=d(E),rv=s(E,"P",{});var oK=n(rv);zA=o(oK,"A Dataset backed by an iterable."),oK.forEach(t),VA=d(E),Cn=s(E,"DIV",{class:!0});var sD=n(Cn);m(Yl.$$.fragment,sD),MA=d(sD),ov=s(sD,"P",{});var iK=n(ov);UA=o(iK,`Remove one or several column(s) in the dataset and the features associated to them.
The removal is done on-the-fly on the examples when iterating over the dataset.`),iK.forEach(t),sD.forEach(t),RA=d(E),jn=s(E,"DIV",{class:!0});var nD=n(jn);m(Jl.$$.fragment,nD),BA=d(nD),iv=s(nD,"P",{});var lK=n(iv);HA=o(lK,"Cast column to feature for decoding."),lK.forEach(t),nD.forEach(t),GA=d(E),xm=s(E,"DIV",{class:!0});var dK=n(xm);m(Xl.$$.fragment,dK),dK.forEach(t),KA=d(E),Ve=s(E,"DIV",{class:!0});var Rr=n(Ve);m(Zl.$$.fragment,Rr),WA=d(Rr),lv=s(Rr,"P",{});var cK=n(lv);YA=o(cK,`Apply a function to all the examples in the iterable dataset (individually or in batches) and update them.
If your function returns a column that already exists, then it overwrites it.
The function is applied on-the-fly on the examples when iterating over the dataset.`),cK.forEach(t),JA=d(Rr),Ql=s(Rr,"P",{});var rD=n(Ql);XA=o(rD,"You can specify whether the function should be batched or not with the "),dv=s(rD,"CODE",{});var pK=n(dv);ZA=o(pK,"batched"),pK.forEach(t),QA=o(rD," parameter:"),rD.forEach(t),eF=d(Rr),za=s(Rr,"UL",{});var nf=n(za);cv=s(nf,"LI",{});var mK=n(cv);tF=o(mK,`If batched is False, then the function takes 1 example in and should return 1 example.
An example is a dictionary, e.g. {\u201Ctext\u201D: \u201CHello there !\u201C}`),mK.forEach(t),aF=d(nf),pv=s(nf,"LI",{});var hK=n(pv);sF=o(hK,`If batched is True and batch_size is 1, then the function takes a batch of 1 example as input and can return a batch with 1 or more examples.
A batch is a dictionary, e.g. a batch of 1 example is {\u201Ctext\u201D: [\u201CHello there !\u201D]}`),hK.forEach(t),nF=d(nf),le=s(nf,"LI",{});var Ge=n(le);rF=o(Ge,"If batched is True and batch_size is "),mv=s(Ge,"CODE",{});var fK=n(mv);oF=o(fK,"n"),fK.forEach(t),iF=o(Ge," > 1, then the function takes a batch of "),hv=s(Ge,"CODE",{});var uK=n(hv);lF=o(uK,"n"),uK.forEach(t),dF=o(Ge," examples as input and can return a batch with "),fv=s(Ge,"CODE",{});var gK=n(fv);cF=o(gK,"n"),gK.forEach(t),pF=o(Ge,` examples, or with an arbitrary number of examples.
Note that the last batch may have less than `),uv=s(Ge,"CODE",{});var _K=n(uv);mF=o(_K,"n"),_K.forEach(t),hF=o(Ge,` examples.
A batch is a dictionary, e.g. a batch of `),gv=s(Ge,"CODE",{});var vK=n(gv);fF=o(vK,"n"),vK.forEach(t),uF=o(Ge," examples is {\u201Ctext\u201D: [\u201CHello there !\u201D] * n}"),Ge.forEach(t),nf.forEach(t),Rr.forEach(t),gF=d(E),qn=s(E,"DIV",{class:!0});var oD=n(qn);m(ed.$$.fragment,oD),_F=d(oD),_v=s(oD,"P",{});var bK=n(_v);vF=o(bK,`Apply a filter function to all the elements so that the dataset only includes examples according to the filter function.
The filtering is done on-the-fly when iterating over the dataset.`),bK.forEach(t),oD.forEach(t),bF=d(E),me=s(E,"DIV",{class:!0});var ea=n(me);m(td.$$.fragment,ea),yF=d(ea),vv=s(ea,"P",{});var yK=n(vv);$F=o(yK,"Randomly shuffles the elements of this dataset."),yK.forEach(t),wF=d(ea),bv=s(ea,"P",{});var $K=n(bv);DF=o($K,`This dataset fills a buffer with buffer_size elements, then randomly samples elements from this buffer,
replacing the selected elements with new elements. For perfect shuffling, a buffer size greater than or
equal to the full size of the dataset is required.`),$K.forEach(t),xF=d(ea),ad=s(ea,"P",{});var iD=n(ad);EF=o(iD,"For instance, if your dataset contains 10,000 elements but "),yv=s(iD,"CODE",{});var wK=n(yv);kF=o(wK,"buffer_size"),wK.forEach(t),IF=o(iD,` is set to 1,000, then shuffle will
initially select a random element from only the first 1,000 elements in the buffer. Once an element is
selected, its space in the buffer is replaced by the next (i.e. 1,001-st) element,
maintaining the 1,000 element buffer.`),iD.forEach(t),NF=d(ea),Va=s(ea,"P",{});var rf=n(Va);TF=o(rf,`If the dataset is made of several shards, it also does shuffle the order of the shards.
However if the order has been fixed by using `),Em=s(rf,"A",{href:!0});var DK=n(Em);PF=o(DK,"datasets.IterableDataset.skip()"),DK.forEach(t),AF=o(rf," or "),km=s(rf,"A",{href:!0});var xK=n(km);FF=o(xK,"datasets.IterableDataset.take()"),xK.forEach(t),LF=o(rf,`
then the order of the shards is kept unchanged.`),rf.forEach(t),ea.forEach(t),OF=d(E),zn=s(E,"DIV",{class:!0});var lD=n(zn);m(sd.$$.fragment,lD),SF=d(lD),nd=s(lD,"P",{});var dD=n(nd);CF=o(dD,"Create a new IterableDataset that skips the first "),$v=s(dD,"CODE",{});var EK=n($v);jF=o(EK,"n"),EK.forEach(t),qF=o(dD," elements."),dD.forEach(t),lD.forEach(t),zF=d(E),Vn=s(E,"DIV",{class:!0});var cD=n(Vn);m(rd.$$.fragment,cD),VF=d(cD),od=s(cD,"P",{});var pD=n(od);MF=o(pD,"Create a new IterableDataset with only the first "),wv=s(pD,"CODE",{});var kK=n(wv);UF=o(kK,"n"),kK.forEach(t),RF=o(pD," elements."),pD.forEach(t),cD.forEach(t),BF=d(E),Mn=s(E,"DIV",{class:!0});var mD=n(Mn);m(id.$$.fragment,mD),HF=d(mD),Im=s(mD,"P",{});var YV=n(Im);Nm=s(YV,"A",{href:!0});var IK=n(Nm);GF=o(IK,"datasets.DatasetInfo"),IK.forEach(t),KF=o(YV," object containing all the metadata in the dataset."),YV.forEach(t),mD.forEach(t),WF=d(E),Un=s(E,"DIV",{class:!0});var hD=n(Un);m(ld.$$.fragment,hD),YF=d(hD),Tm=s(hD,"P",{});var JV=n(Tm);Pm=s(JV,"A",{href:!0});var NK=n(Pm);JF=o(NK,"datasets.NamedSplit"),NK.forEach(t),XF=o(JV," object corresponding to a named dataset split."),JV.forEach(t),hD.forEach(t),ZF=d(E),Am=s(E,"DIV",{class:!0});var TK=n(Am);m(dd.$$.fragment,TK),TK.forEach(t),QF=d(E),Fm=s(E,"DIV",{class:!0});var PK=n(Fm);m(cd.$$.fragment,PK),PK.forEach(t),eL=d(E),Lm=s(E,"DIV",{class:!0});var AK=n(Lm);m(pd.$$.fragment,AK),AK.forEach(t),tL=d(E),Om=s(E,"DIV",{class:!0});var FK=n(Om);m(md.$$.fragment,FK),FK.forEach(t),aL=d(E),Sm=s(E,"DIV",{class:!0});var LK=n(Sm);m(hd.$$.fragment,LK),LK.forEach(t),sL=d(E),Cm=s(E,"DIV",{class:!0});var OK=n(Cm);m(fd.$$.fragment,OK),OK.forEach(t),nL=d(E),jm=s(E,"DIV",{class:!0});var SK=n(jm);m(ud.$$.fragment,SK),SK.forEach(t),rL=d(E),qm=s(E,"DIV",{class:!0});var CK=n(qm);m(gd.$$.fragment,CK),CK.forEach(t),oL=d(E),zm=s(E,"DIV",{class:!0});var jK=n(zm);m(_d.$$.fragment,jK),jK.forEach(t),iL=d(E),Vm=s(E,"DIV",{class:!0});var qK=n(Vm);m(vd.$$.fragment,qK),qK.forEach(t),lL=d(E),Mm=s(E,"DIV",{class:!0});var zK=n(Mm);m(bd.$$.fragment,zK),zK.forEach(t),dL=d(E),Um=s(E,"DIV",{class:!0});var VK=n(Um);m(yd.$$.fragment,VK),VK.forEach(t),cL=d(E),Rm=s(E,"DIV",{class:!0});var MK=n(Rm);m($d.$$.fragment,MK),MK.forEach(t),E.forEach(t),O2=d(i),Ma=s(i,"H2",{class:!0});var fD=n(Ma);Rn=s(fD,"A",{id:!0,class:!0,href:!0});var UK=n(Rn);Dv=s(UK,"SPAN",{});var RK=n(Dv);m(wd.$$.fragment,RK),RK.forEach(t),UK.forEach(t),pL=d(fD),xv=s(fD,"SPAN",{});var BK=n(xv);mL=o(BK,"IterableDatasetDict"),BK.forEach(t),fD.forEach(t),S2=d(i),Bn=s(i,"P",{});var uD=n(Bn);hL=o(uD,"Dictionary with split names as keys (\u2018train\u2019, \u2018test\u2019 for example), and "),Ev=s(uD,"CODE",{});var HK=n(Ev);fL=o(HK,"datasets.IterableDataset"),HK.forEach(t),uL=o(uD," objects as values."),uD.forEach(t),C2=d(i),Dd=s(i,"DIV",{class:!0});var GK=n(Dd);m(xd.$$.fragment,GK),GK.forEach(t),j2=d(i),Ua=s(i,"H2",{class:!0});var gD=n(Ua);Hn=s(gD,"A",{id:!0,class:!0,href:!0});var KK=n(Hn);kv=s(KK,"SPAN",{});var WK=n(kv);m(Ed.$$.fragment,WK),WK.forEach(t),KK.forEach(t),gL=d(gD),Iv=s(gD,"SPAN",{});var YK=n(Iv);_L=o(YK,"Features"),YK.forEach(t),gD.forEach(t),q2=d(i),N=s(i,"DIV",{class:!0});var P=n(N);m(kd.$$.fragment,P),vL=d(P),Nv=s(P,"P",{});var JK=n(Nv);bL=o(JK,"A special dictionary that defines the internal structure of a dataset."),JK.forEach(t),yL=d(P),Id=s(P,"P",{});var _D=n(Id);$L=o(_D,"Instantiated with a dictionary of type "),Tv=s(_D,"CODE",{});var XK=n(Tv);wL=o(XK,"dict[str, FieldType]"),XK.forEach(t),DL=o(_D,`, where keys are the desired column names,
and values are the type of that column.`),_D.forEach(t),xL=d(P),Bm=s(P,"P",{});var XV=n(Bm);Pv=s(XV,"CODE",{});var ZK=n(Pv);EL=o(ZK,"FieldType"),ZK.forEach(t),kL=o(XV," can be one of the following:"),XV.forEach(t),IL=d(P),M=s(P,"UL",{});var ae=n(M);Av=s(ae,"LI",{});var QK=n(Av);qt=s(QK,"P",{});var op=n(qt);NL=o(op,"a "),Hm=s(op,"A",{href:!0});var eW=n(Hm);TL=o(eW,"datasets.Value"),eW.forEach(t),PL=o(op," feature specifies a single typed value, e.g. "),Fv=s(op,"CODE",{});var tW=n(Fv);AL=o(tW,"int64"),tW.forEach(t),FL=o(op," or "),Lv=s(op,"CODE",{});var aW=n(Lv);LL=o(aW,"string"),aW.forEach(t),op.forEach(t),QK.forEach(t),OL=d(ae),Ov=s(ae,"LI",{});var sW=n(Ov);Nd=s(sW,"P",{});var vD=n(Nd);SL=o(vD,"a "),Gm=s(vD,"A",{href:!0});var nW=n(Gm);CL=o(nW,"datasets.ClassLabel"),nW.forEach(t),jL=o(vD,` feature specifies a field with a predefined set of classes which can have labels
associated to them and will be stored as integers in the dataset`),vD.forEach(t),sW.forEach(t),qL=d(ae),Sv=s(ae,"LI",{});var rW=n(Sv);Td=s(rW,"P",{});var bD=n(Td);zL=o(bD,"a python "),Cv=s(bD,"CODE",{});var oW=n(Cv);VL=o(oW,"dict"),oW.forEach(t),ML=o(bD,` which specifies that the field is a nested field containing a mapping of sub-fields to sub-fields
features. It\u2019s possible to have nested fields of nested fields in an arbitrary manner`),bD.forEach(t),rW.forEach(t),UL=d(ae),Pd=s(ae,"LI",{});var yD=n(Pd);De=s(yD,"P",{});var ta=n(De);RL=o(ta,"a python "),jv=s(ta,"CODE",{});var iW=n(jv);BL=o(iW,"list"),iW.forEach(t),HL=o(ta," or a "),Km=s(ta,"A",{href:!0});var lW=n(Km);GL=o(lW,"datasets.Sequence"),lW.forEach(t),KL=o(ta,` specifies that the field contains a list of objects. The python
`),qv=s(ta,"CODE",{});var dW=n(qv);WL=o(dW,"list"),dW.forEach(t),YL=o(ta," or "),Wm=s(ta,"A",{href:!0});var cW=n(Wm);JL=o(cW,"datasets.Sequence"),cW.forEach(t),XL=o(ta,` should be provided with a single sub-feature as an example of the feature
type hosted in this list`),ta.forEach(t),ZL=d(yD),m(Gn.$$.fragment,yD),yD.forEach(t),QL=d(ae),zv=s(ae,"LI",{});var pW=n(zv);xe=s(pW,"P",{});var aa=n(xe);eO=o(aa,"a "),Ym=s(aa,"A",{href:!0});var mW=n(Ym);tO=o(mW,"Array2D"),mW.forEach(t),aO=o(aa,", "),Jm=s(aa,"A",{href:!0});var hW=n(Jm);sO=o(hW,"Array3D"),hW.forEach(t),nO=o(aa,", "),Xm=s(aa,"A",{href:!0});var fW=n(Xm);rO=o(fW,"Array4D"),fW.forEach(t),oO=o(aa," or "),Zm=s(aa,"A",{href:!0});var uW=n(Zm);iO=o(uW,"Array5D"),uW.forEach(t),lO=o(aa," feature for multidimensional arrays"),aa.forEach(t),pW.forEach(t),dO=d(ae),Vv=s(ae,"LI",{});var gW=n(Vv);Ad=s(gW,"P",{});var $D=n(Ad);cO=o($D,"an "),Qm=s($D,"A",{href:!0});var _W=n(Qm);pO=o(_W,"Audio"),_W.forEach(t),mO=o($D,` feature to store the absolute path to an audio file or a dictionary with the relative path
to an audio file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the audio data.`),$D.forEach(t),gW.forEach(t),hO=d(ae),Mv=s(ae,"LI",{});var vW=n(Mv);ct=s(vW,"P",{});var Br=n(ct);fO=o(Br,"an "),eh=s(Br,"A",{href:!0});var bW=n(eh);uO=o(bW,"Image"),bW.forEach(t),gO=o(Br," feature to store the absolute path to an image file, an "),Uv=s(Br,"CODE",{});var yW=n(Uv);_O=o(yW,"np.ndarray"),yW.forEach(t),vO=o(Br," object, a "),Rv=s(Br,"CODE",{});var $W=n(Rv);bO=o($W,"PIL.Image.Image"),$W.forEach(t),yO=o(Br,` object
or a dictionary with the relative path to an image file (\u201Cpath\u201D key) and its bytes content (\u201Cbytes\u201D key). This feature extracts the image data.`),Br.forEach(t),vW.forEach(t),$O=d(ae),Bv=s(ae,"LI",{});var wW=n(Bv);Kn=s(wW,"P",{});var p2=n(Kn);th=s(p2,"A",{href:!0});var DW=n(th);wO=o(DW,"datasets.Translation"),DW.forEach(t),DO=o(p2," and "),ah=s(p2,"A",{href:!0});var xW=n(ah);xO=o(xW,"datasets.TranslationVariableLanguages"),xW.forEach(t),EO=o(p2,", the two features specific to Machine Translation"),p2.forEach(t),wW.forEach(t),ae.forEach(t),kO=d(P),Wn=s(P,"DIV",{class:!0});var wD=n(Wn);m(Fd.$$.fragment,wD),IO=d(wD),Hv=s(wD,"P",{});var EW=n(Hv);NO=o(EW,"Make a deep copy of Features."),EW.forEach(t),wD.forEach(t),TO=d(P),Yn=s(P,"DIV",{class:!0});var DD=n(Yn);m(Ld.$$.fragment,DD),PO=d(DD),Gv=s(DD,"P",{});var kW=n(Gv);AO=o(kW,"Decode batch with custom feature decoding."),kW.forEach(t),DD.forEach(t),FO=d(P),Jn=s(P,"DIV",{class:!0});var xD=n(Jn);m(Od.$$.fragment,xD),LO=d(xD),Kv=s(xD,"P",{});var IW=n(Kv);OO=o(IW,"Decode column with custom feature decoding."),IW.forEach(t),xD.forEach(t),SO=d(P),Xn=s(P,"DIV",{class:!0});var ED=n(Xn);m(Sd.$$.fragment,ED),CO=d(ED),Wv=s(ED,"P",{});var NW=n(Wv);jO=o(NW,"Decode example with custom feature decoding."),NW.forEach(t),ED.forEach(t),qO=d(P),Zn=s(P,"DIV",{class:!0});var kD=n(Zn);m(Cd.$$.fragment,kD),zO=d(kD),Yv=s(kD,"P",{});var TW=n(Yv);VO=o(TW,"Encode batch into a format for Arrow."),TW.forEach(t),kD.forEach(t),MO=d(P),Qn=s(P,"DIV",{class:!0});var ID=n(Qn);m(jd.$$.fragment,ID),UO=d(ID),Jv=s(ID,"P",{});var PW=n(Jv);RO=o(PW,"Encode example into a format for Arrow."),PW.forEach(t),ID.forEach(t),BO=d(P),zt=s(P,"DIV",{class:!0});var of=n(zt);m(qd.$$.fragment,of),HO=d(of),Xv=s(of,"P",{});var AW=n(Xv);GO=o(AW,`Flatten the features. Every dictionary column is removed and is replaced by
all the subfields it contains. The new fields are named by concatenating the
name of the original column and the subfield name like this: \u201D<original>.<subfield>\u201C.`),AW.forEach(t),KO=d(of),Zv=s(of,"P",{});var FW=n(Zv);WO=o(FW,`If a column contains nested dictionaries, then all the lower-level subfields names are
also concatenated to form new columns: \u201D<original>.<subfield>.<subsubfield>\u201D, etc.`),FW.forEach(t),of.forEach(t),YO=d(P),er=s(P,"DIV",{class:!0});var ND=n(er);m(zd.$$.fragment,ND),JO=d(ND),Qv=s(ND,"P",{});var LW=n(Qv);XO=o(LW,`Construct Features from Arrow Schema.
It also checks the schema metadata for Hugging Face Datasets features.`),LW.forEach(t),ND.forEach(t),ZO=d(P),Q=s(P,"DIV",{class:!0});var Ke=n(Q);m(Vd.$$.fragment,Ke),QO=d(Ke),eb=s(Ke,"P",{});var OW=n(eb);eS=o(OW,"Construct Features from dict."),OW.forEach(t),tS=d(Ke),tb=s(Ke,"P",{});var SW=n(tb);aS=o(SW,`Regenerate the nested feature object from a deserialized dict.
We use the \u2018_type\u2019 key to infer the dataclass name of the feature FieldType.`),SW.forEach(t),sS=d(Ke),pt=s(Ke,"P",{});var Hr=n(pt);nS=o(Hr,`It allows for a convenient constructor syntax
to define features from deserialized JSON dictionaries. This function is used in particular when deserializing
a `),sh=s(Hr,"A",{href:!0});var CW=n(sh);rS=o(CW,"DatasetInfo"),CW.forEach(t),oS=o(Hr,` that was dumped to a JSON object. This acts as an analogue to
`),nh=s(Hr,"A",{href:!0});var jW=n(nh);iS=o(jW,"Features.from_arrow_schema()"),jW.forEach(t),lS=o(Hr,` and handles the recursive field-by-field instantiation, but doesn\u2019t require
any mapping to/from pyarrow, except for the fact that it takes advantage of the mapping of pyarrow primitive
dtypes that `),rh=s(Hr,"A",{href:!0});var qW=n(rh);dS=o(qW,"Value"),qW.forEach(t),cS=o(Hr," automatically performs."),Hr.forEach(t),pS=d(Ke),ab=s(Ke,"P",{});var zW=n(ab);mS=o(zW,"Example:"),zW.forEach(t),hS=d(Ke),m(Md.$$.fragment,Ke),Ke.forEach(t),fS=d(P),he=s(P,"DIV",{class:!0});var sa=n(he);m(Ud.$$.fragment,sa),uS=d(sa),sb=s(sa,"P",{});var VW=n(sb);gS=o(VW,"Reorder Features fields to match the field order of other Features."),VW.forEach(t),_S=d(sa),nb=s(sa,"P",{});var MW=n(nb);vS=o(MW,`The order of the fields is important since it matters for the underlying arrow data.
Re-ordering the fields allows to make the underlying arrow data type match.`),MW.forEach(t),bS=d(sa),rb=s(sa,"P",{});var UW=n(rb);yS=o(UW,"Example:"),UW.forEach(t),$S=d(sa),m(Rd.$$.fragment,sa),sa.forEach(t),P.forEach(t),z2=d(i),Ra=s(i,"DIV",{class:!0});var TD=n(Ra);m(Bd.$$.fragment,TD),wS=d(TD),ob=s(TD,"P",{});var RW=n(ob);DS=o(RW,`Construct a list of feature from a single type or a dict of types.
Mostly here for compatiblity with tfds.`),RW.forEach(t),TD.forEach(t),V2=d(i),H=s(i,"DIV",{class:!0});var We=n(H);m(Hd.$$.fragment,We),xS=d(We),ib=s(We,"P",{});var BW=n(ib);ES=o(BW,"Feature type for integer class labels."),BW.forEach(t),kS=d(We),Gd=s(We,"P",{});var PD=n(Gd);IS=o(PD,"There are 3 ways to define a "),lb=s(PD,"EM",{});var HW=n(lb);NS=o(HW,"ClassLabel"),HW.forEach(t),TS=o(PD,", which correspond to the 3 arguments:"),PD.forEach(t),PS=d(We),Ba=s(We,"UL",{});var lf=n(Ba);oh=s(lf,"LI",{});var ZV=n(oh);db=s(ZV,"EM",{});var GW=n(db);AS=o(GW,"num_classes"),GW.forEach(t),FS=o(ZV,": Create 0 to (num_classes-1) labels."),ZV.forEach(t),LS=d(lf),ih=s(lf,"LI",{});var QV=n(ih);cb=s(QV,"EM",{});var KW=n(cb);OS=o(KW,"names"),KW.forEach(t),SS=o(QV,": List of label strings."),QV.forEach(t),CS=d(lf),lh=s(lf,"LI",{});var eM=n(lh);pb=s(eM,"EM",{});var WW=n(pb);jS=o(WW,"names_file"),WW.forEach(t),qS=o(eM,": File containing the list of labels."),eM.forEach(t),lf.forEach(t),zS=d(We),tr=s(We,"DIV",{class:!0});var AD=n(tr);m(Kd.$$.fragment,AD),VS=d(AD),mb=s(AD,"P",{});var YW=n(mb);MS=o(YW,"Conversion integer => class name string."),YW.forEach(t),AD.forEach(t),US=d(We),ar=s(We,"DIV",{class:!0});var FD=n(ar);m(Wd.$$.fragment,FD),RS=d(FD),hb=s(FD,"P",{});var JW=n(hb);BS=o(JW,"Conversion class name string => integer."),JW.forEach(t),FD.forEach(t),We.forEach(t),M2=d(i),mt=s(i,"DIV",{class:!0});var df=n(mt);m(Yd.$$.fragment,df),HS=d(df),fb=s(df,"P",{});var XW=n(fb);GS=o(XW,"The Value dtypes are as follows:"),XW.forEach(t),KS=d(df),ub=s(df,"P",{});var ZW=n(ub);WS=o(ZW,`null
bool
int8
int16
int32
int64
uint8
uint16
uint32
uint64
float16
float32 (alias float)
float64 (alias double)
time32[(s|ms)]
time64[(us|ns)]
timestamp[(s|ms|us|ns)]
timestamp[(s|ms|us|ns), tz=(tzstring)]
date32
date64
duration[(s|ms|us|ns)]
decimal128(precision, scale)
decimal256(precision, scale)
binary
large_binary
string
large_string`),ZW.forEach(t),df.forEach(t),U2=d(i),G=s(i,"DIV",{class:!0});var Ye=n(G);m(Jd.$$.fragment,Ye),YS=d(Ye),dh=s(Ye,"P",{});var tM=n(dh);gb=s(tM,"EM",{});var QW=n(gb);JS=o(QW,"FeatureConnector"),QW.forEach(t),XS=o(tM,` for translations with fixed languages per example.
Here for compatiblity with tfds.`),tM.forEach(t),ZS=d(Ye),_b=s(Ye,"P",{});var eY=n(_b);QS=o(eY,`Input: The Translate feature accepts a dictionary for each example mapping
string language codes to string translations.`),eY.forEach(t),eC=d(Ye),Xd=s(Ye,"P",{});var LD=n(Xd);tC=o(LD,"Output: A dictionary mapping string language codes to translations as "),vb=s(LD,"EM",{});var tY=n(vb);aC=o(tY,"Text"),tY.forEach(t),sC=o(LD,`
features.`),LD.forEach(t),nC=d(Ye),bb=s(Ye,"P",{});var aY=n(bb);rC=o(aY,"Example:"),aY.forEach(t),oC=d(Ye),m(Zd.$$.fragment,Ye),Ye.forEach(t),R2=d(i),K=s(i,"DIV",{class:!0});var Je=n(K);m(Qd.$$.fragment,Je),iC=d(Je),ch=s(Je,"P",{});var aM=n(ch);yb=s(aM,"EM",{});var sY=n(yb);lC=o(sY,"FeatureConnector"),sY.forEach(t),dC=o(aM,` for translations with variable languages per example.
Here for compatiblity with tfds.`),aM.forEach(t),cC=d(Je),$b=s(Je,"P",{});var nY=n($b);pC=o(nY,`Input: The TranslationVariableLanguages feature accepts a dictionary for each
example mapping string language codes to one or more string translations.
The languages present may vary from example to example.`),nY.forEach(t),mC=d(Je),wb=s(Je,"P",{});var rY=n(wb);hC=o(rY,`Output:
language: variable-length 1D tf.Tensor of tf.string language codes, sorted
in ascending order.
translation: variable-length 1D tf.Tensor of tf.string plain text
translations, sorted to align with language codes.`),rY.forEach(t),fC=d(Je),Db=s(Je,"P",{});var oY=n(Db);uC=o(oY,"Example:"),oY.forEach(t),gC=d(Je),m(ec.$$.fragment,Je),Je.forEach(t),B2=d(i),tc=s(i,"DIV",{class:!0});var iY=n(tc);m(ac.$$.fragment,iY),iY.forEach(t),H2=d(i),sc=s(i,"DIV",{class:!0});var lY=n(sc);m(nc.$$.fragment,lY),lY.forEach(t),G2=d(i),rc=s(i,"DIV",{class:!0});var dY=n(rc);m(oc.$$.fragment,dY),dY.forEach(t),K2=d(i),ic=s(i,"DIV",{class:!0});var cY=n(ic);m(lc.$$.fragment,cY),cY.forEach(t),W2=d(i),F=s(i,"DIV",{class:!0});var S=n(F);m(dc.$$.fragment,S),_C=d(S),xb=s(S,"P",{});var pY=n(xb);vC=o(pY,"Audio Feature to extract audio data from an audio file."),pY.forEach(t),bC=d(S),Eb=s(S,"P",{});var mY=n(Eb);yC=o(mY,"Input: The Audio feature accepts as input:"),mY.forEach(t),$C=d(S),cc=s(S,"UL",{});var OD=n(cc);kb=s(OD,"LI",{});var hY=n(kb);pc=s(hY,"P",{});var SD=n(pc);wC=o(SD,"A "),Ib=s(SD,"CODE",{});var fY=n(Ib);DC=o(fY,"str"),fY.forEach(t),xC=o(SD,": Absolute path to the audio file (i.e. random access is allowed)."),SD.forEach(t),hY.forEach(t),EC=d(OD),mc=s(OD,"LI",{});var CD=n(mc);hc=s(CD,"P",{});var jD=n(hc);kC=o(jD,"A "),Nb=s(jD,"CODE",{});var uY=n(Nb);IC=o(uY,"dict"),uY.forEach(t),NC=o(jD," with the keys:"),jD.forEach(t),TC=d(CD),fc=s(CD,"UL",{});var qD=n(fc);Tb=s(qD,"LI",{});var gY=n(Tb);PC=o(gY,"path: String with relative path of the audio file to the archive file."),gY.forEach(t),AC=d(qD),Pb=s(qD,"LI",{});var _Y=n(Pb);FC=o(_Y,"bytes: Bytes content of the audio file."),_Y.forEach(t),qD.forEach(t),CD.forEach(t),OD.forEach(t),LC=d(S),Ab=s(S,"P",{});var vY=n(Ab);OC=o(vY,"This is useful for archived files with sequential access."),vY.forEach(t),SC=d(S),Fb=s(S,"UL",{});var bY=n(Fb);uc=s(bY,"LI",{});var zD=n(uc);gc=s(zD,"P",{});var VD=n(gc);CC=o(VD,"A "),Lb=s(VD,"CODE",{});var yY=n(Lb);jC=o(yY,"dict"),yY.forEach(t),qC=o(VD," with the keys:"),VD.forEach(t),zC=d(zD),Ha=s(zD,"UL",{});var cf=n(Ha);Ob=s(cf,"LI",{});var $Y=n(Ob);VC=o($Y,"path: String with relative path of the audio file to the archive file."),$Y.forEach(t),MC=d(cf),Sb=s(cf,"LI",{});var wY=n(Sb);UC=o(wY,"array: Array containing the audio sample"),wY.forEach(t),RC=d(cf),Cb=s(cf,"LI",{});var DY=n(Cb);BC=o(DY,"sampling_rate: Integer corresponding to the samping rate of the audio sample."),DY.forEach(t),cf.forEach(t),zD.forEach(t),bY.forEach(t),HC=d(S),jb=s(S,"P",{});var xY=n(jb);GC=o(xY,"This is useful for archived files with sequential access."),xY.forEach(t),KC=d(S),Vt=s(S,"DIV",{class:!0});var pf=n(Vt);m(_c.$$.fragment,pf),WC=d(pf),qb=s(pf,"P",{});var EY=n(qb);YC=o(EY,`Cast an Arrow array to the Audio arrow storage type.
The Arrow types that can be converted to the Audio pyarrow storage type are:`),EY.forEach(t),JC=d(pf),ht=s(pf,"UL",{});var Gr=n(ht);zb=s(Gr,"LI",{});var kY=n(zb);XC=o(kY,"pa.string() - it must contain the \u201Cpath\u201D data"),kY.forEach(t),ZC=d(Gr),Vb=s(Gr,"LI",{});var IY=n(Vb);QC=o(IY,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),IY.forEach(t),ej=d(Gr),Mb=s(Gr,"LI",{});var NY=n(Mb);tj=o(NY,"pa.struct({\u201Cpath\u201D: pa.string()})"),NY.forEach(t),aj=d(Gr),Ub=s(Gr,"LI",{});var TY=n(Ub);sj=o(TY,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),TY.forEach(t),Gr.forEach(t),pf.forEach(t),nj=d(S),sr=s(S,"DIV",{class:!0});var MD=n(sr);m(vc.$$.fragment,MD),rj=d(MD),Rb=s(MD,"P",{});var PY=n(Rb);oj=o(PY,"Decode example audio file into audio data."),PY.forEach(t),MD.forEach(t),ij=d(S),nr=s(S,"DIV",{class:!0});var UD=n(nr);m(bc.$$.fragment,UD),lj=d(UD),Bb=s(UD,"P",{});var AY=n(Bb);dj=o(AY,"Embed audio files into the Arrow array."),AY.forEach(t),UD.forEach(t),cj=d(S),rr=s(S,"DIV",{class:!0});var RD=n(rr);m(yc.$$.fragment,RD),pj=d(RD),Hb=s(RD,"P",{});var FY=n(Hb);mj=o(FY,"Encode example into a format for Arrow."),FY.forEach(t),RD.forEach(t),S.forEach(t),Y2=d(i),L=s(i,"DIV",{class:!0});var j=n(L);m($c.$$.fragment,j),hj=d(j),Gb=s(j,"P",{});var LY=n(Gb);fj=o(LY,"Image feature to read image data from an image file."),LY.forEach(t),uj=d(j),Kb=s(j,"P",{});var OY=n(Kb);gj=o(OY,"Input: The Image feature accepts as input:"),OY.forEach(t),_j=d(j),wc=s(j,"UL",{});var BD=n(wc);Wb=s(BD,"LI",{});var SY=n(Wb);Dc=s(SY,"P",{});var HD=n(Dc);vj=o(HD,"A "),Yb=s(HD,"CODE",{});var CY=n(Yb);bj=o(CY,"str"),CY.forEach(t),yj=o(HD,": Absolute path to the image file (i.e. random access is allowed)."),HD.forEach(t),SY.forEach(t),$j=d(BD),xc=s(BD,"LI",{});var GD=n(xc);Ec=s(GD,"P",{});var KD=n(Ec);wj=o(KD,"A "),Jb=s(KD,"CODE",{});var jY=n(Jb);Dj=o(jY,"dict"),jY.forEach(t),xj=o(KD," with the keys:"),KD.forEach(t),Ej=d(GD),kc=s(GD,"UL",{});var WD=n(kc);Xb=s(WD,"LI",{});var qY=n(Xb);kj=o(qY,"path: String with relative path of the image file to the archive file."),qY.forEach(t),Ij=d(WD),Zb=s(WD,"LI",{});var zY=n(Zb);Nj=o(zY,"bytes: Bytes of the image file."),zY.forEach(t),WD.forEach(t),GD.forEach(t),BD.forEach(t),Tj=d(j),Qb=s(j,"P",{});var VY=n(Qb);Pj=o(VY,"This is useful for archived files with sequential access."),VY.forEach(t),Aj=d(j),Ic=s(j,"UL",{});var YD=n(Ic);Nc=s(YD,"LI",{});var JD=n(Nc);Fj=o(JD,"An "),ey=s(JD,"CODE",{});var MY=n(ey);Lj=o(MY,"np.ndarray"),MY.forEach(t),Oj=o(JD,": NumPy array representing an image."),JD.forEach(t),Sj=d(YD),Tc=s(YD,"LI",{});var XD=n(Tc);Cj=o(XD,"A "),ty=s(XD,"CODE",{});var UY=n(ty);jj=o(UY,"PIL.Image.Image"),UY.forEach(t),qj=o(XD,": PIL image object."),XD.forEach(t),YD.forEach(t),zj=d(j),Mt=s(j,"DIV",{class:!0});var mf=n(Mt);m(Pc.$$.fragment,mf),Vj=d(mf),ay=s(mf,"P",{});var RY=n(ay);Mj=o(RY,`Cast an Arrow array to the Image arrow storage type.
The Arrow types that can be converted to the Image pyarrow storage type are:`),RY.forEach(t),Uj=d(mf),Ee=s(mf,"UL",{});var na=n(Ee);sy=s(na,"LI",{});var BY=n(sy);Rj=o(BY,"pa.string() - it must contain the \u201Cpath\u201D data"),BY.forEach(t),Bj=d(na),ny=s(na,"LI",{});var HY=n(ny);Hj=o(HY,"pa.struct({\u201Cbytes\u201D: pa.binary()})"),HY.forEach(t),Gj=d(na),ry=s(na,"LI",{});var GY=n(ry);Kj=o(GY,"pa.struct({\u201Cpath\u201D: pa.string()})"),GY.forEach(t),Wj=d(na),oy=s(na,"LI",{});var KY=n(oy);Yj=o(KY,"pa.struct({\u201Cbytes\u201D: pa.binary(), \u201Cpath\u201D: pa.string()})  - order doesn\u2019t matter"),KY.forEach(t),Jj=d(na),iy=s(na,"LI",{});var WY=n(iy);Xj=o(WY,"pa.list(*) - it must contain the image array data"),WY.forEach(t),na.forEach(t),mf.forEach(t),Zj=d(j),or=s(j,"DIV",{class:!0});var ZD=n(or);m(Ac.$$.fragment,ZD),Qj=d(ZD),ly=s(ZD,"P",{});var YY=n(ly);eq=o(YY,"Decode example image file into image data."),YY.forEach(t),ZD.forEach(t),tq=d(j),ir=s(j,"DIV",{class:!0});var QD=n(ir);m(Fc.$$.fragment,QD),aq=d(QD),dy=s(QD,"P",{});var JY=n(dy);sq=o(JY,"Embed image files into the Arrow array."),JY.forEach(t),QD.forEach(t),nq=d(j),lr=s(j,"DIV",{class:!0});var e0=n(lr);m(Lc.$$.fragment,e0),rq=d(e0),cy=s(e0,"P",{});var XY=n(cy);oq=o(XY,"Encode example into a format for Arrow."),XY.forEach(t),e0.forEach(t),j.forEach(t),J2=d(i),Ga=s(i,"H2",{class:!0});var t0=n(Ga);dr=s(t0,"A",{id:!0,class:!0,href:!0});var ZY=n(dr);py=s(ZY,"SPAN",{});var QY=n(py);m(Oc.$$.fragment,QY),QY.forEach(t),ZY.forEach(t),iq=d(t0),my=s(t0,"SPAN",{});var eJ=n(my);lq=o(eJ,"MetricInfo"),eJ.forEach(t),t0.forEach(t),X2=d(i),W=s(i,"DIV",{class:!0});var Xe=n(W);m(Sc.$$.fragment,Xe),dq=d(Xe),hy=s(Xe,"P",{});var tJ=n(hy);cq=o(tJ,"Information about a metric."),tJ.forEach(t),pq=d(Xe),ph=s(Xe,"P",{});var sM=n(ph);fy=s(sM,"CODE",{});var aJ=n(fy);mq=o(aJ,"MetricInfo"),aJ.forEach(t),hq=o(sM,` documents a metric, including its name, version, and features.
See the constructor arguments and properties for a full list.`),sM.forEach(t),fq=d(Xe),uy=s(Xe,"P",{});var sJ=n(uy);uq=o(sJ,"Note: Not all fields are known on construction and may be updated later."),sJ.forEach(t),gq=d(Xe),cr=s(Xe,"DIV",{class:!0});var a0=n(cr);m(Cc.$$.fragment,a0),_q=d(a0),jc=s(a0,"P",{});var s0=n(jc);vq=o(s0,"Create MetricInfo from the JSON file in "),gy=s(s0,"CODE",{});var nJ=n(gy);bq=o(nJ,"metric_info_dir"),nJ.forEach(t),yq=o(s0,"."),s0.forEach(t),a0.forEach(t),$q=d(Xe),pr=s(Xe,"DIV",{class:!0});var n0=n(pr);m(qc.$$.fragment,n0),wq=d(n0),Ka=s(n0,"P",{});var hf=n(Ka);Dq=o(hf,"Write "),_y=s(hf,"CODE",{});var rJ=n(_y);xq=o(rJ,"MetricInfo"),rJ.forEach(t),Eq=o(hf," as JSON to "),vy=s(hf,"CODE",{});var oJ=n(vy);kq=o(oJ,"metric_info_dir"),oJ.forEach(t),Iq=o(hf,`.
Also save the license separately in LICENCE.`),hf.forEach(t),n0.forEach(t),Xe.forEach(t),Z2=d(i),Wa=s(i,"H2",{class:!0});var r0=n(Wa);mr=s(r0,"A",{id:!0,class:!0,href:!0});var iJ=n(mr);by=s(iJ,"SPAN",{});var lJ=n(by);m(zc.$$.fragment,lJ),lJ.forEach(t),iJ.forEach(t),Nq=d(r0),yy=s(r0,"SPAN",{});var dJ=n(yy);Tq=o(dJ,"Metric"),dJ.forEach(t),r0.forEach(t),Q2=d(i),Ut=s(i,"P",{});var ff=n(Ut);Pq=o(ff,"The base class "),$y=s(ff,"CODE",{});var cJ=n($y);Aq=o(cJ,"Metric"),cJ.forEach(t),Fq=o(ff," implements a Metric backed by one or several "),mh=s(ff,"A",{href:!0});var pJ=n(mh);Lq=o(pJ,"datasets.Dataset"),pJ.forEach(t),Oq=o(ff,"."),ff.forEach(t),e$=d(i),Y=s(i,"DIV",{class:!0});var Ze=n(Y);m(Vc.$$.fragment,Ze),Sq=d(Ze),wy=s(Ze,"P",{});var mJ=n(wy);Cq=o(mJ,"A Metric is the base class and common API for all metrics."),mJ.forEach(t),jq=d(Ze),hr=s(Ze,"DIV",{class:!0});var o0=n(hr);m(Mc.$$.fragment,o0),qq=d(o0),Dy=s(o0,"P",{});var hJ=n(Dy);zq=o(hJ,"Add one prediction and reference for the metric\u2019s stack."),hJ.forEach(t),o0.forEach(t),Vq=d(Ze),fr=s(Ze,"DIV",{class:!0});var i0=n(fr);m(Uc.$$.fragment,i0),Mq=d(i0),xy=s(i0,"P",{});var fJ=n(xy);Uq=o(fJ,"Add a batch of predictions and references for the metric\u2019s stack."),fJ.forEach(t),i0.forEach(t),Rq=d(Ze),Rt=s(Ze,"DIV",{class:!0});var uf=n(Rt);m(Rc.$$.fragment,uf),Bq=d(uf),Ey=s(uf,"P",{});var uJ=n(Ey);Hq=o(uJ,"Compute the metrics."),uJ.forEach(t),Gq=d(uf),ky=s(uf,"P",{});var gJ=n(ky);Kq=o(gJ,"Usage of positional arguments is not allowed to prevent mistakes."),gJ.forEach(t),uf.forEach(t),Wq=d(Ze),ur=s(Ze,"DIV",{class:!0});var l0=n(ur);m(Bc.$$.fragment,l0),Yq=d(l0),Iy=s(l0,"P",{});var _J=n(Iy);Jq=o(_J,"Downloads and prepares dataset for reading."),_J.forEach(t),l0.forEach(t),Ze.forEach(t),t$=d(i),Ya=s(i,"H2",{class:!0});var d0=n(Ya);gr=s(d0,"A",{id:!0,class:!0,href:!0});var vJ=n(gr);Ny=s(vJ,"SPAN",{});var bJ=n(Ny);m(Hc.$$.fragment,bJ),bJ.forEach(t),vJ.forEach(t),Xq=d(d0),Ty=s(d0,"SPAN",{});var yJ=n(Ty);Zq=o(yJ,"Filesystems"),yJ.forEach(t),d0.forEach(t),a$=d(i),k=s(i,"DIV",{class:!0});var I=n(k);m(Gc.$$.fragment,I),Qq=d(I),Py=s(I,"P",{});var $J=n(Py);ez=o($J,"Access S3 as if it were a file system."),$J.forEach(t),tz=d(I),Ay=s(I,"P",{});var wJ=n(Ay);az=o(wJ,`This exposes a filesystem-like API (ls, cp, open, etc.) on top of S3
storage.`),wJ.forEach(t),sz=d(I),ft=s(I,"P",{});var Kr=n(ft);nz=o(Kr,"Provide credentials either explicitly ("),Fy=s(Kr,"CODE",{});var DJ=n(Fy);rz=o(DJ,"key="),DJ.forEach(t),oz=o(Kr,", "),Ly=s(Kr,"CODE",{});var xJ=n(Ly);iz=o(xJ,"secret="),xJ.forEach(t),lz=o(Kr,`) or depend
on boto\u2019s credential methods. See botocore documentation for more
information. If no credentials are available, use `),Oy=s(Kr,"CODE",{});var EJ=n(Oy);dz=o(EJ,"anon=True"),EJ.forEach(t),cz=o(Kr,"."),Kr.forEach(t),pz=d(I),Sy=s(I,"P",{});var kJ=n(Sy);mz=o(kJ,"The following parameters are passed on to fsspec:"),kJ.forEach(t),hz=d(I),Cy=s(I,"P",{});var IJ=n(Cy);fz=o(IJ,`skip_instance_cache: to control reuse of instances
use_listings_cache, listings_expiry_time, max_paths: to control reuse of directory listings`),IJ.forEach(t),uz=d(I),jy=s(I,"P",{});var NJ=n(jy);gz=o(NJ,"."),NJ.forEach(t),_z=d(I),Me=s(I,"P",{});var ns=n(Me);qy=s(ns,"CODE",{});var TJ=n(qy);vz=o(TJ,"datasets.filesystems.S3FileSystem"),TJ.forEach(t),bz=o(ns," is a subclass of s3fs.S3FileSystem]("),Kc=s(ns,"A",{href:!0,rel:!0});var PJ=n(Kc);yz=o(PJ,"https://s3fs.readthedocs.io/en/latest/api.html"),PJ.forEach(t),$z=o(ns,`), which is a known
implementation of `),zy=s(ns,"CODE",{});var AJ=n(zy);wz=o(AJ,"fsspec"),AJ.forEach(t),Dz=o(ns,". Filesystem Spec "),Wc=s(ns,"A",{href:!0,rel:!0});var FJ=n(Wc);xz=o(FJ,"FSSPEC"),FJ.forEach(t),Ez=o(ns,` is a project to
unify various projects and classes to work with remote filesystems
and file-system-like abstractions using a standard pythonic interface.`),ns.forEach(t),kz=d(I),Vy=s(I,"P",{});var LJ=n(Vy);Iz=o(LJ,"Examples:"),LJ.forEach(t),Nz=d(I),My=s(I,"P",{});var OJ=n(My);Tz=o(OJ,"Listing files from public s3 bucket."),OJ.forEach(t),Pz=d(I),m(Yc.$$.fragment,I),Az=d(I),Ja=s(I,"P",{});var gf=n(Ja);Fz=o(gf,"Listing files from private s3 bucket using "),Uy=s(gf,"CODE",{});var SJ=n(Uy);Lz=o(SJ,"aws_access_key_id"),SJ.forEach(t),Oz=o(gf," and "),Ry=s(gf,"CODE",{});var CJ=n(Ry);Sz=o(CJ,"aws_secret_access_key"),CJ.forEach(t),Cz=o(gf,"."),gf.forEach(t),jz=d(I),m(Jc.$$.fragment,I),qz=d(I),ut=s(I,"P",{});var Wr=n(ut);zz=o(Wr,"Using "),By=s(Wr,"CODE",{});var jJ=n(By);Vz=o(jJ,"S3Filesystem"),jJ.forEach(t),Mz=o(Wr," with "),Hy=s(Wr,"CODE",{});var qJ=n(Hy);Uz=o(qJ,"botocore.session.Session"),qJ.forEach(t),Rz=o(Wr," and custom "),Gy=s(Wr,"CODE",{});var zJ=n(Gy);Bz=o(zJ,"aws_profile"),zJ.forEach(t),Hz=o(Wr,"."),Wr.forEach(t),Gz=d(I),m(Xc.$$.fragment,I),Kz=d(I),Xa=s(I,"P",{});var _f=n(Xa);Wz=o(_f,"Loading dataset from s3 using "),Ky=s(_f,"CODE",{});var VJ=n(Ky);Yz=o(VJ,"S3Filesystem"),VJ.forEach(t),Jz=o(_f," and "),Wy=s(_f,"CODE",{});var MJ=n(Wy);Xz=o(MJ,"load_from_disk()"),MJ.forEach(t),Zz=o(_f,"."),_f.forEach(t),Qz=d(I),m(Zc.$$.fragment,I),eV=d(I),Yy=s(I,"P",{});var UJ=n(Yy);tV=o(UJ,"Saving dataset to s3 using <code>S3Filesystem<code/> and <code>dataset.save_to_disk()<code/>."),UJ.forEach(t),aV=d(I),m(Qc.$$.fragment,I),sV=d(I),_r=s(I,"H2",{class:!0});var c0=n(_r);vr=s(c0,"A",{id:!0,class:!0,href:!0});var RJ=n(vr);Jy=s(RJ,"SPAN",{});var BJ=n(Jy);m(ep.$$.fragment,BJ),BJ.forEach(t),RJ.forEach(t),nV=d(c0),Xy=s(c0,"SPAN",{});var HJ=n(Xy);rV=o(HJ,"Parameters"),HJ.forEach(t),c0.forEach(t),oV=d(I),U=s(I,"P",{});var se=n(U);iV=o(se,`anon : bool (False)
Whether to use anonymous connection (public buckets only). If False,
uses the key/secret given, or boto\u2019s credential resolver (client_kwargs,
environment, variables, config files, EC2 IAM server, in that order)
key : string (None)
If not anonymous, use this access key ID, if specified
secret : string (None)
If not anonymous, use this secret access key, if specified
token : string (None)
If not anonymous, use this security token, if specified
use_ssl : bool (True)
Whether to use SSL in connections to S3; may be faster without, but
insecure. If `),Zy=s(se,"CODE",{});var GJ=n(Zy);lV=o(GJ,"use_ssl"),GJ.forEach(t),dV=o(se," is also set in "),Qy=s(se,"CODE",{});var KJ=n(Qy);cV=o(KJ,"client_kwargs"),KJ.forEach(t),pV=o(se,`,
the value set in `),e2=s(se,"CODE",{});var WJ=n(e2);mV=o(WJ,"client_kwargs"),WJ.forEach(t),hV=o(se,` will take priority.
s3_additional_kwargs : dict of parameters that are used when calling s3 api
methods. Typically used for things like \u201CServerSideEncryption\u201D.
client_kwargs : dict of parameters for the botocore client
requester_pays : bool (False)
If RequesterPays buckets are supported.
default_block_size: int (None)
If given, the default block size value used for `),t2=s(se,"CODE",{});var YJ=n(t2);fV=o(YJ,"open()"),YJ.forEach(t),uV=o(se,`, if no
specific value is given at all time. The built-in default is 5MB.
default_fill_cache : Bool (True)
Whether to use cache filling with open by default. Refer to
`),a2=s(se,"CODE",{});var JJ=n(a2);gV=o(JJ,"S3File.open"),JJ.forEach(t),_V=o(se,`.
default_cache_type : string (\u2018bytes\u2019)
If given, the default cache_type value used for `),s2=s(se,"CODE",{});var XJ=n(s2);vV=o(XJ,"open()"),XJ.forEach(t),bV=o(se,`. Set to \u201Cnone\u201D
if no caching is desired. See fsspec\u2019s documentation for other available
cache_type values. Default cache_type is \u2018bytes\u2019.
version_aware : bool (False)
Whether to support bucket versioning.  If enable this will require the
user to have the necessary IAM permissions for dealing with versioned
objects.
cache_regions : bool (False)
Whether to cache bucket regions or not. Whenever a new bucket is used,
it will first find out which region it belongs and then use the client
for that region.
config_kwargs : dict of parameters passed to `),n2=s(se,"CODE",{});var ZJ=n(n2);yV=o(ZJ,"botocore.client.Config"),ZJ.forEach(t),$V=o(se,`
kwargs : other parameters for core session
session : aiobotocore AioSession object to be used for all connections.
This session will be used inplace of creating a new session inside S3FileSystem.
For example: aiobotocore.session.AioSession(profile=\u2018test_user\u2019)`),se.forEach(t),I.forEach(t),s$=d(i),Za=s(i,"DIV",{class:!0});var p0=n(Za);m(tp.$$.fragment,p0),wV=d(p0),Qa=s(p0,"P",{});var vf=n(Qa);DV=o(vf,"preprocesses "),r2=s(vf,"EM",{});var QJ=n(r2);xV=o(QJ,"dataset_path"),QJ.forEach(t),EV=o(vf," and removes remote filesystem (e.g. removing "),o2=s(vf,"CODE",{});var eX=n(o2);kV=o(eX,"s3://"),eX.forEach(t),IV=o(vf,")"),vf.forEach(t),p0.forEach(t),n$=d(i),es=s(i,"DIV",{class:!0});var m0=n(es);m(ap.$$.fragment,m0),NV=d(m0),i2=s(m0,"P",{});var tX=n(i2);TV=o(tX,"Validates if filesystem has remote protocol."),tX.forEach(t),m0.forEach(t),r$=d(i),ts=s(i,"H2",{class:!0});var h0=n(ts);br=s(h0,"A",{id:!0,class:!0,href:!0});var aX=n(br);l2=s(aX,"SPAN",{});var sX=n(l2);m(sp.$$.fragment,sX),sX.forEach(t),aX.forEach(t),PV=d(h0),d2=s(h0,"SPAN",{});var nX=n(d2);AV=o(nX,"Fingerprint"),nX.forEach(t),h0.forEach(t),o$=d(i),as=s(i,"DIV",{class:!0});var f0=n(as);m(np.$$.fragment,f0),FV=d(f0),c2=s(f0,"P",{});var rX=n(c2);LV=o(rX,"Hasher that accepts python objects as inputs."),rX.forEach(t),f0.forEach(t),this.h()},h(){c(O,"name","hf:doc:metadata"),c(O,"content",JSON.stringify(vX)),c(ne,"id","main-classes"),c(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ne,"href","#main-classes"),c(q,"class","relative group"),c(de,"id","datasets.DatasetInfo"),c(de,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(de,"href","#datasets.DatasetInfo"),c(ge,"class","relative group"),c(ke,"class","docstring"),c(bt,"class","docstring"),c(B,"class","docstring"),c(is,"id","datasets.Dataset"),c(is,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(is,"href","#datasets.Dataset"),c(la,"class","relative group"),c(dp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(yt,"class","docstring"),c($t,"class","docstring"),c(ds,"class","docstring"),c(cs,"class","docstring"),c(cp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(Ie,"class","docstring"),c(pp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(ps,"class","docstring"),c(ms,"class","docstring"),c(hs,"class","docstring"),c(fs,"class","docstring"),c(gs,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.__len__"),c(us,"class","docstring"),c(_s,"class","docstring"),c(vs,"class","docstring"),c(wt,"class","docstring"),c(bs,"class","docstring"),c(ys,"class","docstring"),c($s,"class","docstring"),c(mp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),c(Dt,"class","docstring"),c(ws,"class","docstring"),c(Ds,"class","docstring"),c(xs,"class","docstring"),c(hp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format"),c(xt,"class","docstring"),c(Es,"class","docstring"),c(fp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(Ne,"class","docstring"),c(up,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format"),c(gp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(ks,"class","docstring"),c(Et,"class","docstring"),c(vp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(bp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format"),c(Pe,"class","docstring"),c(yp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format"),c($p,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(wp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_transform"),c(Ae,"class","docstring"),c(Is,"class","docstring"),c(kt,"class","docstring"),c(Fe,"class","docstring"),c(Ns,"class","docstring"),c(Ts,"class","docstring"),c(It,"class","docstring"),c(Nt,"class","docstring"),c(Tt,"class","docstring"),c(ce,"class","docstring"),c(Ps,"class","docstring"),c(pe,"class","docstring"),c(Ep,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(As,"class","docstring"),c(kp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Fs,"class","docstring"),c(Ls,"class","docstring"),c(Os,"class","docstring"),c(Ss,"class","docstring"),c(Cs,"class","docstring"),c(js,"class","docstring"),c(qs,"class","docstring"),c(ii,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(ii,"rel","nofollow"),c(Vs,"id","query"),c(Vs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vs,"href","#query"),c(zs,"class","relative group"),c(Us,"id","save-index"),c(Us,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Us,"href","#save-index"),c(Ms,"class","relative group"),c(Bs,"id","load-index"),c(Bs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bs,"href","#load-index"),c(Rs,"class","relative group"),c(Gs,"id","query"),c(Gs,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gs,"href","#query"),c(Hs,"class","relative group"),c(T,"class","docstring"),c(hi,"href","https://github.com/facebookresearch/faiss/wiki/The-index-factory"),c(hi,"rel","nofollow"),c(Pt,"class","docstring"),c(Ks,"class","docstring"),c(At,"class","docstring"),c(X,"class","docstring"),c(Le,"class","docstring"),c(Ws,"class","docstring"),c(Ys,"class","docstring"),c(Js,"class","docstring"),c(Xs,"class","docstring"),c(Zs,"class","docstring"),c(Qs,"class","docstring"),c(en,"class","docstring"),c(Fp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo"),c(tn,"class","docstring"),c(Op,"href","/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit"),c(an,"class","docstring"),c(Sp,"class","docstring"),c(Cp,"class","docstring"),c(jp,"class","docstring"),c(qp,"class","docstring"),c(zp,"class","docstring"),c(Vp,"class","docstring"),c(Mp,"class","docstring"),c(Up,"class","docstring"),c(Rp,"class","docstring"),c(Bp,"class","docstring"),c(Hp,"class","docstring"),c(Gp,"class","docstring"),c(Kp,"class","docstring"),c(sn,"class","docstring"),c(nn,"class","docstring"),c(rn,"class","docstring"),c(on,"class","docstring"),c(Wp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"),c(Yp,"href","/docs/datasets/package_reference/task_templates"),c(Ft,"class","docstring"),c(dn,"id","dataset-with-mapping-{\u2018entailment\u2019:-0,-\u2018neutral\u2019:-1,-\u2018contradiction\u2019:-2}"),c(dn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dn,"href","#dataset-with-mapping-{\u2018entailment\u2019:-0,-\u2018neutral\u2019:-1,-\u2018contradiction\u2019:-2}"),c(ln,"class","relative group"),c(pn,"id","mapping-to-align-with"),c(pn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pn,"href","#mapping-to-align-with"),c(cn,"class","relative group"),c(C,"class","docstring"),c(v,"class","docstring"),c(Zp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(Qp,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c($a,"class","docstring"),c(em,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(tm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset"),c(V,"class","docstring"),c(am,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(sm,"href","/docs/datasets/pr_3882/en/package_reference/loading_methods#datasets.load_dataset"),c(nm,"href","/docs/datasets/pr_3882/en/package_reference/loading_methods#datasets.load_dataset"),c(oe,"class","docstring"),c(rm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.save_to_disk"),c(om,"href","/docs/datasets/pr_3882/en/package_reference/loading_methods#datasets.load_dataset"),c(im,"href","/docs/datasets/pr_3882/en/package_reference/loading_methods#datasets.load_dataset"),c(ie,"class","docstring"),c(xa,"class","docstring"),c(Ea,"class","docstring"),c(mn,"id","datasets.DatasetDict"),c(mn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mn,"href","#datasets.DatasetDict"),c(ka,"class","relative group"),c(fn,"class","docstring"),c(un,"class","docstring"),c(gn,"class","docstring"),c(vn,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.__len__"),c(_n,"class","docstring"),c(bn,"class","docstring"),c(yn,"class","docstring"),c(Lt,"class","docstring"),c($n,"class","docstring"),c(wn,"class","docstring"),c(Dn,"class","docstring"),c(Ot,"class","docstring"),c(Oe,"class","docstring"),c(Se,"class","docstring"),c(St,"class","docstring"),c(xn,"class","docstring"),c(dm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.with_transform"),c(cm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetDict.set_format"),c(Ce,"class","docstring"),c(pm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.set_format"),c(mm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.reset_format"),c(je,"class","docstring"),c(En,"class","docstring"),c(hm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),c(Ct,"class","docstring"),c(kn,"class","docstring"),c(fm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),c(qe,"class","docstring"),c(um,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset.map"),c(ze,"class","docstring"),c(In,"class","docstring"),c(Z,"class","docstring"),c(vm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Nn,"class","docstring"),c(bm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.filesystems.S3FileSystem"),c(Tn,"class","docstring"),c(Pn,"class","docstring"),c(An,"class","docstring"),c(Fn,"class","docstring"),c(Ln,"class","docstring"),c(ym,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features"),c($m,"href","/docs/datasets/package_reference/task_templates"),c(jt,"class","docstring"),c(w,"class","docstring"),c(wm,"id","package_reference_features"),c(On,"id","datasets.IterableDataset"),c(On,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(On,"href","#datasets.IterableDataset"),c(qa,"class","relative group"),c(Dm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset"),c(Cn,"class","docstring"),c(jn,"class","docstring"),c(xm,"class","docstring"),c(Ve,"class","docstring"),c(qn,"class","docstring"),c(Em,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset.skip"),c(km,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.IterableDataset.take"),c(me,"class","docstring"),c(zn,"class","docstring"),c(Vn,"class","docstring"),c(Nm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo"),c(Mn,"class","docstring"),c(Pm,"href","/docs/datasets/pr_3882/en/package_reference/builder_classes#datasets.NamedSplit"),c(Un,"class","docstring"),c(Am,"class","docstring"),c(Fm,"class","docstring"),c(Lm,"class","docstring"),c(Om,"class","docstring"),c(Sm,"class","docstring"),c(Cm,"class","docstring"),c(jm,"class","docstring"),c(qm,"class","docstring"),c(zm,"class","docstring"),c(Vm,"class","docstring"),c(Mm,"class","docstring"),c(Um,"class","docstring"),c(Rm,"class","docstring"),c(x,"class","docstring"),c(Rn,"id","datasets.IterableDatasetDict"),c(Rn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rn,"href","#datasets.IterableDatasetDict"),c(Ma,"class","relative group"),c(Dd,"class","docstring"),c(Hn,"id","datasets.Features"),c(Hn,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hn,"href","#datasets.Features"),c(Ua,"class","relative group"),c(Hm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Value"),c(Gm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.ClassLabel"),c(Km,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Sequence"),c(Wm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Sequence"),c(Ym,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Array2D"),c(Jm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Array3D"),c(Xm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Array4D"),c(Zm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Array5D"),c(Qm,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Audio"),c(eh,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Image"),c(th,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Translation"),c(ah,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.TranslationVariableLanguages"),c(Wn,"class","docstring"),c(Yn,"class","docstring"),c(Jn,"class","docstring"),c(Xn,"class","docstring"),c(Zn,"class","docstring"),c(Qn,"class","docstring"),c(zt,"class","docstring"),c(er,"class","docstring"),c(sh,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.DatasetInfo"),c(nh,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Features.from_arrow_schema"),c(rh,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Value"),c(Q,"class","docstring"),c(he,"class","docstring"),c(N,"class","docstring"),c(Ra,"class","docstring"),c(tr,"class","docstring"),c(ar,"class","docstring"),c(H,"class","docstring"),c(mt,"class","docstring"),c(G,"class","docstring"),c(K,"class","docstring"),c(tc,"class","docstring"),c(sc,"class","docstring"),c(rc,"class","docstring"),c(ic,"class","docstring"),c(Vt,"class","docstring"),c(sr,"class","docstring"),c(nr,"class","docstring"),c(rr,"class","docstring"),c(F,"class","docstring"),c(Mt,"class","docstring"),c(or,"class","docstring"),c(ir,"class","docstring"),c(lr,"class","docstring"),c(L,"class","docstring"),c(dr,"id","datasets.MetricInfo"),c(dr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dr,"href","#datasets.MetricInfo"),c(Ga,"class","relative group"),c(cr,"class","docstring"),c(pr,"class","docstring"),c(W,"class","docstring"),c(mr,"id","datasets.Metric"),c(mr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mr,"href","#datasets.Metric"),c(Wa,"class","relative group"),c(mh,"href","/docs/datasets/pr_3882/en/package_reference/main_classes#datasets.Dataset"),c(hr,"class","docstring"),c(fr,"class","docstring"),c(Rt,"class","docstring"),c(ur,"class","docstring"),c(Y,"class","docstring"),c(gr,"id","datasets.filesystems.S3FileSystem"),c(gr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gr,"href","#datasets.filesystems.S3FileSystem"),c(Ya,"class","relative group"),c(Kc,"href","https://s3fs.readthedocs.io/en/latest/api.html"),c(Kc,"rel","nofollow"),c(Wc,"href","https://filesystem-spec.readthedocs.io/en/latest/?badge=latest"),c(Wc,"rel","nofollow"),c(vr,"id","parameters"),c(vr,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vr,"href","#parameters"),c(_r,"class","relative group"),c(k,"class","docstring"),c(Za,"class","docstring"),c(es,"class","docstring"),c(br,"id","datasets.fingerprint.Hasher"),c(br,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(br,"href","#datasets.fingerprint.Hasher"),c(ts,"class","relative group"),c(as,"class","docstring")},m(i,y){e(document.head,O),$(i,gt,y),$(i,q,y),e(q,ne),e(ne,ra),h(ue,ra,null),e(q,Yr),e(q,oa),e(oa,_t),$(i,rs,y),$(i,ge,y),e(ge,de),e(de,J),h(vt,J,null),e(ge,ip),e(ge,os),e(os,u0),$(i,m2,y),$(i,B,y),h(Jr,B,null),e(B,g0),e(B,yf),e(yf,_0),e(B,v0),e(B,lp),e(lp,$f),e($f,b0),e(lp,y0),e(B,$0),e(B,wf),e(wf,w0),e(B,D0),e(B,ke),h(Xr,ke,null),e(ke,x0),e(ke,Zr),e(Zr,E0),e(Zr,Df),e(Df,k0),e(Zr,I0),e(ke,N0),e(ke,xf),e(xf,T0),e(ke,P0),e(ke,Ef),e(Ef,A0),e(B,F0),e(B,bt),h(Qr,bt,null),e(bt,L0),e(bt,ia),e(ia,O0),e(ia,kf),e(kf,S0),e(ia,C0),e(ia,If),e(If,j0),e(ia,q0),e(bt,z0),e(bt,Nf),e(Nf,V0),$(i,h2,y),$(i,la,y),e(la,is),e(is,Tf),h(eo,Tf,null),e(la,M0),e(la,Pf),e(Pf,U0),$(i,f2,y),$(i,ls,y),e(ls,R0),e(ls,dp),e(dp,B0),e(ls,H0),$(i,u2,y),$(i,v,y),h(to,v,null),e(v,G0),e(v,Af),e(Af,K0),e(v,W0),e(v,yt),h(ao,yt,null),e(yt,Y0),e(yt,Ff),e(Ff,J0),e(yt,X0),e(yt,Lf),e(Lf,Of),e(Of,Z0),e(v,Q0),e(v,$t),h(so,$t,null),e($t,ex),e($t,Sf),e(Sf,tx),e($t,ax),e($t,Cf),e(Cf,jf),e(jf,sx),e(v,nx),e(v,ds),h(no,ds,null),e(ds,rx),e(ds,qf),e(qf,ox),e(v,ix),e(v,cs),h(ro,cs,null),e(cs,lx),e(cs,zf),e(zf,dx),e(v,cx),e(v,Ie),h(oo,Ie,null),e(Ie,px),e(Ie,et),e(et,mx),e(et,Vf),e(Vf,hx),e(et,fx),e(et,Mf),e(Mf,ux),e(et,gx),e(et,cp),e(cp,_x),e(et,vx),e(Ie,bx),e(Ie,io),e(io,yx),e(io,Uf),e(Uf,$x),e(io,wx),e(Ie,Dx),e(Ie,lo),e(lo,xx),e(lo,Rf),e(Rf,Ex),e(lo,kx),e(v,Ix),e(v,ps),h(co,ps,null),e(ps,Nx),e(ps,tt),e(tt,Tx),e(tt,Bf),e(Bf,Px),e(tt,Ax),e(tt,Hf),e(Hf,Fx),e(tt,Lx),e(tt,pp),e(pp,Ox),e(tt,Sx),e(v,Cx),e(v,ms),h(po,ms,null),e(ms,jx),e(ms,Gf),e(Gf,qx),e(v,zx),e(v,hs),h(mo,hs,null),e(hs,Vx),e(hs,Kf),e(Kf,Mx),e(v,Ux),e(v,fs),h(ho,fs,null),e(fs,Rx),e(fs,Wf),e(Wf,Bx),e(v,Hx),e(v,us),h(fo,us,null),e(us,Gx),e(us,uo),e(uo,Kx),e(uo,gs),e(gs,Wx),e(gs,Yf),e(Yf,Yx),e(gs,Jx),e(uo,Xx),e(v,Zx),e(v,_s),h(go,_s,null),e(_s,Qx),e(_s,Jf),e(Jf,e8),e(v,t8),e(v,vs),h(_o,vs,null),e(vs,a8),e(vs,Xf),e(Xf,s8),e(v,n8),e(v,wt),h(vo,wt,null),e(wt,r8),e(wt,Zf),e(Zf,o8),e(wt,i8),e(wt,Qf),e(Qf,l8),e(v,d8),e(v,bs),h(bo,bs,null),e(bs,c8),e(bs,eu),e(eu,p8),e(v,m8),e(v,ys),h(yo,ys,null),e(ys,h8),e(ys,tu),e(tu,f8),e(v,u8),e(v,$s),h($o,$s,null),e($s,g8),e($s,au),e(au,_8),e(v,v8),e(v,Dt),h(wo,Dt,null),e(Dt,b8),e(Dt,su),e(su,y8),e(Dt,$8),e(Dt,da),e(da,w8),e(da,mp),e(mp,D8),e(da,x8),e(da,nu),e(nu,E8),e(da,k8),e(v,I8),e(v,ws),h(Do,ws,null),e(ws,N8),e(ws,ru),e(ru,T8),e(v,P8),e(v,Ds),h(xo,Ds,null),e(Ds,A8),e(Ds,Eo),e(Eo,F8),e(Eo,ou),e(ou,L8),e(Eo,O8),e(v,S8),e(v,xs),h(ko,xs,null),e(xs,C8),e(xs,iu),e(iu,j8),e(v,q8),e(v,xt),h(Io,xt,null),e(xt,z8),e(xt,lu),e(lu,V8),e(xt,M8),e(xt,No),e(No,U8),e(No,hp),e(hp,R8),e(No,B8),e(v,H8),e(v,Es),h(To,Es,null),e(Es,G8),e(Es,ca),e(ca,K8),e(ca,du),e(du,W8),e(ca,Y8),e(ca,cu),e(cu,J8),e(ca,X8),e(v,Z8),e(v,Ne),h(Po,Ne,null),e(Ne,Q8),e(Ne,_e),e(_e,e3),e(_e,pu),e(pu,t3),e(_e,a3),e(_e,mu),e(mu,s3),e(_e,n3),e(_e,hu),e(hu,r3),e(_e,o3),e(_e,fp),e(fp,i3),e(_e,l3),e(Ne,d3),e(Ne,ve),e(ve,c3),e(ve,fu),e(fu,p3),e(ve,m3),e(ve,uu),e(uu,h3),e(ve,f3),e(ve,gu),e(gu,u3),e(ve,g3),e(ve,_u),e(_u,_3),e(ve,v3),e(Ne,b3),e(Ne,vu),e(vu,y3),e(v,$3),e(v,ks),h(Ao,ks,null),e(ks,w3),e(ks,Te),e(Te,D3),e(Te,bu),e(bu,x3),e(Te,E3),e(Te,yu),e(yu,k3),e(Te,I3),e(Te,up),e(up,N3),e(Te,T3),e(Te,gp),e(gp,P3),e(v,A3),e(v,Et),h(Fo,Et,null),e(Et,F3),e(Et,Lo),e(Lo,L3),e(Lo,$u),e($u,O3),e(Lo,S3),e(Et,C3),e(Et,_p),e(_p,j3),e(_p,wu),e(wu,q3),e(v,z3),e(v,Pe),h(Oo,Pe,null),e(Pe,V3),e(Pe,at),e(at,M3),e(at,Du),e(Du,U3),e(at,R3),e(at,xu),e(xu,B3),e(at,H3),e(at,Eu),e(Eu,G3),e(at,K3),e(Pe,W3),e(Pe,So),e(So,Y3),e(So,vp),e(vp,J3),e(So,X3),e(Pe,Z3),e(Pe,pa),e(pa,Q3),e(pa,bp),e(bp,e4),e(pa,t4),e(pa,ku),e(ku,a4),e(pa,s4),e(v,n4),e(v,Ae),h(Co,Ae,null),e(Ae,r4),e(Ae,ma),e(ma,o4),e(ma,Iu),e(Iu,i4),e(ma,l4),e(ma,Nu),e(Nu,d4),e(ma,c4),e(Ae,p4),e(Ae,ha),e(ha,m4),e(ha,yp),e(yp,h4),e(ha,f4),e(ha,$p),e($p,u4),e(ha,g4),e(Ae,_4),e(Ae,fa),e(fa,v4),e(fa,wp),e(wp,b4),e(fa,y4),e(fa,Tu),e(Tu,$4),e(fa,w4),e(v,D4),e(v,Is),h(jo,Is,null),e(Is,x4),e(Is,Pu),e(Pu,E4),e(v,k4),e(v,kt),h(qo,kt,null),e(kt,I4),e(kt,Au),e(Au,N4),e(kt,T4),e(kt,Fu),e(Fu,P4),e(v,A4),e(v,Fe),h(zo,Fe,null),e(Fe,F4),e(Fe,Lu),e(Lu,L4),e(Fe,O4),e(Fe,Vo),e(Vo,S4),e(Vo,Ou),e(Ou,C4),e(Vo,j4),e(Fe,q4),e(Fe,ua),e(ua,Su),e(Su,z4),e(ua,V4),e(ua,Cu),e(Cu,M4),e(ua,U4),e(ua,re),e(re,R4),e(re,ju),e(ju,B4),e(re,H4),e(re,qu),e(qu,G4),e(re,K4),e(re,zu),e(zu,W4),e(re,Y4),e(re,Vu),e(Vu,J4),e(re,X4),e(re,Mu),e(Mu,Z4),e(re,Q4),e(v,eE),e(v,Ns),h(Mo,Ns,null),e(Ns,tE),e(Ns,Uu),e(Uu,aE),e(v,sE),e(v,Ts),h(Uo,Ts,null),e(Ts,nE),e(Ts,Ru),e(Ru,rE),e(v,oE),e(v,It),h(Ro,It,null),e(It,iE),e(It,Bu),e(Bu,lE),e(It,dE),e(It,Hu),e(Hu,cE),e(v,pE),e(v,Nt),h(Bo,Nt,null),e(Nt,mE),e(Nt,Gu),e(Gu,hE),e(Nt,fE),e(Nt,Ku),e(Ku,uE),e(v,gE),e(v,Tt),h(Ho,Tt,null),e(Tt,_E),e(Tt,z),e(z,vE),e(z,Wu),e(Wu,bE),e(z,yE),e(z,Yu),e(Yu,$E),e(z,wE),e(z,Ju),e(Ju,DE),e(z,xE),e(z,Xu),e(Xu,EE),e(z,kE),e(z,Zu),e(Zu,IE),e(z,NE),e(z,Qu),e(Qu,TE),e(z,PE),e(z,eg),e(eg,AE),e(z,FE),e(Tt,LE),e(Tt,Go),e(Go,OE),e(Go,tg),e(tg,SE),e(Go,CE),e(v,jE),e(v,ce),h(Ko,ce,null),e(ce,qE),e(ce,ga),e(ga,zE),e(ga,ag),e(ag,VE),e(ga,ME),e(ga,sg),e(sg,UE),e(ga,RE),e(ce,BE),e(ce,ng),e(ng,HE),e(ce,GE),e(ce,Wo),e(Wo,KE),e(Wo,rg),e(rg,WE),e(Wo,YE),e(ce,JE),e(ce,og),e(og,XE),e(v,ZE),e(v,Ps),h(Yo,Ps,null),e(Ps,QE),e(Ps,ig),e(ig,ek),e(v,tk),e(v,pe),h(Jo,pe,null),e(pe,ak),e(pe,lg),e(lg,sk),e(pe,nk),e(pe,dg),e(dg,rk),e(pe,ok),e(pe,Dp),e(Dp,cg),e(cg,ik),e(Dp,lk),e(pe,dk),e(pe,pg),e(pg,mg),e(mg,hg),e(hg,xp),e(xp,ck),e(xp,g2),e(v,pk),e(v,As),h(Xo,As,null),e(As,mk),e(As,_a),e(_a,hk),e(_a,Ep),e(Ep,fk),e(_a,uk),e(_a,fg),e(fg,gk),e(_a,_k),e(v,vk),e(v,Fs),h(Zo,Fs,null),e(Fs,bk),e(Fs,st),e(st,yk),e(st,ug),e(ug,$k),e(st,wk),e(st,kp),e(kp,Dk),e(st,xk),e(st,gg),e(gg,Ek),e(st,kk),e(v,Ik),e(v,Ls),h(Qo,Ls,null),e(Ls,Nk),e(Ls,_g),e(_g,Tk),e(v,Pk),e(v,Os),h(ei,Os,null),e(Os,Ak),e(Os,vg),e(vg,Fk),e(v,Lk),e(v,Ss),h(ti,Ss,null),e(Ss,Ok),e(Ss,ai),e(ai,Sk),e(ai,bg),e(bg,Ck),e(ai,jk),e(v,qk),e(v,Cs),h(si,Cs,null),e(Cs,zk),e(Cs,yg),e(yg,Vk),e(v,Mk),e(v,js),h(ni,js,null),e(js,Uk),e(js,$g),e($g,Rk),e(v,Bk),e(v,qs),h(ri,qs,null),e(qs,Hk),e(qs,wg),e(wg,Gk),e(v,Kk),e(v,T),h(oi,T,null),e(T,Wk),e(T,va),e(va,Yk),e(va,Dg),e(Dg,Jk),e(va,Xk),e(va,xg),e(xg,Zk),e(va,Qk),e(T,e7),e(T,Eg),e(Eg,Ip),e(Ip,t7),e(Ip,ii),e(ii,a7),e(T,s7),e(T,kg),e(kg,n7),e(T,r7),e(T,Np),e(Np,Ig),e(Ig,o7),e(Np,i7),e(T,l7),e(T,zs),e(zs,Vs),e(Vs,Ng),h(li,Ng,null),e(zs,d7),e(zs,Tg),e(Tg,c7),e(T,p7),e(T,Pg),e(Pg,m7),e(T,h7),e(T,Ms),e(Ms,Us),e(Us,Ag),h(di,Ag,null),e(Ms,f7),e(Ms,Fg),e(Fg,u7),e(T,g7),e(T,Lg),e(Lg,_7),e(T,v7),e(T,Og),e(Og,b7),e(T,y7),e(T,Rs),e(Rs,Bs),e(Bs,Sg),h(ci,Sg,null),e(Rs,$7),e(Rs,Cg),e(Cg,w7),e(T,D7),e(T,jg),e(jg,x7),e(T,E7),e(T,Hs),e(Hs,Gs),e(Gs,qg),h(pi,qg,null),e(Hs,k7),e(Hs,zg),e(zg,I7),e(T,N7),e(T,Tp),e(Tp,T7),e(Tp,_2),e(v,P7),e(v,Pt),h(mi,Pt,null),e(Pt,A7),e(Pt,nt),e(nt,F7),e(nt,Vg),e(Vg,L7),e(nt,O7),e(nt,Mg),e(Mg,S7),e(nt,C7),e(nt,Ug),e(Ug,j7),e(nt,q7),e(Pt,z7),e(Pt,Rg),e(Rg,Pp),e(Pp,V7),e(Pp,hi),e(hi,M7),e(v,U7),e(v,Ks),h(fi,Ks,null),e(Ks,R7),e(Ks,Bg),e(Bg,B7),e(v,H7),e(v,At),h(ui,At,null),e(At,G7),e(At,Hg),e(Hg,K7),e(At,W7),e(At,gi),e(gi,Y7),e(gi,Gg),e(Gg,J7),e(gi,X7),e(v,Z7),e(v,X),h(_i,X,null),e(X,Q7),e(X,Kg),e(Kg,e5),e(X,t5),e(X,Wg),e(Wg,a5),e(X,s5),h(vi,X,null),e(X,n5),e(X,Yg),e(Yg,r5),e(X,o5),e(X,bi),e(bi,Jg),e(Jg,i5),e(bi,l5),e(bi,v2),e(v,d5),e(v,Le),h(yi,Le,null),e(Le,c5),e(Le,Xg),e(Xg,p5),e(Le,m5),e(Le,Zg),e(Zg,h5),e(Le,f5),h($i,Le,null),e(v,u5),e(v,Ws),h(wi,Ws,null),e(Ws,g5),e(Ws,Qg),e(Qg,_5),e(v,v5),e(v,Ys),h(Di,Ys,null),e(Ys,b5),e(Ys,e_),e(e_,y5),e(v,$5),e(v,Js),h(xi,Js,null),e(Js,w5),e(Js,t_),e(t_,D5),e(v,x5),e(v,Xs),h(Ei,Xs,null),e(Xs,E5),e(Xs,a_),e(a_,k5),e(v,I5),e(v,Zs),h(ki,Zs,null),e(Zs,N5),e(Zs,s_),e(s_,T5),e(v,P5),e(v,Qs),h(Ii,Qs,null),e(Qs,A5),e(Qs,n_),e(n_,F5),e(v,L5),e(v,en),h(Ni,en,null),e(en,O5),e(en,r_),e(r_,S5),e(v,C5),e(v,tn),h(Ti,tn,null),e(tn,j5),e(tn,Ap),e(Ap,Fp),e(Fp,q5),e(Ap,z5),e(v,V5),e(v,an),h(Pi,an,null),e(an,M5),e(an,Lp),e(Lp,Op),e(Op,U5),e(Lp,R5),e(v,B5),e(v,Sp),h(Ai,Sp,null),e(v,H5),e(v,Cp),h(Fi,Cp,null),e(v,G5),e(v,jp),h(Li,jp,null),e(v,K5),e(v,qp),h(Oi,qp,null),e(v,W5),e(v,zp),h(Si,zp,null),e(v,Y5),e(v,Vp),h(Ci,Vp,null),e(v,J5),e(v,Mp),h(ji,Mp,null),e(v,X5),e(v,Up),h(qi,Up,null),e(v,Z5),e(v,Rp),h(zi,Rp,null),e(v,Q5),e(v,Bp),h(Vi,Bp,null),e(v,eI),e(v,Hp),h(Mi,Hp,null),e(v,tI),e(v,Gp),h(Ui,Gp,null),e(v,aI),e(v,Kp),h(Ri,Kp,null),e(v,sI),e(v,sn),h(Bi,sn,null),e(sn,nI),e(sn,o_),e(o_,rI),e(v,oI),e(v,nn),h(Hi,nn,null),e(nn,iI),e(nn,i_),e(i_,lI),e(v,dI),e(v,rn),h(Gi,rn,null),e(rn,cI),e(rn,l_),e(l_,pI),e(v,mI),e(v,on),h(Ki,on,null),e(on,hI),e(on,d_),e(d_,fI),e(v,uI),e(v,Ft),h(Wi,Ft,null),e(Ft,gI),e(Ft,ba),e(ba,_I),e(ba,Wp),e(Wp,vI),e(ba,bI),e(ba,Yp),e(Yp,yI),e(ba,$I),e(Ft,wI),e(Ft,ya),e(ya,DI),e(ya,c_),e(c_,xI),e(ya,EI),e(ya,p_),e(p_,kI),e(ya,II),e(v,NI),e(v,C),h(Yi,C,null),e(C,TI),e(C,Ji),e(Ji,PI),e(Ji,m_),e(m_,AI),e(Ji,FI),e(C,LI),e(C,h_),e(h_,OI),e(C,SI),e(C,Jp),e(Jp,f_),e(f_,CI),e(Jp,jI),e(C,qI),e(C,ln),e(ln,dn),e(dn,u_),h(Xi,u_,null),e(ln,zI),e(ln,g_),e(g_,VI),e(C,MI),e(C,__),e(__,UI),e(C,RI),e(C,cn),e(cn,pn),e(pn,v_),h(Zi,v_,null),e(cn,BI),e(cn,b_),e(b_,HI),e(C,GI),e(C,Xp),e(Xp,KI),e(Xp,b2),$(i,y2,y),$(i,$a,y),h(Qi,$a,null),e($a,WI),e($a,wa),e(wa,YI),e(wa,Zp),e(Zp,JI),e(wa,XI),e(wa,Qp),e(Qp,ZI),e(wa,QI),$(i,$2,y),$(i,V,y),h(el,V,null),e(V,e6),e(V,y_),e(y_,t6),e(V,a6),e(V,Da),e(Da,s6),e(Da,em),e(em,n6),e(Da,r6),e(Da,tm),e(tm,o6),e(Da,i6),e(V,l6),e(V,be),e(be,d6),e(be,$_),e($_,c6),e(be,p6),e(be,w_),e(w_,m6),e(be,h6),e(be,D_),e(D_,f6),e(be,u6),e(be,x_),e(x_,g6),e(be,_6),e(V,v6),e(V,E_),e(E_,b6),e(V,y6),e(V,k_),e(k_,$6),e(V,w6),h(tl,V,null),$(i,w2,y),$(i,oe,y),h(al,oe,null),e(oe,D6),e(oe,I_),e(I_,x6),e(oe,E6),e(oe,N_),e(N_,k6),e(oe,I6),e(oe,T_),e(T_,N6),e(oe,T6),e(oe,ye),e(ye,P_),e(P_,P6),e(ye,A6),e(ye,A_),e(A_,F6),e(ye,L6),e(ye,F_),e(F_,O6),e(ye,S6),e(ye,sl),e(sl,C6),e(sl,am),e(am,j6),e(sl,q6),e(ye,z6),e(ye,rt),e(rt,V6),e(rt,sm),e(sm,M6),e(rt,U6),e(rt,L_),e(L_,R6),e(rt,B6),e(rt,nm),e(nm,H6),e(rt,G6),$(i,D2,y),$(i,ie,y),h(nl,ie,null),e(ie,K6),e(ie,O_),e(O_,W6),e(ie,Y6),e(ie,S_),e(S_,J6),e(ie,X6),e(ie,C_),e(C_,Z6),e(ie,Q6),e(ie,$e),e($e,j_),e(j_,e9),e($e,t9),e($e,q_),e(q_,a9),e($e,s9),e($e,z_),e(z_,n9),e($e,r9),e($e,rl),e(rl,o9),e(rl,rm),e(rm,i9),e(rl,l9),e($e,d9),e($e,ot),e(ot,c9),e(ot,om),e(om,p9),e(ot,m9),e(ot,V_),e(V_,h9),e(ot,f9),e(ot,im),e(im,u9),e(ot,g9),$(i,x2,y),$(i,xa,y),h(ol,xa,null),e(xa,_9),e(xa,M_),e(M_,v9),$(i,E2,y),$(i,Ea,y),h(il,Ea,null),e(Ea,b9),e(Ea,U_),e(U_,y9),$(i,k2,y),$(i,ka,y),e(ka,mn),e(mn,R_),h(ll,R_,null),e(ka,$9),e(ka,B_),e(B_,w9),$(i,I2,y),$(i,hn,y),e(hn,D9),e(hn,H_),e(H_,x9),e(hn,E9),$(i,N2,y),$(i,w,y),h(dl,w,null),e(w,k9),e(w,G_),e(G_,I9),e(w,N9),e(w,fn),h(cl,fn,null),e(fn,T9),e(fn,K_),e(K_,P9),e(w,A9),e(w,un),h(pl,un,null),e(un,F9),e(un,W_),e(W_,L9),e(w,O9),e(w,gn),h(ml,gn,null),e(gn,S9),e(gn,Y_),e(Y_,C9),e(w,j9),e(w,_n),h(hl,_n,null),e(_n,q9),e(_n,fl),e(fl,z9),e(fl,vn),e(vn,V9),e(vn,J_),e(J_,M9),e(vn,U9),e(fl,R9),e(w,B9),e(w,bn),h(ul,bn,null),e(bn,H9),e(bn,X_),e(X_,G9),e(w,K9),e(w,yn),h(gl,yn,null),e(yn,W9),e(yn,Z_),e(Z_,Y9),e(w,J9),e(w,Lt),h(_l,Lt,null),e(Lt,X9),e(Lt,Q_),e(Q_,Z9),e(Lt,Q9),e(Lt,e1),e(e1,eN),e(w,tN),e(w,$n),h(vl,$n,null),e($n,aN),e($n,t1),e(t1,sN),e(w,nN),e(w,wn),h(bl,wn,null),e(wn,rN),e(wn,a1),e(a1,oN),e(w,iN),e(w,Dn),h(yl,Dn,null),e(Dn,lN),e(Dn,s1),e(s1,dN),e(w,cN),e(w,Ot),h($l,Ot,null),e(Ot,pN),e(Ot,n1),e(n1,mN),e(Ot,hN),e(Ot,r1),e(r1,fN),e(w,uN),e(w,Oe),h(wl,Oe,null),e(Oe,gN),e(Oe,o1),e(o1,_N),e(Oe,vN),e(Oe,i1),e(i1,bN),e(Oe,yN),e(Oe,l1),e(l1,$N),e(w,wN),e(w,Se),h(Dl,Se,null),e(Se,DN),e(Se,xl),e(xl,xN),e(xl,d1),e(d1,EN),e(xl,kN),e(Se,IN),e(Se,we),e(we,NN),e(we,c1),e(c1,TN),e(we,PN),e(we,p1),e(p1,AN),e(we,FN),e(we,m1),e(m1,LN),e(we,ON),e(we,h1),e(h1,SN),e(we,CN),e(Se,jN),e(Se,f1),e(f1,qN),e(w,zN),e(w,St),h(El,St,null),e(St,VN),e(St,kl),e(kl,MN),e(kl,u1),e(u1,UN),e(kl,RN),e(St,BN),e(St,lm),e(lm,HN),e(lm,g1),e(g1,GN),e(w,KN),e(w,xn),h(Il,xn,null),e(xn,WN),e(xn,Ia),e(Ia,YN),e(Ia,_1),e(_1,JN),e(Ia,XN),e(Ia,v1),e(v1,ZN),e(Ia,QN),e(w,eT),e(w,Ce),h(Nl,Ce,null),e(Ce,tT),e(Ce,it),e(it,aT),e(it,b1),e(b1,sT),e(it,nT),e(it,y1),e(y1,rT),e(it,oT),e(it,$1),e($1,iT),e(it,lT),e(Ce,dT),e(Ce,Tl),e(Tl,cT),e(Tl,dm),e(dm,pT),e(Tl,mT),e(Ce,hT),e(Ce,Na),e(Na,fT),e(Na,cm),e(cm,uT),e(Na,gT),e(Na,w1),e(w1,_T),e(Na,vT),e(w,bT),e(w,je),h(Pl,je,null),e(je,yT),e(je,Ta),e(Ta,$T),e(Ta,D1),e(D1,wT),e(Ta,DT),e(Ta,x1),e(x1,xT),e(Ta,ET),e(je,kT),e(je,Pa),e(Pa,IT),e(Pa,pm),e(pm,NT),e(Pa,TT),e(Pa,mm),e(mm,PT),e(Pa,AT),e(je,FT),e(je,Aa),e(Aa,LT),e(Aa,E1),e(E1,OT),e(Aa,ST),e(Aa,k1),e(k1,CT),e(Aa,jT),e(w,qT),e(w,En),h(Al,En,null),e(En,zT),e(En,I1),e(I1,VT),e(w,MT),e(w,Ct),h(Fl,Ct,null),e(Ct,UT),e(Ct,N1),e(N1,RT),e(Ct,BT),e(Ct,lt),e(lt,HT),e(lt,hm),e(hm,GT),e(lt,KT),e(lt,T1),e(T1,WT),e(lt,YT),e(lt,P1),e(P1,JT),e(lt,XT),e(w,ZT),e(w,kn),h(Ll,kn,null),e(kn,QT),e(kn,A1),e(A1,eP),e(w,tP),e(w,qe),h(Ol,qe,null),e(qe,aP),e(qe,F1),e(F1,sP),e(qe,nP),e(qe,L1),e(L1,rP),e(qe,oP),e(qe,Fa),e(Fa,iP),e(Fa,fm),e(fm,lP),e(Fa,dP),e(Fa,O1),e(O1,cP),e(Fa,pP),e(w,mP),e(w,ze),h(Sl,ze,null),e(ze,hP),e(ze,S1),e(S1,fP),e(ze,uP),e(ze,La),e(La,gP),e(La,um),e(um,_P),e(La,vP),e(La,C1),e(C1,bP),e(La,yP),e(ze,$P),e(ze,Cl),e(Cl,j1),e(j1,wP),e(Cl,DP),e(Cl,q1),e(q1,xP),e(w,EP),e(w,In),h(jl,In,null),e(In,kP),e(In,ql),e(ql,IP),e(ql,z1),e(z1,NP),e(ql,TP),e(w,PP),e(w,Z),h(zl,Z,null),e(Z,AP),e(Z,Oa),e(Oa,FP),e(Oa,V1),e(V1,LP),e(Oa,OP),e(Oa,M1),e(M1,SP),e(Oa,CP),e(Z,jP),e(Z,U1),e(U1,qP),e(Z,zP),e(Z,R1),e(R1,VP),e(Z,MP),e(Z,gm),e(gm,B1),e(B1,UP),e(gm,RP),e(Z,BP),e(Z,H1),e(H1,G1),e(G1,K1),e(K1,_m),e(_m,HP),e(_m,T2),e(w,GP),e(w,Nn),h(Vl,Nn,null),e(Nn,KP),e(Nn,Sa),e(Sa,WP),e(Sa,vm),e(vm,YP),e(Sa,JP),e(Sa,W1),e(W1,XP),e(Sa,ZP),e(w,QP),e(w,Tn),h(Ml,Tn,null),e(Tn,eA),e(Tn,dt),e(dt,tA),e(dt,Y1),e(Y1,aA),e(dt,sA),e(dt,bm),e(bm,nA),e(dt,rA),e(dt,J1),e(J1,oA),e(dt,iA),e(w,lA),e(w,Pn),h(Ul,Pn,null),e(Pn,dA),e(Pn,X1),e(X1,cA),e(w,pA),e(w,An),h(Rl,An,null),e(An,mA),e(An,Z1),e(Z1,hA),e(w,fA),e(w,Fn),h(Bl,Fn,null),e(Fn,uA),e(Fn,Q1),e(Q1,gA),e(w,_A),e(w,Ln),h(Hl,Ln,null),e(Ln,vA),e(Ln,ev),e(ev,bA),e(w,yA),e(w,jt),h(Gl,jt,null),e(jt,$A),e(jt,Ca),e(Ca,wA),e(Ca,ym),e(ym,DA),e(Ca,xA),e(Ca,$m),e($m,EA),e(Ca,kA),e(jt,IA),e(jt,ja),e(ja,NA),e(ja,tv),e(tv,TA),e(ja,PA),e(ja,av),e(av,AA),e(ja,FA),$(i,P2,y),$(i,wm,y),$(i,A2,y),$(i,qa,y),e(qa,On),e(On,sv),h(Kl,sv,null),e(qa,LA),e(qa,nv),e(nv,OA),$(i,F2,y),$(i,Sn,y),e(Sn,SA),e(Sn,Dm),e(Dm,CA),e(Sn,jA),$(i,L2,y),$(i,x,y),h(Wl,x,null),e(x,qA),e(x,rv),e(rv,zA),e(x,VA),e(x,Cn),h(Yl,Cn,null),e(Cn,MA),e(Cn,ov),e(ov,UA),e(x,RA),e(x,jn),h(Jl,jn,null),e(jn,BA),e(jn,iv),e(iv,HA),e(x,GA),e(x,xm),h(Xl,xm,null),e(x,KA),e(x,Ve),h(Zl,Ve,null),e(Ve,WA),e(Ve,lv),e(lv,YA),e(Ve,JA),e(Ve,Ql),e(Ql,XA),e(Ql,dv),e(dv,ZA),e(Ql,QA),e(Ve,eF),e(Ve,za),e(za,cv),e(cv,tF),e(za,aF),e(za,pv),e(pv,sF),e(za,nF),e(za,le),e(le,rF),e(le,mv),e(mv,oF),e(le,iF),e(le,hv),e(hv,lF),e(le,dF),e(le,fv),e(fv,cF),e(le,pF),e(le,uv),e(uv,mF),e(le,hF),e(le,gv),e(gv,fF),e(le,uF),e(x,gF),e(x,qn),h(ed,qn,null),e(qn,_F),e(qn,_v),e(_v,vF),e(x,bF),e(x,me),h(td,me,null),e(me,yF),e(me,vv),e(vv,$F),e(me,wF),e(me,bv),e(bv,DF),e(me,xF),e(me,ad),e(ad,EF),e(ad,yv),e(yv,kF),e(ad,IF),e(me,NF),e(me,Va),e(Va,TF),e(Va,Em),e(Em,PF),e(Va,AF),e(Va,km),e(km,FF),e(Va,LF),e(x,OF),e(x,zn),h(sd,zn,null),e(zn,SF),e(zn,nd),e(nd,CF),e(nd,$v),e($v,jF),e(nd,qF),e(x,zF),e(x,Vn),h(rd,Vn,null),e(Vn,VF),e(Vn,od),e(od,MF),e(od,wv),e(wv,UF),e(od,RF),e(x,BF),e(x,Mn),h(id,Mn,null),e(Mn,HF),e(Mn,Im),e(Im,Nm),e(Nm,GF),e(Im,KF),e(x,WF),e(x,Un),h(ld,Un,null),e(Un,YF),e(Un,Tm),e(Tm,Pm),e(Pm,JF),e(Tm,XF),e(x,ZF),e(x,Am),h(dd,Am,null),e(x,QF),e(x,Fm),h(cd,Fm,null),e(x,eL),e(x,Lm),h(pd,Lm,null),e(x,tL),e(x,Om),h(md,Om,null),e(x,aL),e(x,Sm),h(hd,Sm,null),e(x,sL),e(x,Cm),h(fd,Cm,null),e(x,nL),e(x,jm),h(ud,jm,null),e(x,rL),e(x,qm),h(gd,qm,null),e(x,oL),e(x,zm),h(_d,zm,null),e(x,iL),e(x,Vm),h(vd,Vm,null),e(x,lL),e(x,Mm),h(bd,Mm,null),e(x,dL),e(x,Um),h(yd,Um,null),e(x,cL),e(x,Rm),h($d,Rm,null),$(i,O2,y),$(i,Ma,y),e(Ma,Rn),e(Rn,Dv),h(wd,Dv,null),e(Ma,pL),e(Ma,xv),e(xv,mL),$(i,S2,y),$(i,Bn,y),e(Bn,hL),e(Bn,Ev),e(Ev,fL),e(Bn,uL),$(i,C2,y),$(i,Dd,y),h(xd,Dd,null),$(i,j2,y),$(i,Ua,y),e(Ua,Hn),e(Hn,kv),h(Ed,kv,null),e(Ua,gL),e(Ua,Iv),e(Iv,_L),$(i,q2,y),$(i,N,y),h(kd,N,null),e(N,vL),e(N,Nv),e(Nv,bL),e(N,yL),e(N,Id),e(Id,$L),e(Id,Tv),e(Tv,wL),e(Id,DL),e(N,xL),e(N,Bm),e(Bm,Pv),e(Pv,EL),e(Bm,kL),e(N,IL),e(N,M),e(M,Av),e(Av,qt),e(qt,NL),e(qt,Hm),e(Hm,TL),e(qt,PL),e(qt,Fv),e(Fv,AL),e(qt,FL),e(qt,Lv),e(Lv,LL),e(M,OL),e(M,Ov),e(Ov,Nd),e(Nd,SL),e(Nd,Gm),e(Gm,CL),e(Nd,jL),e(M,qL),e(M,Sv),e(Sv,Td),e(Td,zL),e(Td,Cv),e(Cv,VL),e(Td,ML),e(M,UL),e(M,Pd),e(Pd,De),e(De,RL),e(De,jv),e(jv,BL),e(De,HL),e(De,Km),e(Km,GL),e(De,KL),e(De,qv),e(qv,WL),e(De,YL),e(De,Wm),e(Wm,JL),e(De,XL),e(Pd,ZL),h(Gn,Pd,null),e(M,QL),e(M,zv),e(zv,xe),e(xe,eO),e(xe,Ym),e(Ym,tO),e(xe,aO),e(xe,Jm),e(Jm,sO),e(xe,nO),e(xe,Xm),e(Xm,rO),e(xe,oO),e(xe,Zm),e(Zm,iO),e(xe,lO),e(M,dO),e(M,Vv),e(Vv,Ad),e(Ad,cO),e(Ad,Qm),e(Qm,pO),e(Ad,mO),e(M,hO),e(M,Mv),e(Mv,ct),e(ct,fO),e(ct,eh),e(eh,uO),e(ct,gO),e(ct,Uv),e(Uv,_O),e(ct,vO),e(ct,Rv),e(Rv,bO),e(ct,yO),e(M,$O),e(M,Bv),e(Bv,Kn),e(Kn,th),e(th,wO),e(Kn,DO),e(Kn,ah),e(ah,xO),e(Kn,EO),e(N,kO),e(N,Wn),h(Fd,Wn,null),e(Wn,IO),e(Wn,Hv),e(Hv,NO),e(N,TO),e(N,Yn),h(Ld,Yn,null),e(Yn,PO),e(Yn,Gv),e(Gv,AO),e(N,FO),e(N,Jn),h(Od,Jn,null),e(Jn,LO),e(Jn,Kv),e(Kv,OO),e(N,SO),e(N,Xn),h(Sd,Xn,null),e(Xn,CO),e(Xn,Wv),e(Wv,jO),e(N,qO),e(N,Zn),h(Cd,Zn,null),e(Zn,zO),e(Zn,Yv),e(Yv,VO),e(N,MO),e(N,Qn),h(jd,Qn,null),e(Qn,UO),e(Qn,Jv),e(Jv,RO),e(N,BO),e(N,zt),h(qd,zt,null),e(zt,HO),e(zt,Xv),e(Xv,GO),e(zt,KO),e(zt,Zv),e(Zv,WO),e(N,YO),e(N,er),h(zd,er,null),e(er,JO),e(er,Qv),e(Qv,XO),e(N,ZO),e(N,Q),h(Vd,Q,null),e(Q,QO),e(Q,eb),e(eb,eS),e(Q,tS),e(Q,tb),e(tb,aS),e(Q,sS),e(Q,pt),e(pt,nS),e(pt,sh),e(sh,rS),e(pt,oS),e(pt,nh),e(nh,iS),e(pt,lS),e(pt,rh),e(rh,dS),e(pt,cS),e(Q,pS),e(Q,ab),e(ab,mS),e(Q,hS),h(Md,Q,null),e(N,fS),e(N,he),h(Ud,he,null),e(he,uS),e(he,sb),e(sb,gS),e(he,_S),e(he,nb),e(nb,vS),e(he,bS),e(he,rb),e(rb,yS),e(he,$S),h(Rd,he,null),$(i,z2,y),$(i,Ra,y),h(Bd,Ra,null),e(Ra,wS),e(Ra,ob),e(ob,DS),$(i,V2,y),$(i,H,y),h(Hd,H,null),e(H,xS),e(H,ib),e(ib,ES),e(H,kS),e(H,Gd),e(Gd,IS),e(Gd,lb),e(lb,NS),e(Gd,TS),e(H,PS),e(H,Ba),e(Ba,oh),e(oh,db),e(db,AS),e(oh,FS),e(Ba,LS),e(Ba,ih),e(ih,cb),e(cb,OS),e(ih,SS),e(Ba,CS),e(Ba,lh),e(lh,pb),e(pb,jS),e(lh,qS),e(H,zS),e(H,tr),h(Kd,tr,null),e(tr,VS),e(tr,mb),e(mb,MS),e(H,US),e(H,ar),h(Wd,ar,null),e(ar,RS),e(ar,hb),e(hb,BS),$(i,M2,y),$(i,mt,y),h(Yd,mt,null),e(mt,HS),e(mt,fb),e(fb,GS),e(mt,KS),e(mt,ub),e(ub,WS),$(i,U2,y),$(i,G,y),h(Jd,G,null),e(G,YS),e(G,dh),e(dh,gb),e(gb,JS),e(dh,XS),e(G,ZS),e(G,_b),e(_b,QS),e(G,eC),e(G,Xd),e(Xd,tC),e(Xd,vb),e(vb,aC),e(Xd,sC),e(G,nC),e(G,bb),e(bb,rC),e(G,oC),h(Zd,G,null),$(i,R2,y),$(i,K,y),h(Qd,K,null),e(K,iC),e(K,ch),e(ch,yb),e(yb,lC),e(ch,dC),e(K,cC),e(K,$b),e($b,pC),e(K,mC),e(K,wb),e(wb,hC),e(K,fC),e(K,Db),e(Db,uC),e(K,gC),h(ec,K,null),$(i,B2,y),$(i,tc,y),h(ac,tc,null),$(i,H2,y),$(i,sc,y),h(nc,sc,null),$(i,G2,y),$(i,rc,y),h(oc,rc,null),$(i,K2,y),$(i,ic,y),h(lc,ic,null),$(i,W2,y),$(i,F,y),h(dc,F,null),e(F,_C),e(F,xb),e(xb,vC),e(F,bC),e(F,Eb),e(Eb,yC),e(F,$C),e(F,cc),e(cc,kb),e(kb,pc),e(pc,wC),e(pc,Ib),e(Ib,DC),e(pc,xC),e(cc,EC),e(cc,mc),e(mc,hc),e(hc,kC),e(hc,Nb),e(Nb,IC),e(hc,NC),e(mc,TC),e(mc,fc),e(fc,Tb),e(Tb,PC),e(fc,AC),e(fc,Pb),e(Pb,FC),e(F,LC),e(F,Ab),e(Ab,OC),e(F,SC),e(F,Fb),e(Fb,uc),e(uc,gc),e(gc,CC),e(gc,Lb),e(Lb,jC),e(gc,qC),e(uc,zC),e(uc,Ha),e(Ha,Ob),e(Ob,VC),e(Ha,MC),e(Ha,Sb),e(Sb,UC),e(Ha,RC),e(Ha,Cb),e(Cb,BC),e(F,HC),e(F,jb),e(jb,GC),e(F,KC),e(F,Vt),h(_c,Vt,null),e(Vt,WC),e(Vt,qb),e(qb,YC),e(Vt,JC),e(Vt,ht),e(ht,zb),e(zb,XC),e(ht,ZC),e(ht,Vb),e(Vb,QC),e(ht,ej),e(ht,Mb),e(Mb,tj),e(ht,aj),e(ht,Ub),e(Ub,sj),e(F,nj),e(F,sr),h(vc,sr,null),e(sr,rj),e(sr,Rb),e(Rb,oj),e(F,ij),e(F,nr),h(bc,nr,null),e(nr,lj),e(nr,Bb),e(Bb,dj),e(F,cj),e(F,rr),h(yc,rr,null),e(rr,pj),e(rr,Hb),e(Hb,mj),$(i,Y2,y),$(i,L,y),h($c,L,null),e(L,hj),e(L,Gb),e(Gb,fj),e(L,uj),e(L,Kb),e(Kb,gj),e(L,_j),e(L,wc),e(wc,Wb),e(Wb,Dc),e(Dc,vj),e(Dc,Yb),e(Yb,bj),e(Dc,yj),e(wc,$j),e(wc,xc),e(xc,Ec),e(Ec,wj),e(Ec,Jb),e(Jb,Dj),e(Ec,xj),e(xc,Ej),e(xc,kc),e(kc,Xb),e(Xb,kj),e(kc,Ij),e(kc,Zb),e(Zb,Nj),e(L,Tj),e(L,Qb),e(Qb,Pj),e(L,Aj),e(L,Ic),e(Ic,Nc),e(Nc,Fj),e(Nc,ey),e(ey,Lj),e(Nc,Oj),e(Ic,Sj),e(Ic,Tc),e(Tc,Cj),e(Tc,ty),e(ty,jj),e(Tc,qj),e(L,zj),e(L,Mt),h(Pc,Mt,null),e(Mt,Vj),e(Mt,ay),e(ay,Mj),e(Mt,Uj),e(Mt,Ee),e(Ee,sy),e(sy,Rj),e(Ee,Bj),e(Ee,ny),e(ny,Hj),e(Ee,Gj),e(Ee,ry),e(ry,Kj),e(Ee,Wj),e(Ee,oy),e(oy,Yj),e(Ee,Jj),e(Ee,iy),e(iy,Xj),e(L,Zj),e(L,or),h(Ac,or,null),e(or,Qj),e(or,ly),e(ly,eq),e(L,tq),e(L,ir),h(Fc,ir,null),e(ir,aq),e(ir,dy),e(dy,sq),e(L,nq),e(L,lr),h(Lc,lr,null),e(lr,rq),e(lr,cy),e(cy,oq),$(i,J2,y),$(i,Ga,y),e(Ga,dr),e(dr,py),h(Oc,py,null),e(Ga,iq),e(Ga,my),e(my,lq),$(i,X2,y),$(i,W,y),h(Sc,W,null),e(W,dq),e(W,hy),e(hy,cq),e(W,pq),e(W,ph),e(ph,fy),e(fy,mq),e(ph,hq),e(W,fq),e(W,uy),e(uy,uq),e(W,gq),e(W,cr),h(Cc,cr,null),e(cr,_q),e(cr,jc),e(jc,vq),e(jc,gy),e(gy,bq),e(jc,yq),e(W,$q),e(W,pr),h(qc,pr,null),e(pr,wq),e(pr,Ka),e(Ka,Dq),e(Ka,_y),e(_y,xq),e(Ka,Eq),e(Ka,vy),e(vy,kq),e(Ka,Iq),$(i,Z2,y),$(i,Wa,y),e(Wa,mr),e(mr,by),h(zc,by,null),e(Wa,Nq),e(Wa,yy),e(yy,Tq),$(i,Q2,y),$(i,Ut,y),e(Ut,Pq),e(Ut,$y),e($y,Aq),e(Ut,Fq),e(Ut,mh),e(mh,Lq),e(Ut,Oq),$(i,e$,y),$(i,Y,y),h(Vc,Y,null),e(Y,Sq),e(Y,wy),e(wy,Cq),e(Y,jq),e(Y,hr),h(Mc,hr,null),e(hr,qq),e(hr,Dy),e(Dy,zq),e(Y,Vq),e(Y,fr),h(Uc,fr,null),e(fr,Mq),e(fr,xy),e(xy,Uq),e(Y,Rq),e(Y,Rt),h(Rc,Rt,null),e(Rt,Bq),e(Rt,Ey),e(Ey,Hq),e(Rt,Gq),e(Rt,ky),e(ky,Kq),e(Y,Wq),e(Y,ur),h(Bc,ur,null),e(ur,Yq),e(ur,Iy),e(Iy,Jq),$(i,t$,y),$(i,Ya,y),e(Ya,gr),e(gr,Ny),h(Hc,Ny,null),e(Ya,Xq),e(Ya,Ty),e(Ty,Zq),$(i,a$,y),$(i,k,y),h(Gc,k,null),e(k,Qq),e(k,Py),e(Py,ez),e(k,tz),e(k,Ay),e(Ay,az),e(k,sz),e(k,ft),e(ft,nz),e(ft,Fy),e(Fy,rz),e(ft,oz),e(ft,Ly),e(Ly,iz),e(ft,lz),e(ft,Oy),e(Oy,dz),e(ft,cz),e(k,pz),e(k,Sy),e(Sy,mz),e(k,hz),e(k,Cy),e(Cy,fz),e(k,uz),e(k,jy),e(jy,gz),e(k,_z),e(k,Me),e(Me,qy),e(qy,vz),e(Me,bz),e(Me,Kc),e(Kc,yz),e(Me,$z),e(Me,zy),e(zy,wz),e(Me,Dz),e(Me,Wc),e(Wc,xz),e(Me,Ez),e(k,kz),e(k,Vy),e(Vy,Iz),e(k,Nz),e(k,My),e(My,Tz),e(k,Pz),h(Yc,k,null),e(k,Az),e(k,Ja),e(Ja,Fz),e(Ja,Uy),e(Uy,Lz),e(Ja,Oz),e(Ja,Ry),e(Ry,Sz),e(Ja,Cz),e(k,jz),h(Jc,k,null),e(k,qz),e(k,ut),e(ut,zz),e(ut,By),e(By,Vz),e(ut,Mz),e(ut,Hy),e(Hy,Uz),e(ut,Rz),e(ut,Gy),e(Gy,Bz),e(ut,Hz),e(k,Gz),h(Xc,k,null),e(k,Kz),e(k,Xa),e(Xa,Wz),e(Xa,Ky),e(Ky,Yz),e(Xa,Jz),e(Xa,Wy),e(Wy,Xz),e(Xa,Zz),e(k,Qz),h(Zc,k,null),e(k,eV),e(k,Yy),e(Yy,tV),e(k,aV),h(Qc,k,null),e(k,sV),e(k,_r),e(_r,vr),e(vr,Jy),h(ep,Jy,null),e(_r,nV),e(_r,Xy),e(Xy,rV),e(k,oV),e(k,U),e(U,iV),e(U,Zy),e(Zy,lV),e(U,dV),e(U,Qy),e(Qy,cV),e(U,pV),e(U,e2),e(e2,mV),e(U,hV),e(U,t2),e(t2,fV),e(U,uV),e(U,a2),e(a2,gV),e(U,_V),e(U,s2),e(s2,vV),e(U,bV),e(U,n2),e(n2,yV),e(U,$V),$(i,s$,y),$(i,Za,y),h(tp,Za,null),e(Za,wV),e(Za,Qa),e(Qa,DV),e(Qa,r2),e(r2,xV),e(Qa,EV),e(Qa,o2),e(o2,kV),e(Qa,IV),$(i,n$,y),$(i,es,y),h(ap,es,null),e(es,NV),e(es,i2),e(i2,TV),$(i,r$,y),$(i,ts,y),e(ts,br),e(br,l2),h(sp,l2,null),e(ts,PV),e(ts,d2),e(d2,AV),$(i,o$,y),$(i,as,y),h(np,as,null),e(as,FV),e(as,c2),e(c2,LV),i$=!0},p(i,[y]){const rp={};y&2&&(rp.$$scope={dirty:y,ctx:i}),Gn.$set(rp)},i(i){i$||(f(ue.$$.fragment,i),f(vt.$$.fragment,i),f(Jr.$$.fragment,i),f(Xr.$$.fragment,i),f(Qr.$$.fragment,i),f(eo.$$.fragment,i),f(to.$$.fragment,i),f(ao.$$.fragment,i),f(so.$$.fragment,i),f(no.$$.fragment,i),f(ro.$$.fragment,i),f(oo.$$.fragment,i),f(co.$$.fragment,i),f(po.$$.fragment,i),f(mo.$$.fragment,i),f(ho.$$.fragment,i),f(fo.$$.fragment,i),f(go.$$.fragment,i),f(_o.$$.fragment,i),f(vo.$$.fragment,i),f(bo.$$.fragment,i),f(yo.$$.fragment,i),f($o.$$.fragment,i),f(wo.$$.fragment,i),f(Do.$$.fragment,i),f(xo.$$.fragment,i),f(ko.$$.fragment,i),f(Io.$$.fragment,i),f(To.$$.fragment,i),f(Po.$$.fragment,i),f(Ao.$$.fragment,i),f(Fo.$$.fragment,i),f(Oo.$$.fragment,i),f(Co.$$.fragment,i),f(jo.$$.fragment,i),f(qo.$$.fragment,i),f(zo.$$.fragment,i),f(Mo.$$.fragment,i),f(Uo.$$.fragment,i),f(Ro.$$.fragment,i),f(Bo.$$.fragment,i),f(Ho.$$.fragment,i),f(Ko.$$.fragment,i),f(Yo.$$.fragment,i),f(Jo.$$.fragment,i),f(Xo.$$.fragment,i),f(Zo.$$.fragment,i),f(Qo.$$.fragment,i),f(ei.$$.fragment,i),f(ti.$$.fragment,i),f(si.$$.fragment,i),f(ni.$$.fragment,i),f(ri.$$.fragment,i),f(oi.$$.fragment,i),f(li.$$.fragment,i),f(di.$$.fragment,i),f(ci.$$.fragment,i),f(pi.$$.fragment,i),f(mi.$$.fragment,i),f(fi.$$.fragment,i),f(ui.$$.fragment,i),f(_i.$$.fragment,i),f(vi.$$.fragment,i),f(yi.$$.fragment,i),f($i.$$.fragment,i),f(wi.$$.fragment,i),f(Di.$$.fragment,i),f(xi.$$.fragment,i),f(Ei.$$.fragment,i),f(ki.$$.fragment,i),f(Ii.$$.fragment,i),f(Ni.$$.fragment,i),f(Ti.$$.fragment,i),f(Pi.$$.fragment,i),f(Ai.$$.fragment,i),f(Fi.$$.fragment,i),f(Li.$$.fragment,i),f(Oi.$$.fragment,i),f(Si.$$.fragment,i),f(Ci.$$.fragment,i),f(ji.$$.fragment,i),f(qi.$$.fragment,i),f(zi.$$.fragment,i),f(Vi.$$.fragment,i),f(Mi.$$.fragment,i),f(Ui.$$.fragment,i),f(Ri.$$.fragment,i),f(Bi.$$.fragment,i),f(Hi.$$.fragment,i),f(Gi.$$.fragment,i),f(Ki.$$.fragment,i),f(Wi.$$.fragment,i),f(Yi.$$.fragment,i),f(Xi.$$.fragment,i),f(Zi.$$.fragment,i),f(Qi.$$.fragment,i),f(el.$$.fragment,i),f(tl.$$.fragment,i),f(al.$$.fragment,i),f(nl.$$.fragment,i),f(ol.$$.fragment,i),f(il.$$.fragment,i),f(ll.$$.fragment,i),f(dl.$$.fragment,i),f(cl.$$.fragment,i),f(pl.$$.fragment,i),f(ml.$$.fragment,i),f(hl.$$.fragment,i),f(ul.$$.fragment,i),f(gl.$$.fragment,i),f(_l.$$.fragment,i),f(vl.$$.fragment,i),f(bl.$$.fragment,i),f(yl.$$.fragment,i),f($l.$$.fragment,i),f(wl.$$.fragment,i),f(Dl.$$.fragment,i),f(El.$$.fragment,i),f(Il.$$.fragment,i),f(Nl.$$.fragment,i),f(Pl.$$.fragment,i),f(Al.$$.fragment,i),f(Fl.$$.fragment,i),f(Ll.$$.fragment,i),f(Ol.$$.fragment,i),f(Sl.$$.fragment,i),f(jl.$$.fragment,i),f(zl.$$.fragment,i),f(Vl.$$.fragment,i),f(Ml.$$.fragment,i),f(Ul.$$.fragment,i),f(Rl.$$.fragment,i),f(Bl.$$.fragment,i),f(Hl.$$.fragment,i),f(Gl.$$.fragment,i),f(Kl.$$.fragment,i),f(Wl.$$.fragment,i),f(Yl.$$.fragment,i),f(Jl.$$.fragment,i),f(Xl.$$.fragment,i),f(Zl.$$.fragment,i),f(ed.$$.fragment,i),f(td.$$.fragment,i),f(sd.$$.fragment,i),f(rd.$$.fragment,i),f(id.$$.fragment,i),f(ld.$$.fragment,i),f(dd.$$.fragment,i),f(cd.$$.fragment,i),f(pd.$$.fragment,i),f(md.$$.fragment,i),f(hd.$$.fragment,i),f(fd.$$.fragment,i),f(ud.$$.fragment,i),f(gd.$$.fragment,i),f(_d.$$.fragment,i),f(vd.$$.fragment,i),f(bd.$$.fragment,i),f(yd.$$.fragment,i),f($d.$$.fragment,i),f(wd.$$.fragment,i),f(xd.$$.fragment,i),f(Ed.$$.fragment,i),f(kd.$$.fragment,i),f(Gn.$$.fragment,i),f(Fd.$$.fragment,i),f(Ld.$$.fragment,i),f(Od.$$.fragment,i),f(Sd.$$.fragment,i),f(Cd.$$.fragment,i),f(jd.$$.fragment,i),f(qd.$$.fragment,i),f(zd.$$.fragment,i),f(Vd.$$.fragment,i),f(Md.$$.fragment,i),f(Ud.$$.fragment,i),f(Rd.$$.fragment,i),f(Bd.$$.fragment,i),f(Hd.$$.fragment,i),f(Kd.$$.fragment,i),f(Wd.$$.fragment,i),f(Yd.$$.fragment,i),f(Jd.$$.fragment,i),f(Zd.$$.fragment,i),f(Qd.$$.fragment,i),f(ec.$$.fragment,i),f(ac.$$.fragment,i),f(nc.$$.fragment,i),f(oc.$$.fragment,i),f(lc.$$.fragment,i),f(dc.$$.fragment,i),f(_c.$$.fragment,i),f(vc.$$.fragment,i),f(bc.$$.fragment,i),f(yc.$$.fragment,i),f($c.$$.fragment,i),f(Pc.$$.fragment,i),f(Ac.$$.fragment,i),f(Fc.$$.fragment,i),f(Lc.$$.fragment,i),f(Oc.$$.fragment,i),f(Sc.$$.fragment,i),f(Cc.$$.fragment,i),f(qc.$$.fragment,i),f(zc.$$.fragment,i),f(Vc.$$.fragment,i),f(Mc.$$.fragment,i),f(Uc.$$.fragment,i),f(Rc.$$.fragment,i),f(Bc.$$.fragment,i),f(Hc.$$.fragment,i),f(Gc.$$.fragment,i),f(Yc.$$.fragment,i),f(Jc.$$.fragment,i),f(Xc.$$.fragment,i),f(Zc.$$.fragment,i),f(Qc.$$.fragment,i),f(ep.$$.fragment,i),f(tp.$$.fragment,i),f(ap.$$.fragment,i),f(sp.$$.fragment,i),f(np.$$.fragment,i),i$=!0)},o(i){u(ue.$$.fragment,i),u(vt.$$.fragment,i),u(Jr.$$.fragment,i),u(Xr.$$.fragment,i),u(Qr.$$.fragment,i),u(eo.$$.fragment,i),u(to.$$.fragment,i),u(ao.$$.fragment,i),u(so.$$.fragment,i),u(no.$$.fragment,i),u(ro.$$.fragment,i),u(oo.$$.fragment,i),u(co.$$.fragment,i),u(po.$$.fragment,i),u(mo.$$.fragment,i),u(ho.$$.fragment,i),u(fo.$$.fragment,i),u(go.$$.fragment,i),u(_o.$$.fragment,i),u(vo.$$.fragment,i),u(bo.$$.fragment,i),u(yo.$$.fragment,i),u($o.$$.fragment,i),u(wo.$$.fragment,i),u(Do.$$.fragment,i),u(xo.$$.fragment,i),u(ko.$$.fragment,i),u(Io.$$.fragment,i),u(To.$$.fragment,i),u(Po.$$.fragment,i),u(Ao.$$.fragment,i),u(Fo.$$.fragment,i),u(Oo.$$.fragment,i),u(Co.$$.fragment,i),u(jo.$$.fragment,i),u(qo.$$.fragment,i),u(zo.$$.fragment,i),u(Mo.$$.fragment,i),u(Uo.$$.fragment,i),u(Ro.$$.fragment,i),u(Bo.$$.fragment,i),u(Ho.$$.fragment,i),u(Ko.$$.fragment,i),u(Yo.$$.fragment,i),u(Jo.$$.fragment,i),u(Xo.$$.fragment,i),u(Zo.$$.fragment,i),u(Qo.$$.fragment,i),u(ei.$$.fragment,i),u(ti.$$.fragment,i),u(si.$$.fragment,i),u(ni.$$.fragment,i),u(ri.$$.fragment,i),u(oi.$$.fragment,i),u(li.$$.fragment,i),u(di.$$.fragment,i),u(ci.$$.fragment,i),u(pi.$$.fragment,i),u(mi.$$.fragment,i),u(fi.$$.fragment,i),u(ui.$$.fragment,i),u(_i.$$.fragment,i),u(vi.$$.fragment,i),u(yi.$$.fragment,i),u($i.$$.fragment,i),u(wi.$$.fragment,i),u(Di.$$.fragment,i),u(xi.$$.fragment,i),u(Ei.$$.fragment,i),u(ki.$$.fragment,i),u(Ii.$$.fragment,i),u(Ni.$$.fragment,i),u(Ti.$$.fragment,i),u(Pi.$$.fragment,i),u(Ai.$$.fragment,i),u(Fi.$$.fragment,i),u(Li.$$.fragment,i),u(Oi.$$.fragment,i),u(Si.$$.fragment,i),u(Ci.$$.fragment,i),u(ji.$$.fragment,i),u(qi.$$.fragment,i),u(zi.$$.fragment,i),u(Vi.$$.fragment,i),u(Mi.$$.fragment,i),u(Ui.$$.fragment,i),u(Ri.$$.fragment,i),u(Bi.$$.fragment,i),u(Hi.$$.fragment,i),u(Gi.$$.fragment,i),u(Ki.$$.fragment,i),u(Wi.$$.fragment,i),u(Yi.$$.fragment,i),u(Xi.$$.fragment,i),u(Zi.$$.fragment,i),u(Qi.$$.fragment,i),u(el.$$.fragment,i),u(tl.$$.fragment,i),u(al.$$.fragment,i),u(nl.$$.fragment,i),u(ol.$$.fragment,i),u(il.$$.fragment,i),u(ll.$$.fragment,i),u(dl.$$.fragment,i),u(cl.$$.fragment,i),u(pl.$$.fragment,i),u(ml.$$.fragment,i),u(hl.$$.fragment,i),u(ul.$$.fragment,i),u(gl.$$.fragment,i),u(_l.$$.fragment,i),u(vl.$$.fragment,i),u(bl.$$.fragment,i),u(yl.$$.fragment,i),u($l.$$.fragment,i),u(wl.$$.fragment,i),u(Dl.$$.fragment,i),u(El.$$.fragment,i),u(Il.$$.fragment,i),u(Nl.$$.fragment,i),u(Pl.$$.fragment,i),u(Al.$$.fragment,i),u(Fl.$$.fragment,i),u(Ll.$$.fragment,i),u(Ol.$$.fragment,i),u(Sl.$$.fragment,i),u(jl.$$.fragment,i),u(zl.$$.fragment,i),u(Vl.$$.fragment,i),u(Ml.$$.fragment,i),u(Ul.$$.fragment,i),u(Rl.$$.fragment,i),u(Bl.$$.fragment,i),u(Hl.$$.fragment,i),u(Gl.$$.fragment,i),u(Kl.$$.fragment,i),u(Wl.$$.fragment,i),u(Yl.$$.fragment,i),u(Jl.$$.fragment,i),u(Xl.$$.fragment,i),u(Zl.$$.fragment,i),u(ed.$$.fragment,i),u(td.$$.fragment,i),u(sd.$$.fragment,i),u(rd.$$.fragment,i),u(id.$$.fragment,i),u(ld.$$.fragment,i),u(dd.$$.fragment,i),u(cd.$$.fragment,i),u(pd.$$.fragment,i),u(md.$$.fragment,i),u(hd.$$.fragment,i),u(fd.$$.fragment,i),u(ud.$$.fragment,i),u(gd.$$.fragment,i),u(_d.$$.fragment,i),u(vd.$$.fragment,i),u(bd.$$.fragment,i),u(yd.$$.fragment,i),u($d.$$.fragment,i),u(wd.$$.fragment,i),u(xd.$$.fragment,i),u(Ed.$$.fragment,i),u(kd.$$.fragment,i),u(Gn.$$.fragment,i),u(Fd.$$.fragment,i),u(Ld.$$.fragment,i),u(Od.$$.fragment,i),u(Sd.$$.fragment,i),u(Cd.$$.fragment,i),u(jd.$$.fragment,i),u(qd.$$.fragment,i),u(zd.$$.fragment,i),u(Vd.$$.fragment,i),u(Md.$$.fragment,i),u(Ud.$$.fragment,i),u(Rd.$$.fragment,i),u(Bd.$$.fragment,i),u(Hd.$$.fragment,i),u(Kd.$$.fragment,i),u(Wd.$$.fragment,i),u(Yd.$$.fragment,i),u(Jd.$$.fragment,i),u(Zd.$$.fragment,i),u(Qd.$$.fragment,i),u(ec.$$.fragment,i),u(ac.$$.fragment,i),u(nc.$$.fragment,i),u(oc.$$.fragment,i),u(lc.$$.fragment,i),u(dc.$$.fragment,i),u(_c.$$.fragment,i),u(vc.$$.fragment,i),u(bc.$$.fragment,i),u(yc.$$.fragment,i),u($c.$$.fragment,i),u(Pc.$$.fragment,i),u(Ac.$$.fragment,i),u(Fc.$$.fragment,i),u(Lc.$$.fragment,i),u(Oc.$$.fragment,i),u(Sc.$$.fragment,i),u(Cc.$$.fragment,i),u(qc.$$.fragment,i),u(zc.$$.fragment,i),u(Vc.$$.fragment,i),u(Mc.$$.fragment,i),u(Uc.$$.fragment,i),u(Rc.$$.fragment,i),u(Bc.$$.fragment,i),u(Hc.$$.fragment,i),u(Gc.$$.fragment,i),u(Yc.$$.fragment,i),u(Jc.$$.fragment,i),u(Xc.$$.fragment,i),u(Zc.$$.fragment,i),u(Qc.$$.fragment,i),u(ep.$$.fragment,i),u(tp.$$.fragment,i),u(ap.$$.fragment,i),u(sp.$$.fragment,i),u(np.$$.fragment,i),i$=!1},d(i){t(O),i&&t(gt),i&&t(q),g(ue),i&&t(rs),i&&t(ge),g(vt),i&&t(m2),i&&t(B),g(Jr),g(Xr),g(Qr),i&&t(h2),i&&t(la),g(eo),i&&t(f2),i&&t(ls),i&&t(u2),i&&t(v),g(to),g(ao),g(so),g(no),g(ro),g(oo),g(co),g(po),g(mo),g(ho),g(fo),g(go),g(_o),g(vo),g(bo),g(yo),g($o),g(wo),g(Do),g(xo),g(ko),g(Io),g(To),g(Po),g(Ao),g(Fo),g(Oo),g(Co),g(jo),g(qo),g(zo),g(Mo),g(Uo),g(Ro),g(Bo),g(Ho),g(Ko),g(Yo),g(Jo),g(Xo),g(Zo),g(Qo),g(ei),g(ti),g(si),g(ni),g(ri),g(oi),g(li),g(di),g(ci),g(pi),g(mi),g(fi),g(ui),g(_i),g(vi),g(yi),g($i),g(wi),g(Di),g(xi),g(Ei),g(ki),g(Ii),g(Ni),g(Ti),g(Pi),g(Ai),g(Fi),g(Li),g(Oi),g(Si),g(Ci),g(ji),g(qi),g(zi),g(Vi),g(Mi),g(Ui),g(Ri),g(Bi),g(Hi),g(Gi),g(Ki),g(Wi),g(Yi),g(Xi),g(Zi),i&&t(y2),i&&t($a),g(Qi),i&&t($2),i&&t(V),g(el),g(tl),i&&t(w2),i&&t(oe),g(al),i&&t(D2),i&&t(ie),g(nl),i&&t(x2),i&&t(xa),g(ol),i&&t(E2),i&&t(Ea),g(il),i&&t(k2),i&&t(ka),g(ll),i&&t(I2),i&&t(hn),i&&t(N2),i&&t(w),g(dl),g(cl),g(pl),g(ml),g(hl),g(ul),g(gl),g(_l),g(vl),g(bl),g(yl),g($l),g(wl),g(Dl),g(El),g(Il),g(Nl),g(Pl),g(Al),g(Fl),g(Ll),g(Ol),g(Sl),g(jl),g(zl),g(Vl),g(Ml),g(Ul),g(Rl),g(Bl),g(Hl),g(Gl),i&&t(P2),i&&t(wm),i&&t(A2),i&&t(qa),g(Kl),i&&t(F2),i&&t(Sn),i&&t(L2),i&&t(x),g(Wl),g(Yl),g(Jl),g(Xl),g(Zl),g(ed),g(td),g(sd),g(rd),g(id),g(ld),g(dd),g(cd),g(pd),g(md),g(hd),g(fd),g(ud),g(gd),g(_d),g(vd),g(bd),g(yd),g($d),i&&t(O2),i&&t(Ma),g(wd),i&&t(S2),i&&t(Bn),i&&t(C2),i&&t(Dd),g(xd),i&&t(j2),i&&t(Ua),g(Ed),i&&t(q2),i&&t(N),g(kd),g(Gn),g(Fd),g(Ld),g(Od),g(Sd),g(Cd),g(jd),g(qd),g(zd),g(Vd),g(Md),g(Ud),g(Rd),i&&t(z2),i&&t(Ra),g(Bd),i&&t(V2),i&&t(H),g(Hd),g(Kd),g(Wd),i&&t(M2),i&&t(mt),g(Yd),i&&t(U2),i&&t(G),g(Jd),g(Zd),i&&t(R2),i&&t(K),g(Qd),g(ec),i&&t(B2),i&&t(tc),g(ac),i&&t(H2),i&&t(sc),g(nc),i&&t(G2),i&&t(rc),g(oc),i&&t(K2),i&&t(ic),g(lc),i&&t(W2),i&&t(F),g(dc),g(_c),g(vc),g(bc),g(yc),i&&t(Y2),i&&t(L),g($c),g(Pc),g(Ac),g(Fc),g(Lc),i&&t(J2),i&&t(Ga),g(Oc),i&&t(X2),i&&t(W),g(Sc),g(Cc),g(qc),i&&t(Z2),i&&t(Wa),g(zc),i&&t(Q2),i&&t(Ut),i&&t(e$),i&&t(Y),g(Vc),g(Mc),g(Uc),g(Rc),g(Bc),i&&t(t$),i&&t(Ya),g(Hc),i&&t(a$),i&&t(k),g(Gc),g(Yc),g(Jc),g(Xc),g(Zc),g(Qc),g(ep),i&&t(s$),i&&t(Za),g(tp),i&&t(n$),i&&t(es),g(ap),i&&t(r$),i&&t(ts),g(sp),i&&t(o$),i&&t(as),g(np)}}}const vX={local:"main-classes",sections:[{local:"datasets.DatasetInfo",title:"DatasetInfo"},{local:"datasets.Dataset",title:"Dataset"},{local:"datasets.DatasetDict",title:"DatasetDict"},{local:"datasets.IterableDataset",title:"IterableDataset"},{local:"datasets.IterableDatasetDict",title:"IterableDatasetDict"},{local:"datasets.Features",title:"Features"},{local:"datasets.MetricInfo",title:"MetricInfo"},{local:"datasets.Metric",title:"Metric"},{local:"datasets.filesystems.S3FileSystem",title:"Filesystems"},{local:"datasets.fingerprint.Hasher",title:"Fingerprint"}],title:"Main classes"};function bX(bf,O,gt){let{fw:q}=O;return bf.$$set=ne=>{"fw"in ne&&gt(0,q=ne.fw)},[q]}class EX extends pX{constructor(O){super();mX(this,O,bX,_X,hX,{fw:0})}}export{EX as default,vX as metadata};
